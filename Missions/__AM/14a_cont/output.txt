// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 62503 0 9
// PrepareAmerican ;
  46: CALL 4227 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 28135 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 28135 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 28135 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32975 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 64731 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32975 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 64731 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1834
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if planCaptured then
1803: LD_EXP 7
1807: IFFALSE 1811
// exit ;
1809: GO 1834
// if IsOk ( JMM ) then
1811: LD_EXP 14
1815: PPUSH
1816: CALL_OW 302
1820: IFFALSE 1834
// Say ( JMM , D8-JMM-1 ) ;
1822: LD_EXP 14
1826: PPUSH
1827: LD_STRING D8-JMM-1
1829: PPUSH
1830: CALL_OW 88
// end ;
1834: LD_VAR 0 4
1838: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1839: LD_EXP 9
1843: PUSH
1844: LD_EXP 7
1848: NOT
1849: AND
1850: PUSH
1851: LD_EXP 4
1855: AND
1856: IFFALSE 1911
1858: GO 1860
1860: DISABLE
// begin enable ;
1861: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1862: LD_INT 9
1864: PPUSH
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 70
1879: IFFALSE 1897
// stevensTimer := stevensTimer - 0 0$30 else
1881: LD_ADDR_EXP 9
1885: PUSH
1886: LD_EXP 9
1890: PUSH
1891: LD_INT 1050
1893: MINUS
1894: ST_TO_ADDR
1895: GO 1911
// stevensTimer := stevensTimer - 0 0$1 ;
1897: LD_ADDR_EXP 9
1901: PUSH
1902: LD_EXP 9
1906: PUSH
1907: LD_INT 35
1909: MINUS
1910: ST_TO_ADDR
// end ;
1911: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1912: LD_EXP 9
1916: PUSH
1917: LD_INT 0
1919: LESSEQUAL
1920: PUSH
1921: LD_EXP 7
1925: NOT
1926: AND
1927: IFFALSE 2091
1929: GO 1931
1931: DISABLE
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_INT 22
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 25
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in tmp do
1970: LD_ADDR_VAR 0 1
1974: PUSH
1975: LD_VAR 0 2
1979: PUSH
1980: FOR_IN
1981: IFFALSE 2034
// begin if IsInUnit ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 310
1992: IFFALSE 2005
// ComExitBuilding ( i ) else
1994: LD_VAR 0 1
1998: PPUSH
1999: CALL_OW 122
2003: GO 2032
// if not HasTask ( i ) then
2005: LD_VAR 0 1
2009: PPUSH
2010: CALL_OW 314
2014: NOT
2015: IFFALSE 2032
// ComMoveXY ( i , 29 , 56 ) ;
2017: LD_VAR 0 1
2021: PPUSH
2022: LD_INT 29
2024: PPUSH
2025: LD_INT 56
2027: PPUSH
2028: CALL_OW 111
// end ;
2032: GO 1980
2034: POP
2035: POP
// repeat wait ( 0 0$1 ) ;
2036: LD_INT 35
2038: PPUSH
2039: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2043: LD_INT 8
2045: PPUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 1
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 25
2058: PUSH
2059: LD_INT 4
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 70
2074: IFFALSE 2036
// if planCaptured then
2076: LD_EXP 7
2080: IFFALSE 2084
// exit ;
2082: GO 2091
// YouLost ( Time ) ;
2084: LD_STRING Time
2086: PPUSH
2087: CALL_OW 104
// end ;
2091: PPOPN 2
2093: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2094: LD_INT 22
2096: PUSH
2097: LD_INT 7
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 92
2106: PUSH
2107: LD_INT 142
2109: PUSH
2110: LD_INT 52
2112: PUSH
2113: LD_INT 27
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 69
2130: PUSH
2131: LD_EXP 3
2135: PUSH
2136: LD_INT 6000
2138: PLUS
2139: PUSH
2140: LD_OWVAR 1
2144: GREATER
2145: AND
2146: PUSH
2147: LD_EXP 4
2151: AND
2152: IFFALSE 2207
2154: GO 2156
2156: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2157: LD_EXP 14
2161: PUSH
2162: LD_EXP 15
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 85
// DialogueOn ;
2175: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2179: LD_EXP 14
2183: PPUSH
2184: LD_STRING D6b-JMM-1
2186: PPUSH
2187: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2191: LD_EXP 15
2195: PPUSH
2196: LD_STRING D6b-Bur-1
2198: PPUSH
2199: CALL_OW 88
// DialogueOff ;
2203: CALL_OW 7
// end ;
2207: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2208: LD_EXP 15
2212: PPUSH
2213: LD_INT 142
2215: PPUSH
2216: LD_INT 52
2218: PPUSH
2219: CALL_OW 297
2223: PUSH
2224: LD_INT 25
2226: LESS
2227: PUSH
2228: LD_EXP 15
2232: PPUSH
2233: CALL_OW 310
2237: PPUSH
2238: LD_INT 142
2240: PPUSH
2241: LD_INT 52
2243: PPUSH
2244: CALL_OW 297
2248: PUSH
2249: LD_INT 25
2251: LESS
2252: OR
2253: PUSH
2254: LD_EXP 15
2258: PPUSH
2259: CALL_OW 256
2263: PUSH
2264: LD_INT 1000
2266: LESS
2267: AND
2268: PUSH
2269: LD_EXP 3
2273: PUSH
2274: LD_INT 6000
2276: PLUS
2277: PUSH
2278: LD_OWVAR 1
2282: GREATER
2283: AND
2284: PUSH
2285: LD_EXP 4
2289: AND
2290: IFFALSE 2323
2292: GO 2294
2294: DISABLE
// begin DialogueOn ;
2295: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2299: LD_EXP 15
2303: PPUSH
2304: LD_STRING D7-Bur-1
2306: PPUSH
2307: CALL_OW 88
// enteredContaminatedArea := true ;
2311: LD_ADDR_EXP 5
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// DialogueOff ;
2319: CALL_OW 7
// end ;
2323: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2324: LD_EXP 14
2328: PPUSH
2329: LD_INT 142
2331: PPUSH
2332: LD_INT 52
2334: PPUSH
2335: CALL_OW 297
2339: PUSH
2340: LD_INT 25
2342: LESS
2343: PUSH
2344: LD_EXP 14
2348: PPUSH
2349: CALL_OW 310
2353: PPUSH
2354: LD_INT 142
2356: PPUSH
2357: LD_INT 52
2359: PPUSH
2360: CALL_OW 297
2364: PUSH
2365: LD_INT 25
2367: LESS
2368: OR
2369: PUSH
2370: LD_EXP 14
2374: PPUSH
2375: CALL_OW 256
2379: PUSH
2380: LD_INT 1000
2382: LESS
2383: AND
2384: PUSH
2385: LD_EXP 3
2389: PUSH
2390: LD_INT 6000
2392: PLUS
2393: PUSH
2394: LD_OWVAR 1
2398: GREATER
2399: AND
2400: PUSH
2401: LD_EXP 4
2405: AND
2406: IFFALSE 2439
2408: GO 2410
2410: DISABLE
// begin DialogueOn ;
2411: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2415: LD_EXP 14
2419: PPUSH
2420: LD_STRING D7-JMM-1
2422: PPUSH
2423: CALL_OW 88
// enteredContaminatedArea := true ;
2427: LD_ADDR_EXP 5
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// DialogueOff ;
2435: CALL_OW 7
// end ;
2439: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2440: LD_EXP 6
2444: PUSH
2445: LD_EXP 14
2449: PPUSH
2450: CALL_OW 302
2454: AND
2455: PUSH
2456: LD_EXP 15
2460: PPUSH
2461: CALL_OW 302
2465: AND
2466: IFFALSE 2535
2468: GO 2470
2470: DISABLE
// begin DialogueOn ;
2471: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2475: LD_EXP 14
2479: PUSH
2480: LD_EXP 15
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2493: LD_EXP 14
2497: PPUSH
2498: LD_STRING D4-JMM-1
2500: PPUSH
2501: CALL_OW 88
// if not bombExploded then
2505: LD_EXP 4
2509: NOT
2510: IFFALSE 2524
// Say ( Burlak , D4-Bur-1 ) ;
2512: LD_EXP 15
2516: PPUSH
2517: LD_STRING D4-Bur-1
2519: PPUSH
2520: CALL_OW 88
// DialogueOff ;
2524: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2528: LD_STRING MReturn
2530: PPUSH
2531: CALL_OW 337
// end ;
2535: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2536: LD_EXP 7
2540: NOT
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 91
2554: PUSH
2555: LD_INT 9
2557: PUSH
2558: LD_INT 6
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 69
2574: AND
2575: IFFALSE 2652
2577: GO 2579
2579: DISABLE
// begin DialogueOn ;
2580: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2584: LD_INT 55
2586: PPUSH
2587: LD_INT 11
2589: PPUSH
2590: LD_INT 7
2592: PPUSH
2593: LD_INT 6
2595: NEG
2596: PPUSH
2597: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2601: LD_INT 55
2603: PPUSH
2604: LD_INT 11
2606: PPUSH
2607: LD_INT 7
2609: PPUSH
2610: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2614: LD_EXP 15
2618: PPUSH
2619: LD_STRING D9-Bur-1
2621: PPUSH
2622: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2626: LD_EXP 14
2630: PPUSH
2631: LD_STRING D9-JMM-1
2633: PPUSH
2634: CALL_OW 88
// DialogueOff ;
2638: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2642: LD_INT 9
2644: PPUSH
2645: LD_INT 7
2647: PPUSH
2648: CALL_OW 235
// end ;
2652: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2653: LD_INT 9
2655: PPUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PPUSH
2666: CALL_OW 70
2670: IFFALSE 2706
2672: GO 2674
2674: DISABLE
// begin wait ( 0 0$07 ) ;
2675: LD_INT 245
2677: PPUSH
2678: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2682: LD_EXP 14
2686: PPUSH
2687: LD_STRING D10b-JMM-1
2689: PPUSH
2690: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D10b-Bur-1
2701: PPUSH
2702: CALL_OW 88
// end ;
2706: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2707: LD_EXP 9
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 26
2734: PUSH
2735: LD_INT 1
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: AND
2752: PUSH
2753: LD_INT 5
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 7
2763: EQUAL
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 1
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 25
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: OR
2798: AND
2799: IFFALSE 3470
2801: GO 2803
2803: DISABLE
2804: LD_INT 0
2806: PPUSH
// begin case Query ( QKill ) of 1 :
2807: LD_STRING QKill
2809: PPUSH
2810: CALL_OW 97
2814: PUSH
2815: LD_INT 1
2817: DOUBLE
2818: EQUAL
2819: IFTRUE 2823
2821: GO 3458
2823: POP
// begin DialogueOn ;
2824: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2828: LD_EXP 14
2832: PPUSH
2833: LD_STRING D10a-JMM-1
2835: PPUSH
2836: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2840: LD_EXP 15
2844: PPUSH
2845: LD_STRING D10a-Bur-1
2847: PPUSH
2848: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2852: LD_EXP 14
2856: PPUSH
2857: LD_STRING D10a-JMM-2
2859: PPUSH
2860: CALL_OW 88
// if IsOk ( Stevens ) then
2864: LD_EXP 18
2868: PPUSH
2869: CALL_OW 302
2873: IFFALSE 2889
// Say ( Stevens , D10a-Huck-2 ) else
2875: LD_EXP 18
2879: PPUSH
2880: LD_STRING D10a-Huck-2
2882: PPUSH
2883: CALL_OW 88
2887: GO 3022
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) then
2889: LD_INT 22
2891: PUSH
2892: LD_INT 1
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 25
2901: PUSH
2902: LD_INT 4
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 26
2911: PUSH
2912: LD_INT 1
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: NOT
2929: IFFALSE 2971
// begin uc_side := 1 ;
2931: LD_ADDR_OWVAR 20
2935: PUSH
2936: LD_INT 1
2938: ST_TO_ADDR
// uc_nation := 1 ;
2939: LD_ADDR_OWVAR 21
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 10
2952: PPUSH
2953: CALL_OW 384
// Say ( CreateHuman , D10a-ASci1-3 ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_STRING D10a-ASci1-3
2964: PPUSH
2965: CALL_OW 88
// end else
2969: GO 3022
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2971: LD_INT 22
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 25
2983: PUSH
2984: LD_INT 4
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 26
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_STRING D10a-ASci1-3
3017: PPUSH
3018: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
3022: LD_EXP 14
3026: PPUSH
3027: LD_STRING D10a-JMM-4
3029: PPUSH
3030: CALL_OW 88
// if IsOk ( Stevens ) then
3034: LD_EXP 18
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3057
// Say ( Stevens , D10a-Huck-3 ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_STRING D10a-Huck-3
3052: PPUSH
3053: CALL_OW 88
// DialogueOff ;
3057: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
// planCaptured := true ;
3077: LD_ADDR_EXP 7
3081: PUSH
3082: LD_INT 1
3084: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
3085: LD_STRING MEnd
3087: PPUSH
3088: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3092: LD_STRING ACH_DIPLOMACY
3094: PPUSH
3095: CALL_OW 543
// canEnd := true ;
3099: LD_ADDR_EXP 10
3103: PUSH
3104: LD_INT 1
3106: ST_TO_ADDR
// missionTime := tick ;
3107: LD_ADDR_EXP 11
3111: PUSH
3112: LD_OWVAR 1
3116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3117: LD_INT 35
3119: PPUSH
3120: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3124: LD_INT 22
3126: PUSH
3127: LD_INT 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: LD_INT 50
3139: PUSH
3140: EMPTY
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: IFFALSE 3271
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3157: LD_ADDR_VAR 0 1
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 25
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3269
// begin if IsInUnit ( i ) then
3194: LD_VAR 0 1
3198: PPUSH
3199: CALL_OW 310
3203: IFFALSE 3216
// ComExitBuilding ( i ) else
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 122
3214: GO 3267
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3216: LD_VAR 0 1
3220: PPUSH
3221: LD_INT 22
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_VAR 0 1
3257: PPUSH
3258: CALL_OW 74
3262: PPUSH
3263: CALL_OW 128
// end ;
3267: GO 3191
3269: POP
3270: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3271: LD_INT 22
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: LD_INT 50
3286: PUSH
3287: EMPTY
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: IFFALSE 3117
// repeat wait ( 3 ) ;
3305: LD_INT 3
3307: PPUSH
3308: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 1
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 1
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3423
// begin if IsInArea ( i , stevensEscapeArea ) then
3349: LD_VAR 0 1
3353: PPUSH
3354: LD_INT 8
3356: PPUSH
3357: CALL_OW 308
3361: IFFALSE 3374
// begin RemoveUnit ( i ) ;
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 64
// continue ;
3372: GO 3346
// end ; if IsInUnit ( i ) then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 310
3383: IFFALSE 3394
// ComExitBuilding ( i ) ;
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 122
// if not HasTask ( i ) then
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 314
3403: NOT
3404: IFFALSE 3421
// ComMoveXY ( i , 28 , 55 ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: LD_INT 28
3413: PPUSH
3414: LD_INT 55
3416: PPUSH
3417: CALL_OW 111
// end ;
3421: GO 3346
3423: POP
3424: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3425: LD_INT 22
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: NOT
3454: IFFALSE 3305
// end ; 2 :
3456: GO 3470
3458: LD_INT 2
3460: DOUBLE
3461: EQUAL
3462: IFTRUE 3466
3464: GO 3469
3466: POP
// ; end ;
3467: GO 3470
3469: POP
// end ;
3470: PPOPN 1
3472: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3473: LD_EXP 10
3477: IFFALSE 3834
3479: GO 3481
3481: DISABLE
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3487: LD_INT 10
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: CALL_OW 424
// if Difficulty < 2 then
3497: LD_OWVAR 67
3501: PUSH
3502: LD_INT 2
3504: LESS
3505: IFFALSE 3509
// exit ;
3507: GO 3834
// uc_side := 4 ;
3509: LD_ADDR_OWVAR 20
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// uc_nation := 1 ;
3517: LD_ADDR_OWVAR 21
3521: PUSH
3522: LD_INT 1
3524: ST_TO_ADDR
// InitHc ;
3525: CALL_OW 19
// tmp := [ ] ;
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: LD_INT 10
3544: PPUSH
3545: CALL_OW 380
// un := CreateHuman ;
3549: LD_ADDR_VAR 0 1
3553: PUSH
3554: CALL_OW 44
3558: ST_TO_ADDR
// tmp := [ un ] ;
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 226
3579: PPUSH
3580: LD_INT 86
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 48
// ComHold ( un ) ;
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 140
// for i = 1 to 3 do
3599: LD_ADDR_VAR 0 2
3603: PUSH
3604: DOUBLE
3605: LD_INT 1
3607: DEC
3608: ST_TO_ADDR
3609: LD_INT 3
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3712
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 8
3623: PPUSH
3624: CALL_OW 380
// un := CreateHuman ;
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 215
3657: PUSH
3658: LD_INT 217
3660: PUSH
3661: LD_INT 219
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_VAR 0 2
3673: ARRAY
3674: PPUSH
3675: LD_INT 76
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 48
// ComCrawl ( un ) ;
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 137
// tmp := tmp ^ un ;
3694: LD_ADDR_VAR 0 3
3698: PUSH
3699: LD_VAR 0 3
3703: PUSH
3704: LD_VAR 0 1
3708: ADD
3709: ST_TO_ADDR
// end ;
3710: GO 3612
3712: POP
3713: POP
// repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_INT 24
3728: PUSH
3729: LD_INT 1000
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 72
3740: NOT
3741: IFFALSE 3714
// for i in tmp do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: LD_VAR 0 3
3752: PUSH
3753: FOR_IN
3754: IFFALSE 3832
// begin wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if Crawls ( i ) then
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 318
3772: IFFALSE 3785
// ComWalk ( i ) else
3774: LD_VAR 0 2
3778: PPUSH
3779: CALL_OW 138
3783: GO 3830
// if GetClass ( i ) = class_sniper then
3785: LD_VAR 0 2
3789: PPUSH
3790: CALL_OW 257
3794: PUSH
3795: LD_INT 5
3797: EQUAL
3798: IFFALSE 3816
// ComAttackSoporific ( i , JMM ) else
3800: LD_VAR 0 2
3804: PPUSH
3805: LD_EXP 14
3809: PPUSH
3810: CALL_OW 166
3814: GO 3830
// ComAttackUnit ( i , JMM ) ;
3816: LD_VAR 0 2
3820: PPUSH
3821: LD_EXP 14
3825: PPUSH
3826: CALL_OW 115
// end ;
3830: GO 3753
3832: POP
3833: POP
// end ;
3834: PPOPN 3
3836: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3837: LD_EXP 7
3841: NOT
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: CALL_OW 301
3850: AND
3851: IFFALSE 3863
3853: GO 3855
3855: DISABLE
// YouLost ( Lab ) ;
3856: LD_STRING Lab
3858: PPUSH
3859: CALL_OW 104
3863: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3864: LD_INT 10
3866: PPUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 7
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 70
3881: PUSH
3882: LD_INT 2
3884: GREATEREQUAL
3885: PUSH
3886: LD_INT 10
3888: PPUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 58
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 34
3907: PUSH
3908: LD_INT 12
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 34
3917: PUSH
3918: LD_INT 51
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 70
3938: AND
3939: PUSH
3940: LD_EXP 10
3944: AND
3945: PUSH
3946: LD_EXP 7
3950: AND
3951: PUSH
3952: LD_EXP 6
3956: AND
3957: IFFALSE 4224
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
3965: PPUSH
// begin m1 := false ;
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// m2 := false ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// if killCounter = 0 then
3982: LD_EXP 12
3986: PUSH
3987: LD_INT 0
3989: EQUAL
3990: IFFALSE 3999
// SetAchievement ( ACH_PACIFIST ) ;
3992: LD_STRING ACH_PACIFIST
3994: PPUSH
3995: CALL_OW 543
// if tick < 7 7$00 then
3999: LD_OWVAR 1
4003: PUSH
4004: LD_INT 14700
4006: LESS
4007: IFFALSE 4023
// begin wait ( 3 ) ;
4009: LD_INT 3
4011: PPUSH
4012: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
4016: LD_STRING ACH_ASPEED_18
4018: PPUSH
4019: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
4023: LD_STRING Explosion
4025: PPUSH
4026: LD_INT 1
4028: PPUSH
4029: CALL_OW 101
// if enteredContaminatedArea then
4033: LD_EXP 5
4037: IFFALSE 4059
// begin m1 := true ;
4039: LD_ADDR_VAR 0 1
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
4047: LD_STRING BioHazard
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: CALL_OW 101
// end else
4057: GO 4070
// AddMedal ( BioHazard , - 1 ) ;
4059: LD_STRING BioHazard
4061: PPUSH
4062: LD_INT 1
4064: NEG
4065: PPUSH
4066: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
4070: LD_EXP 11
4074: PUSH
4075: LD_INT 42000
4077: PUSH
4078: LD_INT 31500
4080: PUSH
4081: LD_INT 25200
4083: PUSH
4084: LD_INT 24150
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: LD_OWVAR 67
4097: ARRAY
4098: LESSEQUAL
4099: IFFALSE 4121
// begin m2 := true ;
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_INT 1
4108: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4109: LD_STRING Speed
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: CALL_OW 101
// end else
4119: GO 4132
// AddMedal ( Speed , - 1 ) ;
4121: LD_STRING Speed
4123: PPUSH
4124: LD_INT 1
4126: NEG
4127: PPUSH
4128: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 3
4139: GREATEREQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: AND
4146: PUSH
4147: LD_VAR 0 2
4151: AND
4152: IFFALSE 4164
// SetAchievementEX ( ACH_AMER , 18 ) ;
4154: LD_STRING ACH_AMER
4156: PPUSH
4157: LD_INT 18
4159: PPUSH
4160: CALL_OW 564
// GiveMedals ( Main ) ;
4164: LD_STRING Main
4166: PPUSH
4167: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4171: LD_EXP 14
4175: PUSH
4176: LD_EXP 15
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4189: LD_EXP 14
4193: PPUSH
4194: LD_STRING 14a_JMM
4196: PPUSH
4197: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4201: LD_EXP 15
4205: PPUSH
4206: LD_STRING 14a_Burlak
4208: PPUSH
4209: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4213: LD_STRING enableBioCharacter(BIO_HUGH)
4215: PPUSH
4216: CALL_OW 559
// YouWin ;
4220: CALL_OW 103
// end ; end_of_file
4224: PPOPN 2
4226: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4227: LD_INT 0
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
// uc_side := 1 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 1
4240: ST_TO_ADDR
// uc_nation := 1 ;
4241: LD_ADDR_OWVAR 21
4245: PUSH
4246: LD_INT 1
4248: ST_TO_ADDR
// InitHc ;
4249: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4253: LD_INT 34
4255: PPUSH
4256: CALL_OW 274
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 750
4266: PPUSH
4267: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4271: LD_INT 34
4273: PPUSH
4274: CALL_OW 274
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 20
4284: PPUSH
4285: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4289: LD_ADDR_EXP 18
4293: PUSH
4294: LD_STRING Stevens
4296: PPUSH
4297: CALL_OW 25
4301: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4302: LD_ADDR_EXP 19
4306: PUSH
4307: LD_STRING Powell
4309: PPUSH
4310: CALL_OW 25
4314: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4315: LD_EXP 18
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 52
// vehGuard := [ ] ;
4327: LD_ADDR_EXP 23
4331: PUSH
4332: EMPTY
4333: ST_TO_ADDR
// hc_importance := 0 ;
4334: LD_ADDR_OWVAR 32
4338: PUSH
4339: LD_INT 0
4341: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 8
4353: PPUSH
4354: LD_INT 100
4356: PPUSH
4357: CALL 32975 0 5
// sibBomb := CreateVehicle ;
4361: LD_ADDR_EXP 21
4365: PUSH
4366: CALL_OW 45
4370: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4371: LD_EXP 21
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4383: LD_EXP 21
4387: PPUSH
4388: LD_INT 93
4390: PPUSH
4391: LD_INT 74
4393: PPUSH
4394: LD_INT 0
4396: PPUSH
4397: CALL_OW 48
// guards := [ ] ;
4401: LD_ADDR_EXP 22
4405: PUSH
4406: EMPTY
4407: ST_TO_ADDR
// for i = 1 to 3 do
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_INT 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4518
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4424: LD_INT 0
4426: PPUSH
4427: LD_INT 1
4429: PPUSH
4430: LD_INT 8
4432: PUSH
4433: LD_INT 9
4435: PUSH
4436: LD_INT 10
4438: PUSH
4439: LD_INT 10
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_OWVAR 67
4452: ARRAY
4453: PPUSH
4454: CALL_OW 380
// un := CreateHuman ;
4458: LD_ADDR_VAR 0 3
4462: PUSH
4463: CALL_OW 44
4467: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 3
4478: PUSH
4479: LD_INT 4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_VAR 0 2
4491: ARRAY
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// guards := guards ^ un ;
4500: LD_ADDR_EXP 22
4504: PUSH
4505: LD_EXP 22
4509: PUSH
4510: LD_VAR 0 3
4514: ADD
4515: ST_TO_ADDR
// end ;
4516: GO 4421
4518: POP
4519: POP
// baseGuards := [ ] ;
4520: LD_ADDR_EXP 20
4524: PUSH
4525: EMPTY
4526: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4527: LD_ADDR_VAR 0 2
4531: PUSH
4532: DOUBLE
4533: LD_INT 1
4535: DEC
4536: ST_TO_ADDR
4537: LD_INT 5
4539: PUSH
4540: LD_INT 6
4542: PUSH
4543: LD_INT 7
4545: PUSH
4546: LD_INT 8
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_OWVAR 67
4559: ARRAY
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4712
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 8
4569: PUSH
4570: LD_INT 9
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 10
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: CALL_OW 381
// un := CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4605: LD_ADDR_EXP 20
4609: PUSH
4610: LD_EXP 20
4614: PUSH
4615: LD_VAR 0 3
4619: ADD
4620: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4621: LD_ADDR_VAR 0 4
4625: PUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 58
4638: PUSH
4639: EMPTY
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 32
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: ST_TO_ADDR
// if tmp then
4662: LD_VAR 0 4
4666: IFFALSE 4698
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4668: LD_VAR 0 3
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 12
4690: ARRAY
4691: PPUSH
4692: CALL_OW 52
4696: GO 4710
// PlaceHumanInUnit ( un , us_bar ) ;
4698: LD_VAR 0 3
4702: PPUSH
4703: LD_INT 51
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4561
4712: POP
4713: POP
// if Difficulty > 1 then
4714: LD_OWVAR 67
4718: PUSH
4719: LD_INT 1
4721: GREATER
4722: IFFALSE 4770
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4724: LD_INT 0
4726: PPUSH
4727: LD_INT 5
4729: PPUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 10
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 1
4751: MINUS
4752: ARRAY
4753: PPUSH
4754: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4758: CALL_OW 44
4762: PPUSH
4763: LD_INT 80
4765: PPUSH
4766: CALL_OW 52
// end ; for i = 1 to 3 do
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: DOUBLE
4776: LD_INT 1
4778: DEC
4779: ST_TO_ADDR
4780: LD_INT 3
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4810
// begin PrepareMechanic ( false , 9 ) ;
4786: LD_INT 0
4788: PPUSH
4789: LD_INT 9
4791: PPUSH
4792: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4796: CALL_OW 44
4800: PPUSH
4801: LD_INT 43
4803: PPUSH
4804: CALL_OW 52
// end ;
4808: GO 4783
4810: POP
4811: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4812: CALL_OW 44
4816: PPUSH
4817: LD_INT 49
4819: PPUSH
4820: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 1
4836: PUSH
4837: LD_OWVAR 67
4841: PLUS
4842: PUSH
4843: FOR_TO
4844: IFFALSE 4891
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4846: LD_INT 0
4848: PPUSH
4849: LD_INT 8
4851: PUSH
4852: LD_INT 9
4854: PUSH
4855: LD_INT 10
4857: PUSH
4858: LD_INT 10
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PUSH
4867: LD_OWVAR 67
4871: ARRAY
4872: PPUSH
4873: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4877: CALL_OW 44
4881: PPUSH
4882: LD_INT 5
4884: PPUSH
4885: CALL_OW 52
// end ;
4889: GO 4843
4891: POP
4892: POP
// for i = 1 to 3 do
4893: LD_ADDR_VAR 0 2
4897: PUSH
4898: DOUBLE
4899: LD_INT 1
4901: DEC
4902: ST_TO_ADDR
4903: LD_INT 3
4905: PUSH
4906: FOR_TO
4907: IFFALSE 4933
// begin PrepareScientist ( false , 10 ) ;
4909: LD_INT 0
4911: PPUSH
4912: LD_INT 10
4914: PPUSH
4915: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4919: CALL_OW 44
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 52
// end ;
4931: GO 4906
4933: POP
4934: POP
// end ;
4935: LD_VAR 0 1
4939: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4940: LD_EXP 22
4944: PUSH
4945: LD_EXP 2
4949: NOT
4950: AND
4951: IFFALSE 5137
4953: GO 4955
4955: DISABLE
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
4960: PPUSH
// begin enable ;
4961: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 204
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 165
4979: PUSH
4980: LD_INT 24
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 195
4989: PUSH
4990: LD_INT 6
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 223
4999: PUSH
5000: LD_INT 54
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 214
5009: PUSH
5010: LD_INT 84
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 206
5019: PUSH
5020: LD_INT 71
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: ST_TO_ADDR
// for i in guards do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: LD_EXP 22
5044: PUSH
5045: FOR_IN
5046: IFFALSE 5135
// begin if HasTask ( i ) then
5048: LD_VAR 0 1
5052: PPUSH
5053: CALL_OW 314
5057: IFFALSE 5063
// continue else
5059: GO 5045
5061: GO 5133
// begin j := rand ( 1 , 6 ) ;
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 6
5073: PPUSH
5074: CALL_OW 12
5078: ST_TO_ADDR
// if not See ( 7 , i ) then
5079: LD_INT 7
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 292
5091: NOT
5092: IFFALSE 5133
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5094: LD_VAR 0 1
5098: PPUSH
5099: LD_VAR 0 3
5103: PUSH
5104: LD_VAR 0 2
5108: ARRAY
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 2
5123: ARRAY
5124: PUSH
5125: LD_INT 2
5127: ARRAY
5128: PPUSH
5129: CALL_OW 114
// end ; end ;
5133: GO 5045
5135: POP
5136: POP
// end ;
5137: PPOPN 3
5139: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5140: LD_EXP 23
5144: PUSH
5145: LD_EXP 7
5149: NOT
5150: AND
5151: IFFALSE 5233
5153: GO 5155
5155: DISABLE
5156: LD_INT 0
5158: PPUSH
// begin enable ;
5159: ENABLE
// for i in vehGuard do
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_EXP 23
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5231
// if IsOk ( i ) and IsControledBy ( i ) then
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 302
5182: PUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 312
5192: AND
5193: IFFALSE 5229
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: LD_INT 22
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5170
5231: POP
5232: POP
// end ;
5233: PPOPN 1
5235: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5236: LD_EXP 4
5240: PUSH
5241: LD_INT 43
5243: PPUSH
5244: CALL_OW 302
5248: AND
5249: PUSH
5250: LD_EXP 7
5254: NOT
5255: AND
5256: PUSH
5257: LD_OWVAR 67
5261: PUSH
5262: LD_INT 1
5264: GREATER
5265: AND
5266: IFFALSE 5331
5268: GO 5270
5270: DISABLE
// begin enable ;
5271: ENABLE
// if Count ( vehGuard ) < Difficulty then
5272: LD_EXP 23
5276: PPUSH
5277: CALL 30237 0 1
5281: PUSH
5282: LD_OWVAR 67
5286: LESS
5287: IFFALSE 5331
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5289: LD_INT 43
5291: PPUSH
5292: LD_INT 5
5294: PPUSH
5295: LD_INT 3
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: LD_INT 7
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 9
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: CALL_OW 125
// end ;
5331: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5332: LD_INT 22
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 5
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 69
5367: PUSH
5368: LD_EXP 7
5372: NOT
5373: AND
5374: IFFALSE 5603
5376: GO 5378
5378: DISABLE
5379: LD_INT 0
5381: PPUSH
5382: PPUSH
// begin enable ;
5383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 5
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 50
5411: PUSH
5412: EMPTY
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: ST_TO_ADDR
// if not tmp then
5425: LD_VAR 0 1
5429: NOT
5430: IFFALSE 5434
// exit ;
5432: GO 5603
// b := IsInUnit ( tmp [ 1 ] ) ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 310
5452: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5453: LD_VAR 0 2
5457: NOT
5458: PUSH
5459: LD_VAR 0 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: CALL_OW 314
5472: OR
5473: IFFALSE 5477
// exit ;
5475: GO 5603
// if b = us_bun1 then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 80
5484: EQUAL
5485: IFFALSE 5546
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5500: LD_VAR 0 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 27
5511: PPUSH
5512: LD_INT 44
5514: PPUSH
5515: CALL_OW 174
// if IsOk ( us_bun2 ) then
5519: LD_INT 55
5521: PPUSH
5522: CALL_OW 302
5526: IFFALSE 5544
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5528: LD_VAR 0 1
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: LD_INT 55
5539: PPUSH
5540: CALL_OW 180
// end else
5544: GO 5603
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5559: LD_VAR 0 1
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 92
5570: PPUSH
5571: LD_INT 51
5573: PPUSH
5574: CALL_OW 174
// if IsOk ( us_bun1 ) then
5578: LD_INT 80
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5603
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: LD_INT 80
5598: PPUSH
5599: CALL_OW 180
// end ; end ;
5603: PPOPN 2
5605: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5606: LD_EXP 7
5610: NOT
5611: PUSH
5612: LD_INT 9
5614: PPUSH
5615: LD_INT 22
5617: PUSH
5618: LD_INT 1
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 21
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 3
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: AND
5662: IFFALSE 6073
5664: GO 5666
5666: DISABLE
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
// begin enable ;
5673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 1
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 24
5701: PUSH
5702: LD_INT 1000
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL_OW 69
5718: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_INT 22
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 25
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_INT 24
5749: PUSH
5750: LD_INT 750
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5771: LD_ADDR_VAR 0 4
5775: PUSH
5776: LD_INT 9
5778: PPUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 3
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 24
5804: PUSH
5805: LD_INT 1000
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 70
5825: PUSH
5826: LD_INT 1
5828: DIFF
5829: ST_TO_ADDR
// if not tmp and not tmp2 then
5830: LD_VAR 0 2
5834: NOT
5835: PUSH
5836: LD_VAR 0 3
5840: NOT
5841: AND
5842: IFFALSE 5846
// exit ;
5844: GO 6073
// if tmp and b then
5846: LD_VAR 0 2
5850: PUSH
5851: LD_VAR 0 4
5855: AND
5856: IFFALSE 5986
// for i in tmp do
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 2
5867: PUSH
5868: FOR_IN
5869: IFFALSE 5984
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 110
5880: PUSH
5881: LD_INT 1
5883: EQUAL
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 256
5894: PUSH
5895: LD_INT 1000
5897: LESS
5898: AND
5899: IFFALSE 5905
// continue else
5901: GO 5868
5903: GO 5932
// if GetTag ( i ) = 1 then
5905: LD_VAR 0 1
5909: PPUSH
5910: CALL_OW 110
5914: PUSH
5915: LD_INT 1
5917: EQUAL
5918: IFFALSE 5932
// SetTag ( i , 0 ) ;
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 109
// if IsInUnit ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 310
5941: IFFALSE 5952
// ComExitBuilding ( i ) ;
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 122
// if not HasTask ( i ) then
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 314
5961: NOT
5962: IFFALSE 5982
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: CALL_OW 190
// end ;
5982: GO 5868
5984: POP
5985: POP
// if tmp2 then
5986: LD_VAR 0 3
5990: IFFALSE 6073
// for i in tmp2 do
5992: LD_ADDR_VAR 0 1
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: FOR_IN
6003: IFFALSE 6071
// begin if not GetTag ( i ) = 1 then
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 110
6014: PUSH
6015: LD_INT 1
6017: EQUAL
6018: NOT
6019: IFFALSE 6033
// SetTag ( i , 1 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_INT 88
6040: PPUSH
6041: LD_INT 75
6043: PPUSH
6044: CALL_OW 297
6048: PUSH
6049: LD_INT 6
6051: GREATER
6052: IFFALSE 6069
// ComMoveXY ( i , 88 , 75 ) ;
6054: LD_VAR 0 1
6058: PPUSH
6059: LD_INT 88
6061: PPUSH
6062: LD_INT 75
6064: PPUSH
6065: CALL_OW 111
// end ;
6069: GO 6002
6071: POP
6072: POP
// end ;
6073: PPOPN 4
6075: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
6076: LD_EXP 7
6080: NOT
6081: PUSH
6082: LD_EXP 9
6086: AND
6087: PUSH
6088: LD_INT 9
6090: PPUSH
6091: LD_INT 22
6093: PUSH
6094: LD_INT 1
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 21
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: LD_INT 1000
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: AND
6138: IFFALSE 6311
6140: GO 6142
6142: DISABLE
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
6147: PPUSH
// begin enable ;
6148: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 25
6166: PUSH
6167: LD_INT 4
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 69
6182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6183: LD_ADDR_VAR 0 3
6187: PUSH
6188: LD_INT 9
6190: PPUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 1
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 24
6216: PUSH
6217: LD_INT 1000
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 70
6237: ST_TO_ADDR
// if not sci or not tmp then
6238: LD_VAR 0 2
6242: NOT
6243: PUSH
6244: LD_VAR 0 3
6248: NOT
6249: OR
6250: IFFALSE 6254
// exit ;
6252: GO 6311
// for i in sci do
6254: LD_ADDR_VAR 0 1
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6309
// if IsInUnit ( i ) then
6267: LD_VAR 0 1
6271: PPUSH
6272: CALL_OW 310
6276: IFFALSE 6289
// ComExitBuilding ( i ) else
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 122
6287: GO 6307
// ComHeal ( i , tmp [ 1 ] ) ;
6289: LD_VAR 0 1
6293: PPUSH
6294: LD_VAR 0 3
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 128
6307: GO 6264
6309: POP
6310: POP
// end ;
6311: PPOPN 3
6313: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6314: LD_EXP 7
6318: NOT
6319: PUSH
6320: LD_EXP 9
6324: AND
6325: PUSH
6326: LD_INT 1
6328: PPUSH
6329: CALL_OW 302
6333: AND
6334: PUSH
6335: LD_INT 9
6337: PPUSH
6338: LD_INT 22
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 1
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 24
6363: PUSH
6364: LD_INT 1000
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 70
6384: NOT
6385: AND
6386: PUSH
6387: LD_INT 22
6389: PUSH
6390: LD_INT 1
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 25
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 56
6409: PUSH
6410: EMPTY
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: AND
6423: IFFALSE 6516
6425: GO 6427
6427: DISABLE
6428: LD_INT 0
6430: PPUSH
// begin enable ;
6431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 1
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 25
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 56
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 69
6472: PUSH
6473: FOR_IN
6474: IFFALSE 6514
// if not GetTag ( i ) and not HasTask ( i ) then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 110
6485: NOT
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 314
6496: NOT
6497: AND
6498: IFFALSE 6512
// ComEnterUnit ( i , us_lab ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 120
6512: GO 6473
6514: POP
6515: POP
// end ;
6516: PPOPN 1
6518: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6519: LD_EXP 7
6523: NOT
6524: PUSH
6525: LD_INT 9
6527: PPUSH
6528: LD_INT 22
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: LD_INT 24
6553: PUSH
6554: LD_INT 1000
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 70
6574: NOT
6575: AND
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 25
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 56
6599: PUSH
6600: EMPTY
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: AND
6613: IFFALSE 6706
6615: GO 6617
6617: DISABLE
6618: LD_INT 0
6620: PPUSH
// begin enable ;
6621: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 25
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 56
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PUSH
6663: FOR_IN
6664: IFFALSE 6704
// if not HasTask ( i ) and not GetTag ( i ) then
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 314
6675: NOT
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 110
6686: NOT
6687: AND
6688: IFFALSE 6702
// ComEnterUnit ( i , us_depot ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 5
6697: PPUSH
6698: CALL_OW 120
6702: GO 6663
6704: POP
6705: POP
// end ;
6706: PPOPN 1
6708: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6709: LD_EXP 9
6713: PUSH
6714: LD_INT 0
6716: LESSEQUAL
6717: PUSH
6718: LD_EXP 18
6722: PPUSH
6723: CALL_OW 301
6727: OR
6728: PUSH
6729: LD_INT 22
6731: PUSH
6732: LD_INT 1
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: CALL_OW 69
6757: AND
6758: IFFALSE 6799
6760: GO 6762
6762: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6763: LD_INT 22
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 167
6799: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6800: LD_EXP 7
6804: NOT
6805: PUSH
6806: LD_INT 7
6808: PPUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 7
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 70
6823: AND
6824: IFFALSE 6933
6826: GO 6828
6828: DISABLE
6829: LD_INT 0
6831: PPUSH
// begin wait ( 0 0$2 ) ;
6832: LD_INT 70
6834: PPUSH
6835: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] ] ) do
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: LD_INT 25
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 25
6869: PUSH
6870: LD_INT 5
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: FOR_IN
6892: IFFALSE 6931
// begin if IsInUnit ( i ) then
6894: LD_VAR 0 1
6898: PPUSH
6899: CALL_OW 310
6903: IFFALSE 6914
// ComExitBuilding ( i ) ;
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: LD_INT 92
6921: PPUSH
6922: LD_INT 78
6924: PPUSH
6925: CALL_OW 174
// end ;
6929: GO 6891
6931: POP
6932: POP
// end ; end_of_file
6933: PPOPN 1
6935: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6936: LD_VAR 0 1
6940: PPUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: CALL 1579 0 3
6955: PPOPN 3
6957: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6958: LD_EXP 14
6962: PPUSH
6963: CALL_OW 257
6967: PUSH
6968: LD_INT 4
6970: EQUAL
6971: PUSH
6972: LD_EXP 15
6976: PPUSH
6977: CALL_OW 257
6981: PUSH
6982: LD_INT 4
6984: EQUAL
6985: OR
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 7
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: OR
7016: IFFALSE 7020
// exit ;
7018: GO 7058
// if un = JMM then
7020: LD_VAR 0 1
7024: PUSH
7025: LD_EXP 14
7029: EQUAL
7030: IFFALSE 7039
// YouLost ( JMM ) ;
7032: LD_STRING JMM
7034: PPUSH
7035: CALL_OW 104
// if un = Burlak then
7039: LD_VAR 0 1
7043: PUSH
7044: LD_EXP 15
7048: EQUAL
7049: IFFALSE 7058
// YouLost ( Burlak ) ;
7051: LD_STRING Burlak
7053: PPUSH
7054: CALL_OW 104
// end ;
7058: PPOPN 1
7060: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL 23241 0 1
// if un = JMM then
7070: LD_VAR 0 1
7074: PUSH
7075: LD_EXP 14
7079: EQUAL
7080: IFFALSE 7089
// YouLost ( JMM ) ;
7082: LD_STRING JMM
7084: PPUSH
7085: CALL_OW 104
// if un = Burlak then
7089: LD_VAR 0 1
7093: PUSH
7094: LD_EXP 15
7098: EQUAL
7099: IFFALSE 7108
// YouLost ( Burlak ) ;
7101: LD_STRING Burlak
7103: PPUSH
7104: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7108: LD_VAR 0 1
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: IN
7142: IFFALSE 7158
// killCounter := killCounter + 1 ;
7144: LD_ADDR_EXP 12
7148: PUSH
7149: LD_EXP 12
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ST_TO_ADDR
// end ;
7158: PPOPN 1
7160: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7161: LD_VAR 0 2
7165: PUSH
7166: LD_INT 7
7168: EQUAL
7169: PUSH
7170: LD_VAR 0 1
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: LD_INT 31
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 30
7190: PUSH
7191: LD_INT 32
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 30
7200: PUSH
7201: LD_INT 33
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IN
7219: AND
7220: IFFALSE 7236
// bunkerCounter := bunkerCounter + 1 ;
7222: LD_ADDR_EXP 13
7226: PUSH
7227: LD_EXP 13
7231: PUSH
7232: LD_INT 1
7234: PLUS
7235: ST_TO_ADDR
// end ;
7236: PPOPN 3
7238: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 255
7248: PUSH
7249: LD_INT 7
7251: EQUAL
7252: IFFALSE 7262
// artifactPickedUp := true ;
7254: LD_ADDR_EXP 6
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// end ;
7262: PPOPN 2
7264: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7265: LD_ADDR_EXP 6
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
7273: PPOPN 2
7275: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7276: LD_VAR 0 1
7280: PPUSH
7281: LD_VAR 0 2
7285: PPUSH
7286: CALL 23361 0 2
// if GetSide ( vehicle ) <> 1 then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 255
7299: PUSH
7300: LD_INT 1
7302: NONEQUAL
7303: IFFALSE 7307
// exit ;
7305: GO 7354
// wait ( 0 0$5 ) ;
7307: LD_INT 175
7309: PPUSH
7310: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 263
7323: PUSH
7324: LD_INT 2
7326: EQUAL
7327: IFFALSE 7338
// Connect ( vehicle ) ;
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL 36443 0 1
// vehGuard := vehGuard ^ vehicle ;
7338: LD_ADDR_EXP 23
7342: PUSH
7343: LD_EXP 23
7347: PUSH
7348: LD_VAR 0 1
7352: ADD
7353: ST_TO_ADDR
// end ;
7354: PPOPN 2
7356: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7357: LD_VAR 0 1
7361: PUSH
7362: LD_INT 1
7364: EQUAL
7365: PUSH
7366: LD_EXP 7
7370: NOT
7371: AND
7372: IFFALSE 7407
// begin planCaptured := true ;
7374: LD_ADDR_EXP 7
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7382: LD_STRING MEnd
7384: PPUSH
7385: CALL_OW 337
// canEnd := true ;
7389: LD_ADDR_EXP 10
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// missionTime := tick ;
7397: LD_ADDR_EXP 11
7401: PUSH
7402: LD_OWVAR 1
7406: ST_TO_ADDR
// end ; end ;
7407: PPOPN 3
7409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL 23345 0 1
// end ; end_of_file end_of_file
7419: PPOPN 1
7421: END
// export globalGameSaveCounter ; every 0 0$1 do
7422: GO 7424
7424: DISABLE
// begin enable ;
7425: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7426: LD_STRING updateTimer(
7428: PUSH
7429: LD_OWVAR 1
7433: STR
7434: PUSH
7435: LD_STRING );
7437: STR
7438: PPUSH
7439: CALL_OW 559
// end ;
7443: END
// every 0 0$1 do
7444: GO 7446
7446: DISABLE
// begin globalGameSaveCounter := 0 ;
7447: LD_ADDR_EXP 24
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7455: LD_STRING setGameSaveCounter(0)
7457: PPUSH
7458: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7462: LD_STRING initStreamRollete();
7464: PPUSH
7465: CALL_OW 559
// InitStreamMode ;
7469: CALL 8812 0 0
// DefineStreamItems ( false ) ;
7473: LD_INT 0
7475: PPUSH
7476: CALL 9276 0 1
// end ;
7480: END
// export function SOS_MapStart ( ) ; begin
7481: LD_INT 0
7483: PPUSH
// if streamModeActive then
7484: LD_EXP 25
7488: IFFALSE 7497
// DefineStreamItems ( true ) ;
7490: LD_INT 1
7492: PPUSH
7493: CALL 9276 0 1
// UpdateLuaVariables ( ) ;
7497: CALL 7514 0 0
// UpdateFactoryWaypoints ( ) ;
7501: CALL 22145 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7505: CALL 22402 0 0
// end ;
7509: LD_VAR 0 1
7513: RET
// function UpdateLuaVariables ( ) ; begin
7514: LD_INT 0
7516: PPUSH
// if globalGameSaveCounter then
7517: LD_EXP 24
7521: IFFALSE 7555
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7523: LD_ADDR_EXP 24
7527: PUSH
7528: LD_EXP 24
7532: PPUSH
7533: CALL 67187 0 1
7537: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7538: LD_STRING setGameSaveCounter(
7540: PUSH
7541: LD_EXP 24
7545: STR
7546: PUSH
7547: LD_STRING )
7549: STR
7550: PPUSH
7551: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7555: LD_STRING setGameDifficulty(
7557: PUSH
7558: LD_OWVAR 67
7562: STR
7563: PUSH
7564: LD_STRING )
7566: STR
7567: PPUSH
7568: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7572: LD_STRING displayDifficulty(
7574: PUSH
7575: LD_OWVAR 67
7579: STR
7580: PUSH
7581: LD_STRING )
7583: STR
7584: PPUSH
7585: CALL_OW 559
// end ;
7589: LD_VAR 0 1
7593: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7594: LD_INT 0
7596: PPUSH
// if p2 = stream_mode then
7597: LD_VAR 0 2
7601: PUSH
7602: LD_INT 100
7604: EQUAL
7605: IFFALSE 8608
// begin if not StreamModeActive then
7607: LD_EXP 25
7611: NOT
7612: IFFALSE 7622
// StreamModeActive := true ;
7614: LD_ADDR_EXP 25
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 0 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 0
7629: EQUAL
7630: IFFALSE 7636
// InitStreamMode ;
7632: CALL 8812 0 0
// if p3 = 1 then
7636: LD_VAR 0 3
7640: PUSH
7641: LD_INT 1
7643: EQUAL
7644: IFFALSE 7654
// sRocket := true ;
7646: LD_ADDR_EXP 30
7650: PUSH
7651: LD_INT 1
7653: ST_TO_ADDR
// if p3 = 2 then
7654: LD_VAR 0 3
7658: PUSH
7659: LD_INT 2
7661: EQUAL
7662: IFFALSE 7672
// sSpeed := true ;
7664: LD_ADDR_EXP 29
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// if p3 = 3 then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 3
7679: EQUAL
7680: IFFALSE 7690
// sEngine := true ;
7682: LD_ADDR_EXP 31
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// if p3 = 4 then
7690: LD_VAR 0 3
7694: PUSH
7695: LD_INT 4
7697: EQUAL
7698: IFFALSE 7708
// sSpec := true ;
7700: LD_ADDR_EXP 28
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// if p3 = 5 then
7708: LD_VAR 0 3
7712: PUSH
7713: LD_INT 5
7715: EQUAL
7716: IFFALSE 7726
// sLevel := true ;
7718: LD_ADDR_EXP 32
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// if p3 = 6 then
7726: LD_VAR 0 3
7730: PUSH
7731: LD_INT 6
7733: EQUAL
7734: IFFALSE 7744
// sArmoury := true ;
7736: LD_ADDR_EXP 33
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// if p3 = 7 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 7
7751: EQUAL
7752: IFFALSE 7762
// sRadar := true ;
7754: LD_ADDR_EXP 34
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// if p3 = 8 then
7762: LD_VAR 0 3
7766: PUSH
7767: LD_INT 8
7769: EQUAL
7770: IFFALSE 7780
// sBunker := true ;
7772: LD_ADDR_EXP 35
7776: PUSH
7777: LD_INT 1
7779: ST_TO_ADDR
// if p3 = 9 then
7780: LD_VAR 0 3
7784: PUSH
7785: LD_INT 9
7787: EQUAL
7788: IFFALSE 7798
// sHack := true ;
7790: LD_ADDR_EXP 36
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// if p3 = 10 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 10
7805: EQUAL
7806: IFFALSE 7816
// sFire := true ;
7808: LD_ADDR_EXP 37
7812: PUSH
7813: LD_INT 1
7815: ST_TO_ADDR
// if p3 = 11 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 11
7823: EQUAL
7824: IFFALSE 7834
// sRefresh := true ;
7826: LD_ADDR_EXP 38
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 12 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 12
7841: EQUAL
7842: IFFALSE 7852
// sExp := true ;
7844: LD_ADDR_EXP 39
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 13 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 13
7859: EQUAL
7860: IFFALSE 7870
// sDepot := true ;
7862: LD_ADDR_EXP 40
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 14 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 14
7877: EQUAL
7878: IFFALSE 7888
// sFlag := true ;
7880: LD_ADDR_EXP 41
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 15 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 15
7895: EQUAL
7896: IFFALSE 7906
// sKamikadze := true ;
7898: LD_ADDR_EXP 49
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 16 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 16
7913: EQUAL
7914: IFFALSE 7924
// sTroll := true ;
7916: LD_ADDR_EXP 50
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 17 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 17
7931: EQUAL
7932: IFFALSE 7942
// sSlow := true ;
7934: LD_ADDR_EXP 51
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 18 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 18
7949: EQUAL
7950: IFFALSE 7960
// sLack := true ;
7952: LD_ADDR_EXP 52
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 19 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 19
7967: EQUAL
7968: IFFALSE 7978
// sTank := true ;
7970: LD_ADDR_EXP 54
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 20 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 20
7985: EQUAL
7986: IFFALSE 7996
// sRemote := true ;
7988: LD_ADDR_EXP 55
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 21 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 21
8003: EQUAL
8004: IFFALSE 8014
// sPowell := true ;
8006: LD_ADDR_EXP 56
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 22 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 22
8021: EQUAL
8022: IFFALSE 8032
// sTeleport := true ;
8024: LD_ADDR_EXP 59
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 23 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 23
8039: EQUAL
8040: IFFALSE 8050
// sOilTower := true ;
8042: LD_ADDR_EXP 61
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 24 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 24
8057: EQUAL
8058: IFFALSE 8068
// sShovel := true ;
8060: LD_ADDR_EXP 62
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 25 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 25
8075: EQUAL
8076: IFFALSE 8086
// sSheik := true ;
8078: LD_ADDR_EXP 63
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 26 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 26
8093: EQUAL
8094: IFFALSE 8104
// sEarthquake := true ;
8096: LD_ADDR_EXP 65
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 27 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 27
8111: EQUAL
8112: IFFALSE 8122
// sAI := true ;
8114: LD_ADDR_EXP 66
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 28 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 28
8129: EQUAL
8130: IFFALSE 8140
// sCargo := true ;
8132: LD_ADDR_EXP 69
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 29 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 29
8147: EQUAL
8148: IFFALSE 8158
// sDLaser := true ;
8150: LD_ADDR_EXP 70
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 30 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 30
8165: EQUAL
8166: IFFALSE 8176
// sExchange := true ;
8168: LD_ADDR_EXP 71
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 31 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 31
8183: EQUAL
8184: IFFALSE 8194
// sFac := true ;
8186: LD_ADDR_EXP 72
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 32 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 32
8201: EQUAL
8202: IFFALSE 8212
// sPower := true ;
8204: LD_ADDR_EXP 73
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 33 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 33
8219: EQUAL
8220: IFFALSE 8230
// sRandom := true ;
8222: LD_ADDR_EXP 74
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 34 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 34
8237: EQUAL
8238: IFFALSE 8248
// sShield := true ;
8240: LD_ADDR_EXP 75
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 35 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 35
8255: EQUAL
8256: IFFALSE 8266
// sTime := true ;
8258: LD_ADDR_EXP 76
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 36 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 36
8273: EQUAL
8274: IFFALSE 8284
// sTools := true ;
8276: LD_ADDR_EXP 77
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 101 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 101
8291: EQUAL
8292: IFFALSE 8302
// sSold := true ;
8294: LD_ADDR_EXP 42
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 102 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 102
8309: EQUAL
8310: IFFALSE 8320
// sDiff := true ;
8312: LD_ADDR_EXP 43
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 103 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 103
8327: EQUAL
8328: IFFALSE 8338
// sFog := true ;
8330: LD_ADDR_EXP 46
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 104 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 104
8345: EQUAL
8346: IFFALSE 8356
// sReset := true ;
8348: LD_ADDR_EXP 47
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 105 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 105
8363: EQUAL
8364: IFFALSE 8374
// sSun := true ;
8366: LD_ADDR_EXP 48
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 106 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 106
8381: EQUAL
8382: IFFALSE 8392
// sTiger := true ;
8384: LD_ADDR_EXP 44
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 107 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 107
8399: EQUAL
8400: IFFALSE 8410
// sBomb := true ;
8402: LD_ADDR_EXP 45
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 108 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 108
8417: EQUAL
8418: IFFALSE 8428
// sWound := true ;
8420: LD_ADDR_EXP 53
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 109 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 109
8435: EQUAL
8436: IFFALSE 8446
// sBetray := true ;
8438: LD_ADDR_EXP 57
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 110 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 110
8453: EQUAL
8454: IFFALSE 8464
// sContamin := true ;
8456: LD_ADDR_EXP 58
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 111 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 111
8471: EQUAL
8472: IFFALSE 8482
// sOil := true ;
8474: LD_ADDR_EXP 60
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 112 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 112
8489: EQUAL
8490: IFFALSE 8500
// sStu := true ;
8492: LD_ADDR_EXP 64
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 113 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 113
8507: EQUAL
8508: IFFALSE 8518
// sBazooka := true ;
8510: LD_ADDR_EXP 67
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 114 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 114
8525: EQUAL
8526: IFFALSE 8536
// sMortar := true ;
8528: LD_ADDR_EXP 68
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 115 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 115
8543: EQUAL
8544: IFFALSE 8554
// sRanger := true ;
8546: LD_ADDR_EXP 78
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 116 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 116
8561: EQUAL
8562: IFFALSE 8572
// sComputer := true ;
8564: LD_ADDR_EXP 79
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 117 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 117
8579: EQUAL
8580: IFFALSE 8590
// s30 := true ;
8582: LD_ADDR_EXP 80
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 118 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 118
8597: EQUAL
8598: IFFALSE 8608
// s60 := true ;
8600: LD_ADDR_EXP 81
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// end ; if p2 = hack_mode then
8608: LD_VAR 0 2
8612: PUSH
8613: LD_INT 101
8615: EQUAL
8616: IFFALSE 8744
// begin case p3 of 1 :
8618: LD_VAR 0 3
8622: PUSH
8623: LD_INT 1
8625: DOUBLE
8626: EQUAL
8627: IFTRUE 8631
8629: GO 8638
8631: POP
// hHackUnlimitedResources ; 2 :
8632: CALL 20891 0 0
8636: GO 8744
8638: LD_INT 2
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8646
8644: GO 8653
8646: POP
// hHackSetLevel10 ; 3 :
8647: CALL 21024 0 0
8651: GO 8744
8653: LD_INT 3
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8668
8661: POP
// hHackSetLevel10YourUnits ; 4 :
8662: CALL 21109 0 0
8666: GO 8744
8668: LD_INT 4
8670: DOUBLE
8671: EQUAL
8672: IFTRUE 8676
8674: GO 8683
8676: POP
// hHackInvincible ; 5 :
8677: CALL 21557 0 0
8681: GO 8744
8683: LD_INT 5
8685: DOUBLE
8686: EQUAL
8687: IFTRUE 8691
8689: GO 8698
8691: POP
// hHackInvisible ; 6 :
8692: CALL 21668 0 0
8696: GO 8744
8698: LD_INT 6
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8713
8706: POP
// hHackChangeYourSide ; 7 :
8707: CALL 21725 0 0
8711: GO 8744
8713: LD_INT 7
8715: DOUBLE
8716: EQUAL
8717: IFTRUE 8721
8719: GO 8728
8721: POP
// hHackChangeUnitSide ; 8 :
8722: CALL 21767 0 0
8726: GO 8744
8728: LD_INT 8
8730: DOUBLE
8731: EQUAL
8732: IFTRUE 8736
8734: GO 8743
8736: POP
// hHackFog ; end ;
8737: CALL 21868 0 0
8741: GO 8744
8743: POP
// end ; if p2 = game_save_mode then
8744: LD_VAR 0 2
8748: PUSH
8749: LD_INT 102
8751: EQUAL
8752: IFFALSE 8807
// begin if p3 = 1 then
8754: LD_VAR 0 3
8758: PUSH
8759: LD_INT 1
8761: EQUAL
8762: IFFALSE 8774
// globalGameSaveCounter := p4 ;
8764: LD_ADDR_EXP 24
8768: PUSH
8769: LD_VAR 0 4
8773: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 2
8781: EQUAL
8782: PUSH
8783: LD_EXP 24
8787: AND
8788: IFFALSE 8807
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8790: LD_STRING setGameSaveCounter(
8792: PUSH
8793: LD_EXP 24
8797: STR
8798: PUSH
8799: LD_STRING )
8801: STR
8802: PPUSH
8803: CALL_OW 559
// end ; end ;
8807: LD_VAR 0 7
8811: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8812: LD_INT 0
8814: PPUSH
// streamModeActive := false ;
8815: LD_ADDR_EXP 25
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// normalCounter := 36 ;
8823: LD_ADDR_EXP 26
8827: PUSH
8828: LD_INT 36
8830: ST_TO_ADDR
// hardcoreCounter := 18 ;
8831: LD_ADDR_EXP 27
8835: PUSH
8836: LD_INT 18
8838: ST_TO_ADDR
// sRocket := false ;
8839: LD_ADDR_EXP 30
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sSpeed := false ;
8847: LD_ADDR_EXP 29
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sEngine := false ;
8855: LD_ADDR_EXP 31
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sSpec := false ;
8863: LD_ADDR_EXP 28
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// sLevel := false ;
8871: LD_ADDR_EXP 32
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// sArmoury := false ;
8879: LD_ADDR_EXP 33
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// sRadar := false ;
8887: LD_ADDR_EXP 34
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// sBunker := false ;
8895: LD_ADDR_EXP 35
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// sHack := false ;
8903: LD_ADDR_EXP 36
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// sFire := false ;
8911: LD_ADDR_EXP 37
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// sRefresh := false ;
8919: LD_ADDR_EXP 38
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// sExp := false ;
8927: LD_ADDR_EXP 39
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// sDepot := false ;
8935: LD_ADDR_EXP 40
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// sFlag := false ;
8943: LD_ADDR_EXP 41
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// sKamikadze := false ;
8951: LD_ADDR_EXP 49
8955: PUSH
8956: LD_INT 0
8958: ST_TO_ADDR
// sTroll := false ;
8959: LD_ADDR_EXP 50
8963: PUSH
8964: LD_INT 0
8966: ST_TO_ADDR
// sSlow := false ;
8967: LD_ADDR_EXP 51
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// sLack := false ;
8975: LD_ADDR_EXP 52
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// sTank := false ;
8983: LD_ADDR_EXP 54
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// sRemote := false ;
8991: LD_ADDR_EXP 55
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// sPowell := false ;
8999: LD_ADDR_EXP 56
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// sTeleport := false ;
9007: LD_ADDR_EXP 59
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// sOilTower := false ;
9015: LD_ADDR_EXP 61
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// sShovel := false ;
9023: LD_ADDR_EXP 62
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// sSheik := false ;
9031: LD_ADDR_EXP 63
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// sEarthquake := false ;
9039: LD_ADDR_EXP 65
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// sAI := false ;
9047: LD_ADDR_EXP 66
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// sCargo := false ;
9055: LD_ADDR_EXP 69
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// sDLaser := false ;
9063: LD_ADDR_EXP 70
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sExchange := false ;
9071: LD_ADDR_EXP 71
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sFac := false ;
9079: LD_ADDR_EXP 72
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sPower := false ;
9087: LD_ADDR_EXP 73
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sRandom := false ;
9095: LD_ADDR_EXP 74
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sShield := false ;
9103: LD_ADDR_EXP 75
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sTime := false ;
9111: LD_ADDR_EXP 76
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sTools := false ;
9119: LD_ADDR_EXP 77
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sSold := false ;
9127: LD_ADDR_EXP 42
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sDiff := false ;
9135: LD_ADDR_EXP 43
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sFog := false ;
9143: LD_ADDR_EXP 46
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sReset := false ;
9151: LD_ADDR_EXP 47
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sSun := false ;
9159: LD_ADDR_EXP 48
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// sTiger := false ;
9167: LD_ADDR_EXP 44
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// sBomb := false ;
9175: LD_ADDR_EXP 45
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// sWound := false ;
9183: LD_ADDR_EXP 53
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// sBetray := false ;
9191: LD_ADDR_EXP 57
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// sContamin := false ;
9199: LD_ADDR_EXP 58
9203: PUSH
9204: LD_INT 0
9206: ST_TO_ADDR
// sOil := false ;
9207: LD_ADDR_EXP 60
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// sStu := false ;
9215: LD_ADDR_EXP 64
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// sBazooka := false ;
9223: LD_ADDR_EXP 67
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// sMortar := false ;
9231: LD_ADDR_EXP 68
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// sRanger := false ;
9239: LD_ADDR_EXP 78
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// sComputer := false ;
9247: LD_ADDR_EXP 79
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// s30 := false ;
9255: LD_ADDR_EXP 80
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// s60 := false ;
9263: LD_ADDR_EXP 81
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// end ;
9271: LD_VAR 0 1
9275: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9276: LD_INT 0
9278: PPUSH
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
// result := [ ] ;
9285: LD_ADDR_VAR 0 2
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// if campaign_id = 1 then
9292: LD_OWVAR 69
9296: PUSH
9297: LD_INT 1
9299: EQUAL
9300: IFFALSE 12466
// begin case mission_number of 1 :
9302: LD_OWVAR 70
9306: PUSH
9307: LD_INT 1
9309: DOUBLE
9310: EQUAL
9311: IFTRUE 9315
9313: GO 9391
9315: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9316: LD_ADDR_VAR 0 2
9320: PUSH
9321: LD_INT 2
9323: PUSH
9324: LD_INT 4
9326: PUSH
9327: LD_INT 11
9329: PUSH
9330: LD_INT 12
9332: PUSH
9333: LD_INT 15
9335: PUSH
9336: LD_INT 16
9338: PUSH
9339: LD_INT 22
9341: PUSH
9342: LD_INT 23
9344: PUSH
9345: LD_INT 26
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 101
9361: PUSH
9362: LD_INT 102
9364: PUSH
9365: LD_INT 106
9367: PUSH
9368: LD_INT 116
9370: PUSH
9371: LD_INT 117
9373: PUSH
9374: LD_INT 118
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: ST_TO_ADDR
9389: GO 12464
9391: LD_INT 2
9393: DOUBLE
9394: EQUAL
9395: IFTRUE 9399
9397: GO 9483
9399: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_INT 2
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 11
9413: PUSH
9414: LD_INT 12
9416: PUSH
9417: LD_INT 15
9419: PUSH
9420: LD_INT 16
9422: PUSH
9423: LD_INT 22
9425: PUSH
9426: LD_INT 23
9428: PUSH
9429: LD_INT 26
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 101
9445: PUSH
9446: LD_INT 102
9448: PUSH
9449: LD_INT 105
9451: PUSH
9452: LD_INT 106
9454: PUSH
9455: LD_INT 108
9457: PUSH
9458: LD_INT 116
9460: PUSH
9461: LD_INT 117
9463: PUSH
9464: LD_INT 118
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: ST_TO_ADDR
9481: GO 12464
9483: LD_INT 3
9485: DOUBLE
9486: EQUAL
9487: IFTRUE 9491
9489: GO 9579
9491: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 11
9508: PUSH
9509: LD_INT 12
9511: PUSH
9512: LD_INT 15
9514: PUSH
9515: LD_INT 16
9517: PUSH
9518: LD_INT 22
9520: PUSH
9521: LD_INT 26
9523: PUSH
9524: LD_INT 36
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 101
9541: PUSH
9542: LD_INT 102
9544: PUSH
9545: LD_INT 105
9547: PUSH
9548: LD_INT 106
9550: PUSH
9551: LD_INT 108
9553: PUSH
9554: LD_INT 116
9556: PUSH
9557: LD_INT 117
9559: PUSH
9560: LD_INT 118
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 12464
9579: LD_INT 4
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9683
9587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 8
9604: PUSH
9605: LD_INT 11
9607: PUSH
9608: LD_INT 12
9610: PUSH
9611: LD_INT 15
9613: PUSH
9614: LD_INT 16
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_INT 23
9622: PUSH
9623: LD_INT 26
9625: PUSH
9626: LD_INT 36
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 105
9651: PUSH
9652: LD_INT 106
9654: PUSH
9655: LD_INT 108
9657: PUSH
9658: LD_INT 116
9660: PUSH
9661: LD_INT 117
9663: PUSH
9664: LD_INT 118
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: ST_TO_ADDR
9681: GO 12464
9683: LD_INT 5
9685: DOUBLE
9686: EQUAL
9687: IFTRUE 9691
9689: GO 9803
9691: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: LD_INT 4
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 6
9708: PUSH
9709: LD_INT 8
9711: PUSH
9712: LD_INT 11
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: LD_INT 15
9720: PUSH
9721: LD_INT 16
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 25
9732: PUSH
9733: LD_INT 26
9735: PUSH
9736: LD_INT 36
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 101
9757: PUSH
9758: LD_INT 102
9760: PUSH
9761: LD_INT 105
9763: PUSH
9764: LD_INT 106
9766: PUSH
9767: LD_INT 108
9769: PUSH
9770: LD_INT 109
9772: PUSH
9773: LD_INT 112
9775: PUSH
9776: LD_INT 116
9778: PUSH
9779: LD_INT 117
9781: PUSH
9782: LD_INT 118
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: ST_TO_ADDR
9801: GO 12464
9803: LD_INT 6
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9943
9811: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: LD_INT 6
9828: PUSH
9829: LD_INT 8
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: LD_INT 12
9837: PUSH
9838: LD_INT 15
9840: PUSH
9841: LD_INT 16
9843: PUSH
9844: LD_INT 20
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 30
9864: PUSH
9865: LD_INT 31
9867: PUSH
9868: LD_INT 32
9870: PUSH
9871: LD_INT 36
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 101
9897: PUSH
9898: LD_INT 102
9900: PUSH
9901: LD_INT 105
9903: PUSH
9904: LD_INT 106
9906: PUSH
9907: LD_INT 108
9909: PUSH
9910: LD_INT 109
9912: PUSH
9913: LD_INT 112
9915: PUSH
9916: LD_INT 116
9918: PUSH
9919: LD_INT 117
9921: PUSH
9922: LD_INT 118
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: ST_TO_ADDR
9941: GO 12464
9943: LD_INT 7
9945: DOUBLE
9946: EQUAL
9947: IFTRUE 9951
9949: GO 10063
9951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9952: LD_ADDR_VAR 0 2
9956: PUSH
9957: LD_INT 2
9959: PUSH
9960: LD_INT 4
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: LD_INT 7
9968: PUSH
9969: LD_INT 11
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: LD_INT 15
9977: PUSH
9978: LD_INT 16
9980: PUSH
9981: LD_INT 20
9983: PUSH
9984: LD_INT 21
9986: PUSH
9987: LD_INT 22
9989: PUSH
9990: LD_INT 23
9992: PUSH
9993: LD_INT 25
9995: PUSH
9996: LD_INT 26
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 101
10017: PUSH
10018: LD_INT 102
10020: PUSH
10021: LD_INT 103
10023: PUSH
10024: LD_INT 105
10026: PUSH
10027: LD_INT 106
10029: PUSH
10030: LD_INT 108
10032: PUSH
10033: LD_INT 112
10035: PUSH
10036: LD_INT 116
10038: PUSH
10039: LD_INT 117
10041: PUSH
10042: LD_INT 118
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: ST_TO_ADDR
10061: GO 12464
10063: LD_INT 8
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10211
10071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10072: LD_ADDR_VAR 0 2
10076: PUSH
10077: LD_INT 2
10079: PUSH
10080: LD_INT 4
10082: PUSH
10083: LD_INT 5
10085: PUSH
10086: LD_INT 6
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 8
10094: PUSH
10095: LD_INT 11
10097: PUSH
10098: LD_INT 12
10100: PUSH
10101: LD_INT 15
10103: PUSH
10104: LD_INT 16
10106: PUSH
10107: LD_INT 20
10109: PUSH
10110: LD_INT 21
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 23
10118: PUSH
10119: LD_INT 25
10121: PUSH
10122: LD_INT 26
10124: PUSH
10125: LD_INT 30
10127: PUSH
10128: LD_INT 31
10130: PUSH
10131: LD_INT 32
10133: PUSH
10134: LD_INT 36
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 101
10161: PUSH
10162: LD_INT 102
10164: PUSH
10165: LD_INT 103
10167: PUSH
10168: LD_INT 105
10170: PUSH
10171: LD_INT 106
10173: PUSH
10174: LD_INT 108
10176: PUSH
10177: LD_INT 109
10179: PUSH
10180: LD_INT 112
10182: PUSH
10183: LD_INT 116
10185: PUSH
10186: LD_INT 117
10188: PUSH
10189: LD_INT 118
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: ST_TO_ADDR
10209: GO 12464
10211: LD_INT 9
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10219
10217: GO 10367
10219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10220: LD_ADDR_VAR 0 2
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: LD_INT 6
10236: PUSH
10237: LD_INT 7
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: LD_INT 11
10245: PUSH
10246: LD_INT 12
10248: PUSH
10249: LD_INT 15
10251: PUSH
10252: LD_INT 16
10254: PUSH
10255: LD_INT 20
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_INT 23
10266: PUSH
10267: LD_INT 25
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 28
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 31
10281: PUSH
10282: LD_INT 32
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 101
10313: PUSH
10314: LD_INT 102
10316: PUSH
10317: LD_INT 103
10319: PUSH
10320: LD_INT 105
10322: PUSH
10323: LD_INT 106
10325: PUSH
10326: LD_INT 108
10328: PUSH
10329: LD_INT 109
10331: PUSH
10332: LD_INT 112
10334: PUSH
10335: LD_INT 114
10337: PUSH
10338: LD_INT 116
10340: PUSH
10341: LD_INT 117
10343: PUSH
10344: LD_INT 118
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: ST_TO_ADDR
10365: GO 12464
10367: LD_INT 10
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10571
10375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10376: LD_ADDR_VAR 0 2
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 4
10386: PUSH
10387: LD_INT 5
10389: PUSH
10390: LD_INT 6
10392: PUSH
10393: LD_INT 7
10395: PUSH
10396: LD_INT 8
10398: PUSH
10399: LD_INT 9
10401: PUSH
10402: LD_INT 10
10404: PUSH
10405: LD_INT 11
10407: PUSH
10408: LD_INT 12
10410: PUSH
10411: LD_INT 13
10413: PUSH
10414: LD_INT 14
10416: PUSH
10417: LD_INT 15
10419: PUSH
10420: LD_INT 16
10422: PUSH
10423: LD_INT 17
10425: PUSH
10426: LD_INT 18
10428: PUSH
10429: LD_INT 19
10431: PUSH
10432: LD_INT 20
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_INT 23
10443: PUSH
10444: LD_INT 24
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 26
10452: PUSH
10453: LD_INT 28
10455: PUSH
10456: LD_INT 30
10458: PUSH
10459: LD_INT 31
10461: PUSH
10462: LD_INT 32
10464: PUSH
10465: LD_INT 36
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 101
10501: PUSH
10502: LD_INT 102
10504: PUSH
10505: LD_INT 103
10507: PUSH
10508: LD_INT 104
10510: PUSH
10511: LD_INT 105
10513: PUSH
10514: LD_INT 106
10516: PUSH
10517: LD_INT 107
10519: PUSH
10520: LD_INT 108
10522: PUSH
10523: LD_INT 109
10525: PUSH
10526: LD_INT 110
10528: PUSH
10529: LD_INT 111
10531: PUSH
10532: LD_INT 112
10534: PUSH
10535: LD_INT 114
10537: PUSH
10538: LD_INT 116
10540: PUSH
10541: LD_INT 117
10543: PUSH
10544: LD_INT 118
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: ST_TO_ADDR
10569: GO 12464
10571: LD_INT 11
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10783
10579: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 2
10587: PUSH
10588: LD_INT 3
10590: PUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 6
10599: PUSH
10600: LD_INT 7
10602: PUSH
10603: LD_INT 8
10605: PUSH
10606: LD_INT 9
10608: PUSH
10609: LD_INT 10
10611: PUSH
10612: LD_INT 11
10614: PUSH
10615: LD_INT 12
10617: PUSH
10618: LD_INT 13
10620: PUSH
10621: LD_INT 14
10623: PUSH
10624: LD_INT 15
10626: PUSH
10627: LD_INT 16
10629: PUSH
10630: LD_INT 17
10632: PUSH
10633: LD_INT 18
10635: PUSH
10636: LD_INT 19
10638: PUSH
10639: LD_INT 20
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 22
10647: PUSH
10648: LD_INT 23
10650: PUSH
10651: LD_INT 24
10653: PUSH
10654: LD_INT 25
10656: PUSH
10657: LD_INT 26
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 30
10665: PUSH
10666: LD_INT 31
10668: PUSH
10669: LD_INT 32
10671: PUSH
10672: LD_INT 34
10674: PUSH
10675: LD_INT 36
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 101
10713: PUSH
10714: LD_INT 102
10716: PUSH
10717: LD_INT 103
10719: PUSH
10720: LD_INT 104
10722: PUSH
10723: LD_INT 105
10725: PUSH
10726: LD_INT 106
10728: PUSH
10729: LD_INT 107
10731: PUSH
10732: LD_INT 108
10734: PUSH
10735: LD_INT 109
10737: PUSH
10738: LD_INT 110
10740: PUSH
10741: LD_INT 111
10743: PUSH
10744: LD_INT 112
10746: PUSH
10747: LD_INT 114
10749: PUSH
10750: LD_INT 116
10752: PUSH
10753: LD_INT 117
10755: PUSH
10756: LD_INT 118
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: ST_TO_ADDR
10781: GO 12464
10783: LD_INT 12
10785: DOUBLE
10786: EQUAL
10787: IFTRUE 10791
10789: GO 11011
10791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10792: LD_ADDR_VAR 0 2
10796: PUSH
10797: LD_INT 1
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: LD_INT 6
10814: PUSH
10815: LD_INT 7
10817: PUSH
10818: LD_INT 8
10820: PUSH
10821: LD_INT 9
10823: PUSH
10824: LD_INT 10
10826: PUSH
10827: LD_INT 11
10829: PUSH
10830: LD_INT 12
10832: PUSH
10833: LD_INT 13
10835: PUSH
10836: LD_INT 14
10838: PUSH
10839: LD_INT 15
10841: PUSH
10842: LD_INT 16
10844: PUSH
10845: LD_INT 17
10847: PUSH
10848: LD_INT 18
10850: PUSH
10851: LD_INT 19
10853: PUSH
10854: LD_INT 20
10856: PUSH
10857: LD_INT 21
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 24
10868: PUSH
10869: LD_INT 25
10871: PUSH
10872: LD_INT 26
10874: PUSH
10875: LD_INT 27
10877: PUSH
10878: LD_INT 28
10880: PUSH
10881: LD_INT 30
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: LD_INT 32
10889: PUSH
10890: LD_INT 33
10892: PUSH
10893: LD_INT 34
10895: PUSH
10896: LD_INT 36
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 102
10940: PUSH
10941: LD_INT 103
10943: PUSH
10944: LD_INT 104
10946: PUSH
10947: LD_INT 105
10949: PUSH
10950: LD_INT 106
10952: PUSH
10953: LD_INT 107
10955: PUSH
10956: LD_INT 108
10958: PUSH
10959: LD_INT 109
10961: PUSH
10962: LD_INT 110
10964: PUSH
10965: LD_INT 111
10967: PUSH
10968: LD_INT 112
10970: PUSH
10971: LD_INT 113
10973: PUSH
10974: LD_INT 114
10976: PUSH
10977: LD_INT 116
10979: PUSH
10980: LD_INT 117
10982: PUSH
10983: LD_INT 118
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: ST_TO_ADDR
11009: GO 12464
11011: LD_INT 13
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11227
11019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: LD_INT 9
11045: PUSH
11046: LD_INT 10
11048: PUSH
11049: LD_INT 11
11051: PUSH
11052: LD_INT 12
11054: PUSH
11055: LD_INT 14
11057: PUSH
11058: LD_INT 15
11060: PUSH
11061: LD_INT 16
11063: PUSH
11064: LD_INT 17
11066: PUSH
11067: LD_INT 18
11069: PUSH
11070: LD_INT 19
11072: PUSH
11073: LD_INT 20
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 22
11081: PUSH
11082: LD_INT 23
11084: PUSH
11085: LD_INT 24
11087: PUSH
11088: LD_INT 25
11090: PUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 27
11096: PUSH
11097: LD_INT 28
11099: PUSH
11100: LD_INT 30
11102: PUSH
11103: LD_INT 31
11105: PUSH
11106: LD_INT 32
11108: PUSH
11109: LD_INT 33
11111: PUSH
11112: LD_INT 34
11114: PUSH
11115: LD_INT 36
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 101
11153: PUSH
11154: LD_INT 102
11156: PUSH
11157: LD_INT 103
11159: PUSH
11160: LD_INT 104
11162: PUSH
11163: LD_INT 105
11165: PUSH
11166: LD_INT 106
11168: PUSH
11169: LD_INT 107
11171: PUSH
11172: LD_INT 108
11174: PUSH
11175: LD_INT 109
11177: PUSH
11178: LD_INT 110
11180: PUSH
11181: LD_INT 111
11183: PUSH
11184: LD_INT 112
11186: PUSH
11187: LD_INT 113
11189: PUSH
11190: LD_INT 114
11192: PUSH
11193: LD_INT 116
11195: PUSH
11196: LD_INT 117
11198: PUSH
11199: LD_INT 118
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: ST_TO_ADDR
11225: GO 12464
11227: LD_INT 14
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11459
11235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: LD_INT 4
11252: PUSH
11253: LD_INT 5
11255: PUSH
11256: LD_INT 6
11258: PUSH
11259: LD_INT 7
11261: PUSH
11262: LD_INT 8
11264: PUSH
11265: LD_INT 9
11267: PUSH
11268: LD_INT 10
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: LD_INT 12
11276: PUSH
11277: LD_INT 13
11279: PUSH
11280: LD_INT 14
11282: PUSH
11283: LD_INT 15
11285: PUSH
11286: LD_INT 16
11288: PUSH
11289: LD_INT 17
11291: PUSH
11292: LD_INT 18
11294: PUSH
11295: LD_INT 19
11297: PUSH
11298: LD_INT 20
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 22
11306: PUSH
11307: LD_INT 23
11309: PUSH
11310: LD_INT 24
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 27
11321: PUSH
11322: LD_INT 28
11324: PUSH
11325: LD_INT 29
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 31
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: LD_INT 33
11339: PUSH
11340: LD_INT 34
11342: PUSH
11343: LD_INT 36
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 101
11385: PUSH
11386: LD_INT 102
11388: PUSH
11389: LD_INT 103
11391: PUSH
11392: LD_INT 104
11394: PUSH
11395: LD_INT 105
11397: PUSH
11398: LD_INT 106
11400: PUSH
11401: LD_INT 107
11403: PUSH
11404: LD_INT 108
11406: PUSH
11407: LD_INT 109
11409: PUSH
11410: LD_INT 110
11412: PUSH
11413: LD_INT 111
11415: PUSH
11416: LD_INT 112
11418: PUSH
11419: LD_INT 113
11421: PUSH
11422: LD_INT 114
11424: PUSH
11425: LD_INT 116
11427: PUSH
11428: LD_INT 117
11430: PUSH
11431: LD_INT 118
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: ST_TO_ADDR
11457: GO 12464
11459: LD_INT 15
11461: DOUBLE
11462: EQUAL
11463: IFTRUE 11467
11465: GO 11691
11467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11468: LD_ADDR_VAR 0 2
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: LD_INT 4
11484: PUSH
11485: LD_INT 5
11487: PUSH
11488: LD_INT 6
11490: PUSH
11491: LD_INT 7
11493: PUSH
11494: LD_INT 8
11496: PUSH
11497: LD_INT 9
11499: PUSH
11500: LD_INT 10
11502: PUSH
11503: LD_INT 11
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: LD_INT 13
11511: PUSH
11512: LD_INT 14
11514: PUSH
11515: LD_INT 15
11517: PUSH
11518: LD_INT 16
11520: PUSH
11521: LD_INT 17
11523: PUSH
11524: LD_INT 18
11526: PUSH
11527: LD_INT 19
11529: PUSH
11530: LD_INT 20
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 23
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 26
11550: PUSH
11551: LD_INT 27
11553: PUSH
11554: LD_INT 28
11556: PUSH
11557: LD_INT 29
11559: PUSH
11560: LD_INT 30
11562: PUSH
11563: LD_INT 31
11565: PUSH
11566: LD_INT 32
11568: PUSH
11569: LD_INT 33
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 36
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 101
11617: PUSH
11618: LD_INT 102
11620: PUSH
11621: LD_INT 103
11623: PUSH
11624: LD_INT 104
11626: PUSH
11627: LD_INT 105
11629: PUSH
11630: LD_INT 106
11632: PUSH
11633: LD_INT 107
11635: PUSH
11636: LD_INT 108
11638: PUSH
11639: LD_INT 109
11641: PUSH
11642: LD_INT 110
11644: PUSH
11645: LD_INT 111
11647: PUSH
11648: LD_INT 112
11650: PUSH
11651: LD_INT 113
11653: PUSH
11654: LD_INT 114
11656: PUSH
11657: LD_INT 116
11659: PUSH
11660: LD_INT 117
11662: PUSH
11663: LD_INT 118
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: ST_TO_ADDR
11689: GO 12464
11691: LD_INT 16
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11835
11699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11700: LD_ADDR_VAR 0 2
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 4
11710: PUSH
11711: LD_INT 5
11713: PUSH
11714: LD_INT 7
11716: PUSH
11717: LD_INT 11
11719: PUSH
11720: LD_INT 12
11722: PUSH
11723: LD_INT 15
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 20
11731: PUSH
11732: LD_INT 21
11734: PUSH
11735: LD_INT 22
11737: PUSH
11738: LD_INT 23
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 26
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 31
11752: PUSH
11753: LD_INT 32
11755: PUSH
11756: LD_INT 33
11758: PUSH
11759: LD_INT 34
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 103
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 113
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: LD_INT 116
11809: PUSH
11810: LD_INT 117
11812: PUSH
11813: LD_INT 118
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: ST_TO_ADDR
11833: GO 12464
11835: LD_INT 17
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12067
11843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: LD_INT 4
11860: PUSH
11861: LD_INT 5
11863: PUSH
11864: LD_INT 6
11866: PUSH
11867: LD_INT 7
11869: PUSH
11870: LD_INT 8
11872: PUSH
11873: LD_INT 9
11875: PUSH
11876: LD_INT 10
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 13
11887: PUSH
11888: LD_INT 14
11890: PUSH
11891: LD_INT 15
11893: PUSH
11894: LD_INT 16
11896: PUSH
11897: LD_INT 17
11899: PUSH
11900: LD_INT 18
11902: PUSH
11903: LD_INT 19
11905: PUSH
11906: LD_INT 20
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 23
11917: PUSH
11918: LD_INT 24
11920: PUSH
11921: LD_INT 25
11923: PUSH
11924: LD_INT 26
11926: PUSH
11927: LD_INT 27
11929: PUSH
11930: LD_INT 28
11932: PUSH
11933: LD_INT 29
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 31
11941: PUSH
11942: LD_INT 32
11944: PUSH
11945: LD_INT 33
11947: PUSH
11948: LD_INT 34
11950: PUSH
11951: LD_INT 36
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 101
11993: PUSH
11994: LD_INT 102
11996: PUSH
11997: LD_INT 103
11999: PUSH
12000: LD_INT 104
12002: PUSH
12003: LD_INT 105
12005: PUSH
12006: LD_INT 106
12008: PUSH
12009: LD_INT 107
12011: PUSH
12012: LD_INT 108
12014: PUSH
12015: LD_INT 109
12017: PUSH
12018: LD_INT 110
12020: PUSH
12021: LD_INT 111
12023: PUSH
12024: LD_INT 112
12026: PUSH
12027: LD_INT 113
12029: PUSH
12030: LD_INT 114
12032: PUSH
12033: LD_INT 116
12035: PUSH
12036: LD_INT 117
12038: PUSH
12039: LD_INT 118
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: ST_TO_ADDR
12065: GO 12464
12067: LD_INT 18
12069: DOUBLE
12070: EQUAL
12071: IFTRUE 12075
12073: GO 12223
12075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12076: LD_ADDR_VAR 0 2
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 4
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: LD_INT 7
12092: PUSH
12093: LD_INT 11
12095: PUSH
12096: LD_INT 12
12098: PUSH
12099: LD_INT 15
12101: PUSH
12102: LD_INT 16
12104: PUSH
12105: LD_INT 20
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 26
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 31
12128: PUSH
12129: LD_INT 32
12131: PUSH
12132: LD_INT 33
12134: PUSH
12135: LD_INT 34
12137: PUSH
12138: LD_INT 35
12140: PUSH
12141: LD_INT 36
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 101
12169: PUSH
12170: LD_INT 102
12172: PUSH
12173: LD_INT 103
12175: PUSH
12176: LD_INT 106
12178: PUSH
12179: LD_INT 108
12181: PUSH
12182: LD_INT 112
12184: PUSH
12185: LD_INT 113
12187: PUSH
12188: LD_INT 114
12190: PUSH
12191: LD_INT 115
12193: PUSH
12194: LD_INT 116
12196: PUSH
12197: LD_INT 117
12199: PUSH
12200: LD_INT 118
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: ST_TO_ADDR
12221: GO 12464
12223: LD_INT 19
12225: DOUBLE
12226: EQUAL
12227: IFTRUE 12231
12229: GO 12463
12231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 4
12248: PUSH
12249: LD_INT 5
12251: PUSH
12252: LD_INT 6
12254: PUSH
12255: LD_INT 7
12257: PUSH
12258: LD_INT 8
12260: PUSH
12261: LD_INT 9
12263: PUSH
12264: LD_INT 10
12266: PUSH
12267: LD_INT 11
12269: PUSH
12270: LD_INT 12
12272: PUSH
12273: LD_INT 13
12275: PUSH
12276: LD_INT 14
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 17
12287: PUSH
12288: LD_INT 18
12290: PUSH
12291: LD_INT 19
12293: PUSH
12294: LD_INT 20
12296: PUSH
12297: LD_INT 21
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_INT 23
12305: PUSH
12306: LD_INT 24
12308: PUSH
12309: LD_INT 25
12311: PUSH
12312: LD_INT 26
12314: PUSH
12315: LD_INT 27
12317: PUSH
12318: LD_INT 28
12320: PUSH
12321: LD_INT 29
12323: PUSH
12324: LD_INT 30
12326: PUSH
12327: LD_INT 31
12329: PUSH
12330: LD_INT 32
12332: PUSH
12333: LD_INT 33
12335: PUSH
12336: LD_INT 34
12338: PUSH
12339: LD_INT 35
12341: PUSH
12342: LD_INT 36
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 103
12391: PUSH
12392: LD_INT 104
12394: PUSH
12395: LD_INT 105
12397: PUSH
12398: LD_INT 106
12400: PUSH
12401: LD_INT 107
12403: PUSH
12404: LD_INT 108
12406: PUSH
12407: LD_INT 109
12409: PUSH
12410: LD_INT 110
12412: PUSH
12413: LD_INT 111
12415: PUSH
12416: LD_INT 112
12418: PUSH
12419: LD_INT 113
12421: PUSH
12422: LD_INT 114
12424: PUSH
12425: LD_INT 115
12427: PUSH
12428: LD_INT 116
12430: PUSH
12431: LD_INT 117
12433: PUSH
12434: LD_INT 118
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: ST_TO_ADDR
12461: GO 12464
12463: POP
// end else
12464: GO 12695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12466: LD_ADDR_VAR 0 2
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 3
12479: PUSH
12480: LD_INT 4
12482: PUSH
12483: LD_INT 5
12485: PUSH
12486: LD_INT 6
12488: PUSH
12489: LD_INT 7
12491: PUSH
12492: LD_INT 8
12494: PUSH
12495: LD_INT 9
12497: PUSH
12498: LD_INT 10
12500: PUSH
12501: LD_INT 11
12503: PUSH
12504: LD_INT 12
12506: PUSH
12507: LD_INT 13
12509: PUSH
12510: LD_INT 14
12512: PUSH
12513: LD_INT 15
12515: PUSH
12516: LD_INT 16
12518: PUSH
12519: LD_INT 17
12521: PUSH
12522: LD_INT 18
12524: PUSH
12525: LD_INT 19
12527: PUSH
12528: LD_INT 20
12530: PUSH
12531: LD_INT 21
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 23
12539: PUSH
12540: LD_INT 24
12542: PUSH
12543: LD_INT 25
12545: PUSH
12546: LD_INT 26
12548: PUSH
12549: LD_INT 27
12551: PUSH
12552: LD_INT 28
12554: PUSH
12555: LD_INT 29
12557: PUSH
12558: LD_INT 30
12560: PUSH
12561: LD_INT 31
12563: PUSH
12564: LD_INT 32
12566: PUSH
12567: LD_INT 33
12569: PUSH
12570: LD_INT 34
12572: PUSH
12573: LD_INT 35
12575: PUSH
12576: LD_INT 36
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 101
12619: PUSH
12620: LD_INT 102
12622: PUSH
12623: LD_INT 103
12625: PUSH
12626: LD_INT 104
12628: PUSH
12629: LD_INT 105
12631: PUSH
12632: LD_INT 106
12634: PUSH
12635: LD_INT 107
12637: PUSH
12638: LD_INT 108
12640: PUSH
12641: LD_INT 109
12643: PUSH
12644: LD_INT 110
12646: PUSH
12647: LD_INT 111
12649: PUSH
12650: LD_INT 112
12652: PUSH
12653: LD_INT 113
12655: PUSH
12656: LD_INT 114
12658: PUSH
12659: LD_INT 115
12661: PUSH
12662: LD_INT 116
12664: PUSH
12665: LD_INT 117
12667: PUSH
12668: LD_INT 118
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: ST_TO_ADDR
// if result then
12695: LD_VAR 0 2
12699: IFFALSE 13485
// begin normal :=  ;
12701: LD_ADDR_VAR 0 5
12705: PUSH
12706: LD_STRING 
12708: ST_TO_ADDR
// hardcore :=  ;
12709: LD_ADDR_VAR 0 6
12713: PUSH
12714: LD_STRING 
12716: ST_TO_ADDR
// active :=  ;
12717: LD_ADDR_VAR 0 7
12721: PUSH
12722: LD_STRING 
12724: ST_TO_ADDR
// for i = 1 to normalCounter do
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_EXP 26
12739: PUSH
12740: FOR_TO
12741: IFFALSE 12842
// begin tmp := 0 ;
12743: LD_ADDR_VAR 0 3
12747: PUSH
12748: LD_STRING 0
12750: ST_TO_ADDR
// if result [ 1 ] then
12751: LD_VAR 0 2
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: IFFALSE 12824
// if result [ 1 ] [ 1 ] = i then
12761: LD_VAR 0 2
12765: PUSH
12766: LD_INT 1
12768: ARRAY
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PUSH
12774: LD_VAR 0 8
12778: EQUAL
12779: IFFALSE 12824
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12781: LD_ADDR_VAR 0 2
12785: PUSH
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_VAR 0 2
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 3
12810: PPUSH
12811: CALL_OW 1
12815: ST_TO_ADDR
// tmp := 1 ;
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_STRING 1
12823: ST_TO_ADDR
// end ; normal := normal & tmp ;
12824: LD_ADDR_VAR 0 5
12828: PUSH
12829: LD_VAR 0 5
12833: PUSH
12834: LD_VAR 0 3
12838: STR
12839: ST_TO_ADDR
// end ;
12840: GO 12740
12842: POP
12843: POP
// for i = 1 to hardcoreCounter do
12844: LD_ADDR_VAR 0 8
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_EXP 27
12858: PUSH
12859: FOR_TO
12860: IFFALSE 12965
// begin tmp := 0 ;
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_STRING 0
12869: ST_TO_ADDR
// if result [ 2 ] then
12870: LD_VAR 0 2
12874: PUSH
12875: LD_INT 2
12877: ARRAY
12878: IFFALSE 12947
// if result [ 2 ] [ 1 ] = 100 + i then
12880: LD_VAR 0 2
12884: PUSH
12885: LD_INT 2
12887: ARRAY
12888: PUSH
12889: LD_INT 1
12891: ARRAY
12892: PUSH
12893: LD_INT 100
12895: PUSH
12896: LD_VAR 0 8
12900: PLUS
12901: EQUAL
12902: IFFALSE 12947
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12904: LD_ADDR_VAR 0 2
12908: PUSH
12909: LD_VAR 0 2
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_VAR 0 2
12921: PUSH
12922: LD_INT 2
12924: ARRAY
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 3
12933: PPUSH
12934: CALL_OW 1
12938: ST_TO_ADDR
// tmp := 1 ;
12939: LD_ADDR_VAR 0 3
12943: PUSH
12944: LD_STRING 1
12946: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12947: LD_ADDR_VAR 0 6
12951: PUSH
12952: LD_VAR 0 6
12956: PUSH
12957: LD_VAR 0 3
12961: STR
12962: ST_TO_ADDR
// end ;
12963: GO 12859
12965: POP
12966: POP
// if isGameLoad then
12967: LD_VAR 0 1
12971: IFFALSE 13446
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12973: LD_ADDR_VAR 0 4
12977: PUSH
12978: LD_EXP 30
12982: PUSH
12983: LD_EXP 29
12987: PUSH
12988: LD_EXP 31
12992: PUSH
12993: LD_EXP 28
12997: PUSH
12998: LD_EXP 32
13002: PUSH
13003: LD_EXP 33
13007: PUSH
13008: LD_EXP 34
13012: PUSH
13013: LD_EXP 35
13017: PUSH
13018: LD_EXP 36
13022: PUSH
13023: LD_EXP 37
13027: PUSH
13028: LD_EXP 38
13032: PUSH
13033: LD_EXP 39
13037: PUSH
13038: LD_EXP 40
13042: PUSH
13043: LD_EXP 41
13047: PUSH
13048: LD_EXP 49
13052: PUSH
13053: LD_EXP 50
13057: PUSH
13058: LD_EXP 51
13062: PUSH
13063: LD_EXP 52
13067: PUSH
13068: LD_EXP 54
13072: PUSH
13073: LD_EXP 55
13077: PUSH
13078: LD_EXP 56
13082: PUSH
13083: LD_EXP 59
13087: PUSH
13088: LD_EXP 61
13092: PUSH
13093: LD_EXP 62
13097: PUSH
13098: LD_EXP 63
13102: PUSH
13103: LD_EXP 65
13107: PUSH
13108: LD_EXP 66
13112: PUSH
13113: LD_EXP 69
13117: PUSH
13118: LD_EXP 70
13122: PUSH
13123: LD_EXP 71
13127: PUSH
13128: LD_EXP 72
13132: PUSH
13133: LD_EXP 73
13137: PUSH
13138: LD_EXP 74
13142: PUSH
13143: LD_EXP 75
13147: PUSH
13148: LD_EXP 76
13152: PUSH
13153: LD_EXP 77
13157: PUSH
13158: LD_EXP 42
13162: PUSH
13163: LD_EXP 43
13167: PUSH
13168: LD_EXP 46
13172: PUSH
13173: LD_EXP 47
13177: PUSH
13178: LD_EXP 48
13182: PUSH
13183: LD_EXP 44
13187: PUSH
13188: LD_EXP 45
13192: PUSH
13193: LD_EXP 53
13197: PUSH
13198: LD_EXP 57
13202: PUSH
13203: LD_EXP 58
13207: PUSH
13208: LD_EXP 60
13212: PUSH
13213: LD_EXP 64
13217: PUSH
13218: LD_EXP 67
13222: PUSH
13223: LD_EXP 68
13227: PUSH
13228: LD_EXP 78
13232: PUSH
13233: LD_EXP 79
13237: PUSH
13238: LD_EXP 80
13242: PUSH
13243: LD_EXP 81
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: ST_TO_ADDR
// tmp :=  ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_STRING 
13311: ST_TO_ADDR
// for i = 1 to normalCounter do
13312: LD_ADDR_VAR 0 8
13316: PUSH
13317: DOUBLE
13318: LD_INT 1
13320: DEC
13321: ST_TO_ADDR
13322: LD_EXP 26
13326: PUSH
13327: FOR_TO
13328: IFFALSE 13364
// begin if flags [ i ] then
13330: LD_VAR 0 4
13334: PUSH
13335: LD_VAR 0 8
13339: ARRAY
13340: IFFALSE 13362
// tmp := tmp & i & ; ;
13342: LD_ADDR_VAR 0 3
13346: PUSH
13347: LD_VAR 0 3
13351: PUSH
13352: LD_VAR 0 8
13356: STR
13357: PUSH
13358: LD_STRING ;
13360: STR
13361: ST_TO_ADDR
// end ;
13362: GO 13327
13364: POP
13365: POP
// for i = 1 to hardcoreCounter do
13366: LD_ADDR_VAR 0 8
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_EXP 27
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13428
// begin if flags [ normalCounter + i ] then
13384: LD_VAR 0 4
13388: PUSH
13389: LD_EXP 26
13393: PUSH
13394: LD_VAR 0 8
13398: PLUS
13399: ARRAY
13400: IFFALSE 13426
// tmp := tmp & ( 100 + i ) & ; ;
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: LD_VAR 0 3
13411: PUSH
13412: LD_INT 100
13414: PUSH
13415: LD_VAR 0 8
13419: PLUS
13420: STR
13421: PUSH
13422: LD_STRING ;
13424: STR
13425: ST_TO_ADDR
// end ;
13426: GO 13381
13428: POP
13429: POP
// if tmp then
13430: LD_VAR 0 3
13434: IFFALSE 13446
// active := tmp ;
13436: LD_ADDR_VAR 0 7
13440: PUSH
13441: LD_VAR 0 3
13445: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13446: LD_STRING getStreamItemsFromMission("
13448: PUSH
13449: LD_VAR 0 5
13453: STR
13454: PUSH
13455: LD_STRING ","
13457: STR
13458: PUSH
13459: LD_VAR 0 6
13463: STR
13464: PUSH
13465: LD_STRING ","
13467: STR
13468: PUSH
13469: LD_VAR 0 7
13473: STR
13474: PUSH
13475: LD_STRING ")
13477: STR
13478: PPUSH
13479: CALL_OW 559
// end else
13483: GO 13492
// ToLua ( getStreamItemsFromMission("","","") ) ;
13485: LD_STRING getStreamItemsFromMission("","","")
13487: PPUSH
13488: CALL_OW 559
// end ;
13492: LD_VAR 0 2
13496: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13497: LD_EXP 25
13501: PUSH
13502: LD_EXP 30
13506: AND
13507: IFFALSE 13631
13509: GO 13511
13511: DISABLE
13512: LD_INT 0
13514: PPUSH
13515: PPUSH
// begin enable ;
13516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 34
13539: PUSH
13540: LD_INT 7
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 34
13549: PUSH
13550: LD_INT 45
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 34
13559: PUSH
13560: LD_INT 28
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 34
13569: PUSH
13570: LD_INT 47
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: ST_TO_ADDR
// if not tmp then
13593: LD_VAR 0 2
13597: NOT
13598: IFFALSE 13602
// exit ;
13600: GO 13631
// for i in tmp do
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_VAR 0 2
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13629
// begin SetLives ( i , 0 ) ;
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_INT 0
13622: PPUSH
13623: CALL_OW 234
// end ;
13627: GO 13612
13629: POP
13630: POP
// end ;
13631: PPOPN 2
13633: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13634: LD_EXP 25
13638: PUSH
13639: LD_EXP 31
13643: AND
13644: IFFALSE 13728
13646: GO 13648
13648: DISABLE
13649: LD_INT 0
13651: PPUSH
13652: PPUSH
// begin enable ;
13653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13654: LD_ADDR_VAR 0 2
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 32
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 2
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13728
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 2
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13726
// begin SetLives ( i , 0 ) ;
13712: LD_VAR 0 1
13716: PPUSH
13717: LD_INT 0
13719: PPUSH
13720: CALL_OW 234
// end ;
13724: GO 13709
13726: POP
13727: POP
// end ;
13728: PPOPN 2
13730: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13731: LD_EXP 25
13735: PUSH
13736: LD_EXP 28
13740: AND
13741: IFFALSE 13834
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
// begin enable ;
13749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13750: LD_ADDR_VAR 0 1
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_OWVAR 2
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 5
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 9
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 25
13792: PUSH
13793: LD_INT 8
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: PUSH
13815: FOR_IN
13816: IFFALSE 13832
// begin SetClass ( i , 1 ) ;
13818: LD_VAR 0 1
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: CALL_OW 336
// end ;
13830: GO 13815
13832: POP
13833: POP
// end ;
13834: PPOPN 1
13836: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13837: LD_EXP 25
13841: PUSH
13842: LD_EXP 29
13846: AND
13847: PUSH
13848: LD_OWVAR 65
13852: PUSH
13853: LD_INT 7
13855: LESS
13856: AND
13857: IFFALSE 13871
13859: GO 13861
13861: DISABLE
// begin enable ;
13862: ENABLE
// game_speed := 7 ;
13863: LD_ADDR_OWVAR 65
13867: PUSH
13868: LD_INT 7
13870: ST_TO_ADDR
// end ;
13871: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13872: LD_EXP 25
13876: PUSH
13877: LD_EXP 32
13881: AND
13882: IFFALSE 14084
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13892: LD_ADDR_VAR 0 3
13896: PUSH
13897: LD_INT 81
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 21
13911: PUSH
13912: LD_INT 1
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 69
13927: ST_TO_ADDR
// if not tmp then
13928: LD_VAR 0 3
13932: NOT
13933: IFFALSE 13937
// exit ;
13935: GO 14084
// if tmp > 5 then
13937: LD_VAR 0 3
13941: PUSH
13942: LD_INT 5
13944: GREATER
13945: IFFALSE 13957
// k := 5 else
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_INT 5
13954: ST_TO_ADDR
13955: GO 13967
// k := tmp ;
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_VAR 0 3
13966: ST_TO_ADDR
// for i := 1 to k do
13967: LD_ADDR_VAR 0 1
13971: PUSH
13972: DOUBLE
13973: LD_INT 1
13975: DEC
13976: ST_TO_ADDR
13977: LD_VAR 0 2
13981: PUSH
13982: FOR_TO
13983: IFFALSE 14082
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13985: LD_VAR 0 3
13989: PUSH
13990: LD_VAR 0 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 1
14000: PUSH
14001: LD_INT 4
14003: MOD
14004: PUSH
14005: LD_INT 1
14007: PLUS
14008: PPUSH
14009: CALL_OW 259
14013: PUSH
14014: LD_INT 10
14016: LESS
14017: IFFALSE 14080
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14019: LD_VAR 0 3
14023: PUSH
14024: LD_VAR 0 1
14028: ARRAY
14029: PPUSH
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 4
14037: MOD
14038: PUSH
14039: LD_INT 1
14041: PLUS
14042: PPUSH
14043: LD_VAR 0 3
14047: PUSH
14048: LD_VAR 0 1
14052: ARRAY
14053: PPUSH
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 4
14061: MOD
14062: PUSH
14063: LD_INT 1
14065: PLUS
14066: PPUSH
14067: CALL_OW 259
14071: PUSH
14072: LD_INT 1
14074: PLUS
14075: PPUSH
14076: CALL_OW 237
14080: GO 13982
14082: POP
14083: POP
// end ;
14084: PPOPN 3
14086: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14087: LD_EXP 25
14091: PUSH
14092: LD_EXP 33
14096: AND
14097: IFFALSE 14117
14099: GO 14101
14101: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14102: LD_INT 4
14104: PPUSH
14105: LD_OWVAR 2
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 324
14117: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14118: LD_EXP 25
14122: PUSH
14123: LD_EXP 62
14127: AND
14128: IFFALSE 14148
14130: GO 14132
14132: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14133: LD_INT 19
14135: PPUSH
14136: LD_OWVAR 2
14140: PPUSH
14141: LD_INT 0
14143: PPUSH
14144: CALL_OW 324
14148: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14149: LD_EXP 25
14153: PUSH
14154: LD_EXP 34
14158: AND
14159: IFFALSE 14261
14161: GO 14163
14163: DISABLE
14164: LD_INT 0
14166: PPUSH
14167: PPUSH
// begin enable ;
14168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14169: LD_ADDR_VAR 0 2
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_OWVAR 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 34
14191: PUSH
14192: LD_INT 11
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 34
14201: PUSH
14202: LD_INT 30
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: ST_TO_ADDR
// if not tmp then
14223: LD_VAR 0 2
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14261
// for i in tmp do
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_VAR 0 2
14241: PUSH
14242: FOR_IN
14243: IFFALSE 14259
// begin SetLives ( i , 0 ) ;
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 0
14252: PPUSH
14253: CALL_OW 234
// end ;
14257: GO 14242
14259: POP
14260: POP
// end ;
14261: PPOPN 2
14263: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14264: LD_EXP 25
14268: PUSH
14269: LD_EXP 35
14273: AND
14274: IFFALSE 14294
14276: GO 14278
14278: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14279: LD_INT 32
14281: PPUSH
14282: LD_OWVAR 2
14286: PPUSH
14287: LD_INT 0
14289: PPUSH
14290: CALL_OW 324
14294: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14295: LD_EXP 25
14299: PUSH
14300: LD_EXP 36
14304: AND
14305: IFFALSE 14486
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
14314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_OWVAR 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 33
14334: PUSH
14335: LD_INT 3
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: ST_TO_ADDR
// if not tmp then
14351: LD_VAR 0 2
14355: NOT
14356: IFFALSE 14360
// exit ;
14358: GO 14486
// side := 0 ;
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// for i := 1 to 8 do
14368: LD_ADDR_VAR 0 1
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_INT 8
14380: PUSH
14381: FOR_TO
14382: IFFALSE 14430
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14384: LD_OWVAR 2
14388: PUSH
14389: LD_VAR 0 1
14393: NONEQUAL
14394: PUSH
14395: LD_OWVAR 2
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 81
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: AND
14414: IFFALSE 14428
// begin side := i ;
14416: LD_ADDR_VAR 0 3
14420: PUSH
14421: LD_VAR 0 1
14425: ST_TO_ADDR
// break ;
14426: GO 14430
// end ;
14428: GO 14381
14430: POP
14431: POP
// if not side then
14432: LD_VAR 0 3
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14486
// for i := 1 to tmp do
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: DOUBLE
14447: LD_INT 1
14449: DEC
14450: ST_TO_ADDR
14451: LD_VAR 0 2
14455: PUSH
14456: FOR_TO
14457: IFFALSE 14484
// if Prob ( 60 ) then
14459: LD_INT 60
14461: PPUSH
14462: CALL_OW 13
14466: IFFALSE 14482
// SetSide ( i , side ) ;
14468: LD_VAR 0 1
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: CALL_OW 235
14482: GO 14456
14484: POP
14485: POP
// end ;
14486: PPOPN 3
14488: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14489: LD_EXP 25
14493: PUSH
14494: LD_EXP 38
14498: AND
14499: IFFALSE 14618
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14507: LD_ADDR_VAR 0 1
14511: PUSH
14512: LD_INT 22
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: LD_INT 23
14539: PUSH
14540: LD_INT 0
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14616
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 257
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: LD_INT 4
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: IN
14592: IFFALSE 14614
// SetClass ( un , rand ( 1 , 4 ) ) ;
14594: LD_VAR 0 1
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_INT 4
14604: PPUSH
14605: CALL_OW 12
14609: PPUSH
14610: CALL_OW 336
14614: GO 14561
14616: POP
14617: POP
// end ;
14618: PPOPN 1
14620: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14621: LD_EXP 25
14625: PUSH
14626: LD_EXP 37
14630: AND
14631: IFFALSE 14710
14633: GO 14635
14635: DISABLE
14636: LD_INT 0
14638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14639: LD_ADDR_VAR 0 1
14643: PUSH
14644: LD_INT 22
14646: PUSH
14647: LD_OWVAR 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 3
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: ST_TO_ADDR
// if not tmp then
14675: LD_VAR 0 1
14679: NOT
14680: IFFALSE 14684
// exit ;
14682: GO 14710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14684: LD_VAR 0 1
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 12
14701: ARRAY
14702: PPUSH
14703: LD_INT 100
14705: PPUSH
14706: CALL_OW 234
// end ;
14710: PPOPN 1
14712: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14713: LD_EXP 25
14717: PUSH
14718: LD_EXP 39
14722: AND
14723: IFFALSE 14821
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: ST_TO_ADDR
// if not tmp then
14767: LD_VAR 0 1
14771: NOT
14772: IFFALSE 14776
// exit ;
14774: GO 14821
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 12
14793: ARRAY
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_INT 4
14800: PPUSH
14801: CALL_OW 12
14805: PPUSH
14806: LD_INT 3000
14808: PPUSH
14809: LD_INT 9000
14811: PPUSH
14812: CALL_OW 12
14816: PPUSH
14817: CALL_OW 492
// end ;
14821: PPOPN 1
14823: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14824: LD_EXP 25
14828: PUSH
14829: LD_EXP 40
14833: AND
14834: IFFALSE 14854
14836: GO 14838
14838: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14839: LD_INT 1
14841: PPUSH
14842: LD_OWVAR 2
14846: PPUSH
14847: LD_INT 0
14849: PPUSH
14850: CALL_OW 324
14854: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14855: LD_EXP 25
14859: PUSH
14860: LD_EXP 41
14864: AND
14865: IFFALSE 14948
14867: GO 14869
14869: DISABLE
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_OWVAR 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 3
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: ST_TO_ADDR
// if not tmp then
14910: LD_VAR 0 2
14914: NOT
14915: IFFALSE 14919
// exit ;
14917: GO 14948
// for i in tmp do
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_VAR 0 2
14928: PUSH
14929: FOR_IN
14930: IFFALSE 14946
// SetBLevel ( i , 10 ) ;
14932: LD_VAR 0 1
14936: PPUSH
14937: LD_INT 10
14939: PPUSH
14940: CALL_OW 241
14944: GO 14929
14946: POP
14947: POP
// end ;
14948: PPOPN 2
14950: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14951: LD_EXP 25
14955: PUSH
14956: LD_EXP 42
14960: AND
14961: IFFALSE 15072
14963: GO 14965
14965: DISABLE
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
14970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_OWVAR 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 3
15011: NOT
15012: IFFALSE 15016
// exit ;
15014: GO 15072
// un := tmp [ rand ( 1 , tmp ) ] ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_VAR 0 3
15025: PUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: CALL_OW 12
15038: ARRAY
15039: ST_TO_ADDR
// if Crawls ( un ) then
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 318
15049: IFFALSE 15060
// ComWalk ( un ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15060: LD_VAR 0 2
15064: PPUSH
15065: LD_INT 5
15067: PPUSH
15068: CALL_OW 336
// end ;
15072: PPOPN 3
15074: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15075: LD_EXP 25
15079: PUSH
15080: LD_EXP 43
15084: AND
15085: PUSH
15086: LD_OWVAR 67
15090: PUSH
15091: LD_INT 4
15093: LESS
15094: AND
15095: IFFALSE 15114
15097: GO 15099
15099: DISABLE
// begin Difficulty := Difficulty + 1 ;
15100: LD_ADDR_OWVAR 67
15104: PUSH
15105: LD_OWVAR 67
15109: PUSH
15110: LD_INT 1
15112: PLUS
15113: ST_TO_ADDR
// end ;
15114: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15115: LD_EXP 25
15119: PUSH
15120: LD_EXP 44
15124: AND
15125: IFFALSE 15228
15127: GO 15129
15129: DISABLE
15130: LD_INT 0
15132: PPUSH
// begin for i := 1 to 5 do
15133: LD_ADDR_VAR 0 1
15137: PUSH
15138: DOUBLE
15139: LD_INT 1
15141: DEC
15142: ST_TO_ADDR
15143: LD_INT 5
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15226
// begin uc_nation := nation_nature ;
15149: LD_ADDR_OWVAR 21
15153: PUSH
15154: LD_INT 0
15156: ST_TO_ADDR
// uc_side := 0 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 0
15164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15165: LD_ADDR_OWVAR 29
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 12
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
// hc_agressivity := 20 ;
15180: LD_ADDR_OWVAR 35
15184: PUSH
15185: LD_INT 20
15187: ST_TO_ADDR
// hc_class := class_tiger ;
15188: LD_ADDR_OWVAR 28
15192: PUSH
15193: LD_INT 14
15195: ST_TO_ADDR
// hc_gallery :=  ;
15196: LD_ADDR_OWVAR 33
15200: PUSH
15201: LD_STRING 
15203: ST_TO_ADDR
// hc_name :=  ;
15204: LD_ADDR_OWVAR 26
15208: PUSH
15209: LD_STRING 
15211: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_INT 0
15219: PPUSH
15220: CALL_OW 51
// end ;
15224: GO 15146
15226: POP
15227: POP
// end ;
15228: PPOPN 1
15230: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15231: LD_EXP 25
15235: PUSH
15236: LD_EXP 45
15240: AND
15241: IFFALSE 15250
15243: GO 15245
15245: DISABLE
// StreamSibBomb ;
15246: CALL 15251 0 0
15250: END
// export function StreamSibBomb ; var i , x , y ; begin
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
// result := false ;
15257: LD_ADDR_VAR 0 1
15261: PUSH
15262: LD_INT 0
15264: ST_TO_ADDR
// for i := 1 to 16 do
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_INT 16
15277: PUSH
15278: FOR_TO
15279: IFFALSE 15478
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 10
15288: PUSH
15289: LD_INT 20
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 40
15297: PUSH
15298: LD_INT 50
15300: PUSH
15301: LD_INT 60
15303: PUSH
15304: LD_INT 70
15306: PUSH
15307: LD_INT 80
15309: PUSH
15310: LD_INT 90
15312: PUSH
15313: LD_INT 100
15315: PUSH
15316: LD_INT 110
15318: PUSH
15319: LD_INT 120
15321: PUSH
15322: LD_INT 130
15324: PUSH
15325: LD_INT 140
15327: PUSH
15328: LD_INT 150
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 1
15350: PPUSH
15351: LD_INT 15
15353: PPUSH
15354: CALL_OW 12
15358: ARRAY
15359: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15360: LD_ADDR_VAR 0 4
15364: PUSH
15365: LD_INT 10
15367: PUSH
15368: LD_INT 20
15370: PUSH
15371: LD_INT 30
15373: PUSH
15374: LD_INT 40
15376: PUSH
15377: LD_INT 50
15379: PUSH
15380: LD_INT 60
15382: PUSH
15383: LD_INT 70
15385: PUSH
15386: LD_INT 80
15388: PUSH
15389: LD_INT 90
15391: PUSH
15392: LD_INT 100
15394: PUSH
15395: LD_INT 110
15397: PUSH
15398: LD_INT 120
15400: PUSH
15401: LD_INT 130
15403: PUSH
15404: LD_INT 140
15406: PUSH
15407: LD_INT 150
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 1
15429: PPUSH
15430: LD_INT 15
15432: PPUSH
15433: CALL_OW 12
15437: ARRAY
15438: ST_TO_ADDR
// if ValidHex ( x , y ) then
15439: LD_VAR 0 3
15443: PPUSH
15444: LD_VAR 0 4
15448: PPUSH
15449: CALL_OW 488
15453: IFFALSE 15476
// begin result := [ x , y ] ;
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_VAR 0 3
15464: PUSH
15465: LD_VAR 0 4
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: ST_TO_ADDR
// break ;
15474: GO 15478
// end ; end ;
15476: GO 15278
15478: POP
15479: POP
// if result then
15480: LD_VAR 0 1
15484: IFFALSE 15544
// begin ToLua ( playSibBomb() ) ;
15486: LD_STRING playSibBomb()
15488: PPUSH
15489: CALL_OW 559
// wait ( 0 0$14 ) ;
15493: LD_INT 490
15495: PPUSH
15496: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15500: LD_VAR 0 1
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 1
15513: PUSH
15514: LD_INT 2
15516: ARRAY
15517: PPUSH
15518: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15522: LD_VAR 0 1
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PPUSH
15540: CALL_OW 429
// end ; end ;
15544: LD_VAR 0 1
15548: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15549: LD_EXP 25
15553: PUSH
15554: LD_EXP 47
15558: AND
15559: IFFALSE 15571
15561: GO 15563
15563: DISABLE
// YouLost (  ) ;
15564: LD_STRING 
15566: PPUSH
15567: CALL_OW 104
15571: END
// every 0 0$1 trigger StreamModeActive and sFog do
15572: LD_EXP 25
15576: PUSH
15577: LD_EXP 46
15581: AND
15582: IFFALSE 15596
15584: GO 15586
15586: DISABLE
// FogOff ( your_side ) ;
15587: LD_OWVAR 2
15591: PPUSH
15592: CALL_OW 344
15596: END
// every 0 0$1 trigger StreamModeActive and sSun do
15597: LD_EXP 25
15601: PUSH
15602: LD_EXP 48
15606: AND
15607: IFFALSE 15635
15609: GO 15611
15611: DISABLE
// begin solar_recharge_percent := 0 ;
15612: LD_ADDR_OWVAR 79
15616: PUSH
15617: LD_INT 0
15619: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15620: LD_INT 10500
15622: PPUSH
15623: CALL_OW 67
// solar_recharge_percent := 100 ;
15627: LD_ADDR_OWVAR 79
15631: PUSH
15632: LD_INT 100
15634: ST_TO_ADDR
// end ;
15635: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15636: LD_EXP 25
15640: PUSH
15641: LD_EXP 49
15645: AND
15646: IFFALSE 15885
15648: GO 15650
15650: DISABLE
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
15655: PPUSH
// begin tmp := [ ] ;
15656: LD_ADDR_VAR 0 3
15660: PUSH
15661: EMPTY
15662: ST_TO_ADDR
// for i := 1 to 6 do
15663: LD_ADDR_VAR 0 1
15667: PUSH
15668: DOUBLE
15669: LD_INT 1
15671: DEC
15672: ST_TO_ADDR
15673: LD_INT 6
15675: PUSH
15676: FOR_TO
15677: IFFALSE 15782
// begin uc_nation := nation_nature ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_INT 0
15686: ST_TO_ADDR
// uc_side := 0 ;
15687: LD_ADDR_OWVAR 20
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15695: LD_ADDR_OWVAR 29
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 12
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// hc_agressivity := 20 ;
15710: LD_ADDR_OWVAR 35
15714: PUSH
15715: LD_INT 20
15717: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15718: LD_ADDR_OWVAR 28
15722: PUSH
15723: LD_INT 17
15725: ST_TO_ADDR
// hc_gallery :=  ;
15726: LD_ADDR_OWVAR 33
15730: PUSH
15731: LD_STRING 
15733: ST_TO_ADDR
// hc_name :=  ;
15734: LD_ADDR_OWVAR 26
15738: PUSH
15739: LD_STRING 
15741: ST_TO_ADDR
// un := CreateHuman ;
15742: LD_ADDR_VAR 0 2
15746: PUSH
15747: CALL_OW 44
15751: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 51
// tmp := tmp ^ un ;
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_VAR 0 3
15773: PUSH
15774: LD_VAR 0 2
15778: ADD
15779: ST_TO_ADDR
// end ;
15780: GO 15676
15782: POP
15783: POP
// repeat wait ( 0 0$1 ) ;
15784: LD_INT 35
15786: PPUSH
15787: CALL_OW 67
// for un in tmp do
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_VAR 0 3
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15876
// begin if IsDead ( un ) then
15804: LD_VAR 0 2
15808: PPUSH
15809: CALL_OW 301
15813: IFFALSE 15833
// begin tmp := tmp diff un ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: LD_VAR 0 2
15829: DIFF
15830: ST_TO_ADDR
// continue ;
15831: GO 15801
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15833: LD_VAR 0 2
15837: PPUSH
15838: LD_INT 3
15840: PUSH
15841: LD_INT 22
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 74
15869: PPUSH
15870: CALL_OW 115
// end ;
15874: GO 15801
15876: POP
15877: POP
// until not tmp ;
15878: LD_VAR 0 3
15882: NOT
15883: IFFALSE 15784
// end ;
15885: PPOPN 3
15887: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15888: LD_EXP 25
15892: PUSH
15893: LD_EXP 50
15897: AND
15898: IFFALSE 15952
15900: GO 15902
15902: DISABLE
// begin ToLua ( displayTroll(); ) ;
15903: LD_STRING displayTroll();
15905: PPUSH
15906: CALL_OW 559
// wait ( 3 3$00 ) ;
15910: LD_INT 6300
15912: PPUSH
15913: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15917: LD_STRING hideTroll();
15919: PPUSH
15920: CALL_OW 559
// wait ( 1 1$00 ) ;
15924: LD_INT 2100
15926: PPUSH
15927: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15931: LD_STRING displayTroll();
15933: PPUSH
15934: CALL_OW 559
// wait ( 1 1$00 ) ;
15938: LD_INT 2100
15940: PPUSH
15941: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15945: LD_STRING hideTroll();
15947: PPUSH
15948: CALL_OW 559
// end ;
15952: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15953: LD_EXP 25
15957: PUSH
15958: LD_EXP 51
15962: AND
15963: IFFALSE 16026
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
// begin p := 0 ;
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// repeat game_speed := 1 ;
15979: LD_ADDR_OWVAR 65
15983: PUSH
15984: LD_INT 1
15986: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15987: LD_INT 35
15989: PPUSH
15990: CALL_OW 67
// p := p + 1 ;
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: LD_VAR 0 1
16003: PUSH
16004: LD_INT 1
16006: PLUS
16007: ST_TO_ADDR
// until p >= 60 ;
16008: LD_VAR 0 1
16012: PUSH
16013: LD_INT 60
16015: GREATEREQUAL
16016: IFFALSE 15979
// game_speed := 4 ;
16018: LD_ADDR_OWVAR 65
16022: PUSH
16023: LD_INT 4
16025: ST_TO_ADDR
// end ;
16026: PPOPN 1
16028: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16029: LD_EXP 25
16033: PUSH
16034: LD_EXP 52
16038: AND
16039: IFFALSE 16185
16041: GO 16043
16043: DISABLE
16044: LD_INT 0
16046: PPUSH
16047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16048: LD_ADDR_VAR 0 1
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_OWVAR 2
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 2
16067: PUSH
16068: LD_INT 30
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 30
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: ST_TO_ADDR
// if not depot then
16102: LD_VAR 0 1
16106: NOT
16107: IFFALSE 16111
// exit ;
16109: GO 16185
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: LD_VAR 0 1
16120: PUSH
16121: LD_INT 1
16123: PPUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 12
16133: ARRAY
16134: PPUSH
16135: CALL_OW 274
16139: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16140: LD_VAR 0 2
16144: PPUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_INT 0
16150: PPUSH
16151: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16155: LD_VAR 0 2
16159: PPUSH
16160: LD_INT 2
16162: PPUSH
16163: LD_INT 0
16165: PPUSH
16166: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_INT 3
16177: PPUSH
16178: LD_INT 0
16180: PPUSH
16181: CALL_OW 277
// end ;
16185: PPOPN 2
16187: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16188: LD_EXP 25
16192: PUSH
16193: LD_EXP 53
16197: AND
16198: IFFALSE 16295
16200: GO 16202
16202: DISABLE
16203: LD_INT 0
16205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 1
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 3
16235: PUSH
16236: LD_INT 23
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 69
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 1
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16269: LD_VAR 0 1
16273: PUSH
16274: LD_INT 1
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: PPUSH
16288: LD_INT 200
16290: PPUSH
16291: CALL_OW 234
// end ;
16295: PPOPN 1
16297: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16298: LD_EXP 25
16302: PUSH
16303: LD_EXP 54
16307: AND
16308: IFFALSE 16387
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16316: LD_ADDR_VAR 0 1
16320: PUSH
16321: LD_INT 22
16323: PUSH
16324: LD_OWVAR 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: ST_TO_ADDR
// if not tmp then
16352: LD_VAR 0 1
16356: NOT
16357: IFFALSE 16361
// exit ;
16359: GO 16387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16361: LD_VAR 0 1
16365: PUSH
16366: LD_INT 1
16368: PPUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 12
16378: ARRAY
16379: PPUSH
16380: LD_INT 60
16382: PPUSH
16383: CALL_OW 234
// end ;
16387: PPOPN 1
16389: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16390: LD_EXP 25
16394: PUSH
16395: LD_EXP 55
16399: AND
16400: IFFALSE 16499
16402: GO 16404
16404: DISABLE
16405: LD_INT 0
16407: PPUSH
16408: PPUSH
// begin enable ;
16409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_OWVAR 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 61
16429: PUSH
16430: EMPTY
16431: LIST
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 69
16452: ST_TO_ADDR
// if not tmp then
16453: LD_VAR 0 1
16457: NOT
16458: IFFALSE 16462
// exit ;
16460: GO 16499
// for i in tmp do
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_VAR 0 1
16471: PUSH
16472: FOR_IN
16473: IFFALSE 16497
// if IsControledBy ( i ) then
16475: LD_VAR 0 2
16479: PPUSH
16480: CALL_OW 312
16484: IFFALSE 16495
// ComUnlink ( i ) ;
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL_OW 136
16495: GO 16472
16497: POP
16498: POP
// end ;
16499: PPOPN 2
16501: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16502: LD_EXP 25
16506: PUSH
16507: LD_EXP 56
16511: AND
16512: IFFALSE 16652
16514: GO 16516
16516: DISABLE
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
// begin ToLua ( displayPowell(); ) ;
16521: LD_STRING displayPowell();
16523: PPUSH
16524: CALL_OW 559
// uc_side := 0 ;
16528: LD_ADDR_OWVAR 20
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// uc_nation := 2 ;
16536: LD_ADDR_OWVAR 21
16540: PUSH
16541: LD_INT 2
16543: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16544: LD_ADDR_OWVAR 37
16548: PUSH
16549: LD_INT 14
16551: ST_TO_ADDR
// vc_engine := engine_siberite ;
16552: LD_ADDR_OWVAR 39
16556: PUSH
16557: LD_INT 3
16559: ST_TO_ADDR
// vc_control := control_apeman ;
16560: LD_ADDR_OWVAR 38
16564: PUSH
16565: LD_INT 5
16567: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16568: LD_ADDR_OWVAR 40
16572: PUSH
16573: LD_INT 29
16575: ST_TO_ADDR
// un := CreateVehicle ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: CALL_OW 45
16585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16598: LD_INT 35
16600: PPUSH
16601: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16605: LD_VAR 0 2
16609: PPUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PPUSH
16627: LD_VAR 0 2
16631: PPUSH
16632: CALL_OW 74
16636: PPUSH
16637: CALL_OW 115
// until IsDead ( un ) ;
16641: LD_VAR 0 2
16645: PPUSH
16646: CALL_OW 301
16650: IFFALSE 16598
// end ;
16652: PPOPN 2
16654: END
// every 0 0$1 trigger StreamModeActive and sStu do
16655: LD_EXP 25
16659: PUSH
16660: LD_EXP 64
16664: AND
16665: IFFALSE 16681
16667: GO 16669
16669: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16670: LD_STRING displayStucuk();
16672: PPUSH
16673: CALL_OW 559
// ResetFog ;
16677: CALL_OW 335
// end ;
16681: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16682: LD_EXP 25
16686: PUSH
16687: LD_EXP 57
16691: AND
16692: IFFALSE 16833
16694: GO 16696
16696: DISABLE
16697: LD_INT 0
16699: PPUSH
16700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_INT 22
16708: PUSH
16709: LD_OWVAR 2
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
// if not tmp then
16737: LD_VAR 0 2
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 16833
// un := tmp [ rand ( 1 , tmp ) ] ;
16746: LD_ADDR_VAR 0 1
16750: PUSH
16751: LD_VAR 0 2
16755: PUSH
16756: LD_INT 1
16758: PPUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 12
16768: ARRAY
16769: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16770: LD_VAR 0 1
16774: PPUSH
16775: LD_INT 0
16777: PPUSH
16778: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16782: LD_VAR 0 1
16786: PPUSH
16787: LD_OWVAR 3
16791: PUSH
16792: LD_VAR 0 1
16796: DIFF
16797: PPUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 74
16807: PPUSH
16808: CALL_OW 115
// wait ( 0 0$20 ) ;
16812: LD_INT 700
16814: PPUSH
16815: CALL_OW 67
// SetSide ( un , your_side ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_OWVAR 2
16828: PPUSH
16829: CALL_OW 235
// end ;
16833: PPOPN 2
16835: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16836: LD_EXP 25
16840: PUSH
16841: LD_EXP 58
16845: AND
16846: IFFALSE 16952
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_OWVAR 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: ST_TO_ADDR
// if not depot then
16908: LD_VAR 0 1
16912: NOT
16913: IFFALSE 16917
// exit ;
16915: GO 16952
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16917: LD_VAR 0 1
16921: PUSH
16922: LD_INT 1
16924: ARRAY
16925: PPUSH
16926: CALL_OW 250
16930: PPUSH
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: CALL_OW 251
16944: PPUSH
16945: LD_INT 70
16947: PPUSH
16948: CALL_OW 495
// end ;
16952: PPOPN 1
16954: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16955: LD_EXP 25
16959: PUSH
16960: LD_EXP 59
16964: AND
16965: IFFALSE 17176
16967: GO 16969
16969: DISABLE
16970: LD_INT 0
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16977: LD_ADDR_VAR 0 5
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_OWVAR 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: ST_TO_ADDR
// if not tmp then
17013: LD_VAR 0 5
17017: NOT
17018: IFFALSE 17022
// exit ;
17020: GO 17176
// for i in tmp do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: LD_VAR 0 5
17031: PUSH
17032: FOR_IN
17033: IFFALSE 17174
// begin d := rand ( 0 , 5 ) ;
17035: LD_ADDR_VAR 0 4
17039: PUSH
17040: LD_INT 0
17042: PPUSH
17043: LD_INT 5
17045: PPUSH
17046: CALL_OW 12
17050: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 250
17065: PPUSH
17066: LD_VAR 0 4
17070: PPUSH
17071: LD_INT 3
17073: PPUSH
17074: LD_INT 12
17076: PPUSH
17077: CALL_OW 12
17081: PPUSH
17082: CALL_OW 272
17086: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 251
17101: PPUSH
17102: LD_VAR 0 4
17106: PPUSH
17107: LD_INT 3
17109: PPUSH
17110: LD_INT 12
17112: PPUSH
17113: CALL_OW 12
17117: PPUSH
17118: CALL_OW 273
17122: ST_TO_ADDR
// if ValidHex ( x , y ) then
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 488
17137: IFFALSE 17172
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: LD_VAR 0 3
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: LD_INT 6
17159: PPUSH
17160: CALL_OW 12
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 483
// end ;
17172: GO 17032
17174: POP
17175: POP
// end ;
17176: PPOPN 5
17178: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17179: LD_EXP 25
17183: PUSH
17184: LD_EXP 60
17188: AND
17189: IFFALSE 17283
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17198: LD_ADDR_VAR 0 2
17202: PUSH
17203: LD_INT 22
17205: PUSH
17206: LD_OWVAR 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 32
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 21
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not tmp then
17245: LD_VAR 0 2
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17283
// for i in tmp do
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_VAR 0 2
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17281
// SetFuel ( i , 0 ) ;
17267: LD_VAR 0 1
17271: PPUSH
17272: LD_INT 0
17274: PPUSH
17275: CALL_OW 240
17279: GO 17264
17281: POP
17282: POP
// end ;
17283: PPOPN 2
17285: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17286: LD_EXP 25
17290: PUSH
17291: LD_EXP 61
17295: AND
17296: IFFALSE 17362
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_OWVAR 2
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 30
17323: PUSH
17324: LD_INT 29
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PPUSH
17335: CALL_OW 69
17339: ST_TO_ADDR
// if not tmp then
17340: LD_VAR 0 1
17344: NOT
17345: IFFALSE 17349
// exit ;
17347: GO 17362
// DestroyUnit ( tmp [ 1 ] ) ;
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: PPUSH
17358: CALL_OW 65
// end ;
17362: PPOPN 1
17364: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17365: LD_EXP 25
17369: PUSH
17370: LD_EXP 63
17374: AND
17375: IFFALSE 17504
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin uc_side := 0 ;
17383: LD_ADDR_OWVAR 20
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// uc_nation := nation_arabian ;
17391: LD_ADDR_OWVAR 21
17395: PUSH
17396: LD_INT 2
17398: ST_TO_ADDR
// hc_gallery :=  ;
17399: LD_ADDR_OWVAR 33
17403: PUSH
17404: LD_STRING 
17406: ST_TO_ADDR
// hc_name :=  ;
17407: LD_ADDR_OWVAR 26
17411: PUSH
17412: LD_STRING 
17414: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 11
17420: PPUSH
17421: LD_INT 10
17423: PPUSH
17424: CALL_OW 380
// un := CreateHuman ;
17428: LD_ADDR_VAR 0 1
17432: PUSH
17433: CALL_OW 44
17437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17438: LD_VAR 0 1
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17450: LD_INT 35
17452: PPUSH
17453: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: LD_INT 22
17464: PUSH
17465: LD_OWVAR 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PPUSH
17474: CALL_OW 69
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 74
17488: PPUSH
17489: CALL_OW 115
// until IsDead ( un ) ;
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 301
17502: IFFALSE 17450
// end ;
17504: PPOPN 1
17506: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17507: LD_EXP 25
17511: PUSH
17512: LD_EXP 65
17516: AND
17517: IFFALSE 17529
17519: GO 17521
17521: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17522: LD_STRING earthquake(getX(game), 0, 32)
17524: PPUSH
17525: CALL_OW 559
17529: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17530: LD_EXP 25
17534: PUSH
17535: LD_EXP 66
17539: AND
17540: IFFALSE 17631
17542: GO 17544
17544: DISABLE
17545: LD_INT 0
17547: PPUSH
// begin enable ;
17548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 21
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 33
17578: PUSH
17579: LD_INT 3
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 1
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17605: LD_VAR 0 1
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 12
17622: ARRAY
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 234
// end ;
17631: PPOPN 1
17633: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17634: LD_EXP 25
17638: PUSH
17639: LD_EXP 67
17643: AND
17644: IFFALSE 17785
17646: GO 17648
17648: DISABLE
17649: LD_INT 0
17651: PPUSH
17652: PPUSH
17653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17654: LD_ADDR_VAR 0 3
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_OWVAR 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 25
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: ST_TO_ADDR
// if not tmp then
17690: LD_VAR 0 3
17694: NOT
17695: IFFALSE 17699
// exit ;
17697: GO 17785
// un := tmp [ rand ( 1 , tmp ) ] ;
17699: LD_ADDR_VAR 0 2
17703: PUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_INT 1
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: CALL_OW 12
17721: ARRAY
17722: ST_TO_ADDR
// if Crawls ( un ) then
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 318
17732: IFFALSE 17743
// ComWalk ( un ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_INT 9
17750: PPUSH
17751: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17755: LD_INT 28
17757: PPUSH
17758: LD_OWVAR 2
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17770: LD_INT 29
17772: PPUSH
17773: LD_OWVAR 2
17777: PPUSH
17778: LD_INT 2
17780: PPUSH
17781: CALL_OW 322
// end ;
17785: PPOPN 3
17787: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17788: LD_EXP 25
17792: PUSH
17793: LD_EXP 68
17797: AND
17798: IFFALSE 17909
17800: GO 17802
17802: DISABLE
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: ST_TO_ADDR
// if not tmp then
17844: LD_VAR 0 3
17848: NOT
17849: IFFALSE 17853
// exit ;
17851: GO 17909
// un := tmp [ rand ( 1 , tmp ) ] ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 1
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: CALL_OW 12
17875: ARRAY
17876: ST_TO_ADDR
// if Crawls ( un ) then
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 318
17886: IFFALSE 17897
// ComWalk ( un ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_INT 8
17904: PPUSH
17905: CALL_OW 336
// end ;
17909: PPOPN 3
17911: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17912: LD_EXP 25
17916: PUSH
17917: LD_EXP 69
17921: AND
17922: IFFALSE 18066
17924: GO 17926
17926: DISABLE
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_OWVAR 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 21
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: LD_INT 34
17963: PUSH
17964: LD_INT 12
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 34
17973: PUSH
17974: LD_INT 51
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 34
17983: PUSH
17984: LD_INT 32
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: ST_TO_ADDR
// if not tmp then
18007: LD_VAR 0 2
18011: NOT
18012: IFFALSE 18016
// exit ;
18014: GO 18066
// for i in tmp do
18016: LD_ADDR_VAR 0 1
18020: PUSH
18021: LD_VAR 0 2
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18064
// if GetCargo ( i , mat_artifact ) = 0 then
18029: LD_VAR 0 1
18033: PPUSH
18034: LD_INT 4
18036: PPUSH
18037: CALL_OW 289
18041: PUSH
18042: LD_INT 0
18044: EQUAL
18045: IFFALSE 18062
// SetCargo ( i , mat_siberit , 100 ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 3
18054: PPUSH
18055: LD_INT 100
18057: PPUSH
18058: CALL_OW 290
18062: GO 18026
18064: POP
18065: POP
// end ;
18066: PPOPN 2
18068: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18069: LD_EXP 25
18073: PUSH
18074: LD_EXP 70
18078: AND
18079: IFFALSE 18262
18081: GO 18083
18083: DISABLE
18084: LD_INT 0
18086: PPUSH
18087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18088: LD_ADDR_VAR 0 2
18092: PUSH
18093: LD_INT 22
18095: PUSH
18096: LD_OWVAR 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: ST_TO_ADDR
// if not tmp then
18110: LD_VAR 0 2
18114: NOT
18115: IFFALSE 18119
// exit ;
18117: GO 18262
// for i := 1 to 2 do
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: DOUBLE
18125: LD_INT 1
18127: DEC
18128: ST_TO_ADDR
18129: LD_INT 2
18131: PUSH
18132: FOR_TO
18133: IFFALSE 18260
// begin uc_side := your_side ;
18135: LD_ADDR_OWVAR 20
18139: PUSH
18140: LD_OWVAR 2
18144: ST_TO_ADDR
// uc_nation := nation_american ;
18145: LD_ADDR_OWVAR 21
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// vc_chassis := us_morphling ;
18153: LD_ADDR_OWVAR 37
18157: PUSH
18158: LD_INT 5
18160: ST_TO_ADDR
// vc_engine := engine_siberite ;
18161: LD_ADDR_OWVAR 39
18165: PUSH
18166: LD_INT 3
18168: ST_TO_ADDR
// vc_control := control_computer ;
18169: LD_ADDR_OWVAR 38
18173: PUSH
18174: LD_INT 3
18176: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18177: LD_ADDR_OWVAR 40
18181: PUSH
18182: LD_INT 10
18184: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18185: LD_VAR 0 2
18189: PUSH
18190: LD_INT 1
18192: ARRAY
18193: PPUSH
18194: CALL_OW 310
18198: NOT
18199: IFFALSE 18246
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18201: CALL_OW 45
18205: PPUSH
18206: LD_VAR 0 2
18210: PUSH
18211: LD_INT 1
18213: ARRAY
18214: PPUSH
18215: CALL_OW 250
18219: PPUSH
18220: LD_VAR 0 2
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: CALL_OW 251
18233: PPUSH
18234: LD_INT 12
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 50
18244: GO 18258
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18246: CALL_OW 45
18250: PPUSH
18251: LD_INT 1
18253: PPUSH
18254: CALL_OW 51
// end ;
18258: GO 18132
18260: POP
18261: POP
// end ;
18262: PPOPN 2
18264: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18265: LD_EXP 25
18269: PUSH
18270: LD_EXP 71
18274: AND
18275: IFFALSE 18497
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18288: LD_ADDR_VAR 0 6
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_OWVAR 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: LD_INT 23
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: ST_TO_ADDR
// if not tmp then
18342: LD_VAR 0 6
18346: NOT
18347: IFFALSE 18351
// exit ;
18349: GO 18497
// s1 := rand ( 1 , 4 ) ;
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 4
18361: PPUSH
18362: CALL_OW 12
18366: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18367: LD_ADDR_VAR 0 4
18371: PUSH
18372: LD_VAR 0 6
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 259
18390: ST_TO_ADDR
// if s1 = 1 then
18391: LD_VAR 0 2
18395: PUSH
18396: LD_INT 1
18398: EQUAL
18399: IFFALSE 18419
// s2 := rand ( 2 , 4 ) else
18401: LD_ADDR_VAR 0 3
18405: PUSH
18406: LD_INT 2
18408: PPUSH
18409: LD_INT 4
18411: PPUSH
18412: CALL_OW 12
18416: ST_TO_ADDR
18417: GO 18427
// s2 := 1 ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_INT 1
18426: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18427: LD_ADDR_VAR 0 5
18431: PUSH
18432: LD_VAR 0 6
18436: PUSH
18437: LD_INT 1
18439: ARRAY
18440: PPUSH
18441: LD_VAR 0 3
18445: PPUSH
18446: CALL_OW 259
18450: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18451: LD_VAR 0 6
18455: PUSH
18456: LD_INT 1
18458: ARRAY
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18474: LD_VAR 0 6
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_VAR 0 4
18492: PPUSH
18493: CALL_OW 237
// end ;
18497: PPOPN 6
18499: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18500: LD_EXP 25
18504: PUSH
18505: LD_EXP 72
18509: AND
18510: IFFALSE 18589
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_INT 22
18525: PUSH
18526: LD_OWVAR 2
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: ST_TO_ADDR
// if not tmp then
18554: LD_VAR 0 1
18558: NOT
18559: IFFALSE 18563
// exit ;
18561: GO 18589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18563: LD_VAR 0 1
18567: PUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_VAR 0 1
18575: PPUSH
18576: CALL_OW 12
18580: ARRAY
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 234
// end ;
18589: PPOPN 1
18591: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18592: LD_EXP 25
18596: PUSH
18597: LD_EXP 73
18601: AND
18602: IFFALSE 18714
18604: GO 18606
18606: DISABLE
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: LD_INT 22
18618: PUSH
18619: LD_OWVAR 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 30
18633: PUSH
18634: LD_INT 27
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 30
18643: PUSH
18644: LD_INT 26
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 30
18653: PUSH
18654: LD_INT 28
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if not tmp then
18676: LD_VAR 0 2
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18714
// for i in tmp do
18685: LD_ADDR_VAR 0 1
18689: PUSH
18690: LD_VAR 0 2
18694: PUSH
18695: FOR_IN
18696: IFFALSE 18712
// SetLives ( i , 1 ) ;
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 234
18710: GO 18695
18712: POP
18713: POP
// end ;
18714: PPOPN 2
18716: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18717: LD_EXP 25
18721: PUSH
18722: LD_EXP 74
18726: AND
18727: IFFALSE 19014
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
// begin i := rand ( 1 , 7 ) ;
18737: LD_ADDR_VAR 0 1
18741: PUSH
18742: LD_INT 1
18744: PPUSH
18745: LD_INT 7
18747: PPUSH
18748: CALL_OW 12
18752: ST_TO_ADDR
// case i of 1 :
18753: LD_VAR 0 1
18757: PUSH
18758: LD_INT 1
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18776
18766: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18767: LD_STRING earthquake(getX(game), 0, 32)
18769: PPUSH
18770: CALL_OW 559
18774: GO 19014
18776: LD_INT 2
18778: DOUBLE
18779: EQUAL
18780: IFTRUE 18784
18782: GO 18798
18784: POP
// begin ToLua ( displayStucuk(); ) ;
18785: LD_STRING displayStucuk();
18787: PPUSH
18788: CALL_OW 559
// ResetFog ;
18792: CALL_OW 335
// end ; 3 :
18796: GO 19014
18798: LD_INT 3
18800: DOUBLE
18801: EQUAL
18802: IFTRUE 18806
18804: GO 18910
18806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 25
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: ST_TO_ADDR
// if not tmp then
18843: LD_VAR 0 2
18847: NOT
18848: IFFALSE 18852
// exit ;
18850: GO 19014
// un := tmp [ rand ( 1 , tmp ) ] ;
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: LD_VAR 0 2
18861: PUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_VAR 0 2
18869: PPUSH
18870: CALL_OW 12
18874: ARRAY
18875: ST_TO_ADDR
// if Crawls ( un ) then
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 318
18885: IFFALSE 18896
// ComWalk ( un ) ;
18887: LD_VAR 0 3
18891: PPUSH
18892: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18896: LD_VAR 0 3
18900: PPUSH
18901: LD_INT 8
18903: PPUSH
18904: CALL_OW 336
// end ; 4 :
18908: GO 19014
18910: LD_INT 4
18912: DOUBLE
18913: EQUAL
18914: IFTRUE 18918
18916: GO 18992
18918: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18919: LD_ADDR_VAR 0 2
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 30
18938: PUSH
18939: LD_INT 29
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: ST_TO_ADDR
// if not tmp then
18955: LD_VAR 0 2
18959: NOT
18960: IFFALSE 18964
// exit ;
18962: GO 19014
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18964: LD_VAR 0 2
18968: PUSH
18969: LD_INT 1
18971: ARRAY
18972: PPUSH
18973: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18977: LD_VAR 0 2
18981: PUSH
18982: LD_INT 1
18984: ARRAY
18985: PPUSH
18986: CALL_OW 65
// end ; 5 .. 7 :
18990: GO 19014
18992: LD_INT 5
18994: DOUBLE
18995: GREATEREQUAL
18996: IFFALSE 19004
18998: LD_INT 7
19000: DOUBLE
19001: LESSEQUAL
19002: IFTRUE 19006
19004: GO 19013
19006: POP
// StreamSibBomb ; end ;
19007: CALL 15251 0 0
19011: GO 19014
19013: POP
// end ;
19014: PPOPN 3
19016: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19017: LD_EXP 25
19021: PUSH
19022: LD_EXP 75
19026: AND
19027: IFFALSE 19183
19029: GO 19031
19031: DISABLE
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
19036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_INT 81
19044: PUSH
19045: LD_OWVAR 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 21
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 21
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: ST_TO_ADDR
// if not tmp then
19091: LD_VAR 0 2
19095: NOT
19096: IFFALSE 19100
// exit ;
19098: GO 19183
// p := 0 ;
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19108: LD_INT 35
19110: PPUSH
19111: CALL_OW 67
// p := p + 1 ;
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 1
19127: PLUS
19128: ST_TO_ADDR
// for i in tmp do
19129: LD_ADDR_VAR 0 1
19133: PUSH
19134: LD_VAR 0 2
19138: PUSH
19139: FOR_IN
19140: IFFALSE 19171
// if GetLives ( i ) < 1000 then
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 256
19151: PUSH
19152: LD_INT 1000
19154: LESS
19155: IFFALSE 19169
// SetLives ( i , 1000 ) ;
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 1000
19164: PPUSH
19165: CALL_OW 234
19169: GO 19139
19171: POP
19172: POP
// until p > 20 ;
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 20
19180: GREATER
19181: IFFALSE 19108
// end ;
19183: PPOPN 3
19185: END
// every 0 0$1 trigger StreamModeActive and sTime do
19186: LD_EXP 25
19190: PUSH
19191: LD_EXP 76
19195: AND
19196: IFFALSE 19231
19198: GO 19200
19200: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19201: LD_INT 28
19203: PPUSH
19204: LD_OWVAR 2
19208: PPUSH
19209: LD_INT 2
19211: PPUSH
19212: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19216: LD_INT 30
19218: PPUSH
19219: LD_OWVAR 2
19223: PPUSH
19224: LD_INT 2
19226: PPUSH
19227: CALL_OW 322
// end ;
19231: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19232: LD_EXP 25
19236: PUSH
19237: LD_EXP 77
19241: AND
19242: IFFALSE 19363
19244: GO 19246
19246: DISABLE
19247: LD_INT 0
19249: PPUSH
19250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_OWVAR 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: LD_INT 23
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 69
19304: ST_TO_ADDR
// if not tmp then
19305: LD_VAR 0 2
19309: NOT
19310: IFFALSE 19314
// exit ;
19312: GO 19363
// for i in tmp do
19314: LD_ADDR_VAR 0 1
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: FOR_IN
19325: IFFALSE 19361
// begin if Crawls ( i ) then
19327: LD_VAR 0 1
19331: PPUSH
19332: CALL_OW 318
19336: IFFALSE 19347
// ComWalk ( i ) ;
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 138
// SetClass ( i , 2 ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_INT 2
19354: PPUSH
19355: CALL_OW 336
// end ;
19359: GO 19324
19361: POP
19362: POP
// end ;
19363: PPOPN 2
19365: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19366: LD_EXP 25
19370: PUSH
19371: LD_EXP 78
19375: AND
19376: IFFALSE 19664
19378: GO 19380
19380: DISABLE
19381: LD_INT 0
19383: PPUSH
19384: PPUSH
19385: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19386: LD_OWVAR 2
19390: PPUSH
19391: LD_INT 9
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19404: LD_INT 9
19406: PPUSH
19407: LD_OWVAR 2
19411: PPUSH
19412: CALL_OW 343
// uc_side := 9 ;
19416: LD_ADDR_OWVAR 20
19420: PUSH
19421: LD_INT 9
19423: ST_TO_ADDR
// uc_nation := 2 ;
19424: LD_ADDR_OWVAR 21
19428: PUSH
19429: LD_INT 2
19431: ST_TO_ADDR
// hc_name := Dark Warrior ;
19432: LD_ADDR_OWVAR 26
19436: PUSH
19437: LD_STRING Dark Warrior
19439: ST_TO_ADDR
// hc_gallery :=  ;
19440: LD_ADDR_OWVAR 33
19444: PUSH
19445: LD_STRING 
19447: ST_TO_ADDR
// hc_noskilllimit := true ;
19448: LD_ADDR_OWVAR 76
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19456: LD_ADDR_OWVAR 31
19460: PUSH
19461: LD_INT 30
19463: PUSH
19464: LD_INT 30
19466: PUSH
19467: LD_INT 30
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: ST_TO_ADDR
// un := CreateHuman ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: CALL_OW 44
19488: ST_TO_ADDR
// hc_noskilllimit := false ;
19489: LD_ADDR_OWVAR 76
19493: PUSH
19494: LD_INT 0
19496: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19497: LD_VAR 0 3
19501: PPUSH
19502: LD_INT 1
19504: PPUSH
19505: CALL_OW 51
// ToLua ( playRanger() ) ;
19509: LD_STRING playRanger()
19511: PPUSH
19512: CALL_OW 559
// p := 0 ;
19516: LD_ADDR_VAR 0 2
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19524: LD_INT 35
19526: PPUSH
19527: CALL_OW 67
// p := p + 1 ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_VAR 0 2
19540: PUSH
19541: LD_INT 1
19543: PLUS
19544: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19545: LD_VAR 0 3
19549: PPUSH
19550: CALL_OW 256
19554: PUSH
19555: LD_INT 1000
19557: LESS
19558: IFFALSE 19572
// SetLives ( un , 1000 ) ;
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1000
19567: PPUSH
19568: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 81
19579: PUSH
19580: LD_OWVAR 2
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 91
19591: PUSH
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: CALL_OW 69
19613: PPUSH
19614: LD_VAR 0 3
19618: PPUSH
19619: CALL_OW 74
19623: PPUSH
19624: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19628: LD_VAR 0 2
19632: PUSH
19633: LD_INT 80
19635: GREATER
19636: PUSH
19637: LD_VAR 0 3
19641: PPUSH
19642: CALL_OW 301
19646: OR
19647: IFFALSE 19524
// if un then
19649: LD_VAR 0 3
19653: IFFALSE 19664
// RemoveUnit ( un ) ;
19655: LD_VAR 0 3
19659: PPUSH
19660: CALL_OW 64
// end ;
19664: PPOPN 3
19666: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19667: LD_EXP 79
19671: IFFALSE 19787
19673: GO 19675
19675: DISABLE
19676: LD_INT 0
19678: PPUSH
19679: PPUSH
19680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: LD_INT 81
19688: PUSH
19689: LD_OWVAR 2
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 21
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 69
19716: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19717: LD_STRING playComputer()
19719: PPUSH
19720: CALL_OW 559
// if not tmp then
19724: LD_VAR 0 2
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19787
// for i in tmp do
19733: LD_ADDR_VAR 0 1
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: FOR_IN
19744: IFFALSE 19785
// for j := 1 to 4 do
19746: LD_ADDR_VAR 0 3
19750: PUSH
19751: DOUBLE
19752: LD_INT 1
19754: DEC
19755: ST_TO_ADDR
19756: LD_INT 4
19758: PUSH
19759: FOR_TO
19760: IFFALSE 19781
// SetSkill ( i , j , 10 ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 10
19774: PPUSH
19775: CALL_OW 237
19779: GO 19759
19781: POP
19782: POP
19783: GO 19743
19785: POP
19786: POP
// end ;
19787: PPOPN 3
19789: END
// every 0 0$1 trigger s30 do var i , tmp ;
19790: LD_EXP 80
19794: IFFALSE 19863
19796: GO 19798
19798: DISABLE
19799: LD_INT 0
19801: PPUSH
19802: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_INT 22
19810: PUSH
19811: LD_OWVAR 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PPUSH
19820: CALL_OW 69
19824: ST_TO_ADDR
// if not tmp then
19825: LD_VAR 0 2
19829: NOT
19830: IFFALSE 19834
// exit ;
19832: GO 19863
// for i in tmp do
19834: LD_ADDR_VAR 0 1
19838: PUSH
19839: LD_VAR 0 2
19843: PUSH
19844: FOR_IN
19845: IFFALSE 19861
// SetLives ( i , 300 ) ;
19847: LD_VAR 0 1
19851: PPUSH
19852: LD_INT 300
19854: PPUSH
19855: CALL_OW 234
19859: GO 19844
19861: POP
19862: POP
// end ;
19863: PPOPN 2
19865: END
// every 0 0$1 trigger s60 do var i , tmp ;
19866: LD_EXP 81
19870: IFFALSE 19939
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
19878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19879: LD_ADDR_VAR 0 2
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_OWVAR 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: ST_TO_ADDR
// if not tmp then
19901: LD_VAR 0 2
19905: NOT
19906: IFFALSE 19910
// exit ;
19908: GO 19939
// for i in tmp do
19910: LD_ADDR_VAR 0 1
19914: PUSH
19915: LD_VAR 0 2
19919: PUSH
19920: FOR_IN
19921: IFFALSE 19937
// SetLives ( i , 600 ) ;
19923: LD_VAR 0 1
19927: PPUSH
19928: LD_INT 600
19930: PPUSH
19931: CALL_OW 234
19935: GO 19920
19937: POP
19938: POP
// end ;
19939: PPOPN 2
19941: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19942: LD_INT 0
19944: PPUSH
// case cmd of 301 :
19945: LD_VAR 0 1
19949: PUSH
19950: LD_INT 301
19952: DOUBLE
19953: EQUAL
19954: IFTRUE 19958
19956: GO 19990
19958: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19959: LD_VAR 0 6
19963: PPUSH
19964: LD_VAR 0 7
19968: PPUSH
19969: LD_VAR 0 8
19973: PPUSH
19974: LD_VAR 0 4
19978: PPUSH
19979: LD_VAR 0 5
19983: PPUSH
19984: CALL 21199 0 5
19988: GO 20111
19990: LD_INT 302
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20035
19998: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19999: LD_VAR 0 6
20003: PPUSH
20004: LD_VAR 0 7
20008: PPUSH
20009: LD_VAR 0 8
20013: PPUSH
20014: LD_VAR 0 9
20018: PPUSH
20019: LD_VAR 0 4
20023: PPUSH
20024: LD_VAR 0 5
20028: PPUSH
20029: CALL 21290 0 6
20033: GO 20111
20035: LD_INT 303
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20080
20043: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20044: LD_VAR 0 6
20048: PPUSH
20049: LD_VAR 0 7
20053: PPUSH
20054: LD_VAR 0 8
20058: PPUSH
20059: LD_VAR 0 9
20063: PPUSH
20064: LD_VAR 0 4
20068: PPUSH
20069: LD_VAR 0 5
20073: PPUSH
20074: CALL 20116 0 6
20078: GO 20111
20080: LD_INT 304
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20110
20088: POP
// hHackTeleport ( unit , x , y ) ; end ;
20089: LD_VAR 0 2
20093: PPUSH
20094: LD_VAR 0 4
20098: PPUSH
20099: LD_VAR 0 5
20103: PPUSH
20104: CALL 21883 0 3
20108: GO 20111
20110: POP
// end ;
20111: LD_VAR 0 12
20115: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20116: LD_INT 0
20118: PPUSH
20119: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 1
20127: LESS
20128: PUSH
20129: LD_VAR 0 1
20133: PUSH
20134: LD_INT 3
20136: GREATER
20137: OR
20138: PUSH
20139: LD_VAR 0 5
20143: PPUSH
20144: LD_VAR 0 6
20148: PPUSH
20149: CALL_OW 428
20153: OR
20154: IFFALSE 20158
// exit ;
20156: GO 20886
// uc_side := your_side ;
20158: LD_ADDR_OWVAR 20
20162: PUSH
20163: LD_OWVAR 2
20167: ST_TO_ADDR
// uc_nation := nation ;
20168: LD_ADDR_OWVAR 21
20172: PUSH
20173: LD_VAR 0 1
20177: ST_TO_ADDR
// bc_level = 1 ;
20178: LD_ADDR_OWVAR 43
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// case btype of 1 :
20186: LD_VAR 0 2
20190: PUSH
20191: LD_INT 1
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_depot ; 2 :
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
20208: GO 20830
20210: LD_INT 2
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_warehouse ; 3 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
20227: GO 20830
20229: LD_INT 3
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_lab ; 4 .. 9 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 6
20245: ST_TO_ADDR
20246: GO 20830
20248: LD_INT 4
20250: DOUBLE
20251: GREATEREQUAL
20252: IFFALSE 20260
20254: LD_INT 9
20256: DOUBLE
20257: LESSEQUAL
20258: IFTRUE 20262
20260: GO 20322
20262: POP
// begin bc_type := b_lab_half ;
20263: LD_ADDR_OWVAR 42
20267: PUSH
20268: LD_INT 7
20270: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20271: LD_ADDR_OWVAR 44
20275: PUSH
20276: LD_INT 10
20278: PUSH
20279: LD_INT 11
20281: PUSH
20282: LD_INT 12
20284: PUSH
20285: LD_INT 15
20287: PUSH
20288: LD_INT 14
20290: PUSH
20291: LD_INT 13
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: LD_VAR 0 2
20306: PUSH
20307: LD_INT 3
20309: MINUS
20310: ARRAY
20311: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20312: LD_ADDR_OWVAR 45
20316: PUSH
20317: LD_INT 9
20319: ST_TO_ADDR
// end ; 10 .. 13 :
20320: GO 20830
20322: LD_INT 10
20324: DOUBLE
20325: GREATEREQUAL
20326: IFFALSE 20334
20328: LD_INT 13
20330: DOUBLE
20331: LESSEQUAL
20332: IFTRUE 20336
20334: GO 20413
20336: POP
// begin bc_type := b_lab_full ;
20337: LD_ADDR_OWVAR 42
20341: PUSH
20342: LD_INT 8
20344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20345: LD_ADDR_OWVAR 44
20349: PUSH
20350: LD_INT 10
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: LD_INT 14
20358: PUSH
20359: LD_INT 13
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: LD_VAR 0 2
20372: PUSH
20373: LD_INT 9
20375: MINUS
20376: ARRAY
20377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20378: LD_ADDR_OWVAR 45
20382: PUSH
20383: LD_INT 11
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 12
20391: PUSH
20392: LD_INT 15
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PUSH
20401: LD_VAR 0 2
20405: PUSH
20406: LD_INT 9
20408: MINUS
20409: ARRAY
20410: ST_TO_ADDR
// end ; 14 :
20411: GO 20830
20413: LD_INT 14
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20432
20421: POP
// bc_type := b_workshop ; 15 :
20422: LD_ADDR_OWVAR 42
20426: PUSH
20427: LD_INT 2
20429: ST_TO_ADDR
20430: GO 20830
20432: LD_INT 15
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20451
20440: POP
// bc_type := b_factory ; 16 :
20441: LD_ADDR_OWVAR 42
20445: PUSH
20446: LD_INT 3
20448: ST_TO_ADDR
20449: GO 20830
20451: LD_INT 16
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// bc_type := b_ext_gun ; 17 :
20460: LD_ADDR_OWVAR 42
20464: PUSH
20465: LD_INT 17
20467: ST_TO_ADDR
20468: GO 20830
20470: LD_INT 17
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20506
20478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20479: LD_ADDR_OWVAR 42
20483: PUSH
20484: LD_INT 19
20486: PUSH
20487: LD_INT 23
20489: PUSH
20490: LD_INT 19
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: PUSH
20498: LD_VAR 0 1
20502: ARRAY
20503: ST_TO_ADDR
20504: GO 20830
20506: LD_INT 18
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_ext_radar ; 19 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 20
20522: ST_TO_ADDR
20523: GO 20830
20525: LD_INT 19
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_ext_radio ; 20 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 22
20541: ST_TO_ADDR
20542: GO 20830
20544: LD_INT 20
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_ext_siberium ; 21 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 21
20560: ST_TO_ADDR
20561: GO 20830
20563: LD_INT 21
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_ext_computer ; 22 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 24
20579: ST_TO_ADDR
20580: GO 20830
20582: LD_INT 22
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_ext_track ; 23 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 16
20598: ST_TO_ADDR
20599: GO 20830
20601: LD_INT 23
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_ext_laser ; 24 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 25
20617: ST_TO_ADDR
20618: GO 20830
20620: LD_INT 24
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_control_tower ; 25 :
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 36
20636: ST_TO_ADDR
20637: GO 20830
20639: LD_INT 25
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20658
20647: POP
// bc_type := b_breastwork ; 26 :
20648: LD_ADDR_OWVAR 42
20652: PUSH
20653: LD_INT 31
20655: ST_TO_ADDR
20656: GO 20830
20658: LD_INT 26
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20677
20666: POP
// bc_type := b_bunker ; 27 :
20667: LD_ADDR_OWVAR 42
20671: PUSH
20672: LD_INT 32
20674: ST_TO_ADDR
20675: GO 20830
20677: LD_INT 27
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20696
20685: POP
// bc_type := b_turret ; 28 :
20686: LD_ADDR_OWVAR 42
20690: PUSH
20691: LD_INT 33
20693: ST_TO_ADDR
20694: GO 20830
20696: LD_INT 28
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20715
20704: POP
// bc_type := b_armoury ; 29 :
20705: LD_ADDR_OWVAR 42
20709: PUSH
20710: LD_INT 4
20712: ST_TO_ADDR
20713: GO 20830
20715: LD_INT 29
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20734
20723: POP
// bc_type := b_barracks ; 30 :
20724: LD_ADDR_OWVAR 42
20728: PUSH
20729: LD_INT 5
20731: ST_TO_ADDR
20732: GO 20830
20734: LD_INT 30
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20753
20742: POP
// bc_type := b_solar_power ; 31 :
20743: LD_ADDR_OWVAR 42
20747: PUSH
20748: LD_INT 27
20750: ST_TO_ADDR
20751: GO 20830
20753: LD_INT 31
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20772
20761: POP
// bc_type := b_oil_power ; 32 :
20762: LD_ADDR_OWVAR 42
20766: PUSH
20767: LD_INT 26
20769: ST_TO_ADDR
20770: GO 20830
20772: LD_INT 32
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 20791
20780: POP
// bc_type := b_siberite_power ; 33 :
20781: LD_ADDR_OWVAR 42
20785: PUSH
20786: LD_INT 28
20788: ST_TO_ADDR
20789: GO 20830
20791: LD_INT 33
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20810
20799: POP
// bc_type := b_oil_mine ; 34 :
20800: LD_ADDR_OWVAR 42
20804: PUSH
20805: LD_INT 29
20807: ST_TO_ADDR
20808: GO 20830
20810: LD_INT 34
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20829
20818: POP
// bc_type := b_siberite_mine ; end ;
20819: LD_ADDR_OWVAR 42
20823: PUSH
20824: LD_INT 30
20826: ST_TO_ADDR
20827: GO 20830
20829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20830: LD_ADDR_VAR 0 8
20834: PUSH
20835: LD_VAR 0 5
20839: PPUSH
20840: LD_VAR 0 6
20844: PPUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: CALL_OW 47
20854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20855: LD_OWVAR 42
20859: PUSH
20860: LD_INT 32
20862: PUSH
20863: LD_INT 33
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: IN
20870: IFFALSE 20886
// PlaceWeaponTurret ( b , weapon ) ;
20872: LD_VAR 0 8
20876: PPUSH
20877: LD_VAR 0 4
20881: PPUSH
20882: CALL_OW 431
// end ;
20886: LD_VAR 0 7
20890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20891: LD_INT 0
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20897: LD_ADDR_VAR 0 4
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_OWVAR 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 30
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 30
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 4
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21019
// for i in tmp do
20960: LD_ADDR_VAR 0 2
20964: PUSH
20965: LD_VAR 0 4
20969: PUSH
20970: FOR_IN
20971: IFFALSE 21017
// for j = 1 to 3 do
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: DOUBLE
20979: LD_INT 1
20981: DEC
20982: ST_TO_ADDR
20983: LD_INT 3
20985: PUSH
20986: FOR_TO
20987: IFFALSE 21013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20989: LD_VAR 0 2
20993: PPUSH
20994: CALL_OW 274
20998: PPUSH
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 99999
21006: PPUSH
21007: CALL_OW 277
21011: GO 20986
21013: POP
21014: POP
21015: GO 20970
21017: POP
21018: POP
// end ;
21019: LD_VAR 0 1
21023: RET
// export function hHackSetLevel10 ; var i , j ; begin
21024: LD_INT 0
21026: PPUSH
21027: PPUSH
21028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21029: LD_ADDR_VAR 0 2
21033: PUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 69
21048: PUSH
21049: FOR_IN
21050: IFFALSE 21102
// if IsSelected ( i ) then
21052: LD_VAR 0 2
21056: PPUSH
21057: CALL_OW 306
21061: IFFALSE 21100
// begin for j := 1 to 4 do
21063: LD_ADDR_VAR 0 3
21067: PUSH
21068: DOUBLE
21069: LD_INT 1
21071: DEC
21072: ST_TO_ADDR
21073: LD_INT 4
21075: PUSH
21076: FOR_TO
21077: IFFALSE 21098
// SetSkill ( i , j , 10 ) ;
21079: LD_VAR 0 2
21083: PPUSH
21084: LD_VAR 0 3
21088: PPUSH
21089: LD_INT 10
21091: PPUSH
21092: CALL_OW 237
21096: GO 21076
21098: POP
21099: POP
// end ;
21100: GO 21049
21102: POP
21103: POP
// end ;
21104: LD_VAR 0 1
21108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21109: LD_INT 0
21111: PPUSH
21112: PPUSH
21113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_OWVAR 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: PUSH
21150: FOR_IN
21151: IFFALSE 21192
// begin for j := 1 to 4 do
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_INT 4
21165: PUSH
21166: FOR_TO
21167: IFFALSE 21188
// SetSkill ( i , j , 10 ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: LD_INT 10
21181: PPUSH
21182: CALL_OW 237
21186: GO 21166
21188: POP
21189: POP
// end ;
21190: GO 21150
21192: POP
21193: POP
// end ;
21194: LD_VAR 0 1
21198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21199: LD_INT 0
21201: PPUSH
// uc_side := your_side ;
21202: LD_ADDR_OWVAR 20
21206: PUSH
21207: LD_OWVAR 2
21211: ST_TO_ADDR
// uc_nation := nation ;
21212: LD_ADDR_OWVAR 21
21216: PUSH
21217: LD_VAR 0 1
21221: ST_TO_ADDR
// InitHc ;
21222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21226: LD_INT 0
21228: PPUSH
21229: LD_VAR 0 2
21233: PPUSH
21234: LD_VAR 0 3
21238: PPUSH
21239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: CALL_OW 428
21257: PUSH
21258: LD_INT 0
21260: EQUAL
21261: IFFALSE 21285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21263: CALL_OW 44
21267: PPUSH
21268: LD_VAR 0 4
21272: PPUSH
21273: LD_VAR 0 5
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 48
// end ;
21285: LD_VAR 0 6
21289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
// uc_side := your_side ;
21294: LD_ADDR_OWVAR 20
21298: PUSH
21299: LD_OWVAR 2
21303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21304: LD_VAR 0 1
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: LD_INT 3
21317: PUSH
21318: LD_INT 4
21320: PUSH
21321: LD_INT 5
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: IN
21331: IFFALSE 21343
// uc_nation := nation_american else
21333: LD_ADDR_OWVAR 21
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
21341: GO 21386
// if chassis in [ 11 , 12 , 13 , 14 ] then
21343: LD_VAR 0 1
21347: PUSH
21348: LD_INT 11
21350: PUSH
21351: LD_INT 12
21353: PUSH
21354: LD_INT 13
21356: PUSH
21357: LD_INT 14
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: IN
21366: IFFALSE 21378
// uc_nation := nation_arabian else
21368: LD_ADDR_OWVAR 21
21372: PUSH
21373: LD_INT 2
21375: ST_TO_ADDR
21376: GO 21386
// uc_nation := nation_russian ;
21378: LD_ADDR_OWVAR 21
21382: PUSH
21383: LD_INT 3
21385: ST_TO_ADDR
// vc_chassis := chassis ;
21386: LD_ADDR_OWVAR 37
21390: PUSH
21391: LD_VAR 0 1
21395: ST_TO_ADDR
// vc_engine := engine ;
21396: LD_ADDR_OWVAR 39
21400: PUSH
21401: LD_VAR 0 2
21405: ST_TO_ADDR
// vc_control := control ;
21406: LD_ADDR_OWVAR 38
21410: PUSH
21411: LD_VAR 0 3
21415: ST_TO_ADDR
// vc_weapon := weapon ;
21416: LD_ADDR_OWVAR 40
21420: PUSH
21421: LD_VAR 0 4
21425: ST_TO_ADDR
// un := CreateVehicle ;
21426: LD_ADDR_VAR 0 8
21430: PUSH
21431: CALL_OW 45
21435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21436: LD_VAR 0 8
21440: PPUSH
21441: LD_INT 0
21443: PPUSH
21444: LD_INT 5
21446: PPUSH
21447: CALL_OW 12
21451: PPUSH
21452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21456: LD_VAR 0 8
21460: PPUSH
21461: LD_VAR 0 5
21465: PPUSH
21466: LD_VAR 0 6
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 48
// end ;
21478: LD_VAR 0 7
21482: RET
// export hInvincible ; every 1 do
21483: GO 21485
21485: DISABLE
// hInvincible := [ ] ;
21486: LD_ADDR_EXP 82
21490: PUSH
21491: EMPTY
21492: ST_TO_ADDR
21493: END
// every 10 do var i ;
21494: GO 21496
21496: DISABLE
21497: LD_INT 0
21499: PPUSH
// begin enable ;
21500: ENABLE
// if not hInvincible then
21501: LD_EXP 82
21505: NOT
21506: IFFALSE 21510
// exit ;
21508: GO 21554
// for i in hInvincible do
21510: LD_ADDR_VAR 0 1
21514: PUSH
21515: LD_EXP 82
21519: PUSH
21520: FOR_IN
21521: IFFALSE 21552
// if GetLives ( i ) < 1000 then
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 256
21532: PUSH
21533: LD_INT 1000
21535: LESS
21536: IFFALSE 21550
// SetLives ( i , 1000 ) ;
21538: LD_VAR 0 1
21542: PPUSH
21543: LD_INT 1000
21545: PPUSH
21546: CALL_OW 234
21550: GO 21520
21552: POP
21553: POP
// end ;
21554: PPOPN 1
21556: END
// export function hHackInvincible ; var i ; begin
21557: LD_INT 0
21559: PPUSH
21560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 21
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: PPUSH
21594: CALL_OW 69
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21661
// if IsSelected ( i ) then
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 306
21611: IFFALSE 21659
// begin if i in hInvincible then
21613: LD_VAR 0 2
21617: PUSH
21618: LD_EXP 82
21622: IN
21623: IFFALSE 21643
// hInvincible := hInvincible diff i else
21625: LD_ADDR_EXP 82
21629: PUSH
21630: LD_EXP 82
21634: PUSH
21635: LD_VAR 0 2
21639: DIFF
21640: ST_TO_ADDR
21641: GO 21659
// hInvincible := hInvincible union i ;
21643: LD_ADDR_EXP 82
21647: PUSH
21648: LD_EXP 82
21652: PUSH
21653: LD_VAR 0 2
21657: UNION
21658: ST_TO_ADDR
// end ;
21659: GO 21599
21661: POP
21662: POP
// end ;
21663: LD_VAR 0 1
21667: RET
// export function hHackInvisible ; var i , j ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21673: LD_ADDR_VAR 0 2
21677: PUSH
21678: LD_INT 21
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PPUSH
21688: CALL_OW 69
21692: PUSH
21693: FOR_IN
21694: IFFALSE 21718
// if IsSelected ( i ) then
21696: LD_VAR 0 2
21700: PPUSH
21701: CALL_OW 306
21705: IFFALSE 21716
// ComForceInvisible ( i ) ;
21707: LD_VAR 0 2
21711: PPUSH
21712: CALL_OW 496
21716: GO 21693
21718: POP
21719: POP
// end ;
21720: LD_VAR 0 1
21724: RET
// export function hHackChangeYourSide ; begin
21725: LD_INT 0
21727: PPUSH
// if your_side = 8 then
21728: LD_OWVAR 2
21732: PUSH
21733: LD_INT 8
21735: EQUAL
21736: IFFALSE 21748
// your_side := 0 else
21738: LD_ADDR_OWVAR 2
21742: PUSH
21743: LD_INT 0
21745: ST_TO_ADDR
21746: GO 21762
// your_side := your_side + 1 ;
21748: LD_ADDR_OWVAR 2
21752: PUSH
21753: LD_OWVAR 2
21757: PUSH
21758: LD_INT 1
21760: PLUS
21761: ST_TO_ADDR
// end ;
21762: LD_VAR 0 1
21766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
21771: PPUSH
// for i in all_units do
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: LD_OWVAR 3
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21861
// if IsSelected ( i ) then
21785: LD_VAR 0 2
21789: PPUSH
21790: CALL_OW 306
21794: IFFALSE 21859
// begin j := GetSide ( i ) ;
21796: LD_ADDR_VAR 0 3
21800: PUSH
21801: LD_VAR 0 2
21805: PPUSH
21806: CALL_OW 255
21810: ST_TO_ADDR
// if j = 8 then
21811: LD_VAR 0 3
21815: PUSH
21816: LD_INT 8
21818: EQUAL
21819: IFFALSE 21831
// j := 0 else
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
21829: GO 21845
// j := j + 1 ;
21831: LD_ADDR_VAR 0 3
21835: PUSH
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 1
21843: PLUS
21844: ST_TO_ADDR
// SetSide ( i , j ) ;
21845: LD_VAR 0 2
21849: PPUSH
21850: LD_VAR 0 3
21854: PPUSH
21855: CALL_OW 235
// end ;
21859: GO 21782
21861: POP
21862: POP
// end ;
21863: LD_VAR 0 1
21867: RET
// export function hHackFog ; begin
21868: LD_INT 0
21870: PPUSH
// FogOff ( true ) ;
21871: LD_INT 1
21873: PPUSH
21874: CALL_OW 344
// end ;
21878: LD_VAR 0 1
21882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21883: LD_INT 0
21885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21886: LD_VAR 0 1
21890: PPUSH
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 3
21900: PPUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_INT 1
21906: PPUSH
21907: CALL_OW 483
// CenterOnXY ( x , y ) ;
21911: LD_VAR 0 2
21915: PPUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL_OW 84
// end ;
21925: LD_VAR 0 4
21929: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21930: LD_INT 0
21932: PPUSH
21933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21934: LD_VAR 0 1
21938: NOT
21939: PUSH
21940: LD_VAR 0 2
21944: PPUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: CALL_OW 488
21954: NOT
21955: OR
21956: PUSH
21957: LD_VAR 0 1
21961: PPUSH
21962: CALL_OW 266
21966: PUSH
21967: LD_INT 3
21969: NONEQUAL
21970: PUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 247
21980: PUSH
21981: LD_INT 1
21983: EQUAL
21984: NOT
21985: AND
21986: OR
21987: IFFALSE 21991
// exit ;
21989: GO 22140
// if GetType ( factory ) = unit_human then
21991: LD_VAR 0 1
21995: PPUSH
21996: CALL_OW 247
22000: PUSH
22001: LD_INT 1
22003: EQUAL
22004: IFFALSE 22021
// factory := IsInUnit ( factory ) ;
22006: LD_ADDR_VAR 0 1
22010: PUSH
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 310
22020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22021: LD_VAR 0 1
22025: PPUSH
22026: CALL_OW 266
22030: PUSH
22031: LD_INT 3
22033: NONEQUAL
22034: IFFALSE 22038
// exit ;
22036: GO 22140
// if HexInfo ( x , y ) = factory then
22038: LD_VAR 0 2
22042: PPUSH
22043: LD_VAR 0 3
22047: PPUSH
22048: CALL_OW 428
22052: PUSH
22053: LD_VAR 0 1
22057: EQUAL
22058: IFFALSE 22085
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22060: LD_ADDR_EXP 83
22064: PUSH
22065: LD_EXP 83
22069: PPUSH
22070: LD_VAR 0 1
22074: PPUSH
22075: LD_INT 0
22077: PPUSH
22078: CALL_OW 1
22082: ST_TO_ADDR
22083: GO 22136
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22085: LD_ADDR_EXP 83
22089: PUSH
22090: LD_EXP 83
22094: PPUSH
22095: LD_VAR 0 1
22099: PPUSH
22100: LD_VAR 0 1
22104: PPUSH
22105: CALL_OW 255
22109: PUSH
22110: LD_VAR 0 1
22114: PUSH
22115: LD_VAR 0 2
22119: PUSH
22120: LD_VAR 0 3
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: LIST
22129: LIST
22130: PPUSH
22131: CALL_OW 1
22135: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22136: CALL 22145 0 0
// end ;
22140: LD_VAR 0 4
22144: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22145: LD_INT 0
22147: PPUSH
22148: PPUSH
22149: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22150: LD_STRING resetFactoryWaypoint();
22152: PPUSH
22153: CALL_OW 559
// if factoryWaypoints then
22157: LD_EXP 83
22161: IFFALSE 22287
// begin list := PrepareArray ( factoryWaypoints ) ;
22163: LD_ADDR_VAR 0 3
22167: PUSH
22168: LD_EXP 83
22172: PPUSH
22173: CALL 69584 0 1
22177: ST_TO_ADDR
// for i := 1 to list do
22178: LD_ADDR_VAR 0 2
22182: PUSH
22183: DOUBLE
22184: LD_INT 1
22186: DEC
22187: ST_TO_ADDR
22188: LD_VAR 0 3
22192: PUSH
22193: FOR_TO
22194: IFFALSE 22285
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22196: LD_STRING setFactoryWaypointXY(
22198: PUSH
22199: LD_VAR 0 3
22203: PUSH
22204: LD_VAR 0 2
22208: ARRAY
22209: PUSH
22210: LD_INT 1
22212: ARRAY
22213: STR
22214: PUSH
22215: LD_STRING ,
22217: STR
22218: PUSH
22219: LD_VAR 0 3
22223: PUSH
22224: LD_VAR 0 2
22228: ARRAY
22229: PUSH
22230: LD_INT 2
22232: ARRAY
22233: STR
22234: PUSH
22235: LD_STRING ,
22237: STR
22238: PUSH
22239: LD_VAR 0 3
22243: PUSH
22244: LD_VAR 0 2
22248: ARRAY
22249: PUSH
22250: LD_INT 3
22252: ARRAY
22253: STR
22254: PUSH
22255: LD_STRING ,
22257: STR
22258: PUSH
22259: LD_VAR 0 3
22263: PUSH
22264: LD_VAR 0 2
22268: ARRAY
22269: PUSH
22270: LD_INT 4
22272: ARRAY
22273: STR
22274: PUSH
22275: LD_STRING )
22277: STR
22278: PPUSH
22279: CALL_OW 559
22283: GO 22193
22285: POP
22286: POP
// end ; end ;
22287: LD_VAR 0 1
22291: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22292: LD_INT 0
22294: PPUSH
// if HexInfo ( x , y ) = warehouse then
22295: LD_VAR 0 2
22299: PPUSH
22300: LD_VAR 0 3
22304: PPUSH
22305: CALL_OW 428
22309: PUSH
22310: LD_VAR 0 1
22314: EQUAL
22315: IFFALSE 22342
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22317: LD_ADDR_EXP 84
22321: PUSH
22322: LD_EXP 84
22326: PPUSH
22327: LD_VAR 0 1
22331: PPUSH
22332: LD_INT 0
22334: PPUSH
22335: CALL_OW 1
22339: ST_TO_ADDR
22340: GO 22393
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22342: LD_ADDR_EXP 84
22346: PUSH
22347: LD_EXP 84
22351: PPUSH
22352: LD_VAR 0 1
22356: PPUSH
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 255
22366: PUSH
22367: LD_VAR 0 1
22371: PUSH
22372: LD_VAR 0 2
22376: PUSH
22377: LD_VAR 0 3
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PPUSH
22388: CALL_OW 1
22392: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22393: CALL 22402 0 0
// end ;
22397: LD_VAR 0 4
22401: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22402: LD_INT 0
22404: PPUSH
22405: PPUSH
22406: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22407: LD_STRING resetWarehouseGatheringPoints();
22409: PPUSH
22410: CALL_OW 559
// if warehouseGatheringPoints then
22414: LD_EXP 84
22418: IFFALSE 22544
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22420: LD_ADDR_VAR 0 3
22424: PUSH
22425: LD_EXP 84
22429: PPUSH
22430: CALL 69584 0 1
22434: ST_TO_ADDR
// for i := 1 to list do
22435: LD_ADDR_VAR 0 2
22439: PUSH
22440: DOUBLE
22441: LD_INT 1
22443: DEC
22444: ST_TO_ADDR
22445: LD_VAR 0 3
22449: PUSH
22450: FOR_TO
22451: IFFALSE 22542
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22453: LD_STRING setWarehouseGatheringPointXY(
22455: PUSH
22456: LD_VAR 0 3
22460: PUSH
22461: LD_VAR 0 2
22465: ARRAY
22466: PUSH
22467: LD_INT 1
22469: ARRAY
22470: STR
22471: PUSH
22472: LD_STRING ,
22474: STR
22475: PUSH
22476: LD_VAR 0 3
22480: PUSH
22481: LD_VAR 0 2
22485: ARRAY
22486: PUSH
22487: LD_INT 2
22489: ARRAY
22490: STR
22491: PUSH
22492: LD_STRING ,
22494: STR
22495: PUSH
22496: LD_VAR 0 3
22500: PUSH
22501: LD_VAR 0 2
22505: ARRAY
22506: PUSH
22507: LD_INT 3
22509: ARRAY
22510: STR
22511: PUSH
22512: LD_STRING ,
22514: STR
22515: PUSH
22516: LD_VAR 0 3
22520: PUSH
22521: LD_VAR 0 2
22525: ARRAY
22526: PUSH
22527: LD_INT 4
22529: ARRAY
22530: STR
22531: PUSH
22532: LD_STRING )
22534: STR
22535: PPUSH
22536: CALL_OW 559
22540: GO 22450
22542: POP
22543: POP
// end ; end ;
22544: LD_VAR 0 1
22548: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22549: LD_EXP 84
22553: IFFALSE 23238
22555: GO 22557
22557: DISABLE
22558: LD_INT 0
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
22564: PPUSH
22565: PPUSH
22566: PPUSH
22567: PPUSH
22568: PPUSH
// begin enable ;
22569: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22570: LD_ADDR_VAR 0 3
22574: PUSH
22575: LD_EXP 84
22579: PPUSH
22580: CALL 69584 0 1
22584: ST_TO_ADDR
// if not list then
22585: LD_VAR 0 3
22589: NOT
22590: IFFALSE 22594
// exit ;
22592: GO 23238
// for i := 1 to list do
22594: LD_ADDR_VAR 0 1
22598: PUSH
22599: DOUBLE
22600: LD_INT 1
22602: DEC
22603: ST_TO_ADDR
22604: LD_VAR 0 3
22608: PUSH
22609: FOR_TO
22610: IFFALSE 23236
// begin depot := list [ i ] [ 2 ] ;
22612: LD_ADDR_VAR 0 8
22616: PUSH
22617: LD_VAR 0 3
22621: PUSH
22622: LD_VAR 0 1
22626: ARRAY
22627: PUSH
22628: LD_INT 2
22630: ARRAY
22631: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22632: LD_ADDR_VAR 0 5
22636: PUSH
22637: LD_VAR 0 3
22641: PUSH
22642: LD_VAR 0 1
22646: ARRAY
22647: PUSH
22648: LD_INT 1
22650: ARRAY
22651: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22652: LD_VAR 0 8
22656: PPUSH
22657: CALL_OW 301
22661: PUSH
22662: LD_VAR 0 5
22666: PUSH
22667: LD_VAR 0 8
22671: PPUSH
22672: CALL_OW 255
22676: NONEQUAL
22677: OR
22678: IFFALSE 22707
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22680: LD_ADDR_EXP 84
22684: PUSH
22685: LD_EXP 84
22689: PPUSH
22690: LD_VAR 0 8
22694: PPUSH
22695: LD_INT 0
22697: PPUSH
22698: CALL_OW 1
22702: ST_TO_ADDR
// exit ;
22703: POP
22704: POP
22705: GO 23238
// end ; x := list [ i ] [ 3 ] ;
22707: LD_ADDR_VAR 0 6
22711: PUSH
22712: LD_VAR 0 3
22716: PUSH
22717: LD_VAR 0 1
22721: ARRAY
22722: PUSH
22723: LD_INT 3
22725: ARRAY
22726: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22727: LD_ADDR_VAR 0 7
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_VAR 0 1
22741: ARRAY
22742: PUSH
22743: LD_INT 4
22745: ARRAY
22746: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22747: LD_ADDR_VAR 0 9
22751: PUSH
22752: LD_VAR 0 6
22756: PPUSH
22757: LD_VAR 0 7
22761: PPUSH
22762: LD_INT 16
22764: PPUSH
22765: CALL 68172 0 3
22769: ST_TO_ADDR
// if not cratesNearbyPoint then
22770: LD_VAR 0 9
22774: NOT
22775: IFFALSE 22781
// exit ;
22777: POP
22778: POP
22779: GO 23238
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22781: LD_ADDR_VAR 0 4
22785: PUSH
22786: LD_INT 22
22788: PUSH
22789: LD_VAR 0 5
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: LD_INT 60
22803: PUSH
22804: EMPTY
22805: LIST
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 91
22813: PUSH
22814: LD_VAR 0 8
22818: PUSH
22819: LD_INT 6
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 2
22829: PUSH
22830: LD_INT 25
22832: PUSH
22833: LD_INT 2
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 25
22842: PUSH
22843: LD_INT 16
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: PUSH
22866: LD_VAR 0 8
22870: PPUSH
22871: CALL_OW 313
22875: PPUSH
22876: LD_INT 3
22878: PUSH
22879: LD_INT 60
22881: PUSH
22882: EMPTY
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: LD_INT 2
22891: PUSH
22892: LD_INT 25
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 25
22904: PUSH
22905: LD_INT 16
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: EMPTY
22913: LIST
22914: LIST
22915: LIST
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PPUSH
22921: CALL_OW 72
22925: UNION
22926: ST_TO_ADDR
// if tmp then
22927: LD_VAR 0 4
22931: IFFALSE 23011
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22933: LD_ADDR_VAR 0 4
22937: PUSH
22938: LD_VAR 0 4
22942: PPUSH
22943: LD_INT 3
22945: PPUSH
22946: CALL 66141 0 2
22950: ST_TO_ADDR
// for j in tmp do
22951: LD_ADDR_VAR 0 2
22955: PUSH
22956: LD_VAR 0 4
22960: PUSH
22961: FOR_IN
22962: IFFALSE 23005
// begin if IsInUnit ( j ) then
22964: LD_VAR 0 2
22968: PPUSH
22969: CALL_OW 310
22973: IFFALSE 22984
// ComExit ( j ) ;
22975: LD_VAR 0 2
22979: PPUSH
22980: CALL 66224 0 1
// AddComCollect ( j , x , y ) ;
22984: LD_VAR 0 2
22988: PPUSH
22989: LD_VAR 0 6
22993: PPUSH
22994: LD_VAR 0 7
22998: PPUSH
22999: CALL_OW 177
// end ;
23003: GO 22961
23005: POP
23006: POP
// exit ;
23007: POP
23008: POP
23009: GO 23238
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23011: LD_ADDR_VAR 0 4
23015: PUSH
23016: LD_INT 22
23018: PUSH
23019: LD_VAR 0 5
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: LD_INT 91
23030: PUSH
23031: LD_VAR 0 8
23035: PUSH
23036: LD_INT 8
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 2
23046: PUSH
23047: LD_INT 34
23049: PUSH
23050: LD_INT 12
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 34
23059: PUSH
23060: LD_INT 51
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: LD_INT 34
23069: PUSH
23070: LD_INT 32
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PUSH
23077: LD_INT 34
23079: PUSH
23080: LD_INT 89
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: EMPTY
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: LIST
23093: PUSH
23094: EMPTY
23095: LIST
23096: LIST
23097: LIST
23098: PPUSH
23099: CALL_OW 69
23103: ST_TO_ADDR
// if tmp then
23104: LD_VAR 0 4
23108: IFFALSE 23234
// begin for j in tmp do
23110: LD_ADDR_VAR 0 2
23114: PUSH
23115: LD_VAR 0 4
23119: PUSH
23120: FOR_IN
23121: IFFALSE 23232
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23123: LD_VAR 0 2
23127: PPUSH
23128: CALL_OW 262
23132: PUSH
23133: LD_INT 3
23135: EQUAL
23136: PUSH
23137: LD_VAR 0 2
23141: PPUSH
23142: CALL_OW 261
23146: PUSH
23147: LD_INT 20
23149: GREATER
23150: OR
23151: PUSH
23152: LD_VAR 0 2
23156: PPUSH
23157: CALL_OW 314
23161: NOT
23162: AND
23163: PUSH
23164: LD_VAR 0 2
23168: PPUSH
23169: CALL_OW 263
23173: PUSH
23174: LD_INT 1
23176: NONEQUAL
23177: PUSH
23178: LD_VAR 0 2
23182: PPUSH
23183: CALL_OW 311
23187: OR
23188: AND
23189: IFFALSE 23230
// begin ComCollect ( j , x , y ) ;
23191: LD_VAR 0 2
23195: PPUSH
23196: LD_VAR 0 6
23200: PPUSH
23201: LD_VAR 0 7
23205: PPUSH
23206: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23210: LD_VAR 0 2
23214: PPUSH
23215: LD_VAR 0 8
23219: PPUSH
23220: CALL_OW 172
// exit ;
23224: POP
23225: POP
23226: POP
23227: POP
23228: GO 23238
// end ;
23230: GO 23120
23232: POP
23233: POP
// end ; end ;
23234: GO 22609
23236: POP
23237: POP
// end ; end_of_file
23238: PPOPN 9
23240: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23241: LD_INT 0
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL_OW 264
23256: PUSH
23257: LD_INT 91
23259: EQUAL
23260: IFFALSE 23332
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23262: LD_INT 68
23264: PPUSH
23265: LD_VAR 0 1
23269: PPUSH
23270: CALL_OW 255
23274: PPUSH
23275: CALL_OW 321
23279: PUSH
23280: LD_INT 2
23282: EQUAL
23283: IFFALSE 23295
// eff := 70 else
23285: LD_ADDR_VAR 0 4
23289: PUSH
23290: LD_INT 70
23292: ST_TO_ADDR
23293: GO 23303
// eff := 30 ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_INT 30
23302: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 250
23312: PPUSH
23313: LD_VAR 0 1
23317: PPUSH
23318: CALL_OW 251
23322: PPUSH
23323: LD_VAR 0 4
23327: PPUSH
23328: CALL_OW 495
// end ; end ;
23332: LD_VAR 0 2
23336: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23337: LD_INT 0
23339: PPUSH
// end ;
23340: LD_VAR 0 4
23344: RET
// export function SOS_Command ( cmd ) ; begin
23345: LD_INT 0
23347: PPUSH
// end ;
23348: LD_VAR 0 2
23352: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23353: LD_INT 0
23355: PPUSH
// end ;
23356: LD_VAR 0 6
23360: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23361: LD_INT 0
23363: PPUSH
23364: PPUSH
// if not vehicle or not factory then
23365: LD_VAR 0 1
23369: NOT
23370: PUSH
23371: LD_VAR 0 2
23375: NOT
23376: OR
23377: IFFALSE 23381
// exit ;
23379: GO 23612
// if factoryWaypoints >= factory then
23381: LD_EXP 83
23385: PUSH
23386: LD_VAR 0 2
23390: GREATEREQUAL
23391: IFFALSE 23612
// if factoryWaypoints [ factory ] then
23393: LD_EXP 83
23397: PUSH
23398: LD_VAR 0 2
23402: ARRAY
23403: IFFALSE 23612
// begin if GetControl ( vehicle ) = control_manual then
23405: LD_VAR 0 1
23409: PPUSH
23410: CALL_OW 263
23414: PUSH
23415: LD_INT 1
23417: EQUAL
23418: IFFALSE 23499
// begin driver := IsDrivenBy ( vehicle ) ;
23420: LD_ADDR_VAR 0 4
23424: PUSH
23425: LD_VAR 0 1
23429: PPUSH
23430: CALL_OW 311
23434: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23435: LD_VAR 0 4
23439: PPUSH
23440: LD_EXP 83
23444: PUSH
23445: LD_VAR 0 2
23449: ARRAY
23450: PUSH
23451: LD_INT 3
23453: ARRAY
23454: PPUSH
23455: LD_EXP 83
23459: PUSH
23460: LD_VAR 0 2
23464: ARRAY
23465: PUSH
23466: LD_INT 4
23468: ARRAY
23469: PPUSH
23470: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23474: LD_VAR 0 4
23478: PPUSH
23479: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23483: LD_VAR 0 4
23487: PPUSH
23488: LD_VAR 0 2
23492: PPUSH
23493: CALL_OW 180
// end else
23497: GO 23612
// if GetControl ( vehicle ) = control_remote then
23499: LD_VAR 0 1
23503: PPUSH
23504: CALL_OW 263
23508: PUSH
23509: LD_INT 2
23511: EQUAL
23512: IFFALSE 23573
// begin wait ( 0 0$2 ) ;
23514: LD_INT 70
23516: PPUSH
23517: CALL_OW 67
// if Connect ( vehicle ) then
23521: LD_VAR 0 1
23525: PPUSH
23526: CALL 36443 0 1
23530: IFFALSE 23571
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23532: LD_VAR 0 1
23536: PPUSH
23537: LD_EXP 83
23541: PUSH
23542: LD_VAR 0 2
23546: ARRAY
23547: PUSH
23548: LD_INT 3
23550: ARRAY
23551: PPUSH
23552: LD_EXP 83
23556: PUSH
23557: LD_VAR 0 2
23561: ARRAY
23562: PUSH
23563: LD_INT 4
23565: ARRAY
23566: PPUSH
23567: CALL_OW 171
// end else
23571: GO 23612
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23573: LD_VAR 0 1
23577: PPUSH
23578: LD_EXP 83
23582: PUSH
23583: LD_VAR 0 2
23587: ARRAY
23588: PUSH
23589: LD_INT 3
23591: ARRAY
23592: PPUSH
23593: LD_EXP 83
23597: PUSH
23598: LD_VAR 0 2
23602: ARRAY
23603: PUSH
23604: LD_INT 4
23606: ARRAY
23607: PPUSH
23608: CALL_OW 171
// end ; end ;
23612: LD_VAR 0 3
23616: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23617: LD_INT 0
23619: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23620: LD_VAR 0 1
23624: PUSH
23625: LD_INT 250
23627: EQUAL
23628: PUSH
23629: LD_VAR 0 2
23633: PPUSH
23634: CALL_OW 264
23638: PUSH
23639: LD_INT 81
23641: EQUAL
23642: AND
23643: IFFALSE 23664
// MinerPlaceMine ( unit , x , y ) ;
23645: LD_VAR 0 2
23649: PPUSH
23650: LD_VAR 0 4
23654: PPUSH
23655: LD_VAR 0 5
23659: PPUSH
23660: CALL 26654 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23664: LD_VAR 0 1
23668: PUSH
23669: LD_INT 251
23671: EQUAL
23672: PUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: CALL_OW 264
23682: PUSH
23683: LD_INT 81
23685: EQUAL
23686: AND
23687: IFFALSE 23708
// MinerDetonateMine ( unit , x , y ) ;
23689: LD_VAR 0 2
23693: PPUSH
23694: LD_VAR 0 4
23698: PPUSH
23699: LD_VAR 0 5
23703: PPUSH
23704: CALL 26929 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23708: LD_VAR 0 1
23712: PUSH
23713: LD_INT 252
23715: EQUAL
23716: PUSH
23717: LD_VAR 0 2
23721: PPUSH
23722: CALL_OW 264
23726: PUSH
23727: LD_INT 81
23729: EQUAL
23730: AND
23731: IFFALSE 23752
// MinerCreateMinefield ( unit , x , y ) ;
23733: LD_VAR 0 2
23737: PPUSH
23738: LD_VAR 0 4
23742: PPUSH
23743: LD_VAR 0 5
23747: PPUSH
23748: CALL 27346 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23752: LD_VAR 0 1
23756: PUSH
23757: LD_INT 253
23759: EQUAL
23760: PUSH
23761: LD_VAR 0 2
23765: PPUSH
23766: CALL_OW 257
23770: PUSH
23771: LD_INT 5
23773: EQUAL
23774: AND
23775: IFFALSE 23796
// ComBinocular ( unit , x , y ) ;
23777: LD_VAR 0 2
23781: PPUSH
23782: LD_VAR 0 4
23786: PPUSH
23787: LD_VAR 0 5
23791: PPUSH
23792: CALL 27715 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23796: LD_VAR 0 1
23800: PUSH
23801: LD_INT 254
23803: EQUAL
23804: PUSH
23805: LD_VAR 0 2
23809: PPUSH
23810: CALL_OW 264
23814: PUSH
23815: LD_INT 99
23817: EQUAL
23818: AND
23819: PUSH
23820: LD_VAR 0 3
23824: PPUSH
23825: CALL_OW 263
23829: PUSH
23830: LD_INT 3
23832: EQUAL
23833: AND
23834: IFFALSE 23850
// HackDestroyVehicle ( unit , selectedUnit ) ;
23836: LD_VAR 0 2
23840: PPUSH
23841: LD_VAR 0 3
23845: PPUSH
23846: CALL 26018 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23850: LD_VAR 0 1
23854: PUSH
23855: LD_INT 255
23857: EQUAL
23858: PUSH
23859: LD_VAR 0 2
23863: PPUSH
23864: CALL_OW 264
23868: PUSH
23869: LD_INT 14
23871: PUSH
23872: LD_INT 53
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: IN
23879: AND
23880: PUSH
23881: LD_VAR 0 4
23885: PPUSH
23886: LD_VAR 0 5
23890: PPUSH
23891: CALL_OW 488
23895: AND
23896: IFFALSE 23920
// CutTreeXYR ( unit , x , y , 12 ) ;
23898: LD_VAR 0 2
23902: PPUSH
23903: LD_VAR 0 4
23907: PPUSH
23908: LD_VAR 0 5
23912: PPUSH
23913: LD_INT 12
23915: PPUSH
23916: CALL 24015 0 4
// if cmd = 256 then
23920: LD_VAR 0 1
23924: PUSH
23925: LD_INT 256
23927: EQUAL
23928: IFFALSE 23949
// SetFactoryWaypoint ( unit , x , y ) ;
23930: LD_VAR 0 2
23934: PPUSH
23935: LD_VAR 0 4
23939: PPUSH
23940: LD_VAR 0 5
23944: PPUSH
23945: CALL 21930 0 3
// if cmd = 257 then
23949: LD_VAR 0 1
23953: PUSH
23954: LD_INT 257
23956: EQUAL
23957: IFFALSE 23978
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23959: LD_VAR 0 2
23963: PPUSH
23964: LD_VAR 0 4
23968: PPUSH
23969: LD_VAR 0 5
23973: PPUSH
23974: CALL 22292 0 3
// if cmd = 258 then
23978: LD_VAR 0 1
23982: PUSH
23983: LD_INT 258
23985: EQUAL
23986: IFFALSE 24010
// BurnTreeXYR ( unit , x , y , 8 ) ;
23988: LD_VAR 0 2
23992: PPUSH
23993: LD_VAR 0 4
23997: PPUSH
23998: LD_VAR 0 5
24002: PPUSH
24003: LD_INT 8
24005: PPUSH
24006: CALL 24409 0 4
// end ;
24010: LD_VAR 0 6
24014: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24015: LD_INT 0
24017: PPUSH
24018: PPUSH
24019: PPUSH
24020: PPUSH
24021: PPUSH
24022: PPUSH
24023: PPUSH
24024: PPUSH
24025: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24026: LD_VAR 0 1
24030: PPUSH
24031: CALL_OW 302
24035: NOT
24036: PUSH
24037: LD_VAR 0 2
24041: PPUSH
24042: LD_VAR 0 3
24046: PPUSH
24047: CALL_OW 488
24051: NOT
24052: OR
24053: PUSH
24054: LD_VAR 0 4
24058: NOT
24059: OR
24060: IFFALSE 24064
// exit ;
24062: GO 24404
// list := [ ] ;
24064: LD_ADDR_VAR 0 13
24068: PUSH
24069: EMPTY
24070: ST_TO_ADDR
// if x - r < 0 then
24071: LD_VAR 0 2
24075: PUSH
24076: LD_VAR 0 4
24080: MINUS
24081: PUSH
24082: LD_INT 0
24084: LESS
24085: IFFALSE 24097
// min_x := 0 else
24087: LD_ADDR_VAR 0 7
24091: PUSH
24092: LD_INT 0
24094: ST_TO_ADDR
24095: GO 24113
// min_x := x - r ;
24097: LD_ADDR_VAR 0 7
24101: PUSH
24102: LD_VAR 0 2
24106: PUSH
24107: LD_VAR 0 4
24111: MINUS
24112: ST_TO_ADDR
// if y - r < 0 then
24113: LD_VAR 0 3
24117: PUSH
24118: LD_VAR 0 4
24122: MINUS
24123: PUSH
24124: LD_INT 0
24126: LESS
24127: IFFALSE 24139
// min_y := 0 else
24129: LD_ADDR_VAR 0 8
24133: PUSH
24134: LD_INT 0
24136: ST_TO_ADDR
24137: GO 24155
// min_y := y - r ;
24139: LD_ADDR_VAR 0 8
24143: PUSH
24144: LD_VAR 0 3
24148: PUSH
24149: LD_VAR 0 4
24153: MINUS
24154: ST_TO_ADDR
// max_x := x + r ;
24155: LD_ADDR_VAR 0 9
24159: PUSH
24160: LD_VAR 0 2
24164: PUSH
24165: LD_VAR 0 4
24169: PLUS
24170: ST_TO_ADDR
// max_y := y + r ;
24171: LD_ADDR_VAR 0 10
24175: PUSH
24176: LD_VAR 0 3
24180: PUSH
24181: LD_VAR 0 4
24185: PLUS
24186: ST_TO_ADDR
// for _x = min_x to max_x do
24187: LD_ADDR_VAR 0 11
24191: PUSH
24192: DOUBLE
24193: LD_VAR 0 7
24197: DEC
24198: ST_TO_ADDR
24199: LD_VAR 0 9
24203: PUSH
24204: FOR_TO
24205: IFFALSE 24322
// for _y = min_y to max_y do
24207: LD_ADDR_VAR 0 12
24211: PUSH
24212: DOUBLE
24213: LD_VAR 0 8
24217: DEC
24218: ST_TO_ADDR
24219: LD_VAR 0 10
24223: PUSH
24224: FOR_TO
24225: IFFALSE 24318
// begin if not ValidHex ( _x , _y ) then
24227: LD_VAR 0 11
24231: PPUSH
24232: LD_VAR 0 12
24236: PPUSH
24237: CALL_OW 488
24241: NOT
24242: IFFALSE 24246
// continue ;
24244: GO 24224
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24246: LD_VAR 0 11
24250: PPUSH
24251: LD_VAR 0 12
24255: PPUSH
24256: CALL_OW 351
24260: PUSH
24261: LD_VAR 0 11
24265: PPUSH
24266: LD_VAR 0 12
24270: PPUSH
24271: CALL_OW 554
24275: AND
24276: IFFALSE 24316
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24278: LD_ADDR_VAR 0 13
24282: PUSH
24283: LD_VAR 0 13
24287: PPUSH
24288: LD_VAR 0 13
24292: PUSH
24293: LD_INT 1
24295: PLUS
24296: PPUSH
24297: LD_VAR 0 11
24301: PUSH
24302: LD_VAR 0 12
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 2
24315: ST_TO_ADDR
// end ;
24316: GO 24224
24318: POP
24319: POP
24320: GO 24204
24322: POP
24323: POP
// if not list then
24324: LD_VAR 0 13
24328: NOT
24329: IFFALSE 24333
// exit ;
24331: GO 24404
// for i in list do
24333: LD_ADDR_VAR 0 6
24337: PUSH
24338: LD_VAR 0 13
24342: PUSH
24343: FOR_IN
24344: IFFALSE 24402
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24346: LD_VAR 0 1
24350: PPUSH
24351: LD_STRING M
24353: PUSH
24354: LD_VAR 0 6
24358: PUSH
24359: LD_INT 1
24361: ARRAY
24362: PUSH
24363: LD_VAR 0 6
24367: PUSH
24368: LD_INT 2
24370: ARRAY
24371: PUSH
24372: LD_INT 0
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 0
24380: PUSH
24381: LD_INT 0
24383: PUSH
24384: EMPTY
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: PUSH
24393: EMPTY
24394: LIST
24395: PPUSH
24396: CALL_OW 447
24400: GO 24343
24402: POP
24403: POP
// end ;
24404: LD_VAR 0 5
24408: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24409: LD_INT 0
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24421: LD_VAR 0 1
24425: PPUSH
24426: CALL_OW 302
24430: NOT
24431: PUSH
24432: LD_VAR 0 2
24436: PPUSH
24437: LD_VAR 0 3
24441: PPUSH
24442: CALL_OW 488
24446: NOT
24447: OR
24448: PUSH
24449: LD_VAR 0 4
24453: NOT
24454: OR
24455: IFFALSE 24459
// exit ;
24457: GO 24972
// list := [ ] ;
24459: LD_ADDR_VAR 0 13
24463: PUSH
24464: EMPTY
24465: ST_TO_ADDR
// if x - r < 0 then
24466: LD_VAR 0 2
24470: PUSH
24471: LD_VAR 0 4
24475: MINUS
24476: PUSH
24477: LD_INT 0
24479: LESS
24480: IFFALSE 24492
// min_x := 0 else
24482: LD_ADDR_VAR 0 7
24486: PUSH
24487: LD_INT 0
24489: ST_TO_ADDR
24490: GO 24508
// min_x := x - r ;
24492: LD_ADDR_VAR 0 7
24496: PUSH
24497: LD_VAR 0 2
24501: PUSH
24502: LD_VAR 0 4
24506: MINUS
24507: ST_TO_ADDR
// if y - r < 0 then
24508: LD_VAR 0 3
24512: PUSH
24513: LD_VAR 0 4
24517: MINUS
24518: PUSH
24519: LD_INT 0
24521: LESS
24522: IFFALSE 24534
// min_y := 0 else
24524: LD_ADDR_VAR 0 8
24528: PUSH
24529: LD_INT 0
24531: ST_TO_ADDR
24532: GO 24550
// min_y := y - r ;
24534: LD_ADDR_VAR 0 8
24538: PUSH
24539: LD_VAR 0 3
24543: PUSH
24544: LD_VAR 0 4
24548: MINUS
24549: ST_TO_ADDR
// max_x := x + r ;
24550: LD_ADDR_VAR 0 9
24554: PUSH
24555: LD_VAR 0 2
24559: PUSH
24560: LD_VAR 0 4
24564: PLUS
24565: ST_TO_ADDR
// max_y := y + r ;
24566: LD_ADDR_VAR 0 10
24570: PUSH
24571: LD_VAR 0 3
24575: PUSH
24576: LD_VAR 0 4
24580: PLUS
24581: ST_TO_ADDR
// for _x = min_x to max_x do
24582: LD_ADDR_VAR 0 11
24586: PUSH
24587: DOUBLE
24588: LD_VAR 0 7
24592: DEC
24593: ST_TO_ADDR
24594: LD_VAR 0 9
24598: PUSH
24599: FOR_TO
24600: IFFALSE 24717
// for _y = min_y to max_y do
24602: LD_ADDR_VAR 0 12
24606: PUSH
24607: DOUBLE
24608: LD_VAR 0 8
24612: DEC
24613: ST_TO_ADDR
24614: LD_VAR 0 10
24618: PUSH
24619: FOR_TO
24620: IFFALSE 24713
// begin if not ValidHex ( _x , _y ) then
24622: LD_VAR 0 11
24626: PPUSH
24627: LD_VAR 0 12
24631: PPUSH
24632: CALL_OW 488
24636: NOT
24637: IFFALSE 24641
// continue ;
24639: GO 24619
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24641: LD_VAR 0 11
24645: PPUSH
24646: LD_VAR 0 12
24650: PPUSH
24651: CALL_OW 351
24655: PUSH
24656: LD_VAR 0 11
24660: PPUSH
24661: LD_VAR 0 12
24665: PPUSH
24666: CALL_OW 554
24670: AND
24671: IFFALSE 24711
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24673: LD_ADDR_VAR 0 13
24677: PUSH
24678: LD_VAR 0 13
24682: PPUSH
24683: LD_VAR 0 13
24687: PUSH
24688: LD_INT 1
24690: PLUS
24691: PPUSH
24692: LD_VAR 0 11
24696: PUSH
24697: LD_VAR 0 12
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PPUSH
24706: CALL_OW 2
24710: ST_TO_ADDR
// end ;
24711: GO 24619
24713: POP
24714: POP
24715: GO 24599
24717: POP
24718: POP
// if not list then
24719: LD_VAR 0 13
24723: NOT
24724: IFFALSE 24728
// exit ;
24726: GO 24972
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24728: LD_ADDR_VAR 0 13
24732: PUSH
24733: LD_VAR 0 1
24737: PPUSH
24738: LD_VAR 0 13
24742: PPUSH
24743: LD_INT 1
24745: PPUSH
24746: LD_INT 1
24748: PPUSH
24749: CALL 33585 0 4
24753: ST_TO_ADDR
// ComStop ( flame ) ;
24754: LD_VAR 0 1
24758: PPUSH
24759: CALL_OW 141
// for i in list do
24763: LD_ADDR_VAR 0 6
24767: PUSH
24768: LD_VAR 0 13
24772: PUSH
24773: FOR_IN
24774: IFFALSE 24805
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24776: LD_VAR 0 1
24780: PPUSH
24781: LD_VAR 0 6
24785: PUSH
24786: LD_INT 1
24788: ARRAY
24789: PPUSH
24790: LD_VAR 0 6
24794: PUSH
24795: LD_INT 2
24797: ARRAY
24798: PPUSH
24799: CALL_OW 176
24803: GO 24773
24805: POP
24806: POP
// repeat wait ( 0 0$1 ) ;
24807: LD_INT 35
24809: PPUSH
24810: CALL_OW 67
// task := GetTaskList ( flame ) ;
24814: LD_ADDR_VAR 0 14
24818: PUSH
24819: LD_VAR 0 1
24823: PPUSH
24824: CALL_OW 437
24828: ST_TO_ADDR
// if not task then
24829: LD_VAR 0 14
24833: NOT
24834: IFFALSE 24838
// exit ;
24836: GO 24972
// if task [ 1 ] [ 1 ] <> | then
24838: LD_VAR 0 14
24842: PUSH
24843: LD_INT 1
24845: ARRAY
24846: PUSH
24847: LD_INT 1
24849: ARRAY
24850: PUSH
24851: LD_STRING |
24853: NONEQUAL
24854: IFFALSE 24858
// exit ;
24856: GO 24972
// _x := task [ 1 ] [ 2 ] ;
24858: LD_ADDR_VAR 0 11
24862: PUSH
24863: LD_VAR 0 14
24867: PUSH
24868: LD_INT 1
24870: ARRAY
24871: PUSH
24872: LD_INT 2
24874: ARRAY
24875: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24876: LD_ADDR_VAR 0 12
24880: PUSH
24881: LD_VAR 0 14
24885: PUSH
24886: LD_INT 1
24888: ARRAY
24889: PUSH
24890: LD_INT 3
24892: ARRAY
24893: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24894: LD_VAR 0 11
24898: PPUSH
24899: LD_VAR 0 12
24903: PPUSH
24904: CALL_OW 351
24908: NOT
24909: PUSH
24910: LD_VAR 0 11
24914: PPUSH
24915: LD_VAR 0 12
24919: PPUSH
24920: CALL_OW 554
24924: NOT
24925: OR
24926: IFFALSE 24960
// begin task := Delete ( task , 1 ) ;
24928: LD_ADDR_VAR 0 14
24932: PUSH
24933: LD_VAR 0 14
24937: PPUSH
24938: LD_INT 1
24940: PPUSH
24941: CALL_OW 3
24945: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24946: LD_VAR 0 1
24950: PPUSH
24951: LD_VAR 0 14
24955: PPUSH
24956: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 314
24969: NOT
24970: IFFALSE 24807
// end ;
24972: LD_VAR 0 5
24976: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24977: LD_EXP 86
24981: NOT
24982: IFFALSE 25032
24984: GO 24986
24986: DISABLE
// begin initHack := true ;
24987: LD_ADDR_EXP 86
24991: PUSH
24992: LD_INT 1
24994: ST_TO_ADDR
// hackTanks := [ ] ;
24995: LD_ADDR_EXP 87
24999: PUSH
25000: EMPTY
25001: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25002: LD_ADDR_EXP 88
25006: PUSH
25007: EMPTY
25008: ST_TO_ADDR
// hackLimit := 3 ;
25009: LD_ADDR_EXP 89
25013: PUSH
25014: LD_INT 3
25016: ST_TO_ADDR
// hackDist := 12 ;
25017: LD_ADDR_EXP 90
25021: PUSH
25022: LD_INT 12
25024: ST_TO_ADDR
// hackCounter := [ ] ;
25025: LD_ADDR_EXP 91
25029: PUSH
25030: EMPTY
25031: ST_TO_ADDR
// end ;
25032: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25033: LD_EXP 86
25037: PUSH
25038: LD_INT 34
25040: PUSH
25041: LD_INT 99
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PPUSH
25048: CALL_OW 69
25052: AND
25053: IFFALSE 25306
25055: GO 25057
25057: DISABLE
25058: LD_INT 0
25060: PPUSH
25061: PPUSH
// begin enable ;
25062: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25063: LD_ADDR_VAR 0 1
25067: PUSH
25068: LD_INT 34
25070: PUSH
25071: LD_INT 99
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PPUSH
25078: CALL_OW 69
25082: PUSH
25083: FOR_IN
25084: IFFALSE 25304
// begin if not i in hackTanks then
25086: LD_VAR 0 1
25090: PUSH
25091: LD_EXP 87
25095: IN
25096: NOT
25097: IFFALSE 25180
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25099: LD_ADDR_EXP 87
25103: PUSH
25104: LD_EXP 87
25108: PPUSH
25109: LD_EXP 87
25113: PUSH
25114: LD_INT 1
25116: PLUS
25117: PPUSH
25118: LD_VAR 0 1
25122: PPUSH
25123: CALL_OW 1
25127: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25128: LD_ADDR_EXP 88
25132: PUSH
25133: LD_EXP 88
25137: PPUSH
25138: LD_EXP 88
25142: PUSH
25143: LD_INT 1
25145: PLUS
25146: PPUSH
25147: EMPTY
25148: PPUSH
25149: CALL_OW 1
25153: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25154: LD_ADDR_EXP 91
25158: PUSH
25159: LD_EXP 91
25163: PPUSH
25164: LD_EXP 91
25168: PUSH
25169: LD_INT 1
25171: PLUS
25172: PPUSH
25173: EMPTY
25174: PPUSH
25175: CALL_OW 1
25179: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25180: LD_VAR 0 1
25184: PPUSH
25185: CALL_OW 302
25189: NOT
25190: IFFALSE 25203
// begin HackUnlinkAll ( i ) ;
25192: LD_VAR 0 1
25196: PPUSH
25197: CALL 25309 0 1
// continue ;
25201: GO 25083
// end ; HackCheckCapturedStatus ( i ) ;
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL 25752 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25212: LD_ADDR_VAR 0 2
25216: PUSH
25217: LD_INT 81
25219: PUSH
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL_OW 255
25229: PUSH
25230: EMPTY
25231: LIST
25232: LIST
25233: PUSH
25234: LD_INT 33
25236: PUSH
25237: LD_INT 3
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 91
25246: PUSH
25247: LD_VAR 0 1
25251: PUSH
25252: LD_EXP 90
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 50
25264: PUSH
25265: EMPTY
25266: LIST
25267: PUSH
25268: EMPTY
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: PPUSH
25274: CALL_OW 69
25278: ST_TO_ADDR
// if not tmp then
25279: LD_VAR 0 2
25283: NOT
25284: IFFALSE 25288
// continue ;
25286: GO 25083
// HackLink ( i , tmp ) ;
25288: LD_VAR 0 1
25292: PPUSH
25293: LD_VAR 0 2
25297: PPUSH
25298: CALL 25445 0 2
// end ;
25302: GO 25083
25304: POP
25305: POP
// end ;
25306: PPOPN 2
25308: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25309: LD_INT 0
25311: PPUSH
25312: PPUSH
25313: PPUSH
// if not hack in hackTanks then
25314: LD_VAR 0 1
25318: PUSH
25319: LD_EXP 87
25323: IN
25324: NOT
25325: IFFALSE 25329
// exit ;
25327: GO 25440
// index := GetElementIndex ( hackTanks , hack ) ;
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: LD_EXP 87
25338: PPUSH
25339: LD_VAR 0 1
25343: PPUSH
25344: CALL 32882 0 2
25348: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25349: LD_EXP 88
25353: PUSH
25354: LD_VAR 0 4
25358: ARRAY
25359: IFFALSE 25440
// begin for i in hackTanksCaptured [ index ] do
25361: LD_ADDR_VAR 0 3
25365: PUSH
25366: LD_EXP 88
25370: PUSH
25371: LD_VAR 0 4
25375: ARRAY
25376: PUSH
25377: FOR_IN
25378: IFFALSE 25404
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25380: LD_VAR 0 3
25384: PUSH
25385: LD_INT 1
25387: ARRAY
25388: PPUSH
25389: LD_VAR 0 3
25393: PUSH
25394: LD_INT 2
25396: ARRAY
25397: PPUSH
25398: CALL_OW 235
25402: GO 25377
25404: POP
25405: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25406: LD_ADDR_EXP 88
25410: PUSH
25411: LD_EXP 88
25415: PPUSH
25416: LD_VAR 0 4
25420: PPUSH
25421: EMPTY
25422: PPUSH
25423: CALL_OW 1
25427: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25428: LD_VAR 0 1
25432: PPUSH
25433: LD_INT 0
25435: PPUSH
25436: CALL_OW 505
// end ; end ;
25440: LD_VAR 0 2
25444: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25445: LD_INT 0
25447: PPUSH
25448: PPUSH
25449: PPUSH
// if not hack in hackTanks or not vehicles then
25450: LD_VAR 0 1
25454: PUSH
25455: LD_EXP 87
25459: IN
25460: NOT
25461: PUSH
25462: LD_VAR 0 2
25466: NOT
25467: OR
25468: IFFALSE 25472
// exit ;
25470: GO 25747
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25472: LD_ADDR_VAR 0 2
25476: PUSH
25477: LD_VAR 0 1
25481: PPUSH
25482: LD_VAR 0 2
25486: PPUSH
25487: LD_INT 1
25489: PPUSH
25490: LD_INT 1
25492: PPUSH
25493: CALL 33532 0 4
25497: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25498: LD_ADDR_VAR 0 5
25502: PUSH
25503: LD_EXP 87
25507: PPUSH
25508: LD_VAR 0 1
25512: PPUSH
25513: CALL 32882 0 2
25517: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25518: LD_EXP 88
25522: PUSH
25523: LD_VAR 0 5
25527: ARRAY
25528: PUSH
25529: LD_EXP 89
25533: LESS
25534: IFFALSE 25723
// begin for i := 1 to vehicles do
25536: LD_ADDR_VAR 0 4
25540: PUSH
25541: DOUBLE
25542: LD_INT 1
25544: DEC
25545: ST_TO_ADDR
25546: LD_VAR 0 2
25550: PUSH
25551: FOR_TO
25552: IFFALSE 25721
// begin if hackTanksCaptured [ index ] = hackLimit then
25554: LD_EXP 88
25558: PUSH
25559: LD_VAR 0 5
25563: ARRAY
25564: PUSH
25565: LD_EXP 89
25569: EQUAL
25570: IFFALSE 25574
// break ;
25572: GO 25721
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25574: LD_ADDR_EXP 91
25578: PUSH
25579: LD_EXP 91
25583: PPUSH
25584: LD_VAR 0 5
25588: PPUSH
25589: LD_EXP 91
25593: PUSH
25594: LD_VAR 0 5
25598: ARRAY
25599: PUSH
25600: LD_INT 1
25602: PLUS
25603: PPUSH
25604: CALL_OW 1
25608: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25609: LD_ADDR_EXP 88
25613: PUSH
25614: LD_EXP 88
25618: PPUSH
25619: LD_VAR 0 5
25623: PUSH
25624: LD_EXP 88
25628: PUSH
25629: LD_VAR 0 5
25633: ARRAY
25634: PUSH
25635: LD_INT 1
25637: PLUS
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PPUSH
25643: LD_VAR 0 2
25647: PUSH
25648: LD_VAR 0 4
25652: ARRAY
25653: PUSH
25654: LD_VAR 0 2
25658: PUSH
25659: LD_VAR 0 4
25663: ARRAY
25664: PPUSH
25665: CALL_OW 255
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL 33097 0 3
25678: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25679: LD_VAR 0 2
25683: PUSH
25684: LD_VAR 0 4
25688: ARRAY
25689: PPUSH
25690: LD_VAR 0 1
25694: PPUSH
25695: CALL_OW 255
25699: PPUSH
25700: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25704: LD_VAR 0 2
25708: PUSH
25709: LD_VAR 0 4
25713: ARRAY
25714: PPUSH
25715: CALL_OW 141
// end ;
25719: GO 25551
25721: POP
25722: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25723: LD_VAR 0 1
25727: PPUSH
25728: LD_EXP 88
25732: PUSH
25733: LD_VAR 0 5
25737: ARRAY
25738: PUSH
25739: LD_INT 0
25741: PLUS
25742: PPUSH
25743: CALL_OW 505
// end ;
25747: LD_VAR 0 3
25751: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
// if not hack in hackTanks then
25758: LD_VAR 0 1
25762: PUSH
25763: LD_EXP 87
25767: IN
25768: NOT
25769: IFFALSE 25773
// exit ;
25771: GO 26013
// index := GetElementIndex ( hackTanks , hack ) ;
25773: LD_ADDR_VAR 0 4
25777: PUSH
25778: LD_EXP 87
25782: PPUSH
25783: LD_VAR 0 1
25787: PPUSH
25788: CALL 32882 0 2
25792: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25793: LD_ADDR_VAR 0 3
25797: PUSH
25798: DOUBLE
25799: LD_EXP 88
25803: PUSH
25804: LD_VAR 0 4
25808: ARRAY
25809: INC
25810: ST_TO_ADDR
25811: LD_INT 1
25813: PUSH
25814: FOR_DOWNTO
25815: IFFALSE 25987
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25817: LD_ADDR_VAR 0 5
25821: PUSH
25822: LD_EXP 88
25826: PUSH
25827: LD_VAR 0 4
25831: ARRAY
25832: PUSH
25833: LD_VAR 0 3
25837: ARRAY
25838: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25839: LD_VAR 0 5
25843: PUSH
25844: LD_INT 1
25846: ARRAY
25847: PPUSH
25848: CALL_OW 302
25852: NOT
25853: PUSH
25854: LD_VAR 0 5
25858: PUSH
25859: LD_INT 1
25861: ARRAY
25862: PPUSH
25863: CALL_OW 255
25867: PUSH
25868: LD_VAR 0 1
25872: PPUSH
25873: CALL_OW 255
25877: NONEQUAL
25878: OR
25879: IFFALSE 25985
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25881: LD_VAR 0 5
25885: PUSH
25886: LD_INT 1
25888: ARRAY
25889: PPUSH
25890: CALL_OW 305
25894: PUSH
25895: LD_VAR 0 5
25899: PUSH
25900: LD_INT 1
25902: ARRAY
25903: PPUSH
25904: CALL_OW 255
25908: PUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 255
25918: EQUAL
25919: AND
25920: IFFALSE 25944
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25922: LD_VAR 0 5
25926: PUSH
25927: LD_INT 1
25929: ARRAY
25930: PPUSH
25931: LD_VAR 0 5
25935: PUSH
25936: LD_INT 2
25938: ARRAY
25939: PPUSH
25940: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25944: LD_ADDR_EXP 88
25948: PUSH
25949: LD_EXP 88
25953: PPUSH
25954: LD_VAR 0 4
25958: PPUSH
25959: LD_EXP 88
25963: PUSH
25964: LD_VAR 0 4
25968: ARRAY
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: CALL_OW 3
25979: PPUSH
25980: CALL_OW 1
25984: ST_TO_ADDR
// end ; end ;
25985: GO 25814
25987: POP
25988: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25989: LD_VAR 0 1
25993: PPUSH
25994: LD_EXP 88
25998: PUSH
25999: LD_VAR 0 4
26003: ARRAY
26004: PUSH
26005: LD_INT 0
26007: PLUS
26008: PPUSH
26009: CALL_OW 505
// end ;
26013: LD_VAR 0 2
26017: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26018: LD_INT 0
26020: PPUSH
26021: PPUSH
26022: PPUSH
26023: PPUSH
// if not hack in hackTanks then
26024: LD_VAR 0 1
26028: PUSH
26029: LD_EXP 87
26033: IN
26034: NOT
26035: IFFALSE 26039
// exit ;
26037: GO 26124
// index := GetElementIndex ( hackTanks , hack ) ;
26039: LD_ADDR_VAR 0 5
26043: PUSH
26044: LD_EXP 87
26048: PPUSH
26049: LD_VAR 0 1
26053: PPUSH
26054: CALL 32882 0 2
26058: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26059: LD_ADDR_VAR 0 4
26063: PUSH
26064: DOUBLE
26065: LD_INT 1
26067: DEC
26068: ST_TO_ADDR
26069: LD_EXP 88
26073: PUSH
26074: LD_VAR 0 5
26078: ARRAY
26079: PUSH
26080: FOR_TO
26081: IFFALSE 26122
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26083: LD_EXP 88
26087: PUSH
26088: LD_VAR 0 5
26092: ARRAY
26093: PUSH
26094: LD_VAR 0 4
26098: ARRAY
26099: PUSH
26100: LD_INT 1
26102: ARRAY
26103: PUSH
26104: LD_VAR 0 2
26108: EQUAL
26109: IFFALSE 26120
// KillUnit ( vehicle ) ;
26111: LD_VAR 0 2
26115: PPUSH
26116: CALL_OW 66
26120: GO 26080
26122: POP
26123: POP
// end ;
26124: LD_VAR 0 3
26128: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26129: LD_EXP 92
26133: NOT
26134: IFFALSE 26169
26136: GO 26138
26138: DISABLE
// begin initMiner := true ;
26139: LD_ADDR_EXP 92
26143: PUSH
26144: LD_INT 1
26146: ST_TO_ADDR
// minersList := [ ] ;
26147: LD_ADDR_EXP 93
26151: PUSH
26152: EMPTY
26153: ST_TO_ADDR
// minerMinesList := [ ] ;
26154: LD_ADDR_EXP 94
26158: PUSH
26159: EMPTY
26160: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26161: LD_ADDR_EXP 95
26165: PUSH
26166: LD_INT 5
26168: ST_TO_ADDR
// end ;
26169: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26170: LD_EXP 92
26174: PUSH
26175: LD_INT 34
26177: PUSH
26178: LD_INT 81
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 69
26189: AND
26190: IFFALSE 26651
26192: GO 26194
26194: DISABLE
26195: LD_INT 0
26197: PPUSH
26198: PPUSH
26199: PPUSH
26200: PPUSH
// begin enable ;
26201: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26202: LD_ADDR_VAR 0 1
26206: PUSH
26207: LD_INT 34
26209: PUSH
26210: LD_INT 81
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PPUSH
26217: CALL_OW 69
26221: PUSH
26222: FOR_IN
26223: IFFALSE 26295
// begin if not i in minersList then
26225: LD_VAR 0 1
26229: PUSH
26230: LD_EXP 93
26234: IN
26235: NOT
26236: IFFALSE 26293
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26238: LD_ADDR_EXP 93
26242: PUSH
26243: LD_EXP 93
26247: PPUSH
26248: LD_EXP 93
26252: PUSH
26253: LD_INT 1
26255: PLUS
26256: PPUSH
26257: LD_VAR 0 1
26261: PPUSH
26262: CALL_OW 1
26266: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26267: LD_ADDR_EXP 94
26271: PUSH
26272: LD_EXP 94
26276: PPUSH
26277: LD_EXP 94
26281: PUSH
26282: LD_INT 1
26284: PLUS
26285: PPUSH
26286: EMPTY
26287: PPUSH
26288: CALL_OW 1
26292: ST_TO_ADDR
// end end ;
26293: GO 26222
26295: POP
26296: POP
// for i := minerMinesList downto 1 do
26297: LD_ADDR_VAR 0 1
26301: PUSH
26302: DOUBLE
26303: LD_EXP 94
26307: INC
26308: ST_TO_ADDR
26309: LD_INT 1
26311: PUSH
26312: FOR_DOWNTO
26313: IFFALSE 26649
// begin if IsLive ( minersList [ i ] ) then
26315: LD_EXP 93
26319: PUSH
26320: LD_VAR 0 1
26324: ARRAY
26325: PPUSH
26326: CALL_OW 300
26330: IFFALSE 26358
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26332: LD_EXP 93
26336: PUSH
26337: LD_VAR 0 1
26341: ARRAY
26342: PPUSH
26343: LD_EXP 94
26347: PUSH
26348: LD_VAR 0 1
26352: ARRAY
26353: PPUSH
26354: CALL_OW 505
// if not minerMinesList [ i ] then
26358: LD_EXP 94
26362: PUSH
26363: LD_VAR 0 1
26367: ARRAY
26368: NOT
26369: IFFALSE 26373
// continue ;
26371: GO 26312
// for j := minerMinesList [ i ] downto 1 do
26373: LD_ADDR_VAR 0 2
26377: PUSH
26378: DOUBLE
26379: LD_EXP 94
26383: PUSH
26384: LD_VAR 0 1
26388: ARRAY
26389: INC
26390: ST_TO_ADDR
26391: LD_INT 1
26393: PUSH
26394: FOR_DOWNTO
26395: IFFALSE 26645
// begin side := GetSide ( minersList [ i ] ) ;
26397: LD_ADDR_VAR 0 3
26401: PUSH
26402: LD_EXP 93
26406: PUSH
26407: LD_VAR 0 1
26411: ARRAY
26412: PPUSH
26413: CALL_OW 255
26417: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26418: LD_ADDR_VAR 0 4
26422: PUSH
26423: LD_EXP 94
26427: PUSH
26428: LD_VAR 0 1
26432: ARRAY
26433: PUSH
26434: LD_VAR 0 2
26438: ARRAY
26439: PUSH
26440: LD_INT 1
26442: ARRAY
26443: PPUSH
26444: LD_EXP 94
26448: PUSH
26449: LD_VAR 0 1
26453: ARRAY
26454: PUSH
26455: LD_VAR 0 2
26459: ARRAY
26460: PUSH
26461: LD_INT 2
26463: ARRAY
26464: PPUSH
26465: CALL_OW 428
26469: ST_TO_ADDR
// if not tmp then
26470: LD_VAR 0 4
26474: NOT
26475: IFFALSE 26479
// continue ;
26477: GO 26394
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26479: LD_VAR 0 4
26483: PUSH
26484: LD_INT 81
26486: PUSH
26487: LD_VAR 0 3
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PPUSH
26496: CALL_OW 69
26500: IN
26501: PUSH
26502: LD_EXP 94
26506: PUSH
26507: LD_VAR 0 1
26511: ARRAY
26512: PUSH
26513: LD_VAR 0 2
26517: ARRAY
26518: PUSH
26519: LD_INT 1
26521: ARRAY
26522: PPUSH
26523: LD_EXP 94
26527: PUSH
26528: LD_VAR 0 1
26532: ARRAY
26533: PUSH
26534: LD_VAR 0 2
26538: ARRAY
26539: PUSH
26540: LD_INT 2
26542: ARRAY
26543: PPUSH
26544: CALL_OW 458
26548: AND
26549: IFFALSE 26643
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26551: LD_EXP 94
26555: PUSH
26556: LD_VAR 0 1
26560: ARRAY
26561: PUSH
26562: LD_VAR 0 2
26566: ARRAY
26567: PUSH
26568: LD_INT 1
26570: ARRAY
26571: PPUSH
26572: LD_EXP 94
26576: PUSH
26577: LD_VAR 0 1
26581: ARRAY
26582: PUSH
26583: LD_VAR 0 2
26587: ARRAY
26588: PUSH
26589: LD_INT 2
26591: ARRAY
26592: PPUSH
26593: LD_VAR 0 3
26597: PPUSH
26598: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26602: LD_ADDR_EXP 94
26606: PUSH
26607: LD_EXP 94
26611: PPUSH
26612: LD_VAR 0 1
26616: PPUSH
26617: LD_EXP 94
26621: PUSH
26622: LD_VAR 0 1
26626: ARRAY
26627: PPUSH
26628: LD_VAR 0 2
26632: PPUSH
26633: CALL_OW 3
26637: PPUSH
26638: CALL_OW 1
26642: ST_TO_ADDR
// end ; end ;
26643: GO 26394
26645: POP
26646: POP
// end ;
26647: GO 26312
26649: POP
26650: POP
// end ;
26651: PPOPN 4
26653: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26654: LD_INT 0
26656: PPUSH
26657: PPUSH
// result := false ;
26658: LD_ADDR_VAR 0 4
26662: PUSH
26663: LD_INT 0
26665: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26666: LD_VAR 0 1
26670: PPUSH
26671: CALL_OW 264
26675: PUSH
26676: LD_INT 81
26678: EQUAL
26679: NOT
26680: IFFALSE 26684
// exit ;
26682: GO 26924
// index := GetElementIndex ( minersList , unit ) ;
26684: LD_ADDR_VAR 0 5
26688: PUSH
26689: LD_EXP 93
26693: PPUSH
26694: LD_VAR 0 1
26698: PPUSH
26699: CALL 32882 0 2
26703: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26704: LD_EXP 94
26708: PUSH
26709: LD_VAR 0 5
26713: ARRAY
26714: PUSH
26715: LD_EXP 95
26719: GREATEREQUAL
26720: IFFALSE 26724
// exit ;
26722: GO 26924
// ComMoveXY ( unit , x , y ) ;
26724: LD_VAR 0 1
26728: PPUSH
26729: LD_VAR 0 2
26733: PPUSH
26734: LD_VAR 0 3
26738: PPUSH
26739: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26743: LD_INT 35
26745: PPUSH
26746: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26750: LD_VAR 0 1
26754: PPUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL 64623 0 3
26769: NOT
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 314
26780: AND
26781: IFFALSE 26785
// exit ;
26783: GO 26924
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26785: LD_VAR 0 2
26789: PPUSH
26790: LD_VAR 0 3
26794: PPUSH
26795: CALL_OW 428
26799: PUSH
26800: LD_VAR 0 1
26804: EQUAL
26805: PUSH
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 314
26815: NOT
26816: AND
26817: IFFALSE 26743
// PlaySoundXY ( x , y , PlantMine ) ;
26819: LD_VAR 0 2
26823: PPUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: LD_STRING PlantMine
26831: PPUSH
26832: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26836: LD_VAR 0 2
26840: PPUSH
26841: LD_VAR 0 3
26845: PPUSH
26846: LD_VAR 0 1
26850: PPUSH
26851: CALL_OW 255
26855: PPUSH
26856: LD_INT 0
26858: PPUSH
26859: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26863: LD_ADDR_EXP 94
26867: PUSH
26868: LD_EXP 94
26872: PPUSH
26873: LD_VAR 0 5
26877: PUSH
26878: LD_EXP 94
26882: PUSH
26883: LD_VAR 0 5
26887: ARRAY
26888: PUSH
26889: LD_INT 1
26891: PLUS
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PPUSH
26897: LD_VAR 0 2
26901: PUSH
26902: LD_VAR 0 3
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PPUSH
26911: CALL 33097 0 3
26915: ST_TO_ADDR
// result := true ;
26916: LD_ADDR_VAR 0 4
26920: PUSH
26921: LD_INT 1
26923: ST_TO_ADDR
// end ;
26924: LD_VAR 0 4
26928: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26929: LD_INT 0
26931: PPUSH
26932: PPUSH
26933: PPUSH
// if not unit in minersList then
26934: LD_VAR 0 1
26938: PUSH
26939: LD_EXP 93
26943: IN
26944: NOT
26945: IFFALSE 26949
// exit ;
26947: GO 27341
// index := GetElementIndex ( minersList , unit ) ;
26949: LD_ADDR_VAR 0 6
26953: PUSH
26954: LD_EXP 93
26958: PPUSH
26959: LD_VAR 0 1
26963: PPUSH
26964: CALL 32882 0 2
26968: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26969: LD_ADDR_VAR 0 5
26973: PUSH
26974: DOUBLE
26975: LD_EXP 94
26979: PUSH
26980: LD_VAR 0 6
26984: ARRAY
26985: INC
26986: ST_TO_ADDR
26987: LD_INT 1
26989: PUSH
26990: FOR_DOWNTO
26991: IFFALSE 27152
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26993: LD_EXP 94
26997: PUSH
26998: LD_VAR 0 6
27002: ARRAY
27003: PUSH
27004: LD_VAR 0 5
27008: ARRAY
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: PUSH
27014: LD_VAR 0 2
27018: EQUAL
27019: PUSH
27020: LD_EXP 94
27024: PUSH
27025: LD_VAR 0 6
27029: ARRAY
27030: PUSH
27031: LD_VAR 0 5
27035: ARRAY
27036: PUSH
27037: LD_INT 2
27039: ARRAY
27040: PUSH
27041: LD_VAR 0 3
27045: EQUAL
27046: AND
27047: IFFALSE 27150
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27049: LD_EXP 94
27053: PUSH
27054: LD_VAR 0 6
27058: ARRAY
27059: PUSH
27060: LD_VAR 0 5
27064: ARRAY
27065: PUSH
27066: LD_INT 1
27068: ARRAY
27069: PPUSH
27070: LD_EXP 94
27074: PUSH
27075: LD_VAR 0 6
27079: ARRAY
27080: PUSH
27081: LD_VAR 0 5
27085: ARRAY
27086: PUSH
27087: LD_INT 2
27089: ARRAY
27090: PPUSH
27091: LD_VAR 0 1
27095: PPUSH
27096: CALL_OW 255
27100: PPUSH
27101: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27105: LD_ADDR_EXP 94
27109: PUSH
27110: LD_EXP 94
27114: PPUSH
27115: LD_VAR 0 6
27119: PPUSH
27120: LD_EXP 94
27124: PUSH
27125: LD_VAR 0 6
27129: ARRAY
27130: PPUSH
27131: LD_VAR 0 5
27135: PPUSH
27136: CALL_OW 3
27140: PPUSH
27141: CALL_OW 1
27145: ST_TO_ADDR
// exit ;
27146: POP
27147: POP
27148: GO 27341
// end ; end ;
27150: GO 26990
27152: POP
27153: POP
// for i := minerMinesList [ index ] downto 1 do
27154: LD_ADDR_VAR 0 5
27158: PUSH
27159: DOUBLE
27160: LD_EXP 94
27164: PUSH
27165: LD_VAR 0 6
27169: ARRAY
27170: INC
27171: ST_TO_ADDR
27172: LD_INT 1
27174: PUSH
27175: FOR_DOWNTO
27176: IFFALSE 27339
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27178: LD_EXP 94
27182: PUSH
27183: LD_VAR 0 6
27187: ARRAY
27188: PUSH
27189: LD_VAR 0 5
27193: ARRAY
27194: PUSH
27195: LD_INT 1
27197: ARRAY
27198: PPUSH
27199: LD_EXP 94
27203: PUSH
27204: LD_VAR 0 6
27208: ARRAY
27209: PUSH
27210: LD_VAR 0 5
27214: ARRAY
27215: PUSH
27216: LD_INT 2
27218: ARRAY
27219: PPUSH
27220: LD_VAR 0 2
27224: PPUSH
27225: LD_VAR 0 3
27229: PPUSH
27230: CALL_OW 298
27234: PUSH
27235: LD_INT 6
27237: LESS
27238: IFFALSE 27337
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27240: LD_EXP 94
27244: PUSH
27245: LD_VAR 0 6
27249: ARRAY
27250: PUSH
27251: LD_VAR 0 5
27255: ARRAY
27256: PUSH
27257: LD_INT 1
27259: ARRAY
27260: PPUSH
27261: LD_EXP 94
27265: PUSH
27266: LD_VAR 0 6
27270: ARRAY
27271: PUSH
27272: LD_VAR 0 5
27276: ARRAY
27277: PUSH
27278: LD_INT 2
27280: ARRAY
27281: PPUSH
27282: LD_VAR 0 1
27286: PPUSH
27287: CALL_OW 255
27291: PPUSH
27292: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27296: LD_ADDR_EXP 94
27300: PUSH
27301: LD_EXP 94
27305: PPUSH
27306: LD_VAR 0 6
27310: PPUSH
27311: LD_EXP 94
27315: PUSH
27316: LD_VAR 0 6
27320: ARRAY
27321: PPUSH
27322: LD_VAR 0 5
27326: PPUSH
27327: CALL_OW 3
27331: PPUSH
27332: CALL_OW 1
27336: ST_TO_ADDR
// end ; end ;
27337: GO 27175
27339: POP
27340: POP
// end ;
27341: LD_VAR 0 4
27345: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27346: LD_INT 0
27348: PPUSH
27349: PPUSH
27350: PPUSH
27351: PPUSH
27352: PPUSH
27353: PPUSH
27354: PPUSH
27355: PPUSH
27356: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 264
27366: PUSH
27367: LD_INT 81
27369: EQUAL
27370: NOT
27371: PUSH
27372: LD_VAR 0 1
27376: PUSH
27377: LD_EXP 93
27381: IN
27382: NOT
27383: OR
27384: IFFALSE 27388
// exit ;
27386: GO 27710
// index := GetElementIndex ( minersList , unit ) ;
27388: LD_ADDR_VAR 0 6
27392: PUSH
27393: LD_EXP 93
27397: PPUSH
27398: LD_VAR 0 1
27402: PPUSH
27403: CALL 32882 0 2
27407: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27408: LD_ADDR_VAR 0 8
27412: PUSH
27413: LD_EXP 95
27417: PUSH
27418: LD_EXP 94
27422: PUSH
27423: LD_VAR 0 6
27427: ARRAY
27428: MINUS
27429: ST_TO_ADDR
// if not minesFreeAmount then
27430: LD_VAR 0 8
27434: NOT
27435: IFFALSE 27439
// exit ;
27437: GO 27710
// tmp := [ ] ;
27439: LD_ADDR_VAR 0 7
27443: PUSH
27444: EMPTY
27445: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27446: LD_ADDR_VAR 0 5
27450: PUSH
27451: DOUBLE
27452: LD_INT 1
27454: DEC
27455: ST_TO_ADDR
27456: LD_VAR 0 8
27460: PUSH
27461: FOR_TO
27462: IFFALSE 27657
// begin _d := rand ( 0 , 5 ) ;
27464: LD_ADDR_VAR 0 11
27468: PUSH
27469: LD_INT 0
27471: PPUSH
27472: LD_INT 5
27474: PPUSH
27475: CALL_OW 12
27479: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27480: LD_ADDR_VAR 0 12
27484: PUSH
27485: LD_INT 2
27487: PPUSH
27488: LD_INT 6
27490: PPUSH
27491: CALL_OW 12
27495: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27496: LD_ADDR_VAR 0 9
27500: PUSH
27501: LD_VAR 0 2
27505: PPUSH
27506: LD_VAR 0 11
27510: PPUSH
27511: LD_VAR 0 12
27515: PPUSH
27516: CALL_OW 272
27520: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27521: LD_ADDR_VAR 0 10
27525: PUSH
27526: LD_VAR 0 3
27530: PPUSH
27531: LD_VAR 0 11
27535: PPUSH
27536: LD_VAR 0 12
27540: PPUSH
27541: CALL_OW 273
27545: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27546: LD_VAR 0 9
27550: PPUSH
27551: LD_VAR 0 10
27555: PPUSH
27556: CALL_OW 488
27560: PUSH
27561: LD_VAR 0 9
27565: PUSH
27566: LD_VAR 0 10
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PUSH
27575: LD_VAR 0 7
27579: IN
27580: NOT
27581: AND
27582: PUSH
27583: LD_VAR 0 9
27587: PPUSH
27588: LD_VAR 0 10
27592: PPUSH
27593: CALL_OW 458
27597: NOT
27598: AND
27599: IFFALSE 27641
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27601: LD_ADDR_VAR 0 7
27605: PUSH
27606: LD_VAR 0 7
27610: PPUSH
27611: LD_VAR 0 7
27615: PUSH
27616: LD_INT 1
27618: PLUS
27619: PPUSH
27620: LD_VAR 0 9
27624: PUSH
27625: LD_VAR 0 10
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: PPUSH
27634: CALL_OW 1
27638: ST_TO_ADDR
27639: GO 27655
// i := i - 1 ;
27641: LD_ADDR_VAR 0 5
27645: PUSH
27646: LD_VAR 0 5
27650: PUSH
27651: LD_INT 1
27653: MINUS
27654: ST_TO_ADDR
// end ;
27655: GO 27461
27657: POP
27658: POP
// for i in tmp do
27659: LD_ADDR_VAR 0 5
27663: PUSH
27664: LD_VAR 0 7
27668: PUSH
27669: FOR_IN
27670: IFFALSE 27708
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27672: LD_VAR 0 1
27676: PPUSH
27677: LD_VAR 0 5
27681: PUSH
27682: LD_INT 1
27684: ARRAY
27685: PPUSH
27686: LD_VAR 0 5
27690: PUSH
27691: LD_INT 2
27693: ARRAY
27694: PPUSH
27695: CALL 26654 0 3
27699: NOT
27700: IFFALSE 27706
// exit ;
27702: POP
27703: POP
27704: GO 27710
27706: GO 27669
27708: POP
27709: POP
// end ;
27710: LD_VAR 0 4
27714: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27715: LD_INT 0
27717: PPUSH
27718: PPUSH
27719: PPUSH
27720: PPUSH
27721: PPUSH
27722: PPUSH
27723: PPUSH
// if not GetClass ( unit ) = class_sniper then
27724: LD_VAR 0 1
27728: PPUSH
27729: CALL_OW 257
27733: PUSH
27734: LD_INT 5
27736: EQUAL
27737: NOT
27738: IFFALSE 27742
// exit ;
27740: GO 28130
// dist := 8 ;
27742: LD_ADDR_VAR 0 5
27746: PUSH
27747: LD_INT 8
27749: ST_TO_ADDR
// viewRange := 12 ;
27750: LD_ADDR_VAR 0 7
27754: PUSH
27755: LD_INT 12
27757: ST_TO_ADDR
// side := GetSide ( unit ) ;
27758: LD_ADDR_VAR 0 6
27762: PUSH
27763: LD_VAR 0 1
27767: PPUSH
27768: CALL_OW 255
27772: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27773: LD_INT 61
27775: PPUSH
27776: LD_VAR 0 6
27780: PPUSH
27781: CALL_OW 321
27785: PUSH
27786: LD_INT 2
27788: EQUAL
27789: IFFALSE 27799
// viewRange := 16 ;
27791: LD_ADDR_VAR 0 7
27795: PUSH
27796: LD_INT 16
27798: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27799: LD_VAR 0 1
27803: PPUSH
27804: LD_VAR 0 2
27808: PPUSH
27809: LD_VAR 0 3
27813: PPUSH
27814: CALL_OW 297
27818: PUSH
27819: LD_VAR 0 5
27823: GREATER
27824: IFFALSE 27903
// begin ComMoveXY ( unit , x , y ) ;
27826: LD_VAR 0 1
27830: PPUSH
27831: LD_VAR 0 2
27835: PPUSH
27836: LD_VAR 0 3
27840: PPUSH
27841: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27845: LD_INT 35
27847: PPUSH
27848: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27852: LD_VAR 0 1
27856: PPUSH
27857: LD_VAR 0 2
27861: PPUSH
27862: LD_VAR 0 3
27866: PPUSH
27867: CALL 64623 0 3
27871: NOT
27872: IFFALSE 27876
// exit ;
27874: GO 28130
// until GetDistUnitXY ( unit , x , y ) < dist ;
27876: LD_VAR 0 1
27880: PPUSH
27881: LD_VAR 0 2
27885: PPUSH
27886: LD_VAR 0 3
27890: PPUSH
27891: CALL_OW 297
27895: PUSH
27896: LD_VAR 0 5
27900: LESS
27901: IFFALSE 27845
// end ; ComTurnXY ( unit , x , y ) ;
27903: LD_VAR 0 1
27907: PPUSH
27908: LD_VAR 0 2
27912: PPUSH
27913: LD_VAR 0 3
27917: PPUSH
27918: CALL_OW 118
// wait ( 5 ) ;
27922: LD_INT 5
27924: PPUSH
27925: CALL_OW 67
// _d := GetDir ( unit ) ;
27929: LD_ADDR_VAR 0 10
27933: PUSH
27934: LD_VAR 0 1
27938: PPUSH
27939: CALL_OW 254
27943: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27944: LD_ADDR_VAR 0 8
27948: PUSH
27949: LD_VAR 0 1
27953: PPUSH
27954: CALL_OW 250
27958: PPUSH
27959: LD_VAR 0 10
27963: PPUSH
27964: LD_VAR 0 5
27968: PPUSH
27969: CALL_OW 272
27973: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27974: LD_ADDR_VAR 0 9
27978: PUSH
27979: LD_VAR 0 1
27983: PPUSH
27984: CALL_OW 251
27988: PPUSH
27989: LD_VAR 0 10
27993: PPUSH
27994: LD_VAR 0 5
27998: PPUSH
27999: CALL_OW 273
28003: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28004: LD_VAR 0 8
28008: PPUSH
28009: LD_VAR 0 9
28013: PPUSH
28014: CALL_OW 488
28018: NOT
28019: IFFALSE 28023
// exit ;
28021: GO 28130
// ComAnimCustom ( unit , 1 ) ;
28023: LD_VAR 0 1
28027: PPUSH
28028: LD_INT 1
28030: PPUSH
28031: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28035: LD_VAR 0 8
28039: PPUSH
28040: LD_VAR 0 9
28044: PPUSH
28045: LD_VAR 0 6
28049: PPUSH
28050: LD_VAR 0 7
28054: PPUSH
28055: CALL_OW 330
// repeat wait ( 1 ) ;
28059: LD_INT 1
28061: PPUSH
28062: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28066: LD_VAR 0 1
28070: PPUSH
28071: CALL_OW 316
28075: PUSH
28076: LD_VAR 0 1
28080: PPUSH
28081: CALL_OW 314
28085: OR
28086: PUSH
28087: LD_VAR 0 1
28091: PPUSH
28092: CALL_OW 302
28096: NOT
28097: OR
28098: PUSH
28099: LD_VAR 0 1
28103: PPUSH
28104: CALL_OW 301
28108: OR
28109: IFFALSE 28059
// RemoveSeeing ( _x , _y , side ) ;
28111: LD_VAR 0 8
28115: PPUSH
28116: LD_VAR 0 9
28120: PPUSH
28121: LD_VAR 0 6
28125: PPUSH
28126: CALL_OW 331
// end ; end_of_file
28130: LD_VAR 0 4
28134: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28135: LD_INT 0
28137: PPUSH
28138: PPUSH
// if exist_mode then
28139: LD_VAR 0 2
28143: IFFALSE 28168
// unit := CreateCharacter ( prefix & ident ) else
28145: LD_ADDR_VAR 0 5
28149: PUSH
28150: LD_VAR 0 3
28154: PUSH
28155: LD_VAR 0 1
28159: STR
28160: PPUSH
28161: CALL_OW 34
28165: ST_TO_ADDR
28166: GO 28183
// unit := NewCharacter ( ident ) ;
28168: LD_ADDR_VAR 0 5
28172: PUSH
28173: LD_VAR 0 1
28177: PPUSH
28178: CALL_OW 25
28182: ST_TO_ADDR
// result := unit ;
28183: LD_ADDR_VAR 0 4
28187: PUSH
28188: LD_VAR 0 5
28192: ST_TO_ADDR
// end ;
28193: LD_VAR 0 4
28197: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28198: LD_INT 0
28200: PPUSH
28201: PPUSH
// if not side or not nation then
28202: LD_VAR 0 1
28206: NOT
28207: PUSH
28208: LD_VAR 0 2
28212: NOT
28213: OR
28214: IFFALSE 28218
// exit ;
28216: GO 28986
// case nation of nation_american :
28218: LD_VAR 0 2
28222: PUSH
28223: LD_INT 1
28225: DOUBLE
28226: EQUAL
28227: IFTRUE 28231
28229: GO 28445
28231: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28232: LD_ADDR_VAR 0 4
28236: PUSH
28237: LD_INT 35
28239: PUSH
28240: LD_INT 45
28242: PUSH
28243: LD_INT 46
28245: PUSH
28246: LD_INT 47
28248: PUSH
28249: LD_INT 82
28251: PUSH
28252: LD_INT 83
28254: PUSH
28255: LD_INT 84
28257: PUSH
28258: LD_INT 85
28260: PUSH
28261: LD_INT 86
28263: PUSH
28264: LD_INT 1
28266: PUSH
28267: LD_INT 2
28269: PUSH
28270: LD_INT 6
28272: PUSH
28273: LD_INT 15
28275: PUSH
28276: LD_INT 16
28278: PUSH
28279: LD_INT 7
28281: PUSH
28282: LD_INT 12
28284: PUSH
28285: LD_INT 13
28287: PUSH
28288: LD_INT 10
28290: PUSH
28291: LD_INT 14
28293: PUSH
28294: LD_INT 20
28296: PUSH
28297: LD_INT 21
28299: PUSH
28300: LD_INT 22
28302: PUSH
28303: LD_INT 25
28305: PUSH
28306: LD_INT 32
28308: PUSH
28309: LD_INT 27
28311: PUSH
28312: LD_INT 36
28314: PUSH
28315: LD_INT 69
28317: PUSH
28318: LD_INT 39
28320: PUSH
28321: LD_INT 34
28323: PUSH
28324: LD_INT 40
28326: PUSH
28327: LD_INT 48
28329: PUSH
28330: LD_INT 49
28332: PUSH
28333: LD_INT 50
28335: PUSH
28336: LD_INT 51
28338: PUSH
28339: LD_INT 52
28341: PUSH
28342: LD_INT 53
28344: PUSH
28345: LD_INT 54
28347: PUSH
28348: LD_INT 55
28350: PUSH
28351: LD_INT 56
28353: PUSH
28354: LD_INT 57
28356: PUSH
28357: LD_INT 58
28359: PUSH
28360: LD_INT 59
28362: PUSH
28363: LD_INT 60
28365: PUSH
28366: LD_INT 61
28368: PUSH
28369: LD_INT 62
28371: PUSH
28372: LD_INT 80
28374: PUSH
28375: LD_INT 82
28377: PUSH
28378: LD_INT 83
28380: PUSH
28381: LD_INT 84
28383: PUSH
28384: LD_INT 85
28386: PUSH
28387: LD_INT 86
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: ST_TO_ADDR
28443: GO 28910
28445: LD_INT 2
28447: DOUBLE
28448: EQUAL
28449: IFTRUE 28453
28451: GO 28679
28453: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: LD_INT 35
28461: PUSH
28462: LD_INT 45
28464: PUSH
28465: LD_INT 46
28467: PUSH
28468: LD_INT 47
28470: PUSH
28471: LD_INT 82
28473: PUSH
28474: LD_INT 83
28476: PUSH
28477: LD_INT 84
28479: PUSH
28480: LD_INT 85
28482: PUSH
28483: LD_INT 87
28485: PUSH
28486: LD_INT 70
28488: PUSH
28489: LD_INT 1
28491: PUSH
28492: LD_INT 11
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 4
28500: PUSH
28501: LD_INT 5
28503: PUSH
28504: LD_INT 6
28506: PUSH
28507: LD_INT 15
28509: PUSH
28510: LD_INT 18
28512: PUSH
28513: LD_INT 7
28515: PUSH
28516: LD_INT 17
28518: PUSH
28519: LD_INT 8
28521: PUSH
28522: LD_INT 20
28524: PUSH
28525: LD_INT 21
28527: PUSH
28528: LD_INT 22
28530: PUSH
28531: LD_INT 72
28533: PUSH
28534: LD_INT 26
28536: PUSH
28537: LD_INT 69
28539: PUSH
28540: LD_INT 39
28542: PUSH
28543: LD_INT 40
28545: PUSH
28546: LD_INT 41
28548: PUSH
28549: LD_INT 42
28551: PUSH
28552: LD_INT 43
28554: PUSH
28555: LD_INT 48
28557: PUSH
28558: LD_INT 49
28560: PUSH
28561: LD_INT 50
28563: PUSH
28564: LD_INT 51
28566: PUSH
28567: LD_INT 52
28569: PUSH
28570: LD_INT 53
28572: PUSH
28573: LD_INT 54
28575: PUSH
28576: LD_INT 55
28578: PUSH
28579: LD_INT 56
28581: PUSH
28582: LD_INT 60
28584: PUSH
28585: LD_INT 61
28587: PUSH
28588: LD_INT 62
28590: PUSH
28591: LD_INT 66
28593: PUSH
28594: LD_INT 67
28596: PUSH
28597: LD_INT 68
28599: PUSH
28600: LD_INT 81
28602: PUSH
28603: LD_INT 82
28605: PUSH
28606: LD_INT 83
28608: PUSH
28609: LD_INT 84
28611: PUSH
28612: LD_INT 85
28614: PUSH
28615: LD_INT 87
28617: PUSH
28618: LD_INT 88
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: LIST
28673: LIST
28674: LIST
28675: LIST
28676: ST_TO_ADDR
28677: GO 28910
28679: LD_INT 3
28681: DOUBLE
28682: EQUAL
28683: IFTRUE 28687
28685: GO 28909
28687: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28688: LD_ADDR_VAR 0 4
28692: PUSH
28693: LD_INT 46
28695: PUSH
28696: LD_INT 47
28698: PUSH
28699: LD_INT 1
28701: PUSH
28702: LD_INT 2
28704: PUSH
28705: LD_INT 82
28707: PUSH
28708: LD_INT 83
28710: PUSH
28711: LD_INT 84
28713: PUSH
28714: LD_INT 85
28716: PUSH
28717: LD_INT 86
28719: PUSH
28720: LD_INT 11
28722: PUSH
28723: LD_INT 9
28725: PUSH
28726: LD_INT 20
28728: PUSH
28729: LD_INT 19
28731: PUSH
28732: LD_INT 21
28734: PUSH
28735: LD_INT 24
28737: PUSH
28738: LD_INT 22
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 28
28746: PUSH
28747: LD_INT 29
28749: PUSH
28750: LD_INT 30
28752: PUSH
28753: LD_INT 31
28755: PUSH
28756: LD_INT 37
28758: PUSH
28759: LD_INT 38
28761: PUSH
28762: LD_INT 32
28764: PUSH
28765: LD_INT 27
28767: PUSH
28768: LD_INT 33
28770: PUSH
28771: LD_INT 69
28773: PUSH
28774: LD_INT 39
28776: PUSH
28777: LD_INT 34
28779: PUSH
28780: LD_INT 40
28782: PUSH
28783: LD_INT 71
28785: PUSH
28786: LD_INT 23
28788: PUSH
28789: LD_INT 44
28791: PUSH
28792: LD_INT 48
28794: PUSH
28795: LD_INT 49
28797: PUSH
28798: LD_INT 50
28800: PUSH
28801: LD_INT 51
28803: PUSH
28804: LD_INT 52
28806: PUSH
28807: LD_INT 53
28809: PUSH
28810: LD_INT 54
28812: PUSH
28813: LD_INT 55
28815: PUSH
28816: LD_INT 56
28818: PUSH
28819: LD_INT 57
28821: PUSH
28822: LD_INT 58
28824: PUSH
28825: LD_INT 59
28827: PUSH
28828: LD_INT 63
28830: PUSH
28831: LD_INT 64
28833: PUSH
28834: LD_INT 65
28836: PUSH
28837: LD_INT 82
28839: PUSH
28840: LD_INT 83
28842: PUSH
28843: LD_INT 84
28845: PUSH
28846: LD_INT 85
28848: PUSH
28849: LD_INT 86
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
28907: GO 28910
28909: POP
// if state > - 1 and state < 3 then
28910: LD_VAR 0 3
28914: PUSH
28915: LD_INT 1
28917: NEG
28918: GREATER
28919: PUSH
28920: LD_VAR 0 3
28924: PUSH
28925: LD_INT 3
28927: LESS
28928: AND
28929: IFFALSE 28986
// for i in result do
28931: LD_ADDR_VAR 0 5
28935: PUSH
28936: LD_VAR 0 4
28940: PUSH
28941: FOR_IN
28942: IFFALSE 28984
// if GetTech ( i , side ) <> state then
28944: LD_VAR 0 5
28948: PPUSH
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 321
28958: PUSH
28959: LD_VAR 0 3
28963: NONEQUAL
28964: IFFALSE 28982
// result := result diff i ;
28966: LD_ADDR_VAR 0 4
28970: PUSH
28971: LD_VAR 0 4
28975: PUSH
28976: LD_VAR 0 5
28980: DIFF
28981: ST_TO_ADDR
28982: GO 28941
28984: POP
28985: POP
// end ;
28986: LD_VAR 0 4
28990: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28991: LD_INT 0
28993: PPUSH
28994: PPUSH
28995: PPUSH
// result := true ;
28996: LD_ADDR_VAR 0 3
29000: PUSH
29001: LD_INT 1
29003: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29004: LD_ADDR_VAR 0 5
29008: PUSH
29009: LD_VAR 0 2
29013: PPUSH
29014: CALL_OW 480
29018: ST_TO_ADDR
// if not tmp then
29019: LD_VAR 0 5
29023: NOT
29024: IFFALSE 29028
// exit ;
29026: GO 29077
// for i in tmp do
29028: LD_ADDR_VAR 0 4
29032: PUSH
29033: LD_VAR 0 5
29037: PUSH
29038: FOR_IN
29039: IFFALSE 29075
// if GetTech ( i , side ) <> state_researched then
29041: LD_VAR 0 4
29045: PPUSH
29046: LD_VAR 0 1
29050: PPUSH
29051: CALL_OW 321
29055: PUSH
29056: LD_INT 2
29058: NONEQUAL
29059: IFFALSE 29073
// begin result := false ;
29061: LD_ADDR_VAR 0 3
29065: PUSH
29066: LD_INT 0
29068: ST_TO_ADDR
// exit ;
29069: POP
29070: POP
29071: GO 29077
// end ;
29073: GO 29038
29075: POP
29076: POP
// end ;
29077: LD_VAR 0 3
29081: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29082: LD_INT 0
29084: PPUSH
29085: PPUSH
29086: PPUSH
29087: PPUSH
29088: PPUSH
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
29093: PPUSH
29094: PPUSH
29095: PPUSH
29096: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29097: LD_VAR 0 1
29101: NOT
29102: PUSH
29103: LD_VAR 0 1
29107: PPUSH
29108: CALL_OW 257
29112: PUSH
29113: LD_INT 9
29115: NONEQUAL
29116: OR
29117: IFFALSE 29121
// exit ;
29119: GO 29694
// side := GetSide ( unit ) ;
29121: LD_ADDR_VAR 0 9
29125: PUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 255
29135: ST_TO_ADDR
// tech_space := tech_spacanom ;
29136: LD_ADDR_VAR 0 12
29140: PUSH
29141: LD_INT 29
29143: ST_TO_ADDR
// tech_time := tech_taurad ;
29144: LD_ADDR_VAR 0 13
29148: PUSH
29149: LD_INT 28
29151: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29152: LD_ADDR_VAR 0 11
29156: PUSH
29157: LD_VAR 0 1
29161: PPUSH
29162: CALL_OW 310
29166: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29167: LD_VAR 0 11
29171: PPUSH
29172: CALL_OW 247
29176: PUSH
29177: LD_INT 2
29179: EQUAL
29180: IFFALSE 29184
// exit ;
29182: GO 29694
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29184: LD_ADDR_VAR 0 8
29188: PUSH
29189: LD_INT 81
29191: PUSH
29192: LD_VAR 0 9
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 3
29203: PUSH
29204: LD_INT 21
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: CALL_OW 69
29226: ST_TO_ADDR
// if not tmp then
29227: LD_VAR 0 8
29231: NOT
29232: IFFALSE 29236
// exit ;
29234: GO 29694
// if in_unit then
29236: LD_VAR 0 11
29240: IFFALSE 29264
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29242: LD_ADDR_VAR 0 10
29246: PUSH
29247: LD_VAR 0 8
29251: PPUSH
29252: LD_VAR 0 11
29256: PPUSH
29257: CALL_OW 74
29261: ST_TO_ADDR
29262: GO 29284
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29264: LD_ADDR_VAR 0 10
29268: PUSH
29269: LD_VAR 0 8
29273: PPUSH
29274: LD_VAR 0 1
29278: PPUSH
29279: CALL_OW 74
29283: ST_TO_ADDR
// if not enemy then
29284: LD_VAR 0 10
29288: NOT
29289: IFFALSE 29293
// exit ;
29291: GO 29694
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29293: LD_VAR 0 11
29297: PUSH
29298: LD_VAR 0 11
29302: PPUSH
29303: LD_VAR 0 10
29307: PPUSH
29308: CALL_OW 296
29312: PUSH
29313: LD_INT 13
29315: GREATER
29316: AND
29317: PUSH
29318: LD_VAR 0 1
29322: PPUSH
29323: LD_VAR 0 10
29327: PPUSH
29328: CALL_OW 296
29332: PUSH
29333: LD_INT 12
29335: GREATER
29336: OR
29337: IFFALSE 29341
// exit ;
29339: GO 29694
// missile := [ 1 ] ;
29341: LD_ADDR_VAR 0 14
29345: PUSH
29346: LD_INT 1
29348: PUSH
29349: EMPTY
29350: LIST
29351: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29352: LD_VAR 0 9
29356: PPUSH
29357: LD_VAR 0 12
29361: PPUSH
29362: CALL_OW 325
29366: IFFALSE 29395
// missile := Replace ( missile , missile + 1 , 2 ) ;
29368: LD_ADDR_VAR 0 14
29372: PUSH
29373: LD_VAR 0 14
29377: PPUSH
29378: LD_VAR 0 14
29382: PUSH
29383: LD_INT 1
29385: PLUS
29386: PPUSH
29387: LD_INT 2
29389: PPUSH
29390: CALL_OW 1
29394: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29395: LD_VAR 0 9
29399: PPUSH
29400: LD_VAR 0 13
29404: PPUSH
29405: CALL_OW 325
29409: PUSH
29410: LD_VAR 0 10
29414: PPUSH
29415: CALL_OW 255
29419: PPUSH
29420: LD_VAR 0 13
29424: PPUSH
29425: CALL_OW 325
29429: NOT
29430: AND
29431: IFFALSE 29460
// missile := Replace ( missile , missile + 1 , 3 ) ;
29433: LD_ADDR_VAR 0 14
29437: PUSH
29438: LD_VAR 0 14
29442: PPUSH
29443: LD_VAR 0 14
29447: PUSH
29448: LD_INT 1
29450: PLUS
29451: PPUSH
29452: LD_INT 3
29454: PPUSH
29455: CALL_OW 1
29459: ST_TO_ADDR
// if missile < 2 then
29460: LD_VAR 0 14
29464: PUSH
29465: LD_INT 2
29467: LESS
29468: IFFALSE 29472
// exit ;
29470: GO 29694
// x := GetX ( enemy ) ;
29472: LD_ADDR_VAR 0 4
29476: PUSH
29477: LD_VAR 0 10
29481: PPUSH
29482: CALL_OW 250
29486: ST_TO_ADDR
// y := GetY ( enemy ) ;
29487: LD_ADDR_VAR 0 5
29491: PUSH
29492: LD_VAR 0 10
29496: PPUSH
29497: CALL_OW 251
29501: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29502: LD_ADDR_VAR 0 6
29506: PUSH
29507: LD_VAR 0 4
29511: PUSH
29512: LD_INT 1
29514: NEG
29515: PPUSH
29516: LD_INT 1
29518: PPUSH
29519: CALL_OW 12
29523: PLUS
29524: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29525: LD_ADDR_VAR 0 7
29529: PUSH
29530: LD_VAR 0 5
29534: PUSH
29535: LD_INT 1
29537: NEG
29538: PPUSH
29539: LD_INT 1
29541: PPUSH
29542: CALL_OW 12
29546: PLUS
29547: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29548: LD_VAR 0 6
29552: PPUSH
29553: LD_VAR 0 7
29557: PPUSH
29558: CALL_OW 488
29562: NOT
29563: IFFALSE 29585
// begin _x := x ;
29565: LD_ADDR_VAR 0 6
29569: PUSH
29570: LD_VAR 0 4
29574: ST_TO_ADDR
// _y := y ;
29575: LD_ADDR_VAR 0 7
29579: PUSH
29580: LD_VAR 0 5
29584: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29585: LD_ADDR_VAR 0 3
29589: PUSH
29590: LD_INT 1
29592: PPUSH
29593: LD_VAR 0 14
29597: PPUSH
29598: CALL_OW 12
29602: ST_TO_ADDR
// case i of 1 :
29603: LD_VAR 0 3
29607: PUSH
29608: LD_INT 1
29610: DOUBLE
29611: EQUAL
29612: IFTRUE 29616
29614: GO 29633
29616: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29617: LD_VAR 0 1
29621: PPUSH
29622: LD_VAR 0 10
29626: PPUSH
29627: CALL_OW 115
29631: GO 29694
29633: LD_INT 2
29635: DOUBLE
29636: EQUAL
29637: IFTRUE 29641
29639: GO 29663
29641: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29642: LD_VAR 0 1
29646: PPUSH
29647: LD_VAR 0 6
29651: PPUSH
29652: LD_VAR 0 7
29656: PPUSH
29657: CALL_OW 153
29661: GO 29694
29663: LD_INT 3
29665: DOUBLE
29666: EQUAL
29667: IFTRUE 29671
29669: GO 29693
29671: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29672: LD_VAR 0 1
29676: PPUSH
29677: LD_VAR 0 6
29681: PPUSH
29682: LD_VAR 0 7
29686: PPUSH
29687: CALL_OW 154
29691: GO 29694
29693: POP
// end ;
29694: LD_VAR 0 2
29698: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29699: LD_INT 0
29701: PPUSH
29702: PPUSH
29703: PPUSH
29704: PPUSH
29705: PPUSH
29706: PPUSH
// if not unit or not building then
29707: LD_VAR 0 1
29711: NOT
29712: PUSH
29713: LD_VAR 0 2
29717: NOT
29718: OR
29719: IFFALSE 29723
// exit ;
29721: GO 29881
// x := GetX ( building ) ;
29723: LD_ADDR_VAR 0 5
29727: PUSH
29728: LD_VAR 0 2
29732: PPUSH
29733: CALL_OW 250
29737: ST_TO_ADDR
// y := GetY ( building ) ;
29738: LD_ADDR_VAR 0 6
29742: PUSH
29743: LD_VAR 0 2
29747: PPUSH
29748: CALL_OW 251
29752: ST_TO_ADDR
// for i = 0 to 5 do
29753: LD_ADDR_VAR 0 4
29757: PUSH
29758: DOUBLE
29759: LD_INT 0
29761: DEC
29762: ST_TO_ADDR
29763: LD_INT 5
29765: PUSH
29766: FOR_TO
29767: IFFALSE 29879
// begin _x := ShiftX ( x , i , 3 ) ;
29769: LD_ADDR_VAR 0 7
29773: PUSH
29774: LD_VAR 0 5
29778: PPUSH
29779: LD_VAR 0 4
29783: PPUSH
29784: LD_INT 3
29786: PPUSH
29787: CALL_OW 272
29791: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29792: LD_ADDR_VAR 0 8
29796: PUSH
29797: LD_VAR 0 6
29801: PPUSH
29802: LD_VAR 0 4
29806: PPUSH
29807: LD_INT 3
29809: PPUSH
29810: CALL_OW 273
29814: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29815: LD_VAR 0 7
29819: PPUSH
29820: LD_VAR 0 8
29824: PPUSH
29825: CALL_OW 488
29829: NOT
29830: IFFALSE 29834
// continue ;
29832: GO 29766
// if HexInfo ( _x , _y ) = 0 then
29834: LD_VAR 0 7
29838: PPUSH
29839: LD_VAR 0 8
29843: PPUSH
29844: CALL_OW 428
29848: PUSH
29849: LD_INT 0
29851: EQUAL
29852: IFFALSE 29877
// begin ComMoveXY ( unit , _x , _y ) ;
29854: LD_VAR 0 1
29858: PPUSH
29859: LD_VAR 0 7
29863: PPUSH
29864: LD_VAR 0 8
29868: PPUSH
29869: CALL_OW 111
// exit ;
29873: POP
29874: POP
29875: GO 29881
// end ; end ;
29877: GO 29766
29879: POP
29880: POP
// end ;
29881: LD_VAR 0 3
29885: RET
// export function ScanBase ( side , base_area ) ; begin
29886: LD_INT 0
29888: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_VAR 0 2
29898: PPUSH
29899: LD_INT 81
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: PPUSH
29911: CALL_OW 70
29915: ST_TO_ADDR
// end ;
29916: LD_VAR 0 3
29920: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29921: LD_INT 0
29923: PPUSH
29924: PPUSH
29925: PPUSH
29926: PPUSH
// result := false ;
29927: LD_ADDR_VAR 0 2
29931: PUSH
29932: LD_INT 0
29934: ST_TO_ADDR
// side := GetSide ( unit ) ;
29935: LD_ADDR_VAR 0 3
29939: PUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: CALL_OW 255
29949: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29950: LD_ADDR_VAR 0 4
29954: PUSH
29955: LD_VAR 0 1
29959: PPUSH
29960: CALL_OW 248
29964: ST_TO_ADDR
// case nat of 1 :
29965: LD_VAR 0 4
29969: PUSH
29970: LD_INT 1
29972: DOUBLE
29973: EQUAL
29974: IFTRUE 29978
29976: GO 29989
29978: POP
// tech := tech_lassight ; 2 :
29979: LD_ADDR_VAR 0 5
29983: PUSH
29984: LD_INT 12
29986: ST_TO_ADDR
29987: GO 30028
29989: LD_INT 2
29991: DOUBLE
29992: EQUAL
29993: IFTRUE 29997
29995: GO 30008
29997: POP
// tech := tech_mortar ; 3 :
29998: LD_ADDR_VAR 0 5
30002: PUSH
30003: LD_INT 41
30005: ST_TO_ADDR
30006: GO 30028
30008: LD_INT 3
30010: DOUBLE
30011: EQUAL
30012: IFTRUE 30016
30014: GO 30027
30016: POP
// tech := tech_bazooka ; end ;
30017: LD_ADDR_VAR 0 5
30021: PUSH
30022: LD_INT 44
30024: ST_TO_ADDR
30025: GO 30028
30027: POP
// if Researched ( side , tech ) then
30028: LD_VAR 0 3
30032: PPUSH
30033: LD_VAR 0 5
30037: PPUSH
30038: CALL_OW 325
30042: IFFALSE 30069
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30044: LD_ADDR_VAR 0 2
30048: PUSH
30049: LD_INT 5
30051: PUSH
30052: LD_INT 8
30054: PUSH
30055: LD_INT 9
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: LIST
30062: PUSH
30063: LD_VAR 0 4
30067: ARRAY
30068: ST_TO_ADDR
// end ;
30069: LD_VAR 0 2
30073: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30074: LD_INT 0
30076: PPUSH
30077: PPUSH
30078: PPUSH
// if not mines then
30079: LD_VAR 0 2
30083: NOT
30084: IFFALSE 30088
// exit ;
30086: GO 30232
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30088: LD_ADDR_VAR 0 5
30092: PUSH
30093: LD_INT 81
30095: PUSH
30096: LD_VAR 0 1
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 3
30107: PUSH
30108: LD_INT 21
30110: PUSH
30111: LD_INT 3
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PPUSH
30126: CALL_OW 69
30130: ST_TO_ADDR
// for i in mines do
30131: LD_ADDR_VAR 0 4
30135: PUSH
30136: LD_VAR 0 2
30140: PUSH
30141: FOR_IN
30142: IFFALSE 30230
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30144: LD_VAR 0 4
30148: PUSH
30149: LD_INT 1
30151: ARRAY
30152: PPUSH
30153: LD_VAR 0 4
30157: PUSH
30158: LD_INT 2
30160: ARRAY
30161: PPUSH
30162: CALL_OW 458
30166: NOT
30167: IFFALSE 30171
// continue ;
30169: GO 30141
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30171: LD_VAR 0 4
30175: PUSH
30176: LD_INT 1
30178: ARRAY
30179: PPUSH
30180: LD_VAR 0 4
30184: PUSH
30185: LD_INT 2
30187: ARRAY
30188: PPUSH
30189: CALL_OW 428
30193: PUSH
30194: LD_VAR 0 5
30198: IN
30199: IFFALSE 30228
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30201: LD_VAR 0 4
30205: PUSH
30206: LD_INT 1
30208: ARRAY
30209: PPUSH
30210: LD_VAR 0 4
30214: PUSH
30215: LD_INT 2
30217: ARRAY
30218: PPUSH
30219: LD_VAR 0 1
30223: PPUSH
30224: CALL_OW 456
// end ;
30228: GO 30141
30230: POP
30231: POP
// end ;
30232: LD_VAR 0 3
30236: RET
// export function Count ( array ) ; begin
30237: LD_INT 0
30239: PPUSH
// result := array + 0 ;
30240: LD_ADDR_VAR 0 2
30244: PUSH
30245: LD_VAR 0 1
30249: PUSH
30250: LD_INT 0
30252: PLUS
30253: ST_TO_ADDR
// end ;
30254: LD_VAR 0 2
30258: RET
// export function IsEmpty ( building ) ; begin
30259: LD_INT 0
30261: PPUSH
// if not building then
30262: LD_VAR 0 1
30266: NOT
30267: IFFALSE 30271
// exit ;
30269: GO 30314
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30271: LD_ADDR_VAR 0 2
30275: PUSH
30276: LD_VAR 0 1
30280: PUSH
30281: LD_INT 22
30283: PUSH
30284: LD_VAR 0 1
30288: PPUSH
30289: CALL_OW 255
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 58
30300: PUSH
30301: EMPTY
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PPUSH
30308: CALL_OW 69
30312: IN
30313: ST_TO_ADDR
// end ;
30314: LD_VAR 0 2
30318: RET
// export function IsNotFull ( building ) ; var places ; begin
30319: LD_INT 0
30321: PPUSH
30322: PPUSH
// if not building then
30323: LD_VAR 0 1
30327: NOT
30328: IFFALSE 30332
// exit ;
30330: GO 30360
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30332: LD_ADDR_VAR 0 2
30336: PUSH
30337: LD_VAR 0 1
30341: PPUSH
30342: LD_INT 3
30344: PUSH
30345: LD_INT 62
30347: PUSH
30348: EMPTY
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PPUSH
30355: CALL_OW 72
30359: ST_TO_ADDR
// end ;
30360: LD_VAR 0 2
30364: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30365: LD_INT 0
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
// tmp := [ ] ;
30371: LD_ADDR_VAR 0 3
30375: PUSH
30376: EMPTY
30377: ST_TO_ADDR
// list := [ ] ;
30378: LD_ADDR_VAR 0 5
30382: PUSH
30383: EMPTY
30384: ST_TO_ADDR
// for i = 16 to 25 do
30385: LD_ADDR_VAR 0 4
30389: PUSH
30390: DOUBLE
30391: LD_INT 16
30393: DEC
30394: ST_TO_ADDR
30395: LD_INT 25
30397: PUSH
30398: FOR_TO
30399: IFFALSE 30472
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30401: LD_ADDR_VAR 0 3
30405: PUSH
30406: LD_VAR 0 3
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_VAR 0 1
30418: PPUSH
30419: CALL_OW 255
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 91
30430: PUSH
30431: LD_VAR 0 1
30435: PUSH
30436: LD_INT 6
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 30
30446: PUSH
30447: LD_VAR 0 4
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: LIST
30460: PUSH
30461: EMPTY
30462: LIST
30463: PPUSH
30464: CALL_OW 69
30468: ADD
30469: ST_TO_ADDR
30470: GO 30398
30472: POP
30473: POP
// for i = 1 to tmp do
30474: LD_ADDR_VAR 0 4
30478: PUSH
30479: DOUBLE
30480: LD_INT 1
30482: DEC
30483: ST_TO_ADDR
30484: LD_VAR 0 3
30488: PUSH
30489: FOR_TO
30490: IFFALSE 30578
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30492: LD_ADDR_VAR 0 5
30496: PUSH
30497: LD_VAR 0 5
30501: PUSH
30502: LD_VAR 0 3
30506: PUSH
30507: LD_VAR 0 4
30511: ARRAY
30512: PPUSH
30513: CALL_OW 266
30517: PUSH
30518: LD_VAR 0 3
30522: PUSH
30523: LD_VAR 0 4
30527: ARRAY
30528: PPUSH
30529: CALL_OW 250
30533: PUSH
30534: LD_VAR 0 3
30538: PUSH
30539: LD_VAR 0 4
30543: ARRAY
30544: PPUSH
30545: CALL_OW 251
30549: PUSH
30550: LD_VAR 0 3
30554: PUSH
30555: LD_VAR 0 4
30559: ARRAY
30560: PPUSH
30561: CALL_OW 254
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: PUSH
30572: EMPTY
30573: LIST
30574: ADD
30575: ST_TO_ADDR
30576: GO 30489
30578: POP
30579: POP
// result := list ;
30580: LD_ADDR_VAR 0 2
30584: PUSH
30585: LD_VAR 0 5
30589: ST_TO_ADDR
// end ;
30590: LD_VAR 0 2
30594: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30595: LD_INT 0
30597: PPUSH
30598: PPUSH
30599: PPUSH
30600: PPUSH
30601: PPUSH
30602: PPUSH
30603: PPUSH
// if not factory then
30604: LD_VAR 0 1
30608: NOT
30609: IFFALSE 30613
// exit ;
30611: GO 31206
// if control = control_apeman then
30613: LD_VAR 0 4
30617: PUSH
30618: LD_INT 5
30620: EQUAL
30621: IFFALSE 30730
// begin tmp := UnitsInside ( factory ) ;
30623: LD_ADDR_VAR 0 8
30627: PUSH
30628: LD_VAR 0 1
30632: PPUSH
30633: CALL_OW 313
30637: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30638: LD_VAR 0 8
30642: PPUSH
30643: LD_INT 25
30645: PUSH
30646: LD_INT 12
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PPUSH
30653: CALL_OW 72
30657: NOT
30658: IFFALSE 30668
// control := control_manual ;
30660: LD_ADDR_VAR 0 4
30664: PUSH
30665: LD_INT 1
30667: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30668: LD_ADDR_VAR 0 8
30672: PUSH
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL 30365 0 1
30682: ST_TO_ADDR
// if tmp then
30683: LD_VAR 0 8
30687: IFFALSE 30730
// begin for i in tmp do
30689: LD_ADDR_VAR 0 7
30693: PUSH
30694: LD_VAR 0 8
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30728
// if i [ 1 ] = b_ext_radio then
30702: LD_VAR 0 7
30706: PUSH
30707: LD_INT 1
30709: ARRAY
30710: PUSH
30711: LD_INT 22
30713: EQUAL
30714: IFFALSE 30726
// begin control := control_remote ;
30716: LD_ADDR_VAR 0 4
30720: PUSH
30721: LD_INT 2
30723: ST_TO_ADDR
// break ;
30724: GO 30728
// end ;
30726: GO 30699
30728: POP
30729: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30730: LD_VAR 0 1
30734: PPUSH
30735: LD_VAR 0 2
30739: PPUSH
30740: LD_VAR 0 3
30744: PPUSH
30745: LD_VAR 0 4
30749: PPUSH
30750: LD_VAR 0 5
30754: PPUSH
30755: CALL_OW 448
30759: IFFALSE 30794
// begin result := [ chassis , engine , control , weapon ] ;
30761: LD_ADDR_VAR 0 6
30765: PUSH
30766: LD_VAR 0 2
30770: PUSH
30771: LD_VAR 0 3
30775: PUSH
30776: LD_VAR 0 4
30780: PUSH
30781: LD_VAR 0 5
30785: PUSH
30786: EMPTY
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: ST_TO_ADDR
// exit ;
30792: GO 31206
// end ; _chassis := AvailableChassisList ( factory ) ;
30794: LD_ADDR_VAR 0 9
30798: PUSH
30799: LD_VAR 0 1
30803: PPUSH
30804: CALL_OW 475
30808: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30809: LD_ADDR_VAR 0 11
30813: PUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: CALL_OW 476
30823: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30824: LD_ADDR_VAR 0 12
30828: PUSH
30829: LD_VAR 0 1
30833: PPUSH
30834: CALL_OW 477
30838: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30839: LD_ADDR_VAR 0 10
30843: PUSH
30844: LD_VAR 0 1
30848: PPUSH
30849: CALL_OW 478
30853: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30854: LD_VAR 0 9
30858: NOT
30859: PUSH
30860: LD_VAR 0 11
30864: NOT
30865: OR
30866: PUSH
30867: LD_VAR 0 12
30871: NOT
30872: OR
30873: PUSH
30874: LD_VAR 0 10
30878: NOT
30879: OR
30880: IFFALSE 30915
// begin result := [ chassis , engine , control , weapon ] ;
30882: LD_ADDR_VAR 0 6
30886: PUSH
30887: LD_VAR 0 2
30891: PUSH
30892: LD_VAR 0 3
30896: PUSH
30897: LD_VAR 0 4
30901: PUSH
30902: LD_VAR 0 5
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: ST_TO_ADDR
// exit ;
30913: GO 31206
// end ; if not chassis in _chassis then
30915: LD_VAR 0 2
30919: PUSH
30920: LD_VAR 0 9
30924: IN
30925: NOT
30926: IFFALSE 30952
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30928: LD_ADDR_VAR 0 2
30932: PUSH
30933: LD_VAR 0 9
30937: PUSH
30938: LD_INT 1
30940: PPUSH
30941: LD_VAR 0 9
30945: PPUSH
30946: CALL_OW 12
30950: ARRAY
30951: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30952: LD_VAR 0 2
30956: PPUSH
30957: LD_VAR 0 3
30961: PPUSH
30962: CALL 31211 0 2
30966: NOT
30967: IFFALSE 31026
// repeat engine := _engine [ 1 ] ;
30969: LD_ADDR_VAR 0 3
30973: PUSH
30974: LD_VAR 0 11
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30983: LD_ADDR_VAR 0 11
30987: PUSH
30988: LD_VAR 0 11
30992: PPUSH
30993: LD_INT 1
30995: PPUSH
30996: CALL_OW 3
31000: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31001: LD_VAR 0 2
31005: PPUSH
31006: LD_VAR 0 3
31010: PPUSH
31011: CALL 31211 0 2
31015: PUSH
31016: LD_VAR 0 11
31020: PUSH
31021: EMPTY
31022: EQUAL
31023: OR
31024: IFFALSE 30969
// if not control in _control then
31026: LD_VAR 0 4
31030: PUSH
31031: LD_VAR 0 12
31035: IN
31036: NOT
31037: IFFALSE 31063
// control := _control [ rand ( 1 , _control ) ] ;
31039: LD_ADDR_VAR 0 4
31043: PUSH
31044: LD_VAR 0 12
31048: PUSH
31049: LD_INT 1
31051: PPUSH
31052: LD_VAR 0 12
31056: PPUSH
31057: CALL_OW 12
31061: ARRAY
31062: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31063: LD_VAR 0 2
31067: PPUSH
31068: LD_VAR 0 5
31072: PPUSH
31073: CALL 31431 0 2
31077: NOT
31078: IFFALSE 31137
// repeat weapon := _weapon [ 1 ] ;
31080: LD_ADDR_VAR 0 5
31084: PUSH
31085: LD_VAR 0 10
31089: PUSH
31090: LD_INT 1
31092: ARRAY
31093: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31094: LD_ADDR_VAR 0 10
31098: PUSH
31099: LD_VAR 0 10
31103: PPUSH
31104: LD_INT 1
31106: PPUSH
31107: CALL_OW 3
31111: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31112: LD_VAR 0 2
31116: PPUSH
31117: LD_VAR 0 5
31121: PPUSH
31122: CALL 31431 0 2
31126: PUSH
31127: LD_VAR 0 10
31131: PUSH
31132: EMPTY
31133: EQUAL
31134: OR
31135: IFFALSE 31080
// result := [ ] ;
31137: LD_ADDR_VAR 0 6
31141: PUSH
31142: EMPTY
31143: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31144: LD_VAR 0 1
31148: PPUSH
31149: LD_VAR 0 2
31153: PPUSH
31154: LD_VAR 0 3
31158: PPUSH
31159: LD_VAR 0 4
31163: PPUSH
31164: LD_VAR 0 5
31168: PPUSH
31169: CALL_OW 448
31173: IFFALSE 31206
// result := [ chassis , engine , control , weapon ] ;
31175: LD_ADDR_VAR 0 6
31179: PUSH
31180: LD_VAR 0 2
31184: PUSH
31185: LD_VAR 0 3
31189: PUSH
31190: LD_VAR 0 4
31194: PUSH
31195: LD_VAR 0 5
31199: PUSH
31200: EMPTY
31201: LIST
31202: LIST
31203: LIST
31204: LIST
31205: ST_TO_ADDR
// end ;
31206: LD_VAR 0 6
31210: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31211: LD_INT 0
31213: PPUSH
// if not chassis or not engine then
31214: LD_VAR 0 1
31218: NOT
31219: PUSH
31220: LD_VAR 0 2
31224: NOT
31225: OR
31226: IFFALSE 31230
// exit ;
31228: GO 31426
// case engine of engine_solar :
31230: LD_VAR 0 2
31234: PUSH
31235: LD_INT 2
31237: DOUBLE
31238: EQUAL
31239: IFTRUE 31243
31241: GO 31281
31243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31244: LD_ADDR_VAR 0 3
31248: PUSH
31249: LD_INT 11
31251: PUSH
31252: LD_INT 12
31254: PUSH
31255: LD_INT 13
31257: PUSH
31258: LD_INT 14
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 2
31266: PUSH
31267: LD_INT 3
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: LIST
31276: LIST
31277: LIST
31278: ST_TO_ADDR
31279: GO 31410
31281: LD_INT 1
31283: DOUBLE
31284: EQUAL
31285: IFTRUE 31289
31287: GO 31351
31289: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31290: LD_ADDR_VAR 0 3
31294: PUSH
31295: LD_INT 11
31297: PUSH
31298: LD_INT 12
31300: PUSH
31301: LD_INT 13
31303: PUSH
31304: LD_INT 14
31306: PUSH
31307: LD_INT 1
31309: PUSH
31310: LD_INT 2
31312: PUSH
31313: LD_INT 3
31315: PUSH
31316: LD_INT 4
31318: PUSH
31319: LD_INT 5
31321: PUSH
31322: LD_INT 21
31324: PUSH
31325: LD_INT 23
31327: PUSH
31328: LD_INT 22
31330: PUSH
31331: LD_INT 24
31333: PUSH
31334: EMPTY
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: ST_TO_ADDR
31349: GO 31410
31351: LD_INT 3
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31409
31359: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31360: LD_ADDR_VAR 0 3
31364: PUSH
31365: LD_INT 13
31367: PUSH
31368: LD_INT 14
31370: PUSH
31371: LD_INT 2
31373: PUSH
31374: LD_INT 3
31376: PUSH
31377: LD_INT 4
31379: PUSH
31380: LD_INT 5
31382: PUSH
31383: LD_INT 21
31385: PUSH
31386: LD_INT 22
31388: PUSH
31389: LD_INT 23
31391: PUSH
31392: LD_INT 24
31394: PUSH
31395: EMPTY
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: ST_TO_ADDR
31407: GO 31410
31409: POP
// result := ( chassis in result ) ;
31410: LD_ADDR_VAR 0 3
31414: PUSH
31415: LD_VAR 0 1
31419: PUSH
31420: LD_VAR 0 3
31424: IN
31425: ST_TO_ADDR
// end ;
31426: LD_VAR 0 3
31430: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31431: LD_INT 0
31433: PPUSH
// if not chassis or not weapon then
31434: LD_VAR 0 1
31438: NOT
31439: PUSH
31440: LD_VAR 0 2
31444: NOT
31445: OR
31446: IFFALSE 31450
// exit ;
31448: GO 32510
// case weapon of us_machine_gun :
31450: LD_VAR 0 2
31454: PUSH
31455: LD_INT 2
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31493
31463: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31464: LD_ADDR_VAR 0 3
31468: PUSH
31469: LD_INT 1
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 3
31477: PUSH
31478: LD_INT 4
31480: PUSH
31481: LD_INT 5
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: ST_TO_ADDR
31491: GO 32494
31493: LD_INT 3
31495: DOUBLE
31496: EQUAL
31497: IFTRUE 31501
31499: GO 31531
31501: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31502: LD_ADDR_VAR 0 3
31506: PUSH
31507: LD_INT 1
31509: PUSH
31510: LD_INT 2
31512: PUSH
31513: LD_INT 3
31515: PUSH
31516: LD_INT 4
31518: PUSH
31519: LD_INT 5
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: ST_TO_ADDR
31529: GO 32494
31531: LD_INT 11
31533: DOUBLE
31534: EQUAL
31535: IFTRUE 31539
31537: GO 31569
31539: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31540: LD_ADDR_VAR 0 3
31544: PUSH
31545: LD_INT 1
31547: PUSH
31548: LD_INT 2
31550: PUSH
31551: LD_INT 3
31553: PUSH
31554: LD_INT 4
31556: PUSH
31557: LD_INT 5
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: ST_TO_ADDR
31567: GO 32494
31569: LD_INT 4
31571: DOUBLE
31572: EQUAL
31573: IFTRUE 31577
31575: GO 31603
31577: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31578: LD_ADDR_VAR 0 3
31582: PUSH
31583: LD_INT 2
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 4
31591: PUSH
31592: LD_INT 5
31594: PUSH
31595: EMPTY
31596: LIST
31597: LIST
31598: LIST
31599: LIST
31600: ST_TO_ADDR
31601: GO 32494
31603: LD_INT 5
31605: DOUBLE
31606: EQUAL
31607: IFTRUE 31611
31609: GO 31637
31611: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31612: LD_ADDR_VAR 0 3
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 3
31622: PUSH
31623: LD_INT 4
31625: PUSH
31626: LD_INT 5
31628: PUSH
31629: EMPTY
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: ST_TO_ADDR
31635: GO 32494
31637: LD_INT 9
31639: DOUBLE
31640: EQUAL
31641: IFTRUE 31645
31643: GO 31671
31645: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31646: LD_ADDR_VAR 0 3
31650: PUSH
31651: LD_INT 2
31653: PUSH
31654: LD_INT 3
31656: PUSH
31657: LD_INT 4
31659: PUSH
31660: LD_INT 5
31662: PUSH
31663: EMPTY
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: ST_TO_ADDR
31669: GO 32494
31671: LD_INT 7
31673: DOUBLE
31674: EQUAL
31675: IFTRUE 31679
31677: GO 31705
31679: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31680: LD_ADDR_VAR 0 3
31684: PUSH
31685: LD_INT 2
31687: PUSH
31688: LD_INT 3
31690: PUSH
31691: LD_INT 4
31693: PUSH
31694: LD_INT 5
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: ST_TO_ADDR
31703: GO 32494
31705: LD_INT 12
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31739
31713: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31714: LD_ADDR_VAR 0 3
31718: PUSH
31719: LD_INT 2
31721: PUSH
31722: LD_INT 3
31724: PUSH
31725: LD_INT 4
31727: PUSH
31728: LD_INT 5
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: LIST
31735: LIST
31736: ST_TO_ADDR
31737: GO 32494
31739: LD_INT 13
31741: DOUBLE
31742: EQUAL
31743: IFTRUE 31747
31745: GO 31773
31747: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31748: LD_ADDR_VAR 0 3
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 3
31758: PUSH
31759: LD_INT 4
31761: PUSH
31762: LD_INT 5
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: ST_TO_ADDR
31771: GO 32494
31773: LD_INT 14
31775: DOUBLE
31776: EQUAL
31777: IFTRUE 31781
31779: GO 31799
31781: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31782: LD_ADDR_VAR 0 3
31786: PUSH
31787: LD_INT 4
31789: PUSH
31790: LD_INT 5
31792: PUSH
31793: EMPTY
31794: LIST
31795: LIST
31796: ST_TO_ADDR
31797: GO 32494
31799: LD_INT 6
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31825
31807: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31808: LD_ADDR_VAR 0 3
31812: PUSH
31813: LD_INT 4
31815: PUSH
31816: LD_INT 5
31818: PUSH
31819: EMPTY
31820: LIST
31821: LIST
31822: ST_TO_ADDR
31823: GO 32494
31825: LD_INT 10
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31851
31833: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31834: LD_ADDR_VAR 0 3
31838: PUSH
31839: LD_INT 4
31841: PUSH
31842: LD_INT 5
31844: PUSH
31845: EMPTY
31846: LIST
31847: LIST
31848: ST_TO_ADDR
31849: GO 32494
31851: LD_INT 22
31853: DOUBLE
31854: EQUAL
31855: IFTRUE 31859
31857: GO 31885
31859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_INT 11
31867: PUSH
31868: LD_INT 12
31870: PUSH
31871: LD_INT 13
31873: PUSH
31874: LD_INT 14
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
31883: GO 32494
31885: LD_INT 23
31887: DOUBLE
31888: EQUAL
31889: IFTRUE 31893
31891: GO 31919
31893: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31894: LD_ADDR_VAR 0 3
31898: PUSH
31899: LD_INT 11
31901: PUSH
31902: LD_INT 12
31904: PUSH
31905: LD_INT 13
31907: PUSH
31908: LD_INT 14
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: ST_TO_ADDR
31917: GO 32494
31919: LD_INT 24
31921: DOUBLE
31922: EQUAL
31923: IFTRUE 31927
31925: GO 31953
31927: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31928: LD_ADDR_VAR 0 3
31932: PUSH
31933: LD_INT 11
31935: PUSH
31936: LD_INT 12
31938: PUSH
31939: LD_INT 13
31941: PUSH
31942: LD_INT 14
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: LIST
31950: ST_TO_ADDR
31951: GO 32494
31953: LD_INT 30
31955: DOUBLE
31956: EQUAL
31957: IFTRUE 31961
31959: GO 31987
31961: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31962: LD_ADDR_VAR 0 3
31966: PUSH
31967: LD_INT 11
31969: PUSH
31970: LD_INT 12
31972: PUSH
31973: LD_INT 13
31975: PUSH
31976: LD_INT 14
31978: PUSH
31979: EMPTY
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: ST_TO_ADDR
31985: GO 32494
31987: LD_INT 25
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32013
31995: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31996: LD_ADDR_VAR 0 3
32000: PUSH
32001: LD_INT 13
32003: PUSH
32004: LD_INT 14
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: ST_TO_ADDR
32011: GO 32494
32013: LD_INT 27
32015: DOUBLE
32016: EQUAL
32017: IFTRUE 32021
32019: GO 32039
32021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32022: LD_ADDR_VAR 0 3
32026: PUSH
32027: LD_INT 13
32029: PUSH
32030: LD_INT 14
32032: PUSH
32033: EMPTY
32034: LIST
32035: LIST
32036: ST_TO_ADDR
32037: GO 32494
32039: LD_INT 92
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32073
32047: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32048: LD_ADDR_VAR 0 3
32052: PUSH
32053: LD_INT 11
32055: PUSH
32056: LD_INT 12
32058: PUSH
32059: LD_INT 13
32061: PUSH
32062: LD_INT 14
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: ST_TO_ADDR
32071: GO 32494
32073: LD_INT 28
32075: DOUBLE
32076: EQUAL
32077: IFTRUE 32081
32079: GO 32099
32081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32082: LD_ADDR_VAR 0 3
32086: PUSH
32087: LD_INT 13
32089: PUSH
32090: LD_INT 14
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: ST_TO_ADDR
32097: GO 32494
32099: LD_INT 29
32101: DOUBLE
32102: EQUAL
32103: IFTRUE 32107
32105: GO 32125
32107: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32108: LD_ADDR_VAR 0 3
32112: PUSH
32113: LD_INT 13
32115: PUSH
32116: LD_INT 14
32118: PUSH
32119: EMPTY
32120: LIST
32121: LIST
32122: ST_TO_ADDR
32123: GO 32494
32125: LD_INT 31
32127: DOUBLE
32128: EQUAL
32129: IFTRUE 32133
32131: GO 32151
32133: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32134: LD_ADDR_VAR 0 3
32138: PUSH
32139: LD_INT 13
32141: PUSH
32142: LD_INT 14
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: ST_TO_ADDR
32149: GO 32494
32151: LD_INT 26
32153: DOUBLE
32154: EQUAL
32155: IFTRUE 32159
32157: GO 32177
32159: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32160: LD_ADDR_VAR 0 3
32164: PUSH
32165: LD_INT 13
32167: PUSH
32168: LD_INT 14
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: ST_TO_ADDR
32175: GO 32494
32177: LD_INT 42
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32211
32185: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32186: LD_ADDR_VAR 0 3
32190: PUSH
32191: LD_INT 21
32193: PUSH
32194: LD_INT 22
32196: PUSH
32197: LD_INT 23
32199: PUSH
32200: LD_INT 24
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: ST_TO_ADDR
32209: GO 32494
32211: LD_INT 43
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32245
32219: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32220: LD_ADDR_VAR 0 3
32224: PUSH
32225: LD_INT 21
32227: PUSH
32228: LD_INT 22
32230: PUSH
32231: LD_INT 23
32233: PUSH
32234: LD_INT 24
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: ST_TO_ADDR
32243: GO 32494
32245: LD_INT 44
32247: DOUBLE
32248: EQUAL
32249: IFTRUE 32253
32251: GO 32279
32253: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32254: LD_ADDR_VAR 0 3
32258: PUSH
32259: LD_INT 21
32261: PUSH
32262: LD_INT 22
32264: PUSH
32265: LD_INT 23
32267: PUSH
32268: LD_INT 24
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: ST_TO_ADDR
32277: GO 32494
32279: LD_INT 45
32281: DOUBLE
32282: EQUAL
32283: IFTRUE 32287
32285: GO 32313
32287: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32288: LD_ADDR_VAR 0 3
32292: PUSH
32293: LD_INT 21
32295: PUSH
32296: LD_INT 22
32298: PUSH
32299: LD_INT 23
32301: PUSH
32302: LD_INT 24
32304: PUSH
32305: EMPTY
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: ST_TO_ADDR
32311: GO 32494
32313: LD_INT 49
32315: DOUBLE
32316: EQUAL
32317: IFTRUE 32321
32319: GO 32347
32321: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32322: LD_ADDR_VAR 0 3
32326: PUSH
32327: LD_INT 21
32329: PUSH
32330: LD_INT 22
32332: PUSH
32333: LD_INT 23
32335: PUSH
32336: LD_INT 24
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: ST_TO_ADDR
32345: GO 32494
32347: LD_INT 51
32349: DOUBLE
32350: EQUAL
32351: IFTRUE 32355
32353: GO 32381
32355: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32356: LD_ADDR_VAR 0 3
32360: PUSH
32361: LD_INT 21
32363: PUSH
32364: LD_INT 22
32366: PUSH
32367: LD_INT 23
32369: PUSH
32370: LD_INT 24
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: ST_TO_ADDR
32379: GO 32494
32381: LD_INT 52
32383: DOUBLE
32384: EQUAL
32385: IFTRUE 32389
32387: GO 32415
32389: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32390: LD_ADDR_VAR 0 3
32394: PUSH
32395: LD_INT 21
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_INT 23
32403: PUSH
32404: LD_INT 24
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
32413: GO 32494
32415: LD_INT 53
32417: DOUBLE
32418: EQUAL
32419: IFTRUE 32423
32421: GO 32441
32423: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32424: LD_ADDR_VAR 0 3
32428: PUSH
32429: LD_INT 23
32431: PUSH
32432: LD_INT 24
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: ST_TO_ADDR
32439: GO 32494
32441: LD_INT 46
32443: DOUBLE
32444: EQUAL
32445: IFTRUE 32449
32447: GO 32467
32449: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32450: LD_ADDR_VAR 0 3
32454: PUSH
32455: LD_INT 23
32457: PUSH
32458: LD_INT 24
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: ST_TO_ADDR
32465: GO 32494
32467: LD_INT 47
32469: DOUBLE
32470: EQUAL
32471: IFTRUE 32475
32473: GO 32493
32475: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32476: LD_ADDR_VAR 0 3
32480: PUSH
32481: LD_INT 23
32483: PUSH
32484: LD_INT 24
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: ST_TO_ADDR
32491: GO 32494
32493: POP
// result := ( chassis in result ) ;
32494: LD_ADDR_VAR 0 3
32498: PUSH
32499: LD_VAR 0 1
32503: PUSH
32504: LD_VAR 0 3
32508: IN
32509: ST_TO_ADDR
// end ;
32510: LD_VAR 0 3
32514: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32515: LD_INT 0
32517: PPUSH
32518: PPUSH
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
32523: PPUSH
// result := array ;
32524: LD_ADDR_VAR 0 5
32528: PUSH
32529: LD_VAR 0 1
32533: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32534: LD_VAR 0 1
32538: NOT
32539: PUSH
32540: LD_VAR 0 2
32544: NOT
32545: OR
32546: PUSH
32547: LD_VAR 0 3
32551: NOT
32552: OR
32553: PUSH
32554: LD_VAR 0 2
32558: PUSH
32559: LD_VAR 0 1
32563: GREATER
32564: OR
32565: PUSH
32566: LD_VAR 0 3
32570: PUSH
32571: LD_VAR 0 1
32575: GREATER
32576: OR
32577: IFFALSE 32581
// exit ;
32579: GO 32877
// if direction then
32581: LD_VAR 0 4
32585: IFFALSE 32649
// begin d := 1 ;
32587: LD_ADDR_VAR 0 9
32591: PUSH
32592: LD_INT 1
32594: ST_TO_ADDR
// if i_from > i_to then
32595: LD_VAR 0 2
32599: PUSH
32600: LD_VAR 0 3
32604: GREATER
32605: IFFALSE 32631
// length := ( array - i_from ) + i_to else
32607: LD_ADDR_VAR 0 11
32611: PUSH
32612: LD_VAR 0 1
32616: PUSH
32617: LD_VAR 0 2
32621: MINUS
32622: PUSH
32623: LD_VAR 0 3
32627: PLUS
32628: ST_TO_ADDR
32629: GO 32647
// length := i_to - i_from ;
32631: LD_ADDR_VAR 0 11
32635: PUSH
32636: LD_VAR 0 3
32640: PUSH
32641: LD_VAR 0 2
32645: MINUS
32646: ST_TO_ADDR
// end else
32647: GO 32710
// begin d := - 1 ;
32649: LD_ADDR_VAR 0 9
32653: PUSH
32654: LD_INT 1
32656: NEG
32657: ST_TO_ADDR
// if i_from > i_to then
32658: LD_VAR 0 2
32662: PUSH
32663: LD_VAR 0 3
32667: GREATER
32668: IFFALSE 32688
// length := i_from - i_to else
32670: LD_ADDR_VAR 0 11
32674: PUSH
32675: LD_VAR 0 2
32679: PUSH
32680: LD_VAR 0 3
32684: MINUS
32685: ST_TO_ADDR
32686: GO 32710
// length := ( array - i_to ) + i_from ;
32688: LD_ADDR_VAR 0 11
32692: PUSH
32693: LD_VAR 0 1
32697: PUSH
32698: LD_VAR 0 3
32702: MINUS
32703: PUSH
32704: LD_VAR 0 2
32708: PLUS
32709: ST_TO_ADDR
// end ; if not length then
32710: LD_VAR 0 11
32714: NOT
32715: IFFALSE 32719
// exit ;
32717: GO 32877
// tmp := array ;
32719: LD_ADDR_VAR 0 10
32723: PUSH
32724: LD_VAR 0 1
32728: ST_TO_ADDR
// for i = 1 to length do
32729: LD_ADDR_VAR 0 6
32733: PUSH
32734: DOUBLE
32735: LD_INT 1
32737: DEC
32738: ST_TO_ADDR
32739: LD_VAR 0 11
32743: PUSH
32744: FOR_TO
32745: IFFALSE 32865
// begin for j = 1 to array do
32747: LD_ADDR_VAR 0 7
32751: PUSH
32752: DOUBLE
32753: LD_INT 1
32755: DEC
32756: ST_TO_ADDR
32757: LD_VAR 0 1
32761: PUSH
32762: FOR_TO
32763: IFFALSE 32851
// begin k := j + d ;
32765: LD_ADDR_VAR 0 8
32769: PUSH
32770: LD_VAR 0 7
32774: PUSH
32775: LD_VAR 0 9
32779: PLUS
32780: ST_TO_ADDR
// if k > array then
32781: LD_VAR 0 8
32785: PUSH
32786: LD_VAR 0 1
32790: GREATER
32791: IFFALSE 32801
// k := 1 ;
32793: LD_ADDR_VAR 0 8
32797: PUSH
32798: LD_INT 1
32800: ST_TO_ADDR
// if not k then
32801: LD_VAR 0 8
32805: NOT
32806: IFFALSE 32818
// k := array ;
32808: LD_ADDR_VAR 0 8
32812: PUSH
32813: LD_VAR 0 1
32817: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32818: LD_ADDR_VAR 0 10
32822: PUSH
32823: LD_VAR 0 10
32827: PPUSH
32828: LD_VAR 0 8
32832: PPUSH
32833: LD_VAR 0 1
32837: PUSH
32838: LD_VAR 0 7
32842: ARRAY
32843: PPUSH
32844: CALL_OW 1
32848: ST_TO_ADDR
// end ;
32849: GO 32762
32851: POP
32852: POP
// array := tmp ;
32853: LD_ADDR_VAR 0 1
32857: PUSH
32858: LD_VAR 0 10
32862: ST_TO_ADDR
// end ;
32863: GO 32744
32865: POP
32866: POP
// result := array ;
32867: LD_ADDR_VAR 0 5
32871: PUSH
32872: LD_VAR 0 1
32876: ST_TO_ADDR
// end ;
32877: LD_VAR 0 5
32881: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32882: LD_INT 0
32884: PPUSH
32885: PPUSH
// result := 0 ;
32886: LD_ADDR_VAR 0 3
32890: PUSH
32891: LD_INT 0
32893: ST_TO_ADDR
// if not array or not value in array then
32894: LD_VAR 0 1
32898: NOT
32899: PUSH
32900: LD_VAR 0 2
32904: PUSH
32905: LD_VAR 0 1
32909: IN
32910: NOT
32911: OR
32912: IFFALSE 32916
// exit ;
32914: GO 32970
// for i = 1 to array do
32916: LD_ADDR_VAR 0 4
32920: PUSH
32921: DOUBLE
32922: LD_INT 1
32924: DEC
32925: ST_TO_ADDR
32926: LD_VAR 0 1
32930: PUSH
32931: FOR_TO
32932: IFFALSE 32968
// if value = array [ i ] then
32934: LD_VAR 0 2
32938: PUSH
32939: LD_VAR 0 1
32943: PUSH
32944: LD_VAR 0 4
32948: ARRAY
32949: EQUAL
32950: IFFALSE 32966
// begin result := i ;
32952: LD_ADDR_VAR 0 3
32956: PUSH
32957: LD_VAR 0 4
32961: ST_TO_ADDR
// exit ;
32962: POP
32963: POP
32964: GO 32970
// end ;
32966: GO 32931
32968: POP
32969: POP
// end ;
32970: LD_VAR 0 3
32974: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32975: LD_INT 0
32977: PPUSH
// vc_chassis := chassis ;
32978: LD_ADDR_OWVAR 37
32982: PUSH
32983: LD_VAR 0 1
32987: ST_TO_ADDR
// vc_engine := engine ;
32988: LD_ADDR_OWVAR 39
32992: PUSH
32993: LD_VAR 0 2
32997: ST_TO_ADDR
// vc_control := control ;
32998: LD_ADDR_OWVAR 38
33002: PUSH
33003: LD_VAR 0 3
33007: ST_TO_ADDR
// vc_weapon := weapon ;
33008: LD_ADDR_OWVAR 40
33012: PUSH
33013: LD_VAR 0 4
33017: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33018: LD_ADDR_OWVAR 41
33022: PUSH
33023: LD_VAR 0 5
33027: ST_TO_ADDR
// end ;
33028: LD_VAR 0 6
33032: RET
// export function WantPlant ( unit ) ; var task ; begin
33033: LD_INT 0
33035: PPUSH
33036: PPUSH
// result := false ;
33037: LD_ADDR_VAR 0 2
33041: PUSH
33042: LD_INT 0
33044: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33045: LD_ADDR_VAR 0 3
33049: PUSH
33050: LD_VAR 0 1
33054: PPUSH
33055: CALL_OW 437
33059: ST_TO_ADDR
// if task then
33060: LD_VAR 0 3
33064: IFFALSE 33092
// if task [ 1 ] [ 1 ] = p then
33066: LD_VAR 0 3
33070: PUSH
33071: LD_INT 1
33073: ARRAY
33074: PUSH
33075: LD_INT 1
33077: ARRAY
33078: PUSH
33079: LD_STRING p
33081: EQUAL
33082: IFFALSE 33092
// result := true ;
33084: LD_ADDR_VAR 0 2
33088: PUSH
33089: LD_INT 1
33091: ST_TO_ADDR
// end ;
33092: LD_VAR 0 2
33096: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33097: LD_INT 0
33099: PPUSH
33100: PPUSH
33101: PPUSH
33102: PPUSH
// if pos < 1 then
33103: LD_VAR 0 2
33107: PUSH
33108: LD_INT 1
33110: LESS
33111: IFFALSE 33115
// exit ;
33113: GO 33418
// if pos = 1 then
33115: LD_VAR 0 2
33119: PUSH
33120: LD_INT 1
33122: EQUAL
33123: IFFALSE 33156
// result := Replace ( arr , pos [ 1 ] , value ) else
33125: LD_ADDR_VAR 0 4
33129: PUSH
33130: LD_VAR 0 1
33134: PPUSH
33135: LD_VAR 0 2
33139: PUSH
33140: LD_INT 1
33142: ARRAY
33143: PPUSH
33144: LD_VAR 0 3
33148: PPUSH
33149: CALL_OW 1
33153: ST_TO_ADDR
33154: GO 33418
// begin tmp := arr ;
33156: LD_ADDR_VAR 0 6
33160: PUSH
33161: LD_VAR 0 1
33165: ST_TO_ADDR
// s_arr := [ tmp ] ;
33166: LD_ADDR_VAR 0 7
33170: PUSH
33171: LD_VAR 0 6
33175: PUSH
33176: EMPTY
33177: LIST
33178: ST_TO_ADDR
// for i = 1 to pos - 1 do
33179: LD_ADDR_VAR 0 5
33183: PUSH
33184: DOUBLE
33185: LD_INT 1
33187: DEC
33188: ST_TO_ADDR
33189: LD_VAR 0 2
33193: PUSH
33194: LD_INT 1
33196: MINUS
33197: PUSH
33198: FOR_TO
33199: IFFALSE 33244
// begin tmp := tmp [ pos [ i ] ] ;
33201: LD_ADDR_VAR 0 6
33205: PUSH
33206: LD_VAR 0 6
33210: PUSH
33211: LD_VAR 0 2
33215: PUSH
33216: LD_VAR 0 5
33220: ARRAY
33221: ARRAY
33222: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33223: LD_ADDR_VAR 0 7
33227: PUSH
33228: LD_VAR 0 7
33232: PUSH
33233: LD_VAR 0 6
33237: PUSH
33238: EMPTY
33239: LIST
33240: ADD
33241: ST_TO_ADDR
// end ;
33242: GO 33198
33244: POP
33245: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33246: LD_ADDR_VAR 0 6
33250: PUSH
33251: LD_VAR 0 6
33255: PPUSH
33256: LD_VAR 0 2
33260: PUSH
33261: LD_VAR 0 2
33265: ARRAY
33266: PPUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: CALL_OW 1
33276: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33277: LD_ADDR_VAR 0 7
33281: PUSH
33282: LD_VAR 0 7
33286: PPUSH
33287: LD_VAR 0 7
33291: PPUSH
33292: LD_VAR 0 6
33296: PPUSH
33297: CALL_OW 1
33301: ST_TO_ADDR
// for i = s_arr downto 2 do
33302: LD_ADDR_VAR 0 5
33306: PUSH
33307: DOUBLE
33308: LD_VAR 0 7
33312: INC
33313: ST_TO_ADDR
33314: LD_INT 2
33316: PUSH
33317: FOR_DOWNTO
33318: IFFALSE 33402
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33320: LD_ADDR_VAR 0 6
33324: PUSH
33325: LD_VAR 0 7
33329: PUSH
33330: LD_VAR 0 5
33334: PUSH
33335: LD_INT 1
33337: MINUS
33338: ARRAY
33339: PPUSH
33340: LD_VAR 0 2
33344: PUSH
33345: LD_VAR 0 5
33349: PUSH
33350: LD_INT 1
33352: MINUS
33353: ARRAY
33354: PPUSH
33355: LD_VAR 0 7
33359: PUSH
33360: LD_VAR 0 5
33364: ARRAY
33365: PPUSH
33366: CALL_OW 1
33370: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33371: LD_ADDR_VAR 0 7
33375: PUSH
33376: LD_VAR 0 7
33380: PPUSH
33381: LD_VAR 0 5
33385: PUSH
33386: LD_INT 1
33388: MINUS
33389: PPUSH
33390: LD_VAR 0 6
33394: PPUSH
33395: CALL_OW 1
33399: ST_TO_ADDR
// end ;
33400: GO 33317
33402: POP
33403: POP
// result := s_arr [ 1 ] ;
33404: LD_ADDR_VAR 0 4
33408: PUSH
33409: LD_VAR 0 7
33413: PUSH
33414: LD_INT 1
33416: ARRAY
33417: ST_TO_ADDR
// end ; end ;
33418: LD_VAR 0 4
33422: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33423: LD_INT 0
33425: PPUSH
33426: PPUSH
// if not list then
33427: LD_VAR 0 1
33431: NOT
33432: IFFALSE 33436
// exit ;
33434: GO 33527
// i := list [ pos1 ] ;
33436: LD_ADDR_VAR 0 5
33440: PUSH
33441: LD_VAR 0 1
33445: PUSH
33446: LD_VAR 0 2
33450: ARRAY
33451: ST_TO_ADDR
// if not i then
33452: LD_VAR 0 5
33456: NOT
33457: IFFALSE 33461
// exit ;
33459: GO 33527
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33461: LD_ADDR_VAR 0 1
33465: PUSH
33466: LD_VAR 0 1
33470: PPUSH
33471: LD_VAR 0 2
33475: PPUSH
33476: LD_VAR 0 1
33480: PUSH
33481: LD_VAR 0 3
33485: ARRAY
33486: PPUSH
33487: CALL_OW 1
33491: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33492: LD_ADDR_VAR 0 1
33496: PUSH
33497: LD_VAR 0 1
33501: PPUSH
33502: LD_VAR 0 3
33506: PPUSH
33507: LD_VAR 0 5
33511: PPUSH
33512: CALL_OW 1
33516: ST_TO_ADDR
// result := list ;
33517: LD_ADDR_VAR 0 4
33521: PUSH
33522: LD_VAR 0 1
33526: ST_TO_ADDR
// end ;
33527: LD_VAR 0 4
33531: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33532: LD_INT 0
33534: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33535: LD_ADDR_VAR 0 5
33539: PUSH
33540: LD_VAR 0 1
33544: PPUSH
33545: CALL_OW 250
33549: PPUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 251
33559: PPUSH
33560: LD_VAR 0 2
33564: PPUSH
33565: LD_VAR 0 3
33569: PPUSH
33570: LD_VAR 0 4
33574: PPUSH
33575: CALL 33953 0 5
33579: ST_TO_ADDR
// end ;
33580: LD_VAR 0 5
33584: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33585: LD_INT 0
33587: PPUSH
33588: PPUSH
33589: PPUSH
33590: PPUSH
// if not list or not unit then
33591: LD_VAR 0 2
33595: NOT
33596: PUSH
33597: LD_VAR 0 1
33601: NOT
33602: OR
33603: IFFALSE 33607
// exit ;
33605: GO 33948
// result := [ ] ;
33607: LD_ADDR_VAR 0 5
33611: PUSH
33612: EMPTY
33613: ST_TO_ADDR
// for i in list do
33614: LD_ADDR_VAR 0 6
33618: PUSH
33619: LD_VAR 0 2
33623: PUSH
33624: FOR_IN
33625: IFFALSE 33843
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33627: LD_ADDR_VAR 0 8
33631: PUSH
33632: LD_VAR 0 1
33636: PPUSH
33637: LD_VAR 0 6
33641: PUSH
33642: LD_INT 1
33644: ARRAY
33645: PPUSH
33646: LD_VAR 0 6
33650: PUSH
33651: LD_INT 2
33653: ARRAY
33654: PPUSH
33655: CALL_OW 297
33659: ST_TO_ADDR
// if not Count ( result ) then
33660: LD_VAR 0 5
33664: PPUSH
33665: CALL 30237 0 1
33669: NOT
33670: IFFALSE 33703
// begin result := Join ( result , [ i , tmp ] ) ;
33672: LD_ADDR_VAR 0 5
33676: PUSH
33677: LD_VAR 0 5
33681: PPUSH
33682: LD_VAR 0 6
33686: PUSH
33687: LD_VAR 0 8
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PPUSH
33696: CALL 65826 0 2
33700: ST_TO_ADDR
// continue ;
33701: GO 33624
// end ; if result [ result ] [ 2 ] <= tmp then
33703: LD_VAR 0 5
33707: PUSH
33708: LD_VAR 0 5
33712: ARRAY
33713: PUSH
33714: LD_INT 2
33716: ARRAY
33717: PUSH
33718: LD_VAR 0 8
33722: LESSEQUAL
33723: IFFALSE 33756
// result := Join ( result , [ i , tmp ] ) else
33725: LD_ADDR_VAR 0 5
33729: PUSH
33730: LD_VAR 0 5
33734: PPUSH
33735: LD_VAR 0 6
33739: PUSH
33740: LD_VAR 0 8
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PPUSH
33749: CALL 65826 0 2
33753: ST_TO_ADDR
33754: GO 33841
// begin for j := 1 to Count ( result ) do
33756: LD_ADDR_VAR 0 7
33760: PUSH
33761: DOUBLE
33762: LD_INT 1
33764: DEC
33765: ST_TO_ADDR
33766: LD_VAR 0 5
33770: PPUSH
33771: CALL 30237 0 1
33775: PUSH
33776: FOR_TO
33777: IFFALSE 33839
// begin if tmp < result [ j ] [ 2 ] then
33779: LD_VAR 0 8
33783: PUSH
33784: LD_VAR 0 5
33788: PUSH
33789: LD_VAR 0 7
33793: ARRAY
33794: PUSH
33795: LD_INT 2
33797: ARRAY
33798: LESS
33799: IFFALSE 33837
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33801: LD_ADDR_VAR 0 5
33805: PUSH
33806: LD_VAR 0 5
33810: PPUSH
33811: LD_VAR 0 7
33815: PPUSH
33816: LD_VAR 0 6
33820: PUSH
33821: LD_VAR 0 8
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PPUSH
33830: CALL_OW 2
33834: ST_TO_ADDR
// break ;
33835: GO 33839
// end ; end ;
33837: GO 33776
33839: POP
33840: POP
// end ; end ;
33841: GO 33624
33843: POP
33844: POP
// if result and not asc then
33845: LD_VAR 0 5
33849: PUSH
33850: LD_VAR 0 3
33854: NOT
33855: AND
33856: IFFALSE 33873
// result := ReverseArray ( result ) ;
33858: LD_ADDR_VAR 0 5
33862: PUSH
33863: LD_VAR 0 5
33867: PPUSH
33868: CALL 61113 0 1
33872: ST_TO_ADDR
// tmp := [ ] ;
33873: LD_ADDR_VAR 0 8
33877: PUSH
33878: EMPTY
33879: ST_TO_ADDR
// if mode then
33880: LD_VAR 0 4
33884: IFFALSE 33948
// begin for i := 1 to result do
33886: LD_ADDR_VAR 0 6
33890: PUSH
33891: DOUBLE
33892: LD_INT 1
33894: DEC
33895: ST_TO_ADDR
33896: LD_VAR 0 5
33900: PUSH
33901: FOR_TO
33902: IFFALSE 33936
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33904: LD_ADDR_VAR 0 8
33908: PUSH
33909: LD_VAR 0 8
33913: PPUSH
33914: LD_VAR 0 5
33918: PUSH
33919: LD_VAR 0 6
33923: ARRAY
33924: PUSH
33925: LD_INT 1
33927: ARRAY
33928: PPUSH
33929: CALL 65826 0 2
33933: ST_TO_ADDR
33934: GO 33901
33936: POP
33937: POP
// result := tmp ;
33938: LD_ADDR_VAR 0 5
33942: PUSH
33943: LD_VAR 0 8
33947: ST_TO_ADDR
// end ; end ;
33948: LD_VAR 0 5
33952: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33953: LD_INT 0
33955: PPUSH
33956: PPUSH
33957: PPUSH
33958: PPUSH
// if not list then
33959: LD_VAR 0 3
33963: NOT
33964: IFFALSE 33968
// exit ;
33966: GO 34356
// result := [ ] ;
33968: LD_ADDR_VAR 0 6
33972: PUSH
33973: EMPTY
33974: ST_TO_ADDR
// for i in list do
33975: LD_ADDR_VAR 0 7
33979: PUSH
33980: LD_VAR 0 3
33984: PUSH
33985: FOR_IN
33986: IFFALSE 34188
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33988: LD_ADDR_VAR 0 9
33992: PUSH
33993: LD_VAR 0 7
33997: PPUSH
33998: LD_VAR 0 1
34002: PPUSH
34003: LD_VAR 0 2
34007: PPUSH
34008: CALL_OW 297
34012: ST_TO_ADDR
// if not result then
34013: LD_VAR 0 6
34017: NOT
34018: IFFALSE 34044
// result := [ [ i , tmp ] ] else
34020: LD_ADDR_VAR 0 6
34024: PUSH
34025: LD_VAR 0 7
34029: PUSH
34030: LD_VAR 0 9
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: EMPTY
34040: LIST
34041: ST_TO_ADDR
34042: GO 34186
// begin if result [ result ] [ 2 ] < tmp then
34044: LD_VAR 0 6
34048: PUSH
34049: LD_VAR 0 6
34053: ARRAY
34054: PUSH
34055: LD_INT 2
34057: ARRAY
34058: PUSH
34059: LD_VAR 0 9
34063: LESS
34064: IFFALSE 34106
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34066: LD_ADDR_VAR 0 6
34070: PUSH
34071: LD_VAR 0 6
34075: PPUSH
34076: LD_VAR 0 6
34080: PUSH
34081: LD_INT 1
34083: PLUS
34084: PPUSH
34085: LD_VAR 0 7
34089: PUSH
34090: LD_VAR 0 9
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PPUSH
34099: CALL_OW 2
34103: ST_TO_ADDR
34104: GO 34186
// for j = 1 to result do
34106: LD_ADDR_VAR 0 8
34110: PUSH
34111: DOUBLE
34112: LD_INT 1
34114: DEC
34115: ST_TO_ADDR
34116: LD_VAR 0 6
34120: PUSH
34121: FOR_TO
34122: IFFALSE 34184
// begin if tmp < result [ j ] [ 2 ] then
34124: LD_VAR 0 9
34128: PUSH
34129: LD_VAR 0 6
34133: PUSH
34134: LD_VAR 0 8
34138: ARRAY
34139: PUSH
34140: LD_INT 2
34142: ARRAY
34143: LESS
34144: IFFALSE 34182
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34146: LD_ADDR_VAR 0 6
34150: PUSH
34151: LD_VAR 0 6
34155: PPUSH
34156: LD_VAR 0 8
34160: PPUSH
34161: LD_VAR 0 7
34165: PUSH
34166: LD_VAR 0 9
34170: PUSH
34171: EMPTY
34172: LIST
34173: LIST
34174: PPUSH
34175: CALL_OW 2
34179: ST_TO_ADDR
// break ;
34180: GO 34184
// end ; end ;
34182: GO 34121
34184: POP
34185: POP
// end ; end ;
34186: GO 33985
34188: POP
34189: POP
// if result and not asc then
34190: LD_VAR 0 6
34194: PUSH
34195: LD_VAR 0 4
34199: NOT
34200: AND
34201: IFFALSE 34276
// begin tmp := result ;
34203: LD_ADDR_VAR 0 9
34207: PUSH
34208: LD_VAR 0 6
34212: ST_TO_ADDR
// for i = tmp downto 1 do
34213: LD_ADDR_VAR 0 7
34217: PUSH
34218: DOUBLE
34219: LD_VAR 0 9
34223: INC
34224: ST_TO_ADDR
34225: LD_INT 1
34227: PUSH
34228: FOR_DOWNTO
34229: IFFALSE 34274
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34231: LD_ADDR_VAR 0 6
34235: PUSH
34236: LD_VAR 0 6
34240: PPUSH
34241: LD_VAR 0 9
34245: PUSH
34246: LD_VAR 0 7
34250: MINUS
34251: PUSH
34252: LD_INT 1
34254: PLUS
34255: PPUSH
34256: LD_VAR 0 9
34260: PUSH
34261: LD_VAR 0 7
34265: ARRAY
34266: PPUSH
34267: CALL_OW 1
34271: ST_TO_ADDR
34272: GO 34228
34274: POP
34275: POP
// end ; tmp := [ ] ;
34276: LD_ADDR_VAR 0 9
34280: PUSH
34281: EMPTY
34282: ST_TO_ADDR
// if mode then
34283: LD_VAR 0 5
34287: IFFALSE 34356
// begin for i = 1 to result do
34289: LD_ADDR_VAR 0 7
34293: PUSH
34294: DOUBLE
34295: LD_INT 1
34297: DEC
34298: ST_TO_ADDR
34299: LD_VAR 0 6
34303: PUSH
34304: FOR_TO
34305: IFFALSE 34344
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34307: LD_ADDR_VAR 0 9
34311: PUSH
34312: LD_VAR 0 9
34316: PPUSH
34317: LD_VAR 0 7
34321: PPUSH
34322: LD_VAR 0 6
34326: PUSH
34327: LD_VAR 0 7
34331: ARRAY
34332: PUSH
34333: LD_INT 1
34335: ARRAY
34336: PPUSH
34337: CALL_OW 1
34341: ST_TO_ADDR
34342: GO 34304
34344: POP
34345: POP
// result := tmp ;
34346: LD_ADDR_VAR 0 6
34350: PUSH
34351: LD_VAR 0 9
34355: ST_TO_ADDR
// end ; end ;
34356: LD_VAR 0 6
34360: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34361: LD_INT 0
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
34367: PPUSH
34368: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34369: LD_ADDR_VAR 0 5
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: LD_INT 0
34379: PUSH
34380: LD_INT 0
34382: PUSH
34383: EMPTY
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: ST_TO_ADDR
// if not x or not y then
34391: LD_VAR 0 2
34395: NOT
34396: PUSH
34397: LD_VAR 0 3
34401: NOT
34402: OR
34403: IFFALSE 34407
// exit ;
34405: GO 36057
// if not range then
34407: LD_VAR 0 4
34411: NOT
34412: IFFALSE 34422
// range := 10 ;
34414: LD_ADDR_VAR 0 4
34418: PUSH
34419: LD_INT 10
34421: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34422: LD_ADDR_VAR 0 8
34426: PUSH
34427: LD_INT 81
34429: PUSH
34430: LD_VAR 0 1
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 92
34441: PUSH
34442: LD_VAR 0 2
34446: PUSH
34447: LD_VAR 0 3
34451: PUSH
34452: LD_VAR 0 4
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: PUSH
34463: LD_INT 3
34465: PUSH
34466: LD_INT 21
34468: PUSH
34469: LD_INT 3
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: LIST
34484: PPUSH
34485: CALL_OW 69
34489: ST_TO_ADDR
// if not tmp then
34490: LD_VAR 0 8
34494: NOT
34495: IFFALSE 34499
// exit ;
34497: GO 36057
// for i in tmp do
34499: LD_ADDR_VAR 0 6
34503: PUSH
34504: LD_VAR 0 8
34508: PUSH
34509: FOR_IN
34510: IFFALSE 36032
// begin points := [ 0 , 0 , 0 ] ;
34512: LD_ADDR_VAR 0 9
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: LD_INT 0
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// bpoints := 1 ;
34531: LD_ADDR_VAR 0 10
34535: PUSH
34536: LD_INT 1
34538: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34539: LD_VAR 0 6
34543: PPUSH
34544: CALL_OW 247
34548: PUSH
34549: LD_INT 1
34551: DOUBLE
34552: EQUAL
34553: IFTRUE 34557
34555: GO 35135
34557: POP
// begin if GetClass ( i ) = 1 then
34558: LD_VAR 0 6
34562: PPUSH
34563: CALL_OW 257
34567: PUSH
34568: LD_INT 1
34570: EQUAL
34571: IFFALSE 34592
// points := [ 10 , 5 , 3 ] ;
34573: LD_ADDR_VAR 0 9
34577: PUSH
34578: LD_INT 10
34580: PUSH
34581: LD_INT 5
34583: PUSH
34584: LD_INT 3
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: LIST
34591: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34592: LD_VAR 0 6
34596: PPUSH
34597: CALL_OW 257
34601: PUSH
34602: LD_INT 2
34604: PUSH
34605: LD_INT 3
34607: PUSH
34608: LD_INT 4
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: LIST
34615: IN
34616: IFFALSE 34637
// points := [ 3 , 2 , 1 ] ;
34618: LD_ADDR_VAR 0 9
34622: PUSH
34623: LD_INT 3
34625: PUSH
34626: LD_INT 2
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: LIST
34636: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34637: LD_VAR 0 6
34641: PPUSH
34642: CALL_OW 257
34646: PUSH
34647: LD_INT 5
34649: EQUAL
34650: IFFALSE 34671
// points := [ 130 , 5 , 2 ] ;
34652: LD_ADDR_VAR 0 9
34656: PUSH
34657: LD_INT 130
34659: PUSH
34660: LD_INT 5
34662: PUSH
34663: LD_INT 2
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34671: LD_VAR 0 6
34675: PPUSH
34676: CALL_OW 257
34680: PUSH
34681: LD_INT 8
34683: EQUAL
34684: IFFALSE 34705
// points := [ 35 , 35 , 30 ] ;
34686: LD_ADDR_VAR 0 9
34690: PUSH
34691: LD_INT 35
34693: PUSH
34694: LD_INT 35
34696: PUSH
34697: LD_INT 30
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34705: LD_VAR 0 6
34709: PPUSH
34710: CALL_OW 257
34714: PUSH
34715: LD_INT 9
34717: EQUAL
34718: IFFALSE 34739
// points := [ 20 , 55 , 40 ] ;
34720: LD_ADDR_VAR 0 9
34724: PUSH
34725: LD_INT 20
34727: PUSH
34728: LD_INT 55
34730: PUSH
34731: LD_INT 40
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: LIST
34738: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34739: LD_VAR 0 6
34743: PPUSH
34744: CALL_OW 257
34748: PUSH
34749: LD_INT 12
34751: PUSH
34752: LD_INT 16
34754: PUSH
34755: EMPTY
34756: LIST
34757: LIST
34758: IN
34759: IFFALSE 34780
// points := [ 5 , 3 , 2 ] ;
34761: LD_ADDR_VAR 0 9
34765: PUSH
34766: LD_INT 5
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 2
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: LIST
34779: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34780: LD_VAR 0 6
34784: PPUSH
34785: CALL_OW 257
34789: PUSH
34790: LD_INT 17
34792: EQUAL
34793: IFFALSE 34814
// points := [ 100 , 50 , 75 ] ;
34795: LD_ADDR_VAR 0 9
34799: PUSH
34800: LD_INT 100
34802: PUSH
34803: LD_INT 50
34805: PUSH
34806: LD_INT 75
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34814: LD_VAR 0 6
34818: PPUSH
34819: CALL_OW 257
34823: PUSH
34824: LD_INT 15
34826: EQUAL
34827: IFFALSE 34848
// points := [ 10 , 5 , 3 ] ;
34829: LD_ADDR_VAR 0 9
34833: PUSH
34834: LD_INT 10
34836: PUSH
34837: LD_INT 5
34839: PUSH
34840: LD_INT 3
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: LIST
34847: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34848: LD_VAR 0 6
34852: PPUSH
34853: CALL_OW 257
34857: PUSH
34858: LD_INT 14
34860: EQUAL
34861: IFFALSE 34882
// points := [ 10 , 0 , 0 ] ;
34863: LD_ADDR_VAR 0 9
34867: PUSH
34868: LD_INT 10
34870: PUSH
34871: LD_INT 0
34873: PUSH
34874: LD_INT 0
34876: PUSH
34877: EMPTY
34878: LIST
34879: LIST
34880: LIST
34881: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34882: LD_VAR 0 6
34886: PPUSH
34887: CALL_OW 257
34891: PUSH
34892: LD_INT 11
34894: EQUAL
34895: IFFALSE 34916
// points := [ 30 , 10 , 5 ] ;
34897: LD_ADDR_VAR 0 9
34901: PUSH
34902: LD_INT 30
34904: PUSH
34905: LD_INT 10
34907: PUSH
34908: LD_INT 5
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: LIST
34915: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34916: LD_VAR 0 1
34920: PPUSH
34921: LD_INT 5
34923: PPUSH
34924: CALL_OW 321
34928: PUSH
34929: LD_INT 2
34931: EQUAL
34932: IFFALSE 34949
// bpoints := bpoints * 1.8 ;
34934: LD_ADDR_VAR 0 10
34938: PUSH
34939: LD_VAR 0 10
34943: PUSH
34944: LD_REAL  1.80000000000000E+0000
34947: MUL
34948: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34949: LD_VAR 0 6
34953: PPUSH
34954: CALL_OW 257
34958: PUSH
34959: LD_INT 1
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: LD_INT 4
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: LIST
34975: LIST
34976: IN
34977: PUSH
34978: LD_VAR 0 1
34982: PPUSH
34983: LD_INT 51
34985: PPUSH
34986: CALL_OW 321
34990: PUSH
34991: LD_INT 2
34993: EQUAL
34994: AND
34995: IFFALSE 35012
// bpoints := bpoints * 1.2 ;
34997: LD_ADDR_VAR 0 10
35001: PUSH
35002: LD_VAR 0 10
35006: PUSH
35007: LD_REAL  1.20000000000000E+0000
35010: MUL
35011: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35012: LD_VAR 0 6
35016: PPUSH
35017: CALL_OW 257
35021: PUSH
35022: LD_INT 5
35024: PUSH
35025: LD_INT 7
35027: PUSH
35028: LD_INT 9
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: LIST
35035: IN
35036: PUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: LD_INT 52
35044: PPUSH
35045: CALL_OW 321
35049: PUSH
35050: LD_INT 2
35052: EQUAL
35053: AND
35054: IFFALSE 35071
// bpoints := bpoints * 1.5 ;
35056: LD_ADDR_VAR 0 10
35060: PUSH
35061: LD_VAR 0 10
35065: PUSH
35066: LD_REAL  1.50000000000000E+0000
35069: MUL
35070: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35071: LD_VAR 0 1
35075: PPUSH
35076: LD_INT 66
35078: PPUSH
35079: CALL_OW 321
35083: PUSH
35084: LD_INT 2
35086: EQUAL
35087: IFFALSE 35104
// bpoints := bpoints * 1.1 ;
35089: LD_ADDR_VAR 0 10
35093: PUSH
35094: LD_VAR 0 10
35098: PUSH
35099: LD_REAL  1.10000000000000E+0000
35102: MUL
35103: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35104: LD_ADDR_VAR 0 10
35108: PUSH
35109: LD_VAR 0 10
35113: PUSH
35114: LD_VAR 0 6
35118: PPUSH
35119: LD_INT 1
35121: PPUSH
35122: CALL_OW 259
35126: PUSH
35127: LD_REAL  1.15000000000000E+0000
35130: MUL
35131: MUL
35132: ST_TO_ADDR
// end ; unit_vehicle :
35133: GO 35961
35135: LD_INT 2
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35949
35143: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35144: LD_VAR 0 6
35148: PPUSH
35149: CALL_OW 264
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 42
35159: PUSH
35160: LD_INT 24
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: LIST
35167: IN
35168: IFFALSE 35189
// points := [ 25 , 5 , 3 ] ;
35170: LD_ADDR_VAR 0 9
35174: PUSH
35175: LD_INT 25
35177: PUSH
35178: LD_INT 5
35180: PUSH
35181: LD_INT 3
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: LIST
35188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35189: LD_VAR 0 6
35193: PPUSH
35194: CALL_OW 264
35198: PUSH
35199: LD_INT 4
35201: PUSH
35202: LD_INT 43
35204: PUSH
35205: LD_INT 25
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: IN
35213: IFFALSE 35234
// points := [ 40 , 15 , 5 ] ;
35215: LD_ADDR_VAR 0 9
35219: PUSH
35220: LD_INT 40
35222: PUSH
35223: LD_INT 15
35225: PUSH
35226: LD_INT 5
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: LIST
35233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35234: LD_VAR 0 6
35238: PPUSH
35239: CALL_OW 264
35243: PUSH
35244: LD_INT 3
35246: PUSH
35247: LD_INT 23
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: IN
35254: IFFALSE 35275
// points := [ 7 , 25 , 8 ] ;
35256: LD_ADDR_VAR 0 9
35260: PUSH
35261: LD_INT 7
35263: PUSH
35264: LD_INT 25
35266: PUSH
35267: LD_INT 8
35269: PUSH
35270: EMPTY
35271: LIST
35272: LIST
35273: LIST
35274: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35275: LD_VAR 0 6
35279: PPUSH
35280: CALL_OW 264
35284: PUSH
35285: LD_INT 5
35287: PUSH
35288: LD_INT 27
35290: PUSH
35291: LD_INT 44
35293: PUSH
35294: EMPTY
35295: LIST
35296: LIST
35297: LIST
35298: IN
35299: IFFALSE 35320
// points := [ 14 , 50 , 16 ] ;
35301: LD_ADDR_VAR 0 9
35305: PUSH
35306: LD_INT 14
35308: PUSH
35309: LD_INT 50
35311: PUSH
35312: LD_INT 16
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: LIST
35319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35320: LD_VAR 0 6
35324: PPUSH
35325: CALL_OW 264
35329: PUSH
35330: LD_INT 6
35332: PUSH
35333: LD_INT 46
35335: PUSH
35336: EMPTY
35337: LIST
35338: LIST
35339: IN
35340: IFFALSE 35361
// points := [ 32 , 120 , 70 ] ;
35342: LD_ADDR_VAR 0 9
35346: PUSH
35347: LD_INT 32
35349: PUSH
35350: LD_INT 120
35352: PUSH
35353: LD_INT 70
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35361: LD_VAR 0 6
35365: PPUSH
35366: CALL_OW 264
35370: PUSH
35371: LD_INT 7
35373: PUSH
35374: LD_INT 28
35376: PUSH
35377: LD_INT 45
35379: PUSH
35380: LD_INT 92
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: IN
35389: IFFALSE 35410
// points := [ 35 , 20 , 45 ] ;
35391: LD_ADDR_VAR 0 9
35395: PUSH
35396: LD_INT 35
35398: PUSH
35399: LD_INT 20
35401: PUSH
35402: LD_INT 45
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: LIST
35409: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35410: LD_VAR 0 6
35414: PPUSH
35415: CALL_OW 264
35419: PUSH
35420: LD_INT 47
35422: PUSH
35423: EMPTY
35424: LIST
35425: IN
35426: IFFALSE 35447
// points := [ 67 , 45 , 75 ] ;
35428: LD_ADDR_VAR 0 9
35432: PUSH
35433: LD_INT 67
35435: PUSH
35436: LD_INT 45
35438: PUSH
35439: LD_INT 75
35441: PUSH
35442: EMPTY
35443: LIST
35444: LIST
35445: LIST
35446: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35447: LD_VAR 0 6
35451: PPUSH
35452: CALL_OW 264
35456: PUSH
35457: LD_INT 26
35459: PUSH
35460: EMPTY
35461: LIST
35462: IN
35463: IFFALSE 35484
// points := [ 120 , 30 , 80 ] ;
35465: LD_ADDR_VAR 0 9
35469: PUSH
35470: LD_INT 120
35472: PUSH
35473: LD_INT 30
35475: PUSH
35476: LD_INT 80
35478: PUSH
35479: EMPTY
35480: LIST
35481: LIST
35482: LIST
35483: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35484: LD_VAR 0 6
35488: PPUSH
35489: CALL_OW 264
35493: PUSH
35494: LD_INT 22
35496: PUSH
35497: EMPTY
35498: LIST
35499: IN
35500: IFFALSE 35521
// points := [ 40 , 1 , 1 ] ;
35502: LD_ADDR_VAR 0 9
35506: PUSH
35507: LD_INT 40
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 1
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35521: LD_VAR 0 6
35525: PPUSH
35526: CALL_OW 264
35530: PUSH
35531: LD_INT 29
35533: PUSH
35534: EMPTY
35535: LIST
35536: IN
35537: IFFALSE 35558
// points := [ 70 , 200 , 400 ] ;
35539: LD_ADDR_VAR 0 9
35543: PUSH
35544: LD_INT 70
35546: PUSH
35547: LD_INT 200
35549: PUSH
35550: LD_INT 400
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35558: LD_VAR 0 6
35562: PPUSH
35563: CALL_OW 264
35567: PUSH
35568: LD_INT 14
35570: PUSH
35571: LD_INT 53
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: IN
35578: IFFALSE 35599
// points := [ 40 , 10 , 20 ] ;
35580: LD_ADDR_VAR 0 9
35584: PUSH
35585: LD_INT 40
35587: PUSH
35588: LD_INT 10
35590: PUSH
35591: LD_INT 20
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: LIST
35598: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35599: LD_VAR 0 6
35603: PPUSH
35604: CALL_OW 264
35608: PUSH
35609: LD_INT 9
35611: PUSH
35612: EMPTY
35613: LIST
35614: IN
35615: IFFALSE 35636
// points := [ 5 , 70 , 20 ] ;
35617: LD_ADDR_VAR 0 9
35621: PUSH
35622: LD_INT 5
35624: PUSH
35625: LD_INT 70
35627: PUSH
35628: LD_INT 20
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35636: LD_VAR 0 6
35640: PPUSH
35641: CALL_OW 264
35645: PUSH
35646: LD_INT 10
35648: PUSH
35649: EMPTY
35650: LIST
35651: IN
35652: IFFALSE 35673
// points := [ 35 , 110 , 70 ] ;
35654: LD_ADDR_VAR 0 9
35658: PUSH
35659: LD_INT 35
35661: PUSH
35662: LD_INT 110
35664: PUSH
35665: LD_INT 70
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: LIST
35672: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35673: LD_VAR 0 6
35677: PPUSH
35678: CALL_OW 265
35682: PUSH
35683: LD_INT 25
35685: EQUAL
35686: IFFALSE 35707
// points := [ 80 , 65 , 100 ] ;
35688: LD_ADDR_VAR 0 9
35692: PUSH
35693: LD_INT 80
35695: PUSH
35696: LD_INT 65
35698: PUSH
35699: LD_INT 100
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: LIST
35706: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35707: LD_VAR 0 6
35711: PPUSH
35712: CALL_OW 263
35716: PUSH
35717: LD_INT 1
35719: EQUAL
35720: IFFALSE 35755
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35722: LD_ADDR_VAR 0 10
35726: PUSH
35727: LD_VAR 0 10
35731: PUSH
35732: LD_VAR 0 6
35736: PPUSH
35737: CALL_OW 311
35741: PPUSH
35742: LD_INT 3
35744: PPUSH
35745: CALL_OW 259
35749: PUSH
35750: LD_INT 4
35752: MUL
35753: MUL
35754: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35755: LD_VAR 0 6
35759: PPUSH
35760: CALL_OW 263
35764: PUSH
35765: LD_INT 2
35767: EQUAL
35768: IFFALSE 35819
// begin j := IsControledBy ( i ) ;
35770: LD_ADDR_VAR 0 7
35774: PUSH
35775: LD_VAR 0 6
35779: PPUSH
35780: CALL_OW 312
35784: ST_TO_ADDR
// if j then
35785: LD_VAR 0 7
35789: IFFALSE 35819
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35791: LD_ADDR_VAR 0 10
35795: PUSH
35796: LD_VAR 0 10
35800: PUSH
35801: LD_VAR 0 7
35805: PPUSH
35806: LD_INT 3
35808: PPUSH
35809: CALL_OW 259
35813: PUSH
35814: LD_INT 3
35816: MUL
35817: MUL
35818: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35819: LD_VAR 0 6
35823: PPUSH
35824: CALL_OW 264
35828: PUSH
35829: LD_INT 5
35831: PUSH
35832: LD_INT 6
35834: PUSH
35835: LD_INT 46
35837: PUSH
35838: LD_INT 44
35840: PUSH
35841: LD_INT 47
35843: PUSH
35844: LD_INT 45
35846: PUSH
35847: LD_INT 28
35849: PUSH
35850: LD_INT 7
35852: PUSH
35853: LD_INT 27
35855: PUSH
35856: LD_INT 29
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: IN
35871: PUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: LD_INT 52
35879: PPUSH
35880: CALL_OW 321
35884: PUSH
35885: LD_INT 2
35887: EQUAL
35888: AND
35889: IFFALSE 35906
// bpoints := bpoints * 1.2 ;
35891: LD_ADDR_VAR 0 10
35895: PUSH
35896: LD_VAR 0 10
35900: PUSH
35901: LD_REAL  1.20000000000000E+0000
35904: MUL
35905: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35906: LD_VAR 0 6
35910: PPUSH
35911: CALL_OW 264
35915: PUSH
35916: LD_INT 6
35918: PUSH
35919: LD_INT 46
35921: PUSH
35922: LD_INT 47
35924: PUSH
35925: EMPTY
35926: LIST
35927: LIST
35928: LIST
35929: IN
35930: IFFALSE 35947
// bpoints := bpoints * 1.2 ;
35932: LD_ADDR_VAR 0 10
35936: PUSH
35937: LD_VAR 0 10
35941: PUSH
35942: LD_REAL  1.20000000000000E+0000
35945: MUL
35946: ST_TO_ADDR
// end ; unit_building :
35947: GO 35961
35949: LD_INT 3
35951: DOUBLE
35952: EQUAL
35953: IFTRUE 35957
35955: GO 35960
35957: POP
// ; end ;
35958: GO 35961
35960: POP
// for j = 1 to 3 do
35961: LD_ADDR_VAR 0 7
35965: PUSH
35966: DOUBLE
35967: LD_INT 1
35969: DEC
35970: ST_TO_ADDR
35971: LD_INT 3
35973: PUSH
35974: FOR_TO
35975: IFFALSE 36028
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35977: LD_ADDR_VAR 0 5
35981: PUSH
35982: LD_VAR 0 5
35986: PPUSH
35987: LD_VAR 0 7
35991: PPUSH
35992: LD_VAR 0 5
35996: PUSH
35997: LD_VAR 0 7
36001: ARRAY
36002: PUSH
36003: LD_VAR 0 9
36007: PUSH
36008: LD_VAR 0 7
36012: ARRAY
36013: PUSH
36014: LD_VAR 0 10
36018: MUL
36019: PLUS
36020: PPUSH
36021: CALL_OW 1
36025: ST_TO_ADDR
36026: GO 35974
36028: POP
36029: POP
// end ;
36030: GO 34509
36032: POP
36033: POP
// result := Replace ( result , 4 , tmp ) ;
36034: LD_ADDR_VAR 0 5
36038: PUSH
36039: LD_VAR 0 5
36043: PPUSH
36044: LD_INT 4
36046: PPUSH
36047: LD_VAR 0 8
36051: PPUSH
36052: CALL_OW 1
36056: ST_TO_ADDR
// end ;
36057: LD_VAR 0 5
36061: RET
// export function DangerAtRange ( unit , range ) ; begin
36062: LD_INT 0
36064: PPUSH
// if not unit then
36065: LD_VAR 0 1
36069: NOT
36070: IFFALSE 36074
// exit ;
36072: GO 36119
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36074: LD_ADDR_VAR 0 3
36078: PUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 255
36088: PPUSH
36089: LD_VAR 0 1
36093: PPUSH
36094: CALL_OW 250
36098: PPUSH
36099: LD_VAR 0 1
36103: PPUSH
36104: CALL_OW 251
36108: PPUSH
36109: LD_VAR 0 2
36113: PPUSH
36114: CALL 34361 0 4
36118: ST_TO_ADDR
// end ;
36119: LD_VAR 0 3
36123: RET
// export function DangerInArea ( side , area ) ; begin
36124: LD_INT 0
36126: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36127: LD_ADDR_VAR 0 3
36131: PUSH
36132: LD_VAR 0 2
36136: PPUSH
36137: LD_INT 81
36139: PUSH
36140: LD_VAR 0 1
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PPUSH
36149: CALL_OW 70
36153: ST_TO_ADDR
// end ;
36154: LD_VAR 0 3
36158: RET
// export function IsExtension ( b ) ; begin
36159: LD_INT 0
36161: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36162: LD_ADDR_VAR 0 2
36166: PUSH
36167: LD_VAR 0 1
36171: PUSH
36172: LD_INT 23
36174: PUSH
36175: LD_INT 20
36177: PUSH
36178: LD_INT 22
36180: PUSH
36181: LD_INT 17
36183: PUSH
36184: LD_INT 24
36186: PUSH
36187: LD_INT 21
36189: PUSH
36190: LD_INT 19
36192: PUSH
36193: LD_INT 16
36195: PUSH
36196: LD_INT 25
36198: PUSH
36199: LD_INT 18
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: IN
36214: ST_TO_ADDR
// end ;
36215: LD_VAR 0 2
36219: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36220: LD_INT 0
36222: PPUSH
36223: PPUSH
36224: PPUSH
// result := [ ] ;
36225: LD_ADDR_VAR 0 4
36229: PUSH
36230: EMPTY
36231: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36232: LD_ADDR_VAR 0 5
36236: PUSH
36237: LD_VAR 0 2
36241: PPUSH
36242: LD_INT 21
36244: PUSH
36245: LD_INT 3
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PPUSH
36252: CALL_OW 70
36256: ST_TO_ADDR
// if not tmp then
36257: LD_VAR 0 5
36261: NOT
36262: IFFALSE 36266
// exit ;
36264: GO 36330
// if checkLink then
36266: LD_VAR 0 3
36270: IFFALSE 36320
// begin for i in tmp do
36272: LD_ADDR_VAR 0 6
36276: PUSH
36277: LD_VAR 0 5
36281: PUSH
36282: FOR_IN
36283: IFFALSE 36318
// if GetBase ( i ) <> base then
36285: LD_VAR 0 6
36289: PPUSH
36290: CALL_OW 274
36294: PUSH
36295: LD_VAR 0 1
36299: NONEQUAL
36300: IFFALSE 36316
// ComLinkToBase ( base , i ) ;
36302: LD_VAR 0 1
36306: PPUSH
36307: LD_VAR 0 6
36311: PPUSH
36312: CALL_OW 169
36316: GO 36282
36318: POP
36319: POP
// end ; result := tmp ;
36320: LD_ADDR_VAR 0 4
36324: PUSH
36325: LD_VAR 0 5
36329: ST_TO_ADDR
// end ;
36330: LD_VAR 0 4
36334: RET
// export function ComComplete ( units , b ) ; var i ; begin
36335: LD_INT 0
36337: PPUSH
36338: PPUSH
// if not units then
36339: LD_VAR 0 1
36343: NOT
36344: IFFALSE 36348
// exit ;
36346: GO 36438
// for i in units do
36348: LD_ADDR_VAR 0 4
36352: PUSH
36353: LD_VAR 0 1
36357: PUSH
36358: FOR_IN
36359: IFFALSE 36436
// if BuildingStatus ( b ) = bs_build then
36361: LD_VAR 0 2
36365: PPUSH
36366: CALL_OW 461
36370: PUSH
36371: LD_INT 1
36373: EQUAL
36374: IFFALSE 36434
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36376: LD_VAR 0 4
36380: PPUSH
36381: LD_STRING h
36383: PUSH
36384: LD_VAR 0 2
36388: PPUSH
36389: CALL_OW 250
36393: PUSH
36394: LD_VAR 0 2
36398: PPUSH
36399: CALL_OW 251
36403: PUSH
36404: LD_VAR 0 2
36408: PUSH
36409: LD_INT 0
36411: PUSH
36412: LD_INT 0
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: PUSH
36427: EMPTY
36428: LIST
36429: PPUSH
36430: CALL_OW 446
36434: GO 36358
36436: POP
36437: POP
// end ;
36438: LD_VAR 0 3
36442: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36443: LD_INT 0
36445: PPUSH
36446: PPUSH
36447: PPUSH
36448: PPUSH
36449: PPUSH
36450: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36451: LD_VAR 0 1
36455: NOT
36456: PUSH
36457: LD_VAR 0 1
36461: PPUSH
36462: CALL_OW 263
36466: PUSH
36467: LD_INT 2
36469: NONEQUAL
36470: OR
36471: IFFALSE 36475
// exit ;
36473: GO 36791
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36475: LD_ADDR_VAR 0 6
36479: PUSH
36480: LD_INT 22
36482: PUSH
36483: LD_VAR 0 1
36487: PPUSH
36488: CALL_OW 255
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 30
36502: PUSH
36503: LD_INT 36
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 34
36512: PUSH
36513: LD_INT 31
36515: PUSH
36516: EMPTY
36517: LIST
36518: LIST
36519: PUSH
36520: EMPTY
36521: LIST
36522: LIST
36523: LIST
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PPUSH
36529: CALL_OW 69
36533: ST_TO_ADDR
// if not tmp then
36534: LD_VAR 0 6
36538: NOT
36539: IFFALSE 36543
// exit ;
36541: GO 36791
// result := [ ] ;
36543: LD_ADDR_VAR 0 2
36547: PUSH
36548: EMPTY
36549: ST_TO_ADDR
// for i in tmp do
36550: LD_ADDR_VAR 0 3
36554: PUSH
36555: LD_VAR 0 6
36559: PUSH
36560: FOR_IN
36561: IFFALSE 36632
// begin t := UnitsInside ( i ) ;
36563: LD_ADDR_VAR 0 4
36567: PUSH
36568: LD_VAR 0 3
36572: PPUSH
36573: CALL_OW 313
36577: ST_TO_ADDR
// if t then
36578: LD_VAR 0 4
36582: IFFALSE 36630
// for j in t do
36584: LD_ADDR_VAR 0 7
36588: PUSH
36589: LD_VAR 0 4
36593: PUSH
36594: FOR_IN
36595: IFFALSE 36628
// result := Replace ( result , result + 1 , j ) ;
36597: LD_ADDR_VAR 0 2
36601: PUSH
36602: LD_VAR 0 2
36606: PPUSH
36607: LD_VAR 0 2
36611: PUSH
36612: LD_INT 1
36614: PLUS
36615: PPUSH
36616: LD_VAR 0 7
36620: PPUSH
36621: CALL_OW 1
36625: ST_TO_ADDR
36626: GO 36594
36628: POP
36629: POP
// end ;
36630: GO 36560
36632: POP
36633: POP
// if not result then
36634: LD_VAR 0 2
36638: NOT
36639: IFFALSE 36643
// exit ;
36641: GO 36791
// mech := result [ 1 ] ;
36643: LD_ADDR_VAR 0 5
36647: PUSH
36648: LD_VAR 0 2
36652: PUSH
36653: LD_INT 1
36655: ARRAY
36656: ST_TO_ADDR
// if result > 1 then
36657: LD_VAR 0 2
36661: PUSH
36662: LD_INT 1
36664: GREATER
36665: IFFALSE 36777
// begin for i = 2 to result do
36667: LD_ADDR_VAR 0 3
36671: PUSH
36672: DOUBLE
36673: LD_INT 2
36675: DEC
36676: ST_TO_ADDR
36677: LD_VAR 0 2
36681: PUSH
36682: FOR_TO
36683: IFFALSE 36775
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36685: LD_ADDR_VAR 0 4
36689: PUSH
36690: LD_VAR 0 2
36694: PUSH
36695: LD_VAR 0 3
36699: ARRAY
36700: PPUSH
36701: LD_INT 3
36703: PPUSH
36704: CALL_OW 259
36708: PUSH
36709: LD_VAR 0 2
36713: PUSH
36714: LD_VAR 0 3
36718: ARRAY
36719: PPUSH
36720: CALL_OW 432
36724: MINUS
36725: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36726: LD_VAR 0 4
36730: PUSH
36731: LD_VAR 0 5
36735: PPUSH
36736: LD_INT 3
36738: PPUSH
36739: CALL_OW 259
36743: PUSH
36744: LD_VAR 0 5
36748: PPUSH
36749: CALL_OW 432
36753: MINUS
36754: GREATEREQUAL
36755: IFFALSE 36773
// mech := result [ i ] ;
36757: LD_ADDR_VAR 0 5
36761: PUSH
36762: LD_VAR 0 2
36766: PUSH
36767: LD_VAR 0 3
36771: ARRAY
36772: ST_TO_ADDR
// end ;
36773: GO 36682
36775: POP
36776: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36777: LD_VAR 0 1
36781: PPUSH
36782: LD_VAR 0 5
36786: PPUSH
36787: CALL_OW 135
// end ;
36791: LD_VAR 0 2
36795: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36796: LD_INT 0
36798: PPUSH
36799: PPUSH
36800: PPUSH
36801: PPUSH
36802: PPUSH
36803: PPUSH
36804: PPUSH
36805: PPUSH
36806: PPUSH
36807: PPUSH
36808: PPUSH
36809: PPUSH
36810: PPUSH
// result := [ ] ;
36811: LD_ADDR_VAR 0 7
36815: PUSH
36816: EMPTY
36817: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36818: LD_VAR 0 1
36822: PPUSH
36823: CALL_OW 266
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: LD_INT 1
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: IN
36838: NOT
36839: IFFALSE 36843
// exit ;
36841: GO 38477
// if name then
36843: LD_VAR 0 3
36847: IFFALSE 36863
// SetBName ( base_dep , name ) ;
36849: LD_VAR 0 1
36853: PPUSH
36854: LD_VAR 0 3
36858: PPUSH
36859: CALL_OW 500
// base := GetBase ( base_dep ) ;
36863: LD_ADDR_VAR 0 15
36867: PUSH
36868: LD_VAR 0 1
36872: PPUSH
36873: CALL_OW 274
36877: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36878: LD_ADDR_VAR 0 16
36882: PUSH
36883: LD_VAR 0 1
36887: PPUSH
36888: CALL_OW 255
36892: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36893: LD_ADDR_VAR 0 17
36897: PUSH
36898: LD_VAR 0 1
36902: PPUSH
36903: CALL_OW 248
36907: ST_TO_ADDR
// if sources then
36908: LD_VAR 0 5
36912: IFFALSE 36959
// for i = 1 to 3 do
36914: LD_ADDR_VAR 0 8
36918: PUSH
36919: DOUBLE
36920: LD_INT 1
36922: DEC
36923: ST_TO_ADDR
36924: LD_INT 3
36926: PUSH
36927: FOR_TO
36928: IFFALSE 36957
// AddResourceType ( base , i , sources [ i ] ) ;
36930: LD_VAR 0 15
36934: PPUSH
36935: LD_VAR 0 8
36939: PPUSH
36940: LD_VAR 0 5
36944: PUSH
36945: LD_VAR 0 8
36949: ARRAY
36950: PPUSH
36951: CALL_OW 276
36955: GO 36927
36957: POP
36958: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36959: LD_ADDR_VAR 0 18
36963: PUSH
36964: LD_VAR 0 15
36968: PPUSH
36969: LD_VAR 0 2
36973: PPUSH
36974: LD_INT 1
36976: PPUSH
36977: CALL 36220 0 3
36981: ST_TO_ADDR
// InitHc ;
36982: CALL_OW 19
// InitUc ;
36986: CALL_OW 18
// uc_side := side ;
36990: LD_ADDR_OWVAR 20
36994: PUSH
36995: LD_VAR 0 16
36999: ST_TO_ADDR
// uc_nation := nation ;
37000: LD_ADDR_OWVAR 21
37004: PUSH
37005: LD_VAR 0 17
37009: ST_TO_ADDR
// if buildings then
37010: LD_VAR 0 18
37014: IFFALSE 38336
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37016: LD_ADDR_VAR 0 19
37020: PUSH
37021: LD_VAR 0 18
37025: PPUSH
37026: LD_INT 2
37028: PUSH
37029: LD_INT 30
37031: PUSH
37032: LD_INT 29
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 30
37041: PUSH
37042: LD_INT 30
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: PPUSH
37054: CALL_OW 72
37058: ST_TO_ADDR
// if tmp then
37059: LD_VAR 0 19
37063: IFFALSE 37111
// for i in tmp do
37065: LD_ADDR_VAR 0 8
37069: PUSH
37070: LD_VAR 0 19
37074: PUSH
37075: FOR_IN
37076: IFFALSE 37109
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37078: LD_VAR 0 8
37082: PPUSH
37083: CALL_OW 250
37087: PPUSH
37088: LD_VAR 0 8
37092: PPUSH
37093: CALL_OW 251
37097: PPUSH
37098: LD_VAR 0 16
37102: PPUSH
37103: CALL_OW 441
37107: GO 37075
37109: POP
37110: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37111: LD_VAR 0 18
37115: PPUSH
37116: LD_INT 2
37118: PUSH
37119: LD_INT 30
37121: PUSH
37122: LD_INT 32
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 30
37131: PUSH
37132: LD_INT 33
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: PPUSH
37144: CALL_OW 72
37148: IFFALSE 37236
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37150: LD_ADDR_VAR 0 8
37154: PUSH
37155: LD_VAR 0 18
37159: PPUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 30
37165: PUSH
37166: LD_INT 32
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 30
37175: PUSH
37176: LD_INT 33
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: LIST
37187: PPUSH
37188: CALL_OW 72
37192: PUSH
37193: FOR_IN
37194: IFFALSE 37234
// begin if not GetBWeapon ( i ) then
37196: LD_VAR 0 8
37200: PPUSH
37201: CALL_OW 269
37205: NOT
37206: IFFALSE 37232
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37208: LD_VAR 0 8
37212: PPUSH
37213: LD_VAR 0 8
37217: PPUSH
37218: LD_VAR 0 2
37222: PPUSH
37223: CALL 38482 0 2
37227: PPUSH
37228: CALL_OW 431
// end ;
37232: GO 37193
37234: POP
37235: POP
// end ; for i = 1 to personel do
37236: LD_ADDR_VAR 0 8
37240: PUSH
37241: DOUBLE
37242: LD_INT 1
37244: DEC
37245: ST_TO_ADDR
37246: LD_VAR 0 6
37250: PUSH
37251: FOR_TO
37252: IFFALSE 38316
// begin if i > 4 then
37254: LD_VAR 0 8
37258: PUSH
37259: LD_INT 4
37261: GREATER
37262: IFFALSE 37266
// break ;
37264: GO 38316
// case i of 1 :
37266: LD_VAR 0 8
37270: PUSH
37271: LD_INT 1
37273: DOUBLE
37274: EQUAL
37275: IFTRUE 37279
37277: GO 37359
37279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37280: LD_ADDR_VAR 0 12
37284: PUSH
37285: LD_VAR 0 18
37289: PPUSH
37290: LD_INT 22
37292: PUSH
37293: LD_VAR 0 16
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 58
37304: PUSH
37305: EMPTY
37306: LIST
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 30
37313: PUSH
37314: LD_INT 32
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PUSH
37321: LD_INT 30
37323: PUSH
37324: LD_INT 4
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 30
37333: PUSH
37334: LD_INT 5
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: LIST
37351: PPUSH
37352: CALL_OW 72
37356: ST_TO_ADDR
37357: GO 37581
37359: LD_INT 2
37361: DOUBLE
37362: EQUAL
37363: IFTRUE 37367
37365: GO 37429
37367: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37368: LD_ADDR_VAR 0 12
37372: PUSH
37373: LD_VAR 0 18
37377: PPUSH
37378: LD_INT 22
37380: PUSH
37381: LD_VAR 0 16
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: PUSH
37390: LD_INT 2
37392: PUSH
37393: LD_INT 30
37395: PUSH
37396: LD_INT 0
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 30
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: LIST
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PPUSH
37422: CALL_OW 72
37426: ST_TO_ADDR
37427: GO 37581
37429: LD_INT 3
37431: DOUBLE
37432: EQUAL
37433: IFTRUE 37437
37435: GO 37499
37437: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37438: LD_ADDR_VAR 0 12
37442: PUSH
37443: LD_VAR 0 18
37447: PPUSH
37448: LD_INT 22
37450: PUSH
37451: LD_VAR 0 16
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: PUSH
37463: LD_INT 30
37465: PUSH
37466: LD_INT 2
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 30
37475: PUSH
37476: LD_INT 3
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: PUSH
37483: EMPTY
37484: LIST
37485: LIST
37486: LIST
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PPUSH
37492: CALL_OW 72
37496: ST_TO_ADDR
37497: GO 37581
37499: LD_INT 4
37501: DOUBLE
37502: EQUAL
37503: IFTRUE 37507
37505: GO 37580
37507: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37508: LD_ADDR_VAR 0 12
37512: PUSH
37513: LD_VAR 0 18
37517: PPUSH
37518: LD_INT 22
37520: PUSH
37521: LD_VAR 0 16
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: LD_INT 30
37535: PUSH
37536: LD_INT 6
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 30
37545: PUSH
37546: LD_INT 7
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: LD_INT 30
37555: PUSH
37556: LD_INT 8
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PPUSH
37573: CALL_OW 72
37577: ST_TO_ADDR
37578: GO 37581
37580: POP
// if i = 1 then
37581: LD_VAR 0 8
37585: PUSH
37586: LD_INT 1
37588: EQUAL
37589: IFFALSE 37700
// begin tmp := [ ] ;
37591: LD_ADDR_VAR 0 19
37595: PUSH
37596: EMPTY
37597: ST_TO_ADDR
// for j in f do
37598: LD_ADDR_VAR 0 9
37602: PUSH
37603: LD_VAR 0 12
37607: PUSH
37608: FOR_IN
37609: IFFALSE 37682
// if GetBType ( j ) = b_bunker then
37611: LD_VAR 0 9
37615: PPUSH
37616: CALL_OW 266
37620: PUSH
37621: LD_INT 32
37623: EQUAL
37624: IFFALSE 37651
// tmp := Insert ( tmp , 1 , j ) else
37626: LD_ADDR_VAR 0 19
37630: PUSH
37631: LD_VAR 0 19
37635: PPUSH
37636: LD_INT 1
37638: PPUSH
37639: LD_VAR 0 9
37643: PPUSH
37644: CALL_OW 2
37648: ST_TO_ADDR
37649: GO 37680
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37651: LD_ADDR_VAR 0 19
37655: PUSH
37656: LD_VAR 0 19
37660: PPUSH
37661: LD_VAR 0 19
37665: PUSH
37666: LD_INT 1
37668: PLUS
37669: PPUSH
37670: LD_VAR 0 9
37674: PPUSH
37675: CALL_OW 2
37679: ST_TO_ADDR
37680: GO 37608
37682: POP
37683: POP
// if tmp then
37684: LD_VAR 0 19
37688: IFFALSE 37700
// f := tmp ;
37690: LD_ADDR_VAR 0 12
37694: PUSH
37695: LD_VAR 0 19
37699: ST_TO_ADDR
// end ; x := personel [ i ] ;
37700: LD_ADDR_VAR 0 13
37704: PUSH
37705: LD_VAR 0 6
37709: PUSH
37710: LD_VAR 0 8
37714: ARRAY
37715: ST_TO_ADDR
// if x = - 1 then
37716: LD_VAR 0 13
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: EQUAL
37725: IFFALSE 37934
// begin for j in f do
37727: LD_ADDR_VAR 0 9
37731: PUSH
37732: LD_VAR 0 12
37736: PUSH
37737: FOR_IN
37738: IFFALSE 37930
// repeat InitHc ;
37740: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37744: LD_VAR 0 9
37748: PPUSH
37749: CALL_OW 266
37753: PUSH
37754: LD_INT 5
37756: EQUAL
37757: IFFALSE 37827
// begin if UnitsInside ( j ) < 3 then
37759: LD_VAR 0 9
37763: PPUSH
37764: CALL_OW 313
37768: PUSH
37769: LD_INT 3
37771: LESS
37772: IFFALSE 37808
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37774: LD_INT 0
37776: PPUSH
37777: LD_INT 5
37779: PUSH
37780: LD_INT 8
37782: PUSH
37783: LD_INT 9
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: LIST
37790: PUSH
37791: LD_VAR 0 17
37795: ARRAY
37796: PPUSH
37797: LD_VAR 0 4
37801: PPUSH
37802: CALL_OW 380
37806: GO 37825
// PrepareHuman ( false , i , skill ) ;
37808: LD_INT 0
37810: PPUSH
37811: LD_VAR 0 8
37815: PPUSH
37816: LD_VAR 0 4
37820: PPUSH
37821: CALL_OW 380
// end else
37825: GO 37844
// PrepareHuman ( false , i , skill ) ;
37827: LD_INT 0
37829: PPUSH
37830: LD_VAR 0 8
37834: PPUSH
37835: LD_VAR 0 4
37839: PPUSH
37840: CALL_OW 380
// un := CreateHuman ;
37844: LD_ADDR_VAR 0 14
37848: PUSH
37849: CALL_OW 44
37853: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37854: LD_ADDR_VAR 0 7
37858: PUSH
37859: LD_VAR 0 7
37863: PPUSH
37864: LD_INT 1
37866: PPUSH
37867: LD_VAR 0 14
37871: PPUSH
37872: CALL_OW 2
37876: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37877: LD_VAR 0 14
37881: PPUSH
37882: LD_VAR 0 9
37886: PPUSH
37887: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37891: LD_VAR 0 9
37895: PPUSH
37896: CALL_OW 313
37900: PUSH
37901: LD_INT 6
37903: EQUAL
37904: PUSH
37905: LD_VAR 0 9
37909: PPUSH
37910: CALL_OW 266
37914: PUSH
37915: LD_INT 32
37917: PUSH
37918: LD_INT 31
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: IN
37925: OR
37926: IFFALSE 37740
37928: GO 37737
37930: POP
37931: POP
// end else
37932: GO 38314
// for j = 1 to x do
37934: LD_ADDR_VAR 0 9
37938: PUSH
37939: DOUBLE
37940: LD_INT 1
37942: DEC
37943: ST_TO_ADDR
37944: LD_VAR 0 13
37948: PUSH
37949: FOR_TO
37950: IFFALSE 38312
// begin InitHc ;
37952: CALL_OW 19
// if not f then
37956: LD_VAR 0 12
37960: NOT
37961: IFFALSE 38050
// begin PrepareHuman ( false , i , skill ) ;
37963: LD_INT 0
37965: PPUSH
37966: LD_VAR 0 8
37970: PPUSH
37971: LD_VAR 0 4
37975: PPUSH
37976: CALL_OW 380
// un := CreateHuman ;
37980: LD_ADDR_VAR 0 14
37984: PUSH
37985: CALL_OW 44
37989: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37990: LD_ADDR_VAR 0 7
37994: PUSH
37995: LD_VAR 0 7
37999: PPUSH
38000: LD_INT 1
38002: PPUSH
38003: LD_VAR 0 14
38007: PPUSH
38008: CALL_OW 2
38012: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38013: LD_VAR 0 14
38017: PPUSH
38018: LD_VAR 0 1
38022: PPUSH
38023: CALL_OW 250
38027: PPUSH
38028: LD_VAR 0 1
38032: PPUSH
38033: CALL_OW 251
38037: PPUSH
38038: LD_INT 10
38040: PPUSH
38041: LD_INT 0
38043: PPUSH
38044: CALL_OW 50
// continue ;
38048: GO 37949
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38050: LD_VAR 0 12
38054: PUSH
38055: LD_INT 1
38057: ARRAY
38058: PPUSH
38059: CALL_OW 313
38063: PUSH
38064: LD_VAR 0 12
38068: PUSH
38069: LD_INT 1
38071: ARRAY
38072: PPUSH
38073: CALL_OW 266
38077: PUSH
38078: LD_INT 32
38080: PUSH
38081: LD_INT 31
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: IN
38088: AND
38089: PUSH
38090: LD_VAR 0 12
38094: PUSH
38095: LD_INT 1
38097: ARRAY
38098: PPUSH
38099: CALL_OW 313
38103: PUSH
38104: LD_INT 6
38106: EQUAL
38107: OR
38108: IFFALSE 38128
// f := Delete ( f , 1 ) ;
38110: LD_ADDR_VAR 0 12
38114: PUSH
38115: LD_VAR 0 12
38119: PPUSH
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 3
38127: ST_TO_ADDR
// if not f then
38128: LD_VAR 0 12
38132: NOT
38133: IFFALSE 38151
// begin x := x + 2 ;
38135: LD_ADDR_VAR 0 13
38139: PUSH
38140: LD_VAR 0 13
38144: PUSH
38145: LD_INT 2
38147: PLUS
38148: ST_TO_ADDR
// continue ;
38149: GO 37949
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38151: LD_VAR 0 12
38155: PUSH
38156: LD_INT 1
38158: ARRAY
38159: PPUSH
38160: CALL_OW 266
38164: PUSH
38165: LD_INT 5
38167: EQUAL
38168: IFFALSE 38242
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38170: LD_VAR 0 12
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: CALL_OW 313
38183: PUSH
38184: LD_INT 3
38186: LESS
38187: IFFALSE 38223
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38189: LD_INT 0
38191: PPUSH
38192: LD_INT 5
38194: PUSH
38195: LD_INT 8
38197: PUSH
38198: LD_INT 9
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: PUSH
38206: LD_VAR 0 17
38210: ARRAY
38211: PPUSH
38212: LD_VAR 0 4
38216: PPUSH
38217: CALL_OW 380
38221: GO 38240
// PrepareHuman ( false , i , skill ) ;
38223: LD_INT 0
38225: PPUSH
38226: LD_VAR 0 8
38230: PPUSH
38231: LD_VAR 0 4
38235: PPUSH
38236: CALL_OW 380
// end else
38240: GO 38259
// PrepareHuman ( false , i , skill ) ;
38242: LD_INT 0
38244: PPUSH
38245: LD_VAR 0 8
38249: PPUSH
38250: LD_VAR 0 4
38254: PPUSH
38255: CALL_OW 380
// un := CreateHuman ;
38259: LD_ADDR_VAR 0 14
38263: PUSH
38264: CALL_OW 44
38268: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38269: LD_ADDR_VAR 0 7
38273: PUSH
38274: LD_VAR 0 7
38278: PPUSH
38279: LD_INT 1
38281: PPUSH
38282: LD_VAR 0 14
38286: PPUSH
38287: CALL_OW 2
38291: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38292: LD_VAR 0 14
38296: PPUSH
38297: LD_VAR 0 12
38301: PUSH
38302: LD_INT 1
38304: ARRAY
38305: PPUSH
38306: CALL_OW 52
// end ;
38310: GO 37949
38312: POP
38313: POP
// end ;
38314: GO 37251
38316: POP
38317: POP
// result := result ^ buildings ;
38318: LD_ADDR_VAR 0 7
38322: PUSH
38323: LD_VAR 0 7
38327: PUSH
38328: LD_VAR 0 18
38332: ADD
38333: ST_TO_ADDR
// end else
38334: GO 38477
// begin for i = 1 to personel do
38336: LD_ADDR_VAR 0 8
38340: PUSH
38341: DOUBLE
38342: LD_INT 1
38344: DEC
38345: ST_TO_ADDR
38346: LD_VAR 0 6
38350: PUSH
38351: FOR_TO
38352: IFFALSE 38475
// begin if i > 4 then
38354: LD_VAR 0 8
38358: PUSH
38359: LD_INT 4
38361: GREATER
38362: IFFALSE 38366
// break ;
38364: GO 38475
// x := personel [ i ] ;
38366: LD_ADDR_VAR 0 13
38370: PUSH
38371: LD_VAR 0 6
38375: PUSH
38376: LD_VAR 0 8
38380: ARRAY
38381: ST_TO_ADDR
// if x = - 1 then
38382: LD_VAR 0 13
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: EQUAL
38391: IFFALSE 38395
// continue ;
38393: GO 38351
// PrepareHuman ( false , i , skill ) ;
38395: LD_INT 0
38397: PPUSH
38398: LD_VAR 0 8
38402: PPUSH
38403: LD_VAR 0 4
38407: PPUSH
38408: CALL_OW 380
// un := CreateHuman ;
38412: LD_ADDR_VAR 0 14
38416: PUSH
38417: CALL_OW 44
38421: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38422: LD_VAR 0 14
38426: PPUSH
38427: LD_VAR 0 1
38431: PPUSH
38432: CALL_OW 250
38436: PPUSH
38437: LD_VAR 0 1
38441: PPUSH
38442: CALL_OW 251
38446: PPUSH
38447: LD_INT 10
38449: PPUSH
38450: LD_INT 0
38452: PPUSH
38453: CALL_OW 50
// result := result ^ un ;
38457: LD_ADDR_VAR 0 7
38461: PUSH
38462: LD_VAR 0 7
38466: PUSH
38467: LD_VAR 0 14
38471: ADD
38472: ST_TO_ADDR
// end ;
38473: GO 38351
38475: POP
38476: POP
// end ; end ;
38477: LD_VAR 0 7
38481: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38482: LD_INT 0
38484: PPUSH
38485: PPUSH
38486: PPUSH
38487: PPUSH
38488: PPUSH
38489: PPUSH
38490: PPUSH
38491: PPUSH
38492: PPUSH
38493: PPUSH
38494: PPUSH
38495: PPUSH
38496: PPUSH
38497: PPUSH
38498: PPUSH
38499: PPUSH
// result := false ;
38500: LD_ADDR_VAR 0 3
38504: PUSH
38505: LD_INT 0
38507: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38508: LD_VAR 0 1
38512: NOT
38513: PUSH
38514: LD_VAR 0 1
38518: PPUSH
38519: CALL_OW 266
38523: PUSH
38524: LD_INT 32
38526: PUSH
38527: LD_INT 33
38529: PUSH
38530: EMPTY
38531: LIST
38532: LIST
38533: IN
38534: NOT
38535: OR
38536: IFFALSE 38540
// exit ;
38538: GO 39649
// nat := GetNation ( tower ) ;
38540: LD_ADDR_VAR 0 12
38544: PUSH
38545: LD_VAR 0 1
38549: PPUSH
38550: CALL_OW 248
38554: ST_TO_ADDR
// side := GetSide ( tower ) ;
38555: LD_ADDR_VAR 0 16
38559: PUSH
38560: LD_VAR 0 1
38564: PPUSH
38565: CALL_OW 255
38569: ST_TO_ADDR
// x := GetX ( tower ) ;
38570: LD_ADDR_VAR 0 10
38574: PUSH
38575: LD_VAR 0 1
38579: PPUSH
38580: CALL_OW 250
38584: ST_TO_ADDR
// y := GetY ( tower ) ;
38585: LD_ADDR_VAR 0 11
38589: PUSH
38590: LD_VAR 0 1
38594: PPUSH
38595: CALL_OW 251
38599: ST_TO_ADDR
// if not x or not y then
38600: LD_VAR 0 10
38604: NOT
38605: PUSH
38606: LD_VAR 0 11
38610: NOT
38611: OR
38612: IFFALSE 38616
// exit ;
38614: GO 39649
// weapon := 0 ;
38616: LD_ADDR_VAR 0 18
38620: PUSH
38621: LD_INT 0
38623: ST_TO_ADDR
// fac_list := [ ] ;
38624: LD_ADDR_VAR 0 17
38628: PUSH
38629: EMPTY
38630: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38631: LD_ADDR_VAR 0 6
38635: PUSH
38636: LD_VAR 0 1
38640: PPUSH
38641: CALL_OW 274
38645: PPUSH
38646: LD_VAR 0 2
38650: PPUSH
38651: LD_INT 0
38653: PPUSH
38654: CALL 36220 0 3
38658: PPUSH
38659: LD_INT 30
38661: PUSH
38662: LD_INT 3
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PPUSH
38669: CALL_OW 72
38673: ST_TO_ADDR
// if not factories then
38674: LD_VAR 0 6
38678: NOT
38679: IFFALSE 38683
// exit ;
38681: GO 39649
// for i in factories do
38683: LD_ADDR_VAR 0 8
38687: PUSH
38688: LD_VAR 0 6
38692: PUSH
38693: FOR_IN
38694: IFFALSE 38719
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38696: LD_ADDR_VAR 0 17
38700: PUSH
38701: LD_VAR 0 17
38705: PUSH
38706: LD_VAR 0 8
38710: PPUSH
38711: CALL_OW 478
38715: UNION
38716: ST_TO_ADDR
38717: GO 38693
38719: POP
38720: POP
// if not fac_list then
38721: LD_VAR 0 17
38725: NOT
38726: IFFALSE 38730
// exit ;
38728: GO 39649
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38730: LD_ADDR_VAR 0 5
38734: PUSH
38735: LD_INT 4
38737: PUSH
38738: LD_INT 5
38740: PUSH
38741: LD_INT 9
38743: PUSH
38744: LD_INT 10
38746: PUSH
38747: LD_INT 6
38749: PUSH
38750: LD_INT 7
38752: PUSH
38753: LD_INT 11
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 27
38767: PUSH
38768: LD_INT 28
38770: PUSH
38771: LD_INT 26
38773: PUSH
38774: LD_INT 30
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 43
38785: PUSH
38786: LD_INT 44
38788: PUSH
38789: LD_INT 46
38791: PUSH
38792: LD_INT 45
38794: PUSH
38795: LD_INT 47
38797: PUSH
38798: LD_INT 49
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: LIST
38813: PUSH
38814: LD_VAR 0 12
38818: ARRAY
38819: ST_TO_ADDR
// list := list isect fac_list ;
38820: LD_ADDR_VAR 0 5
38824: PUSH
38825: LD_VAR 0 5
38829: PUSH
38830: LD_VAR 0 17
38834: ISECT
38835: ST_TO_ADDR
// if not list then
38836: LD_VAR 0 5
38840: NOT
38841: IFFALSE 38845
// exit ;
38843: GO 39649
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38845: LD_VAR 0 12
38849: PUSH
38850: LD_INT 3
38852: EQUAL
38853: PUSH
38854: LD_INT 49
38856: PUSH
38857: LD_VAR 0 5
38861: IN
38862: AND
38863: PUSH
38864: LD_INT 31
38866: PPUSH
38867: LD_VAR 0 16
38871: PPUSH
38872: CALL_OW 321
38876: PUSH
38877: LD_INT 2
38879: EQUAL
38880: AND
38881: IFFALSE 38941
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38883: LD_INT 22
38885: PUSH
38886: LD_VAR 0 16
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 35
38897: PUSH
38898: LD_INT 49
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 91
38907: PUSH
38908: LD_VAR 0 1
38912: PUSH
38913: LD_INT 10
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: PPUSH
38926: CALL_OW 69
38930: NOT
38931: IFFALSE 38941
// weapon := ru_time_lapser ;
38933: LD_ADDR_VAR 0 18
38937: PUSH
38938: LD_INT 49
38940: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38941: LD_VAR 0 12
38945: PUSH
38946: LD_INT 1
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: IN
38956: PUSH
38957: LD_INT 11
38959: PUSH
38960: LD_VAR 0 5
38964: IN
38965: PUSH
38966: LD_INT 30
38968: PUSH
38969: LD_VAR 0 5
38973: IN
38974: OR
38975: AND
38976: PUSH
38977: LD_INT 6
38979: PPUSH
38980: LD_VAR 0 16
38984: PPUSH
38985: CALL_OW 321
38989: PUSH
38990: LD_INT 2
38992: EQUAL
38993: AND
38994: IFFALSE 39159
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38996: LD_INT 22
38998: PUSH
38999: LD_VAR 0 16
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 2
39010: PUSH
39011: LD_INT 35
39013: PUSH
39014: LD_INT 11
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 35
39023: PUSH
39024: LD_INT 30
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 91
39038: PUSH
39039: LD_VAR 0 1
39043: PUSH
39044: LD_INT 18
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: LIST
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: LIST
39056: PPUSH
39057: CALL_OW 69
39061: NOT
39062: PUSH
39063: LD_INT 22
39065: PUSH
39066: LD_VAR 0 16
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: LD_INT 30
39080: PUSH
39081: LD_INT 32
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 30
39090: PUSH
39091: LD_INT 33
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 91
39105: PUSH
39106: LD_VAR 0 1
39110: PUSH
39111: LD_INT 12
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: PUSH
39124: EMPTY
39125: LIST
39126: PPUSH
39127: CALL_OW 69
39131: PUSH
39132: LD_INT 2
39134: GREATER
39135: AND
39136: IFFALSE 39159
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39138: LD_ADDR_VAR 0 18
39142: PUSH
39143: LD_INT 11
39145: PUSH
39146: LD_INT 30
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_VAR 0 12
39157: ARRAY
39158: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39159: LD_VAR 0 18
39163: NOT
39164: PUSH
39165: LD_INT 40
39167: PPUSH
39168: LD_VAR 0 16
39172: PPUSH
39173: CALL_OW 321
39177: PUSH
39178: LD_INT 2
39180: EQUAL
39181: AND
39182: PUSH
39183: LD_INT 7
39185: PUSH
39186: LD_VAR 0 5
39190: IN
39191: PUSH
39192: LD_INT 28
39194: PUSH
39195: LD_VAR 0 5
39199: IN
39200: OR
39201: PUSH
39202: LD_INT 45
39204: PUSH
39205: LD_VAR 0 5
39209: IN
39210: OR
39211: AND
39212: IFFALSE 39466
// begin hex := GetHexInfo ( x , y ) ;
39214: LD_ADDR_VAR 0 4
39218: PUSH
39219: LD_VAR 0 10
39223: PPUSH
39224: LD_VAR 0 11
39228: PPUSH
39229: CALL_OW 546
39233: ST_TO_ADDR
// if hex [ 1 ] then
39234: LD_VAR 0 4
39238: PUSH
39239: LD_INT 1
39241: ARRAY
39242: IFFALSE 39246
// exit ;
39244: GO 39649
// height := hex [ 2 ] ;
39246: LD_ADDR_VAR 0 15
39250: PUSH
39251: LD_VAR 0 4
39255: PUSH
39256: LD_INT 2
39258: ARRAY
39259: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39260: LD_ADDR_VAR 0 14
39264: PUSH
39265: LD_INT 0
39267: PUSH
39268: LD_INT 2
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: LD_INT 5
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// for i in tmp do
39283: LD_ADDR_VAR 0 8
39287: PUSH
39288: LD_VAR 0 14
39292: PUSH
39293: FOR_IN
39294: IFFALSE 39464
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39296: LD_ADDR_VAR 0 9
39300: PUSH
39301: LD_VAR 0 10
39305: PPUSH
39306: LD_VAR 0 8
39310: PPUSH
39311: LD_INT 5
39313: PPUSH
39314: CALL_OW 272
39318: PUSH
39319: LD_VAR 0 11
39323: PPUSH
39324: LD_VAR 0 8
39328: PPUSH
39329: LD_INT 5
39331: PPUSH
39332: CALL_OW 273
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39341: LD_VAR 0 9
39345: PUSH
39346: LD_INT 1
39348: ARRAY
39349: PPUSH
39350: LD_VAR 0 9
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: PPUSH
39359: CALL_OW 488
39363: IFFALSE 39462
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39365: LD_ADDR_VAR 0 4
39369: PUSH
39370: LD_VAR 0 9
39374: PUSH
39375: LD_INT 1
39377: ARRAY
39378: PPUSH
39379: LD_VAR 0 9
39383: PUSH
39384: LD_INT 2
39386: ARRAY
39387: PPUSH
39388: CALL_OW 546
39392: ST_TO_ADDR
// if hex [ 1 ] then
39393: LD_VAR 0 4
39397: PUSH
39398: LD_INT 1
39400: ARRAY
39401: IFFALSE 39405
// continue ;
39403: GO 39293
// h := hex [ 2 ] ;
39405: LD_ADDR_VAR 0 13
39409: PUSH
39410: LD_VAR 0 4
39414: PUSH
39415: LD_INT 2
39417: ARRAY
39418: ST_TO_ADDR
// if h + 7 < height then
39419: LD_VAR 0 13
39423: PUSH
39424: LD_INT 7
39426: PLUS
39427: PUSH
39428: LD_VAR 0 15
39432: LESS
39433: IFFALSE 39462
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39435: LD_ADDR_VAR 0 18
39439: PUSH
39440: LD_INT 7
39442: PUSH
39443: LD_INT 28
39445: PUSH
39446: LD_INT 45
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: PUSH
39454: LD_VAR 0 12
39458: ARRAY
39459: ST_TO_ADDR
// break ;
39460: GO 39464
// end ; end ; end ;
39462: GO 39293
39464: POP
39465: POP
// end ; if not weapon then
39466: LD_VAR 0 18
39470: NOT
39471: IFFALSE 39531
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39473: LD_ADDR_VAR 0 5
39477: PUSH
39478: LD_VAR 0 5
39482: PUSH
39483: LD_INT 11
39485: PUSH
39486: LD_INT 30
39488: PUSH
39489: LD_INT 49
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: DIFF
39497: ST_TO_ADDR
// if not list then
39498: LD_VAR 0 5
39502: NOT
39503: IFFALSE 39507
// exit ;
39505: GO 39649
// weapon := list [ rand ( 1 , list ) ] ;
39507: LD_ADDR_VAR 0 18
39511: PUSH
39512: LD_VAR 0 5
39516: PUSH
39517: LD_INT 1
39519: PPUSH
39520: LD_VAR 0 5
39524: PPUSH
39525: CALL_OW 12
39529: ARRAY
39530: ST_TO_ADDR
// end ; if weapon then
39531: LD_VAR 0 18
39535: IFFALSE 39649
// begin tmp := CostOfWeapon ( weapon ) ;
39537: LD_ADDR_VAR 0 14
39541: PUSH
39542: LD_VAR 0 18
39546: PPUSH
39547: CALL_OW 451
39551: ST_TO_ADDR
// j := GetBase ( tower ) ;
39552: LD_ADDR_VAR 0 9
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 274
39566: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39567: LD_VAR 0 9
39571: PPUSH
39572: LD_INT 1
39574: PPUSH
39575: CALL_OW 275
39579: PUSH
39580: LD_VAR 0 14
39584: PUSH
39585: LD_INT 1
39587: ARRAY
39588: GREATEREQUAL
39589: PUSH
39590: LD_VAR 0 9
39594: PPUSH
39595: LD_INT 2
39597: PPUSH
39598: CALL_OW 275
39602: PUSH
39603: LD_VAR 0 14
39607: PUSH
39608: LD_INT 2
39610: ARRAY
39611: GREATEREQUAL
39612: AND
39613: PUSH
39614: LD_VAR 0 9
39618: PPUSH
39619: LD_INT 3
39621: PPUSH
39622: CALL_OW 275
39626: PUSH
39627: LD_VAR 0 14
39631: PUSH
39632: LD_INT 3
39634: ARRAY
39635: GREATEREQUAL
39636: AND
39637: IFFALSE 39649
// result := weapon ;
39639: LD_ADDR_VAR 0 3
39643: PUSH
39644: LD_VAR 0 18
39648: ST_TO_ADDR
// end ; end ;
39649: LD_VAR 0 3
39653: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39654: LD_INT 0
39656: PPUSH
39657: PPUSH
// result := true ;
39658: LD_ADDR_VAR 0 3
39662: PUSH
39663: LD_INT 1
39665: ST_TO_ADDR
// if array1 = array2 then
39666: LD_VAR 0 1
39670: PUSH
39671: LD_VAR 0 2
39675: EQUAL
39676: IFFALSE 39736
// begin for i = 1 to array1 do
39678: LD_ADDR_VAR 0 4
39682: PUSH
39683: DOUBLE
39684: LD_INT 1
39686: DEC
39687: ST_TO_ADDR
39688: LD_VAR 0 1
39692: PUSH
39693: FOR_TO
39694: IFFALSE 39732
// if array1 [ i ] <> array2 [ i ] then
39696: LD_VAR 0 1
39700: PUSH
39701: LD_VAR 0 4
39705: ARRAY
39706: PUSH
39707: LD_VAR 0 2
39711: PUSH
39712: LD_VAR 0 4
39716: ARRAY
39717: NONEQUAL
39718: IFFALSE 39730
// begin result := false ;
39720: LD_ADDR_VAR 0 3
39724: PUSH
39725: LD_INT 0
39727: ST_TO_ADDR
// break ;
39728: GO 39732
// end ;
39730: GO 39693
39732: POP
39733: POP
// end else
39734: GO 39744
// result := false ;
39736: LD_ADDR_VAR 0 3
39740: PUSH
39741: LD_INT 0
39743: ST_TO_ADDR
// end ;
39744: LD_VAR 0 3
39748: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39749: LD_INT 0
39751: PPUSH
39752: PPUSH
// if not array1 or not array2 then
39753: LD_VAR 0 1
39757: NOT
39758: PUSH
39759: LD_VAR 0 2
39763: NOT
39764: OR
39765: IFFALSE 39769
// exit ;
39767: GO 39833
// result := true ;
39769: LD_ADDR_VAR 0 3
39773: PUSH
39774: LD_INT 1
39776: ST_TO_ADDR
// for i = 1 to array1 do
39777: LD_ADDR_VAR 0 4
39781: PUSH
39782: DOUBLE
39783: LD_INT 1
39785: DEC
39786: ST_TO_ADDR
39787: LD_VAR 0 1
39791: PUSH
39792: FOR_TO
39793: IFFALSE 39831
// if array1 [ i ] <> array2 [ i ] then
39795: LD_VAR 0 1
39799: PUSH
39800: LD_VAR 0 4
39804: ARRAY
39805: PUSH
39806: LD_VAR 0 2
39810: PUSH
39811: LD_VAR 0 4
39815: ARRAY
39816: NONEQUAL
39817: IFFALSE 39829
// begin result := false ;
39819: LD_ADDR_VAR 0 3
39823: PUSH
39824: LD_INT 0
39826: ST_TO_ADDR
// break ;
39827: GO 39831
// end ;
39829: GO 39792
39831: POP
39832: POP
// end ;
39833: LD_VAR 0 3
39837: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39838: LD_INT 0
39840: PPUSH
39841: PPUSH
39842: PPUSH
// pom := GetBase ( fac ) ;
39843: LD_ADDR_VAR 0 5
39847: PUSH
39848: LD_VAR 0 1
39852: PPUSH
39853: CALL_OW 274
39857: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39858: LD_ADDR_VAR 0 4
39862: PUSH
39863: LD_VAR 0 2
39867: PUSH
39868: LD_INT 1
39870: ARRAY
39871: PPUSH
39872: LD_VAR 0 2
39876: PUSH
39877: LD_INT 2
39879: ARRAY
39880: PPUSH
39881: LD_VAR 0 2
39885: PUSH
39886: LD_INT 3
39888: ARRAY
39889: PPUSH
39890: LD_VAR 0 2
39894: PUSH
39895: LD_INT 4
39897: ARRAY
39898: PPUSH
39899: CALL_OW 449
39903: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39904: LD_ADDR_VAR 0 3
39908: PUSH
39909: LD_VAR 0 5
39913: PPUSH
39914: LD_INT 1
39916: PPUSH
39917: CALL_OW 275
39921: PUSH
39922: LD_VAR 0 4
39926: PUSH
39927: LD_INT 1
39929: ARRAY
39930: GREATEREQUAL
39931: PUSH
39932: LD_VAR 0 5
39936: PPUSH
39937: LD_INT 2
39939: PPUSH
39940: CALL_OW 275
39944: PUSH
39945: LD_VAR 0 4
39949: PUSH
39950: LD_INT 2
39952: ARRAY
39953: GREATEREQUAL
39954: AND
39955: PUSH
39956: LD_VAR 0 5
39960: PPUSH
39961: LD_INT 3
39963: PPUSH
39964: CALL_OW 275
39968: PUSH
39969: LD_VAR 0 4
39973: PUSH
39974: LD_INT 3
39976: ARRAY
39977: GREATEREQUAL
39978: AND
39979: ST_TO_ADDR
// end ;
39980: LD_VAR 0 3
39984: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39985: LD_INT 0
39987: PPUSH
39988: PPUSH
39989: PPUSH
39990: PPUSH
// pom := GetBase ( building ) ;
39991: LD_ADDR_VAR 0 3
39995: PUSH
39996: LD_VAR 0 1
40000: PPUSH
40001: CALL_OW 274
40005: ST_TO_ADDR
// if not pom then
40006: LD_VAR 0 3
40010: NOT
40011: IFFALSE 40015
// exit ;
40013: GO 40185
// btype := GetBType ( building ) ;
40015: LD_ADDR_VAR 0 5
40019: PUSH
40020: LD_VAR 0 1
40024: PPUSH
40025: CALL_OW 266
40029: ST_TO_ADDR
// if btype = b_armoury then
40030: LD_VAR 0 5
40034: PUSH
40035: LD_INT 4
40037: EQUAL
40038: IFFALSE 40048
// btype := b_barracks ;
40040: LD_ADDR_VAR 0 5
40044: PUSH
40045: LD_INT 5
40047: ST_TO_ADDR
// if btype = b_depot then
40048: LD_VAR 0 5
40052: PUSH
40053: LD_INT 0
40055: EQUAL
40056: IFFALSE 40066
// btype := b_warehouse ;
40058: LD_ADDR_VAR 0 5
40062: PUSH
40063: LD_INT 1
40065: ST_TO_ADDR
// if btype = b_workshop then
40066: LD_VAR 0 5
40070: PUSH
40071: LD_INT 2
40073: EQUAL
40074: IFFALSE 40084
// btype := b_factory ;
40076: LD_ADDR_VAR 0 5
40080: PUSH
40081: LD_INT 3
40083: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40084: LD_ADDR_VAR 0 4
40088: PUSH
40089: LD_VAR 0 5
40093: PPUSH
40094: LD_VAR 0 1
40098: PPUSH
40099: CALL_OW 248
40103: PPUSH
40104: CALL_OW 450
40108: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40109: LD_ADDR_VAR 0 2
40113: PUSH
40114: LD_VAR 0 3
40118: PPUSH
40119: LD_INT 1
40121: PPUSH
40122: CALL_OW 275
40126: PUSH
40127: LD_VAR 0 4
40131: PUSH
40132: LD_INT 1
40134: ARRAY
40135: GREATEREQUAL
40136: PUSH
40137: LD_VAR 0 3
40141: PPUSH
40142: LD_INT 2
40144: PPUSH
40145: CALL_OW 275
40149: PUSH
40150: LD_VAR 0 4
40154: PUSH
40155: LD_INT 2
40157: ARRAY
40158: GREATEREQUAL
40159: AND
40160: PUSH
40161: LD_VAR 0 3
40165: PPUSH
40166: LD_INT 3
40168: PPUSH
40169: CALL_OW 275
40173: PUSH
40174: LD_VAR 0 4
40178: PUSH
40179: LD_INT 3
40181: ARRAY
40182: GREATEREQUAL
40183: AND
40184: ST_TO_ADDR
// end ;
40185: LD_VAR 0 2
40189: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40190: LD_INT 0
40192: PPUSH
40193: PPUSH
40194: PPUSH
// pom := GetBase ( building ) ;
40195: LD_ADDR_VAR 0 4
40199: PUSH
40200: LD_VAR 0 1
40204: PPUSH
40205: CALL_OW 274
40209: ST_TO_ADDR
// if not pom then
40210: LD_VAR 0 4
40214: NOT
40215: IFFALSE 40219
// exit ;
40217: GO 40320
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40219: LD_ADDR_VAR 0 5
40223: PUSH
40224: LD_VAR 0 2
40228: PPUSH
40229: LD_VAR 0 1
40233: PPUSH
40234: CALL_OW 248
40238: PPUSH
40239: CALL_OW 450
40243: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40244: LD_ADDR_VAR 0 3
40248: PUSH
40249: LD_VAR 0 4
40253: PPUSH
40254: LD_INT 1
40256: PPUSH
40257: CALL_OW 275
40261: PUSH
40262: LD_VAR 0 5
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: GREATEREQUAL
40271: PUSH
40272: LD_VAR 0 4
40276: PPUSH
40277: LD_INT 2
40279: PPUSH
40280: CALL_OW 275
40284: PUSH
40285: LD_VAR 0 5
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: GREATEREQUAL
40294: AND
40295: PUSH
40296: LD_VAR 0 4
40300: PPUSH
40301: LD_INT 3
40303: PPUSH
40304: CALL_OW 275
40308: PUSH
40309: LD_VAR 0 5
40313: PUSH
40314: LD_INT 3
40316: ARRAY
40317: GREATEREQUAL
40318: AND
40319: ST_TO_ADDR
// end ;
40320: LD_VAR 0 3
40324: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40325: LD_INT 0
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
// result := false ;
40338: LD_ADDR_VAR 0 8
40342: PUSH
40343: LD_INT 0
40345: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40346: LD_VAR 0 5
40350: NOT
40351: PUSH
40352: LD_VAR 0 1
40356: NOT
40357: OR
40358: PUSH
40359: LD_VAR 0 2
40363: NOT
40364: OR
40365: PUSH
40366: LD_VAR 0 3
40370: NOT
40371: OR
40372: IFFALSE 40376
// exit ;
40374: GO 41190
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40376: LD_ADDR_VAR 0 14
40380: PUSH
40381: LD_VAR 0 1
40385: PPUSH
40386: LD_VAR 0 2
40390: PPUSH
40391: LD_VAR 0 3
40395: PPUSH
40396: LD_VAR 0 4
40400: PPUSH
40401: LD_VAR 0 5
40405: PUSH
40406: LD_INT 1
40408: ARRAY
40409: PPUSH
40410: CALL_OW 248
40414: PPUSH
40415: LD_INT 0
40417: PPUSH
40418: CALL 42443 0 6
40422: ST_TO_ADDR
// if not hexes then
40423: LD_VAR 0 14
40427: NOT
40428: IFFALSE 40432
// exit ;
40430: GO 41190
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40432: LD_ADDR_VAR 0 17
40436: PUSH
40437: LD_VAR 0 5
40441: PPUSH
40442: LD_INT 22
40444: PUSH
40445: LD_VAR 0 13
40449: PPUSH
40450: CALL_OW 255
40454: PUSH
40455: EMPTY
40456: LIST
40457: LIST
40458: PUSH
40459: LD_INT 2
40461: PUSH
40462: LD_INT 30
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 30
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: LIST
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PPUSH
40491: CALL_OW 72
40495: ST_TO_ADDR
// for i = 1 to hexes do
40496: LD_ADDR_VAR 0 9
40500: PUSH
40501: DOUBLE
40502: LD_INT 1
40504: DEC
40505: ST_TO_ADDR
40506: LD_VAR 0 14
40510: PUSH
40511: FOR_TO
40512: IFFALSE 41188
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40514: LD_ADDR_VAR 0 13
40518: PUSH
40519: LD_VAR 0 14
40523: PUSH
40524: LD_VAR 0 9
40528: ARRAY
40529: PUSH
40530: LD_INT 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 14
40538: PUSH
40539: LD_VAR 0 9
40543: ARRAY
40544: PUSH
40545: LD_INT 2
40547: ARRAY
40548: PPUSH
40549: CALL_OW 428
40553: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40554: LD_VAR 0 14
40558: PUSH
40559: LD_VAR 0 9
40563: ARRAY
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: PPUSH
40569: LD_VAR 0 14
40573: PUSH
40574: LD_VAR 0 9
40578: ARRAY
40579: PUSH
40580: LD_INT 2
40582: ARRAY
40583: PPUSH
40584: CALL_OW 351
40588: PUSH
40589: LD_VAR 0 14
40593: PUSH
40594: LD_VAR 0 9
40598: ARRAY
40599: PUSH
40600: LD_INT 1
40602: ARRAY
40603: PPUSH
40604: LD_VAR 0 14
40608: PUSH
40609: LD_VAR 0 9
40613: ARRAY
40614: PUSH
40615: LD_INT 2
40617: ARRAY
40618: PPUSH
40619: CALL_OW 488
40623: NOT
40624: OR
40625: PUSH
40626: LD_VAR 0 13
40630: PPUSH
40631: CALL_OW 247
40635: PUSH
40636: LD_INT 3
40638: EQUAL
40639: OR
40640: IFFALSE 40646
// exit ;
40642: POP
40643: POP
40644: GO 41190
// if not tmp then
40646: LD_VAR 0 13
40650: NOT
40651: IFFALSE 40655
// continue ;
40653: GO 40511
// result := true ;
40655: LD_ADDR_VAR 0 8
40659: PUSH
40660: LD_INT 1
40662: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40663: LD_VAR 0 6
40667: PUSH
40668: LD_VAR 0 13
40672: PPUSH
40673: CALL_OW 247
40677: PUSH
40678: LD_INT 2
40680: EQUAL
40681: AND
40682: PUSH
40683: LD_VAR 0 13
40687: PPUSH
40688: CALL_OW 263
40692: PUSH
40693: LD_INT 1
40695: EQUAL
40696: AND
40697: IFFALSE 40861
// begin if IsDrivenBy ( tmp ) then
40699: LD_VAR 0 13
40703: PPUSH
40704: CALL_OW 311
40708: IFFALSE 40712
// continue ;
40710: GO 40511
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40712: LD_VAR 0 6
40716: PPUSH
40717: LD_INT 3
40719: PUSH
40720: LD_INT 60
40722: PUSH
40723: EMPTY
40724: LIST
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PUSH
40730: LD_INT 3
40732: PUSH
40733: LD_INT 55
40735: PUSH
40736: EMPTY
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PPUSH
40747: CALL_OW 72
40751: IFFALSE 40859
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40753: LD_ADDR_VAR 0 18
40757: PUSH
40758: LD_VAR 0 6
40762: PPUSH
40763: LD_INT 3
40765: PUSH
40766: LD_INT 60
40768: PUSH
40769: EMPTY
40770: LIST
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 3
40778: PUSH
40779: LD_INT 55
40781: PUSH
40782: EMPTY
40783: LIST
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PPUSH
40793: CALL_OW 72
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: ST_TO_ADDR
// if IsInUnit ( driver ) then
40802: LD_VAR 0 18
40806: PPUSH
40807: CALL_OW 310
40811: IFFALSE 40822
// ComExit ( driver ) ;
40813: LD_VAR 0 18
40817: PPUSH
40818: CALL 66224 0 1
// AddComEnterUnit ( driver , tmp ) ;
40822: LD_VAR 0 18
40826: PPUSH
40827: LD_VAR 0 13
40831: PPUSH
40832: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40836: LD_VAR 0 18
40840: PPUSH
40841: LD_VAR 0 7
40845: PPUSH
40846: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40850: LD_VAR 0 18
40854: PPUSH
40855: CALL_OW 181
// end ; continue ;
40859: GO 40511
// end ; if not cleaners or not tmp in cleaners then
40861: LD_VAR 0 6
40865: NOT
40866: PUSH
40867: LD_VAR 0 13
40871: PUSH
40872: LD_VAR 0 6
40876: IN
40877: NOT
40878: OR
40879: IFFALSE 41186
// begin if dep then
40881: LD_VAR 0 17
40885: IFFALSE 41021
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40887: LD_ADDR_VAR 0 16
40891: PUSH
40892: LD_VAR 0 17
40896: PUSH
40897: LD_INT 1
40899: ARRAY
40900: PPUSH
40901: CALL_OW 250
40905: PPUSH
40906: LD_VAR 0 17
40910: PUSH
40911: LD_INT 1
40913: ARRAY
40914: PPUSH
40915: CALL_OW 254
40919: PPUSH
40920: LD_INT 5
40922: PPUSH
40923: CALL_OW 272
40927: PUSH
40928: LD_VAR 0 17
40932: PUSH
40933: LD_INT 1
40935: ARRAY
40936: PPUSH
40937: CALL_OW 251
40941: PPUSH
40942: LD_VAR 0 17
40946: PUSH
40947: LD_INT 1
40949: ARRAY
40950: PPUSH
40951: CALL_OW 254
40955: PPUSH
40956: LD_INT 5
40958: PPUSH
40959: CALL_OW 273
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40968: LD_VAR 0 16
40972: PUSH
40973: LD_INT 1
40975: ARRAY
40976: PPUSH
40977: LD_VAR 0 16
40981: PUSH
40982: LD_INT 2
40984: ARRAY
40985: PPUSH
40986: CALL_OW 488
40990: IFFALSE 41021
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40992: LD_VAR 0 13
40996: PPUSH
40997: LD_VAR 0 16
41001: PUSH
41002: LD_INT 1
41004: ARRAY
41005: PPUSH
41006: LD_VAR 0 16
41010: PUSH
41011: LD_INT 2
41013: ARRAY
41014: PPUSH
41015: CALL_OW 111
// continue ;
41019: GO 40511
// end ; end ; r := GetDir ( tmp ) ;
41021: LD_ADDR_VAR 0 15
41025: PUSH
41026: LD_VAR 0 13
41030: PPUSH
41031: CALL_OW 254
41035: ST_TO_ADDR
// if r = 5 then
41036: LD_VAR 0 15
41040: PUSH
41041: LD_INT 5
41043: EQUAL
41044: IFFALSE 41054
// r := 0 ;
41046: LD_ADDR_VAR 0 15
41050: PUSH
41051: LD_INT 0
41053: ST_TO_ADDR
// for j = r to 5 do
41054: LD_ADDR_VAR 0 10
41058: PUSH
41059: DOUBLE
41060: LD_VAR 0 15
41064: DEC
41065: ST_TO_ADDR
41066: LD_INT 5
41068: PUSH
41069: FOR_TO
41070: IFFALSE 41184
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41072: LD_ADDR_VAR 0 11
41076: PUSH
41077: LD_VAR 0 13
41081: PPUSH
41082: CALL_OW 250
41086: PPUSH
41087: LD_VAR 0 10
41091: PPUSH
41092: LD_INT 2
41094: PPUSH
41095: CALL_OW 272
41099: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41100: LD_ADDR_VAR 0 12
41104: PUSH
41105: LD_VAR 0 13
41109: PPUSH
41110: CALL_OW 251
41114: PPUSH
41115: LD_VAR 0 10
41119: PPUSH
41120: LD_INT 2
41122: PPUSH
41123: CALL_OW 273
41127: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41128: LD_VAR 0 11
41132: PPUSH
41133: LD_VAR 0 12
41137: PPUSH
41138: CALL_OW 488
41142: PUSH
41143: LD_VAR 0 11
41147: PPUSH
41148: LD_VAR 0 12
41152: PPUSH
41153: CALL_OW 428
41157: NOT
41158: AND
41159: IFFALSE 41182
// begin ComMoveXY ( tmp , _x , _y ) ;
41161: LD_VAR 0 13
41165: PPUSH
41166: LD_VAR 0 11
41170: PPUSH
41171: LD_VAR 0 12
41175: PPUSH
41176: CALL_OW 111
// break ;
41180: GO 41184
// end ; end ;
41182: GO 41069
41184: POP
41185: POP
// end ; end ;
41186: GO 40511
41188: POP
41189: POP
// end ;
41190: LD_VAR 0 8
41194: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41195: LD_INT 0
41197: PPUSH
// result := true ;
41198: LD_ADDR_VAR 0 3
41202: PUSH
41203: LD_INT 1
41205: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41206: LD_VAR 0 2
41210: PUSH
41211: LD_INT 24
41213: DOUBLE
41214: EQUAL
41215: IFTRUE 41225
41217: LD_INT 33
41219: DOUBLE
41220: EQUAL
41221: IFTRUE 41225
41223: GO 41250
41225: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41226: LD_ADDR_VAR 0 3
41230: PUSH
41231: LD_INT 32
41233: PPUSH
41234: LD_VAR 0 1
41238: PPUSH
41239: CALL_OW 321
41243: PUSH
41244: LD_INT 2
41246: EQUAL
41247: ST_TO_ADDR
41248: GO 41566
41250: LD_INT 20
41252: DOUBLE
41253: EQUAL
41254: IFTRUE 41258
41256: GO 41283
41258: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41259: LD_ADDR_VAR 0 3
41263: PUSH
41264: LD_INT 6
41266: PPUSH
41267: LD_VAR 0 1
41271: PPUSH
41272: CALL_OW 321
41276: PUSH
41277: LD_INT 2
41279: EQUAL
41280: ST_TO_ADDR
41281: GO 41566
41283: LD_INT 22
41285: DOUBLE
41286: EQUAL
41287: IFTRUE 41297
41289: LD_INT 36
41291: DOUBLE
41292: EQUAL
41293: IFTRUE 41297
41295: GO 41322
41297: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41298: LD_ADDR_VAR 0 3
41302: PUSH
41303: LD_INT 15
41305: PPUSH
41306: LD_VAR 0 1
41310: PPUSH
41311: CALL_OW 321
41315: PUSH
41316: LD_INT 2
41318: EQUAL
41319: ST_TO_ADDR
41320: GO 41566
41322: LD_INT 30
41324: DOUBLE
41325: EQUAL
41326: IFTRUE 41330
41328: GO 41355
41330: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41331: LD_ADDR_VAR 0 3
41335: PUSH
41336: LD_INT 20
41338: PPUSH
41339: LD_VAR 0 1
41343: PPUSH
41344: CALL_OW 321
41348: PUSH
41349: LD_INT 2
41351: EQUAL
41352: ST_TO_ADDR
41353: GO 41566
41355: LD_INT 28
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41369
41361: LD_INT 21
41363: DOUBLE
41364: EQUAL
41365: IFTRUE 41369
41367: GO 41394
41369: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41370: LD_ADDR_VAR 0 3
41374: PUSH
41375: LD_INT 21
41377: PPUSH
41378: LD_VAR 0 1
41382: PPUSH
41383: CALL_OW 321
41387: PUSH
41388: LD_INT 2
41390: EQUAL
41391: ST_TO_ADDR
41392: GO 41566
41394: LD_INT 16
41396: DOUBLE
41397: EQUAL
41398: IFTRUE 41402
41400: GO 41427
41402: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41403: LD_ADDR_VAR 0 3
41407: PUSH
41408: LD_INT 84
41410: PPUSH
41411: LD_VAR 0 1
41415: PPUSH
41416: CALL_OW 321
41420: PUSH
41421: LD_INT 2
41423: EQUAL
41424: ST_TO_ADDR
41425: GO 41566
41427: LD_INT 19
41429: DOUBLE
41430: EQUAL
41431: IFTRUE 41441
41433: LD_INT 23
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41466
41441: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41442: LD_ADDR_VAR 0 3
41446: PUSH
41447: LD_INT 83
41449: PPUSH
41450: LD_VAR 0 1
41454: PPUSH
41455: CALL_OW 321
41459: PUSH
41460: LD_INT 2
41462: EQUAL
41463: ST_TO_ADDR
41464: GO 41566
41466: LD_INT 17
41468: DOUBLE
41469: EQUAL
41470: IFTRUE 41474
41472: GO 41499
41474: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41475: LD_ADDR_VAR 0 3
41479: PUSH
41480: LD_INT 39
41482: PPUSH
41483: LD_VAR 0 1
41487: PPUSH
41488: CALL_OW 321
41492: PUSH
41493: LD_INT 2
41495: EQUAL
41496: ST_TO_ADDR
41497: GO 41566
41499: LD_INT 18
41501: DOUBLE
41502: EQUAL
41503: IFTRUE 41507
41505: GO 41532
41507: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41508: LD_ADDR_VAR 0 3
41512: PUSH
41513: LD_INT 40
41515: PPUSH
41516: LD_VAR 0 1
41520: PPUSH
41521: CALL_OW 321
41525: PUSH
41526: LD_INT 2
41528: EQUAL
41529: ST_TO_ADDR
41530: GO 41566
41532: LD_INT 27
41534: DOUBLE
41535: EQUAL
41536: IFTRUE 41540
41538: GO 41565
41540: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41541: LD_ADDR_VAR 0 3
41545: PUSH
41546: LD_INT 35
41548: PPUSH
41549: LD_VAR 0 1
41553: PPUSH
41554: CALL_OW 321
41558: PUSH
41559: LD_INT 2
41561: EQUAL
41562: ST_TO_ADDR
41563: GO 41566
41565: POP
// end ;
41566: LD_VAR 0 3
41570: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41571: LD_INT 0
41573: PPUSH
41574: PPUSH
41575: PPUSH
41576: PPUSH
41577: PPUSH
41578: PPUSH
41579: PPUSH
41580: PPUSH
41581: PPUSH
41582: PPUSH
41583: PPUSH
// result := false ;
41584: LD_ADDR_VAR 0 6
41588: PUSH
41589: LD_INT 0
41591: ST_TO_ADDR
// if btype = b_depot then
41592: LD_VAR 0 2
41596: PUSH
41597: LD_INT 0
41599: EQUAL
41600: IFFALSE 41612
// begin result := true ;
41602: LD_ADDR_VAR 0 6
41606: PUSH
41607: LD_INT 1
41609: ST_TO_ADDR
// exit ;
41610: GO 42438
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41612: LD_VAR 0 1
41616: NOT
41617: PUSH
41618: LD_VAR 0 1
41622: PPUSH
41623: CALL_OW 266
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: IN
41638: NOT
41639: OR
41640: PUSH
41641: LD_VAR 0 2
41645: NOT
41646: OR
41647: PUSH
41648: LD_VAR 0 5
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: LD_INT 3
41664: PUSH
41665: LD_INT 4
41667: PUSH
41668: LD_INT 5
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: IN
41679: NOT
41680: OR
41681: PUSH
41682: LD_VAR 0 3
41686: PPUSH
41687: LD_VAR 0 4
41691: PPUSH
41692: CALL_OW 488
41696: NOT
41697: OR
41698: IFFALSE 41702
// exit ;
41700: GO 42438
// side := GetSide ( depot ) ;
41702: LD_ADDR_VAR 0 9
41706: PUSH
41707: LD_VAR 0 1
41711: PPUSH
41712: CALL_OW 255
41716: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41717: LD_VAR 0 9
41721: PPUSH
41722: LD_VAR 0 2
41726: PPUSH
41727: CALL 41195 0 2
41731: NOT
41732: IFFALSE 41736
// exit ;
41734: GO 42438
// pom := GetBase ( depot ) ;
41736: LD_ADDR_VAR 0 10
41740: PUSH
41741: LD_VAR 0 1
41745: PPUSH
41746: CALL_OW 274
41750: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41751: LD_ADDR_VAR 0 11
41755: PUSH
41756: LD_VAR 0 2
41760: PPUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: CALL_OW 248
41770: PPUSH
41771: CALL_OW 450
41775: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41776: LD_VAR 0 10
41780: PPUSH
41781: LD_INT 1
41783: PPUSH
41784: CALL_OW 275
41788: PUSH
41789: LD_VAR 0 11
41793: PUSH
41794: LD_INT 1
41796: ARRAY
41797: GREATEREQUAL
41798: PUSH
41799: LD_VAR 0 10
41803: PPUSH
41804: LD_INT 2
41806: PPUSH
41807: CALL_OW 275
41811: PUSH
41812: LD_VAR 0 11
41816: PUSH
41817: LD_INT 2
41819: ARRAY
41820: GREATEREQUAL
41821: AND
41822: PUSH
41823: LD_VAR 0 10
41827: PPUSH
41828: LD_INT 3
41830: PPUSH
41831: CALL_OW 275
41835: PUSH
41836: LD_VAR 0 11
41840: PUSH
41841: LD_INT 3
41843: ARRAY
41844: GREATEREQUAL
41845: AND
41846: NOT
41847: IFFALSE 41851
// exit ;
41849: GO 42438
// if GetBType ( depot ) = b_depot then
41851: LD_VAR 0 1
41855: PPUSH
41856: CALL_OW 266
41860: PUSH
41861: LD_INT 0
41863: EQUAL
41864: IFFALSE 41876
// dist := 28 else
41866: LD_ADDR_VAR 0 14
41870: PUSH
41871: LD_INT 28
41873: ST_TO_ADDR
41874: GO 41884
// dist := 36 ;
41876: LD_ADDR_VAR 0 14
41880: PUSH
41881: LD_INT 36
41883: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41884: LD_VAR 0 1
41888: PPUSH
41889: LD_VAR 0 3
41893: PPUSH
41894: LD_VAR 0 4
41898: PPUSH
41899: CALL_OW 297
41903: PUSH
41904: LD_VAR 0 14
41908: GREATER
41909: IFFALSE 41913
// exit ;
41911: GO 42438
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41913: LD_ADDR_VAR 0 12
41917: PUSH
41918: LD_VAR 0 2
41922: PPUSH
41923: LD_VAR 0 3
41927: PPUSH
41928: LD_VAR 0 4
41932: PPUSH
41933: LD_VAR 0 5
41937: PPUSH
41938: LD_VAR 0 1
41942: PPUSH
41943: CALL_OW 248
41947: PPUSH
41948: LD_INT 0
41950: PPUSH
41951: CALL 42443 0 6
41955: ST_TO_ADDR
// if not hexes then
41956: LD_VAR 0 12
41960: NOT
41961: IFFALSE 41965
// exit ;
41963: GO 42438
// hex := GetHexInfo ( x , y ) ;
41965: LD_ADDR_VAR 0 15
41969: PUSH
41970: LD_VAR 0 3
41974: PPUSH
41975: LD_VAR 0 4
41979: PPUSH
41980: CALL_OW 546
41984: ST_TO_ADDR
// if hex [ 1 ] then
41985: LD_VAR 0 15
41989: PUSH
41990: LD_INT 1
41992: ARRAY
41993: IFFALSE 41997
// exit ;
41995: GO 42438
// height := hex [ 2 ] ;
41997: LD_ADDR_VAR 0 13
42001: PUSH
42002: LD_VAR 0 15
42006: PUSH
42007: LD_INT 2
42009: ARRAY
42010: ST_TO_ADDR
// for i = 1 to hexes do
42011: LD_ADDR_VAR 0 7
42015: PUSH
42016: DOUBLE
42017: LD_INT 1
42019: DEC
42020: ST_TO_ADDR
42021: LD_VAR 0 12
42025: PUSH
42026: FOR_TO
42027: IFFALSE 42357
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42029: LD_VAR 0 12
42033: PUSH
42034: LD_VAR 0 7
42038: ARRAY
42039: PUSH
42040: LD_INT 1
42042: ARRAY
42043: PPUSH
42044: LD_VAR 0 12
42048: PUSH
42049: LD_VAR 0 7
42053: ARRAY
42054: PUSH
42055: LD_INT 2
42057: ARRAY
42058: PPUSH
42059: CALL_OW 488
42063: NOT
42064: PUSH
42065: LD_VAR 0 12
42069: PUSH
42070: LD_VAR 0 7
42074: ARRAY
42075: PUSH
42076: LD_INT 1
42078: ARRAY
42079: PPUSH
42080: LD_VAR 0 12
42084: PUSH
42085: LD_VAR 0 7
42089: ARRAY
42090: PUSH
42091: LD_INT 2
42093: ARRAY
42094: PPUSH
42095: CALL_OW 428
42099: PUSH
42100: LD_INT 0
42102: GREATER
42103: OR
42104: PUSH
42105: LD_VAR 0 12
42109: PUSH
42110: LD_VAR 0 7
42114: ARRAY
42115: PUSH
42116: LD_INT 1
42118: ARRAY
42119: PPUSH
42120: LD_VAR 0 12
42124: PUSH
42125: LD_VAR 0 7
42129: ARRAY
42130: PUSH
42131: LD_INT 2
42133: ARRAY
42134: PPUSH
42135: CALL_OW 351
42139: OR
42140: IFFALSE 42146
// exit ;
42142: POP
42143: POP
42144: GO 42438
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42146: LD_ADDR_VAR 0 8
42150: PUSH
42151: LD_VAR 0 12
42155: PUSH
42156: LD_VAR 0 7
42160: ARRAY
42161: PUSH
42162: LD_INT 1
42164: ARRAY
42165: PPUSH
42166: LD_VAR 0 12
42170: PUSH
42171: LD_VAR 0 7
42175: ARRAY
42176: PUSH
42177: LD_INT 2
42179: ARRAY
42180: PPUSH
42181: CALL_OW 546
42185: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42186: LD_VAR 0 8
42190: PUSH
42191: LD_INT 1
42193: ARRAY
42194: PUSH
42195: LD_VAR 0 8
42199: PUSH
42200: LD_INT 2
42202: ARRAY
42203: PUSH
42204: LD_VAR 0 13
42208: PUSH
42209: LD_INT 2
42211: PLUS
42212: GREATER
42213: OR
42214: PUSH
42215: LD_VAR 0 8
42219: PUSH
42220: LD_INT 2
42222: ARRAY
42223: PUSH
42224: LD_VAR 0 13
42228: PUSH
42229: LD_INT 2
42231: MINUS
42232: LESS
42233: OR
42234: PUSH
42235: LD_VAR 0 8
42239: PUSH
42240: LD_INT 3
42242: ARRAY
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 8
42249: PUSH
42250: LD_INT 9
42252: PUSH
42253: LD_INT 10
42255: PUSH
42256: LD_INT 11
42258: PUSH
42259: LD_INT 12
42261: PUSH
42262: LD_INT 13
42264: PUSH
42265: LD_INT 16
42267: PUSH
42268: LD_INT 17
42270: PUSH
42271: LD_INT 18
42273: PUSH
42274: LD_INT 19
42276: PUSH
42277: LD_INT 20
42279: PUSH
42280: LD_INT 21
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: IN
42298: NOT
42299: OR
42300: PUSH
42301: LD_VAR 0 8
42305: PUSH
42306: LD_INT 5
42308: ARRAY
42309: NOT
42310: OR
42311: PUSH
42312: LD_VAR 0 8
42316: PUSH
42317: LD_INT 6
42319: ARRAY
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: LD_INT 2
42326: PUSH
42327: LD_INT 7
42329: PUSH
42330: LD_INT 9
42332: PUSH
42333: LD_INT 10
42335: PUSH
42336: LD_INT 11
42338: PUSH
42339: EMPTY
42340: LIST
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: LIST
42346: IN
42347: NOT
42348: OR
42349: IFFALSE 42355
// exit ;
42351: POP
42352: POP
42353: GO 42438
// end ;
42355: GO 42026
42357: POP
42358: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42359: LD_VAR 0 9
42363: PPUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: LD_VAR 0 4
42373: PPUSH
42374: LD_INT 20
42376: PPUSH
42377: CALL 34361 0 4
42381: PUSH
42382: LD_INT 4
42384: ARRAY
42385: IFFALSE 42389
// exit ;
42387: GO 42438
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42389: LD_VAR 0 2
42393: PUSH
42394: LD_INT 29
42396: PUSH
42397: LD_INT 30
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: IN
42404: PUSH
42405: LD_VAR 0 3
42409: PPUSH
42410: LD_VAR 0 4
42414: PPUSH
42415: LD_VAR 0 9
42419: PPUSH
42420: CALL_OW 440
42424: NOT
42425: AND
42426: IFFALSE 42430
// exit ;
42428: GO 42438
// result := true ;
42430: LD_ADDR_VAR 0 6
42434: PUSH
42435: LD_INT 1
42437: ST_TO_ADDR
// end ;
42438: LD_VAR 0 6
42442: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42443: LD_INT 0
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
42493: PPUSH
42494: PPUSH
42495: PPUSH
42496: PPUSH
42497: PPUSH
42498: PPUSH
42499: PPUSH
42500: PPUSH
42501: PPUSH
42502: PPUSH
// result = [ ] ;
42503: LD_ADDR_VAR 0 7
42507: PUSH
42508: EMPTY
42509: ST_TO_ADDR
// temp_list = [ ] ;
42510: LD_ADDR_VAR 0 9
42514: PUSH
42515: EMPTY
42516: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42517: LD_VAR 0 4
42521: PUSH
42522: LD_INT 0
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 3
42533: PUSH
42534: LD_INT 4
42536: PUSH
42537: LD_INT 5
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: IN
42548: NOT
42549: PUSH
42550: LD_VAR 0 1
42554: PUSH
42555: LD_INT 0
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: IN
42565: PUSH
42566: LD_VAR 0 5
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: LIST
42584: IN
42585: NOT
42586: AND
42587: OR
42588: IFFALSE 42592
// exit ;
42590: GO 60983
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42592: LD_VAR 0 1
42596: PUSH
42597: LD_INT 6
42599: PUSH
42600: LD_INT 7
42602: PUSH
42603: LD_INT 8
42605: PUSH
42606: LD_INT 13
42608: PUSH
42609: LD_INT 12
42611: PUSH
42612: LD_INT 15
42614: PUSH
42615: LD_INT 11
42617: PUSH
42618: LD_INT 14
42620: PUSH
42621: LD_INT 10
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: LIST
42634: IN
42635: IFFALSE 42645
// btype = b_lab ;
42637: LD_ADDR_VAR 0 1
42641: PUSH
42642: LD_INT 6
42644: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42645: LD_VAR 0 6
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: LIST
42663: IN
42664: NOT
42665: PUSH
42666: LD_VAR 0 1
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 3
42682: PUSH
42683: LD_INT 6
42685: PUSH
42686: LD_INT 36
42688: PUSH
42689: LD_INT 4
42691: PUSH
42692: LD_INT 5
42694: PUSH
42695: LD_INT 31
42697: PUSH
42698: LD_INT 32
42700: PUSH
42701: LD_INT 33
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: IN
42717: NOT
42718: PUSH
42719: LD_VAR 0 6
42723: PUSH
42724: LD_INT 1
42726: EQUAL
42727: AND
42728: OR
42729: PUSH
42730: LD_VAR 0 1
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: LD_INT 3
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: IN
42745: NOT
42746: PUSH
42747: LD_VAR 0 6
42751: PUSH
42752: LD_INT 2
42754: EQUAL
42755: AND
42756: OR
42757: IFFALSE 42767
// mode = 0 ;
42759: LD_ADDR_VAR 0 6
42763: PUSH
42764: LD_INT 0
42766: ST_TO_ADDR
// case mode of 0 :
42767: LD_VAR 0 6
42771: PUSH
42772: LD_INT 0
42774: DOUBLE
42775: EQUAL
42776: IFTRUE 42780
42778: GO 54233
42780: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42781: LD_ADDR_VAR 0 11
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: LD_INT 1
42801: NEG
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 1
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PUSH
42827: LD_INT 0
42829: PUSH
42830: LD_INT 1
42832: PUSH
42833: EMPTY
42834: LIST
42835: LIST
42836: PUSH
42837: LD_INT 1
42839: NEG
42840: PUSH
42841: LD_INT 0
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 0
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: LD_INT 2
42899: PUSH
42900: EMPTY
42901: LIST
42902: LIST
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: LD_INT 2
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: NEG
42917: PUSH
42918: LD_INT 1
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 3
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 3
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42974: LD_ADDR_VAR 0 12
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: NEG
43098: PUSH
43099: LD_INT 0
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 2
43108: NEG
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: NEG
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: LD_INT 3
43131: NEG
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 3
43142: NEG
43143: PUSH
43144: LD_INT 1
43146: NEG
43147: PUSH
43148: EMPTY
43149: LIST
43150: LIST
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43170: LD_ADDR_VAR 0 13
43174: PUSH
43175: LD_INT 0
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 1
43243: NEG
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: PUSH
43249: LD_INT 1
43251: NEG
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: LD_INT 2
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 2
43293: NEG
43294: PUSH
43295: LD_INT 1
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 2
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 3
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: NEG
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: LIST
43359: LIST
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43369: LD_ADDR_VAR 0 14
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: LD_INT 0
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 0
43386: PUSH
43387: LD_INT 1
43389: NEG
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 1
43407: PUSH
43408: LD_INT 1
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 1
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 0
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 2
43454: NEG
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 0
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 2
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: LD_INT 2
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 1
43504: NEG
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 1
43515: NEG
43516: PUSH
43517: LD_INT 3
43519: NEG
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 3
43530: NEG
43531: PUSH
43532: EMPTY
43533: LIST
43534: LIST
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43565: LD_ADDR_VAR 0 15
43569: PUSH
43570: LD_INT 0
43572: PUSH
43573: LD_INT 0
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 1
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: EMPTY
43608: LIST
43609: LIST
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: LD_INT 1
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: NEG
43635: PUSH
43636: LD_INT 1
43638: NEG
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 1
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 0
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 1
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 0
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43758: LD_ADDR_VAR 0 16
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: LD_INT 0
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: NEG
43828: PUSH
43829: LD_INT 1
43831: NEG
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: EMPTY
43846: LIST
43847: LIST
43848: PUSH
43849: LD_INT 2
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: LD_INT 2
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: LD_INT 1
43871: PUSH
43872: LD_INT 2
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: PUSH
43879: LD_INT 2
43881: NEG
43882: PUSH
43883: LD_INT 1
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 2
43893: NEG
43894: PUSH
43895: LD_INT 2
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 3
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 2
43925: PUSH
43926: LD_INT 3
43928: PUSH
43929: EMPTY
43930: LIST
43931: LIST
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43951: LD_ADDR_VAR 0 17
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: LD_INT 0
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: LD_INT 0
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: NEG
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 2
44127: NEG
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: NEG
44139: PUSH
44140: LD_INT 1
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 2
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44181: LD_ADDR_VAR 0 18
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: LD_INT 1
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 1
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 1
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 0
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 2
44296: PUSH
44297: LD_INT 0
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 1
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 2
44357: NEG
44358: PUSH
44359: LD_INT 0
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 2
44368: NEG
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: LIST
44407: LIST
44408: LIST
44409: LIST
44410: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44411: LD_ADDR_VAR 0 19
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 1
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: EMPTY
44510: LIST
44511: LIST
44512: PUSH
44513: LD_INT 1
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: PUSH
44527: LD_INT 0
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 2
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 2
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 2
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 2
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 2
44587: NEG
44588: PUSH
44589: LD_INT 0
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: LD_INT 1
44602: NEG
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 2
44610: NEG
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: EMPTY
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44641: LD_ADDR_VAR 0 20
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: LD_INT 1
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 1
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 0
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: EMPTY
44771: LIST
44772: LIST
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: LD_INT 2
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: LD_INT 1
44786: PUSH
44787: LD_INT 2
44789: PUSH
44790: EMPTY
44791: LIST
44792: LIST
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: LD_INT 2
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: LD_INT 1
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 2
44817: NEG
44818: PUSH
44819: LD_INT 0
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 2
44840: NEG
44841: PUSH
44842: LD_INT 2
44844: NEG
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44871: LD_ADDR_VAR 0 21
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: LD_INT 0
44881: PUSH
44882: EMPTY
44883: LIST
44884: LIST
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: LD_INT 1
44891: NEG
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 1
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: LD_INT 0
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 1
44940: NEG
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 2
44986: PUSH
44987: LD_INT 0
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 2
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 2
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 2
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 2
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 2
45047: NEG
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: LD_INT 1
45062: NEG
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: PUSH
45068: LD_INT 2
45070: NEG
45071: PUSH
45072: LD_INT 2
45074: NEG
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: LIST
45100: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45101: LD_ADDR_VAR 0 22
45105: PUSH
45106: LD_INT 0
45108: PUSH
45109: LD_INT 0
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 1
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: LD_INT 1
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: NEG
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 1
45182: NEG
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 0
45256: PUSH
45257: LD_INT 2
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 1
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: NEG
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: NEG
45301: PUSH
45302: LD_INT 2
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45331: LD_ADDR_VAR 0 23
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 0
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 1
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: PUSH
45367: LD_INT 1
45369: PUSH
45370: LD_INT 1
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: LD_INT 1
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: NEG
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: LD_INT 1
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 2
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 2
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 2
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: EMPTY
45502: LIST
45503: LIST
45504: PUSH
45505: LD_INT 2
45507: NEG
45508: PUSH
45509: LD_INT 0
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: NEG
45519: PUSH
45520: LD_INT 1
45522: NEG
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: NEG
45531: PUSH
45532: LD_INT 2
45534: NEG
45535: PUSH
45536: EMPTY
45537: LIST
45538: LIST
45539: PUSH
45540: LD_INT 2
45542: NEG
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 3
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 2
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 1
45580: NEG
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45611: LD_ADDR_VAR 0 24
45615: PUSH
45616: LD_INT 0
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: NEG
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 0
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: NEG
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 1
45692: NEG
45693: PUSH
45694: LD_INT 2
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 0
45704: PUSH
45705: LD_INT 2
45707: NEG
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 1
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 2
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 2
45810: NEG
45811: PUSH
45812: LD_INT 2
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 2
45833: PUSH
45834: LD_INT 1
45836: NEG
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 3
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 3
45854: PUSH
45855: LD_INT 2
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45887: LD_ADDR_VAR 0 25
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 0
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: EMPTY
45930: LIST
45931: LIST
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: LD_INT 1
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 2
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 0
45980: PUSH
45981: LD_INT 2
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: LD_INT 2
46022: PUSH
46023: LD_INT 2
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 0
46042: PUSH
46043: LD_INT 2
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 2
46063: NEG
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: LD_INT 1
46078: NEG
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 2
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 3
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: PUSH
46109: LD_INT 2
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 3
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 3
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46161: LD_ADDR_VAR 0 26
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 0
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 1
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 2
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 2
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 1
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: PUSH
46307: LD_INT 2
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 2
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 2
46360: NEG
46361: PUSH
46362: LD_INT 2
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: LD_INT 3
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: NEG
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 2
46403: NEG
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46437: LD_ADDR_VAR 0 27
46441: PUSH
46442: LD_INT 0
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 1
46457: NEG
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 1
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 1
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 0
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: LD_INT 2
46522: NEG
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 2
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 2
46572: PUSH
46573: LD_INT 2
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 2
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 2
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 2
46613: NEG
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 2
46636: NEG
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: NEG
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 3
46670: NEG
46671: PUSH
46672: LD_INT 1
46674: NEG
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: NEG
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46717: LD_ADDR_VAR 0 28
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 1
46786: NEG
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: LD_INT 1
46798: NEG
46799: PUSH
46800: LD_INT 2
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 1
46824: NEG
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 0
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: LD_INT 1
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 0
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 2
46916: NEG
46917: PUSH
46918: LD_INT 2
46920: NEG
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: LD_INT 3
46944: NEG
46945: PUSH
46946: EMPTY
46947: LIST
46948: LIST
46949: PUSH
46950: LD_INT 3
46952: NEG
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46999: LD_ADDR_VAR 0 29
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 1
47057: NEG
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: LD_INT 1
47072: NEG
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 2
47084: NEG
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: LD_INT 1
47106: NEG
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 2
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 2
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 2
47177: NEG
47178: PUSH
47179: LD_INT 2
47181: NEG
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 2
47189: NEG
47190: PUSH
47191: LD_INT 3
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 2
47201: PUSH
47202: LD_INT 1
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 3
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 3
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 3
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47278: LD_ADDR_VAR 0 30
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 0
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: LD_INT 3
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: PUSH
47491: LD_INT 2
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 3
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 3
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47556: LD_ADDR_VAR 0 31
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 0
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: LD_INT 1
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 0
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 1
47625: NEG
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: LD_INT 2
47641: NEG
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 2
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 2
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 1
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: LD_INT 1
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: PUSH
47769: LD_INT 1
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 3
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: LD_INT 2
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 3
47799: NEG
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: LIST
47833: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47834: LD_ADDR_VAR 0 32
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 0
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: EMPTY
47867: LIST
47868: LIST
47869: PUSH
47870: LD_INT 1
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: EMPTY
47877: LIST
47878: LIST
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: LD_INT 0
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 2
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: PUSH
47960: LD_INT 2
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 0
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 1
47989: NEG
47990: PUSH
47991: LD_INT 1
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 2
48000: NEG
48001: PUSH
48002: LD_INT 0
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: PUSH
48009: LD_INT 2
48011: NEG
48012: PUSH
48013: LD_INT 1
48015: NEG
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: LD_INT 3
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 3
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: PUSH
48057: LD_INT 3
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 2
48066: NEG
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 3
48077: NEG
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48112: LD_ADDR_VAR 0 33
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 0
48129: PUSH
48130: LD_INT 1
48132: NEG
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: LD_INT 1
48185: NEG
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: PUSH
48191: LD_INT 1
48193: NEG
48194: PUSH
48195: LD_INT 2
48197: NEG
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 2
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 2
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 2
48267: NEG
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: NEG
48283: PUSH
48284: EMPTY
48285: LIST
48286: LIST
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: NEG
48303: PUSH
48304: LD_INT 3
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 2
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 1
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 3
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: LD_INT 2
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 3
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48391: LD_ADDR_VAR 0 34
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 0
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 2
48558: NEG
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: EMPTY
48577: LIST
48578: LIST
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 2
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 3
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: PUSH
48616: LD_INT 3
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 3
48636: NEG
48637: PUSH
48638: LD_INT 1
48640: NEG
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48671: LD_ADDR_VAR 0 35
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 0
48688: PUSH
48689: LD_INT 1
48691: NEG
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: LD_INT 1
48744: NEG
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: LD_INT 1
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 2
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48783: LD_ADDR_VAR 0 36
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 0
48793: PUSH
48794: EMPTY
48795: LIST
48796: LIST
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: LD_INT 1
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 0
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 2
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 2
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48895: LD_ADDR_VAR 0 37
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 0
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: LD_INT 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: LD_INT 1
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 0
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 1
48968: NEG
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 1
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49007: LD_ADDR_VAR 0 38
49011: PUSH
49012: LD_INT 0
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 0
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49119: LD_ADDR_VAR 0 39
49123: PUSH
49124: LD_INT 0
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: LD_INT 1
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: LD_INT 2
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 1
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49231: LD_ADDR_VAR 0 40
49235: PUSH
49236: LD_INT 0
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 1
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: LD_INT 1
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 1
49289: NEG
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49343: LD_ADDR_VAR 0 41
49347: PUSH
49348: LD_INT 0
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 1
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 1
49412: NEG
49413: PUSH
49414: LD_INT 1
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: LD_INT 2
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: LD_INT 1
49439: NEG
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 2
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 2
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: LD_INT 2
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: LD_INT 2
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 1
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 2
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: LD_INT 1
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: LD_INT 0
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 3
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 3
49586: PUSH
49587: LD_INT 3
49589: PUSH
49590: EMPTY
49591: LIST
49592: LIST
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: LD_INT 3
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 3
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 2
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 3
49652: NEG
49653: PUSH
49654: LD_INT 3
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49693: LD_ADDR_VAR 0 42
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: LD_INT 1
49713: NEG
49714: PUSH
49715: EMPTY
49716: LIST
49717: LIST
49718: PUSH
49719: LD_INT 1
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 1
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: LD_INT 2
49778: NEG
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 2
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 0
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 1
49848: NEG
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: LD_INT 3
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 3
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 3
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 3
49939: PUSH
49940: LD_INT 3
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 3
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 3
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: LD_INT 3
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 2
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 3
50002: NEG
50003: PUSH
50004: LD_INT 3
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: LIST
50026: LIST
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50043: LD_ADDR_VAR 0 43
50047: PUSH
50048: LD_INT 0
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 0
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 1
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 0
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 2
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 2
50168: PUSH
50169: LD_INT 1
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 1
50178: PUSH
50179: LD_INT 2
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 2
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 2
50209: NEG
50210: PUSH
50211: LD_INT 0
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 2
50220: NEG
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 1
50232: NEG
50233: PUSH
50234: LD_INT 3
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 0
50244: PUSH
50245: LD_INT 3
50247: NEG
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 1
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 2
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 3
50339: NEG
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: NEG
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50391: LD_ADDR_VAR 0 44
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 1
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 1
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 2
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 1
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 2
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: NEG
50547: PUSH
50548: LD_INT 0
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 1
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 2
50581: NEG
50582: PUSH
50583: LD_INT 3
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 3
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: LD_INT 1
50617: PUSH
50618: EMPTY
50619: LIST
50620: LIST
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: LD_INT 3
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: PUSH
50645: LD_INT 3
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 3
50665: NEG
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 3
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: PUSH
50698: LD_INT 3
50700: NEG
50701: PUSH
50702: LD_INT 3
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50741: LD_ADDR_VAR 0 45
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 0
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 1
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 1
50822: NEG
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 0
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: PUSH
50867: LD_INT 2
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 1
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: LD_INT 0
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 2
50907: NEG
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: NEG
50920: PUSH
50921: LD_INT 2
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: LD_INT 3
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 3
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 3
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: LD_INT 3
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: NEG
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 3
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51091: LD_ADDR_VAR 0 46
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: PUSH
51130: LD_INT 1
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 0
51184: PUSH
51185: LD_INT 2
51187: NEG
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 0
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 0
51236: PUSH
51237: LD_INT 2
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 1
51250: PUSH
51251: EMPTY
51252: LIST
51253: LIST
51254: PUSH
51255: LD_INT 2
51257: NEG
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: LD_INT 3
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 0
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 1
51303: PUSH
51304: LD_INT 2
51306: NEG
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: LD_INT 0
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 1
51345: PUSH
51346: LD_INT 3
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 0
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: EMPTY
51360: LIST
51361: LIST
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: NEG
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: LD_INT 3
51387: NEG
51388: PUSH
51389: LD_INT 0
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 3
51398: NEG
51399: PUSH
51400: LD_INT 1
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51439: LD_ADDR_VAR 0 47
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: LD_INT 2
51524: NEG
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 2
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: LD_INT 1
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 2
51566: NEG
51567: PUSH
51568: LD_INT 2
51570: NEG
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51590: LD_ADDR_VAR 0 48
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 0
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 1
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: LD_INT 1
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: LD_INT 1
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 1
51671: NEG
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 2
51715: PUSH
51716: LD_INT 1
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: LIST
51731: LIST
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51737: LD_ADDR_VAR 0 49
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 0
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 0
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 1
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: NEG
51796: PUSH
51797: LD_INT 0
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 2
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 2
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 2
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: PUSH
51860: LD_INT 2
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51881: LD_ADDR_VAR 0 50
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 0
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: EMPTY
51904: LIST
51905: LIST
51906: PUSH
51907: LD_INT 1
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: LD_INT 1
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 0
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 2
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 2
51972: PUSH
51973: LD_INT 2
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52025: LD_ADDR_VAR 0 51
52029: PUSH
52030: LD_INT 0
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 0
52042: PUSH
52043: LD_INT 1
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: PUSH
52064: LD_INT 1
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: LD_INT 1
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 0
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 1
52106: PUSH
52107: LD_INT 2
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 1
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: LD_INT 0
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 2
52148: NEG
52149: PUSH
52150: LD_INT 1
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52172: LD_ADDR_VAR 0 52
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 0
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 1
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 1
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 1
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: LD_INT 1
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: LD_INT 2
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 2
52276: NEG
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: NEG
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52323: LD_ADDR_VAR 0 53
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 0
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 1
52361: PUSH
52362: LD_INT 1
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 1
52381: NEG
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 2
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 2
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 0
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 2
52499: NEG
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 2
52510: NEG
52511: PUSH
52512: LD_INT 1
52514: NEG
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 2
52526: NEG
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52553: LD_ADDR_VAR 0 54
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 1
52573: NEG
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 1
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 1
52611: NEG
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 2
52638: NEG
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 1
52660: NEG
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 2
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: EMPTY
52683: LIST
52684: LIST
52685: PUSH
52686: LD_INT 2
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 0
52708: PUSH
52709: LD_INT 2
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: NEG
52719: PUSH
52720: LD_INT 1
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 2
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: NEG
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 2
52756: NEG
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52783: LD_ADDR_VAR 0 55
52787: PUSH
52788: LD_INT 0
52790: PUSH
52791: LD_INT 0
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: PUSH
52822: LD_INT 1
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 0
52831: PUSH
52832: LD_INT 1
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: LD_INT 0
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: NEG
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 1
52864: NEG
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 0
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 2
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_INT 1
52928: PUSH
52929: LD_INT 2
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 2
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: NEG
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: NEG
52983: PUSH
52984: LD_INT 2
52986: NEG
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53013: LD_ADDR_VAR 0 56
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 1
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 0
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 1
53071: NEG
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 2
53098: NEG
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 2
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 2
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 2
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: LD_INT 1
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 2
53189: NEG
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PUSH
53198: LD_INT 2
53200: NEG
53201: PUSH
53202: LD_INT 1
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 2
53212: NEG
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53243: LD_ADDR_VAR 0 57
53247: PUSH
53248: LD_INT 0
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 0
53260: PUSH
53261: LD_INT 1
53263: NEG
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PUSH
53269: LD_INT 1
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 1
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: LD_INT 1
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 1
53312: NEG
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 2
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: LD_INT 2
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 0
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: PUSH
53379: LD_INT 2
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 0
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 1
53408: NEG
53409: PUSH
53410: LD_INT 1
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: NEG
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 2
53442: NEG
53443: PUSH
53444: LD_INT 2
53446: NEG
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53473: LD_ADDR_VAR 0 58
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 0
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: LD_INT 1
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 1
53554: NEG
53555: PUSH
53556: LD_INT 2
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: LD_INT 2
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 2
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 2
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: PUSH
53609: LD_INT 2
53611: PUSH
53612: EMPTY
53613: LIST
53614: LIST
53615: PUSH
53616: LD_INT 1
53618: PUSH
53619: LD_INT 2
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: NEG
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: NEG
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53703: LD_ADDR_VAR 0 59
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53791: LD_ADDR_VAR 0 60
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53879: LD_ADDR_VAR 0 61
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: LD_INT 1
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 1
53937: NEG
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 1
53948: NEG
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: LIST
53966: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53967: LD_ADDR_VAR 0 62
53971: PUSH
53972: LD_INT 0
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 0
53984: PUSH
53985: LD_INT 1
53987: NEG
53988: PUSH
53989: EMPTY
53990: LIST
53991: LIST
53992: PUSH
53993: LD_INT 1
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 1
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 1
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 1
54025: NEG
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54055: LD_ADDR_VAR 0 63
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: LD_INT 0
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 1
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 0
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: LD_INT 1
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54143: LD_ADDR_VAR 0 64
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: LD_INT 1
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 1
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: NEG
54202: PUSH
54203: LD_INT 0
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 1
54212: NEG
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: ST_TO_ADDR
// end ; 1 :
54231: GO 60128
54233: LD_INT 1
54235: DOUBLE
54236: EQUAL
54237: IFTRUE 54241
54239: GO 56864
54241: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54242: LD_ADDR_VAR 0 11
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 3
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 2
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: LIST
54285: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54286: LD_ADDR_VAR 0 12
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 1
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 3
54314: PUSH
54315: LD_INT 1
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: LIST
54326: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54327: LD_ADDR_VAR 0 13
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 3
54344: PUSH
54345: LD_INT 3
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54367: LD_ADDR_VAR 0 14
54371: PUSH
54372: LD_INT 1
54374: PUSH
54375: LD_INT 3
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: LD_INT 3
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: NEG
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54408: LD_ADDR_VAR 0 15
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 1
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: NEG
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 3
54437: NEG
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: LIST
54451: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54452: LD_ADDR_VAR 0 16
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 3
54463: NEG
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 3
54471: NEG
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: EMPTY
54478: LIST
54479: LIST
54480: PUSH
54481: LD_INT 3
54483: NEG
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: LIST
54497: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54498: LD_ADDR_VAR 0 17
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: LD_INT 0
54517: PUSH
54518: LD_INT 3
54520: NEG
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54542: LD_ADDR_VAR 0 18
54546: PUSH
54547: LD_INT 2
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 3
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 3
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54583: LD_ADDR_VAR 0 19
54587: PUSH
54588: LD_INT 3
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: PUSH
54601: LD_INT 3
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: PUSH
54611: LD_INT 3
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: LIST
54622: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54623: LD_ADDR_VAR 0 20
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: LD_INT 3
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 0
54640: PUSH
54641: LD_INT 3
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: LIST
54663: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54664: LD_ADDR_VAR 0 21
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54708: LD_ADDR_VAR 0 22
54712: PUSH
54713: LD_INT 2
54715: NEG
54716: PUSH
54717: LD_INT 3
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: NEG
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: LIST
54753: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54754: LD_ADDR_VAR 0 23
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: LD_INT 3
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 4
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 3
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: LIST
54797: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54798: LD_ADDR_VAR 0 24
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: LD_INT 0
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: LD_INT 1
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 4
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: LIST
54838: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54839: LD_ADDR_VAR 0 25
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 4
54856: PUSH
54857: LD_INT 3
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 3
54866: PUSH
54867: LD_INT 4
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: LIST
54878: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54879: LD_ADDR_VAR 0 26
54883: PUSH
54884: LD_INT 0
54886: PUSH
54887: LD_INT 3
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 4
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 3
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: LIST
54919: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54920: LD_ADDR_VAR 0 27
54924: PUSH
54925: LD_INT 3
54927: NEG
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 3
54938: NEG
54939: PUSH
54940: LD_INT 1
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 4
54949: NEG
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: LIST
54963: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54964: LD_ADDR_VAR 0 28
54968: PUSH
54969: LD_INT 3
54971: NEG
54972: PUSH
54973: LD_INT 3
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 3
54983: NEG
54984: PUSH
54985: LD_INT 4
54987: NEG
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 4
54995: NEG
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: LIST
55009: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55010: LD_ADDR_VAR 0 29
55014: PUSH
55015: LD_INT 1
55017: NEG
55018: PUSH
55019: LD_INT 3
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 3
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 4
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 0
55063: PUSH
55064: LD_INT 4
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 1
55074: PUSH
55075: LD_INT 3
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 5
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 5
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: NEG
55120: PUSH
55121: LD_INT 6
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: LD_INT 0
55131: PUSH
55132: LD_INT 6
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 5
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55165: LD_ADDR_VAR 0 30
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 1
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 3
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 4
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 4
55224: PUSH
55225: LD_INT 1
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 4
55234: PUSH
55235: LD_INT 1
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 5
55245: PUSH
55246: LD_INT 0
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 5
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 5
55265: PUSH
55266: LD_INT 1
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 6
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 6
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55308: LD_ADDR_VAR 0 31
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 4
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 4
55355: PUSH
55356: LD_INT 4
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 3
55365: PUSH
55366: LD_INT 4
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 5
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 5
55385: PUSH
55386: LD_INT 5
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: LD_INT 4
55395: PUSH
55396: LD_INT 5
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: PUSH
55403: LD_INT 6
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: PUSH
55413: LD_INT 6
55415: PUSH
55416: LD_INT 6
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 5
55425: PUSH
55426: LD_INT 6
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55447: LD_ADDR_VAR 0 32
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 4
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 4
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: LD_INT 3
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 5
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 5
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 4
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: PUSH
55548: LD_INT 6
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 0
55557: PUSH
55558: LD_INT 6
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: NEG
55568: PUSH
55569: LD_INT 5
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55590: LD_ADDR_VAR 0 33
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 3
55608: NEG
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 3
55619: NEG
55620: PUSH
55621: LD_INT 1
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 3
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 4
55642: NEG
55643: PUSH
55644: LD_INT 0
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: NEG
55654: PUSH
55655: LD_INT 1
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 4
55665: NEG
55666: PUSH
55667: LD_INT 1
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 5
55676: NEG
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 5
55687: NEG
55688: PUSH
55689: LD_INT 1
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 5
55699: NEG
55700: PUSH
55701: LD_INT 1
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 6
55710: NEG
55711: PUSH
55712: LD_INT 0
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 6
55721: NEG
55722: PUSH
55723: LD_INT 1
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55745: LD_ADDR_VAR 0 34
55749: PUSH
55750: LD_INT 2
55752: NEG
55753: PUSH
55754: LD_INT 3
55756: NEG
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 3
55776: NEG
55777: PUSH
55778: LD_INT 3
55780: NEG
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 3
55788: NEG
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 4
55800: NEG
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 4
55812: NEG
55813: PUSH
55814: LD_INT 4
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 4
55824: NEG
55825: PUSH
55826: LD_INT 5
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 5
55836: NEG
55837: PUSH
55838: LD_INT 4
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 5
55848: NEG
55849: PUSH
55850: LD_INT 5
55852: NEG
55853: PUSH
55854: EMPTY
55855: LIST
55856: LIST
55857: PUSH
55858: LD_INT 5
55860: NEG
55861: PUSH
55862: LD_INT 6
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 6
55872: NEG
55873: PUSH
55874: LD_INT 5
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 6
55884: NEG
55885: PUSH
55886: LD_INT 6
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55908: LD_ADDR_VAR 0 41
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 2
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 1
55926: NEG
55927: PUSH
55928: LD_INT 3
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55952: LD_ADDR_VAR 0 42
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 1
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 3
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: LIST
55992: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55993: LD_ADDR_VAR 0 43
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56033: LD_ADDR_VAR 0 44
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: LD_INT 3
56053: PUSH
56054: EMPTY
56055: LIST
56056: LIST
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: LD_INT 2
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56074: LD_ADDR_VAR 0 45
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 3
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56118: LD_ADDR_VAR 0 46
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 3
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: LD_INT 2
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: LIST
56163: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56164: LD_ADDR_VAR 0 47
56168: PUSH
56169: LD_INT 2
56171: NEG
56172: PUSH
56173: LD_INT 3
56175: NEG
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: NEG
56184: PUSH
56185: LD_INT 3
56187: NEG
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56197: LD_ADDR_VAR 0 48
56201: PUSH
56202: LD_INT 1
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56228: LD_ADDR_VAR 0 49
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 3
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56257: LD_ADDR_VAR 0 50
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 3
56267: PUSH
56268: EMPTY
56269: LIST
56270: LIST
56271: PUSH
56272: LD_INT 1
56274: PUSH
56275: LD_INT 3
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56286: LD_ADDR_VAR 0 51
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 1
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56317: LD_ADDR_VAR 0 52
56321: PUSH
56322: LD_INT 3
56324: NEG
56325: PUSH
56326: LD_INT 1
56328: NEG
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: LD_INT 2
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56350: LD_ADDR_VAR 0 53
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 3
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: LIST
56393: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56394: LD_ADDR_VAR 0 54
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: LD_INT 1
56404: NEG
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 3
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 3
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56435: LD_ADDR_VAR 0 55
56439: PUSH
56440: LD_INT 3
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: PUSH
56453: LD_INT 3
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: LD_INT 3
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: LIST
56474: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56475: LD_ADDR_VAR 0 56
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 3
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: LIST
56515: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56516: LD_ADDR_VAR 0 57
56520: PUSH
56521: LD_INT 2
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 3
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: LIST
56559: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56560: LD_ADDR_VAR 0 58
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 3
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: NEG
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: LIST
56605: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56606: LD_ADDR_VAR 0 59
56610: PUSH
56611: LD_INT 1
56613: NEG
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: LIST
56649: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56650: LD_ADDR_VAR 0 60
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: LD_INT 1
56660: NEG
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 1
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: LIST
56690: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56691: LD_ADDR_VAR 0 61
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56731: LD_ADDR_VAR 0 62
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 0
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 1
56758: NEG
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56772: LD_ADDR_VAR 0 63
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 2
56790: NEG
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 1
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56816: LD_ADDR_VAR 0 64
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: LD_INT 2
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: LD_INT 1
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 2
56847: NEG
56848: PUSH
56849: LD_INT 2
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: LIST
56861: ST_TO_ADDR
// end ; 2 :
56862: GO 60128
56864: LD_INT 2
56866: DOUBLE
56867: EQUAL
56868: IFTRUE 56872
56870: GO 60127
56872: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56873: LD_ADDR_VAR 0 29
56877: PUSH
56878: LD_INT 4
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 4
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 5
56901: PUSH
56902: LD_INT 0
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 5
56911: PUSH
56912: LD_INT 1
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: LD_INT 1
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: PUSH
56939: LD_INT 3
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 3
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 5
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: LD_INT 3
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 3
56983: PUSH
56984: LD_INT 2
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 4
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 4
57003: PUSH
57004: LD_INT 4
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 3
57013: PUSH
57014: LD_INT 4
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: LD_INT 3
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 4
57043: PUSH
57044: LD_INT 2
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 2
57053: PUSH
57054: LD_INT 4
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 0
57063: PUSH
57064: LD_INT 4
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: LD_INT 3
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 4
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 5
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 0
57103: PUSH
57104: LD_INT 5
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 4
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 2
57135: PUSH
57136: LD_INT 5
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 2
57145: NEG
57146: PUSH
57147: LD_INT 3
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 3
57156: NEG
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 3
57167: NEG
57168: PUSH
57169: LD_INT 1
57171: NEG
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: NEG
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 4
57223: NEG
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 4
57235: NEG
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: PUSH
57252: EMPTY
57253: LIST
57254: LIST
57255: PUSH
57256: LD_INT 4
57258: NEG
57259: PUSH
57260: LD_INT 4
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 4
57270: NEG
57271: PUSH
57272: LD_INT 5
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 3
57282: NEG
57283: PUSH
57284: LD_INT 4
57286: NEG
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 3
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 4
57306: NEG
57307: PUSH
57308: LD_INT 3
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 5
57318: NEG
57319: PUSH
57320: LD_INT 4
57322: NEG
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 5
57330: NEG
57331: PUSH
57332: LD_INT 5
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 3
57342: NEG
57343: PUSH
57344: LD_INT 5
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 5
57354: NEG
57355: PUSH
57356: LD_INT 3
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57411: LD_ADDR_VAR 0 30
57415: PUSH
57416: LD_INT 4
57418: PUSH
57419: LD_INT 4
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 4
57428: PUSH
57429: LD_INT 3
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 5
57438: PUSH
57439: LD_INT 4
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: LD_INT 5
57448: PUSH
57449: LD_INT 5
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 4
57458: PUSH
57459: LD_INT 5
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 3
57468: PUSH
57469: LD_INT 4
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 5
57488: PUSH
57489: LD_INT 3
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 3
57498: PUSH
57499: LD_INT 5
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: LD_INT 3
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: LD_INT 2
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 1
57538: PUSH
57539: LD_INT 4
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: LD_INT 4
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: PUSH
57567: LD_INT 1
57569: NEG
57570: PUSH
57571: LD_INT 2
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 4
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 3
57624: NEG
57625: PUSH
57626: LD_INT 0
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 3
57635: NEG
57636: PUSH
57637: LD_INT 1
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: LD_INT 1
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 5
57657: NEG
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 5
57668: NEG
57669: PUSH
57670: LD_INT 1
57672: NEG
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 5
57680: NEG
57681: PUSH
57682: LD_INT 2
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 3
57703: NEG
57704: PUSH
57705: LD_INT 3
57707: NEG
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 3
57715: NEG
57716: PUSH
57717: LD_INT 4
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 3
57731: NEG
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 2
57739: NEG
57740: PUSH
57741: LD_INT 2
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 3
57751: NEG
57752: PUSH
57753: LD_INT 2
57755: NEG
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 4
57763: NEG
57764: PUSH
57765: LD_INT 3
57767: NEG
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 4
57775: NEG
57776: PUSH
57777: LD_INT 4
57779: NEG
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: LD_INT 4
57791: NEG
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 4
57799: NEG
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 0
57811: PUSH
57812: LD_INT 4
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 5
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 4
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 1
57844: PUSH
57845: LD_INT 3
57847: NEG
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: LD_INT 3
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 1
57866: NEG
57867: PUSH
57868: LD_INT 4
57870: NEG
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 5
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 2
57890: PUSH
57891: LD_INT 3
57893: NEG
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 2
57901: NEG
57902: PUSH
57903: LD_INT 5
57905: NEG
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57958: LD_ADDR_VAR 0 31
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 4
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 3
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: LD_INT 4
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 5
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 0
58005: PUSH
58006: LD_INT 5
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 4
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: LD_INT 3
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 2
58037: PUSH
58038: LD_INT 5
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 2
58047: NEG
58048: PUSH
58049: LD_INT 3
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 4
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 4
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 4
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 2
58149: NEG
58150: PUSH
58151: LD_INT 2
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 4
58160: NEG
58161: PUSH
58162: LD_INT 4
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 4
58172: NEG
58173: PUSH
58174: LD_INT 5
58176: NEG
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 3
58184: NEG
58185: PUSH
58186: LD_INT 4
58188: NEG
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: NEG
58197: PUSH
58198: LD_INT 3
58200: NEG
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 4
58208: NEG
58209: PUSH
58210: LD_INT 3
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 5
58220: NEG
58221: PUSH
58222: LD_INT 4
58224: NEG
58225: PUSH
58226: EMPTY
58227: LIST
58228: LIST
58229: PUSH
58230: LD_INT 5
58232: NEG
58233: PUSH
58234: LD_INT 5
58236: NEG
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: LD_INT 5
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 5
58256: NEG
58257: PUSH
58258: LD_INT 3
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: LD_INT 3
58271: NEG
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 0
58279: PUSH
58280: LD_INT 4
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 1
58301: PUSH
58302: LD_INT 2
58304: NEG
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 2
58315: NEG
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 1
58323: NEG
58324: PUSH
58325: LD_INT 3
58327: NEG
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: NEG
58336: PUSH
58337: LD_INT 4
58339: NEG
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: LD_INT 2
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 2
58358: NEG
58359: PUSH
58360: LD_INT 4
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 4
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: LD_INT 1
58383: NEG
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 5
58391: PUSH
58392: LD_INT 0
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 5
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: LD_INT 1
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 3
58431: PUSH
58432: LD_INT 1
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 2
58445: NEG
58446: PUSH
58447: EMPTY
58448: LIST
58449: LIST
58450: PUSH
58451: LD_INT 5
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58508: LD_ADDR_VAR 0 32
58512: PUSH
58513: LD_INT 4
58515: NEG
58516: PUSH
58517: LD_INT 0
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 4
58526: NEG
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 3
58538: NEG
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 4
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: EMPTY
58566: LIST
58567: LIST
58568: PUSH
58569: LD_INT 5
58571: NEG
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 5
58582: NEG
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 5
58594: NEG
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: LD_INT 2
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 3
58617: NEG
58618: PUSH
58619: LD_INT 3
58621: NEG
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: LD_INT 4
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: LD_INT 2
58641: NEG
58642: PUSH
58643: LD_INT 3
58645: NEG
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 2
58657: NEG
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 3
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 4
58677: NEG
58678: PUSH
58679: LD_INT 3
58681: NEG
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 4
58689: NEG
58690: PUSH
58691: LD_INT 4
58693: NEG
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 2
58701: NEG
58702: PUSH
58703: LD_INT 4
58705: NEG
58706: PUSH
58707: EMPTY
58708: LIST
58709: LIST
58710: PUSH
58711: LD_INT 4
58713: NEG
58714: PUSH
58715: LD_INT 2
58717: NEG
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: LD_INT 4
58728: NEG
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 5
58739: NEG
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: LD_INT 4
58750: NEG
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 1
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 3
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 4
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 5
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 2
58815: NEG
58816: PUSH
58817: LD_INT 5
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 4
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: PUSH
58856: LD_INT 4
58858: PUSH
58859: LD_INT 1
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 3
58868: PUSH
58869: LD_INT 1
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: LD_INT 1
58891: NEG
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 2
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: LD_INT 2
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 4
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 4
58930: PUSH
58931: LD_INT 3
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 5
58940: PUSH
58941: LD_INT 4
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 5
58950: PUSH
58951: LD_INT 5
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 4
58960: PUSH
58961: LD_INT 5
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: PUSH
58971: LD_INT 4
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: LD_INT 3
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PUSH
58988: LD_INT 5
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 3
59000: PUSH
59001: LD_INT 5
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59055: LD_ADDR_VAR 0 33
59059: PUSH
59060: LD_INT 4
59062: NEG
59063: PUSH
59064: LD_INT 4
59066: NEG
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 4
59074: NEG
59075: PUSH
59076: LD_INT 5
59078: NEG
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 4
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 3
59098: NEG
59099: PUSH
59100: LD_INT 3
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 4
59110: NEG
59111: PUSH
59112: LD_INT 3
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 5
59122: NEG
59123: PUSH
59124: LD_INT 4
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 5
59134: NEG
59135: PUSH
59136: LD_INT 5
59138: NEG
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: LD_INT 5
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 5
59158: NEG
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 3
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: LD_INT 4
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: LD_INT 3
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 1
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 3
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: LD_INT 4
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: LD_INT 2
59252: NEG
59253: PUSH
59254: EMPTY
59255: LIST
59256: LIST
59257: PUSH
59258: LD_INT 2
59260: NEG
59261: PUSH
59262: LD_INT 4
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 4
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 4
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 5
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 5
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 4
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: LD_INT 0
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 3
59344: PUSH
59345: LD_INT 2
59347: NEG
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 5
59355: PUSH
59356: LD_INT 2
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 3
59365: PUSH
59366: LD_INT 3
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 3
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: LD_INT 4
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: PUSH
59396: LD_INT 4
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: LD_INT 3
59405: PUSH
59406: LD_INT 4
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: LD_INT 3
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: PUSH
59433: LD_INT 4
59435: PUSH
59436: LD_INT 2
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: LD_INT 4
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PUSH
59453: LD_INT 0
59455: PUSH
59456: LD_INT 4
59458: PUSH
59459: EMPTY
59460: LIST
59461: LIST
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 4
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 5
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 5
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 4
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 3
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 2
59527: PUSH
59528: LD_INT 5
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: LD_INT 2
59537: NEG
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: LIST
59587: LIST
59588: LIST
59589: LIST
59590: LIST
59591: LIST
59592: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59593: LD_ADDR_VAR 0 34
59597: PUSH
59598: LD_INT 0
59600: PUSH
59601: LD_INT 4
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 5
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 4
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 1
59633: PUSH
59634: LD_INT 3
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 0
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: LD_INT 4
59659: NEG
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: NEG
59668: PUSH
59669: LD_INT 5
59671: NEG
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 2
59690: NEG
59691: PUSH
59692: LD_INT 5
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 3
59702: PUSH
59703: LD_INT 0
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 4
59723: PUSH
59724: LD_INT 0
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 4
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 3
59743: PUSH
59744: LD_INT 1
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 2
59753: PUSH
59754: LD_INT 0
59756: PUSH
59757: EMPTY
59758: LIST
59759: LIST
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 2
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 4
59785: PUSH
59786: LD_INT 2
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 4
59795: PUSH
59796: LD_INT 4
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 4
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 5
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 5
59825: PUSH
59826: LD_INT 5
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: LD_INT 5
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: LD_INT 4
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 3
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 5
59865: PUSH
59866: LD_INT 3
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 5
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: LD_INT 3
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 0
59895: PUSH
59896: LD_INT 2
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: PUSH
59906: LD_INT 3
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: PUSH
59916: LD_INT 4
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 0
59925: PUSH
59926: LD_INT 4
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: LD_INT 3
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: LD_INT 2
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 4
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 4
59978: NEG
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 4
59989: NEG
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 3
60012: NEG
60013: PUSH
60014: LD_INT 1
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 4
60023: NEG
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 5
60034: NEG
60035: PUSH
60036: LD_INT 0
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 5
60045: NEG
60046: PUSH
60047: LD_INT 1
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 5
60057: NEG
60058: PUSH
60059: LD_INT 2
60061: NEG
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: ST_TO_ADDR
// end ; end ;
60125: GO 60128
60127: POP
// case btype of b_depot , b_warehouse :
60128: LD_VAR 0 1
60132: PUSH
60133: LD_INT 0
60135: DOUBLE
60136: EQUAL
60137: IFTRUE 60147
60139: LD_INT 1
60141: DOUBLE
60142: EQUAL
60143: IFTRUE 60147
60145: GO 60348
60147: POP
// case nation of nation_american :
60148: LD_VAR 0 5
60152: PUSH
60153: LD_INT 1
60155: DOUBLE
60156: EQUAL
60157: IFTRUE 60161
60159: GO 60217
60161: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60162: LD_ADDR_VAR 0 9
60166: PUSH
60167: LD_VAR 0 11
60171: PUSH
60172: LD_VAR 0 12
60176: PUSH
60177: LD_VAR 0 13
60181: PUSH
60182: LD_VAR 0 14
60186: PUSH
60187: LD_VAR 0 15
60191: PUSH
60192: LD_VAR 0 16
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: LIST
60201: LIST
60202: LIST
60203: LIST
60204: PUSH
60205: LD_VAR 0 4
60209: PUSH
60210: LD_INT 1
60212: PLUS
60213: ARRAY
60214: ST_TO_ADDR
60215: GO 60346
60217: LD_INT 2
60219: DOUBLE
60220: EQUAL
60221: IFTRUE 60225
60223: GO 60281
60225: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60226: LD_ADDR_VAR 0 9
60230: PUSH
60231: LD_VAR 0 17
60235: PUSH
60236: LD_VAR 0 18
60240: PUSH
60241: LD_VAR 0 19
60245: PUSH
60246: LD_VAR 0 20
60250: PUSH
60251: LD_VAR 0 21
60255: PUSH
60256: LD_VAR 0 22
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: PUSH
60269: LD_VAR 0 4
60273: PUSH
60274: LD_INT 1
60276: PLUS
60277: ARRAY
60278: ST_TO_ADDR
60279: GO 60346
60281: LD_INT 3
60283: DOUBLE
60284: EQUAL
60285: IFTRUE 60289
60287: GO 60345
60289: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60290: LD_ADDR_VAR 0 9
60294: PUSH
60295: LD_VAR 0 23
60299: PUSH
60300: LD_VAR 0 24
60304: PUSH
60305: LD_VAR 0 25
60309: PUSH
60310: LD_VAR 0 26
60314: PUSH
60315: LD_VAR 0 27
60319: PUSH
60320: LD_VAR 0 28
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: LIST
60329: LIST
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 4
60337: PUSH
60338: LD_INT 1
60340: PLUS
60341: ARRAY
60342: ST_TO_ADDR
60343: GO 60346
60345: POP
60346: GO 60901
60348: LD_INT 2
60350: DOUBLE
60351: EQUAL
60352: IFTRUE 60362
60354: LD_INT 3
60356: DOUBLE
60357: EQUAL
60358: IFTRUE 60362
60360: GO 60418
60362: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60363: LD_ADDR_VAR 0 9
60367: PUSH
60368: LD_VAR 0 29
60372: PUSH
60373: LD_VAR 0 30
60377: PUSH
60378: LD_VAR 0 31
60382: PUSH
60383: LD_VAR 0 32
60387: PUSH
60388: LD_VAR 0 33
60392: PUSH
60393: LD_VAR 0 34
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: PUSH
60406: LD_VAR 0 4
60410: PUSH
60411: LD_INT 1
60413: PLUS
60414: ARRAY
60415: ST_TO_ADDR
60416: GO 60901
60418: LD_INT 16
60420: DOUBLE
60421: EQUAL
60422: IFTRUE 60480
60424: LD_INT 17
60426: DOUBLE
60427: EQUAL
60428: IFTRUE 60480
60430: LD_INT 18
60432: DOUBLE
60433: EQUAL
60434: IFTRUE 60480
60436: LD_INT 19
60438: DOUBLE
60439: EQUAL
60440: IFTRUE 60480
60442: LD_INT 22
60444: DOUBLE
60445: EQUAL
60446: IFTRUE 60480
60448: LD_INT 20
60450: DOUBLE
60451: EQUAL
60452: IFTRUE 60480
60454: LD_INT 21
60456: DOUBLE
60457: EQUAL
60458: IFTRUE 60480
60460: LD_INT 23
60462: DOUBLE
60463: EQUAL
60464: IFTRUE 60480
60466: LD_INT 24
60468: DOUBLE
60469: EQUAL
60470: IFTRUE 60480
60472: LD_INT 25
60474: DOUBLE
60475: EQUAL
60476: IFTRUE 60480
60478: GO 60536
60480: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60481: LD_ADDR_VAR 0 9
60485: PUSH
60486: LD_VAR 0 35
60490: PUSH
60491: LD_VAR 0 36
60495: PUSH
60496: LD_VAR 0 37
60500: PUSH
60501: LD_VAR 0 38
60505: PUSH
60506: LD_VAR 0 39
60510: PUSH
60511: LD_VAR 0 40
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: PUSH
60524: LD_VAR 0 4
60528: PUSH
60529: LD_INT 1
60531: PLUS
60532: ARRAY
60533: ST_TO_ADDR
60534: GO 60901
60536: LD_INT 6
60538: DOUBLE
60539: EQUAL
60540: IFTRUE 60592
60542: LD_INT 7
60544: DOUBLE
60545: EQUAL
60546: IFTRUE 60592
60548: LD_INT 8
60550: DOUBLE
60551: EQUAL
60552: IFTRUE 60592
60554: LD_INT 13
60556: DOUBLE
60557: EQUAL
60558: IFTRUE 60592
60560: LD_INT 12
60562: DOUBLE
60563: EQUAL
60564: IFTRUE 60592
60566: LD_INT 15
60568: DOUBLE
60569: EQUAL
60570: IFTRUE 60592
60572: LD_INT 11
60574: DOUBLE
60575: EQUAL
60576: IFTRUE 60592
60578: LD_INT 14
60580: DOUBLE
60581: EQUAL
60582: IFTRUE 60592
60584: LD_INT 10
60586: DOUBLE
60587: EQUAL
60588: IFTRUE 60592
60590: GO 60648
60592: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60593: LD_ADDR_VAR 0 9
60597: PUSH
60598: LD_VAR 0 41
60602: PUSH
60603: LD_VAR 0 42
60607: PUSH
60608: LD_VAR 0 43
60612: PUSH
60613: LD_VAR 0 44
60617: PUSH
60618: LD_VAR 0 45
60622: PUSH
60623: LD_VAR 0 46
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: LIST
60632: LIST
60633: LIST
60634: LIST
60635: PUSH
60636: LD_VAR 0 4
60640: PUSH
60641: LD_INT 1
60643: PLUS
60644: ARRAY
60645: ST_TO_ADDR
60646: GO 60901
60648: LD_INT 36
60650: DOUBLE
60651: EQUAL
60652: IFTRUE 60656
60654: GO 60712
60656: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60657: LD_ADDR_VAR 0 9
60661: PUSH
60662: LD_VAR 0 47
60666: PUSH
60667: LD_VAR 0 48
60671: PUSH
60672: LD_VAR 0 49
60676: PUSH
60677: LD_VAR 0 50
60681: PUSH
60682: LD_VAR 0 51
60686: PUSH
60687: LD_VAR 0 52
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: LIST
60699: PUSH
60700: LD_VAR 0 4
60704: PUSH
60705: LD_INT 1
60707: PLUS
60708: ARRAY
60709: ST_TO_ADDR
60710: GO 60901
60712: LD_INT 4
60714: DOUBLE
60715: EQUAL
60716: IFTRUE 60738
60718: LD_INT 5
60720: DOUBLE
60721: EQUAL
60722: IFTRUE 60738
60724: LD_INT 34
60726: DOUBLE
60727: EQUAL
60728: IFTRUE 60738
60730: LD_INT 37
60732: DOUBLE
60733: EQUAL
60734: IFTRUE 60738
60736: GO 60794
60738: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60739: LD_ADDR_VAR 0 9
60743: PUSH
60744: LD_VAR 0 53
60748: PUSH
60749: LD_VAR 0 54
60753: PUSH
60754: LD_VAR 0 55
60758: PUSH
60759: LD_VAR 0 56
60763: PUSH
60764: LD_VAR 0 57
60768: PUSH
60769: LD_VAR 0 58
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: PUSH
60782: LD_VAR 0 4
60786: PUSH
60787: LD_INT 1
60789: PLUS
60790: ARRAY
60791: ST_TO_ADDR
60792: GO 60901
60794: LD_INT 31
60796: DOUBLE
60797: EQUAL
60798: IFTRUE 60844
60800: LD_INT 32
60802: DOUBLE
60803: EQUAL
60804: IFTRUE 60844
60806: LD_INT 33
60808: DOUBLE
60809: EQUAL
60810: IFTRUE 60844
60812: LD_INT 27
60814: DOUBLE
60815: EQUAL
60816: IFTRUE 60844
60818: LD_INT 26
60820: DOUBLE
60821: EQUAL
60822: IFTRUE 60844
60824: LD_INT 28
60826: DOUBLE
60827: EQUAL
60828: IFTRUE 60844
60830: LD_INT 29
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60844
60836: LD_INT 30
60838: DOUBLE
60839: EQUAL
60840: IFTRUE 60844
60842: GO 60900
60844: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60845: LD_ADDR_VAR 0 9
60849: PUSH
60850: LD_VAR 0 59
60854: PUSH
60855: LD_VAR 0 60
60859: PUSH
60860: LD_VAR 0 61
60864: PUSH
60865: LD_VAR 0 62
60869: PUSH
60870: LD_VAR 0 63
60874: PUSH
60875: LD_VAR 0 64
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: LD_VAR 0 4
60892: PUSH
60893: LD_INT 1
60895: PLUS
60896: ARRAY
60897: ST_TO_ADDR
60898: GO 60901
60900: POP
// temp_list2 = [ ] ;
60901: LD_ADDR_VAR 0 10
60905: PUSH
60906: EMPTY
60907: ST_TO_ADDR
// for i in temp_list do
60908: LD_ADDR_VAR 0 8
60912: PUSH
60913: LD_VAR 0 9
60917: PUSH
60918: FOR_IN
60919: IFFALSE 60971
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60921: LD_ADDR_VAR 0 10
60925: PUSH
60926: LD_VAR 0 10
60930: PUSH
60931: LD_VAR 0 8
60935: PUSH
60936: LD_INT 1
60938: ARRAY
60939: PUSH
60940: LD_VAR 0 2
60944: PLUS
60945: PUSH
60946: LD_VAR 0 8
60950: PUSH
60951: LD_INT 2
60953: ARRAY
60954: PUSH
60955: LD_VAR 0 3
60959: PLUS
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: EMPTY
60966: LIST
60967: ADD
60968: ST_TO_ADDR
60969: GO 60918
60971: POP
60972: POP
// result = temp_list2 ;
60973: LD_ADDR_VAR 0 7
60977: PUSH
60978: LD_VAR 0 10
60982: ST_TO_ADDR
// end ;
60983: LD_VAR 0 7
60987: RET
// export function EnemyInRange ( unit , dist ) ; begin
60988: LD_INT 0
60990: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60991: LD_ADDR_VAR 0 3
60995: PUSH
60996: LD_VAR 0 1
61000: PPUSH
61001: CALL_OW 255
61005: PPUSH
61006: LD_VAR 0 1
61010: PPUSH
61011: CALL_OW 250
61015: PPUSH
61016: LD_VAR 0 1
61020: PPUSH
61021: CALL_OW 251
61025: PPUSH
61026: LD_VAR 0 2
61030: PPUSH
61031: CALL 34361 0 4
61035: PUSH
61036: LD_INT 4
61038: ARRAY
61039: ST_TO_ADDR
// end ;
61040: LD_VAR 0 3
61044: RET
// export function PlayerSeeMe ( unit ) ; begin
61045: LD_INT 0
61047: PPUSH
// result := See ( your_side , unit ) ;
61048: LD_ADDR_VAR 0 2
61052: PUSH
61053: LD_OWVAR 2
61057: PPUSH
61058: LD_VAR 0 1
61062: PPUSH
61063: CALL_OW 292
61067: ST_TO_ADDR
// end ;
61068: LD_VAR 0 2
61072: RET
// export function ReverseDir ( unit ) ; begin
61073: LD_INT 0
61075: PPUSH
// if not unit then
61076: LD_VAR 0 1
61080: NOT
61081: IFFALSE 61085
// exit ;
61083: GO 61108
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61085: LD_ADDR_VAR 0 2
61089: PUSH
61090: LD_VAR 0 1
61094: PPUSH
61095: CALL_OW 254
61099: PUSH
61100: LD_INT 3
61102: PLUS
61103: PUSH
61104: LD_INT 6
61106: MOD
61107: ST_TO_ADDR
// end ;
61108: LD_VAR 0 2
61112: RET
// export function ReverseArray ( array ) ; var i ; begin
61113: LD_INT 0
61115: PPUSH
61116: PPUSH
// if not array then
61117: LD_VAR 0 1
61121: NOT
61122: IFFALSE 61126
// exit ;
61124: GO 61181
// result := [ ] ;
61126: LD_ADDR_VAR 0 2
61130: PUSH
61131: EMPTY
61132: ST_TO_ADDR
// for i := array downto 1 do
61133: LD_ADDR_VAR 0 3
61137: PUSH
61138: DOUBLE
61139: LD_VAR 0 1
61143: INC
61144: ST_TO_ADDR
61145: LD_INT 1
61147: PUSH
61148: FOR_DOWNTO
61149: IFFALSE 61179
// result := Join ( result , array [ i ] ) ;
61151: LD_ADDR_VAR 0 2
61155: PUSH
61156: LD_VAR 0 2
61160: PPUSH
61161: LD_VAR 0 1
61165: PUSH
61166: LD_VAR 0 3
61170: ARRAY
61171: PPUSH
61172: CALL 65826 0 2
61176: ST_TO_ADDR
61177: GO 61148
61179: POP
61180: POP
// end ;
61181: LD_VAR 0 2
61185: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61186: LD_INT 0
61188: PPUSH
61189: PPUSH
61190: PPUSH
61191: PPUSH
61192: PPUSH
61193: PPUSH
// if not unit or not hexes then
61194: LD_VAR 0 1
61198: NOT
61199: PUSH
61200: LD_VAR 0 2
61204: NOT
61205: OR
61206: IFFALSE 61210
// exit ;
61208: GO 61333
// dist := 9999 ;
61210: LD_ADDR_VAR 0 5
61214: PUSH
61215: LD_INT 9999
61217: ST_TO_ADDR
// for i = 1 to hexes do
61218: LD_ADDR_VAR 0 4
61222: PUSH
61223: DOUBLE
61224: LD_INT 1
61226: DEC
61227: ST_TO_ADDR
61228: LD_VAR 0 2
61232: PUSH
61233: FOR_TO
61234: IFFALSE 61321
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61236: LD_ADDR_VAR 0 6
61240: PUSH
61241: LD_VAR 0 1
61245: PPUSH
61246: LD_VAR 0 2
61250: PUSH
61251: LD_VAR 0 4
61255: ARRAY
61256: PUSH
61257: LD_INT 1
61259: ARRAY
61260: PPUSH
61261: LD_VAR 0 2
61265: PUSH
61266: LD_VAR 0 4
61270: ARRAY
61271: PUSH
61272: LD_INT 2
61274: ARRAY
61275: PPUSH
61276: CALL_OW 297
61280: ST_TO_ADDR
// if tdist < dist then
61281: LD_VAR 0 6
61285: PUSH
61286: LD_VAR 0 5
61290: LESS
61291: IFFALSE 61319
// begin hex := hexes [ i ] ;
61293: LD_ADDR_VAR 0 8
61297: PUSH
61298: LD_VAR 0 2
61302: PUSH
61303: LD_VAR 0 4
61307: ARRAY
61308: ST_TO_ADDR
// dist := tdist ;
61309: LD_ADDR_VAR 0 5
61313: PUSH
61314: LD_VAR 0 6
61318: ST_TO_ADDR
// end ; end ;
61319: GO 61233
61321: POP
61322: POP
// result := hex ;
61323: LD_ADDR_VAR 0 3
61327: PUSH
61328: LD_VAR 0 8
61332: ST_TO_ADDR
// end ;
61333: LD_VAR 0 3
61337: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61338: LD_INT 0
61340: PPUSH
61341: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61342: LD_VAR 0 1
61346: NOT
61347: PUSH
61348: LD_VAR 0 1
61352: PUSH
61353: LD_INT 21
61355: PUSH
61356: LD_INT 2
61358: PUSH
61359: EMPTY
61360: LIST
61361: LIST
61362: PUSH
61363: LD_INT 23
61365: PUSH
61366: LD_INT 2
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PPUSH
61377: CALL_OW 69
61381: IN
61382: NOT
61383: OR
61384: IFFALSE 61388
// exit ;
61386: GO 61435
// for i = 1 to 3 do
61388: LD_ADDR_VAR 0 3
61392: PUSH
61393: DOUBLE
61394: LD_INT 1
61396: DEC
61397: ST_TO_ADDR
61398: LD_INT 3
61400: PUSH
61401: FOR_TO
61402: IFFALSE 61433
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61404: LD_VAR 0 1
61408: PPUSH
61409: CALL_OW 250
61413: PPUSH
61414: LD_VAR 0 1
61418: PPUSH
61419: CALL_OW 251
61423: PPUSH
61424: LD_INT 1
61426: PPUSH
61427: CALL_OW 453
61431: GO 61401
61433: POP
61434: POP
// end ;
61435: LD_VAR 0 2
61439: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61440: LD_INT 0
61442: PPUSH
61443: PPUSH
61444: PPUSH
61445: PPUSH
61446: PPUSH
61447: PPUSH
// if not unit or not enemy_unit then
61448: LD_VAR 0 1
61452: NOT
61453: PUSH
61454: LD_VAR 0 2
61458: NOT
61459: OR
61460: IFFALSE 61464
// exit ;
61462: GO 61931
// if GetLives ( i ) < 250 then
61464: LD_VAR 0 4
61468: PPUSH
61469: CALL_OW 256
61473: PUSH
61474: LD_INT 250
61476: LESS
61477: IFFALSE 61490
// begin ComAutodestruct ( i ) ;
61479: LD_VAR 0 4
61483: PPUSH
61484: CALL 61338 0 1
// exit ;
61488: GO 61931
// end ; x := GetX ( enemy_unit ) ;
61490: LD_ADDR_VAR 0 7
61494: PUSH
61495: LD_VAR 0 2
61499: PPUSH
61500: CALL_OW 250
61504: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61505: LD_ADDR_VAR 0 8
61509: PUSH
61510: LD_VAR 0 2
61514: PPUSH
61515: CALL_OW 251
61519: ST_TO_ADDR
// if not x or not y then
61520: LD_VAR 0 7
61524: NOT
61525: PUSH
61526: LD_VAR 0 8
61530: NOT
61531: OR
61532: IFFALSE 61536
// exit ;
61534: GO 61931
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61536: LD_ADDR_VAR 0 6
61540: PUSH
61541: LD_VAR 0 7
61545: PPUSH
61546: LD_INT 0
61548: PPUSH
61549: LD_INT 4
61551: PPUSH
61552: CALL_OW 272
61556: PUSH
61557: LD_VAR 0 8
61561: PPUSH
61562: LD_INT 0
61564: PPUSH
61565: LD_INT 4
61567: PPUSH
61568: CALL_OW 273
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_VAR 0 7
61581: PPUSH
61582: LD_INT 1
61584: PPUSH
61585: LD_INT 4
61587: PPUSH
61588: CALL_OW 272
61592: PUSH
61593: LD_VAR 0 8
61597: PPUSH
61598: LD_INT 1
61600: PPUSH
61601: LD_INT 4
61603: PPUSH
61604: CALL_OW 273
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_VAR 0 7
61617: PPUSH
61618: LD_INT 2
61620: PPUSH
61621: LD_INT 4
61623: PPUSH
61624: CALL_OW 272
61628: PUSH
61629: LD_VAR 0 8
61633: PPUSH
61634: LD_INT 2
61636: PPUSH
61637: LD_INT 4
61639: PPUSH
61640: CALL_OW 273
61644: PUSH
61645: EMPTY
61646: LIST
61647: LIST
61648: PUSH
61649: LD_VAR 0 7
61653: PPUSH
61654: LD_INT 3
61656: PPUSH
61657: LD_INT 4
61659: PPUSH
61660: CALL_OW 272
61664: PUSH
61665: LD_VAR 0 8
61669: PPUSH
61670: LD_INT 3
61672: PPUSH
61673: LD_INT 4
61675: PPUSH
61676: CALL_OW 273
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_VAR 0 7
61689: PPUSH
61690: LD_INT 4
61692: PPUSH
61693: LD_INT 4
61695: PPUSH
61696: CALL_OW 272
61700: PUSH
61701: LD_VAR 0 8
61705: PPUSH
61706: LD_INT 4
61708: PPUSH
61709: LD_INT 4
61711: PPUSH
61712: CALL_OW 273
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_VAR 0 7
61725: PPUSH
61726: LD_INT 5
61728: PPUSH
61729: LD_INT 4
61731: PPUSH
61732: CALL_OW 272
61736: PUSH
61737: LD_VAR 0 8
61741: PPUSH
61742: LD_INT 5
61744: PPUSH
61745: LD_INT 4
61747: PPUSH
61748: CALL_OW 273
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// for i = tmp downto 1 do
61765: LD_ADDR_VAR 0 4
61769: PUSH
61770: DOUBLE
61771: LD_VAR 0 6
61775: INC
61776: ST_TO_ADDR
61777: LD_INT 1
61779: PUSH
61780: FOR_DOWNTO
61781: IFFALSE 61882
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61783: LD_VAR 0 6
61787: PUSH
61788: LD_VAR 0 4
61792: ARRAY
61793: PUSH
61794: LD_INT 1
61796: ARRAY
61797: PPUSH
61798: LD_VAR 0 6
61802: PUSH
61803: LD_VAR 0 4
61807: ARRAY
61808: PUSH
61809: LD_INT 2
61811: ARRAY
61812: PPUSH
61813: CALL_OW 488
61817: NOT
61818: PUSH
61819: LD_VAR 0 6
61823: PUSH
61824: LD_VAR 0 4
61828: ARRAY
61829: PUSH
61830: LD_INT 1
61832: ARRAY
61833: PPUSH
61834: LD_VAR 0 6
61838: PUSH
61839: LD_VAR 0 4
61843: ARRAY
61844: PUSH
61845: LD_INT 2
61847: ARRAY
61848: PPUSH
61849: CALL_OW 428
61853: PUSH
61854: LD_INT 0
61856: NONEQUAL
61857: OR
61858: IFFALSE 61880
// tmp := Delete ( tmp , i ) ;
61860: LD_ADDR_VAR 0 6
61864: PUSH
61865: LD_VAR 0 6
61869: PPUSH
61870: LD_VAR 0 4
61874: PPUSH
61875: CALL_OW 3
61879: ST_TO_ADDR
61880: GO 61780
61882: POP
61883: POP
// j := GetClosestHex ( unit , tmp ) ;
61884: LD_ADDR_VAR 0 5
61888: PUSH
61889: LD_VAR 0 1
61893: PPUSH
61894: LD_VAR 0 6
61898: PPUSH
61899: CALL 61186 0 2
61903: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61904: LD_VAR 0 1
61908: PPUSH
61909: LD_VAR 0 5
61913: PUSH
61914: LD_INT 1
61916: ARRAY
61917: PPUSH
61918: LD_VAR 0 5
61922: PUSH
61923: LD_INT 2
61925: ARRAY
61926: PPUSH
61927: CALL_OW 111
// end ;
61931: LD_VAR 0 3
61935: RET
// export function PrepareApemanSoldier ( ) ; begin
61936: LD_INT 0
61938: PPUSH
// uc_nation := 0 ;
61939: LD_ADDR_OWVAR 21
61943: PUSH
61944: LD_INT 0
61946: ST_TO_ADDR
// hc_sex := sex_male ;
61947: LD_ADDR_OWVAR 27
61951: PUSH
61952: LD_INT 1
61954: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61955: LD_ADDR_OWVAR 28
61959: PUSH
61960: LD_INT 15
61962: ST_TO_ADDR
// hc_gallery :=  ;
61963: LD_ADDR_OWVAR 33
61967: PUSH
61968: LD_STRING 
61970: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61971: LD_ADDR_OWVAR 31
61975: PUSH
61976: LD_INT 0
61978: PPUSH
61979: LD_INT 3
61981: PPUSH
61982: CALL_OW 12
61986: PUSH
61987: LD_INT 0
61989: PPUSH
61990: LD_INT 3
61992: PPUSH
61993: CALL_OW 12
61997: PUSH
61998: LD_INT 0
62000: PUSH
62001: LD_INT 0
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: ST_TO_ADDR
// end ;
62010: LD_VAR 0 1
62014: RET
// export function PrepareApemanEngineer ( ) ; begin
62015: LD_INT 0
62017: PPUSH
// uc_nation := 0 ;
62018: LD_ADDR_OWVAR 21
62022: PUSH
62023: LD_INT 0
62025: ST_TO_ADDR
// hc_sex := sex_male ;
62026: LD_ADDR_OWVAR 27
62030: PUSH
62031: LD_INT 1
62033: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62034: LD_ADDR_OWVAR 28
62038: PUSH
62039: LD_INT 16
62041: ST_TO_ADDR
// hc_gallery :=  ;
62042: LD_ADDR_OWVAR 33
62046: PUSH
62047: LD_STRING 
62049: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62050: LD_ADDR_OWVAR 31
62054: PUSH
62055: LD_INT 0
62057: PPUSH
62058: LD_INT 3
62060: PPUSH
62061: CALL_OW 12
62065: PUSH
62066: LD_INT 0
62068: PPUSH
62069: LD_INT 3
62071: PPUSH
62072: CALL_OW 12
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: ST_TO_ADDR
// end ;
62089: LD_VAR 0 1
62093: RET
// export function PrepareApeman ( agressivity ) ; begin
62094: LD_INT 0
62096: PPUSH
// uc_side := 0 ;
62097: LD_ADDR_OWVAR 20
62101: PUSH
62102: LD_INT 0
62104: ST_TO_ADDR
// uc_nation := 0 ;
62105: LD_ADDR_OWVAR 21
62109: PUSH
62110: LD_INT 0
62112: ST_TO_ADDR
// hc_sex := sex_male ;
62113: LD_ADDR_OWVAR 27
62117: PUSH
62118: LD_INT 1
62120: ST_TO_ADDR
// hc_class := class_apeman ;
62121: LD_ADDR_OWVAR 28
62125: PUSH
62126: LD_INT 12
62128: ST_TO_ADDR
// hc_gallery :=  ;
62129: LD_ADDR_OWVAR 33
62133: PUSH
62134: LD_STRING 
62136: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62137: LD_ADDR_OWVAR 35
62141: PUSH
62142: LD_VAR 0 1
62146: NEG
62147: PPUSH
62148: LD_VAR 0 1
62152: PPUSH
62153: CALL_OW 12
62157: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62158: LD_ADDR_OWVAR 31
62162: PUSH
62163: LD_INT 0
62165: PPUSH
62166: LD_INT 3
62168: PPUSH
62169: CALL_OW 12
62173: PUSH
62174: LD_INT 0
62176: PPUSH
62177: LD_INT 3
62179: PPUSH
62180: CALL_OW 12
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: LD_INT 0
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// end ;
62197: LD_VAR 0 2
62201: RET
// export function PrepareTiger ( agressivity ) ; begin
62202: LD_INT 0
62204: PPUSH
// uc_side := 0 ;
62205: LD_ADDR_OWVAR 20
62209: PUSH
62210: LD_INT 0
62212: ST_TO_ADDR
// uc_nation := 0 ;
62213: LD_ADDR_OWVAR 21
62217: PUSH
62218: LD_INT 0
62220: ST_TO_ADDR
// hc_class := class_tiger ;
62221: LD_ADDR_OWVAR 28
62225: PUSH
62226: LD_INT 14
62228: ST_TO_ADDR
// hc_gallery :=  ;
62229: LD_ADDR_OWVAR 33
62233: PUSH
62234: LD_STRING 
62236: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62237: LD_ADDR_OWVAR 35
62241: PUSH
62242: LD_VAR 0 1
62246: NEG
62247: PPUSH
62248: LD_VAR 0 1
62252: PPUSH
62253: CALL_OW 12
62257: ST_TO_ADDR
// end ;
62258: LD_VAR 0 2
62262: RET
// export function PrepareEnchidna ( ) ; begin
62263: LD_INT 0
62265: PPUSH
// uc_side := 0 ;
62266: LD_ADDR_OWVAR 20
62270: PUSH
62271: LD_INT 0
62273: ST_TO_ADDR
// uc_nation := 0 ;
62274: LD_ADDR_OWVAR 21
62278: PUSH
62279: LD_INT 0
62281: ST_TO_ADDR
// hc_class := class_baggie ;
62282: LD_ADDR_OWVAR 28
62286: PUSH
62287: LD_INT 13
62289: ST_TO_ADDR
// hc_gallery :=  ;
62290: LD_ADDR_OWVAR 33
62294: PUSH
62295: LD_STRING 
62297: ST_TO_ADDR
// end ;
62298: LD_VAR 0 1
62302: RET
// export function PrepareFrog ( ) ; begin
62303: LD_INT 0
62305: PPUSH
// uc_side := 0 ;
62306: LD_ADDR_OWVAR 20
62310: PUSH
62311: LD_INT 0
62313: ST_TO_ADDR
// uc_nation := 0 ;
62314: LD_ADDR_OWVAR 21
62318: PUSH
62319: LD_INT 0
62321: ST_TO_ADDR
// hc_class := class_frog ;
62322: LD_ADDR_OWVAR 28
62326: PUSH
62327: LD_INT 19
62329: ST_TO_ADDR
// hc_gallery :=  ;
62330: LD_ADDR_OWVAR 33
62334: PUSH
62335: LD_STRING 
62337: ST_TO_ADDR
// end ;
62338: LD_VAR 0 1
62342: RET
// export function PrepareFish ( ) ; begin
62343: LD_INT 0
62345: PPUSH
// uc_side := 0 ;
62346: LD_ADDR_OWVAR 20
62350: PUSH
62351: LD_INT 0
62353: ST_TO_ADDR
// uc_nation := 0 ;
62354: LD_ADDR_OWVAR 21
62358: PUSH
62359: LD_INT 0
62361: ST_TO_ADDR
// hc_class := class_fish ;
62362: LD_ADDR_OWVAR 28
62366: PUSH
62367: LD_INT 20
62369: ST_TO_ADDR
// hc_gallery :=  ;
62370: LD_ADDR_OWVAR 33
62374: PUSH
62375: LD_STRING 
62377: ST_TO_ADDR
// end ;
62378: LD_VAR 0 1
62382: RET
// export function PrepareBird ( ) ; begin
62383: LD_INT 0
62385: PPUSH
// uc_side := 0 ;
62386: LD_ADDR_OWVAR 20
62390: PUSH
62391: LD_INT 0
62393: ST_TO_ADDR
// uc_nation := 0 ;
62394: LD_ADDR_OWVAR 21
62398: PUSH
62399: LD_INT 0
62401: ST_TO_ADDR
// hc_class := class_phororhacos ;
62402: LD_ADDR_OWVAR 28
62406: PUSH
62407: LD_INT 18
62409: ST_TO_ADDR
// hc_gallery :=  ;
62410: LD_ADDR_OWVAR 33
62414: PUSH
62415: LD_STRING 
62417: ST_TO_ADDR
// end ;
62418: LD_VAR 0 1
62422: RET
// export function PrepareHorse ( ) ; begin
62423: LD_INT 0
62425: PPUSH
// uc_side := 0 ;
62426: LD_ADDR_OWVAR 20
62430: PUSH
62431: LD_INT 0
62433: ST_TO_ADDR
// uc_nation := 0 ;
62434: LD_ADDR_OWVAR 21
62438: PUSH
62439: LD_INT 0
62441: ST_TO_ADDR
// hc_class := class_horse ;
62442: LD_ADDR_OWVAR 28
62446: PUSH
62447: LD_INT 21
62449: ST_TO_ADDR
// hc_gallery :=  ;
62450: LD_ADDR_OWVAR 33
62454: PUSH
62455: LD_STRING 
62457: ST_TO_ADDR
// end ;
62458: LD_VAR 0 1
62462: RET
// export function PrepareMastodont ( ) ; begin
62463: LD_INT 0
62465: PPUSH
// uc_side := 0 ;
62466: LD_ADDR_OWVAR 20
62470: PUSH
62471: LD_INT 0
62473: ST_TO_ADDR
// uc_nation := 0 ;
62474: LD_ADDR_OWVAR 21
62478: PUSH
62479: LD_INT 0
62481: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62482: LD_ADDR_OWVAR 37
62486: PUSH
62487: LD_INT 31
62489: ST_TO_ADDR
// vc_control := control_rider ;
62490: LD_ADDR_OWVAR 38
62494: PUSH
62495: LD_INT 4
62497: ST_TO_ADDR
// end ;
62498: LD_VAR 0 1
62502: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62503: LD_INT 0
62505: PPUSH
62506: PPUSH
62507: PPUSH
// uc_side = 0 ;
62508: LD_ADDR_OWVAR 20
62512: PUSH
62513: LD_INT 0
62515: ST_TO_ADDR
// uc_nation = 0 ;
62516: LD_ADDR_OWVAR 21
62520: PUSH
62521: LD_INT 0
62523: ST_TO_ADDR
// InitHc_All ( ) ;
62524: CALL_OW 584
// InitVc ;
62528: CALL_OW 20
// if mastodonts then
62532: LD_VAR 0 6
62536: IFFALSE 62603
// for i = 1 to mastodonts do
62538: LD_ADDR_VAR 0 11
62542: PUSH
62543: DOUBLE
62544: LD_INT 1
62546: DEC
62547: ST_TO_ADDR
62548: LD_VAR 0 6
62552: PUSH
62553: FOR_TO
62554: IFFALSE 62601
// begin vc_chassis := 31 ;
62556: LD_ADDR_OWVAR 37
62560: PUSH
62561: LD_INT 31
62563: ST_TO_ADDR
// vc_control := control_rider ;
62564: LD_ADDR_OWVAR 38
62568: PUSH
62569: LD_INT 4
62571: ST_TO_ADDR
// animal := CreateVehicle ;
62572: LD_ADDR_VAR 0 12
62576: PUSH
62577: CALL_OW 45
62581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62582: LD_VAR 0 12
62586: PPUSH
62587: LD_VAR 0 8
62591: PPUSH
62592: LD_INT 0
62594: PPUSH
62595: CALL 64731 0 3
// end ;
62599: GO 62553
62601: POP
62602: POP
// if horses then
62603: LD_VAR 0 5
62607: IFFALSE 62674
// for i = 1 to horses do
62609: LD_ADDR_VAR 0 11
62613: PUSH
62614: DOUBLE
62615: LD_INT 1
62617: DEC
62618: ST_TO_ADDR
62619: LD_VAR 0 5
62623: PUSH
62624: FOR_TO
62625: IFFALSE 62672
// begin hc_class := 21 ;
62627: LD_ADDR_OWVAR 28
62631: PUSH
62632: LD_INT 21
62634: ST_TO_ADDR
// hc_gallery :=  ;
62635: LD_ADDR_OWVAR 33
62639: PUSH
62640: LD_STRING 
62642: ST_TO_ADDR
// animal := CreateHuman ;
62643: LD_ADDR_VAR 0 12
62647: PUSH
62648: CALL_OW 44
62652: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62653: LD_VAR 0 12
62657: PPUSH
62658: LD_VAR 0 8
62662: PPUSH
62663: LD_INT 0
62665: PPUSH
62666: CALL 64731 0 3
// end ;
62670: GO 62624
62672: POP
62673: POP
// if birds then
62674: LD_VAR 0 1
62678: IFFALSE 62745
// for i = 1 to birds do
62680: LD_ADDR_VAR 0 11
62684: PUSH
62685: DOUBLE
62686: LD_INT 1
62688: DEC
62689: ST_TO_ADDR
62690: LD_VAR 0 1
62694: PUSH
62695: FOR_TO
62696: IFFALSE 62743
// begin hc_class := 18 ;
62698: LD_ADDR_OWVAR 28
62702: PUSH
62703: LD_INT 18
62705: ST_TO_ADDR
// hc_gallery =  ;
62706: LD_ADDR_OWVAR 33
62710: PUSH
62711: LD_STRING 
62713: ST_TO_ADDR
// animal := CreateHuman ;
62714: LD_ADDR_VAR 0 12
62718: PUSH
62719: CALL_OW 44
62723: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62724: LD_VAR 0 12
62728: PPUSH
62729: LD_VAR 0 8
62733: PPUSH
62734: LD_INT 0
62736: PPUSH
62737: CALL 64731 0 3
// end ;
62741: GO 62695
62743: POP
62744: POP
// if tigers then
62745: LD_VAR 0 2
62749: IFFALSE 62833
// for i = 1 to tigers do
62751: LD_ADDR_VAR 0 11
62755: PUSH
62756: DOUBLE
62757: LD_INT 1
62759: DEC
62760: ST_TO_ADDR
62761: LD_VAR 0 2
62765: PUSH
62766: FOR_TO
62767: IFFALSE 62831
// begin hc_class = class_tiger ;
62769: LD_ADDR_OWVAR 28
62773: PUSH
62774: LD_INT 14
62776: ST_TO_ADDR
// hc_gallery =  ;
62777: LD_ADDR_OWVAR 33
62781: PUSH
62782: LD_STRING 
62784: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62785: LD_ADDR_OWVAR 35
62789: PUSH
62790: LD_INT 7
62792: NEG
62793: PPUSH
62794: LD_INT 7
62796: PPUSH
62797: CALL_OW 12
62801: ST_TO_ADDR
// animal := CreateHuman ;
62802: LD_ADDR_VAR 0 12
62806: PUSH
62807: CALL_OW 44
62811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62812: LD_VAR 0 12
62816: PPUSH
62817: LD_VAR 0 8
62821: PPUSH
62822: LD_INT 0
62824: PPUSH
62825: CALL 64731 0 3
// end ;
62829: GO 62766
62831: POP
62832: POP
// if apemans then
62833: LD_VAR 0 3
62837: IFFALSE 62960
// for i = 1 to apemans do
62839: LD_ADDR_VAR 0 11
62843: PUSH
62844: DOUBLE
62845: LD_INT 1
62847: DEC
62848: ST_TO_ADDR
62849: LD_VAR 0 3
62853: PUSH
62854: FOR_TO
62855: IFFALSE 62958
// begin hc_class = class_apeman ;
62857: LD_ADDR_OWVAR 28
62861: PUSH
62862: LD_INT 12
62864: ST_TO_ADDR
// hc_gallery =  ;
62865: LD_ADDR_OWVAR 33
62869: PUSH
62870: LD_STRING 
62872: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62873: LD_ADDR_OWVAR 35
62877: PUSH
62878: LD_INT 2
62880: NEG
62881: PPUSH
62882: LD_INT 2
62884: PPUSH
62885: CALL_OW 12
62889: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62890: LD_ADDR_OWVAR 31
62894: PUSH
62895: LD_INT 1
62897: PPUSH
62898: LD_INT 3
62900: PPUSH
62901: CALL_OW 12
62905: PUSH
62906: LD_INT 1
62908: PPUSH
62909: LD_INT 3
62911: PPUSH
62912: CALL_OW 12
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: EMPTY
62924: LIST
62925: LIST
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// animal := CreateHuman ;
62929: LD_ADDR_VAR 0 12
62933: PUSH
62934: CALL_OW 44
62938: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62939: LD_VAR 0 12
62943: PPUSH
62944: LD_VAR 0 8
62948: PPUSH
62949: LD_INT 0
62951: PPUSH
62952: CALL 64731 0 3
// end ;
62956: GO 62854
62958: POP
62959: POP
// if enchidnas then
62960: LD_VAR 0 4
62964: IFFALSE 63031
// for i = 1 to enchidnas do
62966: LD_ADDR_VAR 0 11
62970: PUSH
62971: DOUBLE
62972: LD_INT 1
62974: DEC
62975: ST_TO_ADDR
62976: LD_VAR 0 4
62980: PUSH
62981: FOR_TO
62982: IFFALSE 63029
// begin hc_class = 13 ;
62984: LD_ADDR_OWVAR 28
62988: PUSH
62989: LD_INT 13
62991: ST_TO_ADDR
// hc_gallery =  ;
62992: LD_ADDR_OWVAR 33
62996: PUSH
62997: LD_STRING 
62999: ST_TO_ADDR
// animal := CreateHuman ;
63000: LD_ADDR_VAR 0 12
63004: PUSH
63005: CALL_OW 44
63009: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63010: LD_VAR 0 12
63014: PPUSH
63015: LD_VAR 0 8
63019: PPUSH
63020: LD_INT 0
63022: PPUSH
63023: CALL 64731 0 3
// end ;
63027: GO 62981
63029: POP
63030: POP
// if fishes then
63031: LD_VAR 0 7
63035: IFFALSE 63102
// for i = 1 to fishes do
63037: LD_ADDR_VAR 0 11
63041: PUSH
63042: DOUBLE
63043: LD_INT 1
63045: DEC
63046: ST_TO_ADDR
63047: LD_VAR 0 7
63051: PUSH
63052: FOR_TO
63053: IFFALSE 63100
// begin hc_class = 20 ;
63055: LD_ADDR_OWVAR 28
63059: PUSH
63060: LD_INT 20
63062: ST_TO_ADDR
// hc_gallery =  ;
63063: LD_ADDR_OWVAR 33
63067: PUSH
63068: LD_STRING 
63070: ST_TO_ADDR
// animal := CreateHuman ;
63071: LD_ADDR_VAR 0 12
63075: PUSH
63076: CALL_OW 44
63080: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63081: LD_VAR 0 12
63085: PPUSH
63086: LD_VAR 0 9
63090: PPUSH
63091: LD_INT 0
63093: PPUSH
63094: CALL 64731 0 3
// end ;
63098: GO 63052
63100: POP
63101: POP
// end ;
63102: LD_VAR 0 10
63106: RET
// export function WantHeal ( sci , unit ) ; begin
63107: LD_INT 0
63109: PPUSH
// if GetTaskList ( sci ) > 0 then
63110: LD_VAR 0 1
63114: PPUSH
63115: CALL_OW 437
63119: PUSH
63120: LD_INT 0
63122: GREATER
63123: IFFALSE 63193
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63125: LD_VAR 0 1
63129: PPUSH
63130: CALL_OW 437
63134: PUSH
63135: LD_INT 1
63137: ARRAY
63138: PUSH
63139: LD_INT 1
63141: ARRAY
63142: PUSH
63143: LD_STRING l
63145: EQUAL
63146: PUSH
63147: LD_VAR 0 1
63151: PPUSH
63152: CALL_OW 437
63156: PUSH
63157: LD_INT 1
63159: ARRAY
63160: PUSH
63161: LD_INT 4
63163: ARRAY
63164: PUSH
63165: LD_VAR 0 2
63169: EQUAL
63170: AND
63171: IFFALSE 63183
// result := true else
63173: LD_ADDR_VAR 0 3
63177: PUSH
63178: LD_INT 1
63180: ST_TO_ADDR
63181: GO 63191
// result := false ;
63183: LD_ADDR_VAR 0 3
63187: PUSH
63188: LD_INT 0
63190: ST_TO_ADDR
// end else
63191: GO 63201
// result := false ;
63193: LD_ADDR_VAR 0 3
63197: PUSH
63198: LD_INT 0
63200: ST_TO_ADDR
// end ;
63201: LD_VAR 0 3
63205: RET
// export function HealTarget ( sci ) ; begin
63206: LD_INT 0
63208: PPUSH
// if not sci then
63209: LD_VAR 0 1
63213: NOT
63214: IFFALSE 63218
// exit ;
63216: GO 63283
// result := 0 ;
63218: LD_ADDR_VAR 0 2
63222: PUSH
63223: LD_INT 0
63225: ST_TO_ADDR
// if GetTaskList ( sci ) then
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL_OW 437
63235: IFFALSE 63283
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63237: LD_VAR 0 1
63241: PPUSH
63242: CALL_OW 437
63246: PUSH
63247: LD_INT 1
63249: ARRAY
63250: PUSH
63251: LD_INT 1
63253: ARRAY
63254: PUSH
63255: LD_STRING l
63257: EQUAL
63258: IFFALSE 63283
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63260: LD_ADDR_VAR 0 2
63264: PUSH
63265: LD_VAR 0 1
63269: PPUSH
63270: CALL_OW 437
63274: PUSH
63275: LD_INT 1
63277: ARRAY
63278: PUSH
63279: LD_INT 4
63281: ARRAY
63282: ST_TO_ADDR
// end ;
63283: LD_VAR 0 2
63287: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63288: LD_INT 0
63290: PPUSH
63291: PPUSH
63292: PPUSH
63293: PPUSH
// if not base_units then
63294: LD_VAR 0 1
63298: NOT
63299: IFFALSE 63303
// exit ;
63301: GO 63390
// result := false ;
63303: LD_ADDR_VAR 0 2
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63311: LD_ADDR_VAR 0 5
63315: PUSH
63316: LD_VAR 0 1
63320: PPUSH
63321: LD_INT 21
63323: PUSH
63324: LD_INT 3
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PPUSH
63331: CALL_OW 72
63335: ST_TO_ADDR
// if not tmp then
63336: LD_VAR 0 5
63340: NOT
63341: IFFALSE 63345
// exit ;
63343: GO 63390
// for i in tmp do
63345: LD_ADDR_VAR 0 3
63349: PUSH
63350: LD_VAR 0 5
63354: PUSH
63355: FOR_IN
63356: IFFALSE 63388
// begin result := EnemyInRange ( i , 22 ) ;
63358: LD_ADDR_VAR 0 2
63362: PUSH
63363: LD_VAR 0 3
63367: PPUSH
63368: LD_INT 22
63370: PPUSH
63371: CALL 60988 0 2
63375: ST_TO_ADDR
// if result then
63376: LD_VAR 0 2
63380: IFFALSE 63386
// exit ;
63382: POP
63383: POP
63384: GO 63390
// end ;
63386: GO 63355
63388: POP
63389: POP
// end ;
63390: LD_VAR 0 2
63394: RET
// export function FilterByTag ( units , tag ) ; begin
63395: LD_INT 0
63397: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63398: LD_ADDR_VAR 0 3
63402: PUSH
63403: LD_VAR 0 1
63407: PPUSH
63408: LD_INT 120
63410: PUSH
63411: LD_VAR 0 2
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PPUSH
63420: CALL_OW 72
63424: ST_TO_ADDR
// end ;
63425: LD_VAR 0 3
63429: RET
// export function IsDriver ( un ) ; begin
63430: LD_INT 0
63432: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63433: LD_ADDR_VAR 0 2
63437: PUSH
63438: LD_VAR 0 1
63442: PUSH
63443: LD_INT 55
63445: PUSH
63446: EMPTY
63447: LIST
63448: PPUSH
63449: CALL_OW 69
63453: IN
63454: ST_TO_ADDR
// end ;
63455: LD_VAR 0 2
63459: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63460: LD_INT 0
63462: PPUSH
63463: PPUSH
// list := [ ] ;
63464: LD_ADDR_VAR 0 5
63468: PUSH
63469: EMPTY
63470: ST_TO_ADDR
// case d of 0 :
63471: LD_VAR 0 3
63475: PUSH
63476: LD_INT 0
63478: DOUBLE
63479: EQUAL
63480: IFTRUE 63484
63482: GO 63617
63484: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63485: LD_ADDR_VAR 0 5
63489: PUSH
63490: LD_VAR 0 1
63494: PUSH
63495: LD_INT 4
63497: MINUS
63498: PUSH
63499: LD_VAR 0 2
63503: PUSH
63504: LD_INT 4
63506: MINUS
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: PUSH
63516: LD_VAR 0 1
63520: PUSH
63521: LD_INT 3
63523: MINUS
63524: PUSH
63525: LD_VAR 0 2
63529: PUSH
63530: LD_INT 1
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: LIST
63537: PUSH
63538: LD_VAR 0 1
63542: PUSH
63543: LD_INT 4
63545: PLUS
63546: PUSH
63547: LD_VAR 0 2
63551: PUSH
63552: LD_INT 4
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: PUSH
63560: LD_VAR 0 1
63564: PUSH
63565: LD_INT 3
63567: PLUS
63568: PUSH
63569: LD_VAR 0 2
63573: PUSH
63574: LD_INT 3
63576: PLUS
63577: PUSH
63578: LD_INT 5
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: LIST
63585: PUSH
63586: LD_VAR 0 1
63590: PUSH
63591: LD_VAR 0 2
63595: PUSH
63596: LD_INT 4
63598: PLUS
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: LIST
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: LIST
63612: LIST
63613: LIST
63614: ST_TO_ADDR
// end ; 1 :
63615: GO 64315
63617: LD_INT 1
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63625
63623: GO 63758
63625: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63626: LD_ADDR_VAR 0 5
63630: PUSH
63631: LD_VAR 0 1
63635: PUSH
63636: LD_VAR 0 2
63640: PUSH
63641: LD_INT 4
63643: MINUS
63644: PUSH
63645: LD_INT 3
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: PUSH
63653: LD_VAR 0 1
63657: PUSH
63658: LD_INT 3
63660: MINUS
63661: PUSH
63662: LD_VAR 0 2
63666: PUSH
63667: LD_INT 3
63669: MINUS
63670: PUSH
63671: LD_INT 2
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: PUSH
63679: LD_VAR 0 1
63683: PUSH
63684: LD_INT 4
63686: MINUS
63687: PUSH
63688: LD_VAR 0 2
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: LIST
63700: PUSH
63701: LD_VAR 0 1
63705: PUSH
63706: LD_VAR 0 2
63710: PUSH
63711: LD_INT 3
63713: PLUS
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: PUSH
63723: LD_VAR 0 1
63727: PUSH
63728: LD_INT 4
63730: PLUS
63731: PUSH
63732: LD_VAR 0 2
63736: PUSH
63737: LD_INT 4
63739: PLUS
63740: PUSH
63741: LD_INT 5
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: LIST
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: ST_TO_ADDR
// end ; 2 :
63756: GO 64315
63758: LD_INT 2
63760: DOUBLE
63761: EQUAL
63762: IFTRUE 63766
63764: GO 63895
63766: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63767: LD_ADDR_VAR 0 5
63771: PUSH
63772: LD_VAR 0 1
63776: PUSH
63777: LD_VAR 0 2
63781: PUSH
63782: LD_INT 3
63784: MINUS
63785: PUSH
63786: LD_INT 3
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: LIST
63793: PUSH
63794: LD_VAR 0 1
63798: PUSH
63799: LD_INT 4
63801: PLUS
63802: PUSH
63803: LD_VAR 0 2
63807: PUSH
63808: LD_INT 4
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: LIST
63815: PUSH
63816: LD_VAR 0 1
63820: PUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_INT 4
63828: PLUS
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_VAR 0 1
63842: PUSH
63843: LD_INT 3
63845: MINUS
63846: PUSH
63847: LD_VAR 0 2
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: PUSH
63860: LD_VAR 0 1
63864: PUSH
63865: LD_INT 4
63867: MINUS
63868: PUSH
63869: LD_VAR 0 2
63873: PUSH
63874: LD_INT 4
63876: MINUS
63877: PUSH
63878: LD_INT 2
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: LIST
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: ST_TO_ADDR
// end ; 3 :
63893: GO 64315
63895: LD_INT 3
63897: DOUBLE
63898: EQUAL
63899: IFTRUE 63903
63901: GO 64036
63903: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63904: LD_ADDR_VAR 0 5
63908: PUSH
63909: LD_VAR 0 1
63913: PUSH
63914: LD_INT 3
63916: PLUS
63917: PUSH
63918: LD_VAR 0 2
63922: PUSH
63923: LD_INT 4
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: LIST
63930: PUSH
63931: LD_VAR 0 1
63935: PUSH
63936: LD_INT 4
63938: PLUS
63939: PUSH
63940: LD_VAR 0 2
63944: PUSH
63945: LD_INT 4
63947: PLUS
63948: PUSH
63949: LD_INT 5
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: PUSH
63957: LD_VAR 0 1
63961: PUSH
63962: LD_INT 4
63964: MINUS
63965: PUSH
63966: LD_VAR 0 2
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: LIST
63978: PUSH
63979: LD_VAR 0 1
63983: PUSH
63984: LD_VAR 0 2
63988: PUSH
63989: LD_INT 4
63991: MINUS
63992: PUSH
63993: LD_INT 3
63995: PUSH
63996: EMPTY
63997: LIST
63998: LIST
63999: LIST
64000: PUSH
64001: LD_VAR 0 1
64005: PUSH
64006: LD_INT 3
64008: MINUS
64009: PUSH
64010: LD_VAR 0 2
64014: PUSH
64015: LD_INT 3
64017: MINUS
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: LIST
64026: PUSH
64027: EMPTY
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: ST_TO_ADDR
// end ; 4 :
64034: GO 64315
64036: LD_INT 4
64038: DOUBLE
64039: EQUAL
64040: IFTRUE 64044
64042: GO 64177
64044: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64045: LD_ADDR_VAR 0 5
64049: PUSH
64050: LD_VAR 0 1
64054: PUSH
64055: LD_VAR 0 2
64059: PUSH
64060: LD_INT 4
64062: PLUS
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: LIST
64071: PUSH
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 3
64079: PLUS
64080: PUSH
64081: LD_VAR 0 2
64085: PUSH
64086: LD_INT 3
64088: PLUS
64089: PUSH
64090: LD_INT 5
64092: PUSH
64093: EMPTY
64094: LIST
64095: LIST
64096: LIST
64097: PUSH
64098: LD_VAR 0 1
64102: PUSH
64103: LD_INT 4
64105: PLUS
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: LD_INT 4
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: PUSH
64120: LD_VAR 0 1
64124: PUSH
64125: LD_VAR 0 2
64129: PUSH
64130: LD_INT 3
64132: MINUS
64133: PUSH
64134: LD_INT 3
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: PUSH
64142: LD_VAR 0 1
64146: PUSH
64147: LD_INT 4
64149: MINUS
64150: PUSH
64151: LD_VAR 0 2
64155: PUSH
64156: LD_INT 4
64158: MINUS
64159: PUSH
64160: LD_INT 2
64162: PUSH
64163: EMPTY
64164: LIST
64165: LIST
64166: LIST
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: ST_TO_ADDR
// end ; 5 :
64175: GO 64315
64177: LD_INT 5
64179: DOUBLE
64180: EQUAL
64181: IFTRUE 64185
64183: GO 64314
64185: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64186: LD_ADDR_VAR 0 5
64190: PUSH
64191: LD_VAR 0 1
64195: PUSH
64196: LD_INT 4
64198: MINUS
64199: PUSH
64200: LD_VAR 0 2
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: PUSH
64213: LD_VAR 0 1
64217: PUSH
64218: LD_VAR 0 2
64222: PUSH
64223: LD_INT 4
64225: MINUS
64226: PUSH
64227: LD_INT 3
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: LIST
64234: PUSH
64235: LD_VAR 0 1
64239: PUSH
64240: LD_INT 4
64242: PLUS
64243: PUSH
64244: LD_VAR 0 2
64248: PUSH
64249: LD_INT 4
64251: PLUS
64252: PUSH
64253: LD_INT 5
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: LIST
64260: PUSH
64261: LD_VAR 0 1
64265: PUSH
64266: LD_INT 3
64268: PLUS
64269: PUSH
64270: LD_VAR 0 2
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: LIST
64282: PUSH
64283: LD_VAR 0 1
64287: PUSH
64288: LD_VAR 0 2
64292: PUSH
64293: LD_INT 3
64295: PLUS
64296: PUSH
64297: LD_INT 0
64299: PUSH
64300: EMPTY
64301: LIST
64302: LIST
64303: LIST
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: LIST
64310: LIST
64311: ST_TO_ADDR
// end ; end ;
64312: GO 64315
64314: POP
// result := list ;
64315: LD_ADDR_VAR 0 4
64319: PUSH
64320: LD_VAR 0 5
64324: ST_TO_ADDR
// end ;
64325: LD_VAR 0 4
64329: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64330: LD_INT 0
64332: PPUSH
64333: PPUSH
64334: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64335: LD_VAR 0 1
64339: NOT
64340: PUSH
64341: LD_VAR 0 2
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: LD_INT 3
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: IN
64364: NOT
64365: OR
64366: IFFALSE 64370
// exit ;
64368: GO 64453
// tmp := [ ] ;
64370: LD_ADDR_VAR 0 5
64374: PUSH
64375: EMPTY
64376: ST_TO_ADDR
// for i in units do
64377: LD_ADDR_VAR 0 4
64381: PUSH
64382: LD_VAR 0 1
64386: PUSH
64387: FOR_IN
64388: IFFALSE 64422
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64390: LD_ADDR_VAR 0 5
64394: PUSH
64395: LD_VAR 0 5
64399: PPUSH
64400: LD_VAR 0 4
64404: PPUSH
64405: LD_VAR 0 2
64409: PPUSH
64410: CALL_OW 259
64414: PPUSH
64415: CALL 65826 0 2
64419: ST_TO_ADDR
64420: GO 64387
64422: POP
64423: POP
// if not tmp then
64424: LD_VAR 0 5
64428: NOT
64429: IFFALSE 64433
// exit ;
64431: GO 64453
// result := SortListByListDesc ( units , tmp ) ;
64433: LD_ADDR_VAR 0 3
64437: PUSH
64438: LD_VAR 0 1
64442: PPUSH
64443: LD_VAR 0 5
64447: PPUSH
64448: CALL_OW 77
64452: ST_TO_ADDR
// end ;
64453: LD_VAR 0 3
64457: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64458: LD_INT 0
64460: PPUSH
64461: PPUSH
64462: PPUSH
// result := false ;
64463: LD_ADDR_VAR 0 3
64467: PUSH
64468: LD_INT 0
64470: ST_TO_ADDR
// if not building then
64471: LD_VAR 0 2
64475: NOT
64476: IFFALSE 64480
// exit ;
64478: GO 64618
// x := GetX ( building ) ;
64480: LD_ADDR_VAR 0 4
64484: PUSH
64485: LD_VAR 0 2
64489: PPUSH
64490: CALL_OW 250
64494: ST_TO_ADDR
// y := GetY ( building ) ;
64495: LD_ADDR_VAR 0 5
64499: PUSH
64500: LD_VAR 0 2
64504: PPUSH
64505: CALL_OW 251
64509: ST_TO_ADDR
// if not x or not y then
64510: LD_VAR 0 4
64514: NOT
64515: PUSH
64516: LD_VAR 0 5
64520: NOT
64521: OR
64522: IFFALSE 64526
// exit ;
64524: GO 64618
// if GetTaskList ( unit ) then
64526: LD_VAR 0 1
64530: PPUSH
64531: CALL_OW 437
64535: IFFALSE 64618
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64537: LD_STRING e
64539: PUSH
64540: LD_VAR 0 1
64544: PPUSH
64545: CALL_OW 437
64549: PUSH
64550: LD_INT 1
64552: ARRAY
64553: PUSH
64554: LD_INT 1
64556: ARRAY
64557: EQUAL
64558: PUSH
64559: LD_VAR 0 4
64563: PUSH
64564: LD_VAR 0 1
64568: PPUSH
64569: CALL_OW 437
64573: PUSH
64574: LD_INT 1
64576: ARRAY
64577: PUSH
64578: LD_INT 2
64580: ARRAY
64581: EQUAL
64582: AND
64583: PUSH
64584: LD_VAR 0 5
64588: PUSH
64589: LD_VAR 0 1
64593: PPUSH
64594: CALL_OW 437
64598: PUSH
64599: LD_INT 1
64601: ARRAY
64602: PUSH
64603: LD_INT 3
64605: ARRAY
64606: EQUAL
64607: AND
64608: IFFALSE 64618
// result := true end ;
64610: LD_ADDR_VAR 0 3
64614: PUSH
64615: LD_INT 1
64617: ST_TO_ADDR
// end ;
64618: LD_VAR 0 3
64622: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64623: LD_INT 0
64625: PPUSH
// result := false ;
64626: LD_ADDR_VAR 0 4
64630: PUSH
64631: LD_INT 0
64633: ST_TO_ADDR
// if GetTaskList ( unit ) then
64634: LD_VAR 0 1
64638: PPUSH
64639: CALL_OW 437
64643: IFFALSE 64726
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64645: LD_STRING M
64647: PUSH
64648: LD_VAR 0 1
64652: PPUSH
64653: CALL_OW 437
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PUSH
64662: LD_INT 1
64664: ARRAY
64665: EQUAL
64666: PUSH
64667: LD_VAR 0 2
64671: PUSH
64672: LD_VAR 0 1
64676: PPUSH
64677: CALL_OW 437
64681: PUSH
64682: LD_INT 1
64684: ARRAY
64685: PUSH
64686: LD_INT 2
64688: ARRAY
64689: EQUAL
64690: AND
64691: PUSH
64692: LD_VAR 0 3
64696: PUSH
64697: LD_VAR 0 1
64701: PPUSH
64702: CALL_OW 437
64706: PUSH
64707: LD_INT 1
64709: ARRAY
64710: PUSH
64711: LD_INT 3
64713: ARRAY
64714: EQUAL
64715: AND
64716: IFFALSE 64726
// result := true ;
64718: LD_ADDR_VAR 0 4
64722: PUSH
64723: LD_INT 1
64725: ST_TO_ADDR
// end ; end ;
64726: LD_VAR 0 4
64730: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64731: LD_INT 0
64733: PPUSH
64734: PPUSH
64735: PPUSH
64736: PPUSH
// if not unit or not area then
64737: LD_VAR 0 1
64741: NOT
64742: PUSH
64743: LD_VAR 0 2
64747: NOT
64748: OR
64749: IFFALSE 64753
// exit ;
64751: GO 64929
// tmp := AreaToList ( area , i ) ;
64753: LD_ADDR_VAR 0 6
64757: PUSH
64758: LD_VAR 0 2
64762: PPUSH
64763: LD_VAR 0 5
64767: PPUSH
64768: CALL_OW 517
64772: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64773: LD_ADDR_VAR 0 5
64777: PUSH
64778: DOUBLE
64779: LD_INT 1
64781: DEC
64782: ST_TO_ADDR
64783: LD_VAR 0 6
64787: PUSH
64788: LD_INT 1
64790: ARRAY
64791: PUSH
64792: FOR_TO
64793: IFFALSE 64927
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64795: LD_ADDR_VAR 0 7
64799: PUSH
64800: LD_VAR 0 6
64804: PUSH
64805: LD_INT 1
64807: ARRAY
64808: PUSH
64809: LD_VAR 0 5
64813: ARRAY
64814: PUSH
64815: LD_VAR 0 6
64819: PUSH
64820: LD_INT 2
64822: ARRAY
64823: PUSH
64824: LD_VAR 0 5
64828: ARRAY
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64834: LD_INT 92
64836: PUSH
64837: LD_VAR 0 7
64841: PUSH
64842: LD_INT 1
64844: ARRAY
64845: PUSH
64846: LD_VAR 0 7
64850: PUSH
64851: LD_INT 2
64853: ARRAY
64854: PUSH
64855: LD_INT 2
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: LIST
64862: LIST
64863: PPUSH
64864: CALL_OW 69
64868: PUSH
64869: LD_INT 0
64871: EQUAL
64872: IFFALSE 64925
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64874: LD_VAR 0 1
64878: PPUSH
64879: LD_VAR 0 7
64883: PUSH
64884: LD_INT 1
64886: ARRAY
64887: PPUSH
64888: LD_VAR 0 7
64892: PUSH
64893: LD_INT 2
64895: ARRAY
64896: PPUSH
64897: LD_VAR 0 3
64901: PPUSH
64902: CALL_OW 48
// result := IsPlaced ( unit ) ;
64906: LD_ADDR_VAR 0 4
64910: PUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: CALL_OW 305
64920: ST_TO_ADDR
// exit ;
64921: POP
64922: POP
64923: GO 64929
// end ; end ;
64925: GO 64792
64927: POP
64928: POP
// end ;
64929: LD_VAR 0 4
64933: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64934: LD_INT 0
64936: PPUSH
64937: PPUSH
64938: PPUSH
// if not side or side > 8 then
64939: LD_VAR 0 1
64943: NOT
64944: PUSH
64945: LD_VAR 0 1
64949: PUSH
64950: LD_INT 8
64952: GREATER
64953: OR
64954: IFFALSE 64958
// exit ;
64956: GO 65145
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64958: LD_ADDR_VAR 0 4
64962: PUSH
64963: LD_INT 22
64965: PUSH
64966: LD_VAR 0 1
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 21
64977: PUSH
64978: LD_INT 3
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PPUSH
64989: CALL_OW 69
64993: ST_TO_ADDR
// if not tmp then
64994: LD_VAR 0 4
64998: NOT
64999: IFFALSE 65003
// exit ;
65001: GO 65145
// enable_addtolog := true ;
65003: LD_ADDR_OWVAR 81
65007: PUSH
65008: LD_INT 1
65010: ST_TO_ADDR
// AddToLog ( [ ) ;
65011: LD_STRING [
65013: PPUSH
65014: CALL_OW 561
// for i in tmp do
65018: LD_ADDR_VAR 0 3
65022: PUSH
65023: LD_VAR 0 4
65027: PUSH
65028: FOR_IN
65029: IFFALSE 65136
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65031: LD_STRING [
65033: PUSH
65034: LD_VAR 0 3
65038: PPUSH
65039: CALL_OW 266
65043: STR
65044: PUSH
65045: LD_STRING , 
65047: STR
65048: PUSH
65049: LD_VAR 0 3
65053: PPUSH
65054: CALL_OW 250
65058: STR
65059: PUSH
65060: LD_STRING , 
65062: STR
65063: PUSH
65064: LD_VAR 0 3
65068: PPUSH
65069: CALL_OW 251
65073: STR
65074: PUSH
65075: LD_STRING , 
65077: STR
65078: PUSH
65079: LD_VAR 0 3
65083: PPUSH
65084: CALL_OW 254
65088: STR
65089: PUSH
65090: LD_STRING , 
65092: STR
65093: PUSH
65094: LD_VAR 0 3
65098: PPUSH
65099: LD_INT 1
65101: PPUSH
65102: CALL_OW 268
65106: STR
65107: PUSH
65108: LD_STRING , 
65110: STR
65111: PUSH
65112: LD_VAR 0 3
65116: PPUSH
65117: LD_INT 2
65119: PPUSH
65120: CALL_OW 268
65124: STR
65125: PUSH
65126: LD_STRING ],
65128: STR
65129: PPUSH
65130: CALL_OW 561
// end ;
65134: GO 65028
65136: POP
65137: POP
// AddToLog ( ]; ) ;
65138: LD_STRING ];
65140: PPUSH
65141: CALL_OW 561
// end ;
65145: LD_VAR 0 2
65149: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65150: LD_INT 0
65152: PPUSH
65153: PPUSH
65154: PPUSH
65155: PPUSH
65156: PPUSH
// if not area or not rate or not max then
65157: LD_VAR 0 1
65161: NOT
65162: PUSH
65163: LD_VAR 0 2
65167: NOT
65168: OR
65169: PUSH
65170: LD_VAR 0 4
65174: NOT
65175: OR
65176: IFFALSE 65180
// exit ;
65178: GO 65369
// while 1 do
65180: LD_INT 1
65182: IFFALSE 65369
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65184: LD_ADDR_VAR 0 9
65188: PUSH
65189: LD_VAR 0 1
65193: PPUSH
65194: LD_INT 1
65196: PPUSH
65197: CALL_OW 287
65201: PUSH
65202: LD_INT 10
65204: MUL
65205: ST_TO_ADDR
// r := rate / 10 ;
65206: LD_ADDR_VAR 0 7
65210: PUSH
65211: LD_VAR 0 2
65215: PUSH
65216: LD_INT 10
65218: DIVREAL
65219: ST_TO_ADDR
// time := 1 1$00 ;
65220: LD_ADDR_VAR 0 8
65224: PUSH
65225: LD_INT 2100
65227: ST_TO_ADDR
// if amount < min then
65228: LD_VAR 0 9
65232: PUSH
65233: LD_VAR 0 3
65237: LESS
65238: IFFALSE 65256
// r := r * 2 else
65240: LD_ADDR_VAR 0 7
65244: PUSH
65245: LD_VAR 0 7
65249: PUSH
65250: LD_INT 2
65252: MUL
65253: ST_TO_ADDR
65254: GO 65282
// if amount > max then
65256: LD_VAR 0 9
65260: PUSH
65261: LD_VAR 0 4
65265: GREATER
65266: IFFALSE 65282
// r := r / 2 ;
65268: LD_ADDR_VAR 0 7
65272: PUSH
65273: LD_VAR 0 7
65277: PUSH
65278: LD_INT 2
65280: DIVREAL
65281: ST_TO_ADDR
// time := time / r ;
65282: LD_ADDR_VAR 0 8
65286: PUSH
65287: LD_VAR 0 8
65291: PUSH
65292: LD_VAR 0 7
65296: DIVREAL
65297: ST_TO_ADDR
// if time < 0 then
65298: LD_VAR 0 8
65302: PUSH
65303: LD_INT 0
65305: LESS
65306: IFFALSE 65323
// time := time * - 1 ;
65308: LD_ADDR_VAR 0 8
65312: PUSH
65313: LD_VAR 0 8
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: MUL
65322: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65323: LD_VAR 0 8
65327: PUSH
65328: LD_INT 35
65330: PPUSH
65331: LD_INT 875
65333: PPUSH
65334: CALL_OW 12
65338: PLUS
65339: PPUSH
65340: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65344: LD_INT 1
65346: PPUSH
65347: LD_INT 5
65349: PPUSH
65350: CALL_OW 12
65354: PPUSH
65355: LD_VAR 0 1
65359: PPUSH
65360: LD_INT 1
65362: PPUSH
65363: CALL_OW 55
// end ;
65367: GO 65180
// end ;
65369: LD_VAR 0 5
65373: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65374: LD_INT 0
65376: PPUSH
65377: PPUSH
65378: PPUSH
65379: PPUSH
65380: PPUSH
65381: PPUSH
65382: PPUSH
65383: PPUSH
// if not turrets or not factories then
65384: LD_VAR 0 1
65388: NOT
65389: PUSH
65390: LD_VAR 0 2
65394: NOT
65395: OR
65396: IFFALSE 65400
// exit ;
65398: GO 65707
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65400: LD_ADDR_VAR 0 10
65404: PUSH
65405: LD_INT 5
65407: PUSH
65408: LD_INT 6
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 2
65417: PUSH
65418: LD_INT 4
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 3
65427: PUSH
65428: LD_INT 5
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 24
65442: PUSH
65443: LD_INT 25
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 23
65452: PUSH
65453: LD_INT 27
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: PUSH
65464: LD_INT 42
65466: PUSH
65467: LD_INT 43
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: PUSH
65474: LD_INT 44
65476: PUSH
65477: LD_INT 46
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 45
65486: PUSH
65487: LD_INT 47
65489: PUSH
65490: EMPTY
65491: LIST
65492: LIST
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: LIST
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: LIST
65503: ST_TO_ADDR
// result := [ ] ;
65504: LD_ADDR_VAR 0 3
65508: PUSH
65509: EMPTY
65510: ST_TO_ADDR
// for i in turrets do
65511: LD_ADDR_VAR 0 4
65515: PUSH
65516: LD_VAR 0 1
65520: PUSH
65521: FOR_IN
65522: IFFALSE 65705
// begin nat := GetNation ( i ) ;
65524: LD_ADDR_VAR 0 7
65528: PUSH
65529: LD_VAR 0 4
65533: PPUSH
65534: CALL_OW 248
65538: ST_TO_ADDR
// weapon := 0 ;
65539: LD_ADDR_VAR 0 8
65543: PUSH
65544: LD_INT 0
65546: ST_TO_ADDR
// if not nat then
65547: LD_VAR 0 7
65551: NOT
65552: IFFALSE 65556
// continue ;
65554: GO 65521
// for j in list [ nat ] do
65556: LD_ADDR_VAR 0 5
65560: PUSH
65561: LD_VAR 0 10
65565: PUSH
65566: LD_VAR 0 7
65570: ARRAY
65571: PUSH
65572: FOR_IN
65573: IFFALSE 65614
// if GetBWeapon ( i ) = j [ 1 ] then
65575: LD_VAR 0 4
65579: PPUSH
65580: CALL_OW 269
65584: PUSH
65585: LD_VAR 0 5
65589: PUSH
65590: LD_INT 1
65592: ARRAY
65593: EQUAL
65594: IFFALSE 65612
// begin weapon := j [ 2 ] ;
65596: LD_ADDR_VAR 0 8
65600: PUSH
65601: LD_VAR 0 5
65605: PUSH
65606: LD_INT 2
65608: ARRAY
65609: ST_TO_ADDR
// break ;
65610: GO 65614
// end ;
65612: GO 65572
65614: POP
65615: POP
// if not weapon then
65616: LD_VAR 0 8
65620: NOT
65621: IFFALSE 65625
// continue ;
65623: GO 65521
// for k in factories do
65625: LD_ADDR_VAR 0 6
65629: PUSH
65630: LD_VAR 0 2
65634: PUSH
65635: FOR_IN
65636: IFFALSE 65701
// begin weapons := AvailableWeaponList ( k ) ;
65638: LD_ADDR_VAR 0 9
65642: PUSH
65643: LD_VAR 0 6
65647: PPUSH
65648: CALL_OW 478
65652: ST_TO_ADDR
// if not weapons then
65653: LD_VAR 0 9
65657: NOT
65658: IFFALSE 65662
// continue ;
65660: GO 65635
// if weapon in weapons then
65662: LD_VAR 0 8
65666: PUSH
65667: LD_VAR 0 9
65671: IN
65672: IFFALSE 65699
// begin result := [ i , weapon ] ;
65674: LD_ADDR_VAR 0 3
65678: PUSH
65679: LD_VAR 0 4
65683: PUSH
65684: LD_VAR 0 8
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: ST_TO_ADDR
// exit ;
65693: POP
65694: POP
65695: POP
65696: POP
65697: GO 65707
// end ; end ;
65699: GO 65635
65701: POP
65702: POP
// end ;
65703: GO 65521
65705: POP
65706: POP
// end ;
65707: LD_VAR 0 3
65711: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65712: LD_INT 0
65714: PPUSH
// if not side or side > 8 then
65715: LD_VAR 0 3
65719: NOT
65720: PUSH
65721: LD_VAR 0 3
65725: PUSH
65726: LD_INT 8
65728: GREATER
65729: OR
65730: IFFALSE 65734
// exit ;
65732: GO 65793
// if not range then
65734: LD_VAR 0 4
65738: NOT
65739: IFFALSE 65750
// range := - 12 ;
65741: LD_ADDR_VAR 0 4
65745: PUSH
65746: LD_INT 12
65748: NEG
65749: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65750: LD_VAR 0 1
65754: PPUSH
65755: LD_VAR 0 2
65759: PPUSH
65760: LD_VAR 0 3
65764: PPUSH
65765: LD_VAR 0 4
65769: PPUSH
65770: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65774: LD_VAR 0 1
65778: PPUSH
65779: LD_VAR 0 2
65783: PPUSH
65784: LD_VAR 0 3
65788: PPUSH
65789: CALL_OW 331
// end ;
65793: LD_VAR 0 5
65797: RET
// export function Video ( mode ) ; begin
65798: LD_INT 0
65800: PPUSH
// ingame_video = mode ;
65801: LD_ADDR_OWVAR 52
65805: PUSH
65806: LD_VAR 0 1
65810: ST_TO_ADDR
// interface_hidden = mode ;
65811: LD_ADDR_OWVAR 54
65815: PUSH
65816: LD_VAR 0 1
65820: ST_TO_ADDR
// end ;
65821: LD_VAR 0 2
65825: RET
// export function Join ( array , element ) ; begin
65826: LD_INT 0
65828: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65829: LD_ADDR_VAR 0 3
65833: PUSH
65834: LD_VAR 0 1
65838: PPUSH
65839: LD_VAR 0 1
65843: PUSH
65844: LD_INT 1
65846: PLUS
65847: PPUSH
65848: LD_VAR 0 2
65852: PPUSH
65853: CALL_OW 1
65857: ST_TO_ADDR
// end ;
65858: LD_VAR 0 3
65862: RET
// export function JoinUnion ( array , element ) ; begin
65863: LD_INT 0
65865: PPUSH
// result := array union element ;
65866: LD_ADDR_VAR 0 3
65870: PUSH
65871: LD_VAR 0 1
65875: PUSH
65876: LD_VAR 0 2
65880: UNION
65881: ST_TO_ADDR
// end ;
65882: LD_VAR 0 3
65886: RET
// export function GetBehemoths ( side ) ; begin
65887: LD_INT 0
65889: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65890: LD_ADDR_VAR 0 2
65894: PUSH
65895: LD_INT 22
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 31
65909: PUSH
65910: LD_INT 25
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PPUSH
65921: CALL_OW 69
65925: ST_TO_ADDR
// end ;
65926: LD_VAR 0 2
65930: RET
// export function Shuffle ( array ) ; var i , index ; begin
65931: LD_INT 0
65933: PPUSH
65934: PPUSH
65935: PPUSH
// result := [ ] ;
65936: LD_ADDR_VAR 0 2
65940: PUSH
65941: EMPTY
65942: ST_TO_ADDR
// if not array then
65943: LD_VAR 0 1
65947: NOT
65948: IFFALSE 65952
// exit ;
65950: GO 66051
// Randomize ;
65952: CALL_OW 10
// for i = array downto 1 do
65956: LD_ADDR_VAR 0 3
65960: PUSH
65961: DOUBLE
65962: LD_VAR 0 1
65966: INC
65967: ST_TO_ADDR
65968: LD_INT 1
65970: PUSH
65971: FOR_DOWNTO
65972: IFFALSE 66049
// begin index := rand ( 1 , array ) ;
65974: LD_ADDR_VAR 0 4
65978: PUSH
65979: LD_INT 1
65981: PPUSH
65982: LD_VAR 0 1
65986: PPUSH
65987: CALL_OW 12
65991: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65992: LD_ADDR_VAR 0 2
65996: PUSH
65997: LD_VAR 0 2
66001: PPUSH
66002: LD_VAR 0 2
66006: PUSH
66007: LD_INT 1
66009: PLUS
66010: PPUSH
66011: LD_VAR 0 1
66015: PUSH
66016: LD_VAR 0 4
66020: ARRAY
66021: PPUSH
66022: CALL_OW 2
66026: ST_TO_ADDR
// array := Delete ( array , index ) ;
66027: LD_ADDR_VAR 0 1
66031: PUSH
66032: LD_VAR 0 1
66036: PPUSH
66037: LD_VAR 0 4
66041: PPUSH
66042: CALL_OW 3
66046: ST_TO_ADDR
// end ;
66047: GO 65971
66049: POP
66050: POP
// end ;
66051: LD_VAR 0 2
66055: RET
// export function GetBaseMaterials ( base ) ; begin
66056: LD_INT 0
66058: PPUSH
// result := [ 0 , 0 , 0 ] ;
66059: LD_ADDR_VAR 0 2
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: LIST
66077: ST_TO_ADDR
// if not base then
66078: LD_VAR 0 1
66082: NOT
66083: IFFALSE 66087
// exit ;
66085: GO 66136
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66087: LD_ADDR_VAR 0 2
66091: PUSH
66092: LD_VAR 0 1
66096: PPUSH
66097: LD_INT 1
66099: PPUSH
66100: CALL_OW 275
66104: PUSH
66105: LD_VAR 0 1
66109: PPUSH
66110: LD_INT 2
66112: PPUSH
66113: CALL_OW 275
66117: PUSH
66118: LD_VAR 0 1
66122: PPUSH
66123: LD_INT 3
66125: PPUSH
66126: CALL_OW 275
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: LIST
66135: ST_TO_ADDR
// end ;
66136: LD_VAR 0 2
66140: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66141: LD_INT 0
66143: PPUSH
66144: PPUSH
// result := array ;
66145: LD_ADDR_VAR 0 3
66149: PUSH
66150: LD_VAR 0 1
66154: ST_TO_ADDR
// if size >= result then
66155: LD_VAR 0 2
66159: PUSH
66160: LD_VAR 0 3
66164: GREATEREQUAL
66165: IFFALSE 66169
// exit ;
66167: GO 66219
// if size then
66169: LD_VAR 0 2
66173: IFFALSE 66219
// for i := array downto size do
66175: LD_ADDR_VAR 0 4
66179: PUSH
66180: DOUBLE
66181: LD_VAR 0 1
66185: INC
66186: ST_TO_ADDR
66187: LD_VAR 0 2
66191: PUSH
66192: FOR_DOWNTO
66193: IFFALSE 66217
// result := Delete ( result , result ) ;
66195: LD_ADDR_VAR 0 3
66199: PUSH
66200: LD_VAR 0 3
66204: PPUSH
66205: LD_VAR 0 3
66209: PPUSH
66210: CALL_OW 3
66214: ST_TO_ADDR
66215: GO 66192
66217: POP
66218: POP
// end ;
66219: LD_VAR 0 3
66223: RET
// export function ComExit ( unit ) ; var tmp ; begin
66224: LD_INT 0
66226: PPUSH
66227: PPUSH
// if not IsInUnit ( unit ) then
66228: LD_VAR 0 1
66232: PPUSH
66233: CALL_OW 310
66237: NOT
66238: IFFALSE 66242
// exit ;
66240: GO 66302
// tmp := IsInUnit ( unit ) ;
66242: LD_ADDR_VAR 0 3
66246: PUSH
66247: LD_VAR 0 1
66251: PPUSH
66252: CALL_OW 310
66256: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66257: LD_VAR 0 3
66261: PPUSH
66262: CALL_OW 247
66266: PUSH
66267: LD_INT 2
66269: EQUAL
66270: IFFALSE 66283
// ComExitVehicle ( unit ) else
66272: LD_VAR 0 1
66276: PPUSH
66277: CALL_OW 121
66281: GO 66292
// ComExitBuilding ( unit ) ;
66283: LD_VAR 0 1
66287: PPUSH
66288: CALL_OW 122
// result := tmp ;
66292: LD_ADDR_VAR 0 2
66296: PUSH
66297: LD_VAR 0 3
66301: ST_TO_ADDR
// end ;
66302: LD_VAR 0 2
66306: RET
// export function ComExitAll ( units ) ; var i ; begin
66307: LD_INT 0
66309: PPUSH
66310: PPUSH
// if not units then
66311: LD_VAR 0 1
66315: NOT
66316: IFFALSE 66320
// exit ;
66318: GO 66346
// for i in units do
66320: LD_ADDR_VAR 0 3
66324: PUSH
66325: LD_VAR 0 1
66329: PUSH
66330: FOR_IN
66331: IFFALSE 66344
// ComExit ( i ) ;
66333: LD_VAR 0 3
66337: PPUSH
66338: CALL 66224 0 1
66342: GO 66330
66344: POP
66345: POP
// end ;
66346: LD_VAR 0 2
66350: RET
// export function ResetHc ; begin
66351: LD_INT 0
66353: PPUSH
// InitHc ;
66354: CALL_OW 19
// hc_importance := 0 ;
66358: LD_ADDR_OWVAR 32
66362: PUSH
66363: LD_INT 0
66365: ST_TO_ADDR
// end ;
66366: LD_VAR 0 1
66370: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66371: LD_INT 0
66373: PPUSH
66374: PPUSH
66375: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66376: LD_ADDR_VAR 0 6
66380: PUSH
66381: LD_VAR 0 1
66385: PUSH
66386: LD_VAR 0 3
66390: PLUS
66391: PUSH
66392: LD_INT 2
66394: DIV
66395: ST_TO_ADDR
// if _x < 0 then
66396: LD_VAR 0 6
66400: PUSH
66401: LD_INT 0
66403: LESS
66404: IFFALSE 66421
// _x := _x * - 1 ;
66406: LD_ADDR_VAR 0 6
66410: PUSH
66411: LD_VAR 0 6
66415: PUSH
66416: LD_INT 1
66418: NEG
66419: MUL
66420: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66421: LD_ADDR_VAR 0 7
66425: PUSH
66426: LD_VAR 0 2
66430: PUSH
66431: LD_VAR 0 4
66435: PLUS
66436: PUSH
66437: LD_INT 2
66439: DIV
66440: ST_TO_ADDR
// if _y < 0 then
66441: LD_VAR 0 7
66445: PUSH
66446: LD_INT 0
66448: LESS
66449: IFFALSE 66466
// _y := _y * - 1 ;
66451: LD_ADDR_VAR 0 7
66455: PUSH
66456: LD_VAR 0 7
66460: PUSH
66461: LD_INT 1
66463: NEG
66464: MUL
66465: ST_TO_ADDR
// result := [ _x , _y ] ;
66466: LD_ADDR_VAR 0 5
66470: PUSH
66471: LD_VAR 0 6
66475: PUSH
66476: LD_VAR 0 7
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: ST_TO_ADDR
// end ;
66485: LD_VAR 0 5
66489: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66490: LD_INT 0
66492: PPUSH
66493: PPUSH
66494: PPUSH
66495: PPUSH
// task := GetTaskList ( unit ) ;
66496: LD_ADDR_VAR 0 7
66500: PUSH
66501: LD_VAR 0 1
66505: PPUSH
66506: CALL_OW 437
66510: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66511: LD_VAR 0 7
66515: NOT
66516: PUSH
66517: LD_VAR 0 1
66521: PPUSH
66522: LD_VAR 0 2
66526: PPUSH
66527: CALL_OW 308
66531: NOT
66532: AND
66533: IFFALSE 66537
// exit ;
66535: GO 66655
// if IsInArea ( unit , area ) then
66537: LD_VAR 0 1
66541: PPUSH
66542: LD_VAR 0 2
66546: PPUSH
66547: CALL_OW 308
66551: IFFALSE 66569
// begin ComMoveToArea ( unit , goAway ) ;
66553: LD_VAR 0 1
66557: PPUSH
66558: LD_VAR 0 3
66562: PPUSH
66563: CALL_OW 113
// exit ;
66567: GO 66655
// end ; if task [ 1 ] [ 1 ] <> M then
66569: LD_VAR 0 7
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: PUSH
66582: LD_STRING M
66584: NONEQUAL
66585: IFFALSE 66589
// exit ;
66587: GO 66655
// x := task [ 1 ] [ 2 ] ;
66589: LD_ADDR_VAR 0 5
66593: PUSH
66594: LD_VAR 0 7
66598: PUSH
66599: LD_INT 1
66601: ARRAY
66602: PUSH
66603: LD_INT 2
66605: ARRAY
66606: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66607: LD_ADDR_VAR 0 6
66611: PUSH
66612: LD_VAR 0 7
66616: PUSH
66617: LD_INT 1
66619: ARRAY
66620: PUSH
66621: LD_INT 3
66623: ARRAY
66624: ST_TO_ADDR
// if InArea ( x , y , area ) then
66625: LD_VAR 0 5
66629: PPUSH
66630: LD_VAR 0 6
66634: PPUSH
66635: LD_VAR 0 2
66639: PPUSH
66640: CALL_OW 309
66644: IFFALSE 66655
// ComStop ( unit ) ;
66646: LD_VAR 0 1
66650: PPUSH
66651: CALL_OW 141
// end ;
66655: LD_VAR 0 4
66659: RET
// export function Abs ( value ) ; begin
66660: LD_INT 0
66662: PPUSH
// result := value ;
66663: LD_ADDR_VAR 0 2
66667: PUSH
66668: LD_VAR 0 1
66672: ST_TO_ADDR
// if value < 0 then
66673: LD_VAR 0 1
66677: PUSH
66678: LD_INT 0
66680: LESS
66681: IFFALSE 66698
// result := value * - 1 ;
66683: LD_ADDR_VAR 0 2
66687: PUSH
66688: LD_VAR 0 1
66692: PUSH
66693: LD_INT 1
66695: NEG
66696: MUL
66697: ST_TO_ADDR
// end ;
66698: LD_VAR 0 2
66702: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66703: LD_INT 0
66705: PPUSH
66706: PPUSH
66707: PPUSH
66708: PPUSH
66709: PPUSH
66710: PPUSH
66711: PPUSH
66712: PPUSH
// if not unit or not building then
66713: LD_VAR 0 1
66717: NOT
66718: PUSH
66719: LD_VAR 0 2
66723: NOT
66724: OR
66725: IFFALSE 66729
// exit ;
66727: GO 66955
// x := GetX ( building ) ;
66729: LD_ADDR_VAR 0 4
66733: PUSH
66734: LD_VAR 0 2
66738: PPUSH
66739: CALL_OW 250
66743: ST_TO_ADDR
// y := GetY ( building ) ;
66744: LD_ADDR_VAR 0 6
66748: PUSH
66749: LD_VAR 0 2
66753: PPUSH
66754: CALL_OW 251
66758: ST_TO_ADDR
// d := GetDir ( building ) ;
66759: LD_ADDR_VAR 0 8
66763: PUSH
66764: LD_VAR 0 2
66768: PPUSH
66769: CALL_OW 254
66773: ST_TO_ADDR
// r := 4 ;
66774: LD_ADDR_VAR 0 9
66778: PUSH
66779: LD_INT 4
66781: ST_TO_ADDR
// for i := 1 to 5 do
66782: LD_ADDR_VAR 0 10
66786: PUSH
66787: DOUBLE
66788: LD_INT 1
66790: DEC
66791: ST_TO_ADDR
66792: LD_INT 5
66794: PUSH
66795: FOR_TO
66796: IFFALSE 66953
// begin _x := ShiftX ( x , d , r + i ) ;
66798: LD_ADDR_VAR 0 5
66802: PUSH
66803: LD_VAR 0 4
66807: PPUSH
66808: LD_VAR 0 8
66812: PPUSH
66813: LD_VAR 0 9
66817: PUSH
66818: LD_VAR 0 10
66822: PLUS
66823: PPUSH
66824: CALL_OW 272
66828: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66829: LD_ADDR_VAR 0 7
66833: PUSH
66834: LD_VAR 0 6
66838: PPUSH
66839: LD_VAR 0 8
66843: PPUSH
66844: LD_VAR 0 9
66848: PUSH
66849: LD_VAR 0 10
66853: PLUS
66854: PPUSH
66855: CALL_OW 273
66859: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66860: LD_VAR 0 5
66864: PPUSH
66865: LD_VAR 0 7
66869: PPUSH
66870: CALL_OW 488
66874: PUSH
66875: LD_VAR 0 5
66879: PPUSH
66880: LD_VAR 0 7
66884: PPUSH
66885: CALL_OW 428
66889: PPUSH
66890: CALL_OW 247
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: LD_INT 2
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: IN
66905: NOT
66906: AND
66907: IFFALSE 66951
// begin ComMoveXY ( unit , _x , _y ) ;
66909: LD_VAR 0 1
66913: PPUSH
66914: LD_VAR 0 5
66918: PPUSH
66919: LD_VAR 0 7
66923: PPUSH
66924: CALL_OW 111
// result := [ _x , _y ] ;
66928: LD_ADDR_VAR 0 3
66932: PUSH
66933: LD_VAR 0 5
66937: PUSH
66938: LD_VAR 0 7
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: ST_TO_ADDR
// exit ;
66947: POP
66948: POP
66949: GO 66955
// end ; end ;
66951: GO 66795
66953: POP
66954: POP
// end ;
66955: LD_VAR 0 3
66959: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66960: LD_INT 0
66962: PPUSH
66963: PPUSH
66964: PPUSH
// result := 0 ;
66965: LD_ADDR_VAR 0 3
66969: PUSH
66970: LD_INT 0
66972: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66973: LD_VAR 0 1
66977: PUSH
66978: LD_INT 0
66980: LESS
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: LD_INT 8
66989: GREATER
66990: OR
66991: PUSH
66992: LD_VAR 0 2
66996: PUSH
66997: LD_INT 0
66999: LESS
67000: OR
67001: PUSH
67002: LD_VAR 0 2
67006: PUSH
67007: LD_INT 8
67009: GREATER
67010: OR
67011: IFFALSE 67015
// exit ;
67013: GO 67090
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67015: LD_ADDR_VAR 0 4
67019: PUSH
67020: LD_INT 22
67022: PUSH
67023: LD_VAR 0 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PPUSH
67032: CALL_OW 69
67036: PUSH
67037: FOR_IN
67038: IFFALSE 67088
// begin un := UnitShoot ( i ) ;
67040: LD_ADDR_VAR 0 5
67044: PUSH
67045: LD_VAR 0 4
67049: PPUSH
67050: CALL_OW 504
67054: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67055: LD_VAR 0 5
67059: PPUSH
67060: CALL_OW 255
67064: PUSH
67065: LD_VAR 0 1
67069: EQUAL
67070: IFFALSE 67086
// begin result := un ;
67072: LD_ADDR_VAR 0 3
67076: PUSH
67077: LD_VAR 0 5
67081: ST_TO_ADDR
// exit ;
67082: POP
67083: POP
67084: GO 67090
// end ; end ;
67086: GO 67037
67088: POP
67089: POP
// end ;
67090: LD_VAR 0 3
67094: RET
// export function GetCargoBay ( units ) ; begin
67095: LD_INT 0
67097: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67098: LD_ADDR_VAR 0 2
67102: PUSH
67103: LD_VAR 0 1
67107: PPUSH
67108: LD_INT 2
67110: PUSH
67111: LD_INT 34
67113: PUSH
67114: LD_INT 12
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 34
67123: PUSH
67124: LD_INT 51
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 34
67133: PUSH
67134: LD_INT 32
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 34
67143: PUSH
67144: LD_INT 89
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: PPUSH
67158: CALL_OW 72
67162: ST_TO_ADDR
// end ;
67163: LD_VAR 0 2
67167: RET
// export function Negate ( value ) ; begin
67168: LD_INT 0
67170: PPUSH
// result := not value ;
67171: LD_ADDR_VAR 0 2
67175: PUSH
67176: LD_VAR 0 1
67180: NOT
67181: ST_TO_ADDR
// end ;
67182: LD_VAR 0 2
67186: RET
// export function Inc ( value ) ; begin
67187: LD_INT 0
67189: PPUSH
// result := value + 1 ;
67190: LD_ADDR_VAR 0 2
67194: PUSH
67195: LD_VAR 0 1
67199: PUSH
67200: LD_INT 1
67202: PLUS
67203: ST_TO_ADDR
// end ;
67204: LD_VAR 0 2
67208: RET
// export function Dec ( value ) ; begin
67209: LD_INT 0
67211: PPUSH
// result := value - 1 ;
67212: LD_ADDR_VAR 0 2
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_INT 1
67224: MINUS
67225: ST_TO_ADDR
// end ;
67226: LD_VAR 0 2
67230: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67231: LD_INT 0
67233: PPUSH
67234: PPUSH
67235: PPUSH
67236: PPUSH
67237: PPUSH
67238: PPUSH
67239: PPUSH
67240: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67241: LD_VAR 0 1
67245: PPUSH
67246: LD_VAR 0 2
67250: PPUSH
67251: CALL_OW 488
67255: NOT
67256: PUSH
67257: LD_VAR 0 3
67261: PPUSH
67262: LD_VAR 0 4
67266: PPUSH
67267: CALL_OW 488
67271: NOT
67272: OR
67273: IFFALSE 67286
// begin result := - 1 ;
67275: LD_ADDR_VAR 0 5
67279: PUSH
67280: LD_INT 1
67282: NEG
67283: ST_TO_ADDR
// exit ;
67284: GO 67521
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67286: LD_ADDR_VAR 0 12
67290: PUSH
67291: LD_VAR 0 1
67295: PPUSH
67296: LD_VAR 0 2
67300: PPUSH
67301: LD_VAR 0 3
67305: PPUSH
67306: LD_VAR 0 4
67310: PPUSH
67311: CALL 66371 0 4
67315: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67316: LD_ADDR_VAR 0 11
67320: PUSH
67321: LD_VAR 0 1
67325: PPUSH
67326: LD_VAR 0 2
67330: PPUSH
67331: LD_VAR 0 12
67335: PUSH
67336: LD_INT 1
67338: ARRAY
67339: PPUSH
67340: LD_VAR 0 12
67344: PUSH
67345: LD_INT 2
67347: ARRAY
67348: PPUSH
67349: CALL_OW 298
67353: ST_TO_ADDR
// distance := 9999 ;
67354: LD_ADDR_VAR 0 10
67358: PUSH
67359: LD_INT 9999
67361: ST_TO_ADDR
// for i := 0 to 5 do
67362: LD_ADDR_VAR 0 6
67366: PUSH
67367: DOUBLE
67368: LD_INT 0
67370: DEC
67371: ST_TO_ADDR
67372: LD_INT 5
67374: PUSH
67375: FOR_TO
67376: IFFALSE 67519
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67378: LD_ADDR_VAR 0 7
67382: PUSH
67383: LD_VAR 0 1
67387: PPUSH
67388: LD_VAR 0 6
67392: PPUSH
67393: LD_VAR 0 11
67397: PPUSH
67398: CALL_OW 272
67402: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67403: LD_ADDR_VAR 0 8
67407: PUSH
67408: LD_VAR 0 2
67412: PPUSH
67413: LD_VAR 0 6
67417: PPUSH
67418: LD_VAR 0 11
67422: PPUSH
67423: CALL_OW 273
67427: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67428: LD_VAR 0 7
67432: PPUSH
67433: LD_VAR 0 8
67437: PPUSH
67438: CALL_OW 488
67442: NOT
67443: IFFALSE 67447
// continue ;
67445: GO 67375
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67447: LD_ADDR_VAR 0 9
67451: PUSH
67452: LD_VAR 0 12
67456: PUSH
67457: LD_INT 1
67459: ARRAY
67460: PPUSH
67461: LD_VAR 0 12
67465: PUSH
67466: LD_INT 2
67468: ARRAY
67469: PPUSH
67470: LD_VAR 0 7
67474: PPUSH
67475: LD_VAR 0 8
67479: PPUSH
67480: CALL_OW 298
67484: ST_TO_ADDR
// if tmp < distance then
67485: LD_VAR 0 9
67489: PUSH
67490: LD_VAR 0 10
67494: LESS
67495: IFFALSE 67517
// begin result := i ;
67497: LD_ADDR_VAR 0 5
67501: PUSH
67502: LD_VAR 0 6
67506: ST_TO_ADDR
// distance := tmp ;
67507: LD_ADDR_VAR 0 10
67511: PUSH
67512: LD_VAR 0 9
67516: ST_TO_ADDR
// end ; end ;
67517: GO 67375
67519: POP
67520: POP
// end ;
67521: LD_VAR 0 5
67525: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67526: LD_INT 0
67528: PPUSH
67529: PPUSH
// if not driver or not IsInUnit ( driver ) then
67530: LD_VAR 0 1
67534: NOT
67535: PUSH
67536: LD_VAR 0 1
67540: PPUSH
67541: CALL_OW 310
67545: NOT
67546: OR
67547: IFFALSE 67551
// exit ;
67549: GO 67641
// vehicle := IsInUnit ( driver ) ;
67551: LD_ADDR_VAR 0 3
67555: PUSH
67556: LD_VAR 0 1
67560: PPUSH
67561: CALL_OW 310
67565: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67566: LD_VAR 0 1
67570: PPUSH
67571: LD_STRING \
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: LD_INT 0
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_STRING E
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 0
67609: PUSH
67610: LD_VAR 0 3
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: LD_INT 0
67620: PUSH
67621: LD_INT 0
67623: PUSH
67624: EMPTY
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PPUSH
67637: CALL_OW 446
// end ;
67641: LD_VAR 0 2
67645: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67646: LD_INT 0
67648: PPUSH
67649: PPUSH
// if not driver or not IsInUnit ( driver ) then
67650: LD_VAR 0 1
67654: NOT
67655: PUSH
67656: LD_VAR 0 1
67660: PPUSH
67661: CALL_OW 310
67665: NOT
67666: OR
67667: IFFALSE 67671
// exit ;
67669: GO 67761
// vehicle := IsInUnit ( driver ) ;
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_VAR 0 1
67680: PPUSH
67681: CALL_OW 310
67685: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67686: LD_VAR 0 1
67690: PPUSH
67691: LD_STRING \
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: LD_INT 0
67708: PUSH
67709: LD_INT 0
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: PUSH
67721: LD_STRING E
67723: PUSH
67724: LD_INT 0
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: LD_VAR 0 3
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: LD_INT 0
67740: PUSH
67741: LD_INT 0
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PPUSH
67757: CALL_OW 447
// end ;
67761: LD_VAR 0 2
67765: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67766: LD_INT 0
67768: PPUSH
67769: PPUSH
67770: PPUSH
// tmp := [ ] ;
67771: LD_ADDR_VAR 0 5
67775: PUSH
67776: EMPTY
67777: ST_TO_ADDR
// for i in units do
67778: LD_ADDR_VAR 0 4
67782: PUSH
67783: LD_VAR 0 1
67787: PUSH
67788: FOR_IN
67789: IFFALSE 67827
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67791: LD_ADDR_VAR 0 5
67795: PUSH
67796: LD_VAR 0 5
67800: PPUSH
67801: LD_VAR 0 5
67805: PUSH
67806: LD_INT 1
67808: PLUS
67809: PPUSH
67810: LD_VAR 0 4
67814: PPUSH
67815: CALL_OW 256
67819: PPUSH
67820: CALL_OW 2
67824: ST_TO_ADDR
67825: GO 67788
67827: POP
67828: POP
// if not tmp then
67829: LD_VAR 0 5
67833: NOT
67834: IFFALSE 67838
// exit ;
67836: GO 67886
// if asc then
67838: LD_VAR 0 2
67842: IFFALSE 67866
// result := SortListByListAsc ( units , tmp ) else
67844: LD_ADDR_VAR 0 3
67848: PUSH
67849: LD_VAR 0 1
67853: PPUSH
67854: LD_VAR 0 5
67858: PPUSH
67859: CALL_OW 76
67863: ST_TO_ADDR
67864: GO 67886
// result := SortListByListDesc ( units , tmp ) ;
67866: LD_ADDR_VAR 0 3
67870: PUSH
67871: LD_VAR 0 1
67875: PPUSH
67876: LD_VAR 0 5
67880: PPUSH
67881: CALL_OW 77
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 3
67890: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67891: LD_INT 0
67893: PPUSH
67894: PPUSH
// task := GetTaskList ( mech ) ;
67895: LD_ADDR_VAR 0 4
67899: PUSH
67900: LD_VAR 0 1
67904: PPUSH
67905: CALL_OW 437
67909: ST_TO_ADDR
// if not task then
67910: LD_VAR 0 4
67914: NOT
67915: IFFALSE 67919
// exit ;
67917: GO 67961
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67919: LD_ADDR_VAR 0 3
67923: PUSH
67924: LD_VAR 0 4
67928: PUSH
67929: LD_INT 1
67931: ARRAY
67932: PUSH
67933: LD_INT 1
67935: ARRAY
67936: PUSH
67937: LD_STRING r
67939: EQUAL
67940: PUSH
67941: LD_VAR 0 4
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: PUSH
67950: LD_INT 4
67952: ARRAY
67953: PUSH
67954: LD_VAR 0 2
67958: EQUAL
67959: AND
67960: ST_TO_ADDR
// end ;
67961: LD_VAR 0 3
67965: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67966: LD_INT 0
67968: PPUSH
// SetDir ( unit , d ) ;
67969: LD_VAR 0 1
67973: PPUSH
67974: LD_VAR 0 4
67978: PPUSH
67979: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67983: LD_VAR 0 1
67987: PPUSH
67988: LD_VAR 0 2
67992: PPUSH
67993: LD_VAR 0 3
67997: PPUSH
67998: LD_VAR 0 5
68002: PPUSH
68003: CALL_OW 48
// end ;
68007: LD_VAR 0 6
68011: RET
// export function ToNaturalNumber ( number ) ; begin
68012: LD_INT 0
68014: PPUSH
// result := number div 1 ;
68015: LD_ADDR_VAR 0 2
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: LD_INT 1
68027: DIV
68028: ST_TO_ADDR
// if number < 0 then
68029: LD_VAR 0 1
68033: PUSH
68034: LD_INT 0
68036: LESS
68037: IFFALSE 68047
// result := 0 ;
68039: LD_ADDR_VAR 0 2
68043: PUSH
68044: LD_INT 0
68046: ST_TO_ADDR
// end ;
68047: LD_VAR 0 2
68051: RET
// export function SortByClass ( units , class ) ; var un ; begin
68052: LD_INT 0
68054: PPUSH
68055: PPUSH
// if not units or not class then
68056: LD_VAR 0 1
68060: NOT
68061: PUSH
68062: LD_VAR 0 2
68066: NOT
68067: OR
68068: IFFALSE 68072
// exit ;
68070: GO 68167
// result := [ ] ;
68072: LD_ADDR_VAR 0 3
68076: PUSH
68077: EMPTY
68078: ST_TO_ADDR
// for un in units do
68079: LD_ADDR_VAR 0 4
68083: PUSH
68084: LD_VAR 0 1
68088: PUSH
68089: FOR_IN
68090: IFFALSE 68165
// if GetClass ( un ) = class then
68092: LD_VAR 0 4
68096: PPUSH
68097: CALL_OW 257
68101: PUSH
68102: LD_VAR 0 2
68106: EQUAL
68107: IFFALSE 68134
// result := Insert ( result , 1 , un ) else
68109: LD_ADDR_VAR 0 3
68113: PUSH
68114: LD_VAR 0 3
68118: PPUSH
68119: LD_INT 1
68121: PPUSH
68122: LD_VAR 0 4
68126: PPUSH
68127: CALL_OW 2
68131: ST_TO_ADDR
68132: GO 68163
// result := Replace ( result , result + 1 , un ) ;
68134: LD_ADDR_VAR 0 3
68138: PUSH
68139: LD_VAR 0 3
68143: PPUSH
68144: LD_VAR 0 3
68148: PUSH
68149: LD_INT 1
68151: PLUS
68152: PPUSH
68153: LD_VAR 0 4
68157: PPUSH
68158: CALL_OW 1
68162: ST_TO_ADDR
68163: GO 68089
68165: POP
68166: POP
// end ;
68167: LD_VAR 0 3
68171: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68172: LD_INT 0
68174: PPUSH
68175: PPUSH
68176: PPUSH
68177: PPUSH
68178: PPUSH
68179: PPUSH
68180: PPUSH
// result := [ ] ;
68181: LD_ADDR_VAR 0 4
68185: PUSH
68186: EMPTY
68187: ST_TO_ADDR
// if x - r < 0 then
68188: LD_VAR 0 1
68192: PUSH
68193: LD_VAR 0 3
68197: MINUS
68198: PUSH
68199: LD_INT 0
68201: LESS
68202: IFFALSE 68214
// min_x := 0 else
68204: LD_ADDR_VAR 0 8
68208: PUSH
68209: LD_INT 0
68211: ST_TO_ADDR
68212: GO 68230
// min_x := x - r ;
68214: LD_ADDR_VAR 0 8
68218: PUSH
68219: LD_VAR 0 1
68223: PUSH
68224: LD_VAR 0 3
68228: MINUS
68229: ST_TO_ADDR
// if y - r < 0 then
68230: LD_VAR 0 2
68234: PUSH
68235: LD_VAR 0 3
68239: MINUS
68240: PUSH
68241: LD_INT 0
68243: LESS
68244: IFFALSE 68256
// min_y := 0 else
68246: LD_ADDR_VAR 0 7
68250: PUSH
68251: LD_INT 0
68253: ST_TO_ADDR
68254: GO 68272
// min_y := y - r ;
68256: LD_ADDR_VAR 0 7
68260: PUSH
68261: LD_VAR 0 2
68265: PUSH
68266: LD_VAR 0 3
68270: MINUS
68271: ST_TO_ADDR
// max_x := x + r ;
68272: LD_ADDR_VAR 0 9
68276: PUSH
68277: LD_VAR 0 1
68281: PUSH
68282: LD_VAR 0 3
68286: PLUS
68287: ST_TO_ADDR
// max_y := y + r ;
68288: LD_ADDR_VAR 0 10
68292: PUSH
68293: LD_VAR 0 2
68297: PUSH
68298: LD_VAR 0 3
68302: PLUS
68303: ST_TO_ADDR
// for _x = min_x to max_x do
68304: LD_ADDR_VAR 0 5
68308: PUSH
68309: DOUBLE
68310: LD_VAR 0 8
68314: DEC
68315: ST_TO_ADDR
68316: LD_VAR 0 9
68320: PUSH
68321: FOR_TO
68322: IFFALSE 68423
// for _y = min_y to max_y do
68324: LD_ADDR_VAR 0 6
68328: PUSH
68329: DOUBLE
68330: LD_VAR 0 7
68334: DEC
68335: ST_TO_ADDR
68336: LD_VAR 0 10
68340: PUSH
68341: FOR_TO
68342: IFFALSE 68419
// begin if not ValidHex ( _x , _y ) then
68344: LD_VAR 0 5
68348: PPUSH
68349: LD_VAR 0 6
68353: PPUSH
68354: CALL_OW 488
68358: NOT
68359: IFFALSE 68363
// continue ;
68361: GO 68341
// if GetResourceTypeXY ( _x , _y ) then
68363: LD_VAR 0 5
68367: PPUSH
68368: LD_VAR 0 6
68372: PPUSH
68373: CALL_OW 283
68377: IFFALSE 68417
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68379: LD_ADDR_VAR 0 4
68383: PUSH
68384: LD_VAR 0 4
68388: PPUSH
68389: LD_VAR 0 4
68393: PUSH
68394: LD_INT 1
68396: PLUS
68397: PPUSH
68398: LD_VAR 0 5
68402: PUSH
68403: LD_VAR 0 6
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PPUSH
68412: CALL_OW 1
68416: ST_TO_ADDR
// end ;
68417: GO 68341
68419: POP
68420: POP
68421: GO 68321
68423: POP
68424: POP
// end ;
68425: LD_VAR 0 4
68429: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68430: LD_INT 0
68432: PPUSH
68433: PPUSH
68434: PPUSH
68435: PPUSH
68436: PPUSH
68437: PPUSH
68438: PPUSH
68439: PPUSH
// if not units then
68440: LD_VAR 0 1
68444: NOT
68445: IFFALSE 68449
// exit ;
68447: GO 68973
// result := UnitFilter ( units , [ f_ok ] ) ;
68449: LD_ADDR_VAR 0 3
68453: PUSH
68454: LD_VAR 0 1
68458: PPUSH
68459: LD_INT 50
68461: PUSH
68462: EMPTY
68463: LIST
68464: PPUSH
68465: CALL_OW 72
68469: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68470: LD_ADDR_VAR 0 8
68474: PUSH
68475: LD_VAR 0 1
68479: PUSH
68480: LD_INT 1
68482: ARRAY
68483: PPUSH
68484: CALL_OW 255
68488: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68489: LD_ADDR_VAR 0 10
68493: PUSH
68494: LD_INT 29
68496: PUSH
68497: LD_INT 91
68499: PUSH
68500: LD_INT 49
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: LIST
68507: ST_TO_ADDR
// if not result then
68508: LD_VAR 0 3
68512: NOT
68513: IFFALSE 68517
// exit ;
68515: GO 68973
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68517: LD_ADDR_VAR 0 5
68521: PUSH
68522: LD_INT 81
68524: PUSH
68525: LD_VAR 0 8
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PPUSH
68534: CALL_OW 69
68538: ST_TO_ADDR
// for i in result do
68539: LD_ADDR_VAR 0 4
68543: PUSH
68544: LD_VAR 0 3
68548: PUSH
68549: FOR_IN
68550: IFFALSE 68971
// begin tag := GetTag ( i ) + 1 ;
68552: LD_ADDR_VAR 0 9
68556: PUSH
68557: LD_VAR 0 4
68561: PPUSH
68562: CALL_OW 110
68566: PUSH
68567: LD_INT 1
68569: PLUS
68570: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68571: LD_ADDR_VAR 0 7
68575: PUSH
68576: LD_VAR 0 4
68580: PPUSH
68581: CALL_OW 250
68585: PPUSH
68586: LD_VAR 0 4
68590: PPUSH
68591: CALL_OW 251
68595: PPUSH
68596: LD_INT 6
68598: PPUSH
68599: CALL 68172 0 3
68603: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68604: LD_VAR 0 4
68608: PPUSH
68609: CALL_OW 247
68613: PUSH
68614: LD_INT 2
68616: EQUAL
68617: PUSH
68618: LD_VAR 0 7
68622: AND
68623: PUSH
68624: LD_VAR 0 4
68628: PPUSH
68629: CALL_OW 264
68633: PUSH
68634: LD_VAR 0 10
68638: IN
68639: NOT
68640: AND
68641: IFFALSE 68680
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68643: LD_VAR 0 4
68647: PPUSH
68648: LD_VAR 0 7
68652: PUSH
68653: LD_INT 1
68655: ARRAY
68656: PUSH
68657: LD_INT 1
68659: ARRAY
68660: PPUSH
68661: LD_VAR 0 7
68665: PUSH
68666: LD_INT 1
68668: ARRAY
68669: PUSH
68670: LD_INT 2
68672: ARRAY
68673: PPUSH
68674: CALL_OW 116
68678: GO 68969
// if path > tag then
68680: LD_VAR 0 2
68684: PUSH
68685: LD_VAR 0 9
68689: GREATER
68690: IFFALSE 68898
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68692: LD_ADDR_VAR 0 6
68696: PUSH
68697: LD_VAR 0 5
68701: PPUSH
68702: LD_INT 91
68704: PUSH
68705: LD_VAR 0 4
68709: PUSH
68710: LD_INT 8
68712: PUSH
68713: EMPTY
68714: LIST
68715: LIST
68716: LIST
68717: PPUSH
68718: CALL_OW 72
68722: ST_TO_ADDR
// if nearEnemy then
68723: LD_VAR 0 6
68727: IFFALSE 68796
// begin if GetWeapon ( i ) = ru_time_lapser then
68729: LD_VAR 0 4
68733: PPUSH
68734: CALL_OW 264
68738: PUSH
68739: LD_INT 49
68741: EQUAL
68742: IFFALSE 68770
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68744: LD_VAR 0 4
68748: PPUSH
68749: LD_VAR 0 6
68753: PPUSH
68754: LD_VAR 0 4
68758: PPUSH
68759: CALL_OW 74
68763: PPUSH
68764: CALL_OW 112
68768: GO 68794
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68770: LD_VAR 0 4
68774: PPUSH
68775: LD_VAR 0 6
68779: PPUSH
68780: LD_VAR 0 4
68784: PPUSH
68785: CALL_OW 74
68789: PPUSH
68790: CALL 69898 0 2
// end else
68794: GO 68896
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68796: LD_VAR 0 4
68800: PPUSH
68801: LD_VAR 0 2
68805: PUSH
68806: LD_VAR 0 9
68810: ARRAY
68811: PUSH
68812: LD_INT 1
68814: ARRAY
68815: PPUSH
68816: LD_VAR 0 2
68820: PUSH
68821: LD_VAR 0 9
68825: ARRAY
68826: PUSH
68827: LD_INT 2
68829: ARRAY
68830: PPUSH
68831: CALL_OW 297
68835: PUSH
68836: LD_INT 6
68838: GREATER
68839: IFFALSE 68882
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68841: LD_VAR 0 4
68845: PPUSH
68846: LD_VAR 0 2
68850: PUSH
68851: LD_VAR 0 9
68855: ARRAY
68856: PUSH
68857: LD_INT 1
68859: ARRAY
68860: PPUSH
68861: LD_VAR 0 2
68865: PUSH
68866: LD_VAR 0 9
68870: ARRAY
68871: PUSH
68872: LD_INT 2
68874: ARRAY
68875: PPUSH
68876: CALL_OW 114
68880: GO 68896
// SetTag ( i , tag ) ;
68882: LD_VAR 0 4
68886: PPUSH
68887: LD_VAR 0 9
68891: PPUSH
68892: CALL_OW 109
// end else
68896: GO 68969
// if enemy then
68898: LD_VAR 0 5
68902: IFFALSE 68969
// begin if GetWeapon ( i ) = ru_time_lapser then
68904: LD_VAR 0 4
68908: PPUSH
68909: CALL_OW 264
68913: PUSH
68914: LD_INT 49
68916: EQUAL
68917: IFFALSE 68945
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68919: LD_VAR 0 4
68923: PPUSH
68924: LD_VAR 0 5
68928: PPUSH
68929: LD_VAR 0 4
68933: PPUSH
68934: CALL_OW 74
68938: PPUSH
68939: CALL_OW 112
68943: GO 68969
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68945: LD_VAR 0 4
68949: PPUSH
68950: LD_VAR 0 5
68954: PPUSH
68955: LD_VAR 0 4
68959: PPUSH
68960: CALL_OW 74
68964: PPUSH
68965: CALL 69898 0 2
// end ; end ;
68969: GO 68549
68971: POP
68972: POP
// end ;
68973: LD_VAR 0 3
68977: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68978: LD_INT 0
68980: PPUSH
68981: PPUSH
68982: PPUSH
// if not unit or IsInUnit ( unit ) then
68983: LD_VAR 0 1
68987: NOT
68988: PUSH
68989: LD_VAR 0 1
68993: PPUSH
68994: CALL_OW 310
68998: OR
68999: IFFALSE 69003
// exit ;
69001: GO 69094
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69003: LD_ADDR_VAR 0 4
69007: PUSH
69008: LD_VAR 0 1
69012: PPUSH
69013: CALL_OW 250
69017: PPUSH
69018: LD_VAR 0 2
69022: PPUSH
69023: LD_INT 1
69025: PPUSH
69026: CALL_OW 272
69030: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69031: LD_ADDR_VAR 0 5
69035: PUSH
69036: LD_VAR 0 1
69040: PPUSH
69041: CALL_OW 251
69045: PPUSH
69046: LD_VAR 0 2
69050: PPUSH
69051: LD_INT 1
69053: PPUSH
69054: CALL_OW 273
69058: ST_TO_ADDR
// if ValidHex ( x , y ) then
69059: LD_VAR 0 4
69063: PPUSH
69064: LD_VAR 0 5
69068: PPUSH
69069: CALL_OW 488
69073: IFFALSE 69094
// ComTurnXY ( unit , x , y ) ;
69075: LD_VAR 0 1
69079: PPUSH
69080: LD_VAR 0 4
69084: PPUSH
69085: LD_VAR 0 5
69089: PPUSH
69090: CALL_OW 118
// end ;
69094: LD_VAR 0 3
69098: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69099: LD_INT 0
69101: PPUSH
69102: PPUSH
// result := false ;
69103: LD_ADDR_VAR 0 3
69107: PUSH
69108: LD_INT 0
69110: ST_TO_ADDR
// if not units then
69111: LD_VAR 0 2
69115: NOT
69116: IFFALSE 69120
// exit ;
69118: GO 69165
// for i in units do
69120: LD_ADDR_VAR 0 4
69124: PUSH
69125: LD_VAR 0 2
69129: PUSH
69130: FOR_IN
69131: IFFALSE 69163
// if See ( side , i ) then
69133: LD_VAR 0 1
69137: PPUSH
69138: LD_VAR 0 4
69142: PPUSH
69143: CALL_OW 292
69147: IFFALSE 69161
// begin result := true ;
69149: LD_ADDR_VAR 0 3
69153: PUSH
69154: LD_INT 1
69156: ST_TO_ADDR
// exit ;
69157: POP
69158: POP
69159: GO 69165
// end ;
69161: GO 69130
69163: POP
69164: POP
// end ;
69165: LD_VAR 0 3
69169: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69170: LD_INT 0
69172: PPUSH
69173: PPUSH
69174: PPUSH
69175: PPUSH
// if not unit or not points then
69176: LD_VAR 0 1
69180: NOT
69181: PUSH
69182: LD_VAR 0 2
69186: NOT
69187: OR
69188: IFFALSE 69192
// exit ;
69190: GO 69282
// dist := 99999 ;
69192: LD_ADDR_VAR 0 5
69196: PUSH
69197: LD_INT 99999
69199: ST_TO_ADDR
// for i in points do
69200: LD_ADDR_VAR 0 4
69204: PUSH
69205: LD_VAR 0 2
69209: PUSH
69210: FOR_IN
69211: IFFALSE 69280
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69213: LD_ADDR_VAR 0 6
69217: PUSH
69218: LD_VAR 0 1
69222: PPUSH
69223: LD_VAR 0 4
69227: PUSH
69228: LD_INT 1
69230: ARRAY
69231: PPUSH
69232: LD_VAR 0 4
69236: PUSH
69237: LD_INT 2
69239: ARRAY
69240: PPUSH
69241: CALL_OW 297
69245: ST_TO_ADDR
// if tmpDist < dist then
69246: LD_VAR 0 6
69250: PUSH
69251: LD_VAR 0 5
69255: LESS
69256: IFFALSE 69278
// begin result := i ;
69258: LD_ADDR_VAR 0 3
69262: PUSH
69263: LD_VAR 0 4
69267: ST_TO_ADDR
// dist := tmpDist ;
69268: LD_ADDR_VAR 0 5
69272: PUSH
69273: LD_VAR 0 6
69277: ST_TO_ADDR
// end ; end ;
69278: GO 69210
69280: POP
69281: POP
// end ;
69282: LD_VAR 0 3
69286: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69287: LD_INT 0
69289: PPUSH
// uc_side := side ;
69290: LD_ADDR_OWVAR 20
69294: PUSH
69295: LD_VAR 0 1
69299: ST_TO_ADDR
// uc_nation := 3 ;
69300: LD_ADDR_OWVAR 21
69304: PUSH
69305: LD_INT 3
69307: ST_TO_ADDR
// vc_chassis := 25 ;
69308: LD_ADDR_OWVAR 37
69312: PUSH
69313: LD_INT 25
69315: ST_TO_ADDR
// vc_engine := engine_siberite ;
69316: LD_ADDR_OWVAR 39
69320: PUSH
69321: LD_INT 3
69323: ST_TO_ADDR
// vc_control := control_computer ;
69324: LD_ADDR_OWVAR 38
69328: PUSH
69329: LD_INT 3
69331: ST_TO_ADDR
// vc_weapon := 59 ;
69332: LD_ADDR_OWVAR 40
69336: PUSH
69337: LD_INT 59
69339: ST_TO_ADDR
// result := CreateVehicle ;
69340: LD_ADDR_VAR 0 5
69344: PUSH
69345: CALL_OW 45
69349: ST_TO_ADDR
// SetDir ( result , d ) ;
69350: LD_VAR 0 5
69354: PPUSH
69355: LD_VAR 0 4
69359: PPUSH
69360: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69364: LD_VAR 0 5
69368: PPUSH
69369: LD_VAR 0 2
69373: PPUSH
69374: LD_VAR 0 3
69378: PPUSH
69379: LD_INT 0
69381: PPUSH
69382: CALL_OW 48
// end ;
69386: LD_VAR 0 5
69390: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69391: LD_INT 0
69393: PPUSH
69394: PPUSH
69395: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69396: LD_ADDR_VAR 0 2
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: LD_INT 0
69409: PUSH
69410: LD_INT 0
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69419: LD_VAR 0 1
69423: NOT
69424: PUSH
69425: LD_VAR 0 1
69429: PPUSH
69430: CALL_OW 264
69434: PUSH
69435: LD_INT 12
69437: PUSH
69438: LD_INT 51
69440: PUSH
69441: LD_INT 32
69443: PUSH
69444: LD_INT 89
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: IN
69453: NOT
69454: OR
69455: IFFALSE 69459
// exit ;
69457: GO 69557
// for i := 1 to 3 do
69459: LD_ADDR_VAR 0 3
69463: PUSH
69464: DOUBLE
69465: LD_INT 1
69467: DEC
69468: ST_TO_ADDR
69469: LD_INT 3
69471: PUSH
69472: FOR_TO
69473: IFFALSE 69555
// begin tmp := GetCargo ( cargo , i ) ;
69475: LD_ADDR_VAR 0 4
69479: PUSH
69480: LD_VAR 0 1
69484: PPUSH
69485: LD_VAR 0 3
69489: PPUSH
69490: CALL_OW 289
69494: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69495: LD_ADDR_VAR 0 2
69499: PUSH
69500: LD_VAR 0 2
69504: PPUSH
69505: LD_VAR 0 3
69509: PPUSH
69510: LD_VAR 0 4
69514: PPUSH
69515: CALL_OW 1
69519: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69520: LD_ADDR_VAR 0 2
69524: PUSH
69525: LD_VAR 0 2
69529: PPUSH
69530: LD_INT 4
69532: PPUSH
69533: LD_VAR 0 2
69537: PUSH
69538: LD_INT 4
69540: ARRAY
69541: PUSH
69542: LD_VAR 0 4
69546: PLUS
69547: PPUSH
69548: CALL_OW 1
69552: ST_TO_ADDR
// end ;
69553: GO 69472
69555: POP
69556: POP
// end ;
69557: LD_VAR 0 2
69561: RET
// export function Length ( array ) ; begin
69562: LD_INT 0
69564: PPUSH
// result := array + 0 ;
69565: LD_ADDR_VAR 0 2
69569: PUSH
69570: LD_VAR 0 1
69574: PUSH
69575: LD_INT 0
69577: PLUS
69578: ST_TO_ADDR
// end ;
69579: LD_VAR 0 2
69583: RET
// export function PrepareArray ( array ) ; begin
69584: LD_INT 0
69586: PPUSH
// result := array diff 0 ;
69587: LD_ADDR_VAR 0 2
69591: PUSH
69592: LD_VAR 0 1
69596: PUSH
69597: LD_INT 0
69599: DIFF
69600: ST_TO_ADDR
// if not result [ 1 ] then
69601: LD_VAR 0 2
69605: PUSH
69606: LD_INT 1
69608: ARRAY
69609: NOT
69610: IFFALSE 69630
// result := Delete ( result , 1 ) ;
69612: LD_ADDR_VAR 0 2
69616: PUSH
69617: LD_VAR 0 2
69621: PPUSH
69622: LD_INT 1
69624: PPUSH
69625: CALL_OW 3
69629: ST_TO_ADDR
// end ;
69630: LD_VAR 0 2
69634: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69635: LD_INT 0
69637: PPUSH
69638: PPUSH
69639: PPUSH
69640: PPUSH
// sibRocketRange := 25 ;
69641: LD_ADDR_VAR 0 6
69645: PUSH
69646: LD_INT 25
69648: ST_TO_ADDR
// result := false ;
69649: LD_ADDR_VAR 0 4
69653: PUSH
69654: LD_INT 0
69656: ST_TO_ADDR
// for i := 0 to 5 do
69657: LD_ADDR_VAR 0 5
69661: PUSH
69662: DOUBLE
69663: LD_INT 0
69665: DEC
69666: ST_TO_ADDR
69667: LD_INT 5
69669: PUSH
69670: FOR_TO
69671: IFFALSE 69738
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69673: LD_VAR 0 1
69677: PPUSH
69678: LD_VAR 0 5
69682: PPUSH
69683: LD_VAR 0 6
69687: PPUSH
69688: CALL_OW 272
69692: PPUSH
69693: LD_VAR 0 2
69697: PPUSH
69698: LD_VAR 0 5
69702: PPUSH
69703: LD_VAR 0 6
69707: PPUSH
69708: CALL_OW 273
69712: PPUSH
69713: LD_VAR 0 3
69717: PPUSH
69718: CALL_OW 309
69722: IFFALSE 69736
// begin result := true ;
69724: LD_ADDR_VAR 0 4
69728: PUSH
69729: LD_INT 1
69731: ST_TO_ADDR
// exit ;
69732: POP
69733: POP
69734: GO 69740
// end ;
69736: GO 69670
69738: POP
69739: POP
// end ;
69740: LD_VAR 0 4
69744: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69745: LD_INT 0
69747: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69748: LD_VAR 0 1
69752: PPUSH
69753: LD_VAR 0 2
69757: PPUSH
69758: LD_INT 0
69760: PPUSH
69761: LD_INT 0
69763: PPUSH
69764: LD_INT 1
69766: PPUSH
69767: LD_INT 0
69769: PPUSH
69770: CALL_OW 587
// end ;
69774: LD_VAR 0 3
69778: RET
// export function CenterOnNow ( unit ) ; begin
69779: LD_INT 0
69781: PPUSH
// result := IsInUnit ( unit ) ;
69782: LD_ADDR_VAR 0 2
69786: PUSH
69787: LD_VAR 0 1
69791: PPUSH
69792: CALL_OW 310
69796: ST_TO_ADDR
// if not result then
69797: LD_VAR 0 2
69801: NOT
69802: IFFALSE 69814
// result := unit ;
69804: LD_ADDR_VAR 0 2
69808: PUSH
69809: LD_VAR 0 1
69813: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69814: LD_VAR 0 1
69818: PPUSH
69819: CALL_OW 87
// end ;
69823: LD_VAR 0 2
69827: RET
// export function ComMoveHex ( unit , hex ) ; begin
69828: LD_INT 0
69830: PPUSH
// if not hex then
69831: LD_VAR 0 2
69835: NOT
69836: IFFALSE 69840
// exit ;
69838: GO 69893
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69840: LD_VAR 0 2
69844: PUSH
69845: LD_INT 1
69847: ARRAY
69848: PPUSH
69849: LD_VAR 0 2
69853: PUSH
69854: LD_INT 2
69856: ARRAY
69857: PPUSH
69858: CALL_OW 428
69862: IFFALSE 69866
// exit ;
69864: GO 69893
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69866: LD_VAR 0 1
69870: PPUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_INT 1
69878: ARRAY
69879: PPUSH
69880: LD_VAR 0 2
69884: PUSH
69885: LD_INT 2
69887: ARRAY
69888: PPUSH
69889: CALL_OW 111
// end ;
69893: LD_VAR 0 3
69897: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69898: LD_INT 0
69900: PPUSH
69901: PPUSH
69902: PPUSH
// if not unit or not enemy then
69903: LD_VAR 0 1
69907: NOT
69908: PUSH
69909: LD_VAR 0 2
69913: NOT
69914: OR
69915: IFFALSE 69919
// exit ;
69917: GO 70043
// x := GetX ( enemy ) ;
69919: LD_ADDR_VAR 0 4
69923: PUSH
69924: LD_VAR 0 2
69928: PPUSH
69929: CALL_OW 250
69933: ST_TO_ADDR
// y := GetY ( enemy ) ;
69934: LD_ADDR_VAR 0 5
69938: PUSH
69939: LD_VAR 0 2
69943: PPUSH
69944: CALL_OW 251
69948: ST_TO_ADDR
// if ValidHex ( x , y ) then
69949: LD_VAR 0 4
69953: PPUSH
69954: LD_VAR 0 5
69958: PPUSH
69959: CALL_OW 488
69963: IFFALSE 70043
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69965: LD_VAR 0 2
69969: PPUSH
69970: CALL_OW 247
69974: PUSH
69975: LD_INT 3
69977: PUSH
69978: LD_INT 2
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: IN
69985: PUSH
69986: LD_VAR 0 1
69990: PPUSH
69991: CALL_OW 255
69995: PPUSH
69996: LD_VAR 0 2
70000: PPUSH
70001: CALL_OW 292
70005: OR
70006: IFFALSE 70024
// ComAttackUnit ( unit , enemy ) else
70008: LD_VAR 0 1
70012: PPUSH
70013: LD_VAR 0 2
70017: PPUSH
70018: CALL_OW 115
70022: GO 70043
// ComAgressiveMove ( unit , x , y ) ;
70024: LD_VAR 0 1
70028: PPUSH
70029: LD_VAR 0 4
70033: PPUSH
70034: LD_VAR 0 5
70038: PPUSH
70039: CALL_OW 114
// end ;
70043: LD_VAR 0 3
70047: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70048: LD_INT 0
70050: PPUSH
70051: PPUSH
70052: PPUSH
// list := AreaToList ( area , 0 ) ;
70053: LD_ADDR_VAR 0 5
70057: PUSH
70058: LD_VAR 0 1
70062: PPUSH
70063: LD_INT 0
70065: PPUSH
70066: CALL_OW 517
70070: ST_TO_ADDR
// if not list then
70071: LD_VAR 0 5
70075: NOT
70076: IFFALSE 70080
// exit ;
70078: GO 70210
// if all then
70080: LD_VAR 0 2
70084: IFFALSE 70172
// begin for i := 1 to list [ 1 ] do
70086: LD_ADDR_VAR 0 4
70090: PUSH
70091: DOUBLE
70092: LD_INT 1
70094: DEC
70095: ST_TO_ADDR
70096: LD_VAR 0 5
70100: PUSH
70101: LD_INT 1
70103: ARRAY
70104: PUSH
70105: FOR_TO
70106: IFFALSE 70168
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70108: LD_ADDR_VAR 0 3
70112: PUSH
70113: LD_VAR 0 3
70117: PPUSH
70118: LD_VAR 0 3
70122: PUSH
70123: LD_INT 1
70125: PLUS
70126: PPUSH
70127: LD_VAR 0 5
70131: PUSH
70132: LD_INT 1
70134: ARRAY
70135: PUSH
70136: LD_VAR 0 4
70140: ARRAY
70141: PUSH
70142: LD_VAR 0 5
70146: PUSH
70147: LD_INT 2
70149: ARRAY
70150: PUSH
70151: LD_VAR 0 4
70155: ARRAY
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PPUSH
70161: CALL_OW 1
70165: ST_TO_ADDR
70166: GO 70105
70168: POP
70169: POP
// exit ;
70170: GO 70210
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70172: LD_ADDR_VAR 0 3
70176: PUSH
70177: LD_VAR 0 5
70181: PUSH
70182: LD_INT 1
70184: ARRAY
70185: PUSH
70186: LD_INT 1
70188: ARRAY
70189: PUSH
70190: LD_VAR 0 5
70194: PUSH
70195: LD_INT 2
70197: ARRAY
70198: PUSH
70199: LD_INT 1
70201: ARRAY
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: EMPTY
70208: LIST
70209: ST_TO_ADDR
// end ;
70210: LD_VAR 0 3
70214: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70215: LD_INT 0
70217: PPUSH
70218: PPUSH
// list := AreaToList ( area , 0 ) ;
70219: LD_ADDR_VAR 0 4
70223: PUSH
70224: LD_VAR 0 1
70228: PPUSH
70229: LD_INT 0
70231: PPUSH
70232: CALL_OW 517
70236: ST_TO_ADDR
// if not list then
70237: LD_VAR 0 4
70241: NOT
70242: IFFALSE 70246
// exit ;
70244: GO 70287
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70246: LD_ADDR_VAR 0 3
70250: PUSH
70251: LD_VAR 0 4
70255: PUSH
70256: LD_INT 1
70258: ARRAY
70259: PUSH
70260: LD_INT 1
70262: ARRAY
70263: PUSH
70264: LD_VAR 0 4
70268: PUSH
70269: LD_INT 2
70271: ARRAY
70272: PUSH
70273: LD_INT 1
70275: ARRAY
70276: PUSH
70277: LD_VAR 0 2
70281: PUSH
70282: EMPTY
70283: LIST
70284: LIST
70285: LIST
70286: ST_TO_ADDR
// end ;
70287: LD_VAR 0 3
70291: RET
// export function First ( array ) ; begin
70292: LD_INT 0
70294: PPUSH
// if not array then
70295: LD_VAR 0 1
70299: NOT
70300: IFFALSE 70304
// exit ;
70302: GO 70318
// result := array [ 1 ] ;
70304: LD_ADDR_VAR 0 2
70308: PUSH
70309: LD_VAR 0 1
70313: PUSH
70314: LD_INT 1
70316: ARRAY
70317: ST_TO_ADDR
// end ;
70318: LD_VAR 0 2
70322: RET
// export function Last ( array ) ; begin
70323: LD_INT 0
70325: PPUSH
// if not array then
70326: LD_VAR 0 1
70330: NOT
70331: IFFALSE 70335
// exit ;
70333: GO 70351
// result := array [ array ] ;
70335: LD_ADDR_VAR 0 2
70339: PUSH
70340: LD_VAR 0 1
70344: PUSH
70345: LD_VAR 0 1
70349: ARRAY
70350: ST_TO_ADDR
// end ;
70351: LD_VAR 0 2
70355: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
70356: LD_INT 0
70358: PPUSH
70359: PPUSH
// result := [ ] ;
70360: LD_ADDR_VAR 0 5
70364: PUSH
70365: EMPTY
70366: ST_TO_ADDR
// if not array then
70367: LD_VAR 0 1
70371: NOT
70372: IFFALSE 70376
// exit ;
70374: GO 70488
// for i := 1 to array do
70376: LD_ADDR_VAR 0 6
70380: PUSH
70381: DOUBLE
70382: LD_INT 1
70384: DEC
70385: ST_TO_ADDR
70386: LD_VAR 0 1
70390: PUSH
70391: FOR_TO
70392: IFFALSE 70486
// if array [ i ] [ index ] = value then
70394: LD_VAR 0 1
70398: PUSH
70399: LD_VAR 0 6
70403: ARRAY
70404: PUSH
70405: LD_VAR 0 2
70409: ARRAY
70410: PUSH
70411: LD_VAR 0 3
70415: EQUAL
70416: IFFALSE 70484
// begin if indexColumn then
70418: LD_VAR 0 4
70422: IFFALSE 70458
// result := Join ( result , array [ i ] [ indexColumn ] ) else
70424: LD_ADDR_VAR 0 5
70428: PUSH
70429: LD_VAR 0 5
70433: PPUSH
70434: LD_VAR 0 1
70438: PUSH
70439: LD_VAR 0 6
70443: ARRAY
70444: PUSH
70445: LD_VAR 0 4
70449: ARRAY
70450: PPUSH
70451: CALL 65826 0 2
70455: ST_TO_ADDR
70456: GO 70484
// result := Join ( result , array [ i ] ) ;
70458: LD_ADDR_VAR 0 5
70462: PUSH
70463: LD_VAR 0 5
70467: PPUSH
70468: LD_VAR 0 1
70472: PUSH
70473: LD_VAR 0 6
70477: ARRAY
70478: PPUSH
70479: CALL 65826 0 2
70483: ST_TO_ADDR
// end ;
70484: GO 70391
70486: POP
70487: POP
// end ;
70488: LD_VAR 0 5
70492: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70493: LD_INT 0
70495: PPUSH
70496: PPUSH
70497: PPUSH
// if btype = b_depot then
70498: LD_VAR 0 2
70502: PUSH
70503: LD_INT 0
70505: EQUAL
70506: IFFALSE 70518
// begin result := true ;
70508: LD_ADDR_VAR 0 3
70512: PUSH
70513: LD_INT 1
70515: ST_TO_ADDR
// exit ;
70516: GO 70634
// end ; pom := GetBase ( depot ) ;
70518: LD_ADDR_VAR 0 4
70522: PUSH
70523: LD_VAR 0 1
70527: PPUSH
70528: CALL_OW 274
70532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70533: LD_ADDR_VAR 0 5
70537: PUSH
70538: LD_VAR 0 2
70542: PPUSH
70543: LD_VAR 0 1
70547: PPUSH
70548: CALL_OW 248
70552: PPUSH
70553: CALL_OW 450
70557: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70558: LD_ADDR_VAR 0 3
70562: PUSH
70563: LD_VAR 0 4
70567: PPUSH
70568: LD_INT 1
70570: PPUSH
70571: CALL_OW 275
70575: PUSH
70576: LD_VAR 0 5
70580: PUSH
70581: LD_INT 1
70583: ARRAY
70584: GREATEREQUAL
70585: PUSH
70586: LD_VAR 0 4
70590: PPUSH
70591: LD_INT 2
70593: PPUSH
70594: CALL_OW 275
70598: PUSH
70599: LD_VAR 0 5
70603: PUSH
70604: LD_INT 2
70606: ARRAY
70607: GREATEREQUAL
70608: AND
70609: PUSH
70610: LD_VAR 0 4
70614: PPUSH
70615: LD_INT 3
70617: PPUSH
70618: CALL_OW 275
70622: PUSH
70623: LD_VAR 0 5
70627: PUSH
70628: LD_INT 3
70630: ARRAY
70631: GREATEREQUAL
70632: AND
70633: ST_TO_ADDR
// end ;
70634: LD_VAR 0 3
70638: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
70639: LD_INT 0
70641: PPUSH
// if not vehicles or not parkingPoint then
70642: LD_VAR 0 1
70646: NOT
70647: PUSH
70648: LD_VAR 0 2
70652: NOT
70653: OR
70654: IFFALSE 70658
// exit ;
70656: GO 70756
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
70658: LD_ADDR_VAR 0 1
70662: PUSH
70663: LD_VAR 0 1
70667: PPUSH
70668: LD_INT 50
70670: PUSH
70671: EMPTY
70672: LIST
70673: PUSH
70674: LD_INT 3
70676: PUSH
70677: LD_INT 92
70679: PUSH
70680: LD_VAR 0 2
70684: PUSH
70685: LD_INT 1
70687: ARRAY
70688: PUSH
70689: LD_VAR 0 2
70693: PUSH
70694: LD_INT 2
70696: ARRAY
70697: PUSH
70698: LD_INT 8
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: PUSH
70707: EMPTY
70708: LIST
70709: LIST
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PPUSH
70715: CALL_OW 72
70719: ST_TO_ADDR
// if not vehicles then
70720: LD_VAR 0 1
70724: NOT
70725: IFFALSE 70729
// exit ;
70727: GO 70756
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
70729: LD_VAR 0 1
70733: PPUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_INT 1
70741: ARRAY
70742: PPUSH
70743: LD_VAR 0 2
70747: PUSH
70748: LD_INT 2
70750: ARRAY
70751: PPUSH
70752: CALL_OW 111
// end ;
70756: LD_VAR 0 3
70760: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
70761: LD_INT 0
70763: PPUSH
70764: PPUSH
70765: PPUSH
// if not side or not area then
70766: LD_VAR 0 1
70770: NOT
70771: PUSH
70772: LD_VAR 0 2
70776: NOT
70777: OR
70778: IFFALSE 70782
// exit ;
70780: GO 70901
// tmp := AreaToList ( area , 0 ) ;
70782: LD_ADDR_VAR 0 5
70786: PUSH
70787: LD_VAR 0 2
70791: PPUSH
70792: LD_INT 0
70794: PPUSH
70795: CALL_OW 517
70799: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
70800: LD_ADDR_VAR 0 4
70804: PUSH
70805: DOUBLE
70806: LD_INT 1
70808: DEC
70809: ST_TO_ADDR
70810: LD_VAR 0 5
70814: PUSH
70815: LD_INT 1
70817: ARRAY
70818: PUSH
70819: FOR_TO
70820: IFFALSE 70899
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
70822: LD_VAR 0 5
70826: PUSH
70827: LD_INT 1
70829: ARRAY
70830: PUSH
70831: LD_VAR 0 4
70835: ARRAY
70836: PPUSH
70837: LD_VAR 0 5
70841: PUSH
70842: LD_INT 2
70844: ARRAY
70845: PUSH
70846: LD_VAR 0 4
70850: ARRAY
70851: PPUSH
70852: CALL_OW 351
70856: IFFALSE 70897
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
70858: LD_VAR 0 5
70862: PUSH
70863: LD_INT 1
70865: ARRAY
70866: PUSH
70867: LD_VAR 0 4
70871: ARRAY
70872: PPUSH
70873: LD_VAR 0 5
70877: PUSH
70878: LD_INT 2
70880: ARRAY
70881: PUSH
70882: LD_VAR 0 4
70886: ARRAY
70887: PPUSH
70888: LD_VAR 0 1
70892: PPUSH
70893: CALL_OW 244
// end ;
70897: GO 70819
70899: POP
70900: POP
// end ; end_of_file
70901: LD_VAR 0 3
70905: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70906: LD_VAR 0 1
70910: PUSH
70911: LD_INT 200
70913: DOUBLE
70914: GREATEREQUAL
70915: IFFALSE 70923
70917: LD_INT 299
70919: DOUBLE
70920: LESSEQUAL
70921: IFTRUE 70925
70923: GO 70957
70925: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70926: LD_VAR 0 1
70930: PPUSH
70931: LD_VAR 0 2
70935: PPUSH
70936: LD_VAR 0 3
70940: PPUSH
70941: LD_VAR 0 4
70945: PPUSH
70946: LD_VAR 0 5
70950: PPUSH
70951: CALL 23617 0 5
70955: GO 71034
70957: LD_INT 300
70959: DOUBLE
70960: GREATEREQUAL
70961: IFFALSE 70969
70963: LD_INT 399
70965: DOUBLE
70966: LESSEQUAL
70967: IFTRUE 70971
70969: GO 71033
70971: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70972: LD_VAR 0 1
70976: PPUSH
70977: LD_VAR 0 2
70981: PPUSH
70982: LD_VAR 0 3
70986: PPUSH
70987: LD_VAR 0 4
70991: PPUSH
70992: LD_VAR 0 5
70996: PPUSH
70997: LD_VAR 0 6
71001: PPUSH
71002: LD_VAR 0 7
71006: PPUSH
71007: LD_VAR 0 8
71011: PPUSH
71012: LD_VAR 0 9
71016: PPUSH
71017: LD_VAR 0 10
71021: PPUSH
71022: LD_VAR 0 11
71026: PPUSH
71027: CALL 19942 0 11
71031: GO 71034
71033: POP
// end ;
71034: PPOPN 11
71036: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71037: LD_VAR 0 1
71041: PPUSH
71042: LD_VAR 0 2
71046: PPUSH
71047: LD_VAR 0 3
71051: PPUSH
71052: LD_VAR 0 4
71056: PPUSH
71057: LD_VAR 0 5
71061: PPUSH
71062: CALL 23353 0 5
// end ; end_of_file
71066: PPOPN 5
71068: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_VAR 0 2
71078: PPUSH
71079: LD_VAR 0 3
71083: PPUSH
71084: LD_VAR 0 4
71088: PPUSH
71089: LD_VAR 0 5
71093: PPUSH
71094: LD_VAR 0 6
71098: PPUSH
71099: CALL 7594 0 6
// end ;
71103: PPOPN 6
71105: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71106: LD_INT 0
71108: PPUSH
// begin if not units then
71109: LD_VAR 0 1
71113: NOT
71114: IFFALSE 71118
// exit ;
71116: GO 71118
// end ;
71118: PPOPN 7
71120: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71121: CALL 7481 0 0
// end ;
71125: PPOPN 1
71127: END
