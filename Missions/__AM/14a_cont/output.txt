// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 61387 0 9
// PrepareAmerican ;
  46: CALL 4137 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27405 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27405 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27405 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32245 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 63615 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32245 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 63615 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1826
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if IsOk ( JMM ) then
1803: LD_EXP 14
1807: PPUSH
1808: CALL_OW 302
1812: IFFALSE 1826
// Say ( JMM , D8-JMM-1 ) ;
1814: LD_EXP 14
1818: PPUSH
1819: LD_STRING D8-JMM-1
1821: PPUSH
1822: CALL_OW 88
// end ;
1826: LD_VAR 0 4
1830: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1831: LD_EXP 9
1835: PUSH
1836: LD_EXP 7
1840: NOT
1841: AND
1842: PUSH
1843: LD_EXP 4
1847: AND
1848: IFFALSE 1903
1850: GO 1852
1852: DISABLE
// begin enable ;
1853: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1854: LD_INT 9
1856: PPUSH
1857: LD_INT 22
1859: PUSH
1860: LD_INT 7
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PPUSH
1867: CALL_OW 70
1871: IFFALSE 1889
// stevensTimer := stevensTimer - 0 0$30 else
1873: LD_ADDR_EXP 9
1877: PUSH
1878: LD_EXP 9
1882: PUSH
1883: LD_INT 1050
1885: MINUS
1886: ST_TO_ADDR
1887: GO 1903
// stevensTimer := stevensTimer - 0 0$1 ;
1889: LD_ADDR_EXP 9
1893: PUSH
1894: LD_EXP 9
1898: PUSH
1899: LD_INT 35
1901: MINUS
1902: ST_TO_ADDR
// end ;
1903: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1904: LD_EXP 9
1908: PUSH
1909: LD_INT 0
1911: LESSEQUAL
1912: PUSH
1913: LD_EXP 7
1917: NOT
1918: AND
1919: IFFALSE 2083
1921: GO 1923
1923: DISABLE
1924: LD_INT 0
1926: PPUSH
1927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1928: LD_ADDR_VAR 0 2
1932: PUSH
1933: LD_INT 22
1935: PUSH
1936: LD_INT 1
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PUSH
1943: LD_INT 25
1945: PUSH
1946: LD_INT 4
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: PPUSH
1957: CALL_OW 69
1961: ST_TO_ADDR
// for i in tmp do
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_VAR 0 2
1971: PUSH
1972: FOR_IN
1973: IFFALSE 2026
// begin if IsInUnit ( i ) then
1975: LD_VAR 0 1
1979: PPUSH
1980: CALL_OW 310
1984: IFFALSE 1997
// ComExitBuilding ( i ) else
1986: LD_VAR 0 1
1990: PPUSH
1991: CALL_OW 122
1995: GO 2024
// if not HasTask ( i ) then
1997: LD_VAR 0 1
2001: PPUSH
2002: CALL_OW 314
2006: NOT
2007: IFFALSE 2024
// ComMoveXY ( i , 29 , 56 ) ;
2009: LD_VAR 0 1
2013: PPUSH
2014: LD_INT 29
2016: PPUSH
2017: LD_INT 56
2019: PPUSH
2020: CALL_OW 111
// end ;
2024: GO 1972
2026: POP
2027: POP
// repeat wait ( 0 0$1 ) ;
2028: LD_INT 35
2030: PPUSH
2031: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2035: LD_INT 8
2037: PPUSH
2038: LD_INT 22
2040: PUSH
2041: LD_INT 1
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PUSH
2048: LD_INT 25
2050: PUSH
2051: LD_INT 4
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PUSH
2058: EMPTY
2059: LIST
2060: LIST
2061: PPUSH
2062: CALL_OW 70
2066: IFFALSE 2028
// if planCaptured then
2068: LD_EXP 7
2072: IFFALSE 2076
// exit ;
2074: GO 2083
// YouLost ( Time ) ;
2076: LD_STRING Time
2078: PPUSH
2079: CALL_OW 104
// end ;
2083: PPOPN 2
2085: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2086: LD_INT 22
2088: PUSH
2089: LD_INT 7
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 92
2098: PUSH
2099: LD_INT 142
2101: PUSH
2102: LD_INT 52
2104: PUSH
2105: LD_INT 27
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PPUSH
2118: CALL_OW 69
2122: PUSH
2123: LD_EXP 3
2127: PUSH
2128: LD_INT 6000
2130: PLUS
2131: PUSH
2132: LD_OWVAR 1
2136: GREATER
2137: AND
2138: PUSH
2139: LD_EXP 4
2143: AND
2144: IFFALSE 2199
2146: GO 2148
2148: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2149: LD_EXP 14
2153: PUSH
2154: LD_EXP 15
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: PPUSH
2163: CALL_OW 85
// DialogueOn ;
2167: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2171: LD_EXP 14
2175: PPUSH
2176: LD_STRING D6b-JMM-1
2178: PPUSH
2179: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2183: LD_EXP 15
2187: PPUSH
2188: LD_STRING D6b-Bur-1
2190: PPUSH
2191: CALL_OW 88
// DialogueOff ;
2195: CALL_OW 7
// end ;
2199: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2200: LD_EXP 15
2204: PPUSH
2205: LD_INT 142
2207: PPUSH
2208: LD_INT 52
2210: PPUSH
2211: CALL_OW 297
2215: PUSH
2216: LD_INT 25
2218: LESS
2219: PUSH
2220: LD_EXP 15
2224: PPUSH
2225: CALL_OW 310
2229: PPUSH
2230: LD_INT 142
2232: PPUSH
2233: LD_INT 52
2235: PPUSH
2236: CALL_OW 297
2240: PUSH
2241: LD_INT 25
2243: LESS
2244: OR
2245: PUSH
2246: LD_EXP 15
2250: PPUSH
2251: CALL_OW 256
2255: PUSH
2256: LD_INT 1000
2258: LESS
2259: AND
2260: PUSH
2261: LD_EXP 3
2265: PUSH
2266: LD_INT 6000
2268: PLUS
2269: PUSH
2270: LD_OWVAR 1
2274: GREATER
2275: AND
2276: PUSH
2277: LD_EXP 4
2281: AND
2282: IFFALSE 2315
2284: GO 2286
2286: DISABLE
// begin DialogueOn ;
2287: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2291: LD_EXP 15
2295: PPUSH
2296: LD_STRING D7-Bur-1
2298: PPUSH
2299: CALL_OW 88
// enteredContaminatedArea := true ;
2303: LD_ADDR_EXP 5
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// DialogueOff ;
2311: CALL_OW 7
// end ;
2315: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2316: LD_EXP 14
2320: PPUSH
2321: LD_INT 142
2323: PPUSH
2324: LD_INT 52
2326: PPUSH
2327: CALL_OW 297
2331: PUSH
2332: LD_INT 25
2334: LESS
2335: PUSH
2336: LD_EXP 14
2340: PPUSH
2341: CALL_OW 310
2345: PPUSH
2346: LD_INT 142
2348: PPUSH
2349: LD_INT 52
2351: PPUSH
2352: CALL_OW 297
2356: PUSH
2357: LD_INT 25
2359: LESS
2360: OR
2361: PUSH
2362: LD_EXP 14
2366: PPUSH
2367: CALL_OW 256
2371: PUSH
2372: LD_INT 1000
2374: LESS
2375: AND
2376: PUSH
2377: LD_EXP 3
2381: PUSH
2382: LD_INT 6000
2384: PLUS
2385: PUSH
2386: LD_OWVAR 1
2390: GREATER
2391: AND
2392: PUSH
2393: LD_EXP 4
2397: AND
2398: IFFALSE 2431
2400: GO 2402
2402: DISABLE
// begin DialogueOn ;
2403: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2407: LD_EXP 14
2411: PPUSH
2412: LD_STRING D7-JMM-1
2414: PPUSH
2415: CALL_OW 88
// enteredContaminatedArea := true ;
2419: LD_ADDR_EXP 5
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// DialogueOff ;
2427: CALL_OW 7
// end ;
2431: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2432: LD_EXP 6
2436: PUSH
2437: LD_EXP 14
2441: PPUSH
2442: CALL_OW 302
2446: AND
2447: PUSH
2448: LD_EXP 15
2452: PPUSH
2453: CALL_OW 302
2457: AND
2458: IFFALSE 2527
2460: GO 2462
2462: DISABLE
// begin DialogueOn ;
2463: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2467: LD_EXP 14
2471: PUSH
2472: LD_EXP 15
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: PPUSH
2481: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2485: LD_EXP 14
2489: PPUSH
2490: LD_STRING D4-JMM-1
2492: PPUSH
2493: CALL_OW 88
// if not bombExploded then
2497: LD_EXP 4
2501: NOT
2502: IFFALSE 2516
// Say ( Burlak , D4-Bur-1 ) ;
2504: LD_EXP 15
2508: PPUSH
2509: LD_STRING D4-Bur-1
2511: PPUSH
2512: CALL_OW 88
// DialogueOff ;
2516: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2520: LD_STRING MReturn
2522: PPUSH
2523: CALL_OW 337
// end ;
2527: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2528: LD_EXP 7
2532: NOT
2533: PUSH
2534: LD_INT 22
2536: PUSH
2537: LD_INT 7
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 91
2546: PUSH
2547: LD_INT 9
2549: PUSH
2550: LD_INT 6
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: LIST
2557: PUSH
2558: EMPTY
2559: LIST
2560: LIST
2561: PPUSH
2562: CALL_OW 69
2566: AND
2567: IFFALSE 2644
2569: GO 2571
2571: DISABLE
// begin DialogueOn ;
2572: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2576: LD_INT 55
2578: PPUSH
2579: LD_INT 11
2581: PPUSH
2582: LD_INT 7
2584: PPUSH
2585: LD_INT 6
2587: NEG
2588: PPUSH
2589: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2593: LD_INT 55
2595: PPUSH
2596: LD_INT 11
2598: PPUSH
2599: LD_INT 7
2601: PPUSH
2602: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2606: LD_EXP 15
2610: PPUSH
2611: LD_STRING D9-Bur-1
2613: PPUSH
2614: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2618: LD_EXP 14
2622: PPUSH
2623: LD_STRING D9-JMM-1
2625: PPUSH
2626: CALL_OW 88
// DialogueOff ;
2630: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2634: LD_INT 9
2636: PPUSH
2637: LD_INT 7
2639: PPUSH
2640: CALL_OW 235
// end ;
2644: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2645: LD_INT 9
2647: PPUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 7
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PPUSH
2658: CALL_OW 70
2662: IFFALSE 2698
2664: GO 2666
2666: DISABLE
// begin wait ( 0 0$07 ) ;
2667: LD_INT 245
2669: PPUSH
2670: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2674: LD_EXP 14
2678: PPUSH
2679: LD_STRING D10b-JMM-1
2681: PPUSH
2682: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2686: LD_EXP 15
2690: PPUSH
2691: LD_STRING D10b-Bur-1
2693: PPUSH
2694: CALL_OW 88
// end ;
2698: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2699: LD_EXP 9
2703: PUSH
2704: LD_INT 22
2706: PUSH
2707: LD_INT 1
2709: PUSH
2710: EMPTY
2711: LIST
2712: LIST
2713: PUSH
2714: LD_INT 25
2716: PUSH
2717: LD_INT 4
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: PUSH
2724: LD_INT 26
2726: PUSH
2727: LD_INT 1
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: PPUSH
2739: CALL_OW 69
2743: AND
2744: PUSH
2745: LD_INT 5
2747: PPUSH
2748: CALL_OW 255
2752: PUSH
2753: LD_INT 7
2755: EQUAL
2756: PUSH
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 1
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: EMPTY
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL_OW 69
2785: PUSH
2786: LD_INT 0
2788: EQUAL
2789: OR
2790: AND
2791: IFFALSE 3380
2793: GO 2795
2795: DISABLE
2796: LD_INT 0
2798: PPUSH
// begin case Query ( QKill ) of 1 :
2799: LD_STRING QKill
2801: PPUSH
2802: CALL_OW 97
2806: PUSH
2807: LD_INT 1
2809: DOUBLE
2810: EQUAL
2811: IFTRUE 2815
2813: GO 3368
2815: POP
// begin DialogueOn ;
2816: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2820: LD_EXP 14
2824: PPUSH
2825: LD_STRING D10a-JMM-1
2827: PPUSH
2828: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2832: LD_EXP 15
2836: PPUSH
2837: LD_STRING D10a-Bur-1
2839: PPUSH
2840: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2844: LD_EXP 14
2848: PPUSH
2849: LD_STRING D10a-JMM-2
2851: PPUSH
2852: CALL_OW 88
// if IsOk ( Stevens ) then
2856: LD_EXP 18
2860: PPUSH
2861: CALL_OW 302
2865: IFFALSE 2881
// Say ( Stevens , D10a-Huck-2 ) else
2867: LD_EXP 18
2871: PPUSH
2872: LD_STRING D10a-Huck-2
2874: PPUSH
2875: CALL_OW 88
2879: GO 2932
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2881: LD_INT 22
2883: PUSH
2884: LD_INT 1
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 25
2893: PUSH
2894: LD_INT 4
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: LD_INT 26
2903: PUSH
2904: LD_INT 1
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: LIST
2915: PPUSH
2916: CALL_OW 69
2920: PUSH
2921: LD_INT 1
2923: ARRAY
2924: PPUSH
2925: LD_STRING D10a-ASci1-3
2927: PPUSH
2928: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2932: LD_EXP 14
2936: PPUSH
2937: LD_STRING D10a-JMM-4
2939: PPUSH
2940: CALL_OW 88
// if IsOk ( Stevens ) then
2944: LD_EXP 18
2948: PPUSH
2949: CALL_OW 302
2953: IFFALSE 2967
// Say ( Stevens , D10a-Huck-3 ) ;
2955: LD_EXP 18
2959: PPUSH
2960: LD_STRING D10a-Huck-3
2962: PPUSH
2963: CALL_OW 88
// DialogueOff ;
2967: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2971: LD_INT 1
2973: PPUSH
2974: LD_INT 7
2976: PPUSH
2977: LD_INT 1
2979: PPUSH
2980: LD_INT 1
2982: PPUSH
2983: CALL_OW 80
// planCaptured := true ;
2987: LD_ADDR_EXP 7
2991: PUSH
2992: LD_INT 1
2994: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2995: LD_STRING MEnd
2997: PPUSH
2998: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3002: LD_STRING ACH_DIPLOMACY
3004: PPUSH
3005: CALL_OW 543
// canEnd := true ;
3009: LD_ADDR_EXP 10
3013: PUSH
3014: LD_INT 1
3016: ST_TO_ADDR
// missionTime := tick ;
3017: LD_ADDR_EXP 11
3021: PUSH
3022: LD_OWVAR 1
3026: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3027: LD_INT 35
3029: PPUSH
3030: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3034: LD_INT 22
3036: PUSH
3037: LD_INT 1
3039: PUSH
3040: EMPTY
3041: LIST
3042: LIST
3043: PUSH
3044: LD_INT 3
3046: PUSH
3047: LD_INT 50
3049: PUSH
3050: EMPTY
3051: LIST
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: EMPTY
3058: LIST
3059: LIST
3060: PPUSH
3061: CALL_OW 69
3065: IFFALSE 3181
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3067: LD_ADDR_VAR 0 1
3071: PUSH
3072: LD_INT 22
3074: PUSH
3075: LD_INT 1
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PUSH
3082: LD_INT 25
3084: PUSH
3085: LD_INT 4
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PPUSH
3096: CALL_OW 69
3100: PUSH
3101: FOR_IN
3102: IFFALSE 3179
// begin if IsInUnit ( i ) then
3104: LD_VAR 0 1
3108: PPUSH
3109: CALL_OW 310
3113: IFFALSE 3126
// ComExitBuilding ( i ) else
3115: LD_VAR 0 1
3119: PPUSH
3120: CALL_OW 122
3124: GO 3177
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3126: LD_VAR 0 1
3130: PPUSH
3131: LD_INT 22
3133: PUSH
3134: LD_INT 1
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: LD_INT 3
3143: PUSH
3144: LD_INT 50
3146: PUSH
3147: EMPTY
3148: LIST
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: PPUSH
3158: CALL_OW 69
3162: PPUSH
3163: LD_VAR 0 1
3167: PPUSH
3168: CALL_OW 74
3172: PPUSH
3173: CALL_OW 128
// end ;
3177: GO 3101
3179: POP
3180: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3181: LD_INT 22
3183: PUSH
3184: LD_INT 1
3186: PUSH
3187: EMPTY
3188: LIST
3189: LIST
3190: PUSH
3191: LD_INT 3
3193: PUSH
3194: LD_INT 50
3196: PUSH
3197: EMPTY
3198: LIST
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PPUSH
3208: CALL_OW 69
3212: NOT
3213: IFFALSE 3027
// repeat wait ( 3 ) ;
3215: LD_INT 3
3217: PPUSH
3218: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3222: LD_ADDR_VAR 0 1
3226: PUSH
3227: LD_INT 22
3229: PUSH
3230: LD_INT 1
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PUSH
3237: LD_INT 21
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: PPUSH
3251: CALL_OW 69
3255: PUSH
3256: FOR_IN
3257: IFFALSE 3333
// begin if IsInArea ( i , stevensEscapeArea ) then
3259: LD_VAR 0 1
3263: PPUSH
3264: LD_INT 8
3266: PPUSH
3267: CALL_OW 308
3271: IFFALSE 3284
// begin RemoveUnit ( i ) ;
3273: LD_VAR 0 1
3277: PPUSH
3278: CALL_OW 64
// continue ;
3282: GO 3256
// end ; if IsInUnit ( i ) then
3284: LD_VAR 0 1
3288: PPUSH
3289: CALL_OW 310
3293: IFFALSE 3304
// ComExitBuilding ( i ) ;
3295: LD_VAR 0 1
3299: PPUSH
3300: CALL_OW 122
// if not HasTask ( i ) then
3304: LD_VAR 0 1
3308: PPUSH
3309: CALL_OW 314
3313: NOT
3314: IFFALSE 3331
// ComMoveXY ( i , 28 , 55 ) ;
3316: LD_VAR 0 1
3320: PPUSH
3321: LD_INT 28
3323: PPUSH
3324: LD_INT 55
3326: PPUSH
3327: CALL_OW 111
// end ;
3331: GO 3256
3333: POP
3334: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3335: LD_INT 22
3337: PUSH
3338: LD_INT 1
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PUSH
3345: LD_INT 21
3347: PUSH
3348: LD_INT 1
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: PUSH
3355: EMPTY
3356: LIST
3357: LIST
3358: PPUSH
3359: CALL_OW 69
3363: NOT
3364: IFFALSE 3215
// end ; 2 :
3366: GO 3380
3368: LD_INT 2
3370: DOUBLE
3371: EQUAL
3372: IFTRUE 3376
3374: GO 3379
3376: POP
// ; end ;
3377: GO 3380
3379: POP
// end ;
3380: PPOPN 1
3382: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3383: LD_EXP 10
3387: IFFALSE 3744
3389: GO 3391
3391: DISABLE
3392: LD_INT 0
3394: PPUSH
3395: PPUSH
3396: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3397: LD_INT 10
3399: PPUSH
3400: LD_INT 1
3402: PPUSH
3403: CALL_OW 424
// if Difficulty < 2 then
3407: LD_OWVAR 67
3411: PUSH
3412: LD_INT 2
3414: LESS
3415: IFFALSE 3419
// exit ;
3417: GO 3744
// uc_side := 4 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// InitHc ;
3435: CALL_OW 19
// tmp := [ ] ;
3439: LD_ADDR_VAR 0 3
3443: PUSH
3444: EMPTY
3445: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3446: LD_INT 0
3448: PPUSH
3449: LD_INT 5
3451: PPUSH
3452: LD_INT 10
3454: PPUSH
3455: CALL_OW 380
// un := CreateHuman ;
3459: LD_ADDR_VAR 0 1
3463: PUSH
3464: CALL_OW 44
3468: ST_TO_ADDR
// tmp := [ un ] ;
3469: LD_ADDR_VAR 0 3
3473: PUSH
3474: LD_VAR 0 1
3478: PUSH
3479: EMPTY
3480: LIST
3481: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3482: LD_VAR 0 1
3486: PPUSH
3487: LD_INT 226
3489: PPUSH
3490: LD_INT 86
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL_OW 48
// ComHold ( un ) ;
3500: LD_VAR 0 1
3504: PPUSH
3505: CALL_OW 140
// for i = 1 to 3 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 3
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3525: LD_INT 0
3527: PPUSH
3528: LD_INT 1
3530: PPUSH
3531: LD_INT 8
3533: PPUSH
3534: CALL_OW 380
// un := CreateHuman ;
3538: LD_ADDR_VAR 0 1
3542: PUSH
3543: CALL_OW 44
3547: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3548: LD_VAR 0 1
3552: PPUSH
3553: LD_INT 5
3555: PPUSH
3556: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3560: LD_VAR 0 1
3564: PPUSH
3565: LD_INT 215
3567: PUSH
3568: LD_INT 217
3570: PUSH
3571: LD_INT 219
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: LIST
3578: PUSH
3579: LD_VAR 0 2
3583: ARRAY
3584: PPUSH
3585: LD_INT 76
3587: PPUSH
3588: LD_INT 0
3590: PPUSH
3591: CALL_OW 48
// ComCrawl ( un ) ;
3595: LD_VAR 0 1
3599: PPUSH
3600: CALL_OW 137
// tmp := tmp ^ un ;
3604: LD_ADDR_VAR 0 3
3608: PUSH
3609: LD_VAR 0 3
3613: PUSH
3614: LD_VAR 0 1
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// repeat wait ( 0 0$1 ) ;
3624: LD_INT 35
3626: PPUSH
3627: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3631: LD_VAR 0 3
3635: PPUSH
3636: LD_INT 24
3638: PUSH
3639: LD_INT 1000
3641: PUSH
3642: EMPTY
3643: LIST
3644: LIST
3645: PPUSH
3646: CALL_OW 72
3650: NOT
3651: IFFALSE 3624
// for i in tmp do
3653: LD_ADDR_VAR 0 2
3657: PUSH
3658: LD_VAR 0 3
3662: PUSH
3663: FOR_IN
3664: IFFALSE 3742
// begin wait ( 0 0$1 ) ;
3666: LD_INT 35
3668: PPUSH
3669: CALL_OW 67
// if Crawls ( i ) then
3673: LD_VAR 0 2
3677: PPUSH
3678: CALL_OW 318
3682: IFFALSE 3695
// ComWalk ( i ) else
3684: LD_VAR 0 2
3688: PPUSH
3689: CALL_OW 138
3693: GO 3740
// if GetClass ( i ) = class_sniper then
3695: LD_VAR 0 2
3699: PPUSH
3700: CALL_OW 257
3704: PUSH
3705: LD_INT 5
3707: EQUAL
3708: IFFALSE 3726
// ComAttackSoporific ( i , JMM ) else
3710: LD_VAR 0 2
3714: PPUSH
3715: LD_EXP 14
3719: PPUSH
3720: CALL_OW 166
3724: GO 3740
// ComAttackUnit ( i , JMM ) ;
3726: LD_VAR 0 2
3730: PPUSH
3731: LD_EXP 14
3735: PPUSH
3736: CALL_OW 115
// end ;
3740: GO 3663
3742: POP
3743: POP
// end ;
3744: PPOPN 3
3746: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3747: LD_EXP 7
3751: NOT
3752: PUSH
3753: LD_INT 1
3755: PPUSH
3756: CALL_OW 301
3760: AND
3761: IFFALSE 3773
3763: GO 3765
3765: DISABLE
// YouLost ( Lab ) ;
3766: LD_STRING Lab
3768: PPUSH
3769: CALL_OW 104
3773: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3774: LD_INT 10
3776: PPUSH
3777: LD_INT 22
3779: PUSH
3780: LD_INT 7
3782: PUSH
3783: EMPTY
3784: LIST
3785: LIST
3786: PPUSH
3787: CALL_OW 70
3791: PUSH
3792: LD_INT 2
3794: GREATEREQUAL
3795: PUSH
3796: LD_INT 10
3798: PPUSH
3799: LD_INT 3
3801: PUSH
3802: LD_INT 58
3804: PUSH
3805: EMPTY
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: LD_INT 2
3814: PUSH
3815: LD_INT 34
3817: PUSH
3818: LD_INT 12
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: LD_INT 34
3827: PUSH
3828: LD_INT 51
3830: PUSH
3831: EMPTY
3832: LIST
3833: LIST
3834: PUSH
3835: EMPTY
3836: LIST
3837: LIST
3838: LIST
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: PPUSH
3844: CALL_OW 70
3848: AND
3849: PUSH
3850: LD_EXP 10
3854: AND
3855: PUSH
3856: LD_EXP 7
3860: AND
3861: PUSH
3862: LD_EXP 6
3866: AND
3867: IFFALSE 4134
3869: GO 3871
3871: DISABLE
3872: LD_INT 0
3874: PPUSH
3875: PPUSH
// begin m1 := false ;
3876: LD_ADDR_VAR 0 1
3880: PUSH
3881: LD_INT 0
3883: ST_TO_ADDR
// m2 := false ;
3884: LD_ADDR_VAR 0 2
3888: PUSH
3889: LD_INT 0
3891: ST_TO_ADDR
// if killCounter = 0 then
3892: LD_EXP 12
3896: PUSH
3897: LD_INT 0
3899: EQUAL
3900: IFFALSE 3909
// SetAchievement ( ACH_PACIFIST ) ;
3902: LD_STRING ACH_PACIFIST
3904: PPUSH
3905: CALL_OW 543
// if tick < 7 7$00 then
3909: LD_OWVAR 1
3913: PUSH
3914: LD_INT 14700
3916: LESS
3917: IFFALSE 3933
// begin wait ( 3 ) ;
3919: LD_INT 3
3921: PPUSH
3922: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3926: LD_STRING ACH_ASPEED_18
3928: PPUSH
3929: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3933: LD_STRING Explosion
3935: PPUSH
3936: LD_INT 1
3938: PPUSH
3939: CALL_OW 101
// if enteredContaminatedArea then
3943: LD_EXP 5
3947: IFFALSE 3969
// begin m1 := true ;
3949: LD_ADDR_VAR 0 1
3953: PUSH
3954: LD_INT 1
3956: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3957: LD_STRING BioHazard
3959: PPUSH
3960: LD_INT 1
3962: PPUSH
3963: CALL_OW 101
// end else
3967: GO 3980
// AddMedal ( BioHazard , - 1 ) ;
3969: LD_STRING BioHazard
3971: PPUSH
3972: LD_INT 1
3974: NEG
3975: PPUSH
3976: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3980: LD_EXP 11
3984: PUSH
3985: LD_INT 42000
3987: PUSH
3988: LD_INT 31500
3990: PUSH
3991: LD_INT 25200
3993: PUSH
3994: LD_INT 24150
3996: PUSH
3997: EMPTY
3998: LIST
3999: LIST
4000: LIST
4001: LIST
4002: PUSH
4003: LD_OWVAR 67
4007: ARRAY
4008: LESSEQUAL
4009: IFFALSE 4031
// begin m2 := true ;
4011: LD_ADDR_VAR 0 2
4015: PUSH
4016: LD_INT 1
4018: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4019: LD_STRING Speed
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL_OW 101
// end else
4029: GO 4042
// AddMedal ( Speed , - 1 ) ;
4031: LD_STRING Speed
4033: PPUSH
4034: LD_INT 1
4036: NEG
4037: PPUSH
4038: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4042: LD_OWVAR 67
4046: PUSH
4047: LD_INT 3
4049: GREATEREQUAL
4050: PUSH
4051: LD_VAR 0 1
4055: AND
4056: PUSH
4057: LD_VAR 0 2
4061: AND
4062: IFFALSE 4074
// SetAchievementEX ( ACH_AMER , 18 ) ;
4064: LD_STRING ACH_AMER
4066: PPUSH
4067: LD_INT 18
4069: PPUSH
4070: CALL_OW 564
// GiveMedals ( Main ) ;
4074: LD_STRING Main
4076: PPUSH
4077: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4081: LD_EXP 14
4085: PUSH
4086: LD_EXP 15
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: PPUSH
4095: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4099: LD_EXP 14
4103: PPUSH
4104: LD_STRING 14a_JMM
4106: PPUSH
4107: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4111: LD_EXP 15
4115: PPUSH
4116: LD_STRING 14a_Burlak
4118: PPUSH
4119: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4123: LD_STRING enableBioCharacter(BIO_HUGH)
4125: PPUSH
4126: CALL_OW 559
// YouWin ;
4130: CALL_OW 103
// end ; end_of_file
4134: PPOPN 2
4136: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4137: LD_INT 0
4139: PPUSH
4140: PPUSH
4141: PPUSH
4142: PPUSH
// uc_side := 1 ;
4143: LD_ADDR_OWVAR 20
4147: PUSH
4148: LD_INT 1
4150: ST_TO_ADDR
// uc_nation := 1 ;
4151: LD_ADDR_OWVAR 21
4155: PUSH
4156: LD_INT 1
4158: ST_TO_ADDR
// InitHc ;
4159: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4163: LD_INT 34
4165: PPUSH
4166: CALL_OW 274
4170: PPUSH
4171: LD_INT 1
4173: PPUSH
4174: LD_INT 750
4176: PPUSH
4177: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4181: LD_INT 34
4183: PPUSH
4184: CALL_OW 274
4188: PPUSH
4189: LD_INT 3
4191: PPUSH
4192: LD_INT 20
4194: PPUSH
4195: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4199: LD_ADDR_EXP 18
4203: PUSH
4204: LD_STRING Stevens
4206: PPUSH
4207: CALL_OW 25
4211: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4212: LD_ADDR_EXP 19
4216: PUSH
4217: LD_STRING Powell
4219: PPUSH
4220: CALL_OW 25
4224: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4225: LD_EXP 18
4229: PPUSH
4230: LD_INT 1
4232: PPUSH
4233: CALL_OW 52
// vehGuard := [ ] ;
4237: LD_ADDR_EXP 23
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// hc_importance := 0 ;
4244: LD_ADDR_OWVAR 32
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4252: LD_INT 4
4254: PPUSH
4255: LD_INT 3
4257: PPUSH
4258: LD_INT 3
4260: PPUSH
4261: LD_INT 8
4263: PPUSH
4264: LD_INT 100
4266: PPUSH
4267: CALL 32245 0 5
// sibBomb := CreateVehicle ;
4271: LD_ADDR_EXP 21
4275: PUSH
4276: CALL_OW 45
4280: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4281: LD_EXP 21
4285: PPUSH
4286: LD_INT 1
4288: PPUSH
4289: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4293: LD_EXP 21
4297: PPUSH
4298: LD_INT 93
4300: PPUSH
4301: LD_INT 74
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 48
// guards := [ ] ;
4311: LD_ADDR_EXP 22
4315: PUSH
4316: EMPTY
4317: ST_TO_ADDR
// for i = 1 to 3 do
4318: LD_ADDR_VAR 0 2
4322: PUSH
4323: DOUBLE
4324: LD_INT 1
4326: DEC
4327: ST_TO_ADDR
4328: LD_INT 3
4330: PUSH
4331: FOR_TO
4332: IFFALSE 4428
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4334: LD_INT 0
4336: PPUSH
4337: LD_INT 1
4339: PPUSH
4340: LD_INT 8
4342: PUSH
4343: LD_INT 9
4345: PUSH
4346: LD_INT 10
4348: PUSH
4349: LD_INT 10
4351: PUSH
4352: EMPTY
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: PUSH
4358: LD_OWVAR 67
4362: ARRAY
4363: PPUSH
4364: CALL_OW 380
// un := CreateHuman ;
4368: LD_ADDR_VAR 0 3
4372: PUSH
4373: CALL_OW 44
4377: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4378: LD_VAR 0 3
4382: PPUSH
4383: LD_INT 2
4385: PUSH
4386: LD_INT 3
4388: PUSH
4389: LD_INT 4
4391: PUSH
4392: EMPTY
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: LD_VAR 0 2
4401: ARRAY
4402: PPUSH
4403: LD_INT 0
4405: PPUSH
4406: CALL_OW 49
// guards := guards ^ un ;
4410: LD_ADDR_EXP 22
4414: PUSH
4415: LD_EXP 22
4419: PUSH
4420: LD_VAR 0 3
4424: ADD
4425: ST_TO_ADDR
// end ;
4426: GO 4331
4428: POP
4429: POP
// baseGuards := [ ] ;
4430: LD_ADDR_EXP 20
4434: PUSH
4435: EMPTY
4436: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4437: LD_ADDR_VAR 0 2
4441: PUSH
4442: DOUBLE
4443: LD_INT 1
4445: DEC
4446: ST_TO_ADDR
4447: LD_INT 5
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: LD_INT 7
4455: PUSH
4456: LD_INT 8
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: PUSH
4465: LD_OWVAR 67
4469: ARRAY
4470: PUSH
4471: FOR_TO
4472: IFFALSE 4622
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4474: LD_INT 0
4476: PPUSH
4477: LD_INT 8
4479: PUSH
4480: LD_INT 9
4482: PUSH
4483: LD_INT 10
4485: PUSH
4486: LD_INT 10
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: LIST
4493: LIST
4494: PUSH
4495: LD_OWVAR 67
4499: ARRAY
4500: PPUSH
4501: CALL_OW 381
// un := CreateHuman ;
4505: LD_ADDR_VAR 0 3
4509: PUSH
4510: CALL_OW 44
4514: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4515: LD_ADDR_EXP 20
4519: PUSH
4520: LD_EXP 20
4524: PUSH
4525: LD_VAR 0 3
4529: ADD
4530: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4531: LD_ADDR_VAR 0 4
4535: PUSH
4536: LD_INT 22
4538: PUSH
4539: LD_INT 1
4541: PUSH
4542: EMPTY
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 58
4548: PUSH
4549: EMPTY
4550: LIST
4551: PUSH
4552: LD_INT 30
4554: PUSH
4555: LD_INT 32
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: PUSH
4562: EMPTY
4563: LIST
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: ST_TO_ADDR
// if tmp then
4572: LD_VAR 0 4
4576: IFFALSE 4608
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4578: LD_VAR 0 3
4582: PPUSH
4583: LD_VAR 0 4
4587: PUSH
4588: LD_INT 1
4590: PPUSH
4591: LD_VAR 0 4
4595: PPUSH
4596: CALL_OW 12
4600: ARRAY
4601: PPUSH
4602: CALL_OW 52
4606: GO 4620
// PlaceHumanInUnit ( un , us_bar ) ;
4608: LD_VAR 0 3
4612: PPUSH
4613: LD_INT 51
4615: PPUSH
4616: CALL_OW 52
// end ;
4620: GO 4471
4622: POP
4623: POP
// if Difficulty > 1 then
4624: LD_OWVAR 67
4628: PUSH
4629: LD_INT 1
4631: GREATER
4632: IFFALSE 4680
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4634: LD_INT 0
4636: PPUSH
4637: LD_INT 5
4639: PPUSH
4640: LD_INT 9
4642: PUSH
4643: LD_INT 10
4645: PUSH
4646: LD_INT 10
4648: PUSH
4649: EMPTY
4650: LIST
4651: LIST
4652: LIST
4653: PUSH
4654: LD_OWVAR 67
4658: PUSH
4659: LD_INT 1
4661: MINUS
4662: ARRAY
4663: PPUSH
4664: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 80
4675: PPUSH
4676: CALL_OW 52
// end ; for i = 1 to 3 do
4680: LD_ADDR_VAR 0 2
4684: PUSH
4685: DOUBLE
4686: LD_INT 1
4688: DEC
4689: ST_TO_ADDR
4690: LD_INT 3
4692: PUSH
4693: FOR_TO
4694: IFFALSE 4720
// begin PrepareMechanic ( false , 9 ) ;
4696: LD_INT 0
4698: PPUSH
4699: LD_INT 9
4701: PPUSH
4702: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4706: CALL_OW 44
4710: PPUSH
4711: LD_INT 43
4713: PPUSH
4714: CALL_OW 52
// end ;
4718: GO 4693
4720: POP
4721: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4722: CALL_OW 44
4726: PPUSH
4727: LD_INT 49
4729: PPUSH
4730: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4734: LD_ADDR_VAR 0 2
4738: PUSH
4739: DOUBLE
4740: LD_INT 1
4742: DEC
4743: ST_TO_ADDR
4744: LD_INT 1
4746: PUSH
4747: LD_OWVAR 67
4751: PLUS
4752: PUSH
4753: FOR_TO
4754: IFFALSE 4801
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4756: LD_INT 0
4758: PPUSH
4759: LD_INT 8
4761: PUSH
4762: LD_INT 9
4764: PUSH
4765: LD_INT 10
4767: PUSH
4768: LD_INT 10
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: LIST
4776: PUSH
4777: LD_OWVAR 67
4781: ARRAY
4782: PPUSH
4783: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4787: CALL_OW 44
4791: PPUSH
4792: LD_INT 5
4794: PPUSH
4795: CALL_OW 52
// end ;
4799: GO 4753
4801: POP
4802: POP
// for i = 1 to 3 do
4803: LD_ADDR_VAR 0 2
4807: PUSH
4808: DOUBLE
4809: LD_INT 1
4811: DEC
4812: ST_TO_ADDR
4813: LD_INT 3
4815: PUSH
4816: FOR_TO
4817: IFFALSE 4843
// begin PrepareScientist ( false , 10 ) ;
4819: LD_INT 0
4821: PPUSH
4822: LD_INT 10
4824: PPUSH
4825: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4829: CALL_OW 44
4833: PPUSH
4834: LD_INT 1
4836: PPUSH
4837: CALL_OW 52
// end ;
4841: GO 4816
4843: POP
4844: POP
// end ;
4845: LD_VAR 0 1
4849: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4850: LD_EXP 22
4854: PUSH
4855: LD_EXP 2
4859: NOT
4860: AND
4861: IFFALSE 5047
4863: GO 4865
4865: DISABLE
4866: LD_INT 0
4868: PPUSH
4869: PPUSH
4870: PPUSH
// begin enable ;
4871: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4872: LD_ADDR_VAR 0 3
4876: PUSH
4877: LD_INT 204
4879: PUSH
4880: LD_INT 30
4882: PUSH
4883: EMPTY
4884: LIST
4885: LIST
4886: PUSH
4887: LD_INT 165
4889: PUSH
4890: LD_INT 24
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 195
4899: PUSH
4900: LD_INT 6
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PUSH
4907: LD_INT 223
4909: PUSH
4910: LD_INT 54
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 214
4919: PUSH
4920: LD_INT 84
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 206
4929: PUSH
4930: LD_INT 71
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: LIST
4942: LIST
4943: LIST
4944: ST_TO_ADDR
// for i in guards do
4945: LD_ADDR_VAR 0 1
4949: PUSH
4950: LD_EXP 22
4954: PUSH
4955: FOR_IN
4956: IFFALSE 5045
// begin if HasTask ( i ) then
4958: LD_VAR 0 1
4962: PPUSH
4963: CALL_OW 314
4967: IFFALSE 4973
// continue else
4969: GO 4955
4971: GO 5043
// begin j := rand ( 1 , 6 ) ;
4973: LD_ADDR_VAR 0 2
4977: PUSH
4978: LD_INT 1
4980: PPUSH
4981: LD_INT 6
4983: PPUSH
4984: CALL_OW 12
4988: ST_TO_ADDR
// if not See ( 7 , i ) then
4989: LD_INT 7
4991: PPUSH
4992: LD_VAR 0 1
4996: PPUSH
4997: CALL_OW 292
5001: NOT
5002: IFFALSE 5043
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5004: LD_VAR 0 1
5008: PPUSH
5009: LD_VAR 0 3
5013: PUSH
5014: LD_VAR 0 2
5018: ARRAY
5019: PUSH
5020: LD_INT 1
5022: ARRAY
5023: PPUSH
5024: LD_VAR 0 3
5028: PUSH
5029: LD_VAR 0 2
5033: ARRAY
5034: PUSH
5035: LD_INT 2
5037: ARRAY
5038: PPUSH
5039: CALL_OW 114
// end ; end ;
5043: GO 4955
5045: POP
5046: POP
// end ;
5047: PPOPN 3
5049: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5050: LD_EXP 23
5054: PUSH
5055: LD_EXP 7
5059: NOT
5060: AND
5061: IFFALSE 5143
5063: GO 5065
5065: DISABLE
5066: LD_INT 0
5068: PPUSH
// begin enable ;
5069: ENABLE
// for i in vehGuard do
5070: LD_ADDR_VAR 0 1
5074: PUSH
5075: LD_EXP 23
5079: PUSH
5080: FOR_IN
5081: IFFALSE 5141
// if IsOk ( i ) and IsControledBy ( i ) then
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 302
5092: PUSH
5093: LD_VAR 0 1
5097: PPUSH
5098: CALL_OW 312
5102: AND
5103: IFFALSE 5139
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5105: LD_VAR 0 1
5109: PPUSH
5110: LD_INT 22
5112: PUSH
5113: LD_INT 7
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PPUSH
5120: CALL_OW 69
5124: PPUSH
5125: LD_VAR 0 1
5129: PPUSH
5130: CALL_OW 74
5134: PPUSH
5135: CALL_OW 115
5139: GO 5080
5141: POP
5142: POP
// end ;
5143: PPOPN 1
5145: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5146: LD_EXP 4
5150: PUSH
5151: LD_INT 43
5153: PPUSH
5154: CALL_OW 302
5158: AND
5159: PUSH
5160: LD_EXP 7
5164: NOT
5165: AND
5166: PUSH
5167: LD_OWVAR 67
5171: PUSH
5172: LD_INT 1
5174: GREATER
5175: AND
5176: IFFALSE 5241
5178: GO 5180
5180: DISABLE
// begin enable ;
5181: ENABLE
// if Count ( vehGuard ) < Difficulty then
5182: LD_EXP 23
5186: PPUSH
5187: CALL 29507 0 1
5191: PUSH
5192: LD_OWVAR 67
5196: LESS
5197: IFFALSE 5241
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5199: LD_INT 43
5201: PPUSH
5202: LD_INT 5
5204: PPUSH
5205: LD_INT 3
5207: PPUSH
5208: LD_INT 2
5210: PPUSH
5211: LD_INT 7
5213: PUSH
5214: LD_INT 7
5216: PUSH
5217: LD_INT 9
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: LIST
5224: PUSH
5225: LD_INT 1
5227: PPUSH
5228: LD_INT 3
5230: PPUSH
5231: CALL_OW 12
5235: ARRAY
5236: PPUSH
5237: CALL_OW 125
// end ;
5241: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: LD_INT 25
5254: PUSH
5255: LD_INT 5
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PUSH
5262: LD_INT 50
5264: PUSH
5265: EMPTY
5266: LIST
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: LIST
5272: PPUSH
5273: CALL_OW 69
5277: PUSH
5278: LD_EXP 7
5282: NOT
5283: AND
5284: IFFALSE 5513
5286: GO 5288
5288: DISABLE
5289: LD_INT 0
5291: PPUSH
5292: PPUSH
// begin enable ;
5293: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5294: LD_ADDR_VAR 0 1
5298: PUSH
5299: LD_INT 22
5301: PUSH
5302: LD_INT 1
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 25
5311: PUSH
5312: LD_INT 5
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: LD_INT 50
5321: PUSH
5322: EMPTY
5323: LIST
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: PPUSH
5330: CALL_OW 69
5334: ST_TO_ADDR
// if not tmp then
5335: LD_VAR 0 1
5339: NOT
5340: IFFALSE 5344
// exit ;
5342: GO 5513
// b := IsInUnit ( tmp [ 1 ] ) ;
5344: LD_ADDR_VAR 0 2
5348: PUSH
5349: LD_VAR 0 1
5353: PUSH
5354: LD_INT 1
5356: ARRAY
5357: PPUSH
5358: CALL_OW 310
5362: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5363: LD_VAR 0 2
5367: NOT
5368: PUSH
5369: LD_VAR 0 1
5373: PUSH
5374: LD_INT 1
5376: ARRAY
5377: PPUSH
5378: CALL_OW 314
5382: OR
5383: IFFALSE 5387
// exit ;
5385: GO 5513
// if b = us_bun1 then
5387: LD_VAR 0 2
5391: PUSH
5392: LD_INT 80
5394: EQUAL
5395: IFFALSE 5456
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5397: LD_VAR 0 1
5401: PUSH
5402: LD_INT 1
5404: ARRAY
5405: PPUSH
5406: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5410: LD_VAR 0 1
5414: PUSH
5415: LD_INT 1
5417: ARRAY
5418: PPUSH
5419: LD_INT 27
5421: PPUSH
5422: LD_INT 44
5424: PPUSH
5425: CALL_OW 174
// if IsOk ( us_bun2 ) then
5429: LD_INT 55
5431: PPUSH
5432: CALL_OW 302
5436: IFFALSE 5454
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5438: LD_VAR 0 1
5442: PUSH
5443: LD_INT 1
5445: ARRAY
5446: PPUSH
5447: LD_INT 55
5449: PPUSH
5450: CALL_OW 180
// end else
5454: GO 5513
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5456: LD_VAR 0 1
5460: PUSH
5461: LD_INT 1
5463: ARRAY
5464: PPUSH
5465: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5469: LD_VAR 0 1
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: LD_INT 92
5480: PPUSH
5481: LD_INT 51
5483: PPUSH
5484: CALL_OW 174
// if IsOk ( us_bun1 ) then
5488: LD_INT 80
5490: PPUSH
5491: CALL_OW 302
5495: IFFALSE 5513
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5497: LD_VAR 0 1
5501: PUSH
5502: LD_INT 1
5504: ARRAY
5505: PPUSH
5506: LD_INT 80
5508: PPUSH
5509: CALL_OW 180
// end ; end ;
5513: PPOPN 2
5515: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5516: LD_EXP 7
5520: NOT
5521: PUSH
5522: LD_INT 9
5524: PPUSH
5525: LD_INT 22
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 21
5537: PUSH
5538: LD_INT 3
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 3
5547: PUSH
5548: LD_INT 24
5550: PUSH
5551: LD_INT 1000
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: PUSH
5562: EMPTY
5563: LIST
5564: LIST
5565: LIST
5566: PPUSH
5567: CALL_OW 70
5571: AND
5572: IFFALSE 5983
5574: GO 5576
5576: DISABLE
5577: LD_INT 0
5579: PPUSH
5580: PPUSH
5581: PPUSH
5582: PPUSH
// begin enable ;
5583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5584: LD_ADDR_VAR 0 2
5588: PUSH
5589: LD_INT 22
5591: PUSH
5592: LD_INT 1
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: LD_INT 25
5601: PUSH
5602: LD_INT 2
5604: PUSH
5605: EMPTY
5606: LIST
5607: LIST
5608: PUSH
5609: LD_INT 24
5611: PUSH
5612: LD_INT 1000
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: LIST
5623: PPUSH
5624: CALL_OW 69
5628: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5629: LD_ADDR_VAR 0 3
5633: PUSH
5634: LD_INT 22
5636: PUSH
5637: LD_INT 1
5639: PUSH
5640: EMPTY
5641: LIST
5642: LIST
5643: PUSH
5644: LD_INT 25
5646: PUSH
5647: LD_INT 2
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: PUSH
5654: LD_INT 3
5656: PUSH
5657: LD_INT 24
5659: PUSH
5660: LD_INT 750
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: LIST
5675: PPUSH
5676: CALL_OW 69
5680: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5681: LD_ADDR_VAR 0 4
5685: PUSH
5686: LD_INT 9
5688: PPUSH
5689: LD_INT 22
5691: PUSH
5692: LD_INT 1
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 21
5701: PUSH
5702: LD_INT 3
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 3
5711: PUSH
5712: LD_INT 24
5714: PUSH
5715: LD_INT 1000
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: LIST
5730: PPUSH
5731: CALL_OW 70
5735: PUSH
5736: LD_INT 1
5738: DIFF
5739: ST_TO_ADDR
// if not tmp and not tmp2 then
5740: LD_VAR 0 2
5744: NOT
5745: PUSH
5746: LD_VAR 0 3
5750: NOT
5751: AND
5752: IFFALSE 5756
// exit ;
5754: GO 5983
// if tmp and b then
5756: LD_VAR 0 2
5760: PUSH
5761: LD_VAR 0 4
5765: AND
5766: IFFALSE 5896
// for i in tmp do
5768: LD_ADDR_VAR 0 1
5772: PUSH
5773: LD_VAR 0 2
5777: PUSH
5778: FOR_IN
5779: IFFALSE 5894
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5781: LD_VAR 0 1
5785: PPUSH
5786: CALL_OW 110
5790: PUSH
5791: LD_INT 1
5793: EQUAL
5794: PUSH
5795: LD_VAR 0 1
5799: PPUSH
5800: CALL_OW 256
5804: PUSH
5805: LD_INT 1000
5807: LESS
5808: AND
5809: IFFALSE 5815
// continue else
5811: GO 5778
5813: GO 5842
// if GetTag ( i ) = 1 then
5815: LD_VAR 0 1
5819: PPUSH
5820: CALL_OW 110
5824: PUSH
5825: LD_INT 1
5827: EQUAL
5828: IFFALSE 5842
// SetTag ( i , 0 ) ;
5830: LD_VAR 0 1
5834: PPUSH
5835: LD_INT 0
5837: PPUSH
5838: CALL_OW 109
// if IsInUnit ( i ) then
5842: LD_VAR 0 1
5846: PPUSH
5847: CALL_OW 310
5851: IFFALSE 5862
// ComExitBuilding ( i ) ;
5853: LD_VAR 0 1
5857: PPUSH
5858: CALL_OW 122
// if not HasTask ( i ) then
5862: LD_VAR 0 1
5866: PPUSH
5867: CALL_OW 314
5871: NOT
5872: IFFALSE 5892
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5874: LD_VAR 0 1
5878: PPUSH
5879: LD_VAR 0 4
5883: PUSH
5884: LD_INT 1
5886: ARRAY
5887: PPUSH
5888: CALL_OW 190
// end ;
5892: GO 5778
5894: POP
5895: POP
// if tmp2 then
5896: LD_VAR 0 3
5900: IFFALSE 5983
// for i in tmp2 do
5902: LD_ADDR_VAR 0 1
5906: PUSH
5907: LD_VAR 0 3
5911: PUSH
5912: FOR_IN
5913: IFFALSE 5981
// begin if not GetTag ( i ) = 1 then
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 110
5924: PUSH
5925: LD_INT 1
5927: EQUAL
5928: NOT
5929: IFFALSE 5943
// SetTag ( i , 1 ) ;
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5943: LD_VAR 0 1
5947: PPUSH
5948: LD_INT 88
5950: PPUSH
5951: LD_INT 75
5953: PPUSH
5954: CALL_OW 297
5958: PUSH
5959: LD_INT 6
5961: GREATER
5962: IFFALSE 5979
// ComMoveXY ( i , 88 , 75 ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_INT 88
5971: PPUSH
5972: LD_INT 75
5974: PPUSH
5975: CALL_OW 111
// end ;
5979: GO 5912
5981: POP
5982: POP
// end ;
5983: PPOPN 4
5985: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5986: LD_EXP 7
5990: NOT
5991: PUSH
5992: LD_EXP 9
5996: AND
5997: PUSH
5998: LD_INT 9
6000: PPUSH
6001: LD_INT 22
6003: PUSH
6004: LD_INT 1
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: LD_INT 21
6013: PUSH
6014: LD_INT 1
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 3
6023: PUSH
6024: LD_INT 24
6026: PUSH
6027: LD_INT 1000
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: PUSH
6038: EMPTY
6039: LIST
6040: LIST
6041: LIST
6042: PPUSH
6043: CALL_OW 70
6047: AND
6048: IFFALSE 6221
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
6056: PPUSH
6057: PPUSH
// begin enable ;
6058: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 25
6076: PUSH
6077: LD_INT 4
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 69
6092: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6093: LD_ADDR_VAR 0 3
6097: PUSH
6098: LD_INT 9
6100: PPUSH
6101: LD_INT 22
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 21
6113: PUSH
6114: LD_INT 1
6116: PUSH
6117: EMPTY
6118: LIST
6119: LIST
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: LD_INT 24
6126: PUSH
6127: LD_INT 1000
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 70
6147: ST_TO_ADDR
// if not sci or not tmp then
6148: LD_VAR 0 2
6152: NOT
6153: PUSH
6154: LD_VAR 0 3
6158: NOT
6159: OR
6160: IFFALSE 6164
// exit ;
6162: GO 6221
// for i in sci do
6164: LD_ADDR_VAR 0 1
6168: PUSH
6169: LD_VAR 0 2
6173: PUSH
6174: FOR_IN
6175: IFFALSE 6219
// if IsInUnit ( i ) then
6177: LD_VAR 0 1
6181: PPUSH
6182: CALL_OW 310
6186: IFFALSE 6199
// ComExitBuilding ( i ) else
6188: LD_VAR 0 1
6192: PPUSH
6193: CALL_OW 122
6197: GO 6217
// ComHeal ( i , tmp [ 1 ] ) ;
6199: LD_VAR 0 1
6203: PPUSH
6204: LD_VAR 0 3
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: CALL_OW 128
6217: GO 6174
6219: POP
6220: POP
// end ;
6221: PPOPN 3
6223: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6224: LD_EXP 7
6228: NOT
6229: PUSH
6230: LD_EXP 9
6234: AND
6235: PUSH
6236: LD_INT 1
6238: PPUSH
6239: CALL_OW 302
6243: AND
6244: PUSH
6245: LD_INT 9
6247: PPUSH
6248: LD_INT 22
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 21
6260: PUSH
6261: LD_INT 1
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 3
6270: PUSH
6271: LD_INT 24
6273: PUSH
6274: LD_INT 1000
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PUSH
6285: EMPTY
6286: LIST
6287: LIST
6288: LIST
6289: PPUSH
6290: CALL_OW 70
6294: NOT
6295: AND
6296: PUSH
6297: LD_INT 22
6299: PUSH
6300: LD_INT 1
6302: PUSH
6303: EMPTY
6304: LIST
6305: LIST
6306: PUSH
6307: LD_INT 25
6309: PUSH
6310: LD_INT 4
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 56
6319: PUSH
6320: EMPTY
6321: LIST
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: PPUSH
6328: CALL_OW 69
6332: AND
6333: IFFALSE 6426
6335: GO 6337
6337: DISABLE
6338: LD_INT 0
6340: PPUSH
// begin enable ;
6341: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6342: LD_ADDR_VAR 0 1
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_INT 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 25
6359: PUSH
6360: LD_INT 4
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 56
6369: PUSH
6370: EMPTY
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: LIST
6377: PPUSH
6378: CALL_OW 69
6382: PUSH
6383: FOR_IN
6384: IFFALSE 6424
// if not GetTag ( i ) and not HasTask ( i ) then
6386: LD_VAR 0 1
6390: PPUSH
6391: CALL_OW 110
6395: NOT
6396: PUSH
6397: LD_VAR 0 1
6401: PPUSH
6402: CALL_OW 314
6406: NOT
6407: AND
6408: IFFALSE 6422
// ComEnterUnit ( i , us_lab ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1
6417: PPUSH
6418: CALL_OW 120
6422: GO 6383
6424: POP
6425: POP
// end ;
6426: PPOPN 1
6428: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6429: LD_EXP 7
6433: NOT
6434: PUSH
6435: LD_INT 9
6437: PPUSH
6438: LD_INT 22
6440: PUSH
6441: LD_INT 1
6443: PUSH
6444: EMPTY
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 21
6450: PUSH
6451: LD_INT 3
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 3
6460: PUSH
6461: LD_INT 24
6463: PUSH
6464: LD_INT 1000
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: LIST
6479: PPUSH
6480: CALL_OW 70
6484: NOT
6485: AND
6486: PUSH
6487: LD_INT 22
6489: PUSH
6490: LD_INT 1
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PUSH
6497: LD_INT 25
6499: PUSH
6500: LD_INT 2
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: PUSH
6507: LD_INT 56
6509: PUSH
6510: EMPTY
6511: LIST
6512: PUSH
6513: EMPTY
6514: LIST
6515: LIST
6516: LIST
6517: PPUSH
6518: CALL_OW 69
6522: AND
6523: IFFALSE 6616
6525: GO 6527
6527: DISABLE
6528: LD_INT 0
6530: PPUSH
// begin enable ;
6531: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6532: LD_ADDR_VAR 0 1
6536: PUSH
6537: LD_INT 22
6539: PUSH
6540: LD_INT 1
6542: PUSH
6543: EMPTY
6544: LIST
6545: LIST
6546: PUSH
6547: LD_INT 25
6549: PUSH
6550: LD_INT 2
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 56
6559: PUSH
6560: EMPTY
6561: LIST
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: LIST
6567: PPUSH
6568: CALL_OW 69
6572: PUSH
6573: FOR_IN
6574: IFFALSE 6614
// if not HasTask ( i ) and not GetTag ( i ) then
6576: LD_VAR 0 1
6580: PPUSH
6581: CALL_OW 314
6585: NOT
6586: PUSH
6587: LD_VAR 0 1
6591: PPUSH
6592: CALL_OW 110
6596: NOT
6597: AND
6598: IFFALSE 6612
// ComEnterUnit ( i , us_depot ) ;
6600: LD_VAR 0 1
6604: PPUSH
6605: LD_INT 5
6607: PPUSH
6608: CALL_OW 120
6612: GO 6573
6614: POP
6615: POP
// end ;
6616: PPOPN 1
6618: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6619: LD_EXP 9
6623: PUSH
6624: LD_INT 0
6626: LESSEQUAL
6627: PUSH
6628: LD_EXP 18
6632: PPUSH
6633: CALL_OW 301
6637: OR
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_INT 1
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: PUSH
6649: LD_INT 25
6651: PUSH
6652: LD_INT 2
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PPUSH
6663: CALL_OW 69
6667: AND
6668: IFFALSE 6709
6670: GO 6672
6672: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6673: LD_INT 22
6675: PUSH
6676: LD_INT 1
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 25
6685: PUSH
6686: LD_INT 2
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PPUSH
6697: CALL_OW 69
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: CALL_OW 167
6709: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6710: LD_EXP 7
6714: NOT
6715: PUSH
6716: LD_INT 7
6718: PPUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 7
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 70
6733: AND
6734: IFFALSE 6825
6736: GO 6738
6738: DISABLE
6739: LD_INT 0
6741: PPUSH
// begin wait ( 0 0$2 ) ;
6742: LD_INT 70
6744: PPUSH
6745: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6749: LD_ADDR_VAR 0 1
6753: PUSH
6754: LD_INT 22
6756: PUSH
6757: LD_INT 1
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 25
6766: PUSH
6767: LD_INT 1
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PPUSH
6778: CALL_OW 69
6782: PUSH
6783: FOR_IN
6784: IFFALSE 6823
// begin if IsInUnit ( i ) then
6786: LD_VAR 0 1
6790: PPUSH
6791: CALL_OW 310
6795: IFFALSE 6806
// ComExitBuilding ( i ) ;
6797: LD_VAR 0 1
6801: PPUSH
6802: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6806: LD_VAR 0 1
6810: PPUSH
6811: LD_INT 92
6813: PPUSH
6814: LD_INT 78
6816: PPUSH
6817: CALL_OW 174
// end ;
6821: GO 6783
6823: POP
6824: POP
// end ; end_of_file
6825: PPOPN 1
6827: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6828: LD_VAR 0 1
6832: PPUSH
6833: LD_VAR 0 2
6837: PPUSH
6838: LD_VAR 0 3
6842: PPUSH
6843: CALL 1579 0 3
6847: PPOPN 3
6849: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6850: LD_EXP 14
6854: PPUSH
6855: CALL_OW 257
6859: PUSH
6860: LD_INT 4
6862: EQUAL
6863: PUSH
6864: LD_EXP 15
6868: PPUSH
6869: CALL_OW 257
6873: PUSH
6874: LD_INT 4
6876: EQUAL
6877: OR
6878: PUSH
6879: LD_INT 22
6881: PUSH
6882: LD_INT 7
6884: PUSH
6885: EMPTY
6886: LIST
6887: LIST
6888: PUSH
6889: LD_INT 21
6891: PUSH
6892: LD_INT 3
6894: PUSH
6895: EMPTY
6896: LIST
6897: LIST
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PPUSH
6903: CALL_OW 69
6907: OR
6908: IFFALSE 6912
// exit ;
6910: GO 6950
// if un = JMM then
6912: LD_VAR 0 1
6916: PUSH
6917: LD_EXP 14
6921: EQUAL
6922: IFFALSE 6931
// YouLost ( JMM ) ;
6924: LD_STRING JMM
6926: PPUSH
6927: CALL_OW 104
// if un = Burlak then
6931: LD_VAR 0 1
6935: PUSH
6936: LD_EXP 15
6940: EQUAL
6941: IFFALSE 6950
// YouLost ( Burlak ) ;
6943: LD_STRING Burlak
6945: PPUSH
6946: CALL_OW 104
// end ;
6950: PPOPN 1
6952: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6953: LD_VAR 0 1
6957: PPUSH
6958: CALL 23116 0 1
// if un = JMM then
6962: LD_VAR 0 1
6966: PUSH
6967: LD_EXP 14
6971: EQUAL
6972: IFFALSE 6981
// YouLost ( JMM ) ;
6974: LD_STRING JMM
6976: PPUSH
6977: CALL_OW 104
// if un = Burlak then
6981: LD_VAR 0 1
6985: PUSH
6986: LD_EXP 15
6990: EQUAL
6991: IFFALSE 7000
// YouLost ( Burlak ) ;
6993: LD_STRING Burlak
6995: PPUSH
6996: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7000: LD_VAR 0 1
7004: PUSH
7005: LD_INT 21
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 23
7017: PUSH
7018: LD_INT 1
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: PUSH
7025: EMPTY
7026: LIST
7027: LIST
7028: PPUSH
7029: CALL_OW 69
7033: IN
7034: IFFALSE 7050
// killCounter := killCounter + 1 ;
7036: LD_ADDR_EXP 12
7040: PUSH
7041: LD_EXP 12
7045: PUSH
7046: LD_INT 1
7048: PLUS
7049: ST_TO_ADDR
// end ;
7050: PPOPN 1
7052: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7053: LD_VAR 0 2
7057: PUSH
7058: LD_INT 7
7060: EQUAL
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: LD_INT 2
7069: PUSH
7070: LD_INT 30
7072: PUSH
7073: LD_INT 31
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: PUSH
7080: LD_INT 30
7082: PUSH
7083: LD_INT 32
7085: PUSH
7086: EMPTY
7087: LIST
7088: LIST
7089: PUSH
7090: LD_INT 30
7092: PUSH
7093: LD_INT 33
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: EMPTY
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: PPUSH
7106: CALL_OW 69
7110: IN
7111: AND
7112: IFFALSE 7128
// bunkerCounter := bunkerCounter + 1 ;
7114: LD_ADDR_EXP 13
7118: PUSH
7119: LD_EXP 13
7123: PUSH
7124: LD_INT 1
7126: PLUS
7127: ST_TO_ADDR
// end ;
7128: PPOPN 3
7130: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7131: LD_VAR 0 1
7135: PPUSH
7136: CALL_OW 255
7140: PUSH
7141: LD_INT 7
7143: EQUAL
7144: IFFALSE 7154
// artifactPickedUp := true ;
7146: LD_ADDR_EXP 6
7150: PUSH
7151: LD_INT 1
7153: ST_TO_ADDR
// end ;
7154: PPOPN 2
7156: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7157: LD_ADDR_EXP 6
7161: PUSH
7162: LD_INT 0
7164: ST_TO_ADDR
7165: PPOPN 2
7167: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7168: LD_VAR 0 1
7172: PPUSH
7173: LD_VAR 0 2
7177: PPUSH
7178: CALL 23236 0 2
// if GetSide ( vehicle ) <> 1 then
7182: LD_VAR 0 1
7186: PPUSH
7187: CALL_OW 255
7191: PUSH
7192: LD_INT 1
7194: NONEQUAL
7195: IFFALSE 7199
// exit ;
7197: GO 7246
// wait ( 0 0$5 ) ;
7199: LD_INT 175
7201: PPUSH
7202: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7206: LD_VAR 0 1
7210: PPUSH
7211: CALL_OW 263
7215: PUSH
7216: LD_INT 2
7218: EQUAL
7219: IFFALSE 7230
// Connect ( vehicle ) ;
7221: LD_VAR 0 1
7225: PPUSH
7226: CALL 35336 0 1
// vehGuard := vehGuard ^ vehicle ;
7230: LD_ADDR_EXP 23
7234: PUSH
7235: LD_EXP 23
7239: PUSH
7240: LD_VAR 0 1
7244: ADD
7245: ST_TO_ADDR
// end ;
7246: PPOPN 2
7248: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_INT 1
7256: EQUAL
7257: PUSH
7258: LD_EXP 7
7262: NOT
7263: AND
7264: IFFALSE 7299
// begin planCaptured := true ;
7266: LD_ADDR_EXP 7
7270: PUSH
7271: LD_INT 1
7273: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7274: LD_STRING MEnd
7276: PPUSH
7277: CALL_OW 337
// canEnd := true ;
7281: LD_ADDR_EXP 10
7285: PUSH
7286: LD_INT 1
7288: ST_TO_ADDR
// missionTime := tick ;
7289: LD_ADDR_EXP 11
7293: PUSH
7294: LD_OWVAR 1
7298: ST_TO_ADDR
// end ; end ;
7299: PPOPN 3
7301: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL 23220 0 1
// end ; end_of_file end_of_file
7311: PPOPN 1
7313: END
// export globalGameSaveCounter ; every 0 0$1 do
7314: GO 7316
7316: DISABLE
// begin enable ;
7317: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7318: LD_STRING updateTimer(
7320: PUSH
7321: LD_OWVAR 1
7325: STR
7326: PUSH
7327: LD_STRING );
7329: STR
7330: PPUSH
7331: CALL_OW 559
// end ;
7335: END
// every 0 0$1 do
7336: GO 7338
7338: DISABLE
// begin globalGameSaveCounter := 0 ;
7339: LD_ADDR_EXP 24
7343: PUSH
7344: LD_INT 0
7346: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7347: LD_STRING setGameSaveCounter(0)
7349: PPUSH
7350: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7354: LD_STRING initStreamRollete();
7356: PPUSH
7357: CALL_OW 559
// InitStreamMode ;
7361: CALL 8687 0 0
// DefineStreamItems ( false ) ;
7365: LD_INT 0
7367: PPUSH
7368: CALL 9151 0 1
// end ;
7372: END
// export function SOS_MapStart ( ) ; begin
7373: LD_INT 0
7375: PPUSH
// if streamModeActive then
7376: LD_EXP 25
7380: IFFALSE 7389
// DefineStreamItems ( true ) ;
7382: LD_INT 1
7384: PPUSH
7385: CALL 9151 0 1
// UpdateLuaVariables ( ) ;
7389: CALL 7406 0 0
// UpdateFactoryWaypoints ( ) ;
7393: CALL 22020 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7397: CALL 22277 0 0
// end ;
7401: LD_VAR 0 1
7405: RET
// function UpdateLuaVariables ( ) ; begin
7406: LD_INT 0
7408: PPUSH
// if globalGameSaveCounter then
7409: LD_EXP 24
7413: IFFALSE 7447
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7415: LD_ADDR_EXP 24
7419: PUSH
7420: LD_EXP 24
7424: PPUSH
7425: CALL 66058 0 1
7429: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7430: LD_STRING setGameSaveCounter(
7432: PUSH
7433: LD_EXP 24
7437: STR
7438: PUSH
7439: LD_STRING )
7441: STR
7442: PPUSH
7443: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7447: LD_STRING setGameDifficulty(
7449: PUSH
7450: LD_OWVAR 67
7454: STR
7455: PUSH
7456: LD_STRING )
7458: STR
7459: PPUSH
7460: CALL_OW 559
// end ;
7464: LD_VAR 0 1
7468: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7469: LD_INT 0
7471: PPUSH
// if p2 = stream_mode then
7472: LD_VAR 0 2
7476: PUSH
7477: LD_INT 100
7479: EQUAL
7480: IFFALSE 8483
// begin if not StreamModeActive then
7482: LD_EXP 25
7486: NOT
7487: IFFALSE 7497
// StreamModeActive := true ;
7489: LD_ADDR_EXP 25
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 0 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 0
7504: EQUAL
7505: IFFALSE 7511
// InitStreamMode ;
7507: CALL 8687 0 0
// if p3 = 1 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 1
7518: EQUAL
7519: IFFALSE 7529
// sRocket := true ;
7521: LD_ADDR_EXP 30
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 2 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 2
7536: EQUAL
7537: IFFALSE 7547
// sSpeed := true ;
7539: LD_ADDR_EXP 29
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 3 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 3
7554: EQUAL
7555: IFFALSE 7565
// sEngine := true ;
7557: LD_ADDR_EXP 31
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 4 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 4
7572: EQUAL
7573: IFFALSE 7583
// sSpec := true ;
7575: LD_ADDR_EXP 28
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 5 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 5
7590: EQUAL
7591: IFFALSE 7601
// sLevel := true ;
7593: LD_ADDR_EXP 32
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 6 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 6
7608: EQUAL
7609: IFFALSE 7619
// sArmoury := true ;
7611: LD_ADDR_EXP 33
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 7 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 7
7626: EQUAL
7627: IFFALSE 7637
// sRadar := true ;
7629: LD_ADDR_EXP 34
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 8 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 8
7644: EQUAL
7645: IFFALSE 7655
// sBunker := true ;
7647: LD_ADDR_EXP 35
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 9 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 9
7662: EQUAL
7663: IFFALSE 7673
// sHack := true ;
7665: LD_ADDR_EXP 36
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 10 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 10
7680: EQUAL
7681: IFFALSE 7691
// sFire := true ;
7683: LD_ADDR_EXP 37
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 11 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 11
7698: EQUAL
7699: IFFALSE 7709
// sRefresh := true ;
7701: LD_ADDR_EXP 38
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 12 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 12
7716: EQUAL
7717: IFFALSE 7727
// sExp := true ;
7719: LD_ADDR_EXP 39
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 13 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 13
7734: EQUAL
7735: IFFALSE 7745
// sDepot := true ;
7737: LD_ADDR_EXP 40
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 14 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 14
7752: EQUAL
7753: IFFALSE 7763
// sFlag := true ;
7755: LD_ADDR_EXP 41
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 15 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 15
7770: EQUAL
7771: IFFALSE 7781
// sKamikadze := true ;
7773: LD_ADDR_EXP 49
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 16 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 16
7788: EQUAL
7789: IFFALSE 7799
// sTroll := true ;
7791: LD_ADDR_EXP 50
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 17 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 17
7806: EQUAL
7807: IFFALSE 7817
// sSlow := true ;
7809: LD_ADDR_EXP 51
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 18 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 18
7824: EQUAL
7825: IFFALSE 7835
// sLack := true ;
7827: LD_ADDR_EXP 52
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 19 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 19
7842: EQUAL
7843: IFFALSE 7853
// sTank := true ;
7845: LD_ADDR_EXP 54
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 20 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 20
7860: EQUAL
7861: IFFALSE 7871
// sRemote := true ;
7863: LD_ADDR_EXP 55
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 21 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 21
7878: EQUAL
7879: IFFALSE 7889
// sPowell := true ;
7881: LD_ADDR_EXP 56
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 22 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 22
7896: EQUAL
7897: IFFALSE 7907
// sTeleport := true ;
7899: LD_ADDR_EXP 59
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 23 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 23
7914: EQUAL
7915: IFFALSE 7925
// sOilTower := true ;
7917: LD_ADDR_EXP 61
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 24 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 24
7932: EQUAL
7933: IFFALSE 7943
// sShovel := true ;
7935: LD_ADDR_EXP 62
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 25 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 25
7950: EQUAL
7951: IFFALSE 7961
// sSheik := true ;
7953: LD_ADDR_EXP 63
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 26 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 26
7968: EQUAL
7969: IFFALSE 7979
// sEarthquake := true ;
7971: LD_ADDR_EXP 65
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 27 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 27
7986: EQUAL
7987: IFFALSE 7997
// sAI := true ;
7989: LD_ADDR_EXP 66
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 28 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 28
8004: EQUAL
8005: IFFALSE 8015
// sCargo := true ;
8007: LD_ADDR_EXP 69
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 29 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 29
8022: EQUAL
8023: IFFALSE 8033
// sDLaser := true ;
8025: LD_ADDR_EXP 70
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 30 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 30
8040: EQUAL
8041: IFFALSE 8051
// sExchange := true ;
8043: LD_ADDR_EXP 71
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 31 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 31
8058: EQUAL
8059: IFFALSE 8069
// sFac := true ;
8061: LD_ADDR_EXP 72
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 32 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 32
8076: EQUAL
8077: IFFALSE 8087
// sPower := true ;
8079: LD_ADDR_EXP 73
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 33 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 33
8094: EQUAL
8095: IFFALSE 8105
// sRandom := true ;
8097: LD_ADDR_EXP 74
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 34 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 34
8112: EQUAL
8113: IFFALSE 8123
// sShield := true ;
8115: LD_ADDR_EXP 75
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 35 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 35
8130: EQUAL
8131: IFFALSE 8141
// sTime := true ;
8133: LD_ADDR_EXP 76
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 36 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 36
8148: EQUAL
8149: IFFALSE 8159
// sTools := true ;
8151: LD_ADDR_EXP 77
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 101 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 101
8166: EQUAL
8167: IFFALSE 8177
// sSold := true ;
8169: LD_ADDR_EXP 42
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 102 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 102
8184: EQUAL
8185: IFFALSE 8195
// sDiff := true ;
8187: LD_ADDR_EXP 43
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 103 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 103
8202: EQUAL
8203: IFFALSE 8213
// sFog := true ;
8205: LD_ADDR_EXP 46
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 104 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 104
8220: EQUAL
8221: IFFALSE 8231
// sReset := true ;
8223: LD_ADDR_EXP 47
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 105 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 105
8238: EQUAL
8239: IFFALSE 8249
// sSun := true ;
8241: LD_ADDR_EXP 48
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 106 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 106
8256: EQUAL
8257: IFFALSE 8267
// sTiger := true ;
8259: LD_ADDR_EXP 44
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 107 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 107
8274: EQUAL
8275: IFFALSE 8285
// sBomb := true ;
8277: LD_ADDR_EXP 45
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 108 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 108
8292: EQUAL
8293: IFFALSE 8303
// sWound := true ;
8295: LD_ADDR_EXP 53
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 109 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 109
8310: EQUAL
8311: IFFALSE 8321
// sBetray := true ;
8313: LD_ADDR_EXP 57
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 110 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 110
8328: EQUAL
8329: IFFALSE 8339
// sContamin := true ;
8331: LD_ADDR_EXP 58
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 111 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 111
8346: EQUAL
8347: IFFALSE 8357
// sOil := true ;
8349: LD_ADDR_EXP 60
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 112 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 112
8364: EQUAL
8365: IFFALSE 8375
// sStu := true ;
8367: LD_ADDR_EXP 64
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 113 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 113
8382: EQUAL
8383: IFFALSE 8393
// sBazooka := true ;
8385: LD_ADDR_EXP 67
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if p3 = 114 then
8393: LD_VAR 0 3
8397: PUSH
8398: LD_INT 114
8400: EQUAL
8401: IFFALSE 8411
// sMortar := true ;
8403: LD_ADDR_EXP 68
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// if p3 = 115 then
8411: LD_VAR 0 3
8415: PUSH
8416: LD_INT 115
8418: EQUAL
8419: IFFALSE 8429
// sRanger := true ;
8421: LD_ADDR_EXP 78
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// if p3 = 116 then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 116
8436: EQUAL
8437: IFFALSE 8447
// sComputer := true ;
8439: LD_ADDR_EXP 79
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// if p3 = 117 then
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 117
8454: EQUAL
8455: IFFALSE 8465
// s30 := true ;
8457: LD_ADDR_EXP 80
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// if p3 = 118 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 118
8472: EQUAL
8473: IFFALSE 8483
// s60 := true ;
8475: LD_ADDR_EXP 81
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// end ; if p2 = hack_mode then
8483: LD_VAR 0 2
8487: PUSH
8488: LD_INT 101
8490: EQUAL
8491: IFFALSE 8619
// begin case p3 of 1 :
8493: LD_VAR 0 3
8497: PUSH
8498: LD_INT 1
8500: DOUBLE
8501: EQUAL
8502: IFTRUE 8506
8504: GO 8513
8506: POP
// hHackUnlimitedResources ; 2 :
8507: CALL 20766 0 0
8511: GO 8619
8513: LD_INT 2
8515: DOUBLE
8516: EQUAL
8517: IFTRUE 8521
8519: GO 8528
8521: POP
// hHackSetLevel10 ; 3 :
8522: CALL 20899 0 0
8526: GO 8619
8528: LD_INT 3
8530: DOUBLE
8531: EQUAL
8532: IFTRUE 8536
8534: GO 8543
8536: POP
// hHackSetLevel10YourUnits ; 4 :
8537: CALL 20984 0 0
8541: GO 8619
8543: LD_INT 4
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8558
8551: POP
// hHackInvincible ; 5 :
8552: CALL 21432 0 0
8556: GO 8619
8558: LD_INT 5
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8573
8566: POP
// hHackInvisible ; 6 :
8567: CALL 21543 0 0
8571: GO 8619
8573: LD_INT 6
8575: DOUBLE
8576: EQUAL
8577: IFTRUE 8581
8579: GO 8588
8581: POP
// hHackChangeYourSide ; 7 :
8582: CALL 21600 0 0
8586: GO 8619
8588: LD_INT 7
8590: DOUBLE
8591: EQUAL
8592: IFTRUE 8596
8594: GO 8603
8596: POP
// hHackChangeUnitSide ; 8 :
8597: CALL 21642 0 0
8601: GO 8619
8603: LD_INT 8
8605: DOUBLE
8606: EQUAL
8607: IFTRUE 8611
8609: GO 8618
8611: POP
// hHackFog ; end ;
8612: CALL 21743 0 0
8616: GO 8619
8618: POP
// end ; if p2 = game_save_mode then
8619: LD_VAR 0 2
8623: PUSH
8624: LD_INT 102
8626: EQUAL
8627: IFFALSE 8682
// begin if p3 = 1 then
8629: LD_VAR 0 3
8633: PUSH
8634: LD_INT 1
8636: EQUAL
8637: IFFALSE 8649
// globalGameSaveCounter := p4 ;
8639: LD_ADDR_EXP 24
8643: PUSH
8644: LD_VAR 0 4
8648: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8649: LD_VAR 0 3
8653: PUSH
8654: LD_INT 2
8656: EQUAL
8657: PUSH
8658: LD_EXP 24
8662: AND
8663: IFFALSE 8682
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8665: LD_STRING setGameSaveCounter(
8667: PUSH
8668: LD_EXP 24
8672: STR
8673: PUSH
8674: LD_STRING )
8676: STR
8677: PPUSH
8678: CALL_OW 559
// end ; end ;
8682: LD_VAR 0 7
8686: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8687: LD_INT 0
8689: PPUSH
// streamModeActive := false ;
8690: LD_ADDR_EXP 25
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// normalCounter := 36 ;
8698: LD_ADDR_EXP 26
8702: PUSH
8703: LD_INT 36
8705: ST_TO_ADDR
// hardcoreCounter := 18 ;
8706: LD_ADDR_EXP 27
8710: PUSH
8711: LD_INT 18
8713: ST_TO_ADDR
// sRocket := false ;
8714: LD_ADDR_EXP 30
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sSpeed := false ;
8722: LD_ADDR_EXP 29
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sEngine := false ;
8730: LD_ADDR_EXP 31
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sSpec := false ;
8738: LD_ADDR_EXP 28
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sLevel := false ;
8746: LD_ADDR_EXP 32
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sArmoury := false ;
8754: LD_ADDR_EXP 33
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sRadar := false ;
8762: LD_ADDR_EXP 34
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sBunker := false ;
8770: LD_ADDR_EXP 35
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sHack := false ;
8778: LD_ADDR_EXP 36
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sFire := false ;
8786: LD_ADDR_EXP 37
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sRefresh := false ;
8794: LD_ADDR_EXP 38
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sExp := false ;
8802: LD_ADDR_EXP 39
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sDepot := false ;
8810: LD_ADDR_EXP 40
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sFlag := false ;
8818: LD_ADDR_EXP 41
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sKamikadze := false ;
8826: LD_ADDR_EXP 49
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// sTroll := false ;
8834: LD_ADDR_EXP 50
8838: PUSH
8839: LD_INT 0
8841: ST_TO_ADDR
// sSlow := false ;
8842: LD_ADDR_EXP 51
8846: PUSH
8847: LD_INT 0
8849: ST_TO_ADDR
// sLack := false ;
8850: LD_ADDR_EXP 52
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// sTank := false ;
8858: LD_ADDR_EXP 54
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// sRemote := false ;
8866: LD_ADDR_EXP 55
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// sPowell := false ;
8874: LD_ADDR_EXP 56
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// sTeleport := false ;
8882: LD_ADDR_EXP 59
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// sOilTower := false ;
8890: LD_ADDR_EXP 61
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// sShovel := false ;
8898: LD_ADDR_EXP 62
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// sSheik := false ;
8906: LD_ADDR_EXP 63
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// sEarthquake := false ;
8914: LD_ADDR_EXP 65
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// sAI := false ;
8922: LD_ADDR_EXP 66
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// sCargo := false ;
8930: LD_ADDR_EXP 69
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// sDLaser := false ;
8938: LD_ADDR_EXP 70
8942: PUSH
8943: LD_INT 0
8945: ST_TO_ADDR
// sExchange := false ;
8946: LD_ADDR_EXP 71
8950: PUSH
8951: LD_INT 0
8953: ST_TO_ADDR
// sFac := false ;
8954: LD_ADDR_EXP 72
8958: PUSH
8959: LD_INT 0
8961: ST_TO_ADDR
// sPower := false ;
8962: LD_ADDR_EXP 73
8966: PUSH
8967: LD_INT 0
8969: ST_TO_ADDR
// sRandom := false ;
8970: LD_ADDR_EXP 74
8974: PUSH
8975: LD_INT 0
8977: ST_TO_ADDR
// sShield := false ;
8978: LD_ADDR_EXP 75
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// sTime := false ;
8986: LD_ADDR_EXP 76
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// sTools := false ;
8994: LD_ADDR_EXP 77
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// sSold := false ;
9002: LD_ADDR_EXP 42
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// sDiff := false ;
9010: LD_ADDR_EXP 43
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// sFog := false ;
9018: LD_ADDR_EXP 46
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// sReset := false ;
9026: LD_ADDR_EXP 47
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// sSun := false ;
9034: LD_ADDR_EXP 48
9038: PUSH
9039: LD_INT 0
9041: ST_TO_ADDR
// sTiger := false ;
9042: LD_ADDR_EXP 44
9046: PUSH
9047: LD_INT 0
9049: ST_TO_ADDR
// sBomb := false ;
9050: LD_ADDR_EXP 45
9054: PUSH
9055: LD_INT 0
9057: ST_TO_ADDR
// sWound := false ;
9058: LD_ADDR_EXP 53
9062: PUSH
9063: LD_INT 0
9065: ST_TO_ADDR
// sBetray := false ;
9066: LD_ADDR_EXP 57
9070: PUSH
9071: LD_INT 0
9073: ST_TO_ADDR
// sContamin := false ;
9074: LD_ADDR_EXP 58
9078: PUSH
9079: LD_INT 0
9081: ST_TO_ADDR
// sOil := false ;
9082: LD_ADDR_EXP 60
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// sStu := false ;
9090: LD_ADDR_EXP 64
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// sBazooka := false ;
9098: LD_ADDR_EXP 67
9102: PUSH
9103: LD_INT 0
9105: ST_TO_ADDR
// sMortar := false ;
9106: LD_ADDR_EXP 68
9110: PUSH
9111: LD_INT 0
9113: ST_TO_ADDR
// sRanger := false ;
9114: LD_ADDR_EXP 78
9118: PUSH
9119: LD_INT 0
9121: ST_TO_ADDR
// sComputer := false ;
9122: LD_ADDR_EXP 79
9126: PUSH
9127: LD_INT 0
9129: ST_TO_ADDR
// s30 := false ;
9130: LD_ADDR_EXP 80
9134: PUSH
9135: LD_INT 0
9137: ST_TO_ADDR
// s60 := false ;
9138: LD_ADDR_EXP 81
9142: PUSH
9143: LD_INT 0
9145: ST_TO_ADDR
// end ;
9146: LD_VAR 0 1
9150: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9151: LD_INT 0
9153: PPUSH
9154: PPUSH
9155: PPUSH
9156: PPUSH
9157: PPUSH
9158: PPUSH
9159: PPUSH
// result := [ ] ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: EMPTY
9166: ST_TO_ADDR
// if campaign_id = 1 then
9167: LD_OWVAR 69
9171: PUSH
9172: LD_INT 1
9174: EQUAL
9175: IFFALSE 12341
// begin case mission_number of 1 :
9177: LD_OWVAR 70
9181: PUSH
9182: LD_INT 1
9184: DOUBLE
9185: EQUAL
9186: IFTRUE 9190
9188: GO 9266
9190: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9191: LD_ADDR_VAR 0 2
9195: PUSH
9196: LD_INT 2
9198: PUSH
9199: LD_INT 4
9201: PUSH
9202: LD_INT 11
9204: PUSH
9205: LD_INT 12
9207: PUSH
9208: LD_INT 15
9210: PUSH
9211: LD_INT 16
9213: PUSH
9214: LD_INT 22
9216: PUSH
9217: LD_INT 23
9219: PUSH
9220: LD_INT 26
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: PUSH
9234: LD_INT 101
9236: PUSH
9237: LD_INT 102
9239: PUSH
9240: LD_INT 106
9242: PUSH
9243: LD_INT 116
9245: PUSH
9246: LD_INT 117
9248: PUSH
9249: LD_INT 118
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: ST_TO_ADDR
9264: GO 12339
9266: LD_INT 2
9268: DOUBLE
9269: EQUAL
9270: IFTRUE 9274
9272: GO 9358
9274: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9275: LD_ADDR_VAR 0 2
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: LD_INT 4
9285: PUSH
9286: LD_INT 11
9288: PUSH
9289: LD_INT 12
9291: PUSH
9292: LD_INT 15
9294: PUSH
9295: LD_INT 16
9297: PUSH
9298: LD_INT 22
9300: PUSH
9301: LD_INT 23
9303: PUSH
9304: LD_INT 26
9306: PUSH
9307: EMPTY
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 101
9320: PUSH
9321: LD_INT 102
9323: PUSH
9324: LD_INT 105
9326: PUSH
9327: LD_INT 106
9329: PUSH
9330: LD_INT 108
9332: PUSH
9333: LD_INT 116
9335: PUSH
9336: LD_INT 117
9338: PUSH
9339: LD_INT 118
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: ST_TO_ADDR
9356: GO 12339
9358: LD_INT 3
9360: DOUBLE
9361: EQUAL
9362: IFTRUE 9366
9364: GO 9454
9366: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9367: LD_ADDR_VAR 0 2
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: LD_INT 4
9377: PUSH
9378: LD_INT 5
9380: PUSH
9381: LD_INT 11
9383: PUSH
9384: LD_INT 12
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: LD_INT 16
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 26
9398: PUSH
9399: LD_INT 36
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 101
9416: PUSH
9417: LD_INT 102
9419: PUSH
9420: LD_INT 105
9422: PUSH
9423: LD_INT 106
9425: PUSH
9426: LD_INT 108
9428: PUSH
9429: LD_INT 116
9431: PUSH
9432: LD_INT 117
9434: PUSH
9435: LD_INT 118
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: ST_TO_ADDR
9452: GO 12339
9454: LD_INT 4
9456: DOUBLE
9457: EQUAL
9458: IFTRUE 9462
9460: GO 9558
9462: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: LD_INT 2
9470: PUSH
9471: LD_INT 4
9473: PUSH
9474: LD_INT 5
9476: PUSH
9477: LD_INT 8
9479: PUSH
9480: LD_INT 11
9482: PUSH
9483: LD_INT 12
9485: PUSH
9486: LD_INT 15
9488: PUSH
9489: LD_INT 16
9491: PUSH
9492: LD_INT 22
9494: PUSH
9495: LD_INT 23
9497: PUSH
9498: LD_INT 26
9500: PUSH
9501: LD_INT 36
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 101
9520: PUSH
9521: LD_INT 102
9523: PUSH
9524: LD_INT 105
9526: PUSH
9527: LD_INT 106
9529: PUSH
9530: LD_INT 108
9532: PUSH
9533: LD_INT 116
9535: PUSH
9536: LD_INT 117
9538: PUSH
9539: LD_INT 118
9541: PUSH
9542: EMPTY
9543: LIST
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: ST_TO_ADDR
9556: GO 12339
9558: LD_INT 5
9560: DOUBLE
9561: EQUAL
9562: IFTRUE 9566
9564: GO 9678
9566: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9567: LD_ADDR_VAR 0 2
9571: PUSH
9572: LD_INT 2
9574: PUSH
9575: LD_INT 4
9577: PUSH
9578: LD_INT 5
9580: PUSH
9581: LD_INT 6
9583: PUSH
9584: LD_INT 8
9586: PUSH
9587: LD_INT 11
9589: PUSH
9590: LD_INT 12
9592: PUSH
9593: LD_INT 15
9595: PUSH
9596: LD_INT 16
9598: PUSH
9599: LD_INT 22
9601: PUSH
9602: LD_INT 23
9604: PUSH
9605: LD_INT 25
9607: PUSH
9608: LD_INT 26
9610: PUSH
9611: LD_INT 36
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 101
9632: PUSH
9633: LD_INT 102
9635: PUSH
9636: LD_INT 105
9638: PUSH
9639: LD_INT 106
9641: PUSH
9642: LD_INT 108
9644: PUSH
9645: LD_INT 109
9647: PUSH
9648: LD_INT 112
9650: PUSH
9651: LD_INT 116
9653: PUSH
9654: LD_INT 117
9656: PUSH
9657: LD_INT 118
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: ST_TO_ADDR
9676: GO 12339
9678: LD_INT 6
9680: DOUBLE
9681: EQUAL
9682: IFTRUE 9686
9684: GO 9818
9686: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9687: LD_ADDR_VAR 0 2
9691: PUSH
9692: LD_INT 2
9694: PUSH
9695: LD_INT 4
9697: PUSH
9698: LD_INT 5
9700: PUSH
9701: LD_INT 6
9703: PUSH
9704: LD_INT 8
9706: PUSH
9707: LD_INT 11
9709: PUSH
9710: LD_INT 12
9712: PUSH
9713: LD_INT 15
9715: PUSH
9716: LD_INT 16
9718: PUSH
9719: LD_INT 20
9721: PUSH
9722: LD_INT 21
9724: PUSH
9725: LD_INT 22
9727: PUSH
9728: LD_INT 23
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 26
9736: PUSH
9737: LD_INT 30
9739: PUSH
9740: LD_INT 31
9742: PUSH
9743: LD_INT 32
9745: PUSH
9746: LD_INT 36
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: PUSH
9770: LD_INT 101
9772: PUSH
9773: LD_INT 102
9775: PUSH
9776: LD_INT 105
9778: PUSH
9779: LD_INT 106
9781: PUSH
9782: LD_INT 108
9784: PUSH
9785: LD_INT 109
9787: PUSH
9788: LD_INT 112
9790: PUSH
9791: LD_INT 116
9793: PUSH
9794: LD_INT 117
9796: PUSH
9797: LD_INT 118
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: ST_TO_ADDR
9816: GO 12339
9818: LD_INT 7
9820: DOUBLE
9821: EQUAL
9822: IFTRUE 9826
9824: GO 9938
9826: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9827: LD_ADDR_VAR 0 2
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: LD_INT 4
9837: PUSH
9838: LD_INT 5
9840: PUSH
9841: LD_INT 7
9843: PUSH
9844: LD_INT 11
9846: PUSH
9847: LD_INT 12
9849: PUSH
9850: LD_INT 15
9852: PUSH
9853: LD_INT 16
9855: PUSH
9856: LD_INT 20
9858: PUSH
9859: LD_INT 21
9861: PUSH
9862: LD_INT 22
9864: PUSH
9865: LD_INT 23
9867: PUSH
9868: LD_INT 25
9870: PUSH
9871: LD_INT 26
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 101
9892: PUSH
9893: LD_INT 102
9895: PUSH
9896: LD_INT 103
9898: PUSH
9899: LD_INT 105
9901: PUSH
9902: LD_INT 106
9904: PUSH
9905: LD_INT 108
9907: PUSH
9908: LD_INT 112
9910: PUSH
9911: LD_INT 116
9913: PUSH
9914: LD_INT 117
9916: PUSH
9917: LD_INT 118
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: PUSH
9932: EMPTY
9933: LIST
9934: LIST
9935: ST_TO_ADDR
9936: GO 12339
9938: LD_INT 8
9940: DOUBLE
9941: EQUAL
9942: IFTRUE 9946
9944: GO 10086
9946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9947: LD_ADDR_VAR 0 2
9951: PUSH
9952: LD_INT 2
9954: PUSH
9955: LD_INT 4
9957: PUSH
9958: LD_INT 5
9960: PUSH
9961: LD_INT 6
9963: PUSH
9964: LD_INT 7
9966: PUSH
9967: LD_INT 8
9969: PUSH
9970: LD_INT 11
9972: PUSH
9973: LD_INT 12
9975: PUSH
9976: LD_INT 15
9978: PUSH
9979: LD_INT 16
9981: PUSH
9982: LD_INT 20
9984: PUSH
9985: LD_INT 21
9987: PUSH
9988: LD_INT 22
9990: PUSH
9991: LD_INT 23
9993: PUSH
9994: LD_INT 25
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: LD_INT 30
10002: PUSH
10003: LD_INT 31
10005: PUSH
10006: LD_INT 32
10008: PUSH
10009: LD_INT 36
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 101
10036: PUSH
10037: LD_INT 102
10039: PUSH
10040: LD_INT 103
10042: PUSH
10043: LD_INT 105
10045: PUSH
10046: LD_INT 106
10048: PUSH
10049: LD_INT 108
10051: PUSH
10052: LD_INT 109
10054: PUSH
10055: LD_INT 112
10057: PUSH
10058: LD_INT 116
10060: PUSH
10061: LD_INT 117
10063: PUSH
10064: LD_INT 118
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: PUSH
10080: EMPTY
10081: LIST
10082: LIST
10083: ST_TO_ADDR
10084: GO 12339
10086: LD_INT 9
10088: DOUBLE
10089: EQUAL
10090: IFTRUE 10094
10092: GO 10242
10094: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10095: LD_ADDR_VAR 0 2
10099: PUSH
10100: LD_INT 2
10102: PUSH
10103: LD_INT 4
10105: PUSH
10106: LD_INT 5
10108: PUSH
10109: LD_INT 6
10111: PUSH
10112: LD_INT 7
10114: PUSH
10115: LD_INT 8
10117: PUSH
10118: LD_INT 11
10120: PUSH
10121: LD_INT 12
10123: PUSH
10124: LD_INT 15
10126: PUSH
10127: LD_INT 16
10129: PUSH
10130: LD_INT 20
10132: PUSH
10133: LD_INT 21
10135: PUSH
10136: LD_INT 22
10138: PUSH
10139: LD_INT 23
10141: PUSH
10142: LD_INT 25
10144: PUSH
10145: LD_INT 26
10147: PUSH
10148: LD_INT 28
10150: PUSH
10151: LD_INT 30
10153: PUSH
10154: LD_INT 31
10156: PUSH
10157: LD_INT 32
10159: PUSH
10160: LD_INT 36
10162: PUSH
10163: EMPTY
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 101
10188: PUSH
10189: LD_INT 102
10191: PUSH
10192: LD_INT 103
10194: PUSH
10195: LD_INT 105
10197: PUSH
10198: LD_INT 106
10200: PUSH
10201: LD_INT 108
10203: PUSH
10204: LD_INT 109
10206: PUSH
10207: LD_INT 112
10209: PUSH
10210: LD_INT 114
10212: PUSH
10213: LD_INT 116
10215: PUSH
10216: LD_INT 117
10218: PUSH
10219: LD_INT 118
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: ST_TO_ADDR
10240: GO 12339
10242: LD_INT 10
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10446
10250: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 4
10261: PUSH
10262: LD_INT 5
10264: PUSH
10265: LD_INT 6
10267: PUSH
10268: LD_INT 7
10270: PUSH
10271: LD_INT 8
10273: PUSH
10274: LD_INT 9
10276: PUSH
10277: LD_INT 10
10279: PUSH
10280: LD_INT 11
10282: PUSH
10283: LD_INT 12
10285: PUSH
10286: LD_INT 13
10288: PUSH
10289: LD_INT 14
10291: PUSH
10292: LD_INT 15
10294: PUSH
10295: LD_INT 16
10297: PUSH
10298: LD_INT 17
10300: PUSH
10301: LD_INT 18
10303: PUSH
10304: LD_INT 19
10306: PUSH
10307: LD_INT 20
10309: PUSH
10310: LD_INT 21
10312: PUSH
10313: LD_INT 22
10315: PUSH
10316: LD_INT 23
10318: PUSH
10319: LD_INT 24
10321: PUSH
10322: LD_INT 25
10324: PUSH
10325: LD_INT 26
10327: PUSH
10328: LD_INT 28
10330: PUSH
10331: LD_INT 30
10333: PUSH
10334: LD_INT 31
10336: PUSH
10337: LD_INT 32
10339: PUSH
10340: LD_INT 36
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 101
10376: PUSH
10377: LD_INT 102
10379: PUSH
10380: LD_INT 103
10382: PUSH
10383: LD_INT 104
10385: PUSH
10386: LD_INT 105
10388: PUSH
10389: LD_INT 106
10391: PUSH
10392: LD_INT 107
10394: PUSH
10395: LD_INT 108
10397: PUSH
10398: LD_INT 109
10400: PUSH
10401: LD_INT 110
10403: PUSH
10404: LD_INT 111
10406: PUSH
10407: LD_INT 112
10409: PUSH
10410: LD_INT 114
10412: PUSH
10413: LD_INT 116
10415: PUSH
10416: LD_INT 117
10418: PUSH
10419: LD_INT 118
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: ST_TO_ADDR
10444: GO 12339
10446: LD_INT 11
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10658
10454: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: LD_INT 3
10465: PUSH
10466: LD_INT 4
10468: PUSH
10469: LD_INT 5
10471: PUSH
10472: LD_INT 6
10474: PUSH
10475: LD_INT 7
10477: PUSH
10478: LD_INT 8
10480: PUSH
10481: LD_INT 9
10483: PUSH
10484: LD_INT 10
10486: PUSH
10487: LD_INT 11
10489: PUSH
10490: LD_INT 12
10492: PUSH
10493: LD_INT 13
10495: PUSH
10496: LD_INT 14
10498: PUSH
10499: LD_INT 15
10501: PUSH
10502: LD_INT 16
10504: PUSH
10505: LD_INT 17
10507: PUSH
10508: LD_INT 18
10510: PUSH
10511: LD_INT 19
10513: PUSH
10514: LD_INT 20
10516: PUSH
10517: LD_INT 21
10519: PUSH
10520: LD_INT 22
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 24
10528: PUSH
10529: LD_INT 25
10531: PUSH
10532: LD_INT 26
10534: PUSH
10535: LD_INT 28
10537: PUSH
10538: LD_INT 30
10540: PUSH
10541: LD_INT 31
10543: PUSH
10544: LD_INT 32
10546: PUSH
10547: LD_INT 34
10549: PUSH
10550: LD_INT 36
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 101
10588: PUSH
10589: LD_INT 102
10591: PUSH
10592: LD_INT 103
10594: PUSH
10595: LD_INT 104
10597: PUSH
10598: LD_INT 105
10600: PUSH
10601: LD_INT 106
10603: PUSH
10604: LD_INT 107
10606: PUSH
10607: LD_INT 108
10609: PUSH
10610: LD_INT 109
10612: PUSH
10613: LD_INT 110
10615: PUSH
10616: LD_INT 111
10618: PUSH
10619: LD_INT 112
10621: PUSH
10622: LD_INT 114
10624: PUSH
10625: LD_INT 116
10627: PUSH
10628: LD_INT 117
10630: PUSH
10631: LD_INT 118
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: ST_TO_ADDR
10656: GO 12339
10658: LD_INT 12
10660: DOUBLE
10661: EQUAL
10662: IFTRUE 10666
10664: GO 10886
10666: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: LD_INT 2
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: LD_INT 4
10683: PUSH
10684: LD_INT 5
10686: PUSH
10687: LD_INT 6
10689: PUSH
10690: LD_INT 7
10692: PUSH
10693: LD_INT 8
10695: PUSH
10696: LD_INT 9
10698: PUSH
10699: LD_INT 10
10701: PUSH
10702: LD_INT 11
10704: PUSH
10705: LD_INT 12
10707: PUSH
10708: LD_INT 13
10710: PUSH
10711: LD_INT 14
10713: PUSH
10714: LD_INT 15
10716: PUSH
10717: LD_INT 16
10719: PUSH
10720: LD_INT 17
10722: PUSH
10723: LD_INT 18
10725: PUSH
10726: LD_INT 19
10728: PUSH
10729: LD_INT 20
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 22
10737: PUSH
10738: LD_INT 23
10740: PUSH
10741: LD_INT 24
10743: PUSH
10744: LD_INT 25
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 27
10752: PUSH
10753: LD_INT 28
10755: PUSH
10756: LD_INT 30
10758: PUSH
10759: LD_INT 31
10761: PUSH
10762: LD_INT 32
10764: PUSH
10765: LD_INT 33
10767: PUSH
10768: LD_INT 34
10770: PUSH
10771: LD_INT 36
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 101
10812: PUSH
10813: LD_INT 102
10815: PUSH
10816: LD_INT 103
10818: PUSH
10819: LD_INT 104
10821: PUSH
10822: LD_INT 105
10824: PUSH
10825: LD_INT 106
10827: PUSH
10828: LD_INT 107
10830: PUSH
10831: LD_INT 108
10833: PUSH
10834: LD_INT 109
10836: PUSH
10837: LD_INT 110
10839: PUSH
10840: LD_INT 111
10842: PUSH
10843: LD_INT 112
10845: PUSH
10846: LD_INT 113
10848: PUSH
10849: LD_INT 114
10851: PUSH
10852: LD_INT 116
10854: PUSH
10855: LD_INT 117
10857: PUSH
10858: LD_INT 118
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: ST_TO_ADDR
10884: GO 12339
10886: LD_INT 13
10888: DOUBLE
10889: EQUAL
10890: IFTRUE 10894
10892: GO 11102
10894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_INT 1
10902: PUSH
10903: LD_INT 2
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: LD_INT 4
10911: PUSH
10912: LD_INT 5
10914: PUSH
10915: LD_INT 8
10917: PUSH
10918: LD_INT 9
10920: PUSH
10921: LD_INT 10
10923: PUSH
10924: LD_INT 11
10926: PUSH
10927: LD_INT 12
10929: PUSH
10930: LD_INT 14
10932: PUSH
10933: LD_INT 15
10935: PUSH
10936: LD_INT 16
10938: PUSH
10939: LD_INT 17
10941: PUSH
10942: LD_INT 18
10944: PUSH
10945: LD_INT 19
10947: PUSH
10948: LD_INT 20
10950: PUSH
10951: LD_INT 21
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 23
10959: PUSH
10960: LD_INT 24
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 26
10968: PUSH
10969: LD_INT 27
10971: PUSH
10972: LD_INT 28
10974: PUSH
10975: LD_INT 30
10977: PUSH
10978: LD_INT 31
10980: PUSH
10981: LD_INT 32
10983: PUSH
10984: LD_INT 33
10986: PUSH
10987: LD_INT 34
10989: PUSH
10990: LD_INT 36
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 101
11028: PUSH
11029: LD_INT 102
11031: PUSH
11032: LD_INT 103
11034: PUSH
11035: LD_INT 104
11037: PUSH
11038: LD_INT 105
11040: PUSH
11041: LD_INT 106
11043: PUSH
11044: LD_INT 107
11046: PUSH
11047: LD_INT 108
11049: PUSH
11050: LD_INT 109
11052: PUSH
11053: LD_INT 110
11055: PUSH
11056: LD_INT 111
11058: PUSH
11059: LD_INT 112
11061: PUSH
11062: LD_INT 113
11064: PUSH
11065: LD_INT 114
11067: PUSH
11068: LD_INT 116
11070: PUSH
11071: LD_INT 117
11073: PUSH
11074: LD_INT 118
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: EMPTY
11097: LIST
11098: LIST
11099: ST_TO_ADDR
11100: GO 12339
11102: LD_INT 14
11104: DOUBLE
11105: EQUAL
11106: IFTRUE 11110
11108: GO 11334
11110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11111: LD_ADDR_VAR 0 2
11115: PUSH
11116: LD_INT 1
11118: PUSH
11119: LD_INT 2
11121: PUSH
11122: LD_INT 3
11124: PUSH
11125: LD_INT 4
11127: PUSH
11128: LD_INT 5
11130: PUSH
11131: LD_INT 6
11133: PUSH
11134: LD_INT 7
11136: PUSH
11137: LD_INT 8
11139: PUSH
11140: LD_INT 9
11142: PUSH
11143: LD_INT 10
11145: PUSH
11146: LD_INT 11
11148: PUSH
11149: LD_INT 12
11151: PUSH
11152: LD_INT 13
11154: PUSH
11155: LD_INT 14
11157: PUSH
11158: LD_INT 15
11160: PUSH
11161: LD_INT 16
11163: PUSH
11164: LD_INT 17
11166: PUSH
11167: LD_INT 18
11169: PUSH
11170: LD_INT 19
11172: PUSH
11173: LD_INT 20
11175: PUSH
11176: LD_INT 21
11178: PUSH
11179: LD_INT 22
11181: PUSH
11182: LD_INT 23
11184: PUSH
11185: LD_INT 24
11187: PUSH
11188: LD_INT 25
11190: PUSH
11191: LD_INT 26
11193: PUSH
11194: LD_INT 27
11196: PUSH
11197: LD_INT 28
11199: PUSH
11200: LD_INT 29
11202: PUSH
11203: LD_INT 30
11205: PUSH
11206: LD_INT 31
11208: PUSH
11209: LD_INT 32
11211: PUSH
11212: LD_INT 33
11214: PUSH
11215: LD_INT 34
11217: PUSH
11218: LD_INT 36
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 101
11260: PUSH
11261: LD_INT 102
11263: PUSH
11264: LD_INT 103
11266: PUSH
11267: LD_INT 104
11269: PUSH
11270: LD_INT 105
11272: PUSH
11273: LD_INT 106
11275: PUSH
11276: LD_INT 107
11278: PUSH
11279: LD_INT 108
11281: PUSH
11282: LD_INT 109
11284: PUSH
11285: LD_INT 110
11287: PUSH
11288: LD_INT 111
11290: PUSH
11291: LD_INT 112
11293: PUSH
11294: LD_INT 113
11296: PUSH
11297: LD_INT 114
11299: PUSH
11300: LD_INT 116
11302: PUSH
11303: LD_INT 117
11305: PUSH
11306: LD_INT 118
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: PUSH
11328: EMPTY
11329: LIST
11330: LIST
11331: ST_TO_ADDR
11332: GO 12339
11334: LD_INT 15
11336: DOUBLE
11337: EQUAL
11338: IFTRUE 11342
11340: GO 11566
11342: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11343: LD_ADDR_VAR 0 2
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: LD_INT 4
11359: PUSH
11360: LD_INT 5
11362: PUSH
11363: LD_INT 6
11365: PUSH
11366: LD_INT 7
11368: PUSH
11369: LD_INT 8
11371: PUSH
11372: LD_INT 9
11374: PUSH
11375: LD_INT 10
11377: PUSH
11378: LD_INT 11
11380: PUSH
11381: LD_INT 12
11383: PUSH
11384: LD_INT 13
11386: PUSH
11387: LD_INT 14
11389: PUSH
11390: LD_INT 15
11392: PUSH
11393: LD_INT 16
11395: PUSH
11396: LD_INT 17
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 19
11404: PUSH
11405: LD_INT 20
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 22
11413: PUSH
11414: LD_INT 23
11416: PUSH
11417: LD_INT 24
11419: PUSH
11420: LD_INT 25
11422: PUSH
11423: LD_INT 26
11425: PUSH
11426: LD_INT 27
11428: PUSH
11429: LD_INT 28
11431: PUSH
11432: LD_INT 29
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 31
11440: PUSH
11441: LD_INT 32
11443: PUSH
11444: LD_INT 33
11446: PUSH
11447: LD_INT 34
11449: PUSH
11450: LD_INT 36
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: PUSH
11490: LD_INT 101
11492: PUSH
11493: LD_INT 102
11495: PUSH
11496: LD_INT 103
11498: PUSH
11499: LD_INT 104
11501: PUSH
11502: LD_INT 105
11504: PUSH
11505: LD_INT 106
11507: PUSH
11508: LD_INT 107
11510: PUSH
11511: LD_INT 108
11513: PUSH
11514: LD_INT 109
11516: PUSH
11517: LD_INT 110
11519: PUSH
11520: LD_INT 111
11522: PUSH
11523: LD_INT 112
11525: PUSH
11526: LD_INT 113
11528: PUSH
11529: LD_INT 114
11531: PUSH
11532: LD_INT 116
11534: PUSH
11535: LD_INT 117
11537: PUSH
11538: LD_INT 118
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: ST_TO_ADDR
11564: GO 12339
11566: LD_INT 16
11568: DOUBLE
11569: EQUAL
11570: IFTRUE 11574
11572: GO 11710
11574: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11575: LD_ADDR_VAR 0 2
11579: PUSH
11580: LD_INT 2
11582: PUSH
11583: LD_INT 4
11585: PUSH
11586: LD_INT 5
11588: PUSH
11589: LD_INT 7
11591: PUSH
11592: LD_INT 11
11594: PUSH
11595: LD_INT 12
11597: PUSH
11598: LD_INT 15
11600: PUSH
11601: LD_INT 16
11603: PUSH
11604: LD_INT 20
11606: PUSH
11607: LD_INT 21
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 23
11615: PUSH
11616: LD_INT 25
11618: PUSH
11619: LD_INT 26
11621: PUSH
11622: LD_INT 30
11624: PUSH
11625: LD_INT 31
11627: PUSH
11628: LD_INT 32
11630: PUSH
11631: LD_INT 33
11633: PUSH
11634: LD_INT 34
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 101
11660: PUSH
11661: LD_INT 102
11663: PUSH
11664: LD_INT 103
11666: PUSH
11667: LD_INT 106
11669: PUSH
11670: LD_INT 108
11672: PUSH
11673: LD_INT 112
11675: PUSH
11676: LD_INT 113
11678: PUSH
11679: LD_INT 114
11681: PUSH
11682: LD_INT 116
11684: PUSH
11685: LD_INT 117
11687: PUSH
11688: LD_INT 118
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: ST_TO_ADDR
11708: GO 12339
11710: LD_INT 17
11712: DOUBLE
11713: EQUAL
11714: IFTRUE 11718
11716: GO 11942
11718: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11719: LD_ADDR_VAR 0 2
11723: PUSH
11724: LD_INT 1
11726: PUSH
11727: LD_INT 2
11729: PUSH
11730: LD_INT 3
11732: PUSH
11733: LD_INT 4
11735: PUSH
11736: LD_INT 5
11738: PUSH
11739: LD_INT 6
11741: PUSH
11742: LD_INT 7
11744: PUSH
11745: LD_INT 8
11747: PUSH
11748: LD_INT 9
11750: PUSH
11751: LD_INT 10
11753: PUSH
11754: LD_INT 11
11756: PUSH
11757: LD_INT 12
11759: PUSH
11760: LD_INT 13
11762: PUSH
11763: LD_INT 14
11765: PUSH
11766: LD_INT 15
11768: PUSH
11769: LD_INT 16
11771: PUSH
11772: LD_INT 17
11774: PUSH
11775: LD_INT 18
11777: PUSH
11778: LD_INT 19
11780: PUSH
11781: LD_INT 20
11783: PUSH
11784: LD_INT 21
11786: PUSH
11787: LD_INT 22
11789: PUSH
11790: LD_INT 23
11792: PUSH
11793: LD_INT 24
11795: PUSH
11796: LD_INT 25
11798: PUSH
11799: LD_INT 26
11801: PUSH
11802: LD_INT 27
11804: PUSH
11805: LD_INT 28
11807: PUSH
11808: LD_INT 29
11810: PUSH
11811: LD_INT 30
11813: PUSH
11814: LD_INT 31
11816: PUSH
11817: LD_INT 32
11819: PUSH
11820: LD_INT 33
11822: PUSH
11823: LD_INT 34
11825: PUSH
11826: LD_INT 36
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: LD_INT 101
11868: PUSH
11869: LD_INT 102
11871: PUSH
11872: LD_INT 103
11874: PUSH
11875: LD_INT 104
11877: PUSH
11878: LD_INT 105
11880: PUSH
11881: LD_INT 106
11883: PUSH
11884: LD_INT 107
11886: PUSH
11887: LD_INT 108
11889: PUSH
11890: LD_INT 109
11892: PUSH
11893: LD_INT 110
11895: PUSH
11896: LD_INT 111
11898: PUSH
11899: LD_INT 112
11901: PUSH
11902: LD_INT 113
11904: PUSH
11905: LD_INT 114
11907: PUSH
11908: LD_INT 116
11910: PUSH
11911: LD_INT 117
11913: PUSH
11914: LD_INT 118
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: ST_TO_ADDR
11940: GO 12339
11942: LD_INT 18
11944: DOUBLE
11945: EQUAL
11946: IFTRUE 11950
11948: GO 12098
11950: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 4
11961: PUSH
11962: LD_INT 5
11964: PUSH
11965: LD_INT 7
11967: PUSH
11968: LD_INT 11
11970: PUSH
11971: LD_INT 12
11973: PUSH
11974: LD_INT 15
11976: PUSH
11977: LD_INT 16
11979: PUSH
11980: LD_INT 20
11982: PUSH
11983: LD_INT 21
11985: PUSH
11986: LD_INT 22
11988: PUSH
11989: LD_INT 23
11991: PUSH
11992: LD_INT 25
11994: PUSH
11995: LD_INT 26
11997: PUSH
11998: LD_INT 30
12000: PUSH
12001: LD_INT 31
12003: PUSH
12004: LD_INT 32
12006: PUSH
12007: LD_INT 33
12009: PUSH
12010: LD_INT 34
12012: PUSH
12013: LD_INT 35
12015: PUSH
12016: LD_INT 36
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 101
12044: PUSH
12045: LD_INT 102
12047: PUSH
12048: LD_INT 103
12050: PUSH
12051: LD_INT 106
12053: PUSH
12054: LD_INT 108
12056: PUSH
12057: LD_INT 112
12059: PUSH
12060: LD_INT 113
12062: PUSH
12063: LD_INT 114
12065: PUSH
12066: LD_INT 115
12068: PUSH
12069: LD_INT 116
12071: PUSH
12072: LD_INT 117
12074: PUSH
12075: LD_INT 118
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: ST_TO_ADDR
12096: GO 12339
12098: LD_INT 19
12100: DOUBLE
12101: EQUAL
12102: IFTRUE 12106
12104: GO 12338
12106: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12107: LD_ADDR_VAR 0 2
12111: PUSH
12112: LD_INT 1
12114: PUSH
12115: LD_INT 2
12117: PUSH
12118: LD_INT 3
12120: PUSH
12121: LD_INT 4
12123: PUSH
12124: LD_INT 5
12126: PUSH
12127: LD_INT 6
12129: PUSH
12130: LD_INT 7
12132: PUSH
12133: LD_INT 8
12135: PUSH
12136: LD_INT 9
12138: PUSH
12139: LD_INT 10
12141: PUSH
12142: LD_INT 11
12144: PUSH
12145: LD_INT 12
12147: PUSH
12148: LD_INT 13
12150: PUSH
12151: LD_INT 14
12153: PUSH
12154: LD_INT 15
12156: PUSH
12157: LD_INT 16
12159: PUSH
12160: LD_INT 17
12162: PUSH
12163: LD_INT 18
12165: PUSH
12166: LD_INT 19
12168: PUSH
12169: LD_INT 20
12171: PUSH
12172: LD_INT 21
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_INT 23
12180: PUSH
12181: LD_INT 24
12183: PUSH
12184: LD_INT 25
12186: PUSH
12187: LD_INT 26
12189: PUSH
12190: LD_INT 27
12192: PUSH
12193: LD_INT 28
12195: PUSH
12196: LD_INT 29
12198: PUSH
12199: LD_INT 30
12201: PUSH
12202: LD_INT 31
12204: PUSH
12205: LD_INT 32
12207: PUSH
12208: LD_INT 33
12210: PUSH
12211: LD_INT 34
12213: PUSH
12214: LD_INT 35
12216: PUSH
12217: LD_INT 36
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 101
12260: PUSH
12261: LD_INT 102
12263: PUSH
12264: LD_INT 103
12266: PUSH
12267: LD_INT 104
12269: PUSH
12270: LD_INT 105
12272: PUSH
12273: LD_INT 106
12275: PUSH
12276: LD_INT 107
12278: PUSH
12279: LD_INT 108
12281: PUSH
12282: LD_INT 109
12284: PUSH
12285: LD_INT 110
12287: PUSH
12288: LD_INT 111
12290: PUSH
12291: LD_INT 112
12293: PUSH
12294: LD_INT 113
12296: PUSH
12297: LD_INT 114
12299: PUSH
12300: LD_INT 115
12302: PUSH
12303: LD_INT 116
12305: PUSH
12306: LD_INT 117
12308: PUSH
12309: LD_INT 118
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: ST_TO_ADDR
12336: GO 12339
12338: POP
// end else
12339: GO 12570
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12341: LD_ADDR_VAR 0 2
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: LD_INT 2
12351: PUSH
12352: LD_INT 3
12354: PUSH
12355: LD_INT 4
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: LD_INT 6
12363: PUSH
12364: LD_INT 7
12366: PUSH
12367: LD_INT 8
12369: PUSH
12370: LD_INT 9
12372: PUSH
12373: LD_INT 10
12375: PUSH
12376: LD_INT 11
12378: PUSH
12379: LD_INT 12
12381: PUSH
12382: LD_INT 13
12384: PUSH
12385: LD_INT 14
12387: PUSH
12388: LD_INT 15
12390: PUSH
12391: LD_INT 16
12393: PUSH
12394: LD_INT 17
12396: PUSH
12397: LD_INT 18
12399: PUSH
12400: LD_INT 19
12402: PUSH
12403: LD_INT 20
12405: PUSH
12406: LD_INT 21
12408: PUSH
12409: LD_INT 22
12411: PUSH
12412: LD_INT 23
12414: PUSH
12415: LD_INT 24
12417: PUSH
12418: LD_INT 25
12420: PUSH
12421: LD_INT 26
12423: PUSH
12424: LD_INT 27
12426: PUSH
12427: LD_INT 28
12429: PUSH
12430: LD_INT 29
12432: PUSH
12433: LD_INT 30
12435: PUSH
12436: LD_INT 31
12438: PUSH
12439: LD_INT 32
12441: PUSH
12442: LD_INT 33
12444: PUSH
12445: LD_INT 34
12447: PUSH
12448: LD_INT 35
12450: PUSH
12451: LD_INT 36
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 101
12494: PUSH
12495: LD_INT 102
12497: PUSH
12498: LD_INT 103
12500: PUSH
12501: LD_INT 104
12503: PUSH
12504: LD_INT 105
12506: PUSH
12507: LD_INT 106
12509: PUSH
12510: LD_INT 107
12512: PUSH
12513: LD_INT 108
12515: PUSH
12516: LD_INT 109
12518: PUSH
12519: LD_INT 110
12521: PUSH
12522: LD_INT 111
12524: PUSH
12525: LD_INT 112
12527: PUSH
12528: LD_INT 113
12530: PUSH
12531: LD_INT 114
12533: PUSH
12534: LD_INT 115
12536: PUSH
12537: LD_INT 116
12539: PUSH
12540: LD_INT 117
12542: PUSH
12543: LD_INT 118
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: EMPTY
12567: LIST
12568: LIST
12569: ST_TO_ADDR
// if result then
12570: LD_VAR 0 2
12574: IFFALSE 13360
// begin normal :=  ;
12576: LD_ADDR_VAR 0 5
12580: PUSH
12581: LD_STRING 
12583: ST_TO_ADDR
// hardcore :=  ;
12584: LD_ADDR_VAR 0 6
12588: PUSH
12589: LD_STRING 
12591: ST_TO_ADDR
// active :=  ;
12592: LD_ADDR_VAR 0 7
12596: PUSH
12597: LD_STRING 
12599: ST_TO_ADDR
// for i = 1 to normalCounter do
12600: LD_ADDR_VAR 0 8
12604: PUSH
12605: DOUBLE
12606: LD_INT 1
12608: DEC
12609: ST_TO_ADDR
12610: LD_EXP 26
12614: PUSH
12615: FOR_TO
12616: IFFALSE 12717
// begin tmp := 0 ;
12618: LD_ADDR_VAR 0 3
12622: PUSH
12623: LD_STRING 0
12625: ST_TO_ADDR
// if result [ 1 ] then
12626: LD_VAR 0 2
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: IFFALSE 12699
// if result [ 1 ] [ 1 ] = i then
12636: LD_VAR 0 2
12640: PUSH
12641: LD_INT 1
12643: ARRAY
12644: PUSH
12645: LD_INT 1
12647: ARRAY
12648: PUSH
12649: LD_VAR 0 8
12653: EQUAL
12654: IFFALSE 12699
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12656: LD_ADDR_VAR 0 2
12660: PUSH
12661: LD_VAR 0 2
12665: PPUSH
12666: LD_INT 1
12668: PPUSH
12669: LD_VAR 0 2
12673: PUSH
12674: LD_INT 1
12676: ARRAY
12677: PPUSH
12678: LD_INT 1
12680: PPUSH
12681: CALL_OW 3
12685: PPUSH
12686: CALL_OW 1
12690: ST_TO_ADDR
// tmp := 1 ;
12691: LD_ADDR_VAR 0 3
12695: PUSH
12696: LD_STRING 1
12698: ST_TO_ADDR
// end ; normal := normal & tmp ;
12699: LD_ADDR_VAR 0 5
12703: PUSH
12704: LD_VAR 0 5
12708: PUSH
12709: LD_VAR 0 3
12713: STR
12714: ST_TO_ADDR
// end ;
12715: GO 12615
12717: POP
12718: POP
// for i = 1 to hardcoreCounter do
12719: LD_ADDR_VAR 0 8
12723: PUSH
12724: DOUBLE
12725: LD_INT 1
12727: DEC
12728: ST_TO_ADDR
12729: LD_EXP 27
12733: PUSH
12734: FOR_TO
12735: IFFALSE 12840
// begin tmp := 0 ;
12737: LD_ADDR_VAR 0 3
12741: PUSH
12742: LD_STRING 0
12744: ST_TO_ADDR
// if result [ 2 ] then
12745: LD_VAR 0 2
12749: PUSH
12750: LD_INT 2
12752: ARRAY
12753: IFFALSE 12822
// if result [ 2 ] [ 1 ] = 100 + i then
12755: LD_VAR 0 2
12759: PUSH
12760: LD_INT 2
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PUSH
12768: LD_INT 100
12770: PUSH
12771: LD_VAR 0 8
12775: PLUS
12776: EQUAL
12777: IFFALSE 12822
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12779: LD_ADDR_VAR 0 2
12783: PUSH
12784: LD_VAR 0 2
12788: PPUSH
12789: LD_INT 2
12791: PPUSH
12792: LD_VAR 0 2
12796: PUSH
12797: LD_INT 2
12799: ARRAY
12800: PPUSH
12801: LD_INT 1
12803: PPUSH
12804: CALL_OW 3
12808: PPUSH
12809: CALL_OW 1
12813: ST_TO_ADDR
// tmp := 1 ;
12814: LD_ADDR_VAR 0 3
12818: PUSH
12819: LD_STRING 1
12821: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12822: LD_ADDR_VAR 0 6
12826: PUSH
12827: LD_VAR 0 6
12831: PUSH
12832: LD_VAR 0 3
12836: STR
12837: ST_TO_ADDR
// end ;
12838: GO 12734
12840: POP
12841: POP
// if isGameLoad then
12842: LD_VAR 0 1
12846: IFFALSE 13321
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12848: LD_ADDR_VAR 0 4
12852: PUSH
12853: LD_EXP 30
12857: PUSH
12858: LD_EXP 29
12862: PUSH
12863: LD_EXP 31
12867: PUSH
12868: LD_EXP 28
12872: PUSH
12873: LD_EXP 32
12877: PUSH
12878: LD_EXP 33
12882: PUSH
12883: LD_EXP 34
12887: PUSH
12888: LD_EXP 35
12892: PUSH
12893: LD_EXP 36
12897: PUSH
12898: LD_EXP 37
12902: PUSH
12903: LD_EXP 38
12907: PUSH
12908: LD_EXP 39
12912: PUSH
12913: LD_EXP 40
12917: PUSH
12918: LD_EXP 41
12922: PUSH
12923: LD_EXP 49
12927: PUSH
12928: LD_EXP 50
12932: PUSH
12933: LD_EXP 51
12937: PUSH
12938: LD_EXP 52
12942: PUSH
12943: LD_EXP 54
12947: PUSH
12948: LD_EXP 55
12952: PUSH
12953: LD_EXP 56
12957: PUSH
12958: LD_EXP 59
12962: PUSH
12963: LD_EXP 61
12967: PUSH
12968: LD_EXP 62
12972: PUSH
12973: LD_EXP 63
12977: PUSH
12978: LD_EXP 65
12982: PUSH
12983: LD_EXP 66
12987: PUSH
12988: LD_EXP 69
12992: PUSH
12993: LD_EXP 70
12997: PUSH
12998: LD_EXP 71
13002: PUSH
13003: LD_EXP 72
13007: PUSH
13008: LD_EXP 73
13012: PUSH
13013: LD_EXP 74
13017: PUSH
13018: LD_EXP 75
13022: PUSH
13023: LD_EXP 76
13027: PUSH
13028: LD_EXP 77
13032: PUSH
13033: LD_EXP 42
13037: PUSH
13038: LD_EXP 43
13042: PUSH
13043: LD_EXP 46
13047: PUSH
13048: LD_EXP 47
13052: PUSH
13053: LD_EXP 48
13057: PUSH
13058: LD_EXP 44
13062: PUSH
13063: LD_EXP 45
13067: PUSH
13068: LD_EXP 53
13072: PUSH
13073: LD_EXP 57
13077: PUSH
13078: LD_EXP 58
13082: PUSH
13083: LD_EXP 60
13087: PUSH
13088: LD_EXP 64
13092: PUSH
13093: LD_EXP 67
13097: PUSH
13098: LD_EXP 68
13102: PUSH
13103: LD_EXP 78
13107: PUSH
13108: LD_EXP 79
13112: PUSH
13113: LD_EXP 80
13117: PUSH
13118: LD_EXP 81
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: LIST
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: LIST
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: LIST
13151: LIST
13152: LIST
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: LIST
13178: ST_TO_ADDR
// tmp :=  ;
13179: LD_ADDR_VAR 0 3
13183: PUSH
13184: LD_STRING 
13186: ST_TO_ADDR
// for i = 1 to normalCounter do
13187: LD_ADDR_VAR 0 8
13191: PUSH
13192: DOUBLE
13193: LD_INT 1
13195: DEC
13196: ST_TO_ADDR
13197: LD_EXP 26
13201: PUSH
13202: FOR_TO
13203: IFFALSE 13239
// begin if flags [ i ] then
13205: LD_VAR 0 4
13209: PUSH
13210: LD_VAR 0 8
13214: ARRAY
13215: IFFALSE 13237
// tmp := tmp & i & ; ;
13217: LD_ADDR_VAR 0 3
13221: PUSH
13222: LD_VAR 0 3
13226: PUSH
13227: LD_VAR 0 8
13231: STR
13232: PUSH
13233: LD_STRING ;
13235: STR
13236: ST_TO_ADDR
// end ;
13237: GO 13202
13239: POP
13240: POP
// for i = 1 to hardcoreCounter do
13241: LD_ADDR_VAR 0 8
13245: PUSH
13246: DOUBLE
13247: LD_INT 1
13249: DEC
13250: ST_TO_ADDR
13251: LD_EXP 27
13255: PUSH
13256: FOR_TO
13257: IFFALSE 13303
// begin if flags [ normalCounter + i ] then
13259: LD_VAR 0 4
13263: PUSH
13264: LD_EXP 26
13268: PUSH
13269: LD_VAR 0 8
13273: PLUS
13274: ARRAY
13275: IFFALSE 13301
// tmp := tmp & ( 100 + i ) & ; ;
13277: LD_ADDR_VAR 0 3
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: LD_INT 100
13289: PUSH
13290: LD_VAR 0 8
13294: PLUS
13295: STR
13296: PUSH
13297: LD_STRING ;
13299: STR
13300: ST_TO_ADDR
// end ;
13301: GO 13256
13303: POP
13304: POP
// if tmp then
13305: LD_VAR 0 3
13309: IFFALSE 13321
// active := tmp ;
13311: LD_ADDR_VAR 0 7
13315: PUSH
13316: LD_VAR 0 3
13320: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13321: LD_STRING getStreamItemsFromMission("
13323: PUSH
13324: LD_VAR 0 5
13328: STR
13329: PUSH
13330: LD_STRING ","
13332: STR
13333: PUSH
13334: LD_VAR 0 6
13338: STR
13339: PUSH
13340: LD_STRING ","
13342: STR
13343: PUSH
13344: LD_VAR 0 7
13348: STR
13349: PUSH
13350: LD_STRING ")
13352: STR
13353: PPUSH
13354: CALL_OW 559
// end else
13358: GO 13367
// ToLua ( getStreamItemsFromMission("","","") ) ;
13360: LD_STRING getStreamItemsFromMission("","","")
13362: PPUSH
13363: CALL_OW 559
// end ;
13367: LD_VAR 0 2
13371: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13372: LD_EXP 25
13376: PUSH
13377: LD_EXP 30
13381: AND
13382: IFFALSE 13506
13384: GO 13386
13386: DISABLE
13387: LD_INT 0
13389: PPUSH
13390: PPUSH
// begin enable ;
13391: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13392: LD_ADDR_VAR 0 2
13396: PUSH
13397: LD_INT 22
13399: PUSH
13400: LD_OWVAR 2
13404: PUSH
13405: EMPTY
13406: LIST
13407: LIST
13408: PUSH
13409: LD_INT 2
13411: PUSH
13412: LD_INT 34
13414: PUSH
13415: LD_INT 7
13417: PUSH
13418: EMPTY
13419: LIST
13420: LIST
13421: PUSH
13422: LD_INT 34
13424: PUSH
13425: LD_INT 45
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 34
13434: PUSH
13435: LD_INT 28
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: PUSH
13442: LD_INT 34
13444: PUSH
13445: LD_INT 47
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 69
13467: ST_TO_ADDR
// if not tmp then
13468: LD_VAR 0 2
13472: NOT
13473: IFFALSE 13477
// exit ;
13475: GO 13506
// for i in tmp do
13477: LD_ADDR_VAR 0 1
13481: PUSH
13482: LD_VAR 0 2
13486: PUSH
13487: FOR_IN
13488: IFFALSE 13504
// begin SetLives ( i , 0 ) ;
13490: LD_VAR 0 1
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 234
// end ;
13502: GO 13487
13504: POP
13505: POP
// end ;
13506: PPOPN 2
13508: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13509: LD_EXP 25
13513: PUSH
13514: LD_EXP 31
13518: AND
13519: IFFALSE 13603
13521: GO 13523
13523: DISABLE
13524: LD_INT 0
13526: PPUSH
13527: PPUSH
// begin enable ;
13528: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13529: LD_ADDR_VAR 0 2
13533: PUSH
13534: LD_INT 22
13536: PUSH
13537: LD_OWVAR 2
13541: PUSH
13542: EMPTY
13543: LIST
13544: LIST
13545: PUSH
13546: LD_INT 32
13548: PUSH
13549: LD_INT 3
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 69
13564: ST_TO_ADDR
// if not tmp then
13565: LD_VAR 0 2
13569: NOT
13570: IFFALSE 13574
// exit ;
13572: GO 13603
// for i in tmp do
13574: LD_ADDR_VAR 0 1
13578: PUSH
13579: LD_VAR 0 2
13583: PUSH
13584: FOR_IN
13585: IFFALSE 13601
// begin SetLives ( i , 0 ) ;
13587: LD_VAR 0 1
13591: PPUSH
13592: LD_INT 0
13594: PPUSH
13595: CALL_OW 234
// end ;
13599: GO 13584
13601: POP
13602: POP
// end ;
13603: PPOPN 2
13605: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13606: LD_EXP 25
13610: PUSH
13611: LD_EXP 28
13615: AND
13616: IFFALSE 13709
13618: GO 13620
13620: DISABLE
13621: LD_INT 0
13623: PPUSH
// begin enable ;
13624: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13625: LD_ADDR_VAR 0 1
13629: PUSH
13630: LD_INT 22
13632: PUSH
13633: LD_OWVAR 2
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: LD_INT 25
13647: PUSH
13648: LD_INT 5
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 25
13657: PUSH
13658: LD_INT 9
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 25
13667: PUSH
13668: LD_INT 8
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: EMPTY
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: PUSH
13690: FOR_IN
13691: IFFALSE 13707
// begin SetClass ( i , 1 ) ;
13693: LD_VAR 0 1
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 336
// end ;
13705: GO 13690
13707: POP
13708: POP
// end ;
13709: PPOPN 1
13711: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13712: LD_EXP 25
13716: PUSH
13717: LD_EXP 29
13721: AND
13722: PUSH
13723: LD_OWVAR 65
13727: PUSH
13728: LD_INT 7
13730: LESS
13731: AND
13732: IFFALSE 13746
13734: GO 13736
13736: DISABLE
// begin enable ;
13737: ENABLE
// game_speed := 7 ;
13738: LD_ADDR_OWVAR 65
13742: PUSH
13743: LD_INT 7
13745: ST_TO_ADDR
// end ;
13746: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13747: LD_EXP 25
13751: PUSH
13752: LD_EXP 32
13756: AND
13757: IFFALSE 13959
13759: GO 13761
13761: DISABLE
13762: LD_INT 0
13764: PPUSH
13765: PPUSH
13766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13767: LD_ADDR_VAR 0 3
13771: PUSH
13772: LD_INT 81
13774: PUSH
13775: LD_OWVAR 2
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 21
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: ST_TO_ADDR
// if not tmp then
13803: LD_VAR 0 3
13807: NOT
13808: IFFALSE 13812
// exit ;
13810: GO 13959
// if tmp > 5 then
13812: LD_VAR 0 3
13816: PUSH
13817: LD_INT 5
13819: GREATER
13820: IFFALSE 13832
// k := 5 else
13822: LD_ADDR_VAR 0 2
13826: PUSH
13827: LD_INT 5
13829: ST_TO_ADDR
13830: GO 13842
// k := tmp ;
13832: LD_ADDR_VAR 0 2
13836: PUSH
13837: LD_VAR 0 3
13841: ST_TO_ADDR
// for i := 1 to k do
13842: LD_ADDR_VAR 0 1
13846: PUSH
13847: DOUBLE
13848: LD_INT 1
13850: DEC
13851: ST_TO_ADDR
13852: LD_VAR 0 2
13856: PUSH
13857: FOR_TO
13858: IFFALSE 13957
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13860: LD_VAR 0 3
13864: PUSH
13865: LD_VAR 0 1
13869: ARRAY
13870: PPUSH
13871: LD_VAR 0 1
13875: PUSH
13876: LD_INT 4
13878: MOD
13879: PUSH
13880: LD_INT 1
13882: PLUS
13883: PPUSH
13884: CALL_OW 259
13888: PUSH
13889: LD_INT 10
13891: LESS
13892: IFFALSE 13955
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13894: LD_VAR 0 3
13898: PUSH
13899: LD_VAR 0 1
13903: ARRAY
13904: PPUSH
13905: LD_VAR 0 1
13909: PUSH
13910: LD_INT 4
13912: MOD
13913: PUSH
13914: LD_INT 1
13916: PLUS
13917: PPUSH
13918: LD_VAR 0 3
13922: PUSH
13923: LD_VAR 0 1
13927: ARRAY
13928: PPUSH
13929: LD_VAR 0 1
13933: PUSH
13934: LD_INT 4
13936: MOD
13937: PUSH
13938: LD_INT 1
13940: PLUS
13941: PPUSH
13942: CALL_OW 259
13946: PUSH
13947: LD_INT 1
13949: PLUS
13950: PPUSH
13951: CALL_OW 237
13955: GO 13857
13957: POP
13958: POP
// end ;
13959: PPOPN 3
13961: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13962: LD_EXP 25
13966: PUSH
13967: LD_EXP 33
13971: AND
13972: IFFALSE 13992
13974: GO 13976
13976: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13977: LD_INT 4
13979: PPUSH
13980: LD_OWVAR 2
13984: PPUSH
13985: LD_INT 0
13987: PPUSH
13988: CALL_OW 324
13992: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13993: LD_EXP 25
13997: PUSH
13998: LD_EXP 62
14002: AND
14003: IFFALSE 14023
14005: GO 14007
14007: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14008: LD_INT 19
14010: PPUSH
14011: LD_OWVAR 2
14015: PPUSH
14016: LD_INT 0
14018: PPUSH
14019: CALL_OW 324
14023: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14024: LD_EXP 25
14028: PUSH
14029: LD_EXP 34
14033: AND
14034: IFFALSE 14136
14036: GO 14038
14038: DISABLE
14039: LD_INT 0
14041: PPUSH
14042: PPUSH
// begin enable ;
14043: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_INT 22
14051: PUSH
14052: LD_OWVAR 2
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 2
14063: PUSH
14064: LD_INT 34
14066: PUSH
14067: LD_INT 11
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 34
14076: PUSH
14077: LD_INT 30
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PPUSH
14093: CALL_OW 69
14097: ST_TO_ADDR
// if not tmp then
14098: LD_VAR 0 2
14102: NOT
14103: IFFALSE 14107
// exit ;
14105: GO 14136
// for i in tmp do
14107: LD_ADDR_VAR 0 1
14111: PUSH
14112: LD_VAR 0 2
14116: PUSH
14117: FOR_IN
14118: IFFALSE 14134
// begin SetLives ( i , 0 ) ;
14120: LD_VAR 0 1
14124: PPUSH
14125: LD_INT 0
14127: PPUSH
14128: CALL_OW 234
// end ;
14132: GO 14117
14134: POP
14135: POP
// end ;
14136: PPOPN 2
14138: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14139: LD_EXP 25
14143: PUSH
14144: LD_EXP 35
14148: AND
14149: IFFALSE 14169
14151: GO 14153
14153: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14154: LD_INT 32
14156: PPUSH
14157: LD_OWVAR 2
14161: PPUSH
14162: LD_INT 0
14164: PPUSH
14165: CALL_OW 324
14169: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14170: LD_EXP 25
14174: PUSH
14175: LD_EXP 36
14179: AND
14180: IFFALSE 14361
14182: GO 14184
14184: DISABLE
14185: LD_INT 0
14187: PPUSH
14188: PPUSH
14189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14190: LD_ADDR_VAR 0 2
14194: PUSH
14195: LD_INT 22
14197: PUSH
14198: LD_OWVAR 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 33
14209: PUSH
14210: LD_INT 3
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 69
14225: ST_TO_ADDR
// if not tmp then
14226: LD_VAR 0 2
14230: NOT
14231: IFFALSE 14235
// exit ;
14233: GO 14361
// side := 0 ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 0
14242: ST_TO_ADDR
// for i := 1 to 8 do
14243: LD_ADDR_VAR 0 1
14247: PUSH
14248: DOUBLE
14249: LD_INT 1
14251: DEC
14252: ST_TO_ADDR
14253: LD_INT 8
14255: PUSH
14256: FOR_TO
14257: IFFALSE 14305
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14259: LD_OWVAR 2
14263: PUSH
14264: LD_VAR 0 1
14268: NONEQUAL
14269: PUSH
14270: LD_OWVAR 2
14274: PPUSH
14275: LD_VAR 0 1
14279: PPUSH
14280: CALL_OW 81
14284: PUSH
14285: LD_INT 2
14287: EQUAL
14288: AND
14289: IFFALSE 14303
// begin side := i ;
14291: LD_ADDR_VAR 0 3
14295: PUSH
14296: LD_VAR 0 1
14300: ST_TO_ADDR
// break ;
14301: GO 14305
// end ;
14303: GO 14256
14305: POP
14306: POP
// if not side then
14307: LD_VAR 0 3
14311: NOT
14312: IFFALSE 14316
// exit ;
14314: GO 14361
// for i := 1 to tmp do
14316: LD_ADDR_VAR 0 1
14320: PUSH
14321: DOUBLE
14322: LD_INT 1
14324: DEC
14325: ST_TO_ADDR
14326: LD_VAR 0 2
14330: PUSH
14331: FOR_TO
14332: IFFALSE 14359
// if Prob ( 60 ) then
14334: LD_INT 60
14336: PPUSH
14337: CALL_OW 13
14341: IFFALSE 14357
// SetSide ( i , side ) ;
14343: LD_VAR 0 1
14347: PPUSH
14348: LD_VAR 0 3
14352: PPUSH
14353: CALL_OW 235
14357: GO 14331
14359: POP
14360: POP
// end ;
14361: PPOPN 3
14363: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14364: LD_EXP 25
14368: PUSH
14369: LD_EXP 38
14373: AND
14374: IFFALSE 14493
14376: GO 14378
14378: DISABLE
14379: LD_INT 0
14381: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14382: LD_ADDR_VAR 0 1
14386: PUSH
14387: LD_INT 22
14389: PUSH
14390: LD_OWVAR 2
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 3
14411: PUSH
14412: LD_INT 23
14414: PUSH
14415: LD_INT 0
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: PPUSH
14431: CALL_OW 69
14435: PUSH
14436: FOR_IN
14437: IFFALSE 14491
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14439: LD_VAR 0 1
14443: PPUSH
14444: CALL_OW 257
14448: PUSH
14449: LD_INT 1
14451: PUSH
14452: LD_INT 2
14454: PUSH
14455: LD_INT 3
14457: PUSH
14458: LD_INT 4
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: IN
14467: IFFALSE 14489
// SetClass ( un , rand ( 1 , 4 ) ) ;
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: CALL_OW 12
14484: PPUSH
14485: CALL_OW 336
14489: GO 14436
14491: POP
14492: POP
// end ;
14493: PPOPN 1
14495: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14496: LD_EXP 25
14500: PUSH
14501: LD_EXP 37
14505: AND
14506: IFFALSE 14585
14508: GO 14510
14510: DISABLE
14511: LD_INT 0
14513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14514: LD_ADDR_VAR 0 1
14518: PUSH
14519: LD_INT 22
14521: PUSH
14522: LD_OWVAR 2
14526: PUSH
14527: EMPTY
14528: LIST
14529: LIST
14530: PUSH
14531: LD_INT 21
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: EMPTY
14542: LIST
14543: LIST
14544: PPUSH
14545: CALL_OW 69
14549: ST_TO_ADDR
// if not tmp then
14550: LD_VAR 0 1
14554: NOT
14555: IFFALSE 14559
// exit ;
14557: GO 14585
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14559: LD_VAR 0 1
14563: PUSH
14564: LD_INT 1
14566: PPUSH
14567: LD_VAR 0 1
14571: PPUSH
14572: CALL_OW 12
14576: ARRAY
14577: PPUSH
14578: LD_INT 100
14580: PPUSH
14581: CALL_OW 234
// end ;
14585: PPOPN 1
14587: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14588: LD_EXP 25
14592: PUSH
14593: LD_EXP 39
14597: AND
14598: IFFALSE 14696
14600: GO 14602
14602: DISABLE
14603: LD_INT 0
14605: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14606: LD_ADDR_VAR 0 1
14610: PUSH
14611: LD_INT 22
14613: PUSH
14614: LD_OWVAR 2
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: ST_TO_ADDR
// if not tmp then
14642: LD_VAR 0 1
14646: NOT
14647: IFFALSE 14651
// exit ;
14649: GO 14696
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14651: LD_VAR 0 1
14655: PUSH
14656: LD_INT 1
14658: PPUSH
14659: LD_VAR 0 1
14663: PPUSH
14664: CALL_OW 12
14668: ARRAY
14669: PPUSH
14670: LD_INT 1
14672: PPUSH
14673: LD_INT 4
14675: PPUSH
14676: CALL_OW 12
14680: PPUSH
14681: LD_INT 3000
14683: PPUSH
14684: LD_INT 9000
14686: PPUSH
14687: CALL_OW 12
14691: PPUSH
14692: CALL_OW 492
// end ;
14696: PPOPN 1
14698: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14699: LD_EXP 25
14703: PUSH
14704: LD_EXP 40
14708: AND
14709: IFFALSE 14729
14711: GO 14713
14713: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14714: LD_INT 1
14716: PPUSH
14717: LD_OWVAR 2
14721: PPUSH
14722: LD_INT 0
14724: PPUSH
14725: CALL_OW 324
14729: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14730: LD_EXP 25
14734: PUSH
14735: LD_EXP 41
14739: AND
14740: IFFALSE 14823
14742: GO 14744
14744: DISABLE
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14749: LD_ADDR_VAR 0 2
14753: PUSH
14754: LD_INT 22
14756: PUSH
14757: LD_OWVAR 2
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 21
14768: PUSH
14769: LD_INT 3
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: ST_TO_ADDR
// if not tmp then
14785: LD_VAR 0 2
14789: NOT
14790: IFFALSE 14794
// exit ;
14792: GO 14823
// for i in tmp do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: LD_VAR 0 2
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14821
// SetBLevel ( i , 10 ) ;
14807: LD_VAR 0 1
14811: PPUSH
14812: LD_INT 10
14814: PPUSH
14815: CALL_OW 241
14819: GO 14804
14821: POP
14822: POP
// end ;
14823: PPOPN 2
14825: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14826: LD_EXP 25
14830: PUSH
14831: LD_EXP 42
14835: AND
14836: IFFALSE 14947
14838: GO 14840
14840: DISABLE
14841: LD_INT 0
14843: PPUSH
14844: PPUSH
14845: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14846: LD_ADDR_VAR 0 3
14850: PUSH
14851: LD_INT 22
14853: PUSH
14854: LD_OWVAR 2
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 25
14865: PUSH
14866: LD_INT 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: EMPTY
14874: LIST
14875: LIST
14876: PPUSH
14877: CALL_OW 69
14881: ST_TO_ADDR
// if not tmp then
14882: LD_VAR 0 3
14886: NOT
14887: IFFALSE 14891
// exit ;
14889: GO 14947
// un := tmp [ rand ( 1 , tmp ) ] ;
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_VAR 0 3
14900: PUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_VAR 0 3
14908: PPUSH
14909: CALL_OW 12
14913: ARRAY
14914: ST_TO_ADDR
// if Crawls ( un ) then
14915: LD_VAR 0 2
14919: PPUSH
14920: CALL_OW 318
14924: IFFALSE 14935
// ComWalk ( un ) ;
14926: LD_VAR 0 2
14930: PPUSH
14931: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14935: LD_VAR 0 2
14939: PPUSH
14940: LD_INT 5
14942: PPUSH
14943: CALL_OW 336
// end ;
14947: PPOPN 3
14949: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14950: LD_EXP 25
14954: PUSH
14955: LD_EXP 43
14959: AND
14960: PUSH
14961: LD_OWVAR 67
14965: PUSH
14966: LD_INT 4
14968: LESS
14969: AND
14970: IFFALSE 14989
14972: GO 14974
14974: DISABLE
// begin Difficulty := Difficulty + 1 ;
14975: LD_ADDR_OWVAR 67
14979: PUSH
14980: LD_OWVAR 67
14984: PUSH
14985: LD_INT 1
14987: PLUS
14988: ST_TO_ADDR
// end ;
14989: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14990: LD_EXP 25
14994: PUSH
14995: LD_EXP 44
14999: AND
15000: IFFALSE 15103
15002: GO 15004
15004: DISABLE
15005: LD_INT 0
15007: PPUSH
// begin for i := 1 to 5 do
15008: LD_ADDR_VAR 0 1
15012: PUSH
15013: DOUBLE
15014: LD_INT 1
15016: DEC
15017: ST_TO_ADDR
15018: LD_INT 5
15020: PUSH
15021: FOR_TO
15022: IFFALSE 15101
// begin uc_nation := nation_nature ;
15024: LD_ADDR_OWVAR 21
15028: PUSH
15029: LD_INT 0
15031: ST_TO_ADDR
// uc_side := 0 ;
15032: LD_ADDR_OWVAR 20
15036: PUSH
15037: LD_INT 0
15039: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15040: LD_ADDR_OWVAR 29
15044: PUSH
15045: LD_INT 12
15047: PUSH
15048: LD_INT 12
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: ST_TO_ADDR
// hc_agressivity := 20 ;
15055: LD_ADDR_OWVAR 35
15059: PUSH
15060: LD_INT 20
15062: ST_TO_ADDR
// hc_class := class_tiger ;
15063: LD_ADDR_OWVAR 28
15067: PUSH
15068: LD_INT 14
15070: ST_TO_ADDR
// hc_gallery :=  ;
15071: LD_ADDR_OWVAR 33
15075: PUSH
15076: LD_STRING 
15078: ST_TO_ADDR
// hc_name :=  ;
15079: LD_ADDR_OWVAR 26
15083: PUSH
15084: LD_STRING 
15086: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15087: CALL_OW 44
15091: PPUSH
15092: LD_INT 0
15094: PPUSH
15095: CALL_OW 51
// end ;
15099: GO 15021
15101: POP
15102: POP
// end ;
15103: PPOPN 1
15105: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15106: LD_EXP 25
15110: PUSH
15111: LD_EXP 45
15115: AND
15116: IFFALSE 15125
15118: GO 15120
15120: DISABLE
// StreamSibBomb ;
15121: CALL 15126 0 0
15125: END
// export function StreamSibBomb ; var i , x , y ; begin
15126: LD_INT 0
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
// result := false ;
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_INT 0
15139: ST_TO_ADDR
// for i := 1 to 16 do
15140: LD_ADDR_VAR 0 2
15144: PUSH
15145: DOUBLE
15146: LD_INT 1
15148: DEC
15149: ST_TO_ADDR
15150: LD_INT 16
15152: PUSH
15153: FOR_TO
15154: IFFALSE 15353
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15156: LD_ADDR_VAR 0 3
15160: PUSH
15161: LD_INT 10
15163: PUSH
15164: LD_INT 20
15166: PUSH
15167: LD_INT 30
15169: PUSH
15170: LD_INT 40
15172: PUSH
15173: LD_INT 50
15175: PUSH
15176: LD_INT 60
15178: PUSH
15179: LD_INT 70
15181: PUSH
15182: LD_INT 80
15184: PUSH
15185: LD_INT 90
15187: PUSH
15188: LD_INT 100
15190: PUSH
15191: LD_INT 110
15193: PUSH
15194: LD_INT 120
15196: PUSH
15197: LD_INT 130
15199: PUSH
15200: LD_INT 140
15202: PUSH
15203: LD_INT 150
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: PUSH
15223: LD_INT 1
15225: PPUSH
15226: LD_INT 15
15228: PPUSH
15229: CALL_OW 12
15233: ARRAY
15234: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15235: LD_ADDR_VAR 0 4
15239: PUSH
15240: LD_INT 10
15242: PUSH
15243: LD_INT 20
15245: PUSH
15246: LD_INT 30
15248: PUSH
15249: LD_INT 40
15251: PUSH
15252: LD_INT 50
15254: PUSH
15255: LD_INT 60
15257: PUSH
15258: LD_INT 70
15260: PUSH
15261: LD_INT 80
15263: PUSH
15264: LD_INT 90
15266: PUSH
15267: LD_INT 100
15269: PUSH
15270: LD_INT 110
15272: PUSH
15273: LD_INT 120
15275: PUSH
15276: LD_INT 130
15278: PUSH
15279: LD_INT 140
15281: PUSH
15282: LD_INT 150
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 1
15304: PPUSH
15305: LD_INT 15
15307: PPUSH
15308: CALL_OW 12
15312: ARRAY
15313: ST_TO_ADDR
// if ValidHex ( x , y ) then
15314: LD_VAR 0 3
15318: PPUSH
15319: LD_VAR 0 4
15323: PPUSH
15324: CALL_OW 488
15328: IFFALSE 15351
// begin result := [ x , y ] ;
15330: LD_ADDR_VAR 0 1
15334: PUSH
15335: LD_VAR 0 3
15339: PUSH
15340: LD_VAR 0 4
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: ST_TO_ADDR
// break ;
15349: GO 15353
// end ; end ;
15351: GO 15153
15353: POP
15354: POP
// if result then
15355: LD_VAR 0 1
15359: IFFALSE 15419
// begin ToLua ( playSibBomb() ) ;
15361: LD_STRING playSibBomb()
15363: PPUSH
15364: CALL_OW 559
// wait ( 0 0$14 ) ;
15368: LD_INT 490
15370: PPUSH
15371: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15375: LD_VAR 0 1
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 1
15388: PUSH
15389: LD_INT 2
15391: ARRAY
15392: PPUSH
15393: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15397: LD_VAR 0 1
15401: PUSH
15402: LD_INT 1
15404: ARRAY
15405: PPUSH
15406: LD_VAR 0 1
15410: PUSH
15411: LD_INT 2
15413: ARRAY
15414: PPUSH
15415: CALL_OW 429
// end ; end ;
15419: LD_VAR 0 1
15423: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15424: LD_EXP 25
15428: PUSH
15429: LD_EXP 47
15433: AND
15434: IFFALSE 15446
15436: GO 15438
15438: DISABLE
// YouLost (  ) ;
15439: LD_STRING 
15441: PPUSH
15442: CALL_OW 104
15446: END
// every 0 0$1 trigger StreamModeActive and sFog do
15447: LD_EXP 25
15451: PUSH
15452: LD_EXP 46
15456: AND
15457: IFFALSE 15471
15459: GO 15461
15461: DISABLE
// FogOff ( your_side ) ;
15462: LD_OWVAR 2
15466: PPUSH
15467: CALL_OW 344
15471: END
// every 0 0$1 trigger StreamModeActive and sSun do
15472: LD_EXP 25
15476: PUSH
15477: LD_EXP 48
15481: AND
15482: IFFALSE 15510
15484: GO 15486
15486: DISABLE
// begin solar_recharge_percent := 0 ;
15487: LD_ADDR_OWVAR 79
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15495: LD_INT 10500
15497: PPUSH
15498: CALL_OW 67
// solar_recharge_percent := 100 ;
15502: LD_ADDR_OWVAR 79
15506: PUSH
15507: LD_INT 100
15509: ST_TO_ADDR
// end ;
15510: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15511: LD_EXP 25
15515: PUSH
15516: LD_EXP 49
15520: AND
15521: IFFALSE 15760
15523: GO 15525
15525: DISABLE
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
15530: PPUSH
// begin tmp := [ ] ;
15531: LD_ADDR_VAR 0 3
15535: PUSH
15536: EMPTY
15537: ST_TO_ADDR
// for i := 1 to 6 do
15538: LD_ADDR_VAR 0 1
15542: PUSH
15543: DOUBLE
15544: LD_INT 1
15546: DEC
15547: ST_TO_ADDR
15548: LD_INT 6
15550: PUSH
15551: FOR_TO
15552: IFFALSE 15657
// begin uc_nation := nation_nature ;
15554: LD_ADDR_OWVAR 21
15558: PUSH
15559: LD_INT 0
15561: ST_TO_ADDR
// uc_side := 0 ;
15562: LD_ADDR_OWVAR 20
15566: PUSH
15567: LD_INT 0
15569: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15570: LD_ADDR_OWVAR 29
15574: PUSH
15575: LD_INT 12
15577: PUSH
15578: LD_INT 12
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: ST_TO_ADDR
// hc_agressivity := 20 ;
15585: LD_ADDR_OWVAR 35
15589: PUSH
15590: LD_INT 20
15592: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15593: LD_ADDR_OWVAR 28
15597: PUSH
15598: LD_INT 17
15600: ST_TO_ADDR
// hc_gallery :=  ;
15601: LD_ADDR_OWVAR 33
15605: PUSH
15606: LD_STRING 
15608: ST_TO_ADDR
// hc_name :=  ;
15609: LD_ADDR_OWVAR 26
15613: PUSH
15614: LD_STRING 
15616: ST_TO_ADDR
// un := CreateHuman ;
15617: LD_ADDR_VAR 0 2
15621: PUSH
15622: CALL_OW 44
15626: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15627: LD_VAR 0 2
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: CALL_OW 51
// tmp := tmp ^ un ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: LD_VAR 0 3
15648: PUSH
15649: LD_VAR 0 2
15653: ADD
15654: ST_TO_ADDR
// end ;
15655: GO 15551
15657: POP
15658: POP
// repeat wait ( 0 0$1 ) ;
15659: LD_INT 35
15661: PPUSH
15662: CALL_OW 67
// for un in tmp do
15666: LD_ADDR_VAR 0 2
15670: PUSH
15671: LD_VAR 0 3
15675: PUSH
15676: FOR_IN
15677: IFFALSE 15751
// begin if IsDead ( un ) then
15679: LD_VAR 0 2
15683: PPUSH
15684: CALL_OW 301
15688: IFFALSE 15708
// begin tmp := tmp diff un ;
15690: LD_ADDR_VAR 0 3
15694: PUSH
15695: LD_VAR 0 3
15699: PUSH
15700: LD_VAR 0 2
15704: DIFF
15705: ST_TO_ADDR
// continue ;
15706: GO 15676
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15708: LD_VAR 0 2
15712: PPUSH
15713: LD_INT 3
15715: PUSH
15716: LD_INT 22
15718: PUSH
15719: LD_INT 0
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PPUSH
15730: CALL_OW 69
15734: PPUSH
15735: LD_VAR 0 2
15739: PPUSH
15740: CALL_OW 74
15744: PPUSH
15745: CALL_OW 115
// end ;
15749: GO 15676
15751: POP
15752: POP
// until not tmp ;
15753: LD_VAR 0 3
15757: NOT
15758: IFFALSE 15659
// end ;
15760: PPOPN 3
15762: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15763: LD_EXP 25
15767: PUSH
15768: LD_EXP 50
15772: AND
15773: IFFALSE 15827
15775: GO 15777
15777: DISABLE
// begin ToLua ( displayTroll(); ) ;
15778: LD_STRING displayTroll();
15780: PPUSH
15781: CALL_OW 559
// wait ( 3 3$00 ) ;
15785: LD_INT 6300
15787: PPUSH
15788: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15792: LD_STRING hideTroll();
15794: PPUSH
15795: CALL_OW 559
// wait ( 1 1$00 ) ;
15799: LD_INT 2100
15801: PPUSH
15802: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15806: LD_STRING displayTroll();
15808: PPUSH
15809: CALL_OW 559
// wait ( 1 1$00 ) ;
15813: LD_INT 2100
15815: PPUSH
15816: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15820: LD_STRING hideTroll();
15822: PPUSH
15823: CALL_OW 559
// end ;
15827: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15828: LD_EXP 25
15832: PUSH
15833: LD_EXP 51
15837: AND
15838: IFFALSE 15901
15840: GO 15842
15842: DISABLE
15843: LD_INT 0
15845: PPUSH
// begin p := 0 ;
15846: LD_ADDR_VAR 0 1
15850: PUSH
15851: LD_INT 0
15853: ST_TO_ADDR
// repeat game_speed := 1 ;
15854: LD_ADDR_OWVAR 65
15858: PUSH
15859: LD_INT 1
15861: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15862: LD_INT 35
15864: PPUSH
15865: CALL_OW 67
// p := p + 1 ;
15869: LD_ADDR_VAR 0 1
15873: PUSH
15874: LD_VAR 0 1
15878: PUSH
15879: LD_INT 1
15881: PLUS
15882: ST_TO_ADDR
// until p >= 60 ;
15883: LD_VAR 0 1
15887: PUSH
15888: LD_INT 60
15890: GREATEREQUAL
15891: IFFALSE 15854
// game_speed := 4 ;
15893: LD_ADDR_OWVAR 65
15897: PUSH
15898: LD_INT 4
15900: ST_TO_ADDR
// end ;
15901: PPOPN 1
15903: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15904: LD_EXP 25
15908: PUSH
15909: LD_EXP 52
15913: AND
15914: IFFALSE 16060
15916: GO 15918
15918: DISABLE
15919: LD_INT 0
15921: PPUSH
15922: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15923: LD_ADDR_VAR 0 1
15927: PUSH
15928: LD_INT 22
15930: PUSH
15931: LD_OWVAR 2
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 2
15942: PUSH
15943: LD_INT 30
15945: PUSH
15946: LD_INT 0
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 30
15955: PUSH
15956: LD_INT 1
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: LIST
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PPUSH
15972: CALL_OW 69
15976: ST_TO_ADDR
// if not depot then
15977: LD_VAR 0 1
15981: NOT
15982: IFFALSE 15986
// exit ;
15984: GO 16060
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15986: LD_ADDR_VAR 0 2
15990: PUSH
15991: LD_VAR 0 1
15995: PUSH
15996: LD_INT 1
15998: PPUSH
15999: LD_VAR 0 1
16003: PPUSH
16004: CALL_OW 12
16008: ARRAY
16009: PPUSH
16010: CALL_OW 274
16014: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16015: LD_VAR 0 2
16019: PPUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_INT 0
16025: PPUSH
16026: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16030: LD_VAR 0 2
16034: PPUSH
16035: LD_INT 2
16037: PPUSH
16038: LD_INT 0
16040: PPUSH
16041: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16045: LD_VAR 0 2
16049: PPUSH
16050: LD_INT 3
16052: PPUSH
16053: LD_INT 0
16055: PPUSH
16056: CALL_OW 277
// end ;
16060: PPOPN 2
16062: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16063: LD_EXP 25
16067: PUSH
16068: LD_EXP 53
16072: AND
16073: IFFALSE 16170
16075: GO 16077
16077: DISABLE
16078: LD_INT 0
16080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16081: LD_ADDR_VAR 0 1
16085: PUSH
16086: LD_INT 22
16088: PUSH
16089: LD_OWVAR 2
16093: PUSH
16094: EMPTY
16095: LIST
16096: LIST
16097: PUSH
16098: LD_INT 21
16100: PUSH
16101: LD_INT 1
16103: PUSH
16104: EMPTY
16105: LIST
16106: LIST
16107: PUSH
16108: LD_INT 3
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 0
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PPUSH
16130: CALL_OW 69
16134: ST_TO_ADDR
// if not tmp then
16135: LD_VAR 0 1
16139: NOT
16140: IFFALSE 16144
// exit ;
16142: GO 16170
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16144: LD_VAR 0 1
16148: PUSH
16149: LD_INT 1
16151: PPUSH
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 12
16161: ARRAY
16162: PPUSH
16163: LD_INT 200
16165: PPUSH
16166: CALL_OW 234
// end ;
16170: PPOPN 1
16172: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16173: LD_EXP 25
16177: PUSH
16178: LD_EXP 54
16182: AND
16183: IFFALSE 16262
16185: GO 16187
16187: DISABLE
16188: LD_INT 0
16190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16191: LD_ADDR_VAR 0 1
16195: PUSH
16196: LD_INT 22
16198: PUSH
16199: LD_OWVAR 2
16203: PUSH
16204: EMPTY
16205: LIST
16206: LIST
16207: PUSH
16208: LD_INT 21
16210: PUSH
16211: LD_INT 2
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PPUSH
16222: CALL_OW 69
16226: ST_TO_ADDR
// if not tmp then
16227: LD_VAR 0 1
16231: NOT
16232: IFFALSE 16236
// exit ;
16234: GO 16262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16236: LD_VAR 0 1
16240: PUSH
16241: LD_INT 1
16243: PPUSH
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 12
16253: ARRAY
16254: PPUSH
16255: LD_INT 60
16257: PPUSH
16258: CALL_OW 234
// end ;
16262: PPOPN 1
16264: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16265: LD_EXP 25
16269: PUSH
16270: LD_EXP 55
16274: AND
16275: IFFALSE 16374
16277: GO 16279
16279: DISABLE
16280: LD_INT 0
16282: PPUSH
16283: PPUSH
// begin enable ;
16284: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 61
16304: PUSH
16305: EMPTY
16306: LIST
16307: PUSH
16308: LD_INT 33
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: EMPTY
16319: LIST
16320: LIST
16321: LIST
16322: PPUSH
16323: CALL_OW 69
16327: ST_TO_ADDR
// if not tmp then
16328: LD_VAR 0 1
16332: NOT
16333: IFFALSE 16337
// exit ;
16335: GO 16374
// for i in tmp do
16337: LD_ADDR_VAR 0 2
16341: PUSH
16342: LD_VAR 0 1
16346: PUSH
16347: FOR_IN
16348: IFFALSE 16372
// if IsControledBy ( i ) then
16350: LD_VAR 0 2
16354: PPUSH
16355: CALL_OW 312
16359: IFFALSE 16370
// ComUnlink ( i ) ;
16361: LD_VAR 0 2
16365: PPUSH
16366: CALL_OW 136
16370: GO 16347
16372: POP
16373: POP
// end ;
16374: PPOPN 2
16376: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16377: LD_EXP 25
16381: PUSH
16382: LD_EXP 56
16386: AND
16387: IFFALSE 16527
16389: GO 16391
16391: DISABLE
16392: LD_INT 0
16394: PPUSH
16395: PPUSH
// begin ToLua ( displayPowell(); ) ;
16396: LD_STRING displayPowell();
16398: PPUSH
16399: CALL_OW 559
// uc_side := 0 ;
16403: LD_ADDR_OWVAR 20
16407: PUSH
16408: LD_INT 0
16410: ST_TO_ADDR
// uc_nation := 2 ;
16411: LD_ADDR_OWVAR 21
16415: PUSH
16416: LD_INT 2
16418: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16419: LD_ADDR_OWVAR 37
16423: PUSH
16424: LD_INT 14
16426: ST_TO_ADDR
// vc_engine := engine_siberite ;
16427: LD_ADDR_OWVAR 39
16431: PUSH
16432: LD_INT 3
16434: ST_TO_ADDR
// vc_control := control_apeman ;
16435: LD_ADDR_OWVAR 38
16439: PUSH
16440: LD_INT 5
16442: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16443: LD_ADDR_OWVAR 40
16447: PUSH
16448: LD_INT 29
16450: ST_TO_ADDR
// un := CreateVehicle ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: CALL_OW 45
16460: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16461: LD_VAR 0 2
16465: PPUSH
16466: LD_INT 1
16468: PPUSH
16469: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16473: LD_INT 35
16475: PPUSH
16476: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_INT 22
16487: PUSH
16488: LD_OWVAR 2
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: PPUSH
16497: CALL_OW 69
16501: PPUSH
16502: LD_VAR 0 2
16506: PPUSH
16507: CALL_OW 74
16511: PPUSH
16512: CALL_OW 115
// until IsDead ( un ) ;
16516: LD_VAR 0 2
16520: PPUSH
16521: CALL_OW 301
16525: IFFALSE 16473
// end ;
16527: PPOPN 2
16529: END
// every 0 0$1 trigger StreamModeActive and sStu do
16530: LD_EXP 25
16534: PUSH
16535: LD_EXP 64
16539: AND
16540: IFFALSE 16556
16542: GO 16544
16544: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16545: LD_STRING displayStucuk();
16547: PPUSH
16548: CALL_OW 559
// ResetFog ;
16552: CALL_OW 335
// end ;
16556: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16557: LD_EXP 25
16561: PUSH
16562: LD_EXP 57
16566: AND
16567: IFFALSE 16708
16569: GO 16571
16571: DISABLE
16572: LD_INT 0
16574: PPUSH
16575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: LD_INT 22
16583: PUSH
16584: LD_OWVAR 2
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 21
16595: PUSH
16596: LD_INT 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: PPUSH
16607: CALL_OW 69
16611: ST_TO_ADDR
// if not tmp then
16612: LD_VAR 0 2
16616: NOT
16617: IFFALSE 16621
// exit ;
16619: GO 16708
// un := tmp [ rand ( 1 , tmp ) ] ;
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_VAR 0 2
16630: PUSH
16631: LD_INT 1
16633: PPUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 12
16643: ARRAY
16644: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_INT 0
16652: PPUSH
16653: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16657: LD_VAR 0 1
16661: PPUSH
16662: LD_OWVAR 3
16666: PUSH
16667: LD_VAR 0 1
16671: DIFF
16672: PPUSH
16673: LD_VAR 0 1
16677: PPUSH
16678: CALL_OW 74
16682: PPUSH
16683: CALL_OW 115
// wait ( 0 0$20 ) ;
16687: LD_INT 700
16689: PPUSH
16690: CALL_OW 67
// SetSide ( un , your_side ) ;
16694: LD_VAR 0 1
16698: PPUSH
16699: LD_OWVAR 2
16703: PPUSH
16704: CALL_OW 235
// end ;
16708: PPOPN 2
16710: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16711: LD_EXP 25
16715: PUSH
16716: LD_EXP 58
16720: AND
16721: IFFALSE 16827
16723: GO 16725
16725: DISABLE
16726: LD_INT 0
16728: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16729: LD_ADDR_VAR 0 1
16733: PUSH
16734: LD_INT 22
16736: PUSH
16737: LD_OWVAR 2
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 2
16748: PUSH
16749: LD_INT 30
16751: PUSH
16752: LD_INT 0
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 30
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: ST_TO_ADDR
// if not depot then
16783: LD_VAR 0 1
16787: NOT
16788: IFFALSE 16792
// exit ;
16790: GO 16827
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16792: LD_VAR 0 1
16796: PUSH
16797: LD_INT 1
16799: ARRAY
16800: PPUSH
16801: CALL_OW 250
16805: PPUSH
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: ARRAY
16814: PPUSH
16815: CALL_OW 251
16819: PPUSH
16820: LD_INT 70
16822: PPUSH
16823: CALL_OW 495
// end ;
16827: PPOPN 1
16829: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16830: LD_EXP 25
16834: PUSH
16835: LD_EXP 59
16839: AND
16840: IFFALSE 17051
16842: GO 16844
16844: DISABLE
16845: LD_INT 0
16847: PPUSH
16848: PPUSH
16849: PPUSH
16850: PPUSH
16851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16852: LD_ADDR_VAR 0 5
16856: PUSH
16857: LD_INT 22
16859: PUSH
16860: LD_OWVAR 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 21
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PPUSH
16883: CALL_OW 69
16887: ST_TO_ADDR
// if not tmp then
16888: LD_VAR 0 5
16892: NOT
16893: IFFALSE 16897
// exit ;
16895: GO 17051
// for i in tmp do
16897: LD_ADDR_VAR 0 1
16901: PUSH
16902: LD_VAR 0 5
16906: PUSH
16907: FOR_IN
16908: IFFALSE 17049
// begin d := rand ( 0 , 5 ) ;
16910: LD_ADDR_VAR 0 4
16914: PUSH
16915: LD_INT 0
16917: PPUSH
16918: LD_INT 5
16920: PPUSH
16921: CALL_OW 12
16925: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16926: LD_ADDR_VAR 0 2
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: CALL_OW 250
16940: PPUSH
16941: LD_VAR 0 4
16945: PPUSH
16946: LD_INT 3
16948: PPUSH
16949: LD_INT 12
16951: PPUSH
16952: CALL_OW 12
16956: PPUSH
16957: CALL_OW 272
16961: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16962: LD_ADDR_VAR 0 3
16966: PUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 251
16976: PPUSH
16977: LD_VAR 0 4
16981: PPUSH
16982: LD_INT 3
16984: PPUSH
16985: LD_INT 12
16987: PPUSH
16988: CALL_OW 12
16992: PPUSH
16993: CALL_OW 273
16997: ST_TO_ADDR
// if ValidHex ( x , y ) then
16998: LD_VAR 0 2
17002: PPUSH
17003: LD_VAR 0 3
17007: PPUSH
17008: CALL_OW 488
17012: IFFALSE 17047
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17014: LD_VAR 0 1
17018: PPUSH
17019: LD_VAR 0 2
17023: PPUSH
17024: LD_VAR 0 3
17028: PPUSH
17029: LD_INT 3
17031: PPUSH
17032: LD_INT 6
17034: PPUSH
17035: CALL_OW 12
17039: PPUSH
17040: LD_INT 1
17042: PPUSH
17043: CALL_OW 483
// end ;
17047: GO 16907
17049: POP
17050: POP
// end ;
17051: PPOPN 5
17053: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17054: LD_EXP 25
17058: PUSH
17059: LD_EXP 60
17063: AND
17064: IFFALSE 17158
17066: GO 17068
17068: DISABLE
17069: LD_INT 0
17071: PPUSH
17072: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17073: LD_ADDR_VAR 0 2
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 32
17092: PUSH
17093: LD_INT 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 21
17102: PUSH
17103: LD_INT 2
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: LIST
17114: PPUSH
17115: CALL_OW 69
17119: ST_TO_ADDR
// if not tmp then
17120: LD_VAR 0 2
17124: NOT
17125: IFFALSE 17129
// exit ;
17127: GO 17158
// for i in tmp do
17129: LD_ADDR_VAR 0 1
17133: PUSH
17134: LD_VAR 0 2
17138: PUSH
17139: FOR_IN
17140: IFFALSE 17156
// SetFuel ( i , 0 ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_INT 0
17149: PPUSH
17150: CALL_OW 240
17154: GO 17139
17156: POP
17157: POP
// end ;
17158: PPOPN 2
17160: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17161: LD_EXP 25
17165: PUSH
17166: LD_EXP 61
17170: AND
17171: IFFALSE 17237
17173: GO 17175
17175: DISABLE
17176: LD_INT 0
17178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17179: LD_ADDR_VAR 0 1
17183: PUSH
17184: LD_INT 22
17186: PUSH
17187: LD_OWVAR 2
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 30
17198: PUSH
17199: LD_INT 29
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: ST_TO_ADDR
// if not tmp then
17215: LD_VAR 0 1
17219: NOT
17220: IFFALSE 17224
// exit ;
17222: GO 17237
// DestroyUnit ( tmp [ 1 ] ) ;
17224: LD_VAR 0 1
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PPUSH
17233: CALL_OW 65
// end ;
17237: PPOPN 1
17239: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17240: LD_EXP 25
17244: PUSH
17245: LD_EXP 63
17249: AND
17250: IFFALSE 17379
17252: GO 17254
17254: DISABLE
17255: LD_INT 0
17257: PPUSH
// begin uc_side := 0 ;
17258: LD_ADDR_OWVAR 20
17262: PUSH
17263: LD_INT 0
17265: ST_TO_ADDR
// uc_nation := nation_arabian ;
17266: LD_ADDR_OWVAR 21
17270: PUSH
17271: LD_INT 2
17273: ST_TO_ADDR
// hc_gallery :=  ;
17274: LD_ADDR_OWVAR 33
17278: PUSH
17279: LD_STRING 
17281: ST_TO_ADDR
// hc_name :=  ;
17282: LD_ADDR_OWVAR 26
17286: PUSH
17287: LD_STRING 
17289: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17290: LD_INT 1
17292: PPUSH
17293: LD_INT 11
17295: PPUSH
17296: LD_INT 10
17298: PPUSH
17299: CALL_OW 380
// un := CreateHuman ;
17303: LD_ADDR_VAR 0 1
17307: PUSH
17308: CALL_OW 44
17312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17313: LD_VAR 0 1
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17325: LD_INT 35
17327: PPUSH
17328: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17332: LD_VAR 0 1
17336: PPUSH
17337: LD_INT 22
17339: PUSH
17340: LD_OWVAR 2
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PPUSH
17349: CALL_OW 69
17353: PPUSH
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 74
17363: PPUSH
17364: CALL_OW 115
// until IsDead ( un ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 301
17377: IFFALSE 17325
// end ;
17379: PPOPN 1
17381: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17382: LD_EXP 25
17386: PUSH
17387: LD_EXP 65
17391: AND
17392: IFFALSE 17404
17394: GO 17396
17396: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17397: LD_STRING earthquake(getX(game), 0, 32)
17399: PPUSH
17400: CALL_OW 559
17404: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17405: LD_EXP 25
17409: PUSH
17410: LD_EXP 66
17414: AND
17415: IFFALSE 17506
17417: GO 17419
17419: DISABLE
17420: LD_INT 0
17422: PPUSH
// begin enable ;
17423: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17424: LD_ADDR_VAR 0 1
17428: PUSH
17429: LD_INT 22
17431: PUSH
17432: LD_OWVAR 2
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 21
17443: PUSH
17444: LD_INT 2
17446: PUSH
17447: EMPTY
17448: LIST
17449: LIST
17450: PUSH
17451: LD_INT 33
17453: PUSH
17454: LD_INT 3
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: EMPTY
17462: LIST
17463: LIST
17464: LIST
17465: PPUSH
17466: CALL_OW 69
17470: ST_TO_ADDR
// if not tmp then
17471: LD_VAR 0 1
17475: NOT
17476: IFFALSE 17480
// exit ;
17478: GO 17506
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17480: LD_VAR 0 1
17484: PUSH
17485: LD_INT 1
17487: PPUSH
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 12
17497: ARRAY
17498: PPUSH
17499: LD_INT 1
17501: PPUSH
17502: CALL_OW 234
// end ;
17506: PPOPN 1
17508: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17509: LD_EXP 25
17513: PUSH
17514: LD_EXP 67
17518: AND
17519: IFFALSE 17660
17521: GO 17523
17523: DISABLE
17524: LD_INT 0
17526: PPUSH
17527: PPUSH
17528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17529: LD_ADDR_VAR 0 3
17533: PUSH
17534: LD_INT 22
17536: PUSH
17537: LD_OWVAR 2
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 25
17548: PUSH
17549: LD_INT 1
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PPUSH
17560: CALL_OW 69
17564: ST_TO_ADDR
// if not tmp then
17565: LD_VAR 0 3
17569: NOT
17570: IFFALSE 17574
// exit ;
17572: GO 17660
// un := tmp [ rand ( 1 , tmp ) ] ;
17574: LD_ADDR_VAR 0 2
17578: PUSH
17579: LD_VAR 0 3
17583: PUSH
17584: LD_INT 1
17586: PPUSH
17587: LD_VAR 0 3
17591: PPUSH
17592: CALL_OW 12
17596: ARRAY
17597: ST_TO_ADDR
// if Crawls ( un ) then
17598: LD_VAR 0 2
17602: PPUSH
17603: CALL_OW 318
17607: IFFALSE 17618
// ComWalk ( un ) ;
17609: LD_VAR 0 2
17613: PPUSH
17614: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17618: LD_VAR 0 2
17622: PPUSH
17623: LD_INT 9
17625: PPUSH
17626: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17630: LD_INT 28
17632: PPUSH
17633: LD_OWVAR 2
17637: PPUSH
17638: LD_INT 2
17640: PPUSH
17641: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17645: LD_INT 29
17647: PPUSH
17648: LD_OWVAR 2
17652: PPUSH
17653: LD_INT 2
17655: PPUSH
17656: CALL_OW 322
// end ;
17660: PPOPN 3
17662: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17663: LD_EXP 25
17667: PUSH
17668: LD_EXP 68
17672: AND
17673: IFFALSE 17784
17675: GO 17677
17677: DISABLE
17678: LD_INT 0
17680: PPUSH
17681: PPUSH
17682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 22
17690: PUSH
17691: LD_OWVAR 2
17695: PUSH
17696: EMPTY
17697: LIST
17698: LIST
17699: PUSH
17700: LD_INT 25
17702: PUSH
17703: LD_INT 1
17705: PUSH
17706: EMPTY
17707: LIST
17708: LIST
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PPUSH
17714: CALL_OW 69
17718: ST_TO_ADDR
// if not tmp then
17719: LD_VAR 0 3
17723: NOT
17724: IFFALSE 17728
// exit ;
17726: GO 17784
// un := tmp [ rand ( 1 , tmp ) ] ;
17728: LD_ADDR_VAR 0 2
17732: PUSH
17733: LD_VAR 0 3
17737: PUSH
17738: LD_INT 1
17740: PPUSH
17741: LD_VAR 0 3
17745: PPUSH
17746: CALL_OW 12
17750: ARRAY
17751: ST_TO_ADDR
// if Crawls ( un ) then
17752: LD_VAR 0 2
17756: PPUSH
17757: CALL_OW 318
17761: IFFALSE 17772
// ComWalk ( un ) ;
17763: LD_VAR 0 2
17767: PPUSH
17768: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17772: LD_VAR 0 2
17776: PPUSH
17777: LD_INT 8
17779: PPUSH
17780: CALL_OW 336
// end ;
17784: PPOPN 3
17786: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17787: LD_EXP 25
17791: PUSH
17792: LD_EXP 69
17796: AND
17797: IFFALSE 17941
17799: GO 17801
17801: DISABLE
17802: LD_INT 0
17804: PPUSH
17805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_INT 22
17813: PUSH
17814: LD_OWVAR 2
17818: PUSH
17819: EMPTY
17820: LIST
17821: LIST
17822: PUSH
17823: LD_INT 21
17825: PUSH
17826: LD_INT 2
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 2
17835: PUSH
17836: LD_INT 34
17838: PUSH
17839: LD_INT 12
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: LD_INT 34
17848: PUSH
17849: LD_INT 51
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: PUSH
17856: LD_INT 34
17858: PUSH
17859: LD_INT 32
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: LIST
17876: PPUSH
17877: CALL_OW 69
17881: ST_TO_ADDR
// if not tmp then
17882: LD_VAR 0 2
17886: NOT
17887: IFFALSE 17891
// exit ;
17889: GO 17941
// for i in tmp do
17891: LD_ADDR_VAR 0 1
17895: PUSH
17896: LD_VAR 0 2
17900: PUSH
17901: FOR_IN
17902: IFFALSE 17939
// if GetCargo ( i , mat_artifact ) = 0 then
17904: LD_VAR 0 1
17908: PPUSH
17909: LD_INT 4
17911: PPUSH
17912: CALL_OW 289
17916: PUSH
17917: LD_INT 0
17919: EQUAL
17920: IFFALSE 17937
// SetCargo ( i , mat_siberit , 100 ) ;
17922: LD_VAR 0 1
17926: PPUSH
17927: LD_INT 3
17929: PPUSH
17930: LD_INT 100
17932: PPUSH
17933: CALL_OW 290
17937: GO 17901
17939: POP
17940: POP
// end ;
17941: PPOPN 2
17943: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17944: LD_EXP 25
17948: PUSH
17949: LD_EXP 70
17953: AND
17954: IFFALSE 18137
17956: GO 17958
17958: DISABLE
17959: LD_INT 0
17961: PPUSH
17962: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17963: LD_ADDR_VAR 0 2
17967: PUSH
17968: LD_INT 22
17970: PUSH
17971: LD_OWVAR 2
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PPUSH
17980: CALL_OW 69
17984: ST_TO_ADDR
// if not tmp then
17985: LD_VAR 0 2
17989: NOT
17990: IFFALSE 17994
// exit ;
17992: GO 18137
// for i := 1 to 2 do
17994: LD_ADDR_VAR 0 1
17998: PUSH
17999: DOUBLE
18000: LD_INT 1
18002: DEC
18003: ST_TO_ADDR
18004: LD_INT 2
18006: PUSH
18007: FOR_TO
18008: IFFALSE 18135
// begin uc_side := your_side ;
18010: LD_ADDR_OWVAR 20
18014: PUSH
18015: LD_OWVAR 2
18019: ST_TO_ADDR
// uc_nation := nation_american ;
18020: LD_ADDR_OWVAR 21
18024: PUSH
18025: LD_INT 1
18027: ST_TO_ADDR
// vc_chassis := us_morphling ;
18028: LD_ADDR_OWVAR 37
18032: PUSH
18033: LD_INT 5
18035: ST_TO_ADDR
// vc_engine := engine_siberite ;
18036: LD_ADDR_OWVAR 39
18040: PUSH
18041: LD_INT 3
18043: ST_TO_ADDR
// vc_control := control_computer ;
18044: LD_ADDR_OWVAR 38
18048: PUSH
18049: LD_INT 3
18051: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18052: LD_ADDR_OWVAR 40
18056: PUSH
18057: LD_INT 10
18059: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18060: LD_VAR 0 2
18064: PUSH
18065: LD_INT 1
18067: ARRAY
18068: PPUSH
18069: CALL_OW 310
18073: NOT
18074: IFFALSE 18121
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18076: CALL_OW 45
18080: PPUSH
18081: LD_VAR 0 2
18085: PUSH
18086: LD_INT 1
18088: ARRAY
18089: PPUSH
18090: CALL_OW 250
18094: PPUSH
18095: LD_VAR 0 2
18099: PUSH
18100: LD_INT 1
18102: ARRAY
18103: PPUSH
18104: CALL_OW 251
18108: PPUSH
18109: LD_INT 12
18111: PPUSH
18112: LD_INT 1
18114: PPUSH
18115: CALL_OW 50
18119: GO 18133
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18121: CALL_OW 45
18125: PPUSH
18126: LD_INT 1
18128: PPUSH
18129: CALL_OW 51
// end ;
18133: GO 18007
18135: POP
18136: POP
// end ;
18137: PPOPN 2
18139: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18140: LD_EXP 25
18144: PUSH
18145: LD_EXP 71
18149: AND
18150: IFFALSE 18372
18152: GO 18154
18154: DISABLE
18155: LD_INT 0
18157: PPUSH
18158: PPUSH
18159: PPUSH
18160: PPUSH
18161: PPUSH
18162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18163: LD_ADDR_VAR 0 6
18167: PUSH
18168: LD_INT 22
18170: PUSH
18171: LD_OWVAR 2
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: LD_INT 21
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 3
18192: PUSH
18193: LD_INT 23
18195: PUSH
18196: LD_INT 0
18198: PUSH
18199: EMPTY
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: PPUSH
18212: CALL_OW 69
18216: ST_TO_ADDR
// if not tmp then
18217: LD_VAR 0 6
18221: NOT
18222: IFFALSE 18226
// exit ;
18224: GO 18372
// s1 := rand ( 1 , 4 ) ;
18226: LD_ADDR_VAR 0 2
18230: PUSH
18231: LD_INT 1
18233: PPUSH
18234: LD_INT 4
18236: PPUSH
18237: CALL_OW 12
18241: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18242: LD_ADDR_VAR 0 4
18246: PUSH
18247: LD_VAR 0 6
18251: PUSH
18252: LD_INT 1
18254: ARRAY
18255: PPUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 259
18265: ST_TO_ADDR
// if s1 = 1 then
18266: LD_VAR 0 2
18270: PUSH
18271: LD_INT 1
18273: EQUAL
18274: IFFALSE 18294
// s2 := rand ( 2 , 4 ) else
18276: LD_ADDR_VAR 0 3
18280: PUSH
18281: LD_INT 2
18283: PPUSH
18284: LD_INT 4
18286: PPUSH
18287: CALL_OW 12
18291: ST_TO_ADDR
18292: GO 18302
// s2 := 1 ;
18294: LD_ADDR_VAR 0 3
18298: PUSH
18299: LD_INT 1
18301: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18302: LD_ADDR_VAR 0 5
18306: PUSH
18307: LD_VAR 0 6
18311: PUSH
18312: LD_INT 1
18314: ARRAY
18315: PPUSH
18316: LD_VAR 0 3
18320: PPUSH
18321: CALL_OW 259
18325: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18326: LD_VAR 0 6
18330: PUSH
18331: LD_INT 1
18333: ARRAY
18334: PPUSH
18335: LD_VAR 0 2
18339: PPUSH
18340: LD_VAR 0 5
18344: PPUSH
18345: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18349: LD_VAR 0 6
18353: PUSH
18354: LD_INT 1
18356: ARRAY
18357: PPUSH
18358: LD_VAR 0 3
18362: PPUSH
18363: LD_VAR 0 4
18367: PPUSH
18368: CALL_OW 237
// end ;
18372: PPOPN 6
18374: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18375: LD_EXP 25
18379: PUSH
18380: LD_EXP 72
18384: AND
18385: IFFALSE 18464
18387: GO 18389
18389: DISABLE
18390: LD_INT 0
18392: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_INT 22
18400: PUSH
18401: LD_OWVAR 2
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 30
18412: PUSH
18413: LD_INT 3
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PPUSH
18424: CALL_OW 69
18428: ST_TO_ADDR
// if not tmp then
18429: LD_VAR 0 1
18433: NOT
18434: IFFALSE 18438
// exit ;
18436: GO 18464
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18438: LD_VAR 0 1
18442: PUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_VAR 0 1
18450: PPUSH
18451: CALL_OW 12
18455: ARRAY
18456: PPUSH
18457: LD_INT 1
18459: PPUSH
18460: CALL_OW 234
// end ;
18464: PPOPN 1
18466: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18467: LD_EXP 25
18471: PUSH
18472: LD_EXP 73
18476: AND
18477: IFFALSE 18589
18479: GO 18481
18481: DISABLE
18482: LD_INT 0
18484: PPUSH
18485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 2
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: LD_INT 27
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: LD_INT 30
18518: PUSH
18519: LD_INT 26
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 30
18528: PUSH
18529: LD_INT 28
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 2
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18589
// for i in tmp do
18560: LD_ADDR_VAR 0 1
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18587
// SetLives ( i , 1 ) ;
18573: LD_VAR 0 1
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 234
18585: GO 18570
18587: POP
18588: POP
// end ;
18589: PPOPN 2
18591: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18592: LD_EXP 25
18596: PUSH
18597: LD_EXP 74
18601: AND
18602: IFFALSE 18889
18604: GO 18606
18606: DISABLE
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
18611: PPUSH
// begin i := rand ( 1 , 7 ) ;
18612: LD_ADDR_VAR 0 1
18616: PUSH
18617: LD_INT 1
18619: PPUSH
18620: LD_INT 7
18622: PPUSH
18623: CALL_OW 12
18627: ST_TO_ADDR
// case i of 1 :
18628: LD_VAR 0 1
18632: PUSH
18633: LD_INT 1
18635: DOUBLE
18636: EQUAL
18637: IFTRUE 18641
18639: GO 18651
18641: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18642: LD_STRING earthquake(getX(game), 0, 32)
18644: PPUSH
18645: CALL_OW 559
18649: GO 18889
18651: LD_INT 2
18653: DOUBLE
18654: EQUAL
18655: IFTRUE 18659
18657: GO 18673
18659: POP
// begin ToLua ( displayStucuk(); ) ;
18660: LD_STRING displayStucuk();
18662: PPUSH
18663: CALL_OW 559
// ResetFog ;
18667: CALL_OW 335
// end ; 3 :
18671: GO 18889
18673: LD_INT 3
18675: DOUBLE
18676: EQUAL
18677: IFTRUE 18681
18679: GO 18785
18681: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18682: LD_ADDR_VAR 0 2
18686: PUSH
18687: LD_INT 22
18689: PUSH
18690: LD_OWVAR 2
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 25
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PPUSH
18713: CALL_OW 69
18717: ST_TO_ADDR
// if not tmp then
18718: LD_VAR 0 2
18722: NOT
18723: IFFALSE 18727
// exit ;
18725: GO 18889
// un := tmp [ rand ( 1 , tmp ) ] ;
18727: LD_ADDR_VAR 0 3
18731: PUSH
18732: LD_VAR 0 2
18736: PUSH
18737: LD_INT 1
18739: PPUSH
18740: LD_VAR 0 2
18744: PPUSH
18745: CALL_OW 12
18749: ARRAY
18750: ST_TO_ADDR
// if Crawls ( un ) then
18751: LD_VAR 0 3
18755: PPUSH
18756: CALL_OW 318
18760: IFFALSE 18771
// ComWalk ( un ) ;
18762: LD_VAR 0 3
18766: PPUSH
18767: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18771: LD_VAR 0 3
18775: PPUSH
18776: LD_INT 8
18778: PPUSH
18779: CALL_OW 336
// end ; 4 :
18783: GO 18889
18785: LD_INT 4
18787: DOUBLE
18788: EQUAL
18789: IFTRUE 18793
18791: GO 18867
18793: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18794: LD_ADDR_VAR 0 2
18798: PUSH
18799: LD_INT 22
18801: PUSH
18802: LD_OWVAR 2
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: PUSH
18811: LD_INT 30
18813: PUSH
18814: LD_INT 29
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PPUSH
18825: CALL_OW 69
18829: ST_TO_ADDR
// if not tmp then
18830: LD_VAR 0 2
18834: NOT
18835: IFFALSE 18839
// exit ;
18837: GO 18889
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18839: LD_VAR 0 2
18843: PUSH
18844: LD_INT 1
18846: ARRAY
18847: PPUSH
18848: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18852: LD_VAR 0 2
18856: PUSH
18857: LD_INT 1
18859: ARRAY
18860: PPUSH
18861: CALL_OW 65
// end ; 5 .. 7 :
18865: GO 18889
18867: LD_INT 5
18869: DOUBLE
18870: GREATEREQUAL
18871: IFFALSE 18879
18873: LD_INT 7
18875: DOUBLE
18876: LESSEQUAL
18877: IFTRUE 18881
18879: GO 18888
18881: POP
// StreamSibBomb ; end ;
18882: CALL 15126 0 0
18886: GO 18889
18888: POP
// end ;
18889: PPOPN 3
18891: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18892: LD_EXP 25
18896: PUSH
18897: LD_EXP 75
18901: AND
18902: IFFALSE 19058
18904: GO 18906
18906: DISABLE
18907: LD_INT 0
18909: PPUSH
18910: PPUSH
18911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18912: LD_ADDR_VAR 0 2
18916: PUSH
18917: LD_INT 81
18919: PUSH
18920: LD_OWVAR 2
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: LD_INT 2
18931: PUSH
18932: LD_INT 21
18934: PUSH
18935: LD_INT 1
18937: PUSH
18938: EMPTY
18939: LIST
18940: LIST
18941: PUSH
18942: LD_INT 21
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PPUSH
18961: CALL_OW 69
18965: ST_TO_ADDR
// if not tmp then
18966: LD_VAR 0 2
18970: NOT
18971: IFFALSE 18975
// exit ;
18973: GO 19058
// p := 0 ;
18975: LD_ADDR_VAR 0 3
18979: PUSH
18980: LD_INT 0
18982: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18983: LD_INT 35
18985: PPUSH
18986: CALL_OW 67
// p := p + 1 ;
18990: LD_ADDR_VAR 0 3
18994: PUSH
18995: LD_VAR 0 3
18999: PUSH
19000: LD_INT 1
19002: PLUS
19003: ST_TO_ADDR
// for i in tmp do
19004: LD_ADDR_VAR 0 1
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: FOR_IN
19015: IFFALSE 19046
// if GetLives ( i ) < 1000 then
19017: LD_VAR 0 1
19021: PPUSH
19022: CALL_OW 256
19026: PUSH
19027: LD_INT 1000
19029: LESS
19030: IFFALSE 19044
// SetLives ( i , 1000 ) ;
19032: LD_VAR 0 1
19036: PPUSH
19037: LD_INT 1000
19039: PPUSH
19040: CALL_OW 234
19044: GO 19014
19046: POP
19047: POP
// until p > 20 ;
19048: LD_VAR 0 3
19052: PUSH
19053: LD_INT 20
19055: GREATER
19056: IFFALSE 18983
// end ;
19058: PPOPN 3
19060: END
// every 0 0$1 trigger StreamModeActive and sTime do
19061: LD_EXP 25
19065: PUSH
19066: LD_EXP 76
19070: AND
19071: IFFALSE 19106
19073: GO 19075
19075: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19076: LD_INT 28
19078: PPUSH
19079: LD_OWVAR 2
19083: PPUSH
19084: LD_INT 2
19086: PPUSH
19087: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19091: LD_INT 30
19093: PPUSH
19094: LD_OWVAR 2
19098: PPUSH
19099: LD_INT 2
19101: PPUSH
19102: CALL_OW 322
// end ;
19106: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19107: LD_EXP 25
19111: PUSH
19112: LD_EXP 77
19116: AND
19117: IFFALSE 19238
19119: GO 19121
19121: DISABLE
19122: LD_INT 0
19124: PPUSH
19125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19126: LD_ADDR_VAR 0 2
19130: PUSH
19131: LD_INT 22
19133: PUSH
19134: LD_OWVAR 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 21
19145: PUSH
19146: LD_INT 1
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: LD_INT 3
19155: PUSH
19156: LD_INT 23
19158: PUSH
19159: LD_INT 0
19161: PUSH
19162: EMPTY
19163: LIST
19164: LIST
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: LIST
19174: PPUSH
19175: CALL_OW 69
19179: ST_TO_ADDR
// if not tmp then
19180: LD_VAR 0 2
19184: NOT
19185: IFFALSE 19189
// exit ;
19187: GO 19238
// for i in tmp do
19189: LD_ADDR_VAR 0 1
19193: PUSH
19194: LD_VAR 0 2
19198: PUSH
19199: FOR_IN
19200: IFFALSE 19236
// begin if Crawls ( i ) then
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL_OW 318
19211: IFFALSE 19222
// ComWalk ( i ) ;
19213: LD_VAR 0 1
19217: PPUSH
19218: CALL_OW 138
// SetClass ( i , 2 ) ;
19222: LD_VAR 0 1
19226: PPUSH
19227: LD_INT 2
19229: PPUSH
19230: CALL_OW 336
// end ;
19234: GO 19199
19236: POP
19237: POP
// end ;
19238: PPOPN 2
19240: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19241: LD_EXP 25
19245: PUSH
19246: LD_EXP 78
19250: AND
19251: IFFALSE 19539
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
19260: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19261: LD_OWVAR 2
19265: PPUSH
19266: LD_INT 9
19268: PPUSH
19269: LD_INT 1
19271: PPUSH
19272: LD_INT 1
19274: PPUSH
19275: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19279: LD_INT 9
19281: PPUSH
19282: LD_OWVAR 2
19286: PPUSH
19287: CALL_OW 343
// uc_side := 9 ;
19291: LD_ADDR_OWVAR 20
19295: PUSH
19296: LD_INT 9
19298: ST_TO_ADDR
// uc_nation := 2 ;
19299: LD_ADDR_OWVAR 21
19303: PUSH
19304: LD_INT 2
19306: ST_TO_ADDR
// hc_name := Dark Warrior ;
19307: LD_ADDR_OWVAR 26
19311: PUSH
19312: LD_STRING Dark Warrior
19314: ST_TO_ADDR
// hc_gallery :=  ;
19315: LD_ADDR_OWVAR 33
19319: PUSH
19320: LD_STRING 
19322: ST_TO_ADDR
// hc_noskilllimit := true ;
19323: LD_ADDR_OWVAR 76
19327: PUSH
19328: LD_INT 1
19330: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19331: LD_ADDR_OWVAR 31
19335: PUSH
19336: LD_INT 30
19338: PUSH
19339: LD_INT 30
19341: PUSH
19342: LD_INT 30
19344: PUSH
19345: LD_INT 30
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: ST_TO_ADDR
// un := CreateHuman ;
19354: LD_ADDR_VAR 0 3
19358: PUSH
19359: CALL_OW 44
19363: ST_TO_ADDR
// hc_noskilllimit := false ;
19364: LD_ADDR_OWVAR 76
19368: PUSH
19369: LD_INT 0
19371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19372: LD_VAR 0 3
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: CALL_OW 51
// ToLua ( playRanger() ) ;
19384: LD_STRING playRanger()
19386: PPUSH
19387: CALL_OW 559
// p := 0 ;
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: LD_INT 0
19398: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19399: LD_INT 35
19401: PPUSH
19402: CALL_OW 67
// p := p + 1 ;
19406: LD_ADDR_VAR 0 2
19410: PUSH
19411: LD_VAR 0 2
19415: PUSH
19416: LD_INT 1
19418: PLUS
19419: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19420: LD_VAR 0 3
19424: PPUSH
19425: CALL_OW 256
19429: PUSH
19430: LD_INT 1000
19432: LESS
19433: IFFALSE 19447
// SetLives ( un , 1000 ) ;
19435: LD_VAR 0 3
19439: PPUSH
19440: LD_INT 1000
19442: PPUSH
19443: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_INT 81
19454: PUSH
19455: LD_OWVAR 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 91
19466: PUSH
19467: LD_VAR 0 3
19471: PUSH
19472: LD_INT 30
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PPUSH
19484: CALL_OW 69
19488: PPUSH
19489: LD_VAR 0 3
19493: PPUSH
19494: CALL_OW 74
19498: PPUSH
19499: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19503: LD_VAR 0 2
19507: PUSH
19508: LD_INT 80
19510: GREATER
19511: PUSH
19512: LD_VAR 0 3
19516: PPUSH
19517: CALL_OW 301
19521: OR
19522: IFFALSE 19399
// if un then
19524: LD_VAR 0 3
19528: IFFALSE 19539
// RemoveUnit ( un ) ;
19530: LD_VAR 0 3
19534: PPUSH
19535: CALL_OW 64
// end ;
19539: PPOPN 3
19541: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19542: LD_EXP 79
19546: IFFALSE 19662
19548: GO 19550
19550: DISABLE
19551: LD_INT 0
19553: PPUSH
19554: PPUSH
19555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19556: LD_ADDR_VAR 0 2
19560: PUSH
19561: LD_INT 81
19563: PUSH
19564: LD_OWVAR 2
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: LD_INT 21
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 69
19591: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19592: LD_STRING playComputer()
19594: PPUSH
19595: CALL_OW 559
// if not tmp then
19599: LD_VAR 0 2
19603: NOT
19604: IFFALSE 19608
// exit ;
19606: GO 19662
// for i in tmp do
19608: LD_ADDR_VAR 0 1
19612: PUSH
19613: LD_VAR 0 2
19617: PUSH
19618: FOR_IN
19619: IFFALSE 19660
// for j := 1 to 4 do
19621: LD_ADDR_VAR 0 3
19625: PUSH
19626: DOUBLE
19627: LD_INT 1
19629: DEC
19630: ST_TO_ADDR
19631: LD_INT 4
19633: PUSH
19634: FOR_TO
19635: IFFALSE 19656
// SetSkill ( i , j , 10 ) ;
19637: LD_VAR 0 1
19641: PPUSH
19642: LD_VAR 0 3
19646: PPUSH
19647: LD_INT 10
19649: PPUSH
19650: CALL_OW 237
19654: GO 19634
19656: POP
19657: POP
19658: GO 19618
19660: POP
19661: POP
// end ;
19662: PPOPN 3
19664: END
// every 0 0$1 trigger s30 do var i , tmp ;
19665: LD_EXP 80
19669: IFFALSE 19738
19671: GO 19673
19673: DISABLE
19674: LD_INT 0
19676: PPUSH
19677: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: ST_TO_ADDR
// if not tmp then
19700: LD_VAR 0 2
19704: NOT
19705: IFFALSE 19709
// exit ;
19707: GO 19738
// for i in tmp do
19709: LD_ADDR_VAR 0 1
19713: PUSH
19714: LD_VAR 0 2
19718: PUSH
19719: FOR_IN
19720: IFFALSE 19736
// SetLives ( i , 300 ) ;
19722: LD_VAR 0 1
19726: PPUSH
19727: LD_INT 300
19729: PPUSH
19730: CALL_OW 234
19734: GO 19719
19736: POP
19737: POP
// end ;
19738: PPOPN 2
19740: END
// every 0 0$1 trigger s60 do var i , tmp ;
19741: LD_EXP 81
19745: IFFALSE 19814
19747: GO 19749
19749: DISABLE
19750: LD_INT 0
19752: PPUSH
19753: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19754: LD_ADDR_VAR 0 2
19758: PUSH
19759: LD_INT 22
19761: PUSH
19762: LD_OWVAR 2
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: ST_TO_ADDR
// if not tmp then
19776: LD_VAR 0 2
19780: NOT
19781: IFFALSE 19785
// exit ;
19783: GO 19814
// for i in tmp do
19785: LD_ADDR_VAR 0 1
19789: PUSH
19790: LD_VAR 0 2
19794: PUSH
19795: FOR_IN
19796: IFFALSE 19812
// SetLives ( i , 600 ) ;
19798: LD_VAR 0 1
19802: PPUSH
19803: LD_INT 600
19805: PPUSH
19806: CALL_OW 234
19810: GO 19795
19812: POP
19813: POP
// end ;
19814: PPOPN 2
19816: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19817: LD_INT 0
19819: PPUSH
// case cmd of 301 :
19820: LD_VAR 0 1
19824: PUSH
19825: LD_INT 301
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19865
19833: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19834: LD_VAR 0 6
19838: PPUSH
19839: LD_VAR 0 7
19843: PPUSH
19844: LD_VAR 0 8
19848: PPUSH
19849: LD_VAR 0 4
19853: PPUSH
19854: LD_VAR 0 5
19858: PPUSH
19859: CALL 21074 0 5
19863: GO 19986
19865: LD_INT 302
19867: DOUBLE
19868: EQUAL
19869: IFTRUE 19873
19871: GO 19910
19873: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19874: LD_VAR 0 6
19878: PPUSH
19879: LD_VAR 0 7
19883: PPUSH
19884: LD_VAR 0 8
19888: PPUSH
19889: LD_VAR 0 9
19893: PPUSH
19894: LD_VAR 0 4
19898: PPUSH
19899: LD_VAR 0 5
19903: PPUSH
19904: CALL 21165 0 6
19908: GO 19986
19910: LD_INT 303
19912: DOUBLE
19913: EQUAL
19914: IFTRUE 19918
19916: GO 19955
19918: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19919: LD_VAR 0 6
19923: PPUSH
19924: LD_VAR 0 7
19928: PPUSH
19929: LD_VAR 0 8
19933: PPUSH
19934: LD_VAR 0 9
19938: PPUSH
19939: LD_VAR 0 4
19943: PPUSH
19944: LD_VAR 0 5
19948: PPUSH
19949: CALL 19991 0 6
19953: GO 19986
19955: LD_INT 304
19957: DOUBLE
19958: EQUAL
19959: IFTRUE 19963
19961: GO 19985
19963: POP
// hHackTeleport ( unit , x , y ) ; end ;
19964: LD_VAR 0 2
19968: PPUSH
19969: LD_VAR 0 4
19973: PPUSH
19974: LD_VAR 0 5
19978: PPUSH
19979: CALL 21758 0 3
19983: GO 19986
19985: POP
// end ;
19986: LD_VAR 0 12
19990: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19991: LD_INT 0
19993: PPUSH
19994: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19995: LD_VAR 0 1
19999: PUSH
20000: LD_INT 1
20002: LESS
20003: PUSH
20004: LD_VAR 0 1
20008: PUSH
20009: LD_INT 3
20011: GREATER
20012: OR
20013: PUSH
20014: LD_VAR 0 5
20018: PPUSH
20019: LD_VAR 0 6
20023: PPUSH
20024: CALL_OW 428
20028: OR
20029: IFFALSE 20033
// exit ;
20031: GO 20761
// uc_side := your_side ;
20033: LD_ADDR_OWVAR 20
20037: PUSH
20038: LD_OWVAR 2
20042: ST_TO_ADDR
// uc_nation := nation ;
20043: LD_ADDR_OWVAR 21
20047: PUSH
20048: LD_VAR 0 1
20052: ST_TO_ADDR
// bc_level = 1 ;
20053: LD_ADDR_OWVAR 43
20057: PUSH
20058: LD_INT 1
20060: ST_TO_ADDR
// case btype of 1 :
20061: LD_VAR 0 2
20065: PUSH
20066: LD_INT 1
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_depot ; 2 :
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 0
20082: ST_TO_ADDR
20083: GO 20705
20085: LD_INT 2
20087: DOUBLE
20088: EQUAL
20089: IFTRUE 20093
20091: GO 20104
20093: POP
// bc_type := b_warehouse ; 3 :
20094: LD_ADDR_OWVAR 42
20098: PUSH
20099: LD_INT 1
20101: ST_TO_ADDR
20102: GO 20705
20104: LD_INT 3
20106: DOUBLE
20107: EQUAL
20108: IFTRUE 20112
20110: GO 20123
20112: POP
// bc_type := b_lab ; 4 .. 9 :
20113: LD_ADDR_OWVAR 42
20117: PUSH
20118: LD_INT 6
20120: ST_TO_ADDR
20121: GO 20705
20123: LD_INT 4
20125: DOUBLE
20126: GREATEREQUAL
20127: IFFALSE 20135
20129: LD_INT 9
20131: DOUBLE
20132: LESSEQUAL
20133: IFTRUE 20137
20135: GO 20197
20137: POP
// begin bc_type := b_lab_half ;
20138: LD_ADDR_OWVAR 42
20142: PUSH
20143: LD_INT 7
20145: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20146: LD_ADDR_OWVAR 44
20150: PUSH
20151: LD_INT 10
20153: PUSH
20154: LD_INT 11
20156: PUSH
20157: LD_INT 12
20159: PUSH
20160: LD_INT 15
20162: PUSH
20163: LD_INT 14
20165: PUSH
20166: LD_INT 13
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: PUSH
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 3
20184: MINUS
20185: ARRAY
20186: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20187: LD_ADDR_OWVAR 45
20191: PUSH
20192: LD_INT 9
20194: ST_TO_ADDR
// end ; 10 .. 13 :
20195: GO 20705
20197: LD_INT 10
20199: DOUBLE
20200: GREATEREQUAL
20201: IFFALSE 20209
20203: LD_INT 13
20205: DOUBLE
20206: LESSEQUAL
20207: IFTRUE 20211
20209: GO 20288
20211: POP
// begin bc_type := b_lab_full ;
20212: LD_ADDR_OWVAR 42
20216: PUSH
20217: LD_INT 8
20219: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20220: LD_ADDR_OWVAR 44
20224: PUSH
20225: LD_INT 10
20227: PUSH
20228: LD_INT 12
20230: PUSH
20231: LD_INT 14
20233: PUSH
20234: LD_INT 13
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: LIST
20241: LIST
20242: PUSH
20243: LD_VAR 0 2
20247: PUSH
20248: LD_INT 9
20250: MINUS
20251: ARRAY
20252: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20253: LD_ADDR_OWVAR 45
20257: PUSH
20258: LD_INT 11
20260: PUSH
20261: LD_INT 15
20263: PUSH
20264: LD_INT 12
20266: PUSH
20267: LD_INT 15
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: LIST
20274: LIST
20275: PUSH
20276: LD_VAR 0 2
20280: PUSH
20281: LD_INT 9
20283: MINUS
20284: ARRAY
20285: ST_TO_ADDR
// end ; 14 :
20286: GO 20705
20288: LD_INT 14
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20307
20296: POP
// bc_type := b_workshop ; 15 :
20297: LD_ADDR_OWVAR 42
20301: PUSH
20302: LD_INT 2
20304: ST_TO_ADDR
20305: GO 20705
20307: LD_INT 15
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20326
20315: POP
// bc_type := b_factory ; 16 :
20316: LD_ADDR_OWVAR 42
20320: PUSH
20321: LD_INT 3
20323: ST_TO_ADDR
20324: GO 20705
20326: LD_INT 16
20328: DOUBLE
20329: EQUAL
20330: IFTRUE 20334
20332: GO 20345
20334: POP
// bc_type := b_ext_gun ; 17 :
20335: LD_ADDR_OWVAR 42
20339: PUSH
20340: LD_INT 17
20342: ST_TO_ADDR
20343: GO 20705
20345: LD_INT 17
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20381
20353: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20354: LD_ADDR_OWVAR 42
20358: PUSH
20359: LD_INT 19
20361: PUSH
20362: LD_INT 23
20364: PUSH
20365: LD_INT 19
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_VAR 0 1
20377: ARRAY
20378: ST_TO_ADDR
20379: GO 20705
20381: LD_INT 18
20383: DOUBLE
20384: EQUAL
20385: IFTRUE 20389
20387: GO 20400
20389: POP
// bc_type := b_ext_radar ; 19 :
20390: LD_ADDR_OWVAR 42
20394: PUSH
20395: LD_INT 20
20397: ST_TO_ADDR
20398: GO 20705
20400: LD_INT 19
20402: DOUBLE
20403: EQUAL
20404: IFTRUE 20408
20406: GO 20419
20408: POP
// bc_type := b_ext_radio ; 20 :
20409: LD_ADDR_OWVAR 42
20413: PUSH
20414: LD_INT 22
20416: ST_TO_ADDR
20417: GO 20705
20419: LD_INT 20
20421: DOUBLE
20422: EQUAL
20423: IFTRUE 20427
20425: GO 20438
20427: POP
// bc_type := b_ext_siberium ; 21 :
20428: LD_ADDR_OWVAR 42
20432: PUSH
20433: LD_INT 21
20435: ST_TO_ADDR
20436: GO 20705
20438: LD_INT 21
20440: DOUBLE
20441: EQUAL
20442: IFTRUE 20446
20444: GO 20457
20446: POP
// bc_type := b_ext_computer ; 22 :
20447: LD_ADDR_OWVAR 42
20451: PUSH
20452: LD_INT 24
20454: ST_TO_ADDR
20455: GO 20705
20457: LD_INT 22
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20476
20465: POP
// bc_type := b_ext_track ; 23 :
20466: LD_ADDR_OWVAR 42
20470: PUSH
20471: LD_INT 16
20473: ST_TO_ADDR
20474: GO 20705
20476: LD_INT 23
20478: DOUBLE
20479: EQUAL
20480: IFTRUE 20484
20482: GO 20495
20484: POP
// bc_type := b_ext_laser ; 24 :
20485: LD_ADDR_OWVAR 42
20489: PUSH
20490: LD_INT 25
20492: ST_TO_ADDR
20493: GO 20705
20495: LD_INT 24
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20514
20503: POP
// bc_type := b_control_tower ; 25 :
20504: LD_ADDR_OWVAR 42
20508: PUSH
20509: LD_INT 36
20511: ST_TO_ADDR
20512: GO 20705
20514: LD_INT 25
20516: DOUBLE
20517: EQUAL
20518: IFTRUE 20522
20520: GO 20533
20522: POP
// bc_type := b_breastwork ; 26 :
20523: LD_ADDR_OWVAR 42
20527: PUSH
20528: LD_INT 31
20530: ST_TO_ADDR
20531: GO 20705
20533: LD_INT 26
20535: DOUBLE
20536: EQUAL
20537: IFTRUE 20541
20539: GO 20552
20541: POP
// bc_type := b_bunker ; 27 :
20542: LD_ADDR_OWVAR 42
20546: PUSH
20547: LD_INT 32
20549: ST_TO_ADDR
20550: GO 20705
20552: LD_INT 27
20554: DOUBLE
20555: EQUAL
20556: IFTRUE 20560
20558: GO 20571
20560: POP
// bc_type := b_turret ; 28 :
20561: LD_ADDR_OWVAR 42
20565: PUSH
20566: LD_INT 33
20568: ST_TO_ADDR
20569: GO 20705
20571: LD_INT 28
20573: DOUBLE
20574: EQUAL
20575: IFTRUE 20579
20577: GO 20590
20579: POP
// bc_type := b_armoury ; 29 :
20580: LD_ADDR_OWVAR 42
20584: PUSH
20585: LD_INT 4
20587: ST_TO_ADDR
20588: GO 20705
20590: LD_INT 29
20592: DOUBLE
20593: EQUAL
20594: IFTRUE 20598
20596: GO 20609
20598: POP
// bc_type := b_barracks ; 30 :
20599: LD_ADDR_OWVAR 42
20603: PUSH
20604: LD_INT 5
20606: ST_TO_ADDR
20607: GO 20705
20609: LD_INT 30
20611: DOUBLE
20612: EQUAL
20613: IFTRUE 20617
20615: GO 20628
20617: POP
// bc_type := b_solar_power ; 31 :
20618: LD_ADDR_OWVAR 42
20622: PUSH
20623: LD_INT 27
20625: ST_TO_ADDR
20626: GO 20705
20628: LD_INT 31
20630: DOUBLE
20631: EQUAL
20632: IFTRUE 20636
20634: GO 20647
20636: POP
// bc_type := b_oil_power ; 32 :
20637: LD_ADDR_OWVAR 42
20641: PUSH
20642: LD_INT 26
20644: ST_TO_ADDR
20645: GO 20705
20647: LD_INT 32
20649: DOUBLE
20650: EQUAL
20651: IFTRUE 20655
20653: GO 20666
20655: POP
// bc_type := b_siberite_power ; 33 :
20656: LD_ADDR_OWVAR 42
20660: PUSH
20661: LD_INT 28
20663: ST_TO_ADDR
20664: GO 20705
20666: LD_INT 33
20668: DOUBLE
20669: EQUAL
20670: IFTRUE 20674
20672: GO 20685
20674: POP
// bc_type := b_oil_mine ; 34 :
20675: LD_ADDR_OWVAR 42
20679: PUSH
20680: LD_INT 29
20682: ST_TO_ADDR
20683: GO 20705
20685: LD_INT 34
20687: DOUBLE
20688: EQUAL
20689: IFTRUE 20693
20691: GO 20704
20693: POP
// bc_type := b_siberite_mine ; end ;
20694: LD_ADDR_OWVAR 42
20698: PUSH
20699: LD_INT 30
20701: ST_TO_ADDR
20702: GO 20705
20704: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20705: LD_ADDR_VAR 0 8
20709: PUSH
20710: LD_VAR 0 5
20714: PPUSH
20715: LD_VAR 0 6
20719: PPUSH
20720: LD_VAR 0 3
20724: PPUSH
20725: CALL_OW 47
20729: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20730: LD_OWVAR 42
20734: PUSH
20735: LD_INT 32
20737: PUSH
20738: LD_INT 33
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: IN
20745: IFFALSE 20761
// PlaceWeaponTurret ( b , weapon ) ;
20747: LD_VAR 0 8
20751: PPUSH
20752: LD_VAR 0 4
20756: PPUSH
20757: CALL_OW 431
// end ;
20761: LD_VAR 0 7
20765: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20766: LD_INT 0
20768: PPUSH
20769: PPUSH
20770: PPUSH
20771: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20772: LD_ADDR_VAR 0 4
20776: PUSH
20777: LD_INT 22
20779: PUSH
20780: LD_OWVAR 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 2
20791: PUSH
20792: LD_INT 30
20794: PUSH
20795: LD_INT 0
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: LD_INT 30
20804: PUSH
20805: LD_INT 1
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: LIST
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PPUSH
20821: CALL_OW 69
20825: ST_TO_ADDR
// if not tmp then
20826: LD_VAR 0 4
20830: NOT
20831: IFFALSE 20835
// exit ;
20833: GO 20894
// for i in tmp do
20835: LD_ADDR_VAR 0 2
20839: PUSH
20840: LD_VAR 0 4
20844: PUSH
20845: FOR_IN
20846: IFFALSE 20892
// for j = 1 to 3 do
20848: LD_ADDR_VAR 0 3
20852: PUSH
20853: DOUBLE
20854: LD_INT 1
20856: DEC
20857: ST_TO_ADDR
20858: LD_INT 3
20860: PUSH
20861: FOR_TO
20862: IFFALSE 20888
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20864: LD_VAR 0 2
20868: PPUSH
20869: CALL_OW 274
20873: PPUSH
20874: LD_VAR 0 3
20878: PPUSH
20879: LD_INT 99999
20881: PPUSH
20882: CALL_OW 277
20886: GO 20861
20888: POP
20889: POP
20890: GO 20845
20892: POP
20893: POP
// end ;
20894: LD_VAR 0 1
20898: RET
// export function hHackSetLevel10 ; var i , j ; begin
20899: LD_INT 0
20901: PPUSH
20902: PPUSH
20903: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20904: LD_ADDR_VAR 0 2
20908: PUSH
20909: LD_INT 21
20911: PUSH
20912: LD_INT 1
20914: PUSH
20915: EMPTY
20916: LIST
20917: LIST
20918: PPUSH
20919: CALL_OW 69
20923: PUSH
20924: FOR_IN
20925: IFFALSE 20977
// if IsSelected ( i ) then
20927: LD_VAR 0 2
20931: PPUSH
20932: CALL_OW 306
20936: IFFALSE 20975
// begin for j := 1 to 4 do
20938: LD_ADDR_VAR 0 3
20942: PUSH
20943: DOUBLE
20944: LD_INT 1
20946: DEC
20947: ST_TO_ADDR
20948: LD_INT 4
20950: PUSH
20951: FOR_TO
20952: IFFALSE 20973
// SetSkill ( i , j , 10 ) ;
20954: LD_VAR 0 2
20958: PPUSH
20959: LD_VAR 0 3
20963: PPUSH
20964: LD_INT 10
20966: PPUSH
20967: CALL_OW 237
20971: GO 20951
20973: POP
20974: POP
// end ;
20975: GO 20924
20977: POP
20978: POP
// end ;
20979: LD_VAR 0 1
20983: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20984: LD_INT 0
20986: PPUSH
20987: PPUSH
20988: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20989: LD_ADDR_VAR 0 2
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_OWVAR 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: LD_INT 21
21008: PUSH
21009: LD_INT 1
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PPUSH
21020: CALL_OW 69
21024: PUSH
21025: FOR_IN
21026: IFFALSE 21067
// begin for j := 1 to 4 do
21028: LD_ADDR_VAR 0 3
21032: PUSH
21033: DOUBLE
21034: LD_INT 1
21036: DEC
21037: ST_TO_ADDR
21038: LD_INT 4
21040: PUSH
21041: FOR_TO
21042: IFFALSE 21063
// SetSkill ( i , j , 10 ) ;
21044: LD_VAR 0 2
21048: PPUSH
21049: LD_VAR 0 3
21053: PPUSH
21054: LD_INT 10
21056: PPUSH
21057: CALL_OW 237
21061: GO 21041
21063: POP
21064: POP
// end ;
21065: GO 21025
21067: POP
21068: POP
// end ;
21069: LD_VAR 0 1
21073: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21074: LD_INT 0
21076: PPUSH
// uc_side := your_side ;
21077: LD_ADDR_OWVAR 20
21081: PUSH
21082: LD_OWVAR 2
21086: ST_TO_ADDR
// uc_nation := nation ;
21087: LD_ADDR_OWVAR 21
21091: PUSH
21092: LD_VAR 0 1
21096: ST_TO_ADDR
// InitHc ;
21097: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21101: LD_INT 0
21103: PPUSH
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_VAR 0 3
21113: PPUSH
21114: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21118: LD_VAR 0 4
21122: PPUSH
21123: LD_VAR 0 5
21127: PPUSH
21128: CALL_OW 428
21132: PUSH
21133: LD_INT 0
21135: EQUAL
21136: IFFALSE 21160
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21138: CALL_OW 44
21142: PPUSH
21143: LD_VAR 0 4
21147: PPUSH
21148: LD_VAR 0 5
21152: PPUSH
21153: LD_INT 1
21155: PPUSH
21156: CALL_OW 48
// end ;
21160: LD_VAR 0 6
21164: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21165: LD_INT 0
21167: PPUSH
21168: PPUSH
// uc_side := your_side ;
21169: LD_ADDR_OWVAR 20
21173: PUSH
21174: LD_OWVAR 2
21178: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21179: LD_VAR 0 1
21183: PUSH
21184: LD_INT 1
21186: PUSH
21187: LD_INT 2
21189: PUSH
21190: LD_INT 3
21192: PUSH
21193: LD_INT 4
21195: PUSH
21196: LD_INT 5
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: IN
21206: IFFALSE 21218
// uc_nation := nation_american else
21208: LD_ADDR_OWVAR 21
21212: PUSH
21213: LD_INT 1
21215: ST_TO_ADDR
21216: GO 21261
// if chassis in [ 11 , 12 , 13 , 14 ] then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 11
21225: PUSH
21226: LD_INT 12
21228: PUSH
21229: LD_INT 13
21231: PUSH
21232: LD_INT 14
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: IN
21241: IFFALSE 21253
// uc_nation := nation_arabian else
21243: LD_ADDR_OWVAR 21
21247: PUSH
21248: LD_INT 2
21250: ST_TO_ADDR
21251: GO 21261
// uc_nation := nation_russian ;
21253: LD_ADDR_OWVAR 21
21257: PUSH
21258: LD_INT 3
21260: ST_TO_ADDR
// vc_chassis := chassis ;
21261: LD_ADDR_OWVAR 37
21265: PUSH
21266: LD_VAR 0 1
21270: ST_TO_ADDR
// vc_engine := engine ;
21271: LD_ADDR_OWVAR 39
21275: PUSH
21276: LD_VAR 0 2
21280: ST_TO_ADDR
// vc_control := control ;
21281: LD_ADDR_OWVAR 38
21285: PUSH
21286: LD_VAR 0 3
21290: ST_TO_ADDR
// vc_weapon := weapon ;
21291: LD_ADDR_OWVAR 40
21295: PUSH
21296: LD_VAR 0 4
21300: ST_TO_ADDR
// un := CreateVehicle ;
21301: LD_ADDR_VAR 0 8
21305: PUSH
21306: CALL_OW 45
21310: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21311: LD_VAR 0 8
21315: PPUSH
21316: LD_INT 0
21318: PPUSH
21319: LD_INT 5
21321: PPUSH
21322: CALL_OW 12
21326: PPUSH
21327: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21331: LD_VAR 0 8
21335: PPUSH
21336: LD_VAR 0 5
21340: PPUSH
21341: LD_VAR 0 6
21345: PPUSH
21346: LD_INT 1
21348: PPUSH
21349: CALL_OW 48
// end ;
21353: LD_VAR 0 7
21357: RET
// export hInvincible ; every 1 do
21358: GO 21360
21360: DISABLE
// hInvincible := [ ] ;
21361: LD_ADDR_EXP 82
21365: PUSH
21366: EMPTY
21367: ST_TO_ADDR
21368: END
// every 10 do var i ;
21369: GO 21371
21371: DISABLE
21372: LD_INT 0
21374: PPUSH
// begin enable ;
21375: ENABLE
// if not hInvincible then
21376: LD_EXP 82
21380: NOT
21381: IFFALSE 21385
// exit ;
21383: GO 21429
// for i in hInvincible do
21385: LD_ADDR_VAR 0 1
21389: PUSH
21390: LD_EXP 82
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21427
// if GetLives ( i ) < 1000 then
21398: LD_VAR 0 1
21402: PPUSH
21403: CALL_OW 256
21407: PUSH
21408: LD_INT 1000
21410: LESS
21411: IFFALSE 21425
// SetLives ( i , 1000 ) ;
21413: LD_VAR 0 1
21417: PPUSH
21418: LD_INT 1000
21420: PPUSH
21421: CALL_OW 234
21425: GO 21395
21427: POP
21428: POP
// end ;
21429: PPOPN 1
21431: END
// export function hHackInvincible ; var i ; begin
21432: LD_INT 0
21434: PPUSH
21435: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21436: LD_ADDR_VAR 0 2
21440: PUSH
21441: LD_INT 2
21443: PUSH
21444: LD_INT 21
21446: PUSH
21447: LD_INT 1
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: LD_INT 21
21456: PUSH
21457: LD_INT 2
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: LIST
21468: PPUSH
21469: CALL_OW 69
21473: PUSH
21474: FOR_IN
21475: IFFALSE 21536
// if IsSelected ( i ) then
21477: LD_VAR 0 2
21481: PPUSH
21482: CALL_OW 306
21486: IFFALSE 21534
// begin if i in hInvincible then
21488: LD_VAR 0 2
21492: PUSH
21493: LD_EXP 82
21497: IN
21498: IFFALSE 21518
// hInvincible := hInvincible diff i else
21500: LD_ADDR_EXP 82
21504: PUSH
21505: LD_EXP 82
21509: PUSH
21510: LD_VAR 0 2
21514: DIFF
21515: ST_TO_ADDR
21516: GO 21534
// hInvincible := hInvincible union i ;
21518: LD_ADDR_EXP 82
21522: PUSH
21523: LD_EXP 82
21527: PUSH
21528: LD_VAR 0 2
21532: UNION
21533: ST_TO_ADDR
// end ;
21534: GO 21474
21536: POP
21537: POP
// end ;
21538: LD_VAR 0 1
21542: RET
// export function hHackInvisible ; var i , j ; begin
21543: LD_INT 0
21545: PPUSH
21546: PPUSH
21547: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 1
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PPUSH
21563: CALL_OW 69
21567: PUSH
21568: FOR_IN
21569: IFFALSE 21593
// if IsSelected ( i ) then
21571: LD_VAR 0 2
21575: PPUSH
21576: CALL_OW 306
21580: IFFALSE 21591
// ComForceInvisible ( i ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: CALL_OW 496
21591: GO 21568
21593: POP
21594: POP
// end ;
21595: LD_VAR 0 1
21599: RET
// export function hHackChangeYourSide ; begin
21600: LD_INT 0
21602: PPUSH
// if your_side = 8 then
21603: LD_OWVAR 2
21607: PUSH
21608: LD_INT 8
21610: EQUAL
21611: IFFALSE 21623
// your_side := 0 else
21613: LD_ADDR_OWVAR 2
21617: PUSH
21618: LD_INT 0
21620: ST_TO_ADDR
21621: GO 21637
// your_side := your_side + 1 ;
21623: LD_ADDR_OWVAR 2
21627: PUSH
21628: LD_OWVAR 2
21632: PUSH
21633: LD_INT 1
21635: PLUS
21636: ST_TO_ADDR
// end ;
21637: LD_VAR 0 1
21641: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21642: LD_INT 0
21644: PPUSH
21645: PPUSH
21646: PPUSH
// for i in all_units do
21647: LD_ADDR_VAR 0 2
21651: PUSH
21652: LD_OWVAR 3
21656: PUSH
21657: FOR_IN
21658: IFFALSE 21736
// if IsSelected ( i ) then
21660: LD_VAR 0 2
21664: PPUSH
21665: CALL_OW 306
21669: IFFALSE 21734
// begin j := GetSide ( i ) ;
21671: LD_ADDR_VAR 0 3
21675: PUSH
21676: LD_VAR 0 2
21680: PPUSH
21681: CALL_OW 255
21685: ST_TO_ADDR
// if j = 8 then
21686: LD_VAR 0 3
21690: PUSH
21691: LD_INT 8
21693: EQUAL
21694: IFFALSE 21706
// j := 0 else
21696: LD_ADDR_VAR 0 3
21700: PUSH
21701: LD_INT 0
21703: ST_TO_ADDR
21704: GO 21720
// j := j + 1 ;
21706: LD_ADDR_VAR 0 3
21710: PUSH
21711: LD_VAR 0 3
21715: PUSH
21716: LD_INT 1
21718: PLUS
21719: ST_TO_ADDR
// SetSide ( i , j ) ;
21720: LD_VAR 0 2
21724: PPUSH
21725: LD_VAR 0 3
21729: PPUSH
21730: CALL_OW 235
// end ;
21734: GO 21657
21736: POP
21737: POP
// end ;
21738: LD_VAR 0 1
21742: RET
// export function hHackFog ; begin
21743: LD_INT 0
21745: PPUSH
// FogOff ( true ) ;
21746: LD_INT 1
21748: PPUSH
21749: CALL_OW 344
// end ;
21753: LD_VAR 0 1
21757: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21758: LD_INT 0
21760: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21761: LD_VAR 0 1
21765: PPUSH
21766: LD_VAR 0 2
21770: PPUSH
21771: LD_VAR 0 3
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: LD_INT 1
21781: PPUSH
21782: CALL_OW 483
// CenterOnXY ( x , y ) ;
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_VAR 0 3
21795: PPUSH
21796: CALL_OW 84
// end ;
21800: LD_VAR 0 4
21804: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21805: LD_INT 0
21807: PPUSH
21808: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21809: LD_VAR 0 1
21813: NOT
21814: PUSH
21815: LD_VAR 0 2
21819: PPUSH
21820: LD_VAR 0 3
21824: PPUSH
21825: CALL_OW 488
21829: NOT
21830: OR
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 3
21844: NONEQUAL
21845: PUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 247
21855: PUSH
21856: LD_INT 1
21858: EQUAL
21859: NOT
21860: AND
21861: OR
21862: IFFALSE 21866
// exit ;
21864: GO 22015
// if GetType ( factory ) = unit_human then
21866: LD_VAR 0 1
21870: PPUSH
21871: CALL_OW 247
21875: PUSH
21876: LD_INT 1
21878: EQUAL
21879: IFFALSE 21896
// factory := IsInUnit ( factory ) ;
21881: LD_ADDR_VAR 0 1
21885: PUSH
21886: LD_VAR 0 1
21890: PPUSH
21891: CALL_OW 310
21895: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 266
21905: PUSH
21906: LD_INT 3
21908: NONEQUAL
21909: IFFALSE 21913
// exit ;
21911: GO 22015
// if HexInfo ( x , y ) = factory then
21913: LD_VAR 0 2
21917: PPUSH
21918: LD_VAR 0 3
21922: PPUSH
21923: CALL_OW 428
21927: PUSH
21928: LD_VAR 0 1
21932: EQUAL
21933: IFFALSE 21960
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21935: LD_ADDR_EXP 83
21939: PUSH
21940: LD_EXP 83
21944: PPUSH
21945: LD_VAR 0 1
21949: PPUSH
21950: LD_INT 0
21952: PPUSH
21953: CALL_OW 1
21957: ST_TO_ADDR
21958: GO 22011
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21960: LD_ADDR_EXP 83
21964: PUSH
21965: LD_EXP 83
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: LD_VAR 0 1
21979: PPUSH
21980: CALL_OW 255
21984: PUSH
21985: LD_VAR 0 1
21989: PUSH
21990: LD_VAR 0 2
21994: PUSH
21995: LD_VAR 0 3
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 1
22010: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22011: CALL 22020 0 0
// end ;
22015: LD_VAR 0 4
22019: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22020: LD_INT 0
22022: PPUSH
22023: PPUSH
22024: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22025: LD_STRING resetFactoryWaypoint();
22027: PPUSH
22028: CALL_OW 559
// if factoryWaypoints then
22032: LD_EXP 83
22036: IFFALSE 22162
// begin list := PrepareArray ( factoryWaypoints ) ;
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_EXP 83
22047: PPUSH
22048: CALL 68455 0 1
22052: ST_TO_ADDR
// for i := 1 to list do
22053: LD_ADDR_VAR 0 2
22057: PUSH
22058: DOUBLE
22059: LD_INT 1
22061: DEC
22062: ST_TO_ADDR
22063: LD_VAR 0 3
22067: PUSH
22068: FOR_TO
22069: IFFALSE 22160
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22071: LD_STRING setFactoryWaypointXY(
22073: PUSH
22074: LD_VAR 0 3
22078: PUSH
22079: LD_VAR 0 2
22083: ARRAY
22084: PUSH
22085: LD_INT 1
22087: ARRAY
22088: STR
22089: PUSH
22090: LD_STRING ,
22092: STR
22093: PUSH
22094: LD_VAR 0 3
22098: PUSH
22099: LD_VAR 0 2
22103: ARRAY
22104: PUSH
22105: LD_INT 2
22107: ARRAY
22108: STR
22109: PUSH
22110: LD_STRING ,
22112: STR
22113: PUSH
22114: LD_VAR 0 3
22118: PUSH
22119: LD_VAR 0 2
22123: ARRAY
22124: PUSH
22125: LD_INT 3
22127: ARRAY
22128: STR
22129: PUSH
22130: LD_STRING ,
22132: STR
22133: PUSH
22134: LD_VAR 0 3
22138: PUSH
22139: LD_VAR 0 2
22143: ARRAY
22144: PUSH
22145: LD_INT 4
22147: ARRAY
22148: STR
22149: PUSH
22150: LD_STRING )
22152: STR
22153: PPUSH
22154: CALL_OW 559
22158: GO 22068
22160: POP
22161: POP
// end ; end ;
22162: LD_VAR 0 1
22166: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22167: LD_INT 0
22169: PPUSH
// if HexInfo ( x , y ) = warehouse then
22170: LD_VAR 0 2
22174: PPUSH
22175: LD_VAR 0 3
22179: PPUSH
22180: CALL_OW 428
22184: PUSH
22185: LD_VAR 0 1
22189: EQUAL
22190: IFFALSE 22217
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22192: LD_ADDR_EXP 84
22196: PUSH
22197: LD_EXP 84
22201: PPUSH
22202: LD_VAR 0 1
22206: PPUSH
22207: LD_INT 0
22209: PPUSH
22210: CALL_OW 1
22214: ST_TO_ADDR
22215: GO 22268
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22217: LD_ADDR_EXP 84
22221: PUSH
22222: LD_EXP 84
22226: PPUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 255
22241: PUSH
22242: LD_VAR 0 1
22246: PUSH
22247: LD_VAR 0 2
22251: PUSH
22252: LD_VAR 0 3
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: PPUSH
22263: CALL_OW 1
22267: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22268: CALL 22277 0 0
// end ;
22272: LD_VAR 0 4
22276: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22277: LD_INT 0
22279: PPUSH
22280: PPUSH
22281: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22282: LD_STRING resetWarehouseGatheringPoints();
22284: PPUSH
22285: CALL_OW 559
// if warehouseGatheringPoints then
22289: LD_EXP 84
22293: IFFALSE 22419
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22295: LD_ADDR_VAR 0 3
22299: PUSH
22300: LD_EXP 84
22304: PPUSH
22305: CALL 68455 0 1
22309: ST_TO_ADDR
// for i := 1 to list do
22310: LD_ADDR_VAR 0 2
22314: PUSH
22315: DOUBLE
22316: LD_INT 1
22318: DEC
22319: ST_TO_ADDR
22320: LD_VAR 0 3
22324: PUSH
22325: FOR_TO
22326: IFFALSE 22417
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22328: LD_STRING setWarehouseGatheringPointXY(
22330: PUSH
22331: LD_VAR 0 3
22335: PUSH
22336: LD_VAR 0 2
22340: ARRAY
22341: PUSH
22342: LD_INT 1
22344: ARRAY
22345: STR
22346: PUSH
22347: LD_STRING ,
22349: STR
22350: PUSH
22351: LD_VAR 0 3
22355: PUSH
22356: LD_VAR 0 2
22360: ARRAY
22361: PUSH
22362: LD_INT 2
22364: ARRAY
22365: STR
22366: PUSH
22367: LD_STRING ,
22369: STR
22370: PUSH
22371: LD_VAR 0 3
22375: PUSH
22376: LD_VAR 0 2
22380: ARRAY
22381: PUSH
22382: LD_INT 3
22384: ARRAY
22385: STR
22386: PUSH
22387: LD_STRING ,
22389: STR
22390: PUSH
22391: LD_VAR 0 3
22395: PUSH
22396: LD_VAR 0 2
22400: ARRAY
22401: PUSH
22402: LD_INT 4
22404: ARRAY
22405: STR
22406: PUSH
22407: LD_STRING )
22409: STR
22410: PPUSH
22411: CALL_OW 559
22415: GO 22325
22417: POP
22418: POP
// end ; end ;
22419: LD_VAR 0 1
22423: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22424: LD_EXP 84
22428: IFFALSE 23113
22430: GO 22432
22432: DISABLE
22433: LD_INT 0
22435: PPUSH
22436: PPUSH
22437: PPUSH
22438: PPUSH
22439: PPUSH
22440: PPUSH
22441: PPUSH
22442: PPUSH
22443: PPUSH
// begin enable ;
22444: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22445: LD_ADDR_VAR 0 3
22449: PUSH
22450: LD_EXP 84
22454: PPUSH
22455: CALL 68455 0 1
22459: ST_TO_ADDR
// if not list then
22460: LD_VAR 0 3
22464: NOT
22465: IFFALSE 22469
// exit ;
22467: GO 23113
// for i := 1 to list do
22469: LD_ADDR_VAR 0 1
22473: PUSH
22474: DOUBLE
22475: LD_INT 1
22477: DEC
22478: ST_TO_ADDR
22479: LD_VAR 0 3
22483: PUSH
22484: FOR_TO
22485: IFFALSE 23111
// begin depot := list [ i ] [ 2 ] ;
22487: LD_ADDR_VAR 0 8
22491: PUSH
22492: LD_VAR 0 3
22496: PUSH
22497: LD_VAR 0 1
22501: ARRAY
22502: PUSH
22503: LD_INT 2
22505: ARRAY
22506: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22507: LD_ADDR_VAR 0 5
22511: PUSH
22512: LD_VAR 0 3
22516: PUSH
22517: LD_VAR 0 1
22521: ARRAY
22522: PUSH
22523: LD_INT 1
22525: ARRAY
22526: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22527: LD_VAR 0 8
22531: PPUSH
22532: CALL_OW 301
22536: PUSH
22537: LD_VAR 0 5
22541: PUSH
22542: LD_VAR 0 8
22546: PPUSH
22547: CALL_OW 255
22551: NONEQUAL
22552: OR
22553: IFFALSE 22582
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22555: LD_ADDR_EXP 84
22559: PUSH
22560: LD_EXP 84
22564: PPUSH
22565: LD_VAR 0 8
22569: PPUSH
22570: LD_INT 0
22572: PPUSH
22573: CALL_OW 1
22577: ST_TO_ADDR
// exit ;
22578: POP
22579: POP
22580: GO 23113
// end ; x := list [ i ] [ 3 ] ;
22582: LD_ADDR_VAR 0 6
22586: PUSH
22587: LD_VAR 0 3
22591: PUSH
22592: LD_VAR 0 1
22596: ARRAY
22597: PUSH
22598: LD_INT 3
22600: ARRAY
22601: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22602: LD_ADDR_VAR 0 7
22606: PUSH
22607: LD_VAR 0 3
22611: PUSH
22612: LD_VAR 0 1
22616: ARRAY
22617: PUSH
22618: LD_INT 4
22620: ARRAY
22621: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22622: LD_ADDR_VAR 0 9
22626: PUSH
22627: LD_VAR 0 6
22631: PPUSH
22632: LD_VAR 0 7
22636: PPUSH
22637: LD_INT 16
22639: PPUSH
22640: CALL 67043 0 3
22644: ST_TO_ADDR
// if not cratesNearbyPoint then
22645: LD_VAR 0 9
22649: NOT
22650: IFFALSE 22656
// exit ;
22652: POP
22653: POP
22654: GO 23113
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22656: LD_ADDR_VAR 0 4
22660: PUSH
22661: LD_INT 22
22663: PUSH
22664: LD_VAR 0 5
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 3
22675: PUSH
22676: LD_INT 60
22678: PUSH
22679: EMPTY
22680: LIST
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: LD_INT 91
22688: PUSH
22689: LD_VAR 0 8
22693: PUSH
22694: LD_INT 6
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: LIST
22701: PUSH
22702: LD_INT 2
22704: PUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 25
22717: PUSH
22718: LD_INT 16
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: EMPTY
22726: LIST
22727: LIST
22728: LIST
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: PPUSH
22736: CALL_OW 69
22740: PUSH
22741: LD_VAR 0 8
22745: PPUSH
22746: CALL_OW 313
22750: PPUSH
22751: LD_INT 3
22753: PUSH
22754: LD_INT 60
22756: PUSH
22757: EMPTY
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: PUSH
22764: LD_INT 2
22766: PUSH
22767: LD_INT 25
22769: PUSH
22770: LD_INT 2
22772: PUSH
22773: EMPTY
22774: LIST
22775: LIST
22776: PUSH
22777: LD_INT 25
22779: PUSH
22780: LD_INT 16
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: PUSH
22787: EMPTY
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PPUSH
22796: CALL_OW 72
22800: UNION
22801: ST_TO_ADDR
// if tmp then
22802: LD_VAR 0 4
22806: IFFALSE 22886
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22808: LD_ADDR_VAR 0 4
22812: PUSH
22813: LD_VAR 0 4
22817: PPUSH
22818: LD_INT 3
22820: PPUSH
22821: CALL 65012 0 2
22825: ST_TO_ADDR
// for j in tmp do
22826: LD_ADDR_VAR 0 2
22830: PUSH
22831: LD_VAR 0 4
22835: PUSH
22836: FOR_IN
22837: IFFALSE 22880
// begin if IsInUnit ( j ) then
22839: LD_VAR 0 2
22843: PPUSH
22844: CALL_OW 310
22848: IFFALSE 22859
// ComExit ( j ) ;
22850: LD_VAR 0 2
22854: PPUSH
22855: CALL 65095 0 1
// AddComCollect ( j , x , y ) ;
22859: LD_VAR 0 2
22863: PPUSH
22864: LD_VAR 0 6
22868: PPUSH
22869: LD_VAR 0 7
22873: PPUSH
22874: CALL_OW 177
// end ;
22878: GO 22836
22880: POP
22881: POP
// exit ;
22882: POP
22883: POP
22884: GO 23113
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22886: LD_ADDR_VAR 0 4
22890: PUSH
22891: LD_INT 22
22893: PUSH
22894: LD_VAR 0 5
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 91
22905: PUSH
22906: LD_VAR 0 8
22910: PUSH
22911: LD_INT 8
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: LD_INT 2
22921: PUSH
22922: LD_INT 34
22924: PUSH
22925: LD_INT 12
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 34
22934: PUSH
22935: LD_INT 51
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: LD_INT 34
22944: PUSH
22945: LD_INT 32
22947: PUSH
22948: EMPTY
22949: LIST
22950: LIST
22951: PUSH
22952: LD_INT 34
22954: PUSH
22955: LD_INT 89
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PPUSH
22974: CALL_OW 69
22978: ST_TO_ADDR
// if tmp then
22979: LD_VAR 0 4
22983: IFFALSE 23109
// begin for j in tmp do
22985: LD_ADDR_VAR 0 2
22989: PUSH
22990: LD_VAR 0 4
22994: PUSH
22995: FOR_IN
22996: IFFALSE 23107
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22998: LD_VAR 0 2
23002: PPUSH
23003: CALL_OW 262
23007: PUSH
23008: LD_INT 3
23010: EQUAL
23011: PUSH
23012: LD_VAR 0 2
23016: PPUSH
23017: CALL_OW 261
23021: PUSH
23022: LD_INT 20
23024: GREATER
23025: OR
23026: PUSH
23027: LD_VAR 0 2
23031: PPUSH
23032: CALL_OW 314
23036: NOT
23037: AND
23038: PUSH
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 263
23048: PUSH
23049: LD_INT 1
23051: NONEQUAL
23052: PUSH
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 311
23062: OR
23063: AND
23064: IFFALSE 23105
// begin ComCollect ( j , x , y ) ;
23066: LD_VAR 0 2
23070: PPUSH
23071: LD_VAR 0 6
23075: PPUSH
23076: LD_VAR 0 7
23080: PPUSH
23081: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23085: LD_VAR 0 2
23089: PPUSH
23090: LD_VAR 0 8
23094: PPUSH
23095: CALL_OW 172
// exit ;
23099: POP
23100: POP
23101: POP
23102: POP
23103: GO 23113
// end ;
23105: GO 22995
23107: POP
23108: POP
// end ; end ;
23109: GO 22484
23111: POP
23112: POP
// end ; end_of_file
23113: PPOPN 9
23115: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23116: LD_INT 0
23118: PPUSH
23119: PPUSH
23120: PPUSH
23121: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23122: LD_VAR 0 1
23126: PPUSH
23127: CALL_OW 264
23131: PUSH
23132: LD_INT 91
23134: EQUAL
23135: IFFALSE 23207
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23137: LD_INT 68
23139: PPUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 255
23149: PPUSH
23150: CALL_OW 321
23154: PUSH
23155: LD_INT 2
23157: EQUAL
23158: IFFALSE 23170
// eff := 70 else
23160: LD_ADDR_VAR 0 4
23164: PUSH
23165: LD_INT 70
23167: ST_TO_ADDR
23168: GO 23178
// eff := 30 ;
23170: LD_ADDR_VAR 0 4
23174: PUSH
23175: LD_INT 30
23177: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23178: LD_VAR 0 1
23182: PPUSH
23183: CALL_OW 250
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 251
23197: PPUSH
23198: LD_VAR 0 4
23202: PPUSH
23203: CALL_OW 495
// end ; end ;
23207: LD_VAR 0 2
23211: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23212: LD_INT 0
23214: PPUSH
// end ;
23215: LD_VAR 0 4
23219: RET
// export function SOS_Command ( cmd ) ; begin
23220: LD_INT 0
23222: PPUSH
// end ;
23223: LD_VAR 0 2
23227: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23228: LD_INT 0
23230: PPUSH
// end ;
23231: LD_VAR 0 6
23235: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23236: LD_INT 0
23238: PPUSH
23239: PPUSH
// if not vehicle or not factory then
23240: LD_VAR 0 1
23244: NOT
23245: PUSH
23246: LD_VAR 0 2
23250: NOT
23251: OR
23252: IFFALSE 23256
// exit ;
23254: GO 23487
// if factoryWaypoints >= factory then
23256: LD_EXP 83
23260: PUSH
23261: LD_VAR 0 2
23265: GREATEREQUAL
23266: IFFALSE 23487
// if factoryWaypoints [ factory ] then
23268: LD_EXP 83
23272: PUSH
23273: LD_VAR 0 2
23277: ARRAY
23278: IFFALSE 23487
// begin if GetControl ( vehicle ) = control_manual then
23280: LD_VAR 0 1
23284: PPUSH
23285: CALL_OW 263
23289: PUSH
23290: LD_INT 1
23292: EQUAL
23293: IFFALSE 23374
// begin driver := IsDrivenBy ( vehicle ) ;
23295: LD_ADDR_VAR 0 4
23299: PUSH
23300: LD_VAR 0 1
23304: PPUSH
23305: CALL_OW 311
23309: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23310: LD_VAR 0 4
23314: PPUSH
23315: LD_EXP 83
23319: PUSH
23320: LD_VAR 0 2
23324: ARRAY
23325: PUSH
23326: LD_INT 3
23328: ARRAY
23329: PPUSH
23330: LD_EXP 83
23334: PUSH
23335: LD_VAR 0 2
23339: ARRAY
23340: PUSH
23341: LD_INT 4
23343: ARRAY
23344: PPUSH
23345: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23349: LD_VAR 0 4
23353: PPUSH
23354: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23358: LD_VAR 0 4
23362: PPUSH
23363: LD_VAR 0 2
23367: PPUSH
23368: CALL_OW 180
// end else
23372: GO 23487
// if GetControl ( vehicle ) = control_remote then
23374: LD_VAR 0 1
23378: PPUSH
23379: CALL_OW 263
23383: PUSH
23384: LD_INT 2
23386: EQUAL
23387: IFFALSE 23448
// begin wait ( 0 0$2 ) ;
23389: LD_INT 70
23391: PPUSH
23392: CALL_OW 67
// if Connect ( vehicle ) then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL 35336 0 1
23405: IFFALSE 23446
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23407: LD_VAR 0 1
23411: PPUSH
23412: LD_EXP 83
23416: PUSH
23417: LD_VAR 0 2
23421: ARRAY
23422: PUSH
23423: LD_INT 3
23425: ARRAY
23426: PPUSH
23427: LD_EXP 83
23431: PUSH
23432: LD_VAR 0 2
23436: ARRAY
23437: PUSH
23438: LD_INT 4
23440: ARRAY
23441: PPUSH
23442: CALL_OW 171
// end else
23446: GO 23487
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23448: LD_VAR 0 1
23452: PPUSH
23453: LD_EXP 83
23457: PUSH
23458: LD_VAR 0 2
23462: ARRAY
23463: PUSH
23464: LD_INT 3
23466: ARRAY
23467: PPUSH
23468: LD_EXP 83
23472: PUSH
23473: LD_VAR 0 2
23477: ARRAY
23478: PUSH
23479: LD_INT 4
23481: ARRAY
23482: PPUSH
23483: CALL_OW 171
// end ; end ;
23487: LD_VAR 0 3
23491: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23492: LD_INT 0
23494: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23495: LD_VAR 0 1
23499: PUSH
23500: LD_INT 250
23502: EQUAL
23503: PUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: CALL_OW 264
23513: PUSH
23514: LD_INT 81
23516: EQUAL
23517: AND
23518: IFFALSE 23539
// MinerPlaceMine ( unit , x , y ) ;
23520: LD_VAR 0 2
23524: PPUSH
23525: LD_VAR 0 4
23529: PPUSH
23530: LD_VAR 0 5
23534: PPUSH
23535: CALL 25924 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23539: LD_VAR 0 1
23543: PUSH
23544: LD_INT 251
23546: EQUAL
23547: PUSH
23548: LD_VAR 0 2
23552: PPUSH
23553: CALL_OW 264
23557: PUSH
23558: LD_INT 81
23560: EQUAL
23561: AND
23562: IFFALSE 23583
// MinerDetonateMine ( unit , x , y ) ;
23564: LD_VAR 0 2
23568: PPUSH
23569: LD_VAR 0 4
23573: PPUSH
23574: LD_VAR 0 5
23578: PPUSH
23579: CALL 26199 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23583: LD_VAR 0 1
23587: PUSH
23588: LD_INT 252
23590: EQUAL
23591: PUSH
23592: LD_VAR 0 2
23596: PPUSH
23597: CALL_OW 264
23601: PUSH
23602: LD_INT 81
23604: EQUAL
23605: AND
23606: IFFALSE 23627
// MinerCreateMinefield ( unit , x , y ) ;
23608: LD_VAR 0 2
23612: PPUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: LD_VAR 0 5
23622: PPUSH
23623: CALL 26616 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23627: LD_VAR 0 1
23631: PUSH
23632: LD_INT 253
23634: EQUAL
23635: PUSH
23636: LD_VAR 0 2
23640: PPUSH
23641: CALL_OW 257
23645: PUSH
23646: LD_INT 5
23648: EQUAL
23649: AND
23650: IFFALSE 23671
// ComBinocular ( unit , x , y ) ;
23652: LD_VAR 0 2
23656: PPUSH
23657: LD_VAR 0 4
23661: PPUSH
23662: LD_VAR 0 5
23666: PPUSH
23667: CALL 26985 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23671: LD_VAR 0 1
23675: PUSH
23676: LD_INT 254
23678: EQUAL
23679: PUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 264
23689: PUSH
23690: LD_INT 99
23692: EQUAL
23693: AND
23694: PUSH
23695: LD_VAR 0 3
23699: PPUSH
23700: CALL_OW 263
23704: PUSH
23705: LD_INT 3
23707: EQUAL
23708: AND
23709: IFFALSE 23725
// HackDestroyVehicle ( unit , selectedUnit ) ;
23711: LD_VAR 0 2
23715: PPUSH
23716: LD_VAR 0 3
23720: PPUSH
23721: CALL 25288 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23725: LD_VAR 0 1
23729: PUSH
23730: LD_INT 255
23732: EQUAL
23733: PUSH
23734: LD_VAR 0 2
23738: PPUSH
23739: CALL_OW 264
23743: PUSH
23744: LD_INT 14
23746: PUSH
23747: LD_INT 53
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: IN
23754: AND
23755: PUSH
23756: LD_VAR 0 4
23760: PPUSH
23761: LD_VAR 0 5
23765: PPUSH
23766: CALL_OW 488
23770: AND
23771: IFFALSE 23795
// CutTreeXYR ( unit , x , y , 12 ) ;
23773: LD_VAR 0 2
23777: PPUSH
23778: LD_VAR 0 4
23782: PPUSH
23783: LD_VAR 0 5
23787: PPUSH
23788: LD_INT 12
23790: PPUSH
23791: CALL 23858 0 4
// if cmd = 256 then
23795: LD_VAR 0 1
23799: PUSH
23800: LD_INT 256
23802: EQUAL
23803: IFFALSE 23824
// SetFactoryWaypoint ( unit , x , y ) ;
23805: LD_VAR 0 2
23809: PPUSH
23810: LD_VAR 0 4
23814: PPUSH
23815: LD_VAR 0 5
23819: PPUSH
23820: CALL 21805 0 3
// if cmd = 257 then
23824: LD_VAR 0 1
23828: PUSH
23829: LD_INT 257
23831: EQUAL
23832: IFFALSE 23853
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23834: LD_VAR 0 2
23838: PPUSH
23839: LD_VAR 0 4
23843: PPUSH
23844: LD_VAR 0 5
23848: PPUSH
23849: CALL 22167 0 3
// end ;
23853: LD_VAR 0 6
23857: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23858: LD_INT 0
23860: PPUSH
23861: PPUSH
23862: PPUSH
23863: PPUSH
23864: PPUSH
23865: PPUSH
23866: PPUSH
23867: PPUSH
23868: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23869: LD_VAR 0 1
23873: NOT
23874: PUSH
23875: LD_VAR 0 2
23879: PPUSH
23880: LD_VAR 0 3
23884: PPUSH
23885: CALL_OW 488
23889: NOT
23890: OR
23891: PUSH
23892: LD_VAR 0 4
23896: NOT
23897: OR
23898: IFFALSE 23902
// exit ;
23900: GO 24242
// list := [ ] ;
23902: LD_ADDR_VAR 0 13
23906: PUSH
23907: EMPTY
23908: ST_TO_ADDR
// if x - r < 0 then
23909: LD_VAR 0 2
23913: PUSH
23914: LD_VAR 0 4
23918: MINUS
23919: PUSH
23920: LD_INT 0
23922: LESS
23923: IFFALSE 23935
// min_x := 0 else
23925: LD_ADDR_VAR 0 7
23929: PUSH
23930: LD_INT 0
23932: ST_TO_ADDR
23933: GO 23951
// min_x := x - r ;
23935: LD_ADDR_VAR 0 7
23939: PUSH
23940: LD_VAR 0 2
23944: PUSH
23945: LD_VAR 0 4
23949: MINUS
23950: ST_TO_ADDR
// if y - r < 0 then
23951: LD_VAR 0 3
23955: PUSH
23956: LD_VAR 0 4
23960: MINUS
23961: PUSH
23962: LD_INT 0
23964: LESS
23965: IFFALSE 23977
// min_y := 0 else
23967: LD_ADDR_VAR 0 8
23971: PUSH
23972: LD_INT 0
23974: ST_TO_ADDR
23975: GO 23993
// min_y := y - r ;
23977: LD_ADDR_VAR 0 8
23981: PUSH
23982: LD_VAR 0 3
23986: PUSH
23987: LD_VAR 0 4
23991: MINUS
23992: ST_TO_ADDR
// max_x := x + r ;
23993: LD_ADDR_VAR 0 9
23997: PUSH
23998: LD_VAR 0 2
24002: PUSH
24003: LD_VAR 0 4
24007: PLUS
24008: ST_TO_ADDR
// max_y := y + r ;
24009: LD_ADDR_VAR 0 10
24013: PUSH
24014: LD_VAR 0 3
24018: PUSH
24019: LD_VAR 0 4
24023: PLUS
24024: ST_TO_ADDR
// for _x = min_x to max_x do
24025: LD_ADDR_VAR 0 11
24029: PUSH
24030: DOUBLE
24031: LD_VAR 0 7
24035: DEC
24036: ST_TO_ADDR
24037: LD_VAR 0 9
24041: PUSH
24042: FOR_TO
24043: IFFALSE 24160
// for _y = min_y to max_y do
24045: LD_ADDR_VAR 0 12
24049: PUSH
24050: DOUBLE
24051: LD_VAR 0 8
24055: DEC
24056: ST_TO_ADDR
24057: LD_VAR 0 10
24061: PUSH
24062: FOR_TO
24063: IFFALSE 24156
// begin if not ValidHex ( _x , _y ) then
24065: LD_VAR 0 11
24069: PPUSH
24070: LD_VAR 0 12
24074: PPUSH
24075: CALL_OW 488
24079: NOT
24080: IFFALSE 24084
// continue ;
24082: GO 24062
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24084: LD_VAR 0 11
24088: PPUSH
24089: LD_VAR 0 12
24093: PPUSH
24094: CALL_OW 351
24098: PUSH
24099: LD_VAR 0 11
24103: PPUSH
24104: LD_VAR 0 12
24108: PPUSH
24109: CALL_OW 554
24113: AND
24114: IFFALSE 24154
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24116: LD_ADDR_VAR 0 13
24120: PUSH
24121: LD_VAR 0 13
24125: PPUSH
24126: LD_VAR 0 13
24130: PUSH
24131: LD_INT 1
24133: PLUS
24134: PPUSH
24135: LD_VAR 0 11
24139: PUSH
24140: LD_VAR 0 12
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PPUSH
24149: CALL_OW 2
24153: ST_TO_ADDR
// end ;
24154: GO 24062
24156: POP
24157: POP
24158: GO 24042
24160: POP
24161: POP
// if not list then
24162: LD_VAR 0 13
24166: NOT
24167: IFFALSE 24171
// exit ;
24169: GO 24242
// for i in list do
24171: LD_ADDR_VAR 0 6
24175: PUSH
24176: LD_VAR 0 13
24180: PUSH
24181: FOR_IN
24182: IFFALSE 24240
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24184: LD_VAR 0 1
24188: PPUSH
24189: LD_STRING M
24191: PUSH
24192: LD_VAR 0 6
24196: PUSH
24197: LD_INT 1
24199: ARRAY
24200: PUSH
24201: LD_VAR 0 6
24205: PUSH
24206: LD_INT 2
24208: ARRAY
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: LD_INT 0
24215: PUSH
24216: LD_INT 0
24218: PUSH
24219: LD_INT 0
24221: PUSH
24222: EMPTY
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: PUSH
24231: EMPTY
24232: LIST
24233: PPUSH
24234: CALL_OW 447
24238: GO 24181
24240: POP
24241: POP
// end ;
24242: LD_VAR 0 5
24246: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24247: LD_EXP 86
24251: NOT
24252: IFFALSE 24302
24254: GO 24256
24256: DISABLE
// begin initHack := true ;
24257: LD_ADDR_EXP 86
24261: PUSH
24262: LD_INT 1
24264: ST_TO_ADDR
// hackTanks := [ ] ;
24265: LD_ADDR_EXP 87
24269: PUSH
24270: EMPTY
24271: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24272: LD_ADDR_EXP 88
24276: PUSH
24277: EMPTY
24278: ST_TO_ADDR
// hackLimit := 3 ;
24279: LD_ADDR_EXP 89
24283: PUSH
24284: LD_INT 3
24286: ST_TO_ADDR
// hackDist := 12 ;
24287: LD_ADDR_EXP 90
24291: PUSH
24292: LD_INT 12
24294: ST_TO_ADDR
// hackCounter := [ ] ;
24295: LD_ADDR_EXP 91
24299: PUSH
24300: EMPTY
24301: ST_TO_ADDR
// end ;
24302: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24303: LD_EXP 86
24307: PUSH
24308: LD_INT 34
24310: PUSH
24311: LD_INT 99
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: PPUSH
24318: CALL_OW 69
24322: AND
24323: IFFALSE 24576
24325: GO 24327
24327: DISABLE
24328: LD_INT 0
24330: PPUSH
24331: PPUSH
// begin enable ;
24332: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24333: LD_ADDR_VAR 0 1
24337: PUSH
24338: LD_INT 34
24340: PUSH
24341: LD_INT 99
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PUSH
24353: FOR_IN
24354: IFFALSE 24574
// begin if not i in hackTanks then
24356: LD_VAR 0 1
24360: PUSH
24361: LD_EXP 87
24365: IN
24366: NOT
24367: IFFALSE 24450
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24369: LD_ADDR_EXP 87
24373: PUSH
24374: LD_EXP 87
24378: PPUSH
24379: LD_EXP 87
24383: PUSH
24384: LD_INT 1
24386: PLUS
24387: PPUSH
24388: LD_VAR 0 1
24392: PPUSH
24393: CALL_OW 1
24397: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24398: LD_ADDR_EXP 88
24402: PUSH
24403: LD_EXP 88
24407: PPUSH
24408: LD_EXP 88
24412: PUSH
24413: LD_INT 1
24415: PLUS
24416: PPUSH
24417: EMPTY
24418: PPUSH
24419: CALL_OW 1
24423: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24424: LD_ADDR_EXP 91
24428: PUSH
24429: LD_EXP 91
24433: PPUSH
24434: LD_EXP 91
24438: PUSH
24439: LD_INT 1
24441: PLUS
24442: PPUSH
24443: EMPTY
24444: PPUSH
24445: CALL_OW 1
24449: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL_OW 302
24459: NOT
24460: IFFALSE 24473
// begin HackUnlinkAll ( i ) ;
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL 24579 0 1
// continue ;
24471: GO 24353
// end ; HackCheckCapturedStatus ( i ) ;
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL 25022 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24482: LD_ADDR_VAR 0 2
24486: PUSH
24487: LD_INT 81
24489: PUSH
24490: LD_VAR 0 1
24494: PPUSH
24495: CALL_OW 255
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 33
24506: PUSH
24507: LD_INT 3
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: LD_INT 91
24516: PUSH
24517: LD_VAR 0 1
24521: PUSH
24522: LD_EXP 90
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: PUSH
24532: LD_INT 50
24534: PUSH
24535: EMPTY
24536: LIST
24537: PUSH
24538: EMPTY
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: PPUSH
24544: CALL_OW 69
24548: ST_TO_ADDR
// if not tmp then
24549: LD_VAR 0 2
24553: NOT
24554: IFFALSE 24558
// continue ;
24556: GO 24353
// HackLink ( i , tmp ) ;
24558: LD_VAR 0 1
24562: PPUSH
24563: LD_VAR 0 2
24567: PPUSH
24568: CALL 24715 0 2
// end ;
24572: GO 24353
24574: POP
24575: POP
// end ;
24576: PPOPN 2
24578: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24579: LD_INT 0
24581: PPUSH
24582: PPUSH
24583: PPUSH
// if not hack in hackTanks then
24584: LD_VAR 0 1
24588: PUSH
24589: LD_EXP 87
24593: IN
24594: NOT
24595: IFFALSE 24599
// exit ;
24597: GO 24710
// index := GetElementIndex ( hackTanks , hack ) ;
24599: LD_ADDR_VAR 0 4
24603: PUSH
24604: LD_EXP 87
24608: PPUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL 32152 0 2
24618: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24619: LD_EXP 88
24623: PUSH
24624: LD_VAR 0 4
24628: ARRAY
24629: IFFALSE 24710
// begin for i in hackTanksCaptured [ index ] do
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_EXP 88
24640: PUSH
24641: LD_VAR 0 4
24645: ARRAY
24646: PUSH
24647: FOR_IN
24648: IFFALSE 24674
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24650: LD_VAR 0 3
24654: PUSH
24655: LD_INT 1
24657: ARRAY
24658: PPUSH
24659: LD_VAR 0 3
24663: PUSH
24664: LD_INT 2
24666: ARRAY
24667: PPUSH
24668: CALL_OW 235
24672: GO 24647
24674: POP
24675: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24676: LD_ADDR_EXP 88
24680: PUSH
24681: LD_EXP 88
24685: PPUSH
24686: LD_VAR 0 4
24690: PPUSH
24691: EMPTY
24692: PPUSH
24693: CALL_OW 1
24697: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24698: LD_VAR 0 1
24702: PPUSH
24703: LD_INT 0
24705: PPUSH
24706: CALL_OW 505
// end ; end ;
24710: LD_VAR 0 2
24714: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
24719: PPUSH
// if not hack in hackTanks or not vehicles then
24720: LD_VAR 0 1
24724: PUSH
24725: LD_EXP 87
24729: IN
24730: NOT
24731: PUSH
24732: LD_VAR 0 2
24736: NOT
24737: OR
24738: IFFALSE 24742
// exit ;
24740: GO 25017
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24742: LD_ADDR_VAR 0 2
24746: PUSH
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_VAR 0 2
24756: PPUSH
24757: LD_INT 1
24759: PPUSH
24760: LD_INT 1
24762: PPUSH
24763: CALL 32802 0 4
24767: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24768: LD_ADDR_VAR 0 5
24772: PUSH
24773: LD_EXP 87
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL 32152 0 2
24787: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24788: LD_EXP 88
24792: PUSH
24793: LD_VAR 0 5
24797: ARRAY
24798: PUSH
24799: LD_EXP 89
24803: LESS
24804: IFFALSE 24993
// begin for i := 1 to vehicles do
24806: LD_ADDR_VAR 0 4
24810: PUSH
24811: DOUBLE
24812: LD_INT 1
24814: DEC
24815: ST_TO_ADDR
24816: LD_VAR 0 2
24820: PUSH
24821: FOR_TO
24822: IFFALSE 24991
// begin if hackTanksCaptured [ index ] = hackLimit then
24824: LD_EXP 88
24828: PUSH
24829: LD_VAR 0 5
24833: ARRAY
24834: PUSH
24835: LD_EXP 89
24839: EQUAL
24840: IFFALSE 24844
// break ;
24842: GO 24991
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24844: LD_ADDR_EXP 91
24848: PUSH
24849: LD_EXP 91
24853: PPUSH
24854: LD_VAR 0 5
24858: PPUSH
24859: LD_EXP 91
24863: PUSH
24864: LD_VAR 0 5
24868: ARRAY
24869: PUSH
24870: LD_INT 1
24872: PLUS
24873: PPUSH
24874: CALL_OW 1
24878: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24879: LD_ADDR_EXP 88
24883: PUSH
24884: LD_EXP 88
24888: PPUSH
24889: LD_VAR 0 5
24893: PUSH
24894: LD_EXP 88
24898: PUSH
24899: LD_VAR 0 5
24903: ARRAY
24904: PUSH
24905: LD_INT 1
24907: PLUS
24908: PUSH
24909: EMPTY
24910: LIST
24911: LIST
24912: PPUSH
24913: LD_VAR 0 2
24917: PUSH
24918: LD_VAR 0 4
24922: ARRAY
24923: PUSH
24924: LD_VAR 0 2
24928: PUSH
24929: LD_VAR 0 4
24933: ARRAY
24934: PPUSH
24935: CALL_OW 255
24939: PUSH
24940: EMPTY
24941: LIST
24942: LIST
24943: PPUSH
24944: CALL 32367 0 3
24948: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24949: LD_VAR 0 2
24953: PUSH
24954: LD_VAR 0 4
24958: ARRAY
24959: PPUSH
24960: LD_VAR 0 1
24964: PPUSH
24965: CALL_OW 255
24969: PPUSH
24970: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24974: LD_VAR 0 2
24978: PUSH
24979: LD_VAR 0 4
24983: ARRAY
24984: PPUSH
24985: CALL_OW 141
// end ;
24989: GO 24821
24991: POP
24992: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_EXP 88
25002: PUSH
25003: LD_VAR 0 5
25007: ARRAY
25008: PUSH
25009: LD_INT 0
25011: PLUS
25012: PPUSH
25013: CALL_OW 505
// end ;
25017: LD_VAR 0 3
25021: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25022: LD_INT 0
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
// if not hack in hackTanks then
25028: LD_VAR 0 1
25032: PUSH
25033: LD_EXP 87
25037: IN
25038: NOT
25039: IFFALSE 25043
// exit ;
25041: GO 25283
// index := GetElementIndex ( hackTanks , hack ) ;
25043: LD_ADDR_VAR 0 4
25047: PUSH
25048: LD_EXP 87
25052: PPUSH
25053: LD_VAR 0 1
25057: PPUSH
25058: CALL 32152 0 2
25062: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: DOUBLE
25069: LD_EXP 88
25073: PUSH
25074: LD_VAR 0 4
25078: ARRAY
25079: INC
25080: ST_TO_ADDR
25081: LD_INT 1
25083: PUSH
25084: FOR_DOWNTO
25085: IFFALSE 25257
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25087: LD_ADDR_VAR 0 5
25091: PUSH
25092: LD_EXP 88
25096: PUSH
25097: LD_VAR 0 4
25101: ARRAY
25102: PUSH
25103: LD_VAR 0 3
25107: ARRAY
25108: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25109: LD_VAR 0 5
25113: PUSH
25114: LD_INT 1
25116: ARRAY
25117: PPUSH
25118: CALL_OW 302
25122: NOT
25123: PUSH
25124: LD_VAR 0 5
25128: PUSH
25129: LD_INT 1
25131: ARRAY
25132: PPUSH
25133: CALL_OW 255
25137: PUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 255
25147: NONEQUAL
25148: OR
25149: IFFALSE 25255
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25151: LD_VAR 0 5
25155: PUSH
25156: LD_INT 1
25158: ARRAY
25159: PPUSH
25160: CALL_OW 305
25164: PUSH
25165: LD_VAR 0 5
25169: PUSH
25170: LD_INT 1
25172: ARRAY
25173: PPUSH
25174: CALL_OW 255
25178: PUSH
25179: LD_VAR 0 1
25183: PPUSH
25184: CALL_OW 255
25188: EQUAL
25189: AND
25190: IFFALSE 25214
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25192: LD_VAR 0 5
25196: PUSH
25197: LD_INT 1
25199: ARRAY
25200: PPUSH
25201: LD_VAR 0 5
25205: PUSH
25206: LD_INT 2
25208: ARRAY
25209: PPUSH
25210: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25214: LD_ADDR_EXP 88
25218: PUSH
25219: LD_EXP 88
25223: PPUSH
25224: LD_VAR 0 4
25228: PPUSH
25229: LD_EXP 88
25233: PUSH
25234: LD_VAR 0 4
25238: ARRAY
25239: PPUSH
25240: LD_VAR 0 3
25244: PPUSH
25245: CALL_OW 3
25249: PPUSH
25250: CALL_OW 1
25254: ST_TO_ADDR
// end ; end ;
25255: GO 25084
25257: POP
25258: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25259: LD_VAR 0 1
25263: PPUSH
25264: LD_EXP 88
25268: PUSH
25269: LD_VAR 0 4
25273: ARRAY
25274: PUSH
25275: LD_INT 0
25277: PLUS
25278: PPUSH
25279: CALL_OW 505
// end ;
25283: LD_VAR 0 2
25287: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25288: LD_INT 0
25290: PPUSH
25291: PPUSH
25292: PPUSH
25293: PPUSH
// if not hack in hackTanks then
25294: LD_VAR 0 1
25298: PUSH
25299: LD_EXP 87
25303: IN
25304: NOT
25305: IFFALSE 25309
// exit ;
25307: GO 25394
// index := GetElementIndex ( hackTanks , hack ) ;
25309: LD_ADDR_VAR 0 5
25313: PUSH
25314: LD_EXP 87
25318: PPUSH
25319: LD_VAR 0 1
25323: PPUSH
25324: CALL 32152 0 2
25328: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25329: LD_ADDR_VAR 0 4
25333: PUSH
25334: DOUBLE
25335: LD_INT 1
25337: DEC
25338: ST_TO_ADDR
25339: LD_EXP 88
25343: PUSH
25344: LD_VAR 0 5
25348: ARRAY
25349: PUSH
25350: FOR_TO
25351: IFFALSE 25392
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25353: LD_EXP 88
25357: PUSH
25358: LD_VAR 0 5
25362: ARRAY
25363: PUSH
25364: LD_VAR 0 4
25368: ARRAY
25369: PUSH
25370: LD_INT 1
25372: ARRAY
25373: PUSH
25374: LD_VAR 0 2
25378: EQUAL
25379: IFFALSE 25390
// KillUnit ( vehicle ) ;
25381: LD_VAR 0 2
25385: PPUSH
25386: CALL_OW 66
25390: GO 25350
25392: POP
25393: POP
// end ;
25394: LD_VAR 0 3
25398: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25399: LD_EXP 92
25403: NOT
25404: IFFALSE 25439
25406: GO 25408
25408: DISABLE
// begin initMiner := true ;
25409: LD_ADDR_EXP 92
25413: PUSH
25414: LD_INT 1
25416: ST_TO_ADDR
// minersList := [ ] ;
25417: LD_ADDR_EXP 93
25421: PUSH
25422: EMPTY
25423: ST_TO_ADDR
// minerMinesList := [ ] ;
25424: LD_ADDR_EXP 94
25428: PUSH
25429: EMPTY
25430: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25431: LD_ADDR_EXP 95
25435: PUSH
25436: LD_INT 5
25438: ST_TO_ADDR
// end ;
25439: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25440: LD_EXP 92
25444: PUSH
25445: LD_INT 34
25447: PUSH
25448: LD_INT 81
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: AND
25460: IFFALSE 25921
25462: GO 25464
25464: DISABLE
25465: LD_INT 0
25467: PPUSH
25468: PPUSH
25469: PPUSH
25470: PPUSH
// begin enable ;
25471: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25472: LD_ADDR_VAR 0 1
25476: PUSH
25477: LD_INT 34
25479: PUSH
25480: LD_INT 81
25482: PUSH
25483: EMPTY
25484: LIST
25485: LIST
25486: PPUSH
25487: CALL_OW 69
25491: PUSH
25492: FOR_IN
25493: IFFALSE 25565
// begin if not i in minersList then
25495: LD_VAR 0 1
25499: PUSH
25500: LD_EXP 93
25504: IN
25505: NOT
25506: IFFALSE 25563
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25508: LD_ADDR_EXP 93
25512: PUSH
25513: LD_EXP 93
25517: PPUSH
25518: LD_EXP 93
25522: PUSH
25523: LD_INT 1
25525: PLUS
25526: PPUSH
25527: LD_VAR 0 1
25531: PPUSH
25532: CALL_OW 1
25536: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25537: LD_ADDR_EXP 94
25541: PUSH
25542: LD_EXP 94
25546: PPUSH
25547: LD_EXP 94
25551: PUSH
25552: LD_INT 1
25554: PLUS
25555: PPUSH
25556: EMPTY
25557: PPUSH
25558: CALL_OW 1
25562: ST_TO_ADDR
// end end ;
25563: GO 25492
25565: POP
25566: POP
// for i := minerMinesList downto 1 do
25567: LD_ADDR_VAR 0 1
25571: PUSH
25572: DOUBLE
25573: LD_EXP 94
25577: INC
25578: ST_TO_ADDR
25579: LD_INT 1
25581: PUSH
25582: FOR_DOWNTO
25583: IFFALSE 25919
// begin if IsLive ( minersList [ i ] ) then
25585: LD_EXP 93
25589: PUSH
25590: LD_VAR 0 1
25594: ARRAY
25595: PPUSH
25596: CALL_OW 300
25600: IFFALSE 25628
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25602: LD_EXP 93
25606: PUSH
25607: LD_VAR 0 1
25611: ARRAY
25612: PPUSH
25613: LD_EXP 94
25617: PUSH
25618: LD_VAR 0 1
25622: ARRAY
25623: PPUSH
25624: CALL_OW 505
// if not minerMinesList [ i ] then
25628: LD_EXP 94
25632: PUSH
25633: LD_VAR 0 1
25637: ARRAY
25638: NOT
25639: IFFALSE 25643
// continue ;
25641: GO 25582
// for j := minerMinesList [ i ] downto 1 do
25643: LD_ADDR_VAR 0 2
25647: PUSH
25648: DOUBLE
25649: LD_EXP 94
25653: PUSH
25654: LD_VAR 0 1
25658: ARRAY
25659: INC
25660: ST_TO_ADDR
25661: LD_INT 1
25663: PUSH
25664: FOR_DOWNTO
25665: IFFALSE 25915
// begin side := GetSide ( minersList [ i ] ) ;
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: LD_EXP 93
25676: PUSH
25677: LD_VAR 0 1
25681: ARRAY
25682: PPUSH
25683: CALL_OW 255
25687: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25688: LD_ADDR_VAR 0 4
25692: PUSH
25693: LD_EXP 94
25697: PUSH
25698: LD_VAR 0 1
25702: ARRAY
25703: PUSH
25704: LD_VAR 0 2
25708: ARRAY
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_EXP 94
25718: PUSH
25719: LD_VAR 0 1
25723: ARRAY
25724: PUSH
25725: LD_VAR 0 2
25729: ARRAY
25730: PUSH
25731: LD_INT 2
25733: ARRAY
25734: PPUSH
25735: CALL_OW 428
25739: ST_TO_ADDR
// if not tmp then
25740: LD_VAR 0 4
25744: NOT
25745: IFFALSE 25749
// continue ;
25747: GO 25664
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25749: LD_VAR 0 4
25753: PUSH
25754: LD_INT 81
25756: PUSH
25757: LD_VAR 0 3
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: PPUSH
25766: CALL_OW 69
25770: IN
25771: PUSH
25772: LD_EXP 94
25776: PUSH
25777: LD_VAR 0 1
25781: ARRAY
25782: PUSH
25783: LD_VAR 0 2
25787: ARRAY
25788: PUSH
25789: LD_INT 1
25791: ARRAY
25792: PPUSH
25793: LD_EXP 94
25797: PUSH
25798: LD_VAR 0 1
25802: ARRAY
25803: PUSH
25804: LD_VAR 0 2
25808: ARRAY
25809: PUSH
25810: LD_INT 2
25812: ARRAY
25813: PPUSH
25814: CALL_OW 458
25818: AND
25819: IFFALSE 25913
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25821: LD_EXP 94
25825: PUSH
25826: LD_VAR 0 1
25830: ARRAY
25831: PUSH
25832: LD_VAR 0 2
25836: ARRAY
25837: PUSH
25838: LD_INT 1
25840: ARRAY
25841: PPUSH
25842: LD_EXP 94
25846: PUSH
25847: LD_VAR 0 1
25851: ARRAY
25852: PUSH
25853: LD_VAR 0 2
25857: ARRAY
25858: PUSH
25859: LD_INT 2
25861: ARRAY
25862: PPUSH
25863: LD_VAR 0 3
25867: PPUSH
25868: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25872: LD_ADDR_EXP 94
25876: PUSH
25877: LD_EXP 94
25881: PPUSH
25882: LD_VAR 0 1
25886: PPUSH
25887: LD_EXP 94
25891: PUSH
25892: LD_VAR 0 1
25896: ARRAY
25897: PPUSH
25898: LD_VAR 0 2
25902: PPUSH
25903: CALL_OW 3
25907: PPUSH
25908: CALL_OW 1
25912: ST_TO_ADDR
// end ; end ;
25913: GO 25664
25915: POP
25916: POP
// end ;
25917: GO 25582
25919: POP
25920: POP
// end ;
25921: PPOPN 4
25923: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25924: LD_INT 0
25926: PPUSH
25927: PPUSH
// result := false ;
25928: LD_ADDR_VAR 0 4
25932: PUSH
25933: LD_INT 0
25935: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 264
25945: PUSH
25946: LD_INT 81
25948: EQUAL
25949: NOT
25950: IFFALSE 25954
// exit ;
25952: GO 26194
// index := GetElementIndex ( minersList , unit ) ;
25954: LD_ADDR_VAR 0 5
25958: PUSH
25959: LD_EXP 93
25963: PPUSH
25964: LD_VAR 0 1
25968: PPUSH
25969: CALL 32152 0 2
25973: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25974: LD_EXP 94
25978: PUSH
25979: LD_VAR 0 5
25983: ARRAY
25984: PUSH
25985: LD_EXP 95
25989: GREATEREQUAL
25990: IFFALSE 25994
// exit ;
25992: GO 26194
// ComMoveXY ( unit , x , y ) ;
25994: LD_VAR 0 1
25998: PPUSH
25999: LD_VAR 0 2
26003: PPUSH
26004: LD_VAR 0 3
26008: PPUSH
26009: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26013: LD_INT 35
26015: PPUSH
26016: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26020: LD_VAR 0 1
26024: PPUSH
26025: LD_VAR 0 2
26029: PPUSH
26030: LD_VAR 0 3
26034: PPUSH
26035: CALL 63507 0 3
26039: NOT
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 314
26050: AND
26051: IFFALSE 26055
// exit ;
26053: GO 26194
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: CALL_OW 428
26069: PUSH
26070: LD_VAR 0 1
26074: EQUAL
26075: PUSH
26076: LD_VAR 0 1
26080: PPUSH
26081: CALL_OW 314
26085: NOT
26086: AND
26087: IFFALSE 26013
// PlaySoundXY ( x , y , PlantMine ) ;
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_VAR 0 3
26098: PPUSH
26099: LD_STRING PlantMine
26101: PPUSH
26102: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26106: LD_VAR 0 2
26110: PPUSH
26111: LD_VAR 0 3
26115: PPUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 255
26125: PPUSH
26126: LD_INT 0
26128: PPUSH
26129: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26133: LD_ADDR_EXP 94
26137: PUSH
26138: LD_EXP 94
26142: PPUSH
26143: LD_VAR 0 5
26147: PUSH
26148: LD_EXP 94
26152: PUSH
26153: LD_VAR 0 5
26157: ARRAY
26158: PUSH
26159: LD_INT 1
26161: PLUS
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PPUSH
26167: LD_VAR 0 2
26171: PUSH
26172: LD_VAR 0 3
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PPUSH
26181: CALL 32367 0 3
26185: ST_TO_ADDR
// result := true ;
26186: LD_ADDR_VAR 0 4
26190: PUSH
26191: LD_INT 1
26193: ST_TO_ADDR
// end ;
26194: LD_VAR 0 4
26198: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26199: LD_INT 0
26201: PPUSH
26202: PPUSH
26203: PPUSH
// if not unit in minersList then
26204: LD_VAR 0 1
26208: PUSH
26209: LD_EXP 93
26213: IN
26214: NOT
26215: IFFALSE 26219
// exit ;
26217: GO 26611
// index := GetElementIndex ( minersList , unit ) ;
26219: LD_ADDR_VAR 0 6
26223: PUSH
26224: LD_EXP 93
26228: PPUSH
26229: LD_VAR 0 1
26233: PPUSH
26234: CALL 32152 0 2
26238: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26239: LD_ADDR_VAR 0 5
26243: PUSH
26244: DOUBLE
26245: LD_EXP 94
26249: PUSH
26250: LD_VAR 0 6
26254: ARRAY
26255: INC
26256: ST_TO_ADDR
26257: LD_INT 1
26259: PUSH
26260: FOR_DOWNTO
26261: IFFALSE 26422
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26263: LD_EXP 94
26267: PUSH
26268: LD_VAR 0 6
26272: ARRAY
26273: PUSH
26274: LD_VAR 0 5
26278: ARRAY
26279: PUSH
26280: LD_INT 1
26282: ARRAY
26283: PUSH
26284: LD_VAR 0 2
26288: EQUAL
26289: PUSH
26290: LD_EXP 94
26294: PUSH
26295: LD_VAR 0 6
26299: ARRAY
26300: PUSH
26301: LD_VAR 0 5
26305: ARRAY
26306: PUSH
26307: LD_INT 2
26309: ARRAY
26310: PUSH
26311: LD_VAR 0 3
26315: EQUAL
26316: AND
26317: IFFALSE 26420
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26319: LD_EXP 94
26323: PUSH
26324: LD_VAR 0 6
26328: ARRAY
26329: PUSH
26330: LD_VAR 0 5
26334: ARRAY
26335: PUSH
26336: LD_INT 1
26338: ARRAY
26339: PPUSH
26340: LD_EXP 94
26344: PUSH
26345: LD_VAR 0 6
26349: ARRAY
26350: PUSH
26351: LD_VAR 0 5
26355: ARRAY
26356: PUSH
26357: LD_INT 2
26359: ARRAY
26360: PPUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 255
26370: PPUSH
26371: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26375: LD_ADDR_EXP 94
26379: PUSH
26380: LD_EXP 94
26384: PPUSH
26385: LD_VAR 0 6
26389: PPUSH
26390: LD_EXP 94
26394: PUSH
26395: LD_VAR 0 6
26399: ARRAY
26400: PPUSH
26401: LD_VAR 0 5
26405: PPUSH
26406: CALL_OW 3
26410: PPUSH
26411: CALL_OW 1
26415: ST_TO_ADDR
// exit ;
26416: POP
26417: POP
26418: GO 26611
// end ; end ;
26420: GO 26260
26422: POP
26423: POP
// for i := minerMinesList [ index ] downto 1 do
26424: LD_ADDR_VAR 0 5
26428: PUSH
26429: DOUBLE
26430: LD_EXP 94
26434: PUSH
26435: LD_VAR 0 6
26439: ARRAY
26440: INC
26441: ST_TO_ADDR
26442: LD_INT 1
26444: PUSH
26445: FOR_DOWNTO
26446: IFFALSE 26609
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26448: LD_EXP 94
26452: PUSH
26453: LD_VAR 0 6
26457: ARRAY
26458: PUSH
26459: LD_VAR 0 5
26463: ARRAY
26464: PUSH
26465: LD_INT 1
26467: ARRAY
26468: PPUSH
26469: LD_EXP 94
26473: PUSH
26474: LD_VAR 0 6
26478: ARRAY
26479: PUSH
26480: LD_VAR 0 5
26484: ARRAY
26485: PUSH
26486: LD_INT 2
26488: ARRAY
26489: PPUSH
26490: LD_VAR 0 2
26494: PPUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: CALL_OW 298
26504: PUSH
26505: LD_INT 6
26507: LESS
26508: IFFALSE 26607
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26510: LD_EXP 94
26514: PUSH
26515: LD_VAR 0 6
26519: ARRAY
26520: PUSH
26521: LD_VAR 0 5
26525: ARRAY
26526: PUSH
26527: LD_INT 1
26529: ARRAY
26530: PPUSH
26531: LD_EXP 94
26535: PUSH
26536: LD_VAR 0 6
26540: ARRAY
26541: PUSH
26542: LD_VAR 0 5
26546: ARRAY
26547: PUSH
26548: LD_INT 2
26550: ARRAY
26551: PPUSH
26552: LD_VAR 0 1
26556: PPUSH
26557: CALL_OW 255
26561: PPUSH
26562: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26566: LD_ADDR_EXP 94
26570: PUSH
26571: LD_EXP 94
26575: PPUSH
26576: LD_VAR 0 6
26580: PPUSH
26581: LD_EXP 94
26585: PUSH
26586: LD_VAR 0 6
26590: ARRAY
26591: PPUSH
26592: LD_VAR 0 5
26596: PPUSH
26597: CALL_OW 3
26601: PPUSH
26602: CALL_OW 1
26606: ST_TO_ADDR
// end ; end ;
26607: GO 26445
26609: POP
26610: POP
// end ;
26611: LD_VAR 0 4
26615: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26616: LD_INT 0
26618: PPUSH
26619: PPUSH
26620: PPUSH
26621: PPUSH
26622: PPUSH
26623: PPUSH
26624: PPUSH
26625: PPUSH
26626: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26627: LD_VAR 0 1
26631: PPUSH
26632: CALL_OW 264
26636: PUSH
26637: LD_INT 81
26639: EQUAL
26640: NOT
26641: PUSH
26642: LD_VAR 0 1
26646: PUSH
26647: LD_EXP 93
26651: IN
26652: NOT
26653: OR
26654: IFFALSE 26658
// exit ;
26656: GO 26980
// index := GetElementIndex ( minersList , unit ) ;
26658: LD_ADDR_VAR 0 6
26662: PUSH
26663: LD_EXP 93
26667: PPUSH
26668: LD_VAR 0 1
26672: PPUSH
26673: CALL 32152 0 2
26677: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26678: LD_ADDR_VAR 0 8
26682: PUSH
26683: LD_EXP 95
26687: PUSH
26688: LD_EXP 94
26692: PUSH
26693: LD_VAR 0 6
26697: ARRAY
26698: MINUS
26699: ST_TO_ADDR
// if not minesFreeAmount then
26700: LD_VAR 0 8
26704: NOT
26705: IFFALSE 26709
// exit ;
26707: GO 26980
// tmp := [ ] ;
26709: LD_ADDR_VAR 0 7
26713: PUSH
26714: EMPTY
26715: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26716: LD_ADDR_VAR 0 5
26720: PUSH
26721: DOUBLE
26722: LD_INT 1
26724: DEC
26725: ST_TO_ADDR
26726: LD_VAR 0 8
26730: PUSH
26731: FOR_TO
26732: IFFALSE 26927
// begin _d := rand ( 0 , 5 ) ;
26734: LD_ADDR_VAR 0 11
26738: PUSH
26739: LD_INT 0
26741: PPUSH
26742: LD_INT 5
26744: PPUSH
26745: CALL_OW 12
26749: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26750: LD_ADDR_VAR 0 12
26754: PUSH
26755: LD_INT 2
26757: PPUSH
26758: LD_INT 6
26760: PPUSH
26761: CALL_OW 12
26765: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26766: LD_ADDR_VAR 0 9
26770: PUSH
26771: LD_VAR 0 2
26775: PPUSH
26776: LD_VAR 0 11
26780: PPUSH
26781: LD_VAR 0 12
26785: PPUSH
26786: CALL_OW 272
26790: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26791: LD_ADDR_VAR 0 10
26795: PUSH
26796: LD_VAR 0 3
26800: PPUSH
26801: LD_VAR 0 11
26805: PPUSH
26806: LD_VAR 0 12
26810: PPUSH
26811: CALL_OW 273
26815: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26816: LD_VAR 0 9
26820: PPUSH
26821: LD_VAR 0 10
26825: PPUSH
26826: CALL_OW 488
26830: PUSH
26831: LD_VAR 0 9
26835: PUSH
26836: LD_VAR 0 10
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_VAR 0 7
26849: IN
26850: NOT
26851: AND
26852: PUSH
26853: LD_VAR 0 9
26857: PPUSH
26858: LD_VAR 0 10
26862: PPUSH
26863: CALL_OW 458
26867: NOT
26868: AND
26869: IFFALSE 26911
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26871: LD_ADDR_VAR 0 7
26875: PUSH
26876: LD_VAR 0 7
26880: PPUSH
26881: LD_VAR 0 7
26885: PUSH
26886: LD_INT 1
26888: PLUS
26889: PPUSH
26890: LD_VAR 0 9
26894: PUSH
26895: LD_VAR 0 10
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PPUSH
26904: CALL_OW 1
26908: ST_TO_ADDR
26909: GO 26925
// i := i - 1 ;
26911: LD_ADDR_VAR 0 5
26915: PUSH
26916: LD_VAR 0 5
26920: PUSH
26921: LD_INT 1
26923: MINUS
26924: ST_TO_ADDR
// end ;
26925: GO 26731
26927: POP
26928: POP
// for i in tmp do
26929: LD_ADDR_VAR 0 5
26933: PUSH
26934: LD_VAR 0 7
26938: PUSH
26939: FOR_IN
26940: IFFALSE 26978
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26942: LD_VAR 0 1
26946: PPUSH
26947: LD_VAR 0 5
26951: PUSH
26952: LD_INT 1
26954: ARRAY
26955: PPUSH
26956: LD_VAR 0 5
26960: PUSH
26961: LD_INT 2
26963: ARRAY
26964: PPUSH
26965: CALL 25924 0 3
26969: NOT
26970: IFFALSE 26976
// exit ;
26972: POP
26973: POP
26974: GO 26980
26976: GO 26939
26978: POP
26979: POP
// end ;
26980: LD_VAR 0 4
26984: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26985: LD_INT 0
26987: PPUSH
26988: PPUSH
26989: PPUSH
26990: PPUSH
26991: PPUSH
26992: PPUSH
26993: PPUSH
// if not GetClass ( unit ) = class_sniper then
26994: LD_VAR 0 1
26998: PPUSH
26999: CALL_OW 257
27003: PUSH
27004: LD_INT 5
27006: EQUAL
27007: NOT
27008: IFFALSE 27012
// exit ;
27010: GO 27400
// dist := 8 ;
27012: LD_ADDR_VAR 0 5
27016: PUSH
27017: LD_INT 8
27019: ST_TO_ADDR
// viewRange := 12 ;
27020: LD_ADDR_VAR 0 7
27024: PUSH
27025: LD_INT 12
27027: ST_TO_ADDR
// side := GetSide ( unit ) ;
27028: LD_ADDR_VAR 0 6
27032: PUSH
27033: LD_VAR 0 1
27037: PPUSH
27038: CALL_OW 255
27042: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27043: LD_INT 61
27045: PPUSH
27046: LD_VAR 0 6
27050: PPUSH
27051: CALL_OW 321
27055: PUSH
27056: LD_INT 2
27058: EQUAL
27059: IFFALSE 27069
// viewRange := 16 ;
27061: LD_ADDR_VAR 0 7
27065: PUSH
27066: LD_INT 16
27068: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27069: LD_VAR 0 1
27073: PPUSH
27074: LD_VAR 0 2
27078: PPUSH
27079: LD_VAR 0 3
27083: PPUSH
27084: CALL_OW 297
27088: PUSH
27089: LD_VAR 0 5
27093: GREATER
27094: IFFALSE 27173
// begin ComMoveXY ( unit , x , y ) ;
27096: LD_VAR 0 1
27100: PPUSH
27101: LD_VAR 0 2
27105: PPUSH
27106: LD_VAR 0 3
27110: PPUSH
27111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27115: LD_INT 35
27117: PPUSH
27118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27122: LD_VAR 0 1
27126: PPUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_VAR 0 3
27136: PPUSH
27137: CALL 63507 0 3
27141: NOT
27142: IFFALSE 27146
// exit ;
27144: GO 27400
// until GetDistUnitXY ( unit , x , y ) < dist ;
27146: LD_VAR 0 1
27150: PPUSH
27151: LD_VAR 0 2
27155: PPUSH
27156: LD_VAR 0 3
27160: PPUSH
27161: CALL_OW 297
27165: PUSH
27166: LD_VAR 0 5
27170: LESS
27171: IFFALSE 27115
// end ; ComTurnXY ( unit , x , y ) ;
27173: LD_VAR 0 1
27177: PPUSH
27178: LD_VAR 0 2
27182: PPUSH
27183: LD_VAR 0 3
27187: PPUSH
27188: CALL_OW 118
// wait ( 5 ) ;
27192: LD_INT 5
27194: PPUSH
27195: CALL_OW 67
// _d := GetDir ( unit ) ;
27199: LD_ADDR_VAR 0 10
27203: PUSH
27204: LD_VAR 0 1
27208: PPUSH
27209: CALL_OW 254
27213: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27214: LD_ADDR_VAR 0 8
27218: PUSH
27219: LD_VAR 0 1
27223: PPUSH
27224: CALL_OW 250
27228: PPUSH
27229: LD_VAR 0 10
27233: PPUSH
27234: LD_VAR 0 5
27238: PPUSH
27239: CALL_OW 272
27243: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27244: LD_ADDR_VAR 0 9
27248: PUSH
27249: LD_VAR 0 1
27253: PPUSH
27254: CALL_OW 251
27258: PPUSH
27259: LD_VAR 0 10
27263: PPUSH
27264: LD_VAR 0 5
27268: PPUSH
27269: CALL_OW 273
27273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27274: LD_VAR 0 8
27278: PPUSH
27279: LD_VAR 0 9
27283: PPUSH
27284: CALL_OW 488
27288: NOT
27289: IFFALSE 27293
// exit ;
27291: GO 27400
// ComAnimCustom ( unit , 1 ) ;
27293: LD_VAR 0 1
27297: PPUSH
27298: LD_INT 1
27300: PPUSH
27301: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27305: LD_VAR 0 8
27309: PPUSH
27310: LD_VAR 0 9
27314: PPUSH
27315: LD_VAR 0 6
27319: PPUSH
27320: LD_VAR 0 7
27324: PPUSH
27325: CALL_OW 330
// repeat wait ( 1 ) ;
27329: LD_INT 1
27331: PPUSH
27332: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27336: LD_VAR 0 1
27340: PPUSH
27341: CALL_OW 316
27345: PUSH
27346: LD_VAR 0 1
27350: PPUSH
27351: CALL_OW 314
27355: OR
27356: PUSH
27357: LD_VAR 0 1
27361: PPUSH
27362: CALL_OW 302
27366: NOT
27367: OR
27368: PUSH
27369: LD_VAR 0 1
27373: PPUSH
27374: CALL_OW 301
27378: OR
27379: IFFALSE 27329
// RemoveSeeing ( _x , _y , side ) ;
27381: LD_VAR 0 8
27385: PPUSH
27386: LD_VAR 0 9
27390: PPUSH
27391: LD_VAR 0 6
27395: PPUSH
27396: CALL_OW 331
// end ; end_of_file
27400: LD_VAR 0 4
27404: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27405: LD_INT 0
27407: PPUSH
27408: PPUSH
// if exist_mode then
27409: LD_VAR 0 2
27413: IFFALSE 27438
// unit := CreateCharacter ( prefix & ident ) else
27415: LD_ADDR_VAR 0 5
27419: PUSH
27420: LD_VAR 0 3
27424: PUSH
27425: LD_VAR 0 1
27429: STR
27430: PPUSH
27431: CALL_OW 34
27435: ST_TO_ADDR
27436: GO 27453
// unit := NewCharacter ( ident ) ;
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: LD_VAR 0 1
27447: PPUSH
27448: CALL_OW 25
27452: ST_TO_ADDR
// result := unit ;
27453: LD_ADDR_VAR 0 4
27457: PUSH
27458: LD_VAR 0 5
27462: ST_TO_ADDR
// end ;
27463: LD_VAR 0 4
27467: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27468: LD_INT 0
27470: PPUSH
27471: PPUSH
// if not side or not nation then
27472: LD_VAR 0 1
27476: NOT
27477: PUSH
27478: LD_VAR 0 2
27482: NOT
27483: OR
27484: IFFALSE 27488
// exit ;
27486: GO 28256
// case nation of nation_american :
27488: LD_VAR 0 2
27492: PUSH
27493: LD_INT 1
27495: DOUBLE
27496: EQUAL
27497: IFTRUE 27501
27499: GO 27715
27501: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27502: LD_ADDR_VAR 0 4
27506: PUSH
27507: LD_INT 35
27509: PUSH
27510: LD_INT 45
27512: PUSH
27513: LD_INT 46
27515: PUSH
27516: LD_INT 47
27518: PUSH
27519: LD_INT 82
27521: PUSH
27522: LD_INT 83
27524: PUSH
27525: LD_INT 84
27527: PUSH
27528: LD_INT 85
27530: PUSH
27531: LD_INT 86
27533: PUSH
27534: LD_INT 1
27536: PUSH
27537: LD_INT 2
27539: PUSH
27540: LD_INT 6
27542: PUSH
27543: LD_INT 15
27545: PUSH
27546: LD_INT 16
27548: PUSH
27549: LD_INT 7
27551: PUSH
27552: LD_INT 12
27554: PUSH
27555: LD_INT 13
27557: PUSH
27558: LD_INT 10
27560: PUSH
27561: LD_INT 14
27563: PUSH
27564: LD_INT 20
27566: PUSH
27567: LD_INT 21
27569: PUSH
27570: LD_INT 22
27572: PUSH
27573: LD_INT 25
27575: PUSH
27576: LD_INT 32
27578: PUSH
27579: LD_INT 27
27581: PUSH
27582: LD_INT 36
27584: PUSH
27585: LD_INT 69
27587: PUSH
27588: LD_INT 39
27590: PUSH
27591: LD_INT 34
27593: PUSH
27594: LD_INT 40
27596: PUSH
27597: LD_INT 48
27599: PUSH
27600: LD_INT 49
27602: PUSH
27603: LD_INT 50
27605: PUSH
27606: LD_INT 51
27608: PUSH
27609: LD_INT 52
27611: PUSH
27612: LD_INT 53
27614: PUSH
27615: LD_INT 54
27617: PUSH
27618: LD_INT 55
27620: PUSH
27621: LD_INT 56
27623: PUSH
27624: LD_INT 57
27626: PUSH
27627: LD_INT 58
27629: PUSH
27630: LD_INT 59
27632: PUSH
27633: LD_INT 60
27635: PUSH
27636: LD_INT 61
27638: PUSH
27639: LD_INT 62
27641: PUSH
27642: LD_INT 80
27644: PUSH
27645: LD_INT 82
27647: PUSH
27648: LD_INT 83
27650: PUSH
27651: LD_INT 84
27653: PUSH
27654: LD_INT 85
27656: PUSH
27657: LD_INT 86
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: LIST
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: LIST
27711: LIST
27712: ST_TO_ADDR
27713: GO 28180
27715: LD_INT 2
27717: DOUBLE
27718: EQUAL
27719: IFTRUE 27723
27721: GO 27949
27723: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27724: LD_ADDR_VAR 0 4
27728: PUSH
27729: LD_INT 35
27731: PUSH
27732: LD_INT 45
27734: PUSH
27735: LD_INT 46
27737: PUSH
27738: LD_INT 47
27740: PUSH
27741: LD_INT 82
27743: PUSH
27744: LD_INT 83
27746: PUSH
27747: LD_INT 84
27749: PUSH
27750: LD_INT 85
27752: PUSH
27753: LD_INT 87
27755: PUSH
27756: LD_INT 70
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: LD_INT 11
27764: PUSH
27765: LD_INT 3
27767: PUSH
27768: LD_INT 4
27770: PUSH
27771: LD_INT 5
27773: PUSH
27774: LD_INT 6
27776: PUSH
27777: LD_INT 15
27779: PUSH
27780: LD_INT 18
27782: PUSH
27783: LD_INT 7
27785: PUSH
27786: LD_INT 17
27788: PUSH
27789: LD_INT 8
27791: PUSH
27792: LD_INT 20
27794: PUSH
27795: LD_INT 21
27797: PUSH
27798: LD_INT 22
27800: PUSH
27801: LD_INT 72
27803: PUSH
27804: LD_INT 26
27806: PUSH
27807: LD_INT 69
27809: PUSH
27810: LD_INT 39
27812: PUSH
27813: LD_INT 40
27815: PUSH
27816: LD_INT 41
27818: PUSH
27819: LD_INT 42
27821: PUSH
27822: LD_INT 43
27824: PUSH
27825: LD_INT 48
27827: PUSH
27828: LD_INT 49
27830: PUSH
27831: LD_INT 50
27833: PUSH
27834: LD_INT 51
27836: PUSH
27837: LD_INT 52
27839: PUSH
27840: LD_INT 53
27842: PUSH
27843: LD_INT 54
27845: PUSH
27846: LD_INT 55
27848: PUSH
27849: LD_INT 56
27851: PUSH
27852: LD_INT 60
27854: PUSH
27855: LD_INT 61
27857: PUSH
27858: LD_INT 62
27860: PUSH
27861: LD_INT 66
27863: PUSH
27864: LD_INT 67
27866: PUSH
27867: LD_INT 68
27869: PUSH
27870: LD_INT 81
27872: PUSH
27873: LD_INT 82
27875: PUSH
27876: LD_INT 83
27878: PUSH
27879: LD_INT 84
27881: PUSH
27882: LD_INT 85
27884: PUSH
27885: LD_INT 87
27887: PUSH
27888: LD_INT 88
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: LIST
27918: LIST
27919: LIST
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: LIST
27928: LIST
27929: LIST
27930: LIST
27931: LIST
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
27947: GO 28180
27949: LD_INT 3
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 28179
27957: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27958: LD_ADDR_VAR 0 4
27962: PUSH
27963: LD_INT 46
27965: PUSH
27966: LD_INT 47
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: LD_INT 2
27974: PUSH
27975: LD_INT 82
27977: PUSH
27978: LD_INT 83
27980: PUSH
27981: LD_INT 84
27983: PUSH
27984: LD_INT 85
27986: PUSH
27987: LD_INT 86
27989: PUSH
27990: LD_INT 11
27992: PUSH
27993: LD_INT 9
27995: PUSH
27996: LD_INT 20
27998: PUSH
27999: LD_INT 19
28001: PUSH
28002: LD_INT 21
28004: PUSH
28005: LD_INT 24
28007: PUSH
28008: LD_INT 22
28010: PUSH
28011: LD_INT 25
28013: PUSH
28014: LD_INT 28
28016: PUSH
28017: LD_INT 29
28019: PUSH
28020: LD_INT 30
28022: PUSH
28023: LD_INT 31
28025: PUSH
28026: LD_INT 37
28028: PUSH
28029: LD_INT 38
28031: PUSH
28032: LD_INT 32
28034: PUSH
28035: LD_INT 27
28037: PUSH
28038: LD_INT 33
28040: PUSH
28041: LD_INT 69
28043: PUSH
28044: LD_INT 39
28046: PUSH
28047: LD_INT 34
28049: PUSH
28050: LD_INT 40
28052: PUSH
28053: LD_INT 71
28055: PUSH
28056: LD_INT 23
28058: PUSH
28059: LD_INT 44
28061: PUSH
28062: LD_INT 48
28064: PUSH
28065: LD_INT 49
28067: PUSH
28068: LD_INT 50
28070: PUSH
28071: LD_INT 51
28073: PUSH
28074: LD_INT 52
28076: PUSH
28077: LD_INT 53
28079: PUSH
28080: LD_INT 54
28082: PUSH
28083: LD_INT 55
28085: PUSH
28086: LD_INT 56
28088: PUSH
28089: LD_INT 57
28091: PUSH
28092: LD_INT 58
28094: PUSH
28095: LD_INT 59
28097: PUSH
28098: LD_INT 63
28100: PUSH
28101: LD_INT 64
28103: PUSH
28104: LD_INT 65
28106: PUSH
28107: LD_INT 82
28109: PUSH
28110: LD_INT 83
28112: PUSH
28113: LD_INT 84
28115: PUSH
28116: LD_INT 85
28118: PUSH
28119: LD_INT 86
28121: PUSH
28122: EMPTY
28123: LIST
28124: LIST
28125: LIST
28126: LIST
28127: LIST
28128: LIST
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: LIST
28134: LIST
28135: LIST
28136: LIST
28137: LIST
28138: LIST
28139: LIST
28140: LIST
28141: LIST
28142: LIST
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: LIST
28149: LIST
28150: LIST
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: ST_TO_ADDR
28177: GO 28180
28179: POP
// if state > - 1 and state < 3 then
28180: LD_VAR 0 3
28184: PUSH
28185: LD_INT 1
28187: NEG
28188: GREATER
28189: PUSH
28190: LD_VAR 0 3
28194: PUSH
28195: LD_INT 3
28197: LESS
28198: AND
28199: IFFALSE 28256
// for i in result do
28201: LD_ADDR_VAR 0 5
28205: PUSH
28206: LD_VAR 0 4
28210: PUSH
28211: FOR_IN
28212: IFFALSE 28254
// if GetTech ( i , side ) <> state then
28214: LD_VAR 0 5
28218: PPUSH
28219: LD_VAR 0 1
28223: PPUSH
28224: CALL_OW 321
28228: PUSH
28229: LD_VAR 0 3
28233: NONEQUAL
28234: IFFALSE 28252
// result := result diff i ;
28236: LD_ADDR_VAR 0 4
28240: PUSH
28241: LD_VAR 0 4
28245: PUSH
28246: LD_VAR 0 5
28250: DIFF
28251: ST_TO_ADDR
28252: GO 28211
28254: POP
28255: POP
// end ;
28256: LD_VAR 0 4
28260: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28261: LD_INT 0
28263: PPUSH
28264: PPUSH
28265: PPUSH
// result := true ;
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_INT 1
28273: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28274: LD_ADDR_VAR 0 5
28278: PUSH
28279: LD_VAR 0 2
28283: PPUSH
28284: CALL_OW 480
28288: ST_TO_ADDR
// if not tmp then
28289: LD_VAR 0 5
28293: NOT
28294: IFFALSE 28298
// exit ;
28296: GO 28347
// for i in tmp do
28298: LD_ADDR_VAR 0 4
28302: PUSH
28303: LD_VAR 0 5
28307: PUSH
28308: FOR_IN
28309: IFFALSE 28345
// if GetTech ( i , side ) <> state_researched then
28311: LD_VAR 0 4
28315: PPUSH
28316: LD_VAR 0 1
28320: PPUSH
28321: CALL_OW 321
28325: PUSH
28326: LD_INT 2
28328: NONEQUAL
28329: IFFALSE 28343
// begin result := false ;
28331: LD_ADDR_VAR 0 3
28335: PUSH
28336: LD_INT 0
28338: ST_TO_ADDR
// exit ;
28339: POP
28340: POP
28341: GO 28347
// end ;
28343: GO 28308
28345: POP
28346: POP
// end ;
28347: LD_VAR 0 3
28351: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28352: LD_INT 0
28354: PPUSH
28355: PPUSH
28356: PPUSH
28357: PPUSH
28358: PPUSH
28359: PPUSH
28360: PPUSH
28361: PPUSH
28362: PPUSH
28363: PPUSH
28364: PPUSH
28365: PPUSH
28366: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28367: LD_VAR 0 1
28371: NOT
28372: PUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 257
28382: PUSH
28383: LD_INT 9
28385: NONEQUAL
28386: OR
28387: IFFALSE 28391
// exit ;
28389: GO 28964
// side := GetSide ( unit ) ;
28391: LD_ADDR_VAR 0 9
28395: PUSH
28396: LD_VAR 0 1
28400: PPUSH
28401: CALL_OW 255
28405: ST_TO_ADDR
// tech_space := tech_spacanom ;
28406: LD_ADDR_VAR 0 12
28410: PUSH
28411: LD_INT 29
28413: ST_TO_ADDR
// tech_time := tech_taurad ;
28414: LD_ADDR_VAR 0 13
28418: PUSH
28419: LD_INT 28
28421: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28422: LD_ADDR_VAR 0 11
28426: PUSH
28427: LD_VAR 0 1
28431: PPUSH
28432: CALL_OW 310
28436: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28437: LD_VAR 0 11
28441: PPUSH
28442: CALL_OW 247
28446: PUSH
28447: LD_INT 2
28449: EQUAL
28450: IFFALSE 28454
// exit ;
28452: GO 28964
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28454: LD_ADDR_VAR 0 8
28458: PUSH
28459: LD_INT 81
28461: PUSH
28462: LD_VAR 0 9
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 3
28473: PUSH
28474: LD_INT 21
28476: PUSH
28477: LD_INT 3
28479: PUSH
28480: EMPTY
28481: LIST
28482: LIST
28483: PUSH
28484: EMPTY
28485: LIST
28486: LIST
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PPUSH
28492: CALL_OW 69
28496: ST_TO_ADDR
// if not tmp then
28497: LD_VAR 0 8
28501: NOT
28502: IFFALSE 28506
// exit ;
28504: GO 28964
// if in_unit then
28506: LD_VAR 0 11
28510: IFFALSE 28534
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28512: LD_ADDR_VAR 0 10
28516: PUSH
28517: LD_VAR 0 8
28521: PPUSH
28522: LD_VAR 0 11
28526: PPUSH
28527: CALL_OW 74
28531: ST_TO_ADDR
28532: GO 28554
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28534: LD_ADDR_VAR 0 10
28538: PUSH
28539: LD_VAR 0 8
28543: PPUSH
28544: LD_VAR 0 1
28548: PPUSH
28549: CALL_OW 74
28553: ST_TO_ADDR
// if not enemy then
28554: LD_VAR 0 10
28558: NOT
28559: IFFALSE 28563
// exit ;
28561: GO 28964
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28563: LD_VAR 0 11
28567: PUSH
28568: LD_VAR 0 11
28572: PPUSH
28573: LD_VAR 0 10
28577: PPUSH
28578: CALL_OW 296
28582: PUSH
28583: LD_INT 13
28585: GREATER
28586: AND
28587: PUSH
28588: LD_VAR 0 1
28592: PPUSH
28593: LD_VAR 0 10
28597: PPUSH
28598: CALL_OW 296
28602: PUSH
28603: LD_INT 12
28605: GREATER
28606: OR
28607: IFFALSE 28611
// exit ;
28609: GO 28964
// missile := [ 1 ] ;
28611: LD_ADDR_VAR 0 14
28615: PUSH
28616: LD_INT 1
28618: PUSH
28619: EMPTY
28620: LIST
28621: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28622: LD_VAR 0 9
28626: PPUSH
28627: LD_VAR 0 12
28631: PPUSH
28632: CALL_OW 325
28636: IFFALSE 28665
// missile := Replace ( missile , missile + 1 , 2 ) ;
28638: LD_ADDR_VAR 0 14
28642: PUSH
28643: LD_VAR 0 14
28647: PPUSH
28648: LD_VAR 0 14
28652: PUSH
28653: LD_INT 1
28655: PLUS
28656: PPUSH
28657: LD_INT 2
28659: PPUSH
28660: CALL_OW 1
28664: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28665: LD_VAR 0 9
28669: PPUSH
28670: LD_VAR 0 13
28674: PPUSH
28675: CALL_OW 325
28679: PUSH
28680: LD_VAR 0 10
28684: PPUSH
28685: CALL_OW 255
28689: PPUSH
28690: LD_VAR 0 13
28694: PPUSH
28695: CALL_OW 325
28699: NOT
28700: AND
28701: IFFALSE 28730
// missile := Replace ( missile , missile + 1 , 3 ) ;
28703: LD_ADDR_VAR 0 14
28707: PUSH
28708: LD_VAR 0 14
28712: PPUSH
28713: LD_VAR 0 14
28717: PUSH
28718: LD_INT 1
28720: PLUS
28721: PPUSH
28722: LD_INT 3
28724: PPUSH
28725: CALL_OW 1
28729: ST_TO_ADDR
// if missile < 2 then
28730: LD_VAR 0 14
28734: PUSH
28735: LD_INT 2
28737: LESS
28738: IFFALSE 28742
// exit ;
28740: GO 28964
// x := GetX ( enemy ) ;
28742: LD_ADDR_VAR 0 4
28746: PUSH
28747: LD_VAR 0 10
28751: PPUSH
28752: CALL_OW 250
28756: ST_TO_ADDR
// y := GetY ( enemy ) ;
28757: LD_ADDR_VAR 0 5
28761: PUSH
28762: LD_VAR 0 10
28766: PPUSH
28767: CALL_OW 251
28771: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28772: LD_ADDR_VAR 0 6
28776: PUSH
28777: LD_VAR 0 4
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PPUSH
28786: LD_INT 1
28788: PPUSH
28789: CALL_OW 12
28793: PLUS
28794: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28795: LD_ADDR_VAR 0 7
28799: PUSH
28800: LD_VAR 0 5
28804: PUSH
28805: LD_INT 1
28807: NEG
28808: PPUSH
28809: LD_INT 1
28811: PPUSH
28812: CALL_OW 12
28816: PLUS
28817: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28818: LD_VAR 0 6
28822: PPUSH
28823: LD_VAR 0 7
28827: PPUSH
28828: CALL_OW 488
28832: NOT
28833: IFFALSE 28855
// begin _x := x ;
28835: LD_ADDR_VAR 0 6
28839: PUSH
28840: LD_VAR 0 4
28844: ST_TO_ADDR
// _y := y ;
28845: LD_ADDR_VAR 0 7
28849: PUSH
28850: LD_VAR 0 5
28854: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28855: LD_ADDR_VAR 0 3
28859: PUSH
28860: LD_INT 1
28862: PPUSH
28863: LD_VAR 0 14
28867: PPUSH
28868: CALL_OW 12
28872: ST_TO_ADDR
// case i of 1 :
28873: LD_VAR 0 3
28877: PUSH
28878: LD_INT 1
28880: DOUBLE
28881: EQUAL
28882: IFTRUE 28886
28884: GO 28903
28886: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28887: LD_VAR 0 1
28891: PPUSH
28892: LD_VAR 0 10
28896: PPUSH
28897: CALL_OW 115
28901: GO 28964
28903: LD_INT 2
28905: DOUBLE
28906: EQUAL
28907: IFTRUE 28911
28909: GO 28933
28911: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28912: LD_VAR 0 1
28916: PPUSH
28917: LD_VAR 0 6
28921: PPUSH
28922: LD_VAR 0 7
28926: PPUSH
28927: CALL_OW 153
28931: GO 28964
28933: LD_INT 3
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28963
28941: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28942: LD_VAR 0 1
28946: PPUSH
28947: LD_VAR 0 6
28951: PPUSH
28952: LD_VAR 0 7
28956: PPUSH
28957: CALL_OW 154
28961: GO 28964
28963: POP
// end ;
28964: LD_VAR 0 2
28968: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28969: LD_INT 0
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
28976: PPUSH
// if not unit or not building then
28977: LD_VAR 0 1
28981: NOT
28982: PUSH
28983: LD_VAR 0 2
28987: NOT
28988: OR
28989: IFFALSE 28993
// exit ;
28991: GO 29151
// x := GetX ( building ) ;
28993: LD_ADDR_VAR 0 5
28997: PUSH
28998: LD_VAR 0 2
29002: PPUSH
29003: CALL_OW 250
29007: ST_TO_ADDR
// y := GetY ( building ) ;
29008: LD_ADDR_VAR 0 6
29012: PUSH
29013: LD_VAR 0 2
29017: PPUSH
29018: CALL_OW 251
29022: ST_TO_ADDR
// for i = 0 to 5 do
29023: LD_ADDR_VAR 0 4
29027: PUSH
29028: DOUBLE
29029: LD_INT 0
29031: DEC
29032: ST_TO_ADDR
29033: LD_INT 5
29035: PUSH
29036: FOR_TO
29037: IFFALSE 29149
// begin _x := ShiftX ( x , i , 3 ) ;
29039: LD_ADDR_VAR 0 7
29043: PUSH
29044: LD_VAR 0 5
29048: PPUSH
29049: LD_VAR 0 4
29053: PPUSH
29054: LD_INT 3
29056: PPUSH
29057: CALL_OW 272
29061: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29062: LD_ADDR_VAR 0 8
29066: PUSH
29067: LD_VAR 0 6
29071: PPUSH
29072: LD_VAR 0 4
29076: PPUSH
29077: LD_INT 3
29079: PPUSH
29080: CALL_OW 273
29084: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29085: LD_VAR 0 7
29089: PPUSH
29090: LD_VAR 0 8
29094: PPUSH
29095: CALL_OW 488
29099: NOT
29100: IFFALSE 29104
// continue ;
29102: GO 29036
// if HexInfo ( _x , _y ) = 0 then
29104: LD_VAR 0 7
29108: PPUSH
29109: LD_VAR 0 8
29113: PPUSH
29114: CALL_OW 428
29118: PUSH
29119: LD_INT 0
29121: EQUAL
29122: IFFALSE 29147
// begin ComMoveXY ( unit , _x , _y ) ;
29124: LD_VAR 0 1
29128: PPUSH
29129: LD_VAR 0 7
29133: PPUSH
29134: LD_VAR 0 8
29138: PPUSH
29139: CALL_OW 111
// exit ;
29143: POP
29144: POP
29145: GO 29151
// end ; end ;
29147: GO 29036
29149: POP
29150: POP
// end ;
29151: LD_VAR 0 3
29155: RET
// export function ScanBase ( side , base_area ) ; begin
29156: LD_INT 0
29158: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29159: LD_ADDR_VAR 0 3
29163: PUSH
29164: LD_VAR 0 2
29168: PPUSH
29169: LD_INT 81
29171: PUSH
29172: LD_VAR 0 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PPUSH
29181: CALL_OW 70
29185: ST_TO_ADDR
// end ;
29186: LD_VAR 0 3
29190: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29191: LD_INT 0
29193: PPUSH
29194: PPUSH
29195: PPUSH
29196: PPUSH
// result := false ;
29197: LD_ADDR_VAR 0 2
29201: PUSH
29202: LD_INT 0
29204: ST_TO_ADDR
// side := GetSide ( unit ) ;
29205: LD_ADDR_VAR 0 3
29209: PUSH
29210: LD_VAR 0 1
29214: PPUSH
29215: CALL_OW 255
29219: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29220: LD_ADDR_VAR 0 4
29224: PUSH
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 248
29234: ST_TO_ADDR
// case nat of 1 :
29235: LD_VAR 0 4
29239: PUSH
29240: LD_INT 1
29242: DOUBLE
29243: EQUAL
29244: IFTRUE 29248
29246: GO 29259
29248: POP
// tech := tech_lassight ; 2 :
29249: LD_ADDR_VAR 0 5
29253: PUSH
29254: LD_INT 12
29256: ST_TO_ADDR
29257: GO 29298
29259: LD_INT 2
29261: DOUBLE
29262: EQUAL
29263: IFTRUE 29267
29265: GO 29278
29267: POP
// tech := tech_mortar ; 3 :
29268: LD_ADDR_VAR 0 5
29272: PUSH
29273: LD_INT 41
29275: ST_TO_ADDR
29276: GO 29298
29278: LD_INT 3
29280: DOUBLE
29281: EQUAL
29282: IFTRUE 29286
29284: GO 29297
29286: POP
// tech := tech_bazooka ; end ;
29287: LD_ADDR_VAR 0 5
29291: PUSH
29292: LD_INT 44
29294: ST_TO_ADDR
29295: GO 29298
29297: POP
// if Researched ( side , tech ) then
29298: LD_VAR 0 3
29302: PPUSH
29303: LD_VAR 0 5
29307: PPUSH
29308: CALL_OW 325
29312: IFFALSE 29339
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29314: LD_ADDR_VAR 0 2
29318: PUSH
29319: LD_INT 5
29321: PUSH
29322: LD_INT 8
29324: PUSH
29325: LD_INT 9
29327: PUSH
29328: EMPTY
29329: LIST
29330: LIST
29331: LIST
29332: PUSH
29333: LD_VAR 0 4
29337: ARRAY
29338: ST_TO_ADDR
// end ;
29339: LD_VAR 0 2
29343: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29344: LD_INT 0
29346: PPUSH
29347: PPUSH
29348: PPUSH
// if not mines then
29349: LD_VAR 0 2
29353: NOT
29354: IFFALSE 29358
// exit ;
29356: GO 29502
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29358: LD_ADDR_VAR 0 5
29362: PUSH
29363: LD_INT 81
29365: PUSH
29366: LD_VAR 0 1
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 3
29377: PUSH
29378: LD_INT 21
29380: PUSH
29381: LD_INT 3
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PPUSH
29396: CALL_OW 69
29400: ST_TO_ADDR
// for i in mines do
29401: LD_ADDR_VAR 0 4
29405: PUSH
29406: LD_VAR 0 2
29410: PUSH
29411: FOR_IN
29412: IFFALSE 29500
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29414: LD_VAR 0 4
29418: PUSH
29419: LD_INT 1
29421: ARRAY
29422: PPUSH
29423: LD_VAR 0 4
29427: PUSH
29428: LD_INT 2
29430: ARRAY
29431: PPUSH
29432: CALL_OW 458
29436: NOT
29437: IFFALSE 29441
// continue ;
29439: GO 29411
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29441: LD_VAR 0 4
29445: PUSH
29446: LD_INT 1
29448: ARRAY
29449: PPUSH
29450: LD_VAR 0 4
29454: PUSH
29455: LD_INT 2
29457: ARRAY
29458: PPUSH
29459: CALL_OW 428
29463: PUSH
29464: LD_VAR 0 5
29468: IN
29469: IFFALSE 29498
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29471: LD_VAR 0 4
29475: PUSH
29476: LD_INT 1
29478: ARRAY
29479: PPUSH
29480: LD_VAR 0 4
29484: PUSH
29485: LD_INT 2
29487: ARRAY
29488: PPUSH
29489: LD_VAR 0 1
29493: PPUSH
29494: CALL_OW 456
// end ;
29498: GO 29411
29500: POP
29501: POP
// end ;
29502: LD_VAR 0 3
29506: RET
// export function Count ( array ) ; begin
29507: LD_INT 0
29509: PPUSH
// result := array + 0 ;
29510: LD_ADDR_VAR 0 2
29514: PUSH
29515: LD_VAR 0 1
29519: PUSH
29520: LD_INT 0
29522: PLUS
29523: ST_TO_ADDR
// end ;
29524: LD_VAR 0 2
29528: RET
// export function IsEmpty ( building ) ; begin
29529: LD_INT 0
29531: PPUSH
// if not building then
29532: LD_VAR 0 1
29536: NOT
29537: IFFALSE 29541
// exit ;
29539: GO 29584
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29541: LD_ADDR_VAR 0 2
29545: PUSH
29546: LD_VAR 0 1
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_VAR 0 1
29558: PPUSH
29559: CALL_OW 255
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 58
29570: PUSH
29571: EMPTY
29572: LIST
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PPUSH
29578: CALL_OW 69
29582: IN
29583: ST_TO_ADDR
// end ;
29584: LD_VAR 0 2
29588: RET
// export function IsNotFull ( building ) ; var places ; begin
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
// if not building then
29593: LD_VAR 0 1
29597: NOT
29598: IFFALSE 29602
// exit ;
29600: GO 29630
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
29602: LD_ADDR_VAR 0 2
29606: PUSH
29607: LD_VAR 0 1
29611: PPUSH
29612: LD_INT 3
29614: PUSH
29615: LD_INT 62
29617: PUSH
29618: EMPTY
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PPUSH
29625: CALL_OW 72
29629: ST_TO_ADDR
// end ;
29630: LD_VAR 0 2
29634: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29635: LD_INT 0
29637: PPUSH
29638: PPUSH
29639: PPUSH
29640: PPUSH
// tmp := [ ] ;
29641: LD_ADDR_VAR 0 3
29645: PUSH
29646: EMPTY
29647: ST_TO_ADDR
// list := [ ] ;
29648: LD_ADDR_VAR 0 5
29652: PUSH
29653: EMPTY
29654: ST_TO_ADDR
// for i = 16 to 25 do
29655: LD_ADDR_VAR 0 4
29659: PUSH
29660: DOUBLE
29661: LD_INT 16
29663: DEC
29664: ST_TO_ADDR
29665: LD_INT 25
29667: PUSH
29668: FOR_TO
29669: IFFALSE 29742
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29671: LD_ADDR_VAR 0 3
29675: PUSH
29676: LD_VAR 0 3
29680: PUSH
29681: LD_INT 22
29683: PUSH
29684: LD_VAR 0 1
29688: PPUSH
29689: CALL_OW 255
29693: PUSH
29694: EMPTY
29695: LIST
29696: LIST
29697: PUSH
29698: LD_INT 91
29700: PUSH
29701: LD_VAR 0 1
29705: PUSH
29706: LD_INT 6
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: LIST
29713: PUSH
29714: LD_INT 30
29716: PUSH
29717: LD_VAR 0 4
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: PPUSH
29734: CALL_OW 69
29738: ADD
29739: ST_TO_ADDR
29740: GO 29668
29742: POP
29743: POP
// for i = 1 to tmp do
29744: LD_ADDR_VAR 0 4
29748: PUSH
29749: DOUBLE
29750: LD_INT 1
29752: DEC
29753: ST_TO_ADDR
29754: LD_VAR 0 3
29758: PUSH
29759: FOR_TO
29760: IFFALSE 29848
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29762: LD_ADDR_VAR 0 5
29766: PUSH
29767: LD_VAR 0 5
29771: PUSH
29772: LD_VAR 0 3
29776: PUSH
29777: LD_VAR 0 4
29781: ARRAY
29782: PPUSH
29783: CALL_OW 266
29787: PUSH
29788: LD_VAR 0 3
29792: PUSH
29793: LD_VAR 0 4
29797: ARRAY
29798: PPUSH
29799: CALL_OW 250
29803: PUSH
29804: LD_VAR 0 3
29808: PUSH
29809: LD_VAR 0 4
29813: ARRAY
29814: PPUSH
29815: CALL_OW 251
29819: PUSH
29820: LD_VAR 0 3
29824: PUSH
29825: LD_VAR 0 4
29829: ARRAY
29830: PPUSH
29831: CALL_OW 254
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: PUSH
29842: EMPTY
29843: LIST
29844: ADD
29845: ST_TO_ADDR
29846: GO 29759
29848: POP
29849: POP
// result := list ;
29850: LD_ADDR_VAR 0 2
29854: PUSH
29855: LD_VAR 0 5
29859: ST_TO_ADDR
// end ;
29860: LD_VAR 0 2
29864: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29865: LD_INT 0
29867: PPUSH
29868: PPUSH
29869: PPUSH
29870: PPUSH
29871: PPUSH
29872: PPUSH
29873: PPUSH
// if not factory then
29874: LD_VAR 0 1
29878: NOT
29879: IFFALSE 29883
// exit ;
29881: GO 30476
// if control = control_apeman then
29883: LD_VAR 0 4
29887: PUSH
29888: LD_INT 5
29890: EQUAL
29891: IFFALSE 30000
// begin tmp := UnitsInside ( factory ) ;
29893: LD_ADDR_VAR 0 8
29897: PUSH
29898: LD_VAR 0 1
29902: PPUSH
29903: CALL_OW 313
29907: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29908: LD_VAR 0 8
29912: PPUSH
29913: LD_INT 25
29915: PUSH
29916: LD_INT 12
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 72
29927: NOT
29928: IFFALSE 29938
// control := control_manual ;
29930: LD_ADDR_VAR 0 4
29934: PUSH
29935: LD_INT 1
29937: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29938: LD_ADDR_VAR 0 8
29942: PUSH
29943: LD_VAR 0 1
29947: PPUSH
29948: CALL 29635 0 1
29952: ST_TO_ADDR
// if tmp then
29953: LD_VAR 0 8
29957: IFFALSE 30000
// begin for i in tmp do
29959: LD_ADDR_VAR 0 7
29963: PUSH
29964: LD_VAR 0 8
29968: PUSH
29969: FOR_IN
29970: IFFALSE 29998
// if i [ 1 ] = b_ext_radio then
29972: LD_VAR 0 7
29976: PUSH
29977: LD_INT 1
29979: ARRAY
29980: PUSH
29981: LD_INT 22
29983: EQUAL
29984: IFFALSE 29996
// begin control := control_remote ;
29986: LD_ADDR_VAR 0 4
29990: PUSH
29991: LD_INT 2
29993: ST_TO_ADDR
// break ;
29994: GO 29998
// end ;
29996: GO 29969
29998: POP
29999: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30000: LD_VAR 0 1
30004: PPUSH
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_VAR 0 3
30014: PPUSH
30015: LD_VAR 0 4
30019: PPUSH
30020: LD_VAR 0 5
30024: PPUSH
30025: CALL_OW 448
30029: IFFALSE 30064
// begin result := [ chassis , engine , control , weapon ] ;
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_VAR 0 2
30040: PUSH
30041: LD_VAR 0 3
30045: PUSH
30046: LD_VAR 0 4
30050: PUSH
30051: LD_VAR 0 5
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: LIST
30060: LIST
30061: ST_TO_ADDR
// exit ;
30062: GO 30476
// end ; _chassis := AvailableChassisList ( factory ) ;
30064: LD_ADDR_VAR 0 9
30068: PUSH
30069: LD_VAR 0 1
30073: PPUSH
30074: CALL_OW 475
30078: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30079: LD_ADDR_VAR 0 11
30083: PUSH
30084: LD_VAR 0 1
30088: PPUSH
30089: CALL_OW 476
30093: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30094: LD_ADDR_VAR 0 12
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 477
30108: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30109: LD_ADDR_VAR 0 10
30113: PUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 478
30123: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30124: LD_VAR 0 9
30128: NOT
30129: PUSH
30130: LD_VAR 0 11
30134: NOT
30135: OR
30136: PUSH
30137: LD_VAR 0 12
30141: NOT
30142: OR
30143: PUSH
30144: LD_VAR 0 10
30148: NOT
30149: OR
30150: IFFALSE 30185
// begin result := [ chassis , engine , control , weapon ] ;
30152: LD_ADDR_VAR 0 6
30156: PUSH
30157: LD_VAR 0 2
30161: PUSH
30162: LD_VAR 0 3
30166: PUSH
30167: LD_VAR 0 4
30171: PUSH
30172: LD_VAR 0 5
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
// exit ;
30183: GO 30476
// end ; if not chassis in _chassis then
30185: LD_VAR 0 2
30189: PUSH
30190: LD_VAR 0 9
30194: IN
30195: NOT
30196: IFFALSE 30222
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30198: LD_ADDR_VAR 0 2
30202: PUSH
30203: LD_VAR 0 9
30207: PUSH
30208: LD_INT 1
30210: PPUSH
30211: LD_VAR 0 9
30215: PPUSH
30216: CALL_OW 12
30220: ARRAY
30221: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30222: LD_VAR 0 2
30226: PPUSH
30227: LD_VAR 0 3
30231: PPUSH
30232: CALL 30481 0 2
30236: NOT
30237: IFFALSE 30296
// repeat engine := _engine [ 1 ] ;
30239: LD_ADDR_VAR 0 3
30243: PUSH
30244: LD_VAR 0 11
30248: PUSH
30249: LD_INT 1
30251: ARRAY
30252: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30253: LD_ADDR_VAR 0 11
30257: PUSH
30258: LD_VAR 0 11
30262: PPUSH
30263: LD_INT 1
30265: PPUSH
30266: CALL_OW 3
30270: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30271: LD_VAR 0 2
30275: PPUSH
30276: LD_VAR 0 3
30280: PPUSH
30281: CALL 30481 0 2
30285: PUSH
30286: LD_VAR 0 11
30290: PUSH
30291: EMPTY
30292: EQUAL
30293: OR
30294: IFFALSE 30239
// if not control in _control then
30296: LD_VAR 0 4
30300: PUSH
30301: LD_VAR 0 12
30305: IN
30306: NOT
30307: IFFALSE 30333
// control := _control [ rand ( 1 , _control ) ] ;
30309: LD_ADDR_VAR 0 4
30313: PUSH
30314: LD_VAR 0 12
30318: PUSH
30319: LD_INT 1
30321: PPUSH
30322: LD_VAR 0 12
30326: PPUSH
30327: CALL_OW 12
30331: ARRAY
30332: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30333: LD_VAR 0 2
30337: PPUSH
30338: LD_VAR 0 5
30342: PPUSH
30343: CALL 30701 0 2
30347: NOT
30348: IFFALSE 30407
// repeat weapon := _weapon [ 1 ] ;
30350: LD_ADDR_VAR 0 5
30354: PUSH
30355: LD_VAR 0 10
30359: PUSH
30360: LD_INT 1
30362: ARRAY
30363: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30364: LD_ADDR_VAR 0 10
30368: PUSH
30369: LD_VAR 0 10
30373: PPUSH
30374: LD_INT 1
30376: PPUSH
30377: CALL_OW 3
30381: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30382: LD_VAR 0 2
30386: PPUSH
30387: LD_VAR 0 5
30391: PPUSH
30392: CALL 30701 0 2
30396: PUSH
30397: LD_VAR 0 10
30401: PUSH
30402: EMPTY
30403: EQUAL
30404: OR
30405: IFFALSE 30350
// result := [ ] ;
30407: LD_ADDR_VAR 0 6
30411: PUSH
30412: EMPTY
30413: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30414: LD_VAR 0 1
30418: PPUSH
30419: LD_VAR 0 2
30423: PPUSH
30424: LD_VAR 0 3
30428: PPUSH
30429: LD_VAR 0 4
30433: PPUSH
30434: LD_VAR 0 5
30438: PPUSH
30439: CALL_OW 448
30443: IFFALSE 30476
// result := [ chassis , engine , control , weapon ] ;
30445: LD_ADDR_VAR 0 6
30449: PUSH
30450: LD_VAR 0 2
30454: PUSH
30455: LD_VAR 0 3
30459: PUSH
30460: LD_VAR 0 4
30464: PUSH
30465: LD_VAR 0 5
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: ST_TO_ADDR
// end ;
30476: LD_VAR 0 6
30480: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30481: LD_INT 0
30483: PPUSH
// if not chassis or not engine then
30484: LD_VAR 0 1
30488: NOT
30489: PUSH
30490: LD_VAR 0 2
30494: NOT
30495: OR
30496: IFFALSE 30500
// exit ;
30498: GO 30696
// case engine of engine_solar :
30500: LD_VAR 0 2
30504: PUSH
30505: LD_INT 2
30507: DOUBLE
30508: EQUAL
30509: IFTRUE 30513
30511: GO 30551
30513: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30514: LD_ADDR_VAR 0 3
30518: PUSH
30519: LD_INT 11
30521: PUSH
30522: LD_INT 12
30524: PUSH
30525: LD_INT 13
30527: PUSH
30528: LD_INT 14
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 3
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: ST_TO_ADDR
30549: GO 30680
30551: LD_INT 1
30553: DOUBLE
30554: EQUAL
30555: IFTRUE 30559
30557: GO 30621
30559: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30560: LD_ADDR_VAR 0 3
30564: PUSH
30565: LD_INT 11
30567: PUSH
30568: LD_INT 12
30570: PUSH
30571: LD_INT 13
30573: PUSH
30574: LD_INT 14
30576: PUSH
30577: LD_INT 1
30579: PUSH
30580: LD_INT 2
30582: PUSH
30583: LD_INT 3
30585: PUSH
30586: LD_INT 4
30588: PUSH
30589: LD_INT 5
30591: PUSH
30592: LD_INT 21
30594: PUSH
30595: LD_INT 23
30597: PUSH
30598: LD_INT 22
30600: PUSH
30601: LD_INT 24
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: LIST
30608: LIST
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: ST_TO_ADDR
30619: GO 30680
30621: LD_INT 3
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30679
30629: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 13
30637: PUSH
30638: LD_INT 14
30640: PUSH
30641: LD_INT 2
30643: PUSH
30644: LD_INT 3
30646: PUSH
30647: LD_INT 4
30649: PUSH
30650: LD_INT 5
30652: PUSH
30653: LD_INT 21
30655: PUSH
30656: LD_INT 22
30658: PUSH
30659: LD_INT 23
30661: PUSH
30662: LD_INT 24
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: ST_TO_ADDR
30677: GO 30680
30679: POP
// result := ( chassis in result ) ;
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_VAR 0 1
30689: PUSH
30690: LD_VAR 0 3
30694: IN
30695: ST_TO_ADDR
// end ;
30696: LD_VAR 0 3
30700: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30701: LD_INT 0
30703: PPUSH
// if not chassis or not weapon then
30704: LD_VAR 0 1
30708: NOT
30709: PUSH
30710: LD_VAR 0 2
30714: NOT
30715: OR
30716: IFFALSE 30720
// exit ;
30718: GO 31780
// case weapon of us_machine_gun :
30720: LD_VAR 0 2
30724: PUSH
30725: LD_INT 2
30727: DOUBLE
30728: EQUAL
30729: IFTRUE 30733
30731: GO 30763
30733: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30734: LD_ADDR_VAR 0 3
30738: PUSH
30739: LD_INT 1
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: LD_INT 4
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: LIST
30760: ST_TO_ADDR
30761: GO 31764
30763: LD_INT 3
30765: DOUBLE
30766: EQUAL
30767: IFTRUE 30771
30769: GO 30801
30771: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30772: LD_ADDR_VAR 0 3
30776: PUSH
30777: LD_INT 1
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: LD_INT 3
30785: PUSH
30786: LD_INT 4
30788: PUSH
30789: LD_INT 5
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: LIST
30797: LIST
30798: ST_TO_ADDR
30799: GO 31764
30801: LD_INT 11
30803: DOUBLE
30804: EQUAL
30805: IFTRUE 30809
30807: GO 30839
30809: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30810: LD_ADDR_VAR 0 3
30814: PUSH
30815: LD_INT 1
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: LD_INT 3
30823: PUSH
30824: LD_INT 4
30826: PUSH
30827: LD_INT 5
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
30837: GO 31764
30839: LD_INT 4
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30873
30847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30848: LD_ADDR_VAR 0 3
30852: PUSH
30853: LD_INT 2
30855: PUSH
30856: LD_INT 3
30858: PUSH
30859: LD_INT 4
30861: PUSH
30862: LD_INT 5
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
30871: GO 31764
30873: LD_INT 5
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30907
30881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_INT 2
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 4
30895: PUSH
30896: LD_INT 5
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31764
30907: LD_INT 9
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30941
30915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 2
30923: PUSH
30924: LD_INT 3
30926: PUSH
30927: LD_INT 4
30929: PUSH
30930: LD_INT 5
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
30939: GO 31764
30941: LD_INT 7
30943: DOUBLE
30944: EQUAL
30945: IFTRUE 30949
30947: GO 30975
30949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30950: LD_ADDR_VAR 0 3
30954: PUSH
30955: LD_INT 2
30957: PUSH
30958: LD_INT 3
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
30973: GO 31764
30975: LD_INT 12
30977: DOUBLE
30978: EQUAL
30979: IFTRUE 30983
30981: GO 31009
30983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30984: LD_ADDR_VAR 0 3
30988: PUSH
30989: LD_INT 2
30991: PUSH
30992: LD_INT 3
30994: PUSH
30995: LD_INT 4
30997: PUSH
30998: LD_INT 5
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
31007: GO 31764
31009: LD_INT 13
31011: DOUBLE
31012: EQUAL
31013: IFTRUE 31017
31015: GO 31043
31017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31018: LD_ADDR_VAR 0 3
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 3
31028: PUSH
31029: LD_INT 4
31031: PUSH
31032: LD_INT 5
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: ST_TO_ADDR
31041: GO 31764
31043: LD_INT 14
31045: DOUBLE
31046: EQUAL
31047: IFTRUE 31051
31049: GO 31069
31051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31052: LD_ADDR_VAR 0 3
31056: PUSH
31057: LD_INT 4
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: ST_TO_ADDR
31067: GO 31764
31069: LD_INT 6
31071: DOUBLE
31072: EQUAL
31073: IFTRUE 31077
31075: GO 31095
31077: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: LD_INT 4
31085: PUSH
31086: LD_INT 5
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: ST_TO_ADDR
31093: GO 31764
31095: LD_INT 10
31097: DOUBLE
31098: EQUAL
31099: IFTRUE 31103
31101: GO 31121
31103: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 4
31111: PUSH
31112: LD_INT 5
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: ST_TO_ADDR
31119: GO 31764
31121: LD_INT 22
31123: DOUBLE
31124: EQUAL
31125: IFTRUE 31129
31127: GO 31155
31129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31130: LD_ADDR_VAR 0 3
31134: PUSH
31135: LD_INT 11
31137: PUSH
31138: LD_INT 12
31140: PUSH
31141: LD_INT 13
31143: PUSH
31144: LD_INT 14
31146: PUSH
31147: EMPTY
31148: LIST
31149: LIST
31150: LIST
31151: LIST
31152: ST_TO_ADDR
31153: GO 31764
31155: LD_INT 23
31157: DOUBLE
31158: EQUAL
31159: IFTRUE 31163
31161: GO 31189
31163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31164: LD_ADDR_VAR 0 3
31168: PUSH
31169: LD_INT 11
31171: PUSH
31172: LD_INT 12
31174: PUSH
31175: LD_INT 13
31177: PUSH
31178: LD_INT 14
31180: PUSH
31181: EMPTY
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: ST_TO_ADDR
31187: GO 31764
31189: LD_INT 24
31191: DOUBLE
31192: EQUAL
31193: IFTRUE 31197
31195: GO 31223
31197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: LD_INT 11
31205: PUSH
31206: LD_INT 12
31208: PUSH
31209: LD_INT 13
31211: PUSH
31212: LD_INT 14
31214: PUSH
31215: EMPTY
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: ST_TO_ADDR
31221: GO 31764
31223: LD_INT 30
31225: DOUBLE
31226: EQUAL
31227: IFTRUE 31231
31229: GO 31257
31231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31232: LD_ADDR_VAR 0 3
31236: PUSH
31237: LD_INT 11
31239: PUSH
31240: LD_INT 12
31242: PUSH
31243: LD_INT 13
31245: PUSH
31246: LD_INT 14
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: ST_TO_ADDR
31255: GO 31764
31257: LD_INT 25
31259: DOUBLE
31260: EQUAL
31261: IFTRUE 31265
31263: GO 31283
31265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31266: LD_ADDR_VAR 0 3
31270: PUSH
31271: LD_INT 13
31273: PUSH
31274: LD_INT 14
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: ST_TO_ADDR
31281: GO 31764
31283: LD_INT 27
31285: DOUBLE
31286: EQUAL
31287: IFTRUE 31291
31289: GO 31309
31291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31292: LD_ADDR_VAR 0 3
31296: PUSH
31297: LD_INT 13
31299: PUSH
31300: LD_INT 14
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: ST_TO_ADDR
31307: GO 31764
31309: LD_INT 92
31311: DOUBLE
31312: EQUAL
31313: IFTRUE 31317
31315: GO 31343
31317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31318: LD_ADDR_VAR 0 3
31322: PUSH
31323: LD_INT 11
31325: PUSH
31326: LD_INT 12
31328: PUSH
31329: LD_INT 13
31331: PUSH
31332: LD_INT 14
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: ST_TO_ADDR
31341: GO 31764
31343: LD_INT 28
31345: DOUBLE
31346: EQUAL
31347: IFTRUE 31351
31349: GO 31369
31351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31352: LD_ADDR_VAR 0 3
31356: PUSH
31357: LD_INT 13
31359: PUSH
31360: LD_INT 14
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: ST_TO_ADDR
31367: GO 31764
31369: LD_INT 29
31371: DOUBLE
31372: EQUAL
31373: IFTRUE 31377
31375: GO 31395
31377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31378: LD_ADDR_VAR 0 3
31382: PUSH
31383: LD_INT 13
31385: PUSH
31386: LD_INT 14
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: ST_TO_ADDR
31393: GO 31764
31395: LD_INT 31
31397: DOUBLE
31398: EQUAL
31399: IFTRUE 31403
31401: GO 31421
31403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31404: LD_ADDR_VAR 0 3
31408: PUSH
31409: LD_INT 13
31411: PUSH
31412: LD_INT 14
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: ST_TO_ADDR
31419: GO 31764
31421: LD_INT 26
31423: DOUBLE
31424: EQUAL
31425: IFTRUE 31429
31427: GO 31447
31429: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31430: LD_ADDR_VAR 0 3
31434: PUSH
31435: LD_INT 13
31437: PUSH
31438: LD_INT 14
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: ST_TO_ADDR
31445: GO 31764
31447: LD_INT 42
31449: DOUBLE
31450: EQUAL
31451: IFTRUE 31455
31453: GO 31481
31455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31456: LD_ADDR_VAR 0 3
31460: PUSH
31461: LD_INT 21
31463: PUSH
31464: LD_INT 22
31466: PUSH
31467: LD_INT 23
31469: PUSH
31470: LD_INT 24
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: ST_TO_ADDR
31479: GO 31764
31481: LD_INT 43
31483: DOUBLE
31484: EQUAL
31485: IFTRUE 31489
31487: GO 31515
31489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31490: LD_ADDR_VAR 0 3
31494: PUSH
31495: LD_INT 21
31497: PUSH
31498: LD_INT 22
31500: PUSH
31501: LD_INT 23
31503: PUSH
31504: LD_INT 24
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: ST_TO_ADDR
31513: GO 31764
31515: LD_INT 44
31517: DOUBLE
31518: EQUAL
31519: IFTRUE 31523
31521: GO 31549
31523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31524: LD_ADDR_VAR 0 3
31528: PUSH
31529: LD_INT 21
31531: PUSH
31532: LD_INT 22
31534: PUSH
31535: LD_INT 23
31537: PUSH
31538: LD_INT 24
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: ST_TO_ADDR
31547: GO 31764
31549: LD_INT 45
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31583
31557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31558: LD_ADDR_VAR 0 3
31562: PUSH
31563: LD_INT 21
31565: PUSH
31566: LD_INT 22
31568: PUSH
31569: LD_INT 23
31571: PUSH
31572: LD_INT 24
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
31581: GO 31764
31583: LD_INT 49
31585: DOUBLE
31586: EQUAL
31587: IFTRUE 31591
31589: GO 31617
31591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31592: LD_ADDR_VAR 0 3
31596: PUSH
31597: LD_INT 21
31599: PUSH
31600: LD_INT 22
31602: PUSH
31603: LD_INT 23
31605: PUSH
31606: LD_INT 24
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: ST_TO_ADDR
31615: GO 31764
31617: LD_INT 51
31619: DOUBLE
31620: EQUAL
31621: IFTRUE 31625
31623: GO 31651
31625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31626: LD_ADDR_VAR 0 3
31630: PUSH
31631: LD_INT 21
31633: PUSH
31634: LD_INT 22
31636: PUSH
31637: LD_INT 23
31639: PUSH
31640: LD_INT 24
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: ST_TO_ADDR
31649: GO 31764
31651: LD_INT 52
31653: DOUBLE
31654: EQUAL
31655: IFTRUE 31659
31657: GO 31685
31659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31660: LD_ADDR_VAR 0 3
31664: PUSH
31665: LD_INT 21
31667: PUSH
31668: LD_INT 22
31670: PUSH
31671: LD_INT 23
31673: PUSH
31674: LD_INT 24
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
31683: GO 31764
31685: LD_INT 53
31687: DOUBLE
31688: EQUAL
31689: IFTRUE 31693
31691: GO 31711
31693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31694: LD_ADDR_VAR 0 3
31698: PUSH
31699: LD_INT 23
31701: PUSH
31702: LD_INT 24
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: ST_TO_ADDR
31709: GO 31764
31711: LD_INT 46
31713: DOUBLE
31714: EQUAL
31715: IFTRUE 31719
31717: GO 31737
31719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31720: LD_ADDR_VAR 0 3
31724: PUSH
31725: LD_INT 23
31727: PUSH
31728: LD_INT 24
31730: PUSH
31731: EMPTY
31732: LIST
31733: LIST
31734: ST_TO_ADDR
31735: GO 31764
31737: LD_INT 47
31739: DOUBLE
31740: EQUAL
31741: IFTRUE 31745
31743: GO 31763
31745: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31746: LD_ADDR_VAR 0 3
31750: PUSH
31751: LD_INT 23
31753: PUSH
31754: LD_INT 24
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: ST_TO_ADDR
31761: GO 31764
31763: POP
// result := ( chassis in result ) ;
31764: LD_ADDR_VAR 0 3
31768: PUSH
31769: LD_VAR 0 1
31773: PUSH
31774: LD_VAR 0 3
31778: IN
31779: ST_TO_ADDR
// end ;
31780: LD_VAR 0 3
31784: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31785: LD_INT 0
31787: PPUSH
31788: PPUSH
31789: PPUSH
31790: PPUSH
31791: PPUSH
31792: PPUSH
31793: PPUSH
// result := array ;
31794: LD_ADDR_VAR 0 5
31798: PUSH
31799: LD_VAR 0 1
31803: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31804: LD_VAR 0 1
31808: NOT
31809: PUSH
31810: LD_VAR 0 2
31814: NOT
31815: OR
31816: PUSH
31817: LD_VAR 0 3
31821: NOT
31822: OR
31823: PUSH
31824: LD_VAR 0 2
31828: PUSH
31829: LD_VAR 0 1
31833: GREATER
31834: OR
31835: PUSH
31836: LD_VAR 0 3
31840: PUSH
31841: LD_VAR 0 1
31845: GREATER
31846: OR
31847: IFFALSE 31851
// exit ;
31849: GO 32147
// if direction then
31851: LD_VAR 0 4
31855: IFFALSE 31919
// begin d := 1 ;
31857: LD_ADDR_VAR 0 9
31861: PUSH
31862: LD_INT 1
31864: ST_TO_ADDR
// if i_from > i_to then
31865: LD_VAR 0 2
31869: PUSH
31870: LD_VAR 0 3
31874: GREATER
31875: IFFALSE 31901
// length := ( array - i_from ) + i_to else
31877: LD_ADDR_VAR 0 11
31881: PUSH
31882: LD_VAR 0 1
31886: PUSH
31887: LD_VAR 0 2
31891: MINUS
31892: PUSH
31893: LD_VAR 0 3
31897: PLUS
31898: ST_TO_ADDR
31899: GO 31917
// length := i_to - i_from ;
31901: LD_ADDR_VAR 0 11
31905: PUSH
31906: LD_VAR 0 3
31910: PUSH
31911: LD_VAR 0 2
31915: MINUS
31916: ST_TO_ADDR
// end else
31917: GO 31980
// begin d := - 1 ;
31919: LD_ADDR_VAR 0 9
31923: PUSH
31924: LD_INT 1
31926: NEG
31927: ST_TO_ADDR
// if i_from > i_to then
31928: LD_VAR 0 2
31932: PUSH
31933: LD_VAR 0 3
31937: GREATER
31938: IFFALSE 31958
// length := i_from - i_to else
31940: LD_ADDR_VAR 0 11
31944: PUSH
31945: LD_VAR 0 2
31949: PUSH
31950: LD_VAR 0 3
31954: MINUS
31955: ST_TO_ADDR
31956: GO 31980
// length := ( array - i_to ) + i_from ;
31958: LD_ADDR_VAR 0 11
31962: PUSH
31963: LD_VAR 0 1
31967: PUSH
31968: LD_VAR 0 3
31972: MINUS
31973: PUSH
31974: LD_VAR 0 2
31978: PLUS
31979: ST_TO_ADDR
// end ; if not length then
31980: LD_VAR 0 11
31984: NOT
31985: IFFALSE 31989
// exit ;
31987: GO 32147
// tmp := array ;
31989: LD_ADDR_VAR 0 10
31993: PUSH
31994: LD_VAR 0 1
31998: ST_TO_ADDR
// for i = 1 to length do
31999: LD_ADDR_VAR 0 6
32003: PUSH
32004: DOUBLE
32005: LD_INT 1
32007: DEC
32008: ST_TO_ADDR
32009: LD_VAR 0 11
32013: PUSH
32014: FOR_TO
32015: IFFALSE 32135
// begin for j = 1 to array do
32017: LD_ADDR_VAR 0 7
32021: PUSH
32022: DOUBLE
32023: LD_INT 1
32025: DEC
32026: ST_TO_ADDR
32027: LD_VAR 0 1
32031: PUSH
32032: FOR_TO
32033: IFFALSE 32121
// begin k := j + d ;
32035: LD_ADDR_VAR 0 8
32039: PUSH
32040: LD_VAR 0 7
32044: PUSH
32045: LD_VAR 0 9
32049: PLUS
32050: ST_TO_ADDR
// if k > array then
32051: LD_VAR 0 8
32055: PUSH
32056: LD_VAR 0 1
32060: GREATER
32061: IFFALSE 32071
// k := 1 ;
32063: LD_ADDR_VAR 0 8
32067: PUSH
32068: LD_INT 1
32070: ST_TO_ADDR
// if not k then
32071: LD_VAR 0 8
32075: NOT
32076: IFFALSE 32088
// k := array ;
32078: LD_ADDR_VAR 0 8
32082: PUSH
32083: LD_VAR 0 1
32087: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32088: LD_ADDR_VAR 0 10
32092: PUSH
32093: LD_VAR 0 10
32097: PPUSH
32098: LD_VAR 0 8
32102: PPUSH
32103: LD_VAR 0 1
32107: PUSH
32108: LD_VAR 0 7
32112: ARRAY
32113: PPUSH
32114: CALL_OW 1
32118: ST_TO_ADDR
// end ;
32119: GO 32032
32121: POP
32122: POP
// array := tmp ;
32123: LD_ADDR_VAR 0 1
32127: PUSH
32128: LD_VAR 0 10
32132: ST_TO_ADDR
// end ;
32133: GO 32014
32135: POP
32136: POP
// result := array ;
32137: LD_ADDR_VAR 0 5
32141: PUSH
32142: LD_VAR 0 1
32146: ST_TO_ADDR
// end ;
32147: LD_VAR 0 5
32151: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32152: LD_INT 0
32154: PPUSH
32155: PPUSH
// result := 0 ;
32156: LD_ADDR_VAR 0 3
32160: PUSH
32161: LD_INT 0
32163: ST_TO_ADDR
// if not array or not value in array then
32164: LD_VAR 0 1
32168: NOT
32169: PUSH
32170: LD_VAR 0 2
32174: PUSH
32175: LD_VAR 0 1
32179: IN
32180: NOT
32181: OR
32182: IFFALSE 32186
// exit ;
32184: GO 32240
// for i = 1 to array do
32186: LD_ADDR_VAR 0 4
32190: PUSH
32191: DOUBLE
32192: LD_INT 1
32194: DEC
32195: ST_TO_ADDR
32196: LD_VAR 0 1
32200: PUSH
32201: FOR_TO
32202: IFFALSE 32238
// if value = array [ i ] then
32204: LD_VAR 0 2
32208: PUSH
32209: LD_VAR 0 1
32213: PUSH
32214: LD_VAR 0 4
32218: ARRAY
32219: EQUAL
32220: IFFALSE 32236
// begin result := i ;
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_VAR 0 4
32231: ST_TO_ADDR
// exit ;
32232: POP
32233: POP
32234: GO 32240
// end ;
32236: GO 32201
32238: POP
32239: POP
// end ;
32240: LD_VAR 0 3
32244: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32245: LD_INT 0
32247: PPUSH
// vc_chassis := chassis ;
32248: LD_ADDR_OWVAR 37
32252: PUSH
32253: LD_VAR 0 1
32257: ST_TO_ADDR
// vc_engine := engine ;
32258: LD_ADDR_OWVAR 39
32262: PUSH
32263: LD_VAR 0 2
32267: ST_TO_ADDR
// vc_control := control ;
32268: LD_ADDR_OWVAR 38
32272: PUSH
32273: LD_VAR 0 3
32277: ST_TO_ADDR
// vc_weapon := weapon ;
32278: LD_ADDR_OWVAR 40
32282: PUSH
32283: LD_VAR 0 4
32287: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32288: LD_ADDR_OWVAR 41
32292: PUSH
32293: LD_VAR 0 5
32297: ST_TO_ADDR
// end ;
32298: LD_VAR 0 6
32302: RET
// export function WantPlant ( unit ) ; var task ; begin
32303: LD_INT 0
32305: PPUSH
32306: PPUSH
// result := false ;
32307: LD_ADDR_VAR 0 2
32311: PUSH
32312: LD_INT 0
32314: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32315: LD_ADDR_VAR 0 3
32319: PUSH
32320: LD_VAR 0 1
32324: PPUSH
32325: CALL_OW 437
32329: ST_TO_ADDR
// if task then
32330: LD_VAR 0 3
32334: IFFALSE 32362
// if task [ 1 ] [ 1 ] = p then
32336: LD_VAR 0 3
32340: PUSH
32341: LD_INT 1
32343: ARRAY
32344: PUSH
32345: LD_INT 1
32347: ARRAY
32348: PUSH
32349: LD_STRING p
32351: EQUAL
32352: IFFALSE 32362
// result := true ;
32354: LD_ADDR_VAR 0 2
32358: PUSH
32359: LD_INT 1
32361: ST_TO_ADDR
// end ;
32362: LD_VAR 0 2
32366: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32367: LD_INT 0
32369: PPUSH
32370: PPUSH
32371: PPUSH
32372: PPUSH
// if pos < 1 then
32373: LD_VAR 0 2
32377: PUSH
32378: LD_INT 1
32380: LESS
32381: IFFALSE 32385
// exit ;
32383: GO 32688
// if pos = 1 then
32385: LD_VAR 0 2
32389: PUSH
32390: LD_INT 1
32392: EQUAL
32393: IFFALSE 32426
// result := Replace ( arr , pos [ 1 ] , value ) else
32395: LD_ADDR_VAR 0 4
32399: PUSH
32400: LD_VAR 0 1
32404: PPUSH
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 1
32412: ARRAY
32413: PPUSH
32414: LD_VAR 0 3
32418: PPUSH
32419: CALL_OW 1
32423: ST_TO_ADDR
32424: GO 32688
// begin tmp := arr ;
32426: LD_ADDR_VAR 0 6
32430: PUSH
32431: LD_VAR 0 1
32435: ST_TO_ADDR
// s_arr := [ tmp ] ;
32436: LD_ADDR_VAR 0 7
32440: PUSH
32441: LD_VAR 0 6
32445: PUSH
32446: EMPTY
32447: LIST
32448: ST_TO_ADDR
// for i = 1 to pos - 1 do
32449: LD_ADDR_VAR 0 5
32453: PUSH
32454: DOUBLE
32455: LD_INT 1
32457: DEC
32458: ST_TO_ADDR
32459: LD_VAR 0 2
32463: PUSH
32464: LD_INT 1
32466: MINUS
32467: PUSH
32468: FOR_TO
32469: IFFALSE 32514
// begin tmp := tmp [ pos [ i ] ] ;
32471: LD_ADDR_VAR 0 6
32475: PUSH
32476: LD_VAR 0 6
32480: PUSH
32481: LD_VAR 0 2
32485: PUSH
32486: LD_VAR 0 5
32490: ARRAY
32491: ARRAY
32492: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32493: LD_ADDR_VAR 0 7
32497: PUSH
32498: LD_VAR 0 7
32502: PUSH
32503: LD_VAR 0 6
32507: PUSH
32508: EMPTY
32509: LIST
32510: ADD
32511: ST_TO_ADDR
// end ;
32512: GO 32468
32514: POP
32515: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32516: LD_ADDR_VAR 0 6
32520: PUSH
32521: LD_VAR 0 6
32525: PPUSH
32526: LD_VAR 0 2
32530: PUSH
32531: LD_VAR 0 2
32535: ARRAY
32536: PPUSH
32537: LD_VAR 0 3
32541: PPUSH
32542: CALL_OW 1
32546: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32547: LD_ADDR_VAR 0 7
32551: PUSH
32552: LD_VAR 0 7
32556: PPUSH
32557: LD_VAR 0 7
32561: PPUSH
32562: LD_VAR 0 6
32566: PPUSH
32567: CALL_OW 1
32571: ST_TO_ADDR
// for i = s_arr downto 2 do
32572: LD_ADDR_VAR 0 5
32576: PUSH
32577: DOUBLE
32578: LD_VAR 0 7
32582: INC
32583: ST_TO_ADDR
32584: LD_INT 2
32586: PUSH
32587: FOR_DOWNTO
32588: IFFALSE 32672
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32590: LD_ADDR_VAR 0 6
32594: PUSH
32595: LD_VAR 0 7
32599: PUSH
32600: LD_VAR 0 5
32604: PUSH
32605: LD_INT 1
32607: MINUS
32608: ARRAY
32609: PPUSH
32610: LD_VAR 0 2
32614: PUSH
32615: LD_VAR 0 5
32619: PUSH
32620: LD_INT 1
32622: MINUS
32623: ARRAY
32624: PPUSH
32625: LD_VAR 0 7
32629: PUSH
32630: LD_VAR 0 5
32634: ARRAY
32635: PPUSH
32636: CALL_OW 1
32640: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32641: LD_ADDR_VAR 0 7
32645: PUSH
32646: LD_VAR 0 7
32650: PPUSH
32651: LD_VAR 0 5
32655: PUSH
32656: LD_INT 1
32658: MINUS
32659: PPUSH
32660: LD_VAR 0 6
32664: PPUSH
32665: CALL_OW 1
32669: ST_TO_ADDR
// end ;
32670: GO 32587
32672: POP
32673: POP
// result := s_arr [ 1 ] ;
32674: LD_ADDR_VAR 0 4
32678: PUSH
32679: LD_VAR 0 7
32683: PUSH
32684: LD_INT 1
32686: ARRAY
32687: ST_TO_ADDR
// end ; end ;
32688: LD_VAR 0 4
32692: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32693: LD_INT 0
32695: PPUSH
32696: PPUSH
// if not list then
32697: LD_VAR 0 1
32701: NOT
32702: IFFALSE 32706
// exit ;
32704: GO 32797
// i := list [ pos1 ] ;
32706: LD_ADDR_VAR 0 5
32710: PUSH
32711: LD_VAR 0 1
32715: PUSH
32716: LD_VAR 0 2
32720: ARRAY
32721: ST_TO_ADDR
// if not i then
32722: LD_VAR 0 5
32726: NOT
32727: IFFALSE 32731
// exit ;
32729: GO 32797
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32731: LD_ADDR_VAR 0 1
32735: PUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: LD_VAR 0 2
32745: PPUSH
32746: LD_VAR 0 1
32750: PUSH
32751: LD_VAR 0 3
32755: ARRAY
32756: PPUSH
32757: CALL_OW 1
32761: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32762: LD_ADDR_VAR 0 1
32766: PUSH
32767: LD_VAR 0 1
32771: PPUSH
32772: LD_VAR 0 3
32776: PPUSH
32777: LD_VAR 0 5
32781: PPUSH
32782: CALL_OW 1
32786: ST_TO_ADDR
// result := list ;
32787: LD_ADDR_VAR 0 4
32791: PUSH
32792: LD_VAR 0 1
32796: ST_TO_ADDR
// end ;
32797: LD_VAR 0 4
32801: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32802: LD_INT 0
32804: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32805: LD_ADDR_VAR 0 5
32809: PUSH
32810: LD_VAR 0 1
32814: PPUSH
32815: CALL_OW 250
32819: PPUSH
32820: LD_VAR 0 1
32824: PPUSH
32825: CALL_OW 251
32829: PPUSH
32830: LD_VAR 0 2
32834: PPUSH
32835: LD_VAR 0 3
32839: PPUSH
32840: LD_VAR 0 4
32844: PPUSH
32845: CALL 32855 0 5
32849: ST_TO_ADDR
// end ;
32850: LD_VAR 0 5
32854: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32855: LD_INT 0
32857: PPUSH
32858: PPUSH
32859: PPUSH
32860: PPUSH
// if not list then
32861: LD_VAR 0 3
32865: NOT
32866: IFFALSE 32870
// exit ;
32868: GO 33258
// result := [ ] ;
32870: LD_ADDR_VAR 0 6
32874: PUSH
32875: EMPTY
32876: ST_TO_ADDR
// for i in list do
32877: LD_ADDR_VAR 0 7
32881: PUSH
32882: LD_VAR 0 3
32886: PUSH
32887: FOR_IN
32888: IFFALSE 33090
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32890: LD_ADDR_VAR 0 9
32894: PUSH
32895: LD_VAR 0 7
32899: PPUSH
32900: LD_VAR 0 1
32904: PPUSH
32905: LD_VAR 0 2
32909: PPUSH
32910: CALL_OW 297
32914: ST_TO_ADDR
// if not result then
32915: LD_VAR 0 6
32919: NOT
32920: IFFALSE 32946
// result := [ [ i , tmp ] ] else
32922: LD_ADDR_VAR 0 6
32926: PUSH
32927: LD_VAR 0 7
32931: PUSH
32932: LD_VAR 0 9
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: ST_TO_ADDR
32944: GO 33088
// begin if result [ result ] [ 2 ] < tmp then
32946: LD_VAR 0 6
32950: PUSH
32951: LD_VAR 0 6
32955: ARRAY
32956: PUSH
32957: LD_INT 2
32959: ARRAY
32960: PUSH
32961: LD_VAR 0 9
32965: LESS
32966: IFFALSE 33008
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32968: LD_ADDR_VAR 0 6
32972: PUSH
32973: LD_VAR 0 6
32977: PPUSH
32978: LD_VAR 0 6
32982: PUSH
32983: LD_INT 1
32985: PLUS
32986: PPUSH
32987: LD_VAR 0 7
32991: PUSH
32992: LD_VAR 0 9
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PPUSH
33001: CALL_OW 2
33005: ST_TO_ADDR
33006: GO 33088
// for j = 1 to result do
33008: LD_ADDR_VAR 0 8
33012: PUSH
33013: DOUBLE
33014: LD_INT 1
33016: DEC
33017: ST_TO_ADDR
33018: LD_VAR 0 6
33022: PUSH
33023: FOR_TO
33024: IFFALSE 33086
// begin if tmp < result [ j ] [ 2 ] then
33026: LD_VAR 0 9
33030: PUSH
33031: LD_VAR 0 6
33035: PUSH
33036: LD_VAR 0 8
33040: ARRAY
33041: PUSH
33042: LD_INT 2
33044: ARRAY
33045: LESS
33046: IFFALSE 33084
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33048: LD_ADDR_VAR 0 6
33052: PUSH
33053: LD_VAR 0 6
33057: PPUSH
33058: LD_VAR 0 8
33062: PPUSH
33063: LD_VAR 0 7
33067: PUSH
33068: LD_VAR 0 9
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PPUSH
33077: CALL_OW 2
33081: ST_TO_ADDR
// break ;
33082: GO 33086
// end ; end ;
33084: GO 33023
33086: POP
33087: POP
// end ; end ;
33088: GO 32887
33090: POP
33091: POP
// if result and not asc then
33092: LD_VAR 0 6
33096: PUSH
33097: LD_VAR 0 4
33101: NOT
33102: AND
33103: IFFALSE 33178
// begin tmp := result ;
33105: LD_ADDR_VAR 0 9
33109: PUSH
33110: LD_VAR 0 6
33114: ST_TO_ADDR
// for i = tmp downto 1 do
33115: LD_ADDR_VAR 0 7
33119: PUSH
33120: DOUBLE
33121: LD_VAR 0 9
33125: INC
33126: ST_TO_ADDR
33127: LD_INT 1
33129: PUSH
33130: FOR_DOWNTO
33131: IFFALSE 33176
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33133: LD_ADDR_VAR 0 6
33137: PUSH
33138: LD_VAR 0 6
33142: PPUSH
33143: LD_VAR 0 9
33147: PUSH
33148: LD_VAR 0 7
33152: MINUS
33153: PUSH
33154: LD_INT 1
33156: PLUS
33157: PPUSH
33158: LD_VAR 0 9
33162: PUSH
33163: LD_VAR 0 7
33167: ARRAY
33168: PPUSH
33169: CALL_OW 1
33173: ST_TO_ADDR
33174: GO 33130
33176: POP
33177: POP
// end ; tmp := [ ] ;
33178: LD_ADDR_VAR 0 9
33182: PUSH
33183: EMPTY
33184: ST_TO_ADDR
// if mode then
33185: LD_VAR 0 5
33189: IFFALSE 33258
// begin for i = 1 to result do
33191: LD_ADDR_VAR 0 7
33195: PUSH
33196: DOUBLE
33197: LD_INT 1
33199: DEC
33200: ST_TO_ADDR
33201: LD_VAR 0 6
33205: PUSH
33206: FOR_TO
33207: IFFALSE 33246
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33209: LD_ADDR_VAR 0 9
33213: PUSH
33214: LD_VAR 0 9
33218: PPUSH
33219: LD_VAR 0 7
33223: PPUSH
33224: LD_VAR 0 6
33228: PUSH
33229: LD_VAR 0 7
33233: ARRAY
33234: PUSH
33235: LD_INT 1
33237: ARRAY
33238: PPUSH
33239: CALL_OW 1
33243: ST_TO_ADDR
33244: GO 33206
33246: POP
33247: POP
// result := tmp ;
33248: LD_ADDR_VAR 0 6
33252: PUSH
33253: LD_VAR 0 9
33257: ST_TO_ADDR
// end ; end ;
33258: LD_VAR 0 6
33262: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
33267: PPUSH
33268: PPUSH
33269: PPUSH
33270: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33271: LD_ADDR_VAR 0 5
33275: PUSH
33276: LD_INT 0
33278: PUSH
33279: LD_INT 0
33281: PUSH
33282: LD_INT 0
33284: PUSH
33285: EMPTY
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: ST_TO_ADDR
// if not x or not y then
33293: LD_VAR 0 2
33297: NOT
33298: PUSH
33299: LD_VAR 0 3
33303: NOT
33304: OR
33305: IFFALSE 33309
// exit ;
33307: GO 34959
// if not range then
33309: LD_VAR 0 4
33313: NOT
33314: IFFALSE 33324
// range := 10 ;
33316: LD_ADDR_VAR 0 4
33320: PUSH
33321: LD_INT 10
33323: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33324: LD_ADDR_VAR 0 8
33328: PUSH
33329: LD_INT 81
33331: PUSH
33332: LD_VAR 0 1
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 92
33343: PUSH
33344: LD_VAR 0 2
33348: PUSH
33349: LD_VAR 0 3
33353: PUSH
33354: LD_VAR 0 4
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 3
33367: PUSH
33368: LD_INT 21
33370: PUSH
33371: LD_INT 3
33373: PUSH
33374: EMPTY
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: PPUSH
33387: CALL_OW 69
33391: ST_TO_ADDR
// if not tmp then
33392: LD_VAR 0 8
33396: NOT
33397: IFFALSE 33401
// exit ;
33399: GO 34959
// for i in tmp do
33401: LD_ADDR_VAR 0 6
33405: PUSH
33406: LD_VAR 0 8
33410: PUSH
33411: FOR_IN
33412: IFFALSE 34934
// begin points := [ 0 , 0 , 0 ] ;
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_INT 0
33421: PUSH
33422: LD_INT 0
33424: PUSH
33425: LD_INT 0
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// bpoints := 1 ;
33433: LD_ADDR_VAR 0 10
33437: PUSH
33438: LD_INT 1
33440: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33441: LD_VAR 0 6
33445: PPUSH
33446: CALL_OW 247
33450: PUSH
33451: LD_INT 1
33453: DOUBLE
33454: EQUAL
33455: IFTRUE 33459
33457: GO 34037
33459: POP
// begin if GetClass ( i ) = 1 then
33460: LD_VAR 0 6
33464: PPUSH
33465: CALL_OW 257
33469: PUSH
33470: LD_INT 1
33472: EQUAL
33473: IFFALSE 33494
// points := [ 10 , 5 , 3 ] ;
33475: LD_ADDR_VAR 0 9
33479: PUSH
33480: LD_INT 10
33482: PUSH
33483: LD_INT 5
33485: PUSH
33486: LD_INT 3
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33494: LD_VAR 0 6
33498: PPUSH
33499: CALL_OW 257
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: LD_INT 3
33509: PUSH
33510: LD_INT 4
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: LIST
33517: IN
33518: IFFALSE 33539
// points := [ 3 , 2 , 1 ] ;
33520: LD_ADDR_VAR 0 9
33524: PUSH
33525: LD_INT 3
33527: PUSH
33528: LD_INT 2
33530: PUSH
33531: LD_INT 1
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33539: LD_VAR 0 6
33543: PPUSH
33544: CALL_OW 257
33548: PUSH
33549: LD_INT 5
33551: EQUAL
33552: IFFALSE 33573
// points := [ 130 , 5 , 2 ] ;
33554: LD_ADDR_VAR 0 9
33558: PUSH
33559: LD_INT 130
33561: PUSH
33562: LD_INT 5
33564: PUSH
33565: LD_INT 2
33567: PUSH
33568: EMPTY
33569: LIST
33570: LIST
33571: LIST
33572: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33573: LD_VAR 0 6
33577: PPUSH
33578: CALL_OW 257
33582: PUSH
33583: LD_INT 8
33585: EQUAL
33586: IFFALSE 33607
// points := [ 35 , 35 , 30 ] ;
33588: LD_ADDR_VAR 0 9
33592: PUSH
33593: LD_INT 35
33595: PUSH
33596: LD_INT 35
33598: PUSH
33599: LD_INT 30
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: LIST
33606: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33607: LD_VAR 0 6
33611: PPUSH
33612: CALL_OW 257
33616: PUSH
33617: LD_INT 9
33619: EQUAL
33620: IFFALSE 33641
// points := [ 20 , 55 , 40 ] ;
33622: LD_ADDR_VAR 0 9
33626: PUSH
33627: LD_INT 20
33629: PUSH
33630: LD_INT 55
33632: PUSH
33633: LD_INT 40
33635: PUSH
33636: EMPTY
33637: LIST
33638: LIST
33639: LIST
33640: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33641: LD_VAR 0 6
33645: PPUSH
33646: CALL_OW 257
33650: PUSH
33651: LD_INT 12
33653: PUSH
33654: LD_INT 16
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: IN
33661: IFFALSE 33682
// points := [ 5 , 3 , 2 ] ;
33663: LD_ADDR_VAR 0 9
33667: PUSH
33668: LD_INT 5
33670: PUSH
33671: LD_INT 3
33673: PUSH
33674: LD_INT 2
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: LIST
33681: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33682: LD_VAR 0 6
33686: PPUSH
33687: CALL_OW 257
33691: PUSH
33692: LD_INT 17
33694: EQUAL
33695: IFFALSE 33716
// points := [ 100 , 50 , 75 ] ;
33697: LD_ADDR_VAR 0 9
33701: PUSH
33702: LD_INT 100
33704: PUSH
33705: LD_INT 50
33707: PUSH
33708: LD_INT 75
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: LIST
33715: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33716: LD_VAR 0 6
33720: PPUSH
33721: CALL_OW 257
33725: PUSH
33726: LD_INT 15
33728: EQUAL
33729: IFFALSE 33750
// points := [ 10 , 5 , 3 ] ;
33731: LD_ADDR_VAR 0 9
33735: PUSH
33736: LD_INT 10
33738: PUSH
33739: LD_INT 5
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33750: LD_VAR 0 6
33754: PPUSH
33755: CALL_OW 257
33759: PUSH
33760: LD_INT 14
33762: EQUAL
33763: IFFALSE 33784
// points := [ 10 , 0 , 0 ] ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_INT 10
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: LD_INT 0
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33784: LD_VAR 0 6
33788: PPUSH
33789: CALL_OW 257
33793: PUSH
33794: LD_INT 11
33796: EQUAL
33797: IFFALSE 33818
// points := [ 30 , 10 , 5 ] ;
33799: LD_ADDR_VAR 0 9
33803: PUSH
33804: LD_INT 30
33806: PUSH
33807: LD_INT 10
33809: PUSH
33810: LD_INT 5
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33818: LD_VAR 0 1
33822: PPUSH
33823: LD_INT 5
33825: PPUSH
33826: CALL_OW 321
33830: PUSH
33831: LD_INT 2
33833: EQUAL
33834: IFFALSE 33851
// bpoints := bpoints * 1.8 ;
33836: LD_ADDR_VAR 0 10
33840: PUSH
33841: LD_VAR 0 10
33845: PUSH
33846: LD_REAL  1.80000000000000E+0000
33849: MUL
33850: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33851: LD_VAR 0 6
33855: PPUSH
33856: CALL_OW 257
33860: PUSH
33861: LD_INT 1
33863: PUSH
33864: LD_INT 2
33866: PUSH
33867: LD_INT 3
33869: PUSH
33870: LD_INT 4
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: IN
33879: PUSH
33880: LD_VAR 0 1
33884: PPUSH
33885: LD_INT 51
33887: PPUSH
33888: CALL_OW 321
33892: PUSH
33893: LD_INT 2
33895: EQUAL
33896: AND
33897: IFFALSE 33914
// bpoints := bpoints * 1.2 ;
33899: LD_ADDR_VAR 0 10
33903: PUSH
33904: LD_VAR 0 10
33908: PUSH
33909: LD_REAL  1.20000000000000E+0000
33912: MUL
33913: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33914: LD_VAR 0 6
33918: PPUSH
33919: CALL_OW 257
33923: PUSH
33924: LD_INT 5
33926: PUSH
33927: LD_INT 7
33929: PUSH
33930: LD_INT 9
33932: PUSH
33933: EMPTY
33934: LIST
33935: LIST
33936: LIST
33937: IN
33938: PUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: LD_INT 52
33946: PPUSH
33947: CALL_OW 321
33951: PUSH
33952: LD_INT 2
33954: EQUAL
33955: AND
33956: IFFALSE 33973
// bpoints := bpoints * 1.5 ;
33958: LD_ADDR_VAR 0 10
33962: PUSH
33963: LD_VAR 0 10
33967: PUSH
33968: LD_REAL  1.50000000000000E+0000
33971: MUL
33972: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33973: LD_VAR 0 1
33977: PPUSH
33978: LD_INT 66
33980: PPUSH
33981: CALL_OW 321
33985: PUSH
33986: LD_INT 2
33988: EQUAL
33989: IFFALSE 34006
// bpoints := bpoints * 1.1 ;
33991: LD_ADDR_VAR 0 10
33995: PUSH
33996: LD_VAR 0 10
34000: PUSH
34001: LD_REAL  1.10000000000000E+0000
34004: MUL
34005: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34006: LD_ADDR_VAR 0 10
34010: PUSH
34011: LD_VAR 0 10
34015: PUSH
34016: LD_VAR 0 6
34020: PPUSH
34021: LD_INT 1
34023: PPUSH
34024: CALL_OW 259
34028: PUSH
34029: LD_REAL  1.15000000000000E+0000
34032: MUL
34033: MUL
34034: ST_TO_ADDR
// end ; unit_vehicle :
34035: GO 34863
34037: LD_INT 2
34039: DOUBLE
34040: EQUAL
34041: IFTRUE 34045
34043: GO 34851
34045: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34046: LD_VAR 0 6
34050: PPUSH
34051: CALL_OW 264
34055: PUSH
34056: LD_INT 2
34058: PUSH
34059: LD_INT 42
34061: PUSH
34062: LD_INT 24
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: LIST
34069: IN
34070: IFFALSE 34091
// points := [ 25 , 5 , 3 ] ;
34072: LD_ADDR_VAR 0 9
34076: PUSH
34077: LD_INT 25
34079: PUSH
34080: LD_INT 5
34082: PUSH
34083: LD_INT 3
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: LIST
34090: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34091: LD_VAR 0 6
34095: PPUSH
34096: CALL_OW 264
34100: PUSH
34101: LD_INT 4
34103: PUSH
34104: LD_INT 43
34106: PUSH
34107: LD_INT 25
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: LIST
34114: IN
34115: IFFALSE 34136
// points := [ 40 , 15 , 5 ] ;
34117: LD_ADDR_VAR 0 9
34121: PUSH
34122: LD_INT 40
34124: PUSH
34125: LD_INT 15
34127: PUSH
34128: LD_INT 5
34130: PUSH
34131: EMPTY
34132: LIST
34133: LIST
34134: LIST
34135: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34136: LD_VAR 0 6
34140: PPUSH
34141: CALL_OW 264
34145: PUSH
34146: LD_INT 3
34148: PUSH
34149: LD_INT 23
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: IN
34156: IFFALSE 34177
// points := [ 7 , 25 , 8 ] ;
34158: LD_ADDR_VAR 0 9
34162: PUSH
34163: LD_INT 7
34165: PUSH
34166: LD_INT 25
34168: PUSH
34169: LD_INT 8
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34177: LD_VAR 0 6
34181: PPUSH
34182: CALL_OW 264
34186: PUSH
34187: LD_INT 5
34189: PUSH
34190: LD_INT 27
34192: PUSH
34193: LD_INT 44
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: LIST
34200: IN
34201: IFFALSE 34222
// points := [ 14 , 50 , 16 ] ;
34203: LD_ADDR_VAR 0 9
34207: PUSH
34208: LD_INT 14
34210: PUSH
34211: LD_INT 50
34213: PUSH
34214: LD_INT 16
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: LIST
34221: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34222: LD_VAR 0 6
34226: PPUSH
34227: CALL_OW 264
34231: PUSH
34232: LD_INT 6
34234: PUSH
34235: LD_INT 46
34237: PUSH
34238: EMPTY
34239: LIST
34240: LIST
34241: IN
34242: IFFALSE 34263
// points := [ 32 , 120 , 70 ] ;
34244: LD_ADDR_VAR 0 9
34248: PUSH
34249: LD_INT 32
34251: PUSH
34252: LD_INT 120
34254: PUSH
34255: LD_INT 70
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: LIST
34262: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34263: LD_VAR 0 6
34267: PPUSH
34268: CALL_OW 264
34272: PUSH
34273: LD_INT 7
34275: PUSH
34276: LD_INT 28
34278: PUSH
34279: LD_INT 45
34281: PUSH
34282: LD_INT 92
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: IN
34291: IFFALSE 34312
// points := [ 35 , 20 , 45 ] ;
34293: LD_ADDR_VAR 0 9
34297: PUSH
34298: LD_INT 35
34300: PUSH
34301: LD_INT 20
34303: PUSH
34304: LD_INT 45
34306: PUSH
34307: EMPTY
34308: LIST
34309: LIST
34310: LIST
34311: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34312: LD_VAR 0 6
34316: PPUSH
34317: CALL_OW 264
34321: PUSH
34322: LD_INT 47
34324: PUSH
34325: EMPTY
34326: LIST
34327: IN
34328: IFFALSE 34349
// points := [ 67 , 45 , 75 ] ;
34330: LD_ADDR_VAR 0 9
34334: PUSH
34335: LD_INT 67
34337: PUSH
34338: LD_INT 45
34340: PUSH
34341: LD_INT 75
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: LIST
34348: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34349: LD_VAR 0 6
34353: PPUSH
34354: CALL_OW 264
34358: PUSH
34359: LD_INT 26
34361: PUSH
34362: EMPTY
34363: LIST
34364: IN
34365: IFFALSE 34386
// points := [ 120 , 30 , 80 ] ;
34367: LD_ADDR_VAR 0 9
34371: PUSH
34372: LD_INT 120
34374: PUSH
34375: LD_INT 30
34377: PUSH
34378: LD_INT 80
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34386: LD_VAR 0 6
34390: PPUSH
34391: CALL_OW 264
34395: PUSH
34396: LD_INT 22
34398: PUSH
34399: EMPTY
34400: LIST
34401: IN
34402: IFFALSE 34423
// points := [ 40 , 1 , 1 ] ;
34404: LD_ADDR_VAR 0 9
34408: PUSH
34409: LD_INT 40
34411: PUSH
34412: LD_INT 1
34414: PUSH
34415: LD_INT 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: LIST
34422: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34423: LD_VAR 0 6
34427: PPUSH
34428: CALL_OW 264
34432: PUSH
34433: LD_INT 29
34435: PUSH
34436: EMPTY
34437: LIST
34438: IN
34439: IFFALSE 34460
// points := [ 70 , 200 , 400 ] ;
34441: LD_ADDR_VAR 0 9
34445: PUSH
34446: LD_INT 70
34448: PUSH
34449: LD_INT 200
34451: PUSH
34452: LD_INT 400
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: LIST
34459: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34460: LD_VAR 0 6
34464: PPUSH
34465: CALL_OW 264
34469: PUSH
34470: LD_INT 14
34472: PUSH
34473: LD_INT 53
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: IN
34480: IFFALSE 34501
// points := [ 40 , 10 , 20 ] ;
34482: LD_ADDR_VAR 0 9
34486: PUSH
34487: LD_INT 40
34489: PUSH
34490: LD_INT 10
34492: PUSH
34493: LD_INT 20
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: LIST
34500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34501: LD_VAR 0 6
34505: PPUSH
34506: CALL_OW 264
34510: PUSH
34511: LD_INT 9
34513: PUSH
34514: EMPTY
34515: LIST
34516: IN
34517: IFFALSE 34538
// points := [ 5 , 70 , 20 ] ;
34519: LD_ADDR_VAR 0 9
34523: PUSH
34524: LD_INT 5
34526: PUSH
34527: LD_INT 70
34529: PUSH
34530: LD_INT 20
34532: PUSH
34533: EMPTY
34534: LIST
34535: LIST
34536: LIST
34537: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34538: LD_VAR 0 6
34542: PPUSH
34543: CALL_OW 264
34547: PUSH
34548: LD_INT 10
34550: PUSH
34551: EMPTY
34552: LIST
34553: IN
34554: IFFALSE 34575
// points := [ 35 , 110 , 70 ] ;
34556: LD_ADDR_VAR 0 9
34560: PUSH
34561: LD_INT 35
34563: PUSH
34564: LD_INT 110
34566: PUSH
34567: LD_INT 70
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34575: LD_VAR 0 6
34579: PPUSH
34580: CALL_OW 265
34584: PUSH
34585: LD_INT 25
34587: EQUAL
34588: IFFALSE 34609
// points := [ 80 , 65 , 100 ] ;
34590: LD_ADDR_VAR 0 9
34594: PUSH
34595: LD_INT 80
34597: PUSH
34598: LD_INT 65
34600: PUSH
34601: LD_INT 100
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: LIST
34608: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34609: LD_VAR 0 6
34613: PPUSH
34614: CALL_OW 263
34618: PUSH
34619: LD_INT 1
34621: EQUAL
34622: IFFALSE 34657
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34624: LD_ADDR_VAR 0 10
34628: PUSH
34629: LD_VAR 0 10
34633: PUSH
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 311
34643: PPUSH
34644: LD_INT 3
34646: PPUSH
34647: CALL_OW 259
34651: PUSH
34652: LD_INT 4
34654: MUL
34655: MUL
34656: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34657: LD_VAR 0 6
34661: PPUSH
34662: CALL_OW 263
34666: PUSH
34667: LD_INT 2
34669: EQUAL
34670: IFFALSE 34721
// begin j := IsControledBy ( i ) ;
34672: LD_ADDR_VAR 0 7
34676: PUSH
34677: LD_VAR 0 6
34681: PPUSH
34682: CALL_OW 312
34686: ST_TO_ADDR
// if j then
34687: LD_VAR 0 7
34691: IFFALSE 34721
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34693: LD_ADDR_VAR 0 10
34697: PUSH
34698: LD_VAR 0 10
34702: PUSH
34703: LD_VAR 0 7
34707: PPUSH
34708: LD_INT 3
34710: PPUSH
34711: CALL_OW 259
34715: PUSH
34716: LD_INT 3
34718: MUL
34719: MUL
34720: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34721: LD_VAR 0 6
34725: PPUSH
34726: CALL_OW 264
34730: PUSH
34731: LD_INT 5
34733: PUSH
34734: LD_INT 6
34736: PUSH
34737: LD_INT 46
34739: PUSH
34740: LD_INT 44
34742: PUSH
34743: LD_INT 47
34745: PUSH
34746: LD_INT 45
34748: PUSH
34749: LD_INT 28
34751: PUSH
34752: LD_INT 7
34754: PUSH
34755: LD_INT 27
34757: PUSH
34758: LD_INT 29
34760: PUSH
34761: EMPTY
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: IN
34773: PUSH
34774: LD_VAR 0 1
34778: PPUSH
34779: LD_INT 52
34781: PPUSH
34782: CALL_OW 321
34786: PUSH
34787: LD_INT 2
34789: EQUAL
34790: AND
34791: IFFALSE 34808
// bpoints := bpoints * 1.2 ;
34793: LD_ADDR_VAR 0 10
34797: PUSH
34798: LD_VAR 0 10
34802: PUSH
34803: LD_REAL  1.20000000000000E+0000
34806: MUL
34807: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34808: LD_VAR 0 6
34812: PPUSH
34813: CALL_OW 264
34817: PUSH
34818: LD_INT 6
34820: PUSH
34821: LD_INT 46
34823: PUSH
34824: LD_INT 47
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: LIST
34831: IN
34832: IFFALSE 34849
// bpoints := bpoints * 1.2 ;
34834: LD_ADDR_VAR 0 10
34838: PUSH
34839: LD_VAR 0 10
34843: PUSH
34844: LD_REAL  1.20000000000000E+0000
34847: MUL
34848: ST_TO_ADDR
// end ; unit_building :
34849: GO 34863
34851: LD_INT 3
34853: DOUBLE
34854: EQUAL
34855: IFTRUE 34859
34857: GO 34862
34859: POP
// ; end ;
34860: GO 34863
34862: POP
// for j = 1 to 3 do
34863: LD_ADDR_VAR 0 7
34867: PUSH
34868: DOUBLE
34869: LD_INT 1
34871: DEC
34872: ST_TO_ADDR
34873: LD_INT 3
34875: PUSH
34876: FOR_TO
34877: IFFALSE 34930
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34879: LD_ADDR_VAR 0 5
34883: PUSH
34884: LD_VAR 0 5
34888: PPUSH
34889: LD_VAR 0 7
34893: PPUSH
34894: LD_VAR 0 5
34898: PUSH
34899: LD_VAR 0 7
34903: ARRAY
34904: PUSH
34905: LD_VAR 0 9
34909: PUSH
34910: LD_VAR 0 7
34914: ARRAY
34915: PUSH
34916: LD_VAR 0 10
34920: MUL
34921: PLUS
34922: PPUSH
34923: CALL_OW 1
34927: ST_TO_ADDR
34928: GO 34876
34930: POP
34931: POP
// end ;
34932: GO 33411
34934: POP
34935: POP
// result := Replace ( result , 4 , tmp ) ;
34936: LD_ADDR_VAR 0 5
34940: PUSH
34941: LD_VAR 0 5
34945: PPUSH
34946: LD_INT 4
34948: PPUSH
34949: LD_VAR 0 8
34953: PPUSH
34954: CALL_OW 1
34958: ST_TO_ADDR
// end ;
34959: LD_VAR 0 5
34963: RET
// export function DangerAtRange ( unit , range ) ; begin
34964: LD_INT 0
34966: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34967: LD_ADDR_VAR 0 3
34971: PUSH
34972: LD_VAR 0 1
34976: PPUSH
34977: CALL_OW 255
34981: PPUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 250
34991: PPUSH
34992: LD_VAR 0 1
34996: PPUSH
34997: CALL_OW 251
35001: PPUSH
35002: LD_VAR 0 2
35006: PPUSH
35007: CALL 33263 0 4
35011: ST_TO_ADDR
// end ;
35012: LD_VAR 0 3
35016: RET
// export function DangerInArea ( side , area ) ; begin
35017: LD_INT 0
35019: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: LD_VAR 0 2
35029: PPUSH
35030: LD_INT 81
35032: PUSH
35033: LD_VAR 0 1
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PPUSH
35042: CALL_OW 70
35046: ST_TO_ADDR
// end ;
35047: LD_VAR 0 3
35051: RET
// export function IsExtension ( b ) ; begin
35052: LD_INT 0
35054: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35055: LD_ADDR_VAR 0 2
35059: PUSH
35060: LD_VAR 0 1
35064: PUSH
35065: LD_INT 23
35067: PUSH
35068: LD_INT 20
35070: PUSH
35071: LD_INT 22
35073: PUSH
35074: LD_INT 17
35076: PUSH
35077: LD_INT 24
35079: PUSH
35080: LD_INT 21
35082: PUSH
35083: LD_INT 19
35085: PUSH
35086: LD_INT 16
35088: PUSH
35089: LD_INT 25
35091: PUSH
35092: LD_INT 18
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: IN
35107: ST_TO_ADDR
// end ;
35108: LD_VAR 0 2
35112: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35113: LD_INT 0
35115: PPUSH
35116: PPUSH
35117: PPUSH
// result := [ ] ;
35118: LD_ADDR_VAR 0 4
35122: PUSH
35123: EMPTY
35124: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35125: LD_ADDR_VAR 0 5
35129: PUSH
35130: LD_VAR 0 2
35134: PPUSH
35135: LD_INT 21
35137: PUSH
35138: LD_INT 3
35140: PUSH
35141: EMPTY
35142: LIST
35143: LIST
35144: PPUSH
35145: CALL_OW 70
35149: ST_TO_ADDR
// if not tmp then
35150: LD_VAR 0 5
35154: NOT
35155: IFFALSE 35159
// exit ;
35157: GO 35223
// if checkLink then
35159: LD_VAR 0 3
35163: IFFALSE 35213
// begin for i in tmp do
35165: LD_ADDR_VAR 0 6
35169: PUSH
35170: LD_VAR 0 5
35174: PUSH
35175: FOR_IN
35176: IFFALSE 35211
// if GetBase ( i ) <> base then
35178: LD_VAR 0 6
35182: PPUSH
35183: CALL_OW 274
35187: PUSH
35188: LD_VAR 0 1
35192: NONEQUAL
35193: IFFALSE 35209
// ComLinkToBase ( base , i ) ;
35195: LD_VAR 0 1
35199: PPUSH
35200: LD_VAR 0 6
35204: PPUSH
35205: CALL_OW 169
35209: GO 35175
35211: POP
35212: POP
// end ; result := tmp ;
35213: LD_ADDR_VAR 0 4
35217: PUSH
35218: LD_VAR 0 5
35222: ST_TO_ADDR
// end ;
35223: LD_VAR 0 4
35227: RET
// export function ComComplete ( units , b ) ; var i ; begin
35228: LD_INT 0
35230: PPUSH
35231: PPUSH
// if not units then
35232: LD_VAR 0 1
35236: NOT
35237: IFFALSE 35241
// exit ;
35239: GO 35331
// for i in units do
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: LD_VAR 0 1
35250: PUSH
35251: FOR_IN
35252: IFFALSE 35329
// if BuildingStatus ( b ) = bs_build then
35254: LD_VAR 0 2
35258: PPUSH
35259: CALL_OW 461
35263: PUSH
35264: LD_INT 1
35266: EQUAL
35267: IFFALSE 35327
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35269: LD_VAR 0 4
35273: PPUSH
35274: LD_STRING h
35276: PUSH
35277: LD_VAR 0 2
35281: PPUSH
35282: CALL_OW 250
35286: PUSH
35287: LD_VAR 0 2
35291: PPUSH
35292: CALL_OW 251
35296: PUSH
35297: LD_VAR 0 2
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 0
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: EMPTY
35312: LIST
35313: LIST
35314: LIST
35315: LIST
35316: LIST
35317: LIST
35318: LIST
35319: PUSH
35320: EMPTY
35321: LIST
35322: PPUSH
35323: CALL_OW 446
35327: GO 35251
35329: POP
35330: POP
// end ;
35331: LD_VAR 0 3
35335: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35336: LD_INT 0
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35344: LD_VAR 0 1
35348: NOT
35349: PUSH
35350: LD_VAR 0 1
35354: PPUSH
35355: CALL_OW 263
35359: PUSH
35360: LD_INT 2
35362: NONEQUAL
35363: OR
35364: IFFALSE 35368
// exit ;
35366: GO 35684
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35368: LD_ADDR_VAR 0 6
35372: PUSH
35373: LD_INT 22
35375: PUSH
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL_OW 255
35385: PUSH
35386: EMPTY
35387: LIST
35388: LIST
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: LD_INT 30
35395: PUSH
35396: LD_INT 36
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 34
35405: PUSH
35406: LD_INT 31
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: PUSH
35418: EMPTY
35419: LIST
35420: LIST
35421: PPUSH
35422: CALL_OW 69
35426: ST_TO_ADDR
// if not tmp then
35427: LD_VAR 0 6
35431: NOT
35432: IFFALSE 35436
// exit ;
35434: GO 35684
// result := [ ] ;
35436: LD_ADDR_VAR 0 2
35440: PUSH
35441: EMPTY
35442: ST_TO_ADDR
// for i in tmp do
35443: LD_ADDR_VAR 0 3
35447: PUSH
35448: LD_VAR 0 6
35452: PUSH
35453: FOR_IN
35454: IFFALSE 35525
// begin t := UnitsInside ( i ) ;
35456: LD_ADDR_VAR 0 4
35460: PUSH
35461: LD_VAR 0 3
35465: PPUSH
35466: CALL_OW 313
35470: ST_TO_ADDR
// if t then
35471: LD_VAR 0 4
35475: IFFALSE 35523
// for j in t do
35477: LD_ADDR_VAR 0 7
35481: PUSH
35482: LD_VAR 0 4
35486: PUSH
35487: FOR_IN
35488: IFFALSE 35521
// result := Replace ( result , result + 1 , j ) ;
35490: LD_ADDR_VAR 0 2
35494: PUSH
35495: LD_VAR 0 2
35499: PPUSH
35500: LD_VAR 0 2
35504: PUSH
35505: LD_INT 1
35507: PLUS
35508: PPUSH
35509: LD_VAR 0 7
35513: PPUSH
35514: CALL_OW 1
35518: ST_TO_ADDR
35519: GO 35487
35521: POP
35522: POP
// end ;
35523: GO 35453
35525: POP
35526: POP
// if not result then
35527: LD_VAR 0 2
35531: NOT
35532: IFFALSE 35536
// exit ;
35534: GO 35684
// mech := result [ 1 ] ;
35536: LD_ADDR_VAR 0 5
35540: PUSH
35541: LD_VAR 0 2
35545: PUSH
35546: LD_INT 1
35548: ARRAY
35549: ST_TO_ADDR
// if result > 1 then
35550: LD_VAR 0 2
35554: PUSH
35555: LD_INT 1
35557: GREATER
35558: IFFALSE 35670
// begin for i = 2 to result do
35560: LD_ADDR_VAR 0 3
35564: PUSH
35565: DOUBLE
35566: LD_INT 2
35568: DEC
35569: ST_TO_ADDR
35570: LD_VAR 0 2
35574: PUSH
35575: FOR_TO
35576: IFFALSE 35668
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35578: LD_ADDR_VAR 0 4
35582: PUSH
35583: LD_VAR 0 2
35587: PUSH
35588: LD_VAR 0 3
35592: ARRAY
35593: PPUSH
35594: LD_INT 3
35596: PPUSH
35597: CALL_OW 259
35601: PUSH
35602: LD_VAR 0 2
35606: PUSH
35607: LD_VAR 0 3
35611: ARRAY
35612: PPUSH
35613: CALL_OW 432
35617: MINUS
35618: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35619: LD_VAR 0 4
35623: PUSH
35624: LD_VAR 0 5
35628: PPUSH
35629: LD_INT 3
35631: PPUSH
35632: CALL_OW 259
35636: PUSH
35637: LD_VAR 0 5
35641: PPUSH
35642: CALL_OW 432
35646: MINUS
35647: GREATEREQUAL
35648: IFFALSE 35666
// mech := result [ i ] ;
35650: LD_ADDR_VAR 0 5
35654: PUSH
35655: LD_VAR 0 2
35659: PUSH
35660: LD_VAR 0 3
35664: ARRAY
35665: ST_TO_ADDR
// end ;
35666: GO 35575
35668: POP
35669: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35670: LD_VAR 0 1
35674: PPUSH
35675: LD_VAR 0 5
35679: PPUSH
35680: CALL_OW 135
// end ;
35684: LD_VAR 0 2
35688: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35689: LD_INT 0
35691: PPUSH
35692: PPUSH
35693: PPUSH
35694: PPUSH
35695: PPUSH
35696: PPUSH
35697: PPUSH
35698: PPUSH
35699: PPUSH
35700: PPUSH
35701: PPUSH
35702: PPUSH
35703: PPUSH
// result := [ ] ;
35704: LD_ADDR_VAR 0 7
35708: PUSH
35709: EMPTY
35710: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35711: LD_VAR 0 1
35715: PPUSH
35716: CALL_OW 266
35720: PUSH
35721: LD_INT 0
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: IN
35731: NOT
35732: IFFALSE 35736
// exit ;
35734: GO 37370
// if name then
35736: LD_VAR 0 3
35740: IFFALSE 35756
// SetBName ( base_dep , name ) ;
35742: LD_VAR 0 1
35746: PPUSH
35747: LD_VAR 0 3
35751: PPUSH
35752: CALL_OW 500
// base := GetBase ( base_dep ) ;
35756: LD_ADDR_VAR 0 15
35760: PUSH
35761: LD_VAR 0 1
35765: PPUSH
35766: CALL_OW 274
35770: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35771: LD_ADDR_VAR 0 16
35775: PUSH
35776: LD_VAR 0 1
35780: PPUSH
35781: CALL_OW 255
35785: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35786: LD_ADDR_VAR 0 17
35790: PUSH
35791: LD_VAR 0 1
35795: PPUSH
35796: CALL_OW 248
35800: ST_TO_ADDR
// if sources then
35801: LD_VAR 0 5
35805: IFFALSE 35852
// for i = 1 to 3 do
35807: LD_ADDR_VAR 0 8
35811: PUSH
35812: DOUBLE
35813: LD_INT 1
35815: DEC
35816: ST_TO_ADDR
35817: LD_INT 3
35819: PUSH
35820: FOR_TO
35821: IFFALSE 35850
// AddResourceType ( base , i , sources [ i ] ) ;
35823: LD_VAR 0 15
35827: PPUSH
35828: LD_VAR 0 8
35832: PPUSH
35833: LD_VAR 0 5
35837: PUSH
35838: LD_VAR 0 8
35842: ARRAY
35843: PPUSH
35844: CALL_OW 276
35848: GO 35820
35850: POP
35851: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35852: LD_ADDR_VAR 0 18
35856: PUSH
35857: LD_VAR 0 15
35861: PPUSH
35862: LD_VAR 0 2
35866: PPUSH
35867: LD_INT 1
35869: PPUSH
35870: CALL 35113 0 3
35874: ST_TO_ADDR
// InitHc ;
35875: CALL_OW 19
// InitUc ;
35879: CALL_OW 18
// uc_side := side ;
35883: LD_ADDR_OWVAR 20
35887: PUSH
35888: LD_VAR 0 16
35892: ST_TO_ADDR
// uc_nation := nation ;
35893: LD_ADDR_OWVAR 21
35897: PUSH
35898: LD_VAR 0 17
35902: ST_TO_ADDR
// if buildings then
35903: LD_VAR 0 18
35907: IFFALSE 37229
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35909: LD_ADDR_VAR 0 19
35913: PUSH
35914: LD_VAR 0 18
35918: PPUSH
35919: LD_INT 2
35921: PUSH
35922: LD_INT 30
35924: PUSH
35925: LD_INT 29
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: LD_INT 30
35934: PUSH
35935: LD_INT 30
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: LIST
35946: PPUSH
35947: CALL_OW 72
35951: ST_TO_ADDR
// if tmp then
35952: LD_VAR 0 19
35956: IFFALSE 36004
// for i in tmp do
35958: LD_ADDR_VAR 0 8
35962: PUSH
35963: LD_VAR 0 19
35967: PUSH
35968: FOR_IN
35969: IFFALSE 36002
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35971: LD_VAR 0 8
35975: PPUSH
35976: CALL_OW 250
35980: PPUSH
35981: LD_VAR 0 8
35985: PPUSH
35986: CALL_OW 251
35990: PPUSH
35991: LD_VAR 0 16
35995: PPUSH
35996: CALL_OW 441
36000: GO 35968
36002: POP
36003: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36004: LD_VAR 0 18
36008: PPUSH
36009: LD_INT 2
36011: PUSH
36012: LD_INT 30
36014: PUSH
36015: LD_INT 32
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 30
36024: PUSH
36025: LD_INT 33
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: PPUSH
36037: CALL_OW 72
36041: IFFALSE 36129
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36043: LD_ADDR_VAR 0 8
36047: PUSH
36048: LD_VAR 0 18
36052: PPUSH
36053: LD_INT 2
36055: PUSH
36056: LD_INT 30
36058: PUSH
36059: LD_INT 32
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 30
36068: PUSH
36069: LD_INT 33
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: EMPTY
36077: LIST
36078: LIST
36079: LIST
36080: PPUSH
36081: CALL_OW 72
36085: PUSH
36086: FOR_IN
36087: IFFALSE 36127
// begin if not GetBWeapon ( i ) then
36089: LD_VAR 0 8
36093: PPUSH
36094: CALL_OW 269
36098: NOT
36099: IFFALSE 36125
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36101: LD_VAR 0 8
36105: PPUSH
36106: LD_VAR 0 8
36110: PPUSH
36111: LD_VAR 0 2
36115: PPUSH
36116: CALL 37375 0 2
36120: PPUSH
36121: CALL_OW 431
// end ;
36125: GO 36086
36127: POP
36128: POP
// end ; for i = 1 to personel do
36129: LD_ADDR_VAR 0 8
36133: PUSH
36134: DOUBLE
36135: LD_INT 1
36137: DEC
36138: ST_TO_ADDR
36139: LD_VAR 0 6
36143: PUSH
36144: FOR_TO
36145: IFFALSE 37209
// begin if i > 4 then
36147: LD_VAR 0 8
36151: PUSH
36152: LD_INT 4
36154: GREATER
36155: IFFALSE 36159
// break ;
36157: GO 37209
// case i of 1 :
36159: LD_VAR 0 8
36163: PUSH
36164: LD_INT 1
36166: DOUBLE
36167: EQUAL
36168: IFTRUE 36172
36170: GO 36252
36172: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36173: LD_ADDR_VAR 0 12
36177: PUSH
36178: LD_VAR 0 18
36182: PPUSH
36183: LD_INT 22
36185: PUSH
36186: LD_VAR 0 16
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 58
36197: PUSH
36198: EMPTY
36199: LIST
36200: PUSH
36201: LD_INT 2
36203: PUSH
36204: LD_INT 30
36206: PUSH
36207: LD_INT 32
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 30
36216: PUSH
36217: LD_INT 4
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 30
36226: PUSH
36227: LD_INT 5
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: LIST
36244: PPUSH
36245: CALL_OW 72
36249: ST_TO_ADDR
36250: GO 36474
36252: LD_INT 2
36254: DOUBLE
36255: EQUAL
36256: IFTRUE 36260
36258: GO 36322
36260: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36261: LD_ADDR_VAR 0 12
36265: PUSH
36266: LD_VAR 0 18
36270: PPUSH
36271: LD_INT 22
36273: PUSH
36274: LD_VAR 0 16
36278: PUSH
36279: EMPTY
36280: LIST
36281: LIST
36282: PUSH
36283: LD_INT 2
36285: PUSH
36286: LD_INT 30
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 30
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: LIST
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PPUSH
36315: CALL_OW 72
36319: ST_TO_ADDR
36320: GO 36474
36322: LD_INT 3
36324: DOUBLE
36325: EQUAL
36326: IFTRUE 36330
36328: GO 36392
36330: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36331: LD_ADDR_VAR 0 12
36335: PUSH
36336: LD_VAR 0 18
36340: PPUSH
36341: LD_INT 22
36343: PUSH
36344: LD_VAR 0 16
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: LD_INT 2
36355: PUSH
36356: LD_INT 30
36358: PUSH
36359: LD_INT 2
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 30
36368: PUSH
36369: LD_INT 3
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: LIST
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: PPUSH
36385: CALL_OW 72
36389: ST_TO_ADDR
36390: GO 36474
36392: LD_INT 4
36394: DOUBLE
36395: EQUAL
36396: IFTRUE 36400
36398: GO 36473
36400: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36401: LD_ADDR_VAR 0 12
36405: PUSH
36406: LD_VAR 0 18
36410: PPUSH
36411: LD_INT 22
36413: PUSH
36414: LD_VAR 0 16
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 2
36425: PUSH
36426: LD_INT 30
36428: PUSH
36429: LD_INT 6
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 30
36438: PUSH
36439: LD_INT 7
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 30
36448: PUSH
36449: LD_INT 8
36451: PUSH
36452: EMPTY
36453: LIST
36454: LIST
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: PUSH
36462: EMPTY
36463: LIST
36464: LIST
36465: PPUSH
36466: CALL_OW 72
36470: ST_TO_ADDR
36471: GO 36474
36473: POP
// if i = 1 then
36474: LD_VAR 0 8
36478: PUSH
36479: LD_INT 1
36481: EQUAL
36482: IFFALSE 36593
// begin tmp := [ ] ;
36484: LD_ADDR_VAR 0 19
36488: PUSH
36489: EMPTY
36490: ST_TO_ADDR
// for j in f do
36491: LD_ADDR_VAR 0 9
36495: PUSH
36496: LD_VAR 0 12
36500: PUSH
36501: FOR_IN
36502: IFFALSE 36575
// if GetBType ( j ) = b_bunker then
36504: LD_VAR 0 9
36508: PPUSH
36509: CALL_OW 266
36513: PUSH
36514: LD_INT 32
36516: EQUAL
36517: IFFALSE 36544
// tmp := Insert ( tmp , 1 , j ) else
36519: LD_ADDR_VAR 0 19
36523: PUSH
36524: LD_VAR 0 19
36528: PPUSH
36529: LD_INT 1
36531: PPUSH
36532: LD_VAR 0 9
36536: PPUSH
36537: CALL_OW 2
36541: ST_TO_ADDR
36542: GO 36573
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36544: LD_ADDR_VAR 0 19
36548: PUSH
36549: LD_VAR 0 19
36553: PPUSH
36554: LD_VAR 0 19
36558: PUSH
36559: LD_INT 1
36561: PLUS
36562: PPUSH
36563: LD_VAR 0 9
36567: PPUSH
36568: CALL_OW 2
36572: ST_TO_ADDR
36573: GO 36501
36575: POP
36576: POP
// if tmp then
36577: LD_VAR 0 19
36581: IFFALSE 36593
// f := tmp ;
36583: LD_ADDR_VAR 0 12
36587: PUSH
36588: LD_VAR 0 19
36592: ST_TO_ADDR
// end ; x := personel [ i ] ;
36593: LD_ADDR_VAR 0 13
36597: PUSH
36598: LD_VAR 0 6
36602: PUSH
36603: LD_VAR 0 8
36607: ARRAY
36608: ST_TO_ADDR
// if x = - 1 then
36609: LD_VAR 0 13
36613: PUSH
36614: LD_INT 1
36616: NEG
36617: EQUAL
36618: IFFALSE 36827
// begin for j in f do
36620: LD_ADDR_VAR 0 9
36624: PUSH
36625: LD_VAR 0 12
36629: PUSH
36630: FOR_IN
36631: IFFALSE 36823
// repeat InitHc ;
36633: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36637: LD_VAR 0 9
36641: PPUSH
36642: CALL_OW 266
36646: PUSH
36647: LD_INT 5
36649: EQUAL
36650: IFFALSE 36720
// begin if UnitsInside ( j ) < 3 then
36652: LD_VAR 0 9
36656: PPUSH
36657: CALL_OW 313
36661: PUSH
36662: LD_INT 3
36664: LESS
36665: IFFALSE 36701
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36667: LD_INT 0
36669: PPUSH
36670: LD_INT 5
36672: PUSH
36673: LD_INT 8
36675: PUSH
36676: LD_INT 9
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: LIST
36683: PUSH
36684: LD_VAR 0 17
36688: ARRAY
36689: PPUSH
36690: LD_VAR 0 4
36694: PPUSH
36695: CALL_OW 380
36699: GO 36718
// PrepareHuman ( false , i , skill ) ;
36701: LD_INT 0
36703: PPUSH
36704: LD_VAR 0 8
36708: PPUSH
36709: LD_VAR 0 4
36713: PPUSH
36714: CALL_OW 380
// end else
36718: GO 36737
// PrepareHuman ( false , i , skill ) ;
36720: LD_INT 0
36722: PPUSH
36723: LD_VAR 0 8
36727: PPUSH
36728: LD_VAR 0 4
36732: PPUSH
36733: CALL_OW 380
// un := CreateHuman ;
36737: LD_ADDR_VAR 0 14
36741: PUSH
36742: CALL_OW 44
36746: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36747: LD_ADDR_VAR 0 7
36751: PUSH
36752: LD_VAR 0 7
36756: PPUSH
36757: LD_INT 1
36759: PPUSH
36760: LD_VAR 0 14
36764: PPUSH
36765: CALL_OW 2
36769: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36770: LD_VAR 0 14
36774: PPUSH
36775: LD_VAR 0 9
36779: PPUSH
36780: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36784: LD_VAR 0 9
36788: PPUSH
36789: CALL_OW 313
36793: PUSH
36794: LD_INT 6
36796: EQUAL
36797: PUSH
36798: LD_VAR 0 9
36802: PPUSH
36803: CALL_OW 266
36807: PUSH
36808: LD_INT 32
36810: PUSH
36811: LD_INT 31
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: IN
36818: OR
36819: IFFALSE 36633
36821: GO 36630
36823: POP
36824: POP
// end else
36825: GO 37207
// for j = 1 to x do
36827: LD_ADDR_VAR 0 9
36831: PUSH
36832: DOUBLE
36833: LD_INT 1
36835: DEC
36836: ST_TO_ADDR
36837: LD_VAR 0 13
36841: PUSH
36842: FOR_TO
36843: IFFALSE 37205
// begin InitHc ;
36845: CALL_OW 19
// if not f then
36849: LD_VAR 0 12
36853: NOT
36854: IFFALSE 36943
// begin PrepareHuman ( false , i , skill ) ;
36856: LD_INT 0
36858: PPUSH
36859: LD_VAR 0 8
36863: PPUSH
36864: LD_VAR 0 4
36868: PPUSH
36869: CALL_OW 380
// un := CreateHuman ;
36873: LD_ADDR_VAR 0 14
36877: PUSH
36878: CALL_OW 44
36882: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36883: LD_ADDR_VAR 0 7
36887: PUSH
36888: LD_VAR 0 7
36892: PPUSH
36893: LD_INT 1
36895: PPUSH
36896: LD_VAR 0 14
36900: PPUSH
36901: CALL_OW 2
36905: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36906: LD_VAR 0 14
36910: PPUSH
36911: LD_VAR 0 1
36915: PPUSH
36916: CALL_OW 250
36920: PPUSH
36921: LD_VAR 0 1
36925: PPUSH
36926: CALL_OW 251
36930: PPUSH
36931: LD_INT 10
36933: PPUSH
36934: LD_INT 0
36936: PPUSH
36937: CALL_OW 50
// continue ;
36941: GO 36842
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36943: LD_VAR 0 12
36947: PUSH
36948: LD_INT 1
36950: ARRAY
36951: PPUSH
36952: CALL_OW 313
36956: PUSH
36957: LD_VAR 0 12
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: CALL_OW 266
36970: PUSH
36971: LD_INT 32
36973: PUSH
36974: LD_INT 31
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: IN
36981: AND
36982: PUSH
36983: LD_VAR 0 12
36987: PUSH
36988: LD_INT 1
36990: ARRAY
36991: PPUSH
36992: CALL_OW 313
36996: PUSH
36997: LD_INT 6
36999: EQUAL
37000: OR
37001: IFFALSE 37021
// f := Delete ( f , 1 ) ;
37003: LD_ADDR_VAR 0 12
37007: PUSH
37008: LD_VAR 0 12
37012: PPUSH
37013: LD_INT 1
37015: PPUSH
37016: CALL_OW 3
37020: ST_TO_ADDR
// if not f then
37021: LD_VAR 0 12
37025: NOT
37026: IFFALSE 37044
// begin x := x + 2 ;
37028: LD_ADDR_VAR 0 13
37032: PUSH
37033: LD_VAR 0 13
37037: PUSH
37038: LD_INT 2
37040: PLUS
37041: ST_TO_ADDR
// continue ;
37042: GO 36842
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37044: LD_VAR 0 12
37048: PUSH
37049: LD_INT 1
37051: ARRAY
37052: PPUSH
37053: CALL_OW 266
37057: PUSH
37058: LD_INT 5
37060: EQUAL
37061: IFFALSE 37135
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37063: LD_VAR 0 12
37067: PUSH
37068: LD_INT 1
37070: ARRAY
37071: PPUSH
37072: CALL_OW 313
37076: PUSH
37077: LD_INT 3
37079: LESS
37080: IFFALSE 37116
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37082: LD_INT 0
37084: PPUSH
37085: LD_INT 5
37087: PUSH
37088: LD_INT 8
37090: PUSH
37091: LD_INT 9
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: PUSH
37099: LD_VAR 0 17
37103: ARRAY
37104: PPUSH
37105: LD_VAR 0 4
37109: PPUSH
37110: CALL_OW 380
37114: GO 37133
// PrepareHuman ( false , i , skill ) ;
37116: LD_INT 0
37118: PPUSH
37119: LD_VAR 0 8
37123: PPUSH
37124: LD_VAR 0 4
37128: PPUSH
37129: CALL_OW 380
// end else
37133: GO 37152
// PrepareHuman ( false , i , skill ) ;
37135: LD_INT 0
37137: PPUSH
37138: LD_VAR 0 8
37142: PPUSH
37143: LD_VAR 0 4
37147: PPUSH
37148: CALL_OW 380
// un := CreateHuman ;
37152: LD_ADDR_VAR 0 14
37156: PUSH
37157: CALL_OW 44
37161: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37162: LD_ADDR_VAR 0 7
37166: PUSH
37167: LD_VAR 0 7
37171: PPUSH
37172: LD_INT 1
37174: PPUSH
37175: LD_VAR 0 14
37179: PPUSH
37180: CALL_OW 2
37184: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37185: LD_VAR 0 14
37189: PPUSH
37190: LD_VAR 0 12
37194: PUSH
37195: LD_INT 1
37197: ARRAY
37198: PPUSH
37199: CALL_OW 52
// end ;
37203: GO 36842
37205: POP
37206: POP
// end ;
37207: GO 36144
37209: POP
37210: POP
// result := result ^ buildings ;
37211: LD_ADDR_VAR 0 7
37215: PUSH
37216: LD_VAR 0 7
37220: PUSH
37221: LD_VAR 0 18
37225: ADD
37226: ST_TO_ADDR
// end else
37227: GO 37370
// begin for i = 1 to personel do
37229: LD_ADDR_VAR 0 8
37233: PUSH
37234: DOUBLE
37235: LD_INT 1
37237: DEC
37238: ST_TO_ADDR
37239: LD_VAR 0 6
37243: PUSH
37244: FOR_TO
37245: IFFALSE 37368
// begin if i > 4 then
37247: LD_VAR 0 8
37251: PUSH
37252: LD_INT 4
37254: GREATER
37255: IFFALSE 37259
// break ;
37257: GO 37368
// x := personel [ i ] ;
37259: LD_ADDR_VAR 0 13
37263: PUSH
37264: LD_VAR 0 6
37268: PUSH
37269: LD_VAR 0 8
37273: ARRAY
37274: ST_TO_ADDR
// if x = - 1 then
37275: LD_VAR 0 13
37279: PUSH
37280: LD_INT 1
37282: NEG
37283: EQUAL
37284: IFFALSE 37288
// continue ;
37286: GO 37244
// PrepareHuman ( false , i , skill ) ;
37288: LD_INT 0
37290: PPUSH
37291: LD_VAR 0 8
37295: PPUSH
37296: LD_VAR 0 4
37300: PPUSH
37301: CALL_OW 380
// un := CreateHuman ;
37305: LD_ADDR_VAR 0 14
37309: PUSH
37310: CALL_OW 44
37314: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37315: LD_VAR 0 14
37319: PPUSH
37320: LD_VAR 0 1
37324: PPUSH
37325: CALL_OW 250
37329: PPUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: CALL_OW 251
37339: PPUSH
37340: LD_INT 10
37342: PPUSH
37343: LD_INT 0
37345: PPUSH
37346: CALL_OW 50
// result := result ^ un ;
37350: LD_ADDR_VAR 0 7
37354: PUSH
37355: LD_VAR 0 7
37359: PUSH
37360: LD_VAR 0 14
37364: ADD
37365: ST_TO_ADDR
// end ;
37366: GO 37244
37368: POP
37369: POP
// end ; end ;
37370: LD_VAR 0 7
37374: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37375: LD_INT 0
37377: PPUSH
37378: PPUSH
37379: PPUSH
37380: PPUSH
37381: PPUSH
37382: PPUSH
37383: PPUSH
37384: PPUSH
37385: PPUSH
37386: PPUSH
37387: PPUSH
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
// result := false ;
37393: LD_ADDR_VAR 0 3
37397: PUSH
37398: LD_INT 0
37400: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37401: LD_VAR 0 1
37405: NOT
37406: PUSH
37407: LD_VAR 0 1
37411: PPUSH
37412: CALL_OW 266
37416: PUSH
37417: LD_INT 32
37419: PUSH
37420: LD_INT 33
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: IN
37427: NOT
37428: OR
37429: IFFALSE 37433
// exit ;
37431: GO 38542
// nat := GetNation ( tower ) ;
37433: LD_ADDR_VAR 0 12
37437: PUSH
37438: LD_VAR 0 1
37442: PPUSH
37443: CALL_OW 248
37447: ST_TO_ADDR
// side := GetSide ( tower ) ;
37448: LD_ADDR_VAR 0 16
37452: PUSH
37453: LD_VAR 0 1
37457: PPUSH
37458: CALL_OW 255
37462: ST_TO_ADDR
// x := GetX ( tower ) ;
37463: LD_ADDR_VAR 0 10
37467: PUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 250
37477: ST_TO_ADDR
// y := GetY ( tower ) ;
37478: LD_ADDR_VAR 0 11
37482: PUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 251
37492: ST_TO_ADDR
// if not x or not y then
37493: LD_VAR 0 10
37497: NOT
37498: PUSH
37499: LD_VAR 0 11
37503: NOT
37504: OR
37505: IFFALSE 37509
// exit ;
37507: GO 38542
// weapon := 0 ;
37509: LD_ADDR_VAR 0 18
37513: PUSH
37514: LD_INT 0
37516: ST_TO_ADDR
// fac_list := [ ] ;
37517: LD_ADDR_VAR 0 17
37521: PUSH
37522: EMPTY
37523: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37524: LD_ADDR_VAR 0 6
37528: PUSH
37529: LD_VAR 0 1
37533: PPUSH
37534: CALL_OW 274
37538: PPUSH
37539: LD_VAR 0 2
37543: PPUSH
37544: LD_INT 0
37546: PPUSH
37547: CALL 35113 0 3
37551: PPUSH
37552: LD_INT 30
37554: PUSH
37555: LD_INT 3
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PPUSH
37562: CALL_OW 72
37566: ST_TO_ADDR
// if not factories then
37567: LD_VAR 0 6
37571: NOT
37572: IFFALSE 37576
// exit ;
37574: GO 38542
// for i in factories do
37576: LD_ADDR_VAR 0 8
37580: PUSH
37581: LD_VAR 0 6
37585: PUSH
37586: FOR_IN
37587: IFFALSE 37612
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37589: LD_ADDR_VAR 0 17
37593: PUSH
37594: LD_VAR 0 17
37598: PUSH
37599: LD_VAR 0 8
37603: PPUSH
37604: CALL_OW 478
37608: UNION
37609: ST_TO_ADDR
37610: GO 37586
37612: POP
37613: POP
// if not fac_list then
37614: LD_VAR 0 17
37618: NOT
37619: IFFALSE 37623
// exit ;
37621: GO 38542
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37623: LD_ADDR_VAR 0 5
37627: PUSH
37628: LD_INT 4
37630: PUSH
37631: LD_INT 5
37633: PUSH
37634: LD_INT 9
37636: PUSH
37637: LD_INT 10
37639: PUSH
37640: LD_INT 6
37642: PUSH
37643: LD_INT 7
37645: PUSH
37646: LD_INT 11
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 27
37660: PUSH
37661: LD_INT 28
37663: PUSH
37664: LD_INT 26
37666: PUSH
37667: LD_INT 30
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: PUSH
37676: LD_INT 43
37678: PUSH
37679: LD_INT 44
37681: PUSH
37682: LD_INT 46
37684: PUSH
37685: LD_INT 45
37687: PUSH
37688: LD_INT 47
37690: PUSH
37691: LD_INT 49
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: PUSH
37707: LD_VAR 0 12
37711: ARRAY
37712: ST_TO_ADDR
// list := list isect fac_list ;
37713: LD_ADDR_VAR 0 5
37717: PUSH
37718: LD_VAR 0 5
37722: PUSH
37723: LD_VAR 0 17
37727: ISECT
37728: ST_TO_ADDR
// if not list then
37729: LD_VAR 0 5
37733: NOT
37734: IFFALSE 37738
// exit ;
37736: GO 38542
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37738: LD_VAR 0 12
37742: PUSH
37743: LD_INT 3
37745: EQUAL
37746: PUSH
37747: LD_INT 49
37749: PUSH
37750: LD_VAR 0 5
37754: IN
37755: AND
37756: PUSH
37757: LD_INT 31
37759: PPUSH
37760: LD_VAR 0 16
37764: PPUSH
37765: CALL_OW 321
37769: PUSH
37770: LD_INT 2
37772: EQUAL
37773: AND
37774: IFFALSE 37834
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37776: LD_INT 22
37778: PUSH
37779: LD_VAR 0 16
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_INT 35
37790: PUSH
37791: LD_INT 49
37793: PUSH
37794: EMPTY
37795: LIST
37796: LIST
37797: PUSH
37798: LD_INT 91
37800: PUSH
37801: LD_VAR 0 1
37805: PUSH
37806: LD_INT 10
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: LIST
37818: PPUSH
37819: CALL_OW 69
37823: NOT
37824: IFFALSE 37834
// weapon := ru_time_lapser ;
37826: LD_ADDR_VAR 0 18
37830: PUSH
37831: LD_INT 49
37833: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37834: LD_VAR 0 12
37838: PUSH
37839: LD_INT 1
37841: PUSH
37842: LD_INT 2
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: IN
37849: PUSH
37850: LD_INT 11
37852: PUSH
37853: LD_VAR 0 5
37857: IN
37858: PUSH
37859: LD_INT 30
37861: PUSH
37862: LD_VAR 0 5
37866: IN
37867: OR
37868: AND
37869: PUSH
37870: LD_INT 6
37872: PPUSH
37873: LD_VAR 0 16
37877: PPUSH
37878: CALL_OW 321
37882: PUSH
37883: LD_INT 2
37885: EQUAL
37886: AND
37887: IFFALSE 38052
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37889: LD_INT 22
37891: PUSH
37892: LD_VAR 0 16
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 2
37903: PUSH
37904: LD_INT 35
37906: PUSH
37907: LD_INT 11
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: PUSH
37914: LD_INT 35
37916: PUSH
37917: LD_INT 30
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 91
37931: PUSH
37932: LD_VAR 0 1
37936: PUSH
37937: LD_INT 18
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: LIST
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 69
37954: NOT
37955: PUSH
37956: LD_INT 22
37958: PUSH
37959: LD_VAR 0 16
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 2
37970: PUSH
37971: LD_INT 30
37973: PUSH
37974: LD_INT 32
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 30
37983: PUSH
37984: LD_INT 33
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 91
37998: PUSH
37999: LD_VAR 0 1
38003: PUSH
38004: LD_INT 12
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: LIST
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: LIST
38016: PUSH
38017: EMPTY
38018: LIST
38019: PPUSH
38020: CALL_OW 69
38024: PUSH
38025: LD_INT 2
38027: GREATER
38028: AND
38029: IFFALSE 38052
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38031: LD_ADDR_VAR 0 18
38035: PUSH
38036: LD_INT 11
38038: PUSH
38039: LD_INT 30
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_VAR 0 12
38050: ARRAY
38051: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38052: LD_VAR 0 18
38056: NOT
38057: PUSH
38058: LD_INT 40
38060: PPUSH
38061: LD_VAR 0 16
38065: PPUSH
38066: CALL_OW 321
38070: PUSH
38071: LD_INT 2
38073: EQUAL
38074: AND
38075: PUSH
38076: LD_INT 7
38078: PUSH
38079: LD_VAR 0 5
38083: IN
38084: PUSH
38085: LD_INT 28
38087: PUSH
38088: LD_VAR 0 5
38092: IN
38093: OR
38094: PUSH
38095: LD_INT 45
38097: PUSH
38098: LD_VAR 0 5
38102: IN
38103: OR
38104: AND
38105: IFFALSE 38359
// begin hex := GetHexInfo ( x , y ) ;
38107: LD_ADDR_VAR 0 4
38111: PUSH
38112: LD_VAR 0 10
38116: PPUSH
38117: LD_VAR 0 11
38121: PPUSH
38122: CALL_OW 546
38126: ST_TO_ADDR
// if hex [ 1 ] then
38127: LD_VAR 0 4
38131: PUSH
38132: LD_INT 1
38134: ARRAY
38135: IFFALSE 38139
// exit ;
38137: GO 38542
// height := hex [ 2 ] ;
38139: LD_ADDR_VAR 0 15
38143: PUSH
38144: LD_VAR 0 4
38148: PUSH
38149: LD_INT 2
38151: ARRAY
38152: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38153: LD_ADDR_VAR 0 14
38157: PUSH
38158: LD_INT 0
38160: PUSH
38161: LD_INT 2
38163: PUSH
38164: LD_INT 3
38166: PUSH
38167: LD_INT 5
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: ST_TO_ADDR
// for i in tmp do
38176: LD_ADDR_VAR 0 8
38180: PUSH
38181: LD_VAR 0 14
38185: PUSH
38186: FOR_IN
38187: IFFALSE 38357
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38189: LD_ADDR_VAR 0 9
38193: PUSH
38194: LD_VAR 0 10
38198: PPUSH
38199: LD_VAR 0 8
38203: PPUSH
38204: LD_INT 5
38206: PPUSH
38207: CALL_OW 272
38211: PUSH
38212: LD_VAR 0 11
38216: PPUSH
38217: LD_VAR 0 8
38221: PPUSH
38222: LD_INT 5
38224: PPUSH
38225: CALL_OW 273
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38234: LD_VAR 0 9
38238: PUSH
38239: LD_INT 1
38241: ARRAY
38242: PPUSH
38243: LD_VAR 0 9
38247: PUSH
38248: LD_INT 2
38250: ARRAY
38251: PPUSH
38252: CALL_OW 488
38256: IFFALSE 38355
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38258: LD_ADDR_VAR 0 4
38262: PUSH
38263: LD_VAR 0 9
38267: PUSH
38268: LD_INT 1
38270: ARRAY
38271: PPUSH
38272: LD_VAR 0 9
38276: PUSH
38277: LD_INT 2
38279: ARRAY
38280: PPUSH
38281: CALL_OW 546
38285: ST_TO_ADDR
// if hex [ 1 ] then
38286: LD_VAR 0 4
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: IFFALSE 38298
// continue ;
38296: GO 38186
// h := hex [ 2 ] ;
38298: LD_ADDR_VAR 0 13
38302: PUSH
38303: LD_VAR 0 4
38307: PUSH
38308: LD_INT 2
38310: ARRAY
38311: ST_TO_ADDR
// if h + 7 < height then
38312: LD_VAR 0 13
38316: PUSH
38317: LD_INT 7
38319: PLUS
38320: PUSH
38321: LD_VAR 0 15
38325: LESS
38326: IFFALSE 38355
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38328: LD_ADDR_VAR 0 18
38332: PUSH
38333: LD_INT 7
38335: PUSH
38336: LD_INT 28
38338: PUSH
38339: LD_INT 45
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: PUSH
38347: LD_VAR 0 12
38351: ARRAY
38352: ST_TO_ADDR
// break ;
38353: GO 38357
// end ; end ; end ;
38355: GO 38186
38357: POP
38358: POP
// end ; if not weapon then
38359: LD_VAR 0 18
38363: NOT
38364: IFFALSE 38424
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38366: LD_ADDR_VAR 0 5
38370: PUSH
38371: LD_VAR 0 5
38375: PUSH
38376: LD_INT 11
38378: PUSH
38379: LD_INT 30
38381: PUSH
38382: LD_INT 49
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: LIST
38389: DIFF
38390: ST_TO_ADDR
// if not list then
38391: LD_VAR 0 5
38395: NOT
38396: IFFALSE 38400
// exit ;
38398: GO 38542
// weapon := list [ rand ( 1 , list ) ] ;
38400: LD_ADDR_VAR 0 18
38404: PUSH
38405: LD_VAR 0 5
38409: PUSH
38410: LD_INT 1
38412: PPUSH
38413: LD_VAR 0 5
38417: PPUSH
38418: CALL_OW 12
38422: ARRAY
38423: ST_TO_ADDR
// end ; if weapon then
38424: LD_VAR 0 18
38428: IFFALSE 38542
// begin tmp := CostOfWeapon ( weapon ) ;
38430: LD_ADDR_VAR 0 14
38434: PUSH
38435: LD_VAR 0 18
38439: PPUSH
38440: CALL_OW 451
38444: ST_TO_ADDR
// j := GetBase ( tower ) ;
38445: LD_ADDR_VAR 0 9
38449: PUSH
38450: LD_VAR 0 1
38454: PPUSH
38455: CALL_OW 274
38459: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38460: LD_VAR 0 9
38464: PPUSH
38465: LD_INT 1
38467: PPUSH
38468: CALL_OW 275
38472: PUSH
38473: LD_VAR 0 14
38477: PUSH
38478: LD_INT 1
38480: ARRAY
38481: GREATEREQUAL
38482: PUSH
38483: LD_VAR 0 9
38487: PPUSH
38488: LD_INT 2
38490: PPUSH
38491: CALL_OW 275
38495: PUSH
38496: LD_VAR 0 14
38500: PUSH
38501: LD_INT 2
38503: ARRAY
38504: GREATEREQUAL
38505: AND
38506: PUSH
38507: LD_VAR 0 9
38511: PPUSH
38512: LD_INT 3
38514: PPUSH
38515: CALL_OW 275
38519: PUSH
38520: LD_VAR 0 14
38524: PUSH
38525: LD_INT 3
38527: ARRAY
38528: GREATEREQUAL
38529: AND
38530: IFFALSE 38542
// result := weapon ;
38532: LD_ADDR_VAR 0 3
38536: PUSH
38537: LD_VAR 0 18
38541: ST_TO_ADDR
// end ; end ;
38542: LD_VAR 0 3
38546: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38547: LD_INT 0
38549: PPUSH
38550: PPUSH
// result := true ;
38551: LD_ADDR_VAR 0 3
38555: PUSH
38556: LD_INT 1
38558: ST_TO_ADDR
// if array1 = array2 then
38559: LD_VAR 0 1
38563: PUSH
38564: LD_VAR 0 2
38568: EQUAL
38569: IFFALSE 38629
// begin for i = 1 to array1 do
38571: LD_ADDR_VAR 0 4
38575: PUSH
38576: DOUBLE
38577: LD_INT 1
38579: DEC
38580: ST_TO_ADDR
38581: LD_VAR 0 1
38585: PUSH
38586: FOR_TO
38587: IFFALSE 38625
// if array1 [ i ] <> array2 [ i ] then
38589: LD_VAR 0 1
38593: PUSH
38594: LD_VAR 0 4
38598: ARRAY
38599: PUSH
38600: LD_VAR 0 2
38604: PUSH
38605: LD_VAR 0 4
38609: ARRAY
38610: NONEQUAL
38611: IFFALSE 38623
// begin result := false ;
38613: LD_ADDR_VAR 0 3
38617: PUSH
38618: LD_INT 0
38620: ST_TO_ADDR
// break ;
38621: GO 38625
// end ;
38623: GO 38586
38625: POP
38626: POP
// end else
38627: GO 38637
// result := false ;
38629: LD_ADDR_VAR 0 3
38633: PUSH
38634: LD_INT 0
38636: ST_TO_ADDR
// end ;
38637: LD_VAR 0 3
38641: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38642: LD_INT 0
38644: PPUSH
38645: PPUSH
// if not array1 or not array2 then
38646: LD_VAR 0 1
38650: NOT
38651: PUSH
38652: LD_VAR 0 2
38656: NOT
38657: OR
38658: IFFALSE 38662
// exit ;
38660: GO 38726
// result := true ;
38662: LD_ADDR_VAR 0 3
38666: PUSH
38667: LD_INT 1
38669: ST_TO_ADDR
// for i = 1 to array1 do
38670: LD_ADDR_VAR 0 4
38674: PUSH
38675: DOUBLE
38676: LD_INT 1
38678: DEC
38679: ST_TO_ADDR
38680: LD_VAR 0 1
38684: PUSH
38685: FOR_TO
38686: IFFALSE 38724
// if array1 [ i ] <> array2 [ i ] then
38688: LD_VAR 0 1
38692: PUSH
38693: LD_VAR 0 4
38697: ARRAY
38698: PUSH
38699: LD_VAR 0 2
38703: PUSH
38704: LD_VAR 0 4
38708: ARRAY
38709: NONEQUAL
38710: IFFALSE 38722
// begin result := false ;
38712: LD_ADDR_VAR 0 3
38716: PUSH
38717: LD_INT 0
38719: ST_TO_ADDR
// break ;
38720: GO 38724
// end ;
38722: GO 38685
38724: POP
38725: POP
// end ;
38726: LD_VAR 0 3
38730: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38731: LD_INT 0
38733: PPUSH
38734: PPUSH
38735: PPUSH
// pom := GetBase ( fac ) ;
38736: LD_ADDR_VAR 0 5
38740: PUSH
38741: LD_VAR 0 1
38745: PPUSH
38746: CALL_OW 274
38750: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38751: LD_ADDR_VAR 0 4
38755: PUSH
38756: LD_VAR 0 2
38760: PUSH
38761: LD_INT 1
38763: ARRAY
38764: PPUSH
38765: LD_VAR 0 2
38769: PUSH
38770: LD_INT 2
38772: ARRAY
38773: PPUSH
38774: LD_VAR 0 2
38778: PUSH
38779: LD_INT 3
38781: ARRAY
38782: PPUSH
38783: LD_VAR 0 2
38787: PUSH
38788: LD_INT 4
38790: ARRAY
38791: PPUSH
38792: CALL_OW 449
38796: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_VAR 0 5
38806: PPUSH
38807: LD_INT 1
38809: PPUSH
38810: CALL_OW 275
38814: PUSH
38815: LD_VAR 0 4
38819: PUSH
38820: LD_INT 1
38822: ARRAY
38823: GREATEREQUAL
38824: PUSH
38825: LD_VAR 0 5
38829: PPUSH
38830: LD_INT 2
38832: PPUSH
38833: CALL_OW 275
38837: PUSH
38838: LD_VAR 0 4
38842: PUSH
38843: LD_INT 2
38845: ARRAY
38846: GREATEREQUAL
38847: AND
38848: PUSH
38849: LD_VAR 0 5
38853: PPUSH
38854: LD_INT 3
38856: PPUSH
38857: CALL_OW 275
38861: PUSH
38862: LD_VAR 0 4
38866: PUSH
38867: LD_INT 3
38869: ARRAY
38870: GREATEREQUAL
38871: AND
38872: ST_TO_ADDR
// end ;
38873: LD_VAR 0 3
38877: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38878: LD_INT 0
38880: PPUSH
38881: PPUSH
38882: PPUSH
38883: PPUSH
// pom := GetBase ( building ) ;
38884: LD_ADDR_VAR 0 3
38888: PUSH
38889: LD_VAR 0 1
38893: PPUSH
38894: CALL_OW 274
38898: ST_TO_ADDR
// if not pom then
38899: LD_VAR 0 3
38903: NOT
38904: IFFALSE 38908
// exit ;
38906: GO 39078
// btype := GetBType ( building ) ;
38908: LD_ADDR_VAR 0 5
38912: PUSH
38913: LD_VAR 0 1
38917: PPUSH
38918: CALL_OW 266
38922: ST_TO_ADDR
// if btype = b_armoury then
38923: LD_VAR 0 5
38927: PUSH
38928: LD_INT 4
38930: EQUAL
38931: IFFALSE 38941
// btype := b_barracks ;
38933: LD_ADDR_VAR 0 5
38937: PUSH
38938: LD_INT 5
38940: ST_TO_ADDR
// if btype = b_depot then
38941: LD_VAR 0 5
38945: PUSH
38946: LD_INT 0
38948: EQUAL
38949: IFFALSE 38959
// btype := b_warehouse ;
38951: LD_ADDR_VAR 0 5
38955: PUSH
38956: LD_INT 1
38958: ST_TO_ADDR
// if btype = b_workshop then
38959: LD_VAR 0 5
38963: PUSH
38964: LD_INT 2
38966: EQUAL
38967: IFFALSE 38977
// btype := b_factory ;
38969: LD_ADDR_VAR 0 5
38973: PUSH
38974: LD_INT 3
38976: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38977: LD_ADDR_VAR 0 4
38981: PUSH
38982: LD_VAR 0 5
38986: PPUSH
38987: LD_VAR 0 1
38991: PPUSH
38992: CALL_OW 248
38996: PPUSH
38997: CALL_OW 450
39001: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39002: LD_ADDR_VAR 0 2
39006: PUSH
39007: LD_VAR 0 3
39011: PPUSH
39012: LD_INT 1
39014: PPUSH
39015: CALL_OW 275
39019: PUSH
39020: LD_VAR 0 4
39024: PUSH
39025: LD_INT 1
39027: ARRAY
39028: GREATEREQUAL
39029: PUSH
39030: LD_VAR 0 3
39034: PPUSH
39035: LD_INT 2
39037: PPUSH
39038: CALL_OW 275
39042: PUSH
39043: LD_VAR 0 4
39047: PUSH
39048: LD_INT 2
39050: ARRAY
39051: GREATEREQUAL
39052: AND
39053: PUSH
39054: LD_VAR 0 3
39058: PPUSH
39059: LD_INT 3
39061: PPUSH
39062: CALL_OW 275
39066: PUSH
39067: LD_VAR 0 4
39071: PUSH
39072: LD_INT 3
39074: ARRAY
39075: GREATEREQUAL
39076: AND
39077: ST_TO_ADDR
// end ;
39078: LD_VAR 0 2
39082: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39083: LD_INT 0
39085: PPUSH
39086: PPUSH
39087: PPUSH
// pom := GetBase ( building ) ;
39088: LD_ADDR_VAR 0 4
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 274
39102: ST_TO_ADDR
// if not pom then
39103: LD_VAR 0 4
39107: NOT
39108: IFFALSE 39112
// exit ;
39110: GO 39213
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39112: LD_ADDR_VAR 0 5
39116: PUSH
39117: LD_VAR 0 2
39121: PPUSH
39122: LD_VAR 0 1
39126: PPUSH
39127: CALL_OW 248
39131: PPUSH
39132: CALL_OW 450
39136: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39137: LD_ADDR_VAR 0 3
39141: PUSH
39142: LD_VAR 0 4
39146: PPUSH
39147: LD_INT 1
39149: PPUSH
39150: CALL_OW 275
39154: PUSH
39155: LD_VAR 0 5
39159: PUSH
39160: LD_INT 1
39162: ARRAY
39163: GREATEREQUAL
39164: PUSH
39165: LD_VAR 0 4
39169: PPUSH
39170: LD_INT 2
39172: PPUSH
39173: CALL_OW 275
39177: PUSH
39178: LD_VAR 0 5
39182: PUSH
39183: LD_INT 2
39185: ARRAY
39186: GREATEREQUAL
39187: AND
39188: PUSH
39189: LD_VAR 0 4
39193: PPUSH
39194: LD_INT 3
39196: PPUSH
39197: CALL_OW 275
39201: PUSH
39202: LD_VAR 0 5
39206: PUSH
39207: LD_INT 3
39209: ARRAY
39210: GREATEREQUAL
39211: AND
39212: ST_TO_ADDR
// end ;
39213: LD_VAR 0 3
39217: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39218: LD_INT 0
39220: PPUSH
39221: PPUSH
39222: PPUSH
39223: PPUSH
39224: PPUSH
39225: PPUSH
39226: PPUSH
39227: PPUSH
39228: PPUSH
39229: PPUSH
39230: PPUSH
// result := false ;
39231: LD_ADDR_VAR 0 8
39235: PUSH
39236: LD_INT 0
39238: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39239: LD_VAR 0 5
39243: NOT
39244: PUSH
39245: LD_VAR 0 1
39249: NOT
39250: OR
39251: PUSH
39252: LD_VAR 0 2
39256: NOT
39257: OR
39258: PUSH
39259: LD_VAR 0 3
39263: NOT
39264: OR
39265: IFFALSE 39269
// exit ;
39267: GO 40083
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39269: LD_ADDR_VAR 0 14
39273: PUSH
39274: LD_VAR 0 1
39278: PPUSH
39279: LD_VAR 0 2
39283: PPUSH
39284: LD_VAR 0 3
39288: PPUSH
39289: LD_VAR 0 4
39293: PPUSH
39294: LD_VAR 0 5
39298: PUSH
39299: LD_INT 1
39301: ARRAY
39302: PPUSH
39303: CALL_OW 248
39307: PPUSH
39308: LD_INT 0
39310: PPUSH
39311: CALL 41316 0 6
39315: ST_TO_ADDR
// if not hexes then
39316: LD_VAR 0 14
39320: NOT
39321: IFFALSE 39325
// exit ;
39323: GO 40083
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39325: LD_ADDR_VAR 0 17
39329: PUSH
39330: LD_VAR 0 5
39334: PPUSH
39335: LD_INT 22
39337: PUSH
39338: LD_VAR 0 13
39342: PPUSH
39343: CALL_OW 255
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: LD_INT 30
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 30
39367: PUSH
39368: LD_INT 1
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: PPUSH
39384: CALL_OW 72
39388: ST_TO_ADDR
// for i = 1 to hexes do
39389: LD_ADDR_VAR 0 9
39393: PUSH
39394: DOUBLE
39395: LD_INT 1
39397: DEC
39398: ST_TO_ADDR
39399: LD_VAR 0 14
39403: PUSH
39404: FOR_TO
39405: IFFALSE 40081
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39407: LD_ADDR_VAR 0 13
39411: PUSH
39412: LD_VAR 0 14
39416: PUSH
39417: LD_VAR 0 9
39421: ARRAY
39422: PUSH
39423: LD_INT 1
39425: ARRAY
39426: PPUSH
39427: LD_VAR 0 14
39431: PUSH
39432: LD_VAR 0 9
39436: ARRAY
39437: PUSH
39438: LD_INT 2
39440: ARRAY
39441: PPUSH
39442: CALL_OW 428
39446: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39447: LD_VAR 0 14
39451: PUSH
39452: LD_VAR 0 9
39456: ARRAY
39457: PUSH
39458: LD_INT 1
39460: ARRAY
39461: PPUSH
39462: LD_VAR 0 14
39466: PUSH
39467: LD_VAR 0 9
39471: ARRAY
39472: PUSH
39473: LD_INT 2
39475: ARRAY
39476: PPUSH
39477: CALL_OW 351
39481: PUSH
39482: LD_VAR 0 14
39486: PUSH
39487: LD_VAR 0 9
39491: ARRAY
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: PPUSH
39497: LD_VAR 0 14
39501: PUSH
39502: LD_VAR 0 9
39506: ARRAY
39507: PUSH
39508: LD_INT 2
39510: ARRAY
39511: PPUSH
39512: CALL_OW 488
39516: NOT
39517: OR
39518: PUSH
39519: LD_VAR 0 13
39523: PPUSH
39524: CALL_OW 247
39528: PUSH
39529: LD_INT 3
39531: EQUAL
39532: OR
39533: IFFALSE 39539
// exit ;
39535: POP
39536: POP
39537: GO 40083
// if not tmp then
39539: LD_VAR 0 13
39543: NOT
39544: IFFALSE 39548
// continue ;
39546: GO 39404
// result := true ;
39548: LD_ADDR_VAR 0 8
39552: PUSH
39553: LD_INT 1
39555: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39556: LD_VAR 0 6
39560: PUSH
39561: LD_VAR 0 13
39565: PPUSH
39566: CALL_OW 247
39570: PUSH
39571: LD_INT 2
39573: EQUAL
39574: AND
39575: PUSH
39576: LD_VAR 0 13
39580: PPUSH
39581: CALL_OW 263
39585: PUSH
39586: LD_INT 1
39588: EQUAL
39589: AND
39590: IFFALSE 39754
// begin if IsDrivenBy ( tmp ) then
39592: LD_VAR 0 13
39596: PPUSH
39597: CALL_OW 311
39601: IFFALSE 39605
// continue ;
39603: GO 39404
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39605: LD_VAR 0 6
39609: PPUSH
39610: LD_INT 3
39612: PUSH
39613: LD_INT 60
39615: PUSH
39616: EMPTY
39617: LIST
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 3
39625: PUSH
39626: LD_INT 55
39628: PUSH
39629: EMPTY
39630: LIST
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: EMPTY
39637: LIST
39638: LIST
39639: PPUSH
39640: CALL_OW 72
39644: IFFALSE 39752
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39646: LD_ADDR_VAR 0 18
39650: PUSH
39651: LD_VAR 0 6
39655: PPUSH
39656: LD_INT 3
39658: PUSH
39659: LD_INT 60
39661: PUSH
39662: EMPTY
39663: LIST
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 3
39671: PUSH
39672: LD_INT 55
39674: PUSH
39675: EMPTY
39676: LIST
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PPUSH
39686: CALL_OW 72
39690: PUSH
39691: LD_INT 1
39693: ARRAY
39694: ST_TO_ADDR
// if IsInUnit ( driver ) then
39695: LD_VAR 0 18
39699: PPUSH
39700: CALL_OW 310
39704: IFFALSE 39715
// ComExit ( driver ) ;
39706: LD_VAR 0 18
39710: PPUSH
39711: CALL 65095 0 1
// AddComEnterUnit ( driver , tmp ) ;
39715: LD_VAR 0 18
39719: PPUSH
39720: LD_VAR 0 13
39724: PPUSH
39725: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39729: LD_VAR 0 18
39733: PPUSH
39734: LD_VAR 0 7
39738: PPUSH
39739: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39743: LD_VAR 0 18
39747: PPUSH
39748: CALL_OW 181
// end ; continue ;
39752: GO 39404
// end ; if not cleaners or not tmp in cleaners then
39754: LD_VAR 0 6
39758: NOT
39759: PUSH
39760: LD_VAR 0 13
39764: PUSH
39765: LD_VAR 0 6
39769: IN
39770: NOT
39771: OR
39772: IFFALSE 40079
// begin if dep then
39774: LD_VAR 0 17
39778: IFFALSE 39914
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39780: LD_ADDR_VAR 0 16
39784: PUSH
39785: LD_VAR 0 17
39789: PUSH
39790: LD_INT 1
39792: ARRAY
39793: PPUSH
39794: CALL_OW 250
39798: PPUSH
39799: LD_VAR 0 17
39803: PUSH
39804: LD_INT 1
39806: ARRAY
39807: PPUSH
39808: CALL_OW 254
39812: PPUSH
39813: LD_INT 5
39815: PPUSH
39816: CALL_OW 272
39820: PUSH
39821: LD_VAR 0 17
39825: PUSH
39826: LD_INT 1
39828: ARRAY
39829: PPUSH
39830: CALL_OW 251
39834: PPUSH
39835: LD_VAR 0 17
39839: PUSH
39840: LD_INT 1
39842: ARRAY
39843: PPUSH
39844: CALL_OW 254
39848: PPUSH
39849: LD_INT 5
39851: PPUSH
39852: CALL_OW 273
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39861: LD_VAR 0 16
39865: PUSH
39866: LD_INT 1
39868: ARRAY
39869: PPUSH
39870: LD_VAR 0 16
39874: PUSH
39875: LD_INT 2
39877: ARRAY
39878: PPUSH
39879: CALL_OW 488
39883: IFFALSE 39914
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39885: LD_VAR 0 13
39889: PPUSH
39890: LD_VAR 0 16
39894: PUSH
39895: LD_INT 1
39897: ARRAY
39898: PPUSH
39899: LD_VAR 0 16
39903: PUSH
39904: LD_INT 2
39906: ARRAY
39907: PPUSH
39908: CALL_OW 111
// continue ;
39912: GO 39404
// end ; end ; r := GetDir ( tmp ) ;
39914: LD_ADDR_VAR 0 15
39918: PUSH
39919: LD_VAR 0 13
39923: PPUSH
39924: CALL_OW 254
39928: ST_TO_ADDR
// if r = 5 then
39929: LD_VAR 0 15
39933: PUSH
39934: LD_INT 5
39936: EQUAL
39937: IFFALSE 39947
// r := 0 ;
39939: LD_ADDR_VAR 0 15
39943: PUSH
39944: LD_INT 0
39946: ST_TO_ADDR
// for j = r to 5 do
39947: LD_ADDR_VAR 0 10
39951: PUSH
39952: DOUBLE
39953: LD_VAR 0 15
39957: DEC
39958: ST_TO_ADDR
39959: LD_INT 5
39961: PUSH
39962: FOR_TO
39963: IFFALSE 40077
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39965: LD_ADDR_VAR 0 11
39969: PUSH
39970: LD_VAR 0 13
39974: PPUSH
39975: CALL_OW 250
39979: PPUSH
39980: LD_VAR 0 10
39984: PPUSH
39985: LD_INT 2
39987: PPUSH
39988: CALL_OW 272
39992: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39993: LD_ADDR_VAR 0 12
39997: PUSH
39998: LD_VAR 0 13
40002: PPUSH
40003: CALL_OW 251
40007: PPUSH
40008: LD_VAR 0 10
40012: PPUSH
40013: LD_INT 2
40015: PPUSH
40016: CALL_OW 273
40020: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40021: LD_VAR 0 11
40025: PPUSH
40026: LD_VAR 0 12
40030: PPUSH
40031: CALL_OW 488
40035: PUSH
40036: LD_VAR 0 11
40040: PPUSH
40041: LD_VAR 0 12
40045: PPUSH
40046: CALL_OW 428
40050: NOT
40051: AND
40052: IFFALSE 40075
// begin ComMoveXY ( tmp , _x , _y ) ;
40054: LD_VAR 0 13
40058: PPUSH
40059: LD_VAR 0 11
40063: PPUSH
40064: LD_VAR 0 12
40068: PPUSH
40069: CALL_OW 111
// break ;
40073: GO 40077
// end ; end ;
40075: GO 39962
40077: POP
40078: POP
// end ; end ;
40079: GO 39404
40081: POP
40082: POP
// end ;
40083: LD_VAR 0 8
40087: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40088: LD_INT 0
40090: PPUSH
// result := true ;
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_INT 1
40098: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40099: LD_VAR 0 2
40103: PUSH
40104: LD_INT 24
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40118
40110: LD_INT 33
40112: DOUBLE
40113: EQUAL
40114: IFTRUE 40118
40116: GO 40143
40118: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40119: LD_ADDR_VAR 0 3
40123: PUSH
40124: LD_INT 32
40126: PPUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 321
40136: PUSH
40137: LD_INT 2
40139: EQUAL
40140: ST_TO_ADDR
40141: GO 40459
40143: LD_INT 20
40145: DOUBLE
40146: EQUAL
40147: IFTRUE 40151
40149: GO 40176
40151: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40152: LD_ADDR_VAR 0 3
40156: PUSH
40157: LD_INT 6
40159: PPUSH
40160: LD_VAR 0 1
40164: PPUSH
40165: CALL_OW 321
40169: PUSH
40170: LD_INT 2
40172: EQUAL
40173: ST_TO_ADDR
40174: GO 40459
40176: LD_INT 22
40178: DOUBLE
40179: EQUAL
40180: IFTRUE 40190
40182: LD_INT 36
40184: DOUBLE
40185: EQUAL
40186: IFTRUE 40190
40188: GO 40215
40190: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40191: LD_ADDR_VAR 0 3
40195: PUSH
40196: LD_INT 15
40198: PPUSH
40199: LD_VAR 0 1
40203: PPUSH
40204: CALL_OW 321
40208: PUSH
40209: LD_INT 2
40211: EQUAL
40212: ST_TO_ADDR
40213: GO 40459
40215: LD_INT 30
40217: DOUBLE
40218: EQUAL
40219: IFTRUE 40223
40221: GO 40248
40223: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40224: LD_ADDR_VAR 0 3
40228: PUSH
40229: LD_INT 20
40231: PPUSH
40232: LD_VAR 0 1
40236: PPUSH
40237: CALL_OW 321
40241: PUSH
40242: LD_INT 2
40244: EQUAL
40245: ST_TO_ADDR
40246: GO 40459
40248: LD_INT 28
40250: DOUBLE
40251: EQUAL
40252: IFTRUE 40262
40254: LD_INT 21
40256: DOUBLE
40257: EQUAL
40258: IFTRUE 40262
40260: GO 40287
40262: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40263: LD_ADDR_VAR 0 3
40267: PUSH
40268: LD_INT 21
40270: PPUSH
40271: LD_VAR 0 1
40275: PPUSH
40276: CALL_OW 321
40280: PUSH
40281: LD_INT 2
40283: EQUAL
40284: ST_TO_ADDR
40285: GO 40459
40287: LD_INT 16
40289: DOUBLE
40290: EQUAL
40291: IFTRUE 40295
40293: GO 40320
40295: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40296: LD_ADDR_VAR 0 3
40300: PUSH
40301: LD_INT 84
40303: PPUSH
40304: LD_VAR 0 1
40308: PPUSH
40309: CALL_OW 321
40313: PUSH
40314: LD_INT 2
40316: EQUAL
40317: ST_TO_ADDR
40318: GO 40459
40320: LD_INT 19
40322: DOUBLE
40323: EQUAL
40324: IFTRUE 40334
40326: LD_INT 23
40328: DOUBLE
40329: EQUAL
40330: IFTRUE 40334
40332: GO 40359
40334: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40335: LD_ADDR_VAR 0 3
40339: PUSH
40340: LD_INT 83
40342: PPUSH
40343: LD_VAR 0 1
40347: PPUSH
40348: CALL_OW 321
40352: PUSH
40353: LD_INT 2
40355: EQUAL
40356: ST_TO_ADDR
40357: GO 40459
40359: LD_INT 17
40361: DOUBLE
40362: EQUAL
40363: IFTRUE 40367
40365: GO 40392
40367: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40368: LD_ADDR_VAR 0 3
40372: PUSH
40373: LD_INT 39
40375: PPUSH
40376: LD_VAR 0 1
40380: PPUSH
40381: CALL_OW 321
40385: PUSH
40386: LD_INT 2
40388: EQUAL
40389: ST_TO_ADDR
40390: GO 40459
40392: LD_INT 18
40394: DOUBLE
40395: EQUAL
40396: IFTRUE 40400
40398: GO 40425
40400: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40401: LD_ADDR_VAR 0 3
40405: PUSH
40406: LD_INT 40
40408: PPUSH
40409: LD_VAR 0 1
40413: PPUSH
40414: CALL_OW 321
40418: PUSH
40419: LD_INT 2
40421: EQUAL
40422: ST_TO_ADDR
40423: GO 40459
40425: LD_INT 27
40427: DOUBLE
40428: EQUAL
40429: IFTRUE 40433
40431: GO 40458
40433: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40434: LD_ADDR_VAR 0 3
40438: PUSH
40439: LD_INT 35
40441: PPUSH
40442: LD_VAR 0 1
40446: PPUSH
40447: CALL_OW 321
40451: PUSH
40452: LD_INT 2
40454: EQUAL
40455: ST_TO_ADDR
40456: GO 40459
40458: POP
// end ;
40459: LD_VAR 0 3
40463: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40464: LD_INT 0
40466: PPUSH
40467: PPUSH
40468: PPUSH
40469: PPUSH
40470: PPUSH
40471: PPUSH
40472: PPUSH
40473: PPUSH
40474: PPUSH
40475: PPUSH
40476: PPUSH
// result := false ;
40477: LD_ADDR_VAR 0 6
40481: PUSH
40482: LD_INT 0
40484: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40485: LD_VAR 0 1
40489: NOT
40490: PUSH
40491: LD_VAR 0 1
40495: PPUSH
40496: CALL_OW 266
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: IN
40511: NOT
40512: OR
40513: PUSH
40514: LD_VAR 0 2
40518: NOT
40519: OR
40520: PUSH
40521: LD_VAR 0 5
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 2
40534: PUSH
40535: LD_INT 3
40537: PUSH
40538: LD_INT 4
40540: PUSH
40541: LD_INT 5
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: IN
40552: NOT
40553: OR
40554: PUSH
40555: LD_VAR 0 3
40559: PPUSH
40560: LD_VAR 0 4
40564: PPUSH
40565: CALL_OW 488
40569: NOT
40570: OR
40571: IFFALSE 40575
// exit ;
40573: GO 41311
// side := GetSide ( depot ) ;
40575: LD_ADDR_VAR 0 9
40579: PUSH
40580: LD_VAR 0 1
40584: PPUSH
40585: CALL_OW 255
40589: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40590: LD_VAR 0 9
40594: PPUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: CALL 40088 0 2
40604: NOT
40605: IFFALSE 40609
// exit ;
40607: GO 41311
// pom := GetBase ( depot ) ;
40609: LD_ADDR_VAR 0 10
40613: PUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: CALL_OW 274
40623: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40624: LD_ADDR_VAR 0 11
40628: PUSH
40629: LD_VAR 0 2
40633: PPUSH
40634: LD_VAR 0 1
40638: PPUSH
40639: CALL_OW 248
40643: PPUSH
40644: CALL_OW 450
40648: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40649: LD_VAR 0 10
40653: PPUSH
40654: LD_INT 1
40656: PPUSH
40657: CALL_OW 275
40661: PUSH
40662: LD_VAR 0 11
40666: PUSH
40667: LD_INT 1
40669: ARRAY
40670: GREATEREQUAL
40671: PUSH
40672: LD_VAR 0 10
40676: PPUSH
40677: LD_INT 2
40679: PPUSH
40680: CALL_OW 275
40684: PUSH
40685: LD_VAR 0 11
40689: PUSH
40690: LD_INT 2
40692: ARRAY
40693: GREATEREQUAL
40694: AND
40695: PUSH
40696: LD_VAR 0 10
40700: PPUSH
40701: LD_INT 3
40703: PPUSH
40704: CALL_OW 275
40708: PUSH
40709: LD_VAR 0 11
40713: PUSH
40714: LD_INT 3
40716: ARRAY
40717: GREATEREQUAL
40718: AND
40719: NOT
40720: IFFALSE 40724
// exit ;
40722: GO 41311
// if GetBType ( depot ) = b_depot then
40724: LD_VAR 0 1
40728: PPUSH
40729: CALL_OW 266
40733: PUSH
40734: LD_INT 0
40736: EQUAL
40737: IFFALSE 40749
// dist := 28 else
40739: LD_ADDR_VAR 0 14
40743: PUSH
40744: LD_INT 28
40746: ST_TO_ADDR
40747: GO 40757
// dist := 36 ;
40749: LD_ADDR_VAR 0 14
40753: PUSH
40754: LD_INT 36
40756: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40757: LD_VAR 0 1
40761: PPUSH
40762: LD_VAR 0 3
40766: PPUSH
40767: LD_VAR 0 4
40771: PPUSH
40772: CALL_OW 297
40776: PUSH
40777: LD_VAR 0 14
40781: GREATER
40782: IFFALSE 40786
// exit ;
40784: GO 41311
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40786: LD_ADDR_VAR 0 12
40790: PUSH
40791: LD_VAR 0 2
40795: PPUSH
40796: LD_VAR 0 3
40800: PPUSH
40801: LD_VAR 0 4
40805: PPUSH
40806: LD_VAR 0 5
40810: PPUSH
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 248
40820: PPUSH
40821: LD_INT 0
40823: PPUSH
40824: CALL 41316 0 6
40828: ST_TO_ADDR
// if not hexes then
40829: LD_VAR 0 12
40833: NOT
40834: IFFALSE 40838
// exit ;
40836: GO 41311
// hex := GetHexInfo ( x , y ) ;
40838: LD_ADDR_VAR 0 15
40842: PUSH
40843: LD_VAR 0 3
40847: PPUSH
40848: LD_VAR 0 4
40852: PPUSH
40853: CALL_OW 546
40857: ST_TO_ADDR
// if hex [ 1 ] then
40858: LD_VAR 0 15
40862: PUSH
40863: LD_INT 1
40865: ARRAY
40866: IFFALSE 40870
// exit ;
40868: GO 41311
// height := hex [ 2 ] ;
40870: LD_ADDR_VAR 0 13
40874: PUSH
40875: LD_VAR 0 15
40879: PUSH
40880: LD_INT 2
40882: ARRAY
40883: ST_TO_ADDR
// for i = 1 to hexes do
40884: LD_ADDR_VAR 0 7
40888: PUSH
40889: DOUBLE
40890: LD_INT 1
40892: DEC
40893: ST_TO_ADDR
40894: LD_VAR 0 12
40898: PUSH
40899: FOR_TO
40900: IFFALSE 41230
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40902: LD_VAR 0 12
40906: PUSH
40907: LD_VAR 0 7
40911: ARRAY
40912: PUSH
40913: LD_INT 1
40915: ARRAY
40916: PPUSH
40917: LD_VAR 0 12
40921: PUSH
40922: LD_VAR 0 7
40926: ARRAY
40927: PUSH
40928: LD_INT 2
40930: ARRAY
40931: PPUSH
40932: CALL_OW 488
40936: NOT
40937: PUSH
40938: LD_VAR 0 12
40942: PUSH
40943: LD_VAR 0 7
40947: ARRAY
40948: PUSH
40949: LD_INT 1
40951: ARRAY
40952: PPUSH
40953: LD_VAR 0 12
40957: PUSH
40958: LD_VAR 0 7
40962: ARRAY
40963: PUSH
40964: LD_INT 2
40966: ARRAY
40967: PPUSH
40968: CALL_OW 428
40972: PUSH
40973: LD_INT 0
40975: GREATER
40976: OR
40977: PUSH
40978: LD_VAR 0 12
40982: PUSH
40983: LD_VAR 0 7
40987: ARRAY
40988: PUSH
40989: LD_INT 1
40991: ARRAY
40992: PPUSH
40993: LD_VAR 0 12
40997: PUSH
40998: LD_VAR 0 7
41002: ARRAY
41003: PUSH
41004: LD_INT 2
41006: ARRAY
41007: PPUSH
41008: CALL_OW 351
41012: OR
41013: IFFALSE 41019
// exit ;
41015: POP
41016: POP
41017: GO 41311
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41019: LD_ADDR_VAR 0 8
41023: PUSH
41024: LD_VAR 0 12
41028: PUSH
41029: LD_VAR 0 7
41033: ARRAY
41034: PUSH
41035: LD_INT 1
41037: ARRAY
41038: PPUSH
41039: LD_VAR 0 12
41043: PUSH
41044: LD_VAR 0 7
41048: ARRAY
41049: PUSH
41050: LD_INT 2
41052: ARRAY
41053: PPUSH
41054: CALL_OW 546
41058: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41059: LD_VAR 0 8
41063: PUSH
41064: LD_INT 1
41066: ARRAY
41067: PUSH
41068: LD_VAR 0 8
41072: PUSH
41073: LD_INT 2
41075: ARRAY
41076: PUSH
41077: LD_VAR 0 13
41081: PUSH
41082: LD_INT 2
41084: PLUS
41085: GREATER
41086: OR
41087: PUSH
41088: LD_VAR 0 8
41092: PUSH
41093: LD_INT 2
41095: ARRAY
41096: PUSH
41097: LD_VAR 0 13
41101: PUSH
41102: LD_INT 2
41104: MINUS
41105: LESS
41106: OR
41107: PUSH
41108: LD_VAR 0 8
41112: PUSH
41113: LD_INT 3
41115: ARRAY
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: LD_INT 8
41122: PUSH
41123: LD_INT 9
41125: PUSH
41126: LD_INT 10
41128: PUSH
41129: LD_INT 11
41131: PUSH
41132: LD_INT 12
41134: PUSH
41135: LD_INT 13
41137: PUSH
41138: LD_INT 16
41140: PUSH
41141: LD_INT 17
41143: PUSH
41144: LD_INT 18
41146: PUSH
41147: LD_INT 19
41149: PUSH
41150: LD_INT 20
41152: PUSH
41153: LD_INT 21
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: IN
41171: NOT
41172: OR
41173: PUSH
41174: LD_VAR 0 8
41178: PUSH
41179: LD_INT 5
41181: ARRAY
41182: NOT
41183: OR
41184: PUSH
41185: LD_VAR 0 8
41189: PUSH
41190: LD_INT 6
41192: ARRAY
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 2
41199: PUSH
41200: LD_INT 7
41202: PUSH
41203: LD_INT 9
41205: PUSH
41206: LD_INT 10
41208: PUSH
41209: LD_INT 11
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: IN
41220: NOT
41221: OR
41222: IFFALSE 41228
// exit ;
41224: POP
41225: POP
41226: GO 41311
// end ;
41228: GO 40899
41230: POP
41231: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41232: LD_VAR 0 9
41236: PPUSH
41237: LD_VAR 0 3
41241: PPUSH
41242: LD_VAR 0 4
41246: PPUSH
41247: LD_INT 20
41249: PPUSH
41250: CALL 33263 0 4
41254: PUSH
41255: LD_INT 4
41257: ARRAY
41258: IFFALSE 41262
// exit ;
41260: GO 41311
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41262: LD_VAR 0 2
41266: PUSH
41267: LD_INT 29
41269: PUSH
41270: LD_INT 30
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: IN
41277: PUSH
41278: LD_VAR 0 3
41282: PPUSH
41283: LD_VAR 0 4
41287: PPUSH
41288: LD_VAR 0 9
41292: PPUSH
41293: CALL_OW 440
41297: NOT
41298: AND
41299: IFFALSE 41303
// exit ;
41301: GO 41311
// result := true ;
41303: LD_ADDR_VAR 0 6
41307: PUSH
41308: LD_INT 1
41310: ST_TO_ADDR
// end ;
41311: LD_VAR 0 6
41315: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41316: LD_INT 0
41318: PPUSH
41319: PPUSH
41320: PPUSH
41321: PPUSH
41322: PPUSH
41323: PPUSH
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
41330: PPUSH
41331: PPUSH
41332: PPUSH
41333: PPUSH
41334: PPUSH
41335: PPUSH
41336: PPUSH
41337: PPUSH
41338: PPUSH
41339: PPUSH
41340: PPUSH
41341: PPUSH
41342: PPUSH
41343: PPUSH
41344: PPUSH
41345: PPUSH
41346: PPUSH
41347: PPUSH
41348: PPUSH
41349: PPUSH
41350: PPUSH
41351: PPUSH
41352: PPUSH
41353: PPUSH
41354: PPUSH
41355: PPUSH
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
41360: PPUSH
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
41365: PPUSH
41366: PPUSH
41367: PPUSH
41368: PPUSH
41369: PPUSH
41370: PPUSH
41371: PPUSH
41372: PPUSH
41373: PPUSH
41374: PPUSH
41375: PPUSH
// result = [ ] ;
41376: LD_ADDR_VAR 0 7
41380: PUSH
41381: EMPTY
41382: ST_TO_ADDR
// temp_list = [ ] ;
41383: LD_ADDR_VAR 0 9
41387: PUSH
41388: EMPTY
41389: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41390: LD_VAR 0 4
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: LD_INT 2
41403: PUSH
41404: LD_INT 3
41406: PUSH
41407: LD_INT 4
41409: PUSH
41410: LD_INT 5
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: IN
41421: NOT
41422: PUSH
41423: LD_VAR 0 1
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: IN
41438: PUSH
41439: LD_VAR 0 5
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 3
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: LIST
41457: IN
41458: NOT
41459: AND
41460: OR
41461: IFFALSE 41465
// exit ;
41463: GO 59856
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41465: LD_VAR 0 1
41469: PUSH
41470: LD_INT 6
41472: PUSH
41473: LD_INT 7
41475: PUSH
41476: LD_INT 8
41478: PUSH
41479: LD_INT 13
41481: PUSH
41482: LD_INT 12
41484: PUSH
41485: LD_INT 15
41487: PUSH
41488: LD_INT 11
41490: PUSH
41491: LD_INT 14
41493: PUSH
41494: LD_INT 10
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: IN
41508: IFFALSE 41518
// btype = b_lab ;
41510: LD_ADDR_VAR 0 1
41514: PUSH
41515: LD_INT 6
41517: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41518: LD_VAR 0 6
41522: PUSH
41523: LD_INT 0
41525: PUSH
41526: LD_INT 1
41528: PUSH
41529: LD_INT 2
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: LIST
41536: IN
41537: NOT
41538: PUSH
41539: LD_VAR 0 1
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 3
41555: PUSH
41556: LD_INT 6
41558: PUSH
41559: LD_INT 36
41561: PUSH
41562: LD_INT 4
41564: PUSH
41565: LD_INT 5
41567: PUSH
41568: LD_INT 31
41570: PUSH
41571: LD_INT 32
41573: PUSH
41574: LD_INT 33
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: IN
41590: NOT
41591: PUSH
41592: LD_VAR 0 6
41596: PUSH
41597: LD_INT 1
41599: EQUAL
41600: AND
41601: OR
41602: PUSH
41603: LD_VAR 0 1
41607: PUSH
41608: LD_INT 2
41610: PUSH
41611: LD_INT 3
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: IN
41618: NOT
41619: PUSH
41620: LD_VAR 0 6
41624: PUSH
41625: LD_INT 2
41627: EQUAL
41628: AND
41629: OR
41630: IFFALSE 41640
// mode = 0 ;
41632: LD_ADDR_VAR 0 6
41636: PUSH
41637: LD_INT 0
41639: ST_TO_ADDR
// case mode of 0 :
41640: LD_VAR 0 6
41644: PUSH
41645: LD_INT 0
41647: DOUBLE
41648: EQUAL
41649: IFTRUE 41653
41651: GO 53106
41653: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41654: LD_ADDR_VAR 0 11
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: LD_INT 2
41739: NEG
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: PUSH
41745: LD_INT 0
41747: PUSH
41748: LD_INT 2
41750: NEG
41751: PUSH
41752: EMPTY
41753: LIST
41754: LIST
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: LD_INT 1
41761: NEG
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 1
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 2
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41847: LD_ADDR_VAR 0 12
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 0
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 0
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: NEG
41906: PUSH
41907: LD_INT 0
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 1
41920: NEG
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: PUSH
41929: LD_INT 1
41931: NEG
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: LD_INT 1
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 1
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 3
42004: NEG
42005: PUSH
42006: LD_INT 0
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 3
42015: NEG
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42043: LD_ADDR_VAR 0 13
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: LD_INT 1
42063: NEG
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: PUSH
42072: LD_INT 0
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: LD_INT 1
42081: PUSH
42082: LD_INT 1
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 0
42091: PUSH
42092: LD_INT 1
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 1
42101: NEG
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: LD_INT 2
42128: NEG
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 2
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 1
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: NEG
42167: PUSH
42168: LD_INT 1
42170: NEG
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 2
42182: NEG
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 2
42190: NEG
42191: PUSH
42192: LD_INT 3
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 3
42202: NEG
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: NEG
42215: PUSH
42216: LD_INT 3
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42242: LD_ADDR_VAR 0 14
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 0
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 0
42259: PUSH
42260: LD_INT 1
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: LD_INT 0
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: PUSH
42298: LD_INT 1
42300: NEG
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 1
42311: NEG
42312: PUSH
42313: LD_INT 1
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 1
42323: NEG
42324: PUSH
42325: LD_INT 2
42327: NEG
42328: PUSH
42329: EMPTY
42330: LIST
42331: LIST
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: LD_INT 2
42338: NEG
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 1
42346: PUSH
42347: LD_INT 1
42349: NEG
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: LD_INT 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 0
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 3
42392: NEG
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 3
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 2
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42438: LD_ADDR_VAR 0 15
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 1
42522: NEG
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: PUSH
42528: LD_INT 2
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 1
42550: NEG
42551: PUSH
42552: LD_INT 1
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 2
42561: NEG
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 2
42572: NEG
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 2
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 3
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: LIST
42617: LIST
42618: LIST
42619: LIST
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: LIST
42629: LIST
42630: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42631: LD_ADDR_VAR 0 16
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 0
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: LD_INT 1
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 0
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: NEG
42690: PUSH
42691: LD_INT 0
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 1
42712: NEG
42713: PUSH
42714: LD_INT 2
42716: NEG
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 2
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: PUSH
42735: LD_INT 2
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: LD_INT 1
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 2
42766: NEG
42767: PUSH
42768: LD_INT 2
42770: NEG
42771: PUSH
42772: EMPTY
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 3
42778: PUSH
42779: LD_INT 2
42781: PUSH
42782: EMPTY
42783: LIST
42784: LIST
42785: PUSH
42786: LD_INT 3
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42824: LD_ADDR_VAR 0 17
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 0
42841: PUSH
42842: LD_INT 1
42844: NEG
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 0
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 1
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 0
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: NEG
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 1
42897: NEG
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: LD_INT 2
42909: NEG
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: PUSH
42915: LD_INT 0
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: PUSH
42940: LD_INT 0
42942: PUSH
42943: EMPTY
42944: LIST
42945: LIST
42946: PUSH
42947: LD_INT 2
42949: PUSH
42950: LD_INT 1
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 2
42959: PUSH
42960: LD_INT 2
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: PUSH
42970: LD_INT 2
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 0
42979: PUSH
42980: LD_INT 2
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 1
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: LD_INT 0
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: NEG
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: NEG
43024: PUSH
43025: LD_INT 2
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43054: LD_ADDR_VAR 0 18
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: EMPTY
43066: LIST
43067: LIST
43068: PUSH
43069: LD_INT 0
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 1
43082: PUSH
43083: LD_INT 0
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 1
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 0
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: NEG
43113: PUSH
43114: LD_INT 0
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: LD_INT 2
43139: NEG
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 1
43161: NEG
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 2
43169: PUSH
43170: LD_INT 0
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 2
43179: PUSH
43180: LD_INT 1
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 2
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: PUSH
43200: LD_INT 2
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 0
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: PUSH
43224: EMPTY
43225: LIST
43226: LIST
43227: PUSH
43228: LD_INT 2
43230: NEG
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 2
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: NEG
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: LIST
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43284: LD_ADDR_VAR 0 19
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 0
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 0
43301: PUSH
43302: LD_INT 1
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: EMPTY
43317: LIST
43318: LIST
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: LD_INT 1
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 1
43342: NEG
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: NEG
43354: PUSH
43355: LD_INT 1
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 2
43369: NEG
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: LD_INT 1
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 2
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: LD_INT 2
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: EMPTY
43455: LIST
43456: LIST
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: NEG
43472: PUSH
43473: LD_INT 1
43475: NEG
43476: PUSH
43477: EMPTY
43478: LIST
43479: LIST
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: LD_INT 2
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43514: LD_ADDR_VAR 0 20
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 2
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: LD_INT 2
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 2
43690: NEG
43691: PUSH
43692: LD_INT 0
43694: PUSH
43695: EMPTY
43696: LIST
43697: LIST
43698: PUSH
43699: LD_INT 2
43701: NEG
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 2
43713: NEG
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43744: LD_ADDR_VAR 0 21
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 0
43761: PUSH
43762: LD_INT 1
43764: NEG
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: LD_INT 1
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: NEG
43803: PUSH
43804: LD_INT 0
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 1
43813: NEG
43814: PUSH
43815: LD_INT 1
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 2
43829: NEG
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 2
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 1
43848: PUSH
43849: LD_INT 1
43851: NEG
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 2
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 2
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 2
43879: PUSH
43880: LD_INT 2
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 2
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: LIST
43971: LIST
43972: LIST
43973: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43974: LD_ADDR_VAR 0 22
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 0
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 0
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 1
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: NEG
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 1
44081: NEG
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 2
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 2
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 2
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 2
44150: NEG
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: NEG
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: PUSH
44171: LD_INT 2
44173: NEG
44174: PUSH
44175: LD_INT 2
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: LIST
44193: LIST
44194: LIST
44195: LIST
44196: LIST
44197: LIST
44198: LIST
44199: LIST
44200: LIST
44201: LIST
44202: LIST
44203: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44204: LD_ADDR_VAR 0 23
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: LD_INT 0
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 1
44224: NEG
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 0
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: NEG
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 2
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 2
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 0
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 2
44380: NEG
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 2
44391: NEG
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: NEG
44404: PUSH
44405: LD_INT 2
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: NEG
44416: PUSH
44417: LD_INT 3
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: LD_INT 3
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 2
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: LIST
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: LIST
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: LIST
44482: LIST
44483: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44484: LD_ADDR_VAR 0 24
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 0
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 0
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: NEG
44543: PUSH
44544: LD_INT 0
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: NEG
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: NEG
44566: PUSH
44567: LD_INT 2
44569: NEG
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: LD_INT 2
44580: NEG
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 2
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 1
44629: PUSH
44630: LD_INT 2
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 0
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 1
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: NEG
44684: PUSH
44685: LD_INT 2
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 2
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 1
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: LD_INT 1
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 3
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44760: LD_ADDR_VAR 0 25
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 0
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: PUSH
44827: LD_INT 1
44829: NEG
44830: PUSH
44831: LD_INT 1
44833: NEG
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 2
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 0
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 2
44885: PUSH
44886: LD_INT 1
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 0
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 2
44947: NEG
44948: PUSH
44949: LD_INT 1
44951: NEG
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 2
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 3
44971: PUSH
44972: LD_INT 1
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 3
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 3
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: LIST
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: LIST
45031: LIST
45032: LIST
45033: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45034: LD_ADDR_VAR 0 26
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 0
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 0
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 0
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 1
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: NEG
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: NEG
45116: PUSH
45117: LD_INT 2
45119: NEG
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: LD_INT 2
45130: NEG
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 2
45149: PUSH
45150: LD_INT 0
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 2
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 2
45169: PUSH
45170: LD_INT 2
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: LD_INT 2
45182: PUSH
45183: EMPTY
45184: LIST
45185: LIST
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: LD_INT 2
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 2
45210: NEG
45211: PUSH
45212: LD_INT 0
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: LD_INT 2
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 3
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: PUSH
45256: LD_INT 3
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: NEG
45266: PUSH
45267: LD_INT 2
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45310: LD_ADDR_VAR 0 27
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: LD_INT 0
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 0
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 0
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: LD_INT 2
45406: NEG
45407: PUSH
45408: EMPTY
45409: LIST
45410: LIST
45411: PUSH
45412: LD_INT 1
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 2
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 2
45486: NEG
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: NEG
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 1
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 3
45543: NEG
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: NEG
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45590: LD_ADDR_VAR 0 28
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: LD_INT 0
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 1
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: LD_INT 1
45648: NEG
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 2
45675: NEG
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: PUSH
45703: LD_INT 2
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 0
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 2
45766: NEG
45767: PUSH
45768: LD_INT 0
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 2
45777: NEG
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 3
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: NEG
45814: PUSH
45815: LD_INT 3
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 3
45825: NEG
45826: PUSH
45827: LD_INT 1
45829: NEG
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45872: LD_ADDR_VAR 0 29
45876: PUSH
45877: LD_INT 0
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 1
45892: NEG
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 1
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 0
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: NEG
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: NEG
45942: PUSH
45943: LD_INT 1
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 0
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 2
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 2
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 1
46007: PUSH
46008: LD_INT 2
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 0
46017: PUSH
46018: LD_INT 2
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: NEG
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 2
46038: NEG
46039: PUSH
46040: LD_INT 1
46042: NEG
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 2
46050: NEG
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: LD_INT 3
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 3
46085: PUSH
46086: LD_INT 1
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: PUSH
46096: LD_INT 3
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 3
46116: NEG
46117: PUSH
46118: LD_INT 2
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46151: LD_ADDR_VAR 0 30
46155: PUSH
46156: LD_INT 0
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 1
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: LD_INT 0
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 1
46189: PUSH
46190: LD_INT 1
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 0
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 1
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: NEG
46233: PUSH
46234: LD_INT 2
46236: NEG
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 2
46247: NEG
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 2
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 2
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 1
46306: NEG
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 2
46317: NEG
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 2
46328: NEG
46329: PUSH
46330: LD_INT 1
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 3
46344: NEG
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 1
46352: PUSH
46353: LD_INT 2
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: PUSH
46374: LD_INT 3
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 2
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 3
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: LIST
46426: LIST
46427: LIST
46428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46429: LD_ADDR_VAR 0 31
46433: PUSH
46434: LD_INT 0
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: EMPTY
46441: LIST
46442: LIST
46443: PUSH
46444: LD_INT 0
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 1
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 0
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 1
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 1
46522: PUSH
46523: LD_INT 1
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: LD_INT 0
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 2
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 2
46618: NEG
46619: PUSH
46620: LD_INT 3
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 3
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 3
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46707: LD_ADDR_VAR 0 32
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 2
46873: NEG
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: NEG
46897: PUSH
46898: LD_INT 3
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 3
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 3
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 1
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46985: LD_ADDR_VAR 0 33
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: EMPTY
46997: LIST
46998: LIST
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 0
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: LD_INT 0
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: LD_INT 1
47058: NEG
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 2
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 2
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: LD_INT 1
47133: PUSH
47134: EMPTY
47135: LIST
47136: LIST
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: LD_INT 1
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 2
47163: NEG
47164: PUSH
47165: LD_INT 2
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: LD_INT 3
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 2
47187: PUSH
47188: LD_INT 1
47190: NEG
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 3
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: LD_INT 3
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: NEG
47219: PUSH
47220: LD_INT 2
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 3
47229: NEG
47230: PUSH
47231: LD_INT 2
47233: NEG
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47264: LD_ADDR_VAR 0 34
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 0
47357: PUSH
47358: LD_INT 2
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 1
47368: PUSH
47369: LD_INT 1
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: LD_INT 2
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: LD_INT 2
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 1
47409: NEG
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: NEG
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: LD_INT 1
47435: NEG
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 2
47443: NEG
47444: PUSH
47445: LD_INT 2
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 3
47459: NEG
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: LD_INT 2
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 3
47478: PUSH
47479: LD_INT 2
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: LD_INT 3
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: PUSH
47496: LD_INT 2
47498: NEG
47499: PUSH
47500: LD_INT 1
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 3
47509: NEG
47510: PUSH
47511: LD_INT 1
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47544: LD_ADDR_VAR 0 35
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: LD_INT 1
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 0
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 1
47613: NEG
47614: PUSH
47615: LD_INT 1
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 2
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47656: LD_ADDR_VAR 0 36
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 0
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 0
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 1
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 1
47714: NEG
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: NEG
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 1
47737: NEG
47738: PUSH
47739: LD_INT 2
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 1
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47768: LD_ADDR_VAR 0 37
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 0
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: NEG
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47880: LD_ADDR_VAR 0 38
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 1
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 2
47971: NEG
47972: PUSH
47973: LD_INT 1
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47992: LD_ADDR_VAR 0 39
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: LD_INT 0
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: LD_INT 2
48077: NEG
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48104: LD_ADDR_VAR 0 40
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 0
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: LD_INT 1
48124: NEG
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: NEG
48197: PUSH
48198: LD_INT 1
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48216: LD_ADDR_VAR 0 41
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: LD_INT 1
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: LD_INT 0
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 2
48382: NEG
48383: PUSH
48384: LD_INT 1
48386: NEG
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 2
48394: NEG
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 2
48406: NEG
48407: PUSH
48408: LD_INT 3
48410: NEG
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 3
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: PUSH
48450: LD_INT 2
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 3
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 3
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48566: LD_ADDR_VAR 0 42
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 1
48594: PUSH
48595: LD_INT 0
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: LD_INT 1
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 1
48624: NEG
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 2
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 2
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 0
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: EMPTY
48727: LIST
48728: LIST
48729: PUSH
48730: LD_INT 2
48732: NEG
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: NEG
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 3
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 3
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 3
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 3
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 2
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 3
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: NEG
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48916: LD_ADDR_VAR 0 43
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 0
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 1
48974: NEG
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: NEG
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: LD_INT 2
49012: NEG
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: LD_INT 1
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: NEG
49106: PUSH
49107: LD_INT 3
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 0
49117: PUSH
49118: LD_INT 3
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 2
49131: NEG
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 3
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 3
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: LD_INT 3
49173: PUSH
49174: EMPTY
49175: LIST
49176: LIST
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 3
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 2
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 2
49201: NEG
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 3
49212: NEG
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 3
49223: NEG
49224: PUSH
49225: LD_INT 1
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49264: LD_ADDR_VAR 0 44
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 0
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 0
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: LD_INT 1
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: LD_INT 1
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: LD_INT 0
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 1
49360: NEG
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 2
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: LD_INT 0
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 3
49497: PUSH
49498: LD_INT 2
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: LD_INT 3
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 2
49517: PUSH
49518: LD_INT 3
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 3
49538: NEG
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: NEG
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 3
49561: NEG
49562: PUSH
49563: LD_INT 2
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: NEG
49574: PUSH
49575: LD_INT 3
49577: NEG
49578: PUSH
49579: EMPTY
49580: LIST
49581: LIST
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49614: LD_ADDR_VAR 0 45
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 1
49634: NEG
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: LD_INT 1
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 0
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: PUSH
49670: LD_INT 1
49672: NEG
49673: PUSH
49674: LD_INT 0
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 1
49683: NEG
49684: PUSH
49685: LD_INT 1
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: LD_INT 2
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 1
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: LD_INT 1
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: PUSH
49750: LD_INT 2
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: LD_INT 2
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 2
49804: NEG
49805: PUSH
49806: LD_INT 3
49808: NEG
49809: PUSH
49810: EMPTY
49811: LIST
49812: LIST
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: LD_INT 3
49820: NEG
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 3
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 3
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 3
49860: PUSH
49861: LD_INT 3
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 2
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: LD_INT 3
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 3
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: LD_INT 2
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 2
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 3
49923: NEG
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49964: LD_ADDR_VAR 0 46
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 0
49981: PUSH
49982: LD_INT 1
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: LD_INT 1
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 1
50022: NEG
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 1
50033: NEG
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 2
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: LD_INT 1
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 2
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 2
50089: PUSH
50090: LD_INT 1
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: LD_INT 2
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 1
50153: NEG
50154: PUSH
50155: LD_INT 3
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: LD_INT 3
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 2
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 3
50198: PUSH
50199: LD_INT 0
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 3
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: NEG
50239: PUSH
50240: LD_INT 2
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: NEG
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: NEG
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 3
50271: NEG
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: LIST
50300: LIST
50301: LIST
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50312: LD_ADDR_VAR 0 47
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 0
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 1
50350: PUSH
50351: LD_INT 1
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 1
50381: NEG
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 2
50427: NEG
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: EMPTY
50434: LIST
50435: LIST
50436: PUSH
50437: LD_INT 2
50439: NEG
50440: PUSH
50441: LD_INT 2
50443: NEG
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50463: LD_ADDR_VAR 0 48
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: LD_INT 0
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 1
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 0
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: NEG
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 2
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50610: LD_ADDR_VAR 0 49
50614: PUSH
50615: LD_INT 0
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 0
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 1
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: PUSH
50649: LD_INT 1
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 1
50668: NEG
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: NEG
50680: PUSH
50681: LD_INT 1
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: LD_INT 1
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 0
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: PUSH
50733: LD_INT 2
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50754: LD_ADDR_VAR 0 50
50758: PUSH
50759: LD_INT 0
50761: PUSH
50762: LD_INT 0
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 0
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: LD_INT 1
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: LD_INT 1
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: PUSH
50821: LD_INT 1
50823: NEG
50824: PUSH
50825: LD_INT 1
50827: NEG
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 2
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: LD_INT 2
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 0
50865: PUSH
50866: LD_INT 2
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50898: LD_ADDR_VAR 0 51
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 1
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: LD_INT 0
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 1
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: NEG
50957: PUSH
50958: LD_INT 0
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 0
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: LD_INT 1
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51045: LD_ADDR_VAR 0 52
51049: PUSH
51050: LD_INT 0
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 1
51073: PUSH
51074: LD_INT 0
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: NEG
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 2
51149: NEG
51150: PUSH
51151: LD_INT 0
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 2
51160: NEG
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 2
51172: NEG
51173: PUSH
51174: LD_INT 2
51176: NEG
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51196: LD_ADDR_VAR 0 53
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: LD_INT 1
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: LD_INT 1
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: NEG
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: NEG
51266: PUSH
51267: LD_INT 1
51269: NEG
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: LD_INT 2
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 1
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 2
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 2
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: PUSH
51342: LD_INT 2
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: LD_INT 2
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: NEG
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: NEG
51384: PUSH
51385: LD_INT 1
51387: NEG
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: NEG
51396: PUSH
51397: LD_INT 2
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: LIST
51423: LIST
51424: LIST
51425: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51426: LD_ADDR_VAR 0 54
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: LD_INT 0
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: EMPTY
51479: LIST
51480: LIST
51481: PUSH
51482: LD_INT 1
51484: NEG
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: LD_INT 2
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 0
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: LD_INT 1
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 2
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: LD_INT 1
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: LD_INT 2
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 2
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: NEG
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 1
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51656: LD_ADDR_VAR 0 55
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 1
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 0
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: NEG
51833: PUSH
51834: LD_INT 0
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 2
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51886: LD_ADDR_VAR 0 56
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 1
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: NEG
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: LD_INT 2
51982: NEG
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 1
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 2
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 2
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 2
52085: NEG
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52116: LD_ADDR_VAR 0 57
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 1
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 1
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: LD_INT 2
52212: NEG
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 1
52223: NEG
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 1
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 0
52271: PUSH
52272: LD_INT 2
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 0
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: LD_INT 2
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52346: LD_ADDR_VAR 0 58
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 0
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 1
52384: PUSH
52385: LD_INT 1
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 1
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 0
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 1
52415: NEG
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: LD_INT 2
52431: NEG
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 0
52439: PUSH
52440: LD_INT 2
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: LD_INT 1
52453: NEG
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: PUSH
52462: LD_INT 0
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 2
52481: PUSH
52482: LD_INT 2
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: LD_INT 2
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: EMPTY
52517: LIST
52518: LIST
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: LD_INT 0
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: LD_INT 1
52537: NEG
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52576: LD_ADDR_VAR 0 59
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 0
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: LD_INT 0
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: LD_INT 1
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: LD_INT 0
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: LD_INT 1
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52664: LD_ADDR_VAR 0 60
52668: PUSH
52669: LD_INT 0
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 0
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: LD_INT 0
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 1
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52752: LD_ADDR_VAR 0 61
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 1
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 1
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 1
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52840: LD_ADDR_VAR 0 62
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: LD_INT 1
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: NEG
52910: PUSH
52911: LD_INT 1
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52928: LD_ADDR_VAR 0 63
52932: PUSH
52933: LD_INT 0
52935: PUSH
52936: LD_INT 0
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 0
52945: PUSH
52946: LD_INT 1
52948: NEG
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 0
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53016: LD_ADDR_VAR 0 64
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: ST_TO_ADDR
// end ; 1 :
53104: GO 59001
53106: LD_INT 1
53108: DOUBLE
53109: EQUAL
53110: IFTRUE 53114
53112: GO 55737
53114: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53115: LD_ADDR_VAR 0 11
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 3
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: LD_INT 3
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: PUSH
53146: LD_INT 2
53148: NEG
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53159: LD_ADDR_VAR 0 12
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 1
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 3
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53200: LD_ADDR_VAR 0 13
53204: PUSH
53205: LD_INT 3
53207: PUSH
53208: LD_INT 2
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: LD_INT 3
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 2
53227: PUSH
53228: LD_INT 3
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: LIST
53239: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53240: LD_ADDR_VAR 0 14
53244: PUSH
53245: LD_INT 1
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 1
53267: NEG
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: LIST
53280: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53281: LD_ADDR_VAR 0 15
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 3
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 3
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53325: LD_ADDR_VAR 0 16
53329: PUSH
53330: LD_INT 2
53332: NEG
53333: PUSH
53334: LD_INT 3
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 3
53356: NEG
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53371: LD_ADDR_VAR 0 17
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 3
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: LIST
53414: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53415: LD_ADDR_VAR 0 18
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: PUSH
53434: LD_INT 0
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: PUSH
53441: LD_INT 3
53443: PUSH
53444: LD_INT 1
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53456: LD_ADDR_VAR 0 19
53460: PUSH
53461: LD_INT 3
53463: PUSH
53464: LD_INT 2
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 3
53473: PUSH
53474: LD_INT 3
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53496: LD_ADDR_VAR 0 20
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 3
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53537: LD_ADDR_VAR 0 21
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 3
53555: NEG
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53581: LD_ADDR_VAR 0 22
53585: PUSH
53586: LD_INT 2
53588: NEG
53589: PUSH
53590: LD_INT 3
53592: NEG
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: LD_INT 2
53604: NEG
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: NEG
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53627: LD_ADDR_VAR 0 23
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 3
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: LD_INT 4
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 3
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: LIST
53670: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53671: LD_ADDR_VAR 0 24
53675: PUSH
53676: LD_INT 3
53678: PUSH
53679: LD_INT 0
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 3
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 4
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53712: LD_ADDR_VAR 0 25
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: LD_INT 3
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 4
53729: PUSH
53730: LD_INT 3
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 3
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: LIST
53751: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53752: LD_ADDR_VAR 0 26
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 3
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: PUSH
53770: LD_INT 4
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: PUSH
53777: LD_INT 1
53779: NEG
53780: PUSH
53781: LD_INT 3
53783: PUSH
53784: EMPTY
53785: LIST
53786: LIST
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: LIST
53792: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53793: LD_ADDR_VAR 0 27
53797: PUSH
53798: LD_INT 3
53800: NEG
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 4
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: LIST
53836: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53837: LD_ADDR_VAR 0 28
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 3
53856: NEG
53857: PUSH
53858: LD_INT 4
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 4
53868: NEG
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53883: LD_ADDR_VAR 0 29
53887: PUSH
53888: LD_INT 1
53890: NEG
53891: PUSH
53892: LD_INT 3
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: NEG
53925: PUSH
53926: LD_INT 4
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: LD_INT 4
53939: NEG
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 1
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 5
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 0
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: LD_INT 6
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 0
54004: PUSH
54005: LD_INT 6
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: PUSH
54016: LD_INT 5
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54038: LD_ADDR_VAR 0 30
54042: PUSH
54043: LD_INT 2
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: PUSH
54085: LD_INT 4
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 4
54097: PUSH
54098: LD_INT 1
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 4
54107: PUSH
54108: LD_INT 1
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: LD_INT 5
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 5
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 5
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 6
54149: PUSH
54150: LD_INT 0
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 6
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54181: LD_ADDR_VAR 0 31
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 2
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 2
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 4
54218: PUSH
54219: LD_INT 3
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 4
54228: PUSH
54229: LD_INT 4
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: LD_INT 4
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: LD_INT 4
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 5
54258: PUSH
54259: LD_INT 5
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 4
54268: PUSH
54269: LD_INT 5
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 6
54278: PUSH
54279: LD_INT 5
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 6
54288: PUSH
54289: LD_INT 6
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 5
54298: PUSH
54299: LD_INT 6
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54320: LD_ADDR_VAR 0 32
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 0
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 4
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 4
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 1
54378: NEG
54379: PUSH
54380: LD_INT 3
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 5
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 5
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: PUSH
54421: LD_INT 6
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: LD_INT 6
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: LD_INT 5
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: LIST
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54463: LD_ADDR_VAR 0 33
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 0
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: LD_INT 1
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 4
54515: NEG
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 4
54526: NEG
54527: PUSH
54528: LD_INT 1
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 4
54538: NEG
54539: PUSH
54540: LD_INT 1
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 5
54549: NEG
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 5
54560: NEG
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 5
54572: NEG
54573: PUSH
54574: LD_INT 1
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 6
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 6
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54618: LD_ADDR_VAR 0 34
54622: PUSH
54623: LD_INT 2
54625: NEG
54626: PUSH
54627: LD_INT 3
54629: NEG
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: LD_INT 2
54641: NEG
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: LD_INT 3
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: LD_INT 4
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 4
54673: NEG
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 4
54685: NEG
54686: PUSH
54687: LD_INT 4
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 4
54697: NEG
54698: PUSH
54699: LD_INT 5
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 5
54709: NEG
54710: PUSH
54711: LD_INT 4
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 5
54721: NEG
54722: PUSH
54723: LD_INT 5
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 5
54733: NEG
54734: PUSH
54735: LD_INT 6
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 6
54745: NEG
54746: PUSH
54747: LD_INT 5
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 6
54757: NEG
54758: PUSH
54759: LD_INT 6
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54781: LD_ADDR_VAR 0 41
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 3
54803: NEG
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 1
54811: PUSH
54812: LD_INT 2
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54825: LD_ADDR_VAR 0 42
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 3
54853: PUSH
54854: LD_INT 1
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54866: LD_ADDR_VAR 0 43
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 3
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: LD_INT 3
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54906: LD_ADDR_VAR 0 44
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 2
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 1
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54947: LD_ADDR_VAR 0 45
54951: PUSH
54952: LD_INT 2
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 2
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: LD_INT 3
54976: NEG
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: LIST
54990: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54991: LD_ADDR_VAR 0 46
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: LD_INT 3
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 3
55022: NEG
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55037: LD_ADDR_VAR 0 47
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 3
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55070: LD_ADDR_VAR 0 48
55074: PUSH
55075: LD_INT 1
55077: PUSH
55078: LD_INT 2
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: PUSH
55089: LD_INT 1
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55101: LD_ADDR_VAR 0 49
55105: PUSH
55106: LD_INT 3
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: PUSH
55119: LD_INT 2
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55130: LD_ADDR_VAR 0 50
55134: PUSH
55135: LD_INT 2
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: PUSH
55148: LD_INT 3
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55159: LD_ADDR_VAR 0 51
55163: PUSH
55164: LD_INT 1
55166: NEG
55167: PUSH
55168: LD_INT 2
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: NEG
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: EMPTY
55183: LIST
55184: LIST
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55190: LD_ADDR_VAR 0 52
55194: PUSH
55195: LD_INT 3
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55223: LD_ADDR_VAR 0 53
55227: PUSH
55228: LD_INT 1
55230: NEG
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 3
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: LD_INT 2
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55267: LD_ADDR_VAR 0 54
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 1
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55308: LD_ADDR_VAR 0 55
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: LIST
55347: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55348: LD_ADDR_VAR 0 56
55352: PUSH
55353: LD_INT 1
55355: PUSH
55356: LD_INT 3
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: LD_INT 2
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: LIST
55388: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55389: LD_ADDR_VAR 0 57
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 3
55407: NEG
55408: PUSH
55409: LD_INT 0
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 3
55418: NEG
55419: PUSH
55420: LD_INT 1
55422: NEG
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55433: LD_ADDR_VAR 0 58
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 3
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 3
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: LD_INT 3
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55479: LD_ADDR_VAR 0 59
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: LD_INT 2
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 2
55501: NEG
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55523: LD_ADDR_VAR 0 60
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 2
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55564: LD_ADDR_VAR 0 61
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 1
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 2
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: LIST
55603: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55604: LD_ADDR_VAR 0 62
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: LD_INT 2
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 2
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55645: LD_ADDR_VAR 0 63
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 2
55663: NEG
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: NEG
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: LIST
55688: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55689: LD_ADDR_VAR 0 64
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: LD_INT 1
55712: NEG
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 2
55720: NEG
55721: PUSH
55722: LD_INT 2
55724: NEG
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// end ; 2 :
55735: GO 59001
55737: LD_INT 2
55739: DOUBLE
55740: EQUAL
55741: IFTRUE 55745
55743: GO 59000
55745: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55746: LD_ADDR_VAR 0 29
55750: PUSH
55751: LD_INT 4
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 4
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 5
55774: PUSH
55775: LD_INT 0
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 5
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 4
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 3
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 3
55814: PUSH
55815: LD_INT 1
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 3
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: LD_INT 2
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 3
55846: PUSH
55847: LD_INT 3
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 4
55876: PUSH
55877: LD_INT 4
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 3
55886: PUSH
55887: LD_INT 4
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: PUSH
55907: LD_INT 2
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: LD_INT 2
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: PUSH
55927: LD_INT 4
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 4
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: LD_INT 3
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 1
55956: PUSH
55957: LD_INT 4
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 5
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 5
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 1
55986: NEG
55987: PUSH
55988: LD_INT 4
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: LD_INT 3
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 2
56008: PUSH
56009: LD_INT 5
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 3
56022: PUSH
56023: EMPTY
56024: LIST
56025: LIST
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 3
56040: NEG
56041: PUSH
56042: LD_INT 1
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 1
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 4
56085: NEG
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 4
56096: NEG
56097: PUSH
56098: LD_INT 1
56100: NEG
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 4
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 4
56131: NEG
56132: PUSH
56133: LD_INT 4
56135: NEG
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 4
56143: NEG
56144: PUSH
56145: LD_INT 5
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 3
56155: NEG
56156: PUSH
56157: LD_INT 4
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 3
56167: NEG
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 4
56179: NEG
56180: PUSH
56181: LD_INT 3
56183: NEG
56184: PUSH
56185: EMPTY
56186: LIST
56187: LIST
56188: PUSH
56189: LD_INT 5
56191: NEG
56192: PUSH
56193: LD_INT 4
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 5
56203: NEG
56204: PUSH
56205: LD_INT 5
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 3
56215: NEG
56216: PUSH
56217: LD_INT 5
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 5
56227: NEG
56228: PUSH
56229: LD_INT 3
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56284: LD_ADDR_VAR 0 30
56288: PUSH
56289: LD_INT 4
56291: PUSH
56292: LD_INT 4
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 4
56301: PUSH
56302: LD_INT 3
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 5
56311: PUSH
56312: LD_INT 4
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 5
56321: PUSH
56322: LD_INT 5
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 4
56331: PUSH
56332: LD_INT 5
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 3
56341: PUSH
56342: LD_INT 4
56344: PUSH
56345: EMPTY
56346: LIST
56347: LIST
56348: PUSH
56349: LD_INT 3
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 5
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: LD_INT 5
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 0
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: PUSH
56389: LD_INT 0
56391: PUSH
56392: LD_INT 2
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: PUSH
56399: LD_INT 1
56401: PUSH
56402: LD_INT 3
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: LD_INT 4
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 0
56421: PUSH
56422: LD_INT 4
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 1
56442: NEG
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 2
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 4
56485: NEG
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 3
56497: NEG
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 3
56508: NEG
56509: PUSH
56510: LD_INT 1
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 4
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: NEG
56531: PUSH
56532: LD_INT 0
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 5
56541: NEG
56542: PUSH
56543: LD_INT 1
56545: NEG
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 5
56553: NEG
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 3
56565: NEG
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 3
56576: NEG
56577: PUSH
56578: LD_INT 3
56580: NEG
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 3
56588: NEG
56589: PUSH
56590: LD_INT 4
56592: NEG
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: EMPTY
56607: LIST
56608: LIST
56609: PUSH
56610: LD_INT 2
56612: NEG
56613: PUSH
56614: LD_INT 2
56616: NEG
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: NEG
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 4
56636: NEG
56637: PUSH
56638: LD_INT 3
56640: NEG
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 4
56648: NEG
56649: PUSH
56650: LD_INT 4
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: LD_INT 4
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 4
56672: NEG
56673: PUSH
56674: LD_INT 2
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 4
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 0
56695: PUSH
56696: LD_INT 5
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: LD_INT 4
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 0
56728: PUSH
56729: LD_INT 3
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 1
56739: NEG
56740: PUSH
56741: LD_INT 4
56743: NEG
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: NEG
56752: PUSH
56753: LD_INT 5
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: LD_INT 3
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 5
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56831: LD_ADDR_VAR 0 31
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 4
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 4
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 5
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: LD_INT 5
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: LD_INT 1
56888: NEG
56889: PUSH
56890: LD_INT 4
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 2
56910: PUSH
56911: LD_INT 5
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 3
56931: NEG
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 3
56942: NEG
56943: PUSH
56944: LD_INT 1
56946: NEG
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 2
56954: NEG
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 2
56965: NEG
56966: PUSH
56967: LD_INT 1
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 4
56998: NEG
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 4
57010: NEG
57011: PUSH
57012: LD_INT 2
57014: NEG
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: PUSH
57031: LD_INT 4
57033: NEG
57034: PUSH
57035: LD_INT 4
57037: NEG
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 4
57045: NEG
57046: PUSH
57047: LD_INT 5
57049: NEG
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 3
57057: NEG
57058: PUSH
57059: LD_INT 4
57061: NEG
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 3
57069: NEG
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 4
57081: NEG
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 5
57093: NEG
57094: PUSH
57095: LD_INT 4
57097: NEG
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 5
57105: NEG
57106: PUSH
57107: LD_INT 5
57109: NEG
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 3
57117: NEG
57118: PUSH
57119: LD_INT 5
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 5
57129: NEG
57130: PUSH
57131: LD_INT 3
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 3
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 4
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: LD_INT 3
57166: NEG
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: PUSH
57175: LD_INT 2
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 0
57185: PUSH
57186: LD_INT 2
57188: NEG
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: NEG
57197: PUSH
57198: LD_INT 3
57200: NEG
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: NEG
57209: PUSH
57210: LD_INT 4
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 2
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 4
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 4
57243: PUSH
57244: LD_INT 0
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 5
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 5
57274: PUSH
57275: LD_INT 1
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 4
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: PUSH
57295: LD_INT 0
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: PUSH
57305: LD_INT 1
57307: NEG
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 3
57315: PUSH
57316: LD_INT 2
57318: NEG
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 5
57326: PUSH
57327: LD_INT 2
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: EMPTY
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57381: LD_ADDR_VAR 0 32
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: LD_INT 0
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 4
57399: NEG
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: NEG
57412: PUSH
57413: LD_INT 0
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 3
57422: NEG
57423: PUSH
57424: LD_INT 1
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 4
57433: NEG
57434: PUSH
57435: LD_INT 1
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: LD_INT 5
57444: NEG
57445: PUSH
57446: LD_INT 0
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 5
57455: NEG
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_INT 5
57467: NEG
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: EMPTY
57474: LIST
57475: LIST
57476: PUSH
57477: LD_INT 3
57479: NEG
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 3
57490: NEG
57491: PUSH
57492: LD_INT 3
57494: NEG
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 3
57502: NEG
57503: PUSH
57504: LD_INT 4
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: LD_INT 3
57538: NEG
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 4
57550: NEG
57551: PUSH
57552: LD_INT 3
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 4
57562: NEG
57563: PUSH
57564: LD_INT 4
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 2
57574: NEG
57575: PUSH
57576: LD_INT 4
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 4
57586: NEG
57587: PUSH
57588: LD_INT 2
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 0
57598: PUSH
57599: LD_INT 4
57601: NEG
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 0
57609: PUSH
57610: LD_INT 5
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 1
57620: PUSH
57621: LD_INT 4
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: LD_INT 4
57657: NEG
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 5
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 2
57688: NEG
57689: PUSH
57690: LD_INT 5
57692: NEG
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 1
57713: NEG
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 4
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 1
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 2
57761: PUSH
57762: LD_INT 1
57764: NEG
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: PUSH
57770: LD_INT 2
57772: PUSH
57773: LD_INT 2
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 4
57783: PUSH
57784: LD_INT 2
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 4
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 4
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 5
57813: PUSH
57814: LD_INT 4
57816: PUSH
57817: EMPTY
57818: LIST
57819: LIST
57820: PUSH
57821: LD_INT 5
57823: PUSH
57824: LD_INT 5
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 4
57833: PUSH
57834: LD_INT 5
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 5
57863: PUSH
57864: LD_INT 3
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 3
57873: PUSH
57874: LD_INT 5
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57928: LD_ADDR_VAR 0 33
57932: PUSH
57933: LD_INT 4
57935: NEG
57936: PUSH
57937: LD_INT 4
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 4
57947: NEG
57948: PUSH
57949: LD_INT 5
57951: NEG
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 3
57959: NEG
57960: PUSH
57961: LD_INT 4
57963: NEG
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: LD_INT 3
57975: NEG
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: PUSH
57981: LD_INT 4
57983: NEG
57984: PUSH
57985: LD_INT 3
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 5
57995: NEG
57996: PUSH
57997: LD_INT 4
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 5
58007: NEG
58008: PUSH
58009: LD_INT 5
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 3
58019: NEG
58020: PUSH
58021: LD_INT 5
58023: NEG
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 5
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 0
58043: PUSH
58044: LD_INT 3
58046: NEG
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 0
58054: PUSH
58055: LD_INT 4
58057: NEG
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 1
58065: PUSH
58066: LD_INT 3
58068: NEG
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 1
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: NEG
58111: PUSH
58112: LD_INT 4
58114: NEG
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 2
58125: NEG
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: NEG
58134: PUSH
58135: LD_INT 4
58137: NEG
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 4
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: LD_INT 1
58158: NEG
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 5
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 4
58186: PUSH
58187: LD_INT 1
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 3
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 3
58206: PUSH
58207: LD_INT 1
58209: NEG
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 3
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 5
58228: PUSH
58229: LD_INT 2
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 3
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: PUSH
58249: LD_INT 2
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 4
58258: PUSH
58259: LD_INT 3
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 4
58268: PUSH
58269: LD_INT 4
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: PUSH
58279: LD_INT 4
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: LD_INT 3
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 4
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 2
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: LD_INT 4
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 0
58338: PUSH
58339: LD_INT 3
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: LD_INT 4
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 1
58358: PUSH
58359: LD_INT 5
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 5
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 4
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: LD_INT 3
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: NEG
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58466: LD_ADDR_VAR 0 34
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 4
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 5
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 1
58495: PUSH
58496: LD_INT 4
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: LD_INT 3
58509: NEG
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 0
58517: PUSH
58518: LD_INT 3
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 1
58528: NEG
58529: PUSH
58530: LD_INT 4
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 1
58540: NEG
58541: PUSH
58542: LD_INT 5
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 2
58552: PUSH
58553: LD_INT 3
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 2
58563: NEG
58564: PUSH
58565: LD_INT 5
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 3
58575: PUSH
58576: LD_INT 0
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 3
58585: PUSH
58586: LD_INT 1
58588: NEG
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 4
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: PUSH
58648: LD_INT 2
58650: NEG
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 4
58658: PUSH
58659: LD_INT 2
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: PUSH
58669: LD_INT 4
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 5
58688: PUSH
58689: LD_INT 4
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 5
58698: PUSH
58699: LD_INT 5
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: LD_INT 5
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: LD_INT 4
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 3
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 5
58738: PUSH
58739: LD_INT 3
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 3
58748: PUSH
58749: LD_INT 5
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: LD_INT 2
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: LD_INT 3
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 1
58788: PUSH
58789: LD_INT 4
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: LD_INT 4
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: LD_INT 3
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: PUSH
58831: LD_INT 4
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 2
58840: NEG
58841: PUSH
58842: LD_INT 2
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 4
58851: NEG
58852: PUSH
58853: LD_INT 0
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 4
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 3
58885: NEG
58886: PUSH
58887: LD_INT 1
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: LD_INT 1
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 5
58907: NEG
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 5
58918: NEG
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 5
58930: NEG
58931: PUSH
58932: LD_INT 2
58934: NEG
58935: PUSH
58936: EMPTY
58937: LIST
58938: LIST
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: EMPTY
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: ST_TO_ADDR
// end ; end ;
58998: GO 59001
59000: POP
// case btype of b_depot , b_warehouse :
59001: LD_VAR 0 1
59005: PUSH
59006: LD_INT 0
59008: DOUBLE
59009: EQUAL
59010: IFTRUE 59020
59012: LD_INT 1
59014: DOUBLE
59015: EQUAL
59016: IFTRUE 59020
59018: GO 59221
59020: POP
// case nation of nation_american :
59021: LD_VAR 0 5
59025: PUSH
59026: LD_INT 1
59028: DOUBLE
59029: EQUAL
59030: IFTRUE 59034
59032: GO 59090
59034: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59035: LD_ADDR_VAR 0 9
59039: PUSH
59040: LD_VAR 0 11
59044: PUSH
59045: LD_VAR 0 12
59049: PUSH
59050: LD_VAR 0 13
59054: PUSH
59055: LD_VAR 0 14
59059: PUSH
59060: LD_VAR 0 15
59064: PUSH
59065: LD_VAR 0 16
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: PUSH
59078: LD_VAR 0 4
59082: PUSH
59083: LD_INT 1
59085: PLUS
59086: ARRAY
59087: ST_TO_ADDR
59088: GO 59219
59090: LD_INT 2
59092: DOUBLE
59093: EQUAL
59094: IFTRUE 59098
59096: GO 59154
59098: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59099: LD_ADDR_VAR 0 9
59103: PUSH
59104: LD_VAR 0 17
59108: PUSH
59109: LD_VAR 0 18
59113: PUSH
59114: LD_VAR 0 19
59118: PUSH
59119: LD_VAR 0 20
59123: PUSH
59124: LD_VAR 0 21
59128: PUSH
59129: LD_VAR 0 22
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: PUSH
59142: LD_VAR 0 4
59146: PUSH
59147: LD_INT 1
59149: PLUS
59150: ARRAY
59151: ST_TO_ADDR
59152: GO 59219
59154: LD_INT 3
59156: DOUBLE
59157: EQUAL
59158: IFTRUE 59162
59160: GO 59218
59162: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59163: LD_ADDR_VAR 0 9
59167: PUSH
59168: LD_VAR 0 23
59172: PUSH
59173: LD_VAR 0 24
59177: PUSH
59178: LD_VAR 0 25
59182: PUSH
59183: LD_VAR 0 26
59187: PUSH
59188: LD_VAR 0 27
59192: PUSH
59193: LD_VAR 0 28
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: LIST
59202: LIST
59203: LIST
59204: LIST
59205: PUSH
59206: LD_VAR 0 4
59210: PUSH
59211: LD_INT 1
59213: PLUS
59214: ARRAY
59215: ST_TO_ADDR
59216: GO 59219
59218: POP
59219: GO 59774
59221: LD_INT 2
59223: DOUBLE
59224: EQUAL
59225: IFTRUE 59235
59227: LD_INT 3
59229: DOUBLE
59230: EQUAL
59231: IFTRUE 59235
59233: GO 59291
59235: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59236: LD_ADDR_VAR 0 9
59240: PUSH
59241: LD_VAR 0 29
59245: PUSH
59246: LD_VAR 0 30
59250: PUSH
59251: LD_VAR 0 31
59255: PUSH
59256: LD_VAR 0 32
59260: PUSH
59261: LD_VAR 0 33
59265: PUSH
59266: LD_VAR 0 34
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: PUSH
59279: LD_VAR 0 4
59283: PUSH
59284: LD_INT 1
59286: PLUS
59287: ARRAY
59288: ST_TO_ADDR
59289: GO 59774
59291: LD_INT 16
59293: DOUBLE
59294: EQUAL
59295: IFTRUE 59353
59297: LD_INT 17
59299: DOUBLE
59300: EQUAL
59301: IFTRUE 59353
59303: LD_INT 18
59305: DOUBLE
59306: EQUAL
59307: IFTRUE 59353
59309: LD_INT 19
59311: DOUBLE
59312: EQUAL
59313: IFTRUE 59353
59315: LD_INT 22
59317: DOUBLE
59318: EQUAL
59319: IFTRUE 59353
59321: LD_INT 20
59323: DOUBLE
59324: EQUAL
59325: IFTRUE 59353
59327: LD_INT 21
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59353
59333: LD_INT 23
59335: DOUBLE
59336: EQUAL
59337: IFTRUE 59353
59339: LD_INT 24
59341: DOUBLE
59342: EQUAL
59343: IFTRUE 59353
59345: LD_INT 25
59347: DOUBLE
59348: EQUAL
59349: IFTRUE 59353
59351: GO 59409
59353: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59354: LD_ADDR_VAR 0 9
59358: PUSH
59359: LD_VAR 0 35
59363: PUSH
59364: LD_VAR 0 36
59368: PUSH
59369: LD_VAR 0 37
59373: PUSH
59374: LD_VAR 0 38
59378: PUSH
59379: LD_VAR 0 39
59383: PUSH
59384: LD_VAR 0 40
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: PUSH
59397: LD_VAR 0 4
59401: PUSH
59402: LD_INT 1
59404: PLUS
59405: ARRAY
59406: ST_TO_ADDR
59407: GO 59774
59409: LD_INT 6
59411: DOUBLE
59412: EQUAL
59413: IFTRUE 59465
59415: LD_INT 7
59417: DOUBLE
59418: EQUAL
59419: IFTRUE 59465
59421: LD_INT 8
59423: DOUBLE
59424: EQUAL
59425: IFTRUE 59465
59427: LD_INT 13
59429: DOUBLE
59430: EQUAL
59431: IFTRUE 59465
59433: LD_INT 12
59435: DOUBLE
59436: EQUAL
59437: IFTRUE 59465
59439: LD_INT 15
59441: DOUBLE
59442: EQUAL
59443: IFTRUE 59465
59445: LD_INT 11
59447: DOUBLE
59448: EQUAL
59449: IFTRUE 59465
59451: LD_INT 14
59453: DOUBLE
59454: EQUAL
59455: IFTRUE 59465
59457: LD_INT 10
59459: DOUBLE
59460: EQUAL
59461: IFTRUE 59465
59463: GO 59521
59465: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59466: LD_ADDR_VAR 0 9
59470: PUSH
59471: LD_VAR 0 41
59475: PUSH
59476: LD_VAR 0 42
59480: PUSH
59481: LD_VAR 0 43
59485: PUSH
59486: LD_VAR 0 44
59490: PUSH
59491: LD_VAR 0 45
59495: PUSH
59496: LD_VAR 0 46
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: PUSH
59509: LD_VAR 0 4
59513: PUSH
59514: LD_INT 1
59516: PLUS
59517: ARRAY
59518: ST_TO_ADDR
59519: GO 59774
59521: LD_INT 36
59523: DOUBLE
59524: EQUAL
59525: IFTRUE 59529
59527: GO 59585
59529: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59530: LD_ADDR_VAR 0 9
59534: PUSH
59535: LD_VAR 0 47
59539: PUSH
59540: LD_VAR 0 48
59544: PUSH
59545: LD_VAR 0 49
59549: PUSH
59550: LD_VAR 0 50
59554: PUSH
59555: LD_VAR 0 51
59559: PUSH
59560: LD_VAR 0 52
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: PUSH
59573: LD_VAR 0 4
59577: PUSH
59578: LD_INT 1
59580: PLUS
59581: ARRAY
59582: ST_TO_ADDR
59583: GO 59774
59585: LD_INT 4
59587: DOUBLE
59588: EQUAL
59589: IFTRUE 59611
59591: LD_INT 5
59593: DOUBLE
59594: EQUAL
59595: IFTRUE 59611
59597: LD_INT 34
59599: DOUBLE
59600: EQUAL
59601: IFTRUE 59611
59603: LD_INT 37
59605: DOUBLE
59606: EQUAL
59607: IFTRUE 59611
59609: GO 59667
59611: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59612: LD_ADDR_VAR 0 9
59616: PUSH
59617: LD_VAR 0 53
59621: PUSH
59622: LD_VAR 0 54
59626: PUSH
59627: LD_VAR 0 55
59631: PUSH
59632: LD_VAR 0 56
59636: PUSH
59637: LD_VAR 0 57
59641: PUSH
59642: LD_VAR 0 58
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: LIST
59652: LIST
59653: LIST
59654: PUSH
59655: LD_VAR 0 4
59659: PUSH
59660: LD_INT 1
59662: PLUS
59663: ARRAY
59664: ST_TO_ADDR
59665: GO 59774
59667: LD_INT 31
59669: DOUBLE
59670: EQUAL
59671: IFTRUE 59717
59673: LD_INT 32
59675: DOUBLE
59676: EQUAL
59677: IFTRUE 59717
59679: LD_INT 33
59681: DOUBLE
59682: EQUAL
59683: IFTRUE 59717
59685: LD_INT 27
59687: DOUBLE
59688: EQUAL
59689: IFTRUE 59717
59691: LD_INT 26
59693: DOUBLE
59694: EQUAL
59695: IFTRUE 59717
59697: LD_INT 28
59699: DOUBLE
59700: EQUAL
59701: IFTRUE 59717
59703: LD_INT 29
59705: DOUBLE
59706: EQUAL
59707: IFTRUE 59717
59709: LD_INT 30
59711: DOUBLE
59712: EQUAL
59713: IFTRUE 59717
59715: GO 59773
59717: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59718: LD_ADDR_VAR 0 9
59722: PUSH
59723: LD_VAR 0 59
59727: PUSH
59728: LD_VAR 0 60
59732: PUSH
59733: LD_VAR 0 61
59737: PUSH
59738: LD_VAR 0 62
59742: PUSH
59743: LD_VAR 0 63
59747: PUSH
59748: LD_VAR 0 64
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: PUSH
59761: LD_VAR 0 4
59765: PUSH
59766: LD_INT 1
59768: PLUS
59769: ARRAY
59770: ST_TO_ADDR
59771: GO 59774
59773: POP
// temp_list2 = [ ] ;
59774: LD_ADDR_VAR 0 10
59778: PUSH
59779: EMPTY
59780: ST_TO_ADDR
// for i in temp_list do
59781: LD_ADDR_VAR 0 8
59785: PUSH
59786: LD_VAR 0 9
59790: PUSH
59791: FOR_IN
59792: IFFALSE 59844
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59794: LD_ADDR_VAR 0 10
59798: PUSH
59799: LD_VAR 0 10
59803: PUSH
59804: LD_VAR 0 8
59808: PUSH
59809: LD_INT 1
59811: ARRAY
59812: PUSH
59813: LD_VAR 0 2
59817: PLUS
59818: PUSH
59819: LD_VAR 0 8
59823: PUSH
59824: LD_INT 2
59826: ARRAY
59827: PUSH
59828: LD_VAR 0 3
59832: PLUS
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: ADD
59841: ST_TO_ADDR
59842: GO 59791
59844: POP
59845: POP
// result = temp_list2 ;
59846: LD_ADDR_VAR 0 7
59850: PUSH
59851: LD_VAR 0 10
59855: ST_TO_ADDR
// end ;
59856: LD_VAR 0 7
59860: RET
// export function EnemyInRange ( unit , dist ) ; begin
59861: LD_INT 0
59863: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59864: LD_ADDR_VAR 0 3
59868: PUSH
59869: LD_VAR 0 1
59873: PPUSH
59874: CALL_OW 255
59878: PPUSH
59879: LD_VAR 0 1
59883: PPUSH
59884: CALL_OW 250
59888: PPUSH
59889: LD_VAR 0 1
59893: PPUSH
59894: CALL_OW 251
59898: PPUSH
59899: LD_VAR 0 2
59903: PPUSH
59904: CALL 33263 0 4
59908: PUSH
59909: LD_INT 4
59911: ARRAY
59912: ST_TO_ADDR
// end ;
59913: LD_VAR 0 3
59917: RET
// export function PlayerSeeMe ( unit ) ; begin
59918: LD_INT 0
59920: PPUSH
// result := See ( your_side , unit ) ;
59921: LD_ADDR_VAR 0 2
59925: PUSH
59926: LD_OWVAR 2
59930: PPUSH
59931: LD_VAR 0 1
59935: PPUSH
59936: CALL_OW 292
59940: ST_TO_ADDR
// end ;
59941: LD_VAR 0 2
59945: RET
// export function ReverseDir ( unit ) ; begin
59946: LD_INT 0
59948: PPUSH
// if not unit then
59949: LD_VAR 0 1
59953: NOT
59954: IFFALSE 59958
// exit ;
59956: GO 59981
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59958: LD_ADDR_VAR 0 2
59962: PUSH
59963: LD_VAR 0 1
59967: PPUSH
59968: CALL_OW 254
59972: PUSH
59973: LD_INT 3
59975: PLUS
59976: PUSH
59977: LD_INT 6
59979: MOD
59980: ST_TO_ADDR
// end ;
59981: LD_VAR 0 2
59985: RET
// export function ReverseArray ( array ) ; var i ; begin
59986: LD_INT 0
59988: PPUSH
59989: PPUSH
// if not array then
59990: LD_VAR 0 1
59994: NOT
59995: IFFALSE 59999
// exit ;
59997: GO 60054
// result := [ ] ;
59999: LD_ADDR_VAR 0 2
60003: PUSH
60004: EMPTY
60005: ST_TO_ADDR
// for i := array downto 1 do
60006: LD_ADDR_VAR 0 3
60010: PUSH
60011: DOUBLE
60012: LD_VAR 0 1
60016: INC
60017: ST_TO_ADDR
60018: LD_INT 1
60020: PUSH
60021: FOR_DOWNTO
60022: IFFALSE 60052
// result := Join ( result , array [ i ] ) ;
60024: LD_ADDR_VAR 0 2
60028: PUSH
60029: LD_VAR 0 2
60033: PPUSH
60034: LD_VAR 0 1
60038: PUSH
60039: LD_VAR 0 3
60043: ARRAY
60044: PPUSH
60045: CALL 64697 0 2
60049: ST_TO_ADDR
60050: GO 60021
60052: POP
60053: POP
// end ;
60054: LD_VAR 0 2
60058: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60059: LD_INT 0
60061: PPUSH
60062: PPUSH
60063: PPUSH
60064: PPUSH
60065: PPUSH
60066: PPUSH
// if not unit or not hexes then
60067: LD_VAR 0 1
60071: NOT
60072: PUSH
60073: LD_VAR 0 2
60077: NOT
60078: OR
60079: IFFALSE 60083
// exit ;
60081: GO 60206
// dist := 9999 ;
60083: LD_ADDR_VAR 0 5
60087: PUSH
60088: LD_INT 9999
60090: ST_TO_ADDR
// for i = 1 to hexes do
60091: LD_ADDR_VAR 0 4
60095: PUSH
60096: DOUBLE
60097: LD_INT 1
60099: DEC
60100: ST_TO_ADDR
60101: LD_VAR 0 2
60105: PUSH
60106: FOR_TO
60107: IFFALSE 60194
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60109: LD_ADDR_VAR 0 6
60113: PUSH
60114: LD_VAR 0 1
60118: PPUSH
60119: LD_VAR 0 2
60123: PUSH
60124: LD_VAR 0 4
60128: ARRAY
60129: PUSH
60130: LD_INT 1
60132: ARRAY
60133: PPUSH
60134: LD_VAR 0 2
60138: PUSH
60139: LD_VAR 0 4
60143: ARRAY
60144: PUSH
60145: LD_INT 2
60147: ARRAY
60148: PPUSH
60149: CALL_OW 297
60153: ST_TO_ADDR
// if tdist < dist then
60154: LD_VAR 0 6
60158: PUSH
60159: LD_VAR 0 5
60163: LESS
60164: IFFALSE 60192
// begin hex := hexes [ i ] ;
60166: LD_ADDR_VAR 0 8
60170: PUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_VAR 0 4
60180: ARRAY
60181: ST_TO_ADDR
// dist := tdist ;
60182: LD_ADDR_VAR 0 5
60186: PUSH
60187: LD_VAR 0 6
60191: ST_TO_ADDR
// end ; end ;
60192: GO 60106
60194: POP
60195: POP
// result := hex ;
60196: LD_ADDR_VAR 0 3
60200: PUSH
60201: LD_VAR 0 8
60205: ST_TO_ADDR
// end ;
60206: LD_VAR 0 3
60210: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60211: LD_INT 0
60213: PPUSH
60214: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60215: LD_VAR 0 1
60219: NOT
60220: PUSH
60221: LD_VAR 0 1
60225: PUSH
60226: LD_INT 21
60228: PUSH
60229: LD_INT 2
60231: PUSH
60232: EMPTY
60233: LIST
60234: LIST
60235: PUSH
60236: LD_INT 23
60238: PUSH
60239: LD_INT 2
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: EMPTY
60247: LIST
60248: LIST
60249: PPUSH
60250: CALL_OW 69
60254: IN
60255: NOT
60256: OR
60257: IFFALSE 60261
// exit ;
60259: GO 60308
// for i = 1 to 3 do
60261: LD_ADDR_VAR 0 3
60265: PUSH
60266: DOUBLE
60267: LD_INT 1
60269: DEC
60270: ST_TO_ADDR
60271: LD_INT 3
60273: PUSH
60274: FOR_TO
60275: IFFALSE 60306
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60277: LD_VAR 0 1
60281: PPUSH
60282: CALL_OW 250
60286: PPUSH
60287: LD_VAR 0 1
60291: PPUSH
60292: CALL_OW 251
60296: PPUSH
60297: LD_INT 1
60299: PPUSH
60300: CALL_OW 453
60304: GO 60274
60306: POP
60307: POP
// end ;
60308: LD_VAR 0 2
60312: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60313: LD_INT 0
60315: PPUSH
60316: PPUSH
60317: PPUSH
60318: PPUSH
60319: PPUSH
60320: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60321: LD_VAR 0 1
60325: NOT
60326: PUSH
60327: LD_VAR 0 2
60331: NOT
60332: OR
60333: PUSH
60334: LD_VAR 0 1
60338: PPUSH
60339: CALL_OW 314
60343: OR
60344: IFFALSE 60348
// exit ;
60346: GO 60815
// if GetLives ( i ) < 250 then
60348: LD_VAR 0 4
60352: PPUSH
60353: CALL_OW 256
60357: PUSH
60358: LD_INT 250
60360: LESS
60361: IFFALSE 60374
// begin ComAutodestruct ( i ) ;
60363: LD_VAR 0 4
60367: PPUSH
60368: CALL 60211 0 1
// exit ;
60372: GO 60815
// end ; x := GetX ( enemy_unit ) ;
60374: LD_ADDR_VAR 0 7
60378: PUSH
60379: LD_VAR 0 2
60383: PPUSH
60384: CALL_OW 250
60388: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60389: LD_ADDR_VAR 0 8
60393: PUSH
60394: LD_VAR 0 2
60398: PPUSH
60399: CALL_OW 251
60403: ST_TO_ADDR
// if not x or not y then
60404: LD_VAR 0 7
60408: NOT
60409: PUSH
60410: LD_VAR 0 8
60414: NOT
60415: OR
60416: IFFALSE 60420
// exit ;
60418: GO 60815
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60420: LD_ADDR_VAR 0 6
60424: PUSH
60425: LD_VAR 0 7
60429: PPUSH
60430: LD_INT 0
60432: PPUSH
60433: LD_INT 4
60435: PPUSH
60436: CALL_OW 272
60440: PUSH
60441: LD_VAR 0 8
60445: PPUSH
60446: LD_INT 0
60448: PPUSH
60449: LD_INT 4
60451: PPUSH
60452: CALL_OW 273
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_VAR 0 7
60465: PPUSH
60466: LD_INT 1
60468: PPUSH
60469: LD_INT 4
60471: PPUSH
60472: CALL_OW 272
60476: PUSH
60477: LD_VAR 0 8
60481: PPUSH
60482: LD_INT 1
60484: PPUSH
60485: LD_INT 4
60487: PPUSH
60488: CALL_OW 273
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_VAR 0 7
60501: PPUSH
60502: LD_INT 2
60504: PPUSH
60505: LD_INT 4
60507: PPUSH
60508: CALL_OW 272
60512: PUSH
60513: LD_VAR 0 8
60517: PPUSH
60518: LD_INT 2
60520: PPUSH
60521: LD_INT 4
60523: PPUSH
60524: CALL_OW 273
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_VAR 0 7
60537: PPUSH
60538: LD_INT 3
60540: PPUSH
60541: LD_INT 4
60543: PPUSH
60544: CALL_OW 272
60548: PUSH
60549: LD_VAR 0 8
60553: PPUSH
60554: LD_INT 3
60556: PPUSH
60557: LD_INT 4
60559: PPUSH
60560: CALL_OW 273
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_VAR 0 7
60573: PPUSH
60574: LD_INT 4
60576: PPUSH
60577: LD_INT 4
60579: PPUSH
60580: CALL_OW 272
60584: PUSH
60585: LD_VAR 0 8
60589: PPUSH
60590: LD_INT 4
60592: PPUSH
60593: LD_INT 4
60595: PPUSH
60596: CALL_OW 273
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_VAR 0 7
60609: PPUSH
60610: LD_INT 5
60612: PPUSH
60613: LD_INT 4
60615: PPUSH
60616: CALL_OW 272
60620: PUSH
60621: LD_VAR 0 8
60625: PPUSH
60626: LD_INT 5
60628: PPUSH
60629: LD_INT 4
60631: PPUSH
60632: CALL_OW 273
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: ST_TO_ADDR
// for i = tmp downto 1 do
60649: LD_ADDR_VAR 0 4
60653: PUSH
60654: DOUBLE
60655: LD_VAR 0 6
60659: INC
60660: ST_TO_ADDR
60661: LD_INT 1
60663: PUSH
60664: FOR_DOWNTO
60665: IFFALSE 60766
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60667: LD_VAR 0 6
60671: PUSH
60672: LD_VAR 0 4
60676: ARRAY
60677: PUSH
60678: LD_INT 1
60680: ARRAY
60681: PPUSH
60682: LD_VAR 0 6
60686: PUSH
60687: LD_VAR 0 4
60691: ARRAY
60692: PUSH
60693: LD_INT 2
60695: ARRAY
60696: PPUSH
60697: CALL_OW 488
60701: NOT
60702: PUSH
60703: LD_VAR 0 6
60707: PUSH
60708: LD_VAR 0 4
60712: ARRAY
60713: PUSH
60714: LD_INT 1
60716: ARRAY
60717: PPUSH
60718: LD_VAR 0 6
60722: PUSH
60723: LD_VAR 0 4
60727: ARRAY
60728: PUSH
60729: LD_INT 2
60731: ARRAY
60732: PPUSH
60733: CALL_OW 428
60737: PUSH
60738: LD_INT 0
60740: NONEQUAL
60741: OR
60742: IFFALSE 60764
// tmp := Delete ( tmp , i ) ;
60744: LD_ADDR_VAR 0 6
60748: PUSH
60749: LD_VAR 0 6
60753: PPUSH
60754: LD_VAR 0 4
60758: PPUSH
60759: CALL_OW 3
60763: ST_TO_ADDR
60764: GO 60664
60766: POP
60767: POP
// j := GetClosestHex ( unit , tmp ) ;
60768: LD_ADDR_VAR 0 5
60772: PUSH
60773: LD_VAR 0 1
60777: PPUSH
60778: LD_VAR 0 6
60782: PPUSH
60783: CALL 60059 0 2
60787: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60788: LD_VAR 0 1
60792: PPUSH
60793: LD_VAR 0 5
60797: PUSH
60798: LD_INT 1
60800: ARRAY
60801: PPUSH
60802: LD_VAR 0 5
60806: PUSH
60807: LD_INT 2
60809: ARRAY
60810: PPUSH
60811: CALL_OW 111
// end ;
60815: LD_VAR 0 3
60819: RET
// export function PrepareApemanSoldier ( ) ; begin
60820: LD_INT 0
60822: PPUSH
// uc_nation := 0 ;
60823: LD_ADDR_OWVAR 21
60827: PUSH
60828: LD_INT 0
60830: ST_TO_ADDR
// hc_sex := sex_male ;
60831: LD_ADDR_OWVAR 27
60835: PUSH
60836: LD_INT 1
60838: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60839: LD_ADDR_OWVAR 28
60843: PUSH
60844: LD_INT 15
60846: ST_TO_ADDR
// hc_gallery :=  ;
60847: LD_ADDR_OWVAR 33
60851: PUSH
60852: LD_STRING 
60854: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60855: LD_ADDR_OWVAR 31
60859: PUSH
60860: LD_INT 0
60862: PPUSH
60863: LD_INT 3
60865: PPUSH
60866: CALL_OW 12
60870: PUSH
60871: LD_INT 0
60873: PPUSH
60874: LD_INT 3
60876: PPUSH
60877: CALL_OW 12
60881: PUSH
60882: LD_INT 0
60884: PUSH
60885: LD_INT 0
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: ST_TO_ADDR
// end ;
60894: LD_VAR 0 1
60898: RET
// export function PrepareApemanEngineer ( ) ; begin
60899: LD_INT 0
60901: PPUSH
// uc_nation := 0 ;
60902: LD_ADDR_OWVAR 21
60906: PUSH
60907: LD_INT 0
60909: ST_TO_ADDR
// hc_sex := sex_male ;
60910: LD_ADDR_OWVAR 27
60914: PUSH
60915: LD_INT 1
60917: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60918: LD_ADDR_OWVAR 28
60922: PUSH
60923: LD_INT 16
60925: ST_TO_ADDR
// hc_gallery :=  ;
60926: LD_ADDR_OWVAR 33
60930: PUSH
60931: LD_STRING 
60933: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60934: LD_ADDR_OWVAR 31
60938: PUSH
60939: LD_INT 0
60941: PPUSH
60942: LD_INT 3
60944: PPUSH
60945: CALL_OW 12
60949: PUSH
60950: LD_INT 0
60952: PPUSH
60953: LD_INT 3
60955: PPUSH
60956: CALL_OW 12
60960: PUSH
60961: LD_INT 0
60963: PUSH
60964: LD_INT 0
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: ST_TO_ADDR
// end ;
60973: LD_VAR 0 1
60977: RET
// export function PrepareApeman ( agressivity ) ; begin
60978: LD_INT 0
60980: PPUSH
// uc_side := 0 ;
60981: LD_ADDR_OWVAR 20
60985: PUSH
60986: LD_INT 0
60988: ST_TO_ADDR
// uc_nation := 0 ;
60989: LD_ADDR_OWVAR 21
60993: PUSH
60994: LD_INT 0
60996: ST_TO_ADDR
// hc_sex := sex_male ;
60997: LD_ADDR_OWVAR 27
61001: PUSH
61002: LD_INT 1
61004: ST_TO_ADDR
// hc_class := class_apeman ;
61005: LD_ADDR_OWVAR 28
61009: PUSH
61010: LD_INT 12
61012: ST_TO_ADDR
// hc_gallery :=  ;
61013: LD_ADDR_OWVAR 33
61017: PUSH
61018: LD_STRING 
61020: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61021: LD_ADDR_OWVAR 35
61025: PUSH
61026: LD_VAR 0 1
61030: NEG
61031: PPUSH
61032: LD_VAR 0 1
61036: PPUSH
61037: CALL_OW 12
61041: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61042: LD_ADDR_OWVAR 31
61046: PUSH
61047: LD_INT 0
61049: PPUSH
61050: LD_INT 3
61052: PPUSH
61053: CALL_OW 12
61057: PUSH
61058: LD_INT 0
61060: PPUSH
61061: LD_INT 3
61063: PPUSH
61064: CALL_OW 12
61068: PUSH
61069: LD_INT 0
61071: PUSH
61072: LD_INT 0
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// end ;
61081: LD_VAR 0 2
61085: RET
// export function PrepareTiger ( agressivity ) ; begin
61086: LD_INT 0
61088: PPUSH
// uc_side := 0 ;
61089: LD_ADDR_OWVAR 20
61093: PUSH
61094: LD_INT 0
61096: ST_TO_ADDR
// uc_nation := 0 ;
61097: LD_ADDR_OWVAR 21
61101: PUSH
61102: LD_INT 0
61104: ST_TO_ADDR
// hc_class := class_tiger ;
61105: LD_ADDR_OWVAR 28
61109: PUSH
61110: LD_INT 14
61112: ST_TO_ADDR
// hc_gallery :=  ;
61113: LD_ADDR_OWVAR 33
61117: PUSH
61118: LD_STRING 
61120: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61121: LD_ADDR_OWVAR 35
61125: PUSH
61126: LD_VAR 0 1
61130: NEG
61131: PPUSH
61132: LD_VAR 0 1
61136: PPUSH
61137: CALL_OW 12
61141: ST_TO_ADDR
// end ;
61142: LD_VAR 0 2
61146: RET
// export function PrepareEnchidna ( ) ; begin
61147: LD_INT 0
61149: PPUSH
// uc_side := 0 ;
61150: LD_ADDR_OWVAR 20
61154: PUSH
61155: LD_INT 0
61157: ST_TO_ADDR
// uc_nation := 0 ;
61158: LD_ADDR_OWVAR 21
61162: PUSH
61163: LD_INT 0
61165: ST_TO_ADDR
// hc_class := class_baggie ;
61166: LD_ADDR_OWVAR 28
61170: PUSH
61171: LD_INT 13
61173: ST_TO_ADDR
// hc_gallery :=  ;
61174: LD_ADDR_OWVAR 33
61178: PUSH
61179: LD_STRING 
61181: ST_TO_ADDR
// end ;
61182: LD_VAR 0 1
61186: RET
// export function PrepareFrog ( ) ; begin
61187: LD_INT 0
61189: PPUSH
// uc_side := 0 ;
61190: LD_ADDR_OWVAR 20
61194: PUSH
61195: LD_INT 0
61197: ST_TO_ADDR
// uc_nation := 0 ;
61198: LD_ADDR_OWVAR 21
61202: PUSH
61203: LD_INT 0
61205: ST_TO_ADDR
// hc_class := class_frog ;
61206: LD_ADDR_OWVAR 28
61210: PUSH
61211: LD_INT 19
61213: ST_TO_ADDR
// hc_gallery :=  ;
61214: LD_ADDR_OWVAR 33
61218: PUSH
61219: LD_STRING 
61221: ST_TO_ADDR
// end ;
61222: LD_VAR 0 1
61226: RET
// export function PrepareFish ( ) ; begin
61227: LD_INT 0
61229: PPUSH
// uc_side := 0 ;
61230: LD_ADDR_OWVAR 20
61234: PUSH
61235: LD_INT 0
61237: ST_TO_ADDR
// uc_nation := 0 ;
61238: LD_ADDR_OWVAR 21
61242: PUSH
61243: LD_INT 0
61245: ST_TO_ADDR
// hc_class := class_fish ;
61246: LD_ADDR_OWVAR 28
61250: PUSH
61251: LD_INT 20
61253: ST_TO_ADDR
// hc_gallery :=  ;
61254: LD_ADDR_OWVAR 33
61258: PUSH
61259: LD_STRING 
61261: ST_TO_ADDR
// end ;
61262: LD_VAR 0 1
61266: RET
// export function PrepareBird ( ) ; begin
61267: LD_INT 0
61269: PPUSH
// uc_side := 0 ;
61270: LD_ADDR_OWVAR 20
61274: PUSH
61275: LD_INT 0
61277: ST_TO_ADDR
// uc_nation := 0 ;
61278: LD_ADDR_OWVAR 21
61282: PUSH
61283: LD_INT 0
61285: ST_TO_ADDR
// hc_class := class_phororhacos ;
61286: LD_ADDR_OWVAR 28
61290: PUSH
61291: LD_INT 18
61293: ST_TO_ADDR
// hc_gallery :=  ;
61294: LD_ADDR_OWVAR 33
61298: PUSH
61299: LD_STRING 
61301: ST_TO_ADDR
// end ;
61302: LD_VAR 0 1
61306: RET
// export function PrepareHorse ( ) ; begin
61307: LD_INT 0
61309: PPUSH
// uc_side := 0 ;
61310: LD_ADDR_OWVAR 20
61314: PUSH
61315: LD_INT 0
61317: ST_TO_ADDR
// uc_nation := 0 ;
61318: LD_ADDR_OWVAR 21
61322: PUSH
61323: LD_INT 0
61325: ST_TO_ADDR
// hc_class := class_horse ;
61326: LD_ADDR_OWVAR 28
61330: PUSH
61331: LD_INT 21
61333: ST_TO_ADDR
// hc_gallery :=  ;
61334: LD_ADDR_OWVAR 33
61338: PUSH
61339: LD_STRING 
61341: ST_TO_ADDR
// end ;
61342: LD_VAR 0 1
61346: RET
// export function PrepareMastodont ( ) ; begin
61347: LD_INT 0
61349: PPUSH
// uc_side := 0 ;
61350: LD_ADDR_OWVAR 20
61354: PUSH
61355: LD_INT 0
61357: ST_TO_ADDR
// uc_nation := 0 ;
61358: LD_ADDR_OWVAR 21
61362: PUSH
61363: LD_INT 0
61365: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61366: LD_ADDR_OWVAR 37
61370: PUSH
61371: LD_INT 31
61373: ST_TO_ADDR
// vc_control := control_rider ;
61374: LD_ADDR_OWVAR 38
61378: PUSH
61379: LD_INT 4
61381: ST_TO_ADDR
// end ;
61382: LD_VAR 0 1
61386: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61387: LD_INT 0
61389: PPUSH
61390: PPUSH
61391: PPUSH
// uc_side = 0 ;
61392: LD_ADDR_OWVAR 20
61396: PUSH
61397: LD_INT 0
61399: ST_TO_ADDR
// uc_nation = 0 ;
61400: LD_ADDR_OWVAR 21
61404: PUSH
61405: LD_INT 0
61407: ST_TO_ADDR
// InitHc_All ( ) ;
61408: CALL_OW 584
// InitVc ;
61412: CALL_OW 20
// if mastodonts then
61416: LD_VAR 0 6
61420: IFFALSE 61487
// for i = 1 to mastodonts do
61422: LD_ADDR_VAR 0 11
61426: PUSH
61427: DOUBLE
61428: LD_INT 1
61430: DEC
61431: ST_TO_ADDR
61432: LD_VAR 0 6
61436: PUSH
61437: FOR_TO
61438: IFFALSE 61485
// begin vc_chassis := 31 ;
61440: LD_ADDR_OWVAR 37
61444: PUSH
61445: LD_INT 31
61447: ST_TO_ADDR
// vc_control := control_rider ;
61448: LD_ADDR_OWVAR 38
61452: PUSH
61453: LD_INT 4
61455: ST_TO_ADDR
// animal := CreateVehicle ;
61456: LD_ADDR_VAR 0 12
61460: PUSH
61461: CALL_OW 45
61465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61466: LD_VAR 0 12
61470: PPUSH
61471: LD_VAR 0 8
61475: PPUSH
61476: LD_INT 0
61478: PPUSH
61479: CALL 63615 0 3
// end ;
61483: GO 61437
61485: POP
61486: POP
// if horses then
61487: LD_VAR 0 5
61491: IFFALSE 61558
// for i = 1 to horses do
61493: LD_ADDR_VAR 0 11
61497: PUSH
61498: DOUBLE
61499: LD_INT 1
61501: DEC
61502: ST_TO_ADDR
61503: LD_VAR 0 5
61507: PUSH
61508: FOR_TO
61509: IFFALSE 61556
// begin hc_class := 21 ;
61511: LD_ADDR_OWVAR 28
61515: PUSH
61516: LD_INT 21
61518: ST_TO_ADDR
// hc_gallery :=  ;
61519: LD_ADDR_OWVAR 33
61523: PUSH
61524: LD_STRING 
61526: ST_TO_ADDR
// animal := CreateHuman ;
61527: LD_ADDR_VAR 0 12
61531: PUSH
61532: CALL_OW 44
61536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61537: LD_VAR 0 12
61541: PPUSH
61542: LD_VAR 0 8
61546: PPUSH
61547: LD_INT 0
61549: PPUSH
61550: CALL 63615 0 3
// end ;
61554: GO 61508
61556: POP
61557: POP
// if birds then
61558: LD_VAR 0 1
61562: IFFALSE 61629
// for i = 1 to birds do
61564: LD_ADDR_VAR 0 11
61568: PUSH
61569: DOUBLE
61570: LD_INT 1
61572: DEC
61573: ST_TO_ADDR
61574: LD_VAR 0 1
61578: PUSH
61579: FOR_TO
61580: IFFALSE 61627
// begin hc_class = 18 ;
61582: LD_ADDR_OWVAR 28
61586: PUSH
61587: LD_INT 18
61589: ST_TO_ADDR
// hc_gallery =  ;
61590: LD_ADDR_OWVAR 33
61594: PUSH
61595: LD_STRING 
61597: ST_TO_ADDR
// animal := CreateHuman ;
61598: LD_ADDR_VAR 0 12
61602: PUSH
61603: CALL_OW 44
61607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61608: LD_VAR 0 12
61612: PPUSH
61613: LD_VAR 0 8
61617: PPUSH
61618: LD_INT 0
61620: PPUSH
61621: CALL 63615 0 3
// end ;
61625: GO 61579
61627: POP
61628: POP
// if tigers then
61629: LD_VAR 0 2
61633: IFFALSE 61717
// for i = 1 to tigers do
61635: LD_ADDR_VAR 0 11
61639: PUSH
61640: DOUBLE
61641: LD_INT 1
61643: DEC
61644: ST_TO_ADDR
61645: LD_VAR 0 2
61649: PUSH
61650: FOR_TO
61651: IFFALSE 61715
// begin hc_class = class_tiger ;
61653: LD_ADDR_OWVAR 28
61657: PUSH
61658: LD_INT 14
61660: ST_TO_ADDR
// hc_gallery =  ;
61661: LD_ADDR_OWVAR 33
61665: PUSH
61666: LD_STRING 
61668: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61669: LD_ADDR_OWVAR 35
61673: PUSH
61674: LD_INT 7
61676: NEG
61677: PPUSH
61678: LD_INT 7
61680: PPUSH
61681: CALL_OW 12
61685: ST_TO_ADDR
// animal := CreateHuman ;
61686: LD_ADDR_VAR 0 12
61690: PUSH
61691: CALL_OW 44
61695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61696: LD_VAR 0 12
61700: PPUSH
61701: LD_VAR 0 8
61705: PPUSH
61706: LD_INT 0
61708: PPUSH
61709: CALL 63615 0 3
// end ;
61713: GO 61650
61715: POP
61716: POP
// if apemans then
61717: LD_VAR 0 3
61721: IFFALSE 61844
// for i = 1 to apemans do
61723: LD_ADDR_VAR 0 11
61727: PUSH
61728: DOUBLE
61729: LD_INT 1
61731: DEC
61732: ST_TO_ADDR
61733: LD_VAR 0 3
61737: PUSH
61738: FOR_TO
61739: IFFALSE 61842
// begin hc_class = class_apeman ;
61741: LD_ADDR_OWVAR 28
61745: PUSH
61746: LD_INT 12
61748: ST_TO_ADDR
// hc_gallery =  ;
61749: LD_ADDR_OWVAR 33
61753: PUSH
61754: LD_STRING 
61756: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61757: LD_ADDR_OWVAR 35
61761: PUSH
61762: LD_INT 2
61764: NEG
61765: PPUSH
61766: LD_INT 2
61768: PPUSH
61769: CALL_OW 12
61773: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61774: LD_ADDR_OWVAR 31
61778: PUSH
61779: LD_INT 1
61781: PPUSH
61782: LD_INT 3
61784: PPUSH
61785: CALL_OW 12
61789: PUSH
61790: LD_INT 1
61792: PPUSH
61793: LD_INT 3
61795: PPUSH
61796: CALL_OW 12
61800: PUSH
61801: LD_INT 0
61803: PUSH
61804: LD_INT 0
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: ST_TO_ADDR
// animal := CreateHuman ;
61813: LD_ADDR_VAR 0 12
61817: PUSH
61818: CALL_OW 44
61822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61823: LD_VAR 0 12
61827: PPUSH
61828: LD_VAR 0 8
61832: PPUSH
61833: LD_INT 0
61835: PPUSH
61836: CALL 63615 0 3
// end ;
61840: GO 61738
61842: POP
61843: POP
// if enchidnas then
61844: LD_VAR 0 4
61848: IFFALSE 61915
// for i = 1 to enchidnas do
61850: LD_ADDR_VAR 0 11
61854: PUSH
61855: DOUBLE
61856: LD_INT 1
61858: DEC
61859: ST_TO_ADDR
61860: LD_VAR 0 4
61864: PUSH
61865: FOR_TO
61866: IFFALSE 61913
// begin hc_class = 13 ;
61868: LD_ADDR_OWVAR 28
61872: PUSH
61873: LD_INT 13
61875: ST_TO_ADDR
// hc_gallery =  ;
61876: LD_ADDR_OWVAR 33
61880: PUSH
61881: LD_STRING 
61883: ST_TO_ADDR
// animal := CreateHuman ;
61884: LD_ADDR_VAR 0 12
61888: PUSH
61889: CALL_OW 44
61893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61894: LD_VAR 0 12
61898: PPUSH
61899: LD_VAR 0 8
61903: PPUSH
61904: LD_INT 0
61906: PPUSH
61907: CALL 63615 0 3
// end ;
61911: GO 61865
61913: POP
61914: POP
// if fishes then
61915: LD_VAR 0 7
61919: IFFALSE 61986
// for i = 1 to fishes do
61921: LD_ADDR_VAR 0 11
61925: PUSH
61926: DOUBLE
61927: LD_INT 1
61929: DEC
61930: ST_TO_ADDR
61931: LD_VAR 0 7
61935: PUSH
61936: FOR_TO
61937: IFFALSE 61984
// begin hc_class = 20 ;
61939: LD_ADDR_OWVAR 28
61943: PUSH
61944: LD_INT 20
61946: ST_TO_ADDR
// hc_gallery =  ;
61947: LD_ADDR_OWVAR 33
61951: PUSH
61952: LD_STRING 
61954: ST_TO_ADDR
// animal := CreateHuman ;
61955: LD_ADDR_VAR 0 12
61959: PUSH
61960: CALL_OW 44
61964: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
61965: LD_VAR 0 12
61969: PPUSH
61970: LD_VAR 0 9
61974: PPUSH
61975: LD_INT 0
61977: PPUSH
61978: CALL 63615 0 3
// end ;
61982: GO 61936
61984: POP
61985: POP
// end ;
61986: LD_VAR 0 10
61990: RET
// export function WantHeal ( sci , unit ) ; begin
61991: LD_INT 0
61993: PPUSH
// if GetTaskList ( sci ) > 0 then
61994: LD_VAR 0 1
61998: PPUSH
61999: CALL_OW 437
62003: PUSH
62004: LD_INT 0
62006: GREATER
62007: IFFALSE 62077
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62009: LD_VAR 0 1
62013: PPUSH
62014: CALL_OW 437
62018: PUSH
62019: LD_INT 1
62021: ARRAY
62022: PUSH
62023: LD_INT 1
62025: ARRAY
62026: PUSH
62027: LD_STRING l
62029: EQUAL
62030: PUSH
62031: LD_VAR 0 1
62035: PPUSH
62036: CALL_OW 437
62040: PUSH
62041: LD_INT 1
62043: ARRAY
62044: PUSH
62045: LD_INT 4
62047: ARRAY
62048: PUSH
62049: LD_VAR 0 2
62053: EQUAL
62054: AND
62055: IFFALSE 62067
// result := true else
62057: LD_ADDR_VAR 0 3
62061: PUSH
62062: LD_INT 1
62064: ST_TO_ADDR
62065: GO 62075
// result := false ;
62067: LD_ADDR_VAR 0 3
62071: PUSH
62072: LD_INT 0
62074: ST_TO_ADDR
// end else
62075: GO 62085
// result := false ;
62077: LD_ADDR_VAR 0 3
62081: PUSH
62082: LD_INT 0
62084: ST_TO_ADDR
// end ;
62085: LD_VAR 0 3
62089: RET
// export function HealTarget ( sci ) ; begin
62090: LD_INT 0
62092: PPUSH
// if not sci then
62093: LD_VAR 0 1
62097: NOT
62098: IFFALSE 62102
// exit ;
62100: GO 62167
// result := 0 ;
62102: LD_ADDR_VAR 0 2
62106: PUSH
62107: LD_INT 0
62109: ST_TO_ADDR
// if GetTaskList ( sci ) then
62110: LD_VAR 0 1
62114: PPUSH
62115: CALL_OW 437
62119: IFFALSE 62167
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62121: LD_VAR 0 1
62125: PPUSH
62126: CALL_OW 437
62130: PUSH
62131: LD_INT 1
62133: ARRAY
62134: PUSH
62135: LD_INT 1
62137: ARRAY
62138: PUSH
62139: LD_STRING l
62141: EQUAL
62142: IFFALSE 62167
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62144: LD_ADDR_VAR 0 2
62148: PUSH
62149: LD_VAR 0 1
62153: PPUSH
62154: CALL_OW 437
62158: PUSH
62159: LD_INT 1
62161: ARRAY
62162: PUSH
62163: LD_INT 4
62165: ARRAY
62166: ST_TO_ADDR
// end ;
62167: LD_VAR 0 2
62171: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62172: LD_INT 0
62174: PPUSH
62175: PPUSH
62176: PPUSH
62177: PPUSH
// if not base_units then
62178: LD_VAR 0 1
62182: NOT
62183: IFFALSE 62187
// exit ;
62185: GO 62274
// result := false ;
62187: LD_ADDR_VAR 0 2
62191: PUSH
62192: LD_INT 0
62194: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62195: LD_ADDR_VAR 0 5
62199: PUSH
62200: LD_VAR 0 1
62204: PPUSH
62205: LD_INT 21
62207: PUSH
62208: LD_INT 3
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PPUSH
62215: CALL_OW 72
62219: ST_TO_ADDR
// if not tmp then
62220: LD_VAR 0 5
62224: NOT
62225: IFFALSE 62229
// exit ;
62227: GO 62274
// for i in tmp do
62229: LD_ADDR_VAR 0 3
62233: PUSH
62234: LD_VAR 0 5
62238: PUSH
62239: FOR_IN
62240: IFFALSE 62272
// begin result := EnemyInRange ( i , 22 ) ;
62242: LD_ADDR_VAR 0 2
62246: PUSH
62247: LD_VAR 0 3
62251: PPUSH
62252: LD_INT 22
62254: PPUSH
62255: CALL 59861 0 2
62259: ST_TO_ADDR
// if result then
62260: LD_VAR 0 2
62264: IFFALSE 62270
// exit ;
62266: POP
62267: POP
62268: GO 62274
// end ;
62270: GO 62239
62272: POP
62273: POP
// end ;
62274: LD_VAR 0 2
62278: RET
// export function FilterByTag ( units , tag ) ; begin
62279: LD_INT 0
62281: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62282: LD_ADDR_VAR 0 3
62286: PUSH
62287: LD_VAR 0 1
62291: PPUSH
62292: LD_INT 120
62294: PUSH
62295: LD_VAR 0 2
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PPUSH
62304: CALL_OW 72
62308: ST_TO_ADDR
// end ;
62309: LD_VAR 0 3
62313: RET
// export function IsDriver ( un ) ; begin
62314: LD_INT 0
62316: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62317: LD_ADDR_VAR 0 2
62321: PUSH
62322: LD_VAR 0 1
62326: PUSH
62327: LD_INT 55
62329: PUSH
62330: EMPTY
62331: LIST
62332: PPUSH
62333: CALL_OW 69
62337: IN
62338: ST_TO_ADDR
// end ;
62339: LD_VAR 0 2
62343: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62344: LD_INT 0
62346: PPUSH
62347: PPUSH
// list := [ ] ;
62348: LD_ADDR_VAR 0 5
62352: PUSH
62353: EMPTY
62354: ST_TO_ADDR
// case d of 0 :
62355: LD_VAR 0 3
62359: PUSH
62360: LD_INT 0
62362: DOUBLE
62363: EQUAL
62364: IFTRUE 62368
62366: GO 62501
62368: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62369: LD_ADDR_VAR 0 5
62373: PUSH
62374: LD_VAR 0 1
62378: PUSH
62379: LD_INT 4
62381: MINUS
62382: PUSH
62383: LD_VAR 0 2
62387: PUSH
62388: LD_INT 4
62390: MINUS
62391: PUSH
62392: LD_INT 2
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: LIST
62399: PUSH
62400: LD_VAR 0 1
62404: PUSH
62405: LD_INT 3
62407: MINUS
62408: PUSH
62409: LD_VAR 0 2
62413: PUSH
62414: LD_INT 1
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: LIST
62421: PUSH
62422: LD_VAR 0 1
62426: PUSH
62427: LD_INT 4
62429: PLUS
62430: PUSH
62431: LD_VAR 0 2
62435: PUSH
62436: LD_INT 4
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: PUSH
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 3
62451: PLUS
62452: PUSH
62453: LD_VAR 0 2
62457: PUSH
62458: LD_INT 3
62460: PLUS
62461: PUSH
62462: LD_INT 5
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: LD_VAR 0 2
62479: PUSH
62480: LD_INT 4
62482: PLUS
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// end ; 1 :
62499: GO 63199
62501: LD_INT 1
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62509
62507: GO 62642
62509: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62510: LD_ADDR_VAR 0 5
62514: PUSH
62515: LD_VAR 0 1
62519: PUSH
62520: LD_VAR 0 2
62524: PUSH
62525: LD_INT 4
62527: MINUS
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: LIST
62536: PUSH
62537: LD_VAR 0 1
62541: PUSH
62542: LD_INT 3
62544: MINUS
62545: PUSH
62546: LD_VAR 0 2
62550: PUSH
62551: LD_INT 3
62553: MINUS
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: LIST
62562: PUSH
62563: LD_VAR 0 1
62567: PUSH
62568: LD_INT 4
62570: MINUS
62571: PUSH
62572: LD_VAR 0 2
62576: PUSH
62577: LD_INT 1
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: PUSH
62585: LD_VAR 0 1
62589: PUSH
62590: LD_VAR 0 2
62594: PUSH
62595: LD_INT 3
62597: PLUS
62598: PUSH
62599: LD_INT 0
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: PUSH
62607: LD_VAR 0 1
62611: PUSH
62612: LD_INT 4
62614: PLUS
62615: PUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_INT 4
62623: PLUS
62624: PUSH
62625: LD_INT 5
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: ST_TO_ADDR
// end ; 2 :
62640: GO 63199
62642: LD_INT 2
62644: DOUBLE
62645: EQUAL
62646: IFTRUE 62650
62648: GO 62779
62650: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62651: LD_ADDR_VAR 0 5
62655: PUSH
62656: LD_VAR 0 1
62660: PUSH
62661: LD_VAR 0 2
62665: PUSH
62666: LD_INT 3
62668: MINUS
62669: PUSH
62670: LD_INT 3
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: LIST
62677: PUSH
62678: LD_VAR 0 1
62682: PUSH
62683: LD_INT 4
62685: PLUS
62686: PUSH
62687: LD_VAR 0 2
62691: PUSH
62692: LD_INT 4
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: LIST
62699: PUSH
62700: LD_VAR 0 1
62704: PUSH
62705: LD_VAR 0 2
62709: PUSH
62710: LD_INT 4
62712: PLUS
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: LIST
62721: PUSH
62722: LD_VAR 0 1
62726: PUSH
62727: LD_INT 3
62729: MINUS
62730: PUSH
62731: LD_VAR 0 2
62735: PUSH
62736: LD_INT 1
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: LIST
62743: PUSH
62744: LD_VAR 0 1
62748: PUSH
62749: LD_INT 4
62751: MINUS
62752: PUSH
62753: LD_VAR 0 2
62757: PUSH
62758: LD_INT 4
62760: MINUS
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: ST_TO_ADDR
// end ; 3 :
62777: GO 63199
62779: LD_INT 3
62781: DOUBLE
62782: EQUAL
62783: IFTRUE 62787
62785: GO 62920
62787: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62788: LD_ADDR_VAR 0 5
62792: PUSH
62793: LD_VAR 0 1
62797: PUSH
62798: LD_INT 3
62800: PLUS
62801: PUSH
62802: LD_VAR 0 2
62806: PUSH
62807: LD_INT 4
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: LIST
62814: PUSH
62815: LD_VAR 0 1
62819: PUSH
62820: LD_INT 4
62822: PLUS
62823: PUSH
62824: LD_VAR 0 2
62828: PUSH
62829: LD_INT 4
62831: PLUS
62832: PUSH
62833: LD_INT 5
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: LIST
62840: PUSH
62841: LD_VAR 0 1
62845: PUSH
62846: LD_INT 4
62848: MINUS
62849: PUSH
62850: LD_VAR 0 2
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: LIST
62862: PUSH
62863: LD_VAR 0 1
62867: PUSH
62868: LD_VAR 0 2
62872: PUSH
62873: LD_INT 4
62875: MINUS
62876: PUSH
62877: LD_INT 3
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: LIST
62884: PUSH
62885: LD_VAR 0 1
62889: PUSH
62890: LD_INT 3
62892: MINUS
62893: PUSH
62894: LD_VAR 0 2
62898: PUSH
62899: LD_INT 3
62901: MINUS
62902: PUSH
62903: LD_INT 2
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// end ; 4 :
62918: GO 63199
62920: LD_INT 4
62922: DOUBLE
62923: EQUAL
62924: IFTRUE 62928
62926: GO 63061
62928: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62929: LD_ADDR_VAR 0 5
62933: PUSH
62934: LD_VAR 0 1
62938: PUSH
62939: LD_VAR 0 2
62943: PUSH
62944: LD_INT 4
62946: PLUS
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: LIST
62955: PUSH
62956: LD_VAR 0 1
62960: PUSH
62961: LD_INT 3
62963: PLUS
62964: PUSH
62965: LD_VAR 0 2
62969: PUSH
62970: LD_INT 3
62972: PLUS
62973: PUSH
62974: LD_INT 5
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: LIST
62981: PUSH
62982: LD_VAR 0 1
62986: PUSH
62987: LD_INT 4
62989: PLUS
62990: PUSH
62991: LD_VAR 0 2
62995: PUSH
62996: LD_INT 4
62998: PUSH
62999: EMPTY
63000: LIST
63001: LIST
63002: LIST
63003: PUSH
63004: LD_VAR 0 1
63008: PUSH
63009: LD_VAR 0 2
63013: PUSH
63014: LD_INT 3
63016: MINUS
63017: PUSH
63018: LD_INT 3
63020: PUSH
63021: EMPTY
63022: LIST
63023: LIST
63024: LIST
63025: PUSH
63026: LD_VAR 0 1
63030: PUSH
63031: LD_INT 4
63033: MINUS
63034: PUSH
63035: LD_VAR 0 2
63039: PUSH
63040: LD_INT 4
63042: MINUS
63043: PUSH
63044: LD_INT 2
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: ST_TO_ADDR
// end ; 5 :
63059: GO 63199
63061: LD_INT 5
63063: DOUBLE
63064: EQUAL
63065: IFTRUE 63069
63067: GO 63198
63069: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63070: LD_ADDR_VAR 0 5
63074: PUSH
63075: LD_VAR 0 1
63079: PUSH
63080: LD_INT 4
63082: MINUS
63083: PUSH
63084: LD_VAR 0 2
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: LIST
63096: PUSH
63097: LD_VAR 0 1
63101: PUSH
63102: LD_VAR 0 2
63106: PUSH
63107: LD_INT 4
63109: MINUS
63110: PUSH
63111: LD_INT 3
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: LIST
63118: PUSH
63119: LD_VAR 0 1
63123: PUSH
63124: LD_INT 4
63126: PLUS
63127: PUSH
63128: LD_VAR 0 2
63132: PUSH
63133: LD_INT 4
63135: PLUS
63136: PUSH
63137: LD_INT 5
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: LIST
63144: PUSH
63145: LD_VAR 0 1
63149: PUSH
63150: LD_INT 3
63152: PLUS
63153: PUSH
63154: LD_VAR 0 2
63158: PUSH
63159: LD_INT 4
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: LIST
63166: PUSH
63167: LD_VAR 0 1
63171: PUSH
63172: LD_VAR 0 2
63176: PUSH
63177: LD_INT 3
63179: PLUS
63180: PUSH
63181: LD_INT 0
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: ST_TO_ADDR
// end ; end ;
63196: GO 63199
63198: POP
// result := list ;
63199: LD_ADDR_VAR 0 4
63203: PUSH
63204: LD_VAR 0 5
63208: ST_TO_ADDR
// end ;
63209: LD_VAR 0 4
63213: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63214: LD_INT 0
63216: PPUSH
63217: PPUSH
63218: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63219: LD_VAR 0 1
63223: NOT
63224: PUSH
63225: LD_VAR 0 2
63229: PUSH
63230: LD_INT 1
63232: PUSH
63233: LD_INT 2
63235: PUSH
63236: LD_INT 3
63238: PUSH
63239: LD_INT 4
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: IN
63248: NOT
63249: OR
63250: IFFALSE 63254
// exit ;
63252: GO 63337
// tmp := [ ] ;
63254: LD_ADDR_VAR 0 5
63258: PUSH
63259: EMPTY
63260: ST_TO_ADDR
// for i in units do
63261: LD_ADDR_VAR 0 4
63265: PUSH
63266: LD_VAR 0 1
63270: PUSH
63271: FOR_IN
63272: IFFALSE 63306
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63274: LD_ADDR_VAR 0 5
63278: PUSH
63279: LD_VAR 0 5
63283: PPUSH
63284: LD_VAR 0 4
63288: PPUSH
63289: LD_VAR 0 2
63293: PPUSH
63294: CALL_OW 259
63298: PPUSH
63299: CALL 64697 0 2
63303: ST_TO_ADDR
63304: GO 63271
63306: POP
63307: POP
// if not tmp then
63308: LD_VAR 0 5
63312: NOT
63313: IFFALSE 63317
// exit ;
63315: GO 63337
// result := SortListByListDesc ( units , tmp ) ;
63317: LD_ADDR_VAR 0 3
63321: PUSH
63322: LD_VAR 0 1
63326: PPUSH
63327: LD_VAR 0 5
63331: PPUSH
63332: CALL_OW 77
63336: ST_TO_ADDR
// end ;
63337: LD_VAR 0 3
63341: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63342: LD_INT 0
63344: PPUSH
63345: PPUSH
63346: PPUSH
// result := false ;
63347: LD_ADDR_VAR 0 3
63351: PUSH
63352: LD_INT 0
63354: ST_TO_ADDR
// if not building then
63355: LD_VAR 0 2
63359: NOT
63360: IFFALSE 63364
// exit ;
63362: GO 63502
// x := GetX ( building ) ;
63364: LD_ADDR_VAR 0 4
63368: PUSH
63369: LD_VAR 0 2
63373: PPUSH
63374: CALL_OW 250
63378: ST_TO_ADDR
// y := GetY ( building ) ;
63379: LD_ADDR_VAR 0 5
63383: PUSH
63384: LD_VAR 0 2
63388: PPUSH
63389: CALL_OW 251
63393: ST_TO_ADDR
// if not x or not y then
63394: LD_VAR 0 4
63398: NOT
63399: PUSH
63400: LD_VAR 0 5
63404: NOT
63405: OR
63406: IFFALSE 63410
// exit ;
63408: GO 63502
// if GetTaskList ( unit ) then
63410: LD_VAR 0 1
63414: PPUSH
63415: CALL_OW 437
63419: IFFALSE 63502
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63421: LD_STRING e
63423: PUSH
63424: LD_VAR 0 1
63428: PPUSH
63429: CALL_OW 437
63433: PUSH
63434: LD_INT 1
63436: ARRAY
63437: PUSH
63438: LD_INT 1
63440: ARRAY
63441: EQUAL
63442: PUSH
63443: LD_VAR 0 4
63447: PUSH
63448: LD_VAR 0 1
63452: PPUSH
63453: CALL_OW 437
63457: PUSH
63458: LD_INT 1
63460: ARRAY
63461: PUSH
63462: LD_INT 2
63464: ARRAY
63465: EQUAL
63466: AND
63467: PUSH
63468: LD_VAR 0 5
63472: PUSH
63473: LD_VAR 0 1
63477: PPUSH
63478: CALL_OW 437
63482: PUSH
63483: LD_INT 1
63485: ARRAY
63486: PUSH
63487: LD_INT 3
63489: ARRAY
63490: EQUAL
63491: AND
63492: IFFALSE 63502
// result := true end ;
63494: LD_ADDR_VAR 0 3
63498: PUSH
63499: LD_INT 1
63501: ST_TO_ADDR
// end ;
63502: LD_VAR 0 3
63506: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63507: LD_INT 0
63509: PPUSH
// result := false ;
63510: LD_ADDR_VAR 0 4
63514: PUSH
63515: LD_INT 0
63517: ST_TO_ADDR
// if GetTaskList ( unit ) then
63518: LD_VAR 0 1
63522: PPUSH
63523: CALL_OW 437
63527: IFFALSE 63610
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63529: LD_STRING M
63531: PUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL_OW 437
63541: PUSH
63542: LD_INT 1
63544: ARRAY
63545: PUSH
63546: LD_INT 1
63548: ARRAY
63549: EQUAL
63550: PUSH
63551: LD_VAR 0 2
63555: PUSH
63556: LD_VAR 0 1
63560: PPUSH
63561: CALL_OW 437
63565: PUSH
63566: LD_INT 1
63568: ARRAY
63569: PUSH
63570: LD_INT 2
63572: ARRAY
63573: EQUAL
63574: AND
63575: PUSH
63576: LD_VAR 0 3
63580: PUSH
63581: LD_VAR 0 1
63585: PPUSH
63586: CALL_OW 437
63590: PUSH
63591: LD_INT 1
63593: ARRAY
63594: PUSH
63595: LD_INT 3
63597: ARRAY
63598: EQUAL
63599: AND
63600: IFFALSE 63610
// result := true ;
63602: LD_ADDR_VAR 0 4
63606: PUSH
63607: LD_INT 1
63609: ST_TO_ADDR
// end ; end ;
63610: LD_VAR 0 4
63614: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63615: LD_INT 0
63617: PPUSH
63618: PPUSH
63619: PPUSH
63620: PPUSH
// if not unit or not area then
63621: LD_VAR 0 1
63625: NOT
63626: PUSH
63627: LD_VAR 0 2
63631: NOT
63632: OR
63633: IFFALSE 63637
// exit ;
63635: GO 63800
// tmp := AreaToList ( area , i ) ;
63637: LD_ADDR_VAR 0 6
63641: PUSH
63642: LD_VAR 0 2
63646: PPUSH
63647: LD_VAR 0 5
63651: PPUSH
63652: CALL_OW 517
63656: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63657: LD_ADDR_VAR 0 5
63661: PUSH
63662: DOUBLE
63663: LD_INT 1
63665: DEC
63666: ST_TO_ADDR
63667: LD_VAR 0 6
63671: PUSH
63672: LD_INT 1
63674: ARRAY
63675: PUSH
63676: FOR_TO
63677: IFFALSE 63798
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63679: LD_ADDR_VAR 0 7
63683: PUSH
63684: LD_VAR 0 6
63688: PUSH
63689: LD_INT 1
63691: ARRAY
63692: PUSH
63693: LD_VAR 0 5
63697: ARRAY
63698: PUSH
63699: LD_VAR 0 6
63703: PUSH
63704: LD_INT 2
63706: ARRAY
63707: PUSH
63708: LD_VAR 0 5
63712: ARRAY
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
63718: LD_INT 92
63720: PUSH
63721: LD_VAR 0 7
63725: PUSH
63726: LD_INT 1
63728: ARRAY
63729: PUSH
63730: LD_VAR 0 7
63734: PUSH
63735: LD_INT 2
63737: ARRAY
63738: PUSH
63739: LD_INT 3
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: PPUSH
63748: CALL_OW 69
63752: PUSH
63753: LD_INT 0
63755: EQUAL
63756: IFFALSE 63796
// begin PlaceUnitArea ( unit , area , mode ) ;
63758: LD_VAR 0 1
63762: PPUSH
63763: LD_VAR 0 2
63767: PPUSH
63768: LD_VAR 0 3
63772: PPUSH
63773: CALL_OW 49
// result := IsPlaced ( unit ) ;
63777: LD_ADDR_VAR 0 4
63781: PUSH
63782: LD_VAR 0 1
63786: PPUSH
63787: CALL_OW 305
63791: ST_TO_ADDR
// exit ;
63792: POP
63793: POP
63794: GO 63800
// end ; end ;
63796: GO 63676
63798: POP
63799: POP
// end ;
63800: LD_VAR 0 4
63804: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63805: LD_INT 0
63807: PPUSH
63808: PPUSH
63809: PPUSH
// if not side or side > 8 then
63810: LD_VAR 0 1
63814: NOT
63815: PUSH
63816: LD_VAR 0 1
63820: PUSH
63821: LD_INT 8
63823: GREATER
63824: OR
63825: IFFALSE 63829
// exit ;
63827: GO 64016
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63829: LD_ADDR_VAR 0 4
63833: PUSH
63834: LD_INT 22
63836: PUSH
63837: LD_VAR 0 1
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 21
63848: PUSH
63849: LD_INT 3
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PPUSH
63860: CALL_OW 69
63864: ST_TO_ADDR
// if not tmp then
63865: LD_VAR 0 4
63869: NOT
63870: IFFALSE 63874
// exit ;
63872: GO 64016
// enable_addtolog := true ;
63874: LD_ADDR_OWVAR 81
63878: PUSH
63879: LD_INT 1
63881: ST_TO_ADDR
// AddToLog ( [ ) ;
63882: LD_STRING [
63884: PPUSH
63885: CALL_OW 561
// for i in tmp do
63889: LD_ADDR_VAR 0 3
63893: PUSH
63894: LD_VAR 0 4
63898: PUSH
63899: FOR_IN
63900: IFFALSE 64007
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63902: LD_STRING [
63904: PUSH
63905: LD_VAR 0 3
63909: PPUSH
63910: CALL_OW 266
63914: STR
63915: PUSH
63916: LD_STRING , 
63918: STR
63919: PUSH
63920: LD_VAR 0 3
63924: PPUSH
63925: CALL_OW 250
63929: STR
63930: PUSH
63931: LD_STRING , 
63933: STR
63934: PUSH
63935: LD_VAR 0 3
63939: PPUSH
63940: CALL_OW 251
63944: STR
63945: PUSH
63946: LD_STRING , 
63948: STR
63949: PUSH
63950: LD_VAR 0 3
63954: PPUSH
63955: CALL_OW 254
63959: STR
63960: PUSH
63961: LD_STRING , 
63963: STR
63964: PUSH
63965: LD_VAR 0 3
63969: PPUSH
63970: LD_INT 1
63972: PPUSH
63973: CALL_OW 268
63977: STR
63978: PUSH
63979: LD_STRING , 
63981: STR
63982: PUSH
63983: LD_VAR 0 3
63987: PPUSH
63988: LD_INT 2
63990: PPUSH
63991: CALL_OW 268
63995: STR
63996: PUSH
63997: LD_STRING ],
63999: STR
64000: PPUSH
64001: CALL_OW 561
// end ;
64005: GO 63899
64007: POP
64008: POP
// AddToLog ( ]; ) ;
64009: LD_STRING ];
64011: PPUSH
64012: CALL_OW 561
// end ;
64016: LD_VAR 0 2
64020: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64021: LD_INT 0
64023: PPUSH
64024: PPUSH
64025: PPUSH
64026: PPUSH
64027: PPUSH
// if not area or not rate or not max then
64028: LD_VAR 0 1
64032: NOT
64033: PUSH
64034: LD_VAR 0 2
64038: NOT
64039: OR
64040: PUSH
64041: LD_VAR 0 4
64045: NOT
64046: OR
64047: IFFALSE 64051
// exit ;
64049: GO 64240
// while 1 do
64051: LD_INT 1
64053: IFFALSE 64240
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64055: LD_ADDR_VAR 0 9
64059: PUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: LD_INT 1
64067: PPUSH
64068: CALL_OW 287
64072: PUSH
64073: LD_INT 10
64075: MUL
64076: ST_TO_ADDR
// r := rate / 10 ;
64077: LD_ADDR_VAR 0 7
64081: PUSH
64082: LD_VAR 0 2
64086: PUSH
64087: LD_INT 10
64089: DIVREAL
64090: ST_TO_ADDR
// time := 1 1$00 ;
64091: LD_ADDR_VAR 0 8
64095: PUSH
64096: LD_INT 2100
64098: ST_TO_ADDR
// if amount < min then
64099: LD_VAR 0 9
64103: PUSH
64104: LD_VAR 0 3
64108: LESS
64109: IFFALSE 64127
// r := r * 2 else
64111: LD_ADDR_VAR 0 7
64115: PUSH
64116: LD_VAR 0 7
64120: PUSH
64121: LD_INT 2
64123: MUL
64124: ST_TO_ADDR
64125: GO 64153
// if amount > max then
64127: LD_VAR 0 9
64131: PUSH
64132: LD_VAR 0 4
64136: GREATER
64137: IFFALSE 64153
// r := r / 2 ;
64139: LD_ADDR_VAR 0 7
64143: PUSH
64144: LD_VAR 0 7
64148: PUSH
64149: LD_INT 2
64151: DIVREAL
64152: ST_TO_ADDR
// time := time / r ;
64153: LD_ADDR_VAR 0 8
64157: PUSH
64158: LD_VAR 0 8
64162: PUSH
64163: LD_VAR 0 7
64167: DIVREAL
64168: ST_TO_ADDR
// if time < 0 then
64169: LD_VAR 0 8
64173: PUSH
64174: LD_INT 0
64176: LESS
64177: IFFALSE 64194
// time := time * - 1 ;
64179: LD_ADDR_VAR 0 8
64183: PUSH
64184: LD_VAR 0 8
64188: PUSH
64189: LD_INT 1
64191: NEG
64192: MUL
64193: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64194: LD_VAR 0 8
64198: PUSH
64199: LD_INT 35
64201: PPUSH
64202: LD_INT 875
64204: PPUSH
64205: CALL_OW 12
64209: PLUS
64210: PPUSH
64211: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64215: LD_INT 1
64217: PPUSH
64218: LD_INT 5
64220: PPUSH
64221: CALL_OW 12
64225: PPUSH
64226: LD_VAR 0 1
64230: PPUSH
64231: LD_INT 1
64233: PPUSH
64234: CALL_OW 55
// end ;
64238: GO 64051
// end ;
64240: LD_VAR 0 5
64244: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64245: LD_INT 0
64247: PPUSH
64248: PPUSH
64249: PPUSH
64250: PPUSH
64251: PPUSH
64252: PPUSH
64253: PPUSH
64254: PPUSH
// if not turrets or not factories then
64255: LD_VAR 0 1
64259: NOT
64260: PUSH
64261: LD_VAR 0 2
64265: NOT
64266: OR
64267: IFFALSE 64271
// exit ;
64269: GO 64578
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64271: LD_ADDR_VAR 0 10
64275: PUSH
64276: LD_INT 5
64278: PUSH
64279: LD_INT 6
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: PUSH
64286: LD_INT 2
64288: PUSH
64289: LD_INT 4
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 3
64298: PUSH
64299: LD_INT 5
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: LIST
64310: PUSH
64311: LD_INT 24
64313: PUSH
64314: LD_INT 25
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 23
64323: PUSH
64324: LD_INT 27
64326: PUSH
64327: EMPTY
64328: LIST
64329: LIST
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 42
64337: PUSH
64338: LD_INT 43
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: LD_INT 44
64347: PUSH
64348: LD_INT 46
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 45
64357: PUSH
64358: LD_INT 47
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: ST_TO_ADDR
// result := [ ] ;
64375: LD_ADDR_VAR 0 3
64379: PUSH
64380: EMPTY
64381: ST_TO_ADDR
// for i in turrets do
64382: LD_ADDR_VAR 0 4
64386: PUSH
64387: LD_VAR 0 1
64391: PUSH
64392: FOR_IN
64393: IFFALSE 64576
// begin nat := GetNation ( i ) ;
64395: LD_ADDR_VAR 0 7
64399: PUSH
64400: LD_VAR 0 4
64404: PPUSH
64405: CALL_OW 248
64409: ST_TO_ADDR
// weapon := 0 ;
64410: LD_ADDR_VAR 0 8
64414: PUSH
64415: LD_INT 0
64417: ST_TO_ADDR
// if not nat then
64418: LD_VAR 0 7
64422: NOT
64423: IFFALSE 64427
// continue ;
64425: GO 64392
// for j in list [ nat ] do
64427: LD_ADDR_VAR 0 5
64431: PUSH
64432: LD_VAR 0 10
64436: PUSH
64437: LD_VAR 0 7
64441: ARRAY
64442: PUSH
64443: FOR_IN
64444: IFFALSE 64485
// if GetBWeapon ( i ) = j [ 1 ] then
64446: LD_VAR 0 4
64450: PPUSH
64451: CALL_OW 269
64455: PUSH
64456: LD_VAR 0 5
64460: PUSH
64461: LD_INT 1
64463: ARRAY
64464: EQUAL
64465: IFFALSE 64483
// begin weapon := j [ 2 ] ;
64467: LD_ADDR_VAR 0 8
64471: PUSH
64472: LD_VAR 0 5
64476: PUSH
64477: LD_INT 2
64479: ARRAY
64480: ST_TO_ADDR
// break ;
64481: GO 64485
// end ;
64483: GO 64443
64485: POP
64486: POP
// if not weapon then
64487: LD_VAR 0 8
64491: NOT
64492: IFFALSE 64496
// continue ;
64494: GO 64392
// for k in factories do
64496: LD_ADDR_VAR 0 6
64500: PUSH
64501: LD_VAR 0 2
64505: PUSH
64506: FOR_IN
64507: IFFALSE 64572
// begin weapons := AvailableWeaponList ( k ) ;
64509: LD_ADDR_VAR 0 9
64513: PUSH
64514: LD_VAR 0 6
64518: PPUSH
64519: CALL_OW 478
64523: ST_TO_ADDR
// if not weapons then
64524: LD_VAR 0 9
64528: NOT
64529: IFFALSE 64533
// continue ;
64531: GO 64506
// if weapon in weapons then
64533: LD_VAR 0 8
64537: PUSH
64538: LD_VAR 0 9
64542: IN
64543: IFFALSE 64570
// begin result := [ i , weapon ] ;
64545: LD_ADDR_VAR 0 3
64549: PUSH
64550: LD_VAR 0 4
64554: PUSH
64555: LD_VAR 0 8
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: ST_TO_ADDR
// exit ;
64564: POP
64565: POP
64566: POP
64567: POP
64568: GO 64578
// end ; end ;
64570: GO 64506
64572: POP
64573: POP
// end ;
64574: GO 64392
64576: POP
64577: POP
// end ;
64578: LD_VAR 0 3
64582: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64583: LD_INT 0
64585: PPUSH
// if not side or side > 8 then
64586: LD_VAR 0 3
64590: NOT
64591: PUSH
64592: LD_VAR 0 3
64596: PUSH
64597: LD_INT 8
64599: GREATER
64600: OR
64601: IFFALSE 64605
// exit ;
64603: GO 64664
// if not range then
64605: LD_VAR 0 4
64609: NOT
64610: IFFALSE 64621
// range := - 12 ;
64612: LD_ADDR_VAR 0 4
64616: PUSH
64617: LD_INT 12
64619: NEG
64620: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64621: LD_VAR 0 1
64625: PPUSH
64626: LD_VAR 0 2
64630: PPUSH
64631: LD_VAR 0 3
64635: PPUSH
64636: LD_VAR 0 4
64640: PPUSH
64641: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64645: LD_VAR 0 1
64649: PPUSH
64650: LD_VAR 0 2
64654: PPUSH
64655: LD_VAR 0 3
64659: PPUSH
64660: CALL_OW 331
// end ;
64664: LD_VAR 0 5
64668: RET
// export function Video ( mode ) ; begin
64669: LD_INT 0
64671: PPUSH
// ingame_video = mode ;
64672: LD_ADDR_OWVAR 52
64676: PUSH
64677: LD_VAR 0 1
64681: ST_TO_ADDR
// interface_hidden = mode ;
64682: LD_ADDR_OWVAR 54
64686: PUSH
64687: LD_VAR 0 1
64691: ST_TO_ADDR
// end ;
64692: LD_VAR 0 2
64696: RET
// export function Join ( array , element ) ; begin
64697: LD_INT 0
64699: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64700: LD_ADDR_VAR 0 3
64704: PUSH
64705: LD_VAR 0 1
64709: PPUSH
64710: LD_VAR 0 1
64714: PUSH
64715: LD_INT 1
64717: PLUS
64718: PPUSH
64719: LD_VAR 0 2
64723: PPUSH
64724: CALL_OW 1
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 3
64733: RET
// export function JoinUnion ( array , element ) ; begin
64734: LD_INT 0
64736: PPUSH
// result := array union element ;
64737: LD_ADDR_VAR 0 3
64741: PUSH
64742: LD_VAR 0 1
64746: PUSH
64747: LD_VAR 0 2
64751: UNION
64752: ST_TO_ADDR
// end ;
64753: LD_VAR 0 3
64757: RET
// export function GetBehemoths ( side ) ; begin
64758: LD_INT 0
64760: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64761: LD_ADDR_VAR 0 2
64765: PUSH
64766: LD_INT 22
64768: PUSH
64769: LD_VAR 0 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 31
64780: PUSH
64781: LD_INT 25
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PPUSH
64792: CALL_OW 69
64796: ST_TO_ADDR
// end ;
64797: LD_VAR 0 2
64801: RET
// export function Shuffle ( array ) ; var i , index ; begin
64802: LD_INT 0
64804: PPUSH
64805: PPUSH
64806: PPUSH
// result := [ ] ;
64807: LD_ADDR_VAR 0 2
64811: PUSH
64812: EMPTY
64813: ST_TO_ADDR
// if not array then
64814: LD_VAR 0 1
64818: NOT
64819: IFFALSE 64823
// exit ;
64821: GO 64922
// Randomize ;
64823: CALL_OW 10
// for i = array downto 1 do
64827: LD_ADDR_VAR 0 3
64831: PUSH
64832: DOUBLE
64833: LD_VAR 0 1
64837: INC
64838: ST_TO_ADDR
64839: LD_INT 1
64841: PUSH
64842: FOR_DOWNTO
64843: IFFALSE 64920
// begin index := rand ( 1 , array ) ;
64845: LD_ADDR_VAR 0 4
64849: PUSH
64850: LD_INT 1
64852: PPUSH
64853: LD_VAR 0 1
64857: PPUSH
64858: CALL_OW 12
64862: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64863: LD_ADDR_VAR 0 2
64867: PUSH
64868: LD_VAR 0 2
64872: PPUSH
64873: LD_VAR 0 2
64877: PUSH
64878: LD_INT 1
64880: PLUS
64881: PPUSH
64882: LD_VAR 0 1
64886: PUSH
64887: LD_VAR 0 4
64891: ARRAY
64892: PPUSH
64893: CALL_OW 2
64897: ST_TO_ADDR
// array := Delete ( array , index ) ;
64898: LD_ADDR_VAR 0 1
64902: PUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_VAR 0 4
64912: PPUSH
64913: CALL_OW 3
64917: ST_TO_ADDR
// end ;
64918: GO 64842
64920: POP
64921: POP
// end ;
64922: LD_VAR 0 2
64926: RET
// export function GetBaseMaterials ( base ) ; begin
64927: LD_INT 0
64929: PPUSH
// result := [ 0 , 0 , 0 ] ;
64930: LD_ADDR_VAR 0 2
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: ST_TO_ADDR
// if not base then
64949: LD_VAR 0 1
64953: NOT
64954: IFFALSE 64958
// exit ;
64956: GO 65007
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
64958: LD_ADDR_VAR 0 2
64962: PUSH
64963: LD_VAR 0 1
64967: PPUSH
64968: LD_INT 1
64970: PPUSH
64971: CALL_OW 275
64975: PUSH
64976: LD_VAR 0 1
64980: PPUSH
64981: LD_INT 2
64983: PPUSH
64984: CALL_OW 275
64988: PUSH
64989: LD_VAR 0 1
64993: PPUSH
64994: LD_INT 3
64996: PPUSH
64997: CALL_OW 275
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: ST_TO_ADDR
// end ;
65007: LD_VAR 0 2
65011: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65012: LD_INT 0
65014: PPUSH
65015: PPUSH
// result := array ;
65016: LD_ADDR_VAR 0 3
65020: PUSH
65021: LD_VAR 0 1
65025: ST_TO_ADDR
// if size >= result then
65026: LD_VAR 0 2
65030: PUSH
65031: LD_VAR 0 3
65035: GREATEREQUAL
65036: IFFALSE 65040
// exit ;
65038: GO 65090
// if size then
65040: LD_VAR 0 2
65044: IFFALSE 65090
// for i := array downto size do
65046: LD_ADDR_VAR 0 4
65050: PUSH
65051: DOUBLE
65052: LD_VAR 0 1
65056: INC
65057: ST_TO_ADDR
65058: LD_VAR 0 2
65062: PUSH
65063: FOR_DOWNTO
65064: IFFALSE 65088
// result := Delete ( result , result ) ;
65066: LD_ADDR_VAR 0 3
65070: PUSH
65071: LD_VAR 0 3
65075: PPUSH
65076: LD_VAR 0 3
65080: PPUSH
65081: CALL_OW 3
65085: ST_TO_ADDR
65086: GO 65063
65088: POP
65089: POP
// end ;
65090: LD_VAR 0 3
65094: RET
// export function ComExit ( unit ) ; var tmp ; begin
65095: LD_INT 0
65097: PPUSH
65098: PPUSH
// if not IsInUnit ( unit ) then
65099: LD_VAR 0 1
65103: PPUSH
65104: CALL_OW 310
65108: NOT
65109: IFFALSE 65113
// exit ;
65111: GO 65173
// tmp := IsInUnit ( unit ) ;
65113: LD_ADDR_VAR 0 3
65117: PUSH
65118: LD_VAR 0 1
65122: PPUSH
65123: CALL_OW 310
65127: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65128: LD_VAR 0 3
65132: PPUSH
65133: CALL_OW 247
65137: PUSH
65138: LD_INT 2
65140: EQUAL
65141: IFFALSE 65154
// ComExitVehicle ( unit ) else
65143: LD_VAR 0 1
65147: PPUSH
65148: CALL_OW 121
65152: GO 65163
// ComExitBuilding ( unit ) ;
65154: LD_VAR 0 1
65158: PPUSH
65159: CALL_OW 122
// result := tmp ;
65163: LD_ADDR_VAR 0 2
65167: PUSH
65168: LD_VAR 0 3
65172: ST_TO_ADDR
// end ;
65173: LD_VAR 0 2
65177: RET
// export function ComExitAll ( units ) ; var i ; begin
65178: LD_INT 0
65180: PPUSH
65181: PPUSH
// if not units then
65182: LD_VAR 0 1
65186: NOT
65187: IFFALSE 65191
// exit ;
65189: GO 65217
// for i in units do
65191: LD_ADDR_VAR 0 3
65195: PUSH
65196: LD_VAR 0 1
65200: PUSH
65201: FOR_IN
65202: IFFALSE 65215
// ComExit ( i ) ;
65204: LD_VAR 0 3
65208: PPUSH
65209: CALL 65095 0 1
65213: GO 65201
65215: POP
65216: POP
// end ;
65217: LD_VAR 0 2
65221: RET
// export function ResetHc ; begin
65222: LD_INT 0
65224: PPUSH
// InitHc ;
65225: CALL_OW 19
// hc_importance := 0 ;
65229: LD_ADDR_OWVAR 32
65233: PUSH
65234: LD_INT 0
65236: ST_TO_ADDR
// end ;
65237: LD_VAR 0 1
65241: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65242: LD_INT 0
65244: PPUSH
65245: PPUSH
65246: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65247: LD_ADDR_VAR 0 6
65251: PUSH
65252: LD_VAR 0 1
65256: PUSH
65257: LD_VAR 0 3
65261: PLUS
65262: PUSH
65263: LD_INT 2
65265: DIV
65266: ST_TO_ADDR
// if _x < 0 then
65267: LD_VAR 0 6
65271: PUSH
65272: LD_INT 0
65274: LESS
65275: IFFALSE 65292
// _x := _x * - 1 ;
65277: LD_ADDR_VAR 0 6
65281: PUSH
65282: LD_VAR 0 6
65286: PUSH
65287: LD_INT 1
65289: NEG
65290: MUL
65291: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65292: LD_ADDR_VAR 0 7
65296: PUSH
65297: LD_VAR 0 2
65301: PUSH
65302: LD_VAR 0 4
65306: PLUS
65307: PUSH
65308: LD_INT 2
65310: DIV
65311: ST_TO_ADDR
// if _y < 0 then
65312: LD_VAR 0 7
65316: PUSH
65317: LD_INT 0
65319: LESS
65320: IFFALSE 65337
// _y := _y * - 1 ;
65322: LD_ADDR_VAR 0 7
65326: PUSH
65327: LD_VAR 0 7
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: MUL
65336: ST_TO_ADDR
// result := [ _x , _y ] ;
65337: LD_ADDR_VAR 0 5
65341: PUSH
65342: LD_VAR 0 6
65346: PUSH
65347: LD_VAR 0 7
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: ST_TO_ADDR
// end ;
65356: LD_VAR 0 5
65360: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65361: LD_INT 0
65363: PPUSH
65364: PPUSH
65365: PPUSH
65366: PPUSH
// task := GetTaskList ( unit ) ;
65367: LD_ADDR_VAR 0 7
65371: PUSH
65372: LD_VAR 0 1
65376: PPUSH
65377: CALL_OW 437
65381: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65382: LD_VAR 0 7
65386: NOT
65387: PUSH
65388: LD_VAR 0 1
65392: PPUSH
65393: LD_VAR 0 2
65397: PPUSH
65398: CALL_OW 308
65402: NOT
65403: AND
65404: IFFALSE 65408
// exit ;
65406: GO 65526
// if IsInArea ( unit , area ) then
65408: LD_VAR 0 1
65412: PPUSH
65413: LD_VAR 0 2
65417: PPUSH
65418: CALL_OW 308
65422: IFFALSE 65440
// begin ComMoveToArea ( unit , goAway ) ;
65424: LD_VAR 0 1
65428: PPUSH
65429: LD_VAR 0 3
65433: PPUSH
65434: CALL_OW 113
// exit ;
65438: GO 65526
// end ; if task [ 1 ] [ 1 ] <> M then
65440: LD_VAR 0 7
65444: PUSH
65445: LD_INT 1
65447: ARRAY
65448: PUSH
65449: LD_INT 1
65451: ARRAY
65452: PUSH
65453: LD_STRING M
65455: NONEQUAL
65456: IFFALSE 65460
// exit ;
65458: GO 65526
// x := task [ 1 ] [ 2 ] ;
65460: LD_ADDR_VAR 0 5
65464: PUSH
65465: LD_VAR 0 7
65469: PUSH
65470: LD_INT 1
65472: ARRAY
65473: PUSH
65474: LD_INT 2
65476: ARRAY
65477: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65478: LD_ADDR_VAR 0 6
65482: PUSH
65483: LD_VAR 0 7
65487: PUSH
65488: LD_INT 1
65490: ARRAY
65491: PUSH
65492: LD_INT 3
65494: ARRAY
65495: ST_TO_ADDR
// if InArea ( x , y , area ) then
65496: LD_VAR 0 5
65500: PPUSH
65501: LD_VAR 0 6
65505: PPUSH
65506: LD_VAR 0 2
65510: PPUSH
65511: CALL_OW 309
65515: IFFALSE 65526
// ComStop ( unit ) ;
65517: LD_VAR 0 1
65521: PPUSH
65522: CALL_OW 141
// end ;
65526: LD_VAR 0 4
65530: RET
// export function Abs ( value ) ; begin
65531: LD_INT 0
65533: PPUSH
// result := value ;
65534: LD_ADDR_VAR 0 2
65538: PUSH
65539: LD_VAR 0 1
65543: ST_TO_ADDR
// if value < 0 then
65544: LD_VAR 0 1
65548: PUSH
65549: LD_INT 0
65551: LESS
65552: IFFALSE 65569
// result := value * - 1 ;
65554: LD_ADDR_VAR 0 2
65558: PUSH
65559: LD_VAR 0 1
65563: PUSH
65564: LD_INT 1
65566: NEG
65567: MUL
65568: ST_TO_ADDR
// end ;
65569: LD_VAR 0 2
65573: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65574: LD_INT 0
65576: PPUSH
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
65582: PPUSH
65583: PPUSH
// if not unit or not building then
65584: LD_VAR 0 1
65588: NOT
65589: PUSH
65590: LD_VAR 0 2
65594: NOT
65595: OR
65596: IFFALSE 65600
// exit ;
65598: GO 65826
// x := GetX ( building ) ;
65600: LD_ADDR_VAR 0 4
65604: PUSH
65605: LD_VAR 0 2
65609: PPUSH
65610: CALL_OW 250
65614: ST_TO_ADDR
// y := GetY ( building ) ;
65615: LD_ADDR_VAR 0 6
65619: PUSH
65620: LD_VAR 0 2
65624: PPUSH
65625: CALL_OW 251
65629: ST_TO_ADDR
// d := GetDir ( building ) ;
65630: LD_ADDR_VAR 0 8
65634: PUSH
65635: LD_VAR 0 2
65639: PPUSH
65640: CALL_OW 254
65644: ST_TO_ADDR
// r := 4 ;
65645: LD_ADDR_VAR 0 9
65649: PUSH
65650: LD_INT 4
65652: ST_TO_ADDR
// for i := 1 to 5 do
65653: LD_ADDR_VAR 0 10
65657: PUSH
65658: DOUBLE
65659: LD_INT 1
65661: DEC
65662: ST_TO_ADDR
65663: LD_INT 5
65665: PUSH
65666: FOR_TO
65667: IFFALSE 65824
// begin _x := ShiftX ( x , d , r + i ) ;
65669: LD_ADDR_VAR 0 5
65673: PUSH
65674: LD_VAR 0 4
65678: PPUSH
65679: LD_VAR 0 8
65683: PPUSH
65684: LD_VAR 0 9
65688: PUSH
65689: LD_VAR 0 10
65693: PLUS
65694: PPUSH
65695: CALL_OW 272
65699: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65700: LD_ADDR_VAR 0 7
65704: PUSH
65705: LD_VAR 0 6
65709: PPUSH
65710: LD_VAR 0 8
65714: PPUSH
65715: LD_VAR 0 9
65719: PUSH
65720: LD_VAR 0 10
65724: PLUS
65725: PPUSH
65726: CALL_OW 273
65730: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65731: LD_VAR 0 5
65735: PPUSH
65736: LD_VAR 0 7
65740: PPUSH
65741: CALL_OW 488
65745: PUSH
65746: LD_VAR 0 5
65750: PPUSH
65751: LD_VAR 0 7
65755: PPUSH
65756: CALL_OW 428
65760: PPUSH
65761: CALL_OW 247
65765: PUSH
65766: LD_INT 3
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: IN
65776: NOT
65777: AND
65778: IFFALSE 65822
// begin ComMoveXY ( unit , _x , _y ) ;
65780: LD_VAR 0 1
65784: PPUSH
65785: LD_VAR 0 5
65789: PPUSH
65790: LD_VAR 0 7
65794: PPUSH
65795: CALL_OW 111
// result := [ _x , _y ] ;
65799: LD_ADDR_VAR 0 3
65803: PUSH
65804: LD_VAR 0 5
65808: PUSH
65809: LD_VAR 0 7
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: ST_TO_ADDR
// exit ;
65818: POP
65819: POP
65820: GO 65826
// end ; end ;
65822: GO 65666
65824: POP
65825: POP
// end ;
65826: LD_VAR 0 3
65830: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65831: LD_INT 0
65833: PPUSH
65834: PPUSH
65835: PPUSH
// result := 0 ;
65836: LD_ADDR_VAR 0 3
65840: PUSH
65841: LD_INT 0
65843: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65844: LD_VAR 0 1
65848: PUSH
65849: LD_INT 0
65851: LESS
65852: PUSH
65853: LD_VAR 0 1
65857: PUSH
65858: LD_INT 8
65860: GREATER
65861: OR
65862: PUSH
65863: LD_VAR 0 2
65867: PUSH
65868: LD_INT 0
65870: LESS
65871: OR
65872: PUSH
65873: LD_VAR 0 2
65877: PUSH
65878: LD_INT 8
65880: GREATER
65881: OR
65882: IFFALSE 65886
// exit ;
65884: GO 65961
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65886: LD_ADDR_VAR 0 4
65890: PUSH
65891: LD_INT 22
65893: PUSH
65894: LD_VAR 0 2
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PPUSH
65903: CALL_OW 69
65907: PUSH
65908: FOR_IN
65909: IFFALSE 65959
// begin un := UnitShoot ( i ) ;
65911: LD_ADDR_VAR 0 5
65915: PUSH
65916: LD_VAR 0 4
65920: PPUSH
65921: CALL_OW 504
65925: ST_TO_ADDR
// if GetSide ( un ) = side1 then
65926: LD_VAR 0 5
65930: PPUSH
65931: CALL_OW 255
65935: PUSH
65936: LD_VAR 0 1
65940: EQUAL
65941: IFFALSE 65957
// begin result := un ;
65943: LD_ADDR_VAR 0 3
65947: PUSH
65948: LD_VAR 0 5
65952: ST_TO_ADDR
// exit ;
65953: POP
65954: POP
65955: GO 65961
// end ; end ;
65957: GO 65908
65959: POP
65960: POP
// end ;
65961: LD_VAR 0 3
65965: RET
// export function GetCargoBay ( units ) ; begin
65966: LD_INT 0
65968: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
65969: LD_ADDR_VAR 0 2
65973: PUSH
65974: LD_VAR 0 1
65978: PPUSH
65979: LD_INT 2
65981: PUSH
65982: LD_INT 34
65984: PUSH
65985: LD_INT 12
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 34
65994: PUSH
65995: LD_INT 51
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 34
66004: PUSH
66005: LD_INT 32
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 34
66014: PUSH
66015: LD_INT 89
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: LIST
66026: LIST
66027: LIST
66028: PPUSH
66029: CALL_OW 72
66033: ST_TO_ADDR
// end ;
66034: LD_VAR 0 2
66038: RET
// export function Negate ( value ) ; begin
66039: LD_INT 0
66041: PPUSH
// result := not value ;
66042: LD_ADDR_VAR 0 2
66046: PUSH
66047: LD_VAR 0 1
66051: NOT
66052: ST_TO_ADDR
// end ;
66053: LD_VAR 0 2
66057: RET
// export function Inc ( value ) ; begin
66058: LD_INT 0
66060: PPUSH
// result := value + 1 ;
66061: LD_ADDR_VAR 0 2
66065: PUSH
66066: LD_VAR 0 1
66070: PUSH
66071: LD_INT 1
66073: PLUS
66074: ST_TO_ADDR
// end ;
66075: LD_VAR 0 2
66079: RET
// export function Dec ( value ) ; begin
66080: LD_INT 0
66082: PPUSH
// result := value - 1 ;
66083: LD_ADDR_VAR 0 2
66087: PUSH
66088: LD_VAR 0 1
66092: PUSH
66093: LD_INT 1
66095: MINUS
66096: ST_TO_ADDR
// end ;
66097: LD_VAR 0 2
66101: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66102: LD_INT 0
66104: PPUSH
66105: PPUSH
66106: PPUSH
66107: PPUSH
66108: PPUSH
66109: PPUSH
66110: PPUSH
66111: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66112: LD_VAR 0 1
66116: PPUSH
66117: LD_VAR 0 2
66121: PPUSH
66122: CALL_OW 488
66126: NOT
66127: PUSH
66128: LD_VAR 0 3
66132: PPUSH
66133: LD_VAR 0 4
66137: PPUSH
66138: CALL_OW 488
66142: NOT
66143: OR
66144: IFFALSE 66157
// begin result := - 1 ;
66146: LD_ADDR_VAR 0 5
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: ST_TO_ADDR
// exit ;
66155: GO 66392
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66157: LD_ADDR_VAR 0 12
66161: PUSH
66162: LD_VAR 0 1
66166: PPUSH
66167: LD_VAR 0 2
66171: PPUSH
66172: LD_VAR 0 3
66176: PPUSH
66177: LD_VAR 0 4
66181: PPUSH
66182: CALL 65242 0 4
66186: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66187: LD_ADDR_VAR 0 11
66191: PUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: LD_VAR 0 2
66201: PPUSH
66202: LD_VAR 0 12
66206: PUSH
66207: LD_INT 1
66209: ARRAY
66210: PPUSH
66211: LD_VAR 0 12
66215: PUSH
66216: LD_INT 2
66218: ARRAY
66219: PPUSH
66220: CALL_OW 298
66224: ST_TO_ADDR
// distance := 9999 ;
66225: LD_ADDR_VAR 0 10
66229: PUSH
66230: LD_INT 9999
66232: ST_TO_ADDR
// for i := 0 to 5 do
66233: LD_ADDR_VAR 0 6
66237: PUSH
66238: DOUBLE
66239: LD_INT 0
66241: DEC
66242: ST_TO_ADDR
66243: LD_INT 5
66245: PUSH
66246: FOR_TO
66247: IFFALSE 66390
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66249: LD_ADDR_VAR 0 7
66253: PUSH
66254: LD_VAR 0 1
66258: PPUSH
66259: LD_VAR 0 6
66263: PPUSH
66264: LD_VAR 0 11
66268: PPUSH
66269: CALL_OW 272
66273: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66274: LD_ADDR_VAR 0 8
66278: PUSH
66279: LD_VAR 0 2
66283: PPUSH
66284: LD_VAR 0 6
66288: PPUSH
66289: LD_VAR 0 11
66293: PPUSH
66294: CALL_OW 273
66298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66299: LD_VAR 0 7
66303: PPUSH
66304: LD_VAR 0 8
66308: PPUSH
66309: CALL_OW 488
66313: NOT
66314: IFFALSE 66318
// continue ;
66316: GO 66246
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66318: LD_ADDR_VAR 0 9
66322: PUSH
66323: LD_VAR 0 12
66327: PUSH
66328: LD_INT 1
66330: ARRAY
66331: PPUSH
66332: LD_VAR 0 12
66336: PUSH
66337: LD_INT 2
66339: ARRAY
66340: PPUSH
66341: LD_VAR 0 7
66345: PPUSH
66346: LD_VAR 0 8
66350: PPUSH
66351: CALL_OW 298
66355: ST_TO_ADDR
// if tmp < distance then
66356: LD_VAR 0 9
66360: PUSH
66361: LD_VAR 0 10
66365: LESS
66366: IFFALSE 66388
// begin result := i ;
66368: LD_ADDR_VAR 0 5
66372: PUSH
66373: LD_VAR 0 6
66377: ST_TO_ADDR
// distance := tmp ;
66378: LD_ADDR_VAR 0 10
66382: PUSH
66383: LD_VAR 0 9
66387: ST_TO_ADDR
// end ; end ;
66388: GO 66246
66390: POP
66391: POP
// end ;
66392: LD_VAR 0 5
66396: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66397: LD_INT 0
66399: PPUSH
66400: PPUSH
// if not driver or not IsInUnit ( driver ) then
66401: LD_VAR 0 1
66405: NOT
66406: PUSH
66407: LD_VAR 0 1
66411: PPUSH
66412: CALL_OW 310
66416: NOT
66417: OR
66418: IFFALSE 66422
// exit ;
66420: GO 66512
// vehicle := IsInUnit ( driver ) ;
66422: LD_ADDR_VAR 0 3
66426: PUSH
66427: LD_VAR 0 1
66431: PPUSH
66432: CALL_OW 310
66436: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66437: LD_VAR 0 1
66441: PPUSH
66442: LD_STRING \
66444: PUSH
66445: LD_INT 0
66447: PUSH
66448: LD_INT 0
66450: PUSH
66451: LD_INT 0
66453: PUSH
66454: LD_INT 0
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: PUSH
66472: LD_STRING E
66474: PUSH
66475: LD_INT 0
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: LD_VAR 0 3
66485: PUSH
66486: LD_INT 0
66488: PUSH
66489: LD_INT 0
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PPUSH
66508: CALL_OW 446
// end ;
66512: LD_VAR 0 2
66516: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66517: LD_INT 0
66519: PPUSH
66520: PPUSH
// if not driver or not IsInUnit ( driver ) then
66521: LD_VAR 0 1
66525: NOT
66526: PUSH
66527: LD_VAR 0 1
66531: PPUSH
66532: CALL_OW 310
66536: NOT
66537: OR
66538: IFFALSE 66542
// exit ;
66540: GO 66632
// vehicle := IsInUnit ( driver ) ;
66542: LD_ADDR_VAR 0 3
66546: PUSH
66547: LD_VAR 0 1
66551: PPUSH
66552: CALL_OW 310
66556: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66557: LD_VAR 0 1
66561: PPUSH
66562: LD_STRING \
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_INT 0
66573: PUSH
66574: LD_INT 0
66576: PUSH
66577: LD_INT 0
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: PUSH
66592: LD_STRING E
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: LD_VAR 0 3
66605: PUSH
66606: LD_INT 0
66608: PUSH
66609: LD_INT 0
66611: PUSH
66612: LD_INT 0
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PPUSH
66628: CALL_OW 447
// end ;
66632: LD_VAR 0 2
66636: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66637: LD_INT 0
66639: PPUSH
66640: PPUSH
66641: PPUSH
// tmp := [ ] ;
66642: LD_ADDR_VAR 0 5
66646: PUSH
66647: EMPTY
66648: ST_TO_ADDR
// for i in units do
66649: LD_ADDR_VAR 0 4
66653: PUSH
66654: LD_VAR 0 1
66658: PUSH
66659: FOR_IN
66660: IFFALSE 66698
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66662: LD_ADDR_VAR 0 5
66666: PUSH
66667: LD_VAR 0 5
66671: PPUSH
66672: LD_VAR 0 5
66676: PUSH
66677: LD_INT 1
66679: PLUS
66680: PPUSH
66681: LD_VAR 0 4
66685: PPUSH
66686: CALL_OW 256
66690: PPUSH
66691: CALL_OW 2
66695: ST_TO_ADDR
66696: GO 66659
66698: POP
66699: POP
// if not tmp then
66700: LD_VAR 0 5
66704: NOT
66705: IFFALSE 66709
// exit ;
66707: GO 66757
// if asc then
66709: LD_VAR 0 2
66713: IFFALSE 66737
// result := SortListByListAsc ( units , tmp ) else
66715: LD_ADDR_VAR 0 3
66719: PUSH
66720: LD_VAR 0 1
66724: PPUSH
66725: LD_VAR 0 5
66729: PPUSH
66730: CALL_OW 76
66734: ST_TO_ADDR
66735: GO 66757
// result := SortListByListDesc ( units , tmp ) ;
66737: LD_ADDR_VAR 0 3
66741: PUSH
66742: LD_VAR 0 1
66746: PPUSH
66747: LD_VAR 0 5
66751: PPUSH
66752: CALL_OW 77
66756: ST_TO_ADDR
// end ;
66757: LD_VAR 0 3
66761: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66762: LD_INT 0
66764: PPUSH
66765: PPUSH
// task := GetTaskList ( mech ) ;
66766: LD_ADDR_VAR 0 4
66770: PUSH
66771: LD_VAR 0 1
66775: PPUSH
66776: CALL_OW 437
66780: ST_TO_ADDR
// if not task then
66781: LD_VAR 0 4
66785: NOT
66786: IFFALSE 66790
// exit ;
66788: GO 66832
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66790: LD_ADDR_VAR 0 3
66794: PUSH
66795: LD_VAR 0 4
66799: PUSH
66800: LD_INT 1
66802: ARRAY
66803: PUSH
66804: LD_INT 1
66806: ARRAY
66807: PUSH
66808: LD_STRING r
66810: EQUAL
66811: PUSH
66812: LD_VAR 0 4
66816: PUSH
66817: LD_INT 1
66819: ARRAY
66820: PUSH
66821: LD_INT 4
66823: ARRAY
66824: PUSH
66825: LD_VAR 0 2
66829: EQUAL
66830: AND
66831: ST_TO_ADDR
// end ;
66832: LD_VAR 0 3
66836: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66837: LD_INT 0
66839: PPUSH
// SetDir ( unit , d ) ;
66840: LD_VAR 0 1
66844: PPUSH
66845: LD_VAR 0 4
66849: PPUSH
66850: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66854: LD_VAR 0 1
66858: PPUSH
66859: LD_VAR 0 2
66863: PPUSH
66864: LD_VAR 0 3
66868: PPUSH
66869: LD_VAR 0 5
66873: PPUSH
66874: CALL_OW 48
// end ;
66878: LD_VAR 0 6
66882: RET
// export function ToNaturalNumber ( number ) ; begin
66883: LD_INT 0
66885: PPUSH
// result := number div 1 ;
66886: LD_ADDR_VAR 0 2
66890: PUSH
66891: LD_VAR 0 1
66895: PUSH
66896: LD_INT 1
66898: DIV
66899: ST_TO_ADDR
// if number < 0 then
66900: LD_VAR 0 1
66904: PUSH
66905: LD_INT 0
66907: LESS
66908: IFFALSE 66918
// result := 0 ;
66910: LD_ADDR_VAR 0 2
66914: PUSH
66915: LD_INT 0
66917: ST_TO_ADDR
// end ;
66918: LD_VAR 0 2
66922: RET
// export function SortByClass ( units , class ) ; var un ; begin
66923: LD_INT 0
66925: PPUSH
66926: PPUSH
// if not units or not class then
66927: LD_VAR 0 1
66931: NOT
66932: PUSH
66933: LD_VAR 0 2
66937: NOT
66938: OR
66939: IFFALSE 66943
// exit ;
66941: GO 67038
// result := [ ] ;
66943: LD_ADDR_VAR 0 3
66947: PUSH
66948: EMPTY
66949: ST_TO_ADDR
// for un in units do
66950: LD_ADDR_VAR 0 4
66954: PUSH
66955: LD_VAR 0 1
66959: PUSH
66960: FOR_IN
66961: IFFALSE 67036
// if GetClass ( un ) = class then
66963: LD_VAR 0 4
66967: PPUSH
66968: CALL_OW 257
66972: PUSH
66973: LD_VAR 0 2
66977: EQUAL
66978: IFFALSE 67005
// result := Insert ( result , 1 , un ) else
66980: LD_ADDR_VAR 0 3
66984: PUSH
66985: LD_VAR 0 3
66989: PPUSH
66990: LD_INT 1
66992: PPUSH
66993: LD_VAR 0 4
66997: PPUSH
66998: CALL_OW 2
67002: ST_TO_ADDR
67003: GO 67034
// result := Replace ( result , result + 1 , un ) ;
67005: LD_ADDR_VAR 0 3
67009: PUSH
67010: LD_VAR 0 3
67014: PPUSH
67015: LD_VAR 0 3
67019: PUSH
67020: LD_INT 1
67022: PLUS
67023: PPUSH
67024: LD_VAR 0 4
67028: PPUSH
67029: CALL_OW 1
67033: ST_TO_ADDR
67034: GO 66960
67036: POP
67037: POP
// end ;
67038: LD_VAR 0 3
67042: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67043: LD_INT 0
67045: PPUSH
67046: PPUSH
67047: PPUSH
67048: PPUSH
67049: PPUSH
67050: PPUSH
67051: PPUSH
// result := [ ] ;
67052: LD_ADDR_VAR 0 4
67056: PUSH
67057: EMPTY
67058: ST_TO_ADDR
// if x - r < 0 then
67059: LD_VAR 0 1
67063: PUSH
67064: LD_VAR 0 3
67068: MINUS
67069: PUSH
67070: LD_INT 0
67072: LESS
67073: IFFALSE 67085
// min_x := 0 else
67075: LD_ADDR_VAR 0 8
67079: PUSH
67080: LD_INT 0
67082: ST_TO_ADDR
67083: GO 67101
// min_x := x - r ;
67085: LD_ADDR_VAR 0 8
67089: PUSH
67090: LD_VAR 0 1
67094: PUSH
67095: LD_VAR 0 3
67099: MINUS
67100: ST_TO_ADDR
// if y - r < 0 then
67101: LD_VAR 0 2
67105: PUSH
67106: LD_VAR 0 3
67110: MINUS
67111: PUSH
67112: LD_INT 0
67114: LESS
67115: IFFALSE 67127
// min_y := 0 else
67117: LD_ADDR_VAR 0 7
67121: PUSH
67122: LD_INT 0
67124: ST_TO_ADDR
67125: GO 67143
// min_y := y - r ;
67127: LD_ADDR_VAR 0 7
67131: PUSH
67132: LD_VAR 0 2
67136: PUSH
67137: LD_VAR 0 3
67141: MINUS
67142: ST_TO_ADDR
// max_x := x + r ;
67143: LD_ADDR_VAR 0 9
67147: PUSH
67148: LD_VAR 0 1
67152: PUSH
67153: LD_VAR 0 3
67157: PLUS
67158: ST_TO_ADDR
// max_y := y + r ;
67159: LD_ADDR_VAR 0 10
67163: PUSH
67164: LD_VAR 0 2
67168: PUSH
67169: LD_VAR 0 3
67173: PLUS
67174: ST_TO_ADDR
// for _x = min_x to max_x do
67175: LD_ADDR_VAR 0 5
67179: PUSH
67180: DOUBLE
67181: LD_VAR 0 8
67185: DEC
67186: ST_TO_ADDR
67187: LD_VAR 0 9
67191: PUSH
67192: FOR_TO
67193: IFFALSE 67294
// for _y = min_y to max_y do
67195: LD_ADDR_VAR 0 6
67199: PUSH
67200: DOUBLE
67201: LD_VAR 0 7
67205: DEC
67206: ST_TO_ADDR
67207: LD_VAR 0 10
67211: PUSH
67212: FOR_TO
67213: IFFALSE 67290
// begin if not ValidHex ( _x , _y ) then
67215: LD_VAR 0 5
67219: PPUSH
67220: LD_VAR 0 6
67224: PPUSH
67225: CALL_OW 488
67229: NOT
67230: IFFALSE 67234
// continue ;
67232: GO 67212
// if GetResourceTypeXY ( _x , _y ) then
67234: LD_VAR 0 5
67238: PPUSH
67239: LD_VAR 0 6
67243: PPUSH
67244: CALL_OW 283
67248: IFFALSE 67288
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67250: LD_ADDR_VAR 0 4
67254: PUSH
67255: LD_VAR 0 4
67259: PPUSH
67260: LD_VAR 0 4
67264: PUSH
67265: LD_INT 1
67267: PLUS
67268: PPUSH
67269: LD_VAR 0 5
67273: PUSH
67274: LD_VAR 0 6
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PPUSH
67283: CALL_OW 1
67287: ST_TO_ADDR
// end ;
67288: GO 67212
67290: POP
67291: POP
67292: GO 67192
67294: POP
67295: POP
// end ;
67296: LD_VAR 0 4
67300: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67301: LD_INT 0
67303: PPUSH
67304: PPUSH
67305: PPUSH
67306: PPUSH
67307: PPUSH
67308: PPUSH
67309: PPUSH
67310: PPUSH
// if not units then
67311: LD_VAR 0 1
67315: NOT
67316: IFFALSE 67320
// exit ;
67318: GO 67844
// result := UnitFilter ( units , [ f_ok ] ) ;
67320: LD_ADDR_VAR 0 3
67324: PUSH
67325: LD_VAR 0 1
67329: PPUSH
67330: LD_INT 50
67332: PUSH
67333: EMPTY
67334: LIST
67335: PPUSH
67336: CALL_OW 72
67340: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67341: LD_ADDR_VAR 0 8
67345: PUSH
67346: LD_VAR 0 1
67350: PUSH
67351: LD_INT 1
67353: ARRAY
67354: PPUSH
67355: CALL_OW 255
67359: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67360: LD_ADDR_VAR 0 10
67364: PUSH
67365: LD_INT 29
67367: PUSH
67368: LD_INT 91
67370: PUSH
67371: LD_INT 49
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: ST_TO_ADDR
// if not result then
67379: LD_VAR 0 3
67383: NOT
67384: IFFALSE 67388
// exit ;
67386: GO 67844
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67388: LD_ADDR_VAR 0 5
67392: PUSH
67393: LD_INT 81
67395: PUSH
67396: LD_VAR 0 8
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PPUSH
67405: CALL_OW 69
67409: ST_TO_ADDR
// for i in result do
67410: LD_ADDR_VAR 0 4
67414: PUSH
67415: LD_VAR 0 3
67419: PUSH
67420: FOR_IN
67421: IFFALSE 67842
// begin tag := GetTag ( i ) + 1 ;
67423: LD_ADDR_VAR 0 9
67427: PUSH
67428: LD_VAR 0 4
67432: PPUSH
67433: CALL_OW 110
67437: PUSH
67438: LD_INT 1
67440: PLUS
67441: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67442: LD_ADDR_VAR 0 7
67446: PUSH
67447: LD_VAR 0 4
67451: PPUSH
67452: CALL_OW 250
67456: PPUSH
67457: LD_VAR 0 4
67461: PPUSH
67462: CALL_OW 251
67466: PPUSH
67467: LD_INT 6
67469: PPUSH
67470: CALL 67043 0 3
67474: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67475: LD_VAR 0 4
67479: PPUSH
67480: CALL_OW 247
67484: PUSH
67485: LD_INT 2
67487: EQUAL
67488: PUSH
67489: LD_VAR 0 7
67493: AND
67494: PUSH
67495: LD_VAR 0 4
67499: PPUSH
67500: CALL_OW 264
67504: PUSH
67505: LD_VAR 0 10
67509: IN
67510: NOT
67511: AND
67512: IFFALSE 67551
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67514: LD_VAR 0 4
67518: PPUSH
67519: LD_VAR 0 7
67523: PUSH
67524: LD_INT 1
67526: ARRAY
67527: PUSH
67528: LD_INT 1
67530: ARRAY
67531: PPUSH
67532: LD_VAR 0 7
67536: PUSH
67537: LD_INT 1
67539: ARRAY
67540: PUSH
67541: LD_INT 2
67543: ARRAY
67544: PPUSH
67545: CALL_OW 116
67549: GO 67840
// if path > tag then
67551: LD_VAR 0 2
67555: PUSH
67556: LD_VAR 0 9
67560: GREATER
67561: IFFALSE 67769
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67563: LD_ADDR_VAR 0 6
67567: PUSH
67568: LD_VAR 0 5
67572: PPUSH
67573: LD_INT 91
67575: PUSH
67576: LD_VAR 0 4
67580: PUSH
67581: LD_INT 8
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: LIST
67588: PPUSH
67589: CALL_OW 72
67593: ST_TO_ADDR
// if nearEnemy then
67594: LD_VAR 0 6
67598: IFFALSE 67667
// begin if GetWeapon ( i ) = ru_time_lapser then
67600: LD_VAR 0 4
67604: PPUSH
67605: CALL_OW 264
67609: PUSH
67610: LD_INT 49
67612: EQUAL
67613: IFFALSE 67641
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67615: LD_VAR 0 4
67619: PPUSH
67620: LD_VAR 0 6
67624: PPUSH
67625: LD_VAR 0 4
67629: PPUSH
67630: CALL_OW 74
67634: PPUSH
67635: CALL_OW 112
67639: GO 67665
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67641: LD_VAR 0 4
67645: PPUSH
67646: LD_VAR 0 6
67650: PPUSH
67651: LD_VAR 0 4
67655: PPUSH
67656: CALL_OW 74
67660: PPUSH
67661: CALL_OW 115
// end else
67665: GO 67767
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67667: LD_VAR 0 4
67671: PPUSH
67672: LD_VAR 0 2
67676: PUSH
67677: LD_VAR 0 9
67681: ARRAY
67682: PUSH
67683: LD_INT 1
67685: ARRAY
67686: PPUSH
67687: LD_VAR 0 2
67691: PUSH
67692: LD_VAR 0 9
67696: ARRAY
67697: PUSH
67698: LD_INT 2
67700: ARRAY
67701: PPUSH
67702: CALL_OW 297
67706: PUSH
67707: LD_INT 6
67709: GREATER
67710: IFFALSE 67753
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67712: LD_VAR 0 4
67716: PPUSH
67717: LD_VAR 0 2
67721: PUSH
67722: LD_VAR 0 9
67726: ARRAY
67727: PUSH
67728: LD_INT 1
67730: ARRAY
67731: PPUSH
67732: LD_VAR 0 2
67736: PUSH
67737: LD_VAR 0 9
67741: ARRAY
67742: PUSH
67743: LD_INT 2
67745: ARRAY
67746: PPUSH
67747: CALL_OW 114
67751: GO 67767
// SetTag ( i , tag ) ;
67753: LD_VAR 0 4
67757: PPUSH
67758: LD_VAR 0 9
67762: PPUSH
67763: CALL_OW 109
// end else
67767: GO 67840
// if enemy then
67769: LD_VAR 0 5
67773: IFFALSE 67840
// begin if GetWeapon ( i ) = ru_time_lapser then
67775: LD_VAR 0 4
67779: PPUSH
67780: CALL_OW 264
67784: PUSH
67785: LD_INT 49
67787: EQUAL
67788: IFFALSE 67816
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67790: LD_VAR 0 4
67794: PPUSH
67795: LD_VAR 0 5
67799: PPUSH
67800: LD_VAR 0 4
67804: PPUSH
67805: CALL_OW 74
67809: PPUSH
67810: CALL_OW 112
67814: GO 67840
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67816: LD_VAR 0 4
67820: PPUSH
67821: LD_VAR 0 5
67825: PPUSH
67826: LD_VAR 0 4
67830: PPUSH
67831: CALL_OW 74
67835: PPUSH
67836: CALL_OW 115
// end ; end ;
67840: GO 67420
67842: POP
67843: POP
// end ;
67844: LD_VAR 0 3
67848: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67849: LD_INT 0
67851: PPUSH
67852: PPUSH
67853: PPUSH
// if not unit or IsInUnit ( unit ) then
67854: LD_VAR 0 1
67858: NOT
67859: PUSH
67860: LD_VAR 0 1
67864: PPUSH
67865: CALL_OW 310
67869: OR
67870: IFFALSE 67874
// exit ;
67872: GO 67965
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67874: LD_ADDR_VAR 0 4
67878: PUSH
67879: LD_VAR 0 1
67883: PPUSH
67884: CALL_OW 250
67888: PPUSH
67889: LD_VAR 0 2
67893: PPUSH
67894: LD_INT 1
67896: PPUSH
67897: CALL_OW 272
67901: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67902: LD_ADDR_VAR 0 5
67906: PUSH
67907: LD_VAR 0 1
67911: PPUSH
67912: CALL_OW 251
67916: PPUSH
67917: LD_VAR 0 2
67921: PPUSH
67922: LD_INT 1
67924: PPUSH
67925: CALL_OW 273
67929: ST_TO_ADDR
// if ValidHex ( x , y ) then
67930: LD_VAR 0 4
67934: PPUSH
67935: LD_VAR 0 5
67939: PPUSH
67940: CALL_OW 488
67944: IFFALSE 67965
// ComTurnXY ( unit , x , y ) ;
67946: LD_VAR 0 1
67950: PPUSH
67951: LD_VAR 0 4
67955: PPUSH
67956: LD_VAR 0 5
67960: PPUSH
67961: CALL_OW 118
// end ;
67965: LD_VAR 0 3
67969: RET
// export function SeeUnits ( side , units ) ; var i ; begin
67970: LD_INT 0
67972: PPUSH
67973: PPUSH
// result := false ;
67974: LD_ADDR_VAR 0 3
67978: PUSH
67979: LD_INT 0
67981: ST_TO_ADDR
// if not units then
67982: LD_VAR 0 2
67986: NOT
67987: IFFALSE 67991
// exit ;
67989: GO 68036
// for i in units do
67991: LD_ADDR_VAR 0 4
67995: PUSH
67996: LD_VAR 0 2
68000: PUSH
68001: FOR_IN
68002: IFFALSE 68034
// if See ( side , i ) then
68004: LD_VAR 0 1
68008: PPUSH
68009: LD_VAR 0 4
68013: PPUSH
68014: CALL_OW 292
68018: IFFALSE 68032
// begin result := true ;
68020: LD_ADDR_VAR 0 3
68024: PUSH
68025: LD_INT 1
68027: ST_TO_ADDR
// exit ;
68028: POP
68029: POP
68030: GO 68036
// end ;
68032: GO 68001
68034: POP
68035: POP
// end ;
68036: LD_VAR 0 3
68040: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68041: LD_INT 0
68043: PPUSH
68044: PPUSH
68045: PPUSH
68046: PPUSH
// if not unit or not points then
68047: LD_VAR 0 1
68051: NOT
68052: PUSH
68053: LD_VAR 0 2
68057: NOT
68058: OR
68059: IFFALSE 68063
// exit ;
68061: GO 68153
// dist := 99999 ;
68063: LD_ADDR_VAR 0 5
68067: PUSH
68068: LD_INT 99999
68070: ST_TO_ADDR
// for i in points do
68071: LD_ADDR_VAR 0 4
68075: PUSH
68076: LD_VAR 0 2
68080: PUSH
68081: FOR_IN
68082: IFFALSE 68151
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68084: LD_ADDR_VAR 0 6
68088: PUSH
68089: LD_VAR 0 1
68093: PPUSH
68094: LD_VAR 0 4
68098: PUSH
68099: LD_INT 1
68101: ARRAY
68102: PPUSH
68103: LD_VAR 0 4
68107: PUSH
68108: LD_INT 2
68110: ARRAY
68111: PPUSH
68112: CALL_OW 297
68116: ST_TO_ADDR
// if tmpDist < dist then
68117: LD_VAR 0 6
68121: PUSH
68122: LD_VAR 0 5
68126: LESS
68127: IFFALSE 68149
// begin result := i ;
68129: LD_ADDR_VAR 0 3
68133: PUSH
68134: LD_VAR 0 4
68138: ST_TO_ADDR
// dist := tmpDist ;
68139: LD_ADDR_VAR 0 5
68143: PUSH
68144: LD_VAR 0 6
68148: ST_TO_ADDR
// end ; end ;
68149: GO 68081
68151: POP
68152: POP
// end ;
68153: LD_VAR 0 3
68157: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68158: LD_INT 0
68160: PPUSH
// uc_side := side ;
68161: LD_ADDR_OWVAR 20
68165: PUSH
68166: LD_VAR 0 1
68170: ST_TO_ADDR
// uc_nation := 3 ;
68171: LD_ADDR_OWVAR 21
68175: PUSH
68176: LD_INT 3
68178: ST_TO_ADDR
// vc_chassis := 25 ;
68179: LD_ADDR_OWVAR 37
68183: PUSH
68184: LD_INT 25
68186: ST_TO_ADDR
// vc_engine := engine_siberite ;
68187: LD_ADDR_OWVAR 39
68191: PUSH
68192: LD_INT 3
68194: ST_TO_ADDR
// vc_control := control_computer ;
68195: LD_ADDR_OWVAR 38
68199: PUSH
68200: LD_INT 3
68202: ST_TO_ADDR
// vc_weapon := 59 ;
68203: LD_ADDR_OWVAR 40
68207: PUSH
68208: LD_INT 59
68210: ST_TO_ADDR
// result := CreateVehicle ;
68211: LD_ADDR_VAR 0 5
68215: PUSH
68216: CALL_OW 45
68220: ST_TO_ADDR
// SetDir ( result , d ) ;
68221: LD_VAR 0 5
68225: PPUSH
68226: LD_VAR 0 4
68230: PPUSH
68231: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68235: LD_VAR 0 5
68239: PPUSH
68240: LD_VAR 0 2
68244: PPUSH
68245: LD_VAR 0 3
68249: PPUSH
68250: LD_INT 0
68252: PPUSH
68253: CALL_OW 48
// end ;
68257: LD_VAR 0 5
68261: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68262: LD_INT 0
68264: PPUSH
68265: PPUSH
68266: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68267: LD_ADDR_VAR 0 2
68271: PUSH
68272: LD_INT 0
68274: PUSH
68275: LD_INT 0
68277: PUSH
68278: LD_INT 0
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68290: LD_VAR 0 1
68294: NOT
68295: PUSH
68296: LD_VAR 0 1
68300: PPUSH
68301: CALL_OW 264
68305: PUSH
68306: LD_INT 12
68308: PUSH
68309: LD_INT 51
68311: PUSH
68312: LD_INT 32
68314: PUSH
68315: LD_INT 89
68317: PUSH
68318: EMPTY
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: IN
68324: NOT
68325: OR
68326: IFFALSE 68330
// exit ;
68328: GO 68428
// for i := 1 to 3 do
68330: LD_ADDR_VAR 0 3
68334: PUSH
68335: DOUBLE
68336: LD_INT 1
68338: DEC
68339: ST_TO_ADDR
68340: LD_INT 3
68342: PUSH
68343: FOR_TO
68344: IFFALSE 68426
// begin tmp := GetCargo ( cargo , i ) ;
68346: LD_ADDR_VAR 0 4
68350: PUSH
68351: LD_VAR 0 1
68355: PPUSH
68356: LD_VAR 0 3
68360: PPUSH
68361: CALL_OW 289
68365: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68366: LD_ADDR_VAR 0 2
68370: PUSH
68371: LD_VAR 0 2
68375: PPUSH
68376: LD_VAR 0 3
68380: PPUSH
68381: LD_VAR 0 4
68385: PPUSH
68386: CALL_OW 1
68390: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68391: LD_ADDR_VAR 0 2
68395: PUSH
68396: LD_VAR 0 2
68400: PPUSH
68401: LD_INT 4
68403: PPUSH
68404: LD_VAR 0 2
68408: PUSH
68409: LD_INT 4
68411: ARRAY
68412: PUSH
68413: LD_VAR 0 4
68417: PLUS
68418: PPUSH
68419: CALL_OW 1
68423: ST_TO_ADDR
// end ;
68424: GO 68343
68426: POP
68427: POP
// end ;
68428: LD_VAR 0 2
68432: RET
// export function Length ( array ) ; begin
68433: LD_INT 0
68435: PPUSH
// result := array + 0 ;
68436: LD_ADDR_VAR 0 2
68440: PUSH
68441: LD_VAR 0 1
68445: PUSH
68446: LD_INT 0
68448: PLUS
68449: ST_TO_ADDR
// end ;
68450: LD_VAR 0 2
68454: RET
// export function PrepareArray ( array ) ; begin
68455: LD_INT 0
68457: PPUSH
// result := array diff 0 ;
68458: LD_ADDR_VAR 0 2
68462: PUSH
68463: LD_VAR 0 1
68467: PUSH
68468: LD_INT 0
68470: DIFF
68471: ST_TO_ADDR
// if not result [ 1 ] then
68472: LD_VAR 0 2
68476: PUSH
68477: LD_INT 1
68479: ARRAY
68480: NOT
68481: IFFALSE 68501
// result := Delete ( result , 1 ) ;
68483: LD_ADDR_VAR 0 2
68487: PUSH
68488: LD_VAR 0 2
68492: PPUSH
68493: LD_INT 1
68495: PPUSH
68496: CALL_OW 3
68500: ST_TO_ADDR
// end ;
68501: LD_VAR 0 2
68505: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68506: LD_INT 0
68508: PPUSH
68509: PPUSH
68510: PPUSH
68511: PPUSH
// sibRocketRange := 25 ;
68512: LD_ADDR_VAR 0 6
68516: PUSH
68517: LD_INT 25
68519: ST_TO_ADDR
// result := false ;
68520: LD_ADDR_VAR 0 4
68524: PUSH
68525: LD_INT 0
68527: ST_TO_ADDR
// for i := 0 to 5 do
68528: LD_ADDR_VAR 0 5
68532: PUSH
68533: DOUBLE
68534: LD_INT 0
68536: DEC
68537: ST_TO_ADDR
68538: LD_INT 5
68540: PUSH
68541: FOR_TO
68542: IFFALSE 68609
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68544: LD_VAR 0 1
68548: PPUSH
68549: LD_VAR 0 5
68553: PPUSH
68554: LD_VAR 0 6
68558: PPUSH
68559: CALL_OW 272
68563: PPUSH
68564: LD_VAR 0 2
68568: PPUSH
68569: LD_VAR 0 5
68573: PPUSH
68574: LD_VAR 0 6
68578: PPUSH
68579: CALL_OW 273
68583: PPUSH
68584: LD_VAR 0 3
68588: PPUSH
68589: CALL_OW 309
68593: IFFALSE 68607
// begin result := true ;
68595: LD_ADDR_VAR 0 4
68599: PUSH
68600: LD_INT 1
68602: ST_TO_ADDR
// exit ;
68603: POP
68604: POP
68605: GO 68611
// end ;
68607: GO 68541
68609: POP
68610: POP
// end ;
68611: LD_VAR 0 4
68615: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68616: LD_INT 0
68618: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68619: LD_VAR 0 1
68623: PPUSH
68624: LD_VAR 0 2
68628: PPUSH
68629: LD_INT 0
68631: PPUSH
68632: LD_INT 0
68634: PPUSH
68635: LD_INT 1
68637: PPUSH
68638: LD_INT 0
68640: PPUSH
68641: CALL_OW 587
// end ;
68645: LD_VAR 0 3
68649: RET
// export function CenterOnNow ( unit ) ; begin
68650: LD_INT 0
68652: PPUSH
// result := IsInUnit ( unit ) ;
68653: LD_ADDR_VAR 0 2
68657: PUSH
68658: LD_VAR 0 1
68662: PPUSH
68663: CALL_OW 310
68667: ST_TO_ADDR
// if not result then
68668: LD_VAR 0 2
68672: NOT
68673: IFFALSE 68685
// result := unit ;
68675: LD_ADDR_VAR 0 2
68679: PUSH
68680: LD_VAR 0 1
68684: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
68685: LD_VAR 0 1
68689: PPUSH
68690: CALL_OW 87
// end ;
68694: LD_VAR 0 2
68698: RET
// export function ComMoveHex ( unit , hex ) ; begin
68699: LD_INT 0
68701: PPUSH
// if not hex then
68702: LD_VAR 0 2
68706: NOT
68707: IFFALSE 68711
// exit ;
68709: GO 68764
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
68711: LD_VAR 0 2
68715: PUSH
68716: LD_INT 1
68718: ARRAY
68719: PPUSH
68720: LD_VAR 0 2
68724: PUSH
68725: LD_INT 2
68727: ARRAY
68728: PPUSH
68729: CALL_OW 428
68733: IFFALSE 68737
// exit ;
68735: GO 68764
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
68737: LD_VAR 0 1
68741: PPUSH
68742: LD_VAR 0 2
68746: PUSH
68747: LD_INT 1
68749: ARRAY
68750: PPUSH
68751: LD_VAR 0 2
68755: PUSH
68756: LD_INT 2
68758: ARRAY
68759: PPUSH
68760: CALL_OW 111
// end ; end_of_file
68764: LD_VAR 0 3
68768: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68769: LD_VAR 0 1
68773: PUSH
68774: LD_INT 200
68776: DOUBLE
68777: GREATEREQUAL
68778: IFFALSE 68786
68780: LD_INT 299
68782: DOUBLE
68783: LESSEQUAL
68784: IFTRUE 68788
68786: GO 68820
68788: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68789: LD_VAR 0 1
68793: PPUSH
68794: LD_VAR 0 2
68798: PPUSH
68799: LD_VAR 0 3
68803: PPUSH
68804: LD_VAR 0 4
68808: PPUSH
68809: LD_VAR 0 5
68813: PPUSH
68814: CALL 23492 0 5
68818: GO 68897
68820: LD_INT 300
68822: DOUBLE
68823: GREATEREQUAL
68824: IFFALSE 68832
68826: LD_INT 399
68828: DOUBLE
68829: LESSEQUAL
68830: IFTRUE 68834
68832: GO 68896
68834: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68835: LD_VAR 0 1
68839: PPUSH
68840: LD_VAR 0 2
68844: PPUSH
68845: LD_VAR 0 3
68849: PPUSH
68850: LD_VAR 0 4
68854: PPUSH
68855: LD_VAR 0 5
68859: PPUSH
68860: LD_VAR 0 6
68864: PPUSH
68865: LD_VAR 0 7
68869: PPUSH
68870: LD_VAR 0 8
68874: PPUSH
68875: LD_VAR 0 9
68879: PPUSH
68880: LD_VAR 0 10
68884: PPUSH
68885: LD_VAR 0 11
68889: PPUSH
68890: CALL 19817 0 11
68894: GO 68897
68896: POP
// end ;
68897: PPOPN 11
68899: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68900: LD_VAR 0 1
68904: PPUSH
68905: LD_VAR 0 2
68909: PPUSH
68910: LD_VAR 0 3
68914: PPUSH
68915: LD_VAR 0 4
68919: PPUSH
68920: LD_VAR 0 5
68924: PPUSH
68925: CALL 23228 0 5
// end ; end_of_file
68929: PPOPN 5
68931: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68932: LD_VAR 0 1
68936: PPUSH
68937: LD_VAR 0 2
68941: PPUSH
68942: LD_VAR 0 3
68946: PPUSH
68947: LD_VAR 0 4
68951: PPUSH
68952: LD_VAR 0 5
68956: PPUSH
68957: LD_VAR 0 6
68961: PPUSH
68962: CALL 7469 0 6
// end ;
68966: PPOPN 6
68968: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68969: LD_INT 0
68971: PPUSH
// begin if not units then
68972: LD_VAR 0 1
68976: NOT
68977: IFFALSE 68981
// exit ;
68979: GO 68981
// end ;
68981: PPOPN 7
68983: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68984: CALL 7373 0 0
// end ;
68988: PPOPN 1
68990: END
