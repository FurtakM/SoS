// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 58536 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 25173 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 25173 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 25173 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 30037 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 60824 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 30037 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 60824 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 30037 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6877: LD_VAR 0 1
6881: PUSH
6882: LD_EXP 14
6886: EQUAL
6887: IFFALSE 6896
// YouLost ( JMM ) ;
6889: LD_STRING JMM
6891: PPUSH
6892: CALL_OW 104
// if un = Burlak then
6896: LD_VAR 0 1
6900: PUSH
6901: LD_EXP 15
6905: EQUAL
6906: IFFALSE 6915
// YouLost ( Burlak ) ;
6908: LD_STRING Burlak
6910: PPUSH
6911: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6915: LD_VAR 0 1
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 23
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 69
6948: IN
6949: IFFALSE 6965
// killCounter := killCounter + 1 ;
6951: LD_ADDR_EXP 12
6955: PUSH
6956: LD_EXP 12
6960: PUSH
6961: LD_INT 1
6963: PLUS
6964: ST_TO_ADDR
// end ;
6965: PPOPN 1
6967: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 7
6975: EQUAL
6976: PUSH
6977: LD_VAR 0 1
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 31
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 30
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: IN
7026: AND
7027: IFFALSE 7043
// bunkerCounter := bunkerCounter + 1 ;
7029: LD_ADDR_EXP 13
7033: PUSH
7034: LD_EXP 13
7038: PUSH
7039: LD_INT 1
7041: PLUS
7042: ST_TO_ADDR
// end ;
7043: PPOPN 3
7045: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 255
7055: PUSH
7056: LD_INT 7
7058: EQUAL
7059: IFFALSE 7069
// artifactPickedUp := true ;
7061: LD_ADDR_EXP 6
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// end ;
7069: PPOPN 2
7071: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7072: LD_ADDR_EXP 6
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
7080: PPOPN 2
7082: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7083: LD_VAR 0 1
7087: PPUSH
7088: CALL_OW 255
7092: PUSH
7093: LD_INT 1
7095: NONEQUAL
7096: IFFALSE 7100
// exit ;
7098: GO 7147
// wait ( 0 0$5 ) ;
7100: LD_INT 175
7102: PPUSH
7103: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 263
7116: PUSH
7117: LD_INT 2
7119: EQUAL
7120: IFFALSE 7131
// Connect ( vehicle ) ;
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL 33130 0 1
// vehGuard := vehGuard ^ vehicle ;
7131: LD_ADDR_EXP 23
7135: PUSH
7136: LD_EXP 23
7140: PUSH
7141: LD_VAR 0 1
7145: ADD
7146: ST_TO_ADDR
// end ;
7147: PPOPN 2
7149: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7150: LD_VAR 0 1
7154: PUSH
7155: LD_INT 1
7157: EQUAL
7158: PUSH
7159: LD_EXP 7
7163: NOT
7164: AND
7165: IFFALSE 7200
// begin planCaptured := true ;
7167: LD_ADDR_EXP 7
7171: PUSH
7172: LD_INT 1
7174: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7175: LD_STRING MEnd
7177: PPUSH
7178: CALL_OW 337
// canEnd := true ;
7182: LD_ADDR_EXP 10
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// missionTime := tick ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_OWVAR 1
7199: ST_TO_ADDR
// end ; end ;
7200: PPOPN 3
7202: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL 21274 0 1
// end ; end_of_file
7212: PPOPN 1
7214: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7215: LD_INT 0
7217: PPUSH
// ar_miner := 81 ;
7218: LD_ADDR_EXP 31
7222: PUSH
7223: LD_INT 81
7225: ST_TO_ADDR
// ar_crane := 88 ;
7226: LD_ADDR_EXP 30
7230: PUSH
7231: LD_INT 88
7233: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7234: LD_ADDR_EXP 25
7238: PUSH
7239: LD_INT 89
7241: ST_TO_ADDR
// us_hack := 99 ;
7242: LD_ADDR_EXP 26
7246: PUSH
7247: LD_INT 99
7249: ST_TO_ADDR
// us_artillery := 97 ;
7250: LD_ADDR_EXP 27
7254: PUSH
7255: LD_INT 97
7257: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7258: LD_ADDR_EXP 28
7262: PUSH
7263: LD_INT 91
7265: ST_TO_ADDR
// ar_mortar := 92 ;
7266: LD_ADDR_EXP 29
7270: PUSH
7271: LD_INT 92
7273: ST_TO_ADDR
// ru_radar := 98 ;
7274: LD_ADDR_EXP 24
7278: PUSH
7279: LD_INT 98
7281: ST_TO_ADDR
// tech_Artillery := 80 ;
7282: LD_ADDR_EXP 32
7286: PUSH
7287: LD_INT 80
7289: ST_TO_ADDR
// tech_RadMat := 81 ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 81
7297: ST_TO_ADDR
// tech_BasicTools := 82 ;
7298: LD_ADDR_EXP 34
7302: PUSH
7303: LD_INT 82
7305: ST_TO_ADDR
// tech_Cargo := 83 ;
7306: LD_ADDR_EXP 35
7310: PUSH
7311: LD_INT 83
7313: ST_TO_ADDR
// tech_Track := 84 ;
7314: LD_ADDR_EXP 36
7318: PUSH
7319: LD_INT 84
7321: ST_TO_ADDR
// tech_Crane := 85 ;
7322: LD_ADDR_EXP 37
7326: PUSH
7327: LD_INT 85
7329: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7330: LD_ADDR_EXP 38
7334: PUSH
7335: LD_INT 86
7337: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7338: LD_ADDR_EXP 39
7342: PUSH
7343: LD_INT 87
7345: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7346: LD_ADDR_EXP 40
7350: PUSH
7351: LD_INT 88
7353: ST_TO_ADDR
// class_mastodont := 31 ;
7354: LD_ADDR_EXP 41
7358: PUSH
7359: LD_INT 31
7361: ST_TO_ADDR
// class_horse := 21 ;
7362: LD_ADDR_EXP 42
7366: PUSH
7367: LD_INT 21
7369: ST_TO_ADDR
// end ;
7370: LD_VAR 0 1
7374: RET
// every 1 do
7375: GO 7377
7377: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7378: CALL 7215 0 0
7382: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7383: LD_INT 0
7385: PPUSH
// if p2 = 100 then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 100
7393: EQUAL
7394: IFFALSE 8397
// begin if not StreamModeActive then
7396: LD_EXP 43
7400: NOT
7401: IFFALSE 7411
// StreamModeActive := true ;
7403: LD_ADDR_EXP 43
7407: PUSH
7408: LD_INT 1
7410: ST_TO_ADDR
// if p3 = 0 then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 0
7418: EQUAL
7419: IFFALSE 7425
// InitStreamMode ;
7421: CALL 8557 0 0
// if p3 = 1 then
7425: LD_VAR 0 3
7429: PUSH
7430: LD_INT 1
7432: EQUAL
7433: IFFALSE 7443
// sRocket := true ;
7435: LD_ADDR_EXP 48
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// if p3 = 2 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 2
7450: EQUAL
7451: IFFALSE 7461
// sSpeed := true ;
7453: LD_ADDR_EXP 47
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// if p3 = 3 then
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 3
7468: EQUAL
7469: IFFALSE 7479
// sEngine := true ;
7471: LD_ADDR_EXP 49
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// if p3 = 4 then
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 4
7486: EQUAL
7487: IFFALSE 7497
// sSpec := true ;
7489: LD_ADDR_EXP 46
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 5 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 5
7504: EQUAL
7505: IFFALSE 7515
// sLevel := true ;
7507: LD_ADDR_EXP 50
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// if p3 = 6 then
7515: LD_VAR 0 3
7519: PUSH
7520: LD_INT 6
7522: EQUAL
7523: IFFALSE 7533
// sArmoury := true ;
7525: LD_ADDR_EXP 51
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// if p3 = 7 then
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 7
7540: EQUAL
7541: IFFALSE 7551
// sRadar := true ;
7543: LD_ADDR_EXP 52
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// if p3 = 8 then
7551: LD_VAR 0 3
7555: PUSH
7556: LD_INT 8
7558: EQUAL
7559: IFFALSE 7569
// sBunker := true ;
7561: LD_ADDR_EXP 53
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if p3 = 9 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 9
7576: EQUAL
7577: IFFALSE 7587
// sHack := true ;
7579: LD_ADDR_EXP 54
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// if p3 = 10 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 10
7594: EQUAL
7595: IFFALSE 7605
// sFire := true ;
7597: LD_ADDR_EXP 55
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 11 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 11
7612: EQUAL
7613: IFFALSE 7623
// sRefresh := true ;
7615: LD_ADDR_EXP 56
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if p3 = 12 then
7623: LD_VAR 0 3
7627: PUSH
7628: LD_INT 12
7630: EQUAL
7631: IFFALSE 7641
// sExp := true ;
7633: LD_ADDR_EXP 57
7637: PUSH
7638: LD_INT 1
7640: ST_TO_ADDR
// if p3 = 13 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 13
7648: EQUAL
7649: IFFALSE 7659
// sDepot := true ;
7651: LD_ADDR_EXP 58
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// if p3 = 14 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 14
7666: EQUAL
7667: IFFALSE 7677
// sFlag := true ;
7669: LD_ADDR_EXP 59
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// if p3 = 15 then
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 15
7684: EQUAL
7685: IFFALSE 7695
// sKamikadze := true ;
7687: LD_ADDR_EXP 67
7691: PUSH
7692: LD_INT 1
7694: ST_TO_ADDR
// if p3 = 16 then
7695: LD_VAR 0 3
7699: PUSH
7700: LD_INT 16
7702: EQUAL
7703: IFFALSE 7713
// sTroll := true ;
7705: LD_ADDR_EXP 68
7709: PUSH
7710: LD_INT 1
7712: ST_TO_ADDR
// if p3 = 17 then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 17
7720: EQUAL
7721: IFFALSE 7731
// sSlow := true ;
7723: LD_ADDR_EXP 69
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if p3 = 18 then
7731: LD_VAR 0 3
7735: PUSH
7736: LD_INT 18
7738: EQUAL
7739: IFFALSE 7749
// sLack := true ;
7741: LD_ADDR_EXP 70
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// if p3 = 19 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 19
7756: EQUAL
7757: IFFALSE 7767
// sTank := true ;
7759: LD_ADDR_EXP 72
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// if p3 = 20 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 20
7774: EQUAL
7775: IFFALSE 7785
// sRemote := true ;
7777: LD_ADDR_EXP 73
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// if p3 = 21 then
7785: LD_VAR 0 3
7789: PUSH
7790: LD_INT 21
7792: EQUAL
7793: IFFALSE 7803
// sPowell := true ;
7795: LD_ADDR_EXP 74
7799: PUSH
7800: LD_INT 1
7802: ST_TO_ADDR
// if p3 = 22 then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_INT 22
7810: EQUAL
7811: IFFALSE 7821
// sTeleport := true ;
7813: LD_ADDR_EXP 77
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// if p3 = 23 then
7821: LD_VAR 0 3
7825: PUSH
7826: LD_INT 23
7828: EQUAL
7829: IFFALSE 7839
// sOilTower := true ;
7831: LD_ADDR_EXP 79
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// if p3 = 24 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 24
7846: EQUAL
7847: IFFALSE 7857
// sShovel := true ;
7849: LD_ADDR_EXP 80
7853: PUSH
7854: LD_INT 1
7856: ST_TO_ADDR
// if p3 = 25 then
7857: LD_VAR 0 3
7861: PUSH
7862: LD_INT 25
7864: EQUAL
7865: IFFALSE 7875
// sSheik := true ;
7867: LD_ADDR_EXP 81
7871: PUSH
7872: LD_INT 1
7874: ST_TO_ADDR
// if p3 = 26 then
7875: LD_VAR 0 3
7879: PUSH
7880: LD_INT 26
7882: EQUAL
7883: IFFALSE 7893
// sEarthquake := true ;
7885: LD_ADDR_EXP 83
7889: PUSH
7890: LD_INT 1
7892: ST_TO_ADDR
// if p3 = 27 then
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 27
7900: EQUAL
7901: IFFALSE 7911
// sAI := true ;
7903: LD_ADDR_EXP 84
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// if p3 = 28 then
7911: LD_VAR 0 3
7915: PUSH
7916: LD_INT 28
7918: EQUAL
7919: IFFALSE 7929
// sCargo := true ;
7921: LD_ADDR_EXP 87
7925: PUSH
7926: LD_INT 1
7928: ST_TO_ADDR
// if p3 = 29 then
7929: LD_VAR 0 3
7933: PUSH
7934: LD_INT 29
7936: EQUAL
7937: IFFALSE 7947
// sDLaser := true ;
7939: LD_ADDR_EXP 88
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// if p3 = 30 then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 30
7954: EQUAL
7955: IFFALSE 7965
// sExchange := true ;
7957: LD_ADDR_EXP 89
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// if p3 = 31 then
7965: LD_VAR 0 3
7969: PUSH
7970: LD_INT 31
7972: EQUAL
7973: IFFALSE 7983
// sFac := true ;
7975: LD_ADDR_EXP 90
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// if p3 = 32 then
7983: LD_VAR 0 3
7987: PUSH
7988: LD_INT 32
7990: EQUAL
7991: IFFALSE 8001
// sPower := true ;
7993: LD_ADDR_EXP 91
7997: PUSH
7998: LD_INT 1
8000: ST_TO_ADDR
// if p3 = 33 then
8001: LD_VAR 0 3
8005: PUSH
8006: LD_INT 33
8008: EQUAL
8009: IFFALSE 8019
// sRandom := true ;
8011: LD_ADDR_EXP 92
8015: PUSH
8016: LD_INT 1
8018: ST_TO_ADDR
// if p3 = 34 then
8019: LD_VAR 0 3
8023: PUSH
8024: LD_INT 34
8026: EQUAL
8027: IFFALSE 8037
// sShield := true ;
8029: LD_ADDR_EXP 93
8033: PUSH
8034: LD_INT 1
8036: ST_TO_ADDR
// if p3 = 35 then
8037: LD_VAR 0 3
8041: PUSH
8042: LD_INT 35
8044: EQUAL
8045: IFFALSE 8055
// sTime := true ;
8047: LD_ADDR_EXP 94
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// if p3 = 36 then
8055: LD_VAR 0 3
8059: PUSH
8060: LD_INT 36
8062: EQUAL
8063: IFFALSE 8073
// sTools := true ;
8065: LD_ADDR_EXP 95
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// if p3 = 101 then
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 101
8080: EQUAL
8081: IFFALSE 8091
// sSold := true ;
8083: LD_ADDR_EXP 60
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// if p3 = 102 then
8091: LD_VAR 0 3
8095: PUSH
8096: LD_INT 102
8098: EQUAL
8099: IFFALSE 8109
// sDiff := true ;
8101: LD_ADDR_EXP 61
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// if p3 = 103 then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_INT 103
8116: EQUAL
8117: IFFALSE 8127
// sFog := true ;
8119: LD_ADDR_EXP 64
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// if p3 = 104 then
8127: LD_VAR 0 3
8131: PUSH
8132: LD_INT 104
8134: EQUAL
8135: IFFALSE 8145
// sReset := true ;
8137: LD_ADDR_EXP 65
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// if p3 = 105 then
8145: LD_VAR 0 3
8149: PUSH
8150: LD_INT 105
8152: EQUAL
8153: IFFALSE 8163
// sSun := true ;
8155: LD_ADDR_EXP 66
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// if p3 = 106 then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 106
8170: EQUAL
8171: IFFALSE 8181
// sTiger := true ;
8173: LD_ADDR_EXP 62
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// if p3 = 107 then
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 107
8188: EQUAL
8189: IFFALSE 8199
// sBomb := true ;
8191: LD_ADDR_EXP 63
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// if p3 = 108 then
8199: LD_VAR 0 3
8203: PUSH
8204: LD_INT 108
8206: EQUAL
8207: IFFALSE 8217
// sWound := true ;
8209: LD_ADDR_EXP 71
8213: PUSH
8214: LD_INT 1
8216: ST_TO_ADDR
// if p3 = 109 then
8217: LD_VAR 0 3
8221: PUSH
8222: LD_INT 109
8224: EQUAL
8225: IFFALSE 8235
// sBetray := true ;
8227: LD_ADDR_EXP 75
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// if p3 = 110 then
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 110
8242: EQUAL
8243: IFFALSE 8253
// sContamin := true ;
8245: LD_ADDR_EXP 76
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// if p3 = 111 then
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 111
8260: EQUAL
8261: IFFALSE 8271
// sOil := true ;
8263: LD_ADDR_EXP 78
8267: PUSH
8268: LD_INT 1
8270: ST_TO_ADDR
// if p3 = 112 then
8271: LD_VAR 0 3
8275: PUSH
8276: LD_INT 112
8278: EQUAL
8279: IFFALSE 8289
// sStu := true ;
8281: LD_ADDR_EXP 82
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// if p3 = 113 then
8289: LD_VAR 0 3
8293: PUSH
8294: LD_INT 113
8296: EQUAL
8297: IFFALSE 8307
// sBazooka := true ;
8299: LD_ADDR_EXP 85
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// if p3 = 114 then
8307: LD_VAR 0 3
8311: PUSH
8312: LD_INT 114
8314: EQUAL
8315: IFFALSE 8325
// sMortar := true ;
8317: LD_ADDR_EXP 86
8321: PUSH
8322: LD_INT 1
8324: ST_TO_ADDR
// if p3 = 115 then
8325: LD_VAR 0 3
8329: PUSH
8330: LD_INT 115
8332: EQUAL
8333: IFFALSE 8343
// sRanger := true ;
8335: LD_ADDR_EXP 96
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// if p3 = 116 then
8343: LD_VAR 0 3
8347: PUSH
8348: LD_INT 116
8350: EQUAL
8351: IFFALSE 8361
// sComputer := true ;
8353: LD_ADDR_EXP 97
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// if p3 = 117 then
8361: LD_VAR 0 3
8365: PUSH
8366: LD_INT 117
8368: EQUAL
8369: IFFALSE 8379
// s30 := true ;
8371: LD_ADDR_EXP 98
8375: PUSH
8376: LD_INT 1
8378: ST_TO_ADDR
// if p3 = 118 then
8379: LD_VAR 0 3
8383: PUSH
8384: LD_INT 118
8386: EQUAL
8387: IFFALSE 8397
// s60 := true ;
8389: LD_ADDR_EXP 99
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// end ; if p2 = 101 then
8397: LD_VAR 0 2
8401: PUSH
8402: LD_INT 101
8404: EQUAL
8405: IFFALSE 8533
// begin case p3 of 1 :
8407: LD_VAR 0 3
8411: PUSH
8412: LD_INT 1
8414: DOUBLE
8415: EQUAL
8416: IFTRUE 8420
8418: GO 8427
8420: POP
// hHackUnlimitedResources ; 2 :
8421: CALL 20129 0 0
8425: GO 8533
8427: LD_INT 2
8429: DOUBLE
8430: EQUAL
8431: IFTRUE 8435
8433: GO 8442
8435: POP
// hHackSetLevel10 ; 3 :
8436: CALL 20262 0 0
8440: GO 8533
8442: LD_INT 3
8444: DOUBLE
8445: EQUAL
8446: IFTRUE 8450
8448: GO 8457
8450: POP
// hHackSetLevel10YourUnits ; 4 :
8451: CALL 20347 0 0
8455: GO 8533
8457: LD_INT 4
8459: DOUBLE
8460: EQUAL
8461: IFTRUE 8465
8463: GO 8472
8465: POP
// hHackInvincible ; 5 :
8466: CALL 20795 0 0
8470: GO 8533
8472: LD_INT 5
8474: DOUBLE
8475: EQUAL
8476: IFTRUE 8480
8478: GO 8487
8480: POP
// hHackInvisible ; 6 :
8481: CALL 20906 0 0
8485: GO 8533
8487: LD_INT 6
8489: DOUBLE
8490: EQUAL
8491: IFTRUE 8495
8493: GO 8502
8495: POP
// hHackChangeYourSide ; 7 :
8496: CALL 20963 0 0
8500: GO 8533
8502: LD_INT 7
8504: DOUBLE
8505: EQUAL
8506: IFTRUE 8510
8508: GO 8517
8510: POP
// hHackChangeUnitSide ; 8 :
8511: CALL 21005 0 0
8515: GO 8533
8517: LD_INT 8
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8532
8525: POP
// hHackFog ; end ;
8526: CALL 21106 0 0
8530: GO 8533
8532: POP
// end ; end ;
8533: LD_VAR 0 7
8537: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8538: GO 8540
8540: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8541: LD_STRING initStreamRollete();
8543: PPUSH
8544: CALL_OW 559
// InitStreamMode ;
8548: CALL 8557 0 0
// DefineStreamItems ( ) ;
8552: CALL 9021 0 0
// end ;
8556: END
// function InitStreamMode ; begin
8557: LD_INT 0
8559: PPUSH
// streamModeActive := false ;
8560: LD_ADDR_EXP 43
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// normalCounter := 36 ;
8568: LD_ADDR_EXP 44
8572: PUSH
8573: LD_INT 36
8575: ST_TO_ADDR
// hardcoreCounter := 16 ;
8576: LD_ADDR_EXP 45
8580: PUSH
8581: LD_INT 16
8583: ST_TO_ADDR
// sRocket := false ;
8584: LD_ADDR_EXP 48
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sSpeed := false ;
8592: LD_ADDR_EXP 47
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sEngine := false ;
8600: LD_ADDR_EXP 49
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sSpec := false ;
8608: LD_ADDR_EXP 46
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sLevel := false ;
8616: LD_ADDR_EXP 50
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sArmoury := false ;
8624: LD_ADDR_EXP 51
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sRadar := false ;
8632: LD_ADDR_EXP 52
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sBunker := false ;
8640: LD_ADDR_EXP 53
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sHack := false ;
8648: LD_ADDR_EXP 54
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sFire := false ;
8656: LD_ADDR_EXP 55
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sRefresh := false ;
8664: LD_ADDR_EXP 56
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sExp := false ;
8672: LD_ADDR_EXP 57
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sDepot := false ;
8680: LD_ADDR_EXP 58
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sFlag := false ;
8688: LD_ADDR_EXP 59
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sKamikadze := false ;
8696: LD_ADDR_EXP 67
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sTroll := false ;
8704: LD_ADDR_EXP 68
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sSlow := false ;
8712: LD_ADDR_EXP 69
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sLack := false ;
8720: LD_ADDR_EXP 70
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sTank := false ;
8728: LD_ADDR_EXP 72
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sRemote := false ;
8736: LD_ADDR_EXP 73
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sPowell := false ;
8744: LD_ADDR_EXP 74
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sTeleport := false ;
8752: LD_ADDR_EXP 77
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sOilTower := false ;
8760: LD_ADDR_EXP 79
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sShovel := false ;
8768: LD_ADDR_EXP 80
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sSheik := false ;
8776: LD_ADDR_EXP 81
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sEarthquake := false ;
8784: LD_ADDR_EXP 83
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sAI := false ;
8792: LD_ADDR_EXP 84
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sCargo := false ;
8800: LD_ADDR_EXP 87
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sDLaser := false ;
8808: LD_ADDR_EXP 88
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sExchange := false ;
8816: LD_ADDR_EXP 89
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sFac := false ;
8824: LD_ADDR_EXP 90
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sPower := false ;
8832: LD_ADDR_EXP 91
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sRandom := false ;
8840: LD_ADDR_EXP 92
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sShield := false ;
8848: LD_ADDR_EXP 93
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sTime := false ;
8856: LD_ADDR_EXP 94
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sTools := false ;
8864: LD_ADDR_EXP 95
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sSold := false ;
8872: LD_ADDR_EXP 60
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sDiff := false ;
8880: LD_ADDR_EXP 61
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sFog := false ;
8888: LD_ADDR_EXP 64
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sReset := false ;
8896: LD_ADDR_EXP 65
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sSun := false ;
8904: LD_ADDR_EXP 66
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// sTiger := false ;
8912: LD_ADDR_EXP 62
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// sBomb := false ;
8920: LD_ADDR_EXP 63
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// sWound := false ;
8928: LD_ADDR_EXP 71
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// sBetray := false ;
8936: LD_ADDR_EXP 75
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// sContamin := false ;
8944: LD_ADDR_EXP 76
8948: PUSH
8949: LD_INT 0
8951: ST_TO_ADDR
// sOil := false ;
8952: LD_ADDR_EXP 78
8956: PUSH
8957: LD_INT 0
8959: ST_TO_ADDR
// sStu := false ;
8960: LD_ADDR_EXP 82
8964: PUSH
8965: LD_INT 0
8967: ST_TO_ADDR
// sBazooka := false ;
8968: LD_ADDR_EXP 85
8972: PUSH
8973: LD_INT 0
8975: ST_TO_ADDR
// sMortar := false ;
8976: LD_ADDR_EXP 86
8980: PUSH
8981: LD_INT 0
8983: ST_TO_ADDR
// sRanger := false ;
8984: LD_ADDR_EXP 96
8988: PUSH
8989: LD_INT 0
8991: ST_TO_ADDR
// sComputer := false ;
8992: LD_ADDR_EXP 97
8996: PUSH
8997: LD_INT 0
8999: ST_TO_ADDR
// s30 := false ;
9000: LD_ADDR_EXP 98
9004: PUSH
9005: LD_INT 0
9007: ST_TO_ADDR
// s60 := false ;
9008: LD_ADDR_EXP 99
9012: PUSH
9013: LD_INT 0
9015: ST_TO_ADDR
// end ;
9016: LD_VAR 0 1
9020: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9021: LD_INT 0
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
// result := [ ] ;
9028: LD_ADDR_VAR 0 1
9032: PUSH
9033: EMPTY
9034: ST_TO_ADDR
// if campaign_id = 1 then
9035: LD_OWVAR 69
9039: PUSH
9040: LD_INT 1
9042: EQUAL
9043: IFFALSE 12209
// begin case mission_number of 1 :
9045: LD_OWVAR 70
9049: PUSH
9050: LD_INT 1
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9134
9058: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9059: LD_ADDR_VAR 0 1
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: LD_INT 11
9072: PUSH
9073: LD_INT 12
9075: PUSH
9076: LD_INT 15
9078: PUSH
9079: LD_INT 16
9081: PUSH
9082: LD_INT 22
9084: PUSH
9085: LD_INT 23
9087: PUSH
9088: LD_INT 26
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 101
9104: PUSH
9105: LD_INT 102
9107: PUSH
9108: LD_INT 106
9110: PUSH
9111: LD_INT 116
9113: PUSH
9114: LD_INT 117
9116: PUSH
9117: LD_INT 118
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: ST_TO_ADDR
9132: GO 12207
9134: LD_INT 2
9136: DOUBLE
9137: EQUAL
9138: IFTRUE 9142
9140: GO 9226
9142: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9143: LD_ADDR_VAR 0 1
9147: PUSH
9148: LD_INT 2
9150: PUSH
9151: LD_INT 4
9153: PUSH
9154: LD_INT 11
9156: PUSH
9157: LD_INT 12
9159: PUSH
9160: LD_INT 15
9162: PUSH
9163: LD_INT 16
9165: PUSH
9166: LD_INT 22
9168: PUSH
9169: LD_INT 23
9171: PUSH
9172: LD_INT 26
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 101
9188: PUSH
9189: LD_INT 102
9191: PUSH
9192: LD_INT 105
9194: PUSH
9195: LD_INT 106
9197: PUSH
9198: LD_INT 108
9200: PUSH
9201: LD_INT 116
9203: PUSH
9204: LD_INT 117
9206: PUSH
9207: LD_INT 118
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: ST_TO_ADDR
9224: GO 12207
9226: LD_INT 3
9228: DOUBLE
9229: EQUAL
9230: IFTRUE 9234
9232: GO 9322
9234: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9235: LD_ADDR_VAR 0 1
9239: PUSH
9240: LD_INT 2
9242: PUSH
9243: LD_INT 4
9245: PUSH
9246: LD_INT 5
9248: PUSH
9249: LD_INT 11
9251: PUSH
9252: LD_INT 12
9254: PUSH
9255: LD_INT 15
9257: PUSH
9258: LD_INT 16
9260: PUSH
9261: LD_INT 22
9263: PUSH
9264: LD_INT 26
9266: PUSH
9267: LD_INT 36
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: PUSH
9282: LD_INT 101
9284: PUSH
9285: LD_INT 102
9287: PUSH
9288: LD_INT 105
9290: PUSH
9291: LD_INT 106
9293: PUSH
9294: LD_INT 108
9296: PUSH
9297: LD_INT 116
9299: PUSH
9300: LD_INT 117
9302: PUSH
9303: LD_INT 118
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: ST_TO_ADDR
9320: GO 12207
9322: LD_INT 4
9324: DOUBLE
9325: EQUAL
9326: IFTRUE 9330
9328: GO 9426
9330: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9331: LD_ADDR_VAR 0 1
9335: PUSH
9336: LD_INT 2
9338: PUSH
9339: LD_INT 4
9341: PUSH
9342: LD_INT 5
9344: PUSH
9345: LD_INT 8
9347: PUSH
9348: LD_INT 11
9350: PUSH
9351: LD_INT 12
9353: PUSH
9354: LD_INT 15
9356: PUSH
9357: LD_INT 16
9359: PUSH
9360: LD_INT 22
9362: PUSH
9363: LD_INT 23
9365: PUSH
9366: LD_INT 26
9368: PUSH
9369: LD_INT 36
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: PUSH
9386: LD_INT 101
9388: PUSH
9389: LD_INT 102
9391: PUSH
9392: LD_INT 105
9394: PUSH
9395: LD_INT 106
9397: PUSH
9398: LD_INT 108
9400: PUSH
9401: LD_INT 116
9403: PUSH
9404: LD_INT 117
9406: PUSH
9407: LD_INT 118
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: ST_TO_ADDR
9424: GO 12207
9426: LD_INT 5
9428: DOUBLE
9429: EQUAL
9430: IFTRUE 9434
9432: GO 9546
9434: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9435: LD_ADDR_VAR 0 1
9439: PUSH
9440: LD_INT 2
9442: PUSH
9443: LD_INT 4
9445: PUSH
9446: LD_INT 5
9448: PUSH
9449: LD_INT 6
9451: PUSH
9452: LD_INT 8
9454: PUSH
9455: LD_INT 11
9457: PUSH
9458: LD_INT 12
9460: PUSH
9461: LD_INT 15
9463: PUSH
9464: LD_INT 16
9466: PUSH
9467: LD_INT 22
9469: PUSH
9470: LD_INT 23
9472: PUSH
9473: LD_INT 25
9475: PUSH
9476: LD_INT 26
9478: PUSH
9479: LD_INT 36
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 101
9500: PUSH
9501: LD_INT 102
9503: PUSH
9504: LD_INT 105
9506: PUSH
9507: LD_INT 106
9509: PUSH
9510: LD_INT 108
9512: PUSH
9513: LD_INT 109
9515: PUSH
9516: LD_INT 112
9518: PUSH
9519: LD_INT 116
9521: PUSH
9522: LD_INT 117
9524: PUSH
9525: LD_INT 118
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: ST_TO_ADDR
9544: GO 12207
9546: LD_INT 6
9548: DOUBLE
9549: EQUAL
9550: IFTRUE 9554
9552: GO 9686
9554: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9555: LD_ADDR_VAR 0 1
9559: PUSH
9560: LD_INT 2
9562: PUSH
9563: LD_INT 4
9565: PUSH
9566: LD_INT 5
9568: PUSH
9569: LD_INT 6
9571: PUSH
9572: LD_INT 8
9574: PUSH
9575: LD_INT 11
9577: PUSH
9578: LD_INT 12
9580: PUSH
9581: LD_INT 15
9583: PUSH
9584: LD_INT 16
9586: PUSH
9587: LD_INT 20
9589: PUSH
9590: LD_INT 21
9592: PUSH
9593: LD_INT 22
9595: PUSH
9596: LD_INT 23
9598: PUSH
9599: LD_INT 25
9601: PUSH
9602: LD_INT 26
9604: PUSH
9605: LD_INT 30
9607: PUSH
9608: LD_INT 31
9610: PUSH
9611: LD_INT 32
9613: PUSH
9614: LD_INT 36
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 101
9640: PUSH
9641: LD_INT 102
9643: PUSH
9644: LD_INT 105
9646: PUSH
9647: LD_INT 106
9649: PUSH
9650: LD_INT 108
9652: PUSH
9653: LD_INT 109
9655: PUSH
9656: LD_INT 112
9658: PUSH
9659: LD_INT 116
9661: PUSH
9662: LD_INT 117
9664: PUSH
9665: LD_INT 118
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: PUSH
9680: EMPTY
9681: LIST
9682: LIST
9683: ST_TO_ADDR
9684: GO 12207
9686: LD_INT 7
9688: DOUBLE
9689: EQUAL
9690: IFTRUE 9694
9692: GO 9806
9694: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9695: LD_ADDR_VAR 0 1
9699: PUSH
9700: LD_INT 2
9702: PUSH
9703: LD_INT 4
9705: PUSH
9706: LD_INT 5
9708: PUSH
9709: LD_INT 7
9711: PUSH
9712: LD_INT 11
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: LD_INT 15
9720: PUSH
9721: LD_INT 16
9723: PUSH
9724: LD_INT 20
9726: PUSH
9727: LD_INT 21
9729: PUSH
9730: LD_INT 22
9732: PUSH
9733: LD_INT 23
9735: PUSH
9736: LD_INT 25
9738: PUSH
9739: LD_INT 26
9741: PUSH
9742: EMPTY
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 102
9763: PUSH
9764: LD_INT 103
9766: PUSH
9767: LD_INT 105
9769: PUSH
9770: LD_INT 106
9772: PUSH
9773: LD_INT 108
9775: PUSH
9776: LD_INT 112
9778: PUSH
9779: LD_INT 116
9781: PUSH
9782: LD_INT 117
9784: PUSH
9785: LD_INT 118
9787: PUSH
9788: EMPTY
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: ST_TO_ADDR
9804: GO 12207
9806: LD_INT 8
9808: DOUBLE
9809: EQUAL
9810: IFTRUE 9814
9812: GO 9954
9814: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9815: LD_ADDR_VAR 0 1
9819: PUSH
9820: LD_INT 2
9822: PUSH
9823: LD_INT 4
9825: PUSH
9826: LD_INT 5
9828: PUSH
9829: LD_INT 6
9831: PUSH
9832: LD_INT 7
9834: PUSH
9835: LD_INT 8
9837: PUSH
9838: LD_INT 11
9840: PUSH
9841: LD_INT 12
9843: PUSH
9844: LD_INT 15
9846: PUSH
9847: LD_INT 16
9849: PUSH
9850: LD_INT 20
9852: PUSH
9853: LD_INT 21
9855: PUSH
9856: LD_INT 22
9858: PUSH
9859: LD_INT 23
9861: PUSH
9862: LD_INT 25
9864: PUSH
9865: LD_INT 26
9867: PUSH
9868: LD_INT 30
9870: PUSH
9871: LD_INT 31
9873: PUSH
9874: LD_INT 32
9876: PUSH
9877: LD_INT 36
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 101
9904: PUSH
9905: LD_INT 102
9907: PUSH
9908: LD_INT 103
9910: PUSH
9911: LD_INT 105
9913: PUSH
9914: LD_INT 106
9916: PUSH
9917: LD_INT 108
9919: PUSH
9920: LD_INT 109
9922: PUSH
9923: LD_INT 112
9925: PUSH
9926: LD_INT 116
9928: PUSH
9929: LD_INT 117
9931: PUSH
9932: LD_INT 118
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: ST_TO_ADDR
9952: GO 12207
9954: LD_INT 9
9956: DOUBLE
9957: EQUAL
9958: IFTRUE 9962
9960: GO 10110
9962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9963: LD_ADDR_VAR 0 1
9967: PUSH
9968: LD_INT 2
9970: PUSH
9971: LD_INT 4
9973: PUSH
9974: LD_INT 5
9976: PUSH
9977: LD_INT 6
9979: PUSH
9980: LD_INT 7
9982: PUSH
9983: LD_INT 8
9985: PUSH
9986: LD_INT 11
9988: PUSH
9989: LD_INT 12
9991: PUSH
9992: LD_INT 15
9994: PUSH
9995: LD_INT 16
9997: PUSH
9998: LD_INT 20
10000: PUSH
10001: LD_INT 21
10003: PUSH
10004: LD_INT 22
10006: PUSH
10007: LD_INT 23
10009: PUSH
10010: LD_INT 25
10012: PUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 28
10018: PUSH
10019: LD_INT 30
10021: PUSH
10022: LD_INT 31
10024: PUSH
10025: LD_INT 32
10027: PUSH
10028: LD_INT 36
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 101
10056: PUSH
10057: LD_INT 102
10059: PUSH
10060: LD_INT 103
10062: PUSH
10063: LD_INT 105
10065: PUSH
10066: LD_INT 106
10068: PUSH
10069: LD_INT 108
10071: PUSH
10072: LD_INT 109
10074: PUSH
10075: LD_INT 112
10077: PUSH
10078: LD_INT 114
10080: PUSH
10081: LD_INT 116
10083: PUSH
10084: LD_INT 117
10086: PUSH
10087: LD_INT 118
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: PUSH
10104: EMPTY
10105: LIST
10106: LIST
10107: ST_TO_ADDR
10108: GO 12207
10110: LD_INT 10
10112: DOUBLE
10113: EQUAL
10114: IFTRUE 10118
10116: GO 10314
10118: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10119: LD_ADDR_VAR 0 1
10123: PUSH
10124: LD_INT 2
10126: PUSH
10127: LD_INT 4
10129: PUSH
10130: LD_INT 5
10132: PUSH
10133: LD_INT 6
10135: PUSH
10136: LD_INT 7
10138: PUSH
10139: LD_INT 8
10141: PUSH
10142: LD_INT 9
10144: PUSH
10145: LD_INT 10
10147: PUSH
10148: LD_INT 11
10150: PUSH
10151: LD_INT 12
10153: PUSH
10154: LD_INT 13
10156: PUSH
10157: LD_INT 14
10159: PUSH
10160: LD_INT 15
10162: PUSH
10163: LD_INT 16
10165: PUSH
10166: LD_INT 17
10168: PUSH
10169: LD_INT 18
10171: PUSH
10172: LD_INT 19
10174: PUSH
10175: LD_INT 20
10177: PUSH
10178: LD_INT 21
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 23
10186: PUSH
10187: LD_INT 24
10189: PUSH
10190: LD_INT 25
10192: PUSH
10193: LD_INT 26
10195: PUSH
10196: LD_INT 28
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 31
10204: PUSH
10205: LD_INT 32
10207: PUSH
10208: LD_INT 36
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 101
10244: PUSH
10245: LD_INT 102
10247: PUSH
10248: LD_INT 103
10250: PUSH
10251: LD_INT 104
10253: PUSH
10254: LD_INT 105
10256: PUSH
10257: LD_INT 106
10259: PUSH
10260: LD_INT 107
10262: PUSH
10263: LD_INT 108
10265: PUSH
10266: LD_INT 109
10268: PUSH
10269: LD_INT 110
10271: PUSH
10272: LD_INT 111
10274: PUSH
10275: LD_INT 112
10277: PUSH
10278: LD_INT 114
10280: PUSH
10281: LD_INT 116
10283: PUSH
10284: LD_INT 117
10286: PUSH
10287: LD_INT 118
10289: PUSH
10290: EMPTY
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: ST_TO_ADDR
10312: GO 12207
10314: LD_INT 11
10316: DOUBLE
10317: EQUAL
10318: IFTRUE 10322
10320: GO 10526
10322: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10323: LD_ADDR_VAR 0 1
10327: PUSH
10328: LD_INT 2
10330: PUSH
10331: LD_INT 3
10333: PUSH
10334: LD_INT 4
10336: PUSH
10337: LD_INT 5
10339: PUSH
10340: LD_INT 6
10342: PUSH
10343: LD_INT 7
10345: PUSH
10346: LD_INT 8
10348: PUSH
10349: LD_INT 9
10351: PUSH
10352: LD_INT 10
10354: PUSH
10355: LD_INT 11
10357: PUSH
10358: LD_INT 12
10360: PUSH
10361: LD_INT 13
10363: PUSH
10364: LD_INT 14
10366: PUSH
10367: LD_INT 15
10369: PUSH
10370: LD_INT 16
10372: PUSH
10373: LD_INT 17
10375: PUSH
10376: LD_INT 18
10378: PUSH
10379: LD_INT 19
10381: PUSH
10382: LD_INT 20
10384: PUSH
10385: LD_INT 21
10387: PUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 23
10393: PUSH
10394: LD_INT 24
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 26
10402: PUSH
10403: LD_INT 28
10405: PUSH
10406: LD_INT 30
10408: PUSH
10409: LD_INT 31
10411: PUSH
10412: LD_INT 32
10414: PUSH
10415: LD_INT 34
10417: PUSH
10418: LD_INT 36
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 101
10456: PUSH
10457: LD_INT 102
10459: PUSH
10460: LD_INT 103
10462: PUSH
10463: LD_INT 104
10465: PUSH
10466: LD_INT 105
10468: PUSH
10469: LD_INT 106
10471: PUSH
10472: LD_INT 107
10474: PUSH
10475: LD_INT 108
10477: PUSH
10478: LD_INT 109
10480: PUSH
10481: LD_INT 110
10483: PUSH
10484: LD_INT 111
10486: PUSH
10487: LD_INT 112
10489: PUSH
10490: LD_INT 114
10492: PUSH
10493: LD_INT 116
10495: PUSH
10496: LD_INT 117
10498: PUSH
10499: LD_INT 118
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: ST_TO_ADDR
10524: GO 12207
10526: LD_INT 12
10528: DOUBLE
10529: EQUAL
10530: IFTRUE 10534
10532: GO 10754
10534: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10535: LD_ADDR_VAR 0 1
10539: PUSH
10540: LD_INT 1
10542: PUSH
10543: LD_INT 2
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: LD_INT 4
10551: PUSH
10552: LD_INT 5
10554: PUSH
10555: LD_INT 6
10557: PUSH
10558: LD_INT 7
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: LD_INT 9
10566: PUSH
10567: LD_INT 10
10569: PUSH
10570: LD_INT 11
10572: PUSH
10573: LD_INT 12
10575: PUSH
10576: LD_INT 13
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: LD_INT 15
10584: PUSH
10585: LD_INT 16
10587: PUSH
10588: LD_INT 17
10590: PUSH
10591: LD_INT 18
10593: PUSH
10594: LD_INT 19
10596: PUSH
10597: LD_INT 20
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 22
10605: PUSH
10606: LD_INT 23
10608: PUSH
10609: LD_INT 24
10611: PUSH
10612: LD_INT 25
10614: PUSH
10615: LD_INT 26
10617: PUSH
10618: LD_INT 27
10620: PUSH
10621: LD_INT 28
10623: PUSH
10624: LD_INT 30
10626: PUSH
10627: LD_INT 31
10629: PUSH
10630: LD_INT 32
10632: PUSH
10633: LD_INT 33
10635: PUSH
10636: LD_INT 34
10638: PUSH
10639: LD_INT 36
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 101
10680: PUSH
10681: LD_INT 102
10683: PUSH
10684: LD_INT 103
10686: PUSH
10687: LD_INT 104
10689: PUSH
10690: LD_INT 105
10692: PUSH
10693: LD_INT 106
10695: PUSH
10696: LD_INT 107
10698: PUSH
10699: LD_INT 108
10701: PUSH
10702: LD_INT 109
10704: PUSH
10705: LD_INT 110
10707: PUSH
10708: LD_INT 111
10710: PUSH
10711: LD_INT 112
10713: PUSH
10714: LD_INT 113
10716: PUSH
10717: LD_INT 114
10719: PUSH
10720: LD_INT 116
10722: PUSH
10723: LD_INT 117
10725: PUSH
10726: LD_INT 118
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: ST_TO_ADDR
10752: GO 12207
10754: LD_INT 13
10756: DOUBLE
10757: EQUAL
10758: IFTRUE 10762
10760: GO 10970
10762: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10763: LD_ADDR_VAR 0 1
10767: PUSH
10768: LD_INT 1
10770: PUSH
10771: LD_INT 2
10773: PUSH
10774: LD_INT 3
10776: PUSH
10777: LD_INT 4
10779: PUSH
10780: LD_INT 5
10782: PUSH
10783: LD_INT 8
10785: PUSH
10786: LD_INT 9
10788: PUSH
10789: LD_INT 10
10791: PUSH
10792: LD_INT 11
10794: PUSH
10795: LD_INT 12
10797: PUSH
10798: LD_INT 14
10800: PUSH
10801: LD_INT 15
10803: PUSH
10804: LD_INT 16
10806: PUSH
10807: LD_INT 17
10809: PUSH
10810: LD_INT 18
10812: PUSH
10813: LD_INT 19
10815: PUSH
10816: LD_INT 20
10818: PUSH
10819: LD_INT 21
10821: PUSH
10822: LD_INT 22
10824: PUSH
10825: LD_INT 23
10827: PUSH
10828: LD_INT 24
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 26
10836: PUSH
10837: LD_INT 27
10839: PUSH
10840: LD_INT 28
10842: PUSH
10843: LD_INT 30
10845: PUSH
10846: LD_INT 31
10848: PUSH
10849: LD_INT 32
10851: PUSH
10852: LD_INT 33
10854: PUSH
10855: LD_INT 34
10857: PUSH
10858: LD_INT 36
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: PUSH
10894: LD_INT 101
10896: PUSH
10897: LD_INT 102
10899: PUSH
10900: LD_INT 103
10902: PUSH
10903: LD_INT 104
10905: PUSH
10906: LD_INT 105
10908: PUSH
10909: LD_INT 106
10911: PUSH
10912: LD_INT 107
10914: PUSH
10915: LD_INT 108
10917: PUSH
10918: LD_INT 109
10920: PUSH
10921: LD_INT 110
10923: PUSH
10924: LD_INT 111
10926: PUSH
10927: LD_INT 112
10929: PUSH
10930: LD_INT 113
10932: PUSH
10933: LD_INT 114
10935: PUSH
10936: LD_INT 116
10938: PUSH
10939: LD_INT 117
10941: PUSH
10942: LD_INT 118
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: ST_TO_ADDR
10968: GO 12207
10970: LD_INT 14
10972: DOUBLE
10973: EQUAL
10974: IFTRUE 10978
10976: GO 11202
10978: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10979: LD_ADDR_VAR 0 1
10983: PUSH
10984: LD_INT 1
10986: PUSH
10987: LD_INT 2
10989: PUSH
10990: LD_INT 3
10992: PUSH
10993: LD_INT 4
10995: PUSH
10996: LD_INT 5
10998: PUSH
10999: LD_INT 6
11001: PUSH
11002: LD_INT 7
11004: PUSH
11005: LD_INT 8
11007: PUSH
11008: LD_INT 9
11010: PUSH
11011: LD_INT 10
11013: PUSH
11014: LD_INT 11
11016: PUSH
11017: LD_INT 12
11019: PUSH
11020: LD_INT 13
11022: PUSH
11023: LD_INT 14
11025: PUSH
11026: LD_INT 15
11028: PUSH
11029: LD_INT 16
11031: PUSH
11032: LD_INT 17
11034: PUSH
11035: LD_INT 18
11037: PUSH
11038: LD_INT 19
11040: PUSH
11041: LD_INT 20
11043: PUSH
11044: LD_INT 21
11046: PUSH
11047: LD_INT 22
11049: PUSH
11050: LD_INT 23
11052: PUSH
11053: LD_INT 24
11055: PUSH
11056: LD_INT 25
11058: PUSH
11059: LD_INT 26
11061: PUSH
11062: LD_INT 27
11064: PUSH
11065: LD_INT 28
11067: PUSH
11068: LD_INT 29
11070: PUSH
11071: LD_INT 30
11073: PUSH
11074: LD_INT 31
11076: PUSH
11077: LD_INT 32
11079: PUSH
11080: LD_INT 33
11082: PUSH
11083: LD_INT 34
11085: PUSH
11086: LD_INT 36
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: PUSH
11126: LD_INT 101
11128: PUSH
11129: LD_INT 102
11131: PUSH
11132: LD_INT 103
11134: PUSH
11135: LD_INT 104
11137: PUSH
11138: LD_INT 105
11140: PUSH
11141: LD_INT 106
11143: PUSH
11144: LD_INT 107
11146: PUSH
11147: LD_INT 108
11149: PUSH
11150: LD_INT 109
11152: PUSH
11153: LD_INT 110
11155: PUSH
11156: LD_INT 111
11158: PUSH
11159: LD_INT 112
11161: PUSH
11162: LD_INT 113
11164: PUSH
11165: LD_INT 114
11167: PUSH
11168: LD_INT 116
11170: PUSH
11171: LD_INT 117
11173: PUSH
11174: LD_INT 118
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: ST_TO_ADDR
11200: GO 12207
11202: LD_INT 15
11204: DOUBLE
11205: EQUAL
11206: IFTRUE 11210
11208: GO 11434
11210: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11211: LD_ADDR_VAR 0 1
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: LD_INT 2
11221: PUSH
11222: LD_INT 3
11224: PUSH
11225: LD_INT 4
11227: PUSH
11228: LD_INT 5
11230: PUSH
11231: LD_INT 6
11233: PUSH
11234: LD_INT 7
11236: PUSH
11237: LD_INT 8
11239: PUSH
11240: LD_INT 9
11242: PUSH
11243: LD_INT 10
11245: PUSH
11246: LD_INT 11
11248: PUSH
11249: LD_INT 12
11251: PUSH
11252: LD_INT 13
11254: PUSH
11255: LD_INT 14
11257: PUSH
11258: LD_INT 15
11260: PUSH
11261: LD_INT 16
11263: PUSH
11264: LD_INT 17
11266: PUSH
11267: LD_INT 18
11269: PUSH
11270: LD_INT 19
11272: PUSH
11273: LD_INT 20
11275: PUSH
11276: LD_INT 21
11278: PUSH
11279: LD_INT 22
11281: PUSH
11282: LD_INT 23
11284: PUSH
11285: LD_INT 24
11287: PUSH
11288: LD_INT 25
11290: PUSH
11291: LD_INT 26
11293: PUSH
11294: LD_INT 27
11296: PUSH
11297: LD_INT 28
11299: PUSH
11300: LD_INT 29
11302: PUSH
11303: LD_INT 30
11305: PUSH
11306: LD_INT 31
11308: PUSH
11309: LD_INT 32
11311: PUSH
11312: LD_INT 33
11314: PUSH
11315: LD_INT 34
11317: PUSH
11318: LD_INT 36
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 101
11360: PUSH
11361: LD_INT 102
11363: PUSH
11364: LD_INT 103
11366: PUSH
11367: LD_INT 104
11369: PUSH
11370: LD_INT 105
11372: PUSH
11373: LD_INT 106
11375: PUSH
11376: LD_INT 107
11378: PUSH
11379: LD_INT 108
11381: PUSH
11382: LD_INT 109
11384: PUSH
11385: LD_INT 110
11387: PUSH
11388: LD_INT 111
11390: PUSH
11391: LD_INT 112
11393: PUSH
11394: LD_INT 113
11396: PUSH
11397: LD_INT 114
11399: PUSH
11400: LD_INT 116
11402: PUSH
11403: LD_INT 117
11405: PUSH
11406: LD_INT 118
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: ST_TO_ADDR
11432: GO 12207
11434: LD_INT 16
11436: DOUBLE
11437: EQUAL
11438: IFTRUE 11442
11440: GO 11578
11442: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11443: LD_ADDR_VAR 0 1
11447: PUSH
11448: LD_INT 2
11450: PUSH
11451: LD_INT 4
11453: PUSH
11454: LD_INT 5
11456: PUSH
11457: LD_INT 7
11459: PUSH
11460: LD_INT 11
11462: PUSH
11463: LD_INT 12
11465: PUSH
11466: LD_INT 15
11468: PUSH
11469: LD_INT 16
11471: PUSH
11472: LD_INT 20
11474: PUSH
11475: LD_INT 21
11477: PUSH
11478: LD_INT 22
11480: PUSH
11481: LD_INT 23
11483: PUSH
11484: LD_INT 25
11486: PUSH
11487: LD_INT 26
11489: PUSH
11490: LD_INT 30
11492: PUSH
11493: LD_INT 31
11495: PUSH
11496: LD_INT 32
11498: PUSH
11499: LD_INT 33
11501: PUSH
11502: LD_INT 34
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: PUSH
11526: LD_INT 101
11528: PUSH
11529: LD_INT 102
11531: PUSH
11532: LD_INT 103
11534: PUSH
11535: LD_INT 106
11537: PUSH
11538: LD_INT 108
11540: PUSH
11541: LD_INT 112
11543: PUSH
11544: LD_INT 113
11546: PUSH
11547: LD_INT 114
11549: PUSH
11550: LD_INT 116
11552: PUSH
11553: LD_INT 117
11555: PUSH
11556: LD_INT 118
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: EMPTY
11573: LIST
11574: LIST
11575: ST_TO_ADDR
11576: GO 12207
11578: LD_INT 17
11580: DOUBLE
11581: EQUAL
11582: IFTRUE 11586
11584: GO 11810
11586: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11587: LD_ADDR_VAR 0 1
11591: PUSH
11592: LD_INT 1
11594: PUSH
11595: LD_INT 2
11597: PUSH
11598: LD_INT 3
11600: PUSH
11601: LD_INT 4
11603: PUSH
11604: LD_INT 5
11606: PUSH
11607: LD_INT 6
11609: PUSH
11610: LD_INT 7
11612: PUSH
11613: LD_INT 8
11615: PUSH
11616: LD_INT 9
11618: PUSH
11619: LD_INT 10
11621: PUSH
11622: LD_INT 11
11624: PUSH
11625: LD_INT 12
11627: PUSH
11628: LD_INT 13
11630: PUSH
11631: LD_INT 14
11633: PUSH
11634: LD_INT 15
11636: PUSH
11637: LD_INT 16
11639: PUSH
11640: LD_INT 17
11642: PUSH
11643: LD_INT 18
11645: PUSH
11646: LD_INT 19
11648: PUSH
11649: LD_INT 20
11651: PUSH
11652: LD_INT 21
11654: PUSH
11655: LD_INT 22
11657: PUSH
11658: LD_INT 23
11660: PUSH
11661: LD_INT 24
11663: PUSH
11664: LD_INT 25
11666: PUSH
11667: LD_INT 26
11669: PUSH
11670: LD_INT 27
11672: PUSH
11673: LD_INT 28
11675: PUSH
11676: LD_INT 29
11678: PUSH
11679: LD_INT 30
11681: PUSH
11682: LD_INT 31
11684: PUSH
11685: LD_INT 32
11687: PUSH
11688: LD_INT 33
11690: PUSH
11691: LD_INT 34
11693: PUSH
11694: LD_INT 36
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PUSH
11734: LD_INT 101
11736: PUSH
11737: LD_INT 102
11739: PUSH
11740: LD_INT 103
11742: PUSH
11743: LD_INT 104
11745: PUSH
11746: LD_INT 105
11748: PUSH
11749: LD_INT 106
11751: PUSH
11752: LD_INT 107
11754: PUSH
11755: LD_INT 108
11757: PUSH
11758: LD_INT 109
11760: PUSH
11761: LD_INT 110
11763: PUSH
11764: LD_INT 111
11766: PUSH
11767: LD_INT 112
11769: PUSH
11770: LD_INT 113
11772: PUSH
11773: LD_INT 114
11775: PUSH
11776: LD_INT 116
11778: PUSH
11779: LD_INT 117
11781: PUSH
11782: LD_INT 118
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: EMPTY
11805: LIST
11806: LIST
11807: ST_TO_ADDR
11808: GO 12207
11810: LD_INT 18
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11966
11818: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11819: LD_ADDR_VAR 0 1
11823: PUSH
11824: LD_INT 2
11826: PUSH
11827: LD_INT 4
11829: PUSH
11830: LD_INT 5
11832: PUSH
11833: LD_INT 7
11835: PUSH
11836: LD_INT 11
11838: PUSH
11839: LD_INT 12
11841: PUSH
11842: LD_INT 15
11844: PUSH
11845: LD_INT 16
11847: PUSH
11848: LD_INT 20
11850: PUSH
11851: LD_INT 21
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_INT 23
11859: PUSH
11860: LD_INT 25
11862: PUSH
11863: LD_INT 26
11865: PUSH
11866: LD_INT 30
11868: PUSH
11869: LD_INT 31
11871: PUSH
11872: LD_INT 32
11874: PUSH
11875: LD_INT 33
11877: PUSH
11878: LD_INT 34
11880: PUSH
11881: LD_INT 35
11883: PUSH
11884: LD_INT 36
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 101
11912: PUSH
11913: LD_INT 102
11915: PUSH
11916: LD_INT 103
11918: PUSH
11919: LD_INT 106
11921: PUSH
11922: LD_INT 108
11924: PUSH
11925: LD_INT 112
11927: PUSH
11928: LD_INT 113
11930: PUSH
11931: LD_INT 114
11933: PUSH
11934: LD_INT 115
11936: PUSH
11937: LD_INT 116
11939: PUSH
11940: LD_INT 117
11942: PUSH
11943: LD_INT 118
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: ST_TO_ADDR
11964: GO 12207
11966: LD_INT 19
11968: DOUBLE
11969: EQUAL
11970: IFTRUE 11974
11972: GO 12206
11974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11975: LD_ADDR_VAR 0 1
11979: PUSH
11980: LD_INT 1
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: LD_INT 5
11994: PUSH
11995: LD_INT 6
11997: PUSH
11998: LD_INT 7
12000: PUSH
12001: LD_INT 8
12003: PUSH
12004: LD_INT 9
12006: PUSH
12007: LD_INT 10
12009: PUSH
12010: LD_INT 11
12012: PUSH
12013: LD_INT 12
12015: PUSH
12016: LD_INT 13
12018: PUSH
12019: LD_INT 14
12021: PUSH
12022: LD_INT 15
12024: PUSH
12025: LD_INT 16
12027: PUSH
12028: LD_INT 17
12030: PUSH
12031: LD_INT 18
12033: PUSH
12034: LD_INT 19
12036: PUSH
12037: LD_INT 20
12039: PUSH
12040: LD_INT 21
12042: PUSH
12043: LD_INT 22
12045: PUSH
12046: LD_INT 23
12048: PUSH
12049: LD_INT 24
12051: PUSH
12052: LD_INT 25
12054: PUSH
12055: LD_INT 26
12057: PUSH
12058: LD_INT 27
12060: PUSH
12061: LD_INT 28
12063: PUSH
12064: LD_INT 29
12066: PUSH
12067: LD_INT 30
12069: PUSH
12070: LD_INT 31
12072: PUSH
12073: LD_INT 32
12075: PUSH
12076: LD_INT 33
12078: PUSH
12079: LD_INT 34
12081: PUSH
12082: LD_INT 35
12084: PUSH
12085: LD_INT 36
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 101
12128: PUSH
12129: LD_INT 102
12131: PUSH
12132: LD_INT 103
12134: PUSH
12135: LD_INT 104
12137: PUSH
12138: LD_INT 105
12140: PUSH
12141: LD_INT 106
12143: PUSH
12144: LD_INT 107
12146: PUSH
12147: LD_INT 108
12149: PUSH
12150: LD_INT 109
12152: PUSH
12153: LD_INT 110
12155: PUSH
12156: LD_INT 111
12158: PUSH
12159: LD_INT 112
12161: PUSH
12162: LD_INT 113
12164: PUSH
12165: LD_INT 114
12167: PUSH
12168: LD_INT 115
12170: PUSH
12171: LD_INT 116
12173: PUSH
12174: LD_INT 117
12176: PUSH
12177: LD_INT 118
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: ST_TO_ADDR
12204: GO 12207
12206: POP
// end else
12207: GO 12438
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12209: LD_ADDR_VAR 0 1
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: LD_INT 2
12219: PUSH
12220: LD_INT 3
12222: PUSH
12223: LD_INT 4
12225: PUSH
12226: LD_INT 5
12228: PUSH
12229: LD_INT 6
12231: PUSH
12232: LD_INT 7
12234: PUSH
12235: LD_INT 8
12237: PUSH
12238: LD_INT 9
12240: PUSH
12241: LD_INT 10
12243: PUSH
12244: LD_INT 11
12246: PUSH
12247: LD_INT 12
12249: PUSH
12250: LD_INT 13
12252: PUSH
12253: LD_INT 14
12255: PUSH
12256: LD_INT 15
12258: PUSH
12259: LD_INT 16
12261: PUSH
12262: LD_INT 17
12264: PUSH
12265: LD_INT 18
12267: PUSH
12268: LD_INT 19
12270: PUSH
12271: LD_INT 20
12273: PUSH
12274: LD_INT 21
12276: PUSH
12277: LD_INT 22
12279: PUSH
12280: LD_INT 23
12282: PUSH
12283: LD_INT 24
12285: PUSH
12286: LD_INT 25
12288: PUSH
12289: LD_INT 26
12291: PUSH
12292: LD_INT 27
12294: PUSH
12295: LD_INT 28
12297: PUSH
12298: LD_INT 29
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 31
12306: PUSH
12307: LD_INT 32
12309: PUSH
12310: LD_INT 33
12312: PUSH
12313: LD_INT 34
12315: PUSH
12316: LD_INT 35
12318: PUSH
12319: LD_INT 36
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: LD_INT 101
12362: PUSH
12363: LD_INT 102
12365: PUSH
12366: LD_INT 103
12368: PUSH
12369: LD_INT 104
12371: PUSH
12372: LD_INT 105
12374: PUSH
12375: LD_INT 106
12377: PUSH
12378: LD_INT 107
12380: PUSH
12381: LD_INT 108
12383: PUSH
12384: LD_INT 109
12386: PUSH
12387: LD_INT 110
12389: PUSH
12390: LD_INT 111
12392: PUSH
12393: LD_INT 112
12395: PUSH
12396: LD_INT 113
12398: PUSH
12399: LD_INT 114
12401: PUSH
12402: LD_INT 115
12404: PUSH
12405: LD_INT 116
12407: PUSH
12408: LD_INT 117
12410: PUSH
12411: LD_INT 118
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: ST_TO_ADDR
// if result then
12438: LD_VAR 0 1
12442: IFFALSE 12731
// begin normal :=  ;
12444: LD_ADDR_VAR 0 3
12448: PUSH
12449: LD_STRING 
12451: ST_TO_ADDR
// hardcore :=  ;
12452: LD_ADDR_VAR 0 4
12456: PUSH
12457: LD_STRING 
12459: ST_TO_ADDR
// for i = 1 to normalCounter do
12460: LD_ADDR_VAR 0 5
12464: PUSH
12465: DOUBLE
12466: LD_INT 1
12468: DEC
12469: ST_TO_ADDR
12470: LD_EXP 44
12474: PUSH
12475: FOR_TO
12476: IFFALSE 12577
// begin tmp := 0 ;
12478: LD_ADDR_VAR 0 2
12482: PUSH
12483: LD_STRING 0
12485: ST_TO_ADDR
// if result [ 1 ] then
12486: LD_VAR 0 1
12490: PUSH
12491: LD_INT 1
12493: ARRAY
12494: IFFALSE 12559
// if result [ 1 ] [ 1 ] = i then
12496: LD_VAR 0 1
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_VAR 0 5
12513: EQUAL
12514: IFFALSE 12559
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12516: LD_ADDR_VAR 0 1
12520: PUSH
12521: LD_VAR 0 1
12525: PPUSH
12526: LD_INT 1
12528: PPUSH
12529: LD_VAR 0 1
12533: PUSH
12534: LD_INT 1
12536: ARRAY
12537: PPUSH
12538: LD_INT 1
12540: PPUSH
12541: CALL_OW 3
12545: PPUSH
12546: CALL_OW 1
12550: ST_TO_ADDR
// tmp := 1 ;
12551: LD_ADDR_VAR 0 2
12555: PUSH
12556: LD_STRING 1
12558: ST_TO_ADDR
// end ; normal := normal & tmp ;
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: LD_VAR 0 3
12568: PUSH
12569: LD_VAR 0 2
12573: STR
12574: ST_TO_ADDR
// end ;
12575: GO 12475
12577: POP
12578: POP
// for i = 1 to hardcoreCounter do
12579: LD_ADDR_VAR 0 5
12583: PUSH
12584: DOUBLE
12585: LD_INT 1
12587: DEC
12588: ST_TO_ADDR
12589: LD_EXP 45
12593: PUSH
12594: FOR_TO
12595: IFFALSE 12700
// begin tmp := 0 ;
12597: LD_ADDR_VAR 0 2
12601: PUSH
12602: LD_STRING 0
12604: ST_TO_ADDR
// if result [ 2 ] then
12605: LD_VAR 0 1
12609: PUSH
12610: LD_INT 2
12612: ARRAY
12613: IFFALSE 12682
// if result [ 2 ] [ 1 ] = 100 + i then
12615: LD_VAR 0 1
12619: PUSH
12620: LD_INT 2
12622: ARRAY
12623: PUSH
12624: LD_INT 1
12626: ARRAY
12627: PUSH
12628: LD_INT 100
12630: PUSH
12631: LD_VAR 0 5
12635: PLUS
12636: EQUAL
12637: IFFALSE 12682
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12639: LD_ADDR_VAR 0 1
12643: PUSH
12644: LD_VAR 0 1
12648: PPUSH
12649: LD_INT 2
12651: PPUSH
12652: LD_VAR 0 1
12656: PUSH
12657: LD_INT 2
12659: ARRAY
12660: PPUSH
12661: LD_INT 1
12663: PPUSH
12664: CALL_OW 3
12668: PPUSH
12669: CALL_OW 1
12673: ST_TO_ADDR
// tmp := 1 ;
12674: LD_ADDR_VAR 0 2
12678: PUSH
12679: LD_STRING 1
12681: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: LD_VAR 0 4
12691: PUSH
12692: LD_VAR 0 2
12696: STR
12697: ST_TO_ADDR
// end ;
12698: GO 12594
12700: POP
12701: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12702: LD_STRING getStreamItemsFromMission("
12704: PUSH
12705: LD_VAR 0 3
12709: STR
12710: PUSH
12711: LD_STRING ","
12713: STR
12714: PUSH
12715: LD_VAR 0 4
12719: STR
12720: PUSH
12721: LD_STRING ")
12723: STR
12724: PPUSH
12725: CALL_OW 559
// end else
12729: GO 12738
// ToLua ( getStreamItemsFromMission("","") ) ;
12731: LD_STRING getStreamItemsFromMission("","")
12733: PPUSH
12734: CALL_OW 559
// end ;
12738: LD_VAR 0 1
12742: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12743: LD_EXP 43
12747: PUSH
12748: LD_EXP 48
12752: AND
12753: IFFALSE 12877
12755: GO 12757
12757: DISABLE
12758: LD_INT 0
12760: PPUSH
12761: PPUSH
// begin enable ;
12762: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12763: LD_ADDR_VAR 0 2
12767: PUSH
12768: LD_INT 22
12770: PUSH
12771: LD_OWVAR 2
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 2
12782: PUSH
12783: LD_INT 34
12785: PUSH
12786: LD_INT 7
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 34
12795: PUSH
12796: LD_INT 45
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 34
12805: PUSH
12806: LD_INT 28
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: LD_INT 34
12815: PUSH
12816: LD_INT 47
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: PPUSH
12834: CALL_OW 69
12838: ST_TO_ADDR
// if not tmp then
12839: LD_VAR 0 2
12843: NOT
12844: IFFALSE 12848
// exit ;
12846: GO 12877
// for i in tmp do
12848: LD_ADDR_VAR 0 1
12852: PUSH
12853: LD_VAR 0 2
12857: PUSH
12858: FOR_IN
12859: IFFALSE 12875
// begin SetLives ( i , 0 ) ;
12861: LD_VAR 0 1
12865: PPUSH
12866: LD_INT 0
12868: PPUSH
12869: CALL_OW 234
// end ;
12873: GO 12858
12875: POP
12876: POP
// end ;
12877: PPOPN 2
12879: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12880: LD_EXP 43
12884: PUSH
12885: LD_EXP 49
12889: AND
12890: IFFALSE 12974
12892: GO 12894
12894: DISABLE
12895: LD_INT 0
12897: PPUSH
12898: PPUSH
// begin enable ;
12899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12900: LD_ADDR_VAR 0 2
12904: PUSH
12905: LD_INT 22
12907: PUSH
12908: LD_OWVAR 2
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 32
12919: PUSH
12920: LD_INT 3
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PPUSH
12931: CALL_OW 69
12935: ST_TO_ADDR
// if not tmp then
12936: LD_VAR 0 2
12940: NOT
12941: IFFALSE 12945
// exit ;
12943: GO 12974
// for i in tmp do
12945: LD_ADDR_VAR 0 1
12949: PUSH
12950: LD_VAR 0 2
12954: PUSH
12955: FOR_IN
12956: IFFALSE 12972
// begin SetLives ( i , 0 ) ;
12958: LD_VAR 0 1
12962: PPUSH
12963: LD_INT 0
12965: PPUSH
12966: CALL_OW 234
// end ;
12970: GO 12955
12972: POP
12973: POP
// end ;
12974: PPOPN 2
12976: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12977: LD_EXP 43
12981: PUSH
12982: LD_EXP 46
12986: AND
12987: IFFALSE 13080
12989: GO 12991
12991: DISABLE
12992: LD_INT 0
12994: PPUSH
// begin enable ;
12995: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12996: LD_ADDR_VAR 0 1
13000: PUSH
13001: LD_INT 22
13003: PUSH
13004: LD_OWVAR 2
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 2
13015: PUSH
13016: LD_INT 25
13018: PUSH
13019: LD_INT 5
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: LD_INT 25
13028: PUSH
13029: LD_INT 9
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 25
13038: PUSH
13039: LD_INT 8
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: PPUSH
13056: CALL_OW 69
13060: PUSH
13061: FOR_IN
13062: IFFALSE 13078
// begin SetClass ( i , 1 ) ;
13064: LD_VAR 0 1
13068: PPUSH
13069: LD_INT 1
13071: PPUSH
13072: CALL_OW 336
// end ;
13076: GO 13061
13078: POP
13079: POP
// end ;
13080: PPOPN 1
13082: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13083: LD_EXP 43
13087: PUSH
13088: LD_EXP 47
13092: AND
13093: PUSH
13094: LD_OWVAR 65
13098: PUSH
13099: LD_INT 7
13101: LESS
13102: AND
13103: IFFALSE 13117
13105: GO 13107
13107: DISABLE
// begin enable ;
13108: ENABLE
// game_speed := 7 ;
13109: LD_ADDR_OWVAR 65
13113: PUSH
13114: LD_INT 7
13116: ST_TO_ADDR
// end ;
13117: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13118: LD_EXP 43
13122: PUSH
13123: LD_EXP 50
13127: AND
13128: IFFALSE 13330
13130: GO 13132
13132: DISABLE
13133: LD_INT 0
13135: PPUSH
13136: PPUSH
13137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13138: LD_ADDR_VAR 0 3
13142: PUSH
13143: LD_INT 81
13145: PUSH
13146: LD_OWVAR 2
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 1
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PPUSH
13169: CALL_OW 69
13173: ST_TO_ADDR
// if not tmp then
13174: LD_VAR 0 3
13178: NOT
13179: IFFALSE 13183
// exit ;
13181: GO 13330
// if tmp > 5 then
13183: LD_VAR 0 3
13187: PUSH
13188: LD_INT 5
13190: GREATER
13191: IFFALSE 13203
// k := 5 else
13193: LD_ADDR_VAR 0 2
13197: PUSH
13198: LD_INT 5
13200: ST_TO_ADDR
13201: GO 13213
// k := tmp ;
13203: LD_ADDR_VAR 0 2
13207: PUSH
13208: LD_VAR 0 3
13212: ST_TO_ADDR
// for i := 1 to k do
13213: LD_ADDR_VAR 0 1
13217: PUSH
13218: DOUBLE
13219: LD_INT 1
13221: DEC
13222: ST_TO_ADDR
13223: LD_VAR 0 2
13227: PUSH
13228: FOR_TO
13229: IFFALSE 13328
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13231: LD_VAR 0 3
13235: PUSH
13236: LD_VAR 0 1
13240: ARRAY
13241: PPUSH
13242: LD_VAR 0 1
13246: PUSH
13247: LD_INT 4
13249: MOD
13250: PUSH
13251: LD_INT 1
13253: PLUS
13254: PPUSH
13255: CALL_OW 259
13259: PUSH
13260: LD_INT 10
13262: LESS
13263: IFFALSE 13326
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13265: LD_VAR 0 3
13269: PUSH
13270: LD_VAR 0 1
13274: ARRAY
13275: PPUSH
13276: LD_VAR 0 1
13280: PUSH
13281: LD_INT 4
13283: MOD
13284: PUSH
13285: LD_INT 1
13287: PLUS
13288: PPUSH
13289: LD_VAR 0 3
13293: PUSH
13294: LD_VAR 0 1
13298: ARRAY
13299: PPUSH
13300: LD_VAR 0 1
13304: PUSH
13305: LD_INT 4
13307: MOD
13308: PUSH
13309: LD_INT 1
13311: PLUS
13312: PPUSH
13313: CALL_OW 259
13317: PUSH
13318: LD_INT 1
13320: PLUS
13321: PPUSH
13322: CALL_OW 237
13326: GO 13228
13328: POP
13329: POP
// end ;
13330: PPOPN 3
13332: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13333: LD_EXP 43
13337: PUSH
13338: LD_EXP 51
13342: AND
13343: IFFALSE 13363
13345: GO 13347
13347: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13348: LD_INT 4
13350: PPUSH
13351: LD_OWVAR 2
13355: PPUSH
13356: LD_INT 0
13358: PPUSH
13359: CALL_OW 324
13363: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13364: LD_EXP 43
13368: PUSH
13369: LD_EXP 80
13373: AND
13374: IFFALSE 13394
13376: GO 13378
13378: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13379: LD_INT 19
13381: PPUSH
13382: LD_OWVAR 2
13386: PPUSH
13387: LD_INT 0
13389: PPUSH
13390: CALL_OW 324
13394: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13395: LD_EXP 43
13399: PUSH
13400: LD_EXP 52
13404: AND
13405: IFFALSE 13507
13407: GO 13409
13409: DISABLE
13410: LD_INT 0
13412: PPUSH
13413: PPUSH
// begin enable ;
13414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13415: LD_ADDR_VAR 0 2
13419: PUSH
13420: LD_INT 22
13422: PUSH
13423: LD_OWVAR 2
13427: PUSH
13428: EMPTY
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 2
13434: PUSH
13435: LD_INT 34
13437: PUSH
13438: LD_INT 11
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: LD_INT 34
13447: PUSH
13448: LD_INT 30
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: ST_TO_ADDR
// if not tmp then
13469: LD_VAR 0 2
13473: NOT
13474: IFFALSE 13478
// exit ;
13476: GO 13507
// for i in tmp do
13478: LD_ADDR_VAR 0 1
13482: PUSH
13483: LD_VAR 0 2
13487: PUSH
13488: FOR_IN
13489: IFFALSE 13505
// begin SetLives ( i , 0 ) ;
13491: LD_VAR 0 1
13495: PPUSH
13496: LD_INT 0
13498: PPUSH
13499: CALL_OW 234
// end ;
13503: GO 13488
13505: POP
13506: POP
// end ;
13507: PPOPN 2
13509: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13510: LD_EXP 43
13514: PUSH
13515: LD_EXP 53
13519: AND
13520: IFFALSE 13540
13522: GO 13524
13524: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13525: LD_INT 32
13527: PPUSH
13528: LD_OWVAR 2
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 324
13540: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13541: LD_EXP 43
13545: PUSH
13546: LD_EXP 54
13550: AND
13551: IFFALSE 13732
13553: GO 13555
13555: DISABLE
13556: LD_INT 0
13558: PPUSH
13559: PPUSH
13560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_OWVAR 2
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: PUSH
13578: LD_INT 33
13580: PUSH
13581: LD_INT 3
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: PPUSH
13592: CALL_OW 69
13596: ST_TO_ADDR
// if not tmp then
13597: LD_VAR 0 2
13601: NOT
13602: IFFALSE 13606
// exit ;
13604: GO 13732
// side := 0 ;
13606: LD_ADDR_VAR 0 3
13610: PUSH
13611: LD_INT 0
13613: ST_TO_ADDR
// for i := 1 to 8 do
13614: LD_ADDR_VAR 0 1
13618: PUSH
13619: DOUBLE
13620: LD_INT 1
13622: DEC
13623: ST_TO_ADDR
13624: LD_INT 8
13626: PUSH
13627: FOR_TO
13628: IFFALSE 13676
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13630: LD_OWVAR 2
13634: PUSH
13635: LD_VAR 0 1
13639: NONEQUAL
13640: PUSH
13641: LD_OWVAR 2
13645: PPUSH
13646: LD_VAR 0 1
13650: PPUSH
13651: CALL_OW 81
13655: PUSH
13656: LD_INT 2
13658: EQUAL
13659: AND
13660: IFFALSE 13674
// begin side := i ;
13662: LD_ADDR_VAR 0 3
13666: PUSH
13667: LD_VAR 0 1
13671: ST_TO_ADDR
// break ;
13672: GO 13676
// end ;
13674: GO 13627
13676: POP
13677: POP
// if not side then
13678: LD_VAR 0 3
13682: NOT
13683: IFFALSE 13687
// exit ;
13685: GO 13732
// for i := 1 to tmp do
13687: LD_ADDR_VAR 0 1
13691: PUSH
13692: DOUBLE
13693: LD_INT 1
13695: DEC
13696: ST_TO_ADDR
13697: LD_VAR 0 2
13701: PUSH
13702: FOR_TO
13703: IFFALSE 13730
// if Prob ( 60 ) then
13705: LD_INT 60
13707: PPUSH
13708: CALL_OW 13
13712: IFFALSE 13728
// SetSide ( i , side ) ;
13714: LD_VAR 0 1
13718: PPUSH
13719: LD_VAR 0 3
13723: PPUSH
13724: CALL_OW 235
13728: GO 13702
13730: POP
13731: POP
// end ;
13732: PPOPN 3
13734: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13735: LD_EXP 43
13739: PUSH
13740: LD_EXP 56
13744: AND
13745: IFFALSE 13864
13747: GO 13749
13749: DISABLE
13750: LD_INT 0
13752: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13753: LD_ADDR_VAR 0 1
13757: PUSH
13758: LD_INT 22
13760: PUSH
13761: LD_OWVAR 2
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: LD_INT 23
13785: PUSH
13786: LD_INT 0
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: FOR_IN
13808: IFFALSE 13862
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13810: LD_VAR 0 1
13814: PPUSH
13815: CALL_OW 257
13819: PUSH
13820: LD_INT 1
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: LD_INT 4
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: IN
13838: IFFALSE 13860
// SetClass ( un , rand ( 1 , 4 ) ) ;
13840: LD_VAR 0 1
13844: PPUSH
13845: LD_INT 1
13847: PPUSH
13848: LD_INT 4
13850: PPUSH
13851: CALL_OW 12
13855: PPUSH
13856: CALL_OW 336
13860: GO 13807
13862: POP
13863: POP
// end ;
13864: PPOPN 1
13866: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13867: LD_EXP 43
13871: PUSH
13872: LD_EXP 55
13876: AND
13877: IFFALSE 13956
13879: GO 13881
13881: DISABLE
13882: LD_INT 0
13884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13885: LD_ADDR_VAR 0 1
13889: PUSH
13890: LD_INT 22
13892: PUSH
13893: LD_OWVAR 2
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 21
13904: PUSH
13905: LD_INT 3
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PPUSH
13916: CALL_OW 69
13920: ST_TO_ADDR
// if not tmp then
13921: LD_VAR 0 1
13925: NOT
13926: IFFALSE 13930
// exit ;
13928: GO 13956
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13930: LD_VAR 0 1
13934: PUSH
13935: LD_INT 1
13937: PPUSH
13938: LD_VAR 0 1
13942: PPUSH
13943: CALL_OW 12
13947: ARRAY
13948: PPUSH
13949: LD_INT 100
13951: PPUSH
13952: CALL_OW 234
// end ;
13956: PPOPN 1
13958: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13959: LD_EXP 43
13963: PUSH
13964: LD_EXP 57
13968: AND
13969: IFFALSE 14067
13971: GO 13973
13973: DISABLE
13974: LD_INT 0
13976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13977: LD_ADDR_VAR 0 1
13981: PUSH
13982: LD_INT 22
13984: PUSH
13985: LD_OWVAR 2
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 21
13996: PUSH
13997: LD_INT 1
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: CALL_OW 69
14012: ST_TO_ADDR
// if not tmp then
14013: LD_VAR 0 1
14017: NOT
14018: IFFALSE 14022
// exit ;
14020: GO 14067
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14022: LD_VAR 0 1
14026: PUSH
14027: LD_INT 1
14029: PPUSH
14030: LD_VAR 0 1
14034: PPUSH
14035: CALL_OW 12
14039: ARRAY
14040: PPUSH
14041: LD_INT 1
14043: PPUSH
14044: LD_INT 4
14046: PPUSH
14047: CALL_OW 12
14051: PPUSH
14052: LD_INT 3000
14054: PPUSH
14055: LD_INT 9000
14057: PPUSH
14058: CALL_OW 12
14062: PPUSH
14063: CALL_OW 492
// end ;
14067: PPOPN 1
14069: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14070: LD_EXP 43
14074: PUSH
14075: LD_EXP 58
14079: AND
14080: IFFALSE 14100
14082: GO 14084
14084: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14085: LD_INT 1
14087: PPUSH
14088: LD_OWVAR 2
14092: PPUSH
14093: LD_INT 0
14095: PPUSH
14096: CALL_OW 324
14100: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14101: LD_EXP 43
14105: PUSH
14106: LD_EXP 59
14110: AND
14111: IFFALSE 14194
14113: GO 14115
14115: DISABLE
14116: LD_INT 0
14118: PPUSH
14119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14120: LD_ADDR_VAR 0 2
14124: PUSH
14125: LD_INT 22
14127: PUSH
14128: LD_OWVAR 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 21
14139: PUSH
14140: LD_INT 3
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PPUSH
14151: CALL_OW 69
14155: ST_TO_ADDR
// if not tmp then
14156: LD_VAR 0 2
14160: NOT
14161: IFFALSE 14165
// exit ;
14163: GO 14194
// for i in tmp do
14165: LD_ADDR_VAR 0 1
14169: PUSH
14170: LD_VAR 0 2
14174: PUSH
14175: FOR_IN
14176: IFFALSE 14192
// SetBLevel ( i , 10 ) ;
14178: LD_VAR 0 1
14182: PPUSH
14183: LD_INT 10
14185: PPUSH
14186: CALL_OW 241
14190: GO 14175
14192: POP
14193: POP
// end ;
14194: PPOPN 2
14196: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14197: LD_EXP 43
14201: PUSH
14202: LD_EXP 60
14206: AND
14207: IFFALSE 14318
14209: GO 14211
14211: DISABLE
14212: LD_INT 0
14214: PPUSH
14215: PPUSH
14216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_INT 22
14224: PUSH
14225: LD_OWVAR 2
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 25
14236: PUSH
14237: LD_INT 1
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PPUSH
14248: CALL_OW 69
14252: ST_TO_ADDR
// if not tmp then
14253: LD_VAR 0 3
14257: NOT
14258: IFFALSE 14262
// exit ;
14260: GO 14318
// un := tmp [ rand ( 1 , tmp ) ] ;
14262: LD_ADDR_VAR 0 2
14266: PUSH
14267: LD_VAR 0 3
14271: PUSH
14272: LD_INT 1
14274: PPUSH
14275: LD_VAR 0 3
14279: PPUSH
14280: CALL_OW 12
14284: ARRAY
14285: ST_TO_ADDR
// if Crawls ( un ) then
14286: LD_VAR 0 2
14290: PPUSH
14291: CALL_OW 318
14295: IFFALSE 14306
// ComWalk ( un ) ;
14297: LD_VAR 0 2
14301: PPUSH
14302: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14306: LD_VAR 0 2
14310: PPUSH
14311: LD_INT 5
14313: PPUSH
14314: CALL_OW 336
// end ;
14318: PPOPN 3
14320: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14321: LD_EXP 43
14325: PUSH
14326: LD_EXP 61
14330: AND
14331: PUSH
14332: LD_OWVAR 67
14336: PUSH
14337: LD_INT 4
14339: LESS
14340: AND
14341: IFFALSE 14360
14343: GO 14345
14345: DISABLE
// begin Difficulty := Difficulty + 1 ;
14346: LD_ADDR_OWVAR 67
14350: PUSH
14351: LD_OWVAR 67
14355: PUSH
14356: LD_INT 1
14358: PLUS
14359: ST_TO_ADDR
// end ;
14360: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14361: LD_EXP 43
14365: PUSH
14366: LD_EXP 62
14370: AND
14371: IFFALSE 14474
14373: GO 14375
14375: DISABLE
14376: LD_INT 0
14378: PPUSH
// begin for i := 1 to 5 do
14379: LD_ADDR_VAR 0 1
14383: PUSH
14384: DOUBLE
14385: LD_INT 1
14387: DEC
14388: ST_TO_ADDR
14389: LD_INT 5
14391: PUSH
14392: FOR_TO
14393: IFFALSE 14472
// begin uc_nation := nation_nature ;
14395: LD_ADDR_OWVAR 21
14399: PUSH
14400: LD_INT 0
14402: ST_TO_ADDR
// uc_side := 0 ;
14403: LD_ADDR_OWVAR 20
14407: PUSH
14408: LD_INT 0
14410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14411: LD_ADDR_OWVAR 29
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 12
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: ST_TO_ADDR
// hc_agressivity := 20 ;
14426: LD_ADDR_OWVAR 35
14430: PUSH
14431: LD_INT 20
14433: ST_TO_ADDR
// hc_class := class_tiger ;
14434: LD_ADDR_OWVAR 28
14438: PUSH
14439: LD_INT 14
14441: ST_TO_ADDR
// hc_gallery :=  ;
14442: LD_ADDR_OWVAR 33
14446: PUSH
14447: LD_STRING 
14449: ST_TO_ADDR
// hc_name :=  ;
14450: LD_ADDR_OWVAR 26
14454: PUSH
14455: LD_STRING 
14457: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14458: CALL_OW 44
14462: PPUSH
14463: LD_INT 0
14465: PPUSH
14466: CALL_OW 51
// end ;
14470: GO 14392
14472: POP
14473: POP
// end ;
14474: PPOPN 1
14476: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14477: LD_EXP 43
14481: PUSH
14482: LD_EXP 63
14486: AND
14487: IFFALSE 14496
14489: GO 14491
14491: DISABLE
// StreamSibBomb ;
14492: CALL 14497 0 0
14496: END
// export function StreamSibBomb ; var i , x , y ; begin
14497: LD_INT 0
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
// result := false ;
14503: LD_ADDR_VAR 0 1
14507: PUSH
14508: LD_INT 0
14510: ST_TO_ADDR
// for i := 1 to 16 do
14511: LD_ADDR_VAR 0 2
14515: PUSH
14516: DOUBLE
14517: LD_INT 1
14519: DEC
14520: ST_TO_ADDR
14521: LD_INT 16
14523: PUSH
14524: FOR_TO
14525: IFFALSE 14724
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: LD_INT 10
14534: PUSH
14535: LD_INT 20
14537: PUSH
14538: LD_INT 30
14540: PUSH
14541: LD_INT 40
14543: PUSH
14544: LD_INT 50
14546: PUSH
14547: LD_INT 60
14549: PUSH
14550: LD_INT 70
14552: PUSH
14553: LD_INT 80
14555: PUSH
14556: LD_INT 90
14558: PUSH
14559: LD_INT 100
14561: PUSH
14562: LD_INT 110
14564: PUSH
14565: LD_INT 120
14567: PUSH
14568: LD_INT 130
14570: PUSH
14571: LD_INT 140
14573: PUSH
14574: LD_INT 150
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: LD_INT 1
14596: PPUSH
14597: LD_INT 15
14599: PPUSH
14600: CALL_OW 12
14604: ARRAY
14605: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14606: LD_ADDR_VAR 0 4
14610: PUSH
14611: LD_INT 10
14613: PUSH
14614: LD_INT 20
14616: PUSH
14617: LD_INT 30
14619: PUSH
14620: LD_INT 40
14622: PUSH
14623: LD_INT 50
14625: PUSH
14626: LD_INT 60
14628: PUSH
14629: LD_INT 70
14631: PUSH
14632: LD_INT 80
14634: PUSH
14635: LD_INT 90
14637: PUSH
14638: LD_INT 100
14640: PUSH
14641: LD_INT 110
14643: PUSH
14644: LD_INT 120
14646: PUSH
14647: LD_INT 130
14649: PUSH
14650: LD_INT 140
14652: PUSH
14653: LD_INT 150
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 1
14675: PPUSH
14676: LD_INT 15
14678: PPUSH
14679: CALL_OW 12
14683: ARRAY
14684: ST_TO_ADDR
// if ValidHex ( x , y ) then
14685: LD_VAR 0 3
14689: PPUSH
14690: LD_VAR 0 4
14694: PPUSH
14695: CALL_OW 488
14699: IFFALSE 14722
// begin result := [ x , y ] ;
14701: LD_ADDR_VAR 0 1
14705: PUSH
14706: LD_VAR 0 3
14710: PUSH
14711: LD_VAR 0 4
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: ST_TO_ADDR
// break ;
14720: GO 14724
// end ; end ;
14722: GO 14524
14724: POP
14725: POP
// if result then
14726: LD_VAR 0 1
14730: IFFALSE 14790
// begin ToLua ( playSibBomb() ) ;
14732: LD_STRING playSibBomb()
14734: PPUSH
14735: CALL_OW 559
// wait ( 0 0$14 ) ;
14739: LD_INT 490
14741: PPUSH
14742: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14746: LD_VAR 0 1
14750: PUSH
14751: LD_INT 1
14753: ARRAY
14754: PPUSH
14755: LD_VAR 0 1
14759: PUSH
14760: LD_INT 2
14762: ARRAY
14763: PPUSH
14764: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14768: LD_VAR 0 1
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: LD_VAR 0 1
14781: PUSH
14782: LD_INT 2
14784: ARRAY
14785: PPUSH
14786: CALL_OW 429
// end ; end ;
14790: LD_VAR 0 1
14794: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14795: LD_EXP 43
14799: PUSH
14800: LD_EXP 65
14804: AND
14805: IFFALSE 14817
14807: GO 14809
14809: DISABLE
// YouLost (  ) ;
14810: LD_STRING 
14812: PPUSH
14813: CALL_OW 104
14817: END
// every 0 0$1 trigger StreamModeActive and sFog do
14818: LD_EXP 43
14822: PUSH
14823: LD_EXP 64
14827: AND
14828: IFFALSE 14842
14830: GO 14832
14832: DISABLE
// FogOff ( your_side ) ;
14833: LD_OWVAR 2
14837: PPUSH
14838: CALL_OW 344
14842: END
// every 0 0$1 trigger StreamModeActive and sSun do
14843: LD_EXP 43
14847: PUSH
14848: LD_EXP 66
14852: AND
14853: IFFALSE 14881
14855: GO 14857
14857: DISABLE
// begin solar_recharge_percent := 0 ;
14858: LD_ADDR_OWVAR 79
14862: PUSH
14863: LD_INT 0
14865: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14866: LD_INT 10500
14868: PPUSH
14869: CALL_OW 67
// solar_recharge_percent := 100 ;
14873: LD_ADDR_OWVAR 79
14877: PUSH
14878: LD_INT 100
14880: ST_TO_ADDR
// end ;
14881: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14882: LD_EXP 43
14886: PUSH
14887: LD_EXP 67
14891: AND
14892: IFFALSE 15131
14894: GO 14896
14896: DISABLE
14897: LD_INT 0
14899: PPUSH
14900: PPUSH
14901: PPUSH
// begin tmp := [ ] ;
14902: LD_ADDR_VAR 0 3
14906: PUSH
14907: EMPTY
14908: ST_TO_ADDR
// for i := 1 to 6 do
14909: LD_ADDR_VAR 0 1
14913: PUSH
14914: DOUBLE
14915: LD_INT 1
14917: DEC
14918: ST_TO_ADDR
14919: LD_INT 6
14921: PUSH
14922: FOR_TO
14923: IFFALSE 15028
// begin uc_nation := nation_nature ;
14925: LD_ADDR_OWVAR 21
14929: PUSH
14930: LD_INT 0
14932: ST_TO_ADDR
// uc_side := 0 ;
14933: LD_ADDR_OWVAR 20
14937: PUSH
14938: LD_INT 0
14940: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14941: LD_ADDR_OWVAR 29
14945: PUSH
14946: LD_INT 12
14948: PUSH
14949: LD_INT 12
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: ST_TO_ADDR
// hc_agressivity := 20 ;
14956: LD_ADDR_OWVAR 35
14960: PUSH
14961: LD_INT 20
14963: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14964: LD_ADDR_OWVAR 28
14968: PUSH
14969: LD_INT 17
14971: ST_TO_ADDR
// hc_gallery :=  ;
14972: LD_ADDR_OWVAR 33
14976: PUSH
14977: LD_STRING 
14979: ST_TO_ADDR
// hc_name :=  ;
14980: LD_ADDR_OWVAR 26
14984: PUSH
14985: LD_STRING 
14987: ST_TO_ADDR
// un := CreateHuman ;
14988: LD_ADDR_VAR 0 2
14992: PUSH
14993: CALL_OW 44
14997: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14998: LD_VAR 0 2
15002: PPUSH
15003: LD_INT 1
15005: PPUSH
15006: CALL_OW 51
// tmp := tmp ^ un ;
15010: LD_ADDR_VAR 0 3
15014: PUSH
15015: LD_VAR 0 3
15019: PUSH
15020: LD_VAR 0 2
15024: ADD
15025: ST_TO_ADDR
// end ;
15026: GO 14922
15028: POP
15029: POP
// repeat wait ( 0 0$1 ) ;
15030: LD_INT 35
15032: PPUSH
15033: CALL_OW 67
// for un in tmp do
15037: LD_ADDR_VAR 0 2
15041: PUSH
15042: LD_VAR 0 3
15046: PUSH
15047: FOR_IN
15048: IFFALSE 15122
// begin if IsDead ( un ) then
15050: LD_VAR 0 2
15054: PPUSH
15055: CALL_OW 301
15059: IFFALSE 15079
// begin tmp := tmp diff un ;
15061: LD_ADDR_VAR 0 3
15065: PUSH
15066: LD_VAR 0 3
15070: PUSH
15071: LD_VAR 0 2
15075: DIFF
15076: ST_TO_ADDR
// continue ;
15077: GO 15047
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15079: LD_VAR 0 2
15083: PPUSH
15084: LD_INT 3
15086: PUSH
15087: LD_INT 22
15089: PUSH
15090: LD_INT 0
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PPUSH
15101: CALL_OW 69
15105: PPUSH
15106: LD_VAR 0 2
15110: PPUSH
15111: CALL_OW 74
15115: PPUSH
15116: CALL_OW 115
// end ;
15120: GO 15047
15122: POP
15123: POP
// until not tmp ;
15124: LD_VAR 0 3
15128: NOT
15129: IFFALSE 15030
// end ;
15131: PPOPN 3
15133: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15134: LD_EXP 43
15138: PUSH
15139: LD_EXP 68
15143: AND
15144: IFFALSE 15198
15146: GO 15148
15148: DISABLE
// begin ToLua ( displayTroll(); ) ;
15149: LD_STRING displayTroll();
15151: PPUSH
15152: CALL_OW 559
// wait ( 3 3$00 ) ;
15156: LD_INT 6300
15158: PPUSH
15159: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15163: LD_STRING hideTroll();
15165: PPUSH
15166: CALL_OW 559
// wait ( 1 1$00 ) ;
15170: LD_INT 2100
15172: PPUSH
15173: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15177: LD_STRING displayTroll();
15179: PPUSH
15180: CALL_OW 559
// wait ( 1 1$00 ) ;
15184: LD_INT 2100
15186: PPUSH
15187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15191: LD_STRING hideTroll();
15193: PPUSH
15194: CALL_OW 559
// end ;
15198: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15199: LD_EXP 43
15203: PUSH
15204: LD_EXP 69
15208: AND
15209: IFFALSE 15272
15211: GO 15213
15213: DISABLE
15214: LD_INT 0
15216: PPUSH
// begin p := 0 ;
15217: LD_ADDR_VAR 0 1
15221: PUSH
15222: LD_INT 0
15224: ST_TO_ADDR
// repeat game_speed := 1 ;
15225: LD_ADDR_OWVAR 65
15229: PUSH
15230: LD_INT 1
15232: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15233: LD_INT 35
15235: PPUSH
15236: CALL_OW 67
// p := p + 1 ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: PLUS
15253: ST_TO_ADDR
// until p >= 60 ;
15254: LD_VAR 0 1
15258: PUSH
15259: LD_INT 60
15261: GREATEREQUAL
15262: IFFALSE 15225
// game_speed := 4 ;
15264: LD_ADDR_OWVAR 65
15268: PUSH
15269: LD_INT 4
15271: ST_TO_ADDR
// end ;
15272: PPOPN 1
15274: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15275: LD_EXP 43
15279: PUSH
15280: LD_EXP 70
15284: AND
15285: IFFALSE 15431
15287: GO 15289
15289: DISABLE
15290: LD_INT 0
15292: PPUSH
15293: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15294: LD_ADDR_VAR 0 1
15298: PUSH
15299: LD_INT 22
15301: PUSH
15302: LD_OWVAR 2
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 2
15313: PUSH
15314: LD_INT 30
15316: PUSH
15317: LD_INT 0
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 30
15326: PUSH
15327: LD_INT 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PPUSH
15343: CALL_OW 69
15347: ST_TO_ADDR
// if not depot then
15348: LD_VAR 0 1
15352: NOT
15353: IFFALSE 15357
// exit ;
15355: GO 15431
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15357: LD_ADDR_VAR 0 2
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_VAR 0 1
15374: PPUSH
15375: CALL_OW 12
15379: ARRAY
15380: PPUSH
15381: CALL_OW 274
15385: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15386: LD_VAR 0 2
15390: PPUSH
15391: LD_INT 1
15393: PPUSH
15394: LD_INT 0
15396: PPUSH
15397: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15401: LD_VAR 0 2
15405: PPUSH
15406: LD_INT 2
15408: PPUSH
15409: LD_INT 0
15411: PPUSH
15412: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15416: LD_VAR 0 2
15420: PPUSH
15421: LD_INT 3
15423: PPUSH
15424: LD_INT 0
15426: PPUSH
15427: CALL_OW 277
// end ;
15431: PPOPN 2
15433: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15434: LD_EXP 43
15438: PUSH
15439: LD_EXP 71
15443: AND
15444: IFFALSE 15541
15446: GO 15448
15448: DISABLE
15449: LD_INT 0
15451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15452: LD_ADDR_VAR 0 1
15456: PUSH
15457: LD_INT 22
15459: PUSH
15460: LD_OWVAR 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 21
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 3
15481: PUSH
15482: LD_INT 23
15484: PUSH
15485: LD_INT 0
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: LIST
15500: PPUSH
15501: CALL_OW 69
15505: ST_TO_ADDR
// if not tmp then
15506: LD_VAR 0 1
15510: NOT
15511: IFFALSE 15515
// exit ;
15513: GO 15541
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15515: LD_VAR 0 1
15519: PUSH
15520: LD_INT 1
15522: PPUSH
15523: LD_VAR 0 1
15527: PPUSH
15528: CALL_OW 12
15532: ARRAY
15533: PPUSH
15534: LD_INT 200
15536: PPUSH
15537: CALL_OW 234
// end ;
15541: PPOPN 1
15543: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15544: LD_EXP 43
15548: PUSH
15549: LD_EXP 72
15553: AND
15554: IFFALSE 15633
15556: GO 15558
15558: DISABLE
15559: LD_INT 0
15561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15562: LD_ADDR_VAR 0 1
15566: PUSH
15567: LD_INT 22
15569: PUSH
15570: LD_OWVAR 2
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: LD_INT 21
15581: PUSH
15582: LD_INT 2
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PPUSH
15593: CALL_OW 69
15597: ST_TO_ADDR
// if not tmp then
15598: LD_VAR 0 1
15602: NOT
15603: IFFALSE 15607
// exit ;
15605: GO 15633
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15607: LD_VAR 0 1
15611: PUSH
15612: LD_INT 1
15614: PPUSH
15615: LD_VAR 0 1
15619: PPUSH
15620: CALL_OW 12
15624: ARRAY
15625: PPUSH
15626: LD_INT 60
15628: PPUSH
15629: CALL_OW 234
// end ;
15633: PPOPN 1
15635: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15636: LD_EXP 43
15640: PUSH
15641: LD_EXP 73
15645: AND
15646: IFFALSE 15745
15648: GO 15650
15650: DISABLE
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
// begin enable ;
15655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15656: LD_ADDR_VAR 0 1
15660: PUSH
15661: LD_INT 22
15663: PUSH
15664: LD_OWVAR 2
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 61
15675: PUSH
15676: EMPTY
15677: LIST
15678: PUSH
15679: LD_INT 33
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: LIST
15693: PPUSH
15694: CALL_OW 69
15698: ST_TO_ADDR
// if not tmp then
15699: LD_VAR 0 1
15703: NOT
15704: IFFALSE 15708
// exit ;
15706: GO 15745
// for i in tmp do
15708: LD_ADDR_VAR 0 2
15712: PUSH
15713: LD_VAR 0 1
15717: PUSH
15718: FOR_IN
15719: IFFALSE 15743
// if IsControledBy ( i ) then
15721: LD_VAR 0 2
15725: PPUSH
15726: CALL_OW 312
15730: IFFALSE 15741
// ComUnlink ( i ) ;
15732: LD_VAR 0 2
15736: PPUSH
15737: CALL_OW 136
15741: GO 15718
15743: POP
15744: POP
// end ;
15745: PPOPN 2
15747: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15748: LD_EXP 43
15752: PUSH
15753: LD_EXP 74
15757: AND
15758: IFFALSE 15898
15760: GO 15762
15762: DISABLE
15763: LD_INT 0
15765: PPUSH
15766: PPUSH
// begin ToLua ( displayPowell(); ) ;
15767: LD_STRING displayPowell();
15769: PPUSH
15770: CALL_OW 559
// uc_side := 0 ;
15774: LD_ADDR_OWVAR 20
15778: PUSH
15779: LD_INT 0
15781: ST_TO_ADDR
// uc_nation := 2 ;
15782: LD_ADDR_OWVAR 21
15786: PUSH
15787: LD_INT 2
15789: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15790: LD_ADDR_OWVAR 37
15794: PUSH
15795: LD_INT 14
15797: ST_TO_ADDR
// vc_engine := engine_siberite ;
15798: LD_ADDR_OWVAR 39
15802: PUSH
15803: LD_INT 3
15805: ST_TO_ADDR
// vc_control := control_apeman ;
15806: LD_ADDR_OWVAR 38
15810: PUSH
15811: LD_INT 5
15813: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15814: LD_ADDR_OWVAR 40
15818: PUSH
15819: LD_INT 29
15821: ST_TO_ADDR
// un := CreateVehicle ;
15822: LD_ADDR_VAR 0 2
15826: PUSH
15827: CALL_OW 45
15831: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15832: LD_VAR 0 2
15836: PPUSH
15837: LD_INT 1
15839: PPUSH
15840: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15844: LD_INT 35
15846: PPUSH
15847: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15851: LD_VAR 0 2
15855: PPUSH
15856: LD_INT 22
15858: PUSH
15859: LD_OWVAR 2
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PPUSH
15868: CALL_OW 69
15872: PPUSH
15873: LD_VAR 0 2
15877: PPUSH
15878: CALL_OW 74
15882: PPUSH
15883: CALL_OW 115
// until IsDead ( un ) ;
15887: LD_VAR 0 2
15891: PPUSH
15892: CALL_OW 301
15896: IFFALSE 15844
// end ;
15898: PPOPN 2
15900: END
// every 0 0$1 trigger StreamModeActive and sStu do
15901: LD_EXP 43
15905: PUSH
15906: LD_EXP 82
15910: AND
15911: IFFALSE 15927
15913: GO 15915
15915: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15916: LD_STRING displayStucuk();
15918: PPUSH
15919: CALL_OW 559
// ResetFog ;
15923: CALL_OW 335
// end ;
15927: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15928: LD_EXP 43
15932: PUSH
15933: LD_EXP 75
15937: AND
15938: IFFALSE 16079
15940: GO 15942
15942: DISABLE
15943: LD_INT 0
15945: PPUSH
15946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15947: LD_ADDR_VAR 0 2
15951: PUSH
15952: LD_INT 22
15954: PUSH
15955: LD_OWVAR 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 21
15966: PUSH
15967: LD_INT 1
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: PPUSH
15978: CALL_OW 69
15982: ST_TO_ADDR
// if not tmp then
15983: LD_VAR 0 2
15987: NOT
15988: IFFALSE 15992
// exit ;
15990: GO 16079
// un := tmp [ rand ( 1 , tmp ) ] ;
15992: LD_ADDR_VAR 0 1
15996: PUSH
15997: LD_VAR 0 2
16001: PUSH
16002: LD_INT 1
16004: PPUSH
16005: LD_VAR 0 2
16009: PPUSH
16010: CALL_OW 12
16014: ARRAY
16015: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16016: LD_VAR 0 1
16020: PPUSH
16021: LD_INT 0
16023: PPUSH
16024: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16028: LD_VAR 0 1
16032: PPUSH
16033: LD_OWVAR 3
16037: PUSH
16038: LD_VAR 0 1
16042: DIFF
16043: PPUSH
16044: LD_VAR 0 1
16048: PPUSH
16049: CALL_OW 74
16053: PPUSH
16054: CALL_OW 115
// wait ( 0 0$20 ) ;
16058: LD_INT 700
16060: PPUSH
16061: CALL_OW 67
// SetSide ( un , your_side ) ;
16065: LD_VAR 0 1
16069: PPUSH
16070: LD_OWVAR 2
16074: PPUSH
16075: CALL_OW 235
// end ;
16079: PPOPN 2
16081: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16082: LD_EXP 43
16086: PUSH
16087: LD_EXP 76
16091: AND
16092: IFFALSE 16198
16094: GO 16096
16096: DISABLE
16097: LD_INT 0
16099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16100: LD_ADDR_VAR 0 1
16104: PUSH
16105: LD_INT 22
16107: PUSH
16108: LD_OWVAR 2
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PUSH
16117: LD_INT 2
16119: PUSH
16120: LD_INT 30
16122: PUSH
16123: LD_INT 0
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 30
16132: PUSH
16133: LD_INT 1
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: LIST
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PPUSH
16149: CALL_OW 69
16153: ST_TO_ADDR
// if not depot then
16154: LD_VAR 0 1
16158: NOT
16159: IFFALSE 16163
// exit ;
16161: GO 16198
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16163: LD_VAR 0 1
16167: PUSH
16168: LD_INT 1
16170: ARRAY
16171: PPUSH
16172: CALL_OW 250
16176: PPUSH
16177: LD_VAR 0 1
16181: PUSH
16182: LD_INT 1
16184: ARRAY
16185: PPUSH
16186: CALL_OW 251
16190: PPUSH
16191: LD_INT 70
16193: PPUSH
16194: CALL_OW 495
// end ;
16198: PPOPN 1
16200: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16201: LD_EXP 43
16205: PUSH
16206: LD_EXP 77
16210: AND
16211: IFFALSE 16422
16213: GO 16215
16215: DISABLE
16216: LD_INT 0
16218: PPUSH
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16223: LD_ADDR_VAR 0 5
16227: PUSH
16228: LD_INT 22
16230: PUSH
16231: LD_OWVAR 2
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: LD_INT 21
16242: PUSH
16243: LD_INT 1
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: PPUSH
16254: CALL_OW 69
16258: ST_TO_ADDR
// if not tmp then
16259: LD_VAR 0 5
16263: NOT
16264: IFFALSE 16268
// exit ;
16266: GO 16422
// for i in tmp do
16268: LD_ADDR_VAR 0 1
16272: PUSH
16273: LD_VAR 0 5
16277: PUSH
16278: FOR_IN
16279: IFFALSE 16420
// begin d := rand ( 0 , 5 ) ;
16281: LD_ADDR_VAR 0 4
16285: PUSH
16286: LD_INT 0
16288: PPUSH
16289: LD_INT 5
16291: PPUSH
16292: CALL_OW 12
16296: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16297: LD_ADDR_VAR 0 2
16301: PUSH
16302: LD_VAR 0 1
16306: PPUSH
16307: CALL_OW 250
16311: PPUSH
16312: LD_VAR 0 4
16316: PPUSH
16317: LD_INT 3
16319: PPUSH
16320: LD_INT 12
16322: PPUSH
16323: CALL_OW 12
16327: PPUSH
16328: CALL_OW 272
16332: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16333: LD_ADDR_VAR 0 3
16337: PUSH
16338: LD_VAR 0 1
16342: PPUSH
16343: CALL_OW 251
16347: PPUSH
16348: LD_VAR 0 4
16352: PPUSH
16353: LD_INT 3
16355: PPUSH
16356: LD_INT 12
16358: PPUSH
16359: CALL_OW 12
16363: PPUSH
16364: CALL_OW 273
16368: ST_TO_ADDR
// if ValidHex ( x , y ) then
16369: LD_VAR 0 2
16373: PPUSH
16374: LD_VAR 0 3
16378: PPUSH
16379: CALL_OW 488
16383: IFFALSE 16418
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_VAR 0 2
16394: PPUSH
16395: LD_VAR 0 3
16399: PPUSH
16400: LD_INT 3
16402: PPUSH
16403: LD_INT 6
16405: PPUSH
16406: CALL_OW 12
16410: PPUSH
16411: LD_INT 1
16413: PPUSH
16414: CALL_OW 483
// end ;
16418: GO 16278
16420: POP
16421: POP
// end ;
16422: PPOPN 5
16424: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16425: LD_EXP 43
16429: PUSH
16430: LD_EXP 78
16434: AND
16435: IFFALSE 16529
16437: GO 16439
16439: DISABLE
16440: LD_INT 0
16442: PPUSH
16443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16444: LD_ADDR_VAR 0 2
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_OWVAR 2
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 32
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 21
16473: PUSH
16474: LD_INT 2
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: PPUSH
16486: CALL_OW 69
16490: ST_TO_ADDR
// if not tmp then
16491: LD_VAR 0 2
16495: NOT
16496: IFFALSE 16500
// exit ;
16498: GO 16529
// for i in tmp do
16500: LD_ADDR_VAR 0 1
16504: PUSH
16505: LD_VAR 0 2
16509: PUSH
16510: FOR_IN
16511: IFFALSE 16527
// SetFuel ( i , 0 ) ;
16513: LD_VAR 0 1
16517: PPUSH
16518: LD_INT 0
16520: PPUSH
16521: CALL_OW 240
16525: GO 16510
16527: POP
16528: POP
// end ;
16529: PPOPN 2
16531: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16532: LD_EXP 43
16536: PUSH
16537: LD_EXP 79
16541: AND
16542: IFFALSE 16608
16544: GO 16546
16546: DISABLE
16547: LD_INT 0
16549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_INT 22
16557: PUSH
16558: LD_OWVAR 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: LD_INT 30
16569: PUSH
16570: LD_INT 29
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PPUSH
16581: CALL_OW 69
16585: ST_TO_ADDR
// if not tmp then
16586: LD_VAR 0 1
16590: NOT
16591: IFFALSE 16595
// exit ;
16593: GO 16608
// DestroyUnit ( tmp [ 1 ] ) ;
16595: LD_VAR 0 1
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: CALL_OW 65
// end ;
16608: PPOPN 1
16610: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16611: LD_EXP 43
16615: PUSH
16616: LD_EXP 81
16620: AND
16621: IFFALSE 16750
16623: GO 16625
16625: DISABLE
16626: LD_INT 0
16628: PPUSH
// begin uc_side := 0 ;
16629: LD_ADDR_OWVAR 20
16633: PUSH
16634: LD_INT 0
16636: ST_TO_ADDR
// uc_nation := nation_arabian ;
16637: LD_ADDR_OWVAR 21
16641: PUSH
16642: LD_INT 2
16644: ST_TO_ADDR
// hc_gallery :=  ;
16645: LD_ADDR_OWVAR 33
16649: PUSH
16650: LD_STRING 
16652: ST_TO_ADDR
// hc_name :=  ;
16653: LD_ADDR_OWVAR 26
16657: PUSH
16658: LD_STRING 
16660: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16661: LD_INT 1
16663: PPUSH
16664: LD_INT 11
16666: PPUSH
16667: LD_INT 10
16669: PPUSH
16670: CALL_OW 380
// un := CreateHuman ;
16674: LD_ADDR_VAR 0 1
16678: PUSH
16679: CALL_OW 44
16683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16684: LD_VAR 0 1
16688: PPUSH
16689: LD_INT 1
16691: PPUSH
16692: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16696: LD_INT 35
16698: PPUSH
16699: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16703: LD_VAR 0 1
16707: PPUSH
16708: LD_INT 22
16710: PUSH
16711: LD_OWVAR 2
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PPUSH
16720: CALL_OW 69
16724: PPUSH
16725: LD_VAR 0 1
16729: PPUSH
16730: CALL_OW 74
16734: PPUSH
16735: CALL_OW 115
// until IsDead ( un ) ;
16739: LD_VAR 0 1
16743: PPUSH
16744: CALL_OW 301
16748: IFFALSE 16696
// end ;
16750: PPOPN 1
16752: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16753: LD_EXP 43
16757: PUSH
16758: LD_EXP 83
16762: AND
16763: IFFALSE 16775
16765: GO 16767
16767: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16768: LD_STRING earthquake(getX(game), 0, 32)
16770: PPUSH
16771: CALL_OW 559
16775: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16776: LD_EXP 43
16780: PUSH
16781: LD_EXP 84
16785: AND
16786: IFFALSE 16877
16788: GO 16790
16790: DISABLE
16791: LD_INT 0
16793: PPUSH
// begin enable ;
16794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16795: LD_ADDR_VAR 0 1
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_OWVAR 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 21
16814: PUSH
16815: LD_INT 2
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: LD_INT 33
16824: PUSH
16825: LD_INT 3
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: CALL_OW 69
16841: ST_TO_ADDR
// if not tmp then
16842: LD_VAR 0 1
16846: NOT
16847: IFFALSE 16851
// exit ;
16849: GO 16877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16851: LD_VAR 0 1
16855: PUSH
16856: LD_INT 1
16858: PPUSH
16859: LD_VAR 0 1
16863: PPUSH
16864: CALL_OW 12
16868: ARRAY
16869: PPUSH
16870: LD_INT 1
16872: PPUSH
16873: CALL_OW 234
// end ;
16877: PPOPN 1
16879: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16880: LD_EXP 43
16884: PUSH
16885: LD_EXP 85
16889: AND
16890: IFFALSE 17031
16892: GO 16894
16894: DISABLE
16895: LD_INT 0
16897: PPUSH
16898: PPUSH
16899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16900: LD_ADDR_VAR 0 3
16904: PUSH
16905: LD_INT 22
16907: PUSH
16908: LD_OWVAR 2
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PUSH
16917: LD_INT 25
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 69
16935: ST_TO_ADDR
// if not tmp then
16936: LD_VAR 0 3
16940: NOT
16941: IFFALSE 16945
// exit ;
16943: GO 17031
// un := tmp [ rand ( 1 , tmp ) ] ;
16945: LD_ADDR_VAR 0 2
16949: PUSH
16950: LD_VAR 0 3
16954: PUSH
16955: LD_INT 1
16957: PPUSH
16958: LD_VAR 0 3
16962: PPUSH
16963: CALL_OW 12
16967: ARRAY
16968: ST_TO_ADDR
// if Crawls ( un ) then
16969: LD_VAR 0 2
16973: PPUSH
16974: CALL_OW 318
16978: IFFALSE 16989
// ComWalk ( un ) ;
16980: LD_VAR 0 2
16984: PPUSH
16985: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16989: LD_VAR 0 2
16993: PPUSH
16994: LD_INT 9
16996: PPUSH
16997: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17001: LD_INT 28
17003: PPUSH
17004: LD_OWVAR 2
17008: PPUSH
17009: LD_INT 2
17011: PPUSH
17012: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17016: LD_INT 29
17018: PPUSH
17019: LD_OWVAR 2
17023: PPUSH
17024: LD_INT 2
17026: PPUSH
17027: CALL_OW 322
// end ;
17031: PPOPN 3
17033: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17034: LD_EXP 43
17038: PUSH
17039: LD_EXP 86
17043: AND
17044: IFFALSE 17155
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
17052: PPUSH
17053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17054: LD_ADDR_VAR 0 3
17058: PUSH
17059: LD_INT 22
17061: PUSH
17062: LD_OWVAR 2
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: PUSH
17071: LD_INT 25
17073: PUSH
17074: LD_INT 1
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PPUSH
17085: CALL_OW 69
17089: ST_TO_ADDR
// if not tmp then
17090: LD_VAR 0 3
17094: NOT
17095: IFFALSE 17099
// exit ;
17097: GO 17155
// un := tmp [ rand ( 1 , tmp ) ] ;
17099: LD_ADDR_VAR 0 2
17103: PUSH
17104: LD_VAR 0 3
17108: PUSH
17109: LD_INT 1
17111: PPUSH
17112: LD_VAR 0 3
17116: PPUSH
17117: CALL_OW 12
17121: ARRAY
17122: ST_TO_ADDR
// if Crawls ( un ) then
17123: LD_VAR 0 2
17127: PPUSH
17128: CALL_OW 318
17132: IFFALSE 17143
// ComWalk ( un ) ;
17134: LD_VAR 0 2
17138: PPUSH
17139: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17143: LD_VAR 0 2
17147: PPUSH
17148: LD_INT 8
17150: PPUSH
17151: CALL_OW 336
// end ;
17155: PPOPN 3
17157: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17158: LD_EXP 43
17162: PUSH
17163: LD_EXP 87
17167: AND
17168: IFFALSE 17312
17170: GO 17172
17172: DISABLE
17173: LD_INT 0
17175: PPUSH
17176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17177: LD_ADDR_VAR 0 2
17181: PUSH
17182: LD_INT 22
17184: PUSH
17185: LD_OWVAR 2
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 21
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: LD_INT 2
17206: PUSH
17207: LD_INT 34
17209: PUSH
17210: LD_INT 12
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 34
17219: PUSH
17220: LD_INT 51
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 34
17229: PUSH
17230: LD_INT 32
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: ST_TO_ADDR
// if not tmp then
17253: LD_VAR 0 2
17257: NOT
17258: IFFALSE 17262
// exit ;
17260: GO 17312
// for i in tmp do
17262: LD_ADDR_VAR 0 1
17266: PUSH
17267: LD_VAR 0 2
17271: PUSH
17272: FOR_IN
17273: IFFALSE 17310
// if GetCargo ( i , mat_artifact ) = 0 then
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_INT 4
17282: PPUSH
17283: CALL_OW 289
17287: PUSH
17288: LD_INT 0
17290: EQUAL
17291: IFFALSE 17308
// SetCargo ( i , mat_siberit , 100 ) ;
17293: LD_VAR 0 1
17297: PPUSH
17298: LD_INT 3
17300: PPUSH
17301: LD_INT 100
17303: PPUSH
17304: CALL_OW 290
17308: GO 17272
17310: POP
17311: POP
// end ;
17312: PPOPN 2
17314: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17315: LD_EXP 43
17319: PUSH
17320: LD_EXP 88
17324: AND
17325: IFFALSE 17508
17327: GO 17329
17329: DISABLE
17330: LD_INT 0
17332: PPUSH
17333: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17334: LD_ADDR_VAR 0 2
17338: PUSH
17339: LD_INT 22
17341: PUSH
17342: LD_OWVAR 2
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL_OW 69
17355: ST_TO_ADDR
// if not tmp then
17356: LD_VAR 0 2
17360: NOT
17361: IFFALSE 17365
// exit ;
17363: GO 17508
// for i := 1 to 2 do
17365: LD_ADDR_VAR 0 1
17369: PUSH
17370: DOUBLE
17371: LD_INT 1
17373: DEC
17374: ST_TO_ADDR
17375: LD_INT 2
17377: PUSH
17378: FOR_TO
17379: IFFALSE 17506
// begin uc_side := your_side ;
17381: LD_ADDR_OWVAR 20
17385: PUSH
17386: LD_OWVAR 2
17390: ST_TO_ADDR
// uc_nation := nation_american ;
17391: LD_ADDR_OWVAR 21
17395: PUSH
17396: LD_INT 1
17398: ST_TO_ADDR
// vc_chassis := us_morphling ;
17399: LD_ADDR_OWVAR 37
17403: PUSH
17404: LD_INT 5
17406: ST_TO_ADDR
// vc_engine := engine_siberite ;
17407: LD_ADDR_OWVAR 39
17411: PUSH
17412: LD_INT 3
17414: ST_TO_ADDR
// vc_control := control_computer ;
17415: LD_ADDR_OWVAR 38
17419: PUSH
17420: LD_INT 3
17422: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17423: LD_ADDR_OWVAR 40
17427: PUSH
17428: LD_INT 10
17430: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17431: LD_VAR 0 2
17435: PUSH
17436: LD_INT 1
17438: ARRAY
17439: PPUSH
17440: CALL_OW 310
17444: NOT
17445: IFFALSE 17492
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17447: CALL_OW 45
17451: PPUSH
17452: LD_VAR 0 2
17456: PUSH
17457: LD_INT 1
17459: ARRAY
17460: PPUSH
17461: CALL_OW 250
17465: PPUSH
17466: LD_VAR 0 2
17470: PUSH
17471: LD_INT 1
17473: ARRAY
17474: PPUSH
17475: CALL_OW 251
17479: PPUSH
17480: LD_INT 12
17482: PPUSH
17483: LD_INT 1
17485: PPUSH
17486: CALL_OW 50
17490: GO 17504
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17492: CALL_OW 45
17496: PPUSH
17497: LD_INT 1
17499: PPUSH
17500: CALL_OW 51
// end ;
17504: GO 17378
17506: POP
17507: POP
// end ;
17508: PPOPN 2
17510: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17511: LD_EXP 43
17515: PUSH
17516: LD_EXP 89
17520: AND
17521: IFFALSE 17743
17523: GO 17525
17525: DISABLE
17526: LD_INT 0
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17534: LD_ADDR_VAR 0 6
17538: PUSH
17539: LD_INT 22
17541: PUSH
17542: LD_OWVAR 2
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 21
17553: PUSH
17554: LD_INT 1
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: LD_INT 3
17563: PUSH
17564: LD_INT 23
17566: PUSH
17567: LD_INT 0
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: LIST
17582: PPUSH
17583: CALL_OW 69
17587: ST_TO_ADDR
// if not tmp then
17588: LD_VAR 0 6
17592: NOT
17593: IFFALSE 17597
// exit ;
17595: GO 17743
// s1 := rand ( 1 , 4 ) ;
17597: LD_ADDR_VAR 0 2
17601: PUSH
17602: LD_INT 1
17604: PPUSH
17605: LD_INT 4
17607: PPUSH
17608: CALL_OW 12
17612: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17613: LD_ADDR_VAR 0 4
17617: PUSH
17618: LD_VAR 0 6
17622: PUSH
17623: LD_INT 1
17625: ARRAY
17626: PPUSH
17627: LD_VAR 0 2
17631: PPUSH
17632: CALL_OW 259
17636: ST_TO_ADDR
// if s1 = 1 then
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 1
17644: EQUAL
17645: IFFALSE 17665
// s2 := rand ( 2 , 4 ) else
17647: LD_ADDR_VAR 0 3
17651: PUSH
17652: LD_INT 2
17654: PPUSH
17655: LD_INT 4
17657: PPUSH
17658: CALL_OW 12
17662: ST_TO_ADDR
17663: GO 17673
// s2 := 1 ;
17665: LD_ADDR_VAR 0 3
17669: PUSH
17670: LD_INT 1
17672: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17673: LD_ADDR_VAR 0 5
17677: PUSH
17678: LD_VAR 0 6
17682: PUSH
17683: LD_INT 1
17685: ARRAY
17686: PPUSH
17687: LD_VAR 0 3
17691: PPUSH
17692: CALL_OW 259
17696: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17697: LD_VAR 0 6
17701: PUSH
17702: LD_INT 1
17704: ARRAY
17705: PPUSH
17706: LD_VAR 0 2
17710: PPUSH
17711: LD_VAR 0 5
17715: PPUSH
17716: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17720: LD_VAR 0 6
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: LD_VAR 0 3
17733: PPUSH
17734: LD_VAR 0 4
17738: PPUSH
17739: CALL_OW 237
// end ;
17743: PPOPN 6
17745: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17746: LD_EXP 43
17750: PUSH
17751: LD_EXP 90
17755: AND
17756: IFFALSE 17835
17758: GO 17760
17760: DISABLE
17761: LD_INT 0
17763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17764: LD_ADDR_VAR 0 1
17768: PUSH
17769: LD_INT 22
17771: PUSH
17772: LD_OWVAR 2
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: LD_INT 30
17783: PUSH
17784: LD_INT 3
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PPUSH
17795: CALL_OW 69
17799: ST_TO_ADDR
// if not tmp then
17800: LD_VAR 0 1
17804: NOT
17805: IFFALSE 17809
// exit ;
17807: GO 17835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17809: LD_VAR 0 1
17813: PUSH
17814: LD_INT 1
17816: PPUSH
17817: LD_VAR 0 1
17821: PPUSH
17822: CALL_OW 12
17826: ARRAY
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 234
// end ;
17835: PPOPN 1
17837: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17838: LD_EXP 43
17842: PUSH
17843: LD_EXP 91
17847: AND
17848: IFFALSE 17960
17850: GO 17852
17852: DISABLE
17853: LD_INT 0
17855: PPUSH
17856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17857: LD_ADDR_VAR 0 2
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_OWVAR 2
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: LD_INT 30
17879: PUSH
17880: LD_INT 27
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 30
17889: PUSH
17890: LD_INT 26
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: LD_INT 30
17899: PUSH
17900: LD_INT 28
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PPUSH
17917: CALL_OW 69
17921: ST_TO_ADDR
// if not tmp then
17922: LD_VAR 0 2
17926: NOT
17927: IFFALSE 17931
// exit ;
17929: GO 17960
// for i in tmp do
17931: LD_ADDR_VAR 0 1
17935: PUSH
17936: LD_VAR 0 2
17940: PUSH
17941: FOR_IN
17942: IFFALSE 17958
// SetLives ( i , 1 ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_INT 1
17951: PPUSH
17952: CALL_OW 234
17956: GO 17941
17958: POP
17959: POP
// end ;
17960: PPOPN 2
17962: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17963: LD_EXP 43
17967: PUSH
17968: LD_EXP 92
17972: AND
17973: IFFALSE 18260
17975: GO 17977
17977: DISABLE
17978: LD_INT 0
17980: PPUSH
17981: PPUSH
17982: PPUSH
// begin i := rand ( 1 , 7 ) ;
17983: LD_ADDR_VAR 0 1
17987: PUSH
17988: LD_INT 1
17990: PPUSH
17991: LD_INT 7
17993: PPUSH
17994: CALL_OW 12
17998: ST_TO_ADDR
// case i of 1 :
17999: LD_VAR 0 1
18003: PUSH
18004: LD_INT 1
18006: DOUBLE
18007: EQUAL
18008: IFTRUE 18012
18010: GO 18022
18012: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18013: LD_STRING earthquake(getX(game), 0, 32)
18015: PPUSH
18016: CALL_OW 559
18020: GO 18260
18022: LD_INT 2
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18044
18030: POP
// begin ToLua ( displayStucuk(); ) ;
18031: LD_STRING displayStucuk();
18033: PPUSH
18034: CALL_OW 559
// ResetFog ;
18038: CALL_OW 335
// end ; 3 :
18042: GO 18260
18044: LD_INT 3
18046: DOUBLE
18047: EQUAL
18048: IFTRUE 18052
18050: GO 18156
18052: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18053: LD_ADDR_VAR 0 2
18057: PUSH
18058: LD_INT 22
18060: PUSH
18061: LD_OWVAR 2
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 25
18072: PUSH
18073: LD_INT 1
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PPUSH
18084: CALL_OW 69
18088: ST_TO_ADDR
// if not tmp then
18089: LD_VAR 0 2
18093: NOT
18094: IFFALSE 18098
// exit ;
18096: GO 18260
// un := tmp [ rand ( 1 , tmp ) ] ;
18098: LD_ADDR_VAR 0 3
18102: PUSH
18103: LD_VAR 0 2
18107: PUSH
18108: LD_INT 1
18110: PPUSH
18111: LD_VAR 0 2
18115: PPUSH
18116: CALL_OW 12
18120: ARRAY
18121: ST_TO_ADDR
// if Crawls ( un ) then
18122: LD_VAR 0 3
18126: PPUSH
18127: CALL_OW 318
18131: IFFALSE 18142
// ComWalk ( un ) ;
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18142: LD_VAR 0 3
18146: PPUSH
18147: LD_INT 8
18149: PPUSH
18150: CALL_OW 336
// end ; 4 :
18154: GO 18260
18156: LD_INT 4
18158: DOUBLE
18159: EQUAL
18160: IFTRUE 18164
18162: GO 18238
18164: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18165: LD_ADDR_VAR 0 2
18169: PUSH
18170: LD_INT 22
18172: PUSH
18173: LD_OWVAR 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 30
18184: PUSH
18185: LD_INT 29
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PUSH
18192: EMPTY
18193: LIST
18194: LIST
18195: PPUSH
18196: CALL_OW 69
18200: ST_TO_ADDR
// if not tmp then
18201: LD_VAR 0 2
18205: NOT
18206: IFFALSE 18210
// exit ;
18208: GO 18260
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18210: LD_VAR 0 2
18214: PUSH
18215: LD_INT 1
18217: ARRAY
18218: PPUSH
18219: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18223: LD_VAR 0 2
18227: PUSH
18228: LD_INT 1
18230: ARRAY
18231: PPUSH
18232: CALL_OW 65
// end ; 5 .. 7 :
18236: GO 18260
18238: LD_INT 5
18240: DOUBLE
18241: GREATEREQUAL
18242: IFFALSE 18250
18244: LD_INT 7
18246: DOUBLE
18247: LESSEQUAL
18248: IFTRUE 18252
18250: GO 18259
18252: POP
// StreamSibBomb ; end ;
18253: CALL 14497 0 0
18257: GO 18260
18259: POP
// end ;
18260: PPOPN 3
18262: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18263: LD_EXP 43
18267: PUSH
18268: LD_EXP 93
18272: AND
18273: IFFALSE 18429
18275: GO 18277
18277: DISABLE
18278: LD_INT 0
18280: PPUSH
18281: PPUSH
18282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18283: LD_ADDR_VAR 0 2
18287: PUSH
18288: LD_INT 81
18290: PUSH
18291: LD_OWVAR 2
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 21
18305: PUSH
18306: LD_INT 1
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 21
18315: PUSH
18316: LD_INT 2
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PPUSH
18332: CALL_OW 69
18336: ST_TO_ADDR
// if not tmp then
18337: LD_VAR 0 2
18341: NOT
18342: IFFALSE 18346
// exit ;
18344: GO 18429
// p := 0 ;
18346: LD_ADDR_VAR 0 3
18350: PUSH
18351: LD_INT 0
18353: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18354: LD_INT 35
18356: PPUSH
18357: CALL_OW 67
// p := p + 1 ;
18361: LD_ADDR_VAR 0 3
18365: PUSH
18366: LD_VAR 0 3
18370: PUSH
18371: LD_INT 1
18373: PLUS
18374: ST_TO_ADDR
// for i in tmp do
18375: LD_ADDR_VAR 0 1
18379: PUSH
18380: LD_VAR 0 2
18384: PUSH
18385: FOR_IN
18386: IFFALSE 18417
// if GetLives ( i ) < 1000 then
18388: LD_VAR 0 1
18392: PPUSH
18393: CALL_OW 256
18397: PUSH
18398: LD_INT 1000
18400: LESS
18401: IFFALSE 18415
// SetLives ( i , 1000 ) ;
18403: LD_VAR 0 1
18407: PPUSH
18408: LD_INT 1000
18410: PPUSH
18411: CALL_OW 234
18415: GO 18385
18417: POP
18418: POP
// until p > 20 ;
18419: LD_VAR 0 3
18423: PUSH
18424: LD_INT 20
18426: GREATER
18427: IFFALSE 18354
// end ;
18429: PPOPN 3
18431: END
// every 0 0$1 trigger StreamModeActive and sTime do
18432: LD_EXP 43
18436: PUSH
18437: LD_EXP 94
18441: AND
18442: IFFALSE 18477
18444: GO 18446
18446: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18447: LD_INT 28
18449: PPUSH
18450: LD_OWVAR 2
18454: PPUSH
18455: LD_INT 2
18457: PPUSH
18458: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18462: LD_INT 30
18464: PPUSH
18465: LD_OWVAR 2
18469: PPUSH
18470: LD_INT 2
18472: PPUSH
18473: CALL_OW 322
// end ;
18477: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18478: LD_EXP 43
18482: PUSH
18483: LD_EXP 95
18487: AND
18488: IFFALSE 18609
18490: GO 18492
18492: DISABLE
18493: LD_INT 0
18495: PPUSH
18496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18497: LD_ADDR_VAR 0 2
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_OWVAR 2
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PUSH
18514: LD_INT 21
18516: PUSH
18517: LD_INT 1
18519: PUSH
18520: EMPTY
18521: LIST
18522: LIST
18523: PUSH
18524: LD_INT 3
18526: PUSH
18527: LD_INT 23
18529: PUSH
18530: LD_INT 0
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: LIST
18545: PPUSH
18546: CALL_OW 69
18550: ST_TO_ADDR
// if not tmp then
18551: LD_VAR 0 2
18555: NOT
18556: IFFALSE 18560
// exit ;
18558: GO 18609
// for i in tmp do
18560: LD_ADDR_VAR 0 1
18564: PUSH
18565: LD_VAR 0 2
18569: PUSH
18570: FOR_IN
18571: IFFALSE 18607
// begin if Crawls ( i ) then
18573: LD_VAR 0 1
18577: PPUSH
18578: CALL_OW 318
18582: IFFALSE 18593
// ComWalk ( i ) ;
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 138
// SetClass ( i , 2 ) ;
18593: LD_VAR 0 1
18597: PPUSH
18598: LD_INT 2
18600: PPUSH
18601: CALL_OW 336
// end ;
18605: GO 18570
18607: POP
18608: POP
// end ;
18609: PPOPN 2
18611: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18612: LD_EXP 43
18616: PUSH
18617: LD_EXP 96
18621: AND
18622: IFFALSE 18910
18624: GO 18626
18626: DISABLE
18627: LD_INT 0
18629: PPUSH
18630: PPUSH
18631: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18632: LD_OWVAR 2
18636: PPUSH
18637: LD_INT 9
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: LD_INT 1
18645: PPUSH
18646: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18650: LD_INT 9
18652: PPUSH
18653: LD_OWVAR 2
18657: PPUSH
18658: CALL_OW 343
// uc_side := 9 ;
18662: LD_ADDR_OWVAR 20
18666: PUSH
18667: LD_INT 9
18669: ST_TO_ADDR
// uc_nation := 2 ;
18670: LD_ADDR_OWVAR 21
18674: PUSH
18675: LD_INT 2
18677: ST_TO_ADDR
// hc_name := Dark Warrior ;
18678: LD_ADDR_OWVAR 26
18682: PUSH
18683: LD_STRING Dark Warrior
18685: ST_TO_ADDR
// hc_gallery :=  ;
18686: LD_ADDR_OWVAR 33
18690: PUSH
18691: LD_STRING 
18693: ST_TO_ADDR
// hc_noskilllimit := true ;
18694: LD_ADDR_OWVAR 76
18698: PUSH
18699: LD_INT 1
18701: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18702: LD_ADDR_OWVAR 31
18706: PUSH
18707: LD_INT 30
18709: PUSH
18710: LD_INT 30
18712: PUSH
18713: LD_INT 30
18715: PUSH
18716: LD_INT 30
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: ST_TO_ADDR
// un := CreateHuman ;
18725: LD_ADDR_VAR 0 3
18729: PUSH
18730: CALL_OW 44
18734: ST_TO_ADDR
// hc_noskilllimit := false ;
18735: LD_ADDR_OWVAR 76
18739: PUSH
18740: LD_INT 0
18742: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18743: LD_VAR 0 3
18747: PPUSH
18748: LD_INT 1
18750: PPUSH
18751: CALL_OW 51
// ToLua ( playRanger() ) ;
18755: LD_STRING playRanger()
18757: PPUSH
18758: CALL_OW 559
// p := 0 ;
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_INT 0
18769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18770: LD_INT 35
18772: PPUSH
18773: CALL_OW 67
// p := p + 1 ;
18777: LD_ADDR_VAR 0 2
18781: PUSH
18782: LD_VAR 0 2
18786: PUSH
18787: LD_INT 1
18789: PLUS
18790: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18791: LD_VAR 0 3
18795: PPUSH
18796: CALL_OW 256
18800: PUSH
18801: LD_INT 1000
18803: LESS
18804: IFFALSE 18818
// SetLives ( un , 1000 ) ;
18806: LD_VAR 0 3
18810: PPUSH
18811: LD_INT 1000
18813: PPUSH
18814: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18818: LD_VAR 0 3
18822: PPUSH
18823: LD_INT 81
18825: PUSH
18826: LD_OWVAR 2
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 91
18837: PUSH
18838: LD_VAR 0 3
18842: PUSH
18843: LD_INT 30
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PPUSH
18855: CALL_OW 69
18859: PPUSH
18860: LD_VAR 0 3
18864: PPUSH
18865: CALL_OW 74
18869: PPUSH
18870: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18874: LD_VAR 0 2
18878: PUSH
18879: LD_INT 80
18881: GREATER
18882: PUSH
18883: LD_VAR 0 3
18887: PPUSH
18888: CALL_OW 301
18892: OR
18893: IFFALSE 18770
// if un then
18895: LD_VAR 0 3
18899: IFFALSE 18910
// RemoveUnit ( un ) ;
18901: LD_VAR 0 3
18905: PPUSH
18906: CALL_OW 64
// end ;
18910: PPOPN 3
18912: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18913: LD_EXP 97
18917: IFFALSE 19033
18919: GO 18921
18921: DISABLE
18922: LD_INT 0
18924: PPUSH
18925: PPUSH
18926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18927: LD_ADDR_VAR 0 2
18931: PUSH
18932: LD_INT 81
18934: PUSH
18935: LD_OWVAR 2
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 21
18946: PUSH
18947: LD_INT 1
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL_OW 69
18962: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18963: LD_STRING playComputer()
18965: PPUSH
18966: CALL_OW 559
// if not tmp then
18970: LD_VAR 0 2
18974: NOT
18975: IFFALSE 18979
// exit ;
18977: GO 19033
// for i in tmp do
18979: LD_ADDR_VAR 0 1
18983: PUSH
18984: LD_VAR 0 2
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19031
// for j := 1 to 4 do
18992: LD_ADDR_VAR 0 3
18996: PUSH
18997: DOUBLE
18998: LD_INT 1
19000: DEC
19001: ST_TO_ADDR
19002: LD_INT 4
19004: PUSH
19005: FOR_TO
19006: IFFALSE 19027
// SetSkill ( i , j , 10 ) ;
19008: LD_VAR 0 1
19012: PPUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: LD_INT 10
19020: PPUSH
19021: CALL_OW 237
19025: GO 19005
19027: POP
19028: POP
19029: GO 18989
19031: POP
19032: POP
// end ;
19033: PPOPN 3
19035: END
// every 0 0$1 trigger s30 do var i , tmp ;
19036: LD_EXP 98
19040: IFFALSE 19109
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19049: LD_ADDR_VAR 0 2
19053: PUSH
19054: LD_INT 22
19056: PUSH
19057: LD_OWVAR 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PPUSH
19066: CALL_OW 69
19070: ST_TO_ADDR
// if not tmp then
19071: LD_VAR 0 2
19075: NOT
19076: IFFALSE 19080
// exit ;
19078: GO 19109
// for i in tmp do
19080: LD_ADDR_VAR 0 1
19084: PUSH
19085: LD_VAR 0 2
19089: PUSH
19090: FOR_IN
19091: IFFALSE 19107
// SetLives ( i , 300 ) ;
19093: LD_VAR 0 1
19097: PPUSH
19098: LD_INT 300
19100: PPUSH
19101: CALL_OW 234
19105: GO 19090
19107: POP
19108: POP
// end ;
19109: PPOPN 2
19111: END
// every 0 0$1 trigger s60 do var i , tmp ;
19112: LD_EXP 99
19116: IFFALSE 19185
19118: GO 19120
19120: DISABLE
19121: LD_INT 0
19123: PPUSH
19124: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19125: LD_ADDR_VAR 0 2
19129: PUSH
19130: LD_INT 22
19132: PUSH
19133: LD_OWVAR 2
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PPUSH
19142: CALL_OW 69
19146: ST_TO_ADDR
// if not tmp then
19147: LD_VAR 0 2
19151: NOT
19152: IFFALSE 19156
// exit ;
19154: GO 19185
// for i in tmp do
19156: LD_ADDR_VAR 0 1
19160: PUSH
19161: LD_VAR 0 2
19165: PUSH
19166: FOR_IN
19167: IFFALSE 19183
// SetLives ( i , 600 ) ;
19169: LD_VAR 0 1
19173: PPUSH
19174: LD_INT 600
19176: PPUSH
19177: CALL_OW 234
19181: GO 19166
19183: POP
19184: POP
// end ;
19185: PPOPN 2
19187: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19188: LD_INT 0
19190: PPUSH
// case cmd of 301 :
19191: LD_VAR 0 1
19195: PUSH
19196: LD_INT 301
19198: DOUBLE
19199: EQUAL
19200: IFTRUE 19204
19202: GO 19236
19204: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19205: LD_VAR 0 6
19209: PPUSH
19210: LD_VAR 0 7
19214: PPUSH
19215: LD_VAR 0 8
19219: PPUSH
19220: LD_VAR 0 4
19224: PPUSH
19225: LD_VAR 0 5
19229: PPUSH
19230: CALL 20437 0 5
19234: GO 19357
19236: LD_INT 302
19238: DOUBLE
19239: EQUAL
19240: IFTRUE 19244
19242: GO 19281
19244: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19245: LD_VAR 0 6
19249: PPUSH
19250: LD_VAR 0 7
19254: PPUSH
19255: LD_VAR 0 8
19259: PPUSH
19260: LD_VAR 0 9
19264: PPUSH
19265: LD_VAR 0 4
19269: PPUSH
19270: LD_VAR 0 5
19274: PPUSH
19275: CALL 20528 0 6
19279: GO 19357
19281: LD_INT 303
19283: DOUBLE
19284: EQUAL
19285: IFTRUE 19289
19287: GO 19326
19289: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19290: LD_VAR 0 6
19294: PPUSH
19295: LD_VAR 0 7
19299: PPUSH
19300: LD_VAR 0 8
19304: PPUSH
19305: LD_VAR 0 9
19309: PPUSH
19310: LD_VAR 0 4
19314: PPUSH
19315: LD_VAR 0 5
19319: PPUSH
19320: CALL 19362 0 6
19324: GO 19357
19326: LD_INT 304
19328: DOUBLE
19329: EQUAL
19330: IFTRUE 19334
19332: GO 19356
19334: POP
// hHackTeleport ( unit , x , y ) ; end ;
19335: LD_VAR 0 2
19339: PPUSH
19340: LD_VAR 0 4
19344: PPUSH
19345: LD_VAR 0 5
19349: PPUSH
19350: CALL 21121 0 3
19354: GO 19357
19356: POP
// end ;
19357: LD_VAR 0 12
19361: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19362: LD_INT 0
19364: PPUSH
19365: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19366: LD_VAR 0 1
19370: PUSH
19371: LD_INT 1
19373: LESS
19374: PUSH
19375: LD_VAR 0 1
19379: PUSH
19380: LD_INT 3
19382: GREATER
19383: OR
19384: PUSH
19385: LD_VAR 0 5
19389: PPUSH
19390: LD_VAR 0 6
19394: PPUSH
19395: CALL_OW 428
19399: OR
19400: IFFALSE 19404
// exit ;
19402: GO 20124
// uc_side := your_side ;
19404: LD_ADDR_OWVAR 20
19408: PUSH
19409: LD_OWVAR 2
19413: ST_TO_ADDR
// uc_nation := nation ;
19414: LD_ADDR_OWVAR 21
19418: PUSH
19419: LD_VAR 0 1
19423: ST_TO_ADDR
// bc_level = 1 ;
19424: LD_ADDR_OWVAR 43
19428: PUSH
19429: LD_INT 1
19431: ST_TO_ADDR
// case btype of 1 :
19432: LD_VAR 0 2
19436: PUSH
19437: LD_INT 1
19439: DOUBLE
19440: EQUAL
19441: IFTRUE 19445
19443: GO 19456
19445: POP
// bc_type := b_depot ; 2 :
19446: LD_ADDR_OWVAR 42
19450: PUSH
19451: LD_INT 0
19453: ST_TO_ADDR
19454: GO 20068
19456: LD_INT 2
19458: DOUBLE
19459: EQUAL
19460: IFTRUE 19464
19462: GO 19475
19464: POP
// bc_type := b_warehouse ; 3 :
19465: LD_ADDR_OWVAR 42
19469: PUSH
19470: LD_INT 1
19472: ST_TO_ADDR
19473: GO 20068
19475: LD_INT 3
19477: DOUBLE
19478: EQUAL
19479: IFTRUE 19483
19481: GO 19494
19483: POP
// bc_type := b_lab ; 4 .. 9 :
19484: LD_ADDR_OWVAR 42
19488: PUSH
19489: LD_INT 6
19491: ST_TO_ADDR
19492: GO 20068
19494: LD_INT 4
19496: DOUBLE
19497: GREATEREQUAL
19498: IFFALSE 19506
19500: LD_INT 9
19502: DOUBLE
19503: LESSEQUAL
19504: IFTRUE 19508
19506: GO 19560
19508: POP
// begin bc_type := b_lab_half ;
19509: LD_ADDR_OWVAR 42
19513: PUSH
19514: LD_INT 7
19516: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19517: LD_ADDR_OWVAR 44
19521: PUSH
19522: LD_INT 10
19524: PUSH
19525: LD_INT 11
19527: PUSH
19528: LD_INT 12
19530: PUSH
19531: LD_INT 15
19533: PUSH
19534: LD_INT 14
19536: PUSH
19537: LD_INT 13
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: LIST
19544: LIST
19545: LIST
19546: LIST
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: LD_INT 3
19555: MINUS
19556: ARRAY
19557: ST_TO_ADDR
// end ; 10 .. 13 :
19558: GO 20068
19560: LD_INT 10
19562: DOUBLE
19563: GREATEREQUAL
19564: IFFALSE 19572
19566: LD_INT 13
19568: DOUBLE
19569: LESSEQUAL
19570: IFTRUE 19574
19572: GO 19651
19574: POP
// begin bc_type := b_lab_full ;
19575: LD_ADDR_OWVAR 42
19579: PUSH
19580: LD_INT 8
19582: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19583: LD_ADDR_OWVAR 44
19587: PUSH
19588: LD_INT 10
19590: PUSH
19591: LD_INT 12
19593: PUSH
19594: LD_INT 14
19596: PUSH
19597: LD_INT 13
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: PUSH
19606: LD_VAR 0 2
19610: PUSH
19611: LD_INT 9
19613: MINUS
19614: ARRAY
19615: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19616: LD_ADDR_OWVAR 45
19620: PUSH
19621: LD_INT 11
19623: PUSH
19624: LD_INT 15
19626: PUSH
19627: LD_INT 12
19629: PUSH
19630: LD_INT 15
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: PUSH
19639: LD_VAR 0 2
19643: PUSH
19644: LD_INT 9
19646: MINUS
19647: ARRAY
19648: ST_TO_ADDR
// end ; 14 :
19649: GO 20068
19651: LD_INT 14
19653: DOUBLE
19654: EQUAL
19655: IFTRUE 19659
19657: GO 19670
19659: POP
// bc_type := b_workshop ; 15 :
19660: LD_ADDR_OWVAR 42
19664: PUSH
19665: LD_INT 2
19667: ST_TO_ADDR
19668: GO 20068
19670: LD_INT 15
19672: DOUBLE
19673: EQUAL
19674: IFTRUE 19678
19676: GO 19689
19678: POP
// bc_type := b_factory ; 16 :
19679: LD_ADDR_OWVAR 42
19683: PUSH
19684: LD_INT 3
19686: ST_TO_ADDR
19687: GO 20068
19689: LD_INT 16
19691: DOUBLE
19692: EQUAL
19693: IFTRUE 19697
19695: GO 19708
19697: POP
// bc_type := b_ext_gun ; 17 :
19698: LD_ADDR_OWVAR 42
19702: PUSH
19703: LD_INT 17
19705: ST_TO_ADDR
19706: GO 20068
19708: LD_INT 17
19710: DOUBLE
19711: EQUAL
19712: IFTRUE 19716
19714: GO 19744
19716: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19717: LD_ADDR_OWVAR 42
19721: PUSH
19722: LD_INT 19
19724: PUSH
19725: LD_INT 23
19727: PUSH
19728: LD_INT 19
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: LIST
19735: PUSH
19736: LD_VAR 0 1
19740: ARRAY
19741: ST_TO_ADDR
19742: GO 20068
19744: LD_INT 18
19746: DOUBLE
19747: EQUAL
19748: IFTRUE 19752
19750: GO 19763
19752: POP
// bc_type := b_ext_radar ; 19 :
19753: LD_ADDR_OWVAR 42
19757: PUSH
19758: LD_INT 20
19760: ST_TO_ADDR
19761: GO 20068
19763: LD_INT 19
19765: DOUBLE
19766: EQUAL
19767: IFTRUE 19771
19769: GO 19782
19771: POP
// bc_type := b_ext_radio ; 20 :
19772: LD_ADDR_OWVAR 42
19776: PUSH
19777: LD_INT 22
19779: ST_TO_ADDR
19780: GO 20068
19782: LD_INT 20
19784: DOUBLE
19785: EQUAL
19786: IFTRUE 19790
19788: GO 19801
19790: POP
// bc_type := b_ext_siberium ; 21 :
19791: LD_ADDR_OWVAR 42
19795: PUSH
19796: LD_INT 21
19798: ST_TO_ADDR
19799: GO 20068
19801: LD_INT 21
19803: DOUBLE
19804: EQUAL
19805: IFTRUE 19809
19807: GO 19820
19809: POP
// bc_type := b_ext_computer ; 22 :
19810: LD_ADDR_OWVAR 42
19814: PUSH
19815: LD_INT 24
19817: ST_TO_ADDR
19818: GO 20068
19820: LD_INT 22
19822: DOUBLE
19823: EQUAL
19824: IFTRUE 19828
19826: GO 19839
19828: POP
// bc_type := b_ext_track ; 23 :
19829: LD_ADDR_OWVAR 42
19833: PUSH
19834: LD_INT 16
19836: ST_TO_ADDR
19837: GO 20068
19839: LD_INT 23
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19858
19847: POP
// bc_type := b_ext_laser ; 24 :
19848: LD_ADDR_OWVAR 42
19852: PUSH
19853: LD_INT 25
19855: ST_TO_ADDR
19856: GO 20068
19858: LD_INT 24
19860: DOUBLE
19861: EQUAL
19862: IFTRUE 19866
19864: GO 19877
19866: POP
// bc_type := b_control_tower ; 25 :
19867: LD_ADDR_OWVAR 42
19871: PUSH
19872: LD_INT 36
19874: ST_TO_ADDR
19875: GO 20068
19877: LD_INT 25
19879: DOUBLE
19880: EQUAL
19881: IFTRUE 19885
19883: GO 19896
19885: POP
// bc_type := b_breastwork ; 26 :
19886: LD_ADDR_OWVAR 42
19890: PUSH
19891: LD_INT 31
19893: ST_TO_ADDR
19894: GO 20068
19896: LD_INT 26
19898: DOUBLE
19899: EQUAL
19900: IFTRUE 19904
19902: GO 19915
19904: POP
// bc_type := b_bunker ; 27 :
19905: LD_ADDR_OWVAR 42
19909: PUSH
19910: LD_INT 32
19912: ST_TO_ADDR
19913: GO 20068
19915: LD_INT 27
19917: DOUBLE
19918: EQUAL
19919: IFTRUE 19923
19921: GO 19934
19923: POP
// bc_type := b_turret ; 28 :
19924: LD_ADDR_OWVAR 42
19928: PUSH
19929: LD_INT 33
19931: ST_TO_ADDR
19932: GO 20068
19934: LD_INT 28
19936: DOUBLE
19937: EQUAL
19938: IFTRUE 19942
19940: GO 19953
19942: POP
// bc_type := b_armoury ; 29 :
19943: LD_ADDR_OWVAR 42
19947: PUSH
19948: LD_INT 4
19950: ST_TO_ADDR
19951: GO 20068
19953: LD_INT 29
19955: DOUBLE
19956: EQUAL
19957: IFTRUE 19961
19959: GO 19972
19961: POP
// bc_type := b_barracks ; 30 :
19962: LD_ADDR_OWVAR 42
19966: PUSH
19967: LD_INT 5
19969: ST_TO_ADDR
19970: GO 20068
19972: LD_INT 30
19974: DOUBLE
19975: EQUAL
19976: IFTRUE 19980
19978: GO 19991
19980: POP
// bc_type := b_solar_power ; 31 :
19981: LD_ADDR_OWVAR 42
19985: PUSH
19986: LD_INT 27
19988: ST_TO_ADDR
19989: GO 20068
19991: LD_INT 31
19993: DOUBLE
19994: EQUAL
19995: IFTRUE 19999
19997: GO 20010
19999: POP
// bc_type := b_oil_power ; 32 :
20000: LD_ADDR_OWVAR 42
20004: PUSH
20005: LD_INT 26
20007: ST_TO_ADDR
20008: GO 20068
20010: LD_INT 32
20012: DOUBLE
20013: EQUAL
20014: IFTRUE 20018
20016: GO 20029
20018: POP
// bc_type := b_siberite_power ; 33 :
20019: LD_ADDR_OWVAR 42
20023: PUSH
20024: LD_INT 28
20026: ST_TO_ADDR
20027: GO 20068
20029: LD_INT 33
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20048
20037: POP
// bc_type := b_oil_mine ; 34 :
20038: LD_ADDR_OWVAR 42
20042: PUSH
20043: LD_INT 29
20045: ST_TO_ADDR
20046: GO 20068
20048: LD_INT 34
20050: DOUBLE
20051: EQUAL
20052: IFTRUE 20056
20054: GO 20067
20056: POP
// bc_type := b_siberite_mine ; end ;
20057: LD_ADDR_OWVAR 42
20061: PUSH
20062: LD_INT 30
20064: ST_TO_ADDR
20065: GO 20068
20067: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20068: LD_ADDR_VAR 0 8
20072: PUSH
20073: LD_VAR 0 5
20077: PPUSH
20078: LD_VAR 0 6
20082: PPUSH
20083: LD_VAR 0 3
20087: PPUSH
20088: CALL_OW 47
20092: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20093: LD_OWVAR 42
20097: PUSH
20098: LD_INT 32
20100: PUSH
20101: LD_INT 33
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: IN
20108: IFFALSE 20124
// PlaceWeaponTurret ( b , weapon ) ;
20110: LD_VAR 0 8
20114: PPUSH
20115: LD_VAR 0 4
20119: PPUSH
20120: CALL_OW 431
// end ;
20124: LD_VAR 0 7
20128: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20129: LD_INT 0
20131: PPUSH
20132: PPUSH
20133: PPUSH
20134: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20135: LD_ADDR_VAR 0 4
20139: PUSH
20140: LD_INT 22
20142: PUSH
20143: LD_OWVAR 2
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 2
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: LD_INT 0
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 30
20167: PUSH
20168: LD_INT 1
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PPUSH
20184: CALL_OW 69
20188: ST_TO_ADDR
// if not tmp then
20189: LD_VAR 0 4
20193: NOT
20194: IFFALSE 20198
// exit ;
20196: GO 20257
// for i in tmp do
20198: LD_ADDR_VAR 0 2
20202: PUSH
20203: LD_VAR 0 4
20207: PUSH
20208: FOR_IN
20209: IFFALSE 20255
// for j = 1 to 3 do
20211: LD_ADDR_VAR 0 3
20215: PUSH
20216: DOUBLE
20217: LD_INT 1
20219: DEC
20220: ST_TO_ADDR
20221: LD_INT 3
20223: PUSH
20224: FOR_TO
20225: IFFALSE 20251
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20227: LD_VAR 0 2
20231: PPUSH
20232: CALL_OW 274
20236: PPUSH
20237: LD_VAR 0 3
20241: PPUSH
20242: LD_INT 99999
20244: PPUSH
20245: CALL_OW 277
20249: GO 20224
20251: POP
20252: POP
20253: GO 20208
20255: POP
20256: POP
// end ;
20257: LD_VAR 0 1
20261: RET
// export function hHackSetLevel10 ; var i , j ; begin
20262: LD_INT 0
20264: PPUSH
20265: PPUSH
20266: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20267: LD_ADDR_VAR 0 2
20271: PUSH
20272: LD_INT 21
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PPUSH
20282: CALL_OW 69
20286: PUSH
20287: FOR_IN
20288: IFFALSE 20340
// if IsSelected ( i ) then
20290: LD_VAR 0 2
20294: PPUSH
20295: CALL_OW 306
20299: IFFALSE 20338
// begin for j := 1 to 4 do
20301: LD_ADDR_VAR 0 3
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: LD_INT 4
20313: PUSH
20314: FOR_TO
20315: IFFALSE 20336
// SetSkill ( i , j , 10 ) ;
20317: LD_VAR 0 2
20321: PPUSH
20322: LD_VAR 0 3
20326: PPUSH
20327: LD_INT 10
20329: PPUSH
20330: CALL_OW 237
20334: GO 20314
20336: POP
20337: POP
// end ;
20338: GO 20287
20340: POP
20341: POP
// end ;
20342: LD_VAR 0 1
20346: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20347: LD_INT 0
20349: PPUSH
20350: PPUSH
20351: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20352: LD_ADDR_VAR 0 2
20356: PUSH
20357: LD_INT 22
20359: PUSH
20360: LD_OWVAR 2
20364: PUSH
20365: EMPTY
20366: LIST
20367: LIST
20368: PUSH
20369: LD_INT 21
20371: PUSH
20372: LD_INT 1
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: EMPTY
20380: LIST
20381: LIST
20382: PPUSH
20383: CALL_OW 69
20387: PUSH
20388: FOR_IN
20389: IFFALSE 20430
// begin for j := 1 to 4 do
20391: LD_ADDR_VAR 0 3
20395: PUSH
20396: DOUBLE
20397: LD_INT 1
20399: DEC
20400: ST_TO_ADDR
20401: LD_INT 4
20403: PUSH
20404: FOR_TO
20405: IFFALSE 20426
// SetSkill ( i , j , 10 ) ;
20407: LD_VAR 0 2
20411: PPUSH
20412: LD_VAR 0 3
20416: PPUSH
20417: LD_INT 10
20419: PPUSH
20420: CALL_OW 237
20424: GO 20404
20426: POP
20427: POP
// end ;
20428: GO 20388
20430: POP
20431: POP
// end ;
20432: LD_VAR 0 1
20436: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20437: LD_INT 0
20439: PPUSH
// uc_side := your_side ;
20440: LD_ADDR_OWVAR 20
20444: PUSH
20445: LD_OWVAR 2
20449: ST_TO_ADDR
// uc_nation := nation ;
20450: LD_ADDR_OWVAR 21
20454: PUSH
20455: LD_VAR 0 1
20459: ST_TO_ADDR
// InitHc ;
20460: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20464: LD_INT 0
20466: PPUSH
20467: LD_VAR 0 2
20471: PPUSH
20472: LD_VAR 0 3
20476: PPUSH
20477: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20481: LD_VAR 0 4
20485: PPUSH
20486: LD_VAR 0 5
20490: PPUSH
20491: CALL_OW 428
20495: PUSH
20496: LD_INT 0
20498: EQUAL
20499: IFFALSE 20523
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20501: CALL_OW 44
20505: PPUSH
20506: LD_VAR 0 4
20510: PPUSH
20511: LD_VAR 0 5
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: CALL_OW 48
// end ;
20523: LD_VAR 0 6
20527: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20528: LD_INT 0
20530: PPUSH
20531: PPUSH
// uc_side := your_side ;
20532: LD_ADDR_OWVAR 20
20536: PUSH
20537: LD_OWVAR 2
20541: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20542: LD_VAR 0 1
20546: PUSH
20547: LD_INT 1
20549: PUSH
20550: LD_INT 2
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: LIST
20567: LIST
20568: IN
20569: IFFALSE 20581
// uc_nation := nation_american else
20571: LD_ADDR_OWVAR 21
20575: PUSH
20576: LD_INT 1
20578: ST_TO_ADDR
20579: GO 20624
// if chassis in [ 11 , 12 , 13 , 14 ] then
20581: LD_VAR 0 1
20585: PUSH
20586: LD_INT 11
20588: PUSH
20589: LD_INT 12
20591: PUSH
20592: LD_INT 13
20594: PUSH
20595: LD_INT 14
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: IN
20604: IFFALSE 20616
// uc_nation := nation_arabian else
20606: LD_ADDR_OWVAR 21
20610: PUSH
20611: LD_INT 2
20613: ST_TO_ADDR
20614: GO 20624
// uc_nation := nation_russian ;
20616: LD_ADDR_OWVAR 21
20620: PUSH
20621: LD_INT 3
20623: ST_TO_ADDR
// vc_chassis := chassis ;
20624: LD_ADDR_OWVAR 37
20628: PUSH
20629: LD_VAR 0 1
20633: ST_TO_ADDR
// vc_engine := engine ;
20634: LD_ADDR_OWVAR 39
20638: PUSH
20639: LD_VAR 0 2
20643: ST_TO_ADDR
// vc_control := control ;
20644: LD_ADDR_OWVAR 38
20648: PUSH
20649: LD_VAR 0 3
20653: ST_TO_ADDR
// vc_weapon := weapon ;
20654: LD_ADDR_OWVAR 40
20658: PUSH
20659: LD_VAR 0 4
20663: ST_TO_ADDR
// un := CreateVehicle ;
20664: LD_ADDR_VAR 0 8
20668: PUSH
20669: CALL_OW 45
20673: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20674: LD_VAR 0 8
20678: PPUSH
20679: LD_INT 0
20681: PPUSH
20682: LD_INT 5
20684: PPUSH
20685: CALL_OW 12
20689: PPUSH
20690: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20694: LD_VAR 0 8
20698: PPUSH
20699: LD_VAR 0 5
20703: PPUSH
20704: LD_VAR 0 6
20708: PPUSH
20709: LD_INT 1
20711: PPUSH
20712: CALL_OW 48
// end ;
20716: LD_VAR 0 7
20720: RET
// export hInvincible ; every 1 do
20721: GO 20723
20723: DISABLE
// hInvincible := [ ] ;
20724: LD_ADDR_EXP 100
20728: PUSH
20729: EMPTY
20730: ST_TO_ADDR
20731: END
// every 10 do var i ;
20732: GO 20734
20734: DISABLE
20735: LD_INT 0
20737: PPUSH
// begin enable ;
20738: ENABLE
// if not hInvincible then
20739: LD_EXP 100
20743: NOT
20744: IFFALSE 20748
// exit ;
20746: GO 20792
// for i in hInvincible do
20748: LD_ADDR_VAR 0 1
20752: PUSH
20753: LD_EXP 100
20757: PUSH
20758: FOR_IN
20759: IFFALSE 20790
// if GetLives ( i ) < 1000 then
20761: LD_VAR 0 1
20765: PPUSH
20766: CALL_OW 256
20770: PUSH
20771: LD_INT 1000
20773: LESS
20774: IFFALSE 20788
// SetLives ( i , 1000 ) ;
20776: LD_VAR 0 1
20780: PPUSH
20781: LD_INT 1000
20783: PPUSH
20784: CALL_OW 234
20788: GO 20758
20790: POP
20791: POP
// end ;
20792: PPOPN 1
20794: END
// export function hHackInvincible ; var i ; begin
20795: LD_INT 0
20797: PPUSH
20798: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20799: LD_ADDR_VAR 0 2
20803: PUSH
20804: LD_INT 2
20806: PUSH
20807: LD_INT 21
20809: PUSH
20810: LD_INT 1
20812: PUSH
20813: EMPTY
20814: LIST
20815: LIST
20816: PUSH
20817: LD_INT 21
20819: PUSH
20820: LD_INT 2
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: PPUSH
20832: CALL_OW 69
20836: PUSH
20837: FOR_IN
20838: IFFALSE 20899
// if IsSelected ( i ) then
20840: LD_VAR 0 2
20844: PPUSH
20845: CALL_OW 306
20849: IFFALSE 20897
// begin if i in hInvincible then
20851: LD_VAR 0 2
20855: PUSH
20856: LD_EXP 100
20860: IN
20861: IFFALSE 20881
// hInvincible := hInvincible diff i else
20863: LD_ADDR_EXP 100
20867: PUSH
20868: LD_EXP 100
20872: PUSH
20873: LD_VAR 0 2
20877: DIFF
20878: ST_TO_ADDR
20879: GO 20897
// hInvincible := hInvincible union i ;
20881: LD_ADDR_EXP 100
20885: PUSH
20886: LD_EXP 100
20890: PUSH
20891: LD_VAR 0 2
20895: UNION
20896: ST_TO_ADDR
// end ;
20897: GO 20837
20899: POP
20900: POP
// end ;
20901: LD_VAR 0 1
20905: RET
// export function hHackInvisible ; var i , j ; begin
20906: LD_INT 0
20908: PPUSH
20909: PPUSH
20910: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20911: LD_ADDR_VAR 0 2
20915: PUSH
20916: LD_INT 21
20918: PUSH
20919: LD_INT 1
20921: PUSH
20922: EMPTY
20923: LIST
20924: LIST
20925: PPUSH
20926: CALL_OW 69
20930: PUSH
20931: FOR_IN
20932: IFFALSE 20956
// if IsSelected ( i ) then
20934: LD_VAR 0 2
20938: PPUSH
20939: CALL_OW 306
20943: IFFALSE 20954
// ComForceInvisible ( i ) ;
20945: LD_VAR 0 2
20949: PPUSH
20950: CALL_OW 496
20954: GO 20931
20956: POP
20957: POP
// end ;
20958: LD_VAR 0 1
20962: RET
// export function hHackChangeYourSide ; begin
20963: LD_INT 0
20965: PPUSH
// if your_side = 8 then
20966: LD_OWVAR 2
20970: PUSH
20971: LD_INT 8
20973: EQUAL
20974: IFFALSE 20986
// your_side := 0 else
20976: LD_ADDR_OWVAR 2
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
20984: GO 21000
// your_side := your_side + 1 ;
20986: LD_ADDR_OWVAR 2
20990: PUSH
20991: LD_OWVAR 2
20995: PUSH
20996: LD_INT 1
20998: PLUS
20999: ST_TO_ADDR
// end ;
21000: LD_VAR 0 1
21004: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21005: LD_INT 0
21007: PPUSH
21008: PPUSH
21009: PPUSH
// for i in all_units do
21010: LD_ADDR_VAR 0 2
21014: PUSH
21015: LD_OWVAR 3
21019: PUSH
21020: FOR_IN
21021: IFFALSE 21099
// if IsSelected ( i ) then
21023: LD_VAR 0 2
21027: PPUSH
21028: CALL_OW 306
21032: IFFALSE 21097
// begin j := GetSide ( i ) ;
21034: LD_ADDR_VAR 0 3
21038: PUSH
21039: LD_VAR 0 2
21043: PPUSH
21044: CALL_OW 255
21048: ST_TO_ADDR
// if j = 8 then
21049: LD_VAR 0 3
21053: PUSH
21054: LD_INT 8
21056: EQUAL
21057: IFFALSE 21069
// j := 0 else
21059: LD_ADDR_VAR 0 3
21063: PUSH
21064: LD_INT 0
21066: ST_TO_ADDR
21067: GO 21083
// j := j + 1 ;
21069: LD_ADDR_VAR 0 3
21073: PUSH
21074: LD_VAR 0 3
21078: PUSH
21079: LD_INT 1
21081: PLUS
21082: ST_TO_ADDR
// SetSide ( i , j ) ;
21083: LD_VAR 0 2
21087: PPUSH
21088: LD_VAR 0 3
21092: PPUSH
21093: CALL_OW 235
// end ;
21097: GO 21020
21099: POP
21100: POP
// end ;
21101: LD_VAR 0 1
21105: RET
// export function hHackFog ; begin
21106: LD_INT 0
21108: PPUSH
// FogOff ( true ) ;
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 344
// end ;
21116: LD_VAR 0 1
21120: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21121: LD_INT 0
21123: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21124: LD_VAR 0 1
21128: PPUSH
21129: LD_VAR 0 2
21133: PPUSH
21134: LD_VAR 0 3
21138: PPUSH
21139: LD_INT 1
21141: PPUSH
21142: LD_INT 1
21144: PPUSH
21145: CALL_OW 483
// CenterOnXY ( x , y ) ;
21149: LD_VAR 0 2
21153: PPUSH
21154: LD_VAR 0 3
21158: PPUSH
21159: CALL_OW 84
// end ; end_of_file
21163: LD_VAR 0 4
21167: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21168: LD_INT 0
21170: PPUSH
21171: PPUSH
21172: PPUSH
21173: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 264
21183: PUSH
21184: LD_EXP 28
21188: EQUAL
21189: IFFALSE 21261
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21191: LD_INT 68
21193: PPUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: CALL_OW 255
21203: PPUSH
21204: CALL_OW 321
21208: PUSH
21209: LD_INT 2
21211: EQUAL
21212: IFFALSE 21224
// eff := 70 else
21214: LD_ADDR_VAR 0 4
21218: PUSH
21219: LD_INT 70
21221: ST_TO_ADDR
21222: GO 21232
// eff := 30 ;
21224: LD_ADDR_VAR 0 4
21228: PUSH
21229: LD_INT 30
21231: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21232: LD_VAR 0 1
21236: PPUSH
21237: CALL_OW 250
21241: PPUSH
21242: LD_VAR 0 1
21246: PPUSH
21247: CALL_OW 251
21251: PPUSH
21252: LD_VAR 0 4
21256: PPUSH
21257: CALL_OW 495
// end ; end ;
21261: LD_VAR 0 2
21265: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21266: LD_INT 0
21268: PPUSH
// end ;
21269: LD_VAR 0 4
21273: RET
// export function SOS_Command ( cmd ) ; begin
21274: LD_INT 0
21276: PPUSH
// end ;
21277: LD_VAR 0 2
21281: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21282: LD_INT 0
21284: PPUSH
// end ;
21285: LD_VAR 0 6
21289: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21290: LD_INT 0
21292: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21293: LD_VAR 0 1
21297: PUSH
21298: LD_INT 250
21300: EQUAL
21301: PUSH
21302: LD_VAR 0 2
21306: PPUSH
21307: CALL_OW 264
21311: PUSH
21312: LD_EXP 31
21316: EQUAL
21317: AND
21318: IFFALSE 21339
// MinerPlaceMine ( unit , x , y ) ;
21320: LD_VAR 0 2
21324: PPUSH
21325: LD_VAR 0 4
21329: PPUSH
21330: LD_VAR 0 5
21334: PPUSH
21335: CALL 23688 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21339: LD_VAR 0 1
21343: PUSH
21344: LD_INT 251
21346: EQUAL
21347: PUSH
21348: LD_VAR 0 2
21352: PPUSH
21353: CALL_OW 264
21357: PUSH
21358: LD_EXP 31
21362: EQUAL
21363: AND
21364: IFFALSE 21385
// MinerDetonateMine ( unit , x , y ) ;
21366: LD_VAR 0 2
21370: PPUSH
21371: LD_VAR 0 4
21375: PPUSH
21376: LD_VAR 0 5
21380: PPUSH
21381: CALL 23965 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21385: LD_VAR 0 1
21389: PUSH
21390: LD_INT 252
21392: EQUAL
21393: PUSH
21394: LD_VAR 0 2
21398: PPUSH
21399: CALL_OW 264
21403: PUSH
21404: LD_EXP 31
21408: EQUAL
21409: AND
21410: IFFALSE 21431
// MinerCreateMinefield ( unit , x , y ) ;
21412: LD_VAR 0 2
21416: PPUSH
21417: LD_VAR 0 4
21421: PPUSH
21422: LD_VAR 0 5
21426: PPUSH
21427: CALL 24382 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21431: LD_VAR 0 1
21435: PUSH
21436: LD_INT 253
21438: EQUAL
21439: PUSH
21440: LD_VAR 0 2
21444: PPUSH
21445: CALL_OW 257
21449: PUSH
21450: LD_INT 5
21452: EQUAL
21453: AND
21454: IFFALSE 21475
// ComBinocular ( unit , x , y ) ;
21456: LD_VAR 0 2
21460: PPUSH
21461: LD_VAR 0 4
21465: PPUSH
21466: LD_VAR 0 5
21470: PPUSH
21471: CALL 24753 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21475: LD_VAR 0 1
21479: PUSH
21480: LD_INT 254
21482: EQUAL
21483: PUSH
21484: LD_VAR 0 2
21488: PPUSH
21489: CALL_OW 264
21493: PUSH
21494: LD_EXP 26
21498: EQUAL
21499: AND
21500: PUSH
21501: LD_VAR 0 3
21505: PPUSH
21506: CALL_OW 263
21510: PUSH
21511: LD_INT 3
21513: EQUAL
21514: AND
21515: IFFALSE 21531
// HackDestroyVehicle ( unit , selectedUnit ) ;
21517: LD_VAR 0 2
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 23048 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21531: LD_VAR 0 1
21535: PUSH
21536: LD_INT 255
21538: EQUAL
21539: PUSH
21540: LD_VAR 0 2
21544: PPUSH
21545: CALL_OW 264
21549: PUSH
21550: LD_INT 14
21552: PUSH
21553: LD_INT 53
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: IN
21560: AND
21561: PUSH
21562: LD_VAR 0 4
21566: PPUSH
21567: LD_VAR 0 5
21571: PPUSH
21572: CALL_OW 488
21576: AND
21577: IFFALSE 21601
// CutTreeXYR ( unit , x , y , 12 ) ;
21579: LD_VAR 0 2
21583: PPUSH
21584: LD_VAR 0 4
21588: PPUSH
21589: LD_VAR 0 5
21593: PPUSH
21594: LD_INT 12
21596: PPUSH
21597: CALL 21614 0 4
// end ;
21601: LD_VAR 0 6
21605: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
21606: LD_INT 0
21608: PPUSH
// end ;
21609: LD_VAR 0 4
21613: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21614: LD_INT 0
21616: PPUSH
21617: PPUSH
21618: PPUSH
21619: PPUSH
21620: PPUSH
21621: PPUSH
21622: PPUSH
21623: PPUSH
21624: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21625: LD_VAR 0 1
21629: NOT
21630: PUSH
21631: LD_VAR 0 2
21635: PPUSH
21636: LD_VAR 0 3
21640: PPUSH
21641: CALL_OW 488
21645: NOT
21646: OR
21647: PUSH
21648: LD_VAR 0 4
21652: NOT
21653: OR
21654: IFFALSE 21658
// exit ;
21656: GO 21998
// list := [ ] ;
21658: LD_ADDR_VAR 0 13
21662: PUSH
21663: EMPTY
21664: ST_TO_ADDR
// if x - r < 0 then
21665: LD_VAR 0 2
21669: PUSH
21670: LD_VAR 0 4
21674: MINUS
21675: PUSH
21676: LD_INT 0
21678: LESS
21679: IFFALSE 21691
// min_x := 0 else
21681: LD_ADDR_VAR 0 7
21685: PUSH
21686: LD_INT 0
21688: ST_TO_ADDR
21689: GO 21707
// min_x := x - r ;
21691: LD_ADDR_VAR 0 7
21695: PUSH
21696: LD_VAR 0 2
21700: PUSH
21701: LD_VAR 0 4
21705: MINUS
21706: ST_TO_ADDR
// if y - r < 0 then
21707: LD_VAR 0 3
21711: PUSH
21712: LD_VAR 0 4
21716: MINUS
21717: PUSH
21718: LD_INT 0
21720: LESS
21721: IFFALSE 21733
// min_y := 0 else
21723: LD_ADDR_VAR 0 8
21727: PUSH
21728: LD_INT 0
21730: ST_TO_ADDR
21731: GO 21749
// min_y := y - r ;
21733: LD_ADDR_VAR 0 8
21737: PUSH
21738: LD_VAR 0 3
21742: PUSH
21743: LD_VAR 0 4
21747: MINUS
21748: ST_TO_ADDR
// max_x := x + r ;
21749: LD_ADDR_VAR 0 9
21753: PUSH
21754: LD_VAR 0 2
21758: PUSH
21759: LD_VAR 0 4
21763: PLUS
21764: ST_TO_ADDR
// max_y := y + r ;
21765: LD_ADDR_VAR 0 10
21769: PUSH
21770: LD_VAR 0 3
21774: PUSH
21775: LD_VAR 0 4
21779: PLUS
21780: ST_TO_ADDR
// for _x = min_x to max_x do
21781: LD_ADDR_VAR 0 11
21785: PUSH
21786: DOUBLE
21787: LD_VAR 0 7
21791: DEC
21792: ST_TO_ADDR
21793: LD_VAR 0 9
21797: PUSH
21798: FOR_TO
21799: IFFALSE 21916
// for _y = min_y to max_y do
21801: LD_ADDR_VAR 0 12
21805: PUSH
21806: DOUBLE
21807: LD_VAR 0 8
21811: DEC
21812: ST_TO_ADDR
21813: LD_VAR 0 10
21817: PUSH
21818: FOR_TO
21819: IFFALSE 21912
// begin if not ValidHex ( _x , _y ) then
21821: LD_VAR 0 11
21825: PPUSH
21826: LD_VAR 0 12
21830: PPUSH
21831: CALL_OW 488
21835: NOT
21836: IFFALSE 21840
// continue ;
21838: GO 21818
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21840: LD_VAR 0 11
21844: PPUSH
21845: LD_VAR 0 12
21849: PPUSH
21850: CALL_OW 351
21854: PUSH
21855: LD_VAR 0 11
21859: PPUSH
21860: LD_VAR 0 12
21864: PPUSH
21865: CALL_OW 554
21869: AND
21870: IFFALSE 21910
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21872: LD_ADDR_VAR 0 13
21876: PUSH
21877: LD_VAR 0 13
21881: PPUSH
21882: LD_VAR 0 13
21886: PUSH
21887: LD_INT 1
21889: PLUS
21890: PPUSH
21891: LD_VAR 0 11
21895: PUSH
21896: LD_VAR 0 12
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: CALL_OW 2
21909: ST_TO_ADDR
// end ;
21910: GO 21818
21912: POP
21913: POP
21914: GO 21798
21916: POP
21917: POP
// if not list then
21918: LD_VAR 0 13
21922: NOT
21923: IFFALSE 21927
// exit ;
21925: GO 21998
// for i in list do
21927: LD_ADDR_VAR 0 6
21931: PUSH
21932: LD_VAR 0 13
21936: PUSH
21937: FOR_IN
21938: IFFALSE 21996
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21940: LD_VAR 0 1
21944: PPUSH
21945: LD_STRING M
21947: PUSH
21948: LD_VAR 0 6
21952: PUSH
21953: LD_INT 1
21955: ARRAY
21956: PUSH
21957: LD_VAR 0 6
21961: PUSH
21962: LD_INT 2
21964: ARRAY
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: LD_INT 0
21971: PUSH
21972: LD_INT 0
21974: PUSH
21975: LD_INT 0
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: PPUSH
21990: CALL_OW 447
21994: GO 21937
21996: POP
21997: POP
// end ;
21998: LD_VAR 0 5
22002: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22003: LD_EXP 103
22007: NOT
22008: IFFALSE 22058
22010: GO 22012
22012: DISABLE
// begin initHack := true ;
22013: LD_ADDR_EXP 103
22017: PUSH
22018: LD_INT 1
22020: ST_TO_ADDR
// hackTanks := [ ] ;
22021: LD_ADDR_EXP 104
22025: PUSH
22026: EMPTY
22027: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22028: LD_ADDR_EXP 105
22032: PUSH
22033: EMPTY
22034: ST_TO_ADDR
// hackLimit := 3 ;
22035: LD_ADDR_EXP 106
22039: PUSH
22040: LD_INT 3
22042: ST_TO_ADDR
// hackDist := 12 ;
22043: LD_ADDR_EXP 107
22047: PUSH
22048: LD_INT 12
22050: ST_TO_ADDR
// hackCounter := [ ] ;
22051: LD_ADDR_EXP 108
22055: PUSH
22056: EMPTY
22057: ST_TO_ADDR
// end ;
22058: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22059: LD_EXP 103
22063: PUSH
22064: LD_INT 34
22066: PUSH
22067: LD_EXP 26
22071: PUSH
22072: EMPTY
22073: LIST
22074: LIST
22075: PPUSH
22076: CALL_OW 69
22080: AND
22081: IFFALSE 22336
22083: GO 22085
22085: DISABLE
22086: LD_INT 0
22088: PPUSH
22089: PPUSH
// begin enable ;
22090: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22091: LD_ADDR_VAR 0 1
22095: PUSH
22096: LD_INT 34
22098: PUSH
22099: LD_EXP 26
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PPUSH
22108: CALL_OW 69
22112: PUSH
22113: FOR_IN
22114: IFFALSE 22334
// begin if not i in hackTanks then
22116: LD_VAR 0 1
22120: PUSH
22121: LD_EXP 104
22125: IN
22126: NOT
22127: IFFALSE 22210
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22129: LD_ADDR_EXP 104
22133: PUSH
22134: LD_EXP 104
22138: PPUSH
22139: LD_EXP 104
22143: PUSH
22144: LD_INT 1
22146: PLUS
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 1
22157: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22158: LD_ADDR_EXP 105
22162: PUSH
22163: LD_EXP 105
22167: PPUSH
22168: LD_EXP 105
22172: PUSH
22173: LD_INT 1
22175: PLUS
22176: PPUSH
22177: EMPTY
22178: PPUSH
22179: CALL_OW 1
22183: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22184: LD_ADDR_EXP 108
22188: PUSH
22189: LD_EXP 108
22193: PPUSH
22194: LD_EXP 108
22198: PUSH
22199: LD_INT 1
22201: PLUS
22202: PPUSH
22203: EMPTY
22204: PPUSH
22205: CALL_OW 1
22209: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22210: LD_VAR 0 1
22214: PPUSH
22215: CALL_OW 302
22219: NOT
22220: IFFALSE 22233
// begin HackUnlinkAll ( i ) ;
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL 22339 0 1
// continue ;
22231: GO 22113
// end ; HackCheckCapturedStatus ( i ) ;
22233: LD_VAR 0 1
22237: PPUSH
22238: CALL 22782 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22242: LD_ADDR_VAR 0 2
22246: PUSH
22247: LD_INT 81
22249: PUSH
22250: LD_VAR 0 1
22254: PPUSH
22255: CALL_OW 255
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 33
22266: PUSH
22267: LD_INT 3
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 91
22276: PUSH
22277: LD_VAR 0 1
22281: PUSH
22282: LD_EXP 107
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: LIST
22291: PUSH
22292: LD_INT 50
22294: PUSH
22295: EMPTY
22296: LIST
22297: PUSH
22298: EMPTY
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: PPUSH
22304: CALL_OW 69
22308: ST_TO_ADDR
// if not tmp then
22309: LD_VAR 0 2
22313: NOT
22314: IFFALSE 22318
// continue ;
22316: GO 22113
// HackLink ( i , tmp ) ;
22318: LD_VAR 0 1
22322: PPUSH
22323: LD_VAR 0 2
22327: PPUSH
22328: CALL 22475 0 2
// end ;
22332: GO 22113
22334: POP
22335: POP
// end ;
22336: PPOPN 2
22338: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22339: LD_INT 0
22341: PPUSH
22342: PPUSH
22343: PPUSH
// if not hack in hackTanks then
22344: LD_VAR 0 1
22348: PUSH
22349: LD_EXP 104
22353: IN
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22470
// index := GetElementIndex ( hackTanks , hack ) ;
22359: LD_ADDR_VAR 0 4
22363: PUSH
22364: LD_EXP 104
22368: PPUSH
22369: LD_VAR 0 1
22373: PPUSH
22374: CALL 29944 0 2
22378: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22379: LD_EXP 105
22383: PUSH
22384: LD_VAR 0 4
22388: ARRAY
22389: IFFALSE 22470
// begin for i in hackTanksCaptured [ index ] do
22391: LD_ADDR_VAR 0 3
22395: PUSH
22396: LD_EXP 105
22400: PUSH
22401: LD_VAR 0 4
22405: ARRAY
22406: PUSH
22407: FOR_IN
22408: IFFALSE 22434
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22410: LD_VAR 0 3
22414: PUSH
22415: LD_INT 1
22417: ARRAY
22418: PPUSH
22419: LD_VAR 0 3
22423: PUSH
22424: LD_INT 2
22426: ARRAY
22427: PPUSH
22428: CALL_OW 235
22432: GO 22407
22434: POP
22435: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22436: LD_ADDR_EXP 105
22440: PUSH
22441: LD_EXP 105
22445: PPUSH
22446: LD_VAR 0 4
22450: PPUSH
22451: EMPTY
22452: PPUSH
22453: CALL_OW 1
22457: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22458: LD_VAR 0 1
22462: PPUSH
22463: LD_INT 0
22465: PPUSH
22466: CALL_OW 505
// end ; end ;
22470: LD_VAR 0 2
22474: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22475: LD_INT 0
22477: PPUSH
22478: PPUSH
22479: PPUSH
// if not hack in hackTanks or not vehicles then
22480: LD_VAR 0 1
22484: PUSH
22485: LD_EXP 104
22489: IN
22490: NOT
22491: PUSH
22492: LD_VAR 0 2
22496: NOT
22497: OR
22498: IFFALSE 22502
// exit ;
22500: GO 22777
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22502: LD_ADDR_VAR 0 2
22506: PUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: LD_VAR 0 2
22516: PPUSH
22517: LD_INT 1
22519: PPUSH
22520: LD_INT 1
22522: PPUSH
22523: CALL 30594 0 4
22527: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22528: LD_ADDR_VAR 0 5
22532: PUSH
22533: LD_EXP 104
22537: PPUSH
22538: LD_VAR 0 1
22542: PPUSH
22543: CALL 29944 0 2
22547: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22548: LD_EXP 105
22552: PUSH
22553: LD_VAR 0 5
22557: ARRAY
22558: PUSH
22559: LD_EXP 106
22563: LESS
22564: IFFALSE 22753
// begin for i := 1 to vehicles do
22566: LD_ADDR_VAR 0 4
22570: PUSH
22571: DOUBLE
22572: LD_INT 1
22574: DEC
22575: ST_TO_ADDR
22576: LD_VAR 0 2
22580: PUSH
22581: FOR_TO
22582: IFFALSE 22751
// begin if hackTanksCaptured [ index ] = hackLimit then
22584: LD_EXP 105
22588: PUSH
22589: LD_VAR 0 5
22593: ARRAY
22594: PUSH
22595: LD_EXP 106
22599: EQUAL
22600: IFFALSE 22604
// break ;
22602: GO 22751
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22604: LD_ADDR_EXP 108
22608: PUSH
22609: LD_EXP 108
22613: PPUSH
22614: LD_VAR 0 5
22618: PPUSH
22619: LD_EXP 108
22623: PUSH
22624: LD_VAR 0 5
22628: ARRAY
22629: PUSH
22630: LD_INT 1
22632: PLUS
22633: PPUSH
22634: CALL_OW 1
22638: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22639: LD_ADDR_EXP 105
22643: PUSH
22644: LD_EXP 105
22648: PPUSH
22649: LD_VAR 0 5
22653: PUSH
22654: LD_EXP 105
22658: PUSH
22659: LD_VAR 0 5
22663: ARRAY
22664: PUSH
22665: LD_INT 1
22667: PLUS
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: PPUSH
22673: LD_VAR 0 2
22677: PUSH
22678: LD_VAR 0 4
22682: ARRAY
22683: PUSH
22684: LD_VAR 0 2
22688: PUSH
22689: LD_VAR 0 4
22693: ARRAY
22694: PPUSH
22695: CALL_OW 255
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PPUSH
22704: CALL 30159 0 3
22708: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22709: LD_VAR 0 2
22713: PUSH
22714: LD_VAR 0 4
22718: ARRAY
22719: PPUSH
22720: LD_VAR 0 1
22724: PPUSH
22725: CALL_OW 255
22729: PPUSH
22730: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22734: LD_VAR 0 2
22738: PUSH
22739: LD_VAR 0 4
22743: ARRAY
22744: PPUSH
22745: CALL_OW 141
// end ;
22749: GO 22581
22751: POP
22752: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22753: LD_VAR 0 1
22757: PPUSH
22758: LD_EXP 105
22762: PUSH
22763: LD_VAR 0 5
22767: ARRAY
22768: PUSH
22769: LD_INT 0
22771: PLUS
22772: PPUSH
22773: CALL_OW 505
// end ;
22777: LD_VAR 0 3
22781: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
// if not hack in hackTanks then
22788: LD_VAR 0 1
22792: PUSH
22793: LD_EXP 104
22797: IN
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 23043
// index := GetElementIndex ( hackTanks , hack ) ;
22803: LD_ADDR_VAR 0 4
22807: PUSH
22808: LD_EXP 104
22812: PPUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL 29944 0 2
22822: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22823: LD_ADDR_VAR 0 3
22827: PUSH
22828: DOUBLE
22829: LD_EXP 105
22833: PUSH
22834: LD_VAR 0 4
22838: ARRAY
22839: INC
22840: ST_TO_ADDR
22841: LD_INT 1
22843: PUSH
22844: FOR_DOWNTO
22845: IFFALSE 23017
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22847: LD_ADDR_VAR 0 5
22851: PUSH
22852: LD_EXP 105
22856: PUSH
22857: LD_VAR 0 4
22861: ARRAY
22862: PUSH
22863: LD_VAR 0 3
22867: ARRAY
22868: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22869: LD_VAR 0 5
22873: PUSH
22874: LD_INT 1
22876: ARRAY
22877: PPUSH
22878: CALL_OW 302
22882: NOT
22883: PUSH
22884: LD_VAR 0 5
22888: PUSH
22889: LD_INT 1
22891: ARRAY
22892: PPUSH
22893: CALL_OW 255
22897: PUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 255
22907: NONEQUAL
22908: OR
22909: IFFALSE 23015
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22911: LD_VAR 0 5
22915: PUSH
22916: LD_INT 1
22918: ARRAY
22919: PPUSH
22920: CALL_OW 305
22924: PUSH
22925: LD_VAR 0 5
22929: PUSH
22930: LD_INT 1
22932: ARRAY
22933: PPUSH
22934: CALL_OW 255
22938: PUSH
22939: LD_VAR 0 1
22943: PPUSH
22944: CALL_OW 255
22948: EQUAL
22949: AND
22950: IFFALSE 22974
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22952: LD_VAR 0 5
22956: PUSH
22957: LD_INT 1
22959: ARRAY
22960: PPUSH
22961: LD_VAR 0 5
22965: PUSH
22966: LD_INT 2
22968: ARRAY
22969: PPUSH
22970: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22974: LD_ADDR_EXP 105
22978: PUSH
22979: LD_EXP 105
22983: PPUSH
22984: LD_VAR 0 4
22988: PPUSH
22989: LD_EXP 105
22993: PUSH
22994: LD_VAR 0 4
22998: ARRAY
22999: PPUSH
23000: LD_VAR 0 3
23004: PPUSH
23005: CALL_OW 3
23009: PPUSH
23010: CALL_OW 1
23014: ST_TO_ADDR
// end ; end ;
23015: GO 22844
23017: POP
23018: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23019: LD_VAR 0 1
23023: PPUSH
23024: LD_EXP 105
23028: PUSH
23029: LD_VAR 0 4
23033: ARRAY
23034: PUSH
23035: LD_INT 0
23037: PLUS
23038: PPUSH
23039: CALL_OW 505
// end ;
23043: LD_VAR 0 2
23047: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23048: LD_INT 0
23050: PPUSH
23051: PPUSH
23052: PPUSH
23053: PPUSH
// if not hack in hackTanks then
23054: LD_VAR 0 1
23058: PUSH
23059: LD_EXP 104
23063: IN
23064: NOT
23065: IFFALSE 23069
// exit ;
23067: GO 23154
// index := GetElementIndex ( hackTanks , hack ) ;
23069: LD_ADDR_VAR 0 5
23073: PUSH
23074: LD_EXP 104
23078: PPUSH
23079: LD_VAR 0 1
23083: PPUSH
23084: CALL 29944 0 2
23088: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23089: LD_ADDR_VAR 0 4
23093: PUSH
23094: DOUBLE
23095: LD_INT 1
23097: DEC
23098: ST_TO_ADDR
23099: LD_EXP 105
23103: PUSH
23104: LD_VAR 0 5
23108: ARRAY
23109: PUSH
23110: FOR_TO
23111: IFFALSE 23152
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23113: LD_EXP 105
23117: PUSH
23118: LD_VAR 0 5
23122: ARRAY
23123: PUSH
23124: LD_VAR 0 4
23128: ARRAY
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: PUSH
23134: LD_VAR 0 2
23138: EQUAL
23139: IFFALSE 23150
// KillUnit ( vehicle ) ;
23141: LD_VAR 0 2
23145: PPUSH
23146: CALL_OW 66
23150: GO 23110
23152: POP
23153: POP
// end ;
23154: LD_VAR 0 3
23158: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23159: LD_EXP 109
23163: NOT
23164: IFFALSE 23199
23166: GO 23168
23168: DISABLE
// begin initMiner := true ;
23169: LD_ADDR_EXP 109
23173: PUSH
23174: LD_INT 1
23176: ST_TO_ADDR
// minersList := [ ] ;
23177: LD_ADDR_EXP 110
23181: PUSH
23182: EMPTY
23183: ST_TO_ADDR
// minerMinesList := [ ] ;
23184: LD_ADDR_EXP 111
23188: PUSH
23189: EMPTY
23190: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23191: LD_ADDR_EXP 112
23195: PUSH
23196: LD_INT 5
23198: ST_TO_ADDR
// end ;
23199: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23200: LD_EXP 109
23204: PUSH
23205: LD_INT 34
23207: PUSH
23208: LD_EXP 31
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: PPUSH
23217: CALL_OW 69
23221: AND
23222: IFFALSE 23685
23224: GO 23226
23226: DISABLE
23227: LD_INT 0
23229: PPUSH
23230: PPUSH
23231: PPUSH
23232: PPUSH
// begin enable ;
23233: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23234: LD_ADDR_VAR 0 1
23238: PUSH
23239: LD_INT 34
23241: PUSH
23242: LD_EXP 31
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: PUSH
23256: FOR_IN
23257: IFFALSE 23329
// begin if not i in minersList then
23259: LD_VAR 0 1
23263: PUSH
23264: LD_EXP 110
23268: IN
23269: NOT
23270: IFFALSE 23327
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23272: LD_ADDR_EXP 110
23276: PUSH
23277: LD_EXP 110
23281: PPUSH
23282: LD_EXP 110
23286: PUSH
23287: LD_INT 1
23289: PLUS
23290: PPUSH
23291: LD_VAR 0 1
23295: PPUSH
23296: CALL_OW 1
23300: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23301: LD_ADDR_EXP 111
23305: PUSH
23306: LD_EXP 111
23310: PPUSH
23311: LD_EXP 111
23315: PUSH
23316: LD_INT 1
23318: PLUS
23319: PPUSH
23320: EMPTY
23321: PPUSH
23322: CALL_OW 1
23326: ST_TO_ADDR
// end end ;
23327: GO 23256
23329: POP
23330: POP
// for i := minerMinesList downto 1 do
23331: LD_ADDR_VAR 0 1
23335: PUSH
23336: DOUBLE
23337: LD_EXP 111
23341: INC
23342: ST_TO_ADDR
23343: LD_INT 1
23345: PUSH
23346: FOR_DOWNTO
23347: IFFALSE 23683
// begin if IsLive ( minersList [ i ] ) then
23349: LD_EXP 110
23353: PUSH
23354: LD_VAR 0 1
23358: ARRAY
23359: PPUSH
23360: CALL_OW 300
23364: IFFALSE 23392
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23366: LD_EXP 110
23370: PUSH
23371: LD_VAR 0 1
23375: ARRAY
23376: PPUSH
23377: LD_EXP 111
23381: PUSH
23382: LD_VAR 0 1
23386: ARRAY
23387: PPUSH
23388: CALL_OW 505
// if not minerMinesList [ i ] then
23392: LD_EXP 111
23396: PUSH
23397: LD_VAR 0 1
23401: ARRAY
23402: NOT
23403: IFFALSE 23407
// continue ;
23405: GO 23346
// for j := minerMinesList [ i ] downto 1 do
23407: LD_ADDR_VAR 0 2
23411: PUSH
23412: DOUBLE
23413: LD_EXP 111
23417: PUSH
23418: LD_VAR 0 1
23422: ARRAY
23423: INC
23424: ST_TO_ADDR
23425: LD_INT 1
23427: PUSH
23428: FOR_DOWNTO
23429: IFFALSE 23679
// begin side := GetSide ( minersList [ i ] ) ;
23431: LD_ADDR_VAR 0 3
23435: PUSH
23436: LD_EXP 110
23440: PUSH
23441: LD_VAR 0 1
23445: ARRAY
23446: PPUSH
23447: CALL_OW 255
23451: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23452: LD_ADDR_VAR 0 4
23456: PUSH
23457: LD_EXP 111
23461: PUSH
23462: LD_VAR 0 1
23466: ARRAY
23467: PUSH
23468: LD_VAR 0 2
23472: ARRAY
23473: PUSH
23474: LD_INT 1
23476: ARRAY
23477: PPUSH
23478: LD_EXP 111
23482: PUSH
23483: LD_VAR 0 1
23487: ARRAY
23488: PUSH
23489: LD_VAR 0 2
23493: ARRAY
23494: PUSH
23495: LD_INT 2
23497: ARRAY
23498: PPUSH
23499: CALL_OW 428
23503: ST_TO_ADDR
// if not tmp then
23504: LD_VAR 0 4
23508: NOT
23509: IFFALSE 23513
// continue ;
23511: GO 23428
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23513: LD_VAR 0 4
23517: PUSH
23518: LD_INT 81
23520: PUSH
23521: LD_VAR 0 3
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PPUSH
23530: CALL_OW 69
23534: IN
23535: PUSH
23536: LD_EXP 111
23540: PUSH
23541: LD_VAR 0 1
23545: ARRAY
23546: PUSH
23547: LD_VAR 0 2
23551: ARRAY
23552: PUSH
23553: LD_INT 1
23555: ARRAY
23556: PPUSH
23557: LD_EXP 111
23561: PUSH
23562: LD_VAR 0 1
23566: ARRAY
23567: PUSH
23568: LD_VAR 0 2
23572: ARRAY
23573: PUSH
23574: LD_INT 2
23576: ARRAY
23577: PPUSH
23578: CALL_OW 458
23582: AND
23583: IFFALSE 23677
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23585: LD_EXP 111
23589: PUSH
23590: LD_VAR 0 1
23594: ARRAY
23595: PUSH
23596: LD_VAR 0 2
23600: ARRAY
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: PPUSH
23606: LD_EXP 111
23610: PUSH
23611: LD_VAR 0 1
23615: ARRAY
23616: PUSH
23617: LD_VAR 0 2
23621: ARRAY
23622: PUSH
23623: LD_INT 2
23625: ARRAY
23626: PPUSH
23627: LD_VAR 0 3
23631: PPUSH
23632: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23636: LD_ADDR_EXP 111
23640: PUSH
23641: LD_EXP 111
23645: PPUSH
23646: LD_VAR 0 1
23650: PPUSH
23651: LD_EXP 111
23655: PUSH
23656: LD_VAR 0 1
23660: ARRAY
23661: PPUSH
23662: LD_VAR 0 2
23666: PPUSH
23667: CALL_OW 3
23671: PPUSH
23672: CALL_OW 1
23676: ST_TO_ADDR
// end ; end ;
23677: GO 23428
23679: POP
23680: POP
// end ;
23681: GO 23346
23683: POP
23684: POP
// end ;
23685: PPOPN 4
23687: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23688: LD_INT 0
23690: PPUSH
23691: PPUSH
// result := false ;
23692: LD_ADDR_VAR 0 4
23696: PUSH
23697: LD_INT 0
23699: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23700: LD_VAR 0 1
23704: PPUSH
23705: CALL_OW 264
23709: PUSH
23710: LD_EXP 31
23714: EQUAL
23715: NOT
23716: IFFALSE 23720
// exit ;
23718: GO 23960
// index := GetElementIndex ( minersList , unit ) ;
23720: LD_ADDR_VAR 0 5
23724: PUSH
23725: LD_EXP 110
23729: PPUSH
23730: LD_VAR 0 1
23734: PPUSH
23735: CALL 29944 0 2
23739: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23740: LD_EXP 111
23744: PUSH
23745: LD_VAR 0 5
23749: ARRAY
23750: PUSH
23751: LD_EXP 112
23755: GREATEREQUAL
23756: IFFALSE 23760
// exit ;
23758: GO 23960
// ComMoveXY ( unit , x , y ) ;
23760: LD_VAR 0 1
23764: PPUSH
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_VAR 0 3
23774: PPUSH
23775: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23779: LD_INT 35
23781: PPUSH
23782: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23786: LD_VAR 0 1
23790: PPUSH
23791: LD_VAR 0 2
23795: PPUSH
23796: LD_VAR 0 3
23800: PPUSH
23801: CALL 60716 0 3
23805: NOT
23806: PUSH
23807: LD_VAR 0 1
23811: PPUSH
23812: CALL_OW 314
23816: AND
23817: IFFALSE 23821
// exit ;
23819: GO 23960
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23821: LD_VAR 0 2
23825: PPUSH
23826: LD_VAR 0 3
23830: PPUSH
23831: CALL_OW 428
23835: PUSH
23836: LD_VAR 0 1
23840: EQUAL
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 314
23851: NOT
23852: AND
23853: IFFALSE 23779
// PlaySoundXY ( x , y , PlantMine ) ;
23855: LD_VAR 0 2
23859: PPUSH
23860: LD_VAR 0 3
23864: PPUSH
23865: LD_STRING PlantMine
23867: PPUSH
23868: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23872: LD_VAR 0 2
23876: PPUSH
23877: LD_VAR 0 3
23881: PPUSH
23882: LD_VAR 0 1
23886: PPUSH
23887: CALL_OW 255
23891: PPUSH
23892: LD_INT 0
23894: PPUSH
23895: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23899: LD_ADDR_EXP 111
23903: PUSH
23904: LD_EXP 111
23908: PPUSH
23909: LD_VAR 0 5
23913: PUSH
23914: LD_EXP 111
23918: PUSH
23919: LD_VAR 0 5
23923: ARRAY
23924: PUSH
23925: LD_INT 1
23927: PLUS
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PPUSH
23933: LD_VAR 0 2
23937: PUSH
23938: LD_VAR 0 3
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PPUSH
23947: CALL 30159 0 3
23951: ST_TO_ADDR
// result := true ;
23952: LD_ADDR_VAR 0 4
23956: PUSH
23957: LD_INT 1
23959: ST_TO_ADDR
// end ;
23960: LD_VAR 0 4
23964: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23965: LD_INT 0
23967: PPUSH
23968: PPUSH
23969: PPUSH
// if not unit in minersList then
23970: LD_VAR 0 1
23974: PUSH
23975: LD_EXP 110
23979: IN
23980: NOT
23981: IFFALSE 23985
// exit ;
23983: GO 24377
// index := GetElementIndex ( minersList , unit ) ;
23985: LD_ADDR_VAR 0 6
23989: PUSH
23990: LD_EXP 110
23994: PPUSH
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL 29944 0 2
24004: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24005: LD_ADDR_VAR 0 5
24009: PUSH
24010: DOUBLE
24011: LD_EXP 111
24015: PUSH
24016: LD_VAR 0 6
24020: ARRAY
24021: INC
24022: ST_TO_ADDR
24023: LD_INT 1
24025: PUSH
24026: FOR_DOWNTO
24027: IFFALSE 24188
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24029: LD_EXP 111
24033: PUSH
24034: LD_VAR 0 6
24038: ARRAY
24039: PUSH
24040: LD_VAR 0 5
24044: ARRAY
24045: PUSH
24046: LD_INT 1
24048: ARRAY
24049: PUSH
24050: LD_VAR 0 2
24054: EQUAL
24055: PUSH
24056: LD_EXP 111
24060: PUSH
24061: LD_VAR 0 6
24065: ARRAY
24066: PUSH
24067: LD_VAR 0 5
24071: ARRAY
24072: PUSH
24073: LD_INT 2
24075: ARRAY
24076: PUSH
24077: LD_VAR 0 3
24081: EQUAL
24082: AND
24083: IFFALSE 24186
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24085: LD_EXP 111
24089: PUSH
24090: LD_VAR 0 6
24094: ARRAY
24095: PUSH
24096: LD_VAR 0 5
24100: ARRAY
24101: PUSH
24102: LD_INT 1
24104: ARRAY
24105: PPUSH
24106: LD_EXP 111
24110: PUSH
24111: LD_VAR 0 6
24115: ARRAY
24116: PUSH
24117: LD_VAR 0 5
24121: ARRAY
24122: PUSH
24123: LD_INT 2
24125: ARRAY
24126: PPUSH
24127: LD_VAR 0 1
24131: PPUSH
24132: CALL_OW 255
24136: PPUSH
24137: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24141: LD_ADDR_EXP 111
24145: PUSH
24146: LD_EXP 111
24150: PPUSH
24151: LD_VAR 0 6
24155: PPUSH
24156: LD_EXP 111
24160: PUSH
24161: LD_VAR 0 6
24165: ARRAY
24166: PPUSH
24167: LD_VAR 0 5
24171: PPUSH
24172: CALL_OW 3
24176: PPUSH
24177: CALL_OW 1
24181: ST_TO_ADDR
// exit ;
24182: POP
24183: POP
24184: GO 24377
// end ; end ;
24186: GO 24026
24188: POP
24189: POP
// for i := minerMinesList [ index ] downto 1 do
24190: LD_ADDR_VAR 0 5
24194: PUSH
24195: DOUBLE
24196: LD_EXP 111
24200: PUSH
24201: LD_VAR 0 6
24205: ARRAY
24206: INC
24207: ST_TO_ADDR
24208: LD_INT 1
24210: PUSH
24211: FOR_DOWNTO
24212: IFFALSE 24375
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24214: LD_EXP 111
24218: PUSH
24219: LD_VAR 0 6
24223: ARRAY
24224: PUSH
24225: LD_VAR 0 5
24229: ARRAY
24230: PUSH
24231: LD_INT 1
24233: ARRAY
24234: PPUSH
24235: LD_EXP 111
24239: PUSH
24240: LD_VAR 0 6
24244: ARRAY
24245: PUSH
24246: LD_VAR 0 5
24250: ARRAY
24251: PUSH
24252: LD_INT 2
24254: ARRAY
24255: PPUSH
24256: LD_VAR 0 2
24260: PPUSH
24261: LD_VAR 0 3
24265: PPUSH
24266: CALL_OW 298
24270: PUSH
24271: LD_INT 6
24273: LESS
24274: IFFALSE 24373
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24276: LD_EXP 111
24280: PUSH
24281: LD_VAR 0 6
24285: ARRAY
24286: PUSH
24287: LD_VAR 0 5
24291: ARRAY
24292: PUSH
24293: LD_INT 1
24295: ARRAY
24296: PPUSH
24297: LD_EXP 111
24301: PUSH
24302: LD_VAR 0 6
24306: ARRAY
24307: PUSH
24308: LD_VAR 0 5
24312: ARRAY
24313: PUSH
24314: LD_INT 2
24316: ARRAY
24317: PPUSH
24318: LD_VAR 0 1
24322: PPUSH
24323: CALL_OW 255
24327: PPUSH
24328: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24332: LD_ADDR_EXP 111
24336: PUSH
24337: LD_EXP 111
24341: PPUSH
24342: LD_VAR 0 6
24346: PPUSH
24347: LD_EXP 111
24351: PUSH
24352: LD_VAR 0 6
24356: ARRAY
24357: PPUSH
24358: LD_VAR 0 5
24362: PPUSH
24363: CALL_OW 3
24367: PPUSH
24368: CALL_OW 1
24372: ST_TO_ADDR
// end ; end ;
24373: GO 24211
24375: POP
24376: POP
// end ;
24377: LD_VAR 0 4
24381: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24382: LD_INT 0
24384: PPUSH
24385: PPUSH
24386: PPUSH
24387: PPUSH
24388: PPUSH
24389: PPUSH
24390: PPUSH
24391: PPUSH
24392: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 264
24402: PUSH
24403: LD_EXP 31
24407: EQUAL
24408: NOT
24409: PUSH
24410: LD_VAR 0 1
24414: PUSH
24415: LD_EXP 110
24419: IN
24420: NOT
24421: OR
24422: IFFALSE 24426
// exit ;
24424: GO 24748
// index := GetElementIndex ( minersList , unit ) ;
24426: LD_ADDR_VAR 0 6
24430: PUSH
24431: LD_EXP 110
24435: PPUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL 29944 0 2
24445: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24446: LD_ADDR_VAR 0 8
24450: PUSH
24451: LD_EXP 112
24455: PUSH
24456: LD_EXP 111
24460: PUSH
24461: LD_VAR 0 6
24465: ARRAY
24466: MINUS
24467: ST_TO_ADDR
// if not minesFreeAmount then
24468: LD_VAR 0 8
24472: NOT
24473: IFFALSE 24477
// exit ;
24475: GO 24748
// tmp := [ ] ;
24477: LD_ADDR_VAR 0 7
24481: PUSH
24482: EMPTY
24483: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24484: LD_ADDR_VAR 0 5
24488: PUSH
24489: DOUBLE
24490: LD_INT 1
24492: DEC
24493: ST_TO_ADDR
24494: LD_VAR 0 8
24498: PUSH
24499: FOR_TO
24500: IFFALSE 24695
// begin _d := rand ( 0 , 5 ) ;
24502: LD_ADDR_VAR 0 11
24506: PUSH
24507: LD_INT 0
24509: PPUSH
24510: LD_INT 5
24512: PPUSH
24513: CALL_OW 12
24517: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24518: LD_ADDR_VAR 0 12
24522: PUSH
24523: LD_INT 2
24525: PPUSH
24526: LD_INT 6
24528: PPUSH
24529: CALL_OW 12
24533: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24534: LD_ADDR_VAR 0 9
24538: PUSH
24539: LD_VAR 0 2
24543: PPUSH
24544: LD_VAR 0 11
24548: PPUSH
24549: LD_VAR 0 12
24553: PPUSH
24554: CALL_OW 272
24558: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24559: LD_ADDR_VAR 0 10
24563: PUSH
24564: LD_VAR 0 3
24568: PPUSH
24569: LD_VAR 0 11
24573: PPUSH
24574: LD_VAR 0 12
24578: PPUSH
24579: CALL_OW 273
24583: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24584: LD_VAR 0 9
24588: PPUSH
24589: LD_VAR 0 10
24593: PPUSH
24594: CALL_OW 488
24598: PUSH
24599: LD_VAR 0 9
24603: PUSH
24604: LD_VAR 0 10
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_VAR 0 7
24617: IN
24618: NOT
24619: AND
24620: PUSH
24621: LD_VAR 0 9
24625: PPUSH
24626: LD_VAR 0 10
24630: PPUSH
24631: CALL_OW 458
24635: NOT
24636: AND
24637: IFFALSE 24679
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24639: LD_ADDR_VAR 0 7
24643: PUSH
24644: LD_VAR 0 7
24648: PPUSH
24649: LD_VAR 0 7
24653: PUSH
24654: LD_INT 1
24656: PLUS
24657: PPUSH
24658: LD_VAR 0 9
24662: PUSH
24663: LD_VAR 0 10
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PPUSH
24672: CALL_OW 1
24676: ST_TO_ADDR
24677: GO 24693
// i := i - 1 ;
24679: LD_ADDR_VAR 0 5
24683: PUSH
24684: LD_VAR 0 5
24688: PUSH
24689: LD_INT 1
24691: MINUS
24692: ST_TO_ADDR
// end ;
24693: GO 24499
24695: POP
24696: POP
// for i in tmp do
24697: LD_ADDR_VAR 0 5
24701: PUSH
24702: LD_VAR 0 7
24706: PUSH
24707: FOR_IN
24708: IFFALSE 24746
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24710: LD_VAR 0 1
24714: PPUSH
24715: LD_VAR 0 5
24719: PUSH
24720: LD_INT 1
24722: ARRAY
24723: PPUSH
24724: LD_VAR 0 5
24728: PUSH
24729: LD_INT 2
24731: ARRAY
24732: PPUSH
24733: CALL 23688 0 3
24737: NOT
24738: IFFALSE 24744
// exit ;
24740: POP
24741: POP
24742: GO 24748
24744: GO 24707
24746: POP
24747: POP
// end ;
24748: LD_VAR 0 4
24752: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24753: LD_INT 0
24755: PPUSH
24756: PPUSH
24757: PPUSH
24758: PPUSH
24759: PPUSH
24760: PPUSH
24761: PPUSH
// if not GetClass ( unit ) = class_sniper then
24762: LD_VAR 0 1
24766: PPUSH
24767: CALL_OW 257
24771: PUSH
24772: LD_INT 5
24774: EQUAL
24775: NOT
24776: IFFALSE 24780
// exit ;
24778: GO 25168
// dist := 8 ;
24780: LD_ADDR_VAR 0 5
24784: PUSH
24785: LD_INT 8
24787: ST_TO_ADDR
// viewRange := 12 ;
24788: LD_ADDR_VAR 0 7
24792: PUSH
24793: LD_INT 12
24795: ST_TO_ADDR
// side := GetSide ( unit ) ;
24796: LD_ADDR_VAR 0 6
24800: PUSH
24801: LD_VAR 0 1
24805: PPUSH
24806: CALL_OW 255
24810: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24811: LD_INT 61
24813: PPUSH
24814: LD_VAR 0 6
24818: PPUSH
24819: CALL_OW 321
24823: PUSH
24824: LD_INT 2
24826: EQUAL
24827: IFFALSE 24837
// viewRange := 16 ;
24829: LD_ADDR_VAR 0 7
24833: PUSH
24834: LD_INT 16
24836: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24837: LD_VAR 0 1
24841: PPUSH
24842: LD_VAR 0 2
24846: PPUSH
24847: LD_VAR 0 3
24851: PPUSH
24852: CALL_OW 297
24856: PUSH
24857: LD_VAR 0 5
24861: GREATER
24862: IFFALSE 24941
// begin ComMoveXY ( unit , x , y ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_VAR 0 2
24873: PPUSH
24874: LD_VAR 0 3
24878: PPUSH
24879: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24883: LD_INT 35
24885: PPUSH
24886: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24890: LD_VAR 0 1
24894: PPUSH
24895: LD_VAR 0 2
24899: PPUSH
24900: LD_VAR 0 3
24904: PPUSH
24905: CALL 60716 0 3
24909: NOT
24910: IFFALSE 24914
// exit ;
24912: GO 25168
// until GetDistUnitXY ( unit , x , y ) < dist ;
24914: LD_VAR 0 1
24918: PPUSH
24919: LD_VAR 0 2
24923: PPUSH
24924: LD_VAR 0 3
24928: PPUSH
24929: CALL_OW 297
24933: PUSH
24934: LD_VAR 0 5
24938: LESS
24939: IFFALSE 24883
// end ; ComTurnXY ( unit , x , y ) ;
24941: LD_VAR 0 1
24945: PPUSH
24946: LD_VAR 0 2
24950: PPUSH
24951: LD_VAR 0 3
24955: PPUSH
24956: CALL_OW 118
// wait ( 5 ) ;
24960: LD_INT 5
24962: PPUSH
24963: CALL_OW 67
// _d := GetDir ( unit ) ;
24967: LD_ADDR_VAR 0 10
24971: PUSH
24972: LD_VAR 0 1
24976: PPUSH
24977: CALL_OW 254
24981: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24982: LD_ADDR_VAR 0 8
24986: PUSH
24987: LD_VAR 0 1
24991: PPUSH
24992: CALL_OW 250
24996: PPUSH
24997: LD_VAR 0 10
25001: PPUSH
25002: LD_VAR 0 5
25006: PPUSH
25007: CALL_OW 272
25011: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25012: LD_ADDR_VAR 0 9
25016: PUSH
25017: LD_VAR 0 1
25021: PPUSH
25022: CALL_OW 251
25026: PPUSH
25027: LD_VAR 0 10
25031: PPUSH
25032: LD_VAR 0 5
25036: PPUSH
25037: CALL_OW 273
25041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25042: LD_VAR 0 8
25046: PPUSH
25047: LD_VAR 0 9
25051: PPUSH
25052: CALL_OW 488
25056: NOT
25057: IFFALSE 25061
// exit ;
25059: GO 25168
// ComAnimCustom ( unit , 1 ) ;
25061: LD_VAR 0 1
25065: PPUSH
25066: LD_INT 1
25068: PPUSH
25069: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25073: LD_VAR 0 8
25077: PPUSH
25078: LD_VAR 0 9
25082: PPUSH
25083: LD_VAR 0 6
25087: PPUSH
25088: LD_VAR 0 7
25092: PPUSH
25093: CALL_OW 330
// repeat wait ( 1 ) ;
25097: LD_INT 1
25099: PPUSH
25100: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25104: LD_VAR 0 1
25108: PPUSH
25109: CALL_OW 316
25113: PUSH
25114: LD_VAR 0 1
25118: PPUSH
25119: CALL_OW 314
25123: OR
25124: PUSH
25125: LD_VAR 0 1
25129: PPUSH
25130: CALL_OW 302
25134: NOT
25135: OR
25136: PUSH
25137: LD_VAR 0 1
25141: PPUSH
25142: CALL_OW 301
25146: OR
25147: IFFALSE 25097
// RemoveSeeing ( _x , _y , side ) ;
25149: LD_VAR 0 8
25153: PPUSH
25154: LD_VAR 0 9
25158: PPUSH
25159: LD_VAR 0 6
25163: PPUSH
25164: CALL_OW 331
// end ; end_of_file
25168: LD_VAR 0 4
25172: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25173: LD_INT 0
25175: PPUSH
25176: PPUSH
// if exist_mode then
25177: LD_VAR 0 2
25181: IFFALSE 25206
// unit := CreateCharacter ( prefix & ident ) else
25183: LD_ADDR_VAR 0 5
25187: PUSH
25188: LD_VAR 0 3
25192: PUSH
25193: LD_VAR 0 1
25197: STR
25198: PPUSH
25199: CALL_OW 34
25203: ST_TO_ADDR
25204: GO 25221
// unit := NewCharacter ( ident ) ;
25206: LD_ADDR_VAR 0 5
25210: PUSH
25211: LD_VAR 0 1
25215: PPUSH
25216: CALL_OW 25
25220: ST_TO_ADDR
// result := unit ;
25221: LD_ADDR_VAR 0 4
25225: PUSH
25226: LD_VAR 0 5
25230: ST_TO_ADDR
// end ;
25231: LD_VAR 0 4
25235: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25236: LD_INT 0
25238: PPUSH
25239: PPUSH
// if not side or not nation then
25240: LD_VAR 0 1
25244: NOT
25245: PUSH
25246: LD_VAR 0 2
25250: NOT
25251: OR
25252: IFFALSE 25256
// exit ;
25254: GO 26024
// case nation of nation_american :
25256: LD_VAR 0 2
25260: PUSH
25261: LD_INT 1
25263: DOUBLE
25264: EQUAL
25265: IFTRUE 25269
25267: GO 25483
25269: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25270: LD_ADDR_VAR 0 4
25274: PUSH
25275: LD_INT 35
25277: PUSH
25278: LD_INT 45
25280: PUSH
25281: LD_INT 46
25283: PUSH
25284: LD_INT 47
25286: PUSH
25287: LD_INT 82
25289: PUSH
25290: LD_INT 83
25292: PUSH
25293: LD_INT 84
25295: PUSH
25296: LD_INT 85
25298: PUSH
25299: LD_INT 86
25301: PUSH
25302: LD_INT 1
25304: PUSH
25305: LD_INT 2
25307: PUSH
25308: LD_INT 6
25310: PUSH
25311: LD_INT 15
25313: PUSH
25314: LD_INT 16
25316: PUSH
25317: LD_INT 7
25319: PUSH
25320: LD_INT 12
25322: PUSH
25323: LD_INT 13
25325: PUSH
25326: LD_INT 10
25328: PUSH
25329: LD_INT 14
25331: PUSH
25332: LD_INT 20
25334: PUSH
25335: LD_INT 21
25337: PUSH
25338: LD_INT 22
25340: PUSH
25341: LD_INT 25
25343: PUSH
25344: LD_INT 32
25346: PUSH
25347: LD_INT 27
25349: PUSH
25350: LD_INT 36
25352: PUSH
25353: LD_INT 69
25355: PUSH
25356: LD_INT 39
25358: PUSH
25359: LD_INT 34
25361: PUSH
25362: LD_INT 40
25364: PUSH
25365: LD_INT 48
25367: PUSH
25368: LD_INT 49
25370: PUSH
25371: LD_INT 50
25373: PUSH
25374: LD_INT 51
25376: PUSH
25377: LD_INT 52
25379: PUSH
25380: LD_INT 53
25382: PUSH
25383: LD_INT 54
25385: PUSH
25386: LD_INT 55
25388: PUSH
25389: LD_INT 56
25391: PUSH
25392: LD_INT 57
25394: PUSH
25395: LD_INT 58
25397: PUSH
25398: LD_INT 59
25400: PUSH
25401: LD_INT 60
25403: PUSH
25404: LD_INT 61
25406: PUSH
25407: LD_INT 62
25409: PUSH
25410: LD_INT 80
25412: PUSH
25413: LD_INT 82
25415: PUSH
25416: LD_INT 83
25418: PUSH
25419: LD_INT 84
25421: PUSH
25422: LD_INT 85
25424: PUSH
25425: LD_INT 86
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: ST_TO_ADDR
25481: GO 25948
25483: LD_INT 2
25485: DOUBLE
25486: EQUAL
25487: IFTRUE 25491
25489: GO 25717
25491: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25492: LD_ADDR_VAR 0 4
25496: PUSH
25497: LD_INT 35
25499: PUSH
25500: LD_INT 45
25502: PUSH
25503: LD_INT 46
25505: PUSH
25506: LD_INT 47
25508: PUSH
25509: LD_INT 82
25511: PUSH
25512: LD_INT 83
25514: PUSH
25515: LD_INT 84
25517: PUSH
25518: LD_INT 85
25520: PUSH
25521: LD_INT 87
25523: PUSH
25524: LD_INT 70
25526: PUSH
25527: LD_INT 1
25529: PUSH
25530: LD_INT 11
25532: PUSH
25533: LD_INT 3
25535: PUSH
25536: LD_INT 4
25538: PUSH
25539: LD_INT 5
25541: PUSH
25542: LD_INT 6
25544: PUSH
25545: LD_INT 15
25547: PUSH
25548: LD_INT 18
25550: PUSH
25551: LD_INT 7
25553: PUSH
25554: LD_INT 17
25556: PUSH
25557: LD_INT 8
25559: PUSH
25560: LD_INT 20
25562: PUSH
25563: LD_INT 21
25565: PUSH
25566: LD_INT 22
25568: PUSH
25569: LD_INT 72
25571: PUSH
25572: LD_INT 26
25574: PUSH
25575: LD_INT 69
25577: PUSH
25578: LD_INT 39
25580: PUSH
25581: LD_INT 40
25583: PUSH
25584: LD_INT 41
25586: PUSH
25587: LD_INT 42
25589: PUSH
25590: LD_INT 43
25592: PUSH
25593: LD_INT 48
25595: PUSH
25596: LD_INT 49
25598: PUSH
25599: LD_INT 50
25601: PUSH
25602: LD_INT 51
25604: PUSH
25605: LD_INT 52
25607: PUSH
25608: LD_INT 53
25610: PUSH
25611: LD_INT 54
25613: PUSH
25614: LD_INT 55
25616: PUSH
25617: LD_INT 56
25619: PUSH
25620: LD_INT 60
25622: PUSH
25623: LD_INT 61
25625: PUSH
25626: LD_INT 62
25628: PUSH
25629: LD_INT 66
25631: PUSH
25632: LD_INT 67
25634: PUSH
25635: LD_INT 68
25637: PUSH
25638: LD_INT 81
25640: PUSH
25641: LD_INT 82
25643: PUSH
25644: LD_INT 83
25646: PUSH
25647: LD_INT 84
25649: PUSH
25650: LD_INT 85
25652: PUSH
25653: LD_INT 87
25655: PUSH
25656: LD_INT 88
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: LIST
25666: LIST
25667: LIST
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: LIST
25681: LIST
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: ST_TO_ADDR
25715: GO 25948
25717: LD_INT 3
25719: DOUBLE
25720: EQUAL
25721: IFTRUE 25725
25723: GO 25947
25725: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25726: LD_ADDR_VAR 0 4
25730: PUSH
25731: LD_INT 46
25733: PUSH
25734: LD_INT 47
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: LD_INT 2
25742: PUSH
25743: LD_INT 82
25745: PUSH
25746: LD_INT 83
25748: PUSH
25749: LD_INT 84
25751: PUSH
25752: LD_INT 85
25754: PUSH
25755: LD_INT 86
25757: PUSH
25758: LD_INT 11
25760: PUSH
25761: LD_INT 9
25763: PUSH
25764: LD_INT 20
25766: PUSH
25767: LD_INT 19
25769: PUSH
25770: LD_INT 21
25772: PUSH
25773: LD_INT 24
25775: PUSH
25776: LD_INT 22
25778: PUSH
25779: LD_INT 25
25781: PUSH
25782: LD_INT 28
25784: PUSH
25785: LD_INT 29
25787: PUSH
25788: LD_INT 30
25790: PUSH
25791: LD_INT 31
25793: PUSH
25794: LD_INT 37
25796: PUSH
25797: LD_INT 38
25799: PUSH
25800: LD_INT 32
25802: PUSH
25803: LD_INT 27
25805: PUSH
25806: LD_INT 33
25808: PUSH
25809: LD_INT 69
25811: PUSH
25812: LD_INT 39
25814: PUSH
25815: LD_INT 34
25817: PUSH
25818: LD_INT 40
25820: PUSH
25821: LD_INT 71
25823: PUSH
25824: LD_INT 23
25826: PUSH
25827: LD_INT 44
25829: PUSH
25830: LD_INT 48
25832: PUSH
25833: LD_INT 49
25835: PUSH
25836: LD_INT 50
25838: PUSH
25839: LD_INT 51
25841: PUSH
25842: LD_INT 52
25844: PUSH
25845: LD_INT 53
25847: PUSH
25848: LD_INT 54
25850: PUSH
25851: LD_INT 55
25853: PUSH
25854: LD_INT 56
25856: PUSH
25857: LD_INT 57
25859: PUSH
25860: LD_INT 58
25862: PUSH
25863: LD_INT 59
25865: PUSH
25866: LD_INT 63
25868: PUSH
25869: LD_INT 64
25871: PUSH
25872: LD_INT 65
25874: PUSH
25875: LD_INT 82
25877: PUSH
25878: LD_INT 83
25880: PUSH
25881: LD_INT 84
25883: PUSH
25884: LD_INT 85
25886: PUSH
25887: LD_INT 86
25889: PUSH
25890: EMPTY
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: ST_TO_ADDR
25945: GO 25948
25947: POP
// if state > - 1 and state < 3 then
25948: LD_VAR 0 3
25952: PUSH
25953: LD_INT 1
25955: NEG
25956: GREATER
25957: PUSH
25958: LD_VAR 0 3
25962: PUSH
25963: LD_INT 3
25965: LESS
25966: AND
25967: IFFALSE 26024
// for i in result do
25969: LD_ADDR_VAR 0 5
25973: PUSH
25974: LD_VAR 0 4
25978: PUSH
25979: FOR_IN
25980: IFFALSE 26022
// if GetTech ( i , side ) <> state then
25982: LD_VAR 0 5
25986: PPUSH
25987: LD_VAR 0 1
25991: PPUSH
25992: CALL_OW 321
25996: PUSH
25997: LD_VAR 0 3
26001: NONEQUAL
26002: IFFALSE 26020
// result := result diff i ;
26004: LD_ADDR_VAR 0 4
26008: PUSH
26009: LD_VAR 0 4
26013: PUSH
26014: LD_VAR 0 5
26018: DIFF
26019: ST_TO_ADDR
26020: GO 25979
26022: POP
26023: POP
// end ;
26024: LD_VAR 0 4
26028: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26029: LD_INT 0
26031: PPUSH
26032: PPUSH
26033: PPUSH
// result := true ;
26034: LD_ADDR_VAR 0 3
26038: PUSH
26039: LD_INT 1
26041: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26042: LD_ADDR_VAR 0 5
26046: PUSH
26047: LD_VAR 0 2
26051: PPUSH
26052: CALL_OW 480
26056: ST_TO_ADDR
// if not tmp then
26057: LD_VAR 0 5
26061: NOT
26062: IFFALSE 26066
// exit ;
26064: GO 26115
// for i in tmp do
26066: LD_ADDR_VAR 0 4
26070: PUSH
26071: LD_VAR 0 5
26075: PUSH
26076: FOR_IN
26077: IFFALSE 26113
// if GetTech ( i , side ) <> state_researched then
26079: LD_VAR 0 4
26083: PPUSH
26084: LD_VAR 0 1
26088: PPUSH
26089: CALL_OW 321
26093: PUSH
26094: LD_INT 2
26096: NONEQUAL
26097: IFFALSE 26111
// begin result := false ;
26099: LD_ADDR_VAR 0 3
26103: PUSH
26104: LD_INT 0
26106: ST_TO_ADDR
// exit ;
26107: POP
26108: POP
26109: GO 26115
// end ;
26111: GO 26076
26113: POP
26114: POP
// end ;
26115: LD_VAR 0 3
26119: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
26125: PPUSH
26126: PPUSH
26127: PPUSH
26128: PPUSH
26129: PPUSH
26130: PPUSH
26131: PPUSH
26132: PPUSH
26133: PPUSH
26134: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26135: LD_VAR 0 1
26139: NOT
26140: PUSH
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 257
26150: PUSH
26151: LD_INT 9
26153: NONEQUAL
26154: OR
26155: IFFALSE 26159
// exit ;
26157: GO 26732
// side := GetSide ( unit ) ;
26159: LD_ADDR_VAR 0 9
26163: PUSH
26164: LD_VAR 0 1
26168: PPUSH
26169: CALL_OW 255
26173: ST_TO_ADDR
// tech_space := tech_spacanom ;
26174: LD_ADDR_VAR 0 12
26178: PUSH
26179: LD_INT 29
26181: ST_TO_ADDR
// tech_time := tech_taurad ;
26182: LD_ADDR_VAR 0 13
26186: PUSH
26187: LD_INT 28
26189: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26190: LD_ADDR_VAR 0 11
26194: PUSH
26195: LD_VAR 0 1
26199: PPUSH
26200: CALL_OW 310
26204: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26205: LD_VAR 0 11
26209: PPUSH
26210: CALL_OW 247
26214: PUSH
26215: LD_INT 2
26217: EQUAL
26218: IFFALSE 26222
// exit ;
26220: GO 26732
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26222: LD_ADDR_VAR 0 8
26226: PUSH
26227: LD_INT 81
26229: PUSH
26230: LD_VAR 0 9
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 3
26241: PUSH
26242: LD_INT 21
26244: PUSH
26245: LD_INT 3
26247: PUSH
26248: EMPTY
26249: LIST
26250: LIST
26251: PUSH
26252: EMPTY
26253: LIST
26254: LIST
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PPUSH
26260: CALL_OW 69
26264: ST_TO_ADDR
// if not tmp then
26265: LD_VAR 0 8
26269: NOT
26270: IFFALSE 26274
// exit ;
26272: GO 26732
// if in_unit then
26274: LD_VAR 0 11
26278: IFFALSE 26302
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26280: LD_ADDR_VAR 0 10
26284: PUSH
26285: LD_VAR 0 8
26289: PPUSH
26290: LD_VAR 0 11
26294: PPUSH
26295: CALL_OW 74
26299: ST_TO_ADDR
26300: GO 26322
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26302: LD_ADDR_VAR 0 10
26306: PUSH
26307: LD_VAR 0 8
26311: PPUSH
26312: LD_VAR 0 1
26316: PPUSH
26317: CALL_OW 74
26321: ST_TO_ADDR
// if not enemy then
26322: LD_VAR 0 10
26326: NOT
26327: IFFALSE 26331
// exit ;
26329: GO 26732
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26331: LD_VAR 0 11
26335: PUSH
26336: LD_VAR 0 11
26340: PPUSH
26341: LD_VAR 0 10
26345: PPUSH
26346: CALL_OW 296
26350: PUSH
26351: LD_INT 13
26353: GREATER
26354: AND
26355: PUSH
26356: LD_VAR 0 1
26360: PPUSH
26361: LD_VAR 0 10
26365: PPUSH
26366: CALL_OW 296
26370: PUSH
26371: LD_INT 12
26373: GREATER
26374: OR
26375: IFFALSE 26379
// exit ;
26377: GO 26732
// missile := [ 1 ] ;
26379: LD_ADDR_VAR 0 14
26383: PUSH
26384: LD_INT 1
26386: PUSH
26387: EMPTY
26388: LIST
26389: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26390: LD_VAR 0 9
26394: PPUSH
26395: LD_VAR 0 12
26399: PPUSH
26400: CALL_OW 325
26404: IFFALSE 26433
// missile := Insert ( missile , missile + 1 , 2 ) ;
26406: LD_ADDR_VAR 0 14
26410: PUSH
26411: LD_VAR 0 14
26415: PPUSH
26416: LD_VAR 0 14
26420: PUSH
26421: LD_INT 1
26423: PLUS
26424: PPUSH
26425: LD_INT 2
26427: PPUSH
26428: CALL_OW 2
26432: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26433: LD_VAR 0 9
26437: PPUSH
26438: LD_VAR 0 13
26442: PPUSH
26443: CALL_OW 325
26447: PUSH
26448: LD_VAR 0 10
26452: PPUSH
26453: CALL_OW 255
26457: PPUSH
26458: LD_VAR 0 13
26462: PPUSH
26463: CALL_OW 325
26467: NOT
26468: AND
26469: IFFALSE 26498
// missile := Insert ( missile , missile + 1 , 3 ) ;
26471: LD_ADDR_VAR 0 14
26475: PUSH
26476: LD_VAR 0 14
26480: PPUSH
26481: LD_VAR 0 14
26485: PUSH
26486: LD_INT 1
26488: PLUS
26489: PPUSH
26490: LD_INT 3
26492: PPUSH
26493: CALL_OW 2
26497: ST_TO_ADDR
// if missile < 2 then
26498: LD_VAR 0 14
26502: PUSH
26503: LD_INT 2
26505: LESS
26506: IFFALSE 26510
// exit ;
26508: GO 26732
// x := GetX ( enemy ) ;
26510: LD_ADDR_VAR 0 4
26514: PUSH
26515: LD_VAR 0 10
26519: PPUSH
26520: CALL_OW 250
26524: ST_TO_ADDR
// y := GetY ( enemy ) ;
26525: LD_ADDR_VAR 0 5
26529: PUSH
26530: LD_VAR 0 10
26534: PPUSH
26535: CALL_OW 251
26539: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26540: LD_ADDR_VAR 0 6
26544: PUSH
26545: LD_VAR 0 4
26549: PUSH
26550: LD_INT 1
26552: NEG
26553: PPUSH
26554: LD_INT 1
26556: PPUSH
26557: CALL_OW 12
26561: PLUS
26562: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26563: LD_ADDR_VAR 0 7
26567: PUSH
26568: LD_VAR 0 5
26572: PUSH
26573: LD_INT 1
26575: NEG
26576: PPUSH
26577: LD_INT 1
26579: PPUSH
26580: CALL_OW 12
26584: PLUS
26585: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26586: LD_VAR 0 6
26590: PPUSH
26591: LD_VAR 0 7
26595: PPUSH
26596: CALL_OW 488
26600: NOT
26601: IFFALSE 26623
// begin _x := x ;
26603: LD_ADDR_VAR 0 6
26607: PUSH
26608: LD_VAR 0 4
26612: ST_TO_ADDR
// _y := y ;
26613: LD_ADDR_VAR 0 7
26617: PUSH
26618: LD_VAR 0 5
26622: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26623: LD_ADDR_VAR 0 3
26627: PUSH
26628: LD_INT 1
26630: PPUSH
26631: LD_VAR 0 14
26635: PPUSH
26636: CALL_OW 12
26640: ST_TO_ADDR
// case i of 1 :
26641: LD_VAR 0 3
26645: PUSH
26646: LD_INT 1
26648: DOUBLE
26649: EQUAL
26650: IFTRUE 26654
26652: GO 26671
26654: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26655: LD_VAR 0 1
26659: PPUSH
26660: LD_VAR 0 10
26664: PPUSH
26665: CALL_OW 115
26669: GO 26732
26671: LD_INT 2
26673: DOUBLE
26674: EQUAL
26675: IFTRUE 26679
26677: GO 26701
26679: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26680: LD_VAR 0 1
26684: PPUSH
26685: LD_VAR 0 6
26689: PPUSH
26690: LD_VAR 0 7
26694: PPUSH
26695: CALL_OW 153
26699: GO 26732
26701: LD_INT 3
26703: DOUBLE
26704: EQUAL
26705: IFTRUE 26709
26707: GO 26731
26709: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26710: LD_VAR 0 1
26714: PPUSH
26715: LD_VAR 0 6
26719: PPUSH
26720: LD_VAR 0 7
26724: PPUSH
26725: CALL_OW 154
26729: GO 26732
26731: POP
// end ;
26732: LD_VAR 0 2
26736: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26737: LD_INT 0
26739: PPUSH
26740: PPUSH
26741: PPUSH
26742: PPUSH
26743: PPUSH
26744: PPUSH
// if not unit or not building then
26745: LD_VAR 0 1
26749: NOT
26750: PUSH
26751: LD_VAR 0 2
26755: NOT
26756: OR
26757: IFFALSE 26761
// exit ;
26759: GO 26919
// x := GetX ( building ) ;
26761: LD_ADDR_VAR 0 5
26765: PUSH
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 250
26775: ST_TO_ADDR
// y := GetY ( building ) ;
26776: LD_ADDR_VAR 0 6
26780: PUSH
26781: LD_VAR 0 2
26785: PPUSH
26786: CALL_OW 251
26790: ST_TO_ADDR
// for i = 0 to 5 do
26791: LD_ADDR_VAR 0 4
26795: PUSH
26796: DOUBLE
26797: LD_INT 0
26799: DEC
26800: ST_TO_ADDR
26801: LD_INT 5
26803: PUSH
26804: FOR_TO
26805: IFFALSE 26917
// begin _x := ShiftX ( x , i , 3 ) ;
26807: LD_ADDR_VAR 0 7
26811: PUSH
26812: LD_VAR 0 5
26816: PPUSH
26817: LD_VAR 0 4
26821: PPUSH
26822: LD_INT 3
26824: PPUSH
26825: CALL_OW 272
26829: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26830: LD_ADDR_VAR 0 8
26834: PUSH
26835: LD_VAR 0 6
26839: PPUSH
26840: LD_VAR 0 4
26844: PPUSH
26845: LD_INT 3
26847: PPUSH
26848: CALL_OW 273
26852: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26853: LD_VAR 0 7
26857: PPUSH
26858: LD_VAR 0 8
26862: PPUSH
26863: CALL_OW 488
26867: NOT
26868: IFFALSE 26872
// continue ;
26870: GO 26804
// if HexInfo ( _x , _y ) = 0 then
26872: LD_VAR 0 7
26876: PPUSH
26877: LD_VAR 0 8
26881: PPUSH
26882: CALL_OW 428
26886: PUSH
26887: LD_INT 0
26889: EQUAL
26890: IFFALSE 26915
// begin ComMoveXY ( unit , _x , _y ) ;
26892: LD_VAR 0 1
26896: PPUSH
26897: LD_VAR 0 7
26901: PPUSH
26902: LD_VAR 0 8
26906: PPUSH
26907: CALL_OW 111
// exit ;
26911: POP
26912: POP
26913: GO 26919
// end ; end ;
26915: GO 26804
26917: POP
26918: POP
// end ;
26919: LD_VAR 0 3
26923: RET
// export function ScanBase ( side , base_area ) ; begin
26924: LD_INT 0
26926: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26927: LD_ADDR_VAR 0 3
26931: PUSH
26932: LD_VAR 0 2
26936: PPUSH
26937: LD_INT 81
26939: PUSH
26940: LD_VAR 0 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PPUSH
26949: CALL_OW 70
26953: ST_TO_ADDR
// end ;
26954: LD_VAR 0 3
26958: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26959: LD_INT 0
26961: PPUSH
26962: PPUSH
26963: PPUSH
26964: PPUSH
// result := false ;
26965: LD_ADDR_VAR 0 2
26969: PUSH
26970: LD_INT 0
26972: ST_TO_ADDR
// side := GetSide ( unit ) ;
26973: LD_ADDR_VAR 0 3
26977: PUSH
26978: LD_VAR 0 1
26982: PPUSH
26983: CALL_OW 255
26987: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26988: LD_ADDR_VAR 0 4
26992: PUSH
26993: LD_VAR 0 1
26997: PPUSH
26998: CALL_OW 248
27002: ST_TO_ADDR
// case nat of 1 :
27003: LD_VAR 0 4
27007: PUSH
27008: LD_INT 1
27010: DOUBLE
27011: EQUAL
27012: IFTRUE 27016
27014: GO 27027
27016: POP
// tech := tech_lassight ; 2 :
27017: LD_ADDR_VAR 0 5
27021: PUSH
27022: LD_INT 12
27024: ST_TO_ADDR
27025: GO 27066
27027: LD_INT 2
27029: DOUBLE
27030: EQUAL
27031: IFTRUE 27035
27033: GO 27046
27035: POP
// tech := tech_mortar ; 3 :
27036: LD_ADDR_VAR 0 5
27040: PUSH
27041: LD_INT 41
27043: ST_TO_ADDR
27044: GO 27066
27046: LD_INT 3
27048: DOUBLE
27049: EQUAL
27050: IFTRUE 27054
27052: GO 27065
27054: POP
// tech := tech_bazooka ; end ;
27055: LD_ADDR_VAR 0 5
27059: PUSH
27060: LD_INT 44
27062: ST_TO_ADDR
27063: GO 27066
27065: POP
// if Researched ( side , tech ) then
27066: LD_VAR 0 3
27070: PPUSH
27071: LD_VAR 0 5
27075: PPUSH
27076: CALL_OW 325
27080: IFFALSE 27107
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27082: LD_ADDR_VAR 0 2
27086: PUSH
27087: LD_INT 5
27089: PUSH
27090: LD_INT 8
27092: PUSH
27093: LD_INT 9
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: LD_VAR 0 4
27105: ARRAY
27106: ST_TO_ADDR
// end ;
27107: LD_VAR 0 2
27111: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27112: LD_INT 0
27114: PPUSH
27115: PPUSH
27116: PPUSH
// if not mines then
27117: LD_VAR 0 2
27121: NOT
27122: IFFALSE 27126
// exit ;
27124: GO 27270
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27126: LD_ADDR_VAR 0 5
27130: PUSH
27131: LD_INT 81
27133: PUSH
27134: LD_VAR 0 1
27138: PUSH
27139: EMPTY
27140: LIST
27141: LIST
27142: PUSH
27143: LD_INT 3
27145: PUSH
27146: LD_INT 21
27148: PUSH
27149: LD_INT 3
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: PPUSH
27164: CALL_OW 69
27168: ST_TO_ADDR
// for i in mines do
27169: LD_ADDR_VAR 0 4
27173: PUSH
27174: LD_VAR 0 2
27178: PUSH
27179: FOR_IN
27180: IFFALSE 27268
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27182: LD_VAR 0 4
27186: PUSH
27187: LD_INT 1
27189: ARRAY
27190: PPUSH
27191: LD_VAR 0 4
27195: PUSH
27196: LD_INT 2
27198: ARRAY
27199: PPUSH
27200: CALL_OW 458
27204: NOT
27205: IFFALSE 27209
// continue ;
27207: GO 27179
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27209: LD_VAR 0 4
27213: PUSH
27214: LD_INT 1
27216: ARRAY
27217: PPUSH
27218: LD_VAR 0 4
27222: PUSH
27223: LD_INT 2
27225: ARRAY
27226: PPUSH
27227: CALL_OW 428
27231: PUSH
27232: LD_VAR 0 5
27236: IN
27237: IFFALSE 27266
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27239: LD_VAR 0 4
27243: PUSH
27244: LD_INT 1
27246: ARRAY
27247: PPUSH
27248: LD_VAR 0 4
27252: PUSH
27253: LD_INT 2
27255: ARRAY
27256: PPUSH
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 456
// end ;
27266: GO 27179
27268: POP
27269: POP
// end ;
27270: LD_VAR 0 3
27274: RET
// export function Count ( array ) ; var i ; begin
27275: LD_INT 0
27277: PPUSH
27278: PPUSH
// result := 0 ;
27279: LD_ADDR_VAR 0 2
27283: PUSH
27284: LD_INT 0
27286: ST_TO_ADDR
// for i in array do
27287: LD_ADDR_VAR 0 3
27291: PUSH
27292: LD_VAR 0 1
27296: PUSH
27297: FOR_IN
27298: IFFALSE 27322
// if i then
27300: LD_VAR 0 3
27304: IFFALSE 27320
// result := result + 1 ;
27306: LD_ADDR_VAR 0 2
27310: PUSH
27311: LD_VAR 0 2
27315: PUSH
27316: LD_INT 1
27318: PLUS
27319: ST_TO_ADDR
27320: GO 27297
27322: POP
27323: POP
// end ;
27324: LD_VAR 0 2
27328: RET
// export function IsEmpty ( building ) ; begin
27329: LD_INT 0
27331: PPUSH
// if not building then
27332: LD_VAR 0 1
27336: NOT
27337: IFFALSE 27341
// exit ;
27339: GO 27384
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: LD_VAR 0 1
27350: PUSH
27351: LD_INT 22
27353: PUSH
27354: LD_VAR 0 1
27358: PPUSH
27359: CALL_OW 255
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 58
27370: PUSH
27371: EMPTY
27372: LIST
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PPUSH
27378: CALL_OW 69
27382: IN
27383: ST_TO_ADDR
// end ;
27384: LD_VAR 0 2
27388: RET
// export function IsNotFull ( building ) ; begin
27389: LD_INT 0
27391: PPUSH
// if not building then
27392: LD_VAR 0 1
27396: NOT
27397: IFFALSE 27401
// exit ;
27399: GO 27420
// result := UnitsInside ( building ) < 6 ;
27401: LD_ADDR_VAR 0 2
27405: PUSH
27406: LD_VAR 0 1
27410: PPUSH
27411: CALL_OW 313
27415: PUSH
27416: LD_INT 6
27418: LESS
27419: ST_TO_ADDR
// end ;
27420: LD_VAR 0 2
27424: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27425: LD_INT 0
27427: PPUSH
27428: PPUSH
27429: PPUSH
27430: PPUSH
// tmp := [ ] ;
27431: LD_ADDR_VAR 0 3
27435: PUSH
27436: EMPTY
27437: ST_TO_ADDR
// list := [ ] ;
27438: LD_ADDR_VAR 0 5
27442: PUSH
27443: EMPTY
27444: ST_TO_ADDR
// for i = 16 to 25 do
27445: LD_ADDR_VAR 0 4
27449: PUSH
27450: DOUBLE
27451: LD_INT 16
27453: DEC
27454: ST_TO_ADDR
27455: LD_INT 25
27457: PUSH
27458: FOR_TO
27459: IFFALSE 27532
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27461: LD_ADDR_VAR 0 3
27465: PUSH
27466: LD_VAR 0 3
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_VAR 0 1
27478: PPUSH
27479: CALL_OW 255
27483: PUSH
27484: EMPTY
27485: LIST
27486: LIST
27487: PUSH
27488: LD_INT 91
27490: PUSH
27491: LD_VAR 0 1
27495: PUSH
27496: LD_INT 6
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: PUSH
27504: LD_INT 30
27506: PUSH
27507: LD_VAR 0 4
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: LIST
27520: PUSH
27521: EMPTY
27522: LIST
27523: PPUSH
27524: CALL_OW 69
27528: ADD
27529: ST_TO_ADDR
27530: GO 27458
27532: POP
27533: POP
// for i = 1 to tmp do
27534: LD_ADDR_VAR 0 4
27538: PUSH
27539: DOUBLE
27540: LD_INT 1
27542: DEC
27543: ST_TO_ADDR
27544: LD_VAR 0 3
27548: PUSH
27549: FOR_TO
27550: IFFALSE 27638
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27552: LD_ADDR_VAR 0 5
27556: PUSH
27557: LD_VAR 0 5
27561: PUSH
27562: LD_VAR 0 3
27566: PUSH
27567: LD_VAR 0 4
27571: ARRAY
27572: PPUSH
27573: CALL_OW 266
27577: PUSH
27578: LD_VAR 0 3
27582: PUSH
27583: LD_VAR 0 4
27587: ARRAY
27588: PPUSH
27589: CALL_OW 250
27593: PUSH
27594: LD_VAR 0 3
27598: PUSH
27599: LD_VAR 0 4
27603: ARRAY
27604: PPUSH
27605: CALL_OW 251
27609: PUSH
27610: LD_VAR 0 3
27614: PUSH
27615: LD_VAR 0 4
27619: ARRAY
27620: PPUSH
27621: CALL_OW 254
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: PUSH
27632: EMPTY
27633: LIST
27634: ADD
27635: ST_TO_ADDR
27636: GO 27549
27638: POP
27639: POP
// result := list ;
27640: LD_ADDR_VAR 0 2
27644: PUSH
27645: LD_VAR 0 5
27649: ST_TO_ADDR
// end ;
27650: LD_VAR 0 2
27654: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
27659: PPUSH
27660: PPUSH
27661: PPUSH
27662: PPUSH
27663: PPUSH
// if not factory then
27664: LD_VAR 0 1
27668: NOT
27669: IFFALSE 27673
// exit ;
27671: GO 28266
// if control = control_apeman then
27673: LD_VAR 0 4
27677: PUSH
27678: LD_INT 5
27680: EQUAL
27681: IFFALSE 27790
// begin tmp := UnitsInside ( factory ) ;
27683: LD_ADDR_VAR 0 8
27687: PUSH
27688: LD_VAR 0 1
27692: PPUSH
27693: CALL_OW 313
27697: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27698: LD_VAR 0 8
27702: PPUSH
27703: LD_INT 25
27705: PUSH
27706: LD_INT 12
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PPUSH
27713: CALL_OW 72
27717: NOT
27718: IFFALSE 27728
// control := control_manual ;
27720: LD_ADDR_VAR 0 4
27724: PUSH
27725: LD_INT 1
27727: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27728: LD_ADDR_VAR 0 8
27732: PUSH
27733: LD_VAR 0 1
27737: PPUSH
27738: CALL 27425 0 1
27742: ST_TO_ADDR
// if tmp then
27743: LD_VAR 0 8
27747: IFFALSE 27790
// begin for i in tmp do
27749: LD_ADDR_VAR 0 7
27753: PUSH
27754: LD_VAR 0 8
27758: PUSH
27759: FOR_IN
27760: IFFALSE 27788
// if i [ 1 ] = b_ext_radio then
27762: LD_VAR 0 7
27766: PUSH
27767: LD_INT 1
27769: ARRAY
27770: PUSH
27771: LD_INT 22
27773: EQUAL
27774: IFFALSE 27786
// begin control := control_remote ;
27776: LD_ADDR_VAR 0 4
27780: PUSH
27781: LD_INT 2
27783: ST_TO_ADDR
// break ;
27784: GO 27788
// end ;
27786: GO 27759
27788: POP
27789: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27790: LD_VAR 0 1
27794: PPUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: LD_VAR 0 3
27804: PPUSH
27805: LD_VAR 0 4
27809: PPUSH
27810: LD_VAR 0 5
27814: PPUSH
27815: CALL_OW 448
27819: IFFALSE 27854
// begin result := [ chassis , engine , control , weapon ] ;
27821: LD_ADDR_VAR 0 6
27825: PUSH
27826: LD_VAR 0 2
27830: PUSH
27831: LD_VAR 0 3
27835: PUSH
27836: LD_VAR 0 4
27840: PUSH
27841: LD_VAR 0 5
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: ST_TO_ADDR
// exit ;
27852: GO 28266
// end ; _chassis := AvailableChassisList ( factory ) ;
27854: LD_ADDR_VAR 0 9
27858: PUSH
27859: LD_VAR 0 1
27863: PPUSH
27864: CALL_OW 475
27868: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27869: LD_ADDR_VAR 0 11
27873: PUSH
27874: LD_VAR 0 1
27878: PPUSH
27879: CALL_OW 476
27883: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27884: LD_ADDR_VAR 0 12
27888: PUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 477
27898: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27899: LD_ADDR_VAR 0 10
27903: PUSH
27904: LD_VAR 0 1
27908: PPUSH
27909: CALL_OW 478
27913: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27914: LD_VAR 0 9
27918: NOT
27919: PUSH
27920: LD_VAR 0 11
27924: NOT
27925: OR
27926: PUSH
27927: LD_VAR 0 12
27931: NOT
27932: OR
27933: PUSH
27934: LD_VAR 0 10
27938: NOT
27939: OR
27940: IFFALSE 27975
// begin result := [ chassis , engine , control , weapon ] ;
27942: LD_ADDR_VAR 0 6
27946: PUSH
27947: LD_VAR 0 2
27951: PUSH
27952: LD_VAR 0 3
27956: PUSH
27957: LD_VAR 0 4
27961: PUSH
27962: LD_VAR 0 5
27966: PUSH
27967: EMPTY
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: ST_TO_ADDR
// exit ;
27973: GO 28266
// end ; if not chassis in _chassis then
27975: LD_VAR 0 2
27979: PUSH
27980: LD_VAR 0 9
27984: IN
27985: NOT
27986: IFFALSE 28012
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27988: LD_ADDR_VAR 0 2
27992: PUSH
27993: LD_VAR 0 9
27997: PUSH
27998: LD_INT 1
28000: PPUSH
28001: LD_VAR 0 9
28005: PPUSH
28006: CALL_OW 12
28010: ARRAY
28011: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28012: LD_VAR 0 2
28016: PPUSH
28017: LD_VAR 0 3
28021: PPUSH
28022: CALL 28271 0 2
28026: NOT
28027: IFFALSE 28086
// repeat engine := _engine [ 1 ] ;
28029: LD_ADDR_VAR 0 3
28033: PUSH
28034: LD_VAR 0 11
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28043: LD_ADDR_VAR 0 11
28047: PUSH
28048: LD_VAR 0 11
28052: PPUSH
28053: LD_INT 1
28055: PPUSH
28056: CALL_OW 3
28060: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28061: LD_VAR 0 2
28065: PPUSH
28066: LD_VAR 0 3
28070: PPUSH
28071: CALL 28271 0 2
28075: PUSH
28076: LD_VAR 0 11
28080: PUSH
28081: EMPTY
28082: EQUAL
28083: OR
28084: IFFALSE 28029
// if not control in _control then
28086: LD_VAR 0 4
28090: PUSH
28091: LD_VAR 0 12
28095: IN
28096: NOT
28097: IFFALSE 28123
// control := _control [ rand ( 1 , _control ) ] ;
28099: LD_ADDR_VAR 0 4
28103: PUSH
28104: LD_VAR 0 12
28108: PUSH
28109: LD_INT 1
28111: PPUSH
28112: LD_VAR 0 12
28116: PPUSH
28117: CALL_OW 12
28121: ARRAY
28122: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28123: LD_VAR 0 2
28127: PPUSH
28128: LD_VAR 0 5
28132: PPUSH
28133: CALL 28491 0 2
28137: NOT
28138: IFFALSE 28197
// repeat weapon := _weapon [ 1 ] ;
28140: LD_ADDR_VAR 0 5
28144: PUSH
28145: LD_VAR 0 10
28149: PUSH
28150: LD_INT 1
28152: ARRAY
28153: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28154: LD_ADDR_VAR 0 10
28158: PUSH
28159: LD_VAR 0 10
28163: PPUSH
28164: LD_INT 1
28166: PPUSH
28167: CALL_OW 3
28171: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28172: LD_VAR 0 2
28176: PPUSH
28177: LD_VAR 0 5
28181: PPUSH
28182: CALL 28491 0 2
28186: PUSH
28187: LD_VAR 0 10
28191: PUSH
28192: EMPTY
28193: EQUAL
28194: OR
28195: IFFALSE 28140
// result := [ ] ;
28197: LD_ADDR_VAR 0 6
28201: PUSH
28202: EMPTY
28203: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28204: LD_VAR 0 1
28208: PPUSH
28209: LD_VAR 0 2
28213: PPUSH
28214: LD_VAR 0 3
28218: PPUSH
28219: LD_VAR 0 4
28223: PPUSH
28224: LD_VAR 0 5
28228: PPUSH
28229: CALL_OW 448
28233: IFFALSE 28266
// result := [ chassis , engine , control , weapon ] ;
28235: LD_ADDR_VAR 0 6
28239: PUSH
28240: LD_VAR 0 2
28244: PUSH
28245: LD_VAR 0 3
28249: PUSH
28250: LD_VAR 0 4
28254: PUSH
28255: LD_VAR 0 5
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
// end ;
28266: LD_VAR 0 6
28270: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28271: LD_INT 0
28273: PPUSH
// if not chassis or not engine then
28274: LD_VAR 0 1
28278: NOT
28279: PUSH
28280: LD_VAR 0 2
28284: NOT
28285: OR
28286: IFFALSE 28290
// exit ;
28288: GO 28486
// case engine of engine_solar :
28290: LD_VAR 0 2
28294: PUSH
28295: LD_INT 2
28297: DOUBLE
28298: EQUAL
28299: IFTRUE 28303
28301: GO 28341
28303: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_INT 11
28311: PUSH
28312: LD_INT 12
28314: PUSH
28315: LD_INT 13
28317: PUSH
28318: LD_INT 14
28320: PUSH
28321: LD_INT 1
28323: PUSH
28324: LD_INT 2
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: ST_TO_ADDR
28339: GO 28470
28341: LD_INT 1
28343: DOUBLE
28344: EQUAL
28345: IFTRUE 28349
28347: GO 28411
28349: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28350: LD_ADDR_VAR 0 3
28354: PUSH
28355: LD_INT 11
28357: PUSH
28358: LD_INT 12
28360: PUSH
28361: LD_INT 13
28363: PUSH
28364: LD_INT 14
28366: PUSH
28367: LD_INT 1
28369: PUSH
28370: LD_INT 2
28372: PUSH
28373: LD_INT 3
28375: PUSH
28376: LD_INT 4
28378: PUSH
28379: LD_INT 5
28381: PUSH
28382: LD_INT 21
28384: PUSH
28385: LD_INT 23
28387: PUSH
28388: LD_INT 22
28390: PUSH
28391: LD_INT 24
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: ST_TO_ADDR
28409: GO 28470
28411: LD_INT 3
28413: DOUBLE
28414: EQUAL
28415: IFTRUE 28419
28417: GO 28469
28419: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_INT 13
28427: PUSH
28428: LD_INT 14
28430: PUSH
28431: LD_INT 2
28433: PUSH
28434: LD_INT 3
28436: PUSH
28437: LD_INT 4
28439: PUSH
28440: LD_INT 5
28442: PUSH
28443: LD_INT 21
28445: PUSH
28446: LD_INT 22
28448: PUSH
28449: LD_INT 23
28451: PUSH
28452: LD_INT 24
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: ST_TO_ADDR
28467: GO 28470
28469: POP
// result := ( chassis in result ) ;
28470: LD_ADDR_VAR 0 3
28474: PUSH
28475: LD_VAR 0 1
28479: PUSH
28480: LD_VAR 0 3
28484: IN
28485: ST_TO_ADDR
// end ;
28486: LD_VAR 0 3
28490: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28491: LD_INT 0
28493: PPUSH
// if not chassis or not weapon then
28494: LD_VAR 0 1
28498: NOT
28499: PUSH
28500: LD_VAR 0 2
28504: NOT
28505: OR
28506: IFFALSE 28510
// exit ;
28508: GO 29572
// case weapon of us_machine_gun :
28510: LD_VAR 0 2
28514: PUSH
28515: LD_INT 2
28517: DOUBLE
28518: EQUAL
28519: IFTRUE 28523
28521: GO 28553
28523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28524: LD_ADDR_VAR 0 3
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 3
28537: PUSH
28538: LD_INT 4
28540: PUSH
28541: LD_INT 5
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: LIST
28548: LIST
28549: LIST
28550: ST_TO_ADDR
28551: GO 29556
28553: LD_INT 3
28555: DOUBLE
28556: EQUAL
28557: IFTRUE 28561
28559: GO 28591
28561: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28562: LD_ADDR_VAR 0 3
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: LD_INT 2
28572: PUSH
28573: LD_INT 3
28575: PUSH
28576: LD_INT 4
28578: PUSH
28579: LD_INT 5
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
28589: GO 29556
28591: LD_INT 11
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28629
28599: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_INT 1
28607: PUSH
28608: LD_INT 2
28610: PUSH
28611: LD_INT 3
28613: PUSH
28614: LD_INT 4
28616: PUSH
28617: LD_INT 5
28619: PUSH
28620: EMPTY
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: ST_TO_ADDR
28627: GO 29556
28629: LD_INT 4
28631: DOUBLE
28632: EQUAL
28633: IFTRUE 28637
28635: GO 28663
28637: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28638: LD_ADDR_VAR 0 3
28642: PUSH
28643: LD_INT 2
28645: PUSH
28646: LD_INT 3
28648: PUSH
28649: LD_INT 4
28651: PUSH
28652: LD_INT 5
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: LIST
28659: LIST
28660: ST_TO_ADDR
28661: GO 29556
28663: LD_INT 5
28665: DOUBLE
28666: EQUAL
28667: IFTRUE 28671
28669: GO 28697
28671: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28672: LD_ADDR_VAR 0 3
28676: PUSH
28677: LD_INT 2
28679: PUSH
28680: LD_INT 3
28682: PUSH
28683: LD_INT 4
28685: PUSH
28686: LD_INT 5
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: LIST
28694: ST_TO_ADDR
28695: GO 29556
28697: LD_INT 9
28699: DOUBLE
28700: EQUAL
28701: IFTRUE 28705
28703: GO 28731
28705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_INT 2
28713: PUSH
28714: LD_INT 3
28716: PUSH
28717: LD_INT 4
28719: PUSH
28720: LD_INT 5
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: ST_TO_ADDR
28729: GO 29556
28731: LD_INT 7
28733: DOUBLE
28734: EQUAL
28735: IFTRUE 28739
28737: GO 28765
28739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28740: LD_ADDR_VAR 0 3
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 3
28750: PUSH
28751: LD_INT 4
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: LIST
28761: LIST
28762: ST_TO_ADDR
28763: GO 29556
28765: LD_INT 12
28767: DOUBLE
28768: EQUAL
28769: IFTRUE 28773
28771: GO 28799
28773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28774: LD_ADDR_VAR 0 3
28778: PUSH
28779: LD_INT 2
28781: PUSH
28782: LD_INT 3
28784: PUSH
28785: LD_INT 4
28787: PUSH
28788: LD_INT 5
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: ST_TO_ADDR
28797: GO 29556
28799: LD_INT 13
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28833
28807: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28808: LD_ADDR_VAR 0 3
28812: PUSH
28813: LD_INT 2
28815: PUSH
28816: LD_INT 3
28818: PUSH
28819: LD_INT 4
28821: PUSH
28822: LD_INT 5
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: ST_TO_ADDR
28831: GO 29556
28833: LD_INT 14
28835: DOUBLE
28836: EQUAL
28837: IFTRUE 28841
28839: GO 28859
28841: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28842: LD_ADDR_VAR 0 3
28846: PUSH
28847: LD_INT 4
28849: PUSH
28850: LD_INT 5
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: ST_TO_ADDR
28857: GO 29556
28859: LD_INT 6
28861: DOUBLE
28862: EQUAL
28863: IFTRUE 28867
28865: GO 28885
28867: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28868: LD_ADDR_VAR 0 3
28872: PUSH
28873: LD_INT 4
28875: PUSH
28876: LD_INT 5
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: ST_TO_ADDR
28883: GO 29556
28885: LD_INT 10
28887: DOUBLE
28888: EQUAL
28889: IFTRUE 28893
28891: GO 28911
28893: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28894: LD_ADDR_VAR 0 3
28898: PUSH
28899: LD_INT 4
28901: PUSH
28902: LD_INT 5
28904: PUSH
28905: EMPTY
28906: LIST
28907: LIST
28908: ST_TO_ADDR
28909: GO 29556
28911: LD_INT 22
28913: DOUBLE
28914: EQUAL
28915: IFTRUE 28919
28917: GO 28945
28919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28920: LD_ADDR_VAR 0 3
28924: PUSH
28925: LD_INT 11
28927: PUSH
28928: LD_INT 12
28930: PUSH
28931: LD_INT 13
28933: PUSH
28934: LD_INT 14
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: LIST
28941: LIST
28942: ST_TO_ADDR
28943: GO 29556
28945: LD_INT 23
28947: DOUBLE
28948: EQUAL
28949: IFTRUE 28953
28951: GO 28979
28953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28954: LD_ADDR_VAR 0 3
28958: PUSH
28959: LD_INT 11
28961: PUSH
28962: LD_INT 12
28964: PUSH
28965: LD_INT 13
28967: PUSH
28968: LD_INT 14
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: LIST
28976: ST_TO_ADDR
28977: GO 29556
28979: LD_INT 24
28981: DOUBLE
28982: EQUAL
28983: IFTRUE 28987
28985: GO 29013
28987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28988: LD_ADDR_VAR 0 3
28992: PUSH
28993: LD_INT 11
28995: PUSH
28996: LD_INT 12
28998: PUSH
28999: LD_INT 13
29001: PUSH
29002: LD_INT 14
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: ST_TO_ADDR
29011: GO 29556
29013: LD_INT 30
29015: DOUBLE
29016: EQUAL
29017: IFTRUE 29021
29019: GO 29047
29021: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29022: LD_ADDR_VAR 0 3
29026: PUSH
29027: LD_INT 11
29029: PUSH
29030: LD_INT 12
29032: PUSH
29033: LD_INT 13
29035: PUSH
29036: LD_INT 14
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: LIST
29043: LIST
29044: ST_TO_ADDR
29045: GO 29556
29047: LD_INT 25
29049: DOUBLE
29050: EQUAL
29051: IFTRUE 29055
29053: GO 29073
29055: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29056: LD_ADDR_VAR 0 3
29060: PUSH
29061: LD_INT 13
29063: PUSH
29064: LD_INT 14
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: ST_TO_ADDR
29071: GO 29556
29073: LD_INT 27
29075: DOUBLE
29076: EQUAL
29077: IFTRUE 29081
29079: GO 29099
29081: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29082: LD_ADDR_VAR 0 3
29086: PUSH
29087: LD_INT 13
29089: PUSH
29090: LD_INT 14
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: ST_TO_ADDR
29097: GO 29556
29099: LD_EXP 29
29103: DOUBLE
29104: EQUAL
29105: IFTRUE 29109
29107: GO 29135
29109: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29110: LD_ADDR_VAR 0 3
29114: PUSH
29115: LD_INT 11
29117: PUSH
29118: LD_INT 12
29120: PUSH
29121: LD_INT 13
29123: PUSH
29124: LD_INT 14
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: ST_TO_ADDR
29133: GO 29556
29135: LD_INT 28
29137: DOUBLE
29138: EQUAL
29139: IFTRUE 29143
29141: GO 29161
29143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29144: LD_ADDR_VAR 0 3
29148: PUSH
29149: LD_INT 13
29151: PUSH
29152: LD_INT 14
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: ST_TO_ADDR
29159: GO 29556
29161: LD_INT 29
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29187
29169: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29170: LD_ADDR_VAR 0 3
29174: PUSH
29175: LD_INT 13
29177: PUSH
29178: LD_INT 14
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: ST_TO_ADDR
29185: GO 29556
29187: LD_INT 31
29189: DOUBLE
29190: EQUAL
29191: IFTRUE 29195
29193: GO 29213
29195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29196: LD_ADDR_VAR 0 3
29200: PUSH
29201: LD_INT 13
29203: PUSH
29204: LD_INT 14
29206: PUSH
29207: EMPTY
29208: LIST
29209: LIST
29210: ST_TO_ADDR
29211: GO 29556
29213: LD_INT 26
29215: DOUBLE
29216: EQUAL
29217: IFTRUE 29221
29219: GO 29239
29221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: LD_INT 13
29229: PUSH
29230: LD_INT 14
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: ST_TO_ADDR
29237: GO 29556
29239: LD_INT 42
29241: DOUBLE
29242: EQUAL
29243: IFTRUE 29247
29245: GO 29273
29247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29248: LD_ADDR_VAR 0 3
29252: PUSH
29253: LD_INT 21
29255: PUSH
29256: LD_INT 22
29258: PUSH
29259: LD_INT 23
29261: PUSH
29262: LD_INT 24
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: ST_TO_ADDR
29271: GO 29556
29273: LD_INT 43
29275: DOUBLE
29276: EQUAL
29277: IFTRUE 29281
29279: GO 29307
29281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29282: LD_ADDR_VAR 0 3
29286: PUSH
29287: LD_INT 21
29289: PUSH
29290: LD_INT 22
29292: PUSH
29293: LD_INT 23
29295: PUSH
29296: LD_INT 24
29298: PUSH
29299: EMPTY
29300: LIST
29301: LIST
29302: LIST
29303: LIST
29304: ST_TO_ADDR
29305: GO 29556
29307: LD_INT 44
29309: DOUBLE
29310: EQUAL
29311: IFTRUE 29315
29313: GO 29341
29315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: LD_INT 21
29323: PUSH
29324: LD_INT 22
29326: PUSH
29327: LD_INT 23
29329: PUSH
29330: LD_INT 24
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: ST_TO_ADDR
29339: GO 29556
29341: LD_INT 45
29343: DOUBLE
29344: EQUAL
29345: IFTRUE 29349
29347: GO 29375
29349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29350: LD_ADDR_VAR 0 3
29354: PUSH
29355: LD_INT 21
29357: PUSH
29358: LD_INT 22
29360: PUSH
29361: LD_INT 23
29363: PUSH
29364: LD_INT 24
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: ST_TO_ADDR
29373: GO 29556
29375: LD_INT 49
29377: DOUBLE
29378: EQUAL
29379: IFTRUE 29383
29381: GO 29409
29383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: LD_INT 21
29391: PUSH
29392: LD_INT 22
29394: PUSH
29395: LD_INT 23
29397: PUSH
29398: LD_INT 24
29400: PUSH
29401: EMPTY
29402: LIST
29403: LIST
29404: LIST
29405: LIST
29406: ST_TO_ADDR
29407: GO 29556
29409: LD_INT 51
29411: DOUBLE
29412: EQUAL
29413: IFTRUE 29417
29415: GO 29443
29417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_INT 21
29425: PUSH
29426: LD_INT 22
29428: PUSH
29429: LD_INT 23
29431: PUSH
29432: LD_INT 24
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: ST_TO_ADDR
29441: GO 29556
29443: LD_INT 52
29445: DOUBLE
29446: EQUAL
29447: IFTRUE 29451
29449: GO 29477
29451: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29452: LD_ADDR_VAR 0 3
29456: PUSH
29457: LD_INT 21
29459: PUSH
29460: LD_INT 22
29462: PUSH
29463: LD_INT 23
29465: PUSH
29466: LD_INT 24
29468: PUSH
29469: EMPTY
29470: LIST
29471: LIST
29472: LIST
29473: LIST
29474: ST_TO_ADDR
29475: GO 29556
29477: LD_INT 53
29479: DOUBLE
29480: EQUAL
29481: IFTRUE 29485
29483: GO 29503
29485: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29486: LD_ADDR_VAR 0 3
29490: PUSH
29491: LD_INT 23
29493: PUSH
29494: LD_INT 24
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: ST_TO_ADDR
29501: GO 29556
29503: LD_INT 46
29505: DOUBLE
29506: EQUAL
29507: IFTRUE 29511
29509: GO 29529
29511: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29512: LD_ADDR_VAR 0 3
29516: PUSH
29517: LD_INT 23
29519: PUSH
29520: LD_INT 24
29522: PUSH
29523: EMPTY
29524: LIST
29525: LIST
29526: ST_TO_ADDR
29527: GO 29556
29529: LD_INT 47
29531: DOUBLE
29532: EQUAL
29533: IFTRUE 29537
29535: GO 29555
29537: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29538: LD_ADDR_VAR 0 3
29542: PUSH
29543: LD_INT 23
29545: PUSH
29546: LD_INT 24
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: ST_TO_ADDR
29553: GO 29556
29555: POP
// result := ( chassis in result ) ;
29556: LD_ADDR_VAR 0 3
29560: PUSH
29561: LD_VAR 0 1
29565: PUSH
29566: LD_VAR 0 3
29570: IN
29571: ST_TO_ADDR
// end ;
29572: LD_VAR 0 3
29576: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29577: LD_INT 0
29579: PPUSH
29580: PPUSH
29581: PPUSH
29582: PPUSH
29583: PPUSH
29584: PPUSH
29585: PPUSH
// result := array ;
29586: LD_ADDR_VAR 0 5
29590: PUSH
29591: LD_VAR 0 1
29595: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29596: LD_VAR 0 1
29600: NOT
29601: PUSH
29602: LD_VAR 0 2
29606: NOT
29607: OR
29608: PUSH
29609: LD_VAR 0 3
29613: NOT
29614: OR
29615: PUSH
29616: LD_VAR 0 2
29620: PUSH
29621: LD_VAR 0 1
29625: GREATER
29626: OR
29627: PUSH
29628: LD_VAR 0 3
29632: PUSH
29633: LD_VAR 0 1
29637: GREATER
29638: OR
29639: IFFALSE 29643
// exit ;
29641: GO 29939
// if direction then
29643: LD_VAR 0 4
29647: IFFALSE 29711
// begin d := 1 ;
29649: LD_ADDR_VAR 0 9
29653: PUSH
29654: LD_INT 1
29656: ST_TO_ADDR
// if i_from > i_to then
29657: LD_VAR 0 2
29661: PUSH
29662: LD_VAR 0 3
29666: GREATER
29667: IFFALSE 29693
// length := ( array - i_from ) + i_to else
29669: LD_ADDR_VAR 0 11
29673: PUSH
29674: LD_VAR 0 1
29678: PUSH
29679: LD_VAR 0 2
29683: MINUS
29684: PUSH
29685: LD_VAR 0 3
29689: PLUS
29690: ST_TO_ADDR
29691: GO 29709
// length := i_to - i_from ;
29693: LD_ADDR_VAR 0 11
29697: PUSH
29698: LD_VAR 0 3
29702: PUSH
29703: LD_VAR 0 2
29707: MINUS
29708: ST_TO_ADDR
// end else
29709: GO 29772
// begin d := - 1 ;
29711: LD_ADDR_VAR 0 9
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: ST_TO_ADDR
// if i_from > i_to then
29720: LD_VAR 0 2
29724: PUSH
29725: LD_VAR 0 3
29729: GREATER
29730: IFFALSE 29750
// length := i_from - i_to else
29732: LD_ADDR_VAR 0 11
29736: PUSH
29737: LD_VAR 0 2
29741: PUSH
29742: LD_VAR 0 3
29746: MINUS
29747: ST_TO_ADDR
29748: GO 29772
// length := ( array - i_to ) + i_from ;
29750: LD_ADDR_VAR 0 11
29754: PUSH
29755: LD_VAR 0 1
29759: PUSH
29760: LD_VAR 0 3
29764: MINUS
29765: PUSH
29766: LD_VAR 0 2
29770: PLUS
29771: ST_TO_ADDR
// end ; if not length then
29772: LD_VAR 0 11
29776: NOT
29777: IFFALSE 29781
// exit ;
29779: GO 29939
// tmp := array ;
29781: LD_ADDR_VAR 0 10
29785: PUSH
29786: LD_VAR 0 1
29790: ST_TO_ADDR
// for i = 1 to length do
29791: LD_ADDR_VAR 0 6
29795: PUSH
29796: DOUBLE
29797: LD_INT 1
29799: DEC
29800: ST_TO_ADDR
29801: LD_VAR 0 11
29805: PUSH
29806: FOR_TO
29807: IFFALSE 29927
// begin for j = 1 to array do
29809: LD_ADDR_VAR 0 7
29813: PUSH
29814: DOUBLE
29815: LD_INT 1
29817: DEC
29818: ST_TO_ADDR
29819: LD_VAR 0 1
29823: PUSH
29824: FOR_TO
29825: IFFALSE 29913
// begin k := j + d ;
29827: LD_ADDR_VAR 0 8
29831: PUSH
29832: LD_VAR 0 7
29836: PUSH
29837: LD_VAR 0 9
29841: PLUS
29842: ST_TO_ADDR
// if k > array then
29843: LD_VAR 0 8
29847: PUSH
29848: LD_VAR 0 1
29852: GREATER
29853: IFFALSE 29863
// k := 1 ;
29855: LD_ADDR_VAR 0 8
29859: PUSH
29860: LD_INT 1
29862: ST_TO_ADDR
// if not k then
29863: LD_VAR 0 8
29867: NOT
29868: IFFALSE 29880
// k := array ;
29870: LD_ADDR_VAR 0 8
29874: PUSH
29875: LD_VAR 0 1
29879: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29880: LD_ADDR_VAR 0 10
29884: PUSH
29885: LD_VAR 0 10
29889: PPUSH
29890: LD_VAR 0 8
29894: PPUSH
29895: LD_VAR 0 1
29899: PUSH
29900: LD_VAR 0 7
29904: ARRAY
29905: PPUSH
29906: CALL_OW 1
29910: ST_TO_ADDR
// end ;
29911: GO 29824
29913: POP
29914: POP
// array := tmp ;
29915: LD_ADDR_VAR 0 1
29919: PUSH
29920: LD_VAR 0 10
29924: ST_TO_ADDR
// end ;
29925: GO 29806
29927: POP
29928: POP
// result := array ;
29929: LD_ADDR_VAR 0 5
29933: PUSH
29934: LD_VAR 0 1
29938: ST_TO_ADDR
// end ;
29939: LD_VAR 0 5
29943: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29944: LD_INT 0
29946: PPUSH
29947: PPUSH
// result := 0 ;
29948: LD_ADDR_VAR 0 3
29952: PUSH
29953: LD_INT 0
29955: ST_TO_ADDR
// if not array or not value in array then
29956: LD_VAR 0 1
29960: NOT
29961: PUSH
29962: LD_VAR 0 2
29966: PUSH
29967: LD_VAR 0 1
29971: IN
29972: NOT
29973: OR
29974: IFFALSE 29978
// exit ;
29976: GO 30032
// for i = 1 to array do
29978: LD_ADDR_VAR 0 4
29982: PUSH
29983: DOUBLE
29984: LD_INT 1
29986: DEC
29987: ST_TO_ADDR
29988: LD_VAR 0 1
29992: PUSH
29993: FOR_TO
29994: IFFALSE 30030
// if value = array [ i ] then
29996: LD_VAR 0 2
30000: PUSH
30001: LD_VAR 0 1
30005: PUSH
30006: LD_VAR 0 4
30010: ARRAY
30011: EQUAL
30012: IFFALSE 30028
// begin result := i ;
30014: LD_ADDR_VAR 0 3
30018: PUSH
30019: LD_VAR 0 4
30023: ST_TO_ADDR
// exit ;
30024: POP
30025: POP
30026: GO 30032
// end ;
30028: GO 29993
30030: POP
30031: POP
// end ;
30032: LD_VAR 0 3
30036: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30037: LD_INT 0
30039: PPUSH
// vc_chassis := chassis ;
30040: LD_ADDR_OWVAR 37
30044: PUSH
30045: LD_VAR 0 1
30049: ST_TO_ADDR
// vc_engine := engine ;
30050: LD_ADDR_OWVAR 39
30054: PUSH
30055: LD_VAR 0 2
30059: ST_TO_ADDR
// vc_control := control ;
30060: LD_ADDR_OWVAR 38
30064: PUSH
30065: LD_VAR 0 3
30069: ST_TO_ADDR
// vc_weapon := weapon ;
30070: LD_ADDR_OWVAR 40
30074: PUSH
30075: LD_VAR 0 4
30079: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30080: LD_ADDR_OWVAR 41
30084: PUSH
30085: LD_VAR 0 5
30089: ST_TO_ADDR
// end ;
30090: LD_VAR 0 6
30094: RET
// export function WantPlant ( unit ) ; var task ; begin
30095: LD_INT 0
30097: PPUSH
30098: PPUSH
// result := false ;
30099: LD_ADDR_VAR 0 2
30103: PUSH
30104: LD_INT 0
30106: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30107: LD_ADDR_VAR 0 3
30111: PUSH
30112: LD_VAR 0 1
30116: PPUSH
30117: CALL_OW 437
30121: ST_TO_ADDR
// if task then
30122: LD_VAR 0 3
30126: IFFALSE 30154
// if task [ 1 ] [ 1 ] = p then
30128: LD_VAR 0 3
30132: PUSH
30133: LD_INT 1
30135: ARRAY
30136: PUSH
30137: LD_INT 1
30139: ARRAY
30140: PUSH
30141: LD_STRING p
30143: EQUAL
30144: IFFALSE 30154
// result := true ;
30146: LD_ADDR_VAR 0 2
30150: PUSH
30151: LD_INT 1
30153: ST_TO_ADDR
// end ;
30154: LD_VAR 0 2
30158: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30159: LD_INT 0
30161: PPUSH
30162: PPUSH
30163: PPUSH
30164: PPUSH
// if pos < 1 then
30165: LD_VAR 0 2
30169: PUSH
30170: LD_INT 1
30172: LESS
30173: IFFALSE 30177
// exit ;
30175: GO 30480
// if pos = 1 then
30177: LD_VAR 0 2
30181: PUSH
30182: LD_INT 1
30184: EQUAL
30185: IFFALSE 30218
// result := Replace ( arr , pos [ 1 ] , value ) else
30187: LD_ADDR_VAR 0 4
30191: PUSH
30192: LD_VAR 0 1
30196: PPUSH
30197: LD_VAR 0 2
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: LD_VAR 0 3
30210: PPUSH
30211: CALL_OW 1
30215: ST_TO_ADDR
30216: GO 30480
// begin tmp := arr ;
30218: LD_ADDR_VAR 0 6
30222: PUSH
30223: LD_VAR 0 1
30227: ST_TO_ADDR
// s_arr := [ tmp ] ;
30228: LD_ADDR_VAR 0 7
30232: PUSH
30233: LD_VAR 0 6
30237: PUSH
30238: EMPTY
30239: LIST
30240: ST_TO_ADDR
// for i = 1 to pos - 1 do
30241: LD_ADDR_VAR 0 5
30245: PUSH
30246: DOUBLE
30247: LD_INT 1
30249: DEC
30250: ST_TO_ADDR
30251: LD_VAR 0 2
30255: PUSH
30256: LD_INT 1
30258: MINUS
30259: PUSH
30260: FOR_TO
30261: IFFALSE 30306
// begin tmp := tmp [ pos [ i ] ] ;
30263: LD_ADDR_VAR 0 6
30267: PUSH
30268: LD_VAR 0 6
30272: PUSH
30273: LD_VAR 0 2
30277: PUSH
30278: LD_VAR 0 5
30282: ARRAY
30283: ARRAY
30284: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30285: LD_ADDR_VAR 0 7
30289: PUSH
30290: LD_VAR 0 7
30294: PUSH
30295: LD_VAR 0 6
30299: PUSH
30300: EMPTY
30301: LIST
30302: ADD
30303: ST_TO_ADDR
// end ;
30304: GO 30260
30306: POP
30307: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30308: LD_ADDR_VAR 0 6
30312: PUSH
30313: LD_VAR 0 6
30317: PPUSH
30318: LD_VAR 0 2
30322: PUSH
30323: LD_VAR 0 2
30327: ARRAY
30328: PPUSH
30329: LD_VAR 0 3
30333: PPUSH
30334: CALL_OW 1
30338: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30339: LD_ADDR_VAR 0 7
30343: PUSH
30344: LD_VAR 0 7
30348: PPUSH
30349: LD_VAR 0 7
30353: PPUSH
30354: LD_VAR 0 6
30358: PPUSH
30359: CALL_OW 1
30363: ST_TO_ADDR
// for i = s_arr downto 2 do
30364: LD_ADDR_VAR 0 5
30368: PUSH
30369: DOUBLE
30370: LD_VAR 0 7
30374: INC
30375: ST_TO_ADDR
30376: LD_INT 2
30378: PUSH
30379: FOR_DOWNTO
30380: IFFALSE 30464
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30382: LD_ADDR_VAR 0 6
30386: PUSH
30387: LD_VAR 0 7
30391: PUSH
30392: LD_VAR 0 5
30396: PUSH
30397: LD_INT 1
30399: MINUS
30400: ARRAY
30401: PPUSH
30402: LD_VAR 0 2
30406: PUSH
30407: LD_VAR 0 5
30411: PUSH
30412: LD_INT 1
30414: MINUS
30415: ARRAY
30416: PPUSH
30417: LD_VAR 0 7
30421: PUSH
30422: LD_VAR 0 5
30426: ARRAY
30427: PPUSH
30428: CALL_OW 1
30432: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30433: LD_ADDR_VAR 0 7
30437: PUSH
30438: LD_VAR 0 7
30442: PPUSH
30443: LD_VAR 0 5
30447: PUSH
30448: LD_INT 1
30450: MINUS
30451: PPUSH
30452: LD_VAR 0 6
30456: PPUSH
30457: CALL_OW 1
30461: ST_TO_ADDR
// end ;
30462: GO 30379
30464: POP
30465: POP
// result := s_arr [ 1 ] ;
30466: LD_ADDR_VAR 0 4
30470: PUSH
30471: LD_VAR 0 7
30475: PUSH
30476: LD_INT 1
30478: ARRAY
30479: ST_TO_ADDR
// end ; end ;
30480: LD_VAR 0 4
30484: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30485: LD_INT 0
30487: PPUSH
30488: PPUSH
// if not list then
30489: LD_VAR 0 1
30493: NOT
30494: IFFALSE 30498
// exit ;
30496: GO 30589
// i := list [ pos1 ] ;
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: LD_VAR 0 1
30507: PUSH
30508: LD_VAR 0 2
30512: ARRAY
30513: ST_TO_ADDR
// if not i then
30514: LD_VAR 0 5
30518: NOT
30519: IFFALSE 30523
// exit ;
30521: GO 30589
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30523: LD_ADDR_VAR 0 1
30527: PUSH
30528: LD_VAR 0 1
30532: PPUSH
30533: LD_VAR 0 2
30537: PPUSH
30538: LD_VAR 0 1
30542: PUSH
30543: LD_VAR 0 3
30547: ARRAY
30548: PPUSH
30549: CALL_OW 1
30553: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30554: LD_ADDR_VAR 0 1
30558: PUSH
30559: LD_VAR 0 1
30563: PPUSH
30564: LD_VAR 0 3
30568: PPUSH
30569: LD_VAR 0 5
30573: PPUSH
30574: CALL_OW 1
30578: ST_TO_ADDR
// result := list ;
30579: LD_ADDR_VAR 0 4
30583: PUSH
30584: LD_VAR 0 1
30588: ST_TO_ADDR
// end ;
30589: LD_VAR 0 4
30593: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30594: LD_INT 0
30596: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30597: LD_ADDR_VAR 0 5
30601: PUSH
30602: LD_VAR 0 1
30606: PPUSH
30607: CALL_OW 250
30611: PPUSH
30612: LD_VAR 0 1
30616: PPUSH
30617: CALL_OW 251
30621: PPUSH
30622: LD_VAR 0 2
30626: PPUSH
30627: LD_VAR 0 3
30631: PPUSH
30632: LD_VAR 0 4
30636: PPUSH
30637: CALL 30647 0 5
30641: ST_TO_ADDR
// end ;
30642: LD_VAR 0 5
30646: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
30651: PPUSH
30652: PPUSH
// if not list then
30653: LD_VAR 0 3
30657: NOT
30658: IFFALSE 30662
// exit ;
30660: GO 31050
// result := [ ] ;
30662: LD_ADDR_VAR 0 6
30666: PUSH
30667: EMPTY
30668: ST_TO_ADDR
// for i in list do
30669: LD_ADDR_VAR 0 7
30673: PUSH
30674: LD_VAR 0 3
30678: PUSH
30679: FOR_IN
30680: IFFALSE 30882
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30682: LD_ADDR_VAR 0 9
30686: PUSH
30687: LD_VAR 0 7
30691: PPUSH
30692: LD_VAR 0 1
30696: PPUSH
30697: LD_VAR 0 2
30701: PPUSH
30702: CALL_OW 297
30706: ST_TO_ADDR
// if not result then
30707: LD_VAR 0 6
30711: NOT
30712: IFFALSE 30738
// result := [ [ i , tmp ] ] else
30714: LD_ADDR_VAR 0 6
30718: PUSH
30719: LD_VAR 0 7
30723: PUSH
30724: LD_VAR 0 9
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: ST_TO_ADDR
30736: GO 30880
// begin if result [ result ] [ 2 ] < tmp then
30738: LD_VAR 0 6
30742: PUSH
30743: LD_VAR 0 6
30747: ARRAY
30748: PUSH
30749: LD_INT 2
30751: ARRAY
30752: PUSH
30753: LD_VAR 0 9
30757: LESS
30758: IFFALSE 30800
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30760: LD_ADDR_VAR 0 6
30764: PUSH
30765: LD_VAR 0 6
30769: PPUSH
30770: LD_VAR 0 6
30774: PUSH
30775: LD_INT 1
30777: PLUS
30778: PPUSH
30779: LD_VAR 0 7
30783: PUSH
30784: LD_VAR 0 9
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: PPUSH
30793: CALL_OW 2
30797: ST_TO_ADDR
30798: GO 30880
// for j = 1 to result do
30800: LD_ADDR_VAR 0 8
30804: PUSH
30805: DOUBLE
30806: LD_INT 1
30808: DEC
30809: ST_TO_ADDR
30810: LD_VAR 0 6
30814: PUSH
30815: FOR_TO
30816: IFFALSE 30878
// begin if tmp < result [ j ] [ 2 ] then
30818: LD_VAR 0 9
30822: PUSH
30823: LD_VAR 0 6
30827: PUSH
30828: LD_VAR 0 8
30832: ARRAY
30833: PUSH
30834: LD_INT 2
30836: ARRAY
30837: LESS
30838: IFFALSE 30876
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30840: LD_ADDR_VAR 0 6
30844: PUSH
30845: LD_VAR 0 6
30849: PPUSH
30850: LD_VAR 0 8
30854: PPUSH
30855: LD_VAR 0 7
30859: PUSH
30860: LD_VAR 0 9
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: PPUSH
30869: CALL_OW 2
30873: ST_TO_ADDR
// break ;
30874: GO 30878
// end ; end ;
30876: GO 30815
30878: POP
30879: POP
// end ; end ;
30880: GO 30679
30882: POP
30883: POP
// if result and not asc then
30884: LD_VAR 0 6
30888: PUSH
30889: LD_VAR 0 4
30893: NOT
30894: AND
30895: IFFALSE 30970
// begin tmp := result ;
30897: LD_ADDR_VAR 0 9
30901: PUSH
30902: LD_VAR 0 6
30906: ST_TO_ADDR
// for i = tmp downto 1 do
30907: LD_ADDR_VAR 0 7
30911: PUSH
30912: DOUBLE
30913: LD_VAR 0 9
30917: INC
30918: ST_TO_ADDR
30919: LD_INT 1
30921: PUSH
30922: FOR_DOWNTO
30923: IFFALSE 30968
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30925: LD_ADDR_VAR 0 6
30929: PUSH
30930: LD_VAR 0 6
30934: PPUSH
30935: LD_VAR 0 9
30939: PUSH
30940: LD_VAR 0 7
30944: MINUS
30945: PUSH
30946: LD_INT 1
30948: PLUS
30949: PPUSH
30950: LD_VAR 0 9
30954: PUSH
30955: LD_VAR 0 7
30959: ARRAY
30960: PPUSH
30961: CALL_OW 1
30965: ST_TO_ADDR
30966: GO 30922
30968: POP
30969: POP
// end ; tmp := [ ] ;
30970: LD_ADDR_VAR 0 9
30974: PUSH
30975: EMPTY
30976: ST_TO_ADDR
// if mode then
30977: LD_VAR 0 5
30981: IFFALSE 31050
// begin for i = 1 to result do
30983: LD_ADDR_VAR 0 7
30987: PUSH
30988: DOUBLE
30989: LD_INT 1
30991: DEC
30992: ST_TO_ADDR
30993: LD_VAR 0 6
30997: PUSH
30998: FOR_TO
30999: IFFALSE 31038
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31001: LD_ADDR_VAR 0 9
31005: PUSH
31006: LD_VAR 0 9
31010: PPUSH
31011: LD_VAR 0 7
31015: PPUSH
31016: LD_VAR 0 6
31020: PUSH
31021: LD_VAR 0 7
31025: ARRAY
31026: PUSH
31027: LD_INT 1
31029: ARRAY
31030: PPUSH
31031: CALL_OW 1
31035: ST_TO_ADDR
31036: GO 30998
31038: POP
31039: POP
// result := tmp ;
31040: LD_ADDR_VAR 0 6
31044: PUSH
31045: LD_VAR 0 9
31049: ST_TO_ADDR
// end ; end ;
31050: LD_VAR 0 6
31054: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31055: LD_INT 0
31057: PPUSH
31058: PPUSH
31059: PPUSH
31060: PPUSH
31061: PPUSH
31062: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31063: LD_ADDR_VAR 0 5
31067: PUSH
31068: LD_INT 0
31070: PUSH
31071: LD_INT 0
31073: PUSH
31074: LD_INT 0
31076: PUSH
31077: EMPTY
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: ST_TO_ADDR
// if not x or not y then
31085: LD_VAR 0 2
31089: NOT
31090: PUSH
31091: LD_VAR 0 3
31095: NOT
31096: OR
31097: IFFALSE 31101
// exit ;
31099: GO 32753
// if not range then
31101: LD_VAR 0 4
31105: NOT
31106: IFFALSE 31116
// range := 10 ;
31108: LD_ADDR_VAR 0 4
31112: PUSH
31113: LD_INT 10
31115: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31116: LD_ADDR_VAR 0 8
31120: PUSH
31121: LD_INT 81
31123: PUSH
31124: LD_VAR 0 1
31128: PUSH
31129: EMPTY
31130: LIST
31131: LIST
31132: PUSH
31133: LD_INT 92
31135: PUSH
31136: LD_VAR 0 2
31140: PUSH
31141: LD_VAR 0 3
31145: PUSH
31146: LD_VAR 0 4
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 3
31159: PUSH
31160: LD_INT 21
31162: PUSH
31163: LD_INT 3
31165: PUSH
31166: EMPTY
31167: LIST
31168: LIST
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: PPUSH
31179: CALL_OW 69
31183: ST_TO_ADDR
// if not tmp then
31184: LD_VAR 0 8
31188: NOT
31189: IFFALSE 31193
// exit ;
31191: GO 32753
// for i in tmp do
31193: LD_ADDR_VAR 0 6
31197: PUSH
31198: LD_VAR 0 8
31202: PUSH
31203: FOR_IN
31204: IFFALSE 32728
// begin points := [ 0 , 0 , 0 ] ;
31206: LD_ADDR_VAR 0 9
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: ST_TO_ADDR
// bpoints := 1 ;
31225: LD_ADDR_VAR 0 10
31229: PUSH
31230: LD_INT 1
31232: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31233: LD_VAR 0 6
31237: PPUSH
31238: CALL_OW 247
31242: PUSH
31243: LD_INT 1
31245: DOUBLE
31246: EQUAL
31247: IFTRUE 31251
31249: GO 31829
31251: POP
// begin if GetClass ( i ) = 1 then
31252: LD_VAR 0 6
31256: PPUSH
31257: CALL_OW 257
31261: PUSH
31262: LD_INT 1
31264: EQUAL
31265: IFFALSE 31286
// points := [ 10 , 5 , 3 ] ;
31267: LD_ADDR_VAR 0 9
31271: PUSH
31272: LD_INT 10
31274: PUSH
31275: LD_INT 5
31277: PUSH
31278: LD_INT 3
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31286: LD_VAR 0 6
31290: PPUSH
31291: CALL_OW 257
31295: PUSH
31296: LD_INT 2
31298: PUSH
31299: LD_INT 3
31301: PUSH
31302: LD_INT 4
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: IN
31310: IFFALSE 31331
// points := [ 3 , 2 , 1 ] ;
31312: LD_ADDR_VAR 0 9
31316: PUSH
31317: LD_INT 3
31319: PUSH
31320: LD_INT 2
31322: PUSH
31323: LD_INT 1
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31331: LD_VAR 0 6
31335: PPUSH
31336: CALL_OW 257
31340: PUSH
31341: LD_INT 5
31343: EQUAL
31344: IFFALSE 31365
// points := [ 130 , 5 , 2 ] ;
31346: LD_ADDR_VAR 0 9
31350: PUSH
31351: LD_INT 130
31353: PUSH
31354: LD_INT 5
31356: PUSH
31357: LD_INT 2
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31365: LD_VAR 0 6
31369: PPUSH
31370: CALL_OW 257
31374: PUSH
31375: LD_INT 8
31377: EQUAL
31378: IFFALSE 31399
// points := [ 35 , 35 , 30 ] ;
31380: LD_ADDR_VAR 0 9
31384: PUSH
31385: LD_INT 35
31387: PUSH
31388: LD_INT 35
31390: PUSH
31391: LD_INT 30
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: LIST
31398: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31399: LD_VAR 0 6
31403: PPUSH
31404: CALL_OW 257
31408: PUSH
31409: LD_INT 9
31411: EQUAL
31412: IFFALSE 31433
// points := [ 20 , 55 , 40 ] ;
31414: LD_ADDR_VAR 0 9
31418: PUSH
31419: LD_INT 20
31421: PUSH
31422: LD_INT 55
31424: PUSH
31425: LD_INT 40
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: LIST
31432: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31433: LD_VAR 0 6
31437: PPUSH
31438: CALL_OW 257
31442: PUSH
31443: LD_INT 12
31445: PUSH
31446: LD_INT 16
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: IN
31453: IFFALSE 31474
// points := [ 5 , 3 , 2 ] ;
31455: LD_ADDR_VAR 0 9
31459: PUSH
31460: LD_INT 5
31462: PUSH
31463: LD_INT 3
31465: PUSH
31466: LD_INT 2
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31474: LD_VAR 0 6
31478: PPUSH
31479: CALL_OW 257
31483: PUSH
31484: LD_INT 17
31486: EQUAL
31487: IFFALSE 31508
// points := [ 100 , 50 , 75 ] ;
31489: LD_ADDR_VAR 0 9
31493: PUSH
31494: LD_INT 100
31496: PUSH
31497: LD_INT 50
31499: PUSH
31500: LD_INT 75
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: LIST
31507: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31508: LD_VAR 0 6
31512: PPUSH
31513: CALL_OW 257
31517: PUSH
31518: LD_INT 15
31520: EQUAL
31521: IFFALSE 31542
// points := [ 10 , 5 , 3 ] ;
31523: LD_ADDR_VAR 0 9
31527: PUSH
31528: LD_INT 10
31530: PUSH
31531: LD_INT 5
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31542: LD_VAR 0 6
31546: PPUSH
31547: CALL_OW 257
31551: PUSH
31552: LD_INT 14
31554: EQUAL
31555: IFFALSE 31576
// points := [ 10 , 0 , 0 ] ;
31557: LD_ADDR_VAR 0 9
31561: PUSH
31562: LD_INT 10
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: LD_INT 0
31570: PUSH
31571: EMPTY
31572: LIST
31573: LIST
31574: LIST
31575: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31576: LD_VAR 0 6
31580: PPUSH
31581: CALL_OW 257
31585: PUSH
31586: LD_INT 11
31588: EQUAL
31589: IFFALSE 31610
// points := [ 30 , 10 , 5 ] ;
31591: LD_ADDR_VAR 0 9
31595: PUSH
31596: LD_INT 30
31598: PUSH
31599: LD_INT 10
31601: PUSH
31602: LD_INT 5
31604: PUSH
31605: EMPTY
31606: LIST
31607: LIST
31608: LIST
31609: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31610: LD_VAR 0 1
31614: PPUSH
31615: LD_INT 5
31617: PPUSH
31618: CALL_OW 321
31622: PUSH
31623: LD_INT 2
31625: EQUAL
31626: IFFALSE 31643
// bpoints := bpoints * 1.8 ;
31628: LD_ADDR_VAR 0 10
31632: PUSH
31633: LD_VAR 0 10
31637: PUSH
31638: LD_REAL  1.80000000000000E+0000
31641: MUL
31642: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31643: LD_VAR 0 6
31647: PPUSH
31648: CALL_OW 257
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: LD_INT 2
31658: PUSH
31659: LD_INT 3
31661: PUSH
31662: LD_INT 4
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: IN
31671: PUSH
31672: LD_VAR 0 1
31676: PPUSH
31677: LD_INT 51
31679: PPUSH
31680: CALL_OW 321
31684: PUSH
31685: LD_INT 2
31687: EQUAL
31688: AND
31689: IFFALSE 31706
// bpoints := bpoints * 1.2 ;
31691: LD_ADDR_VAR 0 10
31695: PUSH
31696: LD_VAR 0 10
31700: PUSH
31701: LD_REAL  1.20000000000000E+0000
31704: MUL
31705: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31706: LD_VAR 0 6
31710: PPUSH
31711: CALL_OW 257
31715: PUSH
31716: LD_INT 5
31718: PUSH
31719: LD_INT 7
31721: PUSH
31722: LD_INT 9
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: LIST
31729: IN
31730: PUSH
31731: LD_VAR 0 1
31735: PPUSH
31736: LD_INT 52
31738: PPUSH
31739: CALL_OW 321
31743: PUSH
31744: LD_INT 2
31746: EQUAL
31747: AND
31748: IFFALSE 31765
// bpoints := bpoints * 1.5 ;
31750: LD_ADDR_VAR 0 10
31754: PUSH
31755: LD_VAR 0 10
31759: PUSH
31760: LD_REAL  1.50000000000000E+0000
31763: MUL
31764: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31765: LD_VAR 0 1
31769: PPUSH
31770: LD_INT 66
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: IFFALSE 31798
// bpoints := bpoints * 1.1 ;
31783: LD_ADDR_VAR 0 10
31787: PUSH
31788: LD_VAR 0 10
31792: PUSH
31793: LD_REAL  1.10000000000000E+0000
31796: MUL
31797: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31798: LD_ADDR_VAR 0 10
31802: PUSH
31803: LD_VAR 0 10
31807: PUSH
31808: LD_VAR 0 6
31812: PPUSH
31813: LD_INT 1
31815: PPUSH
31816: CALL_OW 259
31820: PUSH
31821: LD_REAL  1.15000000000000E+0000
31824: MUL
31825: MUL
31826: ST_TO_ADDR
// end ; unit_vehicle :
31827: GO 32657
31829: LD_INT 2
31831: DOUBLE
31832: EQUAL
31833: IFTRUE 31837
31835: GO 32645
31837: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31838: LD_VAR 0 6
31842: PPUSH
31843: CALL_OW 264
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: LD_INT 42
31853: PUSH
31854: LD_INT 24
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: LIST
31861: IN
31862: IFFALSE 31883
// points := [ 25 , 5 , 3 ] ;
31864: LD_ADDR_VAR 0 9
31868: PUSH
31869: LD_INT 25
31871: PUSH
31872: LD_INT 5
31874: PUSH
31875: LD_INT 3
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31883: LD_VAR 0 6
31887: PPUSH
31888: CALL_OW 264
31892: PUSH
31893: LD_INT 4
31895: PUSH
31896: LD_INT 43
31898: PUSH
31899: LD_INT 25
31901: PUSH
31902: EMPTY
31903: LIST
31904: LIST
31905: LIST
31906: IN
31907: IFFALSE 31928
// points := [ 40 , 15 , 5 ] ;
31909: LD_ADDR_VAR 0 9
31913: PUSH
31914: LD_INT 40
31916: PUSH
31917: LD_INT 15
31919: PUSH
31920: LD_INT 5
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31928: LD_VAR 0 6
31932: PPUSH
31933: CALL_OW 264
31937: PUSH
31938: LD_INT 3
31940: PUSH
31941: LD_INT 23
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: IN
31948: IFFALSE 31969
// points := [ 7 , 25 , 8 ] ;
31950: LD_ADDR_VAR 0 9
31954: PUSH
31955: LD_INT 7
31957: PUSH
31958: LD_INT 25
31960: PUSH
31961: LD_INT 8
31963: PUSH
31964: EMPTY
31965: LIST
31966: LIST
31967: LIST
31968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31969: LD_VAR 0 6
31973: PPUSH
31974: CALL_OW 264
31978: PUSH
31979: LD_INT 5
31981: PUSH
31982: LD_INT 27
31984: PUSH
31985: LD_INT 44
31987: PUSH
31988: EMPTY
31989: LIST
31990: LIST
31991: LIST
31992: IN
31993: IFFALSE 32014
// points := [ 14 , 50 , 16 ] ;
31995: LD_ADDR_VAR 0 9
31999: PUSH
32000: LD_INT 14
32002: PUSH
32003: LD_INT 50
32005: PUSH
32006: LD_INT 16
32008: PUSH
32009: EMPTY
32010: LIST
32011: LIST
32012: LIST
32013: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32014: LD_VAR 0 6
32018: PPUSH
32019: CALL_OW 264
32023: PUSH
32024: LD_INT 6
32026: PUSH
32027: LD_INT 46
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: IN
32034: IFFALSE 32055
// points := [ 32 , 120 , 70 ] ;
32036: LD_ADDR_VAR 0 9
32040: PUSH
32041: LD_INT 32
32043: PUSH
32044: LD_INT 120
32046: PUSH
32047: LD_INT 70
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32055: LD_VAR 0 6
32059: PPUSH
32060: CALL_OW 264
32064: PUSH
32065: LD_INT 7
32067: PUSH
32068: LD_INT 28
32070: PUSH
32071: LD_INT 45
32073: PUSH
32074: LD_EXP 29
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: IN
32085: IFFALSE 32106
// points := [ 35 , 20 , 45 ] ;
32087: LD_ADDR_VAR 0 9
32091: PUSH
32092: LD_INT 35
32094: PUSH
32095: LD_INT 20
32097: PUSH
32098: LD_INT 45
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32106: LD_VAR 0 6
32110: PPUSH
32111: CALL_OW 264
32115: PUSH
32116: LD_INT 47
32118: PUSH
32119: EMPTY
32120: LIST
32121: IN
32122: IFFALSE 32143
// points := [ 67 , 45 , 75 ] ;
32124: LD_ADDR_VAR 0 9
32128: PUSH
32129: LD_INT 67
32131: PUSH
32132: LD_INT 45
32134: PUSH
32135: LD_INT 75
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32143: LD_VAR 0 6
32147: PPUSH
32148: CALL_OW 264
32152: PUSH
32153: LD_INT 26
32155: PUSH
32156: EMPTY
32157: LIST
32158: IN
32159: IFFALSE 32180
// points := [ 120 , 30 , 80 ] ;
32161: LD_ADDR_VAR 0 9
32165: PUSH
32166: LD_INT 120
32168: PUSH
32169: LD_INT 30
32171: PUSH
32172: LD_INT 80
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: LIST
32179: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32180: LD_VAR 0 6
32184: PPUSH
32185: CALL_OW 264
32189: PUSH
32190: LD_INT 22
32192: PUSH
32193: EMPTY
32194: LIST
32195: IN
32196: IFFALSE 32217
// points := [ 40 , 1 , 1 ] ;
32198: LD_ADDR_VAR 0 9
32202: PUSH
32203: LD_INT 40
32205: PUSH
32206: LD_INT 1
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32217: LD_VAR 0 6
32221: PPUSH
32222: CALL_OW 264
32226: PUSH
32227: LD_INT 29
32229: PUSH
32230: EMPTY
32231: LIST
32232: IN
32233: IFFALSE 32254
// points := [ 70 , 200 , 400 ] ;
32235: LD_ADDR_VAR 0 9
32239: PUSH
32240: LD_INT 70
32242: PUSH
32243: LD_INT 200
32245: PUSH
32246: LD_INT 400
32248: PUSH
32249: EMPTY
32250: LIST
32251: LIST
32252: LIST
32253: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32254: LD_VAR 0 6
32258: PPUSH
32259: CALL_OW 264
32263: PUSH
32264: LD_INT 14
32266: PUSH
32267: LD_INT 53
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: IN
32274: IFFALSE 32295
// points := [ 40 , 10 , 20 ] ;
32276: LD_ADDR_VAR 0 9
32280: PUSH
32281: LD_INT 40
32283: PUSH
32284: LD_INT 10
32286: PUSH
32287: LD_INT 20
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: LIST
32294: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32295: LD_VAR 0 6
32299: PPUSH
32300: CALL_OW 264
32304: PUSH
32305: LD_INT 9
32307: PUSH
32308: EMPTY
32309: LIST
32310: IN
32311: IFFALSE 32332
// points := [ 5 , 70 , 20 ] ;
32313: LD_ADDR_VAR 0 9
32317: PUSH
32318: LD_INT 5
32320: PUSH
32321: LD_INT 70
32323: PUSH
32324: LD_INT 20
32326: PUSH
32327: EMPTY
32328: LIST
32329: LIST
32330: LIST
32331: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32332: LD_VAR 0 6
32336: PPUSH
32337: CALL_OW 264
32341: PUSH
32342: LD_INT 10
32344: PUSH
32345: EMPTY
32346: LIST
32347: IN
32348: IFFALSE 32369
// points := [ 35 , 110 , 70 ] ;
32350: LD_ADDR_VAR 0 9
32354: PUSH
32355: LD_INT 35
32357: PUSH
32358: LD_INT 110
32360: PUSH
32361: LD_INT 70
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32369: LD_VAR 0 6
32373: PPUSH
32374: CALL_OW 265
32378: PUSH
32379: LD_INT 25
32381: EQUAL
32382: IFFALSE 32403
// points := [ 80 , 65 , 100 ] ;
32384: LD_ADDR_VAR 0 9
32388: PUSH
32389: LD_INT 80
32391: PUSH
32392: LD_INT 65
32394: PUSH
32395: LD_INT 100
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: LIST
32402: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32403: LD_VAR 0 6
32407: PPUSH
32408: CALL_OW 263
32412: PUSH
32413: LD_INT 1
32415: EQUAL
32416: IFFALSE 32451
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32418: LD_ADDR_VAR 0 10
32422: PUSH
32423: LD_VAR 0 10
32427: PUSH
32428: LD_VAR 0 6
32432: PPUSH
32433: CALL_OW 311
32437: PPUSH
32438: LD_INT 3
32440: PPUSH
32441: CALL_OW 259
32445: PUSH
32446: LD_INT 4
32448: MUL
32449: MUL
32450: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32451: LD_VAR 0 6
32455: PPUSH
32456: CALL_OW 263
32460: PUSH
32461: LD_INT 2
32463: EQUAL
32464: IFFALSE 32515
// begin j := IsControledBy ( i ) ;
32466: LD_ADDR_VAR 0 7
32470: PUSH
32471: LD_VAR 0 6
32475: PPUSH
32476: CALL_OW 312
32480: ST_TO_ADDR
// if j then
32481: LD_VAR 0 7
32485: IFFALSE 32515
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32487: LD_ADDR_VAR 0 10
32491: PUSH
32492: LD_VAR 0 10
32496: PUSH
32497: LD_VAR 0 7
32501: PPUSH
32502: LD_INT 3
32504: PPUSH
32505: CALL_OW 259
32509: PUSH
32510: LD_INT 3
32512: MUL
32513: MUL
32514: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32515: LD_VAR 0 6
32519: PPUSH
32520: CALL_OW 264
32524: PUSH
32525: LD_INT 5
32527: PUSH
32528: LD_INT 6
32530: PUSH
32531: LD_INT 46
32533: PUSH
32534: LD_INT 44
32536: PUSH
32537: LD_INT 47
32539: PUSH
32540: LD_INT 45
32542: PUSH
32543: LD_INT 28
32545: PUSH
32546: LD_INT 7
32548: PUSH
32549: LD_INT 27
32551: PUSH
32552: LD_INT 29
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: IN
32567: PUSH
32568: LD_VAR 0 1
32572: PPUSH
32573: LD_INT 52
32575: PPUSH
32576: CALL_OW 321
32580: PUSH
32581: LD_INT 2
32583: EQUAL
32584: AND
32585: IFFALSE 32602
// bpoints := bpoints * 1.2 ;
32587: LD_ADDR_VAR 0 10
32591: PUSH
32592: LD_VAR 0 10
32596: PUSH
32597: LD_REAL  1.20000000000000E+0000
32600: MUL
32601: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32602: LD_VAR 0 6
32606: PPUSH
32607: CALL_OW 264
32611: PUSH
32612: LD_INT 6
32614: PUSH
32615: LD_INT 46
32617: PUSH
32618: LD_INT 47
32620: PUSH
32621: EMPTY
32622: LIST
32623: LIST
32624: LIST
32625: IN
32626: IFFALSE 32643
// bpoints := bpoints * 1.2 ;
32628: LD_ADDR_VAR 0 10
32632: PUSH
32633: LD_VAR 0 10
32637: PUSH
32638: LD_REAL  1.20000000000000E+0000
32641: MUL
32642: ST_TO_ADDR
// end ; unit_building :
32643: GO 32657
32645: LD_INT 3
32647: DOUBLE
32648: EQUAL
32649: IFTRUE 32653
32651: GO 32656
32653: POP
// ; end ;
32654: GO 32657
32656: POP
// for j = 1 to 3 do
32657: LD_ADDR_VAR 0 7
32661: PUSH
32662: DOUBLE
32663: LD_INT 1
32665: DEC
32666: ST_TO_ADDR
32667: LD_INT 3
32669: PUSH
32670: FOR_TO
32671: IFFALSE 32724
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32673: LD_ADDR_VAR 0 5
32677: PUSH
32678: LD_VAR 0 5
32682: PPUSH
32683: LD_VAR 0 7
32687: PPUSH
32688: LD_VAR 0 5
32692: PUSH
32693: LD_VAR 0 7
32697: ARRAY
32698: PUSH
32699: LD_VAR 0 9
32703: PUSH
32704: LD_VAR 0 7
32708: ARRAY
32709: PUSH
32710: LD_VAR 0 10
32714: MUL
32715: PLUS
32716: PPUSH
32717: CALL_OW 1
32721: ST_TO_ADDR
32722: GO 32670
32724: POP
32725: POP
// end ;
32726: GO 31203
32728: POP
32729: POP
// result := Replace ( result , 4 , tmp ) ;
32730: LD_ADDR_VAR 0 5
32734: PUSH
32735: LD_VAR 0 5
32739: PPUSH
32740: LD_INT 4
32742: PPUSH
32743: LD_VAR 0 8
32747: PPUSH
32748: CALL_OW 1
32752: ST_TO_ADDR
// end ;
32753: LD_VAR 0 5
32757: RET
// export function DangerAtRange ( unit , range ) ; begin
32758: LD_INT 0
32760: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32761: LD_ADDR_VAR 0 3
32765: PUSH
32766: LD_VAR 0 1
32770: PPUSH
32771: CALL_OW 255
32775: PPUSH
32776: LD_VAR 0 1
32780: PPUSH
32781: CALL_OW 250
32785: PPUSH
32786: LD_VAR 0 1
32790: PPUSH
32791: CALL_OW 251
32795: PPUSH
32796: LD_VAR 0 2
32800: PPUSH
32801: CALL 31055 0 4
32805: ST_TO_ADDR
// end ;
32806: LD_VAR 0 3
32810: RET
// export function DangerInArea ( side , area ) ; begin
32811: LD_INT 0
32813: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32814: LD_ADDR_VAR 0 3
32818: PUSH
32819: LD_VAR 0 2
32823: PPUSH
32824: LD_INT 81
32826: PUSH
32827: LD_VAR 0 1
32831: PUSH
32832: EMPTY
32833: LIST
32834: LIST
32835: PPUSH
32836: CALL_OW 70
32840: ST_TO_ADDR
// end ;
32841: LD_VAR 0 3
32845: RET
// export function IsExtension ( b ) ; begin
32846: LD_INT 0
32848: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32849: LD_ADDR_VAR 0 2
32853: PUSH
32854: LD_VAR 0 1
32858: PUSH
32859: LD_INT 23
32861: PUSH
32862: LD_INT 20
32864: PUSH
32865: LD_INT 22
32867: PUSH
32868: LD_INT 17
32870: PUSH
32871: LD_INT 24
32873: PUSH
32874: LD_INT 21
32876: PUSH
32877: LD_INT 19
32879: PUSH
32880: LD_INT 16
32882: PUSH
32883: LD_INT 25
32885: PUSH
32886: LD_INT 18
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: IN
32901: ST_TO_ADDR
// end ;
32902: LD_VAR 0 2
32906: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32907: LD_INT 0
32909: PPUSH
32910: PPUSH
32911: PPUSH
// result := [ ] ;
32912: LD_ADDR_VAR 0 4
32916: PUSH
32917: EMPTY
32918: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32919: LD_ADDR_VAR 0 5
32923: PUSH
32924: LD_VAR 0 2
32928: PPUSH
32929: LD_INT 21
32931: PUSH
32932: LD_INT 3
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PPUSH
32939: CALL_OW 70
32943: ST_TO_ADDR
// if not tmp then
32944: LD_VAR 0 5
32948: NOT
32949: IFFALSE 32953
// exit ;
32951: GO 33017
// if checkLink then
32953: LD_VAR 0 3
32957: IFFALSE 33007
// begin for i in tmp do
32959: LD_ADDR_VAR 0 6
32963: PUSH
32964: LD_VAR 0 5
32968: PUSH
32969: FOR_IN
32970: IFFALSE 33005
// if GetBase ( i ) <> base then
32972: LD_VAR 0 6
32976: PPUSH
32977: CALL_OW 274
32981: PUSH
32982: LD_VAR 0 1
32986: NONEQUAL
32987: IFFALSE 33003
// ComLinkToBase ( base , i ) ;
32989: LD_VAR 0 1
32993: PPUSH
32994: LD_VAR 0 6
32998: PPUSH
32999: CALL_OW 169
33003: GO 32969
33005: POP
33006: POP
// end ; result := tmp ;
33007: LD_ADDR_VAR 0 4
33011: PUSH
33012: LD_VAR 0 5
33016: ST_TO_ADDR
// end ;
33017: LD_VAR 0 4
33021: RET
// export function ComComplete ( units , b ) ; var i ; begin
33022: LD_INT 0
33024: PPUSH
33025: PPUSH
// if not units then
33026: LD_VAR 0 1
33030: NOT
33031: IFFALSE 33035
// exit ;
33033: GO 33125
// for i in units do
33035: LD_ADDR_VAR 0 4
33039: PUSH
33040: LD_VAR 0 1
33044: PUSH
33045: FOR_IN
33046: IFFALSE 33123
// if BuildingStatus ( b ) = bs_build then
33048: LD_VAR 0 2
33052: PPUSH
33053: CALL_OW 461
33057: PUSH
33058: LD_INT 1
33060: EQUAL
33061: IFFALSE 33121
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33063: LD_VAR 0 4
33067: PPUSH
33068: LD_STRING h
33070: PUSH
33071: LD_VAR 0 2
33075: PPUSH
33076: CALL_OW 250
33080: PUSH
33081: LD_VAR 0 2
33085: PPUSH
33086: CALL_OW 251
33090: PUSH
33091: LD_VAR 0 2
33095: PUSH
33096: LD_INT 0
33098: PUSH
33099: LD_INT 0
33101: PUSH
33102: LD_INT 0
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: PPUSH
33117: CALL_OW 446
33121: GO 33045
33123: POP
33124: POP
// end ;
33125: LD_VAR 0 3
33129: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33130: LD_INT 0
33132: PPUSH
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33138: LD_VAR 0 1
33142: NOT
33143: PUSH
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 263
33153: PUSH
33154: LD_INT 2
33156: NONEQUAL
33157: OR
33158: IFFALSE 33162
// exit ;
33160: GO 33478
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33162: LD_ADDR_VAR 0 6
33166: PUSH
33167: LD_INT 22
33169: PUSH
33170: LD_VAR 0 1
33174: PPUSH
33175: CALL_OW 255
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 2
33186: PUSH
33187: LD_INT 30
33189: PUSH
33190: LD_INT 36
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 34
33199: PUSH
33200: LD_INT 31
33202: PUSH
33203: EMPTY
33204: LIST
33205: LIST
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: LIST
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PPUSH
33216: CALL_OW 69
33220: ST_TO_ADDR
// if not tmp then
33221: LD_VAR 0 6
33225: NOT
33226: IFFALSE 33230
// exit ;
33228: GO 33478
// result := [ ] ;
33230: LD_ADDR_VAR 0 2
33234: PUSH
33235: EMPTY
33236: ST_TO_ADDR
// for i in tmp do
33237: LD_ADDR_VAR 0 3
33241: PUSH
33242: LD_VAR 0 6
33246: PUSH
33247: FOR_IN
33248: IFFALSE 33319
// begin t := UnitsInside ( i ) ;
33250: LD_ADDR_VAR 0 4
33254: PUSH
33255: LD_VAR 0 3
33259: PPUSH
33260: CALL_OW 313
33264: ST_TO_ADDR
// if t then
33265: LD_VAR 0 4
33269: IFFALSE 33317
// for j in t do
33271: LD_ADDR_VAR 0 7
33275: PUSH
33276: LD_VAR 0 4
33280: PUSH
33281: FOR_IN
33282: IFFALSE 33315
// result := Replace ( result , result + 1 , j ) ;
33284: LD_ADDR_VAR 0 2
33288: PUSH
33289: LD_VAR 0 2
33293: PPUSH
33294: LD_VAR 0 2
33298: PUSH
33299: LD_INT 1
33301: PLUS
33302: PPUSH
33303: LD_VAR 0 7
33307: PPUSH
33308: CALL_OW 1
33312: ST_TO_ADDR
33313: GO 33281
33315: POP
33316: POP
// end ;
33317: GO 33247
33319: POP
33320: POP
// if not result then
33321: LD_VAR 0 2
33325: NOT
33326: IFFALSE 33330
// exit ;
33328: GO 33478
// mech := result [ 1 ] ;
33330: LD_ADDR_VAR 0 5
33334: PUSH
33335: LD_VAR 0 2
33339: PUSH
33340: LD_INT 1
33342: ARRAY
33343: ST_TO_ADDR
// if result > 1 then
33344: LD_VAR 0 2
33348: PUSH
33349: LD_INT 1
33351: GREATER
33352: IFFALSE 33464
// begin for i = 2 to result do
33354: LD_ADDR_VAR 0 3
33358: PUSH
33359: DOUBLE
33360: LD_INT 2
33362: DEC
33363: ST_TO_ADDR
33364: LD_VAR 0 2
33368: PUSH
33369: FOR_TO
33370: IFFALSE 33462
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33372: LD_ADDR_VAR 0 4
33376: PUSH
33377: LD_VAR 0 2
33381: PUSH
33382: LD_VAR 0 3
33386: ARRAY
33387: PPUSH
33388: LD_INT 3
33390: PPUSH
33391: CALL_OW 259
33395: PUSH
33396: LD_VAR 0 2
33400: PUSH
33401: LD_VAR 0 3
33405: ARRAY
33406: PPUSH
33407: CALL_OW 432
33411: MINUS
33412: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33413: LD_VAR 0 4
33417: PUSH
33418: LD_VAR 0 5
33422: PPUSH
33423: LD_INT 3
33425: PPUSH
33426: CALL_OW 259
33430: PUSH
33431: LD_VAR 0 5
33435: PPUSH
33436: CALL_OW 432
33440: MINUS
33441: GREATEREQUAL
33442: IFFALSE 33460
// mech := result [ i ] ;
33444: LD_ADDR_VAR 0 5
33448: PUSH
33449: LD_VAR 0 2
33453: PUSH
33454: LD_VAR 0 3
33458: ARRAY
33459: ST_TO_ADDR
// end ;
33460: GO 33369
33462: POP
33463: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33464: LD_VAR 0 1
33468: PPUSH
33469: LD_VAR 0 5
33473: PPUSH
33474: CALL_OW 135
// end ;
33478: LD_VAR 0 2
33482: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33483: LD_INT 0
33485: PPUSH
33486: PPUSH
33487: PPUSH
33488: PPUSH
33489: PPUSH
33490: PPUSH
33491: PPUSH
33492: PPUSH
33493: PPUSH
33494: PPUSH
33495: PPUSH
33496: PPUSH
33497: PPUSH
// result := [ ] ;
33498: LD_ADDR_VAR 0 7
33502: PUSH
33503: EMPTY
33504: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33505: LD_VAR 0 1
33509: PPUSH
33510: CALL_OW 266
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 1
33520: PUSH
33521: EMPTY
33522: LIST
33523: LIST
33524: IN
33525: NOT
33526: IFFALSE 33530
// exit ;
33528: GO 35164
// if name then
33530: LD_VAR 0 3
33534: IFFALSE 33550
// SetBName ( base_dep , name ) ;
33536: LD_VAR 0 1
33540: PPUSH
33541: LD_VAR 0 3
33545: PPUSH
33546: CALL_OW 500
// base := GetBase ( base_dep ) ;
33550: LD_ADDR_VAR 0 15
33554: PUSH
33555: LD_VAR 0 1
33559: PPUSH
33560: CALL_OW 274
33564: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33565: LD_ADDR_VAR 0 16
33569: PUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 255
33579: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33580: LD_ADDR_VAR 0 17
33584: PUSH
33585: LD_VAR 0 1
33589: PPUSH
33590: CALL_OW 248
33594: ST_TO_ADDR
// if sources then
33595: LD_VAR 0 5
33599: IFFALSE 33646
// for i = 1 to 3 do
33601: LD_ADDR_VAR 0 8
33605: PUSH
33606: DOUBLE
33607: LD_INT 1
33609: DEC
33610: ST_TO_ADDR
33611: LD_INT 3
33613: PUSH
33614: FOR_TO
33615: IFFALSE 33644
// AddResourceType ( base , i , sources [ i ] ) ;
33617: LD_VAR 0 15
33621: PPUSH
33622: LD_VAR 0 8
33626: PPUSH
33627: LD_VAR 0 5
33631: PUSH
33632: LD_VAR 0 8
33636: ARRAY
33637: PPUSH
33638: CALL_OW 276
33642: GO 33614
33644: POP
33645: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33646: LD_ADDR_VAR 0 18
33650: PUSH
33651: LD_VAR 0 15
33655: PPUSH
33656: LD_VAR 0 2
33660: PPUSH
33661: LD_INT 1
33663: PPUSH
33664: CALL 32907 0 3
33668: ST_TO_ADDR
// InitHc ;
33669: CALL_OW 19
// InitUc ;
33673: CALL_OW 18
// uc_side := side ;
33677: LD_ADDR_OWVAR 20
33681: PUSH
33682: LD_VAR 0 16
33686: ST_TO_ADDR
// uc_nation := nation ;
33687: LD_ADDR_OWVAR 21
33691: PUSH
33692: LD_VAR 0 17
33696: ST_TO_ADDR
// if buildings then
33697: LD_VAR 0 18
33701: IFFALSE 35023
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33703: LD_ADDR_VAR 0 19
33707: PUSH
33708: LD_VAR 0 18
33712: PPUSH
33713: LD_INT 2
33715: PUSH
33716: LD_INT 30
33718: PUSH
33719: LD_INT 29
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 30
33728: PUSH
33729: LD_INT 30
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: EMPTY
33737: LIST
33738: LIST
33739: LIST
33740: PPUSH
33741: CALL_OW 72
33745: ST_TO_ADDR
// if tmp then
33746: LD_VAR 0 19
33750: IFFALSE 33798
// for i in tmp do
33752: LD_ADDR_VAR 0 8
33756: PUSH
33757: LD_VAR 0 19
33761: PUSH
33762: FOR_IN
33763: IFFALSE 33796
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33765: LD_VAR 0 8
33769: PPUSH
33770: CALL_OW 250
33774: PPUSH
33775: LD_VAR 0 8
33779: PPUSH
33780: CALL_OW 251
33784: PPUSH
33785: LD_VAR 0 16
33789: PPUSH
33790: CALL_OW 441
33794: GO 33762
33796: POP
33797: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33798: LD_VAR 0 18
33802: PPUSH
33803: LD_INT 2
33805: PUSH
33806: LD_INT 30
33808: PUSH
33809: LD_INT 32
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: PUSH
33816: LD_INT 30
33818: PUSH
33819: LD_INT 33
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: LIST
33830: PPUSH
33831: CALL_OW 72
33835: IFFALSE 33923
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33837: LD_ADDR_VAR 0 8
33841: PUSH
33842: LD_VAR 0 18
33846: PPUSH
33847: LD_INT 2
33849: PUSH
33850: LD_INT 30
33852: PUSH
33853: LD_INT 32
33855: PUSH
33856: EMPTY
33857: LIST
33858: LIST
33859: PUSH
33860: LD_INT 30
33862: PUSH
33863: LD_INT 33
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: PPUSH
33875: CALL_OW 72
33879: PUSH
33880: FOR_IN
33881: IFFALSE 33921
// begin if not GetBWeapon ( i ) then
33883: LD_VAR 0 8
33887: PPUSH
33888: CALL_OW 269
33892: NOT
33893: IFFALSE 33919
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33895: LD_VAR 0 8
33899: PPUSH
33900: LD_VAR 0 8
33904: PPUSH
33905: LD_VAR 0 2
33909: PPUSH
33910: CALL 35169 0 2
33914: PPUSH
33915: CALL_OW 431
// end ;
33919: GO 33880
33921: POP
33922: POP
// end ; for i = 1 to personel do
33923: LD_ADDR_VAR 0 8
33927: PUSH
33928: DOUBLE
33929: LD_INT 1
33931: DEC
33932: ST_TO_ADDR
33933: LD_VAR 0 6
33937: PUSH
33938: FOR_TO
33939: IFFALSE 35003
// begin if i > 4 then
33941: LD_VAR 0 8
33945: PUSH
33946: LD_INT 4
33948: GREATER
33949: IFFALSE 33953
// break ;
33951: GO 35003
// case i of 1 :
33953: LD_VAR 0 8
33957: PUSH
33958: LD_INT 1
33960: DOUBLE
33961: EQUAL
33962: IFTRUE 33966
33964: GO 34046
33966: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33967: LD_ADDR_VAR 0 12
33971: PUSH
33972: LD_VAR 0 18
33976: PPUSH
33977: LD_INT 22
33979: PUSH
33980: LD_VAR 0 16
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 58
33991: PUSH
33992: EMPTY
33993: LIST
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: LD_INT 30
34000: PUSH
34001: LD_INT 32
34003: PUSH
34004: EMPTY
34005: LIST
34006: LIST
34007: PUSH
34008: LD_INT 30
34010: PUSH
34011: LD_INT 4
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 30
34020: PUSH
34021: LD_INT 5
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: PUSH
34028: EMPTY
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: PPUSH
34039: CALL_OW 72
34043: ST_TO_ADDR
34044: GO 34268
34046: LD_INT 2
34048: DOUBLE
34049: EQUAL
34050: IFTRUE 34054
34052: GO 34116
34054: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34055: LD_ADDR_VAR 0 12
34059: PUSH
34060: LD_VAR 0 18
34064: PPUSH
34065: LD_INT 22
34067: PUSH
34068: LD_VAR 0 16
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: PUSH
34077: LD_INT 2
34079: PUSH
34080: LD_INT 30
34082: PUSH
34083: LD_INT 0
34085: PUSH
34086: EMPTY
34087: LIST
34088: LIST
34089: PUSH
34090: LD_INT 30
34092: PUSH
34093: LD_INT 1
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: LIST
34104: PUSH
34105: EMPTY
34106: LIST
34107: LIST
34108: PPUSH
34109: CALL_OW 72
34113: ST_TO_ADDR
34114: GO 34268
34116: LD_INT 3
34118: DOUBLE
34119: EQUAL
34120: IFTRUE 34124
34122: GO 34186
34124: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34125: LD_ADDR_VAR 0 12
34129: PUSH
34130: LD_VAR 0 18
34134: PPUSH
34135: LD_INT 22
34137: PUSH
34138: LD_VAR 0 16
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 2
34149: PUSH
34150: LD_INT 30
34152: PUSH
34153: LD_INT 2
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: PUSH
34160: LD_INT 30
34162: PUSH
34163: LD_INT 3
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: PUSH
34175: EMPTY
34176: LIST
34177: LIST
34178: PPUSH
34179: CALL_OW 72
34183: ST_TO_ADDR
34184: GO 34268
34186: LD_INT 4
34188: DOUBLE
34189: EQUAL
34190: IFTRUE 34194
34192: GO 34267
34194: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34195: LD_ADDR_VAR 0 12
34199: PUSH
34200: LD_VAR 0 18
34204: PPUSH
34205: LD_INT 22
34207: PUSH
34208: LD_VAR 0 16
34212: PUSH
34213: EMPTY
34214: LIST
34215: LIST
34216: PUSH
34217: LD_INT 2
34219: PUSH
34220: LD_INT 30
34222: PUSH
34223: LD_INT 6
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 30
34232: PUSH
34233: LD_INT 7
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 30
34242: PUSH
34243: LD_INT 8
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PPUSH
34260: CALL_OW 72
34264: ST_TO_ADDR
34265: GO 34268
34267: POP
// if i = 1 then
34268: LD_VAR 0 8
34272: PUSH
34273: LD_INT 1
34275: EQUAL
34276: IFFALSE 34387
// begin tmp := [ ] ;
34278: LD_ADDR_VAR 0 19
34282: PUSH
34283: EMPTY
34284: ST_TO_ADDR
// for j in f do
34285: LD_ADDR_VAR 0 9
34289: PUSH
34290: LD_VAR 0 12
34294: PUSH
34295: FOR_IN
34296: IFFALSE 34369
// if GetBType ( j ) = b_bunker then
34298: LD_VAR 0 9
34302: PPUSH
34303: CALL_OW 266
34307: PUSH
34308: LD_INT 32
34310: EQUAL
34311: IFFALSE 34338
// tmp := Insert ( tmp , 1 , j ) else
34313: LD_ADDR_VAR 0 19
34317: PUSH
34318: LD_VAR 0 19
34322: PPUSH
34323: LD_INT 1
34325: PPUSH
34326: LD_VAR 0 9
34330: PPUSH
34331: CALL_OW 2
34335: ST_TO_ADDR
34336: GO 34367
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34338: LD_ADDR_VAR 0 19
34342: PUSH
34343: LD_VAR 0 19
34347: PPUSH
34348: LD_VAR 0 19
34352: PUSH
34353: LD_INT 1
34355: PLUS
34356: PPUSH
34357: LD_VAR 0 9
34361: PPUSH
34362: CALL_OW 2
34366: ST_TO_ADDR
34367: GO 34295
34369: POP
34370: POP
// if tmp then
34371: LD_VAR 0 19
34375: IFFALSE 34387
// f := tmp ;
34377: LD_ADDR_VAR 0 12
34381: PUSH
34382: LD_VAR 0 19
34386: ST_TO_ADDR
// end ; x := personel [ i ] ;
34387: LD_ADDR_VAR 0 13
34391: PUSH
34392: LD_VAR 0 6
34396: PUSH
34397: LD_VAR 0 8
34401: ARRAY
34402: ST_TO_ADDR
// if x = - 1 then
34403: LD_VAR 0 13
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: EQUAL
34412: IFFALSE 34621
// begin for j in f do
34414: LD_ADDR_VAR 0 9
34418: PUSH
34419: LD_VAR 0 12
34423: PUSH
34424: FOR_IN
34425: IFFALSE 34617
// repeat InitHc ;
34427: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34431: LD_VAR 0 9
34435: PPUSH
34436: CALL_OW 266
34440: PUSH
34441: LD_INT 5
34443: EQUAL
34444: IFFALSE 34514
// begin if UnitsInside ( j ) < 3 then
34446: LD_VAR 0 9
34450: PPUSH
34451: CALL_OW 313
34455: PUSH
34456: LD_INT 3
34458: LESS
34459: IFFALSE 34495
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34461: LD_INT 0
34463: PPUSH
34464: LD_INT 5
34466: PUSH
34467: LD_INT 8
34469: PUSH
34470: LD_INT 9
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: LIST
34477: PUSH
34478: LD_VAR 0 17
34482: ARRAY
34483: PPUSH
34484: LD_VAR 0 4
34488: PPUSH
34489: CALL_OW 380
34493: GO 34512
// PrepareHuman ( false , i , skill ) ;
34495: LD_INT 0
34497: PPUSH
34498: LD_VAR 0 8
34502: PPUSH
34503: LD_VAR 0 4
34507: PPUSH
34508: CALL_OW 380
// end else
34512: GO 34531
// PrepareHuman ( false , i , skill ) ;
34514: LD_INT 0
34516: PPUSH
34517: LD_VAR 0 8
34521: PPUSH
34522: LD_VAR 0 4
34526: PPUSH
34527: CALL_OW 380
// un := CreateHuman ;
34531: LD_ADDR_VAR 0 14
34535: PUSH
34536: CALL_OW 44
34540: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34541: LD_ADDR_VAR 0 7
34545: PUSH
34546: LD_VAR 0 7
34550: PPUSH
34551: LD_INT 1
34553: PPUSH
34554: LD_VAR 0 14
34558: PPUSH
34559: CALL_OW 2
34563: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34564: LD_VAR 0 14
34568: PPUSH
34569: LD_VAR 0 9
34573: PPUSH
34574: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34578: LD_VAR 0 9
34582: PPUSH
34583: CALL_OW 313
34587: PUSH
34588: LD_INT 6
34590: EQUAL
34591: PUSH
34592: LD_VAR 0 9
34596: PPUSH
34597: CALL_OW 266
34601: PUSH
34602: LD_INT 32
34604: PUSH
34605: LD_INT 31
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: IN
34612: OR
34613: IFFALSE 34427
34615: GO 34424
34617: POP
34618: POP
// end else
34619: GO 35001
// for j = 1 to x do
34621: LD_ADDR_VAR 0 9
34625: PUSH
34626: DOUBLE
34627: LD_INT 1
34629: DEC
34630: ST_TO_ADDR
34631: LD_VAR 0 13
34635: PUSH
34636: FOR_TO
34637: IFFALSE 34999
// begin InitHc ;
34639: CALL_OW 19
// if not f then
34643: LD_VAR 0 12
34647: NOT
34648: IFFALSE 34737
// begin PrepareHuman ( false , i , skill ) ;
34650: LD_INT 0
34652: PPUSH
34653: LD_VAR 0 8
34657: PPUSH
34658: LD_VAR 0 4
34662: PPUSH
34663: CALL_OW 380
// un := CreateHuman ;
34667: LD_ADDR_VAR 0 14
34671: PUSH
34672: CALL_OW 44
34676: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34677: LD_ADDR_VAR 0 7
34681: PUSH
34682: LD_VAR 0 7
34686: PPUSH
34687: LD_INT 1
34689: PPUSH
34690: LD_VAR 0 14
34694: PPUSH
34695: CALL_OW 2
34699: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34700: LD_VAR 0 14
34704: PPUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 250
34714: PPUSH
34715: LD_VAR 0 1
34719: PPUSH
34720: CALL_OW 251
34724: PPUSH
34725: LD_INT 10
34727: PPUSH
34728: LD_INT 0
34730: PPUSH
34731: CALL_OW 50
// continue ;
34735: GO 34636
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34737: LD_VAR 0 12
34741: PUSH
34742: LD_INT 1
34744: ARRAY
34745: PPUSH
34746: CALL_OW 313
34750: PUSH
34751: LD_VAR 0 12
34755: PUSH
34756: LD_INT 1
34758: ARRAY
34759: PPUSH
34760: CALL_OW 266
34764: PUSH
34765: LD_INT 32
34767: PUSH
34768: LD_INT 31
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: IN
34775: AND
34776: PUSH
34777: LD_VAR 0 12
34781: PUSH
34782: LD_INT 1
34784: ARRAY
34785: PPUSH
34786: CALL_OW 313
34790: PUSH
34791: LD_INT 6
34793: EQUAL
34794: OR
34795: IFFALSE 34815
// f := Delete ( f , 1 ) ;
34797: LD_ADDR_VAR 0 12
34801: PUSH
34802: LD_VAR 0 12
34806: PPUSH
34807: LD_INT 1
34809: PPUSH
34810: CALL_OW 3
34814: ST_TO_ADDR
// if not f then
34815: LD_VAR 0 12
34819: NOT
34820: IFFALSE 34838
// begin x := x + 2 ;
34822: LD_ADDR_VAR 0 13
34826: PUSH
34827: LD_VAR 0 13
34831: PUSH
34832: LD_INT 2
34834: PLUS
34835: ST_TO_ADDR
// continue ;
34836: GO 34636
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34838: LD_VAR 0 12
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: CALL_OW 266
34851: PUSH
34852: LD_INT 5
34854: EQUAL
34855: IFFALSE 34929
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34857: LD_VAR 0 12
34861: PUSH
34862: LD_INT 1
34864: ARRAY
34865: PPUSH
34866: CALL_OW 313
34870: PUSH
34871: LD_INT 3
34873: LESS
34874: IFFALSE 34910
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34876: LD_INT 0
34878: PPUSH
34879: LD_INT 5
34881: PUSH
34882: LD_INT 8
34884: PUSH
34885: LD_INT 9
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: LD_VAR 0 17
34897: ARRAY
34898: PPUSH
34899: LD_VAR 0 4
34903: PPUSH
34904: CALL_OW 380
34908: GO 34927
// PrepareHuman ( false , i , skill ) ;
34910: LD_INT 0
34912: PPUSH
34913: LD_VAR 0 8
34917: PPUSH
34918: LD_VAR 0 4
34922: PPUSH
34923: CALL_OW 380
// end else
34927: GO 34946
// PrepareHuman ( false , i , skill ) ;
34929: LD_INT 0
34931: PPUSH
34932: LD_VAR 0 8
34936: PPUSH
34937: LD_VAR 0 4
34941: PPUSH
34942: CALL_OW 380
// un := CreateHuman ;
34946: LD_ADDR_VAR 0 14
34950: PUSH
34951: CALL_OW 44
34955: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34956: LD_ADDR_VAR 0 7
34960: PUSH
34961: LD_VAR 0 7
34965: PPUSH
34966: LD_INT 1
34968: PPUSH
34969: LD_VAR 0 14
34973: PPUSH
34974: CALL_OW 2
34978: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34979: LD_VAR 0 14
34983: PPUSH
34984: LD_VAR 0 12
34988: PUSH
34989: LD_INT 1
34991: ARRAY
34992: PPUSH
34993: CALL_OW 52
// end ;
34997: GO 34636
34999: POP
35000: POP
// end ;
35001: GO 33938
35003: POP
35004: POP
// result := result ^ buildings ;
35005: LD_ADDR_VAR 0 7
35009: PUSH
35010: LD_VAR 0 7
35014: PUSH
35015: LD_VAR 0 18
35019: ADD
35020: ST_TO_ADDR
// end else
35021: GO 35164
// begin for i = 1 to personel do
35023: LD_ADDR_VAR 0 8
35027: PUSH
35028: DOUBLE
35029: LD_INT 1
35031: DEC
35032: ST_TO_ADDR
35033: LD_VAR 0 6
35037: PUSH
35038: FOR_TO
35039: IFFALSE 35162
// begin if i > 4 then
35041: LD_VAR 0 8
35045: PUSH
35046: LD_INT 4
35048: GREATER
35049: IFFALSE 35053
// break ;
35051: GO 35162
// x := personel [ i ] ;
35053: LD_ADDR_VAR 0 13
35057: PUSH
35058: LD_VAR 0 6
35062: PUSH
35063: LD_VAR 0 8
35067: ARRAY
35068: ST_TO_ADDR
// if x = - 1 then
35069: LD_VAR 0 13
35073: PUSH
35074: LD_INT 1
35076: NEG
35077: EQUAL
35078: IFFALSE 35082
// continue ;
35080: GO 35038
// PrepareHuman ( false , i , skill ) ;
35082: LD_INT 0
35084: PPUSH
35085: LD_VAR 0 8
35089: PPUSH
35090: LD_VAR 0 4
35094: PPUSH
35095: CALL_OW 380
// un := CreateHuman ;
35099: LD_ADDR_VAR 0 14
35103: PUSH
35104: CALL_OW 44
35108: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35109: LD_VAR 0 14
35113: PPUSH
35114: LD_VAR 0 1
35118: PPUSH
35119: CALL_OW 250
35123: PPUSH
35124: LD_VAR 0 1
35128: PPUSH
35129: CALL_OW 251
35133: PPUSH
35134: LD_INT 10
35136: PPUSH
35137: LD_INT 0
35139: PPUSH
35140: CALL_OW 50
// result := result ^ un ;
35144: LD_ADDR_VAR 0 7
35148: PUSH
35149: LD_VAR 0 7
35153: PUSH
35154: LD_VAR 0 14
35158: ADD
35159: ST_TO_ADDR
// end ;
35160: GO 35038
35162: POP
35163: POP
// end ; end ;
35164: LD_VAR 0 7
35168: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35169: LD_INT 0
35171: PPUSH
35172: PPUSH
35173: PPUSH
35174: PPUSH
35175: PPUSH
35176: PPUSH
35177: PPUSH
35178: PPUSH
35179: PPUSH
35180: PPUSH
35181: PPUSH
35182: PPUSH
35183: PPUSH
35184: PPUSH
35185: PPUSH
35186: PPUSH
// result := false ;
35187: LD_ADDR_VAR 0 3
35191: PUSH
35192: LD_INT 0
35194: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35195: LD_VAR 0 1
35199: NOT
35200: PUSH
35201: LD_VAR 0 1
35205: PPUSH
35206: CALL_OW 266
35210: PUSH
35211: LD_INT 32
35213: PUSH
35214: LD_INT 33
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: IN
35221: NOT
35222: OR
35223: IFFALSE 35227
// exit ;
35225: GO 36336
// nat := GetNation ( tower ) ;
35227: LD_ADDR_VAR 0 12
35231: PUSH
35232: LD_VAR 0 1
35236: PPUSH
35237: CALL_OW 248
35241: ST_TO_ADDR
// side := GetSide ( tower ) ;
35242: LD_ADDR_VAR 0 16
35246: PUSH
35247: LD_VAR 0 1
35251: PPUSH
35252: CALL_OW 255
35256: ST_TO_ADDR
// x := GetX ( tower ) ;
35257: LD_ADDR_VAR 0 10
35261: PUSH
35262: LD_VAR 0 1
35266: PPUSH
35267: CALL_OW 250
35271: ST_TO_ADDR
// y := GetY ( tower ) ;
35272: LD_ADDR_VAR 0 11
35276: PUSH
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 251
35286: ST_TO_ADDR
// if not x or not y then
35287: LD_VAR 0 10
35291: NOT
35292: PUSH
35293: LD_VAR 0 11
35297: NOT
35298: OR
35299: IFFALSE 35303
// exit ;
35301: GO 36336
// weapon := 0 ;
35303: LD_ADDR_VAR 0 18
35307: PUSH
35308: LD_INT 0
35310: ST_TO_ADDR
// fac_list := [ ] ;
35311: LD_ADDR_VAR 0 17
35315: PUSH
35316: EMPTY
35317: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35318: LD_ADDR_VAR 0 6
35322: PUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 274
35332: PPUSH
35333: LD_VAR 0 2
35337: PPUSH
35338: LD_INT 0
35340: PPUSH
35341: CALL 32907 0 3
35345: PPUSH
35346: LD_INT 30
35348: PUSH
35349: LD_INT 3
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PPUSH
35356: CALL_OW 72
35360: ST_TO_ADDR
// if not factories then
35361: LD_VAR 0 6
35365: NOT
35366: IFFALSE 35370
// exit ;
35368: GO 36336
// for i in factories do
35370: LD_ADDR_VAR 0 8
35374: PUSH
35375: LD_VAR 0 6
35379: PUSH
35380: FOR_IN
35381: IFFALSE 35406
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35383: LD_ADDR_VAR 0 17
35387: PUSH
35388: LD_VAR 0 17
35392: PUSH
35393: LD_VAR 0 8
35397: PPUSH
35398: CALL_OW 478
35402: UNION
35403: ST_TO_ADDR
35404: GO 35380
35406: POP
35407: POP
// if not fac_list then
35408: LD_VAR 0 17
35412: NOT
35413: IFFALSE 35417
// exit ;
35415: GO 36336
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35417: LD_ADDR_VAR 0 5
35421: PUSH
35422: LD_INT 4
35424: PUSH
35425: LD_INT 5
35427: PUSH
35428: LD_INT 9
35430: PUSH
35431: LD_INT 10
35433: PUSH
35434: LD_INT 6
35436: PUSH
35437: LD_INT 7
35439: PUSH
35440: LD_INT 11
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: LIST
35451: PUSH
35452: LD_INT 27
35454: PUSH
35455: LD_INT 28
35457: PUSH
35458: LD_INT 26
35460: PUSH
35461: LD_INT 30
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 43
35472: PUSH
35473: LD_INT 44
35475: PUSH
35476: LD_INT 46
35478: PUSH
35479: LD_INT 45
35481: PUSH
35482: LD_INT 47
35484: PUSH
35485: LD_INT 49
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: LIST
35500: PUSH
35501: LD_VAR 0 12
35505: ARRAY
35506: ST_TO_ADDR
// list := list isect fac_list ;
35507: LD_ADDR_VAR 0 5
35511: PUSH
35512: LD_VAR 0 5
35516: PUSH
35517: LD_VAR 0 17
35521: ISECT
35522: ST_TO_ADDR
// if not list then
35523: LD_VAR 0 5
35527: NOT
35528: IFFALSE 35532
// exit ;
35530: GO 36336
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35532: LD_VAR 0 12
35536: PUSH
35537: LD_INT 3
35539: EQUAL
35540: PUSH
35541: LD_INT 49
35543: PUSH
35544: LD_VAR 0 5
35548: IN
35549: AND
35550: PUSH
35551: LD_INT 31
35553: PPUSH
35554: LD_VAR 0 16
35558: PPUSH
35559: CALL_OW 321
35563: PUSH
35564: LD_INT 2
35566: EQUAL
35567: AND
35568: IFFALSE 35628
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35570: LD_INT 22
35572: PUSH
35573: LD_VAR 0 16
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 35
35584: PUSH
35585: LD_INT 49
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 91
35594: PUSH
35595: LD_VAR 0 1
35599: PUSH
35600: LD_INT 10
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: LIST
35607: PUSH
35608: EMPTY
35609: LIST
35610: LIST
35611: LIST
35612: PPUSH
35613: CALL_OW 69
35617: NOT
35618: IFFALSE 35628
// weapon := ru_time_lapser ;
35620: LD_ADDR_VAR 0 18
35624: PUSH
35625: LD_INT 49
35627: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35628: LD_VAR 0 12
35632: PUSH
35633: LD_INT 1
35635: PUSH
35636: LD_INT 2
35638: PUSH
35639: EMPTY
35640: LIST
35641: LIST
35642: IN
35643: PUSH
35644: LD_INT 11
35646: PUSH
35647: LD_VAR 0 5
35651: IN
35652: PUSH
35653: LD_INT 30
35655: PUSH
35656: LD_VAR 0 5
35660: IN
35661: OR
35662: AND
35663: PUSH
35664: LD_INT 6
35666: PPUSH
35667: LD_VAR 0 16
35671: PPUSH
35672: CALL_OW 321
35676: PUSH
35677: LD_INT 2
35679: EQUAL
35680: AND
35681: IFFALSE 35846
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35683: LD_INT 22
35685: PUSH
35686: LD_VAR 0 16
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: PUSH
35695: LD_INT 2
35697: PUSH
35698: LD_INT 35
35700: PUSH
35701: LD_INT 11
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 35
35710: PUSH
35711: LD_INT 30
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: LIST
35722: PUSH
35723: LD_INT 91
35725: PUSH
35726: LD_VAR 0 1
35730: PUSH
35731: LD_INT 18
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: LIST
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: LIST
35743: PPUSH
35744: CALL_OW 69
35748: NOT
35749: PUSH
35750: LD_INT 22
35752: PUSH
35753: LD_VAR 0 16
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 2
35764: PUSH
35765: LD_INT 30
35767: PUSH
35768: LD_INT 32
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 30
35777: PUSH
35778: LD_INT 33
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: EMPTY
35786: LIST
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 91
35792: PUSH
35793: LD_VAR 0 1
35797: PUSH
35798: LD_INT 12
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: LIST
35810: PUSH
35811: EMPTY
35812: LIST
35813: PPUSH
35814: CALL_OW 69
35818: PUSH
35819: LD_INT 2
35821: GREATER
35822: AND
35823: IFFALSE 35846
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35825: LD_ADDR_VAR 0 18
35829: PUSH
35830: LD_INT 11
35832: PUSH
35833: LD_INT 30
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_VAR 0 12
35844: ARRAY
35845: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35846: LD_VAR 0 18
35850: NOT
35851: PUSH
35852: LD_INT 40
35854: PPUSH
35855: LD_VAR 0 16
35859: PPUSH
35860: CALL_OW 321
35864: PUSH
35865: LD_INT 2
35867: EQUAL
35868: AND
35869: PUSH
35870: LD_INT 7
35872: PUSH
35873: LD_VAR 0 5
35877: IN
35878: PUSH
35879: LD_INT 28
35881: PUSH
35882: LD_VAR 0 5
35886: IN
35887: OR
35888: PUSH
35889: LD_INT 45
35891: PUSH
35892: LD_VAR 0 5
35896: IN
35897: OR
35898: AND
35899: IFFALSE 36153
// begin hex := GetHexInfo ( x , y ) ;
35901: LD_ADDR_VAR 0 4
35905: PUSH
35906: LD_VAR 0 10
35910: PPUSH
35911: LD_VAR 0 11
35915: PPUSH
35916: CALL_OW 546
35920: ST_TO_ADDR
// if hex [ 1 ] then
35921: LD_VAR 0 4
35925: PUSH
35926: LD_INT 1
35928: ARRAY
35929: IFFALSE 35933
// exit ;
35931: GO 36336
// height := hex [ 2 ] ;
35933: LD_ADDR_VAR 0 15
35937: PUSH
35938: LD_VAR 0 4
35942: PUSH
35943: LD_INT 2
35945: ARRAY
35946: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35947: LD_ADDR_VAR 0 14
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: LD_INT 5
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
// for i in tmp do
35970: LD_ADDR_VAR 0 8
35974: PUSH
35975: LD_VAR 0 14
35979: PUSH
35980: FOR_IN
35981: IFFALSE 36151
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_VAR 0 10
35992: PPUSH
35993: LD_VAR 0 8
35997: PPUSH
35998: LD_INT 5
36000: PPUSH
36001: CALL_OW 272
36005: PUSH
36006: LD_VAR 0 11
36010: PPUSH
36011: LD_VAR 0 8
36015: PPUSH
36016: LD_INT 5
36018: PPUSH
36019: CALL_OW 273
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36028: LD_VAR 0 9
36032: PUSH
36033: LD_INT 1
36035: ARRAY
36036: PPUSH
36037: LD_VAR 0 9
36041: PUSH
36042: LD_INT 2
36044: ARRAY
36045: PPUSH
36046: CALL_OW 488
36050: IFFALSE 36149
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36052: LD_ADDR_VAR 0 4
36056: PUSH
36057: LD_VAR 0 9
36061: PUSH
36062: LD_INT 1
36064: ARRAY
36065: PPUSH
36066: LD_VAR 0 9
36070: PUSH
36071: LD_INT 2
36073: ARRAY
36074: PPUSH
36075: CALL_OW 546
36079: ST_TO_ADDR
// if hex [ 1 ] then
36080: LD_VAR 0 4
36084: PUSH
36085: LD_INT 1
36087: ARRAY
36088: IFFALSE 36092
// continue ;
36090: GO 35980
// h := hex [ 2 ] ;
36092: LD_ADDR_VAR 0 13
36096: PUSH
36097: LD_VAR 0 4
36101: PUSH
36102: LD_INT 2
36104: ARRAY
36105: ST_TO_ADDR
// if h + 7 < height then
36106: LD_VAR 0 13
36110: PUSH
36111: LD_INT 7
36113: PLUS
36114: PUSH
36115: LD_VAR 0 15
36119: LESS
36120: IFFALSE 36149
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36122: LD_ADDR_VAR 0 18
36126: PUSH
36127: LD_INT 7
36129: PUSH
36130: LD_INT 28
36132: PUSH
36133: LD_INT 45
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: LIST
36140: PUSH
36141: LD_VAR 0 12
36145: ARRAY
36146: ST_TO_ADDR
// break ;
36147: GO 36151
// end ; end ; end ;
36149: GO 35980
36151: POP
36152: POP
// end ; if not weapon then
36153: LD_VAR 0 18
36157: NOT
36158: IFFALSE 36218
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36160: LD_ADDR_VAR 0 5
36164: PUSH
36165: LD_VAR 0 5
36169: PUSH
36170: LD_INT 11
36172: PUSH
36173: LD_INT 30
36175: PUSH
36176: LD_INT 49
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: LIST
36183: DIFF
36184: ST_TO_ADDR
// if not list then
36185: LD_VAR 0 5
36189: NOT
36190: IFFALSE 36194
// exit ;
36192: GO 36336
// weapon := list [ rand ( 1 , list ) ] ;
36194: LD_ADDR_VAR 0 18
36198: PUSH
36199: LD_VAR 0 5
36203: PUSH
36204: LD_INT 1
36206: PPUSH
36207: LD_VAR 0 5
36211: PPUSH
36212: CALL_OW 12
36216: ARRAY
36217: ST_TO_ADDR
// end ; if weapon then
36218: LD_VAR 0 18
36222: IFFALSE 36336
// begin tmp := CostOfWeapon ( weapon ) ;
36224: LD_ADDR_VAR 0 14
36228: PUSH
36229: LD_VAR 0 18
36233: PPUSH
36234: CALL_OW 451
36238: ST_TO_ADDR
// j := GetBase ( tower ) ;
36239: LD_ADDR_VAR 0 9
36243: PUSH
36244: LD_VAR 0 1
36248: PPUSH
36249: CALL_OW 274
36253: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36254: LD_VAR 0 9
36258: PPUSH
36259: LD_INT 1
36261: PPUSH
36262: CALL_OW 275
36266: PUSH
36267: LD_VAR 0 14
36271: PUSH
36272: LD_INT 1
36274: ARRAY
36275: GREATEREQUAL
36276: PUSH
36277: LD_VAR 0 9
36281: PPUSH
36282: LD_INT 2
36284: PPUSH
36285: CALL_OW 275
36289: PUSH
36290: LD_VAR 0 14
36294: PUSH
36295: LD_INT 2
36297: ARRAY
36298: GREATEREQUAL
36299: AND
36300: PUSH
36301: LD_VAR 0 9
36305: PPUSH
36306: LD_INT 3
36308: PPUSH
36309: CALL_OW 275
36313: PUSH
36314: LD_VAR 0 14
36318: PUSH
36319: LD_INT 3
36321: ARRAY
36322: GREATEREQUAL
36323: AND
36324: IFFALSE 36336
// result := weapon ;
36326: LD_ADDR_VAR 0 3
36330: PUSH
36331: LD_VAR 0 18
36335: ST_TO_ADDR
// end ; end ;
36336: LD_VAR 0 3
36340: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36341: LD_INT 0
36343: PPUSH
36344: PPUSH
// result := true ;
36345: LD_ADDR_VAR 0 3
36349: PUSH
36350: LD_INT 1
36352: ST_TO_ADDR
// if array1 = array2 then
36353: LD_VAR 0 1
36357: PUSH
36358: LD_VAR 0 2
36362: EQUAL
36363: IFFALSE 36423
// begin for i = 1 to array1 do
36365: LD_ADDR_VAR 0 4
36369: PUSH
36370: DOUBLE
36371: LD_INT 1
36373: DEC
36374: ST_TO_ADDR
36375: LD_VAR 0 1
36379: PUSH
36380: FOR_TO
36381: IFFALSE 36419
// if array1 [ i ] <> array2 [ i ] then
36383: LD_VAR 0 1
36387: PUSH
36388: LD_VAR 0 4
36392: ARRAY
36393: PUSH
36394: LD_VAR 0 2
36398: PUSH
36399: LD_VAR 0 4
36403: ARRAY
36404: NONEQUAL
36405: IFFALSE 36417
// begin result := false ;
36407: LD_ADDR_VAR 0 3
36411: PUSH
36412: LD_INT 0
36414: ST_TO_ADDR
// break ;
36415: GO 36419
// end ;
36417: GO 36380
36419: POP
36420: POP
// end else
36421: GO 36431
// result := false ;
36423: LD_ADDR_VAR 0 3
36427: PUSH
36428: LD_INT 0
36430: ST_TO_ADDR
// end ;
36431: LD_VAR 0 3
36435: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36436: LD_INT 0
36438: PPUSH
36439: PPUSH
// if not array1 or not array2 then
36440: LD_VAR 0 1
36444: NOT
36445: PUSH
36446: LD_VAR 0 2
36450: NOT
36451: OR
36452: IFFALSE 36456
// exit ;
36454: GO 36520
// result := true ;
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: LD_INT 1
36463: ST_TO_ADDR
// for i = 1 to array1 do
36464: LD_ADDR_VAR 0 4
36468: PUSH
36469: DOUBLE
36470: LD_INT 1
36472: DEC
36473: ST_TO_ADDR
36474: LD_VAR 0 1
36478: PUSH
36479: FOR_TO
36480: IFFALSE 36518
// if array1 [ i ] <> array2 [ i ] then
36482: LD_VAR 0 1
36486: PUSH
36487: LD_VAR 0 4
36491: ARRAY
36492: PUSH
36493: LD_VAR 0 2
36497: PUSH
36498: LD_VAR 0 4
36502: ARRAY
36503: NONEQUAL
36504: IFFALSE 36516
// begin result := false ;
36506: LD_ADDR_VAR 0 3
36510: PUSH
36511: LD_INT 0
36513: ST_TO_ADDR
// break ;
36514: GO 36518
// end ;
36516: GO 36479
36518: POP
36519: POP
// end ;
36520: LD_VAR 0 3
36524: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36525: LD_INT 0
36527: PPUSH
36528: PPUSH
36529: PPUSH
// pom := GetBase ( fac ) ;
36530: LD_ADDR_VAR 0 5
36534: PUSH
36535: LD_VAR 0 1
36539: PPUSH
36540: CALL_OW 274
36544: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36545: LD_ADDR_VAR 0 4
36549: PUSH
36550: LD_VAR 0 2
36554: PUSH
36555: LD_INT 1
36557: ARRAY
36558: PPUSH
36559: LD_VAR 0 2
36563: PUSH
36564: LD_INT 2
36566: ARRAY
36567: PPUSH
36568: LD_VAR 0 2
36572: PUSH
36573: LD_INT 3
36575: ARRAY
36576: PPUSH
36577: LD_VAR 0 2
36581: PUSH
36582: LD_INT 4
36584: ARRAY
36585: PPUSH
36586: CALL_OW 449
36590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36591: LD_ADDR_VAR 0 3
36595: PUSH
36596: LD_VAR 0 5
36600: PPUSH
36601: LD_INT 1
36603: PPUSH
36604: CALL_OW 275
36608: PUSH
36609: LD_VAR 0 4
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: GREATEREQUAL
36618: PUSH
36619: LD_VAR 0 5
36623: PPUSH
36624: LD_INT 2
36626: PPUSH
36627: CALL_OW 275
36631: PUSH
36632: LD_VAR 0 4
36636: PUSH
36637: LD_INT 2
36639: ARRAY
36640: GREATEREQUAL
36641: AND
36642: PUSH
36643: LD_VAR 0 5
36647: PPUSH
36648: LD_INT 3
36650: PPUSH
36651: CALL_OW 275
36655: PUSH
36656: LD_VAR 0 4
36660: PUSH
36661: LD_INT 3
36663: ARRAY
36664: GREATEREQUAL
36665: AND
36666: ST_TO_ADDR
// end ;
36667: LD_VAR 0 3
36671: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36672: LD_INT 0
36674: PPUSH
36675: PPUSH
36676: PPUSH
36677: PPUSH
// pom := GetBase ( building ) ;
36678: LD_ADDR_VAR 0 3
36682: PUSH
36683: LD_VAR 0 1
36687: PPUSH
36688: CALL_OW 274
36692: ST_TO_ADDR
// if not pom then
36693: LD_VAR 0 3
36697: NOT
36698: IFFALSE 36702
// exit ;
36700: GO 36872
// btype := GetBType ( building ) ;
36702: LD_ADDR_VAR 0 5
36706: PUSH
36707: LD_VAR 0 1
36711: PPUSH
36712: CALL_OW 266
36716: ST_TO_ADDR
// if btype = b_armoury then
36717: LD_VAR 0 5
36721: PUSH
36722: LD_INT 4
36724: EQUAL
36725: IFFALSE 36735
// btype := b_barracks ;
36727: LD_ADDR_VAR 0 5
36731: PUSH
36732: LD_INT 5
36734: ST_TO_ADDR
// if btype = b_depot then
36735: LD_VAR 0 5
36739: PUSH
36740: LD_INT 0
36742: EQUAL
36743: IFFALSE 36753
// btype := b_warehouse ;
36745: LD_ADDR_VAR 0 5
36749: PUSH
36750: LD_INT 1
36752: ST_TO_ADDR
// if btype = b_workshop then
36753: LD_VAR 0 5
36757: PUSH
36758: LD_INT 2
36760: EQUAL
36761: IFFALSE 36771
// btype := b_factory ;
36763: LD_ADDR_VAR 0 5
36767: PUSH
36768: LD_INT 3
36770: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36771: LD_ADDR_VAR 0 4
36775: PUSH
36776: LD_VAR 0 5
36780: PPUSH
36781: LD_VAR 0 1
36785: PPUSH
36786: CALL_OW 248
36790: PPUSH
36791: CALL_OW 450
36795: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36796: LD_ADDR_VAR 0 2
36800: PUSH
36801: LD_VAR 0 3
36805: PPUSH
36806: LD_INT 1
36808: PPUSH
36809: CALL_OW 275
36813: PUSH
36814: LD_VAR 0 4
36818: PUSH
36819: LD_INT 1
36821: ARRAY
36822: GREATEREQUAL
36823: PUSH
36824: LD_VAR 0 3
36828: PPUSH
36829: LD_INT 2
36831: PPUSH
36832: CALL_OW 275
36836: PUSH
36837: LD_VAR 0 4
36841: PUSH
36842: LD_INT 2
36844: ARRAY
36845: GREATEREQUAL
36846: AND
36847: PUSH
36848: LD_VAR 0 3
36852: PPUSH
36853: LD_INT 3
36855: PPUSH
36856: CALL_OW 275
36860: PUSH
36861: LD_VAR 0 4
36865: PUSH
36866: LD_INT 3
36868: ARRAY
36869: GREATEREQUAL
36870: AND
36871: ST_TO_ADDR
// end ;
36872: LD_VAR 0 2
36876: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36877: LD_INT 0
36879: PPUSH
36880: PPUSH
36881: PPUSH
// pom := GetBase ( building ) ;
36882: LD_ADDR_VAR 0 4
36886: PUSH
36887: LD_VAR 0 1
36891: PPUSH
36892: CALL_OW 274
36896: ST_TO_ADDR
// if not pom then
36897: LD_VAR 0 4
36901: NOT
36902: IFFALSE 36906
// exit ;
36904: GO 37007
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36906: LD_ADDR_VAR 0 5
36910: PUSH
36911: LD_VAR 0 2
36915: PPUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 248
36925: PPUSH
36926: CALL_OW 450
36930: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_VAR 0 4
36940: PPUSH
36941: LD_INT 1
36943: PPUSH
36944: CALL_OW 275
36948: PUSH
36949: LD_VAR 0 5
36953: PUSH
36954: LD_INT 1
36956: ARRAY
36957: GREATEREQUAL
36958: PUSH
36959: LD_VAR 0 4
36963: PPUSH
36964: LD_INT 2
36966: PPUSH
36967: CALL_OW 275
36971: PUSH
36972: LD_VAR 0 5
36976: PUSH
36977: LD_INT 2
36979: ARRAY
36980: GREATEREQUAL
36981: AND
36982: PUSH
36983: LD_VAR 0 4
36987: PPUSH
36988: LD_INT 3
36990: PPUSH
36991: CALL_OW 275
36995: PUSH
36996: LD_VAR 0 5
37000: PUSH
37001: LD_INT 3
37003: ARRAY
37004: GREATEREQUAL
37005: AND
37006: ST_TO_ADDR
// end ;
37007: LD_VAR 0 3
37011: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37012: LD_INT 0
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
37018: PPUSH
37019: PPUSH
37020: PPUSH
37021: PPUSH
37022: PPUSH
37023: PPUSH
37024: PPUSH
// result := false ;
37025: LD_ADDR_VAR 0 8
37029: PUSH
37030: LD_INT 0
37032: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37033: LD_VAR 0 5
37037: NOT
37038: PUSH
37039: LD_VAR 0 1
37043: NOT
37044: OR
37045: PUSH
37046: LD_VAR 0 2
37050: NOT
37051: OR
37052: PUSH
37053: LD_VAR 0 3
37057: NOT
37058: OR
37059: IFFALSE 37063
// exit ;
37061: GO 37877
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37063: LD_ADDR_VAR 0 14
37067: PUSH
37068: LD_VAR 0 1
37072: PPUSH
37073: LD_VAR 0 2
37077: PPUSH
37078: LD_VAR 0 3
37082: PPUSH
37083: LD_VAR 0 4
37087: PPUSH
37088: LD_VAR 0 5
37092: PUSH
37093: LD_INT 1
37095: ARRAY
37096: PPUSH
37097: CALL_OW 248
37101: PPUSH
37102: LD_INT 0
37104: PPUSH
37105: CALL 39114 0 6
37109: ST_TO_ADDR
// if not hexes then
37110: LD_VAR 0 14
37114: NOT
37115: IFFALSE 37119
// exit ;
37117: GO 37877
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37119: LD_ADDR_VAR 0 17
37123: PUSH
37124: LD_VAR 0 5
37128: PPUSH
37129: LD_INT 22
37131: PUSH
37132: LD_VAR 0 13
37136: PPUSH
37137: CALL_OW 255
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 30
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 30
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: PPUSH
37178: CALL_OW 72
37182: ST_TO_ADDR
// for i = 1 to hexes do
37183: LD_ADDR_VAR 0 9
37187: PUSH
37188: DOUBLE
37189: LD_INT 1
37191: DEC
37192: ST_TO_ADDR
37193: LD_VAR 0 14
37197: PUSH
37198: FOR_TO
37199: IFFALSE 37875
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37201: LD_ADDR_VAR 0 13
37205: PUSH
37206: LD_VAR 0 14
37210: PUSH
37211: LD_VAR 0 9
37215: ARRAY
37216: PUSH
37217: LD_INT 1
37219: ARRAY
37220: PPUSH
37221: LD_VAR 0 14
37225: PUSH
37226: LD_VAR 0 9
37230: ARRAY
37231: PUSH
37232: LD_INT 2
37234: ARRAY
37235: PPUSH
37236: CALL_OW 428
37240: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37241: LD_VAR 0 14
37245: PUSH
37246: LD_VAR 0 9
37250: ARRAY
37251: PUSH
37252: LD_INT 1
37254: ARRAY
37255: PPUSH
37256: LD_VAR 0 14
37260: PUSH
37261: LD_VAR 0 9
37265: ARRAY
37266: PUSH
37267: LD_INT 2
37269: ARRAY
37270: PPUSH
37271: CALL_OW 351
37275: PUSH
37276: LD_VAR 0 14
37280: PUSH
37281: LD_VAR 0 9
37285: ARRAY
37286: PUSH
37287: LD_INT 1
37289: ARRAY
37290: PPUSH
37291: LD_VAR 0 14
37295: PUSH
37296: LD_VAR 0 9
37300: ARRAY
37301: PUSH
37302: LD_INT 2
37304: ARRAY
37305: PPUSH
37306: CALL_OW 488
37310: NOT
37311: OR
37312: PUSH
37313: LD_VAR 0 13
37317: PPUSH
37318: CALL_OW 247
37322: PUSH
37323: LD_INT 3
37325: EQUAL
37326: OR
37327: IFFALSE 37333
// exit ;
37329: POP
37330: POP
37331: GO 37877
// if not tmp then
37333: LD_VAR 0 13
37337: NOT
37338: IFFALSE 37342
// continue ;
37340: GO 37198
// result := true ;
37342: LD_ADDR_VAR 0 8
37346: PUSH
37347: LD_INT 1
37349: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37350: LD_VAR 0 6
37354: PUSH
37355: LD_VAR 0 13
37359: PPUSH
37360: CALL_OW 247
37364: PUSH
37365: LD_INT 2
37367: EQUAL
37368: AND
37369: PUSH
37370: LD_VAR 0 13
37374: PPUSH
37375: CALL_OW 263
37379: PUSH
37380: LD_INT 1
37382: EQUAL
37383: AND
37384: IFFALSE 37548
// begin if IsDrivenBy ( tmp ) then
37386: LD_VAR 0 13
37390: PPUSH
37391: CALL_OW 311
37395: IFFALSE 37399
// continue ;
37397: GO 37198
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37399: LD_VAR 0 6
37403: PPUSH
37404: LD_INT 3
37406: PUSH
37407: LD_INT 60
37409: PUSH
37410: EMPTY
37411: LIST
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 3
37419: PUSH
37420: LD_INT 55
37422: PUSH
37423: EMPTY
37424: LIST
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PPUSH
37434: CALL_OW 72
37438: IFFALSE 37546
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37440: LD_ADDR_VAR 0 18
37444: PUSH
37445: LD_VAR 0 6
37449: PPUSH
37450: LD_INT 3
37452: PUSH
37453: LD_INT 60
37455: PUSH
37456: EMPTY
37457: LIST
37458: PUSH
37459: EMPTY
37460: LIST
37461: LIST
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: LD_INT 55
37468: PUSH
37469: EMPTY
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PPUSH
37480: CALL_OW 72
37484: PUSH
37485: LD_INT 1
37487: ARRAY
37488: ST_TO_ADDR
// if IsInUnit ( driver ) then
37489: LD_VAR 0 18
37493: PPUSH
37494: CALL_OW 310
37498: IFFALSE 37509
// ComExit ( driver ) ;
37500: LD_VAR 0 18
37504: PPUSH
37505: CALL 62298 0 1
// AddComEnterUnit ( driver , tmp ) ;
37509: LD_VAR 0 18
37513: PPUSH
37514: LD_VAR 0 13
37518: PPUSH
37519: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37523: LD_VAR 0 18
37527: PPUSH
37528: LD_VAR 0 7
37532: PPUSH
37533: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37537: LD_VAR 0 18
37541: PPUSH
37542: CALL_OW 181
// end ; continue ;
37546: GO 37198
// end ; if not cleaners or not tmp in cleaners then
37548: LD_VAR 0 6
37552: NOT
37553: PUSH
37554: LD_VAR 0 13
37558: PUSH
37559: LD_VAR 0 6
37563: IN
37564: NOT
37565: OR
37566: IFFALSE 37873
// begin if dep then
37568: LD_VAR 0 17
37572: IFFALSE 37708
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37574: LD_ADDR_VAR 0 16
37578: PUSH
37579: LD_VAR 0 17
37583: PUSH
37584: LD_INT 1
37586: ARRAY
37587: PPUSH
37588: CALL_OW 250
37592: PPUSH
37593: LD_VAR 0 17
37597: PUSH
37598: LD_INT 1
37600: ARRAY
37601: PPUSH
37602: CALL_OW 254
37606: PPUSH
37607: LD_INT 5
37609: PPUSH
37610: CALL_OW 272
37614: PUSH
37615: LD_VAR 0 17
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: PPUSH
37624: CALL_OW 251
37628: PPUSH
37629: LD_VAR 0 17
37633: PUSH
37634: LD_INT 1
37636: ARRAY
37637: PPUSH
37638: CALL_OW 254
37642: PPUSH
37643: LD_INT 5
37645: PPUSH
37646: CALL_OW 273
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37655: LD_VAR 0 16
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: LD_VAR 0 16
37668: PUSH
37669: LD_INT 2
37671: ARRAY
37672: PPUSH
37673: CALL_OW 488
37677: IFFALSE 37708
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37679: LD_VAR 0 13
37683: PPUSH
37684: LD_VAR 0 16
37688: PUSH
37689: LD_INT 1
37691: ARRAY
37692: PPUSH
37693: LD_VAR 0 16
37697: PUSH
37698: LD_INT 2
37700: ARRAY
37701: PPUSH
37702: CALL_OW 111
// continue ;
37706: GO 37198
// end ; end ; r := GetDir ( tmp ) ;
37708: LD_ADDR_VAR 0 15
37712: PUSH
37713: LD_VAR 0 13
37717: PPUSH
37718: CALL_OW 254
37722: ST_TO_ADDR
// if r = 5 then
37723: LD_VAR 0 15
37727: PUSH
37728: LD_INT 5
37730: EQUAL
37731: IFFALSE 37741
// r := 0 ;
37733: LD_ADDR_VAR 0 15
37737: PUSH
37738: LD_INT 0
37740: ST_TO_ADDR
// for j = r to 5 do
37741: LD_ADDR_VAR 0 10
37745: PUSH
37746: DOUBLE
37747: LD_VAR 0 15
37751: DEC
37752: ST_TO_ADDR
37753: LD_INT 5
37755: PUSH
37756: FOR_TO
37757: IFFALSE 37871
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37759: LD_ADDR_VAR 0 11
37763: PUSH
37764: LD_VAR 0 13
37768: PPUSH
37769: CALL_OW 250
37773: PPUSH
37774: LD_VAR 0 10
37778: PPUSH
37779: LD_INT 2
37781: PPUSH
37782: CALL_OW 272
37786: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37787: LD_ADDR_VAR 0 12
37791: PUSH
37792: LD_VAR 0 13
37796: PPUSH
37797: CALL_OW 251
37801: PPUSH
37802: LD_VAR 0 10
37806: PPUSH
37807: LD_INT 2
37809: PPUSH
37810: CALL_OW 273
37814: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37815: LD_VAR 0 11
37819: PPUSH
37820: LD_VAR 0 12
37824: PPUSH
37825: CALL_OW 488
37829: PUSH
37830: LD_VAR 0 11
37834: PPUSH
37835: LD_VAR 0 12
37839: PPUSH
37840: CALL_OW 428
37844: NOT
37845: AND
37846: IFFALSE 37869
// begin ComMoveXY ( tmp , _x , _y ) ;
37848: LD_VAR 0 13
37852: PPUSH
37853: LD_VAR 0 11
37857: PPUSH
37858: LD_VAR 0 12
37862: PPUSH
37863: CALL_OW 111
// break ;
37867: GO 37871
// end ; end ;
37869: GO 37756
37871: POP
37872: POP
// end ; end ;
37873: GO 37198
37875: POP
37876: POP
// end ;
37877: LD_VAR 0 8
37881: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37882: LD_INT 0
37884: PPUSH
// result := true ;
37885: LD_ADDR_VAR 0 3
37889: PUSH
37890: LD_INT 1
37892: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37893: LD_VAR 0 2
37897: PUSH
37898: LD_INT 24
37900: DOUBLE
37901: EQUAL
37902: IFTRUE 37912
37904: LD_INT 33
37906: DOUBLE
37907: EQUAL
37908: IFTRUE 37912
37910: GO 37937
37912: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37913: LD_ADDR_VAR 0 3
37917: PUSH
37918: LD_INT 32
37920: PPUSH
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL_OW 321
37930: PUSH
37931: LD_INT 2
37933: EQUAL
37934: ST_TO_ADDR
37935: GO 38257
37937: LD_INT 20
37939: DOUBLE
37940: EQUAL
37941: IFTRUE 37945
37943: GO 37970
37945: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37946: LD_ADDR_VAR 0 3
37950: PUSH
37951: LD_INT 6
37953: PPUSH
37954: LD_VAR 0 1
37958: PPUSH
37959: CALL_OW 321
37963: PUSH
37964: LD_INT 2
37966: EQUAL
37967: ST_TO_ADDR
37968: GO 38257
37970: LD_INT 22
37972: DOUBLE
37973: EQUAL
37974: IFTRUE 37984
37976: LD_INT 36
37978: DOUBLE
37979: EQUAL
37980: IFTRUE 37984
37982: GO 38009
37984: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37985: LD_ADDR_VAR 0 3
37989: PUSH
37990: LD_INT 15
37992: PPUSH
37993: LD_VAR 0 1
37997: PPUSH
37998: CALL_OW 321
38002: PUSH
38003: LD_INT 2
38005: EQUAL
38006: ST_TO_ADDR
38007: GO 38257
38009: LD_INT 30
38011: DOUBLE
38012: EQUAL
38013: IFTRUE 38017
38015: GO 38042
38017: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38018: LD_ADDR_VAR 0 3
38022: PUSH
38023: LD_INT 20
38025: PPUSH
38026: LD_VAR 0 1
38030: PPUSH
38031: CALL_OW 321
38035: PUSH
38036: LD_INT 2
38038: EQUAL
38039: ST_TO_ADDR
38040: GO 38257
38042: LD_INT 28
38044: DOUBLE
38045: EQUAL
38046: IFTRUE 38056
38048: LD_INT 21
38050: DOUBLE
38051: EQUAL
38052: IFTRUE 38056
38054: GO 38081
38056: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38057: LD_ADDR_VAR 0 3
38061: PUSH
38062: LD_INT 21
38064: PPUSH
38065: LD_VAR 0 1
38069: PPUSH
38070: CALL_OW 321
38074: PUSH
38075: LD_INT 2
38077: EQUAL
38078: ST_TO_ADDR
38079: GO 38257
38081: LD_INT 16
38083: DOUBLE
38084: EQUAL
38085: IFTRUE 38089
38087: GO 38116
38089: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38090: LD_ADDR_VAR 0 3
38094: PUSH
38095: LD_EXP 36
38099: PPUSH
38100: LD_VAR 0 1
38104: PPUSH
38105: CALL_OW 321
38109: PUSH
38110: LD_INT 2
38112: EQUAL
38113: ST_TO_ADDR
38114: GO 38257
38116: LD_INT 19
38118: DOUBLE
38119: EQUAL
38120: IFTRUE 38130
38122: LD_INT 23
38124: DOUBLE
38125: EQUAL
38126: IFTRUE 38130
38128: GO 38157
38130: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38131: LD_ADDR_VAR 0 3
38135: PUSH
38136: LD_EXP 35
38140: PPUSH
38141: LD_VAR 0 1
38145: PPUSH
38146: CALL_OW 321
38150: PUSH
38151: LD_INT 2
38153: EQUAL
38154: ST_TO_ADDR
38155: GO 38257
38157: LD_INT 17
38159: DOUBLE
38160: EQUAL
38161: IFTRUE 38165
38163: GO 38190
38165: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38166: LD_ADDR_VAR 0 3
38170: PUSH
38171: LD_INT 39
38173: PPUSH
38174: LD_VAR 0 1
38178: PPUSH
38179: CALL_OW 321
38183: PUSH
38184: LD_INT 2
38186: EQUAL
38187: ST_TO_ADDR
38188: GO 38257
38190: LD_INT 18
38192: DOUBLE
38193: EQUAL
38194: IFTRUE 38198
38196: GO 38223
38198: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38199: LD_ADDR_VAR 0 3
38203: PUSH
38204: LD_INT 40
38206: PPUSH
38207: LD_VAR 0 1
38211: PPUSH
38212: CALL_OW 321
38216: PUSH
38217: LD_INT 2
38219: EQUAL
38220: ST_TO_ADDR
38221: GO 38257
38223: LD_INT 27
38225: DOUBLE
38226: EQUAL
38227: IFTRUE 38231
38229: GO 38256
38231: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38232: LD_ADDR_VAR 0 3
38236: PUSH
38237: LD_INT 35
38239: PPUSH
38240: LD_VAR 0 1
38244: PPUSH
38245: CALL_OW 321
38249: PUSH
38250: LD_INT 2
38252: EQUAL
38253: ST_TO_ADDR
38254: GO 38257
38256: POP
// end ;
38257: LD_VAR 0 3
38261: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38262: LD_INT 0
38264: PPUSH
38265: PPUSH
38266: PPUSH
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
38272: PPUSH
38273: PPUSH
38274: PPUSH
// result := false ;
38275: LD_ADDR_VAR 0 6
38279: PUSH
38280: LD_INT 0
38282: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38283: LD_VAR 0 1
38287: NOT
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 266
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: LD_INT 1
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: IN
38309: NOT
38310: OR
38311: PUSH
38312: LD_VAR 0 2
38316: NOT
38317: OR
38318: PUSH
38319: LD_VAR 0 5
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: LD_INT 2
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 4
38338: PUSH
38339: LD_INT 5
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: IN
38350: NOT
38351: OR
38352: PUSH
38353: LD_VAR 0 3
38357: PPUSH
38358: LD_VAR 0 4
38362: PPUSH
38363: CALL_OW 488
38367: NOT
38368: OR
38369: IFFALSE 38373
// exit ;
38371: GO 39109
// side := GetSide ( depot ) ;
38373: LD_ADDR_VAR 0 9
38377: PUSH
38378: LD_VAR 0 1
38382: PPUSH
38383: CALL_OW 255
38387: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38388: LD_VAR 0 9
38392: PPUSH
38393: LD_VAR 0 2
38397: PPUSH
38398: CALL 37882 0 2
38402: NOT
38403: IFFALSE 38407
// exit ;
38405: GO 39109
// pom := GetBase ( depot ) ;
38407: LD_ADDR_VAR 0 10
38411: PUSH
38412: LD_VAR 0 1
38416: PPUSH
38417: CALL_OW 274
38421: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38422: LD_ADDR_VAR 0 11
38426: PUSH
38427: LD_VAR 0 2
38431: PPUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: CALL_OW 248
38441: PPUSH
38442: CALL_OW 450
38446: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38447: LD_VAR 0 10
38451: PPUSH
38452: LD_INT 1
38454: PPUSH
38455: CALL_OW 275
38459: PUSH
38460: LD_VAR 0 11
38464: PUSH
38465: LD_INT 1
38467: ARRAY
38468: GREATEREQUAL
38469: PUSH
38470: LD_VAR 0 10
38474: PPUSH
38475: LD_INT 2
38477: PPUSH
38478: CALL_OW 275
38482: PUSH
38483: LD_VAR 0 11
38487: PUSH
38488: LD_INT 2
38490: ARRAY
38491: GREATEREQUAL
38492: AND
38493: PUSH
38494: LD_VAR 0 10
38498: PPUSH
38499: LD_INT 3
38501: PPUSH
38502: CALL_OW 275
38506: PUSH
38507: LD_VAR 0 11
38511: PUSH
38512: LD_INT 3
38514: ARRAY
38515: GREATEREQUAL
38516: AND
38517: NOT
38518: IFFALSE 38522
// exit ;
38520: GO 39109
// if GetBType ( depot ) = b_depot then
38522: LD_VAR 0 1
38526: PPUSH
38527: CALL_OW 266
38531: PUSH
38532: LD_INT 0
38534: EQUAL
38535: IFFALSE 38547
// dist := 28 else
38537: LD_ADDR_VAR 0 14
38541: PUSH
38542: LD_INT 28
38544: ST_TO_ADDR
38545: GO 38555
// dist := 36 ;
38547: LD_ADDR_VAR 0 14
38551: PUSH
38552: LD_INT 36
38554: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38555: LD_VAR 0 1
38559: PPUSH
38560: LD_VAR 0 3
38564: PPUSH
38565: LD_VAR 0 4
38569: PPUSH
38570: CALL_OW 297
38574: PUSH
38575: LD_VAR 0 14
38579: GREATER
38580: IFFALSE 38584
// exit ;
38582: GO 39109
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38584: LD_ADDR_VAR 0 12
38588: PUSH
38589: LD_VAR 0 2
38593: PPUSH
38594: LD_VAR 0 3
38598: PPUSH
38599: LD_VAR 0 4
38603: PPUSH
38604: LD_VAR 0 5
38608: PPUSH
38609: LD_VAR 0 1
38613: PPUSH
38614: CALL_OW 248
38618: PPUSH
38619: LD_INT 0
38621: PPUSH
38622: CALL 39114 0 6
38626: ST_TO_ADDR
// if not hexes then
38627: LD_VAR 0 12
38631: NOT
38632: IFFALSE 38636
// exit ;
38634: GO 39109
// hex := GetHexInfo ( x , y ) ;
38636: LD_ADDR_VAR 0 15
38640: PUSH
38641: LD_VAR 0 3
38645: PPUSH
38646: LD_VAR 0 4
38650: PPUSH
38651: CALL_OW 546
38655: ST_TO_ADDR
// if hex [ 1 ] then
38656: LD_VAR 0 15
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: IFFALSE 38668
// exit ;
38666: GO 39109
// height := hex [ 2 ] ;
38668: LD_ADDR_VAR 0 13
38672: PUSH
38673: LD_VAR 0 15
38677: PUSH
38678: LD_INT 2
38680: ARRAY
38681: ST_TO_ADDR
// for i = 1 to hexes do
38682: LD_ADDR_VAR 0 7
38686: PUSH
38687: DOUBLE
38688: LD_INT 1
38690: DEC
38691: ST_TO_ADDR
38692: LD_VAR 0 12
38696: PUSH
38697: FOR_TO
38698: IFFALSE 39028
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38700: LD_VAR 0 12
38704: PUSH
38705: LD_VAR 0 7
38709: ARRAY
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: PPUSH
38715: LD_VAR 0 12
38719: PUSH
38720: LD_VAR 0 7
38724: ARRAY
38725: PUSH
38726: LD_INT 2
38728: ARRAY
38729: PPUSH
38730: CALL_OW 488
38734: NOT
38735: PUSH
38736: LD_VAR 0 12
38740: PUSH
38741: LD_VAR 0 7
38745: ARRAY
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: LD_VAR 0 12
38755: PUSH
38756: LD_VAR 0 7
38760: ARRAY
38761: PUSH
38762: LD_INT 2
38764: ARRAY
38765: PPUSH
38766: CALL_OW 428
38770: PUSH
38771: LD_INT 0
38773: GREATER
38774: OR
38775: PUSH
38776: LD_VAR 0 12
38780: PUSH
38781: LD_VAR 0 7
38785: ARRAY
38786: PUSH
38787: LD_INT 1
38789: ARRAY
38790: PPUSH
38791: LD_VAR 0 12
38795: PUSH
38796: LD_VAR 0 7
38800: ARRAY
38801: PUSH
38802: LD_INT 2
38804: ARRAY
38805: PPUSH
38806: CALL_OW 351
38810: OR
38811: IFFALSE 38817
// exit ;
38813: POP
38814: POP
38815: GO 39109
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38817: LD_ADDR_VAR 0 8
38821: PUSH
38822: LD_VAR 0 12
38826: PUSH
38827: LD_VAR 0 7
38831: ARRAY
38832: PUSH
38833: LD_INT 1
38835: ARRAY
38836: PPUSH
38837: LD_VAR 0 12
38841: PUSH
38842: LD_VAR 0 7
38846: ARRAY
38847: PUSH
38848: LD_INT 2
38850: ARRAY
38851: PPUSH
38852: CALL_OW 546
38856: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38857: LD_VAR 0 8
38861: PUSH
38862: LD_INT 1
38864: ARRAY
38865: PUSH
38866: LD_VAR 0 8
38870: PUSH
38871: LD_INT 2
38873: ARRAY
38874: PUSH
38875: LD_VAR 0 13
38879: PUSH
38880: LD_INT 2
38882: PLUS
38883: GREATER
38884: OR
38885: PUSH
38886: LD_VAR 0 8
38890: PUSH
38891: LD_INT 2
38893: ARRAY
38894: PUSH
38895: LD_VAR 0 13
38899: PUSH
38900: LD_INT 2
38902: MINUS
38903: LESS
38904: OR
38905: PUSH
38906: LD_VAR 0 8
38910: PUSH
38911: LD_INT 3
38913: ARRAY
38914: PUSH
38915: LD_INT 0
38917: PUSH
38918: LD_INT 8
38920: PUSH
38921: LD_INT 9
38923: PUSH
38924: LD_INT 10
38926: PUSH
38927: LD_INT 11
38929: PUSH
38930: LD_INT 12
38932: PUSH
38933: LD_INT 13
38935: PUSH
38936: LD_INT 16
38938: PUSH
38939: LD_INT 17
38941: PUSH
38942: LD_INT 18
38944: PUSH
38945: LD_INT 19
38947: PUSH
38948: LD_INT 20
38950: PUSH
38951: LD_INT 21
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: LIST
38958: LIST
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: IN
38969: NOT
38970: OR
38971: PUSH
38972: LD_VAR 0 8
38976: PUSH
38977: LD_INT 5
38979: ARRAY
38980: NOT
38981: OR
38982: PUSH
38983: LD_VAR 0 8
38987: PUSH
38988: LD_INT 6
38990: ARRAY
38991: PUSH
38992: LD_INT 1
38994: PUSH
38995: LD_INT 2
38997: PUSH
38998: LD_INT 7
39000: PUSH
39001: LD_INT 9
39003: PUSH
39004: LD_INT 10
39006: PUSH
39007: LD_INT 11
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: IN
39018: NOT
39019: OR
39020: IFFALSE 39026
// exit ;
39022: POP
39023: POP
39024: GO 39109
// end ;
39026: GO 38697
39028: POP
39029: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39030: LD_VAR 0 9
39034: PPUSH
39035: LD_VAR 0 3
39039: PPUSH
39040: LD_VAR 0 4
39044: PPUSH
39045: LD_INT 20
39047: PPUSH
39048: CALL 31055 0 4
39052: PUSH
39053: LD_INT 4
39055: ARRAY
39056: IFFALSE 39060
// exit ;
39058: GO 39109
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39060: LD_VAR 0 2
39064: PUSH
39065: LD_INT 29
39067: PUSH
39068: LD_INT 30
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: IN
39075: PUSH
39076: LD_VAR 0 3
39080: PPUSH
39081: LD_VAR 0 4
39085: PPUSH
39086: LD_VAR 0 9
39090: PPUSH
39091: CALL_OW 440
39095: NOT
39096: AND
39097: IFFALSE 39101
// exit ;
39099: GO 39109
// result := true ;
39101: LD_ADDR_VAR 0 6
39105: PUSH
39106: LD_INT 1
39108: ST_TO_ADDR
// end ;
39109: LD_VAR 0 6
39113: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39114: LD_INT 0
39116: PPUSH
39117: PPUSH
39118: PPUSH
39119: PPUSH
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
39126: PPUSH
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
39131: PPUSH
39132: PPUSH
39133: PPUSH
39134: PPUSH
39135: PPUSH
39136: PPUSH
39137: PPUSH
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
// result = [ ] ;
39174: LD_ADDR_VAR 0 7
39178: PUSH
39179: EMPTY
39180: ST_TO_ADDR
// temp_list = [ ] ;
39181: LD_ADDR_VAR 0 9
39185: PUSH
39186: EMPTY
39187: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39188: LD_VAR 0 4
39192: PUSH
39193: LD_INT 0
39195: PUSH
39196: LD_INT 1
39198: PUSH
39199: LD_INT 2
39201: PUSH
39202: LD_INT 3
39204: PUSH
39205: LD_INT 4
39207: PUSH
39208: LD_INT 5
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: IN
39219: NOT
39220: PUSH
39221: LD_VAR 0 1
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: LD_INT 1
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: IN
39236: PUSH
39237: LD_VAR 0 5
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 2
39247: PUSH
39248: LD_INT 3
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: LIST
39255: IN
39256: NOT
39257: AND
39258: OR
39259: IFFALSE 39263
// exit ;
39261: GO 57654
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39263: LD_VAR 0 1
39267: PUSH
39268: LD_INT 6
39270: PUSH
39271: LD_INT 7
39273: PUSH
39274: LD_INT 8
39276: PUSH
39277: LD_INT 13
39279: PUSH
39280: LD_INT 12
39282: PUSH
39283: LD_INT 15
39285: PUSH
39286: LD_INT 11
39288: PUSH
39289: LD_INT 14
39291: PUSH
39292: LD_INT 10
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: LIST
39304: LIST
39305: IN
39306: IFFALSE 39316
// btype = b_lab ;
39308: LD_ADDR_VAR 0 1
39312: PUSH
39313: LD_INT 6
39315: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39316: LD_VAR 0 6
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: LD_INT 2
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: IN
39335: NOT
39336: PUSH
39337: LD_VAR 0 1
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: LD_INT 2
39350: PUSH
39351: LD_INT 3
39353: PUSH
39354: LD_INT 6
39356: PUSH
39357: LD_INT 36
39359: PUSH
39360: LD_INT 4
39362: PUSH
39363: LD_INT 5
39365: PUSH
39366: LD_INT 31
39368: PUSH
39369: LD_INT 32
39371: PUSH
39372: LD_INT 33
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: IN
39388: NOT
39389: PUSH
39390: LD_VAR 0 6
39394: PUSH
39395: LD_INT 1
39397: EQUAL
39398: AND
39399: OR
39400: PUSH
39401: LD_VAR 0 1
39405: PUSH
39406: LD_INT 2
39408: PUSH
39409: LD_INT 3
39411: PUSH
39412: EMPTY
39413: LIST
39414: LIST
39415: IN
39416: NOT
39417: PUSH
39418: LD_VAR 0 6
39422: PUSH
39423: LD_INT 2
39425: EQUAL
39426: AND
39427: OR
39428: IFFALSE 39438
// mode = 0 ;
39430: LD_ADDR_VAR 0 6
39434: PUSH
39435: LD_INT 0
39437: ST_TO_ADDR
// case mode of 0 :
39438: LD_VAR 0 6
39442: PUSH
39443: LD_INT 0
39445: DOUBLE
39446: EQUAL
39447: IFTRUE 39451
39449: GO 50904
39451: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39452: LD_ADDR_VAR 0 11
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 0
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: LD_INT 0
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 1
39521: NEG
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: NEG
39534: PUSH
39535: LD_INT 2
39537: NEG
39538: PUSH
39539: EMPTY
39540: LIST
39541: LIST
39542: PUSH
39543: LD_INT 0
39545: PUSH
39546: LD_INT 2
39548: NEG
39549: PUSH
39550: EMPTY
39551: LIST
39552: LIST
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: LD_INT 1
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 0
39577: PUSH
39578: LD_INT 2
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: LD_INT 1
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: LD_INT 3
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 0
39608: PUSH
39609: LD_INT 3
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: LD_INT 2
39622: PUSH
39623: EMPTY
39624: LIST
39625: LIST
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39645: LD_ADDR_VAR 0 12
39649: PUSH
39650: LD_INT 0
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 1
39683: PUSH
39684: LD_INT 1
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: PUSH
39691: LD_INT 0
39693: PUSH
39694: LD_INT 1
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: NEG
39715: PUSH
39716: LD_INT 1
39718: NEG
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: LD_INT 1
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: PUSH
39738: LD_INT 0
39740: PUSH
39741: EMPTY
39742: LIST
39743: LIST
39744: PUSH
39745: LD_INT 2
39747: PUSH
39748: LD_INT 1
39750: PUSH
39751: EMPTY
39752: LIST
39753: LIST
39754: PUSH
39755: LD_INT 1
39757: NEG
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: NEG
39784: PUSH
39785: EMPTY
39786: LIST
39787: LIST
39788: PUSH
39789: LD_INT 2
39791: NEG
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 3
39802: NEG
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39841: LD_ADDR_VAR 0 13
39845: PUSH
39846: LD_INT 0
39848: PUSH
39849: LD_INT 0
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 1
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: LD_INT 0
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 1
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 1
39922: NEG
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: LD_INT 2
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: LD_INT 2
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 2
39988: NEG
39989: PUSH
39990: LD_INT 3
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 3
40000: NEG
40001: PUSH
40002: LD_INT 2
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 3
40012: NEG
40013: PUSH
40014: LD_INT 3
40016: NEG
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40040: LD_ADDR_VAR 0 14
40044: PUSH
40045: LD_INT 0
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: EMPTY
40063: LIST
40064: LIST
40065: PUSH
40066: LD_INT 1
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: LD_INT 1
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 0
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 1
40098: NEG
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 2
40125: NEG
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 0
40133: PUSH
40134: LD_INT 2
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 1
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 0
40165: PUSH
40166: LD_INT 2
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: LD_INT 3
40201: NEG
40202: PUSH
40203: EMPTY
40204: LIST
40205: LIST
40206: PUSH
40207: LD_INT 1
40209: PUSH
40210: LD_INT 2
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: LIST
40225: LIST
40226: LIST
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40236: LD_ADDR_VAR 0 15
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: LD_INT 0
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 1
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 0
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 1
40294: NEG
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: NEG
40306: PUSH
40307: LD_INT 1
40309: NEG
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 1
40320: NEG
40321: PUSH
40322: EMPTY
40323: LIST
40324: LIST
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 0
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: LD_INT 1
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 2
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 1
40385: NEG
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 3
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 3
40403: PUSH
40404: LD_INT 1
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40429: LD_ADDR_VAR 0 16
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 1
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: PUSH
40468: LD_INT 1
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: LD_INT 1
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 0
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 1
40498: NEG
40499: PUSH
40500: LD_INT 1
40502: NEG
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: LD_INT 2
40514: NEG
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 1
40556: NEG
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: LD_INT 2
40568: NEG
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 3
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 3
40586: PUSH
40587: LD_INT 3
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 2
40596: PUSH
40597: LD_INT 3
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: LIST
40620: LIST
40621: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40622: LD_ADDR_VAR 0 17
40626: PUSH
40627: LD_INT 0
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 0
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: LD_INT 1
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 0
40670: PUSH
40671: LD_INT 1
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: LD_INT 1
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 2
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 2
40718: NEG
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 1
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 2
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 2
40757: PUSH
40758: LD_INT 2
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: LD_INT 2
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: LD_INT 2
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: EMPTY
40793: LIST
40794: LIST
40795: PUSH
40796: LD_INT 2
40798: NEG
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 2
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: LD_INT 2
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40852: LD_ADDR_VAR 0 18
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: PUSH
40943: LD_INT 0
40945: PUSH
40946: LD_INT 2
40948: NEG
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 0
41007: PUSH
41008: LD_INT 2
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: LD_INT 1
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: NEG
41052: PUSH
41053: LD_INT 2
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: EMPTY
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41082: LD_ADDR_VAR 0 19
41086: PUSH
41087: LD_INT 0
41089: PUSH
41090: LD_INT 0
41092: PUSH
41093: EMPTY
41094: LIST
41095: LIST
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 1
41102: NEG
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: LD_INT 1
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 1
41140: NEG
41141: PUSH
41142: LD_INT 0
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: NEG
41152: PUSH
41153: LD_INT 1
41155: NEG
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 0
41175: PUSH
41176: LD_INT 2
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 2
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: NEG
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 2
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: NEG
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: LD_INT 2
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: LIST
41295: LIST
41296: LIST
41297: LIST
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: LIST
41306: LIST
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41312: LD_ADDR_VAR 0 20
41316: PUSH
41317: LD_INT 0
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 0
41329: PUSH
41330: LD_INT 1
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 1
41340: PUSH
41341: LD_INT 0
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 1
41350: PUSH
41351: LD_INT 1
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 0
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: NEG
41371: PUSH
41372: LD_INT 0
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 1
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 2
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 2
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 2
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 0
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 1
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 2
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: LD_INT 2
41515: NEG
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41542: LD_ADDR_VAR 0 21
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41772: LD_ADDR_VAR 0 22
41776: PUSH
41777: LD_INT 0
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 0
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 0
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: NEG
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 2
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 2
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: LD_INT 1
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 2
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42002: LD_ADDR_VAR 0 23
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 0
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 0
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 2
42087: NEG
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: LD_INT 0
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: PUSH
42128: LD_INT 1
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 2
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 1
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 0
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: LD_INT 1
42171: PUSH
42172: EMPTY
42173: LIST
42174: LIST
42175: PUSH
42176: LD_INT 2
42178: NEG
42179: PUSH
42180: LD_INT 0
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 2
42205: NEG
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: LD_INT 3
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 1
42225: NEG
42226: PUSH
42227: LD_INT 3
42229: NEG
42230: PUSH
42231: EMPTY
42232: LIST
42233: LIST
42234: PUSH
42235: LD_INT 1
42237: PUSH
42238: LD_INT 2
42240: NEG
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: LD_INT 1
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42282: LD_ADDR_VAR 0 24
42286: PUSH
42287: LD_INT 0
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: LD_INT 1
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 2
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: LD_INT 2
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: PUSH
42408: LD_INT 1
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: PUSH
42418: LD_INT 2
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 1
42427: PUSH
42428: LD_INT 2
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 0
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 2
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 2
42481: NEG
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 2
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 3
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42558: LD_ADDR_VAR 0 25
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 0
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: EMPTY
42591: LIST
42592: LIST
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: LD_INT 1
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 0
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 1
42616: NEG
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 1
42639: NEG
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 0
42651: PUSH
42652: LD_INT 2
42654: NEG
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 1
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: LD_INT 2
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: PUSH
42701: LD_INT 1
42703: PUSH
42704: LD_INT 2
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 0
42713: PUSH
42714: LD_INT 2
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 1
42723: NEG
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: PUSH
42732: LD_INT 2
42734: NEG
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 2
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 2
42757: NEG
42758: PUSH
42759: LD_INT 2
42761: NEG
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 3
42779: PUSH
42780: LD_INT 2
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 2
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 1
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42832: LD_ADDR_VAR 0 26
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 0
42849: PUSH
42850: LD_INT 1
42852: NEG
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: PUSH
42871: LD_INT 1
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: NEG
42902: PUSH
42903: LD_INT 1
42905: NEG
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 1
42913: NEG
42914: PUSH
42915: LD_INT 2
42917: NEG
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 0
42925: PUSH
42926: LD_INT 2
42928: NEG
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: LD_INT 1
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 2
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 2
42957: PUSH
42958: LD_INT 1
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 2
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 2
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 2
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 2
43008: NEG
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: NEG
43024: PUSH
43025: EMPTY
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 2
43031: NEG
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: PUSH
43054: LD_INT 3
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 2
43074: NEG
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: LIST
43087: LIST
43088: LIST
43089: LIST
43090: LIST
43091: LIST
43092: LIST
43093: LIST
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43108: LD_ADDR_VAR 0 27
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: PUSH
43137: LD_INT 0
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: NEG
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 1
43177: NEG
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: LD_INT 1
43189: NEG
43190: PUSH
43191: LD_INT 2
43193: NEG
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 2
43204: NEG
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 1
43212: PUSH
43213: LD_INT 1
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 1
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 0
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 1
43273: NEG
43274: PUSH
43275: LD_INT 1
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 2
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: LD_INT 2
43311: NEG
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 2
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 3
43341: NEG
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 3
43353: NEG
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43388: LD_ADDR_VAR 0 28
43392: PUSH
43393: LD_INT 0
43395: PUSH
43396: LD_INT 0
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 1
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 1
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: LD_INT 0
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: NEG
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 1
43469: NEG
43470: PUSH
43471: LD_INT 2
43473: NEG
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 0
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 1
43492: PUSH
43493: LD_INT 1
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 1
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 1
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 0
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: NEG
43554: PUSH
43555: LD_INT 1
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: LD_INT 2
43564: NEG
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 2
43575: NEG
43576: PUSH
43577: LD_INT 1
43579: NEG
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 2
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: LD_INT 3
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 1
43611: NEG
43612: PUSH
43613: LD_INT 3
43615: NEG
43616: PUSH
43617: EMPTY
43618: LIST
43619: LIST
43620: PUSH
43621: LD_INT 3
43623: NEG
43624: PUSH
43625: LD_INT 1
43627: NEG
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 3
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43670: LD_ADDR_VAR 0 29
43674: PUSH
43675: LD_INT 0
43677: PUSH
43678: LD_INT 0
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 1
43698: PUSH
43699: LD_INT 0
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 1
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: LD_INT 0
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: EMPTY
43746: LIST
43747: LIST
43748: PUSH
43749: LD_INT 1
43751: NEG
43752: PUSH
43753: LD_INT 2
43755: NEG
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 1
43774: PUSH
43775: LD_INT 1
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 2
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: PUSH
43796: LD_INT 1
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: LD_INT 1
43805: PUSH
43806: LD_INT 2
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: LD_INT 1
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 2
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 2
43848: NEG
43849: PUSH
43850: LD_INT 2
43852: NEG
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: LD_INT 2
43860: NEG
43861: PUSH
43862: LD_INT 3
43864: NEG
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 3
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: LD_INT 3
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: LD_INT 2
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 3
43914: NEG
43915: PUSH
43916: LD_INT 2
43918: NEG
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43949: LD_ADDR_VAR 0 30
43953: PUSH
43954: LD_INT 0
43956: PUSH
43957: LD_INT 0
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 0
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 2
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: LD_INT 2
44045: NEG
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: LD_INT 1
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 2
44064: PUSH
44065: LD_INT 0
44067: PUSH
44068: EMPTY
44069: LIST
44070: LIST
44071: PUSH
44072: LD_INT 2
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: LD_INT 2
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 2
44115: NEG
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: NEG
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 1
44138: NEG
44139: PUSH
44140: LD_INT 3
44142: NEG
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 2
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 3
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 2
44171: PUSH
44172: LD_INT 3
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 2
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 3
44192: NEG
44193: PUSH
44194: LD_INT 1
44196: NEG
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44227: LD_ADDR_VAR 0 31
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 0
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 0
44244: PUSH
44245: LD_INT 1
44247: NEG
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: LD_INT 0
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 0
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: EMPTY
44315: LIST
44316: LIST
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: LD_INT 1
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 2
44331: PUSH
44332: LD_INT 0
44334: PUSH
44335: EMPTY
44336: LIST
44337: LIST
44338: PUSH
44339: LD_INT 2
44341: PUSH
44342: LD_INT 1
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: PUSH
44352: LD_INT 2
44354: PUSH
44355: EMPTY
44356: LIST
44357: LIST
44358: PUSH
44359: LD_INT 1
44361: PUSH
44362: LD_INT 2
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: LD_INT 0
44371: PUSH
44372: LD_INT 2
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 2
44392: NEG
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 2
44404: NEG
44405: PUSH
44406: LD_INT 2
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 2
44416: NEG
44417: PUSH
44418: LD_INT 3
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 2
44428: PUSH
44429: LD_INT 1
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 3
44439: PUSH
44440: LD_INT 1
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 1
44459: NEG
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 3
44470: NEG
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: EMPTY
44477: LIST
44478: LIST
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44505: LD_ADDR_VAR 0 32
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: LD_INT 1
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: LD_INT 0
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 1
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 0
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: NEG
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 1
44578: NEG
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 1
44609: PUSH
44610: LD_INT 1
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 2
44630: PUSH
44631: LD_INT 2
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 2
44671: NEG
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: NEG
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: PUSH
44692: LD_INT 1
44694: NEG
44695: PUSH
44696: LD_INT 3
44698: NEG
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 3
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 3
44748: NEG
44749: PUSH
44750: LD_INT 1
44752: NEG
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44783: LD_ADDR_VAR 0 33
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: LD_INT 0
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 0
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 1
44841: NEG
44842: PUSH
44843: LD_INT 0
44845: PUSH
44846: EMPTY
44847: LIST
44848: LIST
44849: PUSH
44850: LD_INT 1
44852: NEG
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: LD_INT 2
44868: NEG
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: LD_INT 0
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: LD_INT 2
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: LD_INT 1
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 2
44938: NEG
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 2
44961: NEG
44962: PUSH
44963: LD_INT 2
44965: NEG
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: LD_INT 3
44977: NEG
44978: PUSH
44979: EMPTY
44980: LIST
44981: LIST
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 1
44988: NEG
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 1
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: LD_INT 2
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 3
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45062: LD_ADDR_VAR 0 34
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: NEG
45132: PUSH
45133: LD_INT 1
45135: NEG
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: LD_INT 2
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 2
45158: NEG
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 2
45177: PUSH
45178: LD_INT 1
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 2
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: LD_INT 1
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: NEG
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: LD_INT 2
45245: NEG
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 1
45253: NEG
45254: PUSH
45255: LD_INT 3
45257: NEG
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: LD_INT 2
45268: NEG
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 3
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: EMPTY
45281: LIST
45282: LIST
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: LD_INT 3
45289: PUSH
45290: EMPTY
45291: LIST
45292: LIST
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: LD_INT 1
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 3
45307: NEG
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45342: LD_ADDR_VAR 0 35
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 0
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 0
45359: PUSH
45360: LD_INT 1
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 1
45370: PUSH
45371: LD_INT 0
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 1
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 1
45400: NEG
45401: PUSH
45402: LD_INT 0
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45454: LD_ADDR_VAR 0 36
45458: PUSH
45459: LD_INT 0
45461: PUSH
45462: LD_INT 0
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 1
45482: PUSH
45483: LD_INT 0
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: LD_INT 1
45495: PUSH
45496: EMPTY
45497: LIST
45498: LIST
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: LD_INT 1
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: LD_INT 0
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 1
45527: NEG
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: NEG
45540: PUSH
45541: EMPTY
45542: LIST
45543: LIST
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: LD_INT 2
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: LIST
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45566: LD_ADDR_VAR 0 37
45570: PUSH
45571: LD_INT 0
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: LD_INT 0
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: LD_INT 1
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 0
45614: PUSH
45615: LD_INT 1
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: NEG
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 1
45650: NEG
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: PUSH
45656: LD_INT 1
45658: NEG
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45678: LD_ADDR_VAR 0 38
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 1
45706: PUSH
45707: LD_INT 0
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: EMPTY
45721: LIST
45722: LIST
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 1
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 1
45736: NEG
45737: PUSH
45738: LD_INT 0
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 1
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: LD_INT 1
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45790: LD_ADDR_VAR 0 39
45794: PUSH
45795: LD_INT 0
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 0
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 1
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 0
45838: PUSH
45839: LD_INT 1
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: LD_INT 0
45852: PUSH
45853: EMPTY
45854: LIST
45855: LIST
45856: PUSH
45857: LD_INT 1
45859: NEG
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: NEG
45872: PUSH
45873: LD_INT 2
45875: NEG
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 1
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: LIST
45899: LIST
45900: LIST
45901: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45902: LD_ADDR_VAR 0 40
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: LD_INT 0
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 1
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: EMPTY
45935: LIST
45936: LIST
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: LD_INT 1
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 0
45950: PUSH
45951: LD_INT 1
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 1
45960: NEG
45961: PUSH
45962: LD_INT 0
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 1
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 1
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: NEG
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46014: LD_ADDR_VAR 0 41
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 0
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 1
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 1
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: NEG
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 1
46110: NEG
46111: PUSH
46112: EMPTY
46113: LIST
46114: LIST
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 1
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 1
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 2
46204: NEG
46205: PUSH
46206: LD_INT 3
46208: NEG
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 1
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 3
46227: PUSH
46228: LD_INT 0
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 3
46247: PUSH
46248: LD_INT 2
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: PUSH
46255: LD_INT 3
46257: PUSH
46258: LD_INT 3
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PUSH
46265: LD_INT 2
46267: PUSH
46268: LD_INT 3
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 1
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 3
46288: NEG
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 3
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 3
46323: NEG
46324: PUSH
46325: LD_INT 3
46327: NEG
46328: PUSH
46329: EMPTY
46330: LIST
46331: LIST
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: LIST
46337: LIST
46338: LIST
46339: LIST
46340: LIST
46341: LIST
46342: LIST
46343: LIST
46344: LIST
46345: LIST
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: LIST
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46364: LD_ADDR_VAR 0 42
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: LD_INT 0
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 0
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 0
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 1
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 0
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: LD_INT 2
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 2
46460: NEG
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: LD_INT 1
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: PUSH
46480: LD_INT 1
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 2
46489: PUSH
46490: LD_INT 2
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 2
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 1
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 2
46530: NEG
46531: PUSH
46532: LD_INT 1
46534: NEG
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 2
46542: NEG
46543: PUSH
46544: LD_INT 2
46546: NEG
46547: PUSH
46548: EMPTY
46549: LIST
46550: LIST
46551: PUSH
46552: LD_INT 2
46554: NEG
46555: PUSH
46556: LD_INT 3
46558: NEG
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 1
46566: NEG
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: LD_INT 0
46578: PUSH
46579: LD_INT 3
46581: NEG
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: LD_INT 2
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 3
46600: PUSH
46601: LD_INT 2
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 3
46610: PUSH
46611: LD_INT 3
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 2
46620: PUSH
46621: LD_INT 3
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 1
46630: PUSH
46631: LD_INT 3
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 3
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 3
46661: NEG
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 3
46673: NEG
46674: PUSH
46675: LD_INT 3
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46714: LD_ADDR_VAR 0 43
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: EMPTY
46726: LIST
46727: LIST
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: LD_INT 0
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: LD_INT 1
46787: NEG
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PUSH
46793: LD_INT 1
46795: NEG
46796: PUSH
46797: LD_INT 2
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 2
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 1
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 2
46829: PUSH
46830: LD_INT 0
46832: PUSH
46833: EMPTY
46834: LIST
46835: LIST
46836: PUSH
46837: LD_INT 2
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: LD_INT 2
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 2
46880: NEG
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 2
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 1
46903: NEG
46904: PUSH
46905: LD_INT 3
46907: NEG
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 2
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: LD_INT 1
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 3
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 3
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: LD_INT 3
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: LD_INT 2
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 3
47010: NEG
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 3
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: NEG
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: LIST
47044: LIST
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47062: LD_ADDR_VAR 0 44
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: LD_INT 0
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: LD_INT 0
47079: PUSH
47080: LD_INT 1
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 0
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 1
47100: PUSH
47101: LD_INT 1
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 0
47110: PUSH
47111: LD_INT 1
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: PUSH
47129: LD_INT 1
47131: NEG
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: EMPTY
47138: LIST
47139: LIST
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 2
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 2
47176: PUSH
47177: LD_INT 1
47179: PUSH
47180: EMPTY
47181: LIST
47182: LIST
47183: PUSH
47184: LD_INT 2
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: PUSH
47197: LD_INT 2
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: NEG
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 2
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 2
47240: NEG
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 1
47267: NEG
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 3
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 3
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 3
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: LD_INT 3
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: LD_INT 3
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 3
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 3
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 3
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 3
47371: NEG
47372: PUSH
47373: LD_INT 3
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47412: LD_ADDR_VAR 0 45
47416: PUSH
47417: LD_INT 0
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: LD_INT 1
47453: PUSH
47454: EMPTY
47455: LIST
47456: LIST
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 1
47493: NEG
47494: PUSH
47495: LD_INT 2
47497: NEG
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 0
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: PUSH
47528: LD_INT 1
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: LD_INT 2
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 0
47557: PUSH
47558: LD_INT 2
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 2
47590: NEG
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: LD_INT 3
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: LD_INT 3
47618: NEG
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: LD_INT 3
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 1
47637: PUSH
47638: LD_INT 2
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 3
47648: PUSH
47649: LD_INT 2
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 3
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 3
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 3
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 3
47709: NEG
47710: PUSH
47711: LD_INT 2
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 3
47721: NEG
47722: PUSH
47723: LD_INT 3
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47762: LD_ADDR_VAR 0 46
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 1
47835: NEG
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 2
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 2
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 2
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: LD_INT 2
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 1
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: NEG
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 2
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 3
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 2
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 3
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 3
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: LD_INT 3
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 2
48047: NEG
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 3
48058: NEG
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 3
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48110: LD_ADDR_VAR 0 47
48114: PUSH
48115: LD_INT 0
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 1
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 1
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: LD_INT 2
48195: NEG
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: LD_INT 1
48214: PUSH
48215: LD_INT 1
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 2
48225: NEG
48226: PUSH
48227: LD_INT 1
48229: NEG
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 2
48237: NEG
48238: PUSH
48239: LD_INT 2
48241: NEG
48242: PUSH
48243: EMPTY
48244: LIST
48245: LIST
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48261: LD_ADDR_VAR 0 48
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 0
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 1
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 2
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48408: LD_ADDR_VAR 0 49
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 1
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 1
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 1
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: NEG
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 1
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 2
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: PUSH
48531: LD_INT 2
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48552: LD_ADDR_VAR 0 50
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: LD_INT 1
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 2
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 1
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48696: LD_ADDR_VAR 0 51
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 1
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 1
48777: PUSH
48778: LD_INT 2
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 0
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: NEG
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 0
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48843: LD_ADDR_VAR 0 52
48847: PUSH
48848: LD_INT 0
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 0
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: LD_INT 0
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: LD_INT 1
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 0
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 1
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48994: LD_ADDR_VAR 0 53
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 0
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 2
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 2
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 2
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: LD_INT 2
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: LD_INT 2
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: NEG
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: NEG
49194: PUSH
49195: LD_INT 2
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49224: LD_ADDR_VAR 0 54
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: LD_INT 0
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: LD_INT 1
49297: NEG
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: NEG
49306: PUSH
49307: LD_INT 2
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 0
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 2
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 2
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: EMPTY
49395: LIST
49396: LIST
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: NEG
49424: PUSH
49425: LD_INT 2
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49454: LD_ADDR_VAR 0 55
49458: PUSH
49459: LD_INT 0
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 1
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 1
49492: PUSH
49493: LD_INT 1
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 1
49535: NEG
49536: PUSH
49537: LD_INT 2
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 0
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 2
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: PUSH
49590: LD_INT 2
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 0
49609: PUSH
49610: LD_INT 2
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: EMPTY
49625: LIST
49626: LIST
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49684: LD_ADDR_VAR 0 56
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 0
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 0
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: LD_INT 0
49715: PUSH
49716: EMPTY
49717: LIST
49718: LIST
49719: PUSH
49720: LD_INT 1
49722: PUSH
49723: LD_INT 1
49725: PUSH
49726: EMPTY
49727: LIST
49728: LIST
49729: PUSH
49730: LD_INT 0
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 1
49742: NEG
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 2
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 2
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 2
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 2
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 0
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: NEG
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: NEG
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49914: LD_ADDR_VAR 0 57
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 1
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 0
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 1
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 2
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 1
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 2
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 2
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 0
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: EMPTY
50085: LIST
50086: LIST
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: NEG
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50144: LD_ADDR_VAR 0 58
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 0
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 1
50202: NEG
50203: PUSH
50204: LD_INT 0
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 2
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 0
50237: PUSH
50238: LD_INT 2
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 0
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 2
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 0
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 2
50320: NEG
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 2
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: NEG
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 2
50347: NEG
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50374: LD_ADDR_VAR 0 59
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50462: LD_ADDR_VAR 0 60
50466: PUSH
50467: LD_INT 0
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: PUSH
50501: LD_INT 1
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50550: LD_ADDR_VAR 0 61
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 0
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 1
50588: PUSH
50589: LD_INT 1
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 1
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 0
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50638: LD_ADDR_VAR 0 62
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50726: LD_ADDR_VAR 0 63
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 0
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: PUSH
50765: LD_INT 1
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 0
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 1
50784: NEG
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 1
50795: NEG
50796: PUSH
50797: LD_INT 1
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50814: LD_ADDR_VAR 0 64
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: LD_INT 1
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: NEG
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: ST_TO_ADDR
// end ; 1 :
50902: GO 56799
50904: LD_INT 1
50906: DOUBLE
50907: EQUAL
50908: IFTRUE 50912
50910: GO 53535
50912: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50913: LD_ADDR_VAR 0 11
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: LD_INT 3
50935: NEG
50936: PUSH
50937: EMPTY
50938: LIST
50939: LIST
50940: PUSH
50941: LD_INT 1
50943: PUSH
50944: LD_INT 2
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: LIST
50956: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50957: LD_ADDR_VAR 0 12
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: LD_INT 1
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 3
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: LD_INT 1
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: LIST
50997: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50998: LD_ADDR_VAR 0 13
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: LD_INT 3
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 2
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: LIST
51037: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51038: LD_ADDR_VAR 0 14
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: LD_INT 3
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: LIST
51078: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51079: LD_ADDR_VAR 0 15
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 3
51097: NEG
51098: PUSH
51099: LD_INT 0
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 3
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51123: LD_ADDR_VAR 0 16
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: LD_INT 3
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 3
51154: NEG
51155: PUSH
51156: LD_INT 3
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51169: LD_ADDR_VAR 0 17
51173: PUSH
51174: LD_INT 1
51176: NEG
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: LD_INT 3
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: LIST
51212: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51213: LD_ADDR_VAR 0 18
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 3
51231: PUSH
51232: LD_INT 0
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: LIST
51253: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51254: LD_ADDR_VAR 0 19
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 3
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 2
51281: PUSH
51282: LD_INT 3
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51294: LD_ADDR_VAR 0 20
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51335: LD_ADDR_VAR 0 21
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: LD_INT 1
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 3
51353: NEG
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 3
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51379: LD_ADDR_VAR 0 22
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 3
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: NEG
51411: PUSH
51412: LD_INT 3
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: LIST
51424: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51425: LD_ADDR_VAR 0 23
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: LD_INT 4
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: LIST
51468: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51469: LD_ADDR_VAR 0 24
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: LD_INT 0
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 3
51486: PUSH
51487: LD_INT 1
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 4
51497: PUSH
51498: LD_INT 1
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: LIST
51509: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51510: LD_ADDR_VAR 0 25
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 4
51527: PUSH
51528: LD_INT 3
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 3
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: LIST
51549: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51550: LD_ADDR_VAR 0 26
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 4
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: NEG
51578: PUSH
51579: LD_INT 3
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: LIST
51590: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51591: LD_ADDR_VAR 0 27
51595: PUSH
51596: LD_INT 3
51598: NEG
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 3
51609: NEG
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 4
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: LIST
51634: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51635: LD_ADDR_VAR 0 28
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: LD_INT 3
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 3
51654: NEG
51655: PUSH
51656: LD_INT 4
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 4
51666: NEG
51667: PUSH
51668: LD_INT 3
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: LIST
51680: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51681: LD_ADDR_VAR 0 29
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: LD_INT 3
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 1
51711: PUSH
51712: LD_INT 2
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: LD_INT 4
51726: NEG
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 4
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 3
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 1
51756: NEG
51757: PUSH
51758: LD_INT 5
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 5
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 1
51779: PUSH
51780: LD_INT 4
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 6
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 6
51805: NEG
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 1
51813: PUSH
51814: LD_INT 5
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51836: LD_ADDR_VAR 0 30
51840: PUSH
51841: LD_INT 2
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 3
51854: PUSH
51855: LD_INT 0
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: LD_INT 1
51877: NEG
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: PUSH
51883: LD_INT 4
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 4
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 4
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 5
51916: PUSH
51917: LD_INT 0
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 5
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 5
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 6
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: EMPTY
51952: LIST
51953: LIST
51954: PUSH
51955: LD_INT 6
51957: PUSH
51958: LD_INT 1
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51979: LD_ADDR_VAR 0 31
51983: PUSH
51984: LD_INT 3
51986: PUSH
51987: LD_INT 2
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: PUSH
51997: LD_INT 3
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: LD_INT 3
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 4
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 4
52026: PUSH
52027: LD_INT 4
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: LD_INT 4
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 5
52046: PUSH
52047: LD_INT 4
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 5
52056: PUSH
52057: LD_INT 5
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 4
52066: PUSH
52067: LD_INT 5
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PUSH
52074: LD_INT 6
52076: PUSH
52077: LD_INT 5
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 6
52086: PUSH
52087: LD_INT 6
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 5
52096: PUSH
52097: LD_INT 6
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52118: LD_ADDR_VAR 0 32
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: LD_INT 3
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 0
52135: PUSH
52136: LD_INT 3
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 1
52145: NEG
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: LD_INT 4
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 0
52166: PUSH
52167: LD_INT 4
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 1
52176: NEG
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: PUSH
52188: LD_INT 5
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 0
52197: PUSH
52198: LD_INT 5
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: LD_INT 4
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: PUSH
52219: LD_INT 6
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 6
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 5
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: LIST
52251: LIST
52252: LIST
52253: LIST
52254: LIST
52255: LIST
52256: LIST
52257: LIST
52258: LIST
52259: LIST
52260: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52261: LD_ADDR_VAR 0 33
52265: PUSH
52266: LD_INT 2
52268: NEG
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 3
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 4
52313: NEG
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 4
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 4
52336: NEG
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 5
52347: NEG
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 5
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 5
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 6
52381: NEG
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 6
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52416: LD_ADDR_VAR 0 34
52420: PUSH
52421: LD_INT 2
52423: NEG
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 3
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 3
52459: NEG
52460: PUSH
52461: LD_INT 4
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 4
52471: NEG
52472: PUSH
52473: LD_INT 3
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 4
52483: NEG
52484: PUSH
52485: LD_INT 4
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 4
52495: NEG
52496: PUSH
52497: LD_INT 5
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 5
52507: NEG
52508: PUSH
52509: LD_INT 4
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 5
52519: NEG
52520: PUSH
52521: LD_INT 5
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 5
52531: NEG
52532: PUSH
52533: LD_INT 6
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 6
52543: NEG
52544: PUSH
52545: LD_INT 5
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 6
52555: NEG
52556: PUSH
52557: LD_INT 6
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52579: LD_ADDR_VAR 0 41
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52623: LD_ADDR_VAR 0 42
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 0
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 3
52651: PUSH
52652: LD_INT 1
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: LIST
52663: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52664: LD_ADDR_VAR 0 43
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 3
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 2
52691: PUSH
52692: LD_INT 3
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: LIST
52703: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52704: LD_ADDR_VAR 0 44
52708: PUSH
52709: LD_INT 0
52711: PUSH
52712: LD_INT 2
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 1
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: NEG
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: LIST
52744: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52745: LD_ADDR_VAR 0 45
52749: PUSH
52750: LD_INT 2
52752: NEG
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 2
52763: NEG
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 3
52774: NEG
52775: PUSH
52776: LD_INT 1
52778: NEG
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: LIST
52788: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52789: LD_ADDR_VAR 0 46
52793: PUSH
52794: LD_INT 2
52796: NEG
52797: PUSH
52798: LD_INT 2
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: LIST
52834: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52835: LD_ADDR_VAR 0 47
52839: PUSH
52840: LD_INT 2
52842: NEG
52843: PUSH
52844: LD_INT 3
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: NEG
52855: PUSH
52856: LD_INT 3
52858: NEG
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52868: LD_ADDR_VAR 0 48
52872: PUSH
52873: LD_INT 1
52875: PUSH
52876: LD_INT 2
52878: NEG
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 2
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52899: LD_ADDR_VAR 0 49
52903: PUSH
52904: LD_INT 3
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 3
52916: PUSH
52917: LD_INT 2
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52928: LD_ADDR_VAR 0 50
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 3
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52957: LD_ADDR_VAR 0 51
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: LD_INT 2
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 2
52975: NEG
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52988: LD_ADDR_VAR 0 52
52992: PUSH
52993: LD_INT 3
52995: NEG
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: PUSH
53005: LD_INT 3
53007: NEG
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53021: LD_ADDR_VAR 0 53
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: LD_INT 3
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 3
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53065: LD_ADDR_VAR 0 54
53069: PUSH
53070: LD_INT 2
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 3
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: EMPTY
53098: LIST
53099: LIST
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: LIST
53105: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53106: LD_ADDR_VAR 0 55
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: LD_INT 2
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 3
53123: PUSH
53124: LD_INT 3
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 2
53133: PUSH
53134: LD_INT 3
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53146: LD_ADDR_VAR 0 56
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 0
53163: PUSH
53164: LD_INT 3
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: LIST
53186: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53187: LD_ADDR_VAR 0 57
53191: PUSH
53192: LD_INT 2
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: LIST
53230: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53231: LD_ADDR_VAR 0 58
53235: PUSH
53236: LD_INT 2
53238: NEG
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: LD_INT 3
53250: NEG
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 3
53262: NEG
53263: PUSH
53264: LD_INT 3
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: LIST
53276: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53277: LD_ADDR_VAR 0 59
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 2
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 0
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: LIST
53320: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53321: LD_ADDR_VAR 0 60
53325: PUSH
53326: LD_INT 1
53328: PUSH
53329: LD_INT 1
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53362: LD_ADDR_VAR 0 61
53366: PUSH
53367: LD_INT 2
53369: PUSH
53370: LD_INT 1
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 2
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: LIST
53401: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53402: LD_ADDR_VAR 0 62
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 2
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 2
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 1
53429: NEG
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53443: LD_ADDR_VAR 0 63
53447: PUSH
53448: LD_INT 1
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 2
53461: NEG
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 2
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53487: LD_ADDR_VAR 0 64
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 1
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: NEG
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: LIST
53532: ST_TO_ADDR
// end ; 2 :
53533: GO 56799
53535: LD_INT 2
53537: DOUBLE
53538: EQUAL
53539: IFTRUE 53543
53541: GO 56798
53543: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53544: LD_ADDR_VAR 0 29
53548: PUSH
53549: LD_INT 4
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 4
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 5
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 5
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 4
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: LD_INT 0
53605: PUSH
53606: EMPTY
53607: LIST
53608: LIST
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 3
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 5
53634: PUSH
53635: LD_INT 2
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 3
53644: PUSH
53645: LD_INT 3
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 3
53654: PUSH
53655: LD_INT 2
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 4
53664: PUSH
53665: LD_INT 3
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 4
53674: PUSH
53675: LD_INT 4
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 3
53684: PUSH
53685: LD_INT 4
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 2
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: PUSH
53715: LD_INT 2
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 2
53724: PUSH
53725: LD_INT 4
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 5
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 5
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 5
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 3
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 4
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 4
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 4
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 4
53929: NEG
53930: PUSH
53931: LD_INT 4
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 4
53941: NEG
53942: PUSH
53943: LD_INT 5
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: LD_INT 4
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 3
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: LD_INT 4
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 5
54001: NEG
54002: PUSH
54003: LD_INT 5
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 5
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 5
54025: NEG
54026: PUSH
54027: LD_INT 3
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54082: LD_ADDR_VAR 0 30
54086: PUSH
54087: LD_INT 4
54089: PUSH
54090: LD_INT 4
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 4
54099: PUSH
54100: LD_INT 3
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 5
54109: PUSH
54110: LD_INT 4
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 5
54119: PUSH
54120: LD_INT 5
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 4
54129: PUSH
54130: LD_INT 5
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 3
54139: PUSH
54140: LD_INT 4
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 3
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 5
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 3
54169: PUSH
54170: LD_INT 5
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 3
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 2
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: PUSH
54200: LD_INT 3
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 1
54209: PUSH
54210: LD_INT 4
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: LD_INT 4
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: NEG
54230: PUSH
54231: LD_INT 3
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: LD_INT 2
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 4
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: LD_INT 2
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 4
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 4
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: LD_INT 0
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: NEG
54307: PUSH
54308: LD_INT 1
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 4
54317: NEG
54318: PUSH
54319: LD_INT 1
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 5
54328: NEG
54329: PUSH
54330: LD_INT 0
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 5
54339: NEG
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 5
54351: NEG
54352: PUSH
54353: LD_INT 2
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 3
54363: NEG
54364: PUSH
54365: LD_INT 2
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 3
54374: NEG
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: LD_INT 4
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 3
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 2
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 3
54422: NEG
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 4
54434: NEG
54435: PUSH
54436: LD_INT 3
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: LD_INT 4
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: LD_INT 4
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 4
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: LD_INT 4
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: LD_INT 5
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: LD_INT 4
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 3
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: NEG
54538: PUSH
54539: LD_INT 4
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 5
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: LD_INT 5
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54629: LD_ADDR_VAR 0 31
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 4
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 0
54646: PUSH
54647: LD_INT 3
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 4
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 1
54666: PUSH
54667: LD_INT 5
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 5
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: NEG
54687: PUSH
54688: LD_INT 4
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: LD_INT 3
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 5
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: NEG
54719: PUSH
54720: LD_INT 3
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 3
54729: NEG
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: LD_INT 1
54744: NEG
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 2
54752: NEG
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: EMPTY
54758: LIST
54759: LIST
54760: PUSH
54761: LD_INT 2
54763: NEG
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 4
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: NEG
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 4
54831: NEG
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: LD_INT 5
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 4
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: LD_INT 3
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: LD_INT 4
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 5
54903: NEG
54904: PUSH
54905: LD_INT 5
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 5
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: NEG
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 4
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 4
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 5
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 5
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 4
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 5
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: EMPTY
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55179: LD_ADDR_VAR 0 32
55183: PUSH
55184: LD_INT 4
55186: NEG
55187: PUSH
55188: LD_INT 0
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 4
55197: NEG
55198: PUSH
55199: LD_INT 1
55201: NEG
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 4
55231: NEG
55232: PUSH
55233: LD_INT 1
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 5
55242: NEG
55243: PUSH
55244: LD_INT 0
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 5
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 5
55265: NEG
55266: PUSH
55267: LD_INT 2
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 3
55288: NEG
55289: PUSH
55290: LD_INT 3
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 3
55300: NEG
55301: PUSH
55302: LD_INT 4
55304: NEG
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 3
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 3
55336: NEG
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 4
55348: NEG
55349: PUSH
55350: LD_INT 3
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 4
55360: NEG
55361: PUSH
55362: LD_INT 4
55364: NEG
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: PUSH
55370: LD_INT 2
55372: NEG
55373: PUSH
55374: LD_INT 4
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 4
55384: NEG
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 5
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: LD_INT 3
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 0
55440: PUSH
55441: LD_INT 3
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 4
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 5
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: LD_INT 5
55490: NEG
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 3
55498: PUSH
55499: LD_INT 0
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 3
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 4
55519: PUSH
55520: LD_INT 0
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 4
55529: PUSH
55530: LD_INT 1
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 3
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 2
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: PUSH
55571: LD_INT 2
55573: NEG
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: LD_INT 2
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 4
55591: PUSH
55592: LD_INT 4
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 4
55601: PUSH
55602: LD_INT 3
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 5
55611: PUSH
55612: LD_INT 4
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 5
55621: PUSH
55622: LD_INT 5
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 4
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 3
55641: PUSH
55642: LD_INT 4
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 3
55651: PUSH
55652: LD_INT 3
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 5
55661: PUSH
55662: LD_INT 3
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 3
55671: PUSH
55672: LD_INT 5
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55726: LD_ADDR_VAR 0 33
55730: PUSH
55731: LD_INT 4
55733: NEG
55734: PUSH
55735: LD_INT 4
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 4
55745: NEG
55746: PUSH
55747: LD_INT 5
55749: NEG
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 3
55757: NEG
55758: PUSH
55759: LD_INT 4
55761: NEG
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 3
55769: NEG
55770: PUSH
55771: LD_INT 3
55773: NEG
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 4
55781: NEG
55782: PUSH
55783: LD_INT 3
55785: NEG
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 5
55793: NEG
55794: PUSH
55795: LD_INT 4
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 5
55805: NEG
55806: PUSH
55807: LD_INT 5
55809: NEG
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: LD_INT 5
55821: NEG
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: PUSH
55827: LD_INT 5
55829: NEG
55830: PUSH
55831: LD_INT 3
55833: NEG
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 3
55844: NEG
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: LD_INT 4
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: LD_INT 2
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 2
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: LD_INT 3
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: LD_INT 2
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 4
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 4
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 4
55953: PUSH
55954: LD_INT 1
55956: NEG
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 5
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 5
55974: PUSH
55975: LD_INT 1
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 4
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 3
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 3
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 5
56026: PUSH
56027: LD_INT 2
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: LD_INT 3
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: LD_INT 2
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 4
56056: PUSH
56057: LD_INT 3
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 4
56066: PUSH
56067: LD_INT 4
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: LD_INT 4
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: LD_INT 3
56089: PUSH
56090: EMPTY
56091: LIST
56092: LIST
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: LD_INT 2
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 4
56106: PUSH
56107: LD_INT 2
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 2
56116: PUSH
56117: LD_INT 4
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 4
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: PUSH
56147: LD_INT 4
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 5
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 0
56166: PUSH
56167: LD_INT 5
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 5
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56264: LD_ADDR_VAR 0 34
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: LD_INT 4
56274: NEG
56275: PUSH
56276: EMPTY
56277: LIST
56278: LIST
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: LD_INT 5
56285: NEG
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: LD_INT 4
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: LD_INT 3
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: LD_INT 4
56330: NEG
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: LD_INT 5
56342: NEG
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 3
56353: NEG
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 5
56365: NEG
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 3
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 4
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 4
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: LD_INT 1
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 0
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 4
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 4
56466: PUSH
56467: LD_INT 4
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 4
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 5
56486: PUSH
56487: LD_INT 4
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 5
56496: PUSH
56497: LD_INT 5
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 4
56506: PUSH
56507: LD_INT 5
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 3
56516: PUSH
56517: LD_INT 4
56519: PUSH
56520: EMPTY
56521: LIST
56522: LIST
56523: PUSH
56524: LD_INT 3
56526: PUSH
56527: LD_INT 3
56529: PUSH
56530: EMPTY
56531: LIST
56532: LIST
56533: PUSH
56534: LD_INT 5
56536: PUSH
56537: LD_INT 3
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 3
56546: PUSH
56547: LD_INT 5
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 3
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 3
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 4
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 4
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 3
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 4
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: NEG
56639: PUSH
56640: LD_INT 2
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 4
56649: NEG
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 4
56660: NEG
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 4
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 5
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 5
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 5
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 3
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: ST_TO_ADDR
// end ; end ;
56796: GO 56799
56798: POP
// case btype of b_depot , b_warehouse :
56799: LD_VAR 0 1
56803: PUSH
56804: LD_INT 0
56806: DOUBLE
56807: EQUAL
56808: IFTRUE 56818
56810: LD_INT 1
56812: DOUBLE
56813: EQUAL
56814: IFTRUE 56818
56816: GO 57019
56818: POP
// case nation of nation_american :
56819: LD_VAR 0 5
56823: PUSH
56824: LD_INT 1
56826: DOUBLE
56827: EQUAL
56828: IFTRUE 56832
56830: GO 56888
56832: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56833: LD_ADDR_VAR 0 9
56837: PUSH
56838: LD_VAR 0 11
56842: PUSH
56843: LD_VAR 0 12
56847: PUSH
56848: LD_VAR 0 13
56852: PUSH
56853: LD_VAR 0 14
56857: PUSH
56858: LD_VAR 0 15
56862: PUSH
56863: LD_VAR 0 16
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 4
56880: PUSH
56881: LD_INT 1
56883: PLUS
56884: ARRAY
56885: ST_TO_ADDR
56886: GO 57017
56888: LD_INT 2
56890: DOUBLE
56891: EQUAL
56892: IFTRUE 56896
56894: GO 56952
56896: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56897: LD_ADDR_VAR 0 9
56901: PUSH
56902: LD_VAR 0 17
56906: PUSH
56907: LD_VAR 0 18
56911: PUSH
56912: LD_VAR 0 19
56916: PUSH
56917: LD_VAR 0 20
56921: PUSH
56922: LD_VAR 0 21
56926: PUSH
56927: LD_VAR 0 22
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: PUSH
56940: LD_VAR 0 4
56944: PUSH
56945: LD_INT 1
56947: PLUS
56948: ARRAY
56949: ST_TO_ADDR
56950: GO 57017
56952: LD_INT 3
56954: DOUBLE
56955: EQUAL
56956: IFTRUE 56960
56958: GO 57016
56960: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56961: LD_ADDR_VAR 0 9
56965: PUSH
56966: LD_VAR 0 23
56970: PUSH
56971: LD_VAR 0 24
56975: PUSH
56976: LD_VAR 0 25
56980: PUSH
56981: LD_VAR 0 26
56985: PUSH
56986: LD_VAR 0 27
56990: PUSH
56991: LD_VAR 0 28
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: PUSH
57004: LD_VAR 0 4
57008: PUSH
57009: LD_INT 1
57011: PLUS
57012: ARRAY
57013: ST_TO_ADDR
57014: GO 57017
57016: POP
57017: GO 57572
57019: LD_INT 2
57021: DOUBLE
57022: EQUAL
57023: IFTRUE 57033
57025: LD_INT 3
57027: DOUBLE
57028: EQUAL
57029: IFTRUE 57033
57031: GO 57089
57033: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57034: LD_ADDR_VAR 0 9
57038: PUSH
57039: LD_VAR 0 29
57043: PUSH
57044: LD_VAR 0 30
57048: PUSH
57049: LD_VAR 0 31
57053: PUSH
57054: LD_VAR 0 32
57058: PUSH
57059: LD_VAR 0 33
57063: PUSH
57064: LD_VAR 0 34
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: PUSH
57077: LD_VAR 0 4
57081: PUSH
57082: LD_INT 1
57084: PLUS
57085: ARRAY
57086: ST_TO_ADDR
57087: GO 57572
57089: LD_INT 16
57091: DOUBLE
57092: EQUAL
57093: IFTRUE 57151
57095: LD_INT 17
57097: DOUBLE
57098: EQUAL
57099: IFTRUE 57151
57101: LD_INT 18
57103: DOUBLE
57104: EQUAL
57105: IFTRUE 57151
57107: LD_INT 19
57109: DOUBLE
57110: EQUAL
57111: IFTRUE 57151
57113: LD_INT 22
57115: DOUBLE
57116: EQUAL
57117: IFTRUE 57151
57119: LD_INT 20
57121: DOUBLE
57122: EQUAL
57123: IFTRUE 57151
57125: LD_INT 21
57127: DOUBLE
57128: EQUAL
57129: IFTRUE 57151
57131: LD_INT 23
57133: DOUBLE
57134: EQUAL
57135: IFTRUE 57151
57137: LD_INT 24
57139: DOUBLE
57140: EQUAL
57141: IFTRUE 57151
57143: LD_INT 25
57145: DOUBLE
57146: EQUAL
57147: IFTRUE 57151
57149: GO 57207
57151: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57152: LD_ADDR_VAR 0 9
57156: PUSH
57157: LD_VAR 0 35
57161: PUSH
57162: LD_VAR 0 36
57166: PUSH
57167: LD_VAR 0 37
57171: PUSH
57172: LD_VAR 0 38
57176: PUSH
57177: LD_VAR 0 39
57181: PUSH
57182: LD_VAR 0 40
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: PUSH
57195: LD_VAR 0 4
57199: PUSH
57200: LD_INT 1
57202: PLUS
57203: ARRAY
57204: ST_TO_ADDR
57205: GO 57572
57207: LD_INT 6
57209: DOUBLE
57210: EQUAL
57211: IFTRUE 57263
57213: LD_INT 7
57215: DOUBLE
57216: EQUAL
57217: IFTRUE 57263
57219: LD_INT 8
57221: DOUBLE
57222: EQUAL
57223: IFTRUE 57263
57225: LD_INT 13
57227: DOUBLE
57228: EQUAL
57229: IFTRUE 57263
57231: LD_INT 12
57233: DOUBLE
57234: EQUAL
57235: IFTRUE 57263
57237: LD_INT 15
57239: DOUBLE
57240: EQUAL
57241: IFTRUE 57263
57243: LD_INT 11
57245: DOUBLE
57246: EQUAL
57247: IFTRUE 57263
57249: LD_INT 14
57251: DOUBLE
57252: EQUAL
57253: IFTRUE 57263
57255: LD_INT 10
57257: DOUBLE
57258: EQUAL
57259: IFTRUE 57263
57261: GO 57319
57263: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57264: LD_ADDR_VAR 0 9
57268: PUSH
57269: LD_VAR 0 41
57273: PUSH
57274: LD_VAR 0 42
57278: PUSH
57279: LD_VAR 0 43
57283: PUSH
57284: LD_VAR 0 44
57288: PUSH
57289: LD_VAR 0 45
57293: PUSH
57294: LD_VAR 0 46
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: PUSH
57307: LD_VAR 0 4
57311: PUSH
57312: LD_INT 1
57314: PLUS
57315: ARRAY
57316: ST_TO_ADDR
57317: GO 57572
57319: LD_INT 36
57321: DOUBLE
57322: EQUAL
57323: IFTRUE 57327
57325: GO 57383
57327: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57328: LD_ADDR_VAR 0 9
57332: PUSH
57333: LD_VAR 0 47
57337: PUSH
57338: LD_VAR 0 48
57342: PUSH
57343: LD_VAR 0 49
57347: PUSH
57348: LD_VAR 0 50
57352: PUSH
57353: LD_VAR 0 51
57357: PUSH
57358: LD_VAR 0 52
57362: PUSH
57363: EMPTY
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: PUSH
57371: LD_VAR 0 4
57375: PUSH
57376: LD_INT 1
57378: PLUS
57379: ARRAY
57380: ST_TO_ADDR
57381: GO 57572
57383: LD_INT 4
57385: DOUBLE
57386: EQUAL
57387: IFTRUE 57409
57389: LD_INT 5
57391: DOUBLE
57392: EQUAL
57393: IFTRUE 57409
57395: LD_INT 34
57397: DOUBLE
57398: EQUAL
57399: IFTRUE 57409
57401: LD_INT 37
57403: DOUBLE
57404: EQUAL
57405: IFTRUE 57409
57407: GO 57465
57409: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57410: LD_ADDR_VAR 0 9
57414: PUSH
57415: LD_VAR 0 53
57419: PUSH
57420: LD_VAR 0 54
57424: PUSH
57425: LD_VAR 0 55
57429: PUSH
57430: LD_VAR 0 56
57434: PUSH
57435: LD_VAR 0 57
57439: PUSH
57440: LD_VAR 0 58
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: PUSH
57453: LD_VAR 0 4
57457: PUSH
57458: LD_INT 1
57460: PLUS
57461: ARRAY
57462: ST_TO_ADDR
57463: GO 57572
57465: LD_INT 31
57467: DOUBLE
57468: EQUAL
57469: IFTRUE 57515
57471: LD_INT 32
57473: DOUBLE
57474: EQUAL
57475: IFTRUE 57515
57477: LD_INT 33
57479: DOUBLE
57480: EQUAL
57481: IFTRUE 57515
57483: LD_INT 27
57485: DOUBLE
57486: EQUAL
57487: IFTRUE 57515
57489: LD_INT 26
57491: DOUBLE
57492: EQUAL
57493: IFTRUE 57515
57495: LD_INT 28
57497: DOUBLE
57498: EQUAL
57499: IFTRUE 57515
57501: LD_INT 29
57503: DOUBLE
57504: EQUAL
57505: IFTRUE 57515
57507: LD_INT 30
57509: DOUBLE
57510: EQUAL
57511: IFTRUE 57515
57513: GO 57571
57515: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57516: LD_ADDR_VAR 0 9
57520: PUSH
57521: LD_VAR 0 59
57525: PUSH
57526: LD_VAR 0 60
57530: PUSH
57531: LD_VAR 0 61
57535: PUSH
57536: LD_VAR 0 62
57540: PUSH
57541: LD_VAR 0 63
57545: PUSH
57546: LD_VAR 0 64
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: LIST
57557: LIST
57558: PUSH
57559: LD_VAR 0 4
57563: PUSH
57564: LD_INT 1
57566: PLUS
57567: ARRAY
57568: ST_TO_ADDR
57569: GO 57572
57571: POP
// temp_list2 = [ ] ;
57572: LD_ADDR_VAR 0 10
57576: PUSH
57577: EMPTY
57578: ST_TO_ADDR
// for i in temp_list do
57579: LD_ADDR_VAR 0 8
57583: PUSH
57584: LD_VAR 0 9
57588: PUSH
57589: FOR_IN
57590: IFFALSE 57642
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57592: LD_ADDR_VAR 0 10
57596: PUSH
57597: LD_VAR 0 10
57601: PUSH
57602: LD_VAR 0 8
57606: PUSH
57607: LD_INT 1
57609: ARRAY
57610: PUSH
57611: LD_VAR 0 2
57615: PLUS
57616: PUSH
57617: LD_VAR 0 8
57621: PUSH
57622: LD_INT 2
57624: ARRAY
57625: PUSH
57626: LD_VAR 0 3
57630: PLUS
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: EMPTY
57637: LIST
57638: ADD
57639: ST_TO_ADDR
57640: GO 57589
57642: POP
57643: POP
// result = temp_list2 ;
57644: LD_ADDR_VAR 0 7
57648: PUSH
57649: LD_VAR 0 10
57653: ST_TO_ADDR
// end ;
57654: LD_VAR 0 7
57658: RET
// export function EnemyInRange ( unit , dist ) ; begin
57659: LD_INT 0
57661: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57662: LD_ADDR_VAR 0 3
57666: PUSH
57667: LD_VAR 0 1
57671: PPUSH
57672: CALL_OW 255
57676: PPUSH
57677: LD_VAR 0 1
57681: PPUSH
57682: CALL_OW 250
57686: PPUSH
57687: LD_VAR 0 1
57691: PPUSH
57692: CALL_OW 251
57696: PPUSH
57697: LD_VAR 0 2
57701: PPUSH
57702: CALL 31055 0 4
57706: PUSH
57707: LD_INT 4
57709: ARRAY
57710: ST_TO_ADDR
// end ;
57711: LD_VAR 0 3
57715: RET
// export function PlayerSeeMe ( unit ) ; begin
57716: LD_INT 0
57718: PPUSH
// result := See ( your_side , unit ) ;
57719: LD_ADDR_VAR 0 2
57723: PUSH
57724: LD_OWVAR 2
57728: PPUSH
57729: LD_VAR 0 1
57733: PPUSH
57734: CALL_OW 292
57738: ST_TO_ADDR
// end ;
57739: LD_VAR 0 2
57743: RET
// export function ReverseDir ( unit ) ; begin
57744: LD_INT 0
57746: PPUSH
// if not unit then
57747: LD_VAR 0 1
57751: NOT
57752: IFFALSE 57756
// exit ;
57754: GO 57779
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57756: LD_ADDR_VAR 0 2
57760: PUSH
57761: LD_VAR 0 1
57765: PPUSH
57766: CALL_OW 254
57770: PUSH
57771: LD_INT 3
57773: PLUS
57774: PUSH
57775: LD_INT 6
57777: MOD
57778: ST_TO_ADDR
// end ;
57779: LD_VAR 0 2
57783: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57784: LD_INT 0
57786: PPUSH
57787: PPUSH
57788: PPUSH
57789: PPUSH
57790: PPUSH
// if not hexes then
57791: LD_VAR 0 2
57795: NOT
57796: IFFALSE 57800
// exit ;
57798: GO 57948
// dist := 9999 ;
57800: LD_ADDR_VAR 0 5
57804: PUSH
57805: LD_INT 9999
57807: ST_TO_ADDR
// for i = 1 to hexes do
57808: LD_ADDR_VAR 0 4
57812: PUSH
57813: DOUBLE
57814: LD_INT 1
57816: DEC
57817: ST_TO_ADDR
57818: LD_VAR 0 2
57822: PUSH
57823: FOR_TO
57824: IFFALSE 57936
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57826: LD_VAR 0 1
57830: PPUSH
57831: LD_VAR 0 2
57835: PUSH
57836: LD_VAR 0 4
57840: ARRAY
57841: PUSH
57842: LD_INT 1
57844: ARRAY
57845: PPUSH
57846: LD_VAR 0 2
57850: PUSH
57851: LD_VAR 0 4
57855: ARRAY
57856: PUSH
57857: LD_INT 2
57859: ARRAY
57860: PPUSH
57861: CALL_OW 297
57865: PUSH
57866: LD_VAR 0 5
57870: LESS
57871: IFFALSE 57934
// begin hex := hexes [ i ] ;
57873: LD_ADDR_VAR 0 7
57877: PUSH
57878: LD_VAR 0 2
57882: PUSH
57883: LD_VAR 0 4
57887: ARRAY
57888: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57889: LD_ADDR_VAR 0 5
57893: PUSH
57894: LD_VAR 0 1
57898: PPUSH
57899: LD_VAR 0 2
57903: PUSH
57904: LD_VAR 0 4
57908: ARRAY
57909: PUSH
57910: LD_INT 1
57912: ARRAY
57913: PPUSH
57914: LD_VAR 0 2
57918: PUSH
57919: LD_VAR 0 4
57923: ARRAY
57924: PUSH
57925: LD_INT 2
57927: ARRAY
57928: PPUSH
57929: CALL_OW 297
57933: ST_TO_ADDR
// end ; end ;
57934: GO 57823
57936: POP
57937: POP
// result := hex ;
57938: LD_ADDR_VAR 0 3
57942: PUSH
57943: LD_VAR 0 7
57947: ST_TO_ADDR
// end ;
57948: LD_VAR 0 3
57952: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57953: LD_INT 0
57955: PPUSH
57956: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57957: LD_VAR 0 1
57961: NOT
57962: PUSH
57963: LD_VAR 0 1
57967: PUSH
57968: LD_INT 21
57970: PUSH
57971: LD_INT 2
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 23
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PPUSH
57992: CALL_OW 69
57996: IN
57997: NOT
57998: OR
57999: IFFALSE 58003
// exit ;
58001: GO 58050
// for i = 1 to 3 do
58003: LD_ADDR_VAR 0 3
58007: PUSH
58008: DOUBLE
58009: LD_INT 1
58011: DEC
58012: ST_TO_ADDR
58013: LD_INT 3
58015: PUSH
58016: FOR_TO
58017: IFFALSE 58048
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58019: LD_VAR 0 1
58023: PPUSH
58024: CALL_OW 250
58028: PPUSH
58029: LD_VAR 0 1
58033: PPUSH
58034: CALL_OW 251
58038: PPUSH
58039: LD_INT 1
58041: PPUSH
58042: CALL_OW 453
58046: GO 58016
58048: POP
58049: POP
// end ;
58050: LD_VAR 0 2
58054: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58055: LD_INT 0
58057: PPUSH
58058: PPUSH
58059: PPUSH
58060: PPUSH
58061: PPUSH
58062: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58063: LD_VAR 0 1
58067: NOT
58068: PUSH
58069: LD_VAR 0 2
58073: NOT
58074: OR
58075: PUSH
58076: LD_VAR 0 1
58080: PPUSH
58081: CALL_OW 314
58085: OR
58086: IFFALSE 58090
// exit ;
58088: GO 58531
// x := GetX ( enemy_unit ) ;
58090: LD_ADDR_VAR 0 7
58094: PUSH
58095: LD_VAR 0 2
58099: PPUSH
58100: CALL_OW 250
58104: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58105: LD_ADDR_VAR 0 8
58109: PUSH
58110: LD_VAR 0 2
58114: PPUSH
58115: CALL_OW 251
58119: ST_TO_ADDR
// if not x or not y then
58120: LD_VAR 0 7
58124: NOT
58125: PUSH
58126: LD_VAR 0 8
58130: NOT
58131: OR
58132: IFFALSE 58136
// exit ;
58134: GO 58531
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58136: LD_ADDR_VAR 0 6
58140: PUSH
58141: LD_VAR 0 7
58145: PPUSH
58146: LD_INT 0
58148: PPUSH
58149: LD_INT 4
58151: PPUSH
58152: CALL_OW 272
58156: PUSH
58157: LD_VAR 0 8
58161: PPUSH
58162: LD_INT 0
58164: PPUSH
58165: LD_INT 4
58167: PPUSH
58168: CALL_OW 273
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_VAR 0 7
58181: PPUSH
58182: LD_INT 1
58184: PPUSH
58185: LD_INT 4
58187: PPUSH
58188: CALL_OW 272
58192: PUSH
58193: LD_VAR 0 8
58197: PPUSH
58198: LD_INT 1
58200: PPUSH
58201: LD_INT 4
58203: PPUSH
58204: CALL_OW 273
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_VAR 0 7
58217: PPUSH
58218: LD_INT 2
58220: PPUSH
58221: LD_INT 4
58223: PPUSH
58224: CALL_OW 272
58228: PUSH
58229: LD_VAR 0 8
58233: PPUSH
58234: LD_INT 2
58236: PPUSH
58237: LD_INT 4
58239: PPUSH
58240: CALL_OW 273
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_VAR 0 7
58253: PPUSH
58254: LD_INT 3
58256: PPUSH
58257: LD_INT 4
58259: PPUSH
58260: CALL_OW 272
58264: PUSH
58265: LD_VAR 0 8
58269: PPUSH
58270: LD_INT 3
58272: PPUSH
58273: LD_INT 4
58275: PPUSH
58276: CALL_OW 273
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_VAR 0 7
58289: PPUSH
58290: LD_INT 4
58292: PPUSH
58293: LD_INT 4
58295: PPUSH
58296: CALL_OW 272
58300: PUSH
58301: LD_VAR 0 8
58305: PPUSH
58306: LD_INT 4
58308: PPUSH
58309: LD_INT 4
58311: PPUSH
58312: CALL_OW 273
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_VAR 0 7
58325: PPUSH
58326: LD_INT 5
58328: PPUSH
58329: LD_INT 4
58331: PPUSH
58332: CALL_OW 272
58336: PUSH
58337: LD_VAR 0 8
58341: PPUSH
58342: LD_INT 5
58344: PPUSH
58345: LD_INT 4
58347: PPUSH
58348: CALL_OW 273
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// for i = tmp downto 1 do
58365: LD_ADDR_VAR 0 4
58369: PUSH
58370: DOUBLE
58371: LD_VAR 0 6
58375: INC
58376: ST_TO_ADDR
58377: LD_INT 1
58379: PUSH
58380: FOR_DOWNTO
58381: IFFALSE 58482
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58383: LD_VAR 0 6
58387: PUSH
58388: LD_VAR 0 4
58392: ARRAY
58393: PUSH
58394: LD_INT 1
58396: ARRAY
58397: PPUSH
58398: LD_VAR 0 6
58402: PUSH
58403: LD_VAR 0 4
58407: ARRAY
58408: PUSH
58409: LD_INT 2
58411: ARRAY
58412: PPUSH
58413: CALL_OW 488
58417: NOT
58418: PUSH
58419: LD_VAR 0 6
58423: PUSH
58424: LD_VAR 0 4
58428: ARRAY
58429: PUSH
58430: LD_INT 1
58432: ARRAY
58433: PPUSH
58434: LD_VAR 0 6
58438: PUSH
58439: LD_VAR 0 4
58443: ARRAY
58444: PUSH
58445: LD_INT 2
58447: ARRAY
58448: PPUSH
58449: CALL_OW 428
58453: PUSH
58454: LD_INT 0
58456: NONEQUAL
58457: OR
58458: IFFALSE 58480
// tmp := Delete ( tmp , i ) ;
58460: LD_ADDR_VAR 0 6
58464: PUSH
58465: LD_VAR 0 6
58469: PPUSH
58470: LD_VAR 0 4
58474: PPUSH
58475: CALL_OW 3
58479: ST_TO_ADDR
58480: GO 58380
58482: POP
58483: POP
// j := GetClosestHex ( unit , tmp ) ;
58484: LD_ADDR_VAR 0 5
58488: PUSH
58489: LD_VAR 0 1
58493: PPUSH
58494: LD_VAR 0 6
58498: PPUSH
58499: CALL 57784 0 2
58503: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58504: LD_VAR 0 1
58508: PPUSH
58509: LD_VAR 0 5
58513: PUSH
58514: LD_INT 1
58516: ARRAY
58517: PPUSH
58518: LD_VAR 0 5
58522: PUSH
58523: LD_INT 2
58525: ARRAY
58526: PPUSH
58527: CALL_OW 111
// end ;
58531: LD_VAR 0 3
58535: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58536: LD_INT 0
58538: PPUSH
58539: PPUSH
58540: PPUSH
// uc_side = 0 ;
58541: LD_ADDR_OWVAR 20
58545: PUSH
58546: LD_INT 0
58548: ST_TO_ADDR
// uc_nation = 0 ;
58549: LD_ADDR_OWVAR 21
58553: PUSH
58554: LD_INT 0
58556: ST_TO_ADDR
// InitHc_All ( ) ;
58557: CALL_OW 584
// InitVc ;
58561: CALL_OW 20
// if mastodonts then
58565: LD_VAR 0 6
58569: IFFALSE 58636
// for i = 1 to mastodonts do
58571: LD_ADDR_VAR 0 11
58575: PUSH
58576: DOUBLE
58577: LD_INT 1
58579: DEC
58580: ST_TO_ADDR
58581: LD_VAR 0 6
58585: PUSH
58586: FOR_TO
58587: IFFALSE 58634
// begin vc_chassis := 31 ;
58589: LD_ADDR_OWVAR 37
58593: PUSH
58594: LD_INT 31
58596: ST_TO_ADDR
// vc_control := control_rider ;
58597: LD_ADDR_OWVAR 38
58601: PUSH
58602: LD_INT 4
58604: ST_TO_ADDR
// animal := CreateVehicle ;
58605: LD_ADDR_VAR 0 12
58609: PUSH
58610: CALL_OW 45
58614: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58615: LD_VAR 0 12
58619: PPUSH
58620: LD_VAR 0 8
58624: PPUSH
58625: LD_INT 0
58627: PPUSH
58628: CALL 60824 0 3
// end ;
58632: GO 58586
58634: POP
58635: POP
// if horses then
58636: LD_VAR 0 5
58640: IFFALSE 58707
// for i = 1 to horses do
58642: LD_ADDR_VAR 0 11
58646: PUSH
58647: DOUBLE
58648: LD_INT 1
58650: DEC
58651: ST_TO_ADDR
58652: LD_VAR 0 5
58656: PUSH
58657: FOR_TO
58658: IFFALSE 58705
// begin hc_class := 21 ;
58660: LD_ADDR_OWVAR 28
58664: PUSH
58665: LD_INT 21
58667: ST_TO_ADDR
// hc_gallery :=  ;
58668: LD_ADDR_OWVAR 33
58672: PUSH
58673: LD_STRING 
58675: ST_TO_ADDR
// animal := CreateHuman ;
58676: LD_ADDR_VAR 0 12
58680: PUSH
58681: CALL_OW 44
58685: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58686: LD_VAR 0 12
58690: PPUSH
58691: LD_VAR 0 8
58695: PPUSH
58696: LD_INT 0
58698: PPUSH
58699: CALL 60824 0 3
// end ;
58703: GO 58657
58705: POP
58706: POP
// if birds then
58707: LD_VAR 0 1
58711: IFFALSE 58778
// for i = 1 to birds do
58713: LD_ADDR_VAR 0 11
58717: PUSH
58718: DOUBLE
58719: LD_INT 1
58721: DEC
58722: ST_TO_ADDR
58723: LD_VAR 0 1
58727: PUSH
58728: FOR_TO
58729: IFFALSE 58776
// begin hc_class = 18 ;
58731: LD_ADDR_OWVAR 28
58735: PUSH
58736: LD_INT 18
58738: ST_TO_ADDR
// hc_gallery =  ;
58739: LD_ADDR_OWVAR 33
58743: PUSH
58744: LD_STRING 
58746: ST_TO_ADDR
// animal := CreateHuman ;
58747: LD_ADDR_VAR 0 12
58751: PUSH
58752: CALL_OW 44
58756: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58757: LD_VAR 0 12
58761: PPUSH
58762: LD_VAR 0 8
58766: PPUSH
58767: LD_INT 0
58769: PPUSH
58770: CALL 60824 0 3
// end ;
58774: GO 58728
58776: POP
58777: POP
// if tigers then
58778: LD_VAR 0 2
58782: IFFALSE 58866
// for i = 1 to tigers do
58784: LD_ADDR_VAR 0 11
58788: PUSH
58789: DOUBLE
58790: LD_INT 1
58792: DEC
58793: ST_TO_ADDR
58794: LD_VAR 0 2
58798: PUSH
58799: FOR_TO
58800: IFFALSE 58864
// begin hc_class = class_tiger ;
58802: LD_ADDR_OWVAR 28
58806: PUSH
58807: LD_INT 14
58809: ST_TO_ADDR
// hc_gallery =  ;
58810: LD_ADDR_OWVAR 33
58814: PUSH
58815: LD_STRING 
58817: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58818: LD_ADDR_OWVAR 35
58822: PUSH
58823: LD_INT 7
58825: NEG
58826: PPUSH
58827: LD_INT 7
58829: PPUSH
58830: CALL_OW 12
58834: ST_TO_ADDR
// animal := CreateHuman ;
58835: LD_ADDR_VAR 0 12
58839: PUSH
58840: CALL_OW 44
58844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58845: LD_VAR 0 12
58849: PPUSH
58850: LD_VAR 0 8
58854: PPUSH
58855: LD_INT 0
58857: PPUSH
58858: CALL 60824 0 3
// end ;
58862: GO 58799
58864: POP
58865: POP
// if apemans then
58866: LD_VAR 0 3
58870: IFFALSE 58993
// for i = 1 to apemans do
58872: LD_ADDR_VAR 0 11
58876: PUSH
58877: DOUBLE
58878: LD_INT 1
58880: DEC
58881: ST_TO_ADDR
58882: LD_VAR 0 3
58886: PUSH
58887: FOR_TO
58888: IFFALSE 58991
// begin hc_class = class_apeman ;
58890: LD_ADDR_OWVAR 28
58894: PUSH
58895: LD_INT 12
58897: ST_TO_ADDR
// hc_gallery =  ;
58898: LD_ADDR_OWVAR 33
58902: PUSH
58903: LD_STRING 
58905: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58906: LD_ADDR_OWVAR 35
58910: PUSH
58911: LD_INT 2
58913: NEG
58914: PPUSH
58915: LD_INT 2
58917: PPUSH
58918: CALL_OW 12
58922: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58923: LD_ADDR_OWVAR 31
58927: PUSH
58928: LD_INT 1
58930: PPUSH
58931: LD_INT 3
58933: PPUSH
58934: CALL_OW 12
58938: PUSH
58939: LD_INT 1
58941: PPUSH
58942: LD_INT 3
58944: PPUSH
58945: CALL_OW 12
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: LD_INT 0
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: ST_TO_ADDR
// animal := CreateHuman ;
58962: LD_ADDR_VAR 0 12
58966: PUSH
58967: CALL_OW 44
58971: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58972: LD_VAR 0 12
58976: PPUSH
58977: LD_VAR 0 8
58981: PPUSH
58982: LD_INT 0
58984: PPUSH
58985: CALL 60824 0 3
// end ;
58989: GO 58887
58991: POP
58992: POP
// if enchidnas then
58993: LD_VAR 0 4
58997: IFFALSE 59064
// for i = 1 to enchidnas do
58999: LD_ADDR_VAR 0 11
59003: PUSH
59004: DOUBLE
59005: LD_INT 1
59007: DEC
59008: ST_TO_ADDR
59009: LD_VAR 0 4
59013: PUSH
59014: FOR_TO
59015: IFFALSE 59062
// begin hc_class = 13 ;
59017: LD_ADDR_OWVAR 28
59021: PUSH
59022: LD_INT 13
59024: ST_TO_ADDR
// hc_gallery =  ;
59025: LD_ADDR_OWVAR 33
59029: PUSH
59030: LD_STRING 
59032: ST_TO_ADDR
// animal := CreateHuman ;
59033: LD_ADDR_VAR 0 12
59037: PUSH
59038: CALL_OW 44
59042: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59043: LD_VAR 0 12
59047: PPUSH
59048: LD_VAR 0 8
59052: PPUSH
59053: LD_INT 0
59055: PPUSH
59056: CALL 60824 0 3
// end ;
59060: GO 59014
59062: POP
59063: POP
// if fishes then
59064: LD_VAR 0 7
59068: IFFALSE 59135
// for i = 1 to fishes do
59070: LD_ADDR_VAR 0 11
59074: PUSH
59075: DOUBLE
59076: LD_INT 1
59078: DEC
59079: ST_TO_ADDR
59080: LD_VAR 0 7
59084: PUSH
59085: FOR_TO
59086: IFFALSE 59133
// begin hc_class = 20 ;
59088: LD_ADDR_OWVAR 28
59092: PUSH
59093: LD_INT 20
59095: ST_TO_ADDR
// hc_gallery =  ;
59096: LD_ADDR_OWVAR 33
59100: PUSH
59101: LD_STRING 
59103: ST_TO_ADDR
// animal := CreateHuman ;
59104: LD_ADDR_VAR 0 12
59108: PUSH
59109: CALL_OW 44
59113: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59114: LD_VAR 0 12
59118: PPUSH
59119: LD_VAR 0 9
59123: PPUSH
59124: LD_INT 0
59126: PPUSH
59127: CALL 60824 0 3
// end ;
59131: GO 59085
59133: POP
59134: POP
// end ;
59135: LD_VAR 0 10
59139: RET
// export function WantHeal ( sci , unit ) ; begin
59140: LD_INT 0
59142: PPUSH
// if GetTaskList ( sci ) > 0 then
59143: LD_VAR 0 1
59147: PPUSH
59148: CALL_OW 437
59152: PUSH
59153: LD_INT 0
59155: GREATER
59156: IFFALSE 59226
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59158: LD_VAR 0 1
59162: PPUSH
59163: CALL_OW 437
59167: PUSH
59168: LD_INT 1
59170: ARRAY
59171: PUSH
59172: LD_INT 1
59174: ARRAY
59175: PUSH
59176: LD_STRING l
59178: EQUAL
59179: PUSH
59180: LD_VAR 0 1
59184: PPUSH
59185: CALL_OW 437
59189: PUSH
59190: LD_INT 1
59192: ARRAY
59193: PUSH
59194: LD_INT 4
59196: ARRAY
59197: PUSH
59198: LD_VAR 0 2
59202: EQUAL
59203: AND
59204: IFFALSE 59216
// result := true else
59206: LD_ADDR_VAR 0 3
59210: PUSH
59211: LD_INT 1
59213: ST_TO_ADDR
59214: GO 59224
// result := false ;
59216: LD_ADDR_VAR 0 3
59220: PUSH
59221: LD_INT 0
59223: ST_TO_ADDR
// end else
59224: GO 59234
// result := false ;
59226: LD_ADDR_VAR 0 3
59230: PUSH
59231: LD_INT 0
59233: ST_TO_ADDR
// end ;
59234: LD_VAR 0 3
59238: RET
// export function HealTarget ( sci ) ; begin
59239: LD_INT 0
59241: PPUSH
// if not sci then
59242: LD_VAR 0 1
59246: NOT
59247: IFFALSE 59251
// exit ;
59249: GO 59316
// result := 0 ;
59251: LD_ADDR_VAR 0 2
59255: PUSH
59256: LD_INT 0
59258: ST_TO_ADDR
// if GetTaskList ( sci ) then
59259: LD_VAR 0 1
59263: PPUSH
59264: CALL_OW 437
59268: IFFALSE 59316
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59270: LD_VAR 0 1
59274: PPUSH
59275: CALL_OW 437
59279: PUSH
59280: LD_INT 1
59282: ARRAY
59283: PUSH
59284: LD_INT 1
59286: ARRAY
59287: PUSH
59288: LD_STRING l
59290: EQUAL
59291: IFFALSE 59316
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59293: LD_ADDR_VAR 0 2
59297: PUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: CALL_OW 437
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_INT 4
59314: ARRAY
59315: ST_TO_ADDR
// end ;
59316: LD_VAR 0 2
59320: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
59325: PPUSH
59326: PPUSH
// if not base_units then
59327: LD_VAR 0 1
59331: NOT
59332: IFFALSE 59336
// exit ;
59334: GO 59423
// result := false ;
59336: LD_ADDR_VAR 0 2
59340: PUSH
59341: LD_INT 0
59343: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59344: LD_ADDR_VAR 0 5
59348: PUSH
59349: LD_VAR 0 1
59353: PPUSH
59354: LD_INT 21
59356: PUSH
59357: LD_INT 3
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PPUSH
59364: CALL_OW 72
59368: ST_TO_ADDR
// if not tmp then
59369: LD_VAR 0 5
59373: NOT
59374: IFFALSE 59378
// exit ;
59376: GO 59423
// for i in tmp do
59378: LD_ADDR_VAR 0 3
59382: PUSH
59383: LD_VAR 0 5
59387: PUSH
59388: FOR_IN
59389: IFFALSE 59421
// begin result := EnemyInRange ( i , 22 ) ;
59391: LD_ADDR_VAR 0 2
59395: PUSH
59396: LD_VAR 0 3
59400: PPUSH
59401: LD_INT 22
59403: PPUSH
59404: CALL 57659 0 2
59408: ST_TO_ADDR
// if result then
59409: LD_VAR 0 2
59413: IFFALSE 59419
// exit ;
59415: POP
59416: POP
59417: GO 59423
// end ;
59419: GO 59388
59421: POP
59422: POP
// end ;
59423: LD_VAR 0 2
59427: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59428: LD_INT 0
59430: PPUSH
59431: PPUSH
// if not units then
59432: LD_VAR 0 1
59436: NOT
59437: IFFALSE 59441
// exit ;
59439: GO 59511
// result := [ ] ;
59441: LD_ADDR_VAR 0 3
59445: PUSH
59446: EMPTY
59447: ST_TO_ADDR
// for i in units do
59448: LD_ADDR_VAR 0 4
59452: PUSH
59453: LD_VAR 0 1
59457: PUSH
59458: FOR_IN
59459: IFFALSE 59509
// if GetTag ( i ) = tag then
59461: LD_VAR 0 4
59465: PPUSH
59466: CALL_OW 110
59470: PUSH
59471: LD_VAR 0 2
59475: EQUAL
59476: IFFALSE 59507
// result := Replace ( result , result + 1 , i ) ;
59478: LD_ADDR_VAR 0 3
59482: PUSH
59483: LD_VAR 0 3
59487: PPUSH
59488: LD_VAR 0 3
59492: PUSH
59493: LD_INT 1
59495: PLUS
59496: PPUSH
59497: LD_VAR 0 4
59501: PPUSH
59502: CALL_OW 1
59506: ST_TO_ADDR
59507: GO 59458
59509: POP
59510: POP
// end ;
59511: LD_VAR 0 3
59515: RET
// export function IsDriver ( un ) ; begin
59516: LD_INT 0
59518: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59519: LD_ADDR_VAR 0 2
59523: PUSH
59524: LD_VAR 0 1
59528: PUSH
59529: LD_INT 55
59531: PUSH
59532: EMPTY
59533: LIST
59534: PPUSH
59535: CALL_OW 69
59539: IN
59540: ST_TO_ADDR
// end ;
59541: LD_VAR 0 2
59545: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59546: LD_INT 0
59548: PPUSH
59549: PPUSH
// list := [ ] ;
59550: LD_ADDR_VAR 0 5
59554: PUSH
59555: EMPTY
59556: ST_TO_ADDR
// case d of 0 :
59557: LD_VAR 0 3
59561: PUSH
59562: LD_INT 0
59564: DOUBLE
59565: EQUAL
59566: IFTRUE 59570
59568: GO 59703
59570: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59571: LD_ADDR_VAR 0 5
59575: PUSH
59576: LD_VAR 0 1
59580: PUSH
59581: LD_INT 4
59583: MINUS
59584: PUSH
59585: LD_VAR 0 2
59589: PUSH
59590: LD_INT 4
59592: MINUS
59593: PUSH
59594: LD_INT 2
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: PUSH
59602: LD_VAR 0 1
59606: PUSH
59607: LD_INT 3
59609: MINUS
59610: PUSH
59611: LD_VAR 0 2
59615: PUSH
59616: LD_INT 1
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: PUSH
59624: LD_VAR 0 1
59628: PUSH
59629: LD_INT 4
59631: PLUS
59632: PUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_INT 4
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 3
59653: PLUS
59654: PUSH
59655: LD_VAR 0 2
59659: PUSH
59660: LD_INT 3
59662: PLUS
59663: PUSH
59664: LD_INT 5
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: LIST
59671: PUSH
59672: LD_VAR 0 1
59676: PUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_INT 4
59684: PLUS
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: ST_TO_ADDR
// end ; 1 :
59701: GO 60401
59703: LD_INT 1
59705: DOUBLE
59706: EQUAL
59707: IFTRUE 59711
59709: GO 59844
59711: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59712: LD_ADDR_VAR 0 5
59716: PUSH
59717: LD_VAR 0 1
59721: PUSH
59722: LD_VAR 0 2
59726: PUSH
59727: LD_INT 4
59729: MINUS
59730: PUSH
59731: LD_INT 3
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: PUSH
59739: LD_VAR 0 1
59743: PUSH
59744: LD_INT 3
59746: MINUS
59747: PUSH
59748: LD_VAR 0 2
59752: PUSH
59753: LD_INT 3
59755: MINUS
59756: PUSH
59757: LD_INT 2
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: LIST
59764: PUSH
59765: LD_VAR 0 1
59769: PUSH
59770: LD_INT 4
59772: MINUS
59773: PUSH
59774: LD_VAR 0 2
59778: PUSH
59779: LD_INT 1
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: LD_VAR 0 1
59791: PUSH
59792: LD_VAR 0 2
59796: PUSH
59797: LD_INT 3
59799: PLUS
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: PUSH
59809: LD_VAR 0 1
59813: PUSH
59814: LD_INT 4
59816: PLUS
59817: PUSH
59818: LD_VAR 0 2
59822: PUSH
59823: LD_INT 4
59825: PLUS
59826: PUSH
59827: LD_INT 5
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// end ; 2 :
59842: GO 60401
59844: LD_INT 2
59846: DOUBLE
59847: EQUAL
59848: IFTRUE 59852
59850: GO 59981
59852: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59853: LD_ADDR_VAR 0 5
59857: PUSH
59858: LD_VAR 0 1
59862: PUSH
59863: LD_VAR 0 2
59867: PUSH
59868: LD_INT 3
59870: MINUS
59871: PUSH
59872: LD_INT 3
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: LIST
59879: PUSH
59880: LD_VAR 0 1
59884: PUSH
59885: LD_INT 4
59887: PLUS
59888: PUSH
59889: LD_VAR 0 2
59893: PUSH
59894: LD_INT 4
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: PUSH
59902: LD_VAR 0 1
59906: PUSH
59907: LD_VAR 0 2
59911: PUSH
59912: LD_INT 4
59914: PLUS
59915: PUSH
59916: LD_INT 0
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: PUSH
59924: LD_VAR 0 1
59928: PUSH
59929: LD_INT 3
59931: MINUS
59932: PUSH
59933: LD_VAR 0 2
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: PUSH
59946: LD_VAR 0 1
59950: PUSH
59951: LD_INT 4
59953: MINUS
59954: PUSH
59955: LD_VAR 0 2
59959: PUSH
59960: LD_INT 4
59962: MINUS
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: LIST
59978: ST_TO_ADDR
// end ; 3 :
59979: GO 60401
59981: LD_INT 3
59983: DOUBLE
59984: EQUAL
59985: IFTRUE 59989
59987: GO 60122
59989: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59990: LD_ADDR_VAR 0 5
59994: PUSH
59995: LD_VAR 0 1
59999: PUSH
60000: LD_INT 3
60002: PLUS
60003: PUSH
60004: LD_VAR 0 2
60008: PUSH
60009: LD_INT 4
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: PUSH
60017: LD_VAR 0 1
60021: PUSH
60022: LD_INT 4
60024: PLUS
60025: PUSH
60026: LD_VAR 0 2
60030: PUSH
60031: LD_INT 4
60033: PLUS
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: LIST
60042: PUSH
60043: LD_VAR 0 1
60047: PUSH
60048: LD_INT 4
60050: MINUS
60051: PUSH
60052: LD_VAR 0 2
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: LD_VAR 0 2
60074: PUSH
60075: LD_INT 4
60077: MINUS
60078: PUSH
60079: LD_INT 3
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: PUSH
60087: LD_VAR 0 1
60091: PUSH
60092: LD_INT 3
60094: MINUS
60095: PUSH
60096: LD_VAR 0 2
60100: PUSH
60101: LD_INT 3
60103: MINUS
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: LIST
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: ST_TO_ADDR
// end ; 4 :
60120: GO 60401
60122: LD_INT 4
60124: DOUBLE
60125: EQUAL
60126: IFTRUE 60130
60128: GO 60263
60130: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60131: LD_ADDR_VAR 0 5
60135: PUSH
60136: LD_VAR 0 1
60140: PUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_INT 4
60148: PLUS
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: LIST
60157: PUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_INT 3
60165: PLUS
60166: PUSH
60167: LD_VAR 0 2
60171: PUSH
60172: LD_INT 3
60174: PLUS
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: PUSH
60184: LD_VAR 0 1
60188: PUSH
60189: LD_INT 4
60191: PLUS
60192: PUSH
60193: LD_VAR 0 2
60197: PUSH
60198: LD_INT 4
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: PUSH
60206: LD_VAR 0 1
60210: PUSH
60211: LD_VAR 0 2
60215: PUSH
60216: LD_INT 3
60218: MINUS
60219: PUSH
60220: LD_INT 3
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: PUSH
60228: LD_VAR 0 1
60232: PUSH
60233: LD_INT 4
60235: MINUS
60236: PUSH
60237: LD_VAR 0 2
60241: PUSH
60242: LD_INT 4
60244: MINUS
60245: PUSH
60246: LD_INT 2
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: ST_TO_ADDR
// end ; 5 :
60261: GO 60401
60263: LD_INT 5
60265: DOUBLE
60266: EQUAL
60267: IFTRUE 60271
60269: GO 60400
60271: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60272: LD_ADDR_VAR 0 5
60276: PUSH
60277: LD_VAR 0 1
60281: PUSH
60282: LD_INT 4
60284: MINUS
60285: PUSH
60286: LD_VAR 0 2
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: LIST
60298: PUSH
60299: LD_VAR 0 1
60303: PUSH
60304: LD_VAR 0 2
60308: PUSH
60309: LD_INT 4
60311: MINUS
60312: PUSH
60313: LD_INT 3
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: PUSH
60321: LD_VAR 0 1
60325: PUSH
60326: LD_INT 4
60328: PLUS
60329: PUSH
60330: LD_VAR 0 2
60334: PUSH
60335: LD_INT 4
60337: PLUS
60338: PUSH
60339: LD_INT 5
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: PUSH
60347: LD_VAR 0 1
60351: PUSH
60352: LD_INT 3
60354: PLUS
60355: PUSH
60356: LD_VAR 0 2
60360: PUSH
60361: LD_INT 4
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 1
60373: PUSH
60374: LD_VAR 0 2
60378: PUSH
60379: LD_INT 3
60381: PLUS
60382: PUSH
60383: LD_INT 0
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: ST_TO_ADDR
// end ; end ;
60398: GO 60401
60400: POP
// result := list ;
60401: LD_ADDR_VAR 0 4
60405: PUSH
60406: LD_VAR 0 5
60410: ST_TO_ADDR
// end ;
60411: LD_VAR 0 4
60415: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60416: LD_INT 0
60418: PPUSH
60419: PPUSH
60420: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60421: LD_VAR 0 1
60425: NOT
60426: PUSH
60427: LD_VAR 0 2
60431: PUSH
60432: LD_INT 1
60434: PUSH
60435: LD_INT 2
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: LD_INT 4
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: IN
60450: NOT
60451: OR
60452: IFFALSE 60456
// exit ;
60454: GO 60548
// tmp := [ ] ;
60456: LD_ADDR_VAR 0 5
60460: PUSH
60461: EMPTY
60462: ST_TO_ADDR
// for i in units do
60463: LD_ADDR_VAR 0 4
60467: PUSH
60468: LD_VAR 0 1
60472: PUSH
60473: FOR_IN
60474: IFFALSE 60517
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60476: LD_ADDR_VAR 0 5
60480: PUSH
60481: LD_VAR 0 5
60485: PPUSH
60486: LD_VAR 0 5
60490: PUSH
60491: LD_INT 1
60493: PLUS
60494: PPUSH
60495: LD_VAR 0 4
60499: PPUSH
60500: LD_VAR 0 2
60504: PPUSH
60505: CALL_OW 259
60509: PPUSH
60510: CALL_OW 2
60514: ST_TO_ADDR
60515: GO 60473
60517: POP
60518: POP
// if not tmp then
60519: LD_VAR 0 5
60523: NOT
60524: IFFALSE 60528
// exit ;
60526: GO 60548
// result := SortListByListDesc ( units , tmp ) ;
60528: LD_ADDR_VAR 0 3
60532: PUSH
60533: LD_VAR 0 1
60537: PPUSH
60538: LD_VAR 0 5
60542: PPUSH
60543: CALL_OW 77
60547: ST_TO_ADDR
// end ;
60548: LD_VAR 0 3
60552: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60553: LD_INT 0
60555: PPUSH
60556: PPUSH
60557: PPUSH
// result := false ;
60558: LD_ADDR_VAR 0 3
60562: PUSH
60563: LD_INT 0
60565: ST_TO_ADDR
// x := GetX ( building ) ;
60566: LD_ADDR_VAR 0 4
60570: PUSH
60571: LD_VAR 0 2
60575: PPUSH
60576: CALL_OW 250
60580: ST_TO_ADDR
// y := GetY ( building ) ;
60581: LD_ADDR_VAR 0 5
60585: PUSH
60586: LD_VAR 0 2
60590: PPUSH
60591: CALL_OW 251
60595: ST_TO_ADDR
// if not building or not x or not y then
60596: LD_VAR 0 2
60600: NOT
60601: PUSH
60602: LD_VAR 0 4
60606: NOT
60607: OR
60608: PUSH
60609: LD_VAR 0 5
60613: NOT
60614: OR
60615: IFFALSE 60619
// exit ;
60617: GO 60711
// if GetTaskList ( unit ) then
60619: LD_VAR 0 1
60623: PPUSH
60624: CALL_OW 437
60628: IFFALSE 60711
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60630: LD_STRING e
60632: PUSH
60633: LD_VAR 0 1
60637: PPUSH
60638: CALL_OW 437
60642: PUSH
60643: LD_INT 1
60645: ARRAY
60646: PUSH
60647: LD_INT 1
60649: ARRAY
60650: EQUAL
60651: PUSH
60652: LD_VAR 0 4
60656: PUSH
60657: LD_VAR 0 1
60661: PPUSH
60662: CALL_OW 437
60666: PUSH
60667: LD_INT 1
60669: ARRAY
60670: PUSH
60671: LD_INT 2
60673: ARRAY
60674: EQUAL
60675: AND
60676: PUSH
60677: LD_VAR 0 5
60681: PUSH
60682: LD_VAR 0 1
60686: PPUSH
60687: CALL_OW 437
60691: PUSH
60692: LD_INT 1
60694: ARRAY
60695: PUSH
60696: LD_INT 3
60698: ARRAY
60699: EQUAL
60700: AND
60701: IFFALSE 60711
// result := true end ;
60703: LD_ADDR_VAR 0 3
60707: PUSH
60708: LD_INT 1
60710: ST_TO_ADDR
// end ;
60711: LD_VAR 0 3
60715: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60716: LD_INT 0
60718: PPUSH
// result := false ;
60719: LD_ADDR_VAR 0 4
60723: PUSH
60724: LD_INT 0
60726: ST_TO_ADDR
// if GetTaskList ( unit ) then
60727: LD_VAR 0 1
60731: PPUSH
60732: CALL_OW 437
60736: IFFALSE 60819
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60738: LD_STRING M
60740: PUSH
60741: LD_VAR 0 1
60745: PPUSH
60746: CALL_OW 437
60750: PUSH
60751: LD_INT 1
60753: ARRAY
60754: PUSH
60755: LD_INT 1
60757: ARRAY
60758: EQUAL
60759: PUSH
60760: LD_VAR 0 2
60764: PUSH
60765: LD_VAR 0 1
60769: PPUSH
60770: CALL_OW 437
60774: PUSH
60775: LD_INT 1
60777: ARRAY
60778: PUSH
60779: LD_INT 2
60781: ARRAY
60782: EQUAL
60783: AND
60784: PUSH
60785: LD_VAR 0 3
60789: PUSH
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 437
60799: PUSH
60800: LD_INT 1
60802: ARRAY
60803: PUSH
60804: LD_INT 3
60806: ARRAY
60807: EQUAL
60808: AND
60809: IFFALSE 60819
// result := true ;
60811: LD_ADDR_VAR 0 4
60815: PUSH
60816: LD_INT 1
60818: ST_TO_ADDR
// end ; end ;
60819: LD_VAR 0 4
60823: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60824: LD_INT 0
60826: PPUSH
60827: PPUSH
60828: PPUSH
60829: PPUSH
// if not unit or not area then
60830: LD_VAR 0 1
60834: NOT
60835: PUSH
60836: LD_VAR 0 2
60840: NOT
60841: OR
60842: IFFALSE 60846
// exit ;
60844: GO 61010
// tmp := AreaToList ( area , i ) ;
60846: LD_ADDR_VAR 0 6
60850: PUSH
60851: LD_VAR 0 2
60855: PPUSH
60856: LD_VAR 0 5
60860: PPUSH
60861: CALL_OW 517
60865: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60866: LD_ADDR_VAR 0 5
60870: PUSH
60871: DOUBLE
60872: LD_INT 1
60874: DEC
60875: ST_TO_ADDR
60876: LD_VAR 0 6
60880: PUSH
60881: LD_INT 1
60883: ARRAY
60884: PUSH
60885: FOR_TO
60886: IFFALSE 61008
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60888: LD_ADDR_VAR 0 7
60892: PUSH
60893: LD_VAR 0 6
60897: PUSH
60898: LD_INT 1
60900: ARRAY
60901: PUSH
60902: LD_VAR 0 5
60906: ARRAY
60907: PUSH
60908: LD_VAR 0 6
60912: PUSH
60913: LD_INT 2
60915: ARRAY
60916: PUSH
60917: LD_VAR 0 5
60921: ARRAY
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60927: LD_VAR 0 7
60931: PUSH
60932: LD_INT 1
60934: ARRAY
60935: PPUSH
60936: LD_VAR 0 7
60940: PUSH
60941: LD_INT 2
60943: ARRAY
60944: PPUSH
60945: CALL_OW 428
60949: PUSH
60950: LD_INT 0
60952: EQUAL
60953: IFFALSE 61006
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60955: LD_VAR 0 1
60959: PPUSH
60960: LD_VAR 0 7
60964: PUSH
60965: LD_INT 1
60967: ARRAY
60968: PPUSH
60969: LD_VAR 0 7
60973: PUSH
60974: LD_INT 2
60976: ARRAY
60977: PPUSH
60978: LD_VAR 0 3
60982: PPUSH
60983: CALL_OW 48
// result := IsPlaced ( unit ) ;
60987: LD_ADDR_VAR 0 4
60991: PUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 305
61001: ST_TO_ADDR
// exit ;
61002: POP
61003: POP
61004: GO 61010
// end ; end ;
61006: GO 60885
61008: POP
61009: POP
// end ;
61010: LD_VAR 0 4
61014: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61015: LD_INT 0
61017: PPUSH
61018: PPUSH
61019: PPUSH
// if not side or side > 8 then
61020: LD_VAR 0 1
61024: NOT
61025: PUSH
61026: LD_VAR 0 1
61030: PUSH
61031: LD_INT 8
61033: GREATER
61034: OR
61035: IFFALSE 61039
// exit ;
61037: GO 61226
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61039: LD_ADDR_VAR 0 4
61043: PUSH
61044: LD_INT 22
61046: PUSH
61047: LD_VAR 0 1
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 21
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PPUSH
61070: CALL_OW 69
61074: ST_TO_ADDR
// if not tmp then
61075: LD_VAR 0 4
61079: NOT
61080: IFFALSE 61084
// exit ;
61082: GO 61226
// enable_addtolog := true ;
61084: LD_ADDR_OWVAR 81
61088: PUSH
61089: LD_INT 1
61091: ST_TO_ADDR
// AddToLog ( [ ) ;
61092: LD_STRING [
61094: PPUSH
61095: CALL_OW 561
// for i in tmp do
61099: LD_ADDR_VAR 0 3
61103: PUSH
61104: LD_VAR 0 4
61108: PUSH
61109: FOR_IN
61110: IFFALSE 61217
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61112: LD_STRING [
61114: PUSH
61115: LD_VAR 0 3
61119: PPUSH
61120: CALL_OW 266
61124: STR
61125: PUSH
61126: LD_STRING , 
61128: STR
61129: PUSH
61130: LD_VAR 0 3
61134: PPUSH
61135: CALL_OW 250
61139: STR
61140: PUSH
61141: LD_STRING , 
61143: STR
61144: PUSH
61145: LD_VAR 0 3
61149: PPUSH
61150: CALL_OW 251
61154: STR
61155: PUSH
61156: LD_STRING , 
61158: STR
61159: PUSH
61160: LD_VAR 0 3
61164: PPUSH
61165: CALL_OW 254
61169: STR
61170: PUSH
61171: LD_STRING , 
61173: STR
61174: PUSH
61175: LD_VAR 0 3
61179: PPUSH
61180: LD_INT 1
61182: PPUSH
61183: CALL_OW 268
61187: STR
61188: PUSH
61189: LD_STRING , 
61191: STR
61192: PUSH
61193: LD_VAR 0 3
61197: PPUSH
61198: LD_INT 2
61200: PPUSH
61201: CALL_OW 268
61205: STR
61206: PUSH
61207: LD_STRING ],
61209: STR
61210: PPUSH
61211: CALL_OW 561
// end ;
61215: GO 61109
61217: POP
61218: POP
// AddToLog ( ]; ) ;
61219: LD_STRING ];
61221: PPUSH
61222: CALL_OW 561
// end ;
61226: LD_VAR 0 2
61230: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61231: LD_INT 0
61233: PPUSH
61234: PPUSH
61235: PPUSH
61236: PPUSH
61237: PPUSH
// if not area or not rate or not max then
61238: LD_VAR 0 1
61242: NOT
61243: PUSH
61244: LD_VAR 0 2
61248: NOT
61249: OR
61250: PUSH
61251: LD_VAR 0 4
61255: NOT
61256: OR
61257: IFFALSE 61261
// exit ;
61259: GO 61453
// while 1 do
61261: LD_INT 1
61263: IFFALSE 61453
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61265: LD_ADDR_VAR 0 9
61269: PUSH
61270: LD_VAR 0 1
61274: PPUSH
61275: LD_INT 1
61277: PPUSH
61278: CALL_OW 287
61282: PUSH
61283: LD_INT 10
61285: MUL
61286: ST_TO_ADDR
// r := rate / 10 ;
61287: LD_ADDR_VAR 0 7
61291: PUSH
61292: LD_VAR 0 2
61296: PUSH
61297: LD_INT 10
61299: DIVREAL
61300: ST_TO_ADDR
// time := 1 1$00 ;
61301: LD_ADDR_VAR 0 8
61305: PUSH
61306: LD_INT 2100
61308: ST_TO_ADDR
// if amount < min then
61309: LD_VAR 0 9
61313: PUSH
61314: LD_VAR 0 3
61318: LESS
61319: IFFALSE 61337
// r := r * 2 else
61321: LD_ADDR_VAR 0 7
61325: PUSH
61326: LD_VAR 0 7
61330: PUSH
61331: LD_INT 2
61333: MUL
61334: ST_TO_ADDR
61335: GO 61363
// if amount > max then
61337: LD_VAR 0 9
61341: PUSH
61342: LD_VAR 0 4
61346: GREATER
61347: IFFALSE 61363
// r := r / 2 ;
61349: LD_ADDR_VAR 0 7
61353: PUSH
61354: LD_VAR 0 7
61358: PUSH
61359: LD_INT 2
61361: DIVREAL
61362: ST_TO_ADDR
// time := time / r ;
61363: LD_ADDR_VAR 0 8
61367: PUSH
61368: LD_VAR 0 8
61372: PUSH
61373: LD_VAR 0 7
61377: DIVREAL
61378: ST_TO_ADDR
// if time < 0 then
61379: LD_VAR 0 8
61383: PUSH
61384: LD_INT 0
61386: LESS
61387: IFFALSE 61404
// time := time * - 1 ;
61389: LD_ADDR_VAR 0 8
61393: PUSH
61394: LD_VAR 0 8
61398: PUSH
61399: LD_INT 1
61401: NEG
61402: MUL
61403: ST_TO_ADDR
// wait ( time ) ;
61404: LD_VAR 0 8
61408: PPUSH
61409: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61413: LD_INT 35
61415: PPUSH
61416: LD_INT 875
61418: PPUSH
61419: CALL_OW 12
61423: PPUSH
61424: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61428: LD_INT 1
61430: PPUSH
61431: LD_INT 5
61433: PPUSH
61434: CALL_OW 12
61438: PPUSH
61439: LD_VAR 0 1
61443: PPUSH
61444: LD_INT 1
61446: PPUSH
61447: CALL_OW 55
// end ;
61451: GO 61261
// end ;
61453: LD_VAR 0 5
61457: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61458: LD_INT 0
61460: PPUSH
61461: PPUSH
61462: PPUSH
61463: PPUSH
61464: PPUSH
61465: PPUSH
61466: PPUSH
61467: PPUSH
// if not turrets or not factories then
61468: LD_VAR 0 1
61472: NOT
61473: PUSH
61474: LD_VAR 0 2
61478: NOT
61479: OR
61480: IFFALSE 61484
// exit ;
61482: GO 61791
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61484: LD_ADDR_VAR 0 10
61488: PUSH
61489: LD_INT 5
61491: PUSH
61492: LD_INT 6
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: LD_INT 4
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 3
61511: PUSH
61512: LD_INT 5
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 24
61526: PUSH
61527: LD_INT 25
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 23
61536: PUSH
61537: LD_INT 27
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 42
61550: PUSH
61551: LD_INT 43
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 44
61560: PUSH
61561: LD_INT 46
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 45
61570: PUSH
61571: LD_INT 47
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: EMPTY
61579: LIST
61580: LIST
61581: LIST
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: LIST
61587: ST_TO_ADDR
// result := [ ] ;
61588: LD_ADDR_VAR 0 3
61592: PUSH
61593: EMPTY
61594: ST_TO_ADDR
// for i in turrets do
61595: LD_ADDR_VAR 0 4
61599: PUSH
61600: LD_VAR 0 1
61604: PUSH
61605: FOR_IN
61606: IFFALSE 61789
// begin nat := GetNation ( i ) ;
61608: LD_ADDR_VAR 0 7
61612: PUSH
61613: LD_VAR 0 4
61617: PPUSH
61618: CALL_OW 248
61622: ST_TO_ADDR
// weapon := 0 ;
61623: LD_ADDR_VAR 0 8
61627: PUSH
61628: LD_INT 0
61630: ST_TO_ADDR
// if not nat then
61631: LD_VAR 0 7
61635: NOT
61636: IFFALSE 61640
// continue ;
61638: GO 61605
// for j in list [ nat ] do
61640: LD_ADDR_VAR 0 5
61644: PUSH
61645: LD_VAR 0 10
61649: PUSH
61650: LD_VAR 0 7
61654: ARRAY
61655: PUSH
61656: FOR_IN
61657: IFFALSE 61698
// if GetBWeapon ( i ) = j [ 1 ] then
61659: LD_VAR 0 4
61663: PPUSH
61664: CALL_OW 269
61668: PUSH
61669: LD_VAR 0 5
61673: PUSH
61674: LD_INT 1
61676: ARRAY
61677: EQUAL
61678: IFFALSE 61696
// begin weapon := j [ 2 ] ;
61680: LD_ADDR_VAR 0 8
61684: PUSH
61685: LD_VAR 0 5
61689: PUSH
61690: LD_INT 2
61692: ARRAY
61693: ST_TO_ADDR
// break ;
61694: GO 61698
// end ;
61696: GO 61656
61698: POP
61699: POP
// if not weapon then
61700: LD_VAR 0 8
61704: NOT
61705: IFFALSE 61709
// continue ;
61707: GO 61605
// for k in factories do
61709: LD_ADDR_VAR 0 6
61713: PUSH
61714: LD_VAR 0 2
61718: PUSH
61719: FOR_IN
61720: IFFALSE 61785
// begin weapons := AvailableWeaponList ( k ) ;
61722: LD_ADDR_VAR 0 9
61726: PUSH
61727: LD_VAR 0 6
61731: PPUSH
61732: CALL_OW 478
61736: ST_TO_ADDR
// if not weapons then
61737: LD_VAR 0 9
61741: NOT
61742: IFFALSE 61746
// continue ;
61744: GO 61719
// if weapon in weapons then
61746: LD_VAR 0 8
61750: PUSH
61751: LD_VAR 0 9
61755: IN
61756: IFFALSE 61783
// begin result := [ i , weapon ] ;
61758: LD_ADDR_VAR 0 3
61762: PUSH
61763: LD_VAR 0 4
61767: PUSH
61768: LD_VAR 0 8
61772: PUSH
61773: EMPTY
61774: LIST
61775: LIST
61776: ST_TO_ADDR
// exit ;
61777: POP
61778: POP
61779: POP
61780: POP
61781: GO 61791
// end ; end ;
61783: GO 61719
61785: POP
61786: POP
// end ;
61787: GO 61605
61789: POP
61790: POP
// end ;
61791: LD_VAR 0 3
61795: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61796: LD_INT 0
61798: PPUSH
// if not side or side > 8 then
61799: LD_VAR 0 3
61803: NOT
61804: PUSH
61805: LD_VAR 0 3
61809: PUSH
61810: LD_INT 8
61812: GREATER
61813: OR
61814: IFFALSE 61818
// exit ;
61816: GO 61877
// if not range then
61818: LD_VAR 0 4
61822: NOT
61823: IFFALSE 61834
// range := - 12 ;
61825: LD_ADDR_VAR 0 4
61829: PUSH
61830: LD_INT 12
61832: NEG
61833: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61834: LD_VAR 0 1
61838: PPUSH
61839: LD_VAR 0 2
61843: PPUSH
61844: LD_VAR 0 3
61848: PPUSH
61849: LD_VAR 0 4
61853: PPUSH
61854: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61858: LD_VAR 0 1
61862: PPUSH
61863: LD_VAR 0 2
61867: PPUSH
61868: LD_VAR 0 3
61872: PPUSH
61873: CALL_OW 331
// end ;
61877: LD_VAR 0 5
61881: RET
// export function Video ( mode ) ; begin
61882: LD_INT 0
61884: PPUSH
// ingame_video = mode ;
61885: LD_ADDR_OWVAR 52
61889: PUSH
61890: LD_VAR 0 1
61894: ST_TO_ADDR
// interface_hidden = mode ;
61895: LD_ADDR_OWVAR 54
61899: PUSH
61900: LD_VAR 0 1
61904: ST_TO_ADDR
// end ;
61905: LD_VAR 0 2
61909: RET
// export function Join ( array , element ) ; begin
61910: LD_INT 0
61912: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61913: LD_ADDR_VAR 0 3
61917: PUSH
61918: LD_VAR 0 1
61922: PPUSH
61923: LD_VAR 0 1
61927: PUSH
61928: LD_INT 1
61930: PLUS
61931: PPUSH
61932: LD_VAR 0 2
61936: PPUSH
61937: CALL_OW 1
61941: ST_TO_ADDR
// end ;
61942: LD_VAR 0 3
61946: RET
// export function JoinUnion ( array , element ) ; begin
61947: LD_INT 0
61949: PPUSH
// result := array union element ;
61950: LD_ADDR_VAR 0 3
61954: PUSH
61955: LD_VAR 0 1
61959: PUSH
61960: LD_VAR 0 2
61964: UNION
61965: ST_TO_ADDR
// end ;
61966: LD_VAR 0 3
61970: RET
// export function GetBehemoths ( side ) ; begin
61971: LD_INT 0
61973: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61974: LD_ADDR_VAR 0 2
61978: PUSH
61979: LD_INT 22
61981: PUSH
61982: LD_VAR 0 1
61986: PUSH
61987: EMPTY
61988: LIST
61989: LIST
61990: PUSH
61991: LD_INT 31
61993: PUSH
61994: LD_INT 25
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PPUSH
62005: CALL_OW 69
62009: ST_TO_ADDR
// end ;
62010: LD_VAR 0 2
62014: RET
// export function Shuffle ( array ) ; var i , index ; begin
62015: LD_INT 0
62017: PPUSH
62018: PPUSH
62019: PPUSH
// result := [ ] ;
62020: LD_ADDR_VAR 0 2
62024: PUSH
62025: EMPTY
62026: ST_TO_ADDR
// if not array then
62027: LD_VAR 0 1
62031: NOT
62032: IFFALSE 62036
// exit ;
62034: GO 62135
// Randomize ;
62036: CALL_OW 10
// for i = array downto 1 do
62040: LD_ADDR_VAR 0 3
62044: PUSH
62045: DOUBLE
62046: LD_VAR 0 1
62050: INC
62051: ST_TO_ADDR
62052: LD_INT 1
62054: PUSH
62055: FOR_DOWNTO
62056: IFFALSE 62133
// begin index := rand ( 1 , array ) ;
62058: LD_ADDR_VAR 0 4
62062: PUSH
62063: LD_INT 1
62065: PPUSH
62066: LD_VAR 0 1
62070: PPUSH
62071: CALL_OW 12
62075: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62076: LD_ADDR_VAR 0 2
62080: PUSH
62081: LD_VAR 0 2
62085: PPUSH
62086: LD_VAR 0 2
62090: PUSH
62091: LD_INT 1
62093: PLUS
62094: PPUSH
62095: LD_VAR 0 1
62099: PUSH
62100: LD_VAR 0 4
62104: ARRAY
62105: PPUSH
62106: CALL_OW 2
62110: ST_TO_ADDR
// array := Delete ( array , index ) ;
62111: LD_ADDR_VAR 0 1
62115: PUSH
62116: LD_VAR 0 1
62120: PPUSH
62121: LD_VAR 0 4
62125: PPUSH
62126: CALL_OW 3
62130: ST_TO_ADDR
// end ;
62131: GO 62055
62133: POP
62134: POP
// end ;
62135: LD_VAR 0 2
62139: RET
// export function GetBaseMaterials ( base ) ; begin
62140: LD_INT 0
62142: PPUSH
// result := [ 0 , 0 , 0 ] ;
62143: LD_ADDR_VAR 0 2
62147: PUSH
62148: LD_INT 0
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: LIST
62161: ST_TO_ADDR
// if not base then
62162: LD_VAR 0 1
62166: NOT
62167: IFFALSE 62171
// exit ;
62169: GO 62220
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62171: LD_ADDR_VAR 0 2
62175: PUSH
62176: LD_VAR 0 1
62180: PPUSH
62181: LD_INT 1
62183: PPUSH
62184: CALL_OW 275
62188: PUSH
62189: LD_VAR 0 1
62193: PPUSH
62194: LD_INT 2
62196: PPUSH
62197: CALL_OW 275
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: LD_INT 3
62209: PPUSH
62210: CALL_OW 275
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: LIST
62219: ST_TO_ADDR
// end ;
62220: LD_VAR 0 2
62224: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62225: LD_INT 0
62227: PPUSH
62228: PPUSH
// result := array ;
62229: LD_ADDR_VAR 0 3
62233: PUSH
62234: LD_VAR 0 1
62238: ST_TO_ADDR
// if size > 0 then
62239: LD_VAR 0 2
62243: PUSH
62244: LD_INT 0
62246: GREATER
62247: IFFALSE 62293
// for i := array downto size do
62249: LD_ADDR_VAR 0 4
62253: PUSH
62254: DOUBLE
62255: LD_VAR 0 1
62259: INC
62260: ST_TO_ADDR
62261: LD_VAR 0 2
62265: PUSH
62266: FOR_DOWNTO
62267: IFFALSE 62291
// result := Delete ( result , result ) ;
62269: LD_ADDR_VAR 0 3
62273: PUSH
62274: LD_VAR 0 3
62278: PPUSH
62279: LD_VAR 0 3
62283: PPUSH
62284: CALL_OW 3
62288: ST_TO_ADDR
62289: GO 62266
62291: POP
62292: POP
// end ;
62293: LD_VAR 0 3
62297: RET
// export function ComExit ( unit ) ; var tmp ; begin
62298: LD_INT 0
62300: PPUSH
62301: PPUSH
// if not IsInUnit ( unit ) then
62302: LD_VAR 0 1
62306: PPUSH
62307: CALL_OW 310
62311: NOT
62312: IFFALSE 62316
// exit ;
62314: GO 62376
// tmp := IsInUnit ( unit ) ;
62316: LD_ADDR_VAR 0 3
62320: PUSH
62321: LD_VAR 0 1
62325: PPUSH
62326: CALL_OW 310
62330: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62331: LD_VAR 0 3
62335: PPUSH
62336: CALL_OW 247
62340: PUSH
62341: LD_INT 2
62343: EQUAL
62344: IFFALSE 62357
// ComExitVehicle ( unit ) else
62346: LD_VAR 0 1
62350: PPUSH
62351: CALL_OW 121
62355: GO 62366
// ComExitBuilding ( unit ) ;
62357: LD_VAR 0 1
62361: PPUSH
62362: CALL_OW 122
// result := tmp ;
62366: LD_ADDR_VAR 0 2
62370: PUSH
62371: LD_VAR 0 3
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 2
62380: RET
// export function ComExitAll ( units ) ; var i ; begin
62381: LD_INT 0
62383: PPUSH
62384: PPUSH
// if not units then
62385: LD_VAR 0 1
62389: NOT
62390: IFFALSE 62394
// exit ;
62392: GO 62420
// for i in units do
62394: LD_ADDR_VAR 0 3
62398: PUSH
62399: LD_VAR 0 1
62403: PUSH
62404: FOR_IN
62405: IFFALSE 62418
// ComExit ( i ) ;
62407: LD_VAR 0 3
62411: PPUSH
62412: CALL 62298 0 1
62416: GO 62404
62418: POP
62419: POP
// end ;
62420: LD_VAR 0 2
62424: RET
// export function ResetHc ; begin
62425: LD_INT 0
62427: PPUSH
// InitHc ;
62428: CALL_OW 19
// hc_importance := 0 ;
62432: LD_ADDR_OWVAR 32
62436: PUSH
62437: LD_INT 0
62439: ST_TO_ADDR
// end ;
62440: LD_VAR 0 1
62444: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62445: LD_INT 0
62447: PPUSH
62448: PPUSH
62449: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62450: LD_ADDR_VAR 0 6
62454: PUSH
62455: LD_VAR 0 1
62459: PUSH
62460: LD_VAR 0 3
62464: PLUS
62465: PUSH
62466: LD_INT 2
62468: DIV
62469: ST_TO_ADDR
// if _x < 0 then
62470: LD_VAR 0 6
62474: PUSH
62475: LD_INT 0
62477: LESS
62478: IFFALSE 62495
// _x := _x * - 1 ;
62480: LD_ADDR_VAR 0 6
62484: PUSH
62485: LD_VAR 0 6
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: MUL
62494: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62495: LD_ADDR_VAR 0 7
62499: PUSH
62500: LD_VAR 0 2
62504: PUSH
62505: LD_VAR 0 4
62509: PLUS
62510: PUSH
62511: LD_INT 2
62513: DIV
62514: ST_TO_ADDR
// if _y < 0 then
62515: LD_VAR 0 7
62519: PUSH
62520: LD_INT 0
62522: LESS
62523: IFFALSE 62540
// _y := _y * - 1 ;
62525: LD_ADDR_VAR 0 7
62529: PUSH
62530: LD_VAR 0 7
62534: PUSH
62535: LD_INT 1
62537: NEG
62538: MUL
62539: ST_TO_ADDR
// result := [ _x , _y ] ;
62540: LD_ADDR_VAR 0 5
62544: PUSH
62545: LD_VAR 0 6
62549: PUSH
62550: LD_VAR 0 7
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: ST_TO_ADDR
// end ;
62559: LD_VAR 0 5
62563: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62564: LD_INT 0
62566: PPUSH
62567: PPUSH
62568: PPUSH
62569: PPUSH
// task := GetTaskList ( unit ) ;
62570: LD_ADDR_VAR 0 7
62574: PUSH
62575: LD_VAR 0 1
62579: PPUSH
62580: CALL_OW 437
62584: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62585: LD_VAR 0 7
62589: NOT
62590: PUSH
62591: LD_VAR 0 1
62595: PPUSH
62596: LD_VAR 0 2
62600: PPUSH
62601: CALL_OW 308
62605: NOT
62606: AND
62607: IFFALSE 62611
// exit ;
62609: GO 62729
// if IsInArea ( unit , area ) then
62611: LD_VAR 0 1
62615: PPUSH
62616: LD_VAR 0 2
62620: PPUSH
62621: CALL_OW 308
62625: IFFALSE 62643
// begin ComMoveToArea ( unit , goAway ) ;
62627: LD_VAR 0 1
62631: PPUSH
62632: LD_VAR 0 3
62636: PPUSH
62637: CALL_OW 113
// exit ;
62641: GO 62729
// end ; if task [ 1 ] [ 1 ] <> M then
62643: LD_VAR 0 7
62647: PUSH
62648: LD_INT 1
62650: ARRAY
62651: PUSH
62652: LD_INT 1
62654: ARRAY
62655: PUSH
62656: LD_STRING M
62658: NONEQUAL
62659: IFFALSE 62663
// exit ;
62661: GO 62729
// x := task [ 1 ] [ 2 ] ;
62663: LD_ADDR_VAR 0 5
62667: PUSH
62668: LD_VAR 0 7
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PUSH
62677: LD_INT 2
62679: ARRAY
62680: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62681: LD_ADDR_VAR 0 6
62685: PUSH
62686: LD_VAR 0 7
62690: PUSH
62691: LD_INT 1
62693: ARRAY
62694: PUSH
62695: LD_INT 3
62697: ARRAY
62698: ST_TO_ADDR
// if InArea ( x , y , area ) then
62699: LD_VAR 0 5
62703: PPUSH
62704: LD_VAR 0 6
62708: PPUSH
62709: LD_VAR 0 2
62713: PPUSH
62714: CALL_OW 309
62718: IFFALSE 62729
// ComStop ( unit ) ;
62720: LD_VAR 0 1
62724: PPUSH
62725: CALL_OW 141
// end ;
62729: LD_VAR 0 4
62733: RET
// export function Abs ( value ) ; begin
62734: LD_INT 0
62736: PPUSH
// result := value ;
62737: LD_ADDR_VAR 0 2
62741: PUSH
62742: LD_VAR 0 1
62746: ST_TO_ADDR
// if value < 0 then
62747: LD_VAR 0 1
62751: PUSH
62752: LD_INT 0
62754: LESS
62755: IFFALSE 62772
// result := value * - 1 ;
62757: LD_ADDR_VAR 0 2
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_INT 1
62769: NEG
62770: MUL
62771: ST_TO_ADDR
// end ;
62772: LD_VAR 0 2
62776: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62777: LD_INT 0
62779: PPUSH
62780: PPUSH
62781: PPUSH
62782: PPUSH
62783: PPUSH
62784: PPUSH
62785: PPUSH
62786: PPUSH
// if not unit or not building then
62787: LD_VAR 0 1
62791: NOT
62792: PUSH
62793: LD_VAR 0 2
62797: NOT
62798: OR
62799: IFFALSE 62803
// exit ;
62801: GO 63029
// x := GetX ( building ) ;
62803: LD_ADDR_VAR 0 4
62807: PUSH
62808: LD_VAR 0 2
62812: PPUSH
62813: CALL_OW 250
62817: ST_TO_ADDR
// y := GetY ( building ) ;
62818: LD_ADDR_VAR 0 6
62822: PUSH
62823: LD_VAR 0 2
62827: PPUSH
62828: CALL_OW 251
62832: ST_TO_ADDR
// d := GetDir ( building ) ;
62833: LD_ADDR_VAR 0 8
62837: PUSH
62838: LD_VAR 0 2
62842: PPUSH
62843: CALL_OW 254
62847: ST_TO_ADDR
// r := 4 ;
62848: LD_ADDR_VAR 0 9
62852: PUSH
62853: LD_INT 4
62855: ST_TO_ADDR
// for i := 1 to 5 do
62856: LD_ADDR_VAR 0 10
62860: PUSH
62861: DOUBLE
62862: LD_INT 1
62864: DEC
62865: ST_TO_ADDR
62866: LD_INT 5
62868: PUSH
62869: FOR_TO
62870: IFFALSE 63027
// begin _x := ShiftX ( x , d , r + i ) ;
62872: LD_ADDR_VAR 0 5
62876: PUSH
62877: LD_VAR 0 4
62881: PPUSH
62882: LD_VAR 0 8
62886: PPUSH
62887: LD_VAR 0 9
62891: PUSH
62892: LD_VAR 0 10
62896: PLUS
62897: PPUSH
62898: CALL_OW 272
62902: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62903: LD_ADDR_VAR 0 7
62907: PUSH
62908: LD_VAR 0 6
62912: PPUSH
62913: LD_VAR 0 8
62917: PPUSH
62918: LD_VAR 0 9
62922: PUSH
62923: LD_VAR 0 10
62927: PLUS
62928: PPUSH
62929: CALL_OW 273
62933: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62934: LD_VAR 0 5
62938: PPUSH
62939: LD_VAR 0 7
62943: PPUSH
62944: CALL_OW 488
62948: PUSH
62949: LD_VAR 0 5
62953: PPUSH
62954: LD_VAR 0 7
62958: PPUSH
62959: CALL_OW 428
62963: PPUSH
62964: CALL_OW 247
62968: PUSH
62969: LD_INT 3
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: IN
62979: NOT
62980: AND
62981: IFFALSE 63025
// begin ComMoveXY ( unit , _x , _y ) ;
62983: LD_VAR 0 1
62987: PPUSH
62988: LD_VAR 0 5
62992: PPUSH
62993: LD_VAR 0 7
62997: PPUSH
62998: CALL_OW 111
// result := [ _x , _y ] ;
63002: LD_ADDR_VAR 0 3
63006: PUSH
63007: LD_VAR 0 5
63011: PUSH
63012: LD_VAR 0 7
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: ST_TO_ADDR
// exit ;
63021: POP
63022: POP
63023: GO 63029
// end ; end ;
63025: GO 62869
63027: POP
63028: POP
// end ;
63029: LD_VAR 0 3
63033: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
63038: PPUSH
// result := 0 ;
63039: LD_ADDR_VAR 0 3
63043: PUSH
63044: LD_INT 0
63046: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63047: LD_VAR 0 1
63051: PUSH
63052: LD_INT 0
63054: LESS
63055: PUSH
63056: LD_VAR 0 1
63060: PUSH
63061: LD_INT 8
63063: GREATER
63064: OR
63065: PUSH
63066: LD_VAR 0 2
63070: PUSH
63071: LD_INT 0
63073: LESS
63074: OR
63075: PUSH
63076: LD_VAR 0 2
63080: PUSH
63081: LD_INT 8
63083: GREATER
63084: OR
63085: IFFALSE 63089
// exit ;
63087: GO 63164
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63089: LD_ADDR_VAR 0 4
63093: PUSH
63094: LD_INT 22
63096: PUSH
63097: LD_VAR 0 2
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PPUSH
63106: CALL_OW 69
63110: PUSH
63111: FOR_IN
63112: IFFALSE 63162
// begin un := UnitShoot ( i ) ;
63114: LD_ADDR_VAR 0 5
63118: PUSH
63119: LD_VAR 0 4
63123: PPUSH
63124: CALL_OW 504
63128: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63129: LD_VAR 0 5
63133: PPUSH
63134: CALL_OW 255
63138: PUSH
63139: LD_VAR 0 1
63143: EQUAL
63144: IFFALSE 63160
// begin result := un ;
63146: LD_ADDR_VAR 0 3
63150: PUSH
63151: LD_VAR 0 5
63155: ST_TO_ADDR
// exit ;
63156: POP
63157: POP
63158: GO 63164
// end ; end ;
63160: GO 63111
63162: POP
63163: POP
// end ;
63164: LD_VAR 0 3
63168: RET
// export function GetCargoBay ( units ) ; begin
63169: LD_INT 0
63171: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63172: LD_ADDR_VAR 0 2
63176: PUSH
63177: LD_VAR 0 1
63181: PPUSH
63182: LD_INT 2
63184: PUSH
63185: LD_INT 34
63187: PUSH
63188: LD_INT 12
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 34
63197: PUSH
63198: LD_INT 51
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 34
63207: PUSH
63208: LD_INT 32
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 34
63217: PUSH
63218: LD_EXP 25
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: PPUSH
63234: CALL_OW 72
63238: ST_TO_ADDR
// end ;
63239: LD_VAR 0 2
63243: RET
// export function Negate ( value ) ; begin
63244: LD_INT 0
63246: PPUSH
// result := not value ;
63247: LD_ADDR_VAR 0 2
63251: PUSH
63252: LD_VAR 0 1
63256: NOT
63257: ST_TO_ADDR
// end ;
63258: LD_VAR 0 2
63262: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
63263: LD_INT 0
63265: PPUSH
// if x1 = x2 then
63266: LD_VAR 0 1
63270: PUSH
63271: LD_VAR 0 3
63275: EQUAL
63276: IFFALSE 63310
// begin if y1 > y2 then
63278: LD_VAR 0 2
63282: PUSH
63283: LD_VAR 0 4
63287: GREATER
63288: IFFALSE 63300
// result := 0 else
63290: LD_ADDR_VAR 0 5
63294: PUSH
63295: LD_INT 0
63297: ST_TO_ADDR
63298: GO 63308
// result := 3 ;
63300: LD_ADDR_VAR 0 5
63304: PUSH
63305: LD_INT 3
63307: ST_TO_ADDR
// exit ;
63308: GO 63396
// end ; if y1 = y2 then
63310: LD_VAR 0 2
63314: PUSH
63315: LD_VAR 0 4
63319: EQUAL
63320: IFFALSE 63354
// begin if x1 > x2 then
63322: LD_VAR 0 1
63326: PUSH
63327: LD_VAR 0 3
63331: GREATER
63332: IFFALSE 63344
// result := 1 else
63334: LD_ADDR_VAR 0 5
63338: PUSH
63339: LD_INT 1
63341: ST_TO_ADDR
63342: GO 63352
// result := 4 ;
63344: LD_ADDR_VAR 0 5
63348: PUSH
63349: LD_INT 4
63351: ST_TO_ADDR
// exit ;
63352: GO 63396
// end ; if x1 > x2 and y1 > y2 then
63354: LD_VAR 0 1
63358: PUSH
63359: LD_VAR 0 3
63363: GREATER
63364: PUSH
63365: LD_VAR 0 2
63369: PUSH
63370: LD_VAR 0 4
63374: GREATER
63375: AND
63376: IFFALSE 63388
// result := 2 else
63378: LD_ADDR_VAR 0 5
63382: PUSH
63383: LD_INT 2
63385: ST_TO_ADDR
63386: GO 63396
// result := 5 ;
63388: LD_ADDR_VAR 0 5
63392: PUSH
63393: LD_INT 5
63395: ST_TO_ADDR
// end ;
63396: LD_VAR 0 5
63400: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63401: LD_INT 0
63403: PPUSH
63404: PPUSH
// if not driver or not IsInUnit ( driver ) then
63405: LD_VAR 0 1
63409: NOT
63410: PUSH
63411: LD_VAR 0 1
63415: PPUSH
63416: CALL_OW 310
63420: NOT
63421: OR
63422: IFFALSE 63426
// exit ;
63424: GO 63516
// vehicle := IsInUnit ( driver ) ;
63426: LD_ADDR_VAR 0 3
63430: PUSH
63431: LD_VAR 0 1
63435: PPUSH
63436: CALL_OW 310
63440: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63441: LD_VAR 0 1
63445: PPUSH
63446: LD_STRING \
63448: PUSH
63449: LD_INT 0
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: LIST
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: PUSH
63476: LD_STRING E
63478: PUSH
63479: LD_INT 0
63481: PUSH
63482: LD_INT 0
63484: PUSH
63485: LD_VAR 0 3
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 0
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: EMPTY
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: PUSH
63508: EMPTY
63509: LIST
63510: LIST
63511: PPUSH
63512: CALL_OW 446
// end ;
63516: LD_VAR 0 2
63520: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63521: LD_INT 0
63523: PPUSH
63524: PPUSH
// if not driver or not IsInUnit ( driver ) then
63525: LD_VAR 0 1
63529: NOT
63530: PUSH
63531: LD_VAR 0 1
63535: PPUSH
63536: CALL_OW 310
63540: NOT
63541: OR
63542: IFFALSE 63546
// exit ;
63544: GO 63636
// vehicle := IsInUnit ( driver ) ;
63546: LD_ADDR_VAR 0 3
63550: PUSH
63551: LD_VAR 0 1
63555: PPUSH
63556: CALL_OW 310
63560: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63561: LD_VAR 0 1
63565: PPUSH
63566: LD_STRING \
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: LD_INT 0
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: PUSH
63596: LD_STRING E
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_VAR 0 3
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 0
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PPUSH
63632: CALL_OW 447
// end ;
63636: LD_VAR 0 2
63640: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63641: LD_INT 0
63643: PPUSH
63644: PPUSH
63645: PPUSH
// tmp := [ ] ;
63646: LD_ADDR_VAR 0 5
63650: PUSH
63651: EMPTY
63652: ST_TO_ADDR
// for i in units do
63653: LD_ADDR_VAR 0 4
63657: PUSH
63658: LD_VAR 0 1
63662: PUSH
63663: FOR_IN
63664: IFFALSE 63702
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63666: LD_ADDR_VAR 0 5
63670: PUSH
63671: LD_VAR 0 5
63675: PPUSH
63676: LD_VAR 0 5
63680: PUSH
63681: LD_INT 1
63683: PLUS
63684: PPUSH
63685: LD_VAR 0 4
63689: PPUSH
63690: CALL_OW 256
63694: PPUSH
63695: CALL_OW 2
63699: ST_TO_ADDR
63700: GO 63663
63702: POP
63703: POP
// if not tmp then
63704: LD_VAR 0 5
63708: NOT
63709: IFFALSE 63713
// exit ;
63711: GO 63761
// if asc then
63713: LD_VAR 0 2
63717: IFFALSE 63741
// result := SortListByListAsc ( units , tmp ) else
63719: LD_ADDR_VAR 0 3
63723: PUSH
63724: LD_VAR 0 1
63728: PPUSH
63729: LD_VAR 0 5
63733: PPUSH
63734: CALL_OW 76
63738: ST_TO_ADDR
63739: GO 63761
// result := SortListByListDesc ( units , tmp ) ;
63741: LD_ADDR_VAR 0 3
63745: PUSH
63746: LD_VAR 0 1
63750: PPUSH
63751: LD_VAR 0 5
63755: PPUSH
63756: CALL_OW 77
63760: ST_TO_ADDR
// end ;
63761: LD_VAR 0 3
63765: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63766: LD_INT 0
63768: PPUSH
63769: PPUSH
// task := GetTaskList ( mech ) ;
63770: LD_ADDR_VAR 0 4
63774: PUSH
63775: LD_VAR 0 1
63779: PPUSH
63780: CALL_OW 437
63784: ST_TO_ADDR
// if not task then
63785: LD_VAR 0 4
63789: NOT
63790: IFFALSE 63794
// exit ;
63792: GO 63836
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63794: LD_ADDR_VAR 0 3
63798: PUSH
63799: LD_VAR 0 4
63803: PUSH
63804: LD_INT 1
63806: ARRAY
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: PUSH
63812: LD_STRING r
63814: EQUAL
63815: PUSH
63816: LD_VAR 0 4
63820: PUSH
63821: LD_INT 1
63823: ARRAY
63824: PUSH
63825: LD_INT 4
63827: ARRAY
63828: PUSH
63829: LD_VAR 0 2
63833: EQUAL
63834: AND
63835: ST_TO_ADDR
// end ;
63836: LD_VAR 0 3
63840: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63841: LD_INT 0
63843: PPUSH
// SetDir ( unit , d ) ;
63844: LD_VAR 0 1
63848: PPUSH
63849: LD_VAR 0 4
63853: PPUSH
63854: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63858: LD_VAR 0 1
63862: PPUSH
63863: LD_VAR 0 2
63867: PPUSH
63868: LD_VAR 0 3
63872: PPUSH
63873: LD_VAR 0 5
63877: PPUSH
63878: CALL_OW 48
// end ;
63882: LD_VAR 0 6
63886: RET
// export function ToNaturalNumber ( number ) ; begin
63887: LD_INT 0
63889: PPUSH
// result := number div 1 ;
63890: LD_ADDR_VAR 0 2
63894: PUSH
63895: LD_VAR 0 1
63899: PUSH
63900: LD_INT 1
63902: DIV
63903: ST_TO_ADDR
// if number < 0 then
63904: LD_VAR 0 1
63908: PUSH
63909: LD_INT 0
63911: LESS
63912: IFFALSE 63922
// result := 0 ;
63914: LD_ADDR_VAR 0 2
63918: PUSH
63919: LD_INT 0
63921: ST_TO_ADDR
// end ;
63922: LD_VAR 0 2
63926: RET
// export function SortByClass ( units , class ) ; var un ; begin
63927: LD_INT 0
63929: PPUSH
63930: PPUSH
// if not units or not class then
63931: LD_VAR 0 1
63935: NOT
63936: PUSH
63937: LD_VAR 0 2
63941: NOT
63942: OR
63943: IFFALSE 63947
// exit ;
63945: GO 64042
// result := [ ] ;
63947: LD_ADDR_VAR 0 3
63951: PUSH
63952: EMPTY
63953: ST_TO_ADDR
// for un in units do
63954: LD_ADDR_VAR 0 4
63958: PUSH
63959: LD_VAR 0 1
63963: PUSH
63964: FOR_IN
63965: IFFALSE 64040
// if GetClass ( un ) = class then
63967: LD_VAR 0 4
63971: PPUSH
63972: CALL_OW 257
63976: PUSH
63977: LD_VAR 0 2
63981: EQUAL
63982: IFFALSE 64009
// result := Insert ( result , 1 , un ) else
63984: LD_ADDR_VAR 0 3
63988: PUSH
63989: LD_VAR 0 3
63993: PPUSH
63994: LD_INT 1
63996: PPUSH
63997: LD_VAR 0 4
64001: PPUSH
64002: CALL_OW 2
64006: ST_TO_ADDR
64007: GO 64038
// result := Replace ( result , result + 1 , un ) ;
64009: LD_ADDR_VAR 0 3
64013: PUSH
64014: LD_VAR 0 3
64018: PPUSH
64019: LD_VAR 0 3
64023: PUSH
64024: LD_INT 1
64026: PLUS
64027: PPUSH
64028: LD_VAR 0 4
64032: PPUSH
64033: CALL_OW 1
64037: ST_TO_ADDR
64038: GO 63964
64040: POP
64041: POP
// end ;
64042: LD_VAR 0 3
64046: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64047: LD_INT 0
64049: PPUSH
64050: PPUSH
64051: PPUSH
64052: PPUSH
64053: PPUSH
64054: PPUSH
64055: PPUSH
// result := [ ] ;
64056: LD_ADDR_VAR 0 4
64060: PUSH
64061: EMPTY
64062: ST_TO_ADDR
// if x - r < 0 then
64063: LD_VAR 0 1
64067: PUSH
64068: LD_VAR 0 3
64072: MINUS
64073: PUSH
64074: LD_INT 0
64076: LESS
64077: IFFALSE 64089
// min_x := 0 else
64079: LD_ADDR_VAR 0 8
64083: PUSH
64084: LD_INT 0
64086: ST_TO_ADDR
64087: GO 64105
// min_x := x - r ;
64089: LD_ADDR_VAR 0 8
64093: PUSH
64094: LD_VAR 0 1
64098: PUSH
64099: LD_VAR 0 3
64103: MINUS
64104: ST_TO_ADDR
// if y - r < 0 then
64105: LD_VAR 0 2
64109: PUSH
64110: LD_VAR 0 3
64114: MINUS
64115: PUSH
64116: LD_INT 0
64118: LESS
64119: IFFALSE 64131
// min_y := 0 else
64121: LD_ADDR_VAR 0 7
64125: PUSH
64126: LD_INT 0
64128: ST_TO_ADDR
64129: GO 64147
// min_y := y - r ;
64131: LD_ADDR_VAR 0 7
64135: PUSH
64136: LD_VAR 0 2
64140: PUSH
64141: LD_VAR 0 3
64145: MINUS
64146: ST_TO_ADDR
// max_x := x + r ;
64147: LD_ADDR_VAR 0 9
64151: PUSH
64152: LD_VAR 0 1
64156: PUSH
64157: LD_VAR 0 3
64161: PLUS
64162: ST_TO_ADDR
// max_y := y + r ;
64163: LD_ADDR_VAR 0 10
64167: PUSH
64168: LD_VAR 0 2
64172: PUSH
64173: LD_VAR 0 3
64177: PLUS
64178: ST_TO_ADDR
// for _x = min_x to max_x do
64179: LD_ADDR_VAR 0 5
64183: PUSH
64184: DOUBLE
64185: LD_VAR 0 8
64189: DEC
64190: ST_TO_ADDR
64191: LD_VAR 0 9
64195: PUSH
64196: FOR_TO
64197: IFFALSE 64298
// for _y = min_y to max_y do
64199: LD_ADDR_VAR 0 6
64203: PUSH
64204: DOUBLE
64205: LD_VAR 0 7
64209: DEC
64210: ST_TO_ADDR
64211: LD_VAR 0 10
64215: PUSH
64216: FOR_TO
64217: IFFALSE 64294
// begin if not ValidHex ( _x , _y ) then
64219: LD_VAR 0 5
64223: PPUSH
64224: LD_VAR 0 6
64228: PPUSH
64229: CALL_OW 488
64233: NOT
64234: IFFALSE 64238
// continue ;
64236: GO 64216
// if GetResourceTypeXY ( _x , _y ) then
64238: LD_VAR 0 5
64242: PPUSH
64243: LD_VAR 0 6
64247: PPUSH
64248: CALL_OW 283
64252: IFFALSE 64292
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64254: LD_ADDR_VAR 0 4
64258: PUSH
64259: LD_VAR 0 4
64263: PPUSH
64264: LD_VAR 0 4
64268: PUSH
64269: LD_INT 1
64271: PLUS
64272: PPUSH
64273: LD_VAR 0 5
64277: PUSH
64278: LD_VAR 0 6
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: PPUSH
64287: CALL_OW 1
64291: ST_TO_ADDR
// end ;
64292: GO 64216
64294: POP
64295: POP
64296: GO 64196
64298: POP
64299: POP
// end ;
64300: LD_VAR 0 4
64304: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
64305: LD_INT 0
64307: PPUSH
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
64312: PPUSH
// if not units then
64313: LD_VAR 0 1
64317: NOT
64318: IFFALSE 64322
// exit ;
64320: GO 64723
// result := UnitFilter ( units , [ f_ok ] ) ;
64322: LD_ADDR_VAR 0 3
64326: PUSH
64327: LD_VAR 0 1
64331: PPUSH
64332: LD_INT 50
64334: PUSH
64335: EMPTY
64336: LIST
64337: PPUSH
64338: CALL_OW 72
64342: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64343: LD_ADDR_VAR 0 7
64347: PUSH
64348: LD_VAR 0 1
64352: PUSH
64353: LD_INT 1
64355: ARRAY
64356: PPUSH
64357: CALL_OW 255
64361: ST_TO_ADDR
// if not result then
64362: LD_VAR 0 3
64366: NOT
64367: IFFALSE 64371
// exit ;
64369: GO 64723
// for i in result do
64371: LD_ADDR_VAR 0 4
64375: PUSH
64376: LD_VAR 0 3
64380: PUSH
64381: FOR_IN
64382: IFFALSE 64721
// begin tag := GetTag ( i ) + 1 ;
64384: LD_ADDR_VAR 0 8
64388: PUSH
64389: LD_VAR 0 4
64393: PPUSH
64394: CALL_OW 110
64398: PUSH
64399: LD_INT 1
64401: PLUS
64402: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64403: LD_ADDR_VAR 0 6
64407: PUSH
64408: LD_VAR 0 4
64412: PPUSH
64413: CALL_OW 250
64417: PPUSH
64418: LD_VAR 0 4
64422: PPUSH
64423: CALL_OW 251
64427: PPUSH
64428: LD_INT 6
64430: PPUSH
64431: CALL 64047 0 3
64435: ST_TO_ADDR
// if cr then
64436: LD_VAR 0 6
64440: IFFALSE 64479
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64442: LD_VAR 0 4
64446: PPUSH
64447: LD_VAR 0 6
64451: PUSH
64452: LD_INT 1
64454: ARRAY
64455: PUSH
64456: LD_INT 1
64458: ARRAY
64459: PPUSH
64460: LD_VAR 0 6
64464: PUSH
64465: LD_INT 1
64467: ARRAY
64468: PUSH
64469: LD_INT 2
64471: ARRAY
64472: PPUSH
64473: CALL_OW 116
64477: GO 64719
// if path > tag then
64479: LD_VAR 0 2
64483: PUSH
64484: LD_VAR 0 8
64488: GREATER
64489: IFFALSE 64667
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
64491: LD_ADDR_VAR 0 5
64495: PUSH
64496: LD_INT 81
64498: PUSH
64499: LD_VAR 0 7
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 91
64510: PUSH
64511: LD_VAR 0 4
64515: PUSH
64516: LD_INT 12
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PPUSH
64528: CALL_OW 69
64532: ST_TO_ADDR
// if enemy then
64533: LD_VAR 0 5
64537: IFFALSE 64565
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64539: LD_VAR 0 4
64543: PPUSH
64544: LD_VAR 0 5
64548: PPUSH
64549: LD_VAR 0 4
64553: PPUSH
64554: CALL_OW 74
64558: PPUSH
64559: CALL_OW 115
64563: GO 64665
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64565: LD_VAR 0 4
64569: PPUSH
64570: LD_VAR 0 2
64574: PUSH
64575: LD_VAR 0 8
64579: ARRAY
64580: PUSH
64581: LD_INT 1
64583: ARRAY
64584: PPUSH
64585: LD_VAR 0 2
64589: PUSH
64590: LD_VAR 0 8
64594: ARRAY
64595: PUSH
64596: LD_INT 2
64598: ARRAY
64599: PPUSH
64600: CALL_OW 297
64604: PUSH
64605: LD_INT 6
64607: GREATER
64608: IFFALSE 64651
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64610: LD_VAR 0 4
64614: PPUSH
64615: LD_VAR 0 2
64619: PUSH
64620: LD_VAR 0 8
64624: ARRAY
64625: PUSH
64626: LD_INT 1
64628: ARRAY
64629: PPUSH
64630: LD_VAR 0 2
64634: PUSH
64635: LD_VAR 0 8
64639: ARRAY
64640: PUSH
64641: LD_INT 2
64643: ARRAY
64644: PPUSH
64645: CALL_OW 114
64649: GO 64665
// SetTag ( i , tag ) ;
64651: LD_VAR 0 4
64655: PPUSH
64656: LD_VAR 0 8
64660: PPUSH
64661: CALL_OW 109
// end else
64665: GO 64719
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64667: LD_ADDR_VAR 0 5
64671: PUSH
64672: LD_INT 81
64674: PUSH
64675: LD_VAR 0 7
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: PPUSH
64684: CALL_OW 69
64688: ST_TO_ADDR
// if enemy then
64689: LD_VAR 0 5
64693: IFFALSE 64719
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64695: LD_VAR 0 4
64699: PPUSH
64700: LD_VAR 0 5
64704: PPUSH
64705: LD_VAR 0 4
64709: PPUSH
64710: CALL_OW 74
64714: PPUSH
64715: CALL_OW 115
// end ; end ;
64719: GO 64381
64721: POP
64722: POP
// end ; end_of_file
64723: LD_VAR 0 3
64727: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64728: LD_VAR 0 1
64732: PUSH
64733: LD_INT 200
64735: DOUBLE
64736: GREATEREQUAL
64737: IFFALSE 64745
64739: LD_INT 299
64741: DOUBLE
64742: LESSEQUAL
64743: IFTRUE 64747
64745: GO 64779
64747: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64748: LD_VAR 0 1
64752: PPUSH
64753: LD_VAR 0 2
64757: PPUSH
64758: LD_VAR 0 3
64762: PPUSH
64763: LD_VAR 0 4
64767: PPUSH
64768: LD_VAR 0 5
64772: PPUSH
64773: CALL 21290 0 5
64777: GO 64856
64779: LD_INT 300
64781: DOUBLE
64782: GREATEREQUAL
64783: IFFALSE 64791
64785: LD_INT 399
64787: DOUBLE
64788: LESSEQUAL
64789: IFTRUE 64793
64791: GO 64855
64793: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64794: LD_VAR 0 1
64798: PPUSH
64799: LD_VAR 0 2
64803: PPUSH
64804: LD_VAR 0 3
64808: PPUSH
64809: LD_VAR 0 4
64813: PPUSH
64814: LD_VAR 0 5
64818: PPUSH
64819: LD_VAR 0 6
64823: PPUSH
64824: LD_VAR 0 7
64828: PPUSH
64829: LD_VAR 0 8
64833: PPUSH
64834: LD_VAR 0 9
64838: PPUSH
64839: LD_VAR 0 10
64843: PPUSH
64844: LD_VAR 0 11
64848: PPUSH
64849: CALL 19188 0 11
64853: GO 64856
64855: POP
// end ;
64856: PPOPN 11
64858: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64859: LD_VAR 0 1
64863: PPUSH
64864: LD_VAR 0 2
64868: PPUSH
64869: LD_VAR 0 3
64873: PPUSH
64874: LD_VAR 0 4
64878: PPUSH
64879: LD_VAR 0 5
64883: PPUSH
64884: CALL 21282 0 5
// end ; end_of_file
64888: PPOPN 5
64890: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64891: LD_VAR 0 1
64895: PPUSH
64896: LD_VAR 0 2
64900: PPUSH
64901: LD_VAR 0 3
64905: PPUSH
64906: LD_VAR 0 4
64910: PPUSH
64911: LD_VAR 0 5
64915: PPUSH
64916: LD_VAR 0 6
64920: PPUSH
64921: CALL 7383 0 6
// end ;
64925: PPOPN 6
64927: END
