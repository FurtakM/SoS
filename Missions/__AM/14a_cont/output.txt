// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 62497 0 9
// PrepareAmerican ;
  46: CALL 4227 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 28118 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 28118 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 28118 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32958 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 64725 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32958 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 64725 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1834
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if planCaptured then
1803: LD_EXP 7
1807: IFFALSE 1811
// exit ;
1809: GO 1834
// if IsOk ( JMM ) then
1811: LD_EXP 14
1815: PPUSH
1816: CALL_OW 302
1820: IFFALSE 1834
// Say ( JMM , D8-JMM-1 ) ;
1822: LD_EXP 14
1826: PPUSH
1827: LD_STRING D8-JMM-1
1829: PPUSH
1830: CALL_OW 88
// end ;
1834: LD_VAR 0 4
1838: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1839: LD_EXP 9
1843: PUSH
1844: LD_EXP 7
1848: NOT
1849: AND
1850: PUSH
1851: LD_EXP 4
1855: AND
1856: IFFALSE 1911
1858: GO 1860
1860: DISABLE
// begin enable ;
1861: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1862: LD_INT 9
1864: PPUSH
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 70
1879: IFFALSE 1897
// stevensTimer := stevensTimer - 0 0$30 else
1881: LD_ADDR_EXP 9
1885: PUSH
1886: LD_EXP 9
1890: PUSH
1891: LD_INT 1050
1893: MINUS
1894: ST_TO_ADDR
1895: GO 1911
// stevensTimer := stevensTimer - 0 0$1 ;
1897: LD_ADDR_EXP 9
1901: PUSH
1902: LD_EXP 9
1906: PUSH
1907: LD_INT 35
1909: MINUS
1910: ST_TO_ADDR
// end ;
1911: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1912: LD_EXP 9
1916: PUSH
1917: LD_INT 0
1919: LESSEQUAL
1920: PUSH
1921: LD_EXP 7
1925: NOT
1926: AND
1927: IFFALSE 2091
1929: GO 1931
1931: DISABLE
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_INT 22
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 25
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in tmp do
1970: LD_ADDR_VAR 0 1
1974: PUSH
1975: LD_VAR 0 2
1979: PUSH
1980: FOR_IN
1981: IFFALSE 2034
// begin if IsInUnit ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 310
1992: IFFALSE 2005
// ComExitBuilding ( i ) else
1994: LD_VAR 0 1
1998: PPUSH
1999: CALL_OW 122
2003: GO 2032
// if not HasTask ( i ) then
2005: LD_VAR 0 1
2009: PPUSH
2010: CALL_OW 314
2014: NOT
2015: IFFALSE 2032
// ComMoveXY ( i , 29 , 56 ) ;
2017: LD_VAR 0 1
2021: PPUSH
2022: LD_INT 29
2024: PPUSH
2025: LD_INT 56
2027: PPUSH
2028: CALL_OW 111
// end ;
2032: GO 1980
2034: POP
2035: POP
// repeat wait ( 0 0$1 ) ;
2036: LD_INT 35
2038: PPUSH
2039: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2043: LD_INT 8
2045: PPUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 1
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 25
2058: PUSH
2059: LD_INT 4
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 70
2074: IFFALSE 2036
// if planCaptured then
2076: LD_EXP 7
2080: IFFALSE 2084
// exit ;
2082: GO 2091
// YouLost ( Time ) ;
2084: LD_STRING Time
2086: PPUSH
2087: CALL_OW 104
// end ;
2091: PPOPN 2
2093: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2094: LD_INT 22
2096: PUSH
2097: LD_INT 7
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 92
2106: PUSH
2107: LD_INT 142
2109: PUSH
2110: LD_INT 52
2112: PUSH
2113: LD_INT 27
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 69
2130: PUSH
2131: LD_EXP 3
2135: PUSH
2136: LD_INT 6000
2138: PLUS
2139: PUSH
2140: LD_OWVAR 1
2144: GREATER
2145: AND
2146: PUSH
2147: LD_EXP 4
2151: AND
2152: IFFALSE 2207
2154: GO 2156
2156: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2157: LD_EXP 14
2161: PUSH
2162: LD_EXP 15
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 85
// DialogueOn ;
2175: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2179: LD_EXP 14
2183: PPUSH
2184: LD_STRING D6b-JMM-1
2186: PPUSH
2187: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2191: LD_EXP 15
2195: PPUSH
2196: LD_STRING D6b-Bur-1
2198: PPUSH
2199: CALL_OW 88
// DialogueOff ;
2203: CALL_OW 7
// end ;
2207: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2208: LD_EXP 15
2212: PPUSH
2213: LD_INT 142
2215: PPUSH
2216: LD_INT 52
2218: PPUSH
2219: CALL_OW 297
2223: PUSH
2224: LD_INT 25
2226: LESS
2227: PUSH
2228: LD_EXP 15
2232: PPUSH
2233: CALL_OW 310
2237: PPUSH
2238: LD_INT 142
2240: PPUSH
2241: LD_INT 52
2243: PPUSH
2244: CALL_OW 297
2248: PUSH
2249: LD_INT 25
2251: LESS
2252: OR
2253: PUSH
2254: LD_EXP 15
2258: PPUSH
2259: CALL_OW 256
2263: PUSH
2264: LD_INT 1000
2266: LESS
2267: AND
2268: PUSH
2269: LD_EXP 3
2273: PUSH
2274: LD_INT 6000
2276: PLUS
2277: PUSH
2278: LD_OWVAR 1
2282: GREATER
2283: AND
2284: PUSH
2285: LD_EXP 4
2289: AND
2290: IFFALSE 2323
2292: GO 2294
2294: DISABLE
// begin DialogueOn ;
2295: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2299: LD_EXP 15
2303: PPUSH
2304: LD_STRING D7-Bur-1
2306: PPUSH
2307: CALL_OW 88
// enteredContaminatedArea := true ;
2311: LD_ADDR_EXP 5
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// DialogueOff ;
2319: CALL_OW 7
// end ;
2323: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2324: LD_EXP 14
2328: PPUSH
2329: LD_INT 142
2331: PPUSH
2332: LD_INT 52
2334: PPUSH
2335: CALL_OW 297
2339: PUSH
2340: LD_INT 25
2342: LESS
2343: PUSH
2344: LD_EXP 14
2348: PPUSH
2349: CALL_OW 310
2353: PPUSH
2354: LD_INT 142
2356: PPUSH
2357: LD_INT 52
2359: PPUSH
2360: CALL_OW 297
2364: PUSH
2365: LD_INT 25
2367: LESS
2368: OR
2369: PUSH
2370: LD_EXP 14
2374: PPUSH
2375: CALL_OW 256
2379: PUSH
2380: LD_INT 1000
2382: LESS
2383: AND
2384: PUSH
2385: LD_EXP 3
2389: PUSH
2390: LD_INT 6000
2392: PLUS
2393: PUSH
2394: LD_OWVAR 1
2398: GREATER
2399: AND
2400: PUSH
2401: LD_EXP 4
2405: AND
2406: IFFALSE 2439
2408: GO 2410
2410: DISABLE
// begin DialogueOn ;
2411: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2415: LD_EXP 14
2419: PPUSH
2420: LD_STRING D7-JMM-1
2422: PPUSH
2423: CALL_OW 88
// enteredContaminatedArea := true ;
2427: LD_ADDR_EXP 5
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// DialogueOff ;
2435: CALL_OW 7
// end ;
2439: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2440: LD_EXP 6
2444: PUSH
2445: LD_EXP 14
2449: PPUSH
2450: CALL_OW 302
2454: AND
2455: PUSH
2456: LD_EXP 15
2460: PPUSH
2461: CALL_OW 302
2465: AND
2466: IFFALSE 2535
2468: GO 2470
2470: DISABLE
// begin DialogueOn ;
2471: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2475: LD_EXP 14
2479: PUSH
2480: LD_EXP 15
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2493: LD_EXP 14
2497: PPUSH
2498: LD_STRING D4-JMM-1
2500: PPUSH
2501: CALL_OW 88
// if not bombExploded then
2505: LD_EXP 4
2509: NOT
2510: IFFALSE 2524
// Say ( Burlak , D4-Bur-1 ) ;
2512: LD_EXP 15
2516: PPUSH
2517: LD_STRING D4-Bur-1
2519: PPUSH
2520: CALL_OW 88
// DialogueOff ;
2524: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2528: LD_STRING MReturn
2530: PPUSH
2531: CALL_OW 337
// end ;
2535: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2536: LD_EXP 7
2540: NOT
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 91
2554: PUSH
2555: LD_INT 9
2557: PUSH
2558: LD_INT 6
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 69
2574: AND
2575: IFFALSE 2652
2577: GO 2579
2579: DISABLE
// begin DialogueOn ;
2580: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2584: LD_INT 55
2586: PPUSH
2587: LD_INT 11
2589: PPUSH
2590: LD_INT 7
2592: PPUSH
2593: LD_INT 6
2595: NEG
2596: PPUSH
2597: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2601: LD_INT 55
2603: PPUSH
2604: LD_INT 11
2606: PPUSH
2607: LD_INT 7
2609: PPUSH
2610: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2614: LD_EXP 15
2618: PPUSH
2619: LD_STRING D9-Bur-1
2621: PPUSH
2622: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2626: LD_EXP 14
2630: PPUSH
2631: LD_STRING D9-JMM-1
2633: PPUSH
2634: CALL_OW 88
// DialogueOff ;
2638: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2642: LD_INT 9
2644: PPUSH
2645: LD_INT 7
2647: PPUSH
2648: CALL_OW 235
// end ;
2652: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2653: LD_INT 9
2655: PPUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PPUSH
2666: CALL_OW 70
2670: IFFALSE 2706
2672: GO 2674
2674: DISABLE
// begin wait ( 0 0$07 ) ;
2675: LD_INT 245
2677: PPUSH
2678: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2682: LD_EXP 14
2686: PPUSH
2687: LD_STRING D10b-JMM-1
2689: PPUSH
2690: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D10b-Bur-1
2701: PPUSH
2702: CALL_OW 88
// end ;
2706: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2707: LD_EXP 9
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 26
2734: PUSH
2735: LD_INT 1
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: AND
2752: PUSH
2753: LD_INT 5
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 7
2763: EQUAL
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 1
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 25
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: OR
2798: AND
2799: IFFALSE 3470
2801: GO 2803
2803: DISABLE
2804: LD_INT 0
2806: PPUSH
// begin case Query ( QKill ) of 1 :
2807: LD_STRING QKill
2809: PPUSH
2810: CALL_OW 97
2814: PUSH
2815: LD_INT 1
2817: DOUBLE
2818: EQUAL
2819: IFTRUE 2823
2821: GO 3458
2823: POP
// begin DialogueOn ;
2824: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2828: LD_EXP 14
2832: PPUSH
2833: LD_STRING D10a-JMM-1
2835: PPUSH
2836: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2840: LD_EXP 15
2844: PPUSH
2845: LD_STRING D10a-Bur-1
2847: PPUSH
2848: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2852: LD_EXP 14
2856: PPUSH
2857: LD_STRING D10a-JMM-2
2859: PPUSH
2860: CALL_OW 88
// if IsOk ( Stevens ) then
2864: LD_EXP 18
2868: PPUSH
2869: CALL_OW 302
2873: IFFALSE 2889
// Say ( Stevens , D10a-Huck-2 ) else
2875: LD_EXP 18
2879: PPUSH
2880: LD_STRING D10a-Huck-2
2882: PPUSH
2883: CALL_OW 88
2887: GO 3022
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) then
2889: LD_INT 22
2891: PUSH
2892: LD_INT 1
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 25
2901: PUSH
2902: LD_INT 4
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 26
2911: PUSH
2912: LD_INT 1
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: NOT
2929: IFFALSE 2971
// begin uc_side := 1 ;
2931: LD_ADDR_OWVAR 20
2935: PUSH
2936: LD_INT 1
2938: ST_TO_ADDR
// uc_nation := 1 ;
2939: LD_ADDR_OWVAR 21
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 10
2952: PPUSH
2953: CALL_OW 384
// Say ( CreateHuman , D10a-ASci1-3 ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_STRING D10a-ASci1-3
2964: PPUSH
2965: CALL_OW 88
// end else
2969: GO 3022
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2971: LD_INT 22
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 25
2983: PUSH
2984: LD_INT 4
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 26
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_STRING D10a-ASci1-3
3017: PPUSH
3018: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
3022: LD_EXP 14
3026: PPUSH
3027: LD_STRING D10a-JMM-4
3029: PPUSH
3030: CALL_OW 88
// if IsOk ( Stevens ) then
3034: LD_EXP 18
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3057
// Say ( Stevens , D10a-Huck-3 ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_STRING D10a-Huck-3
3052: PPUSH
3053: CALL_OW 88
// DialogueOff ;
3057: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
// planCaptured := true ;
3077: LD_ADDR_EXP 7
3081: PUSH
3082: LD_INT 1
3084: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
3085: LD_STRING MEnd
3087: PPUSH
3088: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3092: LD_STRING ACH_DIPLOMACY
3094: PPUSH
3095: CALL_OW 543
// canEnd := true ;
3099: LD_ADDR_EXP 10
3103: PUSH
3104: LD_INT 1
3106: ST_TO_ADDR
// missionTime := tick ;
3107: LD_ADDR_EXP 11
3111: PUSH
3112: LD_OWVAR 1
3116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3117: LD_INT 35
3119: PPUSH
3120: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3124: LD_INT 22
3126: PUSH
3127: LD_INT 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: LD_INT 50
3139: PUSH
3140: EMPTY
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: IFFALSE 3271
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3157: LD_ADDR_VAR 0 1
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 25
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3269
// begin if IsInUnit ( i ) then
3194: LD_VAR 0 1
3198: PPUSH
3199: CALL_OW 310
3203: IFFALSE 3216
// ComExitBuilding ( i ) else
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 122
3214: GO 3267
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3216: LD_VAR 0 1
3220: PPUSH
3221: LD_INT 22
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_VAR 0 1
3257: PPUSH
3258: CALL_OW 74
3262: PPUSH
3263: CALL_OW 128
// end ;
3267: GO 3191
3269: POP
3270: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3271: LD_INT 22
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: LD_INT 50
3286: PUSH
3287: EMPTY
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: IFFALSE 3117
// repeat wait ( 3 ) ;
3305: LD_INT 3
3307: PPUSH
3308: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 1
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 1
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3423
// begin if IsInArea ( i , stevensEscapeArea ) then
3349: LD_VAR 0 1
3353: PPUSH
3354: LD_INT 8
3356: PPUSH
3357: CALL_OW 308
3361: IFFALSE 3374
// begin RemoveUnit ( i ) ;
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 64
// continue ;
3372: GO 3346
// end ; if IsInUnit ( i ) then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 310
3383: IFFALSE 3394
// ComExitBuilding ( i ) ;
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 122
// if not HasTask ( i ) then
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 314
3403: NOT
3404: IFFALSE 3421
// ComMoveXY ( i , 28 , 55 ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: LD_INT 28
3413: PPUSH
3414: LD_INT 55
3416: PPUSH
3417: CALL_OW 111
// end ;
3421: GO 3346
3423: POP
3424: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3425: LD_INT 22
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: NOT
3454: IFFALSE 3305
// end ; 2 :
3456: GO 3470
3458: LD_INT 2
3460: DOUBLE
3461: EQUAL
3462: IFTRUE 3466
3464: GO 3469
3466: POP
// ; end ;
3467: GO 3470
3469: POP
// end ;
3470: PPOPN 1
3472: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3473: LD_EXP 10
3477: IFFALSE 3834
3479: GO 3481
3481: DISABLE
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3487: LD_INT 10
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: CALL_OW 424
// if Difficulty < 2 then
3497: LD_OWVAR 67
3501: PUSH
3502: LD_INT 2
3504: LESS
3505: IFFALSE 3509
// exit ;
3507: GO 3834
// uc_side := 4 ;
3509: LD_ADDR_OWVAR 20
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// uc_nation := 1 ;
3517: LD_ADDR_OWVAR 21
3521: PUSH
3522: LD_INT 1
3524: ST_TO_ADDR
// InitHc ;
3525: CALL_OW 19
// tmp := [ ] ;
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: LD_INT 10
3544: PPUSH
3545: CALL_OW 380
// un := CreateHuman ;
3549: LD_ADDR_VAR 0 1
3553: PUSH
3554: CALL_OW 44
3558: ST_TO_ADDR
// tmp := [ un ] ;
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 226
3579: PPUSH
3580: LD_INT 86
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 48
// ComHold ( un ) ;
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 140
// for i = 1 to 3 do
3599: LD_ADDR_VAR 0 2
3603: PUSH
3604: DOUBLE
3605: LD_INT 1
3607: DEC
3608: ST_TO_ADDR
3609: LD_INT 3
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3712
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 8
3623: PPUSH
3624: CALL_OW 380
// un := CreateHuman ;
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 215
3657: PUSH
3658: LD_INT 217
3660: PUSH
3661: LD_INT 219
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_VAR 0 2
3673: ARRAY
3674: PPUSH
3675: LD_INT 76
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 48
// ComCrawl ( un ) ;
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 137
// tmp := tmp ^ un ;
3694: LD_ADDR_VAR 0 3
3698: PUSH
3699: LD_VAR 0 3
3703: PUSH
3704: LD_VAR 0 1
3708: ADD
3709: ST_TO_ADDR
// end ;
3710: GO 3612
3712: POP
3713: POP
// repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_INT 24
3728: PUSH
3729: LD_INT 1000
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 72
3740: NOT
3741: IFFALSE 3714
// for i in tmp do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: LD_VAR 0 3
3752: PUSH
3753: FOR_IN
3754: IFFALSE 3832
// begin wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if Crawls ( i ) then
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 318
3772: IFFALSE 3785
// ComWalk ( i ) else
3774: LD_VAR 0 2
3778: PPUSH
3779: CALL_OW 138
3783: GO 3830
// if GetClass ( i ) = class_sniper then
3785: LD_VAR 0 2
3789: PPUSH
3790: CALL_OW 257
3794: PUSH
3795: LD_INT 5
3797: EQUAL
3798: IFFALSE 3816
// ComAttackSoporific ( i , JMM ) else
3800: LD_VAR 0 2
3804: PPUSH
3805: LD_EXP 14
3809: PPUSH
3810: CALL_OW 166
3814: GO 3830
// ComAttackUnit ( i , JMM ) ;
3816: LD_VAR 0 2
3820: PPUSH
3821: LD_EXP 14
3825: PPUSH
3826: CALL_OW 115
// end ;
3830: GO 3753
3832: POP
3833: POP
// end ;
3834: PPOPN 3
3836: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3837: LD_EXP 7
3841: NOT
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: CALL_OW 301
3850: AND
3851: IFFALSE 3863
3853: GO 3855
3855: DISABLE
// YouLost ( Lab ) ;
3856: LD_STRING Lab
3858: PPUSH
3859: CALL_OW 104
3863: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3864: LD_INT 10
3866: PPUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 7
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 70
3881: PUSH
3882: LD_INT 2
3884: GREATEREQUAL
3885: PUSH
3886: LD_INT 10
3888: PPUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 58
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 34
3907: PUSH
3908: LD_INT 12
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 34
3917: PUSH
3918: LD_INT 51
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 70
3938: AND
3939: PUSH
3940: LD_EXP 10
3944: AND
3945: PUSH
3946: LD_EXP 7
3950: AND
3951: PUSH
3952: LD_EXP 6
3956: AND
3957: IFFALSE 4224
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
3965: PPUSH
// begin m1 := false ;
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// m2 := false ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// if killCounter = 0 then
3982: LD_EXP 12
3986: PUSH
3987: LD_INT 0
3989: EQUAL
3990: IFFALSE 3999
// SetAchievement ( ACH_PACIFIST ) ;
3992: LD_STRING ACH_PACIFIST
3994: PPUSH
3995: CALL_OW 543
// if tick < 7 7$00 then
3999: LD_OWVAR 1
4003: PUSH
4004: LD_INT 14700
4006: LESS
4007: IFFALSE 4023
// begin wait ( 3 ) ;
4009: LD_INT 3
4011: PPUSH
4012: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
4016: LD_STRING ACH_ASPEED_18
4018: PPUSH
4019: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
4023: LD_STRING Explosion
4025: PPUSH
4026: LD_INT 1
4028: PPUSH
4029: CALL_OW 101
// if enteredContaminatedArea then
4033: LD_EXP 5
4037: IFFALSE 4059
// begin m1 := true ;
4039: LD_ADDR_VAR 0 1
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
4047: LD_STRING BioHazard
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: CALL_OW 101
// end else
4057: GO 4070
// AddMedal ( BioHazard , - 1 ) ;
4059: LD_STRING BioHazard
4061: PPUSH
4062: LD_INT 1
4064: NEG
4065: PPUSH
4066: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
4070: LD_EXP 11
4074: PUSH
4075: LD_INT 42000
4077: PUSH
4078: LD_INT 31500
4080: PUSH
4081: LD_INT 25200
4083: PUSH
4084: LD_INT 24150
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: LD_OWVAR 67
4097: ARRAY
4098: LESSEQUAL
4099: IFFALSE 4121
// begin m2 := true ;
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_INT 1
4108: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4109: LD_STRING Speed
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: CALL_OW 101
// end else
4119: GO 4132
// AddMedal ( Speed , - 1 ) ;
4121: LD_STRING Speed
4123: PPUSH
4124: LD_INT 1
4126: NEG
4127: PPUSH
4128: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 3
4139: GREATEREQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: AND
4146: PUSH
4147: LD_VAR 0 2
4151: AND
4152: IFFALSE 4164
// SetAchievementEX ( ACH_AMER , 18 ) ;
4154: LD_STRING ACH_AMER
4156: PPUSH
4157: LD_INT 18
4159: PPUSH
4160: CALL_OW 564
// GiveMedals ( Main ) ;
4164: LD_STRING Main
4166: PPUSH
4167: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4171: LD_EXP 14
4175: PUSH
4176: LD_EXP 15
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4189: LD_EXP 14
4193: PPUSH
4194: LD_STRING 14a_JMM
4196: PPUSH
4197: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4201: LD_EXP 15
4205: PPUSH
4206: LD_STRING 14a_Burlak
4208: PPUSH
4209: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4213: LD_STRING enableBioCharacter(BIO_HUGH)
4215: PPUSH
4216: CALL_OW 559
// YouWin ;
4220: CALL_OW 103
// end ; end_of_file
4224: PPOPN 2
4226: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4227: LD_INT 0
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
// uc_side := 1 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 1
4240: ST_TO_ADDR
// uc_nation := 1 ;
4241: LD_ADDR_OWVAR 21
4245: PUSH
4246: LD_INT 1
4248: ST_TO_ADDR
// InitHc ;
4249: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4253: LD_INT 34
4255: PPUSH
4256: CALL_OW 274
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 750
4266: PPUSH
4267: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4271: LD_INT 34
4273: PPUSH
4274: CALL_OW 274
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 20
4284: PPUSH
4285: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4289: LD_ADDR_EXP 18
4293: PUSH
4294: LD_STRING Stevens
4296: PPUSH
4297: CALL_OW 25
4301: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4302: LD_ADDR_EXP 19
4306: PUSH
4307: LD_STRING Powell
4309: PPUSH
4310: CALL_OW 25
4314: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4315: LD_EXP 18
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 52
// vehGuard := [ ] ;
4327: LD_ADDR_EXP 23
4331: PUSH
4332: EMPTY
4333: ST_TO_ADDR
// hc_importance := 0 ;
4334: LD_ADDR_OWVAR 32
4338: PUSH
4339: LD_INT 0
4341: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 8
4353: PPUSH
4354: LD_INT 100
4356: PPUSH
4357: CALL 32958 0 5
// sibBomb := CreateVehicle ;
4361: LD_ADDR_EXP 21
4365: PUSH
4366: CALL_OW 45
4370: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4371: LD_EXP 21
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4383: LD_EXP 21
4387: PPUSH
4388: LD_INT 93
4390: PPUSH
4391: LD_INT 74
4393: PPUSH
4394: LD_INT 0
4396: PPUSH
4397: CALL_OW 48
// guards := [ ] ;
4401: LD_ADDR_EXP 22
4405: PUSH
4406: EMPTY
4407: ST_TO_ADDR
// for i = 1 to 3 do
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_INT 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4518
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4424: LD_INT 0
4426: PPUSH
4427: LD_INT 1
4429: PPUSH
4430: LD_INT 8
4432: PUSH
4433: LD_INT 9
4435: PUSH
4436: LD_INT 10
4438: PUSH
4439: LD_INT 10
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_OWVAR 67
4452: ARRAY
4453: PPUSH
4454: CALL_OW 380
// un := CreateHuman ;
4458: LD_ADDR_VAR 0 3
4462: PUSH
4463: CALL_OW 44
4467: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 3
4478: PUSH
4479: LD_INT 4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_VAR 0 2
4491: ARRAY
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// guards := guards ^ un ;
4500: LD_ADDR_EXP 22
4504: PUSH
4505: LD_EXP 22
4509: PUSH
4510: LD_VAR 0 3
4514: ADD
4515: ST_TO_ADDR
// end ;
4516: GO 4421
4518: POP
4519: POP
// baseGuards := [ ] ;
4520: LD_ADDR_EXP 20
4524: PUSH
4525: EMPTY
4526: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4527: LD_ADDR_VAR 0 2
4531: PUSH
4532: DOUBLE
4533: LD_INT 1
4535: DEC
4536: ST_TO_ADDR
4537: LD_INT 5
4539: PUSH
4540: LD_INT 6
4542: PUSH
4543: LD_INT 7
4545: PUSH
4546: LD_INT 8
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_OWVAR 67
4559: ARRAY
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4712
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 8
4569: PUSH
4570: LD_INT 9
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 10
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: CALL_OW 381
// un := CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4605: LD_ADDR_EXP 20
4609: PUSH
4610: LD_EXP 20
4614: PUSH
4615: LD_VAR 0 3
4619: ADD
4620: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4621: LD_ADDR_VAR 0 4
4625: PUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 58
4638: PUSH
4639: EMPTY
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 32
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: ST_TO_ADDR
// if tmp then
4662: LD_VAR 0 4
4666: IFFALSE 4698
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4668: LD_VAR 0 3
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 12
4690: ARRAY
4691: PPUSH
4692: CALL_OW 52
4696: GO 4710
// PlaceHumanInUnit ( un , us_bar ) ;
4698: LD_VAR 0 3
4702: PPUSH
4703: LD_INT 51
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4561
4712: POP
4713: POP
// if Difficulty > 1 then
4714: LD_OWVAR 67
4718: PUSH
4719: LD_INT 1
4721: GREATER
4722: IFFALSE 4770
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4724: LD_INT 0
4726: PPUSH
4727: LD_INT 5
4729: PPUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 10
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 1
4751: MINUS
4752: ARRAY
4753: PPUSH
4754: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4758: CALL_OW 44
4762: PPUSH
4763: LD_INT 80
4765: PPUSH
4766: CALL_OW 52
// end ; for i = 1 to 3 do
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: DOUBLE
4776: LD_INT 1
4778: DEC
4779: ST_TO_ADDR
4780: LD_INT 3
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4810
// begin PrepareMechanic ( false , 9 ) ;
4786: LD_INT 0
4788: PPUSH
4789: LD_INT 9
4791: PPUSH
4792: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4796: CALL_OW 44
4800: PPUSH
4801: LD_INT 43
4803: PPUSH
4804: CALL_OW 52
// end ;
4808: GO 4783
4810: POP
4811: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4812: CALL_OW 44
4816: PPUSH
4817: LD_INT 49
4819: PPUSH
4820: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 1
4836: PUSH
4837: LD_OWVAR 67
4841: PLUS
4842: PUSH
4843: FOR_TO
4844: IFFALSE 4891
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4846: LD_INT 0
4848: PPUSH
4849: LD_INT 8
4851: PUSH
4852: LD_INT 9
4854: PUSH
4855: LD_INT 10
4857: PUSH
4858: LD_INT 10
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PUSH
4867: LD_OWVAR 67
4871: ARRAY
4872: PPUSH
4873: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4877: CALL_OW 44
4881: PPUSH
4882: LD_INT 5
4884: PPUSH
4885: CALL_OW 52
// end ;
4889: GO 4843
4891: POP
4892: POP
// for i = 1 to 3 do
4893: LD_ADDR_VAR 0 2
4897: PUSH
4898: DOUBLE
4899: LD_INT 1
4901: DEC
4902: ST_TO_ADDR
4903: LD_INT 3
4905: PUSH
4906: FOR_TO
4907: IFFALSE 4933
// begin PrepareScientist ( false , 10 ) ;
4909: LD_INT 0
4911: PPUSH
4912: LD_INT 10
4914: PPUSH
4915: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4919: CALL_OW 44
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 52
// end ;
4931: GO 4906
4933: POP
4934: POP
// end ;
4935: LD_VAR 0 1
4939: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4940: LD_EXP 22
4944: PUSH
4945: LD_EXP 2
4949: NOT
4950: AND
4951: IFFALSE 5137
4953: GO 4955
4955: DISABLE
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
4960: PPUSH
// begin enable ;
4961: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 204
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 165
4979: PUSH
4980: LD_INT 24
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 195
4989: PUSH
4990: LD_INT 6
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 223
4999: PUSH
5000: LD_INT 54
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 214
5009: PUSH
5010: LD_INT 84
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 206
5019: PUSH
5020: LD_INT 71
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: ST_TO_ADDR
// for i in guards do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: LD_EXP 22
5044: PUSH
5045: FOR_IN
5046: IFFALSE 5135
// begin if HasTask ( i ) then
5048: LD_VAR 0 1
5052: PPUSH
5053: CALL_OW 314
5057: IFFALSE 5063
// continue else
5059: GO 5045
5061: GO 5133
// begin j := rand ( 1 , 6 ) ;
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 6
5073: PPUSH
5074: CALL_OW 12
5078: ST_TO_ADDR
// if not See ( 7 , i ) then
5079: LD_INT 7
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 292
5091: NOT
5092: IFFALSE 5133
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5094: LD_VAR 0 1
5098: PPUSH
5099: LD_VAR 0 3
5103: PUSH
5104: LD_VAR 0 2
5108: ARRAY
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 2
5123: ARRAY
5124: PUSH
5125: LD_INT 2
5127: ARRAY
5128: PPUSH
5129: CALL_OW 114
// end ; end ;
5133: GO 5045
5135: POP
5136: POP
// end ;
5137: PPOPN 3
5139: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5140: LD_EXP 23
5144: PUSH
5145: LD_EXP 7
5149: NOT
5150: AND
5151: IFFALSE 5233
5153: GO 5155
5155: DISABLE
5156: LD_INT 0
5158: PPUSH
// begin enable ;
5159: ENABLE
// for i in vehGuard do
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_EXP 23
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5231
// if IsOk ( i ) and IsControledBy ( i ) then
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 302
5182: PUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 312
5192: AND
5193: IFFALSE 5229
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: LD_INT 22
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5170
5231: POP
5232: POP
// end ;
5233: PPOPN 1
5235: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5236: LD_EXP 4
5240: PUSH
5241: LD_INT 43
5243: PPUSH
5244: CALL_OW 302
5248: AND
5249: PUSH
5250: LD_EXP 7
5254: NOT
5255: AND
5256: PUSH
5257: LD_OWVAR 67
5261: PUSH
5262: LD_INT 1
5264: GREATER
5265: AND
5266: IFFALSE 5331
5268: GO 5270
5270: DISABLE
// begin enable ;
5271: ENABLE
// if Count ( vehGuard ) < Difficulty then
5272: LD_EXP 23
5276: PPUSH
5277: CALL 30220 0 1
5281: PUSH
5282: LD_OWVAR 67
5286: LESS
5287: IFFALSE 5331
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5289: LD_INT 43
5291: PPUSH
5292: LD_INT 5
5294: PPUSH
5295: LD_INT 3
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: LD_INT 7
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 9
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: CALL_OW 125
// end ;
5331: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5332: LD_INT 22
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 5
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 69
5367: PUSH
5368: LD_EXP 7
5372: NOT
5373: AND
5374: IFFALSE 5603
5376: GO 5378
5378: DISABLE
5379: LD_INT 0
5381: PPUSH
5382: PPUSH
// begin enable ;
5383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 5
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 50
5411: PUSH
5412: EMPTY
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: ST_TO_ADDR
// if not tmp then
5425: LD_VAR 0 1
5429: NOT
5430: IFFALSE 5434
// exit ;
5432: GO 5603
// b := IsInUnit ( tmp [ 1 ] ) ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 310
5452: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5453: LD_VAR 0 2
5457: NOT
5458: PUSH
5459: LD_VAR 0 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: CALL_OW 314
5472: OR
5473: IFFALSE 5477
// exit ;
5475: GO 5603
// if b = us_bun1 then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 80
5484: EQUAL
5485: IFFALSE 5546
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5500: LD_VAR 0 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 27
5511: PPUSH
5512: LD_INT 44
5514: PPUSH
5515: CALL_OW 174
// if IsOk ( us_bun2 ) then
5519: LD_INT 55
5521: PPUSH
5522: CALL_OW 302
5526: IFFALSE 5544
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5528: LD_VAR 0 1
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: LD_INT 55
5539: PPUSH
5540: CALL_OW 180
// end else
5544: GO 5603
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5559: LD_VAR 0 1
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 92
5570: PPUSH
5571: LD_INT 51
5573: PPUSH
5574: CALL_OW 174
// if IsOk ( us_bun1 ) then
5578: LD_INT 80
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5603
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: LD_INT 80
5598: PPUSH
5599: CALL_OW 180
// end ; end ;
5603: PPOPN 2
5605: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5606: LD_EXP 7
5610: NOT
5611: PUSH
5612: LD_INT 9
5614: PPUSH
5615: LD_INT 22
5617: PUSH
5618: LD_INT 1
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 21
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 3
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: AND
5662: IFFALSE 6073
5664: GO 5666
5666: DISABLE
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
// begin enable ;
5673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 1
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 24
5701: PUSH
5702: LD_INT 1000
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL_OW 69
5718: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_INT 22
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 25
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_INT 24
5749: PUSH
5750: LD_INT 750
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5771: LD_ADDR_VAR 0 4
5775: PUSH
5776: LD_INT 9
5778: PPUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 3
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 24
5804: PUSH
5805: LD_INT 1000
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 70
5825: PUSH
5826: LD_INT 1
5828: DIFF
5829: ST_TO_ADDR
// if not tmp and not tmp2 then
5830: LD_VAR 0 2
5834: NOT
5835: PUSH
5836: LD_VAR 0 3
5840: NOT
5841: AND
5842: IFFALSE 5846
// exit ;
5844: GO 6073
// if tmp and b then
5846: LD_VAR 0 2
5850: PUSH
5851: LD_VAR 0 4
5855: AND
5856: IFFALSE 5986
// for i in tmp do
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 2
5867: PUSH
5868: FOR_IN
5869: IFFALSE 5984
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 110
5880: PUSH
5881: LD_INT 1
5883: EQUAL
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 256
5894: PUSH
5895: LD_INT 1000
5897: LESS
5898: AND
5899: IFFALSE 5905
// continue else
5901: GO 5868
5903: GO 5932
// if GetTag ( i ) = 1 then
5905: LD_VAR 0 1
5909: PPUSH
5910: CALL_OW 110
5914: PUSH
5915: LD_INT 1
5917: EQUAL
5918: IFFALSE 5932
// SetTag ( i , 0 ) ;
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 109
// if IsInUnit ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 310
5941: IFFALSE 5952
// ComExitBuilding ( i ) ;
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 122
// if not HasTask ( i ) then
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 314
5961: NOT
5962: IFFALSE 5982
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: CALL_OW 190
// end ;
5982: GO 5868
5984: POP
5985: POP
// if tmp2 then
5986: LD_VAR 0 3
5990: IFFALSE 6073
// for i in tmp2 do
5992: LD_ADDR_VAR 0 1
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: FOR_IN
6003: IFFALSE 6071
// begin if not GetTag ( i ) = 1 then
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 110
6014: PUSH
6015: LD_INT 1
6017: EQUAL
6018: NOT
6019: IFFALSE 6033
// SetTag ( i , 1 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_INT 88
6040: PPUSH
6041: LD_INT 75
6043: PPUSH
6044: CALL_OW 297
6048: PUSH
6049: LD_INT 6
6051: GREATER
6052: IFFALSE 6069
// ComMoveXY ( i , 88 , 75 ) ;
6054: LD_VAR 0 1
6058: PPUSH
6059: LD_INT 88
6061: PPUSH
6062: LD_INT 75
6064: PPUSH
6065: CALL_OW 111
// end ;
6069: GO 6002
6071: POP
6072: POP
// end ;
6073: PPOPN 4
6075: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
6076: LD_EXP 7
6080: NOT
6081: PUSH
6082: LD_EXP 9
6086: AND
6087: PUSH
6088: LD_INT 9
6090: PPUSH
6091: LD_INT 22
6093: PUSH
6094: LD_INT 1
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 21
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: LD_INT 1000
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: AND
6138: IFFALSE 6311
6140: GO 6142
6142: DISABLE
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
6147: PPUSH
// begin enable ;
6148: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 25
6166: PUSH
6167: LD_INT 4
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 69
6182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6183: LD_ADDR_VAR 0 3
6187: PUSH
6188: LD_INT 9
6190: PPUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 1
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 24
6216: PUSH
6217: LD_INT 1000
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 70
6237: ST_TO_ADDR
// if not sci or not tmp then
6238: LD_VAR 0 2
6242: NOT
6243: PUSH
6244: LD_VAR 0 3
6248: NOT
6249: OR
6250: IFFALSE 6254
// exit ;
6252: GO 6311
// for i in sci do
6254: LD_ADDR_VAR 0 1
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6309
// if IsInUnit ( i ) then
6267: LD_VAR 0 1
6271: PPUSH
6272: CALL_OW 310
6276: IFFALSE 6289
// ComExitBuilding ( i ) else
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 122
6287: GO 6307
// ComHeal ( i , tmp [ 1 ] ) ;
6289: LD_VAR 0 1
6293: PPUSH
6294: LD_VAR 0 3
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 128
6307: GO 6264
6309: POP
6310: POP
// end ;
6311: PPOPN 3
6313: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6314: LD_EXP 7
6318: NOT
6319: PUSH
6320: LD_EXP 9
6324: AND
6325: PUSH
6326: LD_INT 1
6328: PPUSH
6329: CALL_OW 302
6333: AND
6334: PUSH
6335: LD_INT 9
6337: PPUSH
6338: LD_INT 22
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 1
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 24
6363: PUSH
6364: LD_INT 1000
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 70
6384: NOT
6385: AND
6386: PUSH
6387: LD_INT 22
6389: PUSH
6390: LD_INT 1
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 25
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 56
6409: PUSH
6410: EMPTY
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: AND
6423: IFFALSE 6516
6425: GO 6427
6427: DISABLE
6428: LD_INT 0
6430: PPUSH
// begin enable ;
6431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 1
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 25
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 56
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 69
6472: PUSH
6473: FOR_IN
6474: IFFALSE 6514
// if not GetTag ( i ) and not HasTask ( i ) then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 110
6485: NOT
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 314
6496: NOT
6497: AND
6498: IFFALSE 6512
// ComEnterUnit ( i , us_lab ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 120
6512: GO 6473
6514: POP
6515: POP
// end ;
6516: PPOPN 1
6518: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6519: LD_EXP 7
6523: NOT
6524: PUSH
6525: LD_INT 9
6527: PPUSH
6528: LD_INT 22
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: LD_INT 24
6553: PUSH
6554: LD_INT 1000
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 70
6574: NOT
6575: AND
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 25
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 56
6599: PUSH
6600: EMPTY
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: AND
6613: IFFALSE 6706
6615: GO 6617
6617: DISABLE
6618: LD_INT 0
6620: PPUSH
// begin enable ;
6621: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 25
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 56
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PUSH
6663: FOR_IN
6664: IFFALSE 6704
// if not HasTask ( i ) and not GetTag ( i ) then
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 314
6675: NOT
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 110
6686: NOT
6687: AND
6688: IFFALSE 6702
// ComEnterUnit ( i , us_depot ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 5
6697: PPUSH
6698: CALL_OW 120
6702: GO 6663
6704: POP
6705: POP
// end ;
6706: PPOPN 1
6708: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6709: LD_EXP 9
6713: PUSH
6714: LD_INT 0
6716: LESSEQUAL
6717: PUSH
6718: LD_EXP 18
6722: PPUSH
6723: CALL_OW 301
6727: OR
6728: PUSH
6729: LD_INT 22
6731: PUSH
6732: LD_INT 1
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: CALL_OW 69
6757: AND
6758: IFFALSE 6799
6760: GO 6762
6762: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6763: LD_INT 22
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 167
6799: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6800: LD_EXP 7
6804: NOT
6805: PUSH
6806: LD_INT 7
6808: PPUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 7
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 70
6823: AND
6824: IFFALSE 6933
6826: GO 6828
6828: DISABLE
6829: LD_INT 0
6831: PPUSH
// begin wait ( 0 0$2 ) ;
6832: LD_INT 70
6834: PPUSH
6835: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] ] ) do
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: LD_INT 25
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 25
6869: PUSH
6870: LD_INT 5
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: FOR_IN
6892: IFFALSE 6931
// begin if IsInUnit ( i ) then
6894: LD_VAR 0 1
6898: PPUSH
6899: CALL_OW 310
6903: IFFALSE 6914
// ComExitBuilding ( i ) ;
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: LD_INT 92
6921: PPUSH
6922: LD_INT 78
6924: PPUSH
6925: CALL_OW 174
// end ;
6929: GO 6891
6931: POP
6932: POP
// end ; end_of_file
6933: PPOPN 1
6935: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6936: LD_VAR 0 1
6940: PPUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: CALL 1579 0 3
6955: PPOPN 3
6957: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6958: LD_EXP 14
6962: PPUSH
6963: CALL_OW 257
6967: PUSH
6968: LD_INT 4
6970: EQUAL
6971: PUSH
6972: LD_EXP 15
6976: PPUSH
6977: CALL_OW 257
6981: PUSH
6982: LD_INT 4
6984: EQUAL
6985: OR
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 7
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: OR
7016: IFFALSE 7020
// exit ;
7018: GO 7058
// if un = JMM then
7020: LD_VAR 0 1
7024: PUSH
7025: LD_EXP 14
7029: EQUAL
7030: IFFALSE 7039
// YouLost ( JMM ) ;
7032: LD_STRING JMM
7034: PPUSH
7035: CALL_OW 104
// if un = Burlak then
7039: LD_VAR 0 1
7043: PUSH
7044: LD_EXP 15
7048: EQUAL
7049: IFFALSE 7058
// YouLost ( Burlak ) ;
7051: LD_STRING Burlak
7053: PPUSH
7054: CALL_OW 104
// end ;
7058: PPOPN 1
7060: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL 23224 0 1
// if un = JMM then
7070: LD_VAR 0 1
7074: PUSH
7075: LD_EXP 14
7079: EQUAL
7080: IFFALSE 7089
// YouLost ( JMM ) ;
7082: LD_STRING JMM
7084: PPUSH
7085: CALL_OW 104
// if un = Burlak then
7089: LD_VAR 0 1
7093: PUSH
7094: LD_EXP 15
7098: EQUAL
7099: IFFALSE 7108
// YouLost ( Burlak ) ;
7101: LD_STRING Burlak
7103: PPUSH
7104: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7108: LD_VAR 0 1
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: IN
7142: IFFALSE 7158
// killCounter := killCounter + 1 ;
7144: LD_ADDR_EXP 12
7148: PUSH
7149: LD_EXP 12
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ST_TO_ADDR
// end ;
7158: PPOPN 1
7160: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7161: LD_VAR 0 2
7165: PUSH
7166: LD_INT 7
7168: EQUAL
7169: PUSH
7170: LD_VAR 0 1
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: LD_INT 31
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 30
7190: PUSH
7191: LD_INT 32
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 30
7200: PUSH
7201: LD_INT 33
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IN
7219: AND
7220: IFFALSE 7236
// bunkerCounter := bunkerCounter + 1 ;
7222: LD_ADDR_EXP 13
7226: PUSH
7227: LD_EXP 13
7231: PUSH
7232: LD_INT 1
7234: PLUS
7235: ST_TO_ADDR
// end ;
7236: PPOPN 3
7238: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 255
7248: PUSH
7249: LD_INT 7
7251: EQUAL
7252: IFFALSE 7262
// artifactPickedUp := true ;
7254: LD_ADDR_EXP 6
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// end ;
7262: PPOPN 2
7264: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7265: LD_ADDR_EXP 6
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
7273: PPOPN 2
7275: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7276: LD_VAR 0 1
7280: PPUSH
7281: LD_VAR 0 2
7285: PPUSH
7286: CALL 23344 0 2
// if GetSide ( vehicle ) <> 1 then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 255
7299: PUSH
7300: LD_INT 1
7302: NONEQUAL
7303: IFFALSE 7307
// exit ;
7305: GO 7354
// wait ( 0 0$5 ) ;
7307: LD_INT 175
7309: PPUSH
7310: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 263
7323: PUSH
7324: LD_INT 2
7326: EQUAL
7327: IFFALSE 7338
// Connect ( vehicle ) ;
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL 36426 0 1
// vehGuard := vehGuard ^ vehicle ;
7338: LD_ADDR_EXP 23
7342: PUSH
7343: LD_EXP 23
7347: PUSH
7348: LD_VAR 0 1
7352: ADD
7353: ST_TO_ADDR
// end ;
7354: PPOPN 2
7356: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7357: LD_VAR 0 1
7361: PUSH
7362: LD_INT 1
7364: EQUAL
7365: PUSH
7366: LD_EXP 7
7370: NOT
7371: AND
7372: IFFALSE 7407
// begin planCaptured := true ;
7374: LD_ADDR_EXP 7
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7382: LD_STRING MEnd
7384: PPUSH
7385: CALL_OW 337
// canEnd := true ;
7389: LD_ADDR_EXP 10
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// missionTime := tick ;
7397: LD_ADDR_EXP 11
7401: PUSH
7402: LD_OWVAR 1
7406: ST_TO_ADDR
// end ; end ;
7407: PPOPN 3
7409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL 23328 0 1
// end ; end_of_file end_of_file
7419: PPOPN 1
7421: END
// export globalGameSaveCounter ; every 0 0$1 do
7422: GO 7424
7424: DISABLE
// begin enable ;
7425: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7426: LD_STRING updateTimer(
7428: PUSH
7429: LD_OWVAR 1
7433: STR
7434: PUSH
7435: LD_STRING );
7437: STR
7438: PPUSH
7439: CALL_OW 559
// end ;
7443: END
// every 0 0$1 do
7444: GO 7446
7446: DISABLE
// begin globalGameSaveCounter := 0 ;
7447: LD_ADDR_EXP 24
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7455: LD_STRING setGameSaveCounter(0)
7457: PPUSH
7458: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7462: LD_STRING initStreamRollete();
7464: PPUSH
7465: CALL_OW 559
// InitStreamMode ;
7469: CALL 8795 0 0
// DefineStreamItems ( false ) ;
7473: LD_INT 0
7475: PPUSH
7476: CALL 9259 0 1
// end ;
7480: END
// export function SOS_MapStart ( ) ; begin
7481: LD_INT 0
7483: PPUSH
// if streamModeActive then
7484: LD_EXP 25
7488: IFFALSE 7497
// DefineStreamItems ( true ) ;
7490: LD_INT 1
7492: PPUSH
7493: CALL 9259 0 1
// UpdateLuaVariables ( ) ;
7497: CALL 7514 0 0
// UpdateFactoryWaypoints ( ) ;
7501: CALL 22128 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7505: CALL 22385 0 0
// end ;
7509: LD_VAR 0 1
7513: RET
// function UpdateLuaVariables ( ) ; begin
7514: LD_INT 0
7516: PPUSH
// if globalGameSaveCounter then
7517: LD_EXP 24
7521: IFFALSE 7555
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7523: LD_ADDR_EXP 24
7527: PUSH
7528: LD_EXP 24
7532: PPUSH
7533: CALL 67181 0 1
7537: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7538: LD_STRING setGameSaveCounter(
7540: PUSH
7541: LD_EXP 24
7545: STR
7546: PUSH
7547: LD_STRING )
7549: STR
7550: PPUSH
7551: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7555: LD_STRING setGameDifficulty(
7557: PUSH
7558: LD_OWVAR 67
7562: STR
7563: PUSH
7564: LD_STRING )
7566: STR
7567: PPUSH
7568: CALL_OW 559
// end ;
7572: LD_VAR 0 1
7576: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7577: LD_INT 0
7579: PPUSH
// if p2 = stream_mode then
7580: LD_VAR 0 2
7584: PUSH
7585: LD_INT 100
7587: EQUAL
7588: IFFALSE 8591
// begin if not StreamModeActive then
7590: LD_EXP 25
7594: NOT
7595: IFFALSE 7605
// StreamModeActive := true ;
7597: LD_ADDR_EXP 25
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 0 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 0
7612: EQUAL
7613: IFFALSE 7619
// InitStreamMode ;
7615: CALL 8795 0 0
// if p3 = 1 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 1
7626: EQUAL
7627: IFFALSE 7637
// sRocket := true ;
7629: LD_ADDR_EXP 30
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 2 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 2
7644: EQUAL
7645: IFFALSE 7655
// sSpeed := true ;
7647: LD_ADDR_EXP 29
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 3 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 3
7662: EQUAL
7663: IFFALSE 7673
// sEngine := true ;
7665: LD_ADDR_EXP 31
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 4 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 4
7680: EQUAL
7681: IFFALSE 7691
// sSpec := true ;
7683: LD_ADDR_EXP 28
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 5 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 5
7698: EQUAL
7699: IFFALSE 7709
// sLevel := true ;
7701: LD_ADDR_EXP 32
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 6 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 6
7716: EQUAL
7717: IFFALSE 7727
// sArmoury := true ;
7719: LD_ADDR_EXP 33
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 7 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 7
7734: EQUAL
7735: IFFALSE 7745
// sRadar := true ;
7737: LD_ADDR_EXP 34
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 8 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 8
7752: EQUAL
7753: IFFALSE 7763
// sBunker := true ;
7755: LD_ADDR_EXP 35
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 9 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 9
7770: EQUAL
7771: IFFALSE 7781
// sHack := true ;
7773: LD_ADDR_EXP 36
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 10 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 10
7788: EQUAL
7789: IFFALSE 7799
// sFire := true ;
7791: LD_ADDR_EXP 37
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 11 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 11
7806: EQUAL
7807: IFFALSE 7817
// sRefresh := true ;
7809: LD_ADDR_EXP 38
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 12 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 12
7824: EQUAL
7825: IFFALSE 7835
// sExp := true ;
7827: LD_ADDR_EXP 39
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 13 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 13
7842: EQUAL
7843: IFFALSE 7853
// sDepot := true ;
7845: LD_ADDR_EXP 40
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 14 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 14
7860: EQUAL
7861: IFFALSE 7871
// sFlag := true ;
7863: LD_ADDR_EXP 41
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 15 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 15
7878: EQUAL
7879: IFFALSE 7889
// sKamikadze := true ;
7881: LD_ADDR_EXP 49
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 16 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 16
7896: EQUAL
7897: IFFALSE 7907
// sTroll := true ;
7899: LD_ADDR_EXP 50
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 17 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 17
7914: EQUAL
7915: IFFALSE 7925
// sSlow := true ;
7917: LD_ADDR_EXP 51
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 18 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 18
7932: EQUAL
7933: IFFALSE 7943
// sLack := true ;
7935: LD_ADDR_EXP 52
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 19 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 19
7950: EQUAL
7951: IFFALSE 7961
// sTank := true ;
7953: LD_ADDR_EXP 54
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 20 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 20
7968: EQUAL
7969: IFFALSE 7979
// sRemote := true ;
7971: LD_ADDR_EXP 55
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 21 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 21
7986: EQUAL
7987: IFFALSE 7997
// sPowell := true ;
7989: LD_ADDR_EXP 56
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 22 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 22
8004: EQUAL
8005: IFFALSE 8015
// sTeleport := true ;
8007: LD_ADDR_EXP 59
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 23 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 23
8022: EQUAL
8023: IFFALSE 8033
// sOilTower := true ;
8025: LD_ADDR_EXP 61
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 24 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 24
8040: EQUAL
8041: IFFALSE 8051
// sShovel := true ;
8043: LD_ADDR_EXP 62
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 25 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 25
8058: EQUAL
8059: IFFALSE 8069
// sSheik := true ;
8061: LD_ADDR_EXP 63
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 26 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 26
8076: EQUAL
8077: IFFALSE 8087
// sEarthquake := true ;
8079: LD_ADDR_EXP 65
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 27 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 27
8094: EQUAL
8095: IFFALSE 8105
// sAI := true ;
8097: LD_ADDR_EXP 66
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 28 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 28
8112: EQUAL
8113: IFFALSE 8123
// sCargo := true ;
8115: LD_ADDR_EXP 69
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 29 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 29
8130: EQUAL
8131: IFFALSE 8141
// sDLaser := true ;
8133: LD_ADDR_EXP 70
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 30 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 30
8148: EQUAL
8149: IFFALSE 8159
// sExchange := true ;
8151: LD_ADDR_EXP 71
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 31 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 31
8166: EQUAL
8167: IFFALSE 8177
// sFac := true ;
8169: LD_ADDR_EXP 72
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 32 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 32
8184: EQUAL
8185: IFFALSE 8195
// sPower := true ;
8187: LD_ADDR_EXP 73
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 33 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 33
8202: EQUAL
8203: IFFALSE 8213
// sRandom := true ;
8205: LD_ADDR_EXP 74
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 34 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 34
8220: EQUAL
8221: IFFALSE 8231
// sShield := true ;
8223: LD_ADDR_EXP 75
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 35 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 35
8238: EQUAL
8239: IFFALSE 8249
// sTime := true ;
8241: LD_ADDR_EXP 76
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 36 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 36
8256: EQUAL
8257: IFFALSE 8267
// sTools := true ;
8259: LD_ADDR_EXP 77
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 101 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 101
8274: EQUAL
8275: IFFALSE 8285
// sSold := true ;
8277: LD_ADDR_EXP 42
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 102 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 102
8292: EQUAL
8293: IFFALSE 8303
// sDiff := true ;
8295: LD_ADDR_EXP 43
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 103 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 103
8310: EQUAL
8311: IFFALSE 8321
// sFog := true ;
8313: LD_ADDR_EXP 46
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 104 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 104
8328: EQUAL
8329: IFFALSE 8339
// sReset := true ;
8331: LD_ADDR_EXP 47
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 105 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 105
8346: EQUAL
8347: IFFALSE 8357
// sSun := true ;
8349: LD_ADDR_EXP 48
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 106 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 106
8364: EQUAL
8365: IFFALSE 8375
// sTiger := true ;
8367: LD_ADDR_EXP 44
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 107 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 107
8382: EQUAL
8383: IFFALSE 8393
// sBomb := true ;
8385: LD_ADDR_EXP 45
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// if p3 = 108 then
8393: LD_VAR 0 3
8397: PUSH
8398: LD_INT 108
8400: EQUAL
8401: IFFALSE 8411
// sWound := true ;
8403: LD_ADDR_EXP 53
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// if p3 = 109 then
8411: LD_VAR 0 3
8415: PUSH
8416: LD_INT 109
8418: EQUAL
8419: IFFALSE 8429
// sBetray := true ;
8421: LD_ADDR_EXP 57
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// if p3 = 110 then
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 110
8436: EQUAL
8437: IFFALSE 8447
// sContamin := true ;
8439: LD_ADDR_EXP 58
8443: PUSH
8444: LD_INT 1
8446: ST_TO_ADDR
// if p3 = 111 then
8447: LD_VAR 0 3
8451: PUSH
8452: LD_INT 111
8454: EQUAL
8455: IFFALSE 8465
// sOil := true ;
8457: LD_ADDR_EXP 60
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// if p3 = 112 then
8465: LD_VAR 0 3
8469: PUSH
8470: LD_INT 112
8472: EQUAL
8473: IFFALSE 8483
// sStu := true ;
8475: LD_ADDR_EXP 64
8479: PUSH
8480: LD_INT 1
8482: ST_TO_ADDR
// if p3 = 113 then
8483: LD_VAR 0 3
8487: PUSH
8488: LD_INT 113
8490: EQUAL
8491: IFFALSE 8501
// sBazooka := true ;
8493: LD_ADDR_EXP 67
8497: PUSH
8498: LD_INT 1
8500: ST_TO_ADDR
// if p3 = 114 then
8501: LD_VAR 0 3
8505: PUSH
8506: LD_INT 114
8508: EQUAL
8509: IFFALSE 8519
// sMortar := true ;
8511: LD_ADDR_EXP 68
8515: PUSH
8516: LD_INT 1
8518: ST_TO_ADDR
// if p3 = 115 then
8519: LD_VAR 0 3
8523: PUSH
8524: LD_INT 115
8526: EQUAL
8527: IFFALSE 8537
// sRanger := true ;
8529: LD_ADDR_EXP 78
8533: PUSH
8534: LD_INT 1
8536: ST_TO_ADDR
// if p3 = 116 then
8537: LD_VAR 0 3
8541: PUSH
8542: LD_INT 116
8544: EQUAL
8545: IFFALSE 8555
// sComputer := true ;
8547: LD_ADDR_EXP 79
8551: PUSH
8552: LD_INT 1
8554: ST_TO_ADDR
// if p3 = 117 then
8555: LD_VAR 0 3
8559: PUSH
8560: LD_INT 117
8562: EQUAL
8563: IFFALSE 8573
// s30 := true ;
8565: LD_ADDR_EXP 80
8569: PUSH
8570: LD_INT 1
8572: ST_TO_ADDR
// if p3 = 118 then
8573: LD_VAR 0 3
8577: PUSH
8578: LD_INT 118
8580: EQUAL
8581: IFFALSE 8591
// s60 := true ;
8583: LD_ADDR_EXP 81
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// end ; if p2 = hack_mode then
8591: LD_VAR 0 2
8595: PUSH
8596: LD_INT 101
8598: EQUAL
8599: IFFALSE 8727
// begin case p3 of 1 :
8601: LD_VAR 0 3
8605: PUSH
8606: LD_INT 1
8608: DOUBLE
8609: EQUAL
8610: IFTRUE 8614
8612: GO 8621
8614: POP
// hHackUnlimitedResources ; 2 :
8615: CALL 20874 0 0
8619: GO 8727
8621: LD_INT 2
8623: DOUBLE
8624: EQUAL
8625: IFTRUE 8629
8627: GO 8636
8629: POP
// hHackSetLevel10 ; 3 :
8630: CALL 21007 0 0
8634: GO 8727
8636: LD_INT 3
8638: DOUBLE
8639: EQUAL
8640: IFTRUE 8644
8642: GO 8651
8644: POP
// hHackSetLevel10YourUnits ; 4 :
8645: CALL 21092 0 0
8649: GO 8727
8651: LD_INT 4
8653: DOUBLE
8654: EQUAL
8655: IFTRUE 8659
8657: GO 8666
8659: POP
// hHackInvincible ; 5 :
8660: CALL 21540 0 0
8664: GO 8727
8666: LD_INT 5
8668: DOUBLE
8669: EQUAL
8670: IFTRUE 8674
8672: GO 8681
8674: POP
// hHackInvisible ; 6 :
8675: CALL 21651 0 0
8679: GO 8727
8681: LD_INT 6
8683: DOUBLE
8684: EQUAL
8685: IFTRUE 8689
8687: GO 8696
8689: POP
// hHackChangeYourSide ; 7 :
8690: CALL 21708 0 0
8694: GO 8727
8696: LD_INT 7
8698: DOUBLE
8699: EQUAL
8700: IFTRUE 8704
8702: GO 8711
8704: POP
// hHackChangeUnitSide ; 8 :
8705: CALL 21750 0 0
8709: GO 8727
8711: LD_INT 8
8713: DOUBLE
8714: EQUAL
8715: IFTRUE 8719
8717: GO 8726
8719: POP
// hHackFog ; end ;
8720: CALL 21851 0 0
8724: GO 8727
8726: POP
// end ; if p2 = game_save_mode then
8727: LD_VAR 0 2
8731: PUSH
8732: LD_INT 102
8734: EQUAL
8735: IFFALSE 8790
// begin if p3 = 1 then
8737: LD_VAR 0 3
8741: PUSH
8742: LD_INT 1
8744: EQUAL
8745: IFFALSE 8757
// globalGameSaveCounter := p4 ;
8747: LD_ADDR_EXP 24
8751: PUSH
8752: LD_VAR 0 4
8756: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8757: LD_VAR 0 3
8761: PUSH
8762: LD_INT 2
8764: EQUAL
8765: PUSH
8766: LD_EXP 24
8770: AND
8771: IFFALSE 8790
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8773: LD_STRING setGameSaveCounter(
8775: PUSH
8776: LD_EXP 24
8780: STR
8781: PUSH
8782: LD_STRING )
8784: STR
8785: PPUSH
8786: CALL_OW 559
// end ; end ;
8790: LD_VAR 0 7
8794: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8795: LD_INT 0
8797: PPUSH
// streamModeActive := false ;
8798: LD_ADDR_EXP 25
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// normalCounter := 36 ;
8806: LD_ADDR_EXP 26
8810: PUSH
8811: LD_INT 36
8813: ST_TO_ADDR
// hardcoreCounter := 18 ;
8814: LD_ADDR_EXP 27
8818: PUSH
8819: LD_INT 18
8821: ST_TO_ADDR
// sRocket := false ;
8822: LD_ADDR_EXP 30
8826: PUSH
8827: LD_INT 0
8829: ST_TO_ADDR
// sSpeed := false ;
8830: LD_ADDR_EXP 29
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// sEngine := false ;
8838: LD_ADDR_EXP 31
8842: PUSH
8843: LD_INT 0
8845: ST_TO_ADDR
// sSpec := false ;
8846: LD_ADDR_EXP 28
8850: PUSH
8851: LD_INT 0
8853: ST_TO_ADDR
// sLevel := false ;
8854: LD_ADDR_EXP 32
8858: PUSH
8859: LD_INT 0
8861: ST_TO_ADDR
// sArmoury := false ;
8862: LD_ADDR_EXP 33
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// sRadar := false ;
8870: LD_ADDR_EXP 34
8874: PUSH
8875: LD_INT 0
8877: ST_TO_ADDR
// sBunker := false ;
8878: LD_ADDR_EXP 35
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// sHack := false ;
8886: LD_ADDR_EXP 36
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// sFire := false ;
8894: LD_ADDR_EXP 37
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// sRefresh := false ;
8902: LD_ADDR_EXP 38
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// sExp := false ;
8910: LD_ADDR_EXP 39
8914: PUSH
8915: LD_INT 0
8917: ST_TO_ADDR
// sDepot := false ;
8918: LD_ADDR_EXP 40
8922: PUSH
8923: LD_INT 0
8925: ST_TO_ADDR
// sFlag := false ;
8926: LD_ADDR_EXP 41
8930: PUSH
8931: LD_INT 0
8933: ST_TO_ADDR
// sKamikadze := false ;
8934: LD_ADDR_EXP 49
8938: PUSH
8939: LD_INT 0
8941: ST_TO_ADDR
// sTroll := false ;
8942: LD_ADDR_EXP 50
8946: PUSH
8947: LD_INT 0
8949: ST_TO_ADDR
// sSlow := false ;
8950: LD_ADDR_EXP 51
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// sLack := false ;
8958: LD_ADDR_EXP 52
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// sTank := false ;
8966: LD_ADDR_EXP 54
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// sRemote := false ;
8974: LD_ADDR_EXP 55
8978: PUSH
8979: LD_INT 0
8981: ST_TO_ADDR
// sPowell := false ;
8982: LD_ADDR_EXP 56
8986: PUSH
8987: LD_INT 0
8989: ST_TO_ADDR
// sTeleport := false ;
8990: LD_ADDR_EXP 59
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// sOilTower := false ;
8998: LD_ADDR_EXP 61
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// sShovel := false ;
9006: LD_ADDR_EXP 62
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// sSheik := false ;
9014: LD_ADDR_EXP 63
9018: PUSH
9019: LD_INT 0
9021: ST_TO_ADDR
// sEarthquake := false ;
9022: LD_ADDR_EXP 65
9026: PUSH
9027: LD_INT 0
9029: ST_TO_ADDR
// sAI := false ;
9030: LD_ADDR_EXP 66
9034: PUSH
9035: LD_INT 0
9037: ST_TO_ADDR
// sCargo := false ;
9038: LD_ADDR_EXP 69
9042: PUSH
9043: LD_INT 0
9045: ST_TO_ADDR
// sDLaser := false ;
9046: LD_ADDR_EXP 70
9050: PUSH
9051: LD_INT 0
9053: ST_TO_ADDR
// sExchange := false ;
9054: LD_ADDR_EXP 71
9058: PUSH
9059: LD_INT 0
9061: ST_TO_ADDR
// sFac := false ;
9062: LD_ADDR_EXP 72
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// sPower := false ;
9070: LD_ADDR_EXP 73
9074: PUSH
9075: LD_INT 0
9077: ST_TO_ADDR
// sRandom := false ;
9078: LD_ADDR_EXP 74
9082: PUSH
9083: LD_INT 0
9085: ST_TO_ADDR
// sShield := false ;
9086: LD_ADDR_EXP 75
9090: PUSH
9091: LD_INT 0
9093: ST_TO_ADDR
// sTime := false ;
9094: LD_ADDR_EXP 76
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// sTools := false ;
9102: LD_ADDR_EXP 77
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// sSold := false ;
9110: LD_ADDR_EXP 42
9114: PUSH
9115: LD_INT 0
9117: ST_TO_ADDR
// sDiff := false ;
9118: LD_ADDR_EXP 43
9122: PUSH
9123: LD_INT 0
9125: ST_TO_ADDR
// sFog := false ;
9126: LD_ADDR_EXP 46
9130: PUSH
9131: LD_INT 0
9133: ST_TO_ADDR
// sReset := false ;
9134: LD_ADDR_EXP 47
9138: PUSH
9139: LD_INT 0
9141: ST_TO_ADDR
// sSun := false ;
9142: LD_ADDR_EXP 48
9146: PUSH
9147: LD_INT 0
9149: ST_TO_ADDR
// sTiger := false ;
9150: LD_ADDR_EXP 44
9154: PUSH
9155: LD_INT 0
9157: ST_TO_ADDR
// sBomb := false ;
9158: LD_ADDR_EXP 45
9162: PUSH
9163: LD_INT 0
9165: ST_TO_ADDR
// sWound := false ;
9166: LD_ADDR_EXP 53
9170: PUSH
9171: LD_INT 0
9173: ST_TO_ADDR
// sBetray := false ;
9174: LD_ADDR_EXP 57
9178: PUSH
9179: LD_INT 0
9181: ST_TO_ADDR
// sContamin := false ;
9182: LD_ADDR_EXP 58
9186: PUSH
9187: LD_INT 0
9189: ST_TO_ADDR
// sOil := false ;
9190: LD_ADDR_EXP 60
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// sStu := false ;
9198: LD_ADDR_EXP 64
9202: PUSH
9203: LD_INT 0
9205: ST_TO_ADDR
// sBazooka := false ;
9206: LD_ADDR_EXP 67
9210: PUSH
9211: LD_INT 0
9213: ST_TO_ADDR
// sMortar := false ;
9214: LD_ADDR_EXP 68
9218: PUSH
9219: LD_INT 0
9221: ST_TO_ADDR
// sRanger := false ;
9222: LD_ADDR_EXP 78
9226: PUSH
9227: LD_INT 0
9229: ST_TO_ADDR
// sComputer := false ;
9230: LD_ADDR_EXP 79
9234: PUSH
9235: LD_INT 0
9237: ST_TO_ADDR
// s30 := false ;
9238: LD_ADDR_EXP 80
9242: PUSH
9243: LD_INT 0
9245: ST_TO_ADDR
// s60 := false ;
9246: LD_ADDR_EXP 81
9250: PUSH
9251: LD_INT 0
9253: ST_TO_ADDR
// end ;
9254: LD_VAR 0 1
9258: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9259: LD_INT 0
9261: PPUSH
9262: PPUSH
9263: PPUSH
9264: PPUSH
9265: PPUSH
9266: PPUSH
9267: PPUSH
// result := [ ] ;
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: EMPTY
9274: ST_TO_ADDR
// if campaign_id = 1 then
9275: LD_OWVAR 69
9279: PUSH
9280: LD_INT 1
9282: EQUAL
9283: IFFALSE 12449
// begin case mission_number of 1 :
9285: LD_OWVAR 70
9289: PUSH
9290: LD_INT 1
9292: DOUBLE
9293: EQUAL
9294: IFTRUE 9298
9296: GO 9374
9298: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9299: LD_ADDR_VAR 0 2
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 4
9309: PUSH
9310: LD_INT 11
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: LD_INT 15
9318: PUSH
9319: LD_INT 16
9321: PUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 23
9327: PUSH
9328: LD_INT 26
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 101
9344: PUSH
9345: LD_INT 102
9347: PUSH
9348: LD_INT 106
9350: PUSH
9351: LD_INT 116
9353: PUSH
9354: LD_INT 117
9356: PUSH
9357: LD_INT 118
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: ST_TO_ADDR
9372: GO 12447
9374: LD_INT 2
9376: DOUBLE
9377: EQUAL
9378: IFTRUE 9382
9380: GO 9466
9382: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9383: LD_ADDR_VAR 0 2
9387: PUSH
9388: LD_INT 2
9390: PUSH
9391: LD_INT 4
9393: PUSH
9394: LD_INT 11
9396: PUSH
9397: LD_INT 12
9399: PUSH
9400: LD_INT 15
9402: PUSH
9403: LD_INT 16
9405: PUSH
9406: LD_INT 22
9408: PUSH
9409: LD_INT 23
9411: PUSH
9412: LD_INT 26
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 101
9428: PUSH
9429: LD_INT 102
9431: PUSH
9432: LD_INT 105
9434: PUSH
9435: LD_INT 106
9437: PUSH
9438: LD_INT 108
9440: PUSH
9441: LD_INT 116
9443: PUSH
9444: LD_INT 117
9446: PUSH
9447: LD_INT 118
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: ST_TO_ADDR
9464: GO 12447
9466: LD_INT 3
9468: DOUBLE
9469: EQUAL
9470: IFTRUE 9474
9472: GO 9562
9474: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9475: LD_ADDR_VAR 0 2
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: LD_INT 4
9485: PUSH
9486: LD_INT 5
9488: PUSH
9489: LD_INT 11
9491: PUSH
9492: LD_INT 12
9494: PUSH
9495: LD_INT 15
9497: PUSH
9498: LD_INT 16
9500: PUSH
9501: LD_INT 22
9503: PUSH
9504: LD_INT 26
9506: PUSH
9507: LD_INT 36
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 101
9524: PUSH
9525: LD_INT 102
9527: PUSH
9528: LD_INT 105
9530: PUSH
9531: LD_INT 106
9533: PUSH
9534: LD_INT 108
9536: PUSH
9537: LD_INT 116
9539: PUSH
9540: LD_INT 117
9542: PUSH
9543: LD_INT 118
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: ST_TO_ADDR
9560: GO 12447
9562: LD_INT 4
9564: DOUBLE
9565: EQUAL
9566: IFTRUE 9570
9568: GO 9666
9570: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9571: LD_ADDR_VAR 0 2
9575: PUSH
9576: LD_INT 2
9578: PUSH
9579: LD_INT 4
9581: PUSH
9582: LD_INT 5
9584: PUSH
9585: LD_INT 8
9587: PUSH
9588: LD_INT 11
9590: PUSH
9591: LD_INT 12
9593: PUSH
9594: LD_INT 15
9596: PUSH
9597: LD_INT 16
9599: PUSH
9600: LD_INT 22
9602: PUSH
9603: LD_INT 23
9605: PUSH
9606: LD_INT 26
9608: PUSH
9609: LD_INT 36
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: PUSH
9626: LD_INT 101
9628: PUSH
9629: LD_INT 102
9631: PUSH
9632: LD_INT 105
9634: PUSH
9635: LD_INT 106
9637: PUSH
9638: LD_INT 108
9640: PUSH
9641: LD_INT 116
9643: PUSH
9644: LD_INT 117
9646: PUSH
9647: LD_INT 118
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: ST_TO_ADDR
9664: GO 12447
9666: LD_INT 5
9668: DOUBLE
9669: EQUAL
9670: IFTRUE 9674
9672: GO 9786
9674: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: LD_INT 2
9682: PUSH
9683: LD_INT 4
9685: PUSH
9686: LD_INT 5
9688: PUSH
9689: LD_INT 6
9691: PUSH
9692: LD_INT 8
9694: PUSH
9695: LD_INT 11
9697: PUSH
9698: LD_INT 12
9700: PUSH
9701: LD_INT 15
9703: PUSH
9704: LD_INT 16
9706: PUSH
9707: LD_INT 22
9709: PUSH
9710: LD_INT 23
9712: PUSH
9713: LD_INT 25
9715: PUSH
9716: LD_INT 26
9718: PUSH
9719: LD_INT 36
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 101
9740: PUSH
9741: LD_INT 102
9743: PUSH
9744: LD_INT 105
9746: PUSH
9747: LD_INT 106
9749: PUSH
9750: LD_INT 108
9752: PUSH
9753: LD_INT 109
9755: PUSH
9756: LD_INT 112
9758: PUSH
9759: LD_INT 116
9761: PUSH
9762: LD_INT 117
9764: PUSH
9765: LD_INT 118
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: ST_TO_ADDR
9784: GO 12447
9786: LD_INT 6
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9926
9794: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9795: LD_ADDR_VAR 0 2
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 4
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: LD_INT 8
9814: PUSH
9815: LD_INT 11
9817: PUSH
9818: LD_INT 12
9820: PUSH
9821: LD_INT 15
9823: PUSH
9824: LD_INT 16
9826: PUSH
9827: LD_INT 20
9829: PUSH
9830: LD_INT 21
9832: PUSH
9833: LD_INT 22
9835: PUSH
9836: LD_INT 23
9838: PUSH
9839: LD_INT 25
9841: PUSH
9842: LD_INT 26
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: LD_INT 31
9850: PUSH
9851: LD_INT 32
9853: PUSH
9854: LD_INT 36
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: PUSH
9878: LD_INT 101
9880: PUSH
9881: LD_INT 102
9883: PUSH
9884: LD_INT 105
9886: PUSH
9887: LD_INT 106
9889: PUSH
9890: LD_INT 108
9892: PUSH
9893: LD_INT 109
9895: PUSH
9896: LD_INT 112
9898: PUSH
9899: LD_INT 116
9901: PUSH
9902: LD_INT 117
9904: PUSH
9905: LD_INT 118
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: ST_TO_ADDR
9924: GO 12447
9926: LD_INT 7
9928: DOUBLE
9929: EQUAL
9930: IFTRUE 9934
9932: GO 10046
9934: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9935: LD_ADDR_VAR 0 2
9939: PUSH
9940: LD_INT 2
9942: PUSH
9943: LD_INT 4
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: LD_INT 7
9951: PUSH
9952: LD_INT 11
9954: PUSH
9955: LD_INT 12
9957: PUSH
9958: LD_INT 15
9960: PUSH
9961: LD_INT 16
9963: PUSH
9964: LD_INT 20
9966: PUSH
9967: LD_INT 21
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 23
9975: PUSH
9976: LD_INT 25
9978: PUSH
9979: LD_INT 26
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 101
10000: PUSH
10001: LD_INT 102
10003: PUSH
10004: LD_INT 103
10006: PUSH
10007: LD_INT 105
10009: PUSH
10010: LD_INT 106
10012: PUSH
10013: LD_INT 108
10015: PUSH
10016: LD_INT 112
10018: PUSH
10019: LD_INT 116
10021: PUSH
10022: LD_INT 117
10024: PUSH
10025: LD_INT 118
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: ST_TO_ADDR
10044: GO 12447
10046: LD_INT 8
10048: DOUBLE
10049: EQUAL
10050: IFTRUE 10054
10052: GO 10194
10054: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10055: LD_ADDR_VAR 0 2
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: LD_INT 4
10065: PUSH
10066: LD_INT 5
10068: PUSH
10069: LD_INT 6
10071: PUSH
10072: LD_INT 7
10074: PUSH
10075: LD_INT 8
10077: PUSH
10078: LD_INT 11
10080: PUSH
10081: LD_INT 12
10083: PUSH
10084: LD_INT 15
10086: PUSH
10087: LD_INT 16
10089: PUSH
10090: LD_INT 20
10092: PUSH
10093: LD_INT 21
10095: PUSH
10096: LD_INT 22
10098: PUSH
10099: LD_INT 23
10101: PUSH
10102: LD_INT 25
10104: PUSH
10105: LD_INT 26
10107: PUSH
10108: LD_INT 30
10110: PUSH
10111: LD_INT 31
10113: PUSH
10114: LD_INT 32
10116: PUSH
10117: LD_INT 36
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: PUSH
10142: LD_INT 101
10144: PUSH
10145: LD_INT 102
10147: PUSH
10148: LD_INT 103
10150: PUSH
10151: LD_INT 105
10153: PUSH
10154: LD_INT 106
10156: PUSH
10157: LD_INT 108
10159: PUSH
10160: LD_INT 109
10162: PUSH
10163: LD_INT 112
10165: PUSH
10166: LD_INT 116
10168: PUSH
10169: LD_INT 117
10171: PUSH
10172: LD_INT 118
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: ST_TO_ADDR
10192: GO 12447
10194: LD_INT 9
10196: DOUBLE
10197: EQUAL
10198: IFTRUE 10202
10200: GO 10350
10202: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10203: LD_ADDR_VAR 0 2
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 4
10213: PUSH
10214: LD_INT 5
10216: PUSH
10217: LD_INT 6
10219: PUSH
10220: LD_INT 7
10222: PUSH
10223: LD_INT 8
10225: PUSH
10226: LD_INT 11
10228: PUSH
10229: LD_INT 12
10231: PUSH
10232: LD_INT 15
10234: PUSH
10235: LD_INT 16
10237: PUSH
10238: LD_INT 20
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 22
10246: PUSH
10247: LD_INT 23
10249: PUSH
10250: LD_INT 25
10252: PUSH
10253: LD_INT 26
10255: PUSH
10256: LD_INT 28
10258: PUSH
10259: LD_INT 30
10261: PUSH
10262: LD_INT 31
10264: PUSH
10265: LD_INT 32
10267: PUSH
10268: LD_INT 36
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 101
10296: PUSH
10297: LD_INT 102
10299: PUSH
10300: LD_INT 103
10302: PUSH
10303: LD_INT 105
10305: PUSH
10306: LD_INT 106
10308: PUSH
10309: LD_INT 108
10311: PUSH
10312: LD_INT 109
10314: PUSH
10315: LD_INT 112
10317: PUSH
10318: LD_INT 114
10320: PUSH
10321: LD_INT 116
10323: PUSH
10324: LD_INT 117
10326: PUSH
10327: LD_INT 118
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: ST_TO_ADDR
10348: GO 12447
10350: LD_INT 10
10352: DOUBLE
10353: EQUAL
10354: IFTRUE 10358
10356: GO 10554
10358: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10359: LD_ADDR_VAR 0 2
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 4
10369: PUSH
10370: LD_INT 5
10372: PUSH
10373: LD_INT 6
10375: PUSH
10376: LD_INT 7
10378: PUSH
10379: LD_INT 8
10381: PUSH
10382: LD_INT 9
10384: PUSH
10385: LD_INT 10
10387: PUSH
10388: LD_INT 11
10390: PUSH
10391: LD_INT 12
10393: PUSH
10394: LD_INT 13
10396: PUSH
10397: LD_INT 14
10399: PUSH
10400: LD_INT 15
10402: PUSH
10403: LD_INT 16
10405: PUSH
10406: LD_INT 17
10408: PUSH
10409: LD_INT 18
10411: PUSH
10412: LD_INT 19
10414: PUSH
10415: LD_INT 20
10417: PUSH
10418: LD_INT 21
10420: PUSH
10421: LD_INT 22
10423: PUSH
10424: LD_INT 23
10426: PUSH
10427: LD_INT 24
10429: PUSH
10430: LD_INT 25
10432: PUSH
10433: LD_INT 26
10435: PUSH
10436: LD_INT 28
10438: PUSH
10439: LD_INT 30
10441: PUSH
10442: LD_INT 31
10444: PUSH
10445: LD_INT 32
10447: PUSH
10448: LD_INT 36
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 101
10484: PUSH
10485: LD_INT 102
10487: PUSH
10488: LD_INT 103
10490: PUSH
10491: LD_INT 104
10493: PUSH
10494: LD_INT 105
10496: PUSH
10497: LD_INT 106
10499: PUSH
10500: LD_INT 107
10502: PUSH
10503: LD_INT 108
10505: PUSH
10506: LD_INT 109
10508: PUSH
10509: LD_INT 110
10511: PUSH
10512: LD_INT 111
10514: PUSH
10515: LD_INT 112
10517: PUSH
10518: LD_INT 114
10520: PUSH
10521: LD_INT 116
10523: PUSH
10524: LD_INT 117
10526: PUSH
10527: LD_INT 118
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: ST_TO_ADDR
10552: GO 12447
10554: LD_INT 11
10556: DOUBLE
10557: EQUAL
10558: IFTRUE 10562
10560: GO 10766
10562: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10563: LD_ADDR_VAR 0 2
10567: PUSH
10568: LD_INT 2
10570: PUSH
10571: LD_INT 3
10573: PUSH
10574: LD_INT 4
10576: PUSH
10577: LD_INT 5
10579: PUSH
10580: LD_INT 6
10582: PUSH
10583: LD_INT 7
10585: PUSH
10586: LD_INT 8
10588: PUSH
10589: LD_INT 9
10591: PUSH
10592: LD_INT 10
10594: PUSH
10595: LD_INT 11
10597: PUSH
10598: LD_INT 12
10600: PUSH
10601: LD_INT 13
10603: PUSH
10604: LD_INT 14
10606: PUSH
10607: LD_INT 15
10609: PUSH
10610: LD_INT 16
10612: PUSH
10613: LD_INT 17
10615: PUSH
10616: LD_INT 18
10618: PUSH
10619: LD_INT 19
10621: PUSH
10622: LD_INT 20
10624: PUSH
10625: LD_INT 21
10627: PUSH
10628: LD_INT 22
10630: PUSH
10631: LD_INT 23
10633: PUSH
10634: LD_INT 24
10636: PUSH
10637: LD_INT 25
10639: PUSH
10640: LD_INT 26
10642: PUSH
10643: LD_INT 28
10645: PUSH
10646: LD_INT 30
10648: PUSH
10649: LD_INT 31
10651: PUSH
10652: LD_INT 32
10654: PUSH
10655: LD_INT 34
10657: PUSH
10658: LD_INT 36
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: PUSH
10694: LD_INT 101
10696: PUSH
10697: LD_INT 102
10699: PUSH
10700: LD_INT 103
10702: PUSH
10703: LD_INT 104
10705: PUSH
10706: LD_INT 105
10708: PUSH
10709: LD_INT 106
10711: PUSH
10712: LD_INT 107
10714: PUSH
10715: LD_INT 108
10717: PUSH
10718: LD_INT 109
10720: PUSH
10721: LD_INT 110
10723: PUSH
10724: LD_INT 111
10726: PUSH
10727: LD_INT 112
10729: PUSH
10730: LD_INT 114
10732: PUSH
10733: LD_INT 116
10735: PUSH
10736: LD_INT 117
10738: PUSH
10739: LD_INT 118
10741: PUSH
10742: EMPTY
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: ST_TO_ADDR
10764: GO 12447
10766: LD_INT 12
10768: DOUBLE
10769: EQUAL
10770: IFTRUE 10774
10772: GO 10994
10774: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10775: LD_ADDR_VAR 0 2
10779: PUSH
10780: LD_INT 1
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 3
10788: PUSH
10789: LD_INT 4
10791: PUSH
10792: LD_INT 5
10794: PUSH
10795: LD_INT 6
10797: PUSH
10798: LD_INT 7
10800: PUSH
10801: LD_INT 8
10803: PUSH
10804: LD_INT 9
10806: PUSH
10807: LD_INT 10
10809: PUSH
10810: LD_INT 11
10812: PUSH
10813: LD_INT 12
10815: PUSH
10816: LD_INT 13
10818: PUSH
10819: LD_INT 14
10821: PUSH
10822: LD_INT 15
10824: PUSH
10825: LD_INT 16
10827: PUSH
10828: LD_INT 17
10830: PUSH
10831: LD_INT 18
10833: PUSH
10834: LD_INT 19
10836: PUSH
10837: LD_INT 20
10839: PUSH
10840: LD_INT 21
10842: PUSH
10843: LD_INT 22
10845: PUSH
10846: LD_INT 23
10848: PUSH
10849: LD_INT 24
10851: PUSH
10852: LD_INT 25
10854: PUSH
10855: LD_INT 26
10857: PUSH
10858: LD_INT 27
10860: PUSH
10861: LD_INT 28
10863: PUSH
10864: LD_INT 30
10866: PUSH
10867: LD_INT 31
10869: PUSH
10870: LD_INT 32
10872: PUSH
10873: LD_INT 33
10875: PUSH
10876: LD_INT 34
10878: PUSH
10879: LD_INT 36
10881: PUSH
10882: EMPTY
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 101
10920: PUSH
10921: LD_INT 102
10923: PUSH
10924: LD_INT 103
10926: PUSH
10927: LD_INT 104
10929: PUSH
10930: LD_INT 105
10932: PUSH
10933: LD_INT 106
10935: PUSH
10936: LD_INT 107
10938: PUSH
10939: LD_INT 108
10941: PUSH
10942: LD_INT 109
10944: PUSH
10945: LD_INT 110
10947: PUSH
10948: LD_INT 111
10950: PUSH
10951: LD_INT 112
10953: PUSH
10954: LD_INT 113
10956: PUSH
10957: LD_INT 114
10959: PUSH
10960: LD_INT 116
10962: PUSH
10963: LD_INT 117
10965: PUSH
10966: LD_INT 118
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: ST_TO_ADDR
10992: GO 12447
10994: LD_INT 13
10996: DOUBLE
10997: EQUAL
10998: IFTRUE 11002
11000: GO 11210
11002: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11003: LD_ADDR_VAR 0 2
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: LD_INT 2
11013: PUSH
11014: LD_INT 3
11016: PUSH
11017: LD_INT 4
11019: PUSH
11020: LD_INT 5
11022: PUSH
11023: LD_INT 8
11025: PUSH
11026: LD_INT 9
11028: PUSH
11029: LD_INT 10
11031: PUSH
11032: LD_INT 11
11034: PUSH
11035: LD_INT 12
11037: PUSH
11038: LD_INT 14
11040: PUSH
11041: LD_INT 15
11043: PUSH
11044: LD_INT 16
11046: PUSH
11047: LD_INT 17
11049: PUSH
11050: LD_INT 18
11052: PUSH
11053: LD_INT 19
11055: PUSH
11056: LD_INT 20
11058: PUSH
11059: LD_INT 21
11061: PUSH
11062: LD_INT 22
11064: PUSH
11065: LD_INT 23
11067: PUSH
11068: LD_INT 24
11070: PUSH
11071: LD_INT 25
11073: PUSH
11074: LD_INT 26
11076: PUSH
11077: LD_INT 27
11079: PUSH
11080: LD_INT 28
11082: PUSH
11083: LD_INT 30
11085: PUSH
11086: LD_INT 31
11088: PUSH
11089: LD_INT 32
11091: PUSH
11092: LD_INT 33
11094: PUSH
11095: LD_INT 34
11097: PUSH
11098: LD_INT 36
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 101
11136: PUSH
11137: LD_INT 102
11139: PUSH
11140: LD_INT 103
11142: PUSH
11143: LD_INT 104
11145: PUSH
11146: LD_INT 105
11148: PUSH
11149: LD_INT 106
11151: PUSH
11152: LD_INT 107
11154: PUSH
11155: LD_INT 108
11157: PUSH
11158: LD_INT 109
11160: PUSH
11161: LD_INT 110
11163: PUSH
11164: LD_INT 111
11166: PUSH
11167: LD_INT 112
11169: PUSH
11170: LD_INT 113
11172: PUSH
11173: LD_INT 114
11175: PUSH
11176: LD_INT 116
11178: PUSH
11179: LD_INT 117
11181: PUSH
11182: LD_INT 118
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: ST_TO_ADDR
11208: GO 12447
11210: LD_INT 14
11212: DOUBLE
11213: EQUAL
11214: IFTRUE 11218
11216: GO 11442
11218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11219: LD_ADDR_VAR 0 2
11223: PUSH
11224: LD_INT 1
11226: PUSH
11227: LD_INT 2
11229: PUSH
11230: LD_INT 3
11232: PUSH
11233: LD_INT 4
11235: PUSH
11236: LD_INT 5
11238: PUSH
11239: LD_INT 6
11241: PUSH
11242: LD_INT 7
11244: PUSH
11245: LD_INT 8
11247: PUSH
11248: LD_INT 9
11250: PUSH
11251: LD_INT 10
11253: PUSH
11254: LD_INT 11
11256: PUSH
11257: LD_INT 12
11259: PUSH
11260: LD_INT 13
11262: PUSH
11263: LD_INT 14
11265: PUSH
11266: LD_INT 15
11268: PUSH
11269: LD_INT 16
11271: PUSH
11272: LD_INT 17
11274: PUSH
11275: LD_INT 18
11277: PUSH
11278: LD_INT 19
11280: PUSH
11281: LD_INT 20
11283: PUSH
11284: LD_INT 21
11286: PUSH
11287: LD_INT 22
11289: PUSH
11290: LD_INT 23
11292: PUSH
11293: LD_INT 24
11295: PUSH
11296: LD_INT 25
11298: PUSH
11299: LD_INT 26
11301: PUSH
11302: LD_INT 27
11304: PUSH
11305: LD_INT 28
11307: PUSH
11308: LD_INT 29
11310: PUSH
11311: LD_INT 30
11313: PUSH
11314: LD_INT 31
11316: PUSH
11317: LD_INT 32
11319: PUSH
11320: LD_INT 33
11322: PUSH
11323: LD_INT 34
11325: PUSH
11326: LD_INT 36
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 101
11368: PUSH
11369: LD_INT 102
11371: PUSH
11372: LD_INT 103
11374: PUSH
11375: LD_INT 104
11377: PUSH
11378: LD_INT 105
11380: PUSH
11381: LD_INT 106
11383: PUSH
11384: LD_INT 107
11386: PUSH
11387: LD_INT 108
11389: PUSH
11390: LD_INT 109
11392: PUSH
11393: LD_INT 110
11395: PUSH
11396: LD_INT 111
11398: PUSH
11399: LD_INT 112
11401: PUSH
11402: LD_INT 113
11404: PUSH
11405: LD_INT 114
11407: PUSH
11408: LD_INT 116
11410: PUSH
11411: LD_INT 117
11413: PUSH
11414: LD_INT 118
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: ST_TO_ADDR
11440: GO 12447
11442: LD_INT 15
11444: DOUBLE
11445: EQUAL
11446: IFTRUE 11450
11448: GO 11674
11450: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11451: LD_ADDR_VAR 0 2
11455: PUSH
11456: LD_INT 1
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 3
11464: PUSH
11465: LD_INT 4
11467: PUSH
11468: LD_INT 5
11470: PUSH
11471: LD_INT 6
11473: PUSH
11474: LD_INT 7
11476: PUSH
11477: LD_INT 8
11479: PUSH
11480: LD_INT 9
11482: PUSH
11483: LD_INT 10
11485: PUSH
11486: LD_INT 11
11488: PUSH
11489: LD_INT 12
11491: PUSH
11492: LD_INT 13
11494: PUSH
11495: LD_INT 14
11497: PUSH
11498: LD_INT 15
11500: PUSH
11501: LD_INT 16
11503: PUSH
11504: LD_INT 17
11506: PUSH
11507: LD_INT 18
11509: PUSH
11510: LD_INT 19
11512: PUSH
11513: LD_INT 20
11515: PUSH
11516: LD_INT 21
11518: PUSH
11519: LD_INT 22
11521: PUSH
11522: LD_INT 23
11524: PUSH
11525: LD_INT 24
11527: PUSH
11528: LD_INT 25
11530: PUSH
11531: LD_INT 26
11533: PUSH
11534: LD_INT 27
11536: PUSH
11537: LD_INT 28
11539: PUSH
11540: LD_INT 29
11542: PUSH
11543: LD_INT 30
11545: PUSH
11546: LD_INT 31
11548: PUSH
11549: LD_INT 32
11551: PUSH
11552: LD_INT 33
11554: PUSH
11555: LD_INT 34
11557: PUSH
11558: LD_INT 36
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 101
11600: PUSH
11601: LD_INT 102
11603: PUSH
11604: LD_INT 103
11606: PUSH
11607: LD_INT 104
11609: PUSH
11610: LD_INT 105
11612: PUSH
11613: LD_INT 106
11615: PUSH
11616: LD_INT 107
11618: PUSH
11619: LD_INT 108
11621: PUSH
11622: LD_INT 109
11624: PUSH
11625: LD_INT 110
11627: PUSH
11628: LD_INT 111
11630: PUSH
11631: LD_INT 112
11633: PUSH
11634: LD_INT 113
11636: PUSH
11637: LD_INT 114
11639: PUSH
11640: LD_INT 116
11642: PUSH
11643: LD_INT 117
11645: PUSH
11646: LD_INT 118
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: ST_TO_ADDR
11672: GO 12447
11674: LD_INT 16
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11818
11682: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_INT 2
11690: PUSH
11691: LD_INT 4
11693: PUSH
11694: LD_INT 5
11696: PUSH
11697: LD_INT 7
11699: PUSH
11700: LD_INT 11
11702: PUSH
11703: LD_INT 12
11705: PUSH
11706: LD_INT 15
11708: PUSH
11709: LD_INT 16
11711: PUSH
11712: LD_INT 20
11714: PUSH
11715: LD_INT 21
11717: PUSH
11718: LD_INT 22
11720: PUSH
11721: LD_INT 23
11723: PUSH
11724: LD_INT 25
11726: PUSH
11727: LD_INT 26
11729: PUSH
11730: LD_INT 30
11732: PUSH
11733: LD_INT 31
11735: PUSH
11736: LD_INT 32
11738: PUSH
11739: LD_INT 33
11741: PUSH
11742: LD_INT 34
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 101
11768: PUSH
11769: LD_INT 102
11771: PUSH
11772: LD_INT 103
11774: PUSH
11775: LD_INT 106
11777: PUSH
11778: LD_INT 108
11780: PUSH
11781: LD_INT 112
11783: PUSH
11784: LD_INT 113
11786: PUSH
11787: LD_INT 114
11789: PUSH
11790: LD_INT 116
11792: PUSH
11793: LD_INT 117
11795: PUSH
11796: LD_INT 118
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: ST_TO_ADDR
11816: GO 12447
11818: LD_INT 17
11820: DOUBLE
11821: EQUAL
11822: IFTRUE 11826
11824: GO 12050
11826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11827: LD_ADDR_VAR 0 2
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: LD_INT 2
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 4
11843: PUSH
11844: LD_INT 5
11846: PUSH
11847: LD_INT 6
11849: PUSH
11850: LD_INT 7
11852: PUSH
11853: LD_INT 8
11855: PUSH
11856: LD_INT 9
11858: PUSH
11859: LD_INT 10
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 13
11870: PUSH
11871: LD_INT 14
11873: PUSH
11874: LD_INT 15
11876: PUSH
11877: LD_INT 16
11879: PUSH
11880: LD_INT 17
11882: PUSH
11883: LD_INT 18
11885: PUSH
11886: LD_INT 19
11888: PUSH
11889: LD_INT 20
11891: PUSH
11892: LD_INT 21
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 24
11903: PUSH
11904: LD_INT 25
11906: PUSH
11907: LD_INT 26
11909: PUSH
11910: LD_INT 27
11912: PUSH
11913: LD_INT 28
11915: PUSH
11916: LD_INT 29
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 31
11924: PUSH
11925: LD_INT 32
11927: PUSH
11928: LD_INT 33
11930: PUSH
11931: LD_INT 34
11933: PUSH
11934: LD_INT 36
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 101
11976: PUSH
11977: LD_INT 102
11979: PUSH
11980: LD_INT 103
11982: PUSH
11983: LD_INT 104
11985: PUSH
11986: LD_INT 105
11988: PUSH
11989: LD_INT 106
11991: PUSH
11992: LD_INT 107
11994: PUSH
11995: LD_INT 108
11997: PUSH
11998: LD_INT 109
12000: PUSH
12001: LD_INT 110
12003: PUSH
12004: LD_INT 111
12006: PUSH
12007: LD_INT 112
12009: PUSH
12010: LD_INT 113
12012: PUSH
12013: LD_INT 114
12015: PUSH
12016: LD_INT 116
12018: PUSH
12019: LD_INT 117
12021: PUSH
12022: LD_INT 118
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: ST_TO_ADDR
12048: GO 12447
12050: LD_INT 18
12052: DOUBLE
12053: EQUAL
12054: IFTRUE 12058
12056: GO 12206
12058: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12059: LD_ADDR_VAR 0 2
12063: PUSH
12064: LD_INT 2
12066: PUSH
12067: LD_INT 4
12069: PUSH
12070: LD_INT 5
12072: PUSH
12073: LD_INT 7
12075: PUSH
12076: LD_INT 11
12078: PUSH
12079: LD_INT 12
12081: PUSH
12082: LD_INT 15
12084: PUSH
12085: LD_INT 16
12087: PUSH
12088: LD_INT 20
12090: PUSH
12091: LD_INT 21
12093: PUSH
12094: LD_INT 22
12096: PUSH
12097: LD_INT 23
12099: PUSH
12100: LD_INT 25
12102: PUSH
12103: LD_INT 26
12105: PUSH
12106: LD_INT 30
12108: PUSH
12109: LD_INT 31
12111: PUSH
12112: LD_INT 32
12114: PUSH
12115: LD_INT 33
12117: PUSH
12118: LD_INT 34
12120: PUSH
12121: LD_INT 35
12123: PUSH
12124: LD_INT 36
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 101
12152: PUSH
12153: LD_INT 102
12155: PUSH
12156: LD_INT 103
12158: PUSH
12159: LD_INT 106
12161: PUSH
12162: LD_INT 108
12164: PUSH
12165: LD_INT 112
12167: PUSH
12168: LD_INT 113
12170: PUSH
12171: LD_INT 114
12173: PUSH
12174: LD_INT 115
12176: PUSH
12177: LD_INT 116
12179: PUSH
12180: LD_INT 117
12182: PUSH
12183: LD_INT 118
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: ST_TO_ADDR
12204: GO 12447
12206: LD_INT 19
12208: DOUBLE
12209: EQUAL
12210: IFTRUE 12214
12212: GO 12446
12214: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12215: LD_ADDR_VAR 0 2
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: LD_INT 2
12225: PUSH
12226: LD_INT 3
12228: PUSH
12229: LD_INT 4
12231: PUSH
12232: LD_INT 5
12234: PUSH
12235: LD_INT 6
12237: PUSH
12238: LD_INT 7
12240: PUSH
12241: LD_INT 8
12243: PUSH
12244: LD_INT 9
12246: PUSH
12247: LD_INT 10
12249: PUSH
12250: LD_INT 11
12252: PUSH
12253: LD_INT 12
12255: PUSH
12256: LD_INT 13
12258: PUSH
12259: LD_INT 14
12261: PUSH
12262: LD_INT 15
12264: PUSH
12265: LD_INT 16
12267: PUSH
12268: LD_INT 17
12270: PUSH
12271: LD_INT 18
12273: PUSH
12274: LD_INT 19
12276: PUSH
12277: LD_INT 20
12279: PUSH
12280: LD_INT 21
12282: PUSH
12283: LD_INT 22
12285: PUSH
12286: LD_INT 23
12288: PUSH
12289: LD_INT 24
12291: PUSH
12292: LD_INT 25
12294: PUSH
12295: LD_INT 26
12297: PUSH
12298: LD_INT 27
12300: PUSH
12301: LD_INT 28
12303: PUSH
12304: LD_INT 29
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: LD_INT 31
12312: PUSH
12313: LD_INT 32
12315: PUSH
12316: LD_INT 33
12318: PUSH
12319: LD_INT 34
12321: PUSH
12322: LD_INT 35
12324: PUSH
12325: LD_INT 36
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 101
12368: PUSH
12369: LD_INT 102
12371: PUSH
12372: LD_INT 103
12374: PUSH
12375: LD_INT 104
12377: PUSH
12378: LD_INT 105
12380: PUSH
12381: LD_INT 106
12383: PUSH
12384: LD_INT 107
12386: PUSH
12387: LD_INT 108
12389: PUSH
12390: LD_INT 109
12392: PUSH
12393: LD_INT 110
12395: PUSH
12396: LD_INT 111
12398: PUSH
12399: LD_INT 112
12401: PUSH
12402: LD_INT 113
12404: PUSH
12405: LD_INT 114
12407: PUSH
12408: LD_INT 115
12410: PUSH
12411: LD_INT 116
12413: PUSH
12414: LD_INT 117
12416: PUSH
12417: LD_INT 118
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: ST_TO_ADDR
12444: GO 12447
12446: POP
// end else
12447: GO 12678
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12449: LD_ADDR_VAR 0 2
12453: PUSH
12454: LD_INT 1
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 3
12462: PUSH
12463: LD_INT 4
12465: PUSH
12466: LD_INT 5
12468: PUSH
12469: LD_INT 6
12471: PUSH
12472: LD_INT 7
12474: PUSH
12475: LD_INT 8
12477: PUSH
12478: LD_INT 9
12480: PUSH
12481: LD_INT 10
12483: PUSH
12484: LD_INT 11
12486: PUSH
12487: LD_INT 12
12489: PUSH
12490: LD_INT 13
12492: PUSH
12493: LD_INT 14
12495: PUSH
12496: LD_INT 15
12498: PUSH
12499: LD_INT 16
12501: PUSH
12502: LD_INT 17
12504: PUSH
12505: LD_INT 18
12507: PUSH
12508: LD_INT 19
12510: PUSH
12511: LD_INT 20
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 22
12519: PUSH
12520: LD_INT 23
12522: PUSH
12523: LD_INT 24
12525: PUSH
12526: LD_INT 25
12528: PUSH
12529: LD_INT 26
12531: PUSH
12532: LD_INT 27
12534: PUSH
12535: LD_INT 28
12537: PUSH
12538: LD_INT 29
12540: PUSH
12541: LD_INT 30
12543: PUSH
12544: LD_INT 31
12546: PUSH
12547: LD_INT 32
12549: PUSH
12550: LD_INT 33
12552: PUSH
12553: LD_INT 34
12555: PUSH
12556: LD_INT 35
12558: PUSH
12559: LD_INT 36
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 101
12602: PUSH
12603: LD_INT 102
12605: PUSH
12606: LD_INT 103
12608: PUSH
12609: LD_INT 104
12611: PUSH
12612: LD_INT 105
12614: PUSH
12615: LD_INT 106
12617: PUSH
12618: LD_INT 107
12620: PUSH
12621: LD_INT 108
12623: PUSH
12624: LD_INT 109
12626: PUSH
12627: LD_INT 110
12629: PUSH
12630: LD_INT 111
12632: PUSH
12633: LD_INT 112
12635: PUSH
12636: LD_INT 113
12638: PUSH
12639: LD_INT 114
12641: PUSH
12642: LD_INT 115
12644: PUSH
12645: LD_INT 116
12647: PUSH
12648: LD_INT 117
12650: PUSH
12651: LD_INT 118
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: EMPTY
12675: LIST
12676: LIST
12677: ST_TO_ADDR
// if result then
12678: LD_VAR 0 2
12682: IFFALSE 13468
// begin normal :=  ;
12684: LD_ADDR_VAR 0 5
12688: PUSH
12689: LD_STRING 
12691: ST_TO_ADDR
// hardcore :=  ;
12692: LD_ADDR_VAR 0 6
12696: PUSH
12697: LD_STRING 
12699: ST_TO_ADDR
// active :=  ;
12700: LD_ADDR_VAR 0 7
12704: PUSH
12705: LD_STRING 
12707: ST_TO_ADDR
// for i = 1 to normalCounter do
12708: LD_ADDR_VAR 0 8
12712: PUSH
12713: DOUBLE
12714: LD_INT 1
12716: DEC
12717: ST_TO_ADDR
12718: LD_EXP 26
12722: PUSH
12723: FOR_TO
12724: IFFALSE 12825
// begin tmp := 0 ;
12726: LD_ADDR_VAR 0 3
12730: PUSH
12731: LD_STRING 0
12733: ST_TO_ADDR
// if result [ 1 ] then
12734: LD_VAR 0 2
12738: PUSH
12739: LD_INT 1
12741: ARRAY
12742: IFFALSE 12807
// if result [ 1 ] [ 1 ] = i then
12744: LD_VAR 0 2
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: PUSH
12753: LD_INT 1
12755: ARRAY
12756: PUSH
12757: LD_VAR 0 8
12761: EQUAL
12762: IFFALSE 12807
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12764: LD_ADDR_VAR 0 2
12768: PUSH
12769: LD_VAR 0 2
12773: PPUSH
12774: LD_INT 1
12776: PPUSH
12777: LD_VAR 0 2
12781: PUSH
12782: LD_INT 1
12784: ARRAY
12785: PPUSH
12786: LD_INT 1
12788: PPUSH
12789: CALL_OW 3
12793: PPUSH
12794: CALL_OW 1
12798: ST_TO_ADDR
// tmp := 1 ;
12799: LD_ADDR_VAR 0 3
12803: PUSH
12804: LD_STRING 1
12806: ST_TO_ADDR
// end ; normal := normal & tmp ;
12807: LD_ADDR_VAR 0 5
12811: PUSH
12812: LD_VAR 0 5
12816: PUSH
12817: LD_VAR 0 3
12821: STR
12822: ST_TO_ADDR
// end ;
12823: GO 12723
12825: POP
12826: POP
// for i = 1 to hardcoreCounter do
12827: LD_ADDR_VAR 0 8
12831: PUSH
12832: DOUBLE
12833: LD_INT 1
12835: DEC
12836: ST_TO_ADDR
12837: LD_EXP 27
12841: PUSH
12842: FOR_TO
12843: IFFALSE 12948
// begin tmp := 0 ;
12845: LD_ADDR_VAR 0 3
12849: PUSH
12850: LD_STRING 0
12852: ST_TO_ADDR
// if result [ 2 ] then
12853: LD_VAR 0 2
12857: PUSH
12858: LD_INT 2
12860: ARRAY
12861: IFFALSE 12930
// if result [ 2 ] [ 1 ] = 100 + i then
12863: LD_VAR 0 2
12867: PUSH
12868: LD_INT 2
12870: ARRAY
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PUSH
12876: LD_INT 100
12878: PUSH
12879: LD_VAR 0 8
12883: PLUS
12884: EQUAL
12885: IFFALSE 12930
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_VAR 0 2
12896: PPUSH
12897: LD_INT 2
12899: PPUSH
12900: LD_VAR 0 2
12904: PUSH
12905: LD_INT 2
12907: ARRAY
12908: PPUSH
12909: LD_INT 1
12911: PPUSH
12912: CALL_OW 3
12916: PPUSH
12917: CALL_OW 1
12921: ST_TO_ADDR
// tmp := 1 ;
12922: LD_ADDR_VAR 0 3
12926: PUSH
12927: LD_STRING 1
12929: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12930: LD_ADDR_VAR 0 6
12934: PUSH
12935: LD_VAR 0 6
12939: PUSH
12940: LD_VAR 0 3
12944: STR
12945: ST_TO_ADDR
// end ;
12946: GO 12842
12948: POP
12949: POP
// if isGameLoad then
12950: LD_VAR 0 1
12954: IFFALSE 13429
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12956: LD_ADDR_VAR 0 4
12960: PUSH
12961: LD_EXP 30
12965: PUSH
12966: LD_EXP 29
12970: PUSH
12971: LD_EXP 31
12975: PUSH
12976: LD_EXP 28
12980: PUSH
12981: LD_EXP 32
12985: PUSH
12986: LD_EXP 33
12990: PUSH
12991: LD_EXP 34
12995: PUSH
12996: LD_EXP 35
13000: PUSH
13001: LD_EXP 36
13005: PUSH
13006: LD_EXP 37
13010: PUSH
13011: LD_EXP 38
13015: PUSH
13016: LD_EXP 39
13020: PUSH
13021: LD_EXP 40
13025: PUSH
13026: LD_EXP 41
13030: PUSH
13031: LD_EXP 49
13035: PUSH
13036: LD_EXP 50
13040: PUSH
13041: LD_EXP 51
13045: PUSH
13046: LD_EXP 52
13050: PUSH
13051: LD_EXP 54
13055: PUSH
13056: LD_EXP 55
13060: PUSH
13061: LD_EXP 56
13065: PUSH
13066: LD_EXP 59
13070: PUSH
13071: LD_EXP 61
13075: PUSH
13076: LD_EXP 62
13080: PUSH
13081: LD_EXP 63
13085: PUSH
13086: LD_EXP 65
13090: PUSH
13091: LD_EXP 66
13095: PUSH
13096: LD_EXP 69
13100: PUSH
13101: LD_EXP 70
13105: PUSH
13106: LD_EXP 71
13110: PUSH
13111: LD_EXP 72
13115: PUSH
13116: LD_EXP 73
13120: PUSH
13121: LD_EXP 74
13125: PUSH
13126: LD_EXP 75
13130: PUSH
13131: LD_EXP 76
13135: PUSH
13136: LD_EXP 77
13140: PUSH
13141: LD_EXP 42
13145: PUSH
13146: LD_EXP 43
13150: PUSH
13151: LD_EXP 46
13155: PUSH
13156: LD_EXP 47
13160: PUSH
13161: LD_EXP 48
13165: PUSH
13166: LD_EXP 44
13170: PUSH
13171: LD_EXP 45
13175: PUSH
13176: LD_EXP 53
13180: PUSH
13181: LD_EXP 57
13185: PUSH
13186: LD_EXP 58
13190: PUSH
13191: LD_EXP 60
13195: PUSH
13196: LD_EXP 64
13200: PUSH
13201: LD_EXP 67
13205: PUSH
13206: LD_EXP 68
13210: PUSH
13211: LD_EXP 78
13215: PUSH
13216: LD_EXP 79
13220: PUSH
13221: LD_EXP 80
13225: PUSH
13226: LD_EXP 81
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: ST_TO_ADDR
// tmp :=  ;
13287: LD_ADDR_VAR 0 3
13291: PUSH
13292: LD_STRING 
13294: ST_TO_ADDR
// for i = 1 to normalCounter do
13295: LD_ADDR_VAR 0 8
13299: PUSH
13300: DOUBLE
13301: LD_INT 1
13303: DEC
13304: ST_TO_ADDR
13305: LD_EXP 26
13309: PUSH
13310: FOR_TO
13311: IFFALSE 13347
// begin if flags [ i ] then
13313: LD_VAR 0 4
13317: PUSH
13318: LD_VAR 0 8
13322: ARRAY
13323: IFFALSE 13345
// tmp := tmp & i & ; ;
13325: LD_ADDR_VAR 0 3
13329: PUSH
13330: LD_VAR 0 3
13334: PUSH
13335: LD_VAR 0 8
13339: STR
13340: PUSH
13341: LD_STRING ;
13343: STR
13344: ST_TO_ADDR
// end ;
13345: GO 13310
13347: POP
13348: POP
// for i = 1 to hardcoreCounter do
13349: LD_ADDR_VAR 0 8
13353: PUSH
13354: DOUBLE
13355: LD_INT 1
13357: DEC
13358: ST_TO_ADDR
13359: LD_EXP 27
13363: PUSH
13364: FOR_TO
13365: IFFALSE 13411
// begin if flags [ normalCounter + i ] then
13367: LD_VAR 0 4
13371: PUSH
13372: LD_EXP 26
13376: PUSH
13377: LD_VAR 0 8
13381: PLUS
13382: ARRAY
13383: IFFALSE 13409
// tmp := tmp & ( 100 + i ) & ; ;
13385: LD_ADDR_VAR 0 3
13389: PUSH
13390: LD_VAR 0 3
13394: PUSH
13395: LD_INT 100
13397: PUSH
13398: LD_VAR 0 8
13402: PLUS
13403: STR
13404: PUSH
13405: LD_STRING ;
13407: STR
13408: ST_TO_ADDR
// end ;
13409: GO 13364
13411: POP
13412: POP
// if tmp then
13413: LD_VAR 0 3
13417: IFFALSE 13429
// active := tmp ;
13419: LD_ADDR_VAR 0 7
13423: PUSH
13424: LD_VAR 0 3
13428: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13429: LD_STRING getStreamItemsFromMission("
13431: PUSH
13432: LD_VAR 0 5
13436: STR
13437: PUSH
13438: LD_STRING ","
13440: STR
13441: PUSH
13442: LD_VAR 0 6
13446: STR
13447: PUSH
13448: LD_STRING ","
13450: STR
13451: PUSH
13452: LD_VAR 0 7
13456: STR
13457: PUSH
13458: LD_STRING ")
13460: STR
13461: PPUSH
13462: CALL_OW 559
// end else
13466: GO 13475
// ToLua ( getStreamItemsFromMission("","","") ) ;
13468: LD_STRING getStreamItemsFromMission("","","")
13470: PPUSH
13471: CALL_OW 559
// end ;
13475: LD_VAR 0 2
13479: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13480: LD_EXP 25
13484: PUSH
13485: LD_EXP 30
13489: AND
13490: IFFALSE 13614
13492: GO 13494
13494: DISABLE
13495: LD_INT 0
13497: PPUSH
13498: PPUSH
// begin enable ;
13499: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13500: LD_ADDR_VAR 0 2
13504: PUSH
13505: LD_INT 22
13507: PUSH
13508: LD_OWVAR 2
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 2
13519: PUSH
13520: LD_INT 34
13522: PUSH
13523: LD_INT 7
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: LD_INT 34
13532: PUSH
13533: LD_INT 45
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 34
13542: PUSH
13543: LD_INT 28
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 34
13552: PUSH
13553: LD_INT 47
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PPUSH
13571: CALL_OW 69
13575: ST_TO_ADDR
// if not tmp then
13576: LD_VAR 0 2
13580: NOT
13581: IFFALSE 13585
// exit ;
13583: GO 13614
// for i in tmp do
13585: LD_ADDR_VAR 0 1
13589: PUSH
13590: LD_VAR 0 2
13594: PUSH
13595: FOR_IN
13596: IFFALSE 13612
// begin SetLives ( i , 0 ) ;
13598: LD_VAR 0 1
13602: PPUSH
13603: LD_INT 0
13605: PPUSH
13606: CALL_OW 234
// end ;
13610: GO 13595
13612: POP
13613: POP
// end ;
13614: PPOPN 2
13616: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13617: LD_EXP 25
13621: PUSH
13622: LD_EXP 31
13626: AND
13627: IFFALSE 13711
13629: GO 13631
13631: DISABLE
13632: LD_INT 0
13634: PPUSH
13635: PPUSH
// begin enable ;
13636: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13637: LD_ADDR_VAR 0 2
13641: PUSH
13642: LD_INT 22
13644: PUSH
13645: LD_OWVAR 2
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: PUSH
13654: LD_INT 32
13656: PUSH
13657: LD_INT 3
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: PPUSH
13668: CALL_OW 69
13672: ST_TO_ADDR
// if not tmp then
13673: LD_VAR 0 2
13677: NOT
13678: IFFALSE 13682
// exit ;
13680: GO 13711
// for i in tmp do
13682: LD_ADDR_VAR 0 1
13686: PUSH
13687: LD_VAR 0 2
13691: PUSH
13692: FOR_IN
13693: IFFALSE 13709
// begin SetLives ( i , 0 ) ;
13695: LD_VAR 0 1
13699: PPUSH
13700: LD_INT 0
13702: PPUSH
13703: CALL_OW 234
// end ;
13707: GO 13692
13709: POP
13710: POP
// end ;
13711: PPOPN 2
13713: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13714: LD_EXP 25
13718: PUSH
13719: LD_EXP 28
13723: AND
13724: IFFALSE 13817
13726: GO 13728
13728: DISABLE
13729: LD_INT 0
13731: PPUSH
// begin enable ;
13732: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13733: LD_ADDR_VAR 0 1
13737: PUSH
13738: LD_INT 22
13740: PUSH
13741: LD_OWVAR 2
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: LD_INT 25
13755: PUSH
13756: LD_INT 5
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 25
13765: PUSH
13766: LD_INT 9
13768: PUSH
13769: EMPTY
13770: LIST
13771: LIST
13772: PUSH
13773: LD_INT 25
13775: PUSH
13776: LD_INT 8
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PPUSH
13793: CALL_OW 69
13797: PUSH
13798: FOR_IN
13799: IFFALSE 13815
// begin SetClass ( i , 1 ) ;
13801: LD_VAR 0 1
13805: PPUSH
13806: LD_INT 1
13808: PPUSH
13809: CALL_OW 336
// end ;
13813: GO 13798
13815: POP
13816: POP
// end ;
13817: PPOPN 1
13819: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13820: LD_EXP 25
13824: PUSH
13825: LD_EXP 29
13829: AND
13830: PUSH
13831: LD_OWVAR 65
13835: PUSH
13836: LD_INT 7
13838: LESS
13839: AND
13840: IFFALSE 13854
13842: GO 13844
13844: DISABLE
// begin enable ;
13845: ENABLE
// game_speed := 7 ;
13846: LD_ADDR_OWVAR 65
13850: PUSH
13851: LD_INT 7
13853: ST_TO_ADDR
// end ;
13854: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13855: LD_EXP 25
13859: PUSH
13860: LD_EXP 32
13864: AND
13865: IFFALSE 14067
13867: GO 13869
13869: DISABLE
13870: LD_INT 0
13872: PPUSH
13873: PPUSH
13874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13875: LD_ADDR_VAR 0 3
13879: PUSH
13880: LD_INT 81
13882: PUSH
13883: LD_OWVAR 2
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: PUSH
13892: LD_INT 21
13894: PUSH
13895: LD_INT 1
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PPUSH
13906: CALL_OW 69
13910: ST_TO_ADDR
// if not tmp then
13911: LD_VAR 0 3
13915: NOT
13916: IFFALSE 13920
// exit ;
13918: GO 14067
// if tmp > 5 then
13920: LD_VAR 0 3
13924: PUSH
13925: LD_INT 5
13927: GREATER
13928: IFFALSE 13940
// k := 5 else
13930: LD_ADDR_VAR 0 2
13934: PUSH
13935: LD_INT 5
13937: ST_TO_ADDR
13938: GO 13950
// k := tmp ;
13940: LD_ADDR_VAR 0 2
13944: PUSH
13945: LD_VAR 0 3
13949: ST_TO_ADDR
// for i := 1 to k do
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: DOUBLE
13956: LD_INT 1
13958: DEC
13959: ST_TO_ADDR
13960: LD_VAR 0 2
13964: PUSH
13965: FOR_TO
13966: IFFALSE 14065
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13968: LD_VAR 0 3
13972: PUSH
13973: LD_VAR 0 1
13977: ARRAY
13978: PPUSH
13979: LD_VAR 0 1
13983: PUSH
13984: LD_INT 4
13986: MOD
13987: PUSH
13988: LD_INT 1
13990: PLUS
13991: PPUSH
13992: CALL_OW 259
13996: PUSH
13997: LD_INT 10
13999: LESS
14000: IFFALSE 14063
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14002: LD_VAR 0 3
14006: PUSH
14007: LD_VAR 0 1
14011: ARRAY
14012: PPUSH
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 4
14020: MOD
14021: PUSH
14022: LD_INT 1
14024: PLUS
14025: PPUSH
14026: LD_VAR 0 3
14030: PUSH
14031: LD_VAR 0 1
14035: ARRAY
14036: PPUSH
14037: LD_VAR 0 1
14041: PUSH
14042: LD_INT 4
14044: MOD
14045: PUSH
14046: LD_INT 1
14048: PLUS
14049: PPUSH
14050: CALL_OW 259
14054: PUSH
14055: LD_INT 1
14057: PLUS
14058: PPUSH
14059: CALL_OW 237
14063: GO 13965
14065: POP
14066: POP
// end ;
14067: PPOPN 3
14069: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14070: LD_EXP 25
14074: PUSH
14075: LD_EXP 33
14079: AND
14080: IFFALSE 14100
14082: GO 14084
14084: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14085: LD_INT 4
14087: PPUSH
14088: LD_OWVAR 2
14092: PPUSH
14093: LD_INT 0
14095: PPUSH
14096: CALL_OW 324
14100: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14101: LD_EXP 25
14105: PUSH
14106: LD_EXP 62
14110: AND
14111: IFFALSE 14131
14113: GO 14115
14115: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14116: LD_INT 19
14118: PPUSH
14119: LD_OWVAR 2
14123: PPUSH
14124: LD_INT 0
14126: PPUSH
14127: CALL_OW 324
14131: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14132: LD_EXP 25
14136: PUSH
14137: LD_EXP 34
14141: AND
14142: IFFALSE 14244
14144: GO 14146
14146: DISABLE
14147: LD_INT 0
14149: PPUSH
14150: PPUSH
// begin enable ;
14151: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14152: LD_ADDR_VAR 0 2
14156: PUSH
14157: LD_INT 22
14159: PUSH
14160: LD_OWVAR 2
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 34
14174: PUSH
14175: LD_INT 11
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 34
14184: PUSH
14185: LD_INT 30
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PPUSH
14201: CALL_OW 69
14205: ST_TO_ADDR
// if not tmp then
14206: LD_VAR 0 2
14210: NOT
14211: IFFALSE 14215
// exit ;
14213: GO 14244
// for i in tmp do
14215: LD_ADDR_VAR 0 1
14219: PUSH
14220: LD_VAR 0 2
14224: PUSH
14225: FOR_IN
14226: IFFALSE 14242
// begin SetLives ( i , 0 ) ;
14228: LD_VAR 0 1
14232: PPUSH
14233: LD_INT 0
14235: PPUSH
14236: CALL_OW 234
// end ;
14240: GO 14225
14242: POP
14243: POP
// end ;
14244: PPOPN 2
14246: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14247: LD_EXP 25
14251: PUSH
14252: LD_EXP 35
14256: AND
14257: IFFALSE 14277
14259: GO 14261
14261: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14262: LD_INT 32
14264: PPUSH
14265: LD_OWVAR 2
14269: PPUSH
14270: LD_INT 0
14272: PPUSH
14273: CALL_OW 324
14277: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14278: LD_EXP 25
14282: PUSH
14283: LD_EXP 36
14287: AND
14288: IFFALSE 14469
14290: GO 14292
14292: DISABLE
14293: LD_INT 0
14295: PPUSH
14296: PPUSH
14297: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14298: LD_ADDR_VAR 0 2
14302: PUSH
14303: LD_INT 22
14305: PUSH
14306: LD_OWVAR 2
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 33
14317: PUSH
14318: LD_INT 3
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: ST_TO_ADDR
// if not tmp then
14334: LD_VAR 0 2
14338: NOT
14339: IFFALSE 14343
// exit ;
14341: GO 14469
// side := 0 ;
14343: LD_ADDR_VAR 0 3
14347: PUSH
14348: LD_INT 0
14350: ST_TO_ADDR
// for i := 1 to 8 do
14351: LD_ADDR_VAR 0 1
14355: PUSH
14356: DOUBLE
14357: LD_INT 1
14359: DEC
14360: ST_TO_ADDR
14361: LD_INT 8
14363: PUSH
14364: FOR_TO
14365: IFFALSE 14413
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14367: LD_OWVAR 2
14371: PUSH
14372: LD_VAR 0 1
14376: NONEQUAL
14377: PUSH
14378: LD_OWVAR 2
14382: PPUSH
14383: LD_VAR 0 1
14387: PPUSH
14388: CALL_OW 81
14392: PUSH
14393: LD_INT 2
14395: EQUAL
14396: AND
14397: IFFALSE 14411
// begin side := i ;
14399: LD_ADDR_VAR 0 3
14403: PUSH
14404: LD_VAR 0 1
14408: ST_TO_ADDR
// break ;
14409: GO 14413
// end ;
14411: GO 14364
14413: POP
14414: POP
// if not side then
14415: LD_VAR 0 3
14419: NOT
14420: IFFALSE 14424
// exit ;
14422: GO 14469
// for i := 1 to tmp do
14424: LD_ADDR_VAR 0 1
14428: PUSH
14429: DOUBLE
14430: LD_INT 1
14432: DEC
14433: ST_TO_ADDR
14434: LD_VAR 0 2
14438: PUSH
14439: FOR_TO
14440: IFFALSE 14467
// if Prob ( 60 ) then
14442: LD_INT 60
14444: PPUSH
14445: CALL_OW 13
14449: IFFALSE 14465
// SetSide ( i , side ) ;
14451: LD_VAR 0 1
14455: PPUSH
14456: LD_VAR 0 3
14460: PPUSH
14461: CALL_OW 235
14465: GO 14439
14467: POP
14468: POP
// end ;
14469: PPOPN 3
14471: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14472: LD_EXP 25
14476: PUSH
14477: LD_EXP 38
14481: AND
14482: IFFALSE 14601
14484: GO 14486
14486: DISABLE
14487: LD_INT 0
14489: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14490: LD_ADDR_VAR 0 1
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_OWVAR 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 21
14509: PUSH
14510: LD_INT 1
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: LD_INT 3
14519: PUSH
14520: LD_INT 23
14522: PUSH
14523: LD_INT 0
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: LIST
14538: PPUSH
14539: CALL_OW 69
14543: PUSH
14544: FOR_IN
14545: IFFALSE 14599
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14547: LD_VAR 0 1
14551: PPUSH
14552: CALL_OW 257
14556: PUSH
14557: LD_INT 1
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: LD_INT 3
14565: PUSH
14566: LD_INT 4
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: IN
14575: IFFALSE 14597
// SetClass ( un , rand ( 1 , 4 ) ) ;
14577: LD_VAR 0 1
14581: PPUSH
14582: LD_INT 1
14584: PPUSH
14585: LD_INT 4
14587: PPUSH
14588: CALL_OW 12
14592: PPUSH
14593: CALL_OW 336
14597: GO 14544
14599: POP
14600: POP
// end ;
14601: PPOPN 1
14603: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14604: LD_EXP 25
14608: PUSH
14609: LD_EXP 37
14613: AND
14614: IFFALSE 14693
14616: GO 14618
14618: DISABLE
14619: LD_INT 0
14621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: LD_INT 22
14629: PUSH
14630: LD_OWVAR 2
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 21
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PPUSH
14653: CALL_OW 69
14657: ST_TO_ADDR
// if not tmp then
14658: LD_VAR 0 1
14662: NOT
14663: IFFALSE 14667
// exit ;
14665: GO 14693
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14667: LD_VAR 0 1
14671: PUSH
14672: LD_INT 1
14674: PPUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 12
14684: ARRAY
14685: PPUSH
14686: LD_INT 100
14688: PPUSH
14689: CALL_OW 234
// end ;
14693: PPOPN 1
14695: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14696: LD_EXP 25
14700: PUSH
14701: LD_EXP 39
14705: AND
14706: IFFALSE 14804
14708: GO 14710
14710: DISABLE
14711: LD_INT 0
14713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14714: LD_ADDR_VAR 0 1
14718: PUSH
14719: LD_INT 22
14721: PUSH
14722: LD_OWVAR 2
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: LD_INT 21
14733: PUSH
14734: LD_INT 1
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PPUSH
14745: CALL_OW 69
14749: ST_TO_ADDR
// if not tmp then
14750: LD_VAR 0 1
14754: NOT
14755: IFFALSE 14759
// exit ;
14757: GO 14804
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14759: LD_VAR 0 1
14763: PUSH
14764: LD_INT 1
14766: PPUSH
14767: LD_VAR 0 1
14771: PPUSH
14772: CALL_OW 12
14776: ARRAY
14777: PPUSH
14778: LD_INT 1
14780: PPUSH
14781: LD_INT 4
14783: PPUSH
14784: CALL_OW 12
14788: PPUSH
14789: LD_INT 3000
14791: PPUSH
14792: LD_INT 9000
14794: PPUSH
14795: CALL_OW 12
14799: PPUSH
14800: CALL_OW 492
// end ;
14804: PPOPN 1
14806: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14807: LD_EXP 25
14811: PUSH
14812: LD_EXP 40
14816: AND
14817: IFFALSE 14837
14819: GO 14821
14821: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14822: LD_INT 1
14824: PPUSH
14825: LD_OWVAR 2
14829: PPUSH
14830: LD_INT 0
14832: PPUSH
14833: CALL_OW 324
14837: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14838: LD_EXP 25
14842: PUSH
14843: LD_EXP 41
14847: AND
14848: IFFALSE 14931
14850: GO 14852
14852: DISABLE
14853: LD_INT 0
14855: PPUSH
14856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14857: LD_ADDR_VAR 0 2
14861: PUSH
14862: LD_INT 22
14864: PUSH
14865: LD_OWVAR 2
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 21
14876: PUSH
14877: LD_INT 3
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 69
14892: ST_TO_ADDR
// if not tmp then
14893: LD_VAR 0 2
14897: NOT
14898: IFFALSE 14902
// exit ;
14900: GO 14931
// for i in tmp do
14902: LD_ADDR_VAR 0 1
14906: PUSH
14907: LD_VAR 0 2
14911: PUSH
14912: FOR_IN
14913: IFFALSE 14929
// SetBLevel ( i , 10 ) ;
14915: LD_VAR 0 1
14919: PPUSH
14920: LD_INT 10
14922: PPUSH
14923: CALL_OW 241
14927: GO 14912
14929: POP
14930: POP
// end ;
14931: PPOPN 2
14933: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14934: LD_EXP 25
14938: PUSH
14939: LD_EXP 42
14943: AND
14944: IFFALSE 15055
14946: GO 14948
14948: DISABLE
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
14953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14954: LD_ADDR_VAR 0 3
14958: PUSH
14959: LD_INT 22
14961: PUSH
14962: LD_OWVAR 2
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: LD_INT 25
14973: PUSH
14974: LD_INT 1
14976: PUSH
14977: EMPTY
14978: LIST
14979: LIST
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PPUSH
14985: CALL_OW 69
14989: ST_TO_ADDR
// if not tmp then
14990: LD_VAR 0 3
14994: NOT
14995: IFFALSE 14999
// exit ;
14997: GO 15055
// un := tmp [ rand ( 1 , tmp ) ] ;
14999: LD_ADDR_VAR 0 2
15003: PUSH
15004: LD_VAR 0 3
15008: PUSH
15009: LD_INT 1
15011: PPUSH
15012: LD_VAR 0 3
15016: PPUSH
15017: CALL_OW 12
15021: ARRAY
15022: ST_TO_ADDR
// if Crawls ( un ) then
15023: LD_VAR 0 2
15027: PPUSH
15028: CALL_OW 318
15032: IFFALSE 15043
// ComWalk ( un ) ;
15034: LD_VAR 0 2
15038: PPUSH
15039: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15043: LD_VAR 0 2
15047: PPUSH
15048: LD_INT 5
15050: PPUSH
15051: CALL_OW 336
// end ;
15055: PPOPN 3
15057: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15058: LD_EXP 25
15062: PUSH
15063: LD_EXP 43
15067: AND
15068: PUSH
15069: LD_OWVAR 67
15073: PUSH
15074: LD_INT 4
15076: LESS
15077: AND
15078: IFFALSE 15097
15080: GO 15082
15082: DISABLE
// begin Difficulty := Difficulty + 1 ;
15083: LD_ADDR_OWVAR 67
15087: PUSH
15088: LD_OWVAR 67
15092: PUSH
15093: LD_INT 1
15095: PLUS
15096: ST_TO_ADDR
// end ;
15097: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15098: LD_EXP 25
15102: PUSH
15103: LD_EXP 44
15107: AND
15108: IFFALSE 15211
15110: GO 15112
15112: DISABLE
15113: LD_INT 0
15115: PPUSH
// begin for i := 1 to 5 do
15116: LD_ADDR_VAR 0 1
15120: PUSH
15121: DOUBLE
15122: LD_INT 1
15124: DEC
15125: ST_TO_ADDR
15126: LD_INT 5
15128: PUSH
15129: FOR_TO
15130: IFFALSE 15209
// begin uc_nation := nation_nature ;
15132: LD_ADDR_OWVAR 21
15136: PUSH
15137: LD_INT 0
15139: ST_TO_ADDR
// uc_side := 0 ;
15140: LD_ADDR_OWVAR 20
15144: PUSH
15145: LD_INT 0
15147: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15148: LD_ADDR_OWVAR 29
15152: PUSH
15153: LD_INT 12
15155: PUSH
15156: LD_INT 12
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: ST_TO_ADDR
// hc_agressivity := 20 ;
15163: LD_ADDR_OWVAR 35
15167: PUSH
15168: LD_INT 20
15170: ST_TO_ADDR
// hc_class := class_tiger ;
15171: LD_ADDR_OWVAR 28
15175: PUSH
15176: LD_INT 14
15178: ST_TO_ADDR
// hc_gallery :=  ;
15179: LD_ADDR_OWVAR 33
15183: PUSH
15184: LD_STRING 
15186: ST_TO_ADDR
// hc_name :=  ;
15187: LD_ADDR_OWVAR 26
15191: PUSH
15192: LD_STRING 
15194: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15195: CALL_OW 44
15199: PPUSH
15200: LD_INT 0
15202: PPUSH
15203: CALL_OW 51
// end ;
15207: GO 15129
15209: POP
15210: POP
// end ;
15211: PPOPN 1
15213: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15214: LD_EXP 25
15218: PUSH
15219: LD_EXP 45
15223: AND
15224: IFFALSE 15233
15226: GO 15228
15228: DISABLE
// StreamSibBomb ;
15229: CALL 15234 0 0
15233: END
// export function StreamSibBomb ; var i , x , y ; begin
15234: LD_INT 0
15236: PPUSH
15237: PPUSH
15238: PPUSH
15239: PPUSH
// result := false ;
15240: LD_ADDR_VAR 0 1
15244: PUSH
15245: LD_INT 0
15247: ST_TO_ADDR
// for i := 1 to 16 do
15248: LD_ADDR_VAR 0 2
15252: PUSH
15253: DOUBLE
15254: LD_INT 1
15256: DEC
15257: ST_TO_ADDR
15258: LD_INT 16
15260: PUSH
15261: FOR_TO
15262: IFFALSE 15461
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15264: LD_ADDR_VAR 0 3
15268: PUSH
15269: LD_INT 10
15271: PUSH
15272: LD_INT 20
15274: PUSH
15275: LD_INT 30
15277: PUSH
15278: LD_INT 40
15280: PUSH
15281: LD_INT 50
15283: PUSH
15284: LD_INT 60
15286: PUSH
15287: LD_INT 70
15289: PUSH
15290: LD_INT 80
15292: PUSH
15293: LD_INT 90
15295: PUSH
15296: LD_INT 100
15298: PUSH
15299: LD_INT 110
15301: PUSH
15302: LD_INT 120
15304: PUSH
15305: LD_INT 130
15307: PUSH
15308: LD_INT 140
15310: PUSH
15311: LD_INT 150
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: PUSH
15331: LD_INT 1
15333: PPUSH
15334: LD_INT 15
15336: PPUSH
15337: CALL_OW 12
15341: ARRAY
15342: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15343: LD_ADDR_VAR 0 4
15347: PUSH
15348: LD_INT 10
15350: PUSH
15351: LD_INT 20
15353: PUSH
15354: LD_INT 30
15356: PUSH
15357: LD_INT 40
15359: PUSH
15360: LD_INT 50
15362: PUSH
15363: LD_INT 60
15365: PUSH
15366: LD_INT 70
15368: PUSH
15369: LD_INT 80
15371: PUSH
15372: LD_INT 90
15374: PUSH
15375: LD_INT 100
15377: PUSH
15378: LD_INT 110
15380: PUSH
15381: LD_INT 120
15383: PUSH
15384: LD_INT 130
15386: PUSH
15387: LD_INT 140
15389: PUSH
15390: LD_INT 150
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: LIST
15401: LIST
15402: LIST
15403: LIST
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: PUSH
15410: LD_INT 1
15412: PPUSH
15413: LD_INT 15
15415: PPUSH
15416: CALL_OW 12
15420: ARRAY
15421: ST_TO_ADDR
// if ValidHex ( x , y ) then
15422: LD_VAR 0 3
15426: PPUSH
15427: LD_VAR 0 4
15431: PPUSH
15432: CALL_OW 488
15436: IFFALSE 15459
// begin result := [ x , y ] ;
15438: LD_ADDR_VAR 0 1
15442: PUSH
15443: LD_VAR 0 3
15447: PUSH
15448: LD_VAR 0 4
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: ST_TO_ADDR
// break ;
15457: GO 15461
// end ; end ;
15459: GO 15261
15461: POP
15462: POP
// if result then
15463: LD_VAR 0 1
15467: IFFALSE 15527
// begin ToLua ( playSibBomb() ) ;
15469: LD_STRING playSibBomb()
15471: PPUSH
15472: CALL_OW 559
// wait ( 0 0$14 ) ;
15476: LD_INT 490
15478: PPUSH
15479: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15483: LD_VAR 0 1
15487: PUSH
15488: LD_INT 1
15490: ARRAY
15491: PPUSH
15492: LD_VAR 0 1
15496: PUSH
15497: LD_INT 2
15499: ARRAY
15500: PPUSH
15501: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15505: LD_VAR 0 1
15509: PUSH
15510: LD_INT 1
15512: ARRAY
15513: PPUSH
15514: LD_VAR 0 1
15518: PUSH
15519: LD_INT 2
15521: ARRAY
15522: PPUSH
15523: CALL_OW 429
// end ; end ;
15527: LD_VAR 0 1
15531: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15532: LD_EXP 25
15536: PUSH
15537: LD_EXP 47
15541: AND
15542: IFFALSE 15554
15544: GO 15546
15546: DISABLE
// YouLost (  ) ;
15547: LD_STRING 
15549: PPUSH
15550: CALL_OW 104
15554: END
// every 0 0$1 trigger StreamModeActive and sFog do
15555: LD_EXP 25
15559: PUSH
15560: LD_EXP 46
15564: AND
15565: IFFALSE 15579
15567: GO 15569
15569: DISABLE
// FogOff ( your_side ) ;
15570: LD_OWVAR 2
15574: PPUSH
15575: CALL_OW 344
15579: END
// every 0 0$1 trigger StreamModeActive and sSun do
15580: LD_EXP 25
15584: PUSH
15585: LD_EXP 48
15589: AND
15590: IFFALSE 15618
15592: GO 15594
15594: DISABLE
// begin solar_recharge_percent := 0 ;
15595: LD_ADDR_OWVAR 79
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15603: LD_INT 10500
15605: PPUSH
15606: CALL_OW 67
// solar_recharge_percent := 100 ;
15610: LD_ADDR_OWVAR 79
15614: PUSH
15615: LD_INT 100
15617: ST_TO_ADDR
// end ;
15618: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15619: LD_EXP 25
15623: PUSH
15624: LD_EXP 49
15628: AND
15629: IFFALSE 15868
15631: GO 15633
15633: DISABLE
15634: LD_INT 0
15636: PPUSH
15637: PPUSH
15638: PPUSH
// begin tmp := [ ] ;
15639: LD_ADDR_VAR 0 3
15643: PUSH
15644: EMPTY
15645: ST_TO_ADDR
// for i := 1 to 6 do
15646: LD_ADDR_VAR 0 1
15650: PUSH
15651: DOUBLE
15652: LD_INT 1
15654: DEC
15655: ST_TO_ADDR
15656: LD_INT 6
15658: PUSH
15659: FOR_TO
15660: IFFALSE 15765
// begin uc_nation := nation_nature ;
15662: LD_ADDR_OWVAR 21
15666: PUSH
15667: LD_INT 0
15669: ST_TO_ADDR
// uc_side := 0 ;
15670: LD_ADDR_OWVAR 20
15674: PUSH
15675: LD_INT 0
15677: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15678: LD_ADDR_OWVAR 29
15682: PUSH
15683: LD_INT 12
15685: PUSH
15686: LD_INT 12
15688: PUSH
15689: EMPTY
15690: LIST
15691: LIST
15692: ST_TO_ADDR
// hc_agressivity := 20 ;
15693: LD_ADDR_OWVAR 35
15697: PUSH
15698: LD_INT 20
15700: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15701: LD_ADDR_OWVAR 28
15705: PUSH
15706: LD_INT 17
15708: ST_TO_ADDR
// hc_gallery :=  ;
15709: LD_ADDR_OWVAR 33
15713: PUSH
15714: LD_STRING 
15716: ST_TO_ADDR
// hc_name :=  ;
15717: LD_ADDR_OWVAR 26
15721: PUSH
15722: LD_STRING 
15724: ST_TO_ADDR
// un := CreateHuman ;
15725: LD_ADDR_VAR 0 2
15729: PUSH
15730: CALL_OW 44
15734: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15735: LD_VAR 0 2
15739: PPUSH
15740: LD_INT 1
15742: PPUSH
15743: CALL_OW 51
// tmp := tmp ^ un ;
15747: LD_ADDR_VAR 0 3
15751: PUSH
15752: LD_VAR 0 3
15756: PUSH
15757: LD_VAR 0 2
15761: ADD
15762: ST_TO_ADDR
// end ;
15763: GO 15659
15765: POP
15766: POP
// repeat wait ( 0 0$1 ) ;
15767: LD_INT 35
15769: PPUSH
15770: CALL_OW 67
// for un in tmp do
15774: LD_ADDR_VAR 0 2
15778: PUSH
15779: LD_VAR 0 3
15783: PUSH
15784: FOR_IN
15785: IFFALSE 15859
// begin if IsDead ( un ) then
15787: LD_VAR 0 2
15791: PPUSH
15792: CALL_OW 301
15796: IFFALSE 15816
// begin tmp := tmp diff un ;
15798: LD_ADDR_VAR 0 3
15802: PUSH
15803: LD_VAR 0 3
15807: PUSH
15808: LD_VAR 0 2
15812: DIFF
15813: ST_TO_ADDR
// continue ;
15814: GO 15784
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15816: LD_VAR 0 2
15820: PPUSH
15821: LD_INT 3
15823: PUSH
15824: LD_INT 22
15826: PUSH
15827: LD_INT 0
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: PPUSH
15843: LD_VAR 0 2
15847: PPUSH
15848: CALL_OW 74
15852: PPUSH
15853: CALL_OW 115
// end ;
15857: GO 15784
15859: POP
15860: POP
// until not tmp ;
15861: LD_VAR 0 3
15865: NOT
15866: IFFALSE 15767
// end ;
15868: PPOPN 3
15870: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15871: LD_EXP 25
15875: PUSH
15876: LD_EXP 50
15880: AND
15881: IFFALSE 15935
15883: GO 15885
15885: DISABLE
// begin ToLua ( displayTroll(); ) ;
15886: LD_STRING displayTroll();
15888: PPUSH
15889: CALL_OW 559
// wait ( 3 3$00 ) ;
15893: LD_INT 6300
15895: PPUSH
15896: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15900: LD_STRING hideTroll();
15902: PPUSH
15903: CALL_OW 559
// wait ( 1 1$00 ) ;
15907: LD_INT 2100
15909: PPUSH
15910: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15914: LD_STRING displayTroll();
15916: PPUSH
15917: CALL_OW 559
// wait ( 1 1$00 ) ;
15921: LD_INT 2100
15923: PPUSH
15924: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15928: LD_STRING hideTroll();
15930: PPUSH
15931: CALL_OW 559
// end ;
15935: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15936: LD_EXP 25
15940: PUSH
15941: LD_EXP 51
15945: AND
15946: IFFALSE 16009
15948: GO 15950
15950: DISABLE
15951: LD_INT 0
15953: PPUSH
// begin p := 0 ;
15954: LD_ADDR_VAR 0 1
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// repeat game_speed := 1 ;
15962: LD_ADDR_OWVAR 65
15966: PUSH
15967: LD_INT 1
15969: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15970: LD_INT 35
15972: PPUSH
15973: CALL_OW 67
// p := p + 1 ;
15977: LD_ADDR_VAR 0 1
15981: PUSH
15982: LD_VAR 0 1
15986: PUSH
15987: LD_INT 1
15989: PLUS
15990: ST_TO_ADDR
// until p >= 60 ;
15991: LD_VAR 0 1
15995: PUSH
15996: LD_INT 60
15998: GREATEREQUAL
15999: IFFALSE 15962
// game_speed := 4 ;
16001: LD_ADDR_OWVAR 65
16005: PUSH
16006: LD_INT 4
16008: ST_TO_ADDR
// end ;
16009: PPOPN 1
16011: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16012: LD_EXP 25
16016: PUSH
16017: LD_EXP 52
16021: AND
16022: IFFALSE 16168
16024: GO 16026
16026: DISABLE
16027: LD_INT 0
16029: PPUSH
16030: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16031: LD_ADDR_VAR 0 1
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_OWVAR 2
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: PUSH
16048: LD_INT 2
16050: PUSH
16051: LD_INT 30
16053: PUSH
16054: LD_INT 0
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 30
16063: PUSH
16064: LD_INT 1
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: LIST
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PPUSH
16080: CALL_OW 69
16084: ST_TO_ADDR
// if not depot then
16085: LD_VAR 0 1
16089: NOT
16090: IFFALSE 16094
// exit ;
16092: GO 16168
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16094: LD_ADDR_VAR 0 2
16098: PUSH
16099: LD_VAR 0 1
16103: PUSH
16104: LD_INT 1
16106: PPUSH
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 12
16116: ARRAY
16117: PPUSH
16118: CALL_OW 274
16122: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16123: LD_VAR 0 2
16127: PPUSH
16128: LD_INT 1
16130: PPUSH
16131: LD_INT 0
16133: PPUSH
16134: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16138: LD_VAR 0 2
16142: PPUSH
16143: LD_INT 2
16145: PPUSH
16146: LD_INT 0
16148: PPUSH
16149: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16153: LD_VAR 0 2
16157: PPUSH
16158: LD_INT 3
16160: PPUSH
16161: LD_INT 0
16163: PPUSH
16164: CALL_OW 277
// end ;
16168: PPOPN 2
16170: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16171: LD_EXP 25
16175: PUSH
16176: LD_EXP 53
16180: AND
16181: IFFALSE 16278
16183: GO 16185
16185: DISABLE
16186: LD_INT 0
16188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16189: LD_ADDR_VAR 0 1
16193: PUSH
16194: LD_INT 22
16196: PUSH
16197: LD_OWVAR 2
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PUSH
16206: LD_INT 21
16208: PUSH
16209: LD_INT 1
16211: PUSH
16212: EMPTY
16213: LIST
16214: LIST
16215: PUSH
16216: LD_INT 3
16218: PUSH
16219: LD_INT 23
16221: PUSH
16222: LD_INT 0
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: ST_TO_ADDR
// if not tmp then
16243: LD_VAR 0 1
16247: NOT
16248: IFFALSE 16252
// exit ;
16250: GO 16278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16252: LD_VAR 0 1
16256: PUSH
16257: LD_INT 1
16259: PPUSH
16260: LD_VAR 0 1
16264: PPUSH
16265: CALL_OW 12
16269: ARRAY
16270: PPUSH
16271: LD_INT 200
16273: PPUSH
16274: CALL_OW 234
// end ;
16278: PPOPN 1
16280: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16281: LD_EXP 25
16285: PUSH
16286: LD_EXP 54
16290: AND
16291: IFFALSE 16370
16293: GO 16295
16295: DISABLE
16296: LD_INT 0
16298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16299: LD_ADDR_VAR 0 1
16303: PUSH
16304: LD_INT 22
16306: PUSH
16307: LD_OWVAR 2
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 21
16318: PUSH
16319: LD_INT 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PPUSH
16330: CALL_OW 69
16334: ST_TO_ADDR
// if not tmp then
16335: LD_VAR 0 1
16339: NOT
16340: IFFALSE 16344
// exit ;
16342: GO 16370
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16344: LD_VAR 0 1
16348: PUSH
16349: LD_INT 1
16351: PPUSH
16352: LD_VAR 0 1
16356: PPUSH
16357: CALL_OW 12
16361: ARRAY
16362: PPUSH
16363: LD_INT 60
16365: PPUSH
16366: CALL_OW 234
// end ;
16370: PPOPN 1
16372: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16373: LD_EXP 25
16377: PUSH
16378: LD_EXP 55
16382: AND
16383: IFFALSE 16482
16385: GO 16387
16387: DISABLE
16388: LD_INT 0
16390: PPUSH
16391: PPUSH
// begin enable ;
16392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16393: LD_ADDR_VAR 0 1
16397: PUSH
16398: LD_INT 22
16400: PUSH
16401: LD_OWVAR 2
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 61
16412: PUSH
16413: EMPTY
16414: LIST
16415: PUSH
16416: LD_INT 33
16418: PUSH
16419: LD_INT 2
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: PPUSH
16431: CALL_OW 69
16435: ST_TO_ADDR
// if not tmp then
16436: LD_VAR 0 1
16440: NOT
16441: IFFALSE 16445
// exit ;
16443: GO 16482
// for i in tmp do
16445: LD_ADDR_VAR 0 2
16449: PUSH
16450: LD_VAR 0 1
16454: PUSH
16455: FOR_IN
16456: IFFALSE 16480
// if IsControledBy ( i ) then
16458: LD_VAR 0 2
16462: PPUSH
16463: CALL_OW 312
16467: IFFALSE 16478
// ComUnlink ( i ) ;
16469: LD_VAR 0 2
16473: PPUSH
16474: CALL_OW 136
16478: GO 16455
16480: POP
16481: POP
// end ;
16482: PPOPN 2
16484: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16485: LD_EXP 25
16489: PUSH
16490: LD_EXP 56
16494: AND
16495: IFFALSE 16635
16497: GO 16499
16499: DISABLE
16500: LD_INT 0
16502: PPUSH
16503: PPUSH
// begin ToLua ( displayPowell(); ) ;
16504: LD_STRING displayPowell();
16506: PPUSH
16507: CALL_OW 559
// uc_side := 0 ;
16511: LD_ADDR_OWVAR 20
16515: PUSH
16516: LD_INT 0
16518: ST_TO_ADDR
// uc_nation := 2 ;
16519: LD_ADDR_OWVAR 21
16523: PUSH
16524: LD_INT 2
16526: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16527: LD_ADDR_OWVAR 37
16531: PUSH
16532: LD_INT 14
16534: ST_TO_ADDR
// vc_engine := engine_siberite ;
16535: LD_ADDR_OWVAR 39
16539: PUSH
16540: LD_INT 3
16542: ST_TO_ADDR
// vc_control := control_apeman ;
16543: LD_ADDR_OWVAR 38
16547: PUSH
16548: LD_INT 5
16550: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16551: LD_ADDR_OWVAR 40
16555: PUSH
16556: LD_INT 29
16558: ST_TO_ADDR
// un := CreateVehicle ;
16559: LD_ADDR_VAR 0 2
16563: PUSH
16564: CALL_OW 45
16568: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16569: LD_VAR 0 2
16573: PPUSH
16574: LD_INT 1
16576: PPUSH
16577: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16581: LD_INT 35
16583: PPUSH
16584: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16588: LD_VAR 0 2
16592: PPUSH
16593: LD_INT 22
16595: PUSH
16596: LD_OWVAR 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PPUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: CALL_OW 74
16619: PPUSH
16620: CALL_OW 115
// until IsDead ( un ) ;
16624: LD_VAR 0 2
16628: PPUSH
16629: CALL_OW 301
16633: IFFALSE 16581
// end ;
16635: PPOPN 2
16637: END
// every 0 0$1 trigger StreamModeActive and sStu do
16638: LD_EXP 25
16642: PUSH
16643: LD_EXP 64
16647: AND
16648: IFFALSE 16664
16650: GO 16652
16652: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16653: LD_STRING displayStucuk();
16655: PPUSH
16656: CALL_OW 559
// ResetFog ;
16660: CALL_OW 335
// end ;
16664: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16665: LD_EXP 25
16669: PUSH
16670: LD_EXP 57
16674: AND
16675: IFFALSE 16816
16677: GO 16679
16679: DISABLE
16680: LD_INT 0
16682: PPUSH
16683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16684: LD_ADDR_VAR 0 2
16688: PUSH
16689: LD_INT 22
16691: PUSH
16692: LD_OWVAR 2
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PUSH
16701: LD_INT 21
16703: PUSH
16704: LD_INT 1
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 69
16719: ST_TO_ADDR
// if not tmp then
16720: LD_VAR 0 2
16724: NOT
16725: IFFALSE 16729
// exit ;
16727: GO 16816
// un := tmp [ rand ( 1 , tmp ) ] ;
16729: LD_ADDR_VAR 0 1
16733: PUSH
16734: LD_VAR 0 2
16738: PUSH
16739: LD_INT 1
16741: PPUSH
16742: LD_VAR 0 2
16746: PPUSH
16747: CALL_OW 12
16751: ARRAY
16752: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16753: LD_VAR 0 1
16757: PPUSH
16758: LD_INT 0
16760: PPUSH
16761: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16765: LD_VAR 0 1
16769: PPUSH
16770: LD_OWVAR 3
16774: PUSH
16775: LD_VAR 0 1
16779: DIFF
16780: PPUSH
16781: LD_VAR 0 1
16785: PPUSH
16786: CALL_OW 74
16790: PPUSH
16791: CALL_OW 115
// wait ( 0 0$20 ) ;
16795: LD_INT 700
16797: PPUSH
16798: CALL_OW 67
// SetSide ( un , your_side ) ;
16802: LD_VAR 0 1
16806: PPUSH
16807: LD_OWVAR 2
16811: PPUSH
16812: CALL_OW 235
// end ;
16816: PPOPN 2
16818: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16819: LD_EXP 25
16823: PUSH
16824: LD_EXP 58
16828: AND
16829: IFFALSE 16935
16831: GO 16833
16833: DISABLE
16834: LD_INT 0
16836: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16837: LD_ADDR_VAR 0 1
16841: PUSH
16842: LD_INT 22
16844: PUSH
16845: LD_OWVAR 2
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 2
16856: PUSH
16857: LD_INT 30
16859: PUSH
16860: LD_INT 0
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 30
16869: PUSH
16870: LD_INT 1
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: LIST
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PPUSH
16886: CALL_OW 69
16890: ST_TO_ADDR
// if not depot then
16891: LD_VAR 0 1
16895: NOT
16896: IFFALSE 16900
// exit ;
16898: GO 16935
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16900: LD_VAR 0 1
16904: PUSH
16905: LD_INT 1
16907: ARRAY
16908: PPUSH
16909: CALL_OW 250
16913: PPUSH
16914: LD_VAR 0 1
16918: PUSH
16919: LD_INT 1
16921: ARRAY
16922: PPUSH
16923: CALL_OW 251
16927: PPUSH
16928: LD_INT 70
16930: PPUSH
16931: CALL_OW 495
// end ;
16935: PPOPN 1
16937: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16938: LD_EXP 25
16942: PUSH
16943: LD_EXP 59
16947: AND
16948: IFFALSE 17159
16950: GO 16952
16952: DISABLE
16953: LD_INT 0
16955: PPUSH
16956: PPUSH
16957: PPUSH
16958: PPUSH
16959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16960: LD_ADDR_VAR 0 5
16964: PUSH
16965: LD_INT 22
16967: PUSH
16968: LD_OWVAR 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 21
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: PPUSH
16991: CALL_OW 69
16995: ST_TO_ADDR
// if not tmp then
16996: LD_VAR 0 5
17000: NOT
17001: IFFALSE 17005
// exit ;
17003: GO 17159
// for i in tmp do
17005: LD_ADDR_VAR 0 1
17009: PUSH
17010: LD_VAR 0 5
17014: PUSH
17015: FOR_IN
17016: IFFALSE 17157
// begin d := rand ( 0 , 5 ) ;
17018: LD_ADDR_VAR 0 4
17022: PUSH
17023: LD_INT 0
17025: PPUSH
17026: LD_INT 5
17028: PPUSH
17029: CALL_OW 12
17033: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17034: LD_ADDR_VAR 0 2
17038: PUSH
17039: LD_VAR 0 1
17043: PPUSH
17044: CALL_OW 250
17048: PPUSH
17049: LD_VAR 0 4
17053: PPUSH
17054: LD_INT 3
17056: PPUSH
17057: LD_INT 12
17059: PPUSH
17060: CALL_OW 12
17064: PPUSH
17065: CALL_OW 272
17069: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17070: LD_ADDR_VAR 0 3
17074: PUSH
17075: LD_VAR 0 1
17079: PPUSH
17080: CALL_OW 251
17084: PPUSH
17085: LD_VAR 0 4
17089: PPUSH
17090: LD_INT 3
17092: PPUSH
17093: LD_INT 12
17095: PPUSH
17096: CALL_OW 12
17100: PPUSH
17101: CALL_OW 273
17105: ST_TO_ADDR
// if ValidHex ( x , y ) then
17106: LD_VAR 0 2
17110: PPUSH
17111: LD_VAR 0 3
17115: PPUSH
17116: CALL_OW 488
17120: IFFALSE 17155
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17122: LD_VAR 0 1
17126: PPUSH
17127: LD_VAR 0 2
17131: PPUSH
17132: LD_VAR 0 3
17136: PPUSH
17137: LD_INT 3
17139: PPUSH
17140: LD_INT 6
17142: PPUSH
17143: CALL_OW 12
17147: PPUSH
17148: LD_INT 1
17150: PPUSH
17151: CALL_OW 483
// end ;
17155: GO 17015
17157: POP
17158: POP
// end ;
17159: PPOPN 5
17161: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17162: LD_EXP 25
17166: PUSH
17167: LD_EXP 60
17171: AND
17172: IFFALSE 17266
17174: GO 17176
17176: DISABLE
17177: LD_INT 0
17179: PPUSH
17180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17181: LD_ADDR_VAR 0 2
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_OWVAR 2
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 32
17200: PUSH
17201: LD_INT 1
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 21
17210: PUSH
17211: LD_INT 2
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: LIST
17222: PPUSH
17223: CALL_OW 69
17227: ST_TO_ADDR
// if not tmp then
17228: LD_VAR 0 2
17232: NOT
17233: IFFALSE 17237
// exit ;
17235: GO 17266
// for i in tmp do
17237: LD_ADDR_VAR 0 1
17241: PUSH
17242: LD_VAR 0 2
17246: PUSH
17247: FOR_IN
17248: IFFALSE 17264
// SetFuel ( i , 0 ) ;
17250: LD_VAR 0 1
17254: PPUSH
17255: LD_INT 0
17257: PPUSH
17258: CALL_OW 240
17262: GO 17247
17264: POP
17265: POP
// end ;
17266: PPOPN 2
17268: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17269: LD_EXP 25
17273: PUSH
17274: LD_EXP 61
17278: AND
17279: IFFALSE 17345
17281: GO 17283
17283: DISABLE
17284: LD_INT 0
17286: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17287: LD_ADDR_VAR 0 1
17291: PUSH
17292: LD_INT 22
17294: PUSH
17295: LD_OWVAR 2
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 30
17306: PUSH
17307: LD_INT 29
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: ST_TO_ADDR
// if not tmp then
17323: LD_VAR 0 1
17327: NOT
17328: IFFALSE 17332
// exit ;
17330: GO 17345
// DestroyUnit ( tmp [ 1 ] ) ;
17332: LD_VAR 0 1
17336: PUSH
17337: LD_INT 1
17339: ARRAY
17340: PPUSH
17341: CALL_OW 65
// end ;
17345: PPOPN 1
17347: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17348: LD_EXP 25
17352: PUSH
17353: LD_EXP 63
17357: AND
17358: IFFALSE 17487
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
// begin uc_side := 0 ;
17366: LD_ADDR_OWVAR 20
17370: PUSH
17371: LD_INT 0
17373: ST_TO_ADDR
// uc_nation := nation_arabian ;
17374: LD_ADDR_OWVAR 21
17378: PUSH
17379: LD_INT 2
17381: ST_TO_ADDR
// hc_gallery :=  ;
17382: LD_ADDR_OWVAR 33
17386: PUSH
17387: LD_STRING 
17389: ST_TO_ADDR
// hc_name :=  ;
17390: LD_ADDR_OWVAR 26
17394: PUSH
17395: LD_STRING 
17397: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17398: LD_INT 1
17400: PPUSH
17401: LD_INT 11
17403: PPUSH
17404: LD_INT 10
17406: PPUSH
17407: CALL_OW 380
// un := CreateHuman ;
17411: LD_ADDR_VAR 0 1
17415: PUSH
17416: CALL_OW 44
17420: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17421: LD_VAR 0 1
17425: PPUSH
17426: LD_INT 1
17428: PPUSH
17429: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17433: LD_INT 35
17435: PPUSH
17436: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17440: LD_VAR 0 1
17444: PPUSH
17445: LD_INT 22
17447: PUSH
17448: LD_OWVAR 2
17452: PUSH
17453: EMPTY
17454: LIST
17455: LIST
17456: PPUSH
17457: CALL_OW 69
17461: PPUSH
17462: LD_VAR 0 1
17466: PPUSH
17467: CALL_OW 74
17471: PPUSH
17472: CALL_OW 115
// until IsDead ( un ) ;
17476: LD_VAR 0 1
17480: PPUSH
17481: CALL_OW 301
17485: IFFALSE 17433
// end ;
17487: PPOPN 1
17489: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17490: LD_EXP 25
17494: PUSH
17495: LD_EXP 65
17499: AND
17500: IFFALSE 17512
17502: GO 17504
17504: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17505: LD_STRING earthquake(getX(game), 0, 32)
17507: PPUSH
17508: CALL_OW 559
17512: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17513: LD_EXP 25
17517: PUSH
17518: LD_EXP 66
17522: AND
17523: IFFALSE 17614
17525: GO 17527
17527: DISABLE
17528: LD_INT 0
17530: PPUSH
// begin enable ;
17531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17532: LD_ADDR_VAR 0 1
17536: PUSH
17537: LD_INT 22
17539: PUSH
17540: LD_OWVAR 2
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: PUSH
17549: LD_INT 21
17551: PUSH
17552: LD_INT 2
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PUSH
17559: LD_INT 33
17561: PUSH
17562: LD_INT 3
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: PPUSH
17574: CALL_OW 69
17578: ST_TO_ADDR
// if not tmp then
17579: LD_VAR 0 1
17583: NOT
17584: IFFALSE 17588
// exit ;
17586: GO 17614
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17588: LD_VAR 0 1
17592: PUSH
17593: LD_INT 1
17595: PPUSH
17596: LD_VAR 0 1
17600: PPUSH
17601: CALL_OW 12
17605: ARRAY
17606: PPUSH
17607: LD_INT 1
17609: PPUSH
17610: CALL_OW 234
// end ;
17614: PPOPN 1
17616: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17617: LD_EXP 25
17621: PUSH
17622: LD_EXP 67
17626: AND
17627: IFFALSE 17768
17629: GO 17631
17631: DISABLE
17632: LD_INT 0
17634: PPUSH
17635: PPUSH
17636: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17637: LD_ADDR_VAR 0 3
17641: PUSH
17642: LD_INT 22
17644: PUSH
17645: LD_OWVAR 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 25
17656: PUSH
17657: LD_INT 1
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: PPUSH
17668: CALL_OW 69
17672: ST_TO_ADDR
// if not tmp then
17673: LD_VAR 0 3
17677: NOT
17678: IFFALSE 17682
// exit ;
17680: GO 17768
// un := tmp [ rand ( 1 , tmp ) ] ;
17682: LD_ADDR_VAR 0 2
17686: PUSH
17687: LD_VAR 0 3
17691: PUSH
17692: LD_INT 1
17694: PPUSH
17695: LD_VAR 0 3
17699: PPUSH
17700: CALL_OW 12
17704: ARRAY
17705: ST_TO_ADDR
// if Crawls ( un ) then
17706: LD_VAR 0 2
17710: PPUSH
17711: CALL_OW 318
17715: IFFALSE 17726
// ComWalk ( un ) ;
17717: LD_VAR 0 2
17721: PPUSH
17722: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17726: LD_VAR 0 2
17730: PPUSH
17731: LD_INT 9
17733: PPUSH
17734: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17738: LD_INT 28
17740: PPUSH
17741: LD_OWVAR 2
17745: PPUSH
17746: LD_INT 2
17748: PPUSH
17749: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17753: LD_INT 29
17755: PPUSH
17756: LD_OWVAR 2
17760: PPUSH
17761: LD_INT 2
17763: PPUSH
17764: CALL_OW 322
// end ;
17768: PPOPN 3
17770: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17771: LD_EXP 25
17775: PUSH
17776: LD_EXP 68
17780: AND
17781: IFFALSE 17892
17783: GO 17785
17785: DISABLE
17786: LD_INT 0
17788: PPUSH
17789: PPUSH
17790: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17791: LD_ADDR_VAR 0 3
17795: PUSH
17796: LD_INT 22
17798: PUSH
17799: LD_OWVAR 2
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 25
17810: PUSH
17811: LD_INT 1
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PPUSH
17822: CALL_OW 69
17826: ST_TO_ADDR
// if not tmp then
17827: LD_VAR 0 3
17831: NOT
17832: IFFALSE 17836
// exit ;
17834: GO 17892
// un := tmp [ rand ( 1 , tmp ) ] ;
17836: LD_ADDR_VAR 0 2
17840: PUSH
17841: LD_VAR 0 3
17845: PUSH
17846: LD_INT 1
17848: PPUSH
17849: LD_VAR 0 3
17853: PPUSH
17854: CALL_OW 12
17858: ARRAY
17859: ST_TO_ADDR
// if Crawls ( un ) then
17860: LD_VAR 0 2
17864: PPUSH
17865: CALL_OW 318
17869: IFFALSE 17880
// ComWalk ( un ) ;
17871: LD_VAR 0 2
17875: PPUSH
17876: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17880: LD_VAR 0 2
17884: PPUSH
17885: LD_INT 8
17887: PPUSH
17888: CALL_OW 336
// end ;
17892: PPOPN 3
17894: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17895: LD_EXP 25
17899: PUSH
17900: LD_EXP 69
17904: AND
17905: IFFALSE 18049
17907: GO 17909
17909: DISABLE
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17914: LD_ADDR_VAR 0 2
17918: PUSH
17919: LD_INT 22
17921: PUSH
17922: LD_OWVAR 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: LD_INT 21
17933: PUSH
17934: LD_INT 2
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 2
17943: PUSH
17944: LD_INT 34
17946: PUSH
17947: LD_INT 12
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 34
17956: PUSH
17957: LD_INT 51
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PUSH
17964: LD_INT 34
17966: PUSH
17967: LD_INT 32
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: PPUSH
17985: CALL_OW 69
17989: ST_TO_ADDR
// if not tmp then
17990: LD_VAR 0 2
17994: NOT
17995: IFFALSE 17999
// exit ;
17997: GO 18049
// for i in tmp do
17999: LD_ADDR_VAR 0 1
18003: PUSH
18004: LD_VAR 0 2
18008: PUSH
18009: FOR_IN
18010: IFFALSE 18047
// if GetCargo ( i , mat_artifact ) = 0 then
18012: LD_VAR 0 1
18016: PPUSH
18017: LD_INT 4
18019: PPUSH
18020: CALL_OW 289
18024: PUSH
18025: LD_INT 0
18027: EQUAL
18028: IFFALSE 18045
// SetCargo ( i , mat_siberit , 100 ) ;
18030: LD_VAR 0 1
18034: PPUSH
18035: LD_INT 3
18037: PPUSH
18038: LD_INT 100
18040: PPUSH
18041: CALL_OW 290
18045: GO 18009
18047: POP
18048: POP
// end ;
18049: PPOPN 2
18051: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18052: LD_EXP 25
18056: PUSH
18057: LD_EXP 70
18061: AND
18062: IFFALSE 18245
18064: GO 18066
18066: DISABLE
18067: LD_INT 0
18069: PPUSH
18070: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18071: LD_ADDR_VAR 0 2
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_OWVAR 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PPUSH
18088: CALL_OW 69
18092: ST_TO_ADDR
// if not tmp then
18093: LD_VAR 0 2
18097: NOT
18098: IFFALSE 18102
// exit ;
18100: GO 18245
// for i := 1 to 2 do
18102: LD_ADDR_VAR 0 1
18106: PUSH
18107: DOUBLE
18108: LD_INT 1
18110: DEC
18111: ST_TO_ADDR
18112: LD_INT 2
18114: PUSH
18115: FOR_TO
18116: IFFALSE 18243
// begin uc_side := your_side ;
18118: LD_ADDR_OWVAR 20
18122: PUSH
18123: LD_OWVAR 2
18127: ST_TO_ADDR
// uc_nation := nation_american ;
18128: LD_ADDR_OWVAR 21
18132: PUSH
18133: LD_INT 1
18135: ST_TO_ADDR
// vc_chassis := us_morphling ;
18136: LD_ADDR_OWVAR 37
18140: PUSH
18141: LD_INT 5
18143: ST_TO_ADDR
// vc_engine := engine_siberite ;
18144: LD_ADDR_OWVAR 39
18148: PUSH
18149: LD_INT 3
18151: ST_TO_ADDR
// vc_control := control_computer ;
18152: LD_ADDR_OWVAR 38
18156: PUSH
18157: LD_INT 3
18159: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18160: LD_ADDR_OWVAR 40
18164: PUSH
18165: LD_INT 10
18167: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18168: LD_VAR 0 2
18172: PUSH
18173: LD_INT 1
18175: ARRAY
18176: PPUSH
18177: CALL_OW 310
18181: NOT
18182: IFFALSE 18229
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18184: CALL_OW 45
18188: PPUSH
18189: LD_VAR 0 2
18193: PUSH
18194: LD_INT 1
18196: ARRAY
18197: PPUSH
18198: CALL_OW 250
18202: PPUSH
18203: LD_VAR 0 2
18207: PUSH
18208: LD_INT 1
18210: ARRAY
18211: PPUSH
18212: CALL_OW 251
18216: PPUSH
18217: LD_INT 12
18219: PPUSH
18220: LD_INT 1
18222: PPUSH
18223: CALL_OW 50
18227: GO 18241
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18229: CALL_OW 45
18233: PPUSH
18234: LD_INT 1
18236: PPUSH
18237: CALL_OW 51
// end ;
18241: GO 18115
18243: POP
18244: POP
// end ;
18245: PPOPN 2
18247: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18248: LD_EXP 25
18252: PUSH
18253: LD_EXP 71
18257: AND
18258: IFFALSE 18480
18260: GO 18262
18262: DISABLE
18263: LD_INT 0
18265: PPUSH
18266: PPUSH
18267: PPUSH
18268: PPUSH
18269: PPUSH
18270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18271: LD_ADDR_VAR 0 6
18275: PUSH
18276: LD_INT 22
18278: PUSH
18279: LD_OWVAR 2
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: PUSH
18288: LD_INT 21
18290: PUSH
18291: LD_INT 1
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 3
18300: PUSH
18301: LD_INT 23
18303: PUSH
18304: LD_INT 0
18306: PUSH
18307: EMPTY
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: LIST
18319: PPUSH
18320: CALL_OW 69
18324: ST_TO_ADDR
// if not tmp then
18325: LD_VAR 0 6
18329: NOT
18330: IFFALSE 18334
// exit ;
18332: GO 18480
// s1 := rand ( 1 , 4 ) ;
18334: LD_ADDR_VAR 0 2
18338: PUSH
18339: LD_INT 1
18341: PPUSH
18342: LD_INT 4
18344: PPUSH
18345: CALL_OW 12
18349: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18350: LD_ADDR_VAR 0 4
18354: PUSH
18355: LD_VAR 0 6
18359: PUSH
18360: LD_INT 1
18362: ARRAY
18363: PPUSH
18364: LD_VAR 0 2
18368: PPUSH
18369: CALL_OW 259
18373: ST_TO_ADDR
// if s1 = 1 then
18374: LD_VAR 0 2
18378: PUSH
18379: LD_INT 1
18381: EQUAL
18382: IFFALSE 18402
// s2 := rand ( 2 , 4 ) else
18384: LD_ADDR_VAR 0 3
18388: PUSH
18389: LD_INT 2
18391: PPUSH
18392: LD_INT 4
18394: PPUSH
18395: CALL_OW 12
18399: ST_TO_ADDR
18400: GO 18410
// s2 := 1 ;
18402: LD_ADDR_VAR 0 3
18406: PUSH
18407: LD_INT 1
18409: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18410: LD_ADDR_VAR 0 5
18414: PUSH
18415: LD_VAR 0 6
18419: PUSH
18420: LD_INT 1
18422: ARRAY
18423: PPUSH
18424: LD_VAR 0 3
18428: PPUSH
18429: CALL_OW 259
18433: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18434: LD_VAR 0 6
18438: PUSH
18439: LD_INT 1
18441: ARRAY
18442: PPUSH
18443: LD_VAR 0 2
18447: PPUSH
18448: LD_VAR 0 5
18452: PPUSH
18453: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18457: LD_VAR 0 6
18461: PUSH
18462: LD_INT 1
18464: ARRAY
18465: PPUSH
18466: LD_VAR 0 3
18470: PPUSH
18471: LD_VAR 0 4
18475: PPUSH
18476: CALL_OW 237
// end ;
18480: PPOPN 6
18482: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18483: LD_EXP 25
18487: PUSH
18488: LD_EXP 72
18492: AND
18493: IFFALSE 18572
18495: GO 18497
18497: DISABLE
18498: LD_INT 0
18500: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18501: LD_ADDR_VAR 0 1
18505: PUSH
18506: LD_INT 22
18508: PUSH
18509: LD_OWVAR 2
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: LD_INT 30
18520: PUSH
18521: LD_INT 3
18523: PUSH
18524: EMPTY
18525: LIST
18526: LIST
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PPUSH
18532: CALL_OW 69
18536: ST_TO_ADDR
// if not tmp then
18537: LD_VAR 0 1
18541: NOT
18542: IFFALSE 18546
// exit ;
18544: GO 18572
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18546: LD_VAR 0 1
18550: PUSH
18551: LD_INT 1
18553: PPUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 12
18563: ARRAY
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 234
// end ;
18572: PPOPN 1
18574: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18575: LD_EXP 25
18579: PUSH
18580: LD_EXP 73
18584: AND
18585: IFFALSE 18697
18587: GO 18589
18589: DISABLE
18590: LD_INT 0
18592: PPUSH
18593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18594: LD_ADDR_VAR 0 2
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_OWVAR 2
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 2
18613: PUSH
18614: LD_INT 30
18616: PUSH
18617: LD_INT 27
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 30
18626: PUSH
18627: LD_INT 26
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 30
18636: PUSH
18637: LD_INT 28
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PPUSH
18654: CALL_OW 69
18658: ST_TO_ADDR
// if not tmp then
18659: LD_VAR 0 2
18663: NOT
18664: IFFALSE 18668
// exit ;
18666: GO 18697
// for i in tmp do
18668: LD_ADDR_VAR 0 1
18672: PUSH
18673: LD_VAR 0 2
18677: PUSH
18678: FOR_IN
18679: IFFALSE 18695
// SetLives ( i , 1 ) ;
18681: LD_VAR 0 1
18685: PPUSH
18686: LD_INT 1
18688: PPUSH
18689: CALL_OW 234
18693: GO 18678
18695: POP
18696: POP
// end ;
18697: PPOPN 2
18699: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18700: LD_EXP 25
18704: PUSH
18705: LD_EXP 74
18709: AND
18710: IFFALSE 18997
18712: GO 18714
18714: DISABLE
18715: LD_INT 0
18717: PPUSH
18718: PPUSH
18719: PPUSH
// begin i := rand ( 1 , 7 ) ;
18720: LD_ADDR_VAR 0 1
18724: PUSH
18725: LD_INT 1
18727: PPUSH
18728: LD_INT 7
18730: PPUSH
18731: CALL_OW 12
18735: ST_TO_ADDR
// case i of 1 :
18736: LD_VAR 0 1
18740: PUSH
18741: LD_INT 1
18743: DOUBLE
18744: EQUAL
18745: IFTRUE 18749
18747: GO 18759
18749: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18750: LD_STRING earthquake(getX(game), 0, 32)
18752: PPUSH
18753: CALL_OW 559
18757: GO 18997
18759: LD_INT 2
18761: DOUBLE
18762: EQUAL
18763: IFTRUE 18767
18765: GO 18781
18767: POP
// begin ToLua ( displayStucuk(); ) ;
18768: LD_STRING displayStucuk();
18770: PPUSH
18771: CALL_OW 559
// ResetFog ;
18775: CALL_OW 335
// end ; 3 :
18779: GO 18997
18781: LD_INT 3
18783: DOUBLE
18784: EQUAL
18785: IFTRUE 18789
18787: GO 18893
18789: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18790: LD_ADDR_VAR 0 2
18794: PUSH
18795: LD_INT 22
18797: PUSH
18798: LD_OWVAR 2
18802: PUSH
18803: EMPTY
18804: LIST
18805: LIST
18806: PUSH
18807: LD_INT 25
18809: PUSH
18810: LD_INT 1
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PPUSH
18821: CALL_OW 69
18825: ST_TO_ADDR
// if not tmp then
18826: LD_VAR 0 2
18830: NOT
18831: IFFALSE 18835
// exit ;
18833: GO 18997
// un := tmp [ rand ( 1 , tmp ) ] ;
18835: LD_ADDR_VAR 0 3
18839: PUSH
18840: LD_VAR 0 2
18844: PUSH
18845: LD_INT 1
18847: PPUSH
18848: LD_VAR 0 2
18852: PPUSH
18853: CALL_OW 12
18857: ARRAY
18858: ST_TO_ADDR
// if Crawls ( un ) then
18859: LD_VAR 0 3
18863: PPUSH
18864: CALL_OW 318
18868: IFFALSE 18879
// ComWalk ( un ) ;
18870: LD_VAR 0 3
18874: PPUSH
18875: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18879: LD_VAR 0 3
18883: PPUSH
18884: LD_INT 8
18886: PPUSH
18887: CALL_OW 336
// end ; 4 :
18891: GO 18997
18893: LD_INT 4
18895: DOUBLE
18896: EQUAL
18897: IFTRUE 18901
18899: GO 18975
18901: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18902: LD_ADDR_VAR 0 2
18906: PUSH
18907: LD_INT 22
18909: PUSH
18910: LD_OWVAR 2
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PUSH
18919: LD_INT 30
18921: PUSH
18922: LD_INT 29
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PPUSH
18933: CALL_OW 69
18937: ST_TO_ADDR
// if not tmp then
18938: LD_VAR 0 2
18942: NOT
18943: IFFALSE 18947
// exit ;
18945: GO 18997
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18947: LD_VAR 0 2
18951: PUSH
18952: LD_INT 1
18954: ARRAY
18955: PPUSH
18956: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18960: LD_VAR 0 2
18964: PUSH
18965: LD_INT 1
18967: ARRAY
18968: PPUSH
18969: CALL_OW 65
// end ; 5 .. 7 :
18973: GO 18997
18975: LD_INT 5
18977: DOUBLE
18978: GREATEREQUAL
18979: IFFALSE 18987
18981: LD_INT 7
18983: DOUBLE
18984: LESSEQUAL
18985: IFTRUE 18989
18987: GO 18996
18989: POP
// StreamSibBomb ; end ;
18990: CALL 15234 0 0
18994: GO 18997
18996: POP
// end ;
18997: PPOPN 3
18999: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19000: LD_EXP 25
19004: PUSH
19005: LD_EXP 75
19009: AND
19010: IFFALSE 19166
19012: GO 19014
19014: DISABLE
19015: LD_INT 0
19017: PPUSH
19018: PPUSH
19019: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19020: LD_ADDR_VAR 0 2
19024: PUSH
19025: LD_INT 81
19027: PUSH
19028: LD_OWVAR 2
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 2
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 21
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: PUSH
19065: EMPTY
19066: LIST
19067: LIST
19068: PPUSH
19069: CALL_OW 69
19073: ST_TO_ADDR
// if not tmp then
19074: LD_VAR 0 2
19078: NOT
19079: IFFALSE 19083
// exit ;
19081: GO 19166
// p := 0 ;
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_INT 0
19090: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19091: LD_INT 35
19093: PPUSH
19094: CALL_OW 67
// p := p + 1 ;
19098: LD_ADDR_VAR 0 3
19102: PUSH
19103: LD_VAR 0 3
19107: PUSH
19108: LD_INT 1
19110: PLUS
19111: ST_TO_ADDR
// for i in tmp do
19112: LD_ADDR_VAR 0 1
19116: PUSH
19117: LD_VAR 0 2
19121: PUSH
19122: FOR_IN
19123: IFFALSE 19154
// if GetLives ( i ) < 1000 then
19125: LD_VAR 0 1
19129: PPUSH
19130: CALL_OW 256
19134: PUSH
19135: LD_INT 1000
19137: LESS
19138: IFFALSE 19152
// SetLives ( i , 1000 ) ;
19140: LD_VAR 0 1
19144: PPUSH
19145: LD_INT 1000
19147: PPUSH
19148: CALL_OW 234
19152: GO 19122
19154: POP
19155: POP
// until p > 20 ;
19156: LD_VAR 0 3
19160: PUSH
19161: LD_INT 20
19163: GREATER
19164: IFFALSE 19091
// end ;
19166: PPOPN 3
19168: END
// every 0 0$1 trigger StreamModeActive and sTime do
19169: LD_EXP 25
19173: PUSH
19174: LD_EXP 76
19178: AND
19179: IFFALSE 19214
19181: GO 19183
19183: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19184: LD_INT 28
19186: PPUSH
19187: LD_OWVAR 2
19191: PPUSH
19192: LD_INT 2
19194: PPUSH
19195: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19199: LD_INT 30
19201: PPUSH
19202: LD_OWVAR 2
19206: PPUSH
19207: LD_INT 2
19209: PPUSH
19210: CALL_OW 322
// end ;
19214: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19215: LD_EXP 25
19219: PUSH
19220: LD_EXP 77
19224: AND
19225: IFFALSE 19346
19227: GO 19229
19229: DISABLE
19230: LD_INT 0
19232: PPUSH
19233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19234: LD_ADDR_VAR 0 2
19238: PUSH
19239: LD_INT 22
19241: PUSH
19242: LD_OWVAR 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 21
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 3
19263: PUSH
19264: LD_INT 23
19266: PUSH
19267: LD_INT 0
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 69
19287: ST_TO_ADDR
// if not tmp then
19288: LD_VAR 0 2
19292: NOT
19293: IFFALSE 19297
// exit ;
19295: GO 19346
// for i in tmp do
19297: LD_ADDR_VAR 0 1
19301: PUSH
19302: LD_VAR 0 2
19306: PUSH
19307: FOR_IN
19308: IFFALSE 19344
// begin if Crawls ( i ) then
19310: LD_VAR 0 1
19314: PPUSH
19315: CALL_OW 318
19319: IFFALSE 19330
// ComWalk ( i ) ;
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 138
// SetClass ( i , 2 ) ;
19330: LD_VAR 0 1
19334: PPUSH
19335: LD_INT 2
19337: PPUSH
19338: CALL_OW 336
// end ;
19342: GO 19307
19344: POP
19345: POP
// end ;
19346: PPOPN 2
19348: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19349: LD_EXP 25
19353: PUSH
19354: LD_EXP 78
19358: AND
19359: IFFALSE 19647
19361: GO 19363
19363: DISABLE
19364: LD_INT 0
19366: PPUSH
19367: PPUSH
19368: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19369: LD_OWVAR 2
19373: PPUSH
19374: LD_INT 9
19376: PPUSH
19377: LD_INT 1
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19387: LD_INT 9
19389: PPUSH
19390: LD_OWVAR 2
19394: PPUSH
19395: CALL_OW 343
// uc_side := 9 ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_INT 9
19406: ST_TO_ADDR
// uc_nation := 2 ;
19407: LD_ADDR_OWVAR 21
19411: PUSH
19412: LD_INT 2
19414: ST_TO_ADDR
// hc_name := Dark Warrior ;
19415: LD_ADDR_OWVAR 26
19419: PUSH
19420: LD_STRING Dark Warrior
19422: ST_TO_ADDR
// hc_gallery :=  ;
19423: LD_ADDR_OWVAR 33
19427: PUSH
19428: LD_STRING 
19430: ST_TO_ADDR
// hc_noskilllimit := true ;
19431: LD_ADDR_OWVAR 76
19435: PUSH
19436: LD_INT 1
19438: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19439: LD_ADDR_OWVAR 31
19443: PUSH
19444: LD_INT 30
19446: PUSH
19447: LD_INT 30
19449: PUSH
19450: LD_INT 30
19452: PUSH
19453: LD_INT 30
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: ST_TO_ADDR
// un := CreateHuman ;
19462: LD_ADDR_VAR 0 3
19466: PUSH
19467: CALL_OW 44
19471: ST_TO_ADDR
// hc_noskilllimit := false ;
19472: LD_ADDR_OWVAR 76
19476: PUSH
19477: LD_INT 0
19479: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19480: LD_VAR 0 3
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: CALL_OW 51
// ToLua ( playRanger() ) ;
19492: LD_STRING playRanger()
19494: PPUSH
19495: CALL_OW 559
// p := 0 ;
19499: LD_ADDR_VAR 0 2
19503: PUSH
19504: LD_INT 0
19506: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19507: LD_INT 35
19509: PPUSH
19510: CALL_OW 67
// p := p + 1 ;
19514: LD_ADDR_VAR 0 2
19518: PUSH
19519: LD_VAR 0 2
19523: PUSH
19524: LD_INT 1
19526: PLUS
19527: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19528: LD_VAR 0 3
19532: PPUSH
19533: CALL_OW 256
19537: PUSH
19538: LD_INT 1000
19540: LESS
19541: IFFALSE 19555
// SetLives ( un , 1000 ) ;
19543: LD_VAR 0 3
19547: PPUSH
19548: LD_INT 1000
19550: PPUSH
19551: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19555: LD_VAR 0 3
19559: PPUSH
19560: LD_INT 81
19562: PUSH
19563: LD_OWVAR 2
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 91
19574: PUSH
19575: LD_VAR 0 3
19579: PUSH
19580: LD_INT 30
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: CALL_OW 69
19596: PPUSH
19597: LD_VAR 0 3
19601: PPUSH
19602: CALL_OW 74
19606: PPUSH
19607: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19611: LD_VAR 0 2
19615: PUSH
19616: LD_INT 80
19618: GREATER
19619: PUSH
19620: LD_VAR 0 3
19624: PPUSH
19625: CALL_OW 301
19629: OR
19630: IFFALSE 19507
// if un then
19632: LD_VAR 0 3
19636: IFFALSE 19647
// RemoveUnit ( un ) ;
19638: LD_VAR 0 3
19642: PPUSH
19643: CALL_OW 64
// end ;
19647: PPOPN 3
19649: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19650: LD_EXP 79
19654: IFFALSE 19770
19656: GO 19658
19658: DISABLE
19659: LD_INT 0
19661: PPUSH
19662: PPUSH
19663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: LD_INT 81
19671: PUSH
19672: LD_OWVAR 2
19676: PUSH
19677: EMPTY
19678: LIST
19679: LIST
19680: PUSH
19681: LD_INT 21
19683: PUSH
19684: LD_INT 1
19686: PUSH
19687: EMPTY
19688: LIST
19689: LIST
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19700: LD_STRING playComputer()
19702: PPUSH
19703: CALL_OW 559
// if not tmp then
19707: LD_VAR 0 2
19711: NOT
19712: IFFALSE 19716
// exit ;
19714: GO 19770
// for i in tmp do
19716: LD_ADDR_VAR 0 1
19720: PUSH
19721: LD_VAR 0 2
19725: PUSH
19726: FOR_IN
19727: IFFALSE 19768
// for j := 1 to 4 do
19729: LD_ADDR_VAR 0 3
19733: PUSH
19734: DOUBLE
19735: LD_INT 1
19737: DEC
19738: ST_TO_ADDR
19739: LD_INT 4
19741: PUSH
19742: FOR_TO
19743: IFFALSE 19764
// SetSkill ( i , j , 10 ) ;
19745: LD_VAR 0 1
19749: PPUSH
19750: LD_VAR 0 3
19754: PPUSH
19755: LD_INT 10
19757: PPUSH
19758: CALL_OW 237
19762: GO 19742
19764: POP
19765: POP
19766: GO 19726
19768: POP
19769: POP
// end ;
19770: PPOPN 3
19772: END
// every 0 0$1 trigger s30 do var i , tmp ;
19773: LD_EXP 80
19777: IFFALSE 19846
19779: GO 19781
19781: DISABLE
19782: LD_INT 0
19784: PPUSH
19785: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19786: LD_ADDR_VAR 0 2
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_OWVAR 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 69
19807: ST_TO_ADDR
// if not tmp then
19808: LD_VAR 0 2
19812: NOT
19813: IFFALSE 19817
// exit ;
19815: GO 19846
// for i in tmp do
19817: LD_ADDR_VAR 0 1
19821: PUSH
19822: LD_VAR 0 2
19826: PUSH
19827: FOR_IN
19828: IFFALSE 19844
// SetLives ( i , 300 ) ;
19830: LD_VAR 0 1
19834: PPUSH
19835: LD_INT 300
19837: PPUSH
19838: CALL_OW 234
19842: GO 19827
19844: POP
19845: POP
// end ;
19846: PPOPN 2
19848: END
// every 0 0$1 trigger s60 do var i , tmp ;
19849: LD_EXP 81
19853: IFFALSE 19922
19855: GO 19857
19857: DISABLE
19858: LD_INT 0
19860: PPUSH
19861: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19862: LD_ADDR_VAR 0 2
19866: PUSH
19867: LD_INT 22
19869: PUSH
19870: LD_OWVAR 2
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PPUSH
19879: CALL_OW 69
19883: ST_TO_ADDR
// if not tmp then
19884: LD_VAR 0 2
19888: NOT
19889: IFFALSE 19893
// exit ;
19891: GO 19922
// for i in tmp do
19893: LD_ADDR_VAR 0 1
19897: PUSH
19898: LD_VAR 0 2
19902: PUSH
19903: FOR_IN
19904: IFFALSE 19920
// SetLives ( i , 600 ) ;
19906: LD_VAR 0 1
19910: PPUSH
19911: LD_INT 600
19913: PPUSH
19914: CALL_OW 234
19918: GO 19903
19920: POP
19921: POP
// end ;
19922: PPOPN 2
19924: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19925: LD_INT 0
19927: PPUSH
// case cmd of 301 :
19928: LD_VAR 0 1
19932: PUSH
19933: LD_INT 301
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19973
19941: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19942: LD_VAR 0 6
19946: PPUSH
19947: LD_VAR 0 7
19951: PPUSH
19952: LD_VAR 0 8
19956: PPUSH
19957: LD_VAR 0 4
19961: PPUSH
19962: LD_VAR 0 5
19966: PPUSH
19967: CALL 21182 0 5
19971: GO 20094
19973: LD_INT 302
19975: DOUBLE
19976: EQUAL
19977: IFTRUE 19981
19979: GO 20018
19981: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19982: LD_VAR 0 6
19986: PPUSH
19987: LD_VAR 0 7
19991: PPUSH
19992: LD_VAR 0 8
19996: PPUSH
19997: LD_VAR 0 9
20001: PPUSH
20002: LD_VAR 0 4
20006: PPUSH
20007: LD_VAR 0 5
20011: PPUSH
20012: CALL 21273 0 6
20016: GO 20094
20018: LD_INT 303
20020: DOUBLE
20021: EQUAL
20022: IFTRUE 20026
20024: GO 20063
20026: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20027: LD_VAR 0 6
20031: PPUSH
20032: LD_VAR 0 7
20036: PPUSH
20037: LD_VAR 0 8
20041: PPUSH
20042: LD_VAR 0 9
20046: PPUSH
20047: LD_VAR 0 4
20051: PPUSH
20052: LD_VAR 0 5
20056: PPUSH
20057: CALL 20099 0 6
20061: GO 20094
20063: LD_INT 304
20065: DOUBLE
20066: EQUAL
20067: IFTRUE 20071
20069: GO 20093
20071: POP
// hHackTeleport ( unit , x , y ) ; end ;
20072: LD_VAR 0 2
20076: PPUSH
20077: LD_VAR 0 4
20081: PPUSH
20082: LD_VAR 0 5
20086: PPUSH
20087: CALL 21866 0 3
20091: GO 20094
20093: POP
// end ;
20094: LD_VAR 0 12
20098: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20103: LD_VAR 0 1
20107: PUSH
20108: LD_INT 1
20110: LESS
20111: PUSH
20112: LD_VAR 0 1
20116: PUSH
20117: LD_INT 3
20119: GREATER
20120: OR
20121: PUSH
20122: LD_VAR 0 5
20126: PPUSH
20127: LD_VAR 0 6
20131: PPUSH
20132: CALL_OW 428
20136: OR
20137: IFFALSE 20141
// exit ;
20139: GO 20869
// uc_side := your_side ;
20141: LD_ADDR_OWVAR 20
20145: PUSH
20146: LD_OWVAR 2
20150: ST_TO_ADDR
// uc_nation := nation ;
20151: LD_ADDR_OWVAR 21
20155: PUSH
20156: LD_VAR 0 1
20160: ST_TO_ADDR
// bc_level = 1 ;
20161: LD_ADDR_OWVAR 43
20165: PUSH
20166: LD_INT 1
20168: ST_TO_ADDR
// case btype of 1 :
20169: LD_VAR 0 2
20173: PUSH
20174: LD_INT 1
20176: DOUBLE
20177: EQUAL
20178: IFTRUE 20182
20180: GO 20193
20182: POP
// bc_type := b_depot ; 2 :
20183: LD_ADDR_OWVAR 42
20187: PUSH
20188: LD_INT 0
20190: ST_TO_ADDR
20191: GO 20813
20193: LD_INT 2
20195: DOUBLE
20196: EQUAL
20197: IFTRUE 20201
20199: GO 20212
20201: POP
// bc_type := b_warehouse ; 3 :
20202: LD_ADDR_OWVAR 42
20206: PUSH
20207: LD_INT 1
20209: ST_TO_ADDR
20210: GO 20813
20212: LD_INT 3
20214: DOUBLE
20215: EQUAL
20216: IFTRUE 20220
20218: GO 20231
20220: POP
// bc_type := b_lab ; 4 .. 9 :
20221: LD_ADDR_OWVAR 42
20225: PUSH
20226: LD_INT 6
20228: ST_TO_ADDR
20229: GO 20813
20231: LD_INT 4
20233: DOUBLE
20234: GREATEREQUAL
20235: IFFALSE 20243
20237: LD_INT 9
20239: DOUBLE
20240: LESSEQUAL
20241: IFTRUE 20245
20243: GO 20305
20245: POP
// begin bc_type := b_lab_half ;
20246: LD_ADDR_OWVAR 42
20250: PUSH
20251: LD_INT 7
20253: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20254: LD_ADDR_OWVAR 44
20258: PUSH
20259: LD_INT 10
20261: PUSH
20262: LD_INT 11
20264: PUSH
20265: LD_INT 12
20267: PUSH
20268: LD_INT 15
20270: PUSH
20271: LD_INT 14
20273: PUSH
20274: LD_INT 13
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: LIST
20281: LIST
20282: LIST
20283: LIST
20284: PUSH
20285: LD_VAR 0 2
20289: PUSH
20290: LD_INT 3
20292: MINUS
20293: ARRAY
20294: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20295: LD_ADDR_OWVAR 45
20299: PUSH
20300: LD_INT 9
20302: ST_TO_ADDR
// end ; 10 .. 13 :
20303: GO 20813
20305: LD_INT 10
20307: DOUBLE
20308: GREATEREQUAL
20309: IFFALSE 20317
20311: LD_INT 13
20313: DOUBLE
20314: LESSEQUAL
20315: IFTRUE 20319
20317: GO 20396
20319: POP
// begin bc_type := b_lab_full ;
20320: LD_ADDR_OWVAR 42
20324: PUSH
20325: LD_INT 8
20327: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20328: LD_ADDR_OWVAR 44
20332: PUSH
20333: LD_INT 10
20335: PUSH
20336: LD_INT 12
20338: PUSH
20339: LD_INT 14
20341: PUSH
20342: LD_INT 13
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: LD_VAR 0 2
20355: PUSH
20356: LD_INT 9
20358: MINUS
20359: ARRAY
20360: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20361: LD_ADDR_OWVAR 45
20365: PUSH
20366: LD_INT 11
20368: PUSH
20369: LD_INT 15
20371: PUSH
20372: LD_INT 12
20374: PUSH
20375: LD_INT 15
20377: PUSH
20378: EMPTY
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: PUSH
20384: LD_VAR 0 2
20388: PUSH
20389: LD_INT 9
20391: MINUS
20392: ARRAY
20393: ST_TO_ADDR
// end ; 14 :
20394: GO 20813
20396: LD_INT 14
20398: DOUBLE
20399: EQUAL
20400: IFTRUE 20404
20402: GO 20415
20404: POP
// bc_type := b_workshop ; 15 :
20405: LD_ADDR_OWVAR 42
20409: PUSH
20410: LD_INT 2
20412: ST_TO_ADDR
20413: GO 20813
20415: LD_INT 15
20417: DOUBLE
20418: EQUAL
20419: IFTRUE 20423
20421: GO 20434
20423: POP
// bc_type := b_factory ; 16 :
20424: LD_ADDR_OWVAR 42
20428: PUSH
20429: LD_INT 3
20431: ST_TO_ADDR
20432: GO 20813
20434: LD_INT 16
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20453
20442: POP
// bc_type := b_ext_gun ; 17 :
20443: LD_ADDR_OWVAR 42
20447: PUSH
20448: LD_INT 17
20450: ST_TO_ADDR
20451: GO 20813
20453: LD_INT 17
20455: DOUBLE
20456: EQUAL
20457: IFTRUE 20461
20459: GO 20489
20461: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20462: LD_ADDR_OWVAR 42
20466: PUSH
20467: LD_INT 19
20469: PUSH
20470: LD_INT 23
20472: PUSH
20473: LD_INT 19
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: LIST
20480: PUSH
20481: LD_VAR 0 1
20485: ARRAY
20486: ST_TO_ADDR
20487: GO 20813
20489: LD_INT 18
20491: DOUBLE
20492: EQUAL
20493: IFTRUE 20497
20495: GO 20508
20497: POP
// bc_type := b_ext_radar ; 19 :
20498: LD_ADDR_OWVAR 42
20502: PUSH
20503: LD_INT 20
20505: ST_TO_ADDR
20506: GO 20813
20508: LD_INT 19
20510: DOUBLE
20511: EQUAL
20512: IFTRUE 20516
20514: GO 20527
20516: POP
// bc_type := b_ext_radio ; 20 :
20517: LD_ADDR_OWVAR 42
20521: PUSH
20522: LD_INT 22
20524: ST_TO_ADDR
20525: GO 20813
20527: LD_INT 20
20529: DOUBLE
20530: EQUAL
20531: IFTRUE 20535
20533: GO 20546
20535: POP
// bc_type := b_ext_siberium ; 21 :
20536: LD_ADDR_OWVAR 42
20540: PUSH
20541: LD_INT 21
20543: ST_TO_ADDR
20544: GO 20813
20546: LD_INT 21
20548: DOUBLE
20549: EQUAL
20550: IFTRUE 20554
20552: GO 20565
20554: POP
// bc_type := b_ext_computer ; 22 :
20555: LD_ADDR_OWVAR 42
20559: PUSH
20560: LD_INT 24
20562: ST_TO_ADDR
20563: GO 20813
20565: LD_INT 22
20567: DOUBLE
20568: EQUAL
20569: IFTRUE 20573
20571: GO 20584
20573: POP
// bc_type := b_ext_track ; 23 :
20574: LD_ADDR_OWVAR 42
20578: PUSH
20579: LD_INT 16
20581: ST_TO_ADDR
20582: GO 20813
20584: LD_INT 23
20586: DOUBLE
20587: EQUAL
20588: IFTRUE 20592
20590: GO 20603
20592: POP
// bc_type := b_ext_laser ; 24 :
20593: LD_ADDR_OWVAR 42
20597: PUSH
20598: LD_INT 25
20600: ST_TO_ADDR
20601: GO 20813
20603: LD_INT 24
20605: DOUBLE
20606: EQUAL
20607: IFTRUE 20611
20609: GO 20622
20611: POP
// bc_type := b_control_tower ; 25 :
20612: LD_ADDR_OWVAR 42
20616: PUSH
20617: LD_INT 36
20619: ST_TO_ADDR
20620: GO 20813
20622: LD_INT 25
20624: DOUBLE
20625: EQUAL
20626: IFTRUE 20630
20628: GO 20641
20630: POP
// bc_type := b_breastwork ; 26 :
20631: LD_ADDR_OWVAR 42
20635: PUSH
20636: LD_INT 31
20638: ST_TO_ADDR
20639: GO 20813
20641: LD_INT 26
20643: DOUBLE
20644: EQUAL
20645: IFTRUE 20649
20647: GO 20660
20649: POP
// bc_type := b_bunker ; 27 :
20650: LD_ADDR_OWVAR 42
20654: PUSH
20655: LD_INT 32
20657: ST_TO_ADDR
20658: GO 20813
20660: LD_INT 27
20662: DOUBLE
20663: EQUAL
20664: IFTRUE 20668
20666: GO 20679
20668: POP
// bc_type := b_turret ; 28 :
20669: LD_ADDR_OWVAR 42
20673: PUSH
20674: LD_INT 33
20676: ST_TO_ADDR
20677: GO 20813
20679: LD_INT 28
20681: DOUBLE
20682: EQUAL
20683: IFTRUE 20687
20685: GO 20698
20687: POP
// bc_type := b_armoury ; 29 :
20688: LD_ADDR_OWVAR 42
20692: PUSH
20693: LD_INT 4
20695: ST_TO_ADDR
20696: GO 20813
20698: LD_INT 29
20700: DOUBLE
20701: EQUAL
20702: IFTRUE 20706
20704: GO 20717
20706: POP
// bc_type := b_barracks ; 30 :
20707: LD_ADDR_OWVAR 42
20711: PUSH
20712: LD_INT 5
20714: ST_TO_ADDR
20715: GO 20813
20717: LD_INT 30
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20736
20725: POP
// bc_type := b_solar_power ; 31 :
20726: LD_ADDR_OWVAR 42
20730: PUSH
20731: LD_INT 27
20733: ST_TO_ADDR
20734: GO 20813
20736: LD_INT 31
20738: DOUBLE
20739: EQUAL
20740: IFTRUE 20744
20742: GO 20755
20744: POP
// bc_type := b_oil_power ; 32 :
20745: LD_ADDR_OWVAR 42
20749: PUSH
20750: LD_INT 26
20752: ST_TO_ADDR
20753: GO 20813
20755: LD_INT 32
20757: DOUBLE
20758: EQUAL
20759: IFTRUE 20763
20761: GO 20774
20763: POP
// bc_type := b_siberite_power ; 33 :
20764: LD_ADDR_OWVAR 42
20768: PUSH
20769: LD_INT 28
20771: ST_TO_ADDR
20772: GO 20813
20774: LD_INT 33
20776: DOUBLE
20777: EQUAL
20778: IFTRUE 20782
20780: GO 20793
20782: POP
// bc_type := b_oil_mine ; 34 :
20783: LD_ADDR_OWVAR 42
20787: PUSH
20788: LD_INT 29
20790: ST_TO_ADDR
20791: GO 20813
20793: LD_INT 34
20795: DOUBLE
20796: EQUAL
20797: IFTRUE 20801
20799: GO 20812
20801: POP
// bc_type := b_siberite_mine ; end ;
20802: LD_ADDR_OWVAR 42
20806: PUSH
20807: LD_INT 30
20809: ST_TO_ADDR
20810: GO 20813
20812: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20813: LD_ADDR_VAR 0 8
20817: PUSH
20818: LD_VAR 0 5
20822: PPUSH
20823: LD_VAR 0 6
20827: PPUSH
20828: LD_VAR 0 3
20832: PPUSH
20833: CALL_OW 47
20837: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20838: LD_OWVAR 42
20842: PUSH
20843: LD_INT 32
20845: PUSH
20846: LD_INT 33
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: IN
20853: IFFALSE 20869
// PlaceWeaponTurret ( b , weapon ) ;
20855: LD_VAR 0 8
20859: PPUSH
20860: LD_VAR 0 4
20864: PPUSH
20865: CALL_OW 431
// end ;
20869: LD_VAR 0 7
20873: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20874: LD_INT 0
20876: PPUSH
20877: PPUSH
20878: PPUSH
20879: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20880: LD_ADDR_VAR 0 4
20884: PUSH
20885: LD_INT 22
20887: PUSH
20888: LD_OWVAR 2
20892: PUSH
20893: EMPTY
20894: LIST
20895: LIST
20896: PUSH
20897: LD_INT 2
20899: PUSH
20900: LD_INT 30
20902: PUSH
20903: LD_INT 0
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 30
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: CALL_OW 69
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 4
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 21002
// for i in tmp do
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_VAR 0 4
20952: PUSH
20953: FOR_IN
20954: IFFALSE 21000
// for j = 1 to 3 do
20956: LD_ADDR_VAR 0 3
20960: PUSH
20961: DOUBLE
20962: LD_INT 1
20964: DEC
20965: ST_TO_ADDR
20966: LD_INT 3
20968: PUSH
20969: FOR_TO
20970: IFFALSE 20996
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20972: LD_VAR 0 2
20976: PPUSH
20977: CALL_OW 274
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: LD_INT 99999
20989: PPUSH
20990: CALL_OW 277
20994: GO 20969
20996: POP
20997: POP
20998: GO 20953
21000: POP
21001: POP
// end ;
21002: LD_VAR 0 1
21006: RET
// export function hHackSetLevel10 ; var i , j ; begin
21007: LD_INT 0
21009: PPUSH
21010: PPUSH
21011: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21012: LD_ADDR_VAR 0 2
21016: PUSH
21017: LD_INT 21
21019: PUSH
21020: LD_INT 1
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PPUSH
21027: CALL_OW 69
21031: PUSH
21032: FOR_IN
21033: IFFALSE 21085
// if IsSelected ( i ) then
21035: LD_VAR 0 2
21039: PPUSH
21040: CALL_OW 306
21044: IFFALSE 21083
// begin for j := 1 to 4 do
21046: LD_ADDR_VAR 0 3
21050: PUSH
21051: DOUBLE
21052: LD_INT 1
21054: DEC
21055: ST_TO_ADDR
21056: LD_INT 4
21058: PUSH
21059: FOR_TO
21060: IFFALSE 21081
// SetSkill ( i , j , 10 ) ;
21062: LD_VAR 0 2
21066: PPUSH
21067: LD_VAR 0 3
21071: PPUSH
21072: LD_INT 10
21074: PPUSH
21075: CALL_OW 237
21079: GO 21059
21081: POP
21082: POP
// end ;
21083: GO 21032
21085: POP
21086: POP
// end ;
21087: LD_VAR 0 1
21091: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21092: LD_INT 0
21094: PPUSH
21095: PPUSH
21096: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21097: LD_ADDR_VAR 0 2
21101: PUSH
21102: LD_INT 22
21104: PUSH
21105: LD_OWVAR 2
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 21
21116: PUSH
21117: LD_INT 1
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: PPUSH
21128: CALL_OW 69
21132: PUSH
21133: FOR_IN
21134: IFFALSE 21175
// begin for j := 1 to 4 do
21136: LD_ADDR_VAR 0 3
21140: PUSH
21141: DOUBLE
21142: LD_INT 1
21144: DEC
21145: ST_TO_ADDR
21146: LD_INT 4
21148: PUSH
21149: FOR_TO
21150: IFFALSE 21171
// SetSkill ( i , j , 10 ) ;
21152: LD_VAR 0 2
21156: PPUSH
21157: LD_VAR 0 3
21161: PPUSH
21162: LD_INT 10
21164: PPUSH
21165: CALL_OW 237
21169: GO 21149
21171: POP
21172: POP
// end ;
21173: GO 21133
21175: POP
21176: POP
// end ;
21177: LD_VAR 0 1
21181: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21182: LD_INT 0
21184: PPUSH
// uc_side := your_side ;
21185: LD_ADDR_OWVAR 20
21189: PUSH
21190: LD_OWVAR 2
21194: ST_TO_ADDR
// uc_nation := nation ;
21195: LD_ADDR_OWVAR 21
21199: PUSH
21200: LD_VAR 0 1
21204: ST_TO_ADDR
// InitHc ;
21205: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21209: LD_INT 0
21211: PPUSH
21212: LD_VAR 0 2
21216: PPUSH
21217: LD_VAR 0 3
21221: PPUSH
21222: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21226: LD_VAR 0 4
21230: PPUSH
21231: LD_VAR 0 5
21235: PPUSH
21236: CALL_OW 428
21240: PUSH
21241: LD_INT 0
21243: EQUAL
21244: IFFALSE 21268
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21246: CALL_OW 44
21250: PPUSH
21251: LD_VAR 0 4
21255: PPUSH
21256: LD_VAR 0 5
21260: PPUSH
21261: LD_INT 1
21263: PPUSH
21264: CALL_OW 48
// end ;
21268: LD_VAR 0 6
21272: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21273: LD_INT 0
21275: PPUSH
21276: PPUSH
// uc_side := your_side ;
21277: LD_ADDR_OWVAR 20
21281: PUSH
21282: LD_OWVAR 2
21286: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21287: LD_VAR 0 1
21291: PUSH
21292: LD_INT 1
21294: PUSH
21295: LD_INT 2
21297: PUSH
21298: LD_INT 3
21300: PUSH
21301: LD_INT 4
21303: PUSH
21304: LD_INT 5
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: IN
21314: IFFALSE 21326
// uc_nation := nation_american else
21316: LD_ADDR_OWVAR 21
21320: PUSH
21321: LD_INT 1
21323: ST_TO_ADDR
21324: GO 21369
// if chassis in [ 11 , 12 , 13 , 14 ] then
21326: LD_VAR 0 1
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 13
21339: PUSH
21340: LD_INT 14
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: IN
21349: IFFALSE 21361
// uc_nation := nation_arabian else
21351: LD_ADDR_OWVAR 21
21355: PUSH
21356: LD_INT 2
21358: ST_TO_ADDR
21359: GO 21369
// uc_nation := nation_russian ;
21361: LD_ADDR_OWVAR 21
21365: PUSH
21366: LD_INT 3
21368: ST_TO_ADDR
// vc_chassis := chassis ;
21369: LD_ADDR_OWVAR 37
21373: PUSH
21374: LD_VAR 0 1
21378: ST_TO_ADDR
// vc_engine := engine ;
21379: LD_ADDR_OWVAR 39
21383: PUSH
21384: LD_VAR 0 2
21388: ST_TO_ADDR
// vc_control := control ;
21389: LD_ADDR_OWVAR 38
21393: PUSH
21394: LD_VAR 0 3
21398: ST_TO_ADDR
// vc_weapon := weapon ;
21399: LD_ADDR_OWVAR 40
21403: PUSH
21404: LD_VAR 0 4
21408: ST_TO_ADDR
// un := CreateVehicle ;
21409: LD_ADDR_VAR 0 8
21413: PUSH
21414: CALL_OW 45
21418: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21419: LD_VAR 0 8
21423: PPUSH
21424: LD_INT 0
21426: PPUSH
21427: LD_INT 5
21429: PPUSH
21430: CALL_OW 12
21434: PPUSH
21435: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21439: LD_VAR 0 8
21443: PPUSH
21444: LD_VAR 0 5
21448: PPUSH
21449: LD_VAR 0 6
21453: PPUSH
21454: LD_INT 1
21456: PPUSH
21457: CALL_OW 48
// end ;
21461: LD_VAR 0 7
21465: RET
// export hInvincible ; every 1 do
21466: GO 21468
21468: DISABLE
// hInvincible := [ ] ;
21469: LD_ADDR_EXP 82
21473: PUSH
21474: EMPTY
21475: ST_TO_ADDR
21476: END
// every 10 do var i ;
21477: GO 21479
21479: DISABLE
21480: LD_INT 0
21482: PPUSH
// begin enable ;
21483: ENABLE
// if not hInvincible then
21484: LD_EXP 82
21488: NOT
21489: IFFALSE 21493
// exit ;
21491: GO 21537
// for i in hInvincible do
21493: LD_ADDR_VAR 0 1
21497: PUSH
21498: LD_EXP 82
21502: PUSH
21503: FOR_IN
21504: IFFALSE 21535
// if GetLives ( i ) < 1000 then
21506: LD_VAR 0 1
21510: PPUSH
21511: CALL_OW 256
21515: PUSH
21516: LD_INT 1000
21518: LESS
21519: IFFALSE 21533
// SetLives ( i , 1000 ) ;
21521: LD_VAR 0 1
21525: PPUSH
21526: LD_INT 1000
21528: PPUSH
21529: CALL_OW 234
21533: GO 21503
21535: POP
21536: POP
// end ;
21537: PPOPN 1
21539: END
// export function hHackInvincible ; var i ; begin
21540: LD_INT 0
21542: PPUSH
21543: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21544: LD_ADDR_VAR 0 2
21548: PUSH
21549: LD_INT 2
21551: PUSH
21552: LD_INT 21
21554: PUSH
21555: LD_INT 1
21557: PUSH
21558: EMPTY
21559: LIST
21560: LIST
21561: PUSH
21562: LD_INT 21
21564: PUSH
21565: LD_INT 2
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: LIST
21576: PPUSH
21577: CALL_OW 69
21581: PUSH
21582: FOR_IN
21583: IFFALSE 21644
// if IsSelected ( i ) then
21585: LD_VAR 0 2
21589: PPUSH
21590: CALL_OW 306
21594: IFFALSE 21642
// begin if i in hInvincible then
21596: LD_VAR 0 2
21600: PUSH
21601: LD_EXP 82
21605: IN
21606: IFFALSE 21626
// hInvincible := hInvincible diff i else
21608: LD_ADDR_EXP 82
21612: PUSH
21613: LD_EXP 82
21617: PUSH
21618: LD_VAR 0 2
21622: DIFF
21623: ST_TO_ADDR
21624: GO 21642
// hInvincible := hInvincible union i ;
21626: LD_ADDR_EXP 82
21630: PUSH
21631: LD_EXP 82
21635: PUSH
21636: LD_VAR 0 2
21640: UNION
21641: ST_TO_ADDR
// end ;
21642: GO 21582
21644: POP
21645: POP
// end ;
21646: LD_VAR 0 1
21650: RET
// export function hHackInvisible ; var i , j ; begin
21651: LD_INT 0
21653: PPUSH
21654: PPUSH
21655: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21656: LD_ADDR_VAR 0 2
21660: PUSH
21661: LD_INT 21
21663: PUSH
21664: LD_INT 1
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PPUSH
21671: CALL_OW 69
21675: PUSH
21676: FOR_IN
21677: IFFALSE 21701
// if IsSelected ( i ) then
21679: LD_VAR 0 2
21683: PPUSH
21684: CALL_OW 306
21688: IFFALSE 21699
// ComForceInvisible ( i ) ;
21690: LD_VAR 0 2
21694: PPUSH
21695: CALL_OW 496
21699: GO 21676
21701: POP
21702: POP
// end ;
21703: LD_VAR 0 1
21707: RET
// export function hHackChangeYourSide ; begin
21708: LD_INT 0
21710: PPUSH
// if your_side = 8 then
21711: LD_OWVAR 2
21715: PUSH
21716: LD_INT 8
21718: EQUAL
21719: IFFALSE 21731
// your_side := 0 else
21721: LD_ADDR_OWVAR 2
21725: PUSH
21726: LD_INT 0
21728: ST_TO_ADDR
21729: GO 21745
// your_side := your_side + 1 ;
21731: LD_ADDR_OWVAR 2
21735: PUSH
21736: LD_OWVAR 2
21740: PUSH
21741: LD_INT 1
21743: PLUS
21744: ST_TO_ADDR
// end ;
21745: LD_VAR 0 1
21749: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21750: LD_INT 0
21752: PPUSH
21753: PPUSH
21754: PPUSH
// for i in all_units do
21755: LD_ADDR_VAR 0 2
21759: PUSH
21760: LD_OWVAR 3
21764: PUSH
21765: FOR_IN
21766: IFFALSE 21844
// if IsSelected ( i ) then
21768: LD_VAR 0 2
21772: PPUSH
21773: CALL_OW 306
21777: IFFALSE 21842
// begin j := GetSide ( i ) ;
21779: LD_ADDR_VAR 0 3
21783: PUSH
21784: LD_VAR 0 2
21788: PPUSH
21789: CALL_OW 255
21793: ST_TO_ADDR
// if j = 8 then
21794: LD_VAR 0 3
21798: PUSH
21799: LD_INT 8
21801: EQUAL
21802: IFFALSE 21814
// j := 0 else
21804: LD_ADDR_VAR 0 3
21808: PUSH
21809: LD_INT 0
21811: ST_TO_ADDR
21812: GO 21828
// j := j + 1 ;
21814: LD_ADDR_VAR 0 3
21818: PUSH
21819: LD_VAR 0 3
21823: PUSH
21824: LD_INT 1
21826: PLUS
21827: ST_TO_ADDR
// SetSide ( i , j ) ;
21828: LD_VAR 0 2
21832: PPUSH
21833: LD_VAR 0 3
21837: PPUSH
21838: CALL_OW 235
// end ;
21842: GO 21765
21844: POP
21845: POP
// end ;
21846: LD_VAR 0 1
21850: RET
// export function hHackFog ; begin
21851: LD_INT 0
21853: PPUSH
// FogOff ( true ) ;
21854: LD_INT 1
21856: PPUSH
21857: CALL_OW 344
// end ;
21861: LD_VAR 0 1
21865: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21866: LD_INT 0
21868: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21869: LD_VAR 0 1
21873: PPUSH
21874: LD_VAR 0 2
21878: PPUSH
21879: LD_VAR 0 3
21883: PPUSH
21884: LD_INT 1
21886: PPUSH
21887: LD_INT 1
21889: PPUSH
21890: CALL_OW 483
// CenterOnXY ( x , y ) ;
21894: LD_VAR 0 2
21898: PPUSH
21899: LD_VAR 0 3
21903: PPUSH
21904: CALL_OW 84
// end ;
21908: LD_VAR 0 4
21912: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21913: LD_INT 0
21915: PPUSH
21916: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21917: LD_VAR 0 1
21921: NOT
21922: PUSH
21923: LD_VAR 0 2
21927: PPUSH
21928: LD_VAR 0 3
21932: PPUSH
21933: CALL_OW 488
21937: NOT
21938: OR
21939: PUSH
21940: LD_VAR 0 1
21944: PPUSH
21945: CALL_OW 266
21949: PUSH
21950: LD_INT 3
21952: NONEQUAL
21953: PUSH
21954: LD_VAR 0 1
21958: PPUSH
21959: CALL_OW 247
21963: PUSH
21964: LD_INT 1
21966: EQUAL
21967: NOT
21968: AND
21969: OR
21970: IFFALSE 21974
// exit ;
21972: GO 22123
// if GetType ( factory ) = unit_human then
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 247
21983: PUSH
21984: LD_INT 1
21986: EQUAL
21987: IFFALSE 22004
// factory := IsInUnit ( factory ) ;
21989: LD_ADDR_VAR 0 1
21993: PUSH
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL_OW 310
22003: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22004: LD_VAR 0 1
22008: PPUSH
22009: CALL_OW 266
22013: PUSH
22014: LD_INT 3
22016: NONEQUAL
22017: IFFALSE 22021
// exit ;
22019: GO 22123
// if HexInfo ( x , y ) = factory then
22021: LD_VAR 0 2
22025: PPUSH
22026: LD_VAR 0 3
22030: PPUSH
22031: CALL_OW 428
22035: PUSH
22036: LD_VAR 0 1
22040: EQUAL
22041: IFFALSE 22068
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22043: LD_ADDR_EXP 83
22047: PUSH
22048: LD_EXP 83
22052: PPUSH
22053: LD_VAR 0 1
22057: PPUSH
22058: LD_INT 0
22060: PPUSH
22061: CALL_OW 1
22065: ST_TO_ADDR
22066: GO 22119
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22068: LD_ADDR_EXP 83
22072: PUSH
22073: LD_EXP 83
22077: PPUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: LD_VAR 0 1
22087: PPUSH
22088: CALL_OW 255
22092: PUSH
22093: LD_VAR 0 1
22097: PUSH
22098: LD_VAR 0 2
22102: PUSH
22103: LD_VAR 0 3
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 1
22118: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22119: CALL 22128 0 0
// end ;
22123: LD_VAR 0 4
22127: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22128: LD_INT 0
22130: PPUSH
22131: PPUSH
22132: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22133: LD_STRING resetFactoryWaypoint();
22135: PPUSH
22136: CALL_OW 559
// if factoryWaypoints then
22140: LD_EXP 83
22144: IFFALSE 22270
// begin list := PrepareArray ( factoryWaypoints ) ;
22146: LD_ADDR_VAR 0 3
22150: PUSH
22151: LD_EXP 83
22155: PPUSH
22156: CALL 69578 0 1
22160: ST_TO_ADDR
// for i := 1 to list do
22161: LD_ADDR_VAR 0 2
22165: PUSH
22166: DOUBLE
22167: LD_INT 1
22169: DEC
22170: ST_TO_ADDR
22171: LD_VAR 0 3
22175: PUSH
22176: FOR_TO
22177: IFFALSE 22268
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22179: LD_STRING setFactoryWaypointXY(
22181: PUSH
22182: LD_VAR 0 3
22186: PUSH
22187: LD_VAR 0 2
22191: ARRAY
22192: PUSH
22193: LD_INT 1
22195: ARRAY
22196: STR
22197: PUSH
22198: LD_STRING ,
22200: STR
22201: PUSH
22202: LD_VAR 0 3
22206: PUSH
22207: LD_VAR 0 2
22211: ARRAY
22212: PUSH
22213: LD_INT 2
22215: ARRAY
22216: STR
22217: PUSH
22218: LD_STRING ,
22220: STR
22221: PUSH
22222: LD_VAR 0 3
22226: PUSH
22227: LD_VAR 0 2
22231: ARRAY
22232: PUSH
22233: LD_INT 3
22235: ARRAY
22236: STR
22237: PUSH
22238: LD_STRING ,
22240: STR
22241: PUSH
22242: LD_VAR 0 3
22246: PUSH
22247: LD_VAR 0 2
22251: ARRAY
22252: PUSH
22253: LD_INT 4
22255: ARRAY
22256: STR
22257: PUSH
22258: LD_STRING )
22260: STR
22261: PPUSH
22262: CALL_OW 559
22266: GO 22176
22268: POP
22269: POP
// end ; end ;
22270: LD_VAR 0 1
22274: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22275: LD_INT 0
22277: PPUSH
// if HexInfo ( x , y ) = warehouse then
22278: LD_VAR 0 2
22282: PPUSH
22283: LD_VAR 0 3
22287: PPUSH
22288: CALL_OW 428
22292: PUSH
22293: LD_VAR 0 1
22297: EQUAL
22298: IFFALSE 22325
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22300: LD_ADDR_EXP 84
22304: PUSH
22305: LD_EXP 84
22309: PPUSH
22310: LD_VAR 0 1
22314: PPUSH
22315: LD_INT 0
22317: PPUSH
22318: CALL_OW 1
22322: ST_TO_ADDR
22323: GO 22376
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22325: LD_ADDR_EXP 84
22329: PUSH
22330: LD_EXP 84
22334: PPUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: LD_VAR 0 1
22344: PPUSH
22345: CALL_OW 255
22349: PUSH
22350: LD_VAR 0 1
22354: PUSH
22355: LD_VAR 0 2
22359: PUSH
22360: LD_VAR 0 3
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: PPUSH
22371: CALL_OW 1
22375: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22376: CALL 22385 0 0
// end ;
22380: LD_VAR 0 4
22384: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22385: LD_INT 0
22387: PPUSH
22388: PPUSH
22389: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22390: LD_STRING resetWarehouseGatheringPoints();
22392: PPUSH
22393: CALL_OW 559
// if warehouseGatheringPoints then
22397: LD_EXP 84
22401: IFFALSE 22527
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22403: LD_ADDR_VAR 0 3
22407: PUSH
22408: LD_EXP 84
22412: PPUSH
22413: CALL 69578 0 1
22417: ST_TO_ADDR
// for i := 1 to list do
22418: LD_ADDR_VAR 0 2
22422: PUSH
22423: DOUBLE
22424: LD_INT 1
22426: DEC
22427: ST_TO_ADDR
22428: LD_VAR 0 3
22432: PUSH
22433: FOR_TO
22434: IFFALSE 22525
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22436: LD_STRING setWarehouseGatheringPointXY(
22438: PUSH
22439: LD_VAR 0 3
22443: PUSH
22444: LD_VAR 0 2
22448: ARRAY
22449: PUSH
22450: LD_INT 1
22452: ARRAY
22453: STR
22454: PUSH
22455: LD_STRING ,
22457: STR
22458: PUSH
22459: LD_VAR 0 3
22463: PUSH
22464: LD_VAR 0 2
22468: ARRAY
22469: PUSH
22470: LD_INT 2
22472: ARRAY
22473: STR
22474: PUSH
22475: LD_STRING ,
22477: STR
22478: PUSH
22479: LD_VAR 0 3
22483: PUSH
22484: LD_VAR 0 2
22488: ARRAY
22489: PUSH
22490: LD_INT 3
22492: ARRAY
22493: STR
22494: PUSH
22495: LD_STRING ,
22497: STR
22498: PUSH
22499: LD_VAR 0 3
22503: PUSH
22504: LD_VAR 0 2
22508: ARRAY
22509: PUSH
22510: LD_INT 4
22512: ARRAY
22513: STR
22514: PUSH
22515: LD_STRING )
22517: STR
22518: PPUSH
22519: CALL_OW 559
22523: GO 22433
22525: POP
22526: POP
// end ; end ;
22527: LD_VAR 0 1
22531: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22532: LD_EXP 84
22536: IFFALSE 23221
22538: GO 22540
22540: DISABLE
22541: LD_INT 0
22543: PPUSH
22544: PPUSH
22545: PPUSH
22546: PPUSH
22547: PPUSH
22548: PPUSH
22549: PPUSH
22550: PPUSH
22551: PPUSH
// begin enable ;
22552: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22553: LD_ADDR_VAR 0 3
22557: PUSH
22558: LD_EXP 84
22562: PPUSH
22563: CALL 69578 0 1
22567: ST_TO_ADDR
// if not list then
22568: LD_VAR 0 3
22572: NOT
22573: IFFALSE 22577
// exit ;
22575: GO 23221
// for i := 1 to list do
22577: LD_ADDR_VAR 0 1
22581: PUSH
22582: DOUBLE
22583: LD_INT 1
22585: DEC
22586: ST_TO_ADDR
22587: LD_VAR 0 3
22591: PUSH
22592: FOR_TO
22593: IFFALSE 23219
// begin depot := list [ i ] [ 2 ] ;
22595: LD_ADDR_VAR 0 8
22599: PUSH
22600: LD_VAR 0 3
22604: PUSH
22605: LD_VAR 0 1
22609: ARRAY
22610: PUSH
22611: LD_INT 2
22613: ARRAY
22614: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22615: LD_ADDR_VAR 0 5
22619: PUSH
22620: LD_VAR 0 3
22624: PUSH
22625: LD_VAR 0 1
22629: ARRAY
22630: PUSH
22631: LD_INT 1
22633: ARRAY
22634: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22635: LD_VAR 0 8
22639: PPUSH
22640: CALL_OW 301
22644: PUSH
22645: LD_VAR 0 5
22649: PUSH
22650: LD_VAR 0 8
22654: PPUSH
22655: CALL_OW 255
22659: NONEQUAL
22660: OR
22661: IFFALSE 22690
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22663: LD_ADDR_EXP 84
22667: PUSH
22668: LD_EXP 84
22672: PPUSH
22673: LD_VAR 0 8
22677: PPUSH
22678: LD_INT 0
22680: PPUSH
22681: CALL_OW 1
22685: ST_TO_ADDR
// exit ;
22686: POP
22687: POP
22688: GO 23221
// end ; x := list [ i ] [ 3 ] ;
22690: LD_ADDR_VAR 0 6
22694: PUSH
22695: LD_VAR 0 3
22699: PUSH
22700: LD_VAR 0 1
22704: ARRAY
22705: PUSH
22706: LD_INT 3
22708: ARRAY
22709: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22710: LD_ADDR_VAR 0 7
22714: PUSH
22715: LD_VAR 0 3
22719: PUSH
22720: LD_VAR 0 1
22724: ARRAY
22725: PUSH
22726: LD_INT 4
22728: ARRAY
22729: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22730: LD_ADDR_VAR 0 9
22734: PUSH
22735: LD_VAR 0 6
22739: PPUSH
22740: LD_VAR 0 7
22744: PPUSH
22745: LD_INT 16
22747: PPUSH
22748: CALL 68166 0 3
22752: ST_TO_ADDR
// if not cratesNearbyPoint then
22753: LD_VAR 0 9
22757: NOT
22758: IFFALSE 22764
// exit ;
22760: POP
22761: POP
22762: GO 23221
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22764: LD_ADDR_VAR 0 4
22768: PUSH
22769: LD_INT 22
22771: PUSH
22772: LD_VAR 0 5
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 3
22783: PUSH
22784: LD_INT 60
22786: PUSH
22787: EMPTY
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 91
22796: PUSH
22797: LD_VAR 0 8
22801: PUSH
22802: LD_INT 6
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: PUSH
22810: LD_INT 2
22812: PUSH
22813: LD_INT 25
22815: PUSH
22816: LD_INT 2
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: PUSH
22823: LD_INT 25
22825: PUSH
22826: LD_INT 16
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: LIST
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: PPUSH
22844: CALL_OW 69
22848: PUSH
22849: LD_VAR 0 8
22853: PPUSH
22854: CALL_OW 313
22858: PPUSH
22859: LD_INT 3
22861: PUSH
22862: LD_INT 60
22864: PUSH
22865: EMPTY
22866: LIST
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 2
22874: PUSH
22875: LD_INT 25
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: LD_INT 25
22887: PUSH
22888: LD_INT 16
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: LIST
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PPUSH
22904: CALL_OW 72
22908: UNION
22909: ST_TO_ADDR
// if tmp then
22910: LD_VAR 0 4
22914: IFFALSE 22994
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22916: LD_ADDR_VAR 0 4
22920: PUSH
22921: LD_VAR 0 4
22925: PPUSH
22926: LD_INT 3
22928: PPUSH
22929: CALL 66135 0 2
22933: ST_TO_ADDR
// for j in tmp do
22934: LD_ADDR_VAR 0 2
22938: PUSH
22939: LD_VAR 0 4
22943: PUSH
22944: FOR_IN
22945: IFFALSE 22988
// begin if IsInUnit ( j ) then
22947: LD_VAR 0 2
22951: PPUSH
22952: CALL_OW 310
22956: IFFALSE 22967
// ComExit ( j ) ;
22958: LD_VAR 0 2
22962: PPUSH
22963: CALL 66218 0 1
// AddComCollect ( j , x , y ) ;
22967: LD_VAR 0 2
22971: PPUSH
22972: LD_VAR 0 6
22976: PPUSH
22977: LD_VAR 0 7
22981: PPUSH
22982: CALL_OW 177
// end ;
22986: GO 22944
22988: POP
22989: POP
// exit ;
22990: POP
22991: POP
22992: GO 23221
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22994: LD_ADDR_VAR 0 4
22998: PUSH
22999: LD_INT 22
23001: PUSH
23002: LD_VAR 0 5
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 91
23013: PUSH
23014: LD_VAR 0 8
23018: PUSH
23019: LD_INT 8
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 2
23029: PUSH
23030: LD_INT 34
23032: PUSH
23033: LD_INT 12
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: LD_INT 34
23042: PUSH
23043: LD_INT 51
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: PUSH
23050: LD_INT 34
23052: PUSH
23053: LD_INT 32
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 34
23062: PUSH
23063: LD_INT 89
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: PPUSH
23082: CALL_OW 69
23086: ST_TO_ADDR
// if tmp then
23087: LD_VAR 0 4
23091: IFFALSE 23217
// begin for j in tmp do
23093: LD_ADDR_VAR 0 2
23097: PUSH
23098: LD_VAR 0 4
23102: PUSH
23103: FOR_IN
23104: IFFALSE 23215
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23106: LD_VAR 0 2
23110: PPUSH
23111: CALL_OW 262
23115: PUSH
23116: LD_INT 3
23118: EQUAL
23119: PUSH
23120: LD_VAR 0 2
23124: PPUSH
23125: CALL_OW 261
23129: PUSH
23130: LD_INT 20
23132: GREATER
23133: OR
23134: PUSH
23135: LD_VAR 0 2
23139: PPUSH
23140: CALL_OW 314
23144: NOT
23145: AND
23146: PUSH
23147: LD_VAR 0 2
23151: PPUSH
23152: CALL_OW 263
23156: PUSH
23157: LD_INT 1
23159: NONEQUAL
23160: PUSH
23161: LD_VAR 0 2
23165: PPUSH
23166: CALL_OW 311
23170: OR
23171: AND
23172: IFFALSE 23213
// begin ComCollect ( j , x , y ) ;
23174: LD_VAR 0 2
23178: PPUSH
23179: LD_VAR 0 6
23183: PPUSH
23184: LD_VAR 0 7
23188: PPUSH
23189: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23193: LD_VAR 0 2
23197: PPUSH
23198: LD_VAR 0 8
23202: PPUSH
23203: CALL_OW 172
// exit ;
23207: POP
23208: POP
23209: POP
23210: POP
23211: GO 23221
// end ;
23213: GO 23103
23215: POP
23216: POP
// end ; end ;
23217: GO 22592
23219: POP
23220: POP
// end ; end_of_file
23221: PPOPN 9
23223: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23224: LD_INT 0
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23230: LD_VAR 0 1
23234: PPUSH
23235: CALL_OW 264
23239: PUSH
23240: LD_INT 91
23242: EQUAL
23243: IFFALSE 23315
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23245: LD_INT 68
23247: PPUSH
23248: LD_VAR 0 1
23252: PPUSH
23253: CALL_OW 255
23257: PPUSH
23258: CALL_OW 321
23262: PUSH
23263: LD_INT 2
23265: EQUAL
23266: IFFALSE 23278
// eff := 70 else
23268: LD_ADDR_VAR 0 4
23272: PUSH
23273: LD_INT 70
23275: ST_TO_ADDR
23276: GO 23286
// eff := 30 ;
23278: LD_ADDR_VAR 0 4
23282: PUSH
23283: LD_INT 30
23285: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23286: LD_VAR 0 1
23290: PPUSH
23291: CALL_OW 250
23295: PPUSH
23296: LD_VAR 0 1
23300: PPUSH
23301: CALL_OW 251
23305: PPUSH
23306: LD_VAR 0 4
23310: PPUSH
23311: CALL_OW 495
// end ; end ;
23315: LD_VAR 0 2
23319: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23320: LD_INT 0
23322: PPUSH
// end ;
23323: LD_VAR 0 4
23327: RET
// export function SOS_Command ( cmd ) ; begin
23328: LD_INT 0
23330: PPUSH
// end ;
23331: LD_VAR 0 2
23335: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23336: LD_INT 0
23338: PPUSH
// end ;
23339: LD_VAR 0 6
23343: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23344: LD_INT 0
23346: PPUSH
23347: PPUSH
// if not vehicle or not factory then
23348: LD_VAR 0 1
23352: NOT
23353: PUSH
23354: LD_VAR 0 2
23358: NOT
23359: OR
23360: IFFALSE 23364
// exit ;
23362: GO 23595
// if factoryWaypoints >= factory then
23364: LD_EXP 83
23368: PUSH
23369: LD_VAR 0 2
23373: GREATEREQUAL
23374: IFFALSE 23595
// if factoryWaypoints [ factory ] then
23376: LD_EXP 83
23380: PUSH
23381: LD_VAR 0 2
23385: ARRAY
23386: IFFALSE 23595
// begin if GetControl ( vehicle ) = control_manual then
23388: LD_VAR 0 1
23392: PPUSH
23393: CALL_OW 263
23397: PUSH
23398: LD_INT 1
23400: EQUAL
23401: IFFALSE 23482
// begin driver := IsDrivenBy ( vehicle ) ;
23403: LD_ADDR_VAR 0 4
23407: PUSH
23408: LD_VAR 0 1
23412: PPUSH
23413: CALL_OW 311
23417: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23418: LD_VAR 0 4
23422: PPUSH
23423: LD_EXP 83
23427: PUSH
23428: LD_VAR 0 2
23432: ARRAY
23433: PUSH
23434: LD_INT 3
23436: ARRAY
23437: PPUSH
23438: LD_EXP 83
23442: PUSH
23443: LD_VAR 0 2
23447: ARRAY
23448: PUSH
23449: LD_INT 4
23451: ARRAY
23452: PPUSH
23453: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23457: LD_VAR 0 4
23461: PPUSH
23462: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23466: LD_VAR 0 4
23470: PPUSH
23471: LD_VAR 0 2
23475: PPUSH
23476: CALL_OW 180
// end else
23480: GO 23595
// if GetControl ( vehicle ) = control_remote then
23482: LD_VAR 0 1
23486: PPUSH
23487: CALL_OW 263
23491: PUSH
23492: LD_INT 2
23494: EQUAL
23495: IFFALSE 23556
// begin wait ( 0 0$2 ) ;
23497: LD_INT 70
23499: PPUSH
23500: CALL_OW 67
// if Connect ( vehicle ) then
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL 36426 0 1
23513: IFFALSE 23554
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23515: LD_VAR 0 1
23519: PPUSH
23520: LD_EXP 83
23524: PUSH
23525: LD_VAR 0 2
23529: ARRAY
23530: PUSH
23531: LD_INT 3
23533: ARRAY
23534: PPUSH
23535: LD_EXP 83
23539: PUSH
23540: LD_VAR 0 2
23544: ARRAY
23545: PUSH
23546: LD_INT 4
23548: ARRAY
23549: PPUSH
23550: CALL_OW 171
// end else
23554: GO 23595
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23556: LD_VAR 0 1
23560: PPUSH
23561: LD_EXP 83
23565: PUSH
23566: LD_VAR 0 2
23570: ARRAY
23571: PUSH
23572: LD_INT 3
23574: ARRAY
23575: PPUSH
23576: LD_EXP 83
23580: PUSH
23581: LD_VAR 0 2
23585: ARRAY
23586: PUSH
23587: LD_INT 4
23589: ARRAY
23590: PPUSH
23591: CALL_OW 171
// end ; end ;
23595: LD_VAR 0 3
23599: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23600: LD_INT 0
23602: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23603: LD_VAR 0 1
23607: PUSH
23608: LD_INT 250
23610: EQUAL
23611: PUSH
23612: LD_VAR 0 2
23616: PPUSH
23617: CALL_OW 264
23621: PUSH
23622: LD_INT 81
23624: EQUAL
23625: AND
23626: IFFALSE 23647
// MinerPlaceMine ( unit , x , y ) ;
23628: LD_VAR 0 2
23632: PPUSH
23633: LD_VAR 0 4
23637: PPUSH
23638: LD_VAR 0 5
23642: PPUSH
23643: CALL 26637 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23647: LD_VAR 0 1
23651: PUSH
23652: LD_INT 251
23654: EQUAL
23655: PUSH
23656: LD_VAR 0 2
23660: PPUSH
23661: CALL_OW 264
23665: PUSH
23666: LD_INT 81
23668: EQUAL
23669: AND
23670: IFFALSE 23691
// MinerDetonateMine ( unit , x , y ) ;
23672: LD_VAR 0 2
23676: PPUSH
23677: LD_VAR 0 4
23681: PPUSH
23682: LD_VAR 0 5
23686: PPUSH
23687: CALL 26912 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 252
23698: EQUAL
23699: PUSH
23700: LD_VAR 0 2
23704: PPUSH
23705: CALL_OW 264
23709: PUSH
23710: LD_INT 81
23712: EQUAL
23713: AND
23714: IFFALSE 23735
// MinerCreateMinefield ( unit , x , y ) ;
23716: LD_VAR 0 2
23720: PPUSH
23721: LD_VAR 0 4
23725: PPUSH
23726: LD_VAR 0 5
23730: PPUSH
23731: CALL 27329 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23735: LD_VAR 0 1
23739: PUSH
23740: LD_INT 253
23742: EQUAL
23743: PUSH
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL_OW 257
23753: PUSH
23754: LD_INT 5
23756: EQUAL
23757: AND
23758: IFFALSE 23779
// ComBinocular ( unit , x , y ) ;
23760: LD_VAR 0 2
23764: PPUSH
23765: LD_VAR 0 4
23769: PPUSH
23770: LD_VAR 0 5
23774: PPUSH
23775: CALL 27698 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23779: LD_VAR 0 1
23783: PUSH
23784: LD_INT 254
23786: EQUAL
23787: PUSH
23788: LD_VAR 0 2
23792: PPUSH
23793: CALL_OW 264
23797: PUSH
23798: LD_INT 99
23800: EQUAL
23801: AND
23802: PUSH
23803: LD_VAR 0 3
23807: PPUSH
23808: CALL_OW 263
23812: PUSH
23813: LD_INT 3
23815: EQUAL
23816: AND
23817: IFFALSE 23833
// HackDestroyVehicle ( unit , selectedUnit ) ;
23819: LD_VAR 0 2
23823: PPUSH
23824: LD_VAR 0 3
23828: PPUSH
23829: CALL 26001 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23833: LD_VAR 0 1
23837: PUSH
23838: LD_INT 255
23840: EQUAL
23841: PUSH
23842: LD_VAR 0 2
23846: PPUSH
23847: CALL_OW 264
23851: PUSH
23852: LD_INT 14
23854: PUSH
23855: LD_INT 53
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: IN
23862: AND
23863: PUSH
23864: LD_VAR 0 4
23868: PPUSH
23869: LD_VAR 0 5
23873: PPUSH
23874: CALL_OW 488
23878: AND
23879: IFFALSE 23903
// CutTreeXYR ( unit , x , y , 12 ) ;
23881: LD_VAR 0 2
23885: PPUSH
23886: LD_VAR 0 4
23890: PPUSH
23891: LD_VAR 0 5
23895: PPUSH
23896: LD_INT 12
23898: PPUSH
23899: CALL 23998 0 4
// if cmd = 256 then
23903: LD_VAR 0 1
23907: PUSH
23908: LD_INT 256
23910: EQUAL
23911: IFFALSE 23932
// SetFactoryWaypoint ( unit , x , y ) ;
23913: LD_VAR 0 2
23917: PPUSH
23918: LD_VAR 0 4
23922: PPUSH
23923: LD_VAR 0 5
23927: PPUSH
23928: CALL 21913 0 3
// if cmd = 257 then
23932: LD_VAR 0 1
23936: PUSH
23937: LD_INT 257
23939: EQUAL
23940: IFFALSE 23961
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23942: LD_VAR 0 2
23946: PPUSH
23947: LD_VAR 0 4
23951: PPUSH
23952: LD_VAR 0 5
23956: PPUSH
23957: CALL 22275 0 3
// if cmd = 258 then
23961: LD_VAR 0 1
23965: PUSH
23966: LD_INT 258
23968: EQUAL
23969: IFFALSE 23993
// BurnTreeXYR ( unit , x , y , 8 ) ;
23971: LD_VAR 0 2
23975: PPUSH
23976: LD_VAR 0 4
23980: PPUSH
23981: LD_VAR 0 5
23985: PPUSH
23986: LD_INT 8
23988: PPUSH
23989: CALL 24392 0 4
// end ;
23993: LD_VAR 0 6
23997: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23998: LD_INT 0
24000: PPUSH
24001: PPUSH
24002: PPUSH
24003: PPUSH
24004: PPUSH
24005: PPUSH
24006: PPUSH
24007: PPUSH
24008: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24009: LD_VAR 0 1
24013: PPUSH
24014: CALL_OW 302
24018: NOT
24019: PUSH
24020: LD_VAR 0 2
24024: PPUSH
24025: LD_VAR 0 3
24029: PPUSH
24030: CALL_OW 488
24034: NOT
24035: OR
24036: PUSH
24037: LD_VAR 0 4
24041: NOT
24042: OR
24043: IFFALSE 24047
// exit ;
24045: GO 24387
// list := [ ] ;
24047: LD_ADDR_VAR 0 13
24051: PUSH
24052: EMPTY
24053: ST_TO_ADDR
// if x - r < 0 then
24054: LD_VAR 0 2
24058: PUSH
24059: LD_VAR 0 4
24063: MINUS
24064: PUSH
24065: LD_INT 0
24067: LESS
24068: IFFALSE 24080
// min_x := 0 else
24070: LD_ADDR_VAR 0 7
24074: PUSH
24075: LD_INT 0
24077: ST_TO_ADDR
24078: GO 24096
// min_x := x - r ;
24080: LD_ADDR_VAR 0 7
24084: PUSH
24085: LD_VAR 0 2
24089: PUSH
24090: LD_VAR 0 4
24094: MINUS
24095: ST_TO_ADDR
// if y - r < 0 then
24096: LD_VAR 0 3
24100: PUSH
24101: LD_VAR 0 4
24105: MINUS
24106: PUSH
24107: LD_INT 0
24109: LESS
24110: IFFALSE 24122
// min_y := 0 else
24112: LD_ADDR_VAR 0 8
24116: PUSH
24117: LD_INT 0
24119: ST_TO_ADDR
24120: GO 24138
// min_y := y - r ;
24122: LD_ADDR_VAR 0 8
24126: PUSH
24127: LD_VAR 0 3
24131: PUSH
24132: LD_VAR 0 4
24136: MINUS
24137: ST_TO_ADDR
// max_x := x + r ;
24138: LD_ADDR_VAR 0 9
24142: PUSH
24143: LD_VAR 0 2
24147: PUSH
24148: LD_VAR 0 4
24152: PLUS
24153: ST_TO_ADDR
// max_y := y + r ;
24154: LD_ADDR_VAR 0 10
24158: PUSH
24159: LD_VAR 0 3
24163: PUSH
24164: LD_VAR 0 4
24168: PLUS
24169: ST_TO_ADDR
// for _x = min_x to max_x do
24170: LD_ADDR_VAR 0 11
24174: PUSH
24175: DOUBLE
24176: LD_VAR 0 7
24180: DEC
24181: ST_TO_ADDR
24182: LD_VAR 0 9
24186: PUSH
24187: FOR_TO
24188: IFFALSE 24305
// for _y = min_y to max_y do
24190: LD_ADDR_VAR 0 12
24194: PUSH
24195: DOUBLE
24196: LD_VAR 0 8
24200: DEC
24201: ST_TO_ADDR
24202: LD_VAR 0 10
24206: PUSH
24207: FOR_TO
24208: IFFALSE 24301
// begin if not ValidHex ( _x , _y ) then
24210: LD_VAR 0 11
24214: PPUSH
24215: LD_VAR 0 12
24219: PPUSH
24220: CALL_OW 488
24224: NOT
24225: IFFALSE 24229
// continue ;
24227: GO 24207
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24229: LD_VAR 0 11
24233: PPUSH
24234: LD_VAR 0 12
24238: PPUSH
24239: CALL_OW 351
24243: PUSH
24244: LD_VAR 0 11
24248: PPUSH
24249: LD_VAR 0 12
24253: PPUSH
24254: CALL_OW 554
24258: AND
24259: IFFALSE 24299
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24261: LD_ADDR_VAR 0 13
24265: PUSH
24266: LD_VAR 0 13
24270: PPUSH
24271: LD_VAR 0 13
24275: PUSH
24276: LD_INT 1
24278: PLUS
24279: PPUSH
24280: LD_VAR 0 11
24284: PUSH
24285: LD_VAR 0 12
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: PPUSH
24294: CALL_OW 2
24298: ST_TO_ADDR
// end ;
24299: GO 24207
24301: POP
24302: POP
24303: GO 24187
24305: POP
24306: POP
// if not list then
24307: LD_VAR 0 13
24311: NOT
24312: IFFALSE 24316
// exit ;
24314: GO 24387
// for i in list do
24316: LD_ADDR_VAR 0 6
24320: PUSH
24321: LD_VAR 0 13
24325: PUSH
24326: FOR_IN
24327: IFFALSE 24385
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24329: LD_VAR 0 1
24333: PPUSH
24334: LD_STRING M
24336: PUSH
24337: LD_VAR 0 6
24341: PUSH
24342: LD_INT 1
24344: ARRAY
24345: PUSH
24346: LD_VAR 0 6
24350: PUSH
24351: LD_INT 2
24353: ARRAY
24354: PUSH
24355: LD_INT 0
24357: PUSH
24358: LD_INT 0
24360: PUSH
24361: LD_INT 0
24363: PUSH
24364: LD_INT 0
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: PUSH
24376: EMPTY
24377: LIST
24378: PPUSH
24379: CALL_OW 447
24383: GO 24326
24385: POP
24386: POP
// end ;
24387: LD_VAR 0 5
24391: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24392: LD_INT 0
24394: PPUSH
24395: PPUSH
24396: PPUSH
24397: PPUSH
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
24403: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24404: LD_VAR 0 1
24408: PPUSH
24409: CALL_OW 302
24413: NOT
24414: PUSH
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_VAR 0 3
24424: PPUSH
24425: CALL_OW 488
24429: NOT
24430: OR
24431: PUSH
24432: LD_VAR 0 4
24436: NOT
24437: OR
24438: IFFALSE 24442
// exit ;
24440: GO 24955
// list := [ ] ;
24442: LD_ADDR_VAR 0 13
24446: PUSH
24447: EMPTY
24448: ST_TO_ADDR
// if x - r < 0 then
24449: LD_VAR 0 2
24453: PUSH
24454: LD_VAR 0 4
24458: MINUS
24459: PUSH
24460: LD_INT 0
24462: LESS
24463: IFFALSE 24475
// min_x := 0 else
24465: LD_ADDR_VAR 0 7
24469: PUSH
24470: LD_INT 0
24472: ST_TO_ADDR
24473: GO 24491
// min_x := x - r ;
24475: LD_ADDR_VAR 0 7
24479: PUSH
24480: LD_VAR 0 2
24484: PUSH
24485: LD_VAR 0 4
24489: MINUS
24490: ST_TO_ADDR
// if y - r < 0 then
24491: LD_VAR 0 3
24495: PUSH
24496: LD_VAR 0 4
24500: MINUS
24501: PUSH
24502: LD_INT 0
24504: LESS
24505: IFFALSE 24517
// min_y := 0 else
24507: LD_ADDR_VAR 0 8
24511: PUSH
24512: LD_INT 0
24514: ST_TO_ADDR
24515: GO 24533
// min_y := y - r ;
24517: LD_ADDR_VAR 0 8
24521: PUSH
24522: LD_VAR 0 3
24526: PUSH
24527: LD_VAR 0 4
24531: MINUS
24532: ST_TO_ADDR
// max_x := x + r ;
24533: LD_ADDR_VAR 0 9
24537: PUSH
24538: LD_VAR 0 2
24542: PUSH
24543: LD_VAR 0 4
24547: PLUS
24548: ST_TO_ADDR
// max_y := y + r ;
24549: LD_ADDR_VAR 0 10
24553: PUSH
24554: LD_VAR 0 3
24558: PUSH
24559: LD_VAR 0 4
24563: PLUS
24564: ST_TO_ADDR
// for _x = min_x to max_x do
24565: LD_ADDR_VAR 0 11
24569: PUSH
24570: DOUBLE
24571: LD_VAR 0 7
24575: DEC
24576: ST_TO_ADDR
24577: LD_VAR 0 9
24581: PUSH
24582: FOR_TO
24583: IFFALSE 24700
// for _y = min_y to max_y do
24585: LD_ADDR_VAR 0 12
24589: PUSH
24590: DOUBLE
24591: LD_VAR 0 8
24595: DEC
24596: ST_TO_ADDR
24597: LD_VAR 0 10
24601: PUSH
24602: FOR_TO
24603: IFFALSE 24696
// begin if not ValidHex ( _x , _y ) then
24605: LD_VAR 0 11
24609: PPUSH
24610: LD_VAR 0 12
24614: PPUSH
24615: CALL_OW 488
24619: NOT
24620: IFFALSE 24624
// continue ;
24622: GO 24602
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24624: LD_VAR 0 11
24628: PPUSH
24629: LD_VAR 0 12
24633: PPUSH
24634: CALL_OW 351
24638: PUSH
24639: LD_VAR 0 11
24643: PPUSH
24644: LD_VAR 0 12
24648: PPUSH
24649: CALL_OW 554
24653: AND
24654: IFFALSE 24694
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24656: LD_ADDR_VAR 0 13
24660: PUSH
24661: LD_VAR 0 13
24665: PPUSH
24666: LD_VAR 0 13
24670: PUSH
24671: LD_INT 1
24673: PLUS
24674: PPUSH
24675: LD_VAR 0 11
24679: PUSH
24680: LD_VAR 0 12
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: PPUSH
24689: CALL_OW 2
24693: ST_TO_ADDR
// end ;
24694: GO 24602
24696: POP
24697: POP
24698: GO 24582
24700: POP
24701: POP
// if not list then
24702: LD_VAR 0 13
24706: NOT
24707: IFFALSE 24711
// exit ;
24709: GO 24955
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
24711: LD_ADDR_VAR 0 13
24715: PUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: LD_VAR 0 13
24725: PPUSH
24726: LD_INT 1
24728: PPUSH
24729: LD_INT 1
24731: PPUSH
24732: CALL 33568 0 4
24736: ST_TO_ADDR
// ComStop ( flame ) ;
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 141
// for i in list do
24746: LD_ADDR_VAR 0 6
24750: PUSH
24751: LD_VAR 0 13
24755: PUSH
24756: FOR_IN
24757: IFFALSE 24788
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
24759: LD_VAR 0 1
24763: PPUSH
24764: LD_VAR 0 6
24768: PUSH
24769: LD_INT 1
24771: ARRAY
24772: PPUSH
24773: LD_VAR 0 6
24777: PUSH
24778: LD_INT 2
24780: ARRAY
24781: PPUSH
24782: CALL_OW 176
24786: GO 24756
24788: POP
24789: POP
// repeat wait ( 0 0$1 ) ;
24790: LD_INT 35
24792: PPUSH
24793: CALL_OW 67
// task := GetTaskList ( flame ) ;
24797: LD_ADDR_VAR 0 14
24801: PUSH
24802: LD_VAR 0 1
24806: PPUSH
24807: CALL_OW 437
24811: ST_TO_ADDR
// if not task then
24812: LD_VAR 0 14
24816: NOT
24817: IFFALSE 24821
// exit ;
24819: GO 24955
// if task [ 1 ] [ 1 ] <> | then
24821: LD_VAR 0 14
24825: PUSH
24826: LD_INT 1
24828: ARRAY
24829: PUSH
24830: LD_INT 1
24832: ARRAY
24833: PUSH
24834: LD_STRING |
24836: NONEQUAL
24837: IFFALSE 24841
// exit ;
24839: GO 24955
// _x := task [ 1 ] [ 2 ] ;
24841: LD_ADDR_VAR 0 11
24845: PUSH
24846: LD_VAR 0 14
24850: PUSH
24851: LD_INT 1
24853: ARRAY
24854: PUSH
24855: LD_INT 2
24857: ARRAY
24858: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
24859: LD_ADDR_VAR 0 12
24863: PUSH
24864: LD_VAR 0 14
24868: PUSH
24869: LD_INT 1
24871: ARRAY
24872: PUSH
24873: LD_INT 3
24875: ARRAY
24876: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
24877: LD_VAR 0 11
24881: PPUSH
24882: LD_VAR 0 12
24886: PPUSH
24887: CALL_OW 351
24891: NOT
24892: PUSH
24893: LD_VAR 0 11
24897: PPUSH
24898: LD_VAR 0 12
24902: PPUSH
24903: CALL_OW 554
24907: NOT
24908: OR
24909: IFFALSE 24943
// begin task := Delete ( task , 1 ) ;
24911: LD_ADDR_VAR 0 14
24915: PUSH
24916: LD_VAR 0 14
24920: PPUSH
24921: LD_INT 1
24923: PPUSH
24924: CALL_OW 3
24928: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
24929: LD_VAR 0 1
24933: PPUSH
24934: LD_VAR 0 14
24938: PPUSH
24939: CALL_OW 446
// end ; until not HasTask ( flame ) ;
24943: LD_VAR 0 1
24947: PPUSH
24948: CALL_OW 314
24952: NOT
24953: IFFALSE 24790
// end ;
24955: LD_VAR 0 5
24959: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24960: LD_EXP 86
24964: NOT
24965: IFFALSE 25015
24967: GO 24969
24969: DISABLE
// begin initHack := true ;
24970: LD_ADDR_EXP 86
24974: PUSH
24975: LD_INT 1
24977: ST_TO_ADDR
// hackTanks := [ ] ;
24978: LD_ADDR_EXP 87
24982: PUSH
24983: EMPTY
24984: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24985: LD_ADDR_EXP 88
24989: PUSH
24990: EMPTY
24991: ST_TO_ADDR
// hackLimit := 3 ;
24992: LD_ADDR_EXP 89
24996: PUSH
24997: LD_INT 3
24999: ST_TO_ADDR
// hackDist := 12 ;
25000: LD_ADDR_EXP 90
25004: PUSH
25005: LD_INT 12
25007: ST_TO_ADDR
// hackCounter := [ ] ;
25008: LD_ADDR_EXP 91
25012: PUSH
25013: EMPTY
25014: ST_TO_ADDR
// end ;
25015: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25016: LD_EXP 86
25020: PUSH
25021: LD_INT 34
25023: PUSH
25024: LD_INT 99
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PPUSH
25031: CALL_OW 69
25035: AND
25036: IFFALSE 25289
25038: GO 25040
25040: DISABLE
25041: LD_INT 0
25043: PPUSH
25044: PPUSH
// begin enable ;
25045: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25046: LD_ADDR_VAR 0 1
25050: PUSH
25051: LD_INT 34
25053: PUSH
25054: LD_INT 99
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PPUSH
25061: CALL_OW 69
25065: PUSH
25066: FOR_IN
25067: IFFALSE 25287
// begin if not i in hackTanks then
25069: LD_VAR 0 1
25073: PUSH
25074: LD_EXP 87
25078: IN
25079: NOT
25080: IFFALSE 25163
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25082: LD_ADDR_EXP 87
25086: PUSH
25087: LD_EXP 87
25091: PPUSH
25092: LD_EXP 87
25096: PUSH
25097: LD_INT 1
25099: PLUS
25100: PPUSH
25101: LD_VAR 0 1
25105: PPUSH
25106: CALL_OW 1
25110: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25111: LD_ADDR_EXP 88
25115: PUSH
25116: LD_EXP 88
25120: PPUSH
25121: LD_EXP 88
25125: PUSH
25126: LD_INT 1
25128: PLUS
25129: PPUSH
25130: EMPTY
25131: PPUSH
25132: CALL_OW 1
25136: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25137: LD_ADDR_EXP 91
25141: PUSH
25142: LD_EXP 91
25146: PPUSH
25147: LD_EXP 91
25151: PUSH
25152: LD_INT 1
25154: PLUS
25155: PPUSH
25156: EMPTY
25157: PPUSH
25158: CALL_OW 1
25162: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25163: LD_VAR 0 1
25167: PPUSH
25168: CALL_OW 302
25172: NOT
25173: IFFALSE 25186
// begin HackUnlinkAll ( i ) ;
25175: LD_VAR 0 1
25179: PPUSH
25180: CALL 25292 0 1
// continue ;
25184: GO 25066
// end ; HackCheckCapturedStatus ( i ) ;
25186: LD_VAR 0 1
25190: PPUSH
25191: CALL 25735 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25195: LD_ADDR_VAR 0 2
25199: PUSH
25200: LD_INT 81
25202: PUSH
25203: LD_VAR 0 1
25207: PPUSH
25208: CALL_OW 255
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 33
25219: PUSH
25220: LD_INT 3
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 91
25229: PUSH
25230: LD_VAR 0 1
25234: PUSH
25235: LD_EXP 90
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: LIST
25244: PUSH
25245: LD_INT 50
25247: PUSH
25248: EMPTY
25249: LIST
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: LIST
25256: PPUSH
25257: CALL_OW 69
25261: ST_TO_ADDR
// if not tmp then
25262: LD_VAR 0 2
25266: NOT
25267: IFFALSE 25271
// continue ;
25269: GO 25066
// HackLink ( i , tmp ) ;
25271: LD_VAR 0 1
25275: PPUSH
25276: LD_VAR 0 2
25280: PPUSH
25281: CALL 25428 0 2
// end ;
25285: GO 25066
25287: POP
25288: POP
// end ;
25289: PPOPN 2
25291: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25292: LD_INT 0
25294: PPUSH
25295: PPUSH
25296: PPUSH
// if not hack in hackTanks then
25297: LD_VAR 0 1
25301: PUSH
25302: LD_EXP 87
25306: IN
25307: NOT
25308: IFFALSE 25312
// exit ;
25310: GO 25423
// index := GetElementIndex ( hackTanks , hack ) ;
25312: LD_ADDR_VAR 0 4
25316: PUSH
25317: LD_EXP 87
25321: PPUSH
25322: LD_VAR 0 1
25326: PPUSH
25327: CALL 32865 0 2
25331: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25332: LD_EXP 88
25336: PUSH
25337: LD_VAR 0 4
25341: ARRAY
25342: IFFALSE 25423
// begin for i in hackTanksCaptured [ index ] do
25344: LD_ADDR_VAR 0 3
25348: PUSH
25349: LD_EXP 88
25353: PUSH
25354: LD_VAR 0 4
25358: ARRAY
25359: PUSH
25360: FOR_IN
25361: IFFALSE 25387
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25363: LD_VAR 0 3
25367: PUSH
25368: LD_INT 1
25370: ARRAY
25371: PPUSH
25372: LD_VAR 0 3
25376: PUSH
25377: LD_INT 2
25379: ARRAY
25380: PPUSH
25381: CALL_OW 235
25385: GO 25360
25387: POP
25388: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25389: LD_ADDR_EXP 88
25393: PUSH
25394: LD_EXP 88
25398: PPUSH
25399: LD_VAR 0 4
25403: PPUSH
25404: EMPTY
25405: PPUSH
25406: CALL_OW 1
25410: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25411: LD_VAR 0 1
25415: PPUSH
25416: LD_INT 0
25418: PPUSH
25419: CALL_OW 505
// end ; end ;
25423: LD_VAR 0 2
25427: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25428: LD_INT 0
25430: PPUSH
25431: PPUSH
25432: PPUSH
// if not hack in hackTanks or not vehicles then
25433: LD_VAR 0 1
25437: PUSH
25438: LD_EXP 87
25442: IN
25443: NOT
25444: PUSH
25445: LD_VAR 0 2
25449: NOT
25450: OR
25451: IFFALSE 25455
// exit ;
25453: GO 25730
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25455: LD_ADDR_VAR 0 2
25459: PUSH
25460: LD_VAR 0 1
25464: PPUSH
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_INT 1
25475: PPUSH
25476: CALL 33515 0 4
25480: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
25481: LD_ADDR_VAR 0 5
25485: PUSH
25486: LD_EXP 87
25490: PPUSH
25491: LD_VAR 0 1
25495: PPUSH
25496: CALL 32865 0 2
25500: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
25501: LD_EXP 88
25505: PUSH
25506: LD_VAR 0 5
25510: ARRAY
25511: PUSH
25512: LD_EXP 89
25516: LESS
25517: IFFALSE 25706
// begin for i := 1 to vehicles do
25519: LD_ADDR_VAR 0 4
25523: PUSH
25524: DOUBLE
25525: LD_INT 1
25527: DEC
25528: ST_TO_ADDR
25529: LD_VAR 0 2
25533: PUSH
25534: FOR_TO
25535: IFFALSE 25704
// begin if hackTanksCaptured [ index ] = hackLimit then
25537: LD_EXP 88
25541: PUSH
25542: LD_VAR 0 5
25546: ARRAY
25547: PUSH
25548: LD_EXP 89
25552: EQUAL
25553: IFFALSE 25557
// break ;
25555: GO 25704
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
25557: LD_ADDR_EXP 91
25561: PUSH
25562: LD_EXP 91
25566: PPUSH
25567: LD_VAR 0 5
25571: PPUSH
25572: LD_EXP 91
25576: PUSH
25577: LD_VAR 0 5
25581: ARRAY
25582: PUSH
25583: LD_INT 1
25585: PLUS
25586: PPUSH
25587: CALL_OW 1
25591: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
25592: LD_ADDR_EXP 88
25596: PUSH
25597: LD_EXP 88
25601: PPUSH
25602: LD_VAR 0 5
25606: PUSH
25607: LD_EXP 88
25611: PUSH
25612: LD_VAR 0 5
25616: ARRAY
25617: PUSH
25618: LD_INT 1
25620: PLUS
25621: PUSH
25622: EMPTY
25623: LIST
25624: LIST
25625: PPUSH
25626: LD_VAR 0 2
25630: PUSH
25631: LD_VAR 0 4
25635: ARRAY
25636: PUSH
25637: LD_VAR 0 2
25641: PUSH
25642: LD_VAR 0 4
25646: ARRAY
25647: PPUSH
25648: CALL_OW 255
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL 33080 0 3
25661: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
25662: LD_VAR 0 2
25666: PUSH
25667: LD_VAR 0 4
25671: ARRAY
25672: PPUSH
25673: LD_VAR 0 1
25677: PPUSH
25678: CALL_OW 255
25682: PPUSH
25683: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
25687: LD_VAR 0 2
25691: PUSH
25692: LD_VAR 0 4
25696: ARRAY
25697: PPUSH
25698: CALL_OW 141
// end ;
25702: GO 25534
25704: POP
25705: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25706: LD_VAR 0 1
25710: PPUSH
25711: LD_EXP 88
25715: PUSH
25716: LD_VAR 0 5
25720: ARRAY
25721: PUSH
25722: LD_INT 0
25724: PLUS
25725: PPUSH
25726: CALL_OW 505
// end ;
25730: LD_VAR 0 3
25734: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
25735: LD_INT 0
25737: PPUSH
25738: PPUSH
25739: PPUSH
25740: PPUSH
// if not hack in hackTanks then
25741: LD_VAR 0 1
25745: PUSH
25746: LD_EXP 87
25750: IN
25751: NOT
25752: IFFALSE 25756
// exit ;
25754: GO 25996
// index := GetElementIndex ( hackTanks , hack ) ;
25756: LD_ADDR_VAR 0 4
25760: PUSH
25761: LD_EXP 87
25765: PPUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL 32865 0 2
25775: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
25776: LD_ADDR_VAR 0 3
25780: PUSH
25781: DOUBLE
25782: LD_EXP 88
25786: PUSH
25787: LD_VAR 0 4
25791: ARRAY
25792: INC
25793: ST_TO_ADDR
25794: LD_INT 1
25796: PUSH
25797: FOR_DOWNTO
25798: IFFALSE 25970
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25800: LD_ADDR_VAR 0 5
25804: PUSH
25805: LD_EXP 88
25809: PUSH
25810: LD_VAR 0 4
25814: ARRAY
25815: PUSH
25816: LD_VAR 0 3
25820: ARRAY
25821: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25822: LD_VAR 0 5
25826: PUSH
25827: LD_INT 1
25829: ARRAY
25830: PPUSH
25831: CALL_OW 302
25835: NOT
25836: PUSH
25837: LD_VAR 0 5
25841: PUSH
25842: LD_INT 1
25844: ARRAY
25845: PPUSH
25846: CALL_OW 255
25850: PUSH
25851: LD_VAR 0 1
25855: PPUSH
25856: CALL_OW 255
25860: NONEQUAL
25861: OR
25862: IFFALSE 25968
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25864: LD_VAR 0 5
25868: PUSH
25869: LD_INT 1
25871: ARRAY
25872: PPUSH
25873: CALL_OW 305
25877: PUSH
25878: LD_VAR 0 5
25882: PUSH
25883: LD_INT 1
25885: ARRAY
25886: PPUSH
25887: CALL_OW 255
25891: PUSH
25892: LD_VAR 0 1
25896: PPUSH
25897: CALL_OW 255
25901: EQUAL
25902: AND
25903: IFFALSE 25927
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25905: LD_VAR 0 5
25909: PUSH
25910: LD_INT 1
25912: ARRAY
25913: PPUSH
25914: LD_VAR 0 5
25918: PUSH
25919: LD_INT 2
25921: ARRAY
25922: PPUSH
25923: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25927: LD_ADDR_EXP 88
25931: PUSH
25932: LD_EXP 88
25936: PPUSH
25937: LD_VAR 0 4
25941: PPUSH
25942: LD_EXP 88
25946: PUSH
25947: LD_VAR 0 4
25951: ARRAY
25952: PPUSH
25953: LD_VAR 0 3
25957: PPUSH
25958: CALL_OW 3
25962: PPUSH
25963: CALL_OW 1
25967: ST_TO_ADDR
// end ; end ;
25968: GO 25797
25970: POP
25971: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25972: LD_VAR 0 1
25976: PPUSH
25977: LD_EXP 88
25981: PUSH
25982: LD_VAR 0 4
25986: ARRAY
25987: PUSH
25988: LD_INT 0
25990: PLUS
25991: PPUSH
25992: CALL_OW 505
// end ;
25996: LD_VAR 0 2
26000: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26001: LD_INT 0
26003: PPUSH
26004: PPUSH
26005: PPUSH
26006: PPUSH
// if not hack in hackTanks then
26007: LD_VAR 0 1
26011: PUSH
26012: LD_EXP 87
26016: IN
26017: NOT
26018: IFFALSE 26022
// exit ;
26020: GO 26107
// index := GetElementIndex ( hackTanks , hack ) ;
26022: LD_ADDR_VAR 0 5
26026: PUSH
26027: LD_EXP 87
26031: PPUSH
26032: LD_VAR 0 1
26036: PPUSH
26037: CALL 32865 0 2
26041: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26042: LD_ADDR_VAR 0 4
26046: PUSH
26047: DOUBLE
26048: LD_INT 1
26050: DEC
26051: ST_TO_ADDR
26052: LD_EXP 88
26056: PUSH
26057: LD_VAR 0 5
26061: ARRAY
26062: PUSH
26063: FOR_TO
26064: IFFALSE 26105
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26066: LD_EXP 88
26070: PUSH
26071: LD_VAR 0 5
26075: ARRAY
26076: PUSH
26077: LD_VAR 0 4
26081: ARRAY
26082: PUSH
26083: LD_INT 1
26085: ARRAY
26086: PUSH
26087: LD_VAR 0 2
26091: EQUAL
26092: IFFALSE 26103
// KillUnit ( vehicle ) ;
26094: LD_VAR 0 2
26098: PPUSH
26099: CALL_OW 66
26103: GO 26063
26105: POP
26106: POP
// end ;
26107: LD_VAR 0 3
26111: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26112: LD_EXP 92
26116: NOT
26117: IFFALSE 26152
26119: GO 26121
26121: DISABLE
// begin initMiner := true ;
26122: LD_ADDR_EXP 92
26126: PUSH
26127: LD_INT 1
26129: ST_TO_ADDR
// minersList := [ ] ;
26130: LD_ADDR_EXP 93
26134: PUSH
26135: EMPTY
26136: ST_TO_ADDR
// minerMinesList := [ ] ;
26137: LD_ADDR_EXP 94
26141: PUSH
26142: EMPTY
26143: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26144: LD_ADDR_EXP 95
26148: PUSH
26149: LD_INT 5
26151: ST_TO_ADDR
// end ;
26152: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26153: LD_EXP 92
26157: PUSH
26158: LD_INT 34
26160: PUSH
26161: LD_INT 81
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PPUSH
26168: CALL_OW 69
26172: AND
26173: IFFALSE 26634
26175: GO 26177
26177: DISABLE
26178: LD_INT 0
26180: PPUSH
26181: PPUSH
26182: PPUSH
26183: PPUSH
// begin enable ;
26184: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26185: LD_ADDR_VAR 0 1
26189: PUSH
26190: LD_INT 34
26192: PUSH
26193: LD_INT 81
26195: PUSH
26196: EMPTY
26197: LIST
26198: LIST
26199: PPUSH
26200: CALL_OW 69
26204: PUSH
26205: FOR_IN
26206: IFFALSE 26278
// begin if not i in minersList then
26208: LD_VAR 0 1
26212: PUSH
26213: LD_EXP 93
26217: IN
26218: NOT
26219: IFFALSE 26276
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26221: LD_ADDR_EXP 93
26225: PUSH
26226: LD_EXP 93
26230: PPUSH
26231: LD_EXP 93
26235: PUSH
26236: LD_INT 1
26238: PLUS
26239: PPUSH
26240: LD_VAR 0 1
26244: PPUSH
26245: CALL_OW 1
26249: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26250: LD_ADDR_EXP 94
26254: PUSH
26255: LD_EXP 94
26259: PPUSH
26260: LD_EXP 94
26264: PUSH
26265: LD_INT 1
26267: PLUS
26268: PPUSH
26269: EMPTY
26270: PPUSH
26271: CALL_OW 1
26275: ST_TO_ADDR
// end end ;
26276: GO 26205
26278: POP
26279: POP
// for i := minerMinesList downto 1 do
26280: LD_ADDR_VAR 0 1
26284: PUSH
26285: DOUBLE
26286: LD_EXP 94
26290: INC
26291: ST_TO_ADDR
26292: LD_INT 1
26294: PUSH
26295: FOR_DOWNTO
26296: IFFALSE 26632
// begin if IsLive ( minersList [ i ] ) then
26298: LD_EXP 93
26302: PUSH
26303: LD_VAR 0 1
26307: ARRAY
26308: PPUSH
26309: CALL_OW 300
26313: IFFALSE 26341
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26315: LD_EXP 93
26319: PUSH
26320: LD_VAR 0 1
26324: ARRAY
26325: PPUSH
26326: LD_EXP 94
26330: PUSH
26331: LD_VAR 0 1
26335: ARRAY
26336: PPUSH
26337: CALL_OW 505
// if not minerMinesList [ i ] then
26341: LD_EXP 94
26345: PUSH
26346: LD_VAR 0 1
26350: ARRAY
26351: NOT
26352: IFFALSE 26356
// continue ;
26354: GO 26295
// for j := minerMinesList [ i ] downto 1 do
26356: LD_ADDR_VAR 0 2
26360: PUSH
26361: DOUBLE
26362: LD_EXP 94
26366: PUSH
26367: LD_VAR 0 1
26371: ARRAY
26372: INC
26373: ST_TO_ADDR
26374: LD_INT 1
26376: PUSH
26377: FOR_DOWNTO
26378: IFFALSE 26628
// begin side := GetSide ( minersList [ i ] ) ;
26380: LD_ADDR_VAR 0 3
26384: PUSH
26385: LD_EXP 93
26389: PUSH
26390: LD_VAR 0 1
26394: ARRAY
26395: PPUSH
26396: CALL_OW 255
26400: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26401: LD_ADDR_VAR 0 4
26405: PUSH
26406: LD_EXP 94
26410: PUSH
26411: LD_VAR 0 1
26415: ARRAY
26416: PUSH
26417: LD_VAR 0 2
26421: ARRAY
26422: PUSH
26423: LD_INT 1
26425: ARRAY
26426: PPUSH
26427: LD_EXP 94
26431: PUSH
26432: LD_VAR 0 1
26436: ARRAY
26437: PUSH
26438: LD_VAR 0 2
26442: ARRAY
26443: PUSH
26444: LD_INT 2
26446: ARRAY
26447: PPUSH
26448: CALL_OW 428
26452: ST_TO_ADDR
// if not tmp then
26453: LD_VAR 0 4
26457: NOT
26458: IFFALSE 26462
// continue ;
26460: GO 26377
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26462: LD_VAR 0 4
26466: PUSH
26467: LD_INT 81
26469: PUSH
26470: LD_VAR 0 3
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PPUSH
26479: CALL_OW 69
26483: IN
26484: PUSH
26485: LD_EXP 94
26489: PUSH
26490: LD_VAR 0 1
26494: ARRAY
26495: PUSH
26496: LD_VAR 0 2
26500: ARRAY
26501: PUSH
26502: LD_INT 1
26504: ARRAY
26505: PPUSH
26506: LD_EXP 94
26510: PUSH
26511: LD_VAR 0 1
26515: ARRAY
26516: PUSH
26517: LD_VAR 0 2
26521: ARRAY
26522: PUSH
26523: LD_INT 2
26525: ARRAY
26526: PPUSH
26527: CALL_OW 458
26531: AND
26532: IFFALSE 26626
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
26534: LD_EXP 94
26538: PUSH
26539: LD_VAR 0 1
26543: ARRAY
26544: PUSH
26545: LD_VAR 0 2
26549: ARRAY
26550: PUSH
26551: LD_INT 1
26553: ARRAY
26554: PPUSH
26555: LD_EXP 94
26559: PUSH
26560: LD_VAR 0 1
26564: ARRAY
26565: PUSH
26566: LD_VAR 0 2
26570: ARRAY
26571: PUSH
26572: LD_INT 2
26574: ARRAY
26575: PPUSH
26576: LD_VAR 0 3
26580: PPUSH
26581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
26585: LD_ADDR_EXP 94
26589: PUSH
26590: LD_EXP 94
26594: PPUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: LD_EXP 94
26604: PUSH
26605: LD_VAR 0 1
26609: ARRAY
26610: PPUSH
26611: LD_VAR 0 2
26615: PPUSH
26616: CALL_OW 3
26620: PPUSH
26621: CALL_OW 1
26625: ST_TO_ADDR
// end ; end ;
26626: GO 26377
26628: POP
26629: POP
// end ;
26630: GO 26295
26632: POP
26633: POP
// end ;
26634: PPOPN 4
26636: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
26637: LD_INT 0
26639: PPUSH
26640: PPUSH
// result := false ;
26641: LD_ADDR_VAR 0 4
26645: PUSH
26646: LD_INT 0
26648: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
26649: LD_VAR 0 1
26653: PPUSH
26654: CALL_OW 264
26658: PUSH
26659: LD_INT 81
26661: EQUAL
26662: NOT
26663: IFFALSE 26667
// exit ;
26665: GO 26907
// index := GetElementIndex ( minersList , unit ) ;
26667: LD_ADDR_VAR 0 5
26671: PUSH
26672: LD_EXP 93
26676: PPUSH
26677: LD_VAR 0 1
26681: PPUSH
26682: CALL 32865 0 2
26686: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
26687: LD_EXP 94
26691: PUSH
26692: LD_VAR 0 5
26696: ARRAY
26697: PUSH
26698: LD_EXP 95
26702: GREATEREQUAL
26703: IFFALSE 26707
// exit ;
26705: GO 26907
// ComMoveXY ( unit , x , y ) ;
26707: LD_VAR 0 1
26711: PPUSH
26712: LD_VAR 0 2
26716: PPUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26726: LD_INT 35
26728: PPUSH
26729: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
26733: LD_VAR 0 1
26737: PPUSH
26738: LD_VAR 0 2
26742: PPUSH
26743: LD_VAR 0 3
26747: PPUSH
26748: CALL 64617 0 3
26752: NOT
26753: PUSH
26754: LD_VAR 0 1
26758: PPUSH
26759: CALL_OW 314
26763: AND
26764: IFFALSE 26768
// exit ;
26766: GO 26907
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
26768: LD_VAR 0 2
26772: PPUSH
26773: LD_VAR 0 3
26777: PPUSH
26778: CALL_OW 428
26782: PUSH
26783: LD_VAR 0 1
26787: EQUAL
26788: PUSH
26789: LD_VAR 0 1
26793: PPUSH
26794: CALL_OW 314
26798: NOT
26799: AND
26800: IFFALSE 26726
// PlaySoundXY ( x , y , PlantMine ) ;
26802: LD_VAR 0 2
26806: PPUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: LD_STRING PlantMine
26814: PPUSH
26815: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26819: LD_VAR 0 2
26823: PPUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: LD_VAR 0 1
26833: PPUSH
26834: CALL_OW 255
26838: PPUSH
26839: LD_INT 0
26841: PPUSH
26842: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26846: LD_ADDR_EXP 94
26850: PUSH
26851: LD_EXP 94
26855: PPUSH
26856: LD_VAR 0 5
26860: PUSH
26861: LD_EXP 94
26865: PUSH
26866: LD_VAR 0 5
26870: ARRAY
26871: PUSH
26872: LD_INT 1
26874: PLUS
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: PPUSH
26880: LD_VAR 0 2
26884: PUSH
26885: LD_VAR 0 3
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PPUSH
26894: CALL 33080 0 3
26898: ST_TO_ADDR
// result := true ;
26899: LD_ADDR_VAR 0 4
26903: PUSH
26904: LD_INT 1
26906: ST_TO_ADDR
// end ;
26907: LD_VAR 0 4
26911: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26912: LD_INT 0
26914: PPUSH
26915: PPUSH
26916: PPUSH
// if not unit in minersList then
26917: LD_VAR 0 1
26921: PUSH
26922: LD_EXP 93
26926: IN
26927: NOT
26928: IFFALSE 26932
// exit ;
26930: GO 27324
// index := GetElementIndex ( minersList , unit ) ;
26932: LD_ADDR_VAR 0 6
26936: PUSH
26937: LD_EXP 93
26941: PPUSH
26942: LD_VAR 0 1
26946: PPUSH
26947: CALL 32865 0 2
26951: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26952: LD_ADDR_VAR 0 5
26956: PUSH
26957: DOUBLE
26958: LD_EXP 94
26962: PUSH
26963: LD_VAR 0 6
26967: ARRAY
26968: INC
26969: ST_TO_ADDR
26970: LD_INT 1
26972: PUSH
26973: FOR_DOWNTO
26974: IFFALSE 27135
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26976: LD_EXP 94
26980: PUSH
26981: LD_VAR 0 6
26985: ARRAY
26986: PUSH
26987: LD_VAR 0 5
26991: ARRAY
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: PUSH
26997: LD_VAR 0 2
27001: EQUAL
27002: PUSH
27003: LD_EXP 94
27007: PUSH
27008: LD_VAR 0 6
27012: ARRAY
27013: PUSH
27014: LD_VAR 0 5
27018: ARRAY
27019: PUSH
27020: LD_INT 2
27022: ARRAY
27023: PUSH
27024: LD_VAR 0 3
27028: EQUAL
27029: AND
27030: IFFALSE 27133
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27032: LD_EXP 94
27036: PUSH
27037: LD_VAR 0 6
27041: ARRAY
27042: PUSH
27043: LD_VAR 0 5
27047: ARRAY
27048: PUSH
27049: LD_INT 1
27051: ARRAY
27052: PPUSH
27053: LD_EXP 94
27057: PUSH
27058: LD_VAR 0 6
27062: ARRAY
27063: PUSH
27064: LD_VAR 0 5
27068: ARRAY
27069: PUSH
27070: LD_INT 2
27072: ARRAY
27073: PPUSH
27074: LD_VAR 0 1
27078: PPUSH
27079: CALL_OW 255
27083: PPUSH
27084: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27088: LD_ADDR_EXP 94
27092: PUSH
27093: LD_EXP 94
27097: PPUSH
27098: LD_VAR 0 6
27102: PPUSH
27103: LD_EXP 94
27107: PUSH
27108: LD_VAR 0 6
27112: ARRAY
27113: PPUSH
27114: LD_VAR 0 5
27118: PPUSH
27119: CALL_OW 3
27123: PPUSH
27124: CALL_OW 1
27128: ST_TO_ADDR
// exit ;
27129: POP
27130: POP
27131: GO 27324
// end ; end ;
27133: GO 26973
27135: POP
27136: POP
// for i := minerMinesList [ index ] downto 1 do
27137: LD_ADDR_VAR 0 5
27141: PUSH
27142: DOUBLE
27143: LD_EXP 94
27147: PUSH
27148: LD_VAR 0 6
27152: ARRAY
27153: INC
27154: ST_TO_ADDR
27155: LD_INT 1
27157: PUSH
27158: FOR_DOWNTO
27159: IFFALSE 27322
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27161: LD_EXP 94
27165: PUSH
27166: LD_VAR 0 6
27170: ARRAY
27171: PUSH
27172: LD_VAR 0 5
27176: ARRAY
27177: PUSH
27178: LD_INT 1
27180: ARRAY
27181: PPUSH
27182: LD_EXP 94
27186: PUSH
27187: LD_VAR 0 6
27191: ARRAY
27192: PUSH
27193: LD_VAR 0 5
27197: ARRAY
27198: PUSH
27199: LD_INT 2
27201: ARRAY
27202: PPUSH
27203: LD_VAR 0 2
27207: PPUSH
27208: LD_VAR 0 3
27212: PPUSH
27213: CALL_OW 298
27217: PUSH
27218: LD_INT 6
27220: LESS
27221: IFFALSE 27320
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27223: LD_EXP 94
27227: PUSH
27228: LD_VAR 0 6
27232: ARRAY
27233: PUSH
27234: LD_VAR 0 5
27238: ARRAY
27239: PUSH
27240: LD_INT 1
27242: ARRAY
27243: PPUSH
27244: LD_EXP 94
27248: PUSH
27249: LD_VAR 0 6
27253: ARRAY
27254: PUSH
27255: LD_VAR 0 5
27259: ARRAY
27260: PUSH
27261: LD_INT 2
27263: ARRAY
27264: PPUSH
27265: LD_VAR 0 1
27269: PPUSH
27270: CALL_OW 255
27274: PPUSH
27275: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27279: LD_ADDR_EXP 94
27283: PUSH
27284: LD_EXP 94
27288: PPUSH
27289: LD_VAR 0 6
27293: PPUSH
27294: LD_EXP 94
27298: PUSH
27299: LD_VAR 0 6
27303: ARRAY
27304: PPUSH
27305: LD_VAR 0 5
27309: PPUSH
27310: CALL_OW 3
27314: PPUSH
27315: CALL_OW 1
27319: ST_TO_ADDR
// end ; end ;
27320: GO 27158
27322: POP
27323: POP
// end ;
27324: LD_VAR 0 4
27328: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27329: LD_INT 0
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27340: LD_VAR 0 1
27344: PPUSH
27345: CALL_OW 264
27349: PUSH
27350: LD_INT 81
27352: EQUAL
27353: NOT
27354: PUSH
27355: LD_VAR 0 1
27359: PUSH
27360: LD_EXP 93
27364: IN
27365: NOT
27366: OR
27367: IFFALSE 27371
// exit ;
27369: GO 27693
// index := GetElementIndex ( minersList , unit ) ;
27371: LD_ADDR_VAR 0 6
27375: PUSH
27376: LD_EXP 93
27380: PPUSH
27381: LD_VAR 0 1
27385: PPUSH
27386: CALL 32865 0 2
27390: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27391: LD_ADDR_VAR 0 8
27395: PUSH
27396: LD_EXP 95
27400: PUSH
27401: LD_EXP 94
27405: PUSH
27406: LD_VAR 0 6
27410: ARRAY
27411: MINUS
27412: ST_TO_ADDR
// if not minesFreeAmount then
27413: LD_VAR 0 8
27417: NOT
27418: IFFALSE 27422
// exit ;
27420: GO 27693
// tmp := [ ] ;
27422: LD_ADDR_VAR 0 7
27426: PUSH
27427: EMPTY
27428: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27429: LD_ADDR_VAR 0 5
27433: PUSH
27434: DOUBLE
27435: LD_INT 1
27437: DEC
27438: ST_TO_ADDR
27439: LD_VAR 0 8
27443: PUSH
27444: FOR_TO
27445: IFFALSE 27640
// begin _d := rand ( 0 , 5 ) ;
27447: LD_ADDR_VAR 0 11
27451: PUSH
27452: LD_INT 0
27454: PPUSH
27455: LD_INT 5
27457: PPUSH
27458: CALL_OW 12
27462: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27463: LD_ADDR_VAR 0 12
27467: PUSH
27468: LD_INT 2
27470: PPUSH
27471: LD_INT 6
27473: PPUSH
27474: CALL_OW 12
27478: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_VAR 0 2
27488: PPUSH
27489: LD_VAR 0 11
27493: PPUSH
27494: LD_VAR 0 12
27498: PPUSH
27499: CALL_OW 272
27503: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
27504: LD_ADDR_VAR 0 10
27508: PUSH
27509: LD_VAR 0 3
27513: PPUSH
27514: LD_VAR 0 11
27518: PPUSH
27519: LD_VAR 0 12
27523: PPUSH
27524: CALL_OW 273
27528: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
27529: LD_VAR 0 9
27533: PPUSH
27534: LD_VAR 0 10
27538: PPUSH
27539: CALL_OW 488
27543: PUSH
27544: LD_VAR 0 9
27548: PUSH
27549: LD_VAR 0 10
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_VAR 0 7
27562: IN
27563: NOT
27564: AND
27565: PUSH
27566: LD_VAR 0 9
27570: PPUSH
27571: LD_VAR 0 10
27575: PPUSH
27576: CALL_OW 458
27580: NOT
27581: AND
27582: IFFALSE 27624
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
27584: LD_ADDR_VAR 0 7
27588: PUSH
27589: LD_VAR 0 7
27593: PPUSH
27594: LD_VAR 0 7
27598: PUSH
27599: LD_INT 1
27601: PLUS
27602: PPUSH
27603: LD_VAR 0 9
27607: PUSH
27608: LD_VAR 0 10
27612: PUSH
27613: EMPTY
27614: LIST
27615: LIST
27616: PPUSH
27617: CALL_OW 1
27621: ST_TO_ADDR
27622: GO 27638
// i := i - 1 ;
27624: LD_ADDR_VAR 0 5
27628: PUSH
27629: LD_VAR 0 5
27633: PUSH
27634: LD_INT 1
27636: MINUS
27637: ST_TO_ADDR
// end ;
27638: GO 27444
27640: POP
27641: POP
// for i in tmp do
27642: LD_ADDR_VAR 0 5
27646: PUSH
27647: LD_VAR 0 7
27651: PUSH
27652: FOR_IN
27653: IFFALSE 27691
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
27655: LD_VAR 0 1
27659: PPUSH
27660: LD_VAR 0 5
27664: PUSH
27665: LD_INT 1
27667: ARRAY
27668: PPUSH
27669: LD_VAR 0 5
27673: PUSH
27674: LD_INT 2
27676: ARRAY
27677: PPUSH
27678: CALL 26637 0 3
27682: NOT
27683: IFFALSE 27689
// exit ;
27685: POP
27686: POP
27687: GO 27693
27689: GO 27652
27691: POP
27692: POP
// end ;
27693: LD_VAR 0 4
27697: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
27698: LD_INT 0
27700: PPUSH
27701: PPUSH
27702: PPUSH
27703: PPUSH
27704: PPUSH
27705: PPUSH
27706: PPUSH
// if not GetClass ( unit ) = class_sniper then
27707: LD_VAR 0 1
27711: PPUSH
27712: CALL_OW 257
27716: PUSH
27717: LD_INT 5
27719: EQUAL
27720: NOT
27721: IFFALSE 27725
// exit ;
27723: GO 28113
// dist := 8 ;
27725: LD_ADDR_VAR 0 5
27729: PUSH
27730: LD_INT 8
27732: ST_TO_ADDR
// viewRange := 12 ;
27733: LD_ADDR_VAR 0 7
27737: PUSH
27738: LD_INT 12
27740: ST_TO_ADDR
// side := GetSide ( unit ) ;
27741: LD_ADDR_VAR 0 6
27745: PUSH
27746: LD_VAR 0 1
27750: PPUSH
27751: CALL_OW 255
27755: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
27756: LD_INT 61
27758: PPUSH
27759: LD_VAR 0 6
27763: PPUSH
27764: CALL_OW 321
27768: PUSH
27769: LD_INT 2
27771: EQUAL
27772: IFFALSE 27782
// viewRange := 16 ;
27774: LD_ADDR_VAR 0 7
27778: PUSH
27779: LD_INT 16
27781: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
27782: LD_VAR 0 1
27786: PPUSH
27787: LD_VAR 0 2
27791: PPUSH
27792: LD_VAR 0 3
27796: PPUSH
27797: CALL_OW 297
27801: PUSH
27802: LD_VAR 0 5
27806: GREATER
27807: IFFALSE 27886
// begin ComMoveXY ( unit , x , y ) ;
27809: LD_VAR 0 1
27813: PPUSH
27814: LD_VAR 0 2
27818: PPUSH
27819: LD_VAR 0 3
27823: PPUSH
27824: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27828: LD_INT 35
27830: PPUSH
27831: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27835: LD_VAR 0 1
27839: PPUSH
27840: LD_VAR 0 2
27844: PPUSH
27845: LD_VAR 0 3
27849: PPUSH
27850: CALL 64617 0 3
27854: NOT
27855: IFFALSE 27859
// exit ;
27857: GO 28113
// until GetDistUnitXY ( unit , x , y ) < dist ;
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_VAR 0 2
27868: PPUSH
27869: LD_VAR 0 3
27873: PPUSH
27874: CALL_OW 297
27878: PUSH
27879: LD_VAR 0 5
27883: LESS
27884: IFFALSE 27828
// end ; ComTurnXY ( unit , x , y ) ;
27886: LD_VAR 0 1
27890: PPUSH
27891: LD_VAR 0 2
27895: PPUSH
27896: LD_VAR 0 3
27900: PPUSH
27901: CALL_OW 118
// wait ( 5 ) ;
27905: LD_INT 5
27907: PPUSH
27908: CALL_OW 67
// _d := GetDir ( unit ) ;
27912: LD_ADDR_VAR 0 10
27916: PUSH
27917: LD_VAR 0 1
27921: PPUSH
27922: CALL_OW 254
27926: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27927: LD_ADDR_VAR 0 8
27931: PUSH
27932: LD_VAR 0 1
27936: PPUSH
27937: CALL_OW 250
27941: PPUSH
27942: LD_VAR 0 10
27946: PPUSH
27947: LD_VAR 0 5
27951: PPUSH
27952: CALL_OW 272
27956: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27957: LD_ADDR_VAR 0 9
27961: PUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL_OW 251
27971: PPUSH
27972: LD_VAR 0 10
27976: PPUSH
27977: LD_VAR 0 5
27981: PPUSH
27982: CALL_OW 273
27986: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27987: LD_VAR 0 8
27991: PPUSH
27992: LD_VAR 0 9
27996: PPUSH
27997: CALL_OW 488
28001: NOT
28002: IFFALSE 28006
// exit ;
28004: GO 28113
// ComAnimCustom ( unit , 1 ) ;
28006: LD_VAR 0 1
28010: PPUSH
28011: LD_INT 1
28013: PPUSH
28014: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28018: LD_VAR 0 8
28022: PPUSH
28023: LD_VAR 0 9
28027: PPUSH
28028: LD_VAR 0 6
28032: PPUSH
28033: LD_VAR 0 7
28037: PPUSH
28038: CALL_OW 330
// repeat wait ( 1 ) ;
28042: LD_INT 1
28044: PPUSH
28045: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
28049: LD_VAR 0 1
28053: PPUSH
28054: CALL_OW 316
28058: PUSH
28059: LD_VAR 0 1
28063: PPUSH
28064: CALL_OW 314
28068: OR
28069: PUSH
28070: LD_VAR 0 1
28074: PPUSH
28075: CALL_OW 302
28079: NOT
28080: OR
28081: PUSH
28082: LD_VAR 0 1
28086: PPUSH
28087: CALL_OW 301
28091: OR
28092: IFFALSE 28042
// RemoveSeeing ( _x , _y , side ) ;
28094: LD_VAR 0 8
28098: PPUSH
28099: LD_VAR 0 9
28103: PPUSH
28104: LD_VAR 0 6
28108: PPUSH
28109: CALL_OW 331
// end ; end_of_file
28113: LD_VAR 0 4
28117: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28118: LD_INT 0
28120: PPUSH
28121: PPUSH
// if exist_mode then
28122: LD_VAR 0 2
28126: IFFALSE 28151
// unit := CreateCharacter ( prefix & ident ) else
28128: LD_ADDR_VAR 0 5
28132: PUSH
28133: LD_VAR 0 3
28137: PUSH
28138: LD_VAR 0 1
28142: STR
28143: PPUSH
28144: CALL_OW 34
28148: ST_TO_ADDR
28149: GO 28166
// unit := NewCharacter ( ident ) ;
28151: LD_ADDR_VAR 0 5
28155: PUSH
28156: LD_VAR 0 1
28160: PPUSH
28161: CALL_OW 25
28165: ST_TO_ADDR
// result := unit ;
28166: LD_ADDR_VAR 0 4
28170: PUSH
28171: LD_VAR 0 5
28175: ST_TO_ADDR
// end ;
28176: LD_VAR 0 4
28180: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28181: LD_INT 0
28183: PPUSH
28184: PPUSH
// if not side or not nation then
28185: LD_VAR 0 1
28189: NOT
28190: PUSH
28191: LD_VAR 0 2
28195: NOT
28196: OR
28197: IFFALSE 28201
// exit ;
28199: GO 28969
// case nation of nation_american :
28201: LD_VAR 0 2
28205: PUSH
28206: LD_INT 1
28208: DOUBLE
28209: EQUAL
28210: IFTRUE 28214
28212: GO 28428
28214: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28215: LD_ADDR_VAR 0 4
28219: PUSH
28220: LD_INT 35
28222: PUSH
28223: LD_INT 45
28225: PUSH
28226: LD_INT 46
28228: PUSH
28229: LD_INT 47
28231: PUSH
28232: LD_INT 82
28234: PUSH
28235: LD_INT 83
28237: PUSH
28238: LD_INT 84
28240: PUSH
28241: LD_INT 85
28243: PUSH
28244: LD_INT 86
28246: PUSH
28247: LD_INT 1
28249: PUSH
28250: LD_INT 2
28252: PUSH
28253: LD_INT 6
28255: PUSH
28256: LD_INT 15
28258: PUSH
28259: LD_INT 16
28261: PUSH
28262: LD_INT 7
28264: PUSH
28265: LD_INT 12
28267: PUSH
28268: LD_INT 13
28270: PUSH
28271: LD_INT 10
28273: PUSH
28274: LD_INT 14
28276: PUSH
28277: LD_INT 20
28279: PUSH
28280: LD_INT 21
28282: PUSH
28283: LD_INT 22
28285: PUSH
28286: LD_INT 25
28288: PUSH
28289: LD_INT 32
28291: PUSH
28292: LD_INT 27
28294: PUSH
28295: LD_INT 36
28297: PUSH
28298: LD_INT 69
28300: PUSH
28301: LD_INT 39
28303: PUSH
28304: LD_INT 34
28306: PUSH
28307: LD_INT 40
28309: PUSH
28310: LD_INT 48
28312: PUSH
28313: LD_INT 49
28315: PUSH
28316: LD_INT 50
28318: PUSH
28319: LD_INT 51
28321: PUSH
28322: LD_INT 52
28324: PUSH
28325: LD_INT 53
28327: PUSH
28328: LD_INT 54
28330: PUSH
28331: LD_INT 55
28333: PUSH
28334: LD_INT 56
28336: PUSH
28337: LD_INT 57
28339: PUSH
28340: LD_INT 58
28342: PUSH
28343: LD_INT 59
28345: PUSH
28346: LD_INT 60
28348: PUSH
28349: LD_INT 61
28351: PUSH
28352: LD_INT 62
28354: PUSH
28355: LD_INT 80
28357: PUSH
28358: LD_INT 82
28360: PUSH
28361: LD_INT 83
28363: PUSH
28364: LD_INT 84
28366: PUSH
28367: LD_INT 85
28369: PUSH
28370: LD_INT 86
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: LIST
28382: LIST
28383: LIST
28384: LIST
28385: LIST
28386: LIST
28387: LIST
28388: LIST
28389: LIST
28390: LIST
28391: LIST
28392: LIST
28393: LIST
28394: LIST
28395: LIST
28396: LIST
28397: LIST
28398: LIST
28399: LIST
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: ST_TO_ADDR
28426: GO 28893
28428: LD_INT 2
28430: DOUBLE
28431: EQUAL
28432: IFTRUE 28436
28434: GO 28662
28436: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
28437: LD_ADDR_VAR 0 4
28441: PUSH
28442: LD_INT 35
28444: PUSH
28445: LD_INT 45
28447: PUSH
28448: LD_INT 46
28450: PUSH
28451: LD_INT 47
28453: PUSH
28454: LD_INT 82
28456: PUSH
28457: LD_INT 83
28459: PUSH
28460: LD_INT 84
28462: PUSH
28463: LD_INT 85
28465: PUSH
28466: LD_INT 87
28468: PUSH
28469: LD_INT 70
28471: PUSH
28472: LD_INT 1
28474: PUSH
28475: LD_INT 11
28477: PUSH
28478: LD_INT 3
28480: PUSH
28481: LD_INT 4
28483: PUSH
28484: LD_INT 5
28486: PUSH
28487: LD_INT 6
28489: PUSH
28490: LD_INT 15
28492: PUSH
28493: LD_INT 18
28495: PUSH
28496: LD_INT 7
28498: PUSH
28499: LD_INT 17
28501: PUSH
28502: LD_INT 8
28504: PUSH
28505: LD_INT 20
28507: PUSH
28508: LD_INT 21
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: LD_INT 72
28516: PUSH
28517: LD_INT 26
28519: PUSH
28520: LD_INT 69
28522: PUSH
28523: LD_INT 39
28525: PUSH
28526: LD_INT 40
28528: PUSH
28529: LD_INT 41
28531: PUSH
28532: LD_INT 42
28534: PUSH
28535: LD_INT 43
28537: PUSH
28538: LD_INT 48
28540: PUSH
28541: LD_INT 49
28543: PUSH
28544: LD_INT 50
28546: PUSH
28547: LD_INT 51
28549: PUSH
28550: LD_INT 52
28552: PUSH
28553: LD_INT 53
28555: PUSH
28556: LD_INT 54
28558: PUSH
28559: LD_INT 55
28561: PUSH
28562: LD_INT 56
28564: PUSH
28565: LD_INT 60
28567: PUSH
28568: LD_INT 61
28570: PUSH
28571: LD_INT 62
28573: PUSH
28574: LD_INT 66
28576: PUSH
28577: LD_INT 67
28579: PUSH
28580: LD_INT 68
28582: PUSH
28583: LD_INT 81
28585: PUSH
28586: LD_INT 82
28588: PUSH
28589: LD_INT 83
28591: PUSH
28592: LD_INT 84
28594: PUSH
28595: LD_INT 85
28597: PUSH
28598: LD_INT 87
28600: PUSH
28601: LD_INT 88
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: LIST
28632: LIST
28633: LIST
28634: LIST
28635: LIST
28636: LIST
28637: LIST
28638: LIST
28639: LIST
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: LIST
28649: LIST
28650: LIST
28651: LIST
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: ST_TO_ADDR
28660: GO 28893
28662: LD_INT 3
28664: DOUBLE
28665: EQUAL
28666: IFTRUE 28670
28668: GO 28892
28670: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
28671: LD_ADDR_VAR 0 4
28675: PUSH
28676: LD_INT 46
28678: PUSH
28679: LD_INT 47
28681: PUSH
28682: LD_INT 1
28684: PUSH
28685: LD_INT 2
28687: PUSH
28688: LD_INT 82
28690: PUSH
28691: LD_INT 83
28693: PUSH
28694: LD_INT 84
28696: PUSH
28697: LD_INT 85
28699: PUSH
28700: LD_INT 86
28702: PUSH
28703: LD_INT 11
28705: PUSH
28706: LD_INT 9
28708: PUSH
28709: LD_INT 20
28711: PUSH
28712: LD_INT 19
28714: PUSH
28715: LD_INT 21
28717: PUSH
28718: LD_INT 24
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_INT 25
28726: PUSH
28727: LD_INT 28
28729: PUSH
28730: LD_INT 29
28732: PUSH
28733: LD_INT 30
28735: PUSH
28736: LD_INT 31
28738: PUSH
28739: LD_INT 37
28741: PUSH
28742: LD_INT 38
28744: PUSH
28745: LD_INT 32
28747: PUSH
28748: LD_INT 27
28750: PUSH
28751: LD_INT 33
28753: PUSH
28754: LD_INT 69
28756: PUSH
28757: LD_INT 39
28759: PUSH
28760: LD_INT 34
28762: PUSH
28763: LD_INT 40
28765: PUSH
28766: LD_INT 71
28768: PUSH
28769: LD_INT 23
28771: PUSH
28772: LD_INT 44
28774: PUSH
28775: LD_INT 48
28777: PUSH
28778: LD_INT 49
28780: PUSH
28781: LD_INT 50
28783: PUSH
28784: LD_INT 51
28786: PUSH
28787: LD_INT 52
28789: PUSH
28790: LD_INT 53
28792: PUSH
28793: LD_INT 54
28795: PUSH
28796: LD_INT 55
28798: PUSH
28799: LD_INT 56
28801: PUSH
28802: LD_INT 57
28804: PUSH
28805: LD_INT 58
28807: PUSH
28808: LD_INT 59
28810: PUSH
28811: LD_INT 63
28813: PUSH
28814: LD_INT 64
28816: PUSH
28817: LD_INT 65
28819: PUSH
28820: LD_INT 82
28822: PUSH
28823: LD_INT 83
28825: PUSH
28826: LD_INT 84
28828: PUSH
28829: LD_INT 85
28831: PUSH
28832: LD_INT 86
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: LIST
28846: LIST
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: LIST
28853: LIST
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: LIST
28863: LIST
28864: LIST
28865: LIST
28866: LIST
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: LIST
28872: LIST
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: LIST
28878: LIST
28879: LIST
28880: LIST
28881: LIST
28882: LIST
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
28890: GO 28893
28892: POP
// if state > - 1 and state < 3 then
28893: LD_VAR 0 3
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: GREATER
28902: PUSH
28903: LD_VAR 0 3
28907: PUSH
28908: LD_INT 3
28910: LESS
28911: AND
28912: IFFALSE 28969
// for i in result do
28914: LD_ADDR_VAR 0 5
28918: PUSH
28919: LD_VAR 0 4
28923: PUSH
28924: FOR_IN
28925: IFFALSE 28967
// if GetTech ( i , side ) <> state then
28927: LD_VAR 0 5
28931: PPUSH
28932: LD_VAR 0 1
28936: PPUSH
28937: CALL_OW 321
28941: PUSH
28942: LD_VAR 0 3
28946: NONEQUAL
28947: IFFALSE 28965
// result := result diff i ;
28949: LD_ADDR_VAR 0 4
28953: PUSH
28954: LD_VAR 0 4
28958: PUSH
28959: LD_VAR 0 5
28963: DIFF
28964: ST_TO_ADDR
28965: GO 28924
28967: POP
28968: POP
// end ;
28969: LD_VAR 0 4
28973: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
// result := true ;
28979: LD_ADDR_VAR 0 3
28983: PUSH
28984: LD_INT 1
28986: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28987: LD_ADDR_VAR 0 5
28991: PUSH
28992: LD_VAR 0 2
28996: PPUSH
28997: CALL_OW 480
29001: ST_TO_ADDR
// if not tmp then
29002: LD_VAR 0 5
29006: NOT
29007: IFFALSE 29011
// exit ;
29009: GO 29060
// for i in tmp do
29011: LD_ADDR_VAR 0 4
29015: PUSH
29016: LD_VAR 0 5
29020: PUSH
29021: FOR_IN
29022: IFFALSE 29058
// if GetTech ( i , side ) <> state_researched then
29024: LD_VAR 0 4
29028: PPUSH
29029: LD_VAR 0 1
29033: PPUSH
29034: CALL_OW 321
29038: PUSH
29039: LD_INT 2
29041: NONEQUAL
29042: IFFALSE 29056
// begin result := false ;
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 0
29051: ST_TO_ADDR
// exit ;
29052: POP
29053: POP
29054: GO 29060
// end ;
29056: GO 29021
29058: POP
29059: POP
// end ;
29060: LD_VAR 0 3
29064: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29065: LD_INT 0
29067: PPUSH
29068: PPUSH
29069: PPUSH
29070: PPUSH
29071: PPUSH
29072: PPUSH
29073: PPUSH
29074: PPUSH
29075: PPUSH
29076: PPUSH
29077: PPUSH
29078: PPUSH
29079: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29080: LD_VAR 0 1
29084: NOT
29085: PUSH
29086: LD_VAR 0 1
29090: PPUSH
29091: CALL_OW 257
29095: PUSH
29096: LD_INT 9
29098: NONEQUAL
29099: OR
29100: IFFALSE 29104
// exit ;
29102: GO 29677
// side := GetSide ( unit ) ;
29104: LD_ADDR_VAR 0 9
29108: PUSH
29109: LD_VAR 0 1
29113: PPUSH
29114: CALL_OW 255
29118: ST_TO_ADDR
// tech_space := tech_spacanom ;
29119: LD_ADDR_VAR 0 12
29123: PUSH
29124: LD_INT 29
29126: ST_TO_ADDR
// tech_time := tech_taurad ;
29127: LD_ADDR_VAR 0 13
29131: PUSH
29132: LD_INT 28
29134: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29135: LD_ADDR_VAR 0 11
29139: PUSH
29140: LD_VAR 0 1
29144: PPUSH
29145: CALL_OW 310
29149: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29150: LD_VAR 0 11
29154: PPUSH
29155: CALL_OW 247
29159: PUSH
29160: LD_INT 2
29162: EQUAL
29163: IFFALSE 29167
// exit ;
29165: GO 29677
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29167: LD_ADDR_VAR 0 8
29171: PUSH
29172: LD_INT 81
29174: PUSH
29175: LD_VAR 0 9
29179: PUSH
29180: EMPTY
29181: LIST
29182: LIST
29183: PUSH
29184: LD_INT 3
29186: PUSH
29187: LD_INT 21
29189: PUSH
29190: LD_INT 3
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: ST_TO_ADDR
// if not tmp then
29210: LD_VAR 0 8
29214: NOT
29215: IFFALSE 29219
// exit ;
29217: GO 29677
// if in_unit then
29219: LD_VAR 0 11
29223: IFFALSE 29247
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29225: LD_ADDR_VAR 0 10
29229: PUSH
29230: LD_VAR 0 8
29234: PPUSH
29235: LD_VAR 0 11
29239: PPUSH
29240: CALL_OW 74
29244: ST_TO_ADDR
29245: GO 29267
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29247: LD_ADDR_VAR 0 10
29251: PUSH
29252: LD_VAR 0 8
29256: PPUSH
29257: LD_VAR 0 1
29261: PPUSH
29262: CALL_OW 74
29266: ST_TO_ADDR
// if not enemy then
29267: LD_VAR 0 10
29271: NOT
29272: IFFALSE 29276
// exit ;
29274: GO 29677
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29276: LD_VAR 0 11
29280: PUSH
29281: LD_VAR 0 11
29285: PPUSH
29286: LD_VAR 0 10
29290: PPUSH
29291: CALL_OW 296
29295: PUSH
29296: LD_INT 13
29298: GREATER
29299: AND
29300: PUSH
29301: LD_VAR 0 1
29305: PPUSH
29306: LD_VAR 0 10
29310: PPUSH
29311: CALL_OW 296
29315: PUSH
29316: LD_INT 12
29318: GREATER
29319: OR
29320: IFFALSE 29324
// exit ;
29322: GO 29677
// missile := [ 1 ] ;
29324: LD_ADDR_VAR 0 14
29328: PUSH
29329: LD_INT 1
29331: PUSH
29332: EMPTY
29333: LIST
29334: ST_TO_ADDR
// if Researched ( side , tech_space ) then
29335: LD_VAR 0 9
29339: PPUSH
29340: LD_VAR 0 12
29344: PPUSH
29345: CALL_OW 325
29349: IFFALSE 29378
// missile := Replace ( missile , missile + 1 , 2 ) ;
29351: LD_ADDR_VAR 0 14
29355: PUSH
29356: LD_VAR 0 14
29360: PPUSH
29361: LD_VAR 0 14
29365: PUSH
29366: LD_INT 1
29368: PLUS
29369: PPUSH
29370: LD_INT 2
29372: PPUSH
29373: CALL_OW 1
29377: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
29378: LD_VAR 0 9
29382: PPUSH
29383: LD_VAR 0 13
29387: PPUSH
29388: CALL_OW 325
29392: PUSH
29393: LD_VAR 0 10
29397: PPUSH
29398: CALL_OW 255
29402: PPUSH
29403: LD_VAR 0 13
29407: PPUSH
29408: CALL_OW 325
29412: NOT
29413: AND
29414: IFFALSE 29443
// missile := Replace ( missile , missile + 1 , 3 ) ;
29416: LD_ADDR_VAR 0 14
29420: PUSH
29421: LD_VAR 0 14
29425: PPUSH
29426: LD_VAR 0 14
29430: PUSH
29431: LD_INT 1
29433: PLUS
29434: PPUSH
29435: LD_INT 3
29437: PPUSH
29438: CALL_OW 1
29442: ST_TO_ADDR
// if missile < 2 then
29443: LD_VAR 0 14
29447: PUSH
29448: LD_INT 2
29450: LESS
29451: IFFALSE 29455
// exit ;
29453: GO 29677
// x := GetX ( enemy ) ;
29455: LD_ADDR_VAR 0 4
29459: PUSH
29460: LD_VAR 0 10
29464: PPUSH
29465: CALL_OW 250
29469: ST_TO_ADDR
// y := GetY ( enemy ) ;
29470: LD_ADDR_VAR 0 5
29474: PUSH
29475: LD_VAR 0 10
29479: PPUSH
29480: CALL_OW 251
29484: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
29485: LD_ADDR_VAR 0 6
29489: PUSH
29490: LD_VAR 0 4
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PPUSH
29499: LD_INT 1
29501: PPUSH
29502: CALL_OW 12
29506: PLUS
29507: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
29508: LD_ADDR_VAR 0 7
29512: PUSH
29513: LD_VAR 0 5
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PPUSH
29522: LD_INT 1
29524: PPUSH
29525: CALL_OW 12
29529: PLUS
29530: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29531: LD_VAR 0 6
29535: PPUSH
29536: LD_VAR 0 7
29540: PPUSH
29541: CALL_OW 488
29545: NOT
29546: IFFALSE 29568
// begin _x := x ;
29548: LD_ADDR_VAR 0 6
29552: PUSH
29553: LD_VAR 0 4
29557: ST_TO_ADDR
// _y := y ;
29558: LD_ADDR_VAR 0 7
29562: PUSH
29563: LD_VAR 0 5
29567: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
29568: LD_ADDR_VAR 0 3
29572: PUSH
29573: LD_INT 1
29575: PPUSH
29576: LD_VAR 0 14
29580: PPUSH
29581: CALL_OW 12
29585: ST_TO_ADDR
// case i of 1 :
29586: LD_VAR 0 3
29590: PUSH
29591: LD_INT 1
29593: DOUBLE
29594: EQUAL
29595: IFTRUE 29599
29597: GO 29616
29599: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
29600: LD_VAR 0 1
29604: PPUSH
29605: LD_VAR 0 10
29609: PPUSH
29610: CALL_OW 115
29614: GO 29677
29616: LD_INT 2
29618: DOUBLE
29619: EQUAL
29620: IFTRUE 29624
29622: GO 29646
29624: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
29625: LD_VAR 0 1
29629: PPUSH
29630: LD_VAR 0 6
29634: PPUSH
29635: LD_VAR 0 7
29639: PPUSH
29640: CALL_OW 153
29644: GO 29677
29646: LD_INT 3
29648: DOUBLE
29649: EQUAL
29650: IFTRUE 29654
29652: GO 29676
29654: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
29655: LD_VAR 0 1
29659: PPUSH
29660: LD_VAR 0 6
29664: PPUSH
29665: LD_VAR 0 7
29669: PPUSH
29670: CALL_OW 154
29674: GO 29677
29676: POP
// end ;
29677: LD_VAR 0 2
29681: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
29682: LD_INT 0
29684: PPUSH
29685: PPUSH
29686: PPUSH
29687: PPUSH
29688: PPUSH
29689: PPUSH
// if not unit or not building then
29690: LD_VAR 0 1
29694: NOT
29695: PUSH
29696: LD_VAR 0 2
29700: NOT
29701: OR
29702: IFFALSE 29706
// exit ;
29704: GO 29864
// x := GetX ( building ) ;
29706: LD_ADDR_VAR 0 5
29710: PUSH
29711: LD_VAR 0 2
29715: PPUSH
29716: CALL_OW 250
29720: ST_TO_ADDR
// y := GetY ( building ) ;
29721: LD_ADDR_VAR 0 6
29725: PUSH
29726: LD_VAR 0 2
29730: PPUSH
29731: CALL_OW 251
29735: ST_TO_ADDR
// for i = 0 to 5 do
29736: LD_ADDR_VAR 0 4
29740: PUSH
29741: DOUBLE
29742: LD_INT 0
29744: DEC
29745: ST_TO_ADDR
29746: LD_INT 5
29748: PUSH
29749: FOR_TO
29750: IFFALSE 29862
// begin _x := ShiftX ( x , i , 3 ) ;
29752: LD_ADDR_VAR 0 7
29756: PUSH
29757: LD_VAR 0 5
29761: PPUSH
29762: LD_VAR 0 4
29766: PPUSH
29767: LD_INT 3
29769: PPUSH
29770: CALL_OW 272
29774: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
29775: LD_ADDR_VAR 0 8
29779: PUSH
29780: LD_VAR 0 6
29784: PPUSH
29785: LD_VAR 0 4
29789: PPUSH
29790: LD_INT 3
29792: PPUSH
29793: CALL_OW 273
29797: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29798: LD_VAR 0 7
29802: PPUSH
29803: LD_VAR 0 8
29807: PPUSH
29808: CALL_OW 488
29812: NOT
29813: IFFALSE 29817
// continue ;
29815: GO 29749
// if HexInfo ( _x , _y ) = 0 then
29817: LD_VAR 0 7
29821: PPUSH
29822: LD_VAR 0 8
29826: PPUSH
29827: CALL_OW 428
29831: PUSH
29832: LD_INT 0
29834: EQUAL
29835: IFFALSE 29860
// begin ComMoveXY ( unit , _x , _y ) ;
29837: LD_VAR 0 1
29841: PPUSH
29842: LD_VAR 0 7
29846: PPUSH
29847: LD_VAR 0 8
29851: PPUSH
29852: CALL_OW 111
// exit ;
29856: POP
29857: POP
29858: GO 29864
// end ; end ;
29860: GO 29749
29862: POP
29863: POP
// end ;
29864: LD_VAR 0 3
29868: RET
// export function ScanBase ( side , base_area ) ; begin
29869: LD_INT 0
29871: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29872: LD_ADDR_VAR 0 3
29876: PUSH
29877: LD_VAR 0 2
29881: PPUSH
29882: LD_INT 81
29884: PUSH
29885: LD_VAR 0 1
29889: PUSH
29890: EMPTY
29891: LIST
29892: LIST
29893: PPUSH
29894: CALL_OW 70
29898: ST_TO_ADDR
// end ;
29899: LD_VAR 0 3
29903: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29904: LD_INT 0
29906: PPUSH
29907: PPUSH
29908: PPUSH
29909: PPUSH
// result := false ;
29910: LD_ADDR_VAR 0 2
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
// side := GetSide ( unit ) ;
29918: LD_ADDR_VAR 0 3
29922: PUSH
29923: LD_VAR 0 1
29927: PPUSH
29928: CALL_OW 255
29932: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29933: LD_ADDR_VAR 0 4
29937: PUSH
29938: LD_VAR 0 1
29942: PPUSH
29943: CALL_OW 248
29947: ST_TO_ADDR
// case nat of 1 :
29948: LD_VAR 0 4
29952: PUSH
29953: LD_INT 1
29955: DOUBLE
29956: EQUAL
29957: IFTRUE 29961
29959: GO 29972
29961: POP
// tech := tech_lassight ; 2 :
29962: LD_ADDR_VAR 0 5
29966: PUSH
29967: LD_INT 12
29969: ST_TO_ADDR
29970: GO 30011
29972: LD_INT 2
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 29991
29980: POP
// tech := tech_mortar ; 3 :
29981: LD_ADDR_VAR 0 5
29985: PUSH
29986: LD_INT 41
29988: ST_TO_ADDR
29989: GO 30011
29991: LD_INT 3
29993: DOUBLE
29994: EQUAL
29995: IFTRUE 29999
29997: GO 30010
29999: POP
// tech := tech_bazooka ; end ;
30000: LD_ADDR_VAR 0 5
30004: PUSH
30005: LD_INT 44
30007: ST_TO_ADDR
30008: GO 30011
30010: POP
// if Researched ( side , tech ) then
30011: LD_VAR 0 3
30015: PPUSH
30016: LD_VAR 0 5
30020: PPUSH
30021: CALL_OW 325
30025: IFFALSE 30052
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30027: LD_ADDR_VAR 0 2
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: LD_INT 8
30037: PUSH
30038: LD_INT 9
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: PUSH
30046: LD_VAR 0 4
30050: ARRAY
30051: ST_TO_ADDR
// end ;
30052: LD_VAR 0 2
30056: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30057: LD_INT 0
30059: PPUSH
30060: PPUSH
30061: PPUSH
// if not mines then
30062: LD_VAR 0 2
30066: NOT
30067: IFFALSE 30071
// exit ;
30069: GO 30215
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30071: LD_ADDR_VAR 0 5
30075: PUSH
30076: LD_INT 81
30078: PUSH
30079: LD_VAR 0 1
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: PUSH
30088: LD_INT 3
30090: PUSH
30091: LD_INT 21
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PPUSH
30109: CALL_OW 69
30113: ST_TO_ADDR
// for i in mines do
30114: LD_ADDR_VAR 0 4
30118: PUSH
30119: LD_VAR 0 2
30123: PUSH
30124: FOR_IN
30125: IFFALSE 30213
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30127: LD_VAR 0 4
30131: PUSH
30132: LD_INT 1
30134: ARRAY
30135: PPUSH
30136: LD_VAR 0 4
30140: PUSH
30141: LD_INT 2
30143: ARRAY
30144: PPUSH
30145: CALL_OW 458
30149: NOT
30150: IFFALSE 30154
// continue ;
30152: GO 30124
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30154: LD_VAR 0 4
30158: PUSH
30159: LD_INT 1
30161: ARRAY
30162: PPUSH
30163: LD_VAR 0 4
30167: PUSH
30168: LD_INT 2
30170: ARRAY
30171: PPUSH
30172: CALL_OW 428
30176: PUSH
30177: LD_VAR 0 5
30181: IN
30182: IFFALSE 30211
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30184: LD_VAR 0 4
30188: PUSH
30189: LD_INT 1
30191: ARRAY
30192: PPUSH
30193: LD_VAR 0 4
30197: PUSH
30198: LD_INT 2
30200: ARRAY
30201: PPUSH
30202: LD_VAR 0 1
30206: PPUSH
30207: CALL_OW 456
// end ;
30211: GO 30124
30213: POP
30214: POP
// end ;
30215: LD_VAR 0 3
30219: RET
// export function Count ( array ) ; begin
30220: LD_INT 0
30222: PPUSH
// result := array + 0 ;
30223: LD_ADDR_VAR 0 2
30227: PUSH
30228: LD_VAR 0 1
30232: PUSH
30233: LD_INT 0
30235: PLUS
30236: ST_TO_ADDR
// end ;
30237: LD_VAR 0 2
30241: RET
// export function IsEmpty ( building ) ; begin
30242: LD_INT 0
30244: PPUSH
// if not building then
30245: LD_VAR 0 1
30249: NOT
30250: IFFALSE 30254
// exit ;
30252: GO 30297
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30254: LD_ADDR_VAR 0 2
30258: PUSH
30259: LD_VAR 0 1
30263: PUSH
30264: LD_INT 22
30266: PUSH
30267: LD_VAR 0 1
30271: PPUSH
30272: CALL_OW 255
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: LD_INT 58
30283: PUSH
30284: EMPTY
30285: LIST
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PPUSH
30291: CALL_OW 69
30295: IN
30296: ST_TO_ADDR
// end ;
30297: LD_VAR 0 2
30301: RET
// export function IsNotFull ( building ) ; var places ; begin
30302: LD_INT 0
30304: PPUSH
30305: PPUSH
// if not building then
30306: LD_VAR 0 1
30310: NOT
30311: IFFALSE 30315
// exit ;
30313: GO 30343
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
30315: LD_ADDR_VAR 0 2
30319: PUSH
30320: LD_VAR 0 1
30324: PPUSH
30325: LD_INT 3
30327: PUSH
30328: LD_INT 62
30330: PUSH
30331: EMPTY
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PPUSH
30338: CALL_OW 72
30342: ST_TO_ADDR
// end ;
30343: LD_VAR 0 2
30347: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
30348: LD_INT 0
30350: PPUSH
30351: PPUSH
30352: PPUSH
30353: PPUSH
// tmp := [ ] ;
30354: LD_ADDR_VAR 0 3
30358: PUSH
30359: EMPTY
30360: ST_TO_ADDR
// list := [ ] ;
30361: LD_ADDR_VAR 0 5
30365: PUSH
30366: EMPTY
30367: ST_TO_ADDR
// for i = 16 to 25 do
30368: LD_ADDR_VAR 0 4
30372: PUSH
30373: DOUBLE
30374: LD_INT 16
30376: DEC
30377: ST_TO_ADDR
30378: LD_INT 25
30380: PUSH
30381: FOR_TO
30382: IFFALSE 30455
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
30384: LD_ADDR_VAR 0 3
30388: PUSH
30389: LD_VAR 0 3
30393: PUSH
30394: LD_INT 22
30396: PUSH
30397: LD_VAR 0 1
30401: PPUSH
30402: CALL_OW 255
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 91
30413: PUSH
30414: LD_VAR 0 1
30418: PUSH
30419: LD_INT 6
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 30
30429: PUSH
30430: LD_VAR 0 4
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: PUSH
30444: EMPTY
30445: LIST
30446: PPUSH
30447: CALL_OW 69
30451: ADD
30452: ST_TO_ADDR
30453: GO 30381
30455: POP
30456: POP
// for i = 1 to tmp do
30457: LD_ADDR_VAR 0 4
30461: PUSH
30462: DOUBLE
30463: LD_INT 1
30465: DEC
30466: ST_TO_ADDR
30467: LD_VAR 0 3
30471: PUSH
30472: FOR_TO
30473: IFFALSE 30561
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
30475: LD_ADDR_VAR 0 5
30479: PUSH
30480: LD_VAR 0 5
30484: PUSH
30485: LD_VAR 0 3
30489: PUSH
30490: LD_VAR 0 4
30494: ARRAY
30495: PPUSH
30496: CALL_OW 266
30500: PUSH
30501: LD_VAR 0 3
30505: PUSH
30506: LD_VAR 0 4
30510: ARRAY
30511: PPUSH
30512: CALL_OW 250
30516: PUSH
30517: LD_VAR 0 3
30521: PUSH
30522: LD_VAR 0 4
30526: ARRAY
30527: PPUSH
30528: CALL_OW 251
30532: PUSH
30533: LD_VAR 0 3
30537: PUSH
30538: LD_VAR 0 4
30542: ARRAY
30543: PPUSH
30544: CALL_OW 254
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: PUSH
30555: EMPTY
30556: LIST
30557: ADD
30558: ST_TO_ADDR
30559: GO 30472
30561: POP
30562: POP
// result := list ;
30563: LD_ADDR_VAR 0 2
30567: PUSH
30568: LD_VAR 0 5
30572: ST_TO_ADDR
// end ;
30573: LD_VAR 0 2
30577: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
30578: LD_INT 0
30580: PPUSH
30581: PPUSH
30582: PPUSH
30583: PPUSH
30584: PPUSH
30585: PPUSH
30586: PPUSH
// if not factory then
30587: LD_VAR 0 1
30591: NOT
30592: IFFALSE 30596
// exit ;
30594: GO 31189
// if control = control_apeman then
30596: LD_VAR 0 4
30600: PUSH
30601: LD_INT 5
30603: EQUAL
30604: IFFALSE 30713
// begin tmp := UnitsInside ( factory ) ;
30606: LD_ADDR_VAR 0 8
30610: PUSH
30611: LD_VAR 0 1
30615: PPUSH
30616: CALL_OW 313
30620: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30621: LD_VAR 0 8
30625: PPUSH
30626: LD_INT 25
30628: PUSH
30629: LD_INT 12
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: PPUSH
30636: CALL_OW 72
30640: NOT
30641: IFFALSE 30651
// control := control_manual ;
30643: LD_ADDR_VAR 0 4
30647: PUSH
30648: LD_INT 1
30650: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30651: LD_ADDR_VAR 0 8
30655: PUSH
30656: LD_VAR 0 1
30660: PPUSH
30661: CALL 30348 0 1
30665: ST_TO_ADDR
// if tmp then
30666: LD_VAR 0 8
30670: IFFALSE 30713
// begin for i in tmp do
30672: LD_ADDR_VAR 0 7
30676: PUSH
30677: LD_VAR 0 8
30681: PUSH
30682: FOR_IN
30683: IFFALSE 30711
// if i [ 1 ] = b_ext_radio then
30685: LD_VAR 0 7
30689: PUSH
30690: LD_INT 1
30692: ARRAY
30693: PUSH
30694: LD_INT 22
30696: EQUAL
30697: IFFALSE 30709
// begin control := control_remote ;
30699: LD_ADDR_VAR 0 4
30703: PUSH
30704: LD_INT 2
30706: ST_TO_ADDR
// break ;
30707: GO 30711
// end ;
30709: GO 30682
30711: POP
30712: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30713: LD_VAR 0 1
30717: PPUSH
30718: LD_VAR 0 2
30722: PPUSH
30723: LD_VAR 0 3
30727: PPUSH
30728: LD_VAR 0 4
30732: PPUSH
30733: LD_VAR 0 5
30737: PPUSH
30738: CALL_OW 448
30742: IFFALSE 30777
// begin result := [ chassis , engine , control , weapon ] ;
30744: LD_ADDR_VAR 0 6
30748: PUSH
30749: LD_VAR 0 2
30753: PUSH
30754: LD_VAR 0 3
30758: PUSH
30759: LD_VAR 0 4
30763: PUSH
30764: LD_VAR 0 5
30768: PUSH
30769: EMPTY
30770: LIST
30771: LIST
30772: LIST
30773: LIST
30774: ST_TO_ADDR
// exit ;
30775: GO 31189
// end ; _chassis := AvailableChassisList ( factory ) ;
30777: LD_ADDR_VAR 0 9
30781: PUSH
30782: LD_VAR 0 1
30786: PPUSH
30787: CALL_OW 475
30791: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30792: LD_ADDR_VAR 0 11
30796: PUSH
30797: LD_VAR 0 1
30801: PPUSH
30802: CALL_OW 476
30806: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30807: LD_ADDR_VAR 0 12
30811: PUSH
30812: LD_VAR 0 1
30816: PPUSH
30817: CALL_OW 477
30821: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30822: LD_ADDR_VAR 0 10
30826: PUSH
30827: LD_VAR 0 1
30831: PPUSH
30832: CALL_OW 478
30836: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30837: LD_VAR 0 9
30841: NOT
30842: PUSH
30843: LD_VAR 0 11
30847: NOT
30848: OR
30849: PUSH
30850: LD_VAR 0 12
30854: NOT
30855: OR
30856: PUSH
30857: LD_VAR 0 10
30861: NOT
30862: OR
30863: IFFALSE 30898
// begin result := [ chassis , engine , control , weapon ] ;
30865: LD_ADDR_VAR 0 6
30869: PUSH
30870: LD_VAR 0 2
30874: PUSH
30875: LD_VAR 0 3
30879: PUSH
30880: LD_VAR 0 4
30884: PUSH
30885: LD_VAR 0 5
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
// exit ;
30896: GO 31189
// end ; if not chassis in _chassis then
30898: LD_VAR 0 2
30902: PUSH
30903: LD_VAR 0 9
30907: IN
30908: NOT
30909: IFFALSE 30935
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30911: LD_ADDR_VAR 0 2
30915: PUSH
30916: LD_VAR 0 9
30920: PUSH
30921: LD_INT 1
30923: PPUSH
30924: LD_VAR 0 9
30928: PPUSH
30929: CALL_OW 12
30933: ARRAY
30934: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30935: LD_VAR 0 2
30939: PPUSH
30940: LD_VAR 0 3
30944: PPUSH
30945: CALL 31194 0 2
30949: NOT
30950: IFFALSE 31009
// repeat engine := _engine [ 1 ] ;
30952: LD_ADDR_VAR 0 3
30956: PUSH
30957: LD_VAR 0 11
30961: PUSH
30962: LD_INT 1
30964: ARRAY
30965: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30966: LD_ADDR_VAR 0 11
30970: PUSH
30971: LD_VAR 0 11
30975: PPUSH
30976: LD_INT 1
30978: PPUSH
30979: CALL_OW 3
30983: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30984: LD_VAR 0 2
30988: PPUSH
30989: LD_VAR 0 3
30993: PPUSH
30994: CALL 31194 0 2
30998: PUSH
30999: LD_VAR 0 11
31003: PUSH
31004: EMPTY
31005: EQUAL
31006: OR
31007: IFFALSE 30952
// if not control in _control then
31009: LD_VAR 0 4
31013: PUSH
31014: LD_VAR 0 12
31018: IN
31019: NOT
31020: IFFALSE 31046
// control := _control [ rand ( 1 , _control ) ] ;
31022: LD_ADDR_VAR 0 4
31026: PUSH
31027: LD_VAR 0 12
31031: PUSH
31032: LD_INT 1
31034: PPUSH
31035: LD_VAR 0 12
31039: PPUSH
31040: CALL_OW 12
31044: ARRAY
31045: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31046: LD_VAR 0 2
31050: PPUSH
31051: LD_VAR 0 5
31055: PPUSH
31056: CALL 31414 0 2
31060: NOT
31061: IFFALSE 31120
// repeat weapon := _weapon [ 1 ] ;
31063: LD_ADDR_VAR 0 5
31067: PUSH
31068: LD_VAR 0 10
31072: PUSH
31073: LD_INT 1
31075: ARRAY
31076: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31077: LD_ADDR_VAR 0 10
31081: PUSH
31082: LD_VAR 0 10
31086: PPUSH
31087: LD_INT 1
31089: PPUSH
31090: CALL_OW 3
31094: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31095: LD_VAR 0 2
31099: PPUSH
31100: LD_VAR 0 5
31104: PPUSH
31105: CALL 31414 0 2
31109: PUSH
31110: LD_VAR 0 10
31114: PUSH
31115: EMPTY
31116: EQUAL
31117: OR
31118: IFFALSE 31063
// result := [ ] ;
31120: LD_ADDR_VAR 0 6
31124: PUSH
31125: EMPTY
31126: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31127: LD_VAR 0 1
31131: PPUSH
31132: LD_VAR 0 2
31136: PPUSH
31137: LD_VAR 0 3
31141: PPUSH
31142: LD_VAR 0 4
31146: PPUSH
31147: LD_VAR 0 5
31151: PPUSH
31152: CALL_OW 448
31156: IFFALSE 31189
// result := [ chassis , engine , control , weapon ] ;
31158: LD_ADDR_VAR 0 6
31162: PUSH
31163: LD_VAR 0 2
31167: PUSH
31168: LD_VAR 0 3
31172: PUSH
31173: LD_VAR 0 4
31177: PUSH
31178: LD_VAR 0 5
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: ST_TO_ADDR
// end ;
31189: LD_VAR 0 6
31193: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31194: LD_INT 0
31196: PPUSH
// if not chassis or not engine then
31197: LD_VAR 0 1
31201: NOT
31202: PUSH
31203: LD_VAR 0 2
31207: NOT
31208: OR
31209: IFFALSE 31213
// exit ;
31211: GO 31409
// case engine of engine_solar :
31213: LD_VAR 0 2
31217: PUSH
31218: LD_INT 2
31220: DOUBLE
31221: EQUAL
31222: IFTRUE 31226
31224: GO 31264
31226: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31227: LD_ADDR_VAR 0 3
31231: PUSH
31232: LD_INT 11
31234: PUSH
31235: LD_INT 12
31237: PUSH
31238: LD_INT 13
31240: PUSH
31241: LD_INT 14
31243: PUSH
31244: LD_INT 1
31246: PUSH
31247: LD_INT 2
31249: PUSH
31250: LD_INT 3
31252: PUSH
31253: EMPTY
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: ST_TO_ADDR
31262: GO 31393
31264: LD_INT 1
31266: DOUBLE
31267: EQUAL
31268: IFTRUE 31272
31270: GO 31334
31272: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31273: LD_ADDR_VAR 0 3
31277: PUSH
31278: LD_INT 11
31280: PUSH
31281: LD_INT 12
31283: PUSH
31284: LD_INT 13
31286: PUSH
31287: LD_INT 14
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 3
31298: PUSH
31299: LD_INT 4
31301: PUSH
31302: LD_INT 5
31304: PUSH
31305: LD_INT 21
31307: PUSH
31308: LD_INT 23
31310: PUSH
31311: LD_INT 22
31313: PUSH
31314: LD_INT 24
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: ST_TO_ADDR
31332: GO 31393
31334: LD_INT 3
31336: DOUBLE
31337: EQUAL
31338: IFTRUE 31342
31340: GO 31392
31342: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31343: LD_ADDR_VAR 0 3
31347: PUSH
31348: LD_INT 13
31350: PUSH
31351: LD_INT 14
31353: PUSH
31354: LD_INT 2
31356: PUSH
31357: LD_INT 3
31359: PUSH
31360: LD_INT 4
31362: PUSH
31363: LD_INT 5
31365: PUSH
31366: LD_INT 21
31368: PUSH
31369: LD_INT 22
31371: PUSH
31372: LD_INT 23
31374: PUSH
31375: LD_INT 24
31377: PUSH
31378: EMPTY
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: ST_TO_ADDR
31390: GO 31393
31392: POP
// result := ( chassis in result ) ;
31393: LD_ADDR_VAR 0 3
31397: PUSH
31398: LD_VAR 0 1
31402: PUSH
31403: LD_VAR 0 3
31407: IN
31408: ST_TO_ADDR
// end ;
31409: LD_VAR 0 3
31413: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
31414: LD_INT 0
31416: PPUSH
// if not chassis or not weapon then
31417: LD_VAR 0 1
31421: NOT
31422: PUSH
31423: LD_VAR 0 2
31427: NOT
31428: OR
31429: IFFALSE 31433
// exit ;
31431: GO 32493
// case weapon of us_machine_gun :
31433: LD_VAR 0 2
31437: PUSH
31438: LD_INT 2
31440: DOUBLE
31441: EQUAL
31442: IFTRUE 31446
31444: GO 31476
31446: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
31447: LD_ADDR_VAR 0 3
31451: PUSH
31452: LD_INT 1
31454: PUSH
31455: LD_INT 2
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: LD_INT 4
31463: PUSH
31464: LD_INT 5
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
31474: GO 32477
31476: LD_INT 3
31478: DOUBLE
31479: EQUAL
31480: IFTRUE 31484
31482: GO 31514
31484: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
31485: LD_ADDR_VAR 0 3
31489: PUSH
31490: LD_INT 1
31492: PUSH
31493: LD_INT 2
31495: PUSH
31496: LD_INT 3
31498: PUSH
31499: LD_INT 4
31501: PUSH
31502: LD_INT 5
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
31512: GO 32477
31514: LD_INT 11
31516: DOUBLE
31517: EQUAL
31518: IFTRUE 31522
31520: GO 31552
31522: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
31523: LD_ADDR_VAR 0 3
31527: PUSH
31528: LD_INT 1
31530: PUSH
31531: LD_INT 2
31533: PUSH
31534: LD_INT 3
31536: PUSH
31537: LD_INT 4
31539: PUSH
31540: LD_INT 5
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: ST_TO_ADDR
31550: GO 32477
31552: LD_INT 4
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31586
31560: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
31561: LD_ADDR_VAR 0 3
31565: PUSH
31566: LD_INT 2
31568: PUSH
31569: LD_INT 3
31571: PUSH
31572: LD_INT 4
31574: PUSH
31575: LD_INT 5
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: LIST
31583: ST_TO_ADDR
31584: GO 32477
31586: LD_INT 5
31588: DOUBLE
31589: EQUAL
31590: IFTRUE 31594
31592: GO 31620
31594: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
31595: LD_ADDR_VAR 0 3
31599: PUSH
31600: LD_INT 2
31602: PUSH
31603: LD_INT 3
31605: PUSH
31606: LD_INT 4
31608: PUSH
31609: LD_INT 5
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
31618: GO 32477
31620: LD_INT 9
31622: DOUBLE
31623: EQUAL
31624: IFTRUE 31628
31626: GO 31654
31628: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: LD_INT 2
31636: PUSH
31637: LD_INT 3
31639: PUSH
31640: LD_INT 4
31642: PUSH
31643: LD_INT 5
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
31652: GO 32477
31654: LD_INT 7
31656: DOUBLE
31657: EQUAL
31658: IFTRUE 31662
31660: GO 31688
31662: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_INT 2
31670: PUSH
31671: LD_INT 3
31673: PUSH
31674: LD_INT 4
31676: PUSH
31677: LD_INT 5
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: ST_TO_ADDR
31686: GO 32477
31688: LD_INT 12
31690: DOUBLE
31691: EQUAL
31692: IFTRUE 31696
31694: GO 31722
31696: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31697: LD_ADDR_VAR 0 3
31701: PUSH
31702: LD_INT 2
31704: PUSH
31705: LD_INT 3
31707: PUSH
31708: LD_INT 4
31710: PUSH
31711: LD_INT 5
31713: PUSH
31714: EMPTY
31715: LIST
31716: LIST
31717: LIST
31718: LIST
31719: ST_TO_ADDR
31720: GO 32477
31722: LD_INT 13
31724: DOUBLE
31725: EQUAL
31726: IFTRUE 31730
31728: GO 31756
31730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31731: LD_ADDR_VAR 0 3
31735: PUSH
31736: LD_INT 2
31738: PUSH
31739: LD_INT 3
31741: PUSH
31742: LD_INT 4
31744: PUSH
31745: LD_INT 5
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: LIST
31752: LIST
31753: ST_TO_ADDR
31754: GO 32477
31756: LD_INT 14
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31782
31764: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31765: LD_ADDR_VAR 0 3
31769: PUSH
31770: LD_INT 4
31772: PUSH
31773: LD_INT 5
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: ST_TO_ADDR
31780: GO 32477
31782: LD_INT 6
31784: DOUBLE
31785: EQUAL
31786: IFTRUE 31790
31788: GO 31808
31790: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31791: LD_ADDR_VAR 0 3
31795: PUSH
31796: LD_INT 4
31798: PUSH
31799: LD_INT 5
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: ST_TO_ADDR
31806: GO 32477
31808: LD_INT 10
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31834
31816: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31817: LD_ADDR_VAR 0 3
31821: PUSH
31822: LD_INT 4
31824: PUSH
31825: LD_INT 5
31827: PUSH
31828: EMPTY
31829: LIST
31830: LIST
31831: ST_TO_ADDR
31832: GO 32477
31834: LD_INT 22
31836: DOUBLE
31837: EQUAL
31838: IFTRUE 31842
31840: GO 31868
31842: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: LD_INT 11
31850: PUSH
31851: LD_INT 12
31853: PUSH
31854: LD_INT 13
31856: PUSH
31857: LD_INT 14
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: ST_TO_ADDR
31866: GO 32477
31868: LD_INT 23
31870: DOUBLE
31871: EQUAL
31872: IFTRUE 31876
31874: GO 31902
31876: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31877: LD_ADDR_VAR 0 3
31881: PUSH
31882: LD_INT 11
31884: PUSH
31885: LD_INT 12
31887: PUSH
31888: LD_INT 13
31890: PUSH
31891: LD_INT 14
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: ST_TO_ADDR
31900: GO 32477
31902: LD_INT 24
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31936
31910: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31911: LD_ADDR_VAR 0 3
31915: PUSH
31916: LD_INT 11
31918: PUSH
31919: LD_INT 12
31921: PUSH
31922: LD_INT 13
31924: PUSH
31925: LD_INT 14
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: ST_TO_ADDR
31934: GO 32477
31936: LD_INT 30
31938: DOUBLE
31939: EQUAL
31940: IFTRUE 31944
31942: GO 31970
31944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31945: LD_ADDR_VAR 0 3
31949: PUSH
31950: LD_INT 11
31952: PUSH
31953: LD_INT 12
31955: PUSH
31956: LD_INT 13
31958: PUSH
31959: LD_INT 14
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: ST_TO_ADDR
31968: GO 32477
31970: LD_INT 25
31972: DOUBLE
31973: EQUAL
31974: IFTRUE 31978
31976: GO 31996
31978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31979: LD_ADDR_VAR 0 3
31983: PUSH
31984: LD_INT 13
31986: PUSH
31987: LD_INT 14
31989: PUSH
31990: EMPTY
31991: LIST
31992: LIST
31993: ST_TO_ADDR
31994: GO 32477
31996: LD_INT 27
31998: DOUBLE
31999: EQUAL
32000: IFTRUE 32004
32002: GO 32022
32004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32005: LD_ADDR_VAR 0 3
32009: PUSH
32010: LD_INT 13
32012: PUSH
32013: LD_INT 14
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: ST_TO_ADDR
32020: GO 32477
32022: LD_INT 92
32024: DOUBLE
32025: EQUAL
32026: IFTRUE 32030
32028: GO 32056
32030: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32031: LD_ADDR_VAR 0 3
32035: PUSH
32036: LD_INT 11
32038: PUSH
32039: LD_INT 12
32041: PUSH
32042: LD_INT 13
32044: PUSH
32045: LD_INT 14
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: ST_TO_ADDR
32054: GO 32477
32056: LD_INT 28
32058: DOUBLE
32059: EQUAL
32060: IFTRUE 32064
32062: GO 32082
32064: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32065: LD_ADDR_VAR 0 3
32069: PUSH
32070: LD_INT 13
32072: PUSH
32073: LD_INT 14
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: ST_TO_ADDR
32080: GO 32477
32082: LD_INT 29
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32108
32090: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32091: LD_ADDR_VAR 0 3
32095: PUSH
32096: LD_INT 13
32098: PUSH
32099: LD_INT 14
32101: PUSH
32102: EMPTY
32103: LIST
32104: LIST
32105: ST_TO_ADDR
32106: GO 32477
32108: LD_INT 31
32110: DOUBLE
32111: EQUAL
32112: IFTRUE 32116
32114: GO 32134
32116: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32117: LD_ADDR_VAR 0 3
32121: PUSH
32122: LD_INT 13
32124: PUSH
32125: LD_INT 14
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: ST_TO_ADDR
32132: GO 32477
32134: LD_INT 26
32136: DOUBLE
32137: EQUAL
32138: IFTRUE 32142
32140: GO 32160
32142: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32143: LD_ADDR_VAR 0 3
32147: PUSH
32148: LD_INT 13
32150: PUSH
32151: LD_INT 14
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: ST_TO_ADDR
32158: GO 32477
32160: LD_INT 42
32162: DOUBLE
32163: EQUAL
32164: IFTRUE 32168
32166: GO 32194
32168: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32169: LD_ADDR_VAR 0 3
32173: PUSH
32174: LD_INT 21
32176: PUSH
32177: LD_INT 22
32179: PUSH
32180: LD_INT 23
32182: PUSH
32183: LD_INT 24
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: LIST
32190: LIST
32191: ST_TO_ADDR
32192: GO 32477
32194: LD_INT 43
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32228
32202: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32203: LD_ADDR_VAR 0 3
32207: PUSH
32208: LD_INT 21
32210: PUSH
32211: LD_INT 22
32213: PUSH
32214: LD_INT 23
32216: PUSH
32217: LD_INT 24
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: ST_TO_ADDR
32226: GO 32477
32228: LD_INT 44
32230: DOUBLE
32231: EQUAL
32232: IFTRUE 32236
32234: GO 32262
32236: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32237: LD_ADDR_VAR 0 3
32241: PUSH
32242: LD_INT 21
32244: PUSH
32245: LD_INT 22
32247: PUSH
32248: LD_INT 23
32250: PUSH
32251: LD_INT 24
32253: PUSH
32254: EMPTY
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: ST_TO_ADDR
32260: GO 32477
32262: LD_INT 45
32264: DOUBLE
32265: EQUAL
32266: IFTRUE 32270
32268: GO 32296
32270: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32271: LD_ADDR_VAR 0 3
32275: PUSH
32276: LD_INT 21
32278: PUSH
32279: LD_INT 22
32281: PUSH
32282: LD_INT 23
32284: PUSH
32285: LD_INT 24
32287: PUSH
32288: EMPTY
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: ST_TO_ADDR
32294: GO 32477
32296: LD_INT 49
32298: DOUBLE
32299: EQUAL
32300: IFTRUE 32304
32302: GO 32330
32304: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
32305: LD_ADDR_VAR 0 3
32309: PUSH
32310: LD_INT 21
32312: PUSH
32313: LD_INT 22
32315: PUSH
32316: LD_INT 23
32318: PUSH
32319: LD_INT 24
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: ST_TO_ADDR
32328: GO 32477
32330: LD_INT 51
32332: DOUBLE
32333: EQUAL
32334: IFTRUE 32338
32336: GO 32364
32338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
32339: LD_ADDR_VAR 0 3
32343: PUSH
32344: LD_INT 21
32346: PUSH
32347: LD_INT 22
32349: PUSH
32350: LD_INT 23
32352: PUSH
32353: LD_INT 24
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: ST_TO_ADDR
32362: GO 32477
32364: LD_INT 52
32366: DOUBLE
32367: EQUAL
32368: IFTRUE 32372
32370: GO 32398
32372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
32373: LD_ADDR_VAR 0 3
32377: PUSH
32378: LD_INT 21
32380: PUSH
32381: LD_INT 22
32383: PUSH
32384: LD_INT 23
32386: PUSH
32387: LD_INT 24
32389: PUSH
32390: EMPTY
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: ST_TO_ADDR
32396: GO 32477
32398: LD_INT 53
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32424
32406: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
32407: LD_ADDR_VAR 0 3
32411: PUSH
32412: LD_INT 23
32414: PUSH
32415: LD_INT 24
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: ST_TO_ADDR
32422: GO 32477
32424: LD_INT 46
32426: DOUBLE
32427: EQUAL
32428: IFTRUE 32432
32430: GO 32450
32432: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
32433: LD_ADDR_VAR 0 3
32437: PUSH
32438: LD_INT 23
32440: PUSH
32441: LD_INT 24
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: ST_TO_ADDR
32448: GO 32477
32450: LD_INT 47
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 32476
32458: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32459: LD_ADDR_VAR 0 3
32463: PUSH
32464: LD_INT 23
32466: PUSH
32467: LD_INT 24
32469: PUSH
32470: EMPTY
32471: LIST
32472: LIST
32473: ST_TO_ADDR
32474: GO 32477
32476: POP
// result := ( chassis in result ) ;
32477: LD_ADDR_VAR 0 3
32481: PUSH
32482: LD_VAR 0 1
32486: PUSH
32487: LD_VAR 0 3
32491: IN
32492: ST_TO_ADDR
// end ;
32493: LD_VAR 0 3
32497: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
32498: LD_INT 0
32500: PPUSH
32501: PPUSH
32502: PPUSH
32503: PPUSH
32504: PPUSH
32505: PPUSH
32506: PPUSH
// result := array ;
32507: LD_ADDR_VAR 0 5
32511: PUSH
32512: LD_VAR 0 1
32516: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
32517: LD_VAR 0 1
32521: NOT
32522: PUSH
32523: LD_VAR 0 2
32527: NOT
32528: OR
32529: PUSH
32530: LD_VAR 0 3
32534: NOT
32535: OR
32536: PUSH
32537: LD_VAR 0 2
32541: PUSH
32542: LD_VAR 0 1
32546: GREATER
32547: OR
32548: PUSH
32549: LD_VAR 0 3
32553: PUSH
32554: LD_VAR 0 1
32558: GREATER
32559: OR
32560: IFFALSE 32564
// exit ;
32562: GO 32860
// if direction then
32564: LD_VAR 0 4
32568: IFFALSE 32632
// begin d := 1 ;
32570: LD_ADDR_VAR 0 9
32574: PUSH
32575: LD_INT 1
32577: ST_TO_ADDR
// if i_from > i_to then
32578: LD_VAR 0 2
32582: PUSH
32583: LD_VAR 0 3
32587: GREATER
32588: IFFALSE 32614
// length := ( array - i_from ) + i_to else
32590: LD_ADDR_VAR 0 11
32594: PUSH
32595: LD_VAR 0 1
32599: PUSH
32600: LD_VAR 0 2
32604: MINUS
32605: PUSH
32606: LD_VAR 0 3
32610: PLUS
32611: ST_TO_ADDR
32612: GO 32630
// length := i_to - i_from ;
32614: LD_ADDR_VAR 0 11
32618: PUSH
32619: LD_VAR 0 3
32623: PUSH
32624: LD_VAR 0 2
32628: MINUS
32629: ST_TO_ADDR
// end else
32630: GO 32693
// begin d := - 1 ;
32632: LD_ADDR_VAR 0 9
32636: PUSH
32637: LD_INT 1
32639: NEG
32640: ST_TO_ADDR
// if i_from > i_to then
32641: LD_VAR 0 2
32645: PUSH
32646: LD_VAR 0 3
32650: GREATER
32651: IFFALSE 32671
// length := i_from - i_to else
32653: LD_ADDR_VAR 0 11
32657: PUSH
32658: LD_VAR 0 2
32662: PUSH
32663: LD_VAR 0 3
32667: MINUS
32668: ST_TO_ADDR
32669: GO 32693
// length := ( array - i_to ) + i_from ;
32671: LD_ADDR_VAR 0 11
32675: PUSH
32676: LD_VAR 0 1
32680: PUSH
32681: LD_VAR 0 3
32685: MINUS
32686: PUSH
32687: LD_VAR 0 2
32691: PLUS
32692: ST_TO_ADDR
// end ; if not length then
32693: LD_VAR 0 11
32697: NOT
32698: IFFALSE 32702
// exit ;
32700: GO 32860
// tmp := array ;
32702: LD_ADDR_VAR 0 10
32706: PUSH
32707: LD_VAR 0 1
32711: ST_TO_ADDR
// for i = 1 to length do
32712: LD_ADDR_VAR 0 6
32716: PUSH
32717: DOUBLE
32718: LD_INT 1
32720: DEC
32721: ST_TO_ADDR
32722: LD_VAR 0 11
32726: PUSH
32727: FOR_TO
32728: IFFALSE 32848
// begin for j = 1 to array do
32730: LD_ADDR_VAR 0 7
32734: PUSH
32735: DOUBLE
32736: LD_INT 1
32738: DEC
32739: ST_TO_ADDR
32740: LD_VAR 0 1
32744: PUSH
32745: FOR_TO
32746: IFFALSE 32834
// begin k := j + d ;
32748: LD_ADDR_VAR 0 8
32752: PUSH
32753: LD_VAR 0 7
32757: PUSH
32758: LD_VAR 0 9
32762: PLUS
32763: ST_TO_ADDR
// if k > array then
32764: LD_VAR 0 8
32768: PUSH
32769: LD_VAR 0 1
32773: GREATER
32774: IFFALSE 32784
// k := 1 ;
32776: LD_ADDR_VAR 0 8
32780: PUSH
32781: LD_INT 1
32783: ST_TO_ADDR
// if not k then
32784: LD_VAR 0 8
32788: NOT
32789: IFFALSE 32801
// k := array ;
32791: LD_ADDR_VAR 0 8
32795: PUSH
32796: LD_VAR 0 1
32800: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32801: LD_ADDR_VAR 0 10
32805: PUSH
32806: LD_VAR 0 10
32810: PPUSH
32811: LD_VAR 0 8
32815: PPUSH
32816: LD_VAR 0 1
32820: PUSH
32821: LD_VAR 0 7
32825: ARRAY
32826: PPUSH
32827: CALL_OW 1
32831: ST_TO_ADDR
// end ;
32832: GO 32745
32834: POP
32835: POP
// array := tmp ;
32836: LD_ADDR_VAR 0 1
32840: PUSH
32841: LD_VAR 0 10
32845: ST_TO_ADDR
// end ;
32846: GO 32727
32848: POP
32849: POP
// result := array ;
32850: LD_ADDR_VAR 0 5
32854: PUSH
32855: LD_VAR 0 1
32859: ST_TO_ADDR
// end ;
32860: LD_VAR 0 5
32864: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32865: LD_INT 0
32867: PPUSH
32868: PPUSH
// result := 0 ;
32869: LD_ADDR_VAR 0 3
32873: PUSH
32874: LD_INT 0
32876: ST_TO_ADDR
// if not array or not value in array then
32877: LD_VAR 0 1
32881: NOT
32882: PUSH
32883: LD_VAR 0 2
32887: PUSH
32888: LD_VAR 0 1
32892: IN
32893: NOT
32894: OR
32895: IFFALSE 32899
// exit ;
32897: GO 32953
// for i = 1 to array do
32899: LD_ADDR_VAR 0 4
32903: PUSH
32904: DOUBLE
32905: LD_INT 1
32907: DEC
32908: ST_TO_ADDR
32909: LD_VAR 0 1
32913: PUSH
32914: FOR_TO
32915: IFFALSE 32951
// if value = array [ i ] then
32917: LD_VAR 0 2
32921: PUSH
32922: LD_VAR 0 1
32926: PUSH
32927: LD_VAR 0 4
32931: ARRAY
32932: EQUAL
32933: IFFALSE 32949
// begin result := i ;
32935: LD_ADDR_VAR 0 3
32939: PUSH
32940: LD_VAR 0 4
32944: ST_TO_ADDR
// exit ;
32945: POP
32946: POP
32947: GO 32953
// end ;
32949: GO 32914
32951: POP
32952: POP
// end ;
32953: LD_VAR 0 3
32957: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32958: LD_INT 0
32960: PPUSH
// vc_chassis := chassis ;
32961: LD_ADDR_OWVAR 37
32965: PUSH
32966: LD_VAR 0 1
32970: ST_TO_ADDR
// vc_engine := engine ;
32971: LD_ADDR_OWVAR 39
32975: PUSH
32976: LD_VAR 0 2
32980: ST_TO_ADDR
// vc_control := control ;
32981: LD_ADDR_OWVAR 38
32985: PUSH
32986: LD_VAR 0 3
32990: ST_TO_ADDR
// vc_weapon := weapon ;
32991: LD_ADDR_OWVAR 40
32995: PUSH
32996: LD_VAR 0 4
33000: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33001: LD_ADDR_OWVAR 41
33005: PUSH
33006: LD_VAR 0 5
33010: ST_TO_ADDR
// end ;
33011: LD_VAR 0 6
33015: RET
// export function WantPlant ( unit ) ; var task ; begin
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
// result := false ;
33020: LD_ADDR_VAR 0 2
33024: PUSH
33025: LD_INT 0
33027: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33028: LD_ADDR_VAR 0 3
33032: PUSH
33033: LD_VAR 0 1
33037: PPUSH
33038: CALL_OW 437
33042: ST_TO_ADDR
// if task then
33043: LD_VAR 0 3
33047: IFFALSE 33075
// if task [ 1 ] [ 1 ] = p then
33049: LD_VAR 0 3
33053: PUSH
33054: LD_INT 1
33056: ARRAY
33057: PUSH
33058: LD_INT 1
33060: ARRAY
33061: PUSH
33062: LD_STRING p
33064: EQUAL
33065: IFFALSE 33075
// result := true ;
33067: LD_ADDR_VAR 0 2
33071: PUSH
33072: LD_INT 1
33074: ST_TO_ADDR
// end ;
33075: LD_VAR 0 2
33079: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33080: LD_INT 0
33082: PPUSH
33083: PPUSH
33084: PPUSH
33085: PPUSH
// if pos < 1 then
33086: LD_VAR 0 2
33090: PUSH
33091: LD_INT 1
33093: LESS
33094: IFFALSE 33098
// exit ;
33096: GO 33401
// if pos = 1 then
33098: LD_VAR 0 2
33102: PUSH
33103: LD_INT 1
33105: EQUAL
33106: IFFALSE 33139
// result := Replace ( arr , pos [ 1 ] , value ) else
33108: LD_ADDR_VAR 0 4
33112: PUSH
33113: LD_VAR 0 1
33117: PPUSH
33118: LD_VAR 0 2
33122: PUSH
33123: LD_INT 1
33125: ARRAY
33126: PPUSH
33127: LD_VAR 0 3
33131: PPUSH
33132: CALL_OW 1
33136: ST_TO_ADDR
33137: GO 33401
// begin tmp := arr ;
33139: LD_ADDR_VAR 0 6
33143: PUSH
33144: LD_VAR 0 1
33148: ST_TO_ADDR
// s_arr := [ tmp ] ;
33149: LD_ADDR_VAR 0 7
33153: PUSH
33154: LD_VAR 0 6
33158: PUSH
33159: EMPTY
33160: LIST
33161: ST_TO_ADDR
// for i = 1 to pos - 1 do
33162: LD_ADDR_VAR 0 5
33166: PUSH
33167: DOUBLE
33168: LD_INT 1
33170: DEC
33171: ST_TO_ADDR
33172: LD_VAR 0 2
33176: PUSH
33177: LD_INT 1
33179: MINUS
33180: PUSH
33181: FOR_TO
33182: IFFALSE 33227
// begin tmp := tmp [ pos [ i ] ] ;
33184: LD_ADDR_VAR 0 6
33188: PUSH
33189: LD_VAR 0 6
33193: PUSH
33194: LD_VAR 0 2
33198: PUSH
33199: LD_VAR 0 5
33203: ARRAY
33204: ARRAY
33205: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33206: LD_ADDR_VAR 0 7
33210: PUSH
33211: LD_VAR 0 7
33215: PUSH
33216: LD_VAR 0 6
33220: PUSH
33221: EMPTY
33222: LIST
33223: ADD
33224: ST_TO_ADDR
// end ;
33225: GO 33181
33227: POP
33228: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33229: LD_ADDR_VAR 0 6
33233: PUSH
33234: LD_VAR 0 6
33238: PPUSH
33239: LD_VAR 0 2
33243: PUSH
33244: LD_VAR 0 2
33248: ARRAY
33249: PPUSH
33250: LD_VAR 0 3
33254: PPUSH
33255: CALL_OW 1
33259: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33260: LD_ADDR_VAR 0 7
33264: PUSH
33265: LD_VAR 0 7
33269: PPUSH
33270: LD_VAR 0 7
33274: PPUSH
33275: LD_VAR 0 6
33279: PPUSH
33280: CALL_OW 1
33284: ST_TO_ADDR
// for i = s_arr downto 2 do
33285: LD_ADDR_VAR 0 5
33289: PUSH
33290: DOUBLE
33291: LD_VAR 0 7
33295: INC
33296: ST_TO_ADDR
33297: LD_INT 2
33299: PUSH
33300: FOR_DOWNTO
33301: IFFALSE 33385
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
33303: LD_ADDR_VAR 0 6
33307: PUSH
33308: LD_VAR 0 7
33312: PUSH
33313: LD_VAR 0 5
33317: PUSH
33318: LD_INT 1
33320: MINUS
33321: ARRAY
33322: PPUSH
33323: LD_VAR 0 2
33327: PUSH
33328: LD_VAR 0 5
33332: PUSH
33333: LD_INT 1
33335: MINUS
33336: ARRAY
33337: PPUSH
33338: LD_VAR 0 7
33342: PUSH
33343: LD_VAR 0 5
33347: ARRAY
33348: PPUSH
33349: CALL_OW 1
33353: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
33354: LD_ADDR_VAR 0 7
33358: PUSH
33359: LD_VAR 0 7
33363: PPUSH
33364: LD_VAR 0 5
33368: PUSH
33369: LD_INT 1
33371: MINUS
33372: PPUSH
33373: LD_VAR 0 6
33377: PPUSH
33378: CALL_OW 1
33382: ST_TO_ADDR
// end ;
33383: GO 33300
33385: POP
33386: POP
// result := s_arr [ 1 ] ;
33387: LD_ADDR_VAR 0 4
33391: PUSH
33392: LD_VAR 0 7
33396: PUSH
33397: LD_INT 1
33399: ARRAY
33400: ST_TO_ADDR
// end ; end ;
33401: LD_VAR 0 4
33405: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
33406: LD_INT 0
33408: PPUSH
33409: PPUSH
// if not list then
33410: LD_VAR 0 1
33414: NOT
33415: IFFALSE 33419
// exit ;
33417: GO 33510
// i := list [ pos1 ] ;
33419: LD_ADDR_VAR 0 5
33423: PUSH
33424: LD_VAR 0 1
33428: PUSH
33429: LD_VAR 0 2
33433: ARRAY
33434: ST_TO_ADDR
// if not i then
33435: LD_VAR 0 5
33439: NOT
33440: IFFALSE 33444
// exit ;
33442: GO 33510
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
33444: LD_ADDR_VAR 0 1
33448: PUSH
33449: LD_VAR 0 1
33453: PPUSH
33454: LD_VAR 0 2
33458: PPUSH
33459: LD_VAR 0 1
33463: PUSH
33464: LD_VAR 0 3
33468: ARRAY
33469: PPUSH
33470: CALL_OW 1
33474: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
33475: LD_ADDR_VAR 0 1
33479: PUSH
33480: LD_VAR 0 1
33484: PPUSH
33485: LD_VAR 0 3
33489: PPUSH
33490: LD_VAR 0 5
33494: PPUSH
33495: CALL_OW 1
33499: ST_TO_ADDR
// result := list ;
33500: LD_ADDR_VAR 0 4
33504: PUSH
33505: LD_VAR 0 1
33509: ST_TO_ADDR
// end ;
33510: LD_VAR 0 4
33514: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
33515: LD_INT 0
33517: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
33518: LD_ADDR_VAR 0 5
33522: PUSH
33523: LD_VAR 0 1
33527: PPUSH
33528: CALL_OW 250
33532: PPUSH
33533: LD_VAR 0 1
33537: PPUSH
33538: CALL_OW 251
33542: PPUSH
33543: LD_VAR 0 2
33547: PPUSH
33548: LD_VAR 0 3
33552: PPUSH
33553: LD_VAR 0 4
33557: PPUSH
33558: CALL 33936 0 5
33562: ST_TO_ADDR
// end ;
33563: LD_VAR 0 5
33567: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
33568: LD_INT 0
33570: PPUSH
33571: PPUSH
33572: PPUSH
33573: PPUSH
// if not list or not unit then
33574: LD_VAR 0 2
33578: NOT
33579: PUSH
33580: LD_VAR 0 1
33584: NOT
33585: OR
33586: IFFALSE 33590
// exit ;
33588: GO 33931
// result := [ ] ;
33590: LD_ADDR_VAR 0 5
33594: PUSH
33595: EMPTY
33596: ST_TO_ADDR
// for i in list do
33597: LD_ADDR_VAR 0 6
33601: PUSH
33602: LD_VAR 0 2
33606: PUSH
33607: FOR_IN
33608: IFFALSE 33826
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
33610: LD_ADDR_VAR 0 8
33614: PUSH
33615: LD_VAR 0 1
33619: PPUSH
33620: LD_VAR 0 6
33624: PUSH
33625: LD_INT 1
33627: ARRAY
33628: PPUSH
33629: LD_VAR 0 6
33633: PUSH
33634: LD_INT 2
33636: ARRAY
33637: PPUSH
33638: CALL_OW 297
33642: ST_TO_ADDR
// if not Count ( result ) then
33643: LD_VAR 0 5
33647: PPUSH
33648: CALL 30220 0 1
33652: NOT
33653: IFFALSE 33686
// begin result := Join ( result , [ i , tmp ] ) ;
33655: LD_ADDR_VAR 0 5
33659: PUSH
33660: LD_VAR 0 5
33664: PPUSH
33665: LD_VAR 0 6
33669: PUSH
33670: LD_VAR 0 8
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PPUSH
33679: CALL 65820 0 2
33683: ST_TO_ADDR
// continue ;
33684: GO 33607
// end ; if result [ result ] [ 2 ] <= tmp then
33686: LD_VAR 0 5
33690: PUSH
33691: LD_VAR 0 5
33695: ARRAY
33696: PUSH
33697: LD_INT 2
33699: ARRAY
33700: PUSH
33701: LD_VAR 0 8
33705: LESSEQUAL
33706: IFFALSE 33739
// result := Join ( result , [ i , tmp ] ) else
33708: LD_ADDR_VAR 0 5
33712: PUSH
33713: LD_VAR 0 5
33717: PPUSH
33718: LD_VAR 0 6
33722: PUSH
33723: LD_VAR 0 8
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PPUSH
33732: CALL 65820 0 2
33736: ST_TO_ADDR
33737: GO 33824
// begin for j := 1 to Count ( result ) do
33739: LD_ADDR_VAR 0 7
33743: PUSH
33744: DOUBLE
33745: LD_INT 1
33747: DEC
33748: ST_TO_ADDR
33749: LD_VAR 0 5
33753: PPUSH
33754: CALL 30220 0 1
33758: PUSH
33759: FOR_TO
33760: IFFALSE 33822
// begin if tmp < result [ j ] [ 2 ] then
33762: LD_VAR 0 8
33766: PUSH
33767: LD_VAR 0 5
33771: PUSH
33772: LD_VAR 0 7
33776: ARRAY
33777: PUSH
33778: LD_INT 2
33780: ARRAY
33781: LESS
33782: IFFALSE 33820
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33784: LD_ADDR_VAR 0 5
33788: PUSH
33789: LD_VAR 0 5
33793: PPUSH
33794: LD_VAR 0 7
33798: PPUSH
33799: LD_VAR 0 6
33803: PUSH
33804: LD_VAR 0 8
33808: PUSH
33809: EMPTY
33810: LIST
33811: LIST
33812: PPUSH
33813: CALL_OW 2
33817: ST_TO_ADDR
// break ;
33818: GO 33822
// end ; end ;
33820: GO 33759
33822: POP
33823: POP
// end ; end ;
33824: GO 33607
33826: POP
33827: POP
// if result and not asc then
33828: LD_VAR 0 5
33832: PUSH
33833: LD_VAR 0 3
33837: NOT
33838: AND
33839: IFFALSE 33856
// result := ReverseArray ( result ) ;
33841: LD_ADDR_VAR 0 5
33845: PUSH
33846: LD_VAR 0 5
33850: PPUSH
33851: CALL 61096 0 1
33855: ST_TO_ADDR
// tmp := [ ] ;
33856: LD_ADDR_VAR 0 8
33860: PUSH
33861: EMPTY
33862: ST_TO_ADDR
// if mode then
33863: LD_VAR 0 4
33867: IFFALSE 33931
// begin for i := 1 to result do
33869: LD_ADDR_VAR 0 6
33873: PUSH
33874: DOUBLE
33875: LD_INT 1
33877: DEC
33878: ST_TO_ADDR
33879: LD_VAR 0 5
33883: PUSH
33884: FOR_TO
33885: IFFALSE 33919
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
33887: LD_ADDR_VAR 0 8
33891: PUSH
33892: LD_VAR 0 8
33896: PPUSH
33897: LD_VAR 0 5
33901: PUSH
33902: LD_VAR 0 6
33906: ARRAY
33907: PUSH
33908: LD_INT 1
33910: ARRAY
33911: PPUSH
33912: CALL 65820 0 2
33916: ST_TO_ADDR
33917: GO 33884
33919: POP
33920: POP
// result := tmp ;
33921: LD_ADDR_VAR 0 5
33925: PUSH
33926: LD_VAR 0 8
33930: ST_TO_ADDR
// end ; end ;
33931: LD_VAR 0 5
33935: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
33936: LD_INT 0
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
// if not list then
33942: LD_VAR 0 3
33946: NOT
33947: IFFALSE 33951
// exit ;
33949: GO 34339
// result := [ ] ;
33951: LD_ADDR_VAR 0 6
33955: PUSH
33956: EMPTY
33957: ST_TO_ADDR
// for i in list do
33958: LD_ADDR_VAR 0 7
33962: PUSH
33963: LD_VAR 0 3
33967: PUSH
33968: FOR_IN
33969: IFFALSE 34171
// begin tmp := GetDistUnitXY ( i , x , y ) ;
33971: LD_ADDR_VAR 0 9
33975: PUSH
33976: LD_VAR 0 7
33980: PPUSH
33981: LD_VAR 0 1
33985: PPUSH
33986: LD_VAR 0 2
33990: PPUSH
33991: CALL_OW 297
33995: ST_TO_ADDR
// if not result then
33996: LD_VAR 0 6
34000: NOT
34001: IFFALSE 34027
// result := [ [ i , tmp ] ] else
34003: LD_ADDR_VAR 0 6
34007: PUSH
34008: LD_VAR 0 7
34012: PUSH
34013: LD_VAR 0 9
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: EMPTY
34023: LIST
34024: ST_TO_ADDR
34025: GO 34169
// begin if result [ result ] [ 2 ] < tmp then
34027: LD_VAR 0 6
34031: PUSH
34032: LD_VAR 0 6
34036: ARRAY
34037: PUSH
34038: LD_INT 2
34040: ARRAY
34041: PUSH
34042: LD_VAR 0 9
34046: LESS
34047: IFFALSE 34089
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34049: LD_ADDR_VAR 0 6
34053: PUSH
34054: LD_VAR 0 6
34058: PPUSH
34059: LD_VAR 0 6
34063: PUSH
34064: LD_INT 1
34066: PLUS
34067: PPUSH
34068: LD_VAR 0 7
34072: PUSH
34073: LD_VAR 0 9
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PPUSH
34082: CALL_OW 2
34086: ST_TO_ADDR
34087: GO 34169
// for j = 1 to result do
34089: LD_ADDR_VAR 0 8
34093: PUSH
34094: DOUBLE
34095: LD_INT 1
34097: DEC
34098: ST_TO_ADDR
34099: LD_VAR 0 6
34103: PUSH
34104: FOR_TO
34105: IFFALSE 34167
// begin if tmp < result [ j ] [ 2 ] then
34107: LD_VAR 0 9
34111: PUSH
34112: LD_VAR 0 6
34116: PUSH
34117: LD_VAR 0 8
34121: ARRAY
34122: PUSH
34123: LD_INT 2
34125: ARRAY
34126: LESS
34127: IFFALSE 34165
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34129: LD_ADDR_VAR 0 6
34133: PUSH
34134: LD_VAR 0 6
34138: PPUSH
34139: LD_VAR 0 8
34143: PPUSH
34144: LD_VAR 0 7
34148: PUSH
34149: LD_VAR 0 9
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PPUSH
34158: CALL_OW 2
34162: ST_TO_ADDR
// break ;
34163: GO 34167
// end ; end ;
34165: GO 34104
34167: POP
34168: POP
// end ; end ;
34169: GO 33968
34171: POP
34172: POP
// if result and not asc then
34173: LD_VAR 0 6
34177: PUSH
34178: LD_VAR 0 4
34182: NOT
34183: AND
34184: IFFALSE 34259
// begin tmp := result ;
34186: LD_ADDR_VAR 0 9
34190: PUSH
34191: LD_VAR 0 6
34195: ST_TO_ADDR
// for i = tmp downto 1 do
34196: LD_ADDR_VAR 0 7
34200: PUSH
34201: DOUBLE
34202: LD_VAR 0 9
34206: INC
34207: ST_TO_ADDR
34208: LD_INT 1
34210: PUSH
34211: FOR_DOWNTO
34212: IFFALSE 34257
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34214: LD_ADDR_VAR 0 6
34218: PUSH
34219: LD_VAR 0 6
34223: PPUSH
34224: LD_VAR 0 9
34228: PUSH
34229: LD_VAR 0 7
34233: MINUS
34234: PUSH
34235: LD_INT 1
34237: PLUS
34238: PPUSH
34239: LD_VAR 0 9
34243: PUSH
34244: LD_VAR 0 7
34248: ARRAY
34249: PPUSH
34250: CALL_OW 1
34254: ST_TO_ADDR
34255: GO 34211
34257: POP
34258: POP
// end ; tmp := [ ] ;
34259: LD_ADDR_VAR 0 9
34263: PUSH
34264: EMPTY
34265: ST_TO_ADDR
// if mode then
34266: LD_VAR 0 5
34270: IFFALSE 34339
// begin for i = 1 to result do
34272: LD_ADDR_VAR 0 7
34276: PUSH
34277: DOUBLE
34278: LD_INT 1
34280: DEC
34281: ST_TO_ADDR
34282: LD_VAR 0 6
34286: PUSH
34287: FOR_TO
34288: IFFALSE 34327
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34290: LD_ADDR_VAR 0 9
34294: PUSH
34295: LD_VAR 0 9
34299: PPUSH
34300: LD_VAR 0 7
34304: PPUSH
34305: LD_VAR 0 6
34309: PUSH
34310: LD_VAR 0 7
34314: ARRAY
34315: PUSH
34316: LD_INT 1
34318: ARRAY
34319: PPUSH
34320: CALL_OW 1
34324: ST_TO_ADDR
34325: GO 34287
34327: POP
34328: POP
// result := tmp ;
34329: LD_ADDR_VAR 0 6
34333: PUSH
34334: LD_VAR 0 9
34338: ST_TO_ADDR
// end ; end ;
34339: LD_VAR 0 6
34343: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
34344: LD_INT 0
34346: PPUSH
34347: PPUSH
34348: PPUSH
34349: PPUSH
34350: PPUSH
34351: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
34352: LD_ADDR_VAR 0 5
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: PUSH
34368: EMPTY
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: ST_TO_ADDR
// if not x or not y then
34374: LD_VAR 0 2
34378: NOT
34379: PUSH
34380: LD_VAR 0 3
34384: NOT
34385: OR
34386: IFFALSE 34390
// exit ;
34388: GO 36040
// if not range then
34390: LD_VAR 0 4
34394: NOT
34395: IFFALSE 34405
// range := 10 ;
34397: LD_ADDR_VAR 0 4
34401: PUSH
34402: LD_INT 10
34404: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34405: LD_ADDR_VAR 0 8
34409: PUSH
34410: LD_INT 81
34412: PUSH
34413: LD_VAR 0 1
34417: PUSH
34418: EMPTY
34419: LIST
34420: LIST
34421: PUSH
34422: LD_INT 92
34424: PUSH
34425: LD_VAR 0 2
34429: PUSH
34430: LD_VAR 0 3
34434: PUSH
34435: LD_VAR 0 4
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 21
34451: PUSH
34452: LD_INT 3
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: EMPTY
34460: LIST
34461: LIST
34462: PUSH
34463: EMPTY
34464: LIST
34465: LIST
34466: LIST
34467: PPUSH
34468: CALL_OW 69
34472: ST_TO_ADDR
// if not tmp then
34473: LD_VAR 0 8
34477: NOT
34478: IFFALSE 34482
// exit ;
34480: GO 36040
// for i in tmp do
34482: LD_ADDR_VAR 0 6
34486: PUSH
34487: LD_VAR 0 8
34491: PUSH
34492: FOR_IN
34493: IFFALSE 36015
// begin points := [ 0 , 0 , 0 ] ;
34495: LD_ADDR_VAR 0 9
34499: PUSH
34500: LD_INT 0
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: LIST
34513: ST_TO_ADDR
// bpoints := 1 ;
34514: LD_ADDR_VAR 0 10
34518: PUSH
34519: LD_INT 1
34521: ST_TO_ADDR
// case GetType ( i ) of unit_human :
34522: LD_VAR 0 6
34526: PPUSH
34527: CALL_OW 247
34531: PUSH
34532: LD_INT 1
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 35118
34540: POP
// begin if GetClass ( i ) = 1 then
34541: LD_VAR 0 6
34545: PPUSH
34546: CALL_OW 257
34550: PUSH
34551: LD_INT 1
34553: EQUAL
34554: IFFALSE 34575
// points := [ 10 , 5 , 3 ] ;
34556: LD_ADDR_VAR 0 9
34560: PUSH
34561: LD_INT 10
34563: PUSH
34564: LD_INT 5
34566: PUSH
34567: LD_INT 3
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
34575: LD_VAR 0 6
34579: PPUSH
34580: CALL_OW 257
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 3
34590: PUSH
34591: LD_INT 4
34593: PUSH
34594: EMPTY
34595: LIST
34596: LIST
34597: LIST
34598: IN
34599: IFFALSE 34620
// points := [ 3 , 2 , 1 ] ;
34601: LD_ADDR_VAR 0 9
34605: PUSH
34606: LD_INT 3
34608: PUSH
34609: LD_INT 2
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: LIST
34619: ST_TO_ADDR
// if GetClass ( i ) = 5 then
34620: LD_VAR 0 6
34624: PPUSH
34625: CALL_OW 257
34629: PUSH
34630: LD_INT 5
34632: EQUAL
34633: IFFALSE 34654
// points := [ 130 , 5 , 2 ] ;
34635: LD_ADDR_VAR 0 9
34639: PUSH
34640: LD_INT 130
34642: PUSH
34643: LD_INT 5
34645: PUSH
34646: LD_INT 2
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: ST_TO_ADDR
// if GetClass ( i ) = 8 then
34654: LD_VAR 0 6
34658: PPUSH
34659: CALL_OW 257
34663: PUSH
34664: LD_INT 8
34666: EQUAL
34667: IFFALSE 34688
// points := [ 35 , 35 , 30 ] ;
34669: LD_ADDR_VAR 0 9
34673: PUSH
34674: LD_INT 35
34676: PUSH
34677: LD_INT 35
34679: PUSH
34680: LD_INT 30
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: LIST
34687: ST_TO_ADDR
// if GetClass ( i ) = 9 then
34688: LD_VAR 0 6
34692: PPUSH
34693: CALL_OW 257
34697: PUSH
34698: LD_INT 9
34700: EQUAL
34701: IFFALSE 34722
// points := [ 20 , 55 , 40 ] ;
34703: LD_ADDR_VAR 0 9
34707: PUSH
34708: LD_INT 20
34710: PUSH
34711: LD_INT 55
34713: PUSH
34714: LD_INT 40
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: LIST
34721: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
34722: LD_VAR 0 6
34726: PPUSH
34727: CALL_OW 257
34731: PUSH
34732: LD_INT 12
34734: PUSH
34735: LD_INT 16
34737: PUSH
34738: EMPTY
34739: LIST
34740: LIST
34741: IN
34742: IFFALSE 34763
// points := [ 5 , 3 , 2 ] ;
34744: LD_ADDR_VAR 0 9
34748: PUSH
34749: LD_INT 5
34751: PUSH
34752: LD_INT 3
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: LIST
34762: ST_TO_ADDR
// if GetClass ( i ) = 17 then
34763: LD_VAR 0 6
34767: PPUSH
34768: CALL_OW 257
34772: PUSH
34773: LD_INT 17
34775: EQUAL
34776: IFFALSE 34797
// points := [ 100 , 50 , 75 ] ;
34778: LD_ADDR_VAR 0 9
34782: PUSH
34783: LD_INT 100
34785: PUSH
34786: LD_INT 50
34788: PUSH
34789: LD_INT 75
34791: PUSH
34792: EMPTY
34793: LIST
34794: LIST
34795: LIST
34796: ST_TO_ADDR
// if GetClass ( i ) = 15 then
34797: LD_VAR 0 6
34801: PPUSH
34802: CALL_OW 257
34806: PUSH
34807: LD_INT 15
34809: EQUAL
34810: IFFALSE 34831
// points := [ 10 , 5 , 3 ] ;
34812: LD_ADDR_VAR 0 9
34816: PUSH
34817: LD_INT 10
34819: PUSH
34820: LD_INT 5
34822: PUSH
34823: LD_INT 3
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: ST_TO_ADDR
// if GetClass ( i ) = 14 then
34831: LD_VAR 0 6
34835: PPUSH
34836: CALL_OW 257
34840: PUSH
34841: LD_INT 14
34843: EQUAL
34844: IFFALSE 34865
// points := [ 10 , 0 , 0 ] ;
34846: LD_ADDR_VAR 0 9
34850: PUSH
34851: LD_INT 10
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: LD_INT 0
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: LIST
34864: ST_TO_ADDR
// if GetClass ( i ) = 11 then
34865: LD_VAR 0 6
34869: PPUSH
34870: CALL_OW 257
34874: PUSH
34875: LD_INT 11
34877: EQUAL
34878: IFFALSE 34899
// points := [ 30 , 10 , 5 ] ;
34880: LD_ADDR_VAR 0 9
34884: PUSH
34885: LD_INT 30
34887: PUSH
34888: LD_INT 10
34890: PUSH
34891: LD_INT 5
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: LIST
34898: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
34899: LD_VAR 0 1
34903: PPUSH
34904: LD_INT 5
34906: PPUSH
34907: CALL_OW 321
34911: PUSH
34912: LD_INT 2
34914: EQUAL
34915: IFFALSE 34932
// bpoints := bpoints * 1.8 ;
34917: LD_ADDR_VAR 0 10
34921: PUSH
34922: LD_VAR 0 10
34926: PUSH
34927: LD_REAL  1.80000000000000E+0000
34930: MUL
34931: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
34932: LD_VAR 0 6
34936: PPUSH
34937: CALL_OW 257
34941: PUSH
34942: LD_INT 1
34944: PUSH
34945: LD_INT 2
34947: PUSH
34948: LD_INT 3
34950: PUSH
34951: LD_INT 4
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: IN
34960: PUSH
34961: LD_VAR 0 1
34965: PPUSH
34966: LD_INT 51
34968: PPUSH
34969: CALL_OW 321
34973: PUSH
34974: LD_INT 2
34976: EQUAL
34977: AND
34978: IFFALSE 34995
// bpoints := bpoints * 1.2 ;
34980: LD_ADDR_VAR 0 10
34984: PUSH
34985: LD_VAR 0 10
34989: PUSH
34990: LD_REAL  1.20000000000000E+0000
34993: MUL
34994: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34995: LD_VAR 0 6
34999: PPUSH
35000: CALL_OW 257
35004: PUSH
35005: LD_INT 5
35007: PUSH
35008: LD_INT 7
35010: PUSH
35011: LD_INT 9
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: IN
35019: PUSH
35020: LD_VAR 0 1
35024: PPUSH
35025: LD_INT 52
35027: PPUSH
35028: CALL_OW 321
35032: PUSH
35033: LD_INT 2
35035: EQUAL
35036: AND
35037: IFFALSE 35054
// bpoints := bpoints * 1.5 ;
35039: LD_ADDR_VAR 0 10
35043: PUSH
35044: LD_VAR 0 10
35048: PUSH
35049: LD_REAL  1.50000000000000E+0000
35052: MUL
35053: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35054: LD_VAR 0 1
35058: PPUSH
35059: LD_INT 66
35061: PPUSH
35062: CALL_OW 321
35066: PUSH
35067: LD_INT 2
35069: EQUAL
35070: IFFALSE 35087
// bpoints := bpoints * 1.1 ;
35072: LD_ADDR_VAR 0 10
35076: PUSH
35077: LD_VAR 0 10
35081: PUSH
35082: LD_REAL  1.10000000000000E+0000
35085: MUL
35086: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35087: LD_ADDR_VAR 0 10
35091: PUSH
35092: LD_VAR 0 10
35096: PUSH
35097: LD_VAR 0 6
35101: PPUSH
35102: LD_INT 1
35104: PPUSH
35105: CALL_OW 259
35109: PUSH
35110: LD_REAL  1.15000000000000E+0000
35113: MUL
35114: MUL
35115: ST_TO_ADDR
// end ; unit_vehicle :
35116: GO 35944
35118: LD_INT 2
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35932
35126: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35127: LD_VAR 0 6
35131: PPUSH
35132: CALL_OW 264
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: LD_INT 42
35142: PUSH
35143: LD_INT 24
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: LIST
35150: IN
35151: IFFALSE 35172
// points := [ 25 , 5 , 3 ] ;
35153: LD_ADDR_VAR 0 9
35157: PUSH
35158: LD_INT 25
35160: PUSH
35161: LD_INT 5
35163: PUSH
35164: LD_INT 3
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: LIST
35171: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35172: LD_VAR 0 6
35176: PPUSH
35177: CALL_OW 264
35181: PUSH
35182: LD_INT 4
35184: PUSH
35185: LD_INT 43
35187: PUSH
35188: LD_INT 25
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: IN
35196: IFFALSE 35217
// points := [ 40 , 15 , 5 ] ;
35198: LD_ADDR_VAR 0 9
35202: PUSH
35203: LD_INT 40
35205: PUSH
35206: LD_INT 15
35208: PUSH
35209: LD_INT 5
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: LIST
35216: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35217: LD_VAR 0 6
35221: PPUSH
35222: CALL_OW 264
35226: PUSH
35227: LD_INT 3
35229: PUSH
35230: LD_INT 23
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: IN
35237: IFFALSE 35258
// points := [ 7 , 25 , 8 ] ;
35239: LD_ADDR_VAR 0 9
35243: PUSH
35244: LD_INT 7
35246: PUSH
35247: LD_INT 25
35249: PUSH
35250: LD_INT 8
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35258: LD_VAR 0 6
35262: PPUSH
35263: CALL_OW 264
35267: PUSH
35268: LD_INT 5
35270: PUSH
35271: LD_INT 27
35273: PUSH
35274: LD_INT 44
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: IN
35282: IFFALSE 35303
// points := [ 14 , 50 , 16 ] ;
35284: LD_ADDR_VAR 0 9
35288: PUSH
35289: LD_INT 14
35291: PUSH
35292: LD_INT 50
35294: PUSH
35295: LD_INT 16
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: LIST
35302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
35303: LD_VAR 0 6
35307: PPUSH
35308: CALL_OW 264
35312: PUSH
35313: LD_INT 6
35315: PUSH
35316: LD_INT 46
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: IN
35323: IFFALSE 35344
// points := [ 32 , 120 , 70 ] ;
35325: LD_ADDR_VAR 0 9
35329: PUSH
35330: LD_INT 32
35332: PUSH
35333: LD_INT 120
35335: PUSH
35336: LD_INT 70
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: LIST
35343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
35344: LD_VAR 0 6
35348: PPUSH
35349: CALL_OW 264
35353: PUSH
35354: LD_INT 7
35356: PUSH
35357: LD_INT 28
35359: PUSH
35360: LD_INT 45
35362: PUSH
35363: LD_INT 92
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: IN
35372: IFFALSE 35393
// points := [ 35 , 20 , 45 ] ;
35374: LD_ADDR_VAR 0 9
35378: PUSH
35379: LD_INT 35
35381: PUSH
35382: LD_INT 20
35384: PUSH
35385: LD_INT 45
35387: PUSH
35388: EMPTY
35389: LIST
35390: LIST
35391: LIST
35392: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
35393: LD_VAR 0 6
35397: PPUSH
35398: CALL_OW 264
35402: PUSH
35403: LD_INT 47
35405: PUSH
35406: EMPTY
35407: LIST
35408: IN
35409: IFFALSE 35430
// points := [ 67 , 45 , 75 ] ;
35411: LD_ADDR_VAR 0 9
35415: PUSH
35416: LD_INT 67
35418: PUSH
35419: LD_INT 45
35421: PUSH
35422: LD_INT 75
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
35430: LD_VAR 0 6
35434: PPUSH
35435: CALL_OW 264
35439: PUSH
35440: LD_INT 26
35442: PUSH
35443: EMPTY
35444: LIST
35445: IN
35446: IFFALSE 35467
// points := [ 120 , 30 , 80 ] ;
35448: LD_ADDR_VAR 0 9
35452: PUSH
35453: LD_INT 120
35455: PUSH
35456: LD_INT 30
35458: PUSH
35459: LD_INT 80
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
35467: LD_VAR 0 6
35471: PPUSH
35472: CALL_OW 264
35476: PUSH
35477: LD_INT 22
35479: PUSH
35480: EMPTY
35481: LIST
35482: IN
35483: IFFALSE 35504
// points := [ 40 , 1 , 1 ] ;
35485: LD_ADDR_VAR 0 9
35489: PUSH
35490: LD_INT 40
35492: PUSH
35493: LD_INT 1
35495: PUSH
35496: LD_INT 1
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: LIST
35503: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
35504: LD_VAR 0 6
35508: PPUSH
35509: CALL_OW 264
35513: PUSH
35514: LD_INT 29
35516: PUSH
35517: EMPTY
35518: LIST
35519: IN
35520: IFFALSE 35541
// points := [ 70 , 200 , 400 ] ;
35522: LD_ADDR_VAR 0 9
35526: PUSH
35527: LD_INT 70
35529: PUSH
35530: LD_INT 200
35532: PUSH
35533: LD_INT 400
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
35541: LD_VAR 0 6
35545: PPUSH
35546: CALL_OW 264
35550: PUSH
35551: LD_INT 14
35553: PUSH
35554: LD_INT 53
35556: PUSH
35557: EMPTY
35558: LIST
35559: LIST
35560: IN
35561: IFFALSE 35582
// points := [ 40 , 10 , 20 ] ;
35563: LD_ADDR_VAR 0 9
35567: PUSH
35568: LD_INT 40
35570: PUSH
35571: LD_INT 10
35573: PUSH
35574: LD_INT 20
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: LIST
35581: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
35582: LD_VAR 0 6
35586: PPUSH
35587: CALL_OW 264
35591: PUSH
35592: LD_INT 9
35594: PUSH
35595: EMPTY
35596: LIST
35597: IN
35598: IFFALSE 35619
// points := [ 5 , 70 , 20 ] ;
35600: LD_ADDR_VAR 0 9
35604: PUSH
35605: LD_INT 5
35607: PUSH
35608: LD_INT 70
35610: PUSH
35611: LD_INT 20
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
35619: LD_VAR 0 6
35623: PPUSH
35624: CALL_OW 264
35628: PUSH
35629: LD_INT 10
35631: PUSH
35632: EMPTY
35633: LIST
35634: IN
35635: IFFALSE 35656
// points := [ 35 , 110 , 70 ] ;
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_INT 35
35644: PUSH
35645: LD_INT 110
35647: PUSH
35648: LD_INT 70
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: LIST
35655: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
35656: LD_VAR 0 6
35660: PPUSH
35661: CALL_OW 265
35665: PUSH
35666: LD_INT 25
35668: EQUAL
35669: IFFALSE 35690
// points := [ 80 , 65 , 100 ] ;
35671: LD_ADDR_VAR 0 9
35675: PUSH
35676: LD_INT 80
35678: PUSH
35679: LD_INT 65
35681: PUSH
35682: LD_INT 100
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: LIST
35689: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
35690: LD_VAR 0 6
35694: PPUSH
35695: CALL_OW 263
35699: PUSH
35700: LD_INT 1
35702: EQUAL
35703: IFFALSE 35738
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
35705: LD_ADDR_VAR 0 10
35709: PUSH
35710: LD_VAR 0 10
35714: PUSH
35715: LD_VAR 0 6
35719: PPUSH
35720: CALL_OW 311
35724: PPUSH
35725: LD_INT 3
35727: PPUSH
35728: CALL_OW 259
35732: PUSH
35733: LD_INT 4
35735: MUL
35736: MUL
35737: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
35738: LD_VAR 0 6
35742: PPUSH
35743: CALL_OW 263
35747: PUSH
35748: LD_INT 2
35750: EQUAL
35751: IFFALSE 35802
// begin j := IsControledBy ( i ) ;
35753: LD_ADDR_VAR 0 7
35757: PUSH
35758: LD_VAR 0 6
35762: PPUSH
35763: CALL_OW 312
35767: ST_TO_ADDR
// if j then
35768: LD_VAR 0 7
35772: IFFALSE 35802
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
35774: LD_ADDR_VAR 0 10
35778: PUSH
35779: LD_VAR 0 10
35783: PUSH
35784: LD_VAR 0 7
35788: PPUSH
35789: LD_INT 3
35791: PPUSH
35792: CALL_OW 259
35796: PUSH
35797: LD_INT 3
35799: MUL
35800: MUL
35801: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
35802: LD_VAR 0 6
35806: PPUSH
35807: CALL_OW 264
35811: PUSH
35812: LD_INT 5
35814: PUSH
35815: LD_INT 6
35817: PUSH
35818: LD_INT 46
35820: PUSH
35821: LD_INT 44
35823: PUSH
35824: LD_INT 47
35826: PUSH
35827: LD_INT 45
35829: PUSH
35830: LD_INT 28
35832: PUSH
35833: LD_INT 7
35835: PUSH
35836: LD_INT 27
35838: PUSH
35839: LD_INT 29
35841: PUSH
35842: EMPTY
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: IN
35854: PUSH
35855: LD_VAR 0 1
35859: PPUSH
35860: LD_INT 52
35862: PPUSH
35863: CALL_OW 321
35867: PUSH
35868: LD_INT 2
35870: EQUAL
35871: AND
35872: IFFALSE 35889
// bpoints := bpoints * 1.2 ;
35874: LD_ADDR_VAR 0 10
35878: PUSH
35879: LD_VAR 0 10
35883: PUSH
35884: LD_REAL  1.20000000000000E+0000
35887: MUL
35888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
35889: LD_VAR 0 6
35893: PPUSH
35894: CALL_OW 264
35898: PUSH
35899: LD_INT 6
35901: PUSH
35902: LD_INT 46
35904: PUSH
35905: LD_INT 47
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: LIST
35912: IN
35913: IFFALSE 35930
// bpoints := bpoints * 1.2 ;
35915: LD_ADDR_VAR 0 10
35919: PUSH
35920: LD_VAR 0 10
35924: PUSH
35925: LD_REAL  1.20000000000000E+0000
35928: MUL
35929: ST_TO_ADDR
// end ; unit_building :
35930: GO 35944
35932: LD_INT 3
35934: DOUBLE
35935: EQUAL
35936: IFTRUE 35940
35938: GO 35943
35940: POP
// ; end ;
35941: GO 35944
35943: POP
// for j = 1 to 3 do
35944: LD_ADDR_VAR 0 7
35948: PUSH
35949: DOUBLE
35950: LD_INT 1
35952: DEC
35953: ST_TO_ADDR
35954: LD_INT 3
35956: PUSH
35957: FOR_TO
35958: IFFALSE 36011
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
35960: LD_ADDR_VAR 0 5
35964: PUSH
35965: LD_VAR 0 5
35969: PPUSH
35970: LD_VAR 0 7
35974: PPUSH
35975: LD_VAR 0 5
35979: PUSH
35980: LD_VAR 0 7
35984: ARRAY
35985: PUSH
35986: LD_VAR 0 9
35990: PUSH
35991: LD_VAR 0 7
35995: ARRAY
35996: PUSH
35997: LD_VAR 0 10
36001: MUL
36002: PLUS
36003: PPUSH
36004: CALL_OW 1
36008: ST_TO_ADDR
36009: GO 35957
36011: POP
36012: POP
// end ;
36013: GO 34492
36015: POP
36016: POP
// result := Replace ( result , 4 , tmp ) ;
36017: LD_ADDR_VAR 0 5
36021: PUSH
36022: LD_VAR 0 5
36026: PPUSH
36027: LD_INT 4
36029: PPUSH
36030: LD_VAR 0 8
36034: PPUSH
36035: CALL_OW 1
36039: ST_TO_ADDR
// end ;
36040: LD_VAR 0 5
36044: RET
// export function DangerAtRange ( unit , range ) ; begin
36045: LD_INT 0
36047: PPUSH
// if not unit then
36048: LD_VAR 0 1
36052: NOT
36053: IFFALSE 36057
// exit ;
36055: GO 36102
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36057: LD_ADDR_VAR 0 3
36061: PUSH
36062: LD_VAR 0 1
36066: PPUSH
36067: CALL_OW 255
36071: PPUSH
36072: LD_VAR 0 1
36076: PPUSH
36077: CALL_OW 250
36081: PPUSH
36082: LD_VAR 0 1
36086: PPUSH
36087: CALL_OW 251
36091: PPUSH
36092: LD_VAR 0 2
36096: PPUSH
36097: CALL 34344 0 4
36101: ST_TO_ADDR
// end ;
36102: LD_VAR 0 3
36106: RET
// export function DangerInArea ( side , area ) ; begin
36107: LD_INT 0
36109: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36110: LD_ADDR_VAR 0 3
36114: PUSH
36115: LD_VAR 0 2
36119: PPUSH
36120: LD_INT 81
36122: PUSH
36123: LD_VAR 0 1
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PPUSH
36132: CALL_OW 70
36136: ST_TO_ADDR
// end ;
36137: LD_VAR 0 3
36141: RET
// export function IsExtension ( b ) ; begin
36142: LD_INT 0
36144: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36145: LD_ADDR_VAR 0 2
36149: PUSH
36150: LD_VAR 0 1
36154: PUSH
36155: LD_INT 23
36157: PUSH
36158: LD_INT 20
36160: PUSH
36161: LD_INT 22
36163: PUSH
36164: LD_INT 17
36166: PUSH
36167: LD_INT 24
36169: PUSH
36170: LD_INT 21
36172: PUSH
36173: LD_INT 19
36175: PUSH
36176: LD_INT 16
36178: PUSH
36179: LD_INT 25
36181: PUSH
36182: LD_INT 18
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: IN
36197: ST_TO_ADDR
// end ;
36198: LD_VAR 0 2
36202: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36203: LD_INT 0
36205: PPUSH
36206: PPUSH
36207: PPUSH
// result := [ ] ;
36208: LD_ADDR_VAR 0 4
36212: PUSH
36213: EMPTY
36214: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36215: LD_ADDR_VAR 0 5
36219: PUSH
36220: LD_VAR 0 2
36224: PPUSH
36225: LD_INT 21
36227: PUSH
36228: LD_INT 3
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PPUSH
36235: CALL_OW 70
36239: ST_TO_ADDR
// if not tmp then
36240: LD_VAR 0 5
36244: NOT
36245: IFFALSE 36249
// exit ;
36247: GO 36313
// if checkLink then
36249: LD_VAR 0 3
36253: IFFALSE 36303
// begin for i in tmp do
36255: LD_ADDR_VAR 0 6
36259: PUSH
36260: LD_VAR 0 5
36264: PUSH
36265: FOR_IN
36266: IFFALSE 36301
// if GetBase ( i ) <> base then
36268: LD_VAR 0 6
36272: PPUSH
36273: CALL_OW 274
36277: PUSH
36278: LD_VAR 0 1
36282: NONEQUAL
36283: IFFALSE 36299
// ComLinkToBase ( base , i ) ;
36285: LD_VAR 0 1
36289: PPUSH
36290: LD_VAR 0 6
36294: PPUSH
36295: CALL_OW 169
36299: GO 36265
36301: POP
36302: POP
// end ; result := tmp ;
36303: LD_ADDR_VAR 0 4
36307: PUSH
36308: LD_VAR 0 5
36312: ST_TO_ADDR
// end ;
36313: LD_VAR 0 4
36317: RET
// export function ComComplete ( units , b ) ; var i ; begin
36318: LD_INT 0
36320: PPUSH
36321: PPUSH
// if not units then
36322: LD_VAR 0 1
36326: NOT
36327: IFFALSE 36331
// exit ;
36329: GO 36421
// for i in units do
36331: LD_ADDR_VAR 0 4
36335: PUSH
36336: LD_VAR 0 1
36340: PUSH
36341: FOR_IN
36342: IFFALSE 36419
// if BuildingStatus ( b ) = bs_build then
36344: LD_VAR 0 2
36348: PPUSH
36349: CALL_OW 461
36353: PUSH
36354: LD_INT 1
36356: EQUAL
36357: IFFALSE 36417
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
36359: LD_VAR 0 4
36363: PPUSH
36364: LD_STRING h
36366: PUSH
36367: LD_VAR 0 2
36371: PPUSH
36372: CALL_OW 250
36376: PUSH
36377: LD_VAR 0 2
36381: PPUSH
36382: CALL_OW 251
36386: PUSH
36387: LD_VAR 0 2
36391: PUSH
36392: LD_INT 0
36394: PUSH
36395: LD_INT 0
36397: PUSH
36398: LD_INT 0
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: PUSH
36410: EMPTY
36411: LIST
36412: PPUSH
36413: CALL_OW 446
36417: GO 36341
36419: POP
36420: POP
// end ;
36421: LD_VAR 0 3
36425: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
36430: PPUSH
36431: PPUSH
36432: PPUSH
36433: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
36434: LD_VAR 0 1
36438: NOT
36439: PUSH
36440: LD_VAR 0 1
36444: PPUSH
36445: CALL_OW 263
36449: PUSH
36450: LD_INT 2
36452: NONEQUAL
36453: OR
36454: IFFALSE 36458
// exit ;
36456: GO 36774
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
36458: LD_ADDR_VAR 0 6
36462: PUSH
36463: LD_INT 22
36465: PUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 255
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 2
36482: PUSH
36483: LD_INT 30
36485: PUSH
36486: LD_INT 36
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: PUSH
36493: LD_INT 34
36495: PUSH
36496: LD_INT 31
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PPUSH
36512: CALL_OW 69
36516: ST_TO_ADDR
// if not tmp then
36517: LD_VAR 0 6
36521: NOT
36522: IFFALSE 36526
// exit ;
36524: GO 36774
// result := [ ] ;
36526: LD_ADDR_VAR 0 2
36530: PUSH
36531: EMPTY
36532: ST_TO_ADDR
// for i in tmp do
36533: LD_ADDR_VAR 0 3
36537: PUSH
36538: LD_VAR 0 6
36542: PUSH
36543: FOR_IN
36544: IFFALSE 36615
// begin t := UnitsInside ( i ) ;
36546: LD_ADDR_VAR 0 4
36550: PUSH
36551: LD_VAR 0 3
36555: PPUSH
36556: CALL_OW 313
36560: ST_TO_ADDR
// if t then
36561: LD_VAR 0 4
36565: IFFALSE 36613
// for j in t do
36567: LD_ADDR_VAR 0 7
36571: PUSH
36572: LD_VAR 0 4
36576: PUSH
36577: FOR_IN
36578: IFFALSE 36611
// result := Replace ( result , result + 1 , j ) ;
36580: LD_ADDR_VAR 0 2
36584: PUSH
36585: LD_VAR 0 2
36589: PPUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_INT 1
36597: PLUS
36598: PPUSH
36599: LD_VAR 0 7
36603: PPUSH
36604: CALL_OW 1
36608: ST_TO_ADDR
36609: GO 36577
36611: POP
36612: POP
// end ;
36613: GO 36543
36615: POP
36616: POP
// if not result then
36617: LD_VAR 0 2
36621: NOT
36622: IFFALSE 36626
// exit ;
36624: GO 36774
// mech := result [ 1 ] ;
36626: LD_ADDR_VAR 0 5
36630: PUSH
36631: LD_VAR 0 2
36635: PUSH
36636: LD_INT 1
36638: ARRAY
36639: ST_TO_ADDR
// if result > 1 then
36640: LD_VAR 0 2
36644: PUSH
36645: LD_INT 1
36647: GREATER
36648: IFFALSE 36760
// begin for i = 2 to result do
36650: LD_ADDR_VAR 0 3
36654: PUSH
36655: DOUBLE
36656: LD_INT 2
36658: DEC
36659: ST_TO_ADDR
36660: LD_VAR 0 2
36664: PUSH
36665: FOR_TO
36666: IFFALSE 36758
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
36668: LD_ADDR_VAR 0 4
36672: PUSH
36673: LD_VAR 0 2
36677: PUSH
36678: LD_VAR 0 3
36682: ARRAY
36683: PPUSH
36684: LD_INT 3
36686: PPUSH
36687: CALL_OW 259
36691: PUSH
36692: LD_VAR 0 2
36696: PUSH
36697: LD_VAR 0 3
36701: ARRAY
36702: PPUSH
36703: CALL_OW 432
36707: MINUS
36708: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
36709: LD_VAR 0 4
36713: PUSH
36714: LD_VAR 0 5
36718: PPUSH
36719: LD_INT 3
36721: PPUSH
36722: CALL_OW 259
36726: PUSH
36727: LD_VAR 0 5
36731: PPUSH
36732: CALL_OW 432
36736: MINUS
36737: GREATEREQUAL
36738: IFFALSE 36756
// mech := result [ i ] ;
36740: LD_ADDR_VAR 0 5
36744: PUSH
36745: LD_VAR 0 2
36749: PUSH
36750: LD_VAR 0 3
36754: ARRAY
36755: ST_TO_ADDR
// end ;
36756: GO 36665
36758: POP
36759: POP
// end ; ComLinkTo ( vehicle , mech ) ;
36760: LD_VAR 0 1
36764: PPUSH
36765: LD_VAR 0 5
36769: PPUSH
36770: CALL_OW 135
// end ;
36774: LD_VAR 0 2
36778: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
36779: LD_INT 0
36781: PPUSH
36782: PPUSH
36783: PPUSH
36784: PPUSH
36785: PPUSH
36786: PPUSH
36787: PPUSH
36788: PPUSH
36789: PPUSH
36790: PPUSH
36791: PPUSH
36792: PPUSH
36793: PPUSH
// result := [ ] ;
36794: LD_ADDR_VAR 0 7
36798: PUSH
36799: EMPTY
36800: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
36801: LD_VAR 0 1
36805: PPUSH
36806: CALL_OW 266
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: LD_INT 1
36816: PUSH
36817: EMPTY
36818: LIST
36819: LIST
36820: IN
36821: NOT
36822: IFFALSE 36826
// exit ;
36824: GO 38460
// if name then
36826: LD_VAR 0 3
36830: IFFALSE 36846
// SetBName ( base_dep , name ) ;
36832: LD_VAR 0 1
36836: PPUSH
36837: LD_VAR 0 3
36841: PPUSH
36842: CALL_OW 500
// base := GetBase ( base_dep ) ;
36846: LD_ADDR_VAR 0 15
36850: PUSH
36851: LD_VAR 0 1
36855: PPUSH
36856: CALL_OW 274
36860: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
36861: LD_ADDR_VAR 0 16
36865: PUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 255
36875: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
36876: LD_ADDR_VAR 0 17
36880: PUSH
36881: LD_VAR 0 1
36885: PPUSH
36886: CALL_OW 248
36890: ST_TO_ADDR
// if sources then
36891: LD_VAR 0 5
36895: IFFALSE 36942
// for i = 1 to 3 do
36897: LD_ADDR_VAR 0 8
36901: PUSH
36902: DOUBLE
36903: LD_INT 1
36905: DEC
36906: ST_TO_ADDR
36907: LD_INT 3
36909: PUSH
36910: FOR_TO
36911: IFFALSE 36940
// AddResourceType ( base , i , sources [ i ] ) ;
36913: LD_VAR 0 15
36917: PPUSH
36918: LD_VAR 0 8
36922: PPUSH
36923: LD_VAR 0 5
36927: PUSH
36928: LD_VAR 0 8
36932: ARRAY
36933: PPUSH
36934: CALL_OW 276
36938: GO 36910
36940: POP
36941: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
36942: LD_ADDR_VAR 0 18
36946: PUSH
36947: LD_VAR 0 15
36951: PPUSH
36952: LD_VAR 0 2
36956: PPUSH
36957: LD_INT 1
36959: PPUSH
36960: CALL 36203 0 3
36964: ST_TO_ADDR
// InitHc ;
36965: CALL_OW 19
// InitUc ;
36969: CALL_OW 18
// uc_side := side ;
36973: LD_ADDR_OWVAR 20
36977: PUSH
36978: LD_VAR 0 16
36982: ST_TO_ADDR
// uc_nation := nation ;
36983: LD_ADDR_OWVAR 21
36987: PUSH
36988: LD_VAR 0 17
36992: ST_TO_ADDR
// if buildings then
36993: LD_VAR 0 18
36997: IFFALSE 38319
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36999: LD_ADDR_VAR 0 19
37003: PUSH
37004: LD_VAR 0 18
37008: PPUSH
37009: LD_INT 2
37011: PUSH
37012: LD_INT 30
37014: PUSH
37015: LD_INT 29
37017: PUSH
37018: EMPTY
37019: LIST
37020: LIST
37021: PUSH
37022: LD_INT 30
37024: PUSH
37025: LD_INT 30
37027: PUSH
37028: EMPTY
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: LIST
37036: PPUSH
37037: CALL_OW 72
37041: ST_TO_ADDR
// if tmp then
37042: LD_VAR 0 19
37046: IFFALSE 37094
// for i in tmp do
37048: LD_ADDR_VAR 0 8
37052: PUSH
37053: LD_VAR 0 19
37057: PUSH
37058: FOR_IN
37059: IFFALSE 37092
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37061: LD_VAR 0 8
37065: PPUSH
37066: CALL_OW 250
37070: PPUSH
37071: LD_VAR 0 8
37075: PPUSH
37076: CALL_OW 251
37080: PPUSH
37081: LD_VAR 0 16
37085: PPUSH
37086: CALL_OW 441
37090: GO 37058
37092: POP
37093: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37094: LD_VAR 0 18
37098: PPUSH
37099: LD_INT 2
37101: PUSH
37102: LD_INT 30
37104: PUSH
37105: LD_INT 32
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 30
37114: PUSH
37115: LD_INT 33
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: PPUSH
37127: CALL_OW 72
37131: IFFALSE 37219
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37133: LD_ADDR_VAR 0 8
37137: PUSH
37138: LD_VAR 0 18
37142: PPUSH
37143: LD_INT 2
37145: PUSH
37146: LD_INT 30
37148: PUSH
37149: LD_INT 32
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 30
37158: PUSH
37159: LD_INT 33
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: LIST
37170: PPUSH
37171: CALL_OW 72
37175: PUSH
37176: FOR_IN
37177: IFFALSE 37217
// begin if not GetBWeapon ( i ) then
37179: LD_VAR 0 8
37183: PPUSH
37184: CALL_OW 269
37188: NOT
37189: IFFALSE 37215
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37191: LD_VAR 0 8
37195: PPUSH
37196: LD_VAR 0 8
37200: PPUSH
37201: LD_VAR 0 2
37205: PPUSH
37206: CALL 38465 0 2
37210: PPUSH
37211: CALL_OW 431
// end ;
37215: GO 37176
37217: POP
37218: POP
// end ; for i = 1 to personel do
37219: LD_ADDR_VAR 0 8
37223: PUSH
37224: DOUBLE
37225: LD_INT 1
37227: DEC
37228: ST_TO_ADDR
37229: LD_VAR 0 6
37233: PUSH
37234: FOR_TO
37235: IFFALSE 38299
// begin if i > 4 then
37237: LD_VAR 0 8
37241: PUSH
37242: LD_INT 4
37244: GREATER
37245: IFFALSE 37249
// break ;
37247: GO 38299
// case i of 1 :
37249: LD_VAR 0 8
37253: PUSH
37254: LD_INT 1
37256: DOUBLE
37257: EQUAL
37258: IFTRUE 37262
37260: GO 37342
37262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37263: LD_ADDR_VAR 0 12
37267: PUSH
37268: LD_VAR 0 18
37272: PPUSH
37273: LD_INT 22
37275: PUSH
37276: LD_VAR 0 16
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 58
37287: PUSH
37288: EMPTY
37289: LIST
37290: PUSH
37291: LD_INT 2
37293: PUSH
37294: LD_INT 30
37296: PUSH
37297: LD_INT 32
37299: PUSH
37300: EMPTY
37301: LIST
37302: LIST
37303: PUSH
37304: LD_INT 30
37306: PUSH
37307: LD_INT 4
37309: PUSH
37310: EMPTY
37311: LIST
37312: LIST
37313: PUSH
37314: LD_INT 30
37316: PUSH
37317: LD_INT 5
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: LIST
37334: PPUSH
37335: CALL_OW 72
37339: ST_TO_ADDR
37340: GO 37564
37342: LD_INT 2
37344: DOUBLE
37345: EQUAL
37346: IFTRUE 37350
37348: GO 37412
37350: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
37351: LD_ADDR_VAR 0 12
37355: PUSH
37356: LD_VAR 0 18
37360: PPUSH
37361: LD_INT 22
37363: PUSH
37364: LD_VAR 0 16
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 2
37375: PUSH
37376: LD_INT 30
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 30
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PPUSH
37405: CALL_OW 72
37409: ST_TO_ADDR
37410: GO 37564
37412: LD_INT 3
37414: DOUBLE
37415: EQUAL
37416: IFTRUE 37420
37418: GO 37482
37420: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
37421: LD_ADDR_VAR 0 12
37425: PUSH
37426: LD_VAR 0 18
37430: PPUSH
37431: LD_INT 22
37433: PUSH
37434: LD_VAR 0 16
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: LD_INT 30
37448: PUSH
37449: LD_INT 2
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 30
37458: PUSH
37459: LD_INT 3
37461: PUSH
37462: EMPTY
37463: LIST
37464: LIST
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: PUSH
37471: EMPTY
37472: LIST
37473: LIST
37474: PPUSH
37475: CALL_OW 72
37479: ST_TO_ADDR
37480: GO 37564
37482: LD_INT 4
37484: DOUBLE
37485: EQUAL
37486: IFTRUE 37490
37488: GO 37563
37490: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
37491: LD_ADDR_VAR 0 12
37495: PUSH
37496: LD_VAR 0 18
37500: PPUSH
37501: LD_INT 22
37503: PUSH
37504: LD_VAR 0 16
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: PUSH
37516: LD_INT 30
37518: PUSH
37519: LD_INT 6
37521: PUSH
37522: EMPTY
37523: LIST
37524: LIST
37525: PUSH
37526: LD_INT 30
37528: PUSH
37529: LD_INT 7
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 30
37538: PUSH
37539: LD_INT 8
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PPUSH
37556: CALL_OW 72
37560: ST_TO_ADDR
37561: GO 37564
37563: POP
// if i = 1 then
37564: LD_VAR 0 8
37568: PUSH
37569: LD_INT 1
37571: EQUAL
37572: IFFALSE 37683
// begin tmp := [ ] ;
37574: LD_ADDR_VAR 0 19
37578: PUSH
37579: EMPTY
37580: ST_TO_ADDR
// for j in f do
37581: LD_ADDR_VAR 0 9
37585: PUSH
37586: LD_VAR 0 12
37590: PUSH
37591: FOR_IN
37592: IFFALSE 37665
// if GetBType ( j ) = b_bunker then
37594: LD_VAR 0 9
37598: PPUSH
37599: CALL_OW 266
37603: PUSH
37604: LD_INT 32
37606: EQUAL
37607: IFFALSE 37634
// tmp := Insert ( tmp , 1 , j ) else
37609: LD_ADDR_VAR 0 19
37613: PUSH
37614: LD_VAR 0 19
37618: PPUSH
37619: LD_INT 1
37621: PPUSH
37622: LD_VAR 0 9
37626: PPUSH
37627: CALL_OW 2
37631: ST_TO_ADDR
37632: GO 37663
// tmp := Insert ( tmp , tmp + 1 , j ) ;
37634: LD_ADDR_VAR 0 19
37638: PUSH
37639: LD_VAR 0 19
37643: PPUSH
37644: LD_VAR 0 19
37648: PUSH
37649: LD_INT 1
37651: PLUS
37652: PPUSH
37653: LD_VAR 0 9
37657: PPUSH
37658: CALL_OW 2
37662: ST_TO_ADDR
37663: GO 37591
37665: POP
37666: POP
// if tmp then
37667: LD_VAR 0 19
37671: IFFALSE 37683
// f := tmp ;
37673: LD_ADDR_VAR 0 12
37677: PUSH
37678: LD_VAR 0 19
37682: ST_TO_ADDR
// end ; x := personel [ i ] ;
37683: LD_ADDR_VAR 0 13
37687: PUSH
37688: LD_VAR 0 6
37692: PUSH
37693: LD_VAR 0 8
37697: ARRAY
37698: ST_TO_ADDR
// if x = - 1 then
37699: LD_VAR 0 13
37703: PUSH
37704: LD_INT 1
37706: NEG
37707: EQUAL
37708: IFFALSE 37917
// begin for j in f do
37710: LD_ADDR_VAR 0 9
37714: PUSH
37715: LD_VAR 0 12
37719: PUSH
37720: FOR_IN
37721: IFFALSE 37913
// repeat InitHc ;
37723: CALL_OW 19
// if GetBType ( j ) = b_barracks then
37727: LD_VAR 0 9
37731: PPUSH
37732: CALL_OW 266
37736: PUSH
37737: LD_INT 5
37739: EQUAL
37740: IFFALSE 37810
// begin if UnitsInside ( j ) < 3 then
37742: LD_VAR 0 9
37746: PPUSH
37747: CALL_OW 313
37751: PUSH
37752: LD_INT 3
37754: LESS
37755: IFFALSE 37791
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37757: LD_INT 0
37759: PPUSH
37760: LD_INT 5
37762: PUSH
37763: LD_INT 8
37765: PUSH
37766: LD_INT 9
37768: PUSH
37769: EMPTY
37770: LIST
37771: LIST
37772: LIST
37773: PUSH
37774: LD_VAR 0 17
37778: ARRAY
37779: PPUSH
37780: LD_VAR 0 4
37784: PPUSH
37785: CALL_OW 380
37789: GO 37808
// PrepareHuman ( false , i , skill ) ;
37791: LD_INT 0
37793: PPUSH
37794: LD_VAR 0 8
37798: PPUSH
37799: LD_VAR 0 4
37803: PPUSH
37804: CALL_OW 380
// end else
37808: GO 37827
// PrepareHuman ( false , i , skill ) ;
37810: LD_INT 0
37812: PPUSH
37813: LD_VAR 0 8
37817: PPUSH
37818: LD_VAR 0 4
37822: PPUSH
37823: CALL_OW 380
// un := CreateHuman ;
37827: LD_ADDR_VAR 0 14
37831: PUSH
37832: CALL_OW 44
37836: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37837: LD_ADDR_VAR 0 7
37841: PUSH
37842: LD_VAR 0 7
37846: PPUSH
37847: LD_INT 1
37849: PPUSH
37850: LD_VAR 0 14
37854: PPUSH
37855: CALL_OW 2
37859: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
37860: LD_VAR 0 14
37864: PPUSH
37865: LD_VAR 0 9
37869: PPUSH
37870: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
37874: LD_VAR 0 9
37878: PPUSH
37879: CALL_OW 313
37883: PUSH
37884: LD_INT 6
37886: EQUAL
37887: PUSH
37888: LD_VAR 0 9
37892: PPUSH
37893: CALL_OW 266
37897: PUSH
37898: LD_INT 32
37900: PUSH
37901: LD_INT 31
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: IN
37908: OR
37909: IFFALSE 37723
37911: GO 37720
37913: POP
37914: POP
// end else
37915: GO 38297
// for j = 1 to x do
37917: LD_ADDR_VAR 0 9
37921: PUSH
37922: DOUBLE
37923: LD_INT 1
37925: DEC
37926: ST_TO_ADDR
37927: LD_VAR 0 13
37931: PUSH
37932: FOR_TO
37933: IFFALSE 38295
// begin InitHc ;
37935: CALL_OW 19
// if not f then
37939: LD_VAR 0 12
37943: NOT
37944: IFFALSE 38033
// begin PrepareHuman ( false , i , skill ) ;
37946: LD_INT 0
37948: PPUSH
37949: LD_VAR 0 8
37953: PPUSH
37954: LD_VAR 0 4
37958: PPUSH
37959: CALL_OW 380
// un := CreateHuman ;
37963: LD_ADDR_VAR 0 14
37967: PUSH
37968: CALL_OW 44
37972: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37973: LD_ADDR_VAR 0 7
37977: PUSH
37978: LD_VAR 0 7
37982: PPUSH
37983: LD_INT 1
37985: PPUSH
37986: LD_VAR 0 14
37990: PPUSH
37991: CALL_OW 2
37995: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37996: LD_VAR 0 14
38000: PPUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: CALL_OW 250
38010: PPUSH
38011: LD_VAR 0 1
38015: PPUSH
38016: CALL_OW 251
38020: PPUSH
38021: LD_INT 10
38023: PPUSH
38024: LD_INT 0
38026: PPUSH
38027: CALL_OW 50
// continue ;
38031: GO 37932
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38033: LD_VAR 0 12
38037: PUSH
38038: LD_INT 1
38040: ARRAY
38041: PPUSH
38042: CALL_OW 313
38046: PUSH
38047: LD_VAR 0 12
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PPUSH
38056: CALL_OW 266
38060: PUSH
38061: LD_INT 32
38063: PUSH
38064: LD_INT 31
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: IN
38071: AND
38072: PUSH
38073: LD_VAR 0 12
38077: PUSH
38078: LD_INT 1
38080: ARRAY
38081: PPUSH
38082: CALL_OW 313
38086: PUSH
38087: LD_INT 6
38089: EQUAL
38090: OR
38091: IFFALSE 38111
// f := Delete ( f , 1 ) ;
38093: LD_ADDR_VAR 0 12
38097: PUSH
38098: LD_VAR 0 12
38102: PPUSH
38103: LD_INT 1
38105: PPUSH
38106: CALL_OW 3
38110: ST_TO_ADDR
// if not f then
38111: LD_VAR 0 12
38115: NOT
38116: IFFALSE 38134
// begin x := x + 2 ;
38118: LD_ADDR_VAR 0 13
38122: PUSH
38123: LD_VAR 0 13
38127: PUSH
38128: LD_INT 2
38130: PLUS
38131: ST_TO_ADDR
// continue ;
38132: GO 37932
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38134: LD_VAR 0 12
38138: PUSH
38139: LD_INT 1
38141: ARRAY
38142: PPUSH
38143: CALL_OW 266
38147: PUSH
38148: LD_INT 5
38150: EQUAL
38151: IFFALSE 38225
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38153: LD_VAR 0 12
38157: PUSH
38158: LD_INT 1
38160: ARRAY
38161: PPUSH
38162: CALL_OW 313
38166: PUSH
38167: LD_INT 3
38169: LESS
38170: IFFALSE 38206
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38172: LD_INT 0
38174: PPUSH
38175: LD_INT 5
38177: PUSH
38178: LD_INT 8
38180: PUSH
38181: LD_INT 9
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: PUSH
38189: LD_VAR 0 17
38193: ARRAY
38194: PPUSH
38195: LD_VAR 0 4
38199: PPUSH
38200: CALL_OW 380
38204: GO 38223
// PrepareHuman ( false , i , skill ) ;
38206: LD_INT 0
38208: PPUSH
38209: LD_VAR 0 8
38213: PPUSH
38214: LD_VAR 0 4
38218: PPUSH
38219: CALL_OW 380
// end else
38223: GO 38242
// PrepareHuman ( false , i , skill ) ;
38225: LD_INT 0
38227: PPUSH
38228: LD_VAR 0 8
38232: PPUSH
38233: LD_VAR 0 4
38237: PPUSH
38238: CALL_OW 380
// un := CreateHuman ;
38242: LD_ADDR_VAR 0 14
38246: PUSH
38247: CALL_OW 44
38251: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38252: LD_ADDR_VAR 0 7
38256: PUSH
38257: LD_VAR 0 7
38261: PPUSH
38262: LD_INT 1
38264: PPUSH
38265: LD_VAR 0 14
38269: PPUSH
38270: CALL_OW 2
38274: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38275: LD_VAR 0 14
38279: PPUSH
38280: LD_VAR 0 12
38284: PUSH
38285: LD_INT 1
38287: ARRAY
38288: PPUSH
38289: CALL_OW 52
// end ;
38293: GO 37932
38295: POP
38296: POP
// end ;
38297: GO 37234
38299: POP
38300: POP
// result := result ^ buildings ;
38301: LD_ADDR_VAR 0 7
38305: PUSH
38306: LD_VAR 0 7
38310: PUSH
38311: LD_VAR 0 18
38315: ADD
38316: ST_TO_ADDR
// end else
38317: GO 38460
// begin for i = 1 to personel do
38319: LD_ADDR_VAR 0 8
38323: PUSH
38324: DOUBLE
38325: LD_INT 1
38327: DEC
38328: ST_TO_ADDR
38329: LD_VAR 0 6
38333: PUSH
38334: FOR_TO
38335: IFFALSE 38458
// begin if i > 4 then
38337: LD_VAR 0 8
38341: PUSH
38342: LD_INT 4
38344: GREATER
38345: IFFALSE 38349
// break ;
38347: GO 38458
// x := personel [ i ] ;
38349: LD_ADDR_VAR 0 13
38353: PUSH
38354: LD_VAR 0 6
38358: PUSH
38359: LD_VAR 0 8
38363: ARRAY
38364: ST_TO_ADDR
// if x = - 1 then
38365: LD_VAR 0 13
38369: PUSH
38370: LD_INT 1
38372: NEG
38373: EQUAL
38374: IFFALSE 38378
// continue ;
38376: GO 38334
// PrepareHuman ( false , i , skill ) ;
38378: LD_INT 0
38380: PPUSH
38381: LD_VAR 0 8
38385: PPUSH
38386: LD_VAR 0 4
38390: PPUSH
38391: CALL_OW 380
// un := CreateHuman ;
38395: LD_ADDR_VAR 0 14
38399: PUSH
38400: CALL_OW 44
38404: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38405: LD_VAR 0 14
38409: PPUSH
38410: LD_VAR 0 1
38414: PPUSH
38415: CALL_OW 250
38419: PPUSH
38420: LD_VAR 0 1
38424: PPUSH
38425: CALL_OW 251
38429: PPUSH
38430: LD_INT 10
38432: PPUSH
38433: LD_INT 0
38435: PPUSH
38436: CALL_OW 50
// result := result ^ un ;
38440: LD_ADDR_VAR 0 7
38444: PUSH
38445: LD_VAR 0 7
38449: PUSH
38450: LD_VAR 0 14
38454: ADD
38455: ST_TO_ADDR
// end ;
38456: GO 38334
38458: POP
38459: POP
// end ; end ;
38460: LD_VAR 0 7
38464: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
38465: LD_INT 0
38467: PPUSH
38468: PPUSH
38469: PPUSH
38470: PPUSH
38471: PPUSH
38472: PPUSH
38473: PPUSH
38474: PPUSH
38475: PPUSH
38476: PPUSH
38477: PPUSH
38478: PPUSH
38479: PPUSH
38480: PPUSH
38481: PPUSH
38482: PPUSH
// result := false ;
38483: LD_ADDR_VAR 0 3
38487: PUSH
38488: LD_INT 0
38490: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
38491: LD_VAR 0 1
38495: NOT
38496: PUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 266
38506: PUSH
38507: LD_INT 32
38509: PUSH
38510: LD_INT 33
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: IN
38517: NOT
38518: OR
38519: IFFALSE 38523
// exit ;
38521: GO 39632
// nat := GetNation ( tower ) ;
38523: LD_ADDR_VAR 0 12
38527: PUSH
38528: LD_VAR 0 1
38532: PPUSH
38533: CALL_OW 248
38537: ST_TO_ADDR
// side := GetSide ( tower ) ;
38538: LD_ADDR_VAR 0 16
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 255
38552: ST_TO_ADDR
// x := GetX ( tower ) ;
38553: LD_ADDR_VAR 0 10
38557: PUSH
38558: LD_VAR 0 1
38562: PPUSH
38563: CALL_OW 250
38567: ST_TO_ADDR
// y := GetY ( tower ) ;
38568: LD_ADDR_VAR 0 11
38572: PUSH
38573: LD_VAR 0 1
38577: PPUSH
38578: CALL_OW 251
38582: ST_TO_ADDR
// if not x or not y then
38583: LD_VAR 0 10
38587: NOT
38588: PUSH
38589: LD_VAR 0 11
38593: NOT
38594: OR
38595: IFFALSE 38599
// exit ;
38597: GO 39632
// weapon := 0 ;
38599: LD_ADDR_VAR 0 18
38603: PUSH
38604: LD_INT 0
38606: ST_TO_ADDR
// fac_list := [ ] ;
38607: LD_ADDR_VAR 0 17
38611: PUSH
38612: EMPTY
38613: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
38614: LD_ADDR_VAR 0 6
38618: PUSH
38619: LD_VAR 0 1
38623: PPUSH
38624: CALL_OW 274
38628: PPUSH
38629: LD_VAR 0 2
38633: PPUSH
38634: LD_INT 0
38636: PPUSH
38637: CALL 36203 0 3
38641: PPUSH
38642: LD_INT 30
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PPUSH
38652: CALL_OW 72
38656: ST_TO_ADDR
// if not factories then
38657: LD_VAR 0 6
38661: NOT
38662: IFFALSE 38666
// exit ;
38664: GO 39632
// for i in factories do
38666: LD_ADDR_VAR 0 8
38670: PUSH
38671: LD_VAR 0 6
38675: PUSH
38676: FOR_IN
38677: IFFALSE 38702
// fac_list := fac_list union AvailableWeaponList ( i ) ;
38679: LD_ADDR_VAR 0 17
38683: PUSH
38684: LD_VAR 0 17
38688: PUSH
38689: LD_VAR 0 8
38693: PPUSH
38694: CALL_OW 478
38698: UNION
38699: ST_TO_ADDR
38700: GO 38676
38702: POP
38703: POP
// if not fac_list then
38704: LD_VAR 0 17
38708: NOT
38709: IFFALSE 38713
// exit ;
38711: GO 39632
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
38713: LD_ADDR_VAR 0 5
38717: PUSH
38718: LD_INT 4
38720: PUSH
38721: LD_INT 5
38723: PUSH
38724: LD_INT 9
38726: PUSH
38727: LD_INT 10
38729: PUSH
38730: LD_INT 6
38732: PUSH
38733: LD_INT 7
38735: PUSH
38736: LD_INT 11
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: PUSH
38748: LD_INT 27
38750: PUSH
38751: LD_INT 28
38753: PUSH
38754: LD_INT 26
38756: PUSH
38757: LD_INT 30
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 43
38768: PUSH
38769: LD_INT 44
38771: PUSH
38772: LD_INT 46
38774: PUSH
38775: LD_INT 45
38777: PUSH
38778: LD_INT 47
38780: PUSH
38781: LD_INT 49
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: LIST
38796: PUSH
38797: LD_VAR 0 12
38801: ARRAY
38802: ST_TO_ADDR
// list := list isect fac_list ;
38803: LD_ADDR_VAR 0 5
38807: PUSH
38808: LD_VAR 0 5
38812: PUSH
38813: LD_VAR 0 17
38817: ISECT
38818: ST_TO_ADDR
// if not list then
38819: LD_VAR 0 5
38823: NOT
38824: IFFALSE 38828
// exit ;
38826: GO 39632
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
38828: LD_VAR 0 12
38832: PUSH
38833: LD_INT 3
38835: EQUAL
38836: PUSH
38837: LD_INT 49
38839: PUSH
38840: LD_VAR 0 5
38844: IN
38845: AND
38846: PUSH
38847: LD_INT 31
38849: PPUSH
38850: LD_VAR 0 16
38854: PPUSH
38855: CALL_OW 321
38859: PUSH
38860: LD_INT 2
38862: EQUAL
38863: AND
38864: IFFALSE 38924
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
38866: LD_INT 22
38868: PUSH
38869: LD_VAR 0 16
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 35
38880: PUSH
38881: LD_INT 49
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 91
38890: PUSH
38891: LD_VAR 0 1
38895: PUSH
38896: LD_INT 10
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: PPUSH
38909: CALL_OW 69
38913: NOT
38914: IFFALSE 38924
// weapon := ru_time_lapser ;
38916: LD_ADDR_VAR 0 18
38920: PUSH
38921: LD_INT 49
38923: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
38924: LD_VAR 0 12
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: LD_INT 2
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: IN
38939: PUSH
38940: LD_INT 11
38942: PUSH
38943: LD_VAR 0 5
38947: IN
38948: PUSH
38949: LD_INT 30
38951: PUSH
38952: LD_VAR 0 5
38956: IN
38957: OR
38958: AND
38959: PUSH
38960: LD_INT 6
38962: PPUSH
38963: LD_VAR 0 16
38967: PPUSH
38968: CALL_OW 321
38972: PUSH
38973: LD_INT 2
38975: EQUAL
38976: AND
38977: IFFALSE 39142
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
38979: LD_INT 22
38981: PUSH
38982: LD_VAR 0 16
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 35
38996: PUSH
38997: LD_INT 11
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 35
39006: PUSH
39007: LD_INT 30
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 91
39021: PUSH
39022: LD_VAR 0 1
39026: PUSH
39027: LD_INT 18
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: LIST
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: PPUSH
39040: CALL_OW 69
39044: NOT
39045: PUSH
39046: LD_INT 22
39048: PUSH
39049: LD_VAR 0 16
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 2
39060: PUSH
39061: LD_INT 30
39063: PUSH
39064: LD_INT 32
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 30
39073: PUSH
39074: LD_INT 33
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: PUSH
39086: LD_INT 91
39088: PUSH
39089: LD_VAR 0 1
39093: PUSH
39094: LD_INT 12
39096: PUSH
39097: EMPTY
39098: LIST
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: LIST
39105: LIST
39106: PUSH
39107: EMPTY
39108: LIST
39109: PPUSH
39110: CALL_OW 69
39114: PUSH
39115: LD_INT 2
39117: GREATER
39118: AND
39119: IFFALSE 39142
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39121: LD_ADDR_VAR 0 18
39125: PUSH
39126: LD_INT 11
39128: PUSH
39129: LD_INT 30
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_VAR 0 12
39140: ARRAY
39141: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39142: LD_VAR 0 18
39146: NOT
39147: PUSH
39148: LD_INT 40
39150: PPUSH
39151: LD_VAR 0 16
39155: PPUSH
39156: CALL_OW 321
39160: PUSH
39161: LD_INT 2
39163: EQUAL
39164: AND
39165: PUSH
39166: LD_INT 7
39168: PUSH
39169: LD_VAR 0 5
39173: IN
39174: PUSH
39175: LD_INT 28
39177: PUSH
39178: LD_VAR 0 5
39182: IN
39183: OR
39184: PUSH
39185: LD_INT 45
39187: PUSH
39188: LD_VAR 0 5
39192: IN
39193: OR
39194: AND
39195: IFFALSE 39449
// begin hex := GetHexInfo ( x , y ) ;
39197: LD_ADDR_VAR 0 4
39201: PUSH
39202: LD_VAR 0 10
39206: PPUSH
39207: LD_VAR 0 11
39211: PPUSH
39212: CALL_OW 546
39216: ST_TO_ADDR
// if hex [ 1 ] then
39217: LD_VAR 0 4
39221: PUSH
39222: LD_INT 1
39224: ARRAY
39225: IFFALSE 39229
// exit ;
39227: GO 39632
// height := hex [ 2 ] ;
39229: LD_ADDR_VAR 0 15
39233: PUSH
39234: LD_VAR 0 4
39238: PUSH
39239: LD_INT 2
39241: ARRAY
39242: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39243: LD_ADDR_VAR 0 14
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: LD_INT 5
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: ST_TO_ADDR
// for i in tmp do
39266: LD_ADDR_VAR 0 8
39270: PUSH
39271: LD_VAR 0 14
39275: PUSH
39276: FOR_IN
39277: IFFALSE 39447
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39279: LD_ADDR_VAR 0 9
39283: PUSH
39284: LD_VAR 0 10
39288: PPUSH
39289: LD_VAR 0 8
39293: PPUSH
39294: LD_INT 5
39296: PPUSH
39297: CALL_OW 272
39301: PUSH
39302: LD_VAR 0 11
39306: PPUSH
39307: LD_VAR 0 8
39311: PPUSH
39312: LD_INT 5
39314: PPUSH
39315: CALL_OW 273
39319: PUSH
39320: EMPTY
39321: LIST
39322: LIST
39323: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
39324: LD_VAR 0 9
39328: PUSH
39329: LD_INT 1
39331: ARRAY
39332: PPUSH
39333: LD_VAR 0 9
39337: PUSH
39338: LD_INT 2
39340: ARRAY
39341: PPUSH
39342: CALL_OW 488
39346: IFFALSE 39445
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
39348: LD_ADDR_VAR 0 4
39352: PUSH
39353: LD_VAR 0 9
39357: PUSH
39358: LD_INT 1
39360: ARRAY
39361: PPUSH
39362: LD_VAR 0 9
39366: PUSH
39367: LD_INT 2
39369: ARRAY
39370: PPUSH
39371: CALL_OW 546
39375: ST_TO_ADDR
// if hex [ 1 ] then
39376: LD_VAR 0 4
39380: PUSH
39381: LD_INT 1
39383: ARRAY
39384: IFFALSE 39388
// continue ;
39386: GO 39276
// h := hex [ 2 ] ;
39388: LD_ADDR_VAR 0 13
39392: PUSH
39393: LD_VAR 0 4
39397: PUSH
39398: LD_INT 2
39400: ARRAY
39401: ST_TO_ADDR
// if h + 7 < height then
39402: LD_VAR 0 13
39406: PUSH
39407: LD_INT 7
39409: PLUS
39410: PUSH
39411: LD_VAR 0 15
39415: LESS
39416: IFFALSE 39445
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
39418: LD_ADDR_VAR 0 18
39422: PUSH
39423: LD_INT 7
39425: PUSH
39426: LD_INT 28
39428: PUSH
39429: LD_INT 45
39431: PUSH
39432: EMPTY
39433: LIST
39434: LIST
39435: LIST
39436: PUSH
39437: LD_VAR 0 12
39441: ARRAY
39442: ST_TO_ADDR
// break ;
39443: GO 39447
// end ; end ; end ;
39445: GO 39276
39447: POP
39448: POP
// end ; if not weapon then
39449: LD_VAR 0 18
39453: NOT
39454: IFFALSE 39514
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
39456: LD_ADDR_VAR 0 5
39460: PUSH
39461: LD_VAR 0 5
39465: PUSH
39466: LD_INT 11
39468: PUSH
39469: LD_INT 30
39471: PUSH
39472: LD_INT 49
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: LIST
39479: DIFF
39480: ST_TO_ADDR
// if not list then
39481: LD_VAR 0 5
39485: NOT
39486: IFFALSE 39490
// exit ;
39488: GO 39632
// weapon := list [ rand ( 1 , list ) ] ;
39490: LD_ADDR_VAR 0 18
39494: PUSH
39495: LD_VAR 0 5
39499: PUSH
39500: LD_INT 1
39502: PPUSH
39503: LD_VAR 0 5
39507: PPUSH
39508: CALL_OW 12
39512: ARRAY
39513: ST_TO_ADDR
// end ; if weapon then
39514: LD_VAR 0 18
39518: IFFALSE 39632
// begin tmp := CostOfWeapon ( weapon ) ;
39520: LD_ADDR_VAR 0 14
39524: PUSH
39525: LD_VAR 0 18
39529: PPUSH
39530: CALL_OW 451
39534: ST_TO_ADDR
// j := GetBase ( tower ) ;
39535: LD_ADDR_VAR 0 9
39539: PUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: CALL_OW 274
39549: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
39550: LD_VAR 0 9
39554: PPUSH
39555: LD_INT 1
39557: PPUSH
39558: CALL_OW 275
39562: PUSH
39563: LD_VAR 0 14
39567: PUSH
39568: LD_INT 1
39570: ARRAY
39571: GREATEREQUAL
39572: PUSH
39573: LD_VAR 0 9
39577: PPUSH
39578: LD_INT 2
39580: PPUSH
39581: CALL_OW 275
39585: PUSH
39586: LD_VAR 0 14
39590: PUSH
39591: LD_INT 2
39593: ARRAY
39594: GREATEREQUAL
39595: AND
39596: PUSH
39597: LD_VAR 0 9
39601: PPUSH
39602: LD_INT 3
39604: PPUSH
39605: CALL_OW 275
39609: PUSH
39610: LD_VAR 0 14
39614: PUSH
39615: LD_INT 3
39617: ARRAY
39618: GREATEREQUAL
39619: AND
39620: IFFALSE 39632
// result := weapon ;
39622: LD_ADDR_VAR 0 3
39626: PUSH
39627: LD_VAR 0 18
39631: ST_TO_ADDR
// end ; end ;
39632: LD_VAR 0 3
39636: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
39637: LD_INT 0
39639: PPUSH
39640: PPUSH
// result := true ;
39641: LD_ADDR_VAR 0 3
39645: PUSH
39646: LD_INT 1
39648: ST_TO_ADDR
// if array1 = array2 then
39649: LD_VAR 0 1
39653: PUSH
39654: LD_VAR 0 2
39658: EQUAL
39659: IFFALSE 39719
// begin for i = 1 to array1 do
39661: LD_ADDR_VAR 0 4
39665: PUSH
39666: DOUBLE
39667: LD_INT 1
39669: DEC
39670: ST_TO_ADDR
39671: LD_VAR 0 1
39675: PUSH
39676: FOR_TO
39677: IFFALSE 39715
// if array1 [ i ] <> array2 [ i ] then
39679: LD_VAR 0 1
39683: PUSH
39684: LD_VAR 0 4
39688: ARRAY
39689: PUSH
39690: LD_VAR 0 2
39694: PUSH
39695: LD_VAR 0 4
39699: ARRAY
39700: NONEQUAL
39701: IFFALSE 39713
// begin result := false ;
39703: LD_ADDR_VAR 0 3
39707: PUSH
39708: LD_INT 0
39710: ST_TO_ADDR
// break ;
39711: GO 39715
// end ;
39713: GO 39676
39715: POP
39716: POP
// end else
39717: GO 39727
// result := false ;
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_INT 0
39726: ST_TO_ADDR
// end ;
39727: LD_VAR 0 3
39731: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
39732: LD_INT 0
39734: PPUSH
39735: PPUSH
// if not array1 or not array2 then
39736: LD_VAR 0 1
39740: NOT
39741: PUSH
39742: LD_VAR 0 2
39746: NOT
39747: OR
39748: IFFALSE 39752
// exit ;
39750: GO 39816
// result := true ;
39752: LD_ADDR_VAR 0 3
39756: PUSH
39757: LD_INT 1
39759: ST_TO_ADDR
// for i = 1 to array1 do
39760: LD_ADDR_VAR 0 4
39764: PUSH
39765: DOUBLE
39766: LD_INT 1
39768: DEC
39769: ST_TO_ADDR
39770: LD_VAR 0 1
39774: PUSH
39775: FOR_TO
39776: IFFALSE 39814
// if array1 [ i ] <> array2 [ i ] then
39778: LD_VAR 0 1
39782: PUSH
39783: LD_VAR 0 4
39787: ARRAY
39788: PUSH
39789: LD_VAR 0 2
39793: PUSH
39794: LD_VAR 0 4
39798: ARRAY
39799: NONEQUAL
39800: IFFALSE 39812
// begin result := false ;
39802: LD_ADDR_VAR 0 3
39806: PUSH
39807: LD_INT 0
39809: ST_TO_ADDR
// break ;
39810: GO 39814
// end ;
39812: GO 39775
39814: POP
39815: POP
// end ;
39816: LD_VAR 0 3
39820: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
39821: LD_INT 0
39823: PPUSH
39824: PPUSH
39825: PPUSH
// pom := GetBase ( fac ) ;
39826: LD_ADDR_VAR 0 5
39830: PUSH
39831: LD_VAR 0 1
39835: PPUSH
39836: CALL_OW 274
39840: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
39841: LD_ADDR_VAR 0 4
39845: PUSH
39846: LD_VAR 0 2
39850: PUSH
39851: LD_INT 1
39853: ARRAY
39854: PPUSH
39855: LD_VAR 0 2
39859: PUSH
39860: LD_INT 2
39862: ARRAY
39863: PPUSH
39864: LD_VAR 0 2
39868: PUSH
39869: LD_INT 3
39871: ARRAY
39872: PPUSH
39873: LD_VAR 0 2
39877: PUSH
39878: LD_INT 4
39880: ARRAY
39881: PPUSH
39882: CALL_OW 449
39886: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39887: LD_ADDR_VAR 0 3
39891: PUSH
39892: LD_VAR 0 5
39896: PPUSH
39897: LD_INT 1
39899: PPUSH
39900: CALL_OW 275
39904: PUSH
39905: LD_VAR 0 4
39909: PUSH
39910: LD_INT 1
39912: ARRAY
39913: GREATEREQUAL
39914: PUSH
39915: LD_VAR 0 5
39919: PPUSH
39920: LD_INT 2
39922: PPUSH
39923: CALL_OW 275
39927: PUSH
39928: LD_VAR 0 4
39932: PUSH
39933: LD_INT 2
39935: ARRAY
39936: GREATEREQUAL
39937: AND
39938: PUSH
39939: LD_VAR 0 5
39943: PPUSH
39944: LD_INT 3
39946: PPUSH
39947: CALL_OW 275
39951: PUSH
39952: LD_VAR 0 4
39956: PUSH
39957: LD_INT 3
39959: ARRAY
39960: GREATEREQUAL
39961: AND
39962: ST_TO_ADDR
// end ;
39963: LD_VAR 0 3
39967: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
39968: LD_INT 0
39970: PPUSH
39971: PPUSH
39972: PPUSH
39973: PPUSH
// pom := GetBase ( building ) ;
39974: LD_ADDR_VAR 0 3
39978: PUSH
39979: LD_VAR 0 1
39983: PPUSH
39984: CALL_OW 274
39988: ST_TO_ADDR
// if not pom then
39989: LD_VAR 0 3
39993: NOT
39994: IFFALSE 39998
// exit ;
39996: GO 40168
// btype := GetBType ( building ) ;
39998: LD_ADDR_VAR 0 5
40002: PUSH
40003: LD_VAR 0 1
40007: PPUSH
40008: CALL_OW 266
40012: ST_TO_ADDR
// if btype = b_armoury then
40013: LD_VAR 0 5
40017: PUSH
40018: LD_INT 4
40020: EQUAL
40021: IFFALSE 40031
// btype := b_barracks ;
40023: LD_ADDR_VAR 0 5
40027: PUSH
40028: LD_INT 5
40030: ST_TO_ADDR
// if btype = b_depot then
40031: LD_VAR 0 5
40035: PUSH
40036: LD_INT 0
40038: EQUAL
40039: IFFALSE 40049
// btype := b_warehouse ;
40041: LD_ADDR_VAR 0 5
40045: PUSH
40046: LD_INT 1
40048: ST_TO_ADDR
// if btype = b_workshop then
40049: LD_VAR 0 5
40053: PUSH
40054: LD_INT 2
40056: EQUAL
40057: IFFALSE 40067
// btype := b_factory ;
40059: LD_ADDR_VAR 0 5
40063: PUSH
40064: LD_INT 3
40066: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40067: LD_ADDR_VAR 0 4
40071: PUSH
40072: LD_VAR 0 5
40076: PPUSH
40077: LD_VAR 0 1
40081: PPUSH
40082: CALL_OW 248
40086: PPUSH
40087: CALL_OW 450
40091: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40092: LD_ADDR_VAR 0 2
40096: PUSH
40097: LD_VAR 0 3
40101: PPUSH
40102: LD_INT 1
40104: PPUSH
40105: CALL_OW 275
40109: PUSH
40110: LD_VAR 0 4
40114: PUSH
40115: LD_INT 1
40117: ARRAY
40118: GREATEREQUAL
40119: PUSH
40120: LD_VAR 0 3
40124: PPUSH
40125: LD_INT 2
40127: PPUSH
40128: CALL_OW 275
40132: PUSH
40133: LD_VAR 0 4
40137: PUSH
40138: LD_INT 2
40140: ARRAY
40141: GREATEREQUAL
40142: AND
40143: PUSH
40144: LD_VAR 0 3
40148: PPUSH
40149: LD_INT 3
40151: PPUSH
40152: CALL_OW 275
40156: PUSH
40157: LD_VAR 0 4
40161: PUSH
40162: LD_INT 3
40164: ARRAY
40165: GREATEREQUAL
40166: AND
40167: ST_TO_ADDR
// end ;
40168: LD_VAR 0 2
40172: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40173: LD_INT 0
40175: PPUSH
40176: PPUSH
40177: PPUSH
// pom := GetBase ( building ) ;
40178: LD_ADDR_VAR 0 4
40182: PUSH
40183: LD_VAR 0 1
40187: PPUSH
40188: CALL_OW 274
40192: ST_TO_ADDR
// if not pom then
40193: LD_VAR 0 4
40197: NOT
40198: IFFALSE 40202
// exit ;
40200: GO 40303
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40202: LD_ADDR_VAR 0 5
40206: PUSH
40207: LD_VAR 0 2
40211: PPUSH
40212: LD_VAR 0 1
40216: PPUSH
40217: CALL_OW 248
40221: PPUSH
40222: CALL_OW 450
40226: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40227: LD_ADDR_VAR 0 3
40231: PUSH
40232: LD_VAR 0 4
40236: PPUSH
40237: LD_INT 1
40239: PPUSH
40240: CALL_OW 275
40244: PUSH
40245: LD_VAR 0 5
40249: PUSH
40250: LD_INT 1
40252: ARRAY
40253: GREATEREQUAL
40254: PUSH
40255: LD_VAR 0 4
40259: PPUSH
40260: LD_INT 2
40262: PPUSH
40263: CALL_OW 275
40267: PUSH
40268: LD_VAR 0 5
40272: PUSH
40273: LD_INT 2
40275: ARRAY
40276: GREATEREQUAL
40277: AND
40278: PUSH
40279: LD_VAR 0 4
40283: PPUSH
40284: LD_INT 3
40286: PPUSH
40287: CALL_OW 275
40291: PUSH
40292: LD_VAR 0 5
40296: PUSH
40297: LD_INT 3
40299: ARRAY
40300: GREATEREQUAL
40301: AND
40302: ST_TO_ADDR
// end ;
40303: LD_VAR 0 3
40307: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
40308: LD_INT 0
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
// result := false ;
40321: LD_ADDR_VAR 0 8
40325: PUSH
40326: LD_INT 0
40328: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
40329: LD_VAR 0 5
40333: NOT
40334: PUSH
40335: LD_VAR 0 1
40339: NOT
40340: OR
40341: PUSH
40342: LD_VAR 0 2
40346: NOT
40347: OR
40348: PUSH
40349: LD_VAR 0 3
40353: NOT
40354: OR
40355: IFFALSE 40359
// exit ;
40357: GO 41173
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
40359: LD_ADDR_VAR 0 14
40363: PUSH
40364: LD_VAR 0 1
40368: PPUSH
40369: LD_VAR 0 2
40373: PPUSH
40374: LD_VAR 0 3
40378: PPUSH
40379: LD_VAR 0 4
40383: PPUSH
40384: LD_VAR 0 5
40388: PUSH
40389: LD_INT 1
40391: ARRAY
40392: PPUSH
40393: CALL_OW 248
40397: PPUSH
40398: LD_INT 0
40400: PPUSH
40401: CALL 42426 0 6
40405: ST_TO_ADDR
// if not hexes then
40406: LD_VAR 0 14
40410: NOT
40411: IFFALSE 40415
// exit ;
40413: GO 41173
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40415: LD_ADDR_VAR 0 17
40419: PUSH
40420: LD_VAR 0 5
40424: PPUSH
40425: LD_INT 22
40427: PUSH
40428: LD_VAR 0 13
40432: PPUSH
40433: CALL_OW 255
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 30
40447: PUSH
40448: LD_INT 0
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 30
40457: PUSH
40458: LD_INT 1
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: LIST
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PPUSH
40474: CALL_OW 72
40478: ST_TO_ADDR
// for i = 1 to hexes do
40479: LD_ADDR_VAR 0 9
40483: PUSH
40484: DOUBLE
40485: LD_INT 1
40487: DEC
40488: ST_TO_ADDR
40489: LD_VAR 0 14
40493: PUSH
40494: FOR_TO
40495: IFFALSE 41171
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40497: LD_ADDR_VAR 0 13
40501: PUSH
40502: LD_VAR 0 14
40506: PUSH
40507: LD_VAR 0 9
40511: ARRAY
40512: PUSH
40513: LD_INT 1
40515: ARRAY
40516: PPUSH
40517: LD_VAR 0 14
40521: PUSH
40522: LD_VAR 0 9
40526: ARRAY
40527: PUSH
40528: LD_INT 2
40530: ARRAY
40531: PPUSH
40532: CALL_OW 428
40536: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
40537: LD_VAR 0 14
40541: PUSH
40542: LD_VAR 0 9
40546: ARRAY
40547: PUSH
40548: LD_INT 1
40550: ARRAY
40551: PPUSH
40552: LD_VAR 0 14
40556: PUSH
40557: LD_VAR 0 9
40561: ARRAY
40562: PUSH
40563: LD_INT 2
40565: ARRAY
40566: PPUSH
40567: CALL_OW 351
40571: PUSH
40572: LD_VAR 0 14
40576: PUSH
40577: LD_VAR 0 9
40581: ARRAY
40582: PUSH
40583: LD_INT 1
40585: ARRAY
40586: PPUSH
40587: LD_VAR 0 14
40591: PUSH
40592: LD_VAR 0 9
40596: ARRAY
40597: PUSH
40598: LD_INT 2
40600: ARRAY
40601: PPUSH
40602: CALL_OW 488
40606: NOT
40607: OR
40608: PUSH
40609: LD_VAR 0 13
40613: PPUSH
40614: CALL_OW 247
40618: PUSH
40619: LD_INT 3
40621: EQUAL
40622: OR
40623: IFFALSE 40629
// exit ;
40625: POP
40626: POP
40627: GO 41173
// if not tmp then
40629: LD_VAR 0 13
40633: NOT
40634: IFFALSE 40638
// continue ;
40636: GO 40494
// result := true ;
40638: LD_ADDR_VAR 0 8
40642: PUSH
40643: LD_INT 1
40645: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
40646: LD_VAR 0 6
40650: PUSH
40651: LD_VAR 0 13
40655: PPUSH
40656: CALL_OW 247
40660: PUSH
40661: LD_INT 2
40663: EQUAL
40664: AND
40665: PUSH
40666: LD_VAR 0 13
40670: PPUSH
40671: CALL_OW 263
40675: PUSH
40676: LD_INT 1
40678: EQUAL
40679: AND
40680: IFFALSE 40844
// begin if IsDrivenBy ( tmp ) then
40682: LD_VAR 0 13
40686: PPUSH
40687: CALL_OW 311
40691: IFFALSE 40695
// continue ;
40693: GO 40494
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
40695: LD_VAR 0 6
40699: PPUSH
40700: LD_INT 3
40702: PUSH
40703: LD_INT 60
40705: PUSH
40706: EMPTY
40707: LIST
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: PUSH
40716: LD_INT 55
40718: PUSH
40719: EMPTY
40720: LIST
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: PPUSH
40730: CALL_OW 72
40734: IFFALSE 40842
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
40736: LD_ADDR_VAR 0 18
40740: PUSH
40741: LD_VAR 0 6
40745: PPUSH
40746: LD_INT 3
40748: PUSH
40749: LD_INT 60
40751: PUSH
40752: EMPTY
40753: LIST
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: LD_INT 55
40764: PUSH
40765: EMPTY
40766: LIST
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PPUSH
40776: CALL_OW 72
40780: PUSH
40781: LD_INT 1
40783: ARRAY
40784: ST_TO_ADDR
// if IsInUnit ( driver ) then
40785: LD_VAR 0 18
40789: PPUSH
40790: CALL_OW 310
40794: IFFALSE 40805
// ComExit ( driver ) ;
40796: LD_VAR 0 18
40800: PPUSH
40801: CALL 66218 0 1
// AddComEnterUnit ( driver , tmp ) ;
40805: LD_VAR 0 18
40809: PPUSH
40810: LD_VAR 0 13
40814: PPUSH
40815: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
40819: LD_VAR 0 18
40823: PPUSH
40824: LD_VAR 0 7
40828: PPUSH
40829: CALL_OW 173
// AddComExitVehicle ( driver ) ;
40833: LD_VAR 0 18
40837: PPUSH
40838: CALL_OW 181
// end ; continue ;
40842: GO 40494
// end ; if not cleaners or not tmp in cleaners then
40844: LD_VAR 0 6
40848: NOT
40849: PUSH
40850: LD_VAR 0 13
40854: PUSH
40855: LD_VAR 0 6
40859: IN
40860: NOT
40861: OR
40862: IFFALSE 41169
// begin if dep then
40864: LD_VAR 0 17
40868: IFFALSE 41004
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
40870: LD_ADDR_VAR 0 16
40874: PUSH
40875: LD_VAR 0 17
40879: PUSH
40880: LD_INT 1
40882: ARRAY
40883: PPUSH
40884: CALL_OW 250
40888: PPUSH
40889: LD_VAR 0 17
40893: PUSH
40894: LD_INT 1
40896: ARRAY
40897: PPUSH
40898: CALL_OW 254
40902: PPUSH
40903: LD_INT 5
40905: PPUSH
40906: CALL_OW 272
40910: PUSH
40911: LD_VAR 0 17
40915: PUSH
40916: LD_INT 1
40918: ARRAY
40919: PPUSH
40920: CALL_OW 251
40924: PPUSH
40925: LD_VAR 0 17
40929: PUSH
40930: LD_INT 1
40932: ARRAY
40933: PPUSH
40934: CALL_OW 254
40938: PPUSH
40939: LD_INT 5
40941: PPUSH
40942: CALL_OW 273
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
40951: LD_VAR 0 16
40955: PUSH
40956: LD_INT 1
40958: ARRAY
40959: PPUSH
40960: LD_VAR 0 16
40964: PUSH
40965: LD_INT 2
40967: ARRAY
40968: PPUSH
40969: CALL_OW 488
40973: IFFALSE 41004
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
40975: LD_VAR 0 13
40979: PPUSH
40980: LD_VAR 0 16
40984: PUSH
40985: LD_INT 1
40987: ARRAY
40988: PPUSH
40989: LD_VAR 0 16
40993: PUSH
40994: LD_INT 2
40996: ARRAY
40997: PPUSH
40998: CALL_OW 111
// continue ;
41002: GO 40494
// end ; end ; r := GetDir ( tmp ) ;
41004: LD_ADDR_VAR 0 15
41008: PUSH
41009: LD_VAR 0 13
41013: PPUSH
41014: CALL_OW 254
41018: ST_TO_ADDR
// if r = 5 then
41019: LD_VAR 0 15
41023: PUSH
41024: LD_INT 5
41026: EQUAL
41027: IFFALSE 41037
// r := 0 ;
41029: LD_ADDR_VAR 0 15
41033: PUSH
41034: LD_INT 0
41036: ST_TO_ADDR
// for j = r to 5 do
41037: LD_ADDR_VAR 0 10
41041: PUSH
41042: DOUBLE
41043: LD_VAR 0 15
41047: DEC
41048: ST_TO_ADDR
41049: LD_INT 5
41051: PUSH
41052: FOR_TO
41053: IFFALSE 41167
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41055: LD_ADDR_VAR 0 11
41059: PUSH
41060: LD_VAR 0 13
41064: PPUSH
41065: CALL_OW 250
41069: PPUSH
41070: LD_VAR 0 10
41074: PPUSH
41075: LD_INT 2
41077: PPUSH
41078: CALL_OW 272
41082: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41083: LD_ADDR_VAR 0 12
41087: PUSH
41088: LD_VAR 0 13
41092: PPUSH
41093: CALL_OW 251
41097: PPUSH
41098: LD_VAR 0 10
41102: PPUSH
41103: LD_INT 2
41105: PPUSH
41106: CALL_OW 273
41110: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41111: LD_VAR 0 11
41115: PPUSH
41116: LD_VAR 0 12
41120: PPUSH
41121: CALL_OW 488
41125: PUSH
41126: LD_VAR 0 11
41130: PPUSH
41131: LD_VAR 0 12
41135: PPUSH
41136: CALL_OW 428
41140: NOT
41141: AND
41142: IFFALSE 41165
// begin ComMoveXY ( tmp , _x , _y ) ;
41144: LD_VAR 0 13
41148: PPUSH
41149: LD_VAR 0 11
41153: PPUSH
41154: LD_VAR 0 12
41158: PPUSH
41159: CALL_OW 111
// break ;
41163: GO 41167
// end ; end ;
41165: GO 41052
41167: POP
41168: POP
// end ; end ;
41169: GO 40494
41171: POP
41172: POP
// end ;
41173: LD_VAR 0 8
41177: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41178: LD_INT 0
41180: PPUSH
// result := true ;
41181: LD_ADDR_VAR 0 3
41185: PUSH
41186: LD_INT 1
41188: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41189: LD_VAR 0 2
41193: PUSH
41194: LD_INT 24
41196: DOUBLE
41197: EQUAL
41198: IFTRUE 41208
41200: LD_INT 33
41202: DOUBLE
41203: EQUAL
41204: IFTRUE 41208
41206: GO 41233
41208: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41209: LD_ADDR_VAR 0 3
41213: PUSH
41214: LD_INT 32
41216: PPUSH
41217: LD_VAR 0 1
41221: PPUSH
41222: CALL_OW 321
41226: PUSH
41227: LD_INT 2
41229: EQUAL
41230: ST_TO_ADDR
41231: GO 41549
41233: LD_INT 20
41235: DOUBLE
41236: EQUAL
41237: IFTRUE 41241
41239: GO 41266
41241: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41242: LD_ADDR_VAR 0 3
41246: PUSH
41247: LD_INT 6
41249: PPUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL_OW 321
41259: PUSH
41260: LD_INT 2
41262: EQUAL
41263: ST_TO_ADDR
41264: GO 41549
41266: LD_INT 22
41268: DOUBLE
41269: EQUAL
41270: IFTRUE 41280
41272: LD_INT 36
41274: DOUBLE
41275: EQUAL
41276: IFTRUE 41280
41278: GO 41305
41280: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41281: LD_ADDR_VAR 0 3
41285: PUSH
41286: LD_INT 15
41288: PPUSH
41289: LD_VAR 0 1
41293: PPUSH
41294: CALL_OW 321
41298: PUSH
41299: LD_INT 2
41301: EQUAL
41302: ST_TO_ADDR
41303: GO 41549
41305: LD_INT 30
41307: DOUBLE
41308: EQUAL
41309: IFTRUE 41313
41311: GO 41338
41313: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
41314: LD_ADDR_VAR 0 3
41318: PUSH
41319: LD_INT 20
41321: PPUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 321
41331: PUSH
41332: LD_INT 2
41334: EQUAL
41335: ST_TO_ADDR
41336: GO 41549
41338: LD_INT 28
41340: DOUBLE
41341: EQUAL
41342: IFTRUE 41352
41344: LD_INT 21
41346: DOUBLE
41347: EQUAL
41348: IFTRUE 41352
41350: GO 41377
41352: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_INT 21
41360: PPUSH
41361: LD_VAR 0 1
41365: PPUSH
41366: CALL_OW 321
41370: PUSH
41371: LD_INT 2
41373: EQUAL
41374: ST_TO_ADDR
41375: GO 41549
41377: LD_INT 16
41379: DOUBLE
41380: EQUAL
41381: IFTRUE 41385
41383: GO 41410
41385: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
41386: LD_ADDR_VAR 0 3
41390: PUSH
41391: LD_INT 84
41393: PPUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL_OW 321
41403: PUSH
41404: LD_INT 2
41406: EQUAL
41407: ST_TO_ADDR
41408: GO 41549
41410: LD_INT 19
41412: DOUBLE
41413: EQUAL
41414: IFTRUE 41424
41416: LD_INT 23
41418: DOUBLE
41419: EQUAL
41420: IFTRUE 41424
41422: GO 41449
41424: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
41425: LD_ADDR_VAR 0 3
41429: PUSH
41430: LD_INT 83
41432: PPUSH
41433: LD_VAR 0 1
41437: PPUSH
41438: CALL_OW 321
41442: PUSH
41443: LD_INT 2
41445: EQUAL
41446: ST_TO_ADDR
41447: GO 41549
41449: LD_INT 17
41451: DOUBLE
41452: EQUAL
41453: IFTRUE 41457
41455: GO 41482
41457: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
41458: LD_ADDR_VAR 0 3
41462: PUSH
41463: LD_INT 39
41465: PPUSH
41466: LD_VAR 0 1
41470: PPUSH
41471: CALL_OW 321
41475: PUSH
41476: LD_INT 2
41478: EQUAL
41479: ST_TO_ADDR
41480: GO 41549
41482: LD_INT 18
41484: DOUBLE
41485: EQUAL
41486: IFTRUE 41490
41488: GO 41515
41490: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
41491: LD_ADDR_VAR 0 3
41495: PUSH
41496: LD_INT 40
41498: PPUSH
41499: LD_VAR 0 1
41503: PPUSH
41504: CALL_OW 321
41508: PUSH
41509: LD_INT 2
41511: EQUAL
41512: ST_TO_ADDR
41513: GO 41549
41515: LD_INT 27
41517: DOUBLE
41518: EQUAL
41519: IFTRUE 41523
41521: GO 41548
41523: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
41524: LD_ADDR_VAR 0 3
41528: PUSH
41529: LD_INT 35
41531: PPUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: CALL_OW 321
41541: PUSH
41542: LD_INT 2
41544: EQUAL
41545: ST_TO_ADDR
41546: GO 41549
41548: POP
// end ;
41549: LD_VAR 0 3
41553: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
41554: LD_INT 0
41556: PPUSH
41557: PPUSH
41558: PPUSH
41559: PPUSH
41560: PPUSH
41561: PPUSH
41562: PPUSH
41563: PPUSH
41564: PPUSH
41565: PPUSH
41566: PPUSH
// result := false ;
41567: LD_ADDR_VAR 0 6
41571: PUSH
41572: LD_INT 0
41574: ST_TO_ADDR
// if btype = b_depot then
41575: LD_VAR 0 2
41579: PUSH
41580: LD_INT 0
41582: EQUAL
41583: IFFALSE 41595
// begin result := true ;
41585: LD_ADDR_VAR 0 6
41589: PUSH
41590: LD_INT 1
41592: ST_TO_ADDR
// exit ;
41593: GO 42421
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
41595: LD_VAR 0 1
41599: NOT
41600: PUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 266
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: IN
41621: NOT
41622: OR
41623: PUSH
41624: LD_VAR 0 2
41628: NOT
41629: OR
41630: PUSH
41631: LD_VAR 0 5
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 2
41644: PUSH
41645: LD_INT 3
41647: PUSH
41648: LD_INT 4
41650: PUSH
41651: LD_INT 5
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: IN
41662: NOT
41663: OR
41664: PUSH
41665: LD_VAR 0 3
41669: PPUSH
41670: LD_VAR 0 4
41674: PPUSH
41675: CALL_OW 488
41679: NOT
41680: OR
41681: IFFALSE 41685
// exit ;
41683: GO 42421
// side := GetSide ( depot ) ;
41685: LD_ADDR_VAR 0 9
41689: PUSH
41690: LD_VAR 0 1
41694: PPUSH
41695: CALL_OW 255
41699: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
41700: LD_VAR 0 9
41704: PPUSH
41705: LD_VAR 0 2
41709: PPUSH
41710: CALL 41178 0 2
41714: NOT
41715: IFFALSE 41719
// exit ;
41717: GO 42421
// pom := GetBase ( depot ) ;
41719: LD_ADDR_VAR 0 10
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 274
41733: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
41734: LD_ADDR_VAR 0 11
41738: PUSH
41739: LD_VAR 0 2
41743: PPUSH
41744: LD_VAR 0 1
41748: PPUSH
41749: CALL_OW 248
41753: PPUSH
41754: CALL_OW 450
41758: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
41759: LD_VAR 0 10
41763: PPUSH
41764: LD_INT 1
41766: PPUSH
41767: CALL_OW 275
41771: PUSH
41772: LD_VAR 0 11
41776: PUSH
41777: LD_INT 1
41779: ARRAY
41780: GREATEREQUAL
41781: PUSH
41782: LD_VAR 0 10
41786: PPUSH
41787: LD_INT 2
41789: PPUSH
41790: CALL_OW 275
41794: PUSH
41795: LD_VAR 0 11
41799: PUSH
41800: LD_INT 2
41802: ARRAY
41803: GREATEREQUAL
41804: AND
41805: PUSH
41806: LD_VAR 0 10
41810: PPUSH
41811: LD_INT 3
41813: PPUSH
41814: CALL_OW 275
41818: PUSH
41819: LD_VAR 0 11
41823: PUSH
41824: LD_INT 3
41826: ARRAY
41827: GREATEREQUAL
41828: AND
41829: NOT
41830: IFFALSE 41834
// exit ;
41832: GO 42421
// if GetBType ( depot ) = b_depot then
41834: LD_VAR 0 1
41838: PPUSH
41839: CALL_OW 266
41843: PUSH
41844: LD_INT 0
41846: EQUAL
41847: IFFALSE 41859
// dist := 28 else
41849: LD_ADDR_VAR 0 14
41853: PUSH
41854: LD_INT 28
41856: ST_TO_ADDR
41857: GO 41867
// dist := 36 ;
41859: LD_ADDR_VAR 0 14
41863: PUSH
41864: LD_INT 36
41866: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
41867: LD_VAR 0 1
41871: PPUSH
41872: LD_VAR 0 3
41876: PPUSH
41877: LD_VAR 0 4
41881: PPUSH
41882: CALL_OW 297
41886: PUSH
41887: LD_VAR 0 14
41891: GREATER
41892: IFFALSE 41896
// exit ;
41894: GO 42421
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
41896: LD_ADDR_VAR 0 12
41900: PUSH
41901: LD_VAR 0 2
41905: PPUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_VAR 0 4
41915: PPUSH
41916: LD_VAR 0 5
41920: PPUSH
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 248
41930: PPUSH
41931: LD_INT 0
41933: PPUSH
41934: CALL 42426 0 6
41938: ST_TO_ADDR
// if not hexes then
41939: LD_VAR 0 12
41943: NOT
41944: IFFALSE 41948
// exit ;
41946: GO 42421
// hex := GetHexInfo ( x , y ) ;
41948: LD_ADDR_VAR 0 15
41952: PUSH
41953: LD_VAR 0 3
41957: PPUSH
41958: LD_VAR 0 4
41962: PPUSH
41963: CALL_OW 546
41967: ST_TO_ADDR
// if hex [ 1 ] then
41968: LD_VAR 0 15
41972: PUSH
41973: LD_INT 1
41975: ARRAY
41976: IFFALSE 41980
// exit ;
41978: GO 42421
// height := hex [ 2 ] ;
41980: LD_ADDR_VAR 0 13
41984: PUSH
41985: LD_VAR 0 15
41989: PUSH
41990: LD_INT 2
41992: ARRAY
41993: ST_TO_ADDR
// for i = 1 to hexes do
41994: LD_ADDR_VAR 0 7
41998: PUSH
41999: DOUBLE
42000: LD_INT 1
42002: DEC
42003: ST_TO_ADDR
42004: LD_VAR 0 12
42008: PUSH
42009: FOR_TO
42010: IFFALSE 42340
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42012: LD_VAR 0 12
42016: PUSH
42017: LD_VAR 0 7
42021: ARRAY
42022: PUSH
42023: LD_INT 1
42025: ARRAY
42026: PPUSH
42027: LD_VAR 0 12
42031: PUSH
42032: LD_VAR 0 7
42036: ARRAY
42037: PUSH
42038: LD_INT 2
42040: ARRAY
42041: PPUSH
42042: CALL_OW 488
42046: NOT
42047: PUSH
42048: LD_VAR 0 12
42052: PUSH
42053: LD_VAR 0 7
42057: ARRAY
42058: PUSH
42059: LD_INT 1
42061: ARRAY
42062: PPUSH
42063: LD_VAR 0 12
42067: PUSH
42068: LD_VAR 0 7
42072: ARRAY
42073: PUSH
42074: LD_INT 2
42076: ARRAY
42077: PPUSH
42078: CALL_OW 428
42082: PUSH
42083: LD_INT 0
42085: GREATER
42086: OR
42087: PUSH
42088: LD_VAR 0 12
42092: PUSH
42093: LD_VAR 0 7
42097: ARRAY
42098: PUSH
42099: LD_INT 1
42101: ARRAY
42102: PPUSH
42103: LD_VAR 0 12
42107: PUSH
42108: LD_VAR 0 7
42112: ARRAY
42113: PUSH
42114: LD_INT 2
42116: ARRAY
42117: PPUSH
42118: CALL_OW 351
42122: OR
42123: IFFALSE 42129
// exit ;
42125: POP
42126: POP
42127: GO 42421
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42129: LD_ADDR_VAR 0 8
42133: PUSH
42134: LD_VAR 0 12
42138: PUSH
42139: LD_VAR 0 7
42143: ARRAY
42144: PUSH
42145: LD_INT 1
42147: ARRAY
42148: PPUSH
42149: LD_VAR 0 12
42153: PUSH
42154: LD_VAR 0 7
42158: ARRAY
42159: PUSH
42160: LD_INT 2
42162: ARRAY
42163: PPUSH
42164: CALL_OW 546
42168: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42169: LD_VAR 0 8
42173: PUSH
42174: LD_INT 1
42176: ARRAY
42177: PUSH
42178: LD_VAR 0 8
42182: PUSH
42183: LD_INT 2
42185: ARRAY
42186: PUSH
42187: LD_VAR 0 13
42191: PUSH
42192: LD_INT 2
42194: PLUS
42195: GREATER
42196: OR
42197: PUSH
42198: LD_VAR 0 8
42202: PUSH
42203: LD_INT 2
42205: ARRAY
42206: PUSH
42207: LD_VAR 0 13
42211: PUSH
42212: LD_INT 2
42214: MINUS
42215: LESS
42216: OR
42217: PUSH
42218: LD_VAR 0 8
42222: PUSH
42223: LD_INT 3
42225: ARRAY
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: LD_INT 8
42232: PUSH
42233: LD_INT 9
42235: PUSH
42236: LD_INT 10
42238: PUSH
42239: LD_INT 11
42241: PUSH
42242: LD_INT 12
42244: PUSH
42245: LD_INT 13
42247: PUSH
42248: LD_INT 16
42250: PUSH
42251: LD_INT 17
42253: PUSH
42254: LD_INT 18
42256: PUSH
42257: LD_INT 19
42259: PUSH
42260: LD_INT 20
42262: PUSH
42263: LD_INT 21
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: IN
42281: NOT
42282: OR
42283: PUSH
42284: LD_VAR 0 8
42288: PUSH
42289: LD_INT 5
42291: ARRAY
42292: NOT
42293: OR
42294: PUSH
42295: LD_VAR 0 8
42299: PUSH
42300: LD_INT 6
42302: ARRAY
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 7
42312: PUSH
42313: LD_INT 9
42315: PUSH
42316: LD_INT 10
42318: PUSH
42319: LD_INT 11
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: IN
42330: NOT
42331: OR
42332: IFFALSE 42338
// exit ;
42334: POP
42335: POP
42336: GO 42421
// end ;
42338: GO 42009
42340: POP
42341: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
42342: LD_VAR 0 9
42346: PPUSH
42347: LD_VAR 0 3
42351: PPUSH
42352: LD_VAR 0 4
42356: PPUSH
42357: LD_INT 20
42359: PPUSH
42360: CALL 34344 0 4
42364: PUSH
42365: LD_INT 4
42367: ARRAY
42368: IFFALSE 42372
// exit ;
42370: GO 42421
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
42372: LD_VAR 0 2
42376: PUSH
42377: LD_INT 29
42379: PUSH
42380: LD_INT 30
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: IN
42387: PUSH
42388: LD_VAR 0 3
42392: PPUSH
42393: LD_VAR 0 4
42397: PPUSH
42398: LD_VAR 0 9
42402: PPUSH
42403: CALL_OW 440
42407: NOT
42408: AND
42409: IFFALSE 42413
// exit ;
42411: GO 42421
// result := true ;
42413: LD_ADDR_VAR 0 6
42417: PUSH
42418: LD_INT 1
42420: ST_TO_ADDR
// end ;
42421: LD_VAR 0 6
42425: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
42426: LD_INT 0
42428: PPUSH
42429: PPUSH
42430: PPUSH
42431: PPUSH
42432: PPUSH
42433: PPUSH
42434: PPUSH
42435: PPUSH
42436: PPUSH
42437: PPUSH
42438: PPUSH
42439: PPUSH
42440: PPUSH
42441: PPUSH
42442: PPUSH
42443: PPUSH
42444: PPUSH
42445: PPUSH
42446: PPUSH
42447: PPUSH
42448: PPUSH
42449: PPUSH
42450: PPUSH
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
42464: PPUSH
42465: PPUSH
42466: PPUSH
42467: PPUSH
42468: PPUSH
42469: PPUSH
42470: PPUSH
42471: PPUSH
42472: PPUSH
42473: PPUSH
42474: PPUSH
42475: PPUSH
42476: PPUSH
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
// result = [ ] ;
42486: LD_ADDR_VAR 0 7
42490: PUSH
42491: EMPTY
42492: ST_TO_ADDR
// temp_list = [ ] ;
42493: LD_ADDR_VAR 0 9
42497: PUSH
42498: EMPTY
42499: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
42500: LD_VAR 0 4
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 3
42516: PUSH
42517: LD_INT 4
42519: PUSH
42520: LD_INT 5
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: IN
42531: NOT
42532: PUSH
42533: LD_VAR 0 1
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: IN
42548: PUSH
42549: LD_VAR 0 5
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 2
42559: PUSH
42560: LD_INT 3
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: LIST
42567: IN
42568: NOT
42569: AND
42570: OR
42571: IFFALSE 42575
// exit ;
42573: GO 60966
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
42575: LD_VAR 0 1
42579: PUSH
42580: LD_INT 6
42582: PUSH
42583: LD_INT 7
42585: PUSH
42586: LD_INT 8
42588: PUSH
42589: LD_INT 13
42591: PUSH
42592: LD_INT 12
42594: PUSH
42595: LD_INT 15
42597: PUSH
42598: LD_INT 11
42600: PUSH
42601: LD_INT 14
42603: PUSH
42604: LD_INT 10
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: IN
42618: IFFALSE 42628
// btype = b_lab ;
42620: LD_ADDR_VAR 0 1
42624: PUSH
42625: LD_INT 6
42627: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
42628: LD_VAR 0 6
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: LD_INT 2
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: IN
42647: NOT
42648: PUSH
42649: LD_VAR 0 1
42653: PUSH
42654: LD_INT 0
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: LD_INT 3
42665: PUSH
42666: LD_INT 6
42668: PUSH
42669: LD_INT 36
42671: PUSH
42672: LD_INT 4
42674: PUSH
42675: LD_INT 5
42677: PUSH
42678: LD_INT 31
42680: PUSH
42681: LD_INT 32
42683: PUSH
42684: LD_INT 33
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: IN
42700: NOT
42701: PUSH
42702: LD_VAR 0 6
42706: PUSH
42707: LD_INT 1
42709: EQUAL
42710: AND
42711: OR
42712: PUSH
42713: LD_VAR 0 1
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: IN
42728: NOT
42729: PUSH
42730: LD_VAR 0 6
42734: PUSH
42735: LD_INT 2
42737: EQUAL
42738: AND
42739: OR
42740: IFFALSE 42750
// mode = 0 ;
42742: LD_ADDR_VAR 0 6
42746: PUSH
42747: LD_INT 0
42749: ST_TO_ADDR
// case mode of 0 :
42750: LD_VAR 0 6
42754: PUSH
42755: LD_INT 0
42757: DOUBLE
42758: EQUAL
42759: IFTRUE 42763
42761: GO 54216
42763: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
42764: LD_ADDR_VAR 0 11
42768: PUSH
42769: LD_INT 0
42771: PUSH
42772: LD_INT 0
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 1
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 1
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 0
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 1
42833: NEG
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 1
42845: NEG
42846: PUSH
42847: LD_INT 2
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 0
42857: PUSH
42858: LD_INT 2
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: LD_INT 1
42871: NEG
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: PUSH
42877: LD_INT 1
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 1
42899: NEG
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 1
42910: PUSH
42911: LD_INT 3
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 0
42920: PUSH
42921: LD_INT 3
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42957: LD_ADDR_VAR 0 12
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: EMPTY
42969: LIST
42970: LIST
42971: PUSH
42972: LD_INT 0
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: EMPTY
42990: LIST
42991: LIST
42992: PUSH
42993: LD_INT 1
42995: PUSH
42996: LD_INT 1
42998: PUSH
42999: EMPTY
43000: LIST
43001: LIST
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 1
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: NEG
43070: PUSH
43071: LD_INT 1
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 2
43103: NEG
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 3
43114: NEG
43115: PUSH
43116: LD_INT 0
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 3
43125: NEG
43126: PUSH
43127: LD_INT 1
43129: NEG
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: EMPTY
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43153: LD_ADDR_VAR 0 13
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 0
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 0
43170: PUSH
43171: LD_INT 1
43173: NEG
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 1
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 1
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 0
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: NEG
43235: PUSH
43236: LD_INT 2
43238: NEG
43239: PUSH
43240: EMPTY
43241: LIST
43242: LIST
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: EMPTY
43251: LIST
43252: LIST
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: LD_INT 2
43259: PUSH
43260: EMPTY
43261: LIST
43262: LIST
43263: PUSH
43264: LD_INT 1
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: NEG
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 2
43288: NEG
43289: PUSH
43290: LD_INT 2
43292: NEG
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: LD_INT 3
43304: NEG
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 3
43312: NEG
43313: PUSH
43314: LD_INT 2
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 3
43324: NEG
43325: PUSH
43326: LD_INT 3
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43352: LD_ADDR_VAR 0 14
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 0
43445: PUSH
43446: LD_INT 2
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: PUSH
43457: LD_INT 1
43459: NEG
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: PUSH
43468: LD_INT 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 0
43477: PUSH
43478: LD_INT 2
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 3
43502: NEG
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: LD_INT 3
43513: NEG
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: PUSH
43522: LD_INT 2
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43548: LD_ADDR_VAR 0 15
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 1
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 0
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: NEG
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: EMPTY
43612: LIST
43613: LIST
43614: PUSH
43615: LD_INT 1
43617: NEG
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: PUSH
43630: LD_INT 1
43632: NEG
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 2
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 2
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 1
43660: NEG
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 0
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 2
43682: NEG
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 2
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 3
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43741: LD_ADDR_VAR 0 16
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 0
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 1
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 0
43789: PUSH
43790: LD_INT 1
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: LD_INT 0
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 1
43822: NEG
43823: PUSH
43824: LD_INT 2
43826: NEG
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 2
43844: PUSH
43845: LD_INT 2
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 1
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 2
43864: NEG
43865: PUSH
43866: LD_INT 1
43868: NEG
43869: PUSH
43870: EMPTY
43871: LIST
43872: LIST
43873: PUSH
43874: LD_INT 2
43876: NEG
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 3
43888: PUSH
43889: LD_INT 2
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 3
43898: PUSH
43899: LD_INT 3
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 2
43908: PUSH
43909: LD_INT 3
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43934: LD_ADDR_VAR 0 17
43938: PUSH
43939: LD_INT 0
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: EMPTY
43977: LIST
43978: LIST
43979: PUSH
43980: LD_INT 0
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: NEG
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 1
44003: NEG
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: LD_INT 2
44019: NEG
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 0
44027: PUSH
44028: LD_INT 2
44030: NEG
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 2
44049: PUSH
44050: LD_INT 0
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: LD_INT 2
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 2
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 2
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44164: LD_ADDR_VAR 0 18
44168: PUSH
44169: LD_INT 0
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 0
44181: PUSH
44182: LD_INT 1
44184: NEG
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: LD_INT 0
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_INT 1
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 0
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: NEG
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: EMPTY
44228: LIST
44229: LIST
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: LD_INT 1
44237: NEG
44238: PUSH
44239: EMPTY
44240: LIST
44241: LIST
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: LD_INT 2
44249: NEG
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: LD_INT 2
44260: NEG
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PUSH
44266: LD_INT 1
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: EMPTY
44274: LIST
44275: LIST
44276: PUSH
44277: LD_INT 2
44279: PUSH
44280: LD_INT 0
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: LD_INT 2
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: LD_INT 2
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: LD_INT 2
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: NEG
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: PUSH
44338: LD_INT 2
44340: NEG
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 2
44351: NEG
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: NEG
44364: PUSH
44365: LD_INT 2
44367: NEG
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44394: LD_ADDR_VAR 0 19
44398: PUSH
44399: LD_INT 0
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 0
44411: PUSH
44412: LD_INT 1
44414: NEG
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: LD_INT 1
44467: NEG
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 0
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 0
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: LD_INT 1
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 2
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 1
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: PUSH
44557: LD_INT 1
44559: NEG
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 2
44570: NEG
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: NEG
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: EMPTY
44588: LIST
44589: LIST
44590: PUSH
44591: LD_INT 2
44593: NEG
44594: PUSH
44595: LD_INT 2
44597: NEG
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44624: LD_ADDR_VAR 0 20
44628: PUSH
44629: LD_INT 0
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 0
44641: PUSH
44642: LD_INT 1
44644: NEG
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 1
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: NEG
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 2
44709: NEG
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: PUSH
44770: LD_INT 2
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 0
44779: PUSH
44780: LD_INT 2
44782: PUSH
44783: EMPTY
44784: LIST
44785: LIST
44786: PUSH
44787: LD_INT 1
44789: NEG
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 2
44800: NEG
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 2
44823: NEG
44824: PUSH
44825: LD_INT 2
44827: NEG
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44854: LD_ADDR_VAR 0 21
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 2
44939: NEG
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 2
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 2
44969: PUSH
44970: LD_INT 0
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 1
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 2
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 2
45030: NEG
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 2
45041: NEG
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: LD_INT 2
45057: NEG
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45084: LD_ADDR_VAR 0 22
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 1
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 2
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 2
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 1
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: LD_INT 2
45287: NEG
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: LIST
45299: LIST
45300: LIST
45301: LIST
45302: LIST
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
45314: LD_ADDR_VAR 0 23
45318: PUSH
45319: LD_INT 0
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 0
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: PUSH
45343: LD_INT 0
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 1
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 0
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: LD_INT 0
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: LD_INT 1
45387: NEG
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: LD_INT 2
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 2
45410: NEG
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 1
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: PUSH
45427: LD_INT 2
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: PUSH
45440: LD_INT 1
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 2
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 1
45459: PUSH
45460: LD_INT 2
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 2
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: LD_INT 1
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: LD_INT 0
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 2
45513: NEG
45514: PUSH
45515: LD_INT 2
45517: NEG
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: LD_INT 3
45529: NEG
45530: PUSH
45531: EMPTY
45532: LIST
45533: LIST
45534: PUSH
45535: LD_INT 1
45537: NEG
45538: PUSH
45539: LD_INT 3
45541: NEG
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: PUSH
45550: LD_INT 2
45552: NEG
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: PUSH
45561: LD_INT 1
45563: NEG
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
45594: LD_ADDR_VAR 0 24
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 0
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 0
45611: PUSH
45612: LD_INT 1
45614: NEG
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 1
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: NEG
45653: PUSH
45654: LD_INT 0
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: NEG
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: NEG
45676: PUSH
45677: LD_INT 2
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 0
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 2
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 2
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 0
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 2
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 3
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
45870: LD_ADDR_VAR 0 25
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 3
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 3
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 3
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 3
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: LIST
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46144: LD_ADDR_VAR 0 26
46148: PUSH
46149: LD_INT 0
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 0
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 0
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: NEG
46214: PUSH
46215: LD_INT 1
46217: NEG
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 2
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 0
46237: PUSH
46238: LD_INT 2
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 1
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: LD_INT 2
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: EMPTY
46304: LIST
46305: LIST
46306: PUSH
46307: LD_INT 1
46309: NEG
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 2
46320: NEG
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: LD_INT 3
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 2
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46420: LD_ADDR_VAR 0 27
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: LD_INT 0
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PUSH
46435: LD_INT 0
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 0
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 1
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: LD_INT 1
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: LD_INT 0
46482: PUSH
46483: EMPTY
46484: LIST
46485: LIST
46486: PUSH
46487: LD_INT 1
46489: NEG
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: EMPTY
46508: LIST
46509: LIST
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 1
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 2
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: PUSH
46543: LD_INT 2
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 2
46555: PUSH
46556: LD_INT 2
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: PUSH
46563: LD_INT 1
46565: PUSH
46566: LD_INT 2
46568: PUSH
46569: EMPTY
46570: LIST
46571: LIST
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: LD_INT 2
46578: PUSH
46579: EMPTY
46580: LIST
46581: LIST
46582: PUSH
46583: LD_INT 1
46585: NEG
46586: PUSH
46587: LD_INT 1
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: NEG
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 1
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: LD_INT 2
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 3
46665: NEG
46666: PUSH
46667: LD_INT 2
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
46700: LD_ADDR_VAR 0 28
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 0
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 1
46720: NEG
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 0
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 1
46773: NEG
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 2
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 2
46796: NEG
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: LD_INT 1
46807: NEG
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 2
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 2
46835: PUSH
46836: LD_INT 2
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: LD_INT 2
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: LD_INT 2
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: LD_INT 2
46876: NEG
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: PUSH
46885: LD_INT 2
46887: NEG
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: LD_INT 2
46903: NEG
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 2
46911: NEG
46912: PUSH
46913: LD_INT 3
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: NEG
46924: PUSH
46925: LD_INT 3
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 3
46935: NEG
46936: PUSH
46937: LD_INT 1
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46982: LD_ADDR_VAR 0 29
46986: PUSH
46987: LD_INT 0
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 1
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: LD_INT 0
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: LD_INT 0
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 1
47063: NEG
47064: PUSH
47065: LD_INT 2
47067: NEG
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: LD_INT 2
47078: NEG
47079: PUSH
47080: EMPTY
47081: LIST
47082: LIST
47083: PUSH
47084: LD_INT 1
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 2
47107: PUSH
47108: LD_INT 1
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: LD_INT 1
47117: PUSH
47118: LD_INT 2
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 0
47127: PUSH
47128: LD_INT 2
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: NEG
47138: PUSH
47139: LD_INT 1
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: NEG
47149: PUSH
47150: LD_INT 1
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 2
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: NEG
47173: PUSH
47174: LD_INT 3
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 3
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: LD_INT 2
47230: NEG
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47261: LD_ADDR_VAR 0 30
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 1
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 3
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: EMPTY
47468: LIST
47469: LIST
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: LD_INT 2
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 2
47483: PUSH
47484: LD_INT 3
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 3
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47539: LD_ADDR_VAR 0 31
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: LD_INT 1
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 1
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 1
47597: NEG
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: EMPTY
47615: LIST
47616: LIST
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: LD_INT 1
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 0
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: NEG
47694: PUSH
47695: LD_INT 1
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 2
47704: NEG
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 2
47716: NEG
47717: PUSH
47718: LD_INT 2
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 3
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: PUSH
47741: LD_INT 1
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 1
47761: PUSH
47762: LD_INT 3
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 3
47782: NEG
47783: PUSH
47784: LD_INT 2
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47817: LD_ADDR_VAR 0 32
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: LD_INT 0
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 0
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: LD_INT 1
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 0
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: NEG
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: NEG
47899: PUSH
47900: LD_INT 2
47902: NEG
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 2
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 1
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: LD_INT 2
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: NEG
47973: PUSH
47974: LD_INT 1
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 2
47983: NEG
47984: PUSH
47985: LD_INT 0
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 2
47994: NEG
47995: PUSH
47996: LD_INT 1
47998: NEG
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 3
48029: PUSH
48030: LD_INT 2
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 3
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: NEG
48050: PUSH
48051: LD_INT 1
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: LIST
48075: LIST
48076: LIST
48077: LIST
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48095: LD_ADDR_VAR 0 33
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 1
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 1
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 2
48180: NEG
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 2
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: LD_INT 2
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: LD_INT 2
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 2
48261: NEG
48262: PUSH
48263: LD_INT 1
48265: NEG
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: LD_INT 2
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: NEG
48286: PUSH
48287: LD_INT 3
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 2
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 1
48318: PUSH
48319: LD_INT 3
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 2
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 3
48339: NEG
48340: PUSH
48341: LD_INT 2
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: LIST
48353: LIST
48354: LIST
48355: LIST
48356: LIST
48357: LIST
48358: LIST
48359: LIST
48360: LIST
48361: LIST
48362: LIST
48363: LIST
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48374: LD_ADDR_VAR 0 34
48378: PUSH
48379: LD_INT 0
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: EMPTY
48397: LIST
48398: LIST
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 1
48432: NEG
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: LD_INT 1
48447: NEG
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 0
48467: PUSH
48468: LD_INT 2
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 1
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 2
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 1
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 2
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: NEG
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: NEG
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 3
48569: NEG
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: LD_INT 2
48580: NEG
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 3
48588: PUSH
48589: LD_INT 2
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: NEG
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 3
48619: NEG
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: EMPTY
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48654: LD_ADDR_VAR 0 35
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 0
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 1
48712: NEG
48713: PUSH
48714: LD_INT 0
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48766: LD_ADDR_VAR 0 36
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 0
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: LD_INT 1
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: LD_INT 0
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: NEG
48836: PUSH
48837: LD_INT 1
48839: NEG
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 1
48847: NEG
48848: PUSH
48849: LD_INT 2
48851: NEG
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: LD_INT 2
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48878: LD_ADDR_VAR 0 37
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 1
48970: NEG
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
48990: LD_ADDR_VAR 0 38
48994: PUSH
48995: LD_INT 0
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 0
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 1
49028: PUSH
49029: LD_INT 1
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 0
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: LD_INT 1
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: LD_INT 1
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 2
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49102: LD_ADDR_VAR 0 39
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 0
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: PUSH
49158: LD_INT 1
49160: NEG
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: NEG
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49214: LD_ADDR_VAR 0 40
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 0
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 1
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49326: LD_ADDR_VAR 0 41
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 2
49440: PUSH
49441: LD_INT 1
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 2
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: LD_INT 2
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 2
49481: NEG
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: NEG
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 2
49504: NEG
49505: PUSH
49506: LD_INT 2
49508: NEG
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 3
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 1
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 3
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 3
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 3
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 2
49579: PUSH
49580: LD_INT 3
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 3
49600: NEG
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 3
49635: NEG
49636: PUSH
49637: LD_INT 3
49639: NEG
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49676: LD_ADDR_VAR 0 42
49680: PUSH
49681: LD_INT 0
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: PUSH
49705: LD_INT 0
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: NEG
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: LD_INT 2
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: LD_INT 1
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: PUSH
49802: LD_INT 2
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 2
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: NEG
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: NEG
49867: PUSH
49868: LD_INT 3
49870: NEG
49871: PUSH
49872: EMPTY
49873: LIST
49874: LIST
49875: PUSH
49876: LD_INT 1
49878: NEG
49879: PUSH
49880: LD_INT 3
49882: NEG
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: LD_INT 2
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: PUSH
49913: LD_INT 2
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: PUSH
49923: LD_INT 3
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: PUSH
49933: LD_INT 3
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: LD_INT 3
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: LD_INT 3
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: NEG
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 3
49973: NEG
49974: PUSH
49975: LD_INT 2
49977: NEG
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 3
49985: NEG
49986: PUSH
49987: LD_INT 3
49989: NEG
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: LIST
50003: LIST
50004: LIST
50005: LIST
50006: LIST
50007: LIST
50008: LIST
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: LIST
50025: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50026: LD_ADDR_VAR 0 43
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 0
50043: PUSH
50044: LD_INT 1
50046: NEG
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 1
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 0
50074: PUSH
50075: LD_INT 1
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 0
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: LD_INT 1
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: NEG
50108: PUSH
50109: LD_INT 2
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 0
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 1
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 2
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 2
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 2
50192: NEG
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 3
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 1
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 3
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 2
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50374: LD_ADDR_VAR 0 44
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 2
50529: NEG
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 2
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 2
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: LD_INT 3
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 3
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 3
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 2
50627: PUSH
50628: LD_INT 3
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: NEG
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 3
50659: NEG
50660: PUSH
50661: LD_INT 1
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 3
50671: NEG
50672: PUSH
50673: LD_INT 2
50675: NEG
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: LD_INT 3
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50724: LD_ADDR_VAR 0 45
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 2
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 2
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 2
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 2
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 3
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: LD_INT 2
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 3
50960: PUSH
50961: LD_INT 2
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 3
50970: PUSH
50971: LD_INT 3
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 2
50980: PUSH
50981: LD_INT 3
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 1
50990: PUSH
50991: LD_INT 3
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: LD_INT 3
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: NEG
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 2
51025: NEG
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 3
51033: NEG
51034: PUSH
51035: LD_INT 3
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51074: LD_ADDR_VAR 0 46
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: LD_INT 0
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 0
51091: PUSH
51092: LD_INT 1
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 0
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 0
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: EMPTY
51127: LIST
51128: LIST
51129: PUSH
51130: LD_INT 1
51132: NEG
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 1
51143: NEG
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 0
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 2
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 1
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: LD_INT 2
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 2
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: NEG
51230: PUSH
51231: LD_INT 1
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: PUSH
51238: LD_INT 2
51240: NEG
51241: PUSH
51242: LD_INT 0
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: PUSH
51298: LD_INT 1
51300: NEG
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 3
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: PUSH
51329: LD_INT 3
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 0
51338: PUSH
51339: LD_INT 3
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: PUSH
51346: LD_INT 1
51348: NEG
51349: PUSH
51350: LD_INT 2
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 2
51359: NEG
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 0
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: NEG
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51422: LD_ADDR_VAR 0 47
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: LD_INT 0
51432: PUSH
51433: EMPTY
51434: LIST
51435: LIST
51436: PUSH
51437: LD_INT 0
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: PUSH
51451: LD_INT 0
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: LD_INT 1
51460: PUSH
51461: LD_INT 1
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 1
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: NEG
51492: PUSH
51493: LD_INT 1
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: NEG
51504: PUSH
51505: LD_INT 2
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: LD_INT 2
51518: NEG
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: LD_INT 1
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: LD_INT 1
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: NEG
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51573: LD_ADDR_VAR 0 48
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 0
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 0
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 1
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 1
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 2
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51720: LD_ADDR_VAR 0 49
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: LD_INT 1
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 1
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: EMPTY
51753: LIST
51754: LIST
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 1
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: PUSH
51823: LD_INT 1
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 2
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 2
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51864: LD_ADDR_VAR 0 50
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 0
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 1
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 1
51922: NEG
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: NEG
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: LD_INT 2
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 2
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52008: LD_ADDR_VAR 0 51
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 0
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 0
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 0
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: LD_INT 1
52135: NEG
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52155: LD_ADDR_VAR 0 52
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: LD_INT 0
52165: PUSH
52166: EMPTY
52167: LIST
52168: LIST
52169: PUSH
52170: LD_INT 0
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 0
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 1
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 1
52236: NEG
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: LD_INT 0
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: LD_INT 2
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52306: LD_ADDR_VAR 0 53
52310: PUSH
52311: LD_INT 0
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 0
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 1
52334: PUSH
52335: LD_INT 0
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: PUSH
52345: LD_INT 1
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 1
52364: NEG
52365: PUSH
52366: LD_INT 0
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 1
52375: NEG
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 2
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 0
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: PUSH
52411: LD_INT 1
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 2
52421: PUSH
52422: LD_INT 0
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: LD_INT 2
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: LD_INT 2
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: LD_INT 2
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: PUSH
52476: EMPTY
52477: LIST
52478: LIST
52479: PUSH
52480: LD_INT 2
52482: NEG
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 2
52493: NEG
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 2
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52536: LD_ADDR_VAR 0 54
52540: PUSH
52541: LD_INT 0
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 0
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 1
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 1
52594: NEG
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: LD_INT 2
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: LD_INT 2
52632: NEG
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 1
52640: PUSH
52641: LD_INT 1
52643: NEG
52644: PUSH
52645: EMPTY
52646: LIST
52647: LIST
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: LD_INT 2
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 0
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 1
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 0
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52766: LD_ADDR_VAR 0 55
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 0
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 1
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 0
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 1
52824: NEG
52825: PUSH
52826: LD_INT 0
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 1
52839: NEG
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 2
52851: NEG
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 2
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 2
52891: PUSH
52892: LD_INT 1
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 2
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 1
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 0
52921: PUSH
52922: LD_INT 2
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: LD_INT 1
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: LD_INT 1
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 2
52965: NEG
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52996: LD_ADDR_VAR 0 56
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 1
53024: PUSH
53025: LD_INT 0
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 1
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 0
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: NEG
53055: PUSH
53056: LD_INT 0
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 1
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: NEG
53070: PUSH
53071: EMPTY
53072: LIST
53073: LIST
53074: PUSH
53075: LD_INT 1
53077: NEG
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 0
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 1
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: PUSH
53112: LD_INT 0
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 2
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 1
53141: PUSH
53142: LD_INT 2
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 0
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 2
53172: NEG
53173: PUSH
53174: LD_INT 0
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: PUSH
53181: LD_INT 2
53183: NEG
53184: PUSH
53185: LD_INT 1
53187: NEG
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: NEG
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53226: LD_ADDR_VAR 0 57
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 0
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 0
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: PUSH
53255: LD_INT 0
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: PUSH
53265: LD_INT 1
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 1
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: LD_INT 1
53299: NEG
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: NEG
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 0
53319: PUSH
53320: LD_INT 2
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 1
53333: NEG
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 2
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 2
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 2
53402: NEG
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 2
53425: NEG
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53456: LD_ADDR_VAR 0 58
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: LD_INT 0
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: NEG
53538: PUSH
53539: LD_INT 2
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 2
53552: NEG
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 1
53560: PUSH
53561: LD_INT 1
53563: NEG
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 2
53591: PUSH
53592: LD_INT 2
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 2
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 1
53621: NEG
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 2
53632: NEG
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 2
53643: NEG
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 2
53655: NEG
53656: PUSH
53657: LD_INT 2
53659: NEG
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53686: LD_ADDR_VAR 0 59
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 0
53703: PUSH
53704: LD_INT 1
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: LD_INT 0
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: PUSH
53725: LD_INT 1
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 1
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 1
53744: NEG
53745: PUSH
53746: LD_INT 0
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: NEG
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53774: LD_ADDR_VAR 0 60
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53862: LD_ADDR_VAR 0 61
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: LD_INT 0
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: LD_INT 1
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53950: LD_ADDR_VAR 0 62
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 0
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 1
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 1
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 1
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: LD_INT 1
54008: NEG
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 1
54019: NEG
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54038: LD_ADDR_VAR 0 63
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: EMPTY
54102: LIST
54103: LIST
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54126: LD_ADDR_VAR 0 64
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 0
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 1
54184: NEG
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 1
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: ST_TO_ADDR
// end ; 1 :
54214: GO 60111
54216: LD_INT 1
54218: DOUBLE
54219: EQUAL
54220: IFTRUE 54224
54222: GO 56847
54224: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54225: LD_ADDR_VAR 0 11
54229: PUSH
54230: LD_INT 1
54232: NEG
54233: PUSH
54234: LD_INT 3
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 3
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: LIST
54268: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54269: LD_ADDR_VAR 0 12
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 3
54287: PUSH
54288: LD_INT 0
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54310: LD_ADDR_VAR 0 13
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 3
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: LIST
54349: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54350: LD_ADDR_VAR 0 14
54354: PUSH
54355: LD_INT 1
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: LD_INT 3
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 2
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: LIST
54390: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54391: LD_ADDR_VAR 0 15
54395: PUSH
54396: LD_INT 2
54398: NEG
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 3
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54435: LD_ADDR_VAR 0 16
54439: PUSH
54440: LD_INT 2
54442: NEG
54443: PUSH
54444: LD_INT 3
54446: NEG
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 2
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: NEG
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: LIST
54480: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54481: LD_ADDR_VAR 0 17
54485: PUSH
54486: LD_INT 1
54488: NEG
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: LIST
54524: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54525: LD_ADDR_VAR 0 18
54529: PUSH
54530: LD_INT 2
54532: PUSH
54533: LD_INT 1
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 3
54543: PUSH
54544: LD_INT 0
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: PUSH
54554: LD_INT 1
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54566: LD_ADDR_VAR 0 19
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 2
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54606: LD_ADDR_VAR 0 20
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 3
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 3
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 2
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54647: LD_ADDR_VAR 0 21
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 3
54665: NEG
54666: PUSH
54667: LD_INT 0
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 3
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54691: LD_ADDR_VAR 0 22
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 3
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 3
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 3
54722: NEG
54723: PUSH
54724: LD_INT 3
54726: NEG
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
54737: LD_ADDR_VAR 0 23
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: PUSH
54768: LD_INT 3
54770: NEG
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
54781: LD_ADDR_VAR 0 24
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 4
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
54822: LD_ADDR_VAR 0 25
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 4
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 3
54849: PUSH
54850: LD_INT 4
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
54862: LD_ADDR_VAR 0 26
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: LD_INT 3
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 1
54879: PUSH
54880: LD_INT 4
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 3
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
54903: LD_ADDR_VAR 0 27
54907: PUSH
54908: LD_INT 3
54910: NEG
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 3
54921: NEG
54922: PUSH
54923: LD_INT 1
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 4
54932: NEG
54933: PUSH
54934: LD_INT 1
54936: NEG
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
54947: LD_ADDR_VAR 0 28
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 3
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 3
54966: NEG
54967: PUSH
54968: LD_INT 4
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: NEG
54979: PUSH
54980: LD_INT 3
54982: NEG
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: LIST
54992: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
54993: LD_ADDR_VAR 0 29
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 3
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: LD_INT 3
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 1
55034: NEG
55035: PUSH
55036: LD_INT 4
55038: NEG
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 4
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 5
55072: NEG
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 0
55080: PUSH
55081: LD_INT 5
55083: NEG
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: LD_INT 4
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 6
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 6
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 5
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55148: LD_ADDR_VAR 0 30
55152: PUSH
55153: LD_INT 2
55155: PUSH
55156: LD_INT 1
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 0
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 3
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 3
55186: PUSH
55187: LD_INT 1
55189: NEG
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 4
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 4
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 4
55217: PUSH
55218: LD_INT 1
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 5
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 5
55238: PUSH
55239: LD_INT 1
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: LD_INT 5
55248: PUSH
55249: LD_INT 1
55251: NEG
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 6
55259: PUSH
55260: LD_INT 0
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 6
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: LIST
55289: LIST
55290: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55291: LD_ADDR_VAR 0 31
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: LD_INT 2
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: LD_INT 3
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 2
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 4
55338: PUSH
55339: LD_INT 4
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 4
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 5
55358: PUSH
55359: LD_INT 4
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 5
55368: PUSH
55369: LD_INT 5
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 4
55378: PUSH
55379: LD_INT 5
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 6
55388: PUSH
55389: LD_INT 5
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 6
55398: PUSH
55399: LD_INT 6
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 5
55408: PUSH
55409: LD_INT 6
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
55430: LD_ADDR_VAR 0 32
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 3
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 2
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: PUSH
55469: LD_INT 4
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: LD_INT 4
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: NEG
55489: PUSH
55490: LD_INT 3
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 5
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 5
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 4
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 6
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 0
55540: PUSH
55541: LD_INT 6
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: LD_INT 5
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
55573: LD_ADDR_VAR 0 33
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 3
55591: NEG
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 3
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 3
55614: NEG
55615: PUSH
55616: LD_INT 1
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 4
55625: NEG
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 4
55636: NEG
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 4
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 5
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 5
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 5
55682: NEG
55683: PUSH
55684: LD_INT 1
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 6
55693: NEG
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 6
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
55728: LD_ADDR_VAR 0 34
55732: PUSH
55733: LD_INT 2
55735: NEG
55736: PUSH
55737: LD_INT 3
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 3
55747: NEG
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: LD_INT 3
55763: NEG
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: LD_INT 4
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 4
55783: NEG
55784: PUSH
55785: LD_INT 3
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 4
55795: NEG
55796: PUSH
55797: LD_INT 4
55799: NEG
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 4
55807: NEG
55808: PUSH
55809: LD_INT 5
55811: NEG
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 5
55819: NEG
55820: PUSH
55821: LD_INT 4
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 5
55831: NEG
55832: PUSH
55833: LD_INT 5
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 5
55843: NEG
55844: PUSH
55845: LD_INT 6
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 6
55855: NEG
55856: PUSH
55857: LD_INT 5
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 6
55867: NEG
55868: PUSH
55869: LD_INT 6
55871: NEG
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
55891: LD_ADDR_VAR 0 41
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PUSH
55911: LD_INT 3
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: LIST
55934: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
55935: LD_ADDR_VAR 0 42
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 0
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 2
55952: PUSH
55953: LD_INT 1
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 3
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: LIST
55975: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
55976: LD_ADDR_VAR 0 43
55980: PUSH
55981: LD_INT 2
55983: PUSH
55984: LD_INT 2
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 2
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: LD_INT 3
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56016: LD_ADDR_VAR 0 44
56020: PUSH
56021: LD_INT 0
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 1
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: LIST
56056: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56057: LD_ADDR_VAR 0 45
56061: PUSH
56062: LD_INT 2
56064: NEG
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 2
56075: NEG
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 3
56086: NEG
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56101: LD_ADDR_VAR 0 46
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: LD_INT 2
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 2
56120: NEG
56121: PUSH
56122: LD_INT 3
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 3
56132: NEG
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: LIST
56146: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56147: LD_ADDR_VAR 0 47
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 3
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56180: LD_ADDR_VAR 0 48
56184: PUSH
56185: LD_INT 1
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56211: LD_ADDR_VAR 0 49
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: LD_INT 1
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: LD_INT 2
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56240: LD_ADDR_VAR 0 50
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 3
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56269: LD_ADDR_VAR 0 51
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56300: LD_ADDR_VAR 0 52
56304: PUSH
56305: LD_INT 3
56307: NEG
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 3
56319: NEG
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56333: LD_ADDR_VAR 0 53
56337: PUSH
56338: LD_INT 1
56340: NEG
56341: PUSH
56342: LD_INT 3
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 3
56355: NEG
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: PUSH
56364: LD_INT 2
56366: NEG
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56377: LD_ADDR_VAR 0 54
56381: PUSH
56382: LD_INT 2
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56418: LD_ADDR_VAR 0 55
56422: PUSH
56423: LD_INT 3
56425: PUSH
56426: LD_INT 2
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: LD_INT 3
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: PUSH
56446: LD_INT 3
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56458: LD_ADDR_VAR 0 56
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: LD_INT 3
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: LD_INT 3
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: LIST
56498: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56499: LD_ADDR_VAR 0 57
56503: PUSH
56504: LD_INT 2
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 3
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56543: LD_ADDR_VAR 0 58
56547: PUSH
56548: LD_INT 2
56550: NEG
56551: PUSH
56552: LD_INT 3
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 3
56562: NEG
56563: PUSH
56564: LD_INT 2
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: NEG
56575: PUSH
56576: LD_INT 3
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
56589: LD_ADDR_VAR 0 59
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 0
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56633: LD_ADDR_VAR 0 60
56637: PUSH
56638: LD_INT 1
56640: PUSH
56641: LD_INT 1
56643: NEG
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56674: LD_ADDR_VAR 0 61
56678: PUSH
56679: LD_INT 2
56681: PUSH
56682: LD_INT 1
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 2
56691: PUSH
56692: LD_INT 2
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: PUSH
56699: LD_INT 1
56701: PUSH
56702: LD_INT 2
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: LIST
56713: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56714: LD_ADDR_VAR 0 62
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 2
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 2
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56755: LD_ADDR_VAR 0 63
56759: PUSH
56760: LD_INT 1
56762: NEG
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 2
56773: NEG
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: NEG
56785: PUSH
56786: LD_INT 1
56788: NEG
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: LIST
56798: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56799: LD_ADDR_VAR 0 64
56803: PUSH
56804: LD_INT 1
56806: NEG
56807: PUSH
56808: LD_INT 2
56810: NEG
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 2
56818: NEG
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 2
56830: NEG
56831: PUSH
56832: LD_INT 2
56834: NEG
56835: PUSH
56836: EMPTY
56837: LIST
56838: LIST
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// end ; 2 :
56845: GO 60111
56847: LD_INT 2
56849: DOUBLE
56850: EQUAL
56851: IFTRUE 56855
56853: GO 60110
56855: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
56856: LD_ADDR_VAR 0 29
56860: PUSH
56861: LD_INT 4
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 4
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 5
56884: PUSH
56885: LD_INT 0
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 5
56894: PUSH
56895: LD_INT 1
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 4
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 3
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 3
56924: PUSH
56925: LD_INT 1
56927: NEG
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: PUSH
56933: LD_INT 3
56935: PUSH
56936: LD_INT 2
56938: NEG
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 5
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: PUSH
56967: LD_INT 2
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 4
56976: PUSH
56977: LD_INT 3
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: LD_INT 4
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: PUSH
56997: LD_INT 4
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 3
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 2
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 4
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 4
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 4
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 0
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 1
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 5
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: LD_INT 5
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: LD_INT 4
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 1
57107: NEG
57108: PUSH
57109: LD_INT 3
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: PUSH
57119: LD_INT 5
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 2
57128: NEG
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 3
57139: NEG
57140: PUSH
57141: LD_INT 0
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 3
57150: NEG
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 3
57184: NEG
57185: PUSH
57186: LD_INT 1
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 4
57195: NEG
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 4
57206: NEG
57207: PUSH
57208: LD_INT 1
57210: NEG
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 4
57218: NEG
57219: PUSH
57220: LD_INT 2
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: LD_INT 2
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 4
57241: NEG
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 4
57253: NEG
57254: PUSH
57255: LD_INT 5
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 4
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 4
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 5
57301: NEG
57302: PUSH
57303: LD_INT 4
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 5
57313: NEG
57314: PUSH
57315: LD_INT 5
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 3
57325: NEG
57326: PUSH
57327: LD_INT 5
57329: NEG
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 5
57337: NEG
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
57394: LD_ADDR_VAR 0 30
57398: PUSH
57399: LD_INT 4
57401: PUSH
57402: LD_INT 4
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 4
57411: PUSH
57412: LD_INT 3
57414: PUSH
57415: EMPTY
57416: LIST
57417: LIST
57418: PUSH
57419: LD_INT 5
57421: PUSH
57422: LD_INT 4
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 5
57431: PUSH
57432: LD_INT 5
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 4
57441: PUSH
57442: LD_INT 5
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: LD_INT 3
57451: PUSH
57452: LD_INT 4
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 5
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: PUSH
57479: LD_INT 3
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 0
57491: PUSH
57492: LD_INT 3
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 0
57501: PUSH
57502: LD_INT 2
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 3
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 4
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 0
57531: PUSH
57532: LD_INT 4
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 1
57541: NEG
57542: PUSH
57543: LD_INT 3
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 1
57552: NEG
57553: PUSH
57554: LD_INT 2
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: LD_INT 4
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: LD_INT 2
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 4
57584: NEG
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 4
57595: NEG
57596: PUSH
57597: LD_INT 1
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 3
57607: NEG
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 3
57618: NEG
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 4
57629: NEG
57630: PUSH
57631: LD_INT 1
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 5
57640: NEG
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 5
57651: NEG
57652: PUSH
57653: LD_INT 1
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 5
57663: NEG
57664: PUSH
57665: LD_INT 2
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 3
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 3
57686: NEG
57687: PUSH
57688: LD_INT 3
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 3
57698: NEG
57699: PUSH
57700: LD_INT 4
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: LD_INT 3
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 2
57722: NEG
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 3
57734: NEG
57735: PUSH
57736: LD_INT 2
57738: NEG
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 4
57746: NEG
57747: PUSH
57748: LD_INT 3
57750: NEG
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: LD_INT 4
57758: NEG
57759: PUSH
57760: LD_INT 4
57762: NEG
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 4
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: LD_INT 4
57782: NEG
57783: PUSH
57784: LD_INT 2
57786: NEG
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 4
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: LD_INT 5
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 4
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 3
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 0
57838: PUSH
57839: LD_INT 3
57841: NEG
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: LD_INT 4
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: LD_INT 5
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: PUSH
57874: LD_INT 3
57876: NEG
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 5
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
57941: LD_ADDR_VAR 0 31
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: LD_INT 4
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: LD_INT 3
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 4
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 5
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 5
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 4
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 3
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 2
58020: PUSH
58021: LD_INT 5
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: LD_INT 3
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 3
58041: NEG
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 3
58052: NEG
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 2
58064: NEG
58065: PUSH
58066: LD_INT 0
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 4
58097: NEG
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 4
58108: NEG
58109: PUSH
58110: LD_INT 1
58112: NEG
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 4
58120: NEG
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: NEG
58133: PUSH
58134: LD_INT 2
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: NEG
58144: PUSH
58145: LD_INT 4
58147: NEG
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 4
58155: NEG
58156: PUSH
58157: LD_INT 5
58159: NEG
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 3
58167: NEG
58168: PUSH
58169: LD_INT 4
58171: NEG
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 3
58179: NEG
58180: PUSH
58181: LD_INT 3
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 4
58191: NEG
58192: PUSH
58193: LD_INT 3
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 5
58203: NEG
58204: PUSH
58205: LD_INT 4
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 5
58215: NEG
58216: PUSH
58217: LD_INT 5
58219: NEG
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 3
58227: NEG
58228: PUSH
58229: LD_INT 5
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 5
58239: NEG
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 0
58251: PUSH
58252: LD_INT 3
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 0
58262: PUSH
58263: LD_INT 4
58265: NEG
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_INT 1
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: EMPTY
58279: LIST
58280: LIST
58281: PUSH
58282: LD_INT 1
58284: PUSH
58285: LD_INT 2
58287: NEG
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 3
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 4
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 2
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 4
58345: NEG
58346: PUSH
58347: EMPTY
58348: LIST
58349: LIST
58350: PUSH
58351: LD_INT 4
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: PUSH
58361: LD_INT 4
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 5
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 5
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 4
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 3
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 2
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 5
58436: PUSH
58437: LD_INT 2
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: LIST
58465: LIST
58466: LIST
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
58491: LD_ADDR_VAR 0 32
58495: PUSH
58496: LD_INT 4
58498: NEG
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 4
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: LD_INT 3
58521: NEG
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: NEG
58544: PUSH
58545: LD_INT 1
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: PUSH
58552: LD_INT 5
58554: NEG
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 5
58565: NEG
58566: PUSH
58567: LD_INT 1
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 5
58577: NEG
58578: PUSH
58579: LD_INT 2
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: NEG
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: LD_INT 3
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 3
58612: NEG
58613: PUSH
58614: LD_INT 4
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 2
58624: NEG
58625: PUSH
58626: LD_INT 3
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 2
58636: NEG
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 3
58648: NEG
58649: PUSH
58650: LD_INT 2
58652: NEG
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 4
58660: NEG
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 4
58672: NEG
58673: PUSH
58674: LD_INT 4
58676: NEG
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: PUSH
58682: LD_INT 2
58684: NEG
58685: PUSH
58686: LD_INT 4
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 4
58696: NEG
58697: PUSH
58698: LD_INT 2
58700: NEG
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 4
58711: NEG
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: LD_INT 5
58722: NEG
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 4
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 1
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 3
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: LD_INT 4
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: LD_INT 5
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 2
58787: PUSH
58788: LD_INT 3
58790: NEG
58791: PUSH
58792: EMPTY
58793: LIST
58794: LIST
58795: PUSH
58796: LD_INT 2
58798: NEG
58799: PUSH
58800: LD_INT 5
58802: NEG
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 3
58810: PUSH
58811: LD_INT 0
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: PUSH
58821: LD_INT 1
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 4
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: LD_INT 4
58841: PUSH
58842: LD_INT 1
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 3
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 2
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 2
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 2
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 4
58893: PUSH
58894: LD_INT 2
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 4
58903: PUSH
58904: LD_INT 4
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 4
58913: PUSH
58914: LD_INT 3
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 5
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 5
58933: PUSH
58934: LD_INT 5
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 4
58943: PUSH
58944: LD_INT 5
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 4
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: LD_INT 3
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 5
58973: PUSH
58974: LD_INT 3
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 5
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59038: LD_ADDR_VAR 0 33
59042: PUSH
59043: LD_INT 4
59045: NEG
59046: PUSH
59047: LD_INT 4
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 4
59057: NEG
59058: PUSH
59059: LD_INT 5
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 3
59069: NEG
59070: PUSH
59071: LD_INT 4
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: NEG
59082: PUSH
59083: LD_INT 3
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 4
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 5
59105: NEG
59106: PUSH
59107: LD_INT 4
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 5
59117: NEG
59118: PUSH
59119: LD_INT 5
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: LD_INT 3
59129: NEG
59130: PUSH
59131: LD_INT 5
59133: NEG
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 5
59141: NEG
59142: PUSH
59143: LD_INT 3
59145: NEG
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: PUSH
59151: LD_INT 0
59153: PUSH
59154: LD_INT 3
59156: NEG
59157: PUSH
59158: EMPTY
59159: LIST
59160: LIST
59161: PUSH
59162: LD_INT 0
59164: PUSH
59165: LD_INT 4
59167: NEG
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: PUSH
59173: LD_INT 1
59175: PUSH
59176: LD_INT 3
59178: NEG
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: NEG
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 2
59232: PUSH
59233: LD_INT 2
59235: NEG
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: LD_INT 2
59243: NEG
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 4
59255: PUSH
59256: LD_INT 0
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 4
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 5
59276: PUSH
59277: LD_INT 0
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 5
59286: PUSH
59287: LD_INT 1
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 4
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 3
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 3
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 2
59330: NEG
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 5
59338: PUSH
59339: LD_INT 2
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 3
59358: PUSH
59359: LD_INT 2
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: LD_INT 3
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 4
59378: PUSH
59379: LD_INT 4
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: PUSH
59389: LD_INT 4
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 2
59398: PUSH
59399: LD_INT 3
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 2
59408: PUSH
59409: LD_INT 2
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 4
59418: PUSH
59419: LD_INT 2
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 4
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 4
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 0
59448: PUSH
59449: LD_INT 3
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 5
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: LD_INT 5
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: LD_INT 1
59488: NEG
59489: PUSH
59490: LD_INT 4
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: LD_INT 3
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: LD_INT 5
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 2
59520: NEG
59521: PUSH
59522: LD_INT 3
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
59576: LD_ADDR_VAR 0 34
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 4
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: LD_INT 5
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: LD_INT 4
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: LD_INT 1
59616: PUSH
59617: LD_INT 3
59619: NEG
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: PUSH
59625: LD_INT 0
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: NEG
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 5
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 3
59665: NEG
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: LD_INT 5
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: LD_INT 0
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 3
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 4
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 4
59716: PUSH
59717: LD_INT 1
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 3
59726: PUSH
59727: LD_INT 1
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 2
59746: PUSH
59747: LD_INT 1
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 4
59768: PUSH
59769: LD_INT 2
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 4
59778: PUSH
59779: LD_INT 4
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 4
59788: PUSH
59789: LD_INT 3
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 5
59798: PUSH
59799: LD_INT 4
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 5
59808: PUSH
59809: LD_INT 5
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 4
59818: PUSH
59819: LD_INT 5
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: LD_INT 4
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 3
59838: PUSH
59839: LD_INT 3
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 5
59848: PUSH
59849: LD_INT 3
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: LD_INT 5
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 0
59868: PUSH
59869: LD_INT 3
59871: PUSH
59872: EMPTY
59873: LIST
59874: LIST
59875: PUSH
59876: LD_INT 0
59878: PUSH
59879: LD_INT 2
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: PUSH
59886: LD_INT 1
59888: PUSH
59889: LD_INT 3
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: LD_INT 4
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 4
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 2
59940: PUSH
59941: LD_INT 4
59943: PUSH
59944: EMPTY
59945: LIST
59946: LIST
59947: PUSH
59948: LD_INT 2
59950: NEG
59951: PUSH
59952: LD_INT 2
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: LD_INT 4
59961: NEG
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: EMPTY
59967: LIST
59968: LIST
59969: PUSH
59970: LD_INT 4
59972: NEG
59973: PUSH
59974: LD_INT 1
59976: NEG
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 3
59984: NEG
59985: PUSH
59986: LD_INT 0
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 3
59995: NEG
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 4
60006: NEG
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 5
60017: NEG
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: EMPTY
60023: LIST
60024: LIST
60025: PUSH
60026: LD_INT 5
60028: NEG
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 5
60040: NEG
60041: PUSH
60042: LD_INT 2
60044: NEG
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PUSH
60050: LD_INT 3
60052: NEG
60053: PUSH
60054: LD_INT 2
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// end ; end ;
60108: GO 60111
60110: POP
// case btype of b_depot , b_warehouse :
60111: LD_VAR 0 1
60115: PUSH
60116: LD_INT 0
60118: DOUBLE
60119: EQUAL
60120: IFTRUE 60130
60122: LD_INT 1
60124: DOUBLE
60125: EQUAL
60126: IFTRUE 60130
60128: GO 60331
60130: POP
// case nation of nation_american :
60131: LD_VAR 0 5
60135: PUSH
60136: LD_INT 1
60138: DOUBLE
60139: EQUAL
60140: IFTRUE 60144
60142: GO 60200
60144: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60145: LD_ADDR_VAR 0 9
60149: PUSH
60150: LD_VAR 0 11
60154: PUSH
60155: LD_VAR 0 12
60159: PUSH
60160: LD_VAR 0 13
60164: PUSH
60165: LD_VAR 0 14
60169: PUSH
60170: LD_VAR 0 15
60174: PUSH
60175: LD_VAR 0 16
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: PUSH
60188: LD_VAR 0 4
60192: PUSH
60193: LD_INT 1
60195: PLUS
60196: ARRAY
60197: ST_TO_ADDR
60198: GO 60329
60200: LD_INT 2
60202: DOUBLE
60203: EQUAL
60204: IFTRUE 60208
60206: GO 60264
60208: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60209: LD_ADDR_VAR 0 9
60213: PUSH
60214: LD_VAR 0 17
60218: PUSH
60219: LD_VAR 0 18
60223: PUSH
60224: LD_VAR 0 19
60228: PUSH
60229: LD_VAR 0 20
60233: PUSH
60234: LD_VAR 0 21
60238: PUSH
60239: LD_VAR 0 22
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: PUSH
60252: LD_VAR 0 4
60256: PUSH
60257: LD_INT 1
60259: PLUS
60260: ARRAY
60261: ST_TO_ADDR
60262: GO 60329
60264: LD_INT 3
60266: DOUBLE
60267: EQUAL
60268: IFTRUE 60272
60270: GO 60328
60272: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60273: LD_ADDR_VAR 0 9
60277: PUSH
60278: LD_VAR 0 23
60282: PUSH
60283: LD_VAR 0 24
60287: PUSH
60288: LD_VAR 0 25
60292: PUSH
60293: LD_VAR 0 26
60297: PUSH
60298: LD_VAR 0 27
60302: PUSH
60303: LD_VAR 0 28
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: PUSH
60316: LD_VAR 0 4
60320: PUSH
60321: LD_INT 1
60323: PLUS
60324: ARRAY
60325: ST_TO_ADDR
60326: GO 60329
60328: POP
60329: GO 60884
60331: LD_INT 2
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60345
60337: LD_INT 3
60339: DOUBLE
60340: EQUAL
60341: IFTRUE 60345
60343: GO 60401
60345: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
60346: LD_ADDR_VAR 0 9
60350: PUSH
60351: LD_VAR 0 29
60355: PUSH
60356: LD_VAR 0 30
60360: PUSH
60361: LD_VAR 0 31
60365: PUSH
60366: LD_VAR 0 32
60370: PUSH
60371: LD_VAR 0 33
60375: PUSH
60376: LD_VAR 0 34
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: PUSH
60389: LD_VAR 0 4
60393: PUSH
60394: LD_INT 1
60396: PLUS
60397: ARRAY
60398: ST_TO_ADDR
60399: GO 60884
60401: LD_INT 16
60403: DOUBLE
60404: EQUAL
60405: IFTRUE 60463
60407: LD_INT 17
60409: DOUBLE
60410: EQUAL
60411: IFTRUE 60463
60413: LD_INT 18
60415: DOUBLE
60416: EQUAL
60417: IFTRUE 60463
60419: LD_INT 19
60421: DOUBLE
60422: EQUAL
60423: IFTRUE 60463
60425: LD_INT 22
60427: DOUBLE
60428: EQUAL
60429: IFTRUE 60463
60431: LD_INT 20
60433: DOUBLE
60434: EQUAL
60435: IFTRUE 60463
60437: LD_INT 21
60439: DOUBLE
60440: EQUAL
60441: IFTRUE 60463
60443: LD_INT 23
60445: DOUBLE
60446: EQUAL
60447: IFTRUE 60463
60449: LD_INT 24
60451: DOUBLE
60452: EQUAL
60453: IFTRUE 60463
60455: LD_INT 25
60457: DOUBLE
60458: EQUAL
60459: IFTRUE 60463
60461: GO 60519
60463: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
60464: LD_ADDR_VAR 0 9
60468: PUSH
60469: LD_VAR 0 35
60473: PUSH
60474: LD_VAR 0 36
60478: PUSH
60479: LD_VAR 0 37
60483: PUSH
60484: LD_VAR 0 38
60488: PUSH
60489: LD_VAR 0 39
60493: PUSH
60494: LD_VAR 0 40
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: PUSH
60507: LD_VAR 0 4
60511: PUSH
60512: LD_INT 1
60514: PLUS
60515: ARRAY
60516: ST_TO_ADDR
60517: GO 60884
60519: LD_INT 6
60521: DOUBLE
60522: EQUAL
60523: IFTRUE 60575
60525: LD_INT 7
60527: DOUBLE
60528: EQUAL
60529: IFTRUE 60575
60531: LD_INT 8
60533: DOUBLE
60534: EQUAL
60535: IFTRUE 60575
60537: LD_INT 13
60539: DOUBLE
60540: EQUAL
60541: IFTRUE 60575
60543: LD_INT 12
60545: DOUBLE
60546: EQUAL
60547: IFTRUE 60575
60549: LD_INT 15
60551: DOUBLE
60552: EQUAL
60553: IFTRUE 60575
60555: LD_INT 11
60557: DOUBLE
60558: EQUAL
60559: IFTRUE 60575
60561: LD_INT 14
60563: DOUBLE
60564: EQUAL
60565: IFTRUE 60575
60567: LD_INT 10
60569: DOUBLE
60570: EQUAL
60571: IFTRUE 60575
60573: GO 60631
60575: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
60576: LD_ADDR_VAR 0 9
60580: PUSH
60581: LD_VAR 0 41
60585: PUSH
60586: LD_VAR 0 42
60590: PUSH
60591: LD_VAR 0 43
60595: PUSH
60596: LD_VAR 0 44
60600: PUSH
60601: LD_VAR 0 45
60605: PUSH
60606: LD_VAR 0 46
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: PUSH
60619: LD_VAR 0 4
60623: PUSH
60624: LD_INT 1
60626: PLUS
60627: ARRAY
60628: ST_TO_ADDR
60629: GO 60884
60631: LD_INT 36
60633: DOUBLE
60634: EQUAL
60635: IFTRUE 60639
60637: GO 60695
60639: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
60640: LD_ADDR_VAR 0 9
60644: PUSH
60645: LD_VAR 0 47
60649: PUSH
60650: LD_VAR 0 48
60654: PUSH
60655: LD_VAR 0 49
60659: PUSH
60660: LD_VAR 0 50
60664: PUSH
60665: LD_VAR 0 51
60669: PUSH
60670: LD_VAR 0 52
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: LIST
60679: LIST
60680: LIST
60681: LIST
60682: PUSH
60683: LD_VAR 0 4
60687: PUSH
60688: LD_INT 1
60690: PLUS
60691: ARRAY
60692: ST_TO_ADDR
60693: GO 60884
60695: LD_INT 4
60697: DOUBLE
60698: EQUAL
60699: IFTRUE 60721
60701: LD_INT 5
60703: DOUBLE
60704: EQUAL
60705: IFTRUE 60721
60707: LD_INT 34
60709: DOUBLE
60710: EQUAL
60711: IFTRUE 60721
60713: LD_INT 37
60715: DOUBLE
60716: EQUAL
60717: IFTRUE 60721
60719: GO 60777
60721: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
60722: LD_ADDR_VAR 0 9
60726: PUSH
60727: LD_VAR 0 53
60731: PUSH
60732: LD_VAR 0 54
60736: PUSH
60737: LD_VAR 0 55
60741: PUSH
60742: LD_VAR 0 56
60746: PUSH
60747: LD_VAR 0 57
60751: PUSH
60752: LD_VAR 0 58
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: PUSH
60765: LD_VAR 0 4
60769: PUSH
60770: LD_INT 1
60772: PLUS
60773: ARRAY
60774: ST_TO_ADDR
60775: GO 60884
60777: LD_INT 31
60779: DOUBLE
60780: EQUAL
60781: IFTRUE 60827
60783: LD_INT 32
60785: DOUBLE
60786: EQUAL
60787: IFTRUE 60827
60789: LD_INT 33
60791: DOUBLE
60792: EQUAL
60793: IFTRUE 60827
60795: LD_INT 27
60797: DOUBLE
60798: EQUAL
60799: IFTRUE 60827
60801: LD_INT 26
60803: DOUBLE
60804: EQUAL
60805: IFTRUE 60827
60807: LD_INT 28
60809: DOUBLE
60810: EQUAL
60811: IFTRUE 60827
60813: LD_INT 29
60815: DOUBLE
60816: EQUAL
60817: IFTRUE 60827
60819: LD_INT 30
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60827
60825: GO 60883
60827: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
60828: LD_ADDR_VAR 0 9
60832: PUSH
60833: LD_VAR 0 59
60837: PUSH
60838: LD_VAR 0 60
60842: PUSH
60843: LD_VAR 0 61
60847: PUSH
60848: LD_VAR 0 62
60852: PUSH
60853: LD_VAR 0 63
60857: PUSH
60858: LD_VAR 0 64
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: PUSH
60871: LD_VAR 0 4
60875: PUSH
60876: LD_INT 1
60878: PLUS
60879: ARRAY
60880: ST_TO_ADDR
60881: GO 60884
60883: POP
// temp_list2 = [ ] ;
60884: LD_ADDR_VAR 0 10
60888: PUSH
60889: EMPTY
60890: ST_TO_ADDR
// for i in temp_list do
60891: LD_ADDR_VAR 0 8
60895: PUSH
60896: LD_VAR 0 9
60900: PUSH
60901: FOR_IN
60902: IFFALSE 60954
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
60904: LD_ADDR_VAR 0 10
60908: PUSH
60909: LD_VAR 0 10
60913: PUSH
60914: LD_VAR 0 8
60918: PUSH
60919: LD_INT 1
60921: ARRAY
60922: PUSH
60923: LD_VAR 0 2
60927: PLUS
60928: PUSH
60929: LD_VAR 0 8
60933: PUSH
60934: LD_INT 2
60936: ARRAY
60937: PUSH
60938: LD_VAR 0 3
60942: PLUS
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: ADD
60951: ST_TO_ADDR
60952: GO 60901
60954: POP
60955: POP
// result = temp_list2 ;
60956: LD_ADDR_VAR 0 7
60960: PUSH
60961: LD_VAR 0 10
60965: ST_TO_ADDR
// end ;
60966: LD_VAR 0 7
60970: RET
// export function EnemyInRange ( unit , dist ) ; begin
60971: LD_INT 0
60973: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
60974: LD_ADDR_VAR 0 3
60978: PUSH
60979: LD_VAR 0 1
60983: PPUSH
60984: CALL_OW 255
60988: PPUSH
60989: LD_VAR 0 1
60993: PPUSH
60994: CALL_OW 250
60998: PPUSH
60999: LD_VAR 0 1
61003: PPUSH
61004: CALL_OW 251
61008: PPUSH
61009: LD_VAR 0 2
61013: PPUSH
61014: CALL 34344 0 4
61018: PUSH
61019: LD_INT 4
61021: ARRAY
61022: ST_TO_ADDR
// end ;
61023: LD_VAR 0 3
61027: RET
// export function PlayerSeeMe ( unit ) ; begin
61028: LD_INT 0
61030: PPUSH
// result := See ( your_side , unit ) ;
61031: LD_ADDR_VAR 0 2
61035: PUSH
61036: LD_OWVAR 2
61040: PPUSH
61041: LD_VAR 0 1
61045: PPUSH
61046: CALL_OW 292
61050: ST_TO_ADDR
// end ;
61051: LD_VAR 0 2
61055: RET
// export function ReverseDir ( unit ) ; begin
61056: LD_INT 0
61058: PPUSH
// if not unit then
61059: LD_VAR 0 1
61063: NOT
61064: IFFALSE 61068
// exit ;
61066: GO 61091
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61068: LD_ADDR_VAR 0 2
61072: PUSH
61073: LD_VAR 0 1
61077: PPUSH
61078: CALL_OW 254
61082: PUSH
61083: LD_INT 3
61085: PLUS
61086: PUSH
61087: LD_INT 6
61089: MOD
61090: ST_TO_ADDR
// end ;
61091: LD_VAR 0 2
61095: RET
// export function ReverseArray ( array ) ; var i ; begin
61096: LD_INT 0
61098: PPUSH
61099: PPUSH
// if not array then
61100: LD_VAR 0 1
61104: NOT
61105: IFFALSE 61109
// exit ;
61107: GO 61164
// result := [ ] ;
61109: LD_ADDR_VAR 0 2
61113: PUSH
61114: EMPTY
61115: ST_TO_ADDR
// for i := array downto 1 do
61116: LD_ADDR_VAR 0 3
61120: PUSH
61121: DOUBLE
61122: LD_VAR 0 1
61126: INC
61127: ST_TO_ADDR
61128: LD_INT 1
61130: PUSH
61131: FOR_DOWNTO
61132: IFFALSE 61162
// result := Join ( result , array [ i ] ) ;
61134: LD_ADDR_VAR 0 2
61138: PUSH
61139: LD_VAR 0 2
61143: PPUSH
61144: LD_VAR 0 1
61148: PUSH
61149: LD_VAR 0 3
61153: ARRAY
61154: PPUSH
61155: CALL 65820 0 2
61159: ST_TO_ADDR
61160: GO 61131
61162: POP
61163: POP
// end ;
61164: LD_VAR 0 2
61168: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61169: LD_INT 0
61171: PPUSH
61172: PPUSH
61173: PPUSH
61174: PPUSH
61175: PPUSH
61176: PPUSH
// if not unit or not hexes then
61177: LD_VAR 0 1
61181: NOT
61182: PUSH
61183: LD_VAR 0 2
61187: NOT
61188: OR
61189: IFFALSE 61193
// exit ;
61191: GO 61316
// dist := 9999 ;
61193: LD_ADDR_VAR 0 5
61197: PUSH
61198: LD_INT 9999
61200: ST_TO_ADDR
// for i = 1 to hexes do
61201: LD_ADDR_VAR 0 4
61205: PUSH
61206: DOUBLE
61207: LD_INT 1
61209: DEC
61210: ST_TO_ADDR
61211: LD_VAR 0 2
61215: PUSH
61216: FOR_TO
61217: IFFALSE 61304
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61219: LD_ADDR_VAR 0 6
61223: PUSH
61224: LD_VAR 0 1
61228: PPUSH
61229: LD_VAR 0 2
61233: PUSH
61234: LD_VAR 0 4
61238: ARRAY
61239: PUSH
61240: LD_INT 1
61242: ARRAY
61243: PPUSH
61244: LD_VAR 0 2
61248: PUSH
61249: LD_VAR 0 4
61253: ARRAY
61254: PUSH
61255: LD_INT 2
61257: ARRAY
61258: PPUSH
61259: CALL_OW 297
61263: ST_TO_ADDR
// if tdist < dist then
61264: LD_VAR 0 6
61268: PUSH
61269: LD_VAR 0 5
61273: LESS
61274: IFFALSE 61302
// begin hex := hexes [ i ] ;
61276: LD_ADDR_VAR 0 8
61280: PUSH
61281: LD_VAR 0 2
61285: PUSH
61286: LD_VAR 0 4
61290: ARRAY
61291: ST_TO_ADDR
// dist := tdist ;
61292: LD_ADDR_VAR 0 5
61296: PUSH
61297: LD_VAR 0 6
61301: ST_TO_ADDR
// end ; end ;
61302: GO 61216
61304: POP
61305: POP
// result := hex ;
61306: LD_ADDR_VAR 0 3
61310: PUSH
61311: LD_VAR 0 8
61315: ST_TO_ADDR
// end ;
61316: LD_VAR 0 3
61320: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
61321: LD_INT 0
61323: PPUSH
61324: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
61325: LD_VAR 0 1
61329: NOT
61330: PUSH
61331: LD_VAR 0 1
61335: PUSH
61336: LD_INT 21
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 23
61348: PUSH
61349: LD_INT 2
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PPUSH
61360: CALL_OW 69
61364: IN
61365: NOT
61366: OR
61367: IFFALSE 61371
// exit ;
61369: GO 61418
// for i = 1 to 3 do
61371: LD_ADDR_VAR 0 3
61375: PUSH
61376: DOUBLE
61377: LD_INT 1
61379: DEC
61380: ST_TO_ADDR
61381: LD_INT 3
61383: PUSH
61384: FOR_TO
61385: IFFALSE 61416
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 250
61396: PPUSH
61397: LD_VAR 0 1
61401: PPUSH
61402: CALL_OW 251
61406: PPUSH
61407: LD_INT 1
61409: PPUSH
61410: CALL_OW 453
61414: GO 61384
61416: POP
61417: POP
// end ;
61418: LD_VAR 0 2
61422: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
61423: LD_INT 0
61425: PPUSH
61426: PPUSH
61427: PPUSH
61428: PPUSH
61429: PPUSH
61430: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
61431: LD_VAR 0 1
61435: NOT
61436: PUSH
61437: LD_VAR 0 2
61441: NOT
61442: OR
61443: PUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 314
61453: OR
61454: IFFALSE 61458
// exit ;
61456: GO 61925
// if GetLives ( i ) < 250 then
61458: LD_VAR 0 4
61462: PPUSH
61463: CALL_OW 256
61467: PUSH
61468: LD_INT 250
61470: LESS
61471: IFFALSE 61484
// begin ComAutodestruct ( i ) ;
61473: LD_VAR 0 4
61477: PPUSH
61478: CALL 61321 0 1
// exit ;
61482: GO 61925
// end ; x := GetX ( enemy_unit ) ;
61484: LD_ADDR_VAR 0 7
61488: PUSH
61489: LD_VAR 0 2
61493: PPUSH
61494: CALL_OW 250
61498: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
61499: LD_ADDR_VAR 0 8
61503: PUSH
61504: LD_VAR 0 2
61508: PPUSH
61509: CALL_OW 251
61513: ST_TO_ADDR
// if not x or not y then
61514: LD_VAR 0 7
61518: NOT
61519: PUSH
61520: LD_VAR 0 8
61524: NOT
61525: OR
61526: IFFALSE 61530
// exit ;
61528: GO 61925
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
61530: LD_ADDR_VAR 0 6
61534: PUSH
61535: LD_VAR 0 7
61539: PPUSH
61540: LD_INT 0
61542: PPUSH
61543: LD_INT 4
61545: PPUSH
61546: CALL_OW 272
61550: PUSH
61551: LD_VAR 0 8
61555: PPUSH
61556: LD_INT 0
61558: PPUSH
61559: LD_INT 4
61561: PPUSH
61562: CALL_OW 273
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_VAR 0 7
61575: PPUSH
61576: LD_INT 1
61578: PPUSH
61579: LD_INT 4
61581: PPUSH
61582: CALL_OW 272
61586: PUSH
61587: LD_VAR 0 8
61591: PPUSH
61592: LD_INT 1
61594: PPUSH
61595: LD_INT 4
61597: PPUSH
61598: CALL_OW 273
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_VAR 0 7
61611: PPUSH
61612: LD_INT 2
61614: PPUSH
61615: LD_INT 4
61617: PPUSH
61618: CALL_OW 272
61622: PUSH
61623: LD_VAR 0 8
61627: PPUSH
61628: LD_INT 2
61630: PPUSH
61631: LD_INT 4
61633: PPUSH
61634: CALL_OW 273
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_VAR 0 7
61647: PPUSH
61648: LD_INT 3
61650: PPUSH
61651: LD_INT 4
61653: PPUSH
61654: CALL_OW 272
61658: PUSH
61659: LD_VAR 0 8
61663: PPUSH
61664: LD_INT 3
61666: PPUSH
61667: LD_INT 4
61669: PPUSH
61670: CALL_OW 273
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_VAR 0 7
61683: PPUSH
61684: LD_INT 4
61686: PPUSH
61687: LD_INT 4
61689: PPUSH
61690: CALL_OW 272
61694: PUSH
61695: LD_VAR 0 8
61699: PPUSH
61700: LD_INT 4
61702: PPUSH
61703: LD_INT 4
61705: PPUSH
61706: CALL_OW 273
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_VAR 0 7
61719: PPUSH
61720: LD_INT 5
61722: PPUSH
61723: LD_INT 4
61725: PPUSH
61726: CALL_OW 272
61730: PUSH
61731: LD_VAR 0 8
61735: PPUSH
61736: LD_INT 5
61738: PPUSH
61739: LD_INT 4
61741: PPUSH
61742: CALL_OW 273
61746: PUSH
61747: EMPTY
61748: LIST
61749: LIST
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: ST_TO_ADDR
// for i = tmp downto 1 do
61759: LD_ADDR_VAR 0 4
61763: PUSH
61764: DOUBLE
61765: LD_VAR 0 6
61769: INC
61770: ST_TO_ADDR
61771: LD_INT 1
61773: PUSH
61774: FOR_DOWNTO
61775: IFFALSE 61876
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
61777: LD_VAR 0 6
61781: PUSH
61782: LD_VAR 0 4
61786: ARRAY
61787: PUSH
61788: LD_INT 1
61790: ARRAY
61791: PPUSH
61792: LD_VAR 0 6
61796: PUSH
61797: LD_VAR 0 4
61801: ARRAY
61802: PUSH
61803: LD_INT 2
61805: ARRAY
61806: PPUSH
61807: CALL_OW 488
61811: NOT
61812: PUSH
61813: LD_VAR 0 6
61817: PUSH
61818: LD_VAR 0 4
61822: ARRAY
61823: PUSH
61824: LD_INT 1
61826: ARRAY
61827: PPUSH
61828: LD_VAR 0 6
61832: PUSH
61833: LD_VAR 0 4
61837: ARRAY
61838: PUSH
61839: LD_INT 2
61841: ARRAY
61842: PPUSH
61843: CALL_OW 428
61847: PUSH
61848: LD_INT 0
61850: NONEQUAL
61851: OR
61852: IFFALSE 61874
// tmp := Delete ( tmp , i ) ;
61854: LD_ADDR_VAR 0 6
61858: PUSH
61859: LD_VAR 0 6
61863: PPUSH
61864: LD_VAR 0 4
61868: PPUSH
61869: CALL_OW 3
61873: ST_TO_ADDR
61874: GO 61774
61876: POP
61877: POP
// j := GetClosestHex ( unit , tmp ) ;
61878: LD_ADDR_VAR 0 5
61882: PUSH
61883: LD_VAR 0 1
61887: PPUSH
61888: LD_VAR 0 6
61892: PPUSH
61893: CALL 61169 0 2
61897: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
61898: LD_VAR 0 1
61902: PPUSH
61903: LD_VAR 0 5
61907: PUSH
61908: LD_INT 1
61910: ARRAY
61911: PPUSH
61912: LD_VAR 0 5
61916: PUSH
61917: LD_INT 2
61919: ARRAY
61920: PPUSH
61921: CALL_OW 111
// end ;
61925: LD_VAR 0 3
61929: RET
// export function PrepareApemanSoldier ( ) ; begin
61930: LD_INT 0
61932: PPUSH
// uc_nation := 0 ;
61933: LD_ADDR_OWVAR 21
61937: PUSH
61938: LD_INT 0
61940: ST_TO_ADDR
// hc_sex := sex_male ;
61941: LD_ADDR_OWVAR 27
61945: PUSH
61946: LD_INT 1
61948: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
61949: LD_ADDR_OWVAR 28
61953: PUSH
61954: LD_INT 15
61956: ST_TO_ADDR
// hc_gallery :=  ;
61957: LD_ADDR_OWVAR 33
61961: PUSH
61962: LD_STRING 
61964: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61965: LD_ADDR_OWVAR 31
61969: PUSH
61970: LD_INT 0
61972: PPUSH
61973: LD_INT 3
61975: PPUSH
61976: CALL_OW 12
61980: PUSH
61981: LD_INT 0
61983: PPUSH
61984: LD_INT 3
61986: PPUSH
61987: CALL_OW 12
61991: PUSH
61992: LD_INT 0
61994: PUSH
61995: LD_INT 0
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: ST_TO_ADDR
// end ;
62004: LD_VAR 0 1
62008: RET
// export function PrepareApemanEngineer ( ) ; begin
62009: LD_INT 0
62011: PPUSH
// uc_nation := 0 ;
62012: LD_ADDR_OWVAR 21
62016: PUSH
62017: LD_INT 0
62019: ST_TO_ADDR
// hc_sex := sex_male ;
62020: LD_ADDR_OWVAR 27
62024: PUSH
62025: LD_INT 1
62027: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62028: LD_ADDR_OWVAR 28
62032: PUSH
62033: LD_INT 16
62035: ST_TO_ADDR
// hc_gallery :=  ;
62036: LD_ADDR_OWVAR 33
62040: PUSH
62041: LD_STRING 
62043: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62044: LD_ADDR_OWVAR 31
62048: PUSH
62049: LD_INT 0
62051: PPUSH
62052: LD_INT 3
62054: PPUSH
62055: CALL_OW 12
62059: PUSH
62060: LD_INT 0
62062: PPUSH
62063: LD_INT 3
62065: PPUSH
62066: CALL_OW 12
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: ST_TO_ADDR
// end ;
62083: LD_VAR 0 1
62087: RET
// export function PrepareApeman ( agressivity ) ; begin
62088: LD_INT 0
62090: PPUSH
// uc_side := 0 ;
62091: LD_ADDR_OWVAR 20
62095: PUSH
62096: LD_INT 0
62098: ST_TO_ADDR
// uc_nation := 0 ;
62099: LD_ADDR_OWVAR 21
62103: PUSH
62104: LD_INT 0
62106: ST_TO_ADDR
// hc_sex := sex_male ;
62107: LD_ADDR_OWVAR 27
62111: PUSH
62112: LD_INT 1
62114: ST_TO_ADDR
// hc_class := class_apeman ;
62115: LD_ADDR_OWVAR 28
62119: PUSH
62120: LD_INT 12
62122: ST_TO_ADDR
// hc_gallery :=  ;
62123: LD_ADDR_OWVAR 33
62127: PUSH
62128: LD_STRING 
62130: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62131: LD_ADDR_OWVAR 35
62135: PUSH
62136: LD_VAR 0 1
62140: NEG
62141: PPUSH
62142: LD_VAR 0 1
62146: PPUSH
62147: CALL_OW 12
62151: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62152: LD_ADDR_OWVAR 31
62156: PUSH
62157: LD_INT 0
62159: PPUSH
62160: LD_INT 3
62162: PPUSH
62163: CALL_OW 12
62167: PUSH
62168: LD_INT 0
62170: PPUSH
62171: LD_INT 3
62173: PPUSH
62174: CALL_OW 12
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: ST_TO_ADDR
// end ;
62191: LD_VAR 0 2
62195: RET
// export function PrepareTiger ( agressivity ) ; begin
62196: LD_INT 0
62198: PPUSH
// uc_side := 0 ;
62199: LD_ADDR_OWVAR 20
62203: PUSH
62204: LD_INT 0
62206: ST_TO_ADDR
// uc_nation := 0 ;
62207: LD_ADDR_OWVAR 21
62211: PUSH
62212: LD_INT 0
62214: ST_TO_ADDR
// hc_class := class_tiger ;
62215: LD_ADDR_OWVAR 28
62219: PUSH
62220: LD_INT 14
62222: ST_TO_ADDR
// hc_gallery :=  ;
62223: LD_ADDR_OWVAR 33
62227: PUSH
62228: LD_STRING 
62230: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62231: LD_ADDR_OWVAR 35
62235: PUSH
62236: LD_VAR 0 1
62240: NEG
62241: PPUSH
62242: LD_VAR 0 1
62246: PPUSH
62247: CALL_OW 12
62251: ST_TO_ADDR
// end ;
62252: LD_VAR 0 2
62256: RET
// export function PrepareEnchidna ( ) ; begin
62257: LD_INT 0
62259: PPUSH
// uc_side := 0 ;
62260: LD_ADDR_OWVAR 20
62264: PUSH
62265: LD_INT 0
62267: ST_TO_ADDR
// uc_nation := 0 ;
62268: LD_ADDR_OWVAR 21
62272: PUSH
62273: LD_INT 0
62275: ST_TO_ADDR
// hc_class := class_baggie ;
62276: LD_ADDR_OWVAR 28
62280: PUSH
62281: LD_INT 13
62283: ST_TO_ADDR
// hc_gallery :=  ;
62284: LD_ADDR_OWVAR 33
62288: PUSH
62289: LD_STRING 
62291: ST_TO_ADDR
// end ;
62292: LD_VAR 0 1
62296: RET
// export function PrepareFrog ( ) ; begin
62297: LD_INT 0
62299: PPUSH
// uc_side := 0 ;
62300: LD_ADDR_OWVAR 20
62304: PUSH
62305: LD_INT 0
62307: ST_TO_ADDR
// uc_nation := 0 ;
62308: LD_ADDR_OWVAR 21
62312: PUSH
62313: LD_INT 0
62315: ST_TO_ADDR
// hc_class := class_frog ;
62316: LD_ADDR_OWVAR 28
62320: PUSH
62321: LD_INT 19
62323: ST_TO_ADDR
// hc_gallery :=  ;
62324: LD_ADDR_OWVAR 33
62328: PUSH
62329: LD_STRING 
62331: ST_TO_ADDR
// end ;
62332: LD_VAR 0 1
62336: RET
// export function PrepareFish ( ) ; begin
62337: LD_INT 0
62339: PPUSH
// uc_side := 0 ;
62340: LD_ADDR_OWVAR 20
62344: PUSH
62345: LD_INT 0
62347: ST_TO_ADDR
// uc_nation := 0 ;
62348: LD_ADDR_OWVAR 21
62352: PUSH
62353: LD_INT 0
62355: ST_TO_ADDR
// hc_class := class_fish ;
62356: LD_ADDR_OWVAR 28
62360: PUSH
62361: LD_INT 20
62363: ST_TO_ADDR
// hc_gallery :=  ;
62364: LD_ADDR_OWVAR 33
62368: PUSH
62369: LD_STRING 
62371: ST_TO_ADDR
// end ;
62372: LD_VAR 0 1
62376: RET
// export function PrepareBird ( ) ; begin
62377: LD_INT 0
62379: PPUSH
// uc_side := 0 ;
62380: LD_ADDR_OWVAR 20
62384: PUSH
62385: LD_INT 0
62387: ST_TO_ADDR
// uc_nation := 0 ;
62388: LD_ADDR_OWVAR 21
62392: PUSH
62393: LD_INT 0
62395: ST_TO_ADDR
// hc_class := class_phororhacos ;
62396: LD_ADDR_OWVAR 28
62400: PUSH
62401: LD_INT 18
62403: ST_TO_ADDR
// hc_gallery :=  ;
62404: LD_ADDR_OWVAR 33
62408: PUSH
62409: LD_STRING 
62411: ST_TO_ADDR
// end ;
62412: LD_VAR 0 1
62416: RET
// export function PrepareHorse ( ) ; begin
62417: LD_INT 0
62419: PPUSH
// uc_side := 0 ;
62420: LD_ADDR_OWVAR 20
62424: PUSH
62425: LD_INT 0
62427: ST_TO_ADDR
// uc_nation := 0 ;
62428: LD_ADDR_OWVAR 21
62432: PUSH
62433: LD_INT 0
62435: ST_TO_ADDR
// hc_class := class_horse ;
62436: LD_ADDR_OWVAR 28
62440: PUSH
62441: LD_INT 21
62443: ST_TO_ADDR
// hc_gallery :=  ;
62444: LD_ADDR_OWVAR 33
62448: PUSH
62449: LD_STRING 
62451: ST_TO_ADDR
// end ;
62452: LD_VAR 0 1
62456: RET
// export function PrepareMastodont ( ) ; begin
62457: LD_INT 0
62459: PPUSH
// uc_side := 0 ;
62460: LD_ADDR_OWVAR 20
62464: PUSH
62465: LD_INT 0
62467: ST_TO_ADDR
// uc_nation := 0 ;
62468: LD_ADDR_OWVAR 21
62472: PUSH
62473: LD_INT 0
62475: ST_TO_ADDR
// vc_chassis := class_mastodont ;
62476: LD_ADDR_OWVAR 37
62480: PUSH
62481: LD_INT 31
62483: ST_TO_ADDR
// vc_control := control_rider ;
62484: LD_ADDR_OWVAR 38
62488: PUSH
62489: LD_INT 4
62491: ST_TO_ADDR
// end ;
62492: LD_VAR 0 1
62496: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
62497: LD_INT 0
62499: PPUSH
62500: PPUSH
62501: PPUSH
// uc_side = 0 ;
62502: LD_ADDR_OWVAR 20
62506: PUSH
62507: LD_INT 0
62509: ST_TO_ADDR
// uc_nation = 0 ;
62510: LD_ADDR_OWVAR 21
62514: PUSH
62515: LD_INT 0
62517: ST_TO_ADDR
// InitHc_All ( ) ;
62518: CALL_OW 584
// InitVc ;
62522: CALL_OW 20
// if mastodonts then
62526: LD_VAR 0 6
62530: IFFALSE 62597
// for i = 1 to mastodonts do
62532: LD_ADDR_VAR 0 11
62536: PUSH
62537: DOUBLE
62538: LD_INT 1
62540: DEC
62541: ST_TO_ADDR
62542: LD_VAR 0 6
62546: PUSH
62547: FOR_TO
62548: IFFALSE 62595
// begin vc_chassis := 31 ;
62550: LD_ADDR_OWVAR 37
62554: PUSH
62555: LD_INT 31
62557: ST_TO_ADDR
// vc_control := control_rider ;
62558: LD_ADDR_OWVAR 38
62562: PUSH
62563: LD_INT 4
62565: ST_TO_ADDR
// animal := CreateVehicle ;
62566: LD_ADDR_VAR 0 12
62570: PUSH
62571: CALL_OW 45
62575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62576: LD_VAR 0 12
62580: PPUSH
62581: LD_VAR 0 8
62585: PPUSH
62586: LD_INT 0
62588: PPUSH
62589: CALL 64725 0 3
// end ;
62593: GO 62547
62595: POP
62596: POP
// if horses then
62597: LD_VAR 0 5
62601: IFFALSE 62668
// for i = 1 to horses do
62603: LD_ADDR_VAR 0 11
62607: PUSH
62608: DOUBLE
62609: LD_INT 1
62611: DEC
62612: ST_TO_ADDR
62613: LD_VAR 0 5
62617: PUSH
62618: FOR_TO
62619: IFFALSE 62666
// begin hc_class := 21 ;
62621: LD_ADDR_OWVAR 28
62625: PUSH
62626: LD_INT 21
62628: ST_TO_ADDR
// hc_gallery :=  ;
62629: LD_ADDR_OWVAR 33
62633: PUSH
62634: LD_STRING 
62636: ST_TO_ADDR
// animal := CreateHuman ;
62637: LD_ADDR_VAR 0 12
62641: PUSH
62642: CALL_OW 44
62646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62647: LD_VAR 0 12
62651: PPUSH
62652: LD_VAR 0 8
62656: PPUSH
62657: LD_INT 0
62659: PPUSH
62660: CALL 64725 0 3
// end ;
62664: GO 62618
62666: POP
62667: POP
// if birds then
62668: LD_VAR 0 1
62672: IFFALSE 62739
// for i = 1 to birds do
62674: LD_ADDR_VAR 0 11
62678: PUSH
62679: DOUBLE
62680: LD_INT 1
62682: DEC
62683: ST_TO_ADDR
62684: LD_VAR 0 1
62688: PUSH
62689: FOR_TO
62690: IFFALSE 62737
// begin hc_class := 18 ;
62692: LD_ADDR_OWVAR 28
62696: PUSH
62697: LD_INT 18
62699: ST_TO_ADDR
// hc_gallery =  ;
62700: LD_ADDR_OWVAR 33
62704: PUSH
62705: LD_STRING 
62707: ST_TO_ADDR
// animal := CreateHuman ;
62708: LD_ADDR_VAR 0 12
62712: PUSH
62713: CALL_OW 44
62717: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62718: LD_VAR 0 12
62722: PPUSH
62723: LD_VAR 0 8
62727: PPUSH
62728: LD_INT 0
62730: PPUSH
62731: CALL 64725 0 3
// end ;
62735: GO 62689
62737: POP
62738: POP
// if tigers then
62739: LD_VAR 0 2
62743: IFFALSE 62827
// for i = 1 to tigers do
62745: LD_ADDR_VAR 0 11
62749: PUSH
62750: DOUBLE
62751: LD_INT 1
62753: DEC
62754: ST_TO_ADDR
62755: LD_VAR 0 2
62759: PUSH
62760: FOR_TO
62761: IFFALSE 62825
// begin hc_class = class_tiger ;
62763: LD_ADDR_OWVAR 28
62767: PUSH
62768: LD_INT 14
62770: ST_TO_ADDR
// hc_gallery =  ;
62771: LD_ADDR_OWVAR 33
62775: PUSH
62776: LD_STRING 
62778: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
62779: LD_ADDR_OWVAR 35
62783: PUSH
62784: LD_INT 7
62786: NEG
62787: PPUSH
62788: LD_INT 7
62790: PPUSH
62791: CALL_OW 12
62795: ST_TO_ADDR
// animal := CreateHuman ;
62796: LD_ADDR_VAR 0 12
62800: PUSH
62801: CALL_OW 44
62805: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62806: LD_VAR 0 12
62810: PPUSH
62811: LD_VAR 0 8
62815: PPUSH
62816: LD_INT 0
62818: PPUSH
62819: CALL 64725 0 3
// end ;
62823: GO 62760
62825: POP
62826: POP
// if apemans then
62827: LD_VAR 0 3
62831: IFFALSE 62954
// for i = 1 to apemans do
62833: LD_ADDR_VAR 0 11
62837: PUSH
62838: DOUBLE
62839: LD_INT 1
62841: DEC
62842: ST_TO_ADDR
62843: LD_VAR 0 3
62847: PUSH
62848: FOR_TO
62849: IFFALSE 62952
// begin hc_class = class_apeman ;
62851: LD_ADDR_OWVAR 28
62855: PUSH
62856: LD_INT 12
62858: ST_TO_ADDR
// hc_gallery =  ;
62859: LD_ADDR_OWVAR 33
62863: PUSH
62864: LD_STRING 
62866: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
62867: LD_ADDR_OWVAR 35
62871: PUSH
62872: LD_INT 2
62874: NEG
62875: PPUSH
62876: LD_INT 2
62878: PPUSH
62879: CALL_OW 12
62883: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
62884: LD_ADDR_OWVAR 31
62888: PUSH
62889: LD_INT 1
62891: PPUSH
62892: LD_INT 3
62894: PPUSH
62895: CALL_OW 12
62899: PUSH
62900: LD_INT 1
62902: PPUSH
62903: LD_INT 3
62905: PPUSH
62906: CALL_OW 12
62910: PUSH
62911: LD_INT 0
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: LIST
62922: ST_TO_ADDR
// animal := CreateHuman ;
62923: LD_ADDR_VAR 0 12
62927: PUSH
62928: CALL_OW 44
62932: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
62933: LD_VAR 0 12
62937: PPUSH
62938: LD_VAR 0 8
62942: PPUSH
62943: LD_INT 0
62945: PPUSH
62946: CALL 64725 0 3
// end ;
62950: GO 62848
62952: POP
62953: POP
// if enchidnas then
62954: LD_VAR 0 4
62958: IFFALSE 63025
// for i = 1 to enchidnas do
62960: LD_ADDR_VAR 0 11
62964: PUSH
62965: DOUBLE
62966: LD_INT 1
62968: DEC
62969: ST_TO_ADDR
62970: LD_VAR 0 4
62974: PUSH
62975: FOR_TO
62976: IFFALSE 63023
// begin hc_class = 13 ;
62978: LD_ADDR_OWVAR 28
62982: PUSH
62983: LD_INT 13
62985: ST_TO_ADDR
// hc_gallery =  ;
62986: LD_ADDR_OWVAR 33
62990: PUSH
62991: LD_STRING 
62993: ST_TO_ADDR
// animal := CreateHuman ;
62994: LD_ADDR_VAR 0 12
62998: PUSH
62999: CALL_OW 44
63003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63004: LD_VAR 0 12
63008: PPUSH
63009: LD_VAR 0 8
63013: PPUSH
63014: LD_INT 0
63016: PPUSH
63017: CALL 64725 0 3
// end ;
63021: GO 62975
63023: POP
63024: POP
// if fishes then
63025: LD_VAR 0 7
63029: IFFALSE 63096
// for i = 1 to fishes do
63031: LD_ADDR_VAR 0 11
63035: PUSH
63036: DOUBLE
63037: LD_INT 1
63039: DEC
63040: ST_TO_ADDR
63041: LD_VAR 0 7
63045: PUSH
63046: FOR_TO
63047: IFFALSE 63094
// begin hc_class = 20 ;
63049: LD_ADDR_OWVAR 28
63053: PUSH
63054: LD_INT 20
63056: ST_TO_ADDR
// hc_gallery =  ;
63057: LD_ADDR_OWVAR 33
63061: PUSH
63062: LD_STRING 
63064: ST_TO_ADDR
// animal := CreateHuman ;
63065: LD_ADDR_VAR 0 12
63069: PUSH
63070: CALL_OW 44
63074: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63075: LD_VAR 0 12
63079: PPUSH
63080: LD_VAR 0 9
63084: PPUSH
63085: LD_INT 0
63087: PPUSH
63088: CALL 64725 0 3
// end ;
63092: GO 63046
63094: POP
63095: POP
// end ;
63096: LD_VAR 0 10
63100: RET
// export function WantHeal ( sci , unit ) ; begin
63101: LD_INT 0
63103: PPUSH
// if GetTaskList ( sci ) > 0 then
63104: LD_VAR 0 1
63108: PPUSH
63109: CALL_OW 437
63113: PUSH
63114: LD_INT 0
63116: GREATER
63117: IFFALSE 63187
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 437
63128: PUSH
63129: LD_INT 1
63131: ARRAY
63132: PUSH
63133: LD_INT 1
63135: ARRAY
63136: PUSH
63137: LD_STRING l
63139: EQUAL
63140: PUSH
63141: LD_VAR 0 1
63145: PPUSH
63146: CALL_OW 437
63150: PUSH
63151: LD_INT 1
63153: ARRAY
63154: PUSH
63155: LD_INT 4
63157: ARRAY
63158: PUSH
63159: LD_VAR 0 2
63163: EQUAL
63164: AND
63165: IFFALSE 63177
// result := true else
63167: LD_ADDR_VAR 0 3
63171: PUSH
63172: LD_INT 1
63174: ST_TO_ADDR
63175: GO 63185
// result := false ;
63177: LD_ADDR_VAR 0 3
63181: PUSH
63182: LD_INT 0
63184: ST_TO_ADDR
// end else
63185: GO 63195
// result := false ;
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_INT 0
63194: ST_TO_ADDR
// end ;
63195: LD_VAR 0 3
63199: RET
// export function HealTarget ( sci ) ; begin
63200: LD_INT 0
63202: PPUSH
// if not sci then
63203: LD_VAR 0 1
63207: NOT
63208: IFFALSE 63212
// exit ;
63210: GO 63277
// result := 0 ;
63212: LD_ADDR_VAR 0 2
63216: PUSH
63217: LD_INT 0
63219: ST_TO_ADDR
// if GetTaskList ( sci ) then
63220: LD_VAR 0 1
63224: PPUSH
63225: CALL_OW 437
63229: IFFALSE 63277
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63231: LD_VAR 0 1
63235: PPUSH
63236: CALL_OW 437
63240: PUSH
63241: LD_INT 1
63243: ARRAY
63244: PUSH
63245: LD_INT 1
63247: ARRAY
63248: PUSH
63249: LD_STRING l
63251: EQUAL
63252: IFFALSE 63277
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63254: LD_ADDR_VAR 0 2
63258: PUSH
63259: LD_VAR 0 1
63263: PPUSH
63264: CALL_OW 437
63268: PUSH
63269: LD_INT 1
63271: ARRAY
63272: PUSH
63273: LD_INT 4
63275: ARRAY
63276: ST_TO_ADDR
// end ;
63277: LD_VAR 0 2
63281: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63282: LD_INT 0
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
// if not base_units then
63288: LD_VAR 0 1
63292: NOT
63293: IFFALSE 63297
// exit ;
63295: GO 63384
// result := false ;
63297: LD_ADDR_VAR 0 2
63301: PUSH
63302: LD_INT 0
63304: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
63305: LD_ADDR_VAR 0 5
63309: PUSH
63310: LD_VAR 0 1
63314: PPUSH
63315: LD_INT 21
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PPUSH
63325: CALL_OW 72
63329: ST_TO_ADDR
// if not tmp then
63330: LD_VAR 0 5
63334: NOT
63335: IFFALSE 63339
// exit ;
63337: GO 63384
// for i in tmp do
63339: LD_ADDR_VAR 0 3
63343: PUSH
63344: LD_VAR 0 5
63348: PUSH
63349: FOR_IN
63350: IFFALSE 63382
// begin result := EnemyInRange ( i , 22 ) ;
63352: LD_ADDR_VAR 0 2
63356: PUSH
63357: LD_VAR 0 3
63361: PPUSH
63362: LD_INT 22
63364: PPUSH
63365: CALL 60971 0 2
63369: ST_TO_ADDR
// if result then
63370: LD_VAR 0 2
63374: IFFALSE 63380
// exit ;
63376: POP
63377: POP
63378: GO 63384
// end ;
63380: GO 63349
63382: POP
63383: POP
// end ;
63384: LD_VAR 0 2
63388: RET
// export function FilterByTag ( units , tag ) ; begin
63389: LD_INT 0
63391: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
63392: LD_ADDR_VAR 0 3
63396: PUSH
63397: LD_VAR 0 1
63401: PPUSH
63402: LD_INT 120
63404: PUSH
63405: LD_VAR 0 2
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PPUSH
63414: CALL_OW 72
63418: ST_TO_ADDR
// end ;
63419: LD_VAR 0 3
63423: RET
// export function IsDriver ( un ) ; begin
63424: LD_INT 0
63426: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
63427: LD_ADDR_VAR 0 2
63431: PUSH
63432: LD_VAR 0 1
63436: PUSH
63437: LD_INT 55
63439: PUSH
63440: EMPTY
63441: LIST
63442: PPUSH
63443: CALL_OW 69
63447: IN
63448: ST_TO_ADDR
// end ;
63449: LD_VAR 0 2
63453: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
63454: LD_INT 0
63456: PPUSH
63457: PPUSH
// list := [ ] ;
63458: LD_ADDR_VAR 0 5
63462: PUSH
63463: EMPTY
63464: ST_TO_ADDR
// case d of 0 :
63465: LD_VAR 0 3
63469: PUSH
63470: LD_INT 0
63472: DOUBLE
63473: EQUAL
63474: IFTRUE 63478
63476: GO 63611
63478: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
63479: LD_ADDR_VAR 0 5
63483: PUSH
63484: LD_VAR 0 1
63488: PUSH
63489: LD_INT 4
63491: MINUS
63492: PUSH
63493: LD_VAR 0 2
63497: PUSH
63498: LD_INT 4
63500: MINUS
63501: PUSH
63502: LD_INT 2
63504: PUSH
63505: EMPTY
63506: LIST
63507: LIST
63508: LIST
63509: PUSH
63510: LD_VAR 0 1
63514: PUSH
63515: LD_INT 3
63517: MINUS
63518: PUSH
63519: LD_VAR 0 2
63523: PUSH
63524: LD_INT 1
63526: PUSH
63527: EMPTY
63528: LIST
63529: LIST
63530: LIST
63531: PUSH
63532: LD_VAR 0 1
63536: PUSH
63537: LD_INT 4
63539: PLUS
63540: PUSH
63541: LD_VAR 0 2
63545: PUSH
63546: LD_INT 4
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: LIST
63553: PUSH
63554: LD_VAR 0 1
63558: PUSH
63559: LD_INT 3
63561: PLUS
63562: PUSH
63563: LD_VAR 0 2
63567: PUSH
63568: LD_INT 3
63570: PLUS
63571: PUSH
63572: LD_INT 5
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 1
63584: PUSH
63585: LD_VAR 0 2
63589: PUSH
63590: LD_INT 4
63592: PLUS
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: EMPTY
63598: LIST
63599: LIST
63600: LIST
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: ST_TO_ADDR
// end ; 1 :
63609: GO 64309
63611: LD_INT 1
63613: DOUBLE
63614: EQUAL
63615: IFTRUE 63619
63617: GO 63752
63619: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
63620: LD_ADDR_VAR 0 5
63624: PUSH
63625: LD_VAR 0 1
63629: PUSH
63630: LD_VAR 0 2
63634: PUSH
63635: LD_INT 4
63637: MINUS
63638: PUSH
63639: LD_INT 3
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: PUSH
63647: LD_VAR 0 1
63651: PUSH
63652: LD_INT 3
63654: MINUS
63655: PUSH
63656: LD_VAR 0 2
63660: PUSH
63661: LD_INT 3
63663: MINUS
63664: PUSH
63665: LD_INT 2
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: PUSH
63673: LD_VAR 0 1
63677: PUSH
63678: LD_INT 4
63680: MINUS
63681: PUSH
63682: LD_VAR 0 2
63686: PUSH
63687: LD_INT 1
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: PUSH
63695: LD_VAR 0 1
63699: PUSH
63700: LD_VAR 0 2
63704: PUSH
63705: LD_INT 3
63707: PLUS
63708: PUSH
63709: LD_INT 0
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: LIST
63716: PUSH
63717: LD_VAR 0 1
63721: PUSH
63722: LD_INT 4
63724: PLUS
63725: PUSH
63726: LD_VAR 0 2
63730: PUSH
63731: LD_INT 4
63733: PLUS
63734: PUSH
63735: LD_INT 5
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: LIST
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: ST_TO_ADDR
// end ; 2 :
63750: GO 64309
63752: LD_INT 2
63754: DOUBLE
63755: EQUAL
63756: IFTRUE 63760
63758: GO 63889
63760: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
63761: LD_ADDR_VAR 0 5
63765: PUSH
63766: LD_VAR 0 1
63770: PUSH
63771: LD_VAR 0 2
63775: PUSH
63776: LD_INT 3
63778: MINUS
63779: PUSH
63780: LD_INT 3
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: LIST
63787: PUSH
63788: LD_VAR 0 1
63792: PUSH
63793: LD_INT 4
63795: PLUS
63796: PUSH
63797: LD_VAR 0 2
63801: PUSH
63802: LD_INT 4
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: LIST
63809: PUSH
63810: LD_VAR 0 1
63814: PUSH
63815: LD_VAR 0 2
63819: PUSH
63820: LD_INT 4
63822: PLUS
63823: PUSH
63824: LD_INT 0
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: PUSH
63832: LD_VAR 0 1
63836: PUSH
63837: LD_INT 3
63839: MINUS
63840: PUSH
63841: LD_VAR 0 2
63845: PUSH
63846: LD_INT 1
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PUSH
63854: LD_VAR 0 1
63858: PUSH
63859: LD_INT 4
63861: MINUS
63862: PUSH
63863: LD_VAR 0 2
63867: PUSH
63868: LD_INT 4
63870: MINUS
63871: PUSH
63872: LD_INT 2
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: LIST
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: ST_TO_ADDR
// end ; 3 :
63887: GO 64309
63889: LD_INT 3
63891: DOUBLE
63892: EQUAL
63893: IFTRUE 63897
63895: GO 64030
63897: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
63898: LD_ADDR_VAR 0 5
63902: PUSH
63903: LD_VAR 0 1
63907: PUSH
63908: LD_INT 3
63910: PLUS
63911: PUSH
63912: LD_VAR 0 2
63916: PUSH
63917: LD_INT 4
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: PUSH
63925: LD_VAR 0 1
63929: PUSH
63930: LD_INT 4
63932: PLUS
63933: PUSH
63934: LD_VAR 0 2
63938: PUSH
63939: LD_INT 4
63941: PLUS
63942: PUSH
63943: LD_INT 5
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: LIST
63950: PUSH
63951: LD_VAR 0 1
63955: PUSH
63956: LD_INT 4
63958: MINUS
63959: PUSH
63960: LD_VAR 0 2
63964: PUSH
63965: LD_INT 1
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: LIST
63972: PUSH
63973: LD_VAR 0 1
63977: PUSH
63978: LD_VAR 0 2
63982: PUSH
63983: LD_INT 4
63985: MINUS
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: LIST
63994: PUSH
63995: LD_VAR 0 1
63999: PUSH
64000: LD_INT 3
64002: MINUS
64003: PUSH
64004: LD_VAR 0 2
64008: PUSH
64009: LD_INT 3
64011: MINUS
64012: PUSH
64013: LD_INT 2
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: ST_TO_ADDR
// end ; 4 :
64028: GO 64309
64030: LD_INT 4
64032: DOUBLE
64033: EQUAL
64034: IFTRUE 64038
64036: GO 64171
64038: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64039: LD_ADDR_VAR 0 5
64043: PUSH
64044: LD_VAR 0 1
64048: PUSH
64049: LD_VAR 0 2
64053: PUSH
64054: LD_INT 4
64056: PLUS
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: LIST
64065: PUSH
64066: LD_VAR 0 1
64070: PUSH
64071: LD_INT 3
64073: PLUS
64074: PUSH
64075: LD_VAR 0 2
64079: PUSH
64080: LD_INT 3
64082: PLUS
64083: PUSH
64084: LD_INT 5
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: LIST
64091: PUSH
64092: LD_VAR 0 1
64096: PUSH
64097: LD_INT 4
64099: PLUS
64100: PUSH
64101: LD_VAR 0 2
64105: PUSH
64106: LD_INT 4
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: LIST
64113: PUSH
64114: LD_VAR 0 1
64118: PUSH
64119: LD_VAR 0 2
64123: PUSH
64124: LD_INT 3
64126: MINUS
64127: PUSH
64128: LD_INT 3
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: PUSH
64136: LD_VAR 0 1
64140: PUSH
64141: LD_INT 4
64143: MINUS
64144: PUSH
64145: LD_VAR 0 2
64149: PUSH
64150: LD_INT 4
64152: MINUS
64153: PUSH
64154: LD_INT 2
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: LIST
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: ST_TO_ADDR
// end ; 5 :
64169: GO 64309
64171: LD_INT 5
64173: DOUBLE
64174: EQUAL
64175: IFTRUE 64179
64177: GO 64308
64179: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64180: LD_ADDR_VAR 0 5
64184: PUSH
64185: LD_VAR 0 1
64189: PUSH
64190: LD_INT 4
64192: MINUS
64193: PUSH
64194: LD_VAR 0 2
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: PUSH
64207: LD_VAR 0 1
64211: PUSH
64212: LD_VAR 0 2
64216: PUSH
64217: LD_INT 4
64219: MINUS
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: PUSH
64229: LD_VAR 0 1
64233: PUSH
64234: LD_INT 4
64236: PLUS
64237: PUSH
64238: LD_VAR 0 2
64242: PUSH
64243: LD_INT 4
64245: PLUS
64246: PUSH
64247: LD_INT 5
64249: PUSH
64250: EMPTY
64251: LIST
64252: LIST
64253: LIST
64254: PUSH
64255: LD_VAR 0 1
64259: PUSH
64260: LD_INT 3
64262: PLUS
64263: PUSH
64264: LD_VAR 0 2
64268: PUSH
64269: LD_INT 4
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: LIST
64276: PUSH
64277: LD_VAR 0 1
64281: PUSH
64282: LD_VAR 0 2
64286: PUSH
64287: LD_INT 3
64289: PLUS
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: LIST
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// end ; end ;
64306: GO 64309
64308: POP
// result := list ;
64309: LD_ADDR_VAR 0 4
64313: PUSH
64314: LD_VAR 0 5
64318: ST_TO_ADDR
// end ;
64319: LD_VAR 0 4
64323: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
64324: LD_INT 0
64326: PPUSH
64327: PPUSH
64328: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
64329: LD_VAR 0 1
64333: NOT
64334: PUSH
64335: LD_VAR 0 2
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: LD_INT 2
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: LD_INT 4
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: IN
64358: NOT
64359: OR
64360: IFFALSE 64364
// exit ;
64362: GO 64447
// tmp := [ ] ;
64364: LD_ADDR_VAR 0 5
64368: PUSH
64369: EMPTY
64370: ST_TO_ADDR
// for i in units do
64371: LD_ADDR_VAR 0 4
64375: PUSH
64376: LD_VAR 0 1
64380: PUSH
64381: FOR_IN
64382: IFFALSE 64416
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
64384: LD_ADDR_VAR 0 5
64388: PUSH
64389: LD_VAR 0 5
64393: PPUSH
64394: LD_VAR 0 4
64398: PPUSH
64399: LD_VAR 0 2
64403: PPUSH
64404: CALL_OW 259
64408: PPUSH
64409: CALL 65820 0 2
64413: ST_TO_ADDR
64414: GO 64381
64416: POP
64417: POP
// if not tmp then
64418: LD_VAR 0 5
64422: NOT
64423: IFFALSE 64427
// exit ;
64425: GO 64447
// result := SortListByListDesc ( units , tmp ) ;
64427: LD_ADDR_VAR 0 3
64431: PUSH
64432: LD_VAR 0 1
64436: PPUSH
64437: LD_VAR 0 5
64441: PPUSH
64442: CALL_OW 77
64446: ST_TO_ADDR
// end ;
64447: LD_VAR 0 3
64451: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
64452: LD_INT 0
64454: PPUSH
64455: PPUSH
64456: PPUSH
// result := false ;
64457: LD_ADDR_VAR 0 3
64461: PUSH
64462: LD_INT 0
64464: ST_TO_ADDR
// if not building then
64465: LD_VAR 0 2
64469: NOT
64470: IFFALSE 64474
// exit ;
64472: GO 64612
// x := GetX ( building ) ;
64474: LD_ADDR_VAR 0 4
64478: PUSH
64479: LD_VAR 0 2
64483: PPUSH
64484: CALL_OW 250
64488: ST_TO_ADDR
// y := GetY ( building ) ;
64489: LD_ADDR_VAR 0 5
64493: PUSH
64494: LD_VAR 0 2
64498: PPUSH
64499: CALL_OW 251
64503: ST_TO_ADDR
// if not x or not y then
64504: LD_VAR 0 4
64508: NOT
64509: PUSH
64510: LD_VAR 0 5
64514: NOT
64515: OR
64516: IFFALSE 64520
// exit ;
64518: GO 64612
// if GetTaskList ( unit ) then
64520: LD_VAR 0 1
64524: PPUSH
64525: CALL_OW 437
64529: IFFALSE 64612
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64531: LD_STRING e
64533: PUSH
64534: LD_VAR 0 1
64538: PPUSH
64539: CALL_OW 437
64543: PUSH
64544: LD_INT 1
64546: ARRAY
64547: PUSH
64548: LD_INT 1
64550: ARRAY
64551: EQUAL
64552: PUSH
64553: LD_VAR 0 4
64557: PUSH
64558: LD_VAR 0 1
64562: PPUSH
64563: CALL_OW 437
64567: PUSH
64568: LD_INT 1
64570: ARRAY
64571: PUSH
64572: LD_INT 2
64574: ARRAY
64575: EQUAL
64576: AND
64577: PUSH
64578: LD_VAR 0 5
64582: PUSH
64583: LD_VAR 0 1
64587: PPUSH
64588: CALL_OW 437
64592: PUSH
64593: LD_INT 1
64595: ARRAY
64596: PUSH
64597: LD_INT 3
64599: ARRAY
64600: EQUAL
64601: AND
64602: IFFALSE 64612
// result := true end ;
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: LD_INT 1
64611: ST_TO_ADDR
// end ;
64612: LD_VAR 0 3
64616: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
64617: LD_INT 0
64619: PPUSH
// result := false ;
64620: LD_ADDR_VAR 0 4
64624: PUSH
64625: LD_INT 0
64627: ST_TO_ADDR
// if GetTaskList ( unit ) then
64628: LD_VAR 0 1
64632: PPUSH
64633: CALL_OW 437
64637: IFFALSE 64720
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
64639: LD_STRING M
64641: PUSH
64642: LD_VAR 0 1
64646: PPUSH
64647: CALL_OW 437
64651: PUSH
64652: LD_INT 1
64654: ARRAY
64655: PUSH
64656: LD_INT 1
64658: ARRAY
64659: EQUAL
64660: PUSH
64661: LD_VAR 0 2
64665: PUSH
64666: LD_VAR 0 1
64670: PPUSH
64671: CALL_OW 437
64675: PUSH
64676: LD_INT 1
64678: ARRAY
64679: PUSH
64680: LD_INT 2
64682: ARRAY
64683: EQUAL
64684: AND
64685: PUSH
64686: LD_VAR 0 3
64690: PUSH
64691: LD_VAR 0 1
64695: PPUSH
64696: CALL_OW 437
64700: PUSH
64701: LD_INT 1
64703: ARRAY
64704: PUSH
64705: LD_INT 3
64707: ARRAY
64708: EQUAL
64709: AND
64710: IFFALSE 64720
// result := true ;
64712: LD_ADDR_VAR 0 4
64716: PUSH
64717: LD_INT 1
64719: ST_TO_ADDR
// end ; end ;
64720: LD_VAR 0 4
64724: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
64725: LD_INT 0
64727: PPUSH
64728: PPUSH
64729: PPUSH
64730: PPUSH
// if not unit or not area then
64731: LD_VAR 0 1
64735: NOT
64736: PUSH
64737: LD_VAR 0 2
64741: NOT
64742: OR
64743: IFFALSE 64747
// exit ;
64745: GO 64923
// tmp := AreaToList ( area , i ) ;
64747: LD_ADDR_VAR 0 6
64751: PUSH
64752: LD_VAR 0 2
64756: PPUSH
64757: LD_VAR 0 5
64761: PPUSH
64762: CALL_OW 517
64766: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
64767: LD_ADDR_VAR 0 5
64771: PUSH
64772: DOUBLE
64773: LD_INT 1
64775: DEC
64776: ST_TO_ADDR
64777: LD_VAR 0 6
64781: PUSH
64782: LD_INT 1
64784: ARRAY
64785: PUSH
64786: FOR_TO
64787: IFFALSE 64921
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
64789: LD_ADDR_VAR 0 7
64793: PUSH
64794: LD_VAR 0 6
64798: PUSH
64799: LD_INT 1
64801: ARRAY
64802: PUSH
64803: LD_VAR 0 5
64807: ARRAY
64808: PUSH
64809: LD_VAR 0 6
64813: PUSH
64814: LD_INT 2
64816: ARRAY
64817: PUSH
64818: LD_VAR 0 5
64822: ARRAY
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
64828: LD_INT 92
64830: PUSH
64831: LD_VAR 0 7
64835: PUSH
64836: LD_INT 1
64838: ARRAY
64839: PUSH
64840: LD_VAR 0 7
64844: PUSH
64845: LD_INT 2
64847: ARRAY
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: PPUSH
64858: CALL_OW 69
64862: PUSH
64863: LD_INT 0
64865: EQUAL
64866: IFFALSE 64919
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
64868: LD_VAR 0 1
64872: PPUSH
64873: LD_VAR 0 7
64877: PUSH
64878: LD_INT 1
64880: ARRAY
64881: PPUSH
64882: LD_VAR 0 7
64886: PUSH
64887: LD_INT 2
64889: ARRAY
64890: PPUSH
64891: LD_VAR 0 3
64895: PPUSH
64896: CALL_OW 48
// result := IsPlaced ( unit ) ;
64900: LD_ADDR_VAR 0 4
64904: PUSH
64905: LD_VAR 0 1
64909: PPUSH
64910: CALL_OW 305
64914: ST_TO_ADDR
// exit ;
64915: POP
64916: POP
64917: GO 64923
// end ; end ;
64919: GO 64786
64921: POP
64922: POP
// end ;
64923: LD_VAR 0 4
64927: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
64928: LD_INT 0
64930: PPUSH
64931: PPUSH
64932: PPUSH
// if not side or side > 8 then
64933: LD_VAR 0 1
64937: NOT
64938: PUSH
64939: LD_VAR 0 1
64943: PUSH
64944: LD_INT 8
64946: GREATER
64947: OR
64948: IFFALSE 64952
// exit ;
64950: GO 65139
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
64952: LD_ADDR_VAR 0 4
64956: PUSH
64957: LD_INT 22
64959: PUSH
64960: LD_VAR 0 1
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 21
64971: PUSH
64972: LD_INT 3
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PPUSH
64983: CALL_OW 69
64987: ST_TO_ADDR
// if not tmp then
64988: LD_VAR 0 4
64992: NOT
64993: IFFALSE 64997
// exit ;
64995: GO 65139
// enable_addtolog := true ;
64997: LD_ADDR_OWVAR 81
65001: PUSH
65002: LD_INT 1
65004: ST_TO_ADDR
// AddToLog ( [ ) ;
65005: LD_STRING [
65007: PPUSH
65008: CALL_OW 561
// for i in tmp do
65012: LD_ADDR_VAR 0 3
65016: PUSH
65017: LD_VAR 0 4
65021: PUSH
65022: FOR_IN
65023: IFFALSE 65130
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65025: LD_STRING [
65027: PUSH
65028: LD_VAR 0 3
65032: PPUSH
65033: CALL_OW 266
65037: STR
65038: PUSH
65039: LD_STRING , 
65041: STR
65042: PUSH
65043: LD_VAR 0 3
65047: PPUSH
65048: CALL_OW 250
65052: STR
65053: PUSH
65054: LD_STRING , 
65056: STR
65057: PUSH
65058: LD_VAR 0 3
65062: PPUSH
65063: CALL_OW 251
65067: STR
65068: PUSH
65069: LD_STRING , 
65071: STR
65072: PUSH
65073: LD_VAR 0 3
65077: PPUSH
65078: CALL_OW 254
65082: STR
65083: PUSH
65084: LD_STRING , 
65086: STR
65087: PUSH
65088: LD_VAR 0 3
65092: PPUSH
65093: LD_INT 1
65095: PPUSH
65096: CALL_OW 268
65100: STR
65101: PUSH
65102: LD_STRING , 
65104: STR
65105: PUSH
65106: LD_VAR 0 3
65110: PPUSH
65111: LD_INT 2
65113: PPUSH
65114: CALL_OW 268
65118: STR
65119: PUSH
65120: LD_STRING ],
65122: STR
65123: PPUSH
65124: CALL_OW 561
// end ;
65128: GO 65022
65130: POP
65131: POP
// AddToLog ( ]; ) ;
65132: LD_STRING ];
65134: PPUSH
65135: CALL_OW 561
// end ;
65139: LD_VAR 0 2
65143: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65144: LD_INT 0
65146: PPUSH
65147: PPUSH
65148: PPUSH
65149: PPUSH
65150: PPUSH
// if not area or not rate or not max then
65151: LD_VAR 0 1
65155: NOT
65156: PUSH
65157: LD_VAR 0 2
65161: NOT
65162: OR
65163: PUSH
65164: LD_VAR 0 4
65168: NOT
65169: OR
65170: IFFALSE 65174
// exit ;
65172: GO 65363
// while 1 do
65174: LD_INT 1
65176: IFFALSE 65363
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65178: LD_ADDR_VAR 0 9
65182: PUSH
65183: LD_VAR 0 1
65187: PPUSH
65188: LD_INT 1
65190: PPUSH
65191: CALL_OW 287
65195: PUSH
65196: LD_INT 10
65198: MUL
65199: ST_TO_ADDR
// r := rate / 10 ;
65200: LD_ADDR_VAR 0 7
65204: PUSH
65205: LD_VAR 0 2
65209: PUSH
65210: LD_INT 10
65212: DIVREAL
65213: ST_TO_ADDR
// time := 1 1$00 ;
65214: LD_ADDR_VAR 0 8
65218: PUSH
65219: LD_INT 2100
65221: ST_TO_ADDR
// if amount < min then
65222: LD_VAR 0 9
65226: PUSH
65227: LD_VAR 0 3
65231: LESS
65232: IFFALSE 65250
// r := r * 2 else
65234: LD_ADDR_VAR 0 7
65238: PUSH
65239: LD_VAR 0 7
65243: PUSH
65244: LD_INT 2
65246: MUL
65247: ST_TO_ADDR
65248: GO 65276
// if amount > max then
65250: LD_VAR 0 9
65254: PUSH
65255: LD_VAR 0 4
65259: GREATER
65260: IFFALSE 65276
// r := r / 2 ;
65262: LD_ADDR_VAR 0 7
65266: PUSH
65267: LD_VAR 0 7
65271: PUSH
65272: LD_INT 2
65274: DIVREAL
65275: ST_TO_ADDR
// time := time / r ;
65276: LD_ADDR_VAR 0 8
65280: PUSH
65281: LD_VAR 0 8
65285: PUSH
65286: LD_VAR 0 7
65290: DIVREAL
65291: ST_TO_ADDR
// if time < 0 then
65292: LD_VAR 0 8
65296: PUSH
65297: LD_INT 0
65299: LESS
65300: IFFALSE 65317
// time := time * - 1 ;
65302: LD_ADDR_VAR 0 8
65306: PUSH
65307: LD_VAR 0 8
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: MUL
65316: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
65317: LD_VAR 0 8
65321: PUSH
65322: LD_INT 35
65324: PPUSH
65325: LD_INT 875
65327: PPUSH
65328: CALL_OW 12
65332: PLUS
65333: PPUSH
65334: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
65338: LD_INT 1
65340: PPUSH
65341: LD_INT 5
65343: PPUSH
65344: CALL_OW 12
65348: PPUSH
65349: LD_VAR 0 1
65353: PPUSH
65354: LD_INT 1
65356: PPUSH
65357: CALL_OW 55
// end ;
65361: GO 65174
// end ;
65363: LD_VAR 0 5
65367: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
65368: LD_INT 0
65370: PPUSH
65371: PPUSH
65372: PPUSH
65373: PPUSH
65374: PPUSH
65375: PPUSH
65376: PPUSH
65377: PPUSH
// if not turrets or not factories then
65378: LD_VAR 0 1
65382: NOT
65383: PUSH
65384: LD_VAR 0 2
65388: NOT
65389: OR
65390: IFFALSE 65394
// exit ;
65392: GO 65701
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
65394: LD_ADDR_VAR 0 10
65398: PUSH
65399: LD_INT 5
65401: PUSH
65402: LD_INT 6
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: PUSH
65412: LD_INT 4
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 3
65421: PUSH
65422: LD_INT 5
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: LIST
65433: PUSH
65434: LD_INT 24
65436: PUSH
65437: LD_INT 25
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 23
65446: PUSH
65447: LD_INT 27
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: EMPTY
65455: LIST
65456: LIST
65457: PUSH
65458: LD_INT 42
65460: PUSH
65461: LD_INT 43
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 44
65470: PUSH
65471: LD_INT 46
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: LD_INT 45
65480: PUSH
65481: LD_INT 47
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: LIST
65497: ST_TO_ADDR
// result := [ ] ;
65498: LD_ADDR_VAR 0 3
65502: PUSH
65503: EMPTY
65504: ST_TO_ADDR
// for i in turrets do
65505: LD_ADDR_VAR 0 4
65509: PUSH
65510: LD_VAR 0 1
65514: PUSH
65515: FOR_IN
65516: IFFALSE 65699
// begin nat := GetNation ( i ) ;
65518: LD_ADDR_VAR 0 7
65522: PUSH
65523: LD_VAR 0 4
65527: PPUSH
65528: CALL_OW 248
65532: ST_TO_ADDR
// weapon := 0 ;
65533: LD_ADDR_VAR 0 8
65537: PUSH
65538: LD_INT 0
65540: ST_TO_ADDR
// if not nat then
65541: LD_VAR 0 7
65545: NOT
65546: IFFALSE 65550
// continue ;
65548: GO 65515
// for j in list [ nat ] do
65550: LD_ADDR_VAR 0 5
65554: PUSH
65555: LD_VAR 0 10
65559: PUSH
65560: LD_VAR 0 7
65564: ARRAY
65565: PUSH
65566: FOR_IN
65567: IFFALSE 65608
// if GetBWeapon ( i ) = j [ 1 ] then
65569: LD_VAR 0 4
65573: PPUSH
65574: CALL_OW 269
65578: PUSH
65579: LD_VAR 0 5
65583: PUSH
65584: LD_INT 1
65586: ARRAY
65587: EQUAL
65588: IFFALSE 65606
// begin weapon := j [ 2 ] ;
65590: LD_ADDR_VAR 0 8
65594: PUSH
65595: LD_VAR 0 5
65599: PUSH
65600: LD_INT 2
65602: ARRAY
65603: ST_TO_ADDR
// break ;
65604: GO 65608
// end ;
65606: GO 65566
65608: POP
65609: POP
// if not weapon then
65610: LD_VAR 0 8
65614: NOT
65615: IFFALSE 65619
// continue ;
65617: GO 65515
// for k in factories do
65619: LD_ADDR_VAR 0 6
65623: PUSH
65624: LD_VAR 0 2
65628: PUSH
65629: FOR_IN
65630: IFFALSE 65695
// begin weapons := AvailableWeaponList ( k ) ;
65632: LD_ADDR_VAR 0 9
65636: PUSH
65637: LD_VAR 0 6
65641: PPUSH
65642: CALL_OW 478
65646: ST_TO_ADDR
// if not weapons then
65647: LD_VAR 0 9
65651: NOT
65652: IFFALSE 65656
// continue ;
65654: GO 65629
// if weapon in weapons then
65656: LD_VAR 0 8
65660: PUSH
65661: LD_VAR 0 9
65665: IN
65666: IFFALSE 65693
// begin result := [ i , weapon ] ;
65668: LD_ADDR_VAR 0 3
65672: PUSH
65673: LD_VAR 0 4
65677: PUSH
65678: LD_VAR 0 8
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: ST_TO_ADDR
// exit ;
65687: POP
65688: POP
65689: POP
65690: POP
65691: GO 65701
// end ; end ;
65693: GO 65629
65695: POP
65696: POP
// end ;
65697: GO 65515
65699: POP
65700: POP
// end ;
65701: LD_VAR 0 3
65705: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
65706: LD_INT 0
65708: PPUSH
// if not side or side > 8 then
65709: LD_VAR 0 3
65713: NOT
65714: PUSH
65715: LD_VAR 0 3
65719: PUSH
65720: LD_INT 8
65722: GREATER
65723: OR
65724: IFFALSE 65728
// exit ;
65726: GO 65787
// if not range then
65728: LD_VAR 0 4
65732: NOT
65733: IFFALSE 65744
// range := - 12 ;
65735: LD_ADDR_VAR 0 4
65739: PUSH
65740: LD_INT 12
65742: NEG
65743: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
65744: LD_VAR 0 1
65748: PPUSH
65749: LD_VAR 0 2
65753: PPUSH
65754: LD_VAR 0 3
65758: PPUSH
65759: LD_VAR 0 4
65763: PPUSH
65764: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
65768: LD_VAR 0 1
65772: PPUSH
65773: LD_VAR 0 2
65777: PPUSH
65778: LD_VAR 0 3
65782: PPUSH
65783: CALL_OW 331
// end ;
65787: LD_VAR 0 5
65791: RET
// export function Video ( mode ) ; begin
65792: LD_INT 0
65794: PPUSH
// ingame_video = mode ;
65795: LD_ADDR_OWVAR 52
65799: PUSH
65800: LD_VAR 0 1
65804: ST_TO_ADDR
// interface_hidden = mode ;
65805: LD_ADDR_OWVAR 54
65809: PUSH
65810: LD_VAR 0 1
65814: ST_TO_ADDR
// end ;
65815: LD_VAR 0 2
65819: RET
// export function Join ( array , element ) ; begin
65820: LD_INT 0
65822: PPUSH
// result := Replace ( array , array + 1 , element ) ;
65823: LD_ADDR_VAR 0 3
65827: PUSH
65828: LD_VAR 0 1
65832: PPUSH
65833: LD_VAR 0 1
65837: PUSH
65838: LD_INT 1
65840: PLUS
65841: PPUSH
65842: LD_VAR 0 2
65846: PPUSH
65847: CALL_OW 1
65851: ST_TO_ADDR
// end ;
65852: LD_VAR 0 3
65856: RET
// export function JoinUnion ( array , element ) ; begin
65857: LD_INT 0
65859: PPUSH
// result := array union element ;
65860: LD_ADDR_VAR 0 3
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: LD_VAR 0 2
65874: UNION
65875: ST_TO_ADDR
// end ;
65876: LD_VAR 0 3
65880: RET
// export function GetBehemoths ( side ) ; begin
65881: LD_INT 0
65883: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
65884: LD_ADDR_VAR 0 2
65888: PUSH
65889: LD_INT 22
65891: PUSH
65892: LD_VAR 0 1
65896: PUSH
65897: EMPTY
65898: LIST
65899: LIST
65900: PUSH
65901: LD_INT 31
65903: PUSH
65904: LD_INT 25
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PPUSH
65915: CALL_OW 69
65919: ST_TO_ADDR
// end ;
65920: LD_VAR 0 2
65924: RET
// export function Shuffle ( array ) ; var i , index ; begin
65925: LD_INT 0
65927: PPUSH
65928: PPUSH
65929: PPUSH
// result := [ ] ;
65930: LD_ADDR_VAR 0 2
65934: PUSH
65935: EMPTY
65936: ST_TO_ADDR
// if not array then
65937: LD_VAR 0 1
65941: NOT
65942: IFFALSE 65946
// exit ;
65944: GO 66045
// Randomize ;
65946: CALL_OW 10
// for i = array downto 1 do
65950: LD_ADDR_VAR 0 3
65954: PUSH
65955: DOUBLE
65956: LD_VAR 0 1
65960: INC
65961: ST_TO_ADDR
65962: LD_INT 1
65964: PUSH
65965: FOR_DOWNTO
65966: IFFALSE 66043
// begin index := rand ( 1 , array ) ;
65968: LD_ADDR_VAR 0 4
65972: PUSH
65973: LD_INT 1
65975: PPUSH
65976: LD_VAR 0 1
65980: PPUSH
65981: CALL_OW 12
65985: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
65986: LD_ADDR_VAR 0 2
65990: PUSH
65991: LD_VAR 0 2
65995: PPUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 1
66003: PLUS
66004: PPUSH
66005: LD_VAR 0 1
66009: PUSH
66010: LD_VAR 0 4
66014: ARRAY
66015: PPUSH
66016: CALL_OW 2
66020: ST_TO_ADDR
// array := Delete ( array , index ) ;
66021: LD_ADDR_VAR 0 1
66025: PUSH
66026: LD_VAR 0 1
66030: PPUSH
66031: LD_VAR 0 4
66035: PPUSH
66036: CALL_OW 3
66040: ST_TO_ADDR
// end ;
66041: GO 65965
66043: POP
66044: POP
// end ;
66045: LD_VAR 0 2
66049: RET
// export function GetBaseMaterials ( base ) ; begin
66050: LD_INT 0
66052: PPUSH
// result := [ 0 , 0 , 0 ] ;
66053: LD_ADDR_VAR 0 2
66057: PUSH
66058: LD_INT 0
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: LIST
66071: ST_TO_ADDR
// if not base then
66072: LD_VAR 0 1
66076: NOT
66077: IFFALSE 66081
// exit ;
66079: GO 66130
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66081: LD_ADDR_VAR 0 2
66085: PUSH
66086: LD_VAR 0 1
66090: PPUSH
66091: LD_INT 1
66093: PPUSH
66094: CALL_OW 275
66098: PUSH
66099: LD_VAR 0 1
66103: PPUSH
66104: LD_INT 2
66106: PPUSH
66107: CALL_OW 275
66111: PUSH
66112: LD_VAR 0 1
66116: PPUSH
66117: LD_INT 3
66119: PPUSH
66120: CALL_OW 275
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: LIST
66129: ST_TO_ADDR
// end ;
66130: LD_VAR 0 2
66134: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66135: LD_INT 0
66137: PPUSH
66138: PPUSH
// result := array ;
66139: LD_ADDR_VAR 0 3
66143: PUSH
66144: LD_VAR 0 1
66148: ST_TO_ADDR
// if size >= result then
66149: LD_VAR 0 2
66153: PUSH
66154: LD_VAR 0 3
66158: GREATEREQUAL
66159: IFFALSE 66163
// exit ;
66161: GO 66213
// if size then
66163: LD_VAR 0 2
66167: IFFALSE 66213
// for i := array downto size do
66169: LD_ADDR_VAR 0 4
66173: PUSH
66174: DOUBLE
66175: LD_VAR 0 1
66179: INC
66180: ST_TO_ADDR
66181: LD_VAR 0 2
66185: PUSH
66186: FOR_DOWNTO
66187: IFFALSE 66211
// result := Delete ( result , result ) ;
66189: LD_ADDR_VAR 0 3
66193: PUSH
66194: LD_VAR 0 3
66198: PPUSH
66199: LD_VAR 0 3
66203: PPUSH
66204: CALL_OW 3
66208: ST_TO_ADDR
66209: GO 66186
66211: POP
66212: POP
// end ;
66213: LD_VAR 0 3
66217: RET
// export function ComExit ( unit ) ; var tmp ; begin
66218: LD_INT 0
66220: PPUSH
66221: PPUSH
// if not IsInUnit ( unit ) then
66222: LD_VAR 0 1
66226: PPUSH
66227: CALL_OW 310
66231: NOT
66232: IFFALSE 66236
// exit ;
66234: GO 66296
// tmp := IsInUnit ( unit ) ;
66236: LD_ADDR_VAR 0 3
66240: PUSH
66241: LD_VAR 0 1
66245: PPUSH
66246: CALL_OW 310
66250: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66251: LD_VAR 0 3
66255: PPUSH
66256: CALL_OW 247
66260: PUSH
66261: LD_INT 2
66263: EQUAL
66264: IFFALSE 66277
// ComExitVehicle ( unit ) else
66266: LD_VAR 0 1
66270: PPUSH
66271: CALL_OW 121
66275: GO 66286
// ComExitBuilding ( unit ) ;
66277: LD_VAR 0 1
66281: PPUSH
66282: CALL_OW 122
// result := tmp ;
66286: LD_ADDR_VAR 0 2
66290: PUSH
66291: LD_VAR 0 3
66295: ST_TO_ADDR
// end ;
66296: LD_VAR 0 2
66300: RET
// export function ComExitAll ( units ) ; var i ; begin
66301: LD_INT 0
66303: PPUSH
66304: PPUSH
// if not units then
66305: LD_VAR 0 1
66309: NOT
66310: IFFALSE 66314
// exit ;
66312: GO 66340
// for i in units do
66314: LD_ADDR_VAR 0 3
66318: PUSH
66319: LD_VAR 0 1
66323: PUSH
66324: FOR_IN
66325: IFFALSE 66338
// ComExit ( i ) ;
66327: LD_VAR 0 3
66331: PPUSH
66332: CALL 66218 0 1
66336: GO 66324
66338: POP
66339: POP
// end ;
66340: LD_VAR 0 2
66344: RET
// export function ResetHc ; begin
66345: LD_INT 0
66347: PPUSH
// InitHc ;
66348: CALL_OW 19
// hc_importance := 0 ;
66352: LD_ADDR_OWVAR 32
66356: PUSH
66357: LD_INT 0
66359: ST_TO_ADDR
// end ;
66360: LD_VAR 0 1
66364: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
66365: LD_INT 0
66367: PPUSH
66368: PPUSH
66369: PPUSH
// _x := ( x1 + x2 ) div 2 ;
66370: LD_ADDR_VAR 0 6
66374: PUSH
66375: LD_VAR 0 1
66379: PUSH
66380: LD_VAR 0 3
66384: PLUS
66385: PUSH
66386: LD_INT 2
66388: DIV
66389: ST_TO_ADDR
// if _x < 0 then
66390: LD_VAR 0 6
66394: PUSH
66395: LD_INT 0
66397: LESS
66398: IFFALSE 66415
// _x := _x * - 1 ;
66400: LD_ADDR_VAR 0 6
66404: PUSH
66405: LD_VAR 0 6
66409: PUSH
66410: LD_INT 1
66412: NEG
66413: MUL
66414: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
66415: LD_ADDR_VAR 0 7
66419: PUSH
66420: LD_VAR 0 2
66424: PUSH
66425: LD_VAR 0 4
66429: PLUS
66430: PUSH
66431: LD_INT 2
66433: DIV
66434: ST_TO_ADDR
// if _y < 0 then
66435: LD_VAR 0 7
66439: PUSH
66440: LD_INT 0
66442: LESS
66443: IFFALSE 66460
// _y := _y * - 1 ;
66445: LD_ADDR_VAR 0 7
66449: PUSH
66450: LD_VAR 0 7
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: MUL
66459: ST_TO_ADDR
// result := [ _x , _y ] ;
66460: LD_ADDR_VAR 0 5
66464: PUSH
66465: LD_VAR 0 6
66469: PUSH
66470: LD_VAR 0 7
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: ST_TO_ADDR
// end ;
66479: LD_VAR 0 5
66483: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
66484: LD_INT 0
66486: PPUSH
66487: PPUSH
66488: PPUSH
66489: PPUSH
// task := GetTaskList ( unit ) ;
66490: LD_ADDR_VAR 0 7
66494: PUSH
66495: LD_VAR 0 1
66499: PPUSH
66500: CALL_OW 437
66504: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
66505: LD_VAR 0 7
66509: NOT
66510: PUSH
66511: LD_VAR 0 1
66515: PPUSH
66516: LD_VAR 0 2
66520: PPUSH
66521: CALL_OW 308
66525: NOT
66526: AND
66527: IFFALSE 66531
// exit ;
66529: GO 66649
// if IsInArea ( unit , area ) then
66531: LD_VAR 0 1
66535: PPUSH
66536: LD_VAR 0 2
66540: PPUSH
66541: CALL_OW 308
66545: IFFALSE 66563
// begin ComMoveToArea ( unit , goAway ) ;
66547: LD_VAR 0 1
66551: PPUSH
66552: LD_VAR 0 3
66556: PPUSH
66557: CALL_OW 113
// exit ;
66561: GO 66649
// end ; if task [ 1 ] [ 1 ] <> M then
66563: LD_VAR 0 7
66567: PUSH
66568: LD_INT 1
66570: ARRAY
66571: PUSH
66572: LD_INT 1
66574: ARRAY
66575: PUSH
66576: LD_STRING M
66578: NONEQUAL
66579: IFFALSE 66583
// exit ;
66581: GO 66649
// x := task [ 1 ] [ 2 ] ;
66583: LD_ADDR_VAR 0 5
66587: PUSH
66588: LD_VAR 0 7
66592: PUSH
66593: LD_INT 1
66595: ARRAY
66596: PUSH
66597: LD_INT 2
66599: ARRAY
66600: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
66601: LD_ADDR_VAR 0 6
66605: PUSH
66606: LD_VAR 0 7
66610: PUSH
66611: LD_INT 1
66613: ARRAY
66614: PUSH
66615: LD_INT 3
66617: ARRAY
66618: ST_TO_ADDR
// if InArea ( x , y , area ) then
66619: LD_VAR 0 5
66623: PPUSH
66624: LD_VAR 0 6
66628: PPUSH
66629: LD_VAR 0 2
66633: PPUSH
66634: CALL_OW 309
66638: IFFALSE 66649
// ComStop ( unit ) ;
66640: LD_VAR 0 1
66644: PPUSH
66645: CALL_OW 141
// end ;
66649: LD_VAR 0 4
66653: RET
// export function Abs ( value ) ; begin
66654: LD_INT 0
66656: PPUSH
// result := value ;
66657: LD_ADDR_VAR 0 2
66661: PUSH
66662: LD_VAR 0 1
66666: ST_TO_ADDR
// if value < 0 then
66667: LD_VAR 0 1
66671: PUSH
66672: LD_INT 0
66674: LESS
66675: IFFALSE 66692
// result := value * - 1 ;
66677: LD_ADDR_VAR 0 2
66681: PUSH
66682: LD_VAR 0 1
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: MUL
66691: ST_TO_ADDR
// end ;
66692: LD_VAR 0 2
66696: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
66697: LD_INT 0
66699: PPUSH
66700: PPUSH
66701: PPUSH
66702: PPUSH
66703: PPUSH
66704: PPUSH
66705: PPUSH
66706: PPUSH
// if not unit or not building then
66707: LD_VAR 0 1
66711: NOT
66712: PUSH
66713: LD_VAR 0 2
66717: NOT
66718: OR
66719: IFFALSE 66723
// exit ;
66721: GO 66949
// x := GetX ( building ) ;
66723: LD_ADDR_VAR 0 4
66727: PUSH
66728: LD_VAR 0 2
66732: PPUSH
66733: CALL_OW 250
66737: ST_TO_ADDR
// y := GetY ( building ) ;
66738: LD_ADDR_VAR 0 6
66742: PUSH
66743: LD_VAR 0 2
66747: PPUSH
66748: CALL_OW 251
66752: ST_TO_ADDR
// d := GetDir ( building ) ;
66753: LD_ADDR_VAR 0 8
66757: PUSH
66758: LD_VAR 0 2
66762: PPUSH
66763: CALL_OW 254
66767: ST_TO_ADDR
// r := 4 ;
66768: LD_ADDR_VAR 0 9
66772: PUSH
66773: LD_INT 4
66775: ST_TO_ADDR
// for i := 1 to 5 do
66776: LD_ADDR_VAR 0 10
66780: PUSH
66781: DOUBLE
66782: LD_INT 1
66784: DEC
66785: ST_TO_ADDR
66786: LD_INT 5
66788: PUSH
66789: FOR_TO
66790: IFFALSE 66947
// begin _x := ShiftX ( x , d , r + i ) ;
66792: LD_ADDR_VAR 0 5
66796: PUSH
66797: LD_VAR 0 4
66801: PPUSH
66802: LD_VAR 0 8
66806: PPUSH
66807: LD_VAR 0 9
66811: PUSH
66812: LD_VAR 0 10
66816: PLUS
66817: PPUSH
66818: CALL_OW 272
66822: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
66823: LD_ADDR_VAR 0 7
66827: PUSH
66828: LD_VAR 0 6
66832: PPUSH
66833: LD_VAR 0 8
66837: PPUSH
66838: LD_VAR 0 9
66842: PUSH
66843: LD_VAR 0 10
66847: PLUS
66848: PPUSH
66849: CALL_OW 273
66853: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
66854: LD_VAR 0 5
66858: PPUSH
66859: LD_VAR 0 7
66863: PPUSH
66864: CALL_OW 488
66868: PUSH
66869: LD_VAR 0 5
66873: PPUSH
66874: LD_VAR 0 7
66878: PPUSH
66879: CALL_OW 428
66883: PPUSH
66884: CALL_OW 247
66888: PUSH
66889: LD_INT 3
66891: PUSH
66892: LD_INT 2
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: IN
66899: NOT
66900: AND
66901: IFFALSE 66945
// begin ComMoveXY ( unit , _x , _y ) ;
66903: LD_VAR 0 1
66907: PPUSH
66908: LD_VAR 0 5
66912: PPUSH
66913: LD_VAR 0 7
66917: PPUSH
66918: CALL_OW 111
// result := [ _x , _y ] ;
66922: LD_ADDR_VAR 0 3
66926: PUSH
66927: LD_VAR 0 5
66931: PUSH
66932: LD_VAR 0 7
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: ST_TO_ADDR
// exit ;
66941: POP
66942: POP
66943: GO 66949
// end ; end ;
66945: GO 66789
66947: POP
66948: POP
// end ;
66949: LD_VAR 0 3
66953: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
66954: LD_INT 0
66956: PPUSH
66957: PPUSH
66958: PPUSH
// result := 0 ;
66959: LD_ADDR_VAR 0 3
66963: PUSH
66964: LD_INT 0
66966: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
66967: LD_VAR 0 1
66971: PUSH
66972: LD_INT 0
66974: LESS
66975: PUSH
66976: LD_VAR 0 1
66980: PUSH
66981: LD_INT 8
66983: GREATER
66984: OR
66985: PUSH
66986: LD_VAR 0 2
66990: PUSH
66991: LD_INT 0
66993: LESS
66994: OR
66995: PUSH
66996: LD_VAR 0 2
67000: PUSH
67001: LD_INT 8
67003: GREATER
67004: OR
67005: IFFALSE 67009
// exit ;
67007: GO 67084
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67009: LD_ADDR_VAR 0 4
67013: PUSH
67014: LD_INT 22
67016: PUSH
67017: LD_VAR 0 2
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PPUSH
67026: CALL_OW 69
67030: PUSH
67031: FOR_IN
67032: IFFALSE 67082
// begin un := UnitShoot ( i ) ;
67034: LD_ADDR_VAR 0 5
67038: PUSH
67039: LD_VAR 0 4
67043: PPUSH
67044: CALL_OW 504
67048: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67049: LD_VAR 0 5
67053: PPUSH
67054: CALL_OW 255
67058: PUSH
67059: LD_VAR 0 1
67063: EQUAL
67064: IFFALSE 67080
// begin result := un ;
67066: LD_ADDR_VAR 0 3
67070: PUSH
67071: LD_VAR 0 5
67075: ST_TO_ADDR
// exit ;
67076: POP
67077: POP
67078: GO 67084
// end ; end ;
67080: GO 67031
67082: POP
67083: POP
// end ;
67084: LD_VAR 0 3
67088: RET
// export function GetCargoBay ( units ) ; begin
67089: LD_INT 0
67091: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67092: LD_ADDR_VAR 0 2
67096: PUSH
67097: LD_VAR 0 1
67101: PPUSH
67102: LD_INT 2
67104: PUSH
67105: LD_INT 34
67107: PUSH
67108: LD_INT 12
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 34
67117: PUSH
67118: LD_INT 51
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 34
67127: PUSH
67128: LD_INT 32
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 34
67137: PUSH
67138: LD_INT 89
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: LIST
67150: LIST
67151: PPUSH
67152: CALL_OW 72
67156: ST_TO_ADDR
// end ;
67157: LD_VAR 0 2
67161: RET
// export function Negate ( value ) ; begin
67162: LD_INT 0
67164: PPUSH
// result := not value ;
67165: LD_ADDR_VAR 0 2
67169: PUSH
67170: LD_VAR 0 1
67174: NOT
67175: ST_TO_ADDR
// end ;
67176: LD_VAR 0 2
67180: RET
// export function Inc ( value ) ; begin
67181: LD_INT 0
67183: PPUSH
// result := value + 1 ;
67184: LD_ADDR_VAR 0 2
67188: PUSH
67189: LD_VAR 0 1
67193: PUSH
67194: LD_INT 1
67196: PLUS
67197: ST_TO_ADDR
// end ;
67198: LD_VAR 0 2
67202: RET
// export function Dec ( value ) ; begin
67203: LD_INT 0
67205: PPUSH
// result := value - 1 ;
67206: LD_ADDR_VAR 0 2
67210: PUSH
67211: LD_VAR 0 1
67215: PUSH
67216: LD_INT 1
67218: MINUS
67219: ST_TO_ADDR
// end ;
67220: LD_VAR 0 2
67224: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67225: LD_INT 0
67227: PPUSH
67228: PPUSH
67229: PPUSH
67230: PPUSH
67231: PPUSH
67232: PPUSH
67233: PPUSH
67234: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67235: LD_VAR 0 1
67239: PPUSH
67240: LD_VAR 0 2
67244: PPUSH
67245: CALL_OW 488
67249: NOT
67250: PUSH
67251: LD_VAR 0 3
67255: PPUSH
67256: LD_VAR 0 4
67260: PPUSH
67261: CALL_OW 488
67265: NOT
67266: OR
67267: IFFALSE 67280
// begin result := - 1 ;
67269: LD_ADDR_VAR 0 5
67273: PUSH
67274: LD_INT 1
67276: NEG
67277: ST_TO_ADDR
// exit ;
67278: GO 67515
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67280: LD_ADDR_VAR 0 12
67284: PUSH
67285: LD_VAR 0 1
67289: PPUSH
67290: LD_VAR 0 2
67294: PPUSH
67295: LD_VAR 0 3
67299: PPUSH
67300: LD_VAR 0 4
67304: PPUSH
67305: CALL 66365 0 4
67309: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
67310: LD_ADDR_VAR 0 11
67314: PUSH
67315: LD_VAR 0 1
67319: PPUSH
67320: LD_VAR 0 2
67324: PPUSH
67325: LD_VAR 0 12
67329: PUSH
67330: LD_INT 1
67332: ARRAY
67333: PPUSH
67334: LD_VAR 0 12
67338: PUSH
67339: LD_INT 2
67341: ARRAY
67342: PPUSH
67343: CALL_OW 298
67347: ST_TO_ADDR
// distance := 9999 ;
67348: LD_ADDR_VAR 0 10
67352: PUSH
67353: LD_INT 9999
67355: ST_TO_ADDR
// for i := 0 to 5 do
67356: LD_ADDR_VAR 0 6
67360: PUSH
67361: DOUBLE
67362: LD_INT 0
67364: DEC
67365: ST_TO_ADDR
67366: LD_INT 5
67368: PUSH
67369: FOR_TO
67370: IFFALSE 67513
// begin _x := ShiftX ( x1 , i , centerDist ) ;
67372: LD_ADDR_VAR 0 7
67376: PUSH
67377: LD_VAR 0 1
67381: PPUSH
67382: LD_VAR 0 6
67386: PPUSH
67387: LD_VAR 0 11
67391: PPUSH
67392: CALL_OW 272
67396: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
67397: LD_ADDR_VAR 0 8
67401: PUSH
67402: LD_VAR 0 2
67406: PPUSH
67407: LD_VAR 0 6
67411: PPUSH
67412: LD_VAR 0 11
67416: PPUSH
67417: CALL_OW 273
67421: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
67422: LD_VAR 0 7
67426: PPUSH
67427: LD_VAR 0 8
67431: PPUSH
67432: CALL_OW 488
67436: NOT
67437: IFFALSE 67441
// continue ;
67439: GO 67369
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
67441: LD_ADDR_VAR 0 9
67445: PUSH
67446: LD_VAR 0 12
67450: PUSH
67451: LD_INT 1
67453: ARRAY
67454: PPUSH
67455: LD_VAR 0 12
67459: PUSH
67460: LD_INT 2
67462: ARRAY
67463: PPUSH
67464: LD_VAR 0 7
67468: PPUSH
67469: LD_VAR 0 8
67473: PPUSH
67474: CALL_OW 298
67478: ST_TO_ADDR
// if tmp < distance then
67479: LD_VAR 0 9
67483: PUSH
67484: LD_VAR 0 10
67488: LESS
67489: IFFALSE 67511
// begin result := i ;
67491: LD_ADDR_VAR 0 5
67495: PUSH
67496: LD_VAR 0 6
67500: ST_TO_ADDR
// distance := tmp ;
67501: LD_ADDR_VAR 0 10
67505: PUSH
67506: LD_VAR 0 9
67510: ST_TO_ADDR
// end ; end ;
67511: GO 67369
67513: POP
67514: POP
// end ;
67515: LD_VAR 0 5
67519: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67520: LD_INT 0
67522: PPUSH
67523: PPUSH
// if not driver or not IsInUnit ( driver ) then
67524: LD_VAR 0 1
67528: NOT
67529: PUSH
67530: LD_VAR 0 1
67534: PPUSH
67535: CALL_OW 310
67539: NOT
67540: OR
67541: IFFALSE 67545
// exit ;
67543: GO 67635
// vehicle := IsInUnit ( driver ) ;
67545: LD_ADDR_VAR 0 3
67549: PUSH
67550: LD_VAR 0 1
67554: PPUSH
67555: CALL_OW 310
67559: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67560: LD_VAR 0 1
67564: PPUSH
67565: LD_STRING \
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 0
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: LD_INT 0
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: PUSH
67595: LD_STRING E
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_VAR 0 3
67608: PUSH
67609: LD_INT 0
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PPUSH
67631: CALL_OW 446
// end ;
67635: LD_VAR 0 2
67639: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
67640: LD_INT 0
67642: PPUSH
67643: PPUSH
// if not driver or not IsInUnit ( driver ) then
67644: LD_VAR 0 1
67648: NOT
67649: PUSH
67650: LD_VAR 0 1
67654: PPUSH
67655: CALL_OW 310
67659: NOT
67660: OR
67661: IFFALSE 67665
// exit ;
67663: GO 67755
// vehicle := IsInUnit ( driver ) ;
67665: LD_ADDR_VAR 0 3
67669: PUSH
67670: LD_VAR 0 1
67674: PPUSH
67675: CALL_OW 310
67679: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
67680: LD_VAR 0 1
67684: PPUSH
67685: LD_STRING \
67687: PUSH
67688: LD_INT 0
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: LD_INT 0
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 0
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: LIST
67711: LIST
67712: LIST
67713: LIST
67714: PUSH
67715: LD_STRING E
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: LD_INT 0
67723: PUSH
67724: LD_VAR 0 3
67728: PUSH
67729: LD_INT 0
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: LD_INT 0
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PPUSH
67751: CALL_OW 447
// end ;
67755: LD_VAR 0 2
67759: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
67760: LD_INT 0
67762: PPUSH
67763: PPUSH
67764: PPUSH
// tmp := [ ] ;
67765: LD_ADDR_VAR 0 5
67769: PUSH
67770: EMPTY
67771: ST_TO_ADDR
// for i in units do
67772: LD_ADDR_VAR 0 4
67776: PUSH
67777: LD_VAR 0 1
67781: PUSH
67782: FOR_IN
67783: IFFALSE 67821
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
67785: LD_ADDR_VAR 0 5
67789: PUSH
67790: LD_VAR 0 5
67794: PPUSH
67795: LD_VAR 0 5
67799: PUSH
67800: LD_INT 1
67802: PLUS
67803: PPUSH
67804: LD_VAR 0 4
67808: PPUSH
67809: CALL_OW 256
67813: PPUSH
67814: CALL_OW 2
67818: ST_TO_ADDR
67819: GO 67782
67821: POP
67822: POP
// if not tmp then
67823: LD_VAR 0 5
67827: NOT
67828: IFFALSE 67832
// exit ;
67830: GO 67880
// if asc then
67832: LD_VAR 0 2
67836: IFFALSE 67860
// result := SortListByListAsc ( units , tmp ) else
67838: LD_ADDR_VAR 0 3
67842: PUSH
67843: LD_VAR 0 1
67847: PPUSH
67848: LD_VAR 0 5
67852: PPUSH
67853: CALL_OW 76
67857: ST_TO_ADDR
67858: GO 67880
// result := SortListByListDesc ( units , tmp ) ;
67860: LD_ADDR_VAR 0 3
67864: PUSH
67865: LD_VAR 0 1
67869: PPUSH
67870: LD_VAR 0 5
67874: PPUSH
67875: CALL_OW 77
67879: ST_TO_ADDR
// end ;
67880: LD_VAR 0 3
67884: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
67885: LD_INT 0
67887: PPUSH
67888: PPUSH
// task := GetTaskList ( mech ) ;
67889: LD_ADDR_VAR 0 4
67893: PUSH
67894: LD_VAR 0 1
67898: PPUSH
67899: CALL_OW 437
67903: ST_TO_ADDR
// if not task then
67904: LD_VAR 0 4
67908: NOT
67909: IFFALSE 67913
// exit ;
67911: GO 67955
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
67913: LD_ADDR_VAR 0 3
67917: PUSH
67918: LD_VAR 0 4
67922: PUSH
67923: LD_INT 1
67925: ARRAY
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PUSH
67931: LD_STRING r
67933: EQUAL
67934: PUSH
67935: LD_VAR 0 4
67939: PUSH
67940: LD_INT 1
67942: ARRAY
67943: PUSH
67944: LD_INT 4
67946: ARRAY
67947: PUSH
67948: LD_VAR 0 2
67952: EQUAL
67953: AND
67954: ST_TO_ADDR
// end ;
67955: LD_VAR 0 3
67959: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
67960: LD_INT 0
67962: PPUSH
// SetDir ( unit , d ) ;
67963: LD_VAR 0 1
67967: PPUSH
67968: LD_VAR 0 4
67972: PPUSH
67973: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
67977: LD_VAR 0 1
67981: PPUSH
67982: LD_VAR 0 2
67986: PPUSH
67987: LD_VAR 0 3
67991: PPUSH
67992: LD_VAR 0 5
67996: PPUSH
67997: CALL_OW 48
// end ;
68001: LD_VAR 0 6
68005: RET
// export function ToNaturalNumber ( number ) ; begin
68006: LD_INT 0
68008: PPUSH
// result := number div 1 ;
68009: LD_ADDR_VAR 0 2
68013: PUSH
68014: LD_VAR 0 1
68018: PUSH
68019: LD_INT 1
68021: DIV
68022: ST_TO_ADDR
// if number < 0 then
68023: LD_VAR 0 1
68027: PUSH
68028: LD_INT 0
68030: LESS
68031: IFFALSE 68041
// result := 0 ;
68033: LD_ADDR_VAR 0 2
68037: PUSH
68038: LD_INT 0
68040: ST_TO_ADDR
// end ;
68041: LD_VAR 0 2
68045: RET
// export function SortByClass ( units , class ) ; var un ; begin
68046: LD_INT 0
68048: PPUSH
68049: PPUSH
// if not units or not class then
68050: LD_VAR 0 1
68054: NOT
68055: PUSH
68056: LD_VAR 0 2
68060: NOT
68061: OR
68062: IFFALSE 68066
// exit ;
68064: GO 68161
// result := [ ] ;
68066: LD_ADDR_VAR 0 3
68070: PUSH
68071: EMPTY
68072: ST_TO_ADDR
// for un in units do
68073: LD_ADDR_VAR 0 4
68077: PUSH
68078: LD_VAR 0 1
68082: PUSH
68083: FOR_IN
68084: IFFALSE 68159
// if GetClass ( un ) = class then
68086: LD_VAR 0 4
68090: PPUSH
68091: CALL_OW 257
68095: PUSH
68096: LD_VAR 0 2
68100: EQUAL
68101: IFFALSE 68128
// result := Insert ( result , 1 , un ) else
68103: LD_ADDR_VAR 0 3
68107: PUSH
68108: LD_VAR 0 3
68112: PPUSH
68113: LD_INT 1
68115: PPUSH
68116: LD_VAR 0 4
68120: PPUSH
68121: CALL_OW 2
68125: ST_TO_ADDR
68126: GO 68157
// result := Replace ( result , result + 1 , un ) ;
68128: LD_ADDR_VAR 0 3
68132: PUSH
68133: LD_VAR 0 3
68137: PPUSH
68138: LD_VAR 0 3
68142: PUSH
68143: LD_INT 1
68145: PLUS
68146: PPUSH
68147: LD_VAR 0 4
68151: PPUSH
68152: CALL_OW 1
68156: ST_TO_ADDR
68157: GO 68083
68159: POP
68160: POP
// end ;
68161: LD_VAR 0 3
68165: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68166: LD_INT 0
68168: PPUSH
68169: PPUSH
68170: PPUSH
68171: PPUSH
68172: PPUSH
68173: PPUSH
68174: PPUSH
// result := [ ] ;
68175: LD_ADDR_VAR 0 4
68179: PUSH
68180: EMPTY
68181: ST_TO_ADDR
// if x - r < 0 then
68182: LD_VAR 0 1
68186: PUSH
68187: LD_VAR 0 3
68191: MINUS
68192: PUSH
68193: LD_INT 0
68195: LESS
68196: IFFALSE 68208
// min_x := 0 else
68198: LD_ADDR_VAR 0 8
68202: PUSH
68203: LD_INT 0
68205: ST_TO_ADDR
68206: GO 68224
// min_x := x - r ;
68208: LD_ADDR_VAR 0 8
68212: PUSH
68213: LD_VAR 0 1
68217: PUSH
68218: LD_VAR 0 3
68222: MINUS
68223: ST_TO_ADDR
// if y - r < 0 then
68224: LD_VAR 0 2
68228: PUSH
68229: LD_VAR 0 3
68233: MINUS
68234: PUSH
68235: LD_INT 0
68237: LESS
68238: IFFALSE 68250
// min_y := 0 else
68240: LD_ADDR_VAR 0 7
68244: PUSH
68245: LD_INT 0
68247: ST_TO_ADDR
68248: GO 68266
// min_y := y - r ;
68250: LD_ADDR_VAR 0 7
68254: PUSH
68255: LD_VAR 0 2
68259: PUSH
68260: LD_VAR 0 3
68264: MINUS
68265: ST_TO_ADDR
// max_x := x + r ;
68266: LD_ADDR_VAR 0 9
68270: PUSH
68271: LD_VAR 0 1
68275: PUSH
68276: LD_VAR 0 3
68280: PLUS
68281: ST_TO_ADDR
// max_y := y + r ;
68282: LD_ADDR_VAR 0 10
68286: PUSH
68287: LD_VAR 0 2
68291: PUSH
68292: LD_VAR 0 3
68296: PLUS
68297: ST_TO_ADDR
// for _x = min_x to max_x do
68298: LD_ADDR_VAR 0 5
68302: PUSH
68303: DOUBLE
68304: LD_VAR 0 8
68308: DEC
68309: ST_TO_ADDR
68310: LD_VAR 0 9
68314: PUSH
68315: FOR_TO
68316: IFFALSE 68417
// for _y = min_y to max_y do
68318: LD_ADDR_VAR 0 6
68322: PUSH
68323: DOUBLE
68324: LD_VAR 0 7
68328: DEC
68329: ST_TO_ADDR
68330: LD_VAR 0 10
68334: PUSH
68335: FOR_TO
68336: IFFALSE 68413
// begin if not ValidHex ( _x , _y ) then
68338: LD_VAR 0 5
68342: PPUSH
68343: LD_VAR 0 6
68347: PPUSH
68348: CALL_OW 488
68352: NOT
68353: IFFALSE 68357
// continue ;
68355: GO 68335
// if GetResourceTypeXY ( _x , _y ) then
68357: LD_VAR 0 5
68361: PPUSH
68362: LD_VAR 0 6
68366: PPUSH
68367: CALL_OW 283
68371: IFFALSE 68411
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
68373: LD_ADDR_VAR 0 4
68377: PUSH
68378: LD_VAR 0 4
68382: PPUSH
68383: LD_VAR 0 4
68387: PUSH
68388: LD_INT 1
68390: PLUS
68391: PPUSH
68392: LD_VAR 0 5
68396: PUSH
68397: LD_VAR 0 6
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PPUSH
68406: CALL_OW 1
68410: ST_TO_ADDR
// end ;
68411: GO 68335
68413: POP
68414: POP
68415: GO 68315
68417: POP
68418: POP
// end ;
68419: LD_VAR 0 4
68423: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
68424: LD_INT 0
68426: PPUSH
68427: PPUSH
68428: PPUSH
68429: PPUSH
68430: PPUSH
68431: PPUSH
68432: PPUSH
68433: PPUSH
// if not units then
68434: LD_VAR 0 1
68438: NOT
68439: IFFALSE 68443
// exit ;
68441: GO 68967
// result := UnitFilter ( units , [ f_ok ] ) ;
68443: LD_ADDR_VAR 0 3
68447: PUSH
68448: LD_VAR 0 1
68452: PPUSH
68453: LD_INT 50
68455: PUSH
68456: EMPTY
68457: LIST
68458: PPUSH
68459: CALL_OW 72
68463: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
68464: LD_ADDR_VAR 0 8
68468: PUSH
68469: LD_VAR 0 1
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PPUSH
68478: CALL_OW 255
68482: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
68483: LD_ADDR_VAR 0 10
68487: PUSH
68488: LD_INT 29
68490: PUSH
68491: LD_INT 91
68493: PUSH
68494: LD_INT 49
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: LIST
68501: ST_TO_ADDR
// if not result then
68502: LD_VAR 0 3
68506: NOT
68507: IFFALSE 68511
// exit ;
68509: GO 68967
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
68511: LD_ADDR_VAR 0 5
68515: PUSH
68516: LD_INT 81
68518: PUSH
68519: LD_VAR 0 8
68523: PUSH
68524: EMPTY
68525: LIST
68526: LIST
68527: PPUSH
68528: CALL_OW 69
68532: ST_TO_ADDR
// for i in result do
68533: LD_ADDR_VAR 0 4
68537: PUSH
68538: LD_VAR 0 3
68542: PUSH
68543: FOR_IN
68544: IFFALSE 68965
// begin tag := GetTag ( i ) + 1 ;
68546: LD_ADDR_VAR 0 9
68550: PUSH
68551: LD_VAR 0 4
68555: PPUSH
68556: CALL_OW 110
68560: PUSH
68561: LD_INT 1
68563: PLUS
68564: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
68565: LD_ADDR_VAR 0 7
68569: PUSH
68570: LD_VAR 0 4
68574: PPUSH
68575: CALL_OW 250
68579: PPUSH
68580: LD_VAR 0 4
68584: PPUSH
68585: CALL_OW 251
68589: PPUSH
68590: LD_INT 6
68592: PPUSH
68593: CALL 68166 0 3
68597: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
68598: LD_VAR 0 4
68602: PPUSH
68603: CALL_OW 247
68607: PUSH
68608: LD_INT 2
68610: EQUAL
68611: PUSH
68612: LD_VAR 0 7
68616: AND
68617: PUSH
68618: LD_VAR 0 4
68622: PPUSH
68623: CALL_OW 264
68627: PUSH
68628: LD_VAR 0 10
68632: IN
68633: NOT
68634: AND
68635: IFFALSE 68674
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
68637: LD_VAR 0 4
68641: PPUSH
68642: LD_VAR 0 7
68646: PUSH
68647: LD_INT 1
68649: ARRAY
68650: PUSH
68651: LD_INT 1
68653: ARRAY
68654: PPUSH
68655: LD_VAR 0 7
68659: PUSH
68660: LD_INT 1
68662: ARRAY
68663: PUSH
68664: LD_INT 2
68666: ARRAY
68667: PPUSH
68668: CALL_OW 116
68672: GO 68963
// if path > tag then
68674: LD_VAR 0 2
68678: PUSH
68679: LD_VAR 0 9
68683: GREATER
68684: IFFALSE 68892
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
68686: LD_ADDR_VAR 0 6
68690: PUSH
68691: LD_VAR 0 5
68695: PPUSH
68696: LD_INT 91
68698: PUSH
68699: LD_VAR 0 4
68703: PUSH
68704: LD_INT 8
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: LIST
68711: PPUSH
68712: CALL_OW 72
68716: ST_TO_ADDR
// if nearEnemy then
68717: LD_VAR 0 6
68721: IFFALSE 68790
// begin if GetWeapon ( i ) = ru_time_lapser then
68723: LD_VAR 0 4
68727: PPUSH
68728: CALL_OW 264
68732: PUSH
68733: LD_INT 49
68735: EQUAL
68736: IFFALSE 68764
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
68738: LD_VAR 0 4
68742: PPUSH
68743: LD_VAR 0 6
68747: PPUSH
68748: LD_VAR 0 4
68752: PPUSH
68753: CALL_OW 74
68757: PPUSH
68758: CALL_OW 112
68762: GO 68788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
68764: LD_VAR 0 4
68768: PPUSH
68769: LD_VAR 0 6
68773: PPUSH
68774: LD_VAR 0 4
68778: PPUSH
68779: CALL_OW 74
68783: PPUSH
68784: CALL 69892 0 2
// end else
68788: GO 68890
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
68790: LD_VAR 0 4
68794: PPUSH
68795: LD_VAR 0 2
68799: PUSH
68800: LD_VAR 0 9
68804: ARRAY
68805: PUSH
68806: LD_INT 1
68808: ARRAY
68809: PPUSH
68810: LD_VAR 0 2
68814: PUSH
68815: LD_VAR 0 9
68819: ARRAY
68820: PUSH
68821: LD_INT 2
68823: ARRAY
68824: PPUSH
68825: CALL_OW 297
68829: PUSH
68830: LD_INT 6
68832: GREATER
68833: IFFALSE 68876
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
68835: LD_VAR 0 4
68839: PPUSH
68840: LD_VAR 0 2
68844: PUSH
68845: LD_VAR 0 9
68849: ARRAY
68850: PUSH
68851: LD_INT 1
68853: ARRAY
68854: PPUSH
68855: LD_VAR 0 2
68859: PUSH
68860: LD_VAR 0 9
68864: ARRAY
68865: PUSH
68866: LD_INT 2
68868: ARRAY
68869: PPUSH
68870: CALL_OW 114
68874: GO 68890
// SetTag ( i , tag ) ;
68876: LD_VAR 0 4
68880: PPUSH
68881: LD_VAR 0 9
68885: PPUSH
68886: CALL_OW 109
// end else
68890: GO 68963
// if enemy then
68892: LD_VAR 0 5
68896: IFFALSE 68963
// begin if GetWeapon ( i ) = ru_time_lapser then
68898: LD_VAR 0 4
68902: PPUSH
68903: CALL_OW 264
68907: PUSH
68908: LD_INT 49
68910: EQUAL
68911: IFFALSE 68939
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68913: LD_VAR 0 4
68917: PPUSH
68918: LD_VAR 0 5
68922: PPUSH
68923: LD_VAR 0 4
68927: PPUSH
68928: CALL_OW 74
68932: PPUSH
68933: CALL_OW 112
68937: GO 68963
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68939: LD_VAR 0 4
68943: PPUSH
68944: LD_VAR 0 5
68948: PPUSH
68949: LD_VAR 0 4
68953: PPUSH
68954: CALL_OW 74
68958: PPUSH
68959: CALL 69892 0 2
// end ; end ;
68963: GO 68543
68965: POP
68966: POP
// end ;
68967: LD_VAR 0 3
68971: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68972: LD_INT 0
68974: PPUSH
68975: PPUSH
68976: PPUSH
// if not unit or IsInUnit ( unit ) then
68977: LD_VAR 0 1
68981: NOT
68982: PUSH
68983: LD_VAR 0 1
68987: PPUSH
68988: CALL_OW 310
68992: OR
68993: IFFALSE 68997
// exit ;
68995: GO 69088
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68997: LD_ADDR_VAR 0 4
69001: PUSH
69002: LD_VAR 0 1
69006: PPUSH
69007: CALL_OW 250
69011: PPUSH
69012: LD_VAR 0 2
69016: PPUSH
69017: LD_INT 1
69019: PPUSH
69020: CALL_OW 272
69024: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69025: LD_ADDR_VAR 0 5
69029: PUSH
69030: LD_VAR 0 1
69034: PPUSH
69035: CALL_OW 251
69039: PPUSH
69040: LD_VAR 0 2
69044: PPUSH
69045: LD_INT 1
69047: PPUSH
69048: CALL_OW 273
69052: ST_TO_ADDR
// if ValidHex ( x , y ) then
69053: LD_VAR 0 4
69057: PPUSH
69058: LD_VAR 0 5
69062: PPUSH
69063: CALL_OW 488
69067: IFFALSE 69088
// ComTurnXY ( unit , x , y ) ;
69069: LD_VAR 0 1
69073: PPUSH
69074: LD_VAR 0 4
69078: PPUSH
69079: LD_VAR 0 5
69083: PPUSH
69084: CALL_OW 118
// end ;
69088: LD_VAR 0 3
69092: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69093: LD_INT 0
69095: PPUSH
69096: PPUSH
// result := false ;
69097: LD_ADDR_VAR 0 3
69101: PUSH
69102: LD_INT 0
69104: ST_TO_ADDR
// if not units then
69105: LD_VAR 0 2
69109: NOT
69110: IFFALSE 69114
// exit ;
69112: GO 69159
// for i in units do
69114: LD_ADDR_VAR 0 4
69118: PUSH
69119: LD_VAR 0 2
69123: PUSH
69124: FOR_IN
69125: IFFALSE 69157
// if See ( side , i ) then
69127: LD_VAR 0 1
69131: PPUSH
69132: LD_VAR 0 4
69136: PPUSH
69137: CALL_OW 292
69141: IFFALSE 69155
// begin result := true ;
69143: LD_ADDR_VAR 0 3
69147: PUSH
69148: LD_INT 1
69150: ST_TO_ADDR
// exit ;
69151: POP
69152: POP
69153: GO 69159
// end ;
69155: GO 69124
69157: POP
69158: POP
// end ;
69159: LD_VAR 0 3
69163: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69164: LD_INT 0
69166: PPUSH
69167: PPUSH
69168: PPUSH
69169: PPUSH
// if not unit or not points then
69170: LD_VAR 0 1
69174: NOT
69175: PUSH
69176: LD_VAR 0 2
69180: NOT
69181: OR
69182: IFFALSE 69186
// exit ;
69184: GO 69276
// dist := 99999 ;
69186: LD_ADDR_VAR 0 5
69190: PUSH
69191: LD_INT 99999
69193: ST_TO_ADDR
// for i in points do
69194: LD_ADDR_VAR 0 4
69198: PUSH
69199: LD_VAR 0 2
69203: PUSH
69204: FOR_IN
69205: IFFALSE 69274
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69207: LD_ADDR_VAR 0 6
69211: PUSH
69212: LD_VAR 0 1
69216: PPUSH
69217: LD_VAR 0 4
69221: PUSH
69222: LD_INT 1
69224: ARRAY
69225: PPUSH
69226: LD_VAR 0 4
69230: PUSH
69231: LD_INT 2
69233: ARRAY
69234: PPUSH
69235: CALL_OW 297
69239: ST_TO_ADDR
// if tmpDist < dist then
69240: LD_VAR 0 6
69244: PUSH
69245: LD_VAR 0 5
69249: LESS
69250: IFFALSE 69272
// begin result := i ;
69252: LD_ADDR_VAR 0 3
69256: PUSH
69257: LD_VAR 0 4
69261: ST_TO_ADDR
// dist := tmpDist ;
69262: LD_ADDR_VAR 0 5
69266: PUSH
69267: LD_VAR 0 6
69271: ST_TO_ADDR
// end ; end ;
69272: GO 69204
69274: POP
69275: POP
// end ;
69276: LD_VAR 0 3
69280: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69281: LD_INT 0
69283: PPUSH
// uc_side := side ;
69284: LD_ADDR_OWVAR 20
69288: PUSH
69289: LD_VAR 0 1
69293: ST_TO_ADDR
// uc_nation := 3 ;
69294: LD_ADDR_OWVAR 21
69298: PUSH
69299: LD_INT 3
69301: ST_TO_ADDR
// vc_chassis := 25 ;
69302: LD_ADDR_OWVAR 37
69306: PUSH
69307: LD_INT 25
69309: ST_TO_ADDR
// vc_engine := engine_siberite ;
69310: LD_ADDR_OWVAR 39
69314: PUSH
69315: LD_INT 3
69317: ST_TO_ADDR
// vc_control := control_computer ;
69318: LD_ADDR_OWVAR 38
69322: PUSH
69323: LD_INT 3
69325: ST_TO_ADDR
// vc_weapon := 59 ;
69326: LD_ADDR_OWVAR 40
69330: PUSH
69331: LD_INT 59
69333: ST_TO_ADDR
// result := CreateVehicle ;
69334: LD_ADDR_VAR 0 5
69338: PUSH
69339: CALL_OW 45
69343: ST_TO_ADDR
// SetDir ( result , d ) ;
69344: LD_VAR 0 5
69348: PPUSH
69349: LD_VAR 0 4
69353: PPUSH
69354: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
69358: LD_VAR 0 5
69362: PPUSH
69363: LD_VAR 0 2
69367: PPUSH
69368: LD_VAR 0 3
69372: PPUSH
69373: LD_INT 0
69375: PPUSH
69376: CALL_OW 48
// end ;
69380: LD_VAR 0 5
69384: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
69385: LD_INT 0
69387: PPUSH
69388: PPUSH
69389: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
69390: LD_ADDR_VAR 0 2
69394: PUSH
69395: LD_INT 0
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 0
69403: PUSH
69404: LD_INT 0
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
69413: LD_VAR 0 1
69417: NOT
69418: PUSH
69419: LD_VAR 0 1
69423: PPUSH
69424: CALL_OW 264
69428: PUSH
69429: LD_INT 12
69431: PUSH
69432: LD_INT 51
69434: PUSH
69435: LD_INT 32
69437: PUSH
69438: LD_INT 89
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: IN
69447: NOT
69448: OR
69449: IFFALSE 69453
// exit ;
69451: GO 69551
// for i := 1 to 3 do
69453: LD_ADDR_VAR 0 3
69457: PUSH
69458: DOUBLE
69459: LD_INT 1
69461: DEC
69462: ST_TO_ADDR
69463: LD_INT 3
69465: PUSH
69466: FOR_TO
69467: IFFALSE 69549
// begin tmp := GetCargo ( cargo , i ) ;
69469: LD_ADDR_VAR 0 4
69473: PUSH
69474: LD_VAR 0 1
69478: PPUSH
69479: LD_VAR 0 3
69483: PPUSH
69484: CALL_OW 289
69488: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
69489: LD_ADDR_VAR 0 2
69493: PUSH
69494: LD_VAR 0 2
69498: PPUSH
69499: LD_VAR 0 3
69503: PPUSH
69504: LD_VAR 0 4
69508: PPUSH
69509: CALL_OW 1
69513: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
69514: LD_ADDR_VAR 0 2
69518: PUSH
69519: LD_VAR 0 2
69523: PPUSH
69524: LD_INT 4
69526: PPUSH
69527: LD_VAR 0 2
69531: PUSH
69532: LD_INT 4
69534: ARRAY
69535: PUSH
69536: LD_VAR 0 4
69540: PLUS
69541: PPUSH
69542: CALL_OW 1
69546: ST_TO_ADDR
// end ;
69547: GO 69466
69549: POP
69550: POP
// end ;
69551: LD_VAR 0 2
69555: RET
// export function Length ( array ) ; begin
69556: LD_INT 0
69558: PPUSH
// result := array + 0 ;
69559: LD_ADDR_VAR 0 2
69563: PUSH
69564: LD_VAR 0 1
69568: PUSH
69569: LD_INT 0
69571: PLUS
69572: ST_TO_ADDR
// end ;
69573: LD_VAR 0 2
69577: RET
// export function PrepareArray ( array ) ; begin
69578: LD_INT 0
69580: PPUSH
// result := array diff 0 ;
69581: LD_ADDR_VAR 0 2
69585: PUSH
69586: LD_VAR 0 1
69590: PUSH
69591: LD_INT 0
69593: DIFF
69594: ST_TO_ADDR
// if not result [ 1 ] then
69595: LD_VAR 0 2
69599: PUSH
69600: LD_INT 1
69602: ARRAY
69603: NOT
69604: IFFALSE 69624
// result := Delete ( result , 1 ) ;
69606: LD_ADDR_VAR 0 2
69610: PUSH
69611: LD_VAR 0 2
69615: PPUSH
69616: LD_INT 1
69618: PPUSH
69619: CALL_OW 3
69623: ST_TO_ADDR
// end ;
69624: LD_VAR 0 2
69628: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
69629: LD_INT 0
69631: PPUSH
69632: PPUSH
69633: PPUSH
69634: PPUSH
// sibRocketRange := 25 ;
69635: LD_ADDR_VAR 0 6
69639: PUSH
69640: LD_INT 25
69642: ST_TO_ADDR
// result := false ;
69643: LD_ADDR_VAR 0 4
69647: PUSH
69648: LD_INT 0
69650: ST_TO_ADDR
// for i := 0 to 5 do
69651: LD_ADDR_VAR 0 5
69655: PUSH
69656: DOUBLE
69657: LD_INT 0
69659: DEC
69660: ST_TO_ADDR
69661: LD_INT 5
69663: PUSH
69664: FOR_TO
69665: IFFALSE 69732
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
69667: LD_VAR 0 1
69671: PPUSH
69672: LD_VAR 0 5
69676: PPUSH
69677: LD_VAR 0 6
69681: PPUSH
69682: CALL_OW 272
69686: PPUSH
69687: LD_VAR 0 2
69691: PPUSH
69692: LD_VAR 0 5
69696: PPUSH
69697: LD_VAR 0 6
69701: PPUSH
69702: CALL_OW 273
69706: PPUSH
69707: LD_VAR 0 3
69711: PPUSH
69712: CALL_OW 309
69716: IFFALSE 69730
// begin result := true ;
69718: LD_ADDR_VAR 0 4
69722: PUSH
69723: LD_INT 1
69725: ST_TO_ADDR
// exit ;
69726: POP
69727: POP
69728: GO 69734
// end ;
69730: GO 69664
69732: POP
69733: POP
// end ;
69734: LD_VAR 0 4
69738: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69739: LD_INT 0
69741: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69742: LD_VAR 0 1
69746: PPUSH
69747: LD_VAR 0 2
69751: PPUSH
69752: LD_INT 0
69754: PPUSH
69755: LD_INT 0
69757: PPUSH
69758: LD_INT 1
69760: PPUSH
69761: LD_INT 0
69763: PPUSH
69764: CALL_OW 587
// end ;
69768: LD_VAR 0 3
69772: RET
// export function CenterOnNow ( unit ) ; begin
69773: LD_INT 0
69775: PPUSH
// result := IsInUnit ( unit ) ;
69776: LD_ADDR_VAR 0 2
69780: PUSH
69781: LD_VAR 0 1
69785: PPUSH
69786: CALL_OW 310
69790: ST_TO_ADDR
// if not result then
69791: LD_VAR 0 2
69795: NOT
69796: IFFALSE 69808
// result := unit ;
69798: LD_ADDR_VAR 0 2
69802: PUSH
69803: LD_VAR 0 1
69807: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69808: LD_VAR 0 1
69812: PPUSH
69813: CALL_OW 87
// end ;
69817: LD_VAR 0 2
69821: RET
// export function ComMoveHex ( unit , hex ) ; begin
69822: LD_INT 0
69824: PPUSH
// if not hex then
69825: LD_VAR 0 2
69829: NOT
69830: IFFALSE 69834
// exit ;
69832: GO 69887
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69834: LD_VAR 0 2
69838: PUSH
69839: LD_INT 1
69841: ARRAY
69842: PPUSH
69843: LD_VAR 0 2
69847: PUSH
69848: LD_INT 2
69850: ARRAY
69851: PPUSH
69852: CALL_OW 428
69856: IFFALSE 69860
// exit ;
69858: GO 69887
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_VAR 0 2
69869: PUSH
69870: LD_INT 1
69872: ARRAY
69873: PPUSH
69874: LD_VAR 0 2
69878: PUSH
69879: LD_INT 2
69881: ARRAY
69882: PPUSH
69883: CALL_OW 111
// end ;
69887: LD_VAR 0 3
69891: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69892: LD_INT 0
69894: PPUSH
69895: PPUSH
69896: PPUSH
// if not unit or not enemy then
69897: LD_VAR 0 1
69901: NOT
69902: PUSH
69903: LD_VAR 0 2
69907: NOT
69908: OR
69909: IFFALSE 69913
// exit ;
69911: GO 70037
// x := GetX ( enemy ) ;
69913: LD_ADDR_VAR 0 4
69917: PUSH
69918: LD_VAR 0 2
69922: PPUSH
69923: CALL_OW 250
69927: ST_TO_ADDR
// y := GetY ( enemy ) ;
69928: LD_ADDR_VAR 0 5
69932: PUSH
69933: LD_VAR 0 2
69937: PPUSH
69938: CALL_OW 251
69942: ST_TO_ADDR
// if ValidHex ( x , y ) then
69943: LD_VAR 0 4
69947: PPUSH
69948: LD_VAR 0 5
69952: PPUSH
69953: CALL_OW 488
69957: IFFALSE 70037
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
69959: LD_VAR 0 2
69963: PPUSH
69964: CALL_OW 247
69968: PUSH
69969: LD_INT 3
69971: PUSH
69972: LD_INT 2
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: IN
69979: PUSH
69980: LD_VAR 0 1
69984: PPUSH
69985: CALL_OW 255
69989: PPUSH
69990: LD_VAR 0 2
69994: PPUSH
69995: CALL_OW 292
69999: AND
70000: IFFALSE 70018
// ComAttackUnit ( unit , enemy ) else
70002: LD_VAR 0 1
70006: PPUSH
70007: LD_VAR 0 2
70011: PPUSH
70012: CALL_OW 115
70016: GO 70037
// ComAgressiveMove ( unit , x , y ) ;
70018: LD_VAR 0 1
70022: PPUSH
70023: LD_VAR 0 4
70027: PPUSH
70028: LD_VAR 0 5
70032: PPUSH
70033: CALL_OW 114
// end ;
70037: LD_VAR 0 3
70041: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70042: LD_INT 0
70044: PPUSH
70045: PPUSH
70046: PPUSH
// list := AreaToList ( area , 0 ) ;
70047: LD_ADDR_VAR 0 5
70051: PUSH
70052: LD_VAR 0 1
70056: PPUSH
70057: LD_INT 0
70059: PPUSH
70060: CALL_OW 517
70064: ST_TO_ADDR
// if not list then
70065: LD_VAR 0 5
70069: NOT
70070: IFFALSE 70074
// exit ;
70072: GO 70204
// if all then
70074: LD_VAR 0 2
70078: IFFALSE 70166
// begin for i := 1 to list [ 1 ] do
70080: LD_ADDR_VAR 0 4
70084: PUSH
70085: DOUBLE
70086: LD_INT 1
70088: DEC
70089: ST_TO_ADDR
70090: LD_VAR 0 5
70094: PUSH
70095: LD_INT 1
70097: ARRAY
70098: PUSH
70099: FOR_TO
70100: IFFALSE 70162
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70102: LD_ADDR_VAR 0 3
70106: PUSH
70107: LD_VAR 0 3
70111: PPUSH
70112: LD_VAR 0 3
70116: PUSH
70117: LD_INT 1
70119: PLUS
70120: PPUSH
70121: LD_VAR 0 5
70125: PUSH
70126: LD_INT 1
70128: ARRAY
70129: PUSH
70130: LD_VAR 0 4
70134: ARRAY
70135: PUSH
70136: LD_VAR 0 5
70140: PUSH
70141: LD_INT 2
70143: ARRAY
70144: PUSH
70145: LD_VAR 0 4
70149: ARRAY
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PPUSH
70155: CALL_OW 1
70159: ST_TO_ADDR
70160: GO 70099
70162: POP
70163: POP
// exit ;
70164: GO 70204
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
70166: LD_ADDR_VAR 0 3
70170: PUSH
70171: LD_VAR 0 5
70175: PUSH
70176: LD_INT 1
70178: ARRAY
70179: PUSH
70180: LD_INT 1
70182: ARRAY
70183: PUSH
70184: LD_VAR 0 5
70188: PUSH
70189: LD_INT 2
70191: ARRAY
70192: PUSH
70193: LD_INT 1
70195: ARRAY
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: EMPTY
70202: LIST
70203: ST_TO_ADDR
// end ;
70204: LD_VAR 0 3
70208: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
70209: LD_INT 0
70211: PPUSH
70212: PPUSH
// list := AreaToList ( area , 0 ) ;
70213: LD_ADDR_VAR 0 4
70217: PUSH
70218: LD_VAR 0 1
70222: PPUSH
70223: LD_INT 0
70225: PPUSH
70226: CALL_OW 517
70230: ST_TO_ADDR
// if not list then
70231: LD_VAR 0 4
70235: NOT
70236: IFFALSE 70240
// exit ;
70238: GO 70281
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
70240: LD_ADDR_VAR 0 3
70244: PUSH
70245: LD_VAR 0 4
70249: PUSH
70250: LD_INT 1
70252: ARRAY
70253: PUSH
70254: LD_INT 1
70256: ARRAY
70257: PUSH
70258: LD_VAR 0 4
70262: PUSH
70263: LD_INT 2
70265: ARRAY
70266: PUSH
70267: LD_INT 1
70269: ARRAY
70270: PUSH
70271: LD_VAR 0 2
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: ST_TO_ADDR
// end ;
70281: LD_VAR 0 3
70285: RET
// export function First ( array ) ; begin
70286: LD_INT 0
70288: PPUSH
// if not array then
70289: LD_VAR 0 1
70293: NOT
70294: IFFALSE 70298
// exit ;
70296: GO 70312
// result := array [ 1 ] ;
70298: LD_ADDR_VAR 0 2
70302: PUSH
70303: LD_VAR 0 1
70307: PUSH
70308: LD_INT 1
70310: ARRAY
70311: ST_TO_ADDR
// end ;
70312: LD_VAR 0 2
70316: RET
// export function Last ( array ) ; begin
70317: LD_INT 0
70319: PPUSH
// if not array then
70320: LD_VAR 0 1
70324: NOT
70325: IFFALSE 70329
// exit ;
70327: GO 70345
// result := array [ array ] ;
70329: LD_ADDR_VAR 0 2
70333: PUSH
70334: LD_VAR 0 1
70338: PUSH
70339: LD_VAR 0 1
70343: ARRAY
70344: ST_TO_ADDR
// end ; end_of_file
70345: LD_VAR 0 2
70349: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70350: LD_VAR 0 1
70354: PUSH
70355: LD_INT 200
70357: DOUBLE
70358: GREATEREQUAL
70359: IFFALSE 70367
70361: LD_INT 299
70363: DOUBLE
70364: LESSEQUAL
70365: IFTRUE 70369
70367: GO 70401
70369: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70370: LD_VAR 0 1
70374: PPUSH
70375: LD_VAR 0 2
70379: PPUSH
70380: LD_VAR 0 3
70384: PPUSH
70385: LD_VAR 0 4
70389: PPUSH
70390: LD_VAR 0 5
70394: PPUSH
70395: CALL 23600 0 5
70399: GO 70478
70401: LD_INT 300
70403: DOUBLE
70404: GREATEREQUAL
70405: IFFALSE 70413
70407: LD_INT 399
70409: DOUBLE
70410: LESSEQUAL
70411: IFTRUE 70415
70413: GO 70477
70415: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70416: LD_VAR 0 1
70420: PPUSH
70421: LD_VAR 0 2
70425: PPUSH
70426: LD_VAR 0 3
70430: PPUSH
70431: LD_VAR 0 4
70435: PPUSH
70436: LD_VAR 0 5
70440: PPUSH
70441: LD_VAR 0 6
70445: PPUSH
70446: LD_VAR 0 7
70450: PPUSH
70451: LD_VAR 0 8
70455: PPUSH
70456: LD_VAR 0 9
70460: PPUSH
70461: LD_VAR 0 10
70465: PPUSH
70466: LD_VAR 0 11
70470: PPUSH
70471: CALL 19925 0 11
70475: GO 70478
70477: POP
// end ;
70478: PPOPN 11
70480: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70481: LD_VAR 0 1
70485: PPUSH
70486: LD_VAR 0 2
70490: PPUSH
70491: LD_VAR 0 3
70495: PPUSH
70496: LD_VAR 0 4
70500: PPUSH
70501: LD_VAR 0 5
70505: PPUSH
70506: CALL 23336 0 5
// end ; end_of_file
70510: PPOPN 5
70512: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70513: LD_VAR 0 1
70517: PPUSH
70518: LD_VAR 0 2
70522: PPUSH
70523: LD_VAR 0 3
70527: PPUSH
70528: LD_VAR 0 4
70532: PPUSH
70533: LD_VAR 0 5
70537: PPUSH
70538: LD_VAR 0 6
70542: PPUSH
70543: CALL 7577 0 6
// end ;
70547: PPOPN 6
70549: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70550: LD_INT 0
70552: PPUSH
// begin if not units then
70553: LD_VAR 0 1
70557: NOT
70558: IFFALSE 70562
// exit ;
70560: GO 70562
// end ;
70562: PPOPN 7
70564: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70565: CALL 7481 0 0
// end ;
70569: PPOPN 1
70571: END
