// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 61483 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 27326 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 27326 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 27326 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 32341 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 63711 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 32341 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 63711 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 32341 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL 23037 0 1
// if un = JMM then
6886: LD_VAR 0 1
6890: PUSH
6891: LD_EXP 14
6895: EQUAL
6896: IFFALSE 6905
// YouLost ( JMM ) ;
6898: LD_STRING JMM
6900: PPUSH
6901: CALL_OW 104
// if un = Burlak then
6905: LD_VAR 0 1
6909: PUSH
6910: LD_EXP 15
6914: EQUAL
6915: IFFALSE 6924
// YouLost ( Burlak ) ;
6917: LD_STRING Burlak
6919: PPUSH
6920: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6924: LD_VAR 0 1
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 23
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: IN
6958: IFFALSE 6974
// killCounter := killCounter + 1 ;
6960: LD_ADDR_EXP 12
6964: PUSH
6965: LD_EXP 12
6969: PUSH
6970: LD_INT 1
6972: PLUS
6973: ST_TO_ADDR
// end ;
6974: PPOPN 1
6976: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6977: LD_VAR 0 2
6981: PUSH
6982: LD_INT 7
6984: EQUAL
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 31
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 32
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 33
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: IN
7035: AND
7036: IFFALSE 7052
// bunkerCounter := bunkerCounter + 1 ;
7038: LD_ADDR_EXP 13
7042: PUSH
7043: LD_EXP 13
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: ST_TO_ADDR
// end ;
7052: PPOPN 3
7054: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 255
7064: PUSH
7065: LD_INT 7
7067: EQUAL
7068: IFFALSE 7078
// artifactPickedUp := true ;
7070: LD_ADDR_EXP 6
7074: PUSH
7075: LD_INT 1
7077: ST_TO_ADDR
// end ;
7078: PPOPN 2
7080: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7081: LD_ADDR_EXP 6
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
7089: PPOPN 2
7091: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7092: LD_VAR 0 1
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL 23157 0 2
// if GetSide ( vehicle ) <> 1 then
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 255
7115: PUSH
7116: LD_INT 1
7118: NONEQUAL
7119: IFFALSE 7123
// exit ;
7121: GO 7170
// wait ( 0 0$5 ) ;
7123: LD_INT 175
7125: PPUSH
7126: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 263
7139: PUSH
7140: LD_INT 2
7142: EQUAL
7143: IFFALSE 7154
// Connect ( vehicle ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL 35432 0 1
// vehGuard := vehGuard ^ vehicle ;
7154: LD_ADDR_EXP 23
7158: PUSH
7159: LD_EXP 23
7163: PUSH
7164: LD_VAR 0 1
7168: ADD
7169: ST_TO_ADDR
// end ;
7170: PPOPN 2
7172: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7173: LD_VAR 0 1
7177: PUSH
7178: LD_INT 1
7180: EQUAL
7181: PUSH
7182: LD_EXP 7
7186: NOT
7187: AND
7188: IFFALSE 7223
// begin planCaptured := true ;
7190: LD_ADDR_EXP 7
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7198: LD_STRING MEnd
7200: PPUSH
7201: CALL_OW 337
// canEnd := true ;
7205: LD_ADDR_EXP 10
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// missionTime := tick ;
7213: LD_ADDR_EXP 11
7217: PUSH
7218: LD_OWVAR 1
7222: ST_TO_ADDR
// end ; end ;
7223: PPOPN 3
7225: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL 23141 0 1
// end ; end_of_file end_of_file
7235: PPOPN 1
7237: END
// every 0 0$1 do
7238: GO 7240
7240: DISABLE
// begin enable ;
7241: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7242: LD_STRING updateTimer(
7244: PUSH
7245: LD_OWVAR 1
7249: STR
7250: PUSH
7251: LD_STRING );
7253: STR
7254: PPUSH
7255: CALL_OW 559
// end ;
7259: END
// export function SOS_MapStart ( ) ; begin
7260: LD_INT 0
7262: PPUSH
// if streamModeActive then
7263: LD_EXP 25
7267: IFFALSE 7276
// DefineStreamItems ( true ) ;
7269: LD_INT 1
7271: PPUSH
7272: CALL 9080 0 1
// UpdateLuaVariables ( ) ;
7276: CALL 7293 0 0
// UpdateFactoryWaypoints ( ) ;
7280: CALL 21941 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7284: CALL 22198 0 0
// end ;
7288: LD_VAR 0 1
7292: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
7293: LD_INT 0
7295: PPUSH
// if not globalGameSaveCounter then
7296: LD_EXP 24
7300: NOT
7301: IFFALSE 7312
// ToLua ( setGameSaveCounter(0) ) else
7303: LD_STRING setGameSaveCounter(0)
7305: PPUSH
7306: CALL_OW 559
7310: GO 7344
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7312: LD_ADDR_EXP 24
7316: PUSH
7317: LD_EXP 24
7321: PPUSH
7322: CALL 66155 0 1
7326: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7327: LD_STRING setGameSaveCounter(
7329: PUSH
7330: LD_EXP 24
7334: STR
7335: PUSH
7336: LD_STRING )
7338: STR
7339: PPUSH
7340: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7344: LD_STRING setGameDifficulty(
7346: PUSH
7347: LD_OWVAR 67
7351: STR
7352: PUSH
7353: LD_STRING )
7355: STR
7356: PPUSH
7357: CALL_OW 559
// end ;
7361: LD_VAR 0 1
7365: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7366: LD_INT 0
7368: PPUSH
// if p2 = stream_mode then
7369: LD_VAR 0 2
7373: PUSH
7374: LD_INT 100
7376: EQUAL
7377: IFFALSE 8380
// begin if not StreamModeActive then
7379: LD_EXP 25
7383: NOT
7384: IFFALSE 7394
// StreamModeActive := true ;
7386: LD_ADDR_EXP 25
7390: PUSH
7391: LD_INT 1
7393: ST_TO_ADDR
// if p3 = 0 then
7394: LD_VAR 0 3
7398: PUSH
7399: LD_INT 0
7401: EQUAL
7402: IFFALSE 7408
// InitStreamMode ;
7404: CALL 8616 0 0
// if p3 = 1 then
7408: LD_VAR 0 3
7412: PUSH
7413: LD_INT 1
7415: EQUAL
7416: IFFALSE 7426
// sRocket := true ;
7418: LD_ADDR_EXP 30
7422: PUSH
7423: LD_INT 1
7425: ST_TO_ADDR
// if p3 = 2 then
7426: LD_VAR 0 3
7430: PUSH
7431: LD_INT 2
7433: EQUAL
7434: IFFALSE 7444
// sSpeed := true ;
7436: LD_ADDR_EXP 29
7440: PUSH
7441: LD_INT 1
7443: ST_TO_ADDR
// if p3 = 3 then
7444: LD_VAR 0 3
7448: PUSH
7449: LD_INT 3
7451: EQUAL
7452: IFFALSE 7462
// sEngine := true ;
7454: LD_ADDR_EXP 31
7458: PUSH
7459: LD_INT 1
7461: ST_TO_ADDR
// if p3 = 4 then
7462: LD_VAR 0 3
7466: PUSH
7467: LD_INT 4
7469: EQUAL
7470: IFFALSE 7480
// sSpec := true ;
7472: LD_ADDR_EXP 28
7476: PUSH
7477: LD_INT 1
7479: ST_TO_ADDR
// if p3 = 5 then
7480: LD_VAR 0 3
7484: PUSH
7485: LD_INT 5
7487: EQUAL
7488: IFFALSE 7498
// sLevel := true ;
7490: LD_ADDR_EXP 32
7494: PUSH
7495: LD_INT 1
7497: ST_TO_ADDR
// if p3 = 6 then
7498: LD_VAR 0 3
7502: PUSH
7503: LD_INT 6
7505: EQUAL
7506: IFFALSE 7516
// sArmoury := true ;
7508: LD_ADDR_EXP 33
7512: PUSH
7513: LD_INT 1
7515: ST_TO_ADDR
// if p3 = 7 then
7516: LD_VAR 0 3
7520: PUSH
7521: LD_INT 7
7523: EQUAL
7524: IFFALSE 7534
// sRadar := true ;
7526: LD_ADDR_EXP 34
7530: PUSH
7531: LD_INT 1
7533: ST_TO_ADDR
// if p3 = 8 then
7534: LD_VAR 0 3
7538: PUSH
7539: LD_INT 8
7541: EQUAL
7542: IFFALSE 7552
// sBunker := true ;
7544: LD_ADDR_EXP 35
7548: PUSH
7549: LD_INT 1
7551: ST_TO_ADDR
// if p3 = 9 then
7552: LD_VAR 0 3
7556: PUSH
7557: LD_INT 9
7559: EQUAL
7560: IFFALSE 7570
// sHack := true ;
7562: LD_ADDR_EXP 36
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// if p3 = 10 then
7570: LD_VAR 0 3
7574: PUSH
7575: LD_INT 10
7577: EQUAL
7578: IFFALSE 7588
// sFire := true ;
7580: LD_ADDR_EXP 37
7584: PUSH
7585: LD_INT 1
7587: ST_TO_ADDR
// if p3 = 11 then
7588: LD_VAR 0 3
7592: PUSH
7593: LD_INT 11
7595: EQUAL
7596: IFFALSE 7606
// sRefresh := true ;
7598: LD_ADDR_EXP 38
7602: PUSH
7603: LD_INT 1
7605: ST_TO_ADDR
// if p3 = 12 then
7606: LD_VAR 0 3
7610: PUSH
7611: LD_INT 12
7613: EQUAL
7614: IFFALSE 7624
// sExp := true ;
7616: LD_ADDR_EXP 39
7620: PUSH
7621: LD_INT 1
7623: ST_TO_ADDR
// if p3 = 13 then
7624: LD_VAR 0 3
7628: PUSH
7629: LD_INT 13
7631: EQUAL
7632: IFFALSE 7642
// sDepot := true ;
7634: LD_ADDR_EXP 40
7638: PUSH
7639: LD_INT 1
7641: ST_TO_ADDR
// if p3 = 14 then
7642: LD_VAR 0 3
7646: PUSH
7647: LD_INT 14
7649: EQUAL
7650: IFFALSE 7660
// sFlag := true ;
7652: LD_ADDR_EXP 41
7656: PUSH
7657: LD_INT 1
7659: ST_TO_ADDR
// if p3 = 15 then
7660: LD_VAR 0 3
7664: PUSH
7665: LD_INT 15
7667: EQUAL
7668: IFFALSE 7678
// sKamikadze := true ;
7670: LD_ADDR_EXP 49
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// if p3 = 16 then
7678: LD_VAR 0 3
7682: PUSH
7683: LD_INT 16
7685: EQUAL
7686: IFFALSE 7696
// sTroll := true ;
7688: LD_ADDR_EXP 50
7692: PUSH
7693: LD_INT 1
7695: ST_TO_ADDR
// if p3 = 17 then
7696: LD_VAR 0 3
7700: PUSH
7701: LD_INT 17
7703: EQUAL
7704: IFFALSE 7714
// sSlow := true ;
7706: LD_ADDR_EXP 51
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
// if p3 = 18 then
7714: LD_VAR 0 3
7718: PUSH
7719: LD_INT 18
7721: EQUAL
7722: IFFALSE 7732
// sLack := true ;
7724: LD_ADDR_EXP 52
7728: PUSH
7729: LD_INT 1
7731: ST_TO_ADDR
// if p3 = 19 then
7732: LD_VAR 0 3
7736: PUSH
7737: LD_INT 19
7739: EQUAL
7740: IFFALSE 7750
// sTank := true ;
7742: LD_ADDR_EXP 54
7746: PUSH
7747: LD_INT 1
7749: ST_TO_ADDR
// if p3 = 20 then
7750: LD_VAR 0 3
7754: PUSH
7755: LD_INT 20
7757: EQUAL
7758: IFFALSE 7768
// sRemote := true ;
7760: LD_ADDR_EXP 55
7764: PUSH
7765: LD_INT 1
7767: ST_TO_ADDR
// if p3 = 21 then
7768: LD_VAR 0 3
7772: PUSH
7773: LD_INT 21
7775: EQUAL
7776: IFFALSE 7786
// sPowell := true ;
7778: LD_ADDR_EXP 56
7782: PUSH
7783: LD_INT 1
7785: ST_TO_ADDR
// if p3 = 22 then
7786: LD_VAR 0 3
7790: PUSH
7791: LD_INT 22
7793: EQUAL
7794: IFFALSE 7804
// sTeleport := true ;
7796: LD_ADDR_EXP 59
7800: PUSH
7801: LD_INT 1
7803: ST_TO_ADDR
// if p3 = 23 then
7804: LD_VAR 0 3
7808: PUSH
7809: LD_INT 23
7811: EQUAL
7812: IFFALSE 7822
// sOilTower := true ;
7814: LD_ADDR_EXP 61
7818: PUSH
7819: LD_INT 1
7821: ST_TO_ADDR
// if p3 = 24 then
7822: LD_VAR 0 3
7826: PUSH
7827: LD_INT 24
7829: EQUAL
7830: IFFALSE 7840
// sShovel := true ;
7832: LD_ADDR_EXP 62
7836: PUSH
7837: LD_INT 1
7839: ST_TO_ADDR
// if p3 = 25 then
7840: LD_VAR 0 3
7844: PUSH
7845: LD_INT 25
7847: EQUAL
7848: IFFALSE 7858
// sSheik := true ;
7850: LD_ADDR_EXP 63
7854: PUSH
7855: LD_INT 1
7857: ST_TO_ADDR
// if p3 = 26 then
7858: LD_VAR 0 3
7862: PUSH
7863: LD_INT 26
7865: EQUAL
7866: IFFALSE 7876
// sEarthquake := true ;
7868: LD_ADDR_EXP 65
7872: PUSH
7873: LD_INT 1
7875: ST_TO_ADDR
// if p3 = 27 then
7876: LD_VAR 0 3
7880: PUSH
7881: LD_INT 27
7883: EQUAL
7884: IFFALSE 7894
// sAI := true ;
7886: LD_ADDR_EXP 66
7890: PUSH
7891: LD_INT 1
7893: ST_TO_ADDR
// if p3 = 28 then
7894: LD_VAR 0 3
7898: PUSH
7899: LD_INT 28
7901: EQUAL
7902: IFFALSE 7912
// sCargo := true ;
7904: LD_ADDR_EXP 69
7908: PUSH
7909: LD_INT 1
7911: ST_TO_ADDR
// if p3 = 29 then
7912: LD_VAR 0 3
7916: PUSH
7917: LD_INT 29
7919: EQUAL
7920: IFFALSE 7930
// sDLaser := true ;
7922: LD_ADDR_EXP 70
7926: PUSH
7927: LD_INT 1
7929: ST_TO_ADDR
// if p3 = 30 then
7930: LD_VAR 0 3
7934: PUSH
7935: LD_INT 30
7937: EQUAL
7938: IFFALSE 7948
// sExchange := true ;
7940: LD_ADDR_EXP 71
7944: PUSH
7945: LD_INT 1
7947: ST_TO_ADDR
// if p3 = 31 then
7948: LD_VAR 0 3
7952: PUSH
7953: LD_INT 31
7955: EQUAL
7956: IFFALSE 7966
// sFac := true ;
7958: LD_ADDR_EXP 72
7962: PUSH
7963: LD_INT 1
7965: ST_TO_ADDR
// if p3 = 32 then
7966: LD_VAR 0 3
7970: PUSH
7971: LD_INT 32
7973: EQUAL
7974: IFFALSE 7984
// sPower := true ;
7976: LD_ADDR_EXP 73
7980: PUSH
7981: LD_INT 1
7983: ST_TO_ADDR
// if p3 = 33 then
7984: LD_VAR 0 3
7988: PUSH
7989: LD_INT 33
7991: EQUAL
7992: IFFALSE 8002
// sRandom := true ;
7994: LD_ADDR_EXP 74
7998: PUSH
7999: LD_INT 1
8001: ST_TO_ADDR
// if p3 = 34 then
8002: LD_VAR 0 3
8006: PUSH
8007: LD_INT 34
8009: EQUAL
8010: IFFALSE 8020
// sShield := true ;
8012: LD_ADDR_EXP 75
8016: PUSH
8017: LD_INT 1
8019: ST_TO_ADDR
// if p3 = 35 then
8020: LD_VAR 0 3
8024: PUSH
8025: LD_INT 35
8027: EQUAL
8028: IFFALSE 8038
// sTime := true ;
8030: LD_ADDR_EXP 76
8034: PUSH
8035: LD_INT 1
8037: ST_TO_ADDR
// if p3 = 36 then
8038: LD_VAR 0 3
8042: PUSH
8043: LD_INT 36
8045: EQUAL
8046: IFFALSE 8056
// sTools := true ;
8048: LD_ADDR_EXP 77
8052: PUSH
8053: LD_INT 1
8055: ST_TO_ADDR
// if p3 = 101 then
8056: LD_VAR 0 3
8060: PUSH
8061: LD_INT 101
8063: EQUAL
8064: IFFALSE 8074
// sSold := true ;
8066: LD_ADDR_EXP 42
8070: PUSH
8071: LD_INT 1
8073: ST_TO_ADDR
// if p3 = 102 then
8074: LD_VAR 0 3
8078: PUSH
8079: LD_INT 102
8081: EQUAL
8082: IFFALSE 8092
// sDiff := true ;
8084: LD_ADDR_EXP 43
8088: PUSH
8089: LD_INT 1
8091: ST_TO_ADDR
// if p3 = 103 then
8092: LD_VAR 0 3
8096: PUSH
8097: LD_INT 103
8099: EQUAL
8100: IFFALSE 8110
// sFog := true ;
8102: LD_ADDR_EXP 46
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// if p3 = 104 then
8110: LD_VAR 0 3
8114: PUSH
8115: LD_INT 104
8117: EQUAL
8118: IFFALSE 8128
// sReset := true ;
8120: LD_ADDR_EXP 47
8124: PUSH
8125: LD_INT 1
8127: ST_TO_ADDR
// if p3 = 105 then
8128: LD_VAR 0 3
8132: PUSH
8133: LD_INT 105
8135: EQUAL
8136: IFFALSE 8146
// sSun := true ;
8138: LD_ADDR_EXP 48
8142: PUSH
8143: LD_INT 1
8145: ST_TO_ADDR
// if p3 = 106 then
8146: LD_VAR 0 3
8150: PUSH
8151: LD_INT 106
8153: EQUAL
8154: IFFALSE 8164
// sTiger := true ;
8156: LD_ADDR_EXP 44
8160: PUSH
8161: LD_INT 1
8163: ST_TO_ADDR
// if p3 = 107 then
8164: LD_VAR 0 3
8168: PUSH
8169: LD_INT 107
8171: EQUAL
8172: IFFALSE 8182
// sBomb := true ;
8174: LD_ADDR_EXP 45
8178: PUSH
8179: LD_INT 1
8181: ST_TO_ADDR
// if p3 = 108 then
8182: LD_VAR 0 3
8186: PUSH
8187: LD_INT 108
8189: EQUAL
8190: IFFALSE 8200
// sWound := true ;
8192: LD_ADDR_EXP 53
8196: PUSH
8197: LD_INT 1
8199: ST_TO_ADDR
// if p3 = 109 then
8200: LD_VAR 0 3
8204: PUSH
8205: LD_INT 109
8207: EQUAL
8208: IFFALSE 8218
// sBetray := true ;
8210: LD_ADDR_EXP 57
8214: PUSH
8215: LD_INT 1
8217: ST_TO_ADDR
// if p3 = 110 then
8218: LD_VAR 0 3
8222: PUSH
8223: LD_INT 110
8225: EQUAL
8226: IFFALSE 8236
// sContamin := true ;
8228: LD_ADDR_EXP 58
8232: PUSH
8233: LD_INT 1
8235: ST_TO_ADDR
// if p3 = 111 then
8236: LD_VAR 0 3
8240: PUSH
8241: LD_INT 111
8243: EQUAL
8244: IFFALSE 8254
// sOil := true ;
8246: LD_ADDR_EXP 60
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// if p3 = 112 then
8254: LD_VAR 0 3
8258: PUSH
8259: LD_INT 112
8261: EQUAL
8262: IFFALSE 8272
// sStu := true ;
8264: LD_ADDR_EXP 64
8268: PUSH
8269: LD_INT 1
8271: ST_TO_ADDR
// if p3 = 113 then
8272: LD_VAR 0 3
8276: PUSH
8277: LD_INT 113
8279: EQUAL
8280: IFFALSE 8290
// sBazooka := true ;
8282: LD_ADDR_EXP 67
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// if p3 = 114 then
8290: LD_VAR 0 3
8294: PUSH
8295: LD_INT 114
8297: EQUAL
8298: IFFALSE 8308
// sMortar := true ;
8300: LD_ADDR_EXP 68
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// if p3 = 115 then
8308: LD_VAR 0 3
8312: PUSH
8313: LD_INT 115
8315: EQUAL
8316: IFFALSE 8326
// sRanger := true ;
8318: LD_ADDR_EXP 78
8322: PUSH
8323: LD_INT 1
8325: ST_TO_ADDR
// if p3 = 116 then
8326: LD_VAR 0 3
8330: PUSH
8331: LD_INT 116
8333: EQUAL
8334: IFFALSE 8344
// sComputer := true ;
8336: LD_ADDR_EXP 79
8340: PUSH
8341: LD_INT 1
8343: ST_TO_ADDR
// if p3 = 117 then
8344: LD_VAR 0 3
8348: PUSH
8349: LD_INT 117
8351: EQUAL
8352: IFFALSE 8362
// s30 := true ;
8354: LD_ADDR_EXP 80
8358: PUSH
8359: LD_INT 1
8361: ST_TO_ADDR
// if p3 = 118 then
8362: LD_VAR 0 3
8366: PUSH
8367: LD_INT 118
8369: EQUAL
8370: IFFALSE 8380
// s60 := true ;
8372: LD_ADDR_EXP 81
8376: PUSH
8377: LD_INT 1
8379: ST_TO_ADDR
// end ; if p2 = hack_mode then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 101
8387: EQUAL
8388: IFFALSE 8516
// begin case p3 of 1 :
8390: LD_VAR 0 3
8394: PUSH
8395: LD_INT 1
8397: DOUBLE
8398: EQUAL
8399: IFTRUE 8403
8401: GO 8410
8403: POP
// hHackUnlimitedResources ; 2 :
8404: CALL 20687 0 0
8408: GO 8516
8410: LD_INT 2
8412: DOUBLE
8413: EQUAL
8414: IFTRUE 8418
8416: GO 8425
8418: POP
// hHackSetLevel10 ; 3 :
8419: CALL 20820 0 0
8423: GO 8516
8425: LD_INT 3
8427: DOUBLE
8428: EQUAL
8429: IFTRUE 8433
8431: GO 8440
8433: POP
// hHackSetLevel10YourUnits ; 4 :
8434: CALL 20905 0 0
8438: GO 8516
8440: LD_INT 4
8442: DOUBLE
8443: EQUAL
8444: IFTRUE 8448
8446: GO 8455
8448: POP
// hHackInvincible ; 5 :
8449: CALL 21353 0 0
8453: GO 8516
8455: LD_INT 5
8457: DOUBLE
8458: EQUAL
8459: IFTRUE 8463
8461: GO 8470
8463: POP
// hHackInvisible ; 6 :
8464: CALL 21464 0 0
8468: GO 8516
8470: LD_INT 6
8472: DOUBLE
8473: EQUAL
8474: IFTRUE 8478
8476: GO 8485
8478: POP
// hHackChangeYourSide ; 7 :
8479: CALL 21521 0 0
8483: GO 8516
8485: LD_INT 7
8487: DOUBLE
8488: EQUAL
8489: IFTRUE 8493
8491: GO 8500
8493: POP
// hHackChangeUnitSide ; 8 :
8494: CALL 21563 0 0
8498: GO 8516
8500: LD_INT 8
8502: DOUBLE
8503: EQUAL
8504: IFTRUE 8508
8506: GO 8515
8508: POP
// hHackFog ; end ;
8509: CALL 21664 0 0
8513: GO 8516
8515: POP
// end ; if p2 = game_save_mode then
8516: LD_VAR 0 2
8520: PUSH
8521: LD_INT 102
8523: EQUAL
8524: IFFALSE 8589
// begin if p3 = 1 then
8526: LD_VAR 0 3
8530: PUSH
8531: LD_INT 1
8533: EQUAL
8534: IFFALSE 8546
// globalGameSaveCounter := p4 ;
8536: LD_ADDR_EXP 24
8540: PUSH
8541: LD_VAR 0 4
8545: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8546: LD_VAR 0 3
8550: PUSH
8551: LD_INT 2
8553: EQUAL
8554: PUSH
8555: LD_EXP 24
8559: AND
8560: IFFALSE 8579
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8562: LD_STRING setGameSaveCounter(
8564: PUSH
8565: LD_EXP 24
8569: STR
8570: PUSH
8571: LD_STRING )
8573: STR
8574: PPUSH
8575: CALL_OW 559
// display_strings := globalGameSaveCounter ;
8579: LD_ADDR_OWVAR 47
8583: PUSH
8584: LD_EXP 24
8588: ST_TO_ADDR
// end ; end ;
8589: LD_VAR 0 7
8593: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8594: GO 8596
8596: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8597: LD_STRING initStreamRollete();
8599: PPUSH
8600: CALL_OW 559
// InitStreamMode ;
8604: CALL 8616 0 0
// DefineStreamItems ( false ) ;
8608: LD_INT 0
8610: PPUSH
8611: CALL 9080 0 1
// end ;
8615: END
// function InitStreamMode ; begin
8616: LD_INT 0
8618: PPUSH
// streamModeActive := false ;
8619: LD_ADDR_EXP 25
8623: PUSH
8624: LD_INT 0
8626: ST_TO_ADDR
// normalCounter := 36 ;
8627: LD_ADDR_EXP 26
8631: PUSH
8632: LD_INT 36
8634: ST_TO_ADDR
// hardcoreCounter := 18 ;
8635: LD_ADDR_EXP 27
8639: PUSH
8640: LD_INT 18
8642: ST_TO_ADDR
// sRocket := false ;
8643: LD_ADDR_EXP 30
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// sSpeed := false ;
8651: LD_ADDR_EXP 29
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// sEngine := false ;
8659: LD_ADDR_EXP 31
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// sSpec := false ;
8667: LD_ADDR_EXP 28
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// sLevel := false ;
8675: LD_ADDR_EXP 32
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// sArmoury := false ;
8683: LD_ADDR_EXP 33
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// sRadar := false ;
8691: LD_ADDR_EXP 34
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// sBunker := false ;
8699: LD_ADDR_EXP 35
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// sHack := false ;
8707: LD_ADDR_EXP 36
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// sFire := false ;
8715: LD_ADDR_EXP 37
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// sRefresh := false ;
8723: LD_ADDR_EXP 38
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// sExp := false ;
8731: LD_ADDR_EXP 39
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// sDepot := false ;
8739: LD_ADDR_EXP 40
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// sFlag := false ;
8747: LD_ADDR_EXP 41
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// sKamikadze := false ;
8755: LD_ADDR_EXP 49
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// sTroll := false ;
8763: LD_ADDR_EXP 50
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// sSlow := false ;
8771: LD_ADDR_EXP 51
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// sLack := false ;
8779: LD_ADDR_EXP 52
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sTank := false ;
8787: LD_ADDR_EXP 54
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// sRemote := false ;
8795: LD_ADDR_EXP 55
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// sPowell := false ;
8803: LD_ADDR_EXP 56
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// sTeleport := false ;
8811: LD_ADDR_EXP 59
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// sOilTower := false ;
8819: LD_ADDR_EXP 61
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// sShovel := false ;
8827: LD_ADDR_EXP 62
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// sSheik := false ;
8835: LD_ADDR_EXP 63
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// sEarthquake := false ;
8843: LD_ADDR_EXP 65
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// sAI := false ;
8851: LD_ADDR_EXP 66
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// sCargo := false ;
8859: LD_ADDR_EXP 69
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// sDLaser := false ;
8867: LD_ADDR_EXP 70
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// sExchange := false ;
8875: LD_ADDR_EXP 71
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// sFac := false ;
8883: LD_ADDR_EXP 72
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// sPower := false ;
8891: LD_ADDR_EXP 73
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// sRandom := false ;
8899: LD_ADDR_EXP 74
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// sShield := false ;
8907: LD_ADDR_EXP 75
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// sTime := false ;
8915: LD_ADDR_EXP 76
8919: PUSH
8920: LD_INT 0
8922: ST_TO_ADDR
// sTools := false ;
8923: LD_ADDR_EXP 77
8927: PUSH
8928: LD_INT 0
8930: ST_TO_ADDR
// sSold := false ;
8931: LD_ADDR_EXP 42
8935: PUSH
8936: LD_INT 0
8938: ST_TO_ADDR
// sDiff := false ;
8939: LD_ADDR_EXP 43
8943: PUSH
8944: LD_INT 0
8946: ST_TO_ADDR
// sFog := false ;
8947: LD_ADDR_EXP 46
8951: PUSH
8952: LD_INT 0
8954: ST_TO_ADDR
// sReset := false ;
8955: LD_ADDR_EXP 47
8959: PUSH
8960: LD_INT 0
8962: ST_TO_ADDR
// sSun := false ;
8963: LD_ADDR_EXP 48
8967: PUSH
8968: LD_INT 0
8970: ST_TO_ADDR
// sTiger := false ;
8971: LD_ADDR_EXP 44
8975: PUSH
8976: LD_INT 0
8978: ST_TO_ADDR
// sBomb := false ;
8979: LD_ADDR_EXP 45
8983: PUSH
8984: LD_INT 0
8986: ST_TO_ADDR
// sWound := false ;
8987: LD_ADDR_EXP 53
8991: PUSH
8992: LD_INT 0
8994: ST_TO_ADDR
// sBetray := false ;
8995: LD_ADDR_EXP 57
8999: PUSH
9000: LD_INT 0
9002: ST_TO_ADDR
// sContamin := false ;
9003: LD_ADDR_EXP 58
9007: PUSH
9008: LD_INT 0
9010: ST_TO_ADDR
// sOil := false ;
9011: LD_ADDR_EXP 60
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// sStu := false ;
9019: LD_ADDR_EXP 64
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// sBazooka := false ;
9027: LD_ADDR_EXP 67
9031: PUSH
9032: LD_INT 0
9034: ST_TO_ADDR
// sMortar := false ;
9035: LD_ADDR_EXP 68
9039: PUSH
9040: LD_INT 0
9042: ST_TO_ADDR
// sRanger := false ;
9043: LD_ADDR_EXP 78
9047: PUSH
9048: LD_INT 0
9050: ST_TO_ADDR
// sComputer := false ;
9051: LD_ADDR_EXP 79
9055: PUSH
9056: LD_INT 0
9058: ST_TO_ADDR
// s30 := false ;
9059: LD_ADDR_EXP 80
9063: PUSH
9064: LD_INT 0
9066: ST_TO_ADDR
// s60 := false ;
9067: LD_ADDR_EXP 81
9071: PUSH
9072: LD_INT 0
9074: ST_TO_ADDR
// end ;
9075: LD_VAR 0 1
9079: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9080: LD_INT 0
9082: PPUSH
9083: PPUSH
9084: PPUSH
9085: PPUSH
9086: PPUSH
9087: PPUSH
9088: PPUSH
// result := [ ] ;
9089: LD_ADDR_VAR 0 2
9093: PUSH
9094: EMPTY
9095: ST_TO_ADDR
// if campaign_id = 1 then
9096: LD_OWVAR 69
9100: PUSH
9101: LD_INT 1
9103: EQUAL
9104: IFFALSE 12270
// begin case mission_number of 1 :
9106: LD_OWVAR 70
9110: PUSH
9111: LD_INT 1
9113: DOUBLE
9114: EQUAL
9115: IFTRUE 9119
9117: GO 9195
9119: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9120: LD_ADDR_VAR 0 2
9124: PUSH
9125: LD_INT 2
9127: PUSH
9128: LD_INT 4
9130: PUSH
9131: LD_INT 11
9133: PUSH
9134: LD_INT 12
9136: PUSH
9137: LD_INT 15
9139: PUSH
9140: LD_INT 16
9142: PUSH
9143: LD_INT 22
9145: PUSH
9146: LD_INT 23
9148: PUSH
9149: LD_INT 26
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 101
9165: PUSH
9166: LD_INT 102
9168: PUSH
9169: LD_INT 106
9171: PUSH
9172: LD_INT 116
9174: PUSH
9175: LD_INT 117
9177: PUSH
9178: LD_INT 118
9180: PUSH
9181: EMPTY
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: ST_TO_ADDR
9193: GO 12268
9195: LD_INT 2
9197: DOUBLE
9198: EQUAL
9199: IFTRUE 9203
9201: GO 9287
9203: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9204: LD_ADDR_VAR 0 2
9208: PUSH
9209: LD_INT 2
9211: PUSH
9212: LD_INT 4
9214: PUSH
9215: LD_INT 11
9217: PUSH
9218: LD_INT 12
9220: PUSH
9221: LD_INT 15
9223: PUSH
9224: LD_INT 16
9226: PUSH
9227: LD_INT 22
9229: PUSH
9230: LD_INT 23
9232: PUSH
9233: LD_INT 26
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: LIST
9246: PUSH
9247: LD_INT 101
9249: PUSH
9250: LD_INT 102
9252: PUSH
9253: LD_INT 105
9255: PUSH
9256: LD_INT 106
9258: PUSH
9259: LD_INT 108
9261: PUSH
9262: LD_INT 116
9264: PUSH
9265: LD_INT 117
9267: PUSH
9268: LD_INT 118
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: ST_TO_ADDR
9285: GO 12268
9287: LD_INT 3
9289: DOUBLE
9290: EQUAL
9291: IFTRUE 9295
9293: GO 9383
9295: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9296: LD_ADDR_VAR 0 2
9300: PUSH
9301: LD_INT 2
9303: PUSH
9304: LD_INT 4
9306: PUSH
9307: LD_INT 5
9309: PUSH
9310: LD_INT 11
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: LD_INT 15
9318: PUSH
9319: LD_INT 16
9321: PUSH
9322: LD_INT 22
9324: PUSH
9325: LD_INT 26
9327: PUSH
9328: LD_INT 36
9330: PUSH
9331: EMPTY
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: LIST
9342: PUSH
9343: LD_INT 101
9345: PUSH
9346: LD_INT 102
9348: PUSH
9349: LD_INT 105
9351: PUSH
9352: LD_INT 106
9354: PUSH
9355: LD_INT 108
9357: PUSH
9358: LD_INT 116
9360: PUSH
9361: LD_INT 117
9363: PUSH
9364: LD_INT 118
9366: PUSH
9367: EMPTY
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: ST_TO_ADDR
9381: GO 12268
9383: LD_INT 4
9385: DOUBLE
9386: EQUAL
9387: IFTRUE 9391
9389: GO 9487
9391: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9392: LD_ADDR_VAR 0 2
9396: PUSH
9397: LD_INT 2
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 8
9408: PUSH
9409: LD_INT 11
9411: PUSH
9412: LD_INT 12
9414: PUSH
9415: LD_INT 15
9417: PUSH
9418: LD_INT 16
9420: PUSH
9421: LD_INT 22
9423: PUSH
9424: LD_INT 23
9426: PUSH
9427: LD_INT 26
9429: PUSH
9430: LD_INT 36
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 101
9449: PUSH
9450: LD_INT 102
9452: PUSH
9453: LD_INT 105
9455: PUSH
9456: LD_INT 106
9458: PUSH
9459: LD_INT 108
9461: PUSH
9462: LD_INT 116
9464: PUSH
9465: LD_INT 117
9467: PUSH
9468: LD_INT 118
9470: PUSH
9471: EMPTY
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: LIST
9480: PUSH
9481: EMPTY
9482: LIST
9483: LIST
9484: ST_TO_ADDR
9485: GO 12268
9487: LD_INT 5
9489: DOUBLE
9490: EQUAL
9491: IFTRUE 9495
9493: GO 9607
9495: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9496: LD_ADDR_VAR 0 2
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: LD_INT 4
9506: PUSH
9507: LD_INT 5
9509: PUSH
9510: LD_INT 6
9512: PUSH
9513: LD_INT 8
9515: PUSH
9516: LD_INT 11
9518: PUSH
9519: LD_INT 12
9521: PUSH
9522: LD_INT 15
9524: PUSH
9525: LD_INT 16
9527: PUSH
9528: LD_INT 22
9530: PUSH
9531: LD_INT 23
9533: PUSH
9534: LD_INT 25
9536: PUSH
9537: LD_INT 26
9539: PUSH
9540: LD_INT 36
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: LD_INT 101
9561: PUSH
9562: LD_INT 102
9564: PUSH
9565: LD_INT 105
9567: PUSH
9568: LD_INT 106
9570: PUSH
9571: LD_INT 108
9573: PUSH
9574: LD_INT 109
9576: PUSH
9577: LD_INT 112
9579: PUSH
9580: LD_INT 116
9582: PUSH
9583: LD_INT 117
9585: PUSH
9586: LD_INT 118
9588: PUSH
9589: EMPTY
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: ST_TO_ADDR
9605: GO 12268
9607: LD_INT 6
9609: DOUBLE
9610: EQUAL
9611: IFTRUE 9615
9613: GO 9747
9615: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9616: LD_ADDR_VAR 0 2
9620: PUSH
9621: LD_INT 2
9623: PUSH
9624: LD_INT 4
9626: PUSH
9627: LD_INT 5
9629: PUSH
9630: LD_INT 6
9632: PUSH
9633: LD_INT 8
9635: PUSH
9636: LD_INT 11
9638: PUSH
9639: LD_INT 12
9641: PUSH
9642: LD_INT 15
9644: PUSH
9645: LD_INT 16
9647: PUSH
9648: LD_INT 20
9650: PUSH
9651: LD_INT 21
9653: PUSH
9654: LD_INT 22
9656: PUSH
9657: LD_INT 23
9659: PUSH
9660: LD_INT 25
9662: PUSH
9663: LD_INT 26
9665: PUSH
9666: LD_INT 30
9668: PUSH
9669: LD_INT 31
9671: PUSH
9672: LD_INT 32
9674: PUSH
9675: LD_INT 36
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 101
9701: PUSH
9702: LD_INT 102
9704: PUSH
9705: LD_INT 105
9707: PUSH
9708: LD_INT 106
9710: PUSH
9711: LD_INT 108
9713: PUSH
9714: LD_INT 109
9716: PUSH
9717: LD_INT 112
9719: PUSH
9720: LD_INT 116
9722: PUSH
9723: LD_INT 117
9725: PUSH
9726: LD_INT 118
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: ST_TO_ADDR
9745: GO 12268
9747: LD_INT 7
9749: DOUBLE
9750: EQUAL
9751: IFTRUE 9755
9753: GO 9867
9755: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9756: LD_ADDR_VAR 0 2
9760: PUSH
9761: LD_INT 2
9763: PUSH
9764: LD_INT 4
9766: PUSH
9767: LD_INT 5
9769: PUSH
9770: LD_INT 7
9772: PUSH
9773: LD_INT 11
9775: PUSH
9776: LD_INT 12
9778: PUSH
9779: LD_INT 15
9781: PUSH
9782: LD_INT 16
9784: PUSH
9785: LD_INT 20
9787: PUSH
9788: LD_INT 21
9790: PUSH
9791: LD_INT 22
9793: PUSH
9794: LD_INT 23
9796: PUSH
9797: LD_INT 25
9799: PUSH
9800: LD_INT 26
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: PUSH
9819: LD_INT 101
9821: PUSH
9822: LD_INT 102
9824: PUSH
9825: LD_INT 103
9827: PUSH
9828: LD_INT 105
9830: PUSH
9831: LD_INT 106
9833: PUSH
9834: LD_INT 108
9836: PUSH
9837: LD_INT 112
9839: PUSH
9840: LD_INT 116
9842: PUSH
9843: LD_INT 117
9845: PUSH
9846: LD_INT 118
9848: PUSH
9849: EMPTY
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: ST_TO_ADDR
9865: GO 12268
9867: LD_INT 8
9869: DOUBLE
9870: EQUAL
9871: IFTRUE 9875
9873: GO 10015
9875: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9876: LD_ADDR_VAR 0 2
9880: PUSH
9881: LD_INT 2
9883: PUSH
9884: LD_INT 4
9886: PUSH
9887: LD_INT 5
9889: PUSH
9890: LD_INT 6
9892: PUSH
9893: LD_INT 7
9895: PUSH
9896: LD_INT 8
9898: PUSH
9899: LD_INT 11
9901: PUSH
9902: LD_INT 12
9904: PUSH
9905: LD_INT 15
9907: PUSH
9908: LD_INT 16
9910: PUSH
9911: LD_INT 20
9913: PUSH
9914: LD_INT 21
9916: PUSH
9917: LD_INT 22
9919: PUSH
9920: LD_INT 23
9922: PUSH
9923: LD_INT 25
9925: PUSH
9926: LD_INT 26
9928: PUSH
9929: LD_INT 30
9931: PUSH
9932: LD_INT 31
9934: PUSH
9935: LD_INT 32
9937: PUSH
9938: LD_INT 36
9940: PUSH
9941: EMPTY
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 101
9965: PUSH
9966: LD_INT 102
9968: PUSH
9969: LD_INT 103
9971: PUSH
9972: LD_INT 105
9974: PUSH
9975: LD_INT 106
9977: PUSH
9978: LD_INT 108
9980: PUSH
9981: LD_INT 109
9983: PUSH
9984: LD_INT 112
9986: PUSH
9987: LD_INT 116
9989: PUSH
9990: LD_INT 117
9992: PUSH
9993: LD_INT 118
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: ST_TO_ADDR
10013: GO 12268
10015: LD_INT 9
10017: DOUBLE
10018: EQUAL
10019: IFTRUE 10023
10021: GO 10171
10023: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10024: LD_ADDR_VAR 0 2
10028: PUSH
10029: LD_INT 2
10031: PUSH
10032: LD_INT 4
10034: PUSH
10035: LD_INT 5
10037: PUSH
10038: LD_INT 6
10040: PUSH
10041: LD_INT 7
10043: PUSH
10044: LD_INT 8
10046: PUSH
10047: LD_INT 11
10049: PUSH
10050: LD_INT 12
10052: PUSH
10053: LD_INT 15
10055: PUSH
10056: LD_INT 16
10058: PUSH
10059: LD_INT 20
10061: PUSH
10062: LD_INT 21
10064: PUSH
10065: LD_INT 22
10067: PUSH
10068: LD_INT 23
10070: PUSH
10071: LD_INT 25
10073: PUSH
10074: LD_INT 26
10076: PUSH
10077: LD_INT 28
10079: PUSH
10080: LD_INT 30
10082: PUSH
10083: LD_INT 31
10085: PUSH
10086: LD_INT 32
10088: PUSH
10089: LD_INT 36
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: PUSH
10115: LD_INT 101
10117: PUSH
10118: LD_INT 102
10120: PUSH
10121: LD_INT 103
10123: PUSH
10124: LD_INT 105
10126: PUSH
10127: LD_INT 106
10129: PUSH
10130: LD_INT 108
10132: PUSH
10133: LD_INT 109
10135: PUSH
10136: LD_INT 112
10138: PUSH
10139: LD_INT 114
10141: PUSH
10142: LD_INT 116
10144: PUSH
10145: LD_INT 117
10147: PUSH
10148: LD_INT 118
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: ST_TO_ADDR
10169: GO 12268
10171: LD_INT 10
10173: DOUBLE
10174: EQUAL
10175: IFTRUE 10179
10177: GO 10375
10179: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10180: LD_ADDR_VAR 0 2
10184: PUSH
10185: LD_INT 2
10187: PUSH
10188: LD_INT 4
10190: PUSH
10191: LD_INT 5
10193: PUSH
10194: LD_INT 6
10196: PUSH
10197: LD_INT 7
10199: PUSH
10200: LD_INT 8
10202: PUSH
10203: LD_INT 9
10205: PUSH
10206: LD_INT 10
10208: PUSH
10209: LD_INT 11
10211: PUSH
10212: LD_INT 12
10214: PUSH
10215: LD_INT 13
10217: PUSH
10218: LD_INT 14
10220: PUSH
10221: LD_INT 15
10223: PUSH
10224: LD_INT 16
10226: PUSH
10227: LD_INT 17
10229: PUSH
10230: LD_INT 18
10232: PUSH
10233: LD_INT 19
10235: PUSH
10236: LD_INT 20
10238: PUSH
10239: LD_INT 21
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_INT 23
10247: PUSH
10248: LD_INT 24
10250: PUSH
10251: LD_INT 25
10253: PUSH
10254: LD_INT 26
10256: PUSH
10257: LD_INT 28
10259: PUSH
10260: LD_INT 30
10262: PUSH
10263: LD_INT 31
10265: PUSH
10266: LD_INT 32
10268: PUSH
10269: LD_INT 36
10271: PUSH
10272: EMPTY
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 101
10305: PUSH
10306: LD_INT 102
10308: PUSH
10309: LD_INT 103
10311: PUSH
10312: LD_INT 104
10314: PUSH
10315: LD_INT 105
10317: PUSH
10318: LD_INT 106
10320: PUSH
10321: LD_INT 107
10323: PUSH
10324: LD_INT 108
10326: PUSH
10327: LD_INT 109
10329: PUSH
10330: LD_INT 110
10332: PUSH
10333: LD_INT 111
10335: PUSH
10336: LD_INT 112
10338: PUSH
10339: LD_INT 114
10341: PUSH
10342: LD_INT 116
10344: PUSH
10345: LD_INT 117
10347: PUSH
10348: LD_INT 118
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: PUSH
10369: EMPTY
10370: LIST
10371: LIST
10372: ST_TO_ADDR
10373: GO 12268
10375: LD_INT 11
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10587
10383: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10384: LD_ADDR_VAR 0 2
10388: PUSH
10389: LD_INT 2
10391: PUSH
10392: LD_INT 3
10394: PUSH
10395: LD_INT 4
10397: PUSH
10398: LD_INT 5
10400: PUSH
10401: LD_INT 6
10403: PUSH
10404: LD_INT 7
10406: PUSH
10407: LD_INT 8
10409: PUSH
10410: LD_INT 9
10412: PUSH
10413: LD_INT 10
10415: PUSH
10416: LD_INT 11
10418: PUSH
10419: LD_INT 12
10421: PUSH
10422: LD_INT 13
10424: PUSH
10425: LD_INT 14
10427: PUSH
10428: LD_INT 15
10430: PUSH
10431: LD_INT 16
10433: PUSH
10434: LD_INT 17
10436: PUSH
10437: LD_INT 18
10439: PUSH
10440: LD_INT 19
10442: PUSH
10443: LD_INT 20
10445: PUSH
10446: LD_INT 21
10448: PUSH
10449: LD_INT 22
10451: PUSH
10452: LD_INT 23
10454: PUSH
10455: LD_INT 24
10457: PUSH
10458: LD_INT 25
10460: PUSH
10461: LD_INT 26
10463: PUSH
10464: LD_INT 28
10466: PUSH
10467: LD_INT 30
10469: PUSH
10470: LD_INT 31
10472: PUSH
10473: LD_INT 32
10475: PUSH
10476: LD_INT 34
10478: PUSH
10479: LD_INT 36
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 101
10517: PUSH
10518: LD_INT 102
10520: PUSH
10521: LD_INT 103
10523: PUSH
10524: LD_INT 104
10526: PUSH
10527: LD_INT 105
10529: PUSH
10530: LD_INT 106
10532: PUSH
10533: LD_INT 107
10535: PUSH
10536: LD_INT 108
10538: PUSH
10539: LD_INT 109
10541: PUSH
10542: LD_INT 110
10544: PUSH
10545: LD_INT 111
10547: PUSH
10548: LD_INT 112
10550: PUSH
10551: LD_INT 114
10553: PUSH
10554: LD_INT 116
10556: PUSH
10557: LD_INT 117
10559: PUSH
10560: LD_INT 118
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: ST_TO_ADDR
10585: GO 12268
10587: LD_INT 12
10589: DOUBLE
10590: EQUAL
10591: IFTRUE 10595
10593: GO 10815
10595: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10596: LD_ADDR_VAR 0 2
10600: PUSH
10601: LD_INT 1
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: LD_INT 4
10612: PUSH
10613: LD_INT 5
10615: PUSH
10616: LD_INT 6
10618: PUSH
10619: LD_INT 7
10621: PUSH
10622: LD_INT 8
10624: PUSH
10625: LD_INT 9
10627: PUSH
10628: LD_INT 10
10630: PUSH
10631: LD_INT 11
10633: PUSH
10634: LD_INT 12
10636: PUSH
10637: LD_INT 13
10639: PUSH
10640: LD_INT 14
10642: PUSH
10643: LD_INT 15
10645: PUSH
10646: LD_INT 16
10648: PUSH
10649: LD_INT 17
10651: PUSH
10652: LD_INT 18
10654: PUSH
10655: LD_INT 19
10657: PUSH
10658: LD_INT 20
10660: PUSH
10661: LD_INT 21
10663: PUSH
10664: LD_INT 22
10666: PUSH
10667: LD_INT 23
10669: PUSH
10670: LD_INT 24
10672: PUSH
10673: LD_INT 25
10675: PUSH
10676: LD_INT 26
10678: PUSH
10679: LD_INT 27
10681: PUSH
10682: LD_INT 28
10684: PUSH
10685: LD_INT 30
10687: PUSH
10688: LD_INT 31
10690: PUSH
10691: LD_INT 32
10693: PUSH
10694: LD_INT 33
10696: PUSH
10697: LD_INT 34
10699: PUSH
10700: LD_INT 36
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 101
10741: PUSH
10742: LD_INT 102
10744: PUSH
10745: LD_INT 103
10747: PUSH
10748: LD_INT 104
10750: PUSH
10751: LD_INT 105
10753: PUSH
10754: LD_INT 106
10756: PUSH
10757: LD_INT 107
10759: PUSH
10760: LD_INT 108
10762: PUSH
10763: LD_INT 109
10765: PUSH
10766: LD_INT 110
10768: PUSH
10769: LD_INT 111
10771: PUSH
10772: LD_INT 112
10774: PUSH
10775: LD_INT 113
10777: PUSH
10778: LD_INT 114
10780: PUSH
10781: LD_INT 116
10783: PUSH
10784: LD_INT 117
10786: PUSH
10787: LD_INT 118
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: EMPTY
10810: LIST
10811: LIST
10812: ST_TO_ADDR
10813: GO 12268
10815: LD_INT 13
10817: DOUBLE
10818: EQUAL
10819: IFTRUE 10823
10821: GO 11031
10823: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10824: LD_ADDR_VAR 0 2
10828: PUSH
10829: LD_INT 1
10831: PUSH
10832: LD_INT 2
10834: PUSH
10835: LD_INT 3
10837: PUSH
10838: LD_INT 4
10840: PUSH
10841: LD_INT 5
10843: PUSH
10844: LD_INT 8
10846: PUSH
10847: LD_INT 9
10849: PUSH
10850: LD_INT 10
10852: PUSH
10853: LD_INT 11
10855: PUSH
10856: LD_INT 12
10858: PUSH
10859: LD_INT 14
10861: PUSH
10862: LD_INT 15
10864: PUSH
10865: LD_INT 16
10867: PUSH
10868: LD_INT 17
10870: PUSH
10871: LD_INT 18
10873: PUSH
10874: LD_INT 19
10876: PUSH
10877: LD_INT 20
10879: PUSH
10880: LD_INT 21
10882: PUSH
10883: LD_INT 22
10885: PUSH
10886: LD_INT 23
10888: PUSH
10889: LD_INT 24
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 26
10897: PUSH
10898: LD_INT 27
10900: PUSH
10901: LD_INT 28
10903: PUSH
10904: LD_INT 30
10906: PUSH
10907: LD_INT 31
10909: PUSH
10910: LD_INT 32
10912: PUSH
10913: LD_INT 33
10915: PUSH
10916: LD_INT 34
10918: PUSH
10919: LD_INT 36
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: LD_INT 101
10957: PUSH
10958: LD_INT 102
10960: PUSH
10961: LD_INT 103
10963: PUSH
10964: LD_INT 104
10966: PUSH
10967: LD_INT 105
10969: PUSH
10970: LD_INT 106
10972: PUSH
10973: LD_INT 107
10975: PUSH
10976: LD_INT 108
10978: PUSH
10979: LD_INT 109
10981: PUSH
10982: LD_INT 110
10984: PUSH
10985: LD_INT 111
10987: PUSH
10988: LD_INT 112
10990: PUSH
10991: LD_INT 113
10993: PUSH
10994: LD_INT 114
10996: PUSH
10997: LD_INT 116
10999: PUSH
11000: LD_INT 117
11002: PUSH
11003: LD_INT 118
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: ST_TO_ADDR
11029: GO 12268
11031: LD_INT 14
11033: DOUBLE
11034: EQUAL
11035: IFTRUE 11039
11037: GO 11263
11039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11040: LD_ADDR_VAR 0 2
11044: PUSH
11045: LD_INT 1
11047: PUSH
11048: LD_INT 2
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: LD_INT 4
11056: PUSH
11057: LD_INT 5
11059: PUSH
11060: LD_INT 6
11062: PUSH
11063: LD_INT 7
11065: PUSH
11066: LD_INT 8
11068: PUSH
11069: LD_INT 9
11071: PUSH
11072: LD_INT 10
11074: PUSH
11075: LD_INT 11
11077: PUSH
11078: LD_INT 12
11080: PUSH
11081: LD_INT 13
11083: PUSH
11084: LD_INT 14
11086: PUSH
11087: LD_INT 15
11089: PUSH
11090: LD_INT 16
11092: PUSH
11093: LD_INT 17
11095: PUSH
11096: LD_INT 18
11098: PUSH
11099: LD_INT 19
11101: PUSH
11102: LD_INT 20
11104: PUSH
11105: LD_INT 21
11107: PUSH
11108: LD_INT 22
11110: PUSH
11111: LD_INT 23
11113: PUSH
11114: LD_INT 24
11116: PUSH
11117: LD_INT 25
11119: PUSH
11120: LD_INT 26
11122: PUSH
11123: LD_INT 27
11125: PUSH
11126: LD_INT 28
11128: PUSH
11129: LD_INT 29
11131: PUSH
11132: LD_INT 30
11134: PUSH
11135: LD_INT 31
11137: PUSH
11138: LD_INT 32
11140: PUSH
11141: LD_INT 33
11143: PUSH
11144: LD_INT 34
11146: PUSH
11147: LD_INT 36
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 101
11189: PUSH
11190: LD_INT 102
11192: PUSH
11193: LD_INT 103
11195: PUSH
11196: LD_INT 104
11198: PUSH
11199: LD_INT 105
11201: PUSH
11202: LD_INT 106
11204: PUSH
11205: LD_INT 107
11207: PUSH
11208: LD_INT 108
11210: PUSH
11211: LD_INT 109
11213: PUSH
11214: LD_INT 110
11216: PUSH
11217: LD_INT 111
11219: PUSH
11220: LD_INT 112
11222: PUSH
11223: LD_INT 113
11225: PUSH
11226: LD_INT 114
11228: PUSH
11229: LD_INT 116
11231: PUSH
11232: LD_INT 117
11234: PUSH
11235: LD_INT 118
11237: PUSH
11238: EMPTY
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: ST_TO_ADDR
11261: GO 12268
11263: LD_INT 15
11265: DOUBLE
11266: EQUAL
11267: IFTRUE 11271
11269: GO 11495
11271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11272: LD_ADDR_VAR 0 2
11276: PUSH
11277: LD_INT 1
11279: PUSH
11280: LD_INT 2
11282: PUSH
11283: LD_INT 3
11285: PUSH
11286: LD_INT 4
11288: PUSH
11289: LD_INT 5
11291: PUSH
11292: LD_INT 6
11294: PUSH
11295: LD_INT 7
11297: PUSH
11298: LD_INT 8
11300: PUSH
11301: LD_INT 9
11303: PUSH
11304: LD_INT 10
11306: PUSH
11307: LD_INT 11
11309: PUSH
11310: LD_INT 12
11312: PUSH
11313: LD_INT 13
11315: PUSH
11316: LD_INT 14
11318: PUSH
11319: LD_INT 15
11321: PUSH
11322: LD_INT 16
11324: PUSH
11325: LD_INT 17
11327: PUSH
11328: LD_INT 18
11330: PUSH
11331: LD_INT 19
11333: PUSH
11334: LD_INT 20
11336: PUSH
11337: LD_INT 21
11339: PUSH
11340: LD_INT 22
11342: PUSH
11343: LD_INT 23
11345: PUSH
11346: LD_INT 24
11348: PUSH
11349: LD_INT 25
11351: PUSH
11352: LD_INT 26
11354: PUSH
11355: LD_INT 27
11357: PUSH
11358: LD_INT 28
11360: PUSH
11361: LD_INT 29
11363: PUSH
11364: LD_INT 30
11366: PUSH
11367: LD_INT 31
11369: PUSH
11370: LD_INT 32
11372: PUSH
11373: LD_INT 33
11375: PUSH
11376: LD_INT 34
11378: PUSH
11379: LD_INT 36
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 101
11421: PUSH
11422: LD_INT 102
11424: PUSH
11425: LD_INT 103
11427: PUSH
11428: LD_INT 104
11430: PUSH
11431: LD_INT 105
11433: PUSH
11434: LD_INT 106
11436: PUSH
11437: LD_INT 107
11439: PUSH
11440: LD_INT 108
11442: PUSH
11443: LD_INT 109
11445: PUSH
11446: LD_INT 110
11448: PUSH
11449: LD_INT 111
11451: PUSH
11452: LD_INT 112
11454: PUSH
11455: LD_INT 113
11457: PUSH
11458: LD_INT 114
11460: PUSH
11461: LD_INT 116
11463: PUSH
11464: LD_INT 117
11466: PUSH
11467: LD_INT 118
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: ST_TO_ADDR
11493: GO 12268
11495: LD_INT 16
11497: DOUBLE
11498: EQUAL
11499: IFTRUE 11503
11501: GO 11639
11503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11504: LD_ADDR_VAR 0 2
11508: PUSH
11509: LD_INT 2
11511: PUSH
11512: LD_INT 4
11514: PUSH
11515: LD_INT 5
11517: PUSH
11518: LD_INT 7
11520: PUSH
11521: LD_INT 11
11523: PUSH
11524: LD_INT 12
11526: PUSH
11527: LD_INT 15
11529: PUSH
11530: LD_INT 16
11532: PUSH
11533: LD_INT 20
11535: PUSH
11536: LD_INT 21
11538: PUSH
11539: LD_INT 22
11541: PUSH
11542: LD_INT 23
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 26
11550: PUSH
11551: LD_INT 30
11553: PUSH
11554: LD_INT 31
11556: PUSH
11557: LD_INT 32
11559: PUSH
11560: LD_INT 33
11562: PUSH
11563: LD_INT 34
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 101
11589: PUSH
11590: LD_INT 102
11592: PUSH
11593: LD_INT 103
11595: PUSH
11596: LD_INT 106
11598: PUSH
11599: LD_INT 108
11601: PUSH
11602: LD_INT 112
11604: PUSH
11605: LD_INT 113
11607: PUSH
11608: LD_INT 114
11610: PUSH
11611: LD_INT 116
11613: PUSH
11614: LD_INT 117
11616: PUSH
11617: LD_INT 118
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: ST_TO_ADDR
11637: GO 12268
11639: LD_INT 17
11641: DOUBLE
11642: EQUAL
11643: IFTRUE 11647
11645: GO 11871
11647: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11648: LD_ADDR_VAR 0 2
11652: PUSH
11653: LD_INT 1
11655: PUSH
11656: LD_INT 2
11658: PUSH
11659: LD_INT 3
11661: PUSH
11662: LD_INT 4
11664: PUSH
11665: LD_INT 5
11667: PUSH
11668: LD_INT 6
11670: PUSH
11671: LD_INT 7
11673: PUSH
11674: LD_INT 8
11676: PUSH
11677: LD_INT 9
11679: PUSH
11680: LD_INT 10
11682: PUSH
11683: LD_INT 11
11685: PUSH
11686: LD_INT 12
11688: PUSH
11689: LD_INT 13
11691: PUSH
11692: LD_INT 14
11694: PUSH
11695: LD_INT 15
11697: PUSH
11698: LD_INT 16
11700: PUSH
11701: LD_INT 17
11703: PUSH
11704: LD_INT 18
11706: PUSH
11707: LD_INT 19
11709: PUSH
11710: LD_INT 20
11712: PUSH
11713: LD_INT 21
11715: PUSH
11716: LD_INT 22
11718: PUSH
11719: LD_INT 23
11721: PUSH
11722: LD_INT 24
11724: PUSH
11725: LD_INT 25
11727: PUSH
11728: LD_INT 26
11730: PUSH
11731: LD_INT 27
11733: PUSH
11734: LD_INT 28
11736: PUSH
11737: LD_INT 29
11739: PUSH
11740: LD_INT 30
11742: PUSH
11743: LD_INT 31
11745: PUSH
11746: LD_INT 32
11748: PUSH
11749: LD_INT 33
11751: PUSH
11752: LD_INT 34
11754: PUSH
11755: LD_INT 36
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 101
11797: PUSH
11798: LD_INT 102
11800: PUSH
11801: LD_INT 103
11803: PUSH
11804: LD_INT 104
11806: PUSH
11807: LD_INT 105
11809: PUSH
11810: LD_INT 106
11812: PUSH
11813: LD_INT 107
11815: PUSH
11816: LD_INT 108
11818: PUSH
11819: LD_INT 109
11821: PUSH
11822: LD_INT 110
11824: PUSH
11825: LD_INT 111
11827: PUSH
11828: LD_INT 112
11830: PUSH
11831: LD_INT 113
11833: PUSH
11834: LD_INT 114
11836: PUSH
11837: LD_INT 116
11839: PUSH
11840: LD_INT 117
11842: PUSH
11843: LD_INT 118
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: ST_TO_ADDR
11869: GO 12268
11871: LD_INT 18
11873: DOUBLE
11874: EQUAL
11875: IFTRUE 11879
11877: GO 12027
11879: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11880: LD_ADDR_VAR 0 2
11884: PUSH
11885: LD_INT 2
11887: PUSH
11888: LD_INT 4
11890: PUSH
11891: LD_INT 5
11893: PUSH
11894: LD_INT 7
11896: PUSH
11897: LD_INT 11
11899: PUSH
11900: LD_INT 12
11902: PUSH
11903: LD_INT 15
11905: PUSH
11906: LD_INT 16
11908: PUSH
11909: LD_INT 20
11911: PUSH
11912: LD_INT 21
11914: PUSH
11915: LD_INT 22
11917: PUSH
11918: LD_INT 23
11920: PUSH
11921: LD_INT 25
11923: PUSH
11924: LD_INT 26
11926: PUSH
11927: LD_INT 30
11929: PUSH
11930: LD_INT 31
11932: PUSH
11933: LD_INT 32
11935: PUSH
11936: LD_INT 33
11938: PUSH
11939: LD_INT 34
11941: PUSH
11942: LD_INT 35
11944: PUSH
11945: LD_INT 36
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 101
11973: PUSH
11974: LD_INT 102
11976: PUSH
11977: LD_INT 103
11979: PUSH
11980: LD_INT 106
11982: PUSH
11983: LD_INT 108
11985: PUSH
11986: LD_INT 112
11988: PUSH
11989: LD_INT 113
11991: PUSH
11992: LD_INT 114
11994: PUSH
11995: LD_INT 115
11997: PUSH
11998: LD_INT 116
12000: PUSH
12001: LD_INT 117
12003: PUSH
12004: LD_INT 118
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: ST_TO_ADDR
12025: GO 12268
12027: LD_INT 19
12029: DOUBLE
12030: EQUAL
12031: IFTRUE 12035
12033: GO 12267
12035: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12036: LD_ADDR_VAR 0 2
12040: PUSH
12041: LD_INT 1
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: LD_INT 3
12049: PUSH
12050: LD_INT 4
12052: PUSH
12053: LD_INT 5
12055: PUSH
12056: LD_INT 6
12058: PUSH
12059: LD_INT 7
12061: PUSH
12062: LD_INT 8
12064: PUSH
12065: LD_INT 9
12067: PUSH
12068: LD_INT 10
12070: PUSH
12071: LD_INT 11
12073: PUSH
12074: LD_INT 12
12076: PUSH
12077: LD_INT 13
12079: PUSH
12080: LD_INT 14
12082: PUSH
12083: LD_INT 15
12085: PUSH
12086: LD_INT 16
12088: PUSH
12089: LD_INT 17
12091: PUSH
12092: LD_INT 18
12094: PUSH
12095: LD_INT 19
12097: PUSH
12098: LD_INT 20
12100: PUSH
12101: LD_INT 21
12103: PUSH
12104: LD_INT 22
12106: PUSH
12107: LD_INT 23
12109: PUSH
12110: LD_INT 24
12112: PUSH
12113: LD_INT 25
12115: PUSH
12116: LD_INT 26
12118: PUSH
12119: LD_INT 27
12121: PUSH
12122: LD_INT 28
12124: PUSH
12125: LD_INT 29
12127: PUSH
12128: LD_INT 30
12130: PUSH
12131: LD_INT 31
12133: PUSH
12134: LD_INT 32
12136: PUSH
12137: LD_INT 33
12139: PUSH
12140: LD_INT 34
12142: PUSH
12143: LD_INT 35
12145: PUSH
12146: LD_INT 36
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 101
12189: PUSH
12190: LD_INT 102
12192: PUSH
12193: LD_INT 103
12195: PUSH
12196: LD_INT 104
12198: PUSH
12199: LD_INT 105
12201: PUSH
12202: LD_INT 106
12204: PUSH
12205: LD_INT 107
12207: PUSH
12208: LD_INT 108
12210: PUSH
12211: LD_INT 109
12213: PUSH
12214: LD_INT 110
12216: PUSH
12217: LD_INT 111
12219: PUSH
12220: LD_INT 112
12222: PUSH
12223: LD_INT 113
12225: PUSH
12226: LD_INT 114
12228: PUSH
12229: LD_INT 115
12231: PUSH
12232: LD_INT 116
12234: PUSH
12235: LD_INT 117
12237: PUSH
12238: LD_INT 118
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: ST_TO_ADDR
12265: GO 12268
12267: POP
// end else
12268: GO 12499
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12270: LD_ADDR_VAR 0 2
12274: PUSH
12275: LD_INT 1
12277: PUSH
12278: LD_INT 2
12280: PUSH
12281: LD_INT 3
12283: PUSH
12284: LD_INT 4
12286: PUSH
12287: LD_INT 5
12289: PUSH
12290: LD_INT 6
12292: PUSH
12293: LD_INT 7
12295: PUSH
12296: LD_INT 8
12298: PUSH
12299: LD_INT 9
12301: PUSH
12302: LD_INT 10
12304: PUSH
12305: LD_INT 11
12307: PUSH
12308: LD_INT 12
12310: PUSH
12311: LD_INT 13
12313: PUSH
12314: LD_INT 14
12316: PUSH
12317: LD_INT 15
12319: PUSH
12320: LD_INT 16
12322: PUSH
12323: LD_INT 17
12325: PUSH
12326: LD_INT 18
12328: PUSH
12329: LD_INT 19
12331: PUSH
12332: LD_INT 20
12334: PUSH
12335: LD_INT 21
12337: PUSH
12338: LD_INT 22
12340: PUSH
12341: LD_INT 23
12343: PUSH
12344: LD_INT 24
12346: PUSH
12347: LD_INT 25
12349: PUSH
12350: LD_INT 26
12352: PUSH
12353: LD_INT 27
12355: PUSH
12356: LD_INT 28
12358: PUSH
12359: LD_INT 29
12361: PUSH
12362: LD_INT 30
12364: PUSH
12365: LD_INT 31
12367: PUSH
12368: LD_INT 32
12370: PUSH
12371: LD_INT 33
12373: PUSH
12374: LD_INT 34
12376: PUSH
12377: LD_INT 35
12379: PUSH
12380: LD_INT 36
12382: PUSH
12383: EMPTY
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 101
12423: PUSH
12424: LD_INT 102
12426: PUSH
12427: LD_INT 103
12429: PUSH
12430: LD_INT 104
12432: PUSH
12433: LD_INT 105
12435: PUSH
12436: LD_INT 106
12438: PUSH
12439: LD_INT 107
12441: PUSH
12442: LD_INT 108
12444: PUSH
12445: LD_INT 109
12447: PUSH
12448: LD_INT 110
12450: PUSH
12451: LD_INT 111
12453: PUSH
12454: LD_INT 112
12456: PUSH
12457: LD_INT 113
12459: PUSH
12460: LD_INT 114
12462: PUSH
12463: LD_INT 115
12465: PUSH
12466: LD_INT 116
12468: PUSH
12469: LD_INT 117
12471: PUSH
12472: LD_INT 118
12474: PUSH
12475: EMPTY
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: ST_TO_ADDR
// if result then
12499: LD_VAR 0 2
12503: IFFALSE 13289
// begin normal :=  ;
12505: LD_ADDR_VAR 0 5
12509: PUSH
12510: LD_STRING 
12512: ST_TO_ADDR
// hardcore :=  ;
12513: LD_ADDR_VAR 0 6
12517: PUSH
12518: LD_STRING 
12520: ST_TO_ADDR
// active :=  ;
12521: LD_ADDR_VAR 0 7
12525: PUSH
12526: LD_STRING 
12528: ST_TO_ADDR
// for i = 1 to normalCounter do
12529: LD_ADDR_VAR 0 8
12533: PUSH
12534: DOUBLE
12535: LD_INT 1
12537: DEC
12538: ST_TO_ADDR
12539: LD_EXP 26
12543: PUSH
12544: FOR_TO
12545: IFFALSE 12646
// begin tmp := 0 ;
12547: LD_ADDR_VAR 0 3
12551: PUSH
12552: LD_STRING 0
12554: ST_TO_ADDR
// if result [ 1 ] then
12555: LD_VAR 0 2
12559: PUSH
12560: LD_INT 1
12562: ARRAY
12563: IFFALSE 12628
// if result [ 1 ] [ 1 ] = i then
12565: LD_VAR 0 2
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: PUSH
12578: LD_VAR 0 8
12582: EQUAL
12583: IFFALSE 12628
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12585: LD_ADDR_VAR 0 2
12589: PUSH
12590: LD_VAR 0 2
12594: PPUSH
12595: LD_INT 1
12597: PPUSH
12598: LD_VAR 0 2
12602: PUSH
12603: LD_INT 1
12605: ARRAY
12606: PPUSH
12607: LD_INT 1
12609: PPUSH
12610: CALL_OW 3
12614: PPUSH
12615: CALL_OW 1
12619: ST_TO_ADDR
// tmp := 1 ;
12620: LD_ADDR_VAR 0 3
12624: PUSH
12625: LD_STRING 1
12627: ST_TO_ADDR
// end ; normal := normal & tmp ;
12628: LD_ADDR_VAR 0 5
12632: PUSH
12633: LD_VAR 0 5
12637: PUSH
12638: LD_VAR 0 3
12642: STR
12643: ST_TO_ADDR
// end ;
12644: GO 12544
12646: POP
12647: POP
// for i = 1 to hardcoreCounter do
12648: LD_ADDR_VAR 0 8
12652: PUSH
12653: DOUBLE
12654: LD_INT 1
12656: DEC
12657: ST_TO_ADDR
12658: LD_EXP 27
12662: PUSH
12663: FOR_TO
12664: IFFALSE 12769
// begin tmp := 0 ;
12666: LD_ADDR_VAR 0 3
12670: PUSH
12671: LD_STRING 0
12673: ST_TO_ADDR
// if result [ 2 ] then
12674: LD_VAR 0 2
12678: PUSH
12679: LD_INT 2
12681: ARRAY
12682: IFFALSE 12751
// if result [ 2 ] [ 1 ] = 100 + i then
12684: LD_VAR 0 2
12688: PUSH
12689: LD_INT 2
12691: ARRAY
12692: PUSH
12693: LD_INT 1
12695: ARRAY
12696: PUSH
12697: LD_INT 100
12699: PUSH
12700: LD_VAR 0 8
12704: PLUS
12705: EQUAL
12706: IFFALSE 12751
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12708: LD_ADDR_VAR 0 2
12712: PUSH
12713: LD_VAR 0 2
12717: PPUSH
12718: LD_INT 2
12720: PPUSH
12721: LD_VAR 0 2
12725: PUSH
12726: LD_INT 2
12728: ARRAY
12729: PPUSH
12730: LD_INT 1
12732: PPUSH
12733: CALL_OW 3
12737: PPUSH
12738: CALL_OW 1
12742: ST_TO_ADDR
// tmp := 1 ;
12743: LD_ADDR_VAR 0 3
12747: PUSH
12748: LD_STRING 1
12750: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12751: LD_ADDR_VAR 0 6
12755: PUSH
12756: LD_VAR 0 6
12760: PUSH
12761: LD_VAR 0 3
12765: STR
12766: ST_TO_ADDR
// end ;
12767: GO 12663
12769: POP
12770: POP
// if isGameLoad then
12771: LD_VAR 0 1
12775: IFFALSE 13250
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12777: LD_ADDR_VAR 0 4
12781: PUSH
12782: LD_EXP 30
12786: PUSH
12787: LD_EXP 29
12791: PUSH
12792: LD_EXP 31
12796: PUSH
12797: LD_EXP 28
12801: PUSH
12802: LD_EXP 32
12806: PUSH
12807: LD_EXP 33
12811: PUSH
12812: LD_EXP 34
12816: PUSH
12817: LD_EXP 35
12821: PUSH
12822: LD_EXP 36
12826: PUSH
12827: LD_EXP 37
12831: PUSH
12832: LD_EXP 38
12836: PUSH
12837: LD_EXP 39
12841: PUSH
12842: LD_EXP 40
12846: PUSH
12847: LD_EXP 41
12851: PUSH
12852: LD_EXP 49
12856: PUSH
12857: LD_EXP 50
12861: PUSH
12862: LD_EXP 51
12866: PUSH
12867: LD_EXP 52
12871: PUSH
12872: LD_EXP 54
12876: PUSH
12877: LD_EXP 55
12881: PUSH
12882: LD_EXP 56
12886: PUSH
12887: LD_EXP 59
12891: PUSH
12892: LD_EXP 61
12896: PUSH
12897: LD_EXP 62
12901: PUSH
12902: LD_EXP 63
12906: PUSH
12907: LD_EXP 65
12911: PUSH
12912: LD_EXP 66
12916: PUSH
12917: LD_EXP 69
12921: PUSH
12922: LD_EXP 70
12926: PUSH
12927: LD_EXP 71
12931: PUSH
12932: LD_EXP 72
12936: PUSH
12937: LD_EXP 73
12941: PUSH
12942: LD_EXP 74
12946: PUSH
12947: LD_EXP 75
12951: PUSH
12952: LD_EXP 76
12956: PUSH
12957: LD_EXP 77
12961: PUSH
12962: LD_EXP 42
12966: PUSH
12967: LD_EXP 43
12971: PUSH
12972: LD_EXP 46
12976: PUSH
12977: LD_EXP 47
12981: PUSH
12982: LD_EXP 48
12986: PUSH
12987: LD_EXP 44
12991: PUSH
12992: LD_EXP 45
12996: PUSH
12997: LD_EXP 53
13001: PUSH
13002: LD_EXP 57
13006: PUSH
13007: LD_EXP 58
13011: PUSH
13012: LD_EXP 60
13016: PUSH
13017: LD_EXP 64
13021: PUSH
13022: LD_EXP 67
13026: PUSH
13027: LD_EXP 68
13031: PUSH
13032: LD_EXP 78
13036: PUSH
13037: LD_EXP 79
13041: PUSH
13042: LD_EXP 80
13046: PUSH
13047: LD_EXP 81
13051: PUSH
13052: EMPTY
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: ST_TO_ADDR
// tmp :=  ;
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// for i = 1 to normalCounter do
13116: LD_ADDR_VAR 0 8
13120: PUSH
13121: DOUBLE
13122: LD_INT 1
13124: DEC
13125: ST_TO_ADDR
13126: LD_EXP 26
13130: PUSH
13131: FOR_TO
13132: IFFALSE 13168
// begin if flags [ i ] then
13134: LD_VAR 0 4
13138: PUSH
13139: LD_VAR 0 8
13143: ARRAY
13144: IFFALSE 13166
// tmp := tmp & i & ; ;
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_VAR 0 3
13155: PUSH
13156: LD_VAR 0 8
13160: STR
13161: PUSH
13162: LD_STRING ;
13164: STR
13165: ST_TO_ADDR
// end ;
13166: GO 13131
13168: POP
13169: POP
// for i = 1 to hardcoreCounter do
13170: LD_ADDR_VAR 0 8
13174: PUSH
13175: DOUBLE
13176: LD_INT 1
13178: DEC
13179: ST_TO_ADDR
13180: LD_EXP 27
13184: PUSH
13185: FOR_TO
13186: IFFALSE 13232
// begin if flags [ normalCounter + i ] then
13188: LD_VAR 0 4
13192: PUSH
13193: LD_EXP 26
13197: PUSH
13198: LD_VAR 0 8
13202: PLUS
13203: ARRAY
13204: IFFALSE 13230
// tmp := tmp & ( 100 + i ) & ; ;
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_VAR 0 3
13215: PUSH
13216: LD_INT 100
13218: PUSH
13219: LD_VAR 0 8
13223: PLUS
13224: STR
13225: PUSH
13226: LD_STRING ;
13228: STR
13229: ST_TO_ADDR
// end ;
13230: GO 13185
13232: POP
13233: POP
// if tmp then
13234: LD_VAR 0 3
13238: IFFALSE 13250
// active := tmp ;
13240: LD_ADDR_VAR 0 7
13244: PUSH
13245: LD_VAR 0 3
13249: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13250: LD_STRING getStreamItemsFromMission("
13252: PUSH
13253: LD_VAR 0 5
13257: STR
13258: PUSH
13259: LD_STRING ","
13261: STR
13262: PUSH
13263: LD_VAR 0 6
13267: STR
13268: PUSH
13269: LD_STRING ","
13271: STR
13272: PUSH
13273: LD_VAR 0 7
13277: STR
13278: PUSH
13279: LD_STRING ")
13281: STR
13282: PPUSH
13283: CALL_OW 559
// end else
13287: GO 13296
// ToLua ( getStreamItemsFromMission("","","") ) ;
13289: LD_STRING getStreamItemsFromMission("","","")
13291: PPUSH
13292: CALL_OW 559
// end ;
13296: LD_VAR 0 2
13300: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13301: LD_EXP 25
13305: PUSH
13306: LD_EXP 30
13310: AND
13311: IFFALSE 13435
13313: GO 13315
13315: DISABLE
13316: LD_INT 0
13318: PPUSH
13319: PPUSH
// begin enable ;
13320: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13321: LD_ADDR_VAR 0 2
13325: PUSH
13326: LD_INT 22
13328: PUSH
13329: LD_OWVAR 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: LD_INT 2
13340: PUSH
13341: LD_INT 34
13343: PUSH
13344: LD_INT 7
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 34
13353: PUSH
13354: LD_INT 45
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: PUSH
13361: LD_INT 34
13363: PUSH
13364: LD_INT 28
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 34
13373: PUSH
13374: LD_INT 47
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PPUSH
13392: CALL_OW 69
13396: ST_TO_ADDR
// if not tmp then
13397: LD_VAR 0 2
13401: NOT
13402: IFFALSE 13406
// exit ;
13404: GO 13435
// for i in tmp do
13406: LD_ADDR_VAR 0 1
13410: PUSH
13411: LD_VAR 0 2
13415: PUSH
13416: FOR_IN
13417: IFFALSE 13433
// begin SetLives ( i , 0 ) ;
13419: LD_VAR 0 1
13423: PPUSH
13424: LD_INT 0
13426: PPUSH
13427: CALL_OW 234
// end ;
13431: GO 13416
13433: POP
13434: POP
// end ;
13435: PPOPN 2
13437: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13438: LD_EXP 25
13442: PUSH
13443: LD_EXP 31
13447: AND
13448: IFFALSE 13532
13450: GO 13452
13452: DISABLE
13453: LD_INT 0
13455: PPUSH
13456: PPUSH
// begin enable ;
13457: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13458: LD_ADDR_VAR 0 2
13462: PUSH
13463: LD_INT 22
13465: PUSH
13466: LD_OWVAR 2
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 32
13477: PUSH
13478: LD_INT 3
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 69
13493: ST_TO_ADDR
// if not tmp then
13494: LD_VAR 0 2
13498: NOT
13499: IFFALSE 13503
// exit ;
13501: GO 13532
// for i in tmp do
13503: LD_ADDR_VAR 0 1
13507: PUSH
13508: LD_VAR 0 2
13512: PUSH
13513: FOR_IN
13514: IFFALSE 13530
// begin SetLives ( i , 0 ) ;
13516: LD_VAR 0 1
13520: PPUSH
13521: LD_INT 0
13523: PPUSH
13524: CALL_OW 234
// end ;
13528: GO 13513
13530: POP
13531: POP
// end ;
13532: PPOPN 2
13534: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13535: LD_EXP 25
13539: PUSH
13540: LD_EXP 28
13544: AND
13545: IFFALSE 13638
13547: GO 13549
13549: DISABLE
13550: LD_INT 0
13552: PPUSH
// begin enable ;
13553: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13554: LD_ADDR_VAR 0 1
13558: PUSH
13559: LD_INT 22
13561: PUSH
13562: LD_OWVAR 2
13566: PUSH
13567: EMPTY
13568: LIST
13569: LIST
13570: PUSH
13571: LD_INT 2
13573: PUSH
13574: LD_INT 25
13576: PUSH
13577: LD_INT 5
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 25
13586: PUSH
13587: LD_INT 9
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 25
13596: PUSH
13597: LD_INT 8
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: PUSH
13619: FOR_IN
13620: IFFALSE 13636
// begin SetClass ( i , 1 ) ;
13622: LD_VAR 0 1
13626: PPUSH
13627: LD_INT 1
13629: PPUSH
13630: CALL_OW 336
// end ;
13634: GO 13619
13636: POP
13637: POP
// end ;
13638: PPOPN 1
13640: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13641: LD_EXP 25
13645: PUSH
13646: LD_EXP 29
13650: AND
13651: PUSH
13652: LD_OWVAR 65
13656: PUSH
13657: LD_INT 7
13659: LESS
13660: AND
13661: IFFALSE 13675
13663: GO 13665
13665: DISABLE
// begin enable ;
13666: ENABLE
// game_speed := 7 ;
13667: LD_ADDR_OWVAR 65
13671: PUSH
13672: LD_INT 7
13674: ST_TO_ADDR
// end ;
13675: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13676: LD_EXP 25
13680: PUSH
13681: LD_EXP 32
13685: AND
13686: IFFALSE 13888
13688: GO 13690
13690: DISABLE
13691: LD_INT 0
13693: PPUSH
13694: PPUSH
13695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13696: LD_ADDR_VAR 0 3
13700: PUSH
13701: LD_INT 81
13703: PUSH
13704: LD_OWVAR 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 21
13715: PUSH
13716: LD_INT 1
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 3
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13888
// if tmp > 5 then
13741: LD_VAR 0 3
13745: PUSH
13746: LD_INT 5
13748: GREATER
13749: IFFALSE 13761
// k := 5 else
13751: LD_ADDR_VAR 0 2
13755: PUSH
13756: LD_INT 5
13758: ST_TO_ADDR
13759: GO 13771
// k := tmp ;
13761: LD_ADDR_VAR 0 2
13765: PUSH
13766: LD_VAR 0 3
13770: ST_TO_ADDR
// for i := 1 to k do
13771: LD_ADDR_VAR 0 1
13775: PUSH
13776: DOUBLE
13777: LD_INT 1
13779: DEC
13780: ST_TO_ADDR
13781: LD_VAR 0 2
13785: PUSH
13786: FOR_TO
13787: IFFALSE 13886
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13789: LD_VAR 0 3
13793: PUSH
13794: LD_VAR 0 1
13798: ARRAY
13799: PPUSH
13800: LD_VAR 0 1
13804: PUSH
13805: LD_INT 4
13807: MOD
13808: PUSH
13809: LD_INT 1
13811: PLUS
13812: PPUSH
13813: CALL_OW 259
13817: PUSH
13818: LD_INT 10
13820: LESS
13821: IFFALSE 13884
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13823: LD_VAR 0 3
13827: PUSH
13828: LD_VAR 0 1
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 1
13838: PUSH
13839: LD_INT 4
13841: MOD
13842: PUSH
13843: LD_INT 1
13845: PLUS
13846: PPUSH
13847: LD_VAR 0 3
13851: PUSH
13852: LD_VAR 0 1
13856: ARRAY
13857: PPUSH
13858: LD_VAR 0 1
13862: PUSH
13863: LD_INT 4
13865: MOD
13866: PUSH
13867: LD_INT 1
13869: PLUS
13870: PPUSH
13871: CALL_OW 259
13875: PUSH
13876: LD_INT 1
13878: PLUS
13879: PPUSH
13880: CALL_OW 237
13884: GO 13786
13886: POP
13887: POP
// end ;
13888: PPOPN 3
13890: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13891: LD_EXP 25
13895: PUSH
13896: LD_EXP 33
13900: AND
13901: IFFALSE 13921
13903: GO 13905
13905: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13906: LD_INT 4
13908: PPUSH
13909: LD_OWVAR 2
13913: PPUSH
13914: LD_INT 0
13916: PPUSH
13917: CALL_OW 324
13921: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13922: LD_EXP 25
13926: PUSH
13927: LD_EXP 62
13931: AND
13932: IFFALSE 13952
13934: GO 13936
13936: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13937: LD_INT 19
13939: PPUSH
13940: LD_OWVAR 2
13944: PPUSH
13945: LD_INT 0
13947: PPUSH
13948: CALL_OW 324
13952: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13953: LD_EXP 25
13957: PUSH
13958: LD_EXP 34
13962: AND
13963: IFFALSE 14065
13965: GO 13967
13967: DISABLE
13968: LD_INT 0
13970: PPUSH
13971: PPUSH
// begin enable ;
13972: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13973: LD_ADDR_VAR 0 2
13977: PUSH
13978: LD_INT 22
13980: PUSH
13981: LD_OWVAR 2
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 34
13995: PUSH
13996: LD_INT 11
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 34
14005: PUSH
14006: LD_INT 30
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: ST_TO_ADDR
// if not tmp then
14027: LD_VAR 0 2
14031: NOT
14032: IFFALSE 14036
// exit ;
14034: GO 14065
// for i in tmp do
14036: LD_ADDR_VAR 0 1
14040: PUSH
14041: LD_VAR 0 2
14045: PUSH
14046: FOR_IN
14047: IFFALSE 14063
// begin SetLives ( i , 0 ) ;
14049: LD_VAR 0 1
14053: PPUSH
14054: LD_INT 0
14056: PPUSH
14057: CALL_OW 234
// end ;
14061: GO 14046
14063: POP
14064: POP
// end ;
14065: PPOPN 2
14067: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14068: LD_EXP 25
14072: PUSH
14073: LD_EXP 35
14077: AND
14078: IFFALSE 14098
14080: GO 14082
14082: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14083: LD_INT 32
14085: PPUSH
14086: LD_OWVAR 2
14090: PPUSH
14091: LD_INT 0
14093: PPUSH
14094: CALL_OW 324
14098: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14099: LD_EXP 25
14103: PUSH
14104: LD_EXP 36
14108: AND
14109: IFFALSE 14290
14111: GO 14113
14113: DISABLE
14114: LD_INT 0
14116: PPUSH
14117: PPUSH
14118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14119: LD_ADDR_VAR 0 2
14123: PUSH
14124: LD_INT 22
14126: PUSH
14127: LD_OWVAR 2
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 33
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PPUSH
14150: CALL_OW 69
14154: ST_TO_ADDR
// if not tmp then
14155: LD_VAR 0 2
14159: NOT
14160: IFFALSE 14164
// exit ;
14162: GO 14290
// side := 0 ;
14164: LD_ADDR_VAR 0 3
14168: PUSH
14169: LD_INT 0
14171: ST_TO_ADDR
// for i := 1 to 8 do
14172: LD_ADDR_VAR 0 1
14176: PUSH
14177: DOUBLE
14178: LD_INT 1
14180: DEC
14181: ST_TO_ADDR
14182: LD_INT 8
14184: PUSH
14185: FOR_TO
14186: IFFALSE 14234
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14188: LD_OWVAR 2
14192: PUSH
14193: LD_VAR 0 1
14197: NONEQUAL
14198: PUSH
14199: LD_OWVAR 2
14203: PPUSH
14204: LD_VAR 0 1
14208: PPUSH
14209: CALL_OW 81
14213: PUSH
14214: LD_INT 2
14216: EQUAL
14217: AND
14218: IFFALSE 14232
// begin side := i ;
14220: LD_ADDR_VAR 0 3
14224: PUSH
14225: LD_VAR 0 1
14229: ST_TO_ADDR
// break ;
14230: GO 14234
// end ;
14232: GO 14185
14234: POP
14235: POP
// if not side then
14236: LD_VAR 0 3
14240: NOT
14241: IFFALSE 14245
// exit ;
14243: GO 14290
// for i := 1 to tmp do
14245: LD_ADDR_VAR 0 1
14249: PUSH
14250: DOUBLE
14251: LD_INT 1
14253: DEC
14254: ST_TO_ADDR
14255: LD_VAR 0 2
14259: PUSH
14260: FOR_TO
14261: IFFALSE 14288
// if Prob ( 60 ) then
14263: LD_INT 60
14265: PPUSH
14266: CALL_OW 13
14270: IFFALSE 14286
// SetSide ( i , side ) ;
14272: LD_VAR 0 1
14276: PPUSH
14277: LD_VAR 0 3
14281: PPUSH
14282: CALL_OW 235
14286: GO 14260
14288: POP
14289: POP
// end ;
14290: PPOPN 3
14292: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14293: LD_EXP 25
14297: PUSH
14298: LD_EXP 38
14302: AND
14303: IFFALSE 14422
14305: GO 14307
14307: DISABLE
14308: LD_INT 0
14310: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_INT 22
14318: PUSH
14319: LD_OWVAR 2
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 21
14330: PUSH
14331: LD_INT 1
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: LD_INT 3
14340: PUSH
14341: LD_INT 23
14343: PUSH
14344: LD_INT 0
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: EMPTY
14352: LIST
14353: LIST
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: PPUSH
14360: CALL_OW 69
14364: PUSH
14365: FOR_IN
14366: IFFALSE 14420
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14368: LD_VAR 0 1
14372: PPUSH
14373: CALL_OW 257
14377: PUSH
14378: LD_INT 1
14380: PUSH
14381: LD_INT 2
14383: PUSH
14384: LD_INT 3
14386: PUSH
14387: LD_INT 4
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: IN
14396: IFFALSE 14418
// SetClass ( un , rand ( 1 , 4 ) ) ;
14398: LD_VAR 0 1
14402: PPUSH
14403: LD_INT 1
14405: PPUSH
14406: LD_INT 4
14408: PPUSH
14409: CALL_OW 12
14413: PPUSH
14414: CALL_OW 336
14418: GO 14365
14420: POP
14421: POP
// end ;
14422: PPOPN 1
14424: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14425: LD_EXP 25
14429: PUSH
14430: LD_EXP 37
14434: AND
14435: IFFALSE 14514
14437: GO 14439
14439: DISABLE
14440: LD_INT 0
14442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14443: LD_ADDR_VAR 0 1
14447: PUSH
14448: LD_INT 22
14450: PUSH
14451: LD_OWVAR 2
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: LD_INT 21
14462: PUSH
14463: LD_INT 3
14465: PUSH
14466: EMPTY
14467: LIST
14468: LIST
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PPUSH
14474: CALL_OW 69
14478: ST_TO_ADDR
// if not tmp then
14479: LD_VAR 0 1
14483: NOT
14484: IFFALSE 14488
// exit ;
14486: GO 14514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14488: LD_VAR 0 1
14492: PUSH
14493: LD_INT 1
14495: PPUSH
14496: LD_VAR 0 1
14500: PPUSH
14501: CALL_OW 12
14505: ARRAY
14506: PPUSH
14507: LD_INT 100
14509: PPUSH
14510: CALL_OW 234
// end ;
14514: PPOPN 1
14516: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14517: LD_EXP 25
14521: PUSH
14522: LD_EXP 39
14526: AND
14527: IFFALSE 14625
14529: GO 14531
14531: DISABLE
14532: LD_INT 0
14534: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: LD_INT 22
14542: PUSH
14543: LD_OWVAR 2
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 21
14554: PUSH
14555: LD_INT 1
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PPUSH
14566: CALL_OW 69
14570: ST_TO_ADDR
// if not tmp then
14571: LD_VAR 0 1
14575: NOT
14576: IFFALSE 14580
// exit ;
14578: GO 14625
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14580: LD_VAR 0 1
14584: PUSH
14585: LD_INT 1
14587: PPUSH
14588: LD_VAR 0 1
14592: PPUSH
14593: CALL_OW 12
14597: ARRAY
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_INT 4
14604: PPUSH
14605: CALL_OW 12
14609: PPUSH
14610: LD_INT 3000
14612: PPUSH
14613: LD_INT 9000
14615: PPUSH
14616: CALL_OW 12
14620: PPUSH
14621: CALL_OW 492
// end ;
14625: PPOPN 1
14627: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14628: LD_EXP 25
14632: PUSH
14633: LD_EXP 40
14637: AND
14638: IFFALSE 14658
14640: GO 14642
14642: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14643: LD_INT 1
14645: PPUSH
14646: LD_OWVAR 2
14650: PPUSH
14651: LD_INT 0
14653: PPUSH
14654: CALL_OW 324
14658: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14659: LD_EXP 25
14663: PUSH
14664: LD_EXP 41
14668: AND
14669: IFFALSE 14752
14671: GO 14673
14673: DISABLE
14674: LD_INT 0
14676: PPUSH
14677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14678: LD_ADDR_VAR 0 2
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_OWVAR 2
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 21
14697: PUSH
14698: LD_INT 3
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: ST_TO_ADDR
// if not tmp then
14714: LD_VAR 0 2
14718: NOT
14719: IFFALSE 14723
// exit ;
14721: GO 14752
// for i in tmp do
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_VAR 0 2
14732: PUSH
14733: FOR_IN
14734: IFFALSE 14750
// SetBLevel ( i , 10 ) ;
14736: LD_VAR 0 1
14740: PPUSH
14741: LD_INT 10
14743: PPUSH
14744: CALL_OW 241
14748: GO 14733
14750: POP
14751: POP
// end ;
14752: PPOPN 2
14754: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14755: LD_EXP 25
14759: PUSH
14760: LD_EXP 42
14764: AND
14765: IFFALSE 14876
14767: GO 14769
14769: DISABLE
14770: LD_INT 0
14772: PPUSH
14773: PPUSH
14774: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_INT 22
14782: PUSH
14783: LD_OWVAR 2
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: LD_INT 25
14794: PUSH
14795: LD_INT 1
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PPUSH
14806: CALL_OW 69
14810: ST_TO_ADDR
// if not tmp then
14811: LD_VAR 0 3
14815: NOT
14816: IFFALSE 14820
// exit ;
14818: GO 14876
// un := tmp [ rand ( 1 , tmp ) ] ;
14820: LD_ADDR_VAR 0 2
14824: PUSH
14825: LD_VAR 0 3
14829: PUSH
14830: LD_INT 1
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: CALL_OW 12
14842: ARRAY
14843: ST_TO_ADDR
// if Crawls ( un ) then
14844: LD_VAR 0 2
14848: PPUSH
14849: CALL_OW 318
14853: IFFALSE 14864
// ComWalk ( un ) ;
14855: LD_VAR 0 2
14859: PPUSH
14860: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14864: LD_VAR 0 2
14868: PPUSH
14869: LD_INT 5
14871: PPUSH
14872: CALL_OW 336
// end ;
14876: PPOPN 3
14878: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14879: LD_EXP 25
14883: PUSH
14884: LD_EXP 43
14888: AND
14889: PUSH
14890: LD_OWVAR 67
14894: PUSH
14895: LD_INT 4
14897: LESS
14898: AND
14899: IFFALSE 14918
14901: GO 14903
14903: DISABLE
// begin Difficulty := Difficulty + 1 ;
14904: LD_ADDR_OWVAR 67
14908: PUSH
14909: LD_OWVAR 67
14913: PUSH
14914: LD_INT 1
14916: PLUS
14917: ST_TO_ADDR
// end ;
14918: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14919: LD_EXP 25
14923: PUSH
14924: LD_EXP 44
14928: AND
14929: IFFALSE 15032
14931: GO 14933
14933: DISABLE
14934: LD_INT 0
14936: PPUSH
// begin for i := 1 to 5 do
14937: LD_ADDR_VAR 0 1
14941: PUSH
14942: DOUBLE
14943: LD_INT 1
14945: DEC
14946: ST_TO_ADDR
14947: LD_INT 5
14949: PUSH
14950: FOR_TO
14951: IFFALSE 15030
// begin uc_nation := nation_nature ;
14953: LD_ADDR_OWVAR 21
14957: PUSH
14958: LD_INT 0
14960: ST_TO_ADDR
// uc_side := 0 ;
14961: LD_ADDR_OWVAR 20
14965: PUSH
14966: LD_INT 0
14968: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14969: LD_ADDR_OWVAR 29
14973: PUSH
14974: LD_INT 12
14976: PUSH
14977: LD_INT 12
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: ST_TO_ADDR
// hc_agressivity := 20 ;
14984: LD_ADDR_OWVAR 35
14988: PUSH
14989: LD_INT 20
14991: ST_TO_ADDR
// hc_class := class_tiger ;
14992: LD_ADDR_OWVAR 28
14996: PUSH
14997: LD_INT 14
14999: ST_TO_ADDR
// hc_gallery :=  ;
15000: LD_ADDR_OWVAR 33
15004: PUSH
15005: LD_STRING 
15007: ST_TO_ADDR
// hc_name :=  ;
15008: LD_ADDR_OWVAR 26
15012: PUSH
15013: LD_STRING 
15015: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15016: CALL_OW 44
15020: PPUSH
15021: LD_INT 0
15023: PPUSH
15024: CALL_OW 51
// end ;
15028: GO 14950
15030: POP
15031: POP
// end ;
15032: PPOPN 1
15034: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15035: LD_EXP 25
15039: PUSH
15040: LD_EXP 45
15044: AND
15045: IFFALSE 15054
15047: GO 15049
15049: DISABLE
// StreamSibBomb ;
15050: CALL 15055 0 0
15054: END
// export function StreamSibBomb ; var i , x , y ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
15059: PPUSH
15060: PPUSH
// result := false ;
15061: LD_ADDR_VAR 0 1
15065: PUSH
15066: LD_INT 0
15068: ST_TO_ADDR
// for i := 1 to 16 do
15069: LD_ADDR_VAR 0 2
15073: PUSH
15074: DOUBLE
15075: LD_INT 1
15077: DEC
15078: ST_TO_ADDR
15079: LD_INT 16
15081: PUSH
15082: FOR_TO
15083: IFFALSE 15282
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15085: LD_ADDR_VAR 0 3
15089: PUSH
15090: LD_INT 10
15092: PUSH
15093: LD_INT 20
15095: PUSH
15096: LD_INT 30
15098: PUSH
15099: LD_INT 40
15101: PUSH
15102: LD_INT 50
15104: PUSH
15105: LD_INT 60
15107: PUSH
15108: LD_INT 70
15110: PUSH
15111: LD_INT 80
15113: PUSH
15114: LD_INT 90
15116: PUSH
15117: LD_INT 100
15119: PUSH
15120: LD_INT 110
15122: PUSH
15123: LD_INT 120
15125: PUSH
15126: LD_INT 130
15128: PUSH
15129: LD_INT 140
15131: PUSH
15132: LD_INT 150
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 1
15154: PPUSH
15155: LD_INT 15
15157: PPUSH
15158: CALL_OW 12
15162: ARRAY
15163: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15164: LD_ADDR_VAR 0 4
15168: PUSH
15169: LD_INT 10
15171: PUSH
15172: LD_INT 20
15174: PUSH
15175: LD_INT 30
15177: PUSH
15178: LD_INT 40
15180: PUSH
15181: LD_INT 50
15183: PUSH
15184: LD_INT 60
15186: PUSH
15187: LD_INT 70
15189: PUSH
15190: LD_INT 80
15192: PUSH
15193: LD_INT 90
15195: PUSH
15196: LD_INT 100
15198: PUSH
15199: LD_INT 110
15201: PUSH
15202: LD_INT 120
15204: PUSH
15205: LD_INT 130
15207: PUSH
15208: LD_INT 140
15210: PUSH
15211: LD_INT 150
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 1
15233: PPUSH
15234: LD_INT 15
15236: PPUSH
15237: CALL_OW 12
15241: ARRAY
15242: ST_TO_ADDR
// if ValidHex ( x , y ) then
15243: LD_VAR 0 3
15247: PPUSH
15248: LD_VAR 0 4
15252: PPUSH
15253: CALL_OW 488
15257: IFFALSE 15280
// begin result := [ x , y ] ;
15259: LD_ADDR_VAR 0 1
15263: PUSH
15264: LD_VAR 0 3
15268: PUSH
15269: LD_VAR 0 4
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: ST_TO_ADDR
// break ;
15278: GO 15282
// end ; end ;
15280: GO 15082
15282: POP
15283: POP
// if result then
15284: LD_VAR 0 1
15288: IFFALSE 15348
// begin ToLua ( playSibBomb() ) ;
15290: LD_STRING playSibBomb()
15292: PPUSH
15293: CALL_OW 559
// wait ( 0 0$14 ) ;
15297: LD_INT 490
15299: PPUSH
15300: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15304: LD_VAR 0 1
15308: PUSH
15309: LD_INT 1
15311: ARRAY
15312: PPUSH
15313: LD_VAR 0 1
15317: PUSH
15318: LD_INT 2
15320: ARRAY
15321: PPUSH
15322: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15326: LD_VAR 0 1
15330: PUSH
15331: LD_INT 1
15333: ARRAY
15334: PPUSH
15335: LD_VAR 0 1
15339: PUSH
15340: LD_INT 2
15342: ARRAY
15343: PPUSH
15344: CALL_OW 429
// end ; end ;
15348: LD_VAR 0 1
15352: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15353: LD_EXP 25
15357: PUSH
15358: LD_EXP 47
15362: AND
15363: IFFALSE 15375
15365: GO 15367
15367: DISABLE
// YouLost (  ) ;
15368: LD_STRING 
15370: PPUSH
15371: CALL_OW 104
15375: END
// every 0 0$1 trigger StreamModeActive and sFog do
15376: LD_EXP 25
15380: PUSH
15381: LD_EXP 46
15385: AND
15386: IFFALSE 15400
15388: GO 15390
15390: DISABLE
// FogOff ( your_side ) ;
15391: LD_OWVAR 2
15395: PPUSH
15396: CALL_OW 344
15400: END
// every 0 0$1 trigger StreamModeActive and sSun do
15401: LD_EXP 25
15405: PUSH
15406: LD_EXP 48
15410: AND
15411: IFFALSE 15439
15413: GO 15415
15415: DISABLE
// begin solar_recharge_percent := 0 ;
15416: LD_ADDR_OWVAR 79
15420: PUSH
15421: LD_INT 0
15423: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15424: LD_INT 10500
15426: PPUSH
15427: CALL_OW 67
// solar_recharge_percent := 100 ;
15431: LD_ADDR_OWVAR 79
15435: PUSH
15436: LD_INT 100
15438: ST_TO_ADDR
// end ;
15439: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15440: LD_EXP 25
15444: PUSH
15445: LD_EXP 49
15449: AND
15450: IFFALSE 15689
15452: GO 15454
15454: DISABLE
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
// begin tmp := [ ] ;
15460: LD_ADDR_VAR 0 3
15464: PUSH
15465: EMPTY
15466: ST_TO_ADDR
// for i := 1 to 6 do
15467: LD_ADDR_VAR 0 1
15471: PUSH
15472: DOUBLE
15473: LD_INT 1
15475: DEC
15476: ST_TO_ADDR
15477: LD_INT 6
15479: PUSH
15480: FOR_TO
15481: IFFALSE 15586
// begin uc_nation := nation_nature ;
15483: LD_ADDR_OWVAR 21
15487: PUSH
15488: LD_INT 0
15490: ST_TO_ADDR
// uc_side := 0 ;
15491: LD_ADDR_OWVAR 20
15495: PUSH
15496: LD_INT 0
15498: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15499: LD_ADDR_OWVAR 29
15503: PUSH
15504: LD_INT 12
15506: PUSH
15507: LD_INT 12
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: ST_TO_ADDR
// hc_agressivity := 20 ;
15514: LD_ADDR_OWVAR 35
15518: PUSH
15519: LD_INT 20
15521: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15522: LD_ADDR_OWVAR 28
15526: PUSH
15527: LD_INT 17
15529: ST_TO_ADDR
// hc_gallery :=  ;
15530: LD_ADDR_OWVAR 33
15534: PUSH
15535: LD_STRING 
15537: ST_TO_ADDR
// hc_name :=  ;
15538: LD_ADDR_OWVAR 26
15542: PUSH
15543: LD_STRING 
15545: ST_TO_ADDR
// un := CreateHuman ;
15546: LD_ADDR_VAR 0 2
15550: PUSH
15551: CALL_OW 44
15555: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15556: LD_VAR 0 2
15560: PPUSH
15561: LD_INT 1
15563: PPUSH
15564: CALL_OW 51
// tmp := tmp ^ un ;
15568: LD_ADDR_VAR 0 3
15572: PUSH
15573: LD_VAR 0 3
15577: PUSH
15578: LD_VAR 0 2
15582: ADD
15583: ST_TO_ADDR
// end ;
15584: GO 15480
15586: POP
15587: POP
// repeat wait ( 0 0$1 ) ;
15588: LD_INT 35
15590: PPUSH
15591: CALL_OW 67
// for un in tmp do
15595: LD_ADDR_VAR 0 2
15599: PUSH
15600: LD_VAR 0 3
15604: PUSH
15605: FOR_IN
15606: IFFALSE 15680
// begin if IsDead ( un ) then
15608: LD_VAR 0 2
15612: PPUSH
15613: CALL_OW 301
15617: IFFALSE 15637
// begin tmp := tmp diff un ;
15619: LD_ADDR_VAR 0 3
15623: PUSH
15624: LD_VAR 0 3
15628: PUSH
15629: LD_VAR 0 2
15633: DIFF
15634: ST_TO_ADDR
// continue ;
15635: GO 15605
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15637: LD_VAR 0 2
15641: PPUSH
15642: LD_INT 3
15644: PUSH
15645: LD_INT 22
15647: PUSH
15648: LD_INT 0
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PUSH
15655: EMPTY
15656: LIST
15657: LIST
15658: PPUSH
15659: CALL_OW 69
15663: PPUSH
15664: LD_VAR 0 2
15668: PPUSH
15669: CALL_OW 74
15673: PPUSH
15674: CALL_OW 115
// end ;
15678: GO 15605
15680: POP
15681: POP
// until not tmp ;
15682: LD_VAR 0 3
15686: NOT
15687: IFFALSE 15588
// end ;
15689: PPOPN 3
15691: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15692: LD_EXP 25
15696: PUSH
15697: LD_EXP 50
15701: AND
15702: IFFALSE 15756
15704: GO 15706
15706: DISABLE
// begin ToLua ( displayTroll(); ) ;
15707: LD_STRING displayTroll();
15709: PPUSH
15710: CALL_OW 559
// wait ( 3 3$00 ) ;
15714: LD_INT 6300
15716: PPUSH
15717: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15721: LD_STRING hideTroll();
15723: PPUSH
15724: CALL_OW 559
// wait ( 1 1$00 ) ;
15728: LD_INT 2100
15730: PPUSH
15731: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15735: LD_STRING displayTroll();
15737: PPUSH
15738: CALL_OW 559
// wait ( 1 1$00 ) ;
15742: LD_INT 2100
15744: PPUSH
15745: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15749: LD_STRING hideTroll();
15751: PPUSH
15752: CALL_OW 559
// end ;
15756: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15757: LD_EXP 25
15761: PUSH
15762: LD_EXP 51
15766: AND
15767: IFFALSE 15830
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
// begin p := 0 ;
15775: LD_ADDR_VAR 0 1
15779: PUSH
15780: LD_INT 0
15782: ST_TO_ADDR
// repeat game_speed := 1 ;
15783: LD_ADDR_OWVAR 65
15787: PUSH
15788: LD_INT 1
15790: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15791: LD_INT 35
15793: PPUSH
15794: CALL_OW 67
// p := p + 1 ;
15798: LD_ADDR_VAR 0 1
15802: PUSH
15803: LD_VAR 0 1
15807: PUSH
15808: LD_INT 1
15810: PLUS
15811: ST_TO_ADDR
// until p >= 60 ;
15812: LD_VAR 0 1
15816: PUSH
15817: LD_INT 60
15819: GREATEREQUAL
15820: IFFALSE 15783
// game_speed := 4 ;
15822: LD_ADDR_OWVAR 65
15826: PUSH
15827: LD_INT 4
15829: ST_TO_ADDR
// end ;
15830: PPOPN 1
15832: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15833: LD_EXP 25
15837: PUSH
15838: LD_EXP 52
15842: AND
15843: IFFALSE 15989
15845: GO 15847
15847: DISABLE
15848: LD_INT 0
15850: PPUSH
15851: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15852: LD_ADDR_VAR 0 1
15856: PUSH
15857: LD_INT 22
15859: PUSH
15860: LD_OWVAR 2
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: LD_INT 2
15871: PUSH
15872: LD_INT 30
15874: PUSH
15875: LD_INT 0
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: PUSH
15882: LD_INT 30
15884: PUSH
15885: LD_INT 1
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: LIST
15896: PUSH
15897: EMPTY
15898: LIST
15899: LIST
15900: PPUSH
15901: CALL_OW 69
15905: ST_TO_ADDR
// if not depot then
15906: LD_VAR 0 1
15910: NOT
15911: IFFALSE 15915
// exit ;
15913: GO 15989
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15915: LD_ADDR_VAR 0 2
15919: PUSH
15920: LD_VAR 0 1
15924: PUSH
15925: LD_INT 1
15927: PPUSH
15928: LD_VAR 0 1
15932: PPUSH
15933: CALL_OW 12
15937: ARRAY
15938: PPUSH
15939: CALL_OW 274
15943: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15944: LD_VAR 0 2
15948: PPUSH
15949: LD_INT 1
15951: PPUSH
15952: LD_INT 0
15954: PPUSH
15955: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15959: LD_VAR 0 2
15963: PPUSH
15964: LD_INT 2
15966: PPUSH
15967: LD_INT 0
15969: PPUSH
15970: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15974: LD_VAR 0 2
15978: PPUSH
15979: LD_INT 3
15981: PPUSH
15982: LD_INT 0
15984: PPUSH
15985: CALL_OW 277
// end ;
15989: PPOPN 2
15991: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15992: LD_EXP 25
15996: PUSH
15997: LD_EXP 53
16001: AND
16002: IFFALSE 16099
16004: GO 16006
16006: DISABLE
16007: LD_INT 0
16009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_INT 22
16017: PUSH
16018: LD_OWVAR 2
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: PUSH
16027: LD_INT 21
16029: PUSH
16030: LD_INT 1
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 3
16039: PUSH
16040: LD_INT 23
16042: PUSH
16043: LD_INT 0
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: LIST
16058: PPUSH
16059: CALL_OW 69
16063: ST_TO_ADDR
// if not tmp then
16064: LD_VAR 0 1
16068: NOT
16069: IFFALSE 16073
// exit ;
16071: GO 16099
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16073: LD_VAR 0 1
16077: PUSH
16078: LD_INT 1
16080: PPUSH
16081: LD_VAR 0 1
16085: PPUSH
16086: CALL_OW 12
16090: ARRAY
16091: PPUSH
16092: LD_INT 200
16094: PPUSH
16095: CALL_OW 234
// end ;
16099: PPOPN 1
16101: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16102: LD_EXP 25
16106: PUSH
16107: LD_EXP 54
16111: AND
16112: IFFALSE 16191
16114: GO 16116
16116: DISABLE
16117: LD_INT 0
16119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16120: LD_ADDR_VAR 0 1
16124: PUSH
16125: LD_INT 22
16127: PUSH
16128: LD_OWVAR 2
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 21
16139: PUSH
16140: LD_INT 2
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PPUSH
16151: CALL_OW 69
16155: ST_TO_ADDR
// if not tmp then
16156: LD_VAR 0 1
16160: NOT
16161: IFFALSE 16165
// exit ;
16163: GO 16191
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16165: LD_VAR 0 1
16169: PUSH
16170: LD_INT 1
16172: PPUSH
16173: LD_VAR 0 1
16177: PPUSH
16178: CALL_OW 12
16182: ARRAY
16183: PPUSH
16184: LD_INT 60
16186: PPUSH
16187: CALL_OW 234
// end ;
16191: PPOPN 1
16193: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16194: LD_EXP 25
16198: PUSH
16199: LD_EXP 55
16203: AND
16204: IFFALSE 16303
16206: GO 16208
16208: DISABLE
16209: LD_INT 0
16211: PPUSH
16212: PPUSH
// begin enable ;
16213: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16214: LD_ADDR_VAR 0 1
16218: PUSH
16219: LD_INT 22
16221: PUSH
16222: LD_OWVAR 2
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 61
16233: PUSH
16234: EMPTY
16235: LIST
16236: PUSH
16237: LD_INT 33
16239: PUSH
16240: LD_INT 2
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// if not tmp then
16257: LD_VAR 0 1
16261: NOT
16262: IFFALSE 16266
// exit ;
16264: GO 16303
// for i in tmp do
16266: LD_ADDR_VAR 0 2
16270: PUSH
16271: LD_VAR 0 1
16275: PUSH
16276: FOR_IN
16277: IFFALSE 16301
// if IsControledBy ( i ) then
16279: LD_VAR 0 2
16283: PPUSH
16284: CALL_OW 312
16288: IFFALSE 16299
// ComUnlink ( i ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: CALL_OW 136
16299: GO 16276
16301: POP
16302: POP
// end ;
16303: PPOPN 2
16305: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16306: LD_EXP 25
16310: PUSH
16311: LD_EXP 56
16315: AND
16316: IFFALSE 16456
16318: GO 16320
16320: DISABLE
16321: LD_INT 0
16323: PPUSH
16324: PPUSH
// begin ToLua ( displayPowell(); ) ;
16325: LD_STRING displayPowell();
16327: PPUSH
16328: CALL_OW 559
// uc_side := 0 ;
16332: LD_ADDR_OWVAR 20
16336: PUSH
16337: LD_INT 0
16339: ST_TO_ADDR
// uc_nation := 2 ;
16340: LD_ADDR_OWVAR 21
16344: PUSH
16345: LD_INT 2
16347: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16348: LD_ADDR_OWVAR 37
16352: PUSH
16353: LD_INT 14
16355: ST_TO_ADDR
// vc_engine := engine_siberite ;
16356: LD_ADDR_OWVAR 39
16360: PUSH
16361: LD_INT 3
16363: ST_TO_ADDR
// vc_control := control_apeman ;
16364: LD_ADDR_OWVAR 38
16368: PUSH
16369: LD_INT 5
16371: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16372: LD_ADDR_OWVAR 40
16376: PUSH
16377: LD_INT 29
16379: ST_TO_ADDR
// un := CreateVehicle ;
16380: LD_ADDR_VAR 0 2
16384: PUSH
16385: CALL_OW 45
16389: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16390: LD_VAR 0 2
16394: PPUSH
16395: LD_INT 1
16397: PPUSH
16398: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16402: LD_INT 35
16404: PPUSH
16405: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16409: LD_VAR 0 2
16413: PPUSH
16414: LD_INT 22
16416: PUSH
16417: LD_OWVAR 2
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PPUSH
16426: CALL_OW 69
16430: PPUSH
16431: LD_VAR 0 2
16435: PPUSH
16436: CALL_OW 74
16440: PPUSH
16441: CALL_OW 115
// until IsDead ( un ) ;
16445: LD_VAR 0 2
16449: PPUSH
16450: CALL_OW 301
16454: IFFALSE 16402
// end ;
16456: PPOPN 2
16458: END
// every 0 0$1 trigger StreamModeActive and sStu do
16459: LD_EXP 25
16463: PUSH
16464: LD_EXP 64
16468: AND
16469: IFFALSE 16485
16471: GO 16473
16473: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16474: LD_STRING displayStucuk();
16476: PPUSH
16477: CALL_OW 559
// ResetFog ;
16481: CALL_OW 335
// end ;
16485: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16486: LD_EXP 25
16490: PUSH
16491: LD_EXP 57
16495: AND
16496: IFFALSE 16637
16498: GO 16500
16500: DISABLE
16501: LD_INT 0
16503: PPUSH
16504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16505: LD_ADDR_VAR 0 2
16509: PUSH
16510: LD_INT 22
16512: PUSH
16513: LD_OWVAR 2
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 21
16524: PUSH
16525: LD_INT 1
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PPUSH
16536: CALL_OW 69
16540: ST_TO_ADDR
// if not tmp then
16541: LD_VAR 0 2
16545: NOT
16546: IFFALSE 16550
// exit ;
16548: GO 16637
// un := tmp [ rand ( 1 , tmp ) ] ;
16550: LD_ADDR_VAR 0 1
16554: PUSH
16555: LD_VAR 0 2
16559: PUSH
16560: LD_INT 1
16562: PPUSH
16563: LD_VAR 0 2
16567: PPUSH
16568: CALL_OW 12
16572: ARRAY
16573: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16574: LD_VAR 0 1
16578: PPUSH
16579: LD_INT 0
16581: PPUSH
16582: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16586: LD_VAR 0 1
16590: PPUSH
16591: LD_OWVAR 3
16595: PUSH
16596: LD_VAR 0 1
16600: DIFF
16601: PPUSH
16602: LD_VAR 0 1
16606: PPUSH
16607: CALL_OW 74
16611: PPUSH
16612: CALL_OW 115
// wait ( 0 0$20 ) ;
16616: LD_INT 700
16618: PPUSH
16619: CALL_OW 67
// SetSide ( un , your_side ) ;
16623: LD_VAR 0 1
16627: PPUSH
16628: LD_OWVAR 2
16632: PPUSH
16633: CALL_OW 235
// end ;
16637: PPOPN 2
16639: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16640: LD_EXP 25
16644: PUSH
16645: LD_EXP 58
16649: AND
16650: IFFALSE 16756
16652: GO 16654
16654: DISABLE
16655: LD_INT 0
16657: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16658: LD_ADDR_VAR 0 1
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_OWVAR 2
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: LD_INT 30
16680: PUSH
16681: LD_INT 0
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: LD_INT 30
16690: PUSH
16691: LD_INT 1
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: LIST
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PPUSH
16707: CALL_OW 69
16711: ST_TO_ADDR
// if not depot then
16712: LD_VAR 0 1
16716: NOT
16717: IFFALSE 16721
// exit ;
16719: GO 16756
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16721: LD_VAR 0 1
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: PPUSH
16730: CALL_OW 250
16734: PPUSH
16735: LD_VAR 0 1
16739: PUSH
16740: LD_INT 1
16742: ARRAY
16743: PPUSH
16744: CALL_OW 251
16748: PPUSH
16749: LD_INT 70
16751: PPUSH
16752: CALL_OW 495
// end ;
16756: PPOPN 1
16758: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16759: LD_EXP 25
16763: PUSH
16764: LD_EXP 59
16768: AND
16769: IFFALSE 16980
16771: GO 16773
16773: DISABLE
16774: LD_INT 0
16776: PPUSH
16777: PPUSH
16778: PPUSH
16779: PPUSH
16780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16781: LD_ADDR_VAR 0 5
16785: PUSH
16786: LD_INT 22
16788: PUSH
16789: LD_OWVAR 2
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PUSH
16798: LD_INT 21
16800: PUSH
16801: LD_INT 1
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 69
16816: ST_TO_ADDR
// if not tmp then
16817: LD_VAR 0 5
16821: NOT
16822: IFFALSE 16826
// exit ;
16824: GO 16980
// for i in tmp do
16826: LD_ADDR_VAR 0 1
16830: PUSH
16831: LD_VAR 0 5
16835: PUSH
16836: FOR_IN
16837: IFFALSE 16978
// begin d := rand ( 0 , 5 ) ;
16839: LD_ADDR_VAR 0 4
16843: PUSH
16844: LD_INT 0
16846: PPUSH
16847: LD_INT 5
16849: PPUSH
16850: CALL_OW 12
16854: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16855: LD_ADDR_VAR 0 2
16859: PUSH
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 250
16869: PPUSH
16870: LD_VAR 0 4
16874: PPUSH
16875: LD_INT 3
16877: PPUSH
16878: LD_INT 12
16880: PPUSH
16881: CALL_OW 12
16885: PPUSH
16886: CALL_OW 272
16890: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16891: LD_ADDR_VAR 0 3
16895: PUSH
16896: LD_VAR 0 1
16900: PPUSH
16901: CALL_OW 251
16905: PPUSH
16906: LD_VAR 0 4
16910: PPUSH
16911: LD_INT 3
16913: PPUSH
16914: LD_INT 12
16916: PPUSH
16917: CALL_OW 12
16921: PPUSH
16922: CALL_OW 273
16926: ST_TO_ADDR
// if ValidHex ( x , y ) then
16927: LD_VAR 0 2
16931: PPUSH
16932: LD_VAR 0 3
16936: PPUSH
16937: CALL_OW 488
16941: IFFALSE 16976
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16943: LD_VAR 0 1
16947: PPUSH
16948: LD_VAR 0 2
16952: PPUSH
16953: LD_VAR 0 3
16957: PPUSH
16958: LD_INT 3
16960: PPUSH
16961: LD_INT 6
16963: PPUSH
16964: CALL_OW 12
16968: PPUSH
16969: LD_INT 1
16971: PPUSH
16972: CALL_OW 483
// end ;
16976: GO 16836
16978: POP
16979: POP
// end ;
16980: PPOPN 5
16982: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16983: LD_EXP 25
16987: PUSH
16988: LD_EXP 60
16992: AND
16993: IFFALSE 17087
16995: GO 16997
16997: DISABLE
16998: LD_INT 0
17000: PPUSH
17001: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17002: LD_ADDR_VAR 0 2
17006: PUSH
17007: LD_INT 22
17009: PUSH
17010: LD_OWVAR 2
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PUSH
17019: LD_INT 32
17021: PUSH
17022: LD_INT 1
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: PUSH
17029: LD_INT 21
17031: PUSH
17032: LD_INT 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: PPUSH
17044: CALL_OW 69
17048: ST_TO_ADDR
// if not tmp then
17049: LD_VAR 0 2
17053: NOT
17054: IFFALSE 17058
// exit ;
17056: GO 17087
// for i in tmp do
17058: LD_ADDR_VAR 0 1
17062: PUSH
17063: LD_VAR 0 2
17067: PUSH
17068: FOR_IN
17069: IFFALSE 17085
// SetFuel ( i , 0 ) ;
17071: LD_VAR 0 1
17075: PPUSH
17076: LD_INT 0
17078: PPUSH
17079: CALL_OW 240
17083: GO 17068
17085: POP
17086: POP
// end ;
17087: PPOPN 2
17089: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17090: LD_EXP 25
17094: PUSH
17095: LD_EXP 61
17099: AND
17100: IFFALSE 17166
17102: GO 17104
17104: DISABLE
17105: LD_INT 0
17107: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17108: LD_ADDR_VAR 0 1
17112: PUSH
17113: LD_INT 22
17115: PUSH
17116: LD_OWVAR 2
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 30
17127: PUSH
17128: LD_INT 29
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PPUSH
17139: CALL_OW 69
17143: ST_TO_ADDR
// if not tmp then
17144: LD_VAR 0 1
17148: NOT
17149: IFFALSE 17153
// exit ;
17151: GO 17166
// DestroyUnit ( tmp [ 1 ] ) ;
17153: LD_VAR 0 1
17157: PUSH
17158: LD_INT 1
17160: ARRAY
17161: PPUSH
17162: CALL_OW 65
// end ;
17166: PPOPN 1
17168: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17169: LD_EXP 25
17173: PUSH
17174: LD_EXP 63
17178: AND
17179: IFFALSE 17308
17181: GO 17183
17183: DISABLE
17184: LD_INT 0
17186: PPUSH
// begin uc_side := 0 ;
17187: LD_ADDR_OWVAR 20
17191: PUSH
17192: LD_INT 0
17194: ST_TO_ADDR
// uc_nation := nation_arabian ;
17195: LD_ADDR_OWVAR 21
17199: PUSH
17200: LD_INT 2
17202: ST_TO_ADDR
// hc_gallery :=  ;
17203: LD_ADDR_OWVAR 33
17207: PUSH
17208: LD_STRING 
17210: ST_TO_ADDR
// hc_name :=  ;
17211: LD_ADDR_OWVAR 26
17215: PUSH
17216: LD_STRING 
17218: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17219: LD_INT 1
17221: PPUSH
17222: LD_INT 11
17224: PPUSH
17225: LD_INT 10
17227: PPUSH
17228: CALL_OW 380
// un := CreateHuman ;
17232: LD_ADDR_VAR 0 1
17236: PUSH
17237: CALL_OW 44
17241: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17242: LD_VAR 0 1
17246: PPUSH
17247: LD_INT 1
17249: PPUSH
17250: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17254: LD_INT 35
17256: PPUSH
17257: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17261: LD_VAR 0 1
17265: PPUSH
17266: LD_INT 22
17268: PUSH
17269: LD_OWVAR 2
17273: PUSH
17274: EMPTY
17275: LIST
17276: LIST
17277: PPUSH
17278: CALL_OW 69
17282: PPUSH
17283: LD_VAR 0 1
17287: PPUSH
17288: CALL_OW 74
17292: PPUSH
17293: CALL_OW 115
// until IsDead ( un ) ;
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 301
17306: IFFALSE 17254
// end ;
17308: PPOPN 1
17310: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17311: LD_EXP 25
17315: PUSH
17316: LD_EXP 65
17320: AND
17321: IFFALSE 17333
17323: GO 17325
17325: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17326: LD_STRING earthquake(getX(game), 0, 32)
17328: PPUSH
17329: CALL_OW 559
17333: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17334: LD_EXP 25
17338: PUSH
17339: LD_EXP 66
17343: AND
17344: IFFALSE 17435
17346: GO 17348
17348: DISABLE
17349: LD_INT 0
17351: PPUSH
// begin enable ;
17352: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17353: LD_ADDR_VAR 0 1
17357: PUSH
17358: LD_INT 22
17360: PUSH
17361: LD_OWVAR 2
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 21
17372: PUSH
17373: LD_INT 2
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 33
17382: PUSH
17383: LD_INT 3
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: PPUSH
17395: CALL_OW 69
17399: ST_TO_ADDR
// if not tmp then
17400: LD_VAR 0 1
17404: NOT
17405: IFFALSE 17409
// exit ;
17407: GO 17435
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17409: LD_VAR 0 1
17413: PUSH
17414: LD_INT 1
17416: PPUSH
17417: LD_VAR 0 1
17421: PPUSH
17422: CALL_OW 12
17426: ARRAY
17427: PPUSH
17428: LD_INT 1
17430: PPUSH
17431: CALL_OW 234
// end ;
17435: PPOPN 1
17437: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17438: LD_EXP 25
17442: PUSH
17443: LD_EXP 67
17447: AND
17448: IFFALSE 17589
17450: GO 17452
17452: DISABLE
17453: LD_INT 0
17455: PPUSH
17456: PPUSH
17457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17458: LD_ADDR_VAR 0 3
17462: PUSH
17463: LD_INT 22
17465: PUSH
17466: LD_OWVAR 2
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PUSH
17475: LD_INT 25
17477: PUSH
17478: LD_INT 1
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PPUSH
17489: CALL_OW 69
17493: ST_TO_ADDR
// if not tmp then
17494: LD_VAR 0 3
17498: NOT
17499: IFFALSE 17503
// exit ;
17501: GO 17589
// un := tmp [ rand ( 1 , tmp ) ] ;
17503: LD_ADDR_VAR 0 2
17507: PUSH
17508: LD_VAR 0 3
17512: PUSH
17513: LD_INT 1
17515: PPUSH
17516: LD_VAR 0 3
17520: PPUSH
17521: CALL_OW 12
17525: ARRAY
17526: ST_TO_ADDR
// if Crawls ( un ) then
17527: LD_VAR 0 2
17531: PPUSH
17532: CALL_OW 318
17536: IFFALSE 17547
// ComWalk ( un ) ;
17538: LD_VAR 0 2
17542: PPUSH
17543: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17547: LD_VAR 0 2
17551: PPUSH
17552: LD_INT 9
17554: PPUSH
17555: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17559: LD_INT 28
17561: PPUSH
17562: LD_OWVAR 2
17566: PPUSH
17567: LD_INT 2
17569: PPUSH
17570: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17574: LD_INT 29
17576: PPUSH
17577: LD_OWVAR 2
17581: PPUSH
17582: LD_INT 2
17584: PPUSH
17585: CALL_OW 322
// end ;
17589: PPOPN 3
17591: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17592: LD_EXP 25
17596: PUSH
17597: LD_EXP 68
17601: AND
17602: IFFALSE 17713
17604: GO 17606
17606: DISABLE
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17612: LD_ADDR_VAR 0 3
17616: PUSH
17617: LD_INT 22
17619: PUSH
17620: LD_OWVAR 2
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 25
17631: PUSH
17632: LD_INT 1
17634: PUSH
17635: EMPTY
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PPUSH
17643: CALL_OW 69
17647: ST_TO_ADDR
// if not tmp then
17648: LD_VAR 0 3
17652: NOT
17653: IFFALSE 17657
// exit ;
17655: GO 17713
// un := tmp [ rand ( 1 , tmp ) ] ;
17657: LD_ADDR_VAR 0 2
17661: PUSH
17662: LD_VAR 0 3
17666: PUSH
17667: LD_INT 1
17669: PPUSH
17670: LD_VAR 0 3
17674: PPUSH
17675: CALL_OW 12
17679: ARRAY
17680: ST_TO_ADDR
// if Crawls ( un ) then
17681: LD_VAR 0 2
17685: PPUSH
17686: CALL_OW 318
17690: IFFALSE 17701
// ComWalk ( un ) ;
17692: LD_VAR 0 2
17696: PPUSH
17697: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17701: LD_VAR 0 2
17705: PPUSH
17706: LD_INT 8
17708: PPUSH
17709: CALL_OW 336
// end ;
17713: PPOPN 3
17715: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17716: LD_EXP 25
17720: PUSH
17721: LD_EXP 69
17725: AND
17726: IFFALSE 17870
17728: GO 17730
17730: DISABLE
17731: LD_INT 0
17733: PPUSH
17734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17735: LD_ADDR_VAR 0 2
17739: PUSH
17740: LD_INT 22
17742: PUSH
17743: LD_OWVAR 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 2
17764: PUSH
17765: LD_INT 34
17767: PUSH
17768: LD_INT 12
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 34
17777: PUSH
17778: LD_INT 51
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 34
17787: PUSH
17788: LD_INT 32
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: LIST
17805: PPUSH
17806: CALL_OW 69
17810: ST_TO_ADDR
// if not tmp then
17811: LD_VAR 0 2
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 17870
// for i in tmp do
17820: LD_ADDR_VAR 0 1
17824: PUSH
17825: LD_VAR 0 2
17829: PUSH
17830: FOR_IN
17831: IFFALSE 17868
// if GetCargo ( i , mat_artifact ) = 0 then
17833: LD_VAR 0 1
17837: PPUSH
17838: LD_INT 4
17840: PPUSH
17841: CALL_OW 289
17845: PUSH
17846: LD_INT 0
17848: EQUAL
17849: IFFALSE 17866
// SetCargo ( i , mat_siberit , 100 ) ;
17851: LD_VAR 0 1
17855: PPUSH
17856: LD_INT 3
17858: PPUSH
17859: LD_INT 100
17861: PPUSH
17862: CALL_OW 290
17866: GO 17830
17868: POP
17869: POP
// end ;
17870: PPOPN 2
17872: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17873: LD_EXP 25
17877: PUSH
17878: LD_EXP 70
17882: AND
17883: IFFALSE 18066
17885: GO 17887
17887: DISABLE
17888: LD_INT 0
17890: PPUSH
17891: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17892: LD_ADDR_VAR 0 2
17896: PUSH
17897: LD_INT 22
17899: PUSH
17900: LD_OWVAR 2
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 2
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18066
// for i := 1 to 2 do
17923: LD_ADDR_VAR 0 1
17927: PUSH
17928: DOUBLE
17929: LD_INT 1
17931: DEC
17932: ST_TO_ADDR
17933: LD_INT 2
17935: PUSH
17936: FOR_TO
17937: IFFALSE 18064
// begin uc_side := your_side ;
17939: LD_ADDR_OWVAR 20
17943: PUSH
17944: LD_OWVAR 2
17948: ST_TO_ADDR
// uc_nation := nation_american ;
17949: LD_ADDR_OWVAR 21
17953: PUSH
17954: LD_INT 1
17956: ST_TO_ADDR
// vc_chassis := us_morphling ;
17957: LD_ADDR_OWVAR 37
17961: PUSH
17962: LD_INT 5
17964: ST_TO_ADDR
// vc_engine := engine_siberite ;
17965: LD_ADDR_OWVAR 39
17969: PUSH
17970: LD_INT 3
17972: ST_TO_ADDR
// vc_control := control_computer ;
17973: LD_ADDR_OWVAR 38
17977: PUSH
17978: LD_INT 3
17980: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17981: LD_ADDR_OWVAR 40
17985: PUSH
17986: LD_INT 10
17988: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17989: LD_VAR 0 2
17993: PUSH
17994: LD_INT 1
17996: ARRAY
17997: PPUSH
17998: CALL_OW 310
18002: NOT
18003: IFFALSE 18050
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18005: CALL_OW 45
18009: PPUSH
18010: LD_VAR 0 2
18014: PUSH
18015: LD_INT 1
18017: ARRAY
18018: PPUSH
18019: CALL_OW 250
18023: PPUSH
18024: LD_VAR 0 2
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: CALL_OW 251
18037: PPUSH
18038: LD_INT 12
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 50
18048: GO 18062
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18050: CALL_OW 45
18054: PPUSH
18055: LD_INT 1
18057: PPUSH
18058: CALL_OW 51
// end ;
18062: GO 17936
18064: POP
18065: POP
// end ;
18066: PPOPN 2
18068: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18069: LD_EXP 25
18073: PUSH
18074: LD_EXP 71
18078: AND
18079: IFFALSE 18301
18081: GO 18083
18083: DISABLE
18084: LD_INT 0
18086: PPUSH
18087: PPUSH
18088: PPUSH
18089: PPUSH
18090: PPUSH
18091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18092: LD_ADDR_VAR 0 6
18096: PUSH
18097: LD_INT 22
18099: PUSH
18100: LD_OWVAR 2
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 21
18111: PUSH
18112: LD_INT 1
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 3
18121: PUSH
18122: LD_INT 23
18124: PUSH
18125: LD_INT 0
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: PPUSH
18141: CALL_OW 69
18145: ST_TO_ADDR
// if not tmp then
18146: LD_VAR 0 6
18150: NOT
18151: IFFALSE 18155
// exit ;
18153: GO 18301
// s1 := rand ( 1 , 4 ) ;
18155: LD_ADDR_VAR 0 2
18159: PUSH
18160: LD_INT 1
18162: PPUSH
18163: LD_INT 4
18165: PPUSH
18166: CALL_OW 12
18170: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18171: LD_ADDR_VAR 0 4
18175: PUSH
18176: LD_VAR 0 6
18180: PUSH
18181: LD_INT 1
18183: ARRAY
18184: PPUSH
18185: LD_VAR 0 2
18189: PPUSH
18190: CALL_OW 259
18194: ST_TO_ADDR
// if s1 = 1 then
18195: LD_VAR 0 2
18199: PUSH
18200: LD_INT 1
18202: EQUAL
18203: IFFALSE 18223
// s2 := rand ( 2 , 4 ) else
18205: LD_ADDR_VAR 0 3
18209: PUSH
18210: LD_INT 2
18212: PPUSH
18213: LD_INT 4
18215: PPUSH
18216: CALL_OW 12
18220: ST_TO_ADDR
18221: GO 18231
// s2 := 1 ;
18223: LD_ADDR_VAR 0 3
18227: PUSH
18228: LD_INT 1
18230: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18231: LD_ADDR_VAR 0 5
18235: PUSH
18236: LD_VAR 0 6
18240: PUSH
18241: LD_INT 1
18243: ARRAY
18244: PPUSH
18245: LD_VAR 0 3
18249: PPUSH
18250: CALL_OW 259
18254: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18255: LD_VAR 0 6
18259: PUSH
18260: LD_INT 1
18262: ARRAY
18263: PPUSH
18264: LD_VAR 0 2
18268: PPUSH
18269: LD_VAR 0 5
18273: PPUSH
18274: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18278: LD_VAR 0 6
18282: PUSH
18283: LD_INT 1
18285: ARRAY
18286: PPUSH
18287: LD_VAR 0 3
18291: PPUSH
18292: LD_VAR 0 4
18296: PPUSH
18297: CALL_OW 237
// end ;
18301: PPOPN 6
18303: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18304: LD_EXP 25
18308: PUSH
18309: LD_EXP 72
18313: AND
18314: IFFALSE 18393
18316: GO 18318
18318: DISABLE
18319: LD_INT 0
18321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18322: LD_ADDR_VAR 0 1
18326: PUSH
18327: LD_INT 22
18329: PUSH
18330: LD_OWVAR 2
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PUSH
18339: LD_INT 30
18341: PUSH
18342: LD_INT 3
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PPUSH
18353: CALL_OW 69
18357: ST_TO_ADDR
// if not tmp then
18358: LD_VAR 0 1
18362: NOT
18363: IFFALSE 18367
// exit ;
18365: GO 18393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18367: LD_VAR 0 1
18371: PUSH
18372: LD_INT 1
18374: PPUSH
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 12
18384: ARRAY
18385: PPUSH
18386: LD_INT 1
18388: PPUSH
18389: CALL_OW 234
// end ;
18393: PPOPN 1
18395: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18396: LD_EXP 25
18400: PUSH
18401: LD_EXP 73
18405: AND
18406: IFFALSE 18518
18408: GO 18410
18410: DISABLE
18411: LD_INT 0
18413: PPUSH
18414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18415: LD_ADDR_VAR 0 2
18419: PUSH
18420: LD_INT 22
18422: PUSH
18423: LD_OWVAR 2
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 2
18434: PUSH
18435: LD_INT 30
18437: PUSH
18438: LD_INT 27
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 30
18447: PUSH
18448: LD_INT 26
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 30
18457: PUSH
18458: LD_INT 28
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 2
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18518
// for i in tmp do
18489: LD_ADDR_VAR 0 1
18493: PUSH
18494: LD_VAR 0 2
18498: PUSH
18499: FOR_IN
18500: IFFALSE 18516
// SetLives ( i , 1 ) ;
18502: LD_VAR 0 1
18506: PPUSH
18507: LD_INT 1
18509: PPUSH
18510: CALL_OW 234
18514: GO 18499
18516: POP
18517: POP
// end ;
18518: PPOPN 2
18520: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18521: LD_EXP 25
18525: PUSH
18526: LD_EXP 74
18530: AND
18531: IFFALSE 18818
18533: GO 18535
18535: DISABLE
18536: LD_INT 0
18538: PPUSH
18539: PPUSH
18540: PPUSH
// begin i := rand ( 1 , 7 ) ;
18541: LD_ADDR_VAR 0 1
18545: PUSH
18546: LD_INT 1
18548: PPUSH
18549: LD_INT 7
18551: PPUSH
18552: CALL_OW 12
18556: ST_TO_ADDR
// case i of 1 :
18557: LD_VAR 0 1
18561: PUSH
18562: LD_INT 1
18564: DOUBLE
18565: EQUAL
18566: IFTRUE 18570
18568: GO 18580
18570: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18571: LD_STRING earthquake(getX(game), 0, 32)
18573: PPUSH
18574: CALL_OW 559
18578: GO 18818
18580: LD_INT 2
18582: DOUBLE
18583: EQUAL
18584: IFTRUE 18588
18586: GO 18602
18588: POP
// begin ToLua ( displayStucuk(); ) ;
18589: LD_STRING displayStucuk();
18591: PPUSH
18592: CALL_OW 559
// ResetFog ;
18596: CALL_OW 335
// end ; 3 :
18600: GO 18818
18602: LD_INT 3
18604: DOUBLE
18605: EQUAL
18606: IFTRUE 18610
18608: GO 18714
18610: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: LD_INT 22
18618: PUSH
18619: LD_OWVAR 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PPUSH
18642: CALL_OW 69
18646: ST_TO_ADDR
// if not tmp then
18647: LD_VAR 0 2
18651: NOT
18652: IFFALSE 18656
// exit ;
18654: GO 18818
// un := tmp [ rand ( 1 , tmp ) ] ;
18656: LD_ADDR_VAR 0 3
18660: PUSH
18661: LD_VAR 0 2
18665: PUSH
18666: LD_INT 1
18668: PPUSH
18669: LD_VAR 0 2
18673: PPUSH
18674: CALL_OW 12
18678: ARRAY
18679: ST_TO_ADDR
// if Crawls ( un ) then
18680: LD_VAR 0 3
18684: PPUSH
18685: CALL_OW 318
18689: IFFALSE 18700
// ComWalk ( un ) ;
18691: LD_VAR 0 3
18695: PPUSH
18696: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18700: LD_VAR 0 3
18704: PPUSH
18705: LD_INT 8
18707: PPUSH
18708: CALL_OW 336
// end ; 4 :
18712: GO 18818
18714: LD_INT 4
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18796
18722: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_OWVAR 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 30
18742: PUSH
18743: LD_INT 29
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: ST_TO_ADDR
// if not tmp then
18759: LD_VAR 0 2
18763: NOT
18764: IFFALSE 18768
// exit ;
18766: GO 18818
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18768: LD_VAR 0 2
18772: PUSH
18773: LD_INT 1
18775: ARRAY
18776: PPUSH
18777: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18781: LD_VAR 0 2
18785: PUSH
18786: LD_INT 1
18788: ARRAY
18789: PPUSH
18790: CALL_OW 65
// end ; 5 .. 7 :
18794: GO 18818
18796: LD_INT 5
18798: DOUBLE
18799: GREATEREQUAL
18800: IFFALSE 18808
18802: LD_INT 7
18804: DOUBLE
18805: LESSEQUAL
18806: IFTRUE 18810
18808: GO 18817
18810: POP
// StreamSibBomb ; end ;
18811: CALL 15055 0 0
18815: GO 18818
18817: POP
// end ;
18818: PPOPN 3
18820: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18821: LD_EXP 25
18825: PUSH
18826: LD_EXP 75
18830: AND
18831: IFFALSE 18987
18833: GO 18835
18835: DISABLE
18836: LD_INT 0
18838: PPUSH
18839: PPUSH
18840: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18841: LD_ADDR_VAR 0 2
18845: PUSH
18846: LD_INT 81
18848: PUSH
18849: LD_OWVAR 2
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 2
18860: PUSH
18861: LD_INT 21
18863: PUSH
18864: LD_INT 1
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 21
18873: PUSH
18874: LD_INT 2
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 69
18894: ST_TO_ADDR
// if not tmp then
18895: LD_VAR 0 2
18899: NOT
18900: IFFALSE 18904
// exit ;
18902: GO 18987
// p := 0 ;
18904: LD_ADDR_VAR 0 3
18908: PUSH
18909: LD_INT 0
18911: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18912: LD_INT 35
18914: PPUSH
18915: CALL_OW 67
// p := p + 1 ;
18919: LD_ADDR_VAR 0 3
18923: PUSH
18924: LD_VAR 0 3
18928: PUSH
18929: LD_INT 1
18931: PLUS
18932: ST_TO_ADDR
// for i in tmp do
18933: LD_ADDR_VAR 0 1
18937: PUSH
18938: LD_VAR 0 2
18942: PUSH
18943: FOR_IN
18944: IFFALSE 18975
// if GetLives ( i ) < 1000 then
18946: LD_VAR 0 1
18950: PPUSH
18951: CALL_OW 256
18955: PUSH
18956: LD_INT 1000
18958: LESS
18959: IFFALSE 18973
// SetLives ( i , 1000 ) ;
18961: LD_VAR 0 1
18965: PPUSH
18966: LD_INT 1000
18968: PPUSH
18969: CALL_OW 234
18973: GO 18943
18975: POP
18976: POP
// until p > 20 ;
18977: LD_VAR 0 3
18981: PUSH
18982: LD_INT 20
18984: GREATER
18985: IFFALSE 18912
// end ;
18987: PPOPN 3
18989: END
// every 0 0$1 trigger StreamModeActive and sTime do
18990: LD_EXP 25
18994: PUSH
18995: LD_EXP 76
18999: AND
19000: IFFALSE 19035
19002: GO 19004
19004: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19005: LD_INT 28
19007: PPUSH
19008: LD_OWVAR 2
19012: PPUSH
19013: LD_INT 2
19015: PPUSH
19016: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19020: LD_INT 30
19022: PPUSH
19023: LD_OWVAR 2
19027: PPUSH
19028: LD_INT 2
19030: PPUSH
19031: CALL_OW 322
// end ;
19035: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19036: LD_EXP 25
19040: PUSH
19041: LD_EXP 77
19045: AND
19046: IFFALSE 19167
19048: GO 19050
19050: DISABLE
19051: LD_INT 0
19053: PPUSH
19054: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_OWVAR 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 21
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 3
19084: PUSH
19085: LD_INT 23
19087: PUSH
19088: LD_INT 0
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not tmp then
19109: LD_VAR 0 2
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19167
// for i in tmp do
19118: LD_ADDR_VAR 0 1
19122: PUSH
19123: LD_VAR 0 2
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19165
// begin if Crawls ( i ) then
19131: LD_VAR 0 1
19135: PPUSH
19136: CALL_OW 318
19140: IFFALSE 19151
// ComWalk ( i ) ;
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 138
// SetClass ( i , 2 ) ;
19151: LD_VAR 0 1
19155: PPUSH
19156: LD_INT 2
19158: PPUSH
19159: CALL_OW 336
// end ;
19163: GO 19128
19165: POP
19166: POP
// end ;
19167: PPOPN 2
19169: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19170: LD_EXP 25
19174: PUSH
19175: LD_EXP 78
19179: AND
19180: IFFALSE 19468
19182: GO 19184
19184: DISABLE
19185: LD_INT 0
19187: PPUSH
19188: PPUSH
19189: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19190: LD_OWVAR 2
19194: PPUSH
19195: LD_INT 9
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 1
19203: PPUSH
19204: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19208: LD_INT 9
19210: PPUSH
19211: LD_OWVAR 2
19215: PPUSH
19216: CALL_OW 343
// uc_side := 9 ;
19220: LD_ADDR_OWVAR 20
19224: PUSH
19225: LD_INT 9
19227: ST_TO_ADDR
// uc_nation := 2 ;
19228: LD_ADDR_OWVAR 21
19232: PUSH
19233: LD_INT 2
19235: ST_TO_ADDR
// hc_name := Dark Warrior ;
19236: LD_ADDR_OWVAR 26
19240: PUSH
19241: LD_STRING Dark Warrior
19243: ST_TO_ADDR
// hc_gallery :=  ;
19244: LD_ADDR_OWVAR 33
19248: PUSH
19249: LD_STRING 
19251: ST_TO_ADDR
// hc_noskilllimit := true ;
19252: LD_ADDR_OWVAR 76
19256: PUSH
19257: LD_INT 1
19259: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19260: LD_ADDR_OWVAR 31
19264: PUSH
19265: LD_INT 30
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: LD_INT 30
19273: PUSH
19274: LD_INT 30
19276: PUSH
19277: EMPTY
19278: LIST
19279: LIST
19280: LIST
19281: LIST
19282: ST_TO_ADDR
// un := CreateHuman ;
19283: LD_ADDR_VAR 0 3
19287: PUSH
19288: CALL_OW 44
19292: ST_TO_ADDR
// hc_noskilllimit := false ;
19293: LD_ADDR_OWVAR 76
19297: PUSH
19298: LD_INT 0
19300: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19301: LD_VAR 0 3
19305: PPUSH
19306: LD_INT 1
19308: PPUSH
19309: CALL_OW 51
// ToLua ( playRanger() ) ;
19313: LD_STRING playRanger()
19315: PPUSH
19316: CALL_OW 559
// p := 0 ;
19320: LD_ADDR_VAR 0 2
19324: PUSH
19325: LD_INT 0
19327: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19328: LD_INT 35
19330: PPUSH
19331: CALL_OW 67
// p := p + 1 ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_VAR 0 2
19344: PUSH
19345: LD_INT 1
19347: PLUS
19348: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19349: LD_VAR 0 3
19353: PPUSH
19354: CALL_OW 256
19358: PUSH
19359: LD_INT 1000
19361: LESS
19362: IFFALSE 19376
// SetLives ( un , 1000 ) ;
19364: LD_VAR 0 3
19368: PPUSH
19369: LD_INT 1000
19371: PPUSH
19372: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19376: LD_VAR 0 3
19380: PPUSH
19381: LD_INT 81
19383: PUSH
19384: LD_OWVAR 2
19388: PUSH
19389: EMPTY
19390: LIST
19391: LIST
19392: PUSH
19393: LD_INT 91
19395: PUSH
19396: LD_VAR 0 3
19400: PUSH
19401: LD_INT 30
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 69
19417: PPUSH
19418: LD_VAR 0 3
19422: PPUSH
19423: CALL_OW 74
19427: PPUSH
19428: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19432: LD_VAR 0 2
19436: PUSH
19437: LD_INT 80
19439: GREATER
19440: PUSH
19441: LD_VAR 0 3
19445: PPUSH
19446: CALL_OW 301
19450: OR
19451: IFFALSE 19328
// if un then
19453: LD_VAR 0 3
19457: IFFALSE 19468
// RemoveUnit ( un ) ;
19459: LD_VAR 0 3
19463: PPUSH
19464: CALL_OW 64
// end ;
19468: PPOPN 3
19470: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19471: LD_EXP 79
19475: IFFALSE 19591
19477: GO 19479
19479: DISABLE
19480: LD_INT 0
19482: PPUSH
19483: PPUSH
19484: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19485: LD_ADDR_VAR 0 2
19489: PUSH
19490: LD_INT 81
19492: PUSH
19493: LD_OWVAR 2
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 21
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PPUSH
19516: CALL_OW 69
19520: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19521: LD_STRING playComputer()
19523: PPUSH
19524: CALL_OW 559
// if not tmp then
19528: LD_VAR 0 2
19532: NOT
19533: IFFALSE 19537
// exit ;
19535: GO 19591
// for i in tmp do
19537: LD_ADDR_VAR 0 1
19541: PUSH
19542: LD_VAR 0 2
19546: PUSH
19547: FOR_IN
19548: IFFALSE 19589
// for j := 1 to 4 do
19550: LD_ADDR_VAR 0 3
19554: PUSH
19555: DOUBLE
19556: LD_INT 1
19558: DEC
19559: ST_TO_ADDR
19560: LD_INT 4
19562: PUSH
19563: FOR_TO
19564: IFFALSE 19585
// SetSkill ( i , j , 10 ) ;
19566: LD_VAR 0 1
19570: PPUSH
19571: LD_VAR 0 3
19575: PPUSH
19576: LD_INT 10
19578: PPUSH
19579: CALL_OW 237
19583: GO 19563
19585: POP
19586: POP
19587: GO 19547
19589: POP
19590: POP
// end ;
19591: PPOPN 3
19593: END
// every 0 0$1 trigger s30 do var i , tmp ;
19594: LD_EXP 80
19598: IFFALSE 19667
19600: GO 19602
19602: DISABLE
19603: LD_INT 0
19605: PPUSH
19606: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19607: LD_ADDR_VAR 0 2
19611: PUSH
19612: LD_INT 22
19614: PUSH
19615: LD_OWVAR 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PPUSH
19624: CALL_OW 69
19628: ST_TO_ADDR
// if not tmp then
19629: LD_VAR 0 2
19633: NOT
19634: IFFALSE 19638
// exit ;
19636: GO 19667
// for i in tmp do
19638: LD_ADDR_VAR 0 1
19642: PUSH
19643: LD_VAR 0 2
19647: PUSH
19648: FOR_IN
19649: IFFALSE 19665
// SetLives ( i , 300 ) ;
19651: LD_VAR 0 1
19655: PPUSH
19656: LD_INT 300
19658: PPUSH
19659: CALL_OW 234
19663: GO 19648
19665: POP
19666: POP
// end ;
19667: PPOPN 2
19669: END
// every 0 0$1 trigger s60 do var i , tmp ;
19670: LD_EXP 81
19674: IFFALSE 19743
19676: GO 19678
19678: DISABLE
19679: LD_INT 0
19681: PPUSH
19682: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19683: LD_ADDR_VAR 0 2
19687: PUSH
19688: LD_INT 22
19690: PUSH
19691: LD_OWVAR 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PPUSH
19700: CALL_OW 69
19704: ST_TO_ADDR
// if not tmp then
19705: LD_VAR 0 2
19709: NOT
19710: IFFALSE 19714
// exit ;
19712: GO 19743
// for i in tmp do
19714: LD_ADDR_VAR 0 1
19718: PUSH
19719: LD_VAR 0 2
19723: PUSH
19724: FOR_IN
19725: IFFALSE 19741
// SetLives ( i , 600 ) ;
19727: LD_VAR 0 1
19731: PPUSH
19732: LD_INT 600
19734: PPUSH
19735: CALL_OW 234
19739: GO 19724
19741: POP
19742: POP
// end ;
19743: PPOPN 2
19745: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19746: LD_INT 0
19748: PPUSH
// case cmd of 301 :
19749: LD_VAR 0 1
19753: PUSH
19754: LD_INT 301
19756: DOUBLE
19757: EQUAL
19758: IFTRUE 19762
19760: GO 19794
19762: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19763: LD_VAR 0 6
19767: PPUSH
19768: LD_VAR 0 7
19772: PPUSH
19773: LD_VAR 0 8
19777: PPUSH
19778: LD_VAR 0 4
19782: PPUSH
19783: LD_VAR 0 5
19787: PPUSH
19788: CALL 20995 0 5
19792: GO 19915
19794: LD_INT 302
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19839
19802: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19803: LD_VAR 0 6
19807: PPUSH
19808: LD_VAR 0 7
19812: PPUSH
19813: LD_VAR 0 8
19817: PPUSH
19818: LD_VAR 0 9
19822: PPUSH
19823: LD_VAR 0 4
19827: PPUSH
19828: LD_VAR 0 5
19832: PPUSH
19833: CALL 21086 0 6
19837: GO 19915
19839: LD_INT 303
19841: DOUBLE
19842: EQUAL
19843: IFTRUE 19847
19845: GO 19884
19847: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19848: LD_VAR 0 6
19852: PPUSH
19853: LD_VAR 0 7
19857: PPUSH
19858: LD_VAR 0 8
19862: PPUSH
19863: LD_VAR 0 9
19867: PPUSH
19868: LD_VAR 0 4
19872: PPUSH
19873: LD_VAR 0 5
19877: PPUSH
19878: CALL 19920 0 6
19882: GO 19915
19884: LD_INT 304
19886: DOUBLE
19887: EQUAL
19888: IFTRUE 19892
19890: GO 19914
19892: POP
// hHackTeleport ( unit , x , y ) ; end ;
19893: LD_VAR 0 2
19897: PPUSH
19898: LD_VAR 0 4
19902: PPUSH
19903: LD_VAR 0 5
19907: PPUSH
19908: CALL 21679 0 3
19912: GO 19915
19914: POP
// end ;
19915: LD_VAR 0 12
19919: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19920: LD_INT 0
19922: PPUSH
19923: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19924: LD_VAR 0 1
19928: PUSH
19929: LD_INT 1
19931: LESS
19932: PUSH
19933: LD_VAR 0 1
19937: PUSH
19938: LD_INT 3
19940: GREATER
19941: OR
19942: PUSH
19943: LD_VAR 0 5
19947: PPUSH
19948: LD_VAR 0 6
19952: PPUSH
19953: CALL_OW 428
19957: OR
19958: IFFALSE 19962
// exit ;
19960: GO 20682
// uc_side := your_side ;
19962: LD_ADDR_OWVAR 20
19966: PUSH
19967: LD_OWVAR 2
19971: ST_TO_ADDR
// uc_nation := nation ;
19972: LD_ADDR_OWVAR 21
19976: PUSH
19977: LD_VAR 0 1
19981: ST_TO_ADDR
// bc_level = 1 ;
19982: LD_ADDR_OWVAR 43
19986: PUSH
19987: LD_INT 1
19989: ST_TO_ADDR
// case btype of 1 :
19990: LD_VAR 0 2
19994: PUSH
19995: LD_INT 1
19997: DOUBLE
19998: EQUAL
19999: IFTRUE 20003
20001: GO 20014
20003: POP
// bc_type := b_depot ; 2 :
20004: LD_ADDR_OWVAR 42
20008: PUSH
20009: LD_INT 0
20011: ST_TO_ADDR
20012: GO 20626
20014: LD_INT 2
20016: DOUBLE
20017: EQUAL
20018: IFTRUE 20022
20020: GO 20033
20022: POP
// bc_type := b_warehouse ; 3 :
20023: LD_ADDR_OWVAR 42
20027: PUSH
20028: LD_INT 1
20030: ST_TO_ADDR
20031: GO 20626
20033: LD_INT 3
20035: DOUBLE
20036: EQUAL
20037: IFTRUE 20041
20039: GO 20052
20041: POP
// bc_type := b_lab ; 4 .. 9 :
20042: LD_ADDR_OWVAR 42
20046: PUSH
20047: LD_INT 6
20049: ST_TO_ADDR
20050: GO 20626
20052: LD_INT 4
20054: DOUBLE
20055: GREATEREQUAL
20056: IFFALSE 20064
20058: LD_INT 9
20060: DOUBLE
20061: LESSEQUAL
20062: IFTRUE 20066
20064: GO 20118
20066: POP
// begin bc_type := b_lab_half ;
20067: LD_ADDR_OWVAR 42
20071: PUSH
20072: LD_INT 7
20074: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20075: LD_ADDR_OWVAR 44
20079: PUSH
20080: LD_INT 10
20082: PUSH
20083: LD_INT 11
20085: PUSH
20086: LD_INT 12
20088: PUSH
20089: LD_INT 15
20091: PUSH
20092: LD_INT 14
20094: PUSH
20095: LD_INT 13
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: PUSH
20106: LD_VAR 0 2
20110: PUSH
20111: LD_INT 3
20113: MINUS
20114: ARRAY
20115: ST_TO_ADDR
// end ; 10 .. 13 :
20116: GO 20626
20118: LD_INT 10
20120: DOUBLE
20121: GREATEREQUAL
20122: IFFALSE 20130
20124: LD_INT 13
20126: DOUBLE
20127: LESSEQUAL
20128: IFTRUE 20132
20130: GO 20209
20132: POP
// begin bc_type := b_lab_full ;
20133: LD_ADDR_OWVAR 42
20137: PUSH
20138: LD_INT 8
20140: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20141: LD_ADDR_OWVAR 44
20145: PUSH
20146: LD_INT 10
20148: PUSH
20149: LD_INT 12
20151: PUSH
20152: LD_INT 14
20154: PUSH
20155: LD_INT 13
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: PUSH
20164: LD_VAR 0 2
20168: PUSH
20169: LD_INT 9
20171: MINUS
20172: ARRAY
20173: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20174: LD_ADDR_OWVAR 45
20178: PUSH
20179: LD_INT 11
20181: PUSH
20182: LD_INT 15
20184: PUSH
20185: LD_INT 12
20187: PUSH
20188: LD_INT 15
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: LIST
20195: LIST
20196: PUSH
20197: LD_VAR 0 2
20201: PUSH
20202: LD_INT 9
20204: MINUS
20205: ARRAY
20206: ST_TO_ADDR
// end ; 14 :
20207: GO 20626
20209: LD_INT 14
20211: DOUBLE
20212: EQUAL
20213: IFTRUE 20217
20215: GO 20228
20217: POP
// bc_type := b_workshop ; 15 :
20218: LD_ADDR_OWVAR 42
20222: PUSH
20223: LD_INT 2
20225: ST_TO_ADDR
20226: GO 20626
20228: LD_INT 15
20230: DOUBLE
20231: EQUAL
20232: IFTRUE 20236
20234: GO 20247
20236: POP
// bc_type := b_factory ; 16 :
20237: LD_ADDR_OWVAR 42
20241: PUSH
20242: LD_INT 3
20244: ST_TO_ADDR
20245: GO 20626
20247: LD_INT 16
20249: DOUBLE
20250: EQUAL
20251: IFTRUE 20255
20253: GO 20266
20255: POP
// bc_type := b_ext_gun ; 17 :
20256: LD_ADDR_OWVAR 42
20260: PUSH
20261: LD_INT 17
20263: ST_TO_ADDR
20264: GO 20626
20266: LD_INT 17
20268: DOUBLE
20269: EQUAL
20270: IFTRUE 20274
20272: GO 20302
20274: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20275: LD_ADDR_OWVAR 42
20279: PUSH
20280: LD_INT 19
20282: PUSH
20283: LD_INT 23
20285: PUSH
20286: LD_INT 19
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: PUSH
20294: LD_VAR 0 1
20298: ARRAY
20299: ST_TO_ADDR
20300: GO 20626
20302: LD_INT 18
20304: DOUBLE
20305: EQUAL
20306: IFTRUE 20310
20308: GO 20321
20310: POP
// bc_type := b_ext_radar ; 19 :
20311: LD_ADDR_OWVAR 42
20315: PUSH
20316: LD_INT 20
20318: ST_TO_ADDR
20319: GO 20626
20321: LD_INT 19
20323: DOUBLE
20324: EQUAL
20325: IFTRUE 20329
20327: GO 20340
20329: POP
// bc_type := b_ext_radio ; 20 :
20330: LD_ADDR_OWVAR 42
20334: PUSH
20335: LD_INT 22
20337: ST_TO_ADDR
20338: GO 20626
20340: LD_INT 20
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20359
20348: POP
// bc_type := b_ext_siberium ; 21 :
20349: LD_ADDR_OWVAR 42
20353: PUSH
20354: LD_INT 21
20356: ST_TO_ADDR
20357: GO 20626
20359: LD_INT 21
20361: DOUBLE
20362: EQUAL
20363: IFTRUE 20367
20365: GO 20378
20367: POP
// bc_type := b_ext_computer ; 22 :
20368: LD_ADDR_OWVAR 42
20372: PUSH
20373: LD_INT 24
20375: ST_TO_ADDR
20376: GO 20626
20378: LD_INT 22
20380: DOUBLE
20381: EQUAL
20382: IFTRUE 20386
20384: GO 20397
20386: POP
// bc_type := b_ext_track ; 23 :
20387: LD_ADDR_OWVAR 42
20391: PUSH
20392: LD_INT 16
20394: ST_TO_ADDR
20395: GO 20626
20397: LD_INT 23
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20416
20405: POP
// bc_type := b_ext_laser ; 24 :
20406: LD_ADDR_OWVAR 42
20410: PUSH
20411: LD_INT 25
20413: ST_TO_ADDR
20414: GO 20626
20416: LD_INT 24
20418: DOUBLE
20419: EQUAL
20420: IFTRUE 20424
20422: GO 20435
20424: POP
// bc_type := b_control_tower ; 25 :
20425: LD_ADDR_OWVAR 42
20429: PUSH
20430: LD_INT 36
20432: ST_TO_ADDR
20433: GO 20626
20435: LD_INT 25
20437: DOUBLE
20438: EQUAL
20439: IFTRUE 20443
20441: GO 20454
20443: POP
// bc_type := b_breastwork ; 26 :
20444: LD_ADDR_OWVAR 42
20448: PUSH
20449: LD_INT 31
20451: ST_TO_ADDR
20452: GO 20626
20454: LD_INT 26
20456: DOUBLE
20457: EQUAL
20458: IFTRUE 20462
20460: GO 20473
20462: POP
// bc_type := b_bunker ; 27 :
20463: LD_ADDR_OWVAR 42
20467: PUSH
20468: LD_INT 32
20470: ST_TO_ADDR
20471: GO 20626
20473: LD_INT 27
20475: DOUBLE
20476: EQUAL
20477: IFTRUE 20481
20479: GO 20492
20481: POP
// bc_type := b_turret ; 28 :
20482: LD_ADDR_OWVAR 42
20486: PUSH
20487: LD_INT 33
20489: ST_TO_ADDR
20490: GO 20626
20492: LD_INT 28
20494: DOUBLE
20495: EQUAL
20496: IFTRUE 20500
20498: GO 20511
20500: POP
// bc_type := b_armoury ; 29 :
20501: LD_ADDR_OWVAR 42
20505: PUSH
20506: LD_INT 4
20508: ST_TO_ADDR
20509: GO 20626
20511: LD_INT 29
20513: DOUBLE
20514: EQUAL
20515: IFTRUE 20519
20517: GO 20530
20519: POP
// bc_type := b_barracks ; 30 :
20520: LD_ADDR_OWVAR 42
20524: PUSH
20525: LD_INT 5
20527: ST_TO_ADDR
20528: GO 20626
20530: LD_INT 30
20532: DOUBLE
20533: EQUAL
20534: IFTRUE 20538
20536: GO 20549
20538: POP
// bc_type := b_solar_power ; 31 :
20539: LD_ADDR_OWVAR 42
20543: PUSH
20544: LD_INT 27
20546: ST_TO_ADDR
20547: GO 20626
20549: LD_INT 31
20551: DOUBLE
20552: EQUAL
20553: IFTRUE 20557
20555: GO 20568
20557: POP
// bc_type := b_oil_power ; 32 :
20558: LD_ADDR_OWVAR 42
20562: PUSH
20563: LD_INT 26
20565: ST_TO_ADDR
20566: GO 20626
20568: LD_INT 32
20570: DOUBLE
20571: EQUAL
20572: IFTRUE 20576
20574: GO 20587
20576: POP
// bc_type := b_siberite_power ; 33 :
20577: LD_ADDR_OWVAR 42
20581: PUSH
20582: LD_INT 28
20584: ST_TO_ADDR
20585: GO 20626
20587: LD_INT 33
20589: DOUBLE
20590: EQUAL
20591: IFTRUE 20595
20593: GO 20606
20595: POP
// bc_type := b_oil_mine ; 34 :
20596: LD_ADDR_OWVAR 42
20600: PUSH
20601: LD_INT 29
20603: ST_TO_ADDR
20604: GO 20626
20606: LD_INT 34
20608: DOUBLE
20609: EQUAL
20610: IFTRUE 20614
20612: GO 20625
20614: POP
// bc_type := b_siberite_mine ; end ;
20615: LD_ADDR_OWVAR 42
20619: PUSH
20620: LD_INT 30
20622: ST_TO_ADDR
20623: GO 20626
20625: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20626: LD_ADDR_VAR 0 8
20630: PUSH
20631: LD_VAR 0 5
20635: PPUSH
20636: LD_VAR 0 6
20640: PPUSH
20641: LD_VAR 0 3
20645: PPUSH
20646: CALL_OW 47
20650: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20651: LD_OWVAR 42
20655: PUSH
20656: LD_INT 32
20658: PUSH
20659: LD_INT 33
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: IN
20666: IFFALSE 20682
// PlaceWeaponTurret ( b , weapon ) ;
20668: LD_VAR 0 8
20672: PPUSH
20673: LD_VAR 0 4
20677: PPUSH
20678: CALL_OW 431
// end ;
20682: LD_VAR 0 7
20686: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20687: LD_INT 0
20689: PPUSH
20690: PPUSH
20691: PPUSH
20692: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20693: LD_ADDR_VAR 0 4
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_OWVAR 2
20705: PUSH
20706: EMPTY
20707: LIST
20708: LIST
20709: PUSH
20710: LD_INT 2
20712: PUSH
20713: LD_INT 30
20715: PUSH
20716: LD_INT 0
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: PUSH
20723: LD_INT 30
20725: PUSH
20726: LD_INT 1
20728: PUSH
20729: EMPTY
20730: LIST
20731: LIST
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: LIST
20737: PUSH
20738: EMPTY
20739: LIST
20740: LIST
20741: PPUSH
20742: CALL_OW 69
20746: ST_TO_ADDR
// if not tmp then
20747: LD_VAR 0 4
20751: NOT
20752: IFFALSE 20756
// exit ;
20754: GO 20815
// for i in tmp do
20756: LD_ADDR_VAR 0 2
20760: PUSH
20761: LD_VAR 0 4
20765: PUSH
20766: FOR_IN
20767: IFFALSE 20813
// for j = 1 to 3 do
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: DOUBLE
20775: LD_INT 1
20777: DEC
20778: ST_TO_ADDR
20779: LD_INT 3
20781: PUSH
20782: FOR_TO
20783: IFFALSE 20809
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20785: LD_VAR 0 2
20789: PPUSH
20790: CALL_OW 274
20794: PPUSH
20795: LD_VAR 0 3
20799: PPUSH
20800: LD_INT 99999
20802: PPUSH
20803: CALL_OW 277
20807: GO 20782
20809: POP
20810: POP
20811: GO 20766
20813: POP
20814: POP
// end ;
20815: LD_VAR 0 1
20819: RET
// export function hHackSetLevel10 ; var i , j ; begin
20820: LD_INT 0
20822: PPUSH
20823: PPUSH
20824: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20825: LD_ADDR_VAR 0 2
20829: PUSH
20830: LD_INT 21
20832: PUSH
20833: LD_INT 1
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PPUSH
20840: CALL_OW 69
20844: PUSH
20845: FOR_IN
20846: IFFALSE 20898
// if IsSelected ( i ) then
20848: LD_VAR 0 2
20852: PPUSH
20853: CALL_OW 306
20857: IFFALSE 20896
// begin for j := 1 to 4 do
20859: LD_ADDR_VAR 0 3
20863: PUSH
20864: DOUBLE
20865: LD_INT 1
20867: DEC
20868: ST_TO_ADDR
20869: LD_INT 4
20871: PUSH
20872: FOR_TO
20873: IFFALSE 20894
// SetSkill ( i , j , 10 ) ;
20875: LD_VAR 0 2
20879: PPUSH
20880: LD_VAR 0 3
20884: PPUSH
20885: LD_INT 10
20887: PPUSH
20888: CALL_OW 237
20892: GO 20872
20894: POP
20895: POP
// end ;
20896: GO 20845
20898: POP
20899: POP
// end ;
20900: LD_VAR 0 1
20904: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20905: LD_INT 0
20907: PPUSH
20908: PPUSH
20909: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20910: LD_ADDR_VAR 0 2
20914: PUSH
20915: LD_INT 22
20917: PUSH
20918: LD_OWVAR 2
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 21
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PPUSH
20941: CALL_OW 69
20945: PUSH
20946: FOR_IN
20947: IFFALSE 20988
// begin for j := 1 to 4 do
20949: LD_ADDR_VAR 0 3
20953: PUSH
20954: DOUBLE
20955: LD_INT 1
20957: DEC
20958: ST_TO_ADDR
20959: LD_INT 4
20961: PUSH
20962: FOR_TO
20963: IFFALSE 20984
// SetSkill ( i , j , 10 ) ;
20965: LD_VAR 0 2
20969: PPUSH
20970: LD_VAR 0 3
20974: PPUSH
20975: LD_INT 10
20977: PPUSH
20978: CALL_OW 237
20982: GO 20962
20984: POP
20985: POP
// end ;
20986: GO 20946
20988: POP
20989: POP
// end ;
20990: LD_VAR 0 1
20994: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20995: LD_INT 0
20997: PPUSH
// uc_side := your_side ;
20998: LD_ADDR_OWVAR 20
21002: PUSH
21003: LD_OWVAR 2
21007: ST_TO_ADDR
// uc_nation := nation ;
21008: LD_ADDR_OWVAR 21
21012: PUSH
21013: LD_VAR 0 1
21017: ST_TO_ADDR
// InitHc ;
21018: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21022: LD_INT 0
21024: PPUSH
21025: LD_VAR 0 2
21029: PPUSH
21030: LD_VAR 0 3
21034: PPUSH
21035: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21039: LD_VAR 0 4
21043: PPUSH
21044: LD_VAR 0 5
21048: PPUSH
21049: CALL_OW 428
21053: PUSH
21054: LD_INT 0
21056: EQUAL
21057: IFFALSE 21081
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21059: CALL_OW 44
21063: PPUSH
21064: LD_VAR 0 4
21068: PPUSH
21069: LD_VAR 0 5
21073: PPUSH
21074: LD_INT 1
21076: PPUSH
21077: CALL_OW 48
// end ;
21081: LD_VAR 0 6
21085: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21086: LD_INT 0
21088: PPUSH
21089: PPUSH
// uc_side := your_side ;
21090: LD_ADDR_OWVAR 20
21094: PUSH
21095: LD_OWVAR 2
21099: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21100: LD_VAR 0 1
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: LD_INT 2
21110: PUSH
21111: LD_INT 3
21113: PUSH
21114: LD_INT 4
21116: PUSH
21117: LD_INT 5
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: IN
21127: IFFALSE 21139
// uc_nation := nation_american else
21129: LD_ADDR_OWVAR 21
21133: PUSH
21134: LD_INT 1
21136: ST_TO_ADDR
21137: GO 21182
// if chassis in [ 11 , 12 , 13 , 14 ] then
21139: LD_VAR 0 1
21143: PUSH
21144: LD_INT 11
21146: PUSH
21147: LD_INT 12
21149: PUSH
21150: LD_INT 13
21152: PUSH
21153: LD_INT 14
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: LIST
21161: IN
21162: IFFALSE 21174
// uc_nation := nation_arabian else
21164: LD_ADDR_OWVAR 21
21168: PUSH
21169: LD_INT 2
21171: ST_TO_ADDR
21172: GO 21182
// uc_nation := nation_russian ;
21174: LD_ADDR_OWVAR 21
21178: PUSH
21179: LD_INT 3
21181: ST_TO_ADDR
// vc_chassis := chassis ;
21182: LD_ADDR_OWVAR 37
21186: PUSH
21187: LD_VAR 0 1
21191: ST_TO_ADDR
// vc_engine := engine ;
21192: LD_ADDR_OWVAR 39
21196: PUSH
21197: LD_VAR 0 2
21201: ST_TO_ADDR
// vc_control := control ;
21202: LD_ADDR_OWVAR 38
21206: PUSH
21207: LD_VAR 0 3
21211: ST_TO_ADDR
// vc_weapon := weapon ;
21212: LD_ADDR_OWVAR 40
21216: PUSH
21217: LD_VAR 0 4
21221: ST_TO_ADDR
// un := CreateVehicle ;
21222: LD_ADDR_VAR 0 8
21226: PUSH
21227: CALL_OW 45
21231: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21232: LD_VAR 0 8
21236: PPUSH
21237: LD_INT 0
21239: PPUSH
21240: LD_INT 5
21242: PPUSH
21243: CALL_OW 12
21247: PPUSH
21248: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21252: LD_VAR 0 8
21256: PPUSH
21257: LD_VAR 0 5
21261: PPUSH
21262: LD_VAR 0 6
21266: PPUSH
21267: LD_INT 1
21269: PPUSH
21270: CALL_OW 48
// end ;
21274: LD_VAR 0 7
21278: RET
// export hInvincible ; every 1 do
21279: GO 21281
21281: DISABLE
// hInvincible := [ ] ;
21282: LD_ADDR_EXP 82
21286: PUSH
21287: EMPTY
21288: ST_TO_ADDR
21289: END
// every 10 do var i ;
21290: GO 21292
21292: DISABLE
21293: LD_INT 0
21295: PPUSH
// begin enable ;
21296: ENABLE
// if not hInvincible then
21297: LD_EXP 82
21301: NOT
21302: IFFALSE 21306
// exit ;
21304: GO 21350
// for i in hInvincible do
21306: LD_ADDR_VAR 0 1
21310: PUSH
21311: LD_EXP 82
21315: PUSH
21316: FOR_IN
21317: IFFALSE 21348
// if GetLives ( i ) < 1000 then
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 256
21328: PUSH
21329: LD_INT 1000
21331: LESS
21332: IFFALSE 21346
// SetLives ( i , 1000 ) ;
21334: LD_VAR 0 1
21338: PPUSH
21339: LD_INT 1000
21341: PPUSH
21342: CALL_OW 234
21346: GO 21316
21348: POP
21349: POP
// end ;
21350: PPOPN 1
21352: END
// export function hHackInvincible ; var i ; begin
21353: LD_INT 0
21355: PPUSH
21356: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21357: LD_ADDR_VAR 0 2
21361: PUSH
21362: LD_INT 2
21364: PUSH
21365: LD_INT 21
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 2
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: LIST
21389: PPUSH
21390: CALL_OW 69
21394: PUSH
21395: FOR_IN
21396: IFFALSE 21457
// if IsSelected ( i ) then
21398: LD_VAR 0 2
21402: PPUSH
21403: CALL_OW 306
21407: IFFALSE 21455
// begin if i in hInvincible then
21409: LD_VAR 0 2
21413: PUSH
21414: LD_EXP 82
21418: IN
21419: IFFALSE 21439
// hInvincible := hInvincible diff i else
21421: LD_ADDR_EXP 82
21425: PUSH
21426: LD_EXP 82
21430: PUSH
21431: LD_VAR 0 2
21435: DIFF
21436: ST_TO_ADDR
21437: GO 21455
// hInvincible := hInvincible union i ;
21439: LD_ADDR_EXP 82
21443: PUSH
21444: LD_EXP 82
21448: PUSH
21449: LD_VAR 0 2
21453: UNION
21454: ST_TO_ADDR
// end ;
21455: GO 21395
21457: POP
21458: POP
// end ;
21459: LD_VAR 0 1
21463: RET
// export function hHackInvisible ; var i , j ; begin
21464: LD_INT 0
21466: PPUSH
21467: PPUSH
21468: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21469: LD_ADDR_VAR 0 2
21473: PUSH
21474: LD_INT 21
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PPUSH
21484: CALL_OW 69
21488: PUSH
21489: FOR_IN
21490: IFFALSE 21514
// if IsSelected ( i ) then
21492: LD_VAR 0 2
21496: PPUSH
21497: CALL_OW 306
21501: IFFALSE 21512
// ComForceInvisible ( i ) ;
21503: LD_VAR 0 2
21507: PPUSH
21508: CALL_OW 496
21512: GO 21489
21514: POP
21515: POP
// end ;
21516: LD_VAR 0 1
21520: RET
// export function hHackChangeYourSide ; begin
21521: LD_INT 0
21523: PPUSH
// if your_side = 8 then
21524: LD_OWVAR 2
21528: PUSH
21529: LD_INT 8
21531: EQUAL
21532: IFFALSE 21544
// your_side := 0 else
21534: LD_ADDR_OWVAR 2
21538: PUSH
21539: LD_INT 0
21541: ST_TO_ADDR
21542: GO 21558
// your_side := your_side + 1 ;
21544: LD_ADDR_OWVAR 2
21548: PUSH
21549: LD_OWVAR 2
21553: PUSH
21554: LD_INT 1
21556: PLUS
21557: ST_TO_ADDR
// end ;
21558: LD_VAR 0 1
21562: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21563: LD_INT 0
21565: PPUSH
21566: PPUSH
21567: PPUSH
// for i in all_units do
21568: LD_ADDR_VAR 0 2
21572: PUSH
21573: LD_OWVAR 3
21577: PUSH
21578: FOR_IN
21579: IFFALSE 21657
// if IsSelected ( i ) then
21581: LD_VAR 0 2
21585: PPUSH
21586: CALL_OW 306
21590: IFFALSE 21655
// begin j := GetSide ( i ) ;
21592: LD_ADDR_VAR 0 3
21596: PUSH
21597: LD_VAR 0 2
21601: PPUSH
21602: CALL_OW 255
21606: ST_TO_ADDR
// if j = 8 then
21607: LD_VAR 0 3
21611: PUSH
21612: LD_INT 8
21614: EQUAL
21615: IFFALSE 21627
// j := 0 else
21617: LD_ADDR_VAR 0 3
21621: PUSH
21622: LD_INT 0
21624: ST_TO_ADDR
21625: GO 21641
// j := j + 1 ;
21627: LD_ADDR_VAR 0 3
21631: PUSH
21632: LD_VAR 0 3
21636: PUSH
21637: LD_INT 1
21639: PLUS
21640: ST_TO_ADDR
// SetSide ( i , j ) ;
21641: LD_VAR 0 2
21645: PPUSH
21646: LD_VAR 0 3
21650: PPUSH
21651: CALL_OW 235
// end ;
21655: GO 21578
21657: POP
21658: POP
// end ;
21659: LD_VAR 0 1
21663: RET
// export function hHackFog ; begin
21664: LD_INT 0
21666: PPUSH
// FogOff ( true ) ;
21667: LD_INT 1
21669: PPUSH
21670: CALL_OW 344
// end ;
21674: LD_VAR 0 1
21678: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21679: LD_INT 0
21681: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21682: LD_VAR 0 1
21686: PPUSH
21687: LD_VAR 0 2
21691: PPUSH
21692: LD_VAR 0 3
21696: PPUSH
21697: LD_INT 1
21699: PPUSH
21700: LD_INT 1
21702: PPUSH
21703: CALL_OW 483
// CenterOnXY ( x , y ) ;
21707: LD_VAR 0 2
21711: PPUSH
21712: LD_VAR 0 3
21716: PPUSH
21717: CALL_OW 84
// end ;
21721: LD_VAR 0 4
21725: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21726: LD_INT 0
21728: PPUSH
21729: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21730: LD_VAR 0 1
21734: NOT
21735: PUSH
21736: LD_VAR 0 2
21740: PPUSH
21741: LD_VAR 0 3
21745: PPUSH
21746: CALL_OW 488
21750: NOT
21751: OR
21752: PUSH
21753: LD_VAR 0 1
21757: PPUSH
21758: CALL_OW 266
21762: PUSH
21763: LD_INT 3
21765: NONEQUAL
21766: PUSH
21767: LD_VAR 0 1
21771: PPUSH
21772: CALL_OW 247
21776: PUSH
21777: LD_INT 1
21779: EQUAL
21780: NOT
21781: AND
21782: OR
21783: IFFALSE 21787
// exit ;
21785: GO 21936
// if GetType ( factory ) = unit_human then
21787: LD_VAR 0 1
21791: PPUSH
21792: CALL_OW 247
21796: PUSH
21797: LD_INT 1
21799: EQUAL
21800: IFFALSE 21817
// factory := IsInUnit ( factory ) ;
21802: LD_ADDR_VAR 0 1
21806: PUSH
21807: LD_VAR 0 1
21811: PPUSH
21812: CALL_OW 310
21816: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 266
21826: PUSH
21827: LD_INT 3
21829: NONEQUAL
21830: IFFALSE 21834
// exit ;
21832: GO 21936
// if HexInfo ( x , y ) = factory then
21834: LD_VAR 0 2
21838: PPUSH
21839: LD_VAR 0 3
21843: PPUSH
21844: CALL_OW 428
21848: PUSH
21849: LD_VAR 0 1
21853: EQUAL
21854: IFFALSE 21881
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
21856: LD_ADDR_EXP 83
21860: PUSH
21861: LD_EXP 83
21865: PPUSH
21866: LD_VAR 0 1
21870: PPUSH
21871: LD_INT 0
21873: PPUSH
21874: CALL_OW 1
21878: ST_TO_ADDR
21879: GO 21932
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
21881: LD_ADDR_EXP 83
21885: PUSH
21886: LD_EXP 83
21890: PPUSH
21891: LD_VAR 0 1
21895: PPUSH
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 255
21905: PUSH
21906: LD_VAR 0 1
21910: PUSH
21911: LD_VAR 0 2
21915: PUSH
21916: LD_VAR 0 3
21920: PUSH
21921: EMPTY
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: PPUSH
21927: CALL_OW 1
21931: ST_TO_ADDR
// UpdateFactoryWaypoints ;
21932: CALL 21941 0 0
// end ;
21936: LD_VAR 0 4
21940: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
21941: LD_INT 0
21943: PPUSH
21944: PPUSH
21945: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
21946: LD_STRING resetFactoryWaypoint();
21948: PPUSH
21949: CALL_OW 559
// if factoryWaypoints then
21953: LD_EXP 83
21957: IFFALSE 22083
// begin list := PrepareArray ( factoryWaypoints ) ;
21959: LD_ADDR_VAR 0 3
21963: PUSH
21964: LD_EXP 83
21968: PPUSH
21969: CALL 68552 0 1
21973: ST_TO_ADDR
// for i := 1 to list do
21974: LD_ADDR_VAR 0 2
21978: PUSH
21979: DOUBLE
21980: LD_INT 1
21982: DEC
21983: ST_TO_ADDR
21984: LD_VAR 0 3
21988: PUSH
21989: FOR_TO
21990: IFFALSE 22081
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
21992: LD_STRING setFactoryWaypointXY(
21994: PUSH
21995: LD_VAR 0 3
21999: PUSH
22000: LD_VAR 0 2
22004: ARRAY
22005: PUSH
22006: LD_INT 1
22008: ARRAY
22009: STR
22010: PUSH
22011: LD_STRING ,
22013: STR
22014: PUSH
22015: LD_VAR 0 3
22019: PUSH
22020: LD_VAR 0 2
22024: ARRAY
22025: PUSH
22026: LD_INT 2
22028: ARRAY
22029: STR
22030: PUSH
22031: LD_STRING ,
22033: STR
22034: PUSH
22035: LD_VAR 0 3
22039: PUSH
22040: LD_VAR 0 2
22044: ARRAY
22045: PUSH
22046: LD_INT 3
22048: ARRAY
22049: STR
22050: PUSH
22051: LD_STRING ,
22053: STR
22054: PUSH
22055: LD_VAR 0 3
22059: PUSH
22060: LD_VAR 0 2
22064: ARRAY
22065: PUSH
22066: LD_INT 4
22068: ARRAY
22069: STR
22070: PUSH
22071: LD_STRING )
22073: STR
22074: PPUSH
22075: CALL_OW 559
22079: GO 21989
22081: POP
22082: POP
// end ; end ;
22083: LD_VAR 0 1
22087: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22088: LD_INT 0
22090: PPUSH
// if HexInfo ( x , y ) = warehouse then
22091: LD_VAR 0 2
22095: PPUSH
22096: LD_VAR 0 3
22100: PPUSH
22101: CALL_OW 428
22105: PUSH
22106: LD_VAR 0 1
22110: EQUAL
22111: IFFALSE 22138
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22113: LD_ADDR_EXP 84
22117: PUSH
22118: LD_EXP 84
22122: PPUSH
22123: LD_VAR 0 1
22127: PPUSH
22128: LD_INT 0
22130: PPUSH
22131: CALL_OW 1
22135: ST_TO_ADDR
22136: GO 22189
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22138: LD_ADDR_EXP 84
22142: PUSH
22143: LD_EXP 84
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: LD_VAR 0 1
22157: PPUSH
22158: CALL_OW 255
22162: PUSH
22163: LD_VAR 0 1
22167: PUSH
22168: LD_VAR 0 2
22172: PUSH
22173: LD_VAR 0 3
22177: PUSH
22178: EMPTY
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: PPUSH
22184: CALL_OW 1
22188: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22189: CALL 22198 0 0
// end ;
22193: LD_VAR 0 4
22197: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22198: LD_INT 0
22200: PPUSH
22201: PPUSH
22202: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22203: LD_STRING resetWarehouseGatheringPoints();
22205: PPUSH
22206: CALL_OW 559
// if warehouseGatheringPoints then
22210: LD_EXP 84
22214: IFFALSE 22340
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22216: LD_ADDR_VAR 0 3
22220: PUSH
22221: LD_EXP 84
22225: PPUSH
22226: CALL 68552 0 1
22230: ST_TO_ADDR
// for i := 1 to list do
22231: LD_ADDR_VAR 0 2
22235: PUSH
22236: DOUBLE
22237: LD_INT 1
22239: DEC
22240: ST_TO_ADDR
22241: LD_VAR 0 3
22245: PUSH
22246: FOR_TO
22247: IFFALSE 22338
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22249: LD_STRING setWarehouseGatheringPointXY(
22251: PUSH
22252: LD_VAR 0 3
22256: PUSH
22257: LD_VAR 0 2
22261: ARRAY
22262: PUSH
22263: LD_INT 1
22265: ARRAY
22266: STR
22267: PUSH
22268: LD_STRING ,
22270: STR
22271: PUSH
22272: LD_VAR 0 3
22276: PUSH
22277: LD_VAR 0 2
22281: ARRAY
22282: PUSH
22283: LD_INT 2
22285: ARRAY
22286: STR
22287: PUSH
22288: LD_STRING ,
22290: STR
22291: PUSH
22292: LD_VAR 0 3
22296: PUSH
22297: LD_VAR 0 2
22301: ARRAY
22302: PUSH
22303: LD_INT 3
22305: ARRAY
22306: STR
22307: PUSH
22308: LD_STRING ,
22310: STR
22311: PUSH
22312: LD_VAR 0 3
22316: PUSH
22317: LD_VAR 0 2
22321: ARRAY
22322: PUSH
22323: LD_INT 4
22325: ARRAY
22326: STR
22327: PUSH
22328: LD_STRING )
22330: STR
22331: PPUSH
22332: CALL_OW 559
22336: GO 22246
22338: POP
22339: POP
// end ; end ;
22340: LD_VAR 0 1
22344: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22345: LD_EXP 84
22349: IFFALSE 23034
22351: GO 22353
22353: DISABLE
22354: LD_INT 0
22356: PPUSH
22357: PPUSH
22358: PPUSH
22359: PPUSH
22360: PPUSH
22361: PPUSH
22362: PPUSH
22363: PPUSH
22364: PPUSH
// begin enable ;
22365: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22366: LD_ADDR_VAR 0 3
22370: PUSH
22371: LD_EXP 84
22375: PPUSH
22376: CALL 68552 0 1
22380: ST_TO_ADDR
// if not list then
22381: LD_VAR 0 3
22385: NOT
22386: IFFALSE 22390
// exit ;
22388: GO 23034
// for i := 1 to list do
22390: LD_ADDR_VAR 0 1
22394: PUSH
22395: DOUBLE
22396: LD_INT 1
22398: DEC
22399: ST_TO_ADDR
22400: LD_VAR 0 3
22404: PUSH
22405: FOR_TO
22406: IFFALSE 23032
// begin depot := list [ i ] [ 2 ] ;
22408: LD_ADDR_VAR 0 8
22412: PUSH
22413: LD_VAR 0 3
22417: PUSH
22418: LD_VAR 0 1
22422: ARRAY
22423: PUSH
22424: LD_INT 2
22426: ARRAY
22427: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22428: LD_ADDR_VAR 0 5
22432: PUSH
22433: LD_VAR 0 3
22437: PUSH
22438: LD_VAR 0 1
22442: ARRAY
22443: PUSH
22444: LD_INT 1
22446: ARRAY
22447: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22448: LD_VAR 0 8
22452: PPUSH
22453: CALL_OW 301
22457: PUSH
22458: LD_VAR 0 5
22462: PUSH
22463: LD_VAR 0 8
22467: PPUSH
22468: CALL_OW 255
22472: NONEQUAL
22473: OR
22474: IFFALSE 22503
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22476: LD_ADDR_EXP 84
22480: PUSH
22481: LD_EXP 84
22485: PPUSH
22486: LD_VAR 0 8
22490: PPUSH
22491: LD_INT 0
22493: PPUSH
22494: CALL_OW 1
22498: ST_TO_ADDR
// exit ;
22499: POP
22500: POP
22501: GO 23034
// end ; x := list [ i ] [ 3 ] ;
22503: LD_ADDR_VAR 0 6
22507: PUSH
22508: LD_VAR 0 3
22512: PUSH
22513: LD_VAR 0 1
22517: ARRAY
22518: PUSH
22519: LD_INT 3
22521: ARRAY
22522: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22523: LD_ADDR_VAR 0 7
22527: PUSH
22528: LD_VAR 0 3
22532: PUSH
22533: LD_VAR 0 1
22537: ARRAY
22538: PUSH
22539: LD_INT 4
22541: ARRAY
22542: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22543: LD_ADDR_VAR 0 9
22547: PUSH
22548: LD_VAR 0 6
22552: PPUSH
22553: LD_VAR 0 7
22557: PPUSH
22558: LD_INT 16
22560: PPUSH
22561: CALL 67140 0 3
22565: ST_TO_ADDR
// if not cratesNearbyPoint then
22566: LD_VAR 0 9
22570: NOT
22571: IFFALSE 22577
// exit ;
22573: POP
22574: POP
22575: GO 23034
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22577: LD_ADDR_VAR 0 4
22581: PUSH
22582: LD_INT 22
22584: PUSH
22585: LD_VAR 0 5
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 3
22596: PUSH
22597: LD_INT 60
22599: PUSH
22600: EMPTY
22601: LIST
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: PUSH
22607: LD_INT 91
22609: PUSH
22610: LD_VAR 0 8
22614: PUSH
22615: LD_INT 6
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: LIST
22622: PUSH
22623: LD_INT 2
22625: PUSH
22626: LD_INT 25
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 25
22638: PUSH
22639: LD_INT 16
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: LIST
22650: PUSH
22651: EMPTY
22652: LIST
22653: LIST
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 69
22661: PUSH
22662: LD_VAR 0 8
22666: PPUSH
22667: CALL_OW 313
22671: PPUSH
22672: LD_INT 3
22674: PUSH
22675: LD_INT 60
22677: PUSH
22678: EMPTY
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 2
22687: PUSH
22688: LD_INT 25
22690: PUSH
22691: LD_INT 2
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 25
22700: PUSH
22701: LD_INT 16
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: PUSH
22713: EMPTY
22714: LIST
22715: LIST
22716: PPUSH
22717: CALL_OW 72
22721: UNION
22722: ST_TO_ADDR
// if tmp then
22723: LD_VAR 0 4
22727: IFFALSE 22807
// begin tmp := ShrinkArray ( tmp , 3 ) ;
22729: LD_ADDR_VAR 0 4
22733: PUSH
22734: LD_VAR 0 4
22738: PPUSH
22739: LD_INT 3
22741: PPUSH
22742: CALL 65109 0 2
22746: ST_TO_ADDR
// for j in tmp do
22747: LD_ADDR_VAR 0 2
22751: PUSH
22752: LD_VAR 0 4
22756: PUSH
22757: FOR_IN
22758: IFFALSE 22801
// begin if IsInUnit ( j ) then
22760: LD_VAR 0 2
22764: PPUSH
22765: CALL_OW 310
22769: IFFALSE 22780
// ComExit ( j ) ;
22771: LD_VAR 0 2
22775: PPUSH
22776: CALL 65192 0 1
// AddComCollect ( j , x , y ) ;
22780: LD_VAR 0 2
22784: PPUSH
22785: LD_VAR 0 6
22789: PPUSH
22790: LD_VAR 0 7
22794: PPUSH
22795: CALL_OW 177
// end ;
22799: GO 22757
22801: POP
22802: POP
// exit ;
22803: POP
22804: POP
22805: GO 23034
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
22807: LD_ADDR_VAR 0 4
22811: PUSH
22812: LD_INT 22
22814: PUSH
22815: LD_VAR 0 5
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 91
22826: PUSH
22827: LD_VAR 0 8
22831: PUSH
22832: LD_INT 8
22834: PUSH
22835: EMPTY
22836: LIST
22837: LIST
22838: LIST
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 34
22845: PUSH
22846: LD_INT 12
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 34
22855: PUSH
22856: LD_INT 51
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 34
22865: PUSH
22866: LD_INT 32
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: LD_INT 34
22875: PUSH
22876: LD_INT 89
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: PPUSH
22895: CALL_OW 69
22899: ST_TO_ADDR
// if tmp then
22900: LD_VAR 0 4
22904: IFFALSE 23030
// begin for j in tmp do
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: LD_VAR 0 4
22915: PUSH
22916: FOR_IN
22917: IFFALSE 23028
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
22919: LD_VAR 0 2
22923: PPUSH
22924: CALL_OW 262
22928: PUSH
22929: LD_INT 3
22931: EQUAL
22932: PUSH
22933: LD_VAR 0 2
22937: PPUSH
22938: CALL_OW 261
22942: PUSH
22943: LD_INT 20
22945: GREATER
22946: OR
22947: PUSH
22948: LD_VAR 0 2
22952: PPUSH
22953: CALL_OW 314
22957: NOT
22958: AND
22959: PUSH
22960: LD_VAR 0 2
22964: PPUSH
22965: CALL_OW 263
22969: PUSH
22970: LD_INT 1
22972: NONEQUAL
22973: PUSH
22974: LD_VAR 0 2
22978: PPUSH
22979: CALL_OW 311
22983: OR
22984: AND
22985: IFFALSE 23026
// begin ComCollect ( j , x , y ) ;
22987: LD_VAR 0 2
22991: PPUSH
22992: LD_VAR 0 6
22996: PPUSH
22997: LD_VAR 0 7
23001: PPUSH
23002: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23006: LD_VAR 0 2
23010: PPUSH
23011: LD_VAR 0 8
23015: PPUSH
23016: CALL_OW 172
// exit ;
23020: POP
23021: POP
23022: POP
23023: POP
23024: GO 23034
// end ;
23026: GO 22916
23028: POP
23029: POP
// end ; end ;
23030: GO 22405
23032: POP
23033: POP
// end ; end_of_file
23034: PPOPN 9
23036: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
23037: LD_INT 0
23039: PPUSH
23040: PPUSH
23041: PPUSH
23042: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
23043: LD_VAR 0 1
23047: PPUSH
23048: CALL_OW 264
23052: PUSH
23053: LD_INT 91
23055: EQUAL
23056: IFFALSE 23128
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
23058: LD_INT 68
23060: PPUSH
23061: LD_VAR 0 1
23065: PPUSH
23066: CALL_OW 255
23070: PPUSH
23071: CALL_OW 321
23075: PUSH
23076: LD_INT 2
23078: EQUAL
23079: IFFALSE 23091
// eff := 70 else
23081: LD_ADDR_VAR 0 4
23085: PUSH
23086: LD_INT 70
23088: ST_TO_ADDR
23089: GO 23099
// eff := 30 ;
23091: LD_ADDR_VAR 0 4
23095: PUSH
23096: LD_INT 30
23098: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
23099: LD_VAR 0 1
23103: PPUSH
23104: CALL_OW 250
23108: PPUSH
23109: LD_VAR 0 1
23113: PPUSH
23114: CALL_OW 251
23118: PPUSH
23119: LD_VAR 0 4
23123: PPUSH
23124: CALL_OW 495
// end ; end ;
23128: LD_VAR 0 2
23132: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23133: LD_INT 0
23135: PPUSH
// end ;
23136: LD_VAR 0 4
23140: RET
// export function SOS_Command ( cmd ) ; begin
23141: LD_INT 0
23143: PPUSH
// end ;
23144: LD_VAR 0 2
23148: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23149: LD_INT 0
23151: PPUSH
// end ;
23152: LD_VAR 0 6
23156: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
23157: LD_INT 0
23159: PPUSH
23160: PPUSH
// if not vehicle or not factory then
23161: LD_VAR 0 1
23165: NOT
23166: PUSH
23167: LD_VAR 0 2
23171: NOT
23172: OR
23173: IFFALSE 23177
// exit ;
23175: GO 23408
// if factoryWaypoints >= factory then
23177: LD_EXP 83
23181: PUSH
23182: LD_VAR 0 2
23186: GREATEREQUAL
23187: IFFALSE 23408
// if factoryWaypoints [ factory ] then
23189: LD_EXP 83
23193: PUSH
23194: LD_VAR 0 2
23198: ARRAY
23199: IFFALSE 23408
// begin if GetControl ( vehicle ) = control_manual then
23201: LD_VAR 0 1
23205: PPUSH
23206: CALL_OW 263
23210: PUSH
23211: LD_INT 1
23213: EQUAL
23214: IFFALSE 23295
// begin driver := IsDrivenBy ( vehicle ) ;
23216: LD_ADDR_VAR 0 4
23220: PUSH
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 311
23230: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23231: LD_VAR 0 4
23235: PPUSH
23236: LD_EXP 83
23240: PUSH
23241: LD_VAR 0 2
23245: ARRAY
23246: PUSH
23247: LD_INT 3
23249: ARRAY
23250: PPUSH
23251: LD_EXP 83
23255: PUSH
23256: LD_VAR 0 2
23260: ARRAY
23261: PUSH
23262: LD_INT 4
23264: ARRAY
23265: PPUSH
23266: CALL_OW 171
// AddComExitVehicle ( driver ) ;
23270: LD_VAR 0 4
23274: PPUSH
23275: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
23279: LD_VAR 0 4
23283: PPUSH
23284: LD_VAR 0 2
23288: PPUSH
23289: CALL_OW 180
// end else
23293: GO 23408
// if GetControl ( vehicle ) = control_remote then
23295: LD_VAR 0 1
23299: PPUSH
23300: CALL_OW 263
23304: PUSH
23305: LD_INT 2
23307: EQUAL
23308: IFFALSE 23369
// begin wait ( 0 0$2 ) ;
23310: LD_INT 70
23312: PPUSH
23313: CALL_OW 67
// if Connect ( vehicle ) then
23317: LD_VAR 0 1
23321: PPUSH
23322: CALL 35432 0 1
23326: IFFALSE 23367
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23328: LD_VAR 0 1
23332: PPUSH
23333: LD_EXP 83
23337: PUSH
23338: LD_VAR 0 2
23342: ARRAY
23343: PUSH
23344: LD_INT 3
23346: ARRAY
23347: PPUSH
23348: LD_EXP 83
23352: PUSH
23353: LD_VAR 0 2
23357: ARRAY
23358: PUSH
23359: LD_INT 4
23361: ARRAY
23362: PPUSH
23363: CALL_OW 171
// end else
23367: GO 23408
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
23369: LD_VAR 0 1
23373: PPUSH
23374: LD_EXP 83
23378: PUSH
23379: LD_VAR 0 2
23383: ARRAY
23384: PUSH
23385: LD_INT 3
23387: ARRAY
23388: PPUSH
23389: LD_EXP 83
23393: PUSH
23394: LD_VAR 0 2
23398: ARRAY
23399: PUSH
23400: LD_INT 4
23402: ARRAY
23403: PPUSH
23404: CALL_OW 171
// end ; end ;
23408: LD_VAR 0 3
23412: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
23413: LD_INT 0
23415: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
23416: LD_VAR 0 1
23420: PUSH
23421: LD_INT 250
23423: EQUAL
23424: PUSH
23425: LD_VAR 0 2
23429: PPUSH
23430: CALL_OW 264
23434: PUSH
23435: LD_INT 81
23437: EQUAL
23438: AND
23439: IFFALSE 23460
// MinerPlaceMine ( unit , x , y ) ;
23441: LD_VAR 0 2
23445: PPUSH
23446: LD_VAR 0 4
23450: PPUSH
23451: LD_VAR 0 5
23455: PPUSH
23456: CALL 25845 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
23460: LD_VAR 0 1
23464: PUSH
23465: LD_INT 251
23467: EQUAL
23468: PUSH
23469: LD_VAR 0 2
23473: PPUSH
23474: CALL_OW 264
23478: PUSH
23479: LD_INT 81
23481: EQUAL
23482: AND
23483: IFFALSE 23504
// MinerDetonateMine ( unit , x , y ) ;
23485: LD_VAR 0 2
23489: PPUSH
23490: LD_VAR 0 4
23494: PPUSH
23495: LD_VAR 0 5
23499: PPUSH
23500: CALL 26120 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
23504: LD_VAR 0 1
23508: PUSH
23509: LD_INT 252
23511: EQUAL
23512: PUSH
23513: LD_VAR 0 2
23517: PPUSH
23518: CALL_OW 264
23522: PUSH
23523: LD_INT 81
23525: EQUAL
23526: AND
23527: IFFALSE 23548
// MinerCreateMinefield ( unit , x , y ) ;
23529: LD_VAR 0 2
23533: PPUSH
23534: LD_VAR 0 4
23538: PPUSH
23539: LD_VAR 0 5
23543: PPUSH
23544: CALL 26537 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
23548: LD_VAR 0 1
23552: PUSH
23553: LD_INT 253
23555: EQUAL
23556: PUSH
23557: LD_VAR 0 2
23561: PPUSH
23562: CALL_OW 257
23566: PUSH
23567: LD_INT 5
23569: EQUAL
23570: AND
23571: IFFALSE 23592
// ComBinocular ( unit , x , y ) ;
23573: LD_VAR 0 2
23577: PPUSH
23578: LD_VAR 0 4
23582: PPUSH
23583: LD_VAR 0 5
23587: PPUSH
23588: CALL 26906 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
23592: LD_VAR 0 1
23596: PUSH
23597: LD_INT 254
23599: EQUAL
23600: PUSH
23601: LD_VAR 0 2
23605: PPUSH
23606: CALL_OW 264
23610: PUSH
23611: LD_INT 99
23613: EQUAL
23614: AND
23615: PUSH
23616: LD_VAR 0 3
23620: PPUSH
23621: CALL_OW 263
23625: PUSH
23626: LD_INT 3
23628: EQUAL
23629: AND
23630: IFFALSE 23646
// HackDestroyVehicle ( unit , selectedUnit ) ;
23632: LD_VAR 0 2
23636: PPUSH
23637: LD_VAR 0 3
23641: PPUSH
23642: CALL 25209 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
23646: LD_VAR 0 1
23650: PUSH
23651: LD_INT 255
23653: EQUAL
23654: PUSH
23655: LD_VAR 0 2
23659: PPUSH
23660: CALL_OW 264
23664: PUSH
23665: LD_INT 14
23667: PUSH
23668: LD_INT 53
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: IN
23675: AND
23676: PUSH
23677: LD_VAR 0 4
23681: PPUSH
23682: LD_VAR 0 5
23686: PPUSH
23687: CALL_OW 488
23691: AND
23692: IFFALSE 23716
// CutTreeXYR ( unit , x , y , 12 ) ;
23694: LD_VAR 0 2
23698: PPUSH
23699: LD_VAR 0 4
23703: PPUSH
23704: LD_VAR 0 5
23708: PPUSH
23709: LD_INT 12
23711: PPUSH
23712: CALL 23779 0 4
// if cmd = 256 then
23716: LD_VAR 0 1
23720: PUSH
23721: LD_INT 256
23723: EQUAL
23724: IFFALSE 23745
// SetFactoryWaypoint ( unit , x , y ) ;
23726: LD_VAR 0 2
23730: PPUSH
23731: LD_VAR 0 4
23735: PPUSH
23736: LD_VAR 0 5
23740: PPUSH
23741: CALL 21726 0 3
// if cmd = 257 then
23745: LD_VAR 0 1
23749: PUSH
23750: LD_INT 257
23752: EQUAL
23753: IFFALSE 23774
// SetWarehouseGatheringPoint ( unit , x , y ) ;
23755: LD_VAR 0 2
23759: PPUSH
23760: LD_VAR 0 4
23764: PPUSH
23765: LD_VAR 0 5
23769: PPUSH
23770: CALL 22088 0 3
// end ;
23774: LD_VAR 0 6
23778: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
23790: LD_VAR 0 1
23794: NOT
23795: PUSH
23796: LD_VAR 0 2
23800: PPUSH
23801: LD_VAR 0 3
23805: PPUSH
23806: CALL_OW 488
23810: NOT
23811: OR
23812: PUSH
23813: LD_VAR 0 4
23817: NOT
23818: OR
23819: IFFALSE 23823
// exit ;
23821: GO 24163
// list := [ ] ;
23823: LD_ADDR_VAR 0 13
23827: PUSH
23828: EMPTY
23829: ST_TO_ADDR
// if x - r < 0 then
23830: LD_VAR 0 2
23834: PUSH
23835: LD_VAR 0 4
23839: MINUS
23840: PUSH
23841: LD_INT 0
23843: LESS
23844: IFFALSE 23856
// min_x := 0 else
23846: LD_ADDR_VAR 0 7
23850: PUSH
23851: LD_INT 0
23853: ST_TO_ADDR
23854: GO 23872
// min_x := x - r ;
23856: LD_ADDR_VAR 0 7
23860: PUSH
23861: LD_VAR 0 2
23865: PUSH
23866: LD_VAR 0 4
23870: MINUS
23871: ST_TO_ADDR
// if y - r < 0 then
23872: LD_VAR 0 3
23876: PUSH
23877: LD_VAR 0 4
23881: MINUS
23882: PUSH
23883: LD_INT 0
23885: LESS
23886: IFFALSE 23898
// min_y := 0 else
23888: LD_ADDR_VAR 0 8
23892: PUSH
23893: LD_INT 0
23895: ST_TO_ADDR
23896: GO 23914
// min_y := y - r ;
23898: LD_ADDR_VAR 0 8
23902: PUSH
23903: LD_VAR 0 3
23907: PUSH
23908: LD_VAR 0 4
23912: MINUS
23913: ST_TO_ADDR
// max_x := x + r ;
23914: LD_ADDR_VAR 0 9
23918: PUSH
23919: LD_VAR 0 2
23923: PUSH
23924: LD_VAR 0 4
23928: PLUS
23929: ST_TO_ADDR
// max_y := y + r ;
23930: LD_ADDR_VAR 0 10
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_VAR 0 4
23944: PLUS
23945: ST_TO_ADDR
// for _x = min_x to max_x do
23946: LD_ADDR_VAR 0 11
23950: PUSH
23951: DOUBLE
23952: LD_VAR 0 7
23956: DEC
23957: ST_TO_ADDR
23958: LD_VAR 0 9
23962: PUSH
23963: FOR_TO
23964: IFFALSE 24081
// for _y = min_y to max_y do
23966: LD_ADDR_VAR 0 12
23970: PUSH
23971: DOUBLE
23972: LD_VAR 0 8
23976: DEC
23977: ST_TO_ADDR
23978: LD_VAR 0 10
23982: PUSH
23983: FOR_TO
23984: IFFALSE 24077
// begin if not ValidHex ( _x , _y ) then
23986: LD_VAR 0 11
23990: PPUSH
23991: LD_VAR 0 12
23995: PPUSH
23996: CALL_OW 488
24000: NOT
24001: IFFALSE 24005
// continue ;
24003: GO 23983
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24005: LD_VAR 0 11
24009: PPUSH
24010: LD_VAR 0 12
24014: PPUSH
24015: CALL_OW 351
24019: PUSH
24020: LD_VAR 0 11
24024: PPUSH
24025: LD_VAR 0 12
24029: PPUSH
24030: CALL_OW 554
24034: AND
24035: IFFALSE 24075
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24037: LD_ADDR_VAR 0 13
24041: PUSH
24042: LD_VAR 0 13
24046: PPUSH
24047: LD_VAR 0 13
24051: PUSH
24052: LD_INT 1
24054: PLUS
24055: PPUSH
24056: LD_VAR 0 11
24060: PUSH
24061: LD_VAR 0 12
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PPUSH
24070: CALL_OW 2
24074: ST_TO_ADDR
// end ;
24075: GO 23983
24077: POP
24078: POP
24079: GO 23963
24081: POP
24082: POP
// if not list then
24083: LD_VAR 0 13
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24163
// for i in list do
24092: LD_ADDR_VAR 0 6
24096: PUSH
24097: LD_VAR 0 13
24101: PUSH
24102: FOR_IN
24103: IFFALSE 24161
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24105: LD_VAR 0 1
24109: PPUSH
24110: LD_STRING M
24112: PUSH
24113: LD_VAR 0 6
24117: PUSH
24118: LD_INT 1
24120: ARRAY
24121: PUSH
24122: LD_VAR 0 6
24126: PUSH
24127: LD_INT 2
24129: ARRAY
24130: PUSH
24131: LD_INT 0
24133: PUSH
24134: LD_INT 0
24136: PUSH
24137: LD_INT 0
24139: PUSH
24140: LD_INT 0
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: PUSH
24152: EMPTY
24153: LIST
24154: PPUSH
24155: CALL_OW 447
24159: GO 24102
24161: POP
24162: POP
// end ;
24163: LD_VAR 0 5
24167: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
24168: LD_EXP 86
24172: NOT
24173: IFFALSE 24223
24175: GO 24177
24177: DISABLE
// begin initHack := true ;
24178: LD_ADDR_EXP 86
24182: PUSH
24183: LD_INT 1
24185: ST_TO_ADDR
// hackTanks := [ ] ;
24186: LD_ADDR_EXP 87
24190: PUSH
24191: EMPTY
24192: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
24193: LD_ADDR_EXP 88
24197: PUSH
24198: EMPTY
24199: ST_TO_ADDR
// hackLimit := 3 ;
24200: LD_ADDR_EXP 89
24204: PUSH
24205: LD_INT 3
24207: ST_TO_ADDR
// hackDist := 12 ;
24208: LD_ADDR_EXP 90
24212: PUSH
24213: LD_INT 12
24215: ST_TO_ADDR
// hackCounter := [ ] ;
24216: LD_ADDR_EXP 91
24220: PUSH
24221: EMPTY
24222: ST_TO_ADDR
// end ;
24223: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
24224: LD_EXP 86
24228: PUSH
24229: LD_INT 34
24231: PUSH
24232: LD_INT 99
24234: PUSH
24235: EMPTY
24236: LIST
24237: LIST
24238: PPUSH
24239: CALL_OW 69
24243: AND
24244: IFFALSE 24497
24246: GO 24248
24248: DISABLE
24249: LD_INT 0
24251: PPUSH
24252: PPUSH
// begin enable ;
24253: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
24254: LD_ADDR_VAR 0 1
24258: PUSH
24259: LD_INT 34
24261: PUSH
24262: LD_INT 99
24264: PUSH
24265: EMPTY
24266: LIST
24267: LIST
24268: PPUSH
24269: CALL_OW 69
24273: PUSH
24274: FOR_IN
24275: IFFALSE 24495
// begin if not i in hackTanks then
24277: LD_VAR 0 1
24281: PUSH
24282: LD_EXP 87
24286: IN
24287: NOT
24288: IFFALSE 24371
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
24290: LD_ADDR_EXP 87
24294: PUSH
24295: LD_EXP 87
24299: PPUSH
24300: LD_EXP 87
24304: PUSH
24305: LD_INT 1
24307: PLUS
24308: PPUSH
24309: LD_VAR 0 1
24313: PPUSH
24314: CALL_OW 1
24318: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
24319: LD_ADDR_EXP 88
24323: PUSH
24324: LD_EXP 88
24328: PPUSH
24329: LD_EXP 88
24333: PUSH
24334: LD_INT 1
24336: PLUS
24337: PPUSH
24338: EMPTY
24339: PPUSH
24340: CALL_OW 1
24344: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
24345: LD_ADDR_EXP 91
24349: PUSH
24350: LD_EXP 91
24354: PPUSH
24355: LD_EXP 91
24359: PUSH
24360: LD_INT 1
24362: PLUS
24363: PPUSH
24364: EMPTY
24365: PPUSH
24366: CALL_OW 1
24370: ST_TO_ADDR
// end ; if not IsOk ( i ) then
24371: LD_VAR 0 1
24375: PPUSH
24376: CALL_OW 302
24380: NOT
24381: IFFALSE 24394
// begin HackUnlinkAll ( i ) ;
24383: LD_VAR 0 1
24387: PPUSH
24388: CALL 24500 0 1
// continue ;
24392: GO 24274
// end ; HackCheckCapturedStatus ( i ) ;
24394: LD_VAR 0 1
24398: PPUSH
24399: CALL 24943 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
24403: LD_ADDR_VAR 0 2
24407: PUSH
24408: LD_INT 81
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 255
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 33
24427: PUSH
24428: LD_INT 3
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 91
24437: PUSH
24438: LD_VAR 0 1
24442: PUSH
24443: LD_EXP 90
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 50
24455: PUSH
24456: EMPTY
24457: LIST
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: PPUSH
24465: CALL_OW 69
24469: ST_TO_ADDR
// if not tmp then
24470: LD_VAR 0 2
24474: NOT
24475: IFFALSE 24479
// continue ;
24477: GO 24274
// HackLink ( i , tmp ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: LD_VAR 0 2
24488: PPUSH
24489: CALL 24636 0 2
// end ;
24493: GO 24274
24495: POP
24496: POP
// end ;
24497: PPOPN 2
24499: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
24500: LD_INT 0
24502: PPUSH
24503: PPUSH
24504: PPUSH
// if not hack in hackTanks then
24505: LD_VAR 0 1
24509: PUSH
24510: LD_EXP 87
24514: IN
24515: NOT
24516: IFFALSE 24520
// exit ;
24518: GO 24631
// index := GetElementIndex ( hackTanks , hack ) ;
24520: LD_ADDR_VAR 0 4
24524: PUSH
24525: LD_EXP 87
24529: PPUSH
24530: LD_VAR 0 1
24534: PPUSH
24535: CALL 32248 0 2
24539: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
24540: LD_EXP 88
24544: PUSH
24545: LD_VAR 0 4
24549: ARRAY
24550: IFFALSE 24631
// begin for i in hackTanksCaptured [ index ] do
24552: LD_ADDR_VAR 0 3
24556: PUSH
24557: LD_EXP 88
24561: PUSH
24562: LD_VAR 0 4
24566: ARRAY
24567: PUSH
24568: FOR_IN
24569: IFFALSE 24595
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
24571: LD_VAR 0 3
24575: PUSH
24576: LD_INT 1
24578: ARRAY
24579: PPUSH
24580: LD_VAR 0 3
24584: PUSH
24585: LD_INT 2
24587: ARRAY
24588: PPUSH
24589: CALL_OW 235
24593: GO 24568
24595: POP
24596: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
24597: LD_ADDR_EXP 88
24601: PUSH
24602: LD_EXP 88
24606: PPUSH
24607: LD_VAR 0 4
24611: PPUSH
24612: EMPTY
24613: PPUSH
24614: CALL_OW 1
24618: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
24619: LD_VAR 0 1
24623: PPUSH
24624: LD_INT 0
24626: PPUSH
24627: CALL_OW 505
// end ; end ;
24631: LD_VAR 0 2
24635: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
24636: LD_INT 0
24638: PPUSH
24639: PPUSH
24640: PPUSH
// if not hack in hackTanks or not vehicles then
24641: LD_VAR 0 1
24645: PUSH
24646: LD_EXP 87
24650: IN
24651: NOT
24652: PUSH
24653: LD_VAR 0 2
24657: NOT
24658: OR
24659: IFFALSE 24663
// exit ;
24661: GO 24938
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
24663: LD_ADDR_VAR 0 2
24667: PUSH
24668: LD_VAR 0 1
24672: PPUSH
24673: LD_VAR 0 2
24677: PPUSH
24678: LD_INT 1
24680: PPUSH
24681: LD_INT 1
24683: PPUSH
24684: CALL 32898 0 4
24688: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
24689: LD_ADDR_VAR 0 5
24693: PUSH
24694: LD_EXP 87
24698: PPUSH
24699: LD_VAR 0 1
24703: PPUSH
24704: CALL 32248 0 2
24708: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
24709: LD_EXP 88
24713: PUSH
24714: LD_VAR 0 5
24718: ARRAY
24719: PUSH
24720: LD_EXP 89
24724: LESS
24725: IFFALSE 24914
// begin for i := 1 to vehicles do
24727: LD_ADDR_VAR 0 4
24731: PUSH
24732: DOUBLE
24733: LD_INT 1
24735: DEC
24736: ST_TO_ADDR
24737: LD_VAR 0 2
24741: PUSH
24742: FOR_TO
24743: IFFALSE 24912
// begin if hackTanksCaptured [ index ] = hackLimit then
24745: LD_EXP 88
24749: PUSH
24750: LD_VAR 0 5
24754: ARRAY
24755: PUSH
24756: LD_EXP 89
24760: EQUAL
24761: IFFALSE 24765
// break ;
24763: GO 24912
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
24765: LD_ADDR_EXP 91
24769: PUSH
24770: LD_EXP 91
24774: PPUSH
24775: LD_VAR 0 5
24779: PPUSH
24780: LD_EXP 91
24784: PUSH
24785: LD_VAR 0 5
24789: ARRAY
24790: PUSH
24791: LD_INT 1
24793: PLUS
24794: PPUSH
24795: CALL_OW 1
24799: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
24800: LD_ADDR_EXP 88
24804: PUSH
24805: LD_EXP 88
24809: PPUSH
24810: LD_VAR 0 5
24814: PUSH
24815: LD_EXP 88
24819: PUSH
24820: LD_VAR 0 5
24824: ARRAY
24825: PUSH
24826: LD_INT 1
24828: PLUS
24829: PUSH
24830: EMPTY
24831: LIST
24832: LIST
24833: PPUSH
24834: LD_VAR 0 2
24838: PUSH
24839: LD_VAR 0 4
24843: ARRAY
24844: PUSH
24845: LD_VAR 0 2
24849: PUSH
24850: LD_VAR 0 4
24854: ARRAY
24855: PPUSH
24856: CALL_OW 255
24860: PUSH
24861: EMPTY
24862: LIST
24863: LIST
24864: PPUSH
24865: CALL 32463 0 3
24869: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
24870: LD_VAR 0 2
24874: PUSH
24875: LD_VAR 0 4
24879: ARRAY
24880: PPUSH
24881: LD_VAR 0 1
24885: PPUSH
24886: CALL_OW 255
24890: PPUSH
24891: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
24895: LD_VAR 0 2
24899: PUSH
24900: LD_VAR 0 4
24904: ARRAY
24905: PPUSH
24906: CALL_OW 141
// end ;
24910: GO 24742
24912: POP
24913: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24914: LD_VAR 0 1
24918: PPUSH
24919: LD_EXP 88
24923: PUSH
24924: LD_VAR 0 5
24928: ARRAY
24929: PUSH
24930: LD_INT 0
24932: PLUS
24933: PPUSH
24934: CALL_OW 505
// end ;
24938: LD_VAR 0 3
24942: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
24943: LD_INT 0
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
// if not hack in hackTanks then
24949: LD_VAR 0 1
24953: PUSH
24954: LD_EXP 87
24958: IN
24959: NOT
24960: IFFALSE 24964
// exit ;
24962: GO 25204
// index := GetElementIndex ( hackTanks , hack ) ;
24964: LD_ADDR_VAR 0 4
24968: PUSH
24969: LD_EXP 87
24973: PPUSH
24974: LD_VAR 0 1
24978: PPUSH
24979: CALL 32248 0 2
24983: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: DOUBLE
24990: LD_EXP 88
24994: PUSH
24995: LD_VAR 0 4
24999: ARRAY
25000: INC
25001: ST_TO_ADDR
25002: LD_INT 1
25004: PUSH
25005: FOR_DOWNTO
25006: IFFALSE 25178
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
25008: LD_ADDR_VAR 0 5
25012: PUSH
25013: LD_EXP 88
25017: PUSH
25018: LD_VAR 0 4
25022: ARRAY
25023: PUSH
25024: LD_VAR 0 3
25028: ARRAY
25029: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
25030: LD_VAR 0 5
25034: PUSH
25035: LD_INT 1
25037: ARRAY
25038: PPUSH
25039: CALL_OW 302
25043: NOT
25044: PUSH
25045: LD_VAR 0 5
25049: PUSH
25050: LD_INT 1
25052: ARRAY
25053: PPUSH
25054: CALL_OW 255
25058: PUSH
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 255
25068: NONEQUAL
25069: OR
25070: IFFALSE 25176
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
25072: LD_VAR 0 5
25076: PUSH
25077: LD_INT 1
25079: ARRAY
25080: PPUSH
25081: CALL_OW 305
25085: PUSH
25086: LD_VAR 0 5
25090: PUSH
25091: LD_INT 1
25093: ARRAY
25094: PPUSH
25095: CALL_OW 255
25099: PUSH
25100: LD_VAR 0 1
25104: PPUSH
25105: CALL_OW 255
25109: EQUAL
25110: AND
25111: IFFALSE 25135
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
25113: LD_VAR 0 5
25117: PUSH
25118: LD_INT 1
25120: ARRAY
25121: PPUSH
25122: LD_VAR 0 5
25126: PUSH
25127: LD_INT 2
25129: ARRAY
25130: PPUSH
25131: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
25135: LD_ADDR_EXP 88
25139: PUSH
25140: LD_EXP 88
25144: PPUSH
25145: LD_VAR 0 4
25149: PPUSH
25150: LD_EXP 88
25154: PUSH
25155: LD_VAR 0 4
25159: ARRAY
25160: PPUSH
25161: LD_VAR 0 3
25165: PPUSH
25166: CALL_OW 3
25170: PPUSH
25171: CALL_OW 1
25175: ST_TO_ADDR
// end ; end ;
25176: GO 25005
25178: POP
25179: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
25180: LD_VAR 0 1
25184: PPUSH
25185: LD_EXP 88
25189: PUSH
25190: LD_VAR 0 4
25194: ARRAY
25195: PUSH
25196: LD_INT 0
25198: PLUS
25199: PPUSH
25200: CALL_OW 505
// end ;
25204: LD_VAR 0 2
25208: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
25209: LD_INT 0
25211: PPUSH
25212: PPUSH
25213: PPUSH
25214: PPUSH
// if not hack in hackTanks then
25215: LD_VAR 0 1
25219: PUSH
25220: LD_EXP 87
25224: IN
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25315
// index := GetElementIndex ( hackTanks , hack ) ;
25230: LD_ADDR_VAR 0 5
25234: PUSH
25235: LD_EXP 87
25239: PPUSH
25240: LD_VAR 0 1
25244: PPUSH
25245: CALL 32248 0 2
25249: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
25250: LD_ADDR_VAR 0 4
25254: PUSH
25255: DOUBLE
25256: LD_INT 1
25258: DEC
25259: ST_TO_ADDR
25260: LD_EXP 88
25264: PUSH
25265: LD_VAR 0 5
25269: ARRAY
25270: PUSH
25271: FOR_TO
25272: IFFALSE 25313
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
25274: LD_EXP 88
25278: PUSH
25279: LD_VAR 0 5
25283: ARRAY
25284: PUSH
25285: LD_VAR 0 4
25289: ARRAY
25290: PUSH
25291: LD_INT 1
25293: ARRAY
25294: PUSH
25295: LD_VAR 0 2
25299: EQUAL
25300: IFFALSE 25311
// KillUnit ( vehicle ) ;
25302: LD_VAR 0 2
25306: PPUSH
25307: CALL_OW 66
25311: GO 25271
25313: POP
25314: POP
// end ;
25315: LD_VAR 0 3
25319: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
25320: LD_EXP 92
25324: NOT
25325: IFFALSE 25360
25327: GO 25329
25329: DISABLE
// begin initMiner := true ;
25330: LD_ADDR_EXP 92
25334: PUSH
25335: LD_INT 1
25337: ST_TO_ADDR
// minersList := [ ] ;
25338: LD_ADDR_EXP 93
25342: PUSH
25343: EMPTY
25344: ST_TO_ADDR
// minerMinesList := [ ] ;
25345: LD_ADDR_EXP 94
25349: PUSH
25350: EMPTY
25351: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
25352: LD_ADDR_EXP 95
25356: PUSH
25357: LD_INT 5
25359: ST_TO_ADDR
// end ;
25360: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
25361: LD_EXP 92
25365: PUSH
25366: LD_INT 34
25368: PUSH
25369: LD_INT 81
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: PPUSH
25376: CALL_OW 69
25380: AND
25381: IFFALSE 25842
25383: GO 25385
25385: DISABLE
25386: LD_INT 0
25388: PPUSH
25389: PPUSH
25390: PPUSH
25391: PPUSH
// begin enable ;
25392: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
25393: LD_ADDR_VAR 0 1
25397: PUSH
25398: LD_INT 34
25400: PUSH
25401: LD_INT 81
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PPUSH
25408: CALL_OW 69
25412: PUSH
25413: FOR_IN
25414: IFFALSE 25486
// begin if not i in minersList then
25416: LD_VAR 0 1
25420: PUSH
25421: LD_EXP 93
25425: IN
25426: NOT
25427: IFFALSE 25484
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
25429: LD_ADDR_EXP 93
25433: PUSH
25434: LD_EXP 93
25438: PPUSH
25439: LD_EXP 93
25443: PUSH
25444: LD_INT 1
25446: PLUS
25447: PPUSH
25448: LD_VAR 0 1
25452: PPUSH
25453: CALL_OW 1
25457: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
25458: LD_ADDR_EXP 94
25462: PUSH
25463: LD_EXP 94
25467: PPUSH
25468: LD_EXP 94
25472: PUSH
25473: LD_INT 1
25475: PLUS
25476: PPUSH
25477: EMPTY
25478: PPUSH
25479: CALL_OW 1
25483: ST_TO_ADDR
// end end ;
25484: GO 25413
25486: POP
25487: POP
// for i := minerMinesList downto 1 do
25488: LD_ADDR_VAR 0 1
25492: PUSH
25493: DOUBLE
25494: LD_EXP 94
25498: INC
25499: ST_TO_ADDR
25500: LD_INT 1
25502: PUSH
25503: FOR_DOWNTO
25504: IFFALSE 25840
// begin if IsLive ( minersList [ i ] ) then
25506: LD_EXP 93
25510: PUSH
25511: LD_VAR 0 1
25515: ARRAY
25516: PPUSH
25517: CALL_OW 300
25521: IFFALSE 25549
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
25523: LD_EXP 93
25527: PUSH
25528: LD_VAR 0 1
25532: ARRAY
25533: PPUSH
25534: LD_EXP 94
25538: PUSH
25539: LD_VAR 0 1
25543: ARRAY
25544: PPUSH
25545: CALL_OW 505
// if not minerMinesList [ i ] then
25549: LD_EXP 94
25553: PUSH
25554: LD_VAR 0 1
25558: ARRAY
25559: NOT
25560: IFFALSE 25564
// continue ;
25562: GO 25503
// for j := minerMinesList [ i ] downto 1 do
25564: LD_ADDR_VAR 0 2
25568: PUSH
25569: DOUBLE
25570: LD_EXP 94
25574: PUSH
25575: LD_VAR 0 1
25579: ARRAY
25580: INC
25581: ST_TO_ADDR
25582: LD_INT 1
25584: PUSH
25585: FOR_DOWNTO
25586: IFFALSE 25836
// begin side := GetSide ( minersList [ i ] ) ;
25588: LD_ADDR_VAR 0 3
25592: PUSH
25593: LD_EXP 93
25597: PUSH
25598: LD_VAR 0 1
25602: ARRAY
25603: PPUSH
25604: CALL_OW 255
25608: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
25609: LD_ADDR_VAR 0 4
25613: PUSH
25614: LD_EXP 94
25618: PUSH
25619: LD_VAR 0 1
25623: ARRAY
25624: PUSH
25625: LD_VAR 0 2
25629: ARRAY
25630: PUSH
25631: LD_INT 1
25633: ARRAY
25634: PPUSH
25635: LD_EXP 94
25639: PUSH
25640: LD_VAR 0 1
25644: ARRAY
25645: PUSH
25646: LD_VAR 0 2
25650: ARRAY
25651: PUSH
25652: LD_INT 2
25654: ARRAY
25655: PPUSH
25656: CALL_OW 428
25660: ST_TO_ADDR
// if not tmp then
25661: LD_VAR 0 4
25665: NOT
25666: IFFALSE 25670
// continue ;
25668: GO 25585
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
25670: LD_VAR 0 4
25674: PUSH
25675: LD_INT 81
25677: PUSH
25678: LD_VAR 0 3
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PPUSH
25687: CALL_OW 69
25691: IN
25692: PUSH
25693: LD_EXP 94
25697: PUSH
25698: LD_VAR 0 1
25702: ARRAY
25703: PUSH
25704: LD_VAR 0 2
25708: ARRAY
25709: PUSH
25710: LD_INT 1
25712: ARRAY
25713: PPUSH
25714: LD_EXP 94
25718: PUSH
25719: LD_VAR 0 1
25723: ARRAY
25724: PUSH
25725: LD_VAR 0 2
25729: ARRAY
25730: PUSH
25731: LD_INT 2
25733: ARRAY
25734: PPUSH
25735: CALL_OW 458
25739: AND
25740: IFFALSE 25834
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
25742: LD_EXP 94
25746: PUSH
25747: LD_VAR 0 1
25751: ARRAY
25752: PUSH
25753: LD_VAR 0 2
25757: ARRAY
25758: PUSH
25759: LD_INT 1
25761: ARRAY
25762: PPUSH
25763: LD_EXP 94
25767: PUSH
25768: LD_VAR 0 1
25772: ARRAY
25773: PUSH
25774: LD_VAR 0 2
25778: ARRAY
25779: PUSH
25780: LD_INT 2
25782: ARRAY
25783: PPUSH
25784: LD_VAR 0 3
25788: PPUSH
25789: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
25793: LD_ADDR_EXP 94
25797: PUSH
25798: LD_EXP 94
25802: PPUSH
25803: LD_VAR 0 1
25807: PPUSH
25808: LD_EXP 94
25812: PUSH
25813: LD_VAR 0 1
25817: ARRAY
25818: PPUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 3
25828: PPUSH
25829: CALL_OW 1
25833: ST_TO_ADDR
// end ; end ;
25834: GO 25585
25836: POP
25837: POP
// end ;
25838: GO 25503
25840: POP
25841: POP
// end ;
25842: PPOPN 4
25844: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
// result := false ;
25849: LD_ADDR_VAR 0 4
25853: PUSH
25854: LD_INT 0
25856: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
25857: LD_VAR 0 1
25861: PPUSH
25862: CALL_OW 264
25866: PUSH
25867: LD_INT 81
25869: EQUAL
25870: NOT
25871: IFFALSE 25875
// exit ;
25873: GO 26115
// index := GetElementIndex ( minersList , unit ) ;
25875: LD_ADDR_VAR 0 5
25879: PUSH
25880: LD_EXP 93
25884: PPUSH
25885: LD_VAR 0 1
25889: PPUSH
25890: CALL 32248 0 2
25894: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
25895: LD_EXP 94
25899: PUSH
25900: LD_VAR 0 5
25904: ARRAY
25905: PUSH
25906: LD_EXP 95
25910: GREATEREQUAL
25911: IFFALSE 25915
// exit ;
25913: GO 26115
// ComMoveXY ( unit , x , y ) ;
25915: LD_VAR 0 1
25919: PPUSH
25920: LD_VAR 0 2
25924: PPUSH
25925: LD_VAR 0 3
25929: PPUSH
25930: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25934: LD_INT 35
25936: PPUSH
25937: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
25941: LD_VAR 0 1
25945: PPUSH
25946: LD_VAR 0 2
25950: PPUSH
25951: LD_VAR 0 3
25955: PPUSH
25956: CALL 63603 0 3
25960: NOT
25961: PUSH
25962: LD_VAR 0 1
25966: PPUSH
25967: CALL_OW 314
25971: AND
25972: IFFALSE 25976
// exit ;
25974: GO 26115
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25976: LD_VAR 0 2
25980: PPUSH
25981: LD_VAR 0 3
25985: PPUSH
25986: CALL_OW 428
25990: PUSH
25991: LD_VAR 0 1
25995: EQUAL
25996: PUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 314
26006: NOT
26007: AND
26008: IFFALSE 25934
// PlaySoundXY ( x , y , PlantMine ) ;
26010: LD_VAR 0 2
26014: PPUSH
26015: LD_VAR 0 3
26019: PPUSH
26020: LD_STRING PlantMine
26022: PPUSH
26023: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
26027: LD_VAR 0 2
26031: PPUSH
26032: LD_VAR 0 3
26036: PPUSH
26037: LD_VAR 0 1
26041: PPUSH
26042: CALL_OW 255
26046: PPUSH
26047: LD_INT 0
26049: PPUSH
26050: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
26054: LD_ADDR_EXP 94
26058: PUSH
26059: LD_EXP 94
26063: PPUSH
26064: LD_VAR 0 5
26068: PUSH
26069: LD_EXP 94
26073: PUSH
26074: LD_VAR 0 5
26078: ARRAY
26079: PUSH
26080: LD_INT 1
26082: PLUS
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PPUSH
26088: LD_VAR 0 2
26092: PUSH
26093: LD_VAR 0 3
26097: PUSH
26098: EMPTY
26099: LIST
26100: LIST
26101: PPUSH
26102: CALL 32463 0 3
26106: ST_TO_ADDR
// result := true ;
26107: LD_ADDR_VAR 0 4
26111: PUSH
26112: LD_INT 1
26114: ST_TO_ADDR
// end ;
26115: LD_VAR 0 4
26119: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
26120: LD_INT 0
26122: PPUSH
26123: PPUSH
26124: PPUSH
// if not unit in minersList then
26125: LD_VAR 0 1
26129: PUSH
26130: LD_EXP 93
26134: IN
26135: NOT
26136: IFFALSE 26140
// exit ;
26138: GO 26532
// index := GetElementIndex ( minersList , unit ) ;
26140: LD_ADDR_VAR 0 6
26144: PUSH
26145: LD_EXP 93
26149: PPUSH
26150: LD_VAR 0 1
26154: PPUSH
26155: CALL 32248 0 2
26159: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
26160: LD_ADDR_VAR 0 5
26164: PUSH
26165: DOUBLE
26166: LD_EXP 94
26170: PUSH
26171: LD_VAR 0 6
26175: ARRAY
26176: INC
26177: ST_TO_ADDR
26178: LD_INT 1
26180: PUSH
26181: FOR_DOWNTO
26182: IFFALSE 26343
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
26184: LD_EXP 94
26188: PUSH
26189: LD_VAR 0 6
26193: ARRAY
26194: PUSH
26195: LD_VAR 0 5
26199: ARRAY
26200: PUSH
26201: LD_INT 1
26203: ARRAY
26204: PUSH
26205: LD_VAR 0 2
26209: EQUAL
26210: PUSH
26211: LD_EXP 94
26215: PUSH
26216: LD_VAR 0 6
26220: ARRAY
26221: PUSH
26222: LD_VAR 0 5
26226: ARRAY
26227: PUSH
26228: LD_INT 2
26230: ARRAY
26231: PUSH
26232: LD_VAR 0 3
26236: EQUAL
26237: AND
26238: IFFALSE 26341
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26240: LD_EXP 94
26244: PUSH
26245: LD_VAR 0 6
26249: ARRAY
26250: PUSH
26251: LD_VAR 0 5
26255: ARRAY
26256: PUSH
26257: LD_INT 1
26259: ARRAY
26260: PPUSH
26261: LD_EXP 94
26265: PUSH
26266: LD_VAR 0 6
26270: ARRAY
26271: PUSH
26272: LD_VAR 0 5
26276: ARRAY
26277: PUSH
26278: LD_INT 2
26280: ARRAY
26281: PPUSH
26282: LD_VAR 0 1
26286: PPUSH
26287: CALL_OW 255
26291: PPUSH
26292: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26296: LD_ADDR_EXP 94
26300: PUSH
26301: LD_EXP 94
26305: PPUSH
26306: LD_VAR 0 6
26310: PPUSH
26311: LD_EXP 94
26315: PUSH
26316: LD_VAR 0 6
26320: ARRAY
26321: PPUSH
26322: LD_VAR 0 5
26326: PPUSH
26327: CALL_OW 3
26331: PPUSH
26332: CALL_OW 1
26336: ST_TO_ADDR
// exit ;
26337: POP
26338: POP
26339: GO 26532
// end ; end ;
26341: GO 26181
26343: POP
26344: POP
// for i := minerMinesList [ index ] downto 1 do
26345: LD_ADDR_VAR 0 5
26349: PUSH
26350: DOUBLE
26351: LD_EXP 94
26355: PUSH
26356: LD_VAR 0 6
26360: ARRAY
26361: INC
26362: ST_TO_ADDR
26363: LD_INT 1
26365: PUSH
26366: FOR_DOWNTO
26367: IFFALSE 26530
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
26369: LD_EXP 94
26373: PUSH
26374: LD_VAR 0 6
26378: ARRAY
26379: PUSH
26380: LD_VAR 0 5
26384: ARRAY
26385: PUSH
26386: LD_INT 1
26388: ARRAY
26389: PPUSH
26390: LD_EXP 94
26394: PUSH
26395: LD_VAR 0 6
26399: ARRAY
26400: PUSH
26401: LD_VAR 0 5
26405: ARRAY
26406: PUSH
26407: LD_INT 2
26409: ARRAY
26410: PPUSH
26411: LD_VAR 0 2
26415: PPUSH
26416: LD_VAR 0 3
26420: PPUSH
26421: CALL_OW 298
26425: PUSH
26426: LD_INT 6
26428: LESS
26429: IFFALSE 26528
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
26431: LD_EXP 94
26435: PUSH
26436: LD_VAR 0 6
26440: ARRAY
26441: PUSH
26442: LD_VAR 0 5
26446: ARRAY
26447: PUSH
26448: LD_INT 1
26450: ARRAY
26451: PPUSH
26452: LD_EXP 94
26456: PUSH
26457: LD_VAR 0 6
26461: ARRAY
26462: PUSH
26463: LD_VAR 0 5
26467: ARRAY
26468: PUSH
26469: LD_INT 2
26471: ARRAY
26472: PPUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 255
26482: PPUSH
26483: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
26487: LD_ADDR_EXP 94
26491: PUSH
26492: LD_EXP 94
26496: PPUSH
26497: LD_VAR 0 6
26501: PPUSH
26502: LD_EXP 94
26506: PUSH
26507: LD_VAR 0 6
26511: ARRAY
26512: PPUSH
26513: LD_VAR 0 5
26517: PPUSH
26518: CALL_OW 3
26522: PPUSH
26523: CALL_OW 1
26527: ST_TO_ADDR
// end ; end ;
26528: GO 26366
26530: POP
26531: POP
// end ;
26532: LD_VAR 0 4
26536: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
26537: LD_INT 0
26539: PPUSH
26540: PPUSH
26541: PPUSH
26542: PPUSH
26543: PPUSH
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 264
26557: PUSH
26558: LD_INT 81
26560: EQUAL
26561: NOT
26562: PUSH
26563: LD_VAR 0 1
26567: PUSH
26568: LD_EXP 93
26572: IN
26573: NOT
26574: OR
26575: IFFALSE 26579
// exit ;
26577: GO 26901
// index := GetElementIndex ( minersList , unit ) ;
26579: LD_ADDR_VAR 0 6
26583: PUSH
26584: LD_EXP 93
26588: PPUSH
26589: LD_VAR 0 1
26593: PPUSH
26594: CALL 32248 0 2
26598: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
26599: LD_ADDR_VAR 0 8
26603: PUSH
26604: LD_EXP 95
26608: PUSH
26609: LD_EXP 94
26613: PUSH
26614: LD_VAR 0 6
26618: ARRAY
26619: MINUS
26620: ST_TO_ADDR
// if not minesFreeAmount then
26621: LD_VAR 0 8
26625: NOT
26626: IFFALSE 26630
// exit ;
26628: GO 26901
// tmp := [ ] ;
26630: LD_ADDR_VAR 0 7
26634: PUSH
26635: EMPTY
26636: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
26637: LD_ADDR_VAR 0 5
26641: PUSH
26642: DOUBLE
26643: LD_INT 1
26645: DEC
26646: ST_TO_ADDR
26647: LD_VAR 0 8
26651: PUSH
26652: FOR_TO
26653: IFFALSE 26848
// begin _d := rand ( 0 , 5 ) ;
26655: LD_ADDR_VAR 0 11
26659: PUSH
26660: LD_INT 0
26662: PPUSH
26663: LD_INT 5
26665: PPUSH
26666: CALL_OW 12
26670: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
26671: LD_ADDR_VAR 0 12
26675: PUSH
26676: LD_INT 2
26678: PPUSH
26679: LD_INT 6
26681: PPUSH
26682: CALL_OW 12
26686: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
26687: LD_ADDR_VAR 0 9
26691: PUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: LD_VAR 0 11
26701: PPUSH
26702: LD_VAR 0 12
26706: PPUSH
26707: CALL_OW 272
26711: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
26712: LD_ADDR_VAR 0 10
26716: PUSH
26717: LD_VAR 0 3
26721: PPUSH
26722: LD_VAR 0 11
26726: PPUSH
26727: LD_VAR 0 12
26731: PPUSH
26732: CALL_OW 273
26736: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
26737: LD_VAR 0 9
26741: PPUSH
26742: LD_VAR 0 10
26746: PPUSH
26747: CALL_OW 488
26751: PUSH
26752: LD_VAR 0 9
26756: PUSH
26757: LD_VAR 0 10
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PUSH
26766: LD_VAR 0 7
26770: IN
26771: NOT
26772: AND
26773: PUSH
26774: LD_VAR 0 9
26778: PPUSH
26779: LD_VAR 0 10
26783: PPUSH
26784: CALL_OW 458
26788: NOT
26789: AND
26790: IFFALSE 26832
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
26792: LD_ADDR_VAR 0 7
26796: PUSH
26797: LD_VAR 0 7
26801: PPUSH
26802: LD_VAR 0 7
26806: PUSH
26807: LD_INT 1
26809: PLUS
26810: PPUSH
26811: LD_VAR 0 9
26815: PUSH
26816: LD_VAR 0 10
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PPUSH
26825: CALL_OW 1
26829: ST_TO_ADDR
26830: GO 26846
// i := i - 1 ;
26832: LD_ADDR_VAR 0 5
26836: PUSH
26837: LD_VAR 0 5
26841: PUSH
26842: LD_INT 1
26844: MINUS
26845: ST_TO_ADDR
// end ;
26846: GO 26652
26848: POP
26849: POP
// for i in tmp do
26850: LD_ADDR_VAR 0 5
26854: PUSH
26855: LD_VAR 0 7
26859: PUSH
26860: FOR_IN
26861: IFFALSE 26899
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
26863: LD_VAR 0 1
26867: PPUSH
26868: LD_VAR 0 5
26872: PUSH
26873: LD_INT 1
26875: ARRAY
26876: PPUSH
26877: LD_VAR 0 5
26881: PUSH
26882: LD_INT 2
26884: ARRAY
26885: PPUSH
26886: CALL 25845 0 3
26890: NOT
26891: IFFALSE 26897
// exit ;
26893: POP
26894: POP
26895: GO 26901
26897: GO 26860
26899: POP
26900: POP
// end ;
26901: LD_VAR 0 4
26905: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
26906: LD_INT 0
26908: PPUSH
26909: PPUSH
26910: PPUSH
26911: PPUSH
26912: PPUSH
26913: PPUSH
26914: PPUSH
// if not GetClass ( unit ) = class_sniper then
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 257
26924: PUSH
26925: LD_INT 5
26927: EQUAL
26928: NOT
26929: IFFALSE 26933
// exit ;
26931: GO 27321
// dist := 8 ;
26933: LD_ADDR_VAR 0 5
26937: PUSH
26938: LD_INT 8
26940: ST_TO_ADDR
// viewRange := 12 ;
26941: LD_ADDR_VAR 0 7
26945: PUSH
26946: LD_INT 12
26948: ST_TO_ADDR
// side := GetSide ( unit ) ;
26949: LD_ADDR_VAR 0 6
26953: PUSH
26954: LD_VAR 0 1
26958: PPUSH
26959: CALL_OW 255
26963: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26964: LD_INT 61
26966: PPUSH
26967: LD_VAR 0 6
26971: PPUSH
26972: CALL_OW 321
26976: PUSH
26977: LD_INT 2
26979: EQUAL
26980: IFFALSE 26990
// viewRange := 16 ;
26982: LD_ADDR_VAR 0 7
26986: PUSH
26987: LD_INT 16
26989: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26990: LD_VAR 0 1
26994: PPUSH
26995: LD_VAR 0 2
26999: PPUSH
27000: LD_VAR 0 3
27004: PPUSH
27005: CALL_OW 297
27009: PUSH
27010: LD_VAR 0 5
27014: GREATER
27015: IFFALSE 27094
// begin ComMoveXY ( unit , x , y ) ;
27017: LD_VAR 0 1
27021: PPUSH
27022: LD_VAR 0 2
27026: PPUSH
27027: LD_VAR 0 3
27031: PPUSH
27032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27036: LD_INT 35
27038: PPUSH
27039: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
27043: LD_VAR 0 1
27047: PPUSH
27048: LD_VAR 0 2
27052: PPUSH
27053: LD_VAR 0 3
27057: PPUSH
27058: CALL 63603 0 3
27062: NOT
27063: IFFALSE 27067
// exit ;
27065: GO 27321
// until GetDistUnitXY ( unit , x , y ) < dist ;
27067: LD_VAR 0 1
27071: PPUSH
27072: LD_VAR 0 2
27076: PPUSH
27077: LD_VAR 0 3
27081: PPUSH
27082: CALL_OW 297
27086: PUSH
27087: LD_VAR 0 5
27091: LESS
27092: IFFALSE 27036
// end ; ComTurnXY ( unit , x , y ) ;
27094: LD_VAR 0 1
27098: PPUSH
27099: LD_VAR 0 2
27103: PPUSH
27104: LD_VAR 0 3
27108: PPUSH
27109: CALL_OW 118
// wait ( 5 ) ;
27113: LD_INT 5
27115: PPUSH
27116: CALL_OW 67
// _d := GetDir ( unit ) ;
27120: LD_ADDR_VAR 0 10
27124: PUSH
27125: LD_VAR 0 1
27129: PPUSH
27130: CALL_OW 254
27134: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
27135: LD_ADDR_VAR 0 8
27139: PUSH
27140: LD_VAR 0 1
27144: PPUSH
27145: CALL_OW 250
27149: PPUSH
27150: LD_VAR 0 10
27154: PPUSH
27155: LD_VAR 0 5
27159: PPUSH
27160: CALL_OW 272
27164: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
27165: LD_ADDR_VAR 0 9
27169: PUSH
27170: LD_VAR 0 1
27174: PPUSH
27175: CALL_OW 251
27179: PPUSH
27180: LD_VAR 0 10
27184: PPUSH
27185: LD_VAR 0 5
27189: PPUSH
27190: CALL_OW 273
27194: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27195: LD_VAR 0 8
27199: PPUSH
27200: LD_VAR 0 9
27204: PPUSH
27205: CALL_OW 488
27209: NOT
27210: IFFALSE 27214
// exit ;
27212: GO 27321
// ComAnimCustom ( unit , 1 ) ;
27214: LD_VAR 0 1
27218: PPUSH
27219: LD_INT 1
27221: PPUSH
27222: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
27226: LD_VAR 0 8
27230: PPUSH
27231: LD_VAR 0 9
27235: PPUSH
27236: LD_VAR 0 6
27240: PPUSH
27241: LD_VAR 0 7
27245: PPUSH
27246: CALL_OW 330
// repeat wait ( 1 ) ;
27250: LD_INT 1
27252: PPUSH
27253: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
27257: LD_VAR 0 1
27261: PPUSH
27262: CALL_OW 316
27266: PUSH
27267: LD_VAR 0 1
27271: PPUSH
27272: CALL_OW 314
27276: OR
27277: PUSH
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL_OW 302
27287: NOT
27288: OR
27289: PUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 301
27299: OR
27300: IFFALSE 27250
// RemoveSeeing ( _x , _y , side ) ;
27302: LD_VAR 0 8
27306: PPUSH
27307: LD_VAR 0 9
27311: PPUSH
27312: LD_VAR 0 6
27316: PPUSH
27317: CALL_OW 331
// end ; end_of_file
27321: LD_VAR 0 4
27325: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27326: LD_INT 0
27328: PPUSH
27329: PPUSH
// if exist_mode then
27330: LD_VAR 0 2
27334: IFFALSE 27359
// unit := CreateCharacter ( prefix & ident ) else
27336: LD_ADDR_VAR 0 5
27340: PUSH
27341: LD_VAR 0 3
27345: PUSH
27346: LD_VAR 0 1
27350: STR
27351: PPUSH
27352: CALL_OW 34
27356: ST_TO_ADDR
27357: GO 27374
// unit := NewCharacter ( ident ) ;
27359: LD_ADDR_VAR 0 5
27363: PUSH
27364: LD_VAR 0 1
27368: PPUSH
27369: CALL_OW 25
27373: ST_TO_ADDR
// result := unit ;
27374: LD_ADDR_VAR 0 4
27378: PUSH
27379: LD_VAR 0 5
27383: ST_TO_ADDR
// end ;
27384: LD_VAR 0 4
27388: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27389: LD_INT 0
27391: PPUSH
27392: PPUSH
// if not side or not nation then
27393: LD_VAR 0 1
27397: NOT
27398: PUSH
27399: LD_VAR 0 2
27403: NOT
27404: OR
27405: IFFALSE 27409
// exit ;
27407: GO 28177
// case nation of nation_american :
27409: LD_VAR 0 2
27413: PUSH
27414: LD_INT 1
27416: DOUBLE
27417: EQUAL
27418: IFTRUE 27422
27420: GO 27636
27422: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27423: LD_ADDR_VAR 0 4
27427: PUSH
27428: LD_INT 35
27430: PUSH
27431: LD_INT 45
27433: PUSH
27434: LD_INT 46
27436: PUSH
27437: LD_INT 47
27439: PUSH
27440: LD_INT 82
27442: PUSH
27443: LD_INT 83
27445: PUSH
27446: LD_INT 84
27448: PUSH
27449: LD_INT 85
27451: PUSH
27452: LD_INT 86
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 2
27460: PUSH
27461: LD_INT 6
27463: PUSH
27464: LD_INT 15
27466: PUSH
27467: LD_INT 16
27469: PUSH
27470: LD_INT 7
27472: PUSH
27473: LD_INT 12
27475: PUSH
27476: LD_INT 13
27478: PUSH
27479: LD_INT 10
27481: PUSH
27482: LD_INT 14
27484: PUSH
27485: LD_INT 20
27487: PUSH
27488: LD_INT 21
27490: PUSH
27491: LD_INT 22
27493: PUSH
27494: LD_INT 25
27496: PUSH
27497: LD_INT 32
27499: PUSH
27500: LD_INT 27
27502: PUSH
27503: LD_INT 36
27505: PUSH
27506: LD_INT 69
27508: PUSH
27509: LD_INT 39
27511: PUSH
27512: LD_INT 34
27514: PUSH
27515: LD_INT 40
27517: PUSH
27518: LD_INT 48
27520: PUSH
27521: LD_INT 49
27523: PUSH
27524: LD_INT 50
27526: PUSH
27527: LD_INT 51
27529: PUSH
27530: LD_INT 52
27532: PUSH
27533: LD_INT 53
27535: PUSH
27536: LD_INT 54
27538: PUSH
27539: LD_INT 55
27541: PUSH
27542: LD_INT 56
27544: PUSH
27545: LD_INT 57
27547: PUSH
27548: LD_INT 58
27550: PUSH
27551: LD_INT 59
27553: PUSH
27554: LD_INT 60
27556: PUSH
27557: LD_INT 61
27559: PUSH
27560: LD_INT 62
27562: PUSH
27563: LD_INT 80
27565: PUSH
27566: LD_INT 82
27568: PUSH
27569: LD_INT 83
27571: PUSH
27572: LD_INT 84
27574: PUSH
27575: LD_INT 85
27577: PUSH
27578: LD_INT 86
27580: PUSH
27581: EMPTY
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: LIST
27595: LIST
27596: LIST
27597: LIST
27598: LIST
27599: LIST
27600: LIST
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: LIST
27633: ST_TO_ADDR
27634: GO 28101
27636: LD_INT 2
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27870
27644: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
27645: LD_ADDR_VAR 0 4
27649: PUSH
27650: LD_INT 35
27652: PUSH
27653: LD_INT 45
27655: PUSH
27656: LD_INT 46
27658: PUSH
27659: LD_INT 47
27661: PUSH
27662: LD_INT 82
27664: PUSH
27665: LD_INT 83
27667: PUSH
27668: LD_INT 84
27670: PUSH
27671: LD_INT 85
27673: PUSH
27674: LD_INT 87
27676: PUSH
27677: LD_INT 70
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: LD_INT 11
27685: PUSH
27686: LD_INT 3
27688: PUSH
27689: LD_INT 4
27691: PUSH
27692: LD_INT 5
27694: PUSH
27695: LD_INT 6
27697: PUSH
27698: LD_INT 15
27700: PUSH
27701: LD_INT 18
27703: PUSH
27704: LD_INT 7
27706: PUSH
27707: LD_INT 17
27709: PUSH
27710: LD_INT 8
27712: PUSH
27713: LD_INT 20
27715: PUSH
27716: LD_INT 21
27718: PUSH
27719: LD_INT 22
27721: PUSH
27722: LD_INT 72
27724: PUSH
27725: LD_INT 26
27727: PUSH
27728: LD_INT 69
27730: PUSH
27731: LD_INT 39
27733: PUSH
27734: LD_INT 40
27736: PUSH
27737: LD_INT 41
27739: PUSH
27740: LD_INT 42
27742: PUSH
27743: LD_INT 43
27745: PUSH
27746: LD_INT 48
27748: PUSH
27749: LD_INT 49
27751: PUSH
27752: LD_INT 50
27754: PUSH
27755: LD_INT 51
27757: PUSH
27758: LD_INT 52
27760: PUSH
27761: LD_INT 53
27763: PUSH
27764: LD_INT 54
27766: PUSH
27767: LD_INT 55
27769: PUSH
27770: LD_INT 56
27772: PUSH
27773: LD_INT 60
27775: PUSH
27776: LD_INT 61
27778: PUSH
27779: LD_INT 62
27781: PUSH
27782: LD_INT 66
27784: PUSH
27785: LD_INT 67
27787: PUSH
27788: LD_INT 68
27790: PUSH
27791: LD_INT 81
27793: PUSH
27794: LD_INT 82
27796: PUSH
27797: LD_INT 83
27799: PUSH
27800: LD_INT 84
27802: PUSH
27803: LD_INT 85
27805: PUSH
27806: LD_INT 87
27808: PUSH
27809: LD_INT 88
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: LIST
27834: LIST
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: LIST
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: LIST
27852: LIST
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: LIST
27865: LIST
27866: LIST
27867: ST_TO_ADDR
27868: GO 28101
27870: LD_INT 3
27872: DOUBLE
27873: EQUAL
27874: IFTRUE 27878
27876: GO 28100
27878: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27879: LD_ADDR_VAR 0 4
27883: PUSH
27884: LD_INT 46
27886: PUSH
27887: LD_INT 47
27889: PUSH
27890: LD_INT 1
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: LD_INT 82
27898: PUSH
27899: LD_INT 83
27901: PUSH
27902: LD_INT 84
27904: PUSH
27905: LD_INT 85
27907: PUSH
27908: LD_INT 86
27910: PUSH
27911: LD_INT 11
27913: PUSH
27914: LD_INT 9
27916: PUSH
27917: LD_INT 20
27919: PUSH
27920: LD_INT 19
27922: PUSH
27923: LD_INT 21
27925: PUSH
27926: LD_INT 24
27928: PUSH
27929: LD_INT 22
27931: PUSH
27932: LD_INT 25
27934: PUSH
27935: LD_INT 28
27937: PUSH
27938: LD_INT 29
27940: PUSH
27941: LD_INT 30
27943: PUSH
27944: LD_INT 31
27946: PUSH
27947: LD_INT 37
27949: PUSH
27950: LD_INT 38
27952: PUSH
27953: LD_INT 32
27955: PUSH
27956: LD_INT 27
27958: PUSH
27959: LD_INT 33
27961: PUSH
27962: LD_INT 69
27964: PUSH
27965: LD_INT 39
27967: PUSH
27968: LD_INT 34
27970: PUSH
27971: LD_INT 40
27973: PUSH
27974: LD_INT 71
27976: PUSH
27977: LD_INT 23
27979: PUSH
27980: LD_INT 44
27982: PUSH
27983: LD_INT 48
27985: PUSH
27986: LD_INT 49
27988: PUSH
27989: LD_INT 50
27991: PUSH
27992: LD_INT 51
27994: PUSH
27995: LD_INT 52
27997: PUSH
27998: LD_INT 53
28000: PUSH
28001: LD_INT 54
28003: PUSH
28004: LD_INT 55
28006: PUSH
28007: LD_INT 56
28009: PUSH
28010: LD_INT 57
28012: PUSH
28013: LD_INT 58
28015: PUSH
28016: LD_INT 59
28018: PUSH
28019: LD_INT 63
28021: PUSH
28022: LD_INT 64
28024: PUSH
28025: LD_INT 65
28027: PUSH
28028: LD_INT 82
28030: PUSH
28031: LD_INT 83
28033: PUSH
28034: LD_INT 84
28036: PUSH
28037: LD_INT 85
28039: PUSH
28040: LD_INT 86
28042: PUSH
28043: EMPTY
28044: LIST
28045: LIST
28046: LIST
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: LIST
28082: LIST
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: LIST
28092: LIST
28093: LIST
28094: LIST
28095: LIST
28096: LIST
28097: ST_TO_ADDR
28098: GO 28101
28100: POP
// if state > - 1 and state < 3 then
28101: LD_VAR 0 3
28105: PUSH
28106: LD_INT 1
28108: NEG
28109: GREATER
28110: PUSH
28111: LD_VAR 0 3
28115: PUSH
28116: LD_INT 3
28118: LESS
28119: AND
28120: IFFALSE 28177
// for i in result do
28122: LD_ADDR_VAR 0 5
28126: PUSH
28127: LD_VAR 0 4
28131: PUSH
28132: FOR_IN
28133: IFFALSE 28175
// if GetTech ( i , side ) <> state then
28135: LD_VAR 0 5
28139: PPUSH
28140: LD_VAR 0 1
28144: PPUSH
28145: CALL_OW 321
28149: PUSH
28150: LD_VAR 0 3
28154: NONEQUAL
28155: IFFALSE 28173
// result := result diff i ;
28157: LD_ADDR_VAR 0 4
28161: PUSH
28162: LD_VAR 0 4
28166: PUSH
28167: LD_VAR 0 5
28171: DIFF
28172: ST_TO_ADDR
28173: GO 28132
28175: POP
28176: POP
// end ;
28177: LD_VAR 0 4
28181: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
28182: LD_INT 0
28184: PPUSH
28185: PPUSH
28186: PPUSH
// result := true ;
28187: LD_ADDR_VAR 0 3
28191: PUSH
28192: LD_INT 1
28194: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
28195: LD_ADDR_VAR 0 5
28199: PUSH
28200: LD_VAR 0 2
28204: PPUSH
28205: CALL_OW 480
28209: ST_TO_ADDR
// if not tmp then
28210: LD_VAR 0 5
28214: NOT
28215: IFFALSE 28219
// exit ;
28217: GO 28268
// for i in tmp do
28219: LD_ADDR_VAR 0 4
28223: PUSH
28224: LD_VAR 0 5
28228: PUSH
28229: FOR_IN
28230: IFFALSE 28266
// if GetTech ( i , side ) <> state_researched then
28232: LD_VAR 0 4
28236: PPUSH
28237: LD_VAR 0 1
28241: PPUSH
28242: CALL_OW 321
28246: PUSH
28247: LD_INT 2
28249: NONEQUAL
28250: IFFALSE 28264
// begin result := false ;
28252: LD_ADDR_VAR 0 3
28256: PUSH
28257: LD_INT 0
28259: ST_TO_ADDR
// exit ;
28260: POP
28261: POP
28262: GO 28268
// end ;
28264: GO 28229
28266: POP
28267: POP
// end ;
28268: LD_VAR 0 3
28272: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
28273: LD_INT 0
28275: PPUSH
28276: PPUSH
28277: PPUSH
28278: PPUSH
28279: PPUSH
28280: PPUSH
28281: PPUSH
28282: PPUSH
28283: PPUSH
28284: PPUSH
28285: PPUSH
28286: PPUSH
28287: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
28288: LD_VAR 0 1
28292: NOT
28293: PUSH
28294: LD_VAR 0 1
28298: PPUSH
28299: CALL_OW 257
28303: PUSH
28304: LD_INT 9
28306: NONEQUAL
28307: OR
28308: IFFALSE 28312
// exit ;
28310: GO 28885
// side := GetSide ( unit ) ;
28312: LD_ADDR_VAR 0 9
28316: PUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 255
28326: ST_TO_ADDR
// tech_space := tech_spacanom ;
28327: LD_ADDR_VAR 0 12
28331: PUSH
28332: LD_INT 29
28334: ST_TO_ADDR
// tech_time := tech_taurad ;
28335: LD_ADDR_VAR 0 13
28339: PUSH
28340: LD_INT 28
28342: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28343: LD_ADDR_VAR 0 11
28347: PUSH
28348: LD_VAR 0 1
28352: PPUSH
28353: CALL_OW 310
28357: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28358: LD_VAR 0 11
28362: PPUSH
28363: CALL_OW 247
28367: PUSH
28368: LD_INT 2
28370: EQUAL
28371: IFFALSE 28375
// exit ;
28373: GO 28885
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28375: LD_ADDR_VAR 0 8
28379: PUSH
28380: LD_INT 81
28382: PUSH
28383: LD_VAR 0 9
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 3
28394: PUSH
28395: LD_INT 21
28397: PUSH
28398: LD_INT 3
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: PUSH
28405: EMPTY
28406: LIST
28407: LIST
28408: PUSH
28409: EMPTY
28410: LIST
28411: LIST
28412: PPUSH
28413: CALL_OW 69
28417: ST_TO_ADDR
// if not tmp then
28418: LD_VAR 0 8
28422: NOT
28423: IFFALSE 28427
// exit ;
28425: GO 28885
// if in_unit then
28427: LD_VAR 0 11
28431: IFFALSE 28455
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28433: LD_ADDR_VAR 0 10
28437: PUSH
28438: LD_VAR 0 8
28442: PPUSH
28443: LD_VAR 0 11
28447: PPUSH
28448: CALL_OW 74
28452: ST_TO_ADDR
28453: GO 28475
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28455: LD_ADDR_VAR 0 10
28459: PUSH
28460: LD_VAR 0 8
28464: PPUSH
28465: LD_VAR 0 1
28469: PPUSH
28470: CALL_OW 74
28474: ST_TO_ADDR
// if not enemy then
28475: LD_VAR 0 10
28479: NOT
28480: IFFALSE 28484
// exit ;
28482: GO 28885
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28484: LD_VAR 0 11
28488: PUSH
28489: LD_VAR 0 11
28493: PPUSH
28494: LD_VAR 0 10
28498: PPUSH
28499: CALL_OW 296
28503: PUSH
28504: LD_INT 13
28506: GREATER
28507: AND
28508: PUSH
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_VAR 0 10
28518: PPUSH
28519: CALL_OW 296
28523: PUSH
28524: LD_INT 12
28526: GREATER
28527: OR
28528: IFFALSE 28532
// exit ;
28530: GO 28885
// missile := [ 1 ] ;
28532: LD_ADDR_VAR 0 14
28536: PUSH
28537: LD_INT 1
28539: PUSH
28540: EMPTY
28541: LIST
28542: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28543: LD_VAR 0 9
28547: PPUSH
28548: LD_VAR 0 12
28552: PPUSH
28553: CALL_OW 325
28557: IFFALSE 28586
// missile := Replace ( missile , missile + 1 , 2 ) ;
28559: LD_ADDR_VAR 0 14
28563: PUSH
28564: LD_VAR 0 14
28568: PPUSH
28569: LD_VAR 0 14
28573: PUSH
28574: LD_INT 1
28576: PLUS
28577: PPUSH
28578: LD_INT 2
28580: PPUSH
28581: CALL_OW 1
28585: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28586: LD_VAR 0 9
28590: PPUSH
28591: LD_VAR 0 13
28595: PPUSH
28596: CALL_OW 325
28600: PUSH
28601: LD_VAR 0 10
28605: PPUSH
28606: CALL_OW 255
28610: PPUSH
28611: LD_VAR 0 13
28615: PPUSH
28616: CALL_OW 325
28620: NOT
28621: AND
28622: IFFALSE 28651
// missile := Replace ( missile , missile + 1 , 3 ) ;
28624: LD_ADDR_VAR 0 14
28628: PUSH
28629: LD_VAR 0 14
28633: PPUSH
28634: LD_VAR 0 14
28638: PUSH
28639: LD_INT 1
28641: PLUS
28642: PPUSH
28643: LD_INT 3
28645: PPUSH
28646: CALL_OW 1
28650: ST_TO_ADDR
// if missile < 2 then
28651: LD_VAR 0 14
28655: PUSH
28656: LD_INT 2
28658: LESS
28659: IFFALSE 28663
// exit ;
28661: GO 28885
// x := GetX ( enemy ) ;
28663: LD_ADDR_VAR 0 4
28667: PUSH
28668: LD_VAR 0 10
28672: PPUSH
28673: CALL_OW 250
28677: ST_TO_ADDR
// y := GetY ( enemy ) ;
28678: LD_ADDR_VAR 0 5
28682: PUSH
28683: LD_VAR 0 10
28687: PPUSH
28688: CALL_OW 251
28692: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28693: LD_ADDR_VAR 0 6
28697: PUSH
28698: LD_VAR 0 4
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PPUSH
28707: LD_INT 1
28709: PPUSH
28710: CALL_OW 12
28714: PLUS
28715: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28716: LD_ADDR_VAR 0 7
28720: PUSH
28721: LD_VAR 0 5
28725: PUSH
28726: LD_INT 1
28728: NEG
28729: PPUSH
28730: LD_INT 1
28732: PPUSH
28733: CALL_OW 12
28737: PLUS
28738: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28739: LD_VAR 0 6
28743: PPUSH
28744: LD_VAR 0 7
28748: PPUSH
28749: CALL_OW 488
28753: NOT
28754: IFFALSE 28776
// begin _x := x ;
28756: LD_ADDR_VAR 0 6
28760: PUSH
28761: LD_VAR 0 4
28765: ST_TO_ADDR
// _y := y ;
28766: LD_ADDR_VAR 0 7
28770: PUSH
28771: LD_VAR 0 5
28775: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28776: LD_ADDR_VAR 0 3
28780: PUSH
28781: LD_INT 1
28783: PPUSH
28784: LD_VAR 0 14
28788: PPUSH
28789: CALL_OW 12
28793: ST_TO_ADDR
// case i of 1 :
28794: LD_VAR 0 3
28798: PUSH
28799: LD_INT 1
28801: DOUBLE
28802: EQUAL
28803: IFTRUE 28807
28805: GO 28824
28807: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28808: LD_VAR 0 1
28812: PPUSH
28813: LD_VAR 0 10
28817: PPUSH
28818: CALL_OW 115
28822: GO 28885
28824: LD_INT 2
28826: DOUBLE
28827: EQUAL
28828: IFTRUE 28832
28830: GO 28854
28832: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28833: LD_VAR 0 1
28837: PPUSH
28838: LD_VAR 0 6
28842: PPUSH
28843: LD_VAR 0 7
28847: PPUSH
28848: CALL_OW 153
28852: GO 28885
28854: LD_INT 3
28856: DOUBLE
28857: EQUAL
28858: IFTRUE 28862
28860: GO 28884
28862: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28863: LD_VAR 0 1
28867: PPUSH
28868: LD_VAR 0 6
28872: PPUSH
28873: LD_VAR 0 7
28877: PPUSH
28878: CALL_OW 154
28882: GO 28885
28884: POP
// end ;
28885: LD_VAR 0 2
28889: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28890: LD_INT 0
28892: PPUSH
28893: PPUSH
28894: PPUSH
28895: PPUSH
28896: PPUSH
28897: PPUSH
// if not unit or not building then
28898: LD_VAR 0 1
28902: NOT
28903: PUSH
28904: LD_VAR 0 2
28908: NOT
28909: OR
28910: IFFALSE 28914
// exit ;
28912: GO 29072
// x := GetX ( building ) ;
28914: LD_ADDR_VAR 0 5
28918: PUSH
28919: LD_VAR 0 2
28923: PPUSH
28924: CALL_OW 250
28928: ST_TO_ADDR
// y := GetY ( building ) ;
28929: LD_ADDR_VAR 0 6
28933: PUSH
28934: LD_VAR 0 2
28938: PPUSH
28939: CALL_OW 251
28943: ST_TO_ADDR
// for i = 0 to 5 do
28944: LD_ADDR_VAR 0 4
28948: PUSH
28949: DOUBLE
28950: LD_INT 0
28952: DEC
28953: ST_TO_ADDR
28954: LD_INT 5
28956: PUSH
28957: FOR_TO
28958: IFFALSE 29070
// begin _x := ShiftX ( x , i , 3 ) ;
28960: LD_ADDR_VAR 0 7
28964: PUSH
28965: LD_VAR 0 5
28969: PPUSH
28970: LD_VAR 0 4
28974: PPUSH
28975: LD_INT 3
28977: PPUSH
28978: CALL_OW 272
28982: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28983: LD_ADDR_VAR 0 8
28987: PUSH
28988: LD_VAR 0 6
28992: PPUSH
28993: LD_VAR 0 4
28997: PPUSH
28998: LD_INT 3
29000: PPUSH
29001: CALL_OW 273
29005: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29006: LD_VAR 0 7
29010: PPUSH
29011: LD_VAR 0 8
29015: PPUSH
29016: CALL_OW 488
29020: NOT
29021: IFFALSE 29025
// continue ;
29023: GO 28957
// if HexInfo ( _x , _y ) = 0 then
29025: LD_VAR 0 7
29029: PPUSH
29030: LD_VAR 0 8
29034: PPUSH
29035: CALL_OW 428
29039: PUSH
29040: LD_INT 0
29042: EQUAL
29043: IFFALSE 29068
// begin ComMoveXY ( unit , _x , _y ) ;
29045: LD_VAR 0 1
29049: PPUSH
29050: LD_VAR 0 7
29054: PPUSH
29055: LD_VAR 0 8
29059: PPUSH
29060: CALL_OW 111
// exit ;
29064: POP
29065: POP
29066: GO 29072
// end ; end ;
29068: GO 28957
29070: POP
29071: POP
// end ;
29072: LD_VAR 0 3
29076: RET
// export function ScanBase ( side , base_area ) ; begin
29077: LD_INT 0
29079: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
29080: LD_ADDR_VAR 0 3
29084: PUSH
29085: LD_VAR 0 2
29089: PPUSH
29090: LD_INT 81
29092: PUSH
29093: LD_VAR 0 1
29097: PUSH
29098: EMPTY
29099: LIST
29100: LIST
29101: PPUSH
29102: CALL_OW 70
29106: ST_TO_ADDR
// end ;
29107: LD_VAR 0 3
29111: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
29112: LD_INT 0
29114: PPUSH
29115: PPUSH
29116: PPUSH
29117: PPUSH
// result := false ;
29118: LD_ADDR_VAR 0 2
29122: PUSH
29123: LD_INT 0
29125: ST_TO_ADDR
// side := GetSide ( unit ) ;
29126: LD_ADDR_VAR 0 3
29130: PUSH
29131: LD_VAR 0 1
29135: PPUSH
29136: CALL_OW 255
29140: ST_TO_ADDR
// nat := GetNation ( unit ) ;
29141: LD_ADDR_VAR 0 4
29145: PUSH
29146: LD_VAR 0 1
29150: PPUSH
29151: CALL_OW 248
29155: ST_TO_ADDR
// case nat of 1 :
29156: LD_VAR 0 4
29160: PUSH
29161: LD_INT 1
29163: DOUBLE
29164: EQUAL
29165: IFTRUE 29169
29167: GO 29180
29169: POP
// tech := tech_lassight ; 2 :
29170: LD_ADDR_VAR 0 5
29174: PUSH
29175: LD_INT 12
29177: ST_TO_ADDR
29178: GO 29219
29180: LD_INT 2
29182: DOUBLE
29183: EQUAL
29184: IFTRUE 29188
29186: GO 29199
29188: POP
// tech := tech_mortar ; 3 :
29189: LD_ADDR_VAR 0 5
29193: PUSH
29194: LD_INT 41
29196: ST_TO_ADDR
29197: GO 29219
29199: LD_INT 3
29201: DOUBLE
29202: EQUAL
29203: IFTRUE 29207
29205: GO 29218
29207: POP
// tech := tech_bazooka ; end ;
29208: LD_ADDR_VAR 0 5
29212: PUSH
29213: LD_INT 44
29215: ST_TO_ADDR
29216: GO 29219
29218: POP
// if Researched ( side , tech ) then
29219: LD_VAR 0 3
29223: PPUSH
29224: LD_VAR 0 5
29228: PPUSH
29229: CALL_OW 325
29233: IFFALSE 29260
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
29235: LD_ADDR_VAR 0 2
29239: PUSH
29240: LD_INT 5
29242: PUSH
29243: LD_INT 8
29245: PUSH
29246: LD_INT 9
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: LIST
29253: PUSH
29254: LD_VAR 0 4
29258: ARRAY
29259: ST_TO_ADDR
// end ;
29260: LD_VAR 0 2
29264: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
29265: LD_INT 0
29267: PPUSH
29268: PPUSH
29269: PPUSH
// if not mines then
29270: LD_VAR 0 2
29274: NOT
29275: IFFALSE 29279
// exit ;
29277: GO 29423
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29279: LD_ADDR_VAR 0 5
29283: PUSH
29284: LD_INT 81
29286: PUSH
29287: LD_VAR 0 1
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 3
29298: PUSH
29299: LD_INT 21
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: EMPTY
29310: LIST
29311: LIST
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PPUSH
29317: CALL_OW 69
29321: ST_TO_ADDR
// for i in mines do
29322: LD_ADDR_VAR 0 4
29326: PUSH
29327: LD_VAR 0 2
29331: PUSH
29332: FOR_IN
29333: IFFALSE 29421
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29335: LD_VAR 0 4
29339: PUSH
29340: LD_INT 1
29342: ARRAY
29343: PPUSH
29344: LD_VAR 0 4
29348: PUSH
29349: LD_INT 2
29351: ARRAY
29352: PPUSH
29353: CALL_OW 458
29357: NOT
29358: IFFALSE 29362
// continue ;
29360: GO 29332
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29362: LD_VAR 0 4
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: LD_VAR 0 4
29375: PUSH
29376: LD_INT 2
29378: ARRAY
29379: PPUSH
29380: CALL_OW 428
29384: PUSH
29385: LD_VAR 0 5
29389: IN
29390: IFFALSE 29419
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29392: LD_VAR 0 4
29396: PUSH
29397: LD_INT 1
29399: ARRAY
29400: PPUSH
29401: LD_VAR 0 4
29405: PUSH
29406: LD_INT 2
29408: ARRAY
29409: PPUSH
29410: LD_VAR 0 1
29414: PPUSH
29415: CALL_OW 456
// end ;
29419: GO 29332
29421: POP
29422: POP
// end ;
29423: LD_VAR 0 3
29427: RET
// export function Count ( array ) ; var i ; begin
29428: LD_INT 0
29430: PPUSH
29431: PPUSH
// result := 0 ;
29432: LD_ADDR_VAR 0 2
29436: PUSH
29437: LD_INT 0
29439: ST_TO_ADDR
// for i in array do
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_VAR 0 1
29449: PUSH
29450: FOR_IN
29451: IFFALSE 29475
// if i then
29453: LD_VAR 0 3
29457: IFFALSE 29473
// result := result + 1 ;
29459: LD_ADDR_VAR 0 2
29463: PUSH
29464: LD_VAR 0 2
29468: PUSH
29469: LD_INT 1
29471: PLUS
29472: ST_TO_ADDR
29473: GO 29450
29475: POP
29476: POP
// end ;
29477: LD_VAR 0 2
29481: RET
// export function IsEmpty ( building ) ; begin
29482: LD_INT 0
29484: PPUSH
// if not building then
29485: LD_VAR 0 1
29489: NOT
29490: IFFALSE 29494
// exit ;
29492: GO 29537
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29494: LD_ADDR_VAR 0 2
29498: PUSH
29499: LD_VAR 0 1
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_VAR 0 1
29511: PPUSH
29512: CALL_OW 255
29516: PUSH
29517: EMPTY
29518: LIST
29519: LIST
29520: PUSH
29521: LD_INT 58
29523: PUSH
29524: EMPTY
29525: LIST
29526: PUSH
29527: EMPTY
29528: LIST
29529: LIST
29530: PPUSH
29531: CALL_OW 69
29535: IN
29536: ST_TO_ADDR
// end ;
29537: LD_VAR 0 2
29541: RET
// export function IsNotFull ( building ) ; var places ; begin
29542: LD_INT 0
29544: PPUSH
29545: PPUSH
// if not building then
29546: LD_VAR 0 1
29550: NOT
29551: IFFALSE 29555
// exit ;
29553: GO 29726
// result := false ;
29555: LD_ADDR_VAR 0 2
29559: PUSH
29560: LD_INT 0
29562: ST_TO_ADDR
// places := 0 ;
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_INT 0
29570: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
29571: LD_VAR 0 1
29575: PPUSH
29576: CALL_OW 266
29580: PUSH
29581: LD_INT 0
29583: DOUBLE
29584: EQUAL
29585: IFTRUE 29643
29587: LD_INT 1
29589: DOUBLE
29590: EQUAL
29591: IFTRUE 29643
29593: LD_INT 6
29595: DOUBLE
29596: EQUAL
29597: IFTRUE 29643
29599: LD_INT 7
29601: DOUBLE
29602: EQUAL
29603: IFTRUE 29643
29605: LD_INT 8
29607: DOUBLE
29608: EQUAL
29609: IFTRUE 29643
29611: LD_INT 4
29613: DOUBLE
29614: EQUAL
29615: IFTRUE 29643
29617: LD_INT 5
29619: DOUBLE
29620: EQUAL
29621: IFTRUE 29643
29623: LD_INT 2
29625: DOUBLE
29626: EQUAL
29627: IFTRUE 29643
29629: LD_INT 3
29631: DOUBLE
29632: EQUAL
29633: IFTRUE 29643
29635: LD_INT 35
29637: DOUBLE
29638: EQUAL
29639: IFTRUE 29643
29641: GO 29654
29643: POP
// places := 6 ; b_bunker , b_breastwork :
29644: LD_ADDR_VAR 0 3
29648: PUSH
29649: LD_INT 6
29651: ST_TO_ADDR
29652: GO 29699
29654: LD_INT 32
29656: DOUBLE
29657: EQUAL
29658: IFTRUE 29668
29660: LD_INT 31
29662: DOUBLE
29663: EQUAL
29664: IFTRUE 29668
29666: GO 29679
29668: POP
// places := 1 ; b_control_tower :
29669: LD_ADDR_VAR 0 3
29673: PUSH
29674: LD_INT 1
29676: ST_TO_ADDR
29677: GO 29699
29679: LD_INT 36
29681: DOUBLE
29682: EQUAL
29683: IFTRUE 29687
29685: GO 29698
29687: POP
// places := 3 ; end ;
29688: LD_ADDR_VAR 0 3
29692: PUSH
29693: LD_INT 3
29695: ST_TO_ADDR
29696: GO 29699
29698: POP
// if places then
29699: LD_VAR 0 3
29703: IFFALSE 29726
// result := UnitsInside ( building ) < places ;
29705: LD_ADDR_VAR 0 2
29709: PUSH
29710: LD_VAR 0 1
29714: PPUSH
29715: CALL_OW 313
29719: PUSH
29720: LD_VAR 0 3
29724: LESS
29725: ST_TO_ADDR
// end ;
29726: LD_VAR 0 2
29730: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29731: LD_INT 0
29733: PPUSH
29734: PPUSH
29735: PPUSH
29736: PPUSH
// tmp := [ ] ;
29737: LD_ADDR_VAR 0 3
29741: PUSH
29742: EMPTY
29743: ST_TO_ADDR
// list := [ ] ;
29744: LD_ADDR_VAR 0 5
29748: PUSH
29749: EMPTY
29750: ST_TO_ADDR
// for i = 16 to 25 do
29751: LD_ADDR_VAR 0 4
29755: PUSH
29756: DOUBLE
29757: LD_INT 16
29759: DEC
29760: ST_TO_ADDR
29761: LD_INT 25
29763: PUSH
29764: FOR_TO
29765: IFFALSE 29838
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29767: LD_ADDR_VAR 0 3
29771: PUSH
29772: LD_VAR 0 3
29776: PUSH
29777: LD_INT 22
29779: PUSH
29780: LD_VAR 0 1
29784: PPUSH
29785: CALL_OW 255
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 91
29796: PUSH
29797: LD_VAR 0 1
29801: PUSH
29802: LD_INT 6
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: PUSH
29810: LD_INT 30
29812: PUSH
29813: LD_VAR 0 4
29817: PUSH
29818: EMPTY
29819: LIST
29820: LIST
29821: PUSH
29822: EMPTY
29823: LIST
29824: LIST
29825: LIST
29826: PUSH
29827: EMPTY
29828: LIST
29829: PPUSH
29830: CALL_OW 69
29834: ADD
29835: ST_TO_ADDR
29836: GO 29764
29838: POP
29839: POP
// for i = 1 to tmp do
29840: LD_ADDR_VAR 0 4
29844: PUSH
29845: DOUBLE
29846: LD_INT 1
29848: DEC
29849: ST_TO_ADDR
29850: LD_VAR 0 3
29854: PUSH
29855: FOR_TO
29856: IFFALSE 29944
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29858: LD_ADDR_VAR 0 5
29862: PUSH
29863: LD_VAR 0 5
29867: PUSH
29868: LD_VAR 0 3
29872: PUSH
29873: LD_VAR 0 4
29877: ARRAY
29878: PPUSH
29879: CALL_OW 266
29883: PUSH
29884: LD_VAR 0 3
29888: PUSH
29889: LD_VAR 0 4
29893: ARRAY
29894: PPUSH
29895: CALL_OW 250
29899: PUSH
29900: LD_VAR 0 3
29904: PUSH
29905: LD_VAR 0 4
29909: ARRAY
29910: PPUSH
29911: CALL_OW 251
29915: PUSH
29916: LD_VAR 0 3
29920: PUSH
29921: LD_VAR 0 4
29925: ARRAY
29926: PPUSH
29927: CALL_OW 254
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: LIST
29936: LIST
29937: PUSH
29938: EMPTY
29939: LIST
29940: ADD
29941: ST_TO_ADDR
29942: GO 29855
29944: POP
29945: POP
// result := list ;
29946: LD_ADDR_VAR 0 2
29950: PUSH
29951: LD_VAR 0 5
29955: ST_TO_ADDR
// end ;
29956: LD_VAR 0 2
29960: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29961: LD_INT 0
29963: PPUSH
29964: PPUSH
29965: PPUSH
29966: PPUSH
29967: PPUSH
29968: PPUSH
29969: PPUSH
// if not factory then
29970: LD_VAR 0 1
29974: NOT
29975: IFFALSE 29979
// exit ;
29977: GO 30572
// if control = control_apeman then
29979: LD_VAR 0 4
29983: PUSH
29984: LD_INT 5
29986: EQUAL
29987: IFFALSE 30096
// begin tmp := UnitsInside ( factory ) ;
29989: LD_ADDR_VAR 0 8
29993: PUSH
29994: LD_VAR 0 1
29998: PPUSH
29999: CALL_OW 313
30003: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
30004: LD_VAR 0 8
30008: PPUSH
30009: LD_INT 25
30011: PUSH
30012: LD_INT 12
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PPUSH
30019: CALL_OW 72
30023: NOT
30024: IFFALSE 30034
// control := control_manual ;
30026: LD_ADDR_VAR 0 4
30030: PUSH
30031: LD_INT 1
30033: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
30034: LD_ADDR_VAR 0 8
30038: PUSH
30039: LD_VAR 0 1
30043: PPUSH
30044: CALL 29731 0 1
30048: ST_TO_ADDR
// if tmp then
30049: LD_VAR 0 8
30053: IFFALSE 30096
// begin for i in tmp do
30055: LD_ADDR_VAR 0 7
30059: PUSH
30060: LD_VAR 0 8
30064: PUSH
30065: FOR_IN
30066: IFFALSE 30094
// if i [ 1 ] = b_ext_radio then
30068: LD_VAR 0 7
30072: PUSH
30073: LD_INT 1
30075: ARRAY
30076: PUSH
30077: LD_INT 22
30079: EQUAL
30080: IFFALSE 30092
// begin control := control_remote ;
30082: LD_ADDR_VAR 0 4
30086: PUSH
30087: LD_INT 2
30089: ST_TO_ADDR
// break ;
30090: GO 30094
// end ;
30092: GO 30065
30094: POP
30095: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30096: LD_VAR 0 1
30100: PPUSH
30101: LD_VAR 0 2
30105: PPUSH
30106: LD_VAR 0 3
30110: PPUSH
30111: LD_VAR 0 4
30115: PPUSH
30116: LD_VAR 0 5
30120: PPUSH
30121: CALL_OW 448
30125: IFFALSE 30160
// begin result := [ chassis , engine , control , weapon ] ;
30127: LD_ADDR_VAR 0 6
30131: PUSH
30132: LD_VAR 0 2
30136: PUSH
30137: LD_VAR 0 3
30141: PUSH
30142: LD_VAR 0 4
30146: PUSH
30147: LD_VAR 0 5
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: LIST
30156: LIST
30157: ST_TO_ADDR
// exit ;
30158: GO 30572
// end ; _chassis := AvailableChassisList ( factory ) ;
30160: LD_ADDR_VAR 0 9
30164: PUSH
30165: LD_VAR 0 1
30169: PPUSH
30170: CALL_OW 475
30174: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
30175: LD_ADDR_VAR 0 11
30179: PUSH
30180: LD_VAR 0 1
30184: PPUSH
30185: CALL_OW 476
30189: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
30190: LD_ADDR_VAR 0 12
30194: PUSH
30195: LD_VAR 0 1
30199: PPUSH
30200: CALL_OW 477
30204: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
30205: LD_ADDR_VAR 0 10
30209: PUSH
30210: LD_VAR 0 1
30214: PPUSH
30215: CALL_OW 478
30219: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
30220: LD_VAR 0 9
30224: NOT
30225: PUSH
30226: LD_VAR 0 11
30230: NOT
30231: OR
30232: PUSH
30233: LD_VAR 0 12
30237: NOT
30238: OR
30239: PUSH
30240: LD_VAR 0 10
30244: NOT
30245: OR
30246: IFFALSE 30281
// begin result := [ chassis , engine , control , weapon ] ;
30248: LD_ADDR_VAR 0 6
30252: PUSH
30253: LD_VAR 0 2
30257: PUSH
30258: LD_VAR 0 3
30262: PUSH
30263: LD_VAR 0 4
30267: PUSH
30268: LD_VAR 0 5
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: ST_TO_ADDR
// exit ;
30279: GO 30572
// end ; if not chassis in _chassis then
30281: LD_VAR 0 2
30285: PUSH
30286: LD_VAR 0 9
30290: IN
30291: NOT
30292: IFFALSE 30318
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
30294: LD_ADDR_VAR 0 2
30298: PUSH
30299: LD_VAR 0 9
30303: PUSH
30304: LD_INT 1
30306: PPUSH
30307: LD_VAR 0 9
30311: PPUSH
30312: CALL_OW 12
30316: ARRAY
30317: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
30318: LD_VAR 0 2
30322: PPUSH
30323: LD_VAR 0 3
30327: PPUSH
30328: CALL 30577 0 2
30332: NOT
30333: IFFALSE 30392
// repeat engine := _engine [ 1 ] ;
30335: LD_ADDR_VAR 0 3
30339: PUSH
30340: LD_VAR 0 11
30344: PUSH
30345: LD_INT 1
30347: ARRAY
30348: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
30349: LD_ADDR_VAR 0 11
30353: PUSH
30354: LD_VAR 0 11
30358: PPUSH
30359: LD_INT 1
30361: PPUSH
30362: CALL_OW 3
30366: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
30367: LD_VAR 0 2
30371: PPUSH
30372: LD_VAR 0 3
30376: PPUSH
30377: CALL 30577 0 2
30381: PUSH
30382: LD_VAR 0 11
30386: PUSH
30387: EMPTY
30388: EQUAL
30389: OR
30390: IFFALSE 30335
// if not control in _control then
30392: LD_VAR 0 4
30396: PUSH
30397: LD_VAR 0 12
30401: IN
30402: NOT
30403: IFFALSE 30429
// control := _control [ rand ( 1 , _control ) ] ;
30405: LD_ADDR_VAR 0 4
30409: PUSH
30410: LD_VAR 0 12
30414: PUSH
30415: LD_INT 1
30417: PPUSH
30418: LD_VAR 0 12
30422: PPUSH
30423: CALL_OW 12
30427: ARRAY
30428: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
30429: LD_VAR 0 2
30433: PPUSH
30434: LD_VAR 0 5
30438: PPUSH
30439: CALL 30797 0 2
30443: NOT
30444: IFFALSE 30503
// repeat weapon := _weapon [ 1 ] ;
30446: LD_ADDR_VAR 0 5
30450: PUSH
30451: LD_VAR 0 10
30455: PUSH
30456: LD_INT 1
30458: ARRAY
30459: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30460: LD_ADDR_VAR 0 10
30464: PUSH
30465: LD_VAR 0 10
30469: PPUSH
30470: LD_INT 1
30472: PPUSH
30473: CALL_OW 3
30477: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30478: LD_VAR 0 2
30482: PPUSH
30483: LD_VAR 0 5
30487: PPUSH
30488: CALL 30797 0 2
30492: PUSH
30493: LD_VAR 0 10
30497: PUSH
30498: EMPTY
30499: EQUAL
30500: OR
30501: IFFALSE 30446
// result := [ ] ;
30503: LD_ADDR_VAR 0 6
30507: PUSH
30508: EMPTY
30509: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30510: LD_VAR 0 1
30514: PPUSH
30515: LD_VAR 0 2
30519: PPUSH
30520: LD_VAR 0 3
30524: PPUSH
30525: LD_VAR 0 4
30529: PPUSH
30530: LD_VAR 0 5
30534: PPUSH
30535: CALL_OW 448
30539: IFFALSE 30572
// result := [ chassis , engine , control , weapon ] ;
30541: LD_ADDR_VAR 0 6
30545: PUSH
30546: LD_VAR 0 2
30550: PUSH
30551: LD_VAR 0 3
30555: PUSH
30556: LD_VAR 0 4
30560: PUSH
30561: LD_VAR 0 5
30565: PUSH
30566: EMPTY
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: ST_TO_ADDR
// end ;
30572: LD_VAR 0 6
30576: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30577: LD_INT 0
30579: PPUSH
// if not chassis or not engine then
30580: LD_VAR 0 1
30584: NOT
30585: PUSH
30586: LD_VAR 0 2
30590: NOT
30591: OR
30592: IFFALSE 30596
// exit ;
30594: GO 30792
// case engine of engine_solar :
30596: LD_VAR 0 2
30600: PUSH
30601: LD_INT 2
30603: DOUBLE
30604: EQUAL
30605: IFTRUE 30609
30607: GO 30647
30609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30610: LD_ADDR_VAR 0 3
30614: PUSH
30615: LD_INT 11
30617: PUSH
30618: LD_INT 12
30620: PUSH
30621: LD_INT 13
30623: PUSH
30624: LD_INT 14
30626: PUSH
30627: LD_INT 1
30629: PUSH
30630: LD_INT 2
30632: PUSH
30633: LD_INT 3
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: ST_TO_ADDR
30645: GO 30776
30647: LD_INT 1
30649: DOUBLE
30650: EQUAL
30651: IFTRUE 30655
30653: GO 30717
30655: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30656: LD_ADDR_VAR 0 3
30660: PUSH
30661: LD_INT 11
30663: PUSH
30664: LD_INT 12
30666: PUSH
30667: LD_INT 13
30669: PUSH
30670: LD_INT 14
30672: PUSH
30673: LD_INT 1
30675: PUSH
30676: LD_INT 2
30678: PUSH
30679: LD_INT 3
30681: PUSH
30682: LD_INT 4
30684: PUSH
30685: LD_INT 5
30687: PUSH
30688: LD_INT 21
30690: PUSH
30691: LD_INT 23
30693: PUSH
30694: LD_INT 22
30696: PUSH
30697: LD_INT 24
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: LIST
30707: LIST
30708: LIST
30709: LIST
30710: LIST
30711: LIST
30712: LIST
30713: LIST
30714: ST_TO_ADDR
30715: GO 30776
30717: LD_INT 3
30719: DOUBLE
30720: EQUAL
30721: IFTRUE 30725
30723: GO 30775
30725: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30726: LD_ADDR_VAR 0 3
30730: PUSH
30731: LD_INT 13
30733: PUSH
30734: LD_INT 14
30736: PUSH
30737: LD_INT 2
30739: PUSH
30740: LD_INT 3
30742: PUSH
30743: LD_INT 4
30745: PUSH
30746: LD_INT 5
30748: PUSH
30749: LD_INT 21
30751: PUSH
30752: LD_INT 22
30754: PUSH
30755: LD_INT 23
30757: PUSH
30758: LD_INT 24
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: LIST
30766: LIST
30767: LIST
30768: LIST
30769: LIST
30770: LIST
30771: LIST
30772: ST_TO_ADDR
30773: GO 30776
30775: POP
// result := ( chassis in result ) ;
30776: LD_ADDR_VAR 0 3
30780: PUSH
30781: LD_VAR 0 1
30785: PUSH
30786: LD_VAR 0 3
30790: IN
30791: ST_TO_ADDR
// end ;
30792: LD_VAR 0 3
30796: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30797: LD_INT 0
30799: PPUSH
// if not chassis or not weapon then
30800: LD_VAR 0 1
30804: NOT
30805: PUSH
30806: LD_VAR 0 2
30810: NOT
30811: OR
30812: IFFALSE 30816
// exit ;
30814: GO 31876
// case weapon of us_machine_gun :
30816: LD_VAR 0 2
30820: PUSH
30821: LD_INT 2
30823: DOUBLE
30824: EQUAL
30825: IFTRUE 30829
30827: GO 30859
30829: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30830: LD_ADDR_VAR 0 3
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: LD_INT 5
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: ST_TO_ADDR
30857: GO 31860
30859: LD_INT 3
30861: DOUBLE
30862: EQUAL
30863: IFTRUE 30867
30865: GO 30897
30867: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30868: LD_ADDR_VAR 0 3
30872: PUSH
30873: LD_INT 1
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 3
30881: PUSH
30882: LD_INT 4
30884: PUSH
30885: LD_INT 5
30887: PUSH
30888: EMPTY
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: ST_TO_ADDR
30895: GO 31860
30897: LD_INT 11
30899: DOUBLE
30900: EQUAL
30901: IFTRUE 30905
30903: GO 30935
30905: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30906: LD_ADDR_VAR 0 3
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: LD_INT 2
30916: PUSH
30917: LD_INT 3
30919: PUSH
30920: LD_INT 4
30922: PUSH
30923: LD_INT 5
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: ST_TO_ADDR
30933: GO 31860
30935: LD_INT 4
30937: DOUBLE
30938: EQUAL
30939: IFTRUE 30943
30941: GO 30969
30943: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30944: LD_ADDR_VAR 0 3
30948: PUSH
30949: LD_INT 2
30951: PUSH
30952: LD_INT 3
30954: PUSH
30955: LD_INT 4
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: EMPTY
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: ST_TO_ADDR
30967: GO 31860
30969: LD_INT 5
30971: DOUBLE
30972: EQUAL
30973: IFTRUE 30977
30975: GO 31003
30977: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30978: LD_ADDR_VAR 0 3
30982: PUSH
30983: LD_INT 2
30985: PUSH
30986: LD_INT 3
30988: PUSH
30989: LD_INT 4
30991: PUSH
30992: LD_INT 5
30994: PUSH
30995: EMPTY
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: ST_TO_ADDR
31001: GO 31860
31003: LD_INT 9
31005: DOUBLE
31006: EQUAL
31007: IFTRUE 31011
31009: GO 31037
31011: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
31012: LD_ADDR_VAR 0 3
31016: PUSH
31017: LD_INT 2
31019: PUSH
31020: LD_INT 3
31022: PUSH
31023: LD_INT 4
31025: PUSH
31026: LD_INT 5
31028: PUSH
31029: EMPTY
31030: LIST
31031: LIST
31032: LIST
31033: LIST
31034: ST_TO_ADDR
31035: GO 31860
31037: LD_INT 7
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31071
31045: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 3
31056: PUSH
31057: LD_INT 4
31059: PUSH
31060: LD_INT 5
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: ST_TO_ADDR
31069: GO 31860
31071: LD_INT 12
31073: DOUBLE
31074: EQUAL
31075: IFTRUE 31079
31077: GO 31105
31079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
31080: LD_ADDR_VAR 0 3
31084: PUSH
31085: LD_INT 2
31087: PUSH
31088: LD_INT 3
31090: PUSH
31091: LD_INT 4
31093: PUSH
31094: LD_INT 5
31096: PUSH
31097: EMPTY
31098: LIST
31099: LIST
31100: LIST
31101: LIST
31102: ST_TO_ADDR
31103: GO 31860
31105: LD_INT 13
31107: DOUBLE
31108: EQUAL
31109: IFTRUE 31113
31111: GO 31139
31113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
31114: LD_ADDR_VAR 0 3
31118: PUSH
31119: LD_INT 2
31121: PUSH
31122: LD_INT 3
31124: PUSH
31125: LD_INT 4
31127: PUSH
31128: LD_INT 5
31130: PUSH
31131: EMPTY
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: ST_TO_ADDR
31137: GO 31860
31139: LD_INT 14
31141: DOUBLE
31142: EQUAL
31143: IFTRUE 31147
31145: GO 31165
31147: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
31148: LD_ADDR_VAR 0 3
31152: PUSH
31153: LD_INT 4
31155: PUSH
31156: LD_INT 5
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: ST_TO_ADDR
31163: GO 31860
31165: LD_INT 6
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31191
31173: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_INT 4
31181: PUSH
31182: LD_INT 5
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: ST_TO_ADDR
31189: GO 31860
31191: LD_INT 10
31193: DOUBLE
31194: EQUAL
31195: IFTRUE 31199
31197: GO 31217
31199: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
31200: LD_ADDR_VAR 0 3
31204: PUSH
31205: LD_INT 4
31207: PUSH
31208: LD_INT 5
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: ST_TO_ADDR
31215: GO 31860
31217: LD_INT 22
31219: DOUBLE
31220: EQUAL
31221: IFTRUE 31225
31223: GO 31251
31225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
31226: LD_ADDR_VAR 0 3
31230: PUSH
31231: LD_INT 11
31233: PUSH
31234: LD_INT 12
31236: PUSH
31237: LD_INT 13
31239: PUSH
31240: LD_INT 14
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: ST_TO_ADDR
31249: GO 31860
31251: LD_INT 23
31253: DOUBLE
31254: EQUAL
31255: IFTRUE 31259
31257: GO 31285
31259: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
31260: LD_ADDR_VAR 0 3
31264: PUSH
31265: LD_INT 11
31267: PUSH
31268: LD_INT 12
31270: PUSH
31271: LD_INT 13
31273: PUSH
31274: LD_INT 14
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: LIST
31281: LIST
31282: ST_TO_ADDR
31283: GO 31860
31285: LD_INT 24
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31319
31293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
31294: LD_ADDR_VAR 0 3
31298: PUSH
31299: LD_INT 11
31301: PUSH
31302: LD_INT 12
31304: PUSH
31305: LD_INT 13
31307: PUSH
31308: LD_INT 14
31310: PUSH
31311: EMPTY
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: ST_TO_ADDR
31317: GO 31860
31319: LD_INT 30
31321: DOUBLE
31322: EQUAL
31323: IFTRUE 31327
31325: GO 31353
31327: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
31328: LD_ADDR_VAR 0 3
31332: PUSH
31333: LD_INT 11
31335: PUSH
31336: LD_INT 12
31338: PUSH
31339: LD_INT 13
31341: PUSH
31342: LD_INT 14
31344: PUSH
31345: EMPTY
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: ST_TO_ADDR
31351: GO 31860
31353: LD_INT 25
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31379
31361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
31362: LD_ADDR_VAR 0 3
31366: PUSH
31367: LD_INT 13
31369: PUSH
31370: LD_INT 14
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: ST_TO_ADDR
31377: GO 31860
31379: LD_INT 27
31381: DOUBLE
31382: EQUAL
31383: IFTRUE 31387
31385: GO 31405
31387: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
31388: LD_ADDR_VAR 0 3
31392: PUSH
31393: LD_INT 13
31395: PUSH
31396: LD_INT 14
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: ST_TO_ADDR
31403: GO 31860
31405: LD_INT 92
31407: DOUBLE
31408: EQUAL
31409: IFTRUE 31413
31411: GO 31439
31413: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
31414: LD_ADDR_VAR 0 3
31418: PUSH
31419: LD_INT 11
31421: PUSH
31422: LD_INT 12
31424: PUSH
31425: LD_INT 13
31427: PUSH
31428: LD_INT 14
31430: PUSH
31431: EMPTY
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: ST_TO_ADDR
31437: GO 31860
31439: LD_INT 28
31441: DOUBLE
31442: EQUAL
31443: IFTRUE 31447
31445: GO 31465
31447: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
31448: LD_ADDR_VAR 0 3
31452: PUSH
31453: LD_INT 13
31455: PUSH
31456: LD_INT 14
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: ST_TO_ADDR
31463: GO 31860
31465: LD_INT 29
31467: DOUBLE
31468: EQUAL
31469: IFTRUE 31473
31471: GO 31491
31473: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
31474: LD_ADDR_VAR 0 3
31478: PUSH
31479: LD_INT 13
31481: PUSH
31482: LD_INT 14
31484: PUSH
31485: EMPTY
31486: LIST
31487: LIST
31488: ST_TO_ADDR
31489: GO 31860
31491: LD_INT 31
31493: DOUBLE
31494: EQUAL
31495: IFTRUE 31499
31497: GO 31517
31499: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31500: LD_ADDR_VAR 0 3
31504: PUSH
31505: LD_INT 13
31507: PUSH
31508: LD_INT 14
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: ST_TO_ADDR
31515: GO 31860
31517: LD_INT 26
31519: DOUBLE
31520: EQUAL
31521: IFTRUE 31525
31523: GO 31543
31525: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31526: LD_ADDR_VAR 0 3
31530: PUSH
31531: LD_INT 13
31533: PUSH
31534: LD_INT 14
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: ST_TO_ADDR
31541: GO 31860
31543: LD_INT 42
31545: DOUBLE
31546: EQUAL
31547: IFTRUE 31551
31549: GO 31577
31551: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31552: LD_ADDR_VAR 0 3
31556: PUSH
31557: LD_INT 21
31559: PUSH
31560: LD_INT 22
31562: PUSH
31563: LD_INT 23
31565: PUSH
31566: LD_INT 24
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: LIST
31573: LIST
31574: ST_TO_ADDR
31575: GO 31860
31577: LD_INT 43
31579: DOUBLE
31580: EQUAL
31581: IFTRUE 31585
31583: GO 31611
31585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31586: LD_ADDR_VAR 0 3
31590: PUSH
31591: LD_INT 21
31593: PUSH
31594: LD_INT 22
31596: PUSH
31597: LD_INT 23
31599: PUSH
31600: LD_INT 24
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: ST_TO_ADDR
31609: GO 31860
31611: LD_INT 44
31613: DOUBLE
31614: EQUAL
31615: IFTRUE 31619
31617: GO 31645
31619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31620: LD_ADDR_VAR 0 3
31624: PUSH
31625: LD_INT 21
31627: PUSH
31628: LD_INT 22
31630: PUSH
31631: LD_INT 23
31633: PUSH
31634: LD_INT 24
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: ST_TO_ADDR
31643: GO 31860
31645: LD_INT 45
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31679
31653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31654: LD_ADDR_VAR 0 3
31658: PUSH
31659: LD_INT 21
31661: PUSH
31662: LD_INT 22
31664: PUSH
31665: LD_INT 23
31667: PUSH
31668: LD_INT 24
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: ST_TO_ADDR
31677: GO 31860
31679: LD_INT 49
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31713
31687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31688: LD_ADDR_VAR 0 3
31692: PUSH
31693: LD_INT 21
31695: PUSH
31696: LD_INT 22
31698: PUSH
31699: LD_INT 23
31701: PUSH
31702: LD_INT 24
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: ST_TO_ADDR
31711: GO 31860
31713: LD_INT 51
31715: DOUBLE
31716: EQUAL
31717: IFTRUE 31721
31719: GO 31747
31721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31722: LD_ADDR_VAR 0 3
31726: PUSH
31727: LD_INT 21
31729: PUSH
31730: LD_INT 22
31732: PUSH
31733: LD_INT 23
31735: PUSH
31736: LD_INT 24
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: ST_TO_ADDR
31745: GO 31860
31747: LD_INT 52
31749: DOUBLE
31750: EQUAL
31751: IFTRUE 31755
31753: GO 31781
31755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31756: LD_ADDR_VAR 0 3
31760: PUSH
31761: LD_INT 21
31763: PUSH
31764: LD_INT 22
31766: PUSH
31767: LD_INT 23
31769: PUSH
31770: LD_INT 24
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: ST_TO_ADDR
31779: GO 31860
31781: LD_INT 53
31783: DOUBLE
31784: EQUAL
31785: IFTRUE 31789
31787: GO 31807
31789: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31790: LD_ADDR_VAR 0 3
31794: PUSH
31795: LD_INT 23
31797: PUSH
31798: LD_INT 24
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: ST_TO_ADDR
31805: GO 31860
31807: LD_INT 46
31809: DOUBLE
31810: EQUAL
31811: IFTRUE 31815
31813: GO 31833
31815: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31816: LD_ADDR_VAR 0 3
31820: PUSH
31821: LD_INT 23
31823: PUSH
31824: LD_INT 24
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: ST_TO_ADDR
31831: GO 31860
31833: LD_INT 47
31835: DOUBLE
31836: EQUAL
31837: IFTRUE 31841
31839: GO 31859
31841: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31842: LD_ADDR_VAR 0 3
31846: PUSH
31847: LD_INT 23
31849: PUSH
31850: LD_INT 24
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: ST_TO_ADDR
31857: GO 31860
31859: POP
// result := ( chassis in result ) ;
31860: LD_ADDR_VAR 0 3
31864: PUSH
31865: LD_VAR 0 1
31869: PUSH
31870: LD_VAR 0 3
31874: IN
31875: ST_TO_ADDR
// end ;
31876: LD_VAR 0 3
31880: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31881: LD_INT 0
31883: PPUSH
31884: PPUSH
31885: PPUSH
31886: PPUSH
31887: PPUSH
31888: PPUSH
31889: PPUSH
// result := array ;
31890: LD_ADDR_VAR 0 5
31894: PUSH
31895: LD_VAR 0 1
31899: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31900: LD_VAR 0 1
31904: NOT
31905: PUSH
31906: LD_VAR 0 2
31910: NOT
31911: OR
31912: PUSH
31913: LD_VAR 0 3
31917: NOT
31918: OR
31919: PUSH
31920: LD_VAR 0 2
31924: PUSH
31925: LD_VAR 0 1
31929: GREATER
31930: OR
31931: PUSH
31932: LD_VAR 0 3
31936: PUSH
31937: LD_VAR 0 1
31941: GREATER
31942: OR
31943: IFFALSE 31947
// exit ;
31945: GO 32243
// if direction then
31947: LD_VAR 0 4
31951: IFFALSE 32015
// begin d := 1 ;
31953: LD_ADDR_VAR 0 9
31957: PUSH
31958: LD_INT 1
31960: ST_TO_ADDR
// if i_from > i_to then
31961: LD_VAR 0 2
31965: PUSH
31966: LD_VAR 0 3
31970: GREATER
31971: IFFALSE 31997
// length := ( array - i_from ) + i_to else
31973: LD_ADDR_VAR 0 11
31977: PUSH
31978: LD_VAR 0 1
31982: PUSH
31983: LD_VAR 0 2
31987: MINUS
31988: PUSH
31989: LD_VAR 0 3
31993: PLUS
31994: ST_TO_ADDR
31995: GO 32013
// length := i_to - i_from ;
31997: LD_ADDR_VAR 0 11
32001: PUSH
32002: LD_VAR 0 3
32006: PUSH
32007: LD_VAR 0 2
32011: MINUS
32012: ST_TO_ADDR
// end else
32013: GO 32076
// begin d := - 1 ;
32015: LD_ADDR_VAR 0 9
32019: PUSH
32020: LD_INT 1
32022: NEG
32023: ST_TO_ADDR
// if i_from > i_to then
32024: LD_VAR 0 2
32028: PUSH
32029: LD_VAR 0 3
32033: GREATER
32034: IFFALSE 32054
// length := i_from - i_to else
32036: LD_ADDR_VAR 0 11
32040: PUSH
32041: LD_VAR 0 2
32045: PUSH
32046: LD_VAR 0 3
32050: MINUS
32051: ST_TO_ADDR
32052: GO 32076
// length := ( array - i_to ) + i_from ;
32054: LD_ADDR_VAR 0 11
32058: PUSH
32059: LD_VAR 0 1
32063: PUSH
32064: LD_VAR 0 3
32068: MINUS
32069: PUSH
32070: LD_VAR 0 2
32074: PLUS
32075: ST_TO_ADDR
// end ; if not length then
32076: LD_VAR 0 11
32080: NOT
32081: IFFALSE 32085
// exit ;
32083: GO 32243
// tmp := array ;
32085: LD_ADDR_VAR 0 10
32089: PUSH
32090: LD_VAR 0 1
32094: ST_TO_ADDR
// for i = 1 to length do
32095: LD_ADDR_VAR 0 6
32099: PUSH
32100: DOUBLE
32101: LD_INT 1
32103: DEC
32104: ST_TO_ADDR
32105: LD_VAR 0 11
32109: PUSH
32110: FOR_TO
32111: IFFALSE 32231
// begin for j = 1 to array do
32113: LD_ADDR_VAR 0 7
32117: PUSH
32118: DOUBLE
32119: LD_INT 1
32121: DEC
32122: ST_TO_ADDR
32123: LD_VAR 0 1
32127: PUSH
32128: FOR_TO
32129: IFFALSE 32217
// begin k := j + d ;
32131: LD_ADDR_VAR 0 8
32135: PUSH
32136: LD_VAR 0 7
32140: PUSH
32141: LD_VAR 0 9
32145: PLUS
32146: ST_TO_ADDR
// if k > array then
32147: LD_VAR 0 8
32151: PUSH
32152: LD_VAR 0 1
32156: GREATER
32157: IFFALSE 32167
// k := 1 ;
32159: LD_ADDR_VAR 0 8
32163: PUSH
32164: LD_INT 1
32166: ST_TO_ADDR
// if not k then
32167: LD_VAR 0 8
32171: NOT
32172: IFFALSE 32184
// k := array ;
32174: LD_ADDR_VAR 0 8
32178: PUSH
32179: LD_VAR 0 1
32183: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
32184: LD_ADDR_VAR 0 10
32188: PUSH
32189: LD_VAR 0 10
32193: PPUSH
32194: LD_VAR 0 8
32198: PPUSH
32199: LD_VAR 0 1
32203: PUSH
32204: LD_VAR 0 7
32208: ARRAY
32209: PPUSH
32210: CALL_OW 1
32214: ST_TO_ADDR
// end ;
32215: GO 32128
32217: POP
32218: POP
// array := tmp ;
32219: LD_ADDR_VAR 0 1
32223: PUSH
32224: LD_VAR 0 10
32228: ST_TO_ADDR
// end ;
32229: GO 32110
32231: POP
32232: POP
// result := array ;
32233: LD_ADDR_VAR 0 5
32237: PUSH
32238: LD_VAR 0 1
32242: ST_TO_ADDR
// end ;
32243: LD_VAR 0 5
32247: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
32248: LD_INT 0
32250: PPUSH
32251: PPUSH
// result := 0 ;
32252: LD_ADDR_VAR 0 3
32256: PUSH
32257: LD_INT 0
32259: ST_TO_ADDR
// if not array or not value in array then
32260: LD_VAR 0 1
32264: NOT
32265: PUSH
32266: LD_VAR 0 2
32270: PUSH
32271: LD_VAR 0 1
32275: IN
32276: NOT
32277: OR
32278: IFFALSE 32282
// exit ;
32280: GO 32336
// for i = 1 to array do
32282: LD_ADDR_VAR 0 4
32286: PUSH
32287: DOUBLE
32288: LD_INT 1
32290: DEC
32291: ST_TO_ADDR
32292: LD_VAR 0 1
32296: PUSH
32297: FOR_TO
32298: IFFALSE 32334
// if value = array [ i ] then
32300: LD_VAR 0 2
32304: PUSH
32305: LD_VAR 0 1
32309: PUSH
32310: LD_VAR 0 4
32314: ARRAY
32315: EQUAL
32316: IFFALSE 32332
// begin result := i ;
32318: LD_ADDR_VAR 0 3
32322: PUSH
32323: LD_VAR 0 4
32327: ST_TO_ADDR
// exit ;
32328: POP
32329: POP
32330: GO 32336
// end ;
32332: GO 32297
32334: POP
32335: POP
// end ;
32336: LD_VAR 0 3
32340: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
32341: LD_INT 0
32343: PPUSH
// vc_chassis := chassis ;
32344: LD_ADDR_OWVAR 37
32348: PUSH
32349: LD_VAR 0 1
32353: ST_TO_ADDR
// vc_engine := engine ;
32354: LD_ADDR_OWVAR 39
32358: PUSH
32359: LD_VAR 0 2
32363: ST_TO_ADDR
// vc_control := control ;
32364: LD_ADDR_OWVAR 38
32368: PUSH
32369: LD_VAR 0 3
32373: ST_TO_ADDR
// vc_weapon := weapon ;
32374: LD_ADDR_OWVAR 40
32378: PUSH
32379: LD_VAR 0 4
32383: ST_TO_ADDR
// vc_fuel_battery := fuel ;
32384: LD_ADDR_OWVAR 41
32388: PUSH
32389: LD_VAR 0 5
32393: ST_TO_ADDR
// end ;
32394: LD_VAR 0 6
32398: RET
// export function WantPlant ( unit ) ; var task ; begin
32399: LD_INT 0
32401: PPUSH
32402: PPUSH
// result := false ;
32403: LD_ADDR_VAR 0 2
32407: PUSH
32408: LD_INT 0
32410: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
32411: LD_ADDR_VAR 0 3
32415: PUSH
32416: LD_VAR 0 1
32420: PPUSH
32421: CALL_OW 437
32425: ST_TO_ADDR
// if task then
32426: LD_VAR 0 3
32430: IFFALSE 32458
// if task [ 1 ] [ 1 ] = p then
32432: LD_VAR 0 3
32436: PUSH
32437: LD_INT 1
32439: ARRAY
32440: PUSH
32441: LD_INT 1
32443: ARRAY
32444: PUSH
32445: LD_STRING p
32447: EQUAL
32448: IFFALSE 32458
// result := true ;
32450: LD_ADDR_VAR 0 2
32454: PUSH
32455: LD_INT 1
32457: ST_TO_ADDR
// end ;
32458: LD_VAR 0 2
32462: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
32463: LD_INT 0
32465: PPUSH
32466: PPUSH
32467: PPUSH
32468: PPUSH
// if pos < 1 then
32469: LD_VAR 0 2
32473: PUSH
32474: LD_INT 1
32476: LESS
32477: IFFALSE 32481
// exit ;
32479: GO 32784
// if pos = 1 then
32481: LD_VAR 0 2
32485: PUSH
32486: LD_INT 1
32488: EQUAL
32489: IFFALSE 32522
// result := Replace ( arr , pos [ 1 ] , value ) else
32491: LD_ADDR_VAR 0 4
32495: PUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: LD_VAR 0 2
32505: PUSH
32506: LD_INT 1
32508: ARRAY
32509: PPUSH
32510: LD_VAR 0 3
32514: PPUSH
32515: CALL_OW 1
32519: ST_TO_ADDR
32520: GO 32784
// begin tmp := arr ;
32522: LD_ADDR_VAR 0 6
32526: PUSH
32527: LD_VAR 0 1
32531: ST_TO_ADDR
// s_arr := [ tmp ] ;
32532: LD_ADDR_VAR 0 7
32536: PUSH
32537: LD_VAR 0 6
32541: PUSH
32542: EMPTY
32543: LIST
32544: ST_TO_ADDR
// for i = 1 to pos - 1 do
32545: LD_ADDR_VAR 0 5
32549: PUSH
32550: DOUBLE
32551: LD_INT 1
32553: DEC
32554: ST_TO_ADDR
32555: LD_VAR 0 2
32559: PUSH
32560: LD_INT 1
32562: MINUS
32563: PUSH
32564: FOR_TO
32565: IFFALSE 32610
// begin tmp := tmp [ pos [ i ] ] ;
32567: LD_ADDR_VAR 0 6
32571: PUSH
32572: LD_VAR 0 6
32576: PUSH
32577: LD_VAR 0 2
32581: PUSH
32582: LD_VAR 0 5
32586: ARRAY
32587: ARRAY
32588: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32589: LD_ADDR_VAR 0 7
32593: PUSH
32594: LD_VAR 0 7
32598: PUSH
32599: LD_VAR 0 6
32603: PUSH
32604: EMPTY
32605: LIST
32606: ADD
32607: ST_TO_ADDR
// end ;
32608: GO 32564
32610: POP
32611: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32612: LD_ADDR_VAR 0 6
32616: PUSH
32617: LD_VAR 0 6
32621: PPUSH
32622: LD_VAR 0 2
32626: PUSH
32627: LD_VAR 0 2
32631: ARRAY
32632: PPUSH
32633: LD_VAR 0 3
32637: PPUSH
32638: CALL_OW 1
32642: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32643: LD_ADDR_VAR 0 7
32647: PUSH
32648: LD_VAR 0 7
32652: PPUSH
32653: LD_VAR 0 7
32657: PPUSH
32658: LD_VAR 0 6
32662: PPUSH
32663: CALL_OW 1
32667: ST_TO_ADDR
// for i = s_arr downto 2 do
32668: LD_ADDR_VAR 0 5
32672: PUSH
32673: DOUBLE
32674: LD_VAR 0 7
32678: INC
32679: ST_TO_ADDR
32680: LD_INT 2
32682: PUSH
32683: FOR_DOWNTO
32684: IFFALSE 32768
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32686: LD_ADDR_VAR 0 6
32690: PUSH
32691: LD_VAR 0 7
32695: PUSH
32696: LD_VAR 0 5
32700: PUSH
32701: LD_INT 1
32703: MINUS
32704: ARRAY
32705: PPUSH
32706: LD_VAR 0 2
32710: PUSH
32711: LD_VAR 0 5
32715: PUSH
32716: LD_INT 1
32718: MINUS
32719: ARRAY
32720: PPUSH
32721: LD_VAR 0 7
32725: PUSH
32726: LD_VAR 0 5
32730: ARRAY
32731: PPUSH
32732: CALL_OW 1
32736: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32737: LD_ADDR_VAR 0 7
32741: PUSH
32742: LD_VAR 0 7
32746: PPUSH
32747: LD_VAR 0 5
32751: PUSH
32752: LD_INT 1
32754: MINUS
32755: PPUSH
32756: LD_VAR 0 6
32760: PPUSH
32761: CALL_OW 1
32765: ST_TO_ADDR
// end ;
32766: GO 32683
32768: POP
32769: POP
// result := s_arr [ 1 ] ;
32770: LD_ADDR_VAR 0 4
32774: PUSH
32775: LD_VAR 0 7
32779: PUSH
32780: LD_INT 1
32782: ARRAY
32783: ST_TO_ADDR
// end ; end ;
32784: LD_VAR 0 4
32788: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32789: LD_INT 0
32791: PPUSH
32792: PPUSH
// if not list then
32793: LD_VAR 0 1
32797: NOT
32798: IFFALSE 32802
// exit ;
32800: GO 32893
// i := list [ pos1 ] ;
32802: LD_ADDR_VAR 0 5
32806: PUSH
32807: LD_VAR 0 1
32811: PUSH
32812: LD_VAR 0 2
32816: ARRAY
32817: ST_TO_ADDR
// if not i then
32818: LD_VAR 0 5
32822: NOT
32823: IFFALSE 32827
// exit ;
32825: GO 32893
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32827: LD_ADDR_VAR 0 1
32831: PUSH
32832: LD_VAR 0 1
32836: PPUSH
32837: LD_VAR 0 2
32841: PPUSH
32842: LD_VAR 0 1
32846: PUSH
32847: LD_VAR 0 3
32851: ARRAY
32852: PPUSH
32853: CALL_OW 1
32857: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32858: LD_ADDR_VAR 0 1
32862: PUSH
32863: LD_VAR 0 1
32867: PPUSH
32868: LD_VAR 0 3
32872: PPUSH
32873: LD_VAR 0 5
32877: PPUSH
32878: CALL_OW 1
32882: ST_TO_ADDR
// result := list ;
32883: LD_ADDR_VAR 0 4
32887: PUSH
32888: LD_VAR 0 1
32892: ST_TO_ADDR
// end ;
32893: LD_VAR 0 4
32897: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32898: LD_INT 0
32900: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32901: LD_ADDR_VAR 0 5
32905: PUSH
32906: LD_VAR 0 1
32910: PPUSH
32911: CALL_OW 250
32915: PPUSH
32916: LD_VAR 0 1
32920: PPUSH
32921: CALL_OW 251
32925: PPUSH
32926: LD_VAR 0 2
32930: PPUSH
32931: LD_VAR 0 3
32935: PPUSH
32936: LD_VAR 0 4
32940: PPUSH
32941: CALL 32951 0 5
32945: ST_TO_ADDR
// end ;
32946: LD_VAR 0 5
32950: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32951: LD_INT 0
32953: PPUSH
32954: PPUSH
32955: PPUSH
32956: PPUSH
// if not list then
32957: LD_VAR 0 3
32961: NOT
32962: IFFALSE 32966
// exit ;
32964: GO 33354
// result := [ ] ;
32966: LD_ADDR_VAR 0 6
32970: PUSH
32971: EMPTY
32972: ST_TO_ADDR
// for i in list do
32973: LD_ADDR_VAR 0 7
32977: PUSH
32978: LD_VAR 0 3
32982: PUSH
32983: FOR_IN
32984: IFFALSE 33186
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32986: LD_ADDR_VAR 0 9
32990: PUSH
32991: LD_VAR 0 7
32995: PPUSH
32996: LD_VAR 0 1
33000: PPUSH
33001: LD_VAR 0 2
33005: PPUSH
33006: CALL_OW 297
33010: ST_TO_ADDR
// if not result then
33011: LD_VAR 0 6
33015: NOT
33016: IFFALSE 33042
// result := [ [ i , tmp ] ] else
33018: LD_ADDR_VAR 0 6
33022: PUSH
33023: LD_VAR 0 7
33027: PUSH
33028: LD_VAR 0 9
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: EMPTY
33038: LIST
33039: ST_TO_ADDR
33040: GO 33184
// begin if result [ result ] [ 2 ] < tmp then
33042: LD_VAR 0 6
33046: PUSH
33047: LD_VAR 0 6
33051: ARRAY
33052: PUSH
33053: LD_INT 2
33055: ARRAY
33056: PUSH
33057: LD_VAR 0 9
33061: LESS
33062: IFFALSE 33104
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
33064: LD_ADDR_VAR 0 6
33068: PUSH
33069: LD_VAR 0 6
33073: PPUSH
33074: LD_VAR 0 6
33078: PUSH
33079: LD_INT 1
33081: PLUS
33082: PPUSH
33083: LD_VAR 0 7
33087: PUSH
33088: LD_VAR 0 9
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PPUSH
33097: CALL_OW 2
33101: ST_TO_ADDR
33102: GO 33184
// for j = 1 to result do
33104: LD_ADDR_VAR 0 8
33108: PUSH
33109: DOUBLE
33110: LD_INT 1
33112: DEC
33113: ST_TO_ADDR
33114: LD_VAR 0 6
33118: PUSH
33119: FOR_TO
33120: IFFALSE 33182
// begin if tmp < result [ j ] [ 2 ] then
33122: LD_VAR 0 9
33126: PUSH
33127: LD_VAR 0 6
33131: PUSH
33132: LD_VAR 0 8
33136: ARRAY
33137: PUSH
33138: LD_INT 2
33140: ARRAY
33141: LESS
33142: IFFALSE 33180
// begin result := Insert ( result , j , [ i , tmp ] ) ;
33144: LD_ADDR_VAR 0 6
33148: PUSH
33149: LD_VAR 0 6
33153: PPUSH
33154: LD_VAR 0 8
33158: PPUSH
33159: LD_VAR 0 7
33163: PUSH
33164: LD_VAR 0 9
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PPUSH
33173: CALL_OW 2
33177: ST_TO_ADDR
// break ;
33178: GO 33182
// end ; end ;
33180: GO 33119
33182: POP
33183: POP
// end ; end ;
33184: GO 32983
33186: POP
33187: POP
// if result and not asc then
33188: LD_VAR 0 6
33192: PUSH
33193: LD_VAR 0 4
33197: NOT
33198: AND
33199: IFFALSE 33274
// begin tmp := result ;
33201: LD_ADDR_VAR 0 9
33205: PUSH
33206: LD_VAR 0 6
33210: ST_TO_ADDR
// for i = tmp downto 1 do
33211: LD_ADDR_VAR 0 7
33215: PUSH
33216: DOUBLE
33217: LD_VAR 0 9
33221: INC
33222: ST_TO_ADDR
33223: LD_INT 1
33225: PUSH
33226: FOR_DOWNTO
33227: IFFALSE 33272
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
33229: LD_ADDR_VAR 0 6
33233: PUSH
33234: LD_VAR 0 6
33238: PPUSH
33239: LD_VAR 0 9
33243: PUSH
33244: LD_VAR 0 7
33248: MINUS
33249: PUSH
33250: LD_INT 1
33252: PLUS
33253: PPUSH
33254: LD_VAR 0 9
33258: PUSH
33259: LD_VAR 0 7
33263: ARRAY
33264: PPUSH
33265: CALL_OW 1
33269: ST_TO_ADDR
33270: GO 33226
33272: POP
33273: POP
// end ; tmp := [ ] ;
33274: LD_ADDR_VAR 0 9
33278: PUSH
33279: EMPTY
33280: ST_TO_ADDR
// if mode then
33281: LD_VAR 0 5
33285: IFFALSE 33354
// begin for i = 1 to result do
33287: LD_ADDR_VAR 0 7
33291: PUSH
33292: DOUBLE
33293: LD_INT 1
33295: DEC
33296: ST_TO_ADDR
33297: LD_VAR 0 6
33301: PUSH
33302: FOR_TO
33303: IFFALSE 33342
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
33305: LD_ADDR_VAR 0 9
33309: PUSH
33310: LD_VAR 0 9
33314: PPUSH
33315: LD_VAR 0 7
33319: PPUSH
33320: LD_VAR 0 6
33324: PUSH
33325: LD_VAR 0 7
33329: ARRAY
33330: PUSH
33331: LD_INT 1
33333: ARRAY
33334: PPUSH
33335: CALL_OW 1
33339: ST_TO_ADDR
33340: GO 33302
33342: POP
33343: POP
// result := tmp ;
33344: LD_ADDR_VAR 0 6
33348: PUSH
33349: LD_VAR 0 9
33353: ST_TO_ADDR
// end ; end ;
33354: LD_VAR 0 6
33358: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
33359: LD_INT 0
33361: PPUSH
33362: PPUSH
33363: PPUSH
33364: PPUSH
33365: PPUSH
33366: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33367: LD_ADDR_VAR 0 5
33371: PUSH
33372: LD_INT 0
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 0
33380: PUSH
33381: EMPTY
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
// if not x or not y then
33389: LD_VAR 0 2
33393: NOT
33394: PUSH
33395: LD_VAR 0 3
33399: NOT
33400: OR
33401: IFFALSE 33405
// exit ;
33403: GO 35055
// if not range then
33405: LD_VAR 0 4
33409: NOT
33410: IFFALSE 33420
// range := 10 ;
33412: LD_ADDR_VAR 0 4
33416: PUSH
33417: LD_INT 10
33419: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33420: LD_ADDR_VAR 0 8
33424: PUSH
33425: LD_INT 81
33427: PUSH
33428: LD_VAR 0 1
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 92
33439: PUSH
33440: LD_VAR 0 2
33444: PUSH
33445: LD_VAR 0 3
33449: PUSH
33450: LD_VAR 0 4
33454: PUSH
33455: EMPTY
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 3
33463: PUSH
33464: LD_INT 21
33466: PUSH
33467: LD_INT 3
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: PUSH
33478: EMPTY
33479: LIST
33480: LIST
33481: LIST
33482: PPUSH
33483: CALL_OW 69
33487: ST_TO_ADDR
// if not tmp then
33488: LD_VAR 0 8
33492: NOT
33493: IFFALSE 33497
// exit ;
33495: GO 35055
// for i in tmp do
33497: LD_ADDR_VAR 0 6
33501: PUSH
33502: LD_VAR 0 8
33506: PUSH
33507: FOR_IN
33508: IFFALSE 35030
// begin points := [ 0 , 0 , 0 ] ;
33510: LD_ADDR_VAR 0 9
33514: PUSH
33515: LD_INT 0
33517: PUSH
33518: LD_INT 0
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: LIST
33528: ST_TO_ADDR
// bpoints := 1 ;
33529: LD_ADDR_VAR 0 10
33533: PUSH
33534: LD_INT 1
33536: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33537: LD_VAR 0 6
33541: PPUSH
33542: CALL_OW 247
33546: PUSH
33547: LD_INT 1
33549: DOUBLE
33550: EQUAL
33551: IFTRUE 33555
33553: GO 34133
33555: POP
// begin if GetClass ( i ) = 1 then
33556: LD_VAR 0 6
33560: PPUSH
33561: CALL_OW 257
33565: PUSH
33566: LD_INT 1
33568: EQUAL
33569: IFFALSE 33590
// points := [ 10 , 5 , 3 ] ;
33571: LD_ADDR_VAR 0 9
33575: PUSH
33576: LD_INT 10
33578: PUSH
33579: LD_INT 5
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: LIST
33589: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33590: LD_VAR 0 6
33594: PPUSH
33595: CALL_OW 257
33599: PUSH
33600: LD_INT 2
33602: PUSH
33603: LD_INT 3
33605: PUSH
33606: LD_INT 4
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: IN
33614: IFFALSE 33635
// points := [ 3 , 2 , 1 ] ;
33616: LD_ADDR_VAR 0 9
33620: PUSH
33621: LD_INT 3
33623: PUSH
33624: LD_INT 2
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: LIST
33634: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33635: LD_VAR 0 6
33639: PPUSH
33640: CALL_OW 257
33644: PUSH
33645: LD_INT 5
33647: EQUAL
33648: IFFALSE 33669
// points := [ 130 , 5 , 2 ] ;
33650: LD_ADDR_VAR 0 9
33654: PUSH
33655: LD_INT 130
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: LD_INT 2
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33669: LD_VAR 0 6
33673: PPUSH
33674: CALL_OW 257
33678: PUSH
33679: LD_INT 8
33681: EQUAL
33682: IFFALSE 33703
// points := [ 35 , 35 , 30 ] ;
33684: LD_ADDR_VAR 0 9
33688: PUSH
33689: LD_INT 35
33691: PUSH
33692: LD_INT 35
33694: PUSH
33695: LD_INT 30
33697: PUSH
33698: EMPTY
33699: LIST
33700: LIST
33701: LIST
33702: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33703: LD_VAR 0 6
33707: PPUSH
33708: CALL_OW 257
33712: PUSH
33713: LD_INT 9
33715: EQUAL
33716: IFFALSE 33737
// points := [ 20 , 55 , 40 ] ;
33718: LD_ADDR_VAR 0 9
33722: PUSH
33723: LD_INT 20
33725: PUSH
33726: LD_INT 55
33728: PUSH
33729: LD_INT 40
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: LIST
33736: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33737: LD_VAR 0 6
33741: PPUSH
33742: CALL_OW 257
33746: PUSH
33747: LD_INT 12
33749: PUSH
33750: LD_INT 16
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: IN
33757: IFFALSE 33778
// points := [ 5 , 3 , 2 ] ;
33759: LD_ADDR_VAR 0 9
33763: PUSH
33764: LD_INT 5
33766: PUSH
33767: LD_INT 3
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33778: LD_VAR 0 6
33782: PPUSH
33783: CALL_OW 257
33787: PUSH
33788: LD_INT 17
33790: EQUAL
33791: IFFALSE 33812
// points := [ 100 , 50 , 75 ] ;
33793: LD_ADDR_VAR 0 9
33797: PUSH
33798: LD_INT 100
33800: PUSH
33801: LD_INT 50
33803: PUSH
33804: LD_INT 75
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: LIST
33811: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33812: LD_VAR 0 6
33816: PPUSH
33817: CALL_OW 257
33821: PUSH
33822: LD_INT 15
33824: EQUAL
33825: IFFALSE 33846
// points := [ 10 , 5 , 3 ] ;
33827: LD_ADDR_VAR 0 9
33831: PUSH
33832: LD_INT 10
33834: PUSH
33835: LD_INT 5
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: LIST
33845: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33846: LD_VAR 0 6
33850: PPUSH
33851: CALL_OW 257
33855: PUSH
33856: LD_INT 14
33858: EQUAL
33859: IFFALSE 33880
// points := [ 10 , 0 , 0 ] ;
33861: LD_ADDR_VAR 0 9
33865: PUSH
33866: LD_INT 10
33868: PUSH
33869: LD_INT 0
33871: PUSH
33872: LD_INT 0
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: LIST
33879: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33880: LD_VAR 0 6
33884: PPUSH
33885: CALL_OW 257
33889: PUSH
33890: LD_INT 11
33892: EQUAL
33893: IFFALSE 33914
// points := [ 30 , 10 , 5 ] ;
33895: LD_ADDR_VAR 0 9
33899: PUSH
33900: LD_INT 30
33902: PUSH
33903: LD_INT 10
33905: PUSH
33906: LD_INT 5
33908: PUSH
33909: EMPTY
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33914: LD_VAR 0 1
33918: PPUSH
33919: LD_INT 5
33921: PPUSH
33922: CALL_OW 321
33926: PUSH
33927: LD_INT 2
33929: EQUAL
33930: IFFALSE 33947
// bpoints := bpoints * 1.8 ;
33932: LD_ADDR_VAR 0 10
33936: PUSH
33937: LD_VAR 0 10
33941: PUSH
33942: LD_REAL  1.80000000000000E+0000
33945: MUL
33946: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33947: LD_VAR 0 6
33951: PPUSH
33952: CALL_OW 257
33956: PUSH
33957: LD_INT 1
33959: PUSH
33960: LD_INT 2
33962: PUSH
33963: LD_INT 3
33965: PUSH
33966: LD_INT 4
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: IN
33975: PUSH
33976: LD_VAR 0 1
33980: PPUSH
33981: LD_INT 51
33983: PPUSH
33984: CALL_OW 321
33988: PUSH
33989: LD_INT 2
33991: EQUAL
33992: AND
33993: IFFALSE 34010
// bpoints := bpoints * 1.2 ;
33995: LD_ADDR_VAR 0 10
33999: PUSH
34000: LD_VAR 0 10
34004: PUSH
34005: LD_REAL  1.20000000000000E+0000
34008: MUL
34009: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
34010: LD_VAR 0 6
34014: PPUSH
34015: CALL_OW 257
34019: PUSH
34020: LD_INT 5
34022: PUSH
34023: LD_INT 7
34025: PUSH
34026: LD_INT 9
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: LIST
34033: IN
34034: PUSH
34035: LD_VAR 0 1
34039: PPUSH
34040: LD_INT 52
34042: PPUSH
34043: CALL_OW 321
34047: PUSH
34048: LD_INT 2
34050: EQUAL
34051: AND
34052: IFFALSE 34069
// bpoints := bpoints * 1.5 ;
34054: LD_ADDR_VAR 0 10
34058: PUSH
34059: LD_VAR 0 10
34063: PUSH
34064: LD_REAL  1.50000000000000E+0000
34067: MUL
34068: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
34069: LD_VAR 0 1
34073: PPUSH
34074: LD_INT 66
34076: PPUSH
34077: CALL_OW 321
34081: PUSH
34082: LD_INT 2
34084: EQUAL
34085: IFFALSE 34102
// bpoints := bpoints * 1.1 ;
34087: LD_ADDR_VAR 0 10
34091: PUSH
34092: LD_VAR 0 10
34096: PUSH
34097: LD_REAL  1.10000000000000E+0000
34100: MUL
34101: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
34102: LD_ADDR_VAR 0 10
34106: PUSH
34107: LD_VAR 0 10
34111: PUSH
34112: LD_VAR 0 6
34116: PPUSH
34117: LD_INT 1
34119: PPUSH
34120: CALL_OW 259
34124: PUSH
34125: LD_REAL  1.15000000000000E+0000
34128: MUL
34129: MUL
34130: ST_TO_ADDR
// end ; unit_vehicle :
34131: GO 34959
34133: LD_INT 2
34135: DOUBLE
34136: EQUAL
34137: IFTRUE 34141
34139: GO 34947
34141: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
34142: LD_VAR 0 6
34146: PPUSH
34147: CALL_OW 264
34151: PUSH
34152: LD_INT 2
34154: PUSH
34155: LD_INT 42
34157: PUSH
34158: LD_INT 24
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: IN
34166: IFFALSE 34187
// points := [ 25 , 5 , 3 ] ;
34168: LD_ADDR_VAR 0 9
34172: PUSH
34173: LD_INT 25
34175: PUSH
34176: LD_INT 5
34178: PUSH
34179: LD_INT 3
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 264
34196: PUSH
34197: LD_INT 4
34199: PUSH
34200: LD_INT 43
34202: PUSH
34203: LD_INT 25
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: LIST
34210: IN
34211: IFFALSE 34232
// points := [ 40 , 15 , 5 ] ;
34213: LD_ADDR_VAR 0 9
34217: PUSH
34218: LD_INT 40
34220: PUSH
34221: LD_INT 15
34223: PUSH
34224: LD_INT 5
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
34232: LD_VAR 0 6
34236: PPUSH
34237: CALL_OW 264
34241: PUSH
34242: LD_INT 3
34244: PUSH
34245: LD_INT 23
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: IN
34252: IFFALSE 34273
// points := [ 7 , 25 , 8 ] ;
34254: LD_ADDR_VAR 0 9
34258: PUSH
34259: LD_INT 7
34261: PUSH
34262: LD_INT 25
34264: PUSH
34265: LD_INT 8
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
34273: LD_VAR 0 6
34277: PPUSH
34278: CALL_OW 264
34282: PUSH
34283: LD_INT 5
34285: PUSH
34286: LD_INT 27
34288: PUSH
34289: LD_INT 44
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: LIST
34296: IN
34297: IFFALSE 34318
// points := [ 14 , 50 , 16 ] ;
34299: LD_ADDR_VAR 0 9
34303: PUSH
34304: LD_INT 14
34306: PUSH
34307: LD_INT 50
34309: PUSH
34310: LD_INT 16
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
34318: LD_VAR 0 6
34322: PPUSH
34323: CALL_OW 264
34327: PUSH
34328: LD_INT 6
34330: PUSH
34331: LD_INT 46
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: IN
34338: IFFALSE 34359
// points := [ 32 , 120 , 70 ] ;
34340: LD_ADDR_VAR 0 9
34344: PUSH
34345: LD_INT 32
34347: PUSH
34348: LD_INT 120
34350: PUSH
34351: LD_INT 70
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
34359: LD_VAR 0 6
34363: PPUSH
34364: CALL_OW 264
34368: PUSH
34369: LD_INT 7
34371: PUSH
34372: LD_INT 28
34374: PUSH
34375: LD_INT 45
34377: PUSH
34378: LD_INT 92
34380: PUSH
34381: EMPTY
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: IN
34387: IFFALSE 34408
// points := [ 35 , 20 , 45 ] ;
34389: LD_ADDR_VAR 0 9
34393: PUSH
34394: LD_INT 35
34396: PUSH
34397: LD_INT 20
34399: PUSH
34400: LD_INT 45
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34408: LD_VAR 0 6
34412: PPUSH
34413: CALL_OW 264
34417: PUSH
34418: LD_INT 47
34420: PUSH
34421: EMPTY
34422: LIST
34423: IN
34424: IFFALSE 34445
// points := [ 67 , 45 , 75 ] ;
34426: LD_ADDR_VAR 0 9
34430: PUSH
34431: LD_INT 67
34433: PUSH
34434: LD_INT 45
34436: PUSH
34437: LD_INT 75
34439: PUSH
34440: EMPTY
34441: LIST
34442: LIST
34443: LIST
34444: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34445: LD_VAR 0 6
34449: PPUSH
34450: CALL_OW 264
34454: PUSH
34455: LD_INT 26
34457: PUSH
34458: EMPTY
34459: LIST
34460: IN
34461: IFFALSE 34482
// points := [ 120 , 30 , 80 ] ;
34463: LD_ADDR_VAR 0 9
34467: PUSH
34468: LD_INT 120
34470: PUSH
34471: LD_INT 30
34473: PUSH
34474: LD_INT 80
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: LIST
34481: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34482: LD_VAR 0 6
34486: PPUSH
34487: CALL_OW 264
34491: PUSH
34492: LD_INT 22
34494: PUSH
34495: EMPTY
34496: LIST
34497: IN
34498: IFFALSE 34519
// points := [ 40 , 1 , 1 ] ;
34500: LD_ADDR_VAR 0 9
34504: PUSH
34505: LD_INT 40
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 1
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34519: LD_VAR 0 6
34523: PPUSH
34524: CALL_OW 264
34528: PUSH
34529: LD_INT 29
34531: PUSH
34532: EMPTY
34533: LIST
34534: IN
34535: IFFALSE 34556
// points := [ 70 , 200 , 400 ] ;
34537: LD_ADDR_VAR 0 9
34541: PUSH
34542: LD_INT 70
34544: PUSH
34545: LD_INT 200
34547: PUSH
34548: LD_INT 400
34550: PUSH
34551: EMPTY
34552: LIST
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34556: LD_VAR 0 6
34560: PPUSH
34561: CALL_OW 264
34565: PUSH
34566: LD_INT 14
34568: PUSH
34569: LD_INT 53
34571: PUSH
34572: EMPTY
34573: LIST
34574: LIST
34575: IN
34576: IFFALSE 34597
// points := [ 40 , 10 , 20 ] ;
34578: LD_ADDR_VAR 0 9
34582: PUSH
34583: LD_INT 40
34585: PUSH
34586: LD_INT 10
34588: PUSH
34589: LD_INT 20
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34597: LD_VAR 0 6
34601: PPUSH
34602: CALL_OW 264
34606: PUSH
34607: LD_INT 9
34609: PUSH
34610: EMPTY
34611: LIST
34612: IN
34613: IFFALSE 34634
// points := [ 5 , 70 , 20 ] ;
34615: LD_ADDR_VAR 0 9
34619: PUSH
34620: LD_INT 5
34622: PUSH
34623: LD_INT 70
34625: PUSH
34626: LD_INT 20
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34634: LD_VAR 0 6
34638: PPUSH
34639: CALL_OW 264
34643: PUSH
34644: LD_INT 10
34646: PUSH
34647: EMPTY
34648: LIST
34649: IN
34650: IFFALSE 34671
// points := [ 35 , 110 , 70 ] ;
34652: LD_ADDR_VAR 0 9
34656: PUSH
34657: LD_INT 35
34659: PUSH
34660: LD_INT 110
34662: PUSH
34663: LD_INT 70
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34671: LD_VAR 0 6
34675: PPUSH
34676: CALL_OW 265
34680: PUSH
34681: LD_INT 25
34683: EQUAL
34684: IFFALSE 34705
// points := [ 80 , 65 , 100 ] ;
34686: LD_ADDR_VAR 0 9
34690: PUSH
34691: LD_INT 80
34693: PUSH
34694: LD_INT 65
34696: PUSH
34697: LD_INT 100
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34705: LD_VAR 0 6
34709: PPUSH
34710: CALL_OW 263
34714: PUSH
34715: LD_INT 1
34717: EQUAL
34718: IFFALSE 34753
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34720: LD_ADDR_VAR 0 10
34724: PUSH
34725: LD_VAR 0 10
34729: PUSH
34730: LD_VAR 0 6
34734: PPUSH
34735: CALL_OW 311
34739: PPUSH
34740: LD_INT 3
34742: PPUSH
34743: CALL_OW 259
34747: PUSH
34748: LD_INT 4
34750: MUL
34751: MUL
34752: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34753: LD_VAR 0 6
34757: PPUSH
34758: CALL_OW 263
34762: PUSH
34763: LD_INT 2
34765: EQUAL
34766: IFFALSE 34817
// begin j := IsControledBy ( i ) ;
34768: LD_ADDR_VAR 0 7
34772: PUSH
34773: LD_VAR 0 6
34777: PPUSH
34778: CALL_OW 312
34782: ST_TO_ADDR
// if j then
34783: LD_VAR 0 7
34787: IFFALSE 34817
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34789: LD_ADDR_VAR 0 10
34793: PUSH
34794: LD_VAR 0 10
34798: PUSH
34799: LD_VAR 0 7
34803: PPUSH
34804: LD_INT 3
34806: PPUSH
34807: CALL_OW 259
34811: PUSH
34812: LD_INT 3
34814: MUL
34815: MUL
34816: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34817: LD_VAR 0 6
34821: PPUSH
34822: CALL_OW 264
34826: PUSH
34827: LD_INT 5
34829: PUSH
34830: LD_INT 6
34832: PUSH
34833: LD_INT 46
34835: PUSH
34836: LD_INT 44
34838: PUSH
34839: LD_INT 47
34841: PUSH
34842: LD_INT 45
34844: PUSH
34845: LD_INT 28
34847: PUSH
34848: LD_INT 7
34850: PUSH
34851: LD_INT 27
34853: PUSH
34854: LD_INT 29
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: IN
34869: PUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: LD_INT 52
34877: PPUSH
34878: CALL_OW 321
34882: PUSH
34883: LD_INT 2
34885: EQUAL
34886: AND
34887: IFFALSE 34904
// bpoints := bpoints * 1.2 ;
34889: LD_ADDR_VAR 0 10
34893: PUSH
34894: LD_VAR 0 10
34898: PUSH
34899: LD_REAL  1.20000000000000E+0000
34902: MUL
34903: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34904: LD_VAR 0 6
34908: PPUSH
34909: CALL_OW 264
34913: PUSH
34914: LD_INT 6
34916: PUSH
34917: LD_INT 46
34919: PUSH
34920: LD_INT 47
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: IN
34928: IFFALSE 34945
// bpoints := bpoints * 1.2 ;
34930: LD_ADDR_VAR 0 10
34934: PUSH
34935: LD_VAR 0 10
34939: PUSH
34940: LD_REAL  1.20000000000000E+0000
34943: MUL
34944: ST_TO_ADDR
// end ; unit_building :
34945: GO 34959
34947: LD_INT 3
34949: DOUBLE
34950: EQUAL
34951: IFTRUE 34955
34953: GO 34958
34955: POP
// ; end ;
34956: GO 34959
34958: POP
// for j = 1 to 3 do
34959: LD_ADDR_VAR 0 7
34963: PUSH
34964: DOUBLE
34965: LD_INT 1
34967: DEC
34968: ST_TO_ADDR
34969: LD_INT 3
34971: PUSH
34972: FOR_TO
34973: IFFALSE 35026
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34975: LD_ADDR_VAR 0 5
34979: PUSH
34980: LD_VAR 0 5
34984: PPUSH
34985: LD_VAR 0 7
34989: PPUSH
34990: LD_VAR 0 5
34994: PUSH
34995: LD_VAR 0 7
34999: ARRAY
35000: PUSH
35001: LD_VAR 0 9
35005: PUSH
35006: LD_VAR 0 7
35010: ARRAY
35011: PUSH
35012: LD_VAR 0 10
35016: MUL
35017: PLUS
35018: PPUSH
35019: CALL_OW 1
35023: ST_TO_ADDR
35024: GO 34972
35026: POP
35027: POP
// end ;
35028: GO 33507
35030: POP
35031: POP
// result := Replace ( result , 4 , tmp ) ;
35032: LD_ADDR_VAR 0 5
35036: PUSH
35037: LD_VAR 0 5
35041: PPUSH
35042: LD_INT 4
35044: PPUSH
35045: LD_VAR 0 8
35049: PPUSH
35050: CALL_OW 1
35054: ST_TO_ADDR
// end ;
35055: LD_VAR 0 5
35059: RET
// export function DangerAtRange ( unit , range ) ; begin
35060: LD_INT 0
35062: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
35063: LD_ADDR_VAR 0 3
35067: PUSH
35068: LD_VAR 0 1
35072: PPUSH
35073: CALL_OW 255
35077: PPUSH
35078: LD_VAR 0 1
35082: PPUSH
35083: CALL_OW 250
35087: PPUSH
35088: LD_VAR 0 1
35092: PPUSH
35093: CALL_OW 251
35097: PPUSH
35098: LD_VAR 0 2
35102: PPUSH
35103: CALL 33359 0 4
35107: ST_TO_ADDR
// end ;
35108: LD_VAR 0 3
35112: RET
// export function DangerInArea ( side , area ) ; begin
35113: LD_INT 0
35115: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: LD_VAR 0 2
35125: PPUSH
35126: LD_INT 81
35128: PUSH
35129: LD_VAR 0 1
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: PPUSH
35138: CALL_OW 70
35142: ST_TO_ADDR
// end ;
35143: LD_VAR 0 3
35147: RET
// export function IsExtension ( b ) ; begin
35148: LD_INT 0
35150: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
35151: LD_ADDR_VAR 0 2
35155: PUSH
35156: LD_VAR 0 1
35160: PUSH
35161: LD_INT 23
35163: PUSH
35164: LD_INT 20
35166: PUSH
35167: LD_INT 22
35169: PUSH
35170: LD_INT 17
35172: PUSH
35173: LD_INT 24
35175: PUSH
35176: LD_INT 21
35178: PUSH
35179: LD_INT 19
35181: PUSH
35182: LD_INT 16
35184: PUSH
35185: LD_INT 25
35187: PUSH
35188: LD_INT 18
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: IN
35203: ST_TO_ADDR
// end ;
35204: LD_VAR 0 2
35208: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
35209: LD_INT 0
35211: PPUSH
35212: PPUSH
35213: PPUSH
// result := [ ] ;
35214: LD_ADDR_VAR 0 4
35218: PUSH
35219: EMPTY
35220: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
35221: LD_ADDR_VAR 0 5
35225: PUSH
35226: LD_VAR 0 2
35230: PPUSH
35231: LD_INT 21
35233: PUSH
35234: LD_INT 3
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PPUSH
35241: CALL_OW 70
35245: ST_TO_ADDR
// if not tmp then
35246: LD_VAR 0 5
35250: NOT
35251: IFFALSE 35255
// exit ;
35253: GO 35319
// if checkLink then
35255: LD_VAR 0 3
35259: IFFALSE 35309
// begin for i in tmp do
35261: LD_ADDR_VAR 0 6
35265: PUSH
35266: LD_VAR 0 5
35270: PUSH
35271: FOR_IN
35272: IFFALSE 35307
// if GetBase ( i ) <> base then
35274: LD_VAR 0 6
35278: PPUSH
35279: CALL_OW 274
35283: PUSH
35284: LD_VAR 0 1
35288: NONEQUAL
35289: IFFALSE 35305
// ComLinkToBase ( base , i ) ;
35291: LD_VAR 0 1
35295: PPUSH
35296: LD_VAR 0 6
35300: PPUSH
35301: CALL_OW 169
35305: GO 35271
35307: POP
35308: POP
// end ; result := tmp ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_VAR 0 5
35318: ST_TO_ADDR
// end ;
35319: LD_VAR 0 4
35323: RET
// export function ComComplete ( units , b ) ; var i ; begin
35324: LD_INT 0
35326: PPUSH
35327: PPUSH
// if not units then
35328: LD_VAR 0 1
35332: NOT
35333: IFFALSE 35337
// exit ;
35335: GO 35427
// for i in units do
35337: LD_ADDR_VAR 0 4
35341: PUSH
35342: LD_VAR 0 1
35346: PUSH
35347: FOR_IN
35348: IFFALSE 35425
// if BuildingStatus ( b ) = bs_build then
35350: LD_VAR 0 2
35354: PPUSH
35355: CALL_OW 461
35359: PUSH
35360: LD_INT 1
35362: EQUAL
35363: IFFALSE 35423
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35365: LD_VAR 0 4
35369: PPUSH
35370: LD_STRING h
35372: PUSH
35373: LD_VAR 0 2
35377: PPUSH
35378: CALL_OW 250
35382: PUSH
35383: LD_VAR 0 2
35387: PPUSH
35388: CALL_OW 251
35392: PUSH
35393: LD_VAR 0 2
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: PPUSH
35419: CALL_OW 446
35423: GO 35347
35425: POP
35426: POP
// end ;
35427: LD_VAR 0 3
35431: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35432: LD_INT 0
35434: PPUSH
35435: PPUSH
35436: PPUSH
35437: PPUSH
35438: PPUSH
35439: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35440: LD_VAR 0 1
35444: NOT
35445: PUSH
35446: LD_VAR 0 1
35450: PPUSH
35451: CALL_OW 263
35455: PUSH
35456: LD_INT 2
35458: NONEQUAL
35459: OR
35460: IFFALSE 35464
// exit ;
35462: GO 35780
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35464: LD_ADDR_VAR 0 6
35468: PUSH
35469: LD_INT 22
35471: PUSH
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 255
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: LD_INT 30
35491: PUSH
35492: LD_INT 36
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 34
35501: PUSH
35502: LD_INT 31
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: LIST
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PPUSH
35518: CALL_OW 69
35522: ST_TO_ADDR
// if not tmp then
35523: LD_VAR 0 6
35527: NOT
35528: IFFALSE 35532
// exit ;
35530: GO 35780
// result := [ ] ;
35532: LD_ADDR_VAR 0 2
35536: PUSH
35537: EMPTY
35538: ST_TO_ADDR
// for i in tmp do
35539: LD_ADDR_VAR 0 3
35543: PUSH
35544: LD_VAR 0 6
35548: PUSH
35549: FOR_IN
35550: IFFALSE 35621
// begin t := UnitsInside ( i ) ;
35552: LD_ADDR_VAR 0 4
35556: PUSH
35557: LD_VAR 0 3
35561: PPUSH
35562: CALL_OW 313
35566: ST_TO_ADDR
// if t then
35567: LD_VAR 0 4
35571: IFFALSE 35619
// for j in t do
35573: LD_ADDR_VAR 0 7
35577: PUSH
35578: LD_VAR 0 4
35582: PUSH
35583: FOR_IN
35584: IFFALSE 35617
// result := Replace ( result , result + 1 , j ) ;
35586: LD_ADDR_VAR 0 2
35590: PUSH
35591: LD_VAR 0 2
35595: PPUSH
35596: LD_VAR 0 2
35600: PUSH
35601: LD_INT 1
35603: PLUS
35604: PPUSH
35605: LD_VAR 0 7
35609: PPUSH
35610: CALL_OW 1
35614: ST_TO_ADDR
35615: GO 35583
35617: POP
35618: POP
// end ;
35619: GO 35549
35621: POP
35622: POP
// if not result then
35623: LD_VAR 0 2
35627: NOT
35628: IFFALSE 35632
// exit ;
35630: GO 35780
// mech := result [ 1 ] ;
35632: LD_ADDR_VAR 0 5
35636: PUSH
35637: LD_VAR 0 2
35641: PUSH
35642: LD_INT 1
35644: ARRAY
35645: ST_TO_ADDR
// if result > 1 then
35646: LD_VAR 0 2
35650: PUSH
35651: LD_INT 1
35653: GREATER
35654: IFFALSE 35766
// begin for i = 2 to result do
35656: LD_ADDR_VAR 0 3
35660: PUSH
35661: DOUBLE
35662: LD_INT 2
35664: DEC
35665: ST_TO_ADDR
35666: LD_VAR 0 2
35670: PUSH
35671: FOR_TO
35672: IFFALSE 35764
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35674: LD_ADDR_VAR 0 4
35678: PUSH
35679: LD_VAR 0 2
35683: PUSH
35684: LD_VAR 0 3
35688: ARRAY
35689: PPUSH
35690: LD_INT 3
35692: PPUSH
35693: CALL_OW 259
35697: PUSH
35698: LD_VAR 0 2
35702: PUSH
35703: LD_VAR 0 3
35707: ARRAY
35708: PPUSH
35709: CALL_OW 432
35713: MINUS
35714: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35715: LD_VAR 0 4
35719: PUSH
35720: LD_VAR 0 5
35724: PPUSH
35725: LD_INT 3
35727: PPUSH
35728: CALL_OW 259
35732: PUSH
35733: LD_VAR 0 5
35737: PPUSH
35738: CALL_OW 432
35742: MINUS
35743: GREATEREQUAL
35744: IFFALSE 35762
// mech := result [ i ] ;
35746: LD_ADDR_VAR 0 5
35750: PUSH
35751: LD_VAR 0 2
35755: PUSH
35756: LD_VAR 0 3
35760: ARRAY
35761: ST_TO_ADDR
// end ;
35762: GO 35671
35764: POP
35765: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35766: LD_VAR 0 1
35770: PPUSH
35771: LD_VAR 0 5
35775: PPUSH
35776: CALL_OW 135
// end ;
35780: LD_VAR 0 2
35784: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35785: LD_INT 0
35787: PPUSH
35788: PPUSH
35789: PPUSH
35790: PPUSH
35791: PPUSH
35792: PPUSH
35793: PPUSH
35794: PPUSH
35795: PPUSH
35796: PPUSH
35797: PPUSH
35798: PPUSH
35799: PPUSH
// result := [ ] ;
35800: LD_ADDR_VAR 0 7
35804: PUSH
35805: EMPTY
35806: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35807: LD_VAR 0 1
35811: PPUSH
35812: CALL_OW 266
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 1
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: IN
35827: NOT
35828: IFFALSE 35832
// exit ;
35830: GO 37466
// if name then
35832: LD_VAR 0 3
35836: IFFALSE 35852
// SetBName ( base_dep , name ) ;
35838: LD_VAR 0 1
35842: PPUSH
35843: LD_VAR 0 3
35847: PPUSH
35848: CALL_OW 500
// base := GetBase ( base_dep ) ;
35852: LD_ADDR_VAR 0 15
35856: PUSH
35857: LD_VAR 0 1
35861: PPUSH
35862: CALL_OW 274
35866: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35867: LD_ADDR_VAR 0 16
35871: PUSH
35872: LD_VAR 0 1
35876: PPUSH
35877: CALL_OW 255
35881: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35882: LD_ADDR_VAR 0 17
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 248
35896: ST_TO_ADDR
// if sources then
35897: LD_VAR 0 5
35901: IFFALSE 35948
// for i = 1 to 3 do
35903: LD_ADDR_VAR 0 8
35907: PUSH
35908: DOUBLE
35909: LD_INT 1
35911: DEC
35912: ST_TO_ADDR
35913: LD_INT 3
35915: PUSH
35916: FOR_TO
35917: IFFALSE 35946
// AddResourceType ( base , i , sources [ i ] ) ;
35919: LD_VAR 0 15
35923: PPUSH
35924: LD_VAR 0 8
35928: PPUSH
35929: LD_VAR 0 5
35933: PUSH
35934: LD_VAR 0 8
35938: ARRAY
35939: PPUSH
35940: CALL_OW 276
35944: GO 35916
35946: POP
35947: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35948: LD_ADDR_VAR 0 18
35952: PUSH
35953: LD_VAR 0 15
35957: PPUSH
35958: LD_VAR 0 2
35962: PPUSH
35963: LD_INT 1
35965: PPUSH
35966: CALL 35209 0 3
35970: ST_TO_ADDR
// InitHc ;
35971: CALL_OW 19
// InitUc ;
35975: CALL_OW 18
// uc_side := side ;
35979: LD_ADDR_OWVAR 20
35983: PUSH
35984: LD_VAR 0 16
35988: ST_TO_ADDR
// uc_nation := nation ;
35989: LD_ADDR_OWVAR 21
35993: PUSH
35994: LD_VAR 0 17
35998: ST_TO_ADDR
// if buildings then
35999: LD_VAR 0 18
36003: IFFALSE 37325
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
36005: LD_ADDR_VAR 0 19
36009: PUSH
36010: LD_VAR 0 18
36014: PPUSH
36015: LD_INT 2
36017: PUSH
36018: LD_INT 30
36020: PUSH
36021: LD_INT 29
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: PUSH
36028: LD_INT 30
36030: PUSH
36031: LD_INT 30
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: PPUSH
36043: CALL_OW 72
36047: ST_TO_ADDR
// if tmp then
36048: LD_VAR 0 19
36052: IFFALSE 36100
// for i in tmp do
36054: LD_ADDR_VAR 0 8
36058: PUSH
36059: LD_VAR 0 19
36063: PUSH
36064: FOR_IN
36065: IFFALSE 36098
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
36067: LD_VAR 0 8
36071: PPUSH
36072: CALL_OW 250
36076: PPUSH
36077: LD_VAR 0 8
36081: PPUSH
36082: CALL_OW 251
36086: PPUSH
36087: LD_VAR 0 16
36091: PPUSH
36092: CALL_OW 441
36096: GO 36064
36098: POP
36099: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
36100: LD_VAR 0 18
36104: PPUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 30
36110: PUSH
36111: LD_INT 32
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 30
36120: PUSH
36121: LD_INT 33
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: PPUSH
36133: CALL_OW 72
36137: IFFALSE 36225
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
36139: LD_ADDR_VAR 0 8
36143: PUSH
36144: LD_VAR 0 18
36148: PPUSH
36149: LD_INT 2
36151: PUSH
36152: LD_INT 30
36154: PUSH
36155: LD_INT 32
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 30
36164: PUSH
36165: LD_INT 33
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: LIST
36176: PPUSH
36177: CALL_OW 72
36181: PUSH
36182: FOR_IN
36183: IFFALSE 36223
// begin if not GetBWeapon ( i ) then
36185: LD_VAR 0 8
36189: PPUSH
36190: CALL_OW 269
36194: NOT
36195: IFFALSE 36221
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
36197: LD_VAR 0 8
36201: PPUSH
36202: LD_VAR 0 8
36206: PPUSH
36207: LD_VAR 0 2
36211: PPUSH
36212: CALL 37471 0 2
36216: PPUSH
36217: CALL_OW 431
// end ;
36221: GO 36182
36223: POP
36224: POP
// end ; for i = 1 to personel do
36225: LD_ADDR_VAR 0 8
36229: PUSH
36230: DOUBLE
36231: LD_INT 1
36233: DEC
36234: ST_TO_ADDR
36235: LD_VAR 0 6
36239: PUSH
36240: FOR_TO
36241: IFFALSE 37305
// begin if i > 4 then
36243: LD_VAR 0 8
36247: PUSH
36248: LD_INT 4
36250: GREATER
36251: IFFALSE 36255
// break ;
36253: GO 37305
// case i of 1 :
36255: LD_VAR 0 8
36259: PUSH
36260: LD_INT 1
36262: DOUBLE
36263: EQUAL
36264: IFTRUE 36268
36266: GO 36348
36268: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
36269: LD_ADDR_VAR 0 12
36273: PUSH
36274: LD_VAR 0 18
36278: PPUSH
36279: LD_INT 22
36281: PUSH
36282: LD_VAR 0 16
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 58
36293: PUSH
36294: EMPTY
36295: LIST
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 30
36302: PUSH
36303: LD_INT 32
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 30
36312: PUSH
36313: LD_INT 4
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 30
36322: PUSH
36323: LD_INT 5
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: LIST
36334: LIST
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: LIST
36340: PPUSH
36341: CALL_OW 72
36345: ST_TO_ADDR
36346: GO 36570
36348: LD_INT 2
36350: DOUBLE
36351: EQUAL
36352: IFTRUE 36356
36354: GO 36418
36356: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36357: LD_ADDR_VAR 0 12
36361: PUSH
36362: LD_VAR 0 18
36366: PPUSH
36367: LD_INT 22
36369: PUSH
36370: LD_VAR 0 16
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 30
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 30
36394: PUSH
36395: LD_INT 1
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: LIST
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PPUSH
36411: CALL_OW 72
36415: ST_TO_ADDR
36416: GO 36570
36418: LD_INT 3
36420: DOUBLE
36421: EQUAL
36422: IFTRUE 36426
36424: GO 36488
36426: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36427: LD_ADDR_VAR 0 12
36431: PUSH
36432: LD_VAR 0 18
36436: PPUSH
36437: LD_INT 22
36439: PUSH
36440: LD_VAR 0 16
36444: PUSH
36445: EMPTY
36446: LIST
36447: LIST
36448: PUSH
36449: LD_INT 2
36451: PUSH
36452: LD_INT 30
36454: PUSH
36455: LD_INT 2
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 30
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: LIST
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PPUSH
36481: CALL_OW 72
36485: ST_TO_ADDR
36486: GO 36570
36488: LD_INT 4
36490: DOUBLE
36491: EQUAL
36492: IFTRUE 36496
36494: GO 36569
36496: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36497: LD_ADDR_VAR 0 12
36501: PUSH
36502: LD_VAR 0 18
36506: PPUSH
36507: LD_INT 22
36509: PUSH
36510: LD_VAR 0 16
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: PUSH
36519: LD_INT 2
36521: PUSH
36522: LD_INT 30
36524: PUSH
36525: LD_INT 6
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 30
36534: PUSH
36535: LD_INT 7
36537: PUSH
36538: EMPTY
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 30
36544: PUSH
36545: LD_INT 8
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: LIST
36556: LIST
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PPUSH
36562: CALL_OW 72
36566: ST_TO_ADDR
36567: GO 36570
36569: POP
// if i = 1 then
36570: LD_VAR 0 8
36574: PUSH
36575: LD_INT 1
36577: EQUAL
36578: IFFALSE 36689
// begin tmp := [ ] ;
36580: LD_ADDR_VAR 0 19
36584: PUSH
36585: EMPTY
36586: ST_TO_ADDR
// for j in f do
36587: LD_ADDR_VAR 0 9
36591: PUSH
36592: LD_VAR 0 12
36596: PUSH
36597: FOR_IN
36598: IFFALSE 36671
// if GetBType ( j ) = b_bunker then
36600: LD_VAR 0 9
36604: PPUSH
36605: CALL_OW 266
36609: PUSH
36610: LD_INT 32
36612: EQUAL
36613: IFFALSE 36640
// tmp := Insert ( tmp , 1 , j ) else
36615: LD_ADDR_VAR 0 19
36619: PUSH
36620: LD_VAR 0 19
36624: PPUSH
36625: LD_INT 1
36627: PPUSH
36628: LD_VAR 0 9
36632: PPUSH
36633: CALL_OW 2
36637: ST_TO_ADDR
36638: GO 36669
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36640: LD_ADDR_VAR 0 19
36644: PUSH
36645: LD_VAR 0 19
36649: PPUSH
36650: LD_VAR 0 19
36654: PUSH
36655: LD_INT 1
36657: PLUS
36658: PPUSH
36659: LD_VAR 0 9
36663: PPUSH
36664: CALL_OW 2
36668: ST_TO_ADDR
36669: GO 36597
36671: POP
36672: POP
// if tmp then
36673: LD_VAR 0 19
36677: IFFALSE 36689
// f := tmp ;
36679: LD_ADDR_VAR 0 12
36683: PUSH
36684: LD_VAR 0 19
36688: ST_TO_ADDR
// end ; x := personel [ i ] ;
36689: LD_ADDR_VAR 0 13
36693: PUSH
36694: LD_VAR 0 6
36698: PUSH
36699: LD_VAR 0 8
36703: ARRAY
36704: ST_TO_ADDR
// if x = - 1 then
36705: LD_VAR 0 13
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: EQUAL
36714: IFFALSE 36923
// begin for j in f do
36716: LD_ADDR_VAR 0 9
36720: PUSH
36721: LD_VAR 0 12
36725: PUSH
36726: FOR_IN
36727: IFFALSE 36919
// repeat InitHc ;
36729: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36733: LD_VAR 0 9
36737: PPUSH
36738: CALL_OW 266
36742: PUSH
36743: LD_INT 5
36745: EQUAL
36746: IFFALSE 36816
// begin if UnitsInside ( j ) < 3 then
36748: LD_VAR 0 9
36752: PPUSH
36753: CALL_OW 313
36757: PUSH
36758: LD_INT 3
36760: LESS
36761: IFFALSE 36797
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36763: LD_INT 0
36765: PPUSH
36766: LD_INT 5
36768: PUSH
36769: LD_INT 8
36771: PUSH
36772: LD_INT 9
36774: PUSH
36775: EMPTY
36776: LIST
36777: LIST
36778: LIST
36779: PUSH
36780: LD_VAR 0 17
36784: ARRAY
36785: PPUSH
36786: LD_VAR 0 4
36790: PPUSH
36791: CALL_OW 380
36795: GO 36814
// PrepareHuman ( false , i , skill ) ;
36797: LD_INT 0
36799: PPUSH
36800: LD_VAR 0 8
36804: PPUSH
36805: LD_VAR 0 4
36809: PPUSH
36810: CALL_OW 380
// end else
36814: GO 36833
// PrepareHuman ( false , i , skill ) ;
36816: LD_INT 0
36818: PPUSH
36819: LD_VAR 0 8
36823: PPUSH
36824: LD_VAR 0 4
36828: PPUSH
36829: CALL_OW 380
// un := CreateHuman ;
36833: LD_ADDR_VAR 0 14
36837: PUSH
36838: CALL_OW 44
36842: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36843: LD_ADDR_VAR 0 7
36847: PUSH
36848: LD_VAR 0 7
36852: PPUSH
36853: LD_INT 1
36855: PPUSH
36856: LD_VAR 0 14
36860: PPUSH
36861: CALL_OW 2
36865: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36866: LD_VAR 0 14
36870: PPUSH
36871: LD_VAR 0 9
36875: PPUSH
36876: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36880: LD_VAR 0 9
36884: PPUSH
36885: CALL_OW 313
36889: PUSH
36890: LD_INT 6
36892: EQUAL
36893: PUSH
36894: LD_VAR 0 9
36898: PPUSH
36899: CALL_OW 266
36903: PUSH
36904: LD_INT 32
36906: PUSH
36907: LD_INT 31
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: IN
36914: OR
36915: IFFALSE 36729
36917: GO 36726
36919: POP
36920: POP
// end else
36921: GO 37303
// for j = 1 to x do
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: DOUBLE
36929: LD_INT 1
36931: DEC
36932: ST_TO_ADDR
36933: LD_VAR 0 13
36937: PUSH
36938: FOR_TO
36939: IFFALSE 37301
// begin InitHc ;
36941: CALL_OW 19
// if not f then
36945: LD_VAR 0 12
36949: NOT
36950: IFFALSE 37039
// begin PrepareHuman ( false , i , skill ) ;
36952: LD_INT 0
36954: PPUSH
36955: LD_VAR 0 8
36959: PPUSH
36960: LD_VAR 0 4
36964: PPUSH
36965: CALL_OW 380
// un := CreateHuman ;
36969: LD_ADDR_VAR 0 14
36973: PUSH
36974: CALL_OW 44
36978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36979: LD_ADDR_VAR 0 7
36983: PUSH
36984: LD_VAR 0 7
36988: PPUSH
36989: LD_INT 1
36991: PPUSH
36992: LD_VAR 0 14
36996: PPUSH
36997: CALL_OW 2
37001: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37002: LD_VAR 0 14
37006: PPUSH
37007: LD_VAR 0 1
37011: PPUSH
37012: CALL_OW 250
37016: PPUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: CALL_OW 251
37026: PPUSH
37027: LD_INT 10
37029: PPUSH
37030: LD_INT 0
37032: PPUSH
37033: CALL_OW 50
// continue ;
37037: GO 36938
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
37039: LD_VAR 0 12
37043: PUSH
37044: LD_INT 1
37046: ARRAY
37047: PPUSH
37048: CALL_OW 313
37052: PUSH
37053: LD_VAR 0 12
37057: PUSH
37058: LD_INT 1
37060: ARRAY
37061: PPUSH
37062: CALL_OW 266
37066: PUSH
37067: LD_INT 32
37069: PUSH
37070: LD_INT 31
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: IN
37077: AND
37078: PUSH
37079: LD_VAR 0 12
37083: PUSH
37084: LD_INT 1
37086: ARRAY
37087: PPUSH
37088: CALL_OW 313
37092: PUSH
37093: LD_INT 6
37095: EQUAL
37096: OR
37097: IFFALSE 37117
// f := Delete ( f , 1 ) ;
37099: LD_ADDR_VAR 0 12
37103: PUSH
37104: LD_VAR 0 12
37108: PPUSH
37109: LD_INT 1
37111: PPUSH
37112: CALL_OW 3
37116: ST_TO_ADDR
// if not f then
37117: LD_VAR 0 12
37121: NOT
37122: IFFALSE 37140
// begin x := x + 2 ;
37124: LD_ADDR_VAR 0 13
37128: PUSH
37129: LD_VAR 0 13
37133: PUSH
37134: LD_INT 2
37136: PLUS
37137: ST_TO_ADDR
// continue ;
37138: GO 36938
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
37140: LD_VAR 0 12
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: PPUSH
37149: CALL_OW 266
37153: PUSH
37154: LD_INT 5
37156: EQUAL
37157: IFFALSE 37231
// begin if UnitsInside ( f [ 1 ] ) < 3 then
37159: LD_VAR 0 12
37163: PUSH
37164: LD_INT 1
37166: ARRAY
37167: PPUSH
37168: CALL_OW 313
37172: PUSH
37173: LD_INT 3
37175: LESS
37176: IFFALSE 37212
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
37178: LD_INT 0
37180: PPUSH
37181: LD_INT 5
37183: PUSH
37184: LD_INT 8
37186: PUSH
37187: LD_INT 9
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: LIST
37194: PUSH
37195: LD_VAR 0 17
37199: ARRAY
37200: PPUSH
37201: LD_VAR 0 4
37205: PPUSH
37206: CALL_OW 380
37210: GO 37229
// PrepareHuman ( false , i , skill ) ;
37212: LD_INT 0
37214: PPUSH
37215: LD_VAR 0 8
37219: PPUSH
37220: LD_VAR 0 4
37224: PPUSH
37225: CALL_OW 380
// end else
37229: GO 37248
// PrepareHuman ( false , i , skill ) ;
37231: LD_INT 0
37233: PPUSH
37234: LD_VAR 0 8
37238: PPUSH
37239: LD_VAR 0 4
37243: PPUSH
37244: CALL_OW 380
// un := CreateHuman ;
37248: LD_ADDR_VAR 0 14
37252: PUSH
37253: CALL_OW 44
37257: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
37258: LD_ADDR_VAR 0 7
37262: PUSH
37263: LD_VAR 0 7
37267: PPUSH
37268: LD_INT 1
37270: PPUSH
37271: LD_VAR 0 14
37275: PPUSH
37276: CALL_OW 2
37280: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
37281: LD_VAR 0 14
37285: PPUSH
37286: LD_VAR 0 12
37290: PUSH
37291: LD_INT 1
37293: ARRAY
37294: PPUSH
37295: CALL_OW 52
// end ;
37299: GO 36938
37301: POP
37302: POP
// end ;
37303: GO 36240
37305: POP
37306: POP
// result := result ^ buildings ;
37307: LD_ADDR_VAR 0 7
37311: PUSH
37312: LD_VAR 0 7
37316: PUSH
37317: LD_VAR 0 18
37321: ADD
37322: ST_TO_ADDR
// end else
37323: GO 37466
// begin for i = 1 to personel do
37325: LD_ADDR_VAR 0 8
37329: PUSH
37330: DOUBLE
37331: LD_INT 1
37333: DEC
37334: ST_TO_ADDR
37335: LD_VAR 0 6
37339: PUSH
37340: FOR_TO
37341: IFFALSE 37464
// begin if i > 4 then
37343: LD_VAR 0 8
37347: PUSH
37348: LD_INT 4
37350: GREATER
37351: IFFALSE 37355
// break ;
37353: GO 37464
// x := personel [ i ] ;
37355: LD_ADDR_VAR 0 13
37359: PUSH
37360: LD_VAR 0 6
37364: PUSH
37365: LD_VAR 0 8
37369: ARRAY
37370: ST_TO_ADDR
// if x = - 1 then
37371: LD_VAR 0 13
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: EQUAL
37380: IFFALSE 37384
// continue ;
37382: GO 37340
// PrepareHuman ( false , i , skill ) ;
37384: LD_INT 0
37386: PPUSH
37387: LD_VAR 0 8
37391: PPUSH
37392: LD_VAR 0 4
37396: PPUSH
37397: CALL_OW 380
// un := CreateHuman ;
37401: LD_ADDR_VAR 0 14
37405: PUSH
37406: CALL_OW 44
37410: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37411: LD_VAR 0 14
37415: PPUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 250
37425: PPUSH
37426: LD_VAR 0 1
37430: PPUSH
37431: CALL_OW 251
37435: PPUSH
37436: LD_INT 10
37438: PPUSH
37439: LD_INT 0
37441: PPUSH
37442: CALL_OW 50
// result := result ^ un ;
37446: LD_ADDR_VAR 0 7
37450: PUSH
37451: LD_VAR 0 7
37455: PUSH
37456: LD_VAR 0 14
37460: ADD
37461: ST_TO_ADDR
// end ;
37462: GO 37340
37464: POP
37465: POP
// end ; end ;
37466: LD_VAR 0 7
37470: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37471: LD_INT 0
37473: PPUSH
37474: PPUSH
37475: PPUSH
37476: PPUSH
37477: PPUSH
37478: PPUSH
37479: PPUSH
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
// result := false ;
37489: LD_ADDR_VAR 0 3
37493: PUSH
37494: LD_INT 0
37496: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37497: LD_VAR 0 1
37501: NOT
37502: PUSH
37503: LD_VAR 0 1
37507: PPUSH
37508: CALL_OW 266
37512: PUSH
37513: LD_INT 32
37515: PUSH
37516: LD_INT 33
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: IN
37523: NOT
37524: OR
37525: IFFALSE 37529
// exit ;
37527: GO 38638
// nat := GetNation ( tower ) ;
37529: LD_ADDR_VAR 0 12
37533: PUSH
37534: LD_VAR 0 1
37538: PPUSH
37539: CALL_OW 248
37543: ST_TO_ADDR
// side := GetSide ( tower ) ;
37544: LD_ADDR_VAR 0 16
37548: PUSH
37549: LD_VAR 0 1
37553: PPUSH
37554: CALL_OW 255
37558: ST_TO_ADDR
// x := GetX ( tower ) ;
37559: LD_ADDR_VAR 0 10
37563: PUSH
37564: LD_VAR 0 1
37568: PPUSH
37569: CALL_OW 250
37573: ST_TO_ADDR
// y := GetY ( tower ) ;
37574: LD_ADDR_VAR 0 11
37578: PUSH
37579: LD_VAR 0 1
37583: PPUSH
37584: CALL_OW 251
37588: ST_TO_ADDR
// if not x or not y then
37589: LD_VAR 0 10
37593: NOT
37594: PUSH
37595: LD_VAR 0 11
37599: NOT
37600: OR
37601: IFFALSE 37605
// exit ;
37603: GO 38638
// weapon := 0 ;
37605: LD_ADDR_VAR 0 18
37609: PUSH
37610: LD_INT 0
37612: ST_TO_ADDR
// fac_list := [ ] ;
37613: LD_ADDR_VAR 0 17
37617: PUSH
37618: EMPTY
37619: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37620: LD_ADDR_VAR 0 6
37624: PUSH
37625: LD_VAR 0 1
37629: PPUSH
37630: CALL_OW 274
37634: PPUSH
37635: LD_VAR 0 2
37639: PPUSH
37640: LD_INT 0
37642: PPUSH
37643: CALL 35209 0 3
37647: PPUSH
37648: LD_INT 30
37650: PUSH
37651: LD_INT 3
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PPUSH
37658: CALL_OW 72
37662: ST_TO_ADDR
// if not factories then
37663: LD_VAR 0 6
37667: NOT
37668: IFFALSE 37672
// exit ;
37670: GO 38638
// for i in factories do
37672: LD_ADDR_VAR 0 8
37676: PUSH
37677: LD_VAR 0 6
37681: PUSH
37682: FOR_IN
37683: IFFALSE 37708
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37685: LD_ADDR_VAR 0 17
37689: PUSH
37690: LD_VAR 0 17
37694: PUSH
37695: LD_VAR 0 8
37699: PPUSH
37700: CALL_OW 478
37704: UNION
37705: ST_TO_ADDR
37706: GO 37682
37708: POP
37709: POP
// if not fac_list then
37710: LD_VAR 0 17
37714: NOT
37715: IFFALSE 37719
// exit ;
37717: GO 38638
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37719: LD_ADDR_VAR 0 5
37723: PUSH
37724: LD_INT 4
37726: PUSH
37727: LD_INT 5
37729: PUSH
37730: LD_INT 9
37732: PUSH
37733: LD_INT 10
37735: PUSH
37736: LD_INT 6
37738: PUSH
37739: LD_INT 7
37741: PUSH
37742: LD_INT 11
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 27
37756: PUSH
37757: LD_INT 28
37759: PUSH
37760: LD_INT 26
37762: PUSH
37763: LD_INT 30
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 43
37774: PUSH
37775: LD_INT 44
37777: PUSH
37778: LD_INT 46
37780: PUSH
37781: LD_INT 45
37783: PUSH
37784: LD_INT 47
37786: PUSH
37787: LD_INT 49
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: LIST
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: PUSH
37803: LD_VAR 0 12
37807: ARRAY
37808: ST_TO_ADDR
// list := list isect fac_list ;
37809: LD_ADDR_VAR 0 5
37813: PUSH
37814: LD_VAR 0 5
37818: PUSH
37819: LD_VAR 0 17
37823: ISECT
37824: ST_TO_ADDR
// if not list then
37825: LD_VAR 0 5
37829: NOT
37830: IFFALSE 37834
// exit ;
37832: GO 38638
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37834: LD_VAR 0 12
37838: PUSH
37839: LD_INT 3
37841: EQUAL
37842: PUSH
37843: LD_INT 49
37845: PUSH
37846: LD_VAR 0 5
37850: IN
37851: AND
37852: PUSH
37853: LD_INT 31
37855: PPUSH
37856: LD_VAR 0 16
37860: PPUSH
37861: CALL_OW 321
37865: PUSH
37866: LD_INT 2
37868: EQUAL
37869: AND
37870: IFFALSE 37930
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37872: LD_INT 22
37874: PUSH
37875: LD_VAR 0 16
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 35
37886: PUSH
37887: LD_INT 49
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 91
37896: PUSH
37897: LD_VAR 0 1
37901: PUSH
37902: LD_INT 10
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: PPUSH
37915: CALL_OW 69
37919: NOT
37920: IFFALSE 37930
// weapon := ru_time_lapser ;
37922: LD_ADDR_VAR 0 18
37926: PUSH
37927: LD_INT 49
37929: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37930: LD_VAR 0 12
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: LD_INT 2
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: IN
37945: PUSH
37946: LD_INT 11
37948: PUSH
37949: LD_VAR 0 5
37953: IN
37954: PUSH
37955: LD_INT 30
37957: PUSH
37958: LD_VAR 0 5
37962: IN
37963: OR
37964: AND
37965: PUSH
37966: LD_INT 6
37968: PPUSH
37969: LD_VAR 0 16
37973: PPUSH
37974: CALL_OW 321
37978: PUSH
37979: LD_INT 2
37981: EQUAL
37982: AND
37983: IFFALSE 38148
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37985: LD_INT 22
37987: PUSH
37988: LD_VAR 0 16
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: LD_INT 35
38002: PUSH
38003: LD_INT 11
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 35
38012: PUSH
38013: LD_INT 30
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 91
38027: PUSH
38028: LD_VAR 0 1
38032: PUSH
38033: LD_INT 18
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: PPUSH
38046: CALL_OW 69
38050: NOT
38051: PUSH
38052: LD_INT 22
38054: PUSH
38055: LD_VAR 0 16
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 30
38069: PUSH
38070: LD_INT 32
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 30
38079: PUSH
38080: LD_INT 33
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: LIST
38091: PUSH
38092: LD_INT 91
38094: PUSH
38095: LD_VAR 0 1
38099: PUSH
38100: LD_INT 12
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: LIST
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: PUSH
38113: EMPTY
38114: LIST
38115: PPUSH
38116: CALL_OW 69
38120: PUSH
38121: LD_INT 2
38123: GREATER
38124: AND
38125: IFFALSE 38148
// weapon := [ us_radar , ar_radar ] [ nat ] ;
38127: LD_ADDR_VAR 0 18
38131: PUSH
38132: LD_INT 11
38134: PUSH
38135: LD_INT 30
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_VAR 0 12
38146: ARRAY
38147: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
38148: LD_VAR 0 18
38152: NOT
38153: PUSH
38154: LD_INT 40
38156: PPUSH
38157: LD_VAR 0 16
38161: PPUSH
38162: CALL_OW 321
38166: PUSH
38167: LD_INT 2
38169: EQUAL
38170: AND
38171: PUSH
38172: LD_INT 7
38174: PUSH
38175: LD_VAR 0 5
38179: IN
38180: PUSH
38181: LD_INT 28
38183: PUSH
38184: LD_VAR 0 5
38188: IN
38189: OR
38190: PUSH
38191: LD_INT 45
38193: PUSH
38194: LD_VAR 0 5
38198: IN
38199: OR
38200: AND
38201: IFFALSE 38455
// begin hex := GetHexInfo ( x , y ) ;
38203: LD_ADDR_VAR 0 4
38207: PUSH
38208: LD_VAR 0 10
38212: PPUSH
38213: LD_VAR 0 11
38217: PPUSH
38218: CALL_OW 546
38222: ST_TO_ADDR
// if hex [ 1 ] then
38223: LD_VAR 0 4
38227: PUSH
38228: LD_INT 1
38230: ARRAY
38231: IFFALSE 38235
// exit ;
38233: GO 38638
// height := hex [ 2 ] ;
38235: LD_ADDR_VAR 0 15
38239: PUSH
38240: LD_VAR 0 4
38244: PUSH
38245: LD_INT 2
38247: ARRAY
38248: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
38249: LD_ADDR_VAR 0 14
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: LD_INT 3
38262: PUSH
38263: LD_INT 5
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: ST_TO_ADDR
// for i in tmp do
38272: LD_ADDR_VAR 0 8
38276: PUSH
38277: LD_VAR 0 14
38281: PUSH
38282: FOR_IN
38283: IFFALSE 38453
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
38285: LD_ADDR_VAR 0 9
38289: PUSH
38290: LD_VAR 0 10
38294: PPUSH
38295: LD_VAR 0 8
38299: PPUSH
38300: LD_INT 5
38302: PPUSH
38303: CALL_OW 272
38307: PUSH
38308: LD_VAR 0 11
38312: PPUSH
38313: LD_VAR 0 8
38317: PPUSH
38318: LD_INT 5
38320: PPUSH
38321: CALL_OW 273
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38330: LD_VAR 0 9
38334: PUSH
38335: LD_INT 1
38337: ARRAY
38338: PPUSH
38339: LD_VAR 0 9
38343: PUSH
38344: LD_INT 2
38346: ARRAY
38347: PPUSH
38348: CALL_OW 488
38352: IFFALSE 38451
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38354: LD_ADDR_VAR 0 4
38358: PUSH
38359: LD_VAR 0 9
38363: PUSH
38364: LD_INT 1
38366: ARRAY
38367: PPUSH
38368: LD_VAR 0 9
38372: PUSH
38373: LD_INT 2
38375: ARRAY
38376: PPUSH
38377: CALL_OW 546
38381: ST_TO_ADDR
// if hex [ 1 ] then
38382: LD_VAR 0 4
38386: PUSH
38387: LD_INT 1
38389: ARRAY
38390: IFFALSE 38394
// continue ;
38392: GO 38282
// h := hex [ 2 ] ;
38394: LD_ADDR_VAR 0 13
38398: PUSH
38399: LD_VAR 0 4
38403: PUSH
38404: LD_INT 2
38406: ARRAY
38407: ST_TO_ADDR
// if h + 7 < height then
38408: LD_VAR 0 13
38412: PUSH
38413: LD_INT 7
38415: PLUS
38416: PUSH
38417: LD_VAR 0 15
38421: LESS
38422: IFFALSE 38451
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38424: LD_ADDR_VAR 0 18
38428: PUSH
38429: LD_INT 7
38431: PUSH
38432: LD_INT 28
38434: PUSH
38435: LD_INT 45
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: PUSH
38443: LD_VAR 0 12
38447: ARRAY
38448: ST_TO_ADDR
// break ;
38449: GO 38453
// end ; end ; end ;
38451: GO 38282
38453: POP
38454: POP
// end ; if not weapon then
38455: LD_VAR 0 18
38459: NOT
38460: IFFALSE 38520
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38462: LD_ADDR_VAR 0 5
38466: PUSH
38467: LD_VAR 0 5
38471: PUSH
38472: LD_INT 11
38474: PUSH
38475: LD_INT 30
38477: PUSH
38478: LD_INT 49
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: LIST
38485: DIFF
38486: ST_TO_ADDR
// if not list then
38487: LD_VAR 0 5
38491: NOT
38492: IFFALSE 38496
// exit ;
38494: GO 38638
// weapon := list [ rand ( 1 , list ) ] ;
38496: LD_ADDR_VAR 0 18
38500: PUSH
38501: LD_VAR 0 5
38505: PUSH
38506: LD_INT 1
38508: PPUSH
38509: LD_VAR 0 5
38513: PPUSH
38514: CALL_OW 12
38518: ARRAY
38519: ST_TO_ADDR
// end ; if weapon then
38520: LD_VAR 0 18
38524: IFFALSE 38638
// begin tmp := CostOfWeapon ( weapon ) ;
38526: LD_ADDR_VAR 0 14
38530: PUSH
38531: LD_VAR 0 18
38535: PPUSH
38536: CALL_OW 451
38540: ST_TO_ADDR
// j := GetBase ( tower ) ;
38541: LD_ADDR_VAR 0 9
38545: PUSH
38546: LD_VAR 0 1
38550: PPUSH
38551: CALL_OW 274
38555: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38556: LD_VAR 0 9
38560: PPUSH
38561: LD_INT 1
38563: PPUSH
38564: CALL_OW 275
38568: PUSH
38569: LD_VAR 0 14
38573: PUSH
38574: LD_INT 1
38576: ARRAY
38577: GREATEREQUAL
38578: PUSH
38579: LD_VAR 0 9
38583: PPUSH
38584: LD_INT 2
38586: PPUSH
38587: CALL_OW 275
38591: PUSH
38592: LD_VAR 0 14
38596: PUSH
38597: LD_INT 2
38599: ARRAY
38600: GREATEREQUAL
38601: AND
38602: PUSH
38603: LD_VAR 0 9
38607: PPUSH
38608: LD_INT 3
38610: PPUSH
38611: CALL_OW 275
38615: PUSH
38616: LD_VAR 0 14
38620: PUSH
38621: LD_INT 3
38623: ARRAY
38624: GREATEREQUAL
38625: AND
38626: IFFALSE 38638
// result := weapon ;
38628: LD_ADDR_VAR 0 3
38632: PUSH
38633: LD_VAR 0 18
38637: ST_TO_ADDR
// end ; end ;
38638: LD_VAR 0 3
38642: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38643: LD_INT 0
38645: PPUSH
38646: PPUSH
// result := true ;
38647: LD_ADDR_VAR 0 3
38651: PUSH
38652: LD_INT 1
38654: ST_TO_ADDR
// if array1 = array2 then
38655: LD_VAR 0 1
38659: PUSH
38660: LD_VAR 0 2
38664: EQUAL
38665: IFFALSE 38725
// begin for i = 1 to array1 do
38667: LD_ADDR_VAR 0 4
38671: PUSH
38672: DOUBLE
38673: LD_INT 1
38675: DEC
38676: ST_TO_ADDR
38677: LD_VAR 0 1
38681: PUSH
38682: FOR_TO
38683: IFFALSE 38721
// if array1 [ i ] <> array2 [ i ] then
38685: LD_VAR 0 1
38689: PUSH
38690: LD_VAR 0 4
38694: ARRAY
38695: PUSH
38696: LD_VAR 0 2
38700: PUSH
38701: LD_VAR 0 4
38705: ARRAY
38706: NONEQUAL
38707: IFFALSE 38719
// begin result := false ;
38709: LD_ADDR_VAR 0 3
38713: PUSH
38714: LD_INT 0
38716: ST_TO_ADDR
// break ;
38717: GO 38721
// end ;
38719: GO 38682
38721: POP
38722: POP
// end else
38723: GO 38733
// result := false ;
38725: LD_ADDR_VAR 0 3
38729: PUSH
38730: LD_INT 0
38732: ST_TO_ADDR
// end ;
38733: LD_VAR 0 3
38737: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38738: LD_INT 0
38740: PPUSH
38741: PPUSH
// if not array1 or not array2 then
38742: LD_VAR 0 1
38746: NOT
38747: PUSH
38748: LD_VAR 0 2
38752: NOT
38753: OR
38754: IFFALSE 38758
// exit ;
38756: GO 38822
// result := true ;
38758: LD_ADDR_VAR 0 3
38762: PUSH
38763: LD_INT 1
38765: ST_TO_ADDR
// for i = 1 to array1 do
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: DOUBLE
38772: LD_INT 1
38774: DEC
38775: ST_TO_ADDR
38776: LD_VAR 0 1
38780: PUSH
38781: FOR_TO
38782: IFFALSE 38820
// if array1 [ i ] <> array2 [ i ] then
38784: LD_VAR 0 1
38788: PUSH
38789: LD_VAR 0 4
38793: ARRAY
38794: PUSH
38795: LD_VAR 0 2
38799: PUSH
38800: LD_VAR 0 4
38804: ARRAY
38805: NONEQUAL
38806: IFFALSE 38818
// begin result := false ;
38808: LD_ADDR_VAR 0 3
38812: PUSH
38813: LD_INT 0
38815: ST_TO_ADDR
// break ;
38816: GO 38820
// end ;
38818: GO 38781
38820: POP
38821: POP
// end ;
38822: LD_VAR 0 3
38826: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38827: LD_INT 0
38829: PPUSH
38830: PPUSH
38831: PPUSH
// pom := GetBase ( fac ) ;
38832: LD_ADDR_VAR 0 5
38836: PUSH
38837: LD_VAR 0 1
38841: PPUSH
38842: CALL_OW 274
38846: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38847: LD_ADDR_VAR 0 4
38851: PUSH
38852: LD_VAR 0 2
38856: PUSH
38857: LD_INT 1
38859: ARRAY
38860: PPUSH
38861: LD_VAR 0 2
38865: PUSH
38866: LD_INT 2
38868: ARRAY
38869: PPUSH
38870: LD_VAR 0 2
38874: PUSH
38875: LD_INT 3
38877: ARRAY
38878: PPUSH
38879: LD_VAR 0 2
38883: PUSH
38884: LD_INT 4
38886: ARRAY
38887: PPUSH
38888: CALL_OW 449
38892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38893: LD_ADDR_VAR 0 3
38897: PUSH
38898: LD_VAR 0 5
38902: PPUSH
38903: LD_INT 1
38905: PPUSH
38906: CALL_OW 275
38910: PUSH
38911: LD_VAR 0 4
38915: PUSH
38916: LD_INT 1
38918: ARRAY
38919: GREATEREQUAL
38920: PUSH
38921: LD_VAR 0 5
38925: PPUSH
38926: LD_INT 2
38928: PPUSH
38929: CALL_OW 275
38933: PUSH
38934: LD_VAR 0 4
38938: PUSH
38939: LD_INT 2
38941: ARRAY
38942: GREATEREQUAL
38943: AND
38944: PUSH
38945: LD_VAR 0 5
38949: PPUSH
38950: LD_INT 3
38952: PPUSH
38953: CALL_OW 275
38957: PUSH
38958: LD_VAR 0 4
38962: PUSH
38963: LD_INT 3
38965: ARRAY
38966: GREATEREQUAL
38967: AND
38968: ST_TO_ADDR
// end ;
38969: LD_VAR 0 3
38973: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38974: LD_INT 0
38976: PPUSH
38977: PPUSH
38978: PPUSH
38979: PPUSH
// pom := GetBase ( building ) ;
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_VAR 0 1
38989: PPUSH
38990: CALL_OW 274
38994: ST_TO_ADDR
// if not pom then
38995: LD_VAR 0 3
38999: NOT
39000: IFFALSE 39004
// exit ;
39002: GO 39174
// btype := GetBType ( building ) ;
39004: LD_ADDR_VAR 0 5
39008: PUSH
39009: LD_VAR 0 1
39013: PPUSH
39014: CALL_OW 266
39018: ST_TO_ADDR
// if btype = b_armoury then
39019: LD_VAR 0 5
39023: PUSH
39024: LD_INT 4
39026: EQUAL
39027: IFFALSE 39037
// btype := b_barracks ;
39029: LD_ADDR_VAR 0 5
39033: PUSH
39034: LD_INT 5
39036: ST_TO_ADDR
// if btype = b_depot then
39037: LD_VAR 0 5
39041: PUSH
39042: LD_INT 0
39044: EQUAL
39045: IFFALSE 39055
// btype := b_warehouse ;
39047: LD_ADDR_VAR 0 5
39051: PUSH
39052: LD_INT 1
39054: ST_TO_ADDR
// if btype = b_workshop then
39055: LD_VAR 0 5
39059: PUSH
39060: LD_INT 2
39062: EQUAL
39063: IFFALSE 39073
// btype := b_factory ;
39065: LD_ADDR_VAR 0 5
39069: PUSH
39070: LD_INT 3
39072: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39073: LD_ADDR_VAR 0 4
39077: PUSH
39078: LD_VAR 0 5
39082: PPUSH
39083: LD_VAR 0 1
39087: PPUSH
39088: CALL_OW 248
39092: PPUSH
39093: CALL_OW 450
39097: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39098: LD_ADDR_VAR 0 2
39102: PUSH
39103: LD_VAR 0 3
39107: PPUSH
39108: LD_INT 1
39110: PPUSH
39111: CALL_OW 275
39115: PUSH
39116: LD_VAR 0 4
39120: PUSH
39121: LD_INT 1
39123: ARRAY
39124: GREATEREQUAL
39125: PUSH
39126: LD_VAR 0 3
39130: PPUSH
39131: LD_INT 2
39133: PPUSH
39134: CALL_OW 275
39138: PUSH
39139: LD_VAR 0 4
39143: PUSH
39144: LD_INT 2
39146: ARRAY
39147: GREATEREQUAL
39148: AND
39149: PUSH
39150: LD_VAR 0 3
39154: PPUSH
39155: LD_INT 3
39157: PPUSH
39158: CALL_OW 275
39162: PUSH
39163: LD_VAR 0 4
39167: PUSH
39168: LD_INT 3
39170: ARRAY
39171: GREATEREQUAL
39172: AND
39173: ST_TO_ADDR
// end ;
39174: LD_VAR 0 2
39178: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
39179: LD_INT 0
39181: PPUSH
39182: PPUSH
39183: PPUSH
// pom := GetBase ( building ) ;
39184: LD_ADDR_VAR 0 4
39188: PUSH
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 274
39198: ST_TO_ADDR
// if not pom then
39199: LD_VAR 0 4
39203: NOT
39204: IFFALSE 39208
// exit ;
39206: GO 39309
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
39208: LD_ADDR_VAR 0 5
39212: PUSH
39213: LD_VAR 0 2
39217: PPUSH
39218: LD_VAR 0 1
39222: PPUSH
39223: CALL_OW 248
39227: PPUSH
39228: CALL_OW 450
39232: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_VAR 0 4
39242: PPUSH
39243: LD_INT 1
39245: PPUSH
39246: CALL_OW 275
39250: PUSH
39251: LD_VAR 0 5
39255: PUSH
39256: LD_INT 1
39258: ARRAY
39259: GREATEREQUAL
39260: PUSH
39261: LD_VAR 0 4
39265: PPUSH
39266: LD_INT 2
39268: PPUSH
39269: CALL_OW 275
39273: PUSH
39274: LD_VAR 0 5
39278: PUSH
39279: LD_INT 2
39281: ARRAY
39282: GREATEREQUAL
39283: AND
39284: PUSH
39285: LD_VAR 0 4
39289: PPUSH
39290: LD_INT 3
39292: PPUSH
39293: CALL_OW 275
39297: PUSH
39298: LD_VAR 0 5
39302: PUSH
39303: LD_INT 3
39305: ARRAY
39306: GREATEREQUAL
39307: AND
39308: ST_TO_ADDR
// end ;
39309: LD_VAR 0 3
39313: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39314: LD_INT 0
39316: PPUSH
39317: PPUSH
39318: PPUSH
39319: PPUSH
39320: PPUSH
39321: PPUSH
39322: PPUSH
39323: PPUSH
39324: PPUSH
39325: PPUSH
39326: PPUSH
// result := false ;
39327: LD_ADDR_VAR 0 8
39331: PUSH
39332: LD_INT 0
39334: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39335: LD_VAR 0 5
39339: NOT
39340: PUSH
39341: LD_VAR 0 1
39345: NOT
39346: OR
39347: PUSH
39348: LD_VAR 0 2
39352: NOT
39353: OR
39354: PUSH
39355: LD_VAR 0 3
39359: NOT
39360: OR
39361: IFFALSE 39365
// exit ;
39363: GO 40179
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39365: LD_ADDR_VAR 0 14
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: LD_VAR 0 2
39379: PPUSH
39380: LD_VAR 0 3
39384: PPUSH
39385: LD_VAR 0 4
39389: PPUSH
39390: LD_VAR 0 5
39394: PUSH
39395: LD_INT 1
39397: ARRAY
39398: PPUSH
39399: CALL_OW 248
39403: PPUSH
39404: LD_INT 0
39406: PPUSH
39407: CALL 41412 0 6
39411: ST_TO_ADDR
// if not hexes then
39412: LD_VAR 0 14
39416: NOT
39417: IFFALSE 39421
// exit ;
39419: GO 40179
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39421: LD_ADDR_VAR 0 17
39425: PUSH
39426: LD_VAR 0 5
39430: PPUSH
39431: LD_INT 22
39433: PUSH
39434: LD_VAR 0 13
39438: PPUSH
39439: CALL_OW 255
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: PUSH
39451: LD_INT 30
39453: PUSH
39454: LD_INT 0
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 30
39463: PUSH
39464: LD_INT 1
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PPUSH
39480: CALL_OW 72
39484: ST_TO_ADDR
// for i = 1 to hexes do
39485: LD_ADDR_VAR 0 9
39489: PUSH
39490: DOUBLE
39491: LD_INT 1
39493: DEC
39494: ST_TO_ADDR
39495: LD_VAR 0 14
39499: PUSH
39500: FOR_TO
39501: IFFALSE 40177
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39503: LD_ADDR_VAR 0 13
39507: PUSH
39508: LD_VAR 0 14
39512: PUSH
39513: LD_VAR 0 9
39517: ARRAY
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: LD_VAR 0 14
39527: PUSH
39528: LD_VAR 0 9
39532: ARRAY
39533: PUSH
39534: LD_INT 2
39536: ARRAY
39537: PPUSH
39538: CALL_OW 428
39542: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39543: LD_VAR 0 14
39547: PUSH
39548: LD_VAR 0 9
39552: ARRAY
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PPUSH
39558: LD_VAR 0 14
39562: PUSH
39563: LD_VAR 0 9
39567: ARRAY
39568: PUSH
39569: LD_INT 2
39571: ARRAY
39572: PPUSH
39573: CALL_OW 351
39577: PUSH
39578: LD_VAR 0 14
39582: PUSH
39583: LD_VAR 0 9
39587: ARRAY
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PPUSH
39593: LD_VAR 0 14
39597: PUSH
39598: LD_VAR 0 9
39602: ARRAY
39603: PUSH
39604: LD_INT 2
39606: ARRAY
39607: PPUSH
39608: CALL_OW 488
39612: NOT
39613: OR
39614: PUSH
39615: LD_VAR 0 13
39619: PPUSH
39620: CALL_OW 247
39624: PUSH
39625: LD_INT 3
39627: EQUAL
39628: OR
39629: IFFALSE 39635
// exit ;
39631: POP
39632: POP
39633: GO 40179
// if not tmp then
39635: LD_VAR 0 13
39639: NOT
39640: IFFALSE 39644
// continue ;
39642: GO 39500
// result := true ;
39644: LD_ADDR_VAR 0 8
39648: PUSH
39649: LD_INT 1
39651: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39652: LD_VAR 0 6
39656: PUSH
39657: LD_VAR 0 13
39661: PPUSH
39662: CALL_OW 247
39666: PUSH
39667: LD_INT 2
39669: EQUAL
39670: AND
39671: PUSH
39672: LD_VAR 0 13
39676: PPUSH
39677: CALL_OW 263
39681: PUSH
39682: LD_INT 1
39684: EQUAL
39685: AND
39686: IFFALSE 39850
// begin if IsDrivenBy ( tmp ) then
39688: LD_VAR 0 13
39692: PPUSH
39693: CALL_OW 311
39697: IFFALSE 39701
// continue ;
39699: GO 39500
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39701: LD_VAR 0 6
39705: PPUSH
39706: LD_INT 3
39708: PUSH
39709: LD_INT 60
39711: PUSH
39712: EMPTY
39713: LIST
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: LD_INT 55
39724: PUSH
39725: EMPTY
39726: LIST
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PPUSH
39736: CALL_OW 72
39740: IFFALSE 39848
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39742: LD_ADDR_VAR 0 18
39746: PUSH
39747: LD_VAR 0 6
39751: PPUSH
39752: LD_INT 3
39754: PUSH
39755: LD_INT 60
39757: PUSH
39758: EMPTY
39759: LIST
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 3
39767: PUSH
39768: LD_INT 55
39770: PUSH
39771: EMPTY
39772: LIST
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PPUSH
39782: CALL_OW 72
39786: PUSH
39787: LD_INT 1
39789: ARRAY
39790: ST_TO_ADDR
// if IsInUnit ( driver ) then
39791: LD_VAR 0 18
39795: PPUSH
39796: CALL_OW 310
39800: IFFALSE 39811
// ComExit ( driver ) ;
39802: LD_VAR 0 18
39806: PPUSH
39807: CALL 65192 0 1
// AddComEnterUnit ( driver , tmp ) ;
39811: LD_VAR 0 18
39815: PPUSH
39816: LD_VAR 0 13
39820: PPUSH
39821: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39825: LD_VAR 0 18
39829: PPUSH
39830: LD_VAR 0 7
39834: PPUSH
39835: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39839: LD_VAR 0 18
39843: PPUSH
39844: CALL_OW 181
// end ; continue ;
39848: GO 39500
// end ; if not cleaners or not tmp in cleaners then
39850: LD_VAR 0 6
39854: NOT
39855: PUSH
39856: LD_VAR 0 13
39860: PUSH
39861: LD_VAR 0 6
39865: IN
39866: NOT
39867: OR
39868: IFFALSE 40175
// begin if dep then
39870: LD_VAR 0 17
39874: IFFALSE 40010
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39876: LD_ADDR_VAR 0 16
39880: PUSH
39881: LD_VAR 0 17
39885: PUSH
39886: LD_INT 1
39888: ARRAY
39889: PPUSH
39890: CALL_OW 250
39894: PPUSH
39895: LD_VAR 0 17
39899: PUSH
39900: LD_INT 1
39902: ARRAY
39903: PPUSH
39904: CALL_OW 254
39908: PPUSH
39909: LD_INT 5
39911: PPUSH
39912: CALL_OW 272
39916: PUSH
39917: LD_VAR 0 17
39921: PUSH
39922: LD_INT 1
39924: ARRAY
39925: PPUSH
39926: CALL_OW 251
39930: PPUSH
39931: LD_VAR 0 17
39935: PUSH
39936: LD_INT 1
39938: ARRAY
39939: PPUSH
39940: CALL_OW 254
39944: PPUSH
39945: LD_INT 5
39947: PPUSH
39948: CALL_OW 273
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39957: LD_VAR 0 16
39961: PUSH
39962: LD_INT 1
39964: ARRAY
39965: PPUSH
39966: LD_VAR 0 16
39970: PUSH
39971: LD_INT 2
39973: ARRAY
39974: PPUSH
39975: CALL_OW 488
39979: IFFALSE 40010
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39981: LD_VAR 0 13
39985: PPUSH
39986: LD_VAR 0 16
39990: PUSH
39991: LD_INT 1
39993: ARRAY
39994: PPUSH
39995: LD_VAR 0 16
39999: PUSH
40000: LD_INT 2
40002: ARRAY
40003: PPUSH
40004: CALL_OW 111
// continue ;
40008: GO 39500
// end ; end ; r := GetDir ( tmp ) ;
40010: LD_ADDR_VAR 0 15
40014: PUSH
40015: LD_VAR 0 13
40019: PPUSH
40020: CALL_OW 254
40024: ST_TO_ADDR
// if r = 5 then
40025: LD_VAR 0 15
40029: PUSH
40030: LD_INT 5
40032: EQUAL
40033: IFFALSE 40043
// r := 0 ;
40035: LD_ADDR_VAR 0 15
40039: PUSH
40040: LD_INT 0
40042: ST_TO_ADDR
// for j = r to 5 do
40043: LD_ADDR_VAR 0 10
40047: PUSH
40048: DOUBLE
40049: LD_VAR 0 15
40053: DEC
40054: ST_TO_ADDR
40055: LD_INT 5
40057: PUSH
40058: FOR_TO
40059: IFFALSE 40173
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
40061: LD_ADDR_VAR 0 11
40065: PUSH
40066: LD_VAR 0 13
40070: PPUSH
40071: CALL_OW 250
40075: PPUSH
40076: LD_VAR 0 10
40080: PPUSH
40081: LD_INT 2
40083: PPUSH
40084: CALL_OW 272
40088: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
40089: LD_ADDR_VAR 0 12
40093: PUSH
40094: LD_VAR 0 13
40098: PPUSH
40099: CALL_OW 251
40103: PPUSH
40104: LD_VAR 0 10
40108: PPUSH
40109: LD_INT 2
40111: PPUSH
40112: CALL_OW 273
40116: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
40117: LD_VAR 0 11
40121: PPUSH
40122: LD_VAR 0 12
40126: PPUSH
40127: CALL_OW 488
40131: PUSH
40132: LD_VAR 0 11
40136: PPUSH
40137: LD_VAR 0 12
40141: PPUSH
40142: CALL_OW 428
40146: NOT
40147: AND
40148: IFFALSE 40171
// begin ComMoveXY ( tmp , _x , _y ) ;
40150: LD_VAR 0 13
40154: PPUSH
40155: LD_VAR 0 11
40159: PPUSH
40160: LD_VAR 0 12
40164: PPUSH
40165: CALL_OW 111
// break ;
40169: GO 40173
// end ; end ;
40171: GO 40058
40173: POP
40174: POP
// end ; end ;
40175: GO 39500
40177: POP
40178: POP
// end ;
40179: LD_VAR 0 8
40183: RET
// export function BuildingTechInvented ( side , btype ) ; begin
40184: LD_INT 0
40186: PPUSH
// result := true ;
40187: LD_ADDR_VAR 0 3
40191: PUSH
40192: LD_INT 1
40194: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
40195: LD_VAR 0 2
40199: PUSH
40200: LD_INT 24
40202: DOUBLE
40203: EQUAL
40204: IFTRUE 40214
40206: LD_INT 33
40208: DOUBLE
40209: EQUAL
40210: IFTRUE 40214
40212: GO 40239
40214: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
40215: LD_ADDR_VAR 0 3
40219: PUSH
40220: LD_INT 32
40222: PPUSH
40223: LD_VAR 0 1
40227: PPUSH
40228: CALL_OW 321
40232: PUSH
40233: LD_INT 2
40235: EQUAL
40236: ST_TO_ADDR
40237: GO 40555
40239: LD_INT 20
40241: DOUBLE
40242: EQUAL
40243: IFTRUE 40247
40245: GO 40272
40247: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
40248: LD_ADDR_VAR 0 3
40252: PUSH
40253: LD_INT 6
40255: PPUSH
40256: LD_VAR 0 1
40260: PPUSH
40261: CALL_OW 321
40265: PUSH
40266: LD_INT 2
40268: EQUAL
40269: ST_TO_ADDR
40270: GO 40555
40272: LD_INT 22
40274: DOUBLE
40275: EQUAL
40276: IFTRUE 40286
40278: LD_INT 36
40280: DOUBLE
40281: EQUAL
40282: IFTRUE 40286
40284: GO 40311
40286: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40287: LD_ADDR_VAR 0 3
40291: PUSH
40292: LD_INT 15
40294: PPUSH
40295: LD_VAR 0 1
40299: PPUSH
40300: CALL_OW 321
40304: PUSH
40305: LD_INT 2
40307: EQUAL
40308: ST_TO_ADDR
40309: GO 40555
40311: LD_INT 30
40313: DOUBLE
40314: EQUAL
40315: IFTRUE 40319
40317: GO 40344
40319: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40320: LD_ADDR_VAR 0 3
40324: PUSH
40325: LD_INT 20
40327: PPUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: CALL_OW 321
40337: PUSH
40338: LD_INT 2
40340: EQUAL
40341: ST_TO_ADDR
40342: GO 40555
40344: LD_INT 28
40346: DOUBLE
40347: EQUAL
40348: IFTRUE 40358
40350: LD_INT 21
40352: DOUBLE
40353: EQUAL
40354: IFTRUE 40358
40356: GO 40383
40358: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_INT 21
40366: PPUSH
40367: LD_VAR 0 1
40371: PPUSH
40372: CALL_OW 321
40376: PUSH
40377: LD_INT 2
40379: EQUAL
40380: ST_TO_ADDR
40381: GO 40555
40383: LD_INT 16
40385: DOUBLE
40386: EQUAL
40387: IFTRUE 40391
40389: GO 40416
40391: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_INT 84
40399: PPUSH
40400: LD_VAR 0 1
40404: PPUSH
40405: CALL_OW 321
40409: PUSH
40410: LD_INT 2
40412: EQUAL
40413: ST_TO_ADDR
40414: GO 40555
40416: LD_INT 19
40418: DOUBLE
40419: EQUAL
40420: IFTRUE 40430
40422: LD_INT 23
40424: DOUBLE
40425: EQUAL
40426: IFTRUE 40430
40428: GO 40455
40430: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40431: LD_ADDR_VAR 0 3
40435: PUSH
40436: LD_INT 83
40438: PPUSH
40439: LD_VAR 0 1
40443: PPUSH
40444: CALL_OW 321
40448: PUSH
40449: LD_INT 2
40451: EQUAL
40452: ST_TO_ADDR
40453: GO 40555
40455: LD_INT 17
40457: DOUBLE
40458: EQUAL
40459: IFTRUE 40463
40461: GO 40488
40463: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40464: LD_ADDR_VAR 0 3
40468: PUSH
40469: LD_INT 39
40471: PPUSH
40472: LD_VAR 0 1
40476: PPUSH
40477: CALL_OW 321
40481: PUSH
40482: LD_INT 2
40484: EQUAL
40485: ST_TO_ADDR
40486: GO 40555
40488: LD_INT 18
40490: DOUBLE
40491: EQUAL
40492: IFTRUE 40496
40494: GO 40521
40496: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40497: LD_ADDR_VAR 0 3
40501: PUSH
40502: LD_INT 40
40504: PPUSH
40505: LD_VAR 0 1
40509: PPUSH
40510: CALL_OW 321
40514: PUSH
40515: LD_INT 2
40517: EQUAL
40518: ST_TO_ADDR
40519: GO 40555
40521: LD_INT 27
40523: DOUBLE
40524: EQUAL
40525: IFTRUE 40529
40527: GO 40554
40529: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40530: LD_ADDR_VAR 0 3
40534: PUSH
40535: LD_INT 35
40537: PPUSH
40538: LD_VAR 0 1
40542: PPUSH
40543: CALL_OW 321
40547: PUSH
40548: LD_INT 2
40550: EQUAL
40551: ST_TO_ADDR
40552: GO 40555
40554: POP
// end ;
40555: LD_VAR 0 3
40559: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40560: LD_INT 0
40562: PPUSH
40563: PPUSH
40564: PPUSH
40565: PPUSH
40566: PPUSH
40567: PPUSH
40568: PPUSH
40569: PPUSH
40570: PPUSH
40571: PPUSH
40572: PPUSH
// result := false ;
40573: LD_ADDR_VAR 0 6
40577: PUSH
40578: LD_INT 0
40580: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40581: LD_VAR 0 1
40585: NOT
40586: PUSH
40587: LD_VAR 0 1
40591: PPUSH
40592: CALL_OW 266
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: LD_INT 1
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: IN
40607: NOT
40608: OR
40609: PUSH
40610: LD_VAR 0 2
40614: NOT
40615: OR
40616: PUSH
40617: LD_VAR 0 5
40621: PUSH
40622: LD_INT 0
40624: PUSH
40625: LD_INT 1
40627: PUSH
40628: LD_INT 2
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: LD_INT 4
40636: PUSH
40637: LD_INT 5
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: IN
40648: NOT
40649: OR
40650: PUSH
40651: LD_VAR 0 3
40655: PPUSH
40656: LD_VAR 0 4
40660: PPUSH
40661: CALL_OW 488
40665: NOT
40666: OR
40667: IFFALSE 40671
// exit ;
40669: GO 41407
// side := GetSide ( depot ) ;
40671: LD_ADDR_VAR 0 9
40675: PUSH
40676: LD_VAR 0 1
40680: PPUSH
40681: CALL_OW 255
40685: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40686: LD_VAR 0 9
40690: PPUSH
40691: LD_VAR 0 2
40695: PPUSH
40696: CALL 40184 0 2
40700: NOT
40701: IFFALSE 40705
// exit ;
40703: GO 41407
// pom := GetBase ( depot ) ;
40705: LD_ADDR_VAR 0 10
40709: PUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 274
40719: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40720: LD_ADDR_VAR 0 11
40724: PUSH
40725: LD_VAR 0 2
40729: PPUSH
40730: LD_VAR 0 1
40734: PPUSH
40735: CALL_OW 248
40739: PPUSH
40740: CALL_OW 450
40744: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40745: LD_VAR 0 10
40749: PPUSH
40750: LD_INT 1
40752: PPUSH
40753: CALL_OW 275
40757: PUSH
40758: LD_VAR 0 11
40762: PUSH
40763: LD_INT 1
40765: ARRAY
40766: GREATEREQUAL
40767: PUSH
40768: LD_VAR 0 10
40772: PPUSH
40773: LD_INT 2
40775: PPUSH
40776: CALL_OW 275
40780: PUSH
40781: LD_VAR 0 11
40785: PUSH
40786: LD_INT 2
40788: ARRAY
40789: GREATEREQUAL
40790: AND
40791: PUSH
40792: LD_VAR 0 10
40796: PPUSH
40797: LD_INT 3
40799: PPUSH
40800: CALL_OW 275
40804: PUSH
40805: LD_VAR 0 11
40809: PUSH
40810: LD_INT 3
40812: ARRAY
40813: GREATEREQUAL
40814: AND
40815: NOT
40816: IFFALSE 40820
// exit ;
40818: GO 41407
// if GetBType ( depot ) = b_depot then
40820: LD_VAR 0 1
40824: PPUSH
40825: CALL_OW 266
40829: PUSH
40830: LD_INT 0
40832: EQUAL
40833: IFFALSE 40845
// dist := 28 else
40835: LD_ADDR_VAR 0 14
40839: PUSH
40840: LD_INT 28
40842: ST_TO_ADDR
40843: GO 40853
// dist := 36 ;
40845: LD_ADDR_VAR 0 14
40849: PUSH
40850: LD_INT 36
40852: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40853: LD_VAR 0 1
40857: PPUSH
40858: LD_VAR 0 3
40862: PPUSH
40863: LD_VAR 0 4
40867: PPUSH
40868: CALL_OW 297
40872: PUSH
40873: LD_VAR 0 14
40877: GREATER
40878: IFFALSE 40882
// exit ;
40880: GO 41407
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40882: LD_ADDR_VAR 0 12
40886: PUSH
40887: LD_VAR 0 2
40891: PPUSH
40892: LD_VAR 0 3
40896: PPUSH
40897: LD_VAR 0 4
40901: PPUSH
40902: LD_VAR 0 5
40906: PPUSH
40907: LD_VAR 0 1
40911: PPUSH
40912: CALL_OW 248
40916: PPUSH
40917: LD_INT 0
40919: PPUSH
40920: CALL 41412 0 6
40924: ST_TO_ADDR
// if not hexes then
40925: LD_VAR 0 12
40929: NOT
40930: IFFALSE 40934
// exit ;
40932: GO 41407
// hex := GetHexInfo ( x , y ) ;
40934: LD_ADDR_VAR 0 15
40938: PUSH
40939: LD_VAR 0 3
40943: PPUSH
40944: LD_VAR 0 4
40948: PPUSH
40949: CALL_OW 546
40953: ST_TO_ADDR
// if hex [ 1 ] then
40954: LD_VAR 0 15
40958: PUSH
40959: LD_INT 1
40961: ARRAY
40962: IFFALSE 40966
// exit ;
40964: GO 41407
// height := hex [ 2 ] ;
40966: LD_ADDR_VAR 0 13
40970: PUSH
40971: LD_VAR 0 15
40975: PUSH
40976: LD_INT 2
40978: ARRAY
40979: ST_TO_ADDR
// for i = 1 to hexes do
40980: LD_ADDR_VAR 0 7
40984: PUSH
40985: DOUBLE
40986: LD_INT 1
40988: DEC
40989: ST_TO_ADDR
40990: LD_VAR 0 12
40994: PUSH
40995: FOR_TO
40996: IFFALSE 41326
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40998: LD_VAR 0 12
41002: PUSH
41003: LD_VAR 0 7
41007: ARRAY
41008: PUSH
41009: LD_INT 1
41011: ARRAY
41012: PPUSH
41013: LD_VAR 0 12
41017: PUSH
41018: LD_VAR 0 7
41022: ARRAY
41023: PUSH
41024: LD_INT 2
41026: ARRAY
41027: PPUSH
41028: CALL_OW 488
41032: NOT
41033: PUSH
41034: LD_VAR 0 12
41038: PUSH
41039: LD_VAR 0 7
41043: ARRAY
41044: PUSH
41045: LD_INT 1
41047: ARRAY
41048: PPUSH
41049: LD_VAR 0 12
41053: PUSH
41054: LD_VAR 0 7
41058: ARRAY
41059: PUSH
41060: LD_INT 2
41062: ARRAY
41063: PPUSH
41064: CALL_OW 428
41068: PUSH
41069: LD_INT 0
41071: GREATER
41072: OR
41073: PUSH
41074: LD_VAR 0 12
41078: PUSH
41079: LD_VAR 0 7
41083: ARRAY
41084: PUSH
41085: LD_INT 1
41087: ARRAY
41088: PPUSH
41089: LD_VAR 0 12
41093: PUSH
41094: LD_VAR 0 7
41098: ARRAY
41099: PUSH
41100: LD_INT 2
41102: ARRAY
41103: PPUSH
41104: CALL_OW 351
41108: OR
41109: IFFALSE 41115
// exit ;
41111: POP
41112: POP
41113: GO 41407
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41115: LD_ADDR_VAR 0 8
41119: PUSH
41120: LD_VAR 0 12
41124: PUSH
41125: LD_VAR 0 7
41129: ARRAY
41130: PUSH
41131: LD_INT 1
41133: ARRAY
41134: PPUSH
41135: LD_VAR 0 12
41139: PUSH
41140: LD_VAR 0 7
41144: ARRAY
41145: PUSH
41146: LD_INT 2
41148: ARRAY
41149: PPUSH
41150: CALL_OW 546
41154: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
41155: LD_VAR 0 8
41159: PUSH
41160: LD_INT 1
41162: ARRAY
41163: PUSH
41164: LD_VAR 0 8
41168: PUSH
41169: LD_INT 2
41171: ARRAY
41172: PUSH
41173: LD_VAR 0 13
41177: PUSH
41178: LD_INT 2
41180: PLUS
41181: GREATER
41182: OR
41183: PUSH
41184: LD_VAR 0 8
41188: PUSH
41189: LD_INT 2
41191: ARRAY
41192: PUSH
41193: LD_VAR 0 13
41197: PUSH
41198: LD_INT 2
41200: MINUS
41201: LESS
41202: OR
41203: PUSH
41204: LD_VAR 0 8
41208: PUSH
41209: LD_INT 3
41211: ARRAY
41212: PUSH
41213: LD_INT 0
41215: PUSH
41216: LD_INT 8
41218: PUSH
41219: LD_INT 9
41221: PUSH
41222: LD_INT 10
41224: PUSH
41225: LD_INT 11
41227: PUSH
41228: LD_INT 12
41230: PUSH
41231: LD_INT 13
41233: PUSH
41234: LD_INT 16
41236: PUSH
41237: LD_INT 17
41239: PUSH
41240: LD_INT 18
41242: PUSH
41243: LD_INT 19
41245: PUSH
41246: LD_INT 20
41248: PUSH
41249: LD_INT 21
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: LIST
41266: IN
41267: NOT
41268: OR
41269: PUSH
41270: LD_VAR 0 8
41274: PUSH
41275: LD_INT 5
41277: ARRAY
41278: NOT
41279: OR
41280: PUSH
41281: LD_VAR 0 8
41285: PUSH
41286: LD_INT 6
41288: ARRAY
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: LD_INT 2
41295: PUSH
41296: LD_INT 7
41298: PUSH
41299: LD_INT 9
41301: PUSH
41302: LD_INT 10
41304: PUSH
41305: LD_INT 11
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: IN
41316: NOT
41317: OR
41318: IFFALSE 41324
// exit ;
41320: POP
41321: POP
41322: GO 41407
// end ;
41324: GO 40995
41326: POP
41327: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41328: LD_VAR 0 9
41332: PPUSH
41333: LD_VAR 0 3
41337: PPUSH
41338: LD_VAR 0 4
41342: PPUSH
41343: LD_INT 20
41345: PPUSH
41346: CALL 33359 0 4
41350: PUSH
41351: LD_INT 4
41353: ARRAY
41354: IFFALSE 41358
// exit ;
41356: GO 41407
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41358: LD_VAR 0 2
41362: PUSH
41363: LD_INT 29
41365: PUSH
41366: LD_INT 30
41368: PUSH
41369: EMPTY
41370: LIST
41371: LIST
41372: IN
41373: PUSH
41374: LD_VAR 0 3
41378: PPUSH
41379: LD_VAR 0 4
41383: PPUSH
41384: LD_VAR 0 9
41388: PPUSH
41389: CALL_OW 440
41393: NOT
41394: AND
41395: IFFALSE 41399
// exit ;
41397: GO 41407
// result := true ;
41399: LD_ADDR_VAR 0 6
41403: PUSH
41404: LD_INT 1
41406: ST_TO_ADDR
// end ;
41407: LD_VAR 0 6
41411: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41412: LD_INT 0
41414: PPUSH
41415: PPUSH
41416: PPUSH
41417: PPUSH
41418: PPUSH
41419: PPUSH
41420: PPUSH
41421: PPUSH
41422: PPUSH
41423: PPUSH
41424: PPUSH
41425: PPUSH
41426: PPUSH
41427: PPUSH
41428: PPUSH
41429: PPUSH
41430: PPUSH
41431: PPUSH
41432: PPUSH
41433: PPUSH
41434: PPUSH
41435: PPUSH
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
41440: PPUSH
41441: PPUSH
41442: PPUSH
41443: PPUSH
41444: PPUSH
41445: PPUSH
41446: PPUSH
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
41460: PPUSH
41461: PPUSH
41462: PPUSH
41463: PPUSH
41464: PPUSH
41465: PPUSH
41466: PPUSH
41467: PPUSH
41468: PPUSH
41469: PPUSH
41470: PPUSH
41471: PPUSH
// result = [ ] ;
41472: LD_ADDR_VAR 0 7
41476: PUSH
41477: EMPTY
41478: ST_TO_ADDR
// temp_list = [ ] ;
41479: LD_ADDR_VAR 0 9
41483: PUSH
41484: EMPTY
41485: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41486: LD_VAR 0 4
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 2
41499: PUSH
41500: LD_INT 3
41502: PUSH
41503: LD_INT 4
41505: PUSH
41506: LD_INT 5
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: IN
41517: NOT
41518: PUSH
41519: LD_VAR 0 1
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: IN
41534: PUSH
41535: LD_VAR 0 5
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 3
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: IN
41554: NOT
41555: AND
41556: OR
41557: IFFALSE 41561
// exit ;
41559: GO 59952
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41561: LD_VAR 0 1
41565: PUSH
41566: LD_INT 6
41568: PUSH
41569: LD_INT 7
41571: PUSH
41572: LD_INT 8
41574: PUSH
41575: LD_INT 13
41577: PUSH
41578: LD_INT 12
41580: PUSH
41581: LD_INT 15
41583: PUSH
41584: LD_INT 11
41586: PUSH
41587: LD_INT 14
41589: PUSH
41590: LD_INT 10
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: IN
41604: IFFALSE 41614
// btype = b_lab ;
41606: LD_ADDR_VAR 0 1
41610: PUSH
41611: LD_INT 6
41613: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41614: LD_VAR 0 6
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 1
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: IN
41633: NOT
41634: PUSH
41635: LD_VAR 0 1
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 3
41651: PUSH
41652: LD_INT 6
41654: PUSH
41655: LD_INT 36
41657: PUSH
41658: LD_INT 4
41660: PUSH
41661: LD_INT 5
41663: PUSH
41664: LD_INT 31
41666: PUSH
41667: LD_INT 32
41669: PUSH
41670: LD_INT 33
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: LIST
41683: LIST
41684: LIST
41685: IN
41686: NOT
41687: PUSH
41688: LD_VAR 0 6
41692: PUSH
41693: LD_INT 1
41695: EQUAL
41696: AND
41697: OR
41698: PUSH
41699: LD_VAR 0 1
41703: PUSH
41704: LD_INT 2
41706: PUSH
41707: LD_INT 3
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: IN
41714: NOT
41715: PUSH
41716: LD_VAR 0 6
41720: PUSH
41721: LD_INT 2
41723: EQUAL
41724: AND
41725: OR
41726: IFFALSE 41736
// mode = 0 ;
41728: LD_ADDR_VAR 0 6
41732: PUSH
41733: LD_INT 0
41735: ST_TO_ADDR
// case mode of 0 :
41736: LD_VAR 0 6
41740: PUSH
41741: LD_INT 0
41743: DOUBLE
41744: EQUAL
41745: IFTRUE 41749
41747: GO 53202
41749: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41750: LD_ADDR_VAR 0 11
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: LD_INT 0
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: LD_INT 1
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 1
41778: PUSH
41779: LD_INT 0
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: LD_INT 1
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: LD_INT 0
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 1
41808: NEG
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: LD_INT 2
41835: NEG
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 2
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 2
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 0
41875: PUSH
41876: LD_INT 2
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 1
41885: NEG
41886: PUSH
41887: LD_INT 1
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PUSH
41897: LD_INT 3
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 0
41906: PUSH
41907: LD_INT 3
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41943: LD_ADDR_VAR 0 12
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 0
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 0
41960: PUSH
41961: LD_INT 1
41963: NEG
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: LD_INT 1
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: LD_INT 1
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 0
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 1
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 2
42066: NEG
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 2
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 2
42089: NEG
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: NEG
42101: PUSH
42102: LD_INT 0
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42139: LD_ADDR_VAR 0 13
42143: PUSH
42144: LD_INT 0
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: LD_INT 0
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 1
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: LD_INT 1
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 0
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: NEG
42209: PUSH
42210: LD_INT 1
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: NEG
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 2
42232: PUSH
42233: LD_INT 1
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: PUSH
42253: LD_INT 2
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: LD_INT 1
42266: NEG
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: PUSH
42272: LD_INT 2
42274: NEG
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: LD_INT 3
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: LD_INT 3
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42338: LD_ADDR_VAR 0 14
42342: PUSH
42343: LD_INT 0
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 0
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 1
42366: PUSH
42367: LD_INT 0
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 1
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 1
42407: NEG
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 1
42419: NEG
42420: PUSH
42421: LD_INT 2
42423: NEG
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 2
42434: NEG
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 1
42442: PUSH
42443: LD_INT 1
42445: NEG
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: LD_INT 2
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: LD_INT 0
42463: PUSH
42464: LD_INT 2
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: LD_INT 1
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 3
42488: NEG
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: LD_INT 3
42499: NEG
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: LD_INT 2
42510: NEG
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42534: LD_ADDR_VAR 0 15
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 0
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 0
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 0
42582: PUSH
42583: LD_INT 1
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 0
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 0
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 2
42636: PUSH
42637: LD_INT 1
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: NEG
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 2
42657: NEG
42658: PUSH
42659: LD_INT 0
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 2
42668: NEG
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 2
42680: PUSH
42681: LD_INT 1
42683: NEG
42684: PUSH
42685: EMPTY
42686: LIST
42687: LIST
42688: PUSH
42689: LD_INT 3
42691: PUSH
42692: LD_INT 0
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 3
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: LIST
42722: LIST
42723: LIST
42724: LIST
42725: LIST
42726: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42727: LD_ADDR_VAR 0 16
42731: PUSH
42732: LD_INT 0
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: EMPTY
42739: LIST
42740: LIST
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: LD_INT 0
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 1
42765: PUSH
42766: LD_INT 1
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 1
42785: NEG
42786: PUSH
42787: LD_INT 0
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: LD_INT 1
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: LD_INT 2
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 2
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: LD_INT 2
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: NEG
42863: PUSH
42864: LD_INT 2
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 3
42884: PUSH
42885: LD_INT 3
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 2
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42920: LD_ADDR_VAR 0 17
42924: PUSH
42925: LD_INT 0
42927: PUSH
42928: LD_INT 0
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 0
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 1
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: NEG
42990: PUSH
42991: LD_INT 1
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 2
43005: NEG
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 1
43027: NEG
43028: PUSH
43029: EMPTY
43030: LIST
43031: LIST
43032: PUSH
43033: LD_INT 2
43035: PUSH
43036: LD_INT 0
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 1
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 2
43055: PUSH
43056: LD_INT 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 1
43065: PUSH
43066: LD_INT 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 2
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: LD_INT 2
43119: NEG
43120: PUSH
43121: LD_INT 2
43123: NEG
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43150: LD_ADDR_VAR 0 18
43154: PUSH
43155: LD_INT 0
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 1
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 1
43208: NEG
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: NEG
43220: PUSH
43221: LD_INT 1
43223: NEG
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: LD_INT 1
43231: NEG
43232: PUSH
43233: LD_INT 2
43235: NEG
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: LD_INT 2
43246: NEG
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: PUSH
43255: LD_INT 1
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 0
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 2
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 2
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: PUSH
43296: LD_INT 2
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: LD_INT 2
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 1
43315: NEG
43316: PUSH
43317: LD_INT 1
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: LD_INT 0
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43380: LD_ADDR_VAR 0 19
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: LD_INT 0
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 1
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: PUSH
43422: EMPTY
43423: LIST
43424: LIST
43425: PUSH
43426: LD_INT 0
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: NEG
43439: PUSH
43440: LD_INT 0
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 1
43449: NEG
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: LD_INT 2
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: PUSH
43485: LD_INT 1
43487: NEG
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 2
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: LD_INT 2
43515: PUSH
43516: LD_INT 2
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 1
43525: PUSH
43526: LD_INT 2
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 0
43535: PUSH
43536: LD_INT 2
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 1
43545: NEG
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 2
43556: NEG
43557: PUSH
43558: LD_INT 0
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 2
43567: NEG
43568: PUSH
43569: LD_INT 1
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 2
43579: NEG
43580: PUSH
43581: LD_INT 2
43583: NEG
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43610: LD_ADDR_VAR 0 20
43614: PUSH
43615: LD_INT 0
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PUSH
43625: LD_INT 0
43627: PUSH
43628: LD_INT 1
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 1
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: PUSH
43649: LD_INT 1
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 0
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: EMPTY
43663: LIST
43664: LIST
43665: PUSH
43666: LD_INT 1
43668: NEG
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: EMPTY
43674: LIST
43675: LIST
43676: PUSH
43677: LD_INT 1
43679: NEG
43680: PUSH
43681: LD_INT 1
43683: NEG
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 2
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 0
43703: PUSH
43704: LD_INT 2
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 1
43717: NEG
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 0
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 2
43786: NEG
43787: PUSH
43788: LD_INT 0
43790: PUSH
43791: EMPTY
43792: LIST
43793: LIST
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: LD_INT 1
43801: NEG
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: NEG
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43840: LD_ADDR_VAR 0 21
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 0
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 1
43860: NEG
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: LD_INT 0
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 1
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 0
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 2
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: EMPTY
43939: LIST
43940: LIST
43941: PUSH
43942: LD_INT 1
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 2
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: PUSH
43976: LD_INT 2
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 1
43985: PUSH
43986: LD_INT 2
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: NEG
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: LD_INT 2
44016: NEG
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: NEG
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: LIST
44053: LIST
44054: LIST
44055: LIST
44056: LIST
44057: LIST
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44070: LD_ADDR_VAR 0 22
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: LD_INT 0
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: NEG
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: NEG
44152: PUSH
44153: LD_INT 2
44155: NEG
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 2
44185: PUSH
44186: LD_INT 0
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 2
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 2
44205: PUSH
44206: LD_INT 2
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 1
44215: PUSH
44216: LD_INT 2
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 0
44225: PUSH
44226: LD_INT 2
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 1
44235: NEG
44236: PUSH
44237: LD_INT 1
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 2
44246: NEG
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 2
44257: NEG
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: LD_INT 2
44273: NEG
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44300: LD_ADDR_VAR 0 23
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 0
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 1
44381: NEG
44382: PUSH
44383: LD_INT 2
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: PUSH
44405: LD_INT 1
44407: NEG
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 2
44415: PUSH
44416: LD_INT 0
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 2
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 2
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 1
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: NEG
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 2
44511: NEG
44512: PUSH
44513: LD_INT 3
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: LD_INT 3
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 1
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: LIST
44569: LIST
44570: LIST
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44580: LD_ADDR_VAR 0 24
44584: PUSH
44585: LD_INT 0
44587: PUSH
44588: LD_INT 0
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 0
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: LD_INT 1
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 1
44638: NEG
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: NEG
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 0
44673: PUSH
44674: LD_INT 2
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: LD_INT 1
44687: NEG
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 2
44695: PUSH
44696: LD_INT 0
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: LD_INT 2
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 1
44725: PUSH
44726: LD_INT 2
44728: PUSH
44729: EMPTY
44730: LIST
44731: LIST
44732: PUSH
44733: LD_INT 0
44735: PUSH
44736: LD_INT 2
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 2
44756: NEG
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 2
44767: NEG
44768: PUSH
44769: LD_INT 1
44771: NEG
44772: PUSH
44773: EMPTY
44774: LIST
44775: LIST
44776: PUSH
44777: LD_INT 2
44779: NEG
44780: PUSH
44781: LD_INT 2
44783: NEG
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 1
44805: NEG
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 3
44813: PUSH
44814: LD_INT 1
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 3
44823: PUSH
44824: LD_INT 2
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44856: LD_ADDR_VAR 0 25
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 1
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 1
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: LD_INT 1
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: NEG
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: NEG
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 2
44941: NEG
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 0
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: LD_INT 0
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 2
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 2
44991: PUSH
44992: LD_INT 2
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 2
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 2
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 1
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: LD_INT 2
45080: PUSH
45081: EMPTY
45082: LIST
45083: LIST
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: LD_INT 3
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
45130: LD_ADDR_VAR 0 26
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: LD_INT 1
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: NEG
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 1
45199: NEG
45200: PUSH
45201: LD_INT 1
45203: NEG
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 2
45215: NEG
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 2
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 2
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: PUSH
45256: LD_INT 1
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PUSH
45263: LD_INT 2
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: EMPTY
45280: LIST
45281: LIST
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: EMPTY
45290: LIST
45291: LIST
45292: PUSH
45293: LD_INT 1
45295: NEG
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 2
45306: NEG
45307: PUSH
45308: LD_INT 0
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 2
45317: NEG
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 3
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: NEG
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45406: LD_ADDR_VAR 0 27
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 2
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 1
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: LD_INT 2
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: LD_INT 2
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 1
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 0
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: NEG
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 2
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 3
45639: NEG
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 3
45651: NEG
45652: PUSH
45653: LD_INT 2
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45686: LD_ADDR_VAR 0 28
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: LD_INT 0
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PUSH
45753: LD_INT 1
45755: NEG
45756: PUSH
45757: LD_INT 1
45759: NEG
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: LD_INT 2
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 0
45779: PUSH
45780: LD_INT 2
45782: NEG
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 1
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: LD_INT 0
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: LD_INT 0
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: NEG
45874: PUSH
45875: LD_INT 1
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: LD_INT 3
45901: NEG
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 3
45921: NEG
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45968: LD_ADDR_VAR 0 29
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 0
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: PUSH
46004: LD_INT 1
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 0
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: NEG
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 1
46037: NEG
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: PUSH
46047: LD_INT 1
46049: NEG
46050: PUSH
46051: LD_INT 2
46053: NEG
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 2
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: PUSH
46104: LD_INT 2
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 2
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: LD_INT 1
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 2
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: LD_INT 3
46162: NEG
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 2
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 3
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 1
46191: PUSH
46192: LD_INT 3
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 2
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 3
46212: NEG
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: LIST
46241: LIST
46242: LIST
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46247: LD_ADDR_VAR 0 30
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 0
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: LD_INT 0
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 1
46285: PUSH
46286: LD_INT 1
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 0
46295: PUSH
46296: LD_INT 1
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: NEG
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 1
46316: NEG
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: PUSH
46326: LD_INT 1
46328: NEG
46329: PUSH
46330: LD_INT 2
46332: NEG
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: LD_INT 2
46343: NEG
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: PUSH
46352: LD_INT 1
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 2
46382: PUSH
46383: LD_INT 2
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: NEG
46403: PUSH
46404: LD_INT 1
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: NEG
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: NEG
46437: PUSH
46438: LD_INT 3
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 2
46451: NEG
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 3
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: LD_INT 3
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 3
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46525: LD_ADDR_VAR 0 31
46529: PUSH
46530: LD_INT 0
46532: PUSH
46533: LD_INT 0
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: PUSH
46540: LD_INT 0
46542: PUSH
46543: LD_INT 1
46545: NEG
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 1
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 1
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: NEG
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: LD_INT 2
46610: NEG
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 2
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 2
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 2
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 2
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 2
46714: NEG
46715: PUSH
46716: LD_INT 3
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 3
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 2
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46803: LD_ADDR_VAR 0 32
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 0
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 0
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 0
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: NEG
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 1
46884: NEG
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 0
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 1
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 1
46992: NEG
46993: PUSH
46994: LD_INT 3
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: PUSH
47016: LD_INT 2
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 2
47025: PUSH
47026: LD_INT 3
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 2
47035: NEG
47036: PUSH
47037: LD_INT 1
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 3
47046: NEG
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47081: LD_ADDR_VAR 0 33
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: NEG
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: NEG
47237: PUSH
47238: LD_INT 0
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 2
47271: NEG
47272: PUSH
47273: LD_INT 3
47275: NEG
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: PUSH
47281: LD_INT 2
47283: PUSH
47284: LD_INT 1
47286: NEG
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 3
47294: PUSH
47295: LD_INT 1
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 2
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 3
47325: NEG
47326: PUSH
47327: LD_INT 2
47329: NEG
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: LIST
47342: LIST
47343: LIST
47344: LIST
47345: LIST
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47360: LD_ADDR_VAR 0 34
47364: PUSH
47365: LD_INT 0
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 1
47380: NEG
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 1
47388: PUSH
47389: LD_INT 0
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 1
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 0
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 1
47429: NEG
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 1
47441: NEG
47442: PUSH
47443: LD_INT 2
47445: NEG
47446: PUSH
47447: EMPTY
47448: LIST
47449: LIST
47450: PUSH
47451: LD_INT 0
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: NEG
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 2
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 2
47485: PUSH
47486: LD_INT 2
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 2
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: NEG
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 2
47527: NEG
47528: PUSH
47529: LD_INT 1
47531: NEG
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: PUSH
47537: LD_INT 2
47539: NEG
47540: PUSH
47541: LD_INT 2
47543: NEG
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 3
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: PUSH
47564: LD_INT 2
47566: NEG
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 2
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: LD_INT 3
47587: PUSH
47588: EMPTY
47589: LIST
47590: LIST
47591: PUSH
47592: LD_INT 2
47594: NEG
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 3
47605: NEG
47606: PUSH
47607: LD_INT 1
47609: NEG
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: LIST
47627: LIST
47628: LIST
47629: LIST
47630: LIST
47631: LIST
47632: LIST
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47640: LD_ADDR_VAR 0 35
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: NEG
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47752: LD_ADDR_VAR 0 36
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: LD_INT 1
47772: NEG
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 1
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 1
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 1
47810: NEG
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: NEG
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 2
47837: NEG
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47864: LD_ADDR_VAR 0 37
47868: PUSH
47869: LD_INT 0
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: PUSH
47900: LD_INT 1
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 0
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 1
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47976: LD_ADDR_VAR 0 38
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 2
48067: NEG
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
48088: LD_ADDR_VAR 0 39
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 0
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 0
48136: PUSH
48137: LD_INT 1
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: NEG
48147: PUSH
48148: LD_INT 0
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 1
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
48200: LD_ADDR_VAR 0 40
48204: PUSH
48205: LD_INT 0
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 0
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: NEG
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 1
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48312: LD_ADDR_VAR 0 41
48316: PUSH
48317: LD_INT 0
48319: PUSH
48320: LD_INT 0
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 1
48340: PUSH
48341: LD_INT 0
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 1
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 1
48393: NEG
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 1
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: LD_INT 2
48416: PUSH
48417: LD_INT 0
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 2
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 2
48467: NEG
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: NEG
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 2
48490: NEG
48491: PUSH
48492: LD_INT 2
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: NEG
48503: PUSH
48504: LD_INT 3
48506: NEG
48507: PUSH
48508: EMPTY
48509: LIST
48510: LIST
48511: PUSH
48512: LD_INT 2
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 3
48535: PUSH
48536: LD_INT 1
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 3
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 3
48555: PUSH
48556: LD_INT 3
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 2
48565: PUSH
48566: LD_INT 3
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: LD_INT 2
48575: NEG
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 3
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 3
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 3
48621: NEG
48622: PUSH
48623: LD_INT 3
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48662: LD_ADDR_VAR 0 42
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: LD_INT 1
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 1
48720: NEG
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: LD_INT 1
48735: NEG
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 2
48747: NEG
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 2
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: LD_INT 2
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 2
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 0
48807: PUSH
48808: LD_INT 2
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: NEG
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 2
48840: NEG
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 3
48856: NEG
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: LD_INT 3
48868: NEG
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 0
48876: PUSH
48877: LD_INT 3
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 3
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: LD_INT 3
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 3
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: NEG
48949: PUSH
48950: LD_INT 2
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 3
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 3
48971: NEG
48972: PUSH
48973: LD_INT 3
48975: NEG
48976: PUSH
48977: EMPTY
48978: LIST
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49012: LD_ADDR_VAR 0 43
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 0
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 0
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: NEG
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: NEG
49202: PUSH
49203: LD_INT 3
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 0
49213: PUSH
49214: LD_INT 3
49216: NEG
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: LD_INT 2
49227: NEG
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 3
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 3
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 3
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 3
49308: NEG
49309: PUSH
49310: LD_INT 0
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 3
49319: NEG
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49360: LD_ADDR_VAR 0 44
49364: PUSH
49365: LD_INT 0
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: PUSH
49399: LD_INT 1
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 1
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 0
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: PUSH
49475: LD_INT 1
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 2
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 2
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 0
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 3
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 3
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 3
49593: PUSH
49594: LD_INT 2
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 3
49603: PUSH
49604: LD_INT 3
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: PUSH
49614: LD_INT 3
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 2
49623: NEG
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 3
49634: NEG
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 3
49645: NEG
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 3
49657: NEG
49658: PUSH
49659: LD_INT 2
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 3
49669: NEG
49670: PUSH
49671: LD_INT 3
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49710: LD_ADDR_VAR 0 45
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 0
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 1
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: NEG
49769: PUSH
49770: LD_INT 0
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: LD_INT 1
49783: NEG
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: LD_INT 2
49795: NEG
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: LD_INT 2
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 1
49865: NEG
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 2
49876: NEG
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: NEG
49889: PUSH
49890: LD_INT 2
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: LD_INT 3
49904: NEG
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: LD_INT 3
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 3
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 2
49938: NEG
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 3
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 2
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 3
50007: NEG
50008: PUSH
50009: LD_INT 2
50011: NEG
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: LD_INT 3
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: LIST
50055: LIST
50056: LIST
50057: LIST
50058: LIST
50059: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50060: LD_ADDR_VAR 0 46
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 0
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 1
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 1
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: LD_INT 2
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: LD_INT 1
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 2
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 2
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 0
50205: PUSH
50206: LD_INT 2
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 3
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 0
50261: PUSH
50262: LD_INT 3
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 1
50272: PUSH
50273: LD_INT 2
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 0
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 3
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 0
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 1
50334: NEG
50335: PUSH
50336: LD_INT 2
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: LD_INT 1
50371: NEG
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50408: LD_ADDR_VAR 0 47
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 0
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_INT 1
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 1
50446: PUSH
50447: LD_INT 1
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: NEG
50478: PUSH
50479: LD_INT 1
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 2
50523: NEG
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50559: LD_ADDR_VAR 0 48
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50706: LD_ADDR_VAR 0 49
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: LD_INT 1
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 0
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 1
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 1
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 1
50764: NEG
50765: PUSH
50766: LD_INT 0
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 1
50775: NEG
50776: PUSH
50777: LD_INT 1
50779: NEG
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 1
50787: PUSH
50788: LD_INT 1
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: LD_INT 0
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: LD_INT 2
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 2
50818: PUSH
50819: LD_INT 2
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 2
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50850: LD_ADDR_VAR 0 50
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: LD_INT 0
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: NEG
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: LD_INT 1
50923: NEG
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 1
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 2
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: LD_INT 1
50951: PUSH
50952: LD_INT 2
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: LD_INT 2
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50994: LD_ADDR_VAR 0 51
50998: PUSH
50999: LD_INT 0
51001: PUSH
51002: LD_INT 0
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 0
51011: PUSH
51012: LD_INT 1
51014: NEG
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 0
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: NEG
51053: PUSH
51054: LD_INT 0
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 1
51063: NEG
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 0
51085: PUSH
51086: LD_INT 2
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 1
51095: NEG
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 2
51106: NEG
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 2
51117: NEG
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: LIST
51138: LIST
51139: LIST
51140: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51141: LD_ADDR_VAR 0 52
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: LD_INT 1
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: PUSH
51180: LD_INT 1
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: LD_INT 1
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 1
51222: NEG
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: NEG
51246: PUSH
51247: LD_INT 0
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 2
51268: NEG
51269: PUSH
51270: LD_INT 2
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51292: LD_ADDR_VAR 0 53
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: LD_INT 1
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: NEG
51362: PUSH
51363: LD_INT 1
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: LD_INT 2
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 2
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: LD_INT 0
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 2
51427: PUSH
51428: LD_INT 2
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 2
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 2
51468: NEG
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: LD_INT 1
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: LD_INT 2
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51522: LD_ADDR_VAR 0 54
51526: PUSH
51527: LD_INT 0
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: EMPTY
51534: LIST
51535: LIST
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: PUSH
51561: LD_INT 1
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 1
51595: NEG
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 1
51603: NEG
51604: PUSH
51605: LD_INT 2
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: LD_INT 2
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 1
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 2
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 1
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 2
51698: NEG
51699: PUSH
51700: LD_INT 0
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 2
51709: NEG
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: LD_INT 2
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51752: LD_ADDR_VAR 0 55
51756: PUSH
51757: LD_INT 0
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 1
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: PUSH
51791: LD_INT 1
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 0
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: NEG
51834: PUSH
51835: LD_INT 2
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: LD_INT 2
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 2
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 2
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: NEG
51918: PUSH
51919: LD_INT 1
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: NEG
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: LD_INT 2
51955: NEG
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: EMPTY
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51982: LD_ADDR_VAR 0 56
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: LD_INT 1
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 2
52067: NEG
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 0
52075: PUSH
52076: LD_INT 2
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: LD_INT 0
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: PUSH
52108: LD_INT 1
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 2
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: EMPTY
52122: LIST
52123: LIST
52124: PUSH
52125: LD_INT 1
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: PUSH
52135: LD_INT 0
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: LD_INT 1
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 0
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 2
52169: NEG
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52212: LD_ADDR_VAR 0 57
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: PUSH
52251: LD_INT 1
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: LD_INT 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 1
52270: NEG
52271: PUSH
52272: LD_INT 0
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: LD_INT 1
52293: NEG
52294: PUSH
52295: LD_INT 2
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: LD_INT 2
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 2
52327: PUSH
52328: LD_INT 0
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 2
52337: PUSH
52338: LD_INT 1
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: LD_INT 2
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: PUSH
52358: LD_INT 2
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 2
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: PUSH
52375: LD_INT 1
52377: NEG
52378: PUSH
52379: LD_INT 1
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 2
52388: NEG
52389: PUSH
52390: LD_INT 0
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: LD_INT 1
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 2
52411: NEG
52412: PUSH
52413: LD_INT 2
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52442: LD_ADDR_VAR 0 58
52446: PUSH
52447: LD_INT 0
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 0
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: LD_INT 1
52515: NEG
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: LD_INT 2
52527: NEG
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: LD_INT 2
52538: NEG
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 1
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: PUSH
52568: LD_INT 1
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: PUSH
52578: LD_INT 2
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 0
52597: PUSH
52598: LD_INT 2
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: NEG
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: NEG
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: LD_INT 1
52633: NEG
52634: PUSH
52635: EMPTY
52636: LIST
52637: LIST
52638: PUSH
52639: LD_INT 2
52641: NEG
52642: PUSH
52643: LD_INT 2
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: LIST
52655: LIST
52656: LIST
52657: LIST
52658: LIST
52659: LIST
52660: LIST
52661: LIST
52662: LIST
52663: LIST
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: LIST
52671: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52672: LD_ADDR_VAR 0 59
52676: PUSH
52677: LD_INT 0
52679: PUSH
52680: LD_INT 0
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 1
52692: NEG
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 1
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: PUSH
52711: LD_INT 1
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 1
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: NEG
52742: PUSH
52743: LD_INT 1
52745: NEG
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52760: LD_ADDR_VAR 0 60
52764: PUSH
52765: LD_INT 0
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 0
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: LD_INT 1
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52848: LD_ADDR_VAR 0 61
52852: PUSH
52853: LD_INT 0
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 1
52886: PUSH
52887: LD_INT 1
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 0
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: EMPTY
52912: LIST
52913: LIST
52914: PUSH
52915: LD_INT 1
52917: NEG
52918: PUSH
52919: LD_INT 1
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52936: LD_ADDR_VAR 0 62
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: LD_INT 1
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 0
52984: PUSH
52985: LD_INT 1
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 1
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53024: LD_ADDR_VAR 0 63
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 0
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 0
53072: PUSH
53073: LD_INT 1
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 1
53082: NEG
53083: PUSH
53084: LD_INT 0
53086: PUSH
53087: EMPTY
53088: LIST
53089: LIST
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
53112: LD_ADDR_VAR 0 64
53116: PUSH
53117: LD_INT 0
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: LD_INT 0
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 0
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// end ; 1 :
53200: GO 59097
53202: LD_INT 1
53204: DOUBLE
53205: EQUAL
53206: IFTRUE 53210
53208: GO 55833
53210: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53211: LD_ADDR_VAR 0 11
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 2
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53255: LD_ADDR_VAR 0 12
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 1
53265: NEG
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 0
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: LIST
53295: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53296: LD_ADDR_VAR 0 13
53300: PUSH
53301: LD_INT 3
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 3
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 2
53323: PUSH
53324: LD_INT 3
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53336: LD_ADDR_VAR 0 14
53340: PUSH
53341: LD_INT 1
53343: PUSH
53344: LD_INT 3
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53377: LD_ADDR_VAR 0 15
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53421: LD_ADDR_VAR 0 16
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: LD_INT 3
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 3
53440: NEG
53441: PUSH
53442: LD_INT 2
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 3
53452: NEG
53453: PUSH
53454: LD_INT 3
53456: NEG
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: LIST
53466: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53467: LD_ADDR_VAR 0 17
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 2
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: LIST
53510: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53511: LD_ADDR_VAR 0 18
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: LIST
53551: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53552: LD_ADDR_VAR 0 19
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: LD_INT 2
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 3
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: PUSH
53580: LD_INT 3
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53592: LD_ADDR_VAR 0 20
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: LIST
53632: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53633: LD_ADDR_VAR 0 21
53637: PUSH
53638: LD_INT 2
53640: NEG
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 3
53651: NEG
53652: PUSH
53653: LD_INT 0
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: LD_INT 1
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53677: LD_ADDR_VAR 0 22
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: LD_INT 3
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 3
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: LD_INT 3
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: LIST
53722: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53723: LD_ADDR_VAR 0 23
53727: PUSH
53728: LD_INT 0
53730: PUSH
53731: LD_INT 3
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 4
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: LIST
53766: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53767: LD_ADDR_VAR 0 24
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: LD_INT 1
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 4
53795: PUSH
53796: LD_INT 1
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: EMPTY
53804: LIST
53805: LIST
53806: LIST
53807: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53808: LD_ADDR_VAR 0 25
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 3
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 4
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: PUSH
53836: LD_INT 4
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53848: LD_ADDR_VAR 0 26
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: LD_INT 4
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 1
53875: NEG
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53889: LD_ADDR_VAR 0 27
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 4
53918: NEG
53919: PUSH
53920: LD_INT 1
53922: NEG
53923: PUSH
53924: EMPTY
53925: LIST
53926: LIST
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: LIST
53932: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53933: LD_ADDR_VAR 0 28
53937: PUSH
53938: LD_INT 3
53940: NEG
53941: PUSH
53942: LD_INT 3
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: LD_INT 4
53956: NEG
53957: PUSH
53958: EMPTY
53959: LIST
53960: LIST
53961: PUSH
53962: LD_INT 4
53964: NEG
53965: PUSH
53966: LD_INT 3
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: LIST
53978: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53979: LD_ADDR_VAR 0 29
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 0
53998: PUSH
53999: LD_INT 3
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 1
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 4
54024: NEG
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 0
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 5
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 5
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 4
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: LD_INT 6
54092: NEG
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 0
54100: PUSH
54101: LD_INT 6
54103: NEG
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 1
54111: PUSH
54112: LD_INT 5
54114: NEG
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
54134: LD_ADDR_VAR 0 30
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: LD_INT 0
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 3
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 4
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 4
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 4
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 5
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 5
54224: PUSH
54225: LD_INT 1
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 5
54234: PUSH
54235: LD_INT 1
54237: NEG
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 6
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 6
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54277: LD_ADDR_VAR 0 31
54281: PUSH
54282: LD_INT 3
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 3
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 2
54304: PUSH
54305: LD_INT 3
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 4
54314: PUSH
54315: LD_INT 3
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 4
54324: PUSH
54325: LD_INT 4
54327: PUSH
54328: EMPTY
54329: LIST
54330: LIST
54331: PUSH
54332: LD_INT 3
54334: PUSH
54335: LD_INT 4
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 5
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 5
54354: PUSH
54355: LD_INT 5
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 4
54364: PUSH
54365: LD_INT 5
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 6
54374: PUSH
54375: LD_INT 5
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 6
54384: PUSH
54385: LD_INT 6
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 5
54394: PUSH
54395: LD_INT 6
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54416: LD_ADDR_VAR 0 32
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: LD_INT 4
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 0
54464: PUSH
54465: LD_INT 4
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: LD_INT 5
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 5
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: NEG
54506: PUSH
54507: LD_INT 4
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 6
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: LD_INT 6
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: LD_INT 5
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54559: LD_ADDR_VAR 0 33
54563: PUSH
54564: LD_INT 2
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 3
54600: NEG
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 4
54611: NEG
54612: PUSH
54613: LD_INT 0
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 4
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 4
54634: NEG
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 5
54645: NEG
54646: PUSH
54647: LD_INT 0
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 5
54656: NEG
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 5
54668: NEG
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 6
54679: NEG
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 6
54690: NEG
54691: PUSH
54692: LD_INT 1
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54714: LD_ADDR_VAR 0 34
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 3
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 3
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: LD_INT 4
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 4
54769: NEG
54770: PUSH
54771: LD_INT 3
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: LD_INT 4
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 4
54793: NEG
54794: PUSH
54795: LD_INT 5
54797: NEG
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: PUSH
54803: LD_INT 5
54805: NEG
54806: PUSH
54807: LD_INT 4
54809: NEG
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 5
54817: NEG
54818: PUSH
54819: LD_INT 5
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 5
54829: NEG
54830: PUSH
54831: LD_INT 6
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 6
54841: NEG
54842: PUSH
54843: LD_INT 5
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 6
54853: NEG
54854: PUSH
54855: LD_INT 6
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54877: LD_ADDR_VAR 0 41
54881: PUSH
54882: LD_INT 0
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: NEG
54896: PUSH
54897: LD_INT 3
54899: NEG
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54921: LD_ADDR_VAR 0 42
54925: PUSH
54926: LD_INT 2
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: PUSH
54936: LD_INT 2
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: LIST
54961: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54962: LD_ADDR_VAR 0 43
54966: PUSH
54967: LD_INT 2
54969: PUSH
54970: LD_INT 2
54972: PUSH
54973: EMPTY
54974: LIST
54975: LIST
54976: PUSH
54977: LD_INT 3
54979: PUSH
54980: LD_INT 2
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 2
54989: PUSH
54990: LD_INT 3
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: LIST
55001: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
55002: LD_ADDR_VAR 0 44
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 3
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 2
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: LIST
55042: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55043: LD_ADDR_VAR 0 45
55047: PUSH
55048: LD_INT 2
55050: NEG
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: LIST
55086: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
55087: LD_ADDR_VAR 0 46
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: NEG
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 3
55118: NEG
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: LIST
55132: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
55133: LD_ADDR_VAR 0 47
55137: PUSH
55138: LD_INT 2
55140: NEG
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55166: LD_ADDR_VAR 0 48
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 2
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
55197: LD_ADDR_VAR 0 49
55201: PUSH
55202: LD_INT 3
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55226: LD_ADDR_VAR 0 50
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: PUSH
55244: LD_INT 3
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55255: LD_ADDR_VAR 0 51
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: LD_INT 1
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55286: LD_ADDR_VAR 0 52
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 3
55305: NEG
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55319: LD_ADDR_VAR 0 53
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: LD_INT 3
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 3
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 1
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: LIST
55362: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55363: LD_ADDR_VAR 0 54
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: LD_INT 1
55373: NEG
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: LD_INT 0
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 1
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: EMPTY
55400: LIST
55401: LIST
55402: LIST
55403: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55404: LD_ADDR_VAR 0 55
55408: PUSH
55409: LD_INT 3
55411: PUSH
55412: LD_INT 2
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: PUSH
55422: LD_INT 3
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: PUSH
55432: LD_INT 3
55434: PUSH
55435: EMPTY
55436: LIST
55437: LIST
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: LIST
55443: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55444: LD_ADDR_VAR 0 56
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 3
55454: PUSH
55455: EMPTY
55456: LIST
55457: LIST
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: LD_INT 3
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: LIST
55484: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55485: LD_ADDR_VAR 0 57
55489: PUSH
55490: LD_INT 2
55492: NEG
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: NEG
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 3
55514: NEG
55515: PUSH
55516: LD_INT 1
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: LIST
55528: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55529: LD_ADDR_VAR 0 58
55533: PUSH
55534: LD_INT 2
55536: NEG
55537: PUSH
55538: LD_INT 3
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 3
55560: NEG
55561: PUSH
55562: LD_INT 3
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: LIST
55574: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55575: LD_ADDR_VAR 0 59
55579: PUSH
55580: LD_INT 1
55582: NEG
55583: PUSH
55584: LD_INT 2
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: LD_INT 2
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 1
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55619: LD_ADDR_VAR 0 60
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 2
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55660: LD_ADDR_VAR 0 61
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: LD_INT 1
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 2
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55700: LD_ADDR_VAR 0 62
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: LD_INT 2
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 2
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55741: LD_ADDR_VAR 0 63
55745: PUSH
55746: LD_INT 1
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 2
55759: NEG
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 2
55770: NEG
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: LIST
55784: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55785: LD_ADDR_VAR 0 64
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 2
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// end ; 2 :
55831: GO 59097
55833: LD_INT 2
55835: DOUBLE
55836: EQUAL
55837: IFTRUE 55841
55839: GO 59096
55841: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55842: LD_ADDR_VAR 0 29
55846: PUSH
55847: LD_INT 4
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 4
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 5
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: PUSH
55878: LD_INT 5
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 4
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 3
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 3
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 3
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 5
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 3
55942: PUSH
55943: LD_INT 3
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 3
55952: PUSH
55953: LD_INT 2
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PUSH
55960: LD_INT 4
55962: PUSH
55963: LD_INT 3
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 4
55972: PUSH
55973: LD_INT 4
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 3
55982: PUSH
55983: LD_INT 4
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: LD_INT 3
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: LD_INT 2
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 4
56012: PUSH
56013: LD_INT 2
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 2
56022: PUSH
56023: LD_INT 4
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: LD_INT 4
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 3
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 1
56062: PUSH
56063: LD_INT 5
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 5
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 1
56082: NEG
56083: PUSH
56084: LD_INT 4
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: LD_INT 3
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: PUSH
56105: LD_INT 5
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 3
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 3
56125: NEG
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 3
56136: NEG
56137: PUSH
56138: LD_INT 1
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: LD_INT 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 3
56170: NEG
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 4
56181: NEG
56182: PUSH
56183: LD_INT 0
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 4
56192: NEG
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 4
56204: NEG
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 2
56216: NEG
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 4
56227: NEG
56228: PUSH
56229: LD_INT 4
56231: NEG
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 4
56239: NEG
56240: PUSH
56241: LD_INT 5
56243: NEG
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: NEG
56252: PUSH
56253: LD_INT 4
56255: NEG
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 3
56263: NEG
56264: PUSH
56265: LD_INT 3
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 4
56275: NEG
56276: PUSH
56277: LD_INT 3
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 5
56287: NEG
56288: PUSH
56289: LD_INT 4
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 5
56299: NEG
56300: PUSH
56301: LD_INT 5
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 3
56311: NEG
56312: PUSH
56313: LD_INT 5
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 5
56323: NEG
56324: PUSH
56325: LD_INT 3
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56380: LD_ADDR_VAR 0 30
56384: PUSH
56385: LD_INT 4
56387: PUSH
56388: LD_INT 4
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 4
56397: PUSH
56398: LD_INT 3
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 5
56407: PUSH
56408: LD_INT 4
56410: PUSH
56411: EMPTY
56412: LIST
56413: LIST
56414: PUSH
56415: LD_INT 5
56417: PUSH
56418: LD_INT 5
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 4
56427: PUSH
56428: LD_INT 5
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 3
56437: PUSH
56438: LD_INT 4
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: LD_INT 3
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: LD_INT 5
56457: PUSH
56458: LD_INT 3
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: PUSH
56468: LD_INT 5
56470: PUSH
56471: EMPTY
56472: LIST
56473: LIST
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 0
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 3
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 4
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 4
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 2
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 2
56549: PUSH
56550: LD_INT 4
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 2
56559: NEG
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 4
56570: NEG
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 4
56581: NEG
56582: PUSH
56583: LD_INT 1
56585: NEG
56586: PUSH
56587: EMPTY
56588: LIST
56589: LIST
56590: PUSH
56591: LD_INT 3
56593: NEG
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: LD_INT 3
56604: NEG
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 4
56615: NEG
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 5
56626: NEG
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 5
56637: NEG
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 5
56649: NEG
56650: PUSH
56651: LD_INT 2
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 3
56661: NEG
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 3
56672: NEG
56673: PUSH
56674: LD_INT 3
56676: NEG
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 3
56684: NEG
56685: PUSH
56686: LD_INT 4
56688: NEG
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_INT 2
56696: NEG
56697: PUSH
56698: LD_INT 3
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: NEG
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 3
56720: NEG
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 4
56732: NEG
56733: PUSH
56734: LD_INT 3
56736: NEG
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 4
56744: NEG
56745: PUSH
56746: LD_INT 4
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 4
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 4
56768: NEG
56769: PUSH
56770: LD_INT 2
56772: NEG
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 4
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: LD_INT 5
56794: NEG
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 4
56805: NEG
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: PUSH
56814: LD_INT 3
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 3
56827: NEG
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: LD_INT 4
56839: NEG
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: PUSH
56845: LD_INT 1
56847: NEG
56848: PUSH
56849: LD_INT 5
56851: NEG
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 2
56859: PUSH
56860: LD_INT 3
56862: NEG
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 2
56870: NEG
56871: PUSH
56872: LD_INT 5
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56927: LD_ADDR_VAR 0 31
56931: PUSH
56932: LD_INT 0
56934: PUSH
56935: LD_INT 4
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 3
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 1
56954: PUSH
56955: LD_INT 4
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 1
56964: PUSH
56965: LD_INT 5
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: LD_INT 5
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 1
56984: NEG
56985: PUSH
56986: LD_INT 4
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 5
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 3
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 3
57027: NEG
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: LD_INT 1
57042: NEG
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 2
57050: NEG
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 2
57061: NEG
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 3
57072: NEG
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 4
57083: NEG
57084: PUSH
57085: LD_INT 0
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 4
57094: NEG
57095: PUSH
57096: LD_INT 1
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 4
57106: NEG
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 2
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 4
57129: NEG
57130: PUSH
57131: LD_INT 4
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 4
57141: NEG
57142: PUSH
57143: LD_INT 5
57145: NEG
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 3
57153: NEG
57154: PUSH
57155: LD_INT 4
57157: NEG
57158: PUSH
57159: EMPTY
57160: LIST
57161: LIST
57162: PUSH
57163: LD_INT 3
57165: NEG
57166: PUSH
57167: LD_INT 3
57169: NEG
57170: PUSH
57171: EMPTY
57172: LIST
57173: LIST
57174: PUSH
57175: LD_INT 4
57177: NEG
57178: PUSH
57179: LD_INT 3
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 5
57189: NEG
57190: PUSH
57191: LD_INT 4
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 5
57201: NEG
57202: PUSH
57203: LD_INT 5
57205: NEG
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: LD_INT 5
57217: NEG
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 5
57225: NEG
57226: PUSH
57227: LD_INT 3
57229: NEG
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: LD_INT 3
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: LD_INT 4
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 1
57259: PUSH
57260: LD_INT 3
57262: NEG
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 0
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: LD_INT 4
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 4
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: EMPTY
57344: LIST
57345: LIST
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 5
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 5
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: LD_INT 4
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: LD_INT 0
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: LD_INT 1
57403: NEG
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: PUSH
57409: LD_INT 3
57411: PUSH
57412: LD_INT 2
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 5
57422: PUSH
57423: LD_INT 2
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57477: LD_ADDR_VAR 0 32
57481: PUSH
57482: LD_INT 4
57484: NEG
57485: PUSH
57486: LD_INT 0
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 4
57495: NEG
57496: PUSH
57497: LD_INT 1
57499: NEG
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 3
57507: NEG
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 3
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 4
57529: NEG
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 5
57540: NEG
57541: PUSH
57542: LD_INT 0
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 5
57551: NEG
57552: PUSH
57553: LD_INT 1
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 5
57563: NEG
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: LD_INT 2
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 3
57598: NEG
57599: PUSH
57600: LD_INT 4
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 3
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 2
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: LD_INT 3
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 4
57658: NEG
57659: PUSH
57660: LD_INT 4
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 2
57670: NEG
57671: PUSH
57672: LD_INT 4
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 4
57682: NEG
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: LD_INT 4
57697: NEG
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 5
57708: NEG
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 1
57716: PUSH
57717: LD_INT 4
57719: NEG
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: LD_INT 3
57730: NEG
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 3
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 4
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 5
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: LD_INT 3
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 2
57784: NEG
57785: PUSH
57786: LD_INT 5
57788: NEG
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 3
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 3
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 4
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 4
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 3
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 2
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 2
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 4
57879: PUSH
57880: LD_INT 2
57882: PUSH
57883: EMPTY
57884: LIST
57885: LIST
57886: PUSH
57887: LD_INT 4
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 4
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 5
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 5
57919: PUSH
57920: LD_INT 5
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 5
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 3
57939: PUSH
57940: LD_INT 4
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 3
57949: PUSH
57950: LD_INT 3
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: LD_INT 5
57959: PUSH
57960: LD_INT 3
57962: PUSH
57963: EMPTY
57964: LIST
57965: LIST
57966: PUSH
57967: LD_INT 3
57969: PUSH
57970: LD_INT 5
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: EMPTY
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: LIST
58023: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
58024: LD_ADDR_VAR 0 33
58028: PUSH
58029: LD_INT 4
58031: NEG
58032: PUSH
58033: LD_INT 4
58035: NEG
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 4
58043: NEG
58044: PUSH
58045: LD_INT 5
58047: NEG
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: LD_INT 4
58059: NEG
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 3
58067: NEG
58068: PUSH
58069: LD_INT 3
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 4
58079: NEG
58080: PUSH
58081: LD_INT 3
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 5
58091: NEG
58092: PUSH
58093: LD_INT 4
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 5
58103: NEG
58104: PUSH
58105: LD_INT 5
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 5
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: LD_INT 5
58127: NEG
58128: PUSH
58129: LD_INT 3
58131: NEG
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 3
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 0
58150: PUSH
58151: LD_INT 4
58153: NEG
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: LD_INT 3
58164: NEG
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: LD_INT 2
58175: NEG
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: LD_INT 3
58198: NEG
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: NEG
58207: PUSH
58208: LD_INT 4
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 2
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 2
58229: NEG
58230: PUSH
58231: LD_INT 4
58233: NEG
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 4
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 4
58251: PUSH
58252: LD_INT 1
58254: NEG
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 5
58262: PUSH
58263: LD_INT 0
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 5
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 4
58282: PUSH
58283: LD_INT 1
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: LD_INT 3
58292: PUSH
58293: LD_INT 0
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: LD_INT 1
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: PUSH
58314: LD_INT 2
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 5
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 3
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 3
58344: PUSH
58345: LD_INT 2
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 3
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 4
58364: PUSH
58365: LD_INT 4
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 4
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: PUSH
58382: LD_INT 2
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 2
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 4
58404: PUSH
58405: LD_INT 2
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 4
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 0
58424: PUSH
58425: LD_INT 4
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 0
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: LD_INT 4
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 1
58454: PUSH
58455: LD_INT 5
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 5
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: NEG
58475: PUSH
58476: LD_INT 4
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: LD_INT 3
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: LD_INT 5
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 2
58506: NEG
58507: PUSH
58508: LD_INT 3
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: LIST
58535: LIST
58536: LIST
58537: LIST
58538: LIST
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58562: LD_ADDR_VAR 0 34
58566: PUSH
58567: LD_INT 0
58569: PUSH
58570: LD_INT 4
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 5
58583: NEG
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 4
58594: NEG
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 3
58605: NEG
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 3
58616: NEG
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: PUSH
58622: LD_INT 1
58624: NEG
58625: PUSH
58626: LD_INT 4
58628: NEG
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 5
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 2
58648: PUSH
58649: LD_INT 3
58651: NEG
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 2
58659: NEG
58660: PUSH
58661: LD_INT 5
58663: NEG
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 4
58692: PUSH
58693: LD_INT 0
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: PUSH
58700: LD_INT 4
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 2
58722: PUSH
58723: LD_INT 0
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 2
58732: PUSH
58733: LD_INT 1
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 2
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: PUSH
58755: LD_INT 2
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 4
58764: PUSH
58765: LD_INT 4
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 4
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 5
58784: PUSH
58785: LD_INT 4
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 5
58794: PUSH
58795: LD_INT 5
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 4
58804: PUSH
58805: LD_INT 5
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: LD_INT 4
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 5
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: PUSH
58845: LD_INT 5
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 2
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 3
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 4
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 3
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 4
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: NEG
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 4
58947: NEG
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 4
58958: NEG
58959: PUSH
58960: LD_INT 1
58962: NEG
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: PUSH
58968: LD_INT 3
58970: NEG
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 3
58981: NEG
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 4
58992: NEG
58993: PUSH
58994: LD_INT 1
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 5
59003: NEG
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: PUSH
59012: LD_INT 5
59014: NEG
59015: PUSH
59016: LD_INT 1
59018: NEG
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 5
59026: NEG
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: EMPTY
59033: LIST
59034: LIST
59035: PUSH
59036: LD_INT 3
59038: NEG
59039: PUSH
59040: LD_INT 2
59042: PUSH
59043: EMPTY
59044: LIST
59045: LIST
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: LIST
59081: LIST
59082: LIST
59083: LIST
59084: LIST
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: LIST
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// end ; end ;
59094: GO 59097
59096: POP
// case btype of b_depot , b_warehouse :
59097: LD_VAR 0 1
59101: PUSH
59102: LD_INT 0
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59116
59108: LD_INT 1
59110: DOUBLE
59111: EQUAL
59112: IFTRUE 59116
59114: GO 59317
59116: POP
// case nation of nation_american :
59117: LD_VAR 0 5
59121: PUSH
59122: LD_INT 1
59124: DOUBLE
59125: EQUAL
59126: IFTRUE 59130
59128: GO 59186
59130: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
59131: LD_ADDR_VAR 0 9
59135: PUSH
59136: LD_VAR 0 11
59140: PUSH
59141: LD_VAR 0 12
59145: PUSH
59146: LD_VAR 0 13
59150: PUSH
59151: LD_VAR 0 14
59155: PUSH
59156: LD_VAR 0 15
59160: PUSH
59161: LD_VAR 0 16
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: PUSH
59174: LD_VAR 0 4
59178: PUSH
59179: LD_INT 1
59181: PLUS
59182: ARRAY
59183: ST_TO_ADDR
59184: GO 59315
59186: LD_INT 2
59188: DOUBLE
59189: EQUAL
59190: IFTRUE 59194
59192: GO 59250
59194: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
59195: LD_ADDR_VAR 0 9
59199: PUSH
59200: LD_VAR 0 17
59204: PUSH
59205: LD_VAR 0 18
59209: PUSH
59210: LD_VAR 0 19
59214: PUSH
59215: LD_VAR 0 20
59219: PUSH
59220: LD_VAR 0 21
59224: PUSH
59225: LD_VAR 0 22
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: PUSH
59238: LD_VAR 0 4
59242: PUSH
59243: LD_INT 1
59245: PLUS
59246: ARRAY
59247: ST_TO_ADDR
59248: GO 59315
59250: LD_INT 3
59252: DOUBLE
59253: EQUAL
59254: IFTRUE 59258
59256: GO 59314
59258: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59259: LD_ADDR_VAR 0 9
59263: PUSH
59264: LD_VAR 0 23
59268: PUSH
59269: LD_VAR 0 24
59273: PUSH
59274: LD_VAR 0 25
59278: PUSH
59279: LD_VAR 0 26
59283: PUSH
59284: LD_VAR 0 27
59288: PUSH
59289: LD_VAR 0 28
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: PUSH
59302: LD_VAR 0 4
59306: PUSH
59307: LD_INT 1
59309: PLUS
59310: ARRAY
59311: ST_TO_ADDR
59312: GO 59315
59314: POP
59315: GO 59870
59317: LD_INT 2
59319: DOUBLE
59320: EQUAL
59321: IFTRUE 59331
59323: LD_INT 3
59325: DOUBLE
59326: EQUAL
59327: IFTRUE 59331
59329: GO 59387
59331: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59332: LD_ADDR_VAR 0 9
59336: PUSH
59337: LD_VAR 0 29
59341: PUSH
59342: LD_VAR 0 30
59346: PUSH
59347: LD_VAR 0 31
59351: PUSH
59352: LD_VAR 0 32
59356: PUSH
59357: LD_VAR 0 33
59361: PUSH
59362: LD_VAR 0 34
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: PUSH
59375: LD_VAR 0 4
59379: PUSH
59380: LD_INT 1
59382: PLUS
59383: ARRAY
59384: ST_TO_ADDR
59385: GO 59870
59387: LD_INT 16
59389: DOUBLE
59390: EQUAL
59391: IFTRUE 59449
59393: LD_INT 17
59395: DOUBLE
59396: EQUAL
59397: IFTRUE 59449
59399: LD_INT 18
59401: DOUBLE
59402: EQUAL
59403: IFTRUE 59449
59405: LD_INT 19
59407: DOUBLE
59408: EQUAL
59409: IFTRUE 59449
59411: LD_INT 22
59413: DOUBLE
59414: EQUAL
59415: IFTRUE 59449
59417: LD_INT 20
59419: DOUBLE
59420: EQUAL
59421: IFTRUE 59449
59423: LD_INT 21
59425: DOUBLE
59426: EQUAL
59427: IFTRUE 59449
59429: LD_INT 23
59431: DOUBLE
59432: EQUAL
59433: IFTRUE 59449
59435: LD_INT 24
59437: DOUBLE
59438: EQUAL
59439: IFTRUE 59449
59441: LD_INT 25
59443: DOUBLE
59444: EQUAL
59445: IFTRUE 59449
59447: GO 59505
59449: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59450: LD_ADDR_VAR 0 9
59454: PUSH
59455: LD_VAR 0 35
59459: PUSH
59460: LD_VAR 0 36
59464: PUSH
59465: LD_VAR 0 37
59469: PUSH
59470: LD_VAR 0 38
59474: PUSH
59475: LD_VAR 0 39
59479: PUSH
59480: LD_VAR 0 40
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: LIST
59490: LIST
59491: LIST
59492: PUSH
59493: LD_VAR 0 4
59497: PUSH
59498: LD_INT 1
59500: PLUS
59501: ARRAY
59502: ST_TO_ADDR
59503: GO 59870
59505: LD_INT 6
59507: DOUBLE
59508: EQUAL
59509: IFTRUE 59561
59511: LD_INT 7
59513: DOUBLE
59514: EQUAL
59515: IFTRUE 59561
59517: LD_INT 8
59519: DOUBLE
59520: EQUAL
59521: IFTRUE 59561
59523: LD_INT 13
59525: DOUBLE
59526: EQUAL
59527: IFTRUE 59561
59529: LD_INT 12
59531: DOUBLE
59532: EQUAL
59533: IFTRUE 59561
59535: LD_INT 15
59537: DOUBLE
59538: EQUAL
59539: IFTRUE 59561
59541: LD_INT 11
59543: DOUBLE
59544: EQUAL
59545: IFTRUE 59561
59547: LD_INT 14
59549: DOUBLE
59550: EQUAL
59551: IFTRUE 59561
59553: LD_INT 10
59555: DOUBLE
59556: EQUAL
59557: IFTRUE 59561
59559: GO 59617
59561: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59562: LD_ADDR_VAR 0 9
59566: PUSH
59567: LD_VAR 0 41
59571: PUSH
59572: LD_VAR 0 42
59576: PUSH
59577: LD_VAR 0 43
59581: PUSH
59582: LD_VAR 0 44
59586: PUSH
59587: LD_VAR 0 45
59591: PUSH
59592: LD_VAR 0 46
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: LIST
59604: PUSH
59605: LD_VAR 0 4
59609: PUSH
59610: LD_INT 1
59612: PLUS
59613: ARRAY
59614: ST_TO_ADDR
59615: GO 59870
59617: LD_INT 36
59619: DOUBLE
59620: EQUAL
59621: IFTRUE 59625
59623: GO 59681
59625: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59626: LD_ADDR_VAR 0 9
59630: PUSH
59631: LD_VAR 0 47
59635: PUSH
59636: LD_VAR 0 48
59640: PUSH
59641: LD_VAR 0 49
59645: PUSH
59646: LD_VAR 0 50
59650: PUSH
59651: LD_VAR 0 51
59655: PUSH
59656: LD_VAR 0 52
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: PUSH
59669: LD_VAR 0 4
59673: PUSH
59674: LD_INT 1
59676: PLUS
59677: ARRAY
59678: ST_TO_ADDR
59679: GO 59870
59681: LD_INT 4
59683: DOUBLE
59684: EQUAL
59685: IFTRUE 59707
59687: LD_INT 5
59689: DOUBLE
59690: EQUAL
59691: IFTRUE 59707
59693: LD_INT 34
59695: DOUBLE
59696: EQUAL
59697: IFTRUE 59707
59699: LD_INT 37
59701: DOUBLE
59702: EQUAL
59703: IFTRUE 59707
59705: GO 59763
59707: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59708: LD_ADDR_VAR 0 9
59712: PUSH
59713: LD_VAR 0 53
59717: PUSH
59718: LD_VAR 0 54
59722: PUSH
59723: LD_VAR 0 55
59727: PUSH
59728: LD_VAR 0 56
59732: PUSH
59733: LD_VAR 0 57
59737: PUSH
59738: LD_VAR 0 58
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: PUSH
59751: LD_VAR 0 4
59755: PUSH
59756: LD_INT 1
59758: PLUS
59759: ARRAY
59760: ST_TO_ADDR
59761: GO 59870
59763: LD_INT 31
59765: DOUBLE
59766: EQUAL
59767: IFTRUE 59813
59769: LD_INT 32
59771: DOUBLE
59772: EQUAL
59773: IFTRUE 59813
59775: LD_INT 33
59777: DOUBLE
59778: EQUAL
59779: IFTRUE 59813
59781: LD_INT 27
59783: DOUBLE
59784: EQUAL
59785: IFTRUE 59813
59787: LD_INT 26
59789: DOUBLE
59790: EQUAL
59791: IFTRUE 59813
59793: LD_INT 28
59795: DOUBLE
59796: EQUAL
59797: IFTRUE 59813
59799: LD_INT 29
59801: DOUBLE
59802: EQUAL
59803: IFTRUE 59813
59805: LD_INT 30
59807: DOUBLE
59808: EQUAL
59809: IFTRUE 59813
59811: GO 59869
59813: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59814: LD_ADDR_VAR 0 9
59818: PUSH
59819: LD_VAR 0 59
59823: PUSH
59824: LD_VAR 0 60
59828: PUSH
59829: LD_VAR 0 61
59833: PUSH
59834: LD_VAR 0 62
59838: PUSH
59839: LD_VAR 0 63
59843: PUSH
59844: LD_VAR 0 64
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: PUSH
59857: LD_VAR 0 4
59861: PUSH
59862: LD_INT 1
59864: PLUS
59865: ARRAY
59866: ST_TO_ADDR
59867: GO 59870
59869: POP
// temp_list2 = [ ] ;
59870: LD_ADDR_VAR 0 10
59874: PUSH
59875: EMPTY
59876: ST_TO_ADDR
// for i in temp_list do
59877: LD_ADDR_VAR 0 8
59881: PUSH
59882: LD_VAR 0 9
59886: PUSH
59887: FOR_IN
59888: IFFALSE 59940
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59890: LD_ADDR_VAR 0 10
59894: PUSH
59895: LD_VAR 0 10
59899: PUSH
59900: LD_VAR 0 8
59904: PUSH
59905: LD_INT 1
59907: ARRAY
59908: PUSH
59909: LD_VAR 0 2
59913: PLUS
59914: PUSH
59915: LD_VAR 0 8
59919: PUSH
59920: LD_INT 2
59922: ARRAY
59923: PUSH
59924: LD_VAR 0 3
59928: PLUS
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: EMPTY
59935: LIST
59936: ADD
59937: ST_TO_ADDR
59938: GO 59887
59940: POP
59941: POP
// result = temp_list2 ;
59942: LD_ADDR_VAR 0 7
59946: PUSH
59947: LD_VAR 0 10
59951: ST_TO_ADDR
// end ;
59952: LD_VAR 0 7
59956: RET
// export function EnemyInRange ( unit , dist ) ; begin
59957: LD_INT 0
59959: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59960: LD_ADDR_VAR 0 3
59964: PUSH
59965: LD_VAR 0 1
59969: PPUSH
59970: CALL_OW 255
59974: PPUSH
59975: LD_VAR 0 1
59979: PPUSH
59980: CALL_OW 250
59984: PPUSH
59985: LD_VAR 0 1
59989: PPUSH
59990: CALL_OW 251
59994: PPUSH
59995: LD_VAR 0 2
59999: PPUSH
60000: CALL 33359 0 4
60004: PUSH
60005: LD_INT 4
60007: ARRAY
60008: ST_TO_ADDR
// end ;
60009: LD_VAR 0 3
60013: RET
// export function PlayerSeeMe ( unit ) ; begin
60014: LD_INT 0
60016: PPUSH
// result := See ( your_side , unit ) ;
60017: LD_ADDR_VAR 0 2
60021: PUSH
60022: LD_OWVAR 2
60026: PPUSH
60027: LD_VAR 0 1
60031: PPUSH
60032: CALL_OW 292
60036: ST_TO_ADDR
// end ;
60037: LD_VAR 0 2
60041: RET
// export function ReverseDir ( unit ) ; begin
60042: LD_INT 0
60044: PPUSH
// if not unit then
60045: LD_VAR 0 1
60049: NOT
60050: IFFALSE 60054
// exit ;
60052: GO 60077
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
60054: LD_ADDR_VAR 0 2
60058: PUSH
60059: LD_VAR 0 1
60063: PPUSH
60064: CALL_OW 254
60068: PUSH
60069: LD_INT 3
60071: PLUS
60072: PUSH
60073: LD_INT 6
60075: MOD
60076: ST_TO_ADDR
// end ;
60077: LD_VAR 0 2
60081: RET
// export function ReverseArray ( array ) ; var i ; begin
60082: LD_INT 0
60084: PPUSH
60085: PPUSH
// if not array then
60086: LD_VAR 0 1
60090: NOT
60091: IFFALSE 60095
// exit ;
60093: GO 60150
// result := [ ] ;
60095: LD_ADDR_VAR 0 2
60099: PUSH
60100: EMPTY
60101: ST_TO_ADDR
// for i := array downto 1 do
60102: LD_ADDR_VAR 0 3
60106: PUSH
60107: DOUBLE
60108: LD_VAR 0 1
60112: INC
60113: ST_TO_ADDR
60114: LD_INT 1
60116: PUSH
60117: FOR_DOWNTO
60118: IFFALSE 60148
// result := Join ( result , array [ i ] ) ;
60120: LD_ADDR_VAR 0 2
60124: PUSH
60125: LD_VAR 0 2
60129: PPUSH
60130: LD_VAR 0 1
60134: PUSH
60135: LD_VAR 0 3
60139: ARRAY
60140: PPUSH
60141: CALL 64794 0 2
60145: ST_TO_ADDR
60146: GO 60117
60148: POP
60149: POP
// end ;
60150: LD_VAR 0 2
60154: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
60155: LD_INT 0
60157: PPUSH
60158: PPUSH
60159: PPUSH
60160: PPUSH
60161: PPUSH
60162: PPUSH
// if not unit or not hexes then
60163: LD_VAR 0 1
60167: NOT
60168: PUSH
60169: LD_VAR 0 2
60173: NOT
60174: OR
60175: IFFALSE 60179
// exit ;
60177: GO 60302
// dist := 9999 ;
60179: LD_ADDR_VAR 0 5
60183: PUSH
60184: LD_INT 9999
60186: ST_TO_ADDR
// for i = 1 to hexes do
60187: LD_ADDR_VAR 0 4
60191: PUSH
60192: DOUBLE
60193: LD_INT 1
60195: DEC
60196: ST_TO_ADDR
60197: LD_VAR 0 2
60201: PUSH
60202: FOR_TO
60203: IFFALSE 60290
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60205: LD_ADDR_VAR 0 6
60209: PUSH
60210: LD_VAR 0 1
60214: PPUSH
60215: LD_VAR 0 2
60219: PUSH
60220: LD_VAR 0 4
60224: ARRAY
60225: PUSH
60226: LD_INT 1
60228: ARRAY
60229: PPUSH
60230: LD_VAR 0 2
60234: PUSH
60235: LD_VAR 0 4
60239: ARRAY
60240: PUSH
60241: LD_INT 2
60243: ARRAY
60244: PPUSH
60245: CALL_OW 297
60249: ST_TO_ADDR
// if tdist < dist then
60250: LD_VAR 0 6
60254: PUSH
60255: LD_VAR 0 5
60259: LESS
60260: IFFALSE 60288
// begin hex := hexes [ i ] ;
60262: LD_ADDR_VAR 0 8
60266: PUSH
60267: LD_VAR 0 2
60271: PUSH
60272: LD_VAR 0 4
60276: ARRAY
60277: ST_TO_ADDR
// dist := tdist ;
60278: LD_ADDR_VAR 0 5
60282: PUSH
60283: LD_VAR 0 6
60287: ST_TO_ADDR
// end ; end ;
60288: GO 60202
60290: POP
60291: POP
// result := hex ;
60292: LD_ADDR_VAR 0 3
60296: PUSH
60297: LD_VAR 0 8
60301: ST_TO_ADDR
// end ;
60302: LD_VAR 0 3
60306: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60307: LD_INT 0
60309: PPUSH
60310: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60311: LD_VAR 0 1
60315: NOT
60316: PUSH
60317: LD_VAR 0 1
60321: PUSH
60322: LD_INT 21
60324: PUSH
60325: LD_INT 2
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 23
60334: PUSH
60335: LD_INT 2
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PPUSH
60346: CALL_OW 69
60350: IN
60351: NOT
60352: OR
60353: IFFALSE 60357
// exit ;
60355: GO 60404
// for i = 1 to 3 do
60357: LD_ADDR_VAR 0 3
60361: PUSH
60362: DOUBLE
60363: LD_INT 1
60365: DEC
60366: ST_TO_ADDR
60367: LD_INT 3
60369: PUSH
60370: FOR_TO
60371: IFFALSE 60402
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60373: LD_VAR 0 1
60377: PPUSH
60378: CALL_OW 250
60382: PPUSH
60383: LD_VAR 0 1
60387: PPUSH
60388: CALL_OW 251
60392: PPUSH
60393: LD_INT 1
60395: PPUSH
60396: CALL_OW 453
60400: GO 60370
60402: POP
60403: POP
// end ;
60404: LD_VAR 0 2
60408: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60409: LD_INT 0
60411: PPUSH
60412: PPUSH
60413: PPUSH
60414: PPUSH
60415: PPUSH
60416: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
60417: LD_VAR 0 1
60421: NOT
60422: PUSH
60423: LD_VAR 0 2
60427: NOT
60428: OR
60429: PUSH
60430: LD_VAR 0 1
60434: PPUSH
60435: CALL_OW 314
60439: OR
60440: IFFALSE 60444
// exit ;
60442: GO 60911
// if GetLives ( i ) < 250 then
60444: LD_VAR 0 4
60448: PPUSH
60449: CALL_OW 256
60453: PUSH
60454: LD_INT 250
60456: LESS
60457: IFFALSE 60470
// begin ComAutodestruct ( i ) ;
60459: LD_VAR 0 4
60463: PPUSH
60464: CALL 60307 0 1
// exit ;
60468: GO 60911
// end ; x := GetX ( enemy_unit ) ;
60470: LD_ADDR_VAR 0 7
60474: PUSH
60475: LD_VAR 0 2
60479: PPUSH
60480: CALL_OW 250
60484: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60485: LD_ADDR_VAR 0 8
60489: PUSH
60490: LD_VAR 0 2
60494: PPUSH
60495: CALL_OW 251
60499: ST_TO_ADDR
// if not x or not y then
60500: LD_VAR 0 7
60504: NOT
60505: PUSH
60506: LD_VAR 0 8
60510: NOT
60511: OR
60512: IFFALSE 60516
// exit ;
60514: GO 60911
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60516: LD_ADDR_VAR 0 6
60520: PUSH
60521: LD_VAR 0 7
60525: PPUSH
60526: LD_INT 0
60528: PPUSH
60529: LD_INT 4
60531: PPUSH
60532: CALL_OW 272
60536: PUSH
60537: LD_VAR 0 8
60541: PPUSH
60542: LD_INT 0
60544: PPUSH
60545: LD_INT 4
60547: PPUSH
60548: CALL_OW 273
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: PUSH
60557: LD_VAR 0 7
60561: PPUSH
60562: LD_INT 1
60564: PPUSH
60565: LD_INT 4
60567: PPUSH
60568: CALL_OW 272
60572: PUSH
60573: LD_VAR 0 8
60577: PPUSH
60578: LD_INT 1
60580: PPUSH
60581: LD_INT 4
60583: PPUSH
60584: CALL_OW 273
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_VAR 0 7
60597: PPUSH
60598: LD_INT 2
60600: PPUSH
60601: LD_INT 4
60603: PPUSH
60604: CALL_OW 272
60608: PUSH
60609: LD_VAR 0 8
60613: PPUSH
60614: LD_INT 2
60616: PPUSH
60617: LD_INT 4
60619: PPUSH
60620: CALL_OW 273
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_VAR 0 7
60633: PPUSH
60634: LD_INT 3
60636: PPUSH
60637: LD_INT 4
60639: PPUSH
60640: CALL_OW 272
60644: PUSH
60645: LD_VAR 0 8
60649: PPUSH
60650: LD_INT 3
60652: PPUSH
60653: LD_INT 4
60655: PPUSH
60656: CALL_OW 273
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_VAR 0 7
60669: PPUSH
60670: LD_INT 4
60672: PPUSH
60673: LD_INT 4
60675: PPUSH
60676: CALL_OW 272
60680: PUSH
60681: LD_VAR 0 8
60685: PPUSH
60686: LD_INT 4
60688: PPUSH
60689: LD_INT 4
60691: PPUSH
60692: CALL_OW 273
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_VAR 0 7
60705: PPUSH
60706: LD_INT 5
60708: PPUSH
60709: LD_INT 4
60711: PPUSH
60712: CALL_OW 272
60716: PUSH
60717: LD_VAR 0 8
60721: PPUSH
60722: LD_INT 5
60724: PPUSH
60725: LD_INT 4
60727: PPUSH
60728: CALL_OW 273
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// for i = tmp downto 1 do
60745: LD_ADDR_VAR 0 4
60749: PUSH
60750: DOUBLE
60751: LD_VAR 0 6
60755: INC
60756: ST_TO_ADDR
60757: LD_INT 1
60759: PUSH
60760: FOR_DOWNTO
60761: IFFALSE 60862
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60763: LD_VAR 0 6
60767: PUSH
60768: LD_VAR 0 4
60772: ARRAY
60773: PUSH
60774: LD_INT 1
60776: ARRAY
60777: PPUSH
60778: LD_VAR 0 6
60782: PUSH
60783: LD_VAR 0 4
60787: ARRAY
60788: PUSH
60789: LD_INT 2
60791: ARRAY
60792: PPUSH
60793: CALL_OW 488
60797: NOT
60798: PUSH
60799: LD_VAR 0 6
60803: PUSH
60804: LD_VAR 0 4
60808: ARRAY
60809: PUSH
60810: LD_INT 1
60812: ARRAY
60813: PPUSH
60814: LD_VAR 0 6
60818: PUSH
60819: LD_VAR 0 4
60823: ARRAY
60824: PUSH
60825: LD_INT 2
60827: ARRAY
60828: PPUSH
60829: CALL_OW 428
60833: PUSH
60834: LD_INT 0
60836: NONEQUAL
60837: OR
60838: IFFALSE 60860
// tmp := Delete ( tmp , i ) ;
60840: LD_ADDR_VAR 0 6
60844: PUSH
60845: LD_VAR 0 6
60849: PPUSH
60850: LD_VAR 0 4
60854: PPUSH
60855: CALL_OW 3
60859: ST_TO_ADDR
60860: GO 60760
60862: POP
60863: POP
// j := GetClosestHex ( unit , tmp ) ;
60864: LD_ADDR_VAR 0 5
60868: PUSH
60869: LD_VAR 0 1
60873: PPUSH
60874: LD_VAR 0 6
60878: PPUSH
60879: CALL 60155 0 2
60883: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60884: LD_VAR 0 1
60888: PPUSH
60889: LD_VAR 0 5
60893: PUSH
60894: LD_INT 1
60896: ARRAY
60897: PPUSH
60898: LD_VAR 0 5
60902: PUSH
60903: LD_INT 2
60905: ARRAY
60906: PPUSH
60907: CALL_OW 111
// end ;
60911: LD_VAR 0 3
60915: RET
// export function PrepareApemanSoldier ( ) ; begin
60916: LD_INT 0
60918: PPUSH
// uc_nation := 0 ;
60919: LD_ADDR_OWVAR 21
60923: PUSH
60924: LD_INT 0
60926: ST_TO_ADDR
// hc_sex := sex_male ;
60927: LD_ADDR_OWVAR 27
60931: PUSH
60932: LD_INT 1
60934: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60935: LD_ADDR_OWVAR 28
60939: PUSH
60940: LD_INT 15
60942: ST_TO_ADDR
// hc_gallery :=  ;
60943: LD_ADDR_OWVAR 33
60947: PUSH
60948: LD_STRING 
60950: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60951: LD_ADDR_OWVAR 31
60955: PUSH
60956: LD_INT 0
60958: PPUSH
60959: LD_INT 3
60961: PPUSH
60962: CALL_OW 12
60966: PUSH
60967: LD_INT 0
60969: PPUSH
60970: LD_INT 3
60972: PPUSH
60973: CALL_OW 12
60977: PUSH
60978: LD_INT 0
60980: PUSH
60981: LD_INT 0
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: ST_TO_ADDR
// end ;
60990: LD_VAR 0 1
60994: RET
// export function PrepareApemanEngineer ( ) ; begin
60995: LD_INT 0
60997: PPUSH
// uc_nation := 0 ;
60998: LD_ADDR_OWVAR 21
61002: PUSH
61003: LD_INT 0
61005: ST_TO_ADDR
// hc_sex := sex_male ;
61006: LD_ADDR_OWVAR 27
61010: PUSH
61011: LD_INT 1
61013: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
61014: LD_ADDR_OWVAR 28
61018: PUSH
61019: LD_INT 16
61021: ST_TO_ADDR
// hc_gallery :=  ;
61022: LD_ADDR_OWVAR 33
61026: PUSH
61027: LD_STRING 
61029: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61030: LD_ADDR_OWVAR 31
61034: PUSH
61035: LD_INT 0
61037: PPUSH
61038: LD_INT 3
61040: PPUSH
61041: CALL_OW 12
61045: PUSH
61046: LD_INT 0
61048: PPUSH
61049: LD_INT 3
61051: PPUSH
61052: CALL_OW 12
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: ST_TO_ADDR
// end ;
61069: LD_VAR 0 1
61073: RET
// export function PrepareApeman ( agressivity ) ; begin
61074: LD_INT 0
61076: PPUSH
// uc_side := 0 ;
61077: LD_ADDR_OWVAR 20
61081: PUSH
61082: LD_INT 0
61084: ST_TO_ADDR
// uc_nation := 0 ;
61085: LD_ADDR_OWVAR 21
61089: PUSH
61090: LD_INT 0
61092: ST_TO_ADDR
// hc_sex := sex_male ;
61093: LD_ADDR_OWVAR 27
61097: PUSH
61098: LD_INT 1
61100: ST_TO_ADDR
// hc_class := class_apeman ;
61101: LD_ADDR_OWVAR 28
61105: PUSH
61106: LD_INT 12
61108: ST_TO_ADDR
// hc_gallery :=  ;
61109: LD_ADDR_OWVAR 33
61113: PUSH
61114: LD_STRING 
61116: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61117: LD_ADDR_OWVAR 35
61121: PUSH
61122: LD_VAR 0 1
61126: NEG
61127: PPUSH
61128: LD_VAR 0 1
61132: PPUSH
61133: CALL_OW 12
61137: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61138: LD_ADDR_OWVAR 31
61142: PUSH
61143: LD_INT 0
61145: PPUSH
61146: LD_INT 3
61148: PPUSH
61149: CALL_OW 12
61153: PUSH
61154: LD_INT 0
61156: PPUSH
61157: LD_INT 3
61159: PPUSH
61160: CALL_OW 12
61164: PUSH
61165: LD_INT 0
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: ST_TO_ADDR
// end ;
61177: LD_VAR 0 2
61181: RET
// export function PrepareTiger ( agressivity ) ; begin
61182: LD_INT 0
61184: PPUSH
// uc_side := 0 ;
61185: LD_ADDR_OWVAR 20
61189: PUSH
61190: LD_INT 0
61192: ST_TO_ADDR
// uc_nation := 0 ;
61193: LD_ADDR_OWVAR 21
61197: PUSH
61198: LD_INT 0
61200: ST_TO_ADDR
// hc_class := class_tiger ;
61201: LD_ADDR_OWVAR 28
61205: PUSH
61206: LD_INT 14
61208: ST_TO_ADDR
// hc_gallery :=  ;
61209: LD_ADDR_OWVAR 33
61213: PUSH
61214: LD_STRING 
61216: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61217: LD_ADDR_OWVAR 35
61221: PUSH
61222: LD_VAR 0 1
61226: NEG
61227: PPUSH
61228: LD_VAR 0 1
61232: PPUSH
61233: CALL_OW 12
61237: ST_TO_ADDR
// end ;
61238: LD_VAR 0 2
61242: RET
// export function PrepareEnchidna ( ) ; begin
61243: LD_INT 0
61245: PPUSH
// uc_side := 0 ;
61246: LD_ADDR_OWVAR 20
61250: PUSH
61251: LD_INT 0
61253: ST_TO_ADDR
// uc_nation := 0 ;
61254: LD_ADDR_OWVAR 21
61258: PUSH
61259: LD_INT 0
61261: ST_TO_ADDR
// hc_class := class_baggie ;
61262: LD_ADDR_OWVAR 28
61266: PUSH
61267: LD_INT 13
61269: ST_TO_ADDR
// hc_gallery :=  ;
61270: LD_ADDR_OWVAR 33
61274: PUSH
61275: LD_STRING 
61277: ST_TO_ADDR
// end ;
61278: LD_VAR 0 1
61282: RET
// export function PrepareFrog ( ) ; begin
61283: LD_INT 0
61285: PPUSH
// uc_side := 0 ;
61286: LD_ADDR_OWVAR 20
61290: PUSH
61291: LD_INT 0
61293: ST_TO_ADDR
// uc_nation := 0 ;
61294: LD_ADDR_OWVAR 21
61298: PUSH
61299: LD_INT 0
61301: ST_TO_ADDR
// hc_class := class_frog ;
61302: LD_ADDR_OWVAR 28
61306: PUSH
61307: LD_INT 19
61309: ST_TO_ADDR
// hc_gallery :=  ;
61310: LD_ADDR_OWVAR 33
61314: PUSH
61315: LD_STRING 
61317: ST_TO_ADDR
// end ;
61318: LD_VAR 0 1
61322: RET
// export function PrepareFish ( ) ; begin
61323: LD_INT 0
61325: PPUSH
// uc_side := 0 ;
61326: LD_ADDR_OWVAR 20
61330: PUSH
61331: LD_INT 0
61333: ST_TO_ADDR
// uc_nation := 0 ;
61334: LD_ADDR_OWVAR 21
61338: PUSH
61339: LD_INT 0
61341: ST_TO_ADDR
// hc_class := class_fish ;
61342: LD_ADDR_OWVAR 28
61346: PUSH
61347: LD_INT 20
61349: ST_TO_ADDR
// hc_gallery :=  ;
61350: LD_ADDR_OWVAR 33
61354: PUSH
61355: LD_STRING 
61357: ST_TO_ADDR
// end ;
61358: LD_VAR 0 1
61362: RET
// export function PrepareBird ( ) ; begin
61363: LD_INT 0
61365: PPUSH
// uc_side := 0 ;
61366: LD_ADDR_OWVAR 20
61370: PUSH
61371: LD_INT 0
61373: ST_TO_ADDR
// uc_nation := 0 ;
61374: LD_ADDR_OWVAR 21
61378: PUSH
61379: LD_INT 0
61381: ST_TO_ADDR
// hc_class := class_phororhacos ;
61382: LD_ADDR_OWVAR 28
61386: PUSH
61387: LD_INT 18
61389: ST_TO_ADDR
// hc_gallery :=  ;
61390: LD_ADDR_OWVAR 33
61394: PUSH
61395: LD_STRING 
61397: ST_TO_ADDR
// end ;
61398: LD_VAR 0 1
61402: RET
// export function PrepareHorse ( ) ; begin
61403: LD_INT 0
61405: PPUSH
// uc_side := 0 ;
61406: LD_ADDR_OWVAR 20
61410: PUSH
61411: LD_INT 0
61413: ST_TO_ADDR
// uc_nation := 0 ;
61414: LD_ADDR_OWVAR 21
61418: PUSH
61419: LD_INT 0
61421: ST_TO_ADDR
// hc_class := class_horse ;
61422: LD_ADDR_OWVAR 28
61426: PUSH
61427: LD_INT 21
61429: ST_TO_ADDR
// hc_gallery :=  ;
61430: LD_ADDR_OWVAR 33
61434: PUSH
61435: LD_STRING 
61437: ST_TO_ADDR
// end ;
61438: LD_VAR 0 1
61442: RET
// export function PrepareMastodont ( ) ; begin
61443: LD_INT 0
61445: PPUSH
// uc_side := 0 ;
61446: LD_ADDR_OWVAR 20
61450: PUSH
61451: LD_INT 0
61453: ST_TO_ADDR
// uc_nation := 0 ;
61454: LD_ADDR_OWVAR 21
61458: PUSH
61459: LD_INT 0
61461: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61462: LD_ADDR_OWVAR 37
61466: PUSH
61467: LD_INT 31
61469: ST_TO_ADDR
// vc_control := control_rider ;
61470: LD_ADDR_OWVAR 38
61474: PUSH
61475: LD_INT 4
61477: ST_TO_ADDR
// end ;
61478: LD_VAR 0 1
61482: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61483: LD_INT 0
61485: PPUSH
61486: PPUSH
61487: PPUSH
// uc_side = 0 ;
61488: LD_ADDR_OWVAR 20
61492: PUSH
61493: LD_INT 0
61495: ST_TO_ADDR
// uc_nation = 0 ;
61496: LD_ADDR_OWVAR 21
61500: PUSH
61501: LD_INT 0
61503: ST_TO_ADDR
// InitHc_All ( ) ;
61504: CALL_OW 584
// InitVc ;
61508: CALL_OW 20
// if mastodonts then
61512: LD_VAR 0 6
61516: IFFALSE 61583
// for i = 1 to mastodonts do
61518: LD_ADDR_VAR 0 11
61522: PUSH
61523: DOUBLE
61524: LD_INT 1
61526: DEC
61527: ST_TO_ADDR
61528: LD_VAR 0 6
61532: PUSH
61533: FOR_TO
61534: IFFALSE 61581
// begin vc_chassis := 31 ;
61536: LD_ADDR_OWVAR 37
61540: PUSH
61541: LD_INT 31
61543: ST_TO_ADDR
// vc_control := control_rider ;
61544: LD_ADDR_OWVAR 38
61548: PUSH
61549: LD_INT 4
61551: ST_TO_ADDR
// animal := CreateVehicle ;
61552: LD_ADDR_VAR 0 12
61556: PUSH
61557: CALL_OW 45
61561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61562: LD_VAR 0 12
61566: PPUSH
61567: LD_VAR 0 8
61571: PPUSH
61572: LD_INT 0
61574: PPUSH
61575: CALL 63711 0 3
// end ;
61579: GO 61533
61581: POP
61582: POP
// if horses then
61583: LD_VAR 0 5
61587: IFFALSE 61654
// for i = 1 to horses do
61589: LD_ADDR_VAR 0 11
61593: PUSH
61594: DOUBLE
61595: LD_INT 1
61597: DEC
61598: ST_TO_ADDR
61599: LD_VAR 0 5
61603: PUSH
61604: FOR_TO
61605: IFFALSE 61652
// begin hc_class := 21 ;
61607: LD_ADDR_OWVAR 28
61611: PUSH
61612: LD_INT 21
61614: ST_TO_ADDR
// hc_gallery :=  ;
61615: LD_ADDR_OWVAR 33
61619: PUSH
61620: LD_STRING 
61622: ST_TO_ADDR
// animal := CreateHuman ;
61623: LD_ADDR_VAR 0 12
61627: PUSH
61628: CALL_OW 44
61632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61633: LD_VAR 0 12
61637: PPUSH
61638: LD_VAR 0 8
61642: PPUSH
61643: LD_INT 0
61645: PPUSH
61646: CALL 63711 0 3
// end ;
61650: GO 61604
61652: POP
61653: POP
// if birds then
61654: LD_VAR 0 1
61658: IFFALSE 61725
// for i = 1 to birds do
61660: LD_ADDR_VAR 0 11
61664: PUSH
61665: DOUBLE
61666: LD_INT 1
61668: DEC
61669: ST_TO_ADDR
61670: LD_VAR 0 1
61674: PUSH
61675: FOR_TO
61676: IFFALSE 61723
// begin hc_class = 18 ;
61678: LD_ADDR_OWVAR 28
61682: PUSH
61683: LD_INT 18
61685: ST_TO_ADDR
// hc_gallery =  ;
61686: LD_ADDR_OWVAR 33
61690: PUSH
61691: LD_STRING 
61693: ST_TO_ADDR
// animal := CreateHuman ;
61694: LD_ADDR_VAR 0 12
61698: PUSH
61699: CALL_OW 44
61703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61704: LD_VAR 0 12
61708: PPUSH
61709: LD_VAR 0 8
61713: PPUSH
61714: LD_INT 0
61716: PPUSH
61717: CALL 63711 0 3
// end ;
61721: GO 61675
61723: POP
61724: POP
// if tigers then
61725: LD_VAR 0 2
61729: IFFALSE 61813
// for i = 1 to tigers do
61731: LD_ADDR_VAR 0 11
61735: PUSH
61736: DOUBLE
61737: LD_INT 1
61739: DEC
61740: ST_TO_ADDR
61741: LD_VAR 0 2
61745: PUSH
61746: FOR_TO
61747: IFFALSE 61811
// begin hc_class = class_tiger ;
61749: LD_ADDR_OWVAR 28
61753: PUSH
61754: LD_INT 14
61756: ST_TO_ADDR
// hc_gallery =  ;
61757: LD_ADDR_OWVAR 33
61761: PUSH
61762: LD_STRING 
61764: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61765: LD_ADDR_OWVAR 35
61769: PUSH
61770: LD_INT 7
61772: NEG
61773: PPUSH
61774: LD_INT 7
61776: PPUSH
61777: CALL_OW 12
61781: ST_TO_ADDR
// animal := CreateHuman ;
61782: LD_ADDR_VAR 0 12
61786: PUSH
61787: CALL_OW 44
61791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61792: LD_VAR 0 12
61796: PPUSH
61797: LD_VAR 0 8
61801: PPUSH
61802: LD_INT 0
61804: PPUSH
61805: CALL 63711 0 3
// end ;
61809: GO 61746
61811: POP
61812: POP
// if apemans then
61813: LD_VAR 0 3
61817: IFFALSE 61940
// for i = 1 to apemans do
61819: LD_ADDR_VAR 0 11
61823: PUSH
61824: DOUBLE
61825: LD_INT 1
61827: DEC
61828: ST_TO_ADDR
61829: LD_VAR 0 3
61833: PUSH
61834: FOR_TO
61835: IFFALSE 61938
// begin hc_class = class_apeman ;
61837: LD_ADDR_OWVAR 28
61841: PUSH
61842: LD_INT 12
61844: ST_TO_ADDR
// hc_gallery =  ;
61845: LD_ADDR_OWVAR 33
61849: PUSH
61850: LD_STRING 
61852: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61853: LD_ADDR_OWVAR 35
61857: PUSH
61858: LD_INT 2
61860: NEG
61861: PPUSH
61862: LD_INT 2
61864: PPUSH
61865: CALL_OW 12
61869: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61870: LD_ADDR_OWVAR 31
61874: PUSH
61875: LD_INT 1
61877: PPUSH
61878: LD_INT 3
61880: PPUSH
61881: CALL_OW 12
61885: PUSH
61886: LD_INT 1
61888: PPUSH
61889: LD_INT 3
61891: PPUSH
61892: CALL_OW 12
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: ST_TO_ADDR
// animal := CreateHuman ;
61909: LD_ADDR_VAR 0 12
61913: PUSH
61914: CALL_OW 44
61918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61919: LD_VAR 0 12
61923: PPUSH
61924: LD_VAR 0 8
61928: PPUSH
61929: LD_INT 0
61931: PPUSH
61932: CALL 63711 0 3
// end ;
61936: GO 61834
61938: POP
61939: POP
// if enchidnas then
61940: LD_VAR 0 4
61944: IFFALSE 62011
// for i = 1 to enchidnas do
61946: LD_ADDR_VAR 0 11
61950: PUSH
61951: DOUBLE
61952: LD_INT 1
61954: DEC
61955: ST_TO_ADDR
61956: LD_VAR 0 4
61960: PUSH
61961: FOR_TO
61962: IFFALSE 62009
// begin hc_class = 13 ;
61964: LD_ADDR_OWVAR 28
61968: PUSH
61969: LD_INT 13
61971: ST_TO_ADDR
// hc_gallery =  ;
61972: LD_ADDR_OWVAR 33
61976: PUSH
61977: LD_STRING 
61979: ST_TO_ADDR
// animal := CreateHuman ;
61980: LD_ADDR_VAR 0 12
61984: PUSH
61985: CALL_OW 44
61989: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61990: LD_VAR 0 12
61994: PPUSH
61995: LD_VAR 0 8
61999: PPUSH
62000: LD_INT 0
62002: PPUSH
62003: CALL 63711 0 3
// end ;
62007: GO 61961
62009: POP
62010: POP
// if fishes then
62011: LD_VAR 0 7
62015: IFFALSE 62082
// for i = 1 to fishes do
62017: LD_ADDR_VAR 0 11
62021: PUSH
62022: DOUBLE
62023: LD_INT 1
62025: DEC
62026: ST_TO_ADDR
62027: LD_VAR 0 7
62031: PUSH
62032: FOR_TO
62033: IFFALSE 62080
// begin hc_class = 20 ;
62035: LD_ADDR_OWVAR 28
62039: PUSH
62040: LD_INT 20
62042: ST_TO_ADDR
// hc_gallery =  ;
62043: LD_ADDR_OWVAR 33
62047: PUSH
62048: LD_STRING 
62050: ST_TO_ADDR
// animal := CreateHuman ;
62051: LD_ADDR_VAR 0 12
62055: PUSH
62056: CALL_OW 44
62060: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62061: LD_VAR 0 12
62065: PPUSH
62066: LD_VAR 0 9
62070: PPUSH
62071: LD_INT 0
62073: PPUSH
62074: CALL 63711 0 3
// end ;
62078: GO 62032
62080: POP
62081: POP
// end ;
62082: LD_VAR 0 10
62086: RET
// export function WantHeal ( sci , unit ) ; begin
62087: LD_INT 0
62089: PPUSH
// if GetTaskList ( sci ) > 0 then
62090: LD_VAR 0 1
62094: PPUSH
62095: CALL_OW 437
62099: PUSH
62100: LD_INT 0
62102: GREATER
62103: IFFALSE 62173
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62105: LD_VAR 0 1
62109: PPUSH
62110: CALL_OW 437
62114: PUSH
62115: LD_INT 1
62117: ARRAY
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PUSH
62123: LD_STRING l
62125: EQUAL
62126: PUSH
62127: LD_VAR 0 1
62131: PPUSH
62132: CALL_OW 437
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PUSH
62141: LD_INT 4
62143: ARRAY
62144: PUSH
62145: LD_VAR 0 2
62149: EQUAL
62150: AND
62151: IFFALSE 62163
// result := true else
62153: LD_ADDR_VAR 0 3
62157: PUSH
62158: LD_INT 1
62160: ST_TO_ADDR
62161: GO 62171
// result := false ;
62163: LD_ADDR_VAR 0 3
62167: PUSH
62168: LD_INT 0
62170: ST_TO_ADDR
// end else
62171: GO 62181
// result := false ;
62173: LD_ADDR_VAR 0 3
62177: PUSH
62178: LD_INT 0
62180: ST_TO_ADDR
// end ;
62181: LD_VAR 0 3
62185: RET
// export function HealTarget ( sci ) ; begin
62186: LD_INT 0
62188: PPUSH
// if not sci then
62189: LD_VAR 0 1
62193: NOT
62194: IFFALSE 62198
// exit ;
62196: GO 62263
// result := 0 ;
62198: LD_ADDR_VAR 0 2
62202: PUSH
62203: LD_INT 0
62205: ST_TO_ADDR
// if GetTaskList ( sci ) then
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 437
62215: IFFALSE 62263
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62217: LD_VAR 0 1
62221: PPUSH
62222: CALL_OW 437
62226: PUSH
62227: LD_INT 1
62229: ARRAY
62230: PUSH
62231: LD_INT 1
62233: ARRAY
62234: PUSH
62235: LD_STRING l
62237: EQUAL
62238: IFFALSE 62263
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62240: LD_ADDR_VAR 0 2
62244: PUSH
62245: LD_VAR 0 1
62249: PPUSH
62250: CALL_OW 437
62254: PUSH
62255: LD_INT 1
62257: ARRAY
62258: PUSH
62259: LD_INT 4
62261: ARRAY
62262: ST_TO_ADDR
// end ;
62263: LD_VAR 0 2
62267: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62268: LD_INT 0
62270: PPUSH
62271: PPUSH
62272: PPUSH
62273: PPUSH
// if not base_units then
62274: LD_VAR 0 1
62278: NOT
62279: IFFALSE 62283
// exit ;
62281: GO 62370
// result := false ;
62283: LD_ADDR_VAR 0 2
62287: PUSH
62288: LD_INT 0
62290: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62291: LD_ADDR_VAR 0 5
62295: PUSH
62296: LD_VAR 0 1
62300: PPUSH
62301: LD_INT 21
62303: PUSH
62304: LD_INT 3
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PPUSH
62311: CALL_OW 72
62315: ST_TO_ADDR
// if not tmp then
62316: LD_VAR 0 5
62320: NOT
62321: IFFALSE 62325
// exit ;
62323: GO 62370
// for i in tmp do
62325: LD_ADDR_VAR 0 3
62329: PUSH
62330: LD_VAR 0 5
62334: PUSH
62335: FOR_IN
62336: IFFALSE 62368
// begin result := EnemyInRange ( i , 22 ) ;
62338: LD_ADDR_VAR 0 2
62342: PUSH
62343: LD_VAR 0 3
62347: PPUSH
62348: LD_INT 22
62350: PPUSH
62351: CALL 59957 0 2
62355: ST_TO_ADDR
// if result then
62356: LD_VAR 0 2
62360: IFFALSE 62366
// exit ;
62362: POP
62363: POP
62364: GO 62370
// end ;
62366: GO 62335
62368: POP
62369: POP
// end ;
62370: LD_VAR 0 2
62374: RET
// export function FilterByTag ( units , tag ) ; begin
62375: LD_INT 0
62377: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62378: LD_ADDR_VAR 0 3
62382: PUSH
62383: LD_VAR 0 1
62387: PPUSH
62388: LD_INT 120
62390: PUSH
62391: LD_VAR 0 2
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PPUSH
62400: CALL_OW 72
62404: ST_TO_ADDR
// end ;
62405: LD_VAR 0 3
62409: RET
// export function IsDriver ( un ) ; begin
62410: LD_INT 0
62412: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62413: LD_ADDR_VAR 0 2
62417: PUSH
62418: LD_VAR 0 1
62422: PUSH
62423: LD_INT 55
62425: PUSH
62426: EMPTY
62427: LIST
62428: PPUSH
62429: CALL_OW 69
62433: IN
62434: ST_TO_ADDR
// end ;
62435: LD_VAR 0 2
62439: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62440: LD_INT 0
62442: PPUSH
62443: PPUSH
// list := [ ] ;
62444: LD_ADDR_VAR 0 5
62448: PUSH
62449: EMPTY
62450: ST_TO_ADDR
// case d of 0 :
62451: LD_VAR 0 3
62455: PUSH
62456: LD_INT 0
62458: DOUBLE
62459: EQUAL
62460: IFTRUE 62464
62462: GO 62597
62464: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62465: LD_ADDR_VAR 0 5
62469: PUSH
62470: LD_VAR 0 1
62474: PUSH
62475: LD_INT 4
62477: MINUS
62478: PUSH
62479: LD_VAR 0 2
62483: PUSH
62484: LD_INT 4
62486: MINUS
62487: PUSH
62488: LD_INT 2
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: PUSH
62496: LD_VAR 0 1
62500: PUSH
62501: LD_INT 3
62503: MINUS
62504: PUSH
62505: LD_VAR 0 2
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: LIST
62517: PUSH
62518: LD_VAR 0 1
62522: PUSH
62523: LD_INT 4
62525: PLUS
62526: PUSH
62527: LD_VAR 0 2
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: PUSH
62540: LD_VAR 0 1
62544: PUSH
62545: LD_INT 3
62547: PLUS
62548: PUSH
62549: LD_VAR 0 2
62553: PUSH
62554: LD_INT 3
62556: PLUS
62557: PUSH
62558: LD_INT 5
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: PUSH
62566: LD_VAR 0 1
62570: PUSH
62571: LD_VAR 0 2
62575: PUSH
62576: LD_INT 4
62578: PLUS
62579: PUSH
62580: LD_INT 0
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: LIST
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: ST_TO_ADDR
// end ; 1 :
62595: GO 63295
62597: LD_INT 1
62599: DOUBLE
62600: EQUAL
62601: IFTRUE 62605
62603: GO 62738
62605: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62606: LD_ADDR_VAR 0 5
62610: PUSH
62611: LD_VAR 0 1
62615: PUSH
62616: LD_VAR 0 2
62620: PUSH
62621: LD_INT 4
62623: MINUS
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: LIST
62632: PUSH
62633: LD_VAR 0 1
62637: PUSH
62638: LD_INT 3
62640: MINUS
62641: PUSH
62642: LD_VAR 0 2
62646: PUSH
62647: LD_INT 3
62649: MINUS
62650: PUSH
62651: LD_INT 2
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: LIST
62658: PUSH
62659: LD_VAR 0 1
62663: PUSH
62664: LD_INT 4
62666: MINUS
62667: PUSH
62668: LD_VAR 0 2
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: PUSH
62681: LD_VAR 0 1
62685: PUSH
62686: LD_VAR 0 2
62690: PUSH
62691: LD_INT 3
62693: PLUS
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: PUSH
62703: LD_VAR 0 1
62707: PUSH
62708: LD_INT 4
62710: PLUS
62711: PUSH
62712: LD_VAR 0 2
62716: PUSH
62717: LD_INT 4
62719: PLUS
62720: PUSH
62721: LD_INT 5
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: ST_TO_ADDR
// end ; 2 :
62736: GO 63295
62738: LD_INT 2
62740: DOUBLE
62741: EQUAL
62742: IFTRUE 62746
62744: GO 62875
62746: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62747: LD_ADDR_VAR 0 5
62751: PUSH
62752: LD_VAR 0 1
62756: PUSH
62757: LD_VAR 0 2
62761: PUSH
62762: LD_INT 3
62764: MINUS
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: LIST
62773: PUSH
62774: LD_VAR 0 1
62778: PUSH
62779: LD_INT 4
62781: PLUS
62782: PUSH
62783: LD_VAR 0 2
62787: PUSH
62788: LD_INT 4
62790: PUSH
62791: EMPTY
62792: LIST
62793: LIST
62794: LIST
62795: PUSH
62796: LD_VAR 0 1
62800: PUSH
62801: LD_VAR 0 2
62805: PUSH
62806: LD_INT 4
62808: PLUS
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: PUSH
62818: LD_VAR 0 1
62822: PUSH
62823: LD_INT 3
62825: MINUS
62826: PUSH
62827: LD_VAR 0 2
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: LIST
62839: PUSH
62840: LD_VAR 0 1
62844: PUSH
62845: LD_INT 4
62847: MINUS
62848: PUSH
62849: LD_VAR 0 2
62853: PUSH
62854: LD_INT 4
62856: MINUS
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: LIST
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// end ; 3 :
62873: GO 63295
62875: LD_INT 3
62877: DOUBLE
62878: EQUAL
62879: IFTRUE 62883
62881: GO 63016
62883: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62884: LD_ADDR_VAR 0 5
62888: PUSH
62889: LD_VAR 0 1
62893: PUSH
62894: LD_INT 3
62896: PLUS
62897: PUSH
62898: LD_VAR 0 2
62902: PUSH
62903: LD_INT 4
62905: PUSH
62906: EMPTY
62907: LIST
62908: LIST
62909: LIST
62910: PUSH
62911: LD_VAR 0 1
62915: PUSH
62916: LD_INT 4
62918: PLUS
62919: PUSH
62920: LD_VAR 0 2
62924: PUSH
62925: LD_INT 4
62927: PLUS
62928: PUSH
62929: LD_INT 5
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: PUSH
62937: LD_VAR 0 1
62941: PUSH
62942: LD_INT 4
62944: MINUS
62945: PUSH
62946: LD_VAR 0 2
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: LIST
62958: PUSH
62959: LD_VAR 0 1
62963: PUSH
62964: LD_VAR 0 2
62968: PUSH
62969: LD_INT 4
62971: MINUS
62972: PUSH
62973: LD_INT 3
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: LIST
62980: PUSH
62981: LD_VAR 0 1
62985: PUSH
62986: LD_INT 3
62988: MINUS
62989: PUSH
62990: LD_VAR 0 2
62994: PUSH
62995: LD_INT 3
62997: MINUS
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: ST_TO_ADDR
// end ; 4 :
63014: GO 63295
63016: LD_INT 4
63018: DOUBLE
63019: EQUAL
63020: IFTRUE 63024
63022: GO 63157
63024: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
63025: LD_ADDR_VAR 0 5
63029: PUSH
63030: LD_VAR 0 1
63034: PUSH
63035: LD_VAR 0 2
63039: PUSH
63040: LD_INT 4
63042: PLUS
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: LIST
63051: PUSH
63052: LD_VAR 0 1
63056: PUSH
63057: LD_INT 3
63059: PLUS
63060: PUSH
63061: LD_VAR 0 2
63065: PUSH
63066: LD_INT 3
63068: PLUS
63069: PUSH
63070: LD_INT 5
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: LIST
63077: PUSH
63078: LD_VAR 0 1
63082: PUSH
63083: LD_INT 4
63085: PLUS
63086: PUSH
63087: LD_VAR 0 2
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: LIST
63099: PUSH
63100: LD_VAR 0 1
63104: PUSH
63105: LD_VAR 0 2
63109: PUSH
63110: LD_INT 3
63112: MINUS
63113: PUSH
63114: LD_INT 3
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: LIST
63121: PUSH
63122: LD_VAR 0 1
63126: PUSH
63127: LD_INT 4
63129: MINUS
63130: PUSH
63131: LD_VAR 0 2
63135: PUSH
63136: LD_INT 4
63138: MINUS
63139: PUSH
63140: LD_INT 2
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: LIST
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: ST_TO_ADDR
// end ; 5 :
63155: GO 63295
63157: LD_INT 5
63159: DOUBLE
63160: EQUAL
63161: IFTRUE 63165
63163: GO 63294
63165: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63166: LD_ADDR_VAR 0 5
63170: PUSH
63171: LD_VAR 0 1
63175: PUSH
63176: LD_INT 4
63178: MINUS
63179: PUSH
63180: LD_VAR 0 2
63184: PUSH
63185: LD_INT 1
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: PUSH
63193: LD_VAR 0 1
63197: PUSH
63198: LD_VAR 0 2
63202: PUSH
63203: LD_INT 4
63205: MINUS
63206: PUSH
63207: LD_INT 3
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: LIST
63214: PUSH
63215: LD_VAR 0 1
63219: PUSH
63220: LD_INT 4
63222: PLUS
63223: PUSH
63224: LD_VAR 0 2
63228: PUSH
63229: LD_INT 4
63231: PLUS
63232: PUSH
63233: LD_INT 5
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: LIST
63240: PUSH
63241: LD_VAR 0 1
63245: PUSH
63246: LD_INT 3
63248: PLUS
63249: PUSH
63250: LD_VAR 0 2
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: LIST
63262: PUSH
63263: LD_VAR 0 1
63267: PUSH
63268: LD_VAR 0 2
63272: PUSH
63273: LD_INT 3
63275: PLUS
63276: PUSH
63277: LD_INT 0
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: LIST
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: ST_TO_ADDR
// end ; end ;
63292: GO 63295
63294: POP
// result := list ;
63295: LD_ADDR_VAR 0 4
63299: PUSH
63300: LD_VAR 0 5
63304: ST_TO_ADDR
// end ;
63305: LD_VAR 0 4
63309: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63310: LD_INT 0
63312: PPUSH
63313: PPUSH
63314: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63315: LD_VAR 0 1
63319: NOT
63320: PUSH
63321: LD_VAR 0 2
63325: PUSH
63326: LD_INT 1
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: LD_INT 3
63334: PUSH
63335: LD_INT 4
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: IN
63344: NOT
63345: OR
63346: IFFALSE 63350
// exit ;
63348: GO 63433
// tmp := [ ] ;
63350: LD_ADDR_VAR 0 5
63354: PUSH
63355: EMPTY
63356: ST_TO_ADDR
// for i in units do
63357: LD_ADDR_VAR 0 4
63361: PUSH
63362: LD_VAR 0 1
63366: PUSH
63367: FOR_IN
63368: IFFALSE 63402
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63370: LD_ADDR_VAR 0 5
63374: PUSH
63375: LD_VAR 0 5
63379: PPUSH
63380: LD_VAR 0 4
63384: PPUSH
63385: LD_VAR 0 2
63389: PPUSH
63390: CALL_OW 259
63394: PPUSH
63395: CALL 64794 0 2
63399: ST_TO_ADDR
63400: GO 63367
63402: POP
63403: POP
// if not tmp then
63404: LD_VAR 0 5
63408: NOT
63409: IFFALSE 63413
// exit ;
63411: GO 63433
// result := SortListByListDesc ( units , tmp ) ;
63413: LD_ADDR_VAR 0 3
63417: PUSH
63418: LD_VAR 0 1
63422: PPUSH
63423: LD_VAR 0 5
63427: PPUSH
63428: CALL_OW 77
63432: ST_TO_ADDR
// end ;
63433: LD_VAR 0 3
63437: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63438: LD_INT 0
63440: PPUSH
63441: PPUSH
63442: PPUSH
// result := false ;
63443: LD_ADDR_VAR 0 3
63447: PUSH
63448: LD_INT 0
63450: ST_TO_ADDR
// if not building then
63451: LD_VAR 0 2
63455: NOT
63456: IFFALSE 63460
// exit ;
63458: GO 63598
// x := GetX ( building ) ;
63460: LD_ADDR_VAR 0 4
63464: PUSH
63465: LD_VAR 0 2
63469: PPUSH
63470: CALL_OW 250
63474: ST_TO_ADDR
// y := GetY ( building ) ;
63475: LD_ADDR_VAR 0 5
63479: PUSH
63480: LD_VAR 0 2
63484: PPUSH
63485: CALL_OW 251
63489: ST_TO_ADDR
// if not x or not y then
63490: LD_VAR 0 4
63494: NOT
63495: PUSH
63496: LD_VAR 0 5
63500: NOT
63501: OR
63502: IFFALSE 63506
// exit ;
63504: GO 63598
// if GetTaskList ( unit ) then
63506: LD_VAR 0 1
63510: PPUSH
63511: CALL_OW 437
63515: IFFALSE 63598
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63517: LD_STRING e
63519: PUSH
63520: LD_VAR 0 1
63524: PPUSH
63525: CALL_OW 437
63529: PUSH
63530: LD_INT 1
63532: ARRAY
63533: PUSH
63534: LD_INT 1
63536: ARRAY
63537: EQUAL
63538: PUSH
63539: LD_VAR 0 4
63543: PUSH
63544: LD_VAR 0 1
63548: PPUSH
63549: CALL_OW 437
63553: PUSH
63554: LD_INT 1
63556: ARRAY
63557: PUSH
63558: LD_INT 2
63560: ARRAY
63561: EQUAL
63562: AND
63563: PUSH
63564: LD_VAR 0 5
63568: PUSH
63569: LD_VAR 0 1
63573: PPUSH
63574: CALL_OW 437
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: PUSH
63583: LD_INT 3
63585: ARRAY
63586: EQUAL
63587: AND
63588: IFFALSE 63598
// result := true end ;
63590: LD_ADDR_VAR 0 3
63594: PUSH
63595: LD_INT 1
63597: ST_TO_ADDR
// end ;
63598: LD_VAR 0 3
63602: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63603: LD_INT 0
63605: PPUSH
// result := false ;
63606: LD_ADDR_VAR 0 4
63610: PUSH
63611: LD_INT 0
63613: ST_TO_ADDR
// if GetTaskList ( unit ) then
63614: LD_VAR 0 1
63618: PPUSH
63619: CALL_OW 437
63623: IFFALSE 63706
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63625: LD_STRING M
63627: PUSH
63628: LD_VAR 0 1
63632: PPUSH
63633: CALL_OW 437
63637: PUSH
63638: LD_INT 1
63640: ARRAY
63641: PUSH
63642: LD_INT 1
63644: ARRAY
63645: EQUAL
63646: PUSH
63647: LD_VAR 0 2
63651: PUSH
63652: LD_VAR 0 1
63656: PPUSH
63657: CALL_OW 437
63661: PUSH
63662: LD_INT 1
63664: ARRAY
63665: PUSH
63666: LD_INT 2
63668: ARRAY
63669: EQUAL
63670: AND
63671: PUSH
63672: LD_VAR 0 3
63676: PUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 437
63686: PUSH
63687: LD_INT 1
63689: ARRAY
63690: PUSH
63691: LD_INT 3
63693: ARRAY
63694: EQUAL
63695: AND
63696: IFFALSE 63706
// result := true ;
63698: LD_ADDR_VAR 0 4
63702: PUSH
63703: LD_INT 1
63705: ST_TO_ADDR
// end ; end ;
63706: LD_VAR 0 4
63710: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63711: LD_INT 0
63713: PPUSH
63714: PPUSH
63715: PPUSH
63716: PPUSH
// if not unit or not area then
63717: LD_VAR 0 1
63721: NOT
63722: PUSH
63723: LD_VAR 0 2
63727: NOT
63728: OR
63729: IFFALSE 63733
// exit ;
63731: GO 63897
// tmp := AreaToList ( area , i ) ;
63733: LD_ADDR_VAR 0 6
63737: PUSH
63738: LD_VAR 0 2
63742: PPUSH
63743: LD_VAR 0 5
63747: PPUSH
63748: CALL_OW 517
63752: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63753: LD_ADDR_VAR 0 5
63757: PUSH
63758: DOUBLE
63759: LD_INT 1
63761: DEC
63762: ST_TO_ADDR
63763: LD_VAR 0 6
63767: PUSH
63768: LD_INT 1
63770: ARRAY
63771: PUSH
63772: FOR_TO
63773: IFFALSE 63895
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63775: LD_ADDR_VAR 0 7
63779: PUSH
63780: LD_VAR 0 6
63784: PUSH
63785: LD_INT 1
63787: ARRAY
63788: PUSH
63789: LD_VAR 0 5
63793: ARRAY
63794: PUSH
63795: LD_VAR 0 6
63799: PUSH
63800: LD_INT 2
63802: ARRAY
63803: PUSH
63804: LD_VAR 0 5
63808: ARRAY
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
63814: LD_VAR 0 7
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: LD_VAR 0 7
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: PPUSH
63832: CALL_OW 428
63836: PUSH
63837: LD_INT 0
63839: EQUAL
63840: IFFALSE 63893
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63842: LD_VAR 0 1
63846: PPUSH
63847: LD_VAR 0 7
63851: PUSH
63852: LD_INT 1
63854: ARRAY
63855: PPUSH
63856: LD_VAR 0 7
63860: PUSH
63861: LD_INT 2
63863: ARRAY
63864: PPUSH
63865: LD_VAR 0 3
63869: PPUSH
63870: CALL_OW 48
// result := IsPlaced ( unit ) ;
63874: LD_ADDR_VAR 0 4
63878: PUSH
63879: LD_VAR 0 1
63883: PPUSH
63884: CALL_OW 305
63888: ST_TO_ADDR
// exit ;
63889: POP
63890: POP
63891: GO 63897
// end ; end ;
63893: GO 63772
63895: POP
63896: POP
// end ;
63897: LD_VAR 0 4
63901: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63902: LD_INT 0
63904: PPUSH
63905: PPUSH
63906: PPUSH
// if not side or side > 8 then
63907: LD_VAR 0 1
63911: NOT
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 8
63920: GREATER
63921: OR
63922: IFFALSE 63926
// exit ;
63924: GO 64113
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63926: LD_ADDR_VAR 0 4
63930: PUSH
63931: LD_INT 22
63933: PUSH
63934: LD_VAR 0 1
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 21
63945: PUSH
63946: LD_INT 3
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PPUSH
63957: CALL_OW 69
63961: ST_TO_ADDR
// if not tmp then
63962: LD_VAR 0 4
63966: NOT
63967: IFFALSE 63971
// exit ;
63969: GO 64113
// enable_addtolog := true ;
63971: LD_ADDR_OWVAR 81
63975: PUSH
63976: LD_INT 1
63978: ST_TO_ADDR
// AddToLog ( [ ) ;
63979: LD_STRING [
63981: PPUSH
63982: CALL_OW 561
// for i in tmp do
63986: LD_ADDR_VAR 0 3
63990: PUSH
63991: LD_VAR 0 4
63995: PUSH
63996: FOR_IN
63997: IFFALSE 64104
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63999: LD_STRING [
64001: PUSH
64002: LD_VAR 0 3
64006: PPUSH
64007: CALL_OW 266
64011: STR
64012: PUSH
64013: LD_STRING , 
64015: STR
64016: PUSH
64017: LD_VAR 0 3
64021: PPUSH
64022: CALL_OW 250
64026: STR
64027: PUSH
64028: LD_STRING , 
64030: STR
64031: PUSH
64032: LD_VAR 0 3
64036: PPUSH
64037: CALL_OW 251
64041: STR
64042: PUSH
64043: LD_STRING , 
64045: STR
64046: PUSH
64047: LD_VAR 0 3
64051: PPUSH
64052: CALL_OW 254
64056: STR
64057: PUSH
64058: LD_STRING , 
64060: STR
64061: PUSH
64062: LD_VAR 0 3
64066: PPUSH
64067: LD_INT 1
64069: PPUSH
64070: CALL_OW 268
64074: STR
64075: PUSH
64076: LD_STRING , 
64078: STR
64079: PUSH
64080: LD_VAR 0 3
64084: PPUSH
64085: LD_INT 2
64087: PPUSH
64088: CALL_OW 268
64092: STR
64093: PUSH
64094: LD_STRING ],
64096: STR
64097: PPUSH
64098: CALL_OW 561
// end ;
64102: GO 63996
64104: POP
64105: POP
// AddToLog ( ]; ) ;
64106: LD_STRING ];
64108: PPUSH
64109: CALL_OW 561
// end ;
64113: LD_VAR 0 2
64117: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64118: LD_INT 0
64120: PPUSH
64121: PPUSH
64122: PPUSH
64123: PPUSH
64124: PPUSH
// if not area or not rate or not max then
64125: LD_VAR 0 1
64129: NOT
64130: PUSH
64131: LD_VAR 0 2
64135: NOT
64136: OR
64137: PUSH
64138: LD_VAR 0 4
64142: NOT
64143: OR
64144: IFFALSE 64148
// exit ;
64146: GO 64337
// while 1 do
64148: LD_INT 1
64150: IFFALSE 64337
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64152: LD_ADDR_VAR 0 9
64156: PUSH
64157: LD_VAR 0 1
64161: PPUSH
64162: LD_INT 1
64164: PPUSH
64165: CALL_OW 287
64169: PUSH
64170: LD_INT 10
64172: MUL
64173: ST_TO_ADDR
// r := rate / 10 ;
64174: LD_ADDR_VAR 0 7
64178: PUSH
64179: LD_VAR 0 2
64183: PUSH
64184: LD_INT 10
64186: DIVREAL
64187: ST_TO_ADDR
// time := 1 1$00 ;
64188: LD_ADDR_VAR 0 8
64192: PUSH
64193: LD_INT 2100
64195: ST_TO_ADDR
// if amount < min then
64196: LD_VAR 0 9
64200: PUSH
64201: LD_VAR 0 3
64205: LESS
64206: IFFALSE 64224
// r := r * 2 else
64208: LD_ADDR_VAR 0 7
64212: PUSH
64213: LD_VAR 0 7
64217: PUSH
64218: LD_INT 2
64220: MUL
64221: ST_TO_ADDR
64222: GO 64250
// if amount > max then
64224: LD_VAR 0 9
64228: PUSH
64229: LD_VAR 0 4
64233: GREATER
64234: IFFALSE 64250
// r := r / 2 ;
64236: LD_ADDR_VAR 0 7
64240: PUSH
64241: LD_VAR 0 7
64245: PUSH
64246: LD_INT 2
64248: DIVREAL
64249: ST_TO_ADDR
// time := time / r ;
64250: LD_ADDR_VAR 0 8
64254: PUSH
64255: LD_VAR 0 8
64259: PUSH
64260: LD_VAR 0 7
64264: DIVREAL
64265: ST_TO_ADDR
// if time < 0 then
64266: LD_VAR 0 8
64270: PUSH
64271: LD_INT 0
64273: LESS
64274: IFFALSE 64291
// time := time * - 1 ;
64276: LD_ADDR_VAR 0 8
64280: PUSH
64281: LD_VAR 0 8
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: MUL
64290: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64291: LD_VAR 0 8
64295: PUSH
64296: LD_INT 35
64298: PPUSH
64299: LD_INT 875
64301: PPUSH
64302: CALL_OW 12
64306: PLUS
64307: PPUSH
64308: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64312: LD_INT 1
64314: PPUSH
64315: LD_INT 5
64317: PPUSH
64318: CALL_OW 12
64322: PPUSH
64323: LD_VAR 0 1
64327: PPUSH
64328: LD_INT 1
64330: PPUSH
64331: CALL_OW 55
// end ;
64335: GO 64148
// end ;
64337: LD_VAR 0 5
64341: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64342: LD_INT 0
64344: PPUSH
64345: PPUSH
64346: PPUSH
64347: PPUSH
64348: PPUSH
64349: PPUSH
64350: PPUSH
64351: PPUSH
// if not turrets or not factories then
64352: LD_VAR 0 1
64356: NOT
64357: PUSH
64358: LD_VAR 0 2
64362: NOT
64363: OR
64364: IFFALSE 64368
// exit ;
64366: GO 64675
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64368: LD_ADDR_VAR 0 10
64372: PUSH
64373: LD_INT 5
64375: PUSH
64376: LD_INT 6
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 2
64385: PUSH
64386: LD_INT 4
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: LD_INT 5
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: LD_INT 24
64410: PUSH
64411: LD_INT 25
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 23
64420: PUSH
64421: LD_INT 27
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 42
64434: PUSH
64435: LD_INT 43
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 44
64444: PUSH
64445: LD_INT 46
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 45
64454: PUSH
64455: LD_INT 47
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: LIST
64471: ST_TO_ADDR
// result := [ ] ;
64472: LD_ADDR_VAR 0 3
64476: PUSH
64477: EMPTY
64478: ST_TO_ADDR
// for i in turrets do
64479: LD_ADDR_VAR 0 4
64483: PUSH
64484: LD_VAR 0 1
64488: PUSH
64489: FOR_IN
64490: IFFALSE 64673
// begin nat := GetNation ( i ) ;
64492: LD_ADDR_VAR 0 7
64496: PUSH
64497: LD_VAR 0 4
64501: PPUSH
64502: CALL_OW 248
64506: ST_TO_ADDR
// weapon := 0 ;
64507: LD_ADDR_VAR 0 8
64511: PUSH
64512: LD_INT 0
64514: ST_TO_ADDR
// if not nat then
64515: LD_VAR 0 7
64519: NOT
64520: IFFALSE 64524
// continue ;
64522: GO 64489
// for j in list [ nat ] do
64524: LD_ADDR_VAR 0 5
64528: PUSH
64529: LD_VAR 0 10
64533: PUSH
64534: LD_VAR 0 7
64538: ARRAY
64539: PUSH
64540: FOR_IN
64541: IFFALSE 64582
// if GetBWeapon ( i ) = j [ 1 ] then
64543: LD_VAR 0 4
64547: PPUSH
64548: CALL_OW 269
64552: PUSH
64553: LD_VAR 0 5
64557: PUSH
64558: LD_INT 1
64560: ARRAY
64561: EQUAL
64562: IFFALSE 64580
// begin weapon := j [ 2 ] ;
64564: LD_ADDR_VAR 0 8
64568: PUSH
64569: LD_VAR 0 5
64573: PUSH
64574: LD_INT 2
64576: ARRAY
64577: ST_TO_ADDR
// break ;
64578: GO 64582
// end ;
64580: GO 64540
64582: POP
64583: POP
// if not weapon then
64584: LD_VAR 0 8
64588: NOT
64589: IFFALSE 64593
// continue ;
64591: GO 64489
// for k in factories do
64593: LD_ADDR_VAR 0 6
64597: PUSH
64598: LD_VAR 0 2
64602: PUSH
64603: FOR_IN
64604: IFFALSE 64669
// begin weapons := AvailableWeaponList ( k ) ;
64606: LD_ADDR_VAR 0 9
64610: PUSH
64611: LD_VAR 0 6
64615: PPUSH
64616: CALL_OW 478
64620: ST_TO_ADDR
// if not weapons then
64621: LD_VAR 0 9
64625: NOT
64626: IFFALSE 64630
// continue ;
64628: GO 64603
// if weapon in weapons then
64630: LD_VAR 0 8
64634: PUSH
64635: LD_VAR 0 9
64639: IN
64640: IFFALSE 64667
// begin result := [ i , weapon ] ;
64642: LD_ADDR_VAR 0 3
64646: PUSH
64647: LD_VAR 0 4
64651: PUSH
64652: LD_VAR 0 8
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: ST_TO_ADDR
// exit ;
64661: POP
64662: POP
64663: POP
64664: POP
64665: GO 64675
// end ; end ;
64667: GO 64603
64669: POP
64670: POP
// end ;
64671: GO 64489
64673: POP
64674: POP
// end ;
64675: LD_VAR 0 3
64679: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64680: LD_INT 0
64682: PPUSH
// if not side or side > 8 then
64683: LD_VAR 0 3
64687: NOT
64688: PUSH
64689: LD_VAR 0 3
64693: PUSH
64694: LD_INT 8
64696: GREATER
64697: OR
64698: IFFALSE 64702
// exit ;
64700: GO 64761
// if not range then
64702: LD_VAR 0 4
64706: NOT
64707: IFFALSE 64718
// range := - 12 ;
64709: LD_ADDR_VAR 0 4
64713: PUSH
64714: LD_INT 12
64716: NEG
64717: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64718: LD_VAR 0 1
64722: PPUSH
64723: LD_VAR 0 2
64727: PPUSH
64728: LD_VAR 0 3
64732: PPUSH
64733: LD_VAR 0 4
64737: PPUSH
64738: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64742: LD_VAR 0 1
64746: PPUSH
64747: LD_VAR 0 2
64751: PPUSH
64752: LD_VAR 0 3
64756: PPUSH
64757: CALL_OW 331
// end ;
64761: LD_VAR 0 5
64765: RET
// export function Video ( mode ) ; begin
64766: LD_INT 0
64768: PPUSH
// ingame_video = mode ;
64769: LD_ADDR_OWVAR 52
64773: PUSH
64774: LD_VAR 0 1
64778: ST_TO_ADDR
// interface_hidden = mode ;
64779: LD_ADDR_OWVAR 54
64783: PUSH
64784: LD_VAR 0 1
64788: ST_TO_ADDR
// end ;
64789: LD_VAR 0 2
64793: RET
// export function Join ( array , element ) ; begin
64794: LD_INT 0
64796: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64797: LD_ADDR_VAR 0 3
64801: PUSH
64802: LD_VAR 0 1
64806: PPUSH
64807: LD_VAR 0 1
64811: PUSH
64812: LD_INT 1
64814: PLUS
64815: PPUSH
64816: LD_VAR 0 2
64820: PPUSH
64821: CALL_OW 1
64825: ST_TO_ADDR
// end ;
64826: LD_VAR 0 3
64830: RET
// export function JoinUnion ( array , element ) ; begin
64831: LD_INT 0
64833: PPUSH
// result := array union element ;
64834: LD_ADDR_VAR 0 3
64838: PUSH
64839: LD_VAR 0 1
64843: PUSH
64844: LD_VAR 0 2
64848: UNION
64849: ST_TO_ADDR
// end ;
64850: LD_VAR 0 3
64854: RET
// export function GetBehemoths ( side ) ; begin
64855: LD_INT 0
64857: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64858: LD_ADDR_VAR 0 2
64862: PUSH
64863: LD_INT 22
64865: PUSH
64866: LD_VAR 0 1
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: PUSH
64875: LD_INT 31
64877: PUSH
64878: LD_INT 25
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PPUSH
64889: CALL_OW 69
64893: ST_TO_ADDR
// end ;
64894: LD_VAR 0 2
64898: RET
// export function Shuffle ( array ) ; var i , index ; begin
64899: LD_INT 0
64901: PPUSH
64902: PPUSH
64903: PPUSH
// result := [ ] ;
64904: LD_ADDR_VAR 0 2
64908: PUSH
64909: EMPTY
64910: ST_TO_ADDR
// if not array then
64911: LD_VAR 0 1
64915: NOT
64916: IFFALSE 64920
// exit ;
64918: GO 65019
// Randomize ;
64920: CALL_OW 10
// for i = array downto 1 do
64924: LD_ADDR_VAR 0 3
64928: PUSH
64929: DOUBLE
64930: LD_VAR 0 1
64934: INC
64935: ST_TO_ADDR
64936: LD_INT 1
64938: PUSH
64939: FOR_DOWNTO
64940: IFFALSE 65017
// begin index := rand ( 1 , array ) ;
64942: LD_ADDR_VAR 0 4
64946: PUSH
64947: LD_INT 1
64949: PPUSH
64950: LD_VAR 0 1
64954: PPUSH
64955: CALL_OW 12
64959: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64960: LD_ADDR_VAR 0 2
64964: PUSH
64965: LD_VAR 0 2
64969: PPUSH
64970: LD_VAR 0 2
64974: PUSH
64975: LD_INT 1
64977: PLUS
64978: PPUSH
64979: LD_VAR 0 1
64983: PUSH
64984: LD_VAR 0 4
64988: ARRAY
64989: PPUSH
64990: CALL_OW 2
64994: ST_TO_ADDR
// array := Delete ( array , index ) ;
64995: LD_ADDR_VAR 0 1
64999: PUSH
65000: LD_VAR 0 1
65004: PPUSH
65005: LD_VAR 0 4
65009: PPUSH
65010: CALL_OW 3
65014: ST_TO_ADDR
// end ;
65015: GO 64939
65017: POP
65018: POP
// end ;
65019: LD_VAR 0 2
65023: RET
// export function GetBaseMaterials ( base ) ; begin
65024: LD_INT 0
65026: PPUSH
// result := [ 0 , 0 , 0 ] ;
65027: LD_ADDR_VAR 0 2
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: LIST
65045: ST_TO_ADDR
// if not base then
65046: LD_VAR 0 1
65050: NOT
65051: IFFALSE 65055
// exit ;
65053: GO 65104
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65055: LD_ADDR_VAR 0 2
65059: PUSH
65060: LD_VAR 0 1
65064: PPUSH
65065: LD_INT 1
65067: PPUSH
65068: CALL_OW 275
65072: PUSH
65073: LD_VAR 0 1
65077: PPUSH
65078: LD_INT 2
65080: PPUSH
65081: CALL_OW 275
65085: PUSH
65086: LD_VAR 0 1
65090: PPUSH
65091: LD_INT 3
65093: PPUSH
65094: CALL_OW 275
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: LIST
65103: ST_TO_ADDR
// end ;
65104: LD_VAR 0 2
65108: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65109: LD_INT 0
65111: PPUSH
65112: PPUSH
// result := array ;
65113: LD_ADDR_VAR 0 3
65117: PUSH
65118: LD_VAR 0 1
65122: ST_TO_ADDR
// if size >= result then
65123: LD_VAR 0 2
65127: PUSH
65128: LD_VAR 0 3
65132: GREATEREQUAL
65133: IFFALSE 65137
// exit ;
65135: GO 65187
// if size then
65137: LD_VAR 0 2
65141: IFFALSE 65187
// for i := array downto size do
65143: LD_ADDR_VAR 0 4
65147: PUSH
65148: DOUBLE
65149: LD_VAR 0 1
65153: INC
65154: ST_TO_ADDR
65155: LD_VAR 0 2
65159: PUSH
65160: FOR_DOWNTO
65161: IFFALSE 65185
// result := Delete ( result , result ) ;
65163: LD_ADDR_VAR 0 3
65167: PUSH
65168: LD_VAR 0 3
65172: PPUSH
65173: LD_VAR 0 3
65177: PPUSH
65178: CALL_OW 3
65182: ST_TO_ADDR
65183: GO 65160
65185: POP
65186: POP
// end ;
65187: LD_VAR 0 3
65191: RET
// export function ComExit ( unit ) ; var tmp ; begin
65192: LD_INT 0
65194: PPUSH
65195: PPUSH
// if not IsInUnit ( unit ) then
65196: LD_VAR 0 1
65200: PPUSH
65201: CALL_OW 310
65205: NOT
65206: IFFALSE 65210
// exit ;
65208: GO 65270
// tmp := IsInUnit ( unit ) ;
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: LD_VAR 0 1
65219: PPUSH
65220: CALL_OW 310
65224: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65225: LD_VAR 0 3
65229: PPUSH
65230: CALL_OW 247
65234: PUSH
65235: LD_INT 2
65237: EQUAL
65238: IFFALSE 65251
// ComExitVehicle ( unit ) else
65240: LD_VAR 0 1
65244: PPUSH
65245: CALL_OW 121
65249: GO 65260
// ComExitBuilding ( unit ) ;
65251: LD_VAR 0 1
65255: PPUSH
65256: CALL_OW 122
// result := tmp ;
65260: LD_ADDR_VAR 0 2
65264: PUSH
65265: LD_VAR 0 3
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 2
65274: RET
// export function ComExitAll ( units ) ; var i ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
// if not units then
65279: LD_VAR 0 1
65283: NOT
65284: IFFALSE 65288
// exit ;
65286: GO 65314
// for i in units do
65288: LD_ADDR_VAR 0 3
65292: PUSH
65293: LD_VAR 0 1
65297: PUSH
65298: FOR_IN
65299: IFFALSE 65312
// ComExit ( i ) ;
65301: LD_VAR 0 3
65305: PPUSH
65306: CALL 65192 0 1
65310: GO 65298
65312: POP
65313: POP
// end ;
65314: LD_VAR 0 2
65318: RET
// export function ResetHc ; begin
65319: LD_INT 0
65321: PPUSH
// InitHc ;
65322: CALL_OW 19
// hc_importance := 0 ;
65326: LD_ADDR_OWVAR 32
65330: PUSH
65331: LD_INT 0
65333: ST_TO_ADDR
// end ;
65334: LD_VAR 0 1
65338: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65339: LD_INT 0
65341: PPUSH
65342: PPUSH
65343: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65344: LD_ADDR_VAR 0 6
65348: PUSH
65349: LD_VAR 0 1
65353: PUSH
65354: LD_VAR 0 3
65358: PLUS
65359: PUSH
65360: LD_INT 2
65362: DIV
65363: ST_TO_ADDR
// if _x < 0 then
65364: LD_VAR 0 6
65368: PUSH
65369: LD_INT 0
65371: LESS
65372: IFFALSE 65389
// _x := _x * - 1 ;
65374: LD_ADDR_VAR 0 6
65378: PUSH
65379: LD_VAR 0 6
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: MUL
65388: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65389: LD_ADDR_VAR 0 7
65393: PUSH
65394: LD_VAR 0 2
65398: PUSH
65399: LD_VAR 0 4
65403: PLUS
65404: PUSH
65405: LD_INT 2
65407: DIV
65408: ST_TO_ADDR
// if _y < 0 then
65409: LD_VAR 0 7
65413: PUSH
65414: LD_INT 0
65416: LESS
65417: IFFALSE 65434
// _y := _y * - 1 ;
65419: LD_ADDR_VAR 0 7
65423: PUSH
65424: LD_VAR 0 7
65428: PUSH
65429: LD_INT 1
65431: NEG
65432: MUL
65433: ST_TO_ADDR
// result := [ _x , _y ] ;
65434: LD_ADDR_VAR 0 5
65438: PUSH
65439: LD_VAR 0 6
65443: PUSH
65444: LD_VAR 0 7
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: ST_TO_ADDR
// end ;
65453: LD_VAR 0 5
65457: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65458: LD_INT 0
65460: PPUSH
65461: PPUSH
65462: PPUSH
65463: PPUSH
// task := GetTaskList ( unit ) ;
65464: LD_ADDR_VAR 0 7
65468: PUSH
65469: LD_VAR 0 1
65473: PPUSH
65474: CALL_OW 437
65478: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65479: LD_VAR 0 7
65483: NOT
65484: PUSH
65485: LD_VAR 0 1
65489: PPUSH
65490: LD_VAR 0 2
65494: PPUSH
65495: CALL_OW 308
65499: NOT
65500: AND
65501: IFFALSE 65505
// exit ;
65503: GO 65623
// if IsInArea ( unit , area ) then
65505: LD_VAR 0 1
65509: PPUSH
65510: LD_VAR 0 2
65514: PPUSH
65515: CALL_OW 308
65519: IFFALSE 65537
// begin ComMoveToArea ( unit , goAway ) ;
65521: LD_VAR 0 1
65525: PPUSH
65526: LD_VAR 0 3
65530: PPUSH
65531: CALL_OW 113
// exit ;
65535: GO 65623
// end ; if task [ 1 ] [ 1 ] <> M then
65537: LD_VAR 0 7
65541: PUSH
65542: LD_INT 1
65544: ARRAY
65545: PUSH
65546: LD_INT 1
65548: ARRAY
65549: PUSH
65550: LD_STRING M
65552: NONEQUAL
65553: IFFALSE 65557
// exit ;
65555: GO 65623
// x := task [ 1 ] [ 2 ] ;
65557: LD_ADDR_VAR 0 5
65561: PUSH
65562: LD_VAR 0 7
65566: PUSH
65567: LD_INT 1
65569: ARRAY
65570: PUSH
65571: LD_INT 2
65573: ARRAY
65574: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65575: LD_ADDR_VAR 0 6
65579: PUSH
65580: LD_VAR 0 7
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PUSH
65589: LD_INT 3
65591: ARRAY
65592: ST_TO_ADDR
// if InArea ( x , y , area ) then
65593: LD_VAR 0 5
65597: PPUSH
65598: LD_VAR 0 6
65602: PPUSH
65603: LD_VAR 0 2
65607: PPUSH
65608: CALL_OW 309
65612: IFFALSE 65623
// ComStop ( unit ) ;
65614: LD_VAR 0 1
65618: PPUSH
65619: CALL_OW 141
// end ;
65623: LD_VAR 0 4
65627: RET
// export function Abs ( value ) ; begin
65628: LD_INT 0
65630: PPUSH
// result := value ;
65631: LD_ADDR_VAR 0 2
65635: PUSH
65636: LD_VAR 0 1
65640: ST_TO_ADDR
// if value < 0 then
65641: LD_VAR 0 1
65645: PUSH
65646: LD_INT 0
65648: LESS
65649: IFFALSE 65666
// result := value * - 1 ;
65651: LD_ADDR_VAR 0 2
65655: PUSH
65656: LD_VAR 0 1
65660: PUSH
65661: LD_INT 1
65663: NEG
65664: MUL
65665: ST_TO_ADDR
// end ;
65666: LD_VAR 0 2
65670: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65671: LD_INT 0
65673: PPUSH
65674: PPUSH
65675: PPUSH
65676: PPUSH
65677: PPUSH
65678: PPUSH
65679: PPUSH
65680: PPUSH
// if not unit or not building then
65681: LD_VAR 0 1
65685: NOT
65686: PUSH
65687: LD_VAR 0 2
65691: NOT
65692: OR
65693: IFFALSE 65697
// exit ;
65695: GO 65923
// x := GetX ( building ) ;
65697: LD_ADDR_VAR 0 4
65701: PUSH
65702: LD_VAR 0 2
65706: PPUSH
65707: CALL_OW 250
65711: ST_TO_ADDR
// y := GetY ( building ) ;
65712: LD_ADDR_VAR 0 6
65716: PUSH
65717: LD_VAR 0 2
65721: PPUSH
65722: CALL_OW 251
65726: ST_TO_ADDR
// d := GetDir ( building ) ;
65727: LD_ADDR_VAR 0 8
65731: PUSH
65732: LD_VAR 0 2
65736: PPUSH
65737: CALL_OW 254
65741: ST_TO_ADDR
// r := 4 ;
65742: LD_ADDR_VAR 0 9
65746: PUSH
65747: LD_INT 4
65749: ST_TO_ADDR
// for i := 1 to 5 do
65750: LD_ADDR_VAR 0 10
65754: PUSH
65755: DOUBLE
65756: LD_INT 1
65758: DEC
65759: ST_TO_ADDR
65760: LD_INT 5
65762: PUSH
65763: FOR_TO
65764: IFFALSE 65921
// begin _x := ShiftX ( x , d , r + i ) ;
65766: LD_ADDR_VAR 0 5
65770: PUSH
65771: LD_VAR 0 4
65775: PPUSH
65776: LD_VAR 0 8
65780: PPUSH
65781: LD_VAR 0 9
65785: PUSH
65786: LD_VAR 0 10
65790: PLUS
65791: PPUSH
65792: CALL_OW 272
65796: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65797: LD_ADDR_VAR 0 7
65801: PUSH
65802: LD_VAR 0 6
65806: PPUSH
65807: LD_VAR 0 8
65811: PPUSH
65812: LD_VAR 0 9
65816: PUSH
65817: LD_VAR 0 10
65821: PLUS
65822: PPUSH
65823: CALL_OW 273
65827: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65828: LD_VAR 0 5
65832: PPUSH
65833: LD_VAR 0 7
65837: PPUSH
65838: CALL_OW 488
65842: PUSH
65843: LD_VAR 0 5
65847: PPUSH
65848: LD_VAR 0 7
65852: PPUSH
65853: CALL_OW 428
65857: PPUSH
65858: CALL_OW 247
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: LD_INT 2
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: IN
65873: NOT
65874: AND
65875: IFFALSE 65919
// begin ComMoveXY ( unit , _x , _y ) ;
65877: LD_VAR 0 1
65881: PPUSH
65882: LD_VAR 0 5
65886: PPUSH
65887: LD_VAR 0 7
65891: PPUSH
65892: CALL_OW 111
// result := [ _x , _y ] ;
65896: LD_ADDR_VAR 0 3
65900: PUSH
65901: LD_VAR 0 5
65905: PUSH
65906: LD_VAR 0 7
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: ST_TO_ADDR
// exit ;
65915: POP
65916: POP
65917: GO 65923
// end ; end ;
65919: GO 65763
65921: POP
65922: POP
// end ;
65923: LD_VAR 0 3
65927: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65928: LD_INT 0
65930: PPUSH
65931: PPUSH
65932: PPUSH
// result := 0 ;
65933: LD_ADDR_VAR 0 3
65937: PUSH
65938: LD_INT 0
65940: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65941: LD_VAR 0 1
65945: PUSH
65946: LD_INT 0
65948: LESS
65949: PUSH
65950: LD_VAR 0 1
65954: PUSH
65955: LD_INT 8
65957: GREATER
65958: OR
65959: PUSH
65960: LD_VAR 0 2
65964: PUSH
65965: LD_INT 0
65967: LESS
65968: OR
65969: PUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_INT 8
65977: GREATER
65978: OR
65979: IFFALSE 65983
// exit ;
65981: GO 66058
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65983: LD_ADDR_VAR 0 4
65987: PUSH
65988: LD_INT 22
65990: PUSH
65991: LD_VAR 0 2
65995: PUSH
65996: EMPTY
65997: LIST
65998: LIST
65999: PPUSH
66000: CALL_OW 69
66004: PUSH
66005: FOR_IN
66006: IFFALSE 66056
// begin un := UnitShoot ( i ) ;
66008: LD_ADDR_VAR 0 5
66012: PUSH
66013: LD_VAR 0 4
66017: PPUSH
66018: CALL_OW 504
66022: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66023: LD_VAR 0 5
66027: PPUSH
66028: CALL_OW 255
66032: PUSH
66033: LD_VAR 0 1
66037: EQUAL
66038: IFFALSE 66054
// begin result := un ;
66040: LD_ADDR_VAR 0 3
66044: PUSH
66045: LD_VAR 0 5
66049: ST_TO_ADDR
// exit ;
66050: POP
66051: POP
66052: GO 66058
// end ; end ;
66054: GO 66005
66056: POP
66057: POP
// end ;
66058: LD_VAR 0 3
66062: RET
// export function GetCargoBay ( units ) ; begin
66063: LD_INT 0
66065: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66066: LD_ADDR_VAR 0 2
66070: PUSH
66071: LD_VAR 0 1
66075: PPUSH
66076: LD_INT 2
66078: PUSH
66079: LD_INT 34
66081: PUSH
66082: LD_INT 12
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 34
66091: PUSH
66092: LD_INT 51
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 34
66101: PUSH
66102: LD_INT 32
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 34
66111: PUSH
66112: LD_INT 89
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: PPUSH
66126: CALL_OW 72
66130: ST_TO_ADDR
// end ;
66131: LD_VAR 0 2
66135: RET
// export function Negate ( value ) ; begin
66136: LD_INT 0
66138: PPUSH
// result := not value ;
66139: LD_ADDR_VAR 0 2
66143: PUSH
66144: LD_VAR 0 1
66148: NOT
66149: ST_TO_ADDR
// end ;
66150: LD_VAR 0 2
66154: RET
// export function Inc ( value ) ; begin
66155: LD_INT 0
66157: PPUSH
// result := value + 1 ;
66158: LD_ADDR_VAR 0 2
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 1
66170: PLUS
66171: ST_TO_ADDR
// end ;
66172: LD_VAR 0 2
66176: RET
// export function Dec ( value ) ; begin
66177: LD_INT 0
66179: PPUSH
// result := value - 1 ;
66180: LD_ADDR_VAR 0 2
66184: PUSH
66185: LD_VAR 0 1
66189: PUSH
66190: LD_INT 1
66192: MINUS
66193: ST_TO_ADDR
// end ;
66194: LD_VAR 0 2
66198: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66199: LD_INT 0
66201: PPUSH
66202: PPUSH
66203: PPUSH
66204: PPUSH
66205: PPUSH
66206: PPUSH
66207: PPUSH
66208: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66209: LD_VAR 0 1
66213: PPUSH
66214: LD_VAR 0 2
66218: PPUSH
66219: CALL_OW 488
66223: NOT
66224: PUSH
66225: LD_VAR 0 3
66229: PPUSH
66230: LD_VAR 0 4
66234: PPUSH
66235: CALL_OW 488
66239: NOT
66240: OR
66241: IFFALSE 66254
// begin result := - 1 ;
66243: LD_ADDR_VAR 0 5
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: ST_TO_ADDR
// exit ;
66252: GO 66489
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66254: LD_ADDR_VAR 0 12
66258: PUSH
66259: LD_VAR 0 1
66263: PPUSH
66264: LD_VAR 0 2
66268: PPUSH
66269: LD_VAR 0 3
66273: PPUSH
66274: LD_VAR 0 4
66278: PPUSH
66279: CALL 65339 0 4
66283: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66284: LD_ADDR_VAR 0 11
66288: PUSH
66289: LD_VAR 0 1
66293: PPUSH
66294: LD_VAR 0 2
66298: PPUSH
66299: LD_VAR 0 12
66303: PUSH
66304: LD_INT 1
66306: ARRAY
66307: PPUSH
66308: LD_VAR 0 12
66312: PUSH
66313: LD_INT 2
66315: ARRAY
66316: PPUSH
66317: CALL_OW 298
66321: ST_TO_ADDR
// distance := 9999 ;
66322: LD_ADDR_VAR 0 10
66326: PUSH
66327: LD_INT 9999
66329: ST_TO_ADDR
// for i := 0 to 5 do
66330: LD_ADDR_VAR 0 6
66334: PUSH
66335: DOUBLE
66336: LD_INT 0
66338: DEC
66339: ST_TO_ADDR
66340: LD_INT 5
66342: PUSH
66343: FOR_TO
66344: IFFALSE 66487
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66346: LD_ADDR_VAR 0 7
66350: PUSH
66351: LD_VAR 0 1
66355: PPUSH
66356: LD_VAR 0 6
66360: PPUSH
66361: LD_VAR 0 11
66365: PPUSH
66366: CALL_OW 272
66370: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66371: LD_ADDR_VAR 0 8
66375: PUSH
66376: LD_VAR 0 2
66380: PPUSH
66381: LD_VAR 0 6
66385: PPUSH
66386: LD_VAR 0 11
66390: PPUSH
66391: CALL_OW 273
66395: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66396: LD_VAR 0 7
66400: PPUSH
66401: LD_VAR 0 8
66405: PPUSH
66406: CALL_OW 488
66410: NOT
66411: IFFALSE 66415
// continue ;
66413: GO 66343
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66415: LD_ADDR_VAR 0 9
66419: PUSH
66420: LD_VAR 0 12
66424: PUSH
66425: LD_INT 1
66427: ARRAY
66428: PPUSH
66429: LD_VAR 0 12
66433: PUSH
66434: LD_INT 2
66436: ARRAY
66437: PPUSH
66438: LD_VAR 0 7
66442: PPUSH
66443: LD_VAR 0 8
66447: PPUSH
66448: CALL_OW 298
66452: ST_TO_ADDR
// if tmp < distance then
66453: LD_VAR 0 9
66457: PUSH
66458: LD_VAR 0 10
66462: LESS
66463: IFFALSE 66485
// begin result := i ;
66465: LD_ADDR_VAR 0 5
66469: PUSH
66470: LD_VAR 0 6
66474: ST_TO_ADDR
// distance := tmp ;
66475: LD_ADDR_VAR 0 10
66479: PUSH
66480: LD_VAR 0 9
66484: ST_TO_ADDR
// end ; end ;
66485: GO 66343
66487: POP
66488: POP
// end ;
66489: LD_VAR 0 5
66493: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66494: LD_INT 0
66496: PPUSH
66497: PPUSH
// if not driver or not IsInUnit ( driver ) then
66498: LD_VAR 0 1
66502: NOT
66503: PUSH
66504: LD_VAR 0 1
66508: PPUSH
66509: CALL_OW 310
66513: NOT
66514: OR
66515: IFFALSE 66519
// exit ;
66517: GO 66609
// vehicle := IsInUnit ( driver ) ;
66519: LD_ADDR_VAR 0 3
66523: PUSH
66524: LD_VAR 0 1
66528: PPUSH
66529: CALL_OW 310
66533: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66534: LD_VAR 0 1
66538: PPUSH
66539: LD_STRING \
66541: PUSH
66542: LD_INT 0
66544: PUSH
66545: LD_INT 0
66547: PUSH
66548: LD_INT 0
66550: PUSH
66551: LD_INT 0
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 0
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: PUSH
66569: LD_STRING E
66571: PUSH
66572: LD_INT 0
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: LD_VAR 0 3
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: LD_INT 0
66591: PUSH
66592: EMPTY
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PPUSH
66605: CALL_OW 446
// end ;
66609: LD_VAR 0 2
66613: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66614: LD_INT 0
66616: PPUSH
66617: PPUSH
// if not driver or not IsInUnit ( driver ) then
66618: LD_VAR 0 1
66622: NOT
66623: PUSH
66624: LD_VAR 0 1
66628: PPUSH
66629: CALL_OW 310
66633: NOT
66634: OR
66635: IFFALSE 66639
// exit ;
66637: GO 66729
// vehicle := IsInUnit ( driver ) ;
66639: LD_ADDR_VAR 0 3
66643: PUSH
66644: LD_VAR 0 1
66648: PPUSH
66649: CALL_OW 310
66653: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66654: LD_VAR 0 1
66658: PPUSH
66659: LD_STRING \
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 0
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 0
66673: PUSH
66674: LD_INT 0
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: LIST
66684: LIST
66685: LIST
66686: LIST
66687: LIST
66688: PUSH
66689: LD_STRING E
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 0
66697: PUSH
66698: LD_VAR 0 3
66702: PUSH
66703: LD_INT 0
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PPUSH
66725: CALL_OW 447
// end ;
66729: LD_VAR 0 2
66733: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66734: LD_INT 0
66736: PPUSH
66737: PPUSH
66738: PPUSH
// tmp := [ ] ;
66739: LD_ADDR_VAR 0 5
66743: PUSH
66744: EMPTY
66745: ST_TO_ADDR
// for i in units do
66746: LD_ADDR_VAR 0 4
66750: PUSH
66751: LD_VAR 0 1
66755: PUSH
66756: FOR_IN
66757: IFFALSE 66795
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66759: LD_ADDR_VAR 0 5
66763: PUSH
66764: LD_VAR 0 5
66768: PPUSH
66769: LD_VAR 0 5
66773: PUSH
66774: LD_INT 1
66776: PLUS
66777: PPUSH
66778: LD_VAR 0 4
66782: PPUSH
66783: CALL_OW 256
66787: PPUSH
66788: CALL_OW 2
66792: ST_TO_ADDR
66793: GO 66756
66795: POP
66796: POP
// if not tmp then
66797: LD_VAR 0 5
66801: NOT
66802: IFFALSE 66806
// exit ;
66804: GO 66854
// if asc then
66806: LD_VAR 0 2
66810: IFFALSE 66834
// result := SortListByListAsc ( units , tmp ) else
66812: LD_ADDR_VAR 0 3
66816: PUSH
66817: LD_VAR 0 1
66821: PPUSH
66822: LD_VAR 0 5
66826: PPUSH
66827: CALL_OW 76
66831: ST_TO_ADDR
66832: GO 66854
// result := SortListByListDesc ( units , tmp ) ;
66834: LD_ADDR_VAR 0 3
66838: PUSH
66839: LD_VAR 0 1
66843: PPUSH
66844: LD_VAR 0 5
66848: PPUSH
66849: CALL_OW 77
66853: ST_TO_ADDR
// end ;
66854: LD_VAR 0 3
66858: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66859: LD_INT 0
66861: PPUSH
66862: PPUSH
// task := GetTaskList ( mech ) ;
66863: LD_ADDR_VAR 0 4
66867: PUSH
66868: LD_VAR 0 1
66872: PPUSH
66873: CALL_OW 437
66877: ST_TO_ADDR
// if not task then
66878: LD_VAR 0 4
66882: NOT
66883: IFFALSE 66887
// exit ;
66885: GO 66929
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66887: LD_ADDR_VAR 0 3
66891: PUSH
66892: LD_VAR 0 4
66896: PUSH
66897: LD_INT 1
66899: ARRAY
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PUSH
66905: LD_STRING r
66907: EQUAL
66908: PUSH
66909: LD_VAR 0 4
66913: PUSH
66914: LD_INT 1
66916: ARRAY
66917: PUSH
66918: LD_INT 4
66920: ARRAY
66921: PUSH
66922: LD_VAR 0 2
66926: EQUAL
66927: AND
66928: ST_TO_ADDR
// end ;
66929: LD_VAR 0 3
66933: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66934: LD_INT 0
66936: PPUSH
// SetDir ( unit , d ) ;
66937: LD_VAR 0 1
66941: PPUSH
66942: LD_VAR 0 4
66946: PPUSH
66947: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_VAR 0 2
66960: PPUSH
66961: LD_VAR 0 3
66965: PPUSH
66966: LD_VAR 0 5
66970: PPUSH
66971: CALL_OW 48
// end ;
66975: LD_VAR 0 6
66979: RET
// export function ToNaturalNumber ( number ) ; begin
66980: LD_INT 0
66982: PPUSH
// result := number div 1 ;
66983: LD_ADDR_VAR 0 2
66987: PUSH
66988: LD_VAR 0 1
66992: PUSH
66993: LD_INT 1
66995: DIV
66996: ST_TO_ADDR
// if number < 0 then
66997: LD_VAR 0 1
67001: PUSH
67002: LD_INT 0
67004: LESS
67005: IFFALSE 67015
// result := 0 ;
67007: LD_ADDR_VAR 0 2
67011: PUSH
67012: LD_INT 0
67014: ST_TO_ADDR
// end ;
67015: LD_VAR 0 2
67019: RET
// export function SortByClass ( units , class ) ; var un ; begin
67020: LD_INT 0
67022: PPUSH
67023: PPUSH
// if not units or not class then
67024: LD_VAR 0 1
67028: NOT
67029: PUSH
67030: LD_VAR 0 2
67034: NOT
67035: OR
67036: IFFALSE 67040
// exit ;
67038: GO 67135
// result := [ ] ;
67040: LD_ADDR_VAR 0 3
67044: PUSH
67045: EMPTY
67046: ST_TO_ADDR
// for un in units do
67047: LD_ADDR_VAR 0 4
67051: PUSH
67052: LD_VAR 0 1
67056: PUSH
67057: FOR_IN
67058: IFFALSE 67133
// if GetClass ( un ) = class then
67060: LD_VAR 0 4
67064: PPUSH
67065: CALL_OW 257
67069: PUSH
67070: LD_VAR 0 2
67074: EQUAL
67075: IFFALSE 67102
// result := Insert ( result , 1 , un ) else
67077: LD_ADDR_VAR 0 3
67081: PUSH
67082: LD_VAR 0 3
67086: PPUSH
67087: LD_INT 1
67089: PPUSH
67090: LD_VAR 0 4
67094: PPUSH
67095: CALL_OW 2
67099: ST_TO_ADDR
67100: GO 67131
// result := Replace ( result , result + 1 , un ) ;
67102: LD_ADDR_VAR 0 3
67106: PUSH
67107: LD_VAR 0 3
67111: PPUSH
67112: LD_VAR 0 3
67116: PUSH
67117: LD_INT 1
67119: PLUS
67120: PPUSH
67121: LD_VAR 0 4
67125: PPUSH
67126: CALL_OW 1
67130: ST_TO_ADDR
67131: GO 67057
67133: POP
67134: POP
// end ;
67135: LD_VAR 0 3
67139: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67140: LD_INT 0
67142: PPUSH
67143: PPUSH
67144: PPUSH
67145: PPUSH
67146: PPUSH
67147: PPUSH
67148: PPUSH
// result := [ ] ;
67149: LD_ADDR_VAR 0 4
67153: PUSH
67154: EMPTY
67155: ST_TO_ADDR
// if x - r < 0 then
67156: LD_VAR 0 1
67160: PUSH
67161: LD_VAR 0 3
67165: MINUS
67166: PUSH
67167: LD_INT 0
67169: LESS
67170: IFFALSE 67182
// min_x := 0 else
67172: LD_ADDR_VAR 0 8
67176: PUSH
67177: LD_INT 0
67179: ST_TO_ADDR
67180: GO 67198
// min_x := x - r ;
67182: LD_ADDR_VAR 0 8
67186: PUSH
67187: LD_VAR 0 1
67191: PUSH
67192: LD_VAR 0 3
67196: MINUS
67197: ST_TO_ADDR
// if y - r < 0 then
67198: LD_VAR 0 2
67202: PUSH
67203: LD_VAR 0 3
67207: MINUS
67208: PUSH
67209: LD_INT 0
67211: LESS
67212: IFFALSE 67224
// min_y := 0 else
67214: LD_ADDR_VAR 0 7
67218: PUSH
67219: LD_INT 0
67221: ST_TO_ADDR
67222: GO 67240
// min_y := y - r ;
67224: LD_ADDR_VAR 0 7
67228: PUSH
67229: LD_VAR 0 2
67233: PUSH
67234: LD_VAR 0 3
67238: MINUS
67239: ST_TO_ADDR
// max_x := x + r ;
67240: LD_ADDR_VAR 0 9
67244: PUSH
67245: LD_VAR 0 1
67249: PUSH
67250: LD_VAR 0 3
67254: PLUS
67255: ST_TO_ADDR
// max_y := y + r ;
67256: LD_ADDR_VAR 0 10
67260: PUSH
67261: LD_VAR 0 2
67265: PUSH
67266: LD_VAR 0 3
67270: PLUS
67271: ST_TO_ADDR
// for _x = min_x to max_x do
67272: LD_ADDR_VAR 0 5
67276: PUSH
67277: DOUBLE
67278: LD_VAR 0 8
67282: DEC
67283: ST_TO_ADDR
67284: LD_VAR 0 9
67288: PUSH
67289: FOR_TO
67290: IFFALSE 67391
// for _y = min_y to max_y do
67292: LD_ADDR_VAR 0 6
67296: PUSH
67297: DOUBLE
67298: LD_VAR 0 7
67302: DEC
67303: ST_TO_ADDR
67304: LD_VAR 0 10
67308: PUSH
67309: FOR_TO
67310: IFFALSE 67387
// begin if not ValidHex ( _x , _y ) then
67312: LD_VAR 0 5
67316: PPUSH
67317: LD_VAR 0 6
67321: PPUSH
67322: CALL_OW 488
67326: NOT
67327: IFFALSE 67331
// continue ;
67329: GO 67309
// if GetResourceTypeXY ( _x , _y ) then
67331: LD_VAR 0 5
67335: PPUSH
67336: LD_VAR 0 6
67340: PPUSH
67341: CALL_OW 283
67345: IFFALSE 67385
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67347: LD_ADDR_VAR 0 4
67351: PUSH
67352: LD_VAR 0 4
67356: PPUSH
67357: LD_VAR 0 4
67361: PUSH
67362: LD_INT 1
67364: PLUS
67365: PPUSH
67366: LD_VAR 0 5
67370: PUSH
67371: LD_VAR 0 6
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PPUSH
67380: CALL_OW 1
67384: ST_TO_ADDR
// end ;
67385: GO 67309
67387: POP
67388: POP
67389: GO 67289
67391: POP
67392: POP
// end ;
67393: LD_VAR 0 4
67397: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67398: LD_INT 0
67400: PPUSH
67401: PPUSH
67402: PPUSH
67403: PPUSH
67404: PPUSH
67405: PPUSH
67406: PPUSH
67407: PPUSH
// if not units then
67408: LD_VAR 0 1
67412: NOT
67413: IFFALSE 67417
// exit ;
67415: GO 67941
// result := UnitFilter ( units , [ f_ok ] ) ;
67417: LD_ADDR_VAR 0 3
67421: PUSH
67422: LD_VAR 0 1
67426: PPUSH
67427: LD_INT 50
67429: PUSH
67430: EMPTY
67431: LIST
67432: PPUSH
67433: CALL_OW 72
67437: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67438: LD_ADDR_VAR 0 8
67442: PUSH
67443: LD_VAR 0 1
67447: PUSH
67448: LD_INT 1
67450: ARRAY
67451: PPUSH
67452: CALL_OW 255
67456: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67457: LD_ADDR_VAR 0 10
67461: PUSH
67462: LD_INT 29
67464: PUSH
67465: LD_INT 91
67467: PUSH
67468: LD_INT 49
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: LIST
67475: ST_TO_ADDR
// if not result then
67476: LD_VAR 0 3
67480: NOT
67481: IFFALSE 67485
// exit ;
67483: GO 67941
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67485: LD_ADDR_VAR 0 5
67489: PUSH
67490: LD_INT 81
67492: PUSH
67493: LD_VAR 0 8
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PPUSH
67502: CALL_OW 69
67506: ST_TO_ADDR
// for i in result do
67507: LD_ADDR_VAR 0 4
67511: PUSH
67512: LD_VAR 0 3
67516: PUSH
67517: FOR_IN
67518: IFFALSE 67939
// begin tag := GetTag ( i ) + 1 ;
67520: LD_ADDR_VAR 0 9
67524: PUSH
67525: LD_VAR 0 4
67529: PPUSH
67530: CALL_OW 110
67534: PUSH
67535: LD_INT 1
67537: PLUS
67538: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
67539: LD_ADDR_VAR 0 7
67543: PUSH
67544: LD_VAR 0 4
67548: PPUSH
67549: CALL_OW 250
67553: PPUSH
67554: LD_VAR 0 4
67558: PPUSH
67559: CALL_OW 251
67563: PPUSH
67564: LD_INT 6
67566: PPUSH
67567: CALL 67140 0 3
67571: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
67572: LD_VAR 0 4
67576: PPUSH
67577: CALL_OW 247
67581: PUSH
67582: LD_INT 2
67584: EQUAL
67585: PUSH
67586: LD_VAR 0 7
67590: AND
67591: PUSH
67592: LD_VAR 0 4
67596: PPUSH
67597: CALL_OW 264
67601: PUSH
67602: LD_VAR 0 10
67606: IN
67607: NOT
67608: AND
67609: IFFALSE 67648
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67611: LD_VAR 0 4
67615: PPUSH
67616: LD_VAR 0 7
67620: PUSH
67621: LD_INT 1
67623: ARRAY
67624: PUSH
67625: LD_INT 1
67627: ARRAY
67628: PPUSH
67629: LD_VAR 0 7
67633: PUSH
67634: LD_INT 1
67636: ARRAY
67637: PUSH
67638: LD_INT 2
67640: ARRAY
67641: PPUSH
67642: CALL_OW 116
67646: GO 67937
// if path > tag then
67648: LD_VAR 0 2
67652: PUSH
67653: LD_VAR 0 9
67657: GREATER
67658: IFFALSE 67866
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67660: LD_ADDR_VAR 0 6
67664: PUSH
67665: LD_VAR 0 5
67669: PPUSH
67670: LD_INT 91
67672: PUSH
67673: LD_VAR 0 4
67677: PUSH
67678: LD_INT 8
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: PPUSH
67686: CALL_OW 72
67690: ST_TO_ADDR
// if nearEnemy then
67691: LD_VAR 0 6
67695: IFFALSE 67764
// begin if GetWeapon ( i ) = ru_time_lapser then
67697: LD_VAR 0 4
67701: PPUSH
67702: CALL_OW 264
67706: PUSH
67707: LD_INT 49
67709: EQUAL
67710: IFFALSE 67738
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67712: LD_VAR 0 4
67716: PPUSH
67717: LD_VAR 0 6
67721: PPUSH
67722: LD_VAR 0 4
67726: PPUSH
67727: CALL_OW 74
67731: PPUSH
67732: CALL_OW 112
67736: GO 67762
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67738: LD_VAR 0 4
67742: PPUSH
67743: LD_VAR 0 6
67747: PPUSH
67748: LD_VAR 0 4
67752: PPUSH
67753: CALL_OW 74
67757: PPUSH
67758: CALL_OW 115
// end else
67762: GO 67864
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67764: LD_VAR 0 4
67768: PPUSH
67769: LD_VAR 0 2
67773: PUSH
67774: LD_VAR 0 9
67778: ARRAY
67779: PUSH
67780: LD_INT 1
67782: ARRAY
67783: PPUSH
67784: LD_VAR 0 2
67788: PUSH
67789: LD_VAR 0 9
67793: ARRAY
67794: PUSH
67795: LD_INT 2
67797: ARRAY
67798: PPUSH
67799: CALL_OW 297
67803: PUSH
67804: LD_INT 6
67806: GREATER
67807: IFFALSE 67850
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67809: LD_VAR 0 4
67813: PPUSH
67814: LD_VAR 0 2
67818: PUSH
67819: LD_VAR 0 9
67823: ARRAY
67824: PUSH
67825: LD_INT 1
67827: ARRAY
67828: PPUSH
67829: LD_VAR 0 2
67833: PUSH
67834: LD_VAR 0 9
67838: ARRAY
67839: PUSH
67840: LD_INT 2
67842: ARRAY
67843: PPUSH
67844: CALL_OW 114
67848: GO 67864
// SetTag ( i , tag ) ;
67850: LD_VAR 0 4
67854: PPUSH
67855: LD_VAR 0 9
67859: PPUSH
67860: CALL_OW 109
// end else
67864: GO 67937
// if enemy then
67866: LD_VAR 0 5
67870: IFFALSE 67937
// begin if GetWeapon ( i ) = ru_time_lapser then
67872: LD_VAR 0 4
67876: PPUSH
67877: CALL_OW 264
67881: PUSH
67882: LD_INT 49
67884: EQUAL
67885: IFFALSE 67913
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
67887: LD_VAR 0 4
67891: PPUSH
67892: LD_VAR 0 5
67896: PPUSH
67897: LD_VAR 0 4
67901: PPUSH
67902: CALL_OW 74
67906: PPUSH
67907: CALL_OW 112
67911: GO 67937
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
67913: LD_VAR 0 4
67917: PPUSH
67918: LD_VAR 0 5
67922: PPUSH
67923: LD_VAR 0 4
67927: PPUSH
67928: CALL_OW 74
67932: PPUSH
67933: CALL_OW 115
// end ; end ;
67937: GO 67517
67939: POP
67940: POP
// end ;
67941: LD_VAR 0 3
67945: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
67946: LD_INT 0
67948: PPUSH
67949: PPUSH
67950: PPUSH
// if not unit or IsInUnit ( unit ) then
67951: LD_VAR 0 1
67955: NOT
67956: PUSH
67957: LD_VAR 0 1
67961: PPUSH
67962: CALL_OW 310
67966: OR
67967: IFFALSE 67971
// exit ;
67969: GO 68062
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
67971: LD_ADDR_VAR 0 4
67975: PUSH
67976: LD_VAR 0 1
67980: PPUSH
67981: CALL_OW 250
67985: PPUSH
67986: LD_VAR 0 2
67990: PPUSH
67991: LD_INT 1
67993: PPUSH
67994: CALL_OW 272
67998: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
67999: LD_ADDR_VAR 0 5
68003: PUSH
68004: LD_VAR 0 1
68008: PPUSH
68009: CALL_OW 251
68013: PPUSH
68014: LD_VAR 0 2
68018: PPUSH
68019: LD_INT 1
68021: PPUSH
68022: CALL_OW 273
68026: ST_TO_ADDR
// if ValidHex ( x , y ) then
68027: LD_VAR 0 4
68031: PPUSH
68032: LD_VAR 0 5
68036: PPUSH
68037: CALL_OW 488
68041: IFFALSE 68062
// ComTurnXY ( unit , x , y ) ;
68043: LD_VAR 0 1
68047: PPUSH
68048: LD_VAR 0 4
68052: PPUSH
68053: LD_VAR 0 5
68057: PPUSH
68058: CALL_OW 118
// end ;
68062: LD_VAR 0 3
68066: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68067: LD_INT 0
68069: PPUSH
68070: PPUSH
// result := false ;
68071: LD_ADDR_VAR 0 3
68075: PUSH
68076: LD_INT 0
68078: ST_TO_ADDR
// if not units then
68079: LD_VAR 0 2
68083: NOT
68084: IFFALSE 68088
// exit ;
68086: GO 68133
// for i in units do
68088: LD_ADDR_VAR 0 4
68092: PUSH
68093: LD_VAR 0 2
68097: PUSH
68098: FOR_IN
68099: IFFALSE 68131
// if See ( side , i ) then
68101: LD_VAR 0 1
68105: PPUSH
68106: LD_VAR 0 4
68110: PPUSH
68111: CALL_OW 292
68115: IFFALSE 68129
// begin result := true ;
68117: LD_ADDR_VAR 0 3
68121: PUSH
68122: LD_INT 1
68124: ST_TO_ADDR
// exit ;
68125: POP
68126: POP
68127: GO 68133
// end ;
68129: GO 68098
68131: POP
68132: POP
// end ;
68133: LD_VAR 0 3
68137: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68138: LD_INT 0
68140: PPUSH
68141: PPUSH
68142: PPUSH
68143: PPUSH
// if not unit or not points then
68144: LD_VAR 0 1
68148: NOT
68149: PUSH
68150: LD_VAR 0 2
68154: NOT
68155: OR
68156: IFFALSE 68160
// exit ;
68158: GO 68250
// dist := 99999 ;
68160: LD_ADDR_VAR 0 5
68164: PUSH
68165: LD_INT 99999
68167: ST_TO_ADDR
// for i in points do
68168: LD_ADDR_VAR 0 4
68172: PUSH
68173: LD_VAR 0 2
68177: PUSH
68178: FOR_IN
68179: IFFALSE 68248
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68181: LD_ADDR_VAR 0 6
68185: PUSH
68186: LD_VAR 0 1
68190: PPUSH
68191: LD_VAR 0 4
68195: PUSH
68196: LD_INT 1
68198: ARRAY
68199: PPUSH
68200: LD_VAR 0 4
68204: PUSH
68205: LD_INT 2
68207: ARRAY
68208: PPUSH
68209: CALL_OW 297
68213: ST_TO_ADDR
// if tmpDist < dist then
68214: LD_VAR 0 6
68218: PUSH
68219: LD_VAR 0 5
68223: LESS
68224: IFFALSE 68246
// begin result := i ;
68226: LD_ADDR_VAR 0 3
68230: PUSH
68231: LD_VAR 0 4
68235: ST_TO_ADDR
// dist := tmpDist ;
68236: LD_ADDR_VAR 0 5
68240: PUSH
68241: LD_VAR 0 6
68245: ST_TO_ADDR
// end ; end ;
68246: GO 68178
68248: POP
68249: POP
// end ;
68250: LD_VAR 0 3
68254: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68255: LD_INT 0
68257: PPUSH
// uc_side := side ;
68258: LD_ADDR_OWVAR 20
68262: PUSH
68263: LD_VAR 0 1
68267: ST_TO_ADDR
// uc_nation := 3 ;
68268: LD_ADDR_OWVAR 21
68272: PUSH
68273: LD_INT 3
68275: ST_TO_ADDR
// vc_chassis := 25 ;
68276: LD_ADDR_OWVAR 37
68280: PUSH
68281: LD_INT 25
68283: ST_TO_ADDR
// vc_engine := engine_siberite ;
68284: LD_ADDR_OWVAR 39
68288: PUSH
68289: LD_INT 3
68291: ST_TO_ADDR
// vc_control := control_computer ;
68292: LD_ADDR_OWVAR 38
68296: PUSH
68297: LD_INT 3
68299: ST_TO_ADDR
// vc_weapon := 59 ;
68300: LD_ADDR_OWVAR 40
68304: PUSH
68305: LD_INT 59
68307: ST_TO_ADDR
// result := CreateVehicle ;
68308: LD_ADDR_VAR 0 5
68312: PUSH
68313: CALL_OW 45
68317: ST_TO_ADDR
// SetDir ( result , d ) ;
68318: LD_VAR 0 5
68322: PPUSH
68323: LD_VAR 0 4
68327: PPUSH
68328: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68332: LD_VAR 0 5
68336: PPUSH
68337: LD_VAR 0 2
68341: PPUSH
68342: LD_VAR 0 3
68346: PPUSH
68347: LD_INT 0
68349: PPUSH
68350: CALL_OW 48
// end ;
68354: LD_VAR 0 5
68358: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68359: LD_INT 0
68361: PPUSH
68362: PPUSH
68363: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68364: LD_ADDR_VAR 0 2
68368: PUSH
68369: LD_INT 0
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68387: LD_VAR 0 1
68391: NOT
68392: PUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 264
68402: PUSH
68403: LD_INT 12
68405: PUSH
68406: LD_INT 51
68408: PUSH
68409: LD_INT 32
68411: PUSH
68412: LD_INT 89
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: IN
68421: NOT
68422: OR
68423: IFFALSE 68427
// exit ;
68425: GO 68525
// for i := 1 to 3 do
68427: LD_ADDR_VAR 0 3
68431: PUSH
68432: DOUBLE
68433: LD_INT 1
68435: DEC
68436: ST_TO_ADDR
68437: LD_INT 3
68439: PUSH
68440: FOR_TO
68441: IFFALSE 68523
// begin tmp := GetCargo ( cargo , i ) ;
68443: LD_ADDR_VAR 0 4
68447: PUSH
68448: LD_VAR 0 1
68452: PPUSH
68453: LD_VAR 0 3
68457: PPUSH
68458: CALL_OW 289
68462: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68463: LD_ADDR_VAR 0 2
68467: PUSH
68468: LD_VAR 0 2
68472: PPUSH
68473: LD_VAR 0 3
68477: PPUSH
68478: LD_VAR 0 4
68482: PPUSH
68483: CALL_OW 1
68487: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68488: LD_ADDR_VAR 0 2
68492: PUSH
68493: LD_VAR 0 2
68497: PPUSH
68498: LD_INT 4
68500: PPUSH
68501: LD_VAR 0 2
68505: PUSH
68506: LD_INT 4
68508: ARRAY
68509: PUSH
68510: LD_VAR 0 4
68514: PLUS
68515: PPUSH
68516: CALL_OW 1
68520: ST_TO_ADDR
// end ;
68521: GO 68440
68523: POP
68524: POP
// end ;
68525: LD_VAR 0 2
68529: RET
// export function Length ( array ) ; begin
68530: LD_INT 0
68532: PPUSH
// result := array + 0 ;
68533: LD_ADDR_VAR 0 2
68537: PUSH
68538: LD_VAR 0 1
68542: PUSH
68543: LD_INT 0
68545: PLUS
68546: ST_TO_ADDR
// end ;
68547: LD_VAR 0 2
68551: RET
// export function PrepareArray ( array ) ; begin
68552: LD_INT 0
68554: PPUSH
// result := array diff 0 ;
68555: LD_ADDR_VAR 0 2
68559: PUSH
68560: LD_VAR 0 1
68564: PUSH
68565: LD_INT 0
68567: DIFF
68568: ST_TO_ADDR
// if not result [ 1 ] then
68569: LD_VAR 0 2
68573: PUSH
68574: LD_INT 1
68576: ARRAY
68577: NOT
68578: IFFALSE 68598
// result := Delete ( result , 1 ) ;
68580: LD_ADDR_VAR 0 2
68584: PUSH
68585: LD_VAR 0 2
68589: PPUSH
68590: LD_INT 1
68592: PPUSH
68593: CALL_OW 3
68597: ST_TO_ADDR
// end ;
68598: LD_VAR 0 2
68602: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68603: LD_INT 0
68605: PPUSH
68606: PPUSH
68607: PPUSH
68608: PPUSH
// sibRocketRange := 25 ;
68609: LD_ADDR_VAR 0 6
68613: PUSH
68614: LD_INT 25
68616: ST_TO_ADDR
// result := false ;
68617: LD_ADDR_VAR 0 4
68621: PUSH
68622: LD_INT 0
68624: ST_TO_ADDR
// for i := 0 to 5 do
68625: LD_ADDR_VAR 0 5
68629: PUSH
68630: DOUBLE
68631: LD_INT 0
68633: DEC
68634: ST_TO_ADDR
68635: LD_INT 5
68637: PUSH
68638: FOR_TO
68639: IFFALSE 68706
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68641: LD_VAR 0 1
68645: PPUSH
68646: LD_VAR 0 5
68650: PPUSH
68651: LD_VAR 0 6
68655: PPUSH
68656: CALL_OW 272
68660: PPUSH
68661: LD_VAR 0 2
68665: PPUSH
68666: LD_VAR 0 5
68670: PPUSH
68671: LD_VAR 0 6
68675: PPUSH
68676: CALL_OW 273
68680: PPUSH
68681: LD_VAR 0 3
68685: PPUSH
68686: CALL_OW 309
68690: IFFALSE 68704
// begin result := true ;
68692: LD_ADDR_VAR 0 4
68696: PUSH
68697: LD_INT 1
68699: ST_TO_ADDR
// exit ;
68700: POP
68701: POP
68702: GO 68708
// end ;
68704: GO 68638
68706: POP
68707: POP
// end ;
68708: LD_VAR 0 4
68712: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
68713: LD_INT 0
68715: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
68716: LD_VAR 0 1
68720: PPUSH
68721: LD_VAR 0 2
68725: PPUSH
68726: LD_INT 0
68728: PPUSH
68729: LD_INT 0
68731: PPUSH
68732: LD_INT 1
68734: PPUSH
68735: LD_INT 0
68737: PPUSH
68738: CALL_OW 587
// end ; end_of_file
68742: LD_VAR 0 3
68746: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
68747: LD_VAR 0 1
68751: PUSH
68752: LD_INT 200
68754: DOUBLE
68755: GREATEREQUAL
68756: IFFALSE 68764
68758: LD_INT 299
68760: DOUBLE
68761: LESSEQUAL
68762: IFTRUE 68766
68764: GO 68798
68766: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
68767: LD_VAR 0 1
68771: PPUSH
68772: LD_VAR 0 2
68776: PPUSH
68777: LD_VAR 0 3
68781: PPUSH
68782: LD_VAR 0 4
68786: PPUSH
68787: LD_VAR 0 5
68791: PPUSH
68792: CALL 23413 0 5
68796: GO 68875
68798: LD_INT 300
68800: DOUBLE
68801: GREATEREQUAL
68802: IFFALSE 68810
68804: LD_INT 399
68806: DOUBLE
68807: LESSEQUAL
68808: IFTRUE 68812
68810: GO 68874
68812: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
68813: LD_VAR 0 1
68817: PPUSH
68818: LD_VAR 0 2
68822: PPUSH
68823: LD_VAR 0 3
68827: PPUSH
68828: LD_VAR 0 4
68832: PPUSH
68833: LD_VAR 0 5
68837: PPUSH
68838: LD_VAR 0 6
68842: PPUSH
68843: LD_VAR 0 7
68847: PPUSH
68848: LD_VAR 0 8
68852: PPUSH
68853: LD_VAR 0 9
68857: PPUSH
68858: LD_VAR 0 10
68862: PPUSH
68863: LD_VAR 0 11
68867: PPUSH
68868: CALL 19746 0 11
68872: GO 68875
68874: POP
// end ;
68875: PPOPN 11
68877: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
68878: LD_VAR 0 1
68882: PPUSH
68883: LD_VAR 0 2
68887: PPUSH
68888: LD_VAR 0 3
68892: PPUSH
68893: LD_VAR 0 4
68897: PPUSH
68898: LD_VAR 0 5
68902: PPUSH
68903: CALL 23149 0 5
// end ; end_of_file
68907: PPOPN 5
68909: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68910: LD_VAR 0 1
68914: PPUSH
68915: LD_VAR 0 2
68919: PPUSH
68920: LD_VAR 0 3
68924: PPUSH
68925: LD_VAR 0 4
68929: PPUSH
68930: LD_VAR 0 5
68934: PPUSH
68935: LD_VAR 0 6
68939: PPUSH
68940: CALL 7366 0 6
// end ;
68944: PPOPN 6
68946: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
68947: LD_INT 0
68949: PPUSH
// begin if not units then
68950: LD_VAR 0 1
68954: NOT
68955: IFFALSE 68959
// exit ;
68957: GO 68959
// end ;
68959: PPOPN 7
68961: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
68962: CALL 7260 0 0
// end ;
68966: PPOPN 1
68968: END
