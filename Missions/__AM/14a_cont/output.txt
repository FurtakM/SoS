// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 59715 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 26352 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 26352 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 26352 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 31216 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 62003 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 31216 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 62003 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 31216 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6877: LD_VAR 0 1
6881: PUSH
6882: LD_EXP 14
6886: EQUAL
6887: IFFALSE 6896
// YouLost ( JMM ) ;
6889: LD_STRING JMM
6891: PPUSH
6892: CALL_OW 104
// if un = Burlak then
6896: LD_VAR 0 1
6900: PUSH
6901: LD_EXP 15
6905: EQUAL
6906: IFFALSE 6915
// YouLost ( Burlak ) ;
6908: LD_STRING Burlak
6910: PPUSH
6911: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6915: LD_VAR 0 1
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 23
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 69
6948: IN
6949: IFFALSE 6965
// killCounter := killCounter + 1 ;
6951: LD_ADDR_EXP 12
6955: PUSH
6956: LD_EXP 12
6960: PUSH
6961: LD_INT 1
6963: PLUS
6964: ST_TO_ADDR
// end ;
6965: PPOPN 1
6967: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 7
6975: EQUAL
6976: PUSH
6977: LD_VAR 0 1
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 31
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 30
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: IN
7026: AND
7027: IFFALSE 7043
// bunkerCounter := bunkerCounter + 1 ;
7029: LD_ADDR_EXP 13
7033: PUSH
7034: LD_EXP 13
7038: PUSH
7039: LD_INT 1
7041: PLUS
7042: ST_TO_ADDR
// end ;
7043: PPOPN 3
7045: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 255
7055: PUSH
7056: LD_INT 7
7058: EQUAL
7059: IFFALSE 7069
// artifactPickedUp := true ;
7061: LD_ADDR_EXP 6
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// end ;
7069: PPOPN 2
7071: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7072: LD_ADDR_EXP 6
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
7080: PPOPN 2
7082: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7083: LD_VAR 0 1
7087: PPUSH
7088: CALL_OW 255
7092: PUSH
7093: LD_INT 1
7095: NONEQUAL
7096: IFFALSE 7100
// exit ;
7098: GO 7147
// wait ( 0 0$5 ) ;
7100: LD_INT 175
7102: PPUSH
7103: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 263
7116: PUSH
7117: LD_INT 2
7119: EQUAL
7120: IFFALSE 7131
// Connect ( vehicle ) ;
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL 34309 0 1
// vehGuard := vehGuard ^ vehicle ;
7131: LD_ADDR_EXP 23
7135: PUSH
7136: LD_EXP 23
7140: PUSH
7141: LD_VAR 0 1
7145: ADD
7146: ST_TO_ADDR
// end ;
7147: PPOPN 2
7149: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7150: LD_VAR 0 1
7154: PUSH
7155: LD_INT 1
7157: EQUAL
7158: PUSH
7159: LD_EXP 7
7163: NOT
7164: AND
7165: IFFALSE 7200
// begin planCaptured := true ;
7167: LD_ADDR_EXP 7
7171: PUSH
7172: LD_INT 1
7174: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7175: LD_STRING MEnd
7177: PPUSH
7178: CALL_OW 337
// canEnd := true ;
7182: LD_ADDR_EXP 10
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// missionTime := tick ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_OWVAR 1
7199: ST_TO_ADDR
// end ; end ;
7200: PPOPN 3
7202: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL 21818 0 1
// end ; end_of_file
7212: PPOPN 1
7214: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7215: LD_INT 0
7217: PPUSH
// ar_miner := 81 ;
7218: LD_ADDR_EXP 31
7222: PUSH
7223: LD_INT 81
7225: ST_TO_ADDR
// ar_crane := 88 ;
7226: LD_ADDR_EXP 30
7230: PUSH
7231: LD_INT 88
7233: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7234: LD_ADDR_EXP 25
7238: PUSH
7239: LD_INT 89
7241: ST_TO_ADDR
// us_hack := 99 ;
7242: LD_ADDR_EXP 26
7246: PUSH
7247: LD_INT 99
7249: ST_TO_ADDR
// us_artillery := 97 ;
7250: LD_ADDR_EXP 27
7254: PUSH
7255: LD_INT 97
7257: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7258: LD_ADDR_EXP 28
7262: PUSH
7263: LD_INT 91
7265: ST_TO_ADDR
// ar_mortar := 92 ;
7266: LD_ADDR_EXP 29
7270: PUSH
7271: LD_INT 92
7273: ST_TO_ADDR
// ru_radar := 98 ;
7274: LD_ADDR_EXP 24
7278: PUSH
7279: LD_INT 98
7281: ST_TO_ADDR
// tech_Artillery := 80 ;
7282: LD_ADDR_EXP 32
7286: PUSH
7287: LD_INT 80
7289: ST_TO_ADDR
// tech_RadMat := 81 ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 81
7297: ST_TO_ADDR
// tech_BasicTools := 82 ;
7298: LD_ADDR_EXP 34
7302: PUSH
7303: LD_INT 82
7305: ST_TO_ADDR
// tech_Cargo := 83 ;
7306: LD_ADDR_EXP 35
7310: PUSH
7311: LD_INT 83
7313: ST_TO_ADDR
// tech_Track := 84 ;
7314: LD_ADDR_EXP 36
7318: PUSH
7319: LD_INT 84
7321: ST_TO_ADDR
// tech_Crane := 85 ;
7322: LD_ADDR_EXP 37
7326: PUSH
7327: LD_INT 85
7329: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7330: LD_ADDR_EXP 38
7334: PUSH
7335: LD_INT 86
7337: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7338: LD_ADDR_EXP 39
7342: PUSH
7343: LD_INT 87
7345: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7346: LD_ADDR_EXP 40
7350: PUSH
7351: LD_INT 88
7353: ST_TO_ADDR
// class_mastodont := 31 ;
7354: LD_ADDR_EXP 41
7358: PUSH
7359: LD_INT 31
7361: ST_TO_ADDR
// class_horse := 21 ;
7362: LD_ADDR_EXP 42
7366: PUSH
7367: LD_INT 21
7369: ST_TO_ADDR
// end ;
7370: LD_VAR 0 1
7374: RET
// every 1 do
7375: GO 7377
7377: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7378: CALL 7215 0 0
7382: END
// every 0 0$1 do
7383: GO 7385
7385: DISABLE
// begin enable ;
7386: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7387: LD_STRING updateTimer(
7389: PUSH
7390: LD_OWVAR 1
7394: STR
7395: PUSH
7396: LD_STRING );
7398: STR
7399: PPUSH
7400: CALL_OW 559
// end ;
7404: END
// on MapStart ( p ) do begin if streamModeActive then
7405: LD_EXP 43
7409: IFFALSE 7418
// DefineStreamItems ( true ) ;
7411: LD_INT 1
7413: PPUSH
7414: CALL 9066 0 1
// UpdateFactoryWaypoints ( ) ;
7418: CALL 22650 0 0
// end ;
7422: PPOPN 1
7424: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7425: LD_INT 0
7427: PPUSH
// if p2 = 100 then
7428: LD_VAR 0 2
7432: PUSH
7433: LD_INT 100
7435: EQUAL
7436: IFFALSE 8439
// begin if not StreamModeActive then
7438: LD_EXP 43
7442: NOT
7443: IFFALSE 7453
// StreamModeActive := true ;
7445: LD_ADDR_EXP 43
7449: PUSH
7450: LD_INT 1
7452: ST_TO_ADDR
// if p3 = 0 then
7453: LD_VAR 0 3
7457: PUSH
7458: LD_INT 0
7460: EQUAL
7461: IFFALSE 7467
// InitStreamMode ;
7463: CALL 8602 0 0
// if p3 = 1 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_INT 1
7474: EQUAL
7475: IFFALSE 7485
// sRocket := true ;
7477: LD_ADDR_EXP 48
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// if p3 = 2 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 2
7492: EQUAL
7493: IFFALSE 7503
// sSpeed := true ;
7495: LD_ADDR_EXP 47
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// if p3 = 3 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 3
7510: EQUAL
7511: IFFALSE 7521
// sEngine := true ;
7513: LD_ADDR_EXP 49
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 4 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 4
7528: EQUAL
7529: IFFALSE 7539
// sSpec := true ;
7531: LD_ADDR_EXP 46
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 5 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 5
7546: EQUAL
7547: IFFALSE 7557
// sLevel := true ;
7549: LD_ADDR_EXP 50
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 6 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 6
7564: EQUAL
7565: IFFALSE 7575
// sArmoury := true ;
7567: LD_ADDR_EXP 51
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 7 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 7
7582: EQUAL
7583: IFFALSE 7593
// sRadar := true ;
7585: LD_ADDR_EXP 52
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 8 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 8
7600: EQUAL
7601: IFFALSE 7611
// sBunker := true ;
7603: LD_ADDR_EXP 53
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 9 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 9
7618: EQUAL
7619: IFFALSE 7629
// sHack := true ;
7621: LD_ADDR_EXP 54
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 10 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 10
7636: EQUAL
7637: IFFALSE 7647
// sFire := true ;
7639: LD_ADDR_EXP 55
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 11 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 11
7654: EQUAL
7655: IFFALSE 7665
// sRefresh := true ;
7657: LD_ADDR_EXP 56
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 12 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 12
7672: EQUAL
7673: IFFALSE 7683
// sExp := true ;
7675: LD_ADDR_EXP 57
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 13 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 13
7690: EQUAL
7691: IFFALSE 7701
// sDepot := true ;
7693: LD_ADDR_EXP 58
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 14 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 14
7708: EQUAL
7709: IFFALSE 7719
// sFlag := true ;
7711: LD_ADDR_EXP 59
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 15 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 15
7726: EQUAL
7727: IFFALSE 7737
// sKamikadze := true ;
7729: LD_ADDR_EXP 67
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 16 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 16
7744: EQUAL
7745: IFFALSE 7755
// sTroll := true ;
7747: LD_ADDR_EXP 68
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 17 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 17
7762: EQUAL
7763: IFFALSE 7773
// sSlow := true ;
7765: LD_ADDR_EXP 69
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 18 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 18
7780: EQUAL
7781: IFFALSE 7791
// sLack := true ;
7783: LD_ADDR_EXP 70
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 19 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 19
7798: EQUAL
7799: IFFALSE 7809
// sTank := true ;
7801: LD_ADDR_EXP 72
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 20 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 20
7816: EQUAL
7817: IFFALSE 7827
// sRemote := true ;
7819: LD_ADDR_EXP 73
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 21 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 21
7834: EQUAL
7835: IFFALSE 7845
// sPowell := true ;
7837: LD_ADDR_EXP 74
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 22 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 22
7852: EQUAL
7853: IFFALSE 7863
// sTeleport := true ;
7855: LD_ADDR_EXP 77
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 23 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 23
7870: EQUAL
7871: IFFALSE 7881
// sOilTower := true ;
7873: LD_ADDR_EXP 79
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 24 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 24
7888: EQUAL
7889: IFFALSE 7899
// sShovel := true ;
7891: LD_ADDR_EXP 80
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 25 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 25
7906: EQUAL
7907: IFFALSE 7917
// sSheik := true ;
7909: LD_ADDR_EXP 81
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 26 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 26
7924: EQUAL
7925: IFFALSE 7935
// sEarthquake := true ;
7927: LD_ADDR_EXP 83
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 27 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 27
7942: EQUAL
7943: IFFALSE 7953
// sAI := true ;
7945: LD_ADDR_EXP 84
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 28 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 28
7960: EQUAL
7961: IFFALSE 7971
// sCargo := true ;
7963: LD_ADDR_EXP 87
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 29 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 29
7978: EQUAL
7979: IFFALSE 7989
// sDLaser := true ;
7981: LD_ADDR_EXP 88
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 30 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 30
7996: EQUAL
7997: IFFALSE 8007
// sExchange := true ;
7999: LD_ADDR_EXP 89
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 31 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 31
8014: EQUAL
8015: IFFALSE 8025
// sFac := true ;
8017: LD_ADDR_EXP 90
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 32 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 32
8032: EQUAL
8033: IFFALSE 8043
// sPower := true ;
8035: LD_ADDR_EXP 91
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 33 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 33
8050: EQUAL
8051: IFFALSE 8061
// sRandom := true ;
8053: LD_ADDR_EXP 92
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 34 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 34
8068: EQUAL
8069: IFFALSE 8079
// sShield := true ;
8071: LD_ADDR_EXP 93
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 35 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 35
8086: EQUAL
8087: IFFALSE 8097
// sTime := true ;
8089: LD_ADDR_EXP 94
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 36 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 36
8104: EQUAL
8105: IFFALSE 8115
// sTools := true ;
8107: LD_ADDR_EXP 95
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 101 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 101
8122: EQUAL
8123: IFFALSE 8133
// sSold := true ;
8125: LD_ADDR_EXP 60
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 102 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 102
8140: EQUAL
8141: IFFALSE 8151
// sDiff := true ;
8143: LD_ADDR_EXP 61
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 103 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 103
8158: EQUAL
8159: IFFALSE 8169
// sFog := true ;
8161: LD_ADDR_EXP 64
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 104 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 104
8176: EQUAL
8177: IFFALSE 8187
// sReset := true ;
8179: LD_ADDR_EXP 65
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 105 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 105
8194: EQUAL
8195: IFFALSE 8205
// sSun := true ;
8197: LD_ADDR_EXP 66
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 106 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 106
8212: EQUAL
8213: IFFALSE 8223
// sTiger := true ;
8215: LD_ADDR_EXP 62
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 107 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 107
8230: EQUAL
8231: IFFALSE 8241
// sBomb := true ;
8233: LD_ADDR_EXP 63
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// if p3 = 108 then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 108
8248: EQUAL
8249: IFFALSE 8259
// sWound := true ;
8251: LD_ADDR_EXP 71
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// if p3 = 109 then
8259: LD_VAR 0 3
8263: PUSH
8264: LD_INT 109
8266: EQUAL
8267: IFFALSE 8277
// sBetray := true ;
8269: LD_ADDR_EXP 75
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// if p3 = 110 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 110
8284: EQUAL
8285: IFFALSE 8295
// sContamin := true ;
8287: LD_ADDR_EXP 76
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// if p3 = 111 then
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 111
8302: EQUAL
8303: IFFALSE 8313
// sOil := true ;
8305: LD_ADDR_EXP 78
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// if p3 = 112 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 112
8320: EQUAL
8321: IFFALSE 8331
// sStu := true ;
8323: LD_ADDR_EXP 82
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// if p3 = 113 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 113
8338: EQUAL
8339: IFFALSE 8349
// sBazooka := true ;
8341: LD_ADDR_EXP 85
8345: PUSH
8346: LD_INT 1
8348: ST_TO_ADDR
// if p3 = 114 then
8349: LD_VAR 0 3
8353: PUSH
8354: LD_INT 114
8356: EQUAL
8357: IFFALSE 8367
// sMortar := true ;
8359: LD_ADDR_EXP 86
8363: PUSH
8364: LD_INT 1
8366: ST_TO_ADDR
// if p3 = 115 then
8367: LD_VAR 0 3
8371: PUSH
8372: LD_INT 115
8374: EQUAL
8375: IFFALSE 8385
// sRanger := true ;
8377: LD_ADDR_EXP 96
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// if p3 = 116 then
8385: LD_VAR 0 3
8389: PUSH
8390: LD_INT 116
8392: EQUAL
8393: IFFALSE 8403
// sComputer := true ;
8395: LD_ADDR_EXP 97
8399: PUSH
8400: LD_INT 1
8402: ST_TO_ADDR
// if p3 = 117 then
8403: LD_VAR 0 3
8407: PUSH
8408: LD_INT 117
8410: EQUAL
8411: IFFALSE 8421
// s30 := true ;
8413: LD_ADDR_EXP 98
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// if p3 = 118 then
8421: LD_VAR 0 3
8425: PUSH
8426: LD_INT 118
8428: EQUAL
8429: IFFALSE 8439
// s60 := true ;
8431: LD_ADDR_EXP 99
8435: PUSH
8436: LD_INT 1
8438: ST_TO_ADDR
// end ; if p2 = 101 then
8439: LD_VAR 0 2
8443: PUSH
8444: LD_INT 101
8446: EQUAL
8447: IFFALSE 8575
// begin case p3 of 1 :
8449: LD_VAR 0 3
8453: PUSH
8454: LD_INT 1
8456: DOUBLE
8457: EQUAL
8458: IFTRUE 8462
8460: GO 8469
8462: POP
// hHackUnlimitedResources ; 2 :
8463: CALL 20673 0 0
8467: GO 8575
8469: LD_INT 2
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8484
8477: POP
// hHackSetLevel10 ; 3 :
8478: CALL 20806 0 0
8482: GO 8575
8484: LD_INT 3
8486: DOUBLE
8487: EQUAL
8488: IFTRUE 8492
8490: GO 8499
8492: POP
// hHackSetLevel10YourUnits ; 4 :
8493: CALL 20891 0 0
8497: GO 8575
8499: LD_INT 4
8501: DOUBLE
8502: EQUAL
8503: IFTRUE 8507
8505: GO 8514
8507: POP
// hHackInvincible ; 5 :
8508: CALL 21339 0 0
8512: GO 8575
8514: LD_INT 5
8516: DOUBLE
8517: EQUAL
8518: IFTRUE 8522
8520: GO 8529
8522: POP
// hHackInvisible ; 6 :
8523: CALL 21450 0 0
8527: GO 8575
8529: LD_INT 6
8531: DOUBLE
8532: EQUAL
8533: IFTRUE 8537
8535: GO 8544
8537: POP
// hHackChangeYourSide ; 7 :
8538: CALL 21507 0 0
8542: GO 8575
8544: LD_INT 7
8546: DOUBLE
8547: EQUAL
8548: IFTRUE 8552
8550: GO 8559
8552: POP
// hHackChangeUnitSide ; 8 :
8553: CALL 21549 0 0
8557: GO 8575
8559: LD_INT 8
8561: DOUBLE
8562: EQUAL
8563: IFTRUE 8567
8565: GO 8574
8567: POP
// hHackFog ; end ;
8568: CALL 21650 0 0
8572: GO 8575
8574: POP
// end ; end ;
8575: LD_VAR 0 7
8579: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8580: GO 8582
8582: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8583: LD_STRING initStreamRollete();
8585: PPUSH
8586: CALL_OW 559
// InitStreamMode ;
8590: CALL 8602 0 0
// DefineStreamItems ( false ) ;
8594: LD_INT 0
8596: PPUSH
8597: CALL 9066 0 1
// end ;
8601: END
// function InitStreamMode ; begin
8602: LD_INT 0
8604: PPUSH
// streamModeActive := false ;
8605: LD_ADDR_EXP 43
8609: PUSH
8610: LD_INT 0
8612: ST_TO_ADDR
// normalCounter := 36 ;
8613: LD_ADDR_EXP 44
8617: PUSH
8618: LD_INT 36
8620: ST_TO_ADDR
// hardcoreCounter := 18 ;
8621: LD_ADDR_EXP 45
8625: PUSH
8626: LD_INT 18
8628: ST_TO_ADDR
// sRocket := false ;
8629: LD_ADDR_EXP 48
8633: PUSH
8634: LD_INT 0
8636: ST_TO_ADDR
// sSpeed := false ;
8637: LD_ADDR_EXP 47
8641: PUSH
8642: LD_INT 0
8644: ST_TO_ADDR
// sEngine := false ;
8645: LD_ADDR_EXP 49
8649: PUSH
8650: LD_INT 0
8652: ST_TO_ADDR
// sSpec := false ;
8653: LD_ADDR_EXP 46
8657: PUSH
8658: LD_INT 0
8660: ST_TO_ADDR
// sLevel := false ;
8661: LD_ADDR_EXP 50
8665: PUSH
8666: LD_INT 0
8668: ST_TO_ADDR
// sArmoury := false ;
8669: LD_ADDR_EXP 51
8673: PUSH
8674: LD_INT 0
8676: ST_TO_ADDR
// sRadar := false ;
8677: LD_ADDR_EXP 52
8681: PUSH
8682: LD_INT 0
8684: ST_TO_ADDR
// sBunker := false ;
8685: LD_ADDR_EXP 53
8689: PUSH
8690: LD_INT 0
8692: ST_TO_ADDR
// sHack := false ;
8693: LD_ADDR_EXP 54
8697: PUSH
8698: LD_INT 0
8700: ST_TO_ADDR
// sFire := false ;
8701: LD_ADDR_EXP 55
8705: PUSH
8706: LD_INT 0
8708: ST_TO_ADDR
// sRefresh := false ;
8709: LD_ADDR_EXP 56
8713: PUSH
8714: LD_INT 0
8716: ST_TO_ADDR
// sExp := false ;
8717: LD_ADDR_EXP 57
8721: PUSH
8722: LD_INT 0
8724: ST_TO_ADDR
// sDepot := false ;
8725: LD_ADDR_EXP 58
8729: PUSH
8730: LD_INT 0
8732: ST_TO_ADDR
// sFlag := false ;
8733: LD_ADDR_EXP 59
8737: PUSH
8738: LD_INT 0
8740: ST_TO_ADDR
// sKamikadze := false ;
8741: LD_ADDR_EXP 67
8745: PUSH
8746: LD_INT 0
8748: ST_TO_ADDR
// sTroll := false ;
8749: LD_ADDR_EXP 68
8753: PUSH
8754: LD_INT 0
8756: ST_TO_ADDR
// sSlow := false ;
8757: LD_ADDR_EXP 69
8761: PUSH
8762: LD_INT 0
8764: ST_TO_ADDR
// sLack := false ;
8765: LD_ADDR_EXP 70
8769: PUSH
8770: LD_INT 0
8772: ST_TO_ADDR
// sTank := false ;
8773: LD_ADDR_EXP 72
8777: PUSH
8778: LD_INT 0
8780: ST_TO_ADDR
// sRemote := false ;
8781: LD_ADDR_EXP 73
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// sPowell := false ;
8789: LD_ADDR_EXP 74
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// sTeleport := false ;
8797: LD_ADDR_EXP 77
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// sOilTower := false ;
8805: LD_ADDR_EXP 79
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// sShovel := false ;
8813: LD_ADDR_EXP 80
8817: PUSH
8818: LD_INT 0
8820: ST_TO_ADDR
// sSheik := false ;
8821: LD_ADDR_EXP 81
8825: PUSH
8826: LD_INT 0
8828: ST_TO_ADDR
// sEarthquake := false ;
8829: LD_ADDR_EXP 83
8833: PUSH
8834: LD_INT 0
8836: ST_TO_ADDR
// sAI := false ;
8837: LD_ADDR_EXP 84
8841: PUSH
8842: LD_INT 0
8844: ST_TO_ADDR
// sCargo := false ;
8845: LD_ADDR_EXP 87
8849: PUSH
8850: LD_INT 0
8852: ST_TO_ADDR
// sDLaser := false ;
8853: LD_ADDR_EXP 88
8857: PUSH
8858: LD_INT 0
8860: ST_TO_ADDR
// sExchange := false ;
8861: LD_ADDR_EXP 89
8865: PUSH
8866: LD_INT 0
8868: ST_TO_ADDR
// sFac := false ;
8869: LD_ADDR_EXP 90
8873: PUSH
8874: LD_INT 0
8876: ST_TO_ADDR
// sPower := false ;
8877: LD_ADDR_EXP 91
8881: PUSH
8882: LD_INT 0
8884: ST_TO_ADDR
// sRandom := false ;
8885: LD_ADDR_EXP 92
8889: PUSH
8890: LD_INT 0
8892: ST_TO_ADDR
// sShield := false ;
8893: LD_ADDR_EXP 93
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// sTime := false ;
8901: LD_ADDR_EXP 94
8905: PUSH
8906: LD_INT 0
8908: ST_TO_ADDR
// sTools := false ;
8909: LD_ADDR_EXP 95
8913: PUSH
8914: LD_INT 0
8916: ST_TO_ADDR
// sSold := false ;
8917: LD_ADDR_EXP 60
8921: PUSH
8922: LD_INT 0
8924: ST_TO_ADDR
// sDiff := false ;
8925: LD_ADDR_EXP 61
8929: PUSH
8930: LD_INT 0
8932: ST_TO_ADDR
// sFog := false ;
8933: LD_ADDR_EXP 64
8937: PUSH
8938: LD_INT 0
8940: ST_TO_ADDR
// sReset := false ;
8941: LD_ADDR_EXP 65
8945: PUSH
8946: LD_INT 0
8948: ST_TO_ADDR
// sSun := false ;
8949: LD_ADDR_EXP 66
8953: PUSH
8954: LD_INT 0
8956: ST_TO_ADDR
// sTiger := false ;
8957: LD_ADDR_EXP 62
8961: PUSH
8962: LD_INT 0
8964: ST_TO_ADDR
// sBomb := false ;
8965: LD_ADDR_EXP 63
8969: PUSH
8970: LD_INT 0
8972: ST_TO_ADDR
// sWound := false ;
8973: LD_ADDR_EXP 71
8977: PUSH
8978: LD_INT 0
8980: ST_TO_ADDR
// sBetray := false ;
8981: LD_ADDR_EXP 75
8985: PUSH
8986: LD_INT 0
8988: ST_TO_ADDR
// sContamin := false ;
8989: LD_ADDR_EXP 76
8993: PUSH
8994: LD_INT 0
8996: ST_TO_ADDR
// sOil := false ;
8997: LD_ADDR_EXP 78
9001: PUSH
9002: LD_INT 0
9004: ST_TO_ADDR
// sStu := false ;
9005: LD_ADDR_EXP 82
9009: PUSH
9010: LD_INT 0
9012: ST_TO_ADDR
// sBazooka := false ;
9013: LD_ADDR_EXP 85
9017: PUSH
9018: LD_INT 0
9020: ST_TO_ADDR
// sMortar := false ;
9021: LD_ADDR_EXP 86
9025: PUSH
9026: LD_INT 0
9028: ST_TO_ADDR
// sRanger := false ;
9029: LD_ADDR_EXP 96
9033: PUSH
9034: LD_INT 0
9036: ST_TO_ADDR
// sComputer := false ;
9037: LD_ADDR_EXP 97
9041: PUSH
9042: LD_INT 0
9044: ST_TO_ADDR
// s30 := false ;
9045: LD_ADDR_EXP 98
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// s60 := false ;
9053: LD_ADDR_EXP 99
9057: PUSH
9058: LD_INT 0
9060: ST_TO_ADDR
// end ;
9061: LD_VAR 0 1
9065: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9066: LD_INT 0
9068: PPUSH
9069: PPUSH
9070: PPUSH
9071: PPUSH
9072: PPUSH
9073: PPUSH
9074: PPUSH
// result := [ ] ;
9075: LD_ADDR_VAR 0 2
9079: PUSH
9080: EMPTY
9081: ST_TO_ADDR
// if campaign_id = 1 then
9082: LD_OWVAR 69
9086: PUSH
9087: LD_INT 1
9089: EQUAL
9090: IFFALSE 12256
// begin case mission_number of 1 :
9092: LD_OWVAR 70
9096: PUSH
9097: LD_INT 1
9099: DOUBLE
9100: EQUAL
9101: IFTRUE 9105
9103: GO 9181
9105: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9106: LD_ADDR_VAR 0 2
9110: PUSH
9111: LD_INT 2
9113: PUSH
9114: LD_INT 4
9116: PUSH
9117: LD_INT 11
9119: PUSH
9120: LD_INT 12
9122: PUSH
9123: LD_INT 15
9125: PUSH
9126: LD_INT 16
9128: PUSH
9129: LD_INT 22
9131: PUSH
9132: LD_INT 23
9134: PUSH
9135: LD_INT 26
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 101
9151: PUSH
9152: LD_INT 102
9154: PUSH
9155: LD_INT 106
9157: PUSH
9158: LD_INT 116
9160: PUSH
9161: LD_INT 117
9163: PUSH
9164: LD_INT 118
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: ST_TO_ADDR
9179: GO 12254
9181: LD_INT 2
9183: DOUBLE
9184: EQUAL
9185: IFTRUE 9189
9187: GO 9273
9189: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9190: LD_ADDR_VAR 0 2
9194: PUSH
9195: LD_INT 2
9197: PUSH
9198: LD_INT 4
9200: PUSH
9201: LD_INT 11
9203: PUSH
9204: LD_INT 12
9206: PUSH
9207: LD_INT 15
9209: PUSH
9210: LD_INT 16
9212: PUSH
9213: LD_INT 22
9215: PUSH
9216: LD_INT 23
9218: PUSH
9219: LD_INT 26
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 101
9235: PUSH
9236: LD_INT 102
9238: PUSH
9239: LD_INT 105
9241: PUSH
9242: LD_INT 106
9244: PUSH
9245: LD_INT 108
9247: PUSH
9248: LD_INT 116
9250: PUSH
9251: LD_INT 117
9253: PUSH
9254: LD_INT 118
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: ST_TO_ADDR
9271: GO 12254
9273: LD_INT 3
9275: DOUBLE
9276: EQUAL
9277: IFTRUE 9281
9279: GO 9369
9281: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9282: LD_ADDR_VAR 0 2
9286: PUSH
9287: LD_INT 2
9289: PUSH
9290: LD_INT 4
9292: PUSH
9293: LD_INT 5
9295: PUSH
9296: LD_INT 11
9298: PUSH
9299: LD_INT 12
9301: PUSH
9302: LD_INT 15
9304: PUSH
9305: LD_INT 16
9307: PUSH
9308: LD_INT 22
9310: PUSH
9311: LD_INT 26
9313: PUSH
9314: LD_INT 36
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 101
9331: PUSH
9332: LD_INT 102
9334: PUSH
9335: LD_INT 105
9337: PUSH
9338: LD_INT 106
9340: PUSH
9341: LD_INT 108
9343: PUSH
9344: LD_INT 116
9346: PUSH
9347: LD_INT 117
9349: PUSH
9350: LD_INT 118
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: ST_TO_ADDR
9367: GO 12254
9369: LD_INT 4
9371: DOUBLE
9372: EQUAL
9373: IFTRUE 9377
9375: GO 9473
9377: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9378: LD_ADDR_VAR 0 2
9382: PUSH
9383: LD_INT 2
9385: PUSH
9386: LD_INT 4
9388: PUSH
9389: LD_INT 5
9391: PUSH
9392: LD_INT 8
9394: PUSH
9395: LD_INT 11
9397: PUSH
9398: LD_INT 12
9400: PUSH
9401: LD_INT 15
9403: PUSH
9404: LD_INT 16
9406: PUSH
9407: LD_INT 22
9409: PUSH
9410: LD_INT 23
9412: PUSH
9413: LD_INT 26
9415: PUSH
9416: LD_INT 36
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: PUSH
9433: LD_INT 101
9435: PUSH
9436: LD_INT 102
9438: PUSH
9439: LD_INT 105
9441: PUSH
9442: LD_INT 106
9444: PUSH
9445: LD_INT 108
9447: PUSH
9448: LD_INT 116
9450: PUSH
9451: LD_INT 117
9453: PUSH
9454: LD_INT 118
9456: PUSH
9457: EMPTY
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: ST_TO_ADDR
9471: GO 12254
9473: LD_INT 5
9475: DOUBLE
9476: EQUAL
9477: IFTRUE 9481
9479: GO 9593
9481: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9482: LD_ADDR_VAR 0 2
9486: PUSH
9487: LD_INT 2
9489: PUSH
9490: LD_INT 4
9492: PUSH
9493: LD_INT 5
9495: PUSH
9496: LD_INT 6
9498: PUSH
9499: LD_INT 8
9501: PUSH
9502: LD_INT 11
9504: PUSH
9505: LD_INT 12
9507: PUSH
9508: LD_INT 15
9510: PUSH
9511: LD_INT 16
9513: PUSH
9514: LD_INT 22
9516: PUSH
9517: LD_INT 23
9519: PUSH
9520: LD_INT 25
9522: PUSH
9523: LD_INT 26
9525: PUSH
9526: LD_INT 36
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 101
9547: PUSH
9548: LD_INT 102
9550: PUSH
9551: LD_INT 105
9553: PUSH
9554: LD_INT 106
9556: PUSH
9557: LD_INT 108
9559: PUSH
9560: LD_INT 109
9562: PUSH
9563: LD_INT 112
9565: PUSH
9566: LD_INT 116
9568: PUSH
9569: LD_INT 117
9571: PUSH
9572: LD_INT 118
9574: PUSH
9575: EMPTY
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: ST_TO_ADDR
9591: GO 12254
9593: LD_INT 6
9595: DOUBLE
9596: EQUAL
9597: IFTRUE 9601
9599: GO 9733
9601: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9602: LD_ADDR_VAR 0 2
9606: PUSH
9607: LD_INT 2
9609: PUSH
9610: LD_INT 4
9612: PUSH
9613: LD_INT 5
9615: PUSH
9616: LD_INT 6
9618: PUSH
9619: LD_INT 8
9621: PUSH
9622: LD_INT 11
9624: PUSH
9625: LD_INT 12
9627: PUSH
9628: LD_INT 15
9630: PUSH
9631: LD_INT 16
9633: PUSH
9634: LD_INT 20
9636: PUSH
9637: LD_INT 21
9639: PUSH
9640: LD_INT 22
9642: PUSH
9643: LD_INT 23
9645: PUSH
9646: LD_INT 25
9648: PUSH
9649: LD_INT 26
9651: PUSH
9652: LD_INT 30
9654: PUSH
9655: LD_INT 31
9657: PUSH
9658: LD_INT 32
9660: PUSH
9661: LD_INT 36
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: PUSH
9685: LD_INT 101
9687: PUSH
9688: LD_INT 102
9690: PUSH
9691: LD_INT 105
9693: PUSH
9694: LD_INT 106
9696: PUSH
9697: LD_INT 108
9699: PUSH
9700: LD_INT 109
9702: PUSH
9703: LD_INT 112
9705: PUSH
9706: LD_INT 116
9708: PUSH
9709: LD_INT 117
9711: PUSH
9712: LD_INT 118
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: EMPTY
9728: LIST
9729: LIST
9730: ST_TO_ADDR
9731: GO 12254
9733: LD_INT 7
9735: DOUBLE
9736: EQUAL
9737: IFTRUE 9741
9739: GO 9853
9741: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9742: LD_ADDR_VAR 0 2
9746: PUSH
9747: LD_INT 2
9749: PUSH
9750: LD_INT 4
9752: PUSH
9753: LD_INT 5
9755: PUSH
9756: LD_INT 7
9758: PUSH
9759: LD_INT 11
9761: PUSH
9762: LD_INT 12
9764: PUSH
9765: LD_INT 15
9767: PUSH
9768: LD_INT 16
9770: PUSH
9771: LD_INT 20
9773: PUSH
9774: LD_INT 21
9776: PUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 23
9782: PUSH
9783: LD_INT 25
9785: PUSH
9786: LD_INT 26
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 101
9807: PUSH
9808: LD_INT 102
9810: PUSH
9811: LD_INT 103
9813: PUSH
9814: LD_INT 105
9816: PUSH
9817: LD_INT 106
9819: PUSH
9820: LD_INT 108
9822: PUSH
9823: LD_INT 112
9825: PUSH
9826: LD_INT 116
9828: PUSH
9829: LD_INT 117
9831: PUSH
9832: LD_INT 118
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: ST_TO_ADDR
9851: GO 12254
9853: LD_INT 8
9855: DOUBLE
9856: EQUAL
9857: IFTRUE 9861
9859: GO 10001
9861: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9862: LD_ADDR_VAR 0 2
9866: PUSH
9867: LD_INT 2
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: LD_INT 5
9875: PUSH
9876: LD_INT 6
9878: PUSH
9879: LD_INT 7
9881: PUSH
9882: LD_INT 8
9884: PUSH
9885: LD_INT 11
9887: PUSH
9888: LD_INT 12
9890: PUSH
9891: LD_INT 15
9893: PUSH
9894: LD_INT 16
9896: PUSH
9897: LD_INT 20
9899: PUSH
9900: LD_INT 21
9902: PUSH
9903: LD_INT 22
9905: PUSH
9906: LD_INT 23
9908: PUSH
9909: LD_INT 25
9911: PUSH
9912: LD_INT 26
9914: PUSH
9915: LD_INT 30
9917: PUSH
9918: LD_INT 31
9920: PUSH
9921: LD_INT 32
9923: PUSH
9924: LD_INT 36
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 101
9951: PUSH
9952: LD_INT 102
9954: PUSH
9955: LD_INT 103
9957: PUSH
9958: LD_INT 105
9960: PUSH
9961: LD_INT 106
9963: PUSH
9964: LD_INT 108
9966: PUSH
9967: LD_INT 109
9969: PUSH
9970: LD_INT 112
9972: PUSH
9973: LD_INT 116
9975: PUSH
9976: LD_INT 117
9978: PUSH
9979: LD_INT 118
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: ST_TO_ADDR
9999: GO 12254
10001: LD_INT 9
10003: DOUBLE
10004: EQUAL
10005: IFTRUE 10009
10007: GO 10157
10009: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10010: LD_ADDR_VAR 0 2
10014: PUSH
10015: LD_INT 2
10017: PUSH
10018: LD_INT 4
10020: PUSH
10021: LD_INT 5
10023: PUSH
10024: LD_INT 6
10026: PUSH
10027: LD_INT 7
10029: PUSH
10030: LD_INT 8
10032: PUSH
10033: LD_INT 11
10035: PUSH
10036: LD_INT 12
10038: PUSH
10039: LD_INT 15
10041: PUSH
10042: LD_INT 16
10044: PUSH
10045: LD_INT 20
10047: PUSH
10048: LD_INT 21
10050: PUSH
10051: LD_INT 22
10053: PUSH
10054: LD_INT 23
10056: PUSH
10057: LD_INT 25
10059: PUSH
10060: LD_INT 26
10062: PUSH
10063: LD_INT 28
10065: PUSH
10066: LD_INT 30
10068: PUSH
10069: LD_INT 31
10071: PUSH
10072: LD_INT 32
10074: PUSH
10075: LD_INT 36
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: PUSH
10101: LD_INT 101
10103: PUSH
10104: LD_INT 102
10106: PUSH
10107: LD_INT 103
10109: PUSH
10110: LD_INT 105
10112: PUSH
10113: LD_INT 106
10115: PUSH
10116: LD_INT 108
10118: PUSH
10119: LD_INT 109
10121: PUSH
10122: LD_INT 112
10124: PUSH
10125: LD_INT 114
10127: PUSH
10128: LD_INT 116
10130: PUSH
10131: LD_INT 117
10133: PUSH
10134: LD_INT 118
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: ST_TO_ADDR
10155: GO 12254
10157: LD_INT 10
10159: DOUBLE
10160: EQUAL
10161: IFTRUE 10165
10163: GO 10361
10165: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10166: LD_ADDR_VAR 0 2
10170: PUSH
10171: LD_INT 2
10173: PUSH
10174: LD_INT 4
10176: PUSH
10177: LD_INT 5
10179: PUSH
10180: LD_INT 6
10182: PUSH
10183: LD_INT 7
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: LD_INT 9
10191: PUSH
10192: LD_INT 10
10194: PUSH
10195: LD_INT 11
10197: PUSH
10198: LD_INT 12
10200: PUSH
10201: LD_INT 13
10203: PUSH
10204: LD_INT 14
10206: PUSH
10207: LD_INT 15
10209: PUSH
10210: LD_INT 16
10212: PUSH
10213: LD_INT 17
10215: PUSH
10216: LD_INT 18
10218: PUSH
10219: LD_INT 19
10221: PUSH
10222: LD_INT 20
10224: PUSH
10225: LD_INT 21
10227: PUSH
10228: LD_INT 22
10230: PUSH
10231: LD_INT 23
10233: PUSH
10234: LD_INT 24
10236: PUSH
10237: LD_INT 25
10239: PUSH
10240: LD_INT 26
10242: PUSH
10243: LD_INT 28
10245: PUSH
10246: LD_INT 30
10248: PUSH
10249: LD_INT 31
10251: PUSH
10252: LD_INT 32
10254: PUSH
10255: LD_INT 36
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 101
10291: PUSH
10292: LD_INT 102
10294: PUSH
10295: LD_INT 103
10297: PUSH
10298: LD_INT 104
10300: PUSH
10301: LD_INT 105
10303: PUSH
10304: LD_INT 106
10306: PUSH
10307: LD_INT 107
10309: PUSH
10310: LD_INT 108
10312: PUSH
10313: LD_INT 109
10315: PUSH
10316: LD_INT 110
10318: PUSH
10319: LD_INT 111
10321: PUSH
10322: LD_INT 112
10324: PUSH
10325: LD_INT 114
10327: PUSH
10328: LD_INT 116
10330: PUSH
10331: LD_INT 117
10333: PUSH
10334: LD_INT 118
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: ST_TO_ADDR
10359: GO 12254
10361: LD_INT 11
10363: DOUBLE
10364: EQUAL
10365: IFTRUE 10369
10367: GO 10573
10369: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10370: LD_ADDR_VAR 0 2
10374: PUSH
10375: LD_INT 2
10377: PUSH
10378: LD_INT 3
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 5
10386: PUSH
10387: LD_INT 6
10389: PUSH
10390: LD_INT 7
10392: PUSH
10393: LD_INT 8
10395: PUSH
10396: LD_INT 9
10398: PUSH
10399: LD_INT 10
10401: PUSH
10402: LD_INT 11
10404: PUSH
10405: LD_INT 12
10407: PUSH
10408: LD_INT 13
10410: PUSH
10411: LD_INT 14
10413: PUSH
10414: LD_INT 15
10416: PUSH
10417: LD_INT 16
10419: PUSH
10420: LD_INT 17
10422: PUSH
10423: LD_INT 18
10425: PUSH
10426: LD_INT 19
10428: PUSH
10429: LD_INT 20
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 22
10437: PUSH
10438: LD_INT 23
10440: PUSH
10441: LD_INT 24
10443: PUSH
10444: LD_INT 25
10446: PUSH
10447: LD_INT 26
10449: PUSH
10450: LD_INT 28
10452: PUSH
10453: LD_INT 30
10455: PUSH
10456: LD_INT 31
10458: PUSH
10459: LD_INT 32
10461: PUSH
10462: LD_INT 34
10464: PUSH
10465: LD_INT 36
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 101
10503: PUSH
10504: LD_INT 102
10506: PUSH
10507: LD_INT 103
10509: PUSH
10510: LD_INT 104
10512: PUSH
10513: LD_INT 105
10515: PUSH
10516: LD_INT 106
10518: PUSH
10519: LD_INT 107
10521: PUSH
10522: LD_INT 108
10524: PUSH
10525: LD_INT 109
10527: PUSH
10528: LD_INT 110
10530: PUSH
10531: LD_INT 111
10533: PUSH
10534: LD_INT 112
10536: PUSH
10537: LD_INT 114
10539: PUSH
10540: LD_INT 116
10542: PUSH
10543: LD_INT 117
10545: PUSH
10546: LD_INT 118
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: ST_TO_ADDR
10571: GO 12254
10573: LD_INT 12
10575: DOUBLE
10576: EQUAL
10577: IFTRUE 10581
10579: GO 10801
10581: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10582: LD_ADDR_VAR 0 2
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: LD_INT 2
10592: PUSH
10593: LD_INT 3
10595: PUSH
10596: LD_INT 4
10598: PUSH
10599: LD_INT 5
10601: PUSH
10602: LD_INT 6
10604: PUSH
10605: LD_INT 7
10607: PUSH
10608: LD_INT 8
10610: PUSH
10611: LD_INT 9
10613: PUSH
10614: LD_INT 10
10616: PUSH
10617: LD_INT 11
10619: PUSH
10620: LD_INT 12
10622: PUSH
10623: LD_INT 13
10625: PUSH
10626: LD_INT 14
10628: PUSH
10629: LD_INT 15
10631: PUSH
10632: LD_INT 16
10634: PUSH
10635: LD_INT 17
10637: PUSH
10638: LD_INT 18
10640: PUSH
10641: LD_INT 19
10643: PUSH
10644: LD_INT 20
10646: PUSH
10647: LD_INT 21
10649: PUSH
10650: LD_INT 22
10652: PUSH
10653: LD_INT 23
10655: PUSH
10656: LD_INT 24
10658: PUSH
10659: LD_INT 25
10661: PUSH
10662: LD_INT 26
10664: PUSH
10665: LD_INT 27
10667: PUSH
10668: LD_INT 28
10670: PUSH
10671: LD_INT 30
10673: PUSH
10674: LD_INT 31
10676: PUSH
10677: LD_INT 32
10679: PUSH
10680: LD_INT 33
10682: PUSH
10683: LD_INT 34
10685: PUSH
10686: LD_INT 36
10688: PUSH
10689: EMPTY
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 101
10727: PUSH
10728: LD_INT 102
10730: PUSH
10731: LD_INT 103
10733: PUSH
10734: LD_INT 104
10736: PUSH
10737: LD_INT 105
10739: PUSH
10740: LD_INT 106
10742: PUSH
10743: LD_INT 107
10745: PUSH
10746: LD_INT 108
10748: PUSH
10749: LD_INT 109
10751: PUSH
10752: LD_INT 110
10754: PUSH
10755: LD_INT 111
10757: PUSH
10758: LD_INT 112
10760: PUSH
10761: LD_INT 113
10763: PUSH
10764: LD_INT 114
10766: PUSH
10767: LD_INT 116
10769: PUSH
10770: LD_INT 117
10772: PUSH
10773: LD_INT 118
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: ST_TO_ADDR
10799: GO 12254
10801: LD_INT 13
10803: DOUBLE
10804: EQUAL
10805: IFTRUE 10809
10807: GO 11017
10809: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10810: LD_ADDR_VAR 0 2
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: LD_INT 3
10823: PUSH
10824: LD_INT 4
10826: PUSH
10827: LD_INT 5
10829: PUSH
10830: LD_INT 8
10832: PUSH
10833: LD_INT 9
10835: PUSH
10836: LD_INT 10
10838: PUSH
10839: LD_INT 11
10841: PUSH
10842: LD_INT 12
10844: PUSH
10845: LD_INT 14
10847: PUSH
10848: LD_INT 15
10850: PUSH
10851: LD_INT 16
10853: PUSH
10854: LD_INT 17
10856: PUSH
10857: LD_INT 18
10859: PUSH
10860: LD_INT 19
10862: PUSH
10863: LD_INT 20
10865: PUSH
10866: LD_INT 21
10868: PUSH
10869: LD_INT 22
10871: PUSH
10872: LD_INT 23
10874: PUSH
10875: LD_INT 24
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 26
10883: PUSH
10884: LD_INT 27
10886: PUSH
10887: LD_INT 28
10889: PUSH
10890: LD_INT 30
10892: PUSH
10893: LD_INT 31
10895: PUSH
10896: LD_INT 32
10898: PUSH
10899: LD_INT 33
10901: PUSH
10902: LD_INT 34
10904: PUSH
10905: LD_INT 36
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: PUSH
10941: LD_INT 101
10943: PUSH
10944: LD_INT 102
10946: PUSH
10947: LD_INT 103
10949: PUSH
10950: LD_INT 104
10952: PUSH
10953: LD_INT 105
10955: PUSH
10956: LD_INT 106
10958: PUSH
10959: LD_INT 107
10961: PUSH
10962: LD_INT 108
10964: PUSH
10965: LD_INT 109
10967: PUSH
10968: LD_INT 110
10970: PUSH
10971: LD_INT 111
10973: PUSH
10974: LD_INT 112
10976: PUSH
10977: LD_INT 113
10979: PUSH
10980: LD_INT 114
10982: PUSH
10983: LD_INT 116
10985: PUSH
10986: LD_INT 117
10988: PUSH
10989: LD_INT 118
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: ST_TO_ADDR
11015: GO 12254
11017: LD_INT 14
11019: DOUBLE
11020: EQUAL
11021: IFTRUE 11025
11023: GO 11249
11025: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11026: LD_ADDR_VAR 0 2
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: LD_INT 2
11036: PUSH
11037: LD_INT 3
11039: PUSH
11040: LD_INT 4
11042: PUSH
11043: LD_INT 5
11045: PUSH
11046: LD_INT 6
11048: PUSH
11049: LD_INT 7
11051: PUSH
11052: LD_INT 8
11054: PUSH
11055: LD_INT 9
11057: PUSH
11058: LD_INT 10
11060: PUSH
11061: LD_INT 11
11063: PUSH
11064: LD_INT 12
11066: PUSH
11067: LD_INT 13
11069: PUSH
11070: LD_INT 14
11072: PUSH
11073: LD_INT 15
11075: PUSH
11076: LD_INT 16
11078: PUSH
11079: LD_INT 17
11081: PUSH
11082: LD_INT 18
11084: PUSH
11085: LD_INT 19
11087: PUSH
11088: LD_INT 20
11090: PUSH
11091: LD_INT 21
11093: PUSH
11094: LD_INT 22
11096: PUSH
11097: LD_INT 23
11099: PUSH
11100: LD_INT 24
11102: PUSH
11103: LD_INT 25
11105: PUSH
11106: LD_INT 26
11108: PUSH
11109: LD_INT 27
11111: PUSH
11112: LD_INT 28
11114: PUSH
11115: LD_INT 29
11117: PUSH
11118: LD_INT 30
11120: PUSH
11121: LD_INT 31
11123: PUSH
11124: LD_INT 32
11126: PUSH
11127: LD_INT 33
11129: PUSH
11130: LD_INT 34
11132: PUSH
11133: LD_INT 36
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 101
11175: PUSH
11176: LD_INT 102
11178: PUSH
11179: LD_INT 103
11181: PUSH
11182: LD_INT 104
11184: PUSH
11185: LD_INT 105
11187: PUSH
11188: LD_INT 106
11190: PUSH
11191: LD_INT 107
11193: PUSH
11194: LD_INT 108
11196: PUSH
11197: LD_INT 109
11199: PUSH
11200: LD_INT 110
11202: PUSH
11203: LD_INT 111
11205: PUSH
11206: LD_INT 112
11208: PUSH
11209: LD_INT 113
11211: PUSH
11212: LD_INT 114
11214: PUSH
11215: LD_INT 116
11217: PUSH
11218: LD_INT 117
11220: PUSH
11221: LD_INT 118
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: ST_TO_ADDR
11247: GO 12254
11249: LD_INT 15
11251: DOUBLE
11252: EQUAL
11253: IFTRUE 11257
11255: GO 11481
11257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11258: LD_ADDR_VAR 0 2
11262: PUSH
11263: LD_INT 1
11265: PUSH
11266: LD_INT 2
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: LD_INT 4
11274: PUSH
11275: LD_INT 5
11277: PUSH
11278: LD_INT 6
11280: PUSH
11281: LD_INT 7
11283: PUSH
11284: LD_INT 8
11286: PUSH
11287: LD_INT 9
11289: PUSH
11290: LD_INT 10
11292: PUSH
11293: LD_INT 11
11295: PUSH
11296: LD_INT 12
11298: PUSH
11299: LD_INT 13
11301: PUSH
11302: LD_INT 14
11304: PUSH
11305: LD_INT 15
11307: PUSH
11308: LD_INT 16
11310: PUSH
11311: LD_INT 17
11313: PUSH
11314: LD_INT 18
11316: PUSH
11317: LD_INT 19
11319: PUSH
11320: LD_INT 20
11322: PUSH
11323: LD_INT 21
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_INT 23
11331: PUSH
11332: LD_INT 24
11334: PUSH
11335: LD_INT 25
11337: PUSH
11338: LD_INT 26
11340: PUSH
11341: LD_INT 27
11343: PUSH
11344: LD_INT 28
11346: PUSH
11347: LD_INT 29
11349: PUSH
11350: LD_INT 30
11352: PUSH
11353: LD_INT 31
11355: PUSH
11356: LD_INT 32
11358: PUSH
11359: LD_INT 33
11361: PUSH
11362: LD_INT 34
11364: PUSH
11365: LD_INT 36
11367: PUSH
11368: EMPTY
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 101
11407: PUSH
11408: LD_INT 102
11410: PUSH
11411: LD_INT 103
11413: PUSH
11414: LD_INT 104
11416: PUSH
11417: LD_INT 105
11419: PUSH
11420: LD_INT 106
11422: PUSH
11423: LD_INT 107
11425: PUSH
11426: LD_INT 108
11428: PUSH
11429: LD_INT 109
11431: PUSH
11432: LD_INT 110
11434: PUSH
11435: LD_INT 111
11437: PUSH
11438: LD_INT 112
11440: PUSH
11441: LD_INT 113
11443: PUSH
11444: LD_INT 114
11446: PUSH
11447: LD_INT 116
11449: PUSH
11450: LD_INT 117
11452: PUSH
11453: LD_INT 118
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: ST_TO_ADDR
11479: GO 12254
11481: LD_INT 16
11483: DOUBLE
11484: EQUAL
11485: IFTRUE 11489
11487: GO 11625
11489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_INT 2
11497: PUSH
11498: LD_INT 4
11500: PUSH
11501: LD_INT 5
11503: PUSH
11504: LD_INT 7
11506: PUSH
11507: LD_INT 11
11509: PUSH
11510: LD_INT 12
11512: PUSH
11513: LD_INT 15
11515: PUSH
11516: LD_INT 16
11518: PUSH
11519: LD_INT 20
11521: PUSH
11522: LD_INT 21
11524: PUSH
11525: LD_INT 22
11527: PUSH
11528: LD_INT 23
11530: PUSH
11531: LD_INT 25
11533: PUSH
11534: LD_INT 26
11536: PUSH
11537: LD_INT 30
11539: PUSH
11540: LD_INT 31
11542: PUSH
11543: LD_INT 32
11545: PUSH
11546: LD_INT 33
11548: PUSH
11549: LD_INT 34
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 101
11575: PUSH
11576: LD_INT 102
11578: PUSH
11579: LD_INT 103
11581: PUSH
11582: LD_INT 106
11584: PUSH
11585: LD_INT 108
11587: PUSH
11588: LD_INT 112
11590: PUSH
11591: LD_INT 113
11593: PUSH
11594: LD_INT 114
11596: PUSH
11597: LD_INT 116
11599: PUSH
11600: LD_INT 117
11602: PUSH
11603: LD_INT 118
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: ST_TO_ADDR
11623: GO 12254
11625: LD_INT 17
11627: DOUBLE
11628: EQUAL
11629: IFTRUE 11633
11631: GO 11857
11633: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_INT 1
11641: PUSH
11642: LD_INT 2
11644: PUSH
11645: LD_INT 3
11647: PUSH
11648: LD_INT 4
11650: PUSH
11651: LD_INT 5
11653: PUSH
11654: LD_INT 6
11656: PUSH
11657: LD_INT 7
11659: PUSH
11660: LD_INT 8
11662: PUSH
11663: LD_INT 9
11665: PUSH
11666: LD_INT 10
11668: PUSH
11669: LD_INT 11
11671: PUSH
11672: LD_INT 12
11674: PUSH
11675: LD_INT 13
11677: PUSH
11678: LD_INT 14
11680: PUSH
11681: LD_INT 15
11683: PUSH
11684: LD_INT 16
11686: PUSH
11687: LD_INT 17
11689: PUSH
11690: LD_INT 18
11692: PUSH
11693: LD_INT 19
11695: PUSH
11696: LD_INT 20
11698: PUSH
11699: LD_INT 21
11701: PUSH
11702: LD_INT 22
11704: PUSH
11705: LD_INT 23
11707: PUSH
11708: LD_INT 24
11710: PUSH
11711: LD_INT 25
11713: PUSH
11714: LD_INT 26
11716: PUSH
11717: LD_INT 27
11719: PUSH
11720: LD_INT 28
11722: PUSH
11723: LD_INT 29
11725: PUSH
11726: LD_INT 30
11728: PUSH
11729: LD_INT 31
11731: PUSH
11732: LD_INT 32
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: LD_INT 34
11740: PUSH
11741: LD_INT 36
11743: PUSH
11744: EMPTY
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 101
11783: PUSH
11784: LD_INT 102
11786: PUSH
11787: LD_INT 103
11789: PUSH
11790: LD_INT 104
11792: PUSH
11793: LD_INT 105
11795: PUSH
11796: LD_INT 106
11798: PUSH
11799: LD_INT 107
11801: PUSH
11802: LD_INT 108
11804: PUSH
11805: LD_INT 109
11807: PUSH
11808: LD_INT 110
11810: PUSH
11811: LD_INT 111
11813: PUSH
11814: LD_INT 112
11816: PUSH
11817: LD_INT 113
11819: PUSH
11820: LD_INT 114
11822: PUSH
11823: LD_INT 116
11825: PUSH
11826: LD_INT 117
11828: PUSH
11829: LD_INT 118
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: ST_TO_ADDR
11855: GO 12254
11857: LD_INT 18
11859: DOUBLE
11860: EQUAL
11861: IFTRUE 11865
11863: GO 12013
11865: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11866: LD_ADDR_VAR 0 2
11870: PUSH
11871: LD_INT 2
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: LD_INT 5
11879: PUSH
11880: LD_INT 7
11882: PUSH
11883: LD_INT 11
11885: PUSH
11886: LD_INT 12
11888: PUSH
11889: LD_INT 15
11891: PUSH
11892: LD_INT 16
11894: PUSH
11895: LD_INT 20
11897: PUSH
11898: LD_INT 21
11900: PUSH
11901: LD_INT 22
11903: PUSH
11904: LD_INT 23
11906: PUSH
11907: LD_INT 25
11909: PUSH
11910: LD_INT 26
11912: PUSH
11913: LD_INT 30
11915: PUSH
11916: LD_INT 31
11918: PUSH
11919: LD_INT 32
11921: PUSH
11922: LD_INT 33
11924: PUSH
11925: LD_INT 34
11927: PUSH
11928: LD_INT 35
11930: PUSH
11931: LD_INT 36
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 101
11959: PUSH
11960: LD_INT 102
11962: PUSH
11963: LD_INT 103
11965: PUSH
11966: LD_INT 106
11968: PUSH
11969: LD_INT 108
11971: PUSH
11972: LD_INT 112
11974: PUSH
11975: LD_INT 113
11977: PUSH
11978: LD_INT 114
11980: PUSH
11981: LD_INT 115
11983: PUSH
11984: LD_INT 116
11986: PUSH
11987: LD_INT 117
11989: PUSH
11990: LD_INT 118
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: ST_TO_ADDR
12011: GO 12254
12013: LD_INT 19
12015: DOUBLE
12016: EQUAL
12017: IFTRUE 12021
12019: GO 12253
12021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12022: LD_ADDR_VAR 0 2
12026: PUSH
12027: LD_INT 1
12029: PUSH
12030: LD_INT 2
12032: PUSH
12033: LD_INT 3
12035: PUSH
12036: LD_INT 4
12038: PUSH
12039: LD_INT 5
12041: PUSH
12042: LD_INT 6
12044: PUSH
12045: LD_INT 7
12047: PUSH
12048: LD_INT 8
12050: PUSH
12051: LD_INT 9
12053: PUSH
12054: LD_INT 10
12056: PUSH
12057: LD_INT 11
12059: PUSH
12060: LD_INT 12
12062: PUSH
12063: LD_INT 13
12065: PUSH
12066: LD_INT 14
12068: PUSH
12069: LD_INT 15
12071: PUSH
12072: LD_INT 16
12074: PUSH
12075: LD_INT 17
12077: PUSH
12078: LD_INT 18
12080: PUSH
12081: LD_INT 19
12083: PUSH
12084: LD_INT 20
12086: PUSH
12087: LD_INT 21
12089: PUSH
12090: LD_INT 22
12092: PUSH
12093: LD_INT 23
12095: PUSH
12096: LD_INT 24
12098: PUSH
12099: LD_INT 25
12101: PUSH
12102: LD_INT 26
12104: PUSH
12105: LD_INT 27
12107: PUSH
12108: LD_INT 28
12110: PUSH
12111: LD_INT 29
12113: PUSH
12114: LD_INT 30
12116: PUSH
12117: LD_INT 31
12119: PUSH
12120: LD_INT 32
12122: PUSH
12123: LD_INT 33
12125: PUSH
12126: LD_INT 34
12128: PUSH
12129: LD_INT 35
12131: PUSH
12132: LD_INT 36
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 101
12175: PUSH
12176: LD_INT 102
12178: PUSH
12179: LD_INT 103
12181: PUSH
12182: LD_INT 104
12184: PUSH
12185: LD_INT 105
12187: PUSH
12188: LD_INT 106
12190: PUSH
12191: LD_INT 107
12193: PUSH
12194: LD_INT 108
12196: PUSH
12197: LD_INT 109
12199: PUSH
12200: LD_INT 110
12202: PUSH
12203: LD_INT 111
12205: PUSH
12206: LD_INT 112
12208: PUSH
12209: LD_INT 113
12211: PUSH
12212: LD_INT 114
12214: PUSH
12215: LD_INT 115
12217: PUSH
12218: LD_INT 116
12220: PUSH
12221: LD_INT 117
12223: PUSH
12224: LD_INT 118
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: ST_TO_ADDR
12251: GO 12254
12253: POP
// end else
12254: GO 12485
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12256: LD_ADDR_VAR 0 2
12260: PUSH
12261: LD_INT 1
12263: PUSH
12264: LD_INT 2
12266: PUSH
12267: LD_INT 3
12269: PUSH
12270: LD_INT 4
12272: PUSH
12273: LD_INT 5
12275: PUSH
12276: LD_INT 6
12278: PUSH
12279: LD_INT 7
12281: PUSH
12282: LD_INT 8
12284: PUSH
12285: LD_INT 9
12287: PUSH
12288: LD_INT 10
12290: PUSH
12291: LD_INT 11
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: LD_INT 13
12299: PUSH
12300: LD_INT 14
12302: PUSH
12303: LD_INT 15
12305: PUSH
12306: LD_INT 16
12308: PUSH
12309: LD_INT 17
12311: PUSH
12312: LD_INT 18
12314: PUSH
12315: LD_INT 19
12317: PUSH
12318: LD_INT 20
12320: PUSH
12321: LD_INT 21
12323: PUSH
12324: LD_INT 22
12326: PUSH
12327: LD_INT 23
12329: PUSH
12330: LD_INT 24
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 26
12338: PUSH
12339: LD_INT 27
12341: PUSH
12342: LD_INT 28
12344: PUSH
12345: LD_INT 29
12347: PUSH
12348: LD_INT 30
12350: PUSH
12351: LD_INT 31
12353: PUSH
12354: LD_INT 32
12356: PUSH
12357: LD_INT 33
12359: PUSH
12360: LD_INT 34
12362: PUSH
12363: LD_INT 35
12365: PUSH
12366: LD_INT 36
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: PUSH
12407: LD_INT 101
12409: PUSH
12410: LD_INT 102
12412: PUSH
12413: LD_INT 103
12415: PUSH
12416: LD_INT 104
12418: PUSH
12419: LD_INT 105
12421: PUSH
12422: LD_INT 106
12424: PUSH
12425: LD_INT 107
12427: PUSH
12428: LD_INT 108
12430: PUSH
12431: LD_INT 109
12433: PUSH
12434: LD_INT 110
12436: PUSH
12437: LD_INT 111
12439: PUSH
12440: LD_INT 112
12442: PUSH
12443: LD_INT 113
12445: PUSH
12446: LD_INT 114
12448: PUSH
12449: LD_INT 115
12451: PUSH
12452: LD_INT 116
12454: PUSH
12455: LD_INT 117
12457: PUSH
12458: LD_INT 118
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: ST_TO_ADDR
// if result then
12485: LD_VAR 0 2
12489: IFFALSE 13275
// begin normal :=  ;
12491: LD_ADDR_VAR 0 5
12495: PUSH
12496: LD_STRING 
12498: ST_TO_ADDR
// hardcore :=  ;
12499: LD_ADDR_VAR 0 6
12503: PUSH
12504: LD_STRING 
12506: ST_TO_ADDR
// active :=  ;
12507: LD_ADDR_VAR 0 7
12511: PUSH
12512: LD_STRING 
12514: ST_TO_ADDR
// for i = 1 to normalCounter do
12515: LD_ADDR_VAR 0 8
12519: PUSH
12520: DOUBLE
12521: LD_INT 1
12523: DEC
12524: ST_TO_ADDR
12525: LD_EXP 44
12529: PUSH
12530: FOR_TO
12531: IFFALSE 12632
// begin tmp := 0 ;
12533: LD_ADDR_VAR 0 3
12537: PUSH
12538: LD_STRING 0
12540: ST_TO_ADDR
// if result [ 1 ] then
12541: LD_VAR 0 2
12545: PUSH
12546: LD_INT 1
12548: ARRAY
12549: IFFALSE 12614
// if result [ 1 ] [ 1 ] = i then
12551: LD_VAR 0 2
12555: PUSH
12556: LD_INT 1
12558: ARRAY
12559: PUSH
12560: LD_INT 1
12562: ARRAY
12563: PUSH
12564: LD_VAR 0 8
12568: EQUAL
12569: IFFALSE 12614
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12571: LD_ADDR_VAR 0 2
12575: PUSH
12576: LD_VAR 0 2
12580: PPUSH
12581: LD_INT 1
12583: PPUSH
12584: LD_VAR 0 2
12588: PUSH
12589: LD_INT 1
12591: ARRAY
12592: PPUSH
12593: LD_INT 1
12595: PPUSH
12596: CALL_OW 3
12600: PPUSH
12601: CALL_OW 1
12605: ST_TO_ADDR
// tmp := 1 ;
12606: LD_ADDR_VAR 0 3
12610: PUSH
12611: LD_STRING 1
12613: ST_TO_ADDR
// end ; normal := normal & tmp ;
12614: LD_ADDR_VAR 0 5
12618: PUSH
12619: LD_VAR 0 5
12623: PUSH
12624: LD_VAR 0 3
12628: STR
12629: ST_TO_ADDR
// end ;
12630: GO 12530
12632: POP
12633: POP
// for i = 1 to hardcoreCounter do
12634: LD_ADDR_VAR 0 8
12638: PUSH
12639: DOUBLE
12640: LD_INT 1
12642: DEC
12643: ST_TO_ADDR
12644: LD_EXP 45
12648: PUSH
12649: FOR_TO
12650: IFFALSE 12755
// begin tmp := 0 ;
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_STRING 0
12659: ST_TO_ADDR
// if result [ 2 ] then
12660: LD_VAR 0 2
12664: PUSH
12665: LD_INT 2
12667: ARRAY
12668: IFFALSE 12737
// if result [ 2 ] [ 1 ] = 100 + i then
12670: LD_VAR 0 2
12674: PUSH
12675: LD_INT 2
12677: ARRAY
12678: PUSH
12679: LD_INT 1
12681: ARRAY
12682: PUSH
12683: LD_INT 100
12685: PUSH
12686: LD_VAR 0 8
12690: PLUS
12691: EQUAL
12692: IFFALSE 12737
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12694: LD_ADDR_VAR 0 2
12698: PUSH
12699: LD_VAR 0 2
12703: PPUSH
12704: LD_INT 2
12706: PPUSH
12707: LD_VAR 0 2
12711: PUSH
12712: LD_INT 2
12714: ARRAY
12715: PPUSH
12716: LD_INT 1
12718: PPUSH
12719: CALL_OW 3
12723: PPUSH
12724: CALL_OW 1
12728: ST_TO_ADDR
// tmp := 1 ;
12729: LD_ADDR_VAR 0 3
12733: PUSH
12734: LD_STRING 1
12736: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12737: LD_ADDR_VAR 0 6
12741: PUSH
12742: LD_VAR 0 6
12746: PUSH
12747: LD_VAR 0 3
12751: STR
12752: ST_TO_ADDR
// end ;
12753: GO 12649
12755: POP
12756: POP
// if isGameLoad then
12757: LD_VAR 0 1
12761: IFFALSE 13236
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12763: LD_ADDR_VAR 0 4
12767: PUSH
12768: LD_EXP 48
12772: PUSH
12773: LD_EXP 47
12777: PUSH
12778: LD_EXP 49
12782: PUSH
12783: LD_EXP 46
12787: PUSH
12788: LD_EXP 50
12792: PUSH
12793: LD_EXP 51
12797: PUSH
12798: LD_EXP 52
12802: PUSH
12803: LD_EXP 53
12807: PUSH
12808: LD_EXP 54
12812: PUSH
12813: LD_EXP 55
12817: PUSH
12818: LD_EXP 56
12822: PUSH
12823: LD_EXP 57
12827: PUSH
12828: LD_EXP 58
12832: PUSH
12833: LD_EXP 59
12837: PUSH
12838: LD_EXP 67
12842: PUSH
12843: LD_EXP 68
12847: PUSH
12848: LD_EXP 69
12852: PUSH
12853: LD_EXP 70
12857: PUSH
12858: LD_EXP 72
12862: PUSH
12863: LD_EXP 73
12867: PUSH
12868: LD_EXP 74
12872: PUSH
12873: LD_EXP 77
12877: PUSH
12878: LD_EXP 79
12882: PUSH
12883: LD_EXP 80
12887: PUSH
12888: LD_EXP 81
12892: PUSH
12893: LD_EXP 83
12897: PUSH
12898: LD_EXP 84
12902: PUSH
12903: LD_EXP 87
12907: PUSH
12908: LD_EXP 88
12912: PUSH
12913: LD_EXP 89
12917: PUSH
12918: LD_EXP 90
12922: PUSH
12923: LD_EXP 91
12927: PUSH
12928: LD_EXP 92
12932: PUSH
12933: LD_EXP 93
12937: PUSH
12938: LD_EXP 94
12942: PUSH
12943: LD_EXP 95
12947: PUSH
12948: LD_EXP 60
12952: PUSH
12953: LD_EXP 61
12957: PUSH
12958: LD_EXP 64
12962: PUSH
12963: LD_EXP 65
12967: PUSH
12968: LD_EXP 66
12972: PUSH
12973: LD_EXP 62
12977: PUSH
12978: LD_EXP 63
12982: PUSH
12983: LD_EXP 71
12987: PUSH
12988: LD_EXP 75
12992: PUSH
12993: LD_EXP 76
12997: PUSH
12998: LD_EXP 78
13002: PUSH
13003: LD_EXP 82
13007: PUSH
13008: LD_EXP 85
13012: PUSH
13013: LD_EXP 86
13017: PUSH
13018: LD_EXP 96
13022: PUSH
13023: LD_EXP 97
13027: PUSH
13028: LD_EXP 98
13032: PUSH
13033: LD_EXP 99
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: ST_TO_ADDR
// tmp :=  ;
13094: LD_ADDR_VAR 0 3
13098: PUSH
13099: LD_STRING 
13101: ST_TO_ADDR
// for i = 1 to normalCounter do
13102: LD_ADDR_VAR 0 8
13106: PUSH
13107: DOUBLE
13108: LD_INT 1
13110: DEC
13111: ST_TO_ADDR
13112: LD_EXP 44
13116: PUSH
13117: FOR_TO
13118: IFFALSE 13154
// begin if flags [ i ] then
13120: LD_VAR 0 4
13124: PUSH
13125: LD_VAR 0 8
13129: ARRAY
13130: IFFALSE 13152
// tmp := tmp & i & ; ;
13132: LD_ADDR_VAR 0 3
13136: PUSH
13137: LD_VAR 0 3
13141: PUSH
13142: LD_VAR 0 8
13146: STR
13147: PUSH
13148: LD_STRING ;
13150: STR
13151: ST_TO_ADDR
// end ;
13152: GO 13117
13154: POP
13155: POP
// for i = 1 to hardcoreCounter do
13156: LD_ADDR_VAR 0 8
13160: PUSH
13161: DOUBLE
13162: LD_INT 1
13164: DEC
13165: ST_TO_ADDR
13166: LD_EXP 45
13170: PUSH
13171: FOR_TO
13172: IFFALSE 13218
// begin if flags [ normalCounter + i ] then
13174: LD_VAR 0 4
13178: PUSH
13179: LD_EXP 44
13183: PUSH
13184: LD_VAR 0 8
13188: PLUS
13189: ARRAY
13190: IFFALSE 13216
// tmp := tmp & ( 100 + i ) & ; ;
13192: LD_ADDR_VAR 0 3
13196: PUSH
13197: LD_VAR 0 3
13201: PUSH
13202: LD_INT 100
13204: PUSH
13205: LD_VAR 0 8
13209: PLUS
13210: STR
13211: PUSH
13212: LD_STRING ;
13214: STR
13215: ST_TO_ADDR
// end ;
13216: GO 13171
13218: POP
13219: POP
// if tmp then
13220: LD_VAR 0 3
13224: IFFALSE 13236
// active := tmp ;
13226: LD_ADDR_VAR 0 7
13230: PUSH
13231: LD_VAR 0 3
13235: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13236: LD_STRING getStreamItemsFromMission("
13238: PUSH
13239: LD_VAR 0 5
13243: STR
13244: PUSH
13245: LD_STRING ","
13247: STR
13248: PUSH
13249: LD_VAR 0 6
13253: STR
13254: PUSH
13255: LD_STRING ","
13257: STR
13258: PUSH
13259: LD_VAR 0 7
13263: STR
13264: PUSH
13265: LD_STRING ")
13267: STR
13268: PPUSH
13269: CALL_OW 559
// end else
13273: GO 13282
// ToLua ( getStreamItemsFromMission("","","") ) ;
13275: LD_STRING getStreamItemsFromMission("","","")
13277: PPUSH
13278: CALL_OW 559
// end ;
13282: LD_VAR 0 2
13286: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13287: LD_EXP 43
13291: PUSH
13292: LD_EXP 48
13296: AND
13297: IFFALSE 13421
13299: GO 13301
13301: DISABLE
13302: LD_INT 0
13304: PPUSH
13305: PPUSH
// begin enable ;
13306: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13307: LD_ADDR_VAR 0 2
13311: PUSH
13312: LD_INT 22
13314: PUSH
13315: LD_OWVAR 2
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 34
13329: PUSH
13330: LD_INT 7
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 34
13339: PUSH
13340: LD_INT 45
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 34
13349: PUSH
13350: LD_INT 28
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 34
13359: PUSH
13360: LD_INT 47
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PPUSH
13378: CALL_OW 69
13382: ST_TO_ADDR
// if not tmp then
13383: LD_VAR 0 2
13387: NOT
13388: IFFALSE 13392
// exit ;
13390: GO 13421
// for i in tmp do
13392: LD_ADDR_VAR 0 1
13396: PUSH
13397: LD_VAR 0 2
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13419
// begin SetLives ( i , 0 ) ;
13405: LD_VAR 0 1
13409: PPUSH
13410: LD_INT 0
13412: PPUSH
13413: CALL_OW 234
// end ;
13417: GO 13402
13419: POP
13420: POP
// end ;
13421: PPOPN 2
13423: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13424: LD_EXP 43
13428: PUSH
13429: LD_EXP 49
13433: AND
13434: IFFALSE 13518
13436: GO 13438
13438: DISABLE
13439: LD_INT 0
13441: PPUSH
13442: PPUSH
// begin enable ;
13443: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_INT 22
13451: PUSH
13452: LD_OWVAR 2
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 32
13463: PUSH
13464: LD_INT 3
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PPUSH
13475: CALL_OW 69
13479: ST_TO_ADDR
// if not tmp then
13480: LD_VAR 0 2
13484: NOT
13485: IFFALSE 13489
// exit ;
13487: GO 13518
// for i in tmp do
13489: LD_ADDR_VAR 0 1
13493: PUSH
13494: LD_VAR 0 2
13498: PUSH
13499: FOR_IN
13500: IFFALSE 13516
// begin SetLives ( i , 0 ) ;
13502: LD_VAR 0 1
13506: PPUSH
13507: LD_INT 0
13509: PPUSH
13510: CALL_OW 234
// end ;
13514: GO 13499
13516: POP
13517: POP
// end ;
13518: PPOPN 2
13520: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13521: LD_EXP 43
13525: PUSH
13526: LD_EXP 46
13530: AND
13531: IFFALSE 13624
13533: GO 13535
13535: DISABLE
13536: LD_INT 0
13538: PPUSH
// begin enable ;
13539: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13540: LD_ADDR_VAR 0 1
13544: PUSH
13545: LD_INT 22
13547: PUSH
13548: LD_OWVAR 2
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 2
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 5
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 9
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 8
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PPUSH
13600: CALL_OW 69
13604: PUSH
13605: FOR_IN
13606: IFFALSE 13622
// begin SetClass ( i , 1 ) ;
13608: LD_VAR 0 1
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: CALL_OW 336
// end ;
13620: GO 13605
13622: POP
13623: POP
// end ;
13624: PPOPN 1
13626: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13627: LD_EXP 43
13631: PUSH
13632: LD_EXP 47
13636: AND
13637: PUSH
13638: LD_OWVAR 65
13642: PUSH
13643: LD_INT 7
13645: LESS
13646: AND
13647: IFFALSE 13661
13649: GO 13651
13651: DISABLE
// begin enable ;
13652: ENABLE
// game_speed := 7 ;
13653: LD_ADDR_OWVAR 65
13657: PUSH
13658: LD_INT 7
13660: ST_TO_ADDR
// end ;
13661: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13662: LD_EXP 43
13666: PUSH
13667: LD_EXP 50
13671: AND
13672: IFFALSE 13874
13674: GO 13676
13676: DISABLE
13677: LD_INT 0
13679: PPUSH
13680: PPUSH
13681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13682: LD_ADDR_VAR 0 3
13686: PUSH
13687: LD_INT 81
13689: PUSH
13690: LD_OWVAR 2
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 21
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 69
13717: ST_TO_ADDR
// if not tmp then
13718: LD_VAR 0 3
13722: NOT
13723: IFFALSE 13727
// exit ;
13725: GO 13874
// if tmp > 5 then
13727: LD_VAR 0 3
13731: PUSH
13732: LD_INT 5
13734: GREATER
13735: IFFALSE 13747
// k := 5 else
13737: LD_ADDR_VAR 0 2
13741: PUSH
13742: LD_INT 5
13744: ST_TO_ADDR
13745: GO 13757
// k := tmp ;
13747: LD_ADDR_VAR 0 2
13751: PUSH
13752: LD_VAR 0 3
13756: ST_TO_ADDR
// for i := 1 to k do
13757: LD_ADDR_VAR 0 1
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_VAR 0 2
13771: PUSH
13772: FOR_TO
13773: IFFALSE 13872
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13775: LD_VAR 0 3
13779: PUSH
13780: LD_VAR 0 1
13784: ARRAY
13785: PPUSH
13786: LD_VAR 0 1
13790: PUSH
13791: LD_INT 4
13793: MOD
13794: PUSH
13795: LD_INT 1
13797: PLUS
13798: PPUSH
13799: CALL_OW 259
13803: PUSH
13804: LD_INT 10
13806: LESS
13807: IFFALSE 13870
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13809: LD_VAR 0 3
13813: PUSH
13814: LD_VAR 0 1
13818: ARRAY
13819: PPUSH
13820: LD_VAR 0 1
13824: PUSH
13825: LD_INT 4
13827: MOD
13828: PUSH
13829: LD_INT 1
13831: PLUS
13832: PPUSH
13833: LD_VAR 0 3
13837: PUSH
13838: LD_VAR 0 1
13842: ARRAY
13843: PPUSH
13844: LD_VAR 0 1
13848: PUSH
13849: LD_INT 4
13851: MOD
13852: PUSH
13853: LD_INT 1
13855: PLUS
13856: PPUSH
13857: CALL_OW 259
13861: PUSH
13862: LD_INT 1
13864: PLUS
13865: PPUSH
13866: CALL_OW 237
13870: GO 13772
13872: POP
13873: POP
// end ;
13874: PPOPN 3
13876: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13877: LD_EXP 43
13881: PUSH
13882: LD_EXP 51
13886: AND
13887: IFFALSE 13907
13889: GO 13891
13891: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13892: LD_INT 4
13894: PPUSH
13895: LD_OWVAR 2
13899: PPUSH
13900: LD_INT 0
13902: PPUSH
13903: CALL_OW 324
13907: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13908: LD_EXP 43
13912: PUSH
13913: LD_EXP 80
13917: AND
13918: IFFALSE 13938
13920: GO 13922
13922: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13923: LD_INT 19
13925: PPUSH
13926: LD_OWVAR 2
13930: PPUSH
13931: LD_INT 0
13933: PPUSH
13934: CALL_OW 324
13938: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13939: LD_EXP 43
13943: PUSH
13944: LD_EXP 52
13948: AND
13949: IFFALSE 14051
13951: GO 13953
13953: DISABLE
13954: LD_INT 0
13956: PPUSH
13957: PPUSH
// begin enable ;
13958: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13959: LD_ADDR_VAR 0 2
13963: PUSH
13964: LD_INT 22
13966: PUSH
13967: LD_OWVAR 2
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 2
13978: PUSH
13979: LD_INT 34
13981: PUSH
13982: LD_INT 11
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 34
13991: PUSH
13992: LD_INT 30
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: LIST
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PPUSH
14008: CALL_OW 69
14012: ST_TO_ADDR
// if not tmp then
14013: LD_VAR 0 2
14017: NOT
14018: IFFALSE 14022
// exit ;
14020: GO 14051
// for i in tmp do
14022: LD_ADDR_VAR 0 1
14026: PUSH
14027: LD_VAR 0 2
14031: PUSH
14032: FOR_IN
14033: IFFALSE 14049
// begin SetLives ( i , 0 ) ;
14035: LD_VAR 0 1
14039: PPUSH
14040: LD_INT 0
14042: PPUSH
14043: CALL_OW 234
// end ;
14047: GO 14032
14049: POP
14050: POP
// end ;
14051: PPOPN 2
14053: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14054: LD_EXP 43
14058: PUSH
14059: LD_EXP 53
14063: AND
14064: IFFALSE 14084
14066: GO 14068
14068: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14069: LD_INT 32
14071: PPUSH
14072: LD_OWVAR 2
14076: PPUSH
14077: LD_INT 0
14079: PPUSH
14080: CALL_OW 324
14084: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14085: LD_EXP 43
14089: PUSH
14090: LD_EXP 54
14094: AND
14095: IFFALSE 14276
14097: GO 14099
14099: DISABLE
14100: LD_INT 0
14102: PPUSH
14103: PPUSH
14104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14105: LD_ADDR_VAR 0 2
14109: PUSH
14110: LD_INT 22
14112: PUSH
14113: LD_OWVAR 2
14117: PUSH
14118: EMPTY
14119: LIST
14120: LIST
14121: PUSH
14122: LD_INT 33
14124: PUSH
14125: LD_INT 3
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PPUSH
14136: CALL_OW 69
14140: ST_TO_ADDR
// if not tmp then
14141: LD_VAR 0 2
14145: NOT
14146: IFFALSE 14150
// exit ;
14148: GO 14276
// side := 0 ;
14150: LD_ADDR_VAR 0 3
14154: PUSH
14155: LD_INT 0
14157: ST_TO_ADDR
// for i := 1 to 8 do
14158: LD_ADDR_VAR 0 1
14162: PUSH
14163: DOUBLE
14164: LD_INT 1
14166: DEC
14167: ST_TO_ADDR
14168: LD_INT 8
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14220
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14174: LD_OWVAR 2
14178: PUSH
14179: LD_VAR 0 1
14183: NONEQUAL
14184: PUSH
14185: LD_OWVAR 2
14189: PPUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 81
14199: PUSH
14200: LD_INT 2
14202: EQUAL
14203: AND
14204: IFFALSE 14218
// begin side := i ;
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: LD_VAR 0 1
14215: ST_TO_ADDR
// break ;
14216: GO 14220
// end ;
14218: GO 14171
14220: POP
14221: POP
// if not side then
14222: LD_VAR 0 3
14226: NOT
14227: IFFALSE 14231
// exit ;
14229: GO 14276
// for i := 1 to tmp do
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: DOUBLE
14237: LD_INT 1
14239: DEC
14240: ST_TO_ADDR
14241: LD_VAR 0 2
14245: PUSH
14246: FOR_TO
14247: IFFALSE 14274
// if Prob ( 60 ) then
14249: LD_INT 60
14251: PPUSH
14252: CALL_OW 13
14256: IFFALSE 14272
// SetSide ( i , side ) ;
14258: LD_VAR 0 1
14262: PPUSH
14263: LD_VAR 0 3
14267: PPUSH
14268: CALL_OW 235
14272: GO 14246
14274: POP
14275: POP
// end ;
14276: PPOPN 3
14278: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14279: LD_EXP 43
14283: PUSH
14284: LD_EXP 56
14288: AND
14289: IFFALSE 14408
14291: GO 14293
14293: DISABLE
14294: LD_INT 0
14296: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14297: LD_ADDR_VAR 0 1
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_OWVAR 2
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: PUSH
14314: LD_INT 21
14316: PUSH
14317: LD_INT 1
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: LD_INT 23
14329: PUSH
14330: LD_INT 0
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: PUSH
14341: EMPTY
14342: LIST
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14406
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14354: LD_VAR 0 1
14358: PPUSH
14359: CALL_OW 257
14363: PUSH
14364: LD_INT 1
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: LD_INT 4
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: IN
14382: IFFALSE 14404
// SetClass ( un , rand ( 1 , 4 ) ) ;
14384: LD_VAR 0 1
14388: PPUSH
14389: LD_INT 1
14391: PPUSH
14392: LD_INT 4
14394: PPUSH
14395: CALL_OW 12
14399: PPUSH
14400: CALL_OW 336
14404: GO 14351
14406: POP
14407: POP
// end ;
14408: PPOPN 1
14410: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14411: LD_EXP 43
14415: PUSH
14416: LD_EXP 55
14420: AND
14421: IFFALSE 14500
14423: GO 14425
14425: DISABLE
14426: LD_INT 0
14428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14429: LD_ADDR_VAR 0 1
14433: PUSH
14434: LD_INT 22
14436: PUSH
14437: LD_OWVAR 2
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: PUSH
14446: LD_INT 21
14448: PUSH
14449: LD_INT 3
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PPUSH
14460: CALL_OW 69
14464: ST_TO_ADDR
// if not tmp then
14465: LD_VAR 0 1
14469: NOT
14470: IFFALSE 14474
// exit ;
14472: GO 14500
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14474: LD_VAR 0 1
14478: PUSH
14479: LD_INT 1
14481: PPUSH
14482: LD_VAR 0 1
14486: PPUSH
14487: CALL_OW 12
14491: ARRAY
14492: PPUSH
14493: LD_INT 100
14495: PPUSH
14496: CALL_OW 234
// end ;
14500: PPOPN 1
14502: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14503: LD_EXP 43
14507: PUSH
14508: LD_EXP 57
14512: AND
14513: IFFALSE 14611
14515: GO 14517
14517: DISABLE
14518: LD_INT 0
14520: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_INT 22
14528: PUSH
14529: LD_OWVAR 2
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 21
14540: PUSH
14541: LD_INT 1
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PPUSH
14552: CALL_OW 69
14556: ST_TO_ADDR
// if not tmp then
14557: LD_VAR 0 1
14561: NOT
14562: IFFALSE 14566
// exit ;
14564: GO 14611
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14566: LD_VAR 0 1
14570: PUSH
14571: LD_INT 1
14573: PPUSH
14574: LD_VAR 0 1
14578: PPUSH
14579: CALL_OW 12
14583: ARRAY
14584: PPUSH
14585: LD_INT 1
14587: PPUSH
14588: LD_INT 4
14590: PPUSH
14591: CALL_OW 12
14595: PPUSH
14596: LD_INT 3000
14598: PPUSH
14599: LD_INT 9000
14601: PPUSH
14602: CALL_OW 12
14606: PPUSH
14607: CALL_OW 492
// end ;
14611: PPOPN 1
14613: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14614: LD_EXP 43
14618: PUSH
14619: LD_EXP 58
14623: AND
14624: IFFALSE 14644
14626: GO 14628
14628: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14629: LD_INT 1
14631: PPUSH
14632: LD_OWVAR 2
14636: PPUSH
14637: LD_INT 0
14639: PPUSH
14640: CALL_OW 324
14644: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14645: LD_EXP 43
14649: PUSH
14650: LD_EXP 59
14654: AND
14655: IFFALSE 14738
14657: GO 14659
14659: DISABLE
14660: LD_INT 0
14662: PPUSH
14663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_OWVAR 2
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: LD_INT 21
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: ST_TO_ADDR
// if not tmp then
14700: LD_VAR 0 2
14704: NOT
14705: IFFALSE 14709
// exit ;
14707: GO 14738
// for i in tmp do
14709: LD_ADDR_VAR 0 1
14713: PUSH
14714: LD_VAR 0 2
14718: PUSH
14719: FOR_IN
14720: IFFALSE 14736
// SetBLevel ( i , 10 ) ;
14722: LD_VAR 0 1
14726: PPUSH
14727: LD_INT 10
14729: PPUSH
14730: CALL_OW 241
14734: GO 14719
14736: POP
14737: POP
// end ;
14738: PPOPN 2
14740: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14741: LD_EXP 43
14745: PUSH
14746: LD_EXP 60
14750: AND
14751: IFFALSE 14862
14753: GO 14755
14755: DISABLE
14756: LD_INT 0
14758: PPUSH
14759: PPUSH
14760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14761: LD_ADDR_VAR 0 3
14765: PUSH
14766: LD_INT 22
14768: PUSH
14769: LD_OWVAR 2
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 25
14780: PUSH
14781: LD_INT 1
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ST_TO_ADDR
// if not tmp then
14797: LD_VAR 0 3
14801: NOT
14802: IFFALSE 14806
// exit ;
14804: GO 14862
// un := tmp [ rand ( 1 , tmp ) ] ;
14806: LD_ADDR_VAR 0 2
14810: PUSH
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 1
14818: PPUSH
14819: LD_VAR 0 3
14823: PPUSH
14824: CALL_OW 12
14828: ARRAY
14829: ST_TO_ADDR
// if Crawls ( un ) then
14830: LD_VAR 0 2
14834: PPUSH
14835: CALL_OW 318
14839: IFFALSE 14850
// ComWalk ( un ) ;
14841: LD_VAR 0 2
14845: PPUSH
14846: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14850: LD_VAR 0 2
14854: PPUSH
14855: LD_INT 5
14857: PPUSH
14858: CALL_OW 336
// end ;
14862: PPOPN 3
14864: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14865: LD_EXP 43
14869: PUSH
14870: LD_EXP 61
14874: AND
14875: PUSH
14876: LD_OWVAR 67
14880: PUSH
14881: LD_INT 4
14883: LESS
14884: AND
14885: IFFALSE 14904
14887: GO 14889
14889: DISABLE
// begin Difficulty := Difficulty + 1 ;
14890: LD_ADDR_OWVAR 67
14894: PUSH
14895: LD_OWVAR 67
14899: PUSH
14900: LD_INT 1
14902: PLUS
14903: ST_TO_ADDR
// end ;
14904: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14905: LD_EXP 43
14909: PUSH
14910: LD_EXP 62
14914: AND
14915: IFFALSE 15018
14917: GO 14919
14919: DISABLE
14920: LD_INT 0
14922: PPUSH
// begin for i := 1 to 5 do
14923: LD_ADDR_VAR 0 1
14927: PUSH
14928: DOUBLE
14929: LD_INT 1
14931: DEC
14932: ST_TO_ADDR
14933: LD_INT 5
14935: PUSH
14936: FOR_TO
14937: IFFALSE 15016
// begin uc_nation := nation_nature ;
14939: LD_ADDR_OWVAR 21
14943: PUSH
14944: LD_INT 0
14946: ST_TO_ADDR
// uc_side := 0 ;
14947: LD_ADDR_OWVAR 20
14951: PUSH
14952: LD_INT 0
14954: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14955: LD_ADDR_OWVAR 29
14959: PUSH
14960: LD_INT 12
14962: PUSH
14963: LD_INT 12
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: ST_TO_ADDR
// hc_agressivity := 20 ;
14970: LD_ADDR_OWVAR 35
14974: PUSH
14975: LD_INT 20
14977: ST_TO_ADDR
// hc_class := class_tiger ;
14978: LD_ADDR_OWVAR 28
14982: PUSH
14983: LD_INT 14
14985: ST_TO_ADDR
// hc_gallery :=  ;
14986: LD_ADDR_OWVAR 33
14990: PUSH
14991: LD_STRING 
14993: ST_TO_ADDR
// hc_name :=  ;
14994: LD_ADDR_OWVAR 26
14998: PUSH
14999: LD_STRING 
15001: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15002: CALL_OW 44
15006: PPUSH
15007: LD_INT 0
15009: PPUSH
15010: CALL_OW 51
// end ;
15014: GO 14936
15016: POP
15017: POP
// end ;
15018: PPOPN 1
15020: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15021: LD_EXP 43
15025: PUSH
15026: LD_EXP 63
15030: AND
15031: IFFALSE 15040
15033: GO 15035
15035: DISABLE
// StreamSibBomb ;
15036: CALL 15041 0 0
15040: END
// export function StreamSibBomb ; var i , x , y ; begin
15041: LD_INT 0
15043: PPUSH
15044: PPUSH
15045: PPUSH
15046: PPUSH
// result := false ;
15047: LD_ADDR_VAR 0 1
15051: PUSH
15052: LD_INT 0
15054: ST_TO_ADDR
// for i := 1 to 16 do
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: DOUBLE
15061: LD_INT 1
15063: DEC
15064: ST_TO_ADDR
15065: LD_INT 16
15067: PUSH
15068: FOR_TO
15069: IFFALSE 15268
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15071: LD_ADDR_VAR 0 3
15075: PUSH
15076: LD_INT 10
15078: PUSH
15079: LD_INT 20
15081: PUSH
15082: LD_INT 30
15084: PUSH
15085: LD_INT 40
15087: PUSH
15088: LD_INT 50
15090: PUSH
15091: LD_INT 60
15093: PUSH
15094: LD_INT 70
15096: PUSH
15097: LD_INT 80
15099: PUSH
15100: LD_INT 90
15102: PUSH
15103: LD_INT 100
15105: PUSH
15106: LD_INT 110
15108: PUSH
15109: LD_INT 120
15111: PUSH
15112: LD_INT 130
15114: PUSH
15115: LD_INT 140
15117: PUSH
15118: LD_INT 150
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 1
15140: PPUSH
15141: LD_INT 15
15143: PPUSH
15144: CALL_OW 12
15148: ARRAY
15149: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15150: LD_ADDR_VAR 0 4
15154: PUSH
15155: LD_INT 10
15157: PUSH
15158: LD_INT 20
15160: PUSH
15161: LD_INT 30
15163: PUSH
15164: LD_INT 40
15166: PUSH
15167: LD_INT 50
15169: PUSH
15170: LD_INT 60
15172: PUSH
15173: LD_INT 70
15175: PUSH
15176: LD_INT 80
15178: PUSH
15179: LD_INT 90
15181: PUSH
15182: LD_INT 100
15184: PUSH
15185: LD_INT 110
15187: PUSH
15188: LD_INT 120
15190: PUSH
15191: LD_INT 130
15193: PUSH
15194: LD_INT 140
15196: PUSH
15197: LD_INT 150
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 1
15219: PPUSH
15220: LD_INT 15
15222: PPUSH
15223: CALL_OW 12
15227: ARRAY
15228: ST_TO_ADDR
// if ValidHex ( x , y ) then
15229: LD_VAR 0 3
15233: PPUSH
15234: LD_VAR 0 4
15238: PPUSH
15239: CALL_OW 488
15243: IFFALSE 15266
// begin result := [ x , y ] ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_VAR 0 3
15254: PUSH
15255: LD_VAR 0 4
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: ST_TO_ADDR
// break ;
15264: GO 15268
// end ; end ;
15266: GO 15068
15268: POP
15269: POP
// if result then
15270: LD_VAR 0 1
15274: IFFALSE 15334
// begin ToLua ( playSibBomb() ) ;
15276: LD_STRING playSibBomb()
15278: PPUSH
15279: CALL_OW 559
// wait ( 0 0$14 ) ;
15283: LD_INT 490
15285: PPUSH
15286: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15290: LD_VAR 0 1
15294: PUSH
15295: LD_INT 1
15297: ARRAY
15298: PPUSH
15299: LD_VAR 0 1
15303: PUSH
15304: LD_INT 2
15306: ARRAY
15307: PPUSH
15308: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15312: LD_VAR 0 1
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: LD_VAR 0 1
15325: PUSH
15326: LD_INT 2
15328: ARRAY
15329: PPUSH
15330: CALL_OW 429
// end ; end ;
15334: LD_VAR 0 1
15338: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15339: LD_EXP 43
15343: PUSH
15344: LD_EXP 65
15348: AND
15349: IFFALSE 15361
15351: GO 15353
15353: DISABLE
// YouLost (  ) ;
15354: LD_STRING 
15356: PPUSH
15357: CALL_OW 104
15361: END
// every 0 0$1 trigger StreamModeActive and sFog do
15362: LD_EXP 43
15366: PUSH
15367: LD_EXP 64
15371: AND
15372: IFFALSE 15386
15374: GO 15376
15376: DISABLE
// FogOff ( your_side ) ;
15377: LD_OWVAR 2
15381: PPUSH
15382: CALL_OW 344
15386: END
// every 0 0$1 trigger StreamModeActive and sSun do
15387: LD_EXP 43
15391: PUSH
15392: LD_EXP 66
15396: AND
15397: IFFALSE 15425
15399: GO 15401
15401: DISABLE
// begin solar_recharge_percent := 0 ;
15402: LD_ADDR_OWVAR 79
15406: PUSH
15407: LD_INT 0
15409: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15410: LD_INT 10500
15412: PPUSH
15413: CALL_OW 67
// solar_recharge_percent := 100 ;
15417: LD_ADDR_OWVAR 79
15421: PUSH
15422: LD_INT 100
15424: ST_TO_ADDR
// end ;
15425: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15426: LD_EXP 43
15430: PUSH
15431: LD_EXP 67
15435: AND
15436: IFFALSE 15675
15438: GO 15440
15440: DISABLE
15441: LD_INT 0
15443: PPUSH
15444: PPUSH
15445: PPUSH
// begin tmp := [ ] ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: EMPTY
15452: ST_TO_ADDR
// for i := 1 to 6 do
15453: LD_ADDR_VAR 0 1
15457: PUSH
15458: DOUBLE
15459: LD_INT 1
15461: DEC
15462: ST_TO_ADDR
15463: LD_INT 6
15465: PUSH
15466: FOR_TO
15467: IFFALSE 15572
// begin uc_nation := nation_nature ;
15469: LD_ADDR_OWVAR 21
15473: PUSH
15474: LD_INT 0
15476: ST_TO_ADDR
// uc_side := 0 ;
15477: LD_ADDR_OWVAR 20
15481: PUSH
15482: LD_INT 0
15484: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15485: LD_ADDR_OWVAR 29
15489: PUSH
15490: LD_INT 12
15492: PUSH
15493: LD_INT 12
15495: PUSH
15496: EMPTY
15497: LIST
15498: LIST
15499: ST_TO_ADDR
// hc_agressivity := 20 ;
15500: LD_ADDR_OWVAR 35
15504: PUSH
15505: LD_INT 20
15507: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15508: LD_ADDR_OWVAR 28
15512: PUSH
15513: LD_INT 17
15515: ST_TO_ADDR
// hc_gallery :=  ;
15516: LD_ADDR_OWVAR 33
15520: PUSH
15521: LD_STRING 
15523: ST_TO_ADDR
// hc_name :=  ;
15524: LD_ADDR_OWVAR 26
15528: PUSH
15529: LD_STRING 
15531: ST_TO_ADDR
// un := CreateHuman ;
15532: LD_ADDR_VAR 0 2
15536: PUSH
15537: CALL_OW 44
15541: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15542: LD_VAR 0 2
15546: PPUSH
15547: LD_INT 1
15549: PPUSH
15550: CALL_OW 51
// tmp := tmp ^ un ;
15554: LD_ADDR_VAR 0 3
15558: PUSH
15559: LD_VAR 0 3
15563: PUSH
15564: LD_VAR 0 2
15568: ADD
15569: ST_TO_ADDR
// end ;
15570: GO 15466
15572: POP
15573: POP
// repeat wait ( 0 0$1 ) ;
15574: LD_INT 35
15576: PPUSH
15577: CALL_OW 67
// for un in tmp do
15581: LD_ADDR_VAR 0 2
15585: PUSH
15586: LD_VAR 0 3
15590: PUSH
15591: FOR_IN
15592: IFFALSE 15666
// begin if IsDead ( un ) then
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 301
15603: IFFALSE 15623
// begin tmp := tmp diff un ;
15605: LD_ADDR_VAR 0 3
15609: PUSH
15610: LD_VAR 0 3
15614: PUSH
15615: LD_VAR 0 2
15619: DIFF
15620: ST_TO_ADDR
// continue ;
15621: GO 15591
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15623: LD_VAR 0 2
15627: PPUSH
15628: LD_INT 3
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 0
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: EMPTY
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: PPUSH
15650: LD_VAR 0 2
15654: PPUSH
15655: CALL_OW 74
15659: PPUSH
15660: CALL_OW 115
// end ;
15664: GO 15591
15666: POP
15667: POP
// until not tmp ;
15668: LD_VAR 0 3
15672: NOT
15673: IFFALSE 15574
// end ;
15675: PPOPN 3
15677: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15678: LD_EXP 43
15682: PUSH
15683: LD_EXP 68
15687: AND
15688: IFFALSE 15742
15690: GO 15692
15692: DISABLE
// begin ToLua ( displayTroll(); ) ;
15693: LD_STRING displayTroll();
15695: PPUSH
15696: CALL_OW 559
// wait ( 3 3$00 ) ;
15700: LD_INT 6300
15702: PPUSH
15703: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15707: LD_STRING hideTroll();
15709: PPUSH
15710: CALL_OW 559
// wait ( 1 1$00 ) ;
15714: LD_INT 2100
15716: PPUSH
15717: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15721: LD_STRING displayTroll();
15723: PPUSH
15724: CALL_OW 559
// wait ( 1 1$00 ) ;
15728: LD_INT 2100
15730: PPUSH
15731: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15735: LD_STRING hideTroll();
15737: PPUSH
15738: CALL_OW 559
// end ;
15742: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15743: LD_EXP 43
15747: PUSH
15748: LD_EXP 69
15752: AND
15753: IFFALSE 15816
15755: GO 15757
15757: DISABLE
15758: LD_INT 0
15760: PPUSH
// begin p := 0 ;
15761: LD_ADDR_VAR 0 1
15765: PUSH
15766: LD_INT 0
15768: ST_TO_ADDR
// repeat game_speed := 1 ;
15769: LD_ADDR_OWVAR 65
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15777: LD_INT 35
15779: PPUSH
15780: CALL_OW 67
// p := p + 1 ;
15784: LD_ADDR_VAR 0 1
15788: PUSH
15789: LD_VAR 0 1
15793: PUSH
15794: LD_INT 1
15796: PLUS
15797: ST_TO_ADDR
// until p >= 60 ;
15798: LD_VAR 0 1
15802: PUSH
15803: LD_INT 60
15805: GREATEREQUAL
15806: IFFALSE 15769
// game_speed := 4 ;
15808: LD_ADDR_OWVAR 65
15812: PUSH
15813: LD_INT 4
15815: ST_TO_ADDR
// end ;
15816: PPOPN 1
15818: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15819: LD_EXP 43
15823: PUSH
15824: LD_EXP 70
15828: AND
15829: IFFALSE 15975
15831: GO 15833
15833: DISABLE
15834: LD_INT 0
15836: PPUSH
15837: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15838: LD_ADDR_VAR 0 1
15842: PUSH
15843: LD_INT 22
15845: PUSH
15846: LD_OWVAR 2
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PUSH
15855: LD_INT 2
15857: PUSH
15858: LD_INT 30
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: PUSH
15868: LD_INT 30
15870: PUSH
15871: LD_INT 1
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: LIST
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PPUSH
15887: CALL_OW 69
15891: ST_TO_ADDR
// if not depot then
15892: LD_VAR 0 1
15896: NOT
15897: IFFALSE 15901
// exit ;
15899: GO 15975
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15901: LD_ADDR_VAR 0 2
15905: PUSH
15906: LD_VAR 0 1
15910: PUSH
15911: LD_INT 1
15913: PPUSH
15914: LD_VAR 0 1
15918: PPUSH
15919: CALL_OW 12
15923: ARRAY
15924: PPUSH
15925: CALL_OW 274
15929: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15930: LD_VAR 0 2
15934: PPUSH
15935: LD_INT 1
15937: PPUSH
15938: LD_INT 0
15940: PPUSH
15941: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15945: LD_VAR 0 2
15949: PPUSH
15950: LD_INT 2
15952: PPUSH
15953: LD_INT 0
15955: PPUSH
15956: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15960: LD_VAR 0 2
15964: PPUSH
15965: LD_INT 3
15967: PPUSH
15968: LD_INT 0
15970: PPUSH
15971: CALL_OW 277
// end ;
15975: PPOPN 2
15977: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15978: LD_EXP 43
15982: PUSH
15983: LD_EXP 71
15987: AND
15988: IFFALSE 16085
15990: GO 15992
15992: DISABLE
15993: LD_INT 0
15995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15996: LD_ADDR_VAR 0 1
16000: PUSH
16001: LD_INT 22
16003: PUSH
16004: LD_OWVAR 2
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 21
16015: PUSH
16016: LD_INT 1
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: LD_INT 3
16025: PUSH
16026: LD_INT 23
16028: PUSH
16029: LD_INT 0
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: LIST
16044: PPUSH
16045: CALL_OW 69
16049: ST_TO_ADDR
// if not tmp then
16050: LD_VAR 0 1
16054: NOT
16055: IFFALSE 16059
// exit ;
16057: GO 16085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16059: LD_VAR 0 1
16063: PUSH
16064: LD_INT 1
16066: PPUSH
16067: LD_VAR 0 1
16071: PPUSH
16072: CALL_OW 12
16076: ARRAY
16077: PPUSH
16078: LD_INT 200
16080: PPUSH
16081: CALL_OW 234
// end ;
16085: PPOPN 1
16087: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16088: LD_EXP 43
16092: PUSH
16093: LD_EXP 72
16097: AND
16098: IFFALSE 16177
16100: GO 16102
16102: DISABLE
16103: LD_INT 0
16105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16106: LD_ADDR_VAR 0 1
16110: PUSH
16111: LD_INT 22
16113: PUSH
16114: LD_OWVAR 2
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PUSH
16123: LD_INT 21
16125: PUSH
16126: LD_INT 2
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: ST_TO_ADDR
// if not tmp then
16142: LD_VAR 0 1
16146: NOT
16147: IFFALSE 16151
// exit ;
16149: GO 16177
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16151: LD_VAR 0 1
16155: PUSH
16156: LD_INT 1
16158: PPUSH
16159: LD_VAR 0 1
16163: PPUSH
16164: CALL_OW 12
16168: ARRAY
16169: PPUSH
16170: LD_INT 60
16172: PPUSH
16173: CALL_OW 234
// end ;
16177: PPOPN 1
16179: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16180: LD_EXP 43
16184: PUSH
16185: LD_EXP 73
16189: AND
16190: IFFALSE 16289
16192: GO 16194
16194: DISABLE
16195: LD_INT 0
16197: PPUSH
16198: PPUSH
// begin enable ;
16199: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_INT 22
16207: PUSH
16208: LD_OWVAR 2
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: PUSH
16217: LD_INT 61
16219: PUSH
16220: EMPTY
16221: LIST
16222: PUSH
16223: LD_INT 33
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: EMPTY
16234: LIST
16235: LIST
16236: LIST
16237: PPUSH
16238: CALL_OW 69
16242: ST_TO_ADDR
// if not tmp then
16243: LD_VAR 0 1
16247: NOT
16248: IFFALSE 16252
// exit ;
16250: GO 16289
// for i in tmp do
16252: LD_ADDR_VAR 0 2
16256: PUSH
16257: LD_VAR 0 1
16261: PUSH
16262: FOR_IN
16263: IFFALSE 16287
// if IsControledBy ( i ) then
16265: LD_VAR 0 2
16269: PPUSH
16270: CALL_OW 312
16274: IFFALSE 16285
// ComUnlink ( i ) ;
16276: LD_VAR 0 2
16280: PPUSH
16281: CALL_OW 136
16285: GO 16262
16287: POP
16288: POP
// end ;
16289: PPOPN 2
16291: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16292: LD_EXP 43
16296: PUSH
16297: LD_EXP 74
16301: AND
16302: IFFALSE 16442
16304: GO 16306
16306: DISABLE
16307: LD_INT 0
16309: PPUSH
16310: PPUSH
// begin ToLua ( displayPowell(); ) ;
16311: LD_STRING displayPowell();
16313: PPUSH
16314: CALL_OW 559
// uc_side := 0 ;
16318: LD_ADDR_OWVAR 20
16322: PUSH
16323: LD_INT 0
16325: ST_TO_ADDR
// uc_nation := 2 ;
16326: LD_ADDR_OWVAR 21
16330: PUSH
16331: LD_INT 2
16333: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16334: LD_ADDR_OWVAR 37
16338: PUSH
16339: LD_INT 14
16341: ST_TO_ADDR
// vc_engine := engine_siberite ;
16342: LD_ADDR_OWVAR 39
16346: PUSH
16347: LD_INT 3
16349: ST_TO_ADDR
// vc_control := control_apeman ;
16350: LD_ADDR_OWVAR 38
16354: PUSH
16355: LD_INT 5
16357: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16358: LD_ADDR_OWVAR 40
16362: PUSH
16363: LD_INT 29
16365: ST_TO_ADDR
// un := CreateVehicle ;
16366: LD_ADDR_VAR 0 2
16370: PUSH
16371: CALL_OW 45
16375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16376: LD_VAR 0 2
16380: PPUSH
16381: LD_INT 1
16383: PPUSH
16384: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16388: LD_INT 35
16390: PPUSH
16391: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16395: LD_VAR 0 2
16399: PPUSH
16400: LD_INT 22
16402: PUSH
16403: LD_OWVAR 2
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: PPUSH
16417: LD_VAR 0 2
16421: PPUSH
16422: CALL_OW 74
16426: PPUSH
16427: CALL_OW 115
// until IsDead ( un ) ;
16431: LD_VAR 0 2
16435: PPUSH
16436: CALL_OW 301
16440: IFFALSE 16388
// end ;
16442: PPOPN 2
16444: END
// every 0 0$1 trigger StreamModeActive and sStu do
16445: LD_EXP 43
16449: PUSH
16450: LD_EXP 82
16454: AND
16455: IFFALSE 16471
16457: GO 16459
16459: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16460: LD_STRING displayStucuk();
16462: PPUSH
16463: CALL_OW 559
// ResetFog ;
16467: CALL_OW 335
// end ;
16471: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16472: LD_EXP 43
16476: PUSH
16477: LD_EXP 75
16481: AND
16482: IFFALSE 16623
16484: GO 16486
16486: DISABLE
16487: LD_INT 0
16489: PPUSH
16490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16491: LD_ADDR_VAR 0 2
16495: PUSH
16496: LD_INT 22
16498: PUSH
16499: LD_OWVAR 2
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 1
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL_OW 69
16526: ST_TO_ADDR
// if not tmp then
16527: LD_VAR 0 2
16531: NOT
16532: IFFALSE 16536
// exit ;
16534: GO 16623
// un := tmp [ rand ( 1 , tmp ) ] ;
16536: LD_ADDR_VAR 0 1
16540: PUSH
16541: LD_VAR 0 2
16545: PUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_VAR 0 2
16553: PPUSH
16554: CALL_OW 12
16558: ARRAY
16559: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16560: LD_VAR 0 1
16564: PPUSH
16565: LD_INT 0
16567: PPUSH
16568: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16572: LD_VAR 0 1
16576: PPUSH
16577: LD_OWVAR 3
16581: PUSH
16582: LD_VAR 0 1
16586: DIFF
16587: PPUSH
16588: LD_VAR 0 1
16592: PPUSH
16593: CALL_OW 74
16597: PPUSH
16598: CALL_OW 115
// wait ( 0 0$20 ) ;
16602: LD_INT 700
16604: PPUSH
16605: CALL_OW 67
// SetSide ( un , your_side ) ;
16609: LD_VAR 0 1
16613: PPUSH
16614: LD_OWVAR 2
16618: PPUSH
16619: CALL_OW 235
// end ;
16623: PPOPN 2
16625: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16626: LD_EXP 43
16630: PUSH
16631: LD_EXP 76
16635: AND
16636: IFFALSE 16742
16638: GO 16640
16640: DISABLE
16641: LD_INT 0
16643: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16644: LD_ADDR_VAR 0 1
16648: PUSH
16649: LD_INT 22
16651: PUSH
16652: LD_OWVAR 2
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: LD_INT 2
16663: PUSH
16664: LD_INT 30
16666: PUSH
16667: LD_INT 0
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 30
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: EMPTY
16690: LIST
16691: LIST
16692: PPUSH
16693: CALL_OW 69
16697: ST_TO_ADDR
// if not depot then
16698: LD_VAR 0 1
16702: NOT
16703: IFFALSE 16707
// exit ;
16705: GO 16742
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16707: LD_VAR 0 1
16711: PUSH
16712: LD_INT 1
16714: ARRAY
16715: PPUSH
16716: CALL_OW 250
16720: PPUSH
16721: LD_VAR 0 1
16725: PUSH
16726: LD_INT 1
16728: ARRAY
16729: PPUSH
16730: CALL_OW 251
16734: PPUSH
16735: LD_INT 70
16737: PPUSH
16738: CALL_OW 495
// end ;
16742: PPOPN 1
16744: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16745: LD_EXP 43
16749: PUSH
16750: LD_EXP 77
16754: AND
16755: IFFALSE 16966
16757: GO 16759
16759: DISABLE
16760: LD_INT 0
16762: PPUSH
16763: PPUSH
16764: PPUSH
16765: PPUSH
16766: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16767: LD_ADDR_VAR 0 5
16771: PUSH
16772: LD_INT 22
16774: PUSH
16775: LD_OWVAR 2
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: PPUSH
16798: CALL_OW 69
16802: ST_TO_ADDR
// if not tmp then
16803: LD_VAR 0 5
16807: NOT
16808: IFFALSE 16812
// exit ;
16810: GO 16966
// for i in tmp do
16812: LD_ADDR_VAR 0 1
16816: PUSH
16817: LD_VAR 0 5
16821: PUSH
16822: FOR_IN
16823: IFFALSE 16964
// begin d := rand ( 0 , 5 ) ;
16825: LD_ADDR_VAR 0 4
16829: PUSH
16830: LD_INT 0
16832: PPUSH
16833: LD_INT 5
16835: PPUSH
16836: CALL_OW 12
16840: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16841: LD_ADDR_VAR 0 2
16845: PUSH
16846: LD_VAR 0 1
16850: PPUSH
16851: CALL_OW 250
16855: PPUSH
16856: LD_VAR 0 4
16860: PPUSH
16861: LD_INT 3
16863: PPUSH
16864: LD_INT 12
16866: PPUSH
16867: CALL_OW 12
16871: PPUSH
16872: CALL_OW 272
16876: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16877: LD_ADDR_VAR 0 3
16881: PUSH
16882: LD_VAR 0 1
16886: PPUSH
16887: CALL_OW 251
16891: PPUSH
16892: LD_VAR 0 4
16896: PPUSH
16897: LD_INT 3
16899: PPUSH
16900: LD_INT 12
16902: PPUSH
16903: CALL_OW 12
16907: PPUSH
16908: CALL_OW 273
16912: ST_TO_ADDR
// if ValidHex ( x , y ) then
16913: LD_VAR 0 2
16917: PPUSH
16918: LD_VAR 0 3
16922: PPUSH
16923: CALL_OW 488
16927: IFFALSE 16962
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16929: LD_VAR 0 1
16933: PPUSH
16934: LD_VAR 0 2
16938: PPUSH
16939: LD_VAR 0 3
16943: PPUSH
16944: LD_INT 3
16946: PPUSH
16947: LD_INT 6
16949: PPUSH
16950: CALL_OW 12
16954: PPUSH
16955: LD_INT 1
16957: PPUSH
16958: CALL_OW 483
// end ;
16962: GO 16822
16964: POP
16965: POP
// end ;
16966: PPOPN 5
16968: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16969: LD_EXP 43
16973: PUSH
16974: LD_EXP 78
16978: AND
16979: IFFALSE 17073
16981: GO 16983
16983: DISABLE
16984: LD_INT 0
16986: PPUSH
16987: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16988: LD_ADDR_VAR 0 2
16992: PUSH
16993: LD_INT 22
16995: PUSH
16996: LD_OWVAR 2
17000: PUSH
17001: EMPTY
17002: LIST
17003: LIST
17004: PUSH
17005: LD_INT 32
17007: PUSH
17008: LD_INT 1
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PUSH
17015: LD_INT 21
17017: PUSH
17018: LD_INT 2
17020: PUSH
17021: EMPTY
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: LIST
17029: PPUSH
17030: CALL_OW 69
17034: ST_TO_ADDR
// if not tmp then
17035: LD_VAR 0 2
17039: NOT
17040: IFFALSE 17044
// exit ;
17042: GO 17073
// for i in tmp do
17044: LD_ADDR_VAR 0 1
17048: PUSH
17049: LD_VAR 0 2
17053: PUSH
17054: FOR_IN
17055: IFFALSE 17071
// SetFuel ( i , 0 ) ;
17057: LD_VAR 0 1
17061: PPUSH
17062: LD_INT 0
17064: PPUSH
17065: CALL_OW 240
17069: GO 17054
17071: POP
17072: POP
// end ;
17073: PPOPN 2
17075: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17076: LD_EXP 43
17080: PUSH
17081: LD_EXP 79
17085: AND
17086: IFFALSE 17152
17088: GO 17090
17090: DISABLE
17091: LD_INT 0
17093: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17094: LD_ADDR_VAR 0 1
17098: PUSH
17099: LD_INT 22
17101: PUSH
17102: LD_OWVAR 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 30
17113: PUSH
17114: LD_INT 29
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PPUSH
17125: CALL_OW 69
17129: ST_TO_ADDR
// if not tmp then
17130: LD_VAR 0 1
17134: NOT
17135: IFFALSE 17139
// exit ;
17137: GO 17152
// DestroyUnit ( tmp [ 1 ] ) ;
17139: LD_VAR 0 1
17143: PUSH
17144: LD_INT 1
17146: ARRAY
17147: PPUSH
17148: CALL_OW 65
// end ;
17152: PPOPN 1
17154: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17155: LD_EXP 43
17159: PUSH
17160: LD_EXP 81
17164: AND
17165: IFFALSE 17294
17167: GO 17169
17169: DISABLE
17170: LD_INT 0
17172: PPUSH
// begin uc_side := 0 ;
17173: LD_ADDR_OWVAR 20
17177: PUSH
17178: LD_INT 0
17180: ST_TO_ADDR
// uc_nation := nation_arabian ;
17181: LD_ADDR_OWVAR 21
17185: PUSH
17186: LD_INT 2
17188: ST_TO_ADDR
// hc_gallery :=  ;
17189: LD_ADDR_OWVAR 33
17193: PUSH
17194: LD_STRING 
17196: ST_TO_ADDR
// hc_name :=  ;
17197: LD_ADDR_OWVAR 26
17201: PUSH
17202: LD_STRING 
17204: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17205: LD_INT 1
17207: PPUSH
17208: LD_INT 11
17210: PPUSH
17211: LD_INT 10
17213: PPUSH
17214: CALL_OW 380
// un := CreateHuman ;
17218: LD_ADDR_VAR 0 1
17222: PUSH
17223: CALL_OW 44
17227: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17228: LD_VAR 0 1
17232: PPUSH
17233: LD_INT 1
17235: PPUSH
17236: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17240: LD_INT 35
17242: PPUSH
17243: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17247: LD_VAR 0 1
17251: PPUSH
17252: LD_INT 22
17254: PUSH
17255: LD_OWVAR 2
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PPUSH
17264: CALL_OW 69
17268: PPUSH
17269: LD_VAR 0 1
17273: PPUSH
17274: CALL_OW 74
17278: PPUSH
17279: CALL_OW 115
// until IsDead ( un ) ;
17283: LD_VAR 0 1
17287: PPUSH
17288: CALL_OW 301
17292: IFFALSE 17240
// end ;
17294: PPOPN 1
17296: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17297: LD_EXP 43
17301: PUSH
17302: LD_EXP 83
17306: AND
17307: IFFALSE 17319
17309: GO 17311
17311: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17312: LD_STRING earthquake(getX(game), 0, 32)
17314: PPUSH
17315: CALL_OW 559
17319: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17320: LD_EXP 43
17324: PUSH
17325: LD_EXP 84
17329: AND
17330: IFFALSE 17421
17332: GO 17334
17334: DISABLE
17335: LD_INT 0
17337: PPUSH
// begin enable ;
17338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17339: LD_ADDR_VAR 0 1
17343: PUSH
17344: LD_INT 22
17346: PUSH
17347: LD_OWVAR 2
17351: PUSH
17352: EMPTY
17353: LIST
17354: LIST
17355: PUSH
17356: LD_INT 21
17358: PUSH
17359: LD_INT 2
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 33
17368: PUSH
17369: LD_INT 3
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: LIST
17380: PPUSH
17381: CALL_OW 69
17385: ST_TO_ADDR
// if not tmp then
17386: LD_VAR 0 1
17390: NOT
17391: IFFALSE 17395
// exit ;
17393: GO 17421
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17395: LD_VAR 0 1
17399: PUSH
17400: LD_INT 1
17402: PPUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 12
17412: ARRAY
17413: PPUSH
17414: LD_INT 1
17416: PPUSH
17417: CALL_OW 234
// end ;
17421: PPOPN 1
17423: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17424: LD_EXP 43
17428: PUSH
17429: LD_EXP 85
17433: AND
17434: IFFALSE 17575
17436: GO 17438
17438: DISABLE
17439: LD_INT 0
17441: PPUSH
17442: PPUSH
17443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17444: LD_ADDR_VAR 0 3
17448: PUSH
17449: LD_INT 22
17451: PUSH
17452: LD_OWVAR 2
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 25
17463: PUSH
17464: LD_INT 1
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 69
17479: ST_TO_ADDR
// if not tmp then
17480: LD_VAR 0 3
17484: NOT
17485: IFFALSE 17489
// exit ;
17487: GO 17575
// un := tmp [ rand ( 1 , tmp ) ] ;
17489: LD_ADDR_VAR 0 2
17493: PUSH
17494: LD_VAR 0 3
17498: PUSH
17499: LD_INT 1
17501: PPUSH
17502: LD_VAR 0 3
17506: PPUSH
17507: CALL_OW 12
17511: ARRAY
17512: ST_TO_ADDR
// if Crawls ( un ) then
17513: LD_VAR 0 2
17517: PPUSH
17518: CALL_OW 318
17522: IFFALSE 17533
// ComWalk ( un ) ;
17524: LD_VAR 0 2
17528: PPUSH
17529: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17533: LD_VAR 0 2
17537: PPUSH
17538: LD_INT 9
17540: PPUSH
17541: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17545: LD_INT 28
17547: PPUSH
17548: LD_OWVAR 2
17552: PPUSH
17553: LD_INT 2
17555: PPUSH
17556: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17560: LD_INT 29
17562: PPUSH
17563: LD_OWVAR 2
17567: PPUSH
17568: LD_INT 2
17570: PPUSH
17571: CALL_OW 322
// end ;
17575: PPOPN 3
17577: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17578: LD_EXP 43
17582: PUSH
17583: LD_EXP 86
17587: AND
17588: IFFALSE 17699
17590: GO 17592
17592: DISABLE
17593: LD_INT 0
17595: PPUSH
17596: PPUSH
17597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17598: LD_ADDR_VAR 0 3
17602: PUSH
17603: LD_INT 22
17605: PUSH
17606: LD_OWVAR 2
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 25
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PPUSH
17629: CALL_OW 69
17633: ST_TO_ADDR
// if not tmp then
17634: LD_VAR 0 3
17638: NOT
17639: IFFALSE 17643
// exit ;
17641: GO 17699
// un := tmp [ rand ( 1 , tmp ) ] ;
17643: LD_ADDR_VAR 0 2
17647: PUSH
17648: LD_VAR 0 3
17652: PUSH
17653: LD_INT 1
17655: PPUSH
17656: LD_VAR 0 3
17660: PPUSH
17661: CALL_OW 12
17665: ARRAY
17666: ST_TO_ADDR
// if Crawls ( un ) then
17667: LD_VAR 0 2
17671: PPUSH
17672: CALL_OW 318
17676: IFFALSE 17687
// ComWalk ( un ) ;
17678: LD_VAR 0 2
17682: PPUSH
17683: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17687: LD_VAR 0 2
17691: PPUSH
17692: LD_INT 8
17694: PPUSH
17695: CALL_OW 336
// end ;
17699: PPOPN 3
17701: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17702: LD_EXP 43
17706: PUSH
17707: LD_EXP 87
17711: AND
17712: IFFALSE 17856
17714: GO 17716
17716: DISABLE
17717: LD_INT 0
17719: PPUSH
17720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17721: LD_ADDR_VAR 0 2
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_OWVAR 2
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 21
17740: PUSH
17741: LD_INT 2
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 2
17750: PUSH
17751: LD_INT 34
17753: PUSH
17754: LD_INT 12
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 34
17763: PUSH
17764: LD_INT 51
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 34
17773: PUSH
17774: LD_INT 32
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: PPUSH
17792: CALL_OW 69
17796: ST_TO_ADDR
// if not tmp then
17797: LD_VAR 0 2
17801: NOT
17802: IFFALSE 17806
// exit ;
17804: GO 17856
// for i in tmp do
17806: LD_ADDR_VAR 0 1
17810: PUSH
17811: LD_VAR 0 2
17815: PUSH
17816: FOR_IN
17817: IFFALSE 17854
// if GetCargo ( i , mat_artifact ) = 0 then
17819: LD_VAR 0 1
17823: PPUSH
17824: LD_INT 4
17826: PPUSH
17827: CALL_OW 289
17831: PUSH
17832: LD_INT 0
17834: EQUAL
17835: IFFALSE 17852
// SetCargo ( i , mat_siberit , 100 ) ;
17837: LD_VAR 0 1
17841: PPUSH
17842: LD_INT 3
17844: PPUSH
17845: LD_INT 100
17847: PPUSH
17848: CALL_OW 290
17852: GO 17816
17854: POP
17855: POP
// end ;
17856: PPOPN 2
17858: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17859: LD_EXP 43
17863: PUSH
17864: LD_EXP 88
17868: AND
17869: IFFALSE 18052
17871: GO 17873
17873: DISABLE
17874: LD_INT 0
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17878: LD_ADDR_VAR 0 2
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: ST_TO_ADDR
// if not tmp then
17900: LD_VAR 0 2
17904: NOT
17905: IFFALSE 17909
// exit ;
17907: GO 18052
// for i := 1 to 2 do
17909: LD_ADDR_VAR 0 1
17913: PUSH
17914: DOUBLE
17915: LD_INT 1
17917: DEC
17918: ST_TO_ADDR
17919: LD_INT 2
17921: PUSH
17922: FOR_TO
17923: IFFALSE 18050
// begin uc_side := your_side ;
17925: LD_ADDR_OWVAR 20
17929: PUSH
17930: LD_OWVAR 2
17934: ST_TO_ADDR
// uc_nation := nation_american ;
17935: LD_ADDR_OWVAR 21
17939: PUSH
17940: LD_INT 1
17942: ST_TO_ADDR
// vc_chassis := us_morphling ;
17943: LD_ADDR_OWVAR 37
17947: PUSH
17948: LD_INT 5
17950: ST_TO_ADDR
// vc_engine := engine_siberite ;
17951: LD_ADDR_OWVAR 39
17955: PUSH
17956: LD_INT 3
17958: ST_TO_ADDR
// vc_control := control_computer ;
17959: LD_ADDR_OWVAR 38
17963: PUSH
17964: LD_INT 3
17966: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17967: LD_ADDR_OWVAR 40
17971: PUSH
17972: LD_INT 10
17974: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17975: LD_VAR 0 2
17979: PUSH
17980: LD_INT 1
17982: ARRAY
17983: PPUSH
17984: CALL_OW 310
17988: NOT
17989: IFFALSE 18036
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17991: CALL_OW 45
17995: PPUSH
17996: LD_VAR 0 2
18000: PUSH
18001: LD_INT 1
18003: ARRAY
18004: PPUSH
18005: CALL_OW 250
18009: PPUSH
18010: LD_VAR 0 2
18014: PUSH
18015: LD_INT 1
18017: ARRAY
18018: PPUSH
18019: CALL_OW 251
18023: PPUSH
18024: LD_INT 12
18026: PPUSH
18027: LD_INT 1
18029: PPUSH
18030: CALL_OW 50
18034: GO 18048
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18036: CALL_OW 45
18040: PPUSH
18041: LD_INT 1
18043: PPUSH
18044: CALL_OW 51
// end ;
18048: GO 17922
18050: POP
18051: POP
// end ;
18052: PPOPN 2
18054: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18055: LD_EXP 43
18059: PUSH
18060: LD_EXP 89
18064: AND
18065: IFFALSE 18287
18067: GO 18069
18069: DISABLE
18070: LD_INT 0
18072: PPUSH
18073: PPUSH
18074: PPUSH
18075: PPUSH
18076: PPUSH
18077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18078: LD_ADDR_VAR 0 6
18082: PUSH
18083: LD_INT 22
18085: PUSH
18086: LD_OWVAR 2
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 3
18107: PUSH
18108: LD_INT 23
18110: PUSH
18111: LD_INT 0
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if not tmp then
18132: LD_VAR 0 6
18136: NOT
18137: IFFALSE 18141
// exit ;
18139: GO 18287
// s1 := rand ( 1 , 4 ) ;
18141: LD_ADDR_VAR 0 2
18145: PUSH
18146: LD_INT 1
18148: PPUSH
18149: LD_INT 4
18151: PPUSH
18152: CALL_OW 12
18156: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18157: LD_ADDR_VAR 0 4
18161: PUSH
18162: LD_VAR 0 6
18166: PUSH
18167: LD_INT 1
18169: ARRAY
18170: PPUSH
18171: LD_VAR 0 2
18175: PPUSH
18176: CALL_OW 259
18180: ST_TO_ADDR
// if s1 = 1 then
18181: LD_VAR 0 2
18185: PUSH
18186: LD_INT 1
18188: EQUAL
18189: IFFALSE 18209
// s2 := rand ( 2 , 4 ) else
18191: LD_ADDR_VAR 0 3
18195: PUSH
18196: LD_INT 2
18198: PPUSH
18199: LD_INT 4
18201: PPUSH
18202: CALL_OW 12
18206: ST_TO_ADDR
18207: GO 18217
// s2 := 1 ;
18209: LD_ADDR_VAR 0 3
18213: PUSH
18214: LD_INT 1
18216: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18217: LD_ADDR_VAR 0 5
18221: PUSH
18222: LD_VAR 0 6
18226: PUSH
18227: LD_INT 1
18229: ARRAY
18230: PPUSH
18231: LD_VAR 0 3
18235: PPUSH
18236: CALL_OW 259
18240: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18241: LD_VAR 0 6
18245: PUSH
18246: LD_INT 1
18248: ARRAY
18249: PPUSH
18250: LD_VAR 0 2
18254: PPUSH
18255: LD_VAR 0 5
18259: PPUSH
18260: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18264: LD_VAR 0 6
18268: PUSH
18269: LD_INT 1
18271: ARRAY
18272: PPUSH
18273: LD_VAR 0 3
18277: PPUSH
18278: LD_VAR 0 4
18282: PPUSH
18283: CALL_OW 237
// end ;
18287: PPOPN 6
18289: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18290: LD_EXP 43
18294: PUSH
18295: LD_EXP 90
18299: AND
18300: IFFALSE 18379
18302: GO 18304
18304: DISABLE
18305: LD_INT 0
18307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18308: LD_ADDR_VAR 0 1
18312: PUSH
18313: LD_INT 22
18315: PUSH
18316: LD_OWVAR 2
18320: PUSH
18321: EMPTY
18322: LIST
18323: LIST
18324: PUSH
18325: LD_INT 30
18327: PUSH
18328: LD_INT 3
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: EMPTY
18336: LIST
18337: LIST
18338: PPUSH
18339: CALL_OW 69
18343: ST_TO_ADDR
// if not tmp then
18344: LD_VAR 0 1
18348: NOT
18349: IFFALSE 18353
// exit ;
18351: GO 18379
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18353: LD_VAR 0 1
18357: PUSH
18358: LD_INT 1
18360: PPUSH
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 12
18370: ARRAY
18371: PPUSH
18372: LD_INT 1
18374: PPUSH
18375: CALL_OW 234
// end ;
18379: PPOPN 1
18381: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18382: LD_EXP 43
18386: PUSH
18387: LD_EXP 91
18391: AND
18392: IFFALSE 18504
18394: GO 18396
18396: DISABLE
18397: LD_INT 0
18399: PPUSH
18400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18401: LD_ADDR_VAR 0 2
18405: PUSH
18406: LD_INT 22
18408: PUSH
18409: LD_OWVAR 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 30
18423: PUSH
18424: LD_INT 27
18426: PUSH
18427: EMPTY
18428: LIST
18429: LIST
18430: PUSH
18431: LD_INT 30
18433: PUSH
18434: LD_INT 26
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 28
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PPUSH
18461: CALL_OW 69
18465: ST_TO_ADDR
// if not tmp then
18466: LD_VAR 0 2
18470: NOT
18471: IFFALSE 18475
// exit ;
18473: GO 18504
// for i in tmp do
18475: LD_ADDR_VAR 0 1
18479: PUSH
18480: LD_VAR 0 2
18484: PUSH
18485: FOR_IN
18486: IFFALSE 18502
// SetLives ( i , 1 ) ;
18488: LD_VAR 0 1
18492: PPUSH
18493: LD_INT 1
18495: PPUSH
18496: CALL_OW 234
18500: GO 18485
18502: POP
18503: POP
// end ;
18504: PPOPN 2
18506: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18507: LD_EXP 43
18511: PUSH
18512: LD_EXP 92
18516: AND
18517: IFFALSE 18804
18519: GO 18521
18521: DISABLE
18522: LD_INT 0
18524: PPUSH
18525: PPUSH
18526: PPUSH
// begin i := rand ( 1 , 7 ) ;
18527: LD_ADDR_VAR 0 1
18531: PUSH
18532: LD_INT 1
18534: PPUSH
18535: LD_INT 7
18537: PPUSH
18538: CALL_OW 12
18542: ST_TO_ADDR
// case i of 1 :
18543: LD_VAR 0 1
18547: PUSH
18548: LD_INT 1
18550: DOUBLE
18551: EQUAL
18552: IFTRUE 18556
18554: GO 18566
18556: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18557: LD_STRING earthquake(getX(game), 0, 32)
18559: PPUSH
18560: CALL_OW 559
18564: GO 18804
18566: LD_INT 2
18568: DOUBLE
18569: EQUAL
18570: IFTRUE 18574
18572: GO 18588
18574: POP
// begin ToLua ( displayStucuk(); ) ;
18575: LD_STRING displayStucuk();
18577: PPUSH
18578: CALL_OW 559
// ResetFog ;
18582: CALL_OW 335
// end ; 3 :
18586: GO 18804
18588: LD_INT 3
18590: DOUBLE
18591: EQUAL
18592: IFTRUE 18596
18594: GO 18700
18596: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18597: LD_ADDR_VAR 0 2
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 25
18616: PUSH
18617: LD_INT 1
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: ST_TO_ADDR
// if not tmp then
18633: LD_VAR 0 2
18637: NOT
18638: IFFALSE 18642
// exit ;
18640: GO 18804
// un := tmp [ rand ( 1 , tmp ) ] ;
18642: LD_ADDR_VAR 0 3
18646: PUSH
18647: LD_VAR 0 2
18651: PUSH
18652: LD_INT 1
18654: PPUSH
18655: LD_VAR 0 2
18659: PPUSH
18660: CALL_OW 12
18664: ARRAY
18665: ST_TO_ADDR
// if Crawls ( un ) then
18666: LD_VAR 0 3
18670: PPUSH
18671: CALL_OW 318
18675: IFFALSE 18686
// ComWalk ( un ) ;
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18686: LD_VAR 0 3
18690: PPUSH
18691: LD_INT 8
18693: PPUSH
18694: CALL_OW 336
// end ; 4 :
18698: GO 18804
18700: LD_INT 4
18702: DOUBLE
18703: EQUAL
18704: IFTRUE 18708
18706: GO 18782
18708: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18709: LD_ADDR_VAR 0 2
18713: PUSH
18714: LD_INT 22
18716: PUSH
18717: LD_OWVAR 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 30
18728: PUSH
18729: LD_INT 29
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PPUSH
18740: CALL_OW 69
18744: ST_TO_ADDR
// if not tmp then
18745: LD_VAR 0 2
18749: NOT
18750: IFFALSE 18754
// exit ;
18752: GO 18804
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18754: LD_VAR 0 2
18758: PUSH
18759: LD_INT 1
18761: ARRAY
18762: PPUSH
18763: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18767: LD_VAR 0 2
18771: PUSH
18772: LD_INT 1
18774: ARRAY
18775: PPUSH
18776: CALL_OW 65
// end ; 5 .. 7 :
18780: GO 18804
18782: LD_INT 5
18784: DOUBLE
18785: GREATEREQUAL
18786: IFFALSE 18794
18788: LD_INT 7
18790: DOUBLE
18791: LESSEQUAL
18792: IFTRUE 18796
18794: GO 18803
18796: POP
// StreamSibBomb ; end ;
18797: CALL 15041 0 0
18801: GO 18804
18803: POP
// end ;
18804: PPOPN 3
18806: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18807: LD_EXP 43
18811: PUSH
18812: LD_EXP 93
18816: AND
18817: IFFALSE 18973
18819: GO 18821
18821: DISABLE
18822: LD_INT 0
18824: PPUSH
18825: PPUSH
18826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18827: LD_ADDR_VAR 0 2
18831: PUSH
18832: LD_INT 81
18834: PUSH
18835: LD_OWVAR 2
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 2
18846: PUSH
18847: LD_INT 21
18849: PUSH
18850: LD_INT 1
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 21
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: EMPTY
18868: LIST
18869: LIST
18870: LIST
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PPUSH
18876: CALL_OW 69
18880: ST_TO_ADDR
// if not tmp then
18881: LD_VAR 0 2
18885: NOT
18886: IFFALSE 18890
// exit ;
18888: GO 18973
// p := 0 ;
18890: LD_ADDR_VAR 0 3
18894: PUSH
18895: LD_INT 0
18897: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18898: LD_INT 35
18900: PPUSH
18901: CALL_OW 67
// p := p + 1 ;
18905: LD_ADDR_VAR 0 3
18909: PUSH
18910: LD_VAR 0 3
18914: PUSH
18915: LD_INT 1
18917: PLUS
18918: ST_TO_ADDR
// for i in tmp do
18919: LD_ADDR_VAR 0 1
18923: PUSH
18924: LD_VAR 0 2
18928: PUSH
18929: FOR_IN
18930: IFFALSE 18961
// if GetLives ( i ) < 1000 then
18932: LD_VAR 0 1
18936: PPUSH
18937: CALL_OW 256
18941: PUSH
18942: LD_INT 1000
18944: LESS
18945: IFFALSE 18959
// SetLives ( i , 1000 ) ;
18947: LD_VAR 0 1
18951: PPUSH
18952: LD_INT 1000
18954: PPUSH
18955: CALL_OW 234
18959: GO 18929
18961: POP
18962: POP
// until p > 20 ;
18963: LD_VAR 0 3
18967: PUSH
18968: LD_INT 20
18970: GREATER
18971: IFFALSE 18898
// end ;
18973: PPOPN 3
18975: END
// every 0 0$1 trigger StreamModeActive and sTime do
18976: LD_EXP 43
18980: PUSH
18981: LD_EXP 94
18985: AND
18986: IFFALSE 19021
18988: GO 18990
18990: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18991: LD_INT 28
18993: PPUSH
18994: LD_OWVAR 2
18998: PPUSH
18999: LD_INT 2
19001: PPUSH
19002: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19006: LD_INT 30
19008: PPUSH
19009: LD_OWVAR 2
19013: PPUSH
19014: LD_INT 2
19016: PPUSH
19017: CALL_OW 322
// end ;
19021: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19022: LD_EXP 43
19026: PUSH
19027: LD_EXP 95
19031: AND
19032: IFFALSE 19153
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19041: LD_ADDR_VAR 0 2
19045: PUSH
19046: LD_INT 22
19048: PUSH
19049: LD_OWVAR 2
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: LD_INT 21
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: LD_INT 3
19070: PUSH
19071: LD_INT 23
19073: PUSH
19074: LD_INT 0
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: PPUSH
19090: CALL_OW 69
19094: ST_TO_ADDR
// if not tmp then
19095: LD_VAR 0 2
19099: NOT
19100: IFFALSE 19104
// exit ;
19102: GO 19153
// for i in tmp do
19104: LD_ADDR_VAR 0 1
19108: PUSH
19109: LD_VAR 0 2
19113: PUSH
19114: FOR_IN
19115: IFFALSE 19151
// begin if Crawls ( i ) then
19117: LD_VAR 0 1
19121: PPUSH
19122: CALL_OW 318
19126: IFFALSE 19137
// ComWalk ( i ) ;
19128: LD_VAR 0 1
19132: PPUSH
19133: CALL_OW 138
// SetClass ( i , 2 ) ;
19137: LD_VAR 0 1
19141: PPUSH
19142: LD_INT 2
19144: PPUSH
19145: CALL_OW 336
// end ;
19149: GO 19114
19151: POP
19152: POP
// end ;
19153: PPOPN 2
19155: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19156: LD_EXP 43
19160: PUSH
19161: LD_EXP 96
19165: AND
19166: IFFALSE 19454
19168: GO 19170
19170: DISABLE
19171: LD_INT 0
19173: PPUSH
19174: PPUSH
19175: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19176: LD_OWVAR 2
19180: PPUSH
19181: LD_INT 9
19183: PPUSH
19184: LD_INT 1
19186: PPUSH
19187: LD_INT 1
19189: PPUSH
19190: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19194: LD_INT 9
19196: PPUSH
19197: LD_OWVAR 2
19201: PPUSH
19202: CALL_OW 343
// uc_side := 9 ;
19206: LD_ADDR_OWVAR 20
19210: PUSH
19211: LD_INT 9
19213: ST_TO_ADDR
// uc_nation := 2 ;
19214: LD_ADDR_OWVAR 21
19218: PUSH
19219: LD_INT 2
19221: ST_TO_ADDR
// hc_name := Dark Warrior ;
19222: LD_ADDR_OWVAR 26
19226: PUSH
19227: LD_STRING Dark Warrior
19229: ST_TO_ADDR
// hc_gallery :=  ;
19230: LD_ADDR_OWVAR 33
19234: PUSH
19235: LD_STRING 
19237: ST_TO_ADDR
// hc_noskilllimit := true ;
19238: LD_ADDR_OWVAR 76
19242: PUSH
19243: LD_INT 1
19245: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19246: LD_ADDR_OWVAR 31
19250: PUSH
19251: LD_INT 30
19253: PUSH
19254: LD_INT 30
19256: PUSH
19257: LD_INT 30
19259: PUSH
19260: LD_INT 30
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: ST_TO_ADDR
// un := CreateHuman ;
19269: LD_ADDR_VAR 0 3
19273: PUSH
19274: CALL_OW 44
19278: ST_TO_ADDR
// hc_noskilllimit := false ;
19279: LD_ADDR_OWVAR 76
19283: PUSH
19284: LD_INT 0
19286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19287: LD_VAR 0 3
19291: PPUSH
19292: LD_INT 1
19294: PPUSH
19295: CALL_OW 51
// ToLua ( playRanger() ) ;
19299: LD_STRING playRanger()
19301: PPUSH
19302: CALL_OW 559
// p := 0 ;
19306: LD_ADDR_VAR 0 2
19310: PUSH
19311: LD_INT 0
19313: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19314: LD_INT 35
19316: PPUSH
19317: CALL_OW 67
// p := p + 1 ;
19321: LD_ADDR_VAR 0 2
19325: PUSH
19326: LD_VAR 0 2
19330: PUSH
19331: LD_INT 1
19333: PLUS
19334: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19335: LD_VAR 0 3
19339: PPUSH
19340: CALL_OW 256
19344: PUSH
19345: LD_INT 1000
19347: LESS
19348: IFFALSE 19362
// SetLives ( un , 1000 ) ;
19350: LD_VAR 0 3
19354: PPUSH
19355: LD_INT 1000
19357: PPUSH
19358: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19362: LD_VAR 0 3
19366: PPUSH
19367: LD_INT 81
19369: PUSH
19370: LD_OWVAR 2
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: LD_INT 91
19381: PUSH
19382: LD_VAR 0 3
19386: PUSH
19387: LD_INT 30
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PPUSH
19399: CALL_OW 69
19403: PPUSH
19404: LD_VAR 0 3
19408: PPUSH
19409: CALL_OW 74
19413: PPUSH
19414: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19418: LD_VAR 0 2
19422: PUSH
19423: LD_INT 80
19425: GREATER
19426: PUSH
19427: LD_VAR 0 3
19431: PPUSH
19432: CALL_OW 301
19436: OR
19437: IFFALSE 19314
// if un then
19439: LD_VAR 0 3
19443: IFFALSE 19454
// RemoveUnit ( un ) ;
19445: LD_VAR 0 3
19449: PPUSH
19450: CALL_OW 64
// end ;
19454: PPOPN 3
19456: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19457: LD_EXP 97
19461: IFFALSE 19577
19463: GO 19465
19465: DISABLE
19466: LD_INT 0
19468: PPUSH
19469: PPUSH
19470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19471: LD_ADDR_VAR 0 2
19475: PUSH
19476: LD_INT 81
19478: PUSH
19479: LD_OWVAR 2
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 1
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 69
19506: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19507: LD_STRING playComputer()
19509: PPUSH
19510: CALL_OW 559
// if not tmp then
19514: LD_VAR 0 2
19518: NOT
19519: IFFALSE 19523
// exit ;
19521: GO 19577
// for i in tmp do
19523: LD_ADDR_VAR 0 1
19527: PUSH
19528: LD_VAR 0 2
19532: PUSH
19533: FOR_IN
19534: IFFALSE 19575
// for j := 1 to 4 do
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: DOUBLE
19542: LD_INT 1
19544: DEC
19545: ST_TO_ADDR
19546: LD_INT 4
19548: PUSH
19549: FOR_TO
19550: IFFALSE 19571
// SetSkill ( i , j , 10 ) ;
19552: LD_VAR 0 1
19556: PPUSH
19557: LD_VAR 0 3
19561: PPUSH
19562: LD_INT 10
19564: PPUSH
19565: CALL_OW 237
19569: GO 19549
19571: POP
19572: POP
19573: GO 19533
19575: POP
19576: POP
// end ;
19577: PPOPN 3
19579: END
// every 0 0$1 trigger s30 do var i , tmp ;
19580: LD_EXP 98
19584: IFFALSE 19653
19586: GO 19588
19588: DISABLE
19589: LD_INT 0
19591: PPUSH
19592: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19593: LD_ADDR_VAR 0 2
19597: PUSH
19598: LD_INT 22
19600: PUSH
19601: LD_OWVAR 2
19605: PUSH
19606: EMPTY
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL_OW 69
19614: ST_TO_ADDR
// if not tmp then
19615: LD_VAR 0 2
19619: NOT
19620: IFFALSE 19624
// exit ;
19622: GO 19653
// for i in tmp do
19624: LD_ADDR_VAR 0 1
19628: PUSH
19629: LD_VAR 0 2
19633: PUSH
19634: FOR_IN
19635: IFFALSE 19651
// SetLives ( i , 300 ) ;
19637: LD_VAR 0 1
19641: PPUSH
19642: LD_INT 300
19644: PPUSH
19645: CALL_OW 234
19649: GO 19634
19651: POP
19652: POP
// end ;
19653: PPOPN 2
19655: END
// every 0 0$1 trigger s60 do var i , tmp ;
19656: LD_EXP 99
19660: IFFALSE 19729
19662: GO 19664
19664: DISABLE
19665: LD_INT 0
19667: PPUSH
19668: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19669: LD_ADDR_VAR 0 2
19673: PUSH
19674: LD_INT 22
19676: PUSH
19677: LD_OWVAR 2
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: ST_TO_ADDR
// if not tmp then
19691: LD_VAR 0 2
19695: NOT
19696: IFFALSE 19700
// exit ;
19698: GO 19729
// for i in tmp do
19700: LD_ADDR_VAR 0 1
19704: PUSH
19705: LD_VAR 0 2
19709: PUSH
19710: FOR_IN
19711: IFFALSE 19727
// SetLives ( i , 600 ) ;
19713: LD_VAR 0 1
19717: PPUSH
19718: LD_INT 600
19720: PPUSH
19721: CALL_OW 234
19725: GO 19710
19727: POP
19728: POP
// end ;
19729: PPOPN 2
19731: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19732: LD_INT 0
19734: PPUSH
// case cmd of 301 :
19735: LD_VAR 0 1
19739: PUSH
19740: LD_INT 301
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19780
19748: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19749: LD_VAR 0 6
19753: PPUSH
19754: LD_VAR 0 7
19758: PPUSH
19759: LD_VAR 0 8
19763: PPUSH
19764: LD_VAR 0 4
19768: PPUSH
19769: LD_VAR 0 5
19773: PPUSH
19774: CALL 20981 0 5
19778: GO 19901
19780: LD_INT 302
19782: DOUBLE
19783: EQUAL
19784: IFTRUE 19788
19786: GO 19825
19788: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19789: LD_VAR 0 6
19793: PPUSH
19794: LD_VAR 0 7
19798: PPUSH
19799: LD_VAR 0 8
19803: PPUSH
19804: LD_VAR 0 9
19808: PPUSH
19809: LD_VAR 0 4
19813: PPUSH
19814: LD_VAR 0 5
19818: PPUSH
19819: CALL 21072 0 6
19823: GO 19901
19825: LD_INT 303
19827: DOUBLE
19828: EQUAL
19829: IFTRUE 19833
19831: GO 19870
19833: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19834: LD_VAR 0 6
19838: PPUSH
19839: LD_VAR 0 7
19843: PPUSH
19844: LD_VAR 0 8
19848: PPUSH
19849: LD_VAR 0 9
19853: PPUSH
19854: LD_VAR 0 4
19858: PPUSH
19859: LD_VAR 0 5
19863: PPUSH
19864: CALL 19906 0 6
19868: GO 19901
19870: LD_INT 304
19872: DOUBLE
19873: EQUAL
19874: IFTRUE 19878
19876: GO 19900
19878: POP
// hHackTeleport ( unit , x , y ) ; end ;
19879: LD_VAR 0 2
19883: PPUSH
19884: LD_VAR 0 4
19888: PPUSH
19889: LD_VAR 0 5
19893: PPUSH
19894: CALL 21665 0 3
19898: GO 19901
19900: POP
// end ;
19901: LD_VAR 0 12
19905: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19906: LD_INT 0
19908: PPUSH
19909: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19910: LD_VAR 0 1
19914: PUSH
19915: LD_INT 1
19917: LESS
19918: PUSH
19919: LD_VAR 0 1
19923: PUSH
19924: LD_INT 3
19926: GREATER
19927: OR
19928: PUSH
19929: LD_VAR 0 5
19933: PPUSH
19934: LD_VAR 0 6
19938: PPUSH
19939: CALL_OW 428
19943: OR
19944: IFFALSE 19948
// exit ;
19946: GO 20668
// uc_side := your_side ;
19948: LD_ADDR_OWVAR 20
19952: PUSH
19953: LD_OWVAR 2
19957: ST_TO_ADDR
// uc_nation := nation ;
19958: LD_ADDR_OWVAR 21
19962: PUSH
19963: LD_VAR 0 1
19967: ST_TO_ADDR
// bc_level = 1 ;
19968: LD_ADDR_OWVAR 43
19972: PUSH
19973: LD_INT 1
19975: ST_TO_ADDR
// case btype of 1 :
19976: LD_VAR 0 2
19980: PUSH
19981: LD_INT 1
19983: DOUBLE
19984: EQUAL
19985: IFTRUE 19989
19987: GO 20000
19989: POP
// bc_type := b_depot ; 2 :
19990: LD_ADDR_OWVAR 42
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
19998: GO 20612
20000: LD_INT 2
20002: DOUBLE
20003: EQUAL
20004: IFTRUE 20008
20006: GO 20019
20008: POP
// bc_type := b_warehouse ; 3 :
20009: LD_ADDR_OWVAR 42
20013: PUSH
20014: LD_INT 1
20016: ST_TO_ADDR
20017: GO 20612
20019: LD_INT 3
20021: DOUBLE
20022: EQUAL
20023: IFTRUE 20027
20025: GO 20038
20027: POP
// bc_type := b_lab ; 4 .. 9 :
20028: LD_ADDR_OWVAR 42
20032: PUSH
20033: LD_INT 6
20035: ST_TO_ADDR
20036: GO 20612
20038: LD_INT 4
20040: DOUBLE
20041: GREATEREQUAL
20042: IFFALSE 20050
20044: LD_INT 9
20046: DOUBLE
20047: LESSEQUAL
20048: IFTRUE 20052
20050: GO 20104
20052: POP
// begin bc_type := b_lab_half ;
20053: LD_ADDR_OWVAR 42
20057: PUSH
20058: LD_INT 7
20060: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20061: LD_ADDR_OWVAR 44
20065: PUSH
20066: LD_INT 10
20068: PUSH
20069: LD_INT 11
20071: PUSH
20072: LD_INT 12
20074: PUSH
20075: LD_INT 15
20077: PUSH
20078: LD_INT 14
20080: PUSH
20081: LD_INT 13
20083: PUSH
20084: EMPTY
20085: LIST
20086: LIST
20087: LIST
20088: LIST
20089: LIST
20090: LIST
20091: PUSH
20092: LD_VAR 0 2
20096: PUSH
20097: LD_INT 3
20099: MINUS
20100: ARRAY
20101: ST_TO_ADDR
// end ; 10 .. 13 :
20102: GO 20612
20104: LD_INT 10
20106: DOUBLE
20107: GREATEREQUAL
20108: IFFALSE 20116
20110: LD_INT 13
20112: DOUBLE
20113: LESSEQUAL
20114: IFTRUE 20118
20116: GO 20195
20118: POP
// begin bc_type := b_lab_full ;
20119: LD_ADDR_OWVAR 42
20123: PUSH
20124: LD_INT 8
20126: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20127: LD_ADDR_OWVAR 44
20131: PUSH
20132: LD_INT 10
20134: PUSH
20135: LD_INT 12
20137: PUSH
20138: LD_INT 14
20140: PUSH
20141: LD_INT 13
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: PUSH
20150: LD_VAR 0 2
20154: PUSH
20155: LD_INT 9
20157: MINUS
20158: ARRAY
20159: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20160: LD_ADDR_OWVAR 45
20164: PUSH
20165: LD_INT 11
20167: PUSH
20168: LD_INT 15
20170: PUSH
20171: LD_INT 12
20173: PUSH
20174: LD_INT 15
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: PUSH
20183: LD_VAR 0 2
20187: PUSH
20188: LD_INT 9
20190: MINUS
20191: ARRAY
20192: ST_TO_ADDR
// end ; 14 :
20193: GO 20612
20195: LD_INT 14
20197: DOUBLE
20198: EQUAL
20199: IFTRUE 20203
20201: GO 20214
20203: POP
// bc_type := b_workshop ; 15 :
20204: LD_ADDR_OWVAR 42
20208: PUSH
20209: LD_INT 2
20211: ST_TO_ADDR
20212: GO 20612
20214: LD_INT 15
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20233
20222: POP
// bc_type := b_factory ; 16 :
20223: LD_ADDR_OWVAR 42
20227: PUSH
20228: LD_INT 3
20230: ST_TO_ADDR
20231: GO 20612
20233: LD_INT 16
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20252
20241: POP
// bc_type := b_ext_gun ; 17 :
20242: LD_ADDR_OWVAR 42
20246: PUSH
20247: LD_INT 17
20249: ST_TO_ADDR
20250: GO 20612
20252: LD_INT 17
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20288
20260: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20261: LD_ADDR_OWVAR 42
20265: PUSH
20266: LD_INT 19
20268: PUSH
20269: LD_INT 23
20271: PUSH
20272: LD_INT 19
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: PUSH
20280: LD_VAR 0 1
20284: ARRAY
20285: ST_TO_ADDR
20286: GO 20612
20288: LD_INT 18
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20307
20296: POP
// bc_type := b_ext_radar ; 19 :
20297: LD_ADDR_OWVAR 42
20301: PUSH
20302: LD_INT 20
20304: ST_TO_ADDR
20305: GO 20612
20307: LD_INT 19
20309: DOUBLE
20310: EQUAL
20311: IFTRUE 20315
20313: GO 20326
20315: POP
// bc_type := b_ext_radio ; 20 :
20316: LD_ADDR_OWVAR 42
20320: PUSH
20321: LD_INT 22
20323: ST_TO_ADDR
20324: GO 20612
20326: LD_INT 20
20328: DOUBLE
20329: EQUAL
20330: IFTRUE 20334
20332: GO 20345
20334: POP
// bc_type := b_ext_siberium ; 21 :
20335: LD_ADDR_OWVAR 42
20339: PUSH
20340: LD_INT 21
20342: ST_TO_ADDR
20343: GO 20612
20345: LD_INT 21
20347: DOUBLE
20348: EQUAL
20349: IFTRUE 20353
20351: GO 20364
20353: POP
// bc_type := b_ext_computer ; 22 :
20354: LD_ADDR_OWVAR 42
20358: PUSH
20359: LD_INT 24
20361: ST_TO_ADDR
20362: GO 20612
20364: LD_INT 22
20366: DOUBLE
20367: EQUAL
20368: IFTRUE 20372
20370: GO 20383
20372: POP
// bc_type := b_ext_track ; 23 :
20373: LD_ADDR_OWVAR 42
20377: PUSH
20378: LD_INT 16
20380: ST_TO_ADDR
20381: GO 20612
20383: LD_INT 23
20385: DOUBLE
20386: EQUAL
20387: IFTRUE 20391
20389: GO 20402
20391: POP
// bc_type := b_ext_laser ; 24 :
20392: LD_ADDR_OWVAR 42
20396: PUSH
20397: LD_INT 25
20399: ST_TO_ADDR
20400: GO 20612
20402: LD_INT 24
20404: DOUBLE
20405: EQUAL
20406: IFTRUE 20410
20408: GO 20421
20410: POP
// bc_type := b_control_tower ; 25 :
20411: LD_ADDR_OWVAR 42
20415: PUSH
20416: LD_INT 36
20418: ST_TO_ADDR
20419: GO 20612
20421: LD_INT 25
20423: DOUBLE
20424: EQUAL
20425: IFTRUE 20429
20427: GO 20440
20429: POP
// bc_type := b_breastwork ; 26 :
20430: LD_ADDR_OWVAR 42
20434: PUSH
20435: LD_INT 31
20437: ST_TO_ADDR
20438: GO 20612
20440: LD_INT 26
20442: DOUBLE
20443: EQUAL
20444: IFTRUE 20448
20446: GO 20459
20448: POP
// bc_type := b_bunker ; 27 :
20449: LD_ADDR_OWVAR 42
20453: PUSH
20454: LD_INT 32
20456: ST_TO_ADDR
20457: GO 20612
20459: LD_INT 27
20461: DOUBLE
20462: EQUAL
20463: IFTRUE 20467
20465: GO 20478
20467: POP
// bc_type := b_turret ; 28 :
20468: LD_ADDR_OWVAR 42
20472: PUSH
20473: LD_INT 33
20475: ST_TO_ADDR
20476: GO 20612
20478: LD_INT 28
20480: DOUBLE
20481: EQUAL
20482: IFTRUE 20486
20484: GO 20497
20486: POP
// bc_type := b_armoury ; 29 :
20487: LD_ADDR_OWVAR 42
20491: PUSH
20492: LD_INT 4
20494: ST_TO_ADDR
20495: GO 20612
20497: LD_INT 29
20499: DOUBLE
20500: EQUAL
20501: IFTRUE 20505
20503: GO 20516
20505: POP
// bc_type := b_barracks ; 30 :
20506: LD_ADDR_OWVAR 42
20510: PUSH
20511: LD_INT 5
20513: ST_TO_ADDR
20514: GO 20612
20516: LD_INT 30
20518: DOUBLE
20519: EQUAL
20520: IFTRUE 20524
20522: GO 20535
20524: POP
// bc_type := b_solar_power ; 31 :
20525: LD_ADDR_OWVAR 42
20529: PUSH
20530: LD_INT 27
20532: ST_TO_ADDR
20533: GO 20612
20535: LD_INT 31
20537: DOUBLE
20538: EQUAL
20539: IFTRUE 20543
20541: GO 20554
20543: POP
// bc_type := b_oil_power ; 32 :
20544: LD_ADDR_OWVAR 42
20548: PUSH
20549: LD_INT 26
20551: ST_TO_ADDR
20552: GO 20612
20554: LD_INT 32
20556: DOUBLE
20557: EQUAL
20558: IFTRUE 20562
20560: GO 20573
20562: POP
// bc_type := b_siberite_power ; 33 :
20563: LD_ADDR_OWVAR 42
20567: PUSH
20568: LD_INT 28
20570: ST_TO_ADDR
20571: GO 20612
20573: LD_INT 33
20575: DOUBLE
20576: EQUAL
20577: IFTRUE 20581
20579: GO 20592
20581: POP
// bc_type := b_oil_mine ; 34 :
20582: LD_ADDR_OWVAR 42
20586: PUSH
20587: LD_INT 29
20589: ST_TO_ADDR
20590: GO 20612
20592: LD_INT 34
20594: DOUBLE
20595: EQUAL
20596: IFTRUE 20600
20598: GO 20611
20600: POP
// bc_type := b_siberite_mine ; end ;
20601: LD_ADDR_OWVAR 42
20605: PUSH
20606: LD_INT 30
20608: ST_TO_ADDR
20609: GO 20612
20611: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20612: LD_ADDR_VAR 0 8
20616: PUSH
20617: LD_VAR 0 5
20621: PPUSH
20622: LD_VAR 0 6
20626: PPUSH
20627: LD_VAR 0 3
20631: PPUSH
20632: CALL_OW 47
20636: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20637: LD_OWVAR 42
20641: PUSH
20642: LD_INT 32
20644: PUSH
20645: LD_INT 33
20647: PUSH
20648: EMPTY
20649: LIST
20650: LIST
20651: IN
20652: IFFALSE 20668
// PlaceWeaponTurret ( b , weapon ) ;
20654: LD_VAR 0 8
20658: PPUSH
20659: LD_VAR 0 4
20663: PPUSH
20664: CALL_OW 431
// end ;
20668: LD_VAR 0 7
20672: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20673: LD_INT 0
20675: PPUSH
20676: PPUSH
20677: PPUSH
20678: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20679: LD_ADDR_VAR 0 4
20683: PUSH
20684: LD_INT 22
20686: PUSH
20687: LD_OWVAR 2
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: LD_INT 30
20701: PUSH
20702: LD_INT 0
20704: PUSH
20705: EMPTY
20706: LIST
20707: LIST
20708: PUSH
20709: LD_INT 30
20711: PUSH
20712: LD_INT 1
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: PUSH
20719: EMPTY
20720: LIST
20721: LIST
20722: LIST
20723: PUSH
20724: EMPTY
20725: LIST
20726: LIST
20727: PPUSH
20728: CALL_OW 69
20732: ST_TO_ADDR
// if not tmp then
20733: LD_VAR 0 4
20737: NOT
20738: IFFALSE 20742
// exit ;
20740: GO 20801
// for i in tmp do
20742: LD_ADDR_VAR 0 2
20746: PUSH
20747: LD_VAR 0 4
20751: PUSH
20752: FOR_IN
20753: IFFALSE 20799
// for j = 1 to 3 do
20755: LD_ADDR_VAR 0 3
20759: PUSH
20760: DOUBLE
20761: LD_INT 1
20763: DEC
20764: ST_TO_ADDR
20765: LD_INT 3
20767: PUSH
20768: FOR_TO
20769: IFFALSE 20795
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20771: LD_VAR 0 2
20775: PPUSH
20776: CALL_OW 274
20780: PPUSH
20781: LD_VAR 0 3
20785: PPUSH
20786: LD_INT 99999
20788: PPUSH
20789: CALL_OW 277
20793: GO 20768
20795: POP
20796: POP
20797: GO 20752
20799: POP
20800: POP
// end ;
20801: LD_VAR 0 1
20805: RET
// export function hHackSetLevel10 ; var i , j ; begin
20806: LD_INT 0
20808: PPUSH
20809: PPUSH
20810: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20811: LD_ADDR_VAR 0 2
20815: PUSH
20816: LD_INT 21
20818: PUSH
20819: LD_INT 1
20821: PUSH
20822: EMPTY
20823: LIST
20824: LIST
20825: PPUSH
20826: CALL_OW 69
20830: PUSH
20831: FOR_IN
20832: IFFALSE 20884
// if IsSelected ( i ) then
20834: LD_VAR 0 2
20838: PPUSH
20839: CALL_OW 306
20843: IFFALSE 20882
// begin for j := 1 to 4 do
20845: LD_ADDR_VAR 0 3
20849: PUSH
20850: DOUBLE
20851: LD_INT 1
20853: DEC
20854: ST_TO_ADDR
20855: LD_INT 4
20857: PUSH
20858: FOR_TO
20859: IFFALSE 20880
// SetSkill ( i , j , 10 ) ;
20861: LD_VAR 0 2
20865: PPUSH
20866: LD_VAR 0 3
20870: PPUSH
20871: LD_INT 10
20873: PPUSH
20874: CALL_OW 237
20878: GO 20858
20880: POP
20881: POP
// end ;
20882: GO 20831
20884: POP
20885: POP
// end ;
20886: LD_VAR 0 1
20890: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20891: LD_INT 0
20893: PPUSH
20894: PPUSH
20895: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20896: LD_ADDR_VAR 0 2
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_OWVAR 2
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: PUSH
20913: LD_INT 21
20915: PUSH
20916: LD_INT 1
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PPUSH
20927: CALL_OW 69
20931: PUSH
20932: FOR_IN
20933: IFFALSE 20974
// begin for j := 1 to 4 do
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: DOUBLE
20941: LD_INT 1
20943: DEC
20944: ST_TO_ADDR
20945: LD_INT 4
20947: PUSH
20948: FOR_TO
20949: IFFALSE 20970
// SetSkill ( i , j , 10 ) ;
20951: LD_VAR 0 2
20955: PPUSH
20956: LD_VAR 0 3
20960: PPUSH
20961: LD_INT 10
20963: PPUSH
20964: CALL_OW 237
20968: GO 20948
20970: POP
20971: POP
// end ;
20972: GO 20932
20974: POP
20975: POP
// end ;
20976: LD_VAR 0 1
20980: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20981: LD_INT 0
20983: PPUSH
// uc_side := your_side ;
20984: LD_ADDR_OWVAR 20
20988: PUSH
20989: LD_OWVAR 2
20993: ST_TO_ADDR
// uc_nation := nation ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_VAR 0 1
21003: ST_TO_ADDR
// InitHc ;
21004: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21008: LD_INT 0
21010: PPUSH
21011: LD_VAR 0 2
21015: PPUSH
21016: LD_VAR 0 3
21020: PPUSH
21021: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21025: LD_VAR 0 4
21029: PPUSH
21030: LD_VAR 0 5
21034: PPUSH
21035: CALL_OW 428
21039: PUSH
21040: LD_INT 0
21042: EQUAL
21043: IFFALSE 21067
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21045: CALL_OW 44
21049: PPUSH
21050: LD_VAR 0 4
21054: PPUSH
21055: LD_VAR 0 5
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 48
// end ;
21067: LD_VAR 0 6
21071: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21072: LD_INT 0
21074: PPUSH
21075: PPUSH
// uc_side := your_side ;
21076: LD_ADDR_OWVAR 20
21080: PUSH
21081: LD_OWVAR 2
21085: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21086: LD_VAR 0 1
21090: PUSH
21091: LD_INT 1
21093: PUSH
21094: LD_INT 2
21096: PUSH
21097: LD_INT 3
21099: PUSH
21100: LD_INT 4
21102: PUSH
21103: LD_INT 5
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: LIST
21112: IN
21113: IFFALSE 21125
// uc_nation := nation_american else
21115: LD_ADDR_OWVAR 21
21119: PUSH
21120: LD_INT 1
21122: ST_TO_ADDR
21123: GO 21168
// if chassis in [ 11 , 12 , 13 , 14 ] then
21125: LD_VAR 0 1
21129: PUSH
21130: LD_INT 11
21132: PUSH
21133: LD_INT 12
21135: PUSH
21136: LD_INT 13
21138: PUSH
21139: LD_INT 14
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: IN
21148: IFFALSE 21160
// uc_nation := nation_arabian else
21150: LD_ADDR_OWVAR 21
21154: PUSH
21155: LD_INT 2
21157: ST_TO_ADDR
21158: GO 21168
// uc_nation := nation_russian ;
21160: LD_ADDR_OWVAR 21
21164: PUSH
21165: LD_INT 3
21167: ST_TO_ADDR
// vc_chassis := chassis ;
21168: LD_ADDR_OWVAR 37
21172: PUSH
21173: LD_VAR 0 1
21177: ST_TO_ADDR
// vc_engine := engine ;
21178: LD_ADDR_OWVAR 39
21182: PUSH
21183: LD_VAR 0 2
21187: ST_TO_ADDR
// vc_control := control ;
21188: LD_ADDR_OWVAR 38
21192: PUSH
21193: LD_VAR 0 3
21197: ST_TO_ADDR
// vc_weapon := weapon ;
21198: LD_ADDR_OWVAR 40
21202: PUSH
21203: LD_VAR 0 4
21207: ST_TO_ADDR
// un := CreateVehicle ;
21208: LD_ADDR_VAR 0 8
21212: PUSH
21213: CALL_OW 45
21217: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21218: LD_VAR 0 8
21222: PPUSH
21223: LD_INT 0
21225: PPUSH
21226: LD_INT 5
21228: PPUSH
21229: CALL_OW 12
21233: PPUSH
21234: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21238: LD_VAR 0 8
21242: PPUSH
21243: LD_VAR 0 5
21247: PPUSH
21248: LD_VAR 0 6
21252: PPUSH
21253: LD_INT 1
21255: PPUSH
21256: CALL_OW 48
// end ;
21260: LD_VAR 0 7
21264: RET
// export hInvincible ; every 1 do
21265: GO 21267
21267: DISABLE
// hInvincible := [ ] ;
21268: LD_ADDR_EXP 100
21272: PUSH
21273: EMPTY
21274: ST_TO_ADDR
21275: END
// every 10 do var i ;
21276: GO 21278
21278: DISABLE
21279: LD_INT 0
21281: PPUSH
// begin enable ;
21282: ENABLE
// if not hInvincible then
21283: LD_EXP 100
21287: NOT
21288: IFFALSE 21292
// exit ;
21290: GO 21336
// for i in hInvincible do
21292: LD_ADDR_VAR 0 1
21296: PUSH
21297: LD_EXP 100
21301: PUSH
21302: FOR_IN
21303: IFFALSE 21334
// if GetLives ( i ) < 1000 then
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 256
21314: PUSH
21315: LD_INT 1000
21317: LESS
21318: IFFALSE 21332
// SetLives ( i , 1000 ) ;
21320: LD_VAR 0 1
21324: PPUSH
21325: LD_INT 1000
21327: PPUSH
21328: CALL_OW 234
21332: GO 21302
21334: POP
21335: POP
// end ;
21336: PPOPN 1
21338: END
// export function hHackInvincible ; var i ; begin
21339: LD_INT 0
21341: PPUSH
21342: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21343: LD_ADDR_VAR 0 2
21347: PUSH
21348: LD_INT 2
21350: PUSH
21351: LD_INT 21
21353: PUSH
21354: LD_INT 1
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 21
21363: PUSH
21364: LD_INT 2
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: LIST
21375: PPUSH
21376: CALL_OW 69
21380: PUSH
21381: FOR_IN
21382: IFFALSE 21443
// if IsSelected ( i ) then
21384: LD_VAR 0 2
21388: PPUSH
21389: CALL_OW 306
21393: IFFALSE 21441
// begin if i in hInvincible then
21395: LD_VAR 0 2
21399: PUSH
21400: LD_EXP 100
21404: IN
21405: IFFALSE 21425
// hInvincible := hInvincible diff i else
21407: LD_ADDR_EXP 100
21411: PUSH
21412: LD_EXP 100
21416: PUSH
21417: LD_VAR 0 2
21421: DIFF
21422: ST_TO_ADDR
21423: GO 21441
// hInvincible := hInvincible union i ;
21425: LD_ADDR_EXP 100
21429: PUSH
21430: LD_EXP 100
21434: PUSH
21435: LD_VAR 0 2
21439: UNION
21440: ST_TO_ADDR
// end ;
21441: GO 21381
21443: POP
21444: POP
// end ;
21445: LD_VAR 0 1
21449: RET
// export function hHackInvisible ; var i , j ; begin
21450: LD_INT 0
21452: PPUSH
21453: PPUSH
21454: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: LD_INT 21
21462: PUSH
21463: LD_INT 1
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PPUSH
21470: CALL_OW 69
21474: PUSH
21475: FOR_IN
21476: IFFALSE 21500
// if IsSelected ( i ) then
21478: LD_VAR 0 2
21482: PPUSH
21483: CALL_OW 306
21487: IFFALSE 21498
// ComForceInvisible ( i ) ;
21489: LD_VAR 0 2
21493: PPUSH
21494: CALL_OW 496
21498: GO 21475
21500: POP
21501: POP
// end ;
21502: LD_VAR 0 1
21506: RET
// export function hHackChangeYourSide ; begin
21507: LD_INT 0
21509: PPUSH
// if your_side = 8 then
21510: LD_OWVAR 2
21514: PUSH
21515: LD_INT 8
21517: EQUAL
21518: IFFALSE 21530
// your_side := 0 else
21520: LD_ADDR_OWVAR 2
21524: PUSH
21525: LD_INT 0
21527: ST_TO_ADDR
21528: GO 21544
// your_side := your_side + 1 ;
21530: LD_ADDR_OWVAR 2
21534: PUSH
21535: LD_OWVAR 2
21539: PUSH
21540: LD_INT 1
21542: PLUS
21543: ST_TO_ADDR
// end ;
21544: LD_VAR 0 1
21548: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21549: LD_INT 0
21551: PPUSH
21552: PPUSH
21553: PPUSH
// for i in all_units do
21554: LD_ADDR_VAR 0 2
21558: PUSH
21559: LD_OWVAR 3
21563: PUSH
21564: FOR_IN
21565: IFFALSE 21643
// if IsSelected ( i ) then
21567: LD_VAR 0 2
21571: PPUSH
21572: CALL_OW 306
21576: IFFALSE 21641
// begin j := GetSide ( i ) ;
21578: LD_ADDR_VAR 0 3
21582: PUSH
21583: LD_VAR 0 2
21587: PPUSH
21588: CALL_OW 255
21592: ST_TO_ADDR
// if j = 8 then
21593: LD_VAR 0 3
21597: PUSH
21598: LD_INT 8
21600: EQUAL
21601: IFFALSE 21613
// j := 0 else
21603: LD_ADDR_VAR 0 3
21607: PUSH
21608: LD_INT 0
21610: ST_TO_ADDR
21611: GO 21627
// j := j + 1 ;
21613: LD_ADDR_VAR 0 3
21617: PUSH
21618: LD_VAR 0 3
21622: PUSH
21623: LD_INT 1
21625: PLUS
21626: ST_TO_ADDR
// SetSide ( i , j ) ;
21627: LD_VAR 0 2
21631: PPUSH
21632: LD_VAR 0 3
21636: PPUSH
21637: CALL_OW 235
// end ;
21641: GO 21564
21643: POP
21644: POP
// end ;
21645: LD_VAR 0 1
21649: RET
// export function hHackFog ; begin
21650: LD_INT 0
21652: PPUSH
// FogOff ( true ) ;
21653: LD_INT 1
21655: PPUSH
21656: CALL_OW 344
// end ;
21660: LD_VAR 0 1
21664: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21665: LD_INT 0
21667: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_VAR 0 2
21677: PPUSH
21678: LD_VAR 0 3
21682: PPUSH
21683: LD_INT 1
21685: PPUSH
21686: LD_INT 1
21688: PPUSH
21689: CALL_OW 483
// CenterOnXY ( x , y ) ;
21693: LD_VAR 0 2
21697: PPUSH
21698: LD_VAR 0 3
21702: PPUSH
21703: CALL_OW 84
// end ; end_of_file
21707: LD_VAR 0 4
21711: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21712: LD_INT 0
21714: PPUSH
21715: PPUSH
21716: PPUSH
21717: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21718: LD_VAR 0 1
21722: PPUSH
21723: CALL_OW 264
21727: PUSH
21728: LD_EXP 28
21732: EQUAL
21733: IFFALSE 21805
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21735: LD_INT 68
21737: PPUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 255
21747: PPUSH
21748: CALL_OW 321
21752: PUSH
21753: LD_INT 2
21755: EQUAL
21756: IFFALSE 21768
// eff := 70 else
21758: LD_ADDR_VAR 0 4
21762: PUSH
21763: LD_INT 70
21765: ST_TO_ADDR
21766: GO 21776
// eff := 30 ;
21768: LD_ADDR_VAR 0 4
21772: PUSH
21773: LD_INT 30
21775: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21776: LD_VAR 0 1
21780: PPUSH
21781: CALL_OW 250
21785: PPUSH
21786: LD_VAR 0 1
21790: PPUSH
21791: CALL_OW 251
21795: PPUSH
21796: LD_VAR 0 4
21800: PPUSH
21801: CALL_OW 495
// end ; end ;
21805: LD_VAR 0 2
21809: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21810: LD_INT 0
21812: PPUSH
// end ;
21813: LD_VAR 0 4
21817: RET
// export function SOS_Command ( cmd ) ; begin
21818: LD_INT 0
21820: PPUSH
// end ;
21821: LD_VAR 0 2
21825: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21826: LD_INT 0
21828: PPUSH
// end ;
21829: LD_VAR 0 6
21833: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21834: LD_INT 0
21836: PPUSH
21837: PPUSH
// if not vehicle or not factory then
21838: LD_VAR 0 1
21842: NOT
21843: PUSH
21844: LD_VAR 0 2
21848: NOT
21849: OR
21850: IFFALSE 21854
// exit ;
21852: GO 22085
// if factoryWaypoints >= factory then
21854: LD_EXP 101
21858: PUSH
21859: LD_VAR 0 2
21863: GREATEREQUAL
21864: IFFALSE 22085
// if factoryWaypoints [ factory ] then
21866: LD_EXP 101
21870: PUSH
21871: LD_VAR 0 2
21875: ARRAY
21876: IFFALSE 22085
// begin if GetControl ( vehicle ) = control_manual then
21878: LD_VAR 0 1
21882: PPUSH
21883: CALL_OW 263
21887: PUSH
21888: LD_INT 1
21890: EQUAL
21891: IFFALSE 21972
// begin driver := IsDrivenBy ( vehicle ) ;
21893: LD_ADDR_VAR 0 4
21897: PUSH
21898: LD_VAR 0 1
21902: PPUSH
21903: CALL_OW 311
21907: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
21908: LD_VAR 0 4
21912: PPUSH
21913: LD_EXP 101
21917: PUSH
21918: LD_VAR 0 2
21922: ARRAY
21923: PUSH
21924: LD_INT 1
21926: ARRAY
21927: PPUSH
21928: LD_EXP 101
21932: PUSH
21933: LD_VAR 0 2
21937: ARRAY
21938: PUSH
21939: LD_INT 2
21941: ARRAY
21942: PPUSH
21943: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21947: LD_VAR 0 4
21951: PPUSH
21952: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21956: LD_VAR 0 4
21960: PPUSH
21961: LD_VAR 0 2
21965: PPUSH
21966: CALL_OW 180
// end else
21970: GO 22085
// if GetControl ( vehicle ) = control_remote then
21972: LD_VAR 0 1
21976: PPUSH
21977: CALL_OW 263
21981: PUSH
21982: LD_INT 2
21984: EQUAL
21985: IFFALSE 22046
// begin wait ( 0 0$2 ) ;
21987: LD_INT 70
21989: PPUSH
21990: CALL_OW 67
// if Connect ( vehicle ) then
21994: LD_VAR 0 1
21998: PPUSH
21999: CALL 34309 0 1
22003: IFFALSE 22044
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
22005: LD_VAR 0 1
22009: PPUSH
22010: LD_EXP 101
22014: PUSH
22015: LD_VAR 0 2
22019: ARRAY
22020: PUSH
22021: LD_INT 1
22023: ARRAY
22024: PPUSH
22025: LD_EXP 101
22029: PUSH
22030: LD_VAR 0 2
22034: ARRAY
22035: PUSH
22036: LD_INT 2
22038: ARRAY
22039: PPUSH
22040: CALL_OW 171
// end else
22044: GO 22085
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
22046: LD_VAR 0 1
22050: PPUSH
22051: LD_EXP 101
22055: PUSH
22056: LD_VAR 0 2
22060: ARRAY
22061: PUSH
22062: LD_INT 1
22064: ARRAY
22065: PPUSH
22066: LD_EXP 101
22070: PUSH
22071: LD_VAR 0 2
22075: ARRAY
22076: PUSH
22077: LD_INT 2
22079: ARRAY
22080: PPUSH
22081: CALL_OW 171
// end ; end ;
22085: LD_VAR 0 3
22089: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22090: LD_INT 0
22092: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22093: LD_VAR 0 1
22097: PUSH
22098: LD_INT 250
22100: EQUAL
22101: PUSH
22102: LD_VAR 0 2
22106: PPUSH
22107: CALL_OW 264
22111: PUSH
22112: LD_EXP 31
22116: EQUAL
22117: AND
22118: IFFALSE 22139
// MinerPlaceMine ( unit , x , y ) ;
22120: LD_VAR 0 2
22124: PPUSH
22125: LD_VAR 0 4
22129: PPUSH
22130: LD_VAR 0 5
22134: PPUSH
22135: CALL 24867 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22139: LD_VAR 0 1
22143: PUSH
22144: LD_INT 251
22146: EQUAL
22147: PUSH
22148: LD_VAR 0 2
22152: PPUSH
22153: CALL_OW 264
22157: PUSH
22158: LD_EXP 31
22162: EQUAL
22163: AND
22164: IFFALSE 22185
// MinerDetonateMine ( unit , x , y ) ;
22166: LD_VAR 0 2
22170: PPUSH
22171: LD_VAR 0 4
22175: PPUSH
22176: LD_VAR 0 5
22180: PPUSH
22181: CALL 25144 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22185: LD_VAR 0 1
22189: PUSH
22190: LD_INT 252
22192: EQUAL
22193: PUSH
22194: LD_VAR 0 2
22198: PPUSH
22199: CALL_OW 264
22203: PUSH
22204: LD_EXP 31
22208: EQUAL
22209: AND
22210: IFFALSE 22231
// MinerCreateMinefield ( unit , x , y ) ;
22212: LD_VAR 0 2
22216: PPUSH
22217: LD_VAR 0 4
22221: PPUSH
22222: LD_VAR 0 5
22226: PPUSH
22227: CALL 25561 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22231: LD_VAR 0 1
22235: PUSH
22236: LD_INT 253
22238: EQUAL
22239: PUSH
22240: LD_VAR 0 2
22244: PPUSH
22245: CALL_OW 257
22249: PUSH
22250: LD_INT 5
22252: EQUAL
22253: AND
22254: IFFALSE 22275
// ComBinocular ( unit , x , y ) ;
22256: LD_VAR 0 2
22260: PPUSH
22261: LD_VAR 0 4
22265: PPUSH
22266: LD_VAR 0 5
22270: PPUSH
22271: CALL 25932 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22275: LD_VAR 0 1
22279: PUSH
22280: LD_INT 254
22282: EQUAL
22283: PUSH
22284: LD_VAR 0 2
22288: PPUSH
22289: CALL_OW 264
22293: PUSH
22294: LD_EXP 26
22298: EQUAL
22299: AND
22300: PUSH
22301: LD_VAR 0 3
22305: PPUSH
22306: CALL_OW 263
22310: PUSH
22311: LD_INT 3
22313: EQUAL
22314: AND
22315: IFFALSE 22331
// HackDestroyVehicle ( unit , selectedUnit ) ;
22317: LD_VAR 0 2
22321: PPUSH
22322: LD_VAR 0 3
22326: PPUSH
22327: CALL 24227 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22331: LD_VAR 0 1
22335: PUSH
22336: LD_INT 255
22338: EQUAL
22339: PUSH
22340: LD_VAR 0 2
22344: PPUSH
22345: CALL_OW 264
22349: PUSH
22350: LD_INT 14
22352: PUSH
22353: LD_INT 53
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: IN
22360: AND
22361: PUSH
22362: LD_VAR 0 4
22366: PPUSH
22367: LD_VAR 0 5
22371: PPUSH
22372: CALL_OW 488
22376: AND
22377: IFFALSE 22401
// CutTreeXYR ( unit , x , y , 12 ) ;
22379: LD_VAR 0 2
22383: PPUSH
22384: LD_VAR 0 4
22388: PPUSH
22389: LD_VAR 0 5
22393: PPUSH
22394: LD_INT 12
22396: PPUSH
22397: CALL 22793 0 4
// if cmd = 256 then
22401: LD_VAR 0 1
22405: PUSH
22406: LD_INT 256
22408: EQUAL
22409: IFFALSE 22430
// SetFactoryWaypoint ( unit , x , y ) ;
22411: LD_VAR 0 2
22415: PPUSH
22416: LD_VAR 0 4
22420: PPUSH
22421: LD_VAR 0 5
22425: PPUSH
22426: CALL 22435 0 3
// end ;
22430: LD_VAR 0 6
22434: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22435: LD_INT 0
22437: PPUSH
22438: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22439: LD_VAR 0 1
22443: NOT
22444: PUSH
22445: LD_VAR 0 2
22449: PPUSH
22450: LD_VAR 0 3
22454: PPUSH
22455: CALL_OW 488
22459: NOT
22460: OR
22461: PUSH
22462: LD_VAR 0 1
22466: PPUSH
22467: CALL_OW 266
22471: PUSH
22472: LD_INT 3
22474: NONEQUAL
22475: PUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL_OW 247
22485: PUSH
22486: LD_INT 1
22488: EQUAL
22489: NOT
22490: AND
22491: OR
22492: IFFALSE 22496
// exit ;
22494: GO 22645
// if GetType ( factory ) = unit_human then
22496: LD_VAR 0 1
22500: PPUSH
22501: CALL_OW 247
22505: PUSH
22506: LD_INT 1
22508: EQUAL
22509: IFFALSE 22526
// factory := IsInUnit ( factory ) ;
22511: LD_ADDR_VAR 0 1
22515: PUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: CALL_OW 310
22525: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22526: LD_VAR 0 1
22530: PPUSH
22531: CALL_OW 266
22535: PUSH
22536: LD_INT 3
22538: NONEQUAL
22539: IFFALSE 22543
// exit ;
22541: GO 22645
// if HexInfo ( x , y ) = factory then
22543: LD_VAR 0 2
22547: PPUSH
22548: LD_VAR 0 3
22552: PPUSH
22553: CALL_OW 428
22557: PUSH
22558: LD_VAR 0 1
22562: EQUAL
22563: IFFALSE 22590
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22565: LD_ADDR_EXP 101
22569: PUSH
22570: LD_EXP 101
22574: PPUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: LD_INT 0
22582: PPUSH
22583: CALL_OW 1
22587: ST_TO_ADDR
22588: GO 22641
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22590: LD_ADDR_EXP 101
22594: PUSH
22595: LD_EXP 101
22599: PPUSH
22600: LD_VAR 0 1
22604: PPUSH
22605: LD_VAR 0 1
22609: PPUSH
22610: CALL_OW 255
22614: PUSH
22615: LD_VAR 0 1
22619: PUSH
22620: LD_VAR 0 2
22624: PUSH
22625: LD_VAR 0 3
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: PPUSH
22636: CALL_OW 1
22640: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22641: CALL 22650 0 0
// end ;
22645: LD_VAR 0 4
22649: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
22650: LD_INT 0
22652: PPUSH
22653: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22654: LD_STRING resetFactoryWaypoint();
22656: PPUSH
22657: CALL_OW 559
// if factoryWaypoints then
22661: LD_EXP 101
22665: IFFALSE 22788
// begin for i := 1 to factoryWaypoints do
22667: LD_ADDR_VAR 0 2
22671: PUSH
22672: DOUBLE
22673: LD_INT 1
22675: DEC
22676: ST_TO_ADDR
22677: LD_EXP 101
22681: PUSH
22682: FOR_TO
22683: IFFALSE 22786
// if factoryWaypoints [ i ] then
22685: LD_EXP 101
22689: PUSH
22690: LD_VAR 0 2
22694: ARRAY
22695: IFFALSE 22784
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
22697: LD_STRING setFactoryWaypointXY(
22699: PUSH
22700: LD_EXP 101
22704: PUSH
22705: LD_VAR 0 2
22709: ARRAY
22710: PUSH
22711: LD_INT 1
22713: ARRAY
22714: STR
22715: PUSH
22716: LD_STRING ,
22718: STR
22719: PUSH
22720: LD_EXP 101
22724: PUSH
22725: LD_VAR 0 2
22729: ARRAY
22730: PUSH
22731: LD_INT 2
22733: ARRAY
22734: STR
22735: PUSH
22736: LD_STRING ,
22738: STR
22739: PUSH
22740: LD_EXP 101
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 3
22753: ARRAY
22754: STR
22755: PUSH
22756: LD_STRING ,
22758: STR
22759: PUSH
22760: LD_EXP 101
22764: PUSH
22765: LD_VAR 0 2
22769: ARRAY
22770: PUSH
22771: LD_INT 4
22773: ARRAY
22774: STR
22775: PUSH
22776: LD_STRING )
22778: STR
22779: PPUSH
22780: CALL_OW 559
22784: GO 22682
22786: POP
22787: POP
// end ; end ;
22788: LD_VAR 0 1
22792: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22793: LD_INT 0
22795: PPUSH
22796: PPUSH
22797: PPUSH
22798: PPUSH
22799: PPUSH
22800: PPUSH
22801: PPUSH
22802: PPUSH
22803: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22804: LD_VAR 0 1
22808: NOT
22809: PUSH
22810: LD_VAR 0 2
22814: PPUSH
22815: LD_VAR 0 3
22819: PPUSH
22820: CALL_OW 488
22824: NOT
22825: OR
22826: PUSH
22827: LD_VAR 0 4
22831: NOT
22832: OR
22833: IFFALSE 22837
// exit ;
22835: GO 23177
// list := [ ] ;
22837: LD_ADDR_VAR 0 13
22841: PUSH
22842: EMPTY
22843: ST_TO_ADDR
// if x - r < 0 then
22844: LD_VAR 0 2
22848: PUSH
22849: LD_VAR 0 4
22853: MINUS
22854: PUSH
22855: LD_INT 0
22857: LESS
22858: IFFALSE 22870
// min_x := 0 else
22860: LD_ADDR_VAR 0 7
22864: PUSH
22865: LD_INT 0
22867: ST_TO_ADDR
22868: GO 22886
// min_x := x - r ;
22870: LD_ADDR_VAR 0 7
22874: PUSH
22875: LD_VAR 0 2
22879: PUSH
22880: LD_VAR 0 4
22884: MINUS
22885: ST_TO_ADDR
// if y - r < 0 then
22886: LD_VAR 0 3
22890: PUSH
22891: LD_VAR 0 4
22895: MINUS
22896: PUSH
22897: LD_INT 0
22899: LESS
22900: IFFALSE 22912
// min_y := 0 else
22902: LD_ADDR_VAR 0 8
22906: PUSH
22907: LD_INT 0
22909: ST_TO_ADDR
22910: GO 22928
// min_y := y - r ;
22912: LD_ADDR_VAR 0 8
22916: PUSH
22917: LD_VAR 0 3
22921: PUSH
22922: LD_VAR 0 4
22926: MINUS
22927: ST_TO_ADDR
// max_x := x + r ;
22928: LD_ADDR_VAR 0 9
22932: PUSH
22933: LD_VAR 0 2
22937: PUSH
22938: LD_VAR 0 4
22942: PLUS
22943: ST_TO_ADDR
// max_y := y + r ;
22944: LD_ADDR_VAR 0 10
22948: PUSH
22949: LD_VAR 0 3
22953: PUSH
22954: LD_VAR 0 4
22958: PLUS
22959: ST_TO_ADDR
// for _x = min_x to max_x do
22960: LD_ADDR_VAR 0 11
22964: PUSH
22965: DOUBLE
22966: LD_VAR 0 7
22970: DEC
22971: ST_TO_ADDR
22972: LD_VAR 0 9
22976: PUSH
22977: FOR_TO
22978: IFFALSE 23095
// for _y = min_y to max_y do
22980: LD_ADDR_VAR 0 12
22984: PUSH
22985: DOUBLE
22986: LD_VAR 0 8
22990: DEC
22991: ST_TO_ADDR
22992: LD_VAR 0 10
22996: PUSH
22997: FOR_TO
22998: IFFALSE 23091
// begin if not ValidHex ( _x , _y ) then
23000: LD_VAR 0 11
23004: PPUSH
23005: LD_VAR 0 12
23009: PPUSH
23010: CALL_OW 488
23014: NOT
23015: IFFALSE 23019
// continue ;
23017: GO 22997
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23019: LD_VAR 0 11
23023: PPUSH
23024: LD_VAR 0 12
23028: PPUSH
23029: CALL_OW 351
23033: PUSH
23034: LD_VAR 0 11
23038: PPUSH
23039: LD_VAR 0 12
23043: PPUSH
23044: CALL_OW 554
23048: AND
23049: IFFALSE 23089
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23051: LD_ADDR_VAR 0 13
23055: PUSH
23056: LD_VAR 0 13
23060: PPUSH
23061: LD_VAR 0 13
23065: PUSH
23066: LD_INT 1
23068: PLUS
23069: PPUSH
23070: LD_VAR 0 11
23074: PUSH
23075: LD_VAR 0 12
23079: PUSH
23080: EMPTY
23081: LIST
23082: LIST
23083: PPUSH
23084: CALL_OW 2
23088: ST_TO_ADDR
// end ;
23089: GO 22997
23091: POP
23092: POP
23093: GO 22977
23095: POP
23096: POP
// if not list then
23097: LD_VAR 0 13
23101: NOT
23102: IFFALSE 23106
// exit ;
23104: GO 23177
// for i in list do
23106: LD_ADDR_VAR 0 6
23110: PUSH
23111: LD_VAR 0 13
23115: PUSH
23116: FOR_IN
23117: IFFALSE 23175
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23119: LD_VAR 0 1
23123: PPUSH
23124: LD_STRING M
23126: PUSH
23127: LD_VAR 0 6
23131: PUSH
23132: LD_INT 1
23134: ARRAY
23135: PUSH
23136: LD_VAR 0 6
23140: PUSH
23141: LD_INT 2
23143: ARRAY
23144: PUSH
23145: LD_INT 0
23147: PUSH
23148: LD_INT 0
23150: PUSH
23151: LD_INT 0
23153: PUSH
23154: LD_INT 0
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: PPUSH
23169: CALL_OW 447
23173: GO 23116
23175: POP
23176: POP
// end ;
23177: LD_VAR 0 5
23181: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23182: LD_EXP 102
23186: NOT
23187: IFFALSE 23237
23189: GO 23191
23191: DISABLE
// begin initHack := true ;
23192: LD_ADDR_EXP 102
23196: PUSH
23197: LD_INT 1
23199: ST_TO_ADDR
// hackTanks := [ ] ;
23200: LD_ADDR_EXP 103
23204: PUSH
23205: EMPTY
23206: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23207: LD_ADDR_EXP 104
23211: PUSH
23212: EMPTY
23213: ST_TO_ADDR
// hackLimit := 3 ;
23214: LD_ADDR_EXP 105
23218: PUSH
23219: LD_INT 3
23221: ST_TO_ADDR
// hackDist := 12 ;
23222: LD_ADDR_EXP 106
23226: PUSH
23227: LD_INT 12
23229: ST_TO_ADDR
// hackCounter := [ ] ;
23230: LD_ADDR_EXP 107
23234: PUSH
23235: EMPTY
23236: ST_TO_ADDR
// end ;
23237: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23238: LD_EXP 102
23242: PUSH
23243: LD_INT 34
23245: PUSH
23246: LD_EXP 26
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PPUSH
23255: CALL_OW 69
23259: AND
23260: IFFALSE 23515
23262: GO 23264
23264: DISABLE
23265: LD_INT 0
23267: PPUSH
23268: PPUSH
// begin enable ;
23269: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23270: LD_ADDR_VAR 0 1
23274: PUSH
23275: LD_INT 34
23277: PUSH
23278: LD_EXP 26
23282: PUSH
23283: EMPTY
23284: LIST
23285: LIST
23286: PPUSH
23287: CALL_OW 69
23291: PUSH
23292: FOR_IN
23293: IFFALSE 23513
// begin if not i in hackTanks then
23295: LD_VAR 0 1
23299: PUSH
23300: LD_EXP 103
23304: IN
23305: NOT
23306: IFFALSE 23389
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23308: LD_ADDR_EXP 103
23312: PUSH
23313: LD_EXP 103
23317: PPUSH
23318: LD_EXP 103
23322: PUSH
23323: LD_INT 1
23325: PLUS
23326: PPUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 1
23336: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23337: LD_ADDR_EXP 104
23341: PUSH
23342: LD_EXP 104
23346: PPUSH
23347: LD_EXP 104
23351: PUSH
23352: LD_INT 1
23354: PLUS
23355: PPUSH
23356: EMPTY
23357: PPUSH
23358: CALL_OW 1
23362: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23363: LD_ADDR_EXP 107
23367: PUSH
23368: LD_EXP 107
23372: PPUSH
23373: LD_EXP 107
23377: PUSH
23378: LD_INT 1
23380: PLUS
23381: PPUSH
23382: EMPTY
23383: PPUSH
23384: CALL_OW 1
23388: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 302
23398: NOT
23399: IFFALSE 23412
// begin HackUnlinkAll ( i ) ;
23401: LD_VAR 0 1
23405: PPUSH
23406: CALL 23518 0 1
// continue ;
23410: GO 23292
// end ; HackCheckCapturedStatus ( i ) ;
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL 23961 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23421: LD_ADDR_VAR 0 2
23425: PUSH
23426: LD_INT 81
23428: PUSH
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 255
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 33
23445: PUSH
23446: LD_INT 3
23448: PUSH
23449: EMPTY
23450: LIST
23451: LIST
23452: PUSH
23453: LD_INT 91
23455: PUSH
23456: LD_VAR 0 1
23460: PUSH
23461: LD_EXP 106
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 50
23473: PUSH
23474: EMPTY
23475: LIST
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: PPUSH
23483: CALL_OW 69
23487: ST_TO_ADDR
// if not tmp then
23488: LD_VAR 0 2
23492: NOT
23493: IFFALSE 23497
// continue ;
23495: GO 23292
// HackLink ( i , tmp ) ;
23497: LD_VAR 0 1
23501: PPUSH
23502: LD_VAR 0 2
23506: PPUSH
23507: CALL 23654 0 2
// end ;
23511: GO 23292
23513: POP
23514: POP
// end ;
23515: PPOPN 2
23517: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23518: LD_INT 0
23520: PPUSH
23521: PPUSH
23522: PPUSH
// if not hack in hackTanks then
23523: LD_VAR 0 1
23527: PUSH
23528: LD_EXP 103
23532: IN
23533: NOT
23534: IFFALSE 23538
// exit ;
23536: GO 23649
// index := GetElementIndex ( hackTanks , hack ) ;
23538: LD_ADDR_VAR 0 4
23542: PUSH
23543: LD_EXP 103
23547: PPUSH
23548: LD_VAR 0 1
23552: PPUSH
23553: CALL 31123 0 2
23557: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23558: LD_EXP 104
23562: PUSH
23563: LD_VAR 0 4
23567: ARRAY
23568: IFFALSE 23649
// begin for i in hackTanksCaptured [ index ] do
23570: LD_ADDR_VAR 0 3
23574: PUSH
23575: LD_EXP 104
23579: PUSH
23580: LD_VAR 0 4
23584: ARRAY
23585: PUSH
23586: FOR_IN
23587: IFFALSE 23613
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23589: LD_VAR 0 3
23593: PUSH
23594: LD_INT 1
23596: ARRAY
23597: PPUSH
23598: LD_VAR 0 3
23602: PUSH
23603: LD_INT 2
23605: ARRAY
23606: PPUSH
23607: CALL_OW 235
23611: GO 23586
23613: POP
23614: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23615: LD_ADDR_EXP 104
23619: PUSH
23620: LD_EXP 104
23624: PPUSH
23625: LD_VAR 0 4
23629: PPUSH
23630: EMPTY
23631: PPUSH
23632: CALL_OW 1
23636: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23637: LD_VAR 0 1
23641: PPUSH
23642: LD_INT 0
23644: PPUSH
23645: CALL_OW 505
// end ; end ;
23649: LD_VAR 0 2
23653: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23654: LD_INT 0
23656: PPUSH
23657: PPUSH
23658: PPUSH
// if not hack in hackTanks or not vehicles then
23659: LD_VAR 0 1
23663: PUSH
23664: LD_EXP 103
23668: IN
23669: NOT
23670: PUSH
23671: LD_VAR 0 2
23675: NOT
23676: OR
23677: IFFALSE 23681
// exit ;
23679: GO 23956
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23681: LD_ADDR_VAR 0 2
23685: PUSH
23686: LD_VAR 0 1
23690: PPUSH
23691: LD_VAR 0 2
23695: PPUSH
23696: LD_INT 1
23698: PPUSH
23699: LD_INT 1
23701: PPUSH
23702: CALL 31773 0 4
23706: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23707: LD_ADDR_VAR 0 5
23711: PUSH
23712: LD_EXP 103
23716: PPUSH
23717: LD_VAR 0 1
23721: PPUSH
23722: CALL 31123 0 2
23726: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23727: LD_EXP 104
23731: PUSH
23732: LD_VAR 0 5
23736: ARRAY
23737: PUSH
23738: LD_EXP 105
23742: LESS
23743: IFFALSE 23932
// begin for i := 1 to vehicles do
23745: LD_ADDR_VAR 0 4
23749: PUSH
23750: DOUBLE
23751: LD_INT 1
23753: DEC
23754: ST_TO_ADDR
23755: LD_VAR 0 2
23759: PUSH
23760: FOR_TO
23761: IFFALSE 23930
// begin if hackTanksCaptured [ index ] = hackLimit then
23763: LD_EXP 104
23767: PUSH
23768: LD_VAR 0 5
23772: ARRAY
23773: PUSH
23774: LD_EXP 105
23778: EQUAL
23779: IFFALSE 23783
// break ;
23781: GO 23930
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23783: LD_ADDR_EXP 107
23787: PUSH
23788: LD_EXP 107
23792: PPUSH
23793: LD_VAR 0 5
23797: PPUSH
23798: LD_EXP 107
23802: PUSH
23803: LD_VAR 0 5
23807: ARRAY
23808: PUSH
23809: LD_INT 1
23811: PLUS
23812: PPUSH
23813: CALL_OW 1
23817: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23818: LD_ADDR_EXP 104
23822: PUSH
23823: LD_EXP 104
23827: PPUSH
23828: LD_VAR 0 5
23832: PUSH
23833: LD_EXP 104
23837: PUSH
23838: LD_VAR 0 5
23842: ARRAY
23843: PUSH
23844: LD_INT 1
23846: PLUS
23847: PUSH
23848: EMPTY
23849: LIST
23850: LIST
23851: PPUSH
23852: LD_VAR 0 2
23856: PUSH
23857: LD_VAR 0 4
23861: ARRAY
23862: PUSH
23863: LD_VAR 0 2
23867: PUSH
23868: LD_VAR 0 4
23872: ARRAY
23873: PPUSH
23874: CALL_OW 255
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PPUSH
23883: CALL 31338 0 3
23887: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23888: LD_VAR 0 2
23892: PUSH
23893: LD_VAR 0 4
23897: ARRAY
23898: PPUSH
23899: LD_VAR 0 1
23903: PPUSH
23904: CALL_OW 255
23908: PPUSH
23909: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23913: LD_VAR 0 2
23917: PUSH
23918: LD_VAR 0 4
23922: ARRAY
23923: PPUSH
23924: CALL_OW 141
// end ;
23928: GO 23760
23930: POP
23931: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23932: LD_VAR 0 1
23936: PPUSH
23937: LD_EXP 104
23941: PUSH
23942: LD_VAR 0 5
23946: ARRAY
23947: PUSH
23948: LD_INT 0
23950: PLUS
23951: PPUSH
23952: CALL_OW 505
// end ;
23956: LD_VAR 0 3
23960: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23961: LD_INT 0
23963: PPUSH
23964: PPUSH
23965: PPUSH
23966: PPUSH
// if not hack in hackTanks then
23967: LD_VAR 0 1
23971: PUSH
23972: LD_EXP 103
23976: IN
23977: NOT
23978: IFFALSE 23982
// exit ;
23980: GO 24222
// index := GetElementIndex ( hackTanks , hack ) ;
23982: LD_ADDR_VAR 0 4
23986: PUSH
23987: LD_EXP 103
23991: PPUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL 31123 0 2
24001: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24002: LD_ADDR_VAR 0 3
24006: PUSH
24007: DOUBLE
24008: LD_EXP 104
24012: PUSH
24013: LD_VAR 0 4
24017: ARRAY
24018: INC
24019: ST_TO_ADDR
24020: LD_INT 1
24022: PUSH
24023: FOR_DOWNTO
24024: IFFALSE 24196
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24026: LD_ADDR_VAR 0 5
24030: PUSH
24031: LD_EXP 104
24035: PUSH
24036: LD_VAR 0 4
24040: ARRAY
24041: PUSH
24042: LD_VAR 0 3
24046: ARRAY
24047: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24048: LD_VAR 0 5
24052: PUSH
24053: LD_INT 1
24055: ARRAY
24056: PPUSH
24057: CALL_OW 302
24061: NOT
24062: PUSH
24063: LD_VAR 0 5
24067: PUSH
24068: LD_INT 1
24070: ARRAY
24071: PPUSH
24072: CALL_OW 255
24076: PUSH
24077: LD_VAR 0 1
24081: PPUSH
24082: CALL_OW 255
24086: NONEQUAL
24087: OR
24088: IFFALSE 24194
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24090: LD_VAR 0 5
24094: PUSH
24095: LD_INT 1
24097: ARRAY
24098: PPUSH
24099: CALL_OW 305
24103: PUSH
24104: LD_VAR 0 5
24108: PUSH
24109: LD_INT 1
24111: ARRAY
24112: PPUSH
24113: CALL_OW 255
24117: PUSH
24118: LD_VAR 0 1
24122: PPUSH
24123: CALL_OW 255
24127: EQUAL
24128: AND
24129: IFFALSE 24153
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24131: LD_VAR 0 5
24135: PUSH
24136: LD_INT 1
24138: ARRAY
24139: PPUSH
24140: LD_VAR 0 5
24144: PUSH
24145: LD_INT 2
24147: ARRAY
24148: PPUSH
24149: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24153: LD_ADDR_EXP 104
24157: PUSH
24158: LD_EXP 104
24162: PPUSH
24163: LD_VAR 0 4
24167: PPUSH
24168: LD_EXP 104
24172: PUSH
24173: LD_VAR 0 4
24177: ARRAY
24178: PPUSH
24179: LD_VAR 0 3
24183: PPUSH
24184: CALL_OW 3
24188: PPUSH
24189: CALL_OW 1
24193: ST_TO_ADDR
// end ; end ;
24194: GO 24023
24196: POP
24197: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: LD_EXP 104
24207: PUSH
24208: LD_VAR 0 4
24212: ARRAY
24213: PUSH
24214: LD_INT 0
24216: PLUS
24217: PPUSH
24218: CALL_OW 505
// end ;
24222: LD_VAR 0 2
24226: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24227: LD_INT 0
24229: PPUSH
24230: PPUSH
24231: PPUSH
24232: PPUSH
// if not hack in hackTanks then
24233: LD_VAR 0 1
24237: PUSH
24238: LD_EXP 103
24242: IN
24243: NOT
24244: IFFALSE 24248
// exit ;
24246: GO 24333
// index := GetElementIndex ( hackTanks , hack ) ;
24248: LD_ADDR_VAR 0 5
24252: PUSH
24253: LD_EXP 103
24257: PPUSH
24258: LD_VAR 0 1
24262: PPUSH
24263: CALL 31123 0 2
24267: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24268: LD_ADDR_VAR 0 4
24272: PUSH
24273: DOUBLE
24274: LD_INT 1
24276: DEC
24277: ST_TO_ADDR
24278: LD_EXP 104
24282: PUSH
24283: LD_VAR 0 5
24287: ARRAY
24288: PUSH
24289: FOR_TO
24290: IFFALSE 24331
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24292: LD_EXP 104
24296: PUSH
24297: LD_VAR 0 5
24301: ARRAY
24302: PUSH
24303: LD_VAR 0 4
24307: ARRAY
24308: PUSH
24309: LD_INT 1
24311: ARRAY
24312: PUSH
24313: LD_VAR 0 2
24317: EQUAL
24318: IFFALSE 24329
// KillUnit ( vehicle ) ;
24320: LD_VAR 0 2
24324: PPUSH
24325: CALL_OW 66
24329: GO 24289
24331: POP
24332: POP
// end ;
24333: LD_VAR 0 3
24337: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24338: LD_EXP 108
24342: NOT
24343: IFFALSE 24378
24345: GO 24347
24347: DISABLE
// begin initMiner := true ;
24348: LD_ADDR_EXP 108
24352: PUSH
24353: LD_INT 1
24355: ST_TO_ADDR
// minersList := [ ] ;
24356: LD_ADDR_EXP 109
24360: PUSH
24361: EMPTY
24362: ST_TO_ADDR
// minerMinesList := [ ] ;
24363: LD_ADDR_EXP 110
24367: PUSH
24368: EMPTY
24369: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24370: LD_ADDR_EXP 111
24374: PUSH
24375: LD_INT 5
24377: ST_TO_ADDR
// end ;
24378: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24379: LD_EXP 108
24383: PUSH
24384: LD_INT 34
24386: PUSH
24387: LD_EXP 31
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PPUSH
24396: CALL_OW 69
24400: AND
24401: IFFALSE 24864
24403: GO 24405
24405: DISABLE
24406: LD_INT 0
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
// begin enable ;
24412: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24413: LD_ADDR_VAR 0 1
24417: PUSH
24418: LD_INT 34
24420: PUSH
24421: LD_EXP 31
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PPUSH
24430: CALL_OW 69
24434: PUSH
24435: FOR_IN
24436: IFFALSE 24508
// begin if not i in minersList then
24438: LD_VAR 0 1
24442: PUSH
24443: LD_EXP 109
24447: IN
24448: NOT
24449: IFFALSE 24506
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24451: LD_ADDR_EXP 109
24455: PUSH
24456: LD_EXP 109
24460: PPUSH
24461: LD_EXP 109
24465: PUSH
24466: LD_INT 1
24468: PLUS
24469: PPUSH
24470: LD_VAR 0 1
24474: PPUSH
24475: CALL_OW 1
24479: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24480: LD_ADDR_EXP 110
24484: PUSH
24485: LD_EXP 110
24489: PPUSH
24490: LD_EXP 110
24494: PUSH
24495: LD_INT 1
24497: PLUS
24498: PPUSH
24499: EMPTY
24500: PPUSH
24501: CALL_OW 1
24505: ST_TO_ADDR
// end end ;
24506: GO 24435
24508: POP
24509: POP
// for i := minerMinesList downto 1 do
24510: LD_ADDR_VAR 0 1
24514: PUSH
24515: DOUBLE
24516: LD_EXP 110
24520: INC
24521: ST_TO_ADDR
24522: LD_INT 1
24524: PUSH
24525: FOR_DOWNTO
24526: IFFALSE 24862
// begin if IsLive ( minersList [ i ] ) then
24528: LD_EXP 109
24532: PUSH
24533: LD_VAR 0 1
24537: ARRAY
24538: PPUSH
24539: CALL_OW 300
24543: IFFALSE 24571
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24545: LD_EXP 109
24549: PUSH
24550: LD_VAR 0 1
24554: ARRAY
24555: PPUSH
24556: LD_EXP 110
24560: PUSH
24561: LD_VAR 0 1
24565: ARRAY
24566: PPUSH
24567: CALL_OW 505
// if not minerMinesList [ i ] then
24571: LD_EXP 110
24575: PUSH
24576: LD_VAR 0 1
24580: ARRAY
24581: NOT
24582: IFFALSE 24586
// continue ;
24584: GO 24525
// for j := minerMinesList [ i ] downto 1 do
24586: LD_ADDR_VAR 0 2
24590: PUSH
24591: DOUBLE
24592: LD_EXP 110
24596: PUSH
24597: LD_VAR 0 1
24601: ARRAY
24602: INC
24603: ST_TO_ADDR
24604: LD_INT 1
24606: PUSH
24607: FOR_DOWNTO
24608: IFFALSE 24858
// begin side := GetSide ( minersList [ i ] ) ;
24610: LD_ADDR_VAR 0 3
24614: PUSH
24615: LD_EXP 109
24619: PUSH
24620: LD_VAR 0 1
24624: ARRAY
24625: PPUSH
24626: CALL_OW 255
24630: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24631: LD_ADDR_VAR 0 4
24635: PUSH
24636: LD_EXP 110
24640: PUSH
24641: LD_VAR 0 1
24645: ARRAY
24646: PUSH
24647: LD_VAR 0 2
24651: ARRAY
24652: PUSH
24653: LD_INT 1
24655: ARRAY
24656: PPUSH
24657: LD_EXP 110
24661: PUSH
24662: LD_VAR 0 1
24666: ARRAY
24667: PUSH
24668: LD_VAR 0 2
24672: ARRAY
24673: PUSH
24674: LD_INT 2
24676: ARRAY
24677: PPUSH
24678: CALL_OW 428
24682: ST_TO_ADDR
// if not tmp then
24683: LD_VAR 0 4
24687: NOT
24688: IFFALSE 24692
// continue ;
24690: GO 24607
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24692: LD_VAR 0 4
24696: PUSH
24697: LD_INT 81
24699: PUSH
24700: LD_VAR 0 3
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PPUSH
24709: CALL_OW 69
24713: IN
24714: PUSH
24715: LD_EXP 110
24719: PUSH
24720: LD_VAR 0 1
24724: ARRAY
24725: PUSH
24726: LD_VAR 0 2
24730: ARRAY
24731: PUSH
24732: LD_INT 1
24734: ARRAY
24735: PPUSH
24736: LD_EXP 110
24740: PUSH
24741: LD_VAR 0 1
24745: ARRAY
24746: PUSH
24747: LD_VAR 0 2
24751: ARRAY
24752: PUSH
24753: LD_INT 2
24755: ARRAY
24756: PPUSH
24757: CALL_OW 458
24761: AND
24762: IFFALSE 24856
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24764: LD_EXP 110
24768: PUSH
24769: LD_VAR 0 1
24773: ARRAY
24774: PUSH
24775: LD_VAR 0 2
24779: ARRAY
24780: PUSH
24781: LD_INT 1
24783: ARRAY
24784: PPUSH
24785: LD_EXP 110
24789: PUSH
24790: LD_VAR 0 1
24794: ARRAY
24795: PUSH
24796: LD_VAR 0 2
24800: ARRAY
24801: PUSH
24802: LD_INT 2
24804: ARRAY
24805: PPUSH
24806: LD_VAR 0 3
24810: PPUSH
24811: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24815: LD_ADDR_EXP 110
24819: PUSH
24820: LD_EXP 110
24824: PPUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: LD_EXP 110
24834: PUSH
24835: LD_VAR 0 1
24839: ARRAY
24840: PPUSH
24841: LD_VAR 0 2
24845: PPUSH
24846: CALL_OW 3
24850: PPUSH
24851: CALL_OW 1
24855: ST_TO_ADDR
// end ; end ;
24856: GO 24607
24858: POP
24859: POP
// end ;
24860: GO 24525
24862: POP
24863: POP
// end ;
24864: PPOPN 4
24866: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24867: LD_INT 0
24869: PPUSH
24870: PPUSH
// result := false ;
24871: LD_ADDR_VAR 0 4
24875: PUSH
24876: LD_INT 0
24878: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24879: LD_VAR 0 1
24883: PPUSH
24884: CALL_OW 264
24888: PUSH
24889: LD_EXP 31
24893: EQUAL
24894: NOT
24895: IFFALSE 24899
// exit ;
24897: GO 25139
// index := GetElementIndex ( minersList , unit ) ;
24899: LD_ADDR_VAR 0 5
24903: PUSH
24904: LD_EXP 109
24908: PPUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL 31123 0 2
24918: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24919: LD_EXP 110
24923: PUSH
24924: LD_VAR 0 5
24928: ARRAY
24929: PUSH
24930: LD_EXP 111
24934: GREATEREQUAL
24935: IFFALSE 24939
// exit ;
24937: GO 25139
// ComMoveXY ( unit , x , y ) ;
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_VAR 0 2
24948: PPUSH
24949: LD_VAR 0 3
24953: PPUSH
24954: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24958: LD_INT 35
24960: PPUSH
24961: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24965: LD_VAR 0 1
24969: PPUSH
24970: LD_VAR 0 2
24974: PPUSH
24975: LD_VAR 0 3
24979: PPUSH
24980: CALL 61895 0 3
24984: NOT
24985: PUSH
24986: LD_VAR 0 1
24990: PPUSH
24991: CALL_OW 314
24995: AND
24996: IFFALSE 25000
// exit ;
24998: GO 25139
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25000: LD_VAR 0 2
25004: PPUSH
25005: LD_VAR 0 3
25009: PPUSH
25010: CALL_OW 428
25014: PUSH
25015: LD_VAR 0 1
25019: EQUAL
25020: PUSH
25021: LD_VAR 0 1
25025: PPUSH
25026: CALL_OW 314
25030: NOT
25031: AND
25032: IFFALSE 24958
// PlaySoundXY ( x , y , PlantMine ) ;
25034: LD_VAR 0 2
25038: PPUSH
25039: LD_VAR 0 3
25043: PPUSH
25044: LD_STRING PlantMine
25046: PPUSH
25047: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25051: LD_VAR 0 2
25055: PPUSH
25056: LD_VAR 0 3
25060: PPUSH
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL_OW 255
25070: PPUSH
25071: LD_INT 0
25073: PPUSH
25074: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25078: LD_ADDR_EXP 110
25082: PUSH
25083: LD_EXP 110
25087: PPUSH
25088: LD_VAR 0 5
25092: PUSH
25093: LD_EXP 110
25097: PUSH
25098: LD_VAR 0 5
25102: ARRAY
25103: PUSH
25104: LD_INT 1
25106: PLUS
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PPUSH
25112: LD_VAR 0 2
25116: PUSH
25117: LD_VAR 0 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PPUSH
25126: CALL 31338 0 3
25130: ST_TO_ADDR
// result := true ;
25131: LD_ADDR_VAR 0 4
25135: PUSH
25136: LD_INT 1
25138: ST_TO_ADDR
// end ;
25139: LD_VAR 0 4
25143: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25144: LD_INT 0
25146: PPUSH
25147: PPUSH
25148: PPUSH
// if not unit in minersList then
25149: LD_VAR 0 1
25153: PUSH
25154: LD_EXP 109
25158: IN
25159: NOT
25160: IFFALSE 25164
// exit ;
25162: GO 25556
// index := GetElementIndex ( minersList , unit ) ;
25164: LD_ADDR_VAR 0 6
25168: PUSH
25169: LD_EXP 109
25173: PPUSH
25174: LD_VAR 0 1
25178: PPUSH
25179: CALL 31123 0 2
25183: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25184: LD_ADDR_VAR 0 5
25188: PUSH
25189: DOUBLE
25190: LD_EXP 110
25194: PUSH
25195: LD_VAR 0 6
25199: ARRAY
25200: INC
25201: ST_TO_ADDR
25202: LD_INT 1
25204: PUSH
25205: FOR_DOWNTO
25206: IFFALSE 25367
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25208: LD_EXP 110
25212: PUSH
25213: LD_VAR 0 6
25217: ARRAY
25218: PUSH
25219: LD_VAR 0 5
25223: ARRAY
25224: PUSH
25225: LD_INT 1
25227: ARRAY
25228: PUSH
25229: LD_VAR 0 2
25233: EQUAL
25234: PUSH
25235: LD_EXP 110
25239: PUSH
25240: LD_VAR 0 6
25244: ARRAY
25245: PUSH
25246: LD_VAR 0 5
25250: ARRAY
25251: PUSH
25252: LD_INT 2
25254: ARRAY
25255: PUSH
25256: LD_VAR 0 3
25260: EQUAL
25261: AND
25262: IFFALSE 25365
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25264: LD_EXP 110
25268: PUSH
25269: LD_VAR 0 6
25273: ARRAY
25274: PUSH
25275: LD_VAR 0 5
25279: ARRAY
25280: PUSH
25281: LD_INT 1
25283: ARRAY
25284: PPUSH
25285: LD_EXP 110
25289: PUSH
25290: LD_VAR 0 6
25294: ARRAY
25295: PUSH
25296: LD_VAR 0 5
25300: ARRAY
25301: PUSH
25302: LD_INT 2
25304: ARRAY
25305: PPUSH
25306: LD_VAR 0 1
25310: PPUSH
25311: CALL_OW 255
25315: PPUSH
25316: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25320: LD_ADDR_EXP 110
25324: PUSH
25325: LD_EXP 110
25329: PPUSH
25330: LD_VAR 0 6
25334: PPUSH
25335: LD_EXP 110
25339: PUSH
25340: LD_VAR 0 6
25344: ARRAY
25345: PPUSH
25346: LD_VAR 0 5
25350: PPUSH
25351: CALL_OW 3
25355: PPUSH
25356: CALL_OW 1
25360: ST_TO_ADDR
// exit ;
25361: POP
25362: POP
25363: GO 25556
// end ; end ;
25365: GO 25205
25367: POP
25368: POP
// for i := minerMinesList [ index ] downto 1 do
25369: LD_ADDR_VAR 0 5
25373: PUSH
25374: DOUBLE
25375: LD_EXP 110
25379: PUSH
25380: LD_VAR 0 6
25384: ARRAY
25385: INC
25386: ST_TO_ADDR
25387: LD_INT 1
25389: PUSH
25390: FOR_DOWNTO
25391: IFFALSE 25554
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25393: LD_EXP 110
25397: PUSH
25398: LD_VAR 0 6
25402: ARRAY
25403: PUSH
25404: LD_VAR 0 5
25408: ARRAY
25409: PUSH
25410: LD_INT 1
25412: ARRAY
25413: PPUSH
25414: LD_EXP 110
25418: PUSH
25419: LD_VAR 0 6
25423: ARRAY
25424: PUSH
25425: LD_VAR 0 5
25429: ARRAY
25430: PUSH
25431: LD_INT 2
25433: ARRAY
25434: PPUSH
25435: LD_VAR 0 2
25439: PPUSH
25440: LD_VAR 0 3
25444: PPUSH
25445: CALL_OW 298
25449: PUSH
25450: LD_INT 6
25452: LESS
25453: IFFALSE 25552
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25455: LD_EXP 110
25459: PUSH
25460: LD_VAR 0 6
25464: ARRAY
25465: PUSH
25466: LD_VAR 0 5
25470: ARRAY
25471: PUSH
25472: LD_INT 1
25474: ARRAY
25475: PPUSH
25476: LD_EXP 110
25480: PUSH
25481: LD_VAR 0 6
25485: ARRAY
25486: PUSH
25487: LD_VAR 0 5
25491: ARRAY
25492: PUSH
25493: LD_INT 2
25495: ARRAY
25496: PPUSH
25497: LD_VAR 0 1
25501: PPUSH
25502: CALL_OW 255
25506: PPUSH
25507: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25511: LD_ADDR_EXP 110
25515: PUSH
25516: LD_EXP 110
25520: PPUSH
25521: LD_VAR 0 6
25525: PPUSH
25526: LD_EXP 110
25530: PUSH
25531: LD_VAR 0 6
25535: ARRAY
25536: PPUSH
25537: LD_VAR 0 5
25541: PPUSH
25542: CALL_OW 3
25546: PPUSH
25547: CALL_OW 1
25551: ST_TO_ADDR
// end ; end ;
25552: GO 25390
25554: POP
25555: POP
// end ;
25556: LD_VAR 0 4
25560: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25561: LD_INT 0
25563: PPUSH
25564: PPUSH
25565: PPUSH
25566: PPUSH
25567: PPUSH
25568: PPUSH
25569: PPUSH
25570: PPUSH
25571: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25572: LD_VAR 0 1
25576: PPUSH
25577: CALL_OW 264
25581: PUSH
25582: LD_EXP 31
25586: EQUAL
25587: NOT
25588: PUSH
25589: LD_VAR 0 1
25593: PUSH
25594: LD_EXP 109
25598: IN
25599: NOT
25600: OR
25601: IFFALSE 25605
// exit ;
25603: GO 25927
// index := GetElementIndex ( minersList , unit ) ;
25605: LD_ADDR_VAR 0 6
25609: PUSH
25610: LD_EXP 109
25614: PPUSH
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL 31123 0 2
25624: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25625: LD_ADDR_VAR 0 8
25629: PUSH
25630: LD_EXP 111
25634: PUSH
25635: LD_EXP 110
25639: PUSH
25640: LD_VAR 0 6
25644: ARRAY
25645: MINUS
25646: ST_TO_ADDR
// if not minesFreeAmount then
25647: LD_VAR 0 8
25651: NOT
25652: IFFALSE 25656
// exit ;
25654: GO 25927
// tmp := [ ] ;
25656: LD_ADDR_VAR 0 7
25660: PUSH
25661: EMPTY
25662: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25663: LD_ADDR_VAR 0 5
25667: PUSH
25668: DOUBLE
25669: LD_INT 1
25671: DEC
25672: ST_TO_ADDR
25673: LD_VAR 0 8
25677: PUSH
25678: FOR_TO
25679: IFFALSE 25874
// begin _d := rand ( 0 , 5 ) ;
25681: LD_ADDR_VAR 0 11
25685: PUSH
25686: LD_INT 0
25688: PPUSH
25689: LD_INT 5
25691: PPUSH
25692: CALL_OW 12
25696: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25697: LD_ADDR_VAR 0 12
25701: PUSH
25702: LD_INT 2
25704: PPUSH
25705: LD_INT 6
25707: PPUSH
25708: CALL_OW 12
25712: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25713: LD_ADDR_VAR 0 9
25717: PUSH
25718: LD_VAR 0 2
25722: PPUSH
25723: LD_VAR 0 11
25727: PPUSH
25728: LD_VAR 0 12
25732: PPUSH
25733: CALL_OW 272
25737: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25738: LD_ADDR_VAR 0 10
25742: PUSH
25743: LD_VAR 0 3
25747: PPUSH
25748: LD_VAR 0 11
25752: PPUSH
25753: LD_VAR 0 12
25757: PPUSH
25758: CALL_OW 273
25762: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25763: LD_VAR 0 9
25767: PPUSH
25768: LD_VAR 0 10
25772: PPUSH
25773: CALL_OW 488
25777: PUSH
25778: LD_VAR 0 9
25782: PUSH
25783: LD_VAR 0 10
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: PUSH
25792: LD_VAR 0 7
25796: IN
25797: NOT
25798: AND
25799: PUSH
25800: LD_VAR 0 9
25804: PPUSH
25805: LD_VAR 0 10
25809: PPUSH
25810: CALL_OW 458
25814: NOT
25815: AND
25816: IFFALSE 25858
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25818: LD_ADDR_VAR 0 7
25822: PUSH
25823: LD_VAR 0 7
25827: PPUSH
25828: LD_VAR 0 7
25832: PUSH
25833: LD_INT 1
25835: PLUS
25836: PPUSH
25837: LD_VAR 0 9
25841: PUSH
25842: LD_VAR 0 10
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PPUSH
25851: CALL_OW 1
25855: ST_TO_ADDR
25856: GO 25872
// i := i - 1 ;
25858: LD_ADDR_VAR 0 5
25862: PUSH
25863: LD_VAR 0 5
25867: PUSH
25868: LD_INT 1
25870: MINUS
25871: ST_TO_ADDR
// end ;
25872: GO 25678
25874: POP
25875: POP
// for i in tmp do
25876: LD_ADDR_VAR 0 5
25880: PUSH
25881: LD_VAR 0 7
25885: PUSH
25886: FOR_IN
25887: IFFALSE 25925
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25889: LD_VAR 0 1
25893: PPUSH
25894: LD_VAR 0 5
25898: PUSH
25899: LD_INT 1
25901: ARRAY
25902: PPUSH
25903: LD_VAR 0 5
25907: PUSH
25908: LD_INT 2
25910: ARRAY
25911: PPUSH
25912: CALL 24867 0 3
25916: NOT
25917: IFFALSE 25923
// exit ;
25919: POP
25920: POP
25921: GO 25927
25923: GO 25886
25925: POP
25926: POP
// end ;
25927: LD_VAR 0 4
25931: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25932: LD_INT 0
25934: PPUSH
25935: PPUSH
25936: PPUSH
25937: PPUSH
25938: PPUSH
25939: PPUSH
25940: PPUSH
// if not GetClass ( unit ) = class_sniper then
25941: LD_VAR 0 1
25945: PPUSH
25946: CALL_OW 257
25950: PUSH
25951: LD_INT 5
25953: EQUAL
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26347
// dist := 8 ;
25959: LD_ADDR_VAR 0 5
25963: PUSH
25964: LD_INT 8
25966: ST_TO_ADDR
// viewRange := 12 ;
25967: LD_ADDR_VAR 0 7
25971: PUSH
25972: LD_INT 12
25974: ST_TO_ADDR
// side := GetSide ( unit ) ;
25975: LD_ADDR_VAR 0 6
25979: PUSH
25980: LD_VAR 0 1
25984: PPUSH
25985: CALL_OW 255
25989: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25990: LD_INT 61
25992: PPUSH
25993: LD_VAR 0 6
25997: PPUSH
25998: CALL_OW 321
26002: PUSH
26003: LD_INT 2
26005: EQUAL
26006: IFFALSE 26016
// viewRange := 16 ;
26008: LD_ADDR_VAR 0 7
26012: PUSH
26013: LD_INT 16
26015: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26016: LD_VAR 0 1
26020: PPUSH
26021: LD_VAR 0 2
26025: PPUSH
26026: LD_VAR 0 3
26030: PPUSH
26031: CALL_OW 297
26035: PUSH
26036: LD_VAR 0 5
26040: GREATER
26041: IFFALSE 26120
// begin ComMoveXY ( unit , x , y ) ;
26043: LD_VAR 0 1
26047: PPUSH
26048: LD_VAR 0 2
26052: PPUSH
26053: LD_VAR 0 3
26057: PPUSH
26058: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26062: LD_INT 35
26064: PPUSH
26065: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26069: LD_VAR 0 1
26073: PPUSH
26074: LD_VAR 0 2
26078: PPUSH
26079: LD_VAR 0 3
26083: PPUSH
26084: CALL 61895 0 3
26088: NOT
26089: IFFALSE 26093
// exit ;
26091: GO 26347
// until GetDistUnitXY ( unit , x , y ) < dist ;
26093: LD_VAR 0 1
26097: PPUSH
26098: LD_VAR 0 2
26102: PPUSH
26103: LD_VAR 0 3
26107: PPUSH
26108: CALL_OW 297
26112: PUSH
26113: LD_VAR 0 5
26117: LESS
26118: IFFALSE 26062
// end ; ComTurnXY ( unit , x , y ) ;
26120: LD_VAR 0 1
26124: PPUSH
26125: LD_VAR 0 2
26129: PPUSH
26130: LD_VAR 0 3
26134: PPUSH
26135: CALL_OW 118
// wait ( 5 ) ;
26139: LD_INT 5
26141: PPUSH
26142: CALL_OW 67
// _d := GetDir ( unit ) ;
26146: LD_ADDR_VAR 0 10
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 254
26160: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26161: LD_ADDR_VAR 0 8
26165: PUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: CALL_OW 250
26175: PPUSH
26176: LD_VAR 0 10
26180: PPUSH
26181: LD_VAR 0 5
26185: PPUSH
26186: CALL_OW 272
26190: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26191: LD_ADDR_VAR 0 9
26195: PUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: CALL_OW 251
26205: PPUSH
26206: LD_VAR 0 10
26210: PPUSH
26211: LD_VAR 0 5
26215: PPUSH
26216: CALL_OW 273
26220: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26221: LD_VAR 0 8
26225: PPUSH
26226: LD_VAR 0 9
26230: PPUSH
26231: CALL_OW 488
26235: NOT
26236: IFFALSE 26240
// exit ;
26238: GO 26347
// ComAnimCustom ( unit , 1 ) ;
26240: LD_VAR 0 1
26244: PPUSH
26245: LD_INT 1
26247: PPUSH
26248: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26252: LD_VAR 0 8
26256: PPUSH
26257: LD_VAR 0 9
26261: PPUSH
26262: LD_VAR 0 6
26266: PPUSH
26267: LD_VAR 0 7
26271: PPUSH
26272: CALL_OW 330
// repeat wait ( 1 ) ;
26276: LD_INT 1
26278: PPUSH
26279: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 316
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 314
26302: OR
26303: PUSH
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL_OW 302
26313: NOT
26314: OR
26315: PUSH
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 301
26325: OR
26326: IFFALSE 26276
// RemoveSeeing ( _x , _y , side ) ;
26328: LD_VAR 0 8
26332: PPUSH
26333: LD_VAR 0 9
26337: PPUSH
26338: LD_VAR 0 6
26342: PPUSH
26343: CALL_OW 331
// end ; end_of_file
26347: LD_VAR 0 4
26351: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26352: LD_INT 0
26354: PPUSH
26355: PPUSH
// if exist_mode then
26356: LD_VAR 0 2
26360: IFFALSE 26385
// unit := CreateCharacter ( prefix & ident ) else
26362: LD_ADDR_VAR 0 5
26366: PUSH
26367: LD_VAR 0 3
26371: PUSH
26372: LD_VAR 0 1
26376: STR
26377: PPUSH
26378: CALL_OW 34
26382: ST_TO_ADDR
26383: GO 26400
// unit := NewCharacter ( ident ) ;
26385: LD_ADDR_VAR 0 5
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: CALL_OW 25
26399: ST_TO_ADDR
// result := unit ;
26400: LD_ADDR_VAR 0 4
26404: PUSH
26405: LD_VAR 0 5
26409: ST_TO_ADDR
// end ;
26410: LD_VAR 0 4
26414: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26415: LD_INT 0
26417: PPUSH
26418: PPUSH
// if not side or not nation then
26419: LD_VAR 0 1
26423: NOT
26424: PUSH
26425: LD_VAR 0 2
26429: NOT
26430: OR
26431: IFFALSE 26435
// exit ;
26433: GO 27203
// case nation of nation_american :
26435: LD_VAR 0 2
26439: PUSH
26440: LD_INT 1
26442: DOUBLE
26443: EQUAL
26444: IFTRUE 26448
26446: GO 26662
26448: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26449: LD_ADDR_VAR 0 4
26453: PUSH
26454: LD_INT 35
26456: PUSH
26457: LD_INT 45
26459: PUSH
26460: LD_INT 46
26462: PUSH
26463: LD_INT 47
26465: PUSH
26466: LD_INT 82
26468: PUSH
26469: LD_INT 83
26471: PUSH
26472: LD_INT 84
26474: PUSH
26475: LD_INT 85
26477: PUSH
26478: LD_INT 86
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: LD_INT 2
26486: PUSH
26487: LD_INT 6
26489: PUSH
26490: LD_INT 15
26492: PUSH
26493: LD_INT 16
26495: PUSH
26496: LD_INT 7
26498: PUSH
26499: LD_INT 12
26501: PUSH
26502: LD_INT 13
26504: PUSH
26505: LD_INT 10
26507: PUSH
26508: LD_INT 14
26510: PUSH
26511: LD_INT 20
26513: PUSH
26514: LD_INT 21
26516: PUSH
26517: LD_INT 22
26519: PUSH
26520: LD_INT 25
26522: PUSH
26523: LD_INT 32
26525: PUSH
26526: LD_INT 27
26528: PUSH
26529: LD_INT 36
26531: PUSH
26532: LD_INT 69
26534: PUSH
26535: LD_INT 39
26537: PUSH
26538: LD_INT 34
26540: PUSH
26541: LD_INT 40
26543: PUSH
26544: LD_INT 48
26546: PUSH
26547: LD_INT 49
26549: PUSH
26550: LD_INT 50
26552: PUSH
26553: LD_INT 51
26555: PUSH
26556: LD_INT 52
26558: PUSH
26559: LD_INT 53
26561: PUSH
26562: LD_INT 54
26564: PUSH
26565: LD_INT 55
26567: PUSH
26568: LD_INT 56
26570: PUSH
26571: LD_INT 57
26573: PUSH
26574: LD_INT 58
26576: PUSH
26577: LD_INT 59
26579: PUSH
26580: LD_INT 60
26582: PUSH
26583: LD_INT 61
26585: PUSH
26586: LD_INT 62
26588: PUSH
26589: LD_INT 80
26591: PUSH
26592: LD_INT 82
26594: PUSH
26595: LD_INT 83
26597: PUSH
26598: LD_INT 84
26600: PUSH
26601: LD_INT 85
26603: PUSH
26604: LD_INT 86
26606: PUSH
26607: EMPTY
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: ST_TO_ADDR
26660: GO 27127
26662: LD_INT 2
26664: DOUBLE
26665: EQUAL
26666: IFTRUE 26670
26668: GO 26896
26670: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26671: LD_ADDR_VAR 0 4
26675: PUSH
26676: LD_INT 35
26678: PUSH
26679: LD_INT 45
26681: PUSH
26682: LD_INT 46
26684: PUSH
26685: LD_INT 47
26687: PUSH
26688: LD_INT 82
26690: PUSH
26691: LD_INT 83
26693: PUSH
26694: LD_INT 84
26696: PUSH
26697: LD_INT 85
26699: PUSH
26700: LD_INT 87
26702: PUSH
26703: LD_INT 70
26705: PUSH
26706: LD_INT 1
26708: PUSH
26709: LD_INT 11
26711: PUSH
26712: LD_INT 3
26714: PUSH
26715: LD_INT 4
26717: PUSH
26718: LD_INT 5
26720: PUSH
26721: LD_INT 6
26723: PUSH
26724: LD_INT 15
26726: PUSH
26727: LD_INT 18
26729: PUSH
26730: LD_INT 7
26732: PUSH
26733: LD_INT 17
26735: PUSH
26736: LD_INT 8
26738: PUSH
26739: LD_INT 20
26741: PUSH
26742: LD_INT 21
26744: PUSH
26745: LD_INT 22
26747: PUSH
26748: LD_INT 72
26750: PUSH
26751: LD_INT 26
26753: PUSH
26754: LD_INT 69
26756: PUSH
26757: LD_INT 39
26759: PUSH
26760: LD_INT 40
26762: PUSH
26763: LD_INT 41
26765: PUSH
26766: LD_INT 42
26768: PUSH
26769: LD_INT 43
26771: PUSH
26772: LD_INT 48
26774: PUSH
26775: LD_INT 49
26777: PUSH
26778: LD_INT 50
26780: PUSH
26781: LD_INT 51
26783: PUSH
26784: LD_INT 52
26786: PUSH
26787: LD_INT 53
26789: PUSH
26790: LD_INT 54
26792: PUSH
26793: LD_INT 55
26795: PUSH
26796: LD_INT 56
26798: PUSH
26799: LD_INT 60
26801: PUSH
26802: LD_INT 61
26804: PUSH
26805: LD_INT 62
26807: PUSH
26808: LD_INT 66
26810: PUSH
26811: LD_INT 67
26813: PUSH
26814: LD_INT 68
26816: PUSH
26817: LD_INT 81
26819: PUSH
26820: LD_INT 82
26822: PUSH
26823: LD_INT 83
26825: PUSH
26826: LD_INT 84
26828: PUSH
26829: LD_INT 85
26831: PUSH
26832: LD_INT 87
26834: PUSH
26835: LD_INT 88
26837: PUSH
26838: EMPTY
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: LIST
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: LIST
26859: LIST
26860: LIST
26861: LIST
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: ST_TO_ADDR
26894: GO 27127
26896: LD_INT 3
26898: DOUBLE
26899: EQUAL
26900: IFTRUE 26904
26902: GO 27126
26904: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26905: LD_ADDR_VAR 0 4
26909: PUSH
26910: LD_INT 46
26912: PUSH
26913: LD_INT 47
26915: PUSH
26916: LD_INT 1
26918: PUSH
26919: LD_INT 2
26921: PUSH
26922: LD_INT 82
26924: PUSH
26925: LD_INT 83
26927: PUSH
26928: LD_INT 84
26930: PUSH
26931: LD_INT 85
26933: PUSH
26934: LD_INT 86
26936: PUSH
26937: LD_INT 11
26939: PUSH
26940: LD_INT 9
26942: PUSH
26943: LD_INT 20
26945: PUSH
26946: LD_INT 19
26948: PUSH
26949: LD_INT 21
26951: PUSH
26952: LD_INT 24
26954: PUSH
26955: LD_INT 22
26957: PUSH
26958: LD_INT 25
26960: PUSH
26961: LD_INT 28
26963: PUSH
26964: LD_INT 29
26966: PUSH
26967: LD_INT 30
26969: PUSH
26970: LD_INT 31
26972: PUSH
26973: LD_INT 37
26975: PUSH
26976: LD_INT 38
26978: PUSH
26979: LD_INT 32
26981: PUSH
26982: LD_INT 27
26984: PUSH
26985: LD_INT 33
26987: PUSH
26988: LD_INT 69
26990: PUSH
26991: LD_INT 39
26993: PUSH
26994: LD_INT 34
26996: PUSH
26997: LD_INT 40
26999: PUSH
27000: LD_INT 71
27002: PUSH
27003: LD_INT 23
27005: PUSH
27006: LD_INT 44
27008: PUSH
27009: LD_INT 48
27011: PUSH
27012: LD_INT 49
27014: PUSH
27015: LD_INT 50
27017: PUSH
27018: LD_INT 51
27020: PUSH
27021: LD_INT 52
27023: PUSH
27024: LD_INT 53
27026: PUSH
27027: LD_INT 54
27029: PUSH
27030: LD_INT 55
27032: PUSH
27033: LD_INT 56
27035: PUSH
27036: LD_INT 57
27038: PUSH
27039: LD_INT 58
27041: PUSH
27042: LD_INT 59
27044: PUSH
27045: LD_INT 63
27047: PUSH
27048: LD_INT 64
27050: PUSH
27051: LD_INT 65
27053: PUSH
27054: LD_INT 82
27056: PUSH
27057: LD_INT 83
27059: PUSH
27060: LD_INT 84
27062: PUSH
27063: LD_INT 85
27065: PUSH
27066: LD_INT 86
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: LIST
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: LIST
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: ST_TO_ADDR
27124: GO 27127
27126: POP
// if state > - 1 and state < 3 then
27127: LD_VAR 0 3
27131: PUSH
27132: LD_INT 1
27134: NEG
27135: GREATER
27136: PUSH
27137: LD_VAR 0 3
27141: PUSH
27142: LD_INT 3
27144: LESS
27145: AND
27146: IFFALSE 27203
// for i in result do
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: LD_VAR 0 4
27157: PUSH
27158: FOR_IN
27159: IFFALSE 27201
// if GetTech ( i , side ) <> state then
27161: LD_VAR 0 5
27165: PPUSH
27166: LD_VAR 0 1
27170: PPUSH
27171: CALL_OW 321
27175: PUSH
27176: LD_VAR 0 3
27180: NONEQUAL
27181: IFFALSE 27199
// result := result diff i ;
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: LD_VAR 0 4
27192: PUSH
27193: LD_VAR 0 5
27197: DIFF
27198: ST_TO_ADDR
27199: GO 27158
27201: POP
27202: POP
// end ;
27203: LD_VAR 0 4
27207: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27208: LD_INT 0
27210: PPUSH
27211: PPUSH
27212: PPUSH
// result := true ;
27213: LD_ADDR_VAR 0 3
27217: PUSH
27218: LD_INT 1
27220: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27221: LD_ADDR_VAR 0 5
27225: PUSH
27226: LD_VAR 0 2
27230: PPUSH
27231: CALL_OW 480
27235: ST_TO_ADDR
// if not tmp then
27236: LD_VAR 0 5
27240: NOT
27241: IFFALSE 27245
// exit ;
27243: GO 27294
// for i in tmp do
27245: LD_ADDR_VAR 0 4
27249: PUSH
27250: LD_VAR 0 5
27254: PUSH
27255: FOR_IN
27256: IFFALSE 27292
// if GetTech ( i , side ) <> state_researched then
27258: LD_VAR 0 4
27262: PPUSH
27263: LD_VAR 0 1
27267: PPUSH
27268: CALL_OW 321
27272: PUSH
27273: LD_INT 2
27275: NONEQUAL
27276: IFFALSE 27290
// begin result := false ;
27278: LD_ADDR_VAR 0 3
27282: PUSH
27283: LD_INT 0
27285: ST_TO_ADDR
// exit ;
27286: POP
27287: POP
27288: GO 27294
// end ;
27290: GO 27255
27292: POP
27293: POP
// end ;
27294: LD_VAR 0 3
27298: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27299: LD_INT 0
27301: PPUSH
27302: PPUSH
27303: PPUSH
27304: PPUSH
27305: PPUSH
27306: PPUSH
27307: PPUSH
27308: PPUSH
27309: PPUSH
27310: PPUSH
27311: PPUSH
27312: PPUSH
27313: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27314: LD_VAR 0 1
27318: NOT
27319: PUSH
27320: LD_VAR 0 1
27324: PPUSH
27325: CALL_OW 257
27329: PUSH
27330: LD_INT 9
27332: NONEQUAL
27333: OR
27334: IFFALSE 27338
// exit ;
27336: GO 27911
// side := GetSide ( unit ) ;
27338: LD_ADDR_VAR 0 9
27342: PUSH
27343: LD_VAR 0 1
27347: PPUSH
27348: CALL_OW 255
27352: ST_TO_ADDR
// tech_space := tech_spacanom ;
27353: LD_ADDR_VAR 0 12
27357: PUSH
27358: LD_INT 29
27360: ST_TO_ADDR
// tech_time := tech_taurad ;
27361: LD_ADDR_VAR 0 13
27365: PUSH
27366: LD_INT 28
27368: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27369: LD_ADDR_VAR 0 11
27373: PUSH
27374: LD_VAR 0 1
27378: PPUSH
27379: CALL_OW 310
27383: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27384: LD_VAR 0 11
27388: PPUSH
27389: CALL_OW 247
27393: PUSH
27394: LD_INT 2
27396: EQUAL
27397: IFFALSE 27401
// exit ;
27399: GO 27911
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27401: LD_ADDR_VAR 0 8
27405: PUSH
27406: LD_INT 81
27408: PUSH
27409: LD_VAR 0 9
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 3
27420: PUSH
27421: LD_INT 21
27423: PUSH
27424: LD_INT 3
27426: PUSH
27427: EMPTY
27428: LIST
27429: LIST
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PUSH
27435: EMPTY
27436: LIST
27437: LIST
27438: PPUSH
27439: CALL_OW 69
27443: ST_TO_ADDR
// if not tmp then
27444: LD_VAR 0 8
27448: NOT
27449: IFFALSE 27453
// exit ;
27451: GO 27911
// if in_unit then
27453: LD_VAR 0 11
27457: IFFALSE 27481
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27459: LD_ADDR_VAR 0 10
27463: PUSH
27464: LD_VAR 0 8
27468: PPUSH
27469: LD_VAR 0 11
27473: PPUSH
27474: CALL_OW 74
27478: ST_TO_ADDR
27479: GO 27501
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27481: LD_ADDR_VAR 0 10
27485: PUSH
27486: LD_VAR 0 8
27490: PPUSH
27491: LD_VAR 0 1
27495: PPUSH
27496: CALL_OW 74
27500: ST_TO_ADDR
// if not enemy then
27501: LD_VAR 0 10
27505: NOT
27506: IFFALSE 27510
// exit ;
27508: GO 27911
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27510: LD_VAR 0 11
27514: PUSH
27515: LD_VAR 0 11
27519: PPUSH
27520: LD_VAR 0 10
27524: PPUSH
27525: CALL_OW 296
27529: PUSH
27530: LD_INT 13
27532: GREATER
27533: AND
27534: PUSH
27535: LD_VAR 0 1
27539: PPUSH
27540: LD_VAR 0 10
27544: PPUSH
27545: CALL_OW 296
27549: PUSH
27550: LD_INT 12
27552: GREATER
27553: OR
27554: IFFALSE 27558
// exit ;
27556: GO 27911
// missile := [ 1 ] ;
27558: LD_ADDR_VAR 0 14
27562: PUSH
27563: LD_INT 1
27565: PUSH
27566: EMPTY
27567: LIST
27568: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27569: LD_VAR 0 9
27573: PPUSH
27574: LD_VAR 0 12
27578: PPUSH
27579: CALL_OW 325
27583: IFFALSE 27612
// missile := Insert ( missile , missile + 1 , 2 ) ;
27585: LD_ADDR_VAR 0 14
27589: PUSH
27590: LD_VAR 0 14
27594: PPUSH
27595: LD_VAR 0 14
27599: PUSH
27600: LD_INT 1
27602: PLUS
27603: PPUSH
27604: LD_INT 2
27606: PPUSH
27607: CALL_OW 2
27611: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27612: LD_VAR 0 9
27616: PPUSH
27617: LD_VAR 0 13
27621: PPUSH
27622: CALL_OW 325
27626: PUSH
27627: LD_VAR 0 10
27631: PPUSH
27632: CALL_OW 255
27636: PPUSH
27637: LD_VAR 0 13
27641: PPUSH
27642: CALL_OW 325
27646: NOT
27647: AND
27648: IFFALSE 27677
// missile := Insert ( missile , missile + 1 , 3 ) ;
27650: LD_ADDR_VAR 0 14
27654: PUSH
27655: LD_VAR 0 14
27659: PPUSH
27660: LD_VAR 0 14
27664: PUSH
27665: LD_INT 1
27667: PLUS
27668: PPUSH
27669: LD_INT 3
27671: PPUSH
27672: CALL_OW 2
27676: ST_TO_ADDR
// if missile < 2 then
27677: LD_VAR 0 14
27681: PUSH
27682: LD_INT 2
27684: LESS
27685: IFFALSE 27689
// exit ;
27687: GO 27911
// x := GetX ( enemy ) ;
27689: LD_ADDR_VAR 0 4
27693: PUSH
27694: LD_VAR 0 10
27698: PPUSH
27699: CALL_OW 250
27703: ST_TO_ADDR
// y := GetY ( enemy ) ;
27704: LD_ADDR_VAR 0 5
27708: PUSH
27709: LD_VAR 0 10
27713: PPUSH
27714: CALL_OW 251
27718: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27719: LD_ADDR_VAR 0 6
27723: PUSH
27724: LD_VAR 0 4
27728: PUSH
27729: LD_INT 1
27731: NEG
27732: PPUSH
27733: LD_INT 1
27735: PPUSH
27736: CALL_OW 12
27740: PLUS
27741: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27742: LD_ADDR_VAR 0 7
27746: PUSH
27747: LD_VAR 0 5
27751: PUSH
27752: LD_INT 1
27754: NEG
27755: PPUSH
27756: LD_INT 1
27758: PPUSH
27759: CALL_OW 12
27763: PLUS
27764: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27765: LD_VAR 0 6
27769: PPUSH
27770: LD_VAR 0 7
27774: PPUSH
27775: CALL_OW 488
27779: NOT
27780: IFFALSE 27802
// begin _x := x ;
27782: LD_ADDR_VAR 0 6
27786: PUSH
27787: LD_VAR 0 4
27791: ST_TO_ADDR
// _y := y ;
27792: LD_ADDR_VAR 0 7
27796: PUSH
27797: LD_VAR 0 5
27801: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_INT 1
27809: PPUSH
27810: LD_VAR 0 14
27814: PPUSH
27815: CALL_OW 12
27819: ST_TO_ADDR
// case i of 1 :
27820: LD_VAR 0 3
27824: PUSH
27825: LD_INT 1
27827: DOUBLE
27828: EQUAL
27829: IFTRUE 27833
27831: GO 27850
27833: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27834: LD_VAR 0 1
27838: PPUSH
27839: LD_VAR 0 10
27843: PPUSH
27844: CALL_OW 115
27848: GO 27911
27850: LD_INT 2
27852: DOUBLE
27853: EQUAL
27854: IFTRUE 27858
27856: GO 27880
27858: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27859: LD_VAR 0 1
27863: PPUSH
27864: LD_VAR 0 6
27868: PPUSH
27869: LD_VAR 0 7
27873: PPUSH
27874: CALL_OW 153
27878: GO 27911
27880: LD_INT 3
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 27910
27888: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27889: LD_VAR 0 1
27893: PPUSH
27894: LD_VAR 0 6
27898: PPUSH
27899: LD_VAR 0 7
27903: PPUSH
27904: CALL_OW 154
27908: GO 27911
27910: POP
// end ;
27911: LD_VAR 0 2
27915: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27916: LD_INT 0
27918: PPUSH
27919: PPUSH
27920: PPUSH
27921: PPUSH
27922: PPUSH
27923: PPUSH
// if not unit or not building then
27924: LD_VAR 0 1
27928: NOT
27929: PUSH
27930: LD_VAR 0 2
27934: NOT
27935: OR
27936: IFFALSE 27940
// exit ;
27938: GO 28098
// x := GetX ( building ) ;
27940: LD_ADDR_VAR 0 5
27944: PUSH
27945: LD_VAR 0 2
27949: PPUSH
27950: CALL_OW 250
27954: ST_TO_ADDR
// y := GetY ( building ) ;
27955: LD_ADDR_VAR 0 6
27959: PUSH
27960: LD_VAR 0 2
27964: PPUSH
27965: CALL_OW 251
27969: ST_TO_ADDR
// for i = 0 to 5 do
27970: LD_ADDR_VAR 0 4
27974: PUSH
27975: DOUBLE
27976: LD_INT 0
27978: DEC
27979: ST_TO_ADDR
27980: LD_INT 5
27982: PUSH
27983: FOR_TO
27984: IFFALSE 28096
// begin _x := ShiftX ( x , i , 3 ) ;
27986: LD_ADDR_VAR 0 7
27990: PUSH
27991: LD_VAR 0 5
27995: PPUSH
27996: LD_VAR 0 4
28000: PPUSH
28001: LD_INT 3
28003: PPUSH
28004: CALL_OW 272
28008: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28009: LD_ADDR_VAR 0 8
28013: PUSH
28014: LD_VAR 0 6
28018: PPUSH
28019: LD_VAR 0 4
28023: PPUSH
28024: LD_INT 3
28026: PPUSH
28027: CALL_OW 273
28031: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28032: LD_VAR 0 7
28036: PPUSH
28037: LD_VAR 0 8
28041: PPUSH
28042: CALL_OW 488
28046: NOT
28047: IFFALSE 28051
// continue ;
28049: GO 27983
// if HexInfo ( _x , _y ) = 0 then
28051: LD_VAR 0 7
28055: PPUSH
28056: LD_VAR 0 8
28060: PPUSH
28061: CALL_OW 428
28065: PUSH
28066: LD_INT 0
28068: EQUAL
28069: IFFALSE 28094
// begin ComMoveXY ( unit , _x , _y ) ;
28071: LD_VAR 0 1
28075: PPUSH
28076: LD_VAR 0 7
28080: PPUSH
28081: LD_VAR 0 8
28085: PPUSH
28086: CALL_OW 111
// exit ;
28090: POP
28091: POP
28092: GO 28098
// end ; end ;
28094: GO 27983
28096: POP
28097: POP
// end ;
28098: LD_VAR 0 3
28102: RET
// export function ScanBase ( side , base_area ) ; begin
28103: LD_INT 0
28105: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28106: LD_ADDR_VAR 0 3
28110: PUSH
28111: LD_VAR 0 2
28115: PPUSH
28116: LD_INT 81
28118: PUSH
28119: LD_VAR 0 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PPUSH
28128: CALL_OW 70
28132: ST_TO_ADDR
// end ;
28133: LD_VAR 0 3
28137: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28138: LD_INT 0
28140: PPUSH
28141: PPUSH
28142: PPUSH
28143: PPUSH
// result := false ;
28144: LD_ADDR_VAR 0 2
28148: PUSH
28149: LD_INT 0
28151: ST_TO_ADDR
// side := GetSide ( unit ) ;
28152: LD_ADDR_VAR 0 3
28156: PUSH
28157: LD_VAR 0 1
28161: PPUSH
28162: CALL_OW 255
28166: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28167: LD_ADDR_VAR 0 4
28171: PUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: CALL_OW 248
28181: ST_TO_ADDR
// case nat of 1 :
28182: LD_VAR 0 4
28186: PUSH
28187: LD_INT 1
28189: DOUBLE
28190: EQUAL
28191: IFTRUE 28195
28193: GO 28206
28195: POP
// tech := tech_lassight ; 2 :
28196: LD_ADDR_VAR 0 5
28200: PUSH
28201: LD_INT 12
28203: ST_TO_ADDR
28204: GO 28245
28206: LD_INT 2
28208: DOUBLE
28209: EQUAL
28210: IFTRUE 28214
28212: GO 28225
28214: POP
// tech := tech_mortar ; 3 :
28215: LD_ADDR_VAR 0 5
28219: PUSH
28220: LD_INT 41
28222: ST_TO_ADDR
28223: GO 28245
28225: LD_INT 3
28227: DOUBLE
28228: EQUAL
28229: IFTRUE 28233
28231: GO 28244
28233: POP
// tech := tech_bazooka ; end ;
28234: LD_ADDR_VAR 0 5
28238: PUSH
28239: LD_INT 44
28241: ST_TO_ADDR
28242: GO 28245
28244: POP
// if Researched ( side , tech ) then
28245: LD_VAR 0 3
28249: PPUSH
28250: LD_VAR 0 5
28254: PPUSH
28255: CALL_OW 325
28259: IFFALSE 28286
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28261: LD_ADDR_VAR 0 2
28265: PUSH
28266: LD_INT 5
28268: PUSH
28269: LD_INT 8
28271: PUSH
28272: LD_INT 9
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: PUSH
28280: LD_VAR 0 4
28284: ARRAY
28285: ST_TO_ADDR
// end ;
28286: LD_VAR 0 2
28290: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28291: LD_INT 0
28293: PPUSH
28294: PPUSH
28295: PPUSH
// if not mines then
28296: LD_VAR 0 2
28300: NOT
28301: IFFALSE 28305
// exit ;
28303: GO 28449
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28305: LD_ADDR_VAR 0 5
28309: PUSH
28310: LD_INT 81
28312: PUSH
28313: LD_VAR 0 1
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 3
28324: PUSH
28325: LD_INT 21
28327: PUSH
28328: LD_INT 3
28330: PUSH
28331: EMPTY
28332: LIST
28333: LIST
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PPUSH
28343: CALL_OW 69
28347: ST_TO_ADDR
// for i in mines do
28348: LD_ADDR_VAR 0 4
28352: PUSH
28353: LD_VAR 0 2
28357: PUSH
28358: FOR_IN
28359: IFFALSE 28447
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28361: LD_VAR 0 4
28365: PUSH
28366: LD_INT 1
28368: ARRAY
28369: PPUSH
28370: LD_VAR 0 4
28374: PUSH
28375: LD_INT 2
28377: ARRAY
28378: PPUSH
28379: CALL_OW 458
28383: NOT
28384: IFFALSE 28388
// continue ;
28386: GO 28358
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28388: LD_VAR 0 4
28392: PUSH
28393: LD_INT 1
28395: ARRAY
28396: PPUSH
28397: LD_VAR 0 4
28401: PUSH
28402: LD_INT 2
28404: ARRAY
28405: PPUSH
28406: CALL_OW 428
28410: PUSH
28411: LD_VAR 0 5
28415: IN
28416: IFFALSE 28445
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28418: LD_VAR 0 4
28422: PUSH
28423: LD_INT 1
28425: ARRAY
28426: PPUSH
28427: LD_VAR 0 4
28431: PUSH
28432: LD_INT 2
28434: ARRAY
28435: PPUSH
28436: LD_VAR 0 1
28440: PPUSH
28441: CALL_OW 456
// end ;
28445: GO 28358
28447: POP
28448: POP
// end ;
28449: LD_VAR 0 3
28453: RET
// export function Count ( array ) ; var i ; begin
28454: LD_INT 0
28456: PPUSH
28457: PPUSH
// result := 0 ;
28458: LD_ADDR_VAR 0 2
28462: PUSH
28463: LD_INT 0
28465: ST_TO_ADDR
// for i in array do
28466: LD_ADDR_VAR 0 3
28470: PUSH
28471: LD_VAR 0 1
28475: PUSH
28476: FOR_IN
28477: IFFALSE 28501
// if i then
28479: LD_VAR 0 3
28483: IFFALSE 28499
// result := result + 1 ;
28485: LD_ADDR_VAR 0 2
28489: PUSH
28490: LD_VAR 0 2
28494: PUSH
28495: LD_INT 1
28497: PLUS
28498: ST_TO_ADDR
28499: GO 28476
28501: POP
28502: POP
// end ;
28503: LD_VAR 0 2
28507: RET
// export function IsEmpty ( building ) ; begin
28508: LD_INT 0
28510: PPUSH
// if not building then
28511: LD_VAR 0 1
28515: NOT
28516: IFFALSE 28520
// exit ;
28518: GO 28563
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28520: LD_ADDR_VAR 0 2
28524: PUSH
28525: LD_VAR 0 1
28529: PUSH
28530: LD_INT 22
28532: PUSH
28533: LD_VAR 0 1
28537: PPUSH
28538: CALL_OW 255
28542: PUSH
28543: EMPTY
28544: LIST
28545: LIST
28546: PUSH
28547: LD_INT 58
28549: PUSH
28550: EMPTY
28551: LIST
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PPUSH
28557: CALL_OW 69
28561: IN
28562: ST_TO_ADDR
// end ;
28563: LD_VAR 0 2
28567: RET
// export function IsNotFull ( building ) ; begin
28568: LD_INT 0
28570: PPUSH
// if not building then
28571: LD_VAR 0 1
28575: NOT
28576: IFFALSE 28580
// exit ;
28578: GO 28599
// result := UnitsInside ( building ) < 6 ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: LD_VAR 0 1
28589: PPUSH
28590: CALL_OW 313
28594: PUSH
28595: LD_INT 6
28597: LESS
28598: ST_TO_ADDR
// end ;
28599: LD_VAR 0 2
28603: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28604: LD_INT 0
28606: PPUSH
28607: PPUSH
28608: PPUSH
28609: PPUSH
// tmp := [ ] ;
28610: LD_ADDR_VAR 0 3
28614: PUSH
28615: EMPTY
28616: ST_TO_ADDR
// list := [ ] ;
28617: LD_ADDR_VAR 0 5
28621: PUSH
28622: EMPTY
28623: ST_TO_ADDR
// for i = 16 to 25 do
28624: LD_ADDR_VAR 0 4
28628: PUSH
28629: DOUBLE
28630: LD_INT 16
28632: DEC
28633: ST_TO_ADDR
28634: LD_INT 25
28636: PUSH
28637: FOR_TO
28638: IFFALSE 28711
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28640: LD_ADDR_VAR 0 3
28644: PUSH
28645: LD_VAR 0 3
28649: PUSH
28650: LD_INT 22
28652: PUSH
28653: LD_VAR 0 1
28657: PPUSH
28658: CALL_OW 255
28662: PUSH
28663: EMPTY
28664: LIST
28665: LIST
28666: PUSH
28667: LD_INT 91
28669: PUSH
28670: LD_VAR 0 1
28674: PUSH
28675: LD_INT 6
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: LIST
28682: PUSH
28683: LD_INT 30
28685: PUSH
28686: LD_VAR 0 4
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: PPUSH
28703: CALL_OW 69
28707: ADD
28708: ST_TO_ADDR
28709: GO 28637
28711: POP
28712: POP
// for i = 1 to tmp do
28713: LD_ADDR_VAR 0 4
28717: PUSH
28718: DOUBLE
28719: LD_INT 1
28721: DEC
28722: ST_TO_ADDR
28723: LD_VAR 0 3
28727: PUSH
28728: FOR_TO
28729: IFFALSE 28817
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28731: LD_ADDR_VAR 0 5
28735: PUSH
28736: LD_VAR 0 5
28740: PUSH
28741: LD_VAR 0 3
28745: PUSH
28746: LD_VAR 0 4
28750: ARRAY
28751: PPUSH
28752: CALL_OW 266
28756: PUSH
28757: LD_VAR 0 3
28761: PUSH
28762: LD_VAR 0 4
28766: ARRAY
28767: PPUSH
28768: CALL_OW 250
28772: PUSH
28773: LD_VAR 0 3
28777: PUSH
28778: LD_VAR 0 4
28782: ARRAY
28783: PPUSH
28784: CALL_OW 251
28788: PUSH
28789: LD_VAR 0 3
28793: PUSH
28794: LD_VAR 0 4
28798: ARRAY
28799: PPUSH
28800: CALL_OW 254
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: ADD
28814: ST_TO_ADDR
28815: GO 28728
28817: POP
28818: POP
// result := list ;
28819: LD_ADDR_VAR 0 2
28823: PUSH
28824: LD_VAR 0 5
28828: ST_TO_ADDR
// end ;
28829: LD_VAR 0 2
28833: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28834: LD_INT 0
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
28841: PPUSH
28842: PPUSH
// if not factory then
28843: LD_VAR 0 1
28847: NOT
28848: IFFALSE 28852
// exit ;
28850: GO 29445
// if control = control_apeman then
28852: LD_VAR 0 4
28856: PUSH
28857: LD_INT 5
28859: EQUAL
28860: IFFALSE 28969
// begin tmp := UnitsInside ( factory ) ;
28862: LD_ADDR_VAR 0 8
28866: PUSH
28867: LD_VAR 0 1
28871: PPUSH
28872: CALL_OW 313
28876: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28877: LD_VAR 0 8
28881: PPUSH
28882: LD_INT 25
28884: PUSH
28885: LD_INT 12
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: CALL_OW 72
28896: NOT
28897: IFFALSE 28907
// control := control_manual ;
28899: LD_ADDR_VAR 0 4
28903: PUSH
28904: LD_INT 1
28906: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28907: LD_ADDR_VAR 0 8
28911: PUSH
28912: LD_VAR 0 1
28916: PPUSH
28917: CALL 28604 0 1
28921: ST_TO_ADDR
// if tmp then
28922: LD_VAR 0 8
28926: IFFALSE 28969
// begin for i in tmp do
28928: LD_ADDR_VAR 0 7
28932: PUSH
28933: LD_VAR 0 8
28937: PUSH
28938: FOR_IN
28939: IFFALSE 28967
// if i [ 1 ] = b_ext_radio then
28941: LD_VAR 0 7
28945: PUSH
28946: LD_INT 1
28948: ARRAY
28949: PUSH
28950: LD_INT 22
28952: EQUAL
28953: IFFALSE 28965
// begin control := control_remote ;
28955: LD_ADDR_VAR 0 4
28959: PUSH
28960: LD_INT 2
28962: ST_TO_ADDR
// break ;
28963: GO 28967
// end ;
28965: GO 28938
28967: POP
28968: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28969: LD_VAR 0 1
28973: PPUSH
28974: LD_VAR 0 2
28978: PPUSH
28979: LD_VAR 0 3
28983: PPUSH
28984: LD_VAR 0 4
28988: PPUSH
28989: LD_VAR 0 5
28993: PPUSH
28994: CALL_OW 448
28998: IFFALSE 29033
// begin result := [ chassis , engine , control , weapon ] ;
29000: LD_ADDR_VAR 0 6
29004: PUSH
29005: LD_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: PUSH
29015: LD_VAR 0 4
29019: PUSH
29020: LD_VAR 0 5
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: LIST
29029: LIST
29030: ST_TO_ADDR
// exit ;
29031: GO 29445
// end ; _chassis := AvailableChassisList ( factory ) ;
29033: LD_ADDR_VAR 0 9
29037: PUSH
29038: LD_VAR 0 1
29042: PPUSH
29043: CALL_OW 475
29047: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29048: LD_ADDR_VAR 0 11
29052: PUSH
29053: LD_VAR 0 1
29057: PPUSH
29058: CALL_OW 476
29062: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29063: LD_ADDR_VAR 0 12
29067: PUSH
29068: LD_VAR 0 1
29072: PPUSH
29073: CALL_OW 477
29077: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29078: LD_ADDR_VAR 0 10
29082: PUSH
29083: LD_VAR 0 1
29087: PPUSH
29088: CALL_OW 478
29092: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29093: LD_VAR 0 9
29097: NOT
29098: PUSH
29099: LD_VAR 0 11
29103: NOT
29104: OR
29105: PUSH
29106: LD_VAR 0 12
29110: NOT
29111: OR
29112: PUSH
29113: LD_VAR 0 10
29117: NOT
29118: OR
29119: IFFALSE 29154
// begin result := [ chassis , engine , control , weapon ] ;
29121: LD_ADDR_VAR 0 6
29125: PUSH
29126: LD_VAR 0 2
29130: PUSH
29131: LD_VAR 0 3
29135: PUSH
29136: LD_VAR 0 4
29140: PUSH
29141: LD_VAR 0 5
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: LIST
29150: LIST
29151: ST_TO_ADDR
// exit ;
29152: GO 29445
// end ; if not chassis in _chassis then
29154: LD_VAR 0 2
29158: PUSH
29159: LD_VAR 0 9
29163: IN
29164: NOT
29165: IFFALSE 29191
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29167: LD_ADDR_VAR 0 2
29171: PUSH
29172: LD_VAR 0 9
29176: PUSH
29177: LD_INT 1
29179: PPUSH
29180: LD_VAR 0 9
29184: PPUSH
29185: CALL_OW 12
29189: ARRAY
29190: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29191: LD_VAR 0 2
29195: PPUSH
29196: LD_VAR 0 3
29200: PPUSH
29201: CALL 29450 0 2
29205: NOT
29206: IFFALSE 29265
// repeat engine := _engine [ 1 ] ;
29208: LD_ADDR_VAR 0 3
29212: PUSH
29213: LD_VAR 0 11
29217: PUSH
29218: LD_INT 1
29220: ARRAY
29221: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29222: LD_ADDR_VAR 0 11
29226: PUSH
29227: LD_VAR 0 11
29231: PPUSH
29232: LD_INT 1
29234: PPUSH
29235: CALL_OW 3
29239: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29240: LD_VAR 0 2
29244: PPUSH
29245: LD_VAR 0 3
29249: PPUSH
29250: CALL 29450 0 2
29254: PUSH
29255: LD_VAR 0 11
29259: PUSH
29260: EMPTY
29261: EQUAL
29262: OR
29263: IFFALSE 29208
// if not control in _control then
29265: LD_VAR 0 4
29269: PUSH
29270: LD_VAR 0 12
29274: IN
29275: NOT
29276: IFFALSE 29302
// control := _control [ rand ( 1 , _control ) ] ;
29278: LD_ADDR_VAR 0 4
29282: PUSH
29283: LD_VAR 0 12
29287: PUSH
29288: LD_INT 1
29290: PPUSH
29291: LD_VAR 0 12
29295: PPUSH
29296: CALL_OW 12
29300: ARRAY
29301: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29302: LD_VAR 0 2
29306: PPUSH
29307: LD_VAR 0 5
29311: PPUSH
29312: CALL 29670 0 2
29316: NOT
29317: IFFALSE 29376
// repeat weapon := _weapon [ 1 ] ;
29319: LD_ADDR_VAR 0 5
29323: PUSH
29324: LD_VAR 0 10
29328: PUSH
29329: LD_INT 1
29331: ARRAY
29332: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29333: LD_ADDR_VAR 0 10
29337: PUSH
29338: LD_VAR 0 10
29342: PPUSH
29343: LD_INT 1
29345: PPUSH
29346: CALL_OW 3
29350: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29351: LD_VAR 0 2
29355: PPUSH
29356: LD_VAR 0 5
29360: PPUSH
29361: CALL 29670 0 2
29365: PUSH
29366: LD_VAR 0 10
29370: PUSH
29371: EMPTY
29372: EQUAL
29373: OR
29374: IFFALSE 29319
// result := [ ] ;
29376: LD_ADDR_VAR 0 6
29380: PUSH
29381: EMPTY
29382: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29383: LD_VAR 0 1
29387: PPUSH
29388: LD_VAR 0 2
29392: PPUSH
29393: LD_VAR 0 3
29397: PPUSH
29398: LD_VAR 0 4
29402: PPUSH
29403: LD_VAR 0 5
29407: PPUSH
29408: CALL_OW 448
29412: IFFALSE 29445
// result := [ chassis , engine , control , weapon ] ;
29414: LD_ADDR_VAR 0 6
29418: PUSH
29419: LD_VAR 0 2
29423: PUSH
29424: LD_VAR 0 3
29428: PUSH
29429: LD_VAR 0 4
29433: PUSH
29434: LD_VAR 0 5
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: LIST
29444: ST_TO_ADDR
// end ;
29445: LD_VAR 0 6
29449: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29450: LD_INT 0
29452: PPUSH
// if not chassis or not engine then
29453: LD_VAR 0 1
29457: NOT
29458: PUSH
29459: LD_VAR 0 2
29463: NOT
29464: OR
29465: IFFALSE 29469
// exit ;
29467: GO 29665
// case engine of engine_solar :
29469: LD_VAR 0 2
29473: PUSH
29474: LD_INT 2
29476: DOUBLE
29477: EQUAL
29478: IFTRUE 29482
29480: GO 29520
29482: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29483: LD_ADDR_VAR 0 3
29487: PUSH
29488: LD_INT 11
29490: PUSH
29491: LD_INT 12
29493: PUSH
29494: LD_INT 13
29496: PUSH
29497: LD_INT 14
29499: PUSH
29500: LD_INT 1
29502: PUSH
29503: LD_INT 2
29505: PUSH
29506: LD_INT 3
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: LIST
29516: LIST
29517: ST_TO_ADDR
29518: GO 29649
29520: LD_INT 1
29522: DOUBLE
29523: EQUAL
29524: IFTRUE 29528
29526: GO 29590
29528: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29529: LD_ADDR_VAR 0 3
29533: PUSH
29534: LD_INT 11
29536: PUSH
29537: LD_INT 12
29539: PUSH
29540: LD_INT 13
29542: PUSH
29543: LD_INT 14
29545: PUSH
29546: LD_INT 1
29548: PUSH
29549: LD_INT 2
29551: PUSH
29552: LD_INT 3
29554: PUSH
29555: LD_INT 4
29557: PUSH
29558: LD_INT 5
29560: PUSH
29561: LD_INT 21
29563: PUSH
29564: LD_INT 23
29566: PUSH
29567: LD_INT 22
29569: PUSH
29570: LD_INT 24
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: ST_TO_ADDR
29588: GO 29649
29590: LD_INT 3
29592: DOUBLE
29593: EQUAL
29594: IFTRUE 29598
29596: GO 29648
29598: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29599: LD_ADDR_VAR 0 3
29603: PUSH
29604: LD_INT 13
29606: PUSH
29607: LD_INT 14
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: LD_INT 3
29615: PUSH
29616: LD_INT 4
29618: PUSH
29619: LD_INT 5
29621: PUSH
29622: LD_INT 21
29624: PUSH
29625: LD_INT 22
29627: PUSH
29628: LD_INT 23
29630: PUSH
29631: LD_INT 24
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: LIST
29638: LIST
29639: LIST
29640: LIST
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: ST_TO_ADDR
29646: GO 29649
29648: POP
// result := ( chassis in result ) ;
29649: LD_ADDR_VAR 0 3
29653: PUSH
29654: LD_VAR 0 1
29658: PUSH
29659: LD_VAR 0 3
29663: IN
29664: ST_TO_ADDR
// end ;
29665: LD_VAR 0 3
29669: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29670: LD_INT 0
29672: PPUSH
// if not chassis or not weapon then
29673: LD_VAR 0 1
29677: NOT
29678: PUSH
29679: LD_VAR 0 2
29683: NOT
29684: OR
29685: IFFALSE 29689
// exit ;
29687: GO 30751
// case weapon of us_machine_gun :
29689: LD_VAR 0 2
29693: PUSH
29694: LD_INT 2
29696: DOUBLE
29697: EQUAL
29698: IFTRUE 29702
29700: GO 29732
29702: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29703: LD_ADDR_VAR 0 3
29707: PUSH
29708: LD_INT 1
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 3
29716: PUSH
29717: LD_INT 4
29719: PUSH
29720: LD_INT 5
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: ST_TO_ADDR
29730: GO 30735
29732: LD_INT 3
29734: DOUBLE
29735: EQUAL
29736: IFTRUE 29740
29738: GO 29770
29740: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29741: LD_ADDR_VAR 0 3
29745: PUSH
29746: LD_INT 1
29748: PUSH
29749: LD_INT 2
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: LD_INT 4
29757: PUSH
29758: LD_INT 5
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: LIST
29766: LIST
29767: ST_TO_ADDR
29768: GO 30735
29770: LD_INT 11
29772: DOUBLE
29773: EQUAL
29774: IFTRUE 29778
29776: GO 29808
29778: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29779: LD_ADDR_VAR 0 3
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: LD_INT 2
29789: PUSH
29790: LD_INT 3
29792: PUSH
29793: LD_INT 4
29795: PUSH
29796: LD_INT 5
29798: PUSH
29799: EMPTY
29800: LIST
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: ST_TO_ADDR
29806: GO 30735
29808: LD_INT 4
29810: DOUBLE
29811: EQUAL
29812: IFTRUE 29816
29814: GO 29842
29816: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29817: LD_ADDR_VAR 0 3
29821: PUSH
29822: LD_INT 2
29824: PUSH
29825: LD_INT 3
29827: PUSH
29828: LD_INT 4
29830: PUSH
29831: LD_INT 5
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: ST_TO_ADDR
29840: GO 30735
29842: LD_INT 5
29844: DOUBLE
29845: EQUAL
29846: IFTRUE 29850
29848: GO 29876
29850: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29851: LD_ADDR_VAR 0 3
29855: PUSH
29856: LD_INT 2
29858: PUSH
29859: LD_INT 3
29861: PUSH
29862: LD_INT 4
29864: PUSH
29865: LD_INT 5
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: LIST
29873: ST_TO_ADDR
29874: GO 30735
29876: LD_INT 9
29878: DOUBLE
29879: EQUAL
29880: IFTRUE 29884
29882: GO 29910
29884: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 5
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: LIST
29906: LIST
29907: ST_TO_ADDR
29908: GO 30735
29910: LD_INT 7
29912: DOUBLE
29913: EQUAL
29914: IFTRUE 29918
29916: GO 29944
29918: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29919: LD_ADDR_VAR 0 3
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: LD_INT 5
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: LIST
29940: LIST
29941: ST_TO_ADDR
29942: GO 30735
29944: LD_INT 12
29946: DOUBLE
29947: EQUAL
29948: IFTRUE 29952
29950: GO 29978
29952: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29953: LD_ADDR_VAR 0 3
29957: PUSH
29958: LD_INT 2
29960: PUSH
29961: LD_INT 3
29963: PUSH
29964: LD_INT 4
29966: PUSH
29967: LD_INT 5
29969: PUSH
29970: EMPTY
29971: LIST
29972: LIST
29973: LIST
29974: LIST
29975: ST_TO_ADDR
29976: GO 30735
29978: LD_INT 13
29980: DOUBLE
29981: EQUAL
29982: IFTRUE 29986
29984: GO 30012
29986: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
29987: LD_ADDR_VAR 0 3
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: LD_INT 3
29997: PUSH
29998: LD_INT 4
30000: PUSH
30001: LD_INT 5
30003: PUSH
30004: EMPTY
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: ST_TO_ADDR
30010: GO 30735
30012: LD_INT 14
30014: DOUBLE
30015: EQUAL
30016: IFTRUE 30020
30018: GO 30038
30020: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30021: LD_ADDR_VAR 0 3
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: LD_INT 5
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: ST_TO_ADDR
30036: GO 30735
30038: LD_INT 6
30040: DOUBLE
30041: EQUAL
30042: IFTRUE 30046
30044: GO 30064
30046: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30047: LD_ADDR_VAR 0 3
30051: PUSH
30052: LD_INT 4
30054: PUSH
30055: LD_INT 5
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 30735
30064: LD_INT 10
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30090
30072: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30073: LD_ADDR_VAR 0 3
30077: PUSH
30078: LD_INT 4
30080: PUSH
30081: LD_INT 5
30083: PUSH
30084: EMPTY
30085: LIST
30086: LIST
30087: ST_TO_ADDR
30088: GO 30735
30090: LD_INT 22
30092: DOUBLE
30093: EQUAL
30094: IFTRUE 30098
30096: GO 30124
30098: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: LD_INT 11
30106: PUSH
30107: LD_INT 12
30109: PUSH
30110: LD_INT 13
30112: PUSH
30113: LD_INT 14
30115: PUSH
30116: EMPTY
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: ST_TO_ADDR
30122: GO 30735
30124: LD_INT 23
30126: DOUBLE
30127: EQUAL
30128: IFTRUE 30132
30130: GO 30158
30132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30133: LD_ADDR_VAR 0 3
30137: PUSH
30138: LD_INT 11
30140: PUSH
30141: LD_INT 12
30143: PUSH
30144: LD_INT 13
30146: PUSH
30147: LD_INT 14
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: LIST
30154: LIST
30155: ST_TO_ADDR
30156: GO 30735
30158: LD_INT 24
30160: DOUBLE
30161: EQUAL
30162: IFTRUE 30166
30164: GO 30192
30166: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30167: LD_ADDR_VAR 0 3
30171: PUSH
30172: LD_INT 11
30174: PUSH
30175: LD_INT 12
30177: PUSH
30178: LD_INT 13
30180: PUSH
30181: LD_INT 14
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: ST_TO_ADDR
30190: GO 30735
30192: LD_INT 30
30194: DOUBLE
30195: EQUAL
30196: IFTRUE 30200
30198: GO 30226
30200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30201: LD_ADDR_VAR 0 3
30205: PUSH
30206: LD_INT 11
30208: PUSH
30209: LD_INT 12
30211: PUSH
30212: LD_INT 13
30214: PUSH
30215: LD_INT 14
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: ST_TO_ADDR
30224: GO 30735
30226: LD_INT 25
30228: DOUBLE
30229: EQUAL
30230: IFTRUE 30234
30232: GO 30252
30234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30235: LD_ADDR_VAR 0 3
30239: PUSH
30240: LD_INT 13
30242: PUSH
30243: LD_INT 14
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: ST_TO_ADDR
30250: GO 30735
30252: LD_INT 27
30254: DOUBLE
30255: EQUAL
30256: IFTRUE 30260
30258: GO 30278
30260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30261: LD_ADDR_VAR 0 3
30265: PUSH
30266: LD_INT 13
30268: PUSH
30269: LD_INT 14
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: ST_TO_ADDR
30276: GO 30735
30278: LD_EXP 29
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30288
30286: GO 30314
30288: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30289: LD_ADDR_VAR 0 3
30293: PUSH
30294: LD_INT 11
30296: PUSH
30297: LD_INT 12
30299: PUSH
30300: LD_INT 13
30302: PUSH
30303: LD_INT 14
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: LIST
30310: LIST
30311: ST_TO_ADDR
30312: GO 30735
30314: LD_INT 28
30316: DOUBLE
30317: EQUAL
30318: IFTRUE 30322
30320: GO 30340
30322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30323: LD_ADDR_VAR 0 3
30327: PUSH
30328: LD_INT 13
30330: PUSH
30331: LD_INT 14
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: ST_TO_ADDR
30338: GO 30735
30340: LD_INT 29
30342: DOUBLE
30343: EQUAL
30344: IFTRUE 30348
30346: GO 30366
30348: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30349: LD_ADDR_VAR 0 3
30353: PUSH
30354: LD_INT 13
30356: PUSH
30357: LD_INT 14
30359: PUSH
30360: EMPTY
30361: LIST
30362: LIST
30363: ST_TO_ADDR
30364: GO 30735
30366: LD_INT 31
30368: DOUBLE
30369: EQUAL
30370: IFTRUE 30374
30372: GO 30392
30374: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30375: LD_ADDR_VAR 0 3
30379: PUSH
30380: LD_INT 13
30382: PUSH
30383: LD_INT 14
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: ST_TO_ADDR
30390: GO 30735
30392: LD_INT 26
30394: DOUBLE
30395: EQUAL
30396: IFTRUE 30400
30398: GO 30418
30400: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30401: LD_ADDR_VAR 0 3
30405: PUSH
30406: LD_INT 13
30408: PUSH
30409: LD_INT 14
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: ST_TO_ADDR
30416: GO 30735
30418: LD_INT 42
30420: DOUBLE
30421: EQUAL
30422: IFTRUE 30426
30424: GO 30452
30426: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30427: LD_ADDR_VAR 0 3
30431: PUSH
30432: LD_INT 21
30434: PUSH
30435: LD_INT 22
30437: PUSH
30438: LD_INT 23
30440: PUSH
30441: LD_INT 24
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: ST_TO_ADDR
30450: GO 30735
30452: LD_INT 43
30454: DOUBLE
30455: EQUAL
30456: IFTRUE 30460
30458: GO 30486
30460: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30461: LD_ADDR_VAR 0 3
30465: PUSH
30466: LD_INT 21
30468: PUSH
30469: LD_INT 22
30471: PUSH
30472: LD_INT 23
30474: PUSH
30475: LD_INT 24
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: ST_TO_ADDR
30484: GO 30735
30486: LD_INT 44
30488: DOUBLE
30489: EQUAL
30490: IFTRUE 30494
30492: GO 30520
30494: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30495: LD_ADDR_VAR 0 3
30499: PUSH
30500: LD_INT 21
30502: PUSH
30503: LD_INT 22
30505: PUSH
30506: LD_INT 23
30508: PUSH
30509: LD_INT 24
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: ST_TO_ADDR
30518: GO 30735
30520: LD_INT 45
30522: DOUBLE
30523: EQUAL
30524: IFTRUE 30528
30526: GO 30554
30528: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30529: LD_ADDR_VAR 0 3
30533: PUSH
30534: LD_INT 21
30536: PUSH
30537: LD_INT 22
30539: PUSH
30540: LD_INT 23
30542: PUSH
30543: LD_INT 24
30545: PUSH
30546: EMPTY
30547: LIST
30548: LIST
30549: LIST
30550: LIST
30551: ST_TO_ADDR
30552: GO 30735
30554: LD_INT 49
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30588
30562: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30563: LD_ADDR_VAR 0 3
30567: PUSH
30568: LD_INT 21
30570: PUSH
30571: LD_INT 22
30573: PUSH
30574: LD_INT 23
30576: PUSH
30577: LD_INT 24
30579: PUSH
30580: EMPTY
30581: LIST
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
30586: GO 30735
30588: LD_INT 51
30590: DOUBLE
30591: EQUAL
30592: IFTRUE 30596
30594: GO 30622
30596: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30597: LD_ADDR_VAR 0 3
30601: PUSH
30602: LD_INT 21
30604: PUSH
30605: LD_INT 22
30607: PUSH
30608: LD_INT 23
30610: PUSH
30611: LD_INT 24
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
30620: GO 30735
30622: LD_INT 52
30624: DOUBLE
30625: EQUAL
30626: IFTRUE 30630
30628: GO 30656
30630: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30631: LD_ADDR_VAR 0 3
30635: PUSH
30636: LD_INT 21
30638: PUSH
30639: LD_INT 22
30641: PUSH
30642: LD_INT 23
30644: PUSH
30645: LD_INT 24
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
30654: GO 30735
30656: LD_INT 53
30658: DOUBLE
30659: EQUAL
30660: IFTRUE 30664
30662: GO 30682
30664: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 23
30672: PUSH
30673: LD_INT 24
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: ST_TO_ADDR
30680: GO 30735
30682: LD_INT 46
30684: DOUBLE
30685: EQUAL
30686: IFTRUE 30690
30688: GO 30708
30690: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30691: LD_ADDR_VAR 0 3
30695: PUSH
30696: LD_INT 23
30698: PUSH
30699: LD_INT 24
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: ST_TO_ADDR
30706: GO 30735
30708: LD_INT 47
30710: DOUBLE
30711: EQUAL
30712: IFTRUE 30716
30714: GO 30734
30716: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30717: LD_ADDR_VAR 0 3
30721: PUSH
30722: LD_INT 23
30724: PUSH
30725: LD_INT 24
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: ST_TO_ADDR
30732: GO 30735
30734: POP
// result := ( chassis in result ) ;
30735: LD_ADDR_VAR 0 3
30739: PUSH
30740: LD_VAR 0 1
30744: PUSH
30745: LD_VAR 0 3
30749: IN
30750: ST_TO_ADDR
// end ;
30751: LD_VAR 0 3
30755: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30756: LD_INT 0
30758: PPUSH
30759: PPUSH
30760: PPUSH
30761: PPUSH
30762: PPUSH
30763: PPUSH
30764: PPUSH
// result := array ;
30765: LD_ADDR_VAR 0 5
30769: PUSH
30770: LD_VAR 0 1
30774: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30775: LD_VAR 0 1
30779: NOT
30780: PUSH
30781: LD_VAR 0 2
30785: NOT
30786: OR
30787: PUSH
30788: LD_VAR 0 3
30792: NOT
30793: OR
30794: PUSH
30795: LD_VAR 0 2
30799: PUSH
30800: LD_VAR 0 1
30804: GREATER
30805: OR
30806: PUSH
30807: LD_VAR 0 3
30811: PUSH
30812: LD_VAR 0 1
30816: GREATER
30817: OR
30818: IFFALSE 30822
// exit ;
30820: GO 31118
// if direction then
30822: LD_VAR 0 4
30826: IFFALSE 30890
// begin d := 1 ;
30828: LD_ADDR_VAR 0 9
30832: PUSH
30833: LD_INT 1
30835: ST_TO_ADDR
// if i_from > i_to then
30836: LD_VAR 0 2
30840: PUSH
30841: LD_VAR 0 3
30845: GREATER
30846: IFFALSE 30872
// length := ( array - i_from ) + i_to else
30848: LD_ADDR_VAR 0 11
30852: PUSH
30853: LD_VAR 0 1
30857: PUSH
30858: LD_VAR 0 2
30862: MINUS
30863: PUSH
30864: LD_VAR 0 3
30868: PLUS
30869: ST_TO_ADDR
30870: GO 30888
// length := i_to - i_from ;
30872: LD_ADDR_VAR 0 11
30876: PUSH
30877: LD_VAR 0 3
30881: PUSH
30882: LD_VAR 0 2
30886: MINUS
30887: ST_TO_ADDR
// end else
30888: GO 30951
// begin d := - 1 ;
30890: LD_ADDR_VAR 0 9
30894: PUSH
30895: LD_INT 1
30897: NEG
30898: ST_TO_ADDR
// if i_from > i_to then
30899: LD_VAR 0 2
30903: PUSH
30904: LD_VAR 0 3
30908: GREATER
30909: IFFALSE 30929
// length := i_from - i_to else
30911: LD_ADDR_VAR 0 11
30915: PUSH
30916: LD_VAR 0 2
30920: PUSH
30921: LD_VAR 0 3
30925: MINUS
30926: ST_TO_ADDR
30927: GO 30951
// length := ( array - i_to ) + i_from ;
30929: LD_ADDR_VAR 0 11
30933: PUSH
30934: LD_VAR 0 1
30938: PUSH
30939: LD_VAR 0 3
30943: MINUS
30944: PUSH
30945: LD_VAR 0 2
30949: PLUS
30950: ST_TO_ADDR
// end ; if not length then
30951: LD_VAR 0 11
30955: NOT
30956: IFFALSE 30960
// exit ;
30958: GO 31118
// tmp := array ;
30960: LD_ADDR_VAR 0 10
30964: PUSH
30965: LD_VAR 0 1
30969: ST_TO_ADDR
// for i = 1 to length do
30970: LD_ADDR_VAR 0 6
30974: PUSH
30975: DOUBLE
30976: LD_INT 1
30978: DEC
30979: ST_TO_ADDR
30980: LD_VAR 0 11
30984: PUSH
30985: FOR_TO
30986: IFFALSE 31106
// begin for j = 1 to array do
30988: LD_ADDR_VAR 0 7
30992: PUSH
30993: DOUBLE
30994: LD_INT 1
30996: DEC
30997: ST_TO_ADDR
30998: LD_VAR 0 1
31002: PUSH
31003: FOR_TO
31004: IFFALSE 31092
// begin k := j + d ;
31006: LD_ADDR_VAR 0 8
31010: PUSH
31011: LD_VAR 0 7
31015: PUSH
31016: LD_VAR 0 9
31020: PLUS
31021: ST_TO_ADDR
// if k > array then
31022: LD_VAR 0 8
31026: PUSH
31027: LD_VAR 0 1
31031: GREATER
31032: IFFALSE 31042
// k := 1 ;
31034: LD_ADDR_VAR 0 8
31038: PUSH
31039: LD_INT 1
31041: ST_TO_ADDR
// if not k then
31042: LD_VAR 0 8
31046: NOT
31047: IFFALSE 31059
// k := array ;
31049: LD_ADDR_VAR 0 8
31053: PUSH
31054: LD_VAR 0 1
31058: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31059: LD_ADDR_VAR 0 10
31063: PUSH
31064: LD_VAR 0 10
31068: PPUSH
31069: LD_VAR 0 8
31073: PPUSH
31074: LD_VAR 0 1
31078: PUSH
31079: LD_VAR 0 7
31083: ARRAY
31084: PPUSH
31085: CALL_OW 1
31089: ST_TO_ADDR
// end ;
31090: GO 31003
31092: POP
31093: POP
// array := tmp ;
31094: LD_ADDR_VAR 0 1
31098: PUSH
31099: LD_VAR 0 10
31103: ST_TO_ADDR
// end ;
31104: GO 30985
31106: POP
31107: POP
// result := array ;
31108: LD_ADDR_VAR 0 5
31112: PUSH
31113: LD_VAR 0 1
31117: ST_TO_ADDR
// end ;
31118: LD_VAR 0 5
31122: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31123: LD_INT 0
31125: PPUSH
31126: PPUSH
// result := 0 ;
31127: LD_ADDR_VAR 0 3
31131: PUSH
31132: LD_INT 0
31134: ST_TO_ADDR
// if not array or not value in array then
31135: LD_VAR 0 1
31139: NOT
31140: PUSH
31141: LD_VAR 0 2
31145: PUSH
31146: LD_VAR 0 1
31150: IN
31151: NOT
31152: OR
31153: IFFALSE 31157
// exit ;
31155: GO 31211
// for i = 1 to array do
31157: LD_ADDR_VAR 0 4
31161: PUSH
31162: DOUBLE
31163: LD_INT 1
31165: DEC
31166: ST_TO_ADDR
31167: LD_VAR 0 1
31171: PUSH
31172: FOR_TO
31173: IFFALSE 31209
// if value = array [ i ] then
31175: LD_VAR 0 2
31179: PUSH
31180: LD_VAR 0 1
31184: PUSH
31185: LD_VAR 0 4
31189: ARRAY
31190: EQUAL
31191: IFFALSE 31207
// begin result := i ;
31193: LD_ADDR_VAR 0 3
31197: PUSH
31198: LD_VAR 0 4
31202: ST_TO_ADDR
// exit ;
31203: POP
31204: POP
31205: GO 31211
// end ;
31207: GO 31172
31209: POP
31210: POP
// end ;
31211: LD_VAR 0 3
31215: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31216: LD_INT 0
31218: PPUSH
// vc_chassis := chassis ;
31219: LD_ADDR_OWVAR 37
31223: PUSH
31224: LD_VAR 0 1
31228: ST_TO_ADDR
// vc_engine := engine ;
31229: LD_ADDR_OWVAR 39
31233: PUSH
31234: LD_VAR 0 2
31238: ST_TO_ADDR
// vc_control := control ;
31239: LD_ADDR_OWVAR 38
31243: PUSH
31244: LD_VAR 0 3
31248: ST_TO_ADDR
// vc_weapon := weapon ;
31249: LD_ADDR_OWVAR 40
31253: PUSH
31254: LD_VAR 0 4
31258: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31259: LD_ADDR_OWVAR 41
31263: PUSH
31264: LD_VAR 0 5
31268: ST_TO_ADDR
// end ;
31269: LD_VAR 0 6
31273: RET
// export function WantPlant ( unit ) ; var task ; begin
31274: LD_INT 0
31276: PPUSH
31277: PPUSH
// result := false ;
31278: LD_ADDR_VAR 0 2
31282: PUSH
31283: LD_INT 0
31285: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31286: LD_ADDR_VAR 0 3
31290: PUSH
31291: LD_VAR 0 1
31295: PPUSH
31296: CALL_OW 437
31300: ST_TO_ADDR
// if task then
31301: LD_VAR 0 3
31305: IFFALSE 31333
// if task [ 1 ] [ 1 ] = p then
31307: LD_VAR 0 3
31311: PUSH
31312: LD_INT 1
31314: ARRAY
31315: PUSH
31316: LD_INT 1
31318: ARRAY
31319: PUSH
31320: LD_STRING p
31322: EQUAL
31323: IFFALSE 31333
// result := true ;
31325: LD_ADDR_VAR 0 2
31329: PUSH
31330: LD_INT 1
31332: ST_TO_ADDR
// end ;
31333: LD_VAR 0 2
31337: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31338: LD_INT 0
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
// if pos < 1 then
31344: LD_VAR 0 2
31348: PUSH
31349: LD_INT 1
31351: LESS
31352: IFFALSE 31356
// exit ;
31354: GO 31659
// if pos = 1 then
31356: LD_VAR 0 2
31360: PUSH
31361: LD_INT 1
31363: EQUAL
31364: IFFALSE 31397
// result := Replace ( arr , pos [ 1 ] , value ) else
31366: LD_ADDR_VAR 0 4
31370: PUSH
31371: LD_VAR 0 1
31375: PPUSH
31376: LD_VAR 0 2
31380: PUSH
31381: LD_INT 1
31383: ARRAY
31384: PPUSH
31385: LD_VAR 0 3
31389: PPUSH
31390: CALL_OW 1
31394: ST_TO_ADDR
31395: GO 31659
// begin tmp := arr ;
31397: LD_ADDR_VAR 0 6
31401: PUSH
31402: LD_VAR 0 1
31406: ST_TO_ADDR
// s_arr := [ tmp ] ;
31407: LD_ADDR_VAR 0 7
31411: PUSH
31412: LD_VAR 0 6
31416: PUSH
31417: EMPTY
31418: LIST
31419: ST_TO_ADDR
// for i = 1 to pos - 1 do
31420: LD_ADDR_VAR 0 5
31424: PUSH
31425: DOUBLE
31426: LD_INT 1
31428: DEC
31429: ST_TO_ADDR
31430: LD_VAR 0 2
31434: PUSH
31435: LD_INT 1
31437: MINUS
31438: PUSH
31439: FOR_TO
31440: IFFALSE 31485
// begin tmp := tmp [ pos [ i ] ] ;
31442: LD_ADDR_VAR 0 6
31446: PUSH
31447: LD_VAR 0 6
31451: PUSH
31452: LD_VAR 0 2
31456: PUSH
31457: LD_VAR 0 5
31461: ARRAY
31462: ARRAY
31463: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31464: LD_ADDR_VAR 0 7
31468: PUSH
31469: LD_VAR 0 7
31473: PUSH
31474: LD_VAR 0 6
31478: PUSH
31479: EMPTY
31480: LIST
31481: ADD
31482: ST_TO_ADDR
// end ;
31483: GO 31439
31485: POP
31486: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31487: LD_ADDR_VAR 0 6
31491: PUSH
31492: LD_VAR 0 6
31496: PPUSH
31497: LD_VAR 0 2
31501: PUSH
31502: LD_VAR 0 2
31506: ARRAY
31507: PPUSH
31508: LD_VAR 0 3
31512: PPUSH
31513: CALL_OW 1
31517: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31518: LD_ADDR_VAR 0 7
31522: PUSH
31523: LD_VAR 0 7
31527: PPUSH
31528: LD_VAR 0 7
31532: PPUSH
31533: LD_VAR 0 6
31537: PPUSH
31538: CALL_OW 1
31542: ST_TO_ADDR
// for i = s_arr downto 2 do
31543: LD_ADDR_VAR 0 5
31547: PUSH
31548: DOUBLE
31549: LD_VAR 0 7
31553: INC
31554: ST_TO_ADDR
31555: LD_INT 2
31557: PUSH
31558: FOR_DOWNTO
31559: IFFALSE 31643
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31561: LD_ADDR_VAR 0 6
31565: PUSH
31566: LD_VAR 0 7
31570: PUSH
31571: LD_VAR 0 5
31575: PUSH
31576: LD_INT 1
31578: MINUS
31579: ARRAY
31580: PPUSH
31581: LD_VAR 0 2
31585: PUSH
31586: LD_VAR 0 5
31590: PUSH
31591: LD_INT 1
31593: MINUS
31594: ARRAY
31595: PPUSH
31596: LD_VAR 0 7
31600: PUSH
31601: LD_VAR 0 5
31605: ARRAY
31606: PPUSH
31607: CALL_OW 1
31611: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31612: LD_ADDR_VAR 0 7
31616: PUSH
31617: LD_VAR 0 7
31621: PPUSH
31622: LD_VAR 0 5
31626: PUSH
31627: LD_INT 1
31629: MINUS
31630: PPUSH
31631: LD_VAR 0 6
31635: PPUSH
31636: CALL_OW 1
31640: ST_TO_ADDR
// end ;
31641: GO 31558
31643: POP
31644: POP
// result := s_arr [ 1 ] ;
31645: LD_ADDR_VAR 0 4
31649: PUSH
31650: LD_VAR 0 7
31654: PUSH
31655: LD_INT 1
31657: ARRAY
31658: ST_TO_ADDR
// end ; end ;
31659: LD_VAR 0 4
31663: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31664: LD_INT 0
31666: PPUSH
31667: PPUSH
// if not list then
31668: LD_VAR 0 1
31672: NOT
31673: IFFALSE 31677
// exit ;
31675: GO 31768
// i := list [ pos1 ] ;
31677: LD_ADDR_VAR 0 5
31681: PUSH
31682: LD_VAR 0 1
31686: PUSH
31687: LD_VAR 0 2
31691: ARRAY
31692: ST_TO_ADDR
// if not i then
31693: LD_VAR 0 5
31697: NOT
31698: IFFALSE 31702
// exit ;
31700: GO 31768
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31702: LD_ADDR_VAR 0 1
31706: PUSH
31707: LD_VAR 0 1
31711: PPUSH
31712: LD_VAR 0 2
31716: PPUSH
31717: LD_VAR 0 1
31721: PUSH
31722: LD_VAR 0 3
31726: ARRAY
31727: PPUSH
31728: CALL_OW 1
31732: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31733: LD_ADDR_VAR 0 1
31737: PUSH
31738: LD_VAR 0 1
31742: PPUSH
31743: LD_VAR 0 3
31747: PPUSH
31748: LD_VAR 0 5
31752: PPUSH
31753: CALL_OW 1
31757: ST_TO_ADDR
// result := list ;
31758: LD_ADDR_VAR 0 4
31762: PUSH
31763: LD_VAR 0 1
31767: ST_TO_ADDR
// end ;
31768: LD_VAR 0 4
31772: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31773: LD_INT 0
31775: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31776: LD_ADDR_VAR 0 5
31780: PUSH
31781: LD_VAR 0 1
31785: PPUSH
31786: CALL_OW 250
31790: PPUSH
31791: LD_VAR 0 1
31795: PPUSH
31796: CALL_OW 251
31800: PPUSH
31801: LD_VAR 0 2
31805: PPUSH
31806: LD_VAR 0 3
31810: PPUSH
31811: LD_VAR 0 4
31815: PPUSH
31816: CALL 31826 0 5
31820: ST_TO_ADDR
// end ;
31821: LD_VAR 0 5
31825: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31826: LD_INT 0
31828: PPUSH
31829: PPUSH
31830: PPUSH
31831: PPUSH
// if not list then
31832: LD_VAR 0 3
31836: NOT
31837: IFFALSE 31841
// exit ;
31839: GO 32229
// result := [ ] ;
31841: LD_ADDR_VAR 0 6
31845: PUSH
31846: EMPTY
31847: ST_TO_ADDR
// for i in list do
31848: LD_ADDR_VAR 0 7
31852: PUSH
31853: LD_VAR 0 3
31857: PUSH
31858: FOR_IN
31859: IFFALSE 32061
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31861: LD_ADDR_VAR 0 9
31865: PUSH
31866: LD_VAR 0 7
31870: PPUSH
31871: LD_VAR 0 1
31875: PPUSH
31876: LD_VAR 0 2
31880: PPUSH
31881: CALL_OW 297
31885: ST_TO_ADDR
// if not result then
31886: LD_VAR 0 6
31890: NOT
31891: IFFALSE 31917
// result := [ [ i , tmp ] ] else
31893: LD_ADDR_VAR 0 6
31897: PUSH
31898: LD_VAR 0 7
31902: PUSH
31903: LD_VAR 0 9
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: EMPTY
31913: LIST
31914: ST_TO_ADDR
31915: GO 32059
// begin if result [ result ] [ 2 ] < tmp then
31917: LD_VAR 0 6
31921: PUSH
31922: LD_VAR 0 6
31926: ARRAY
31927: PUSH
31928: LD_INT 2
31930: ARRAY
31931: PUSH
31932: LD_VAR 0 9
31936: LESS
31937: IFFALSE 31979
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31939: LD_ADDR_VAR 0 6
31943: PUSH
31944: LD_VAR 0 6
31948: PPUSH
31949: LD_VAR 0 6
31953: PUSH
31954: LD_INT 1
31956: PLUS
31957: PPUSH
31958: LD_VAR 0 7
31962: PUSH
31963: LD_VAR 0 9
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: PPUSH
31972: CALL_OW 2
31976: ST_TO_ADDR
31977: GO 32059
// for j = 1 to result do
31979: LD_ADDR_VAR 0 8
31983: PUSH
31984: DOUBLE
31985: LD_INT 1
31987: DEC
31988: ST_TO_ADDR
31989: LD_VAR 0 6
31993: PUSH
31994: FOR_TO
31995: IFFALSE 32057
// begin if tmp < result [ j ] [ 2 ] then
31997: LD_VAR 0 9
32001: PUSH
32002: LD_VAR 0 6
32006: PUSH
32007: LD_VAR 0 8
32011: ARRAY
32012: PUSH
32013: LD_INT 2
32015: ARRAY
32016: LESS
32017: IFFALSE 32055
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32019: LD_ADDR_VAR 0 6
32023: PUSH
32024: LD_VAR 0 6
32028: PPUSH
32029: LD_VAR 0 8
32033: PPUSH
32034: LD_VAR 0 7
32038: PUSH
32039: LD_VAR 0 9
32043: PUSH
32044: EMPTY
32045: LIST
32046: LIST
32047: PPUSH
32048: CALL_OW 2
32052: ST_TO_ADDR
// break ;
32053: GO 32057
// end ; end ;
32055: GO 31994
32057: POP
32058: POP
// end ; end ;
32059: GO 31858
32061: POP
32062: POP
// if result and not asc then
32063: LD_VAR 0 6
32067: PUSH
32068: LD_VAR 0 4
32072: NOT
32073: AND
32074: IFFALSE 32149
// begin tmp := result ;
32076: LD_ADDR_VAR 0 9
32080: PUSH
32081: LD_VAR 0 6
32085: ST_TO_ADDR
// for i = tmp downto 1 do
32086: LD_ADDR_VAR 0 7
32090: PUSH
32091: DOUBLE
32092: LD_VAR 0 9
32096: INC
32097: ST_TO_ADDR
32098: LD_INT 1
32100: PUSH
32101: FOR_DOWNTO
32102: IFFALSE 32147
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32104: LD_ADDR_VAR 0 6
32108: PUSH
32109: LD_VAR 0 6
32113: PPUSH
32114: LD_VAR 0 9
32118: PUSH
32119: LD_VAR 0 7
32123: MINUS
32124: PUSH
32125: LD_INT 1
32127: PLUS
32128: PPUSH
32129: LD_VAR 0 9
32133: PUSH
32134: LD_VAR 0 7
32138: ARRAY
32139: PPUSH
32140: CALL_OW 1
32144: ST_TO_ADDR
32145: GO 32101
32147: POP
32148: POP
// end ; tmp := [ ] ;
32149: LD_ADDR_VAR 0 9
32153: PUSH
32154: EMPTY
32155: ST_TO_ADDR
// if mode then
32156: LD_VAR 0 5
32160: IFFALSE 32229
// begin for i = 1 to result do
32162: LD_ADDR_VAR 0 7
32166: PUSH
32167: DOUBLE
32168: LD_INT 1
32170: DEC
32171: ST_TO_ADDR
32172: LD_VAR 0 6
32176: PUSH
32177: FOR_TO
32178: IFFALSE 32217
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32180: LD_ADDR_VAR 0 9
32184: PUSH
32185: LD_VAR 0 9
32189: PPUSH
32190: LD_VAR 0 7
32194: PPUSH
32195: LD_VAR 0 6
32199: PUSH
32200: LD_VAR 0 7
32204: ARRAY
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: CALL_OW 1
32214: ST_TO_ADDR
32215: GO 32177
32217: POP
32218: POP
// result := tmp ;
32219: LD_ADDR_VAR 0 6
32223: PUSH
32224: LD_VAR 0 9
32228: ST_TO_ADDR
// end ; end ;
32229: LD_VAR 0 6
32233: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32234: LD_INT 0
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
32240: PPUSH
32241: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32242: LD_ADDR_VAR 0 5
32246: PUSH
32247: LD_INT 0
32249: PUSH
32250: LD_INT 0
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: EMPTY
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: ST_TO_ADDR
// if not x or not y then
32264: LD_VAR 0 2
32268: NOT
32269: PUSH
32270: LD_VAR 0 3
32274: NOT
32275: OR
32276: IFFALSE 32280
// exit ;
32278: GO 33932
// if not range then
32280: LD_VAR 0 4
32284: NOT
32285: IFFALSE 32295
// range := 10 ;
32287: LD_ADDR_VAR 0 4
32291: PUSH
32292: LD_INT 10
32294: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32295: LD_ADDR_VAR 0 8
32299: PUSH
32300: LD_INT 81
32302: PUSH
32303: LD_VAR 0 1
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: PUSH
32312: LD_INT 92
32314: PUSH
32315: LD_VAR 0 2
32319: PUSH
32320: LD_VAR 0 3
32324: PUSH
32325: LD_VAR 0 4
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 21
32341: PUSH
32342: LD_INT 3
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: LIST
32357: PPUSH
32358: CALL_OW 69
32362: ST_TO_ADDR
// if not tmp then
32363: LD_VAR 0 8
32367: NOT
32368: IFFALSE 32372
// exit ;
32370: GO 33932
// for i in tmp do
32372: LD_ADDR_VAR 0 6
32376: PUSH
32377: LD_VAR 0 8
32381: PUSH
32382: FOR_IN
32383: IFFALSE 33907
// begin points := [ 0 , 0 , 0 ] ;
32385: LD_ADDR_VAR 0 9
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: LD_INT 0
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: ST_TO_ADDR
// bpoints := 1 ;
32404: LD_ADDR_VAR 0 10
32408: PUSH
32409: LD_INT 1
32411: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32412: LD_VAR 0 6
32416: PPUSH
32417: CALL_OW 247
32421: PUSH
32422: LD_INT 1
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 33008
32430: POP
// begin if GetClass ( i ) = 1 then
32431: LD_VAR 0 6
32435: PPUSH
32436: CALL_OW 257
32440: PUSH
32441: LD_INT 1
32443: EQUAL
32444: IFFALSE 32465
// points := [ 10 , 5 , 3 ] ;
32446: LD_ADDR_VAR 0 9
32450: PUSH
32451: LD_INT 10
32453: PUSH
32454: LD_INT 5
32456: PUSH
32457: LD_INT 3
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: LIST
32464: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32465: LD_VAR 0 6
32469: PPUSH
32470: CALL_OW 257
32474: PUSH
32475: LD_INT 2
32477: PUSH
32478: LD_INT 3
32480: PUSH
32481: LD_INT 4
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: IN
32489: IFFALSE 32510
// points := [ 3 , 2 , 1 ] ;
32491: LD_ADDR_VAR 0 9
32495: PUSH
32496: LD_INT 3
32498: PUSH
32499: LD_INT 2
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: EMPTY
32506: LIST
32507: LIST
32508: LIST
32509: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32510: LD_VAR 0 6
32514: PPUSH
32515: CALL_OW 257
32519: PUSH
32520: LD_INT 5
32522: EQUAL
32523: IFFALSE 32544
// points := [ 130 , 5 , 2 ] ;
32525: LD_ADDR_VAR 0 9
32529: PUSH
32530: LD_INT 130
32532: PUSH
32533: LD_INT 5
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32544: LD_VAR 0 6
32548: PPUSH
32549: CALL_OW 257
32553: PUSH
32554: LD_INT 8
32556: EQUAL
32557: IFFALSE 32578
// points := [ 35 , 35 , 30 ] ;
32559: LD_ADDR_VAR 0 9
32563: PUSH
32564: LD_INT 35
32566: PUSH
32567: LD_INT 35
32569: PUSH
32570: LD_INT 30
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: LIST
32577: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32578: LD_VAR 0 6
32582: PPUSH
32583: CALL_OW 257
32587: PUSH
32588: LD_INT 9
32590: EQUAL
32591: IFFALSE 32612
// points := [ 20 , 55 , 40 ] ;
32593: LD_ADDR_VAR 0 9
32597: PUSH
32598: LD_INT 20
32600: PUSH
32601: LD_INT 55
32603: PUSH
32604: LD_INT 40
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: LIST
32611: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32612: LD_VAR 0 6
32616: PPUSH
32617: CALL_OW 257
32621: PUSH
32622: LD_INT 12
32624: PUSH
32625: LD_INT 16
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: IN
32632: IFFALSE 32653
// points := [ 5 , 3 , 2 ] ;
32634: LD_ADDR_VAR 0 9
32638: PUSH
32639: LD_INT 5
32641: PUSH
32642: LD_INT 3
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32653: LD_VAR 0 6
32657: PPUSH
32658: CALL_OW 257
32662: PUSH
32663: LD_INT 17
32665: EQUAL
32666: IFFALSE 32687
// points := [ 100 , 50 , 75 ] ;
32668: LD_ADDR_VAR 0 9
32672: PUSH
32673: LD_INT 100
32675: PUSH
32676: LD_INT 50
32678: PUSH
32679: LD_INT 75
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32687: LD_VAR 0 6
32691: PPUSH
32692: CALL_OW 257
32696: PUSH
32697: LD_INT 15
32699: EQUAL
32700: IFFALSE 32721
// points := [ 10 , 5 , 3 ] ;
32702: LD_ADDR_VAR 0 9
32706: PUSH
32707: LD_INT 10
32709: PUSH
32710: LD_INT 5
32712: PUSH
32713: LD_INT 3
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32721: LD_VAR 0 6
32725: PPUSH
32726: CALL_OW 257
32730: PUSH
32731: LD_INT 14
32733: EQUAL
32734: IFFALSE 32755
// points := [ 10 , 0 , 0 ] ;
32736: LD_ADDR_VAR 0 9
32740: PUSH
32741: LD_INT 10
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 0
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: LIST
32754: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32755: LD_VAR 0 6
32759: PPUSH
32760: CALL_OW 257
32764: PUSH
32765: LD_INT 11
32767: EQUAL
32768: IFFALSE 32789
// points := [ 30 , 10 , 5 ] ;
32770: LD_ADDR_VAR 0 9
32774: PUSH
32775: LD_INT 30
32777: PUSH
32778: LD_INT 10
32780: PUSH
32781: LD_INT 5
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: LIST
32788: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32789: LD_VAR 0 1
32793: PPUSH
32794: LD_INT 5
32796: PPUSH
32797: CALL_OW 321
32801: PUSH
32802: LD_INT 2
32804: EQUAL
32805: IFFALSE 32822
// bpoints := bpoints * 1.8 ;
32807: LD_ADDR_VAR 0 10
32811: PUSH
32812: LD_VAR 0 10
32816: PUSH
32817: LD_REAL  1.80000000000000E+0000
32820: MUL
32821: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32822: LD_VAR 0 6
32826: PPUSH
32827: CALL_OW 257
32831: PUSH
32832: LD_INT 1
32834: PUSH
32835: LD_INT 2
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: IN
32850: PUSH
32851: LD_VAR 0 1
32855: PPUSH
32856: LD_INT 51
32858: PPUSH
32859: CALL_OW 321
32863: PUSH
32864: LD_INT 2
32866: EQUAL
32867: AND
32868: IFFALSE 32885
// bpoints := bpoints * 1.2 ;
32870: LD_ADDR_VAR 0 10
32874: PUSH
32875: LD_VAR 0 10
32879: PUSH
32880: LD_REAL  1.20000000000000E+0000
32883: MUL
32884: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32885: LD_VAR 0 6
32889: PPUSH
32890: CALL_OW 257
32894: PUSH
32895: LD_INT 5
32897: PUSH
32898: LD_INT 7
32900: PUSH
32901: LD_INT 9
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: LIST
32908: IN
32909: PUSH
32910: LD_VAR 0 1
32914: PPUSH
32915: LD_INT 52
32917: PPUSH
32918: CALL_OW 321
32922: PUSH
32923: LD_INT 2
32925: EQUAL
32926: AND
32927: IFFALSE 32944
// bpoints := bpoints * 1.5 ;
32929: LD_ADDR_VAR 0 10
32933: PUSH
32934: LD_VAR 0 10
32938: PUSH
32939: LD_REAL  1.50000000000000E+0000
32942: MUL
32943: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32944: LD_VAR 0 1
32948: PPUSH
32949: LD_INT 66
32951: PPUSH
32952: CALL_OW 321
32956: PUSH
32957: LD_INT 2
32959: EQUAL
32960: IFFALSE 32977
// bpoints := bpoints * 1.1 ;
32962: LD_ADDR_VAR 0 10
32966: PUSH
32967: LD_VAR 0 10
32971: PUSH
32972: LD_REAL  1.10000000000000E+0000
32975: MUL
32976: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
32977: LD_ADDR_VAR 0 10
32981: PUSH
32982: LD_VAR 0 10
32986: PUSH
32987: LD_VAR 0 6
32991: PPUSH
32992: LD_INT 1
32994: PPUSH
32995: CALL_OW 259
32999: PUSH
33000: LD_REAL  1.15000000000000E+0000
33003: MUL
33004: MUL
33005: ST_TO_ADDR
// end ; unit_vehicle :
33006: GO 33836
33008: LD_INT 2
33010: DOUBLE
33011: EQUAL
33012: IFTRUE 33016
33014: GO 33824
33016: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33017: LD_VAR 0 6
33021: PPUSH
33022: CALL_OW 264
33026: PUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 42
33032: PUSH
33033: LD_INT 24
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: IN
33041: IFFALSE 33062
// points := [ 25 , 5 , 3 ] ;
33043: LD_ADDR_VAR 0 9
33047: PUSH
33048: LD_INT 25
33050: PUSH
33051: LD_INT 5
33053: PUSH
33054: LD_INT 3
33056: PUSH
33057: EMPTY
33058: LIST
33059: LIST
33060: LIST
33061: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33062: LD_VAR 0 6
33066: PPUSH
33067: CALL_OW 264
33071: PUSH
33072: LD_INT 4
33074: PUSH
33075: LD_INT 43
33077: PUSH
33078: LD_INT 25
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: LIST
33085: IN
33086: IFFALSE 33107
// points := [ 40 , 15 , 5 ] ;
33088: LD_ADDR_VAR 0 9
33092: PUSH
33093: LD_INT 40
33095: PUSH
33096: LD_INT 15
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33107: LD_VAR 0 6
33111: PPUSH
33112: CALL_OW 264
33116: PUSH
33117: LD_INT 3
33119: PUSH
33120: LD_INT 23
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: IN
33127: IFFALSE 33148
// points := [ 7 , 25 , 8 ] ;
33129: LD_ADDR_VAR 0 9
33133: PUSH
33134: LD_INT 7
33136: PUSH
33137: LD_INT 25
33139: PUSH
33140: LD_INT 8
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: LIST
33147: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33148: LD_VAR 0 6
33152: PPUSH
33153: CALL_OW 264
33157: PUSH
33158: LD_INT 5
33160: PUSH
33161: LD_INT 27
33163: PUSH
33164: LD_INT 44
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: IN
33172: IFFALSE 33193
// points := [ 14 , 50 , 16 ] ;
33174: LD_ADDR_VAR 0 9
33178: PUSH
33179: LD_INT 14
33181: PUSH
33182: LD_INT 50
33184: PUSH
33185: LD_INT 16
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33193: LD_VAR 0 6
33197: PPUSH
33198: CALL_OW 264
33202: PUSH
33203: LD_INT 6
33205: PUSH
33206: LD_INT 46
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: IN
33213: IFFALSE 33234
// points := [ 32 , 120 , 70 ] ;
33215: LD_ADDR_VAR 0 9
33219: PUSH
33220: LD_INT 32
33222: PUSH
33223: LD_INT 120
33225: PUSH
33226: LD_INT 70
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33234: LD_VAR 0 6
33238: PPUSH
33239: CALL_OW 264
33243: PUSH
33244: LD_INT 7
33246: PUSH
33247: LD_INT 28
33249: PUSH
33250: LD_INT 45
33252: PUSH
33253: LD_EXP 29
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: IN
33264: IFFALSE 33285
// points := [ 35 , 20 , 45 ] ;
33266: LD_ADDR_VAR 0 9
33270: PUSH
33271: LD_INT 35
33273: PUSH
33274: LD_INT 20
33276: PUSH
33277: LD_INT 45
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33285: LD_VAR 0 6
33289: PPUSH
33290: CALL_OW 264
33294: PUSH
33295: LD_INT 47
33297: PUSH
33298: EMPTY
33299: LIST
33300: IN
33301: IFFALSE 33322
// points := [ 67 , 45 , 75 ] ;
33303: LD_ADDR_VAR 0 9
33307: PUSH
33308: LD_INT 67
33310: PUSH
33311: LD_INT 45
33313: PUSH
33314: LD_INT 75
33316: PUSH
33317: EMPTY
33318: LIST
33319: LIST
33320: LIST
33321: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33322: LD_VAR 0 6
33326: PPUSH
33327: CALL_OW 264
33331: PUSH
33332: LD_INT 26
33334: PUSH
33335: EMPTY
33336: LIST
33337: IN
33338: IFFALSE 33359
// points := [ 120 , 30 , 80 ] ;
33340: LD_ADDR_VAR 0 9
33344: PUSH
33345: LD_INT 120
33347: PUSH
33348: LD_INT 30
33350: PUSH
33351: LD_INT 80
33353: PUSH
33354: EMPTY
33355: LIST
33356: LIST
33357: LIST
33358: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33359: LD_VAR 0 6
33363: PPUSH
33364: CALL_OW 264
33368: PUSH
33369: LD_INT 22
33371: PUSH
33372: EMPTY
33373: LIST
33374: IN
33375: IFFALSE 33396
// points := [ 40 , 1 , 1 ] ;
33377: LD_ADDR_VAR 0 9
33381: PUSH
33382: LD_INT 40
33384: PUSH
33385: LD_INT 1
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: EMPTY
33392: LIST
33393: LIST
33394: LIST
33395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33396: LD_VAR 0 6
33400: PPUSH
33401: CALL_OW 264
33405: PUSH
33406: LD_INT 29
33408: PUSH
33409: EMPTY
33410: LIST
33411: IN
33412: IFFALSE 33433
// points := [ 70 , 200 , 400 ] ;
33414: LD_ADDR_VAR 0 9
33418: PUSH
33419: LD_INT 70
33421: PUSH
33422: LD_INT 200
33424: PUSH
33425: LD_INT 400
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: LIST
33432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33433: LD_VAR 0 6
33437: PPUSH
33438: CALL_OW 264
33442: PUSH
33443: LD_INT 14
33445: PUSH
33446: LD_INT 53
33448: PUSH
33449: EMPTY
33450: LIST
33451: LIST
33452: IN
33453: IFFALSE 33474
// points := [ 40 , 10 , 20 ] ;
33455: LD_ADDR_VAR 0 9
33459: PUSH
33460: LD_INT 40
33462: PUSH
33463: LD_INT 10
33465: PUSH
33466: LD_INT 20
33468: PUSH
33469: EMPTY
33470: LIST
33471: LIST
33472: LIST
33473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33474: LD_VAR 0 6
33478: PPUSH
33479: CALL_OW 264
33483: PUSH
33484: LD_INT 9
33486: PUSH
33487: EMPTY
33488: LIST
33489: IN
33490: IFFALSE 33511
// points := [ 5 , 70 , 20 ] ;
33492: LD_ADDR_VAR 0 9
33496: PUSH
33497: LD_INT 5
33499: PUSH
33500: LD_INT 70
33502: PUSH
33503: LD_INT 20
33505: PUSH
33506: EMPTY
33507: LIST
33508: LIST
33509: LIST
33510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33511: LD_VAR 0 6
33515: PPUSH
33516: CALL_OW 264
33520: PUSH
33521: LD_INT 10
33523: PUSH
33524: EMPTY
33525: LIST
33526: IN
33527: IFFALSE 33548
// points := [ 35 , 110 , 70 ] ;
33529: LD_ADDR_VAR 0 9
33533: PUSH
33534: LD_INT 35
33536: PUSH
33537: LD_INT 110
33539: PUSH
33540: LD_INT 70
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: LIST
33547: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33548: LD_VAR 0 6
33552: PPUSH
33553: CALL_OW 265
33557: PUSH
33558: LD_INT 25
33560: EQUAL
33561: IFFALSE 33582
// points := [ 80 , 65 , 100 ] ;
33563: LD_ADDR_VAR 0 9
33567: PUSH
33568: LD_INT 80
33570: PUSH
33571: LD_INT 65
33573: PUSH
33574: LD_INT 100
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33582: LD_VAR 0 6
33586: PPUSH
33587: CALL_OW 263
33591: PUSH
33592: LD_INT 1
33594: EQUAL
33595: IFFALSE 33630
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33597: LD_ADDR_VAR 0 10
33601: PUSH
33602: LD_VAR 0 10
33606: PUSH
33607: LD_VAR 0 6
33611: PPUSH
33612: CALL_OW 311
33616: PPUSH
33617: LD_INT 3
33619: PPUSH
33620: CALL_OW 259
33624: PUSH
33625: LD_INT 4
33627: MUL
33628: MUL
33629: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33630: LD_VAR 0 6
33634: PPUSH
33635: CALL_OW 263
33639: PUSH
33640: LD_INT 2
33642: EQUAL
33643: IFFALSE 33694
// begin j := IsControledBy ( i ) ;
33645: LD_ADDR_VAR 0 7
33649: PUSH
33650: LD_VAR 0 6
33654: PPUSH
33655: CALL_OW 312
33659: ST_TO_ADDR
// if j then
33660: LD_VAR 0 7
33664: IFFALSE 33694
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33666: LD_ADDR_VAR 0 10
33670: PUSH
33671: LD_VAR 0 10
33675: PUSH
33676: LD_VAR 0 7
33680: PPUSH
33681: LD_INT 3
33683: PPUSH
33684: CALL_OW 259
33688: PUSH
33689: LD_INT 3
33691: MUL
33692: MUL
33693: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33694: LD_VAR 0 6
33698: PPUSH
33699: CALL_OW 264
33703: PUSH
33704: LD_INT 5
33706: PUSH
33707: LD_INT 6
33709: PUSH
33710: LD_INT 46
33712: PUSH
33713: LD_INT 44
33715: PUSH
33716: LD_INT 47
33718: PUSH
33719: LD_INT 45
33721: PUSH
33722: LD_INT 28
33724: PUSH
33725: LD_INT 7
33727: PUSH
33728: LD_INT 27
33730: PUSH
33731: LD_INT 29
33733: PUSH
33734: EMPTY
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: IN
33746: PUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_INT 52
33754: PPUSH
33755: CALL_OW 321
33759: PUSH
33760: LD_INT 2
33762: EQUAL
33763: AND
33764: IFFALSE 33781
// bpoints := bpoints * 1.2 ;
33766: LD_ADDR_VAR 0 10
33770: PUSH
33771: LD_VAR 0 10
33775: PUSH
33776: LD_REAL  1.20000000000000E+0000
33779: MUL
33780: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33781: LD_VAR 0 6
33785: PPUSH
33786: CALL_OW 264
33790: PUSH
33791: LD_INT 6
33793: PUSH
33794: LD_INT 46
33796: PUSH
33797: LD_INT 47
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: LIST
33804: IN
33805: IFFALSE 33822
// bpoints := bpoints * 1.2 ;
33807: LD_ADDR_VAR 0 10
33811: PUSH
33812: LD_VAR 0 10
33816: PUSH
33817: LD_REAL  1.20000000000000E+0000
33820: MUL
33821: ST_TO_ADDR
// end ; unit_building :
33822: GO 33836
33824: LD_INT 3
33826: DOUBLE
33827: EQUAL
33828: IFTRUE 33832
33830: GO 33835
33832: POP
// ; end ;
33833: GO 33836
33835: POP
// for j = 1 to 3 do
33836: LD_ADDR_VAR 0 7
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_INT 3
33848: PUSH
33849: FOR_TO
33850: IFFALSE 33903
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33852: LD_ADDR_VAR 0 5
33856: PUSH
33857: LD_VAR 0 5
33861: PPUSH
33862: LD_VAR 0 7
33866: PPUSH
33867: LD_VAR 0 5
33871: PUSH
33872: LD_VAR 0 7
33876: ARRAY
33877: PUSH
33878: LD_VAR 0 9
33882: PUSH
33883: LD_VAR 0 7
33887: ARRAY
33888: PUSH
33889: LD_VAR 0 10
33893: MUL
33894: PLUS
33895: PPUSH
33896: CALL_OW 1
33900: ST_TO_ADDR
33901: GO 33849
33903: POP
33904: POP
// end ;
33905: GO 32382
33907: POP
33908: POP
// result := Replace ( result , 4 , tmp ) ;
33909: LD_ADDR_VAR 0 5
33913: PUSH
33914: LD_VAR 0 5
33918: PPUSH
33919: LD_INT 4
33921: PPUSH
33922: LD_VAR 0 8
33926: PPUSH
33927: CALL_OW 1
33931: ST_TO_ADDR
// end ;
33932: LD_VAR 0 5
33936: RET
// export function DangerAtRange ( unit , range ) ; begin
33937: LD_INT 0
33939: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_VAR 0 1
33949: PPUSH
33950: CALL_OW 255
33954: PPUSH
33955: LD_VAR 0 1
33959: PPUSH
33960: CALL_OW 250
33964: PPUSH
33965: LD_VAR 0 1
33969: PPUSH
33970: CALL_OW 251
33974: PPUSH
33975: LD_VAR 0 2
33979: PPUSH
33980: CALL 32234 0 4
33984: ST_TO_ADDR
// end ;
33985: LD_VAR 0 3
33989: RET
// export function DangerInArea ( side , area ) ; begin
33990: LD_INT 0
33992: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
33993: LD_ADDR_VAR 0 3
33997: PUSH
33998: LD_VAR 0 2
34002: PPUSH
34003: LD_INT 81
34005: PUSH
34006: LD_VAR 0 1
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PPUSH
34015: CALL_OW 70
34019: ST_TO_ADDR
// end ;
34020: LD_VAR 0 3
34024: RET
// export function IsExtension ( b ) ; begin
34025: LD_INT 0
34027: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34028: LD_ADDR_VAR 0 2
34032: PUSH
34033: LD_VAR 0 1
34037: PUSH
34038: LD_INT 23
34040: PUSH
34041: LD_INT 20
34043: PUSH
34044: LD_INT 22
34046: PUSH
34047: LD_INT 17
34049: PUSH
34050: LD_INT 24
34052: PUSH
34053: LD_INT 21
34055: PUSH
34056: LD_INT 19
34058: PUSH
34059: LD_INT 16
34061: PUSH
34062: LD_INT 25
34064: PUSH
34065: LD_INT 18
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: LIST
34073: LIST
34074: LIST
34075: LIST
34076: LIST
34077: LIST
34078: LIST
34079: IN
34080: ST_TO_ADDR
// end ;
34081: LD_VAR 0 2
34085: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34086: LD_INT 0
34088: PPUSH
34089: PPUSH
34090: PPUSH
// result := [ ] ;
34091: LD_ADDR_VAR 0 4
34095: PUSH
34096: EMPTY
34097: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34098: LD_ADDR_VAR 0 5
34102: PUSH
34103: LD_VAR 0 2
34107: PPUSH
34108: LD_INT 21
34110: PUSH
34111: LD_INT 3
34113: PUSH
34114: EMPTY
34115: LIST
34116: LIST
34117: PPUSH
34118: CALL_OW 70
34122: ST_TO_ADDR
// if not tmp then
34123: LD_VAR 0 5
34127: NOT
34128: IFFALSE 34132
// exit ;
34130: GO 34196
// if checkLink then
34132: LD_VAR 0 3
34136: IFFALSE 34186
// begin for i in tmp do
34138: LD_ADDR_VAR 0 6
34142: PUSH
34143: LD_VAR 0 5
34147: PUSH
34148: FOR_IN
34149: IFFALSE 34184
// if GetBase ( i ) <> base then
34151: LD_VAR 0 6
34155: PPUSH
34156: CALL_OW 274
34160: PUSH
34161: LD_VAR 0 1
34165: NONEQUAL
34166: IFFALSE 34182
// ComLinkToBase ( base , i ) ;
34168: LD_VAR 0 1
34172: PPUSH
34173: LD_VAR 0 6
34177: PPUSH
34178: CALL_OW 169
34182: GO 34148
34184: POP
34185: POP
// end ; result := tmp ;
34186: LD_ADDR_VAR 0 4
34190: PUSH
34191: LD_VAR 0 5
34195: ST_TO_ADDR
// end ;
34196: LD_VAR 0 4
34200: RET
// export function ComComplete ( units , b ) ; var i ; begin
34201: LD_INT 0
34203: PPUSH
34204: PPUSH
// if not units then
34205: LD_VAR 0 1
34209: NOT
34210: IFFALSE 34214
// exit ;
34212: GO 34304
// for i in units do
34214: LD_ADDR_VAR 0 4
34218: PUSH
34219: LD_VAR 0 1
34223: PUSH
34224: FOR_IN
34225: IFFALSE 34302
// if BuildingStatus ( b ) = bs_build then
34227: LD_VAR 0 2
34231: PPUSH
34232: CALL_OW 461
34236: PUSH
34237: LD_INT 1
34239: EQUAL
34240: IFFALSE 34300
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34242: LD_VAR 0 4
34246: PPUSH
34247: LD_STRING h
34249: PUSH
34250: LD_VAR 0 2
34254: PPUSH
34255: CALL_OW 250
34259: PUSH
34260: LD_VAR 0 2
34264: PPUSH
34265: CALL_OW 251
34269: PUSH
34270: LD_VAR 0 2
34274: PUSH
34275: LD_INT 0
34277: PUSH
34278: LD_INT 0
34280: PUSH
34281: LD_INT 0
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: PUSH
34293: EMPTY
34294: LIST
34295: PPUSH
34296: CALL_OW 446
34300: GO 34224
34302: POP
34303: POP
// end ;
34304: LD_VAR 0 3
34308: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34309: LD_INT 0
34311: PPUSH
34312: PPUSH
34313: PPUSH
34314: PPUSH
34315: PPUSH
34316: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34317: LD_VAR 0 1
34321: NOT
34322: PUSH
34323: LD_VAR 0 1
34327: PPUSH
34328: CALL_OW 263
34332: PUSH
34333: LD_INT 2
34335: NONEQUAL
34336: OR
34337: IFFALSE 34341
// exit ;
34339: GO 34657
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34341: LD_ADDR_VAR 0 6
34345: PUSH
34346: LD_INT 22
34348: PUSH
34349: LD_VAR 0 1
34353: PPUSH
34354: CALL_OW 255
34358: PUSH
34359: EMPTY
34360: LIST
34361: LIST
34362: PUSH
34363: LD_INT 2
34365: PUSH
34366: LD_INT 30
34368: PUSH
34369: LD_INT 36
34371: PUSH
34372: EMPTY
34373: LIST
34374: LIST
34375: PUSH
34376: LD_INT 34
34378: PUSH
34379: LD_INT 31
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: PUSH
34391: EMPTY
34392: LIST
34393: LIST
34394: PPUSH
34395: CALL_OW 69
34399: ST_TO_ADDR
// if not tmp then
34400: LD_VAR 0 6
34404: NOT
34405: IFFALSE 34409
// exit ;
34407: GO 34657
// result := [ ] ;
34409: LD_ADDR_VAR 0 2
34413: PUSH
34414: EMPTY
34415: ST_TO_ADDR
// for i in tmp do
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_VAR 0 6
34425: PUSH
34426: FOR_IN
34427: IFFALSE 34498
// begin t := UnitsInside ( i ) ;
34429: LD_ADDR_VAR 0 4
34433: PUSH
34434: LD_VAR 0 3
34438: PPUSH
34439: CALL_OW 313
34443: ST_TO_ADDR
// if t then
34444: LD_VAR 0 4
34448: IFFALSE 34496
// for j in t do
34450: LD_ADDR_VAR 0 7
34454: PUSH
34455: LD_VAR 0 4
34459: PUSH
34460: FOR_IN
34461: IFFALSE 34494
// result := Replace ( result , result + 1 , j ) ;
34463: LD_ADDR_VAR 0 2
34467: PUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: LD_VAR 0 2
34477: PUSH
34478: LD_INT 1
34480: PLUS
34481: PPUSH
34482: LD_VAR 0 7
34486: PPUSH
34487: CALL_OW 1
34491: ST_TO_ADDR
34492: GO 34460
34494: POP
34495: POP
// end ;
34496: GO 34426
34498: POP
34499: POP
// if not result then
34500: LD_VAR 0 2
34504: NOT
34505: IFFALSE 34509
// exit ;
34507: GO 34657
// mech := result [ 1 ] ;
34509: LD_ADDR_VAR 0 5
34513: PUSH
34514: LD_VAR 0 2
34518: PUSH
34519: LD_INT 1
34521: ARRAY
34522: ST_TO_ADDR
// if result > 1 then
34523: LD_VAR 0 2
34527: PUSH
34528: LD_INT 1
34530: GREATER
34531: IFFALSE 34643
// begin for i = 2 to result do
34533: LD_ADDR_VAR 0 3
34537: PUSH
34538: DOUBLE
34539: LD_INT 2
34541: DEC
34542: ST_TO_ADDR
34543: LD_VAR 0 2
34547: PUSH
34548: FOR_TO
34549: IFFALSE 34641
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34551: LD_ADDR_VAR 0 4
34555: PUSH
34556: LD_VAR 0 2
34560: PUSH
34561: LD_VAR 0 3
34565: ARRAY
34566: PPUSH
34567: LD_INT 3
34569: PPUSH
34570: CALL_OW 259
34574: PUSH
34575: LD_VAR 0 2
34579: PUSH
34580: LD_VAR 0 3
34584: ARRAY
34585: PPUSH
34586: CALL_OW 432
34590: MINUS
34591: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34592: LD_VAR 0 4
34596: PUSH
34597: LD_VAR 0 5
34601: PPUSH
34602: LD_INT 3
34604: PPUSH
34605: CALL_OW 259
34609: PUSH
34610: LD_VAR 0 5
34614: PPUSH
34615: CALL_OW 432
34619: MINUS
34620: GREATEREQUAL
34621: IFFALSE 34639
// mech := result [ i ] ;
34623: LD_ADDR_VAR 0 5
34627: PUSH
34628: LD_VAR 0 2
34632: PUSH
34633: LD_VAR 0 3
34637: ARRAY
34638: ST_TO_ADDR
// end ;
34639: GO 34548
34641: POP
34642: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34643: LD_VAR 0 1
34647: PPUSH
34648: LD_VAR 0 5
34652: PPUSH
34653: CALL_OW 135
// end ;
34657: LD_VAR 0 2
34661: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34662: LD_INT 0
34664: PPUSH
34665: PPUSH
34666: PPUSH
34667: PPUSH
34668: PPUSH
34669: PPUSH
34670: PPUSH
34671: PPUSH
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
// result := [ ] ;
34677: LD_ADDR_VAR 0 7
34681: PUSH
34682: EMPTY
34683: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34684: LD_VAR 0 1
34688: PPUSH
34689: CALL_OW 266
34693: PUSH
34694: LD_INT 0
34696: PUSH
34697: LD_INT 1
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: IN
34704: NOT
34705: IFFALSE 34709
// exit ;
34707: GO 36343
// if name then
34709: LD_VAR 0 3
34713: IFFALSE 34729
// SetBName ( base_dep , name ) ;
34715: LD_VAR 0 1
34719: PPUSH
34720: LD_VAR 0 3
34724: PPUSH
34725: CALL_OW 500
// base := GetBase ( base_dep ) ;
34729: LD_ADDR_VAR 0 15
34733: PUSH
34734: LD_VAR 0 1
34738: PPUSH
34739: CALL_OW 274
34743: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34744: LD_ADDR_VAR 0 16
34748: PUSH
34749: LD_VAR 0 1
34753: PPUSH
34754: CALL_OW 255
34758: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34759: LD_ADDR_VAR 0 17
34763: PUSH
34764: LD_VAR 0 1
34768: PPUSH
34769: CALL_OW 248
34773: ST_TO_ADDR
// if sources then
34774: LD_VAR 0 5
34778: IFFALSE 34825
// for i = 1 to 3 do
34780: LD_ADDR_VAR 0 8
34784: PUSH
34785: DOUBLE
34786: LD_INT 1
34788: DEC
34789: ST_TO_ADDR
34790: LD_INT 3
34792: PUSH
34793: FOR_TO
34794: IFFALSE 34823
// AddResourceType ( base , i , sources [ i ] ) ;
34796: LD_VAR 0 15
34800: PPUSH
34801: LD_VAR 0 8
34805: PPUSH
34806: LD_VAR 0 5
34810: PUSH
34811: LD_VAR 0 8
34815: ARRAY
34816: PPUSH
34817: CALL_OW 276
34821: GO 34793
34823: POP
34824: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34825: LD_ADDR_VAR 0 18
34829: PUSH
34830: LD_VAR 0 15
34834: PPUSH
34835: LD_VAR 0 2
34839: PPUSH
34840: LD_INT 1
34842: PPUSH
34843: CALL 34086 0 3
34847: ST_TO_ADDR
// InitHc ;
34848: CALL_OW 19
// InitUc ;
34852: CALL_OW 18
// uc_side := side ;
34856: LD_ADDR_OWVAR 20
34860: PUSH
34861: LD_VAR 0 16
34865: ST_TO_ADDR
// uc_nation := nation ;
34866: LD_ADDR_OWVAR 21
34870: PUSH
34871: LD_VAR 0 17
34875: ST_TO_ADDR
// if buildings then
34876: LD_VAR 0 18
34880: IFFALSE 36202
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34882: LD_ADDR_VAR 0 19
34886: PUSH
34887: LD_VAR 0 18
34891: PPUSH
34892: LD_INT 2
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: LD_INT 29
34900: PUSH
34901: EMPTY
34902: LIST
34903: LIST
34904: PUSH
34905: LD_INT 30
34907: PUSH
34908: LD_INT 30
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: LIST
34919: PPUSH
34920: CALL_OW 72
34924: ST_TO_ADDR
// if tmp then
34925: LD_VAR 0 19
34929: IFFALSE 34977
// for i in tmp do
34931: LD_ADDR_VAR 0 8
34935: PUSH
34936: LD_VAR 0 19
34940: PUSH
34941: FOR_IN
34942: IFFALSE 34975
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34944: LD_VAR 0 8
34948: PPUSH
34949: CALL_OW 250
34953: PPUSH
34954: LD_VAR 0 8
34958: PPUSH
34959: CALL_OW 251
34963: PPUSH
34964: LD_VAR 0 16
34968: PPUSH
34969: CALL_OW 441
34973: GO 34941
34975: POP
34976: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
34977: LD_VAR 0 18
34981: PPUSH
34982: LD_INT 2
34984: PUSH
34985: LD_INT 30
34987: PUSH
34988: LD_INT 32
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 30
34997: PUSH
34998: LD_INT 33
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: PPUSH
35010: CALL_OW 72
35014: IFFALSE 35102
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35016: LD_ADDR_VAR 0 8
35020: PUSH
35021: LD_VAR 0 18
35025: PPUSH
35026: LD_INT 2
35028: PUSH
35029: LD_INT 30
35031: PUSH
35032: LD_INT 32
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 30
35041: PUSH
35042: LD_INT 33
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: LIST
35053: PPUSH
35054: CALL_OW 72
35058: PUSH
35059: FOR_IN
35060: IFFALSE 35100
// begin if not GetBWeapon ( i ) then
35062: LD_VAR 0 8
35066: PPUSH
35067: CALL_OW 269
35071: NOT
35072: IFFALSE 35098
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35074: LD_VAR 0 8
35078: PPUSH
35079: LD_VAR 0 8
35083: PPUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: CALL 36348 0 2
35093: PPUSH
35094: CALL_OW 431
// end ;
35098: GO 35059
35100: POP
35101: POP
// end ; for i = 1 to personel do
35102: LD_ADDR_VAR 0 8
35106: PUSH
35107: DOUBLE
35108: LD_INT 1
35110: DEC
35111: ST_TO_ADDR
35112: LD_VAR 0 6
35116: PUSH
35117: FOR_TO
35118: IFFALSE 36182
// begin if i > 4 then
35120: LD_VAR 0 8
35124: PUSH
35125: LD_INT 4
35127: GREATER
35128: IFFALSE 35132
// break ;
35130: GO 36182
// case i of 1 :
35132: LD_VAR 0 8
35136: PUSH
35137: LD_INT 1
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35145
35143: GO 35225
35145: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35146: LD_ADDR_VAR 0 12
35150: PUSH
35151: LD_VAR 0 18
35155: PPUSH
35156: LD_INT 22
35158: PUSH
35159: LD_VAR 0 16
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 58
35170: PUSH
35171: EMPTY
35172: LIST
35173: PUSH
35174: LD_INT 2
35176: PUSH
35177: LD_INT 30
35179: PUSH
35180: LD_INT 32
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 30
35189: PUSH
35190: LD_INT 4
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 30
35199: PUSH
35200: LD_INT 5
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: LIST
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: PPUSH
35218: CALL_OW 72
35222: ST_TO_ADDR
35223: GO 35447
35225: LD_INT 2
35227: DOUBLE
35228: EQUAL
35229: IFTRUE 35233
35231: GO 35295
35233: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35234: LD_ADDR_VAR 0 12
35238: PUSH
35239: LD_VAR 0 18
35243: PPUSH
35244: LD_INT 22
35246: PUSH
35247: LD_VAR 0 16
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: LD_INT 30
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 30
35271: PUSH
35272: LD_INT 1
35274: PUSH
35275: EMPTY
35276: LIST
35277: LIST
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: LIST
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PPUSH
35288: CALL_OW 72
35292: ST_TO_ADDR
35293: GO 35447
35295: LD_INT 3
35297: DOUBLE
35298: EQUAL
35299: IFTRUE 35303
35301: GO 35365
35303: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35304: LD_ADDR_VAR 0 12
35308: PUSH
35309: LD_VAR 0 18
35313: PPUSH
35314: LD_INT 22
35316: PUSH
35317: LD_VAR 0 16
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: LD_INT 2
35328: PUSH
35329: LD_INT 30
35331: PUSH
35332: LD_INT 2
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: PUSH
35339: LD_INT 30
35341: PUSH
35342: LD_INT 3
35344: PUSH
35345: EMPTY
35346: LIST
35347: LIST
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: LIST
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PPUSH
35358: CALL_OW 72
35362: ST_TO_ADDR
35363: GO 35447
35365: LD_INT 4
35367: DOUBLE
35368: EQUAL
35369: IFTRUE 35373
35371: GO 35446
35373: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35374: LD_ADDR_VAR 0 12
35378: PUSH
35379: LD_VAR 0 18
35383: PPUSH
35384: LD_INT 22
35386: PUSH
35387: LD_VAR 0 16
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 2
35398: PUSH
35399: LD_INT 30
35401: PUSH
35402: LD_INT 6
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: LD_INT 30
35411: PUSH
35412: LD_INT 7
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: PUSH
35419: LD_INT 30
35421: PUSH
35422: LD_INT 8
35424: PUSH
35425: EMPTY
35426: LIST
35427: LIST
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: LIST
35433: LIST
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PPUSH
35439: CALL_OW 72
35443: ST_TO_ADDR
35444: GO 35447
35446: POP
// if i = 1 then
35447: LD_VAR 0 8
35451: PUSH
35452: LD_INT 1
35454: EQUAL
35455: IFFALSE 35566
// begin tmp := [ ] ;
35457: LD_ADDR_VAR 0 19
35461: PUSH
35462: EMPTY
35463: ST_TO_ADDR
// for j in f do
35464: LD_ADDR_VAR 0 9
35468: PUSH
35469: LD_VAR 0 12
35473: PUSH
35474: FOR_IN
35475: IFFALSE 35548
// if GetBType ( j ) = b_bunker then
35477: LD_VAR 0 9
35481: PPUSH
35482: CALL_OW 266
35486: PUSH
35487: LD_INT 32
35489: EQUAL
35490: IFFALSE 35517
// tmp := Insert ( tmp , 1 , j ) else
35492: LD_ADDR_VAR 0 19
35496: PUSH
35497: LD_VAR 0 19
35501: PPUSH
35502: LD_INT 1
35504: PPUSH
35505: LD_VAR 0 9
35509: PPUSH
35510: CALL_OW 2
35514: ST_TO_ADDR
35515: GO 35546
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35517: LD_ADDR_VAR 0 19
35521: PUSH
35522: LD_VAR 0 19
35526: PPUSH
35527: LD_VAR 0 19
35531: PUSH
35532: LD_INT 1
35534: PLUS
35535: PPUSH
35536: LD_VAR 0 9
35540: PPUSH
35541: CALL_OW 2
35545: ST_TO_ADDR
35546: GO 35474
35548: POP
35549: POP
// if tmp then
35550: LD_VAR 0 19
35554: IFFALSE 35566
// f := tmp ;
35556: LD_ADDR_VAR 0 12
35560: PUSH
35561: LD_VAR 0 19
35565: ST_TO_ADDR
// end ; x := personel [ i ] ;
35566: LD_ADDR_VAR 0 13
35570: PUSH
35571: LD_VAR 0 6
35575: PUSH
35576: LD_VAR 0 8
35580: ARRAY
35581: ST_TO_ADDR
// if x = - 1 then
35582: LD_VAR 0 13
35586: PUSH
35587: LD_INT 1
35589: NEG
35590: EQUAL
35591: IFFALSE 35800
// begin for j in f do
35593: LD_ADDR_VAR 0 9
35597: PUSH
35598: LD_VAR 0 12
35602: PUSH
35603: FOR_IN
35604: IFFALSE 35796
// repeat InitHc ;
35606: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35610: LD_VAR 0 9
35614: PPUSH
35615: CALL_OW 266
35619: PUSH
35620: LD_INT 5
35622: EQUAL
35623: IFFALSE 35693
// begin if UnitsInside ( j ) < 3 then
35625: LD_VAR 0 9
35629: PPUSH
35630: CALL_OW 313
35634: PUSH
35635: LD_INT 3
35637: LESS
35638: IFFALSE 35674
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35640: LD_INT 0
35642: PPUSH
35643: LD_INT 5
35645: PUSH
35646: LD_INT 8
35648: PUSH
35649: LD_INT 9
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: LIST
35656: PUSH
35657: LD_VAR 0 17
35661: ARRAY
35662: PPUSH
35663: LD_VAR 0 4
35667: PPUSH
35668: CALL_OW 380
35672: GO 35691
// PrepareHuman ( false , i , skill ) ;
35674: LD_INT 0
35676: PPUSH
35677: LD_VAR 0 8
35681: PPUSH
35682: LD_VAR 0 4
35686: PPUSH
35687: CALL_OW 380
// end else
35691: GO 35710
// PrepareHuman ( false , i , skill ) ;
35693: LD_INT 0
35695: PPUSH
35696: LD_VAR 0 8
35700: PPUSH
35701: LD_VAR 0 4
35705: PPUSH
35706: CALL_OW 380
// un := CreateHuman ;
35710: LD_ADDR_VAR 0 14
35714: PUSH
35715: CALL_OW 44
35719: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35720: LD_ADDR_VAR 0 7
35724: PUSH
35725: LD_VAR 0 7
35729: PPUSH
35730: LD_INT 1
35732: PPUSH
35733: LD_VAR 0 14
35737: PPUSH
35738: CALL_OW 2
35742: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35743: LD_VAR 0 14
35747: PPUSH
35748: LD_VAR 0 9
35752: PPUSH
35753: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35757: LD_VAR 0 9
35761: PPUSH
35762: CALL_OW 313
35766: PUSH
35767: LD_INT 6
35769: EQUAL
35770: PUSH
35771: LD_VAR 0 9
35775: PPUSH
35776: CALL_OW 266
35780: PUSH
35781: LD_INT 32
35783: PUSH
35784: LD_INT 31
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: IN
35791: OR
35792: IFFALSE 35606
35794: GO 35603
35796: POP
35797: POP
// end else
35798: GO 36180
// for j = 1 to x do
35800: LD_ADDR_VAR 0 9
35804: PUSH
35805: DOUBLE
35806: LD_INT 1
35808: DEC
35809: ST_TO_ADDR
35810: LD_VAR 0 13
35814: PUSH
35815: FOR_TO
35816: IFFALSE 36178
// begin InitHc ;
35818: CALL_OW 19
// if not f then
35822: LD_VAR 0 12
35826: NOT
35827: IFFALSE 35916
// begin PrepareHuman ( false , i , skill ) ;
35829: LD_INT 0
35831: PPUSH
35832: LD_VAR 0 8
35836: PPUSH
35837: LD_VAR 0 4
35841: PPUSH
35842: CALL_OW 380
// un := CreateHuman ;
35846: LD_ADDR_VAR 0 14
35850: PUSH
35851: CALL_OW 44
35855: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35856: LD_ADDR_VAR 0 7
35860: PUSH
35861: LD_VAR 0 7
35865: PPUSH
35866: LD_INT 1
35868: PPUSH
35869: LD_VAR 0 14
35873: PPUSH
35874: CALL_OW 2
35878: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35879: LD_VAR 0 14
35883: PPUSH
35884: LD_VAR 0 1
35888: PPUSH
35889: CALL_OW 250
35893: PPUSH
35894: LD_VAR 0 1
35898: PPUSH
35899: CALL_OW 251
35903: PPUSH
35904: LD_INT 10
35906: PPUSH
35907: LD_INT 0
35909: PPUSH
35910: CALL_OW 50
// continue ;
35914: GO 35815
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35916: LD_VAR 0 12
35920: PUSH
35921: LD_INT 1
35923: ARRAY
35924: PPUSH
35925: CALL_OW 313
35929: PUSH
35930: LD_VAR 0 12
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: PPUSH
35939: CALL_OW 266
35943: PUSH
35944: LD_INT 32
35946: PUSH
35947: LD_INT 31
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: IN
35954: AND
35955: PUSH
35956: LD_VAR 0 12
35960: PUSH
35961: LD_INT 1
35963: ARRAY
35964: PPUSH
35965: CALL_OW 313
35969: PUSH
35970: LD_INT 6
35972: EQUAL
35973: OR
35974: IFFALSE 35994
// f := Delete ( f , 1 ) ;
35976: LD_ADDR_VAR 0 12
35980: PUSH
35981: LD_VAR 0 12
35985: PPUSH
35986: LD_INT 1
35988: PPUSH
35989: CALL_OW 3
35993: ST_TO_ADDR
// if not f then
35994: LD_VAR 0 12
35998: NOT
35999: IFFALSE 36017
// begin x := x + 2 ;
36001: LD_ADDR_VAR 0 13
36005: PUSH
36006: LD_VAR 0 13
36010: PUSH
36011: LD_INT 2
36013: PLUS
36014: ST_TO_ADDR
// continue ;
36015: GO 35815
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36017: LD_VAR 0 12
36021: PUSH
36022: LD_INT 1
36024: ARRAY
36025: PPUSH
36026: CALL_OW 266
36030: PUSH
36031: LD_INT 5
36033: EQUAL
36034: IFFALSE 36108
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36036: LD_VAR 0 12
36040: PUSH
36041: LD_INT 1
36043: ARRAY
36044: PPUSH
36045: CALL_OW 313
36049: PUSH
36050: LD_INT 3
36052: LESS
36053: IFFALSE 36089
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36055: LD_INT 0
36057: PPUSH
36058: LD_INT 5
36060: PUSH
36061: LD_INT 8
36063: PUSH
36064: LD_INT 9
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: PUSH
36072: LD_VAR 0 17
36076: ARRAY
36077: PPUSH
36078: LD_VAR 0 4
36082: PPUSH
36083: CALL_OW 380
36087: GO 36106
// PrepareHuman ( false , i , skill ) ;
36089: LD_INT 0
36091: PPUSH
36092: LD_VAR 0 8
36096: PPUSH
36097: LD_VAR 0 4
36101: PPUSH
36102: CALL_OW 380
// end else
36106: GO 36125
// PrepareHuman ( false , i , skill ) ;
36108: LD_INT 0
36110: PPUSH
36111: LD_VAR 0 8
36115: PPUSH
36116: LD_VAR 0 4
36120: PPUSH
36121: CALL_OW 380
// un := CreateHuman ;
36125: LD_ADDR_VAR 0 14
36129: PUSH
36130: CALL_OW 44
36134: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36135: LD_ADDR_VAR 0 7
36139: PUSH
36140: LD_VAR 0 7
36144: PPUSH
36145: LD_INT 1
36147: PPUSH
36148: LD_VAR 0 14
36152: PPUSH
36153: CALL_OW 2
36157: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36158: LD_VAR 0 14
36162: PPUSH
36163: LD_VAR 0 12
36167: PUSH
36168: LD_INT 1
36170: ARRAY
36171: PPUSH
36172: CALL_OW 52
// end ;
36176: GO 35815
36178: POP
36179: POP
// end ;
36180: GO 35117
36182: POP
36183: POP
// result := result ^ buildings ;
36184: LD_ADDR_VAR 0 7
36188: PUSH
36189: LD_VAR 0 7
36193: PUSH
36194: LD_VAR 0 18
36198: ADD
36199: ST_TO_ADDR
// end else
36200: GO 36343
// begin for i = 1 to personel do
36202: LD_ADDR_VAR 0 8
36206: PUSH
36207: DOUBLE
36208: LD_INT 1
36210: DEC
36211: ST_TO_ADDR
36212: LD_VAR 0 6
36216: PUSH
36217: FOR_TO
36218: IFFALSE 36341
// begin if i > 4 then
36220: LD_VAR 0 8
36224: PUSH
36225: LD_INT 4
36227: GREATER
36228: IFFALSE 36232
// break ;
36230: GO 36341
// x := personel [ i ] ;
36232: LD_ADDR_VAR 0 13
36236: PUSH
36237: LD_VAR 0 6
36241: PUSH
36242: LD_VAR 0 8
36246: ARRAY
36247: ST_TO_ADDR
// if x = - 1 then
36248: LD_VAR 0 13
36252: PUSH
36253: LD_INT 1
36255: NEG
36256: EQUAL
36257: IFFALSE 36261
// continue ;
36259: GO 36217
// PrepareHuman ( false , i , skill ) ;
36261: LD_INT 0
36263: PPUSH
36264: LD_VAR 0 8
36268: PPUSH
36269: LD_VAR 0 4
36273: PPUSH
36274: CALL_OW 380
// un := CreateHuman ;
36278: LD_ADDR_VAR 0 14
36282: PUSH
36283: CALL_OW 44
36287: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36288: LD_VAR 0 14
36292: PPUSH
36293: LD_VAR 0 1
36297: PPUSH
36298: CALL_OW 250
36302: PPUSH
36303: LD_VAR 0 1
36307: PPUSH
36308: CALL_OW 251
36312: PPUSH
36313: LD_INT 10
36315: PPUSH
36316: LD_INT 0
36318: PPUSH
36319: CALL_OW 50
// result := result ^ un ;
36323: LD_ADDR_VAR 0 7
36327: PUSH
36328: LD_VAR 0 7
36332: PUSH
36333: LD_VAR 0 14
36337: ADD
36338: ST_TO_ADDR
// end ;
36339: GO 36217
36341: POP
36342: POP
// end ; end ;
36343: LD_VAR 0 7
36347: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36348: LD_INT 0
36350: PPUSH
36351: PPUSH
36352: PPUSH
36353: PPUSH
36354: PPUSH
36355: PPUSH
36356: PPUSH
36357: PPUSH
36358: PPUSH
36359: PPUSH
36360: PPUSH
36361: PPUSH
36362: PPUSH
36363: PPUSH
36364: PPUSH
36365: PPUSH
// result := false ;
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_INT 0
36373: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36374: LD_VAR 0 1
36378: NOT
36379: PUSH
36380: LD_VAR 0 1
36384: PPUSH
36385: CALL_OW 266
36389: PUSH
36390: LD_INT 32
36392: PUSH
36393: LD_INT 33
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: IN
36400: NOT
36401: OR
36402: IFFALSE 36406
// exit ;
36404: GO 37515
// nat := GetNation ( tower ) ;
36406: LD_ADDR_VAR 0 12
36410: PUSH
36411: LD_VAR 0 1
36415: PPUSH
36416: CALL_OW 248
36420: ST_TO_ADDR
// side := GetSide ( tower ) ;
36421: LD_ADDR_VAR 0 16
36425: PUSH
36426: LD_VAR 0 1
36430: PPUSH
36431: CALL_OW 255
36435: ST_TO_ADDR
// x := GetX ( tower ) ;
36436: LD_ADDR_VAR 0 10
36440: PUSH
36441: LD_VAR 0 1
36445: PPUSH
36446: CALL_OW 250
36450: ST_TO_ADDR
// y := GetY ( tower ) ;
36451: LD_ADDR_VAR 0 11
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: CALL_OW 251
36465: ST_TO_ADDR
// if not x or not y then
36466: LD_VAR 0 10
36470: NOT
36471: PUSH
36472: LD_VAR 0 11
36476: NOT
36477: OR
36478: IFFALSE 36482
// exit ;
36480: GO 37515
// weapon := 0 ;
36482: LD_ADDR_VAR 0 18
36486: PUSH
36487: LD_INT 0
36489: ST_TO_ADDR
// fac_list := [ ] ;
36490: LD_ADDR_VAR 0 17
36494: PUSH
36495: EMPTY
36496: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36497: LD_ADDR_VAR 0 6
36501: PUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL_OW 274
36511: PPUSH
36512: LD_VAR 0 2
36516: PPUSH
36517: LD_INT 0
36519: PPUSH
36520: CALL 34086 0 3
36524: PPUSH
36525: LD_INT 30
36527: PUSH
36528: LD_INT 3
36530: PUSH
36531: EMPTY
36532: LIST
36533: LIST
36534: PPUSH
36535: CALL_OW 72
36539: ST_TO_ADDR
// if not factories then
36540: LD_VAR 0 6
36544: NOT
36545: IFFALSE 36549
// exit ;
36547: GO 37515
// for i in factories do
36549: LD_ADDR_VAR 0 8
36553: PUSH
36554: LD_VAR 0 6
36558: PUSH
36559: FOR_IN
36560: IFFALSE 36585
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36562: LD_ADDR_VAR 0 17
36566: PUSH
36567: LD_VAR 0 17
36571: PUSH
36572: LD_VAR 0 8
36576: PPUSH
36577: CALL_OW 478
36581: UNION
36582: ST_TO_ADDR
36583: GO 36559
36585: POP
36586: POP
// if not fac_list then
36587: LD_VAR 0 17
36591: NOT
36592: IFFALSE 36596
// exit ;
36594: GO 37515
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36596: LD_ADDR_VAR 0 5
36600: PUSH
36601: LD_INT 4
36603: PUSH
36604: LD_INT 5
36606: PUSH
36607: LD_INT 9
36609: PUSH
36610: LD_INT 10
36612: PUSH
36613: LD_INT 6
36615: PUSH
36616: LD_INT 7
36618: PUSH
36619: LD_INT 11
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 27
36633: PUSH
36634: LD_INT 28
36636: PUSH
36637: LD_INT 26
36639: PUSH
36640: LD_INT 30
36642: PUSH
36643: EMPTY
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: PUSH
36649: LD_INT 43
36651: PUSH
36652: LD_INT 44
36654: PUSH
36655: LD_INT 46
36657: PUSH
36658: LD_INT 45
36660: PUSH
36661: LD_INT 47
36663: PUSH
36664: LD_INT 49
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: PUSH
36680: LD_VAR 0 12
36684: ARRAY
36685: ST_TO_ADDR
// list := list isect fac_list ;
36686: LD_ADDR_VAR 0 5
36690: PUSH
36691: LD_VAR 0 5
36695: PUSH
36696: LD_VAR 0 17
36700: ISECT
36701: ST_TO_ADDR
// if not list then
36702: LD_VAR 0 5
36706: NOT
36707: IFFALSE 36711
// exit ;
36709: GO 37515
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36711: LD_VAR 0 12
36715: PUSH
36716: LD_INT 3
36718: EQUAL
36719: PUSH
36720: LD_INT 49
36722: PUSH
36723: LD_VAR 0 5
36727: IN
36728: AND
36729: PUSH
36730: LD_INT 31
36732: PPUSH
36733: LD_VAR 0 16
36737: PPUSH
36738: CALL_OW 321
36742: PUSH
36743: LD_INT 2
36745: EQUAL
36746: AND
36747: IFFALSE 36807
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36749: LD_INT 22
36751: PUSH
36752: LD_VAR 0 16
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 35
36763: PUSH
36764: LD_INT 49
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 91
36773: PUSH
36774: LD_VAR 0 1
36778: PUSH
36779: LD_INT 10
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: LIST
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: LIST
36791: PPUSH
36792: CALL_OW 69
36796: NOT
36797: IFFALSE 36807
// weapon := ru_time_lapser ;
36799: LD_ADDR_VAR 0 18
36803: PUSH
36804: LD_INT 49
36806: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36807: LD_VAR 0 12
36811: PUSH
36812: LD_INT 1
36814: PUSH
36815: LD_INT 2
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: IN
36822: PUSH
36823: LD_INT 11
36825: PUSH
36826: LD_VAR 0 5
36830: IN
36831: PUSH
36832: LD_INT 30
36834: PUSH
36835: LD_VAR 0 5
36839: IN
36840: OR
36841: AND
36842: PUSH
36843: LD_INT 6
36845: PPUSH
36846: LD_VAR 0 16
36850: PPUSH
36851: CALL_OW 321
36855: PUSH
36856: LD_INT 2
36858: EQUAL
36859: AND
36860: IFFALSE 37025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36862: LD_INT 22
36864: PUSH
36865: LD_VAR 0 16
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 2
36876: PUSH
36877: LD_INT 35
36879: PUSH
36880: LD_INT 11
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PUSH
36887: LD_INT 35
36889: PUSH
36890: LD_INT 30
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 91
36904: PUSH
36905: LD_VAR 0 1
36909: PUSH
36910: LD_INT 18
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: PPUSH
36923: CALL_OW 69
36927: NOT
36928: PUSH
36929: LD_INT 22
36931: PUSH
36932: LD_VAR 0 16
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 2
36943: PUSH
36944: LD_INT 30
36946: PUSH
36947: LD_INT 32
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 30
36956: PUSH
36957: LD_INT 33
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 91
36971: PUSH
36972: LD_VAR 0 1
36976: PUSH
36977: LD_INT 12
36979: PUSH
36980: EMPTY
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: PPUSH
36993: CALL_OW 69
36997: PUSH
36998: LD_INT 2
37000: GREATER
37001: AND
37002: IFFALSE 37025
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37004: LD_ADDR_VAR 0 18
37008: PUSH
37009: LD_INT 11
37011: PUSH
37012: LD_INT 30
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_VAR 0 12
37023: ARRAY
37024: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37025: LD_VAR 0 18
37029: NOT
37030: PUSH
37031: LD_INT 40
37033: PPUSH
37034: LD_VAR 0 16
37038: PPUSH
37039: CALL_OW 321
37043: PUSH
37044: LD_INT 2
37046: EQUAL
37047: AND
37048: PUSH
37049: LD_INT 7
37051: PUSH
37052: LD_VAR 0 5
37056: IN
37057: PUSH
37058: LD_INT 28
37060: PUSH
37061: LD_VAR 0 5
37065: IN
37066: OR
37067: PUSH
37068: LD_INT 45
37070: PUSH
37071: LD_VAR 0 5
37075: IN
37076: OR
37077: AND
37078: IFFALSE 37332
// begin hex := GetHexInfo ( x , y ) ;
37080: LD_ADDR_VAR 0 4
37084: PUSH
37085: LD_VAR 0 10
37089: PPUSH
37090: LD_VAR 0 11
37094: PPUSH
37095: CALL_OW 546
37099: ST_TO_ADDR
// if hex [ 1 ] then
37100: LD_VAR 0 4
37104: PUSH
37105: LD_INT 1
37107: ARRAY
37108: IFFALSE 37112
// exit ;
37110: GO 37515
// height := hex [ 2 ] ;
37112: LD_ADDR_VAR 0 15
37116: PUSH
37117: LD_VAR 0 4
37121: PUSH
37122: LD_INT 2
37124: ARRAY
37125: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37126: LD_ADDR_VAR 0 14
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 3
37139: PUSH
37140: LD_INT 5
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: ST_TO_ADDR
// for i in tmp do
37149: LD_ADDR_VAR 0 8
37153: PUSH
37154: LD_VAR 0 14
37158: PUSH
37159: FOR_IN
37160: IFFALSE 37330
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37162: LD_ADDR_VAR 0 9
37166: PUSH
37167: LD_VAR 0 10
37171: PPUSH
37172: LD_VAR 0 8
37176: PPUSH
37177: LD_INT 5
37179: PPUSH
37180: CALL_OW 272
37184: PUSH
37185: LD_VAR 0 11
37189: PPUSH
37190: LD_VAR 0 8
37194: PPUSH
37195: LD_INT 5
37197: PPUSH
37198: CALL_OW 273
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37207: LD_VAR 0 9
37211: PUSH
37212: LD_INT 1
37214: ARRAY
37215: PPUSH
37216: LD_VAR 0 9
37220: PUSH
37221: LD_INT 2
37223: ARRAY
37224: PPUSH
37225: CALL_OW 488
37229: IFFALSE 37328
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37231: LD_ADDR_VAR 0 4
37235: PUSH
37236: LD_VAR 0 9
37240: PUSH
37241: LD_INT 1
37243: ARRAY
37244: PPUSH
37245: LD_VAR 0 9
37249: PUSH
37250: LD_INT 2
37252: ARRAY
37253: PPUSH
37254: CALL_OW 546
37258: ST_TO_ADDR
// if hex [ 1 ] then
37259: LD_VAR 0 4
37263: PUSH
37264: LD_INT 1
37266: ARRAY
37267: IFFALSE 37271
// continue ;
37269: GO 37159
// h := hex [ 2 ] ;
37271: LD_ADDR_VAR 0 13
37275: PUSH
37276: LD_VAR 0 4
37280: PUSH
37281: LD_INT 2
37283: ARRAY
37284: ST_TO_ADDR
// if h + 7 < height then
37285: LD_VAR 0 13
37289: PUSH
37290: LD_INT 7
37292: PLUS
37293: PUSH
37294: LD_VAR 0 15
37298: LESS
37299: IFFALSE 37328
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37301: LD_ADDR_VAR 0 18
37305: PUSH
37306: LD_INT 7
37308: PUSH
37309: LD_INT 28
37311: PUSH
37312: LD_INT 45
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: LIST
37319: PUSH
37320: LD_VAR 0 12
37324: ARRAY
37325: ST_TO_ADDR
// break ;
37326: GO 37330
// end ; end ; end ;
37328: GO 37159
37330: POP
37331: POP
// end ; if not weapon then
37332: LD_VAR 0 18
37336: NOT
37337: IFFALSE 37397
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37339: LD_ADDR_VAR 0 5
37343: PUSH
37344: LD_VAR 0 5
37348: PUSH
37349: LD_INT 11
37351: PUSH
37352: LD_INT 30
37354: PUSH
37355: LD_INT 49
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: LIST
37362: DIFF
37363: ST_TO_ADDR
// if not list then
37364: LD_VAR 0 5
37368: NOT
37369: IFFALSE 37373
// exit ;
37371: GO 37515
// weapon := list [ rand ( 1 , list ) ] ;
37373: LD_ADDR_VAR 0 18
37377: PUSH
37378: LD_VAR 0 5
37382: PUSH
37383: LD_INT 1
37385: PPUSH
37386: LD_VAR 0 5
37390: PPUSH
37391: CALL_OW 12
37395: ARRAY
37396: ST_TO_ADDR
// end ; if weapon then
37397: LD_VAR 0 18
37401: IFFALSE 37515
// begin tmp := CostOfWeapon ( weapon ) ;
37403: LD_ADDR_VAR 0 14
37407: PUSH
37408: LD_VAR 0 18
37412: PPUSH
37413: CALL_OW 451
37417: ST_TO_ADDR
// j := GetBase ( tower ) ;
37418: LD_ADDR_VAR 0 9
37422: PUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 274
37432: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37433: LD_VAR 0 9
37437: PPUSH
37438: LD_INT 1
37440: PPUSH
37441: CALL_OW 275
37445: PUSH
37446: LD_VAR 0 14
37450: PUSH
37451: LD_INT 1
37453: ARRAY
37454: GREATEREQUAL
37455: PUSH
37456: LD_VAR 0 9
37460: PPUSH
37461: LD_INT 2
37463: PPUSH
37464: CALL_OW 275
37468: PUSH
37469: LD_VAR 0 14
37473: PUSH
37474: LD_INT 2
37476: ARRAY
37477: GREATEREQUAL
37478: AND
37479: PUSH
37480: LD_VAR 0 9
37484: PPUSH
37485: LD_INT 3
37487: PPUSH
37488: CALL_OW 275
37492: PUSH
37493: LD_VAR 0 14
37497: PUSH
37498: LD_INT 3
37500: ARRAY
37501: GREATEREQUAL
37502: AND
37503: IFFALSE 37515
// result := weapon ;
37505: LD_ADDR_VAR 0 3
37509: PUSH
37510: LD_VAR 0 18
37514: ST_TO_ADDR
// end ; end ;
37515: LD_VAR 0 3
37519: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37520: LD_INT 0
37522: PPUSH
37523: PPUSH
// result := true ;
37524: LD_ADDR_VAR 0 3
37528: PUSH
37529: LD_INT 1
37531: ST_TO_ADDR
// if array1 = array2 then
37532: LD_VAR 0 1
37536: PUSH
37537: LD_VAR 0 2
37541: EQUAL
37542: IFFALSE 37602
// begin for i = 1 to array1 do
37544: LD_ADDR_VAR 0 4
37548: PUSH
37549: DOUBLE
37550: LD_INT 1
37552: DEC
37553: ST_TO_ADDR
37554: LD_VAR 0 1
37558: PUSH
37559: FOR_TO
37560: IFFALSE 37598
// if array1 [ i ] <> array2 [ i ] then
37562: LD_VAR 0 1
37566: PUSH
37567: LD_VAR 0 4
37571: ARRAY
37572: PUSH
37573: LD_VAR 0 2
37577: PUSH
37578: LD_VAR 0 4
37582: ARRAY
37583: NONEQUAL
37584: IFFALSE 37596
// begin result := false ;
37586: LD_ADDR_VAR 0 3
37590: PUSH
37591: LD_INT 0
37593: ST_TO_ADDR
// break ;
37594: GO 37598
// end ;
37596: GO 37559
37598: POP
37599: POP
// end else
37600: GO 37610
// result := false ;
37602: LD_ADDR_VAR 0 3
37606: PUSH
37607: LD_INT 0
37609: ST_TO_ADDR
// end ;
37610: LD_VAR 0 3
37614: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37615: LD_INT 0
37617: PPUSH
37618: PPUSH
// if not array1 or not array2 then
37619: LD_VAR 0 1
37623: NOT
37624: PUSH
37625: LD_VAR 0 2
37629: NOT
37630: OR
37631: IFFALSE 37635
// exit ;
37633: GO 37699
// result := true ;
37635: LD_ADDR_VAR 0 3
37639: PUSH
37640: LD_INT 1
37642: ST_TO_ADDR
// for i = 1 to array1 do
37643: LD_ADDR_VAR 0 4
37647: PUSH
37648: DOUBLE
37649: LD_INT 1
37651: DEC
37652: ST_TO_ADDR
37653: LD_VAR 0 1
37657: PUSH
37658: FOR_TO
37659: IFFALSE 37697
// if array1 [ i ] <> array2 [ i ] then
37661: LD_VAR 0 1
37665: PUSH
37666: LD_VAR 0 4
37670: ARRAY
37671: PUSH
37672: LD_VAR 0 2
37676: PUSH
37677: LD_VAR 0 4
37681: ARRAY
37682: NONEQUAL
37683: IFFALSE 37695
// begin result := false ;
37685: LD_ADDR_VAR 0 3
37689: PUSH
37690: LD_INT 0
37692: ST_TO_ADDR
// break ;
37693: GO 37697
// end ;
37695: GO 37658
37697: POP
37698: POP
// end ;
37699: LD_VAR 0 3
37703: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37704: LD_INT 0
37706: PPUSH
37707: PPUSH
37708: PPUSH
// pom := GetBase ( fac ) ;
37709: LD_ADDR_VAR 0 5
37713: PUSH
37714: LD_VAR 0 1
37718: PPUSH
37719: CALL_OW 274
37723: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37724: LD_ADDR_VAR 0 4
37728: PUSH
37729: LD_VAR 0 2
37733: PUSH
37734: LD_INT 1
37736: ARRAY
37737: PPUSH
37738: LD_VAR 0 2
37742: PUSH
37743: LD_INT 2
37745: ARRAY
37746: PPUSH
37747: LD_VAR 0 2
37751: PUSH
37752: LD_INT 3
37754: ARRAY
37755: PPUSH
37756: LD_VAR 0 2
37760: PUSH
37761: LD_INT 4
37763: ARRAY
37764: PPUSH
37765: CALL_OW 449
37769: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37770: LD_ADDR_VAR 0 3
37774: PUSH
37775: LD_VAR 0 5
37779: PPUSH
37780: LD_INT 1
37782: PPUSH
37783: CALL_OW 275
37787: PUSH
37788: LD_VAR 0 4
37792: PUSH
37793: LD_INT 1
37795: ARRAY
37796: GREATEREQUAL
37797: PUSH
37798: LD_VAR 0 5
37802: PPUSH
37803: LD_INT 2
37805: PPUSH
37806: CALL_OW 275
37810: PUSH
37811: LD_VAR 0 4
37815: PUSH
37816: LD_INT 2
37818: ARRAY
37819: GREATEREQUAL
37820: AND
37821: PUSH
37822: LD_VAR 0 5
37826: PPUSH
37827: LD_INT 3
37829: PPUSH
37830: CALL_OW 275
37834: PUSH
37835: LD_VAR 0 4
37839: PUSH
37840: LD_INT 3
37842: ARRAY
37843: GREATEREQUAL
37844: AND
37845: ST_TO_ADDR
// end ;
37846: LD_VAR 0 3
37850: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37851: LD_INT 0
37853: PPUSH
37854: PPUSH
37855: PPUSH
37856: PPUSH
// pom := GetBase ( building ) ;
37857: LD_ADDR_VAR 0 3
37861: PUSH
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL_OW 274
37871: ST_TO_ADDR
// if not pom then
37872: LD_VAR 0 3
37876: NOT
37877: IFFALSE 37881
// exit ;
37879: GO 38051
// btype := GetBType ( building ) ;
37881: LD_ADDR_VAR 0 5
37885: PUSH
37886: LD_VAR 0 1
37890: PPUSH
37891: CALL_OW 266
37895: ST_TO_ADDR
// if btype = b_armoury then
37896: LD_VAR 0 5
37900: PUSH
37901: LD_INT 4
37903: EQUAL
37904: IFFALSE 37914
// btype := b_barracks ;
37906: LD_ADDR_VAR 0 5
37910: PUSH
37911: LD_INT 5
37913: ST_TO_ADDR
// if btype = b_depot then
37914: LD_VAR 0 5
37918: PUSH
37919: LD_INT 0
37921: EQUAL
37922: IFFALSE 37932
// btype := b_warehouse ;
37924: LD_ADDR_VAR 0 5
37928: PUSH
37929: LD_INT 1
37931: ST_TO_ADDR
// if btype = b_workshop then
37932: LD_VAR 0 5
37936: PUSH
37937: LD_INT 2
37939: EQUAL
37940: IFFALSE 37950
// btype := b_factory ;
37942: LD_ADDR_VAR 0 5
37946: PUSH
37947: LD_INT 3
37949: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37950: LD_ADDR_VAR 0 4
37954: PUSH
37955: LD_VAR 0 5
37959: PPUSH
37960: LD_VAR 0 1
37964: PPUSH
37965: CALL_OW 248
37969: PPUSH
37970: CALL_OW 450
37974: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37975: LD_ADDR_VAR 0 2
37979: PUSH
37980: LD_VAR 0 3
37984: PPUSH
37985: LD_INT 1
37987: PPUSH
37988: CALL_OW 275
37992: PUSH
37993: LD_VAR 0 4
37997: PUSH
37998: LD_INT 1
38000: ARRAY
38001: GREATEREQUAL
38002: PUSH
38003: LD_VAR 0 3
38007: PPUSH
38008: LD_INT 2
38010: PPUSH
38011: CALL_OW 275
38015: PUSH
38016: LD_VAR 0 4
38020: PUSH
38021: LD_INT 2
38023: ARRAY
38024: GREATEREQUAL
38025: AND
38026: PUSH
38027: LD_VAR 0 3
38031: PPUSH
38032: LD_INT 3
38034: PPUSH
38035: CALL_OW 275
38039: PUSH
38040: LD_VAR 0 4
38044: PUSH
38045: LD_INT 3
38047: ARRAY
38048: GREATEREQUAL
38049: AND
38050: ST_TO_ADDR
// end ;
38051: LD_VAR 0 2
38055: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38056: LD_INT 0
38058: PPUSH
38059: PPUSH
38060: PPUSH
// pom := GetBase ( building ) ;
38061: LD_ADDR_VAR 0 4
38065: PUSH
38066: LD_VAR 0 1
38070: PPUSH
38071: CALL_OW 274
38075: ST_TO_ADDR
// if not pom then
38076: LD_VAR 0 4
38080: NOT
38081: IFFALSE 38085
// exit ;
38083: GO 38186
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: LD_VAR 0 2
38094: PPUSH
38095: LD_VAR 0 1
38099: PPUSH
38100: CALL_OW 248
38104: PPUSH
38105: CALL_OW 450
38109: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_VAR 0 4
38119: PPUSH
38120: LD_INT 1
38122: PPUSH
38123: CALL_OW 275
38127: PUSH
38128: LD_VAR 0 5
38132: PUSH
38133: LD_INT 1
38135: ARRAY
38136: GREATEREQUAL
38137: PUSH
38138: LD_VAR 0 4
38142: PPUSH
38143: LD_INT 2
38145: PPUSH
38146: CALL_OW 275
38150: PUSH
38151: LD_VAR 0 5
38155: PUSH
38156: LD_INT 2
38158: ARRAY
38159: GREATEREQUAL
38160: AND
38161: PUSH
38162: LD_VAR 0 4
38166: PPUSH
38167: LD_INT 3
38169: PPUSH
38170: CALL_OW 275
38174: PUSH
38175: LD_VAR 0 5
38179: PUSH
38180: LD_INT 3
38182: ARRAY
38183: GREATEREQUAL
38184: AND
38185: ST_TO_ADDR
// end ;
38186: LD_VAR 0 3
38190: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38191: LD_INT 0
38193: PPUSH
38194: PPUSH
38195: PPUSH
38196: PPUSH
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
38203: PPUSH
// result := false ;
38204: LD_ADDR_VAR 0 8
38208: PUSH
38209: LD_INT 0
38211: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38212: LD_VAR 0 5
38216: NOT
38217: PUSH
38218: LD_VAR 0 1
38222: NOT
38223: OR
38224: PUSH
38225: LD_VAR 0 2
38229: NOT
38230: OR
38231: PUSH
38232: LD_VAR 0 3
38236: NOT
38237: OR
38238: IFFALSE 38242
// exit ;
38240: GO 39056
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38242: LD_ADDR_VAR 0 14
38246: PUSH
38247: LD_VAR 0 1
38251: PPUSH
38252: LD_VAR 0 2
38256: PPUSH
38257: LD_VAR 0 3
38261: PPUSH
38262: LD_VAR 0 4
38266: PPUSH
38267: LD_VAR 0 5
38271: PUSH
38272: LD_INT 1
38274: ARRAY
38275: PPUSH
38276: CALL_OW 248
38280: PPUSH
38281: LD_INT 0
38283: PPUSH
38284: CALL 40293 0 6
38288: ST_TO_ADDR
// if not hexes then
38289: LD_VAR 0 14
38293: NOT
38294: IFFALSE 38298
// exit ;
38296: GO 39056
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38298: LD_ADDR_VAR 0 17
38302: PUSH
38303: LD_VAR 0 5
38307: PPUSH
38308: LD_INT 22
38310: PUSH
38311: LD_VAR 0 13
38315: PPUSH
38316: CALL_OW 255
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 2
38327: PUSH
38328: LD_INT 30
38330: PUSH
38331: LD_INT 0
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 30
38340: PUSH
38341: LD_INT 1
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: LIST
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PPUSH
38357: CALL_OW 72
38361: ST_TO_ADDR
// for i = 1 to hexes do
38362: LD_ADDR_VAR 0 9
38366: PUSH
38367: DOUBLE
38368: LD_INT 1
38370: DEC
38371: ST_TO_ADDR
38372: LD_VAR 0 14
38376: PUSH
38377: FOR_TO
38378: IFFALSE 39054
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38380: LD_ADDR_VAR 0 13
38384: PUSH
38385: LD_VAR 0 14
38389: PUSH
38390: LD_VAR 0 9
38394: ARRAY
38395: PUSH
38396: LD_INT 1
38398: ARRAY
38399: PPUSH
38400: LD_VAR 0 14
38404: PUSH
38405: LD_VAR 0 9
38409: ARRAY
38410: PUSH
38411: LD_INT 2
38413: ARRAY
38414: PPUSH
38415: CALL_OW 428
38419: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38420: LD_VAR 0 14
38424: PUSH
38425: LD_VAR 0 9
38429: ARRAY
38430: PUSH
38431: LD_INT 1
38433: ARRAY
38434: PPUSH
38435: LD_VAR 0 14
38439: PUSH
38440: LD_VAR 0 9
38444: ARRAY
38445: PUSH
38446: LD_INT 2
38448: ARRAY
38449: PPUSH
38450: CALL_OW 351
38454: PUSH
38455: LD_VAR 0 14
38459: PUSH
38460: LD_VAR 0 9
38464: ARRAY
38465: PUSH
38466: LD_INT 1
38468: ARRAY
38469: PPUSH
38470: LD_VAR 0 14
38474: PUSH
38475: LD_VAR 0 9
38479: ARRAY
38480: PUSH
38481: LD_INT 2
38483: ARRAY
38484: PPUSH
38485: CALL_OW 488
38489: NOT
38490: OR
38491: PUSH
38492: LD_VAR 0 13
38496: PPUSH
38497: CALL_OW 247
38501: PUSH
38502: LD_INT 3
38504: EQUAL
38505: OR
38506: IFFALSE 38512
// exit ;
38508: POP
38509: POP
38510: GO 39056
// if not tmp then
38512: LD_VAR 0 13
38516: NOT
38517: IFFALSE 38521
// continue ;
38519: GO 38377
// result := true ;
38521: LD_ADDR_VAR 0 8
38525: PUSH
38526: LD_INT 1
38528: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38529: LD_VAR 0 6
38533: PUSH
38534: LD_VAR 0 13
38538: PPUSH
38539: CALL_OW 247
38543: PUSH
38544: LD_INT 2
38546: EQUAL
38547: AND
38548: PUSH
38549: LD_VAR 0 13
38553: PPUSH
38554: CALL_OW 263
38558: PUSH
38559: LD_INT 1
38561: EQUAL
38562: AND
38563: IFFALSE 38727
// begin if IsDrivenBy ( tmp ) then
38565: LD_VAR 0 13
38569: PPUSH
38570: CALL_OW 311
38574: IFFALSE 38578
// continue ;
38576: GO 38377
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38578: LD_VAR 0 6
38582: PPUSH
38583: LD_INT 3
38585: PUSH
38586: LD_INT 60
38588: PUSH
38589: EMPTY
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 3
38598: PUSH
38599: LD_INT 55
38601: PUSH
38602: EMPTY
38603: LIST
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PPUSH
38613: CALL_OW 72
38617: IFFALSE 38725
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38619: LD_ADDR_VAR 0 18
38623: PUSH
38624: LD_VAR 0 6
38628: PPUSH
38629: LD_INT 3
38631: PUSH
38632: LD_INT 60
38634: PUSH
38635: EMPTY
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 55
38647: PUSH
38648: EMPTY
38649: LIST
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PPUSH
38659: CALL_OW 72
38663: PUSH
38664: LD_INT 1
38666: ARRAY
38667: ST_TO_ADDR
// if IsInUnit ( driver ) then
38668: LD_VAR 0 18
38672: PPUSH
38673: CALL_OW 310
38677: IFFALSE 38688
// ComExit ( driver ) ;
38679: LD_VAR 0 18
38683: PPUSH
38684: CALL 63477 0 1
// AddComEnterUnit ( driver , tmp ) ;
38688: LD_VAR 0 18
38692: PPUSH
38693: LD_VAR 0 13
38697: PPUSH
38698: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38702: LD_VAR 0 18
38706: PPUSH
38707: LD_VAR 0 7
38711: PPUSH
38712: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38716: LD_VAR 0 18
38720: PPUSH
38721: CALL_OW 181
// end ; continue ;
38725: GO 38377
// end ; if not cleaners or not tmp in cleaners then
38727: LD_VAR 0 6
38731: NOT
38732: PUSH
38733: LD_VAR 0 13
38737: PUSH
38738: LD_VAR 0 6
38742: IN
38743: NOT
38744: OR
38745: IFFALSE 39052
// begin if dep then
38747: LD_VAR 0 17
38751: IFFALSE 38887
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38753: LD_ADDR_VAR 0 16
38757: PUSH
38758: LD_VAR 0 17
38762: PUSH
38763: LD_INT 1
38765: ARRAY
38766: PPUSH
38767: CALL_OW 250
38771: PPUSH
38772: LD_VAR 0 17
38776: PUSH
38777: LD_INT 1
38779: ARRAY
38780: PPUSH
38781: CALL_OW 254
38785: PPUSH
38786: LD_INT 5
38788: PPUSH
38789: CALL_OW 272
38793: PUSH
38794: LD_VAR 0 17
38798: PUSH
38799: LD_INT 1
38801: ARRAY
38802: PPUSH
38803: CALL_OW 251
38807: PPUSH
38808: LD_VAR 0 17
38812: PUSH
38813: LD_INT 1
38815: ARRAY
38816: PPUSH
38817: CALL_OW 254
38821: PPUSH
38822: LD_INT 5
38824: PPUSH
38825: CALL_OW 273
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38834: LD_VAR 0 16
38838: PUSH
38839: LD_INT 1
38841: ARRAY
38842: PPUSH
38843: LD_VAR 0 16
38847: PUSH
38848: LD_INT 2
38850: ARRAY
38851: PPUSH
38852: CALL_OW 488
38856: IFFALSE 38887
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38858: LD_VAR 0 13
38862: PPUSH
38863: LD_VAR 0 16
38867: PUSH
38868: LD_INT 1
38870: ARRAY
38871: PPUSH
38872: LD_VAR 0 16
38876: PUSH
38877: LD_INT 2
38879: ARRAY
38880: PPUSH
38881: CALL_OW 111
// continue ;
38885: GO 38377
// end ; end ; r := GetDir ( tmp ) ;
38887: LD_ADDR_VAR 0 15
38891: PUSH
38892: LD_VAR 0 13
38896: PPUSH
38897: CALL_OW 254
38901: ST_TO_ADDR
// if r = 5 then
38902: LD_VAR 0 15
38906: PUSH
38907: LD_INT 5
38909: EQUAL
38910: IFFALSE 38920
// r := 0 ;
38912: LD_ADDR_VAR 0 15
38916: PUSH
38917: LD_INT 0
38919: ST_TO_ADDR
// for j = r to 5 do
38920: LD_ADDR_VAR 0 10
38924: PUSH
38925: DOUBLE
38926: LD_VAR 0 15
38930: DEC
38931: ST_TO_ADDR
38932: LD_INT 5
38934: PUSH
38935: FOR_TO
38936: IFFALSE 39050
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38938: LD_ADDR_VAR 0 11
38942: PUSH
38943: LD_VAR 0 13
38947: PPUSH
38948: CALL_OW 250
38952: PPUSH
38953: LD_VAR 0 10
38957: PPUSH
38958: LD_INT 2
38960: PPUSH
38961: CALL_OW 272
38965: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38966: LD_ADDR_VAR 0 12
38970: PUSH
38971: LD_VAR 0 13
38975: PPUSH
38976: CALL_OW 251
38980: PPUSH
38981: LD_VAR 0 10
38985: PPUSH
38986: LD_INT 2
38988: PPUSH
38989: CALL_OW 273
38993: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38994: LD_VAR 0 11
38998: PPUSH
38999: LD_VAR 0 12
39003: PPUSH
39004: CALL_OW 488
39008: PUSH
39009: LD_VAR 0 11
39013: PPUSH
39014: LD_VAR 0 12
39018: PPUSH
39019: CALL_OW 428
39023: NOT
39024: AND
39025: IFFALSE 39048
// begin ComMoveXY ( tmp , _x , _y ) ;
39027: LD_VAR 0 13
39031: PPUSH
39032: LD_VAR 0 11
39036: PPUSH
39037: LD_VAR 0 12
39041: PPUSH
39042: CALL_OW 111
// break ;
39046: GO 39050
// end ; end ;
39048: GO 38935
39050: POP
39051: POP
// end ; end ;
39052: GO 38377
39054: POP
39055: POP
// end ;
39056: LD_VAR 0 8
39060: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39061: LD_INT 0
39063: PPUSH
// result := true ;
39064: LD_ADDR_VAR 0 3
39068: PUSH
39069: LD_INT 1
39071: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39072: LD_VAR 0 2
39076: PUSH
39077: LD_INT 24
39079: DOUBLE
39080: EQUAL
39081: IFTRUE 39091
39083: LD_INT 33
39085: DOUBLE
39086: EQUAL
39087: IFTRUE 39091
39089: GO 39116
39091: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_INT 32
39099: PPUSH
39100: LD_VAR 0 1
39104: PPUSH
39105: CALL_OW 321
39109: PUSH
39110: LD_INT 2
39112: EQUAL
39113: ST_TO_ADDR
39114: GO 39436
39116: LD_INT 20
39118: DOUBLE
39119: EQUAL
39120: IFTRUE 39124
39122: GO 39149
39124: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39125: LD_ADDR_VAR 0 3
39129: PUSH
39130: LD_INT 6
39132: PPUSH
39133: LD_VAR 0 1
39137: PPUSH
39138: CALL_OW 321
39142: PUSH
39143: LD_INT 2
39145: EQUAL
39146: ST_TO_ADDR
39147: GO 39436
39149: LD_INT 22
39151: DOUBLE
39152: EQUAL
39153: IFTRUE 39163
39155: LD_INT 36
39157: DOUBLE
39158: EQUAL
39159: IFTRUE 39163
39161: GO 39188
39163: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39164: LD_ADDR_VAR 0 3
39168: PUSH
39169: LD_INT 15
39171: PPUSH
39172: LD_VAR 0 1
39176: PPUSH
39177: CALL_OW 321
39181: PUSH
39182: LD_INT 2
39184: EQUAL
39185: ST_TO_ADDR
39186: GO 39436
39188: LD_INT 30
39190: DOUBLE
39191: EQUAL
39192: IFTRUE 39196
39194: GO 39221
39196: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39197: LD_ADDR_VAR 0 3
39201: PUSH
39202: LD_INT 20
39204: PPUSH
39205: LD_VAR 0 1
39209: PPUSH
39210: CALL_OW 321
39214: PUSH
39215: LD_INT 2
39217: EQUAL
39218: ST_TO_ADDR
39219: GO 39436
39221: LD_INT 28
39223: DOUBLE
39224: EQUAL
39225: IFTRUE 39235
39227: LD_INT 21
39229: DOUBLE
39230: EQUAL
39231: IFTRUE 39235
39233: GO 39260
39235: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39236: LD_ADDR_VAR 0 3
39240: PUSH
39241: LD_INT 21
39243: PPUSH
39244: LD_VAR 0 1
39248: PPUSH
39249: CALL_OW 321
39253: PUSH
39254: LD_INT 2
39256: EQUAL
39257: ST_TO_ADDR
39258: GO 39436
39260: LD_INT 16
39262: DOUBLE
39263: EQUAL
39264: IFTRUE 39268
39266: GO 39295
39268: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39269: LD_ADDR_VAR 0 3
39273: PUSH
39274: LD_EXP 36
39278: PPUSH
39279: LD_VAR 0 1
39283: PPUSH
39284: CALL_OW 321
39288: PUSH
39289: LD_INT 2
39291: EQUAL
39292: ST_TO_ADDR
39293: GO 39436
39295: LD_INT 19
39297: DOUBLE
39298: EQUAL
39299: IFTRUE 39309
39301: LD_INT 23
39303: DOUBLE
39304: EQUAL
39305: IFTRUE 39309
39307: GO 39336
39309: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39310: LD_ADDR_VAR 0 3
39314: PUSH
39315: LD_EXP 35
39319: PPUSH
39320: LD_VAR 0 1
39324: PPUSH
39325: CALL_OW 321
39329: PUSH
39330: LD_INT 2
39332: EQUAL
39333: ST_TO_ADDR
39334: GO 39436
39336: LD_INT 17
39338: DOUBLE
39339: EQUAL
39340: IFTRUE 39344
39342: GO 39369
39344: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39345: LD_ADDR_VAR 0 3
39349: PUSH
39350: LD_INT 39
39352: PPUSH
39353: LD_VAR 0 1
39357: PPUSH
39358: CALL_OW 321
39362: PUSH
39363: LD_INT 2
39365: EQUAL
39366: ST_TO_ADDR
39367: GO 39436
39369: LD_INT 18
39371: DOUBLE
39372: EQUAL
39373: IFTRUE 39377
39375: GO 39402
39377: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39378: LD_ADDR_VAR 0 3
39382: PUSH
39383: LD_INT 40
39385: PPUSH
39386: LD_VAR 0 1
39390: PPUSH
39391: CALL_OW 321
39395: PUSH
39396: LD_INT 2
39398: EQUAL
39399: ST_TO_ADDR
39400: GO 39436
39402: LD_INT 27
39404: DOUBLE
39405: EQUAL
39406: IFTRUE 39410
39408: GO 39435
39410: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39411: LD_ADDR_VAR 0 3
39415: PUSH
39416: LD_INT 35
39418: PPUSH
39419: LD_VAR 0 1
39423: PPUSH
39424: CALL_OW 321
39428: PUSH
39429: LD_INT 2
39431: EQUAL
39432: ST_TO_ADDR
39433: GO 39436
39435: POP
// end ;
39436: LD_VAR 0 3
39440: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39441: LD_INT 0
39443: PPUSH
39444: PPUSH
39445: PPUSH
39446: PPUSH
39447: PPUSH
39448: PPUSH
39449: PPUSH
39450: PPUSH
39451: PPUSH
39452: PPUSH
39453: PPUSH
// result := false ;
39454: LD_ADDR_VAR 0 6
39458: PUSH
39459: LD_INT 0
39461: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39462: LD_VAR 0 1
39466: NOT
39467: PUSH
39468: LD_VAR 0 1
39472: PPUSH
39473: CALL_OW 266
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: LD_INT 1
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: IN
39488: NOT
39489: OR
39490: PUSH
39491: LD_VAR 0 2
39495: NOT
39496: OR
39497: PUSH
39498: LD_VAR 0 5
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: LD_INT 3
39514: PUSH
39515: LD_INT 4
39517: PUSH
39518: LD_INT 5
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: IN
39529: NOT
39530: OR
39531: PUSH
39532: LD_VAR 0 3
39536: PPUSH
39537: LD_VAR 0 4
39541: PPUSH
39542: CALL_OW 488
39546: NOT
39547: OR
39548: IFFALSE 39552
// exit ;
39550: GO 40288
// side := GetSide ( depot ) ;
39552: LD_ADDR_VAR 0 9
39556: PUSH
39557: LD_VAR 0 1
39561: PPUSH
39562: CALL_OW 255
39566: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39567: LD_VAR 0 9
39571: PPUSH
39572: LD_VAR 0 2
39576: PPUSH
39577: CALL 39061 0 2
39581: NOT
39582: IFFALSE 39586
// exit ;
39584: GO 40288
// pom := GetBase ( depot ) ;
39586: LD_ADDR_VAR 0 10
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 274
39600: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39601: LD_ADDR_VAR 0 11
39605: PUSH
39606: LD_VAR 0 2
39610: PPUSH
39611: LD_VAR 0 1
39615: PPUSH
39616: CALL_OW 248
39620: PPUSH
39621: CALL_OW 450
39625: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39626: LD_VAR 0 10
39630: PPUSH
39631: LD_INT 1
39633: PPUSH
39634: CALL_OW 275
39638: PUSH
39639: LD_VAR 0 11
39643: PUSH
39644: LD_INT 1
39646: ARRAY
39647: GREATEREQUAL
39648: PUSH
39649: LD_VAR 0 10
39653: PPUSH
39654: LD_INT 2
39656: PPUSH
39657: CALL_OW 275
39661: PUSH
39662: LD_VAR 0 11
39666: PUSH
39667: LD_INT 2
39669: ARRAY
39670: GREATEREQUAL
39671: AND
39672: PUSH
39673: LD_VAR 0 10
39677: PPUSH
39678: LD_INT 3
39680: PPUSH
39681: CALL_OW 275
39685: PUSH
39686: LD_VAR 0 11
39690: PUSH
39691: LD_INT 3
39693: ARRAY
39694: GREATEREQUAL
39695: AND
39696: NOT
39697: IFFALSE 39701
// exit ;
39699: GO 40288
// if GetBType ( depot ) = b_depot then
39701: LD_VAR 0 1
39705: PPUSH
39706: CALL_OW 266
39710: PUSH
39711: LD_INT 0
39713: EQUAL
39714: IFFALSE 39726
// dist := 28 else
39716: LD_ADDR_VAR 0 14
39720: PUSH
39721: LD_INT 28
39723: ST_TO_ADDR
39724: GO 39734
// dist := 36 ;
39726: LD_ADDR_VAR 0 14
39730: PUSH
39731: LD_INT 36
39733: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39734: LD_VAR 0 1
39738: PPUSH
39739: LD_VAR 0 3
39743: PPUSH
39744: LD_VAR 0 4
39748: PPUSH
39749: CALL_OW 297
39753: PUSH
39754: LD_VAR 0 14
39758: GREATER
39759: IFFALSE 39763
// exit ;
39761: GO 40288
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39763: LD_ADDR_VAR 0 12
39767: PUSH
39768: LD_VAR 0 2
39772: PPUSH
39773: LD_VAR 0 3
39777: PPUSH
39778: LD_VAR 0 4
39782: PPUSH
39783: LD_VAR 0 5
39787: PPUSH
39788: LD_VAR 0 1
39792: PPUSH
39793: CALL_OW 248
39797: PPUSH
39798: LD_INT 0
39800: PPUSH
39801: CALL 40293 0 6
39805: ST_TO_ADDR
// if not hexes then
39806: LD_VAR 0 12
39810: NOT
39811: IFFALSE 39815
// exit ;
39813: GO 40288
// hex := GetHexInfo ( x , y ) ;
39815: LD_ADDR_VAR 0 15
39819: PUSH
39820: LD_VAR 0 3
39824: PPUSH
39825: LD_VAR 0 4
39829: PPUSH
39830: CALL_OW 546
39834: ST_TO_ADDR
// if hex [ 1 ] then
39835: LD_VAR 0 15
39839: PUSH
39840: LD_INT 1
39842: ARRAY
39843: IFFALSE 39847
// exit ;
39845: GO 40288
// height := hex [ 2 ] ;
39847: LD_ADDR_VAR 0 13
39851: PUSH
39852: LD_VAR 0 15
39856: PUSH
39857: LD_INT 2
39859: ARRAY
39860: ST_TO_ADDR
// for i = 1 to hexes do
39861: LD_ADDR_VAR 0 7
39865: PUSH
39866: DOUBLE
39867: LD_INT 1
39869: DEC
39870: ST_TO_ADDR
39871: LD_VAR 0 12
39875: PUSH
39876: FOR_TO
39877: IFFALSE 40207
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39879: LD_VAR 0 12
39883: PUSH
39884: LD_VAR 0 7
39888: ARRAY
39889: PUSH
39890: LD_INT 1
39892: ARRAY
39893: PPUSH
39894: LD_VAR 0 12
39898: PUSH
39899: LD_VAR 0 7
39903: ARRAY
39904: PUSH
39905: LD_INT 2
39907: ARRAY
39908: PPUSH
39909: CALL_OW 488
39913: NOT
39914: PUSH
39915: LD_VAR 0 12
39919: PUSH
39920: LD_VAR 0 7
39924: ARRAY
39925: PUSH
39926: LD_INT 1
39928: ARRAY
39929: PPUSH
39930: LD_VAR 0 12
39934: PUSH
39935: LD_VAR 0 7
39939: ARRAY
39940: PUSH
39941: LD_INT 2
39943: ARRAY
39944: PPUSH
39945: CALL_OW 428
39949: PUSH
39950: LD_INT 0
39952: GREATER
39953: OR
39954: PUSH
39955: LD_VAR 0 12
39959: PUSH
39960: LD_VAR 0 7
39964: ARRAY
39965: PUSH
39966: LD_INT 1
39968: ARRAY
39969: PPUSH
39970: LD_VAR 0 12
39974: PUSH
39975: LD_VAR 0 7
39979: ARRAY
39980: PUSH
39981: LD_INT 2
39983: ARRAY
39984: PPUSH
39985: CALL_OW 351
39989: OR
39990: IFFALSE 39996
// exit ;
39992: POP
39993: POP
39994: GO 40288
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39996: LD_ADDR_VAR 0 8
40000: PUSH
40001: LD_VAR 0 12
40005: PUSH
40006: LD_VAR 0 7
40010: ARRAY
40011: PUSH
40012: LD_INT 1
40014: ARRAY
40015: PPUSH
40016: LD_VAR 0 12
40020: PUSH
40021: LD_VAR 0 7
40025: ARRAY
40026: PUSH
40027: LD_INT 2
40029: ARRAY
40030: PPUSH
40031: CALL_OW 546
40035: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40036: LD_VAR 0 8
40040: PUSH
40041: LD_INT 1
40043: ARRAY
40044: PUSH
40045: LD_VAR 0 8
40049: PUSH
40050: LD_INT 2
40052: ARRAY
40053: PUSH
40054: LD_VAR 0 13
40058: PUSH
40059: LD_INT 2
40061: PLUS
40062: GREATER
40063: OR
40064: PUSH
40065: LD_VAR 0 8
40069: PUSH
40070: LD_INT 2
40072: ARRAY
40073: PUSH
40074: LD_VAR 0 13
40078: PUSH
40079: LD_INT 2
40081: MINUS
40082: LESS
40083: OR
40084: PUSH
40085: LD_VAR 0 8
40089: PUSH
40090: LD_INT 3
40092: ARRAY
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 8
40099: PUSH
40100: LD_INT 9
40102: PUSH
40103: LD_INT 10
40105: PUSH
40106: LD_INT 11
40108: PUSH
40109: LD_INT 12
40111: PUSH
40112: LD_INT 13
40114: PUSH
40115: LD_INT 16
40117: PUSH
40118: LD_INT 17
40120: PUSH
40121: LD_INT 18
40123: PUSH
40124: LD_INT 19
40126: PUSH
40127: LD_INT 20
40129: PUSH
40130: LD_INT 21
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: LIST
40137: LIST
40138: LIST
40139: LIST
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: IN
40148: NOT
40149: OR
40150: PUSH
40151: LD_VAR 0 8
40155: PUSH
40156: LD_INT 5
40158: ARRAY
40159: NOT
40160: OR
40161: PUSH
40162: LD_VAR 0 8
40166: PUSH
40167: LD_INT 6
40169: ARRAY
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 7
40179: PUSH
40180: LD_INT 9
40182: PUSH
40183: LD_INT 10
40185: PUSH
40186: LD_INT 11
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: IN
40197: NOT
40198: OR
40199: IFFALSE 40205
// exit ;
40201: POP
40202: POP
40203: GO 40288
// end ;
40205: GO 39876
40207: POP
40208: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40209: LD_VAR 0 9
40213: PPUSH
40214: LD_VAR 0 3
40218: PPUSH
40219: LD_VAR 0 4
40223: PPUSH
40224: LD_INT 20
40226: PPUSH
40227: CALL 32234 0 4
40231: PUSH
40232: LD_INT 4
40234: ARRAY
40235: IFFALSE 40239
// exit ;
40237: GO 40288
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40239: LD_VAR 0 2
40243: PUSH
40244: LD_INT 29
40246: PUSH
40247: LD_INT 30
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: IN
40254: PUSH
40255: LD_VAR 0 3
40259: PPUSH
40260: LD_VAR 0 4
40264: PPUSH
40265: LD_VAR 0 9
40269: PPUSH
40270: CALL_OW 440
40274: NOT
40275: AND
40276: IFFALSE 40280
// exit ;
40278: GO 40288
// result := true ;
40280: LD_ADDR_VAR 0 6
40284: PUSH
40285: LD_INT 1
40287: ST_TO_ADDR
// end ;
40288: LD_VAR 0 6
40292: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40293: LD_INT 0
40295: PPUSH
40296: PPUSH
40297: PPUSH
40298: PPUSH
40299: PPUSH
40300: PPUSH
40301: PPUSH
40302: PPUSH
40303: PPUSH
40304: PPUSH
40305: PPUSH
40306: PPUSH
40307: PPUSH
40308: PPUSH
40309: PPUSH
40310: PPUSH
40311: PPUSH
40312: PPUSH
40313: PPUSH
40314: PPUSH
40315: PPUSH
40316: PPUSH
40317: PPUSH
40318: PPUSH
40319: PPUSH
40320: PPUSH
40321: PPUSH
40322: PPUSH
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
// result = [ ] ;
40353: LD_ADDR_VAR 0 7
40357: PUSH
40358: EMPTY
40359: ST_TO_ADDR
// temp_list = [ ] ;
40360: LD_ADDR_VAR 0 9
40364: PUSH
40365: EMPTY
40366: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40367: LD_VAR 0 4
40371: PUSH
40372: LD_INT 0
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: PUSH
40381: LD_INT 3
40383: PUSH
40384: LD_INT 4
40386: PUSH
40387: LD_INT 5
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: IN
40398: NOT
40399: PUSH
40400: LD_VAR 0 1
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 1
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: IN
40415: PUSH
40416: LD_VAR 0 5
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 2
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: IN
40435: NOT
40436: AND
40437: OR
40438: IFFALSE 40442
// exit ;
40440: GO 58833
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40442: LD_VAR 0 1
40446: PUSH
40447: LD_INT 6
40449: PUSH
40450: LD_INT 7
40452: PUSH
40453: LD_INT 8
40455: PUSH
40456: LD_INT 13
40458: PUSH
40459: LD_INT 12
40461: PUSH
40462: LD_INT 15
40464: PUSH
40465: LD_INT 11
40467: PUSH
40468: LD_INT 14
40470: PUSH
40471: LD_INT 10
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: IN
40485: IFFALSE 40495
// btype = b_lab ;
40487: LD_ADDR_VAR 0 1
40491: PUSH
40492: LD_INT 6
40494: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40495: LD_VAR 0 6
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: LIST
40513: IN
40514: NOT
40515: PUSH
40516: LD_VAR 0 1
40520: PUSH
40521: LD_INT 0
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 2
40529: PUSH
40530: LD_INT 3
40532: PUSH
40533: LD_INT 6
40535: PUSH
40536: LD_INT 36
40538: PUSH
40539: LD_INT 4
40541: PUSH
40542: LD_INT 5
40544: PUSH
40545: LD_INT 31
40547: PUSH
40548: LD_INT 32
40550: PUSH
40551: LD_INT 33
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: IN
40567: NOT
40568: PUSH
40569: LD_VAR 0 6
40573: PUSH
40574: LD_INT 1
40576: EQUAL
40577: AND
40578: OR
40579: PUSH
40580: LD_VAR 0 1
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 3
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: IN
40595: NOT
40596: PUSH
40597: LD_VAR 0 6
40601: PUSH
40602: LD_INT 2
40604: EQUAL
40605: AND
40606: OR
40607: IFFALSE 40617
// mode = 0 ;
40609: LD_ADDR_VAR 0 6
40613: PUSH
40614: LD_INT 0
40616: ST_TO_ADDR
// case mode of 0 :
40617: LD_VAR 0 6
40621: PUSH
40622: LD_INT 0
40624: DOUBLE
40625: EQUAL
40626: IFTRUE 40630
40628: GO 52083
40630: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40631: LD_ADDR_VAR 0 11
40635: PUSH
40636: LD_INT 0
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 0
40648: PUSH
40649: LD_INT 1
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 0
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 0
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: NEG
40701: PUSH
40702: LD_INT 1
40704: NEG
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 1
40712: NEG
40713: PUSH
40714: LD_INT 2
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 2
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 1
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 3
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 0
40787: PUSH
40788: LD_INT 3
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: EMPTY
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40824: LD_ADDR_VAR 0 12
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 0
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 0
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 1
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 0
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 1
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 1
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 1
40905: PUSH
40906: LD_INT 1
40908: NEG
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: PUSH
40914: LD_INT 2
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 2
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: LD_INT 2
40947: NEG
40948: PUSH
40949: LD_INT 0
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: LD_INT 2
40958: NEG
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 3
40981: NEG
40982: PUSH
40983: LD_INT 0
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: NEG
40993: PUSH
40994: LD_INT 1
40996: NEG
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: LIST
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41020: LD_ADDR_VAR 0 13
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 0
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 0
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 0
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 1
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 0
41068: PUSH
41069: LD_INT 1
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 1
41078: NEG
41079: PUSH
41080: LD_INT 0
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 1
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 1
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 2
41113: PUSH
41114: LD_INT 1
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 2
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: NEG
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 2
41155: NEG
41156: PUSH
41157: LD_INT 2
41159: NEG
41160: PUSH
41161: EMPTY
41162: LIST
41163: LIST
41164: PUSH
41165: LD_INT 2
41167: NEG
41168: PUSH
41169: LD_INT 3
41171: NEG
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 3
41179: NEG
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 3
41191: NEG
41192: PUSH
41193: LD_INT 3
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41219: LD_ADDR_VAR 0 14
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 1
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 0
41267: PUSH
41268: LD_INT 1
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 1
41277: NEG
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 1
41300: NEG
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 0
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 1
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: PUSH
41335: LD_INT 2
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: LD_INT 2
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: NEG
41366: PUSH
41367: LD_INT 3
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: LD_INT 3
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: PUSH
41389: LD_INT 2
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41415: LD_ADDR_VAR 0 15
41419: PUSH
41420: LD_INT 0
41422: PUSH
41423: LD_INT 0
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 0
41432: PUSH
41433: LD_INT 1
41435: NEG
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 1
41453: PUSH
41454: LD_INT 1
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 0
41463: PUSH
41464: LD_INT 1
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: NEG
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: LD_INT 0
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: NEG
41550: PUSH
41551: LD_INT 1
41553: NEG
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 2
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 3
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 3
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: EMPTY
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41608: LD_ADDR_VAR 0 16
41612: PUSH
41613: LD_INT 0
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 0
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: LD_INT 1
41636: PUSH
41637: LD_INT 0
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 1
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 1
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: LD_INT 0
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 1
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 2
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: LD_INT 2
41711: PUSH
41712: LD_INT 2
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 2
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 2
41743: NEG
41744: PUSH
41745: LD_INT 2
41747: NEG
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 3
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: LD_INT 3
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 3
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41801: LD_ADDR_VAR 0 17
41805: PUSH
41806: LD_INT 0
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: EMPTY
41813: LIST
41814: LIST
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 1
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: LD_INT 1
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: LD_INT 0
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: LD_INT 1
41874: NEG
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: NEG
41883: PUSH
41884: LD_INT 2
41886: NEG
41887: PUSH
41888: EMPTY
41889: LIST
41890: LIST
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: LD_INT 2
41897: NEG
41898: PUSH
41899: EMPTY
41900: LIST
41901: LIST
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: LD_INT 1
41908: NEG
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 2
41926: PUSH
41927: LD_INT 1
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 2
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 2
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: NEG
41967: PUSH
41968: LD_INT 1
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: NEG
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 2
41988: NEG
41989: PUSH
41990: LD_INT 1
41992: NEG
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 2
42000: NEG
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42031: LD_ADDR_VAR 0 18
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 1
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: NEG
42113: PUSH
42114: LD_INT 2
42116: NEG
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: LD_INT 1
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: LD_INT 0
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: LD_INT 2
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 0
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: NEG
42197: PUSH
42198: LD_INT 1
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 0
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 2
42218: NEG
42219: PUSH
42220: LD_INT 1
42222: NEG
42223: PUSH
42224: EMPTY
42225: LIST
42226: LIST
42227: PUSH
42228: LD_INT 2
42230: NEG
42231: PUSH
42232: LD_INT 2
42234: NEG
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42261: LD_ADDR_VAR 0 19
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 0
42278: PUSH
42279: LD_INT 1
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 1
42289: PUSH
42290: LD_INT 0
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 1
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 0
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 1
42319: NEG
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: LD_INT 1
42334: NEG
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 2
42346: NEG
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: LD_INT 2
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: PUSH
42366: LD_INT 1
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 0
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 2
42386: PUSH
42387: LD_INT 1
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 2
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 0
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 1
42426: NEG
42427: PUSH
42428: LD_INT 1
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: LD_INT 0
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: NEG
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42491: LD_ADDR_VAR 0 20
42495: PUSH
42496: LD_INT 0
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 0
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 1
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 0
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: NEG
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 1
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 2
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: LD_INT 1
42598: NEG
42599: PUSH
42600: EMPTY
42601: LIST
42602: LIST
42603: PUSH
42604: LD_INT 2
42606: PUSH
42607: LD_INT 0
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 2
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: EMPTY
42631: LIST
42632: LIST
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 0
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: LD_INT 1
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 2
42667: NEG
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 2
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: NEG
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: LD_INT 2
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: LIST
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42721: LD_ADDR_VAR 0 21
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 0
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 1
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 0
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 0
42769: PUSH
42770: LD_INT 1
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 1
42779: NEG
42780: PUSH
42781: LD_INT 0
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: NEG
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: NEG
42803: PUSH
42804: LD_INT 2
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 0
42814: PUSH
42815: LD_INT 2
42817: NEG
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: LD_INT 1
42828: NEG
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 2
42836: PUSH
42837: LD_INT 0
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 2
42846: PUSH
42847: LD_INT 1
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: PUSH
42854: LD_INT 2
42856: PUSH
42857: LD_INT 2
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: PUSH
42867: LD_INT 2
42869: PUSH
42870: EMPTY
42871: LIST
42872: LIST
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: LD_INT 2
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 1
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 2
42897: NEG
42898: PUSH
42899: LD_INT 0
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: NEG
42921: PUSH
42922: LD_INT 2
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42951: LD_ADDR_VAR 0 22
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: LD_INT 0
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: PUSH
42966: LD_INT 0
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 1
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: NEG
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: LD_INT 2
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: PUSH
43056: LD_INT 1
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 2
43076: PUSH
43077: LD_INT 1
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 1
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: LD_INT 2
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 2
43127: NEG
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: LD_INT 1
43142: NEG
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: LD_INT 2
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: LIST
43171: LIST
43172: LIST
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: LIST
43179: LIST
43180: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43181: LD_ADDR_VAR 0 23
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: EMPTY
43214: LIST
43215: LIST
43216: PUSH
43217: LD_INT 1
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 1
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 1
43239: NEG
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: NEG
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: PUSH
43260: LD_INT 1
43262: NEG
43263: PUSH
43264: LD_INT 2
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: LD_INT 2
43277: NEG
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 1
43285: PUSH
43286: LD_INT 1
43288: NEG
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: LD_INT 2
43296: PUSH
43297: LD_INT 0
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 2
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 0
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 2
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 2
43380: NEG
43381: PUSH
43382: LD_INT 2
43384: NEG
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: LD_INT 3
43396: NEG
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 3
43408: NEG
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 2
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 2
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: LIST
43440: LIST
43441: LIST
43442: LIST
43443: LIST
43444: LIST
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43461: LD_ADDR_VAR 0 24
43465: PUSH
43466: LD_INT 0
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 0
43478: PUSH
43479: LD_INT 1
43481: NEG
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: PUSH
43487: LD_INT 1
43489: PUSH
43490: LD_INT 0
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 1
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 0
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: NEG
43520: PUSH
43521: LD_INT 0
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: NEG
43543: PUSH
43544: LD_INT 2
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 0
43554: PUSH
43555: LD_INT 2
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: LD_INT 1
43568: NEG
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: PUSH
43587: LD_INT 1
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: LD_INT 2
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 1
43606: PUSH
43607: LD_INT 2
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 1
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 2
43637: NEG
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 2
43648: NEG
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 3
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: LIST
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43737: LD_ADDR_VAR 0 25
43741: PUSH
43742: LD_INT 0
43744: PUSH
43745: LD_INT 0
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: LD_INT 1
43757: NEG
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 1
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: LD_INT 0
43830: PUSH
43831: LD_INT 2
43833: NEG
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 0
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: PUSH
43863: LD_INT 1
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 2
43872: PUSH
43873: LD_INT 2
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 0
43892: PUSH
43893: LD_INT 2
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 1
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 0
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 2
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 1
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 3
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44011: LD_ADDR_VAR 0 26
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 0
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 0
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 1
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: NEG
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 0
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: LD_INT 1
44118: NEG
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 2
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 2
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 0
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 2
44187: NEG
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 2
44210: NEG
44211: PUSH
44212: LD_INT 2
44214: NEG
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: LD_INT 3
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: LD_INT 3
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 2
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 2
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44287: LD_ADDR_VAR 0 27
44291: PUSH
44292: LD_INT 0
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 0
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 1
44315: PUSH
44316: LD_INT 0
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 1
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: LD_INT 1
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: LD_INT 0
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: EMPTY
44363: LIST
44364: LIST
44365: PUSH
44366: LD_INT 1
44368: NEG
44369: PUSH
44370: LD_INT 2
44372: NEG
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 0
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 0
44442: PUSH
44443: LD_INT 2
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 2
44463: NEG
44464: PUSH
44465: LD_INT 0
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: NEG
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 2
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 2
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 3
44520: NEG
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 3
44532: NEG
44533: PUSH
44534: LD_INT 2
44536: NEG
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44567: LD_ADDR_VAR 0 28
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: LD_INT 2
44652: NEG
44653: PUSH
44654: EMPTY
44655: LIST
44656: LIST
44657: PUSH
44658: LD_INT 0
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 1
44674: NEG
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: LD_INT 0
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 2
44702: PUSH
44703: LD_INT 2
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 1
44712: PUSH
44713: LD_INT 2
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: LD_INT 2
44725: PUSH
44726: EMPTY
44727: LIST
44728: LIST
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: LD_INT 1
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: LD_INT 0
44747: PUSH
44748: EMPTY
44749: LIST
44750: LIST
44751: PUSH
44752: LD_INT 2
44754: NEG
44755: PUSH
44756: LD_INT 1
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: LD_INT 2
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 2
44778: NEG
44779: PUSH
44780: LD_INT 3
44782: NEG
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: LD_INT 3
44794: NEG
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 3
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 3
44814: NEG
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: LIST
44828: LIST
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44849: LD_ADDR_VAR 0 29
44853: PUSH
44854: LD_INT 0
44856: PUSH
44857: LD_INT 0
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 0
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: EMPTY
44882: LIST
44883: LIST
44884: PUSH
44885: LD_INT 1
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 0
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: EMPTY
44902: LIST
44903: LIST
44904: PUSH
44905: LD_INT 1
44907: NEG
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 1
44918: NEG
44919: PUSH
44920: LD_INT 1
44922: NEG
44923: PUSH
44924: EMPTY
44925: LIST
44926: LIST
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: LD_INT 2
44934: NEG
44935: PUSH
44936: EMPTY
44937: LIST
44938: LIST
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: PUSH
44965: LD_INT 0
44967: PUSH
44968: EMPTY
44969: LIST
44970: LIST
44971: PUSH
44972: LD_INT 2
44974: PUSH
44975: LD_INT 1
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: PUSH
44982: LD_INT 1
44984: PUSH
44985: LD_INT 2
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: LD_INT 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 2
45015: NEG
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 2
45027: NEG
45028: PUSH
45029: LD_INT 2
45031: NEG
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 3
45043: NEG
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: PUSH
45049: LD_INT 2
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 1
45072: PUSH
45073: LD_INT 3
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 2
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 3
45093: NEG
45094: PUSH
45095: LD_INT 2
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: LIST
45112: LIST
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45128: LD_ADDR_VAR 0 30
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: PUSH
45157: LD_INT 0
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 1
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 0
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 1
45209: NEG
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: LD_INT 2
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 1
45235: NEG
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 2
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: PUSH
45251: LD_INT 2
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 2
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 1
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 2
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: LD_INT 3
45321: NEG
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 1
45329: PUSH
45330: LD_INT 2
45332: NEG
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 3
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 2
45350: PUSH
45351: LD_INT 3
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 3
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: NEG
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45406: LD_ADDR_VAR 0 31
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 0
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: LD_INT 0
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: LD_INT 1
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 0
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 1
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: LD_INT 1
45502: NEG
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 1
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: NEG
45596: PUSH
45597: LD_INT 3
45599: NEG
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 2
45607: PUSH
45608: LD_INT 1
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 3
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 1
45628: PUSH
45629: LD_INT 3
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: LD_INT 2
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 3
45649: NEG
45650: PUSH
45651: LD_INT 2
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: LIST
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45684: LD_ADDR_VAR 0 32
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: LD_INT 0
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: PUSH
45699: LD_INT 0
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: LD_INT 0
45715: PUSH
45716: EMPTY
45717: LIST
45718: LIST
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: LD_INT 1
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 0
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 2
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: LD_INT 2
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 1
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 2
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: PUSH
45820: LD_INT 2
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 2
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 1
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 2
45861: NEG
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: LD_INT 3
45877: NEG
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: LD_INT 2
45888: NEG
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 3
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: LD_INT 3
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 3
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45962: LD_ADDR_VAR 0 33
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 1
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 0
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 1
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 1
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 1
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 2
46066: PUSH
46067: LD_INT 0
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: PUSH
46087: LD_INT 2
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 1
46106: NEG
46107: PUSH
46108: LD_INT 1
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 2
46117: NEG
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: NEG
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: NEG
46141: PUSH
46142: LD_INT 2
46144: NEG
46145: PUSH
46146: EMPTY
46147: LIST
46148: LIST
46149: PUSH
46150: LD_INT 2
46152: NEG
46153: PUSH
46154: LD_INT 3
46156: NEG
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: LD_INT 1
46167: NEG
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 3
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: LD_INT 3
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 3
46206: NEG
46207: PUSH
46208: LD_INT 2
46210: NEG
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: LIST
46238: LIST
46239: LIST
46240: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46241: LD_ADDR_VAR 0 34
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 1
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: NEG
46311: PUSH
46312: LD_INT 1
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: LD_INT 1
46359: PUSH
46360: EMPTY
46361: LIST
46362: LIST
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: LD_INT 2
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: LD_INT 2
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 1
46386: NEG
46387: PUSH
46388: LD_INT 1
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 2
46397: NEG
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: NEG
46409: PUSH
46410: LD_INT 1
46412: NEG
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: LD_INT 2
46424: NEG
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: LD_INT 3
46436: NEG
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 2
46447: NEG
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 3
46455: PUSH
46456: LD_INT 2
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 1
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 3
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46521: LD_ADDR_VAR 0 35
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 0
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 1
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: LD_INT 1
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: NEG
46613: PUSH
46614: LD_INT 1
46616: NEG
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46633: LD_ADDR_VAR 0 36
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 1
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 0
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: LD_INT 1
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: NEG
46715: PUSH
46716: LD_INT 2
46718: NEG
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: LD_INT 2
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: LIST
46738: LIST
46739: LIST
46740: LIST
46741: LIST
46742: LIST
46743: LIST
46744: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46745: LD_ADDR_VAR 0 37
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 0
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 1
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: LD_INT 1
46796: PUSH
46797: EMPTY
46798: LIST
46799: LIST
46800: PUSH
46801: LD_INT 1
46803: NEG
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: NEG
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 1
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46857: LD_ADDR_VAR 0 38
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: LD_INT 1
46930: NEG
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: LD_INT 1
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 2
46948: NEG
46949: PUSH
46950: LD_INT 1
46952: NEG
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46969: LD_ADDR_VAR 0 39
46973: PUSH
46974: LD_INT 0
46976: PUSH
46977: LD_INT 0
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 1
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 2
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47081: LD_ADDR_VAR 0 40
47085: PUSH
47086: LD_INT 0
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: LD_INT 1
47109: PUSH
47110: LD_INT 0
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 1
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 0
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 1
47173: NEG
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47193: LD_ADDR_VAR 0 41
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 1
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: LD_INT 1
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: LD_INT 1
47244: PUSH
47245: EMPTY
47246: LIST
47247: LIST
47248: PUSH
47249: LD_INT 1
47251: NEG
47252: PUSH
47253: LD_INT 0
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 1
47262: NEG
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 1
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 2
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 2
47359: NEG
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: LD_INT 2
47375: NEG
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: LD_INT 3
47387: NEG
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: LD_INT 1
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: LD_INT 1
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: LD_INT 2
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 3
47436: PUSH
47437: LD_INT 3
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 2
47446: PUSH
47447: LD_INT 3
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 3
47467: NEG
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 3
47478: NEG
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 3
47490: NEG
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 3
47502: NEG
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47543: LD_ADDR_VAR 0 42
47547: PUSH
47548: LD_INT 0
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 0
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 1
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: NEG
47602: PUSH
47603: LD_INT 0
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 2
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 0
47636: PUSH
47637: LD_INT 2
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: LD_INT 2
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 2
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: LD_INT 1
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: NEG
47710: PUSH
47711: LD_INT 1
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 2
47721: NEG
47722: PUSH
47723: LD_INT 2
47725: NEG
47726: PUSH
47727: EMPTY
47728: LIST
47729: LIST
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: LD_INT 3
47737: NEG
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 1
47745: NEG
47746: PUSH
47747: LD_INT 3
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 0
47757: PUSH
47758: LD_INT 3
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 1
47768: PUSH
47769: LD_INT 2
47771: NEG
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 3
47779: PUSH
47780: LD_INT 2
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 3
47789: PUSH
47790: LD_INT 3
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 2
47799: PUSH
47800: LD_INT 3
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 3
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 3
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 2
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 3
47840: NEG
47841: PUSH
47842: LD_INT 2
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 3
47852: NEG
47853: PUSH
47854: LD_INT 3
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47893: LD_ADDR_VAR 0 43
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: LD_INT 1
47913: NEG
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 0
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 1
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 1
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: NEG
47975: PUSH
47976: LD_INT 2
47978: NEG
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 2
47989: NEG
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 1
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 3
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 3
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: LD_INT 1
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 3
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 1
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 1
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 1
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 3
48189: NEG
48190: PUSH
48191: LD_INT 0
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 3
48200: NEG
48201: PUSH
48202: LD_INT 1
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48241: LD_ADDR_VAR 0 44
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 0
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: NEG
48300: PUSH
48301: LD_INT 0
48303: PUSH
48304: EMPTY
48305: LIST
48306: LIST
48307: PUSH
48308: LD_INT 1
48310: NEG
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: LD_INT 1
48337: NEG
48338: PUSH
48339: EMPTY
48340: LIST
48341: LIST
48342: PUSH
48343: LD_INT 2
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: EMPTY
48370: LIST
48371: LIST
48372: PUSH
48373: LD_INT 1
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 2
48396: NEG
48397: PUSH
48398: LD_INT 0
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: LD_INT 2
48423: NEG
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: NEG
48432: PUSH
48433: LD_INT 3
48435: NEG
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 1
48446: NEG
48447: PUSH
48448: EMPTY
48449: LIST
48450: LIST
48451: PUSH
48452: LD_INT 3
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 3
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 3
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 3
48484: PUSH
48485: LD_INT 3
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: LD_INT 3
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 3
48515: NEG
48516: PUSH
48517: LD_INT 0
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 3
48538: NEG
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 3
48550: NEG
48551: PUSH
48552: LD_INT 3
48554: NEG
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: LIST
48578: LIST
48579: LIST
48580: LIST
48581: LIST
48582: LIST
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48591: LD_ADDR_VAR 0 45
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: NEG
48650: PUSH
48651: LD_INT 0
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 1
48660: NEG
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 2
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 1
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 0
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: NEG
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 2
48769: NEG
48770: PUSH
48771: LD_INT 2
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: LD_INT 3
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: LD_INT 3
48797: NEG
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: LD_INT 3
48808: NEG
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 1
48816: PUSH
48817: LD_INT 2
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: LD_INT 3
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 2
48847: PUSH
48848: LD_INT 3
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PUSH
48855: LD_INT 1
48857: PUSH
48858: LD_INT 3
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 3
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 2
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 3
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: NEG
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48941: LD_ADDR_VAR 0 46
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: LD_INT 0
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: LD_INT 1
48961: NEG
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 1
48969: PUSH
48970: LD_INT 0
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: LD_INT 1
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: LD_INT 0
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: LD_INT 1
49014: NEG
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: NEG
49023: PUSH
49024: LD_INT 2
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 2
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 2
49066: PUSH
49067: LD_INT 1
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: LD_INT 2
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: EMPTY
49091: LIST
49092: LIST
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 2
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 2
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 3
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 3
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 3
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 1
49195: PUSH
49196: LD_INT 3
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 0
49205: PUSH
49206: LD_INT 3
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 2
49226: NEG
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 3
49237: NEG
49238: PUSH
49239: LD_INT 0
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 3
49248: NEG
49249: PUSH
49250: LD_INT 1
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49289: LD_ADDR_VAR 0 47
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 0
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: PUSH
49318: LD_INT 0
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: NEG
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 1
49370: NEG
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: LD_INT 2
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 1
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49440: LD_ADDR_VAR 0 48
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 0
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 1
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 0
49533: PUSH
49534: LD_INT 2
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49587: LD_ADDR_VAR 0 49
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 0
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: NEG
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 1
49656: NEG
49657: PUSH
49658: LD_INT 1
49660: NEG
49661: PUSH
49662: EMPTY
49663: LIST
49664: LIST
49665: PUSH
49666: LD_INT 1
49668: PUSH
49669: LD_INT 1
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: LD_INT 0
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 2
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: LD_INT 2
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49731: LD_ADDR_VAR 0 50
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: LD_INT 0
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 1
49751: NEG
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 1
49759: PUSH
49760: LD_INT 0
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 1
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 1
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 1
49800: NEG
49801: PUSH
49802: LD_INT 1
49804: NEG
49805: PUSH
49806: EMPTY
49807: LIST
49808: LIST
49809: PUSH
49810: LD_INT 2
49812: PUSH
49813: LD_INT 1
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 2
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 2
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49875: LD_ADDR_VAR 0 51
49879: PUSH
49880: LD_INT 0
49882: PUSH
49883: LD_INT 0
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 0
49892: PUSH
49893: LD_INT 1
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 1
49903: PUSH
49904: LD_INT 0
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 1
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: LD_INT 1
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: LD_INT 0
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: LIST
50013: LIST
50014: LIST
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50022: LD_ADDR_VAR 0 52
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 1
50042: NEG
50043: PUSH
50044: EMPTY
50045: LIST
50046: LIST
50047: PUSH
50048: LD_INT 1
50050: PUSH
50051: LD_INT 0
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 0
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 1
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 1
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 1
50115: NEG
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 2
50126: NEG
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: PUSH
50135: LD_INT 2
50137: NEG
50138: PUSH
50139: LD_INT 1
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: NEG
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50173: LD_ADDR_VAR 0 53
50177: PUSH
50178: LD_INT 0
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 0
50190: PUSH
50191: LD_INT 1
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 1
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 1
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 1
50246: NEG
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: LD_INT 2
50258: NEG
50259: PUSH
50260: EMPTY
50261: LIST
50262: LIST
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 2
50269: NEG
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 1
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: PUSH
50309: LD_INT 2
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: PUSH
50319: LD_INT 2
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: LD_INT 2
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 1
50338: NEG
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 2
50360: NEG
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 2
50372: NEG
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50403: LD_ADDR_VAR 0 54
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: LD_INT 1
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: LD_INT 1
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 1
50461: NEG
50462: PUSH
50463: LD_INT 0
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 1
50472: NEG
50473: PUSH
50474: LD_INT 1
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: NEG
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 0
50496: PUSH
50497: LD_INT 2
50499: NEG
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 2
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 2
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 2
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: PUSH
50549: LD_INT 2
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: PUSH
50556: LD_INT 0
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: PUSH
50566: LD_INT 1
50568: NEG
50569: PUSH
50570: LD_INT 1
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: PUSH
50600: LD_INT 2
50602: NEG
50603: PUSH
50604: LD_INT 2
50606: NEG
50607: PUSH
50608: EMPTY
50609: LIST
50610: LIST
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50633: LD_ADDR_VAR 0 55
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 1
50691: NEG
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: NEG
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: LD_INT 2
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: LD_INT 2
50729: NEG
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 1
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 2
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: PUSH
50759: LD_INT 1
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: PUSH
50766: LD_INT 2
50768: PUSH
50769: LD_INT 2
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: LD_INT 1
50778: PUSH
50779: LD_INT 2
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 2
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: LD_INT 1
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: LD_INT 0
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 2
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50863: LD_ADDR_VAR 0 56
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 0
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 0
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: PUSH
50892: LD_INT 0
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 0
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: NEG
50922: PUSH
50923: LD_INT 0
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 1
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: LD_INT 2
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 0
50956: PUSH
50957: LD_INT 2
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 1
50967: PUSH
50968: LD_INT 1
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 0
50981: PUSH
50982: EMPTY
50983: LIST
50984: LIST
50985: PUSH
50986: LD_INT 2
50988: PUSH
50989: LD_INT 1
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: LD_INT 2
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: LD_INT 2
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 0
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 1
51028: NEG
51029: PUSH
51030: LD_INT 1
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 0
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: NEG
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: NEG
51063: PUSH
51064: LD_INT 2
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51093: LD_ADDR_VAR 0 57
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 0
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 0
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 1
51151: NEG
51152: PUSH
51153: LD_INT 0
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 1
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: LD_INT 2
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 2
51189: NEG
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: LD_INT 1
51200: NEG
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 0
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 2
51269: NEG
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: NEG
51281: PUSH
51282: LD_INT 1
51284: NEG
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 2
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51323: LD_ADDR_VAR 0 58
51327: PUSH
51328: LD_INT 0
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 0
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: LD_INT 1
51396: NEG
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 0
51416: PUSH
51417: LD_INT 2
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 1
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 2
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 2
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 1
51468: PUSH
51469: LD_INT 2
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: NEG
51511: PUSH
51512: LD_INT 1
51514: NEG
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: LIST
51536: LIST
51537: LIST
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: LIST
51543: LIST
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51553: LD_ADDR_VAR 0 59
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 0
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 1
51581: PUSH
51582: LD_INT 0
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 0
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: NEG
51612: PUSH
51613: LD_INT 0
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 1
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51641: LD_ADDR_VAR 0 60
51645: PUSH
51646: LD_INT 0
51648: PUSH
51649: LD_INT 0
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: LD_INT 1
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 0
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 1
51679: PUSH
51680: LD_INT 1
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 1
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 1
51699: NEG
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51729: LD_ADDR_VAR 0 61
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51817: LD_ADDR_VAR 0 62
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 1
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: LD_INT 1
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: LD_INT 1
51890: NEG
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51905: LD_ADDR_VAR 0 63
51909: PUSH
51910: LD_INT 0
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 0
51922: PUSH
51923: LD_INT 1
51925: NEG
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 1
51933: PUSH
51934: LD_INT 0
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 1
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 0
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: LD_INT 1
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51993: LD_ADDR_VAR 0 64
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 1
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: LD_INT 0
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 1
52066: NEG
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: ST_TO_ADDR
// end ; 1 :
52081: GO 57978
52083: LD_INT 1
52085: DOUBLE
52086: EQUAL
52087: IFTRUE 52091
52089: GO 54714
52091: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52092: LD_ADDR_VAR 0 11
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 3
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 3
52114: NEG
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 1
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: EMPTY
52132: LIST
52133: LIST
52134: LIST
52135: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52136: LD_ADDR_VAR 0 12
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 3
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: LIST
52176: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52177: LD_ADDR_VAR 0 13
52181: PUSH
52182: LD_INT 3
52184: PUSH
52185: LD_INT 2
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: LD_INT 3
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 3
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: LIST
52216: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52217: LD_ADDR_VAR 0 14
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 3
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: LIST
52257: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52258: LD_ADDR_VAR 0 15
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52302: LD_ADDR_VAR 0 16
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 3
52321: NEG
52322: PUSH
52323: LD_INT 2
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 3
52333: NEG
52334: PUSH
52335: LD_INT 3
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52348: LD_ADDR_VAR 0 17
52352: PUSH
52353: LD_INT 1
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: LD_INT 3
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: LIST
52391: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52392: LD_ADDR_VAR 0 18
52396: PUSH
52397: LD_INT 2
52399: PUSH
52400: LD_INT 1
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: LIST
52432: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52433: LD_ADDR_VAR 0 19
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 3
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: LD_INT 3
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52473: LD_ADDR_VAR 0 20
52477: PUSH
52478: LD_INT 1
52480: PUSH
52481: LD_INT 3
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: NEG
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: LIST
52513: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52514: LD_ADDR_VAR 0 21
52518: PUSH
52519: LD_INT 2
52521: NEG
52522: PUSH
52523: LD_INT 1
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 0
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 3
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: LIST
52557: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52558: LD_ADDR_VAR 0 22
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 3
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: NEG
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: LIST
52603: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52604: LD_ADDR_VAR 0 23
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 1
52622: NEG
52623: PUSH
52624: LD_INT 4
52626: NEG
52627: PUSH
52628: EMPTY
52629: LIST
52630: LIST
52631: PUSH
52632: LD_INT 1
52634: PUSH
52635: LD_INT 3
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: LIST
52647: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52648: LD_ADDR_VAR 0 24
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52689: LD_ADDR_VAR 0 25
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 4
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: LD_INT 4
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52729: LD_ADDR_VAR 0 26
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 3
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 4
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: NEG
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52770: LD_ADDR_VAR 0 27
52774: PUSH
52775: LD_INT 3
52777: NEG
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: NEG
52789: PUSH
52790: LD_INT 1
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 4
52799: NEG
52800: PUSH
52801: LD_INT 1
52803: NEG
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: LIST
52813: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52814: LD_ADDR_VAR 0 28
52818: PUSH
52819: LD_INT 3
52821: NEG
52822: PUSH
52823: LD_INT 3
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 3
52833: NEG
52834: PUSH
52835: LD_INT 4
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 4
52845: NEG
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52860: LD_ADDR_VAR 0 29
52864: PUSH
52865: LD_INT 1
52867: NEG
52868: PUSH
52869: LD_INT 3
52871: NEG
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 3
52882: NEG
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: LD_INT 2
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: LD_INT 4
52905: NEG
52906: PUSH
52907: EMPTY
52908: LIST
52909: LIST
52910: PUSH
52911: LD_INT 0
52913: PUSH
52914: LD_INT 4
52916: NEG
52917: PUSH
52918: EMPTY
52919: LIST
52920: LIST
52921: PUSH
52922: LD_INT 1
52924: PUSH
52925: LD_INT 3
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 5
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: LD_INT 5
52950: NEG
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: LD_INT 4
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: NEG
52970: PUSH
52971: LD_INT 6
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: LD_INT 6
52984: NEG
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: LD_INT 5
52995: NEG
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53015: LD_ADDR_VAR 0 30
53019: PUSH
53020: LD_INT 2
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 3
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 3
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 4
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 4
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 5
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 5
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 5
53115: PUSH
53116: LD_INT 1
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 6
53126: PUSH
53127: LD_INT 0
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 6
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53158: LD_ADDR_VAR 0 31
53162: PUSH
53163: LD_INT 3
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 2
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 4
53195: PUSH
53196: LD_INT 3
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 4
53205: PUSH
53206: LD_INT 4
53208: PUSH
53209: EMPTY
53210: LIST
53211: LIST
53212: PUSH
53213: LD_INT 3
53215: PUSH
53216: LD_INT 4
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 5
53225: PUSH
53226: LD_INT 4
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 5
53235: PUSH
53236: LD_INT 5
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 4
53245: PUSH
53246: LD_INT 5
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 6
53255: PUSH
53256: LD_INT 5
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 6
53265: PUSH
53266: LD_INT 6
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 5
53275: PUSH
53276: LD_INT 6
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: LIST
53292: LIST
53293: LIST
53294: LIST
53295: LIST
53296: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53297: LD_ADDR_VAR 0 32
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 0
53314: PUSH
53315: LD_INT 3
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 1
53324: NEG
53325: PUSH
53326: LD_INT 2
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 1
53335: PUSH
53336: LD_INT 4
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: LD_INT 4
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: LD_INT 3
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: LD_INT 5
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: LD_INT 5
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 1
53386: NEG
53387: PUSH
53388: LD_INT 4
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: PUSH
53398: LD_INT 6
53400: PUSH
53401: EMPTY
53402: LIST
53403: LIST
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 6
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 1
53417: NEG
53418: PUSH
53419: LD_INT 5
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53440: LD_ADDR_VAR 0 33
53444: PUSH
53445: LD_INT 2
53447: NEG
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 3
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 3
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 3
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 4
53492: NEG
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 4
53503: NEG
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 5
53526: NEG
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 5
53549: NEG
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: EMPTY
53555: LIST
53556: LIST
53557: PUSH
53558: LD_INT 6
53560: NEG
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 6
53571: NEG
53572: PUSH
53573: LD_INT 1
53575: NEG
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53595: LD_ADDR_VAR 0 34
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: LD_INT 2
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 3
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 4
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 4
53650: NEG
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 4
53662: NEG
53663: PUSH
53664: LD_INT 4
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 4
53674: NEG
53675: PUSH
53676: LD_INT 5
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 5
53686: NEG
53687: PUSH
53688: LD_INT 4
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 5
53698: NEG
53699: PUSH
53700: LD_INT 5
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 5
53710: NEG
53711: PUSH
53712: LD_INT 6
53714: NEG
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 6
53722: NEG
53723: PUSH
53724: LD_INT 5
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 6
53734: NEG
53735: PUSH
53736: LD_INT 6
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53758: LD_ADDR_VAR 0 41
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: LD_INT 2
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53802: LD_ADDR_VAR 0 42
53806: PUSH
53807: LD_INT 2
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 2
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: LIST
53842: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53843: LD_ADDR_VAR 0 43
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: PUSH
53871: LD_INT 3
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: LIST
53882: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53883: LD_ADDR_VAR 0 44
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 2
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: PUSH
53898: LD_INT 1
53900: PUSH
53901: LD_INT 3
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: PUSH
53908: LD_INT 1
53910: NEG
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53924: LD_ADDR_VAR 0 45
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 2
53942: NEG
53943: PUSH
53944: LD_INT 1
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: LD_INT 1
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53968: LD_ADDR_VAR 0 46
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54014: LD_ADDR_VAR 0 47
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: NEG
54034: PUSH
54035: LD_INT 3
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54047: LD_ADDR_VAR 0 48
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 2
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 2
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54078: LD_ADDR_VAR 0 49
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 3
54095: PUSH
54096: LD_INT 2
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54107: LD_ADDR_VAR 0 50
54111: PUSH
54112: LD_INT 2
54114: PUSH
54115: LD_INT 3
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 1
54124: PUSH
54125: LD_INT 3
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54136: LD_ADDR_VAR 0 51
54140: PUSH
54141: LD_INT 1
54143: NEG
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 2
54154: NEG
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54167: LD_ADDR_VAR 0 52
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: LD_INT 1
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 2
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54200: LD_ADDR_VAR 0 53
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 3
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: LD_INT 3
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 2
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54244: LD_ADDR_VAR 0 54
54248: PUSH
54249: LD_INT 2
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 3
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: LIST
54284: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54285: LD_ADDR_VAR 0 55
54289: PUSH
54290: LD_INT 3
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 3
54302: PUSH
54303: LD_INT 3
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 2
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: LIST
54324: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54325: LD_ADDR_VAR 0 56
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: LD_INT 3
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 3
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 1
54352: NEG
54353: PUSH
54354: LD_INT 2
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: LIST
54365: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54366: LD_ADDR_VAR 0 57
54370: PUSH
54371: LD_INT 2
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: NEG
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: LD_INT 1
54399: NEG
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: LIST
54409: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54410: LD_ADDR_VAR 0 58
54414: PUSH
54415: LD_INT 2
54417: NEG
54418: PUSH
54419: LD_INT 3
54421: NEG
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: NEG
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 3
54441: NEG
54442: PUSH
54443: LD_INT 3
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: LIST
54455: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54456: LD_ADDR_VAR 0 59
54460: PUSH
54461: LD_INT 1
54463: NEG
54464: PUSH
54465: LD_INT 2
54467: NEG
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 0
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 1
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54500: LD_ADDR_VAR 0 60
54504: PUSH
54505: LD_INT 1
54507: PUSH
54508: LD_INT 1
54510: NEG
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 2
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: LIST
54540: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54541: LD_ADDR_VAR 0 61
54545: PUSH
54546: LD_INT 2
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: PUSH
54556: LD_INT 2
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: LIST
54580: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54581: LD_ADDR_VAR 0 62
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: LD_INT 2
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: LIST
54621: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54622: LD_ADDR_VAR 0 63
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 2
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54666: LD_ADDR_VAR 0 64
54670: PUSH
54671: LD_INT 1
54673: NEG
54674: PUSH
54675: LD_INT 2
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 2
54685: NEG
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: NEG
54698: PUSH
54699: LD_INT 2
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: ST_TO_ADDR
// end ; 2 :
54712: GO 57978
54714: LD_INT 2
54716: DOUBLE
54717: EQUAL
54718: IFTRUE 54722
54720: GO 57977
54722: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54723: LD_ADDR_VAR 0 29
54727: PUSH
54728: LD_INT 4
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 4
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 5
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 5
54761: PUSH
54762: LD_INT 1
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 4
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 3
54781: PUSH
54782: LD_INT 0
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 3
54791: PUSH
54792: LD_INT 1
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 2
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 5
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: LD_INT 3
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 3
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: LD_INT 3
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: LD_INT 4
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: LD_INT 4
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: LD_INT 3
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: PUSH
54884: LD_INT 2
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 4
54893: PUSH
54894: LD_INT 2
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: LD_INT 4
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 1
54933: PUSH
54934: LD_INT 4
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 1
54943: PUSH
54944: LD_INT 5
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: LD_INT 5
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: NEG
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 1
54974: NEG
54975: PUSH
54976: LD_INT 3
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 5
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: LD_INT 3
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 3
55006: NEG
55007: PUSH
55008: LD_INT 0
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 3
55017: NEG
55018: PUSH
55019: LD_INT 1
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 3
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 4
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 4
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 4
55085: NEG
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 2
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 4
55108: NEG
55109: PUSH
55110: LD_INT 4
55112: NEG
55113: PUSH
55114: EMPTY
55115: LIST
55116: LIST
55117: PUSH
55118: LD_INT 4
55120: NEG
55121: PUSH
55122: LD_INT 5
55124: NEG
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 3
55132: NEG
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: NEG
55145: PUSH
55146: LD_INT 3
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 4
55156: NEG
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 5
55168: NEG
55169: PUSH
55170: LD_INT 4
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 5
55180: NEG
55181: PUSH
55182: LD_INT 5
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 5
55196: NEG
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 5
55204: NEG
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55261: LD_ADDR_VAR 0 30
55265: PUSH
55266: LD_INT 4
55268: PUSH
55269: LD_INT 4
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 4
55278: PUSH
55279: LD_INT 3
55281: PUSH
55282: EMPTY
55283: LIST
55284: LIST
55285: PUSH
55286: LD_INT 5
55288: PUSH
55289: LD_INT 4
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 5
55298: PUSH
55299: LD_INT 5
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 4
55308: PUSH
55309: LD_INT 5
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: LD_INT 4
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 3
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 5
55338: PUSH
55339: LD_INT 3
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 5
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 0
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: LD_INT 2
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: PUSH
55379: LD_INT 3
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: PUSH
55389: LD_INT 4
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 0
55398: PUSH
55399: LD_INT 4
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: LD_INT 4
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 2
55440: NEG
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 4
55451: NEG
55452: PUSH
55453: LD_INT 0
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 4
55462: NEG
55463: PUSH
55464: LD_INT 1
55466: NEG
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 3
55474: NEG
55475: PUSH
55476: LD_INT 0
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 3
55485: NEG
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 4
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 5
55507: NEG
55508: PUSH
55509: LD_INT 0
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 5
55518: NEG
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 5
55530: NEG
55531: PUSH
55532: LD_INT 2
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 3
55542: NEG
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 3
55553: NEG
55554: PUSH
55555: LD_INT 3
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 3
55565: NEG
55566: PUSH
55567: LD_INT 4
55569: NEG
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: NEG
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_INT 2
55589: NEG
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 3
55601: NEG
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 4
55613: NEG
55614: PUSH
55615: LD_INT 3
55617: NEG
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 4
55625: NEG
55626: PUSH
55627: LD_INT 4
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: NEG
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 4
55649: NEG
55650: PUSH
55651: LD_INT 2
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 0
55661: PUSH
55662: LD_INT 4
55664: NEG
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 0
55672: PUSH
55673: LD_INT 5
55675: NEG
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: PUSH
55684: LD_INT 4
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 0
55705: PUSH
55706: LD_INT 3
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: LD_INT 4
55720: NEG
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 5
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 3
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 2
55751: NEG
55752: PUSH
55753: LD_INT 5
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: LIST
55769: LIST
55770: LIST
55771: LIST
55772: LIST
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55808: LD_ADDR_VAR 0 31
55812: PUSH
55813: LD_INT 0
55815: PUSH
55816: LD_INT 4
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: PUSH
55836: LD_INT 4
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 5
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: LD_INT 5
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: NEG
55866: PUSH
55867: LD_INT 4
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 3
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: PUSH
55888: LD_INT 5
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 3
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 3
55908: NEG
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 4
55964: NEG
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 4
55987: NEG
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 2
55999: NEG
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 4
56010: NEG
56011: PUSH
56012: LD_INT 4
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 4
56022: NEG
56023: PUSH
56024: LD_INT 5
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 3
56034: NEG
56035: PUSH
56036: LD_INT 4
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: LD_INT 3
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 4
56058: NEG
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 5
56070: NEG
56071: PUSH
56072: LD_INT 4
56074: NEG
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: LD_INT 5
56086: NEG
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: LD_INT 3
56094: NEG
56095: PUSH
56096: LD_INT 5
56098: NEG
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: PUSH
56104: LD_INT 5
56106: NEG
56107: PUSH
56108: LD_INT 3
56110: NEG
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 3
56121: NEG
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: LD_INT 4
56132: NEG
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: PUSH
56138: LD_INT 1
56140: PUSH
56141: LD_INT 3
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: NEG
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 4
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 2
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: NEG
56209: PUSH
56210: LD_INT 4
56212: NEG
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 4
56220: PUSH
56221: LD_INT 0
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 4
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 5
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 5
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 4
56261: PUSH
56262: LD_INT 1
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: LD_INT 0
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 3
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: LD_INT 2
56295: NEG
56296: PUSH
56297: EMPTY
56298: LIST
56299: LIST
56300: PUSH
56301: LD_INT 5
56303: PUSH
56304: LD_INT 2
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56358: LD_ADDR_VAR 0 32
56362: PUSH
56363: LD_INT 4
56365: NEG
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 4
56376: NEG
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 3
56388: NEG
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 3
56399: NEG
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 4
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 5
56421: NEG
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 5
56432: NEG
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 5
56444: NEG
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 3
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 3
56467: NEG
56468: PUSH
56469: LD_INT 3
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: LD_INT 4
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 4
56527: NEG
56528: PUSH
56529: LD_INT 3
56531: NEG
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 4
56539: NEG
56540: PUSH
56541: LD_INT 4
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 4
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 4
56563: NEG
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: LD_INT 4
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 5
56589: NEG
56590: PUSH
56591: EMPTY
56592: LIST
56593: LIST
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: LD_INT 4
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 3
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: NEG
56631: PUSH
56632: LD_INT 4
56634: NEG
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 1
56642: NEG
56643: PUSH
56644: LD_INT 5
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 3
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: NEG
56666: PUSH
56667: LD_INT 5
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 3
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 4
56698: PUSH
56699: LD_INT 0
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 4
56708: PUSH
56709: LD_INT 1
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 3
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 2
56738: PUSH
56739: LD_INT 1
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 2
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 4
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 4
56770: PUSH
56771: LD_INT 4
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 4
56780: PUSH
56781: LD_INT 3
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 5
56790: PUSH
56791: LD_INT 4
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 5
56800: PUSH
56801: LD_INT 5
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 4
56810: PUSH
56811: LD_INT 5
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 3
56820: PUSH
56821: LD_INT 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 3
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 5
56840: PUSH
56841: LD_INT 3
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 3
56850: PUSH
56851: LD_INT 5
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56905: LD_ADDR_VAR 0 33
56909: PUSH
56910: LD_INT 4
56912: NEG
56913: PUSH
56914: LD_INT 4
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 4
56924: NEG
56925: PUSH
56926: LD_INT 5
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 3
56936: NEG
56937: PUSH
56938: LD_INT 4
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 4
56960: NEG
56961: PUSH
56962: LD_INT 3
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 5
56972: NEG
56973: PUSH
56974: LD_INT 4
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: LD_INT 5
56988: NEG
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 3
56996: NEG
56997: PUSH
56998: LD_INT 5
57000: NEG
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 5
57008: NEG
57009: PUSH
57010: LD_INT 3
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 3
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 0
57031: PUSH
57032: LD_INT 4
57034: NEG
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 1
57042: PUSH
57043: LD_INT 3
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: PUSH
57054: LD_INT 2
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 1
57075: NEG
57076: PUSH
57077: LD_INT 3
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 1
57087: NEG
57088: PUSH
57089: LD_INT 4
57091: NEG
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 2
57099: PUSH
57100: LD_INT 2
57102: NEG
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 2
57110: NEG
57111: PUSH
57112: LD_INT 4
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 4
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 4
57132: PUSH
57133: LD_INT 1
57135: NEG
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 5
57143: PUSH
57144: LD_INT 0
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 5
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 4
57163: PUSH
57164: LD_INT 1
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 3
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 3
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: LD_INT 3
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 5
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: LD_INT 3
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: LD_INT 2
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: LD_INT 3
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 4
57245: PUSH
57246: LD_INT 4
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: LD_INT 4
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: PUSH
57266: LD_INT 3
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 2
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 4
57285: PUSH
57286: LD_INT 2
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 2
57295: PUSH
57296: LD_INT 4
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: LD_INT 4
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: LD_INT 3
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 4
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 1
57335: PUSH
57336: LD_INT 5
57338: PUSH
57339: EMPTY
57340: LIST
57341: LIST
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: LD_INT 5
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: LD_INT 4
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 1
57366: NEG
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 2
57377: PUSH
57378: LD_INT 5
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: LD_INT 2
57387: NEG
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: LIST
57404: LIST
57405: LIST
57406: LIST
57407: LIST
57408: LIST
57409: LIST
57410: LIST
57411: LIST
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57443: LD_ADDR_VAR 0 34
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 4
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: LD_INT 5
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 3
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 4
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 1
57517: NEG
57518: PUSH
57519: LD_INT 5
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: LD_INT 3
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: NEG
57541: PUSH
57542: LD_INT 5
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 3
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 4
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 4
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 2
57627: NEG
57628: PUSH
57629: EMPTY
57630: LIST
57631: LIST
57632: PUSH
57633: LD_INT 4
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 4
57645: PUSH
57646: LD_INT 4
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 4
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 5
57665: PUSH
57666: LD_INT 4
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 5
57675: PUSH
57676: LD_INT 5
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: LD_INT 5
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: LD_INT 4
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 3
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 5
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: LD_INT 5
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 0
57735: PUSH
57736: LD_INT 3
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 2
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 1
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 4
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 3
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 2
57807: PUSH
57808: LD_INT 4
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: NEG
57818: PUSH
57819: LD_INT 2
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 4
57828: NEG
57829: PUSH
57830: LD_INT 0
57832: PUSH
57833: EMPTY
57834: LIST
57835: LIST
57836: PUSH
57837: LD_INT 4
57839: NEG
57840: PUSH
57841: LD_INT 1
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: NEG
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 4
57873: NEG
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 5
57884: NEG
57885: PUSH
57886: LD_INT 0
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 5
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 5
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 3
57919: NEG
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: ST_TO_ADDR
// end ; end ;
57975: GO 57978
57977: POP
// case btype of b_depot , b_warehouse :
57978: LD_VAR 0 1
57982: PUSH
57983: LD_INT 0
57985: DOUBLE
57986: EQUAL
57987: IFTRUE 57997
57989: LD_INT 1
57991: DOUBLE
57992: EQUAL
57993: IFTRUE 57997
57995: GO 58198
57997: POP
// case nation of nation_american :
57998: LD_VAR 0 5
58002: PUSH
58003: LD_INT 1
58005: DOUBLE
58006: EQUAL
58007: IFTRUE 58011
58009: GO 58067
58011: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58012: LD_ADDR_VAR 0 9
58016: PUSH
58017: LD_VAR 0 11
58021: PUSH
58022: LD_VAR 0 12
58026: PUSH
58027: LD_VAR 0 13
58031: PUSH
58032: LD_VAR 0 14
58036: PUSH
58037: LD_VAR 0 15
58041: PUSH
58042: LD_VAR 0 16
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: PUSH
58055: LD_VAR 0 4
58059: PUSH
58060: LD_INT 1
58062: PLUS
58063: ARRAY
58064: ST_TO_ADDR
58065: GO 58196
58067: LD_INT 2
58069: DOUBLE
58070: EQUAL
58071: IFTRUE 58075
58073: GO 58131
58075: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58076: LD_ADDR_VAR 0 9
58080: PUSH
58081: LD_VAR 0 17
58085: PUSH
58086: LD_VAR 0 18
58090: PUSH
58091: LD_VAR 0 19
58095: PUSH
58096: LD_VAR 0 20
58100: PUSH
58101: LD_VAR 0 21
58105: PUSH
58106: LD_VAR 0 22
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: PUSH
58119: LD_VAR 0 4
58123: PUSH
58124: LD_INT 1
58126: PLUS
58127: ARRAY
58128: ST_TO_ADDR
58129: GO 58196
58131: LD_INT 3
58133: DOUBLE
58134: EQUAL
58135: IFTRUE 58139
58137: GO 58195
58139: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58140: LD_ADDR_VAR 0 9
58144: PUSH
58145: LD_VAR 0 23
58149: PUSH
58150: LD_VAR 0 24
58154: PUSH
58155: LD_VAR 0 25
58159: PUSH
58160: LD_VAR 0 26
58164: PUSH
58165: LD_VAR 0 27
58169: PUSH
58170: LD_VAR 0 28
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: PUSH
58183: LD_VAR 0 4
58187: PUSH
58188: LD_INT 1
58190: PLUS
58191: ARRAY
58192: ST_TO_ADDR
58193: GO 58196
58195: POP
58196: GO 58751
58198: LD_INT 2
58200: DOUBLE
58201: EQUAL
58202: IFTRUE 58212
58204: LD_INT 3
58206: DOUBLE
58207: EQUAL
58208: IFTRUE 58212
58210: GO 58268
58212: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58213: LD_ADDR_VAR 0 9
58217: PUSH
58218: LD_VAR 0 29
58222: PUSH
58223: LD_VAR 0 30
58227: PUSH
58228: LD_VAR 0 31
58232: PUSH
58233: LD_VAR 0 32
58237: PUSH
58238: LD_VAR 0 33
58242: PUSH
58243: LD_VAR 0 34
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: LIST
58255: PUSH
58256: LD_VAR 0 4
58260: PUSH
58261: LD_INT 1
58263: PLUS
58264: ARRAY
58265: ST_TO_ADDR
58266: GO 58751
58268: LD_INT 16
58270: DOUBLE
58271: EQUAL
58272: IFTRUE 58330
58274: LD_INT 17
58276: DOUBLE
58277: EQUAL
58278: IFTRUE 58330
58280: LD_INT 18
58282: DOUBLE
58283: EQUAL
58284: IFTRUE 58330
58286: LD_INT 19
58288: DOUBLE
58289: EQUAL
58290: IFTRUE 58330
58292: LD_INT 22
58294: DOUBLE
58295: EQUAL
58296: IFTRUE 58330
58298: LD_INT 20
58300: DOUBLE
58301: EQUAL
58302: IFTRUE 58330
58304: LD_INT 21
58306: DOUBLE
58307: EQUAL
58308: IFTRUE 58330
58310: LD_INT 23
58312: DOUBLE
58313: EQUAL
58314: IFTRUE 58330
58316: LD_INT 24
58318: DOUBLE
58319: EQUAL
58320: IFTRUE 58330
58322: LD_INT 25
58324: DOUBLE
58325: EQUAL
58326: IFTRUE 58330
58328: GO 58386
58330: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58331: LD_ADDR_VAR 0 9
58335: PUSH
58336: LD_VAR 0 35
58340: PUSH
58341: LD_VAR 0 36
58345: PUSH
58346: LD_VAR 0 37
58350: PUSH
58351: LD_VAR 0 38
58355: PUSH
58356: LD_VAR 0 39
58360: PUSH
58361: LD_VAR 0 40
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: LIST
58372: LIST
58373: PUSH
58374: LD_VAR 0 4
58378: PUSH
58379: LD_INT 1
58381: PLUS
58382: ARRAY
58383: ST_TO_ADDR
58384: GO 58751
58386: LD_INT 6
58388: DOUBLE
58389: EQUAL
58390: IFTRUE 58442
58392: LD_INT 7
58394: DOUBLE
58395: EQUAL
58396: IFTRUE 58442
58398: LD_INT 8
58400: DOUBLE
58401: EQUAL
58402: IFTRUE 58442
58404: LD_INT 13
58406: DOUBLE
58407: EQUAL
58408: IFTRUE 58442
58410: LD_INT 12
58412: DOUBLE
58413: EQUAL
58414: IFTRUE 58442
58416: LD_INT 15
58418: DOUBLE
58419: EQUAL
58420: IFTRUE 58442
58422: LD_INT 11
58424: DOUBLE
58425: EQUAL
58426: IFTRUE 58442
58428: LD_INT 14
58430: DOUBLE
58431: EQUAL
58432: IFTRUE 58442
58434: LD_INT 10
58436: DOUBLE
58437: EQUAL
58438: IFTRUE 58442
58440: GO 58498
58442: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58443: LD_ADDR_VAR 0 9
58447: PUSH
58448: LD_VAR 0 41
58452: PUSH
58453: LD_VAR 0 42
58457: PUSH
58458: LD_VAR 0 43
58462: PUSH
58463: LD_VAR 0 44
58467: PUSH
58468: LD_VAR 0 45
58472: PUSH
58473: LD_VAR 0 46
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: PUSH
58486: LD_VAR 0 4
58490: PUSH
58491: LD_INT 1
58493: PLUS
58494: ARRAY
58495: ST_TO_ADDR
58496: GO 58751
58498: LD_INT 36
58500: DOUBLE
58501: EQUAL
58502: IFTRUE 58506
58504: GO 58562
58506: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58507: LD_ADDR_VAR 0 9
58511: PUSH
58512: LD_VAR 0 47
58516: PUSH
58517: LD_VAR 0 48
58521: PUSH
58522: LD_VAR 0 49
58526: PUSH
58527: LD_VAR 0 50
58531: PUSH
58532: LD_VAR 0 51
58536: PUSH
58537: LD_VAR 0 52
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: PUSH
58550: LD_VAR 0 4
58554: PUSH
58555: LD_INT 1
58557: PLUS
58558: ARRAY
58559: ST_TO_ADDR
58560: GO 58751
58562: LD_INT 4
58564: DOUBLE
58565: EQUAL
58566: IFTRUE 58588
58568: LD_INT 5
58570: DOUBLE
58571: EQUAL
58572: IFTRUE 58588
58574: LD_INT 34
58576: DOUBLE
58577: EQUAL
58578: IFTRUE 58588
58580: LD_INT 37
58582: DOUBLE
58583: EQUAL
58584: IFTRUE 58588
58586: GO 58644
58588: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58589: LD_ADDR_VAR 0 9
58593: PUSH
58594: LD_VAR 0 53
58598: PUSH
58599: LD_VAR 0 54
58603: PUSH
58604: LD_VAR 0 55
58608: PUSH
58609: LD_VAR 0 56
58613: PUSH
58614: LD_VAR 0 57
58618: PUSH
58619: LD_VAR 0 58
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: PUSH
58632: LD_VAR 0 4
58636: PUSH
58637: LD_INT 1
58639: PLUS
58640: ARRAY
58641: ST_TO_ADDR
58642: GO 58751
58644: LD_INT 31
58646: DOUBLE
58647: EQUAL
58648: IFTRUE 58694
58650: LD_INT 32
58652: DOUBLE
58653: EQUAL
58654: IFTRUE 58694
58656: LD_INT 33
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58694
58662: LD_INT 27
58664: DOUBLE
58665: EQUAL
58666: IFTRUE 58694
58668: LD_INT 26
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58694
58674: LD_INT 28
58676: DOUBLE
58677: EQUAL
58678: IFTRUE 58694
58680: LD_INT 29
58682: DOUBLE
58683: EQUAL
58684: IFTRUE 58694
58686: LD_INT 30
58688: DOUBLE
58689: EQUAL
58690: IFTRUE 58694
58692: GO 58750
58694: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58695: LD_ADDR_VAR 0 9
58699: PUSH
58700: LD_VAR 0 59
58704: PUSH
58705: LD_VAR 0 60
58709: PUSH
58710: LD_VAR 0 61
58714: PUSH
58715: LD_VAR 0 62
58719: PUSH
58720: LD_VAR 0 63
58724: PUSH
58725: LD_VAR 0 64
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: PUSH
58738: LD_VAR 0 4
58742: PUSH
58743: LD_INT 1
58745: PLUS
58746: ARRAY
58747: ST_TO_ADDR
58748: GO 58751
58750: POP
// temp_list2 = [ ] ;
58751: LD_ADDR_VAR 0 10
58755: PUSH
58756: EMPTY
58757: ST_TO_ADDR
// for i in temp_list do
58758: LD_ADDR_VAR 0 8
58762: PUSH
58763: LD_VAR 0 9
58767: PUSH
58768: FOR_IN
58769: IFFALSE 58821
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58771: LD_ADDR_VAR 0 10
58775: PUSH
58776: LD_VAR 0 10
58780: PUSH
58781: LD_VAR 0 8
58785: PUSH
58786: LD_INT 1
58788: ARRAY
58789: PUSH
58790: LD_VAR 0 2
58794: PLUS
58795: PUSH
58796: LD_VAR 0 8
58800: PUSH
58801: LD_INT 2
58803: ARRAY
58804: PUSH
58805: LD_VAR 0 3
58809: PLUS
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: EMPTY
58816: LIST
58817: ADD
58818: ST_TO_ADDR
58819: GO 58768
58821: POP
58822: POP
// result = temp_list2 ;
58823: LD_ADDR_VAR 0 7
58827: PUSH
58828: LD_VAR 0 10
58832: ST_TO_ADDR
// end ;
58833: LD_VAR 0 7
58837: RET
// export function EnemyInRange ( unit , dist ) ; begin
58838: LD_INT 0
58840: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58841: LD_ADDR_VAR 0 3
58845: PUSH
58846: LD_VAR 0 1
58850: PPUSH
58851: CALL_OW 255
58855: PPUSH
58856: LD_VAR 0 1
58860: PPUSH
58861: CALL_OW 250
58865: PPUSH
58866: LD_VAR 0 1
58870: PPUSH
58871: CALL_OW 251
58875: PPUSH
58876: LD_VAR 0 2
58880: PPUSH
58881: CALL 32234 0 4
58885: PUSH
58886: LD_INT 4
58888: ARRAY
58889: ST_TO_ADDR
// end ;
58890: LD_VAR 0 3
58894: RET
// export function PlayerSeeMe ( unit ) ; begin
58895: LD_INT 0
58897: PPUSH
// result := See ( your_side , unit ) ;
58898: LD_ADDR_VAR 0 2
58902: PUSH
58903: LD_OWVAR 2
58907: PPUSH
58908: LD_VAR 0 1
58912: PPUSH
58913: CALL_OW 292
58917: ST_TO_ADDR
// end ;
58918: LD_VAR 0 2
58922: RET
// export function ReverseDir ( unit ) ; begin
58923: LD_INT 0
58925: PPUSH
// if not unit then
58926: LD_VAR 0 1
58930: NOT
58931: IFFALSE 58935
// exit ;
58933: GO 58958
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58935: LD_ADDR_VAR 0 2
58939: PUSH
58940: LD_VAR 0 1
58944: PPUSH
58945: CALL_OW 254
58949: PUSH
58950: LD_INT 3
58952: PLUS
58953: PUSH
58954: LD_INT 6
58956: MOD
58957: ST_TO_ADDR
// end ;
58958: LD_VAR 0 2
58962: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58963: LD_INT 0
58965: PPUSH
58966: PPUSH
58967: PPUSH
58968: PPUSH
58969: PPUSH
// if not hexes then
58970: LD_VAR 0 2
58974: NOT
58975: IFFALSE 58979
// exit ;
58977: GO 59127
// dist := 9999 ;
58979: LD_ADDR_VAR 0 5
58983: PUSH
58984: LD_INT 9999
58986: ST_TO_ADDR
// for i = 1 to hexes do
58987: LD_ADDR_VAR 0 4
58991: PUSH
58992: DOUBLE
58993: LD_INT 1
58995: DEC
58996: ST_TO_ADDR
58997: LD_VAR 0 2
59001: PUSH
59002: FOR_TO
59003: IFFALSE 59115
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59005: LD_VAR 0 1
59009: PPUSH
59010: LD_VAR 0 2
59014: PUSH
59015: LD_VAR 0 4
59019: ARRAY
59020: PUSH
59021: LD_INT 1
59023: ARRAY
59024: PPUSH
59025: LD_VAR 0 2
59029: PUSH
59030: LD_VAR 0 4
59034: ARRAY
59035: PUSH
59036: LD_INT 2
59038: ARRAY
59039: PPUSH
59040: CALL_OW 297
59044: PUSH
59045: LD_VAR 0 5
59049: LESS
59050: IFFALSE 59113
// begin hex := hexes [ i ] ;
59052: LD_ADDR_VAR 0 7
59056: PUSH
59057: LD_VAR 0 2
59061: PUSH
59062: LD_VAR 0 4
59066: ARRAY
59067: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59068: LD_ADDR_VAR 0 5
59072: PUSH
59073: LD_VAR 0 1
59077: PPUSH
59078: LD_VAR 0 2
59082: PUSH
59083: LD_VAR 0 4
59087: ARRAY
59088: PUSH
59089: LD_INT 1
59091: ARRAY
59092: PPUSH
59093: LD_VAR 0 2
59097: PUSH
59098: LD_VAR 0 4
59102: ARRAY
59103: PUSH
59104: LD_INT 2
59106: ARRAY
59107: PPUSH
59108: CALL_OW 297
59112: ST_TO_ADDR
// end ; end ;
59113: GO 59002
59115: POP
59116: POP
// result := hex ;
59117: LD_ADDR_VAR 0 3
59121: PUSH
59122: LD_VAR 0 7
59126: ST_TO_ADDR
// end ;
59127: LD_VAR 0 3
59131: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59132: LD_INT 0
59134: PPUSH
59135: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59136: LD_VAR 0 1
59140: NOT
59141: PUSH
59142: LD_VAR 0 1
59146: PUSH
59147: LD_INT 21
59149: PUSH
59150: LD_INT 2
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 23
59159: PUSH
59160: LD_INT 2
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PPUSH
59171: CALL_OW 69
59175: IN
59176: NOT
59177: OR
59178: IFFALSE 59182
// exit ;
59180: GO 59229
// for i = 1 to 3 do
59182: LD_ADDR_VAR 0 3
59186: PUSH
59187: DOUBLE
59188: LD_INT 1
59190: DEC
59191: ST_TO_ADDR
59192: LD_INT 3
59194: PUSH
59195: FOR_TO
59196: IFFALSE 59227
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59198: LD_VAR 0 1
59202: PPUSH
59203: CALL_OW 250
59207: PPUSH
59208: LD_VAR 0 1
59212: PPUSH
59213: CALL_OW 251
59217: PPUSH
59218: LD_INT 1
59220: PPUSH
59221: CALL_OW 453
59225: GO 59195
59227: POP
59228: POP
// end ;
59229: LD_VAR 0 2
59233: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59234: LD_INT 0
59236: PPUSH
59237: PPUSH
59238: PPUSH
59239: PPUSH
59240: PPUSH
59241: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59242: LD_VAR 0 1
59246: NOT
59247: PUSH
59248: LD_VAR 0 2
59252: NOT
59253: OR
59254: PUSH
59255: LD_VAR 0 1
59259: PPUSH
59260: CALL_OW 314
59264: OR
59265: IFFALSE 59269
// exit ;
59267: GO 59710
// x := GetX ( enemy_unit ) ;
59269: LD_ADDR_VAR 0 7
59273: PUSH
59274: LD_VAR 0 2
59278: PPUSH
59279: CALL_OW 250
59283: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59284: LD_ADDR_VAR 0 8
59288: PUSH
59289: LD_VAR 0 2
59293: PPUSH
59294: CALL_OW 251
59298: ST_TO_ADDR
// if not x or not y then
59299: LD_VAR 0 7
59303: NOT
59304: PUSH
59305: LD_VAR 0 8
59309: NOT
59310: OR
59311: IFFALSE 59315
// exit ;
59313: GO 59710
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59315: LD_ADDR_VAR 0 6
59319: PUSH
59320: LD_VAR 0 7
59324: PPUSH
59325: LD_INT 0
59327: PPUSH
59328: LD_INT 4
59330: PPUSH
59331: CALL_OW 272
59335: PUSH
59336: LD_VAR 0 8
59340: PPUSH
59341: LD_INT 0
59343: PPUSH
59344: LD_INT 4
59346: PPUSH
59347: CALL_OW 273
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_VAR 0 7
59360: PPUSH
59361: LD_INT 1
59363: PPUSH
59364: LD_INT 4
59366: PPUSH
59367: CALL_OW 272
59371: PUSH
59372: LD_VAR 0 8
59376: PPUSH
59377: LD_INT 1
59379: PPUSH
59380: LD_INT 4
59382: PPUSH
59383: CALL_OW 273
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: PUSH
59392: LD_VAR 0 7
59396: PPUSH
59397: LD_INT 2
59399: PPUSH
59400: LD_INT 4
59402: PPUSH
59403: CALL_OW 272
59407: PUSH
59408: LD_VAR 0 8
59412: PPUSH
59413: LD_INT 2
59415: PPUSH
59416: LD_INT 4
59418: PPUSH
59419: CALL_OW 273
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_VAR 0 7
59432: PPUSH
59433: LD_INT 3
59435: PPUSH
59436: LD_INT 4
59438: PPUSH
59439: CALL_OW 272
59443: PUSH
59444: LD_VAR 0 8
59448: PPUSH
59449: LD_INT 3
59451: PPUSH
59452: LD_INT 4
59454: PPUSH
59455: CALL_OW 273
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_VAR 0 7
59468: PPUSH
59469: LD_INT 4
59471: PPUSH
59472: LD_INT 4
59474: PPUSH
59475: CALL_OW 272
59479: PUSH
59480: LD_VAR 0 8
59484: PPUSH
59485: LD_INT 4
59487: PPUSH
59488: LD_INT 4
59490: PPUSH
59491: CALL_OW 273
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_VAR 0 7
59504: PPUSH
59505: LD_INT 5
59507: PPUSH
59508: LD_INT 4
59510: PPUSH
59511: CALL_OW 272
59515: PUSH
59516: LD_VAR 0 8
59520: PPUSH
59521: LD_INT 5
59523: PPUSH
59524: LD_INT 4
59526: PPUSH
59527: CALL_OW 273
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: ST_TO_ADDR
// for i = tmp downto 1 do
59544: LD_ADDR_VAR 0 4
59548: PUSH
59549: DOUBLE
59550: LD_VAR 0 6
59554: INC
59555: ST_TO_ADDR
59556: LD_INT 1
59558: PUSH
59559: FOR_DOWNTO
59560: IFFALSE 59661
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59562: LD_VAR 0 6
59566: PUSH
59567: LD_VAR 0 4
59571: ARRAY
59572: PUSH
59573: LD_INT 1
59575: ARRAY
59576: PPUSH
59577: LD_VAR 0 6
59581: PUSH
59582: LD_VAR 0 4
59586: ARRAY
59587: PUSH
59588: LD_INT 2
59590: ARRAY
59591: PPUSH
59592: CALL_OW 488
59596: NOT
59597: PUSH
59598: LD_VAR 0 6
59602: PUSH
59603: LD_VAR 0 4
59607: ARRAY
59608: PUSH
59609: LD_INT 1
59611: ARRAY
59612: PPUSH
59613: LD_VAR 0 6
59617: PUSH
59618: LD_VAR 0 4
59622: ARRAY
59623: PUSH
59624: LD_INT 2
59626: ARRAY
59627: PPUSH
59628: CALL_OW 428
59632: PUSH
59633: LD_INT 0
59635: NONEQUAL
59636: OR
59637: IFFALSE 59659
// tmp := Delete ( tmp , i ) ;
59639: LD_ADDR_VAR 0 6
59643: PUSH
59644: LD_VAR 0 6
59648: PPUSH
59649: LD_VAR 0 4
59653: PPUSH
59654: CALL_OW 3
59658: ST_TO_ADDR
59659: GO 59559
59661: POP
59662: POP
// j := GetClosestHex ( unit , tmp ) ;
59663: LD_ADDR_VAR 0 5
59667: PUSH
59668: LD_VAR 0 1
59672: PPUSH
59673: LD_VAR 0 6
59677: PPUSH
59678: CALL 58963 0 2
59682: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59683: LD_VAR 0 1
59687: PPUSH
59688: LD_VAR 0 5
59692: PUSH
59693: LD_INT 1
59695: ARRAY
59696: PPUSH
59697: LD_VAR 0 5
59701: PUSH
59702: LD_INT 2
59704: ARRAY
59705: PPUSH
59706: CALL_OW 111
// end ;
59710: LD_VAR 0 3
59714: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59715: LD_INT 0
59717: PPUSH
59718: PPUSH
59719: PPUSH
// uc_side = 0 ;
59720: LD_ADDR_OWVAR 20
59724: PUSH
59725: LD_INT 0
59727: ST_TO_ADDR
// uc_nation = 0 ;
59728: LD_ADDR_OWVAR 21
59732: PUSH
59733: LD_INT 0
59735: ST_TO_ADDR
// InitHc_All ( ) ;
59736: CALL_OW 584
// InitVc ;
59740: CALL_OW 20
// if mastodonts then
59744: LD_VAR 0 6
59748: IFFALSE 59815
// for i = 1 to mastodonts do
59750: LD_ADDR_VAR 0 11
59754: PUSH
59755: DOUBLE
59756: LD_INT 1
59758: DEC
59759: ST_TO_ADDR
59760: LD_VAR 0 6
59764: PUSH
59765: FOR_TO
59766: IFFALSE 59813
// begin vc_chassis := 31 ;
59768: LD_ADDR_OWVAR 37
59772: PUSH
59773: LD_INT 31
59775: ST_TO_ADDR
// vc_control := control_rider ;
59776: LD_ADDR_OWVAR 38
59780: PUSH
59781: LD_INT 4
59783: ST_TO_ADDR
// animal := CreateVehicle ;
59784: LD_ADDR_VAR 0 12
59788: PUSH
59789: CALL_OW 45
59793: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59794: LD_VAR 0 12
59798: PPUSH
59799: LD_VAR 0 8
59803: PPUSH
59804: LD_INT 0
59806: PPUSH
59807: CALL 62003 0 3
// end ;
59811: GO 59765
59813: POP
59814: POP
// if horses then
59815: LD_VAR 0 5
59819: IFFALSE 59886
// for i = 1 to horses do
59821: LD_ADDR_VAR 0 11
59825: PUSH
59826: DOUBLE
59827: LD_INT 1
59829: DEC
59830: ST_TO_ADDR
59831: LD_VAR 0 5
59835: PUSH
59836: FOR_TO
59837: IFFALSE 59884
// begin hc_class := 21 ;
59839: LD_ADDR_OWVAR 28
59843: PUSH
59844: LD_INT 21
59846: ST_TO_ADDR
// hc_gallery :=  ;
59847: LD_ADDR_OWVAR 33
59851: PUSH
59852: LD_STRING 
59854: ST_TO_ADDR
// animal := CreateHuman ;
59855: LD_ADDR_VAR 0 12
59859: PUSH
59860: CALL_OW 44
59864: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59865: LD_VAR 0 12
59869: PPUSH
59870: LD_VAR 0 8
59874: PPUSH
59875: LD_INT 0
59877: PPUSH
59878: CALL 62003 0 3
// end ;
59882: GO 59836
59884: POP
59885: POP
// if birds then
59886: LD_VAR 0 1
59890: IFFALSE 59957
// for i = 1 to birds do
59892: LD_ADDR_VAR 0 11
59896: PUSH
59897: DOUBLE
59898: LD_INT 1
59900: DEC
59901: ST_TO_ADDR
59902: LD_VAR 0 1
59906: PUSH
59907: FOR_TO
59908: IFFALSE 59955
// begin hc_class = 18 ;
59910: LD_ADDR_OWVAR 28
59914: PUSH
59915: LD_INT 18
59917: ST_TO_ADDR
// hc_gallery =  ;
59918: LD_ADDR_OWVAR 33
59922: PUSH
59923: LD_STRING 
59925: ST_TO_ADDR
// animal := CreateHuman ;
59926: LD_ADDR_VAR 0 12
59930: PUSH
59931: CALL_OW 44
59935: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59936: LD_VAR 0 12
59940: PPUSH
59941: LD_VAR 0 8
59945: PPUSH
59946: LD_INT 0
59948: PPUSH
59949: CALL 62003 0 3
// end ;
59953: GO 59907
59955: POP
59956: POP
// if tigers then
59957: LD_VAR 0 2
59961: IFFALSE 60045
// for i = 1 to tigers do
59963: LD_ADDR_VAR 0 11
59967: PUSH
59968: DOUBLE
59969: LD_INT 1
59971: DEC
59972: ST_TO_ADDR
59973: LD_VAR 0 2
59977: PUSH
59978: FOR_TO
59979: IFFALSE 60043
// begin hc_class = class_tiger ;
59981: LD_ADDR_OWVAR 28
59985: PUSH
59986: LD_INT 14
59988: ST_TO_ADDR
// hc_gallery =  ;
59989: LD_ADDR_OWVAR 33
59993: PUSH
59994: LD_STRING 
59996: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59997: LD_ADDR_OWVAR 35
60001: PUSH
60002: LD_INT 7
60004: NEG
60005: PPUSH
60006: LD_INT 7
60008: PPUSH
60009: CALL_OW 12
60013: ST_TO_ADDR
// animal := CreateHuman ;
60014: LD_ADDR_VAR 0 12
60018: PUSH
60019: CALL_OW 44
60023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60024: LD_VAR 0 12
60028: PPUSH
60029: LD_VAR 0 8
60033: PPUSH
60034: LD_INT 0
60036: PPUSH
60037: CALL 62003 0 3
// end ;
60041: GO 59978
60043: POP
60044: POP
// if apemans then
60045: LD_VAR 0 3
60049: IFFALSE 60172
// for i = 1 to apemans do
60051: LD_ADDR_VAR 0 11
60055: PUSH
60056: DOUBLE
60057: LD_INT 1
60059: DEC
60060: ST_TO_ADDR
60061: LD_VAR 0 3
60065: PUSH
60066: FOR_TO
60067: IFFALSE 60170
// begin hc_class = class_apeman ;
60069: LD_ADDR_OWVAR 28
60073: PUSH
60074: LD_INT 12
60076: ST_TO_ADDR
// hc_gallery =  ;
60077: LD_ADDR_OWVAR 33
60081: PUSH
60082: LD_STRING 
60084: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60085: LD_ADDR_OWVAR 35
60089: PUSH
60090: LD_INT 2
60092: NEG
60093: PPUSH
60094: LD_INT 2
60096: PPUSH
60097: CALL_OW 12
60101: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60102: LD_ADDR_OWVAR 31
60106: PUSH
60107: LD_INT 1
60109: PPUSH
60110: LD_INT 3
60112: PPUSH
60113: CALL_OW 12
60117: PUSH
60118: LD_INT 1
60120: PPUSH
60121: LD_INT 3
60123: PPUSH
60124: CALL_OW 12
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: ST_TO_ADDR
// animal := CreateHuman ;
60141: LD_ADDR_VAR 0 12
60145: PUSH
60146: CALL_OW 44
60150: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60151: LD_VAR 0 12
60155: PPUSH
60156: LD_VAR 0 8
60160: PPUSH
60161: LD_INT 0
60163: PPUSH
60164: CALL 62003 0 3
// end ;
60168: GO 60066
60170: POP
60171: POP
// if enchidnas then
60172: LD_VAR 0 4
60176: IFFALSE 60243
// for i = 1 to enchidnas do
60178: LD_ADDR_VAR 0 11
60182: PUSH
60183: DOUBLE
60184: LD_INT 1
60186: DEC
60187: ST_TO_ADDR
60188: LD_VAR 0 4
60192: PUSH
60193: FOR_TO
60194: IFFALSE 60241
// begin hc_class = 13 ;
60196: LD_ADDR_OWVAR 28
60200: PUSH
60201: LD_INT 13
60203: ST_TO_ADDR
// hc_gallery =  ;
60204: LD_ADDR_OWVAR 33
60208: PUSH
60209: LD_STRING 
60211: ST_TO_ADDR
// animal := CreateHuman ;
60212: LD_ADDR_VAR 0 12
60216: PUSH
60217: CALL_OW 44
60221: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60222: LD_VAR 0 12
60226: PPUSH
60227: LD_VAR 0 8
60231: PPUSH
60232: LD_INT 0
60234: PPUSH
60235: CALL 62003 0 3
// end ;
60239: GO 60193
60241: POP
60242: POP
// if fishes then
60243: LD_VAR 0 7
60247: IFFALSE 60314
// for i = 1 to fishes do
60249: LD_ADDR_VAR 0 11
60253: PUSH
60254: DOUBLE
60255: LD_INT 1
60257: DEC
60258: ST_TO_ADDR
60259: LD_VAR 0 7
60263: PUSH
60264: FOR_TO
60265: IFFALSE 60312
// begin hc_class = 20 ;
60267: LD_ADDR_OWVAR 28
60271: PUSH
60272: LD_INT 20
60274: ST_TO_ADDR
// hc_gallery =  ;
60275: LD_ADDR_OWVAR 33
60279: PUSH
60280: LD_STRING 
60282: ST_TO_ADDR
// animal := CreateHuman ;
60283: LD_ADDR_VAR 0 12
60287: PUSH
60288: CALL_OW 44
60292: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60293: LD_VAR 0 12
60297: PPUSH
60298: LD_VAR 0 9
60302: PPUSH
60303: LD_INT 0
60305: PPUSH
60306: CALL 62003 0 3
// end ;
60310: GO 60264
60312: POP
60313: POP
// end ;
60314: LD_VAR 0 10
60318: RET
// export function WantHeal ( sci , unit ) ; begin
60319: LD_INT 0
60321: PPUSH
// if GetTaskList ( sci ) > 0 then
60322: LD_VAR 0 1
60326: PPUSH
60327: CALL_OW 437
60331: PUSH
60332: LD_INT 0
60334: GREATER
60335: IFFALSE 60405
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60337: LD_VAR 0 1
60341: PPUSH
60342: CALL_OW 437
60346: PUSH
60347: LD_INT 1
60349: ARRAY
60350: PUSH
60351: LD_INT 1
60353: ARRAY
60354: PUSH
60355: LD_STRING l
60357: EQUAL
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: CALL_OW 437
60368: PUSH
60369: LD_INT 1
60371: ARRAY
60372: PUSH
60373: LD_INT 4
60375: ARRAY
60376: PUSH
60377: LD_VAR 0 2
60381: EQUAL
60382: AND
60383: IFFALSE 60395
// result := true else
60385: LD_ADDR_VAR 0 3
60389: PUSH
60390: LD_INT 1
60392: ST_TO_ADDR
60393: GO 60403
// result := false ;
60395: LD_ADDR_VAR 0 3
60399: PUSH
60400: LD_INT 0
60402: ST_TO_ADDR
// end else
60403: GO 60413
// result := false ;
60405: LD_ADDR_VAR 0 3
60409: PUSH
60410: LD_INT 0
60412: ST_TO_ADDR
// end ;
60413: LD_VAR 0 3
60417: RET
// export function HealTarget ( sci ) ; begin
60418: LD_INT 0
60420: PPUSH
// if not sci then
60421: LD_VAR 0 1
60425: NOT
60426: IFFALSE 60430
// exit ;
60428: GO 60495
// result := 0 ;
60430: LD_ADDR_VAR 0 2
60434: PUSH
60435: LD_INT 0
60437: ST_TO_ADDR
// if GetTaskList ( sci ) then
60438: LD_VAR 0 1
60442: PPUSH
60443: CALL_OW 437
60447: IFFALSE 60495
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60449: LD_VAR 0 1
60453: PPUSH
60454: CALL_OW 437
60458: PUSH
60459: LD_INT 1
60461: ARRAY
60462: PUSH
60463: LD_INT 1
60465: ARRAY
60466: PUSH
60467: LD_STRING l
60469: EQUAL
60470: IFFALSE 60495
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60472: LD_ADDR_VAR 0 2
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 437
60486: PUSH
60487: LD_INT 1
60489: ARRAY
60490: PUSH
60491: LD_INT 4
60493: ARRAY
60494: ST_TO_ADDR
// end ;
60495: LD_VAR 0 2
60499: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60500: LD_INT 0
60502: PPUSH
60503: PPUSH
60504: PPUSH
60505: PPUSH
// if not base_units then
60506: LD_VAR 0 1
60510: NOT
60511: IFFALSE 60515
// exit ;
60513: GO 60602
// result := false ;
60515: LD_ADDR_VAR 0 2
60519: PUSH
60520: LD_INT 0
60522: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60523: LD_ADDR_VAR 0 5
60527: PUSH
60528: LD_VAR 0 1
60532: PPUSH
60533: LD_INT 21
60535: PUSH
60536: LD_INT 3
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PPUSH
60543: CALL_OW 72
60547: ST_TO_ADDR
// if not tmp then
60548: LD_VAR 0 5
60552: NOT
60553: IFFALSE 60557
// exit ;
60555: GO 60602
// for i in tmp do
60557: LD_ADDR_VAR 0 3
60561: PUSH
60562: LD_VAR 0 5
60566: PUSH
60567: FOR_IN
60568: IFFALSE 60600
// begin result := EnemyInRange ( i , 22 ) ;
60570: LD_ADDR_VAR 0 2
60574: PUSH
60575: LD_VAR 0 3
60579: PPUSH
60580: LD_INT 22
60582: PPUSH
60583: CALL 58838 0 2
60587: ST_TO_ADDR
// if result then
60588: LD_VAR 0 2
60592: IFFALSE 60598
// exit ;
60594: POP
60595: POP
60596: GO 60602
// end ;
60598: GO 60567
60600: POP
60601: POP
// end ;
60602: LD_VAR 0 2
60606: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60607: LD_INT 0
60609: PPUSH
60610: PPUSH
// if not units then
60611: LD_VAR 0 1
60615: NOT
60616: IFFALSE 60620
// exit ;
60618: GO 60690
// result := [ ] ;
60620: LD_ADDR_VAR 0 3
60624: PUSH
60625: EMPTY
60626: ST_TO_ADDR
// for i in units do
60627: LD_ADDR_VAR 0 4
60631: PUSH
60632: LD_VAR 0 1
60636: PUSH
60637: FOR_IN
60638: IFFALSE 60688
// if GetTag ( i ) = tag then
60640: LD_VAR 0 4
60644: PPUSH
60645: CALL_OW 110
60649: PUSH
60650: LD_VAR 0 2
60654: EQUAL
60655: IFFALSE 60686
// result := Replace ( result , result + 1 , i ) ;
60657: LD_ADDR_VAR 0 3
60661: PUSH
60662: LD_VAR 0 3
60666: PPUSH
60667: LD_VAR 0 3
60671: PUSH
60672: LD_INT 1
60674: PLUS
60675: PPUSH
60676: LD_VAR 0 4
60680: PPUSH
60681: CALL_OW 1
60685: ST_TO_ADDR
60686: GO 60637
60688: POP
60689: POP
// end ;
60690: LD_VAR 0 3
60694: RET
// export function IsDriver ( un ) ; begin
60695: LD_INT 0
60697: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60698: LD_ADDR_VAR 0 2
60702: PUSH
60703: LD_VAR 0 1
60707: PUSH
60708: LD_INT 55
60710: PUSH
60711: EMPTY
60712: LIST
60713: PPUSH
60714: CALL_OW 69
60718: IN
60719: ST_TO_ADDR
// end ;
60720: LD_VAR 0 2
60724: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60725: LD_INT 0
60727: PPUSH
60728: PPUSH
// list := [ ] ;
60729: LD_ADDR_VAR 0 5
60733: PUSH
60734: EMPTY
60735: ST_TO_ADDR
// case d of 0 :
60736: LD_VAR 0 3
60740: PUSH
60741: LD_INT 0
60743: DOUBLE
60744: EQUAL
60745: IFTRUE 60749
60747: GO 60882
60749: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60750: LD_ADDR_VAR 0 5
60754: PUSH
60755: LD_VAR 0 1
60759: PUSH
60760: LD_INT 4
60762: MINUS
60763: PUSH
60764: LD_VAR 0 2
60768: PUSH
60769: LD_INT 4
60771: MINUS
60772: PUSH
60773: LD_INT 2
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: PUSH
60781: LD_VAR 0 1
60785: PUSH
60786: LD_INT 3
60788: MINUS
60789: PUSH
60790: LD_VAR 0 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: LIST
60802: PUSH
60803: LD_VAR 0 1
60807: PUSH
60808: LD_INT 4
60810: PLUS
60811: PUSH
60812: LD_VAR 0 2
60816: PUSH
60817: LD_INT 4
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: LIST
60824: PUSH
60825: LD_VAR 0 1
60829: PUSH
60830: LD_INT 3
60832: PLUS
60833: PUSH
60834: LD_VAR 0 2
60838: PUSH
60839: LD_INT 3
60841: PLUS
60842: PUSH
60843: LD_INT 5
60845: PUSH
60846: EMPTY
60847: LIST
60848: LIST
60849: LIST
60850: PUSH
60851: LD_VAR 0 1
60855: PUSH
60856: LD_VAR 0 2
60860: PUSH
60861: LD_INT 4
60863: PLUS
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: ST_TO_ADDR
// end ; 1 :
60880: GO 61580
60882: LD_INT 1
60884: DOUBLE
60885: EQUAL
60886: IFTRUE 60890
60888: GO 61023
60890: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60891: LD_ADDR_VAR 0 5
60895: PUSH
60896: LD_VAR 0 1
60900: PUSH
60901: LD_VAR 0 2
60905: PUSH
60906: LD_INT 4
60908: MINUS
60909: PUSH
60910: LD_INT 3
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: LIST
60917: PUSH
60918: LD_VAR 0 1
60922: PUSH
60923: LD_INT 3
60925: MINUS
60926: PUSH
60927: LD_VAR 0 2
60931: PUSH
60932: LD_INT 3
60934: MINUS
60935: PUSH
60936: LD_INT 2
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: PUSH
60944: LD_VAR 0 1
60948: PUSH
60949: LD_INT 4
60951: MINUS
60952: PUSH
60953: LD_VAR 0 2
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: LIST
60965: PUSH
60966: LD_VAR 0 1
60970: PUSH
60971: LD_VAR 0 2
60975: PUSH
60976: LD_INT 3
60978: PLUS
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: PUSH
60988: LD_VAR 0 1
60992: PUSH
60993: LD_INT 4
60995: PLUS
60996: PUSH
60997: LD_VAR 0 2
61001: PUSH
61002: LD_INT 4
61004: PLUS
61005: PUSH
61006: LD_INT 5
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: LIST
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: ST_TO_ADDR
// end ; 2 :
61021: GO 61580
61023: LD_INT 2
61025: DOUBLE
61026: EQUAL
61027: IFTRUE 61031
61029: GO 61160
61031: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61032: LD_ADDR_VAR 0 5
61036: PUSH
61037: LD_VAR 0 1
61041: PUSH
61042: LD_VAR 0 2
61046: PUSH
61047: LD_INT 3
61049: MINUS
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: LIST
61058: PUSH
61059: LD_VAR 0 1
61063: PUSH
61064: LD_INT 4
61066: PLUS
61067: PUSH
61068: LD_VAR 0 2
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: PUSH
61081: LD_VAR 0 1
61085: PUSH
61086: LD_VAR 0 2
61090: PUSH
61091: LD_INT 4
61093: PLUS
61094: PUSH
61095: LD_INT 0
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: LIST
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_INT 3
61110: MINUS
61111: PUSH
61112: LD_VAR 0 2
61116: PUSH
61117: LD_INT 1
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: PUSH
61125: LD_VAR 0 1
61129: PUSH
61130: LD_INT 4
61132: MINUS
61133: PUSH
61134: LD_VAR 0 2
61138: PUSH
61139: LD_INT 4
61141: MINUS
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// end ; 3 :
61158: GO 61580
61160: LD_INT 3
61162: DOUBLE
61163: EQUAL
61164: IFTRUE 61168
61166: GO 61301
61168: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61169: LD_ADDR_VAR 0 5
61173: PUSH
61174: LD_VAR 0 1
61178: PUSH
61179: LD_INT 3
61181: PLUS
61182: PUSH
61183: LD_VAR 0 2
61187: PUSH
61188: LD_INT 4
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: LIST
61195: PUSH
61196: LD_VAR 0 1
61200: PUSH
61201: LD_INT 4
61203: PLUS
61204: PUSH
61205: LD_VAR 0 2
61209: PUSH
61210: LD_INT 4
61212: PLUS
61213: PUSH
61214: LD_INT 5
61216: PUSH
61217: EMPTY
61218: LIST
61219: LIST
61220: LIST
61221: PUSH
61222: LD_VAR 0 1
61226: PUSH
61227: LD_INT 4
61229: MINUS
61230: PUSH
61231: LD_VAR 0 2
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: LIST
61243: PUSH
61244: LD_VAR 0 1
61248: PUSH
61249: LD_VAR 0 2
61253: PUSH
61254: LD_INT 4
61256: MINUS
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: LIST
61265: PUSH
61266: LD_VAR 0 1
61270: PUSH
61271: LD_INT 3
61273: MINUS
61274: PUSH
61275: LD_VAR 0 2
61279: PUSH
61280: LD_INT 3
61282: MINUS
61283: PUSH
61284: LD_INT 2
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: LIST
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: ST_TO_ADDR
// end ; 4 :
61299: GO 61580
61301: LD_INT 4
61303: DOUBLE
61304: EQUAL
61305: IFTRUE 61309
61307: GO 61442
61309: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61310: LD_ADDR_VAR 0 5
61314: PUSH
61315: LD_VAR 0 1
61319: PUSH
61320: LD_VAR 0 2
61324: PUSH
61325: LD_INT 4
61327: PLUS
61328: PUSH
61329: LD_INT 0
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: PUSH
61337: LD_VAR 0 1
61341: PUSH
61342: LD_INT 3
61344: PLUS
61345: PUSH
61346: LD_VAR 0 2
61350: PUSH
61351: LD_INT 3
61353: PLUS
61354: PUSH
61355: LD_INT 5
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: LIST
61362: PUSH
61363: LD_VAR 0 1
61367: PUSH
61368: LD_INT 4
61370: PLUS
61371: PUSH
61372: LD_VAR 0 2
61376: PUSH
61377: LD_INT 4
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: LIST
61384: PUSH
61385: LD_VAR 0 1
61389: PUSH
61390: LD_VAR 0 2
61394: PUSH
61395: LD_INT 3
61397: MINUS
61398: PUSH
61399: LD_INT 3
61401: PUSH
61402: EMPTY
61403: LIST
61404: LIST
61405: LIST
61406: PUSH
61407: LD_VAR 0 1
61411: PUSH
61412: LD_INT 4
61414: MINUS
61415: PUSH
61416: LD_VAR 0 2
61420: PUSH
61421: LD_INT 4
61423: MINUS
61424: PUSH
61425: LD_INT 2
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: LIST
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: LIST
61437: LIST
61438: LIST
61439: ST_TO_ADDR
// end ; 5 :
61440: GO 61580
61442: LD_INT 5
61444: DOUBLE
61445: EQUAL
61446: IFTRUE 61450
61448: GO 61579
61450: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61451: LD_ADDR_VAR 0 5
61455: PUSH
61456: LD_VAR 0 1
61460: PUSH
61461: LD_INT 4
61463: MINUS
61464: PUSH
61465: LD_VAR 0 2
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: LIST
61477: PUSH
61478: LD_VAR 0 1
61482: PUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_INT 4
61490: MINUS
61491: PUSH
61492: LD_INT 3
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: LIST
61499: PUSH
61500: LD_VAR 0 1
61504: PUSH
61505: LD_INT 4
61507: PLUS
61508: PUSH
61509: LD_VAR 0 2
61513: PUSH
61514: LD_INT 4
61516: PLUS
61517: PUSH
61518: LD_INT 5
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: LIST
61525: PUSH
61526: LD_VAR 0 1
61530: PUSH
61531: LD_INT 3
61533: PLUS
61534: PUSH
61535: LD_VAR 0 2
61539: PUSH
61540: LD_INT 4
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: LIST
61547: PUSH
61548: LD_VAR 0 1
61552: PUSH
61553: LD_VAR 0 2
61557: PUSH
61558: LD_INT 3
61560: PLUS
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: ST_TO_ADDR
// end ; end ;
61577: GO 61580
61579: POP
// result := list ;
61580: LD_ADDR_VAR 0 4
61584: PUSH
61585: LD_VAR 0 5
61589: ST_TO_ADDR
// end ;
61590: LD_VAR 0 4
61594: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61595: LD_INT 0
61597: PPUSH
61598: PPUSH
61599: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61600: LD_VAR 0 1
61604: NOT
61605: PUSH
61606: LD_VAR 0 2
61610: PUSH
61611: LD_INT 1
61613: PUSH
61614: LD_INT 2
61616: PUSH
61617: LD_INT 3
61619: PUSH
61620: LD_INT 4
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: IN
61629: NOT
61630: OR
61631: IFFALSE 61635
// exit ;
61633: GO 61727
// tmp := [ ] ;
61635: LD_ADDR_VAR 0 5
61639: PUSH
61640: EMPTY
61641: ST_TO_ADDR
// for i in units do
61642: LD_ADDR_VAR 0 4
61646: PUSH
61647: LD_VAR 0 1
61651: PUSH
61652: FOR_IN
61653: IFFALSE 61696
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61655: LD_ADDR_VAR 0 5
61659: PUSH
61660: LD_VAR 0 5
61664: PPUSH
61665: LD_VAR 0 5
61669: PUSH
61670: LD_INT 1
61672: PLUS
61673: PPUSH
61674: LD_VAR 0 4
61678: PPUSH
61679: LD_VAR 0 2
61683: PPUSH
61684: CALL_OW 259
61688: PPUSH
61689: CALL_OW 2
61693: ST_TO_ADDR
61694: GO 61652
61696: POP
61697: POP
// if not tmp then
61698: LD_VAR 0 5
61702: NOT
61703: IFFALSE 61707
// exit ;
61705: GO 61727
// result := SortListByListDesc ( units , tmp ) ;
61707: LD_ADDR_VAR 0 3
61711: PUSH
61712: LD_VAR 0 1
61716: PPUSH
61717: LD_VAR 0 5
61721: PPUSH
61722: CALL_OW 77
61726: ST_TO_ADDR
// end ;
61727: LD_VAR 0 3
61731: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61732: LD_INT 0
61734: PPUSH
61735: PPUSH
61736: PPUSH
// result := false ;
61737: LD_ADDR_VAR 0 3
61741: PUSH
61742: LD_INT 0
61744: ST_TO_ADDR
// x := GetX ( building ) ;
61745: LD_ADDR_VAR 0 4
61749: PUSH
61750: LD_VAR 0 2
61754: PPUSH
61755: CALL_OW 250
61759: ST_TO_ADDR
// y := GetY ( building ) ;
61760: LD_ADDR_VAR 0 5
61764: PUSH
61765: LD_VAR 0 2
61769: PPUSH
61770: CALL_OW 251
61774: ST_TO_ADDR
// if not building or not x or not y then
61775: LD_VAR 0 2
61779: NOT
61780: PUSH
61781: LD_VAR 0 4
61785: NOT
61786: OR
61787: PUSH
61788: LD_VAR 0 5
61792: NOT
61793: OR
61794: IFFALSE 61798
// exit ;
61796: GO 61890
// if GetTaskList ( unit ) then
61798: LD_VAR 0 1
61802: PPUSH
61803: CALL_OW 437
61807: IFFALSE 61890
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61809: LD_STRING e
61811: PUSH
61812: LD_VAR 0 1
61816: PPUSH
61817: CALL_OW 437
61821: PUSH
61822: LD_INT 1
61824: ARRAY
61825: PUSH
61826: LD_INT 1
61828: ARRAY
61829: EQUAL
61830: PUSH
61831: LD_VAR 0 4
61835: PUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 437
61845: PUSH
61846: LD_INT 1
61848: ARRAY
61849: PUSH
61850: LD_INT 2
61852: ARRAY
61853: EQUAL
61854: AND
61855: PUSH
61856: LD_VAR 0 5
61860: PUSH
61861: LD_VAR 0 1
61865: PPUSH
61866: CALL_OW 437
61870: PUSH
61871: LD_INT 1
61873: ARRAY
61874: PUSH
61875: LD_INT 3
61877: ARRAY
61878: EQUAL
61879: AND
61880: IFFALSE 61890
// result := true end ;
61882: LD_ADDR_VAR 0 3
61886: PUSH
61887: LD_INT 1
61889: ST_TO_ADDR
// end ;
61890: LD_VAR 0 3
61894: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61895: LD_INT 0
61897: PPUSH
// result := false ;
61898: LD_ADDR_VAR 0 4
61902: PUSH
61903: LD_INT 0
61905: ST_TO_ADDR
// if GetTaskList ( unit ) then
61906: LD_VAR 0 1
61910: PPUSH
61911: CALL_OW 437
61915: IFFALSE 61998
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61917: LD_STRING M
61919: PUSH
61920: LD_VAR 0 1
61924: PPUSH
61925: CALL_OW 437
61929: PUSH
61930: LD_INT 1
61932: ARRAY
61933: PUSH
61934: LD_INT 1
61936: ARRAY
61937: EQUAL
61938: PUSH
61939: LD_VAR 0 2
61943: PUSH
61944: LD_VAR 0 1
61948: PPUSH
61949: CALL_OW 437
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: PUSH
61958: LD_INT 2
61960: ARRAY
61961: EQUAL
61962: AND
61963: PUSH
61964: LD_VAR 0 3
61968: PUSH
61969: LD_VAR 0 1
61973: PPUSH
61974: CALL_OW 437
61978: PUSH
61979: LD_INT 1
61981: ARRAY
61982: PUSH
61983: LD_INT 3
61985: ARRAY
61986: EQUAL
61987: AND
61988: IFFALSE 61998
// result := true ;
61990: LD_ADDR_VAR 0 4
61994: PUSH
61995: LD_INT 1
61997: ST_TO_ADDR
// end ; end ;
61998: LD_VAR 0 4
62002: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
62003: LD_INT 0
62005: PPUSH
62006: PPUSH
62007: PPUSH
62008: PPUSH
// if not unit or not area then
62009: LD_VAR 0 1
62013: NOT
62014: PUSH
62015: LD_VAR 0 2
62019: NOT
62020: OR
62021: IFFALSE 62025
// exit ;
62023: GO 62189
// tmp := AreaToList ( area , i ) ;
62025: LD_ADDR_VAR 0 6
62029: PUSH
62030: LD_VAR 0 2
62034: PPUSH
62035: LD_VAR 0 5
62039: PPUSH
62040: CALL_OW 517
62044: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62045: LD_ADDR_VAR 0 5
62049: PUSH
62050: DOUBLE
62051: LD_INT 1
62053: DEC
62054: ST_TO_ADDR
62055: LD_VAR 0 6
62059: PUSH
62060: LD_INT 1
62062: ARRAY
62063: PUSH
62064: FOR_TO
62065: IFFALSE 62187
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62067: LD_ADDR_VAR 0 7
62071: PUSH
62072: LD_VAR 0 6
62076: PUSH
62077: LD_INT 1
62079: ARRAY
62080: PUSH
62081: LD_VAR 0 5
62085: ARRAY
62086: PUSH
62087: LD_VAR 0 6
62091: PUSH
62092: LD_INT 2
62094: ARRAY
62095: PUSH
62096: LD_VAR 0 5
62100: ARRAY
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62106: LD_VAR 0 7
62110: PUSH
62111: LD_INT 1
62113: ARRAY
62114: PPUSH
62115: LD_VAR 0 7
62119: PUSH
62120: LD_INT 2
62122: ARRAY
62123: PPUSH
62124: CALL_OW 428
62128: PUSH
62129: LD_INT 0
62131: EQUAL
62132: IFFALSE 62185
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62134: LD_VAR 0 1
62138: PPUSH
62139: LD_VAR 0 7
62143: PUSH
62144: LD_INT 1
62146: ARRAY
62147: PPUSH
62148: LD_VAR 0 7
62152: PUSH
62153: LD_INT 2
62155: ARRAY
62156: PPUSH
62157: LD_VAR 0 3
62161: PPUSH
62162: CALL_OW 48
// result := IsPlaced ( unit ) ;
62166: LD_ADDR_VAR 0 4
62170: PUSH
62171: LD_VAR 0 1
62175: PPUSH
62176: CALL_OW 305
62180: ST_TO_ADDR
// exit ;
62181: POP
62182: POP
62183: GO 62189
// end ; end ;
62185: GO 62064
62187: POP
62188: POP
// end ;
62189: LD_VAR 0 4
62193: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62194: LD_INT 0
62196: PPUSH
62197: PPUSH
62198: PPUSH
// if not side or side > 8 then
62199: LD_VAR 0 1
62203: NOT
62204: PUSH
62205: LD_VAR 0 1
62209: PUSH
62210: LD_INT 8
62212: GREATER
62213: OR
62214: IFFALSE 62218
// exit ;
62216: GO 62405
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62218: LD_ADDR_VAR 0 4
62222: PUSH
62223: LD_INT 22
62225: PUSH
62226: LD_VAR 0 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 21
62237: PUSH
62238: LD_INT 3
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PPUSH
62249: CALL_OW 69
62253: ST_TO_ADDR
// if not tmp then
62254: LD_VAR 0 4
62258: NOT
62259: IFFALSE 62263
// exit ;
62261: GO 62405
// enable_addtolog := true ;
62263: LD_ADDR_OWVAR 81
62267: PUSH
62268: LD_INT 1
62270: ST_TO_ADDR
// AddToLog ( [ ) ;
62271: LD_STRING [
62273: PPUSH
62274: CALL_OW 561
// for i in tmp do
62278: LD_ADDR_VAR 0 3
62282: PUSH
62283: LD_VAR 0 4
62287: PUSH
62288: FOR_IN
62289: IFFALSE 62396
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62291: LD_STRING [
62293: PUSH
62294: LD_VAR 0 3
62298: PPUSH
62299: CALL_OW 266
62303: STR
62304: PUSH
62305: LD_STRING , 
62307: STR
62308: PUSH
62309: LD_VAR 0 3
62313: PPUSH
62314: CALL_OW 250
62318: STR
62319: PUSH
62320: LD_STRING , 
62322: STR
62323: PUSH
62324: LD_VAR 0 3
62328: PPUSH
62329: CALL_OW 251
62333: STR
62334: PUSH
62335: LD_STRING , 
62337: STR
62338: PUSH
62339: LD_VAR 0 3
62343: PPUSH
62344: CALL_OW 254
62348: STR
62349: PUSH
62350: LD_STRING , 
62352: STR
62353: PUSH
62354: LD_VAR 0 3
62358: PPUSH
62359: LD_INT 1
62361: PPUSH
62362: CALL_OW 268
62366: STR
62367: PUSH
62368: LD_STRING , 
62370: STR
62371: PUSH
62372: LD_VAR 0 3
62376: PPUSH
62377: LD_INT 2
62379: PPUSH
62380: CALL_OW 268
62384: STR
62385: PUSH
62386: LD_STRING ],
62388: STR
62389: PPUSH
62390: CALL_OW 561
// end ;
62394: GO 62288
62396: POP
62397: POP
// AddToLog ( ]; ) ;
62398: LD_STRING ];
62400: PPUSH
62401: CALL_OW 561
// end ;
62405: LD_VAR 0 2
62409: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62410: LD_INT 0
62412: PPUSH
62413: PPUSH
62414: PPUSH
62415: PPUSH
62416: PPUSH
// if not area or not rate or not max then
62417: LD_VAR 0 1
62421: NOT
62422: PUSH
62423: LD_VAR 0 2
62427: NOT
62428: OR
62429: PUSH
62430: LD_VAR 0 4
62434: NOT
62435: OR
62436: IFFALSE 62440
// exit ;
62438: GO 62632
// while 1 do
62440: LD_INT 1
62442: IFFALSE 62632
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62444: LD_ADDR_VAR 0 9
62448: PUSH
62449: LD_VAR 0 1
62453: PPUSH
62454: LD_INT 1
62456: PPUSH
62457: CALL_OW 287
62461: PUSH
62462: LD_INT 10
62464: MUL
62465: ST_TO_ADDR
// r := rate / 10 ;
62466: LD_ADDR_VAR 0 7
62470: PUSH
62471: LD_VAR 0 2
62475: PUSH
62476: LD_INT 10
62478: DIVREAL
62479: ST_TO_ADDR
// time := 1 1$00 ;
62480: LD_ADDR_VAR 0 8
62484: PUSH
62485: LD_INT 2100
62487: ST_TO_ADDR
// if amount < min then
62488: LD_VAR 0 9
62492: PUSH
62493: LD_VAR 0 3
62497: LESS
62498: IFFALSE 62516
// r := r * 2 else
62500: LD_ADDR_VAR 0 7
62504: PUSH
62505: LD_VAR 0 7
62509: PUSH
62510: LD_INT 2
62512: MUL
62513: ST_TO_ADDR
62514: GO 62542
// if amount > max then
62516: LD_VAR 0 9
62520: PUSH
62521: LD_VAR 0 4
62525: GREATER
62526: IFFALSE 62542
// r := r / 2 ;
62528: LD_ADDR_VAR 0 7
62532: PUSH
62533: LD_VAR 0 7
62537: PUSH
62538: LD_INT 2
62540: DIVREAL
62541: ST_TO_ADDR
// time := time / r ;
62542: LD_ADDR_VAR 0 8
62546: PUSH
62547: LD_VAR 0 8
62551: PUSH
62552: LD_VAR 0 7
62556: DIVREAL
62557: ST_TO_ADDR
// if time < 0 then
62558: LD_VAR 0 8
62562: PUSH
62563: LD_INT 0
62565: LESS
62566: IFFALSE 62583
// time := time * - 1 ;
62568: LD_ADDR_VAR 0 8
62572: PUSH
62573: LD_VAR 0 8
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: MUL
62582: ST_TO_ADDR
// wait ( time ) ;
62583: LD_VAR 0 8
62587: PPUSH
62588: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62592: LD_INT 35
62594: PPUSH
62595: LD_INT 875
62597: PPUSH
62598: CALL_OW 12
62602: PPUSH
62603: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62607: LD_INT 1
62609: PPUSH
62610: LD_INT 5
62612: PPUSH
62613: CALL_OW 12
62617: PPUSH
62618: LD_VAR 0 1
62622: PPUSH
62623: LD_INT 1
62625: PPUSH
62626: CALL_OW 55
// end ;
62630: GO 62440
// end ;
62632: LD_VAR 0 5
62636: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62637: LD_INT 0
62639: PPUSH
62640: PPUSH
62641: PPUSH
62642: PPUSH
62643: PPUSH
62644: PPUSH
62645: PPUSH
62646: PPUSH
// if not turrets or not factories then
62647: LD_VAR 0 1
62651: NOT
62652: PUSH
62653: LD_VAR 0 2
62657: NOT
62658: OR
62659: IFFALSE 62663
// exit ;
62661: GO 62970
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62663: LD_ADDR_VAR 0 10
62667: PUSH
62668: LD_INT 5
62670: PUSH
62671: LD_INT 6
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: LD_INT 4
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 3
62690: PUSH
62691: LD_INT 5
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: PUSH
62703: LD_INT 24
62705: PUSH
62706: LD_INT 25
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 23
62715: PUSH
62716: LD_INT 27
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: PUSH
62727: LD_INT 42
62729: PUSH
62730: LD_INT 43
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 44
62739: PUSH
62740: LD_INT 46
62742: PUSH
62743: EMPTY
62744: LIST
62745: LIST
62746: PUSH
62747: LD_INT 45
62749: PUSH
62750: LD_INT 47
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: LIST
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: LIST
62766: ST_TO_ADDR
// result := [ ] ;
62767: LD_ADDR_VAR 0 3
62771: PUSH
62772: EMPTY
62773: ST_TO_ADDR
// for i in turrets do
62774: LD_ADDR_VAR 0 4
62778: PUSH
62779: LD_VAR 0 1
62783: PUSH
62784: FOR_IN
62785: IFFALSE 62968
// begin nat := GetNation ( i ) ;
62787: LD_ADDR_VAR 0 7
62791: PUSH
62792: LD_VAR 0 4
62796: PPUSH
62797: CALL_OW 248
62801: ST_TO_ADDR
// weapon := 0 ;
62802: LD_ADDR_VAR 0 8
62806: PUSH
62807: LD_INT 0
62809: ST_TO_ADDR
// if not nat then
62810: LD_VAR 0 7
62814: NOT
62815: IFFALSE 62819
// continue ;
62817: GO 62784
// for j in list [ nat ] do
62819: LD_ADDR_VAR 0 5
62823: PUSH
62824: LD_VAR 0 10
62828: PUSH
62829: LD_VAR 0 7
62833: ARRAY
62834: PUSH
62835: FOR_IN
62836: IFFALSE 62877
// if GetBWeapon ( i ) = j [ 1 ] then
62838: LD_VAR 0 4
62842: PPUSH
62843: CALL_OW 269
62847: PUSH
62848: LD_VAR 0 5
62852: PUSH
62853: LD_INT 1
62855: ARRAY
62856: EQUAL
62857: IFFALSE 62875
// begin weapon := j [ 2 ] ;
62859: LD_ADDR_VAR 0 8
62863: PUSH
62864: LD_VAR 0 5
62868: PUSH
62869: LD_INT 2
62871: ARRAY
62872: ST_TO_ADDR
// break ;
62873: GO 62877
// end ;
62875: GO 62835
62877: POP
62878: POP
// if not weapon then
62879: LD_VAR 0 8
62883: NOT
62884: IFFALSE 62888
// continue ;
62886: GO 62784
// for k in factories do
62888: LD_ADDR_VAR 0 6
62892: PUSH
62893: LD_VAR 0 2
62897: PUSH
62898: FOR_IN
62899: IFFALSE 62964
// begin weapons := AvailableWeaponList ( k ) ;
62901: LD_ADDR_VAR 0 9
62905: PUSH
62906: LD_VAR 0 6
62910: PPUSH
62911: CALL_OW 478
62915: ST_TO_ADDR
// if not weapons then
62916: LD_VAR 0 9
62920: NOT
62921: IFFALSE 62925
// continue ;
62923: GO 62898
// if weapon in weapons then
62925: LD_VAR 0 8
62929: PUSH
62930: LD_VAR 0 9
62934: IN
62935: IFFALSE 62962
// begin result := [ i , weapon ] ;
62937: LD_ADDR_VAR 0 3
62941: PUSH
62942: LD_VAR 0 4
62946: PUSH
62947: LD_VAR 0 8
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: ST_TO_ADDR
// exit ;
62956: POP
62957: POP
62958: POP
62959: POP
62960: GO 62970
// end ; end ;
62962: GO 62898
62964: POP
62965: POP
// end ;
62966: GO 62784
62968: POP
62969: POP
// end ;
62970: LD_VAR 0 3
62974: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62975: LD_INT 0
62977: PPUSH
// if not side or side > 8 then
62978: LD_VAR 0 3
62982: NOT
62983: PUSH
62984: LD_VAR 0 3
62988: PUSH
62989: LD_INT 8
62991: GREATER
62992: OR
62993: IFFALSE 62997
// exit ;
62995: GO 63056
// if not range then
62997: LD_VAR 0 4
63001: NOT
63002: IFFALSE 63013
// range := - 12 ;
63004: LD_ADDR_VAR 0 4
63008: PUSH
63009: LD_INT 12
63011: NEG
63012: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
63013: LD_VAR 0 1
63017: PPUSH
63018: LD_VAR 0 2
63022: PPUSH
63023: LD_VAR 0 3
63027: PPUSH
63028: LD_VAR 0 4
63032: PPUSH
63033: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63037: LD_VAR 0 1
63041: PPUSH
63042: LD_VAR 0 2
63046: PPUSH
63047: LD_VAR 0 3
63051: PPUSH
63052: CALL_OW 331
// end ;
63056: LD_VAR 0 5
63060: RET
// export function Video ( mode ) ; begin
63061: LD_INT 0
63063: PPUSH
// ingame_video = mode ;
63064: LD_ADDR_OWVAR 52
63068: PUSH
63069: LD_VAR 0 1
63073: ST_TO_ADDR
// interface_hidden = mode ;
63074: LD_ADDR_OWVAR 54
63078: PUSH
63079: LD_VAR 0 1
63083: ST_TO_ADDR
// end ;
63084: LD_VAR 0 2
63088: RET
// export function Join ( array , element ) ; begin
63089: LD_INT 0
63091: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63092: LD_ADDR_VAR 0 3
63096: PUSH
63097: LD_VAR 0 1
63101: PPUSH
63102: LD_VAR 0 1
63106: PUSH
63107: LD_INT 1
63109: PLUS
63110: PPUSH
63111: LD_VAR 0 2
63115: PPUSH
63116: CALL_OW 1
63120: ST_TO_ADDR
// end ;
63121: LD_VAR 0 3
63125: RET
// export function JoinUnion ( array , element ) ; begin
63126: LD_INT 0
63128: PPUSH
// result := array union element ;
63129: LD_ADDR_VAR 0 3
63133: PUSH
63134: LD_VAR 0 1
63138: PUSH
63139: LD_VAR 0 2
63143: UNION
63144: ST_TO_ADDR
// end ;
63145: LD_VAR 0 3
63149: RET
// export function GetBehemoths ( side ) ; begin
63150: LD_INT 0
63152: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63153: LD_ADDR_VAR 0 2
63157: PUSH
63158: LD_INT 22
63160: PUSH
63161: LD_VAR 0 1
63165: PUSH
63166: EMPTY
63167: LIST
63168: LIST
63169: PUSH
63170: LD_INT 31
63172: PUSH
63173: LD_INT 25
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PPUSH
63184: CALL_OW 69
63188: ST_TO_ADDR
// end ;
63189: LD_VAR 0 2
63193: RET
// export function Shuffle ( array ) ; var i , index ; begin
63194: LD_INT 0
63196: PPUSH
63197: PPUSH
63198: PPUSH
// result := [ ] ;
63199: LD_ADDR_VAR 0 2
63203: PUSH
63204: EMPTY
63205: ST_TO_ADDR
// if not array then
63206: LD_VAR 0 1
63210: NOT
63211: IFFALSE 63215
// exit ;
63213: GO 63314
// Randomize ;
63215: CALL_OW 10
// for i = array downto 1 do
63219: LD_ADDR_VAR 0 3
63223: PUSH
63224: DOUBLE
63225: LD_VAR 0 1
63229: INC
63230: ST_TO_ADDR
63231: LD_INT 1
63233: PUSH
63234: FOR_DOWNTO
63235: IFFALSE 63312
// begin index := rand ( 1 , array ) ;
63237: LD_ADDR_VAR 0 4
63241: PUSH
63242: LD_INT 1
63244: PPUSH
63245: LD_VAR 0 1
63249: PPUSH
63250: CALL_OW 12
63254: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63255: LD_ADDR_VAR 0 2
63259: PUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: LD_VAR 0 2
63269: PUSH
63270: LD_INT 1
63272: PLUS
63273: PPUSH
63274: LD_VAR 0 1
63278: PUSH
63279: LD_VAR 0 4
63283: ARRAY
63284: PPUSH
63285: CALL_OW 2
63289: ST_TO_ADDR
// array := Delete ( array , index ) ;
63290: LD_ADDR_VAR 0 1
63294: PUSH
63295: LD_VAR 0 1
63299: PPUSH
63300: LD_VAR 0 4
63304: PPUSH
63305: CALL_OW 3
63309: ST_TO_ADDR
// end ;
63310: GO 63234
63312: POP
63313: POP
// end ;
63314: LD_VAR 0 2
63318: RET
// export function GetBaseMaterials ( base ) ; begin
63319: LD_INT 0
63321: PPUSH
// result := [ 0 , 0 , 0 ] ;
63322: LD_ADDR_VAR 0 2
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: ST_TO_ADDR
// if not base then
63341: LD_VAR 0 1
63345: NOT
63346: IFFALSE 63350
// exit ;
63348: GO 63399
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63350: LD_ADDR_VAR 0 2
63354: PUSH
63355: LD_VAR 0 1
63359: PPUSH
63360: LD_INT 1
63362: PPUSH
63363: CALL_OW 275
63367: PUSH
63368: LD_VAR 0 1
63372: PPUSH
63373: LD_INT 2
63375: PPUSH
63376: CALL_OW 275
63380: PUSH
63381: LD_VAR 0 1
63385: PPUSH
63386: LD_INT 3
63388: PPUSH
63389: CALL_OW 275
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: LIST
63398: ST_TO_ADDR
// end ;
63399: LD_VAR 0 2
63403: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63404: LD_INT 0
63406: PPUSH
63407: PPUSH
// result := array ;
63408: LD_ADDR_VAR 0 3
63412: PUSH
63413: LD_VAR 0 1
63417: ST_TO_ADDR
// if size > 0 then
63418: LD_VAR 0 2
63422: PUSH
63423: LD_INT 0
63425: GREATER
63426: IFFALSE 63472
// for i := array downto size do
63428: LD_ADDR_VAR 0 4
63432: PUSH
63433: DOUBLE
63434: LD_VAR 0 1
63438: INC
63439: ST_TO_ADDR
63440: LD_VAR 0 2
63444: PUSH
63445: FOR_DOWNTO
63446: IFFALSE 63470
// result := Delete ( result , result ) ;
63448: LD_ADDR_VAR 0 3
63452: PUSH
63453: LD_VAR 0 3
63457: PPUSH
63458: LD_VAR 0 3
63462: PPUSH
63463: CALL_OW 3
63467: ST_TO_ADDR
63468: GO 63445
63470: POP
63471: POP
// end ;
63472: LD_VAR 0 3
63476: RET
// export function ComExit ( unit ) ; var tmp ; begin
63477: LD_INT 0
63479: PPUSH
63480: PPUSH
// if not IsInUnit ( unit ) then
63481: LD_VAR 0 1
63485: PPUSH
63486: CALL_OW 310
63490: NOT
63491: IFFALSE 63495
// exit ;
63493: GO 63555
// tmp := IsInUnit ( unit ) ;
63495: LD_ADDR_VAR 0 3
63499: PUSH
63500: LD_VAR 0 1
63504: PPUSH
63505: CALL_OW 310
63509: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63510: LD_VAR 0 3
63514: PPUSH
63515: CALL_OW 247
63519: PUSH
63520: LD_INT 2
63522: EQUAL
63523: IFFALSE 63536
// ComExitVehicle ( unit ) else
63525: LD_VAR 0 1
63529: PPUSH
63530: CALL_OW 121
63534: GO 63545
// ComExitBuilding ( unit ) ;
63536: LD_VAR 0 1
63540: PPUSH
63541: CALL_OW 122
// result := tmp ;
63545: LD_ADDR_VAR 0 2
63549: PUSH
63550: LD_VAR 0 3
63554: ST_TO_ADDR
// end ;
63555: LD_VAR 0 2
63559: RET
// export function ComExitAll ( units ) ; var i ; begin
63560: LD_INT 0
63562: PPUSH
63563: PPUSH
// if not units then
63564: LD_VAR 0 1
63568: NOT
63569: IFFALSE 63573
// exit ;
63571: GO 63599
// for i in units do
63573: LD_ADDR_VAR 0 3
63577: PUSH
63578: LD_VAR 0 1
63582: PUSH
63583: FOR_IN
63584: IFFALSE 63597
// ComExit ( i ) ;
63586: LD_VAR 0 3
63590: PPUSH
63591: CALL 63477 0 1
63595: GO 63583
63597: POP
63598: POP
// end ;
63599: LD_VAR 0 2
63603: RET
// export function ResetHc ; begin
63604: LD_INT 0
63606: PPUSH
// InitHc ;
63607: CALL_OW 19
// hc_importance := 0 ;
63611: LD_ADDR_OWVAR 32
63615: PUSH
63616: LD_INT 0
63618: ST_TO_ADDR
// end ;
63619: LD_VAR 0 1
63623: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
63628: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63629: LD_ADDR_VAR 0 6
63633: PUSH
63634: LD_VAR 0 1
63638: PUSH
63639: LD_VAR 0 3
63643: PLUS
63644: PUSH
63645: LD_INT 2
63647: DIV
63648: ST_TO_ADDR
// if _x < 0 then
63649: LD_VAR 0 6
63653: PUSH
63654: LD_INT 0
63656: LESS
63657: IFFALSE 63674
// _x := _x * - 1 ;
63659: LD_ADDR_VAR 0 6
63663: PUSH
63664: LD_VAR 0 6
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: MUL
63673: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63674: LD_ADDR_VAR 0 7
63678: PUSH
63679: LD_VAR 0 2
63683: PUSH
63684: LD_VAR 0 4
63688: PLUS
63689: PUSH
63690: LD_INT 2
63692: DIV
63693: ST_TO_ADDR
// if _y < 0 then
63694: LD_VAR 0 7
63698: PUSH
63699: LD_INT 0
63701: LESS
63702: IFFALSE 63719
// _y := _y * - 1 ;
63704: LD_ADDR_VAR 0 7
63708: PUSH
63709: LD_VAR 0 7
63713: PUSH
63714: LD_INT 1
63716: NEG
63717: MUL
63718: ST_TO_ADDR
// result := [ _x , _y ] ;
63719: LD_ADDR_VAR 0 5
63723: PUSH
63724: LD_VAR 0 6
63728: PUSH
63729: LD_VAR 0 7
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: ST_TO_ADDR
// end ;
63738: LD_VAR 0 5
63742: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63743: LD_INT 0
63745: PPUSH
63746: PPUSH
63747: PPUSH
63748: PPUSH
// task := GetTaskList ( unit ) ;
63749: LD_ADDR_VAR 0 7
63753: PUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: CALL_OW 437
63763: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63764: LD_VAR 0 7
63768: NOT
63769: PUSH
63770: LD_VAR 0 1
63774: PPUSH
63775: LD_VAR 0 2
63779: PPUSH
63780: CALL_OW 308
63784: NOT
63785: AND
63786: IFFALSE 63790
// exit ;
63788: GO 63908
// if IsInArea ( unit , area ) then
63790: LD_VAR 0 1
63794: PPUSH
63795: LD_VAR 0 2
63799: PPUSH
63800: CALL_OW 308
63804: IFFALSE 63822
// begin ComMoveToArea ( unit , goAway ) ;
63806: LD_VAR 0 1
63810: PPUSH
63811: LD_VAR 0 3
63815: PPUSH
63816: CALL_OW 113
// exit ;
63820: GO 63908
// end ; if task [ 1 ] [ 1 ] <> M then
63822: LD_VAR 0 7
63826: PUSH
63827: LD_INT 1
63829: ARRAY
63830: PUSH
63831: LD_INT 1
63833: ARRAY
63834: PUSH
63835: LD_STRING M
63837: NONEQUAL
63838: IFFALSE 63842
// exit ;
63840: GO 63908
// x := task [ 1 ] [ 2 ] ;
63842: LD_ADDR_VAR 0 5
63846: PUSH
63847: LD_VAR 0 7
63851: PUSH
63852: LD_INT 1
63854: ARRAY
63855: PUSH
63856: LD_INT 2
63858: ARRAY
63859: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63860: LD_ADDR_VAR 0 6
63864: PUSH
63865: LD_VAR 0 7
63869: PUSH
63870: LD_INT 1
63872: ARRAY
63873: PUSH
63874: LD_INT 3
63876: ARRAY
63877: ST_TO_ADDR
// if InArea ( x , y , area ) then
63878: LD_VAR 0 5
63882: PPUSH
63883: LD_VAR 0 6
63887: PPUSH
63888: LD_VAR 0 2
63892: PPUSH
63893: CALL_OW 309
63897: IFFALSE 63908
// ComStop ( unit ) ;
63899: LD_VAR 0 1
63903: PPUSH
63904: CALL_OW 141
// end ;
63908: LD_VAR 0 4
63912: RET
// export function Abs ( value ) ; begin
63913: LD_INT 0
63915: PPUSH
// result := value ;
63916: LD_ADDR_VAR 0 2
63920: PUSH
63921: LD_VAR 0 1
63925: ST_TO_ADDR
// if value < 0 then
63926: LD_VAR 0 1
63930: PUSH
63931: LD_INT 0
63933: LESS
63934: IFFALSE 63951
// result := value * - 1 ;
63936: LD_ADDR_VAR 0 2
63940: PUSH
63941: LD_VAR 0 1
63945: PUSH
63946: LD_INT 1
63948: NEG
63949: MUL
63950: ST_TO_ADDR
// end ;
63951: LD_VAR 0 2
63955: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63956: LD_INT 0
63958: PPUSH
63959: PPUSH
63960: PPUSH
63961: PPUSH
63962: PPUSH
63963: PPUSH
63964: PPUSH
63965: PPUSH
// if not unit or not building then
63966: LD_VAR 0 1
63970: NOT
63971: PUSH
63972: LD_VAR 0 2
63976: NOT
63977: OR
63978: IFFALSE 63982
// exit ;
63980: GO 64208
// x := GetX ( building ) ;
63982: LD_ADDR_VAR 0 4
63986: PUSH
63987: LD_VAR 0 2
63991: PPUSH
63992: CALL_OW 250
63996: ST_TO_ADDR
// y := GetY ( building ) ;
63997: LD_ADDR_VAR 0 6
64001: PUSH
64002: LD_VAR 0 2
64006: PPUSH
64007: CALL_OW 251
64011: ST_TO_ADDR
// d := GetDir ( building ) ;
64012: LD_ADDR_VAR 0 8
64016: PUSH
64017: LD_VAR 0 2
64021: PPUSH
64022: CALL_OW 254
64026: ST_TO_ADDR
// r := 4 ;
64027: LD_ADDR_VAR 0 9
64031: PUSH
64032: LD_INT 4
64034: ST_TO_ADDR
// for i := 1 to 5 do
64035: LD_ADDR_VAR 0 10
64039: PUSH
64040: DOUBLE
64041: LD_INT 1
64043: DEC
64044: ST_TO_ADDR
64045: LD_INT 5
64047: PUSH
64048: FOR_TO
64049: IFFALSE 64206
// begin _x := ShiftX ( x , d , r + i ) ;
64051: LD_ADDR_VAR 0 5
64055: PUSH
64056: LD_VAR 0 4
64060: PPUSH
64061: LD_VAR 0 8
64065: PPUSH
64066: LD_VAR 0 9
64070: PUSH
64071: LD_VAR 0 10
64075: PLUS
64076: PPUSH
64077: CALL_OW 272
64081: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64082: LD_ADDR_VAR 0 7
64086: PUSH
64087: LD_VAR 0 6
64091: PPUSH
64092: LD_VAR 0 8
64096: PPUSH
64097: LD_VAR 0 9
64101: PUSH
64102: LD_VAR 0 10
64106: PLUS
64107: PPUSH
64108: CALL_OW 273
64112: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64113: LD_VAR 0 5
64117: PPUSH
64118: LD_VAR 0 7
64122: PPUSH
64123: CALL_OW 488
64127: PUSH
64128: LD_VAR 0 5
64132: PPUSH
64133: LD_VAR 0 7
64137: PPUSH
64138: CALL_OW 428
64142: PPUSH
64143: CALL_OW 247
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 2
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: IN
64158: NOT
64159: AND
64160: IFFALSE 64204
// begin ComMoveXY ( unit , _x , _y ) ;
64162: LD_VAR 0 1
64166: PPUSH
64167: LD_VAR 0 5
64171: PPUSH
64172: LD_VAR 0 7
64176: PPUSH
64177: CALL_OW 111
// result := [ _x , _y ] ;
64181: LD_ADDR_VAR 0 3
64185: PUSH
64186: LD_VAR 0 5
64190: PUSH
64191: LD_VAR 0 7
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: ST_TO_ADDR
// exit ;
64200: POP
64201: POP
64202: GO 64208
// end ; end ;
64204: GO 64048
64206: POP
64207: POP
// end ;
64208: LD_VAR 0 3
64212: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64213: LD_INT 0
64215: PPUSH
64216: PPUSH
64217: PPUSH
// result := 0 ;
64218: LD_ADDR_VAR 0 3
64222: PUSH
64223: LD_INT 0
64225: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64226: LD_VAR 0 1
64230: PUSH
64231: LD_INT 0
64233: LESS
64234: PUSH
64235: LD_VAR 0 1
64239: PUSH
64240: LD_INT 8
64242: GREATER
64243: OR
64244: PUSH
64245: LD_VAR 0 2
64249: PUSH
64250: LD_INT 0
64252: LESS
64253: OR
64254: PUSH
64255: LD_VAR 0 2
64259: PUSH
64260: LD_INT 8
64262: GREATER
64263: OR
64264: IFFALSE 64268
// exit ;
64266: GO 64343
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64268: LD_ADDR_VAR 0 4
64272: PUSH
64273: LD_INT 22
64275: PUSH
64276: LD_VAR 0 2
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PPUSH
64285: CALL_OW 69
64289: PUSH
64290: FOR_IN
64291: IFFALSE 64341
// begin un := UnitShoot ( i ) ;
64293: LD_ADDR_VAR 0 5
64297: PUSH
64298: LD_VAR 0 4
64302: PPUSH
64303: CALL_OW 504
64307: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64308: LD_VAR 0 5
64312: PPUSH
64313: CALL_OW 255
64317: PUSH
64318: LD_VAR 0 1
64322: EQUAL
64323: IFFALSE 64339
// begin result := un ;
64325: LD_ADDR_VAR 0 3
64329: PUSH
64330: LD_VAR 0 5
64334: ST_TO_ADDR
// exit ;
64335: POP
64336: POP
64337: GO 64343
// end ; end ;
64339: GO 64290
64341: POP
64342: POP
// end ;
64343: LD_VAR 0 3
64347: RET
// export function GetCargoBay ( units ) ; begin
64348: LD_INT 0
64350: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64351: LD_ADDR_VAR 0 2
64355: PUSH
64356: LD_VAR 0 1
64360: PPUSH
64361: LD_INT 2
64363: PUSH
64364: LD_INT 34
64366: PUSH
64367: LD_INT 12
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: LD_INT 34
64376: PUSH
64377: LD_INT 51
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 34
64386: PUSH
64387: LD_INT 32
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 34
64396: PUSH
64397: LD_EXP 25
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: PPUSH
64413: CALL_OW 72
64417: ST_TO_ADDR
// end ;
64418: LD_VAR 0 2
64422: RET
// export function Negate ( value ) ; begin
64423: LD_INT 0
64425: PPUSH
// result := not value ;
64426: LD_ADDR_VAR 0 2
64430: PUSH
64431: LD_VAR 0 1
64435: NOT
64436: ST_TO_ADDR
// end ;
64437: LD_VAR 0 2
64441: RET
// export function Inc ( value ) ; begin
64442: LD_INT 0
64444: PPUSH
// result := value + 1 ;
64445: LD_ADDR_VAR 0 2
64449: PUSH
64450: LD_VAR 0 1
64454: PUSH
64455: LD_INT 1
64457: PLUS
64458: ST_TO_ADDR
// end ;
64459: LD_VAR 0 2
64463: RET
// export function Dec ( value ) ; begin
64464: LD_INT 0
64466: PPUSH
// result := value - 1 ;
64467: LD_ADDR_VAR 0 2
64471: PUSH
64472: LD_VAR 0 1
64476: PUSH
64477: LD_INT 1
64479: MINUS
64480: ST_TO_ADDR
// end ;
64481: LD_VAR 0 2
64485: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64486: LD_INT 0
64488: PPUSH
64489: PPUSH
64490: PPUSH
64491: PPUSH
64492: PPUSH
64493: PPUSH
64494: PPUSH
64495: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64496: LD_VAR 0 1
64500: PPUSH
64501: LD_VAR 0 2
64505: PPUSH
64506: CALL_OW 488
64510: NOT
64511: PUSH
64512: LD_VAR 0 3
64516: PPUSH
64517: LD_VAR 0 4
64521: PPUSH
64522: CALL_OW 488
64526: NOT
64527: OR
64528: IFFALSE 64541
// begin result := - 1 ;
64530: LD_ADDR_VAR 0 5
64534: PUSH
64535: LD_INT 1
64537: NEG
64538: ST_TO_ADDR
// exit ;
64539: GO 64776
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64541: LD_ADDR_VAR 0 12
64545: PUSH
64546: LD_VAR 0 1
64550: PPUSH
64551: LD_VAR 0 2
64555: PPUSH
64556: LD_VAR 0 3
64560: PPUSH
64561: LD_VAR 0 4
64565: PPUSH
64566: CALL 63624 0 4
64570: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64571: LD_ADDR_VAR 0 11
64575: PUSH
64576: LD_VAR 0 1
64580: PPUSH
64581: LD_VAR 0 2
64585: PPUSH
64586: LD_VAR 0 12
64590: PUSH
64591: LD_INT 1
64593: ARRAY
64594: PPUSH
64595: LD_VAR 0 12
64599: PUSH
64600: LD_INT 2
64602: ARRAY
64603: PPUSH
64604: CALL_OW 298
64608: ST_TO_ADDR
// distance := 9999 ;
64609: LD_ADDR_VAR 0 10
64613: PUSH
64614: LD_INT 9999
64616: ST_TO_ADDR
// for i := 0 to 5 do
64617: LD_ADDR_VAR 0 6
64621: PUSH
64622: DOUBLE
64623: LD_INT 0
64625: DEC
64626: ST_TO_ADDR
64627: LD_INT 5
64629: PUSH
64630: FOR_TO
64631: IFFALSE 64774
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64633: LD_ADDR_VAR 0 7
64637: PUSH
64638: LD_VAR 0 1
64642: PPUSH
64643: LD_VAR 0 6
64647: PPUSH
64648: LD_VAR 0 11
64652: PPUSH
64653: CALL_OW 272
64657: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64658: LD_ADDR_VAR 0 8
64662: PUSH
64663: LD_VAR 0 2
64667: PPUSH
64668: LD_VAR 0 6
64672: PPUSH
64673: LD_VAR 0 11
64677: PPUSH
64678: CALL_OW 273
64682: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64683: LD_VAR 0 7
64687: PPUSH
64688: LD_VAR 0 8
64692: PPUSH
64693: CALL_OW 488
64697: NOT
64698: IFFALSE 64702
// continue ;
64700: GO 64630
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64702: LD_ADDR_VAR 0 9
64706: PUSH
64707: LD_VAR 0 12
64711: PUSH
64712: LD_INT 1
64714: ARRAY
64715: PPUSH
64716: LD_VAR 0 12
64720: PUSH
64721: LD_INT 2
64723: ARRAY
64724: PPUSH
64725: LD_VAR 0 7
64729: PPUSH
64730: LD_VAR 0 8
64734: PPUSH
64735: CALL_OW 298
64739: ST_TO_ADDR
// if tmp < distance then
64740: LD_VAR 0 9
64744: PUSH
64745: LD_VAR 0 10
64749: LESS
64750: IFFALSE 64772
// begin result := i ;
64752: LD_ADDR_VAR 0 5
64756: PUSH
64757: LD_VAR 0 6
64761: ST_TO_ADDR
// distance := tmp ;
64762: LD_ADDR_VAR 0 10
64766: PUSH
64767: LD_VAR 0 9
64771: ST_TO_ADDR
// end ; end ;
64772: GO 64630
64774: POP
64775: POP
// end ;
64776: LD_VAR 0 5
64780: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64781: LD_INT 0
64783: PPUSH
64784: PPUSH
// if not driver or not IsInUnit ( driver ) then
64785: LD_VAR 0 1
64789: NOT
64790: PUSH
64791: LD_VAR 0 1
64795: PPUSH
64796: CALL_OW 310
64800: NOT
64801: OR
64802: IFFALSE 64806
// exit ;
64804: GO 64896
// vehicle := IsInUnit ( driver ) ;
64806: LD_ADDR_VAR 0 3
64810: PUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 310
64820: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64821: LD_VAR 0 1
64825: PPUSH
64826: LD_STRING \
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 0
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: LD_INT 0
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: PUSH
64856: LD_STRING E
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: LD_VAR 0 3
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: EMPTY
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: LIST
64886: LIST
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PPUSH
64892: CALL_OW 446
// end ;
64896: LD_VAR 0 2
64900: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64901: LD_INT 0
64903: PPUSH
64904: PPUSH
// if not driver or not IsInUnit ( driver ) then
64905: LD_VAR 0 1
64909: NOT
64910: PUSH
64911: LD_VAR 0 1
64915: PPUSH
64916: CALL_OW 310
64920: NOT
64921: OR
64922: IFFALSE 64926
// exit ;
64924: GO 65016
// vehicle := IsInUnit ( driver ) ;
64926: LD_ADDR_VAR 0 3
64930: PUSH
64931: LD_VAR 0 1
64935: PPUSH
64936: CALL_OW 310
64940: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64941: LD_VAR 0 1
64945: PPUSH
64946: LD_STRING \
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: LD_INT 0
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: PUSH
64976: LD_STRING E
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_VAR 0 3
64989: PUSH
64990: LD_INT 0
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: LD_INT 0
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PPUSH
65012: CALL_OW 447
// end ;
65016: LD_VAR 0 2
65020: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
65021: LD_INT 0
65023: PPUSH
65024: PPUSH
65025: PPUSH
// tmp := [ ] ;
65026: LD_ADDR_VAR 0 5
65030: PUSH
65031: EMPTY
65032: ST_TO_ADDR
// for i in units do
65033: LD_ADDR_VAR 0 4
65037: PUSH
65038: LD_VAR 0 1
65042: PUSH
65043: FOR_IN
65044: IFFALSE 65082
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65046: LD_ADDR_VAR 0 5
65050: PUSH
65051: LD_VAR 0 5
65055: PPUSH
65056: LD_VAR 0 5
65060: PUSH
65061: LD_INT 1
65063: PLUS
65064: PPUSH
65065: LD_VAR 0 4
65069: PPUSH
65070: CALL_OW 256
65074: PPUSH
65075: CALL_OW 2
65079: ST_TO_ADDR
65080: GO 65043
65082: POP
65083: POP
// if not tmp then
65084: LD_VAR 0 5
65088: NOT
65089: IFFALSE 65093
// exit ;
65091: GO 65141
// if asc then
65093: LD_VAR 0 2
65097: IFFALSE 65121
// result := SortListByListAsc ( units , tmp ) else
65099: LD_ADDR_VAR 0 3
65103: PUSH
65104: LD_VAR 0 1
65108: PPUSH
65109: LD_VAR 0 5
65113: PPUSH
65114: CALL_OW 76
65118: ST_TO_ADDR
65119: GO 65141
// result := SortListByListDesc ( units , tmp ) ;
65121: LD_ADDR_VAR 0 3
65125: PUSH
65126: LD_VAR 0 1
65130: PPUSH
65131: LD_VAR 0 5
65135: PPUSH
65136: CALL_OW 77
65140: ST_TO_ADDR
// end ;
65141: LD_VAR 0 3
65145: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65146: LD_INT 0
65148: PPUSH
65149: PPUSH
// task := GetTaskList ( mech ) ;
65150: LD_ADDR_VAR 0 4
65154: PUSH
65155: LD_VAR 0 1
65159: PPUSH
65160: CALL_OW 437
65164: ST_TO_ADDR
// if not task then
65165: LD_VAR 0 4
65169: NOT
65170: IFFALSE 65174
// exit ;
65172: GO 65216
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65174: LD_ADDR_VAR 0 3
65178: PUSH
65179: LD_VAR 0 4
65183: PUSH
65184: LD_INT 1
65186: ARRAY
65187: PUSH
65188: LD_INT 1
65190: ARRAY
65191: PUSH
65192: LD_STRING r
65194: EQUAL
65195: PUSH
65196: LD_VAR 0 4
65200: PUSH
65201: LD_INT 1
65203: ARRAY
65204: PUSH
65205: LD_INT 4
65207: ARRAY
65208: PUSH
65209: LD_VAR 0 2
65213: EQUAL
65214: AND
65215: ST_TO_ADDR
// end ;
65216: LD_VAR 0 3
65220: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65221: LD_INT 0
65223: PPUSH
// SetDir ( unit , d ) ;
65224: LD_VAR 0 1
65228: PPUSH
65229: LD_VAR 0 4
65233: PPUSH
65234: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65238: LD_VAR 0 1
65242: PPUSH
65243: LD_VAR 0 2
65247: PPUSH
65248: LD_VAR 0 3
65252: PPUSH
65253: LD_VAR 0 5
65257: PPUSH
65258: CALL_OW 48
// end ;
65262: LD_VAR 0 6
65266: RET
// export function ToNaturalNumber ( number ) ; begin
65267: LD_INT 0
65269: PPUSH
// result := number div 1 ;
65270: LD_ADDR_VAR 0 2
65274: PUSH
65275: LD_VAR 0 1
65279: PUSH
65280: LD_INT 1
65282: DIV
65283: ST_TO_ADDR
// if number < 0 then
65284: LD_VAR 0 1
65288: PUSH
65289: LD_INT 0
65291: LESS
65292: IFFALSE 65302
// result := 0 ;
65294: LD_ADDR_VAR 0 2
65298: PUSH
65299: LD_INT 0
65301: ST_TO_ADDR
// end ;
65302: LD_VAR 0 2
65306: RET
// export function SortByClass ( units , class ) ; var un ; begin
65307: LD_INT 0
65309: PPUSH
65310: PPUSH
// if not units or not class then
65311: LD_VAR 0 1
65315: NOT
65316: PUSH
65317: LD_VAR 0 2
65321: NOT
65322: OR
65323: IFFALSE 65327
// exit ;
65325: GO 65422
// result := [ ] ;
65327: LD_ADDR_VAR 0 3
65331: PUSH
65332: EMPTY
65333: ST_TO_ADDR
// for un in units do
65334: LD_ADDR_VAR 0 4
65338: PUSH
65339: LD_VAR 0 1
65343: PUSH
65344: FOR_IN
65345: IFFALSE 65420
// if GetClass ( un ) = class then
65347: LD_VAR 0 4
65351: PPUSH
65352: CALL_OW 257
65356: PUSH
65357: LD_VAR 0 2
65361: EQUAL
65362: IFFALSE 65389
// result := Insert ( result , 1 , un ) else
65364: LD_ADDR_VAR 0 3
65368: PUSH
65369: LD_VAR 0 3
65373: PPUSH
65374: LD_INT 1
65376: PPUSH
65377: LD_VAR 0 4
65381: PPUSH
65382: CALL_OW 2
65386: ST_TO_ADDR
65387: GO 65418
// result := Replace ( result , result + 1 , un ) ;
65389: LD_ADDR_VAR 0 3
65393: PUSH
65394: LD_VAR 0 3
65398: PPUSH
65399: LD_VAR 0 3
65403: PUSH
65404: LD_INT 1
65406: PLUS
65407: PPUSH
65408: LD_VAR 0 4
65412: PPUSH
65413: CALL_OW 1
65417: ST_TO_ADDR
65418: GO 65344
65420: POP
65421: POP
// end ;
65422: LD_VAR 0 3
65426: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65427: LD_INT 0
65429: PPUSH
65430: PPUSH
65431: PPUSH
65432: PPUSH
65433: PPUSH
65434: PPUSH
65435: PPUSH
// result := [ ] ;
65436: LD_ADDR_VAR 0 4
65440: PUSH
65441: EMPTY
65442: ST_TO_ADDR
// if x - r < 0 then
65443: LD_VAR 0 1
65447: PUSH
65448: LD_VAR 0 3
65452: MINUS
65453: PUSH
65454: LD_INT 0
65456: LESS
65457: IFFALSE 65469
// min_x := 0 else
65459: LD_ADDR_VAR 0 8
65463: PUSH
65464: LD_INT 0
65466: ST_TO_ADDR
65467: GO 65485
// min_x := x - r ;
65469: LD_ADDR_VAR 0 8
65473: PUSH
65474: LD_VAR 0 1
65478: PUSH
65479: LD_VAR 0 3
65483: MINUS
65484: ST_TO_ADDR
// if y - r < 0 then
65485: LD_VAR 0 2
65489: PUSH
65490: LD_VAR 0 3
65494: MINUS
65495: PUSH
65496: LD_INT 0
65498: LESS
65499: IFFALSE 65511
// min_y := 0 else
65501: LD_ADDR_VAR 0 7
65505: PUSH
65506: LD_INT 0
65508: ST_TO_ADDR
65509: GO 65527
// min_y := y - r ;
65511: LD_ADDR_VAR 0 7
65515: PUSH
65516: LD_VAR 0 2
65520: PUSH
65521: LD_VAR 0 3
65525: MINUS
65526: ST_TO_ADDR
// max_x := x + r ;
65527: LD_ADDR_VAR 0 9
65531: PUSH
65532: LD_VAR 0 1
65536: PUSH
65537: LD_VAR 0 3
65541: PLUS
65542: ST_TO_ADDR
// max_y := y + r ;
65543: LD_ADDR_VAR 0 10
65547: PUSH
65548: LD_VAR 0 2
65552: PUSH
65553: LD_VAR 0 3
65557: PLUS
65558: ST_TO_ADDR
// for _x = min_x to max_x do
65559: LD_ADDR_VAR 0 5
65563: PUSH
65564: DOUBLE
65565: LD_VAR 0 8
65569: DEC
65570: ST_TO_ADDR
65571: LD_VAR 0 9
65575: PUSH
65576: FOR_TO
65577: IFFALSE 65678
// for _y = min_y to max_y do
65579: LD_ADDR_VAR 0 6
65583: PUSH
65584: DOUBLE
65585: LD_VAR 0 7
65589: DEC
65590: ST_TO_ADDR
65591: LD_VAR 0 10
65595: PUSH
65596: FOR_TO
65597: IFFALSE 65674
// begin if not ValidHex ( _x , _y ) then
65599: LD_VAR 0 5
65603: PPUSH
65604: LD_VAR 0 6
65608: PPUSH
65609: CALL_OW 488
65613: NOT
65614: IFFALSE 65618
// continue ;
65616: GO 65596
// if GetResourceTypeXY ( _x , _y ) then
65618: LD_VAR 0 5
65622: PPUSH
65623: LD_VAR 0 6
65627: PPUSH
65628: CALL_OW 283
65632: IFFALSE 65672
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65634: LD_ADDR_VAR 0 4
65638: PUSH
65639: LD_VAR 0 4
65643: PPUSH
65644: LD_VAR 0 4
65648: PUSH
65649: LD_INT 1
65651: PLUS
65652: PPUSH
65653: LD_VAR 0 5
65657: PUSH
65658: LD_VAR 0 6
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PPUSH
65667: CALL_OW 1
65671: ST_TO_ADDR
// end ;
65672: GO 65596
65674: POP
65675: POP
65676: GO 65576
65678: POP
65679: POP
// end ;
65680: LD_VAR 0 4
65684: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65685: LD_INT 0
65687: PPUSH
65688: PPUSH
65689: PPUSH
65690: PPUSH
65691: PPUSH
65692: PPUSH
65693: PPUSH
65694: PPUSH
// if not units then
65695: LD_VAR 0 1
65699: NOT
65700: IFFALSE 65704
// exit ;
65702: GO 66129
// result := UnitFilter ( units , [ f_ok ] ) ;
65704: LD_ADDR_VAR 0 3
65708: PUSH
65709: LD_VAR 0 1
65713: PPUSH
65714: LD_INT 50
65716: PUSH
65717: EMPTY
65718: LIST
65719: PPUSH
65720: CALL_OW 72
65724: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65725: LD_ADDR_VAR 0 8
65729: PUSH
65730: LD_VAR 0 1
65734: PUSH
65735: LD_INT 1
65737: ARRAY
65738: PPUSH
65739: CALL_OW 255
65743: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
65744: LD_ADDR_VAR 0 10
65748: PUSH
65749: LD_INT 29
65751: PUSH
65752: LD_EXP 28
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: ST_TO_ADDR
// if not result then
65761: LD_VAR 0 3
65765: NOT
65766: IFFALSE 65770
// exit ;
65768: GO 66129
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65770: LD_ADDR_VAR 0 5
65774: PUSH
65775: LD_INT 81
65777: PUSH
65778: LD_VAR 0 8
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PPUSH
65787: CALL_OW 69
65791: ST_TO_ADDR
// for i in result do
65792: LD_ADDR_VAR 0 4
65796: PUSH
65797: LD_VAR 0 3
65801: PUSH
65802: FOR_IN
65803: IFFALSE 66127
// begin tag := GetTag ( i ) + 1 ;
65805: LD_ADDR_VAR 0 9
65809: PUSH
65810: LD_VAR 0 4
65814: PPUSH
65815: CALL_OW 110
65819: PUSH
65820: LD_INT 1
65822: PLUS
65823: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65824: LD_ADDR_VAR 0 7
65828: PUSH
65829: LD_VAR 0 4
65833: PPUSH
65834: CALL_OW 250
65838: PPUSH
65839: LD_VAR 0 4
65843: PPUSH
65844: CALL_OW 251
65848: PPUSH
65849: LD_INT 6
65851: PPUSH
65852: CALL 65427 0 3
65856: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65857: LD_VAR 0 7
65861: PUSH
65862: LD_VAR 0 4
65866: PPUSH
65867: CALL_OW 264
65871: PUSH
65872: LD_VAR 0 10
65876: IN
65877: NOT
65878: AND
65879: IFFALSE 65918
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65881: LD_VAR 0 4
65885: PPUSH
65886: LD_VAR 0 7
65890: PUSH
65891: LD_INT 1
65893: ARRAY
65894: PUSH
65895: LD_INT 1
65897: ARRAY
65898: PPUSH
65899: LD_VAR 0 7
65903: PUSH
65904: LD_INT 1
65906: ARRAY
65907: PUSH
65908: LD_INT 2
65910: ARRAY
65911: PPUSH
65912: CALL_OW 116
65916: GO 66125
// if path > tag then
65918: LD_VAR 0 2
65922: PUSH
65923: LD_VAR 0 9
65927: GREATER
65928: IFFALSE 66095
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65930: LD_ADDR_VAR 0 6
65934: PUSH
65935: LD_VAR 0 5
65939: PPUSH
65940: LD_INT 91
65942: PUSH
65943: LD_VAR 0 4
65947: PUSH
65948: LD_INT 12
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: LIST
65955: PPUSH
65956: CALL_OW 72
65960: ST_TO_ADDR
// if nearEnemy then
65961: LD_VAR 0 6
65965: IFFALSE 65993
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65967: LD_VAR 0 4
65971: PPUSH
65972: LD_VAR 0 6
65976: PPUSH
65977: LD_VAR 0 4
65981: PPUSH
65982: CALL_OW 74
65986: PPUSH
65987: CALL_OW 115
65991: GO 66093
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65993: LD_VAR 0 4
65997: PPUSH
65998: LD_VAR 0 2
66002: PUSH
66003: LD_VAR 0 9
66007: ARRAY
66008: PUSH
66009: LD_INT 1
66011: ARRAY
66012: PPUSH
66013: LD_VAR 0 2
66017: PUSH
66018: LD_VAR 0 9
66022: ARRAY
66023: PUSH
66024: LD_INT 2
66026: ARRAY
66027: PPUSH
66028: CALL_OW 297
66032: PUSH
66033: LD_INT 6
66035: GREATER
66036: IFFALSE 66079
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66038: LD_VAR 0 4
66042: PPUSH
66043: LD_VAR 0 2
66047: PUSH
66048: LD_VAR 0 9
66052: ARRAY
66053: PUSH
66054: LD_INT 1
66056: ARRAY
66057: PPUSH
66058: LD_VAR 0 2
66062: PUSH
66063: LD_VAR 0 9
66067: ARRAY
66068: PUSH
66069: LD_INT 2
66071: ARRAY
66072: PPUSH
66073: CALL_OW 114
66077: GO 66093
// SetTag ( i , tag ) ;
66079: LD_VAR 0 4
66083: PPUSH
66084: LD_VAR 0 9
66088: PPUSH
66089: CALL_OW 109
// end else
66093: GO 66125
// if enemy then
66095: LD_VAR 0 5
66099: IFFALSE 66125
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66101: LD_VAR 0 4
66105: PPUSH
66106: LD_VAR 0 5
66110: PPUSH
66111: LD_VAR 0 4
66115: PPUSH
66116: CALL_OW 74
66120: PPUSH
66121: CALL_OW 115
// end ;
66125: GO 65802
66127: POP
66128: POP
// end ;
66129: LD_VAR 0 3
66133: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66134: LD_INT 0
66136: PPUSH
66137: PPUSH
66138: PPUSH
// if not unit or IsInUnit ( unit ) then
66139: LD_VAR 0 1
66143: NOT
66144: PUSH
66145: LD_VAR 0 1
66149: PPUSH
66150: CALL_OW 310
66154: OR
66155: IFFALSE 66159
// exit ;
66157: GO 66250
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 250
66173: PPUSH
66174: LD_VAR 0 2
66178: PPUSH
66179: LD_INT 1
66181: PPUSH
66182: CALL_OW 272
66186: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66187: LD_ADDR_VAR 0 5
66191: PUSH
66192: LD_VAR 0 1
66196: PPUSH
66197: CALL_OW 251
66201: PPUSH
66202: LD_VAR 0 2
66206: PPUSH
66207: LD_INT 1
66209: PPUSH
66210: CALL_OW 273
66214: ST_TO_ADDR
// if ValidHex ( x , y ) then
66215: LD_VAR 0 4
66219: PPUSH
66220: LD_VAR 0 5
66224: PPUSH
66225: CALL_OW 488
66229: IFFALSE 66250
// ComTurnXY ( unit , x , y ) ;
66231: LD_VAR 0 1
66235: PPUSH
66236: LD_VAR 0 4
66240: PPUSH
66241: LD_VAR 0 5
66245: PPUSH
66246: CALL_OW 118
// end ;
66250: LD_VAR 0 3
66254: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66255: LD_INT 0
66257: PPUSH
66258: PPUSH
// result := false ;
66259: LD_ADDR_VAR 0 3
66263: PUSH
66264: LD_INT 0
66266: ST_TO_ADDR
// if not units then
66267: LD_VAR 0 2
66271: NOT
66272: IFFALSE 66276
// exit ;
66274: GO 66321
// for i in units do
66276: LD_ADDR_VAR 0 4
66280: PUSH
66281: LD_VAR 0 2
66285: PUSH
66286: FOR_IN
66287: IFFALSE 66319
// if See ( side , i ) then
66289: LD_VAR 0 1
66293: PPUSH
66294: LD_VAR 0 4
66298: PPUSH
66299: CALL_OW 292
66303: IFFALSE 66317
// begin result := true ;
66305: LD_ADDR_VAR 0 3
66309: PUSH
66310: LD_INT 1
66312: ST_TO_ADDR
// exit ;
66313: POP
66314: POP
66315: GO 66321
// end ;
66317: GO 66286
66319: POP
66320: POP
// end ;
66321: LD_VAR 0 3
66325: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66326: LD_INT 0
66328: PPUSH
66329: PPUSH
66330: PPUSH
66331: PPUSH
// if not unit or not points then
66332: LD_VAR 0 1
66336: NOT
66337: PUSH
66338: LD_VAR 0 2
66342: NOT
66343: OR
66344: IFFALSE 66348
// exit ;
66346: GO 66438
// dist := 99999 ;
66348: LD_ADDR_VAR 0 5
66352: PUSH
66353: LD_INT 99999
66355: ST_TO_ADDR
// for i in points do
66356: LD_ADDR_VAR 0 4
66360: PUSH
66361: LD_VAR 0 2
66365: PUSH
66366: FOR_IN
66367: IFFALSE 66436
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66369: LD_ADDR_VAR 0 6
66373: PUSH
66374: LD_VAR 0 1
66378: PPUSH
66379: LD_VAR 0 4
66383: PUSH
66384: LD_INT 1
66386: ARRAY
66387: PPUSH
66388: LD_VAR 0 4
66392: PUSH
66393: LD_INT 2
66395: ARRAY
66396: PPUSH
66397: CALL_OW 297
66401: ST_TO_ADDR
// if tmpDist < dist then
66402: LD_VAR 0 6
66406: PUSH
66407: LD_VAR 0 5
66411: LESS
66412: IFFALSE 66434
// begin result := i ;
66414: LD_ADDR_VAR 0 3
66418: PUSH
66419: LD_VAR 0 4
66423: ST_TO_ADDR
// dist := tmpDist ;
66424: LD_ADDR_VAR 0 5
66428: PUSH
66429: LD_VAR 0 6
66433: ST_TO_ADDR
// end ; end ;
66434: GO 66366
66436: POP
66437: POP
// end ; end_of_file
66438: LD_VAR 0 3
66442: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66443: LD_VAR 0 1
66447: PUSH
66448: LD_INT 200
66450: DOUBLE
66451: GREATEREQUAL
66452: IFFALSE 66460
66454: LD_INT 299
66456: DOUBLE
66457: LESSEQUAL
66458: IFTRUE 66462
66460: GO 66494
66462: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66463: LD_VAR 0 1
66467: PPUSH
66468: LD_VAR 0 2
66472: PPUSH
66473: LD_VAR 0 3
66477: PPUSH
66478: LD_VAR 0 4
66482: PPUSH
66483: LD_VAR 0 5
66487: PPUSH
66488: CALL 22090 0 5
66492: GO 66571
66494: LD_INT 300
66496: DOUBLE
66497: GREATEREQUAL
66498: IFFALSE 66506
66500: LD_INT 399
66502: DOUBLE
66503: LESSEQUAL
66504: IFTRUE 66508
66506: GO 66570
66508: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66509: LD_VAR 0 1
66513: PPUSH
66514: LD_VAR 0 2
66518: PPUSH
66519: LD_VAR 0 3
66523: PPUSH
66524: LD_VAR 0 4
66528: PPUSH
66529: LD_VAR 0 5
66533: PPUSH
66534: LD_VAR 0 6
66538: PPUSH
66539: LD_VAR 0 7
66543: PPUSH
66544: LD_VAR 0 8
66548: PPUSH
66549: LD_VAR 0 9
66553: PPUSH
66554: LD_VAR 0 10
66558: PPUSH
66559: LD_VAR 0 11
66563: PPUSH
66564: CALL 19732 0 11
66568: GO 66571
66570: POP
// end ;
66571: PPOPN 11
66573: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66574: LD_VAR 0 1
66578: PPUSH
66579: LD_VAR 0 2
66583: PPUSH
66584: LD_VAR 0 3
66588: PPUSH
66589: LD_VAR 0 4
66593: PPUSH
66594: LD_VAR 0 5
66598: PPUSH
66599: CALL 21826 0 5
// end ; end_of_file
66603: PPOPN 5
66605: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66606: LD_VAR 0 1
66610: PPUSH
66611: LD_VAR 0 2
66615: PPUSH
66616: LD_VAR 0 3
66620: PPUSH
66621: LD_VAR 0 4
66625: PPUSH
66626: LD_VAR 0 5
66630: PPUSH
66631: LD_VAR 0 6
66635: PPUSH
66636: CALL 7425 0 6
// end ;
66640: PPOPN 6
66642: END
