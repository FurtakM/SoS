// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 57083 0 9
// PrepareAmerican ;
  46: CALL 4072 0 0
// PrepareAlliance ;
  50: CALL 226 0 0
// Action ;
  54: CALL 908 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: EMPTY
 158: LIST
 159: LIST
 160: LIST
 161: PUSH
 162: LD_OWVAR 67
 166: ARRAY
 167: ST_TO_ADDR
// canEnd := false ;
 168: LD_ADDR_EXP 10
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// missionTime := 0 0$00 ;
 176: LD_ADDR_EXP 11
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// killCounter := 0 ;
 184: LD_ADDR_EXP 12
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// bunkerCounter := 0 ;
 192: LD_ADDR_EXP 13
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// end ;
 200: LD_VAR 0 1
 204: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 205: LD_EXP 13
 209: PUSH
 210: LD_INT 3
 212: GREATEREQUAL
 213: IFFALSE 225
 215: GO 217
 217: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 218: LD_STRING ACH_ONEMANARMY
 220: PPUSH
 221: CALL_OW 543
 225: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 226: LD_INT 0
 228: PPUSH
 229: PPUSH
 230: PPUSH
 231: PPUSH
 232: PPUSH
 233: PPUSH
 234: PPUSH
// uc_side := 7 ;
 235: LD_ADDR_OWVAR 20
 239: PUSH
 240: LD_INT 7
 242: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 243: LD_ADDR_EXP 14
 247: PUSH
 248: LD_STRING JMM
 250: PPUSH
 251: LD_EXP 1
 255: NOT
 256: PPUSH
 257: LD_STRING 14a_
 259: PPUSH
 260: CALL 24468 0 3
 264: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 265: LD_ADDR_EXP 15
 269: PUSH
 270: LD_STRING Burlak
 272: PPUSH
 273: LD_EXP 1
 277: NOT
 278: PPUSH
 279: LD_STRING 14a_
 281: PPUSH
 282: CALL 24468 0 3
 286: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 287: LD_ADDR_EXP 16
 291: PUSH
 292: LD_STRING Joan
 294: PPUSH
 295: LD_EXP 1
 299: NOT
 300: PPUSH
 301: LD_STRING 13a_
 303: PPUSH
 304: CALL 24468 0 3
 308: ST_TO_ADDR
// if not Joan then
 309: LD_EXP 16
 313: NOT
 314: IFFALSE 447
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 316: LD_ADDR_VAR 0 2
 320: PUSH
 321: LD_STRING 13a_others
 323: PPUSH
 324: CALL_OW 31
 328: ST_TO_ADDR
// if tmp then
 329: LD_VAR 0 2
 333: IFFALSE 409
// begin for i in tmp do
 335: LD_ADDR_VAR 0 3
 339: PUSH
 340: LD_VAR 0 2
 344: PUSH
 345: FOR_IN
 346: IFFALSE 407
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 348: LD_VAR 0 3
 352: PPUSH
 353: CALL_OW 257
 357: PUSH
 358: LD_INT 4
 360: EQUAL
 361: PUSH
 362: LD_VAR 0 3
 366: PPUSH
 367: CALL_OW 258
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: PUSH
 377: LD_VAR 0 3
 381: PPUSH
 382: CALL_OW 248
 386: PUSH
 387: LD_INT 3
 389: EQUAL
 390: AND
 391: IFFALSE 405
// begin RuSci := i ;
 393: LD_ADDR_EXP 17
 397: PUSH
 398: LD_VAR 0 3
 402: ST_TO_ADDR
// break ;
 403: GO 407
// end ;
 405: GO 345
 407: POP
 408: POP
// end ; if not RuSci then
 409: LD_EXP 17
 413: NOT
 414: IFFALSE 447
// begin uc_nation := 3 ;
 416: LD_ADDR_OWVAR 21
 420: PUSH
 421: LD_INT 3
 423: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 424: LD_INT 1
 426: PPUSH
 427: LD_INT 4
 429: PPUSH
 430: LD_INT 10
 432: PPUSH
 433: CALL_OW 380
// RuSci := CreateHuman ;
 437: LD_ADDR_EXP 17
 441: PUSH
 442: CALL_OW 44
 446: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 447: LD_ADDR_VAR 0 6
 451: PUSH
 452: LD_STRING 14a_JMMVeh
 454: PPUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 3
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: LD_INT 7
 466: PUSH
 467: LD_INT 0
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: LIST
 478: LIST
 479: LIST
 480: PPUSH
 481: CALL_OW 30
 485: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 486: LD_ADDR_VAR 0 7
 490: PUSH
 491: LD_STRING 14a_BurlakVeh
 493: PPUSH
 494: LD_INT 22
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: LD_INT 1
 502: PUSH
 503: LD_INT 51
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: LD_INT 3
 511: PUSH
 512: EMPTY
 513: LIST
 514: LIST
 515: LIST
 516: LIST
 517: LIST
 518: LIST
 519: PPUSH
 520: CALL_OW 30
 524: ST_TO_ADDR
// uc_direction := 4 ;
 525: LD_ADDR_OWVAR 24
 529: PUSH
 530: LD_INT 4
 532: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 6
 542: PUSH
 543: LD_INT 6
 545: ARRAY
 546: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 547: LD_VAR 0 6
 551: PUSH
 552: LD_INT 1
 554: ARRAY
 555: PPUSH
 556: LD_VAR 0 6
 560: PUSH
 561: LD_INT 2
 563: ARRAY
 564: PPUSH
 565: LD_VAR 0 6
 569: PUSH
 570: LD_INT 3
 572: ARRAY
 573: PPUSH
 574: LD_VAR 0 6
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PPUSH
 583: LD_INT 60
 585: PPUSH
 586: LD_INT 80
 588: PPUSH
 589: CALL_OW 12
 593: PPUSH
 594: CALL 29292 0 5
// JMMVeh := CreateVehicle ;
 598: LD_ADDR_VAR 0 4
 602: PUSH
 603: CALL_OW 45
 607: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 608: LD_VAR 0 4
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: LD_INT 0
 618: PPUSH
 619: CALL 59371 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 623: LD_VAR 0 6
 627: PUSH
 628: LD_INT 5
 630: ARRAY
 631: PUSH
 632: LD_INT 0
 634: NONEQUAL
 635: IFFALSE 655
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 637: LD_VAR 0 4
 641: PPUSH
 642: LD_VAR 0 6
 646: PUSH
 647: LD_INT 5
 649: ARRAY
 650: PPUSH
 651: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 655: LD_EXP 14
 659: PPUSH
 660: LD_VAR 0 4
 664: PPUSH
 665: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 669: LD_ADDR_OWVAR 21
 673: PUSH
 674: LD_VAR 0 7
 678: PUSH
 679: LD_INT 6
 681: ARRAY
 682: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 683: LD_VAR 0 7
 687: PUSH
 688: LD_INT 1
 690: ARRAY
 691: PPUSH
 692: LD_VAR 0 7
 696: PUSH
 697: LD_INT 2
 699: ARRAY
 700: PPUSH
 701: LD_VAR 0 7
 705: PUSH
 706: LD_INT 3
 708: ARRAY
 709: PPUSH
 710: LD_VAR 0 7
 714: PUSH
 715: LD_INT 4
 717: ARRAY
 718: PPUSH
 719: LD_INT 60
 721: PPUSH
 722: LD_INT 80
 724: PPUSH
 725: CALL_OW 12
 729: PPUSH
 730: CALL 29292 0 5
// BurlakVeh := CreateVehicle ;
 734: LD_ADDR_VAR 0 5
 738: PUSH
 739: CALL_OW 45
 743: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 744: LD_VAR 0 5
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL 59371 0 3
 759: NOT
 760: IFFALSE 780
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 762: LD_VAR 0 5
 766: PPUSH
 767: LD_INT 233
 769: PPUSH
 770: LD_INT 85
 772: PPUSH
 773: LD_INT 0
 775: PPUSH
 776: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 780: LD_VAR 0 7
 784: PUSH
 785: LD_INT 5
 787: ARRAY
 788: PUSH
 789: LD_INT 0
 791: NONEQUAL
 792: IFFALSE 812
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 794: LD_VAR 0 5
 798: PPUSH
 799: LD_VAR 0 7
 803: PUSH
 804: LD_INT 5
 806: ARRAY
 807: PPUSH
 808: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 812: LD_EXP 15
 816: PPUSH
 817: LD_VAR 0 5
 821: PPUSH
 822: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] ] [ Difficulty ] ;
 826: LD_ADDR_VAR 0 2
 830: PUSH
 831: LD_INT 178
 833: PUSH
 834: LD_INT 91
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: LD_INT 137
 843: PUSH
 844: LD_INT 83
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 157
 853: PUSH
 854: LD_INT 75
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: LIST
 865: PUSH
 866: LD_OWVAR 67
 870: ARRAY
 871: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 4
 877: PPUSH
 878: LD_VAR 0 2
 882: PUSH
 883: LD_INT 1
 885: ARRAY
 886: PPUSH
 887: LD_VAR 0 2
 891: PUSH
 892: LD_INT 2
 894: ARRAY
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 58
// end ; end_of_file
 903: LD_VAR 0 1
 907: RET
// export function Action ; begin
 908: LD_INT 0
 910: PPUSH
// InGameOn ;
 911: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 915: LD_INT 221
 917: PPUSH
 918: LD_INT 80
 920: PPUSH
 921: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 925: LD_EXP 14
 929: PUSH
 930: LD_EXP 15
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PPUSH
 939: LD_INT 217
 941: PPUSH
 942: LD_INT 79
 944: PPUSH
 945: CALL_OW 111
// wait ( 0 0$7 ) ;
 949: LD_INT 245
 951: PPUSH
 952: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 956: LD_EXP 14
 960: PUSH
 961: LD_EXP 15
 965: PUSH
 966: EMPTY
 967: LIST
 968: LIST
 969: PPUSH
 970: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 974: LD_EXP 15
 978: PPUSH
 979: LD_STRING D2-Bur-1
 981: PPUSH
 982: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
 986: LD_EXP 14
 990: PPUSH
 991: LD_STRING D2-JMM-1
 993: PPUSH
 994: CALL_OW 88
// wait ( 0 0$0.5 ) ;
 998: LD_INT 18
1000: PPUSH
1001: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1005: LD_EXP 15
1009: PPUSH
1010: LD_EXP 14
1014: PPUSH
1015: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1019: LD_EXP 15
1023: PPUSH
1024: LD_STRING D2-Bur-2
1026: PPUSH
1027: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1031: LD_EXP 15
1035: PPUSH
1036: LD_INT 21
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PPUSH
1046: CALL_OW 69
1050: PPUSH
1051: LD_EXP 15
1055: PPUSH
1056: CALL_OW 74
1060: PPUSH
1061: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1065: LD_EXP 14
1069: PPUSH
1070: LD_INT 21
1072: PUSH
1073: LD_INT 2
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PPUSH
1080: CALL_OW 69
1084: PPUSH
1085: LD_EXP 14
1089: PPUSH
1090: CALL_OW 74
1094: PPUSH
1095: CALL_OW 120
// wait ( 0 0$1 ) ;
1099: LD_INT 35
1101: PPUSH
1102: CALL_OW 67
// InGameOff ;
1106: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1110: LD_STRING MArtPickup
1112: PPUSH
1113: CALL_OW 337
// end ;
1117: LD_VAR 0 1
1121: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1122: LD_EXP 22
1126: PPUSH
1127: LD_INT 101
1129: PUSH
1130: LD_INT 7
1132: PUSH
1133: EMPTY
1134: LIST
1135: LIST
1136: PPUSH
1137: CALL_OW 72
1141: PUSH
1142: LD_EXP 8
1146: NOT
1147: AND
1148: IFFALSE 1177
1150: GO 1152
1152: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1153: LD_EXP 15
1157: PPUSH
1158: LD_STRING D3-Bur-1
1160: PPUSH
1161: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1165: LD_EXP 14
1169: PPUSH
1170: LD_STRING D3-JMM-1
1172: PPUSH
1173: CALL_OW 88
// end ;
1177: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1178: LD_INT 5
1180: PPUSH
1181: LD_INT 22
1183: PUSH
1184: LD_INT 7
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PPUSH
1191: CALL_OW 70
1195: IFFALSE 1526
1197: GO 1199
1199: DISABLE
// begin wait ( 0 0$3 ) ;
1200: LD_INT 105
1202: PPUSH
1203: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1207: LD_INT 139
1209: PPUSH
1210: LD_INT 43
1212: PPUSH
1213: LD_INT 7
1215: PPUSH
1216: LD_INT 20
1218: NEG
1219: PPUSH
1220: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1224: LD_INT 139
1226: PPUSH
1227: LD_INT 43
1229: PPUSH
1230: LD_INT 7
1232: PPUSH
1233: CALL_OW 331
// DialogueOn ;
1237: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1241: LD_EXP 14
1245: PPUSH
1246: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1250: LD_EXP 14
1254: PPUSH
1255: LD_STRING D3a-JMM-1
1257: PPUSH
1258: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1262: LD_EXP 15
1266: PPUSH
1267: LD_STRING D3a-Bur-1
1269: PPUSH
1270: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1274: LD_EXP 14
1278: PPUSH
1279: LD_STRING D3a-JMM-2
1281: PPUSH
1282: CALL_OW 88
// if Joan then
1286: LD_EXP 16
1290: IFFALSE 1306
// SayRadio ( Joan , D3a-Joan-2 ) else
1292: LD_EXP 16
1296: PPUSH
1297: LD_STRING D3a-Joan-2
1299: PPUSH
1300: CALL_OW 94
1304: GO 1318
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1306: LD_EXP 17
1310: PPUSH
1311: LD_STRING D3a-RSci1-2
1313: PPUSH
1314: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1318: LD_EXP 18
1322: PPUSH
1323: LD_STRING D3a-Huck-2
1325: PPUSH
1326: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1330: LD_EXP 19
1334: PPUSH
1335: LD_STRING D3a-Pow-2
1337: PPUSH
1338: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1342: LD_EXP 18
1346: PPUSH
1347: LD_STRING D3a-Huck-3
1349: PPUSH
1350: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1354: LD_EXP 19
1358: PPUSH
1359: LD_STRING D3a-Pow-3
1361: PPUSH
1362: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1366: LD_EXP 18
1370: PPUSH
1371: LD_STRING D3a-Huck-4
1373: PPUSH
1374: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1378: LD_EXP 14
1382: PPUSH
1383: LD_STRING D3a-JMM-4
1385: PPUSH
1386: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1390: LD_EXP 15
1394: PPUSH
1395: LD_STRING D3a-Bur-4
1397: PPUSH
1398: CALL_OW 88
// if Joan then
1402: LD_EXP 16
1406: IFFALSE 1422
// SayRadio ( Joan , D3a-Joan-4 ) else
1408: LD_EXP 16
1412: PPUSH
1413: LD_STRING D3a-Joan-4
1415: PPUSH
1416: CALL_OW 94
1420: GO 1434
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1422: LD_EXP 17
1426: PPUSH
1427: LD_STRING D3a-RSci1-4
1429: PPUSH
1430: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1434: LD_INT 133
1436: PPUSH
1437: LD_INT 43
1439: PPUSH
1440: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1444: LD_INT 10
1446: PPUSH
1447: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1451: LD_EXP 14
1455: PPUSH
1456: LD_STRING D3a-JMM-5
1458: PPUSH
1459: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1463: LD_EXP 15
1467: PPUSH
1468: LD_STRING D3a-Bur-5
1470: PPUSH
1471: CALL_OW 88
// DialogueOff ;
1475: CALL_OW 7
// seenBase := true ;
1479: LD_ADDR_EXP 8
1483: PUSH
1484: LD_INT 1
1486: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 ] [ Difficulty ] ) ;
1487: LD_INT 525
1489: PUSH
1490: LD_INT 420
1492: PUSH
1493: LD_INT 315
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: LIST
1500: PUSH
1501: LD_OWVAR 67
1505: ARRAY
1506: PPUSH
1507: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1511: LD_EXP 21
1515: PPUSH
1516: LD_INT 142
1518: PPUSH
1519: LD_INT 52
1521: PPUSH
1522: CALL_OW 116
// end ;
1526: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1527: LD_EXP 8
1531: NOT
1532: PUSH
1533: LD_EXP 4
1537: NOT
1538: AND
1539: IFFALSE 1559
1541: GO 1543
1543: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1544: LD_EXP 21
1548: PPUSH
1549: LD_INT 142
1551: PPUSH
1552: LD_INT 52
1554: PPUSH
1555: CALL_OW 116
1559: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1560: LD_INT 0
1562: PPUSH
1563: PPUSH
// contaminateTime := tick ;
1564: LD_ADDR_EXP 3
1568: PUSH
1569: LD_OWVAR 1
1573: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1574: LD_INT 175
1576: PPUSH
1577: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1581: LD_ADDR_VAR 0 5
1585: PUSH
1586: LD_INT 4
1588: PPUSH
1589: CALL_OW 469
1593: ST_TO_ADDR
// if art then
1594: LD_VAR 0 5
1598: IFFALSE 1637
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1600: LD_VAR 0 5
1604: PUSH
1605: LD_INT 1
1607: ARRAY
1608: PUSH
1609: LD_INT 157
1611: EQUAL
1612: PUSH
1613: LD_VAR 0 5
1617: PUSH
1618: LD_INT 2
1620: ARRAY
1621: PUSH
1622: LD_INT 75
1624: EQUAL
1625: AND
1626: IFFALSE 1637
// begin YouLost ( Artefact ) ;
1628: LD_STRING Artefact
1630: PPUSH
1631: CALL_OW 104
// exit ;
1635: GO 1789
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1637: LD_EXP 14
1641: PPUSH
1642: CALL_OW 302
1646: PUSH
1647: LD_EXP 15
1651: PPUSH
1652: CALL_OW 302
1656: AND
1657: IFFALSE 1734
// begin DialogueOn ;
1659: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1663: LD_EXP 14
1667: PPUSH
1668: LD_STRING D6a-JMM-1
1670: PPUSH
1671: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1675: LD_EXP 15
1679: PPUSH
1680: LD_STRING D6a-Bur-1
1682: PPUSH
1683: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1687: LD_EXP 14
1691: PPUSH
1692: LD_STRING D6c-JMM-1
1694: PPUSH
1695: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1699: LD_EXP 15
1703: PPUSH
1704: LD_STRING D6c-Bur-1
1706: PPUSH
1707: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1711: LD_EXP 14
1715: PPUSH
1716: LD_STRING D6c-JMM-2
1718: PPUSH
1719: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1723: LD_STRING MBase
1725: PPUSH
1726: CALL_OW 337
// DialogueOff ;
1730: CALL_OW 7
// end ; bombExploded := true ;
1734: LD_ADDR_EXP 4
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ) ;
1742: LD_INT 6300
1744: PUSH
1745: LD_INT 5250
1747: PUSH
1748: LD_INT 4200
1750: PUSH
1751: EMPTY
1752: LIST
1753: LIST
1754: LIST
1755: PUSH
1756: LD_OWVAR 67
1760: ARRAY
1761: PPUSH
1762: CALL_OW 67
// if IsOk ( JMM ) then
1766: LD_EXP 14
1770: PPUSH
1771: CALL_OW 302
1775: IFFALSE 1789
// Say ( JMM , D8-JMM-1 ) ;
1777: LD_EXP 14
1781: PPUSH
1782: LD_STRING D8-JMM-1
1784: PPUSH
1785: CALL_OW 88
// end ;
1789: LD_VAR 0 4
1793: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1794: LD_EXP 9
1798: PUSH
1799: LD_EXP 7
1803: NOT
1804: AND
1805: PUSH
1806: LD_EXP 4
1810: AND
1811: IFFALSE 1866
1813: GO 1815
1815: DISABLE
// begin enable ;
1816: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1817: LD_INT 9
1819: PPUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 7
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PPUSH
1830: CALL_OW 70
1834: IFFALSE 1852
// stevensTimer := stevensTimer - 0 0$30 else
1836: LD_ADDR_EXP 9
1840: PUSH
1841: LD_EXP 9
1845: PUSH
1846: LD_INT 1050
1848: MINUS
1849: ST_TO_ADDR
1850: GO 1866
// stevensTimer := stevensTimer - 0 0$1 ;
1852: LD_ADDR_EXP 9
1856: PUSH
1857: LD_EXP 9
1861: PUSH
1862: LD_INT 35
1864: MINUS
1865: ST_TO_ADDR
// end ;
1866: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1867: LD_EXP 9
1871: PUSH
1872: LD_INT 0
1874: LESSEQUAL
1875: PUSH
1876: LD_EXP 7
1880: NOT
1881: AND
1882: IFFALSE 2046
1884: GO 1886
1886: DISABLE
1887: LD_INT 0
1889: PPUSH
1890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1891: LD_ADDR_VAR 0 2
1895: PUSH
1896: LD_INT 22
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: EMPTY
1903: LIST
1904: LIST
1905: PUSH
1906: LD_INT 25
1908: PUSH
1909: LD_INT 4
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: PUSH
1916: EMPTY
1917: LIST
1918: LIST
1919: PPUSH
1920: CALL_OW 69
1924: ST_TO_ADDR
// for i in tmp do
1925: LD_ADDR_VAR 0 1
1929: PUSH
1930: LD_VAR 0 2
1934: PUSH
1935: FOR_IN
1936: IFFALSE 1989
// begin if IsInUnit ( i ) then
1938: LD_VAR 0 1
1942: PPUSH
1943: CALL_OW 310
1947: IFFALSE 1960
// ComExitBuilding ( i ) else
1949: LD_VAR 0 1
1953: PPUSH
1954: CALL_OW 122
1958: GO 1987
// if not HasTask ( i ) then
1960: LD_VAR 0 1
1964: PPUSH
1965: CALL_OW 314
1969: NOT
1970: IFFALSE 1987
// ComMoveXY ( i , 29 , 56 ) ;
1972: LD_VAR 0 1
1976: PPUSH
1977: LD_INT 29
1979: PPUSH
1980: LD_INT 56
1982: PPUSH
1983: CALL_OW 111
// end ;
1987: GO 1935
1989: POP
1990: POP
// repeat wait ( 0 0$1 ) ;
1991: LD_INT 35
1993: PPUSH
1994: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1998: LD_INT 8
2000: PPUSH
2001: LD_INT 22
2003: PUSH
2004: LD_INT 1
2006: PUSH
2007: EMPTY
2008: LIST
2009: LIST
2010: PUSH
2011: LD_INT 25
2013: PUSH
2014: LD_INT 4
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: PPUSH
2025: CALL_OW 70
2029: IFFALSE 1991
// if planCaptured then
2031: LD_EXP 7
2035: IFFALSE 2039
// exit ;
2037: GO 2046
// YouLost ( Time ) ;
2039: LD_STRING Time
2041: PPUSH
2042: CALL_OW 104
// end ;
2046: PPOPN 2
2048: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2049: LD_INT 22
2051: PUSH
2052: LD_INT 7
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: LD_INT 92
2061: PUSH
2062: LD_INT 142
2064: PUSH
2065: LD_INT 52
2067: PUSH
2068: LD_INT 27
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: PUSH
2077: EMPTY
2078: LIST
2079: LIST
2080: PPUSH
2081: CALL_OW 69
2085: PUSH
2086: LD_EXP 3
2090: PUSH
2091: LD_INT 6000
2093: PLUS
2094: PUSH
2095: LD_OWVAR 1
2099: GREATER
2100: AND
2101: PUSH
2102: LD_EXP 4
2106: AND
2107: IFFALSE 2162
2109: GO 2111
2111: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2112: LD_EXP 14
2116: PUSH
2117: LD_EXP 15
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 85
// DialogueOn ;
2130: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2134: LD_EXP 14
2138: PPUSH
2139: LD_STRING D6b-JMM-1
2141: PPUSH
2142: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2146: LD_EXP 15
2150: PPUSH
2151: LD_STRING D6b-Bur-1
2153: PPUSH
2154: CALL_OW 88
// DialogueOff ;
2158: CALL_OW 7
// end ;
2162: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2163: LD_EXP 15
2167: PPUSH
2168: LD_INT 142
2170: PPUSH
2171: LD_INT 52
2173: PPUSH
2174: CALL_OW 297
2178: PUSH
2179: LD_INT 25
2181: LESS
2182: PUSH
2183: LD_EXP 15
2187: PPUSH
2188: CALL_OW 310
2192: PPUSH
2193: LD_INT 142
2195: PPUSH
2196: LD_INT 52
2198: PPUSH
2199: CALL_OW 297
2203: PUSH
2204: LD_INT 25
2206: LESS
2207: OR
2208: PUSH
2209: LD_EXP 15
2213: PPUSH
2214: CALL_OW 256
2218: PUSH
2219: LD_INT 1000
2221: LESS
2222: AND
2223: PUSH
2224: LD_EXP 3
2228: PUSH
2229: LD_INT 6000
2231: PLUS
2232: PUSH
2233: LD_OWVAR 1
2237: GREATER
2238: AND
2239: PUSH
2240: LD_EXP 4
2244: AND
2245: IFFALSE 2278
2247: GO 2249
2249: DISABLE
// begin DialogueOn ;
2250: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2254: LD_EXP 15
2258: PPUSH
2259: LD_STRING D7-Bur-1
2261: PPUSH
2262: CALL_OW 88
// enteredContaminatedArea := true ;
2266: LD_ADDR_EXP 5
2270: PUSH
2271: LD_INT 1
2273: ST_TO_ADDR
// DialogueOff ;
2274: CALL_OW 7
// end ;
2278: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2279: LD_EXP 14
2283: PPUSH
2284: LD_INT 142
2286: PPUSH
2287: LD_INT 52
2289: PPUSH
2290: CALL_OW 297
2294: PUSH
2295: LD_INT 25
2297: LESS
2298: PUSH
2299: LD_EXP 14
2303: PPUSH
2304: CALL_OW 310
2308: PPUSH
2309: LD_INT 142
2311: PPUSH
2312: LD_INT 52
2314: PPUSH
2315: CALL_OW 297
2319: PUSH
2320: LD_INT 25
2322: LESS
2323: OR
2324: PUSH
2325: LD_EXP 14
2329: PPUSH
2330: CALL_OW 256
2334: PUSH
2335: LD_INT 1000
2337: LESS
2338: AND
2339: PUSH
2340: LD_EXP 3
2344: PUSH
2345: LD_INT 6000
2347: PLUS
2348: PUSH
2349: LD_OWVAR 1
2353: GREATER
2354: AND
2355: PUSH
2356: LD_EXP 4
2360: AND
2361: IFFALSE 2394
2363: GO 2365
2365: DISABLE
// begin DialogueOn ;
2366: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2370: LD_EXP 14
2374: PPUSH
2375: LD_STRING D7-JMM-1
2377: PPUSH
2378: CALL_OW 88
// enteredContaminatedArea := true ;
2382: LD_ADDR_EXP 5
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// DialogueOff ;
2390: CALL_OW 7
// end ;
2394: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2395: LD_EXP 6
2399: PUSH
2400: LD_EXP 14
2404: PPUSH
2405: CALL_OW 302
2409: AND
2410: PUSH
2411: LD_EXP 15
2415: PPUSH
2416: CALL_OW 302
2420: AND
2421: IFFALSE 2490
2423: GO 2425
2425: DISABLE
// begin DialogueOn ;
2426: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2430: LD_EXP 14
2434: PUSH
2435: LD_EXP 15
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2448: LD_EXP 14
2452: PPUSH
2453: LD_STRING D4-JMM-1
2455: PPUSH
2456: CALL_OW 88
// if not bombExploded then
2460: LD_EXP 4
2464: NOT
2465: IFFALSE 2479
// Say ( Burlak , D4-Bur-1 ) ;
2467: LD_EXP 15
2471: PPUSH
2472: LD_STRING D4-Bur-1
2474: PPUSH
2475: CALL_OW 88
// DialogueOff ;
2479: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2483: LD_STRING MReturn
2485: PPUSH
2486: CALL_OW 337
// end ;
2490: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2491: LD_EXP 7
2495: NOT
2496: PUSH
2497: LD_INT 22
2499: PUSH
2500: LD_INT 7
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: LD_INT 91
2509: PUSH
2510: LD_INT 9
2512: PUSH
2513: LD_INT 6
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: LIST
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PPUSH
2525: CALL_OW 69
2529: AND
2530: IFFALSE 2607
2532: GO 2534
2534: DISABLE
// begin DialogueOn ;
2535: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2539: LD_INT 55
2541: PPUSH
2542: LD_INT 11
2544: PPUSH
2545: LD_INT 7
2547: PPUSH
2548: LD_INT 6
2550: NEG
2551: PPUSH
2552: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2556: LD_INT 55
2558: PPUSH
2559: LD_INT 11
2561: PPUSH
2562: LD_INT 7
2564: PPUSH
2565: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2569: LD_EXP 15
2573: PPUSH
2574: LD_STRING D9-Bur-1
2576: PPUSH
2577: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2581: LD_EXP 14
2585: PPUSH
2586: LD_STRING D9-JMM-1
2588: PPUSH
2589: CALL_OW 88
// DialogueOff ;
2593: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2597: LD_INT 9
2599: PPUSH
2600: LD_INT 7
2602: PPUSH
2603: CALL_OW 235
// end ;
2607: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2608: LD_INT 9
2610: PPUSH
2611: LD_INT 22
2613: PUSH
2614: LD_INT 7
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PPUSH
2621: CALL_OW 70
2625: IFFALSE 2661
2627: GO 2629
2629: DISABLE
// begin wait ( 0 0$07 ) ;
2630: LD_INT 245
2632: PPUSH
2633: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2637: LD_EXP 14
2641: PPUSH
2642: LD_STRING D10b-JMM-1
2644: PPUSH
2645: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2649: LD_EXP 15
2653: PPUSH
2654: LD_STRING D10b-Bur-1
2656: PPUSH
2657: CALL_OW 88
// end ;
2661: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2662: LD_EXP 9
2666: PUSH
2667: LD_INT 22
2669: PUSH
2670: LD_INT 1
2672: PUSH
2673: EMPTY
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 25
2679: PUSH
2680: LD_INT 4
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: PUSH
2687: LD_INT 26
2689: PUSH
2690: LD_INT 1
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: EMPTY
2698: LIST
2699: LIST
2700: LIST
2701: PPUSH
2702: CALL_OW 69
2706: AND
2707: PUSH
2708: LD_INT 5
2710: PPUSH
2711: CALL_OW 255
2715: PUSH
2716: LD_INT 7
2718: EQUAL
2719: PUSH
2720: LD_INT 22
2722: PUSH
2723: LD_INT 1
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: LD_INT 25
2732: PUSH
2733: LD_INT 1
2735: PUSH
2736: EMPTY
2737: LIST
2738: LIST
2739: PUSH
2740: EMPTY
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: PUSH
2749: LD_INT 0
2751: EQUAL
2752: OR
2753: AND
2754: IFFALSE 3343
2756: GO 2758
2758: DISABLE
2759: LD_INT 0
2761: PPUSH
// begin case Query ( QKill ) of 1 :
2762: LD_STRING QKill
2764: PPUSH
2765: CALL_OW 97
2769: PUSH
2770: LD_INT 1
2772: DOUBLE
2773: EQUAL
2774: IFTRUE 2778
2776: GO 3331
2778: POP
// begin DialogueOn ;
2779: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2783: LD_EXP 14
2787: PPUSH
2788: LD_STRING D10a-JMM-1
2790: PPUSH
2791: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2795: LD_EXP 15
2799: PPUSH
2800: LD_STRING D10a-Bur-1
2802: PPUSH
2803: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2807: LD_EXP 14
2811: PPUSH
2812: LD_STRING D10a-JMM-2
2814: PPUSH
2815: CALL_OW 88
// if IsOk ( Stevens ) then
2819: LD_EXP 18
2823: PPUSH
2824: CALL_OW 302
2828: IFFALSE 2844
// Say ( Stevens , D10a-Huck-2 ) else
2830: LD_EXP 18
2834: PPUSH
2835: LD_STRING D10a-Huck-2
2837: PPUSH
2838: CALL_OW 88
2842: GO 2895
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2844: LD_INT 22
2846: PUSH
2847: LD_INT 1
2849: PUSH
2850: EMPTY
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 25
2856: PUSH
2857: LD_INT 4
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 26
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: LIST
2878: PPUSH
2879: CALL_OW 69
2883: PUSH
2884: LD_INT 1
2886: ARRAY
2887: PPUSH
2888: LD_STRING D10a-ASci1-3
2890: PPUSH
2891: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2895: LD_EXP 14
2899: PPUSH
2900: LD_STRING D10a-JMM-4
2902: PPUSH
2903: CALL_OW 88
// if IsOk ( Stevens ) then
2907: LD_EXP 18
2911: PPUSH
2912: CALL_OW 302
2916: IFFALSE 2930
// Say ( Stevens , D10a-Huck-3 ) ;
2918: LD_EXP 18
2922: PPUSH
2923: LD_STRING D10a-Huck-3
2925: PPUSH
2926: CALL_OW 88
// DialogueOff ;
2930: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 7
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 1
2945: PPUSH
2946: CALL_OW 80
// planCaptured := true ;
2950: LD_ADDR_EXP 7
2954: PUSH
2955: LD_INT 1
2957: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2958: LD_STRING MEnd
2960: PPUSH
2961: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2965: LD_STRING ACH_DIPLOMACY
2967: PPUSH
2968: CALL_OW 543
// canEnd := true ;
2972: LD_ADDR_EXP 10
2976: PUSH
2977: LD_INT 1
2979: ST_TO_ADDR
// missionTime := tick ;
2980: LD_ADDR_EXP 11
2984: PUSH
2985: LD_OWVAR 1
2989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
2990: LD_INT 35
2992: PPUSH
2993: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
2997: LD_INT 22
2999: PUSH
3000: LD_INT 1
3002: PUSH
3003: EMPTY
3004: LIST
3005: LIST
3006: PUSH
3007: LD_INT 3
3009: PUSH
3010: LD_INT 50
3012: PUSH
3013: EMPTY
3014: LIST
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: PUSH
3020: EMPTY
3021: LIST
3022: LIST
3023: PPUSH
3024: CALL_OW 69
3028: IFFALSE 3144
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3030: LD_ADDR_VAR 0 1
3034: PUSH
3035: LD_INT 22
3037: PUSH
3038: LD_INT 1
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 25
3047: PUSH
3048: LD_INT 4
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PPUSH
3059: CALL_OW 69
3063: PUSH
3064: FOR_IN
3065: IFFALSE 3142
// begin if IsInUnit ( i ) then
3067: LD_VAR 0 1
3071: PPUSH
3072: CALL_OW 310
3076: IFFALSE 3089
// ComExitBuilding ( i ) else
3078: LD_VAR 0 1
3082: PPUSH
3083: CALL_OW 122
3087: GO 3140
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3089: LD_VAR 0 1
3093: PPUSH
3094: LD_INT 22
3096: PUSH
3097: LD_INT 1
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: LD_INT 3
3106: PUSH
3107: LD_INT 50
3109: PUSH
3110: EMPTY
3111: LIST
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: PPUSH
3121: CALL_OW 69
3125: PPUSH
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 74
3135: PPUSH
3136: CALL_OW 128
// end ;
3140: GO 3064
3142: POP
3143: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3144: LD_INT 22
3146: PUSH
3147: LD_INT 1
3149: PUSH
3150: EMPTY
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 3
3156: PUSH
3157: LD_INT 50
3159: PUSH
3160: EMPTY
3161: LIST
3162: PUSH
3163: EMPTY
3164: LIST
3165: LIST
3166: PUSH
3167: EMPTY
3168: LIST
3169: LIST
3170: PPUSH
3171: CALL_OW 69
3175: NOT
3176: IFFALSE 2990
// repeat wait ( 3 ) ;
3178: LD_INT 3
3180: PPUSH
3181: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3185: LD_ADDR_VAR 0 1
3189: PUSH
3190: LD_INT 22
3192: PUSH
3193: LD_INT 1
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PUSH
3200: LD_INT 21
3202: PUSH
3203: LD_INT 1
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PPUSH
3214: CALL_OW 69
3218: PUSH
3219: FOR_IN
3220: IFFALSE 3296
// begin if IsInArea ( i , stevensEscapeArea ) then
3222: LD_VAR 0 1
3226: PPUSH
3227: LD_INT 8
3229: PPUSH
3230: CALL_OW 308
3234: IFFALSE 3247
// begin RemoveUnit ( i ) ;
3236: LD_VAR 0 1
3240: PPUSH
3241: CALL_OW 64
// continue ;
3245: GO 3219
// end ; if IsInUnit ( i ) then
3247: LD_VAR 0 1
3251: PPUSH
3252: CALL_OW 310
3256: IFFALSE 3267
// ComExitBuilding ( i ) ;
3258: LD_VAR 0 1
3262: PPUSH
3263: CALL_OW 122
// if not HasTask ( i ) then
3267: LD_VAR 0 1
3271: PPUSH
3272: CALL_OW 314
3276: NOT
3277: IFFALSE 3294
// ComMoveXY ( i , 28 , 55 ) ;
3279: LD_VAR 0 1
3283: PPUSH
3284: LD_INT 28
3286: PPUSH
3287: LD_INT 55
3289: PPUSH
3290: CALL_OW 111
// end ;
3294: GO 3219
3296: POP
3297: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3298: LD_INT 22
3300: PUSH
3301: LD_INT 1
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: PUSH
3308: LD_INT 21
3310: PUSH
3311: LD_INT 1
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PPUSH
3322: CALL_OW 69
3326: NOT
3327: IFFALSE 3178
// end ; 2 :
3329: GO 3343
3331: LD_INT 2
3333: DOUBLE
3334: EQUAL
3335: IFTRUE 3339
3337: GO 3342
3339: POP
// ; end ;
3340: GO 3343
3342: POP
// end ;
3343: PPOPN 1
3345: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3346: LD_EXP 10
3350: IFFALSE 3707
3352: GO 3354
3354: DISABLE
3355: LD_INT 0
3357: PPUSH
3358: PPUSH
3359: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3360: LD_INT 10
3362: PPUSH
3363: LD_INT 1
3365: PPUSH
3366: CALL_OW 424
// if Difficulty < 2 then
3370: LD_OWVAR 67
3374: PUSH
3375: LD_INT 2
3377: LESS
3378: IFFALSE 3382
// exit ;
3380: GO 3707
// uc_side := 4 ;
3382: LD_ADDR_OWVAR 20
3386: PUSH
3387: LD_INT 4
3389: ST_TO_ADDR
// uc_nation := 1 ;
3390: LD_ADDR_OWVAR 21
3394: PUSH
3395: LD_INT 1
3397: ST_TO_ADDR
// InitHc ;
3398: CALL_OW 19
// tmp := [ ] ;
3402: LD_ADDR_VAR 0 3
3406: PUSH
3407: EMPTY
3408: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 5
3414: PPUSH
3415: LD_INT 10
3417: PPUSH
3418: CALL_OW 380
// un := CreateHuman ;
3422: LD_ADDR_VAR 0 1
3426: PUSH
3427: CALL_OW 44
3431: ST_TO_ADDR
// tmp := [ un ] ;
3432: LD_ADDR_VAR 0 3
3436: PUSH
3437: LD_VAR 0 1
3441: PUSH
3442: EMPTY
3443: LIST
3444: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3445: LD_VAR 0 1
3449: PPUSH
3450: LD_INT 226
3452: PPUSH
3453: LD_INT 86
3455: PPUSH
3456: LD_INT 0
3458: PPUSH
3459: CALL_OW 48
// ComHold ( un ) ;
3463: LD_VAR 0 1
3467: PPUSH
3468: CALL_OW 140
// for i = 1 to 3 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 3
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3585
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3488: LD_INT 0
3490: PPUSH
3491: LD_INT 1
3493: PPUSH
3494: LD_INT 8
3496: PPUSH
3497: CALL_OW 380
// un := CreateHuman ;
3501: LD_ADDR_VAR 0 1
3505: PUSH
3506: CALL_OW 44
3510: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3511: LD_VAR 0 1
3515: PPUSH
3516: LD_INT 5
3518: PPUSH
3519: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3523: LD_VAR 0 1
3527: PPUSH
3528: LD_INT 215
3530: PUSH
3531: LD_INT 217
3533: PUSH
3534: LD_INT 219
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: LIST
3541: PUSH
3542: LD_VAR 0 2
3546: ARRAY
3547: PPUSH
3548: LD_INT 76
3550: PPUSH
3551: LD_INT 0
3553: PPUSH
3554: CALL_OW 48
// ComCrawl ( un ) ;
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 137
// tmp := tmp ^ un ;
3567: LD_ADDR_VAR 0 3
3571: PUSH
3572: LD_VAR 0 3
3576: PUSH
3577: LD_VAR 0 1
3581: ADD
3582: ST_TO_ADDR
// end ;
3583: GO 3485
3585: POP
3586: POP
// repeat wait ( 0 0$1 ) ;
3587: LD_INT 35
3589: PPUSH
3590: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3594: LD_VAR 0 3
3598: PPUSH
3599: LD_INT 24
3601: PUSH
3602: LD_INT 1000
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: PPUSH
3609: CALL_OW 72
3613: NOT
3614: IFFALSE 3587
// for i in tmp do
3616: LD_ADDR_VAR 0 2
3620: PUSH
3621: LD_VAR 0 3
3625: PUSH
3626: FOR_IN
3627: IFFALSE 3705
// begin wait ( 0 0$1 ) ;
3629: LD_INT 35
3631: PPUSH
3632: CALL_OW 67
// if Crawls ( i ) then
3636: LD_VAR 0 2
3640: PPUSH
3641: CALL_OW 318
3645: IFFALSE 3658
// ComWalk ( i ) else
3647: LD_VAR 0 2
3651: PPUSH
3652: CALL_OW 138
3656: GO 3703
// if GetClass ( i ) = class_sniper then
3658: LD_VAR 0 2
3662: PPUSH
3663: CALL_OW 257
3667: PUSH
3668: LD_INT 5
3670: EQUAL
3671: IFFALSE 3689
// ComAttackSoporific ( i , JMM ) else
3673: LD_VAR 0 2
3677: PPUSH
3678: LD_EXP 14
3682: PPUSH
3683: CALL_OW 166
3687: GO 3703
// ComAttackUnit ( i , JMM ) ;
3689: LD_VAR 0 2
3693: PPUSH
3694: LD_EXP 14
3698: PPUSH
3699: CALL_OW 115
// end ;
3703: GO 3626
3705: POP
3706: POP
// end ;
3707: PPOPN 3
3709: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3710: LD_EXP 7
3714: NOT
3715: PUSH
3716: LD_INT 1
3718: PPUSH
3719: CALL_OW 301
3723: AND
3724: IFFALSE 3736
3726: GO 3728
3728: DISABLE
// YouLost ( Lab ) ;
3729: LD_STRING Lab
3731: PPUSH
3732: CALL_OW 104
3736: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3737: LD_INT 10
3739: PPUSH
3740: LD_INT 22
3742: PUSH
3743: LD_INT 7
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PPUSH
3750: CALL_OW 70
3754: PUSH
3755: LD_INT 2
3757: GREATEREQUAL
3758: PUSH
3759: LD_INT 10
3761: PPUSH
3762: LD_INT 2
3764: PUSH
3765: LD_INT 34
3767: PUSH
3768: LD_INT 12
3770: PUSH
3771: EMPTY
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 34
3777: PUSH
3778: LD_INT 51
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PPUSH
3790: CALL_OW 70
3794: AND
3795: PUSH
3796: LD_EXP 10
3800: AND
3801: PUSH
3802: LD_EXP 7
3806: AND
3807: PUSH
3808: LD_EXP 6
3812: AND
3813: IFFALSE 4069
3815: GO 3817
3817: DISABLE
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// begin m1 := false ;
3822: LD_ADDR_VAR 0 1
3826: PUSH
3827: LD_INT 0
3829: ST_TO_ADDR
// m2 := false ;
3830: LD_ADDR_VAR 0 2
3834: PUSH
3835: LD_INT 0
3837: ST_TO_ADDR
// if killCounter = 0 then
3838: LD_EXP 12
3842: PUSH
3843: LD_INT 0
3845: EQUAL
3846: IFFALSE 3855
// SetAchievement ( ACH_PACIFIST ) ;
3848: LD_STRING ACH_PACIFIST
3850: PPUSH
3851: CALL_OW 543
// if tick < 7 7$00 then
3855: LD_OWVAR 1
3859: PUSH
3860: LD_INT 14700
3862: LESS
3863: IFFALSE 3879
// begin wait ( 3 ) ;
3865: LD_INT 3
3867: PPUSH
3868: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3872: LD_STRING ACH_ASPEED_18
3874: PPUSH
3875: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3879: LD_STRING Explosion
3881: PPUSH
3882: LD_INT 1
3884: PPUSH
3885: CALL_OW 101
// if enteredContaminatedArea then
3889: LD_EXP 5
3893: IFFALSE 3915
// begin m1 := true ;
3895: LD_ADDR_VAR 0 1
3899: PUSH
3900: LD_INT 1
3902: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3903: LD_STRING BioHazard
3905: PPUSH
3906: LD_INT 1
3908: PPUSH
3909: CALL_OW 101
// end else
3913: GO 3926
// AddMedal ( BioHazard , - 1 ) ;
3915: LD_STRING BioHazard
3917: PPUSH
3918: LD_INT 1
3920: NEG
3921: PPUSH
3922: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 ] [ Difficulty ] then
3926: LD_EXP 11
3930: PUSH
3931: LD_INT 42000
3933: PUSH
3934: LD_INT 31500
3936: PUSH
3937: LD_INT 25200
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_OWVAR 67
3949: ARRAY
3950: LESSEQUAL
3951: IFFALSE 3973
// begin m2 := true ;
3953: LD_ADDR_VAR 0 2
3957: PUSH
3958: LD_INT 1
3960: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3961: LD_STRING Speed
3963: PPUSH
3964: LD_INT 1
3966: PPUSH
3967: CALL_OW 101
// end else
3971: GO 3984
// AddMedal ( Speed , - 1 ) ;
3973: LD_STRING Speed
3975: PPUSH
3976: LD_INT 1
3978: NEG
3979: PPUSH
3980: CALL_OW 101
// if Difficulty = 3 and m1 and m2 then
3984: LD_OWVAR 67
3988: PUSH
3989: LD_INT 3
3991: EQUAL
3992: PUSH
3993: LD_VAR 0 1
3997: AND
3998: PUSH
3999: LD_VAR 0 2
4003: AND
4004: IFFALSE 4016
// SetAchievementEX ( ACH_AMER , 18 ) ;
4006: LD_STRING ACH_AMER
4008: PPUSH
4009: LD_INT 18
4011: PPUSH
4012: CALL_OW 564
// GiveMedals ( Main ) ;
4016: LD_STRING Main
4018: PPUSH
4019: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4023: LD_EXP 14
4027: PUSH
4028: LD_EXP 15
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4041: LD_EXP 14
4045: PPUSH
4046: LD_STRING 14a_JMM
4048: PPUSH
4049: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4053: LD_EXP 15
4057: PPUSH
4058: LD_STRING 14a_Burlak
4060: PPUSH
4061: CALL_OW 38
// YouWin ;
4065: CALL_OW 103
// end ; end_of_file
4069: PPOPN 2
4071: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4072: LD_INT 0
4074: PPUSH
4075: PPUSH
4076: PPUSH
4077: PPUSH
// uc_side := 1 ;
4078: LD_ADDR_OWVAR 20
4082: PUSH
4083: LD_INT 1
4085: ST_TO_ADDR
// uc_nation := 1 ;
4086: LD_ADDR_OWVAR 21
4090: PUSH
4091: LD_INT 1
4093: ST_TO_ADDR
// InitHc ;
4094: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4098: LD_INT 34
4100: PPUSH
4101: CALL_OW 274
4105: PPUSH
4106: LD_INT 1
4108: PPUSH
4109: LD_INT 500
4111: PPUSH
4112: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4116: LD_INT 34
4118: PPUSH
4119: CALL_OW 274
4123: PPUSH
4124: LD_INT 3
4126: PPUSH
4127: LD_INT 20
4129: PPUSH
4130: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4134: LD_ADDR_EXP 18
4138: PUSH
4139: LD_STRING Stevens
4141: PPUSH
4142: CALL_OW 25
4146: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4147: LD_ADDR_EXP 19
4151: PUSH
4152: LD_STRING Powell
4154: PPUSH
4155: CALL_OW 25
4159: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4160: LD_EXP 18
4164: PPUSH
4165: LD_INT 1
4167: PPUSH
4168: CALL_OW 52
// vehGuard := [ ] ;
4172: LD_ADDR_EXP 23
4176: PUSH
4177: EMPTY
4178: ST_TO_ADDR
// hc_importance := 0 ;
4179: LD_ADDR_OWVAR 32
4183: PUSH
4184: LD_INT 0
4186: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4187: LD_INT 4
4189: PPUSH
4190: LD_INT 3
4192: PPUSH
4193: LD_INT 3
4195: PPUSH
4196: LD_INT 8
4198: PPUSH
4199: LD_INT 100
4201: PPUSH
4202: CALL 29292 0 5
// sibBomb := CreateVehicle ;
4206: LD_ADDR_EXP 21
4210: PUSH
4211: CALL_OW 45
4215: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4216: LD_EXP 21
4220: PPUSH
4221: LD_INT 1
4223: PPUSH
4224: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4228: LD_EXP 21
4232: PPUSH
4233: LD_INT 93
4235: PPUSH
4236: LD_INT 74
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 48
// guards := [ ] ;
4246: LD_ADDR_EXP 22
4250: PUSH
4251: EMPTY
4252: ST_TO_ADDR
// for i = 1 to 3 do
4253: LD_ADDR_VAR 0 2
4257: PUSH
4258: DOUBLE
4259: LD_INT 1
4261: DEC
4262: ST_TO_ADDR
4263: LD_INT 3
4265: PUSH
4266: FOR_TO
4267: IFFALSE 4359
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4269: LD_INT 0
4271: PPUSH
4272: LD_INT 1
4274: PPUSH
4275: LD_INT 8
4277: PUSH
4278: LD_INT 9
4280: PUSH
4281: LD_INT 10
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_OWVAR 67
4293: ARRAY
4294: PPUSH
4295: CALL_OW 380
// un := CreateHuman ;
4299: LD_ADDR_VAR 0 3
4303: PUSH
4304: CALL_OW 44
4308: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4309: LD_VAR 0 3
4313: PPUSH
4314: LD_INT 2
4316: PUSH
4317: LD_INT 3
4319: PUSH
4320: LD_INT 4
4322: PUSH
4323: EMPTY
4324: LIST
4325: LIST
4326: LIST
4327: PUSH
4328: LD_VAR 0 2
4332: ARRAY
4333: PPUSH
4334: LD_INT 0
4336: PPUSH
4337: CALL_OW 49
// guards := guards ^ un ;
4341: LD_ADDR_EXP 22
4345: PUSH
4346: LD_EXP 22
4350: PUSH
4351: LD_VAR 0 3
4355: ADD
4356: ST_TO_ADDR
// end ;
4357: GO 4266
4359: POP
4360: POP
// baseGuards := [ ] ;
4361: LD_ADDR_EXP 20
4365: PUSH
4366: EMPTY
4367: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 ] [ Difficulty ] do
4368: LD_ADDR_VAR 0 2
4372: PUSH
4373: DOUBLE
4374: LD_INT 1
4376: DEC
4377: ST_TO_ADDR
4378: LD_INT 5
4380: PUSH
4381: LD_INT 6
4383: PUSH
4384: LD_INT 7
4386: PUSH
4387: EMPTY
4388: LIST
4389: LIST
4390: LIST
4391: PUSH
4392: LD_OWVAR 67
4396: ARRAY
4397: PUSH
4398: FOR_TO
4399: IFFALSE 4545
// begin PrepareSoldier ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4401: LD_INT 0
4403: PPUSH
4404: LD_INT 8
4406: PUSH
4407: LD_INT 9
4409: PUSH
4410: LD_INT 10
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: LIST
4417: PUSH
4418: LD_OWVAR 67
4422: ARRAY
4423: PPUSH
4424: CALL_OW 381
// un := CreateHuman ;
4428: LD_ADDR_VAR 0 3
4432: PUSH
4433: CALL_OW 44
4437: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4438: LD_ADDR_EXP 20
4442: PUSH
4443: LD_EXP 20
4447: PUSH
4448: LD_VAR 0 3
4452: ADD
4453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4454: LD_ADDR_VAR 0 4
4458: PUSH
4459: LD_INT 22
4461: PUSH
4462: LD_INT 1
4464: PUSH
4465: EMPTY
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 58
4471: PUSH
4472: EMPTY
4473: LIST
4474: PUSH
4475: LD_INT 30
4477: PUSH
4478: LD_INT 32
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: EMPTY
4486: LIST
4487: LIST
4488: LIST
4489: PPUSH
4490: CALL_OW 69
4494: ST_TO_ADDR
// if tmp then
4495: LD_VAR 0 4
4499: IFFALSE 4531
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4501: LD_VAR 0 3
4505: PPUSH
4506: LD_VAR 0 4
4510: PUSH
4511: LD_INT 1
4513: PPUSH
4514: LD_VAR 0 4
4518: PPUSH
4519: CALL_OW 12
4523: ARRAY
4524: PPUSH
4525: CALL_OW 52
4529: GO 4543
// PlaceHumanInUnit ( un , us_bar ) ;
4531: LD_VAR 0 3
4535: PPUSH
4536: LD_INT 51
4538: PPUSH
4539: CALL_OW 52
// end ;
4543: GO 4398
4545: POP
4546: POP
// if Difficulty > 1 then
4547: LD_OWVAR 67
4551: PUSH
4552: LD_INT 1
4554: GREATER
4555: IFFALSE 4599
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 ] [ Difficulty - 1 ] ) ;
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 5
4562: PPUSH
4563: LD_INT 9
4565: PUSH
4566: LD_INT 10
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_OWVAR 67
4577: PUSH
4578: LD_INT 1
4580: MINUS
4581: ARRAY
4582: PPUSH
4583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4587: CALL_OW 44
4591: PPUSH
4592: LD_INT 80
4594: PPUSH
4595: CALL_OW 52
// end ; for i = 1 to 3 do
4599: LD_ADDR_VAR 0 2
4603: PUSH
4604: DOUBLE
4605: LD_INT 1
4607: DEC
4608: ST_TO_ADDR
4609: LD_INT 3
4611: PUSH
4612: FOR_TO
4613: IFFALSE 4639
// begin PrepareMechanic ( false , 9 ) ;
4615: LD_INT 0
4617: PPUSH
4618: LD_INT 9
4620: PPUSH
4621: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4625: CALL_OW 44
4629: PPUSH
4630: LD_INT 43
4632: PPUSH
4633: CALL_OW 52
// end ;
4637: GO 4612
4639: POP
4640: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4641: CALL_OW 44
4645: PPUSH
4646: LD_INT 49
4648: PPUSH
4649: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 1
4665: PUSH
4666: LD_OWVAR 67
4670: PLUS
4671: PUSH
4672: FOR_TO
4673: IFFALSE 4716
// begin PrepareEngineer ( false , [ 8 , 9 , 10 ] [ Difficulty ] ) ;
4675: LD_INT 0
4677: PPUSH
4678: LD_INT 8
4680: PUSH
4681: LD_INT 9
4683: PUSH
4684: LD_INT 10
4686: PUSH
4687: EMPTY
4688: LIST
4689: LIST
4690: LIST
4691: PUSH
4692: LD_OWVAR 67
4696: ARRAY
4697: PPUSH
4698: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4702: CALL_OW 44
4706: PPUSH
4707: LD_INT 5
4709: PPUSH
4710: CALL_OW 52
// end ;
4714: GO 4672
4716: POP
4717: POP
// for i = 1 to 3 do
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: DOUBLE
4724: LD_INT 1
4726: DEC
4727: ST_TO_ADDR
4728: LD_INT 3
4730: PUSH
4731: FOR_TO
4732: IFFALSE 4758
// begin PrepareScientist ( false , 10 ) ;
4734: LD_INT 0
4736: PPUSH
4737: LD_INT 10
4739: PPUSH
4740: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4744: CALL_OW 44
4748: PPUSH
4749: LD_INT 1
4751: PPUSH
4752: CALL_OW 52
// end ;
4756: GO 4731
4758: POP
4759: POP
// end ;
4760: LD_VAR 0 1
4764: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4765: LD_EXP 22
4769: PUSH
4770: LD_EXP 2
4774: NOT
4775: AND
4776: IFFALSE 4962
4778: GO 4780
4780: DISABLE
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
// begin enable ;
4786: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4787: LD_ADDR_VAR 0 3
4791: PUSH
4792: LD_INT 204
4794: PUSH
4795: LD_INT 30
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 165
4804: PUSH
4805: LD_INT 24
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: LD_INT 195
4814: PUSH
4815: LD_INT 6
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 223
4824: PUSH
4825: LD_INT 54
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 214
4834: PUSH
4835: LD_INT 84
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 206
4844: PUSH
4845: LD_INT 71
4847: PUSH
4848: EMPTY
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: ST_TO_ADDR
// for i in guards do
4860: LD_ADDR_VAR 0 1
4864: PUSH
4865: LD_EXP 22
4869: PUSH
4870: FOR_IN
4871: IFFALSE 4960
// begin if HasTask ( i ) then
4873: LD_VAR 0 1
4877: PPUSH
4878: CALL_OW 314
4882: IFFALSE 4888
// continue else
4884: GO 4870
4886: GO 4958
// begin j := rand ( 1 , 6 ) ;
4888: LD_ADDR_VAR 0 2
4892: PUSH
4893: LD_INT 1
4895: PPUSH
4896: LD_INT 6
4898: PPUSH
4899: CALL_OW 12
4903: ST_TO_ADDR
// if not See ( 7 , i ) then
4904: LD_INT 7
4906: PPUSH
4907: LD_VAR 0 1
4911: PPUSH
4912: CALL_OW 292
4916: NOT
4917: IFFALSE 4958
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4919: LD_VAR 0 1
4923: PPUSH
4924: LD_VAR 0 3
4928: PUSH
4929: LD_VAR 0 2
4933: ARRAY
4934: PUSH
4935: LD_INT 1
4937: ARRAY
4938: PPUSH
4939: LD_VAR 0 3
4943: PUSH
4944: LD_VAR 0 2
4948: ARRAY
4949: PUSH
4950: LD_INT 2
4952: ARRAY
4953: PPUSH
4954: CALL_OW 114
// end ; end ;
4958: GO 4870
4960: POP
4961: POP
// end ;
4962: PPOPN 3
4964: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
4965: LD_EXP 23
4969: PUSH
4970: LD_EXP 7
4974: NOT
4975: AND
4976: IFFALSE 5047
4978: GO 4980
4980: DISABLE
4981: LD_INT 0
4983: PPUSH
// begin enable ;
4984: ENABLE
// for i in vehGuard do
4985: LD_ADDR_VAR 0 1
4989: PUSH
4990: LD_EXP 23
4994: PUSH
4995: FOR_IN
4996: IFFALSE 5045
// if IsOk ( vehGuard ) then
4998: LD_EXP 23
5002: PPUSH
5003: CALL_OW 302
5007: IFFALSE 5043
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5009: LD_VAR 0 1
5013: PPUSH
5014: LD_INT 22
5016: PUSH
5017: LD_INT 7
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL_OW 74
5038: PPUSH
5039: CALL_OW 115
5043: GO 4995
5045: POP
5046: POP
// end ;
5047: PPOPN 1
5049: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5050: LD_EXP 4
5054: PUSH
5055: LD_INT 43
5057: PPUSH
5058: CALL_OW 302
5062: AND
5063: PUSH
5064: LD_EXP 7
5068: NOT
5069: AND
5070: IFFALSE 5118
5072: GO 5074
5074: DISABLE
// begin enable ;
5075: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5076: LD_INT 43
5078: PPUSH
5079: LD_INT 5
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 2
5087: PPUSH
5088: LD_INT 7
5090: PUSH
5091: LD_INT 7
5093: PUSH
5094: LD_INT 9
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: PUSH
5102: LD_INT 1
5104: PPUSH
5105: LD_INT 3
5107: PPUSH
5108: CALL_OW 12
5112: ARRAY
5113: PPUSH
5114: CALL_OW 125
// end ;
5118: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5119: LD_INT 22
5121: PUSH
5122: LD_INT 1
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: LD_INT 25
5131: PUSH
5132: LD_INT 5
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PUSH
5139: LD_INT 50
5141: PUSH
5142: EMPTY
5143: LIST
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: LIST
5149: PPUSH
5150: CALL_OW 69
5154: PUSH
5155: LD_EXP 7
5159: NOT
5160: AND
5161: IFFALSE 5390
5163: GO 5165
5165: DISABLE
5166: LD_INT 0
5168: PPUSH
5169: PPUSH
// begin enable ;
5170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5171: LD_ADDR_VAR 0 1
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_INT 1
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 25
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: PUSH
5196: LD_INT 50
5198: PUSH
5199: EMPTY
5200: LIST
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PPUSH
5207: CALL_OW 69
5211: ST_TO_ADDR
// if not tmp then
5212: LD_VAR 0 1
5216: NOT
5217: IFFALSE 5221
// exit ;
5219: GO 5390
// b := IsInUnit ( tmp [ 1 ] ) ;
5221: LD_ADDR_VAR 0 2
5225: PUSH
5226: LD_VAR 0 1
5230: PUSH
5231: LD_INT 1
5233: ARRAY
5234: PPUSH
5235: CALL_OW 310
5239: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5240: LD_VAR 0 2
5244: NOT
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_INT 1
5253: ARRAY
5254: PPUSH
5255: CALL_OW 314
5259: OR
5260: IFFALSE 5264
// exit ;
5262: GO 5390
// if b = us_bun1 then
5264: LD_VAR 0 2
5268: PUSH
5269: LD_INT 80
5271: EQUAL
5272: IFFALSE 5333
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 1
5281: ARRAY
5282: PPUSH
5283: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5287: LD_VAR 0 1
5291: PUSH
5292: LD_INT 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 27
5298: PPUSH
5299: LD_INT 44
5301: PPUSH
5302: CALL_OW 174
// if IsOk ( us_bun2 ) then
5306: LD_INT 55
5308: PPUSH
5309: CALL_OW 302
5313: IFFALSE 5331
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5315: LD_VAR 0 1
5319: PUSH
5320: LD_INT 1
5322: ARRAY
5323: PPUSH
5324: LD_INT 55
5326: PPUSH
5327: CALL_OW 180
// end else
5331: GO 5390
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5333: LD_VAR 0 1
5337: PUSH
5338: LD_INT 1
5340: ARRAY
5341: PPUSH
5342: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5346: LD_VAR 0 1
5350: PUSH
5351: LD_INT 1
5353: ARRAY
5354: PPUSH
5355: LD_INT 92
5357: PPUSH
5358: LD_INT 51
5360: PPUSH
5361: CALL_OW 174
// if IsOk ( us_bun1 ) then
5365: LD_INT 80
5367: PPUSH
5368: CALL_OW 302
5372: IFFALSE 5390
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5374: LD_VAR 0 1
5378: PUSH
5379: LD_INT 1
5381: ARRAY
5382: PPUSH
5383: LD_INT 80
5385: PPUSH
5386: CALL_OW 180
// end ; end ;
5390: PPOPN 2
5392: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5393: LD_EXP 7
5397: NOT
5398: PUSH
5399: LD_INT 9
5401: PPUSH
5402: LD_INT 22
5404: PUSH
5405: LD_INT 1
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: PUSH
5412: LD_INT 21
5414: PUSH
5415: LD_INT 3
5417: PUSH
5418: EMPTY
5419: LIST
5420: LIST
5421: PUSH
5422: LD_INT 3
5424: PUSH
5425: LD_INT 24
5427: PUSH
5428: LD_INT 1000
5430: PUSH
5431: EMPTY
5432: LIST
5433: LIST
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 70
5448: AND
5449: IFFALSE 5860
5451: GO 5453
5453: DISABLE
5454: LD_INT 0
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
// begin enable ;
5460: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5461: LD_ADDR_VAR 0 2
5465: PUSH
5466: LD_INT 22
5468: PUSH
5469: LD_INT 1
5471: PUSH
5472: EMPTY
5473: LIST
5474: LIST
5475: PUSH
5476: LD_INT 25
5478: PUSH
5479: LD_INT 2
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 24
5488: PUSH
5489: LD_INT 1000
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: EMPTY
5497: LIST
5498: LIST
5499: LIST
5500: PPUSH
5501: CALL_OW 69
5505: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5506: LD_ADDR_VAR 0 3
5510: PUSH
5511: LD_INT 22
5513: PUSH
5514: LD_INT 1
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: PUSH
5521: LD_INT 25
5523: PUSH
5524: LD_INT 2
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: LD_INT 24
5536: PUSH
5537: LD_INT 750
5539: PUSH
5540: EMPTY
5541: LIST
5542: LIST
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: EMPTY
5549: LIST
5550: LIST
5551: LIST
5552: PPUSH
5553: CALL_OW 69
5557: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5558: LD_ADDR_VAR 0 4
5562: PUSH
5563: LD_INT 9
5565: PPUSH
5566: LD_INT 22
5568: PUSH
5569: LD_INT 1
5571: PUSH
5572: EMPTY
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 21
5578: PUSH
5579: LD_INT 3
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PUSH
5586: LD_INT 3
5588: PUSH
5589: LD_INT 24
5591: PUSH
5592: LD_INT 1000
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: LIST
5607: PPUSH
5608: CALL_OW 70
5612: PUSH
5613: LD_INT 1
5615: DIFF
5616: ST_TO_ADDR
// if not tmp and not tmp2 then
5617: LD_VAR 0 2
5621: NOT
5622: PUSH
5623: LD_VAR 0 3
5627: NOT
5628: AND
5629: IFFALSE 5633
// exit ;
5631: GO 5860
// if tmp and b then
5633: LD_VAR 0 2
5637: PUSH
5638: LD_VAR 0 4
5642: AND
5643: IFFALSE 5773
// for i in tmp do
5645: LD_ADDR_VAR 0 1
5649: PUSH
5650: LD_VAR 0 2
5654: PUSH
5655: FOR_IN
5656: IFFALSE 5771
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5658: LD_VAR 0 1
5662: PPUSH
5663: CALL_OW 110
5667: PUSH
5668: LD_INT 1
5670: EQUAL
5671: PUSH
5672: LD_VAR 0 1
5676: PPUSH
5677: CALL_OW 256
5681: PUSH
5682: LD_INT 1000
5684: LESS
5685: AND
5686: IFFALSE 5692
// continue else
5688: GO 5655
5690: GO 5719
// if GetTag ( i ) = 1 then
5692: LD_VAR 0 1
5696: PPUSH
5697: CALL_OW 110
5701: PUSH
5702: LD_INT 1
5704: EQUAL
5705: IFFALSE 5719
// SetTag ( i , 0 ) ;
5707: LD_VAR 0 1
5711: PPUSH
5712: LD_INT 0
5714: PPUSH
5715: CALL_OW 109
// if IsInUnit ( i ) then
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 310
5728: IFFALSE 5739
// ComExitBuilding ( i ) ;
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 122
// if not HasTask ( i ) then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 314
5748: NOT
5749: IFFALSE 5769
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5751: LD_VAR 0 1
5755: PPUSH
5756: LD_VAR 0 4
5760: PUSH
5761: LD_INT 1
5763: ARRAY
5764: PPUSH
5765: CALL_OW 190
// end ;
5769: GO 5655
5771: POP
5772: POP
// if tmp2 then
5773: LD_VAR 0 3
5777: IFFALSE 5860
// for i in tmp2 do
5779: LD_ADDR_VAR 0 1
5783: PUSH
5784: LD_VAR 0 3
5788: PUSH
5789: FOR_IN
5790: IFFALSE 5858
// begin if not GetTag ( i ) = 1 then
5792: LD_VAR 0 1
5796: PPUSH
5797: CALL_OW 110
5801: PUSH
5802: LD_INT 1
5804: EQUAL
5805: NOT
5806: IFFALSE 5820
// SetTag ( i , 1 ) ;
5808: LD_VAR 0 1
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5820: LD_VAR 0 1
5824: PPUSH
5825: LD_INT 88
5827: PPUSH
5828: LD_INT 75
5830: PPUSH
5831: CALL_OW 297
5835: PUSH
5836: LD_INT 6
5838: GREATER
5839: IFFALSE 5856
// ComMoveXY ( i , 88 , 75 ) ;
5841: LD_VAR 0 1
5845: PPUSH
5846: LD_INT 88
5848: PPUSH
5849: LD_INT 75
5851: PPUSH
5852: CALL_OW 111
// end ;
5856: GO 5789
5858: POP
5859: POP
// end ;
5860: PPOPN 4
5862: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5863: LD_EXP 7
5867: NOT
5868: PUSH
5869: LD_EXP 9
5873: AND
5874: PUSH
5875: LD_INT 9
5877: PPUSH
5878: LD_INT 22
5880: PUSH
5881: LD_INT 1
5883: PUSH
5884: EMPTY
5885: LIST
5886: LIST
5887: PUSH
5888: LD_INT 21
5890: PUSH
5891: LD_INT 1
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 3
5900: PUSH
5901: LD_INT 24
5903: PUSH
5904: LD_INT 1000
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: AND
5925: IFFALSE 6098
5927: GO 5929
5929: DISABLE
5930: LD_INT 0
5932: PPUSH
5933: PPUSH
5934: PPUSH
// begin enable ;
5935: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5936: LD_ADDR_VAR 0 2
5940: PUSH
5941: LD_INT 22
5943: PUSH
5944: LD_INT 1
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PUSH
5951: LD_INT 25
5953: PUSH
5954: LD_INT 4
5956: PUSH
5957: EMPTY
5958: LIST
5959: LIST
5960: PUSH
5961: EMPTY
5962: LIST
5963: LIST
5964: PPUSH
5965: CALL_OW 69
5969: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5970: LD_ADDR_VAR 0 3
5974: PUSH
5975: LD_INT 9
5977: PPUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 1
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 21
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 3
6000: PUSH
6001: LD_INT 24
6003: PUSH
6004: LD_INT 1000
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: EMPTY
6016: LIST
6017: LIST
6018: LIST
6019: PPUSH
6020: CALL_OW 70
6024: ST_TO_ADDR
// if not sci or not tmp then
6025: LD_VAR 0 2
6029: NOT
6030: PUSH
6031: LD_VAR 0 3
6035: NOT
6036: OR
6037: IFFALSE 6041
// exit ;
6039: GO 6098
// for i in sci do
6041: LD_ADDR_VAR 0 1
6045: PUSH
6046: LD_VAR 0 2
6050: PUSH
6051: FOR_IN
6052: IFFALSE 6096
// if IsInUnit ( i ) then
6054: LD_VAR 0 1
6058: PPUSH
6059: CALL_OW 310
6063: IFFALSE 6076
// ComExitBuilding ( i ) else
6065: LD_VAR 0 1
6069: PPUSH
6070: CALL_OW 122
6074: GO 6094
// ComHeal ( i , tmp [ 1 ] ) ;
6076: LD_VAR 0 1
6080: PPUSH
6081: LD_VAR 0 3
6085: PUSH
6086: LD_INT 1
6088: ARRAY
6089: PPUSH
6090: CALL_OW 128
6094: GO 6051
6096: POP
6097: POP
// end ;
6098: PPOPN 3
6100: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6101: LD_EXP 7
6105: NOT
6106: PUSH
6107: LD_EXP 9
6111: AND
6112: PUSH
6113: LD_INT 1
6115: PPUSH
6116: CALL_OW 302
6120: AND
6121: PUSH
6122: LD_INT 9
6124: PPUSH
6125: LD_INT 22
6127: PUSH
6128: LD_INT 1
6130: PUSH
6131: EMPTY
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 21
6137: PUSH
6138: LD_INT 1
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: LD_INT 24
6150: PUSH
6151: LD_INT 1000
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PPUSH
6167: CALL_OW 70
6171: NOT
6172: AND
6173: PUSH
6174: LD_INT 22
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 4
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 56
6196: PUSH
6197: EMPTY
6198: LIST
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: LIST
6204: PPUSH
6205: CALL_OW 69
6209: AND
6210: IFFALSE 6303
6212: GO 6214
6214: DISABLE
6215: LD_INT 0
6217: PPUSH
// begin enable ;
6218: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6219: LD_ADDR_VAR 0 1
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 1
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 4
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 56
6246: PUSH
6247: EMPTY
6248: LIST
6249: PUSH
6250: EMPTY
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 69
6259: PUSH
6260: FOR_IN
6261: IFFALSE 6301
// if not GetTag ( i ) and not HasTask ( i ) then
6263: LD_VAR 0 1
6267: PPUSH
6268: CALL_OW 110
6272: NOT
6273: PUSH
6274: LD_VAR 0 1
6278: PPUSH
6279: CALL_OW 314
6283: NOT
6284: AND
6285: IFFALSE 6299
// ComEnterUnit ( i , us_lab ) ;
6287: LD_VAR 0 1
6291: PPUSH
6292: LD_INT 1
6294: PPUSH
6295: CALL_OW 120
6299: GO 6260
6301: POP
6302: POP
// end ;
6303: PPOPN 1
6305: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6306: LD_EXP 7
6310: NOT
6311: PUSH
6312: LD_INT 9
6314: PPUSH
6315: LD_INT 22
6317: PUSH
6318: LD_INT 1
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 21
6327: PUSH
6328: LD_INT 3
6330: PUSH
6331: EMPTY
6332: LIST
6333: LIST
6334: PUSH
6335: LD_INT 3
6337: PUSH
6338: LD_INT 24
6340: PUSH
6341: LD_INT 1000
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: EMPTY
6349: LIST
6350: LIST
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 70
6361: NOT
6362: AND
6363: PUSH
6364: LD_INT 22
6366: PUSH
6367: LD_INT 1
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 25
6376: PUSH
6377: LD_INT 2
6379: PUSH
6380: EMPTY
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 56
6386: PUSH
6387: EMPTY
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: LIST
6394: PPUSH
6395: CALL_OW 69
6399: AND
6400: IFFALSE 6493
6402: GO 6404
6404: DISABLE
6405: LD_INT 0
6407: PPUSH
// begin enable ;
6408: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6409: LD_ADDR_VAR 0 1
6413: PUSH
6414: LD_INT 22
6416: PUSH
6417: LD_INT 1
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 25
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: EMPTY
6431: LIST
6432: LIST
6433: PUSH
6434: LD_INT 56
6436: PUSH
6437: EMPTY
6438: LIST
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: PPUSH
6445: CALL_OW 69
6449: PUSH
6450: FOR_IN
6451: IFFALSE 6491
// if not HasTask ( i ) and not GetTag ( i ) then
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 314
6462: NOT
6463: PUSH
6464: LD_VAR 0 1
6468: PPUSH
6469: CALL_OW 110
6473: NOT
6474: AND
6475: IFFALSE 6489
// ComEnterUnit ( i , us_depot ) ;
6477: LD_VAR 0 1
6481: PPUSH
6482: LD_INT 5
6484: PPUSH
6485: CALL_OW 120
6489: GO 6450
6491: POP
6492: POP
// end ;
6493: PPOPN 1
6495: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6496: LD_EXP 9
6500: PUSH
6501: LD_INT 0
6503: LESSEQUAL
6504: PUSH
6505: LD_EXP 18
6509: PPUSH
6510: CALL_OW 301
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 1
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 25
6528: PUSH
6529: LD_INT 2
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: AND
6545: IFFALSE 6586
6547: GO 6549
6549: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 1
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 2
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: PPUSH
6574: CALL_OW 69
6578: PPUSH
6579: LD_INT 1
6581: PPUSH
6582: CALL_OW 167
6586: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6587: LD_EXP 7
6591: NOT
6592: PUSH
6593: LD_INT 7
6595: PPUSH
6596: LD_INT 22
6598: PUSH
6599: LD_INT 7
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PPUSH
6606: CALL_OW 70
6610: AND
6611: IFFALSE 6702
6613: GO 6615
6615: DISABLE
6616: LD_INT 0
6618: PPUSH
// begin wait ( 0 0$2 ) ;
6619: LD_INT 70
6621: PPUSH
6622: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: LD_INT 22
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 25
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PPUSH
6655: CALL_OW 69
6659: PUSH
6660: FOR_IN
6661: IFFALSE 6700
// begin if IsInUnit ( i ) then
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 310
6672: IFFALSE 6683
// ComExitBuilding ( i ) ;
6674: LD_VAR 0 1
6678: PPUSH
6679: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6683: LD_VAR 0 1
6687: PPUSH
6688: LD_INT 92
6690: PPUSH
6691: LD_INT 78
6693: PPUSH
6694: CALL_OW 174
// end ;
6698: GO 6660
6700: POP
6701: POP
// end ; end_of_file
6702: PPOPN 1
6704: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6705: LD_VAR 0 1
6709: PPUSH
6710: LD_VAR 0 2
6714: PPUSH
6715: LD_VAR 0 3
6719: PPUSH
6720: CALL 1560 0 3
6724: PPOPN 3
6726: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6727: LD_EXP 14
6731: PPUSH
6732: CALL_OW 257
6736: PUSH
6737: LD_INT 4
6739: EQUAL
6740: PUSH
6741: LD_EXP 15
6745: PPUSH
6746: CALL_OW 257
6750: PUSH
6751: LD_INT 4
6753: EQUAL
6754: OR
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_INT 7
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: LD_INT 21
6768: PUSH
6769: LD_INT 3
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PPUSH
6780: CALL_OW 69
6784: OR
6785: IFFALSE 6789
// exit ;
6787: GO 6827
// if un = JMM then
6789: LD_VAR 0 1
6793: PUSH
6794: LD_EXP 14
6798: EQUAL
6799: IFFALSE 6808
// YouLost ( JMM ) ;
6801: LD_STRING JMM
6803: PPUSH
6804: CALL_OW 104
// if un = Burlak then
6808: LD_VAR 0 1
6812: PUSH
6813: LD_EXP 15
6817: EQUAL
6818: IFFALSE 6827
// YouLost ( Burlak ) ;
6820: LD_STRING Burlak
6822: PPUSH
6823: CALL_OW 104
// end ;
6827: PPOPN 1
6829: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6830: LD_VAR 0 1
6834: PUSH
6835: LD_EXP 14
6839: EQUAL
6840: IFFALSE 6849
// YouLost ( JMM ) ;
6842: LD_STRING JMM
6844: PPUSH
6845: CALL_OW 104
// if un = Burlak then
6849: LD_VAR 0 1
6853: PUSH
6854: LD_EXP 15
6858: EQUAL
6859: IFFALSE 6868
// YouLost ( Burlak ) ;
6861: LD_STRING Burlak
6863: PPUSH
6864: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6868: LD_VAR 0 1
6872: PUSH
6873: LD_INT 21
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 1
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: IN
6902: IFFALSE 6918
// killCounter := killCounter + 1 ;
6904: LD_ADDR_EXP 12
6908: PUSH
6909: LD_EXP 12
6913: PUSH
6914: LD_INT 1
6916: PLUS
6917: ST_TO_ADDR
// end ;
6918: PPOPN 1
6920: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6921: LD_VAR 0 2
6925: PUSH
6926: LD_INT 7
6928: EQUAL
6929: PUSH
6930: LD_VAR 0 1
6934: PUSH
6935: LD_INT 2
6937: PUSH
6938: LD_INT 30
6940: PUSH
6941: LD_INT 31
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 30
6950: PUSH
6951: LD_INT 32
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 33
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: IN
6979: AND
6980: IFFALSE 6996
// bunkerCounter := bunkerCounter + 1 ;
6982: LD_ADDR_EXP 13
6986: PUSH
6987: LD_EXP 13
6991: PUSH
6992: LD_INT 1
6994: PLUS
6995: ST_TO_ADDR
// end ;
6996: PPOPN 3
6998: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 255
7008: PUSH
7009: LD_INT 7
7011: EQUAL
7012: IFFALSE 7022
// artifactPickedUp := true ;
7014: LD_ADDR_EXP 6
7018: PUSH
7019: LD_INT 1
7021: ST_TO_ADDR
// end ;
7022: PPOPN 2
7024: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7025: LD_ADDR_EXP 6
7029: PUSH
7030: LD_INT 0
7032: ST_TO_ADDR
7033: PPOPN 2
7035: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7036: LD_VAR 0 1
7040: PPUSH
7041: CALL_OW 255
7045: PUSH
7046: LD_INT 1
7048: NONEQUAL
7049: IFFALSE 7053
// exit ;
7051: GO 7100
// wait ( 0 0$5 ) ;
7053: LD_INT 175
7055: PPUSH
7056: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7060: LD_VAR 0 1
7064: PPUSH
7065: CALL_OW 263
7069: PUSH
7070: LD_INT 2
7072: EQUAL
7073: IFFALSE 7084
// Connect ( vehicle ) ;
7075: LD_VAR 0 1
7079: PPUSH
7080: CALL 32347 0 1
// vehGuard := vehGuard ^ vehicle ;
7084: LD_ADDR_EXP 23
7088: PUSH
7089: LD_EXP 23
7093: PUSH
7094: LD_VAR 0 1
7098: ADD
7099: ST_TO_ADDR
// end ;
7100: PPOPN 2
7102: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7103: LD_VAR 0 1
7107: PUSH
7108: LD_INT 1
7110: EQUAL
7111: PUSH
7112: LD_EXP 7
7116: NOT
7117: AND
7118: IFFALSE 7153
// begin planCaptured := true ;
7120: LD_ADDR_EXP 7
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7128: LD_STRING MEnd
7130: PPUSH
7131: CALL_OW 337
// canEnd := true ;
7135: LD_ADDR_EXP 10
7139: PUSH
7140: LD_INT 1
7142: ST_TO_ADDR
// missionTime := tick ;
7143: LD_ADDR_EXP 11
7147: PUSH
7148: LD_OWVAR 1
7152: ST_TO_ADDR
// end ; end ;
7153: PPOPN 3
7155: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7156: LD_VAR 0 1
7160: PPUSH
7161: CALL 20585 0 1
// end ; end_of_file
7165: PPOPN 1
7167: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
7168: LD_INT 0
7170: PPUSH
// ar_miner := 81 ;
7171: LD_ADDR_EXP 31
7175: PUSH
7176: LD_INT 81
7178: ST_TO_ADDR
// ar_crane := 88 ;
7179: LD_ADDR_EXP 30
7183: PUSH
7184: LD_INT 88
7186: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7187: LD_ADDR_EXP 25
7191: PUSH
7192: LD_INT 89
7194: ST_TO_ADDR
// us_hack := 99 ;
7195: LD_ADDR_EXP 26
7199: PUSH
7200: LD_INT 99
7202: ST_TO_ADDR
// us_artillery := 97 ;
7203: LD_ADDR_EXP 27
7207: PUSH
7208: LD_INT 97
7210: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7211: LD_ADDR_EXP 28
7215: PUSH
7216: LD_INT 91
7218: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
7219: LD_ADDR_EXP 29
7223: PUSH
7224: LD_INT 92
7226: ST_TO_ADDR
// ru_radar := 98 ;
7227: LD_ADDR_EXP 24
7231: PUSH
7232: LD_INT 98
7234: ST_TO_ADDR
// tech_Artillery := 80 ;
7235: LD_ADDR_EXP 32
7239: PUSH
7240: LD_INT 80
7242: ST_TO_ADDR
// tech_RadMat := 81 ;
7243: LD_ADDR_EXP 33
7247: PUSH
7248: LD_INT 81
7250: ST_TO_ADDR
// tech_BasicTools := 82 ;
7251: LD_ADDR_EXP 34
7255: PUSH
7256: LD_INT 82
7258: ST_TO_ADDR
// tech_Cargo := 83 ;
7259: LD_ADDR_EXP 35
7263: PUSH
7264: LD_INT 83
7266: ST_TO_ADDR
// tech_Track := 84 ;
7267: LD_ADDR_EXP 36
7271: PUSH
7272: LD_INT 84
7274: ST_TO_ADDR
// tech_Crane := 85 ;
7275: LD_ADDR_EXP 37
7279: PUSH
7280: LD_INT 85
7282: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7283: LD_ADDR_EXP 38
7287: PUSH
7288: LD_INT 86
7290: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7291: LD_ADDR_EXP 39
7295: PUSH
7296: LD_INT 87
7298: ST_TO_ADDR
// end ;
7299: LD_VAR 0 1
7303: RET
// every 1 do
7304: GO 7306
7306: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7307: CALL 7168 0 0
7311: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7312: LD_VAR 0 2
7316: PUSH
7317: LD_INT 100
7319: EQUAL
7320: IFFALSE 8269
// begin if not StreamModeActive then
7322: LD_EXP 40
7326: NOT
7327: IFFALSE 7337
// StreamModeActive := true ;
7329: LD_ADDR_EXP 40
7333: PUSH
7334: LD_INT 1
7336: ST_TO_ADDR
// if p3 = 0 then
7337: LD_VAR 0 3
7341: PUSH
7342: LD_INT 0
7344: EQUAL
7345: IFFALSE 7351
// InitStreamMode ;
7347: CALL 8427 0 0
// if p3 = 1 then
7351: LD_VAR 0 3
7355: PUSH
7356: LD_INT 1
7358: EQUAL
7359: IFFALSE 7369
// sRocket := true ;
7361: LD_ADDR_EXP 45
7365: PUSH
7366: LD_INT 1
7368: ST_TO_ADDR
// if p3 = 2 then
7369: LD_VAR 0 3
7373: PUSH
7374: LD_INT 2
7376: EQUAL
7377: IFFALSE 7387
// sSpeed := true ;
7379: LD_ADDR_EXP 44
7383: PUSH
7384: LD_INT 1
7386: ST_TO_ADDR
// if p3 = 3 then
7387: LD_VAR 0 3
7391: PUSH
7392: LD_INT 3
7394: EQUAL
7395: IFFALSE 7405
// sEngine := true ;
7397: LD_ADDR_EXP 46
7401: PUSH
7402: LD_INT 1
7404: ST_TO_ADDR
// if p3 = 4 then
7405: LD_VAR 0 3
7409: PUSH
7410: LD_INT 4
7412: EQUAL
7413: IFFALSE 7423
// sSpec := true ;
7415: LD_ADDR_EXP 43
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// if p3 = 5 then
7423: LD_VAR 0 3
7427: PUSH
7428: LD_INT 5
7430: EQUAL
7431: IFFALSE 7441
// sLevel := true ;
7433: LD_ADDR_EXP 47
7437: PUSH
7438: LD_INT 1
7440: ST_TO_ADDR
// if p3 = 6 then
7441: LD_VAR 0 3
7445: PUSH
7446: LD_INT 6
7448: EQUAL
7449: IFFALSE 7459
// sArmoury := true ;
7451: LD_ADDR_EXP 48
7455: PUSH
7456: LD_INT 1
7458: ST_TO_ADDR
// if p3 = 7 then
7459: LD_VAR 0 3
7463: PUSH
7464: LD_INT 7
7466: EQUAL
7467: IFFALSE 7477
// sRadar := true ;
7469: LD_ADDR_EXP 49
7473: PUSH
7474: LD_INT 1
7476: ST_TO_ADDR
// if p3 = 8 then
7477: LD_VAR 0 3
7481: PUSH
7482: LD_INT 8
7484: EQUAL
7485: IFFALSE 7495
// sBunker := true ;
7487: LD_ADDR_EXP 50
7491: PUSH
7492: LD_INT 1
7494: ST_TO_ADDR
// if p3 = 9 then
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 9
7502: EQUAL
7503: IFFALSE 7513
// sHack := true ;
7505: LD_ADDR_EXP 51
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if p3 = 10 then
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 10
7520: EQUAL
7521: IFFALSE 7531
// sFire := true ;
7523: LD_ADDR_EXP 52
7527: PUSH
7528: LD_INT 1
7530: ST_TO_ADDR
// if p3 = 11 then
7531: LD_VAR 0 3
7535: PUSH
7536: LD_INT 11
7538: EQUAL
7539: IFFALSE 7549
// sRefresh := true ;
7541: LD_ADDR_EXP 53
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if p3 = 12 then
7549: LD_VAR 0 3
7553: PUSH
7554: LD_INT 12
7556: EQUAL
7557: IFFALSE 7567
// sExp := true ;
7559: LD_ADDR_EXP 54
7563: PUSH
7564: LD_INT 1
7566: ST_TO_ADDR
// if p3 = 13 then
7567: LD_VAR 0 3
7571: PUSH
7572: LD_INT 13
7574: EQUAL
7575: IFFALSE 7585
// sDepot := true ;
7577: LD_ADDR_EXP 55
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
// if p3 = 14 then
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 14
7592: EQUAL
7593: IFFALSE 7603
// sFlag := true ;
7595: LD_ADDR_EXP 56
7599: PUSH
7600: LD_INT 1
7602: ST_TO_ADDR
// if p3 = 15 then
7603: LD_VAR 0 3
7607: PUSH
7608: LD_INT 15
7610: EQUAL
7611: IFFALSE 7621
// sKamikadze := true ;
7613: LD_ADDR_EXP 64
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// if p3 = 16 then
7621: LD_VAR 0 3
7625: PUSH
7626: LD_INT 16
7628: EQUAL
7629: IFFALSE 7639
// sTroll := true ;
7631: LD_ADDR_EXP 65
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// if p3 = 17 then
7639: LD_VAR 0 3
7643: PUSH
7644: LD_INT 17
7646: EQUAL
7647: IFFALSE 7657
// sSlow := true ;
7649: LD_ADDR_EXP 66
7653: PUSH
7654: LD_INT 1
7656: ST_TO_ADDR
// if p3 = 18 then
7657: LD_VAR 0 3
7661: PUSH
7662: LD_INT 18
7664: EQUAL
7665: IFFALSE 7675
// sLack := true ;
7667: LD_ADDR_EXP 67
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// if p3 = 19 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 19
7682: EQUAL
7683: IFFALSE 7693
// sTank := true ;
7685: LD_ADDR_EXP 69
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// if p3 = 20 then
7693: LD_VAR 0 3
7697: PUSH
7698: LD_INT 20
7700: EQUAL
7701: IFFALSE 7711
// sRemote := true ;
7703: LD_ADDR_EXP 70
7707: PUSH
7708: LD_INT 1
7710: ST_TO_ADDR
// if p3 = 21 then
7711: LD_VAR 0 3
7715: PUSH
7716: LD_INT 21
7718: EQUAL
7719: IFFALSE 7729
// sPowell := true ;
7721: LD_ADDR_EXP 71
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// if p3 = 22 then
7729: LD_VAR 0 3
7733: PUSH
7734: LD_INT 22
7736: EQUAL
7737: IFFALSE 7747
// sTeleport := true ;
7739: LD_ADDR_EXP 74
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// if p3 = 23 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 23
7754: EQUAL
7755: IFFALSE 7765
// sOilTower := true ;
7757: LD_ADDR_EXP 76
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// if p3 = 24 then
7765: LD_VAR 0 3
7769: PUSH
7770: LD_INT 24
7772: EQUAL
7773: IFFALSE 7783
// sShovel := true ;
7775: LD_ADDR_EXP 77
7779: PUSH
7780: LD_INT 1
7782: ST_TO_ADDR
// if p3 = 25 then
7783: LD_VAR 0 3
7787: PUSH
7788: LD_INT 25
7790: EQUAL
7791: IFFALSE 7801
// sSheik := true ;
7793: LD_ADDR_EXP 78
7797: PUSH
7798: LD_INT 1
7800: ST_TO_ADDR
// if p3 = 26 then
7801: LD_VAR 0 3
7805: PUSH
7806: LD_INT 26
7808: EQUAL
7809: IFFALSE 7819
// sEarthquake := true ;
7811: LD_ADDR_EXP 80
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
// if p3 = 27 then
7819: LD_VAR 0 3
7823: PUSH
7824: LD_INT 27
7826: EQUAL
7827: IFFALSE 7837
// sAI := true ;
7829: LD_ADDR_EXP 81
7833: PUSH
7834: LD_INT 1
7836: ST_TO_ADDR
// if p3 = 28 then
7837: LD_VAR 0 3
7841: PUSH
7842: LD_INT 28
7844: EQUAL
7845: IFFALSE 7855
// sCargo := true ;
7847: LD_ADDR_EXP 84
7851: PUSH
7852: LD_INT 1
7854: ST_TO_ADDR
// if p3 = 29 then
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 29
7862: EQUAL
7863: IFFALSE 7873
// sDLaser := true ;
7865: LD_ADDR_EXP 85
7869: PUSH
7870: LD_INT 1
7872: ST_TO_ADDR
// if p3 = 30 then
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 30
7880: EQUAL
7881: IFFALSE 7891
// sExchange := true ;
7883: LD_ADDR_EXP 86
7887: PUSH
7888: LD_INT 1
7890: ST_TO_ADDR
// if p3 = 31 then
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 31
7898: EQUAL
7899: IFFALSE 7909
// sFac := true ;
7901: LD_ADDR_EXP 87
7905: PUSH
7906: LD_INT 1
7908: ST_TO_ADDR
// if p3 = 32 then
7909: LD_VAR 0 3
7913: PUSH
7914: LD_INT 32
7916: EQUAL
7917: IFFALSE 7927
// sPower := true ;
7919: LD_ADDR_EXP 88
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// if p3 = 33 then
7927: LD_VAR 0 3
7931: PUSH
7932: LD_INT 33
7934: EQUAL
7935: IFFALSE 7945
// sRandom := true ;
7937: LD_ADDR_EXP 89
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// if p3 = 34 then
7945: LD_VAR 0 3
7949: PUSH
7950: LD_INT 34
7952: EQUAL
7953: IFFALSE 7963
// sShield := true ;
7955: LD_ADDR_EXP 90
7959: PUSH
7960: LD_INT 1
7962: ST_TO_ADDR
// if p3 = 35 then
7963: LD_VAR 0 3
7967: PUSH
7968: LD_INT 35
7970: EQUAL
7971: IFFALSE 7981
// sTime := true ;
7973: LD_ADDR_EXP 91
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// if p3 = 36 then
7981: LD_VAR 0 3
7985: PUSH
7986: LD_INT 36
7988: EQUAL
7989: IFFALSE 7999
// sTools := true ;
7991: LD_ADDR_EXP 92
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// if p3 = 101 then
7999: LD_VAR 0 3
8003: PUSH
8004: LD_INT 101
8006: EQUAL
8007: IFFALSE 8017
// sSold := true ;
8009: LD_ADDR_EXP 57
8013: PUSH
8014: LD_INT 1
8016: ST_TO_ADDR
// if p3 = 102 then
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 102
8024: EQUAL
8025: IFFALSE 8035
// sDiff := true ;
8027: LD_ADDR_EXP 58
8031: PUSH
8032: LD_INT 1
8034: ST_TO_ADDR
// if p3 = 103 then
8035: LD_VAR 0 3
8039: PUSH
8040: LD_INT 103
8042: EQUAL
8043: IFFALSE 8053
// sFog := true ;
8045: LD_ADDR_EXP 61
8049: PUSH
8050: LD_INT 1
8052: ST_TO_ADDR
// if p3 = 104 then
8053: LD_VAR 0 3
8057: PUSH
8058: LD_INT 104
8060: EQUAL
8061: IFFALSE 8071
// sReset := true ;
8063: LD_ADDR_EXP 62
8067: PUSH
8068: LD_INT 1
8070: ST_TO_ADDR
// if p3 = 105 then
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 105
8078: EQUAL
8079: IFFALSE 8089
// sSun := true ;
8081: LD_ADDR_EXP 63
8085: PUSH
8086: LD_INT 1
8088: ST_TO_ADDR
// if p3 = 106 then
8089: LD_VAR 0 3
8093: PUSH
8094: LD_INT 106
8096: EQUAL
8097: IFFALSE 8107
// sTiger := true ;
8099: LD_ADDR_EXP 59
8103: PUSH
8104: LD_INT 1
8106: ST_TO_ADDR
// if p3 = 107 then
8107: LD_VAR 0 3
8111: PUSH
8112: LD_INT 107
8114: EQUAL
8115: IFFALSE 8125
// sBomb := true ;
8117: LD_ADDR_EXP 60
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// if p3 = 108 then
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 108
8132: EQUAL
8133: IFFALSE 8143
// sWound := true ;
8135: LD_ADDR_EXP 68
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// if p3 = 109 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 109
8150: EQUAL
8151: IFFALSE 8161
// sBetray := true ;
8153: LD_ADDR_EXP 72
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// if p3 = 110 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 110
8168: EQUAL
8169: IFFALSE 8179
// sContamin := true ;
8171: LD_ADDR_EXP 73
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// if p3 = 111 then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 111
8186: EQUAL
8187: IFFALSE 8197
// sOil := true ;
8189: LD_ADDR_EXP 75
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// if p3 = 112 then
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 112
8204: EQUAL
8205: IFFALSE 8215
// sStu := true ;
8207: LD_ADDR_EXP 79
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// if p3 = 113 then
8215: LD_VAR 0 3
8219: PUSH
8220: LD_INT 113
8222: EQUAL
8223: IFFALSE 8233
// sBazooka := true ;
8225: LD_ADDR_EXP 82
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// if p3 = 114 then
8233: LD_VAR 0 3
8237: PUSH
8238: LD_INT 114
8240: EQUAL
8241: IFFALSE 8251
// sMortar := true ;
8243: LD_ADDR_EXP 83
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// if p3 = 115 then
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 115
8258: EQUAL
8259: IFFALSE 8269
// sRanger := true ;
8261: LD_ADDR_EXP 93
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// end ; if p2 = 101 then
8269: LD_VAR 0 2
8273: PUSH
8274: LD_INT 101
8276: EQUAL
8277: IFFALSE 8405
// begin case p3 of 1 :
8279: LD_VAR 0 3
8283: PUSH
8284: LD_INT 1
8286: DOUBLE
8287: EQUAL
8288: IFTRUE 8292
8290: GO 8299
8292: POP
// hHackUnlimitedResources ; 2 :
8293: CALL 19440 0 0
8297: GO 8405
8299: LD_INT 2
8301: DOUBLE
8302: EQUAL
8303: IFTRUE 8307
8305: GO 8314
8307: POP
// hHackSetLevel10 ; 3 :
8308: CALL 19573 0 0
8312: GO 8405
8314: LD_INT 3
8316: DOUBLE
8317: EQUAL
8318: IFTRUE 8322
8320: GO 8329
8322: POP
// hHackSetLevel10YourUnits ; 4 :
8323: CALL 19658 0 0
8327: GO 8405
8329: LD_INT 4
8331: DOUBLE
8332: EQUAL
8333: IFTRUE 8337
8335: GO 8344
8337: POP
// hHackInvincible ; 5 :
8338: CALL 20106 0 0
8342: GO 8405
8344: LD_INT 5
8346: DOUBLE
8347: EQUAL
8348: IFTRUE 8352
8350: GO 8359
8352: POP
// hHackInvisible ; 6 :
8353: CALL 20217 0 0
8357: GO 8405
8359: LD_INT 6
8361: DOUBLE
8362: EQUAL
8363: IFTRUE 8367
8365: GO 8374
8367: POP
// hHackChangeYourSide ; 7 :
8368: CALL 20274 0 0
8372: GO 8405
8374: LD_INT 7
8376: DOUBLE
8377: EQUAL
8378: IFTRUE 8382
8380: GO 8389
8382: POP
// hHackChangeUnitSide ; 8 :
8383: CALL 20316 0 0
8387: GO 8405
8389: LD_INT 8
8391: DOUBLE
8392: EQUAL
8393: IFTRUE 8397
8395: GO 8404
8397: POP
// hHackFog ; end ;
8398: CALL 20417 0 0
8402: GO 8405
8404: POP
// end ; end ;
8405: PPOPN 6
8407: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8408: GO 8410
8410: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8411: LD_STRING initStreamRollete();
8413: PPUSH
8414: CALL_OW 559
// InitStreamMode ;
8418: CALL 8427 0 0
// DefineStreamItems ( ) ;
8422: CALL 8867 0 0
// end ;
8426: END
// function InitStreamMode ; begin
8427: LD_INT 0
8429: PPUSH
// streamModeActive := false ;
8430: LD_ADDR_EXP 40
8434: PUSH
8435: LD_INT 0
8437: ST_TO_ADDR
// normalCounter := 36 ;
8438: LD_ADDR_EXP 41
8442: PUSH
8443: LD_INT 36
8445: ST_TO_ADDR
// hardcoreCounter := 16 ;
8446: LD_ADDR_EXP 42
8450: PUSH
8451: LD_INT 16
8453: ST_TO_ADDR
// sRocket := false ;
8454: LD_ADDR_EXP 45
8458: PUSH
8459: LD_INT 0
8461: ST_TO_ADDR
// sSpeed := false ;
8462: LD_ADDR_EXP 44
8466: PUSH
8467: LD_INT 0
8469: ST_TO_ADDR
// sEngine := false ;
8470: LD_ADDR_EXP 46
8474: PUSH
8475: LD_INT 0
8477: ST_TO_ADDR
// sSpec := false ;
8478: LD_ADDR_EXP 43
8482: PUSH
8483: LD_INT 0
8485: ST_TO_ADDR
// sLevel := false ;
8486: LD_ADDR_EXP 47
8490: PUSH
8491: LD_INT 0
8493: ST_TO_ADDR
// sArmoury := false ;
8494: LD_ADDR_EXP 48
8498: PUSH
8499: LD_INT 0
8501: ST_TO_ADDR
// sRadar := false ;
8502: LD_ADDR_EXP 49
8506: PUSH
8507: LD_INT 0
8509: ST_TO_ADDR
// sBunker := false ;
8510: LD_ADDR_EXP 50
8514: PUSH
8515: LD_INT 0
8517: ST_TO_ADDR
// sHack := false ;
8518: LD_ADDR_EXP 51
8522: PUSH
8523: LD_INT 0
8525: ST_TO_ADDR
// sFire := false ;
8526: LD_ADDR_EXP 52
8530: PUSH
8531: LD_INT 0
8533: ST_TO_ADDR
// sRefresh := false ;
8534: LD_ADDR_EXP 53
8538: PUSH
8539: LD_INT 0
8541: ST_TO_ADDR
// sExp := false ;
8542: LD_ADDR_EXP 54
8546: PUSH
8547: LD_INT 0
8549: ST_TO_ADDR
// sDepot := false ;
8550: LD_ADDR_EXP 55
8554: PUSH
8555: LD_INT 0
8557: ST_TO_ADDR
// sFlag := false ;
8558: LD_ADDR_EXP 56
8562: PUSH
8563: LD_INT 0
8565: ST_TO_ADDR
// sKamikadze := false ;
8566: LD_ADDR_EXP 64
8570: PUSH
8571: LD_INT 0
8573: ST_TO_ADDR
// sTroll := false ;
8574: LD_ADDR_EXP 65
8578: PUSH
8579: LD_INT 0
8581: ST_TO_ADDR
// sSlow := false ;
8582: LD_ADDR_EXP 66
8586: PUSH
8587: LD_INT 0
8589: ST_TO_ADDR
// sLack := false ;
8590: LD_ADDR_EXP 67
8594: PUSH
8595: LD_INT 0
8597: ST_TO_ADDR
// sTank := false ;
8598: LD_ADDR_EXP 69
8602: PUSH
8603: LD_INT 0
8605: ST_TO_ADDR
// sRemote := false ;
8606: LD_ADDR_EXP 70
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// sPowell := false ;
8614: LD_ADDR_EXP 71
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// sTeleport := false ;
8622: LD_ADDR_EXP 74
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// sOilTower := false ;
8630: LD_ADDR_EXP 76
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// sShovel := false ;
8638: LD_ADDR_EXP 77
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// sSheik := false ;
8646: LD_ADDR_EXP 78
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// sEarthquake := false ;
8654: LD_ADDR_EXP 80
8658: PUSH
8659: LD_INT 0
8661: ST_TO_ADDR
// sAI := false ;
8662: LD_ADDR_EXP 81
8666: PUSH
8667: LD_INT 0
8669: ST_TO_ADDR
// sCargo := false ;
8670: LD_ADDR_EXP 84
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// sDLaser := false ;
8678: LD_ADDR_EXP 85
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// sExchange := false ;
8686: LD_ADDR_EXP 86
8690: PUSH
8691: LD_INT 0
8693: ST_TO_ADDR
// sFac := false ;
8694: LD_ADDR_EXP 87
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// sPower := false ;
8702: LD_ADDR_EXP 88
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// sRandom := false ;
8710: LD_ADDR_EXP 89
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// sShield := false ;
8718: LD_ADDR_EXP 90
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// sTime := false ;
8726: LD_ADDR_EXP 91
8730: PUSH
8731: LD_INT 0
8733: ST_TO_ADDR
// sTools := false ;
8734: LD_ADDR_EXP 92
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// sSold := false ;
8742: LD_ADDR_EXP 57
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// sDiff := false ;
8750: LD_ADDR_EXP 58
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// sFog := false ;
8758: LD_ADDR_EXP 61
8762: PUSH
8763: LD_INT 0
8765: ST_TO_ADDR
// sReset := false ;
8766: LD_ADDR_EXP 62
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// sSun := false ;
8774: LD_ADDR_EXP 63
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// sTiger := false ;
8782: LD_ADDR_EXP 59
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// sBomb := false ;
8790: LD_ADDR_EXP 60
8794: PUSH
8795: LD_INT 0
8797: ST_TO_ADDR
// sWound := false ;
8798: LD_ADDR_EXP 68
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// sBetray := false ;
8806: LD_ADDR_EXP 72
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// sContamin := false ;
8814: LD_ADDR_EXP 73
8818: PUSH
8819: LD_INT 0
8821: ST_TO_ADDR
// sOil := false ;
8822: LD_ADDR_EXP 75
8826: PUSH
8827: LD_INT 0
8829: ST_TO_ADDR
// sStu := false ;
8830: LD_ADDR_EXP 79
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// sBazooka := false ;
8838: LD_ADDR_EXP 82
8842: PUSH
8843: LD_INT 0
8845: ST_TO_ADDR
// sMortar := false ;
8846: LD_ADDR_EXP 83
8850: PUSH
8851: LD_INT 0
8853: ST_TO_ADDR
// sRanger := false ;
8854: LD_ADDR_EXP 93
8858: PUSH
8859: LD_INT 0
8861: ST_TO_ADDR
// end ;
8862: LD_VAR 0 1
8866: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8867: LD_INT 0
8869: PPUSH
8870: PPUSH
8871: PPUSH
8872: PPUSH
8873: PPUSH
// result := [ ] ;
8874: LD_ADDR_VAR 0 1
8878: PUSH
8879: EMPTY
8880: ST_TO_ADDR
// if campaign_id = 1 then
8881: LD_OWVAR 69
8885: PUSH
8886: LD_INT 1
8888: EQUAL
8889: IFFALSE 11827
// begin case mission_number of 1 :
8891: LD_OWVAR 70
8895: PUSH
8896: LD_INT 1
8898: DOUBLE
8899: EQUAL
8900: IFTRUE 8904
8902: GO 8968
8904: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8905: LD_ADDR_VAR 0 1
8909: PUSH
8910: LD_INT 2
8912: PUSH
8913: LD_INT 4
8915: PUSH
8916: LD_INT 11
8918: PUSH
8919: LD_INT 12
8921: PUSH
8922: LD_INT 15
8924: PUSH
8925: LD_INT 16
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_INT 23
8933: PUSH
8934: LD_INT 26
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 101
8950: PUSH
8951: LD_INT 102
8953: PUSH
8954: LD_INT 106
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: LIST
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: ST_TO_ADDR
8966: GO 11825
8968: LD_INT 2
8970: DOUBLE
8971: EQUAL
8972: IFTRUE 8976
8974: GO 9048
8976: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
8977: LD_ADDR_VAR 0 1
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: LD_INT 4
8987: PUSH
8988: LD_INT 11
8990: PUSH
8991: LD_INT 12
8993: PUSH
8994: LD_INT 15
8996: PUSH
8997: LD_INT 16
8999: PUSH
9000: LD_INT 22
9002: PUSH
9003: LD_INT 23
9005: PUSH
9006: LD_INT 26
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 101
9022: PUSH
9023: LD_INT 102
9025: PUSH
9026: LD_INT 105
9028: PUSH
9029: LD_INT 106
9031: PUSH
9032: LD_INT 108
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: ST_TO_ADDR
9046: GO 11825
9048: LD_INT 3
9050: DOUBLE
9051: EQUAL
9052: IFTRUE 9056
9054: GO 9132
9056: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9057: LD_ADDR_VAR 0 1
9061: PUSH
9062: LD_INT 2
9064: PUSH
9065: LD_INT 4
9067: PUSH
9068: LD_INT 5
9070: PUSH
9071: LD_INT 11
9073: PUSH
9074: LD_INT 12
9076: PUSH
9077: LD_INT 15
9079: PUSH
9080: LD_INT 16
9082: PUSH
9083: LD_INT 22
9085: PUSH
9086: LD_INT 26
9088: PUSH
9089: LD_INT 36
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 101
9106: PUSH
9107: LD_INT 102
9109: PUSH
9110: LD_INT 105
9112: PUSH
9113: LD_INT 106
9115: PUSH
9116: LD_INT 108
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: ST_TO_ADDR
9130: GO 11825
9132: LD_INT 4
9134: DOUBLE
9135: EQUAL
9136: IFTRUE 9140
9138: GO 9224
9140: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9141: LD_ADDR_VAR 0 1
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: LD_INT 4
9151: PUSH
9152: LD_INT 5
9154: PUSH
9155: LD_INT 8
9157: PUSH
9158: LD_INT 11
9160: PUSH
9161: LD_INT 12
9163: PUSH
9164: LD_INT 15
9166: PUSH
9167: LD_INT 16
9169: PUSH
9170: LD_INT 22
9172: PUSH
9173: LD_INT 23
9175: PUSH
9176: LD_INT 26
9178: PUSH
9179: LD_INT 36
9181: PUSH
9182: EMPTY
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 101
9198: PUSH
9199: LD_INT 102
9201: PUSH
9202: LD_INT 105
9204: PUSH
9205: LD_INT 106
9207: PUSH
9208: LD_INT 108
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: ST_TO_ADDR
9222: GO 11825
9224: LD_INT 5
9226: DOUBLE
9227: EQUAL
9228: IFTRUE 9232
9230: GO 9332
9232: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9233: LD_ADDR_VAR 0 1
9237: PUSH
9238: LD_INT 2
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: LD_INT 6
9249: PUSH
9250: LD_INT 8
9252: PUSH
9253: LD_INT 11
9255: PUSH
9256: LD_INT 12
9258: PUSH
9259: LD_INT 15
9261: PUSH
9262: LD_INT 16
9264: PUSH
9265: LD_INT 22
9267: PUSH
9268: LD_INT 23
9270: PUSH
9271: LD_INT 25
9273: PUSH
9274: LD_INT 26
9276: PUSH
9277: LD_INT 36
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: PUSH
9296: LD_INT 101
9298: PUSH
9299: LD_INT 102
9301: PUSH
9302: LD_INT 105
9304: PUSH
9305: LD_INT 106
9307: PUSH
9308: LD_INT 108
9310: PUSH
9311: LD_INT 109
9313: PUSH
9314: LD_INT 112
9316: PUSH
9317: EMPTY
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: ST_TO_ADDR
9330: GO 11825
9332: LD_INT 6
9334: DOUBLE
9335: EQUAL
9336: IFTRUE 9340
9338: GO 9460
9340: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9341: LD_ADDR_VAR 0 1
9345: PUSH
9346: LD_INT 2
9348: PUSH
9349: LD_INT 4
9351: PUSH
9352: LD_INT 5
9354: PUSH
9355: LD_INT 6
9357: PUSH
9358: LD_INT 8
9360: PUSH
9361: LD_INT 11
9363: PUSH
9364: LD_INT 12
9366: PUSH
9367: LD_INT 15
9369: PUSH
9370: LD_INT 16
9372: PUSH
9373: LD_INT 20
9375: PUSH
9376: LD_INT 21
9378: PUSH
9379: LD_INT 22
9381: PUSH
9382: LD_INT 23
9384: PUSH
9385: LD_INT 25
9387: PUSH
9388: LD_INT 26
9390: PUSH
9391: LD_INT 30
9393: PUSH
9394: LD_INT 31
9396: PUSH
9397: LD_INT 32
9399: PUSH
9400: LD_INT 36
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: PUSH
9424: LD_INT 101
9426: PUSH
9427: LD_INT 102
9429: PUSH
9430: LD_INT 105
9432: PUSH
9433: LD_INT 106
9435: PUSH
9436: LD_INT 108
9438: PUSH
9439: LD_INT 109
9441: PUSH
9442: LD_INT 112
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PUSH
9454: EMPTY
9455: LIST
9456: LIST
9457: ST_TO_ADDR
9458: GO 11825
9460: LD_INT 7
9462: DOUBLE
9463: EQUAL
9464: IFTRUE 9468
9466: GO 9568
9468: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9469: LD_ADDR_VAR 0 1
9473: PUSH
9474: LD_INT 2
9476: PUSH
9477: LD_INT 4
9479: PUSH
9480: LD_INT 5
9482: PUSH
9483: LD_INT 7
9485: PUSH
9486: LD_INT 11
9488: PUSH
9489: LD_INT 12
9491: PUSH
9492: LD_INT 15
9494: PUSH
9495: LD_INT 16
9497: PUSH
9498: LD_INT 20
9500: PUSH
9501: LD_INT 21
9503: PUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 23
9509: PUSH
9510: LD_INT 25
9512: PUSH
9513: LD_INT 26
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 101
9534: PUSH
9535: LD_INT 102
9537: PUSH
9538: LD_INT 103
9540: PUSH
9541: LD_INT 105
9543: PUSH
9544: LD_INT 106
9546: PUSH
9547: LD_INT 108
9549: PUSH
9550: LD_INT 112
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: ST_TO_ADDR
9566: GO 11825
9568: LD_INT 8
9570: DOUBLE
9571: EQUAL
9572: IFTRUE 9576
9574: GO 9704
9576: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9577: LD_ADDR_VAR 0 1
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 4
9587: PUSH
9588: LD_INT 5
9590: PUSH
9591: LD_INT 6
9593: PUSH
9594: LD_INT 7
9596: PUSH
9597: LD_INT 8
9599: PUSH
9600: LD_INT 11
9602: PUSH
9603: LD_INT 12
9605: PUSH
9606: LD_INT 15
9608: PUSH
9609: LD_INT 16
9611: PUSH
9612: LD_INT 20
9614: PUSH
9615: LD_INT 21
9617: PUSH
9618: LD_INT 22
9620: PUSH
9621: LD_INT 23
9623: PUSH
9624: LD_INT 25
9626: PUSH
9627: LD_INT 26
9629: PUSH
9630: LD_INT 30
9632: PUSH
9633: LD_INT 31
9635: PUSH
9636: LD_INT 32
9638: PUSH
9639: LD_INT 36
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 101
9666: PUSH
9667: LD_INT 102
9669: PUSH
9670: LD_INT 103
9672: PUSH
9673: LD_INT 105
9675: PUSH
9676: LD_INT 106
9678: PUSH
9679: LD_INT 108
9681: PUSH
9682: LD_INT 109
9684: PUSH
9685: LD_INT 112
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: ST_TO_ADDR
9702: GO 11825
9704: LD_INT 9
9706: DOUBLE
9707: EQUAL
9708: IFTRUE 9712
9710: GO 9848
9712: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9713: LD_ADDR_VAR 0 1
9717: PUSH
9718: LD_INT 2
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: LD_INT 5
9726: PUSH
9727: LD_INT 6
9729: PUSH
9730: LD_INT 7
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 11
9738: PUSH
9739: LD_INT 12
9741: PUSH
9742: LD_INT 15
9744: PUSH
9745: LD_INT 16
9747: PUSH
9748: LD_INT 20
9750: PUSH
9751: LD_INT 21
9753: PUSH
9754: LD_INT 22
9756: PUSH
9757: LD_INT 23
9759: PUSH
9760: LD_INT 25
9762: PUSH
9763: LD_INT 26
9765: PUSH
9766: LD_INT 28
9768: PUSH
9769: LD_INT 30
9771: PUSH
9772: LD_INT 31
9774: PUSH
9775: LD_INT 32
9777: PUSH
9778: LD_INT 36
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 101
9806: PUSH
9807: LD_INT 102
9809: PUSH
9810: LD_INT 103
9812: PUSH
9813: LD_INT 105
9815: PUSH
9816: LD_INT 106
9818: PUSH
9819: LD_INT 108
9821: PUSH
9822: LD_INT 109
9824: PUSH
9825: LD_INT 112
9827: PUSH
9828: LD_INT 114
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: ST_TO_ADDR
9846: GO 11825
9848: LD_INT 10
9850: DOUBLE
9851: EQUAL
9852: IFTRUE 9856
9854: GO 10040
9856: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9857: LD_ADDR_VAR 0 1
9861: PUSH
9862: LD_INT 2
9864: PUSH
9865: LD_INT 4
9867: PUSH
9868: LD_INT 5
9870: PUSH
9871: LD_INT 6
9873: PUSH
9874: LD_INT 7
9876: PUSH
9877: LD_INT 8
9879: PUSH
9880: LD_INT 9
9882: PUSH
9883: LD_INT 10
9885: PUSH
9886: LD_INT 11
9888: PUSH
9889: LD_INT 12
9891: PUSH
9892: LD_INT 13
9894: PUSH
9895: LD_INT 14
9897: PUSH
9898: LD_INT 15
9900: PUSH
9901: LD_INT 16
9903: PUSH
9904: LD_INT 17
9906: PUSH
9907: LD_INT 18
9909: PUSH
9910: LD_INT 19
9912: PUSH
9913: LD_INT 20
9915: PUSH
9916: LD_INT 21
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 23
9924: PUSH
9925: LD_INT 24
9927: PUSH
9928: LD_INT 25
9930: PUSH
9931: LD_INT 26
9933: PUSH
9934: LD_INT 28
9936: PUSH
9937: LD_INT 30
9939: PUSH
9940: LD_INT 31
9942: PUSH
9943: LD_INT 32
9945: PUSH
9946: LD_INT 36
9948: PUSH
9949: EMPTY
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 101
9982: PUSH
9983: LD_INT 102
9985: PUSH
9986: LD_INT 103
9988: PUSH
9989: LD_INT 104
9991: PUSH
9992: LD_INT 105
9994: PUSH
9995: LD_INT 106
9997: PUSH
9998: LD_INT 107
10000: PUSH
10001: LD_INT 108
10003: PUSH
10004: LD_INT 109
10006: PUSH
10007: LD_INT 110
10009: PUSH
10010: LD_INT 111
10012: PUSH
10013: LD_INT 112
10015: PUSH
10016: LD_INT 114
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: ST_TO_ADDR
10038: GO 11825
10040: LD_INT 11
10042: DOUBLE
10043: EQUAL
10044: IFTRUE 10048
10046: GO 10240
10048: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10049: LD_ADDR_VAR 0 1
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 3
10059: PUSH
10060: LD_INT 4
10062: PUSH
10063: LD_INT 5
10065: PUSH
10066: LD_INT 6
10068: PUSH
10069: LD_INT 7
10071: PUSH
10072: LD_INT 8
10074: PUSH
10075: LD_INT 9
10077: PUSH
10078: LD_INT 10
10080: PUSH
10081: LD_INT 11
10083: PUSH
10084: LD_INT 12
10086: PUSH
10087: LD_INT 13
10089: PUSH
10090: LD_INT 14
10092: PUSH
10093: LD_INT 15
10095: PUSH
10096: LD_INT 16
10098: PUSH
10099: LD_INT 17
10101: PUSH
10102: LD_INT 18
10104: PUSH
10105: LD_INT 19
10107: PUSH
10108: LD_INT 20
10110: PUSH
10111: LD_INT 21
10113: PUSH
10114: LD_INT 22
10116: PUSH
10117: LD_INT 23
10119: PUSH
10120: LD_INT 24
10122: PUSH
10123: LD_INT 25
10125: PUSH
10126: LD_INT 26
10128: PUSH
10129: LD_INT 28
10131: PUSH
10132: LD_INT 30
10134: PUSH
10135: LD_INT 31
10137: PUSH
10138: LD_INT 32
10140: PUSH
10141: LD_INT 34
10143: PUSH
10144: LD_INT 36
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: PUSH
10180: LD_INT 101
10182: PUSH
10183: LD_INT 102
10185: PUSH
10186: LD_INT 103
10188: PUSH
10189: LD_INT 104
10191: PUSH
10192: LD_INT 105
10194: PUSH
10195: LD_INT 106
10197: PUSH
10198: LD_INT 107
10200: PUSH
10201: LD_INT 108
10203: PUSH
10204: LD_INT 109
10206: PUSH
10207: LD_INT 110
10209: PUSH
10210: LD_INT 111
10212: PUSH
10213: LD_INT 112
10215: PUSH
10216: LD_INT 114
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: ST_TO_ADDR
10238: GO 11825
10240: LD_INT 12
10242: DOUBLE
10243: EQUAL
10244: IFTRUE 10248
10246: GO 10456
10248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10249: LD_ADDR_VAR 0 1
10253: PUSH
10254: LD_INT 1
10256: PUSH
10257: LD_INT 2
10259: PUSH
10260: LD_INT 3
10262: PUSH
10263: LD_INT 4
10265: PUSH
10266: LD_INT 5
10268: PUSH
10269: LD_INT 6
10271: PUSH
10272: LD_INT 7
10274: PUSH
10275: LD_INT 8
10277: PUSH
10278: LD_INT 9
10280: PUSH
10281: LD_INT 10
10283: PUSH
10284: LD_INT 11
10286: PUSH
10287: LD_INT 12
10289: PUSH
10290: LD_INT 13
10292: PUSH
10293: LD_INT 14
10295: PUSH
10296: LD_INT 15
10298: PUSH
10299: LD_INT 16
10301: PUSH
10302: LD_INT 17
10304: PUSH
10305: LD_INT 18
10307: PUSH
10308: LD_INT 19
10310: PUSH
10311: LD_INT 20
10313: PUSH
10314: LD_INT 21
10316: PUSH
10317: LD_INT 22
10319: PUSH
10320: LD_INT 23
10322: PUSH
10323: LD_INT 24
10325: PUSH
10326: LD_INT 25
10328: PUSH
10329: LD_INT 26
10331: PUSH
10332: LD_INT 27
10334: PUSH
10335: LD_INT 28
10337: PUSH
10338: LD_INT 30
10340: PUSH
10341: LD_INT 31
10343: PUSH
10344: LD_INT 32
10346: PUSH
10347: LD_INT 33
10349: PUSH
10350: LD_INT 34
10352: PUSH
10353: LD_INT 36
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: LIST
10390: LIST
10391: PUSH
10392: LD_INT 101
10394: PUSH
10395: LD_INT 102
10397: PUSH
10398: LD_INT 103
10400: PUSH
10401: LD_INT 104
10403: PUSH
10404: LD_INT 105
10406: PUSH
10407: LD_INT 106
10409: PUSH
10410: LD_INT 107
10412: PUSH
10413: LD_INT 108
10415: PUSH
10416: LD_INT 109
10418: PUSH
10419: LD_INT 110
10421: PUSH
10422: LD_INT 111
10424: PUSH
10425: LD_INT 112
10427: PUSH
10428: LD_INT 113
10430: PUSH
10431: LD_INT 114
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: ST_TO_ADDR
10454: GO 11825
10456: LD_INT 13
10458: DOUBLE
10459: EQUAL
10460: IFTRUE 10464
10462: GO 10660
10464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10465: LD_ADDR_VAR 0 1
10469: PUSH
10470: LD_INT 1
10472: PUSH
10473: LD_INT 2
10475: PUSH
10476: LD_INT 3
10478: PUSH
10479: LD_INT 4
10481: PUSH
10482: LD_INT 5
10484: PUSH
10485: LD_INT 8
10487: PUSH
10488: LD_INT 9
10490: PUSH
10491: LD_INT 10
10493: PUSH
10494: LD_INT 11
10496: PUSH
10497: LD_INT 12
10499: PUSH
10500: LD_INT 14
10502: PUSH
10503: LD_INT 15
10505: PUSH
10506: LD_INT 16
10508: PUSH
10509: LD_INT 17
10511: PUSH
10512: LD_INT 18
10514: PUSH
10515: LD_INT 19
10517: PUSH
10518: LD_INT 20
10520: PUSH
10521: LD_INT 21
10523: PUSH
10524: LD_INT 22
10526: PUSH
10527: LD_INT 23
10529: PUSH
10530: LD_INT 24
10532: PUSH
10533: LD_INT 25
10535: PUSH
10536: LD_INT 26
10538: PUSH
10539: LD_INT 27
10541: PUSH
10542: LD_INT 28
10544: PUSH
10545: LD_INT 30
10547: PUSH
10548: LD_INT 31
10550: PUSH
10551: LD_INT 32
10553: PUSH
10554: LD_INT 33
10556: PUSH
10557: LD_INT 34
10559: PUSH
10560: LD_INT 36
10562: PUSH
10563: EMPTY
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 101
10598: PUSH
10599: LD_INT 102
10601: PUSH
10602: LD_INT 103
10604: PUSH
10605: LD_INT 104
10607: PUSH
10608: LD_INT 105
10610: PUSH
10611: LD_INT 106
10613: PUSH
10614: LD_INT 107
10616: PUSH
10617: LD_INT 108
10619: PUSH
10620: LD_INT 109
10622: PUSH
10623: LD_INT 110
10625: PUSH
10626: LD_INT 111
10628: PUSH
10629: LD_INT 112
10631: PUSH
10632: LD_INT 113
10634: PUSH
10635: LD_INT 114
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: ST_TO_ADDR
10658: GO 11825
10660: LD_INT 14
10662: DOUBLE
10663: EQUAL
10664: IFTRUE 10668
10666: GO 10880
10668: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_INT 1
10676: PUSH
10677: LD_INT 2
10679: PUSH
10680: LD_INT 3
10682: PUSH
10683: LD_INT 4
10685: PUSH
10686: LD_INT 5
10688: PUSH
10689: LD_INT 6
10691: PUSH
10692: LD_INT 7
10694: PUSH
10695: LD_INT 8
10697: PUSH
10698: LD_INT 9
10700: PUSH
10701: LD_INT 10
10703: PUSH
10704: LD_INT 11
10706: PUSH
10707: LD_INT 12
10709: PUSH
10710: LD_INT 13
10712: PUSH
10713: LD_INT 14
10715: PUSH
10716: LD_INT 15
10718: PUSH
10719: LD_INT 16
10721: PUSH
10722: LD_INT 17
10724: PUSH
10725: LD_INT 18
10727: PUSH
10728: LD_INT 19
10730: PUSH
10731: LD_INT 20
10733: PUSH
10734: LD_INT 21
10736: PUSH
10737: LD_INT 22
10739: PUSH
10740: LD_INT 23
10742: PUSH
10743: LD_INT 24
10745: PUSH
10746: LD_INT 25
10748: PUSH
10749: LD_INT 26
10751: PUSH
10752: LD_INT 27
10754: PUSH
10755: LD_INT 28
10757: PUSH
10758: LD_INT 29
10760: PUSH
10761: LD_INT 30
10763: PUSH
10764: LD_INT 31
10766: PUSH
10767: LD_INT 32
10769: PUSH
10770: LD_INT 33
10772: PUSH
10773: LD_INT 34
10775: PUSH
10776: LD_INT 36
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 101
10818: PUSH
10819: LD_INT 102
10821: PUSH
10822: LD_INT 103
10824: PUSH
10825: LD_INT 104
10827: PUSH
10828: LD_INT 105
10830: PUSH
10831: LD_INT 106
10833: PUSH
10834: LD_INT 107
10836: PUSH
10837: LD_INT 108
10839: PUSH
10840: LD_INT 109
10842: PUSH
10843: LD_INT 110
10845: PUSH
10846: LD_INT 111
10848: PUSH
10849: LD_INT 112
10851: PUSH
10852: LD_INT 113
10854: PUSH
10855: LD_INT 114
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: ST_TO_ADDR
10878: GO 11825
10880: LD_INT 15
10882: DOUBLE
10883: EQUAL
10884: IFTRUE 10888
10886: GO 11100
10888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10889: LD_ADDR_VAR 0 1
10893: PUSH
10894: LD_INT 1
10896: PUSH
10897: LD_INT 2
10899: PUSH
10900: LD_INT 3
10902: PUSH
10903: LD_INT 4
10905: PUSH
10906: LD_INT 5
10908: PUSH
10909: LD_INT 6
10911: PUSH
10912: LD_INT 7
10914: PUSH
10915: LD_INT 8
10917: PUSH
10918: LD_INT 9
10920: PUSH
10921: LD_INT 10
10923: PUSH
10924: LD_INT 11
10926: PUSH
10927: LD_INT 12
10929: PUSH
10930: LD_INT 13
10932: PUSH
10933: LD_INT 14
10935: PUSH
10936: LD_INT 15
10938: PUSH
10939: LD_INT 16
10941: PUSH
10942: LD_INT 17
10944: PUSH
10945: LD_INT 18
10947: PUSH
10948: LD_INT 19
10950: PUSH
10951: LD_INT 20
10953: PUSH
10954: LD_INT 21
10956: PUSH
10957: LD_INT 22
10959: PUSH
10960: LD_INT 23
10962: PUSH
10963: LD_INT 24
10965: PUSH
10966: LD_INT 25
10968: PUSH
10969: LD_INT 26
10971: PUSH
10972: LD_INT 27
10974: PUSH
10975: LD_INT 28
10977: PUSH
10978: LD_INT 29
10980: PUSH
10981: LD_INT 30
10983: PUSH
10984: LD_INT 31
10986: PUSH
10987: LD_INT 32
10989: PUSH
10990: LD_INT 33
10992: PUSH
10993: LD_INT 34
10995: PUSH
10996: LD_INT 36
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 101
11038: PUSH
11039: LD_INT 102
11041: PUSH
11042: LD_INT 103
11044: PUSH
11045: LD_INT 104
11047: PUSH
11048: LD_INT 105
11050: PUSH
11051: LD_INT 106
11053: PUSH
11054: LD_INT 107
11056: PUSH
11057: LD_INT 108
11059: PUSH
11060: LD_INT 109
11062: PUSH
11063: LD_INT 110
11065: PUSH
11066: LD_INT 111
11068: PUSH
11069: LD_INT 112
11071: PUSH
11072: LD_INT 113
11074: PUSH
11075: LD_INT 114
11077: PUSH
11078: EMPTY
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: ST_TO_ADDR
11098: GO 11825
11100: LD_INT 16
11102: DOUBLE
11103: EQUAL
11104: IFTRUE 11108
11106: GO 11232
11108: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11109: LD_ADDR_VAR 0 1
11113: PUSH
11114: LD_INT 2
11116: PUSH
11117: LD_INT 4
11119: PUSH
11120: LD_INT 5
11122: PUSH
11123: LD_INT 7
11125: PUSH
11126: LD_INT 11
11128: PUSH
11129: LD_INT 12
11131: PUSH
11132: LD_INT 15
11134: PUSH
11135: LD_INT 16
11137: PUSH
11138: LD_INT 20
11140: PUSH
11141: LD_INT 21
11143: PUSH
11144: LD_INT 22
11146: PUSH
11147: LD_INT 23
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 26
11155: PUSH
11156: LD_INT 30
11158: PUSH
11159: LD_INT 31
11161: PUSH
11162: LD_INT 32
11164: PUSH
11165: LD_INT 33
11167: PUSH
11168: LD_INT 34
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 101
11194: PUSH
11195: LD_INT 102
11197: PUSH
11198: LD_INT 103
11200: PUSH
11201: LD_INT 106
11203: PUSH
11204: LD_INT 108
11206: PUSH
11207: LD_INT 112
11209: PUSH
11210: LD_INT 113
11212: PUSH
11213: LD_INT 114
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: ST_TO_ADDR
11230: GO 11825
11232: LD_INT 17
11234: DOUBLE
11235: EQUAL
11236: IFTRUE 11240
11238: GO 11452
11240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11241: LD_ADDR_VAR 0 1
11245: PUSH
11246: LD_INT 1
11248: PUSH
11249: LD_INT 2
11251: PUSH
11252: LD_INT 3
11254: PUSH
11255: LD_INT 4
11257: PUSH
11258: LD_INT 5
11260: PUSH
11261: LD_INT 6
11263: PUSH
11264: LD_INT 7
11266: PUSH
11267: LD_INT 8
11269: PUSH
11270: LD_INT 9
11272: PUSH
11273: LD_INT 10
11275: PUSH
11276: LD_INT 11
11278: PUSH
11279: LD_INT 12
11281: PUSH
11282: LD_INT 13
11284: PUSH
11285: LD_INT 14
11287: PUSH
11288: LD_INT 15
11290: PUSH
11291: LD_INT 16
11293: PUSH
11294: LD_INT 17
11296: PUSH
11297: LD_INT 18
11299: PUSH
11300: LD_INT 19
11302: PUSH
11303: LD_INT 20
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 22
11311: PUSH
11312: LD_INT 23
11314: PUSH
11315: LD_INT 24
11317: PUSH
11318: LD_INT 25
11320: PUSH
11321: LD_INT 26
11323: PUSH
11324: LD_INT 27
11326: PUSH
11327: LD_INT 28
11329: PUSH
11330: LD_INT 29
11332: PUSH
11333: LD_INT 30
11335: PUSH
11336: LD_INT 31
11338: PUSH
11339: LD_INT 32
11341: PUSH
11342: LD_INT 33
11344: PUSH
11345: LD_INT 34
11347: PUSH
11348: LD_INT 36
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 101
11390: PUSH
11391: LD_INT 102
11393: PUSH
11394: LD_INT 103
11396: PUSH
11397: LD_INT 104
11399: PUSH
11400: LD_INT 105
11402: PUSH
11403: LD_INT 106
11405: PUSH
11406: LD_INT 107
11408: PUSH
11409: LD_INT 108
11411: PUSH
11412: LD_INT 109
11414: PUSH
11415: LD_INT 110
11417: PUSH
11418: LD_INT 111
11420: PUSH
11421: LD_INT 112
11423: PUSH
11424: LD_INT 113
11426: PUSH
11427: LD_INT 114
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: ST_TO_ADDR
11450: GO 11825
11452: LD_INT 18
11454: DOUBLE
11455: EQUAL
11456: IFTRUE 11460
11458: GO 11596
11460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 4
11471: PUSH
11472: LD_INT 5
11474: PUSH
11475: LD_INT 7
11477: PUSH
11478: LD_INT 11
11480: PUSH
11481: LD_INT 12
11483: PUSH
11484: LD_INT 15
11486: PUSH
11487: LD_INT 16
11489: PUSH
11490: LD_INT 20
11492: PUSH
11493: LD_INT 21
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: LD_INT 23
11501: PUSH
11502: LD_INT 25
11504: PUSH
11505: LD_INT 26
11507: PUSH
11508: LD_INT 30
11510: PUSH
11511: LD_INT 31
11513: PUSH
11514: LD_INT 32
11516: PUSH
11517: LD_INT 33
11519: PUSH
11520: LD_INT 34
11522: PUSH
11523: LD_INT 35
11525: PUSH
11526: LD_INT 36
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 101
11554: PUSH
11555: LD_INT 102
11557: PUSH
11558: LD_INT 103
11560: PUSH
11561: LD_INT 106
11563: PUSH
11564: LD_INT 108
11566: PUSH
11567: LD_INT 112
11569: PUSH
11570: LD_INT 113
11572: PUSH
11573: LD_INT 114
11575: PUSH
11576: LD_INT 115
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 11825
11596: LD_INT 19
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11824
11604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11605: LD_ADDR_VAR 0 1
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: LD_INT 4
11621: PUSH
11622: LD_INT 5
11624: PUSH
11625: LD_INT 6
11627: PUSH
11628: LD_INT 7
11630: PUSH
11631: LD_INT 8
11633: PUSH
11634: LD_INT 9
11636: PUSH
11637: LD_INT 10
11639: PUSH
11640: LD_INT 11
11642: PUSH
11643: LD_INT 12
11645: PUSH
11646: LD_INT 13
11648: PUSH
11649: LD_INT 14
11651: PUSH
11652: LD_INT 15
11654: PUSH
11655: LD_INT 16
11657: PUSH
11658: LD_INT 17
11660: PUSH
11661: LD_INT 18
11663: PUSH
11664: LD_INT 19
11666: PUSH
11667: LD_INT 20
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 23
11678: PUSH
11679: LD_INT 24
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 26
11687: PUSH
11688: LD_INT 27
11690: PUSH
11691: LD_INT 28
11693: PUSH
11694: LD_INT 29
11696: PUSH
11697: LD_INT 30
11699: PUSH
11700: LD_INT 31
11702: PUSH
11703: LD_INT 32
11705: PUSH
11706: LD_INT 33
11708: PUSH
11709: LD_INT 34
11711: PUSH
11712: LD_INT 35
11714: PUSH
11715: LD_INT 36
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 101
11758: PUSH
11759: LD_INT 102
11761: PUSH
11762: LD_INT 103
11764: PUSH
11765: LD_INT 104
11767: PUSH
11768: LD_INT 105
11770: PUSH
11771: LD_INT 106
11773: PUSH
11774: LD_INT 107
11776: PUSH
11777: LD_INT 108
11779: PUSH
11780: LD_INT 109
11782: PUSH
11783: LD_INT 110
11785: PUSH
11786: LD_INT 111
11788: PUSH
11789: LD_INT 112
11791: PUSH
11792: LD_INT 113
11794: PUSH
11795: LD_INT 114
11797: PUSH
11798: LD_INT 115
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: ST_TO_ADDR
11822: GO 11825
11824: POP
// end else
11825: GO 12044
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11827: LD_ADDR_VAR 0 1
11831: PUSH
11832: LD_INT 1
11834: PUSH
11835: LD_INT 2
11837: PUSH
11838: LD_INT 3
11840: PUSH
11841: LD_INT 4
11843: PUSH
11844: LD_INT 5
11846: PUSH
11847: LD_INT 6
11849: PUSH
11850: LD_INT 7
11852: PUSH
11853: LD_INT 8
11855: PUSH
11856: LD_INT 9
11858: PUSH
11859: LD_INT 10
11861: PUSH
11862: LD_INT 11
11864: PUSH
11865: LD_INT 12
11867: PUSH
11868: LD_INT 13
11870: PUSH
11871: LD_INT 14
11873: PUSH
11874: LD_INT 15
11876: PUSH
11877: LD_INT 16
11879: PUSH
11880: LD_INT 17
11882: PUSH
11883: LD_INT 18
11885: PUSH
11886: LD_INT 19
11888: PUSH
11889: LD_INT 20
11891: PUSH
11892: LD_INT 21
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 23
11900: PUSH
11901: LD_INT 24
11903: PUSH
11904: LD_INT 25
11906: PUSH
11907: LD_INT 26
11909: PUSH
11910: LD_INT 27
11912: PUSH
11913: LD_INT 28
11915: PUSH
11916: LD_INT 29
11918: PUSH
11919: LD_INT 30
11921: PUSH
11922: LD_INT 31
11924: PUSH
11925: LD_INT 32
11927: PUSH
11928: LD_INT 33
11930: PUSH
11931: LD_INT 34
11933: PUSH
11934: LD_INT 35
11936: PUSH
11937: LD_INT 36
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: LD_INT 101
11980: PUSH
11981: LD_INT 102
11983: PUSH
11984: LD_INT 103
11986: PUSH
11987: LD_INT 104
11989: PUSH
11990: LD_INT 105
11992: PUSH
11993: LD_INT 106
11995: PUSH
11996: LD_INT 107
11998: PUSH
11999: LD_INT 108
12001: PUSH
12002: LD_INT 109
12004: PUSH
12005: LD_INT 110
12007: PUSH
12008: LD_INT 111
12010: PUSH
12011: LD_INT 112
12013: PUSH
12014: LD_INT 113
12016: PUSH
12017: LD_INT 114
12019: PUSH
12020: LD_INT 115
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: ST_TO_ADDR
// if result then
12044: LD_VAR 0 1
12048: IFFALSE 12337
// begin normal :=  ;
12050: LD_ADDR_VAR 0 3
12054: PUSH
12055: LD_STRING 
12057: ST_TO_ADDR
// hardcore :=  ;
12058: LD_ADDR_VAR 0 4
12062: PUSH
12063: LD_STRING 
12065: ST_TO_ADDR
// for i = 1 to normalCounter do
12066: LD_ADDR_VAR 0 5
12070: PUSH
12071: DOUBLE
12072: LD_INT 1
12074: DEC
12075: ST_TO_ADDR
12076: LD_EXP 41
12080: PUSH
12081: FOR_TO
12082: IFFALSE 12183
// begin tmp := 0 ;
12084: LD_ADDR_VAR 0 2
12088: PUSH
12089: LD_STRING 0
12091: ST_TO_ADDR
// if result [ 1 ] then
12092: LD_VAR 0 1
12096: PUSH
12097: LD_INT 1
12099: ARRAY
12100: IFFALSE 12165
// if result [ 1 ] [ 1 ] = i then
12102: LD_VAR 0 1
12106: PUSH
12107: LD_INT 1
12109: ARRAY
12110: PUSH
12111: LD_INT 1
12113: ARRAY
12114: PUSH
12115: LD_VAR 0 5
12119: EQUAL
12120: IFFALSE 12165
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12122: LD_ADDR_VAR 0 1
12126: PUSH
12127: LD_VAR 0 1
12131: PPUSH
12132: LD_INT 1
12134: PPUSH
12135: LD_VAR 0 1
12139: PUSH
12140: LD_INT 1
12142: ARRAY
12143: PPUSH
12144: LD_INT 1
12146: PPUSH
12147: CALL_OW 3
12151: PPUSH
12152: CALL_OW 1
12156: ST_TO_ADDR
// tmp := 1 ;
12157: LD_ADDR_VAR 0 2
12161: PUSH
12162: LD_STRING 1
12164: ST_TO_ADDR
// end ; normal := normal & tmp ;
12165: LD_ADDR_VAR 0 3
12169: PUSH
12170: LD_VAR 0 3
12174: PUSH
12175: LD_VAR 0 2
12179: STR
12180: ST_TO_ADDR
// end ;
12181: GO 12081
12183: POP
12184: POP
// for i = 1 to hardcoreCounter do
12185: LD_ADDR_VAR 0 5
12189: PUSH
12190: DOUBLE
12191: LD_INT 1
12193: DEC
12194: ST_TO_ADDR
12195: LD_EXP 42
12199: PUSH
12200: FOR_TO
12201: IFFALSE 12306
// begin tmp := 0 ;
12203: LD_ADDR_VAR 0 2
12207: PUSH
12208: LD_STRING 0
12210: ST_TO_ADDR
// if result [ 2 ] then
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 2
12218: ARRAY
12219: IFFALSE 12288
// if result [ 2 ] [ 1 ] = 100 + i then
12221: LD_VAR 0 1
12225: PUSH
12226: LD_INT 2
12228: ARRAY
12229: PUSH
12230: LD_INT 1
12232: ARRAY
12233: PUSH
12234: LD_INT 100
12236: PUSH
12237: LD_VAR 0 5
12241: PLUS
12242: EQUAL
12243: IFFALSE 12288
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12245: LD_ADDR_VAR 0 1
12249: PUSH
12250: LD_VAR 0 1
12254: PPUSH
12255: LD_INT 2
12257: PPUSH
12258: LD_VAR 0 1
12262: PUSH
12263: LD_INT 2
12265: ARRAY
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: CALL_OW 3
12274: PPUSH
12275: CALL_OW 1
12279: ST_TO_ADDR
// tmp := 1 ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_STRING 1
12287: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12288: LD_ADDR_VAR 0 4
12292: PUSH
12293: LD_VAR 0 4
12297: PUSH
12298: LD_VAR 0 2
12302: STR
12303: ST_TO_ADDR
// end ;
12304: GO 12200
12306: POP
12307: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12308: LD_STRING getStreamItemsFromMission("
12310: PUSH
12311: LD_VAR 0 3
12315: STR
12316: PUSH
12317: LD_STRING ","
12319: STR
12320: PUSH
12321: LD_VAR 0 4
12325: STR
12326: PUSH
12327: LD_STRING ")
12329: STR
12330: PPUSH
12331: CALL_OW 559
// end else
12335: GO 12344
// ToLua ( getStreamItemsFromMission("","") ) ;
12337: LD_STRING getStreamItemsFromMission("","")
12339: PPUSH
12340: CALL_OW 559
// end ;
12344: LD_VAR 0 1
12348: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12349: LD_EXP 40
12353: PUSH
12354: LD_EXP 45
12358: AND
12359: IFFALSE 12483
12361: GO 12363
12363: DISABLE
12364: LD_INT 0
12366: PPUSH
12367: PPUSH
// begin enable ;
12368: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12369: LD_ADDR_VAR 0 2
12373: PUSH
12374: LD_INT 22
12376: PUSH
12377: LD_OWVAR 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: LD_INT 34
12391: PUSH
12392: LD_INT 7
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 34
12401: PUSH
12402: LD_INT 45
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 34
12411: PUSH
12412: LD_INT 28
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 34
12421: PUSH
12422: LD_INT 47
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PPUSH
12440: CALL_OW 69
12444: ST_TO_ADDR
// if not tmp then
12445: LD_VAR 0 2
12449: NOT
12450: IFFALSE 12454
// exit ;
12452: GO 12483
// for i in tmp do
12454: LD_ADDR_VAR 0 1
12458: PUSH
12459: LD_VAR 0 2
12463: PUSH
12464: FOR_IN
12465: IFFALSE 12481
// begin SetLives ( i , 0 ) ;
12467: LD_VAR 0 1
12471: PPUSH
12472: LD_INT 0
12474: PPUSH
12475: CALL_OW 234
// end ;
12479: GO 12464
12481: POP
12482: POP
// end ;
12483: PPOPN 2
12485: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12486: LD_EXP 40
12490: PUSH
12491: LD_EXP 46
12495: AND
12496: IFFALSE 12580
12498: GO 12500
12500: DISABLE
12501: LD_INT 0
12503: PPUSH
12504: PPUSH
// begin enable ;
12505: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12506: LD_ADDR_VAR 0 2
12510: PUSH
12511: LD_INT 22
12513: PUSH
12514: LD_OWVAR 2
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 32
12525: PUSH
12526: LD_INT 3
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 69
12541: ST_TO_ADDR
// if not tmp then
12542: LD_VAR 0 2
12546: NOT
12547: IFFALSE 12551
// exit ;
12549: GO 12580
// for i in tmp do
12551: LD_ADDR_VAR 0 1
12555: PUSH
12556: LD_VAR 0 2
12560: PUSH
12561: FOR_IN
12562: IFFALSE 12578
// begin SetLives ( i , 0 ) ;
12564: LD_VAR 0 1
12568: PPUSH
12569: LD_INT 0
12571: PPUSH
12572: CALL_OW 234
// end ;
12576: GO 12561
12578: POP
12579: POP
// end ;
12580: PPOPN 2
12582: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12583: LD_EXP 40
12587: PUSH
12588: LD_EXP 43
12592: AND
12593: IFFALSE 12686
12595: GO 12597
12597: DISABLE
12598: LD_INT 0
12600: PPUSH
// begin enable ;
12601: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12602: LD_ADDR_VAR 0 1
12606: PUSH
12607: LD_INT 22
12609: PUSH
12610: LD_OWVAR 2
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PUSH
12619: LD_INT 2
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 5
12627: PUSH
12628: EMPTY
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 25
12634: PUSH
12635: LD_INT 9
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 25
12644: PUSH
12645: LD_INT 8
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PPUSH
12662: CALL_OW 69
12666: PUSH
12667: FOR_IN
12668: IFFALSE 12684
// begin SetClass ( i , 1 ) ;
12670: LD_VAR 0 1
12674: PPUSH
12675: LD_INT 1
12677: PPUSH
12678: CALL_OW 336
// end ;
12682: GO 12667
12684: POP
12685: POP
// end ;
12686: PPOPN 1
12688: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12689: LD_EXP 40
12693: PUSH
12694: LD_EXP 44
12698: AND
12699: PUSH
12700: LD_OWVAR 65
12704: PUSH
12705: LD_INT 7
12707: LESS
12708: AND
12709: IFFALSE 12723
12711: GO 12713
12713: DISABLE
// begin enable ;
12714: ENABLE
// game_speed := 7 ;
12715: LD_ADDR_OWVAR 65
12719: PUSH
12720: LD_INT 7
12722: ST_TO_ADDR
// end ;
12723: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12724: LD_EXP 40
12728: PUSH
12729: LD_EXP 47
12733: AND
12734: IFFALSE 12936
12736: GO 12738
12738: DISABLE
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
12743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12744: LD_ADDR_VAR 0 3
12748: PUSH
12749: LD_INT 81
12751: PUSH
12752: LD_OWVAR 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 21
12763: PUSH
12764: LD_INT 1
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: ST_TO_ADDR
// if not tmp then
12780: LD_VAR 0 3
12784: NOT
12785: IFFALSE 12789
// exit ;
12787: GO 12936
// if tmp > 5 then
12789: LD_VAR 0 3
12793: PUSH
12794: LD_INT 5
12796: GREATER
12797: IFFALSE 12809
// k := 5 else
12799: LD_ADDR_VAR 0 2
12803: PUSH
12804: LD_INT 5
12806: ST_TO_ADDR
12807: GO 12819
// k := tmp ;
12809: LD_ADDR_VAR 0 2
12813: PUSH
12814: LD_VAR 0 3
12818: ST_TO_ADDR
// for i := 1 to k do
12819: LD_ADDR_VAR 0 1
12823: PUSH
12824: DOUBLE
12825: LD_INT 1
12827: DEC
12828: ST_TO_ADDR
12829: LD_VAR 0 2
12833: PUSH
12834: FOR_TO
12835: IFFALSE 12934
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12837: LD_VAR 0 3
12841: PUSH
12842: LD_VAR 0 1
12846: ARRAY
12847: PPUSH
12848: LD_VAR 0 1
12852: PUSH
12853: LD_INT 4
12855: MOD
12856: PUSH
12857: LD_INT 1
12859: PLUS
12860: PPUSH
12861: CALL_OW 259
12865: PUSH
12866: LD_INT 10
12868: LESS
12869: IFFALSE 12932
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12871: LD_VAR 0 3
12875: PUSH
12876: LD_VAR 0 1
12880: ARRAY
12881: PPUSH
12882: LD_VAR 0 1
12886: PUSH
12887: LD_INT 4
12889: MOD
12890: PUSH
12891: LD_INT 1
12893: PLUS
12894: PPUSH
12895: LD_VAR 0 3
12899: PUSH
12900: LD_VAR 0 1
12904: ARRAY
12905: PPUSH
12906: LD_VAR 0 1
12910: PUSH
12911: LD_INT 4
12913: MOD
12914: PUSH
12915: LD_INT 1
12917: PLUS
12918: PPUSH
12919: CALL_OW 259
12923: PUSH
12924: LD_INT 1
12926: PLUS
12927: PPUSH
12928: CALL_OW 237
12932: GO 12834
12934: POP
12935: POP
// end ;
12936: PPOPN 3
12938: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
12939: LD_EXP 40
12943: PUSH
12944: LD_EXP 48
12948: AND
12949: IFFALSE 12969
12951: GO 12953
12953: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
12954: LD_INT 4
12956: PPUSH
12957: LD_OWVAR 2
12961: PPUSH
12962: LD_INT 0
12964: PPUSH
12965: CALL_OW 324
12969: END
// every 0 0$1 trigger StreamModeActive and sShovel do
12970: LD_EXP 40
12974: PUSH
12975: LD_EXP 77
12979: AND
12980: IFFALSE 13000
12982: GO 12984
12984: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
12985: LD_INT 19
12987: PPUSH
12988: LD_OWVAR 2
12992: PPUSH
12993: LD_INT 0
12995: PPUSH
12996: CALL_OW 324
13000: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13001: LD_EXP 40
13005: PUSH
13006: LD_EXP 49
13010: AND
13011: IFFALSE 13113
13013: GO 13015
13015: DISABLE
13016: LD_INT 0
13018: PPUSH
13019: PPUSH
// begin enable ;
13020: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13021: LD_ADDR_VAR 0 2
13025: PUSH
13026: LD_INT 22
13028: PUSH
13029: LD_OWVAR 2
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 2
13040: PUSH
13041: LD_INT 34
13043: PUSH
13044: LD_INT 11
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: PUSH
13051: LD_INT 34
13053: PUSH
13054: LD_INT 30
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PPUSH
13070: CALL_OW 69
13074: ST_TO_ADDR
// if not tmp then
13075: LD_VAR 0 2
13079: NOT
13080: IFFALSE 13084
// exit ;
13082: GO 13113
// for i in tmp do
13084: LD_ADDR_VAR 0 1
13088: PUSH
13089: LD_VAR 0 2
13093: PUSH
13094: FOR_IN
13095: IFFALSE 13111
// begin SetLives ( i , 0 ) ;
13097: LD_VAR 0 1
13101: PPUSH
13102: LD_INT 0
13104: PPUSH
13105: CALL_OW 234
// end ;
13109: GO 13094
13111: POP
13112: POP
// end ;
13113: PPOPN 2
13115: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13116: LD_EXP 40
13120: PUSH
13121: LD_EXP 50
13125: AND
13126: IFFALSE 13146
13128: GO 13130
13130: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13131: LD_INT 32
13133: PPUSH
13134: LD_OWVAR 2
13138: PPUSH
13139: LD_INT 0
13141: PPUSH
13142: CALL_OW 324
13146: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13147: LD_EXP 40
13151: PUSH
13152: LD_EXP 51
13156: AND
13157: IFFALSE 13338
13159: GO 13161
13161: DISABLE
13162: LD_INT 0
13164: PPUSH
13165: PPUSH
13166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13167: LD_ADDR_VAR 0 2
13171: PUSH
13172: LD_INT 22
13174: PUSH
13175: LD_OWVAR 2
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: PUSH
13184: LD_INT 33
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PPUSH
13198: CALL_OW 69
13202: ST_TO_ADDR
// if not tmp then
13203: LD_VAR 0 2
13207: NOT
13208: IFFALSE 13212
// exit ;
13210: GO 13338
// side := 0 ;
13212: LD_ADDR_VAR 0 3
13216: PUSH
13217: LD_INT 0
13219: ST_TO_ADDR
// for i := 1 to 8 do
13220: LD_ADDR_VAR 0 1
13224: PUSH
13225: DOUBLE
13226: LD_INT 1
13228: DEC
13229: ST_TO_ADDR
13230: LD_INT 8
13232: PUSH
13233: FOR_TO
13234: IFFALSE 13282
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13236: LD_OWVAR 2
13240: PUSH
13241: LD_VAR 0 1
13245: NONEQUAL
13246: PUSH
13247: LD_OWVAR 2
13251: PPUSH
13252: LD_VAR 0 1
13256: PPUSH
13257: CALL_OW 81
13261: PUSH
13262: LD_INT 2
13264: EQUAL
13265: AND
13266: IFFALSE 13280
// begin side := i ;
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_VAR 0 1
13277: ST_TO_ADDR
// break ;
13278: GO 13282
// end ;
13280: GO 13233
13282: POP
13283: POP
// if not side then
13284: LD_VAR 0 3
13288: NOT
13289: IFFALSE 13293
// exit ;
13291: GO 13338
// for i := 1 to tmp do
13293: LD_ADDR_VAR 0 1
13297: PUSH
13298: DOUBLE
13299: LD_INT 1
13301: DEC
13302: ST_TO_ADDR
13303: LD_VAR 0 2
13307: PUSH
13308: FOR_TO
13309: IFFALSE 13336
// if Prob ( 60 ) then
13311: LD_INT 60
13313: PPUSH
13314: CALL_OW 13
13318: IFFALSE 13334
// SetSide ( i , side ) ;
13320: LD_VAR 0 1
13324: PPUSH
13325: LD_VAR 0 3
13329: PPUSH
13330: CALL_OW 235
13334: GO 13308
13336: POP
13337: POP
// end ;
13338: PPOPN 3
13340: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13341: LD_EXP 40
13345: PUSH
13346: LD_EXP 53
13350: AND
13351: IFFALSE 13470
13353: GO 13355
13355: DISABLE
13356: LD_INT 0
13358: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13359: LD_ADDR_VAR 0 1
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_OWVAR 2
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 21
13378: PUSH
13379: LD_INT 1
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 3
13388: PUSH
13389: LD_INT 23
13391: PUSH
13392: LD_INT 0
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: LIST
13407: PPUSH
13408: CALL_OW 69
13412: PUSH
13413: FOR_IN
13414: IFFALSE 13468
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13416: LD_VAR 0 1
13420: PPUSH
13421: CALL_OW 257
13425: PUSH
13426: LD_INT 1
13428: PUSH
13429: LD_INT 2
13431: PUSH
13432: LD_INT 3
13434: PUSH
13435: LD_INT 4
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: LIST
13442: LIST
13443: IN
13444: IFFALSE 13466
// SetClass ( un , rand ( 1 , 4 ) ) ;
13446: LD_VAR 0 1
13450: PPUSH
13451: LD_INT 1
13453: PPUSH
13454: LD_INT 4
13456: PPUSH
13457: CALL_OW 12
13461: PPUSH
13462: CALL_OW 336
13466: GO 13413
13468: POP
13469: POP
// end ;
13470: PPOPN 1
13472: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13473: LD_EXP 40
13477: PUSH
13478: LD_EXP 52
13482: AND
13483: IFFALSE 13562
13485: GO 13487
13487: DISABLE
13488: LD_INT 0
13490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13491: LD_ADDR_VAR 0 1
13495: PUSH
13496: LD_INT 22
13498: PUSH
13499: LD_OWVAR 2
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 21
13510: PUSH
13511: LD_INT 3
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PPUSH
13522: CALL_OW 69
13526: ST_TO_ADDR
// if not tmp then
13527: LD_VAR 0 1
13531: NOT
13532: IFFALSE 13536
// exit ;
13534: GO 13562
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13536: LD_VAR 0 1
13540: PUSH
13541: LD_INT 1
13543: PPUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: CALL_OW 12
13553: ARRAY
13554: PPUSH
13555: LD_INT 100
13557: PPUSH
13558: CALL_OW 234
// end ;
13562: PPOPN 1
13564: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13565: LD_EXP 40
13569: PUSH
13570: LD_EXP 54
13574: AND
13575: IFFALSE 13673
13577: GO 13579
13579: DISABLE
13580: LD_INT 0
13582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13583: LD_ADDR_VAR 0 1
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_OWVAR 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 21
13602: PUSH
13603: LD_INT 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: ST_TO_ADDR
// if not tmp then
13619: LD_VAR 0 1
13623: NOT
13624: IFFALSE 13628
// exit ;
13626: GO 13673
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13628: LD_VAR 0 1
13632: PUSH
13633: LD_INT 1
13635: PPUSH
13636: LD_VAR 0 1
13640: PPUSH
13641: CALL_OW 12
13645: ARRAY
13646: PPUSH
13647: LD_INT 1
13649: PPUSH
13650: LD_INT 4
13652: PPUSH
13653: CALL_OW 12
13657: PPUSH
13658: LD_INT 3000
13660: PPUSH
13661: LD_INT 9000
13663: PPUSH
13664: CALL_OW 12
13668: PPUSH
13669: CALL_OW 492
// end ;
13673: PPOPN 1
13675: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13676: LD_EXP 40
13680: PUSH
13681: LD_EXP 55
13685: AND
13686: IFFALSE 13706
13688: GO 13690
13690: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13691: LD_INT 1
13693: PPUSH
13694: LD_OWVAR 2
13698: PPUSH
13699: LD_INT 0
13701: PPUSH
13702: CALL_OW 324
13706: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13707: LD_EXP 40
13711: PUSH
13712: LD_EXP 56
13716: AND
13717: IFFALSE 13800
13719: GO 13721
13721: DISABLE
13722: LD_INT 0
13724: PPUSH
13725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13726: LD_ADDR_VAR 0 2
13730: PUSH
13731: LD_INT 22
13733: PUSH
13734: LD_OWVAR 2
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: PUSH
13743: LD_INT 21
13745: PUSH
13746: LD_INT 3
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PPUSH
13757: CALL_OW 69
13761: ST_TO_ADDR
// if not tmp then
13762: LD_VAR 0 2
13766: NOT
13767: IFFALSE 13771
// exit ;
13769: GO 13800
// for i in tmp do
13771: LD_ADDR_VAR 0 1
13775: PUSH
13776: LD_VAR 0 2
13780: PUSH
13781: FOR_IN
13782: IFFALSE 13798
// SetBLevel ( i , 10 ) ;
13784: LD_VAR 0 1
13788: PPUSH
13789: LD_INT 10
13791: PPUSH
13792: CALL_OW 241
13796: GO 13781
13798: POP
13799: POP
// end ;
13800: PPOPN 2
13802: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13803: LD_EXP 40
13807: PUSH
13808: LD_EXP 57
13812: AND
13813: IFFALSE 13924
13815: GO 13817
13817: DISABLE
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
13822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_INT 22
13830: PUSH
13831: LD_OWVAR 2
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 25
13842: PUSH
13843: LD_INT 1
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PPUSH
13854: CALL_OW 69
13858: ST_TO_ADDR
// if not tmp then
13859: LD_VAR 0 3
13863: NOT
13864: IFFALSE 13868
// exit ;
13866: GO 13924
// un := tmp [ rand ( 1 , tmp ) ] ;
13868: LD_ADDR_VAR 0 2
13872: PUSH
13873: LD_VAR 0 3
13877: PUSH
13878: LD_INT 1
13880: PPUSH
13881: LD_VAR 0 3
13885: PPUSH
13886: CALL_OW 12
13890: ARRAY
13891: ST_TO_ADDR
// if Crawls ( un ) then
13892: LD_VAR 0 2
13896: PPUSH
13897: CALL_OW 318
13901: IFFALSE 13912
// ComWalk ( un ) ;
13903: LD_VAR 0 2
13907: PPUSH
13908: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13912: LD_VAR 0 2
13916: PPUSH
13917: LD_INT 5
13919: PPUSH
13920: CALL_OW 336
// end ;
13924: PPOPN 3
13926: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
13927: LD_EXP 40
13931: PUSH
13932: LD_EXP 58
13936: AND
13937: PUSH
13938: LD_OWVAR 67
13942: PUSH
13943: LD_INT 3
13945: LESS
13946: AND
13947: IFFALSE 13966
13949: GO 13951
13951: DISABLE
// Difficulty := Difficulty + 1 ;
13952: LD_ADDR_OWVAR 67
13956: PUSH
13957: LD_OWVAR 67
13961: PUSH
13962: LD_INT 1
13964: PLUS
13965: ST_TO_ADDR
13966: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
13967: LD_EXP 40
13971: PUSH
13972: LD_EXP 59
13976: AND
13977: IFFALSE 14080
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
// begin for i := 1 to 5 do
13985: LD_ADDR_VAR 0 1
13989: PUSH
13990: DOUBLE
13991: LD_INT 1
13993: DEC
13994: ST_TO_ADDR
13995: LD_INT 5
13997: PUSH
13998: FOR_TO
13999: IFFALSE 14078
// begin uc_nation := nation_nature ;
14001: LD_ADDR_OWVAR 21
14005: PUSH
14006: LD_INT 0
14008: ST_TO_ADDR
// uc_side := 0 ;
14009: LD_ADDR_OWVAR 20
14013: PUSH
14014: LD_INT 0
14016: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14017: LD_ADDR_OWVAR 29
14021: PUSH
14022: LD_INT 12
14024: PUSH
14025: LD_INT 12
14027: PUSH
14028: EMPTY
14029: LIST
14030: LIST
14031: ST_TO_ADDR
// hc_agressivity := 20 ;
14032: LD_ADDR_OWVAR 35
14036: PUSH
14037: LD_INT 20
14039: ST_TO_ADDR
// hc_class := class_tiger ;
14040: LD_ADDR_OWVAR 28
14044: PUSH
14045: LD_INT 14
14047: ST_TO_ADDR
// hc_gallery :=  ;
14048: LD_ADDR_OWVAR 33
14052: PUSH
14053: LD_STRING 
14055: ST_TO_ADDR
// hc_name :=  ;
14056: LD_ADDR_OWVAR 26
14060: PUSH
14061: LD_STRING 
14063: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14064: CALL_OW 44
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 51
// end ;
14076: GO 13998
14078: POP
14079: POP
// end ;
14080: PPOPN 1
14082: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14083: LD_EXP 40
14087: PUSH
14088: LD_EXP 60
14092: AND
14093: IFFALSE 14102
14095: GO 14097
14097: DISABLE
// StreamSibBomb ;
14098: CALL 14103 0 0
14102: END
// export function StreamSibBomb ; var i , x , y ; begin
14103: LD_INT 0
14105: PPUSH
14106: PPUSH
14107: PPUSH
14108: PPUSH
// result := false ;
14109: LD_ADDR_VAR 0 1
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// for i := 1 to 16 do
14117: LD_ADDR_VAR 0 2
14121: PUSH
14122: DOUBLE
14123: LD_INT 1
14125: DEC
14126: ST_TO_ADDR
14127: LD_INT 16
14129: PUSH
14130: FOR_TO
14131: IFFALSE 14330
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14133: LD_ADDR_VAR 0 3
14137: PUSH
14138: LD_INT 10
14140: PUSH
14141: LD_INT 20
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 40
14149: PUSH
14150: LD_INT 50
14152: PUSH
14153: LD_INT 60
14155: PUSH
14156: LD_INT 70
14158: PUSH
14159: LD_INT 80
14161: PUSH
14162: LD_INT 90
14164: PUSH
14165: LD_INT 100
14167: PUSH
14168: LD_INT 110
14170: PUSH
14171: LD_INT 120
14173: PUSH
14174: LD_INT 130
14176: PUSH
14177: LD_INT 140
14179: PUSH
14180: LD_INT 150
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: LD_INT 1
14202: PPUSH
14203: LD_INT 15
14205: PPUSH
14206: CALL_OW 12
14210: ARRAY
14211: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14212: LD_ADDR_VAR 0 4
14216: PUSH
14217: LD_INT 10
14219: PUSH
14220: LD_INT 20
14222: PUSH
14223: LD_INT 30
14225: PUSH
14226: LD_INT 40
14228: PUSH
14229: LD_INT 50
14231: PUSH
14232: LD_INT 60
14234: PUSH
14235: LD_INT 70
14237: PUSH
14238: LD_INT 80
14240: PUSH
14241: LD_INT 90
14243: PUSH
14244: LD_INT 100
14246: PUSH
14247: LD_INT 110
14249: PUSH
14250: LD_INT 120
14252: PUSH
14253: LD_INT 130
14255: PUSH
14256: LD_INT 140
14258: PUSH
14259: LD_INT 150
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: PUSH
14279: LD_INT 1
14281: PPUSH
14282: LD_INT 15
14284: PPUSH
14285: CALL_OW 12
14289: ARRAY
14290: ST_TO_ADDR
// if ValidHex ( x , y ) then
14291: LD_VAR 0 3
14295: PPUSH
14296: LD_VAR 0 4
14300: PPUSH
14301: CALL_OW 488
14305: IFFALSE 14328
// begin result := [ x , y ] ;
14307: LD_ADDR_VAR 0 1
14311: PUSH
14312: LD_VAR 0 3
14316: PUSH
14317: LD_VAR 0 4
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: ST_TO_ADDR
// break ;
14326: GO 14330
// end ; end ;
14328: GO 14130
14330: POP
14331: POP
// if result then
14332: LD_VAR 0 1
14336: IFFALSE 14396
// begin ToLua ( playSibBomb() ) ;
14338: LD_STRING playSibBomb()
14340: PPUSH
14341: CALL_OW 559
// wait ( 0 0$14 ) ;
14345: LD_INT 490
14347: PPUSH
14348: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14352: LD_VAR 0 1
14356: PUSH
14357: LD_INT 1
14359: ARRAY
14360: PPUSH
14361: LD_VAR 0 1
14365: PUSH
14366: LD_INT 2
14368: ARRAY
14369: PPUSH
14370: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14374: LD_VAR 0 1
14378: PUSH
14379: LD_INT 1
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 1
14387: PUSH
14388: LD_INT 2
14390: ARRAY
14391: PPUSH
14392: CALL_OW 429
// end ; end ;
14396: LD_VAR 0 1
14400: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14401: LD_EXP 40
14405: PUSH
14406: LD_EXP 62
14410: AND
14411: IFFALSE 14423
14413: GO 14415
14415: DISABLE
// YouLost (  ) ;
14416: LD_STRING 
14418: PPUSH
14419: CALL_OW 104
14423: END
// every 0 0$1 trigger StreamModeActive and sFog do
14424: LD_EXP 40
14428: PUSH
14429: LD_EXP 61
14433: AND
14434: IFFALSE 14448
14436: GO 14438
14438: DISABLE
// FogOff ( your_side ) ;
14439: LD_OWVAR 2
14443: PPUSH
14444: CALL_OW 344
14448: END
// every 0 0$1 trigger StreamModeActive and sSun do
14449: LD_EXP 40
14453: PUSH
14454: LD_EXP 63
14458: AND
14459: IFFALSE 14487
14461: GO 14463
14463: DISABLE
// begin solar_recharge_percent := 0 ;
14464: LD_ADDR_OWVAR 79
14468: PUSH
14469: LD_INT 0
14471: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14472: LD_INT 10500
14474: PPUSH
14475: CALL_OW 67
// solar_recharge_percent := 100 ;
14479: LD_ADDR_OWVAR 79
14483: PUSH
14484: LD_INT 100
14486: ST_TO_ADDR
// end ;
14487: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14488: LD_EXP 40
14492: PUSH
14493: LD_EXP 64
14497: AND
14498: IFFALSE 14737
14500: GO 14502
14502: DISABLE
14503: LD_INT 0
14505: PPUSH
14506: PPUSH
14507: PPUSH
// begin tmp := [ ] ;
14508: LD_ADDR_VAR 0 3
14512: PUSH
14513: EMPTY
14514: ST_TO_ADDR
// for i := 1 to 6 do
14515: LD_ADDR_VAR 0 1
14519: PUSH
14520: DOUBLE
14521: LD_INT 1
14523: DEC
14524: ST_TO_ADDR
14525: LD_INT 6
14527: PUSH
14528: FOR_TO
14529: IFFALSE 14634
// begin uc_nation := nation_nature ;
14531: LD_ADDR_OWVAR 21
14535: PUSH
14536: LD_INT 0
14538: ST_TO_ADDR
// uc_side := 0 ;
14539: LD_ADDR_OWVAR 20
14543: PUSH
14544: LD_INT 0
14546: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14547: LD_ADDR_OWVAR 29
14551: PUSH
14552: LD_INT 12
14554: PUSH
14555: LD_INT 12
14557: PUSH
14558: EMPTY
14559: LIST
14560: LIST
14561: ST_TO_ADDR
// hc_agressivity := 20 ;
14562: LD_ADDR_OWVAR 35
14566: PUSH
14567: LD_INT 20
14569: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14570: LD_ADDR_OWVAR 28
14574: PUSH
14575: LD_INT 17
14577: ST_TO_ADDR
// hc_gallery :=  ;
14578: LD_ADDR_OWVAR 33
14582: PUSH
14583: LD_STRING 
14585: ST_TO_ADDR
// hc_name :=  ;
14586: LD_ADDR_OWVAR 26
14590: PUSH
14591: LD_STRING 
14593: ST_TO_ADDR
// un := CreateHuman ;
14594: LD_ADDR_VAR 0 2
14598: PUSH
14599: CALL_OW 44
14603: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14604: LD_VAR 0 2
14608: PPUSH
14609: LD_INT 1
14611: PPUSH
14612: CALL_OW 51
// tmp := tmp ^ un ;
14616: LD_ADDR_VAR 0 3
14620: PUSH
14621: LD_VAR 0 3
14625: PUSH
14626: LD_VAR 0 2
14630: ADD
14631: ST_TO_ADDR
// end ;
14632: GO 14528
14634: POP
14635: POP
// repeat wait ( 0 0$1 ) ;
14636: LD_INT 35
14638: PPUSH
14639: CALL_OW 67
// for un in tmp do
14643: LD_ADDR_VAR 0 2
14647: PUSH
14648: LD_VAR 0 3
14652: PUSH
14653: FOR_IN
14654: IFFALSE 14728
// begin if IsDead ( un ) then
14656: LD_VAR 0 2
14660: PPUSH
14661: CALL_OW 301
14665: IFFALSE 14685
// begin tmp := tmp diff un ;
14667: LD_ADDR_VAR 0 3
14671: PUSH
14672: LD_VAR 0 3
14676: PUSH
14677: LD_VAR 0 2
14681: DIFF
14682: ST_TO_ADDR
// continue ;
14683: GO 14653
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14685: LD_VAR 0 2
14689: PPUSH
14690: LD_INT 3
14692: PUSH
14693: LD_INT 22
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: PPUSH
14712: LD_VAR 0 2
14716: PPUSH
14717: CALL_OW 74
14721: PPUSH
14722: CALL_OW 115
// end ;
14726: GO 14653
14728: POP
14729: POP
// until not tmp ;
14730: LD_VAR 0 3
14734: NOT
14735: IFFALSE 14636
// end ;
14737: PPOPN 3
14739: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14740: LD_EXP 40
14744: PUSH
14745: LD_EXP 65
14749: AND
14750: IFFALSE 14804
14752: GO 14754
14754: DISABLE
// begin ToLua ( displayTroll(); ) ;
14755: LD_STRING displayTroll();
14757: PPUSH
14758: CALL_OW 559
// wait ( 3 3$00 ) ;
14762: LD_INT 6300
14764: PPUSH
14765: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14769: LD_STRING hideTroll();
14771: PPUSH
14772: CALL_OW 559
// wait ( 1 1$00 ) ;
14776: LD_INT 2100
14778: PPUSH
14779: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14783: LD_STRING displayTroll();
14785: PPUSH
14786: CALL_OW 559
// wait ( 1 1$00 ) ;
14790: LD_INT 2100
14792: PPUSH
14793: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14797: LD_STRING hideTroll();
14799: PPUSH
14800: CALL_OW 559
// end ;
14804: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14805: LD_EXP 40
14809: PUSH
14810: LD_EXP 66
14814: AND
14815: IFFALSE 14878
14817: GO 14819
14819: DISABLE
14820: LD_INT 0
14822: PPUSH
// begin p := 0 ;
14823: LD_ADDR_VAR 0 1
14827: PUSH
14828: LD_INT 0
14830: ST_TO_ADDR
// repeat game_speed := 1 ;
14831: LD_ADDR_OWVAR 65
14835: PUSH
14836: LD_INT 1
14838: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14839: LD_INT 35
14841: PPUSH
14842: CALL_OW 67
// p := p + 1 ;
14846: LD_ADDR_VAR 0 1
14850: PUSH
14851: LD_VAR 0 1
14855: PUSH
14856: LD_INT 1
14858: PLUS
14859: ST_TO_ADDR
// until p >= 60 ;
14860: LD_VAR 0 1
14864: PUSH
14865: LD_INT 60
14867: GREATEREQUAL
14868: IFFALSE 14831
// game_speed := 4 ;
14870: LD_ADDR_OWVAR 65
14874: PUSH
14875: LD_INT 4
14877: ST_TO_ADDR
// end ;
14878: PPOPN 1
14880: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14881: LD_EXP 40
14885: PUSH
14886: LD_EXP 67
14890: AND
14891: IFFALSE 15037
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
14899: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14900: LD_ADDR_VAR 0 1
14904: PUSH
14905: LD_INT 22
14907: PUSH
14908: LD_OWVAR 2
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 2
14919: PUSH
14920: LD_INT 30
14922: PUSH
14923: LD_INT 0
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: LD_INT 30
14932: PUSH
14933: LD_INT 1
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 69
14953: ST_TO_ADDR
// if not depot then
14954: LD_VAR 0 1
14958: NOT
14959: IFFALSE 14963
// exit ;
14961: GO 15037
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
14963: LD_ADDR_VAR 0 2
14967: PUSH
14968: LD_VAR 0 1
14972: PUSH
14973: LD_INT 1
14975: PPUSH
14976: LD_VAR 0 1
14980: PPUSH
14981: CALL_OW 12
14985: ARRAY
14986: PPUSH
14987: CALL_OW 274
14991: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
14992: LD_VAR 0 2
14996: PPUSH
14997: LD_INT 1
14999: PPUSH
15000: LD_INT 0
15002: PPUSH
15003: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15007: LD_VAR 0 2
15011: PPUSH
15012: LD_INT 2
15014: PPUSH
15015: LD_INT 0
15017: PPUSH
15018: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15022: LD_VAR 0 2
15026: PPUSH
15027: LD_INT 3
15029: PPUSH
15030: LD_INT 0
15032: PPUSH
15033: CALL_OW 277
// end ;
15037: PPOPN 2
15039: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15040: LD_EXP 40
15044: PUSH
15045: LD_EXP 68
15049: AND
15050: IFFALSE 15147
15052: GO 15054
15054: DISABLE
15055: LD_INT 0
15057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15058: LD_ADDR_VAR 0 1
15062: PUSH
15063: LD_INT 22
15065: PUSH
15066: LD_OWVAR 2
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: PUSH
15075: LD_INT 21
15077: PUSH
15078: LD_INT 1
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PUSH
15085: LD_INT 3
15087: PUSH
15088: LD_INT 23
15090: PUSH
15091: LD_INT 0
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: LIST
15106: PPUSH
15107: CALL_OW 69
15111: ST_TO_ADDR
// if not tmp then
15112: LD_VAR 0 1
15116: NOT
15117: IFFALSE 15121
// exit ;
15119: GO 15147
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15121: LD_VAR 0 1
15125: PUSH
15126: LD_INT 1
15128: PPUSH
15129: LD_VAR 0 1
15133: PPUSH
15134: CALL_OW 12
15138: ARRAY
15139: PPUSH
15140: LD_INT 200
15142: PPUSH
15143: CALL_OW 234
// end ;
15147: PPOPN 1
15149: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15150: LD_EXP 40
15154: PUSH
15155: LD_EXP 69
15159: AND
15160: IFFALSE 15239
15162: GO 15164
15164: DISABLE
15165: LD_INT 0
15167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15168: LD_ADDR_VAR 0 1
15172: PUSH
15173: LD_INT 22
15175: PUSH
15176: LD_OWVAR 2
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 21
15187: PUSH
15188: LD_INT 2
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PPUSH
15199: CALL_OW 69
15203: ST_TO_ADDR
// if not tmp then
15204: LD_VAR 0 1
15208: NOT
15209: IFFALSE 15213
// exit ;
15211: GO 15239
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15213: LD_VAR 0 1
15217: PUSH
15218: LD_INT 1
15220: PPUSH
15221: LD_VAR 0 1
15225: PPUSH
15226: CALL_OW 12
15230: ARRAY
15231: PPUSH
15232: LD_INT 60
15234: PPUSH
15235: CALL_OW 234
// end ;
15239: PPOPN 1
15241: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15242: LD_EXP 40
15246: PUSH
15247: LD_EXP 70
15251: AND
15252: IFFALSE 15351
15254: GO 15256
15256: DISABLE
15257: LD_INT 0
15259: PPUSH
15260: PPUSH
// begin enable ;
15261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15262: LD_ADDR_VAR 0 1
15266: PUSH
15267: LD_INT 22
15269: PUSH
15270: LD_OWVAR 2
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 61
15281: PUSH
15282: EMPTY
15283: LIST
15284: PUSH
15285: LD_INT 33
15287: PUSH
15288: LD_INT 2
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: LIST
15299: PPUSH
15300: CALL_OW 69
15304: ST_TO_ADDR
// if not tmp then
15305: LD_VAR 0 1
15309: NOT
15310: IFFALSE 15314
// exit ;
15312: GO 15351
// for i in tmp do
15314: LD_ADDR_VAR 0 2
15318: PUSH
15319: LD_VAR 0 1
15323: PUSH
15324: FOR_IN
15325: IFFALSE 15349
// if IsControledBy ( i ) then
15327: LD_VAR 0 2
15331: PPUSH
15332: CALL_OW 312
15336: IFFALSE 15347
// ComUnlink ( i ) ;
15338: LD_VAR 0 2
15342: PPUSH
15343: CALL_OW 136
15347: GO 15324
15349: POP
15350: POP
// end ;
15351: PPOPN 2
15353: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15354: LD_EXP 40
15358: PUSH
15359: LD_EXP 71
15363: AND
15364: IFFALSE 15504
15366: GO 15368
15368: DISABLE
15369: LD_INT 0
15371: PPUSH
15372: PPUSH
// begin ToLua ( displayPowell(); ) ;
15373: LD_STRING displayPowell();
15375: PPUSH
15376: CALL_OW 559
// uc_side := 0 ;
15380: LD_ADDR_OWVAR 20
15384: PUSH
15385: LD_INT 0
15387: ST_TO_ADDR
// uc_nation := 2 ;
15388: LD_ADDR_OWVAR 21
15392: PUSH
15393: LD_INT 2
15395: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15396: LD_ADDR_OWVAR 37
15400: PUSH
15401: LD_INT 14
15403: ST_TO_ADDR
// vc_engine := engine_siberite ;
15404: LD_ADDR_OWVAR 39
15408: PUSH
15409: LD_INT 3
15411: ST_TO_ADDR
// vc_control := control_apeman ;
15412: LD_ADDR_OWVAR 38
15416: PUSH
15417: LD_INT 5
15419: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15420: LD_ADDR_OWVAR 40
15424: PUSH
15425: LD_INT 29
15427: ST_TO_ADDR
// un := CreateVehicle ;
15428: LD_ADDR_VAR 0 2
15432: PUSH
15433: CALL_OW 45
15437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15438: LD_VAR 0 2
15442: PPUSH
15443: LD_INT 1
15445: PPUSH
15446: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15450: LD_INT 35
15452: PPUSH
15453: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15457: LD_VAR 0 2
15461: PPUSH
15462: LD_INT 22
15464: PUSH
15465: LD_OWVAR 2
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PPUSH
15474: CALL_OW 69
15478: PPUSH
15479: LD_VAR 0 2
15483: PPUSH
15484: CALL_OW 74
15488: PPUSH
15489: CALL_OW 115
// until IsDead ( un ) ;
15493: LD_VAR 0 2
15497: PPUSH
15498: CALL_OW 301
15502: IFFALSE 15450
// end ;
15504: PPOPN 2
15506: END
// every 0 0$1 trigger StreamModeActive and sStu do
15507: LD_EXP 40
15511: PUSH
15512: LD_EXP 79
15516: AND
15517: IFFALSE 15533
15519: GO 15521
15521: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15522: LD_STRING displayStucuk();
15524: PPUSH
15525: CALL_OW 559
// ResetFog ;
15529: CALL_OW 335
// end ;
15533: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15534: LD_EXP 40
15538: PUSH
15539: LD_EXP 72
15543: AND
15544: IFFALSE 15685
15546: GO 15548
15548: DISABLE
15549: LD_INT 0
15551: PPUSH
15552: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15553: LD_ADDR_VAR 0 2
15557: PUSH
15558: LD_INT 22
15560: PUSH
15561: LD_OWVAR 2
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: LD_INT 21
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: ST_TO_ADDR
// if not tmp then
15589: LD_VAR 0 2
15593: NOT
15594: IFFALSE 15598
// exit ;
15596: GO 15685
// un := tmp [ rand ( 1 , tmp ) ] ;
15598: LD_ADDR_VAR 0 1
15602: PUSH
15603: LD_VAR 0 2
15607: PUSH
15608: LD_INT 1
15610: PPUSH
15611: LD_VAR 0 2
15615: PPUSH
15616: CALL_OW 12
15620: ARRAY
15621: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15622: LD_VAR 0 1
15626: PPUSH
15627: LD_INT 0
15629: PPUSH
15630: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15634: LD_VAR 0 1
15638: PPUSH
15639: LD_OWVAR 3
15643: PUSH
15644: LD_VAR 0 1
15648: DIFF
15649: PPUSH
15650: LD_VAR 0 1
15654: PPUSH
15655: CALL_OW 74
15659: PPUSH
15660: CALL_OW 115
// wait ( 0 0$20 ) ;
15664: LD_INT 700
15666: PPUSH
15667: CALL_OW 67
// SetSide ( un , your_side ) ;
15671: LD_VAR 0 1
15675: PPUSH
15676: LD_OWVAR 2
15680: PPUSH
15681: CALL_OW 235
// end ;
15685: PPOPN 2
15687: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15688: LD_EXP 40
15692: PUSH
15693: LD_EXP 73
15697: AND
15698: IFFALSE 15804
15700: GO 15702
15702: DISABLE
15703: LD_INT 0
15705: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15706: LD_ADDR_VAR 0 1
15710: PUSH
15711: LD_INT 22
15713: PUSH
15714: LD_OWVAR 2
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: LD_INT 2
15725: PUSH
15726: LD_INT 30
15728: PUSH
15729: LD_INT 0
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 30
15738: PUSH
15739: LD_INT 1
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: LIST
15750: PUSH
15751: EMPTY
15752: LIST
15753: LIST
15754: PPUSH
15755: CALL_OW 69
15759: ST_TO_ADDR
// if not depot then
15760: LD_VAR 0 1
15764: NOT
15765: IFFALSE 15769
// exit ;
15767: GO 15804
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15769: LD_VAR 0 1
15773: PUSH
15774: LD_INT 1
15776: ARRAY
15777: PPUSH
15778: CALL_OW 250
15782: PPUSH
15783: LD_VAR 0 1
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: PPUSH
15792: CALL_OW 251
15796: PPUSH
15797: LD_INT 70
15799: PPUSH
15800: CALL_OW 495
// end ;
15804: PPOPN 1
15806: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15807: LD_EXP 40
15811: PUSH
15812: LD_EXP 74
15816: AND
15817: IFFALSE 16028
15819: GO 15821
15821: DISABLE
15822: LD_INT 0
15824: PPUSH
15825: PPUSH
15826: PPUSH
15827: PPUSH
15828: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15829: LD_ADDR_VAR 0 5
15833: PUSH
15834: LD_INT 22
15836: PUSH
15837: LD_OWVAR 2
15841: PUSH
15842: EMPTY
15843: LIST
15844: LIST
15845: PUSH
15846: LD_INT 21
15848: PUSH
15849: LD_INT 1
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PPUSH
15860: CALL_OW 69
15864: ST_TO_ADDR
// if not tmp then
15865: LD_VAR 0 5
15869: NOT
15870: IFFALSE 15874
// exit ;
15872: GO 16028
// for i in tmp do
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_VAR 0 5
15883: PUSH
15884: FOR_IN
15885: IFFALSE 16026
// begin d := rand ( 0 , 5 ) ;
15887: LD_ADDR_VAR 0 4
15891: PUSH
15892: LD_INT 0
15894: PPUSH
15895: LD_INT 5
15897: PPUSH
15898: CALL_OW 12
15902: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15903: LD_ADDR_VAR 0 2
15907: PUSH
15908: LD_VAR 0 1
15912: PPUSH
15913: CALL_OW 250
15917: PPUSH
15918: LD_VAR 0 4
15922: PPUSH
15923: LD_INT 3
15925: PPUSH
15926: LD_INT 12
15928: PPUSH
15929: CALL_OW 12
15933: PPUSH
15934: CALL_OW 272
15938: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
15939: LD_ADDR_VAR 0 3
15943: PUSH
15944: LD_VAR 0 1
15948: PPUSH
15949: CALL_OW 251
15953: PPUSH
15954: LD_VAR 0 4
15958: PPUSH
15959: LD_INT 3
15961: PPUSH
15962: LD_INT 12
15964: PPUSH
15965: CALL_OW 12
15969: PPUSH
15970: CALL_OW 273
15974: ST_TO_ADDR
// if ValidHex ( x , y ) then
15975: LD_VAR 0 2
15979: PPUSH
15980: LD_VAR 0 3
15984: PPUSH
15985: CALL_OW 488
15989: IFFALSE 16024
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
15991: LD_VAR 0 1
15995: PPUSH
15996: LD_VAR 0 2
16000: PPUSH
16001: LD_VAR 0 3
16005: PPUSH
16006: LD_INT 3
16008: PPUSH
16009: LD_INT 6
16011: PPUSH
16012: CALL_OW 12
16016: PPUSH
16017: LD_INT 1
16019: PPUSH
16020: CALL_OW 483
// end ;
16024: GO 15884
16026: POP
16027: POP
// end ;
16028: PPOPN 5
16030: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16031: LD_EXP 40
16035: PUSH
16036: LD_EXP 75
16040: AND
16041: IFFALSE 16135
16043: GO 16045
16045: DISABLE
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16050: LD_ADDR_VAR 0 2
16054: PUSH
16055: LD_INT 22
16057: PUSH
16058: LD_OWVAR 2
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 32
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 21
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: ST_TO_ADDR
// if not tmp then
16097: LD_VAR 0 2
16101: NOT
16102: IFFALSE 16106
// exit ;
16104: GO 16135
// for i in tmp do
16106: LD_ADDR_VAR 0 1
16110: PUSH
16111: LD_VAR 0 2
16115: PUSH
16116: FOR_IN
16117: IFFALSE 16133
// SetFuel ( i , 0 ) ;
16119: LD_VAR 0 1
16123: PPUSH
16124: LD_INT 0
16126: PPUSH
16127: CALL_OW 240
16131: GO 16116
16133: POP
16134: POP
// end ;
16135: PPOPN 2
16137: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16138: LD_EXP 40
16142: PUSH
16143: LD_EXP 76
16147: AND
16148: IFFALSE 16214
16150: GO 16152
16152: DISABLE
16153: LD_INT 0
16155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16156: LD_ADDR_VAR 0 1
16160: PUSH
16161: LD_INT 22
16163: PUSH
16164: LD_OWVAR 2
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: PUSH
16173: LD_INT 30
16175: PUSH
16176: LD_INT 29
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: PPUSH
16187: CALL_OW 69
16191: ST_TO_ADDR
// if not tmp then
16192: LD_VAR 0 1
16196: NOT
16197: IFFALSE 16201
// exit ;
16199: GO 16214
// DestroyUnit ( tmp [ 1 ] ) ;
16201: LD_VAR 0 1
16205: PUSH
16206: LD_INT 1
16208: ARRAY
16209: PPUSH
16210: CALL_OW 65
// end ;
16214: PPOPN 1
16216: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16217: LD_EXP 40
16221: PUSH
16222: LD_EXP 78
16226: AND
16227: IFFALSE 16356
16229: GO 16231
16231: DISABLE
16232: LD_INT 0
16234: PPUSH
// begin uc_side := 0 ;
16235: LD_ADDR_OWVAR 20
16239: PUSH
16240: LD_INT 0
16242: ST_TO_ADDR
// uc_nation := nation_arabian ;
16243: LD_ADDR_OWVAR 21
16247: PUSH
16248: LD_INT 2
16250: ST_TO_ADDR
// hc_gallery :=  ;
16251: LD_ADDR_OWVAR 33
16255: PUSH
16256: LD_STRING 
16258: ST_TO_ADDR
// hc_name :=  ;
16259: LD_ADDR_OWVAR 26
16263: PUSH
16264: LD_STRING 
16266: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16267: LD_INT 1
16269: PPUSH
16270: LD_INT 11
16272: PPUSH
16273: LD_INT 10
16275: PPUSH
16276: CALL_OW 380
// un := CreateHuman ;
16280: LD_ADDR_VAR 0 1
16284: PUSH
16285: CALL_OW 44
16289: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_INT 1
16297: PPUSH
16298: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16302: LD_INT 35
16304: PPUSH
16305: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16309: LD_VAR 0 1
16313: PPUSH
16314: LD_INT 22
16316: PUSH
16317: LD_OWVAR 2
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: PPUSH
16331: LD_VAR 0 1
16335: PPUSH
16336: CALL_OW 74
16340: PPUSH
16341: CALL_OW 115
// until IsDead ( un ) ;
16345: LD_VAR 0 1
16349: PPUSH
16350: CALL_OW 301
16354: IFFALSE 16302
// end ;
16356: PPOPN 1
16358: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16359: LD_EXP 40
16363: PUSH
16364: LD_EXP 80
16368: AND
16369: IFFALSE 16381
16371: GO 16373
16373: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16374: LD_STRING earthquake(getX(game), 0, 32)
16376: PPUSH
16377: CALL_OW 559
16381: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16382: LD_EXP 40
16386: PUSH
16387: LD_EXP 81
16391: AND
16392: IFFALSE 16483
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
// begin enable ;
16400: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16401: LD_ADDR_VAR 0 1
16405: PUSH
16406: LD_INT 22
16408: PUSH
16409: LD_OWVAR 2
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: PUSH
16418: LD_INT 21
16420: PUSH
16421: LD_INT 2
16423: PUSH
16424: EMPTY
16425: LIST
16426: LIST
16427: PUSH
16428: LD_INT 33
16430: PUSH
16431: LD_INT 3
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: LIST
16442: PPUSH
16443: CALL_OW 69
16447: ST_TO_ADDR
// if not tmp then
16448: LD_VAR 0 1
16452: NOT
16453: IFFALSE 16457
// exit ;
16455: GO 16483
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16457: LD_VAR 0 1
16461: PUSH
16462: LD_INT 1
16464: PPUSH
16465: LD_VAR 0 1
16469: PPUSH
16470: CALL_OW 12
16474: ARRAY
16475: PPUSH
16476: LD_INT 1
16478: PPUSH
16479: CALL_OW 234
// end ;
16483: PPOPN 1
16485: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16486: LD_EXP 40
16490: PUSH
16491: LD_EXP 82
16495: AND
16496: IFFALSE 16637
16498: GO 16500
16500: DISABLE
16501: LD_INT 0
16503: PPUSH
16504: PPUSH
16505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16506: LD_ADDR_VAR 0 3
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_OWVAR 2
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 25
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PPUSH
16537: CALL_OW 69
16541: ST_TO_ADDR
// if not tmp then
16542: LD_VAR 0 3
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16637
// un := tmp [ rand ( 1 , tmp ) ] ;
16551: LD_ADDR_VAR 0 2
16555: PUSH
16556: LD_VAR 0 3
16560: PUSH
16561: LD_INT 1
16563: PPUSH
16564: LD_VAR 0 3
16568: PPUSH
16569: CALL_OW 12
16573: ARRAY
16574: ST_TO_ADDR
// if Crawls ( un ) then
16575: LD_VAR 0 2
16579: PPUSH
16580: CALL_OW 318
16584: IFFALSE 16595
// ComWalk ( un ) ;
16586: LD_VAR 0 2
16590: PPUSH
16591: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16595: LD_VAR 0 2
16599: PPUSH
16600: LD_INT 9
16602: PPUSH
16603: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16607: LD_INT 28
16609: PPUSH
16610: LD_OWVAR 2
16614: PPUSH
16615: LD_INT 2
16617: PPUSH
16618: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16622: LD_INT 29
16624: PPUSH
16625: LD_OWVAR 2
16629: PPUSH
16630: LD_INT 2
16632: PPUSH
16633: CALL_OW 322
// end ;
16637: PPOPN 3
16639: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16640: LD_EXP 40
16644: PUSH
16645: LD_EXP 83
16649: AND
16650: IFFALSE 16761
16652: GO 16654
16654: DISABLE
16655: LD_INT 0
16657: PPUSH
16658: PPUSH
16659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16660: LD_ADDR_VAR 0 3
16664: PUSH
16665: LD_INT 22
16667: PUSH
16668: LD_OWVAR 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 25
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: EMPTY
16688: LIST
16689: LIST
16690: PPUSH
16691: CALL_OW 69
16695: ST_TO_ADDR
// if not tmp then
16696: LD_VAR 0 3
16700: NOT
16701: IFFALSE 16705
// exit ;
16703: GO 16761
// un := tmp [ rand ( 1 , tmp ) ] ;
16705: LD_ADDR_VAR 0 2
16709: PUSH
16710: LD_VAR 0 3
16714: PUSH
16715: LD_INT 1
16717: PPUSH
16718: LD_VAR 0 3
16722: PPUSH
16723: CALL_OW 12
16727: ARRAY
16728: ST_TO_ADDR
// if Crawls ( un ) then
16729: LD_VAR 0 2
16733: PPUSH
16734: CALL_OW 318
16738: IFFALSE 16749
// ComWalk ( un ) ;
16740: LD_VAR 0 2
16744: PPUSH
16745: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16749: LD_VAR 0 2
16753: PPUSH
16754: LD_INT 8
16756: PPUSH
16757: CALL_OW 336
// end ;
16761: PPOPN 3
16763: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16764: LD_EXP 40
16768: PUSH
16769: LD_EXP 84
16773: AND
16774: IFFALSE 16918
16776: GO 16778
16778: DISABLE
16779: LD_INT 0
16781: PPUSH
16782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16783: LD_ADDR_VAR 0 2
16787: PUSH
16788: LD_INT 22
16790: PUSH
16791: LD_OWVAR 2
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: LD_INT 21
16802: PUSH
16803: LD_INT 2
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: PUSH
16810: LD_INT 2
16812: PUSH
16813: LD_INT 34
16815: PUSH
16816: LD_INT 12
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: PUSH
16823: LD_INT 34
16825: PUSH
16826: LD_INT 51
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: LD_INT 34
16835: PUSH
16836: LD_INT 32
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: PUSH
16849: EMPTY
16850: LIST
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 69
16858: ST_TO_ADDR
// if not tmp then
16859: LD_VAR 0 2
16863: NOT
16864: IFFALSE 16868
// exit ;
16866: GO 16918
// for i in tmp do
16868: LD_ADDR_VAR 0 1
16872: PUSH
16873: LD_VAR 0 2
16877: PUSH
16878: FOR_IN
16879: IFFALSE 16916
// if GetCargo ( i , mat_artifact ) = 0 then
16881: LD_VAR 0 1
16885: PPUSH
16886: LD_INT 4
16888: PPUSH
16889: CALL_OW 289
16893: PUSH
16894: LD_INT 0
16896: EQUAL
16897: IFFALSE 16914
// SetCargo ( i , mat_siberit , 100 ) ;
16899: LD_VAR 0 1
16903: PPUSH
16904: LD_INT 3
16906: PPUSH
16907: LD_INT 100
16909: PPUSH
16910: CALL_OW 290
16914: GO 16878
16916: POP
16917: POP
// end ;
16918: PPOPN 2
16920: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16921: LD_EXP 40
16925: PUSH
16926: LD_EXP 85
16930: AND
16931: IFFALSE 17114
16933: GO 16935
16935: DISABLE
16936: LD_INT 0
16938: PPUSH
16939: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16940: LD_ADDR_VAR 0 2
16944: PUSH
16945: LD_INT 22
16947: PUSH
16948: LD_OWVAR 2
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PPUSH
16957: CALL_OW 69
16961: ST_TO_ADDR
// if not tmp then
16962: LD_VAR 0 2
16966: NOT
16967: IFFALSE 16971
// exit ;
16969: GO 17114
// for i := 1 to 2 do
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: DOUBLE
16977: LD_INT 1
16979: DEC
16980: ST_TO_ADDR
16981: LD_INT 2
16983: PUSH
16984: FOR_TO
16985: IFFALSE 17112
// begin uc_side := your_side ;
16987: LD_ADDR_OWVAR 20
16991: PUSH
16992: LD_OWVAR 2
16996: ST_TO_ADDR
// uc_nation := nation_american ;
16997: LD_ADDR_OWVAR 21
17001: PUSH
17002: LD_INT 1
17004: ST_TO_ADDR
// vc_chassis := us_morphling ;
17005: LD_ADDR_OWVAR 37
17009: PUSH
17010: LD_INT 5
17012: ST_TO_ADDR
// vc_engine := engine_siberite ;
17013: LD_ADDR_OWVAR 39
17017: PUSH
17018: LD_INT 3
17020: ST_TO_ADDR
// vc_control := control_computer ;
17021: LD_ADDR_OWVAR 38
17025: PUSH
17026: LD_INT 3
17028: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17029: LD_ADDR_OWVAR 40
17033: PUSH
17034: LD_INT 10
17036: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17037: LD_VAR 0 2
17041: PUSH
17042: LD_INT 1
17044: ARRAY
17045: PPUSH
17046: CALL_OW 310
17050: NOT
17051: IFFALSE 17098
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17053: CALL_OW 45
17057: PPUSH
17058: LD_VAR 0 2
17062: PUSH
17063: LD_INT 1
17065: ARRAY
17066: PPUSH
17067: CALL_OW 250
17071: PPUSH
17072: LD_VAR 0 2
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PPUSH
17081: CALL_OW 251
17085: PPUSH
17086: LD_INT 12
17088: PPUSH
17089: LD_INT 1
17091: PPUSH
17092: CALL_OW 50
17096: GO 17110
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17098: CALL_OW 45
17102: PPUSH
17103: LD_INT 1
17105: PPUSH
17106: CALL_OW 51
// end ;
17110: GO 16984
17112: POP
17113: POP
// end ;
17114: PPOPN 2
17116: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17117: LD_EXP 40
17121: PUSH
17122: LD_EXP 86
17126: AND
17127: IFFALSE 17349
17129: GO 17131
17131: DISABLE
17132: LD_INT 0
17134: PPUSH
17135: PPUSH
17136: PPUSH
17137: PPUSH
17138: PPUSH
17139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17140: LD_ADDR_VAR 0 6
17144: PUSH
17145: LD_INT 22
17147: PUSH
17148: LD_OWVAR 2
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 21
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 3
17169: PUSH
17170: LD_INT 23
17172: PUSH
17173: LD_INT 0
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: PPUSH
17189: CALL_OW 69
17193: ST_TO_ADDR
// if not tmp then
17194: LD_VAR 0 6
17198: NOT
17199: IFFALSE 17203
// exit ;
17201: GO 17349
// s1 := rand ( 1 , 4 ) ;
17203: LD_ADDR_VAR 0 2
17207: PUSH
17208: LD_INT 1
17210: PPUSH
17211: LD_INT 4
17213: PPUSH
17214: CALL_OW 12
17218: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17219: LD_ADDR_VAR 0 4
17223: PUSH
17224: LD_VAR 0 6
17228: PUSH
17229: LD_INT 1
17231: ARRAY
17232: PPUSH
17233: LD_VAR 0 2
17237: PPUSH
17238: CALL_OW 259
17242: ST_TO_ADDR
// if s1 = 1 then
17243: LD_VAR 0 2
17247: PUSH
17248: LD_INT 1
17250: EQUAL
17251: IFFALSE 17271
// s2 := rand ( 2 , 4 ) else
17253: LD_ADDR_VAR 0 3
17257: PUSH
17258: LD_INT 2
17260: PPUSH
17261: LD_INT 4
17263: PPUSH
17264: CALL_OW 12
17268: ST_TO_ADDR
17269: GO 17279
// s2 := 1 ;
17271: LD_ADDR_VAR 0 3
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17279: LD_ADDR_VAR 0 5
17283: PUSH
17284: LD_VAR 0 6
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PPUSH
17293: LD_VAR 0 3
17297: PPUSH
17298: CALL_OW 259
17302: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17303: LD_VAR 0 6
17307: PUSH
17308: LD_INT 1
17310: ARRAY
17311: PPUSH
17312: LD_VAR 0 2
17316: PPUSH
17317: LD_VAR 0 5
17321: PPUSH
17322: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17326: LD_VAR 0 6
17330: PUSH
17331: LD_INT 1
17333: ARRAY
17334: PPUSH
17335: LD_VAR 0 3
17339: PPUSH
17340: LD_VAR 0 4
17344: PPUSH
17345: CALL_OW 237
// end ;
17349: PPOPN 6
17351: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17352: LD_EXP 40
17356: PUSH
17357: LD_EXP 87
17361: AND
17362: IFFALSE 17441
17364: GO 17366
17366: DISABLE
17367: LD_INT 0
17369: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17370: LD_ADDR_VAR 0 1
17374: PUSH
17375: LD_INT 22
17377: PUSH
17378: LD_OWVAR 2
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 3
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: EMPTY
17398: LIST
17399: LIST
17400: PPUSH
17401: CALL_OW 69
17405: ST_TO_ADDR
// if not tmp then
17406: LD_VAR 0 1
17410: NOT
17411: IFFALSE 17415
// exit ;
17413: GO 17441
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17415: LD_VAR 0 1
17419: PUSH
17420: LD_INT 1
17422: PPUSH
17423: LD_VAR 0 1
17427: PPUSH
17428: CALL_OW 12
17432: ARRAY
17433: PPUSH
17434: LD_INT 1
17436: PPUSH
17437: CALL_OW 234
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17444: LD_EXP 40
17448: PUSH
17449: LD_EXP 88
17453: AND
17454: IFFALSE 17566
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
17462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17463: LD_ADDR_VAR 0 2
17467: PUSH
17468: LD_INT 22
17470: PUSH
17471: LD_OWVAR 2
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 2
17482: PUSH
17483: LD_INT 30
17485: PUSH
17486: LD_INT 27
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 30
17495: PUSH
17496: LD_INT 26
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 30
17505: PUSH
17506: LD_INT 28
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: PUSH
17519: EMPTY
17520: LIST
17521: LIST
17522: PPUSH
17523: CALL_OW 69
17527: ST_TO_ADDR
// if not tmp then
17528: LD_VAR 0 2
17532: NOT
17533: IFFALSE 17537
// exit ;
17535: GO 17566
// for i in tmp do
17537: LD_ADDR_VAR 0 1
17541: PUSH
17542: LD_VAR 0 2
17546: PUSH
17547: FOR_IN
17548: IFFALSE 17564
// SetLives ( i , 1 ) ;
17550: LD_VAR 0 1
17554: PPUSH
17555: LD_INT 1
17557: PPUSH
17558: CALL_OW 234
17562: GO 17547
17564: POP
17565: POP
// end ;
17566: PPOPN 2
17568: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17569: LD_EXP 40
17573: PUSH
17574: LD_EXP 89
17578: AND
17579: IFFALSE 17853
17581: GO 17583
17583: DISABLE
17584: LD_INT 0
17586: PPUSH
17587: PPUSH
17588: PPUSH
// begin i := rand ( 1 , 7 ) ;
17589: LD_ADDR_VAR 0 1
17593: PUSH
17594: LD_INT 1
17596: PPUSH
17597: LD_INT 7
17599: PPUSH
17600: CALL_OW 12
17604: ST_TO_ADDR
// case i of 1 :
17605: LD_VAR 0 1
17609: PUSH
17610: LD_INT 1
17612: DOUBLE
17613: EQUAL
17614: IFTRUE 17618
17616: GO 17628
17618: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17619: LD_STRING earthquake(getX(game), 0, 32)
17621: PPUSH
17622: CALL_OW 559
17626: GO 17853
17628: LD_INT 2
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17650
17636: POP
// begin ToLua ( displayStucuk(); ) ;
17637: LD_STRING displayStucuk();
17639: PPUSH
17640: CALL_OW 559
// ResetFog ;
17644: CALL_OW 335
// end ; 3 :
17648: GO 17853
17650: LD_INT 3
17652: DOUBLE
17653: EQUAL
17654: IFTRUE 17658
17656: GO 17762
17658: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17659: LD_ADDR_VAR 0 2
17663: PUSH
17664: LD_INT 22
17666: PUSH
17667: LD_OWVAR 2
17671: PUSH
17672: EMPTY
17673: LIST
17674: LIST
17675: PUSH
17676: LD_INT 25
17678: PUSH
17679: LD_INT 1
17681: PUSH
17682: EMPTY
17683: LIST
17684: LIST
17685: PUSH
17686: EMPTY
17687: LIST
17688: LIST
17689: PPUSH
17690: CALL_OW 69
17694: ST_TO_ADDR
// if not tmp then
17695: LD_VAR 0 2
17699: NOT
17700: IFFALSE 17704
// exit ;
17702: GO 17853
// un := tmp [ rand ( 1 , tmp ) ] ;
17704: LD_ADDR_VAR 0 3
17708: PUSH
17709: LD_VAR 0 2
17713: PUSH
17714: LD_INT 1
17716: PPUSH
17717: LD_VAR 0 2
17721: PPUSH
17722: CALL_OW 12
17726: ARRAY
17727: ST_TO_ADDR
// if Crawls ( un ) then
17728: LD_VAR 0 3
17732: PPUSH
17733: CALL_OW 318
17737: IFFALSE 17748
// ComWalk ( un ) ;
17739: LD_VAR 0 3
17743: PPUSH
17744: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17748: LD_VAR 0 3
17752: PPUSH
17753: LD_INT 8
17755: PPUSH
17756: CALL_OW 336
// end ; 4 :
17760: GO 17853
17762: LD_INT 4
17764: DOUBLE
17765: EQUAL
17766: IFTRUE 17770
17768: GO 17831
17770: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17771: LD_ADDR_VAR 0 2
17775: PUSH
17776: LD_INT 22
17778: PUSH
17779: LD_OWVAR 2
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 30
17790: PUSH
17791: LD_INT 29
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: ST_TO_ADDR
// if not tmp then
17807: LD_VAR 0 2
17811: NOT
17812: IFFALSE 17816
// exit ;
17814: GO 17853
// DestroyUnit ( tmp [ 1 ] ) ;
17816: LD_VAR 0 2
17820: PUSH
17821: LD_INT 1
17823: ARRAY
17824: PPUSH
17825: CALL_OW 65
// end ; 5 .. 7 :
17829: GO 17853
17831: LD_INT 5
17833: DOUBLE
17834: GREATEREQUAL
17835: IFFALSE 17843
17837: LD_INT 7
17839: DOUBLE
17840: LESSEQUAL
17841: IFTRUE 17845
17843: GO 17852
17845: POP
// StreamSibBomb ; end ;
17846: CALL 14103 0 0
17850: GO 17853
17852: POP
// end ;
17853: PPOPN 3
17855: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17856: LD_EXP 40
17860: PUSH
17861: LD_EXP 90
17865: AND
17866: IFFALSE 18022
17868: GO 17870
17870: DISABLE
17871: LD_INT 0
17873: PPUSH
17874: PPUSH
17875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17876: LD_ADDR_VAR 0 2
17880: PUSH
17881: LD_INT 81
17883: PUSH
17884: LD_OWVAR 2
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 2
17895: PUSH
17896: LD_INT 21
17898: PUSH
17899: LD_INT 1
17901: PUSH
17902: EMPTY
17903: LIST
17904: LIST
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 2
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: LIST
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PPUSH
17925: CALL_OW 69
17929: ST_TO_ADDR
// if not tmp then
17930: LD_VAR 0 2
17934: NOT
17935: IFFALSE 17939
// exit ;
17937: GO 18022
// p := 0 ;
17939: LD_ADDR_VAR 0 3
17943: PUSH
17944: LD_INT 0
17946: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
17947: LD_INT 35
17949: PPUSH
17950: CALL_OW 67
// p := p + 1 ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 1
17966: PLUS
17967: ST_TO_ADDR
// for i in tmp do
17968: LD_ADDR_VAR 0 1
17972: PUSH
17973: LD_VAR 0 2
17977: PUSH
17978: FOR_IN
17979: IFFALSE 18010
// if GetLives ( i ) < 1000 then
17981: LD_VAR 0 1
17985: PPUSH
17986: CALL_OW 256
17990: PUSH
17991: LD_INT 1000
17993: LESS
17994: IFFALSE 18008
// SetLives ( i , 1000 ) ;
17996: LD_VAR 0 1
18000: PPUSH
18001: LD_INT 1000
18003: PPUSH
18004: CALL_OW 234
18008: GO 17978
18010: POP
18011: POP
// until p > 20 ;
18012: LD_VAR 0 3
18016: PUSH
18017: LD_INT 20
18019: GREATER
18020: IFFALSE 17947
// end ;
18022: PPOPN 3
18024: END
// every 0 0$1 trigger StreamModeActive and sTime do
18025: LD_EXP 40
18029: PUSH
18030: LD_EXP 91
18034: AND
18035: IFFALSE 18070
18037: GO 18039
18039: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18040: LD_INT 28
18042: PPUSH
18043: LD_OWVAR 2
18047: PPUSH
18048: LD_INT 2
18050: PPUSH
18051: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18055: LD_INT 30
18057: PPUSH
18058: LD_OWVAR 2
18062: PPUSH
18063: LD_INT 2
18065: PPUSH
18066: CALL_OW 322
// end ;
18070: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18071: LD_EXP 40
18075: PUSH
18076: LD_EXP 92
18080: AND
18081: IFFALSE 18202
18083: GO 18085
18085: DISABLE
18086: LD_INT 0
18088: PPUSH
18089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18090: LD_ADDR_VAR 0 2
18094: PUSH
18095: LD_INT 22
18097: PUSH
18098: LD_OWVAR 2
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 21
18109: PUSH
18110: LD_INT 1
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: LD_INT 3
18119: PUSH
18120: LD_INT 23
18122: PUSH
18123: LD_INT 0
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: LIST
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: ST_TO_ADDR
// if not tmp then
18144: LD_VAR 0 2
18148: NOT
18149: IFFALSE 18153
// exit ;
18151: GO 18202
// for i in tmp do
18153: LD_ADDR_VAR 0 1
18157: PUSH
18158: LD_VAR 0 2
18162: PUSH
18163: FOR_IN
18164: IFFALSE 18200
// begin if Crawls ( i ) then
18166: LD_VAR 0 1
18170: PPUSH
18171: CALL_OW 318
18175: IFFALSE 18186
// ComWalk ( i ) ;
18177: LD_VAR 0 1
18181: PPUSH
18182: CALL_OW 138
// SetClass ( i , 2 ) ;
18186: LD_VAR 0 1
18190: PPUSH
18191: LD_INT 2
18193: PPUSH
18194: CALL_OW 336
// end ;
18198: GO 18163
18200: POP
18201: POP
// end ;
18202: PPOPN 2
18204: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18205: LD_EXP 40
18209: PUSH
18210: LD_EXP 93
18214: AND
18215: IFFALSE 18496
18217: GO 18219
18219: DISABLE
18220: LD_INT 0
18222: PPUSH
18223: PPUSH
18224: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18225: LD_OWVAR 2
18229: PPUSH
18230: LD_INT 9
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: LD_INT 1
18238: PPUSH
18239: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18243: LD_INT 9
18245: PPUSH
18246: LD_OWVAR 2
18250: PPUSH
18251: CALL_OW 343
// uc_side := 9 ;
18255: LD_ADDR_OWVAR 20
18259: PUSH
18260: LD_INT 9
18262: ST_TO_ADDR
// uc_nation := 2 ;
18263: LD_ADDR_OWVAR 21
18267: PUSH
18268: LD_INT 2
18270: ST_TO_ADDR
// hc_name := Dark Warrior ;
18271: LD_ADDR_OWVAR 26
18275: PUSH
18276: LD_STRING Dark Warrior
18278: ST_TO_ADDR
// hc_gallery :=  ;
18279: LD_ADDR_OWVAR 33
18283: PUSH
18284: LD_STRING 
18286: ST_TO_ADDR
// hc_noskilllimit := true ;
18287: LD_ADDR_OWVAR 76
18291: PUSH
18292: LD_INT 1
18294: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18295: LD_ADDR_OWVAR 31
18299: PUSH
18300: LD_INT 30
18302: PUSH
18303: LD_INT 30
18305: PUSH
18306: LD_INT 30
18308: PUSH
18309: LD_INT 30
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: ST_TO_ADDR
// un := CreateHuman ;
18318: LD_ADDR_VAR 0 3
18322: PUSH
18323: CALL_OW 44
18327: ST_TO_ADDR
// hc_noskilllimit := false ;
18328: LD_ADDR_OWVAR 76
18332: PUSH
18333: LD_INT 0
18335: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18336: LD_VAR 0 3
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL_OW 51
// p := 0 ;
18348: LD_ADDR_VAR 0 2
18352: PUSH
18353: LD_INT 0
18355: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18356: LD_INT 35
18358: PPUSH
18359: CALL_OW 67
// p := p + 1 ;
18363: LD_ADDR_VAR 0 2
18367: PUSH
18368: LD_VAR 0 2
18372: PUSH
18373: LD_INT 1
18375: PLUS
18376: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18377: LD_VAR 0 3
18381: PPUSH
18382: CALL_OW 256
18386: PUSH
18387: LD_INT 1000
18389: LESS
18390: IFFALSE 18404
// SetLives ( un , 1000 ) ;
18392: LD_VAR 0 3
18396: PPUSH
18397: LD_INT 1000
18399: PPUSH
18400: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18404: LD_VAR 0 3
18408: PPUSH
18409: LD_INT 81
18411: PUSH
18412: LD_OWVAR 2
18416: PUSH
18417: EMPTY
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 91
18423: PUSH
18424: LD_VAR 0 3
18428: PUSH
18429: LD_INT 30
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: PPUSH
18441: CALL_OW 69
18445: PPUSH
18446: LD_VAR 0 3
18450: PPUSH
18451: CALL_OW 74
18455: PPUSH
18456: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18460: LD_VAR 0 2
18464: PUSH
18465: LD_INT 60
18467: GREATER
18468: PUSH
18469: LD_VAR 0 3
18473: PPUSH
18474: CALL_OW 301
18478: OR
18479: IFFALSE 18356
// if un then
18481: LD_VAR 0 3
18485: IFFALSE 18496
// RemoveUnit ( un ) ;
18487: LD_VAR 0 3
18491: PPUSH
18492: CALL_OW 64
// end ;
18496: PPOPN 3
18498: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18499: LD_INT 0
18501: PPUSH
// case cmd of 301 :
18502: LD_VAR 0 1
18506: PUSH
18507: LD_INT 301
18509: DOUBLE
18510: EQUAL
18511: IFTRUE 18515
18513: GO 18547
18515: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18516: LD_VAR 0 6
18520: PPUSH
18521: LD_VAR 0 7
18525: PPUSH
18526: LD_VAR 0 8
18530: PPUSH
18531: LD_VAR 0 4
18535: PPUSH
18536: LD_VAR 0 5
18540: PPUSH
18541: CALL 19748 0 5
18545: GO 18668
18547: LD_INT 302
18549: DOUBLE
18550: EQUAL
18551: IFTRUE 18555
18553: GO 18592
18555: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18556: LD_VAR 0 6
18560: PPUSH
18561: LD_VAR 0 7
18565: PPUSH
18566: LD_VAR 0 8
18570: PPUSH
18571: LD_VAR 0 9
18575: PPUSH
18576: LD_VAR 0 4
18580: PPUSH
18581: LD_VAR 0 5
18585: PPUSH
18586: CALL 19839 0 6
18590: GO 18668
18592: LD_INT 303
18594: DOUBLE
18595: EQUAL
18596: IFTRUE 18600
18598: GO 18637
18600: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18601: LD_VAR 0 6
18605: PPUSH
18606: LD_VAR 0 7
18610: PPUSH
18611: LD_VAR 0 8
18615: PPUSH
18616: LD_VAR 0 9
18620: PPUSH
18621: LD_VAR 0 4
18625: PPUSH
18626: LD_VAR 0 5
18630: PPUSH
18631: CALL 18673 0 6
18635: GO 18668
18637: LD_INT 304
18639: DOUBLE
18640: EQUAL
18641: IFTRUE 18645
18643: GO 18667
18645: POP
// hHackTeleport ( unit , x , y ) ; end ;
18646: LD_VAR 0 2
18650: PPUSH
18651: LD_VAR 0 4
18655: PPUSH
18656: LD_VAR 0 5
18660: PPUSH
18661: CALL 20432 0 3
18665: GO 18668
18667: POP
// end ;
18668: LD_VAR 0 12
18672: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18673: LD_INT 0
18675: PPUSH
18676: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18677: LD_VAR 0 1
18681: PUSH
18682: LD_INT 1
18684: LESS
18685: PUSH
18686: LD_VAR 0 1
18690: PUSH
18691: LD_INT 3
18693: GREATER
18694: OR
18695: PUSH
18696: LD_VAR 0 5
18700: PPUSH
18701: LD_VAR 0 6
18705: PPUSH
18706: CALL_OW 428
18710: OR
18711: IFFALSE 18715
// exit ;
18713: GO 19435
// uc_side := your_side ;
18715: LD_ADDR_OWVAR 20
18719: PUSH
18720: LD_OWVAR 2
18724: ST_TO_ADDR
// uc_nation := nation ;
18725: LD_ADDR_OWVAR 21
18729: PUSH
18730: LD_VAR 0 1
18734: ST_TO_ADDR
// bc_level = 1 ;
18735: LD_ADDR_OWVAR 43
18739: PUSH
18740: LD_INT 1
18742: ST_TO_ADDR
// case btype of 1 :
18743: LD_VAR 0 2
18747: PUSH
18748: LD_INT 1
18750: DOUBLE
18751: EQUAL
18752: IFTRUE 18756
18754: GO 18767
18756: POP
// bc_type := b_depot ; 2 :
18757: LD_ADDR_OWVAR 42
18761: PUSH
18762: LD_INT 0
18764: ST_TO_ADDR
18765: GO 19379
18767: LD_INT 2
18769: DOUBLE
18770: EQUAL
18771: IFTRUE 18775
18773: GO 18786
18775: POP
// bc_type := b_warehouse ; 3 :
18776: LD_ADDR_OWVAR 42
18780: PUSH
18781: LD_INT 1
18783: ST_TO_ADDR
18784: GO 19379
18786: LD_INT 3
18788: DOUBLE
18789: EQUAL
18790: IFTRUE 18794
18792: GO 18805
18794: POP
// bc_type := b_lab ; 4 .. 9 :
18795: LD_ADDR_OWVAR 42
18799: PUSH
18800: LD_INT 6
18802: ST_TO_ADDR
18803: GO 19379
18805: LD_INT 4
18807: DOUBLE
18808: GREATEREQUAL
18809: IFFALSE 18817
18811: LD_INT 9
18813: DOUBLE
18814: LESSEQUAL
18815: IFTRUE 18819
18817: GO 18871
18819: POP
// begin bc_type := b_lab_half ;
18820: LD_ADDR_OWVAR 42
18824: PUSH
18825: LD_INT 7
18827: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18828: LD_ADDR_OWVAR 44
18832: PUSH
18833: LD_INT 10
18835: PUSH
18836: LD_INT 11
18838: PUSH
18839: LD_INT 12
18841: PUSH
18842: LD_INT 15
18844: PUSH
18845: LD_INT 14
18847: PUSH
18848: LD_INT 13
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: PUSH
18859: LD_VAR 0 2
18863: PUSH
18864: LD_INT 3
18866: MINUS
18867: ARRAY
18868: ST_TO_ADDR
// end ; 10 .. 13 :
18869: GO 19379
18871: LD_INT 10
18873: DOUBLE
18874: GREATEREQUAL
18875: IFFALSE 18883
18877: LD_INT 13
18879: DOUBLE
18880: LESSEQUAL
18881: IFTRUE 18885
18883: GO 18962
18885: POP
// begin bc_type := b_lab_full ;
18886: LD_ADDR_OWVAR 42
18890: PUSH
18891: LD_INT 8
18893: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18894: LD_ADDR_OWVAR 44
18898: PUSH
18899: LD_INT 10
18901: PUSH
18902: LD_INT 12
18904: PUSH
18905: LD_INT 14
18907: PUSH
18908: LD_INT 13
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: PUSH
18917: LD_VAR 0 2
18921: PUSH
18922: LD_INT 9
18924: MINUS
18925: ARRAY
18926: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
18927: LD_ADDR_OWVAR 45
18931: PUSH
18932: LD_INT 11
18934: PUSH
18935: LD_INT 15
18937: PUSH
18938: LD_INT 12
18940: PUSH
18941: LD_INT 15
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: PUSH
18950: LD_VAR 0 2
18954: PUSH
18955: LD_INT 9
18957: MINUS
18958: ARRAY
18959: ST_TO_ADDR
// end ; 14 :
18960: GO 19379
18962: LD_INT 14
18964: DOUBLE
18965: EQUAL
18966: IFTRUE 18970
18968: GO 18981
18970: POP
// bc_type := b_workshop ; 15 :
18971: LD_ADDR_OWVAR 42
18975: PUSH
18976: LD_INT 2
18978: ST_TO_ADDR
18979: GO 19379
18981: LD_INT 15
18983: DOUBLE
18984: EQUAL
18985: IFTRUE 18989
18987: GO 19000
18989: POP
// bc_type := b_factory ; 16 :
18990: LD_ADDR_OWVAR 42
18994: PUSH
18995: LD_INT 3
18997: ST_TO_ADDR
18998: GO 19379
19000: LD_INT 16
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19019
19008: POP
// bc_type := b_ext_gun ; 17 :
19009: LD_ADDR_OWVAR 42
19013: PUSH
19014: LD_INT 17
19016: ST_TO_ADDR
19017: GO 19379
19019: LD_INT 17
19021: DOUBLE
19022: EQUAL
19023: IFTRUE 19027
19025: GO 19055
19027: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19028: LD_ADDR_OWVAR 42
19032: PUSH
19033: LD_INT 19
19035: PUSH
19036: LD_INT 23
19038: PUSH
19039: LD_INT 19
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: LIST
19046: PUSH
19047: LD_VAR 0 1
19051: ARRAY
19052: ST_TO_ADDR
19053: GO 19379
19055: LD_INT 18
19057: DOUBLE
19058: EQUAL
19059: IFTRUE 19063
19061: GO 19074
19063: POP
// bc_type := b_ext_radar ; 19 :
19064: LD_ADDR_OWVAR 42
19068: PUSH
19069: LD_INT 20
19071: ST_TO_ADDR
19072: GO 19379
19074: LD_INT 19
19076: DOUBLE
19077: EQUAL
19078: IFTRUE 19082
19080: GO 19093
19082: POP
// bc_type := b_ext_radio ; 20 :
19083: LD_ADDR_OWVAR 42
19087: PUSH
19088: LD_INT 22
19090: ST_TO_ADDR
19091: GO 19379
19093: LD_INT 20
19095: DOUBLE
19096: EQUAL
19097: IFTRUE 19101
19099: GO 19112
19101: POP
// bc_type := b_ext_siberium ; 21 :
19102: LD_ADDR_OWVAR 42
19106: PUSH
19107: LD_INT 21
19109: ST_TO_ADDR
19110: GO 19379
19112: LD_INT 21
19114: DOUBLE
19115: EQUAL
19116: IFTRUE 19120
19118: GO 19131
19120: POP
// bc_type := b_ext_computer ; 22 :
19121: LD_ADDR_OWVAR 42
19125: PUSH
19126: LD_INT 24
19128: ST_TO_ADDR
19129: GO 19379
19131: LD_INT 22
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19150
19139: POP
// bc_type := b_ext_track ; 23 :
19140: LD_ADDR_OWVAR 42
19144: PUSH
19145: LD_INT 16
19147: ST_TO_ADDR
19148: GO 19379
19150: LD_INT 23
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19169
19158: POP
// bc_type := b_ext_laser ; 24 :
19159: LD_ADDR_OWVAR 42
19163: PUSH
19164: LD_INT 25
19166: ST_TO_ADDR
19167: GO 19379
19169: LD_INT 24
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19188
19177: POP
// bc_type := b_control_tower ; 25 :
19178: LD_ADDR_OWVAR 42
19182: PUSH
19183: LD_INT 36
19185: ST_TO_ADDR
19186: GO 19379
19188: LD_INT 25
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19207
19196: POP
// bc_type := b_breastwork ; 26 :
19197: LD_ADDR_OWVAR 42
19201: PUSH
19202: LD_INT 31
19204: ST_TO_ADDR
19205: GO 19379
19207: LD_INT 26
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19226
19215: POP
// bc_type := b_bunker ; 27 :
19216: LD_ADDR_OWVAR 42
19220: PUSH
19221: LD_INT 32
19223: ST_TO_ADDR
19224: GO 19379
19226: LD_INT 27
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19245
19234: POP
// bc_type := b_turret ; 28 :
19235: LD_ADDR_OWVAR 42
19239: PUSH
19240: LD_INT 33
19242: ST_TO_ADDR
19243: GO 19379
19245: LD_INT 28
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19264
19253: POP
// bc_type := b_armoury ; 29 :
19254: LD_ADDR_OWVAR 42
19258: PUSH
19259: LD_INT 4
19261: ST_TO_ADDR
19262: GO 19379
19264: LD_INT 29
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19283
19272: POP
// bc_type := b_barracks ; 30 :
19273: LD_ADDR_OWVAR 42
19277: PUSH
19278: LD_INT 5
19280: ST_TO_ADDR
19281: GO 19379
19283: LD_INT 30
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19302
19291: POP
// bc_type := b_solar_power ; 31 :
19292: LD_ADDR_OWVAR 42
19296: PUSH
19297: LD_INT 27
19299: ST_TO_ADDR
19300: GO 19379
19302: LD_INT 31
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19321
19310: POP
// bc_type := b_oil_power ; 32 :
19311: LD_ADDR_OWVAR 42
19315: PUSH
19316: LD_INT 26
19318: ST_TO_ADDR
19319: GO 19379
19321: LD_INT 32
19323: DOUBLE
19324: EQUAL
19325: IFTRUE 19329
19327: GO 19340
19329: POP
// bc_type := b_siberite_power ; 33 :
19330: LD_ADDR_OWVAR 42
19334: PUSH
19335: LD_INT 28
19337: ST_TO_ADDR
19338: GO 19379
19340: LD_INT 33
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19359
19348: POP
// bc_type := b_oil_mine ; 34 :
19349: LD_ADDR_OWVAR 42
19353: PUSH
19354: LD_INT 29
19356: ST_TO_ADDR
19357: GO 19379
19359: LD_INT 34
19361: DOUBLE
19362: EQUAL
19363: IFTRUE 19367
19365: GO 19378
19367: POP
// bc_type := b_siberite_mine ; end ;
19368: LD_ADDR_OWVAR 42
19372: PUSH
19373: LD_INT 30
19375: ST_TO_ADDR
19376: GO 19379
19378: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19379: LD_ADDR_VAR 0 8
19383: PUSH
19384: LD_VAR 0 5
19388: PPUSH
19389: LD_VAR 0 6
19393: PPUSH
19394: LD_VAR 0 3
19398: PPUSH
19399: CALL_OW 47
19403: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19404: LD_OWVAR 42
19408: PUSH
19409: LD_INT 32
19411: PUSH
19412: LD_INT 33
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: IN
19419: IFFALSE 19435
// PlaceWeaponTurret ( b , weapon ) ;
19421: LD_VAR 0 8
19425: PPUSH
19426: LD_VAR 0 4
19430: PPUSH
19431: CALL_OW 431
// end ;
19435: LD_VAR 0 7
19439: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19440: LD_INT 0
19442: PPUSH
19443: PPUSH
19444: PPUSH
19445: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19446: LD_ADDR_VAR 0 4
19450: PUSH
19451: LD_INT 22
19453: PUSH
19454: LD_OWVAR 2
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 30
19468: PUSH
19469: LD_INT 0
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: PUSH
19476: LD_INT 30
19478: PUSH
19479: LD_INT 1
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: LIST
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PPUSH
19495: CALL_OW 69
19499: ST_TO_ADDR
// if not tmp then
19500: LD_VAR 0 4
19504: NOT
19505: IFFALSE 19509
// exit ;
19507: GO 19568
// for i in tmp do
19509: LD_ADDR_VAR 0 2
19513: PUSH
19514: LD_VAR 0 4
19518: PUSH
19519: FOR_IN
19520: IFFALSE 19566
// for j = 1 to 3 do
19522: LD_ADDR_VAR 0 3
19526: PUSH
19527: DOUBLE
19528: LD_INT 1
19530: DEC
19531: ST_TO_ADDR
19532: LD_INT 3
19534: PUSH
19535: FOR_TO
19536: IFFALSE 19562
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19538: LD_VAR 0 2
19542: PPUSH
19543: CALL_OW 274
19547: PPUSH
19548: LD_VAR 0 3
19552: PPUSH
19553: LD_INT 99999
19555: PPUSH
19556: CALL_OW 277
19560: GO 19535
19562: POP
19563: POP
19564: GO 19519
19566: POP
19567: POP
// end ;
19568: LD_VAR 0 1
19572: RET
// export function hHackSetLevel10 ; var i , j ; begin
19573: LD_INT 0
19575: PPUSH
19576: PPUSH
19577: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19578: LD_ADDR_VAR 0 2
19582: PUSH
19583: LD_INT 21
19585: PUSH
19586: LD_INT 1
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: PUSH
19598: FOR_IN
19599: IFFALSE 19651
// if IsSelected ( i ) then
19601: LD_VAR 0 2
19605: PPUSH
19606: CALL_OW 306
19610: IFFALSE 19649
// begin for j := 1 to 4 do
19612: LD_ADDR_VAR 0 3
19616: PUSH
19617: DOUBLE
19618: LD_INT 1
19620: DEC
19621: ST_TO_ADDR
19622: LD_INT 4
19624: PUSH
19625: FOR_TO
19626: IFFALSE 19647
// SetSkill ( i , j , 10 ) ;
19628: LD_VAR 0 2
19632: PPUSH
19633: LD_VAR 0 3
19637: PPUSH
19638: LD_INT 10
19640: PPUSH
19641: CALL_OW 237
19645: GO 19625
19647: POP
19648: POP
// end ;
19649: GO 19598
19651: POP
19652: POP
// end ;
19653: LD_VAR 0 1
19657: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19658: LD_INT 0
19660: PPUSH
19661: PPUSH
19662: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19663: LD_ADDR_VAR 0 2
19667: PUSH
19668: LD_INT 22
19670: PUSH
19671: LD_OWVAR 2
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 21
19682: PUSH
19683: LD_INT 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PPUSH
19694: CALL_OW 69
19698: PUSH
19699: FOR_IN
19700: IFFALSE 19741
// begin for j := 1 to 4 do
19702: LD_ADDR_VAR 0 3
19706: PUSH
19707: DOUBLE
19708: LD_INT 1
19710: DEC
19711: ST_TO_ADDR
19712: LD_INT 4
19714: PUSH
19715: FOR_TO
19716: IFFALSE 19737
// SetSkill ( i , j , 10 ) ;
19718: LD_VAR 0 2
19722: PPUSH
19723: LD_VAR 0 3
19727: PPUSH
19728: LD_INT 10
19730: PPUSH
19731: CALL_OW 237
19735: GO 19715
19737: POP
19738: POP
// end ;
19739: GO 19699
19741: POP
19742: POP
// end ;
19743: LD_VAR 0 1
19747: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19748: LD_INT 0
19750: PPUSH
// uc_side := your_side ;
19751: LD_ADDR_OWVAR 20
19755: PUSH
19756: LD_OWVAR 2
19760: ST_TO_ADDR
// uc_nation := nation ;
19761: LD_ADDR_OWVAR 21
19765: PUSH
19766: LD_VAR 0 1
19770: ST_TO_ADDR
// InitHc ;
19771: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19775: LD_INT 0
19777: PPUSH
19778: LD_VAR 0 2
19782: PPUSH
19783: LD_VAR 0 3
19787: PPUSH
19788: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19792: LD_VAR 0 4
19796: PPUSH
19797: LD_VAR 0 5
19801: PPUSH
19802: CALL_OW 428
19806: PUSH
19807: LD_INT 0
19809: EQUAL
19810: IFFALSE 19834
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19812: CALL_OW 44
19816: PPUSH
19817: LD_VAR 0 4
19821: PPUSH
19822: LD_VAR 0 5
19826: PPUSH
19827: LD_INT 1
19829: PPUSH
19830: CALL_OW 48
// end ;
19834: LD_VAR 0 6
19838: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19839: LD_INT 0
19841: PPUSH
19842: PPUSH
// uc_side := your_side ;
19843: LD_ADDR_OWVAR 20
19847: PUSH
19848: LD_OWVAR 2
19852: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19853: LD_VAR 0 1
19857: PUSH
19858: LD_INT 1
19860: PUSH
19861: LD_INT 2
19863: PUSH
19864: LD_INT 3
19866: PUSH
19867: LD_INT 4
19869: PUSH
19870: LD_INT 5
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: IN
19880: IFFALSE 19892
// uc_nation := nation_american else
19882: LD_ADDR_OWVAR 21
19886: PUSH
19887: LD_INT 1
19889: ST_TO_ADDR
19890: GO 19935
// if chassis in [ 11 , 12 , 13 , 14 ] then
19892: LD_VAR 0 1
19896: PUSH
19897: LD_INT 11
19899: PUSH
19900: LD_INT 12
19902: PUSH
19903: LD_INT 13
19905: PUSH
19906: LD_INT 14
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: LIST
19914: IN
19915: IFFALSE 19927
// uc_nation := nation_arabian else
19917: LD_ADDR_OWVAR 21
19921: PUSH
19922: LD_INT 2
19924: ST_TO_ADDR
19925: GO 19935
// uc_nation := nation_russian ;
19927: LD_ADDR_OWVAR 21
19931: PUSH
19932: LD_INT 3
19934: ST_TO_ADDR
// vc_chassis := chassis ;
19935: LD_ADDR_OWVAR 37
19939: PUSH
19940: LD_VAR 0 1
19944: ST_TO_ADDR
// vc_engine := engine ;
19945: LD_ADDR_OWVAR 39
19949: PUSH
19950: LD_VAR 0 2
19954: ST_TO_ADDR
// vc_control := control ;
19955: LD_ADDR_OWVAR 38
19959: PUSH
19960: LD_VAR 0 3
19964: ST_TO_ADDR
// vc_weapon := weapon ;
19965: LD_ADDR_OWVAR 40
19969: PUSH
19970: LD_VAR 0 4
19974: ST_TO_ADDR
// un := CreateVehicle ;
19975: LD_ADDR_VAR 0 8
19979: PUSH
19980: CALL_OW 45
19984: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
19985: LD_VAR 0 8
19989: PPUSH
19990: LD_INT 0
19992: PPUSH
19993: LD_INT 5
19995: PPUSH
19996: CALL_OW 12
20000: PPUSH
20001: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20005: LD_VAR 0 8
20009: PPUSH
20010: LD_VAR 0 5
20014: PPUSH
20015: LD_VAR 0 6
20019: PPUSH
20020: LD_INT 1
20022: PPUSH
20023: CALL_OW 48
// end ;
20027: LD_VAR 0 7
20031: RET
// export hInvincible ; every 1 do
20032: GO 20034
20034: DISABLE
// hInvincible := [ ] ;
20035: LD_ADDR_EXP 94
20039: PUSH
20040: EMPTY
20041: ST_TO_ADDR
20042: END
// every 10 do var i ;
20043: GO 20045
20045: DISABLE
20046: LD_INT 0
20048: PPUSH
// begin enable ;
20049: ENABLE
// if not hInvincible then
20050: LD_EXP 94
20054: NOT
20055: IFFALSE 20059
// exit ;
20057: GO 20103
// for i in hInvincible do
20059: LD_ADDR_VAR 0 1
20063: PUSH
20064: LD_EXP 94
20068: PUSH
20069: FOR_IN
20070: IFFALSE 20101
// if GetLives ( i ) < 1000 then
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 256
20081: PUSH
20082: LD_INT 1000
20084: LESS
20085: IFFALSE 20099
// SetLives ( i , 1000 ) ;
20087: LD_VAR 0 1
20091: PPUSH
20092: LD_INT 1000
20094: PPUSH
20095: CALL_OW 234
20099: GO 20069
20101: POP
20102: POP
// end ;
20103: PPOPN 1
20105: END
// export function hHackInvincible ; var i ; begin
20106: LD_INT 0
20108: PPUSH
20109: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20110: LD_ADDR_VAR 0 2
20114: PUSH
20115: LD_INT 2
20117: PUSH
20118: LD_INT 21
20120: PUSH
20121: LD_INT 1
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 21
20130: PUSH
20131: LD_INT 2
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 69
20147: PUSH
20148: FOR_IN
20149: IFFALSE 20210
// if IsSelected ( i ) then
20151: LD_VAR 0 2
20155: PPUSH
20156: CALL_OW 306
20160: IFFALSE 20208
// begin if i in hInvincible then
20162: LD_VAR 0 2
20166: PUSH
20167: LD_EXP 94
20171: IN
20172: IFFALSE 20192
// hInvincible := hInvincible diff i else
20174: LD_ADDR_EXP 94
20178: PUSH
20179: LD_EXP 94
20183: PUSH
20184: LD_VAR 0 2
20188: DIFF
20189: ST_TO_ADDR
20190: GO 20208
// hInvincible := hInvincible union i ;
20192: LD_ADDR_EXP 94
20196: PUSH
20197: LD_EXP 94
20201: PUSH
20202: LD_VAR 0 2
20206: UNION
20207: ST_TO_ADDR
// end ;
20208: GO 20148
20210: POP
20211: POP
// end ;
20212: LD_VAR 0 1
20216: RET
// export function hHackInvisible ; var i , j ; begin
20217: LD_INT 0
20219: PPUSH
20220: PPUSH
20221: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20222: LD_ADDR_VAR 0 2
20226: PUSH
20227: LD_INT 21
20229: PUSH
20230: LD_INT 1
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 69
20241: PUSH
20242: FOR_IN
20243: IFFALSE 20267
// if IsSelected ( i ) then
20245: LD_VAR 0 2
20249: PPUSH
20250: CALL_OW 306
20254: IFFALSE 20265
// ComForceInvisible ( i ) ;
20256: LD_VAR 0 2
20260: PPUSH
20261: CALL_OW 496
20265: GO 20242
20267: POP
20268: POP
// end ;
20269: LD_VAR 0 1
20273: RET
// export function hHackChangeYourSide ; begin
20274: LD_INT 0
20276: PPUSH
// if your_side = 8 then
20277: LD_OWVAR 2
20281: PUSH
20282: LD_INT 8
20284: EQUAL
20285: IFFALSE 20297
// your_side := 0 else
20287: LD_ADDR_OWVAR 2
20291: PUSH
20292: LD_INT 0
20294: ST_TO_ADDR
20295: GO 20311
// your_side := your_side + 1 ;
20297: LD_ADDR_OWVAR 2
20301: PUSH
20302: LD_OWVAR 2
20306: PUSH
20307: LD_INT 1
20309: PLUS
20310: ST_TO_ADDR
// end ;
20311: LD_VAR 0 1
20315: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20316: LD_INT 0
20318: PPUSH
20319: PPUSH
20320: PPUSH
// for i in all_units do
20321: LD_ADDR_VAR 0 2
20325: PUSH
20326: LD_OWVAR 3
20330: PUSH
20331: FOR_IN
20332: IFFALSE 20410
// if IsSelected ( i ) then
20334: LD_VAR 0 2
20338: PPUSH
20339: CALL_OW 306
20343: IFFALSE 20408
// begin j := GetSide ( i ) ;
20345: LD_ADDR_VAR 0 3
20349: PUSH
20350: LD_VAR 0 2
20354: PPUSH
20355: CALL_OW 255
20359: ST_TO_ADDR
// if j = 8 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 8
20367: EQUAL
20368: IFFALSE 20380
// j := 0 else
20370: LD_ADDR_VAR 0 3
20374: PUSH
20375: LD_INT 0
20377: ST_TO_ADDR
20378: GO 20394
// j := j + 1 ;
20380: LD_ADDR_VAR 0 3
20384: PUSH
20385: LD_VAR 0 3
20389: PUSH
20390: LD_INT 1
20392: PLUS
20393: ST_TO_ADDR
// SetSide ( i , j ) ;
20394: LD_VAR 0 2
20398: PPUSH
20399: LD_VAR 0 3
20403: PPUSH
20404: CALL_OW 235
// end ;
20408: GO 20331
20410: POP
20411: POP
// end ;
20412: LD_VAR 0 1
20416: RET
// export function hHackFog ; begin
20417: LD_INT 0
20419: PPUSH
// FogOff ( true ) ;
20420: LD_INT 1
20422: PPUSH
20423: CALL_OW 344
// end ;
20427: LD_VAR 0 1
20431: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20432: LD_INT 0
20434: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20435: LD_VAR 0 1
20439: PPUSH
20440: LD_VAR 0 2
20444: PPUSH
20445: LD_VAR 0 3
20449: PPUSH
20450: LD_INT 1
20452: PPUSH
20453: LD_INT 1
20455: PPUSH
20456: CALL_OW 483
// CenterOnXY ( x , y ) ;
20460: LD_VAR 0 2
20464: PPUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: CALL_OW 84
// end ; end_of_file
20474: LD_VAR 0 4
20478: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20479: LD_INT 0
20481: PPUSH
20482: PPUSH
20483: PPUSH
20484: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL_OW 264
20494: PUSH
20495: LD_EXP 28
20499: EQUAL
20500: IFFALSE 20572
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20502: LD_INT 68
20504: PPUSH
20505: LD_VAR 0 1
20509: PPUSH
20510: CALL_OW 255
20514: PPUSH
20515: CALL_OW 321
20519: PUSH
20520: LD_INT 2
20522: EQUAL
20523: IFFALSE 20535
// eff := 70 else
20525: LD_ADDR_VAR 0 4
20529: PUSH
20530: LD_INT 70
20532: ST_TO_ADDR
20533: GO 20543
// eff := 30 ;
20535: LD_ADDR_VAR 0 4
20539: PUSH
20540: LD_INT 30
20542: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 250
20552: PPUSH
20553: LD_VAR 0 1
20557: PPUSH
20558: CALL_OW 251
20562: PPUSH
20563: LD_VAR 0 4
20567: PPUSH
20568: CALL_OW 495
// end ; end ;
20572: LD_VAR 0 2
20576: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20577: LD_INT 0
20579: PPUSH
// end ;
20580: LD_VAR 0 4
20584: RET
// export function SOS_Command ( cmd ) ; begin
20585: LD_INT 0
20587: PPUSH
// end ;
20588: LD_VAR 0 2
20592: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20593: LD_INT 0
20595: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20596: LD_VAR 0 1
20600: PUSH
20601: LD_INT 250
20603: EQUAL
20604: PUSH
20605: LD_VAR 0 2
20609: PPUSH
20610: CALL_OW 264
20614: PUSH
20615: LD_EXP 31
20619: EQUAL
20620: AND
20621: IFFALSE 20642
// MinerPlaceMine ( unit , x , y ) ;
20623: LD_VAR 0 2
20627: PPUSH
20628: LD_VAR 0 4
20632: PPUSH
20633: LD_VAR 0 5
20637: PPUSH
20638: CALL 22983 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20642: LD_VAR 0 1
20646: PUSH
20647: LD_INT 251
20649: EQUAL
20650: PUSH
20651: LD_VAR 0 2
20655: PPUSH
20656: CALL_OW 264
20660: PUSH
20661: LD_EXP 31
20665: EQUAL
20666: AND
20667: IFFALSE 20688
// MinerDetonateMine ( unit , x , y ) ;
20669: LD_VAR 0 2
20673: PPUSH
20674: LD_VAR 0 4
20678: PPUSH
20679: LD_VAR 0 5
20683: PPUSH
20684: CALL 23260 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20688: LD_VAR 0 1
20692: PUSH
20693: LD_INT 252
20695: EQUAL
20696: PUSH
20697: LD_VAR 0 2
20701: PPUSH
20702: CALL_OW 264
20706: PUSH
20707: LD_EXP 31
20711: EQUAL
20712: AND
20713: IFFALSE 20734
// MinerCreateMinefield ( unit , x , y ) ;
20715: LD_VAR 0 2
20719: PPUSH
20720: LD_VAR 0 4
20724: PPUSH
20725: LD_VAR 0 5
20729: PPUSH
20730: CALL 23677 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 253
20741: EQUAL
20742: PUSH
20743: LD_VAR 0 2
20747: PPUSH
20748: CALL_OW 257
20752: PUSH
20753: LD_INT 5
20755: EQUAL
20756: AND
20757: IFFALSE 20778
// ComBinocular ( unit , x , y ) ;
20759: LD_VAR 0 2
20763: PPUSH
20764: LD_VAR 0 4
20768: PPUSH
20769: LD_VAR 0 5
20773: PPUSH
20774: CALL 24048 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20778: LD_VAR 0 1
20782: PUSH
20783: LD_INT 254
20785: EQUAL
20786: PUSH
20787: LD_VAR 0 2
20791: PPUSH
20792: CALL_OW 264
20796: PUSH
20797: LD_EXP 26
20801: EQUAL
20802: AND
20803: PUSH
20804: LD_VAR 0 3
20808: PPUSH
20809: CALL_OW 263
20813: PUSH
20814: LD_INT 3
20816: EQUAL
20817: AND
20818: IFFALSE 20834
// HackDestroyVehicle ( unit , selectedUnit ) ;
20820: LD_VAR 0 2
20824: PPUSH
20825: LD_VAR 0 3
20829: PPUSH
20830: CALL 22343 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20834: LD_VAR 0 1
20838: PUSH
20839: LD_INT 255
20841: EQUAL
20842: PUSH
20843: LD_VAR 0 2
20847: PPUSH
20848: CALL_OW 264
20852: PUSH
20853: LD_INT 14
20855: PUSH
20856: LD_INT 53
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: IN
20863: AND
20864: PUSH
20865: LD_VAR 0 4
20869: PPUSH
20870: LD_VAR 0 5
20874: PPUSH
20875: CALL_OW 488
20879: AND
20880: IFFALSE 20904
// CutTreeXYR ( unit , x , y , 12 ) ;
20882: LD_VAR 0 2
20886: PPUSH
20887: LD_VAR 0 4
20891: PPUSH
20892: LD_VAR 0 5
20896: PPUSH
20897: LD_INT 12
20899: PPUSH
20900: CALL 20909 0 4
// end ;
20904: LD_VAR 0 6
20908: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20909: LD_INT 0
20911: PPUSH
20912: PPUSH
20913: PPUSH
20914: PPUSH
20915: PPUSH
20916: PPUSH
20917: PPUSH
20918: PPUSH
20919: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20920: LD_VAR 0 1
20924: NOT
20925: PUSH
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_VAR 0 3
20935: PPUSH
20936: CALL_OW 488
20940: NOT
20941: OR
20942: PUSH
20943: LD_VAR 0 4
20947: NOT
20948: OR
20949: IFFALSE 20953
// exit ;
20951: GO 21293
// list := [ ] ;
20953: LD_ADDR_VAR 0 13
20957: PUSH
20958: EMPTY
20959: ST_TO_ADDR
// if x - r < 0 then
20960: LD_VAR 0 2
20964: PUSH
20965: LD_VAR 0 4
20969: MINUS
20970: PUSH
20971: LD_INT 0
20973: LESS
20974: IFFALSE 20986
// min_x := 0 else
20976: LD_ADDR_VAR 0 7
20980: PUSH
20981: LD_INT 0
20983: ST_TO_ADDR
20984: GO 21002
// min_x := x - r ;
20986: LD_ADDR_VAR 0 7
20990: PUSH
20991: LD_VAR 0 2
20995: PUSH
20996: LD_VAR 0 4
21000: MINUS
21001: ST_TO_ADDR
// if y - r < 0 then
21002: LD_VAR 0 3
21006: PUSH
21007: LD_VAR 0 4
21011: MINUS
21012: PUSH
21013: LD_INT 0
21015: LESS
21016: IFFALSE 21028
// min_y := 0 else
21018: LD_ADDR_VAR 0 8
21022: PUSH
21023: LD_INT 0
21025: ST_TO_ADDR
21026: GO 21044
// min_y := y - r ;
21028: LD_ADDR_VAR 0 8
21032: PUSH
21033: LD_VAR 0 3
21037: PUSH
21038: LD_VAR 0 4
21042: MINUS
21043: ST_TO_ADDR
// max_x := x + r ;
21044: LD_ADDR_VAR 0 9
21048: PUSH
21049: LD_VAR 0 2
21053: PUSH
21054: LD_VAR 0 4
21058: PLUS
21059: ST_TO_ADDR
// max_y := y + r ;
21060: LD_ADDR_VAR 0 10
21064: PUSH
21065: LD_VAR 0 3
21069: PUSH
21070: LD_VAR 0 4
21074: PLUS
21075: ST_TO_ADDR
// for _x = min_x to max_x do
21076: LD_ADDR_VAR 0 11
21080: PUSH
21081: DOUBLE
21082: LD_VAR 0 7
21086: DEC
21087: ST_TO_ADDR
21088: LD_VAR 0 9
21092: PUSH
21093: FOR_TO
21094: IFFALSE 21211
// for _y = min_y to max_y do
21096: LD_ADDR_VAR 0 12
21100: PUSH
21101: DOUBLE
21102: LD_VAR 0 8
21106: DEC
21107: ST_TO_ADDR
21108: LD_VAR 0 10
21112: PUSH
21113: FOR_TO
21114: IFFALSE 21207
// begin if not ValidHex ( _x , _y ) then
21116: LD_VAR 0 11
21120: PPUSH
21121: LD_VAR 0 12
21125: PPUSH
21126: CALL_OW 488
21130: NOT
21131: IFFALSE 21135
// continue ;
21133: GO 21113
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21135: LD_VAR 0 11
21139: PPUSH
21140: LD_VAR 0 12
21144: PPUSH
21145: CALL_OW 351
21149: PUSH
21150: LD_VAR 0 11
21154: PPUSH
21155: LD_VAR 0 12
21159: PPUSH
21160: CALL_OW 554
21164: AND
21165: IFFALSE 21205
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21167: LD_ADDR_VAR 0 13
21171: PUSH
21172: LD_VAR 0 13
21176: PPUSH
21177: LD_VAR 0 13
21181: PUSH
21182: LD_INT 1
21184: PLUS
21185: PPUSH
21186: LD_VAR 0 11
21190: PUSH
21191: LD_VAR 0 12
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 2
21204: ST_TO_ADDR
// end ;
21205: GO 21113
21207: POP
21208: POP
21209: GO 21093
21211: POP
21212: POP
// if not list then
21213: LD_VAR 0 13
21217: NOT
21218: IFFALSE 21222
// exit ;
21220: GO 21293
// for i in list do
21222: LD_ADDR_VAR 0 6
21226: PUSH
21227: LD_VAR 0 13
21231: PUSH
21232: FOR_IN
21233: IFFALSE 21291
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21235: LD_VAR 0 1
21239: PPUSH
21240: LD_STRING M
21242: PUSH
21243: LD_VAR 0 6
21247: PUSH
21248: LD_INT 1
21250: ARRAY
21251: PUSH
21252: LD_VAR 0 6
21256: PUSH
21257: LD_INT 2
21259: ARRAY
21260: PUSH
21261: LD_INT 0
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: LD_INT 0
21269: PUSH
21270: LD_INT 0
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: LIST
21277: LIST
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: EMPTY
21283: LIST
21284: PPUSH
21285: CALL_OW 447
21289: GO 21232
21291: POP
21292: POP
// end ;
21293: LD_VAR 0 5
21297: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21298: LD_EXP 95
21302: NOT
21303: IFFALSE 21353
21305: GO 21307
21307: DISABLE
// begin initHack := true ;
21308: LD_ADDR_EXP 95
21312: PUSH
21313: LD_INT 1
21315: ST_TO_ADDR
// hackTanks := [ ] ;
21316: LD_ADDR_EXP 96
21320: PUSH
21321: EMPTY
21322: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21323: LD_ADDR_EXP 97
21327: PUSH
21328: EMPTY
21329: ST_TO_ADDR
// hackLimit := 3 ;
21330: LD_ADDR_EXP 98
21334: PUSH
21335: LD_INT 3
21337: ST_TO_ADDR
// hackDist := 12 ;
21338: LD_ADDR_EXP 99
21342: PUSH
21343: LD_INT 12
21345: ST_TO_ADDR
// hackCounter := [ ] ;
21346: LD_ADDR_EXP 100
21350: PUSH
21351: EMPTY
21352: ST_TO_ADDR
// end ;
21353: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21354: LD_EXP 95
21358: PUSH
21359: LD_INT 34
21361: PUSH
21362: LD_EXP 26
21366: PUSH
21367: EMPTY
21368: LIST
21369: LIST
21370: PPUSH
21371: CALL_OW 69
21375: AND
21376: IFFALSE 21631
21378: GO 21380
21380: DISABLE
21381: LD_INT 0
21383: PPUSH
21384: PPUSH
// begin enable ;
21385: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21386: LD_ADDR_VAR 0 1
21390: PUSH
21391: LD_INT 34
21393: PUSH
21394: LD_EXP 26
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PPUSH
21403: CALL_OW 69
21407: PUSH
21408: FOR_IN
21409: IFFALSE 21629
// begin if not i in hackTanks then
21411: LD_VAR 0 1
21415: PUSH
21416: LD_EXP 96
21420: IN
21421: NOT
21422: IFFALSE 21505
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21424: LD_ADDR_EXP 96
21428: PUSH
21429: LD_EXP 96
21433: PPUSH
21434: LD_EXP 96
21438: PUSH
21439: LD_INT 1
21441: PLUS
21442: PPUSH
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 1
21452: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21453: LD_ADDR_EXP 97
21457: PUSH
21458: LD_EXP 97
21462: PPUSH
21463: LD_EXP 97
21467: PUSH
21468: LD_INT 1
21470: PLUS
21471: PPUSH
21472: EMPTY
21473: PPUSH
21474: CALL_OW 1
21478: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21479: LD_ADDR_EXP 100
21483: PUSH
21484: LD_EXP 100
21488: PPUSH
21489: LD_EXP 100
21493: PUSH
21494: LD_INT 1
21496: PLUS
21497: PPUSH
21498: EMPTY
21499: PPUSH
21500: CALL_OW 1
21504: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21505: LD_VAR 0 1
21509: PPUSH
21510: CALL_OW 302
21514: NOT
21515: IFFALSE 21528
// begin HackUnlinkAll ( i ) ;
21517: LD_VAR 0 1
21521: PPUSH
21522: CALL 21634 0 1
// continue ;
21526: GO 21408
// end ; HackCheckCapturedStatus ( i ) ;
21528: LD_VAR 0 1
21532: PPUSH
21533: CALL 22077 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21537: LD_ADDR_VAR 0 2
21541: PUSH
21542: LD_INT 81
21544: PUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 255
21554: PUSH
21555: EMPTY
21556: LIST
21557: LIST
21558: PUSH
21559: LD_INT 33
21561: PUSH
21562: LD_INT 3
21564: PUSH
21565: EMPTY
21566: LIST
21567: LIST
21568: PUSH
21569: LD_INT 91
21571: PUSH
21572: LD_VAR 0 1
21576: PUSH
21577: LD_EXP 99
21581: PUSH
21582: EMPTY
21583: LIST
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 50
21589: PUSH
21590: EMPTY
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: PPUSH
21599: CALL_OW 69
21603: ST_TO_ADDR
// if not tmp then
21604: LD_VAR 0 2
21608: NOT
21609: IFFALSE 21613
// continue ;
21611: GO 21408
// HackLink ( i , tmp ) ;
21613: LD_VAR 0 1
21617: PPUSH
21618: LD_VAR 0 2
21622: PPUSH
21623: CALL 21770 0 2
// end ;
21627: GO 21408
21629: POP
21630: POP
// end ;
21631: PPOPN 2
21633: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21634: LD_INT 0
21636: PPUSH
21637: PPUSH
21638: PPUSH
// if not hack in hackTanks then
21639: LD_VAR 0 1
21643: PUSH
21644: LD_EXP 96
21648: IN
21649: NOT
21650: IFFALSE 21654
// exit ;
21652: GO 21765
// index := GetElementIndex ( hackTanks , hack ) ;
21654: LD_ADDR_VAR 0 4
21658: PUSH
21659: LD_EXP 96
21663: PPUSH
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL 29199 0 2
21673: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21674: LD_EXP 97
21678: PUSH
21679: LD_VAR 0 4
21683: ARRAY
21684: IFFALSE 21765
// begin for i in hackTanksCaptured [ index ] do
21686: LD_ADDR_VAR 0 3
21690: PUSH
21691: LD_EXP 97
21695: PUSH
21696: LD_VAR 0 4
21700: ARRAY
21701: PUSH
21702: FOR_IN
21703: IFFALSE 21729
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21705: LD_VAR 0 3
21709: PUSH
21710: LD_INT 1
21712: ARRAY
21713: PPUSH
21714: LD_VAR 0 3
21718: PUSH
21719: LD_INT 2
21721: ARRAY
21722: PPUSH
21723: CALL_OW 235
21727: GO 21702
21729: POP
21730: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21731: LD_ADDR_EXP 97
21735: PUSH
21736: LD_EXP 97
21740: PPUSH
21741: LD_VAR 0 4
21745: PPUSH
21746: EMPTY
21747: PPUSH
21748: CALL_OW 1
21752: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21753: LD_VAR 0 1
21757: PPUSH
21758: LD_INT 0
21760: PPUSH
21761: CALL_OW 505
// end ; end ;
21765: LD_VAR 0 2
21769: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21770: LD_INT 0
21772: PPUSH
21773: PPUSH
21774: PPUSH
// if not hack in hackTanks or not vehicles then
21775: LD_VAR 0 1
21779: PUSH
21780: LD_EXP 96
21784: IN
21785: NOT
21786: PUSH
21787: LD_VAR 0 2
21791: NOT
21792: OR
21793: IFFALSE 21797
// exit ;
21795: GO 22072
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: LD_VAR 0 2
21811: PPUSH
21812: LD_INT 1
21814: PPUSH
21815: LD_INT 1
21817: PPUSH
21818: CALL 29849 0 4
21822: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21823: LD_ADDR_VAR 0 5
21827: PUSH
21828: LD_EXP 96
21832: PPUSH
21833: LD_VAR 0 1
21837: PPUSH
21838: CALL 29199 0 2
21842: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21843: LD_EXP 97
21847: PUSH
21848: LD_VAR 0 5
21852: ARRAY
21853: PUSH
21854: LD_EXP 98
21858: LESS
21859: IFFALSE 22048
// begin for i := 1 to vehicles do
21861: LD_ADDR_VAR 0 4
21865: PUSH
21866: DOUBLE
21867: LD_INT 1
21869: DEC
21870: ST_TO_ADDR
21871: LD_VAR 0 2
21875: PUSH
21876: FOR_TO
21877: IFFALSE 22046
// begin if hackTanksCaptured [ index ] = hackLimit then
21879: LD_EXP 97
21883: PUSH
21884: LD_VAR 0 5
21888: ARRAY
21889: PUSH
21890: LD_EXP 98
21894: EQUAL
21895: IFFALSE 21899
// break ;
21897: GO 22046
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21899: LD_ADDR_EXP 100
21903: PUSH
21904: LD_EXP 100
21908: PPUSH
21909: LD_VAR 0 5
21913: PPUSH
21914: LD_EXP 100
21918: PUSH
21919: LD_VAR 0 5
21923: ARRAY
21924: PUSH
21925: LD_INT 1
21927: PLUS
21928: PPUSH
21929: CALL_OW 1
21933: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21934: LD_ADDR_EXP 97
21938: PUSH
21939: LD_EXP 97
21943: PPUSH
21944: LD_VAR 0 5
21948: PUSH
21949: LD_EXP 97
21953: PUSH
21954: LD_VAR 0 5
21958: ARRAY
21959: PUSH
21960: LD_INT 1
21962: PLUS
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: PPUSH
21968: LD_VAR 0 2
21972: PUSH
21973: LD_VAR 0 4
21977: ARRAY
21978: PUSH
21979: LD_VAR 0 2
21983: PUSH
21984: LD_VAR 0 4
21988: ARRAY
21989: PPUSH
21990: CALL_OW 255
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PPUSH
21999: CALL 29414 0 3
22003: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22004: LD_VAR 0 2
22008: PUSH
22009: LD_VAR 0 4
22013: ARRAY
22014: PPUSH
22015: LD_VAR 0 1
22019: PPUSH
22020: CALL_OW 255
22024: PPUSH
22025: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22029: LD_VAR 0 2
22033: PUSH
22034: LD_VAR 0 4
22038: ARRAY
22039: PPUSH
22040: CALL_OW 141
// end ;
22044: GO 21876
22046: POP
22047: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22048: LD_VAR 0 1
22052: PPUSH
22053: LD_EXP 97
22057: PUSH
22058: LD_VAR 0 5
22062: ARRAY
22063: PUSH
22064: LD_INT 0
22066: PLUS
22067: PPUSH
22068: CALL_OW 505
// end ;
22072: LD_VAR 0 3
22076: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22077: LD_INT 0
22079: PPUSH
22080: PPUSH
22081: PPUSH
22082: PPUSH
// if not hack in hackTanks then
22083: LD_VAR 0 1
22087: PUSH
22088: LD_EXP 96
22092: IN
22093: NOT
22094: IFFALSE 22098
// exit ;
22096: GO 22338
// index := GetElementIndex ( hackTanks , hack ) ;
22098: LD_ADDR_VAR 0 4
22102: PUSH
22103: LD_EXP 96
22107: PPUSH
22108: LD_VAR 0 1
22112: PPUSH
22113: CALL 29199 0 2
22117: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22118: LD_ADDR_VAR 0 3
22122: PUSH
22123: DOUBLE
22124: LD_EXP 97
22128: PUSH
22129: LD_VAR 0 4
22133: ARRAY
22134: INC
22135: ST_TO_ADDR
22136: LD_INT 1
22138: PUSH
22139: FOR_DOWNTO
22140: IFFALSE 22312
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22142: LD_ADDR_VAR 0 5
22146: PUSH
22147: LD_EXP 97
22151: PUSH
22152: LD_VAR 0 4
22156: ARRAY
22157: PUSH
22158: LD_VAR 0 3
22162: ARRAY
22163: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22164: LD_VAR 0 5
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: CALL_OW 302
22177: NOT
22178: PUSH
22179: LD_VAR 0 5
22183: PUSH
22184: LD_INT 1
22186: ARRAY
22187: PPUSH
22188: CALL_OW 255
22192: PUSH
22193: LD_VAR 0 1
22197: PPUSH
22198: CALL_OW 255
22202: NONEQUAL
22203: OR
22204: IFFALSE 22310
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22206: LD_VAR 0 5
22210: PUSH
22211: LD_INT 1
22213: ARRAY
22214: PPUSH
22215: CALL_OW 305
22219: PUSH
22220: LD_VAR 0 5
22224: PUSH
22225: LD_INT 1
22227: ARRAY
22228: PPUSH
22229: CALL_OW 255
22233: PUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL_OW 255
22243: EQUAL
22244: AND
22245: IFFALSE 22269
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22247: LD_VAR 0 5
22251: PUSH
22252: LD_INT 1
22254: ARRAY
22255: PPUSH
22256: LD_VAR 0 5
22260: PUSH
22261: LD_INT 2
22263: ARRAY
22264: PPUSH
22265: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22269: LD_ADDR_EXP 97
22273: PUSH
22274: LD_EXP 97
22278: PPUSH
22279: LD_VAR 0 4
22283: PPUSH
22284: LD_EXP 97
22288: PUSH
22289: LD_VAR 0 4
22293: ARRAY
22294: PPUSH
22295: LD_VAR 0 3
22299: PPUSH
22300: CALL_OW 3
22304: PPUSH
22305: CALL_OW 1
22309: ST_TO_ADDR
// end ; end ;
22310: GO 22139
22312: POP
22313: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22314: LD_VAR 0 1
22318: PPUSH
22319: LD_EXP 97
22323: PUSH
22324: LD_VAR 0 4
22328: ARRAY
22329: PUSH
22330: LD_INT 0
22332: PLUS
22333: PPUSH
22334: CALL_OW 505
// end ;
22338: LD_VAR 0 2
22342: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22343: LD_INT 0
22345: PPUSH
22346: PPUSH
22347: PPUSH
22348: PPUSH
// if not hack in hackTanks then
22349: LD_VAR 0 1
22353: PUSH
22354: LD_EXP 96
22358: IN
22359: NOT
22360: IFFALSE 22364
// exit ;
22362: GO 22449
// index := GetElementIndex ( hackTanks , hack ) ;
22364: LD_ADDR_VAR 0 5
22368: PUSH
22369: LD_EXP 96
22373: PPUSH
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL 29199 0 2
22383: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22384: LD_ADDR_VAR 0 4
22388: PUSH
22389: DOUBLE
22390: LD_INT 1
22392: DEC
22393: ST_TO_ADDR
22394: LD_EXP 97
22398: PUSH
22399: LD_VAR 0 5
22403: ARRAY
22404: PUSH
22405: FOR_TO
22406: IFFALSE 22447
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22408: LD_EXP 97
22412: PUSH
22413: LD_VAR 0 5
22417: ARRAY
22418: PUSH
22419: LD_VAR 0 4
22423: ARRAY
22424: PUSH
22425: LD_INT 1
22427: ARRAY
22428: PUSH
22429: LD_VAR 0 2
22433: EQUAL
22434: IFFALSE 22445
// KillUnit ( vehicle ) ;
22436: LD_VAR 0 2
22440: PPUSH
22441: CALL_OW 66
22445: GO 22405
22447: POP
22448: POP
// end ;
22449: LD_VAR 0 3
22453: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22454: LD_EXP 101
22458: NOT
22459: IFFALSE 22494
22461: GO 22463
22463: DISABLE
// begin initMiner := true ;
22464: LD_ADDR_EXP 101
22468: PUSH
22469: LD_INT 1
22471: ST_TO_ADDR
// minersList := [ ] ;
22472: LD_ADDR_EXP 102
22476: PUSH
22477: EMPTY
22478: ST_TO_ADDR
// minerMinesList := [ ] ;
22479: LD_ADDR_EXP 103
22483: PUSH
22484: EMPTY
22485: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22486: LD_ADDR_EXP 104
22490: PUSH
22491: LD_INT 5
22493: ST_TO_ADDR
// end ;
22494: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22495: LD_EXP 101
22499: PUSH
22500: LD_INT 34
22502: PUSH
22503: LD_EXP 31
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: PPUSH
22512: CALL_OW 69
22516: AND
22517: IFFALSE 22980
22519: GO 22521
22521: DISABLE
22522: LD_INT 0
22524: PPUSH
22525: PPUSH
22526: PPUSH
22527: PPUSH
// begin enable ;
22528: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22529: LD_ADDR_VAR 0 1
22533: PUSH
22534: LD_INT 34
22536: PUSH
22537: LD_EXP 31
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PPUSH
22546: CALL_OW 69
22550: PUSH
22551: FOR_IN
22552: IFFALSE 22624
// begin if not i in minersList then
22554: LD_VAR 0 1
22558: PUSH
22559: LD_EXP 102
22563: IN
22564: NOT
22565: IFFALSE 22622
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22567: LD_ADDR_EXP 102
22571: PUSH
22572: LD_EXP 102
22576: PPUSH
22577: LD_EXP 102
22581: PUSH
22582: LD_INT 1
22584: PLUS
22585: PPUSH
22586: LD_VAR 0 1
22590: PPUSH
22591: CALL_OW 1
22595: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22596: LD_ADDR_EXP 103
22600: PUSH
22601: LD_EXP 103
22605: PPUSH
22606: LD_EXP 103
22610: PUSH
22611: LD_INT 1
22613: PLUS
22614: PPUSH
22615: EMPTY
22616: PPUSH
22617: CALL_OW 1
22621: ST_TO_ADDR
// end end ;
22622: GO 22551
22624: POP
22625: POP
// for i := minerMinesList downto 1 do
22626: LD_ADDR_VAR 0 1
22630: PUSH
22631: DOUBLE
22632: LD_EXP 103
22636: INC
22637: ST_TO_ADDR
22638: LD_INT 1
22640: PUSH
22641: FOR_DOWNTO
22642: IFFALSE 22978
// begin if IsLive ( minersList [ i ] ) then
22644: LD_EXP 102
22648: PUSH
22649: LD_VAR 0 1
22653: ARRAY
22654: PPUSH
22655: CALL_OW 300
22659: IFFALSE 22687
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22661: LD_EXP 102
22665: PUSH
22666: LD_VAR 0 1
22670: ARRAY
22671: PPUSH
22672: LD_EXP 103
22676: PUSH
22677: LD_VAR 0 1
22681: ARRAY
22682: PPUSH
22683: CALL_OW 505
// if not minerMinesList [ i ] then
22687: LD_EXP 103
22691: PUSH
22692: LD_VAR 0 1
22696: ARRAY
22697: NOT
22698: IFFALSE 22702
// continue ;
22700: GO 22641
// for j := minerMinesList [ i ] downto 1 do
22702: LD_ADDR_VAR 0 2
22706: PUSH
22707: DOUBLE
22708: LD_EXP 103
22712: PUSH
22713: LD_VAR 0 1
22717: ARRAY
22718: INC
22719: ST_TO_ADDR
22720: LD_INT 1
22722: PUSH
22723: FOR_DOWNTO
22724: IFFALSE 22974
// begin side := GetSide ( minersList [ i ] ) ;
22726: LD_ADDR_VAR 0 3
22730: PUSH
22731: LD_EXP 102
22735: PUSH
22736: LD_VAR 0 1
22740: ARRAY
22741: PPUSH
22742: CALL_OW 255
22746: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22747: LD_ADDR_VAR 0 4
22751: PUSH
22752: LD_EXP 103
22756: PUSH
22757: LD_VAR 0 1
22761: ARRAY
22762: PUSH
22763: LD_VAR 0 2
22767: ARRAY
22768: PUSH
22769: LD_INT 1
22771: ARRAY
22772: PPUSH
22773: LD_EXP 103
22777: PUSH
22778: LD_VAR 0 1
22782: ARRAY
22783: PUSH
22784: LD_VAR 0 2
22788: ARRAY
22789: PUSH
22790: LD_INT 2
22792: ARRAY
22793: PPUSH
22794: CALL_OW 428
22798: ST_TO_ADDR
// if not tmp then
22799: LD_VAR 0 4
22803: NOT
22804: IFFALSE 22808
// continue ;
22806: GO 22723
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22808: LD_VAR 0 4
22812: PUSH
22813: LD_INT 81
22815: PUSH
22816: LD_VAR 0 3
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PPUSH
22825: CALL_OW 69
22829: IN
22830: PUSH
22831: LD_EXP 103
22835: PUSH
22836: LD_VAR 0 1
22840: ARRAY
22841: PUSH
22842: LD_VAR 0 2
22846: ARRAY
22847: PUSH
22848: LD_INT 1
22850: ARRAY
22851: PPUSH
22852: LD_EXP 103
22856: PUSH
22857: LD_VAR 0 1
22861: ARRAY
22862: PUSH
22863: LD_VAR 0 2
22867: ARRAY
22868: PUSH
22869: LD_INT 2
22871: ARRAY
22872: PPUSH
22873: CALL_OW 458
22877: AND
22878: IFFALSE 22972
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22880: LD_EXP 103
22884: PUSH
22885: LD_VAR 0 1
22889: ARRAY
22890: PUSH
22891: LD_VAR 0 2
22895: ARRAY
22896: PUSH
22897: LD_INT 1
22899: ARRAY
22900: PPUSH
22901: LD_EXP 103
22905: PUSH
22906: LD_VAR 0 1
22910: ARRAY
22911: PUSH
22912: LD_VAR 0 2
22916: ARRAY
22917: PUSH
22918: LD_INT 2
22920: ARRAY
22921: PPUSH
22922: LD_VAR 0 3
22926: PPUSH
22927: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22931: LD_ADDR_EXP 103
22935: PUSH
22936: LD_EXP 103
22940: PPUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: LD_EXP 103
22950: PUSH
22951: LD_VAR 0 1
22955: ARRAY
22956: PPUSH
22957: LD_VAR 0 2
22961: PPUSH
22962: CALL_OW 3
22966: PPUSH
22967: CALL_OW 1
22971: ST_TO_ADDR
// end ; end ;
22972: GO 22723
22974: POP
22975: POP
// end ;
22976: GO 22641
22978: POP
22979: POP
// end ;
22980: PPOPN 4
22982: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22983: LD_INT 0
22985: PPUSH
22986: PPUSH
// result := false ;
22987: LD_ADDR_VAR 0 4
22991: PUSH
22992: LD_INT 0
22994: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22995: LD_VAR 0 1
22999: PPUSH
23000: CALL_OW 264
23004: PUSH
23005: LD_EXP 31
23009: EQUAL
23010: NOT
23011: IFFALSE 23015
// exit ;
23013: GO 23255
// index := GetElementIndex ( minersList , unit ) ;
23015: LD_ADDR_VAR 0 5
23019: PUSH
23020: LD_EXP 102
23024: PPUSH
23025: LD_VAR 0 1
23029: PPUSH
23030: CALL 29199 0 2
23034: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23035: LD_EXP 103
23039: PUSH
23040: LD_VAR 0 5
23044: ARRAY
23045: PUSH
23046: LD_EXP 104
23050: GREATEREQUAL
23051: IFFALSE 23055
// exit ;
23053: GO 23255
// ComMoveXY ( unit , x , y ) ;
23055: LD_VAR 0 1
23059: PPUSH
23060: LD_VAR 0 2
23064: PPUSH
23065: LD_VAR 0 3
23069: PPUSH
23070: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23074: LD_INT 35
23076: PPUSH
23077: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23081: LD_VAR 0 1
23085: PPUSH
23086: LD_VAR 0 2
23090: PPUSH
23091: LD_VAR 0 3
23095: PPUSH
23096: CALL 59263 0 3
23100: NOT
23101: PUSH
23102: LD_VAR 0 1
23106: PPUSH
23107: CALL_OW 314
23111: AND
23112: IFFALSE 23116
// exit ;
23114: GO 23255
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23116: LD_VAR 0 2
23120: PPUSH
23121: LD_VAR 0 3
23125: PPUSH
23126: CALL_OW 428
23130: PUSH
23131: LD_VAR 0 1
23135: EQUAL
23136: PUSH
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 314
23146: NOT
23147: AND
23148: IFFALSE 23074
// PlaySoundXY ( x , y , PlantMine ) ;
23150: LD_VAR 0 2
23154: PPUSH
23155: LD_VAR 0 3
23159: PPUSH
23160: LD_STRING PlantMine
23162: PPUSH
23163: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23167: LD_VAR 0 2
23171: PPUSH
23172: LD_VAR 0 3
23176: PPUSH
23177: LD_VAR 0 1
23181: PPUSH
23182: CALL_OW 255
23186: PPUSH
23187: LD_INT 0
23189: PPUSH
23190: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23194: LD_ADDR_EXP 103
23198: PUSH
23199: LD_EXP 103
23203: PPUSH
23204: LD_VAR 0 5
23208: PUSH
23209: LD_EXP 103
23213: PUSH
23214: LD_VAR 0 5
23218: ARRAY
23219: PUSH
23220: LD_INT 1
23222: PLUS
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PPUSH
23228: LD_VAR 0 2
23232: PUSH
23233: LD_VAR 0 3
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PPUSH
23242: CALL 29414 0 3
23246: ST_TO_ADDR
// result := true ;
23247: LD_ADDR_VAR 0 4
23251: PUSH
23252: LD_INT 1
23254: ST_TO_ADDR
// end ;
23255: LD_VAR 0 4
23259: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23260: LD_INT 0
23262: PPUSH
23263: PPUSH
23264: PPUSH
// if not unit in minersList then
23265: LD_VAR 0 1
23269: PUSH
23270: LD_EXP 102
23274: IN
23275: NOT
23276: IFFALSE 23280
// exit ;
23278: GO 23672
// index := GetElementIndex ( minersList , unit ) ;
23280: LD_ADDR_VAR 0 6
23284: PUSH
23285: LD_EXP 102
23289: PPUSH
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL 29199 0 2
23299: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23300: LD_ADDR_VAR 0 5
23304: PUSH
23305: DOUBLE
23306: LD_EXP 103
23310: PUSH
23311: LD_VAR 0 6
23315: ARRAY
23316: INC
23317: ST_TO_ADDR
23318: LD_INT 1
23320: PUSH
23321: FOR_DOWNTO
23322: IFFALSE 23483
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23324: LD_EXP 103
23328: PUSH
23329: LD_VAR 0 6
23333: ARRAY
23334: PUSH
23335: LD_VAR 0 5
23339: ARRAY
23340: PUSH
23341: LD_INT 1
23343: ARRAY
23344: PUSH
23345: LD_VAR 0 2
23349: EQUAL
23350: PUSH
23351: LD_EXP 103
23355: PUSH
23356: LD_VAR 0 6
23360: ARRAY
23361: PUSH
23362: LD_VAR 0 5
23366: ARRAY
23367: PUSH
23368: LD_INT 2
23370: ARRAY
23371: PUSH
23372: LD_VAR 0 3
23376: EQUAL
23377: AND
23378: IFFALSE 23481
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23380: LD_EXP 103
23384: PUSH
23385: LD_VAR 0 6
23389: ARRAY
23390: PUSH
23391: LD_VAR 0 5
23395: ARRAY
23396: PUSH
23397: LD_INT 1
23399: ARRAY
23400: PPUSH
23401: LD_EXP 103
23405: PUSH
23406: LD_VAR 0 6
23410: ARRAY
23411: PUSH
23412: LD_VAR 0 5
23416: ARRAY
23417: PUSH
23418: LD_INT 2
23420: ARRAY
23421: PPUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 255
23431: PPUSH
23432: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23436: LD_ADDR_EXP 103
23440: PUSH
23441: LD_EXP 103
23445: PPUSH
23446: LD_VAR 0 6
23450: PPUSH
23451: LD_EXP 103
23455: PUSH
23456: LD_VAR 0 6
23460: ARRAY
23461: PPUSH
23462: LD_VAR 0 5
23466: PPUSH
23467: CALL_OW 3
23471: PPUSH
23472: CALL_OW 1
23476: ST_TO_ADDR
// exit ;
23477: POP
23478: POP
23479: GO 23672
// end ; end ;
23481: GO 23321
23483: POP
23484: POP
// for i := minerMinesList [ index ] downto 1 do
23485: LD_ADDR_VAR 0 5
23489: PUSH
23490: DOUBLE
23491: LD_EXP 103
23495: PUSH
23496: LD_VAR 0 6
23500: ARRAY
23501: INC
23502: ST_TO_ADDR
23503: LD_INT 1
23505: PUSH
23506: FOR_DOWNTO
23507: IFFALSE 23670
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23509: LD_EXP 103
23513: PUSH
23514: LD_VAR 0 6
23518: ARRAY
23519: PUSH
23520: LD_VAR 0 5
23524: ARRAY
23525: PUSH
23526: LD_INT 1
23528: ARRAY
23529: PPUSH
23530: LD_EXP 103
23534: PUSH
23535: LD_VAR 0 6
23539: ARRAY
23540: PUSH
23541: LD_VAR 0 5
23545: ARRAY
23546: PUSH
23547: LD_INT 2
23549: ARRAY
23550: PPUSH
23551: LD_VAR 0 2
23555: PPUSH
23556: LD_VAR 0 3
23560: PPUSH
23561: CALL_OW 298
23565: PUSH
23566: LD_INT 6
23568: LESS
23569: IFFALSE 23668
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23571: LD_EXP 103
23575: PUSH
23576: LD_VAR 0 6
23580: ARRAY
23581: PUSH
23582: LD_VAR 0 5
23586: ARRAY
23587: PUSH
23588: LD_INT 1
23590: ARRAY
23591: PPUSH
23592: LD_EXP 103
23596: PUSH
23597: LD_VAR 0 6
23601: ARRAY
23602: PUSH
23603: LD_VAR 0 5
23607: ARRAY
23608: PUSH
23609: LD_INT 2
23611: ARRAY
23612: PPUSH
23613: LD_VAR 0 1
23617: PPUSH
23618: CALL_OW 255
23622: PPUSH
23623: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23627: LD_ADDR_EXP 103
23631: PUSH
23632: LD_EXP 103
23636: PPUSH
23637: LD_VAR 0 6
23641: PPUSH
23642: LD_EXP 103
23646: PUSH
23647: LD_VAR 0 6
23651: ARRAY
23652: PPUSH
23653: LD_VAR 0 5
23657: PPUSH
23658: CALL_OW 3
23662: PPUSH
23663: CALL_OW 1
23667: ST_TO_ADDR
// end ; end ;
23668: GO 23506
23670: POP
23671: POP
// end ;
23672: LD_VAR 0 4
23676: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23677: LD_INT 0
23679: PPUSH
23680: PPUSH
23681: PPUSH
23682: PPUSH
23683: PPUSH
23684: PPUSH
23685: PPUSH
23686: PPUSH
23687: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23688: LD_VAR 0 1
23692: PPUSH
23693: CALL_OW 264
23697: PUSH
23698: LD_EXP 31
23702: EQUAL
23703: NOT
23704: PUSH
23705: LD_VAR 0 1
23709: PUSH
23710: LD_EXP 102
23714: IN
23715: NOT
23716: OR
23717: IFFALSE 23721
// exit ;
23719: GO 24043
// index := GetElementIndex ( minersList , unit ) ;
23721: LD_ADDR_VAR 0 6
23725: PUSH
23726: LD_EXP 102
23730: PPUSH
23731: LD_VAR 0 1
23735: PPUSH
23736: CALL 29199 0 2
23740: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23741: LD_ADDR_VAR 0 8
23745: PUSH
23746: LD_EXP 104
23750: PUSH
23751: LD_EXP 103
23755: PUSH
23756: LD_VAR 0 6
23760: ARRAY
23761: MINUS
23762: ST_TO_ADDR
// if not minesFreeAmount then
23763: LD_VAR 0 8
23767: NOT
23768: IFFALSE 23772
// exit ;
23770: GO 24043
// tmp := [ ] ;
23772: LD_ADDR_VAR 0 7
23776: PUSH
23777: EMPTY
23778: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23779: LD_ADDR_VAR 0 5
23783: PUSH
23784: DOUBLE
23785: LD_INT 1
23787: DEC
23788: ST_TO_ADDR
23789: LD_VAR 0 8
23793: PUSH
23794: FOR_TO
23795: IFFALSE 23990
// begin _d := rand ( 0 , 5 ) ;
23797: LD_ADDR_VAR 0 11
23801: PUSH
23802: LD_INT 0
23804: PPUSH
23805: LD_INT 5
23807: PPUSH
23808: CALL_OW 12
23812: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23813: LD_ADDR_VAR 0 12
23817: PUSH
23818: LD_INT 2
23820: PPUSH
23821: LD_INT 6
23823: PPUSH
23824: CALL_OW 12
23828: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23829: LD_ADDR_VAR 0 9
23833: PUSH
23834: LD_VAR 0 2
23838: PPUSH
23839: LD_VAR 0 11
23843: PPUSH
23844: LD_VAR 0 12
23848: PPUSH
23849: CALL_OW 272
23853: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23854: LD_ADDR_VAR 0 10
23858: PUSH
23859: LD_VAR 0 3
23863: PPUSH
23864: LD_VAR 0 11
23868: PPUSH
23869: LD_VAR 0 12
23873: PPUSH
23874: CALL_OW 273
23878: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23879: LD_VAR 0 9
23883: PPUSH
23884: LD_VAR 0 10
23888: PPUSH
23889: CALL_OW 488
23893: PUSH
23894: LD_VAR 0 9
23898: PUSH
23899: LD_VAR 0 10
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_VAR 0 7
23912: IN
23913: NOT
23914: AND
23915: PUSH
23916: LD_VAR 0 9
23920: PPUSH
23921: LD_VAR 0 10
23925: PPUSH
23926: CALL_OW 458
23930: NOT
23931: AND
23932: IFFALSE 23974
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23934: LD_ADDR_VAR 0 7
23938: PUSH
23939: LD_VAR 0 7
23943: PPUSH
23944: LD_VAR 0 7
23948: PUSH
23949: LD_INT 1
23951: PLUS
23952: PPUSH
23953: LD_VAR 0 9
23957: PUSH
23958: LD_VAR 0 10
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PPUSH
23967: CALL_OW 1
23971: ST_TO_ADDR
23972: GO 23988
// i := i - 1 ;
23974: LD_ADDR_VAR 0 5
23978: PUSH
23979: LD_VAR 0 5
23983: PUSH
23984: LD_INT 1
23986: MINUS
23987: ST_TO_ADDR
// end ;
23988: GO 23794
23990: POP
23991: POP
// for i in tmp do
23992: LD_ADDR_VAR 0 5
23996: PUSH
23997: LD_VAR 0 7
24001: PUSH
24002: FOR_IN
24003: IFFALSE 24041
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24005: LD_VAR 0 1
24009: PPUSH
24010: LD_VAR 0 5
24014: PUSH
24015: LD_INT 1
24017: ARRAY
24018: PPUSH
24019: LD_VAR 0 5
24023: PUSH
24024: LD_INT 2
24026: ARRAY
24027: PPUSH
24028: CALL 22983 0 3
24032: NOT
24033: IFFALSE 24039
// exit ;
24035: POP
24036: POP
24037: GO 24043
24039: GO 24002
24041: POP
24042: POP
// end ;
24043: LD_VAR 0 4
24047: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24048: LD_INT 0
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
24054: PPUSH
24055: PPUSH
24056: PPUSH
// if not GetClass ( unit ) = class_sniper then
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL_OW 257
24066: PUSH
24067: LD_INT 5
24069: EQUAL
24070: NOT
24071: IFFALSE 24075
// exit ;
24073: GO 24463
// dist := 8 ;
24075: LD_ADDR_VAR 0 5
24079: PUSH
24080: LD_INT 8
24082: ST_TO_ADDR
// viewRange := 12 ;
24083: LD_ADDR_VAR 0 7
24087: PUSH
24088: LD_INT 12
24090: ST_TO_ADDR
// side := GetSide ( unit ) ;
24091: LD_ADDR_VAR 0 6
24095: PUSH
24096: LD_VAR 0 1
24100: PPUSH
24101: CALL_OW 255
24105: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24106: LD_INT 61
24108: PPUSH
24109: LD_VAR 0 6
24113: PPUSH
24114: CALL_OW 321
24118: PUSH
24119: LD_INT 2
24121: EQUAL
24122: IFFALSE 24132
// viewRange := 16 ;
24124: LD_ADDR_VAR 0 7
24128: PUSH
24129: LD_INT 16
24131: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24132: LD_VAR 0 1
24136: PPUSH
24137: LD_VAR 0 2
24141: PPUSH
24142: LD_VAR 0 3
24146: PPUSH
24147: CALL_OW 297
24151: PUSH
24152: LD_VAR 0 5
24156: GREATER
24157: IFFALSE 24236
// begin ComMoveXY ( unit , x , y ) ;
24159: LD_VAR 0 1
24163: PPUSH
24164: LD_VAR 0 2
24168: PPUSH
24169: LD_VAR 0 3
24173: PPUSH
24174: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24178: LD_INT 35
24180: PPUSH
24181: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24185: LD_VAR 0 1
24189: PPUSH
24190: LD_VAR 0 2
24194: PPUSH
24195: LD_VAR 0 3
24199: PPUSH
24200: CALL 59263 0 3
24204: NOT
24205: IFFALSE 24209
// exit ;
24207: GO 24463
// until GetDistUnitXY ( unit , x , y ) < dist ;
24209: LD_VAR 0 1
24213: PPUSH
24214: LD_VAR 0 2
24218: PPUSH
24219: LD_VAR 0 3
24223: PPUSH
24224: CALL_OW 297
24228: PUSH
24229: LD_VAR 0 5
24233: LESS
24234: IFFALSE 24178
// end ; ComTurnXY ( unit , x , y ) ;
24236: LD_VAR 0 1
24240: PPUSH
24241: LD_VAR 0 2
24245: PPUSH
24246: LD_VAR 0 3
24250: PPUSH
24251: CALL_OW 118
// wait ( 5 ) ;
24255: LD_INT 5
24257: PPUSH
24258: CALL_OW 67
// _d := GetDir ( unit ) ;
24262: LD_ADDR_VAR 0 10
24266: PUSH
24267: LD_VAR 0 1
24271: PPUSH
24272: CALL_OW 254
24276: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24277: LD_ADDR_VAR 0 8
24281: PUSH
24282: LD_VAR 0 1
24286: PPUSH
24287: CALL_OW 250
24291: PPUSH
24292: LD_VAR 0 10
24296: PPUSH
24297: LD_VAR 0 5
24301: PPUSH
24302: CALL_OW 272
24306: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24307: LD_ADDR_VAR 0 9
24311: PUSH
24312: LD_VAR 0 1
24316: PPUSH
24317: CALL_OW 251
24321: PPUSH
24322: LD_VAR 0 10
24326: PPUSH
24327: LD_VAR 0 5
24331: PPUSH
24332: CALL_OW 273
24336: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24337: LD_VAR 0 8
24341: PPUSH
24342: LD_VAR 0 9
24346: PPUSH
24347: CALL_OW 488
24351: NOT
24352: IFFALSE 24356
// exit ;
24354: GO 24463
// ComAnimCustom ( unit , 1 ) ;
24356: LD_VAR 0 1
24360: PPUSH
24361: LD_INT 1
24363: PPUSH
24364: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24368: LD_VAR 0 8
24372: PPUSH
24373: LD_VAR 0 9
24377: PPUSH
24378: LD_VAR 0 6
24382: PPUSH
24383: LD_VAR 0 7
24387: PPUSH
24388: CALL_OW 330
// repeat wait ( 1 ) ;
24392: LD_INT 1
24394: PPUSH
24395: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24399: LD_VAR 0 1
24403: PPUSH
24404: CALL_OW 316
24408: PUSH
24409: LD_VAR 0 1
24413: PPUSH
24414: CALL_OW 314
24418: OR
24419: PUSH
24420: LD_VAR 0 1
24424: PPUSH
24425: CALL_OW 302
24429: NOT
24430: OR
24431: PUSH
24432: LD_VAR 0 1
24436: PPUSH
24437: CALL_OW 301
24441: OR
24442: IFFALSE 24392
// RemoveSeeing ( _x , _y , side ) ;
24444: LD_VAR 0 8
24448: PPUSH
24449: LD_VAR 0 9
24453: PPUSH
24454: LD_VAR 0 6
24458: PPUSH
24459: CALL_OW 331
// end ; end_of_file
24463: LD_VAR 0 4
24467: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24468: LD_INT 0
24470: PPUSH
24471: PPUSH
// if exist_mode then
24472: LD_VAR 0 2
24476: IFFALSE 24501
// unit := CreateCharacter ( prefix & ident ) else
24478: LD_ADDR_VAR 0 5
24482: PUSH
24483: LD_VAR 0 3
24487: PUSH
24488: LD_VAR 0 1
24492: STR
24493: PPUSH
24494: CALL_OW 34
24498: ST_TO_ADDR
24499: GO 24516
// unit := NewCharacter ( ident ) ;
24501: LD_ADDR_VAR 0 5
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 25
24515: ST_TO_ADDR
// result := unit ;
24516: LD_ADDR_VAR 0 4
24520: PUSH
24521: LD_VAR 0 5
24525: ST_TO_ADDR
// end ;
24526: LD_VAR 0 4
24530: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
// if not side or not nation then
24535: LD_VAR 0 1
24539: NOT
24540: PUSH
24541: LD_VAR 0 2
24545: NOT
24546: OR
24547: IFFALSE 24551
// exit ;
24549: GO 25315
// case nation of nation_american :
24551: LD_VAR 0 2
24555: PUSH
24556: LD_INT 1
24558: DOUBLE
24559: EQUAL
24560: IFTRUE 24564
24562: GO 24778
24564: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24565: LD_ADDR_VAR 0 4
24569: PUSH
24570: LD_INT 35
24572: PUSH
24573: LD_INT 45
24575: PUSH
24576: LD_INT 46
24578: PUSH
24579: LD_INT 47
24581: PUSH
24582: LD_INT 82
24584: PUSH
24585: LD_INT 83
24587: PUSH
24588: LD_INT 84
24590: PUSH
24591: LD_INT 85
24593: PUSH
24594: LD_INT 86
24596: PUSH
24597: LD_INT 1
24599: PUSH
24600: LD_INT 2
24602: PUSH
24603: LD_INT 6
24605: PUSH
24606: LD_INT 15
24608: PUSH
24609: LD_INT 16
24611: PUSH
24612: LD_INT 7
24614: PUSH
24615: LD_INT 12
24617: PUSH
24618: LD_INT 13
24620: PUSH
24621: LD_INT 10
24623: PUSH
24624: LD_INT 14
24626: PUSH
24627: LD_INT 20
24629: PUSH
24630: LD_INT 21
24632: PUSH
24633: LD_INT 22
24635: PUSH
24636: LD_INT 25
24638: PUSH
24639: LD_INT 32
24641: PUSH
24642: LD_INT 27
24644: PUSH
24645: LD_INT 36
24647: PUSH
24648: LD_INT 69
24650: PUSH
24651: LD_INT 39
24653: PUSH
24654: LD_INT 34
24656: PUSH
24657: LD_INT 40
24659: PUSH
24660: LD_INT 48
24662: PUSH
24663: LD_INT 49
24665: PUSH
24666: LD_INT 50
24668: PUSH
24669: LD_INT 51
24671: PUSH
24672: LD_INT 52
24674: PUSH
24675: LD_INT 53
24677: PUSH
24678: LD_INT 54
24680: PUSH
24681: LD_INT 55
24683: PUSH
24684: LD_INT 56
24686: PUSH
24687: LD_INT 57
24689: PUSH
24690: LD_INT 58
24692: PUSH
24693: LD_INT 59
24695: PUSH
24696: LD_INT 60
24698: PUSH
24699: LD_INT 61
24701: PUSH
24702: LD_INT 62
24704: PUSH
24705: LD_INT 80
24707: PUSH
24708: LD_INT 82
24710: PUSH
24711: LD_INT 83
24713: PUSH
24714: LD_INT 84
24716: PUSH
24717: LD_INT 85
24719: PUSH
24720: LD_INT 86
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: LIST
24770: LIST
24771: LIST
24772: LIST
24773: LIST
24774: LIST
24775: ST_TO_ADDR
24776: GO 25239
24778: LD_INT 2
24780: DOUBLE
24781: EQUAL
24782: IFTRUE 24786
24784: GO 25008
24786: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
24787: LD_ADDR_VAR 0 4
24791: PUSH
24792: LD_INT 35
24794: PUSH
24795: LD_INT 45
24797: PUSH
24798: LD_INT 46
24800: PUSH
24801: LD_INT 47
24803: PUSH
24804: LD_INT 82
24806: PUSH
24807: LD_INT 83
24809: PUSH
24810: LD_INT 84
24812: PUSH
24813: LD_INT 85
24815: PUSH
24816: LD_INT 87
24818: PUSH
24819: LD_INT 70
24821: PUSH
24822: LD_INT 1
24824: PUSH
24825: LD_INT 11
24827: PUSH
24828: LD_INT 3
24830: PUSH
24831: LD_INT 4
24833: PUSH
24834: LD_INT 5
24836: PUSH
24837: LD_INT 6
24839: PUSH
24840: LD_INT 15
24842: PUSH
24843: LD_INT 18
24845: PUSH
24846: LD_INT 7
24848: PUSH
24849: LD_INT 17
24851: PUSH
24852: LD_INT 8
24854: PUSH
24855: LD_INT 20
24857: PUSH
24858: LD_INT 21
24860: PUSH
24861: LD_INT 22
24863: PUSH
24864: LD_INT 72
24866: PUSH
24867: LD_INT 26
24869: PUSH
24870: LD_INT 69
24872: PUSH
24873: LD_INT 39
24875: PUSH
24876: LD_INT 40
24878: PUSH
24879: LD_INT 41
24881: PUSH
24882: LD_INT 42
24884: PUSH
24885: LD_INT 43
24887: PUSH
24888: LD_INT 48
24890: PUSH
24891: LD_INT 49
24893: PUSH
24894: LD_INT 50
24896: PUSH
24897: LD_INT 51
24899: PUSH
24900: LD_INT 52
24902: PUSH
24903: LD_INT 53
24905: PUSH
24906: LD_INT 54
24908: PUSH
24909: LD_INT 55
24911: PUSH
24912: LD_INT 56
24914: PUSH
24915: LD_INT 60
24917: PUSH
24918: LD_INT 61
24920: PUSH
24921: LD_INT 62
24923: PUSH
24924: LD_INT 66
24926: PUSH
24927: LD_INT 67
24929: PUSH
24930: LD_INT 68
24932: PUSH
24933: LD_INT 81
24935: PUSH
24936: LD_INT 82
24938: PUSH
24939: LD_INT 83
24941: PUSH
24942: LD_INT 84
24944: PUSH
24945: LD_INT 85
24947: PUSH
24948: LD_INT 87
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: LIST
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: ST_TO_ADDR
25006: GO 25239
25008: LD_INT 3
25010: DOUBLE
25011: EQUAL
25012: IFTRUE 25016
25014: GO 25238
25016: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25017: LD_ADDR_VAR 0 4
25021: PUSH
25022: LD_INT 46
25024: PUSH
25025: LD_INT 47
25027: PUSH
25028: LD_INT 1
25030: PUSH
25031: LD_INT 2
25033: PUSH
25034: LD_INT 82
25036: PUSH
25037: LD_INT 83
25039: PUSH
25040: LD_INT 84
25042: PUSH
25043: LD_INT 85
25045: PUSH
25046: LD_INT 86
25048: PUSH
25049: LD_INT 11
25051: PUSH
25052: LD_INT 9
25054: PUSH
25055: LD_INT 20
25057: PUSH
25058: LD_INT 19
25060: PUSH
25061: LD_INT 21
25063: PUSH
25064: LD_INT 24
25066: PUSH
25067: LD_INT 22
25069: PUSH
25070: LD_INT 25
25072: PUSH
25073: LD_INT 28
25075: PUSH
25076: LD_INT 29
25078: PUSH
25079: LD_INT 30
25081: PUSH
25082: LD_INT 31
25084: PUSH
25085: LD_INT 37
25087: PUSH
25088: LD_INT 38
25090: PUSH
25091: LD_INT 32
25093: PUSH
25094: LD_INT 27
25096: PUSH
25097: LD_INT 33
25099: PUSH
25100: LD_INT 69
25102: PUSH
25103: LD_INT 39
25105: PUSH
25106: LD_INT 34
25108: PUSH
25109: LD_INT 40
25111: PUSH
25112: LD_INT 71
25114: PUSH
25115: LD_INT 23
25117: PUSH
25118: LD_INT 44
25120: PUSH
25121: LD_INT 48
25123: PUSH
25124: LD_INT 49
25126: PUSH
25127: LD_INT 50
25129: PUSH
25130: LD_INT 51
25132: PUSH
25133: LD_INT 52
25135: PUSH
25136: LD_INT 53
25138: PUSH
25139: LD_INT 54
25141: PUSH
25142: LD_INT 55
25144: PUSH
25145: LD_INT 56
25147: PUSH
25148: LD_INT 57
25150: PUSH
25151: LD_INT 58
25153: PUSH
25154: LD_INT 59
25156: PUSH
25157: LD_INT 63
25159: PUSH
25160: LD_INT 64
25162: PUSH
25163: LD_INT 65
25165: PUSH
25166: LD_INT 82
25168: PUSH
25169: LD_INT 83
25171: PUSH
25172: LD_INT 84
25174: PUSH
25175: LD_INT 85
25177: PUSH
25178: LD_INT 86
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: ST_TO_ADDR
25236: GO 25239
25238: POP
// if state > - 1 and state < 3 then
25239: LD_VAR 0 3
25243: PUSH
25244: LD_INT 1
25246: NEG
25247: GREATER
25248: PUSH
25249: LD_VAR 0 3
25253: PUSH
25254: LD_INT 3
25256: LESS
25257: AND
25258: IFFALSE 25315
// for i in result do
25260: LD_ADDR_VAR 0 5
25264: PUSH
25265: LD_VAR 0 4
25269: PUSH
25270: FOR_IN
25271: IFFALSE 25313
// if GetTech ( i , side ) <> state then
25273: LD_VAR 0 5
25277: PPUSH
25278: LD_VAR 0 1
25282: PPUSH
25283: CALL_OW 321
25287: PUSH
25288: LD_VAR 0 3
25292: NONEQUAL
25293: IFFALSE 25311
// result := result diff i ;
25295: LD_ADDR_VAR 0 4
25299: PUSH
25300: LD_VAR 0 4
25304: PUSH
25305: LD_VAR 0 5
25309: DIFF
25310: ST_TO_ADDR
25311: GO 25270
25313: POP
25314: POP
// end ;
25315: LD_VAR 0 4
25319: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25320: LD_INT 0
25322: PPUSH
25323: PPUSH
25324: PPUSH
// result := true ;
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 1
25332: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25333: LD_ADDR_VAR 0 5
25337: PUSH
25338: LD_VAR 0 2
25342: PPUSH
25343: CALL_OW 480
25347: ST_TO_ADDR
// if not tmp then
25348: LD_VAR 0 5
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25406
// for i in tmp do
25357: LD_ADDR_VAR 0 4
25361: PUSH
25362: LD_VAR 0 5
25366: PUSH
25367: FOR_IN
25368: IFFALSE 25404
// if GetTech ( i , side ) <> state_researched then
25370: LD_VAR 0 4
25374: PPUSH
25375: LD_VAR 0 1
25379: PPUSH
25380: CALL_OW 321
25384: PUSH
25385: LD_INT 2
25387: NONEQUAL
25388: IFFALSE 25402
// begin result := false ;
25390: LD_ADDR_VAR 0 3
25394: PUSH
25395: LD_INT 0
25397: ST_TO_ADDR
// exit ;
25398: POP
25399: POP
25400: GO 25406
// end ;
25402: GO 25367
25404: POP
25405: POP
// end ;
25406: LD_VAR 0 3
25410: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25411: LD_INT 0
25413: PPUSH
25414: PPUSH
25415: PPUSH
25416: PPUSH
25417: PPUSH
25418: PPUSH
25419: PPUSH
25420: PPUSH
25421: PPUSH
25422: PPUSH
25423: PPUSH
25424: PPUSH
25425: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25426: LD_VAR 0 1
25430: NOT
25431: PUSH
25432: LD_VAR 0 1
25436: PPUSH
25437: CALL_OW 257
25441: PUSH
25442: LD_INT 9
25444: NONEQUAL
25445: OR
25446: IFFALSE 25450
// exit ;
25448: GO 26023
// side := GetSide ( unit ) ;
25450: LD_ADDR_VAR 0 9
25454: PUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL_OW 255
25464: ST_TO_ADDR
// tech_space := tech_spacanom ;
25465: LD_ADDR_VAR 0 12
25469: PUSH
25470: LD_INT 29
25472: ST_TO_ADDR
// tech_time := tech_taurad ;
25473: LD_ADDR_VAR 0 13
25477: PUSH
25478: LD_INT 28
25480: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25481: LD_ADDR_VAR 0 11
25485: PUSH
25486: LD_VAR 0 1
25490: PPUSH
25491: CALL_OW 310
25495: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25496: LD_VAR 0 11
25500: PPUSH
25501: CALL_OW 247
25505: PUSH
25506: LD_INT 2
25508: EQUAL
25509: IFFALSE 25513
// exit ;
25511: GO 26023
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25513: LD_ADDR_VAR 0 8
25517: PUSH
25518: LD_INT 81
25520: PUSH
25521: LD_VAR 0 9
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: PUSH
25530: LD_INT 3
25532: PUSH
25533: LD_INT 21
25535: PUSH
25536: LD_INT 3
25538: PUSH
25539: EMPTY
25540: LIST
25541: LIST
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PPUSH
25551: CALL_OW 69
25555: ST_TO_ADDR
// if not tmp then
25556: LD_VAR 0 8
25560: NOT
25561: IFFALSE 25565
// exit ;
25563: GO 26023
// if in_unit then
25565: LD_VAR 0 11
25569: IFFALSE 25593
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25571: LD_ADDR_VAR 0 10
25575: PUSH
25576: LD_VAR 0 8
25580: PPUSH
25581: LD_VAR 0 11
25585: PPUSH
25586: CALL_OW 74
25590: ST_TO_ADDR
25591: GO 25613
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25593: LD_ADDR_VAR 0 10
25597: PUSH
25598: LD_VAR 0 8
25602: PPUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 74
25612: ST_TO_ADDR
// if not enemy then
25613: LD_VAR 0 10
25617: NOT
25618: IFFALSE 25622
// exit ;
25620: GO 26023
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25622: LD_VAR 0 11
25626: PUSH
25627: LD_VAR 0 11
25631: PPUSH
25632: LD_VAR 0 10
25636: PPUSH
25637: CALL_OW 296
25641: PUSH
25642: LD_INT 13
25644: GREATER
25645: AND
25646: PUSH
25647: LD_VAR 0 1
25651: PPUSH
25652: LD_VAR 0 10
25656: PPUSH
25657: CALL_OW 296
25661: PUSH
25662: LD_INT 12
25664: GREATER
25665: OR
25666: IFFALSE 25670
// exit ;
25668: GO 26023
// missile := [ 1 ] ;
25670: LD_ADDR_VAR 0 14
25674: PUSH
25675: LD_INT 1
25677: PUSH
25678: EMPTY
25679: LIST
25680: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25681: LD_VAR 0 9
25685: PPUSH
25686: LD_VAR 0 12
25690: PPUSH
25691: CALL_OW 325
25695: IFFALSE 25724
// missile := Insert ( missile , missile + 1 , 2 ) ;
25697: LD_ADDR_VAR 0 14
25701: PUSH
25702: LD_VAR 0 14
25706: PPUSH
25707: LD_VAR 0 14
25711: PUSH
25712: LD_INT 1
25714: PLUS
25715: PPUSH
25716: LD_INT 2
25718: PPUSH
25719: CALL_OW 2
25723: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25724: LD_VAR 0 9
25728: PPUSH
25729: LD_VAR 0 13
25733: PPUSH
25734: CALL_OW 325
25738: PUSH
25739: LD_VAR 0 10
25743: PPUSH
25744: CALL_OW 255
25748: PPUSH
25749: LD_VAR 0 13
25753: PPUSH
25754: CALL_OW 325
25758: NOT
25759: AND
25760: IFFALSE 25789
// missile := Insert ( missile , missile + 1 , 3 ) ;
25762: LD_ADDR_VAR 0 14
25766: PUSH
25767: LD_VAR 0 14
25771: PPUSH
25772: LD_VAR 0 14
25776: PUSH
25777: LD_INT 1
25779: PLUS
25780: PPUSH
25781: LD_INT 3
25783: PPUSH
25784: CALL_OW 2
25788: ST_TO_ADDR
// if missile < 2 then
25789: LD_VAR 0 14
25793: PUSH
25794: LD_INT 2
25796: LESS
25797: IFFALSE 25801
// exit ;
25799: GO 26023
// x := GetX ( enemy ) ;
25801: LD_ADDR_VAR 0 4
25805: PUSH
25806: LD_VAR 0 10
25810: PPUSH
25811: CALL_OW 250
25815: ST_TO_ADDR
// y := GetY ( enemy ) ;
25816: LD_ADDR_VAR 0 5
25820: PUSH
25821: LD_VAR 0 10
25825: PPUSH
25826: CALL_OW 251
25830: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25831: LD_ADDR_VAR 0 6
25835: PUSH
25836: LD_VAR 0 4
25840: PUSH
25841: LD_INT 1
25843: NEG
25844: PPUSH
25845: LD_INT 1
25847: PPUSH
25848: CALL_OW 12
25852: PLUS
25853: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25854: LD_ADDR_VAR 0 7
25858: PUSH
25859: LD_VAR 0 5
25863: PUSH
25864: LD_INT 1
25866: NEG
25867: PPUSH
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 12
25875: PLUS
25876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25877: LD_VAR 0 6
25881: PPUSH
25882: LD_VAR 0 7
25886: PPUSH
25887: CALL_OW 488
25891: NOT
25892: IFFALSE 25914
// begin _x := x ;
25894: LD_ADDR_VAR 0 6
25898: PUSH
25899: LD_VAR 0 4
25903: ST_TO_ADDR
// _y := y ;
25904: LD_ADDR_VAR 0 7
25908: PUSH
25909: LD_VAR 0 5
25913: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25914: LD_ADDR_VAR 0 3
25918: PUSH
25919: LD_INT 1
25921: PPUSH
25922: LD_VAR 0 14
25926: PPUSH
25927: CALL_OW 12
25931: ST_TO_ADDR
// case i of 1 :
25932: LD_VAR 0 3
25936: PUSH
25937: LD_INT 1
25939: DOUBLE
25940: EQUAL
25941: IFTRUE 25945
25943: GO 25962
25945: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25946: LD_VAR 0 1
25950: PPUSH
25951: LD_VAR 0 10
25955: PPUSH
25956: CALL_OW 115
25960: GO 26023
25962: LD_INT 2
25964: DOUBLE
25965: EQUAL
25966: IFTRUE 25970
25968: GO 25992
25970: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25971: LD_VAR 0 1
25975: PPUSH
25976: LD_VAR 0 6
25980: PPUSH
25981: LD_VAR 0 7
25985: PPUSH
25986: CALL_OW 153
25990: GO 26023
25992: LD_INT 3
25994: DOUBLE
25995: EQUAL
25996: IFTRUE 26000
25998: GO 26022
26000: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26001: LD_VAR 0 1
26005: PPUSH
26006: LD_VAR 0 6
26010: PPUSH
26011: LD_VAR 0 7
26015: PPUSH
26016: CALL_OW 154
26020: GO 26023
26022: POP
// end ;
26023: LD_VAR 0 2
26027: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26028: LD_INT 0
26030: PPUSH
26031: PPUSH
26032: PPUSH
26033: PPUSH
26034: PPUSH
26035: PPUSH
// if not unit or not building then
26036: LD_VAR 0 1
26040: NOT
26041: PUSH
26042: LD_VAR 0 2
26046: NOT
26047: OR
26048: IFFALSE 26052
// exit ;
26050: GO 26210
// x := GetX ( building ) ;
26052: LD_ADDR_VAR 0 5
26056: PUSH
26057: LD_VAR 0 2
26061: PPUSH
26062: CALL_OW 250
26066: ST_TO_ADDR
// y := GetY ( building ) ;
26067: LD_ADDR_VAR 0 6
26071: PUSH
26072: LD_VAR 0 2
26076: PPUSH
26077: CALL_OW 251
26081: ST_TO_ADDR
// for i = 0 to 5 do
26082: LD_ADDR_VAR 0 4
26086: PUSH
26087: DOUBLE
26088: LD_INT 0
26090: DEC
26091: ST_TO_ADDR
26092: LD_INT 5
26094: PUSH
26095: FOR_TO
26096: IFFALSE 26208
// begin _x := ShiftX ( x , i , 3 ) ;
26098: LD_ADDR_VAR 0 7
26102: PUSH
26103: LD_VAR 0 5
26107: PPUSH
26108: LD_VAR 0 4
26112: PPUSH
26113: LD_INT 3
26115: PPUSH
26116: CALL_OW 272
26120: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26121: LD_ADDR_VAR 0 8
26125: PUSH
26126: LD_VAR 0 6
26130: PPUSH
26131: LD_VAR 0 4
26135: PPUSH
26136: LD_INT 3
26138: PPUSH
26139: CALL_OW 273
26143: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26144: LD_VAR 0 7
26148: PPUSH
26149: LD_VAR 0 8
26153: PPUSH
26154: CALL_OW 488
26158: NOT
26159: IFFALSE 26163
// continue ;
26161: GO 26095
// if HexInfo ( _x , _y ) = 0 then
26163: LD_VAR 0 7
26167: PPUSH
26168: LD_VAR 0 8
26172: PPUSH
26173: CALL_OW 428
26177: PUSH
26178: LD_INT 0
26180: EQUAL
26181: IFFALSE 26206
// begin ComMoveXY ( unit , _x , _y ) ;
26183: LD_VAR 0 1
26187: PPUSH
26188: LD_VAR 0 7
26192: PPUSH
26193: LD_VAR 0 8
26197: PPUSH
26198: CALL_OW 111
// exit ;
26202: POP
26203: POP
26204: GO 26210
// end ; end ;
26206: GO 26095
26208: POP
26209: POP
// end ;
26210: LD_VAR 0 3
26214: RET
// export function ScanBase ( side , base_area ) ; begin
26215: LD_INT 0
26217: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26218: LD_ADDR_VAR 0 3
26222: PUSH
26223: LD_VAR 0 2
26227: PPUSH
26228: LD_INT 81
26230: PUSH
26231: LD_VAR 0 1
26235: PUSH
26236: EMPTY
26237: LIST
26238: LIST
26239: PPUSH
26240: CALL_OW 70
26244: ST_TO_ADDR
// end ;
26245: LD_VAR 0 3
26249: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26250: LD_INT 0
26252: PPUSH
26253: PPUSH
26254: PPUSH
26255: PPUSH
// result := false ;
26256: LD_ADDR_VAR 0 2
26260: PUSH
26261: LD_INT 0
26263: ST_TO_ADDR
// side := GetSide ( unit ) ;
26264: LD_ADDR_VAR 0 3
26268: PUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 255
26278: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26279: LD_ADDR_VAR 0 4
26283: PUSH
26284: LD_VAR 0 1
26288: PPUSH
26289: CALL_OW 248
26293: ST_TO_ADDR
// case nat of 1 :
26294: LD_VAR 0 4
26298: PUSH
26299: LD_INT 1
26301: DOUBLE
26302: EQUAL
26303: IFTRUE 26307
26305: GO 26318
26307: POP
// tech := tech_lassight ; 2 :
26308: LD_ADDR_VAR 0 5
26312: PUSH
26313: LD_INT 12
26315: ST_TO_ADDR
26316: GO 26357
26318: LD_INT 2
26320: DOUBLE
26321: EQUAL
26322: IFTRUE 26326
26324: GO 26337
26326: POP
// tech := tech_mortar ; 3 :
26327: LD_ADDR_VAR 0 5
26331: PUSH
26332: LD_INT 41
26334: ST_TO_ADDR
26335: GO 26357
26337: LD_INT 3
26339: DOUBLE
26340: EQUAL
26341: IFTRUE 26345
26343: GO 26356
26345: POP
// tech := tech_bazooka ; end ;
26346: LD_ADDR_VAR 0 5
26350: PUSH
26351: LD_INT 44
26353: ST_TO_ADDR
26354: GO 26357
26356: POP
// if Researched ( side , tech ) then
26357: LD_VAR 0 3
26361: PPUSH
26362: LD_VAR 0 5
26366: PPUSH
26367: CALL_OW 325
26371: IFFALSE 26398
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26373: LD_ADDR_VAR 0 2
26377: PUSH
26378: LD_INT 5
26380: PUSH
26381: LD_INT 8
26383: PUSH
26384: LD_INT 9
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: LIST
26391: PUSH
26392: LD_VAR 0 4
26396: ARRAY
26397: ST_TO_ADDR
// end ;
26398: LD_VAR 0 2
26402: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26403: LD_INT 0
26405: PPUSH
26406: PPUSH
26407: PPUSH
// if not mines then
26408: LD_VAR 0 2
26412: NOT
26413: IFFALSE 26417
// exit ;
26415: GO 26561
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26417: LD_ADDR_VAR 0 5
26421: PUSH
26422: LD_INT 81
26424: PUSH
26425: LD_VAR 0 1
26429: PUSH
26430: EMPTY
26431: LIST
26432: LIST
26433: PUSH
26434: LD_INT 3
26436: PUSH
26437: LD_INT 21
26439: PUSH
26440: LD_INT 3
26442: PUSH
26443: EMPTY
26444: LIST
26445: LIST
26446: PUSH
26447: EMPTY
26448: LIST
26449: LIST
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PPUSH
26455: CALL_OW 69
26459: ST_TO_ADDR
// for i in mines do
26460: LD_ADDR_VAR 0 4
26464: PUSH
26465: LD_VAR 0 2
26469: PUSH
26470: FOR_IN
26471: IFFALSE 26559
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26473: LD_VAR 0 4
26477: PUSH
26478: LD_INT 1
26480: ARRAY
26481: PPUSH
26482: LD_VAR 0 4
26486: PUSH
26487: LD_INT 2
26489: ARRAY
26490: PPUSH
26491: CALL_OW 458
26495: NOT
26496: IFFALSE 26500
// continue ;
26498: GO 26470
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26500: LD_VAR 0 4
26504: PUSH
26505: LD_INT 1
26507: ARRAY
26508: PPUSH
26509: LD_VAR 0 4
26513: PUSH
26514: LD_INT 2
26516: ARRAY
26517: PPUSH
26518: CALL_OW 428
26522: PUSH
26523: LD_VAR 0 5
26527: IN
26528: IFFALSE 26557
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26530: LD_VAR 0 4
26534: PUSH
26535: LD_INT 1
26537: ARRAY
26538: PPUSH
26539: LD_VAR 0 4
26543: PUSH
26544: LD_INT 2
26546: ARRAY
26547: PPUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 456
// end ;
26557: GO 26470
26559: POP
26560: POP
// end ;
26561: LD_VAR 0 3
26565: RET
// export function Count ( array ) ; var i ; begin
26566: LD_INT 0
26568: PPUSH
26569: PPUSH
// result := 0 ;
26570: LD_ADDR_VAR 0 2
26574: PUSH
26575: LD_INT 0
26577: ST_TO_ADDR
// for i in array do
26578: LD_ADDR_VAR 0 3
26582: PUSH
26583: LD_VAR 0 1
26587: PUSH
26588: FOR_IN
26589: IFFALSE 26613
// if i then
26591: LD_VAR 0 3
26595: IFFALSE 26611
// result := result + 1 ;
26597: LD_ADDR_VAR 0 2
26601: PUSH
26602: LD_VAR 0 2
26606: PUSH
26607: LD_INT 1
26609: PLUS
26610: ST_TO_ADDR
26611: GO 26588
26613: POP
26614: POP
// end ;
26615: LD_VAR 0 2
26619: RET
// export function IsEmpty ( building ) ; begin
26620: LD_INT 0
26622: PPUSH
// if not building then
26623: LD_VAR 0 1
26627: NOT
26628: IFFALSE 26632
// exit ;
26630: GO 26675
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26632: LD_ADDR_VAR 0 2
26636: PUSH
26637: LD_VAR 0 1
26641: PUSH
26642: LD_INT 22
26644: PUSH
26645: LD_VAR 0 1
26649: PPUSH
26650: CALL_OW 255
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: LD_INT 58
26661: PUSH
26662: EMPTY
26663: LIST
26664: PUSH
26665: EMPTY
26666: LIST
26667: LIST
26668: PPUSH
26669: CALL_OW 69
26673: IN
26674: ST_TO_ADDR
// end ;
26675: LD_VAR 0 2
26679: RET
// export function IsNotFull ( building ) ; begin
26680: LD_INT 0
26682: PPUSH
// if not building then
26683: LD_VAR 0 1
26687: NOT
26688: IFFALSE 26692
// exit ;
26690: GO 26711
// result := UnitsInside ( building ) < 6 ;
26692: LD_ADDR_VAR 0 2
26696: PUSH
26697: LD_VAR 0 1
26701: PPUSH
26702: CALL_OW 313
26706: PUSH
26707: LD_INT 6
26709: LESS
26710: ST_TO_ADDR
// end ;
26711: LD_VAR 0 2
26715: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26716: LD_INT 0
26718: PPUSH
26719: PPUSH
26720: PPUSH
26721: PPUSH
// tmp := [ ] ;
26722: LD_ADDR_VAR 0 3
26726: PUSH
26727: EMPTY
26728: ST_TO_ADDR
// list := [ ] ;
26729: LD_ADDR_VAR 0 5
26733: PUSH
26734: EMPTY
26735: ST_TO_ADDR
// for i = 16 to 25 do
26736: LD_ADDR_VAR 0 4
26740: PUSH
26741: DOUBLE
26742: LD_INT 16
26744: DEC
26745: ST_TO_ADDR
26746: LD_INT 25
26748: PUSH
26749: FOR_TO
26750: IFFALSE 26823
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26752: LD_ADDR_VAR 0 3
26756: PUSH
26757: LD_VAR 0 3
26761: PUSH
26762: LD_INT 22
26764: PUSH
26765: LD_VAR 0 1
26769: PPUSH
26770: CALL_OW 255
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 91
26781: PUSH
26782: LD_VAR 0 1
26786: PUSH
26787: LD_INT 6
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 30
26797: PUSH
26798: LD_VAR 0 4
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: PPUSH
26815: CALL_OW 69
26819: ADD
26820: ST_TO_ADDR
26821: GO 26749
26823: POP
26824: POP
// for i = 1 to tmp do
26825: LD_ADDR_VAR 0 4
26829: PUSH
26830: DOUBLE
26831: LD_INT 1
26833: DEC
26834: ST_TO_ADDR
26835: LD_VAR 0 3
26839: PUSH
26840: FOR_TO
26841: IFFALSE 26929
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26843: LD_ADDR_VAR 0 5
26847: PUSH
26848: LD_VAR 0 5
26852: PUSH
26853: LD_VAR 0 3
26857: PUSH
26858: LD_VAR 0 4
26862: ARRAY
26863: PPUSH
26864: CALL_OW 266
26868: PUSH
26869: LD_VAR 0 3
26873: PUSH
26874: LD_VAR 0 4
26878: ARRAY
26879: PPUSH
26880: CALL_OW 250
26884: PUSH
26885: LD_VAR 0 3
26889: PUSH
26890: LD_VAR 0 4
26894: ARRAY
26895: PPUSH
26896: CALL_OW 251
26900: PUSH
26901: LD_VAR 0 3
26905: PUSH
26906: LD_VAR 0 4
26910: ARRAY
26911: PPUSH
26912: CALL_OW 254
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: PUSH
26923: EMPTY
26924: LIST
26925: ADD
26926: ST_TO_ADDR
26927: GO 26840
26929: POP
26930: POP
// result := list ;
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 5
26940: ST_TO_ADDR
// end ;
26941: LD_VAR 0 2
26945: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26946: LD_INT 0
26948: PPUSH
26949: PPUSH
26950: PPUSH
26951: PPUSH
26952: PPUSH
26953: PPUSH
26954: PPUSH
// if not factory then
26955: LD_VAR 0 1
26959: NOT
26960: IFFALSE 26964
// exit ;
26962: GO 27557
// if control = control_apeman then
26964: LD_VAR 0 4
26968: PUSH
26969: LD_INT 5
26971: EQUAL
26972: IFFALSE 27081
// begin tmp := UnitsInside ( factory ) ;
26974: LD_ADDR_VAR 0 8
26978: PUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 313
26988: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26989: LD_VAR 0 8
26993: PPUSH
26994: LD_INT 25
26996: PUSH
26997: LD_INT 12
26999: PUSH
27000: EMPTY
27001: LIST
27002: LIST
27003: PPUSH
27004: CALL_OW 72
27008: NOT
27009: IFFALSE 27019
// control := control_manual ;
27011: LD_ADDR_VAR 0 4
27015: PUSH
27016: LD_INT 1
27018: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27019: LD_ADDR_VAR 0 8
27023: PUSH
27024: LD_VAR 0 1
27028: PPUSH
27029: CALL 26716 0 1
27033: ST_TO_ADDR
// if tmp then
27034: LD_VAR 0 8
27038: IFFALSE 27081
// begin for i in tmp do
27040: LD_ADDR_VAR 0 7
27044: PUSH
27045: LD_VAR 0 8
27049: PUSH
27050: FOR_IN
27051: IFFALSE 27079
// if i [ 1 ] = b_ext_radio then
27053: LD_VAR 0 7
27057: PUSH
27058: LD_INT 1
27060: ARRAY
27061: PUSH
27062: LD_INT 22
27064: EQUAL
27065: IFFALSE 27077
// begin control := control_remote ;
27067: LD_ADDR_VAR 0 4
27071: PUSH
27072: LD_INT 2
27074: ST_TO_ADDR
// break ;
27075: GO 27079
// end ;
27077: GO 27050
27079: POP
27080: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27081: LD_VAR 0 1
27085: PPUSH
27086: LD_VAR 0 2
27090: PPUSH
27091: LD_VAR 0 3
27095: PPUSH
27096: LD_VAR 0 4
27100: PPUSH
27101: LD_VAR 0 5
27105: PPUSH
27106: CALL_OW 448
27110: IFFALSE 27145
// begin result := [ chassis , engine , control , weapon ] ;
27112: LD_ADDR_VAR 0 6
27116: PUSH
27117: LD_VAR 0 2
27121: PUSH
27122: LD_VAR 0 3
27126: PUSH
27127: LD_VAR 0 4
27131: PUSH
27132: LD_VAR 0 5
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: ST_TO_ADDR
// exit ;
27143: GO 27557
// end ; _chassis := AvailableChassisList ( factory ) ;
27145: LD_ADDR_VAR 0 9
27149: PUSH
27150: LD_VAR 0 1
27154: PPUSH
27155: CALL_OW 475
27159: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27160: LD_ADDR_VAR 0 11
27164: PUSH
27165: LD_VAR 0 1
27169: PPUSH
27170: CALL_OW 476
27174: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27175: LD_ADDR_VAR 0 12
27179: PUSH
27180: LD_VAR 0 1
27184: PPUSH
27185: CALL_OW 477
27189: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27190: LD_ADDR_VAR 0 10
27194: PUSH
27195: LD_VAR 0 1
27199: PPUSH
27200: CALL_OW 478
27204: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27205: LD_VAR 0 9
27209: NOT
27210: PUSH
27211: LD_VAR 0 11
27215: NOT
27216: OR
27217: PUSH
27218: LD_VAR 0 12
27222: NOT
27223: OR
27224: PUSH
27225: LD_VAR 0 10
27229: NOT
27230: OR
27231: IFFALSE 27266
// begin result := [ chassis , engine , control , weapon ] ;
27233: LD_ADDR_VAR 0 6
27237: PUSH
27238: LD_VAR 0 2
27242: PUSH
27243: LD_VAR 0 3
27247: PUSH
27248: LD_VAR 0 4
27252: PUSH
27253: LD_VAR 0 5
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: ST_TO_ADDR
// exit ;
27264: GO 27557
// end ; if not chassis in _chassis then
27266: LD_VAR 0 2
27270: PUSH
27271: LD_VAR 0 9
27275: IN
27276: NOT
27277: IFFALSE 27303
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27279: LD_ADDR_VAR 0 2
27283: PUSH
27284: LD_VAR 0 9
27288: PUSH
27289: LD_INT 1
27291: PPUSH
27292: LD_VAR 0 9
27296: PPUSH
27297: CALL_OW 12
27301: ARRAY
27302: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27303: LD_VAR 0 2
27307: PPUSH
27308: LD_VAR 0 3
27312: PPUSH
27313: CALL 27562 0 2
27317: NOT
27318: IFFALSE 27377
// repeat engine := _engine [ 1 ] ;
27320: LD_ADDR_VAR 0 3
27324: PUSH
27325: LD_VAR 0 11
27329: PUSH
27330: LD_INT 1
27332: ARRAY
27333: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27334: LD_ADDR_VAR 0 11
27338: PUSH
27339: LD_VAR 0 11
27343: PPUSH
27344: LD_INT 1
27346: PPUSH
27347: CALL_OW 3
27351: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: CALL 27562 0 2
27366: PUSH
27367: LD_VAR 0 11
27371: PUSH
27372: EMPTY
27373: EQUAL
27374: OR
27375: IFFALSE 27320
// if not control in _control then
27377: LD_VAR 0 4
27381: PUSH
27382: LD_VAR 0 12
27386: IN
27387: NOT
27388: IFFALSE 27414
// control := _control [ rand ( 1 , _control ) ] ;
27390: LD_ADDR_VAR 0 4
27394: PUSH
27395: LD_VAR 0 12
27399: PUSH
27400: LD_INT 1
27402: PPUSH
27403: LD_VAR 0 12
27407: PPUSH
27408: CALL_OW 12
27412: ARRAY
27413: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27414: LD_VAR 0 2
27418: PPUSH
27419: LD_VAR 0 5
27423: PPUSH
27424: CALL 27782 0 2
27428: NOT
27429: IFFALSE 27488
// repeat weapon := _weapon [ 1 ] ;
27431: LD_ADDR_VAR 0 5
27435: PUSH
27436: LD_VAR 0 10
27440: PUSH
27441: LD_INT 1
27443: ARRAY
27444: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27445: LD_ADDR_VAR 0 10
27449: PUSH
27450: LD_VAR 0 10
27454: PPUSH
27455: LD_INT 1
27457: PPUSH
27458: CALL_OW 3
27462: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27463: LD_VAR 0 2
27467: PPUSH
27468: LD_VAR 0 5
27472: PPUSH
27473: CALL 27782 0 2
27477: PUSH
27478: LD_VAR 0 10
27482: PUSH
27483: EMPTY
27484: EQUAL
27485: OR
27486: IFFALSE 27431
// result := [ ] ;
27488: LD_ADDR_VAR 0 6
27492: PUSH
27493: EMPTY
27494: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27495: LD_VAR 0 1
27499: PPUSH
27500: LD_VAR 0 2
27504: PPUSH
27505: LD_VAR 0 3
27509: PPUSH
27510: LD_VAR 0 4
27514: PPUSH
27515: LD_VAR 0 5
27519: PPUSH
27520: CALL_OW 448
27524: IFFALSE 27557
// result := [ chassis , engine , control , weapon ] ;
27526: LD_ADDR_VAR 0 6
27530: PUSH
27531: LD_VAR 0 2
27535: PUSH
27536: LD_VAR 0 3
27540: PUSH
27541: LD_VAR 0 4
27545: PUSH
27546: LD_VAR 0 5
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: ST_TO_ADDR
// end ;
27557: LD_VAR 0 6
27561: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27562: LD_INT 0
27564: PPUSH
// if not chassis or not engine then
27565: LD_VAR 0 1
27569: NOT
27570: PUSH
27571: LD_VAR 0 2
27575: NOT
27576: OR
27577: IFFALSE 27581
// exit ;
27579: GO 27777
// case engine of engine_solar :
27581: LD_VAR 0 2
27585: PUSH
27586: LD_INT 2
27588: DOUBLE
27589: EQUAL
27590: IFTRUE 27594
27592: GO 27632
27594: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27595: LD_ADDR_VAR 0 3
27599: PUSH
27600: LD_INT 11
27602: PUSH
27603: LD_INT 12
27605: PUSH
27606: LD_INT 13
27608: PUSH
27609: LD_INT 14
27611: PUSH
27612: LD_INT 1
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: LD_INT 3
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: ST_TO_ADDR
27630: GO 27761
27632: LD_INT 1
27634: DOUBLE
27635: EQUAL
27636: IFTRUE 27640
27638: GO 27702
27640: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27641: LD_ADDR_VAR 0 3
27645: PUSH
27646: LD_INT 11
27648: PUSH
27649: LD_INT 12
27651: PUSH
27652: LD_INT 13
27654: PUSH
27655: LD_INT 14
27657: PUSH
27658: LD_INT 1
27660: PUSH
27661: LD_INT 2
27663: PUSH
27664: LD_INT 3
27666: PUSH
27667: LD_INT 4
27669: PUSH
27670: LD_INT 5
27672: PUSH
27673: LD_INT 21
27675: PUSH
27676: LD_INT 23
27678: PUSH
27679: LD_INT 22
27681: PUSH
27682: LD_INT 24
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: ST_TO_ADDR
27700: GO 27761
27702: LD_INT 3
27704: DOUBLE
27705: EQUAL
27706: IFTRUE 27710
27708: GO 27760
27710: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27711: LD_ADDR_VAR 0 3
27715: PUSH
27716: LD_INT 13
27718: PUSH
27719: LD_INT 14
27721: PUSH
27722: LD_INT 2
27724: PUSH
27725: LD_INT 3
27727: PUSH
27728: LD_INT 4
27730: PUSH
27731: LD_INT 5
27733: PUSH
27734: LD_INT 21
27736: PUSH
27737: LD_INT 22
27739: PUSH
27740: LD_INT 23
27742: PUSH
27743: LD_INT 24
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: ST_TO_ADDR
27758: GO 27761
27760: POP
// result := ( chassis in result ) ;
27761: LD_ADDR_VAR 0 3
27765: PUSH
27766: LD_VAR 0 1
27770: PUSH
27771: LD_VAR 0 3
27775: IN
27776: ST_TO_ADDR
// end ;
27777: LD_VAR 0 3
27781: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27782: LD_INT 0
27784: PPUSH
// if not chassis or not weapon then
27785: LD_VAR 0 1
27789: NOT
27790: PUSH
27791: LD_VAR 0 2
27795: NOT
27796: OR
27797: IFFALSE 27801
// exit ;
27799: GO 28827
// case weapon of us_machine_gun :
27801: LD_VAR 0 2
27805: PUSH
27806: LD_INT 2
27808: DOUBLE
27809: EQUAL
27810: IFTRUE 27814
27812: GO 27844
27814: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27815: LD_ADDR_VAR 0 3
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: LD_INT 2
27825: PUSH
27826: LD_INT 3
27828: PUSH
27829: LD_INT 4
27831: PUSH
27832: LD_INT 5
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
27842: GO 28811
27844: LD_INT 3
27846: DOUBLE
27847: EQUAL
27848: IFTRUE 27852
27850: GO 27882
27852: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_INT 1
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 4
27869: PUSH
27870: LD_INT 5
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: ST_TO_ADDR
27880: GO 28811
27882: LD_INT 11
27884: DOUBLE
27885: EQUAL
27886: IFTRUE 27890
27888: GO 27920
27890: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27891: LD_ADDR_VAR 0 3
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 3
27904: PUSH
27905: LD_INT 4
27907: PUSH
27908: LD_INT 5
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 28811
27920: LD_INT 4
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27928
27926: GO 27954
27928: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 2
27936: PUSH
27937: LD_INT 3
27939: PUSH
27940: LD_INT 4
27942: PUSH
27943: LD_INT 5
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
27952: GO 28811
27954: LD_INT 5
27956: DOUBLE
27957: EQUAL
27958: IFTRUE 27962
27960: GO 27988
27962: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27963: LD_ADDR_VAR 0 3
27967: PUSH
27968: LD_INT 2
27970: PUSH
27971: LD_INT 3
27973: PUSH
27974: LD_INT 4
27976: PUSH
27977: LD_INT 5
27979: PUSH
27980: EMPTY
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
27986: GO 28811
27988: LD_INT 9
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28022
27996: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 2
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 4
28010: PUSH
28011: LD_INT 5
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
28020: GO 28811
28022: LD_INT 7
28024: DOUBLE
28025: EQUAL
28026: IFTRUE 28030
28028: GO 28056
28030: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28031: LD_ADDR_VAR 0 3
28035: PUSH
28036: LD_INT 2
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: LD_INT 4
28044: PUSH
28045: LD_INT 5
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
28054: GO 28811
28056: LD_INT 12
28058: DOUBLE
28059: EQUAL
28060: IFTRUE 28064
28062: GO 28090
28064: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28065: LD_ADDR_VAR 0 3
28069: PUSH
28070: LD_INT 2
28072: PUSH
28073: LD_INT 3
28075: PUSH
28076: LD_INT 4
28078: PUSH
28079: LD_INT 5
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
28088: GO 28811
28090: LD_INT 13
28092: DOUBLE
28093: EQUAL
28094: IFTRUE 28098
28096: GO 28124
28098: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28099: LD_ADDR_VAR 0 3
28103: PUSH
28104: LD_INT 2
28106: PUSH
28107: LD_INT 3
28109: PUSH
28110: LD_INT 4
28112: PUSH
28113: LD_INT 5
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: ST_TO_ADDR
28122: GO 28811
28124: LD_INT 14
28126: DOUBLE
28127: EQUAL
28128: IFTRUE 28132
28130: GO 28150
28132: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28133: LD_ADDR_VAR 0 3
28137: PUSH
28138: LD_INT 4
28140: PUSH
28141: LD_INT 5
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: ST_TO_ADDR
28148: GO 28811
28150: LD_INT 6
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28176
28158: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: LD_INT 4
28166: PUSH
28167: LD_INT 5
28169: PUSH
28170: EMPTY
28171: LIST
28172: LIST
28173: ST_TO_ADDR
28174: GO 28811
28176: LD_INT 10
28178: DOUBLE
28179: EQUAL
28180: IFTRUE 28184
28182: GO 28202
28184: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28185: LD_ADDR_VAR 0 3
28189: PUSH
28190: LD_INT 4
28192: PUSH
28193: LD_INT 5
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: ST_TO_ADDR
28200: GO 28811
28202: LD_INT 22
28204: DOUBLE
28205: EQUAL
28206: IFTRUE 28210
28208: GO 28236
28210: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28211: LD_ADDR_VAR 0 3
28215: PUSH
28216: LD_INT 11
28218: PUSH
28219: LD_INT 12
28221: PUSH
28222: LD_INT 13
28224: PUSH
28225: LD_INT 14
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: ST_TO_ADDR
28234: GO 28811
28236: LD_INT 23
28238: DOUBLE
28239: EQUAL
28240: IFTRUE 28244
28242: GO 28270
28244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28245: LD_ADDR_VAR 0 3
28249: PUSH
28250: LD_INT 11
28252: PUSH
28253: LD_INT 12
28255: PUSH
28256: LD_INT 13
28258: PUSH
28259: LD_INT 14
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: LIST
28266: LIST
28267: ST_TO_ADDR
28268: GO 28811
28270: LD_INT 24
28272: DOUBLE
28273: EQUAL
28274: IFTRUE 28278
28276: GO 28304
28278: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28279: LD_ADDR_VAR 0 3
28283: PUSH
28284: LD_INT 11
28286: PUSH
28287: LD_INT 12
28289: PUSH
28290: LD_INT 13
28292: PUSH
28293: LD_INT 14
28295: PUSH
28296: EMPTY
28297: LIST
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
28302: GO 28811
28304: LD_INT 30
28306: DOUBLE
28307: EQUAL
28308: IFTRUE 28312
28310: GO 28338
28312: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28313: LD_ADDR_VAR 0 3
28317: PUSH
28318: LD_INT 11
28320: PUSH
28321: LD_INT 12
28323: PUSH
28324: LD_INT 13
28326: PUSH
28327: LD_INT 14
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: ST_TO_ADDR
28336: GO 28811
28338: LD_INT 25
28340: DOUBLE
28341: EQUAL
28342: IFTRUE 28346
28344: GO 28364
28346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28347: LD_ADDR_VAR 0 3
28351: PUSH
28352: LD_INT 13
28354: PUSH
28355: LD_INT 14
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: ST_TO_ADDR
28362: GO 28811
28364: LD_INT 27
28366: DOUBLE
28367: EQUAL
28368: IFTRUE 28372
28370: GO 28390
28372: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28373: LD_ADDR_VAR 0 3
28377: PUSH
28378: LD_INT 13
28380: PUSH
28381: LD_INT 14
28383: PUSH
28384: EMPTY
28385: LIST
28386: LIST
28387: ST_TO_ADDR
28388: GO 28811
28390: LD_INT 28
28392: DOUBLE
28393: EQUAL
28394: IFTRUE 28398
28396: GO 28416
28398: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: LD_INT 13
28406: PUSH
28407: LD_INT 14
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: ST_TO_ADDR
28414: GO 28811
28416: LD_INT 29
28418: DOUBLE
28419: EQUAL
28420: IFTRUE 28424
28422: GO 28442
28424: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28425: LD_ADDR_VAR 0 3
28429: PUSH
28430: LD_INT 13
28432: PUSH
28433: LD_INT 14
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: ST_TO_ADDR
28440: GO 28811
28442: LD_INT 31
28444: DOUBLE
28445: EQUAL
28446: IFTRUE 28450
28448: GO 28468
28450: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: LD_INT 13
28458: PUSH
28459: LD_INT 14
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: ST_TO_ADDR
28466: GO 28811
28468: LD_INT 26
28470: DOUBLE
28471: EQUAL
28472: IFTRUE 28476
28474: GO 28494
28476: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28477: LD_ADDR_VAR 0 3
28481: PUSH
28482: LD_INT 13
28484: PUSH
28485: LD_INT 14
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: ST_TO_ADDR
28492: GO 28811
28494: LD_INT 42
28496: DOUBLE
28497: EQUAL
28498: IFTRUE 28502
28500: GO 28528
28502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_INT 21
28510: PUSH
28511: LD_INT 22
28513: PUSH
28514: LD_INT 23
28516: PUSH
28517: LD_INT 24
28519: PUSH
28520: EMPTY
28521: LIST
28522: LIST
28523: LIST
28524: LIST
28525: ST_TO_ADDR
28526: GO 28811
28528: LD_INT 43
28530: DOUBLE
28531: EQUAL
28532: IFTRUE 28536
28534: GO 28562
28536: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 21
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_INT 23
28550: PUSH
28551: LD_INT 24
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: ST_TO_ADDR
28560: GO 28811
28562: LD_INT 44
28564: DOUBLE
28565: EQUAL
28566: IFTRUE 28570
28568: GO 28596
28570: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: LD_INT 21
28578: PUSH
28579: LD_INT 22
28581: PUSH
28582: LD_INT 23
28584: PUSH
28585: LD_INT 24
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: ST_TO_ADDR
28594: GO 28811
28596: LD_INT 45
28598: DOUBLE
28599: EQUAL
28600: IFTRUE 28604
28602: GO 28630
28604: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28605: LD_ADDR_VAR 0 3
28609: PUSH
28610: LD_INT 21
28612: PUSH
28613: LD_INT 22
28615: PUSH
28616: LD_INT 23
28618: PUSH
28619: LD_INT 24
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: ST_TO_ADDR
28628: GO 28811
28630: LD_INT 49
28632: DOUBLE
28633: EQUAL
28634: IFTRUE 28638
28636: GO 28664
28638: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28639: LD_ADDR_VAR 0 3
28643: PUSH
28644: LD_INT 21
28646: PUSH
28647: LD_INT 22
28649: PUSH
28650: LD_INT 23
28652: PUSH
28653: LD_INT 24
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: LIST
28660: LIST
28661: ST_TO_ADDR
28662: GO 28811
28664: LD_INT 51
28666: DOUBLE
28667: EQUAL
28668: IFTRUE 28672
28670: GO 28698
28672: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28673: LD_ADDR_VAR 0 3
28677: PUSH
28678: LD_INT 21
28680: PUSH
28681: LD_INT 22
28683: PUSH
28684: LD_INT 23
28686: PUSH
28687: LD_INT 24
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: LIST
28694: LIST
28695: ST_TO_ADDR
28696: GO 28811
28698: LD_INT 52
28700: DOUBLE
28701: EQUAL
28702: IFTRUE 28706
28704: GO 28732
28706: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28707: LD_ADDR_VAR 0 3
28711: PUSH
28712: LD_INT 21
28714: PUSH
28715: LD_INT 22
28717: PUSH
28718: LD_INT 23
28720: PUSH
28721: LD_INT 24
28723: PUSH
28724: EMPTY
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: ST_TO_ADDR
28730: GO 28811
28732: LD_INT 53
28734: DOUBLE
28735: EQUAL
28736: IFTRUE 28740
28738: GO 28758
28740: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28741: LD_ADDR_VAR 0 3
28745: PUSH
28746: LD_INT 23
28748: PUSH
28749: LD_INT 24
28751: PUSH
28752: EMPTY
28753: LIST
28754: LIST
28755: ST_TO_ADDR
28756: GO 28811
28758: LD_INT 46
28760: DOUBLE
28761: EQUAL
28762: IFTRUE 28766
28764: GO 28784
28766: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28767: LD_ADDR_VAR 0 3
28771: PUSH
28772: LD_INT 23
28774: PUSH
28775: LD_INT 24
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: ST_TO_ADDR
28782: GO 28811
28784: LD_INT 47
28786: DOUBLE
28787: EQUAL
28788: IFTRUE 28792
28790: GO 28810
28792: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28793: LD_ADDR_VAR 0 3
28797: PUSH
28798: LD_INT 23
28800: PUSH
28801: LD_INT 24
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: ST_TO_ADDR
28808: GO 28811
28810: POP
// result := ( chassis in result ) ;
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: LD_VAR 0 1
28820: PUSH
28821: LD_VAR 0 3
28825: IN
28826: ST_TO_ADDR
// end ;
28827: LD_VAR 0 3
28831: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
// result := array ;
28841: LD_ADDR_VAR 0 5
28845: PUSH
28846: LD_VAR 0 1
28850: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28851: LD_VAR 0 1
28855: NOT
28856: PUSH
28857: LD_VAR 0 2
28861: NOT
28862: OR
28863: PUSH
28864: LD_VAR 0 3
28868: NOT
28869: OR
28870: PUSH
28871: LD_VAR 0 2
28875: PUSH
28876: LD_VAR 0 1
28880: GREATER
28881: OR
28882: PUSH
28883: LD_VAR 0 3
28887: PUSH
28888: LD_VAR 0 1
28892: GREATER
28893: OR
28894: IFFALSE 28898
// exit ;
28896: GO 29194
// if direction then
28898: LD_VAR 0 4
28902: IFFALSE 28966
// begin d := 1 ;
28904: LD_ADDR_VAR 0 9
28908: PUSH
28909: LD_INT 1
28911: ST_TO_ADDR
// if i_from > i_to then
28912: LD_VAR 0 2
28916: PUSH
28917: LD_VAR 0 3
28921: GREATER
28922: IFFALSE 28948
// length := ( array - i_from ) + i_to else
28924: LD_ADDR_VAR 0 11
28928: PUSH
28929: LD_VAR 0 1
28933: PUSH
28934: LD_VAR 0 2
28938: MINUS
28939: PUSH
28940: LD_VAR 0 3
28944: PLUS
28945: ST_TO_ADDR
28946: GO 28964
// length := i_to - i_from ;
28948: LD_ADDR_VAR 0 11
28952: PUSH
28953: LD_VAR 0 3
28957: PUSH
28958: LD_VAR 0 2
28962: MINUS
28963: ST_TO_ADDR
// end else
28964: GO 29027
// begin d := - 1 ;
28966: LD_ADDR_VAR 0 9
28970: PUSH
28971: LD_INT 1
28973: NEG
28974: ST_TO_ADDR
// if i_from > i_to then
28975: LD_VAR 0 2
28979: PUSH
28980: LD_VAR 0 3
28984: GREATER
28985: IFFALSE 29005
// length := i_from - i_to else
28987: LD_ADDR_VAR 0 11
28991: PUSH
28992: LD_VAR 0 2
28996: PUSH
28997: LD_VAR 0 3
29001: MINUS
29002: ST_TO_ADDR
29003: GO 29027
// length := ( array - i_to ) + i_from ;
29005: LD_ADDR_VAR 0 11
29009: PUSH
29010: LD_VAR 0 1
29014: PUSH
29015: LD_VAR 0 3
29019: MINUS
29020: PUSH
29021: LD_VAR 0 2
29025: PLUS
29026: ST_TO_ADDR
// end ; if not length then
29027: LD_VAR 0 11
29031: NOT
29032: IFFALSE 29036
// exit ;
29034: GO 29194
// tmp := array ;
29036: LD_ADDR_VAR 0 10
29040: PUSH
29041: LD_VAR 0 1
29045: ST_TO_ADDR
// for i = 1 to length do
29046: LD_ADDR_VAR 0 6
29050: PUSH
29051: DOUBLE
29052: LD_INT 1
29054: DEC
29055: ST_TO_ADDR
29056: LD_VAR 0 11
29060: PUSH
29061: FOR_TO
29062: IFFALSE 29182
// begin for j = 1 to array do
29064: LD_ADDR_VAR 0 7
29068: PUSH
29069: DOUBLE
29070: LD_INT 1
29072: DEC
29073: ST_TO_ADDR
29074: LD_VAR 0 1
29078: PUSH
29079: FOR_TO
29080: IFFALSE 29168
// begin k := j + d ;
29082: LD_ADDR_VAR 0 8
29086: PUSH
29087: LD_VAR 0 7
29091: PUSH
29092: LD_VAR 0 9
29096: PLUS
29097: ST_TO_ADDR
// if k > array then
29098: LD_VAR 0 8
29102: PUSH
29103: LD_VAR 0 1
29107: GREATER
29108: IFFALSE 29118
// k := 1 ;
29110: LD_ADDR_VAR 0 8
29114: PUSH
29115: LD_INT 1
29117: ST_TO_ADDR
// if not k then
29118: LD_VAR 0 8
29122: NOT
29123: IFFALSE 29135
// k := array ;
29125: LD_ADDR_VAR 0 8
29129: PUSH
29130: LD_VAR 0 1
29134: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29135: LD_ADDR_VAR 0 10
29139: PUSH
29140: LD_VAR 0 10
29144: PPUSH
29145: LD_VAR 0 8
29149: PPUSH
29150: LD_VAR 0 1
29154: PUSH
29155: LD_VAR 0 7
29159: ARRAY
29160: PPUSH
29161: CALL_OW 1
29165: ST_TO_ADDR
// end ;
29166: GO 29079
29168: POP
29169: POP
// array := tmp ;
29170: LD_ADDR_VAR 0 1
29174: PUSH
29175: LD_VAR 0 10
29179: ST_TO_ADDR
// end ;
29180: GO 29061
29182: POP
29183: POP
// result := array ;
29184: LD_ADDR_VAR 0 5
29188: PUSH
29189: LD_VAR 0 1
29193: ST_TO_ADDR
// end ;
29194: LD_VAR 0 5
29198: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29199: LD_INT 0
29201: PPUSH
29202: PPUSH
// result := 0 ;
29203: LD_ADDR_VAR 0 3
29207: PUSH
29208: LD_INT 0
29210: ST_TO_ADDR
// if not array or not value in array then
29211: LD_VAR 0 1
29215: NOT
29216: PUSH
29217: LD_VAR 0 2
29221: PUSH
29222: LD_VAR 0 1
29226: IN
29227: NOT
29228: OR
29229: IFFALSE 29233
// exit ;
29231: GO 29287
// for i = 1 to array do
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: DOUBLE
29239: LD_INT 1
29241: DEC
29242: ST_TO_ADDR
29243: LD_VAR 0 1
29247: PUSH
29248: FOR_TO
29249: IFFALSE 29285
// if value = array [ i ] then
29251: LD_VAR 0 2
29255: PUSH
29256: LD_VAR 0 1
29260: PUSH
29261: LD_VAR 0 4
29265: ARRAY
29266: EQUAL
29267: IFFALSE 29283
// begin result := i ;
29269: LD_ADDR_VAR 0 3
29273: PUSH
29274: LD_VAR 0 4
29278: ST_TO_ADDR
// exit ;
29279: POP
29280: POP
29281: GO 29287
// end ;
29283: GO 29248
29285: POP
29286: POP
// end ;
29287: LD_VAR 0 3
29291: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29292: LD_INT 0
29294: PPUSH
// vc_chassis := chassis ;
29295: LD_ADDR_OWVAR 37
29299: PUSH
29300: LD_VAR 0 1
29304: ST_TO_ADDR
// vc_engine := engine ;
29305: LD_ADDR_OWVAR 39
29309: PUSH
29310: LD_VAR 0 2
29314: ST_TO_ADDR
// vc_control := control ;
29315: LD_ADDR_OWVAR 38
29319: PUSH
29320: LD_VAR 0 3
29324: ST_TO_ADDR
// vc_weapon := weapon ;
29325: LD_ADDR_OWVAR 40
29329: PUSH
29330: LD_VAR 0 4
29334: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29335: LD_ADDR_OWVAR 41
29339: PUSH
29340: LD_VAR 0 5
29344: ST_TO_ADDR
// end ;
29345: LD_VAR 0 6
29349: RET
// export function WantPlant ( unit ) ; var task ; begin
29350: LD_INT 0
29352: PPUSH
29353: PPUSH
// result := false ;
29354: LD_ADDR_VAR 0 2
29358: PUSH
29359: LD_INT 0
29361: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29362: LD_ADDR_VAR 0 3
29366: PUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 437
29376: ST_TO_ADDR
// if task then
29377: LD_VAR 0 3
29381: IFFALSE 29409
// if task [ 1 ] [ 1 ] = p then
29383: LD_VAR 0 3
29387: PUSH
29388: LD_INT 1
29390: ARRAY
29391: PUSH
29392: LD_INT 1
29394: ARRAY
29395: PUSH
29396: LD_STRING p
29398: EQUAL
29399: IFFALSE 29409
// result := true ;
29401: LD_ADDR_VAR 0 2
29405: PUSH
29406: LD_INT 1
29408: ST_TO_ADDR
// end ;
29409: LD_VAR 0 2
29413: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29414: LD_INT 0
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
// if pos < 1 then
29420: LD_VAR 0 2
29424: PUSH
29425: LD_INT 1
29427: LESS
29428: IFFALSE 29432
// exit ;
29430: GO 29735
// if pos = 1 then
29432: LD_VAR 0 2
29436: PUSH
29437: LD_INT 1
29439: EQUAL
29440: IFFALSE 29473
// result := Replace ( arr , pos [ 1 ] , value ) else
29442: LD_ADDR_VAR 0 4
29446: PUSH
29447: LD_VAR 0 1
29451: PPUSH
29452: LD_VAR 0 2
29456: PUSH
29457: LD_INT 1
29459: ARRAY
29460: PPUSH
29461: LD_VAR 0 3
29465: PPUSH
29466: CALL_OW 1
29470: ST_TO_ADDR
29471: GO 29735
// begin tmp := arr ;
29473: LD_ADDR_VAR 0 6
29477: PUSH
29478: LD_VAR 0 1
29482: ST_TO_ADDR
// s_arr := [ tmp ] ;
29483: LD_ADDR_VAR 0 7
29487: PUSH
29488: LD_VAR 0 6
29492: PUSH
29493: EMPTY
29494: LIST
29495: ST_TO_ADDR
// for i = 1 to pos - 1 do
29496: LD_ADDR_VAR 0 5
29500: PUSH
29501: DOUBLE
29502: LD_INT 1
29504: DEC
29505: ST_TO_ADDR
29506: LD_VAR 0 2
29510: PUSH
29511: LD_INT 1
29513: MINUS
29514: PUSH
29515: FOR_TO
29516: IFFALSE 29561
// begin tmp := tmp [ pos [ i ] ] ;
29518: LD_ADDR_VAR 0 6
29522: PUSH
29523: LD_VAR 0 6
29527: PUSH
29528: LD_VAR 0 2
29532: PUSH
29533: LD_VAR 0 5
29537: ARRAY
29538: ARRAY
29539: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29540: LD_ADDR_VAR 0 7
29544: PUSH
29545: LD_VAR 0 7
29549: PUSH
29550: LD_VAR 0 6
29554: PUSH
29555: EMPTY
29556: LIST
29557: ADD
29558: ST_TO_ADDR
// end ;
29559: GO 29515
29561: POP
29562: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29563: LD_ADDR_VAR 0 6
29567: PUSH
29568: LD_VAR 0 6
29572: PPUSH
29573: LD_VAR 0 2
29577: PUSH
29578: LD_VAR 0 2
29582: ARRAY
29583: PPUSH
29584: LD_VAR 0 3
29588: PPUSH
29589: CALL_OW 1
29593: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29594: LD_ADDR_VAR 0 7
29598: PUSH
29599: LD_VAR 0 7
29603: PPUSH
29604: LD_VAR 0 7
29608: PPUSH
29609: LD_VAR 0 6
29613: PPUSH
29614: CALL_OW 1
29618: ST_TO_ADDR
// for i = s_arr downto 2 do
29619: LD_ADDR_VAR 0 5
29623: PUSH
29624: DOUBLE
29625: LD_VAR 0 7
29629: INC
29630: ST_TO_ADDR
29631: LD_INT 2
29633: PUSH
29634: FOR_DOWNTO
29635: IFFALSE 29719
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29637: LD_ADDR_VAR 0 6
29641: PUSH
29642: LD_VAR 0 7
29646: PUSH
29647: LD_VAR 0 5
29651: PUSH
29652: LD_INT 1
29654: MINUS
29655: ARRAY
29656: PPUSH
29657: LD_VAR 0 2
29661: PUSH
29662: LD_VAR 0 5
29666: PUSH
29667: LD_INT 1
29669: MINUS
29670: ARRAY
29671: PPUSH
29672: LD_VAR 0 7
29676: PUSH
29677: LD_VAR 0 5
29681: ARRAY
29682: PPUSH
29683: CALL_OW 1
29687: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29688: LD_ADDR_VAR 0 7
29692: PUSH
29693: LD_VAR 0 7
29697: PPUSH
29698: LD_VAR 0 5
29702: PUSH
29703: LD_INT 1
29705: MINUS
29706: PPUSH
29707: LD_VAR 0 6
29711: PPUSH
29712: CALL_OW 1
29716: ST_TO_ADDR
// end ;
29717: GO 29634
29719: POP
29720: POP
// result := s_arr [ 1 ] ;
29721: LD_ADDR_VAR 0 4
29725: PUSH
29726: LD_VAR 0 7
29730: PUSH
29731: LD_INT 1
29733: ARRAY
29734: ST_TO_ADDR
// end ; end ;
29735: LD_VAR 0 4
29739: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29740: LD_INT 0
29742: PPUSH
29743: PPUSH
// if not list then
29744: LD_VAR 0 1
29748: NOT
29749: IFFALSE 29753
// exit ;
29751: GO 29844
// i := list [ pos1 ] ;
29753: LD_ADDR_VAR 0 5
29757: PUSH
29758: LD_VAR 0 1
29762: PUSH
29763: LD_VAR 0 2
29767: ARRAY
29768: ST_TO_ADDR
// if not i then
29769: LD_VAR 0 5
29773: NOT
29774: IFFALSE 29778
// exit ;
29776: GO 29844
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29778: LD_ADDR_VAR 0 1
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: LD_VAR 0 2
29792: PPUSH
29793: LD_VAR 0 1
29797: PUSH
29798: LD_VAR 0 3
29802: ARRAY
29803: PPUSH
29804: CALL_OW 1
29808: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29809: LD_ADDR_VAR 0 1
29813: PUSH
29814: LD_VAR 0 1
29818: PPUSH
29819: LD_VAR 0 3
29823: PPUSH
29824: LD_VAR 0 5
29828: PPUSH
29829: CALL_OW 1
29833: ST_TO_ADDR
// result := list ;
29834: LD_ADDR_VAR 0 4
29838: PUSH
29839: LD_VAR 0 1
29843: ST_TO_ADDR
// end ;
29844: LD_VAR 0 4
29848: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29849: LD_INT 0
29851: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29852: LD_ADDR_VAR 0 5
29856: PUSH
29857: LD_VAR 0 1
29861: PPUSH
29862: CALL_OW 250
29866: PPUSH
29867: LD_VAR 0 1
29871: PPUSH
29872: CALL_OW 251
29876: PPUSH
29877: LD_VAR 0 2
29881: PPUSH
29882: LD_VAR 0 3
29886: PPUSH
29887: LD_VAR 0 4
29891: PPUSH
29892: CALL 29902 0 5
29896: ST_TO_ADDR
// end ;
29897: LD_VAR 0 5
29901: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29902: LD_INT 0
29904: PPUSH
29905: PPUSH
29906: PPUSH
29907: PPUSH
// if not list then
29908: LD_VAR 0 3
29912: NOT
29913: IFFALSE 29917
// exit ;
29915: GO 30305
// result := [ ] ;
29917: LD_ADDR_VAR 0 6
29921: PUSH
29922: EMPTY
29923: ST_TO_ADDR
// for i in list do
29924: LD_ADDR_VAR 0 7
29928: PUSH
29929: LD_VAR 0 3
29933: PUSH
29934: FOR_IN
29935: IFFALSE 30137
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29937: LD_ADDR_VAR 0 9
29941: PUSH
29942: LD_VAR 0 7
29946: PPUSH
29947: LD_VAR 0 1
29951: PPUSH
29952: LD_VAR 0 2
29956: PPUSH
29957: CALL_OW 297
29961: ST_TO_ADDR
// if not result then
29962: LD_VAR 0 6
29966: NOT
29967: IFFALSE 29993
// result := [ [ i , tmp ] ] else
29969: LD_ADDR_VAR 0 6
29973: PUSH
29974: LD_VAR 0 7
29978: PUSH
29979: LD_VAR 0 9
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: EMPTY
29989: LIST
29990: ST_TO_ADDR
29991: GO 30135
// begin if result [ result ] [ 2 ] < tmp then
29993: LD_VAR 0 6
29997: PUSH
29998: LD_VAR 0 6
30002: ARRAY
30003: PUSH
30004: LD_INT 2
30006: ARRAY
30007: PUSH
30008: LD_VAR 0 9
30012: LESS
30013: IFFALSE 30055
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30015: LD_ADDR_VAR 0 6
30019: PUSH
30020: LD_VAR 0 6
30024: PPUSH
30025: LD_VAR 0 6
30029: PUSH
30030: LD_INT 1
30032: PLUS
30033: PPUSH
30034: LD_VAR 0 7
30038: PUSH
30039: LD_VAR 0 9
30043: PUSH
30044: EMPTY
30045: LIST
30046: LIST
30047: PPUSH
30048: CALL_OW 2
30052: ST_TO_ADDR
30053: GO 30135
// for j = 1 to result do
30055: LD_ADDR_VAR 0 8
30059: PUSH
30060: DOUBLE
30061: LD_INT 1
30063: DEC
30064: ST_TO_ADDR
30065: LD_VAR 0 6
30069: PUSH
30070: FOR_TO
30071: IFFALSE 30133
// begin if tmp < result [ j ] [ 2 ] then
30073: LD_VAR 0 9
30077: PUSH
30078: LD_VAR 0 6
30082: PUSH
30083: LD_VAR 0 8
30087: ARRAY
30088: PUSH
30089: LD_INT 2
30091: ARRAY
30092: LESS
30093: IFFALSE 30131
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 6
30104: PPUSH
30105: LD_VAR 0 8
30109: PPUSH
30110: LD_VAR 0 7
30114: PUSH
30115: LD_VAR 0 9
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: PPUSH
30124: CALL_OW 2
30128: ST_TO_ADDR
// break ;
30129: GO 30133
// end ; end ;
30131: GO 30070
30133: POP
30134: POP
// end ; end ;
30135: GO 29934
30137: POP
30138: POP
// if result and not asc then
30139: LD_VAR 0 6
30143: PUSH
30144: LD_VAR 0 4
30148: NOT
30149: AND
30150: IFFALSE 30225
// begin tmp := result ;
30152: LD_ADDR_VAR 0 9
30156: PUSH
30157: LD_VAR 0 6
30161: ST_TO_ADDR
// for i = tmp downto 1 do
30162: LD_ADDR_VAR 0 7
30166: PUSH
30167: DOUBLE
30168: LD_VAR 0 9
30172: INC
30173: ST_TO_ADDR
30174: LD_INT 1
30176: PUSH
30177: FOR_DOWNTO
30178: IFFALSE 30223
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30180: LD_ADDR_VAR 0 6
30184: PUSH
30185: LD_VAR 0 6
30189: PPUSH
30190: LD_VAR 0 9
30194: PUSH
30195: LD_VAR 0 7
30199: MINUS
30200: PUSH
30201: LD_INT 1
30203: PLUS
30204: PPUSH
30205: LD_VAR 0 9
30209: PUSH
30210: LD_VAR 0 7
30214: ARRAY
30215: PPUSH
30216: CALL_OW 1
30220: ST_TO_ADDR
30221: GO 30177
30223: POP
30224: POP
// end ; tmp := [ ] ;
30225: LD_ADDR_VAR 0 9
30229: PUSH
30230: EMPTY
30231: ST_TO_ADDR
// if mode then
30232: LD_VAR 0 5
30236: IFFALSE 30305
// begin for i = 1 to result do
30238: LD_ADDR_VAR 0 7
30242: PUSH
30243: DOUBLE
30244: LD_INT 1
30246: DEC
30247: ST_TO_ADDR
30248: LD_VAR 0 6
30252: PUSH
30253: FOR_TO
30254: IFFALSE 30293
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30256: LD_ADDR_VAR 0 9
30260: PUSH
30261: LD_VAR 0 9
30265: PPUSH
30266: LD_VAR 0 7
30270: PPUSH
30271: LD_VAR 0 6
30275: PUSH
30276: LD_VAR 0 7
30280: ARRAY
30281: PUSH
30282: LD_INT 1
30284: ARRAY
30285: PPUSH
30286: CALL_OW 1
30290: ST_TO_ADDR
30291: GO 30253
30293: POP
30294: POP
// result := tmp ;
30295: LD_ADDR_VAR 0 6
30299: PUSH
30300: LD_VAR 0 9
30304: ST_TO_ADDR
// end ; end ;
30305: LD_VAR 0 6
30309: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30310: LD_INT 0
30312: PPUSH
30313: PPUSH
30314: PPUSH
30315: PPUSH
30316: PPUSH
30317: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30318: LD_ADDR_VAR 0 5
30322: PUSH
30323: LD_INT 0
30325: PUSH
30326: LD_INT 0
30328: PUSH
30329: LD_INT 0
30331: PUSH
30332: EMPTY
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: ST_TO_ADDR
// if not x or not y then
30340: LD_VAR 0 2
30344: NOT
30345: PUSH
30346: LD_VAR 0 3
30350: NOT
30351: OR
30352: IFFALSE 30356
// exit ;
30354: GO 32002
// if not range then
30356: LD_VAR 0 4
30360: NOT
30361: IFFALSE 30371
// range := 10 ;
30363: LD_ADDR_VAR 0 4
30367: PUSH
30368: LD_INT 10
30370: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30371: LD_ADDR_VAR 0 8
30375: PUSH
30376: LD_INT 81
30378: PUSH
30379: LD_VAR 0 1
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 92
30390: PUSH
30391: LD_VAR 0 2
30395: PUSH
30396: LD_VAR 0 3
30400: PUSH
30401: LD_VAR 0 4
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: PUSH
30412: LD_INT 3
30414: PUSH
30415: LD_INT 21
30417: PUSH
30418: LD_INT 3
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: LIST
30433: PPUSH
30434: CALL_OW 69
30438: ST_TO_ADDR
// if not tmp then
30439: LD_VAR 0 8
30443: NOT
30444: IFFALSE 30448
// exit ;
30446: GO 32002
// for i in tmp do
30448: LD_ADDR_VAR 0 6
30452: PUSH
30453: LD_VAR 0 8
30457: PUSH
30458: FOR_IN
30459: IFFALSE 31977
// begin points := [ 0 , 0 , 0 ] ;
30461: LD_ADDR_VAR 0 9
30465: PUSH
30466: LD_INT 0
30468: PUSH
30469: LD_INT 0
30471: PUSH
30472: LD_INT 0
30474: PUSH
30475: EMPTY
30476: LIST
30477: LIST
30478: LIST
30479: ST_TO_ADDR
// bpoints := 1 ;
30480: LD_ADDR_VAR 0 10
30484: PUSH
30485: LD_INT 1
30487: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30488: LD_VAR 0 6
30492: PPUSH
30493: CALL_OW 247
30497: PUSH
30498: LD_INT 1
30500: DOUBLE
30501: EQUAL
30502: IFTRUE 30506
30504: GO 31084
30506: POP
// begin if GetClass ( i ) = 1 then
30507: LD_VAR 0 6
30511: PPUSH
30512: CALL_OW 257
30516: PUSH
30517: LD_INT 1
30519: EQUAL
30520: IFFALSE 30541
// points := [ 10 , 5 , 3 ] ;
30522: LD_ADDR_VAR 0 9
30526: PUSH
30527: LD_INT 10
30529: PUSH
30530: LD_INT 5
30532: PUSH
30533: LD_INT 3
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: LIST
30540: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30541: LD_VAR 0 6
30545: PPUSH
30546: CALL_OW 257
30550: PUSH
30551: LD_INT 2
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 4
30559: PUSH
30560: EMPTY
30561: LIST
30562: LIST
30563: LIST
30564: IN
30565: IFFALSE 30586
// points := [ 3 , 2 , 1 ] ;
30567: LD_ADDR_VAR 0 9
30571: PUSH
30572: LD_INT 3
30574: PUSH
30575: LD_INT 2
30577: PUSH
30578: LD_INT 1
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30586: LD_VAR 0 6
30590: PPUSH
30591: CALL_OW 257
30595: PUSH
30596: LD_INT 5
30598: EQUAL
30599: IFFALSE 30620
// points := [ 130 , 5 , 2 ] ;
30601: LD_ADDR_VAR 0 9
30605: PUSH
30606: LD_INT 130
30608: PUSH
30609: LD_INT 5
30611: PUSH
30612: LD_INT 2
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30620: LD_VAR 0 6
30624: PPUSH
30625: CALL_OW 257
30629: PUSH
30630: LD_INT 8
30632: EQUAL
30633: IFFALSE 30654
// points := [ 35 , 35 , 30 ] ;
30635: LD_ADDR_VAR 0 9
30639: PUSH
30640: LD_INT 35
30642: PUSH
30643: LD_INT 35
30645: PUSH
30646: LD_INT 30
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30654: LD_VAR 0 6
30658: PPUSH
30659: CALL_OW 257
30663: PUSH
30664: LD_INT 9
30666: EQUAL
30667: IFFALSE 30688
// points := [ 20 , 55 , 40 ] ;
30669: LD_ADDR_VAR 0 9
30673: PUSH
30674: LD_INT 20
30676: PUSH
30677: LD_INT 55
30679: PUSH
30680: LD_INT 40
30682: PUSH
30683: EMPTY
30684: LIST
30685: LIST
30686: LIST
30687: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30688: LD_VAR 0 6
30692: PPUSH
30693: CALL_OW 257
30697: PUSH
30698: LD_INT 12
30700: PUSH
30701: LD_INT 16
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: IN
30708: IFFALSE 30729
// points := [ 5 , 3 , 2 ] ;
30710: LD_ADDR_VAR 0 9
30714: PUSH
30715: LD_INT 5
30717: PUSH
30718: LD_INT 3
30720: PUSH
30721: LD_INT 2
30723: PUSH
30724: EMPTY
30725: LIST
30726: LIST
30727: LIST
30728: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30729: LD_VAR 0 6
30733: PPUSH
30734: CALL_OW 257
30738: PUSH
30739: LD_INT 17
30741: EQUAL
30742: IFFALSE 30763
// points := [ 100 , 50 , 75 ] ;
30744: LD_ADDR_VAR 0 9
30748: PUSH
30749: LD_INT 100
30751: PUSH
30752: LD_INT 50
30754: PUSH
30755: LD_INT 75
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: LIST
30762: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30763: LD_VAR 0 6
30767: PPUSH
30768: CALL_OW 257
30772: PUSH
30773: LD_INT 15
30775: EQUAL
30776: IFFALSE 30797
// points := [ 10 , 5 , 3 ] ;
30778: LD_ADDR_VAR 0 9
30782: PUSH
30783: LD_INT 10
30785: PUSH
30786: LD_INT 5
30788: PUSH
30789: LD_INT 3
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: LIST
30796: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30797: LD_VAR 0 6
30801: PPUSH
30802: CALL_OW 257
30806: PUSH
30807: LD_INT 14
30809: EQUAL
30810: IFFALSE 30831
// points := [ 10 , 0 , 0 ] ;
30812: LD_ADDR_VAR 0 9
30816: PUSH
30817: LD_INT 10
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 0
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: LIST
30830: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30831: LD_VAR 0 6
30835: PPUSH
30836: CALL_OW 257
30840: PUSH
30841: LD_INT 11
30843: EQUAL
30844: IFFALSE 30865
// points := [ 30 , 10 , 5 ] ;
30846: LD_ADDR_VAR 0 9
30850: PUSH
30851: LD_INT 30
30853: PUSH
30854: LD_INT 10
30856: PUSH
30857: LD_INT 5
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30865: LD_VAR 0 1
30869: PPUSH
30870: LD_INT 5
30872: PPUSH
30873: CALL_OW 321
30877: PUSH
30878: LD_INT 2
30880: EQUAL
30881: IFFALSE 30898
// bpoints := bpoints * 1.8 ;
30883: LD_ADDR_VAR 0 10
30887: PUSH
30888: LD_VAR 0 10
30892: PUSH
30893: LD_REAL  1.80000000000000E+0000
30896: MUL
30897: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30898: LD_VAR 0 6
30902: PPUSH
30903: CALL_OW 257
30907: PUSH
30908: LD_INT 1
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: LD_INT 3
30916: PUSH
30917: LD_INT 4
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: IN
30926: PUSH
30927: LD_VAR 0 1
30931: PPUSH
30932: LD_INT 51
30934: PPUSH
30935: CALL_OW 321
30939: PUSH
30940: LD_INT 2
30942: EQUAL
30943: AND
30944: IFFALSE 30961
// bpoints := bpoints * 1.2 ;
30946: LD_ADDR_VAR 0 10
30950: PUSH
30951: LD_VAR 0 10
30955: PUSH
30956: LD_REAL  1.20000000000000E+0000
30959: MUL
30960: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30961: LD_VAR 0 6
30965: PPUSH
30966: CALL_OW 257
30970: PUSH
30971: LD_INT 5
30973: PUSH
30974: LD_INT 7
30976: PUSH
30977: LD_INT 9
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: LIST
30984: IN
30985: PUSH
30986: LD_VAR 0 1
30990: PPUSH
30991: LD_INT 52
30993: PPUSH
30994: CALL_OW 321
30998: PUSH
30999: LD_INT 2
31001: EQUAL
31002: AND
31003: IFFALSE 31020
// bpoints := bpoints * 1.5 ;
31005: LD_ADDR_VAR 0 10
31009: PUSH
31010: LD_VAR 0 10
31014: PUSH
31015: LD_REAL  1.50000000000000E+0000
31018: MUL
31019: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31020: LD_VAR 0 1
31024: PPUSH
31025: LD_INT 66
31027: PPUSH
31028: CALL_OW 321
31032: PUSH
31033: LD_INT 2
31035: EQUAL
31036: IFFALSE 31053
// bpoints := bpoints * 1.1 ;
31038: LD_ADDR_VAR 0 10
31042: PUSH
31043: LD_VAR 0 10
31047: PUSH
31048: LD_REAL  1.10000000000000E+0000
31051: MUL
31052: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31053: LD_ADDR_VAR 0 10
31057: PUSH
31058: LD_VAR 0 10
31062: PUSH
31063: LD_VAR 0 6
31067: PPUSH
31068: LD_INT 1
31070: PPUSH
31071: CALL_OW 259
31075: PUSH
31076: LD_REAL  1.15000000000000E+0000
31079: MUL
31080: MUL
31081: ST_TO_ADDR
// end ; unit_vehicle :
31082: GO 31906
31084: LD_INT 2
31086: DOUBLE
31087: EQUAL
31088: IFTRUE 31092
31090: GO 31894
31092: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31093: LD_VAR 0 6
31097: PPUSH
31098: CALL_OW 264
31102: PUSH
31103: LD_INT 2
31105: PUSH
31106: LD_INT 42
31108: PUSH
31109: LD_INT 24
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: LIST
31116: IN
31117: IFFALSE 31138
// points := [ 25 , 5 , 3 ] ;
31119: LD_ADDR_VAR 0 9
31123: PUSH
31124: LD_INT 25
31126: PUSH
31127: LD_INT 5
31129: PUSH
31130: LD_INT 3
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: LIST
31137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31138: LD_VAR 0 6
31142: PPUSH
31143: CALL_OW 264
31147: PUSH
31148: LD_INT 4
31150: PUSH
31151: LD_INT 43
31153: PUSH
31154: LD_INT 25
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: IN
31162: IFFALSE 31183
// points := [ 40 , 15 , 5 ] ;
31164: LD_ADDR_VAR 0 9
31168: PUSH
31169: LD_INT 40
31171: PUSH
31172: LD_INT 15
31174: PUSH
31175: LD_INT 5
31177: PUSH
31178: EMPTY
31179: LIST
31180: LIST
31181: LIST
31182: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31183: LD_VAR 0 6
31187: PPUSH
31188: CALL_OW 264
31192: PUSH
31193: LD_INT 3
31195: PUSH
31196: LD_INT 23
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: IN
31203: IFFALSE 31224
// points := [ 7 , 25 , 8 ] ;
31205: LD_ADDR_VAR 0 9
31209: PUSH
31210: LD_INT 7
31212: PUSH
31213: LD_INT 25
31215: PUSH
31216: LD_INT 8
31218: PUSH
31219: EMPTY
31220: LIST
31221: LIST
31222: LIST
31223: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31224: LD_VAR 0 6
31228: PPUSH
31229: CALL_OW 264
31233: PUSH
31234: LD_INT 5
31236: PUSH
31237: LD_INT 27
31239: PUSH
31240: LD_INT 44
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: IN
31248: IFFALSE 31269
// points := [ 14 , 50 , 16 ] ;
31250: LD_ADDR_VAR 0 9
31254: PUSH
31255: LD_INT 14
31257: PUSH
31258: LD_INT 50
31260: PUSH
31261: LD_INT 16
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: LIST
31268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31269: LD_VAR 0 6
31273: PPUSH
31274: CALL_OW 264
31278: PUSH
31279: LD_INT 6
31281: PUSH
31282: LD_INT 46
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: IN
31289: IFFALSE 31310
// points := [ 32 , 120 , 70 ] ;
31291: LD_ADDR_VAR 0 9
31295: PUSH
31296: LD_INT 32
31298: PUSH
31299: LD_INT 120
31301: PUSH
31302: LD_INT 70
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: LIST
31309: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
31310: LD_VAR 0 6
31314: PPUSH
31315: CALL_OW 264
31319: PUSH
31320: LD_INT 7
31322: PUSH
31323: LD_INT 28
31325: PUSH
31326: LD_INT 45
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: LIST
31333: IN
31334: IFFALSE 31355
// points := [ 35 , 20 , 45 ] ;
31336: LD_ADDR_VAR 0 9
31340: PUSH
31341: LD_INT 35
31343: PUSH
31344: LD_INT 20
31346: PUSH
31347: LD_INT 45
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: LIST
31354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31355: LD_VAR 0 6
31359: PPUSH
31360: CALL_OW 264
31364: PUSH
31365: LD_INT 47
31367: PUSH
31368: EMPTY
31369: LIST
31370: IN
31371: IFFALSE 31392
// points := [ 67 , 45 , 75 ] ;
31373: LD_ADDR_VAR 0 9
31377: PUSH
31378: LD_INT 67
31380: PUSH
31381: LD_INT 45
31383: PUSH
31384: LD_INT 75
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: LIST
31391: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31392: LD_VAR 0 6
31396: PPUSH
31397: CALL_OW 264
31401: PUSH
31402: LD_INT 26
31404: PUSH
31405: EMPTY
31406: LIST
31407: IN
31408: IFFALSE 31429
// points := [ 120 , 30 , 80 ] ;
31410: LD_ADDR_VAR 0 9
31414: PUSH
31415: LD_INT 120
31417: PUSH
31418: LD_INT 30
31420: PUSH
31421: LD_INT 80
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: LIST
31428: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31429: LD_VAR 0 6
31433: PPUSH
31434: CALL_OW 264
31438: PUSH
31439: LD_INT 22
31441: PUSH
31442: EMPTY
31443: LIST
31444: IN
31445: IFFALSE 31466
// points := [ 40 , 1 , 1 ] ;
31447: LD_ADDR_VAR 0 9
31451: PUSH
31452: LD_INT 40
31454: PUSH
31455: LD_INT 1
31457: PUSH
31458: LD_INT 1
31460: PUSH
31461: EMPTY
31462: LIST
31463: LIST
31464: LIST
31465: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31466: LD_VAR 0 6
31470: PPUSH
31471: CALL_OW 264
31475: PUSH
31476: LD_INT 29
31478: PUSH
31479: EMPTY
31480: LIST
31481: IN
31482: IFFALSE 31503
// points := [ 70 , 200 , 400 ] ;
31484: LD_ADDR_VAR 0 9
31488: PUSH
31489: LD_INT 70
31491: PUSH
31492: LD_INT 200
31494: PUSH
31495: LD_INT 400
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31503: LD_VAR 0 6
31507: PPUSH
31508: CALL_OW 264
31512: PUSH
31513: LD_INT 14
31515: PUSH
31516: LD_INT 53
31518: PUSH
31519: EMPTY
31520: LIST
31521: LIST
31522: IN
31523: IFFALSE 31544
// points := [ 40 , 10 , 20 ] ;
31525: LD_ADDR_VAR 0 9
31529: PUSH
31530: LD_INT 40
31532: PUSH
31533: LD_INT 10
31535: PUSH
31536: LD_INT 20
31538: PUSH
31539: EMPTY
31540: LIST
31541: LIST
31542: LIST
31543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31544: LD_VAR 0 6
31548: PPUSH
31549: CALL_OW 264
31553: PUSH
31554: LD_INT 9
31556: PUSH
31557: EMPTY
31558: LIST
31559: IN
31560: IFFALSE 31581
// points := [ 5 , 70 , 20 ] ;
31562: LD_ADDR_VAR 0 9
31566: PUSH
31567: LD_INT 5
31569: PUSH
31570: LD_INT 70
31572: PUSH
31573: LD_INT 20
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: LIST
31580: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31581: LD_VAR 0 6
31585: PPUSH
31586: CALL_OW 264
31590: PUSH
31591: LD_INT 10
31593: PUSH
31594: EMPTY
31595: LIST
31596: IN
31597: IFFALSE 31618
// points := [ 35 , 110 , 70 ] ;
31599: LD_ADDR_VAR 0 9
31603: PUSH
31604: LD_INT 35
31606: PUSH
31607: LD_INT 110
31609: PUSH
31610: LD_INT 70
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: LIST
31617: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31618: LD_VAR 0 6
31622: PPUSH
31623: CALL_OW 265
31627: PUSH
31628: LD_INT 25
31630: EQUAL
31631: IFFALSE 31652
// points := [ 80 , 65 , 100 ] ;
31633: LD_ADDR_VAR 0 9
31637: PUSH
31638: LD_INT 80
31640: PUSH
31641: LD_INT 65
31643: PUSH
31644: LD_INT 100
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 263
31661: PUSH
31662: LD_INT 1
31664: EQUAL
31665: IFFALSE 31700
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31667: LD_ADDR_VAR 0 10
31671: PUSH
31672: LD_VAR 0 10
31676: PUSH
31677: LD_VAR 0 6
31681: PPUSH
31682: CALL_OW 311
31686: PPUSH
31687: LD_INT 3
31689: PPUSH
31690: CALL_OW 259
31694: PUSH
31695: LD_INT 4
31697: MUL
31698: MUL
31699: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31700: LD_VAR 0 6
31704: PPUSH
31705: CALL_OW 263
31709: PUSH
31710: LD_INT 2
31712: EQUAL
31713: IFFALSE 31764
// begin j := IsControledBy ( i ) ;
31715: LD_ADDR_VAR 0 7
31719: PUSH
31720: LD_VAR 0 6
31724: PPUSH
31725: CALL_OW 312
31729: ST_TO_ADDR
// if j then
31730: LD_VAR 0 7
31734: IFFALSE 31764
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31736: LD_ADDR_VAR 0 10
31740: PUSH
31741: LD_VAR 0 10
31745: PUSH
31746: LD_VAR 0 7
31750: PPUSH
31751: LD_INT 3
31753: PPUSH
31754: CALL_OW 259
31758: PUSH
31759: LD_INT 3
31761: MUL
31762: MUL
31763: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31764: LD_VAR 0 6
31768: PPUSH
31769: CALL_OW 264
31773: PUSH
31774: LD_INT 5
31776: PUSH
31777: LD_INT 6
31779: PUSH
31780: LD_INT 46
31782: PUSH
31783: LD_INT 44
31785: PUSH
31786: LD_INT 47
31788: PUSH
31789: LD_INT 45
31791: PUSH
31792: LD_INT 28
31794: PUSH
31795: LD_INT 7
31797: PUSH
31798: LD_INT 27
31800: PUSH
31801: LD_INT 29
31803: PUSH
31804: EMPTY
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: LIST
31814: LIST
31815: IN
31816: PUSH
31817: LD_VAR 0 1
31821: PPUSH
31822: LD_INT 52
31824: PPUSH
31825: CALL_OW 321
31829: PUSH
31830: LD_INT 2
31832: EQUAL
31833: AND
31834: IFFALSE 31851
// bpoints := bpoints * 1.2 ;
31836: LD_ADDR_VAR 0 10
31840: PUSH
31841: LD_VAR 0 10
31845: PUSH
31846: LD_REAL  1.20000000000000E+0000
31849: MUL
31850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31851: LD_VAR 0 6
31855: PPUSH
31856: CALL_OW 264
31860: PUSH
31861: LD_INT 6
31863: PUSH
31864: LD_INT 46
31866: PUSH
31867: LD_INT 47
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: LIST
31874: IN
31875: IFFALSE 31892
// bpoints := bpoints * 1.2 ;
31877: LD_ADDR_VAR 0 10
31881: PUSH
31882: LD_VAR 0 10
31886: PUSH
31887: LD_REAL  1.20000000000000E+0000
31890: MUL
31891: ST_TO_ADDR
// end ; unit_building :
31892: GO 31906
31894: LD_INT 3
31896: DOUBLE
31897: EQUAL
31898: IFTRUE 31902
31900: GO 31905
31902: POP
// ; end ;
31903: GO 31906
31905: POP
// for j = 1 to 3 do
31906: LD_ADDR_VAR 0 7
31910: PUSH
31911: DOUBLE
31912: LD_INT 1
31914: DEC
31915: ST_TO_ADDR
31916: LD_INT 3
31918: PUSH
31919: FOR_TO
31920: IFFALSE 31973
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31922: LD_ADDR_VAR 0 5
31926: PUSH
31927: LD_VAR 0 5
31931: PPUSH
31932: LD_VAR 0 7
31936: PPUSH
31937: LD_VAR 0 5
31941: PUSH
31942: LD_VAR 0 7
31946: ARRAY
31947: PUSH
31948: LD_VAR 0 9
31952: PUSH
31953: LD_VAR 0 7
31957: ARRAY
31958: PUSH
31959: LD_VAR 0 10
31963: MUL
31964: PLUS
31965: PPUSH
31966: CALL_OW 1
31970: ST_TO_ADDR
31971: GO 31919
31973: POP
31974: POP
// end ;
31975: GO 30458
31977: POP
31978: POP
// result := Replace ( result , 4 , tmp ) ;
31979: LD_ADDR_VAR 0 5
31983: PUSH
31984: LD_VAR 0 5
31988: PPUSH
31989: LD_INT 4
31991: PPUSH
31992: LD_VAR 0 8
31996: PPUSH
31997: CALL_OW 1
32001: ST_TO_ADDR
// end ;
32002: LD_VAR 0 5
32006: RET
// export function DangerAtRange ( unit , range ) ; begin
32007: LD_INT 0
32009: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32010: LD_ADDR_VAR 0 3
32014: PUSH
32015: LD_VAR 0 1
32019: PPUSH
32020: CALL_OW 255
32024: PPUSH
32025: LD_VAR 0 1
32029: PPUSH
32030: CALL_OW 250
32034: PPUSH
32035: LD_VAR 0 1
32039: PPUSH
32040: CALL_OW 251
32044: PPUSH
32045: LD_VAR 0 2
32049: PPUSH
32050: CALL 30310 0 4
32054: ST_TO_ADDR
// end ;
32055: LD_VAR 0 3
32059: RET
// export function DangerInArea ( side , area ) ; begin
32060: LD_INT 0
32062: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_VAR 0 2
32072: PPUSH
32073: LD_INT 81
32075: PUSH
32076: LD_VAR 0 1
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PPUSH
32085: CALL_OW 70
32089: ST_TO_ADDR
// end ;
32090: LD_VAR 0 3
32094: RET
// export function IsExtension ( b ) ; begin
32095: LD_INT 0
32097: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32098: LD_ADDR_VAR 0 2
32102: PUSH
32103: LD_VAR 0 1
32107: PUSH
32108: LD_INT 23
32110: PUSH
32111: LD_INT 20
32113: PUSH
32114: LD_INT 22
32116: PUSH
32117: LD_INT 17
32119: PUSH
32120: LD_INT 24
32122: PUSH
32123: LD_INT 21
32125: PUSH
32126: LD_INT 19
32128: PUSH
32129: LD_INT 16
32131: PUSH
32132: LD_INT 25
32134: PUSH
32135: LD_INT 18
32137: PUSH
32138: EMPTY
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: IN
32150: ST_TO_ADDR
// end ;
32151: LD_VAR 0 2
32155: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
32156: LD_INT 0
32158: PPUSH
32159: PPUSH
32160: PPUSH
// result := [ ] ;
32161: LD_ADDR_VAR 0 3
32165: PUSH
32166: EMPTY
32167: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32168: LD_ADDR_VAR 0 4
32172: PUSH
32173: LD_VAR 0 2
32177: PPUSH
32178: LD_INT 21
32180: PUSH
32181: LD_INT 3
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PPUSH
32188: CALL_OW 70
32192: ST_TO_ADDR
// if not tmp then
32193: LD_VAR 0 4
32197: NOT
32198: IFFALSE 32202
// exit ;
32200: GO 32260
// for i in tmp do
32202: LD_ADDR_VAR 0 5
32206: PUSH
32207: LD_VAR 0 4
32211: PUSH
32212: FOR_IN
32213: IFFALSE 32248
// if GetBase ( i ) <> base then
32215: LD_VAR 0 5
32219: PPUSH
32220: CALL_OW 274
32224: PUSH
32225: LD_VAR 0 1
32229: NONEQUAL
32230: IFFALSE 32246
// ComLinkToBase ( base , i ) ;
32232: LD_VAR 0 1
32236: PPUSH
32237: LD_VAR 0 5
32241: PPUSH
32242: CALL_OW 169
32246: GO 32212
32248: POP
32249: POP
// result := tmp ;
32250: LD_ADDR_VAR 0 3
32254: PUSH
32255: LD_VAR 0 4
32259: ST_TO_ADDR
// end ;
32260: LD_VAR 0 3
32264: RET
// export function ComComplete ( unit , b ) ; var i ; begin
32265: LD_INT 0
32267: PPUSH
32268: PPUSH
// if BuildingStatus ( b ) = bs_build then
32269: LD_VAR 0 2
32273: PPUSH
32274: CALL_OW 461
32278: PUSH
32279: LD_INT 1
32281: EQUAL
32282: IFFALSE 32342
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32284: LD_VAR 0 1
32288: PPUSH
32289: LD_STRING h
32291: PUSH
32292: LD_VAR 0 2
32296: PPUSH
32297: CALL_OW 250
32301: PUSH
32302: LD_VAR 0 2
32306: PPUSH
32307: CALL_OW 251
32311: PUSH
32312: LD_VAR 0 2
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: LD_INT 0
32322: PUSH
32323: LD_INT 0
32325: PUSH
32326: EMPTY
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: PUSH
32335: EMPTY
32336: LIST
32337: PPUSH
32338: CALL_OW 446
// end ;
32342: LD_VAR 0 3
32346: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32347: LD_INT 0
32349: PPUSH
32350: PPUSH
32351: PPUSH
32352: PPUSH
32353: PPUSH
32354: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
32355: LD_VAR 0 1
32359: NOT
32360: PUSH
32361: LD_VAR 0 1
32365: PPUSH
32366: CALL_OW 263
32370: PUSH
32371: LD_INT 2
32373: EQUAL
32374: NOT
32375: OR
32376: IFFALSE 32380
// exit ;
32378: GO 32696
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32380: LD_ADDR_VAR 0 6
32384: PUSH
32385: LD_INT 22
32387: PUSH
32388: LD_VAR 0 1
32392: PPUSH
32393: CALL_OW 255
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 2
32404: PUSH
32405: LD_INT 30
32407: PUSH
32408: LD_INT 36
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 34
32417: PUSH
32418: LD_INT 31
32420: PUSH
32421: EMPTY
32422: LIST
32423: LIST
32424: PUSH
32425: EMPTY
32426: LIST
32427: LIST
32428: LIST
32429: PUSH
32430: EMPTY
32431: LIST
32432: LIST
32433: PPUSH
32434: CALL_OW 69
32438: ST_TO_ADDR
// if not tmp then
32439: LD_VAR 0 6
32443: NOT
32444: IFFALSE 32448
// exit ;
32446: GO 32696
// result := [ ] ;
32448: LD_ADDR_VAR 0 2
32452: PUSH
32453: EMPTY
32454: ST_TO_ADDR
// for i in tmp do
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_VAR 0 6
32464: PUSH
32465: FOR_IN
32466: IFFALSE 32537
// begin t := UnitsInside ( i ) ;
32468: LD_ADDR_VAR 0 4
32472: PUSH
32473: LD_VAR 0 3
32477: PPUSH
32478: CALL_OW 313
32482: ST_TO_ADDR
// if t then
32483: LD_VAR 0 4
32487: IFFALSE 32535
// for j in t do
32489: LD_ADDR_VAR 0 7
32493: PUSH
32494: LD_VAR 0 4
32498: PUSH
32499: FOR_IN
32500: IFFALSE 32533
// result := Insert ( result , result + 1 , j ) ;
32502: LD_ADDR_VAR 0 2
32506: PUSH
32507: LD_VAR 0 2
32511: PPUSH
32512: LD_VAR 0 2
32516: PUSH
32517: LD_INT 1
32519: PLUS
32520: PPUSH
32521: LD_VAR 0 7
32525: PPUSH
32526: CALL_OW 2
32530: ST_TO_ADDR
32531: GO 32499
32533: POP
32534: POP
// end ;
32535: GO 32465
32537: POP
32538: POP
// if not result then
32539: LD_VAR 0 2
32543: NOT
32544: IFFALSE 32548
// exit ;
32546: GO 32696
// mech := result [ 1 ] ;
32548: LD_ADDR_VAR 0 5
32552: PUSH
32553: LD_VAR 0 2
32557: PUSH
32558: LD_INT 1
32560: ARRAY
32561: ST_TO_ADDR
// if result > 1 then
32562: LD_VAR 0 2
32566: PUSH
32567: LD_INT 1
32569: GREATER
32570: IFFALSE 32682
// for i = 2 to result do
32572: LD_ADDR_VAR 0 3
32576: PUSH
32577: DOUBLE
32578: LD_INT 2
32580: DEC
32581: ST_TO_ADDR
32582: LD_VAR 0 2
32586: PUSH
32587: FOR_TO
32588: IFFALSE 32680
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32590: LD_ADDR_VAR 0 4
32594: PUSH
32595: LD_VAR 0 2
32599: PUSH
32600: LD_VAR 0 3
32604: ARRAY
32605: PPUSH
32606: LD_INT 3
32608: PPUSH
32609: CALL_OW 259
32613: PUSH
32614: LD_VAR 0 2
32618: PUSH
32619: LD_VAR 0 3
32623: ARRAY
32624: PPUSH
32625: CALL_OW 432
32629: MINUS
32630: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32631: LD_VAR 0 4
32635: PUSH
32636: LD_VAR 0 5
32640: PPUSH
32641: LD_INT 3
32643: PPUSH
32644: CALL_OW 259
32648: PUSH
32649: LD_VAR 0 5
32653: PPUSH
32654: CALL_OW 432
32658: MINUS
32659: GREATEREQUAL
32660: IFFALSE 32678
// mech := result [ i ] ;
32662: LD_ADDR_VAR 0 5
32666: PUSH
32667: LD_VAR 0 2
32671: PUSH
32672: LD_VAR 0 3
32676: ARRAY
32677: ST_TO_ADDR
// end ;
32678: GO 32587
32680: POP
32681: POP
// ComLinkTo ( vehicle , mech ) ;
32682: LD_VAR 0 1
32686: PPUSH
32687: LD_VAR 0 5
32691: PPUSH
32692: CALL_OW 135
// end ;
32696: LD_VAR 0 2
32700: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32701: LD_INT 0
32703: PPUSH
32704: PPUSH
32705: PPUSH
32706: PPUSH
32707: PPUSH
32708: PPUSH
32709: PPUSH
32710: PPUSH
32711: PPUSH
32712: PPUSH
32713: PPUSH
32714: PPUSH
32715: PPUSH
// result := [ ] ;
32716: LD_ADDR_VAR 0 7
32720: PUSH
32721: EMPTY
32722: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32723: LD_VAR 0 1
32727: PPUSH
32728: CALL_OW 266
32732: PUSH
32733: LD_INT 0
32735: PUSH
32736: LD_INT 1
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: IN
32743: NOT
32744: IFFALSE 32748
// exit ;
32746: GO 34379
// if name then
32748: LD_VAR 0 3
32752: IFFALSE 32768
// SetBName ( base_dep , name ) ;
32754: LD_VAR 0 1
32758: PPUSH
32759: LD_VAR 0 3
32763: PPUSH
32764: CALL_OW 500
// base := GetBase ( base_dep ) ;
32768: LD_ADDR_VAR 0 15
32772: PUSH
32773: LD_VAR 0 1
32777: PPUSH
32778: CALL_OW 274
32782: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32783: LD_ADDR_VAR 0 16
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 255
32797: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32798: LD_ADDR_VAR 0 17
32802: PUSH
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL_OW 248
32812: ST_TO_ADDR
// if sources then
32813: LD_VAR 0 5
32817: IFFALSE 32864
// for i = 1 to 3 do
32819: LD_ADDR_VAR 0 8
32823: PUSH
32824: DOUBLE
32825: LD_INT 1
32827: DEC
32828: ST_TO_ADDR
32829: LD_INT 3
32831: PUSH
32832: FOR_TO
32833: IFFALSE 32862
// AddResourceType ( base , i , sources [ i ] ) ;
32835: LD_VAR 0 15
32839: PPUSH
32840: LD_VAR 0 8
32844: PPUSH
32845: LD_VAR 0 5
32849: PUSH
32850: LD_VAR 0 8
32854: ARRAY
32855: PPUSH
32856: CALL_OW 276
32860: GO 32832
32862: POP
32863: POP
// buildings := GetBaseBuildings ( base , area ) ;
32864: LD_ADDR_VAR 0 18
32868: PUSH
32869: LD_VAR 0 15
32873: PPUSH
32874: LD_VAR 0 2
32878: PPUSH
32879: CALL 32156 0 2
32883: ST_TO_ADDR
// InitHc ;
32884: CALL_OW 19
// InitUc ;
32888: CALL_OW 18
// uc_side := side ;
32892: LD_ADDR_OWVAR 20
32896: PUSH
32897: LD_VAR 0 16
32901: ST_TO_ADDR
// uc_nation := nation ;
32902: LD_ADDR_OWVAR 21
32906: PUSH
32907: LD_VAR 0 17
32911: ST_TO_ADDR
// if buildings then
32912: LD_VAR 0 18
32916: IFFALSE 34238
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32918: LD_ADDR_VAR 0 19
32922: PUSH
32923: LD_VAR 0 18
32927: PPUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 30
32933: PUSH
32934: LD_INT 29
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 30
32943: PUSH
32944: LD_INT 30
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: EMPTY
32952: LIST
32953: LIST
32954: LIST
32955: PPUSH
32956: CALL_OW 72
32960: ST_TO_ADDR
// if tmp then
32961: LD_VAR 0 19
32965: IFFALSE 33013
// for i in tmp do
32967: LD_ADDR_VAR 0 8
32971: PUSH
32972: LD_VAR 0 19
32976: PUSH
32977: FOR_IN
32978: IFFALSE 33011
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32980: LD_VAR 0 8
32984: PPUSH
32985: CALL_OW 250
32989: PPUSH
32990: LD_VAR 0 8
32994: PPUSH
32995: CALL_OW 251
32999: PPUSH
33000: LD_VAR 0 16
33004: PPUSH
33005: CALL_OW 441
33009: GO 32977
33011: POP
33012: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33013: LD_VAR 0 18
33017: PPUSH
33018: LD_INT 2
33020: PUSH
33021: LD_INT 30
33023: PUSH
33024: LD_INT 32
33026: PUSH
33027: EMPTY
33028: LIST
33029: LIST
33030: PUSH
33031: LD_INT 30
33033: PUSH
33034: LD_INT 33
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: LIST
33045: PPUSH
33046: CALL_OW 72
33050: IFFALSE 33138
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33052: LD_ADDR_VAR 0 8
33056: PUSH
33057: LD_VAR 0 18
33061: PPUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 30
33067: PUSH
33068: LD_INT 32
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 30
33077: PUSH
33078: LD_INT 33
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: PPUSH
33090: CALL_OW 72
33094: PUSH
33095: FOR_IN
33096: IFFALSE 33136
// begin if not GetBWeapon ( i ) then
33098: LD_VAR 0 8
33102: PPUSH
33103: CALL_OW 269
33107: NOT
33108: IFFALSE 33134
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33110: LD_VAR 0 8
33114: PPUSH
33115: LD_VAR 0 8
33119: PPUSH
33120: LD_VAR 0 2
33124: PPUSH
33125: CALL 34384 0 2
33129: PPUSH
33130: CALL_OW 431
// end ;
33134: GO 33095
33136: POP
33137: POP
// end ; for i = 1 to personel do
33138: LD_ADDR_VAR 0 8
33142: PUSH
33143: DOUBLE
33144: LD_INT 1
33146: DEC
33147: ST_TO_ADDR
33148: LD_VAR 0 6
33152: PUSH
33153: FOR_TO
33154: IFFALSE 34218
// begin if i > 4 then
33156: LD_VAR 0 8
33160: PUSH
33161: LD_INT 4
33163: GREATER
33164: IFFALSE 33168
// break ;
33166: GO 34218
// case i of 1 :
33168: LD_VAR 0 8
33172: PUSH
33173: LD_INT 1
33175: DOUBLE
33176: EQUAL
33177: IFTRUE 33181
33179: GO 33261
33181: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33182: LD_ADDR_VAR 0 12
33186: PUSH
33187: LD_VAR 0 18
33191: PPUSH
33192: LD_INT 22
33194: PUSH
33195: LD_VAR 0 16
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 58
33206: PUSH
33207: EMPTY
33208: LIST
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: LD_INT 30
33215: PUSH
33216: LD_INT 32
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: LD_INT 30
33225: PUSH
33226: LD_INT 4
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: PUSH
33233: LD_INT 30
33235: PUSH
33236: LD_INT 5
33238: PUSH
33239: EMPTY
33240: LIST
33241: LIST
33242: PUSH
33243: EMPTY
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: PPUSH
33254: CALL_OW 72
33258: ST_TO_ADDR
33259: GO 33483
33261: LD_INT 2
33263: DOUBLE
33264: EQUAL
33265: IFTRUE 33269
33267: GO 33331
33269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33270: LD_ADDR_VAR 0 12
33274: PUSH
33275: LD_VAR 0 18
33279: PPUSH
33280: LD_INT 22
33282: PUSH
33283: LD_VAR 0 16
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: PUSH
33295: LD_INT 30
33297: PUSH
33298: LD_INT 0
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 30
33307: PUSH
33308: LD_INT 1
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: LIST
33319: PUSH
33320: EMPTY
33321: LIST
33322: LIST
33323: PPUSH
33324: CALL_OW 72
33328: ST_TO_ADDR
33329: GO 33483
33331: LD_INT 3
33333: DOUBLE
33334: EQUAL
33335: IFTRUE 33339
33337: GO 33401
33339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33340: LD_ADDR_VAR 0 12
33344: PUSH
33345: LD_VAR 0 18
33349: PPUSH
33350: LD_INT 22
33352: PUSH
33353: LD_VAR 0 16
33357: PUSH
33358: EMPTY
33359: LIST
33360: LIST
33361: PUSH
33362: LD_INT 2
33364: PUSH
33365: LD_INT 30
33367: PUSH
33368: LD_INT 2
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 30
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PPUSH
33394: CALL_OW 72
33398: ST_TO_ADDR
33399: GO 33483
33401: LD_INT 4
33403: DOUBLE
33404: EQUAL
33405: IFTRUE 33409
33407: GO 33482
33409: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33410: LD_ADDR_VAR 0 12
33414: PUSH
33415: LD_VAR 0 18
33419: PPUSH
33420: LD_INT 22
33422: PUSH
33423: LD_VAR 0 16
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 2
33434: PUSH
33435: LD_INT 30
33437: PUSH
33438: LD_INT 6
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 30
33447: PUSH
33448: LD_INT 7
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: PUSH
33455: LD_INT 30
33457: PUSH
33458: LD_INT 8
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PPUSH
33475: CALL_OW 72
33479: ST_TO_ADDR
33480: GO 33483
33482: POP
// if i = 1 then
33483: LD_VAR 0 8
33487: PUSH
33488: LD_INT 1
33490: EQUAL
33491: IFFALSE 33602
// begin tmp := [ ] ;
33493: LD_ADDR_VAR 0 19
33497: PUSH
33498: EMPTY
33499: ST_TO_ADDR
// for j in f do
33500: LD_ADDR_VAR 0 9
33504: PUSH
33505: LD_VAR 0 12
33509: PUSH
33510: FOR_IN
33511: IFFALSE 33584
// if GetBType ( j ) = b_bunker then
33513: LD_VAR 0 9
33517: PPUSH
33518: CALL_OW 266
33522: PUSH
33523: LD_INT 32
33525: EQUAL
33526: IFFALSE 33553
// tmp := Insert ( tmp , 1 , j ) else
33528: LD_ADDR_VAR 0 19
33532: PUSH
33533: LD_VAR 0 19
33537: PPUSH
33538: LD_INT 1
33540: PPUSH
33541: LD_VAR 0 9
33545: PPUSH
33546: CALL_OW 2
33550: ST_TO_ADDR
33551: GO 33582
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33553: LD_ADDR_VAR 0 19
33557: PUSH
33558: LD_VAR 0 19
33562: PPUSH
33563: LD_VAR 0 19
33567: PUSH
33568: LD_INT 1
33570: PLUS
33571: PPUSH
33572: LD_VAR 0 9
33576: PPUSH
33577: CALL_OW 2
33581: ST_TO_ADDR
33582: GO 33510
33584: POP
33585: POP
// if tmp then
33586: LD_VAR 0 19
33590: IFFALSE 33602
// f := tmp ;
33592: LD_ADDR_VAR 0 12
33596: PUSH
33597: LD_VAR 0 19
33601: ST_TO_ADDR
// end ; x := personel [ i ] ;
33602: LD_ADDR_VAR 0 13
33606: PUSH
33607: LD_VAR 0 6
33611: PUSH
33612: LD_VAR 0 8
33616: ARRAY
33617: ST_TO_ADDR
// if x = - 1 then
33618: LD_VAR 0 13
33622: PUSH
33623: LD_INT 1
33625: NEG
33626: EQUAL
33627: IFFALSE 33836
// begin for j in f do
33629: LD_ADDR_VAR 0 9
33633: PUSH
33634: LD_VAR 0 12
33638: PUSH
33639: FOR_IN
33640: IFFALSE 33832
// repeat InitHc ;
33642: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33646: LD_VAR 0 9
33650: PPUSH
33651: CALL_OW 266
33655: PUSH
33656: LD_INT 5
33658: EQUAL
33659: IFFALSE 33729
// begin if UnitsInside ( j ) < 3 then
33661: LD_VAR 0 9
33665: PPUSH
33666: CALL_OW 313
33670: PUSH
33671: LD_INT 3
33673: LESS
33674: IFFALSE 33710
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33676: LD_INT 0
33678: PPUSH
33679: LD_INT 5
33681: PUSH
33682: LD_INT 8
33684: PUSH
33685: LD_INT 9
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: PUSH
33693: LD_VAR 0 17
33697: ARRAY
33698: PPUSH
33699: LD_VAR 0 4
33703: PPUSH
33704: CALL_OW 380
33708: GO 33727
// PrepareHuman ( false , i , skill ) ;
33710: LD_INT 0
33712: PPUSH
33713: LD_VAR 0 8
33717: PPUSH
33718: LD_VAR 0 4
33722: PPUSH
33723: CALL_OW 380
// end else
33727: GO 33746
// PrepareHuman ( false , i , skill ) ;
33729: LD_INT 0
33731: PPUSH
33732: LD_VAR 0 8
33736: PPUSH
33737: LD_VAR 0 4
33741: PPUSH
33742: CALL_OW 380
// un := CreateHuman ;
33746: LD_ADDR_VAR 0 14
33750: PUSH
33751: CALL_OW 44
33755: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33756: LD_ADDR_VAR 0 7
33760: PUSH
33761: LD_VAR 0 7
33765: PPUSH
33766: LD_INT 1
33768: PPUSH
33769: LD_VAR 0 14
33773: PPUSH
33774: CALL_OW 2
33778: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33779: LD_VAR 0 14
33783: PPUSH
33784: LD_VAR 0 9
33788: PPUSH
33789: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33793: LD_VAR 0 9
33797: PPUSH
33798: CALL_OW 313
33802: PUSH
33803: LD_INT 6
33805: EQUAL
33806: PUSH
33807: LD_VAR 0 9
33811: PPUSH
33812: CALL_OW 266
33816: PUSH
33817: LD_INT 32
33819: PUSH
33820: LD_INT 31
33822: PUSH
33823: EMPTY
33824: LIST
33825: LIST
33826: IN
33827: OR
33828: IFFALSE 33642
33830: GO 33639
33832: POP
33833: POP
// end else
33834: GO 34216
// for j = 1 to x do
33836: LD_ADDR_VAR 0 9
33840: PUSH
33841: DOUBLE
33842: LD_INT 1
33844: DEC
33845: ST_TO_ADDR
33846: LD_VAR 0 13
33850: PUSH
33851: FOR_TO
33852: IFFALSE 34214
// begin InitHc ;
33854: CALL_OW 19
// if not f then
33858: LD_VAR 0 12
33862: NOT
33863: IFFALSE 33952
// begin PrepareHuman ( false , i , skill ) ;
33865: LD_INT 0
33867: PPUSH
33868: LD_VAR 0 8
33872: PPUSH
33873: LD_VAR 0 4
33877: PPUSH
33878: CALL_OW 380
// un := CreateHuman ;
33882: LD_ADDR_VAR 0 14
33886: PUSH
33887: CALL_OW 44
33891: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33892: LD_ADDR_VAR 0 7
33896: PUSH
33897: LD_VAR 0 7
33901: PPUSH
33902: LD_INT 1
33904: PPUSH
33905: LD_VAR 0 14
33909: PPUSH
33910: CALL_OW 2
33914: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33915: LD_VAR 0 14
33919: PPUSH
33920: LD_VAR 0 1
33924: PPUSH
33925: CALL_OW 250
33929: PPUSH
33930: LD_VAR 0 1
33934: PPUSH
33935: CALL_OW 251
33939: PPUSH
33940: LD_INT 10
33942: PPUSH
33943: LD_INT 0
33945: PPUSH
33946: CALL_OW 50
// continue ;
33950: GO 33851
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33952: LD_VAR 0 12
33956: PUSH
33957: LD_INT 1
33959: ARRAY
33960: PPUSH
33961: CALL_OW 313
33965: PUSH
33966: LD_VAR 0 12
33970: PUSH
33971: LD_INT 1
33973: ARRAY
33974: PPUSH
33975: CALL_OW 266
33979: PUSH
33980: LD_INT 32
33982: PUSH
33983: LD_INT 31
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: IN
33990: AND
33991: PUSH
33992: LD_VAR 0 12
33996: PUSH
33997: LD_INT 1
33999: ARRAY
34000: PPUSH
34001: CALL_OW 313
34005: PUSH
34006: LD_INT 6
34008: EQUAL
34009: OR
34010: IFFALSE 34030
// f := Delete ( f , 1 ) ;
34012: LD_ADDR_VAR 0 12
34016: PUSH
34017: LD_VAR 0 12
34021: PPUSH
34022: LD_INT 1
34024: PPUSH
34025: CALL_OW 3
34029: ST_TO_ADDR
// if not f then
34030: LD_VAR 0 12
34034: NOT
34035: IFFALSE 34053
// begin x := x + 2 ;
34037: LD_ADDR_VAR 0 13
34041: PUSH
34042: LD_VAR 0 13
34046: PUSH
34047: LD_INT 2
34049: PLUS
34050: ST_TO_ADDR
// continue ;
34051: GO 33851
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34053: LD_VAR 0 12
34057: PUSH
34058: LD_INT 1
34060: ARRAY
34061: PPUSH
34062: CALL_OW 266
34066: PUSH
34067: LD_INT 5
34069: EQUAL
34070: IFFALSE 34144
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34072: LD_VAR 0 12
34076: PUSH
34077: LD_INT 1
34079: ARRAY
34080: PPUSH
34081: CALL_OW 313
34085: PUSH
34086: LD_INT 3
34088: LESS
34089: IFFALSE 34125
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34091: LD_INT 0
34093: PPUSH
34094: LD_INT 5
34096: PUSH
34097: LD_INT 8
34099: PUSH
34100: LD_INT 9
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: LIST
34107: PUSH
34108: LD_VAR 0 17
34112: ARRAY
34113: PPUSH
34114: LD_VAR 0 4
34118: PPUSH
34119: CALL_OW 380
34123: GO 34142
// PrepareHuman ( false , i , skill ) ;
34125: LD_INT 0
34127: PPUSH
34128: LD_VAR 0 8
34132: PPUSH
34133: LD_VAR 0 4
34137: PPUSH
34138: CALL_OW 380
// end else
34142: GO 34161
// PrepareHuman ( false , i , skill ) ;
34144: LD_INT 0
34146: PPUSH
34147: LD_VAR 0 8
34151: PPUSH
34152: LD_VAR 0 4
34156: PPUSH
34157: CALL_OW 380
// un := CreateHuman ;
34161: LD_ADDR_VAR 0 14
34165: PUSH
34166: CALL_OW 44
34170: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34171: LD_ADDR_VAR 0 7
34175: PUSH
34176: LD_VAR 0 7
34180: PPUSH
34181: LD_INT 1
34183: PPUSH
34184: LD_VAR 0 14
34188: PPUSH
34189: CALL_OW 2
34193: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34194: LD_VAR 0 14
34198: PPUSH
34199: LD_VAR 0 12
34203: PUSH
34204: LD_INT 1
34206: ARRAY
34207: PPUSH
34208: CALL_OW 52
// end ;
34212: GO 33851
34214: POP
34215: POP
// end ;
34216: GO 33153
34218: POP
34219: POP
// result := result ^ buildings ;
34220: LD_ADDR_VAR 0 7
34224: PUSH
34225: LD_VAR 0 7
34229: PUSH
34230: LD_VAR 0 18
34234: ADD
34235: ST_TO_ADDR
// end else
34236: GO 34379
// begin for i = 1 to personel do
34238: LD_ADDR_VAR 0 8
34242: PUSH
34243: DOUBLE
34244: LD_INT 1
34246: DEC
34247: ST_TO_ADDR
34248: LD_VAR 0 6
34252: PUSH
34253: FOR_TO
34254: IFFALSE 34377
// begin if i > 4 then
34256: LD_VAR 0 8
34260: PUSH
34261: LD_INT 4
34263: GREATER
34264: IFFALSE 34268
// break ;
34266: GO 34377
// x := personel [ i ] ;
34268: LD_ADDR_VAR 0 13
34272: PUSH
34273: LD_VAR 0 6
34277: PUSH
34278: LD_VAR 0 8
34282: ARRAY
34283: ST_TO_ADDR
// if x = - 1 then
34284: LD_VAR 0 13
34288: PUSH
34289: LD_INT 1
34291: NEG
34292: EQUAL
34293: IFFALSE 34297
// continue ;
34295: GO 34253
// PrepareHuman ( false , i , skill ) ;
34297: LD_INT 0
34299: PPUSH
34300: LD_VAR 0 8
34304: PPUSH
34305: LD_VAR 0 4
34309: PPUSH
34310: CALL_OW 380
// un := CreateHuman ;
34314: LD_ADDR_VAR 0 14
34318: PUSH
34319: CALL_OW 44
34323: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34324: LD_VAR 0 14
34328: PPUSH
34329: LD_VAR 0 1
34333: PPUSH
34334: CALL_OW 250
34338: PPUSH
34339: LD_VAR 0 1
34343: PPUSH
34344: CALL_OW 251
34348: PPUSH
34349: LD_INT 10
34351: PPUSH
34352: LD_INT 0
34354: PPUSH
34355: CALL_OW 50
// result := result ^ un ;
34359: LD_ADDR_VAR 0 7
34363: PUSH
34364: LD_VAR 0 7
34368: PUSH
34369: LD_VAR 0 14
34373: ADD
34374: ST_TO_ADDR
// end ;
34375: GO 34253
34377: POP
34378: POP
// end ; end ;
34379: LD_VAR 0 7
34383: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34384: LD_INT 0
34386: PPUSH
34387: PPUSH
34388: PPUSH
34389: PPUSH
34390: PPUSH
34391: PPUSH
34392: PPUSH
34393: PPUSH
34394: PPUSH
34395: PPUSH
34396: PPUSH
34397: PPUSH
34398: PPUSH
34399: PPUSH
34400: PPUSH
34401: PPUSH
// result := false ;
34402: LD_ADDR_VAR 0 3
34406: PUSH
34407: LD_INT 0
34409: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34410: LD_VAR 0 1
34414: NOT
34415: PUSH
34416: LD_VAR 0 1
34420: PPUSH
34421: CALL_OW 266
34425: PUSH
34426: LD_INT 32
34428: PUSH
34429: LD_INT 33
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: IN
34436: NOT
34437: OR
34438: IFFALSE 34442
// exit ;
34440: GO 35578
// nat := GetNation ( tower ) ;
34442: LD_ADDR_VAR 0 12
34446: PUSH
34447: LD_VAR 0 1
34451: PPUSH
34452: CALL_OW 248
34456: ST_TO_ADDR
// side := GetSide ( tower ) ;
34457: LD_ADDR_VAR 0 16
34461: PUSH
34462: LD_VAR 0 1
34466: PPUSH
34467: CALL_OW 255
34471: ST_TO_ADDR
// x := GetX ( tower ) ;
34472: LD_ADDR_VAR 0 10
34476: PUSH
34477: LD_VAR 0 1
34481: PPUSH
34482: CALL_OW 250
34486: ST_TO_ADDR
// y := GetY ( tower ) ;
34487: LD_ADDR_VAR 0 11
34491: PUSH
34492: LD_VAR 0 1
34496: PPUSH
34497: CALL_OW 251
34501: ST_TO_ADDR
// if not x or not y then
34502: LD_VAR 0 10
34506: NOT
34507: PUSH
34508: LD_VAR 0 11
34512: NOT
34513: OR
34514: IFFALSE 34518
// exit ;
34516: GO 35578
// weapon := 0 ;
34518: LD_ADDR_VAR 0 18
34522: PUSH
34523: LD_INT 0
34525: ST_TO_ADDR
// fac_list := [ ] ;
34526: LD_ADDR_VAR 0 17
34530: PUSH
34531: EMPTY
34532: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
34533: LD_ADDR_VAR 0 6
34537: PUSH
34538: LD_VAR 0 1
34542: PPUSH
34543: CALL_OW 274
34547: PPUSH
34548: LD_VAR 0 2
34552: PPUSH
34553: CALL 32156 0 2
34557: PPUSH
34558: LD_INT 30
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PPUSH
34568: CALL_OW 72
34572: ST_TO_ADDR
// if not factories then
34573: LD_VAR 0 6
34577: NOT
34578: IFFALSE 34582
// exit ;
34580: GO 35578
// for i in factories do
34582: LD_ADDR_VAR 0 8
34586: PUSH
34587: LD_VAR 0 6
34591: PUSH
34592: FOR_IN
34593: IFFALSE 34618
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34595: LD_ADDR_VAR 0 17
34599: PUSH
34600: LD_VAR 0 17
34604: PUSH
34605: LD_VAR 0 8
34609: PPUSH
34610: CALL_OW 478
34614: UNION
34615: ST_TO_ADDR
34616: GO 34592
34618: POP
34619: POP
// if not fac_list then
34620: LD_VAR 0 17
34624: NOT
34625: IFFALSE 34629
// exit ;
34627: GO 35578
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34629: LD_ADDR_VAR 0 5
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 5
34639: PUSH
34640: LD_INT 9
34642: PUSH
34643: LD_INT 10
34645: PUSH
34646: LD_INT 6
34648: PUSH
34649: LD_INT 7
34651: PUSH
34652: LD_INT 11
34654: PUSH
34655: EMPTY
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 27
34666: PUSH
34667: LD_INT 28
34669: PUSH
34670: LD_INT 26
34672: PUSH
34673: LD_INT 30
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: LIST
34681: PUSH
34682: LD_INT 43
34684: PUSH
34685: LD_INT 44
34687: PUSH
34688: LD_INT 46
34690: PUSH
34691: LD_INT 45
34693: PUSH
34694: LD_INT 47
34696: PUSH
34697: LD_INT 49
34699: PUSH
34700: EMPTY
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: LIST
34706: LIST
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: PUSH
34713: LD_VAR 0 12
34717: ARRAY
34718: ST_TO_ADDR
// for i in list do
34719: LD_ADDR_VAR 0 8
34723: PUSH
34724: LD_VAR 0 5
34728: PUSH
34729: FOR_IN
34730: IFFALSE 34763
// if not i in fac_list then
34732: LD_VAR 0 8
34736: PUSH
34737: LD_VAR 0 17
34741: IN
34742: NOT
34743: IFFALSE 34761
// list := list diff i ;
34745: LD_ADDR_VAR 0 5
34749: PUSH
34750: LD_VAR 0 5
34754: PUSH
34755: LD_VAR 0 8
34759: DIFF
34760: ST_TO_ADDR
34761: GO 34729
34763: POP
34764: POP
// if not list then
34765: LD_VAR 0 5
34769: NOT
34770: IFFALSE 34774
// exit ;
34772: GO 35578
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34774: LD_VAR 0 12
34778: PUSH
34779: LD_INT 3
34781: EQUAL
34782: PUSH
34783: LD_INT 49
34785: PUSH
34786: LD_VAR 0 5
34790: IN
34791: AND
34792: PUSH
34793: LD_INT 31
34795: PPUSH
34796: LD_VAR 0 16
34800: PPUSH
34801: CALL_OW 321
34805: PUSH
34806: LD_INT 2
34808: EQUAL
34809: AND
34810: IFFALSE 34870
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34812: LD_INT 22
34814: PUSH
34815: LD_VAR 0 16
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 35
34826: PUSH
34827: LD_INT 49
34829: PUSH
34830: EMPTY
34831: LIST
34832: LIST
34833: PUSH
34834: LD_INT 91
34836: PUSH
34837: LD_VAR 0 1
34841: PUSH
34842: LD_INT 10
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: LIST
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: LIST
34854: PPUSH
34855: CALL_OW 69
34859: NOT
34860: IFFALSE 34870
// weapon := ru_time_lapser ;
34862: LD_ADDR_VAR 0 18
34866: PUSH
34867: LD_INT 49
34869: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34870: LD_VAR 0 12
34874: PUSH
34875: LD_INT 1
34877: PUSH
34878: LD_INT 2
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: IN
34885: PUSH
34886: LD_INT 11
34888: PUSH
34889: LD_VAR 0 5
34893: IN
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: LD_VAR 0 5
34902: IN
34903: OR
34904: AND
34905: PUSH
34906: LD_INT 6
34908: PPUSH
34909: LD_VAR 0 16
34913: PPUSH
34914: CALL_OW 321
34918: PUSH
34919: LD_INT 2
34921: EQUAL
34922: AND
34923: IFFALSE 35088
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34925: LD_INT 22
34927: PUSH
34928: LD_VAR 0 16
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 2
34939: PUSH
34940: LD_INT 35
34942: PUSH
34943: LD_INT 11
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 35
34952: PUSH
34953: LD_INT 30
34955: PUSH
34956: EMPTY
34957: LIST
34958: LIST
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: LIST
34964: PUSH
34965: LD_INT 91
34967: PUSH
34968: LD_VAR 0 1
34972: PUSH
34973: LD_INT 18
34975: PUSH
34976: EMPTY
34977: LIST
34978: LIST
34979: LIST
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: PPUSH
34986: CALL_OW 69
34990: NOT
34991: PUSH
34992: LD_INT 22
34994: PUSH
34995: LD_VAR 0 16
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: LD_INT 2
35006: PUSH
35007: LD_INT 30
35009: PUSH
35010: LD_INT 32
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: LD_INT 30
35019: PUSH
35020: LD_INT 33
35022: PUSH
35023: EMPTY
35024: LIST
35025: LIST
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 91
35034: PUSH
35035: LD_VAR 0 1
35039: PUSH
35040: LD_INT 12
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: LIST
35052: PUSH
35053: EMPTY
35054: LIST
35055: PPUSH
35056: CALL_OW 69
35060: PUSH
35061: LD_INT 2
35063: GREATER
35064: AND
35065: IFFALSE 35088
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35067: LD_ADDR_VAR 0 18
35071: PUSH
35072: LD_INT 11
35074: PUSH
35075: LD_INT 30
35077: PUSH
35078: EMPTY
35079: LIST
35080: LIST
35081: PUSH
35082: LD_VAR 0 12
35086: ARRAY
35087: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35088: LD_VAR 0 18
35092: NOT
35093: PUSH
35094: LD_INT 40
35096: PPUSH
35097: LD_VAR 0 16
35101: PPUSH
35102: CALL_OW 321
35106: PUSH
35107: LD_INT 2
35109: EQUAL
35110: AND
35111: PUSH
35112: LD_INT 7
35114: PUSH
35115: LD_VAR 0 5
35119: IN
35120: PUSH
35121: LD_INT 28
35123: PUSH
35124: LD_VAR 0 5
35128: IN
35129: OR
35130: PUSH
35131: LD_INT 45
35133: PUSH
35134: LD_VAR 0 5
35138: IN
35139: OR
35140: AND
35141: IFFALSE 35395
// begin hex := GetHexInfo ( x , y ) ;
35143: LD_ADDR_VAR 0 4
35147: PUSH
35148: LD_VAR 0 10
35152: PPUSH
35153: LD_VAR 0 11
35157: PPUSH
35158: CALL_OW 546
35162: ST_TO_ADDR
// if hex [ 1 ] then
35163: LD_VAR 0 4
35167: PUSH
35168: LD_INT 1
35170: ARRAY
35171: IFFALSE 35175
// exit ;
35173: GO 35578
// height := hex [ 2 ] ;
35175: LD_ADDR_VAR 0 15
35179: PUSH
35180: LD_VAR 0 4
35184: PUSH
35185: LD_INT 2
35187: ARRAY
35188: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35189: LD_ADDR_VAR 0 14
35193: PUSH
35194: LD_INT 0
35196: PUSH
35197: LD_INT 2
35199: PUSH
35200: LD_INT 3
35202: PUSH
35203: LD_INT 5
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
// for i in tmp do
35212: LD_ADDR_VAR 0 8
35216: PUSH
35217: LD_VAR 0 14
35221: PUSH
35222: FOR_IN
35223: IFFALSE 35393
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35225: LD_ADDR_VAR 0 9
35229: PUSH
35230: LD_VAR 0 10
35234: PPUSH
35235: LD_VAR 0 8
35239: PPUSH
35240: LD_INT 5
35242: PPUSH
35243: CALL_OW 272
35247: PUSH
35248: LD_VAR 0 11
35252: PPUSH
35253: LD_VAR 0 8
35257: PPUSH
35258: LD_INT 5
35260: PPUSH
35261: CALL_OW 273
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35270: LD_VAR 0 9
35274: PUSH
35275: LD_INT 1
35277: ARRAY
35278: PPUSH
35279: LD_VAR 0 9
35283: PUSH
35284: LD_INT 2
35286: ARRAY
35287: PPUSH
35288: CALL_OW 488
35292: IFFALSE 35391
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35294: LD_ADDR_VAR 0 4
35298: PUSH
35299: LD_VAR 0 9
35303: PUSH
35304: LD_INT 1
35306: ARRAY
35307: PPUSH
35308: LD_VAR 0 9
35312: PUSH
35313: LD_INT 2
35315: ARRAY
35316: PPUSH
35317: CALL_OW 546
35321: ST_TO_ADDR
// if hex [ 1 ] then
35322: LD_VAR 0 4
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: IFFALSE 35334
// continue ;
35332: GO 35222
// h := hex [ 2 ] ;
35334: LD_ADDR_VAR 0 13
35338: PUSH
35339: LD_VAR 0 4
35343: PUSH
35344: LD_INT 2
35346: ARRAY
35347: ST_TO_ADDR
// if h + 7 < height then
35348: LD_VAR 0 13
35352: PUSH
35353: LD_INT 7
35355: PLUS
35356: PUSH
35357: LD_VAR 0 15
35361: LESS
35362: IFFALSE 35391
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35364: LD_ADDR_VAR 0 18
35368: PUSH
35369: LD_INT 7
35371: PUSH
35372: LD_INT 28
35374: PUSH
35375: LD_INT 45
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: PUSH
35383: LD_VAR 0 12
35387: ARRAY
35388: ST_TO_ADDR
// break ;
35389: GO 35393
// end ; end ; end ;
35391: GO 35222
35393: POP
35394: POP
// end ; if not weapon then
35395: LD_VAR 0 18
35399: NOT
35400: IFFALSE 35460
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35402: LD_ADDR_VAR 0 5
35406: PUSH
35407: LD_VAR 0 5
35411: PUSH
35412: LD_INT 11
35414: PUSH
35415: LD_INT 30
35417: PUSH
35418: LD_INT 49
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: LIST
35425: DIFF
35426: ST_TO_ADDR
// if not list then
35427: LD_VAR 0 5
35431: NOT
35432: IFFALSE 35436
// exit ;
35434: GO 35578
// weapon := list [ rand ( 1 , list ) ] ;
35436: LD_ADDR_VAR 0 18
35440: PUSH
35441: LD_VAR 0 5
35445: PUSH
35446: LD_INT 1
35448: PPUSH
35449: LD_VAR 0 5
35453: PPUSH
35454: CALL_OW 12
35458: ARRAY
35459: ST_TO_ADDR
// end ; if weapon then
35460: LD_VAR 0 18
35464: IFFALSE 35578
// begin tmp := CostOfWeapon ( weapon ) ;
35466: LD_ADDR_VAR 0 14
35470: PUSH
35471: LD_VAR 0 18
35475: PPUSH
35476: CALL_OW 451
35480: ST_TO_ADDR
// j := GetBase ( tower ) ;
35481: LD_ADDR_VAR 0 9
35485: PUSH
35486: LD_VAR 0 1
35490: PPUSH
35491: CALL_OW 274
35495: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35496: LD_VAR 0 9
35500: PPUSH
35501: LD_INT 1
35503: PPUSH
35504: CALL_OW 275
35508: PUSH
35509: LD_VAR 0 14
35513: PUSH
35514: LD_INT 1
35516: ARRAY
35517: GREATEREQUAL
35518: PUSH
35519: LD_VAR 0 9
35523: PPUSH
35524: LD_INT 2
35526: PPUSH
35527: CALL_OW 275
35531: PUSH
35532: LD_VAR 0 14
35536: PUSH
35537: LD_INT 2
35539: ARRAY
35540: GREATEREQUAL
35541: AND
35542: PUSH
35543: LD_VAR 0 9
35547: PPUSH
35548: LD_INT 3
35550: PPUSH
35551: CALL_OW 275
35555: PUSH
35556: LD_VAR 0 14
35560: PUSH
35561: LD_INT 3
35563: ARRAY
35564: GREATEREQUAL
35565: AND
35566: IFFALSE 35578
// result := weapon ;
35568: LD_ADDR_VAR 0 3
35572: PUSH
35573: LD_VAR 0 18
35577: ST_TO_ADDR
// end ; end ;
35578: LD_VAR 0 3
35582: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35583: LD_INT 0
35585: PPUSH
35586: PPUSH
// result := true ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 1
35594: ST_TO_ADDR
// if array1 = array2 then
35595: LD_VAR 0 1
35599: PUSH
35600: LD_VAR 0 2
35604: EQUAL
35605: IFFALSE 35665
// begin for i = 1 to array1 do
35607: LD_ADDR_VAR 0 4
35611: PUSH
35612: DOUBLE
35613: LD_INT 1
35615: DEC
35616: ST_TO_ADDR
35617: LD_VAR 0 1
35621: PUSH
35622: FOR_TO
35623: IFFALSE 35661
// if array1 [ i ] <> array2 [ i ] then
35625: LD_VAR 0 1
35629: PUSH
35630: LD_VAR 0 4
35634: ARRAY
35635: PUSH
35636: LD_VAR 0 2
35640: PUSH
35641: LD_VAR 0 4
35645: ARRAY
35646: NONEQUAL
35647: IFFALSE 35659
// begin result := false ;
35649: LD_ADDR_VAR 0 3
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
// break ;
35657: GO 35661
// end ;
35659: GO 35622
35661: POP
35662: POP
// end else
35663: GO 35673
// result := false ;
35665: LD_ADDR_VAR 0 3
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// end ;
35673: LD_VAR 0 3
35677: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35678: LD_INT 0
35680: PPUSH
35681: PPUSH
35682: PPUSH
// pom := GetBase ( fac ) ;
35683: LD_ADDR_VAR 0 5
35687: PUSH
35688: LD_VAR 0 1
35692: PPUSH
35693: CALL_OW 274
35697: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35698: LD_ADDR_VAR 0 4
35702: PUSH
35703: LD_VAR 0 2
35707: PUSH
35708: LD_INT 1
35710: ARRAY
35711: PPUSH
35712: LD_VAR 0 2
35716: PUSH
35717: LD_INT 2
35719: ARRAY
35720: PPUSH
35721: LD_VAR 0 2
35725: PUSH
35726: LD_INT 3
35728: ARRAY
35729: PPUSH
35730: LD_VAR 0 2
35734: PUSH
35735: LD_INT 4
35737: ARRAY
35738: PPUSH
35739: CALL_OW 449
35743: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35744: LD_ADDR_VAR 0 3
35748: PUSH
35749: LD_VAR 0 5
35753: PPUSH
35754: LD_INT 1
35756: PPUSH
35757: CALL_OW 275
35761: PUSH
35762: LD_VAR 0 4
35766: PUSH
35767: LD_INT 1
35769: ARRAY
35770: GREATEREQUAL
35771: PUSH
35772: LD_VAR 0 5
35776: PPUSH
35777: LD_INT 2
35779: PPUSH
35780: CALL_OW 275
35784: PUSH
35785: LD_VAR 0 4
35789: PUSH
35790: LD_INT 2
35792: ARRAY
35793: GREATEREQUAL
35794: AND
35795: PUSH
35796: LD_VAR 0 5
35800: PPUSH
35801: LD_INT 3
35803: PPUSH
35804: CALL_OW 275
35808: PUSH
35809: LD_VAR 0 4
35813: PUSH
35814: LD_INT 3
35816: ARRAY
35817: GREATEREQUAL
35818: AND
35819: ST_TO_ADDR
// end ;
35820: LD_VAR 0 3
35824: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35825: LD_INT 0
35827: PPUSH
35828: PPUSH
35829: PPUSH
35830: PPUSH
// pom := GetBase ( building ) ;
35831: LD_ADDR_VAR 0 3
35835: PUSH
35836: LD_VAR 0 1
35840: PPUSH
35841: CALL_OW 274
35845: ST_TO_ADDR
// if not pom then
35846: LD_VAR 0 3
35850: NOT
35851: IFFALSE 35855
// exit ;
35853: GO 36025
// btype := GetBType ( building ) ;
35855: LD_ADDR_VAR 0 5
35859: PUSH
35860: LD_VAR 0 1
35864: PPUSH
35865: CALL_OW 266
35869: ST_TO_ADDR
// if btype = b_armoury then
35870: LD_VAR 0 5
35874: PUSH
35875: LD_INT 4
35877: EQUAL
35878: IFFALSE 35888
// btype := b_barracks ;
35880: LD_ADDR_VAR 0 5
35884: PUSH
35885: LD_INT 5
35887: ST_TO_ADDR
// if btype = b_depot then
35888: LD_VAR 0 5
35892: PUSH
35893: LD_INT 0
35895: EQUAL
35896: IFFALSE 35906
// btype := b_warehouse ;
35898: LD_ADDR_VAR 0 5
35902: PUSH
35903: LD_INT 1
35905: ST_TO_ADDR
// if btype = b_workshop then
35906: LD_VAR 0 5
35910: PUSH
35911: LD_INT 2
35913: EQUAL
35914: IFFALSE 35924
// btype := b_factory ;
35916: LD_ADDR_VAR 0 5
35920: PUSH
35921: LD_INT 3
35923: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35924: LD_ADDR_VAR 0 4
35928: PUSH
35929: LD_VAR 0 5
35933: PPUSH
35934: LD_VAR 0 1
35938: PPUSH
35939: CALL_OW 248
35943: PPUSH
35944: CALL_OW 450
35948: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35949: LD_ADDR_VAR 0 2
35953: PUSH
35954: LD_VAR 0 3
35958: PPUSH
35959: LD_INT 1
35961: PPUSH
35962: CALL_OW 275
35966: PUSH
35967: LD_VAR 0 4
35971: PUSH
35972: LD_INT 1
35974: ARRAY
35975: GREATEREQUAL
35976: PUSH
35977: LD_VAR 0 3
35981: PPUSH
35982: LD_INT 2
35984: PPUSH
35985: CALL_OW 275
35989: PUSH
35990: LD_VAR 0 4
35994: PUSH
35995: LD_INT 2
35997: ARRAY
35998: GREATEREQUAL
35999: AND
36000: PUSH
36001: LD_VAR 0 3
36005: PPUSH
36006: LD_INT 3
36008: PPUSH
36009: CALL_OW 275
36013: PUSH
36014: LD_VAR 0 4
36018: PUSH
36019: LD_INT 3
36021: ARRAY
36022: GREATEREQUAL
36023: AND
36024: ST_TO_ADDR
// end ;
36025: LD_VAR 0 2
36029: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36030: LD_INT 0
36032: PPUSH
36033: PPUSH
36034: PPUSH
// pom := GetBase ( building ) ;
36035: LD_ADDR_VAR 0 4
36039: PUSH
36040: LD_VAR 0 1
36044: PPUSH
36045: CALL_OW 274
36049: ST_TO_ADDR
// if not pom then
36050: LD_VAR 0 4
36054: NOT
36055: IFFALSE 36059
// exit ;
36057: GO 36160
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36059: LD_ADDR_VAR 0 5
36063: PUSH
36064: LD_VAR 0 2
36068: PPUSH
36069: LD_VAR 0 1
36073: PPUSH
36074: CALL_OW 248
36078: PPUSH
36079: CALL_OW 450
36083: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36084: LD_ADDR_VAR 0 3
36088: PUSH
36089: LD_VAR 0 4
36093: PPUSH
36094: LD_INT 1
36096: PPUSH
36097: CALL_OW 275
36101: PUSH
36102: LD_VAR 0 5
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: GREATEREQUAL
36111: PUSH
36112: LD_VAR 0 4
36116: PPUSH
36117: LD_INT 2
36119: PPUSH
36120: CALL_OW 275
36124: PUSH
36125: LD_VAR 0 5
36129: PUSH
36130: LD_INT 2
36132: ARRAY
36133: GREATEREQUAL
36134: AND
36135: PUSH
36136: LD_VAR 0 4
36140: PPUSH
36141: LD_INT 3
36143: PPUSH
36144: CALL_OW 275
36148: PUSH
36149: LD_VAR 0 5
36153: PUSH
36154: LD_INT 3
36156: ARRAY
36157: GREATEREQUAL
36158: AND
36159: ST_TO_ADDR
// end ;
36160: LD_VAR 0 3
36164: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
36165: LD_INT 0
36167: PPUSH
36168: PPUSH
36169: PPUSH
36170: PPUSH
36171: PPUSH
36172: PPUSH
36173: PPUSH
36174: PPUSH
36175: PPUSH
36176: PPUSH
// result := false ;
36177: LD_ADDR_VAR 0 6
36181: PUSH
36182: LD_INT 0
36184: ST_TO_ADDR
// if not base or not btype or not x or not y then
36185: LD_VAR 0 1
36189: NOT
36190: PUSH
36191: LD_VAR 0 2
36195: NOT
36196: OR
36197: PUSH
36198: LD_VAR 0 3
36202: NOT
36203: OR
36204: PUSH
36205: LD_VAR 0 4
36209: NOT
36210: OR
36211: IFFALSE 36215
// exit ;
36213: GO 36824
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
36215: LD_ADDR_VAR 0 12
36219: PUSH
36220: LD_VAR 0 2
36224: PPUSH
36225: LD_VAR 0 3
36229: PPUSH
36230: LD_VAR 0 4
36234: PPUSH
36235: LD_VAR 0 5
36239: PPUSH
36240: LD_VAR 0 1
36244: PUSH
36245: LD_INT 1
36247: ARRAY
36248: PPUSH
36249: CALL_OW 248
36253: PPUSH
36254: LD_INT 0
36256: PPUSH
36257: CALL 37661 0 6
36261: ST_TO_ADDR
// if not hexes then
36262: LD_VAR 0 12
36266: NOT
36267: IFFALSE 36271
// exit ;
36269: GO 36824
// for i = 1 to hexes do
36271: LD_ADDR_VAR 0 7
36275: PUSH
36276: DOUBLE
36277: LD_INT 1
36279: DEC
36280: ST_TO_ADDR
36281: LD_VAR 0 12
36285: PUSH
36286: FOR_TO
36287: IFFALSE 36822
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36289: LD_ADDR_VAR 0 11
36293: PUSH
36294: LD_VAR 0 12
36298: PUSH
36299: LD_VAR 0 7
36303: ARRAY
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: PPUSH
36309: LD_VAR 0 12
36313: PUSH
36314: LD_VAR 0 7
36318: ARRAY
36319: PUSH
36320: LD_INT 2
36322: ARRAY
36323: PPUSH
36324: CALL_OW 428
36328: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36329: LD_VAR 0 12
36333: PUSH
36334: LD_VAR 0 7
36338: ARRAY
36339: PUSH
36340: LD_INT 1
36342: ARRAY
36343: PPUSH
36344: LD_VAR 0 12
36348: PUSH
36349: LD_VAR 0 7
36353: ARRAY
36354: PUSH
36355: LD_INT 2
36357: ARRAY
36358: PPUSH
36359: CALL_OW 351
36363: PUSH
36364: LD_VAR 0 12
36368: PUSH
36369: LD_VAR 0 7
36373: ARRAY
36374: PUSH
36375: LD_INT 1
36377: ARRAY
36378: PPUSH
36379: LD_VAR 0 12
36383: PUSH
36384: LD_VAR 0 7
36388: ARRAY
36389: PUSH
36390: LD_INT 2
36392: ARRAY
36393: PPUSH
36394: CALL_OW 488
36398: NOT
36399: OR
36400: PUSH
36401: LD_VAR 0 11
36405: PPUSH
36406: CALL_OW 247
36410: PUSH
36411: LD_INT 3
36413: EQUAL
36414: OR
36415: IFFALSE 36421
// exit ;
36417: POP
36418: POP
36419: GO 36824
// if not tmp or not tmp in base then
36421: LD_VAR 0 11
36425: NOT
36426: PUSH
36427: LD_VAR 0 11
36431: PUSH
36432: LD_VAR 0 1
36436: IN
36437: NOT
36438: OR
36439: IFFALSE 36443
// continue ;
36441: GO 36286
// result := true ;
36443: LD_ADDR_VAR 0 6
36447: PUSH
36448: LD_INT 1
36450: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36451: LD_ADDR_VAR 0 15
36455: PUSH
36456: LD_VAR 0 1
36460: PPUSH
36461: LD_INT 22
36463: PUSH
36464: LD_VAR 0 11
36468: PPUSH
36469: CALL_OW 255
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: PUSH
36478: LD_INT 2
36480: PUSH
36481: LD_INT 30
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 30
36493: PUSH
36494: LD_INT 1
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: LIST
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PPUSH
36510: CALL_OW 72
36514: ST_TO_ADDR
// if dep then
36515: LD_VAR 0 15
36519: IFFALSE 36655
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36521: LD_ADDR_VAR 0 14
36525: PUSH
36526: LD_VAR 0 15
36530: PUSH
36531: LD_INT 1
36533: ARRAY
36534: PPUSH
36535: CALL_OW 250
36539: PPUSH
36540: LD_VAR 0 15
36544: PUSH
36545: LD_INT 1
36547: ARRAY
36548: PPUSH
36549: CALL_OW 254
36553: PPUSH
36554: LD_INT 5
36556: PPUSH
36557: CALL_OW 272
36561: PUSH
36562: LD_VAR 0 15
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: PPUSH
36571: CALL_OW 251
36575: PPUSH
36576: LD_VAR 0 15
36580: PUSH
36581: LD_INT 1
36583: ARRAY
36584: PPUSH
36585: CALL_OW 254
36589: PPUSH
36590: LD_INT 5
36592: PPUSH
36593: CALL_OW 273
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36602: LD_VAR 0 14
36606: PUSH
36607: LD_INT 1
36609: ARRAY
36610: PPUSH
36611: LD_VAR 0 14
36615: PUSH
36616: LD_INT 2
36618: ARRAY
36619: PPUSH
36620: CALL_OW 488
36624: IFFALSE 36655
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36626: LD_VAR 0 11
36630: PPUSH
36631: LD_VAR 0 14
36635: PUSH
36636: LD_INT 1
36638: ARRAY
36639: PPUSH
36640: LD_VAR 0 14
36644: PUSH
36645: LD_INT 2
36647: ARRAY
36648: PPUSH
36649: CALL_OW 111
// continue ;
36653: GO 36286
// end ; end ; r := GetDir ( tmp ) ;
36655: LD_ADDR_VAR 0 13
36659: PUSH
36660: LD_VAR 0 11
36664: PPUSH
36665: CALL_OW 254
36669: ST_TO_ADDR
// if r = 5 then
36670: LD_VAR 0 13
36674: PUSH
36675: LD_INT 5
36677: EQUAL
36678: IFFALSE 36688
// r := 0 ;
36680: LD_ADDR_VAR 0 13
36684: PUSH
36685: LD_INT 0
36687: ST_TO_ADDR
// for j = r to 5 do
36688: LD_ADDR_VAR 0 8
36692: PUSH
36693: DOUBLE
36694: LD_VAR 0 13
36698: DEC
36699: ST_TO_ADDR
36700: LD_INT 5
36702: PUSH
36703: FOR_TO
36704: IFFALSE 36818
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36706: LD_ADDR_VAR 0 9
36710: PUSH
36711: LD_VAR 0 11
36715: PPUSH
36716: CALL_OW 250
36720: PPUSH
36721: LD_VAR 0 8
36725: PPUSH
36726: LD_INT 2
36728: PPUSH
36729: CALL_OW 272
36733: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36734: LD_ADDR_VAR 0 10
36738: PUSH
36739: LD_VAR 0 11
36743: PPUSH
36744: CALL_OW 251
36748: PPUSH
36749: LD_VAR 0 8
36753: PPUSH
36754: LD_INT 2
36756: PPUSH
36757: CALL_OW 273
36761: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36762: LD_VAR 0 9
36766: PPUSH
36767: LD_VAR 0 10
36771: PPUSH
36772: CALL_OW 488
36776: PUSH
36777: LD_VAR 0 9
36781: PPUSH
36782: LD_VAR 0 10
36786: PPUSH
36787: CALL_OW 428
36791: NOT
36792: AND
36793: IFFALSE 36816
// begin ComMoveXY ( tmp , _x , _y ) ;
36795: LD_VAR 0 11
36799: PPUSH
36800: LD_VAR 0 9
36804: PPUSH
36805: LD_VAR 0 10
36809: PPUSH
36810: CALL_OW 111
// break ;
36814: GO 36818
// end ; end ;
36816: GO 36703
36818: POP
36819: POP
// end ;
36820: GO 36286
36822: POP
36823: POP
// end ;
36824: LD_VAR 0 6
36828: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
36829: LD_INT 0
36831: PPUSH
36832: PPUSH
36833: PPUSH
36834: PPUSH
36835: PPUSH
36836: PPUSH
36837: PPUSH
36838: PPUSH
36839: PPUSH
36840: PPUSH
// result := false ;
36841: LD_ADDR_VAR 0 6
36845: PUSH
36846: LD_INT 0
36848: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36849: LD_VAR 0 1
36853: NOT
36854: PUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 266
36864: PUSH
36865: LD_INT 0
36867: PUSH
36868: LD_INT 1
36870: PUSH
36871: EMPTY
36872: LIST
36873: LIST
36874: IN
36875: NOT
36876: OR
36877: PUSH
36878: LD_VAR 0 2
36882: NOT
36883: OR
36884: PUSH
36885: LD_VAR 0 5
36889: PUSH
36890: LD_INT 0
36892: PUSH
36893: LD_INT 1
36895: PUSH
36896: LD_INT 2
36898: PUSH
36899: LD_INT 3
36901: PUSH
36902: LD_INT 4
36904: PUSH
36905: LD_INT 5
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: IN
36916: NOT
36917: OR
36918: PUSH
36919: LD_VAR 0 3
36923: PPUSH
36924: LD_VAR 0 4
36928: PPUSH
36929: CALL_OW 488
36933: NOT
36934: OR
36935: IFFALSE 36939
// exit ;
36937: GO 37656
// pom := GetBase ( depot ) ;
36939: LD_ADDR_VAR 0 10
36943: PUSH
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 274
36953: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36954: LD_ADDR_VAR 0 11
36958: PUSH
36959: LD_VAR 0 2
36963: PPUSH
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL_OW 248
36973: PPUSH
36974: CALL_OW 450
36978: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36979: LD_VAR 0 10
36983: PPUSH
36984: LD_INT 1
36986: PPUSH
36987: CALL_OW 275
36991: PUSH
36992: LD_VAR 0 11
36996: PUSH
36997: LD_INT 1
36999: ARRAY
37000: GREATEREQUAL
37001: PUSH
37002: LD_VAR 0 10
37006: PPUSH
37007: LD_INT 2
37009: PPUSH
37010: CALL_OW 275
37014: PUSH
37015: LD_VAR 0 11
37019: PUSH
37020: LD_INT 2
37022: ARRAY
37023: GREATEREQUAL
37024: AND
37025: PUSH
37026: LD_VAR 0 10
37030: PPUSH
37031: LD_INT 3
37033: PPUSH
37034: CALL_OW 275
37038: PUSH
37039: LD_VAR 0 11
37043: PUSH
37044: LD_INT 3
37046: ARRAY
37047: GREATEREQUAL
37048: AND
37049: NOT
37050: IFFALSE 37054
// exit ;
37052: GO 37656
// if GetBType ( depot ) = b_depot then
37054: LD_VAR 0 1
37058: PPUSH
37059: CALL_OW 266
37063: PUSH
37064: LD_INT 0
37066: EQUAL
37067: IFFALSE 37079
// dist := 28 else
37069: LD_ADDR_VAR 0 14
37073: PUSH
37074: LD_INT 28
37076: ST_TO_ADDR
37077: GO 37087
// dist := 36 ;
37079: LD_ADDR_VAR 0 14
37083: PUSH
37084: LD_INT 36
37086: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37087: LD_VAR 0 1
37091: PPUSH
37092: LD_VAR 0 3
37096: PPUSH
37097: LD_VAR 0 4
37101: PPUSH
37102: CALL_OW 297
37106: PUSH
37107: LD_VAR 0 14
37111: GREATER
37112: IFFALSE 37116
// exit ;
37114: GO 37656
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37116: LD_ADDR_VAR 0 12
37120: PUSH
37121: LD_VAR 0 2
37125: PPUSH
37126: LD_VAR 0 3
37130: PPUSH
37131: LD_VAR 0 4
37135: PPUSH
37136: LD_VAR 0 5
37140: PPUSH
37141: LD_VAR 0 1
37145: PPUSH
37146: CALL_OW 248
37150: PPUSH
37151: LD_INT 0
37153: PPUSH
37154: CALL 37661 0 6
37158: ST_TO_ADDR
// if not hexes then
37159: LD_VAR 0 12
37163: NOT
37164: IFFALSE 37168
// exit ;
37166: GO 37656
// hex := GetHexInfo ( x , y ) ;
37168: LD_ADDR_VAR 0 15
37172: PUSH
37173: LD_VAR 0 3
37177: PPUSH
37178: LD_VAR 0 4
37182: PPUSH
37183: CALL_OW 546
37187: ST_TO_ADDR
// if hex [ 1 ] then
37188: LD_VAR 0 15
37192: PUSH
37193: LD_INT 1
37195: ARRAY
37196: IFFALSE 37200
// exit ;
37198: GO 37656
// height := hex [ 2 ] ;
37200: LD_ADDR_VAR 0 13
37204: PUSH
37205: LD_VAR 0 15
37209: PUSH
37210: LD_INT 2
37212: ARRAY
37213: ST_TO_ADDR
// for i = 1 to hexes do
37214: LD_ADDR_VAR 0 7
37218: PUSH
37219: DOUBLE
37220: LD_INT 1
37222: DEC
37223: ST_TO_ADDR
37224: LD_VAR 0 12
37228: PUSH
37229: FOR_TO
37230: IFFALSE 37560
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37232: LD_VAR 0 12
37236: PUSH
37237: LD_VAR 0 7
37241: ARRAY
37242: PUSH
37243: LD_INT 1
37245: ARRAY
37246: PPUSH
37247: LD_VAR 0 12
37251: PUSH
37252: LD_VAR 0 7
37256: ARRAY
37257: PUSH
37258: LD_INT 2
37260: ARRAY
37261: PPUSH
37262: CALL_OW 488
37266: NOT
37267: PUSH
37268: LD_VAR 0 12
37272: PUSH
37273: LD_VAR 0 7
37277: ARRAY
37278: PUSH
37279: LD_INT 1
37281: ARRAY
37282: PPUSH
37283: LD_VAR 0 12
37287: PUSH
37288: LD_VAR 0 7
37292: ARRAY
37293: PUSH
37294: LD_INT 2
37296: ARRAY
37297: PPUSH
37298: CALL_OW 428
37302: PUSH
37303: LD_INT 0
37305: GREATER
37306: OR
37307: PUSH
37308: LD_VAR 0 12
37312: PUSH
37313: LD_VAR 0 7
37317: ARRAY
37318: PUSH
37319: LD_INT 1
37321: ARRAY
37322: PPUSH
37323: LD_VAR 0 12
37327: PUSH
37328: LD_VAR 0 7
37332: ARRAY
37333: PUSH
37334: LD_INT 2
37336: ARRAY
37337: PPUSH
37338: CALL_OW 351
37342: OR
37343: IFFALSE 37349
// exit ;
37345: POP
37346: POP
37347: GO 37656
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37349: LD_ADDR_VAR 0 8
37353: PUSH
37354: LD_VAR 0 12
37358: PUSH
37359: LD_VAR 0 7
37363: ARRAY
37364: PUSH
37365: LD_INT 1
37367: ARRAY
37368: PPUSH
37369: LD_VAR 0 12
37373: PUSH
37374: LD_VAR 0 7
37378: ARRAY
37379: PUSH
37380: LD_INT 2
37382: ARRAY
37383: PPUSH
37384: CALL_OW 546
37388: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37389: LD_VAR 0 8
37393: PUSH
37394: LD_INT 1
37396: ARRAY
37397: PUSH
37398: LD_VAR 0 8
37402: PUSH
37403: LD_INT 2
37405: ARRAY
37406: PUSH
37407: LD_VAR 0 13
37411: PUSH
37412: LD_INT 2
37414: PLUS
37415: GREATER
37416: OR
37417: PUSH
37418: LD_VAR 0 8
37422: PUSH
37423: LD_INT 2
37425: ARRAY
37426: PUSH
37427: LD_VAR 0 13
37431: PUSH
37432: LD_INT 2
37434: MINUS
37435: LESS
37436: OR
37437: PUSH
37438: LD_VAR 0 8
37442: PUSH
37443: LD_INT 3
37445: ARRAY
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 8
37452: PUSH
37453: LD_INT 9
37455: PUSH
37456: LD_INT 10
37458: PUSH
37459: LD_INT 11
37461: PUSH
37462: LD_INT 12
37464: PUSH
37465: LD_INT 13
37467: PUSH
37468: LD_INT 16
37470: PUSH
37471: LD_INT 17
37473: PUSH
37474: LD_INT 18
37476: PUSH
37477: LD_INT 19
37479: PUSH
37480: LD_INT 20
37482: PUSH
37483: LD_INT 21
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: IN
37501: NOT
37502: OR
37503: PUSH
37504: LD_VAR 0 8
37508: PUSH
37509: LD_INT 5
37511: ARRAY
37512: NOT
37513: OR
37514: PUSH
37515: LD_VAR 0 8
37519: PUSH
37520: LD_INT 6
37522: ARRAY
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 7
37532: PUSH
37533: LD_INT 9
37535: PUSH
37536: LD_INT 10
37538: PUSH
37539: LD_INT 11
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: IN
37550: NOT
37551: OR
37552: IFFALSE 37558
// exit ;
37554: POP
37555: POP
37556: GO 37656
// end ;
37558: GO 37229
37560: POP
37561: POP
// side := GetSide ( depot ) ;
37562: LD_ADDR_VAR 0 9
37566: PUSH
37567: LD_VAR 0 1
37571: PPUSH
37572: CALL_OW 255
37576: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37577: LD_VAR 0 9
37581: PPUSH
37582: LD_VAR 0 3
37586: PPUSH
37587: LD_VAR 0 4
37591: PPUSH
37592: LD_INT 20
37594: PPUSH
37595: CALL 30310 0 4
37599: PUSH
37600: LD_INT 4
37602: ARRAY
37603: IFFALSE 37607
// exit ;
37605: GO 37656
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37607: LD_VAR 0 2
37611: PUSH
37612: LD_INT 29
37614: PUSH
37615: LD_INT 30
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: IN
37622: PUSH
37623: LD_VAR 0 3
37627: PPUSH
37628: LD_VAR 0 4
37632: PPUSH
37633: LD_VAR 0 9
37637: PPUSH
37638: CALL_OW 440
37642: NOT
37643: AND
37644: IFFALSE 37648
// exit ;
37646: GO 37656
// result := true ;
37648: LD_ADDR_VAR 0 6
37652: PUSH
37653: LD_INT 1
37655: ST_TO_ADDR
// end ;
37656: LD_VAR 0 6
37660: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37661: LD_INT 0
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
37671: PPUSH
37672: PPUSH
37673: PPUSH
37674: PPUSH
37675: PPUSH
37676: PPUSH
37677: PPUSH
37678: PPUSH
37679: PPUSH
37680: PPUSH
37681: PPUSH
37682: PPUSH
37683: PPUSH
37684: PPUSH
37685: PPUSH
37686: PPUSH
37687: PPUSH
37688: PPUSH
37689: PPUSH
37690: PPUSH
37691: PPUSH
37692: PPUSH
37693: PPUSH
37694: PPUSH
37695: PPUSH
37696: PPUSH
37697: PPUSH
37698: PPUSH
37699: PPUSH
37700: PPUSH
37701: PPUSH
37702: PPUSH
37703: PPUSH
37704: PPUSH
37705: PPUSH
37706: PPUSH
37707: PPUSH
37708: PPUSH
37709: PPUSH
37710: PPUSH
37711: PPUSH
37712: PPUSH
37713: PPUSH
37714: PPUSH
37715: PPUSH
37716: PPUSH
37717: PPUSH
37718: PPUSH
37719: PPUSH
37720: PPUSH
// result = [ ] ;
37721: LD_ADDR_VAR 0 7
37725: PUSH
37726: EMPTY
37727: ST_TO_ADDR
// temp_list = [ ] ;
37728: LD_ADDR_VAR 0 9
37732: PUSH
37733: EMPTY
37734: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37735: LD_VAR 0 4
37739: PUSH
37740: LD_INT 0
37742: PUSH
37743: LD_INT 1
37745: PUSH
37746: LD_INT 2
37748: PUSH
37749: LD_INT 3
37751: PUSH
37752: LD_INT 4
37754: PUSH
37755: LD_INT 5
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: IN
37766: NOT
37767: PUSH
37768: LD_VAR 0 1
37772: PUSH
37773: LD_INT 0
37775: PUSH
37776: LD_INT 1
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: IN
37783: PUSH
37784: LD_VAR 0 5
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: LD_INT 2
37794: PUSH
37795: LD_INT 3
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: IN
37803: NOT
37804: AND
37805: OR
37806: IFFALSE 37810
// exit ;
37808: GO 56201
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37810: LD_VAR 0 1
37814: PUSH
37815: LD_INT 6
37817: PUSH
37818: LD_INT 7
37820: PUSH
37821: LD_INT 8
37823: PUSH
37824: LD_INT 13
37826: PUSH
37827: LD_INT 12
37829: PUSH
37830: LD_INT 15
37832: PUSH
37833: LD_INT 11
37835: PUSH
37836: LD_INT 14
37838: PUSH
37839: LD_INT 10
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: IN
37853: IFFALSE 37863
// btype = b_lab ;
37855: LD_ADDR_VAR 0 1
37859: PUSH
37860: LD_INT 6
37862: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37863: LD_VAR 0 6
37867: PUSH
37868: LD_INT 0
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: LIST
37881: IN
37882: NOT
37883: PUSH
37884: LD_VAR 0 1
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: LD_INT 1
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: LD_INT 3
37900: PUSH
37901: LD_INT 6
37903: PUSH
37904: LD_INT 36
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: LD_INT 5
37912: PUSH
37913: LD_INT 31
37915: PUSH
37916: LD_INT 32
37918: PUSH
37919: LD_INT 33
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: IN
37935: NOT
37936: PUSH
37937: LD_VAR 0 6
37941: PUSH
37942: LD_INT 1
37944: EQUAL
37945: AND
37946: OR
37947: PUSH
37948: LD_VAR 0 1
37952: PUSH
37953: LD_INT 2
37955: PUSH
37956: LD_INT 3
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: IN
37963: NOT
37964: PUSH
37965: LD_VAR 0 6
37969: PUSH
37970: LD_INT 2
37972: EQUAL
37973: AND
37974: OR
37975: IFFALSE 37985
// mode = 0 ;
37977: LD_ADDR_VAR 0 6
37981: PUSH
37982: LD_INT 0
37984: ST_TO_ADDR
// case mode of 0 :
37985: LD_VAR 0 6
37989: PUSH
37990: LD_INT 0
37992: DOUBLE
37993: EQUAL
37994: IFTRUE 37998
37996: GO 49451
37998: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37999: LD_ADDR_VAR 0 11
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 0
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 0
38016: PUSH
38017: LD_INT 1
38019: NEG
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: LD_INT 0
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 1
38037: PUSH
38038: LD_INT 1
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 0
38047: PUSH
38048: LD_INT 1
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: NEG
38058: PUSH
38059: LD_INT 0
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 1
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: NEG
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: NEG
38081: PUSH
38082: LD_INT 2
38084: NEG
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 0
38092: PUSH
38093: LD_INT 2
38095: NEG
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 1
38106: NEG
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 2
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 2
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: PUSH
38146: LD_INT 3
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 0
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: NEG
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38192: LD_ADDR_VAR 0 12
38196: PUSH
38197: LD_INT 0
38199: PUSH
38200: LD_INT 0
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: LD_INT 1
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 1
38250: NEG
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: EMPTY
38256: LIST
38257: LIST
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: LD_INT 1
38265: NEG
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 1
38273: PUSH
38274: LD_INT 1
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 2
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 2
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 1
38304: NEG
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: NEG
38316: PUSH
38317: LD_INT 0
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 2
38338: NEG
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: EMPTY
38344: LIST
38345: LIST
38346: PUSH
38347: LD_INT 3
38349: NEG
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 3
38360: NEG
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38388: LD_ADDR_VAR 0 13
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 2
38511: NEG
38512: PUSH
38513: LD_INT 1
38515: NEG
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: NEG
38524: PUSH
38525: LD_INT 2
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: NEG
38536: PUSH
38537: LD_INT 3
38539: NEG
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: PUSH
38545: LD_INT 3
38547: NEG
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: EMPTY
38554: LIST
38555: LIST
38556: PUSH
38557: LD_INT 3
38559: NEG
38560: PUSH
38561: LD_INT 3
38563: NEG
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38587: LD_ADDR_VAR 0 14
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 0
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: NEG
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: LD_INT 2
38672: NEG
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 2
38683: NEG
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: LD_INT 1
38694: NEG
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 2
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 1
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 3
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 0
38745: PUSH
38746: LD_INT 3
38748: NEG
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 1
38756: PUSH
38757: LD_INT 2
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38783: LD_ADDR_VAR 0 15
38787: PUSH
38788: LD_INT 0
38790: PUSH
38791: LD_INT 0
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: LD_INT 0
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: LD_INT 1
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: LD_INT 0
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 1
38852: NEG
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 1
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 2
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 1
38895: NEG
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 2
38906: NEG
38907: PUSH
38908: LD_INT 0
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 2
38917: NEG
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PUSH
38938: LD_INT 3
38940: PUSH
38941: LD_INT 0
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38976: LD_ADDR_VAR 0 16
38980: PUSH
38981: LD_INT 0
38983: PUSH
38984: LD_INT 0
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 0
38993: PUSH
38994: LD_INT 1
38996: NEG
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: LD_INT 0
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: LD_INT 1
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 1
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: LD_INT 0
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: EMPTY
39052: LIST
39053: LIST
39054: PUSH
39055: LD_INT 1
39057: NEG
39058: PUSH
39059: LD_INT 2
39061: NEG
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: LD_INT 1
39103: NEG
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 2
39111: NEG
39112: PUSH
39113: LD_INT 2
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 3
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 3
39133: PUSH
39134: LD_INT 3
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: PUSH
39144: LD_INT 3
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39169: LD_ADDR_VAR 0 17
39173: PUSH
39174: LD_INT 0
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 1
39189: NEG
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: LD_INT 1
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 0
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: LD_INT 0
39287: PUSH
39288: EMPTY
39289: LIST
39290: LIST
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 2
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 0
39324: PUSH
39325: LD_INT 2
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: LD_INT 1
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 2
39356: NEG
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 2
39368: NEG
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39399: LD_ADDR_VAR 0 18
39403: PUSH
39404: LD_INT 0
39406: PUSH
39407: LD_INT 0
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 0
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 1
39427: PUSH
39428: LD_INT 0
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PUSH
39435: LD_INT 1
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 1
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 0
39492: PUSH
39493: LD_INT 2
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 0
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 1
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 2
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 2
39575: NEG
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: LD_INT 1
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 2
39598: NEG
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39629: LD_ADDR_VAR 0 19
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: LD_INT 0
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: LD_INT 1
39649: NEG
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 0
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 1
39667: PUSH
39668: LD_INT 1
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: LD_INT 0
39722: PUSH
39723: LD_INT 2
39725: NEG
39726: PUSH
39727: EMPTY
39728: LIST
39729: LIST
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: LD_INT 1
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: PUSH
39762: LD_INT 2
39764: PUSH
39765: LD_INT 2
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 0
39784: PUSH
39785: LD_INT 2
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: LD_INT 0
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: LD_INT 1
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: LD_INT 2
39828: NEG
39829: PUSH
39830: LD_INT 2
39832: NEG
39833: PUSH
39834: EMPTY
39835: LIST
39836: LIST
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39859: LD_ADDR_VAR 0 20
39863: PUSH
39864: LD_INT 0
39866: PUSH
39867: LD_INT 0
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 0
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 1
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 0
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: NEG
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 1
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: LD_INT 0
39952: PUSH
39953: LD_INT 2
39955: NEG
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: LD_INT 0
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 2
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: LD_INT 2
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: LD_INT 2
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: LD_INT 1
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: LD_INT 1
40050: NEG
40051: PUSH
40052: EMPTY
40053: LIST
40054: LIST
40055: PUSH
40056: LD_INT 2
40058: NEG
40059: PUSH
40060: LD_INT 2
40062: NEG
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40089: LD_ADDR_VAR 0 21
40093: PUSH
40094: LD_INT 0
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 0
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 1
40117: PUSH
40118: LD_INT 0
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 1
40147: NEG
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 2
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 1
40196: NEG
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 0
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: LD_INT 1
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 2
40224: PUSH
40225: LD_INT 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 0
40244: PUSH
40245: LD_INT 2
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: LD_INT 0
40269: PUSH
40270: EMPTY
40271: LIST
40272: LIST
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: LD_INT 1
40280: NEG
40281: PUSH
40282: EMPTY
40283: LIST
40284: LIST
40285: PUSH
40286: LD_INT 2
40288: NEG
40289: PUSH
40290: LD_INT 2
40292: NEG
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40319: LD_ADDR_VAR 0 22
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 0
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 0
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 1
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 0
40412: PUSH
40413: LD_INT 2
40415: NEG
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: PUSH
40424: LD_INT 1
40426: NEG
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: LD_INT 0
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: LD_INT 1
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: LD_INT 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 2
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 0
40474: PUSH
40475: LD_INT 2
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: LD_INT 1
40488: PUSH
40489: EMPTY
40490: LIST
40491: LIST
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: EMPTY
40501: LIST
40502: LIST
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: LD_INT 2
40522: NEG
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40549: LD_ADDR_VAR 0 23
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: LD_INT 0
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 1
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: LD_INT 1
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: NEG
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 1
40656: NEG
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: PUSH
40665: LD_INT 0
40667: PUSH
40668: EMPTY
40669: LIST
40670: LIST
40671: PUSH
40672: LD_INT 2
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: LD_INT 2
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: LD_INT 2
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 0
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: NEG
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 0
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: NEG
40749: PUSH
40750: LD_INT 2
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: LD_INT 3
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: NEG
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40829: LD_ADDR_VAR 0 24
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: LD_INT 0
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 1
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 0
40860: PUSH
40861: EMPTY
40862: LIST
40863: LIST
40864: PUSH
40865: LD_INT 1
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 0
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: NEG
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: NEG
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 2
41016: NEG
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: LD_INT 2
41032: NEG
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 1
41040: PUSH
41041: LD_INT 2
41043: NEG
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: LD_INT 1
41054: NEG
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 3
41072: PUSH
41073: LD_INT 2
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41105: LD_ADDR_VAR 0 25
41109: PUSH
41110: LD_INT 0
41112: PUSH
41113: LD_INT 0
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: LD_INT 1
41125: NEG
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 1
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 1
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 1
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 1
41209: PUSH
41210: LD_INT 1
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 2
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: LD_INT 1
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: LD_INT 2
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 3
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41379: LD_ADDR_VAR 0 26
41383: PUSH
41384: LD_INT 0
41386: PUSH
41387: LD_INT 0
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: LD_INT 1
41399: NEG
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 1
41407: PUSH
41408: LD_INT 0
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 1
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 1
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 1
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 0
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: LD_INT 1
41483: PUSH
41484: LD_INT 1
41486: NEG
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 2
41494: PUSH
41495: LD_INT 0
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 2
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 0
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: NEG
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 2
41555: NEG
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: LD_INT 2
41578: NEG
41579: PUSH
41580: LD_INT 2
41582: NEG
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 2
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: PUSH
41601: LD_INT 3
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41655: LD_ADDR_VAR 0 27
41659: PUSH
41660: LD_INT 0
41662: PUSH
41663: LD_INT 0
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: LD_INT 1
41675: NEG
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 1
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: LD_INT 1
41696: PUSH
41697: EMPTY
41698: LIST
41699: LIST
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 1
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 1
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 2
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 2
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 2
41790: PUSH
41791: LD_INT 2
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 0
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 2
41831: NEG
41832: PUSH
41833: LD_INT 0
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 2
41842: NEG
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 2
41854: NEG
41855: PUSH
41856: LD_INT 2
41858: NEG
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 1
41866: NEG
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 2
41877: NEG
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 3
41888: NEG
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 3
41900: NEG
41901: PUSH
41902: LD_INT 2
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41935: LD_ADDR_VAR 0 28
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 0
41952: PUSH
41953: LD_INT 1
41955: NEG
41956: PUSH
41957: EMPTY
41958: LIST
41959: LIST
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: PUSH
41971: LD_INT 1
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 1
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 0
42028: PUSH
42029: LD_INT 2
42031: NEG
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PUSH
42048: LD_INT 2
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 2
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 2
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 2
42122: NEG
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 2
42134: NEG
42135: PUSH
42136: LD_INT 2
42138: NEG
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 2
42146: NEG
42147: PUSH
42148: LD_INT 3
42150: NEG
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: PUSH
42156: LD_INT 1
42158: NEG
42159: PUSH
42160: LD_INT 3
42162: NEG
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 3
42170: NEG
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 3
42182: NEG
42183: PUSH
42184: LD_INT 2
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42217: LD_ADDR_VAR 0 29
42221: PUSH
42222: LD_INT 0
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 0
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 0
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 0
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 0
42310: PUSH
42311: LD_INT 2
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 2
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 1
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 0
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: PUSH
42381: LD_INT 2
42383: NEG
42384: PUSH
42385: LD_INT 1
42387: NEG
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: NEG
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 2
42407: NEG
42408: PUSH
42409: LD_INT 3
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: PUSH
42428: LD_INT 3
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: NEG
42451: PUSH
42452: LD_INT 2
42454: PUSH
42455: EMPTY
42456: LIST
42457: LIST
42458: PUSH
42459: LD_INT 3
42461: NEG
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: EMPTY
42468: LIST
42469: LIST
42470: PUSH
42471: EMPTY
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42496: LD_ADDR_VAR 0 30
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 1
42516: NEG
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 0
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 0
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 0
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 0
42589: PUSH
42590: LD_INT 2
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 0
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 1
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 2
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 1
42685: NEG
42686: PUSH
42687: LD_INT 3
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 3
42708: PUSH
42709: LD_INT 2
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: LD_INT 3
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 2
42728: NEG
42729: PUSH
42730: LD_INT 1
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42774: LD_ADDR_VAR 0 31
42778: PUSH
42779: LD_INT 0
42781: PUSH
42782: LD_INT 0
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 0
42791: PUSH
42792: LD_INT 1
42794: NEG
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 1
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: LD_INT 1
42812: PUSH
42813: LD_INT 1
42815: PUSH
42816: EMPTY
42817: LIST
42818: LIST
42819: PUSH
42820: LD_INT 0
42822: PUSH
42823: LD_INT 1
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 1
42832: NEG
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: NEG
42856: PUSH
42857: LD_INT 2
42859: NEG
42860: PUSH
42861: EMPTY
42862: LIST
42863: LIST
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: LD_INT 1
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: PUSH
42899: LD_INT 2
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: PUSH
42906: LD_INT 1
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: NEG
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 2
42951: NEG
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: EMPTY
42958: LIST
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: NEG
42964: PUSH
42965: LD_INT 3
42967: NEG
42968: PUSH
42969: EMPTY
42970: LIST
42971: LIST
42972: PUSH
42973: LD_INT 2
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 1
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 3
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: NEG
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 3
43017: NEG
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43052: LD_ADDR_VAR 0 32
43056: PUSH
43057: LD_INT 0
43059: PUSH
43060: LD_INT 0
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 0
43069: PUSH
43070: LD_INT 1
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 1
43080: PUSH
43081: LD_INT 0
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 1
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 0
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 1
43110: NEG
43111: PUSH
43112: LD_INT 0
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 1
43133: NEG
43134: PUSH
43135: LD_INT 2
43137: NEG
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 2
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 2
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 2
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 2
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 0
43197: PUSH
43198: LD_INT 2
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 1
43207: NEG
43208: PUSH
43209: LD_INT 1
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 2
43218: NEG
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: EMPTY
43236: LIST
43237: LIST
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: LD_INT 3
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 3
43264: PUSH
43265: LD_INT 2
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 3
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: NEG
43285: PUSH
43286: LD_INT 1
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 3
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: NEG
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43330: LD_ADDR_VAR 0 33
43334: PUSH
43335: LD_INT 0
43337: PUSH
43338: LD_INT 0
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 0
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 0
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 1
43368: PUSH
43369: LD_INT 1
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: EMPTY
43383: LIST
43384: LIST
43385: PUSH
43386: LD_INT 1
43388: NEG
43389: PUSH
43390: LD_INT 0
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 1
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 2
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 1
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 2
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 2
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: LD_INT 2
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 1
43474: NEG
43475: PUSH
43476: LD_INT 1
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: LD_INT 0
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 2
43508: NEG
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: LD_INT 3
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: LD_INT 1
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 3
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 2
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 3
43574: NEG
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43609: LD_ADDR_VAR 0 34
43613: PUSH
43614: LD_INT 0
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 1
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: EMPTY
43673: LIST
43674: LIST
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: NEG
43691: PUSH
43692: LD_INT 2
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: LD_INT 2
43705: NEG
43706: PUSH
43707: EMPTY
43708: LIST
43709: LIST
43710: PUSH
43711: LD_INT 1
43713: PUSH
43714: LD_INT 1
43716: NEG
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: PUSH
43725: LD_INT 1
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 1
43744: PUSH
43745: LD_INT 2
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 2
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 2
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 1
43800: NEG
43801: PUSH
43802: LD_INT 3
43804: NEG
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: LD_INT 2
43815: NEG
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 3
43823: PUSH
43824: LD_INT 2
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: EMPTY
43838: LIST
43839: LIST
43840: PUSH
43841: LD_INT 2
43843: NEG
43844: PUSH
43845: LD_INT 1
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 3
43854: NEG
43855: PUSH
43856: LD_INT 1
43858: NEG
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43889: LD_ADDR_VAR 0 35
43893: PUSH
43894: LD_INT 0
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 0
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: PUSH
43935: LD_INT 0
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PUSH
43945: LD_INT 1
43947: NEG
43948: PUSH
43949: LD_INT 0
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 1
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 2
43980: NEG
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: LIST
44000: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44001: LD_ADDR_VAR 0 36
44005: PUSH
44006: LD_INT 0
44008: PUSH
44009: LD_INT 0
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 0
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: LD_INT 0
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: PUSH
44037: LD_INT 1
44039: PUSH
44040: LD_INT 1
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 1
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: PUSH
44095: LD_INT 2
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: LIST
44112: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44113: LD_ADDR_VAR 0 37
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_INT 0
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 1
44151: PUSH
44152: LD_INT 1
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 0
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 1
44171: NEG
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: NEG
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44225: LD_ADDR_VAR 0 38
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 0
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 1
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: LD_INT 1
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 0
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 1
44294: NEG
44295: PUSH
44296: LD_INT 1
44298: NEG
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44337: LD_ADDR_VAR 0 39
44341: PUSH
44342: LD_INT 0
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 0
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 1
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 1
44375: PUSH
44376: LD_INT 1
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 0
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: LD_INT 0
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 1
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 1
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: EMPTY
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44449: LD_ADDR_VAR 0 40
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: LD_INT 1
44477: PUSH
44478: LD_INT 0
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 0
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 1
44507: NEG
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: LD_INT 1
44522: NEG
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 1
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44561: LD_ADDR_VAR 0 41
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: LD_INT 0
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: LD_INT 1
44581: NEG
44582: PUSH
44583: EMPTY
44584: LIST
44585: LIST
44586: PUSH
44587: LD_INT 1
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 0
44609: PUSH
44610: LD_INT 1
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 0
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 1
44642: NEG
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 1
44705: NEG
44706: PUSH
44707: LD_INT 1
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 2
44716: NEG
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 2
44727: NEG
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 2
44739: NEG
44740: PUSH
44741: LD_INT 2
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: LD_INT 3
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 3
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 3
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 3
44804: PUSH
44805: LD_INT 3
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 3
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: NEG
44825: PUSH
44826: LD_INT 1
44828: PUSH
44829: EMPTY
44830: LIST
44831: LIST
44832: PUSH
44833: LD_INT 3
44835: NEG
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 3
44846: NEG
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: PUSH
44856: LD_INT 3
44858: NEG
44859: PUSH
44860: LD_INT 2
44862: NEG
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: LD_INT 3
44870: NEG
44871: PUSH
44872: LD_INT 3
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44911: LD_ADDR_VAR 0 42
44915: PUSH
44916: LD_INT 0
44918: PUSH
44919: LD_INT 0
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 0
44928: PUSH
44929: LD_INT 1
44931: NEG
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: LD_INT 0
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 0
44959: PUSH
44960: LD_INT 1
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 1
44980: NEG
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 1
44992: NEG
44993: PUSH
44994: LD_INT 2
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 0
45004: PUSH
45005: LD_INT 2
45007: NEG
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 1
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 2
45026: PUSH
45027: LD_INT 1
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 2
45036: PUSH
45037: LD_INT 2
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 0
45056: PUSH
45057: LD_INT 2
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 1
45066: NEG
45067: PUSH
45068: LD_INT 1
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 2
45077: NEG
45078: PUSH
45079: LD_INT 1
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 2
45089: NEG
45090: PUSH
45091: LD_INT 2
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 3
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: LD_INT 3
45128: NEG
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 3
45147: PUSH
45148: LD_INT 2
45150: PUSH
45151: EMPTY
45152: LIST
45153: LIST
45154: PUSH
45155: LD_INT 3
45157: PUSH
45158: LD_INT 3
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: PUSH
45165: LD_INT 2
45167: PUSH
45168: LD_INT 3
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 1
45177: PUSH
45178: LD_INT 3
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: LD_INT 3
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: NEG
45198: PUSH
45199: LD_INT 2
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 3
45208: NEG
45209: PUSH
45210: LD_INT 2
45212: NEG
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 3
45220: NEG
45221: PUSH
45222: LD_INT 3
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45261: LD_ADDR_VAR 0 43
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 0
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: LD_INT 0
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: NEG
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 2
45346: NEG
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: LD_INT 2
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: LD_INT 1
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 1
45450: NEG
45451: PUSH
45452: LD_INT 3
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 0
45462: PUSH
45463: LD_INT 3
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: PUSH
45474: LD_INT 2
45476: NEG
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 2
45484: PUSH
45485: LD_INT 1
45487: NEG
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PUSH
45493: LD_INT 3
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 3
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: PUSH
45516: LD_INT 3
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 0
45525: PUSH
45526: LD_INT 3
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 2
45546: NEG
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 3
45557: NEG
45558: PUSH
45559: LD_INT 0
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: NEG
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45609: LD_ADDR_VAR 0 44
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 0
45626: PUSH
45627: LD_INT 1
45629: NEG
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 1
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 0
45657: PUSH
45658: LD_INT 1
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: NEG
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 1
45678: NEG
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 2
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: LD_INT 1
45705: NEG
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 2
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 1
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 1
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: EMPTY
45748: LIST
45749: LIST
45750: PUSH
45751: LD_INT 1
45753: NEG
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 2
45764: NEG
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 2
45775: NEG
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 3
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 3
45822: PUSH
45823: LD_INT 0
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PUSH
45830: LD_INT 3
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 3
45842: PUSH
45843: LD_INT 2
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 3
45852: PUSH
45853: LD_INT 3
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: NEG
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 3
45883: NEG
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 3
45894: NEG
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 3
45906: NEG
45907: PUSH
45908: LD_INT 2
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 3
45918: NEG
45919: PUSH
45920: LD_INT 3
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45959: LD_ADDR_VAR 0 45
45963: PUSH
45964: LD_INT 0
45966: PUSH
45967: LD_INT 0
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 0
45976: PUSH
45977: LD_INT 1
45979: NEG
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PUSH
45985: LD_INT 1
45987: PUSH
45988: LD_INT 0
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 1
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 1
46017: NEG
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: NEG
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: EMPTY
46035: LIST
46036: LIST
46037: PUSH
46038: LD_INT 1
46040: NEG
46041: PUSH
46042: LD_INT 2
46044: NEG
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 1
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 2
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 2
46084: PUSH
46085: LD_INT 2
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: LD_INT 2
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: LD_INT 1
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 2
46125: NEG
46126: PUSH
46127: LD_INT 1
46129: NEG
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: NEG
46138: PUSH
46139: LD_INT 2
46141: NEG
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: LD_INT 3
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: LD_INT 3
46165: NEG
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: LD_INT 3
46176: NEG
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 3
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 3
46205: PUSH
46206: LD_INT 3
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 3
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: PUSH
46226: LD_INT 3
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: NEG
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 3
46256: NEG
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: LD_INT 3
46268: NEG
46269: PUSH
46270: LD_INT 3
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: LIST
46304: LIST
46305: LIST
46306: LIST
46307: LIST
46308: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46309: LD_ADDR_VAR 0 46
46313: PUSH
46314: LD_INT 0
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 0
46326: PUSH
46327: LD_INT 1
46329: NEG
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 0
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 1
46367: NEG
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 1
46378: NEG
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 0
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 1
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 2
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 3
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: PUSH
46530: LD_INT 2
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 3
46553: PUSH
46554: LD_INT 1
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 1
46563: PUSH
46564: LD_INT 3
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 3
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: LD_INT 2
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 2
46594: NEG
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: NEG
46606: PUSH
46607: LD_INT 0
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 3
46616: NEG
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: LIST
46630: LIST
46631: LIST
46632: LIST
46633: LIST
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: LIST
46643: LIST
46644: LIST
46645: LIST
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46657: LD_ADDR_VAR 0 47
46661: PUSH
46662: LD_INT 0
46664: PUSH
46665: LD_INT 0
46667: PUSH
46668: EMPTY
46669: LIST
46670: LIST
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: LD_INT 1
46677: NEG
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: LD_INT 0
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 1
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 1
46726: NEG
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 2
46742: NEG
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 0
46750: PUSH
46751: LD_INT 2
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: NEG
46785: PUSH
46786: LD_INT 2
46788: NEG
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46808: LD_ADDR_VAR 0 48
46812: PUSH
46813: LD_INT 0
46815: PUSH
46816: LD_INT 0
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: LD_INT 1
46828: NEG
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 1
46836: PUSH
46837: LD_INT 0
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 1
46846: PUSH
46847: LD_INT 1
46849: PUSH
46850: EMPTY
46851: LIST
46852: LIST
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: LD_INT 1
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 1
46881: NEG
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 0
46901: PUSH
46902: LD_INT 2
46904: NEG
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 2
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 2
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: LIST
46948: LIST
46949: LIST
46950: LIST
46951: LIST
46952: LIST
46953: LIST
46954: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46955: LD_ADDR_VAR 0 49
46959: PUSH
46960: LD_INT 0
46962: PUSH
46963: LD_INT 0
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 1
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 1
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: NEG
47025: PUSH
47026: LD_INT 1
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: LD_INT 2
47047: PUSH
47048: LD_INT 0
47050: PUSH
47051: EMPTY
47052: LIST
47053: LIST
47054: PUSH
47055: LD_INT 2
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 2
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 1
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: LIST
47091: LIST
47092: LIST
47093: LIST
47094: LIST
47095: LIST
47096: LIST
47097: LIST
47098: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47099: LD_ADDR_VAR 0 50
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 0
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 1
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: NEG
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: LD_INT 1
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 2
47190: PUSH
47191: LD_INT 2
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: LD_INT 2
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 0
47210: PUSH
47211: LD_INT 2
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47243: LD_ADDR_VAR 0 51
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 1
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 1
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: NEG
47302: PUSH
47303: LD_INT 0
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 1
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 2
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: NEG
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47390: LD_ADDR_VAR 0 52
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: LD_INT 1
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: LD_INT 1
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 1
47459: NEG
47460: PUSH
47461: LD_INT 1
47463: NEG
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: LD_INT 2
47475: NEG
47476: PUSH
47477: EMPTY
47478: LIST
47479: LIST
47480: PUSH
47481: LD_INT 1
47483: NEG
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: LD_INT 2
47494: NEG
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 2
47505: NEG
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 2
47517: NEG
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47541: LD_ADDR_VAR 0 53
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 0
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 0
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 0
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 1
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 2
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 0
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 1
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 2
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 0
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: LD_INT 1
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 2
47728: NEG
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 2
47740: NEG
47741: PUSH
47742: LD_INT 2
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47771: LD_ADDR_VAR 0 54
47775: PUSH
47776: LD_INT 0
47778: PUSH
47779: LD_INT 0
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 0
47788: PUSH
47789: LD_INT 1
47791: NEG
47792: PUSH
47793: EMPTY
47794: LIST
47795: LIST
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: LD_INT 0
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 0
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 1
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 2
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 2
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 0
47926: PUSH
47927: LD_INT 2
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: NEG
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 2
47970: NEG
47971: PUSH
47972: LD_INT 2
47974: NEG
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48001: LD_ADDR_VAR 0 55
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 0
48018: PUSH
48019: LD_INT 1
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: PUSH
48030: LD_INT 0
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 2
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: LD_INT 0
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: LD_INT 2
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 2
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: LD_INT 2
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 2
48200: NEG
48201: PUSH
48202: LD_INT 2
48204: NEG
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48231: LD_ADDR_VAR 0 56
48235: PUSH
48236: LD_INT 0
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 1
48269: PUSH
48270: LD_INT 1
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 1
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 0
48324: PUSH
48325: LD_INT 2
48327: NEG
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: LD_INT 0
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: LD_INT 1
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: LD_INT 2
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 2
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 0
48386: PUSH
48387: LD_INT 2
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 2
48430: NEG
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48461: LD_ADDR_VAR 0 57
48465: PUSH
48466: LD_INT 0
48468: PUSH
48469: LD_INT 0
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: LD_INT 1
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 0
48554: PUSH
48555: LD_INT 2
48557: NEG
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: LD_INT 0
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 2
48596: PUSH
48597: LD_INT 2
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 2
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: LD_INT 1
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: LD_INT 0
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: NEG
48653: PUSH
48654: EMPTY
48655: LIST
48656: LIST
48657: PUSH
48658: LD_INT 2
48660: NEG
48661: PUSH
48662: LD_INT 2
48664: NEG
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48691: LD_ADDR_VAR 0 58
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 0
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: PUSH
48720: LD_INT 0
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 1
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 1
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 1
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 2
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: NEG
48857: PUSH
48858: LD_INT 1
48860: PUSH
48861: EMPTY
48862: LIST
48863: LIST
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: NEG
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: LD_INT 2
48894: NEG
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48921: LD_ADDR_VAR 0 59
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 0
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 0
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: LD_INT 0
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 1
48990: NEG
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49009: LD_ADDR_VAR 0 60
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: LD_INT 1
49029: NEG
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: EMPTY
49052: LIST
49053: LIST
49054: PUSH
49055: LD_INT 0
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49097: LD_ADDR_VAR 0 61
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 1
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 1
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: LD_INT 0
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 1
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49185: LD_ADDR_VAR 0 62
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 0
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 0
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: LIST
49272: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49273: LD_ADDR_VAR 0 63
49277: PUSH
49278: LD_INT 0
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 1
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: NEG
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49361: LD_ADDR_VAR 0 64
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 0
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 0
49378: PUSH
49379: LD_INT 1
49381: NEG
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 0
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 1
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 1
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: ST_TO_ADDR
// end ; 1 :
49449: GO 55346
49451: LD_INT 1
49453: DOUBLE
49454: EQUAL
49455: IFTRUE 49459
49457: GO 52082
49459: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49460: LD_ADDR_VAR 0 11
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49504: LD_ADDR_VAR 0 12
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49545: LD_ADDR_VAR 0 13
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49585: LD_ADDR_VAR 0 14
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49626: LD_ADDR_VAR 0 15
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49670: LD_ADDR_VAR 0 16
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49716: LD_ADDR_VAR 0 17
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: LD_INT 3
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 2
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49760: LD_ADDR_VAR 0 18
49764: PUSH
49765: LD_INT 2
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 3
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 3
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49801: LD_ADDR_VAR 0 19
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 3
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 2
49828: PUSH
49829: LD_INT 3
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49841: LD_ADDR_VAR 0 20
49845: PUSH
49846: LD_INT 1
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 0
49858: PUSH
49859: LD_INT 3
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49882: LD_ADDR_VAR 0 21
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 3
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49926: LD_ADDR_VAR 0 22
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49972: LD_ADDR_VAR 0 23
49976: PUSH
49977: LD_INT 0
49979: PUSH
49980: LD_INT 3
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 1
49990: NEG
49991: PUSH
49992: LD_INT 4
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: LIST
50015: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50016: LD_ADDR_VAR 0 24
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: LD_INT 0
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 3
50033: PUSH
50034: LD_INT 1
50036: NEG
50037: PUSH
50038: EMPTY
50039: LIST
50040: LIST
50041: PUSH
50042: LD_INT 4
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: LIST
50056: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50057: LD_ADDR_VAR 0 25
50061: PUSH
50062: LD_INT 3
50064: PUSH
50065: LD_INT 3
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 4
50074: PUSH
50075: LD_INT 3
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 3
50084: PUSH
50085: LD_INT 4
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: LIST
50096: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50097: LD_ADDR_VAR 0 26
50101: PUSH
50102: LD_INT 0
50104: PUSH
50105: LD_INT 3
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 1
50114: PUSH
50115: LD_INT 4
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 3
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: LIST
50137: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50138: LD_ADDR_VAR 0 27
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: LD_INT 0
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: LD_INT 1
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 4
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: LIST
50181: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50182: LD_ADDR_VAR 0 28
50186: PUSH
50187: LD_INT 3
50189: NEG
50190: PUSH
50191: LD_INT 3
50193: NEG
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 3
50201: NEG
50202: PUSH
50203: LD_INT 4
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 4
50213: NEG
50214: PUSH
50215: LD_INT 3
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: LIST
50227: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50228: LD_ADDR_VAR 0 29
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: LD_INT 3
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: LD_INT 3
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: PUSH
50259: LD_INT 2
50261: NEG
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 4
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 4
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 3
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 5
50307: NEG
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 0
50315: PUSH
50316: LD_INT 5
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: LD_INT 4
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 6
50341: NEG
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 0
50349: PUSH
50350: LD_INT 6
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: LD_INT 5
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50383: LD_ADDR_VAR 0 30
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: LD_INT 1
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 4
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 4
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 5
50463: PUSH
50464: LD_INT 0
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: LD_INT 5
50473: PUSH
50474: LD_INT 1
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 5
50483: PUSH
50484: LD_INT 1
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 6
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 6
50504: PUSH
50505: LD_INT 1
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50526: LD_ADDR_VAR 0 31
50530: PUSH
50531: LD_INT 3
50533: PUSH
50534: LD_INT 2
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: PUSH
50554: LD_INT 3
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 4
50563: PUSH
50564: LD_INT 3
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 4
50573: PUSH
50574: LD_INT 4
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: LD_INT 4
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 5
50593: PUSH
50594: LD_INT 4
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 5
50603: PUSH
50604: LD_INT 5
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: PUSH
50611: LD_INT 4
50613: PUSH
50614: LD_INT 5
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 6
50623: PUSH
50624: LD_INT 5
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 6
50633: PUSH
50634: LD_INT 6
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 5
50643: PUSH
50644: LD_INT 6
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50665: LD_ADDR_VAR 0 32
50669: PUSH
50670: LD_INT 1
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 0
50682: PUSH
50683: LD_INT 3
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: NEG
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 1
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 0
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: LD_INT 3
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 1
50734: PUSH
50735: LD_INT 5
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: PUSH
50742: LD_INT 0
50744: PUSH
50745: LD_INT 5
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 1
50754: NEG
50755: PUSH
50756: LD_INT 4
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 6
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: PUSH
50773: LD_INT 0
50775: PUSH
50776: LD_INT 6
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 1
50785: NEG
50786: PUSH
50787: LD_INT 5
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: EMPTY
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50808: LD_ADDR_VAR 0 33
50812: PUSH
50813: LD_INT 2
50815: NEG
50816: PUSH
50817: LD_INT 1
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 3
50826: NEG
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 3
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 3
50849: NEG
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 4
50860: NEG
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 4
50871: NEG
50872: PUSH
50873: LD_INT 1
50875: NEG
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 4
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 5
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 5
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: NEG
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 6
50928: NEG
50929: PUSH
50930: LD_INT 0
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 6
50939: NEG
50940: PUSH
50941: LD_INT 1
50943: NEG
50944: PUSH
50945: EMPTY
50946: LIST
50947: LIST
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50963: LD_ADDR_VAR 0 34
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 3
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 3
50994: NEG
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: LD_INT 4
51010: NEG
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: LD_INT 3
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 4
51030: NEG
51031: PUSH
51032: LD_INT 4
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 4
51042: NEG
51043: PUSH
51044: LD_INT 5
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 5
51054: NEG
51055: PUSH
51056: LD_INT 4
51058: NEG
51059: PUSH
51060: EMPTY
51061: LIST
51062: LIST
51063: PUSH
51064: LD_INT 5
51066: NEG
51067: PUSH
51068: LD_INT 5
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 5
51078: NEG
51079: PUSH
51080: LD_INT 6
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 6
51090: NEG
51091: PUSH
51092: LD_INT 5
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 6
51102: NEG
51103: PUSH
51104: LD_INT 6
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51126: LD_ADDR_VAR 0 41
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 3
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: LIST
51169: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51170: LD_ADDR_VAR 0 42
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51211: LD_ADDR_VAR 0 43
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: LD_INT 3
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: LIST
51250: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51251: LD_ADDR_VAR 0 44
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 2
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: LIST
51291: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51292: LD_ADDR_VAR 0 45
51296: PUSH
51297: LD_INT 2
51299: NEG
51300: PUSH
51301: LD_INT 0
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: NEG
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 3
51321: NEG
51322: PUSH
51323: LD_INT 1
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: LIST
51335: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51336: LD_ADDR_VAR 0 46
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 3
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: LD_INT 2
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: LIST
51381: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51382: LD_ADDR_VAR 0 47
51386: PUSH
51387: LD_INT 2
51389: NEG
51390: PUSH
51391: LD_INT 3
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51415: LD_ADDR_VAR 0 48
51419: PUSH
51420: LD_INT 1
51422: PUSH
51423: LD_INT 2
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51446: LD_ADDR_VAR 0 49
51450: PUSH
51451: LD_INT 3
51453: PUSH
51454: LD_INT 1
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51475: LD_ADDR_VAR 0 50
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51504: LD_ADDR_VAR 0 51
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 1
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51535: LD_ADDR_VAR 0 52
51539: PUSH
51540: LD_INT 3
51542: NEG
51543: PUSH
51544: LD_INT 1
51546: NEG
51547: PUSH
51548: EMPTY
51549: LIST
51550: LIST
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: LD_INT 2
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51568: LD_ADDR_VAR 0 53
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 3
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 3
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51612: LD_ADDR_VAR 0 54
51616: PUSH
51617: LD_INT 2
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 3
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 3
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51653: LD_ADDR_VAR 0 55
51657: PUSH
51658: LD_INT 3
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 3
51670: PUSH
51671: LD_INT 3
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 2
51680: PUSH
51681: LD_INT 3
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: LIST
51692: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51693: LD_ADDR_VAR 0 56
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 3
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 3
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 2
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51734: LD_ADDR_VAR 0 57
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 3
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 3
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51778: LD_ADDR_VAR 0 58
51782: PUSH
51783: LD_INT 2
51785: NEG
51786: PUSH
51787: LD_INT 3
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 3
51797: NEG
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 3
51809: NEG
51810: PUSH
51811: LD_INT 3
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51824: LD_ADDR_VAR 0 59
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 2
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 0
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: LIST
51867: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51868: LD_ADDR_VAR 0 60
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: LD_INT 1
51878: NEG
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 1
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: LIST
51908: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51909: LD_ADDR_VAR 0 61
51913: PUSH
51914: LD_INT 2
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 2
51926: PUSH
51927: LD_INT 2
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: PUSH
51937: LD_INT 2
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51949: LD_ADDR_VAR 0 62
51953: PUSH
51954: LD_INT 1
51956: PUSH
51957: LD_INT 2
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: PUSH
51964: LD_INT 0
51966: PUSH
51967: LD_INT 2
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 1
51976: NEG
51977: PUSH
51978: LD_INT 1
51980: PUSH
51981: EMPTY
51982: LIST
51983: LIST
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: LIST
51989: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51990: LD_ADDR_VAR 0 63
51994: PUSH
51995: LD_INT 1
51997: NEG
51998: PUSH
51999: LD_INT 1
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: NEG
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: LIST
52033: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52034: LD_ADDR_VAR 0 64
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: LD_INT 2
52045: NEG
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 2
52053: NEG
52054: PUSH
52055: LD_INT 1
52057: NEG
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 2
52065: NEG
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: EMPTY
52076: LIST
52077: LIST
52078: LIST
52079: ST_TO_ADDR
// end ; 2 :
52080: GO 55346
52082: LD_INT 2
52084: DOUBLE
52085: EQUAL
52086: IFTRUE 52090
52088: GO 55345
52090: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52091: LD_ADDR_VAR 0 29
52095: PUSH
52096: LD_INT 4
52098: PUSH
52099: LD_INT 0
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 5
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 5
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 4
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 3
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 3
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: PUSH
52171: LD_INT 2
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 5
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 3
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 4
52211: PUSH
52212: LD_INT 3
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 4
52221: PUSH
52222: LD_INT 4
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: LD_INT 4
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 2
52241: PUSH
52242: LD_INT 3
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: PUSH
52252: LD_INT 2
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: PUSH
52262: LD_INT 2
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: LD_INT 4
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 4
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 0
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: LD_INT 4
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 1
52311: PUSH
52312: LD_INT 5
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 5
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: NEG
52332: PUSH
52333: LD_INT 4
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: NEG
52343: PUSH
52344: LD_INT 3
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: LD_INT 5
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: LD_INT 3
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: NEG
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 3
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: PUSH
52413: EMPTY
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 3
52419: NEG
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 4
52430: NEG
52431: PUSH
52432: LD_INT 0
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 4
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 4
52453: NEG
52454: PUSH
52455: LD_INT 2
52457: NEG
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: NEG
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: PUSH
52474: LD_INT 4
52476: NEG
52477: PUSH
52478: LD_INT 4
52480: NEG
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 4
52488: NEG
52489: PUSH
52490: LD_INT 5
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: LD_INT 4
52504: NEG
52505: PUSH
52506: EMPTY
52507: LIST
52508: LIST
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 4
52524: NEG
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 5
52536: NEG
52537: PUSH
52538: LD_INT 4
52540: NEG
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 5
52548: NEG
52549: PUSH
52550: LD_INT 5
52552: NEG
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: LD_INT 5
52564: NEG
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 5
52572: NEG
52573: PUSH
52574: LD_INT 3
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: LIST
52605: LIST
52606: LIST
52607: LIST
52608: LIST
52609: LIST
52610: LIST
52611: LIST
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52629: LD_ADDR_VAR 0 30
52633: PUSH
52634: LD_INT 4
52636: PUSH
52637: LD_INT 4
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 4
52646: PUSH
52647: LD_INT 3
52649: PUSH
52650: EMPTY
52651: LIST
52652: LIST
52653: PUSH
52654: LD_INT 5
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: EMPTY
52661: LIST
52662: LIST
52663: PUSH
52664: LD_INT 5
52666: PUSH
52667: LD_INT 5
52669: PUSH
52670: EMPTY
52671: LIST
52672: LIST
52673: PUSH
52674: LD_INT 4
52676: PUSH
52677: LD_INT 5
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 3
52686: PUSH
52687: LD_INT 4
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 5
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: LD_INT 5
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 3
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 0
52736: PUSH
52737: LD_INT 2
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 1
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 4
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 4
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 2
52798: PUSH
52799: LD_INT 4
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 2
52808: NEG
52809: PUSH
52810: LD_INT 2
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 4
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 4
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 5
52875: NEG
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 5
52886: NEG
52887: PUSH
52888: LD_INT 1
52890: NEG
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 5
52898: NEG
52899: PUSH
52900: LD_INT 2
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 3
52910: NEG
52911: PUSH
52912: LD_INT 2
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 3
52933: NEG
52934: PUSH
52935: LD_INT 4
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 3
52949: NEG
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: LD_INT 2
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 3
52969: NEG
52970: PUSH
52971: LD_INT 2
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 4
52981: NEG
52982: PUSH
52983: LD_INT 3
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 4
52993: NEG
52994: PUSH
52995: LD_INT 4
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: NEG
53006: PUSH
53007: LD_INT 4
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 4
53017: NEG
53018: PUSH
53019: LD_INT 2
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 0
53029: PUSH
53030: LD_INT 4
53032: NEG
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 5
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 4
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: LD_INT 3
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 4
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: LD_INT 5
53100: NEG
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: LD_INT 5
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53176: LD_ADDR_VAR 0 31
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 4
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 0
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 4
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 5
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 5
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 1
53233: NEG
53234: PUSH
53235: LD_INT 4
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: LD_INT 3
53248: PUSH
53249: EMPTY
53250: LIST
53251: LIST
53252: PUSH
53253: LD_INT 2
53255: PUSH
53256: LD_INT 5
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 3
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 3
53276: NEG
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 3
53287: NEG
53288: PUSH
53289: LD_INT 1
53291: NEG
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: NEG
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 3
53321: NEG
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 4
53332: NEG
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 4
53343: NEG
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 4
53355: NEG
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 4
53378: NEG
53379: PUSH
53380: LD_INT 4
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: LD_INT 5
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: NEG
53403: PUSH
53404: LD_INT 4
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: NEG
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 4
53426: NEG
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 5
53438: NEG
53439: PUSH
53440: LD_INT 4
53442: NEG
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 5
53450: NEG
53451: PUSH
53452: LD_INT 5
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 5
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 5
53474: NEG
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 3
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: LD_INT 4
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: LD_INT 2
53522: NEG
53523: PUSH
53524: EMPTY
53525: LIST
53526: LIST
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: LD_INT 2
53533: NEG
53534: PUSH
53535: EMPTY
53536: LIST
53537: LIST
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: LD_INT 3
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 4
53557: NEG
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: NEG
53577: PUSH
53578: LD_INT 4
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 4
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 1
53601: NEG
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 5
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 5
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 4
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 5
53671: PUSH
53672: LD_INT 2
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53726: LD_ADDR_VAR 0 32
53730: PUSH
53731: LD_INT 4
53733: NEG
53734: PUSH
53735: LD_INT 0
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 4
53744: NEG
53745: PUSH
53746: LD_INT 1
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: NEG
53768: PUSH
53769: LD_INT 1
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 4
53778: NEG
53779: PUSH
53780: LD_INT 1
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 5
53789: NEG
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: EMPTY
53795: LIST
53796: LIST
53797: PUSH
53798: LD_INT 5
53800: NEG
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 5
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: LD_INT 3
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 3
53847: NEG
53848: PUSH
53849: LD_INT 4
53851: NEG
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 2
53859: NEG
53860: PUSH
53861: LD_INT 3
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: LD_INT 2
53875: NEG
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: LD_INT 2
53887: NEG
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 4
53895: NEG
53896: PUSH
53897: LD_INT 3
53899: NEG
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 4
53907: NEG
53908: PUSH
53909: LD_INT 4
53911: NEG
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 4
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 4
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 0
53943: PUSH
53944: LD_INT 4
53946: NEG
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 0
53954: PUSH
53955: LD_INT 5
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: LD_INT 4
53968: NEG
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 3
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: LD_INT 4
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 1
54010: NEG
54011: PUSH
54012: LD_INT 5
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 2
54022: PUSH
54023: LD_INT 3
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 2
54033: NEG
54034: PUSH
54035: LD_INT 5
54037: NEG
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 3
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 3
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 4
54066: PUSH
54067: LD_INT 0
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 4
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: EMPTY
54112: LIST
54113: LIST
54114: PUSH
54115: LD_INT 2
54117: PUSH
54118: LD_INT 2
54120: NEG
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: LD_INT 4
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 4
54138: PUSH
54139: LD_INT 4
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: LD_INT 3
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 5
54158: PUSH
54159: LD_INT 4
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 5
54168: PUSH
54169: LD_INT 5
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 4
54178: PUSH
54179: LD_INT 5
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 3
54188: PUSH
54189: LD_INT 4
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: PUSH
54199: LD_INT 3
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 5
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: EMPTY
54213: LIST
54214: LIST
54215: PUSH
54216: LD_INT 3
54218: PUSH
54219: LD_INT 5
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54273: LD_ADDR_VAR 0 33
54277: PUSH
54278: LD_INT 4
54280: NEG
54281: PUSH
54282: LD_INT 4
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 4
54292: NEG
54293: PUSH
54294: LD_INT 5
54296: NEG
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: PUSH
54302: LD_INT 3
54304: NEG
54305: PUSH
54306: LD_INT 4
54308: NEG
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 3
54316: NEG
54317: PUSH
54318: LD_INT 3
54320: NEG
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 4
54328: NEG
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 5
54340: NEG
54341: PUSH
54342: LD_INT 4
54344: NEG
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: PUSH
54350: LD_INT 5
54352: NEG
54353: PUSH
54354: LD_INT 5
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 3
54364: NEG
54365: PUSH
54366: LD_INT 5
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 5
54376: NEG
54377: PUSH
54378: LD_INT 3
54380: NEG
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 0
54388: PUSH
54389: LD_INT 3
54391: NEG
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 1
54410: PUSH
54411: LD_INT 3
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 2
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 2
54435: NEG
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 3
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 1
54455: NEG
54456: PUSH
54457: LD_INT 4
54459: NEG
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: LD_INT 4
54482: NEG
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 4
54490: PUSH
54491: LD_INT 0
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: LD_INT 1
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 5
54511: PUSH
54512: LD_INT 0
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 4
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: PUSH
54552: LD_INT 1
54554: NEG
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 3
54562: PUSH
54563: LD_INT 2
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 5
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: LD_INT 3
54586: PUSH
54587: EMPTY
54588: LIST
54589: LIST
54590: PUSH
54591: LD_INT 3
54593: PUSH
54594: LD_INT 2
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 4
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 4
54613: PUSH
54614: LD_INT 4
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 3
54623: PUSH
54624: LD_INT 4
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: PUSH
54634: LD_INT 3
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: PUSH
54641: LD_INT 2
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 4
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: PUSH
54664: LD_INT 4
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 0
54673: PUSH
54674: LD_INT 4
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 1
54693: PUSH
54694: LD_INT 4
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 1
54703: PUSH
54704: LD_INT 5
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: LD_INT 5
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: NEG
54724: PUSH
54725: LD_INT 4
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 3
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 5
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 2
54755: NEG
54756: PUSH
54757: LD_INT 3
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54811: LD_ADDR_VAR 0 34
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: LD_INT 4
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 5
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: LD_INT 3
54854: NEG
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 3
54865: NEG
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: LD_INT 4
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: LD_INT 5
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 2
54897: PUSH
54898: LD_INT 3
54900: NEG
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: LD_INT 5
54912: NEG
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 3
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 3
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 4
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 4
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 3
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 2
54971: PUSH
54972: LD_INT 0
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 2
54992: PUSH
54993: LD_INT 2
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 4
55003: PUSH
55004: LD_INT 2
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 4
55013: PUSH
55014: LD_INT 4
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: EMPTY
55028: LIST
55029: LIST
55030: PUSH
55031: LD_INT 5
55033: PUSH
55034: LD_INT 4
55036: PUSH
55037: EMPTY
55038: LIST
55039: LIST
55040: PUSH
55041: LD_INT 5
55043: PUSH
55044: LD_INT 5
55046: PUSH
55047: EMPTY
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 4
55053: PUSH
55054: LD_INT 5
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 3
55063: PUSH
55064: LD_INT 4
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 3
55073: PUSH
55074: LD_INT 3
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 5
55083: PUSH
55084: LD_INT 3
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 3
55093: PUSH
55094: LD_INT 5
55096: PUSH
55097: EMPTY
55098: LIST
55099: LIST
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: LD_INT 3
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 0
55113: PUSH
55114: LD_INT 2
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: PUSH
55124: LD_INT 3
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 4
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 4
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 1
55153: NEG
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: NEG
55165: PUSH
55166: LD_INT 2
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: LD_INT 4
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 4
55196: NEG
55197: PUSH
55198: LD_INT 0
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 4
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 3
55219: NEG
55220: PUSH
55221: LD_INT 0
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: LD_INT 1
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 4
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 5
55252: NEG
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 5
55263: NEG
55264: PUSH
55265: LD_INT 1
55267: NEG
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: NEG
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 3
55287: NEG
55288: PUSH
55289: LD_INT 2
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: ST_TO_ADDR
// end ; end ;
55343: GO 55346
55345: POP
// case btype of b_depot , b_warehouse :
55346: LD_VAR 0 1
55350: PUSH
55351: LD_INT 0
55353: DOUBLE
55354: EQUAL
55355: IFTRUE 55365
55357: LD_INT 1
55359: DOUBLE
55360: EQUAL
55361: IFTRUE 55365
55363: GO 55566
55365: POP
// case nation of nation_american :
55366: LD_VAR 0 5
55370: PUSH
55371: LD_INT 1
55373: DOUBLE
55374: EQUAL
55375: IFTRUE 55379
55377: GO 55435
55379: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55380: LD_ADDR_VAR 0 9
55384: PUSH
55385: LD_VAR 0 11
55389: PUSH
55390: LD_VAR 0 12
55394: PUSH
55395: LD_VAR 0 13
55399: PUSH
55400: LD_VAR 0 14
55404: PUSH
55405: LD_VAR 0 15
55409: PUSH
55410: LD_VAR 0 16
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: PUSH
55423: LD_VAR 0 4
55427: PUSH
55428: LD_INT 1
55430: PLUS
55431: ARRAY
55432: ST_TO_ADDR
55433: GO 55564
55435: LD_INT 2
55437: DOUBLE
55438: EQUAL
55439: IFTRUE 55443
55441: GO 55499
55443: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55444: LD_ADDR_VAR 0 9
55448: PUSH
55449: LD_VAR 0 17
55453: PUSH
55454: LD_VAR 0 18
55458: PUSH
55459: LD_VAR 0 19
55463: PUSH
55464: LD_VAR 0 20
55468: PUSH
55469: LD_VAR 0 21
55473: PUSH
55474: LD_VAR 0 22
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: PUSH
55487: LD_VAR 0 4
55491: PUSH
55492: LD_INT 1
55494: PLUS
55495: ARRAY
55496: ST_TO_ADDR
55497: GO 55564
55499: LD_INT 3
55501: DOUBLE
55502: EQUAL
55503: IFTRUE 55507
55505: GO 55563
55507: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55508: LD_ADDR_VAR 0 9
55512: PUSH
55513: LD_VAR 0 23
55517: PUSH
55518: LD_VAR 0 24
55522: PUSH
55523: LD_VAR 0 25
55527: PUSH
55528: LD_VAR 0 26
55532: PUSH
55533: LD_VAR 0 27
55537: PUSH
55538: LD_VAR 0 28
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: PUSH
55551: LD_VAR 0 4
55555: PUSH
55556: LD_INT 1
55558: PLUS
55559: ARRAY
55560: ST_TO_ADDR
55561: GO 55564
55563: POP
55564: GO 56119
55566: LD_INT 2
55568: DOUBLE
55569: EQUAL
55570: IFTRUE 55580
55572: LD_INT 3
55574: DOUBLE
55575: EQUAL
55576: IFTRUE 55580
55578: GO 55636
55580: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55581: LD_ADDR_VAR 0 9
55585: PUSH
55586: LD_VAR 0 29
55590: PUSH
55591: LD_VAR 0 30
55595: PUSH
55596: LD_VAR 0 31
55600: PUSH
55601: LD_VAR 0 32
55605: PUSH
55606: LD_VAR 0 33
55610: PUSH
55611: LD_VAR 0 34
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: PUSH
55624: LD_VAR 0 4
55628: PUSH
55629: LD_INT 1
55631: PLUS
55632: ARRAY
55633: ST_TO_ADDR
55634: GO 56119
55636: LD_INT 16
55638: DOUBLE
55639: EQUAL
55640: IFTRUE 55698
55642: LD_INT 17
55644: DOUBLE
55645: EQUAL
55646: IFTRUE 55698
55648: LD_INT 18
55650: DOUBLE
55651: EQUAL
55652: IFTRUE 55698
55654: LD_INT 19
55656: DOUBLE
55657: EQUAL
55658: IFTRUE 55698
55660: LD_INT 22
55662: DOUBLE
55663: EQUAL
55664: IFTRUE 55698
55666: LD_INT 20
55668: DOUBLE
55669: EQUAL
55670: IFTRUE 55698
55672: LD_INT 21
55674: DOUBLE
55675: EQUAL
55676: IFTRUE 55698
55678: LD_INT 23
55680: DOUBLE
55681: EQUAL
55682: IFTRUE 55698
55684: LD_INT 24
55686: DOUBLE
55687: EQUAL
55688: IFTRUE 55698
55690: LD_INT 25
55692: DOUBLE
55693: EQUAL
55694: IFTRUE 55698
55696: GO 55754
55698: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55699: LD_ADDR_VAR 0 9
55703: PUSH
55704: LD_VAR 0 35
55708: PUSH
55709: LD_VAR 0 36
55713: PUSH
55714: LD_VAR 0 37
55718: PUSH
55719: LD_VAR 0 38
55723: PUSH
55724: LD_VAR 0 39
55728: PUSH
55729: LD_VAR 0 40
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: PUSH
55742: LD_VAR 0 4
55746: PUSH
55747: LD_INT 1
55749: PLUS
55750: ARRAY
55751: ST_TO_ADDR
55752: GO 56119
55754: LD_INT 6
55756: DOUBLE
55757: EQUAL
55758: IFTRUE 55810
55760: LD_INT 7
55762: DOUBLE
55763: EQUAL
55764: IFTRUE 55810
55766: LD_INT 8
55768: DOUBLE
55769: EQUAL
55770: IFTRUE 55810
55772: LD_INT 13
55774: DOUBLE
55775: EQUAL
55776: IFTRUE 55810
55778: LD_INT 12
55780: DOUBLE
55781: EQUAL
55782: IFTRUE 55810
55784: LD_INT 15
55786: DOUBLE
55787: EQUAL
55788: IFTRUE 55810
55790: LD_INT 11
55792: DOUBLE
55793: EQUAL
55794: IFTRUE 55810
55796: LD_INT 14
55798: DOUBLE
55799: EQUAL
55800: IFTRUE 55810
55802: LD_INT 10
55804: DOUBLE
55805: EQUAL
55806: IFTRUE 55810
55808: GO 55866
55810: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55811: LD_ADDR_VAR 0 9
55815: PUSH
55816: LD_VAR 0 41
55820: PUSH
55821: LD_VAR 0 42
55825: PUSH
55826: LD_VAR 0 43
55830: PUSH
55831: LD_VAR 0 44
55835: PUSH
55836: LD_VAR 0 45
55840: PUSH
55841: LD_VAR 0 46
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: PUSH
55854: LD_VAR 0 4
55858: PUSH
55859: LD_INT 1
55861: PLUS
55862: ARRAY
55863: ST_TO_ADDR
55864: GO 56119
55866: LD_INT 36
55868: DOUBLE
55869: EQUAL
55870: IFTRUE 55874
55872: GO 55930
55874: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55875: LD_ADDR_VAR 0 9
55879: PUSH
55880: LD_VAR 0 47
55884: PUSH
55885: LD_VAR 0 48
55889: PUSH
55890: LD_VAR 0 49
55894: PUSH
55895: LD_VAR 0 50
55899: PUSH
55900: LD_VAR 0 51
55904: PUSH
55905: LD_VAR 0 52
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: PUSH
55918: LD_VAR 0 4
55922: PUSH
55923: LD_INT 1
55925: PLUS
55926: ARRAY
55927: ST_TO_ADDR
55928: GO 56119
55930: LD_INT 4
55932: DOUBLE
55933: EQUAL
55934: IFTRUE 55956
55936: LD_INT 5
55938: DOUBLE
55939: EQUAL
55940: IFTRUE 55956
55942: LD_INT 34
55944: DOUBLE
55945: EQUAL
55946: IFTRUE 55956
55948: LD_INT 37
55950: DOUBLE
55951: EQUAL
55952: IFTRUE 55956
55954: GO 56012
55956: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55957: LD_ADDR_VAR 0 9
55961: PUSH
55962: LD_VAR 0 53
55966: PUSH
55967: LD_VAR 0 54
55971: PUSH
55972: LD_VAR 0 55
55976: PUSH
55977: LD_VAR 0 56
55981: PUSH
55982: LD_VAR 0 57
55986: PUSH
55987: LD_VAR 0 58
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: PUSH
56000: LD_VAR 0 4
56004: PUSH
56005: LD_INT 1
56007: PLUS
56008: ARRAY
56009: ST_TO_ADDR
56010: GO 56119
56012: LD_INT 31
56014: DOUBLE
56015: EQUAL
56016: IFTRUE 56062
56018: LD_INT 32
56020: DOUBLE
56021: EQUAL
56022: IFTRUE 56062
56024: LD_INT 33
56026: DOUBLE
56027: EQUAL
56028: IFTRUE 56062
56030: LD_INT 27
56032: DOUBLE
56033: EQUAL
56034: IFTRUE 56062
56036: LD_INT 26
56038: DOUBLE
56039: EQUAL
56040: IFTRUE 56062
56042: LD_INT 28
56044: DOUBLE
56045: EQUAL
56046: IFTRUE 56062
56048: LD_INT 29
56050: DOUBLE
56051: EQUAL
56052: IFTRUE 56062
56054: LD_INT 30
56056: DOUBLE
56057: EQUAL
56058: IFTRUE 56062
56060: GO 56118
56062: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56063: LD_ADDR_VAR 0 9
56067: PUSH
56068: LD_VAR 0 59
56072: PUSH
56073: LD_VAR 0 60
56077: PUSH
56078: LD_VAR 0 61
56082: PUSH
56083: LD_VAR 0 62
56087: PUSH
56088: LD_VAR 0 63
56092: PUSH
56093: LD_VAR 0 64
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: PUSH
56106: LD_VAR 0 4
56110: PUSH
56111: LD_INT 1
56113: PLUS
56114: ARRAY
56115: ST_TO_ADDR
56116: GO 56119
56118: POP
// temp_list2 = [ ] ;
56119: LD_ADDR_VAR 0 10
56123: PUSH
56124: EMPTY
56125: ST_TO_ADDR
// for i in temp_list do
56126: LD_ADDR_VAR 0 8
56130: PUSH
56131: LD_VAR 0 9
56135: PUSH
56136: FOR_IN
56137: IFFALSE 56189
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56139: LD_ADDR_VAR 0 10
56143: PUSH
56144: LD_VAR 0 10
56148: PUSH
56149: LD_VAR 0 8
56153: PUSH
56154: LD_INT 1
56156: ARRAY
56157: PUSH
56158: LD_VAR 0 2
56162: PLUS
56163: PUSH
56164: LD_VAR 0 8
56168: PUSH
56169: LD_INT 2
56171: ARRAY
56172: PUSH
56173: LD_VAR 0 3
56177: PLUS
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: EMPTY
56184: LIST
56185: ADD
56186: ST_TO_ADDR
56187: GO 56136
56189: POP
56190: POP
// result = temp_list2 ;
56191: LD_ADDR_VAR 0 7
56195: PUSH
56196: LD_VAR 0 10
56200: ST_TO_ADDR
// end ;
56201: LD_VAR 0 7
56205: RET
// export function EnemyInRange ( unit , dist ) ; begin
56206: LD_INT 0
56208: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56209: LD_ADDR_VAR 0 3
56213: PUSH
56214: LD_VAR 0 1
56218: PPUSH
56219: CALL_OW 255
56223: PPUSH
56224: LD_VAR 0 1
56228: PPUSH
56229: CALL_OW 250
56233: PPUSH
56234: LD_VAR 0 1
56238: PPUSH
56239: CALL_OW 251
56243: PPUSH
56244: LD_VAR 0 2
56248: PPUSH
56249: CALL 30310 0 4
56253: PUSH
56254: LD_INT 4
56256: ARRAY
56257: ST_TO_ADDR
// end ;
56258: LD_VAR 0 3
56262: RET
// export function PlayerSeeMe ( unit ) ; begin
56263: LD_INT 0
56265: PPUSH
// result := See ( your_side , unit ) ;
56266: LD_ADDR_VAR 0 2
56270: PUSH
56271: LD_OWVAR 2
56275: PPUSH
56276: LD_VAR 0 1
56280: PPUSH
56281: CALL_OW 292
56285: ST_TO_ADDR
// end ;
56286: LD_VAR 0 2
56290: RET
// export function ReverseDir ( unit ) ; begin
56291: LD_INT 0
56293: PPUSH
// if not unit then
56294: LD_VAR 0 1
56298: NOT
56299: IFFALSE 56303
// exit ;
56301: GO 56326
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56303: LD_ADDR_VAR 0 2
56307: PUSH
56308: LD_VAR 0 1
56312: PPUSH
56313: CALL_OW 254
56317: PUSH
56318: LD_INT 3
56320: PLUS
56321: PUSH
56322: LD_INT 6
56324: MOD
56325: ST_TO_ADDR
// end ;
56326: LD_VAR 0 2
56330: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
56331: LD_INT 0
56333: PPUSH
56334: PPUSH
56335: PPUSH
56336: PPUSH
56337: PPUSH
// if not hexes then
56338: LD_VAR 0 2
56342: NOT
56343: IFFALSE 56347
// exit ;
56345: GO 56495
// dist := 9999 ;
56347: LD_ADDR_VAR 0 5
56351: PUSH
56352: LD_INT 9999
56354: ST_TO_ADDR
// for i = 1 to hexes do
56355: LD_ADDR_VAR 0 4
56359: PUSH
56360: DOUBLE
56361: LD_INT 1
56363: DEC
56364: ST_TO_ADDR
56365: LD_VAR 0 2
56369: PUSH
56370: FOR_TO
56371: IFFALSE 56483
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
56373: LD_VAR 0 1
56377: PPUSH
56378: LD_VAR 0 2
56382: PUSH
56383: LD_VAR 0 4
56387: ARRAY
56388: PUSH
56389: LD_INT 1
56391: ARRAY
56392: PPUSH
56393: LD_VAR 0 2
56397: PUSH
56398: LD_VAR 0 4
56402: ARRAY
56403: PUSH
56404: LD_INT 2
56406: ARRAY
56407: PPUSH
56408: CALL_OW 297
56412: PUSH
56413: LD_VAR 0 5
56417: LESS
56418: IFFALSE 56481
// begin hex := hexes [ i ] ;
56420: LD_ADDR_VAR 0 7
56424: PUSH
56425: LD_VAR 0 2
56429: PUSH
56430: LD_VAR 0 4
56434: ARRAY
56435: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56436: LD_ADDR_VAR 0 5
56440: PUSH
56441: LD_VAR 0 1
56445: PPUSH
56446: LD_VAR 0 2
56450: PUSH
56451: LD_VAR 0 4
56455: ARRAY
56456: PUSH
56457: LD_INT 1
56459: ARRAY
56460: PPUSH
56461: LD_VAR 0 2
56465: PUSH
56466: LD_VAR 0 4
56470: ARRAY
56471: PUSH
56472: LD_INT 2
56474: ARRAY
56475: PPUSH
56476: CALL_OW 297
56480: ST_TO_ADDR
// end ; end ;
56481: GO 56370
56483: POP
56484: POP
// result := hex ;
56485: LD_ADDR_VAR 0 3
56489: PUSH
56490: LD_VAR 0 7
56494: ST_TO_ADDR
// end ;
56495: LD_VAR 0 3
56499: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56500: LD_INT 0
56502: PPUSH
56503: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56504: LD_VAR 0 1
56508: NOT
56509: PUSH
56510: LD_VAR 0 1
56514: PUSH
56515: LD_INT 21
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 23
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PPUSH
56539: CALL_OW 69
56543: IN
56544: NOT
56545: OR
56546: IFFALSE 56550
// exit ;
56548: GO 56597
// for i = 1 to 3 do
56550: LD_ADDR_VAR 0 3
56554: PUSH
56555: DOUBLE
56556: LD_INT 1
56558: DEC
56559: ST_TO_ADDR
56560: LD_INT 3
56562: PUSH
56563: FOR_TO
56564: IFFALSE 56595
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56566: LD_VAR 0 1
56570: PPUSH
56571: CALL_OW 250
56575: PPUSH
56576: LD_VAR 0 1
56580: PPUSH
56581: CALL_OW 251
56585: PPUSH
56586: LD_INT 1
56588: PPUSH
56589: CALL_OW 453
56593: GO 56563
56595: POP
56596: POP
// end ;
56597: LD_VAR 0 2
56601: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56602: LD_INT 0
56604: PPUSH
56605: PPUSH
56606: PPUSH
56607: PPUSH
56608: PPUSH
56609: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56610: LD_VAR 0 1
56614: NOT
56615: PUSH
56616: LD_VAR 0 2
56620: NOT
56621: OR
56622: PUSH
56623: LD_VAR 0 1
56627: PPUSH
56628: CALL_OW 314
56632: OR
56633: IFFALSE 56637
// exit ;
56635: GO 57078
// x := GetX ( enemy_unit ) ;
56637: LD_ADDR_VAR 0 7
56641: PUSH
56642: LD_VAR 0 2
56646: PPUSH
56647: CALL_OW 250
56651: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56652: LD_ADDR_VAR 0 8
56656: PUSH
56657: LD_VAR 0 2
56661: PPUSH
56662: CALL_OW 251
56666: ST_TO_ADDR
// if not x or not y then
56667: LD_VAR 0 7
56671: NOT
56672: PUSH
56673: LD_VAR 0 8
56677: NOT
56678: OR
56679: IFFALSE 56683
// exit ;
56681: GO 57078
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56683: LD_ADDR_VAR 0 6
56687: PUSH
56688: LD_VAR 0 7
56692: PPUSH
56693: LD_INT 0
56695: PPUSH
56696: LD_INT 4
56698: PPUSH
56699: CALL_OW 272
56703: PUSH
56704: LD_VAR 0 8
56708: PPUSH
56709: LD_INT 0
56711: PPUSH
56712: LD_INT 4
56714: PPUSH
56715: CALL_OW 273
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_VAR 0 7
56728: PPUSH
56729: LD_INT 1
56731: PPUSH
56732: LD_INT 4
56734: PPUSH
56735: CALL_OW 272
56739: PUSH
56740: LD_VAR 0 8
56744: PPUSH
56745: LD_INT 1
56747: PPUSH
56748: LD_INT 4
56750: PPUSH
56751: CALL_OW 273
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_VAR 0 7
56764: PPUSH
56765: LD_INT 2
56767: PPUSH
56768: LD_INT 4
56770: PPUSH
56771: CALL_OW 272
56775: PUSH
56776: LD_VAR 0 8
56780: PPUSH
56781: LD_INT 2
56783: PPUSH
56784: LD_INT 4
56786: PPUSH
56787: CALL_OW 273
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_VAR 0 7
56800: PPUSH
56801: LD_INT 3
56803: PPUSH
56804: LD_INT 4
56806: PPUSH
56807: CALL_OW 272
56811: PUSH
56812: LD_VAR 0 8
56816: PPUSH
56817: LD_INT 3
56819: PPUSH
56820: LD_INT 4
56822: PPUSH
56823: CALL_OW 273
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_VAR 0 7
56836: PPUSH
56837: LD_INT 4
56839: PPUSH
56840: LD_INT 4
56842: PPUSH
56843: CALL_OW 272
56847: PUSH
56848: LD_VAR 0 8
56852: PPUSH
56853: LD_INT 4
56855: PPUSH
56856: LD_INT 4
56858: PPUSH
56859: CALL_OW 273
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_VAR 0 7
56872: PPUSH
56873: LD_INT 5
56875: PPUSH
56876: LD_INT 4
56878: PPUSH
56879: CALL_OW 272
56883: PUSH
56884: LD_VAR 0 8
56888: PPUSH
56889: LD_INT 5
56891: PPUSH
56892: LD_INT 4
56894: PPUSH
56895: CALL_OW 273
56899: PUSH
56900: EMPTY
56901: LIST
56902: LIST
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: ST_TO_ADDR
// for i = tmp downto 1 do
56912: LD_ADDR_VAR 0 4
56916: PUSH
56917: DOUBLE
56918: LD_VAR 0 6
56922: INC
56923: ST_TO_ADDR
56924: LD_INT 1
56926: PUSH
56927: FOR_DOWNTO
56928: IFFALSE 57029
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56930: LD_VAR 0 6
56934: PUSH
56935: LD_VAR 0 4
56939: ARRAY
56940: PUSH
56941: LD_INT 1
56943: ARRAY
56944: PPUSH
56945: LD_VAR 0 6
56949: PUSH
56950: LD_VAR 0 4
56954: ARRAY
56955: PUSH
56956: LD_INT 2
56958: ARRAY
56959: PPUSH
56960: CALL_OW 488
56964: NOT
56965: PUSH
56966: LD_VAR 0 6
56970: PUSH
56971: LD_VAR 0 4
56975: ARRAY
56976: PUSH
56977: LD_INT 1
56979: ARRAY
56980: PPUSH
56981: LD_VAR 0 6
56985: PUSH
56986: LD_VAR 0 4
56990: ARRAY
56991: PUSH
56992: LD_INT 2
56994: ARRAY
56995: PPUSH
56996: CALL_OW 428
57000: PUSH
57001: LD_INT 0
57003: NONEQUAL
57004: OR
57005: IFFALSE 57027
// tmp := Delete ( tmp , i ) ;
57007: LD_ADDR_VAR 0 6
57011: PUSH
57012: LD_VAR 0 6
57016: PPUSH
57017: LD_VAR 0 4
57021: PPUSH
57022: CALL_OW 3
57026: ST_TO_ADDR
57027: GO 56927
57029: POP
57030: POP
// j := GetClosestHex ( unit , tmp ) ;
57031: LD_ADDR_VAR 0 5
57035: PUSH
57036: LD_VAR 0 1
57040: PPUSH
57041: LD_VAR 0 6
57045: PPUSH
57046: CALL 56331 0 2
57050: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57051: LD_VAR 0 1
57055: PPUSH
57056: LD_VAR 0 5
57060: PUSH
57061: LD_INT 1
57063: ARRAY
57064: PPUSH
57065: LD_VAR 0 5
57069: PUSH
57070: LD_INT 2
57072: ARRAY
57073: PPUSH
57074: CALL_OW 111
// end ;
57078: LD_VAR 0 3
57082: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57083: LD_INT 0
57085: PPUSH
57086: PPUSH
57087: PPUSH
// uc_side = 0 ;
57088: LD_ADDR_OWVAR 20
57092: PUSH
57093: LD_INT 0
57095: ST_TO_ADDR
// uc_nation = 0 ;
57096: LD_ADDR_OWVAR 21
57100: PUSH
57101: LD_INT 0
57103: ST_TO_ADDR
// InitHc_All ( ) ;
57104: CALL_OW 584
// InitVc ;
57108: CALL_OW 20
// if mastodonts then
57112: LD_VAR 0 6
57116: IFFALSE 57183
// for i = 1 to mastodonts do
57118: LD_ADDR_VAR 0 11
57122: PUSH
57123: DOUBLE
57124: LD_INT 1
57126: DEC
57127: ST_TO_ADDR
57128: LD_VAR 0 6
57132: PUSH
57133: FOR_TO
57134: IFFALSE 57181
// begin vc_chassis := 31 ;
57136: LD_ADDR_OWVAR 37
57140: PUSH
57141: LD_INT 31
57143: ST_TO_ADDR
// vc_control := control_rider ;
57144: LD_ADDR_OWVAR 38
57148: PUSH
57149: LD_INT 4
57151: ST_TO_ADDR
// animal := CreateVehicle ;
57152: LD_ADDR_VAR 0 12
57156: PUSH
57157: CALL_OW 45
57161: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57162: LD_VAR 0 12
57166: PPUSH
57167: LD_VAR 0 8
57171: PPUSH
57172: LD_INT 0
57174: PPUSH
57175: CALL 59371 0 3
// end ;
57179: GO 57133
57181: POP
57182: POP
// if horses then
57183: LD_VAR 0 5
57187: IFFALSE 57254
// for i = 1 to horses do
57189: LD_ADDR_VAR 0 11
57193: PUSH
57194: DOUBLE
57195: LD_INT 1
57197: DEC
57198: ST_TO_ADDR
57199: LD_VAR 0 5
57203: PUSH
57204: FOR_TO
57205: IFFALSE 57252
// begin hc_class := 21 ;
57207: LD_ADDR_OWVAR 28
57211: PUSH
57212: LD_INT 21
57214: ST_TO_ADDR
// hc_gallery :=  ;
57215: LD_ADDR_OWVAR 33
57219: PUSH
57220: LD_STRING 
57222: ST_TO_ADDR
// animal := CreateHuman ;
57223: LD_ADDR_VAR 0 12
57227: PUSH
57228: CALL_OW 44
57232: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57233: LD_VAR 0 12
57237: PPUSH
57238: LD_VAR 0 8
57242: PPUSH
57243: LD_INT 0
57245: PPUSH
57246: CALL 59371 0 3
// end ;
57250: GO 57204
57252: POP
57253: POP
// if birds then
57254: LD_VAR 0 1
57258: IFFALSE 57325
// for i = 1 to birds do
57260: LD_ADDR_VAR 0 11
57264: PUSH
57265: DOUBLE
57266: LD_INT 1
57268: DEC
57269: ST_TO_ADDR
57270: LD_VAR 0 1
57274: PUSH
57275: FOR_TO
57276: IFFALSE 57323
// begin hc_class = 18 ;
57278: LD_ADDR_OWVAR 28
57282: PUSH
57283: LD_INT 18
57285: ST_TO_ADDR
// hc_gallery =  ;
57286: LD_ADDR_OWVAR 33
57290: PUSH
57291: LD_STRING 
57293: ST_TO_ADDR
// animal := CreateHuman ;
57294: LD_ADDR_VAR 0 12
57298: PUSH
57299: CALL_OW 44
57303: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57304: LD_VAR 0 12
57308: PPUSH
57309: LD_VAR 0 8
57313: PPUSH
57314: LD_INT 0
57316: PPUSH
57317: CALL 59371 0 3
// end ;
57321: GO 57275
57323: POP
57324: POP
// if tigers then
57325: LD_VAR 0 2
57329: IFFALSE 57413
// for i = 1 to tigers do
57331: LD_ADDR_VAR 0 11
57335: PUSH
57336: DOUBLE
57337: LD_INT 1
57339: DEC
57340: ST_TO_ADDR
57341: LD_VAR 0 2
57345: PUSH
57346: FOR_TO
57347: IFFALSE 57411
// begin hc_class = class_tiger ;
57349: LD_ADDR_OWVAR 28
57353: PUSH
57354: LD_INT 14
57356: ST_TO_ADDR
// hc_gallery =  ;
57357: LD_ADDR_OWVAR 33
57361: PUSH
57362: LD_STRING 
57364: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57365: LD_ADDR_OWVAR 35
57369: PUSH
57370: LD_INT 7
57372: NEG
57373: PPUSH
57374: LD_INT 7
57376: PPUSH
57377: CALL_OW 12
57381: ST_TO_ADDR
// animal := CreateHuman ;
57382: LD_ADDR_VAR 0 12
57386: PUSH
57387: CALL_OW 44
57391: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57392: LD_VAR 0 12
57396: PPUSH
57397: LD_VAR 0 8
57401: PPUSH
57402: LD_INT 0
57404: PPUSH
57405: CALL 59371 0 3
// end ;
57409: GO 57346
57411: POP
57412: POP
// if apemans then
57413: LD_VAR 0 3
57417: IFFALSE 57540
// for i = 1 to apemans do
57419: LD_ADDR_VAR 0 11
57423: PUSH
57424: DOUBLE
57425: LD_INT 1
57427: DEC
57428: ST_TO_ADDR
57429: LD_VAR 0 3
57433: PUSH
57434: FOR_TO
57435: IFFALSE 57538
// begin hc_class = class_apeman ;
57437: LD_ADDR_OWVAR 28
57441: PUSH
57442: LD_INT 12
57444: ST_TO_ADDR
// hc_gallery =  ;
57445: LD_ADDR_OWVAR 33
57449: PUSH
57450: LD_STRING 
57452: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
57453: LD_ADDR_OWVAR 35
57457: PUSH
57458: LD_INT 5
57460: NEG
57461: PPUSH
57462: LD_INT 5
57464: PPUSH
57465: CALL_OW 12
57469: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57470: LD_ADDR_OWVAR 31
57474: PUSH
57475: LD_INT 1
57477: PPUSH
57478: LD_INT 3
57480: PPUSH
57481: CALL_OW 12
57485: PUSH
57486: LD_INT 1
57488: PPUSH
57489: LD_INT 3
57491: PPUSH
57492: CALL_OW 12
57496: PUSH
57497: LD_INT 0
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// animal := CreateHuman ;
57509: LD_ADDR_VAR 0 12
57513: PUSH
57514: CALL_OW 44
57518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57519: LD_VAR 0 12
57523: PPUSH
57524: LD_VAR 0 8
57528: PPUSH
57529: LD_INT 0
57531: PPUSH
57532: CALL 59371 0 3
// end ;
57536: GO 57434
57538: POP
57539: POP
// if enchidnas then
57540: LD_VAR 0 4
57544: IFFALSE 57611
// for i = 1 to enchidnas do
57546: LD_ADDR_VAR 0 11
57550: PUSH
57551: DOUBLE
57552: LD_INT 1
57554: DEC
57555: ST_TO_ADDR
57556: LD_VAR 0 4
57560: PUSH
57561: FOR_TO
57562: IFFALSE 57609
// begin hc_class = 13 ;
57564: LD_ADDR_OWVAR 28
57568: PUSH
57569: LD_INT 13
57571: ST_TO_ADDR
// hc_gallery =  ;
57572: LD_ADDR_OWVAR 33
57576: PUSH
57577: LD_STRING 
57579: ST_TO_ADDR
// animal := CreateHuman ;
57580: LD_ADDR_VAR 0 12
57584: PUSH
57585: CALL_OW 44
57589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57590: LD_VAR 0 12
57594: PPUSH
57595: LD_VAR 0 8
57599: PPUSH
57600: LD_INT 0
57602: PPUSH
57603: CALL 59371 0 3
// end ;
57607: GO 57561
57609: POP
57610: POP
// if fishes then
57611: LD_VAR 0 7
57615: IFFALSE 57682
// for i = 1 to fishes do
57617: LD_ADDR_VAR 0 11
57621: PUSH
57622: DOUBLE
57623: LD_INT 1
57625: DEC
57626: ST_TO_ADDR
57627: LD_VAR 0 7
57631: PUSH
57632: FOR_TO
57633: IFFALSE 57680
// begin hc_class = 20 ;
57635: LD_ADDR_OWVAR 28
57639: PUSH
57640: LD_INT 20
57642: ST_TO_ADDR
// hc_gallery =  ;
57643: LD_ADDR_OWVAR 33
57647: PUSH
57648: LD_STRING 
57650: ST_TO_ADDR
// animal := CreateHuman ;
57651: LD_ADDR_VAR 0 12
57655: PUSH
57656: CALL_OW 44
57660: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57661: LD_VAR 0 12
57665: PPUSH
57666: LD_VAR 0 9
57670: PPUSH
57671: LD_INT 0
57673: PPUSH
57674: CALL 59371 0 3
// end ;
57678: GO 57632
57680: POP
57681: POP
// end ;
57682: LD_VAR 0 10
57686: RET
// export function WantHeal ( sci , unit ) ; begin
57687: LD_INT 0
57689: PPUSH
// if GetTaskList ( sci ) > 0 then
57690: LD_VAR 0 1
57694: PPUSH
57695: CALL_OW 437
57699: PUSH
57700: LD_INT 0
57702: GREATER
57703: IFFALSE 57773
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57705: LD_VAR 0 1
57709: PPUSH
57710: CALL_OW 437
57714: PUSH
57715: LD_INT 1
57717: ARRAY
57718: PUSH
57719: LD_INT 1
57721: ARRAY
57722: PUSH
57723: LD_STRING l
57725: EQUAL
57726: PUSH
57727: LD_VAR 0 1
57731: PPUSH
57732: CALL_OW 437
57736: PUSH
57737: LD_INT 1
57739: ARRAY
57740: PUSH
57741: LD_INT 4
57743: ARRAY
57744: PUSH
57745: LD_VAR 0 2
57749: EQUAL
57750: AND
57751: IFFALSE 57763
// result := true else
57753: LD_ADDR_VAR 0 3
57757: PUSH
57758: LD_INT 1
57760: ST_TO_ADDR
57761: GO 57771
// result := false ;
57763: LD_ADDR_VAR 0 3
57767: PUSH
57768: LD_INT 0
57770: ST_TO_ADDR
// end else
57771: GO 57781
// result := false ;
57773: LD_ADDR_VAR 0 3
57777: PUSH
57778: LD_INT 0
57780: ST_TO_ADDR
// end ;
57781: LD_VAR 0 3
57785: RET
// export function HealTarget ( sci ) ; begin
57786: LD_INT 0
57788: PPUSH
// if not sci then
57789: LD_VAR 0 1
57793: NOT
57794: IFFALSE 57798
// exit ;
57796: GO 57863
// result := 0 ;
57798: LD_ADDR_VAR 0 2
57802: PUSH
57803: LD_INT 0
57805: ST_TO_ADDR
// if GetTaskList ( sci ) then
57806: LD_VAR 0 1
57810: PPUSH
57811: CALL_OW 437
57815: IFFALSE 57863
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
57817: LD_VAR 0 1
57821: PPUSH
57822: CALL_OW 437
57826: PUSH
57827: LD_INT 1
57829: ARRAY
57830: PUSH
57831: LD_INT 1
57833: ARRAY
57834: PUSH
57835: LD_STRING l
57837: EQUAL
57838: IFFALSE 57863
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
57840: LD_ADDR_VAR 0 2
57844: PUSH
57845: LD_VAR 0 1
57849: PPUSH
57850: CALL_OW 437
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: PUSH
57859: LD_INT 4
57861: ARRAY
57862: ST_TO_ADDR
// end ;
57863: LD_VAR 0 2
57867: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
57868: LD_INT 0
57870: PPUSH
57871: PPUSH
57872: PPUSH
57873: PPUSH
// if not base_units then
57874: LD_VAR 0 1
57878: NOT
57879: IFFALSE 57883
// exit ;
57881: GO 57970
// result := false ;
57883: LD_ADDR_VAR 0 2
57887: PUSH
57888: LD_INT 0
57890: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
57891: LD_ADDR_VAR 0 5
57895: PUSH
57896: LD_VAR 0 1
57900: PPUSH
57901: LD_INT 21
57903: PUSH
57904: LD_INT 3
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PPUSH
57911: CALL_OW 72
57915: ST_TO_ADDR
// if not tmp then
57916: LD_VAR 0 5
57920: NOT
57921: IFFALSE 57925
// exit ;
57923: GO 57970
// for i in tmp do
57925: LD_ADDR_VAR 0 3
57929: PUSH
57930: LD_VAR 0 5
57934: PUSH
57935: FOR_IN
57936: IFFALSE 57968
// begin result := EnemyInRange ( i , 22 ) ;
57938: LD_ADDR_VAR 0 2
57942: PUSH
57943: LD_VAR 0 3
57947: PPUSH
57948: LD_INT 22
57950: PPUSH
57951: CALL 56206 0 2
57955: ST_TO_ADDR
// if result then
57956: LD_VAR 0 2
57960: IFFALSE 57966
// exit ;
57962: POP
57963: POP
57964: GO 57970
// end ;
57966: GO 57935
57968: POP
57969: POP
// end ;
57970: LD_VAR 0 2
57974: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
57975: LD_INT 0
57977: PPUSH
57978: PPUSH
// if not units then
57979: LD_VAR 0 1
57983: NOT
57984: IFFALSE 57988
// exit ;
57986: GO 58058
// result := [ ] ;
57988: LD_ADDR_VAR 0 3
57992: PUSH
57993: EMPTY
57994: ST_TO_ADDR
// for i in units do
57995: LD_ADDR_VAR 0 4
57999: PUSH
58000: LD_VAR 0 1
58004: PUSH
58005: FOR_IN
58006: IFFALSE 58056
// if GetTag ( i ) = tag then
58008: LD_VAR 0 4
58012: PPUSH
58013: CALL_OW 110
58017: PUSH
58018: LD_VAR 0 2
58022: EQUAL
58023: IFFALSE 58054
// result := Insert ( result , result + 1 , i ) ;
58025: LD_ADDR_VAR 0 3
58029: PUSH
58030: LD_VAR 0 3
58034: PPUSH
58035: LD_VAR 0 3
58039: PUSH
58040: LD_INT 1
58042: PLUS
58043: PPUSH
58044: LD_VAR 0 4
58048: PPUSH
58049: CALL_OW 2
58053: ST_TO_ADDR
58054: GO 58005
58056: POP
58057: POP
// end ;
58058: LD_VAR 0 3
58062: RET
// export function IsDriver ( un ) ; begin
58063: LD_INT 0
58065: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58066: LD_ADDR_VAR 0 2
58070: PUSH
58071: LD_VAR 0 1
58075: PUSH
58076: LD_INT 55
58078: PUSH
58079: EMPTY
58080: LIST
58081: PPUSH
58082: CALL_OW 69
58086: IN
58087: ST_TO_ADDR
// end ;
58088: LD_VAR 0 2
58092: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58093: LD_INT 0
58095: PPUSH
58096: PPUSH
// list := [ ] ;
58097: LD_ADDR_VAR 0 5
58101: PUSH
58102: EMPTY
58103: ST_TO_ADDR
// case d of 0 :
58104: LD_VAR 0 3
58108: PUSH
58109: LD_INT 0
58111: DOUBLE
58112: EQUAL
58113: IFTRUE 58117
58115: GO 58250
58117: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58118: LD_ADDR_VAR 0 5
58122: PUSH
58123: LD_VAR 0 1
58127: PUSH
58128: LD_INT 4
58130: MINUS
58131: PUSH
58132: LD_VAR 0 2
58136: PUSH
58137: LD_INT 4
58139: MINUS
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: PUSH
58149: LD_VAR 0 1
58153: PUSH
58154: LD_INT 3
58156: MINUS
58157: PUSH
58158: LD_VAR 0 2
58162: PUSH
58163: LD_INT 1
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: LIST
58170: PUSH
58171: LD_VAR 0 1
58175: PUSH
58176: LD_INT 4
58178: PLUS
58179: PUSH
58180: LD_VAR 0 2
58184: PUSH
58185: LD_INT 4
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: PUSH
58193: LD_VAR 0 1
58197: PUSH
58198: LD_INT 3
58200: PLUS
58201: PUSH
58202: LD_VAR 0 2
58206: PUSH
58207: LD_INT 3
58209: PLUS
58210: PUSH
58211: LD_INT 5
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: LIST
58218: PUSH
58219: LD_VAR 0 1
58223: PUSH
58224: LD_VAR 0 2
58228: PUSH
58229: LD_INT 4
58231: PLUS
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: LIST
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: ST_TO_ADDR
// end ; 1 :
58248: GO 58948
58250: LD_INT 1
58252: DOUBLE
58253: EQUAL
58254: IFTRUE 58258
58256: GO 58391
58258: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58259: LD_ADDR_VAR 0 5
58263: PUSH
58264: LD_VAR 0 1
58268: PUSH
58269: LD_VAR 0 2
58273: PUSH
58274: LD_INT 4
58276: MINUS
58277: PUSH
58278: LD_INT 3
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: LIST
58285: PUSH
58286: LD_VAR 0 1
58290: PUSH
58291: LD_INT 3
58293: MINUS
58294: PUSH
58295: LD_VAR 0 2
58299: PUSH
58300: LD_INT 3
58302: MINUS
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: LIST
58311: PUSH
58312: LD_VAR 0 1
58316: PUSH
58317: LD_INT 4
58319: MINUS
58320: PUSH
58321: LD_VAR 0 2
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: LIST
58333: PUSH
58334: LD_VAR 0 1
58338: PUSH
58339: LD_VAR 0 2
58343: PUSH
58344: LD_INT 3
58346: PLUS
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: PUSH
58356: LD_VAR 0 1
58360: PUSH
58361: LD_INT 4
58363: PLUS
58364: PUSH
58365: LD_VAR 0 2
58369: PUSH
58370: LD_INT 4
58372: PLUS
58373: PUSH
58374: LD_INT 5
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: LIST
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: LIST
58388: ST_TO_ADDR
// end ; 2 :
58389: GO 58948
58391: LD_INT 2
58393: DOUBLE
58394: EQUAL
58395: IFTRUE 58399
58397: GO 58528
58399: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58400: LD_ADDR_VAR 0 5
58404: PUSH
58405: LD_VAR 0 1
58409: PUSH
58410: LD_VAR 0 2
58414: PUSH
58415: LD_INT 3
58417: MINUS
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: PUSH
58427: LD_VAR 0 1
58431: PUSH
58432: LD_INT 4
58434: PLUS
58435: PUSH
58436: LD_VAR 0 2
58440: PUSH
58441: LD_INT 4
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: LIST
58448: PUSH
58449: LD_VAR 0 1
58453: PUSH
58454: LD_VAR 0 2
58458: PUSH
58459: LD_INT 4
58461: PLUS
58462: PUSH
58463: LD_INT 0
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: PUSH
58471: LD_VAR 0 1
58475: PUSH
58476: LD_INT 3
58478: MINUS
58479: PUSH
58480: LD_VAR 0 2
58484: PUSH
58485: LD_INT 1
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: LIST
58492: PUSH
58493: LD_VAR 0 1
58497: PUSH
58498: LD_INT 4
58500: MINUS
58501: PUSH
58502: LD_VAR 0 2
58506: PUSH
58507: LD_INT 4
58509: MINUS
58510: PUSH
58511: LD_INT 2
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: ST_TO_ADDR
// end ; 3 :
58526: GO 58948
58528: LD_INT 3
58530: DOUBLE
58531: EQUAL
58532: IFTRUE 58536
58534: GO 58669
58536: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58537: LD_ADDR_VAR 0 5
58541: PUSH
58542: LD_VAR 0 1
58546: PUSH
58547: LD_INT 3
58549: PLUS
58550: PUSH
58551: LD_VAR 0 2
58555: PUSH
58556: LD_INT 4
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: PUSH
58564: LD_VAR 0 1
58568: PUSH
58569: LD_INT 4
58571: PLUS
58572: PUSH
58573: LD_VAR 0 2
58577: PUSH
58578: LD_INT 4
58580: PLUS
58581: PUSH
58582: LD_INT 5
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: PUSH
58590: LD_VAR 0 1
58594: PUSH
58595: LD_INT 4
58597: MINUS
58598: PUSH
58599: LD_VAR 0 2
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: PUSH
58612: LD_VAR 0 1
58616: PUSH
58617: LD_VAR 0 2
58621: PUSH
58622: LD_INT 4
58624: MINUS
58625: PUSH
58626: LD_INT 3
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: PUSH
58634: LD_VAR 0 1
58638: PUSH
58639: LD_INT 3
58641: MINUS
58642: PUSH
58643: LD_VAR 0 2
58647: PUSH
58648: LD_INT 3
58650: MINUS
58651: PUSH
58652: LD_INT 2
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: ST_TO_ADDR
// end ; 4 :
58667: GO 58948
58669: LD_INT 4
58671: DOUBLE
58672: EQUAL
58673: IFTRUE 58677
58675: GO 58810
58677: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58678: LD_ADDR_VAR 0 5
58682: PUSH
58683: LD_VAR 0 1
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 4
58695: PLUS
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: PUSH
58705: LD_VAR 0 1
58709: PUSH
58710: LD_INT 3
58712: PLUS
58713: PUSH
58714: LD_VAR 0 2
58718: PUSH
58719: LD_INT 3
58721: PLUS
58722: PUSH
58723: LD_INT 5
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: LIST
58730: PUSH
58731: LD_VAR 0 1
58735: PUSH
58736: LD_INT 4
58738: PLUS
58739: PUSH
58740: LD_VAR 0 2
58744: PUSH
58745: LD_INT 4
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: PUSH
58753: LD_VAR 0 1
58757: PUSH
58758: LD_VAR 0 2
58762: PUSH
58763: LD_INT 3
58765: MINUS
58766: PUSH
58767: LD_INT 3
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: LIST
58774: PUSH
58775: LD_VAR 0 1
58779: PUSH
58780: LD_INT 4
58782: MINUS
58783: PUSH
58784: LD_VAR 0 2
58788: PUSH
58789: LD_INT 4
58791: MINUS
58792: PUSH
58793: LD_INT 2
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: LIST
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: ST_TO_ADDR
// end ; 5 :
58808: GO 58948
58810: LD_INT 5
58812: DOUBLE
58813: EQUAL
58814: IFTRUE 58818
58816: GO 58947
58818: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
58819: LD_ADDR_VAR 0 5
58823: PUSH
58824: LD_VAR 0 1
58828: PUSH
58829: LD_INT 4
58831: MINUS
58832: PUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: LD_VAR 0 1
58850: PUSH
58851: LD_VAR 0 2
58855: PUSH
58856: LD_INT 4
58858: MINUS
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: PUSH
58868: LD_VAR 0 1
58872: PUSH
58873: LD_INT 4
58875: PLUS
58876: PUSH
58877: LD_VAR 0 2
58881: PUSH
58882: LD_INT 4
58884: PLUS
58885: PUSH
58886: LD_INT 5
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: PUSH
58894: LD_VAR 0 1
58898: PUSH
58899: LD_INT 3
58901: PLUS
58902: PUSH
58903: LD_VAR 0 2
58907: PUSH
58908: LD_INT 4
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: LIST
58915: PUSH
58916: LD_VAR 0 1
58920: PUSH
58921: LD_VAR 0 2
58925: PUSH
58926: LD_INT 3
58928: PLUS
58929: PUSH
58930: LD_INT 0
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: LIST
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: LIST
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// end ; end ;
58945: GO 58948
58947: POP
// result := list ;
58948: LD_ADDR_VAR 0 4
58952: PUSH
58953: LD_VAR 0 5
58957: ST_TO_ADDR
// end ;
58958: LD_VAR 0 4
58962: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
58963: LD_INT 0
58965: PPUSH
58966: PPUSH
58967: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
58968: LD_VAR 0 1
58972: NOT
58973: PUSH
58974: LD_VAR 0 2
58978: PUSH
58979: LD_INT 1
58981: PUSH
58982: LD_INT 2
58984: PUSH
58985: LD_INT 3
58987: PUSH
58988: LD_INT 4
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: IN
58997: NOT
58998: OR
58999: IFFALSE 59003
// exit ;
59001: GO 59095
// tmp := [ ] ;
59003: LD_ADDR_VAR 0 5
59007: PUSH
59008: EMPTY
59009: ST_TO_ADDR
// for i in units do
59010: LD_ADDR_VAR 0 4
59014: PUSH
59015: LD_VAR 0 1
59019: PUSH
59020: FOR_IN
59021: IFFALSE 59064
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59023: LD_ADDR_VAR 0 5
59027: PUSH
59028: LD_VAR 0 5
59032: PPUSH
59033: LD_VAR 0 5
59037: PUSH
59038: LD_INT 1
59040: PLUS
59041: PPUSH
59042: LD_VAR 0 4
59046: PPUSH
59047: LD_VAR 0 2
59051: PPUSH
59052: CALL_OW 259
59056: PPUSH
59057: CALL_OW 2
59061: ST_TO_ADDR
59062: GO 59020
59064: POP
59065: POP
// if not tmp then
59066: LD_VAR 0 5
59070: NOT
59071: IFFALSE 59075
// exit ;
59073: GO 59095
// result := SortListByListDesc ( units , tmp ) ;
59075: LD_ADDR_VAR 0 3
59079: PUSH
59080: LD_VAR 0 1
59084: PPUSH
59085: LD_VAR 0 5
59089: PPUSH
59090: CALL_OW 77
59094: ST_TO_ADDR
// end ;
59095: LD_VAR 0 3
59099: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59100: LD_INT 0
59102: PPUSH
59103: PPUSH
59104: PPUSH
// result := false ;
59105: LD_ADDR_VAR 0 3
59109: PUSH
59110: LD_INT 0
59112: ST_TO_ADDR
// x := GetX ( building ) ;
59113: LD_ADDR_VAR 0 4
59117: PUSH
59118: LD_VAR 0 2
59122: PPUSH
59123: CALL_OW 250
59127: ST_TO_ADDR
// y := GetY ( building ) ;
59128: LD_ADDR_VAR 0 5
59132: PUSH
59133: LD_VAR 0 2
59137: PPUSH
59138: CALL_OW 251
59142: ST_TO_ADDR
// if not building or not x or not y then
59143: LD_VAR 0 2
59147: NOT
59148: PUSH
59149: LD_VAR 0 4
59153: NOT
59154: OR
59155: PUSH
59156: LD_VAR 0 5
59160: NOT
59161: OR
59162: IFFALSE 59166
// exit ;
59164: GO 59258
// if GetTaskList ( unit ) then
59166: LD_VAR 0 1
59170: PPUSH
59171: CALL_OW 437
59175: IFFALSE 59258
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59177: LD_STRING e
59179: PUSH
59180: LD_VAR 0 1
59184: PPUSH
59185: CALL_OW 437
59189: PUSH
59190: LD_INT 1
59192: ARRAY
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: EQUAL
59198: PUSH
59199: LD_VAR 0 4
59203: PUSH
59204: LD_VAR 0 1
59208: PPUSH
59209: CALL_OW 437
59213: PUSH
59214: LD_INT 1
59216: ARRAY
59217: PUSH
59218: LD_INT 2
59220: ARRAY
59221: EQUAL
59222: AND
59223: PUSH
59224: LD_VAR 0 5
59228: PUSH
59229: LD_VAR 0 1
59233: PPUSH
59234: CALL_OW 437
59238: PUSH
59239: LD_INT 1
59241: ARRAY
59242: PUSH
59243: LD_INT 3
59245: ARRAY
59246: EQUAL
59247: AND
59248: IFFALSE 59258
// result := true end ;
59250: LD_ADDR_VAR 0 3
59254: PUSH
59255: LD_INT 1
59257: ST_TO_ADDR
// end ;
59258: LD_VAR 0 3
59262: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59263: LD_INT 0
59265: PPUSH
// result := false ;
59266: LD_ADDR_VAR 0 4
59270: PUSH
59271: LD_INT 0
59273: ST_TO_ADDR
// if GetTaskList ( unit ) then
59274: LD_VAR 0 1
59278: PPUSH
59279: CALL_OW 437
59283: IFFALSE 59366
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59285: LD_STRING M
59287: PUSH
59288: LD_VAR 0 1
59292: PPUSH
59293: CALL_OW 437
59297: PUSH
59298: LD_INT 1
59300: ARRAY
59301: PUSH
59302: LD_INT 1
59304: ARRAY
59305: EQUAL
59306: PUSH
59307: LD_VAR 0 2
59311: PUSH
59312: LD_VAR 0 1
59316: PPUSH
59317: CALL_OW 437
59321: PUSH
59322: LD_INT 1
59324: ARRAY
59325: PUSH
59326: LD_INT 2
59328: ARRAY
59329: EQUAL
59330: AND
59331: PUSH
59332: LD_VAR 0 3
59336: PUSH
59337: LD_VAR 0 1
59341: PPUSH
59342: CALL_OW 437
59346: PUSH
59347: LD_INT 1
59349: ARRAY
59350: PUSH
59351: LD_INT 3
59353: ARRAY
59354: EQUAL
59355: AND
59356: IFFALSE 59366
// result := true ;
59358: LD_ADDR_VAR 0 4
59362: PUSH
59363: LD_INT 1
59365: ST_TO_ADDR
// end ; end ;
59366: LD_VAR 0 4
59370: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59371: LD_INT 0
59373: PPUSH
59374: PPUSH
59375: PPUSH
59376: PPUSH
// if not unit or not area then
59377: LD_VAR 0 1
59381: NOT
59382: PUSH
59383: LD_VAR 0 2
59387: NOT
59388: OR
59389: IFFALSE 59393
// exit ;
59391: GO 59557
// tmp := AreaToList ( area , i ) ;
59393: LD_ADDR_VAR 0 6
59397: PUSH
59398: LD_VAR 0 2
59402: PPUSH
59403: LD_VAR 0 5
59407: PPUSH
59408: CALL_OW 517
59412: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59413: LD_ADDR_VAR 0 5
59417: PUSH
59418: DOUBLE
59419: LD_INT 1
59421: DEC
59422: ST_TO_ADDR
59423: LD_VAR 0 6
59427: PUSH
59428: LD_INT 1
59430: ARRAY
59431: PUSH
59432: FOR_TO
59433: IFFALSE 59555
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59435: LD_ADDR_VAR 0 7
59439: PUSH
59440: LD_VAR 0 6
59444: PUSH
59445: LD_INT 1
59447: ARRAY
59448: PUSH
59449: LD_VAR 0 5
59453: ARRAY
59454: PUSH
59455: LD_VAR 0 6
59459: PUSH
59460: LD_INT 2
59462: ARRAY
59463: PUSH
59464: LD_VAR 0 5
59468: ARRAY
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59474: LD_VAR 0 7
59478: PUSH
59479: LD_INT 1
59481: ARRAY
59482: PPUSH
59483: LD_VAR 0 7
59487: PUSH
59488: LD_INT 2
59490: ARRAY
59491: PPUSH
59492: CALL_OW 428
59496: PUSH
59497: LD_INT 0
59499: EQUAL
59500: IFFALSE 59553
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59502: LD_VAR 0 1
59506: PPUSH
59507: LD_VAR 0 7
59511: PUSH
59512: LD_INT 1
59514: ARRAY
59515: PPUSH
59516: LD_VAR 0 7
59520: PUSH
59521: LD_INT 2
59523: ARRAY
59524: PPUSH
59525: LD_VAR 0 3
59529: PPUSH
59530: CALL_OW 48
// result := IsPlaced ( unit ) ;
59534: LD_ADDR_VAR 0 4
59538: PUSH
59539: LD_VAR 0 1
59543: PPUSH
59544: CALL_OW 305
59548: ST_TO_ADDR
// exit ;
59549: POP
59550: POP
59551: GO 59557
// end ; end ;
59553: GO 59432
59555: POP
59556: POP
// end ;
59557: LD_VAR 0 4
59561: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59562: LD_INT 0
59564: PPUSH
59565: PPUSH
59566: PPUSH
// if not side or side > 8 then
59567: LD_VAR 0 1
59571: NOT
59572: PUSH
59573: LD_VAR 0 1
59577: PUSH
59578: LD_INT 8
59580: GREATER
59581: OR
59582: IFFALSE 59586
// exit ;
59584: GO 59773
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59586: LD_ADDR_VAR 0 4
59590: PUSH
59591: LD_INT 22
59593: PUSH
59594: LD_VAR 0 1
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 21
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PPUSH
59617: CALL_OW 69
59621: ST_TO_ADDR
// if not tmp then
59622: LD_VAR 0 4
59626: NOT
59627: IFFALSE 59631
// exit ;
59629: GO 59773
// enable_addtolog := true ;
59631: LD_ADDR_OWVAR 81
59635: PUSH
59636: LD_INT 1
59638: ST_TO_ADDR
// AddToLog ( [ ) ;
59639: LD_STRING [
59641: PPUSH
59642: CALL_OW 561
// for i in tmp do
59646: LD_ADDR_VAR 0 3
59650: PUSH
59651: LD_VAR 0 4
59655: PUSH
59656: FOR_IN
59657: IFFALSE 59764
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59659: LD_STRING [
59661: PUSH
59662: LD_VAR 0 3
59666: PPUSH
59667: CALL_OW 266
59671: STR
59672: PUSH
59673: LD_STRING , 
59675: STR
59676: PUSH
59677: LD_VAR 0 3
59681: PPUSH
59682: CALL_OW 250
59686: STR
59687: PUSH
59688: LD_STRING , 
59690: STR
59691: PUSH
59692: LD_VAR 0 3
59696: PPUSH
59697: CALL_OW 251
59701: STR
59702: PUSH
59703: LD_STRING , 
59705: STR
59706: PUSH
59707: LD_VAR 0 3
59711: PPUSH
59712: CALL_OW 254
59716: STR
59717: PUSH
59718: LD_STRING , 
59720: STR
59721: PUSH
59722: LD_VAR 0 3
59726: PPUSH
59727: LD_INT 1
59729: PPUSH
59730: CALL_OW 268
59734: STR
59735: PUSH
59736: LD_STRING , 
59738: STR
59739: PUSH
59740: LD_VAR 0 3
59744: PPUSH
59745: LD_INT 2
59747: PPUSH
59748: CALL_OW 268
59752: STR
59753: PUSH
59754: LD_STRING ],
59756: STR
59757: PPUSH
59758: CALL_OW 561
// end ;
59762: GO 59656
59764: POP
59765: POP
// AddToLog ( ]; ) ;
59766: LD_STRING ];
59768: PPUSH
59769: CALL_OW 561
// end ;
59773: LD_VAR 0 2
59777: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
59778: LD_INT 0
59780: PPUSH
59781: PPUSH
59782: PPUSH
59783: PPUSH
59784: PPUSH
// if not area or not rate or not max then
59785: LD_VAR 0 1
59789: NOT
59790: PUSH
59791: LD_VAR 0 2
59795: NOT
59796: OR
59797: PUSH
59798: LD_VAR 0 4
59802: NOT
59803: OR
59804: IFFALSE 59808
// exit ;
59806: GO 60000
// while 1 do
59808: LD_INT 1
59810: IFFALSE 60000
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
59812: LD_ADDR_VAR 0 9
59816: PUSH
59817: LD_VAR 0 1
59821: PPUSH
59822: LD_INT 1
59824: PPUSH
59825: CALL_OW 287
59829: PUSH
59830: LD_INT 10
59832: MUL
59833: ST_TO_ADDR
// r := rate / 10 ;
59834: LD_ADDR_VAR 0 7
59838: PUSH
59839: LD_VAR 0 2
59843: PUSH
59844: LD_INT 10
59846: DIVREAL
59847: ST_TO_ADDR
// time := 1 1$00 ;
59848: LD_ADDR_VAR 0 8
59852: PUSH
59853: LD_INT 2100
59855: ST_TO_ADDR
// if amount < min then
59856: LD_VAR 0 9
59860: PUSH
59861: LD_VAR 0 3
59865: LESS
59866: IFFALSE 59884
// r := r * 2 else
59868: LD_ADDR_VAR 0 7
59872: PUSH
59873: LD_VAR 0 7
59877: PUSH
59878: LD_INT 2
59880: MUL
59881: ST_TO_ADDR
59882: GO 59910
// if amount > max then
59884: LD_VAR 0 9
59888: PUSH
59889: LD_VAR 0 4
59893: GREATER
59894: IFFALSE 59910
// r := r / 2 ;
59896: LD_ADDR_VAR 0 7
59900: PUSH
59901: LD_VAR 0 7
59905: PUSH
59906: LD_INT 2
59908: DIVREAL
59909: ST_TO_ADDR
// time := time / r ;
59910: LD_ADDR_VAR 0 8
59914: PUSH
59915: LD_VAR 0 8
59919: PUSH
59920: LD_VAR 0 7
59924: DIVREAL
59925: ST_TO_ADDR
// if time < 0 then
59926: LD_VAR 0 8
59930: PUSH
59931: LD_INT 0
59933: LESS
59934: IFFALSE 59951
// time := time * - 1 ;
59936: LD_ADDR_VAR 0 8
59940: PUSH
59941: LD_VAR 0 8
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: MUL
59950: ST_TO_ADDR
// wait ( time ) ;
59951: LD_VAR 0 8
59955: PPUSH
59956: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
59960: LD_INT 35
59962: PPUSH
59963: LD_INT 875
59965: PPUSH
59966: CALL_OW 12
59970: PPUSH
59971: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
59975: LD_INT 1
59977: PPUSH
59978: LD_INT 5
59980: PPUSH
59981: CALL_OW 12
59985: PPUSH
59986: LD_VAR 0 1
59990: PPUSH
59991: LD_INT 1
59993: PPUSH
59994: CALL_OW 55
// end ;
59998: GO 59808
// end ;
60000: LD_VAR 0 5
60004: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60005: LD_INT 0
60007: PPUSH
60008: PPUSH
60009: PPUSH
60010: PPUSH
60011: PPUSH
60012: PPUSH
60013: PPUSH
60014: PPUSH
// if not turrets or not factories then
60015: LD_VAR 0 1
60019: NOT
60020: PUSH
60021: LD_VAR 0 2
60025: NOT
60026: OR
60027: IFFALSE 60031
// exit ;
60029: GO 60338
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60031: LD_ADDR_VAR 0 10
60035: PUSH
60036: LD_INT 5
60038: PUSH
60039: LD_INT 6
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 4
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 3
60058: PUSH
60059: LD_INT 5
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 24
60073: PUSH
60074: LD_INT 25
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 23
60083: PUSH
60084: LD_INT 27
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 42
60097: PUSH
60098: LD_INT 43
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 44
60107: PUSH
60108: LD_INT 46
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 45
60117: PUSH
60118: LD_INT 47
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// result := [ ] ;
60135: LD_ADDR_VAR 0 3
60139: PUSH
60140: EMPTY
60141: ST_TO_ADDR
// for i in turrets do
60142: LD_ADDR_VAR 0 4
60146: PUSH
60147: LD_VAR 0 1
60151: PUSH
60152: FOR_IN
60153: IFFALSE 60336
// begin nat := GetNation ( i ) ;
60155: LD_ADDR_VAR 0 7
60159: PUSH
60160: LD_VAR 0 4
60164: PPUSH
60165: CALL_OW 248
60169: ST_TO_ADDR
// weapon := 0 ;
60170: LD_ADDR_VAR 0 8
60174: PUSH
60175: LD_INT 0
60177: ST_TO_ADDR
// if not nat then
60178: LD_VAR 0 7
60182: NOT
60183: IFFALSE 60187
// continue ;
60185: GO 60152
// for j in list [ nat ] do
60187: LD_ADDR_VAR 0 5
60191: PUSH
60192: LD_VAR 0 10
60196: PUSH
60197: LD_VAR 0 7
60201: ARRAY
60202: PUSH
60203: FOR_IN
60204: IFFALSE 60245
// if GetBWeapon ( i ) = j [ 1 ] then
60206: LD_VAR 0 4
60210: PPUSH
60211: CALL_OW 269
60215: PUSH
60216: LD_VAR 0 5
60220: PUSH
60221: LD_INT 1
60223: ARRAY
60224: EQUAL
60225: IFFALSE 60243
// begin weapon := j [ 2 ] ;
60227: LD_ADDR_VAR 0 8
60231: PUSH
60232: LD_VAR 0 5
60236: PUSH
60237: LD_INT 2
60239: ARRAY
60240: ST_TO_ADDR
// break ;
60241: GO 60245
// end ;
60243: GO 60203
60245: POP
60246: POP
// if not weapon then
60247: LD_VAR 0 8
60251: NOT
60252: IFFALSE 60256
// continue ;
60254: GO 60152
// for k in factories do
60256: LD_ADDR_VAR 0 6
60260: PUSH
60261: LD_VAR 0 2
60265: PUSH
60266: FOR_IN
60267: IFFALSE 60332
// begin weapons := AvailableWeaponList ( k ) ;
60269: LD_ADDR_VAR 0 9
60273: PUSH
60274: LD_VAR 0 6
60278: PPUSH
60279: CALL_OW 478
60283: ST_TO_ADDR
// if not weapons then
60284: LD_VAR 0 9
60288: NOT
60289: IFFALSE 60293
// continue ;
60291: GO 60266
// if weapon in weapons then
60293: LD_VAR 0 8
60297: PUSH
60298: LD_VAR 0 9
60302: IN
60303: IFFALSE 60330
// begin result := [ i , weapon ] ;
60305: LD_ADDR_VAR 0 3
60309: PUSH
60310: LD_VAR 0 4
60314: PUSH
60315: LD_VAR 0 8
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// exit ;
60324: POP
60325: POP
60326: POP
60327: POP
60328: GO 60338
// end ; end ;
60330: GO 60266
60332: POP
60333: POP
// end ;
60334: GO 60152
60336: POP
60337: POP
// end ;
60338: LD_VAR 0 3
60342: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60343: LD_INT 0
60345: PPUSH
// if not side or side > 8 then
60346: LD_VAR 0 3
60350: NOT
60351: PUSH
60352: LD_VAR 0 3
60356: PUSH
60357: LD_INT 8
60359: GREATER
60360: OR
60361: IFFALSE 60365
// exit ;
60363: GO 60424
// if not range then
60365: LD_VAR 0 4
60369: NOT
60370: IFFALSE 60381
// range := - 12 ;
60372: LD_ADDR_VAR 0 4
60376: PUSH
60377: LD_INT 12
60379: NEG
60380: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60381: LD_VAR 0 1
60385: PPUSH
60386: LD_VAR 0 2
60390: PPUSH
60391: LD_VAR 0 3
60395: PPUSH
60396: LD_VAR 0 4
60400: PPUSH
60401: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60405: LD_VAR 0 1
60409: PPUSH
60410: LD_VAR 0 2
60414: PPUSH
60415: LD_VAR 0 3
60419: PPUSH
60420: CALL_OW 331
// end ;
60424: LD_VAR 0 5
60428: RET
// export function Video ( mode ) ; begin
60429: LD_INT 0
60431: PPUSH
// ingame_video = mode ;
60432: LD_ADDR_OWVAR 52
60436: PUSH
60437: LD_VAR 0 1
60441: ST_TO_ADDR
// interface_hidden = mode ;
60442: LD_ADDR_OWVAR 54
60446: PUSH
60447: LD_VAR 0 1
60451: ST_TO_ADDR
// end ;
60452: LD_VAR 0 2
60456: RET
// export function Join ( array , element ) ; begin
60457: LD_INT 0
60459: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60460: LD_ADDR_VAR 0 3
60464: PUSH
60465: LD_VAR 0 1
60469: PPUSH
60470: LD_VAR 0 1
60474: PUSH
60475: LD_INT 1
60477: PLUS
60478: PPUSH
60479: LD_VAR 0 2
60483: PPUSH
60484: CALL_OW 1
60488: ST_TO_ADDR
// end ;
60489: LD_VAR 0 3
60493: RET
// export function JoinUnion ( array , element ) ; begin
60494: LD_INT 0
60496: PPUSH
// result := array union element ;
60497: LD_ADDR_VAR 0 3
60501: PUSH
60502: LD_VAR 0 1
60506: PUSH
60507: LD_VAR 0 2
60511: UNION
60512: ST_TO_ADDR
// end ;
60513: LD_VAR 0 3
60517: RET
// export function GetBehemoths ( side ) ; begin
60518: LD_INT 0
60520: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
60521: LD_ADDR_VAR 0 2
60525: PUSH
60526: LD_INT 22
60528: PUSH
60529: LD_VAR 0 1
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 31
60540: PUSH
60541: LD_INT 25
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PPUSH
60552: CALL_OW 69
60556: ST_TO_ADDR
// end ;
60557: LD_VAR 0 2
60561: RET
// export function Shuffle ( array ) ; var i , index ; begin
60562: LD_INT 0
60564: PPUSH
60565: PPUSH
60566: PPUSH
// result := [ ] ;
60567: LD_ADDR_VAR 0 2
60571: PUSH
60572: EMPTY
60573: ST_TO_ADDR
// if not array then
60574: LD_VAR 0 1
60578: NOT
60579: IFFALSE 60583
// exit ;
60581: GO 60682
// Randomize ;
60583: CALL_OW 10
// for i = array downto 1 do
60587: LD_ADDR_VAR 0 3
60591: PUSH
60592: DOUBLE
60593: LD_VAR 0 1
60597: INC
60598: ST_TO_ADDR
60599: LD_INT 1
60601: PUSH
60602: FOR_DOWNTO
60603: IFFALSE 60680
// begin index := rand ( 1 , array ) ;
60605: LD_ADDR_VAR 0 4
60609: PUSH
60610: LD_INT 1
60612: PPUSH
60613: LD_VAR 0 1
60617: PPUSH
60618: CALL_OW 12
60622: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60623: LD_ADDR_VAR 0 2
60627: PUSH
60628: LD_VAR 0 2
60632: PPUSH
60633: LD_VAR 0 2
60637: PUSH
60638: LD_INT 1
60640: PLUS
60641: PPUSH
60642: LD_VAR 0 1
60646: PUSH
60647: LD_VAR 0 4
60651: ARRAY
60652: PPUSH
60653: CALL_OW 2
60657: ST_TO_ADDR
// array := Delete ( array , index ) ;
60658: LD_ADDR_VAR 0 1
60662: PUSH
60663: LD_VAR 0 1
60667: PPUSH
60668: LD_VAR 0 4
60672: PPUSH
60673: CALL_OW 3
60677: ST_TO_ADDR
// end ;
60678: GO 60602
60680: POP
60681: POP
// end ;
60682: LD_VAR 0 2
60686: RET
// export function GetBaseMaterials ( base ) ; begin
60687: LD_INT 0
60689: PPUSH
// result := [ 0 , 0 , 0 ] ;
60690: LD_ADDR_VAR 0 2
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 0
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: LIST
60708: ST_TO_ADDR
// if not base then
60709: LD_VAR 0 1
60713: NOT
60714: IFFALSE 60718
// exit ;
60716: GO 60767
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60718: LD_ADDR_VAR 0 2
60722: PUSH
60723: LD_VAR 0 1
60727: PPUSH
60728: LD_INT 1
60730: PPUSH
60731: CALL_OW 275
60735: PUSH
60736: LD_VAR 0 1
60740: PPUSH
60741: LD_INT 2
60743: PPUSH
60744: CALL_OW 275
60748: PUSH
60749: LD_VAR 0 1
60753: PPUSH
60754: LD_INT 3
60756: PPUSH
60757: CALL_OW 275
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: ST_TO_ADDR
// end ;
60767: LD_VAR 0 2
60771: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
60772: LD_INT 0
60774: PPUSH
60775: PPUSH
// result := array ;
60776: LD_ADDR_VAR 0 3
60780: PUSH
60781: LD_VAR 0 1
60785: ST_TO_ADDR
// if size > 0 then
60786: LD_VAR 0 2
60790: PUSH
60791: LD_INT 0
60793: GREATER
60794: IFFALSE 60840
// for i := array downto size do
60796: LD_ADDR_VAR 0 4
60800: PUSH
60801: DOUBLE
60802: LD_VAR 0 1
60806: INC
60807: ST_TO_ADDR
60808: LD_VAR 0 2
60812: PUSH
60813: FOR_DOWNTO
60814: IFFALSE 60838
// result := Delete ( result , result ) ;
60816: LD_ADDR_VAR 0 3
60820: PUSH
60821: LD_VAR 0 3
60825: PPUSH
60826: LD_VAR 0 3
60830: PPUSH
60831: CALL_OW 3
60835: ST_TO_ADDR
60836: GO 60813
60838: POP
60839: POP
// end ;
60840: LD_VAR 0 3
60844: RET
// export function ComExit ( unit ) ; var tmp ; begin
60845: LD_INT 0
60847: PPUSH
60848: PPUSH
// if not IsInUnit ( unit ) then
60849: LD_VAR 0 1
60853: PPUSH
60854: CALL_OW 310
60858: NOT
60859: IFFALSE 60863
// exit ;
60861: GO 60923
// tmp := IsInUnit ( unit ) ;
60863: LD_ADDR_VAR 0 3
60867: PUSH
60868: LD_VAR 0 1
60872: PPUSH
60873: CALL_OW 310
60877: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
60878: LD_VAR 0 3
60882: PPUSH
60883: CALL_OW 247
60887: PUSH
60888: LD_INT 2
60890: EQUAL
60891: IFFALSE 60904
// ComExitVehicle ( unit ) else
60893: LD_VAR 0 1
60897: PPUSH
60898: CALL_OW 121
60902: GO 60913
// ComExitBuilding ( unit ) ;
60904: LD_VAR 0 1
60908: PPUSH
60909: CALL_OW 122
// result := tmp ;
60913: LD_ADDR_VAR 0 2
60917: PUSH
60918: LD_VAR 0 3
60922: ST_TO_ADDR
// end ;
60923: LD_VAR 0 2
60927: RET
// export function ResetHc ; begin
60928: LD_INT 0
60930: PPUSH
// InitHc ;
60931: CALL_OW 19
// hc_importance := 0 ;
60935: LD_ADDR_OWVAR 32
60939: PUSH
60940: LD_INT 0
60942: ST_TO_ADDR
// end ;
60943: LD_VAR 0 1
60947: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
60948: LD_INT 0
60950: PPUSH
60951: PPUSH
60952: PPUSH
// _x := ( x1 + x2 ) div 2 ;
60953: LD_ADDR_VAR 0 6
60957: PUSH
60958: LD_VAR 0 1
60962: PUSH
60963: LD_VAR 0 3
60967: PLUS
60968: PUSH
60969: LD_INT 2
60971: DIV
60972: ST_TO_ADDR
// if _x < 0 then
60973: LD_VAR 0 6
60977: PUSH
60978: LD_INT 0
60980: LESS
60981: IFFALSE 60998
// _x := _x * - 1 ;
60983: LD_ADDR_VAR 0 6
60987: PUSH
60988: LD_VAR 0 6
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: MUL
60997: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
60998: LD_ADDR_VAR 0 7
61002: PUSH
61003: LD_VAR 0 2
61007: PUSH
61008: LD_VAR 0 4
61012: PLUS
61013: PUSH
61014: LD_INT 2
61016: DIV
61017: ST_TO_ADDR
// if _y < 0 then
61018: LD_VAR 0 7
61022: PUSH
61023: LD_INT 0
61025: LESS
61026: IFFALSE 61043
// _y := _y * - 1 ;
61028: LD_ADDR_VAR 0 7
61032: PUSH
61033: LD_VAR 0 7
61037: PUSH
61038: LD_INT 1
61040: NEG
61041: MUL
61042: ST_TO_ADDR
// result := [ _x , _y ] ;
61043: LD_ADDR_VAR 0 5
61047: PUSH
61048: LD_VAR 0 6
61052: PUSH
61053: LD_VAR 0 7
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: ST_TO_ADDR
// end ;
61062: LD_VAR 0 5
61066: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61067: LD_INT 0
61069: PPUSH
61070: PPUSH
61071: PPUSH
61072: PPUSH
// task := GetTaskList ( unit ) ;
61073: LD_ADDR_VAR 0 7
61077: PUSH
61078: LD_VAR 0 1
61082: PPUSH
61083: CALL_OW 437
61087: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61088: LD_VAR 0 7
61092: NOT
61093: PUSH
61094: LD_VAR 0 1
61098: PPUSH
61099: LD_VAR 0 2
61103: PPUSH
61104: CALL_OW 308
61108: NOT
61109: AND
61110: IFFALSE 61114
// exit ;
61112: GO 61232
// if IsInArea ( unit , area ) then
61114: LD_VAR 0 1
61118: PPUSH
61119: LD_VAR 0 2
61123: PPUSH
61124: CALL_OW 308
61128: IFFALSE 61146
// begin ComMoveToArea ( unit , goAway ) ;
61130: LD_VAR 0 1
61134: PPUSH
61135: LD_VAR 0 3
61139: PPUSH
61140: CALL_OW 113
// exit ;
61144: GO 61232
// end ; if task [ 1 ] [ 1 ] <> M then
61146: LD_VAR 0 7
61150: PUSH
61151: LD_INT 1
61153: ARRAY
61154: PUSH
61155: LD_INT 1
61157: ARRAY
61158: PUSH
61159: LD_STRING M
61161: NONEQUAL
61162: IFFALSE 61166
// exit ;
61164: GO 61232
// x := task [ 1 ] [ 2 ] ;
61166: LD_ADDR_VAR 0 5
61170: PUSH
61171: LD_VAR 0 7
61175: PUSH
61176: LD_INT 1
61178: ARRAY
61179: PUSH
61180: LD_INT 2
61182: ARRAY
61183: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61184: LD_ADDR_VAR 0 6
61188: PUSH
61189: LD_VAR 0 7
61193: PUSH
61194: LD_INT 1
61196: ARRAY
61197: PUSH
61198: LD_INT 3
61200: ARRAY
61201: ST_TO_ADDR
// if InArea ( x , y , area ) then
61202: LD_VAR 0 5
61206: PPUSH
61207: LD_VAR 0 6
61211: PPUSH
61212: LD_VAR 0 2
61216: PPUSH
61217: CALL_OW 309
61221: IFFALSE 61232
// ComStop ( unit ) ;
61223: LD_VAR 0 1
61227: PPUSH
61228: CALL_OW 141
// end ;
61232: LD_VAR 0 4
61236: RET
// export function Abs ( value ) ; begin
61237: LD_INT 0
61239: PPUSH
// result := value ;
61240: LD_ADDR_VAR 0 2
61244: PUSH
61245: LD_VAR 0 1
61249: ST_TO_ADDR
// if value < 0 then
61250: LD_VAR 0 1
61254: PUSH
61255: LD_INT 0
61257: LESS
61258: IFFALSE 61275
// result := value * - 1 ;
61260: LD_ADDR_VAR 0 2
61264: PUSH
61265: LD_VAR 0 1
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: MUL
61274: ST_TO_ADDR
// end ;
61275: LD_VAR 0 2
61279: RET
