// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 57933 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 24570 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 24570 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 24570 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 29434 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 60221 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 29434 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 60221 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 29434 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6877: LD_VAR 0 1
6881: PUSH
6882: LD_EXP 14
6886: EQUAL
6887: IFFALSE 6896
// YouLost ( JMM ) ;
6889: LD_STRING JMM
6891: PPUSH
6892: CALL_OW 104
// if un = Burlak then
6896: LD_VAR 0 1
6900: PUSH
6901: LD_EXP 15
6905: EQUAL
6906: IFFALSE 6915
// YouLost ( Burlak ) ;
6908: LD_STRING Burlak
6910: PPUSH
6911: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6915: LD_VAR 0 1
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 23
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 69
6948: IN
6949: IFFALSE 6965
// killCounter := killCounter + 1 ;
6951: LD_ADDR_EXP 12
6955: PUSH
6956: LD_EXP 12
6960: PUSH
6961: LD_INT 1
6963: PLUS
6964: ST_TO_ADDR
// end ;
6965: PPOPN 1
6967: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 7
6975: EQUAL
6976: PUSH
6977: LD_VAR 0 1
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 31
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 30
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: IN
7026: AND
7027: IFFALSE 7043
// bunkerCounter := bunkerCounter + 1 ;
7029: LD_ADDR_EXP 13
7033: PUSH
7034: LD_EXP 13
7038: PUSH
7039: LD_INT 1
7041: PLUS
7042: ST_TO_ADDR
// end ;
7043: PPOPN 3
7045: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 255
7055: PUSH
7056: LD_INT 7
7058: EQUAL
7059: IFFALSE 7069
// artifactPickedUp := true ;
7061: LD_ADDR_EXP 6
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// end ;
7069: PPOPN 2
7071: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7072: LD_ADDR_EXP 6
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
7080: PPOPN 2
7082: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7083: LD_VAR 0 1
7087: PPUSH
7088: CALL_OW 255
7092: PUSH
7093: LD_INT 1
7095: NONEQUAL
7096: IFFALSE 7100
// exit ;
7098: GO 7147
// wait ( 0 0$5 ) ;
7100: LD_INT 175
7102: PPUSH
7103: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 263
7116: PUSH
7117: LD_INT 2
7119: EQUAL
7120: IFFALSE 7131
// Connect ( vehicle ) ;
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL 32527 0 1
// vehGuard := vehGuard ^ vehicle ;
7131: LD_ADDR_EXP 23
7135: PUSH
7136: LD_EXP 23
7140: PUSH
7141: LD_VAR 0 1
7145: ADD
7146: ST_TO_ADDR
// end ;
7147: PPOPN 2
7149: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7150: LD_VAR 0 1
7154: PUSH
7155: LD_INT 1
7157: EQUAL
7158: PUSH
7159: LD_EXP 7
7163: NOT
7164: AND
7165: IFFALSE 7200
// begin planCaptured := true ;
7167: LD_ADDR_EXP 7
7171: PUSH
7172: LD_INT 1
7174: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7175: LD_STRING MEnd
7177: PPUSH
7178: CALL_OW 337
// canEnd := true ;
7182: LD_ADDR_EXP 10
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// missionTime := tick ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_OWVAR 1
7199: ST_TO_ADDR
// end ; end ;
7200: PPOPN 3
7202: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL 20661 0 1
// end ; end_of_file
7212: PPOPN 1
7214: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7215: LD_INT 0
7217: PPUSH
// ar_miner := 81 ;
7218: LD_ADDR_EXP 31
7222: PUSH
7223: LD_INT 81
7225: ST_TO_ADDR
// ar_crane := 88 ;
7226: LD_ADDR_EXP 30
7230: PUSH
7231: LD_INT 88
7233: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7234: LD_ADDR_EXP 25
7238: PUSH
7239: LD_INT 89
7241: ST_TO_ADDR
// us_hack := 99 ;
7242: LD_ADDR_EXP 26
7246: PUSH
7247: LD_INT 99
7249: ST_TO_ADDR
// us_artillery := 97 ;
7250: LD_ADDR_EXP 27
7254: PUSH
7255: LD_INT 97
7257: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7258: LD_ADDR_EXP 28
7262: PUSH
7263: LD_INT 91
7265: ST_TO_ADDR
// ar_mortar := 92 ;
7266: LD_ADDR_EXP 29
7270: PUSH
7271: LD_INT 92
7273: ST_TO_ADDR
// ru_radar := 98 ;
7274: LD_ADDR_EXP 24
7278: PUSH
7279: LD_INT 98
7281: ST_TO_ADDR
// tech_Artillery := 80 ;
7282: LD_ADDR_EXP 32
7286: PUSH
7287: LD_INT 80
7289: ST_TO_ADDR
// tech_RadMat := 81 ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 81
7297: ST_TO_ADDR
// tech_BasicTools := 82 ;
7298: LD_ADDR_EXP 34
7302: PUSH
7303: LD_INT 82
7305: ST_TO_ADDR
// tech_Cargo := 83 ;
7306: LD_ADDR_EXP 35
7310: PUSH
7311: LD_INT 83
7313: ST_TO_ADDR
// tech_Track := 84 ;
7314: LD_ADDR_EXP 36
7318: PUSH
7319: LD_INT 84
7321: ST_TO_ADDR
// tech_Crane := 85 ;
7322: LD_ADDR_EXP 37
7326: PUSH
7327: LD_INT 85
7329: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7330: LD_ADDR_EXP 38
7334: PUSH
7335: LD_INT 86
7337: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7338: LD_ADDR_EXP 39
7342: PUSH
7343: LD_INT 87
7345: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7346: LD_ADDR_EXP 40
7350: PUSH
7351: LD_INT 88
7353: ST_TO_ADDR
// class_mastodont := 31 ;
7354: LD_ADDR_EXP 41
7358: PUSH
7359: LD_INT 31
7361: ST_TO_ADDR
// class_horse := 21 ;
7362: LD_ADDR_EXP 42
7366: PUSH
7367: LD_INT 21
7369: ST_TO_ADDR
// end ;
7370: LD_VAR 0 1
7374: RET
// every 1 do
7375: GO 7377
7377: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7378: CALL 7215 0 0
7382: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7383: LD_INT 0
7385: PPUSH
// if p2 = 100 then
7386: LD_VAR 0 2
7390: PUSH
7391: LD_INT 100
7393: EQUAL
7394: IFFALSE 8343
// begin if not StreamModeActive then
7396: LD_EXP 43
7400: NOT
7401: IFFALSE 7411
// StreamModeActive := true ;
7403: LD_ADDR_EXP 43
7407: PUSH
7408: LD_INT 1
7410: ST_TO_ADDR
// if p3 = 0 then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 0
7418: EQUAL
7419: IFFALSE 7425
// InitStreamMode ;
7421: CALL 8503 0 0
// if p3 = 1 then
7425: LD_VAR 0 3
7429: PUSH
7430: LD_INT 1
7432: EQUAL
7433: IFFALSE 7443
// sRocket := true ;
7435: LD_ADDR_EXP 48
7439: PUSH
7440: LD_INT 1
7442: ST_TO_ADDR
// if p3 = 2 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 2
7450: EQUAL
7451: IFFALSE 7461
// sSpeed := true ;
7453: LD_ADDR_EXP 47
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// if p3 = 3 then
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 3
7468: EQUAL
7469: IFFALSE 7479
// sEngine := true ;
7471: LD_ADDR_EXP 49
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// if p3 = 4 then
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 4
7486: EQUAL
7487: IFFALSE 7497
// sSpec := true ;
7489: LD_ADDR_EXP 46
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 5 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 5
7504: EQUAL
7505: IFFALSE 7515
// sLevel := true ;
7507: LD_ADDR_EXP 50
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// if p3 = 6 then
7515: LD_VAR 0 3
7519: PUSH
7520: LD_INT 6
7522: EQUAL
7523: IFFALSE 7533
// sArmoury := true ;
7525: LD_ADDR_EXP 51
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// if p3 = 7 then
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 7
7540: EQUAL
7541: IFFALSE 7551
// sRadar := true ;
7543: LD_ADDR_EXP 52
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// if p3 = 8 then
7551: LD_VAR 0 3
7555: PUSH
7556: LD_INT 8
7558: EQUAL
7559: IFFALSE 7569
// sBunker := true ;
7561: LD_ADDR_EXP 53
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if p3 = 9 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 9
7576: EQUAL
7577: IFFALSE 7587
// sHack := true ;
7579: LD_ADDR_EXP 54
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// if p3 = 10 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 10
7594: EQUAL
7595: IFFALSE 7605
// sFire := true ;
7597: LD_ADDR_EXP 55
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 11 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 11
7612: EQUAL
7613: IFFALSE 7623
// sRefresh := true ;
7615: LD_ADDR_EXP 56
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if p3 = 12 then
7623: LD_VAR 0 3
7627: PUSH
7628: LD_INT 12
7630: EQUAL
7631: IFFALSE 7641
// sExp := true ;
7633: LD_ADDR_EXP 57
7637: PUSH
7638: LD_INT 1
7640: ST_TO_ADDR
// if p3 = 13 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 13
7648: EQUAL
7649: IFFALSE 7659
// sDepot := true ;
7651: LD_ADDR_EXP 58
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// if p3 = 14 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 14
7666: EQUAL
7667: IFFALSE 7677
// sFlag := true ;
7669: LD_ADDR_EXP 59
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// if p3 = 15 then
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 15
7684: EQUAL
7685: IFFALSE 7695
// sKamikadze := true ;
7687: LD_ADDR_EXP 67
7691: PUSH
7692: LD_INT 1
7694: ST_TO_ADDR
// if p3 = 16 then
7695: LD_VAR 0 3
7699: PUSH
7700: LD_INT 16
7702: EQUAL
7703: IFFALSE 7713
// sTroll := true ;
7705: LD_ADDR_EXP 68
7709: PUSH
7710: LD_INT 1
7712: ST_TO_ADDR
// if p3 = 17 then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 17
7720: EQUAL
7721: IFFALSE 7731
// sSlow := true ;
7723: LD_ADDR_EXP 69
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if p3 = 18 then
7731: LD_VAR 0 3
7735: PUSH
7736: LD_INT 18
7738: EQUAL
7739: IFFALSE 7749
// sLack := true ;
7741: LD_ADDR_EXP 70
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// if p3 = 19 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 19
7756: EQUAL
7757: IFFALSE 7767
// sTank := true ;
7759: LD_ADDR_EXP 72
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// if p3 = 20 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 20
7774: EQUAL
7775: IFFALSE 7785
// sRemote := true ;
7777: LD_ADDR_EXP 73
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// if p3 = 21 then
7785: LD_VAR 0 3
7789: PUSH
7790: LD_INT 21
7792: EQUAL
7793: IFFALSE 7803
// sPowell := true ;
7795: LD_ADDR_EXP 74
7799: PUSH
7800: LD_INT 1
7802: ST_TO_ADDR
// if p3 = 22 then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_INT 22
7810: EQUAL
7811: IFFALSE 7821
// sTeleport := true ;
7813: LD_ADDR_EXP 77
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// if p3 = 23 then
7821: LD_VAR 0 3
7825: PUSH
7826: LD_INT 23
7828: EQUAL
7829: IFFALSE 7839
// sOilTower := true ;
7831: LD_ADDR_EXP 79
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// if p3 = 24 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 24
7846: EQUAL
7847: IFFALSE 7857
// sShovel := true ;
7849: LD_ADDR_EXP 80
7853: PUSH
7854: LD_INT 1
7856: ST_TO_ADDR
// if p3 = 25 then
7857: LD_VAR 0 3
7861: PUSH
7862: LD_INT 25
7864: EQUAL
7865: IFFALSE 7875
// sSheik := true ;
7867: LD_ADDR_EXP 81
7871: PUSH
7872: LD_INT 1
7874: ST_TO_ADDR
// if p3 = 26 then
7875: LD_VAR 0 3
7879: PUSH
7880: LD_INT 26
7882: EQUAL
7883: IFFALSE 7893
// sEarthquake := true ;
7885: LD_ADDR_EXP 83
7889: PUSH
7890: LD_INT 1
7892: ST_TO_ADDR
// if p3 = 27 then
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 27
7900: EQUAL
7901: IFFALSE 7911
// sAI := true ;
7903: LD_ADDR_EXP 84
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// if p3 = 28 then
7911: LD_VAR 0 3
7915: PUSH
7916: LD_INT 28
7918: EQUAL
7919: IFFALSE 7929
// sCargo := true ;
7921: LD_ADDR_EXP 87
7925: PUSH
7926: LD_INT 1
7928: ST_TO_ADDR
// if p3 = 29 then
7929: LD_VAR 0 3
7933: PUSH
7934: LD_INT 29
7936: EQUAL
7937: IFFALSE 7947
// sDLaser := true ;
7939: LD_ADDR_EXP 88
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// if p3 = 30 then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 30
7954: EQUAL
7955: IFFALSE 7965
// sExchange := true ;
7957: LD_ADDR_EXP 89
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// if p3 = 31 then
7965: LD_VAR 0 3
7969: PUSH
7970: LD_INT 31
7972: EQUAL
7973: IFFALSE 7983
// sFac := true ;
7975: LD_ADDR_EXP 90
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// if p3 = 32 then
7983: LD_VAR 0 3
7987: PUSH
7988: LD_INT 32
7990: EQUAL
7991: IFFALSE 8001
// sPower := true ;
7993: LD_ADDR_EXP 91
7997: PUSH
7998: LD_INT 1
8000: ST_TO_ADDR
// if p3 = 33 then
8001: LD_VAR 0 3
8005: PUSH
8006: LD_INT 33
8008: EQUAL
8009: IFFALSE 8019
// sRandom := true ;
8011: LD_ADDR_EXP 92
8015: PUSH
8016: LD_INT 1
8018: ST_TO_ADDR
// if p3 = 34 then
8019: LD_VAR 0 3
8023: PUSH
8024: LD_INT 34
8026: EQUAL
8027: IFFALSE 8037
// sShield := true ;
8029: LD_ADDR_EXP 93
8033: PUSH
8034: LD_INT 1
8036: ST_TO_ADDR
// if p3 = 35 then
8037: LD_VAR 0 3
8041: PUSH
8042: LD_INT 35
8044: EQUAL
8045: IFFALSE 8055
// sTime := true ;
8047: LD_ADDR_EXP 94
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// if p3 = 36 then
8055: LD_VAR 0 3
8059: PUSH
8060: LD_INT 36
8062: EQUAL
8063: IFFALSE 8073
// sTools := true ;
8065: LD_ADDR_EXP 95
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// if p3 = 101 then
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 101
8080: EQUAL
8081: IFFALSE 8091
// sSold := true ;
8083: LD_ADDR_EXP 60
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// if p3 = 102 then
8091: LD_VAR 0 3
8095: PUSH
8096: LD_INT 102
8098: EQUAL
8099: IFFALSE 8109
// sDiff := true ;
8101: LD_ADDR_EXP 61
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// if p3 = 103 then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_INT 103
8116: EQUAL
8117: IFFALSE 8127
// sFog := true ;
8119: LD_ADDR_EXP 64
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// if p3 = 104 then
8127: LD_VAR 0 3
8131: PUSH
8132: LD_INT 104
8134: EQUAL
8135: IFFALSE 8145
// sReset := true ;
8137: LD_ADDR_EXP 65
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// if p3 = 105 then
8145: LD_VAR 0 3
8149: PUSH
8150: LD_INT 105
8152: EQUAL
8153: IFFALSE 8163
// sSun := true ;
8155: LD_ADDR_EXP 66
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// if p3 = 106 then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 106
8170: EQUAL
8171: IFFALSE 8181
// sTiger := true ;
8173: LD_ADDR_EXP 62
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// if p3 = 107 then
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 107
8188: EQUAL
8189: IFFALSE 8199
// sBomb := true ;
8191: LD_ADDR_EXP 63
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// if p3 = 108 then
8199: LD_VAR 0 3
8203: PUSH
8204: LD_INT 108
8206: EQUAL
8207: IFFALSE 8217
// sWound := true ;
8209: LD_ADDR_EXP 71
8213: PUSH
8214: LD_INT 1
8216: ST_TO_ADDR
// if p3 = 109 then
8217: LD_VAR 0 3
8221: PUSH
8222: LD_INT 109
8224: EQUAL
8225: IFFALSE 8235
// sBetray := true ;
8227: LD_ADDR_EXP 75
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// if p3 = 110 then
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 110
8242: EQUAL
8243: IFFALSE 8253
// sContamin := true ;
8245: LD_ADDR_EXP 76
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// if p3 = 111 then
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 111
8260: EQUAL
8261: IFFALSE 8271
// sOil := true ;
8263: LD_ADDR_EXP 78
8267: PUSH
8268: LD_INT 1
8270: ST_TO_ADDR
// if p3 = 112 then
8271: LD_VAR 0 3
8275: PUSH
8276: LD_INT 112
8278: EQUAL
8279: IFFALSE 8289
// sStu := true ;
8281: LD_ADDR_EXP 82
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// if p3 = 113 then
8289: LD_VAR 0 3
8293: PUSH
8294: LD_INT 113
8296: EQUAL
8297: IFFALSE 8307
// sBazooka := true ;
8299: LD_ADDR_EXP 85
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// if p3 = 114 then
8307: LD_VAR 0 3
8311: PUSH
8312: LD_INT 114
8314: EQUAL
8315: IFFALSE 8325
// sMortar := true ;
8317: LD_ADDR_EXP 86
8321: PUSH
8322: LD_INT 1
8324: ST_TO_ADDR
// if p3 = 115 then
8325: LD_VAR 0 3
8329: PUSH
8330: LD_INT 115
8332: EQUAL
8333: IFFALSE 8343
// sRanger := true ;
8335: LD_ADDR_EXP 96
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// end ; if p2 = 101 then
8343: LD_VAR 0 2
8347: PUSH
8348: LD_INT 101
8350: EQUAL
8351: IFFALSE 8479
// begin case p3 of 1 :
8353: LD_VAR 0 3
8357: PUSH
8358: LD_INT 1
8360: DOUBLE
8361: EQUAL
8362: IFTRUE 8366
8364: GO 8373
8366: POP
// hHackUnlimitedResources ; 2 :
8367: CALL 19516 0 0
8371: GO 8479
8373: LD_INT 2
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8388
8381: POP
// hHackSetLevel10 ; 3 :
8382: CALL 19649 0 0
8386: GO 8479
8388: LD_INT 3
8390: DOUBLE
8391: EQUAL
8392: IFTRUE 8396
8394: GO 8403
8396: POP
// hHackSetLevel10YourUnits ; 4 :
8397: CALL 19734 0 0
8401: GO 8479
8403: LD_INT 4
8405: DOUBLE
8406: EQUAL
8407: IFTRUE 8411
8409: GO 8418
8411: POP
// hHackInvincible ; 5 :
8412: CALL 20182 0 0
8416: GO 8479
8418: LD_INT 5
8420: DOUBLE
8421: EQUAL
8422: IFTRUE 8426
8424: GO 8433
8426: POP
// hHackInvisible ; 6 :
8427: CALL 20293 0 0
8431: GO 8479
8433: LD_INT 6
8435: DOUBLE
8436: EQUAL
8437: IFTRUE 8441
8439: GO 8448
8441: POP
// hHackChangeYourSide ; 7 :
8442: CALL 20350 0 0
8446: GO 8479
8448: LD_INT 7
8450: DOUBLE
8451: EQUAL
8452: IFTRUE 8456
8454: GO 8463
8456: POP
// hHackChangeUnitSide ; 8 :
8457: CALL 20392 0 0
8461: GO 8479
8463: LD_INT 8
8465: DOUBLE
8466: EQUAL
8467: IFTRUE 8471
8469: GO 8478
8471: POP
// hHackFog ; end ;
8472: CALL 20493 0 0
8476: GO 8479
8478: POP
// end ; end ;
8479: LD_VAR 0 7
8483: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8484: GO 8486
8486: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8487: LD_STRING initStreamRollete();
8489: PPUSH
8490: CALL_OW 559
// InitStreamMode ;
8494: CALL 8503 0 0
// DefineStreamItems ( ) ;
8498: CALL 8943 0 0
// end ;
8502: END
// function InitStreamMode ; begin
8503: LD_INT 0
8505: PPUSH
// streamModeActive := false ;
8506: LD_ADDR_EXP 43
8510: PUSH
8511: LD_INT 0
8513: ST_TO_ADDR
// normalCounter := 36 ;
8514: LD_ADDR_EXP 44
8518: PUSH
8519: LD_INT 36
8521: ST_TO_ADDR
// hardcoreCounter := 16 ;
8522: LD_ADDR_EXP 45
8526: PUSH
8527: LD_INT 16
8529: ST_TO_ADDR
// sRocket := false ;
8530: LD_ADDR_EXP 48
8534: PUSH
8535: LD_INT 0
8537: ST_TO_ADDR
// sSpeed := false ;
8538: LD_ADDR_EXP 47
8542: PUSH
8543: LD_INT 0
8545: ST_TO_ADDR
// sEngine := false ;
8546: LD_ADDR_EXP 49
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// sSpec := false ;
8554: LD_ADDR_EXP 46
8558: PUSH
8559: LD_INT 0
8561: ST_TO_ADDR
// sLevel := false ;
8562: LD_ADDR_EXP 50
8566: PUSH
8567: LD_INT 0
8569: ST_TO_ADDR
// sArmoury := false ;
8570: LD_ADDR_EXP 51
8574: PUSH
8575: LD_INT 0
8577: ST_TO_ADDR
// sRadar := false ;
8578: LD_ADDR_EXP 52
8582: PUSH
8583: LD_INT 0
8585: ST_TO_ADDR
// sBunker := false ;
8586: LD_ADDR_EXP 53
8590: PUSH
8591: LD_INT 0
8593: ST_TO_ADDR
// sHack := false ;
8594: LD_ADDR_EXP 54
8598: PUSH
8599: LD_INT 0
8601: ST_TO_ADDR
// sFire := false ;
8602: LD_ADDR_EXP 55
8606: PUSH
8607: LD_INT 0
8609: ST_TO_ADDR
// sRefresh := false ;
8610: LD_ADDR_EXP 56
8614: PUSH
8615: LD_INT 0
8617: ST_TO_ADDR
// sExp := false ;
8618: LD_ADDR_EXP 57
8622: PUSH
8623: LD_INT 0
8625: ST_TO_ADDR
// sDepot := false ;
8626: LD_ADDR_EXP 58
8630: PUSH
8631: LD_INT 0
8633: ST_TO_ADDR
// sFlag := false ;
8634: LD_ADDR_EXP 59
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sKamikadze := false ;
8642: LD_ADDR_EXP 67
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// sTroll := false ;
8650: LD_ADDR_EXP 68
8654: PUSH
8655: LD_INT 0
8657: ST_TO_ADDR
// sSlow := false ;
8658: LD_ADDR_EXP 69
8662: PUSH
8663: LD_INT 0
8665: ST_TO_ADDR
// sLack := false ;
8666: LD_ADDR_EXP 70
8670: PUSH
8671: LD_INT 0
8673: ST_TO_ADDR
// sTank := false ;
8674: LD_ADDR_EXP 72
8678: PUSH
8679: LD_INT 0
8681: ST_TO_ADDR
// sRemote := false ;
8682: LD_ADDR_EXP 73
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// sPowell := false ;
8690: LD_ADDR_EXP 74
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// sTeleport := false ;
8698: LD_ADDR_EXP 77
8702: PUSH
8703: LD_INT 0
8705: ST_TO_ADDR
// sOilTower := false ;
8706: LD_ADDR_EXP 79
8710: PUSH
8711: LD_INT 0
8713: ST_TO_ADDR
// sShovel := false ;
8714: LD_ADDR_EXP 80
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sSheik := false ;
8722: LD_ADDR_EXP 81
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sEarthquake := false ;
8730: LD_ADDR_EXP 83
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sAI := false ;
8738: LD_ADDR_EXP 84
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sCargo := false ;
8746: LD_ADDR_EXP 87
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sDLaser := false ;
8754: LD_ADDR_EXP 88
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sExchange := false ;
8762: LD_ADDR_EXP 89
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sFac := false ;
8770: LD_ADDR_EXP 90
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sPower := false ;
8778: LD_ADDR_EXP 91
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sRandom := false ;
8786: LD_ADDR_EXP 92
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sShield := false ;
8794: LD_ADDR_EXP 93
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sTime := false ;
8802: LD_ADDR_EXP 94
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sTools := false ;
8810: LD_ADDR_EXP 95
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sSold := false ;
8818: LD_ADDR_EXP 60
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sDiff := false ;
8826: LD_ADDR_EXP 61
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// sFog := false ;
8834: LD_ADDR_EXP 64
8838: PUSH
8839: LD_INT 0
8841: ST_TO_ADDR
// sReset := false ;
8842: LD_ADDR_EXP 65
8846: PUSH
8847: LD_INT 0
8849: ST_TO_ADDR
// sSun := false ;
8850: LD_ADDR_EXP 66
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// sTiger := false ;
8858: LD_ADDR_EXP 62
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// sBomb := false ;
8866: LD_ADDR_EXP 63
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// sWound := false ;
8874: LD_ADDR_EXP 71
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// sBetray := false ;
8882: LD_ADDR_EXP 75
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// sContamin := false ;
8890: LD_ADDR_EXP 76
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// sOil := false ;
8898: LD_ADDR_EXP 78
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// sStu := false ;
8906: LD_ADDR_EXP 82
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// sBazooka := false ;
8914: LD_ADDR_EXP 85
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// sMortar := false ;
8922: LD_ADDR_EXP 86
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// sRanger := false ;
8930: LD_ADDR_EXP 96
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// end ;
8938: LD_VAR 0 1
8942: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8943: LD_INT 0
8945: PPUSH
8946: PPUSH
8947: PPUSH
8948: PPUSH
8949: PPUSH
// result := [ ] ;
8950: LD_ADDR_VAR 0 1
8954: PUSH
8955: EMPTY
8956: ST_TO_ADDR
// if campaign_id = 1 then
8957: LD_OWVAR 69
8961: PUSH
8962: LD_INT 1
8964: EQUAL
8965: IFFALSE 11903
// begin case mission_number of 1 :
8967: LD_OWVAR 70
8971: PUSH
8972: LD_INT 1
8974: DOUBLE
8975: EQUAL
8976: IFTRUE 8980
8978: GO 9044
8980: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8981: LD_ADDR_VAR 0 1
8985: PUSH
8986: LD_INT 2
8988: PUSH
8989: LD_INT 4
8991: PUSH
8992: LD_INT 11
8994: PUSH
8995: LD_INT 12
8997: PUSH
8998: LD_INT 15
9000: PUSH
9001: LD_INT 16
9003: PUSH
9004: LD_INT 22
9006: PUSH
9007: LD_INT 23
9009: PUSH
9010: LD_INT 26
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: LD_INT 101
9026: PUSH
9027: LD_INT 102
9029: PUSH
9030: LD_INT 106
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: ST_TO_ADDR
9042: GO 11901
9044: LD_INT 2
9046: DOUBLE
9047: EQUAL
9048: IFTRUE 9052
9050: GO 9124
9052: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9053: LD_ADDR_VAR 0 1
9057: PUSH
9058: LD_INT 2
9060: PUSH
9061: LD_INT 4
9063: PUSH
9064: LD_INT 11
9066: PUSH
9067: LD_INT 12
9069: PUSH
9070: LD_INT 15
9072: PUSH
9073: LD_INT 16
9075: PUSH
9076: LD_INT 22
9078: PUSH
9079: LD_INT 23
9081: PUSH
9082: LD_INT 26
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 101
9098: PUSH
9099: LD_INT 102
9101: PUSH
9102: LD_INT 105
9104: PUSH
9105: LD_INT 106
9107: PUSH
9108: LD_INT 108
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: ST_TO_ADDR
9122: GO 11901
9124: LD_INT 3
9126: DOUBLE
9127: EQUAL
9128: IFTRUE 9132
9130: GO 9208
9132: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9133: LD_ADDR_VAR 0 1
9137: PUSH
9138: LD_INT 2
9140: PUSH
9141: LD_INT 4
9143: PUSH
9144: LD_INT 5
9146: PUSH
9147: LD_INT 11
9149: PUSH
9150: LD_INT 12
9152: PUSH
9153: LD_INT 15
9155: PUSH
9156: LD_INT 16
9158: PUSH
9159: LD_INT 22
9161: PUSH
9162: LD_INT 26
9164: PUSH
9165: LD_INT 36
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: PUSH
9180: LD_INT 101
9182: PUSH
9183: LD_INT 102
9185: PUSH
9186: LD_INT 105
9188: PUSH
9189: LD_INT 106
9191: PUSH
9192: LD_INT 108
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: ST_TO_ADDR
9206: GO 11901
9208: LD_INT 4
9210: DOUBLE
9211: EQUAL
9212: IFTRUE 9216
9214: GO 9300
9216: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9217: LD_ADDR_VAR 0 1
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 4
9227: PUSH
9228: LD_INT 5
9230: PUSH
9231: LD_INT 8
9233: PUSH
9234: LD_INT 11
9236: PUSH
9237: LD_INT 12
9239: PUSH
9240: LD_INT 15
9242: PUSH
9243: LD_INT 16
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 23
9251: PUSH
9252: LD_INT 26
9254: PUSH
9255: LD_INT 36
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: PUSH
9272: LD_INT 101
9274: PUSH
9275: LD_INT 102
9277: PUSH
9278: LD_INT 105
9280: PUSH
9281: LD_INT 106
9283: PUSH
9284: LD_INT 108
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: ST_TO_ADDR
9298: GO 11901
9300: LD_INT 5
9302: DOUBLE
9303: EQUAL
9304: IFTRUE 9308
9306: GO 9408
9308: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9309: LD_ADDR_VAR 0 1
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: LD_INT 4
9319: PUSH
9320: LD_INT 5
9322: PUSH
9323: LD_INT 6
9325: PUSH
9326: LD_INT 8
9328: PUSH
9329: LD_INT 11
9331: PUSH
9332: LD_INT 12
9334: PUSH
9335: LD_INT 15
9337: PUSH
9338: LD_INT 16
9340: PUSH
9341: LD_INT 22
9343: PUSH
9344: LD_INT 23
9346: PUSH
9347: LD_INT 25
9349: PUSH
9350: LD_INT 26
9352: PUSH
9353: LD_INT 36
9355: PUSH
9356: EMPTY
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 101
9374: PUSH
9375: LD_INT 102
9377: PUSH
9378: LD_INT 105
9380: PUSH
9381: LD_INT 106
9383: PUSH
9384: LD_INT 108
9386: PUSH
9387: LD_INT 109
9389: PUSH
9390: LD_INT 112
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: ST_TO_ADDR
9406: GO 11901
9408: LD_INT 6
9410: DOUBLE
9411: EQUAL
9412: IFTRUE 9416
9414: GO 9536
9416: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9417: LD_ADDR_VAR 0 1
9421: PUSH
9422: LD_INT 2
9424: PUSH
9425: LD_INT 4
9427: PUSH
9428: LD_INT 5
9430: PUSH
9431: LD_INT 6
9433: PUSH
9434: LD_INT 8
9436: PUSH
9437: LD_INT 11
9439: PUSH
9440: LD_INT 12
9442: PUSH
9443: LD_INT 15
9445: PUSH
9446: LD_INT 16
9448: PUSH
9449: LD_INT 20
9451: PUSH
9452: LD_INT 21
9454: PUSH
9455: LD_INT 22
9457: PUSH
9458: LD_INT 23
9460: PUSH
9461: LD_INT 25
9463: PUSH
9464: LD_INT 26
9466: PUSH
9467: LD_INT 30
9469: PUSH
9470: LD_INT 31
9472: PUSH
9473: LD_INT 32
9475: PUSH
9476: LD_INT 36
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: PUSH
9500: LD_INT 101
9502: PUSH
9503: LD_INT 102
9505: PUSH
9506: LD_INT 105
9508: PUSH
9509: LD_INT 106
9511: PUSH
9512: LD_INT 108
9514: PUSH
9515: LD_INT 109
9517: PUSH
9518: LD_INT 112
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: ST_TO_ADDR
9534: GO 11901
9536: LD_INT 7
9538: DOUBLE
9539: EQUAL
9540: IFTRUE 9544
9542: GO 9644
9544: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9545: LD_ADDR_VAR 0 1
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: LD_INT 4
9555: PUSH
9556: LD_INT 5
9558: PUSH
9559: LD_INT 7
9561: PUSH
9562: LD_INT 11
9564: PUSH
9565: LD_INT 12
9567: PUSH
9568: LD_INT 15
9570: PUSH
9571: LD_INT 16
9573: PUSH
9574: LD_INT 20
9576: PUSH
9577: LD_INT 21
9579: PUSH
9580: LD_INT 22
9582: PUSH
9583: LD_INT 23
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 26
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 101
9610: PUSH
9611: LD_INT 102
9613: PUSH
9614: LD_INT 103
9616: PUSH
9617: LD_INT 105
9619: PUSH
9620: LD_INT 106
9622: PUSH
9623: LD_INT 108
9625: PUSH
9626: LD_INT 112
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: ST_TO_ADDR
9642: GO 11901
9644: LD_INT 8
9646: DOUBLE
9647: EQUAL
9648: IFTRUE 9652
9650: GO 9780
9652: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9653: LD_ADDR_VAR 0 1
9657: PUSH
9658: LD_INT 2
9660: PUSH
9661: LD_INT 4
9663: PUSH
9664: LD_INT 5
9666: PUSH
9667: LD_INT 6
9669: PUSH
9670: LD_INT 7
9672: PUSH
9673: LD_INT 8
9675: PUSH
9676: LD_INT 11
9678: PUSH
9679: LD_INT 12
9681: PUSH
9682: LD_INT 15
9684: PUSH
9685: LD_INT 16
9687: PUSH
9688: LD_INT 20
9690: PUSH
9691: LD_INT 21
9693: PUSH
9694: LD_INT 22
9696: PUSH
9697: LD_INT 23
9699: PUSH
9700: LD_INT 25
9702: PUSH
9703: LD_INT 26
9705: PUSH
9706: LD_INT 30
9708: PUSH
9709: LD_INT 31
9711: PUSH
9712: LD_INT 32
9714: PUSH
9715: LD_INT 36
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: PUSH
9740: LD_INT 101
9742: PUSH
9743: LD_INT 102
9745: PUSH
9746: LD_INT 103
9748: PUSH
9749: LD_INT 105
9751: PUSH
9752: LD_INT 106
9754: PUSH
9755: LD_INT 108
9757: PUSH
9758: LD_INT 109
9760: PUSH
9761: LD_INT 112
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: EMPTY
9775: LIST
9776: LIST
9777: ST_TO_ADDR
9778: GO 11901
9780: LD_INT 9
9782: DOUBLE
9783: EQUAL
9784: IFTRUE 9788
9786: GO 9924
9788: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9789: LD_ADDR_VAR 0 1
9793: PUSH
9794: LD_INT 2
9796: PUSH
9797: LD_INT 4
9799: PUSH
9800: LD_INT 5
9802: PUSH
9803: LD_INT 6
9805: PUSH
9806: LD_INT 7
9808: PUSH
9809: LD_INT 8
9811: PUSH
9812: LD_INT 11
9814: PUSH
9815: LD_INT 12
9817: PUSH
9818: LD_INT 15
9820: PUSH
9821: LD_INT 16
9823: PUSH
9824: LD_INT 20
9826: PUSH
9827: LD_INT 21
9829: PUSH
9830: LD_INT 22
9832: PUSH
9833: LD_INT 23
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 26
9841: PUSH
9842: LD_INT 28
9844: PUSH
9845: LD_INT 30
9847: PUSH
9848: LD_INT 31
9850: PUSH
9851: LD_INT 32
9853: PUSH
9854: LD_INT 36
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 101
9882: PUSH
9883: LD_INT 102
9885: PUSH
9886: LD_INT 103
9888: PUSH
9889: LD_INT 105
9891: PUSH
9892: LD_INT 106
9894: PUSH
9895: LD_INT 108
9897: PUSH
9898: LD_INT 109
9900: PUSH
9901: LD_INT 112
9903: PUSH
9904: LD_INT 114
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: ST_TO_ADDR
9922: GO 11901
9924: LD_INT 10
9926: DOUBLE
9927: EQUAL
9928: IFTRUE 9932
9930: GO 10116
9932: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9933: LD_ADDR_VAR 0 1
9937: PUSH
9938: LD_INT 2
9940: PUSH
9941: LD_INT 4
9943: PUSH
9944: LD_INT 5
9946: PUSH
9947: LD_INT 6
9949: PUSH
9950: LD_INT 7
9952: PUSH
9953: LD_INT 8
9955: PUSH
9956: LD_INT 9
9958: PUSH
9959: LD_INT 10
9961: PUSH
9962: LD_INT 11
9964: PUSH
9965: LD_INT 12
9967: PUSH
9968: LD_INT 13
9970: PUSH
9971: LD_INT 14
9973: PUSH
9974: LD_INT 15
9976: PUSH
9977: LD_INT 16
9979: PUSH
9980: LD_INT 17
9982: PUSH
9983: LD_INT 18
9985: PUSH
9986: LD_INT 19
9988: PUSH
9989: LD_INT 20
9991: PUSH
9992: LD_INT 21
9994: PUSH
9995: LD_INT 22
9997: PUSH
9998: LD_INT 23
10000: PUSH
10001: LD_INT 24
10003: PUSH
10004: LD_INT 25
10006: PUSH
10007: LD_INT 26
10009: PUSH
10010: LD_INT 28
10012: PUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 31
10018: PUSH
10019: LD_INT 32
10021: PUSH
10022: LD_INT 36
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 101
10058: PUSH
10059: LD_INT 102
10061: PUSH
10062: LD_INT 103
10064: PUSH
10065: LD_INT 104
10067: PUSH
10068: LD_INT 105
10070: PUSH
10071: LD_INT 106
10073: PUSH
10074: LD_INT 107
10076: PUSH
10077: LD_INT 108
10079: PUSH
10080: LD_INT 109
10082: PUSH
10083: LD_INT 110
10085: PUSH
10086: LD_INT 111
10088: PUSH
10089: LD_INT 112
10091: PUSH
10092: LD_INT 114
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: ST_TO_ADDR
10114: GO 11901
10116: LD_INT 11
10118: DOUBLE
10119: EQUAL
10120: IFTRUE 10124
10122: GO 10316
10124: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10125: LD_ADDR_VAR 0 1
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: LD_INT 4
10138: PUSH
10139: LD_INT 5
10141: PUSH
10142: LD_INT 6
10144: PUSH
10145: LD_INT 7
10147: PUSH
10148: LD_INT 8
10150: PUSH
10151: LD_INT 9
10153: PUSH
10154: LD_INT 10
10156: PUSH
10157: LD_INT 11
10159: PUSH
10160: LD_INT 12
10162: PUSH
10163: LD_INT 13
10165: PUSH
10166: LD_INT 14
10168: PUSH
10169: LD_INT 15
10171: PUSH
10172: LD_INT 16
10174: PUSH
10175: LD_INT 17
10177: PUSH
10178: LD_INT 18
10180: PUSH
10181: LD_INT 19
10183: PUSH
10184: LD_INT 20
10186: PUSH
10187: LD_INT 21
10189: PUSH
10190: LD_INT 22
10192: PUSH
10193: LD_INT 23
10195: PUSH
10196: LD_INT 24
10198: PUSH
10199: LD_INT 25
10201: PUSH
10202: LD_INT 26
10204: PUSH
10205: LD_INT 28
10207: PUSH
10208: LD_INT 30
10210: PUSH
10211: LD_INT 31
10213: PUSH
10214: LD_INT 32
10216: PUSH
10217: LD_INT 34
10219: PUSH
10220: LD_INT 36
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: PUSH
10256: LD_INT 101
10258: PUSH
10259: LD_INT 102
10261: PUSH
10262: LD_INT 103
10264: PUSH
10265: LD_INT 104
10267: PUSH
10268: LD_INT 105
10270: PUSH
10271: LD_INT 106
10273: PUSH
10274: LD_INT 107
10276: PUSH
10277: LD_INT 108
10279: PUSH
10280: LD_INT 109
10282: PUSH
10283: LD_INT 110
10285: PUSH
10286: LD_INT 111
10288: PUSH
10289: LD_INT 112
10291: PUSH
10292: LD_INT 114
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: PUSH
10310: EMPTY
10311: LIST
10312: LIST
10313: ST_TO_ADDR
10314: GO 11901
10316: LD_INT 12
10318: DOUBLE
10319: EQUAL
10320: IFTRUE 10324
10322: GO 10532
10324: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10325: LD_ADDR_VAR 0 1
10329: PUSH
10330: LD_INT 1
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 3
10338: PUSH
10339: LD_INT 4
10341: PUSH
10342: LD_INT 5
10344: PUSH
10345: LD_INT 6
10347: PUSH
10348: LD_INT 7
10350: PUSH
10351: LD_INT 8
10353: PUSH
10354: LD_INT 9
10356: PUSH
10357: LD_INT 10
10359: PUSH
10360: LD_INT 11
10362: PUSH
10363: LD_INT 12
10365: PUSH
10366: LD_INT 13
10368: PUSH
10369: LD_INT 14
10371: PUSH
10372: LD_INT 15
10374: PUSH
10375: LD_INT 16
10377: PUSH
10378: LD_INT 17
10380: PUSH
10381: LD_INT 18
10383: PUSH
10384: LD_INT 19
10386: PUSH
10387: LD_INT 20
10389: PUSH
10390: LD_INT 21
10392: PUSH
10393: LD_INT 22
10395: PUSH
10396: LD_INT 23
10398: PUSH
10399: LD_INT 24
10401: PUSH
10402: LD_INT 25
10404: PUSH
10405: LD_INT 26
10407: PUSH
10408: LD_INT 27
10410: PUSH
10411: LD_INT 28
10413: PUSH
10414: LD_INT 30
10416: PUSH
10417: LD_INT 31
10419: PUSH
10420: LD_INT 32
10422: PUSH
10423: LD_INT 33
10425: PUSH
10426: LD_INT 34
10428: PUSH
10429: LD_INT 36
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 101
10470: PUSH
10471: LD_INT 102
10473: PUSH
10474: LD_INT 103
10476: PUSH
10477: LD_INT 104
10479: PUSH
10480: LD_INT 105
10482: PUSH
10483: LD_INT 106
10485: PUSH
10486: LD_INT 107
10488: PUSH
10489: LD_INT 108
10491: PUSH
10492: LD_INT 109
10494: PUSH
10495: LD_INT 110
10497: PUSH
10498: LD_INT 111
10500: PUSH
10501: LD_INT 112
10503: PUSH
10504: LD_INT 113
10506: PUSH
10507: LD_INT 114
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: ST_TO_ADDR
10530: GO 11901
10532: LD_INT 13
10534: DOUBLE
10535: EQUAL
10536: IFTRUE 10540
10538: GO 10736
10540: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10541: LD_ADDR_VAR 0 1
10545: PUSH
10546: LD_INT 1
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: LD_INT 3
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: LD_INT 5
10560: PUSH
10561: LD_INT 8
10563: PUSH
10564: LD_INT 9
10566: PUSH
10567: LD_INT 10
10569: PUSH
10570: LD_INT 11
10572: PUSH
10573: LD_INT 12
10575: PUSH
10576: LD_INT 14
10578: PUSH
10579: LD_INT 15
10581: PUSH
10582: LD_INT 16
10584: PUSH
10585: LD_INT 17
10587: PUSH
10588: LD_INT 18
10590: PUSH
10591: LD_INT 19
10593: PUSH
10594: LD_INT 20
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 22
10602: PUSH
10603: LD_INT 23
10605: PUSH
10606: LD_INT 24
10608: PUSH
10609: LD_INT 25
10611: PUSH
10612: LD_INT 26
10614: PUSH
10615: LD_INT 27
10617: PUSH
10618: LD_INT 28
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 31
10626: PUSH
10627: LD_INT 32
10629: PUSH
10630: LD_INT 33
10632: PUSH
10633: LD_INT 34
10635: PUSH
10636: LD_INT 36
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 101
10674: PUSH
10675: LD_INT 102
10677: PUSH
10678: LD_INT 103
10680: PUSH
10681: LD_INT 104
10683: PUSH
10684: LD_INT 105
10686: PUSH
10687: LD_INT 106
10689: PUSH
10690: LD_INT 107
10692: PUSH
10693: LD_INT 108
10695: PUSH
10696: LD_INT 109
10698: PUSH
10699: LD_INT 110
10701: PUSH
10702: LD_INT 111
10704: PUSH
10705: LD_INT 112
10707: PUSH
10708: LD_INT 113
10710: PUSH
10711: LD_INT 114
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: ST_TO_ADDR
10734: GO 11901
10736: LD_INT 14
10738: DOUBLE
10739: EQUAL
10740: IFTRUE 10744
10742: GO 10956
10744: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10745: LD_ADDR_VAR 0 1
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: LD_INT 2
10755: PUSH
10756: LD_INT 3
10758: PUSH
10759: LD_INT 4
10761: PUSH
10762: LD_INT 5
10764: PUSH
10765: LD_INT 6
10767: PUSH
10768: LD_INT 7
10770: PUSH
10771: LD_INT 8
10773: PUSH
10774: LD_INT 9
10776: PUSH
10777: LD_INT 10
10779: PUSH
10780: LD_INT 11
10782: PUSH
10783: LD_INT 12
10785: PUSH
10786: LD_INT 13
10788: PUSH
10789: LD_INT 14
10791: PUSH
10792: LD_INT 15
10794: PUSH
10795: LD_INT 16
10797: PUSH
10798: LD_INT 17
10800: PUSH
10801: LD_INT 18
10803: PUSH
10804: LD_INT 19
10806: PUSH
10807: LD_INT 20
10809: PUSH
10810: LD_INT 21
10812: PUSH
10813: LD_INT 22
10815: PUSH
10816: LD_INT 23
10818: PUSH
10819: LD_INT 24
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 26
10827: PUSH
10828: LD_INT 27
10830: PUSH
10831: LD_INT 28
10833: PUSH
10834: LD_INT 29
10836: PUSH
10837: LD_INT 30
10839: PUSH
10840: LD_INT 31
10842: PUSH
10843: LD_INT 32
10845: PUSH
10846: LD_INT 33
10848: PUSH
10849: LD_INT 34
10851: PUSH
10852: LD_INT 36
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 101
10894: PUSH
10895: LD_INT 102
10897: PUSH
10898: LD_INT 103
10900: PUSH
10901: LD_INT 104
10903: PUSH
10904: LD_INT 105
10906: PUSH
10907: LD_INT 106
10909: PUSH
10910: LD_INT 107
10912: PUSH
10913: LD_INT 108
10915: PUSH
10916: LD_INT 109
10918: PUSH
10919: LD_INT 110
10921: PUSH
10922: LD_INT 111
10924: PUSH
10925: LD_INT 112
10927: PUSH
10928: LD_INT 113
10930: PUSH
10931: LD_INT 114
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: ST_TO_ADDR
10954: GO 11901
10956: LD_INT 15
10958: DOUBLE
10959: EQUAL
10960: IFTRUE 10964
10962: GO 11176
10964: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10965: LD_ADDR_VAR 0 1
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: LD_INT 2
10975: PUSH
10976: LD_INT 3
10978: PUSH
10979: LD_INT 4
10981: PUSH
10982: LD_INT 5
10984: PUSH
10985: LD_INT 6
10987: PUSH
10988: LD_INT 7
10990: PUSH
10991: LD_INT 8
10993: PUSH
10994: LD_INT 9
10996: PUSH
10997: LD_INT 10
10999: PUSH
11000: LD_INT 11
11002: PUSH
11003: LD_INT 12
11005: PUSH
11006: LD_INT 13
11008: PUSH
11009: LD_INT 14
11011: PUSH
11012: LD_INT 15
11014: PUSH
11015: LD_INT 16
11017: PUSH
11018: LD_INT 17
11020: PUSH
11021: LD_INT 18
11023: PUSH
11024: LD_INT 19
11026: PUSH
11027: LD_INT 20
11029: PUSH
11030: LD_INT 21
11032: PUSH
11033: LD_INT 22
11035: PUSH
11036: LD_INT 23
11038: PUSH
11039: LD_INT 24
11041: PUSH
11042: LD_INT 25
11044: PUSH
11045: LD_INT 26
11047: PUSH
11048: LD_INT 27
11050: PUSH
11051: LD_INT 28
11053: PUSH
11054: LD_INT 29
11056: PUSH
11057: LD_INT 30
11059: PUSH
11060: LD_INT 31
11062: PUSH
11063: LD_INT 32
11065: PUSH
11066: LD_INT 33
11068: PUSH
11069: LD_INT 34
11071: PUSH
11072: LD_INT 36
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: PUSH
11112: LD_INT 101
11114: PUSH
11115: LD_INT 102
11117: PUSH
11118: LD_INT 103
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 105
11126: PUSH
11127: LD_INT 106
11129: PUSH
11130: LD_INT 107
11132: PUSH
11133: LD_INT 108
11135: PUSH
11136: LD_INT 109
11138: PUSH
11139: LD_INT 110
11141: PUSH
11142: LD_INT 111
11144: PUSH
11145: LD_INT 112
11147: PUSH
11148: LD_INT 113
11150: PUSH
11151: LD_INT 114
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: ST_TO_ADDR
11174: GO 11901
11176: LD_INT 16
11178: DOUBLE
11179: EQUAL
11180: IFTRUE 11184
11182: GO 11308
11184: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11185: LD_ADDR_VAR 0 1
11189: PUSH
11190: LD_INT 2
11192: PUSH
11193: LD_INT 4
11195: PUSH
11196: LD_INT 5
11198: PUSH
11199: LD_INT 7
11201: PUSH
11202: LD_INT 11
11204: PUSH
11205: LD_INT 12
11207: PUSH
11208: LD_INT 15
11210: PUSH
11211: LD_INT 16
11213: PUSH
11214: LD_INT 20
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 22
11222: PUSH
11223: LD_INT 23
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 26
11231: PUSH
11232: LD_INT 30
11234: PUSH
11235: LD_INT 31
11237: PUSH
11238: LD_INT 32
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 34
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 101
11270: PUSH
11271: LD_INT 102
11273: PUSH
11274: LD_INT 103
11276: PUSH
11277: LD_INT 106
11279: PUSH
11280: LD_INT 108
11282: PUSH
11283: LD_INT 112
11285: PUSH
11286: LD_INT 113
11288: PUSH
11289: LD_INT 114
11291: PUSH
11292: EMPTY
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: ST_TO_ADDR
11306: GO 11901
11308: LD_INT 17
11310: DOUBLE
11311: EQUAL
11312: IFTRUE 11316
11314: GO 11528
11316: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11317: LD_ADDR_VAR 0 1
11321: PUSH
11322: LD_INT 1
11324: PUSH
11325: LD_INT 2
11327: PUSH
11328: LD_INT 3
11330: PUSH
11331: LD_INT 4
11333: PUSH
11334: LD_INT 5
11336: PUSH
11337: LD_INT 6
11339: PUSH
11340: LD_INT 7
11342: PUSH
11343: LD_INT 8
11345: PUSH
11346: LD_INT 9
11348: PUSH
11349: LD_INT 10
11351: PUSH
11352: LD_INT 11
11354: PUSH
11355: LD_INT 12
11357: PUSH
11358: LD_INT 13
11360: PUSH
11361: LD_INT 14
11363: PUSH
11364: LD_INT 15
11366: PUSH
11367: LD_INT 16
11369: PUSH
11370: LD_INT 17
11372: PUSH
11373: LD_INT 18
11375: PUSH
11376: LD_INT 19
11378: PUSH
11379: LD_INT 20
11381: PUSH
11382: LD_INT 21
11384: PUSH
11385: LD_INT 22
11387: PUSH
11388: LD_INT 23
11390: PUSH
11391: LD_INT 24
11393: PUSH
11394: LD_INT 25
11396: PUSH
11397: LD_INT 26
11399: PUSH
11400: LD_INT 27
11402: PUSH
11403: LD_INT 28
11405: PUSH
11406: LD_INT 29
11408: PUSH
11409: LD_INT 30
11411: PUSH
11412: LD_INT 31
11414: PUSH
11415: LD_INT 32
11417: PUSH
11418: LD_INT 33
11420: PUSH
11421: LD_INT 34
11423: PUSH
11424: LD_INT 36
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 101
11466: PUSH
11467: LD_INT 102
11469: PUSH
11470: LD_INT 103
11472: PUSH
11473: LD_INT 104
11475: PUSH
11476: LD_INT 105
11478: PUSH
11479: LD_INT 106
11481: PUSH
11482: LD_INT 107
11484: PUSH
11485: LD_INT 108
11487: PUSH
11488: LD_INT 109
11490: PUSH
11491: LD_INT 110
11493: PUSH
11494: LD_INT 111
11496: PUSH
11497: LD_INT 112
11499: PUSH
11500: LD_INT 113
11502: PUSH
11503: LD_INT 114
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: ST_TO_ADDR
11526: GO 11901
11528: LD_INT 18
11530: DOUBLE
11531: EQUAL
11532: IFTRUE 11536
11534: GO 11672
11536: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11537: LD_ADDR_VAR 0 1
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: LD_INT 4
11547: PUSH
11548: LD_INT 5
11550: PUSH
11551: LD_INT 7
11553: PUSH
11554: LD_INT 11
11556: PUSH
11557: LD_INT 12
11559: PUSH
11560: LD_INT 15
11562: PUSH
11563: LD_INT 16
11565: PUSH
11566: LD_INT 20
11568: PUSH
11569: LD_INT 21
11571: PUSH
11572: LD_INT 22
11574: PUSH
11575: LD_INT 23
11577: PUSH
11578: LD_INT 25
11580: PUSH
11581: LD_INT 26
11583: PUSH
11584: LD_INT 30
11586: PUSH
11587: LD_INT 31
11589: PUSH
11590: LD_INT 32
11592: PUSH
11593: LD_INT 33
11595: PUSH
11596: LD_INT 34
11598: PUSH
11599: LD_INT 35
11601: PUSH
11602: LD_INT 36
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 101
11630: PUSH
11631: LD_INT 102
11633: PUSH
11634: LD_INT 103
11636: PUSH
11637: LD_INT 106
11639: PUSH
11640: LD_INT 108
11642: PUSH
11643: LD_INT 112
11645: PUSH
11646: LD_INT 113
11648: PUSH
11649: LD_INT 114
11651: PUSH
11652: LD_INT 115
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: ST_TO_ADDR
11670: GO 11901
11672: LD_INT 19
11674: DOUBLE
11675: EQUAL
11676: IFTRUE 11680
11678: GO 11900
11680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11681: LD_ADDR_VAR 0 1
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: LD_INT 2
11691: PUSH
11692: LD_INT 3
11694: PUSH
11695: LD_INT 4
11697: PUSH
11698: LD_INT 5
11700: PUSH
11701: LD_INT 6
11703: PUSH
11704: LD_INT 7
11706: PUSH
11707: LD_INT 8
11709: PUSH
11710: LD_INT 9
11712: PUSH
11713: LD_INT 10
11715: PUSH
11716: LD_INT 11
11718: PUSH
11719: LD_INT 12
11721: PUSH
11722: LD_INT 13
11724: PUSH
11725: LD_INT 14
11727: PUSH
11728: LD_INT 15
11730: PUSH
11731: LD_INT 16
11733: PUSH
11734: LD_INT 17
11736: PUSH
11737: LD_INT 18
11739: PUSH
11740: LD_INT 19
11742: PUSH
11743: LD_INT 20
11745: PUSH
11746: LD_INT 21
11748: PUSH
11749: LD_INT 22
11751: PUSH
11752: LD_INT 23
11754: PUSH
11755: LD_INT 24
11757: PUSH
11758: LD_INT 25
11760: PUSH
11761: LD_INT 26
11763: PUSH
11764: LD_INT 27
11766: PUSH
11767: LD_INT 28
11769: PUSH
11770: LD_INT 29
11772: PUSH
11773: LD_INT 30
11775: PUSH
11776: LD_INT 31
11778: PUSH
11779: LD_INT 32
11781: PUSH
11782: LD_INT 33
11784: PUSH
11785: LD_INT 34
11787: PUSH
11788: LD_INT 35
11790: PUSH
11791: LD_INT 36
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 101
11834: PUSH
11835: LD_INT 102
11837: PUSH
11838: LD_INT 103
11840: PUSH
11841: LD_INT 104
11843: PUSH
11844: LD_INT 105
11846: PUSH
11847: LD_INT 106
11849: PUSH
11850: LD_INT 107
11852: PUSH
11853: LD_INT 108
11855: PUSH
11856: LD_INT 109
11858: PUSH
11859: LD_INT 110
11861: PUSH
11862: LD_INT 111
11864: PUSH
11865: LD_INT 112
11867: PUSH
11868: LD_INT 113
11870: PUSH
11871: LD_INT 114
11873: PUSH
11874: LD_INT 115
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: ST_TO_ADDR
11898: GO 11901
11900: POP
// end else
11901: GO 12120
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11903: LD_ADDR_VAR 0 1
11907: PUSH
11908: LD_INT 1
11910: PUSH
11911: LD_INT 2
11913: PUSH
11914: LD_INT 3
11916: PUSH
11917: LD_INT 4
11919: PUSH
11920: LD_INT 5
11922: PUSH
11923: LD_INT 6
11925: PUSH
11926: LD_INT 7
11928: PUSH
11929: LD_INT 8
11931: PUSH
11932: LD_INT 9
11934: PUSH
11935: LD_INT 10
11937: PUSH
11938: LD_INT 11
11940: PUSH
11941: LD_INT 12
11943: PUSH
11944: LD_INT 13
11946: PUSH
11947: LD_INT 14
11949: PUSH
11950: LD_INT 15
11952: PUSH
11953: LD_INT 16
11955: PUSH
11956: LD_INT 17
11958: PUSH
11959: LD_INT 18
11961: PUSH
11962: LD_INT 19
11964: PUSH
11965: LD_INT 20
11967: PUSH
11968: LD_INT 21
11970: PUSH
11971: LD_INT 22
11973: PUSH
11974: LD_INT 23
11976: PUSH
11977: LD_INT 24
11979: PUSH
11980: LD_INT 25
11982: PUSH
11983: LD_INT 26
11985: PUSH
11986: LD_INT 27
11988: PUSH
11989: LD_INT 28
11991: PUSH
11992: LD_INT 29
11994: PUSH
11995: LD_INT 30
11997: PUSH
11998: LD_INT 31
12000: PUSH
12001: LD_INT 32
12003: PUSH
12004: LD_INT 33
12006: PUSH
12007: LD_INT 34
12009: PUSH
12010: LD_INT 35
12012: PUSH
12013: LD_INT 36
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 101
12056: PUSH
12057: LD_INT 102
12059: PUSH
12060: LD_INT 103
12062: PUSH
12063: LD_INT 104
12065: PUSH
12066: LD_INT 105
12068: PUSH
12069: LD_INT 106
12071: PUSH
12072: LD_INT 107
12074: PUSH
12075: LD_INT 108
12077: PUSH
12078: LD_INT 109
12080: PUSH
12081: LD_INT 110
12083: PUSH
12084: LD_INT 111
12086: PUSH
12087: LD_INT 112
12089: PUSH
12090: LD_INT 113
12092: PUSH
12093: LD_INT 114
12095: PUSH
12096: LD_INT 115
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: ST_TO_ADDR
// if result then
12120: LD_VAR 0 1
12124: IFFALSE 12413
// begin normal :=  ;
12126: LD_ADDR_VAR 0 3
12130: PUSH
12131: LD_STRING 
12133: ST_TO_ADDR
// hardcore :=  ;
12134: LD_ADDR_VAR 0 4
12138: PUSH
12139: LD_STRING 
12141: ST_TO_ADDR
// for i = 1 to normalCounter do
12142: LD_ADDR_VAR 0 5
12146: PUSH
12147: DOUBLE
12148: LD_INT 1
12150: DEC
12151: ST_TO_ADDR
12152: LD_EXP 44
12156: PUSH
12157: FOR_TO
12158: IFFALSE 12259
// begin tmp := 0 ;
12160: LD_ADDR_VAR 0 2
12164: PUSH
12165: LD_STRING 0
12167: ST_TO_ADDR
// if result [ 1 ] then
12168: LD_VAR 0 1
12172: PUSH
12173: LD_INT 1
12175: ARRAY
12176: IFFALSE 12241
// if result [ 1 ] [ 1 ] = i then
12178: LD_VAR 0 1
12182: PUSH
12183: LD_INT 1
12185: ARRAY
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PUSH
12191: LD_VAR 0 5
12195: EQUAL
12196: IFFALSE 12241
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12198: LD_ADDR_VAR 0 1
12202: PUSH
12203: LD_VAR 0 1
12207: PPUSH
12208: LD_INT 1
12210: PPUSH
12211: LD_VAR 0 1
12215: PUSH
12216: LD_INT 1
12218: ARRAY
12219: PPUSH
12220: LD_INT 1
12222: PPUSH
12223: CALL_OW 3
12227: PPUSH
12228: CALL_OW 1
12232: ST_TO_ADDR
// tmp := 1 ;
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: LD_STRING 1
12240: ST_TO_ADDR
// end ; normal := normal & tmp ;
12241: LD_ADDR_VAR 0 3
12245: PUSH
12246: LD_VAR 0 3
12250: PUSH
12251: LD_VAR 0 2
12255: STR
12256: ST_TO_ADDR
// end ;
12257: GO 12157
12259: POP
12260: POP
// for i = 1 to hardcoreCounter do
12261: LD_ADDR_VAR 0 5
12265: PUSH
12266: DOUBLE
12267: LD_INT 1
12269: DEC
12270: ST_TO_ADDR
12271: LD_EXP 45
12275: PUSH
12276: FOR_TO
12277: IFFALSE 12382
// begin tmp := 0 ;
12279: LD_ADDR_VAR 0 2
12283: PUSH
12284: LD_STRING 0
12286: ST_TO_ADDR
// if result [ 2 ] then
12287: LD_VAR 0 1
12291: PUSH
12292: LD_INT 2
12294: ARRAY
12295: IFFALSE 12364
// if result [ 2 ] [ 1 ] = 100 + i then
12297: LD_VAR 0 1
12301: PUSH
12302: LD_INT 2
12304: ARRAY
12305: PUSH
12306: LD_INT 1
12308: ARRAY
12309: PUSH
12310: LD_INT 100
12312: PUSH
12313: LD_VAR 0 5
12317: PLUS
12318: EQUAL
12319: IFFALSE 12364
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12321: LD_ADDR_VAR 0 1
12325: PUSH
12326: LD_VAR 0 1
12330: PPUSH
12331: LD_INT 2
12333: PPUSH
12334: LD_VAR 0 1
12338: PUSH
12339: LD_INT 2
12341: ARRAY
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 3
12350: PPUSH
12351: CALL_OW 1
12355: ST_TO_ADDR
// tmp := 1 ;
12356: LD_ADDR_VAR 0 2
12360: PUSH
12361: LD_STRING 1
12363: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12364: LD_ADDR_VAR 0 4
12368: PUSH
12369: LD_VAR 0 4
12373: PUSH
12374: LD_VAR 0 2
12378: STR
12379: ST_TO_ADDR
// end ;
12380: GO 12276
12382: POP
12383: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12384: LD_STRING getStreamItemsFromMission("
12386: PUSH
12387: LD_VAR 0 3
12391: STR
12392: PUSH
12393: LD_STRING ","
12395: STR
12396: PUSH
12397: LD_VAR 0 4
12401: STR
12402: PUSH
12403: LD_STRING ")
12405: STR
12406: PPUSH
12407: CALL_OW 559
// end else
12411: GO 12420
// ToLua ( getStreamItemsFromMission("","") ) ;
12413: LD_STRING getStreamItemsFromMission("","")
12415: PPUSH
12416: CALL_OW 559
// end ;
12420: LD_VAR 0 1
12424: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12425: LD_EXP 43
12429: PUSH
12430: LD_EXP 48
12434: AND
12435: IFFALSE 12559
12437: GO 12439
12439: DISABLE
12440: LD_INT 0
12442: PPUSH
12443: PPUSH
// begin enable ;
12444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12445: LD_ADDR_VAR 0 2
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: LD_OWVAR 2
12457: PUSH
12458: EMPTY
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: LD_INT 34
12467: PUSH
12468: LD_INT 7
12470: PUSH
12471: EMPTY
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 34
12477: PUSH
12478: LD_INT 45
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 34
12487: PUSH
12488: LD_INT 28
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 34
12497: PUSH
12498: LD_INT 47
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PPUSH
12516: CALL_OW 69
12520: ST_TO_ADDR
// if not tmp then
12521: LD_VAR 0 2
12525: NOT
12526: IFFALSE 12530
// exit ;
12528: GO 12559
// for i in tmp do
12530: LD_ADDR_VAR 0 1
12534: PUSH
12535: LD_VAR 0 2
12539: PUSH
12540: FOR_IN
12541: IFFALSE 12557
// begin SetLives ( i , 0 ) ;
12543: LD_VAR 0 1
12547: PPUSH
12548: LD_INT 0
12550: PPUSH
12551: CALL_OW 234
// end ;
12555: GO 12540
12557: POP
12558: POP
// end ;
12559: PPOPN 2
12561: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12562: LD_EXP 43
12566: PUSH
12567: LD_EXP 49
12571: AND
12572: IFFALSE 12656
12574: GO 12576
12576: DISABLE
12577: LD_INT 0
12579: PPUSH
12580: PPUSH
// begin enable ;
12581: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12582: LD_ADDR_VAR 0 2
12586: PUSH
12587: LD_INT 22
12589: PUSH
12590: LD_OWVAR 2
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 32
12601: PUSH
12602: LD_INT 3
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: ST_TO_ADDR
// if not tmp then
12618: LD_VAR 0 2
12622: NOT
12623: IFFALSE 12627
// exit ;
12625: GO 12656
// for i in tmp do
12627: LD_ADDR_VAR 0 1
12631: PUSH
12632: LD_VAR 0 2
12636: PUSH
12637: FOR_IN
12638: IFFALSE 12654
// begin SetLives ( i , 0 ) ;
12640: LD_VAR 0 1
12644: PPUSH
12645: LD_INT 0
12647: PPUSH
12648: CALL_OW 234
// end ;
12652: GO 12637
12654: POP
12655: POP
// end ;
12656: PPOPN 2
12658: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12659: LD_EXP 43
12663: PUSH
12664: LD_EXP 46
12668: AND
12669: IFFALSE 12762
12671: GO 12673
12673: DISABLE
12674: LD_INT 0
12676: PPUSH
// begin enable ;
12677: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12678: LD_ADDR_VAR 0 1
12682: PUSH
12683: LD_INT 22
12685: PUSH
12686: LD_OWVAR 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: LD_INT 25
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 25
12710: PUSH
12711: LD_INT 9
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PUSH
12718: LD_INT 25
12720: PUSH
12721: LD_INT 8
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 69
12742: PUSH
12743: FOR_IN
12744: IFFALSE 12760
// begin SetClass ( i , 1 ) ;
12746: LD_VAR 0 1
12750: PPUSH
12751: LD_INT 1
12753: PPUSH
12754: CALL_OW 336
// end ;
12758: GO 12743
12760: POP
12761: POP
// end ;
12762: PPOPN 1
12764: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12765: LD_EXP 43
12769: PUSH
12770: LD_EXP 47
12774: AND
12775: PUSH
12776: LD_OWVAR 65
12780: PUSH
12781: LD_INT 7
12783: LESS
12784: AND
12785: IFFALSE 12799
12787: GO 12789
12789: DISABLE
// begin enable ;
12790: ENABLE
// game_speed := 7 ;
12791: LD_ADDR_OWVAR 65
12795: PUSH
12796: LD_INT 7
12798: ST_TO_ADDR
// end ;
12799: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12800: LD_EXP 43
12804: PUSH
12805: LD_EXP 50
12809: AND
12810: IFFALSE 13012
12812: GO 12814
12814: DISABLE
12815: LD_INT 0
12817: PPUSH
12818: PPUSH
12819: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12820: LD_ADDR_VAR 0 3
12824: PUSH
12825: LD_INT 81
12827: PUSH
12828: LD_OWVAR 2
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: PUSH
12837: LD_INT 21
12839: PUSH
12840: LD_INT 1
12842: PUSH
12843: EMPTY
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 69
12855: ST_TO_ADDR
// if not tmp then
12856: LD_VAR 0 3
12860: NOT
12861: IFFALSE 12865
// exit ;
12863: GO 13012
// if tmp > 5 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 5
12872: GREATER
12873: IFFALSE 12885
// k := 5 else
12875: LD_ADDR_VAR 0 2
12879: PUSH
12880: LD_INT 5
12882: ST_TO_ADDR
12883: GO 12895
// k := tmp ;
12885: LD_ADDR_VAR 0 2
12889: PUSH
12890: LD_VAR 0 3
12894: ST_TO_ADDR
// for i := 1 to k do
12895: LD_ADDR_VAR 0 1
12899: PUSH
12900: DOUBLE
12901: LD_INT 1
12903: DEC
12904: ST_TO_ADDR
12905: LD_VAR 0 2
12909: PUSH
12910: FOR_TO
12911: IFFALSE 13010
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12913: LD_VAR 0 3
12917: PUSH
12918: LD_VAR 0 1
12922: ARRAY
12923: PPUSH
12924: LD_VAR 0 1
12928: PUSH
12929: LD_INT 4
12931: MOD
12932: PUSH
12933: LD_INT 1
12935: PLUS
12936: PPUSH
12937: CALL_OW 259
12941: PUSH
12942: LD_INT 10
12944: LESS
12945: IFFALSE 13008
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12947: LD_VAR 0 3
12951: PUSH
12952: LD_VAR 0 1
12956: ARRAY
12957: PPUSH
12958: LD_VAR 0 1
12962: PUSH
12963: LD_INT 4
12965: MOD
12966: PUSH
12967: LD_INT 1
12969: PLUS
12970: PPUSH
12971: LD_VAR 0 3
12975: PUSH
12976: LD_VAR 0 1
12980: ARRAY
12981: PPUSH
12982: LD_VAR 0 1
12986: PUSH
12987: LD_INT 4
12989: MOD
12990: PUSH
12991: LD_INT 1
12993: PLUS
12994: PPUSH
12995: CALL_OW 259
12999: PUSH
13000: LD_INT 1
13002: PLUS
13003: PPUSH
13004: CALL_OW 237
13008: GO 12910
13010: POP
13011: POP
// end ;
13012: PPOPN 3
13014: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13015: LD_EXP 43
13019: PUSH
13020: LD_EXP 51
13024: AND
13025: IFFALSE 13045
13027: GO 13029
13029: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13030: LD_INT 4
13032: PPUSH
13033: LD_OWVAR 2
13037: PPUSH
13038: LD_INT 0
13040: PPUSH
13041: CALL_OW 324
13045: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13046: LD_EXP 43
13050: PUSH
13051: LD_EXP 80
13055: AND
13056: IFFALSE 13076
13058: GO 13060
13060: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13061: LD_INT 19
13063: PPUSH
13064: LD_OWVAR 2
13068: PPUSH
13069: LD_INT 0
13071: PPUSH
13072: CALL_OW 324
13076: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13077: LD_EXP 43
13081: PUSH
13082: LD_EXP 52
13086: AND
13087: IFFALSE 13189
13089: GO 13091
13091: DISABLE
13092: LD_INT 0
13094: PPUSH
13095: PPUSH
// begin enable ;
13096: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13097: LD_ADDR_VAR 0 2
13101: PUSH
13102: LD_INT 22
13104: PUSH
13105: LD_OWVAR 2
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 34
13119: PUSH
13120: LD_INT 11
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 34
13129: PUSH
13130: LD_INT 30
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: EMPTY
13143: LIST
13144: LIST
13145: PPUSH
13146: CALL_OW 69
13150: ST_TO_ADDR
// if not tmp then
13151: LD_VAR 0 2
13155: NOT
13156: IFFALSE 13160
// exit ;
13158: GO 13189
// for i in tmp do
13160: LD_ADDR_VAR 0 1
13164: PUSH
13165: LD_VAR 0 2
13169: PUSH
13170: FOR_IN
13171: IFFALSE 13187
// begin SetLives ( i , 0 ) ;
13173: LD_VAR 0 1
13177: PPUSH
13178: LD_INT 0
13180: PPUSH
13181: CALL_OW 234
// end ;
13185: GO 13170
13187: POP
13188: POP
// end ;
13189: PPOPN 2
13191: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13192: LD_EXP 43
13196: PUSH
13197: LD_EXP 53
13201: AND
13202: IFFALSE 13222
13204: GO 13206
13206: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13207: LD_INT 32
13209: PPUSH
13210: LD_OWVAR 2
13214: PPUSH
13215: LD_INT 0
13217: PPUSH
13218: CALL_OW 324
13222: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13223: LD_EXP 43
13227: PUSH
13228: LD_EXP 54
13232: AND
13233: IFFALSE 13414
13235: GO 13237
13237: DISABLE
13238: LD_INT 0
13240: PPUSH
13241: PPUSH
13242: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13243: LD_ADDR_VAR 0 2
13247: PUSH
13248: LD_INT 22
13250: PUSH
13251: LD_OWVAR 2
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 33
13262: PUSH
13263: LD_INT 3
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PPUSH
13274: CALL_OW 69
13278: ST_TO_ADDR
// if not tmp then
13279: LD_VAR 0 2
13283: NOT
13284: IFFALSE 13288
// exit ;
13286: GO 13414
// side := 0 ;
13288: LD_ADDR_VAR 0 3
13292: PUSH
13293: LD_INT 0
13295: ST_TO_ADDR
// for i := 1 to 8 do
13296: LD_ADDR_VAR 0 1
13300: PUSH
13301: DOUBLE
13302: LD_INT 1
13304: DEC
13305: ST_TO_ADDR
13306: LD_INT 8
13308: PUSH
13309: FOR_TO
13310: IFFALSE 13358
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13312: LD_OWVAR 2
13316: PUSH
13317: LD_VAR 0 1
13321: NONEQUAL
13322: PUSH
13323: LD_OWVAR 2
13327: PPUSH
13328: LD_VAR 0 1
13332: PPUSH
13333: CALL_OW 81
13337: PUSH
13338: LD_INT 2
13340: EQUAL
13341: AND
13342: IFFALSE 13356
// begin side := i ;
13344: LD_ADDR_VAR 0 3
13348: PUSH
13349: LD_VAR 0 1
13353: ST_TO_ADDR
// break ;
13354: GO 13358
// end ;
13356: GO 13309
13358: POP
13359: POP
// if not side then
13360: LD_VAR 0 3
13364: NOT
13365: IFFALSE 13369
// exit ;
13367: GO 13414
// for i := 1 to tmp do
13369: LD_ADDR_VAR 0 1
13373: PUSH
13374: DOUBLE
13375: LD_INT 1
13377: DEC
13378: ST_TO_ADDR
13379: LD_VAR 0 2
13383: PUSH
13384: FOR_TO
13385: IFFALSE 13412
// if Prob ( 60 ) then
13387: LD_INT 60
13389: PPUSH
13390: CALL_OW 13
13394: IFFALSE 13410
// SetSide ( i , side ) ;
13396: LD_VAR 0 1
13400: PPUSH
13401: LD_VAR 0 3
13405: PPUSH
13406: CALL_OW 235
13410: GO 13384
13412: POP
13413: POP
// end ;
13414: PPOPN 3
13416: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13417: LD_EXP 43
13421: PUSH
13422: LD_EXP 56
13426: AND
13427: IFFALSE 13546
13429: GO 13431
13431: DISABLE
13432: LD_INT 0
13434: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_OWVAR 2
13447: PUSH
13448: EMPTY
13449: LIST
13450: LIST
13451: PUSH
13452: LD_INT 21
13454: PUSH
13455: LD_INT 1
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: PUSH
13462: LD_INT 3
13464: PUSH
13465: LD_INT 23
13467: PUSH
13468: LD_INT 0
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: PPUSH
13484: CALL_OW 69
13488: PUSH
13489: FOR_IN
13490: IFFALSE 13544
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13492: LD_VAR 0 1
13496: PPUSH
13497: CALL_OW 257
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: LD_INT 2
13507: PUSH
13508: LD_INT 3
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: IN
13520: IFFALSE 13542
// SetClass ( un , rand ( 1 , 4 ) ) ;
13522: LD_VAR 0 1
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: LD_INT 4
13532: PPUSH
13533: CALL_OW 12
13537: PPUSH
13538: CALL_OW 336
13542: GO 13489
13544: POP
13545: POP
// end ;
13546: PPOPN 1
13548: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13549: LD_EXP 43
13553: PUSH
13554: LD_EXP 55
13558: AND
13559: IFFALSE 13638
13561: GO 13563
13563: DISABLE
13564: LD_INT 0
13566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13567: LD_ADDR_VAR 0 1
13571: PUSH
13572: LD_INT 22
13574: PUSH
13575: LD_OWVAR 2
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 3
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PPUSH
13598: CALL_OW 69
13602: ST_TO_ADDR
// if not tmp then
13603: LD_VAR 0 1
13607: NOT
13608: IFFALSE 13612
// exit ;
13610: GO 13638
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13612: LD_VAR 0 1
13616: PUSH
13617: LD_INT 1
13619: PPUSH
13620: LD_VAR 0 1
13624: PPUSH
13625: CALL_OW 12
13629: ARRAY
13630: PPUSH
13631: LD_INT 100
13633: PPUSH
13634: CALL_OW 234
// end ;
13638: PPOPN 1
13640: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13641: LD_EXP 43
13645: PUSH
13646: LD_EXP 57
13650: AND
13651: IFFALSE 13749
13653: GO 13655
13655: DISABLE
13656: LD_INT 0
13658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13659: LD_ADDR_VAR 0 1
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_OWVAR 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: ST_TO_ADDR
// if not tmp then
13695: LD_VAR 0 1
13699: NOT
13700: IFFALSE 13704
// exit ;
13702: GO 13749
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13704: LD_VAR 0 1
13708: PUSH
13709: LD_INT 1
13711: PPUSH
13712: LD_VAR 0 1
13716: PPUSH
13717: CALL_OW 12
13721: ARRAY
13722: PPUSH
13723: LD_INT 1
13725: PPUSH
13726: LD_INT 4
13728: PPUSH
13729: CALL_OW 12
13733: PPUSH
13734: LD_INT 3000
13736: PPUSH
13737: LD_INT 9000
13739: PPUSH
13740: CALL_OW 12
13744: PPUSH
13745: CALL_OW 492
// end ;
13749: PPOPN 1
13751: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13752: LD_EXP 43
13756: PUSH
13757: LD_EXP 58
13761: AND
13762: IFFALSE 13782
13764: GO 13766
13766: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13767: LD_INT 1
13769: PPUSH
13770: LD_OWVAR 2
13774: PPUSH
13775: LD_INT 0
13777: PPUSH
13778: CALL_OW 324
13782: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13783: LD_EXP 43
13787: PUSH
13788: LD_EXP 59
13792: AND
13793: IFFALSE 13876
13795: GO 13797
13797: DISABLE
13798: LD_INT 0
13800: PPUSH
13801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13802: LD_ADDR_VAR 0 2
13806: PUSH
13807: LD_INT 22
13809: PUSH
13810: LD_OWVAR 2
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 21
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 69
13837: ST_TO_ADDR
// if not tmp then
13838: LD_VAR 0 2
13842: NOT
13843: IFFALSE 13847
// exit ;
13845: GO 13876
// for i in tmp do
13847: LD_ADDR_VAR 0 1
13851: PUSH
13852: LD_VAR 0 2
13856: PUSH
13857: FOR_IN
13858: IFFALSE 13874
// SetBLevel ( i , 10 ) ;
13860: LD_VAR 0 1
13864: PPUSH
13865: LD_INT 10
13867: PPUSH
13868: CALL_OW 241
13872: GO 13857
13874: POP
13875: POP
// end ;
13876: PPOPN 2
13878: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13879: LD_EXP 43
13883: PUSH
13884: LD_EXP 60
13888: AND
13889: IFFALSE 14000
13891: GO 13893
13893: DISABLE
13894: LD_INT 0
13896: PPUSH
13897: PPUSH
13898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13899: LD_ADDR_VAR 0 3
13903: PUSH
13904: LD_INT 22
13906: PUSH
13907: LD_OWVAR 2
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: LD_INT 25
13918: PUSH
13919: LD_INT 1
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: ST_TO_ADDR
// if not tmp then
13935: LD_VAR 0 3
13939: NOT
13940: IFFALSE 13944
// exit ;
13942: GO 14000
// un := tmp [ rand ( 1 , tmp ) ] ;
13944: LD_ADDR_VAR 0 2
13948: PUSH
13949: LD_VAR 0 3
13953: PUSH
13954: LD_INT 1
13956: PPUSH
13957: LD_VAR 0 3
13961: PPUSH
13962: CALL_OW 12
13966: ARRAY
13967: ST_TO_ADDR
// if Crawls ( un ) then
13968: LD_VAR 0 2
13972: PPUSH
13973: CALL_OW 318
13977: IFFALSE 13988
// ComWalk ( un ) ;
13979: LD_VAR 0 2
13983: PPUSH
13984: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13988: LD_VAR 0 2
13992: PPUSH
13993: LD_INT 5
13995: PPUSH
13996: CALL_OW 336
// end ;
14000: PPOPN 3
14002: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14003: LD_EXP 43
14007: PUSH
14008: LD_EXP 61
14012: AND
14013: PUSH
14014: LD_OWVAR 67
14018: PUSH
14019: LD_INT 3
14021: LESS
14022: AND
14023: IFFALSE 14042
14025: GO 14027
14027: DISABLE
// Difficulty := Difficulty + 1 ;
14028: LD_ADDR_OWVAR 67
14032: PUSH
14033: LD_OWVAR 67
14037: PUSH
14038: LD_INT 1
14040: PLUS
14041: ST_TO_ADDR
14042: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14043: LD_EXP 43
14047: PUSH
14048: LD_EXP 62
14052: AND
14053: IFFALSE 14156
14055: GO 14057
14057: DISABLE
14058: LD_INT 0
14060: PPUSH
// begin for i := 1 to 5 do
14061: LD_ADDR_VAR 0 1
14065: PUSH
14066: DOUBLE
14067: LD_INT 1
14069: DEC
14070: ST_TO_ADDR
14071: LD_INT 5
14073: PUSH
14074: FOR_TO
14075: IFFALSE 14154
// begin uc_nation := nation_nature ;
14077: LD_ADDR_OWVAR 21
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// uc_side := 0 ;
14085: LD_ADDR_OWVAR 20
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14093: LD_ADDR_OWVAR 29
14097: PUSH
14098: LD_INT 12
14100: PUSH
14101: LD_INT 12
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: ST_TO_ADDR
// hc_agressivity := 20 ;
14108: LD_ADDR_OWVAR 35
14112: PUSH
14113: LD_INT 20
14115: ST_TO_ADDR
// hc_class := class_tiger ;
14116: LD_ADDR_OWVAR 28
14120: PUSH
14121: LD_INT 14
14123: ST_TO_ADDR
// hc_gallery :=  ;
14124: LD_ADDR_OWVAR 33
14128: PUSH
14129: LD_STRING 
14131: ST_TO_ADDR
// hc_name :=  ;
14132: LD_ADDR_OWVAR 26
14136: PUSH
14137: LD_STRING 
14139: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14140: CALL_OW 44
14144: PPUSH
14145: LD_INT 0
14147: PPUSH
14148: CALL_OW 51
// end ;
14152: GO 14074
14154: POP
14155: POP
// end ;
14156: PPOPN 1
14158: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14159: LD_EXP 43
14163: PUSH
14164: LD_EXP 63
14168: AND
14169: IFFALSE 14178
14171: GO 14173
14173: DISABLE
// StreamSibBomb ;
14174: CALL 14179 0 0
14178: END
// export function StreamSibBomb ; var i , x , y ; begin
14179: LD_INT 0
14181: PPUSH
14182: PPUSH
14183: PPUSH
14184: PPUSH
// result := false ;
14185: LD_ADDR_VAR 0 1
14189: PUSH
14190: LD_INT 0
14192: ST_TO_ADDR
// for i := 1 to 16 do
14193: LD_ADDR_VAR 0 2
14197: PUSH
14198: DOUBLE
14199: LD_INT 1
14201: DEC
14202: ST_TO_ADDR
14203: LD_INT 16
14205: PUSH
14206: FOR_TO
14207: IFFALSE 14406
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14209: LD_ADDR_VAR 0 3
14213: PUSH
14214: LD_INT 10
14216: PUSH
14217: LD_INT 20
14219: PUSH
14220: LD_INT 30
14222: PUSH
14223: LD_INT 40
14225: PUSH
14226: LD_INT 50
14228: PUSH
14229: LD_INT 60
14231: PUSH
14232: LD_INT 70
14234: PUSH
14235: LD_INT 80
14237: PUSH
14238: LD_INT 90
14240: PUSH
14241: LD_INT 100
14243: PUSH
14244: LD_INT 110
14246: PUSH
14247: LD_INT 120
14249: PUSH
14250: LD_INT 130
14252: PUSH
14253: LD_INT 140
14255: PUSH
14256: LD_INT 150
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 1
14278: PPUSH
14279: LD_INT 15
14281: PPUSH
14282: CALL_OW 12
14286: ARRAY
14287: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14288: LD_ADDR_VAR 0 4
14292: PUSH
14293: LD_INT 10
14295: PUSH
14296: LD_INT 20
14298: PUSH
14299: LD_INT 30
14301: PUSH
14302: LD_INT 40
14304: PUSH
14305: LD_INT 50
14307: PUSH
14308: LD_INT 60
14310: PUSH
14311: LD_INT 70
14313: PUSH
14314: LD_INT 80
14316: PUSH
14317: LD_INT 90
14319: PUSH
14320: LD_INT 100
14322: PUSH
14323: LD_INT 110
14325: PUSH
14326: LD_INT 120
14328: PUSH
14329: LD_INT 130
14331: PUSH
14332: LD_INT 140
14334: PUSH
14335: LD_INT 150
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: PUSH
14355: LD_INT 1
14357: PPUSH
14358: LD_INT 15
14360: PPUSH
14361: CALL_OW 12
14365: ARRAY
14366: ST_TO_ADDR
// if ValidHex ( x , y ) then
14367: LD_VAR 0 3
14371: PPUSH
14372: LD_VAR 0 4
14376: PPUSH
14377: CALL_OW 488
14381: IFFALSE 14404
// begin result := [ x , y ] ;
14383: LD_ADDR_VAR 0 1
14387: PUSH
14388: LD_VAR 0 3
14392: PUSH
14393: LD_VAR 0 4
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: ST_TO_ADDR
// break ;
14402: GO 14406
// end ; end ;
14404: GO 14206
14406: POP
14407: POP
// if result then
14408: LD_VAR 0 1
14412: IFFALSE 14472
// begin ToLua ( playSibBomb() ) ;
14414: LD_STRING playSibBomb()
14416: PPUSH
14417: CALL_OW 559
// wait ( 0 0$14 ) ;
14421: LD_INT 490
14423: PPUSH
14424: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14428: LD_VAR 0 1
14432: PUSH
14433: LD_INT 1
14435: ARRAY
14436: PPUSH
14437: LD_VAR 0 1
14441: PUSH
14442: LD_INT 2
14444: ARRAY
14445: PPUSH
14446: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14450: LD_VAR 0 1
14454: PUSH
14455: LD_INT 1
14457: ARRAY
14458: PPUSH
14459: LD_VAR 0 1
14463: PUSH
14464: LD_INT 2
14466: ARRAY
14467: PPUSH
14468: CALL_OW 429
// end ; end ;
14472: LD_VAR 0 1
14476: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14477: LD_EXP 43
14481: PUSH
14482: LD_EXP 65
14486: AND
14487: IFFALSE 14499
14489: GO 14491
14491: DISABLE
// YouLost (  ) ;
14492: LD_STRING 
14494: PPUSH
14495: CALL_OW 104
14499: END
// every 0 0$1 trigger StreamModeActive and sFog do
14500: LD_EXP 43
14504: PUSH
14505: LD_EXP 64
14509: AND
14510: IFFALSE 14524
14512: GO 14514
14514: DISABLE
// FogOff ( your_side ) ;
14515: LD_OWVAR 2
14519: PPUSH
14520: CALL_OW 344
14524: END
// every 0 0$1 trigger StreamModeActive and sSun do
14525: LD_EXP 43
14529: PUSH
14530: LD_EXP 66
14534: AND
14535: IFFALSE 14563
14537: GO 14539
14539: DISABLE
// begin solar_recharge_percent := 0 ;
14540: LD_ADDR_OWVAR 79
14544: PUSH
14545: LD_INT 0
14547: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14548: LD_INT 10500
14550: PPUSH
14551: CALL_OW 67
// solar_recharge_percent := 100 ;
14555: LD_ADDR_OWVAR 79
14559: PUSH
14560: LD_INT 100
14562: ST_TO_ADDR
// end ;
14563: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14564: LD_EXP 43
14568: PUSH
14569: LD_EXP 67
14573: AND
14574: IFFALSE 14813
14576: GO 14578
14578: DISABLE
14579: LD_INT 0
14581: PPUSH
14582: PPUSH
14583: PPUSH
// begin tmp := [ ] ;
14584: LD_ADDR_VAR 0 3
14588: PUSH
14589: EMPTY
14590: ST_TO_ADDR
// for i := 1 to 6 do
14591: LD_ADDR_VAR 0 1
14595: PUSH
14596: DOUBLE
14597: LD_INT 1
14599: DEC
14600: ST_TO_ADDR
14601: LD_INT 6
14603: PUSH
14604: FOR_TO
14605: IFFALSE 14710
// begin uc_nation := nation_nature ;
14607: LD_ADDR_OWVAR 21
14611: PUSH
14612: LD_INT 0
14614: ST_TO_ADDR
// uc_side := 0 ;
14615: LD_ADDR_OWVAR 20
14619: PUSH
14620: LD_INT 0
14622: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14623: LD_ADDR_OWVAR 29
14627: PUSH
14628: LD_INT 12
14630: PUSH
14631: LD_INT 12
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: ST_TO_ADDR
// hc_agressivity := 20 ;
14638: LD_ADDR_OWVAR 35
14642: PUSH
14643: LD_INT 20
14645: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14646: LD_ADDR_OWVAR 28
14650: PUSH
14651: LD_INT 17
14653: ST_TO_ADDR
// hc_gallery :=  ;
14654: LD_ADDR_OWVAR 33
14658: PUSH
14659: LD_STRING 
14661: ST_TO_ADDR
// hc_name :=  ;
14662: LD_ADDR_OWVAR 26
14666: PUSH
14667: LD_STRING 
14669: ST_TO_ADDR
// un := CreateHuman ;
14670: LD_ADDR_VAR 0 2
14674: PUSH
14675: CALL_OW 44
14679: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14680: LD_VAR 0 2
14684: PPUSH
14685: LD_INT 1
14687: PPUSH
14688: CALL_OW 51
// tmp := tmp ^ un ;
14692: LD_ADDR_VAR 0 3
14696: PUSH
14697: LD_VAR 0 3
14701: PUSH
14702: LD_VAR 0 2
14706: ADD
14707: ST_TO_ADDR
// end ;
14708: GO 14604
14710: POP
14711: POP
// repeat wait ( 0 0$1 ) ;
14712: LD_INT 35
14714: PPUSH
14715: CALL_OW 67
// for un in tmp do
14719: LD_ADDR_VAR 0 2
14723: PUSH
14724: LD_VAR 0 3
14728: PUSH
14729: FOR_IN
14730: IFFALSE 14804
// begin if IsDead ( un ) then
14732: LD_VAR 0 2
14736: PPUSH
14737: CALL_OW 301
14741: IFFALSE 14761
// begin tmp := tmp diff un ;
14743: LD_ADDR_VAR 0 3
14747: PUSH
14748: LD_VAR 0 3
14752: PUSH
14753: LD_VAR 0 2
14757: DIFF
14758: ST_TO_ADDR
// continue ;
14759: GO 14729
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14761: LD_VAR 0 2
14765: PPUSH
14766: LD_INT 3
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_INT 0
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 69
14787: PPUSH
14788: LD_VAR 0 2
14792: PPUSH
14793: CALL_OW 74
14797: PPUSH
14798: CALL_OW 115
// end ;
14802: GO 14729
14804: POP
14805: POP
// until not tmp ;
14806: LD_VAR 0 3
14810: NOT
14811: IFFALSE 14712
// end ;
14813: PPOPN 3
14815: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14816: LD_EXP 43
14820: PUSH
14821: LD_EXP 68
14825: AND
14826: IFFALSE 14880
14828: GO 14830
14830: DISABLE
// begin ToLua ( displayTroll(); ) ;
14831: LD_STRING displayTroll();
14833: PPUSH
14834: CALL_OW 559
// wait ( 3 3$00 ) ;
14838: LD_INT 6300
14840: PPUSH
14841: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14845: LD_STRING hideTroll();
14847: PPUSH
14848: CALL_OW 559
// wait ( 1 1$00 ) ;
14852: LD_INT 2100
14854: PPUSH
14855: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14859: LD_STRING displayTroll();
14861: PPUSH
14862: CALL_OW 559
// wait ( 1 1$00 ) ;
14866: LD_INT 2100
14868: PPUSH
14869: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14873: LD_STRING hideTroll();
14875: PPUSH
14876: CALL_OW 559
// end ;
14880: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14881: LD_EXP 43
14885: PUSH
14886: LD_EXP 69
14890: AND
14891: IFFALSE 14954
14893: GO 14895
14895: DISABLE
14896: LD_INT 0
14898: PPUSH
// begin p := 0 ;
14899: LD_ADDR_VAR 0 1
14903: PUSH
14904: LD_INT 0
14906: ST_TO_ADDR
// repeat game_speed := 1 ;
14907: LD_ADDR_OWVAR 65
14911: PUSH
14912: LD_INT 1
14914: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14915: LD_INT 35
14917: PPUSH
14918: CALL_OW 67
// p := p + 1 ;
14922: LD_ADDR_VAR 0 1
14926: PUSH
14927: LD_VAR 0 1
14931: PUSH
14932: LD_INT 1
14934: PLUS
14935: ST_TO_ADDR
// until p >= 60 ;
14936: LD_VAR 0 1
14940: PUSH
14941: LD_INT 60
14943: GREATEREQUAL
14944: IFFALSE 14907
// game_speed := 4 ;
14946: LD_ADDR_OWVAR 65
14950: PUSH
14951: LD_INT 4
14953: ST_TO_ADDR
// end ;
14954: PPOPN 1
14956: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14957: LD_EXP 43
14961: PUSH
14962: LD_EXP 70
14966: AND
14967: IFFALSE 15113
14969: GO 14971
14971: DISABLE
14972: LD_INT 0
14974: PPUSH
14975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_INT 22
14983: PUSH
14984: LD_OWVAR 2
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PUSH
14993: LD_INT 2
14995: PUSH
14996: LD_INT 30
14998: PUSH
14999: LD_INT 0
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 30
15008: PUSH
15009: LD_INT 1
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: PUSH
15021: EMPTY
15022: LIST
15023: LIST
15024: PPUSH
15025: CALL_OW 69
15029: ST_TO_ADDR
// if not depot then
15030: LD_VAR 0 1
15034: NOT
15035: IFFALSE 15039
// exit ;
15037: GO 15113
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15039: LD_ADDR_VAR 0 2
15043: PUSH
15044: LD_VAR 0 1
15048: PUSH
15049: LD_INT 1
15051: PPUSH
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 12
15061: ARRAY
15062: PPUSH
15063: CALL_OW 274
15067: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15068: LD_VAR 0 2
15072: PPUSH
15073: LD_INT 1
15075: PPUSH
15076: LD_INT 0
15078: PPUSH
15079: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15083: LD_VAR 0 2
15087: PPUSH
15088: LD_INT 2
15090: PPUSH
15091: LD_INT 0
15093: PPUSH
15094: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15098: LD_VAR 0 2
15102: PPUSH
15103: LD_INT 3
15105: PPUSH
15106: LD_INT 0
15108: PPUSH
15109: CALL_OW 277
// end ;
15113: PPOPN 2
15115: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15116: LD_EXP 43
15120: PUSH
15121: LD_EXP 71
15125: AND
15126: IFFALSE 15223
15128: GO 15130
15130: DISABLE
15131: LD_INT 0
15133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15134: LD_ADDR_VAR 0 1
15138: PUSH
15139: LD_INT 22
15141: PUSH
15142: LD_OWVAR 2
15146: PUSH
15147: EMPTY
15148: LIST
15149: LIST
15150: PUSH
15151: LD_INT 21
15153: PUSH
15154: LD_INT 1
15156: PUSH
15157: EMPTY
15158: LIST
15159: LIST
15160: PUSH
15161: LD_INT 3
15163: PUSH
15164: LD_INT 23
15166: PUSH
15167: LD_INT 0
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: PPUSH
15183: CALL_OW 69
15187: ST_TO_ADDR
// if not tmp then
15188: LD_VAR 0 1
15192: NOT
15193: IFFALSE 15197
// exit ;
15195: GO 15223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 1
15204: PPUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 12
15214: ARRAY
15215: PPUSH
15216: LD_INT 200
15218: PPUSH
15219: CALL_OW 234
// end ;
15223: PPOPN 1
15225: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15226: LD_EXP 43
15230: PUSH
15231: LD_EXP 72
15235: AND
15236: IFFALSE 15315
15238: GO 15240
15240: DISABLE
15241: LD_INT 0
15243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15244: LD_ADDR_VAR 0 1
15248: PUSH
15249: LD_INT 22
15251: PUSH
15252: LD_OWVAR 2
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: LD_INT 21
15263: PUSH
15264: LD_INT 2
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PPUSH
15275: CALL_OW 69
15279: ST_TO_ADDR
// if not tmp then
15280: LD_VAR 0 1
15284: NOT
15285: IFFALSE 15289
// exit ;
15287: GO 15315
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15289: LD_VAR 0 1
15293: PUSH
15294: LD_INT 1
15296: PPUSH
15297: LD_VAR 0 1
15301: PPUSH
15302: CALL_OW 12
15306: ARRAY
15307: PPUSH
15308: LD_INT 60
15310: PPUSH
15311: CALL_OW 234
// end ;
15315: PPOPN 1
15317: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15318: LD_EXP 43
15322: PUSH
15323: LD_EXP 73
15327: AND
15328: IFFALSE 15427
15330: GO 15332
15332: DISABLE
15333: LD_INT 0
15335: PPUSH
15336: PPUSH
// begin enable ;
15337: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15338: LD_ADDR_VAR 0 1
15342: PUSH
15343: LD_INT 22
15345: PUSH
15346: LD_OWVAR 2
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: LD_INT 61
15357: PUSH
15358: EMPTY
15359: LIST
15360: PUSH
15361: LD_INT 33
15363: PUSH
15364: LD_INT 2
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: PPUSH
15376: CALL_OW 69
15380: ST_TO_ADDR
// if not tmp then
15381: LD_VAR 0 1
15385: NOT
15386: IFFALSE 15390
// exit ;
15388: GO 15427
// for i in tmp do
15390: LD_ADDR_VAR 0 2
15394: PUSH
15395: LD_VAR 0 1
15399: PUSH
15400: FOR_IN
15401: IFFALSE 15425
// if IsControledBy ( i ) then
15403: LD_VAR 0 2
15407: PPUSH
15408: CALL_OW 312
15412: IFFALSE 15423
// ComUnlink ( i ) ;
15414: LD_VAR 0 2
15418: PPUSH
15419: CALL_OW 136
15423: GO 15400
15425: POP
15426: POP
// end ;
15427: PPOPN 2
15429: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15430: LD_EXP 43
15434: PUSH
15435: LD_EXP 74
15439: AND
15440: IFFALSE 15580
15442: GO 15444
15444: DISABLE
15445: LD_INT 0
15447: PPUSH
15448: PPUSH
// begin ToLua ( displayPowell(); ) ;
15449: LD_STRING displayPowell();
15451: PPUSH
15452: CALL_OW 559
// uc_side := 0 ;
15456: LD_ADDR_OWVAR 20
15460: PUSH
15461: LD_INT 0
15463: ST_TO_ADDR
// uc_nation := 2 ;
15464: LD_ADDR_OWVAR 21
15468: PUSH
15469: LD_INT 2
15471: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15472: LD_ADDR_OWVAR 37
15476: PUSH
15477: LD_INT 14
15479: ST_TO_ADDR
// vc_engine := engine_siberite ;
15480: LD_ADDR_OWVAR 39
15484: PUSH
15485: LD_INT 3
15487: ST_TO_ADDR
// vc_control := control_apeman ;
15488: LD_ADDR_OWVAR 38
15492: PUSH
15493: LD_INT 5
15495: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15496: LD_ADDR_OWVAR 40
15500: PUSH
15501: LD_INT 29
15503: ST_TO_ADDR
// un := CreateVehicle ;
15504: LD_ADDR_VAR 0 2
15508: PUSH
15509: CALL_OW 45
15513: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15514: LD_VAR 0 2
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15526: LD_INT 35
15528: PPUSH
15529: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15533: LD_VAR 0 2
15537: PPUSH
15538: LD_INT 22
15540: PUSH
15541: LD_OWVAR 2
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 69
15554: PPUSH
15555: LD_VAR 0 2
15559: PPUSH
15560: CALL_OW 74
15564: PPUSH
15565: CALL_OW 115
// until IsDead ( un ) ;
15569: LD_VAR 0 2
15573: PPUSH
15574: CALL_OW 301
15578: IFFALSE 15526
// end ;
15580: PPOPN 2
15582: END
// every 0 0$1 trigger StreamModeActive and sStu do
15583: LD_EXP 43
15587: PUSH
15588: LD_EXP 82
15592: AND
15593: IFFALSE 15609
15595: GO 15597
15597: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15598: LD_STRING displayStucuk();
15600: PPUSH
15601: CALL_OW 559
// ResetFog ;
15605: CALL_OW 335
// end ;
15609: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15610: LD_EXP 43
15614: PUSH
15615: LD_EXP 75
15619: AND
15620: IFFALSE 15761
15622: GO 15624
15624: DISABLE
15625: LD_INT 0
15627: PPUSH
15628: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15629: LD_ADDR_VAR 0 2
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_OWVAR 2
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 21
15648: PUSH
15649: LD_INT 1
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PPUSH
15660: CALL_OW 69
15664: ST_TO_ADDR
// if not tmp then
15665: LD_VAR 0 2
15669: NOT
15670: IFFALSE 15674
// exit ;
15672: GO 15761
// un := tmp [ rand ( 1 , tmp ) ] ;
15674: LD_ADDR_VAR 0 1
15678: PUSH
15679: LD_VAR 0 2
15683: PUSH
15684: LD_INT 1
15686: PPUSH
15687: LD_VAR 0 2
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15698: LD_VAR 0 1
15702: PPUSH
15703: LD_INT 0
15705: PPUSH
15706: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15710: LD_VAR 0 1
15714: PPUSH
15715: LD_OWVAR 3
15719: PUSH
15720: LD_VAR 0 1
15724: DIFF
15725: PPUSH
15726: LD_VAR 0 1
15730: PPUSH
15731: CALL_OW 74
15735: PPUSH
15736: CALL_OW 115
// wait ( 0 0$20 ) ;
15740: LD_INT 700
15742: PPUSH
15743: CALL_OW 67
// SetSide ( un , your_side ) ;
15747: LD_VAR 0 1
15751: PPUSH
15752: LD_OWVAR 2
15756: PPUSH
15757: CALL_OW 235
// end ;
15761: PPOPN 2
15763: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15764: LD_EXP 43
15768: PUSH
15769: LD_EXP 76
15773: AND
15774: IFFALSE 15880
15776: GO 15778
15778: DISABLE
15779: LD_INT 0
15781: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15782: LD_ADDR_VAR 0 1
15786: PUSH
15787: LD_INT 22
15789: PUSH
15790: LD_OWVAR 2
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: LD_INT 30
15804: PUSH
15805: LD_INT 0
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 30
15814: PUSH
15815: LD_INT 1
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: LIST
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PPUSH
15831: CALL_OW 69
15835: ST_TO_ADDR
// if not depot then
15836: LD_VAR 0 1
15840: NOT
15841: IFFALSE 15845
// exit ;
15843: GO 15880
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15845: LD_VAR 0 1
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: CALL_OW 250
15858: PPUSH
15859: LD_VAR 0 1
15863: PUSH
15864: LD_INT 1
15866: ARRAY
15867: PPUSH
15868: CALL_OW 251
15872: PPUSH
15873: LD_INT 70
15875: PPUSH
15876: CALL_OW 495
// end ;
15880: PPOPN 1
15882: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15883: LD_EXP 43
15887: PUSH
15888: LD_EXP 77
15892: AND
15893: IFFALSE 16104
15895: GO 15897
15897: DISABLE
15898: LD_INT 0
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15905: LD_ADDR_VAR 0 5
15909: PUSH
15910: LD_INT 22
15912: PUSH
15913: LD_OWVAR 2
15917: PUSH
15918: EMPTY
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 21
15924: PUSH
15925: LD_INT 1
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PPUSH
15936: CALL_OW 69
15940: ST_TO_ADDR
// if not tmp then
15941: LD_VAR 0 5
15945: NOT
15946: IFFALSE 15950
// exit ;
15948: GO 16104
// for i in tmp do
15950: LD_ADDR_VAR 0 1
15954: PUSH
15955: LD_VAR 0 5
15959: PUSH
15960: FOR_IN
15961: IFFALSE 16102
// begin d := rand ( 0 , 5 ) ;
15963: LD_ADDR_VAR 0 4
15967: PUSH
15968: LD_INT 0
15970: PPUSH
15971: LD_INT 5
15973: PPUSH
15974: CALL_OW 12
15978: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15979: LD_ADDR_VAR 0 2
15983: PUSH
15984: LD_VAR 0 1
15988: PPUSH
15989: CALL_OW 250
15993: PPUSH
15994: LD_VAR 0 4
15998: PPUSH
15999: LD_INT 3
16001: PPUSH
16002: LD_INT 12
16004: PPUSH
16005: CALL_OW 12
16009: PPUSH
16010: CALL_OW 272
16014: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16015: LD_ADDR_VAR 0 3
16019: PUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 251
16029: PPUSH
16030: LD_VAR 0 4
16034: PPUSH
16035: LD_INT 3
16037: PPUSH
16038: LD_INT 12
16040: PPUSH
16041: CALL_OW 12
16045: PPUSH
16046: CALL_OW 273
16050: ST_TO_ADDR
// if ValidHex ( x , y ) then
16051: LD_VAR 0 2
16055: PPUSH
16056: LD_VAR 0 3
16060: PPUSH
16061: CALL_OW 488
16065: IFFALSE 16100
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_VAR 0 2
16076: PPUSH
16077: LD_VAR 0 3
16081: PPUSH
16082: LD_INT 3
16084: PPUSH
16085: LD_INT 6
16087: PPUSH
16088: CALL_OW 12
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: CALL_OW 483
// end ;
16100: GO 15960
16102: POP
16103: POP
// end ;
16104: PPOPN 5
16106: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16107: LD_EXP 43
16111: PUSH
16112: LD_EXP 78
16116: AND
16117: IFFALSE 16211
16119: GO 16121
16121: DISABLE
16122: LD_INT 0
16124: PPUSH
16125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16126: LD_ADDR_VAR 0 2
16130: PUSH
16131: LD_INT 22
16133: PUSH
16134: LD_OWVAR 2
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 32
16145: PUSH
16146: LD_INT 1
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 21
16155: PUSH
16156: LD_INT 2
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: PPUSH
16168: CALL_OW 69
16172: ST_TO_ADDR
// if not tmp then
16173: LD_VAR 0 2
16177: NOT
16178: IFFALSE 16182
// exit ;
16180: GO 16211
// for i in tmp do
16182: LD_ADDR_VAR 0 1
16186: PUSH
16187: LD_VAR 0 2
16191: PUSH
16192: FOR_IN
16193: IFFALSE 16209
// SetFuel ( i , 0 ) ;
16195: LD_VAR 0 1
16199: PPUSH
16200: LD_INT 0
16202: PPUSH
16203: CALL_OW 240
16207: GO 16192
16209: POP
16210: POP
// end ;
16211: PPOPN 2
16213: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16214: LD_EXP 43
16218: PUSH
16219: LD_EXP 79
16223: AND
16224: IFFALSE 16290
16226: GO 16228
16228: DISABLE
16229: LD_INT 0
16231: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16232: LD_ADDR_VAR 0 1
16236: PUSH
16237: LD_INT 22
16239: PUSH
16240: LD_OWVAR 2
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: LD_INT 30
16251: PUSH
16252: LD_INT 29
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PPUSH
16263: CALL_OW 69
16267: ST_TO_ADDR
// if not tmp then
16268: LD_VAR 0 1
16272: NOT
16273: IFFALSE 16277
// exit ;
16275: GO 16290
// DestroyUnit ( tmp [ 1 ] ) ;
16277: LD_VAR 0 1
16281: PUSH
16282: LD_INT 1
16284: ARRAY
16285: PPUSH
16286: CALL_OW 65
// end ;
16290: PPOPN 1
16292: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16293: LD_EXP 43
16297: PUSH
16298: LD_EXP 81
16302: AND
16303: IFFALSE 16432
16305: GO 16307
16307: DISABLE
16308: LD_INT 0
16310: PPUSH
// begin uc_side := 0 ;
16311: LD_ADDR_OWVAR 20
16315: PUSH
16316: LD_INT 0
16318: ST_TO_ADDR
// uc_nation := nation_arabian ;
16319: LD_ADDR_OWVAR 21
16323: PUSH
16324: LD_INT 2
16326: ST_TO_ADDR
// hc_gallery :=  ;
16327: LD_ADDR_OWVAR 33
16331: PUSH
16332: LD_STRING 
16334: ST_TO_ADDR
// hc_name :=  ;
16335: LD_ADDR_OWVAR 26
16339: PUSH
16340: LD_STRING 
16342: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16343: LD_INT 1
16345: PPUSH
16346: LD_INT 11
16348: PPUSH
16349: LD_INT 10
16351: PPUSH
16352: CALL_OW 380
// un := CreateHuman ;
16356: LD_ADDR_VAR 0 1
16360: PUSH
16361: CALL_OW 44
16365: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16366: LD_VAR 0 1
16370: PPUSH
16371: LD_INT 1
16373: PPUSH
16374: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16378: LD_INT 35
16380: PPUSH
16381: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 22
16392: PUSH
16393: LD_OWVAR 2
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PPUSH
16402: CALL_OW 69
16406: PPUSH
16407: LD_VAR 0 1
16411: PPUSH
16412: CALL_OW 74
16416: PPUSH
16417: CALL_OW 115
// until IsDead ( un ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: CALL_OW 301
16430: IFFALSE 16378
// end ;
16432: PPOPN 1
16434: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16435: LD_EXP 43
16439: PUSH
16440: LD_EXP 83
16444: AND
16445: IFFALSE 16457
16447: GO 16449
16449: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16450: LD_STRING earthquake(getX(game), 0, 32)
16452: PPUSH
16453: CALL_OW 559
16457: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16458: LD_EXP 43
16462: PUSH
16463: LD_EXP 84
16467: AND
16468: IFFALSE 16559
16470: GO 16472
16472: DISABLE
16473: LD_INT 0
16475: PPUSH
// begin enable ;
16476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16477: LD_ADDR_VAR 0 1
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_OWVAR 2
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 21
16496: PUSH
16497: LD_INT 2
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 33
16506: PUSH
16507: LD_INT 3
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: LIST
16518: PPUSH
16519: CALL_OW 69
16523: ST_TO_ADDR
// if not tmp then
16524: LD_VAR 0 1
16528: NOT
16529: IFFALSE 16533
// exit ;
16531: GO 16559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16533: LD_VAR 0 1
16537: PUSH
16538: LD_INT 1
16540: PPUSH
16541: LD_VAR 0 1
16545: PPUSH
16546: CALL_OW 12
16550: ARRAY
16551: PPUSH
16552: LD_INT 1
16554: PPUSH
16555: CALL_OW 234
// end ;
16559: PPOPN 1
16561: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16562: LD_EXP 43
16566: PUSH
16567: LD_EXP 85
16571: AND
16572: IFFALSE 16713
16574: GO 16576
16576: DISABLE
16577: LD_INT 0
16579: PPUSH
16580: PPUSH
16581: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16582: LD_ADDR_VAR 0 3
16586: PUSH
16587: LD_INT 22
16589: PUSH
16590: LD_OWVAR 2
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: LD_INT 25
16601: PUSH
16602: LD_INT 1
16604: PUSH
16605: EMPTY
16606: LIST
16607: LIST
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: ST_TO_ADDR
// if not tmp then
16618: LD_VAR 0 3
16622: NOT
16623: IFFALSE 16627
// exit ;
16625: GO 16713
// un := tmp [ rand ( 1 , tmp ) ] ;
16627: LD_ADDR_VAR 0 2
16631: PUSH
16632: LD_VAR 0 3
16636: PUSH
16637: LD_INT 1
16639: PPUSH
16640: LD_VAR 0 3
16644: PPUSH
16645: CALL_OW 12
16649: ARRAY
16650: ST_TO_ADDR
// if Crawls ( un ) then
16651: LD_VAR 0 2
16655: PPUSH
16656: CALL_OW 318
16660: IFFALSE 16671
// ComWalk ( un ) ;
16662: LD_VAR 0 2
16666: PPUSH
16667: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16671: LD_VAR 0 2
16675: PPUSH
16676: LD_INT 9
16678: PPUSH
16679: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16683: LD_INT 28
16685: PPUSH
16686: LD_OWVAR 2
16690: PPUSH
16691: LD_INT 2
16693: PPUSH
16694: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16698: LD_INT 29
16700: PPUSH
16701: LD_OWVAR 2
16705: PPUSH
16706: LD_INT 2
16708: PPUSH
16709: CALL_OW 322
// end ;
16713: PPOPN 3
16715: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16716: LD_EXP 43
16720: PUSH
16721: LD_EXP 86
16725: AND
16726: IFFALSE 16837
16728: GO 16730
16730: DISABLE
16731: LD_INT 0
16733: PPUSH
16734: PPUSH
16735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16736: LD_ADDR_VAR 0 3
16740: PUSH
16741: LD_INT 22
16743: PUSH
16744: LD_OWVAR 2
16748: PUSH
16749: EMPTY
16750: LIST
16751: LIST
16752: PUSH
16753: LD_INT 25
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: EMPTY
16764: LIST
16765: LIST
16766: PPUSH
16767: CALL_OW 69
16771: ST_TO_ADDR
// if not tmp then
16772: LD_VAR 0 3
16776: NOT
16777: IFFALSE 16781
// exit ;
16779: GO 16837
// un := tmp [ rand ( 1 , tmp ) ] ;
16781: LD_ADDR_VAR 0 2
16785: PUSH
16786: LD_VAR 0 3
16790: PUSH
16791: LD_INT 1
16793: PPUSH
16794: LD_VAR 0 3
16798: PPUSH
16799: CALL_OW 12
16803: ARRAY
16804: ST_TO_ADDR
// if Crawls ( un ) then
16805: LD_VAR 0 2
16809: PPUSH
16810: CALL_OW 318
16814: IFFALSE 16825
// ComWalk ( un ) ;
16816: LD_VAR 0 2
16820: PPUSH
16821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16825: LD_VAR 0 2
16829: PPUSH
16830: LD_INT 8
16832: PPUSH
16833: CALL_OW 336
// end ;
16837: PPOPN 3
16839: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16840: LD_EXP 43
16844: PUSH
16845: LD_EXP 87
16849: AND
16850: IFFALSE 16994
16852: GO 16854
16854: DISABLE
16855: LD_INT 0
16857: PPUSH
16858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16859: LD_ADDR_VAR 0 2
16863: PUSH
16864: LD_INT 22
16866: PUSH
16867: LD_OWVAR 2
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: PUSH
16876: LD_INT 21
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 2
16888: PUSH
16889: LD_INT 34
16891: PUSH
16892: LD_INT 12
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 34
16901: PUSH
16902: LD_INT 51
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 34
16911: PUSH
16912: LD_INT 32
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: PPUSH
16930: CALL_OW 69
16934: ST_TO_ADDR
// if not tmp then
16935: LD_VAR 0 2
16939: NOT
16940: IFFALSE 16944
// exit ;
16942: GO 16994
// for i in tmp do
16944: LD_ADDR_VAR 0 1
16948: PUSH
16949: LD_VAR 0 2
16953: PUSH
16954: FOR_IN
16955: IFFALSE 16992
// if GetCargo ( i , mat_artifact ) = 0 then
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_INT 4
16964: PPUSH
16965: CALL_OW 289
16969: PUSH
16970: LD_INT 0
16972: EQUAL
16973: IFFALSE 16990
// SetCargo ( i , mat_siberit , 100 ) ;
16975: LD_VAR 0 1
16979: PPUSH
16980: LD_INT 3
16982: PPUSH
16983: LD_INT 100
16985: PPUSH
16986: CALL_OW 290
16990: GO 16954
16992: POP
16993: POP
// end ;
16994: PPOPN 2
16996: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16997: LD_EXP 43
17001: PUSH
17002: LD_EXP 88
17006: AND
17007: IFFALSE 17190
17009: GO 17011
17011: DISABLE
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17016: LD_ADDR_VAR 0 2
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_OWVAR 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 69
17037: ST_TO_ADDR
// if not tmp then
17038: LD_VAR 0 2
17042: NOT
17043: IFFALSE 17047
// exit ;
17045: GO 17190
// for i := 1 to 2 do
17047: LD_ADDR_VAR 0 1
17051: PUSH
17052: DOUBLE
17053: LD_INT 1
17055: DEC
17056: ST_TO_ADDR
17057: LD_INT 2
17059: PUSH
17060: FOR_TO
17061: IFFALSE 17188
// begin uc_side := your_side ;
17063: LD_ADDR_OWVAR 20
17067: PUSH
17068: LD_OWVAR 2
17072: ST_TO_ADDR
// uc_nation := nation_american ;
17073: LD_ADDR_OWVAR 21
17077: PUSH
17078: LD_INT 1
17080: ST_TO_ADDR
// vc_chassis := us_morphling ;
17081: LD_ADDR_OWVAR 37
17085: PUSH
17086: LD_INT 5
17088: ST_TO_ADDR
// vc_engine := engine_siberite ;
17089: LD_ADDR_OWVAR 39
17093: PUSH
17094: LD_INT 3
17096: ST_TO_ADDR
// vc_control := control_computer ;
17097: LD_ADDR_OWVAR 38
17101: PUSH
17102: LD_INT 3
17104: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17105: LD_ADDR_OWVAR 40
17109: PUSH
17110: LD_INT 10
17112: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17113: LD_VAR 0 2
17117: PUSH
17118: LD_INT 1
17120: ARRAY
17121: PPUSH
17122: CALL_OW 310
17126: NOT
17127: IFFALSE 17174
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17129: CALL_OW 45
17133: PPUSH
17134: LD_VAR 0 2
17138: PUSH
17139: LD_INT 1
17141: ARRAY
17142: PPUSH
17143: CALL_OW 250
17147: PPUSH
17148: LD_VAR 0 2
17152: PUSH
17153: LD_INT 1
17155: ARRAY
17156: PPUSH
17157: CALL_OW 251
17161: PPUSH
17162: LD_INT 12
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 50
17172: GO 17186
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17174: CALL_OW 45
17178: PPUSH
17179: LD_INT 1
17181: PPUSH
17182: CALL_OW 51
// end ;
17186: GO 17060
17188: POP
17189: POP
// end ;
17190: PPOPN 2
17192: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17193: LD_EXP 43
17197: PUSH
17198: LD_EXP 89
17202: AND
17203: IFFALSE 17425
17205: GO 17207
17207: DISABLE
17208: LD_INT 0
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17216: LD_ADDR_VAR 0 6
17220: PUSH
17221: LD_INT 22
17223: PUSH
17224: LD_OWVAR 2
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: LD_INT 21
17235: PUSH
17236: LD_INT 1
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: PUSH
17243: LD_INT 3
17245: PUSH
17246: LD_INT 23
17248: PUSH
17249: LD_INT 0
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: LIST
17264: PPUSH
17265: CALL_OW 69
17269: ST_TO_ADDR
// if not tmp then
17270: LD_VAR 0 6
17274: NOT
17275: IFFALSE 17279
// exit ;
17277: GO 17425
// s1 := rand ( 1 , 4 ) ;
17279: LD_ADDR_VAR 0 2
17283: PUSH
17284: LD_INT 1
17286: PPUSH
17287: LD_INT 4
17289: PPUSH
17290: CALL_OW 12
17294: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17295: LD_ADDR_VAR 0 4
17299: PUSH
17300: LD_VAR 0 6
17304: PUSH
17305: LD_INT 1
17307: ARRAY
17308: PPUSH
17309: LD_VAR 0 2
17313: PPUSH
17314: CALL_OW 259
17318: ST_TO_ADDR
// if s1 = 1 then
17319: LD_VAR 0 2
17323: PUSH
17324: LD_INT 1
17326: EQUAL
17327: IFFALSE 17347
// s2 := rand ( 2 , 4 ) else
17329: LD_ADDR_VAR 0 3
17333: PUSH
17334: LD_INT 2
17336: PPUSH
17337: LD_INT 4
17339: PPUSH
17340: CALL_OW 12
17344: ST_TO_ADDR
17345: GO 17355
// s2 := 1 ;
17347: LD_ADDR_VAR 0 3
17351: PUSH
17352: LD_INT 1
17354: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17355: LD_ADDR_VAR 0 5
17359: PUSH
17360: LD_VAR 0 6
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PPUSH
17369: LD_VAR 0 3
17373: PPUSH
17374: CALL_OW 259
17378: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17379: LD_VAR 0 6
17383: PUSH
17384: LD_INT 1
17386: ARRAY
17387: PPUSH
17388: LD_VAR 0 2
17392: PPUSH
17393: LD_VAR 0 5
17397: PPUSH
17398: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17402: LD_VAR 0 6
17406: PUSH
17407: LD_INT 1
17409: ARRAY
17410: PPUSH
17411: LD_VAR 0 3
17415: PPUSH
17416: LD_VAR 0 4
17420: PPUSH
17421: CALL_OW 237
// end ;
17425: PPOPN 6
17427: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17428: LD_EXP 43
17432: PUSH
17433: LD_EXP 90
17437: AND
17438: IFFALSE 17517
17440: GO 17442
17442: DISABLE
17443: LD_INT 0
17445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17446: LD_ADDR_VAR 0 1
17450: PUSH
17451: LD_INT 22
17453: PUSH
17454: LD_OWVAR 2
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 30
17465: PUSH
17466: LD_INT 3
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PPUSH
17477: CALL_OW 69
17481: ST_TO_ADDR
// if not tmp then
17482: LD_VAR 0 1
17486: NOT
17487: IFFALSE 17491
// exit ;
17489: GO 17517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17491: LD_VAR 0 1
17495: PUSH
17496: LD_INT 1
17498: PPUSH
17499: LD_VAR 0 1
17503: PPUSH
17504: CALL_OW 12
17508: ARRAY
17509: PPUSH
17510: LD_INT 1
17512: PPUSH
17513: CALL_OW 234
// end ;
17517: PPOPN 1
17519: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17520: LD_EXP 43
17524: PUSH
17525: LD_EXP 91
17529: AND
17530: IFFALSE 17642
17532: GO 17534
17534: DISABLE
17535: LD_INT 0
17537: PPUSH
17538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17539: LD_ADDR_VAR 0 2
17543: PUSH
17544: LD_INT 22
17546: PUSH
17547: LD_OWVAR 2
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: LD_INT 2
17558: PUSH
17559: LD_INT 30
17561: PUSH
17562: LD_INT 27
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 30
17571: PUSH
17572: LD_INT 26
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 30
17581: PUSH
17582: LD_INT 28
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: PPUSH
17599: CALL_OW 69
17603: ST_TO_ADDR
// if not tmp then
17604: LD_VAR 0 2
17608: NOT
17609: IFFALSE 17613
// exit ;
17611: GO 17642
// for i in tmp do
17613: LD_ADDR_VAR 0 1
17617: PUSH
17618: LD_VAR 0 2
17622: PUSH
17623: FOR_IN
17624: IFFALSE 17640
// SetLives ( i , 1 ) ;
17626: LD_VAR 0 1
17630: PPUSH
17631: LD_INT 1
17633: PPUSH
17634: CALL_OW 234
17638: GO 17623
17640: POP
17641: POP
// end ;
17642: PPOPN 2
17644: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17645: LD_EXP 43
17649: PUSH
17650: LD_EXP 92
17654: AND
17655: IFFALSE 17929
17657: GO 17659
17659: DISABLE
17660: LD_INT 0
17662: PPUSH
17663: PPUSH
17664: PPUSH
// begin i := rand ( 1 , 7 ) ;
17665: LD_ADDR_VAR 0 1
17669: PUSH
17670: LD_INT 1
17672: PPUSH
17673: LD_INT 7
17675: PPUSH
17676: CALL_OW 12
17680: ST_TO_ADDR
// case i of 1 :
17681: LD_VAR 0 1
17685: PUSH
17686: LD_INT 1
17688: DOUBLE
17689: EQUAL
17690: IFTRUE 17694
17692: GO 17704
17694: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17695: LD_STRING earthquake(getX(game), 0, 32)
17697: PPUSH
17698: CALL_OW 559
17702: GO 17929
17704: LD_INT 2
17706: DOUBLE
17707: EQUAL
17708: IFTRUE 17712
17710: GO 17726
17712: POP
// begin ToLua ( displayStucuk(); ) ;
17713: LD_STRING displayStucuk();
17715: PPUSH
17716: CALL_OW 559
// ResetFog ;
17720: CALL_OW 335
// end ; 3 :
17724: GO 17929
17726: LD_INT 3
17728: DOUBLE
17729: EQUAL
17730: IFTRUE 17734
17732: GO 17838
17734: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17735: LD_ADDR_VAR 0 2
17739: PUSH
17740: LD_INT 22
17742: PUSH
17743: LD_OWVAR 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: LD_INT 25
17754: PUSH
17755: LD_INT 1
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PPUSH
17766: CALL_OW 69
17770: ST_TO_ADDR
// if not tmp then
17771: LD_VAR 0 2
17775: NOT
17776: IFFALSE 17780
// exit ;
17778: GO 17929
// un := tmp [ rand ( 1 , tmp ) ] ;
17780: LD_ADDR_VAR 0 3
17784: PUSH
17785: LD_VAR 0 2
17789: PUSH
17790: LD_INT 1
17792: PPUSH
17793: LD_VAR 0 2
17797: PPUSH
17798: CALL_OW 12
17802: ARRAY
17803: ST_TO_ADDR
// if Crawls ( un ) then
17804: LD_VAR 0 3
17808: PPUSH
17809: CALL_OW 318
17813: IFFALSE 17824
// ComWalk ( un ) ;
17815: LD_VAR 0 3
17819: PPUSH
17820: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17824: LD_VAR 0 3
17828: PPUSH
17829: LD_INT 8
17831: PPUSH
17832: CALL_OW 336
// end ; 4 :
17836: GO 17929
17838: LD_INT 4
17840: DOUBLE
17841: EQUAL
17842: IFTRUE 17846
17844: GO 17907
17846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17847: LD_ADDR_VAR 0 2
17851: PUSH
17852: LD_INT 22
17854: PUSH
17855: LD_OWVAR 2
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 30
17866: PUSH
17867: LD_INT 29
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PPUSH
17878: CALL_OW 69
17882: ST_TO_ADDR
// if not tmp then
17883: LD_VAR 0 2
17887: NOT
17888: IFFALSE 17892
// exit ;
17890: GO 17929
// DestroyUnit ( tmp [ 1 ] ) ;
17892: LD_VAR 0 2
17896: PUSH
17897: LD_INT 1
17899: ARRAY
17900: PPUSH
17901: CALL_OW 65
// end ; 5 .. 7 :
17905: GO 17929
17907: LD_INT 5
17909: DOUBLE
17910: GREATEREQUAL
17911: IFFALSE 17919
17913: LD_INT 7
17915: DOUBLE
17916: LESSEQUAL
17917: IFTRUE 17921
17919: GO 17928
17921: POP
// StreamSibBomb ; end ;
17922: CALL 14179 0 0
17926: GO 17929
17928: POP
// end ;
17929: PPOPN 3
17931: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17932: LD_EXP 43
17936: PUSH
17937: LD_EXP 93
17941: AND
17942: IFFALSE 18098
17944: GO 17946
17946: DISABLE
17947: LD_INT 0
17949: PPUSH
17950: PPUSH
17951: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17952: LD_ADDR_VAR 0 2
17956: PUSH
17957: LD_INT 81
17959: PUSH
17960: LD_OWVAR 2
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 2
17971: PUSH
17972: LD_INT 21
17974: PUSH
17975: LD_INT 1
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: PUSH
17982: LD_INT 21
17984: PUSH
17985: LD_INT 2
17987: PUSH
17988: EMPTY
17989: LIST
17990: LIST
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PPUSH
18001: CALL_OW 69
18005: ST_TO_ADDR
// if not tmp then
18006: LD_VAR 0 2
18010: NOT
18011: IFFALSE 18015
// exit ;
18013: GO 18098
// p := 0 ;
18015: LD_ADDR_VAR 0 3
18019: PUSH
18020: LD_INT 0
18022: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18023: LD_INT 35
18025: PPUSH
18026: CALL_OW 67
// p := p + 1 ;
18030: LD_ADDR_VAR 0 3
18034: PUSH
18035: LD_VAR 0 3
18039: PUSH
18040: LD_INT 1
18042: PLUS
18043: ST_TO_ADDR
// for i in tmp do
18044: LD_ADDR_VAR 0 1
18048: PUSH
18049: LD_VAR 0 2
18053: PUSH
18054: FOR_IN
18055: IFFALSE 18086
// if GetLives ( i ) < 1000 then
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 256
18066: PUSH
18067: LD_INT 1000
18069: LESS
18070: IFFALSE 18084
// SetLives ( i , 1000 ) ;
18072: LD_VAR 0 1
18076: PPUSH
18077: LD_INT 1000
18079: PPUSH
18080: CALL_OW 234
18084: GO 18054
18086: POP
18087: POP
// until p > 20 ;
18088: LD_VAR 0 3
18092: PUSH
18093: LD_INT 20
18095: GREATER
18096: IFFALSE 18023
// end ;
18098: PPOPN 3
18100: END
// every 0 0$1 trigger StreamModeActive and sTime do
18101: LD_EXP 43
18105: PUSH
18106: LD_EXP 94
18110: AND
18111: IFFALSE 18146
18113: GO 18115
18115: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18116: LD_INT 28
18118: PPUSH
18119: LD_OWVAR 2
18123: PPUSH
18124: LD_INT 2
18126: PPUSH
18127: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18131: LD_INT 30
18133: PPUSH
18134: LD_OWVAR 2
18138: PPUSH
18139: LD_INT 2
18141: PPUSH
18142: CALL_OW 322
// end ;
18146: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18147: LD_EXP 43
18151: PUSH
18152: LD_EXP 95
18156: AND
18157: IFFALSE 18278
18159: GO 18161
18161: DISABLE
18162: LD_INT 0
18164: PPUSH
18165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18166: LD_ADDR_VAR 0 2
18170: PUSH
18171: LD_INT 22
18173: PUSH
18174: LD_OWVAR 2
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: PUSH
18183: LD_INT 21
18185: PUSH
18186: LD_INT 1
18188: PUSH
18189: EMPTY
18190: LIST
18191: LIST
18192: PUSH
18193: LD_INT 3
18195: PUSH
18196: LD_INT 23
18198: PUSH
18199: LD_INT 0
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: LIST
18214: PPUSH
18215: CALL_OW 69
18219: ST_TO_ADDR
// if not tmp then
18220: LD_VAR 0 2
18224: NOT
18225: IFFALSE 18229
// exit ;
18227: GO 18278
// for i in tmp do
18229: LD_ADDR_VAR 0 1
18233: PUSH
18234: LD_VAR 0 2
18238: PUSH
18239: FOR_IN
18240: IFFALSE 18276
// begin if Crawls ( i ) then
18242: LD_VAR 0 1
18246: PPUSH
18247: CALL_OW 318
18251: IFFALSE 18262
// ComWalk ( i ) ;
18253: LD_VAR 0 1
18257: PPUSH
18258: CALL_OW 138
// SetClass ( i , 2 ) ;
18262: LD_VAR 0 1
18266: PPUSH
18267: LD_INT 2
18269: PPUSH
18270: CALL_OW 336
// end ;
18274: GO 18239
18276: POP
18277: POP
// end ;
18278: PPOPN 2
18280: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18281: LD_EXP 43
18285: PUSH
18286: LD_EXP 96
18290: AND
18291: IFFALSE 18572
18293: GO 18295
18295: DISABLE
18296: LD_INT 0
18298: PPUSH
18299: PPUSH
18300: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18301: LD_OWVAR 2
18305: PPUSH
18306: LD_INT 9
18308: PPUSH
18309: LD_INT 1
18311: PPUSH
18312: LD_INT 1
18314: PPUSH
18315: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18319: LD_INT 9
18321: PPUSH
18322: LD_OWVAR 2
18326: PPUSH
18327: CALL_OW 343
// uc_side := 9 ;
18331: LD_ADDR_OWVAR 20
18335: PUSH
18336: LD_INT 9
18338: ST_TO_ADDR
// uc_nation := 2 ;
18339: LD_ADDR_OWVAR 21
18343: PUSH
18344: LD_INT 2
18346: ST_TO_ADDR
// hc_name := Dark Warrior ;
18347: LD_ADDR_OWVAR 26
18351: PUSH
18352: LD_STRING Dark Warrior
18354: ST_TO_ADDR
// hc_gallery :=  ;
18355: LD_ADDR_OWVAR 33
18359: PUSH
18360: LD_STRING 
18362: ST_TO_ADDR
// hc_noskilllimit := true ;
18363: LD_ADDR_OWVAR 76
18367: PUSH
18368: LD_INT 1
18370: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18371: LD_ADDR_OWVAR 31
18375: PUSH
18376: LD_INT 30
18378: PUSH
18379: LD_INT 30
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 30
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: ST_TO_ADDR
// un := CreateHuman ;
18394: LD_ADDR_VAR 0 3
18398: PUSH
18399: CALL_OW 44
18403: ST_TO_ADDR
// hc_noskilllimit := false ;
18404: LD_ADDR_OWVAR 76
18408: PUSH
18409: LD_INT 0
18411: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18412: LD_VAR 0 3
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: CALL_OW 51
// p := 0 ;
18424: LD_ADDR_VAR 0 2
18428: PUSH
18429: LD_INT 0
18431: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18432: LD_INT 35
18434: PPUSH
18435: CALL_OW 67
// p := p + 1 ;
18439: LD_ADDR_VAR 0 2
18443: PUSH
18444: LD_VAR 0 2
18448: PUSH
18449: LD_INT 1
18451: PLUS
18452: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18453: LD_VAR 0 3
18457: PPUSH
18458: CALL_OW 256
18462: PUSH
18463: LD_INT 1000
18465: LESS
18466: IFFALSE 18480
// SetLives ( un , 1000 ) ;
18468: LD_VAR 0 3
18472: PPUSH
18473: LD_INT 1000
18475: PPUSH
18476: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18480: LD_VAR 0 3
18484: PPUSH
18485: LD_INT 81
18487: PUSH
18488: LD_OWVAR 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 91
18499: PUSH
18500: LD_VAR 0 3
18504: PUSH
18505: LD_INT 30
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: PPUSH
18522: LD_VAR 0 3
18526: PPUSH
18527: CALL_OW 74
18531: PPUSH
18532: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18536: LD_VAR 0 2
18540: PUSH
18541: LD_INT 60
18543: GREATER
18544: PUSH
18545: LD_VAR 0 3
18549: PPUSH
18550: CALL_OW 301
18554: OR
18555: IFFALSE 18432
// if un then
18557: LD_VAR 0 3
18561: IFFALSE 18572
// RemoveUnit ( un ) ;
18563: LD_VAR 0 3
18567: PPUSH
18568: CALL_OW 64
// end ;
18572: PPOPN 3
18574: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18575: LD_INT 0
18577: PPUSH
// case cmd of 301 :
18578: LD_VAR 0 1
18582: PUSH
18583: LD_INT 301
18585: DOUBLE
18586: EQUAL
18587: IFTRUE 18591
18589: GO 18623
18591: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18592: LD_VAR 0 6
18596: PPUSH
18597: LD_VAR 0 7
18601: PPUSH
18602: LD_VAR 0 8
18606: PPUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: LD_VAR 0 5
18616: PPUSH
18617: CALL 19824 0 5
18621: GO 18744
18623: LD_INT 302
18625: DOUBLE
18626: EQUAL
18627: IFTRUE 18631
18629: GO 18668
18631: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18632: LD_VAR 0 6
18636: PPUSH
18637: LD_VAR 0 7
18641: PPUSH
18642: LD_VAR 0 8
18646: PPUSH
18647: LD_VAR 0 9
18651: PPUSH
18652: LD_VAR 0 4
18656: PPUSH
18657: LD_VAR 0 5
18661: PPUSH
18662: CALL 19915 0 6
18666: GO 18744
18668: LD_INT 303
18670: DOUBLE
18671: EQUAL
18672: IFTRUE 18676
18674: GO 18713
18676: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18677: LD_VAR 0 6
18681: PPUSH
18682: LD_VAR 0 7
18686: PPUSH
18687: LD_VAR 0 8
18691: PPUSH
18692: LD_VAR 0 9
18696: PPUSH
18697: LD_VAR 0 4
18701: PPUSH
18702: LD_VAR 0 5
18706: PPUSH
18707: CALL 18749 0 6
18711: GO 18744
18713: LD_INT 304
18715: DOUBLE
18716: EQUAL
18717: IFTRUE 18721
18719: GO 18743
18721: POP
// hHackTeleport ( unit , x , y ) ; end ;
18722: LD_VAR 0 2
18726: PPUSH
18727: LD_VAR 0 4
18731: PPUSH
18732: LD_VAR 0 5
18736: PPUSH
18737: CALL 20508 0 3
18741: GO 18744
18743: POP
// end ;
18744: LD_VAR 0 12
18748: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18749: LD_INT 0
18751: PPUSH
18752: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18753: LD_VAR 0 1
18757: PUSH
18758: LD_INT 1
18760: LESS
18761: PUSH
18762: LD_VAR 0 1
18766: PUSH
18767: LD_INT 3
18769: GREATER
18770: OR
18771: PUSH
18772: LD_VAR 0 5
18776: PPUSH
18777: LD_VAR 0 6
18781: PPUSH
18782: CALL_OW 428
18786: OR
18787: IFFALSE 18791
// exit ;
18789: GO 19511
// uc_side := your_side ;
18791: LD_ADDR_OWVAR 20
18795: PUSH
18796: LD_OWVAR 2
18800: ST_TO_ADDR
// uc_nation := nation ;
18801: LD_ADDR_OWVAR 21
18805: PUSH
18806: LD_VAR 0 1
18810: ST_TO_ADDR
// bc_level = 1 ;
18811: LD_ADDR_OWVAR 43
18815: PUSH
18816: LD_INT 1
18818: ST_TO_ADDR
// case btype of 1 :
18819: LD_VAR 0 2
18823: PUSH
18824: LD_INT 1
18826: DOUBLE
18827: EQUAL
18828: IFTRUE 18832
18830: GO 18843
18832: POP
// bc_type := b_depot ; 2 :
18833: LD_ADDR_OWVAR 42
18837: PUSH
18838: LD_INT 0
18840: ST_TO_ADDR
18841: GO 19455
18843: LD_INT 2
18845: DOUBLE
18846: EQUAL
18847: IFTRUE 18851
18849: GO 18862
18851: POP
// bc_type := b_warehouse ; 3 :
18852: LD_ADDR_OWVAR 42
18856: PUSH
18857: LD_INT 1
18859: ST_TO_ADDR
18860: GO 19455
18862: LD_INT 3
18864: DOUBLE
18865: EQUAL
18866: IFTRUE 18870
18868: GO 18881
18870: POP
// bc_type := b_lab ; 4 .. 9 :
18871: LD_ADDR_OWVAR 42
18875: PUSH
18876: LD_INT 6
18878: ST_TO_ADDR
18879: GO 19455
18881: LD_INT 4
18883: DOUBLE
18884: GREATEREQUAL
18885: IFFALSE 18893
18887: LD_INT 9
18889: DOUBLE
18890: LESSEQUAL
18891: IFTRUE 18895
18893: GO 18947
18895: POP
// begin bc_type := b_lab_half ;
18896: LD_ADDR_OWVAR 42
18900: PUSH
18901: LD_INT 7
18903: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18904: LD_ADDR_OWVAR 44
18908: PUSH
18909: LD_INT 10
18911: PUSH
18912: LD_INT 11
18914: PUSH
18915: LD_INT 12
18917: PUSH
18918: LD_INT 15
18920: PUSH
18921: LD_INT 14
18923: PUSH
18924: LD_INT 13
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: PUSH
18935: LD_VAR 0 2
18939: PUSH
18940: LD_INT 3
18942: MINUS
18943: ARRAY
18944: ST_TO_ADDR
// end ; 10 .. 13 :
18945: GO 19455
18947: LD_INT 10
18949: DOUBLE
18950: GREATEREQUAL
18951: IFFALSE 18959
18953: LD_INT 13
18955: DOUBLE
18956: LESSEQUAL
18957: IFTRUE 18961
18959: GO 19038
18961: POP
// begin bc_type := b_lab_full ;
18962: LD_ADDR_OWVAR 42
18966: PUSH
18967: LD_INT 8
18969: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18970: LD_ADDR_OWVAR 44
18974: PUSH
18975: LD_INT 10
18977: PUSH
18978: LD_INT 12
18980: PUSH
18981: LD_INT 14
18983: PUSH
18984: LD_INT 13
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: PUSH
18993: LD_VAR 0 2
18997: PUSH
18998: LD_INT 9
19000: MINUS
19001: ARRAY
19002: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19003: LD_ADDR_OWVAR 45
19007: PUSH
19008: LD_INT 11
19010: PUSH
19011: LD_INT 15
19013: PUSH
19014: LD_INT 12
19016: PUSH
19017: LD_INT 15
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: PUSH
19026: LD_VAR 0 2
19030: PUSH
19031: LD_INT 9
19033: MINUS
19034: ARRAY
19035: ST_TO_ADDR
// end ; 14 :
19036: GO 19455
19038: LD_INT 14
19040: DOUBLE
19041: EQUAL
19042: IFTRUE 19046
19044: GO 19057
19046: POP
// bc_type := b_workshop ; 15 :
19047: LD_ADDR_OWVAR 42
19051: PUSH
19052: LD_INT 2
19054: ST_TO_ADDR
19055: GO 19455
19057: LD_INT 15
19059: DOUBLE
19060: EQUAL
19061: IFTRUE 19065
19063: GO 19076
19065: POP
// bc_type := b_factory ; 16 :
19066: LD_ADDR_OWVAR 42
19070: PUSH
19071: LD_INT 3
19073: ST_TO_ADDR
19074: GO 19455
19076: LD_INT 16
19078: DOUBLE
19079: EQUAL
19080: IFTRUE 19084
19082: GO 19095
19084: POP
// bc_type := b_ext_gun ; 17 :
19085: LD_ADDR_OWVAR 42
19089: PUSH
19090: LD_INT 17
19092: ST_TO_ADDR
19093: GO 19455
19095: LD_INT 17
19097: DOUBLE
19098: EQUAL
19099: IFTRUE 19103
19101: GO 19131
19103: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19104: LD_ADDR_OWVAR 42
19108: PUSH
19109: LD_INT 19
19111: PUSH
19112: LD_INT 23
19114: PUSH
19115: LD_INT 19
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: PUSH
19123: LD_VAR 0 1
19127: ARRAY
19128: ST_TO_ADDR
19129: GO 19455
19131: LD_INT 18
19133: DOUBLE
19134: EQUAL
19135: IFTRUE 19139
19137: GO 19150
19139: POP
// bc_type := b_ext_radar ; 19 :
19140: LD_ADDR_OWVAR 42
19144: PUSH
19145: LD_INT 20
19147: ST_TO_ADDR
19148: GO 19455
19150: LD_INT 19
19152: DOUBLE
19153: EQUAL
19154: IFTRUE 19158
19156: GO 19169
19158: POP
// bc_type := b_ext_radio ; 20 :
19159: LD_ADDR_OWVAR 42
19163: PUSH
19164: LD_INT 22
19166: ST_TO_ADDR
19167: GO 19455
19169: LD_INT 20
19171: DOUBLE
19172: EQUAL
19173: IFTRUE 19177
19175: GO 19188
19177: POP
// bc_type := b_ext_siberium ; 21 :
19178: LD_ADDR_OWVAR 42
19182: PUSH
19183: LD_INT 21
19185: ST_TO_ADDR
19186: GO 19455
19188: LD_INT 21
19190: DOUBLE
19191: EQUAL
19192: IFTRUE 19196
19194: GO 19207
19196: POP
// bc_type := b_ext_computer ; 22 :
19197: LD_ADDR_OWVAR 42
19201: PUSH
19202: LD_INT 24
19204: ST_TO_ADDR
19205: GO 19455
19207: LD_INT 22
19209: DOUBLE
19210: EQUAL
19211: IFTRUE 19215
19213: GO 19226
19215: POP
// bc_type := b_ext_track ; 23 :
19216: LD_ADDR_OWVAR 42
19220: PUSH
19221: LD_INT 16
19223: ST_TO_ADDR
19224: GO 19455
19226: LD_INT 23
19228: DOUBLE
19229: EQUAL
19230: IFTRUE 19234
19232: GO 19245
19234: POP
// bc_type := b_ext_laser ; 24 :
19235: LD_ADDR_OWVAR 42
19239: PUSH
19240: LD_INT 25
19242: ST_TO_ADDR
19243: GO 19455
19245: LD_INT 24
19247: DOUBLE
19248: EQUAL
19249: IFTRUE 19253
19251: GO 19264
19253: POP
// bc_type := b_control_tower ; 25 :
19254: LD_ADDR_OWVAR 42
19258: PUSH
19259: LD_INT 36
19261: ST_TO_ADDR
19262: GO 19455
19264: LD_INT 25
19266: DOUBLE
19267: EQUAL
19268: IFTRUE 19272
19270: GO 19283
19272: POP
// bc_type := b_breastwork ; 26 :
19273: LD_ADDR_OWVAR 42
19277: PUSH
19278: LD_INT 31
19280: ST_TO_ADDR
19281: GO 19455
19283: LD_INT 26
19285: DOUBLE
19286: EQUAL
19287: IFTRUE 19291
19289: GO 19302
19291: POP
// bc_type := b_bunker ; 27 :
19292: LD_ADDR_OWVAR 42
19296: PUSH
19297: LD_INT 32
19299: ST_TO_ADDR
19300: GO 19455
19302: LD_INT 27
19304: DOUBLE
19305: EQUAL
19306: IFTRUE 19310
19308: GO 19321
19310: POP
// bc_type := b_turret ; 28 :
19311: LD_ADDR_OWVAR 42
19315: PUSH
19316: LD_INT 33
19318: ST_TO_ADDR
19319: GO 19455
19321: LD_INT 28
19323: DOUBLE
19324: EQUAL
19325: IFTRUE 19329
19327: GO 19340
19329: POP
// bc_type := b_armoury ; 29 :
19330: LD_ADDR_OWVAR 42
19334: PUSH
19335: LD_INT 4
19337: ST_TO_ADDR
19338: GO 19455
19340: LD_INT 29
19342: DOUBLE
19343: EQUAL
19344: IFTRUE 19348
19346: GO 19359
19348: POP
// bc_type := b_barracks ; 30 :
19349: LD_ADDR_OWVAR 42
19353: PUSH
19354: LD_INT 5
19356: ST_TO_ADDR
19357: GO 19455
19359: LD_INT 30
19361: DOUBLE
19362: EQUAL
19363: IFTRUE 19367
19365: GO 19378
19367: POP
// bc_type := b_solar_power ; 31 :
19368: LD_ADDR_OWVAR 42
19372: PUSH
19373: LD_INT 27
19375: ST_TO_ADDR
19376: GO 19455
19378: LD_INT 31
19380: DOUBLE
19381: EQUAL
19382: IFTRUE 19386
19384: GO 19397
19386: POP
// bc_type := b_oil_power ; 32 :
19387: LD_ADDR_OWVAR 42
19391: PUSH
19392: LD_INT 26
19394: ST_TO_ADDR
19395: GO 19455
19397: LD_INT 32
19399: DOUBLE
19400: EQUAL
19401: IFTRUE 19405
19403: GO 19416
19405: POP
// bc_type := b_siberite_power ; 33 :
19406: LD_ADDR_OWVAR 42
19410: PUSH
19411: LD_INT 28
19413: ST_TO_ADDR
19414: GO 19455
19416: LD_INT 33
19418: DOUBLE
19419: EQUAL
19420: IFTRUE 19424
19422: GO 19435
19424: POP
// bc_type := b_oil_mine ; 34 :
19425: LD_ADDR_OWVAR 42
19429: PUSH
19430: LD_INT 29
19432: ST_TO_ADDR
19433: GO 19455
19435: LD_INT 34
19437: DOUBLE
19438: EQUAL
19439: IFTRUE 19443
19441: GO 19454
19443: POP
// bc_type := b_siberite_mine ; end ;
19444: LD_ADDR_OWVAR 42
19448: PUSH
19449: LD_INT 30
19451: ST_TO_ADDR
19452: GO 19455
19454: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19455: LD_ADDR_VAR 0 8
19459: PUSH
19460: LD_VAR 0 5
19464: PPUSH
19465: LD_VAR 0 6
19469: PPUSH
19470: LD_VAR 0 3
19474: PPUSH
19475: CALL_OW 47
19479: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19480: LD_OWVAR 42
19484: PUSH
19485: LD_INT 32
19487: PUSH
19488: LD_INT 33
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: IN
19495: IFFALSE 19511
// PlaceWeaponTurret ( b , weapon ) ;
19497: LD_VAR 0 8
19501: PPUSH
19502: LD_VAR 0 4
19506: PPUSH
19507: CALL_OW 431
// end ;
19511: LD_VAR 0 7
19515: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19516: LD_INT 0
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19522: LD_ADDR_VAR 0 4
19526: PUSH
19527: LD_INT 22
19529: PUSH
19530: LD_OWVAR 2
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: LD_INT 2
19541: PUSH
19542: LD_INT 30
19544: PUSH
19545: LD_INT 0
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 30
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PPUSH
19571: CALL_OW 69
19575: ST_TO_ADDR
// if not tmp then
19576: LD_VAR 0 4
19580: NOT
19581: IFFALSE 19585
// exit ;
19583: GO 19644
// for i in tmp do
19585: LD_ADDR_VAR 0 2
19589: PUSH
19590: LD_VAR 0 4
19594: PUSH
19595: FOR_IN
19596: IFFALSE 19642
// for j = 1 to 3 do
19598: LD_ADDR_VAR 0 3
19602: PUSH
19603: DOUBLE
19604: LD_INT 1
19606: DEC
19607: ST_TO_ADDR
19608: LD_INT 3
19610: PUSH
19611: FOR_TO
19612: IFFALSE 19638
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19614: LD_VAR 0 2
19618: PPUSH
19619: CALL_OW 274
19623: PPUSH
19624: LD_VAR 0 3
19628: PPUSH
19629: LD_INT 99999
19631: PPUSH
19632: CALL_OW 277
19636: GO 19611
19638: POP
19639: POP
19640: GO 19595
19642: POP
19643: POP
// end ;
19644: LD_VAR 0 1
19648: RET
// export function hHackSetLevel10 ; var i , j ; begin
19649: LD_INT 0
19651: PPUSH
19652: PPUSH
19653: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19654: LD_ADDR_VAR 0 2
19658: PUSH
19659: LD_INT 21
19661: PUSH
19662: LD_INT 1
19664: PUSH
19665: EMPTY
19666: LIST
19667: LIST
19668: PPUSH
19669: CALL_OW 69
19673: PUSH
19674: FOR_IN
19675: IFFALSE 19727
// if IsSelected ( i ) then
19677: LD_VAR 0 2
19681: PPUSH
19682: CALL_OW 306
19686: IFFALSE 19725
// begin for j := 1 to 4 do
19688: LD_ADDR_VAR 0 3
19692: PUSH
19693: DOUBLE
19694: LD_INT 1
19696: DEC
19697: ST_TO_ADDR
19698: LD_INT 4
19700: PUSH
19701: FOR_TO
19702: IFFALSE 19723
// SetSkill ( i , j , 10 ) ;
19704: LD_VAR 0 2
19708: PPUSH
19709: LD_VAR 0 3
19713: PPUSH
19714: LD_INT 10
19716: PPUSH
19717: CALL_OW 237
19721: GO 19701
19723: POP
19724: POP
// end ;
19725: GO 19674
19727: POP
19728: POP
// end ;
19729: LD_VAR 0 1
19733: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19734: LD_INT 0
19736: PPUSH
19737: PPUSH
19738: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19739: LD_ADDR_VAR 0 2
19743: PUSH
19744: LD_INT 22
19746: PUSH
19747: LD_OWVAR 2
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 21
19758: PUSH
19759: LD_INT 1
19761: PUSH
19762: EMPTY
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: PUSH
19775: FOR_IN
19776: IFFALSE 19817
// begin for j := 1 to 4 do
19778: LD_ADDR_VAR 0 3
19782: PUSH
19783: DOUBLE
19784: LD_INT 1
19786: DEC
19787: ST_TO_ADDR
19788: LD_INT 4
19790: PUSH
19791: FOR_TO
19792: IFFALSE 19813
// SetSkill ( i , j , 10 ) ;
19794: LD_VAR 0 2
19798: PPUSH
19799: LD_VAR 0 3
19803: PPUSH
19804: LD_INT 10
19806: PPUSH
19807: CALL_OW 237
19811: GO 19791
19813: POP
19814: POP
// end ;
19815: GO 19775
19817: POP
19818: POP
// end ;
19819: LD_VAR 0 1
19823: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19824: LD_INT 0
19826: PPUSH
// uc_side := your_side ;
19827: LD_ADDR_OWVAR 20
19831: PUSH
19832: LD_OWVAR 2
19836: ST_TO_ADDR
// uc_nation := nation ;
19837: LD_ADDR_OWVAR 21
19841: PUSH
19842: LD_VAR 0 1
19846: ST_TO_ADDR
// InitHc ;
19847: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19851: LD_INT 0
19853: PPUSH
19854: LD_VAR 0 2
19858: PPUSH
19859: LD_VAR 0 3
19863: PPUSH
19864: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19868: LD_VAR 0 4
19872: PPUSH
19873: LD_VAR 0 5
19877: PPUSH
19878: CALL_OW 428
19882: PUSH
19883: LD_INT 0
19885: EQUAL
19886: IFFALSE 19910
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19888: CALL_OW 44
19892: PPUSH
19893: LD_VAR 0 4
19897: PPUSH
19898: LD_VAR 0 5
19902: PPUSH
19903: LD_INT 1
19905: PPUSH
19906: CALL_OW 48
// end ;
19910: LD_VAR 0 6
19914: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19915: LD_INT 0
19917: PPUSH
19918: PPUSH
// uc_side := your_side ;
19919: LD_ADDR_OWVAR 20
19923: PUSH
19924: LD_OWVAR 2
19928: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19929: LD_VAR 0 1
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: LD_INT 2
19939: PUSH
19940: LD_INT 3
19942: PUSH
19943: LD_INT 4
19945: PUSH
19946: LD_INT 5
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: IN
19956: IFFALSE 19968
// uc_nation := nation_american else
19958: LD_ADDR_OWVAR 21
19962: PUSH
19963: LD_INT 1
19965: ST_TO_ADDR
19966: GO 20011
// if chassis in [ 11 , 12 , 13 , 14 ] then
19968: LD_VAR 0 1
19972: PUSH
19973: LD_INT 11
19975: PUSH
19976: LD_INT 12
19978: PUSH
19979: LD_INT 13
19981: PUSH
19982: LD_INT 14
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: LIST
19989: LIST
19990: IN
19991: IFFALSE 20003
// uc_nation := nation_arabian else
19993: LD_ADDR_OWVAR 21
19997: PUSH
19998: LD_INT 2
20000: ST_TO_ADDR
20001: GO 20011
// uc_nation := nation_russian ;
20003: LD_ADDR_OWVAR 21
20007: PUSH
20008: LD_INT 3
20010: ST_TO_ADDR
// vc_chassis := chassis ;
20011: LD_ADDR_OWVAR 37
20015: PUSH
20016: LD_VAR 0 1
20020: ST_TO_ADDR
// vc_engine := engine ;
20021: LD_ADDR_OWVAR 39
20025: PUSH
20026: LD_VAR 0 2
20030: ST_TO_ADDR
// vc_control := control ;
20031: LD_ADDR_OWVAR 38
20035: PUSH
20036: LD_VAR 0 3
20040: ST_TO_ADDR
// vc_weapon := weapon ;
20041: LD_ADDR_OWVAR 40
20045: PUSH
20046: LD_VAR 0 4
20050: ST_TO_ADDR
// un := CreateVehicle ;
20051: LD_ADDR_VAR 0 8
20055: PUSH
20056: CALL_OW 45
20060: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20061: LD_VAR 0 8
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: LD_INT 5
20071: PPUSH
20072: CALL_OW 12
20076: PPUSH
20077: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20081: LD_VAR 0 8
20085: PPUSH
20086: LD_VAR 0 5
20090: PPUSH
20091: LD_VAR 0 6
20095: PPUSH
20096: LD_INT 1
20098: PPUSH
20099: CALL_OW 48
// end ;
20103: LD_VAR 0 7
20107: RET
// export hInvincible ; every 1 do
20108: GO 20110
20110: DISABLE
// hInvincible := [ ] ;
20111: LD_ADDR_EXP 97
20115: PUSH
20116: EMPTY
20117: ST_TO_ADDR
20118: END
// every 10 do var i ;
20119: GO 20121
20121: DISABLE
20122: LD_INT 0
20124: PPUSH
// begin enable ;
20125: ENABLE
// if not hInvincible then
20126: LD_EXP 97
20130: NOT
20131: IFFALSE 20135
// exit ;
20133: GO 20179
// for i in hInvincible do
20135: LD_ADDR_VAR 0 1
20139: PUSH
20140: LD_EXP 97
20144: PUSH
20145: FOR_IN
20146: IFFALSE 20177
// if GetLives ( i ) < 1000 then
20148: LD_VAR 0 1
20152: PPUSH
20153: CALL_OW 256
20157: PUSH
20158: LD_INT 1000
20160: LESS
20161: IFFALSE 20175
// SetLives ( i , 1000 ) ;
20163: LD_VAR 0 1
20167: PPUSH
20168: LD_INT 1000
20170: PPUSH
20171: CALL_OW 234
20175: GO 20145
20177: POP
20178: POP
// end ;
20179: PPOPN 1
20181: END
// export function hHackInvincible ; var i ; begin
20182: LD_INT 0
20184: PPUSH
20185: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20186: LD_ADDR_VAR 0 2
20190: PUSH
20191: LD_INT 2
20193: PUSH
20194: LD_INT 21
20196: PUSH
20197: LD_INT 1
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 21
20206: PUSH
20207: LD_INT 2
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: LIST
20218: PPUSH
20219: CALL_OW 69
20223: PUSH
20224: FOR_IN
20225: IFFALSE 20286
// if IsSelected ( i ) then
20227: LD_VAR 0 2
20231: PPUSH
20232: CALL_OW 306
20236: IFFALSE 20284
// begin if i in hInvincible then
20238: LD_VAR 0 2
20242: PUSH
20243: LD_EXP 97
20247: IN
20248: IFFALSE 20268
// hInvincible := hInvincible diff i else
20250: LD_ADDR_EXP 97
20254: PUSH
20255: LD_EXP 97
20259: PUSH
20260: LD_VAR 0 2
20264: DIFF
20265: ST_TO_ADDR
20266: GO 20284
// hInvincible := hInvincible union i ;
20268: LD_ADDR_EXP 97
20272: PUSH
20273: LD_EXP 97
20277: PUSH
20278: LD_VAR 0 2
20282: UNION
20283: ST_TO_ADDR
// end ;
20284: GO 20224
20286: POP
20287: POP
// end ;
20288: LD_VAR 0 1
20292: RET
// export function hHackInvisible ; var i , j ; begin
20293: LD_INT 0
20295: PPUSH
20296: PPUSH
20297: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20298: LD_ADDR_VAR 0 2
20302: PUSH
20303: LD_INT 21
20305: PUSH
20306: LD_INT 1
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PUSH
20318: FOR_IN
20319: IFFALSE 20343
// if IsSelected ( i ) then
20321: LD_VAR 0 2
20325: PPUSH
20326: CALL_OW 306
20330: IFFALSE 20341
// ComForceInvisible ( i ) ;
20332: LD_VAR 0 2
20336: PPUSH
20337: CALL_OW 496
20341: GO 20318
20343: POP
20344: POP
// end ;
20345: LD_VAR 0 1
20349: RET
// export function hHackChangeYourSide ; begin
20350: LD_INT 0
20352: PPUSH
// if your_side = 8 then
20353: LD_OWVAR 2
20357: PUSH
20358: LD_INT 8
20360: EQUAL
20361: IFFALSE 20373
// your_side := 0 else
20363: LD_ADDR_OWVAR 2
20367: PUSH
20368: LD_INT 0
20370: ST_TO_ADDR
20371: GO 20387
// your_side := your_side + 1 ;
20373: LD_ADDR_OWVAR 2
20377: PUSH
20378: LD_OWVAR 2
20382: PUSH
20383: LD_INT 1
20385: PLUS
20386: ST_TO_ADDR
// end ;
20387: LD_VAR 0 1
20391: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20392: LD_INT 0
20394: PPUSH
20395: PPUSH
20396: PPUSH
// for i in all_units do
20397: LD_ADDR_VAR 0 2
20401: PUSH
20402: LD_OWVAR 3
20406: PUSH
20407: FOR_IN
20408: IFFALSE 20486
// if IsSelected ( i ) then
20410: LD_VAR 0 2
20414: PPUSH
20415: CALL_OW 306
20419: IFFALSE 20484
// begin j := GetSide ( i ) ;
20421: LD_ADDR_VAR 0 3
20425: PUSH
20426: LD_VAR 0 2
20430: PPUSH
20431: CALL_OW 255
20435: ST_TO_ADDR
// if j = 8 then
20436: LD_VAR 0 3
20440: PUSH
20441: LD_INT 8
20443: EQUAL
20444: IFFALSE 20456
// j := 0 else
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
20454: GO 20470
// j := j + 1 ;
20456: LD_ADDR_VAR 0 3
20460: PUSH
20461: LD_VAR 0 3
20465: PUSH
20466: LD_INT 1
20468: PLUS
20469: ST_TO_ADDR
// SetSide ( i , j ) ;
20470: LD_VAR 0 2
20474: PPUSH
20475: LD_VAR 0 3
20479: PPUSH
20480: CALL_OW 235
// end ;
20484: GO 20407
20486: POP
20487: POP
// end ;
20488: LD_VAR 0 1
20492: RET
// export function hHackFog ; begin
20493: LD_INT 0
20495: PPUSH
// FogOff ( true ) ;
20496: LD_INT 1
20498: PPUSH
20499: CALL_OW 344
// end ;
20503: LD_VAR 0 1
20507: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20508: LD_INT 0
20510: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20511: LD_VAR 0 1
20515: PPUSH
20516: LD_VAR 0 2
20520: PPUSH
20521: LD_VAR 0 3
20525: PPUSH
20526: LD_INT 1
20528: PPUSH
20529: LD_INT 1
20531: PPUSH
20532: CALL_OW 483
// CenterOnXY ( x , y ) ;
20536: LD_VAR 0 2
20540: PPUSH
20541: LD_VAR 0 3
20545: PPUSH
20546: CALL_OW 84
// end ; end_of_file
20550: LD_VAR 0 4
20554: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
20555: LD_INT 0
20557: PPUSH
20558: PPUSH
20559: PPUSH
20560: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
20561: LD_VAR 0 1
20565: PPUSH
20566: CALL_OW 264
20570: PUSH
20571: LD_EXP 28
20575: EQUAL
20576: IFFALSE 20648
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
20578: LD_INT 68
20580: PPUSH
20581: LD_VAR 0 1
20585: PPUSH
20586: CALL_OW 255
20590: PPUSH
20591: CALL_OW 321
20595: PUSH
20596: LD_INT 2
20598: EQUAL
20599: IFFALSE 20611
// eff := 70 else
20601: LD_ADDR_VAR 0 4
20605: PUSH
20606: LD_INT 70
20608: ST_TO_ADDR
20609: GO 20619
// eff := 30 ;
20611: LD_ADDR_VAR 0 4
20615: PUSH
20616: LD_INT 30
20618: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 250
20628: PPUSH
20629: LD_VAR 0 1
20633: PPUSH
20634: CALL_OW 251
20638: PPUSH
20639: LD_VAR 0 4
20643: PPUSH
20644: CALL_OW 495
// end ; end ;
20648: LD_VAR 0 2
20652: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20653: LD_INT 0
20655: PPUSH
// end ;
20656: LD_VAR 0 4
20660: RET
// export function SOS_Command ( cmd ) ; begin
20661: LD_INT 0
20663: PPUSH
// end ;
20664: LD_VAR 0 2
20668: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20669: LD_INT 0
20671: PPUSH
// if cmd = 121 then
20672: LD_VAR 0 1
20676: PUSH
20677: LD_INT 121
20679: EQUAL
20680: IFFALSE 20682
// end ;
20682: LD_VAR 0 6
20686: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20687: LD_INT 0
20689: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20690: LD_VAR 0 1
20694: PUSH
20695: LD_INT 250
20697: EQUAL
20698: PUSH
20699: LD_VAR 0 2
20703: PPUSH
20704: CALL_OW 264
20708: PUSH
20709: LD_EXP 31
20713: EQUAL
20714: AND
20715: IFFALSE 20736
// MinerPlaceMine ( unit , x , y ) ;
20717: LD_VAR 0 2
20721: PPUSH
20722: LD_VAR 0 4
20726: PPUSH
20727: LD_VAR 0 5
20731: PPUSH
20732: CALL 23085 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20736: LD_VAR 0 1
20740: PUSH
20741: LD_INT 251
20743: EQUAL
20744: PUSH
20745: LD_VAR 0 2
20749: PPUSH
20750: CALL_OW 264
20754: PUSH
20755: LD_EXP 31
20759: EQUAL
20760: AND
20761: IFFALSE 20782
// MinerDetonateMine ( unit , x , y ) ;
20763: LD_VAR 0 2
20767: PPUSH
20768: LD_VAR 0 4
20772: PPUSH
20773: LD_VAR 0 5
20777: PPUSH
20778: CALL 23362 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20782: LD_VAR 0 1
20786: PUSH
20787: LD_INT 252
20789: EQUAL
20790: PUSH
20791: LD_VAR 0 2
20795: PPUSH
20796: CALL_OW 264
20800: PUSH
20801: LD_EXP 31
20805: EQUAL
20806: AND
20807: IFFALSE 20828
// MinerCreateMinefield ( unit , x , y ) ;
20809: LD_VAR 0 2
20813: PPUSH
20814: LD_VAR 0 4
20818: PPUSH
20819: LD_VAR 0 5
20823: PPUSH
20824: CALL 23779 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20828: LD_VAR 0 1
20832: PUSH
20833: LD_INT 253
20835: EQUAL
20836: PUSH
20837: LD_VAR 0 2
20841: PPUSH
20842: CALL_OW 257
20846: PUSH
20847: LD_INT 5
20849: EQUAL
20850: AND
20851: IFFALSE 20872
// ComBinocular ( unit , x , y ) ;
20853: LD_VAR 0 2
20857: PPUSH
20858: LD_VAR 0 4
20862: PPUSH
20863: LD_VAR 0 5
20867: PPUSH
20868: CALL 24150 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20872: LD_VAR 0 1
20876: PUSH
20877: LD_INT 254
20879: EQUAL
20880: PUSH
20881: LD_VAR 0 2
20885: PPUSH
20886: CALL_OW 264
20890: PUSH
20891: LD_EXP 26
20895: EQUAL
20896: AND
20897: PUSH
20898: LD_VAR 0 3
20902: PPUSH
20903: CALL_OW 263
20907: PUSH
20908: LD_INT 3
20910: EQUAL
20911: AND
20912: IFFALSE 20928
// HackDestroyVehicle ( unit , selectedUnit ) ;
20914: LD_VAR 0 2
20918: PPUSH
20919: LD_VAR 0 3
20923: PPUSH
20924: CALL 22445 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20928: LD_VAR 0 1
20932: PUSH
20933: LD_INT 255
20935: EQUAL
20936: PUSH
20937: LD_VAR 0 2
20941: PPUSH
20942: CALL_OW 264
20946: PUSH
20947: LD_INT 14
20949: PUSH
20950: LD_INT 53
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: IN
20957: AND
20958: PUSH
20959: LD_VAR 0 4
20963: PPUSH
20964: LD_VAR 0 5
20968: PPUSH
20969: CALL_OW 488
20973: AND
20974: IFFALSE 20998
// CutTreeXYR ( unit , x , y , 12 ) ;
20976: LD_VAR 0 2
20980: PPUSH
20981: LD_VAR 0 4
20985: PPUSH
20986: LD_VAR 0 5
20990: PPUSH
20991: LD_INT 12
20993: PPUSH
20994: CALL 21011 0 4
// end ;
20998: LD_VAR 0 6
21002: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
21003: LD_INT 0
21005: PPUSH
// end ;
21006: LD_VAR 0 4
21010: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21011: LD_INT 0
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
21019: PPUSH
21020: PPUSH
21021: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21022: LD_VAR 0 1
21026: NOT
21027: PUSH
21028: LD_VAR 0 2
21032: PPUSH
21033: LD_VAR 0 3
21037: PPUSH
21038: CALL_OW 488
21042: NOT
21043: OR
21044: PUSH
21045: LD_VAR 0 4
21049: NOT
21050: OR
21051: IFFALSE 21055
// exit ;
21053: GO 21395
// list := [ ] ;
21055: LD_ADDR_VAR 0 13
21059: PUSH
21060: EMPTY
21061: ST_TO_ADDR
// if x - r < 0 then
21062: LD_VAR 0 2
21066: PUSH
21067: LD_VAR 0 4
21071: MINUS
21072: PUSH
21073: LD_INT 0
21075: LESS
21076: IFFALSE 21088
// min_x := 0 else
21078: LD_ADDR_VAR 0 7
21082: PUSH
21083: LD_INT 0
21085: ST_TO_ADDR
21086: GO 21104
// min_x := x - r ;
21088: LD_ADDR_VAR 0 7
21092: PUSH
21093: LD_VAR 0 2
21097: PUSH
21098: LD_VAR 0 4
21102: MINUS
21103: ST_TO_ADDR
// if y - r < 0 then
21104: LD_VAR 0 3
21108: PUSH
21109: LD_VAR 0 4
21113: MINUS
21114: PUSH
21115: LD_INT 0
21117: LESS
21118: IFFALSE 21130
// min_y := 0 else
21120: LD_ADDR_VAR 0 8
21124: PUSH
21125: LD_INT 0
21127: ST_TO_ADDR
21128: GO 21146
// min_y := y - r ;
21130: LD_ADDR_VAR 0 8
21134: PUSH
21135: LD_VAR 0 3
21139: PUSH
21140: LD_VAR 0 4
21144: MINUS
21145: ST_TO_ADDR
// max_x := x + r ;
21146: LD_ADDR_VAR 0 9
21150: PUSH
21151: LD_VAR 0 2
21155: PUSH
21156: LD_VAR 0 4
21160: PLUS
21161: ST_TO_ADDR
// max_y := y + r ;
21162: LD_ADDR_VAR 0 10
21166: PUSH
21167: LD_VAR 0 3
21171: PUSH
21172: LD_VAR 0 4
21176: PLUS
21177: ST_TO_ADDR
// for _x = min_x to max_x do
21178: LD_ADDR_VAR 0 11
21182: PUSH
21183: DOUBLE
21184: LD_VAR 0 7
21188: DEC
21189: ST_TO_ADDR
21190: LD_VAR 0 9
21194: PUSH
21195: FOR_TO
21196: IFFALSE 21313
// for _y = min_y to max_y do
21198: LD_ADDR_VAR 0 12
21202: PUSH
21203: DOUBLE
21204: LD_VAR 0 8
21208: DEC
21209: ST_TO_ADDR
21210: LD_VAR 0 10
21214: PUSH
21215: FOR_TO
21216: IFFALSE 21309
// begin if not ValidHex ( _x , _y ) then
21218: LD_VAR 0 11
21222: PPUSH
21223: LD_VAR 0 12
21227: PPUSH
21228: CALL_OW 488
21232: NOT
21233: IFFALSE 21237
// continue ;
21235: GO 21215
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21237: LD_VAR 0 11
21241: PPUSH
21242: LD_VAR 0 12
21246: PPUSH
21247: CALL_OW 351
21251: PUSH
21252: LD_VAR 0 11
21256: PPUSH
21257: LD_VAR 0 12
21261: PPUSH
21262: CALL_OW 554
21266: AND
21267: IFFALSE 21307
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21269: LD_ADDR_VAR 0 13
21273: PUSH
21274: LD_VAR 0 13
21278: PPUSH
21279: LD_VAR 0 13
21283: PUSH
21284: LD_INT 1
21286: PLUS
21287: PPUSH
21288: LD_VAR 0 11
21292: PUSH
21293: LD_VAR 0 12
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PPUSH
21302: CALL_OW 2
21306: ST_TO_ADDR
// end ;
21307: GO 21215
21309: POP
21310: POP
21311: GO 21195
21313: POP
21314: POP
// if not list then
21315: LD_VAR 0 13
21319: NOT
21320: IFFALSE 21324
// exit ;
21322: GO 21395
// for i in list do
21324: LD_ADDR_VAR 0 6
21328: PUSH
21329: LD_VAR 0 13
21333: PUSH
21334: FOR_IN
21335: IFFALSE 21393
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21337: LD_VAR 0 1
21341: PPUSH
21342: LD_STRING M
21344: PUSH
21345: LD_VAR 0 6
21349: PUSH
21350: LD_INT 1
21352: ARRAY
21353: PUSH
21354: LD_VAR 0 6
21358: PUSH
21359: LD_INT 2
21361: ARRAY
21362: PUSH
21363: LD_INT 0
21365: PUSH
21366: LD_INT 0
21368: PUSH
21369: LD_INT 0
21371: PUSH
21372: LD_INT 0
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: PUSH
21384: EMPTY
21385: LIST
21386: PPUSH
21387: CALL_OW 447
21391: GO 21334
21393: POP
21394: POP
// end ;
21395: LD_VAR 0 5
21399: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21400: LD_EXP 100
21404: NOT
21405: IFFALSE 21455
21407: GO 21409
21409: DISABLE
// begin initHack := true ;
21410: LD_ADDR_EXP 100
21414: PUSH
21415: LD_INT 1
21417: ST_TO_ADDR
// hackTanks := [ ] ;
21418: LD_ADDR_EXP 101
21422: PUSH
21423: EMPTY
21424: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21425: LD_ADDR_EXP 102
21429: PUSH
21430: EMPTY
21431: ST_TO_ADDR
// hackLimit := 3 ;
21432: LD_ADDR_EXP 103
21436: PUSH
21437: LD_INT 3
21439: ST_TO_ADDR
// hackDist := 12 ;
21440: LD_ADDR_EXP 104
21444: PUSH
21445: LD_INT 12
21447: ST_TO_ADDR
// hackCounter := [ ] ;
21448: LD_ADDR_EXP 105
21452: PUSH
21453: EMPTY
21454: ST_TO_ADDR
// end ;
21455: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21456: LD_EXP 100
21460: PUSH
21461: LD_INT 34
21463: PUSH
21464: LD_EXP 26
21468: PUSH
21469: EMPTY
21470: LIST
21471: LIST
21472: PPUSH
21473: CALL_OW 69
21477: AND
21478: IFFALSE 21733
21480: GO 21482
21482: DISABLE
21483: LD_INT 0
21485: PPUSH
21486: PPUSH
// begin enable ;
21487: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21488: LD_ADDR_VAR 0 1
21492: PUSH
21493: LD_INT 34
21495: PUSH
21496: LD_EXP 26
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PPUSH
21505: CALL_OW 69
21509: PUSH
21510: FOR_IN
21511: IFFALSE 21731
// begin if not i in hackTanks then
21513: LD_VAR 0 1
21517: PUSH
21518: LD_EXP 101
21522: IN
21523: NOT
21524: IFFALSE 21607
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21526: LD_ADDR_EXP 101
21530: PUSH
21531: LD_EXP 101
21535: PPUSH
21536: LD_EXP 101
21540: PUSH
21541: LD_INT 1
21543: PLUS
21544: PPUSH
21545: LD_VAR 0 1
21549: PPUSH
21550: CALL_OW 1
21554: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21555: LD_ADDR_EXP 102
21559: PUSH
21560: LD_EXP 102
21564: PPUSH
21565: LD_EXP 102
21569: PUSH
21570: LD_INT 1
21572: PLUS
21573: PPUSH
21574: EMPTY
21575: PPUSH
21576: CALL_OW 1
21580: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21581: LD_ADDR_EXP 105
21585: PUSH
21586: LD_EXP 105
21590: PPUSH
21591: LD_EXP 105
21595: PUSH
21596: LD_INT 1
21598: PLUS
21599: PPUSH
21600: EMPTY
21601: PPUSH
21602: CALL_OW 1
21606: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 302
21616: NOT
21617: IFFALSE 21630
// begin HackUnlinkAll ( i ) ;
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL 21736 0 1
// continue ;
21628: GO 21510
// end ; HackCheckCapturedStatus ( i ) ;
21630: LD_VAR 0 1
21634: PPUSH
21635: CALL 22179 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21639: LD_ADDR_VAR 0 2
21643: PUSH
21644: LD_INT 81
21646: PUSH
21647: LD_VAR 0 1
21651: PPUSH
21652: CALL_OW 255
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: LD_INT 33
21663: PUSH
21664: LD_INT 3
21666: PUSH
21667: EMPTY
21668: LIST
21669: LIST
21670: PUSH
21671: LD_INT 91
21673: PUSH
21674: LD_VAR 0 1
21678: PUSH
21679: LD_EXP 104
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 50
21691: PUSH
21692: EMPTY
21693: LIST
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: LIST
21699: LIST
21700: PPUSH
21701: CALL_OW 69
21705: ST_TO_ADDR
// if not tmp then
21706: LD_VAR 0 2
21710: NOT
21711: IFFALSE 21715
// continue ;
21713: GO 21510
// HackLink ( i , tmp ) ;
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_VAR 0 2
21724: PPUSH
21725: CALL 21872 0 2
// end ;
21729: GO 21510
21731: POP
21732: POP
// end ;
21733: PPOPN 2
21735: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
// if not hack in hackTanks then
21741: LD_VAR 0 1
21745: PUSH
21746: LD_EXP 101
21750: IN
21751: NOT
21752: IFFALSE 21756
// exit ;
21754: GO 21867
// index := GetElementIndex ( hackTanks , hack ) ;
21756: LD_ADDR_VAR 0 4
21760: PUSH
21761: LD_EXP 101
21765: PPUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL 29341 0 2
21775: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21776: LD_EXP 102
21780: PUSH
21781: LD_VAR 0 4
21785: ARRAY
21786: IFFALSE 21867
// begin for i in hackTanksCaptured [ index ] do
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_EXP 102
21797: PUSH
21798: LD_VAR 0 4
21802: ARRAY
21803: PUSH
21804: FOR_IN
21805: IFFALSE 21831
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21807: LD_VAR 0 3
21811: PUSH
21812: LD_INT 1
21814: ARRAY
21815: PPUSH
21816: LD_VAR 0 3
21820: PUSH
21821: LD_INT 2
21823: ARRAY
21824: PPUSH
21825: CALL_OW 235
21829: GO 21804
21831: POP
21832: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21833: LD_ADDR_EXP 102
21837: PUSH
21838: LD_EXP 102
21842: PPUSH
21843: LD_VAR 0 4
21847: PPUSH
21848: EMPTY
21849: PPUSH
21850: CALL_OW 1
21854: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21855: LD_VAR 0 1
21859: PPUSH
21860: LD_INT 0
21862: PPUSH
21863: CALL_OW 505
// end ; end ;
21867: LD_VAR 0 2
21871: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21872: LD_INT 0
21874: PPUSH
21875: PPUSH
21876: PPUSH
// if not hack in hackTanks or not vehicles then
21877: LD_VAR 0 1
21881: PUSH
21882: LD_EXP 101
21886: IN
21887: NOT
21888: PUSH
21889: LD_VAR 0 2
21893: NOT
21894: OR
21895: IFFALSE 21899
// exit ;
21897: GO 22174
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21899: LD_ADDR_VAR 0 2
21903: PUSH
21904: LD_VAR 0 1
21908: PPUSH
21909: LD_VAR 0 2
21913: PPUSH
21914: LD_INT 1
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL 29991 0 4
21924: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21925: LD_ADDR_VAR 0 5
21929: PUSH
21930: LD_EXP 101
21934: PPUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL 29341 0 2
21944: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21945: LD_EXP 102
21949: PUSH
21950: LD_VAR 0 5
21954: ARRAY
21955: PUSH
21956: LD_EXP 103
21960: LESS
21961: IFFALSE 22150
// begin for i := 1 to vehicles do
21963: LD_ADDR_VAR 0 4
21967: PUSH
21968: DOUBLE
21969: LD_INT 1
21971: DEC
21972: ST_TO_ADDR
21973: LD_VAR 0 2
21977: PUSH
21978: FOR_TO
21979: IFFALSE 22148
// begin if hackTanksCaptured [ index ] = hackLimit then
21981: LD_EXP 102
21985: PUSH
21986: LD_VAR 0 5
21990: ARRAY
21991: PUSH
21992: LD_EXP 103
21996: EQUAL
21997: IFFALSE 22001
// break ;
21999: GO 22148
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22001: LD_ADDR_EXP 105
22005: PUSH
22006: LD_EXP 105
22010: PPUSH
22011: LD_VAR 0 5
22015: PPUSH
22016: LD_EXP 105
22020: PUSH
22021: LD_VAR 0 5
22025: ARRAY
22026: PUSH
22027: LD_INT 1
22029: PLUS
22030: PPUSH
22031: CALL_OW 1
22035: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22036: LD_ADDR_EXP 102
22040: PUSH
22041: LD_EXP 102
22045: PPUSH
22046: LD_VAR 0 5
22050: PUSH
22051: LD_EXP 102
22055: PUSH
22056: LD_VAR 0 5
22060: ARRAY
22061: PUSH
22062: LD_INT 1
22064: PLUS
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PPUSH
22070: LD_VAR 0 2
22074: PUSH
22075: LD_VAR 0 4
22079: ARRAY
22080: PUSH
22081: LD_VAR 0 2
22085: PUSH
22086: LD_VAR 0 4
22090: ARRAY
22091: PPUSH
22092: CALL_OW 255
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL 29556 0 3
22105: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22106: LD_VAR 0 2
22110: PUSH
22111: LD_VAR 0 4
22115: ARRAY
22116: PPUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: CALL_OW 255
22126: PPUSH
22127: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22131: LD_VAR 0 2
22135: PUSH
22136: LD_VAR 0 4
22140: ARRAY
22141: PPUSH
22142: CALL_OW 141
// end ;
22146: GO 21978
22148: POP
22149: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22150: LD_VAR 0 1
22154: PPUSH
22155: LD_EXP 102
22159: PUSH
22160: LD_VAR 0 5
22164: ARRAY
22165: PUSH
22166: LD_INT 0
22168: PLUS
22169: PPUSH
22170: CALL_OW 505
// end ;
22174: LD_VAR 0 3
22178: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22179: LD_INT 0
22181: PPUSH
22182: PPUSH
22183: PPUSH
22184: PPUSH
// if not hack in hackTanks then
22185: LD_VAR 0 1
22189: PUSH
22190: LD_EXP 101
22194: IN
22195: NOT
22196: IFFALSE 22200
// exit ;
22198: GO 22440
// index := GetElementIndex ( hackTanks , hack ) ;
22200: LD_ADDR_VAR 0 4
22204: PUSH
22205: LD_EXP 101
22209: PPUSH
22210: LD_VAR 0 1
22214: PPUSH
22215: CALL 29341 0 2
22219: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22220: LD_ADDR_VAR 0 3
22224: PUSH
22225: DOUBLE
22226: LD_EXP 102
22230: PUSH
22231: LD_VAR 0 4
22235: ARRAY
22236: INC
22237: ST_TO_ADDR
22238: LD_INT 1
22240: PUSH
22241: FOR_DOWNTO
22242: IFFALSE 22414
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22244: LD_ADDR_VAR 0 5
22248: PUSH
22249: LD_EXP 102
22253: PUSH
22254: LD_VAR 0 4
22258: ARRAY
22259: PUSH
22260: LD_VAR 0 3
22264: ARRAY
22265: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22266: LD_VAR 0 5
22270: PUSH
22271: LD_INT 1
22273: ARRAY
22274: PPUSH
22275: CALL_OW 302
22279: NOT
22280: PUSH
22281: LD_VAR 0 5
22285: PUSH
22286: LD_INT 1
22288: ARRAY
22289: PPUSH
22290: CALL_OW 255
22294: PUSH
22295: LD_VAR 0 1
22299: PPUSH
22300: CALL_OW 255
22304: NONEQUAL
22305: OR
22306: IFFALSE 22412
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22308: LD_VAR 0 5
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PPUSH
22317: CALL_OW 305
22321: PUSH
22322: LD_VAR 0 5
22326: PUSH
22327: LD_INT 1
22329: ARRAY
22330: PPUSH
22331: CALL_OW 255
22335: PUSH
22336: LD_VAR 0 1
22340: PPUSH
22341: CALL_OW 255
22345: EQUAL
22346: AND
22347: IFFALSE 22371
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22349: LD_VAR 0 5
22353: PUSH
22354: LD_INT 1
22356: ARRAY
22357: PPUSH
22358: LD_VAR 0 5
22362: PUSH
22363: LD_INT 2
22365: ARRAY
22366: PPUSH
22367: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22371: LD_ADDR_EXP 102
22375: PUSH
22376: LD_EXP 102
22380: PPUSH
22381: LD_VAR 0 4
22385: PPUSH
22386: LD_EXP 102
22390: PUSH
22391: LD_VAR 0 4
22395: ARRAY
22396: PPUSH
22397: LD_VAR 0 3
22401: PPUSH
22402: CALL_OW 3
22406: PPUSH
22407: CALL_OW 1
22411: ST_TO_ADDR
// end ; end ;
22412: GO 22241
22414: POP
22415: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22416: LD_VAR 0 1
22420: PPUSH
22421: LD_EXP 102
22425: PUSH
22426: LD_VAR 0 4
22430: ARRAY
22431: PUSH
22432: LD_INT 0
22434: PLUS
22435: PPUSH
22436: CALL_OW 505
// end ;
22440: LD_VAR 0 2
22444: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22445: LD_INT 0
22447: PPUSH
22448: PPUSH
22449: PPUSH
22450: PPUSH
// if not hack in hackTanks then
22451: LD_VAR 0 1
22455: PUSH
22456: LD_EXP 101
22460: IN
22461: NOT
22462: IFFALSE 22466
// exit ;
22464: GO 22551
// index := GetElementIndex ( hackTanks , hack ) ;
22466: LD_ADDR_VAR 0 5
22470: PUSH
22471: LD_EXP 101
22475: PPUSH
22476: LD_VAR 0 1
22480: PPUSH
22481: CALL 29341 0 2
22485: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22486: LD_ADDR_VAR 0 4
22490: PUSH
22491: DOUBLE
22492: LD_INT 1
22494: DEC
22495: ST_TO_ADDR
22496: LD_EXP 102
22500: PUSH
22501: LD_VAR 0 5
22505: ARRAY
22506: PUSH
22507: FOR_TO
22508: IFFALSE 22549
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22510: LD_EXP 102
22514: PUSH
22515: LD_VAR 0 5
22519: ARRAY
22520: PUSH
22521: LD_VAR 0 4
22525: ARRAY
22526: PUSH
22527: LD_INT 1
22529: ARRAY
22530: PUSH
22531: LD_VAR 0 2
22535: EQUAL
22536: IFFALSE 22547
// KillUnit ( vehicle ) ;
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 66
22547: GO 22507
22549: POP
22550: POP
// end ;
22551: LD_VAR 0 3
22555: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22556: LD_EXP 106
22560: NOT
22561: IFFALSE 22596
22563: GO 22565
22565: DISABLE
// begin initMiner := true ;
22566: LD_ADDR_EXP 106
22570: PUSH
22571: LD_INT 1
22573: ST_TO_ADDR
// minersList := [ ] ;
22574: LD_ADDR_EXP 107
22578: PUSH
22579: EMPTY
22580: ST_TO_ADDR
// minerMinesList := [ ] ;
22581: LD_ADDR_EXP 108
22585: PUSH
22586: EMPTY
22587: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22588: LD_ADDR_EXP 109
22592: PUSH
22593: LD_INT 5
22595: ST_TO_ADDR
// end ;
22596: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22597: LD_EXP 106
22601: PUSH
22602: LD_INT 34
22604: PUSH
22605: LD_EXP 31
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: AND
22619: IFFALSE 23082
22621: GO 22623
22623: DISABLE
22624: LD_INT 0
22626: PPUSH
22627: PPUSH
22628: PPUSH
22629: PPUSH
// begin enable ;
22630: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22631: LD_ADDR_VAR 0 1
22635: PUSH
22636: LD_INT 34
22638: PUSH
22639: LD_EXP 31
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PPUSH
22648: CALL_OW 69
22652: PUSH
22653: FOR_IN
22654: IFFALSE 22726
// begin if not i in minersList then
22656: LD_VAR 0 1
22660: PUSH
22661: LD_EXP 107
22665: IN
22666: NOT
22667: IFFALSE 22724
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22669: LD_ADDR_EXP 107
22673: PUSH
22674: LD_EXP 107
22678: PPUSH
22679: LD_EXP 107
22683: PUSH
22684: LD_INT 1
22686: PLUS
22687: PPUSH
22688: LD_VAR 0 1
22692: PPUSH
22693: CALL_OW 1
22697: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22698: LD_ADDR_EXP 108
22702: PUSH
22703: LD_EXP 108
22707: PPUSH
22708: LD_EXP 108
22712: PUSH
22713: LD_INT 1
22715: PLUS
22716: PPUSH
22717: EMPTY
22718: PPUSH
22719: CALL_OW 1
22723: ST_TO_ADDR
// end end ;
22724: GO 22653
22726: POP
22727: POP
// for i := minerMinesList downto 1 do
22728: LD_ADDR_VAR 0 1
22732: PUSH
22733: DOUBLE
22734: LD_EXP 108
22738: INC
22739: ST_TO_ADDR
22740: LD_INT 1
22742: PUSH
22743: FOR_DOWNTO
22744: IFFALSE 23080
// begin if IsLive ( minersList [ i ] ) then
22746: LD_EXP 107
22750: PUSH
22751: LD_VAR 0 1
22755: ARRAY
22756: PPUSH
22757: CALL_OW 300
22761: IFFALSE 22789
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22763: LD_EXP 107
22767: PUSH
22768: LD_VAR 0 1
22772: ARRAY
22773: PPUSH
22774: LD_EXP 108
22778: PUSH
22779: LD_VAR 0 1
22783: ARRAY
22784: PPUSH
22785: CALL_OW 505
// if not minerMinesList [ i ] then
22789: LD_EXP 108
22793: PUSH
22794: LD_VAR 0 1
22798: ARRAY
22799: NOT
22800: IFFALSE 22804
// continue ;
22802: GO 22743
// for j := minerMinesList [ i ] downto 1 do
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: DOUBLE
22810: LD_EXP 108
22814: PUSH
22815: LD_VAR 0 1
22819: ARRAY
22820: INC
22821: ST_TO_ADDR
22822: LD_INT 1
22824: PUSH
22825: FOR_DOWNTO
22826: IFFALSE 23076
// begin side := GetSide ( minersList [ i ] ) ;
22828: LD_ADDR_VAR 0 3
22832: PUSH
22833: LD_EXP 107
22837: PUSH
22838: LD_VAR 0 1
22842: ARRAY
22843: PPUSH
22844: CALL_OW 255
22848: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22849: LD_ADDR_VAR 0 4
22853: PUSH
22854: LD_EXP 108
22858: PUSH
22859: LD_VAR 0 1
22863: ARRAY
22864: PUSH
22865: LD_VAR 0 2
22869: ARRAY
22870: PUSH
22871: LD_INT 1
22873: ARRAY
22874: PPUSH
22875: LD_EXP 108
22879: PUSH
22880: LD_VAR 0 1
22884: ARRAY
22885: PUSH
22886: LD_VAR 0 2
22890: ARRAY
22891: PUSH
22892: LD_INT 2
22894: ARRAY
22895: PPUSH
22896: CALL_OW 428
22900: ST_TO_ADDR
// if not tmp then
22901: LD_VAR 0 4
22905: NOT
22906: IFFALSE 22910
// continue ;
22908: GO 22825
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22910: LD_VAR 0 4
22914: PUSH
22915: LD_INT 81
22917: PUSH
22918: LD_VAR 0 3
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 69
22931: IN
22932: PUSH
22933: LD_EXP 108
22937: PUSH
22938: LD_VAR 0 1
22942: ARRAY
22943: PUSH
22944: LD_VAR 0 2
22948: ARRAY
22949: PUSH
22950: LD_INT 1
22952: ARRAY
22953: PPUSH
22954: LD_EXP 108
22958: PUSH
22959: LD_VAR 0 1
22963: ARRAY
22964: PUSH
22965: LD_VAR 0 2
22969: ARRAY
22970: PUSH
22971: LD_INT 2
22973: ARRAY
22974: PPUSH
22975: CALL_OW 458
22979: AND
22980: IFFALSE 23074
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22982: LD_EXP 108
22986: PUSH
22987: LD_VAR 0 1
22991: ARRAY
22992: PUSH
22993: LD_VAR 0 2
22997: ARRAY
22998: PUSH
22999: LD_INT 1
23001: ARRAY
23002: PPUSH
23003: LD_EXP 108
23007: PUSH
23008: LD_VAR 0 1
23012: ARRAY
23013: PUSH
23014: LD_VAR 0 2
23018: ARRAY
23019: PUSH
23020: LD_INT 2
23022: ARRAY
23023: PPUSH
23024: LD_VAR 0 3
23028: PPUSH
23029: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23033: LD_ADDR_EXP 108
23037: PUSH
23038: LD_EXP 108
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_EXP 108
23052: PUSH
23053: LD_VAR 0 1
23057: ARRAY
23058: PPUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: CALL_OW 3
23068: PPUSH
23069: CALL_OW 1
23073: ST_TO_ADDR
// end ; end ;
23074: GO 22825
23076: POP
23077: POP
// end ;
23078: GO 22743
23080: POP
23081: POP
// end ;
23082: PPOPN 4
23084: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23085: LD_INT 0
23087: PPUSH
23088: PPUSH
// result := false ;
23089: LD_ADDR_VAR 0 4
23093: PUSH
23094: LD_INT 0
23096: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23097: LD_VAR 0 1
23101: PPUSH
23102: CALL_OW 264
23106: PUSH
23107: LD_EXP 31
23111: EQUAL
23112: NOT
23113: IFFALSE 23117
// exit ;
23115: GO 23357
// index := GetElementIndex ( minersList , unit ) ;
23117: LD_ADDR_VAR 0 5
23121: PUSH
23122: LD_EXP 107
23126: PPUSH
23127: LD_VAR 0 1
23131: PPUSH
23132: CALL 29341 0 2
23136: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23137: LD_EXP 108
23141: PUSH
23142: LD_VAR 0 5
23146: ARRAY
23147: PUSH
23148: LD_EXP 109
23152: GREATEREQUAL
23153: IFFALSE 23157
// exit ;
23155: GO 23357
// ComMoveXY ( unit , x , y ) ;
23157: LD_VAR 0 1
23161: PPUSH
23162: LD_VAR 0 2
23166: PPUSH
23167: LD_VAR 0 3
23171: PPUSH
23172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23176: LD_INT 35
23178: PPUSH
23179: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23183: LD_VAR 0 1
23187: PPUSH
23188: LD_VAR 0 2
23192: PPUSH
23193: LD_VAR 0 3
23197: PPUSH
23198: CALL 60113 0 3
23202: NOT
23203: PUSH
23204: LD_VAR 0 1
23208: PPUSH
23209: CALL_OW 314
23213: AND
23214: IFFALSE 23218
// exit ;
23216: GO 23357
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23218: LD_VAR 0 2
23222: PPUSH
23223: LD_VAR 0 3
23227: PPUSH
23228: CALL_OW 428
23232: PUSH
23233: LD_VAR 0 1
23237: EQUAL
23238: PUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: CALL_OW 314
23248: NOT
23249: AND
23250: IFFALSE 23176
// PlaySoundXY ( x , y , PlantMine ) ;
23252: LD_VAR 0 2
23256: PPUSH
23257: LD_VAR 0 3
23261: PPUSH
23262: LD_STRING PlantMine
23264: PPUSH
23265: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23269: LD_VAR 0 2
23273: PPUSH
23274: LD_VAR 0 3
23278: PPUSH
23279: LD_VAR 0 1
23283: PPUSH
23284: CALL_OW 255
23288: PPUSH
23289: LD_INT 0
23291: PPUSH
23292: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23296: LD_ADDR_EXP 108
23300: PUSH
23301: LD_EXP 108
23305: PPUSH
23306: LD_VAR 0 5
23310: PUSH
23311: LD_EXP 108
23315: PUSH
23316: LD_VAR 0 5
23320: ARRAY
23321: PUSH
23322: LD_INT 1
23324: PLUS
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PPUSH
23330: LD_VAR 0 2
23334: PUSH
23335: LD_VAR 0 3
23339: PUSH
23340: EMPTY
23341: LIST
23342: LIST
23343: PPUSH
23344: CALL 29556 0 3
23348: ST_TO_ADDR
// result := true ;
23349: LD_ADDR_VAR 0 4
23353: PUSH
23354: LD_INT 1
23356: ST_TO_ADDR
// end ;
23357: LD_VAR 0 4
23361: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23362: LD_INT 0
23364: PPUSH
23365: PPUSH
23366: PPUSH
// if not unit in minersList then
23367: LD_VAR 0 1
23371: PUSH
23372: LD_EXP 107
23376: IN
23377: NOT
23378: IFFALSE 23382
// exit ;
23380: GO 23774
// index := GetElementIndex ( minersList , unit ) ;
23382: LD_ADDR_VAR 0 6
23386: PUSH
23387: LD_EXP 107
23391: PPUSH
23392: LD_VAR 0 1
23396: PPUSH
23397: CALL 29341 0 2
23401: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23402: LD_ADDR_VAR 0 5
23406: PUSH
23407: DOUBLE
23408: LD_EXP 108
23412: PUSH
23413: LD_VAR 0 6
23417: ARRAY
23418: INC
23419: ST_TO_ADDR
23420: LD_INT 1
23422: PUSH
23423: FOR_DOWNTO
23424: IFFALSE 23585
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23426: LD_EXP 108
23430: PUSH
23431: LD_VAR 0 6
23435: ARRAY
23436: PUSH
23437: LD_VAR 0 5
23441: ARRAY
23442: PUSH
23443: LD_INT 1
23445: ARRAY
23446: PUSH
23447: LD_VAR 0 2
23451: EQUAL
23452: PUSH
23453: LD_EXP 108
23457: PUSH
23458: LD_VAR 0 6
23462: ARRAY
23463: PUSH
23464: LD_VAR 0 5
23468: ARRAY
23469: PUSH
23470: LD_INT 2
23472: ARRAY
23473: PUSH
23474: LD_VAR 0 3
23478: EQUAL
23479: AND
23480: IFFALSE 23583
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23482: LD_EXP 108
23486: PUSH
23487: LD_VAR 0 6
23491: ARRAY
23492: PUSH
23493: LD_VAR 0 5
23497: ARRAY
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PPUSH
23503: LD_EXP 108
23507: PUSH
23508: LD_VAR 0 6
23512: ARRAY
23513: PUSH
23514: LD_VAR 0 5
23518: ARRAY
23519: PUSH
23520: LD_INT 2
23522: ARRAY
23523: PPUSH
23524: LD_VAR 0 1
23528: PPUSH
23529: CALL_OW 255
23533: PPUSH
23534: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23538: LD_ADDR_EXP 108
23542: PUSH
23543: LD_EXP 108
23547: PPUSH
23548: LD_VAR 0 6
23552: PPUSH
23553: LD_EXP 108
23557: PUSH
23558: LD_VAR 0 6
23562: ARRAY
23563: PPUSH
23564: LD_VAR 0 5
23568: PPUSH
23569: CALL_OW 3
23573: PPUSH
23574: CALL_OW 1
23578: ST_TO_ADDR
// exit ;
23579: POP
23580: POP
23581: GO 23774
// end ; end ;
23583: GO 23423
23585: POP
23586: POP
// for i := minerMinesList [ index ] downto 1 do
23587: LD_ADDR_VAR 0 5
23591: PUSH
23592: DOUBLE
23593: LD_EXP 108
23597: PUSH
23598: LD_VAR 0 6
23602: ARRAY
23603: INC
23604: ST_TO_ADDR
23605: LD_INT 1
23607: PUSH
23608: FOR_DOWNTO
23609: IFFALSE 23772
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23611: LD_EXP 108
23615: PUSH
23616: LD_VAR 0 6
23620: ARRAY
23621: PUSH
23622: LD_VAR 0 5
23626: ARRAY
23627: PUSH
23628: LD_INT 1
23630: ARRAY
23631: PPUSH
23632: LD_EXP 108
23636: PUSH
23637: LD_VAR 0 6
23641: ARRAY
23642: PUSH
23643: LD_VAR 0 5
23647: ARRAY
23648: PUSH
23649: LD_INT 2
23651: ARRAY
23652: PPUSH
23653: LD_VAR 0 2
23657: PPUSH
23658: LD_VAR 0 3
23662: PPUSH
23663: CALL_OW 298
23667: PUSH
23668: LD_INT 6
23670: LESS
23671: IFFALSE 23770
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23673: LD_EXP 108
23677: PUSH
23678: LD_VAR 0 6
23682: ARRAY
23683: PUSH
23684: LD_VAR 0 5
23688: ARRAY
23689: PUSH
23690: LD_INT 1
23692: ARRAY
23693: PPUSH
23694: LD_EXP 108
23698: PUSH
23699: LD_VAR 0 6
23703: ARRAY
23704: PUSH
23705: LD_VAR 0 5
23709: ARRAY
23710: PUSH
23711: LD_INT 2
23713: ARRAY
23714: PPUSH
23715: LD_VAR 0 1
23719: PPUSH
23720: CALL_OW 255
23724: PPUSH
23725: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23729: LD_ADDR_EXP 108
23733: PUSH
23734: LD_EXP 108
23738: PPUSH
23739: LD_VAR 0 6
23743: PPUSH
23744: LD_EXP 108
23748: PUSH
23749: LD_VAR 0 6
23753: ARRAY
23754: PPUSH
23755: LD_VAR 0 5
23759: PPUSH
23760: CALL_OW 3
23764: PPUSH
23765: CALL_OW 1
23769: ST_TO_ADDR
// end ; end ;
23770: GO 23608
23772: POP
23773: POP
// end ;
23774: LD_VAR 0 4
23778: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23779: LD_INT 0
23781: PPUSH
23782: PPUSH
23783: PPUSH
23784: PPUSH
23785: PPUSH
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23790: LD_VAR 0 1
23794: PPUSH
23795: CALL_OW 264
23799: PUSH
23800: LD_EXP 31
23804: EQUAL
23805: NOT
23806: PUSH
23807: LD_VAR 0 1
23811: PUSH
23812: LD_EXP 107
23816: IN
23817: NOT
23818: OR
23819: IFFALSE 23823
// exit ;
23821: GO 24145
// index := GetElementIndex ( minersList , unit ) ;
23823: LD_ADDR_VAR 0 6
23827: PUSH
23828: LD_EXP 107
23832: PPUSH
23833: LD_VAR 0 1
23837: PPUSH
23838: CALL 29341 0 2
23842: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23843: LD_ADDR_VAR 0 8
23847: PUSH
23848: LD_EXP 109
23852: PUSH
23853: LD_EXP 108
23857: PUSH
23858: LD_VAR 0 6
23862: ARRAY
23863: MINUS
23864: ST_TO_ADDR
// if not minesFreeAmount then
23865: LD_VAR 0 8
23869: NOT
23870: IFFALSE 23874
// exit ;
23872: GO 24145
// tmp := [ ] ;
23874: LD_ADDR_VAR 0 7
23878: PUSH
23879: EMPTY
23880: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23881: LD_ADDR_VAR 0 5
23885: PUSH
23886: DOUBLE
23887: LD_INT 1
23889: DEC
23890: ST_TO_ADDR
23891: LD_VAR 0 8
23895: PUSH
23896: FOR_TO
23897: IFFALSE 24092
// begin _d := rand ( 0 , 5 ) ;
23899: LD_ADDR_VAR 0 11
23903: PUSH
23904: LD_INT 0
23906: PPUSH
23907: LD_INT 5
23909: PPUSH
23910: CALL_OW 12
23914: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23915: LD_ADDR_VAR 0 12
23919: PUSH
23920: LD_INT 2
23922: PPUSH
23923: LD_INT 6
23925: PPUSH
23926: CALL_OW 12
23930: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23931: LD_ADDR_VAR 0 9
23935: PUSH
23936: LD_VAR 0 2
23940: PPUSH
23941: LD_VAR 0 11
23945: PPUSH
23946: LD_VAR 0 12
23950: PPUSH
23951: CALL_OW 272
23955: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23956: LD_ADDR_VAR 0 10
23960: PUSH
23961: LD_VAR 0 3
23965: PPUSH
23966: LD_VAR 0 11
23970: PPUSH
23971: LD_VAR 0 12
23975: PPUSH
23976: CALL_OW 273
23980: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23981: LD_VAR 0 9
23985: PPUSH
23986: LD_VAR 0 10
23990: PPUSH
23991: CALL_OW 488
23995: PUSH
23996: LD_VAR 0 9
24000: PUSH
24001: LD_VAR 0 10
24005: PUSH
24006: EMPTY
24007: LIST
24008: LIST
24009: PUSH
24010: LD_VAR 0 7
24014: IN
24015: NOT
24016: AND
24017: PUSH
24018: LD_VAR 0 9
24022: PPUSH
24023: LD_VAR 0 10
24027: PPUSH
24028: CALL_OW 458
24032: NOT
24033: AND
24034: IFFALSE 24076
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24036: LD_ADDR_VAR 0 7
24040: PUSH
24041: LD_VAR 0 7
24045: PPUSH
24046: LD_VAR 0 7
24050: PUSH
24051: LD_INT 1
24053: PLUS
24054: PPUSH
24055: LD_VAR 0 9
24059: PUSH
24060: LD_VAR 0 10
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: PPUSH
24069: CALL_OW 1
24073: ST_TO_ADDR
24074: GO 24090
// i := i - 1 ;
24076: LD_ADDR_VAR 0 5
24080: PUSH
24081: LD_VAR 0 5
24085: PUSH
24086: LD_INT 1
24088: MINUS
24089: ST_TO_ADDR
// end ;
24090: GO 23896
24092: POP
24093: POP
// for i in tmp do
24094: LD_ADDR_VAR 0 5
24098: PUSH
24099: LD_VAR 0 7
24103: PUSH
24104: FOR_IN
24105: IFFALSE 24143
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24107: LD_VAR 0 1
24111: PPUSH
24112: LD_VAR 0 5
24116: PUSH
24117: LD_INT 1
24119: ARRAY
24120: PPUSH
24121: LD_VAR 0 5
24125: PUSH
24126: LD_INT 2
24128: ARRAY
24129: PPUSH
24130: CALL 23085 0 3
24134: NOT
24135: IFFALSE 24141
// exit ;
24137: POP
24138: POP
24139: GO 24145
24141: GO 24104
24143: POP
24144: POP
// end ;
24145: LD_VAR 0 4
24149: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24150: LD_INT 0
24152: PPUSH
24153: PPUSH
24154: PPUSH
24155: PPUSH
24156: PPUSH
24157: PPUSH
24158: PPUSH
// if not GetClass ( unit ) = class_sniper then
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL_OW 257
24168: PUSH
24169: LD_INT 5
24171: EQUAL
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24565
// dist := 8 ;
24177: LD_ADDR_VAR 0 5
24181: PUSH
24182: LD_INT 8
24184: ST_TO_ADDR
// viewRange := 12 ;
24185: LD_ADDR_VAR 0 7
24189: PUSH
24190: LD_INT 12
24192: ST_TO_ADDR
// side := GetSide ( unit ) ;
24193: LD_ADDR_VAR 0 6
24197: PUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 255
24207: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24208: LD_INT 61
24210: PPUSH
24211: LD_VAR 0 6
24215: PPUSH
24216: CALL_OW 321
24220: PUSH
24221: LD_INT 2
24223: EQUAL
24224: IFFALSE 24234
// viewRange := 16 ;
24226: LD_ADDR_VAR 0 7
24230: PUSH
24231: LD_INT 16
24233: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24234: LD_VAR 0 1
24238: PPUSH
24239: LD_VAR 0 2
24243: PPUSH
24244: LD_VAR 0 3
24248: PPUSH
24249: CALL_OW 297
24253: PUSH
24254: LD_VAR 0 5
24258: GREATER
24259: IFFALSE 24338
// begin ComMoveXY ( unit , x , y ) ;
24261: LD_VAR 0 1
24265: PPUSH
24266: LD_VAR 0 2
24270: PPUSH
24271: LD_VAR 0 3
24275: PPUSH
24276: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24280: LD_INT 35
24282: PPUSH
24283: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24287: LD_VAR 0 1
24291: PPUSH
24292: LD_VAR 0 2
24296: PPUSH
24297: LD_VAR 0 3
24301: PPUSH
24302: CALL 60113 0 3
24306: NOT
24307: IFFALSE 24311
// exit ;
24309: GO 24565
// until GetDistUnitXY ( unit , x , y ) < dist ;
24311: LD_VAR 0 1
24315: PPUSH
24316: LD_VAR 0 2
24320: PPUSH
24321: LD_VAR 0 3
24325: PPUSH
24326: CALL_OW 297
24330: PUSH
24331: LD_VAR 0 5
24335: LESS
24336: IFFALSE 24280
// end ; ComTurnXY ( unit , x , y ) ;
24338: LD_VAR 0 1
24342: PPUSH
24343: LD_VAR 0 2
24347: PPUSH
24348: LD_VAR 0 3
24352: PPUSH
24353: CALL_OW 118
// wait ( 5 ) ;
24357: LD_INT 5
24359: PPUSH
24360: CALL_OW 67
// _d := GetDir ( unit ) ;
24364: LD_ADDR_VAR 0 10
24368: PUSH
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 254
24378: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24379: LD_ADDR_VAR 0 8
24383: PUSH
24384: LD_VAR 0 1
24388: PPUSH
24389: CALL_OW 250
24393: PPUSH
24394: LD_VAR 0 10
24398: PPUSH
24399: LD_VAR 0 5
24403: PPUSH
24404: CALL_OW 272
24408: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24409: LD_ADDR_VAR 0 9
24413: PUSH
24414: LD_VAR 0 1
24418: PPUSH
24419: CALL_OW 251
24423: PPUSH
24424: LD_VAR 0 10
24428: PPUSH
24429: LD_VAR 0 5
24433: PPUSH
24434: CALL_OW 273
24438: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24439: LD_VAR 0 8
24443: PPUSH
24444: LD_VAR 0 9
24448: PPUSH
24449: CALL_OW 488
24453: NOT
24454: IFFALSE 24458
// exit ;
24456: GO 24565
// ComAnimCustom ( unit , 1 ) ;
24458: LD_VAR 0 1
24462: PPUSH
24463: LD_INT 1
24465: PPUSH
24466: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24470: LD_VAR 0 8
24474: PPUSH
24475: LD_VAR 0 9
24479: PPUSH
24480: LD_VAR 0 6
24484: PPUSH
24485: LD_VAR 0 7
24489: PPUSH
24490: CALL_OW 330
// repeat wait ( 1 ) ;
24494: LD_INT 1
24496: PPUSH
24497: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24501: LD_VAR 0 1
24505: PPUSH
24506: CALL_OW 316
24510: PUSH
24511: LD_VAR 0 1
24515: PPUSH
24516: CALL_OW 314
24520: OR
24521: PUSH
24522: LD_VAR 0 1
24526: PPUSH
24527: CALL_OW 302
24531: NOT
24532: OR
24533: PUSH
24534: LD_VAR 0 1
24538: PPUSH
24539: CALL_OW 301
24543: OR
24544: IFFALSE 24494
// RemoveSeeing ( _x , _y , side ) ;
24546: LD_VAR 0 8
24550: PPUSH
24551: LD_VAR 0 9
24555: PPUSH
24556: LD_VAR 0 6
24560: PPUSH
24561: CALL_OW 331
// end ; end_of_file
24565: LD_VAR 0 4
24569: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24570: LD_INT 0
24572: PPUSH
24573: PPUSH
// if exist_mode then
24574: LD_VAR 0 2
24578: IFFALSE 24603
// unit := CreateCharacter ( prefix & ident ) else
24580: LD_ADDR_VAR 0 5
24584: PUSH
24585: LD_VAR 0 3
24589: PUSH
24590: LD_VAR 0 1
24594: STR
24595: PPUSH
24596: CALL_OW 34
24600: ST_TO_ADDR
24601: GO 24618
// unit := NewCharacter ( ident ) ;
24603: LD_ADDR_VAR 0 5
24607: PUSH
24608: LD_VAR 0 1
24612: PPUSH
24613: CALL_OW 25
24617: ST_TO_ADDR
// result := unit ;
24618: LD_ADDR_VAR 0 4
24622: PUSH
24623: LD_VAR 0 5
24627: ST_TO_ADDR
// end ;
24628: LD_VAR 0 4
24632: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24633: LD_INT 0
24635: PPUSH
24636: PPUSH
// if not side or not nation then
24637: LD_VAR 0 1
24641: NOT
24642: PUSH
24643: LD_VAR 0 2
24647: NOT
24648: OR
24649: IFFALSE 24653
// exit ;
24651: GO 25421
// case nation of nation_american :
24653: LD_VAR 0 2
24657: PUSH
24658: LD_INT 1
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24880
24666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24667: LD_ADDR_VAR 0 4
24671: PUSH
24672: LD_INT 35
24674: PUSH
24675: LD_INT 45
24677: PUSH
24678: LD_INT 46
24680: PUSH
24681: LD_INT 47
24683: PUSH
24684: LD_INT 82
24686: PUSH
24687: LD_INT 83
24689: PUSH
24690: LD_INT 84
24692: PUSH
24693: LD_INT 85
24695: PUSH
24696: LD_INT 86
24698: PUSH
24699: LD_INT 1
24701: PUSH
24702: LD_INT 2
24704: PUSH
24705: LD_INT 6
24707: PUSH
24708: LD_INT 15
24710: PUSH
24711: LD_INT 16
24713: PUSH
24714: LD_INT 7
24716: PUSH
24717: LD_INT 12
24719: PUSH
24720: LD_INT 13
24722: PUSH
24723: LD_INT 10
24725: PUSH
24726: LD_INT 14
24728: PUSH
24729: LD_INT 20
24731: PUSH
24732: LD_INT 21
24734: PUSH
24735: LD_INT 22
24737: PUSH
24738: LD_INT 25
24740: PUSH
24741: LD_INT 32
24743: PUSH
24744: LD_INT 27
24746: PUSH
24747: LD_INT 36
24749: PUSH
24750: LD_INT 69
24752: PUSH
24753: LD_INT 39
24755: PUSH
24756: LD_INT 34
24758: PUSH
24759: LD_INT 40
24761: PUSH
24762: LD_INT 48
24764: PUSH
24765: LD_INT 49
24767: PUSH
24768: LD_INT 50
24770: PUSH
24771: LD_INT 51
24773: PUSH
24774: LD_INT 52
24776: PUSH
24777: LD_INT 53
24779: PUSH
24780: LD_INT 54
24782: PUSH
24783: LD_INT 55
24785: PUSH
24786: LD_INT 56
24788: PUSH
24789: LD_INT 57
24791: PUSH
24792: LD_INT 58
24794: PUSH
24795: LD_INT 59
24797: PUSH
24798: LD_INT 60
24800: PUSH
24801: LD_INT 61
24803: PUSH
24804: LD_INT 62
24806: PUSH
24807: LD_INT 80
24809: PUSH
24810: LD_INT 82
24812: PUSH
24813: LD_INT 83
24815: PUSH
24816: LD_INT 84
24818: PUSH
24819: LD_INT 85
24821: PUSH
24822: LD_INT 86
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: ST_TO_ADDR
24878: GO 25345
24880: LD_INT 2
24882: DOUBLE
24883: EQUAL
24884: IFTRUE 24888
24886: GO 25114
24888: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24889: LD_ADDR_VAR 0 4
24893: PUSH
24894: LD_INT 35
24896: PUSH
24897: LD_INT 45
24899: PUSH
24900: LD_INT 46
24902: PUSH
24903: LD_INT 47
24905: PUSH
24906: LD_INT 82
24908: PUSH
24909: LD_INT 83
24911: PUSH
24912: LD_INT 84
24914: PUSH
24915: LD_INT 85
24917: PUSH
24918: LD_INT 87
24920: PUSH
24921: LD_INT 70
24923: PUSH
24924: LD_INT 1
24926: PUSH
24927: LD_INT 11
24929: PUSH
24930: LD_INT 3
24932: PUSH
24933: LD_INT 4
24935: PUSH
24936: LD_INT 5
24938: PUSH
24939: LD_INT 6
24941: PUSH
24942: LD_INT 15
24944: PUSH
24945: LD_INT 18
24947: PUSH
24948: LD_INT 7
24950: PUSH
24951: LD_INT 17
24953: PUSH
24954: LD_INT 8
24956: PUSH
24957: LD_INT 20
24959: PUSH
24960: LD_INT 21
24962: PUSH
24963: LD_INT 22
24965: PUSH
24966: LD_INT 72
24968: PUSH
24969: LD_INT 26
24971: PUSH
24972: LD_INT 69
24974: PUSH
24975: LD_INT 39
24977: PUSH
24978: LD_INT 40
24980: PUSH
24981: LD_INT 41
24983: PUSH
24984: LD_INT 42
24986: PUSH
24987: LD_INT 43
24989: PUSH
24990: LD_INT 48
24992: PUSH
24993: LD_INT 49
24995: PUSH
24996: LD_INT 50
24998: PUSH
24999: LD_INT 51
25001: PUSH
25002: LD_INT 52
25004: PUSH
25005: LD_INT 53
25007: PUSH
25008: LD_INT 54
25010: PUSH
25011: LD_INT 55
25013: PUSH
25014: LD_INT 56
25016: PUSH
25017: LD_INT 60
25019: PUSH
25020: LD_INT 61
25022: PUSH
25023: LD_INT 62
25025: PUSH
25026: LD_INT 66
25028: PUSH
25029: LD_INT 67
25031: PUSH
25032: LD_INT 68
25034: PUSH
25035: LD_INT 81
25037: PUSH
25038: LD_INT 82
25040: PUSH
25041: LD_INT 83
25043: PUSH
25044: LD_INT 84
25046: PUSH
25047: LD_INT 85
25049: PUSH
25050: LD_INT 87
25052: PUSH
25053: LD_INT 88
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: LIST
25110: LIST
25111: ST_TO_ADDR
25112: GO 25345
25114: LD_INT 3
25116: DOUBLE
25117: EQUAL
25118: IFTRUE 25122
25120: GO 25344
25122: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25123: LD_ADDR_VAR 0 4
25127: PUSH
25128: LD_INT 46
25130: PUSH
25131: LD_INT 47
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: LD_INT 2
25139: PUSH
25140: LD_INT 82
25142: PUSH
25143: LD_INT 83
25145: PUSH
25146: LD_INT 84
25148: PUSH
25149: LD_INT 85
25151: PUSH
25152: LD_INT 86
25154: PUSH
25155: LD_INT 11
25157: PUSH
25158: LD_INT 9
25160: PUSH
25161: LD_INT 20
25163: PUSH
25164: LD_INT 19
25166: PUSH
25167: LD_INT 21
25169: PUSH
25170: LD_INT 24
25172: PUSH
25173: LD_INT 22
25175: PUSH
25176: LD_INT 25
25178: PUSH
25179: LD_INT 28
25181: PUSH
25182: LD_INT 29
25184: PUSH
25185: LD_INT 30
25187: PUSH
25188: LD_INT 31
25190: PUSH
25191: LD_INT 37
25193: PUSH
25194: LD_INT 38
25196: PUSH
25197: LD_INT 32
25199: PUSH
25200: LD_INT 27
25202: PUSH
25203: LD_INT 33
25205: PUSH
25206: LD_INT 69
25208: PUSH
25209: LD_INT 39
25211: PUSH
25212: LD_INT 34
25214: PUSH
25215: LD_INT 40
25217: PUSH
25218: LD_INT 71
25220: PUSH
25221: LD_INT 23
25223: PUSH
25224: LD_INT 44
25226: PUSH
25227: LD_INT 48
25229: PUSH
25230: LD_INT 49
25232: PUSH
25233: LD_INT 50
25235: PUSH
25236: LD_INT 51
25238: PUSH
25239: LD_INT 52
25241: PUSH
25242: LD_INT 53
25244: PUSH
25245: LD_INT 54
25247: PUSH
25248: LD_INT 55
25250: PUSH
25251: LD_INT 56
25253: PUSH
25254: LD_INT 57
25256: PUSH
25257: LD_INT 58
25259: PUSH
25260: LD_INT 59
25262: PUSH
25263: LD_INT 63
25265: PUSH
25266: LD_INT 64
25268: PUSH
25269: LD_INT 65
25271: PUSH
25272: LD_INT 82
25274: PUSH
25275: LD_INT 83
25277: PUSH
25278: LD_INT 84
25280: PUSH
25281: LD_INT 85
25283: PUSH
25284: LD_INT 86
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: ST_TO_ADDR
25342: GO 25345
25344: POP
// if state > - 1 and state < 3 then
25345: LD_VAR 0 3
25349: PUSH
25350: LD_INT 1
25352: NEG
25353: GREATER
25354: PUSH
25355: LD_VAR 0 3
25359: PUSH
25360: LD_INT 3
25362: LESS
25363: AND
25364: IFFALSE 25421
// for i in result do
25366: LD_ADDR_VAR 0 5
25370: PUSH
25371: LD_VAR 0 4
25375: PUSH
25376: FOR_IN
25377: IFFALSE 25419
// if GetTech ( i , side ) <> state then
25379: LD_VAR 0 5
25383: PPUSH
25384: LD_VAR 0 1
25388: PPUSH
25389: CALL_OW 321
25393: PUSH
25394: LD_VAR 0 3
25398: NONEQUAL
25399: IFFALSE 25417
// result := result diff i ;
25401: LD_ADDR_VAR 0 4
25405: PUSH
25406: LD_VAR 0 4
25410: PUSH
25411: LD_VAR 0 5
25415: DIFF
25416: ST_TO_ADDR
25417: GO 25376
25419: POP
25420: POP
// end ;
25421: LD_VAR 0 4
25425: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25426: LD_INT 0
25428: PPUSH
25429: PPUSH
25430: PPUSH
// result := true ;
25431: LD_ADDR_VAR 0 3
25435: PUSH
25436: LD_INT 1
25438: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25439: LD_ADDR_VAR 0 5
25443: PUSH
25444: LD_VAR 0 2
25448: PPUSH
25449: CALL_OW 480
25453: ST_TO_ADDR
// if not tmp then
25454: LD_VAR 0 5
25458: NOT
25459: IFFALSE 25463
// exit ;
25461: GO 25512
// for i in tmp do
25463: LD_ADDR_VAR 0 4
25467: PUSH
25468: LD_VAR 0 5
25472: PUSH
25473: FOR_IN
25474: IFFALSE 25510
// if GetTech ( i , side ) <> state_researched then
25476: LD_VAR 0 4
25480: PPUSH
25481: LD_VAR 0 1
25485: PPUSH
25486: CALL_OW 321
25490: PUSH
25491: LD_INT 2
25493: NONEQUAL
25494: IFFALSE 25508
// begin result := false ;
25496: LD_ADDR_VAR 0 3
25500: PUSH
25501: LD_INT 0
25503: ST_TO_ADDR
// exit ;
25504: POP
25505: POP
25506: GO 25512
// end ;
25508: GO 25473
25510: POP
25511: POP
// end ;
25512: LD_VAR 0 3
25516: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25517: LD_INT 0
25519: PPUSH
25520: PPUSH
25521: PPUSH
25522: PPUSH
25523: PPUSH
25524: PPUSH
25525: PPUSH
25526: PPUSH
25527: PPUSH
25528: PPUSH
25529: PPUSH
25530: PPUSH
25531: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25532: LD_VAR 0 1
25536: NOT
25537: PUSH
25538: LD_VAR 0 1
25542: PPUSH
25543: CALL_OW 257
25547: PUSH
25548: LD_INT 9
25550: NONEQUAL
25551: OR
25552: IFFALSE 25556
// exit ;
25554: GO 26129
// side := GetSide ( unit ) ;
25556: LD_ADDR_VAR 0 9
25560: PUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 255
25570: ST_TO_ADDR
// tech_space := tech_spacanom ;
25571: LD_ADDR_VAR 0 12
25575: PUSH
25576: LD_INT 29
25578: ST_TO_ADDR
// tech_time := tech_taurad ;
25579: LD_ADDR_VAR 0 13
25583: PUSH
25584: LD_INT 28
25586: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25587: LD_ADDR_VAR 0 11
25591: PUSH
25592: LD_VAR 0 1
25596: PPUSH
25597: CALL_OW 310
25601: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25602: LD_VAR 0 11
25606: PPUSH
25607: CALL_OW 247
25611: PUSH
25612: LD_INT 2
25614: EQUAL
25615: IFFALSE 25619
// exit ;
25617: GO 26129
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25619: LD_ADDR_VAR 0 8
25623: PUSH
25624: LD_INT 81
25626: PUSH
25627: LD_VAR 0 9
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 3
25638: PUSH
25639: LD_INT 21
25641: PUSH
25642: LD_INT 3
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PPUSH
25657: CALL_OW 69
25661: ST_TO_ADDR
// if not tmp then
25662: LD_VAR 0 8
25666: NOT
25667: IFFALSE 25671
// exit ;
25669: GO 26129
// if in_unit then
25671: LD_VAR 0 11
25675: IFFALSE 25699
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25677: LD_ADDR_VAR 0 10
25681: PUSH
25682: LD_VAR 0 8
25686: PPUSH
25687: LD_VAR 0 11
25691: PPUSH
25692: CALL_OW 74
25696: ST_TO_ADDR
25697: GO 25719
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25699: LD_ADDR_VAR 0 10
25703: PUSH
25704: LD_VAR 0 8
25708: PPUSH
25709: LD_VAR 0 1
25713: PPUSH
25714: CALL_OW 74
25718: ST_TO_ADDR
// if not enemy then
25719: LD_VAR 0 10
25723: NOT
25724: IFFALSE 25728
// exit ;
25726: GO 26129
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25728: LD_VAR 0 11
25732: PUSH
25733: LD_VAR 0 11
25737: PPUSH
25738: LD_VAR 0 10
25742: PPUSH
25743: CALL_OW 296
25747: PUSH
25748: LD_INT 13
25750: GREATER
25751: AND
25752: PUSH
25753: LD_VAR 0 1
25757: PPUSH
25758: LD_VAR 0 10
25762: PPUSH
25763: CALL_OW 296
25767: PUSH
25768: LD_INT 12
25770: GREATER
25771: OR
25772: IFFALSE 25776
// exit ;
25774: GO 26129
// missile := [ 1 ] ;
25776: LD_ADDR_VAR 0 14
25780: PUSH
25781: LD_INT 1
25783: PUSH
25784: EMPTY
25785: LIST
25786: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25787: LD_VAR 0 9
25791: PPUSH
25792: LD_VAR 0 12
25796: PPUSH
25797: CALL_OW 325
25801: IFFALSE 25830
// missile := Insert ( missile , missile + 1 , 2 ) ;
25803: LD_ADDR_VAR 0 14
25807: PUSH
25808: LD_VAR 0 14
25812: PPUSH
25813: LD_VAR 0 14
25817: PUSH
25818: LD_INT 1
25820: PLUS
25821: PPUSH
25822: LD_INT 2
25824: PPUSH
25825: CALL_OW 2
25829: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25830: LD_VAR 0 9
25834: PPUSH
25835: LD_VAR 0 13
25839: PPUSH
25840: CALL_OW 325
25844: PUSH
25845: LD_VAR 0 10
25849: PPUSH
25850: CALL_OW 255
25854: PPUSH
25855: LD_VAR 0 13
25859: PPUSH
25860: CALL_OW 325
25864: NOT
25865: AND
25866: IFFALSE 25895
// missile := Insert ( missile , missile + 1 , 3 ) ;
25868: LD_ADDR_VAR 0 14
25872: PUSH
25873: LD_VAR 0 14
25877: PPUSH
25878: LD_VAR 0 14
25882: PUSH
25883: LD_INT 1
25885: PLUS
25886: PPUSH
25887: LD_INT 3
25889: PPUSH
25890: CALL_OW 2
25894: ST_TO_ADDR
// if missile < 2 then
25895: LD_VAR 0 14
25899: PUSH
25900: LD_INT 2
25902: LESS
25903: IFFALSE 25907
// exit ;
25905: GO 26129
// x := GetX ( enemy ) ;
25907: LD_ADDR_VAR 0 4
25911: PUSH
25912: LD_VAR 0 10
25916: PPUSH
25917: CALL_OW 250
25921: ST_TO_ADDR
// y := GetY ( enemy ) ;
25922: LD_ADDR_VAR 0 5
25926: PUSH
25927: LD_VAR 0 10
25931: PPUSH
25932: CALL_OW 251
25936: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25937: LD_ADDR_VAR 0 6
25941: PUSH
25942: LD_VAR 0 4
25946: PUSH
25947: LD_INT 1
25949: NEG
25950: PPUSH
25951: LD_INT 1
25953: PPUSH
25954: CALL_OW 12
25958: PLUS
25959: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25960: LD_ADDR_VAR 0 7
25964: PUSH
25965: LD_VAR 0 5
25969: PUSH
25970: LD_INT 1
25972: NEG
25973: PPUSH
25974: LD_INT 1
25976: PPUSH
25977: CALL_OW 12
25981: PLUS
25982: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25983: LD_VAR 0 6
25987: PPUSH
25988: LD_VAR 0 7
25992: PPUSH
25993: CALL_OW 488
25997: NOT
25998: IFFALSE 26020
// begin _x := x ;
26000: LD_ADDR_VAR 0 6
26004: PUSH
26005: LD_VAR 0 4
26009: ST_TO_ADDR
// _y := y ;
26010: LD_ADDR_VAR 0 7
26014: PUSH
26015: LD_VAR 0 5
26019: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26020: LD_ADDR_VAR 0 3
26024: PUSH
26025: LD_INT 1
26027: PPUSH
26028: LD_VAR 0 14
26032: PPUSH
26033: CALL_OW 12
26037: ST_TO_ADDR
// case i of 1 :
26038: LD_VAR 0 3
26042: PUSH
26043: LD_INT 1
26045: DOUBLE
26046: EQUAL
26047: IFTRUE 26051
26049: GO 26068
26051: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26052: LD_VAR 0 1
26056: PPUSH
26057: LD_VAR 0 10
26061: PPUSH
26062: CALL_OW 115
26066: GO 26129
26068: LD_INT 2
26070: DOUBLE
26071: EQUAL
26072: IFTRUE 26076
26074: GO 26098
26076: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26077: LD_VAR 0 1
26081: PPUSH
26082: LD_VAR 0 6
26086: PPUSH
26087: LD_VAR 0 7
26091: PPUSH
26092: CALL_OW 153
26096: GO 26129
26098: LD_INT 3
26100: DOUBLE
26101: EQUAL
26102: IFTRUE 26106
26104: GO 26128
26106: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26107: LD_VAR 0 1
26111: PPUSH
26112: LD_VAR 0 6
26116: PPUSH
26117: LD_VAR 0 7
26121: PPUSH
26122: CALL_OW 154
26126: GO 26129
26128: POP
// end ;
26129: LD_VAR 0 2
26133: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26134: LD_INT 0
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
26140: PPUSH
26141: PPUSH
// if not unit or not building then
26142: LD_VAR 0 1
26146: NOT
26147: PUSH
26148: LD_VAR 0 2
26152: NOT
26153: OR
26154: IFFALSE 26158
// exit ;
26156: GO 26316
// x := GetX ( building ) ;
26158: LD_ADDR_VAR 0 5
26162: PUSH
26163: LD_VAR 0 2
26167: PPUSH
26168: CALL_OW 250
26172: ST_TO_ADDR
// y := GetY ( building ) ;
26173: LD_ADDR_VAR 0 6
26177: PUSH
26178: LD_VAR 0 2
26182: PPUSH
26183: CALL_OW 251
26187: ST_TO_ADDR
// for i = 0 to 5 do
26188: LD_ADDR_VAR 0 4
26192: PUSH
26193: DOUBLE
26194: LD_INT 0
26196: DEC
26197: ST_TO_ADDR
26198: LD_INT 5
26200: PUSH
26201: FOR_TO
26202: IFFALSE 26314
// begin _x := ShiftX ( x , i , 3 ) ;
26204: LD_ADDR_VAR 0 7
26208: PUSH
26209: LD_VAR 0 5
26213: PPUSH
26214: LD_VAR 0 4
26218: PPUSH
26219: LD_INT 3
26221: PPUSH
26222: CALL_OW 272
26226: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26227: LD_ADDR_VAR 0 8
26231: PUSH
26232: LD_VAR 0 6
26236: PPUSH
26237: LD_VAR 0 4
26241: PPUSH
26242: LD_INT 3
26244: PPUSH
26245: CALL_OW 273
26249: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26250: LD_VAR 0 7
26254: PPUSH
26255: LD_VAR 0 8
26259: PPUSH
26260: CALL_OW 488
26264: NOT
26265: IFFALSE 26269
// continue ;
26267: GO 26201
// if HexInfo ( _x , _y ) = 0 then
26269: LD_VAR 0 7
26273: PPUSH
26274: LD_VAR 0 8
26278: PPUSH
26279: CALL_OW 428
26283: PUSH
26284: LD_INT 0
26286: EQUAL
26287: IFFALSE 26312
// begin ComMoveXY ( unit , _x , _y ) ;
26289: LD_VAR 0 1
26293: PPUSH
26294: LD_VAR 0 7
26298: PPUSH
26299: LD_VAR 0 8
26303: PPUSH
26304: CALL_OW 111
// exit ;
26308: POP
26309: POP
26310: GO 26316
// end ; end ;
26312: GO 26201
26314: POP
26315: POP
// end ;
26316: LD_VAR 0 3
26320: RET
// export function ScanBase ( side , base_area ) ; begin
26321: LD_INT 0
26323: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26324: LD_ADDR_VAR 0 3
26328: PUSH
26329: LD_VAR 0 2
26333: PPUSH
26334: LD_INT 81
26336: PUSH
26337: LD_VAR 0 1
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PPUSH
26346: CALL_OW 70
26350: ST_TO_ADDR
// end ;
26351: LD_VAR 0 3
26355: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26356: LD_INT 0
26358: PPUSH
26359: PPUSH
26360: PPUSH
26361: PPUSH
// result := false ;
26362: LD_ADDR_VAR 0 2
26366: PUSH
26367: LD_INT 0
26369: ST_TO_ADDR
// side := GetSide ( unit ) ;
26370: LD_ADDR_VAR 0 3
26374: PUSH
26375: LD_VAR 0 1
26379: PPUSH
26380: CALL_OW 255
26384: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26385: LD_ADDR_VAR 0 4
26389: PUSH
26390: LD_VAR 0 1
26394: PPUSH
26395: CALL_OW 248
26399: ST_TO_ADDR
// case nat of 1 :
26400: LD_VAR 0 4
26404: PUSH
26405: LD_INT 1
26407: DOUBLE
26408: EQUAL
26409: IFTRUE 26413
26411: GO 26424
26413: POP
// tech := tech_lassight ; 2 :
26414: LD_ADDR_VAR 0 5
26418: PUSH
26419: LD_INT 12
26421: ST_TO_ADDR
26422: GO 26463
26424: LD_INT 2
26426: DOUBLE
26427: EQUAL
26428: IFTRUE 26432
26430: GO 26443
26432: POP
// tech := tech_mortar ; 3 :
26433: LD_ADDR_VAR 0 5
26437: PUSH
26438: LD_INT 41
26440: ST_TO_ADDR
26441: GO 26463
26443: LD_INT 3
26445: DOUBLE
26446: EQUAL
26447: IFTRUE 26451
26449: GO 26462
26451: POP
// tech := tech_bazooka ; end ;
26452: LD_ADDR_VAR 0 5
26456: PUSH
26457: LD_INT 44
26459: ST_TO_ADDR
26460: GO 26463
26462: POP
// if Researched ( side , tech ) then
26463: LD_VAR 0 3
26467: PPUSH
26468: LD_VAR 0 5
26472: PPUSH
26473: CALL_OW 325
26477: IFFALSE 26504
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26479: LD_ADDR_VAR 0 2
26483: PUSH
26484: LD_INT 5
26486: PUSH
26487: LD_INT 8
26489: PUSH
26490: LD_INT 9
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: LIST
26497: PUSH
26498: LD_VAR 0 4
26502: ARRAY
26503: ST_TO_ADDR
// end ;
26504: LD_VAR 0 2
26508: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26509: LD_INT 0
26511: PPUSH
26512: PPUSH
26513: PPUSH
// if not mines then
26514: LD_VAR 0 2
26518: NOT
26519: IFFALSE 26523
// exit ;
26521: GO 26667
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26523: LD_ADDR_VAR 0 5
26527: PUSH
26528: LD_INT 81
26530: PUSH
26531: LD_VAR 0 1
26535: PUSH
26536: EMPTY
26537: LIST
26538: LIST
26539: PUSH
26540: LD_INT 3
26542: PUSH
26543: LD_INT 21
26545: PUSH
26546: LD_INT 3
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PPUSH
26561: CALL_OW 69
26565: ST_TO_ADDR
// for i in mines do
26566: LD_ADDR_VAR 0 4
26570: PUSH
26571: LD_VAR 0 2
26575: PUSH
26576: FOR_IN
26577: IFFALSE 26665
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26579: LD_VAR 0 4
26583: PUSH
26584: LD_INT 1
26586: ARRAY
26587: PPUSH
26588: LD_VAR 0 4
26592: PUSH
26593: LD_INT 2
26595: ARRAY
26596: PPUSH
26597: CALL_OW 458
26601: NOT
26602: IFFALSE 26606
// continue ;
26604: GO 26576
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26606: LD_VAR 0 4
26610: PUSH
26611: LD_INT 1
26613: ARRAY
26614: PPUSH
26615: LD_VAR 0 4
26619: PUSH
26620: LD_INT 2
26622: ARRAY
26623: PPUSH
26624: CALL_OW 428
26628: PUSH
26629: LD_VAR 0 5
26633: IN
26634: IFFALSE 26663
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26636: LD_VAR 0 4
26640: PUSH
26641: LD_INT 1
26643: ARRAY
26644: PPUSH
26645: LD_VAR 0 4
26649: PUSH
26650: LD_INT 2
26652: ARRAY
26653: PPUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 456
// end ;
26663: GO 26576
26665: POP
26666: POP
// end ;
26667: LD_VAR 0 3
26671: RET
// export function Count ( array ) ; var i ; begin
26672: LD_INT 0
26674: PPUSH
26675: PPUSH
// result := 0 ;
26676: LD_ADDR_VAR 0 2
26680: PUSH
26681: LD_INT 0
26683: ST_TO_ADDR
// for i in array do
26684: LD_ADDR_VAR 0 3
26688: PUSH
26689: LD_VAR 0 1
26693: PUSH
26694: FOR_IN
26695: IFFALSE 26719
// if i then
26697: LD_VAR 0 3
26701: IFFALSE 26717
// result := result + 1 ;
26703: LD_ADDR_VAR 0 2
26707: PUSH
26708: LD_VAR 0 2
26712: PUSH
26713: LD_INT 1
26715: PLUS
26716: ST_TO_ADDR
26717: GO 26694
26719: POP
26720: POP
// end ;
26721: LD_VAR 0 2
26725: RET
// export function IsEmpty ( building ) ; begin
26726: LD_INT 0
26728: PPUSH
// if not building then
26729: LD_VAR 0 1
26733: NOT
26734: IFFALSE 26738
// exit ;
26736: GO 26781
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26738: LD_ADDR_VAR 0 2
26742: PUSH
26743: LD_VAR 0 1
26747: PUSH
26748: LD_INT 22
26750: PUSH
26751: LD_VAR 0 1
26755: PPUSH
26756: CALL_OW 255
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 58
26767: PUSH
26768: EMPTY
26769: LIST
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PPUSH
26775: CALL_OW 69
26779: IN
26780: ST_TO_ADDR
// end ;
26781: LD_VAR 0 2
26785: RET
// export function IsNotFull ( building ) ; begin
26786: LD_INT 0
26788: PPUSH
// if not building then
26789: LD_VAR 0 1
26793: NOT
26794: IFFALSE 26798
// exit ;
26796: GO 26817
// result := UnitsInside ( building ) < 6 ;
26798: LD_ADDR_VAR 0 2
26802: PUSH
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL_OW 313
26812: PUSH
26813: LD_INT 6
26815: LESS
26816: ST_TO_ADDR
// end ;
26817: LD_VAR 0 2
26821: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26822: LD_INT 0
26824: PPUSH
26825: PPUSH
26826: PPUSH
26827: PPUSH
// tmp := [ ] ;
26828: LD_ADDR_VAR 0 3
26832: PUSH
26833: EMPTY
26834: ST_TO_ADDR
// list := [ ] ;
26835: LD_ADDR_VAR 0 5
26839: PUSH
26840: EMPTY
26841: ST_TO_ADDR
// for i = 16 to 25 do
26842: LD_ADDR_VAR 0 4
26846: PUSH
26847: DOUBLE
26848: LD_INT 16
26850: DEC
26851: ST_TO_ADDR
26852: LD_INT 25
26854: PUSH
26855: FOR_TO
26856: IFFALSE 26929
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26858: LD_ADDR_VAR 0 3
26862: PUSH
26863: LD_VAR 0 3
26867: PUSH
26868: LD_INT 22
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 255
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: PUSH
26885: LD_INT 91
26887: PUSH
26888: LD_VAR 0 1
26892: PUSH
26893: LD_INT 6
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 30
26903: PUSH
26904: LD_VAR 0 4
26908: PUSH
26909: EMPTY
26910: LIST
26911: LIST
26912: PUSH
26913: EMPTY
26914: LIST
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: PPUSH
26921: CALL_OW 69
26925: ADD
26926: ST_TO_ADDR
26927: GO 26855
26929: POP
26930: POP
// for i = 1 to tmp do
26931: LD_ADDR_VAR 0 4
26935: PUSH
26936: DOUBLE
26937: LD_INT 1
26939: DEC
26940: ST_TO_ADDR
26941: LD_VAR 0 3
26945: PUSH
26946: FOR_TO
26947: IFFALSE 27035
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26949: LD_ADDR_VAR 0 5
26953: PUSH
26954: LD_VAR 0 5
26958: PUSH
26959: LD_VAR 0 3
26963: PUSH
26964: LD_VAR 0 4
26968: ARRAY
26969: PPUSH
26970: CALL_OW 266
26974: PUSH
26975: LD_VAR 0 3
26979: PUSH
26980: LD_VAR 0 4
26984: ARRAY
26985: PPUSH
26986: CALL_OW 250
26990: PUSH
26991: LD_VAR 0 3
26995: PUSH
26996: LD_VAR 0 4
27000: ARRAY
27001: PPUSH
27002: CALL_OW 251
27006: PUSH
27007: LD_VAR 0 3
27011: PUSH
27012: LD_VAR 0 4
27016: ARRAY
27017: PPUSH
27018: CALL_OW 254
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: ADD
27032: ST_TO_ADDR
27033: GO 26946
27035: POP
27036: POP
// result := list ;
27037: LD_ADDR_VAR 0 2
27041: PUSH
27042: LD_VAR 0 5
27046: ST_TO_ADDR
// end ;
27047: LD_VAR 0 2
27051: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27052: LD_INT 0
27054: PPUSH
27055: PPUSH
27056: PPUSH
27057: PPUSH
27058: PPUSH
27059: PPUSH
27060: PPUSH
// if not factory then
27061: LD_VAR 0 1
27065: NOT
27066: IFFALSE 27070
// exit ;
27068: GO 27663
// if control = control_apeman then
27070: LD_VAR 0 4
27074: PUSH
27075: LD_INT 5
27077: EQUAL
27078: IFFALSE 27187
// begin tmp := UnitsInside ( factory ) ;
27080: LD_ADDR_VAR 0 8
27084: PUSH
27085: LD_VAR 0 1
27089: PPUSH
27090: CALL_OW 313
27094: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27095: LD_VAR 0 8
27099: PPUSH
27100: LD_INT 25
27102: PUSH
27103: LD_INT 12
27105: PUSH
27106: EMPTY
27107: LIST
27108: LIST
27109: PPUSH
27110: CALL_OW 72
27114: NOT
27115: IFFALSE 27125
// control := control_manual ;
27117: LD_ADDR_VAR 0 4
27121: PUSH
27122: LD_INT 1
27124: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27125: LD_ADDR_VAR 0 8
27129: PUSH
27130: LD_VAR 0 1
27134: PPUSH
27135: CALL 26822 0 1
27139: ST_TO_ADDR
// if tmp then
27140: LD_VAR 0 8
27144: IFFALSE 27187
// begin for i in tmp do
27146: LD_ADDR_VAR 0 7
27150: PUSH
27151: LD_VAR 0 8
27155: PUSH
27156: FOR_IN
27157: IFFALSE 27185
// if i [ 1 ] = b_ext_radio then
27159: LD_VAR 0 7
27163: PUSH
27164: LD_INT 1
27166: ARRAY
27167: PUSH
27168: LD_INT 22
27170: EQUAL
27171: IFFALSE 27183
// begin control := control_remote ;
27173: LD_ADDR_VAR 0 4
27177: PUSH
27178: LD_INT 2
27180: ST_TO_ADDR
// break ;
27181: GO 27185
// end ;
27183: GO 27156
27185: POP
27186: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27187: LD_VAR 0 1
27191: PPUSH
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_VAR 0 3
27201: PPUSH
27202: LD_VAR 0 4
27206: PPUSH
27207: LD_VAR 0 5
27211: PPUSH
27212: CALL_OW 448
27216: IFFALSE 27251
// begin result := [ chassis , engine , control , weapon ] ;
27218: LD_ADDR_VAR 0 6
27222: PUSH
27223: LD_VAR 0 2
27227: PUSH
27228: LD_VAR 0 3
27232: PUSH
27233: LD_VAR 0 4
27237: PUSH
27238: LD_VAR 0 5
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: LIST
27247: LIST
27248: ST_TO_ADDR
// exit ;
27249: GO 27663
// end ; _chassis := AvailableChassisList ( factory ) ;
27251: LD_ADDR_VAR 0 9
27255: PUSH
27256: LD_VAR 0 1
27260: PPUSH
27261: CALL_OW 475
27265: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27266: LD_ADDR_VAR 0 11
27270: PUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 476
27280: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27281: LD_ADDR_VAR 0 12
27285: PUSH
27286: LD_VAR 0 1
27290: PPUSH
27291: CALL_OW 477
27295: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27296: LD_ADDR_VAR 0 10
27300: PUSH
27301: LD_VAR 0 1
27305: PPUSH
27306: CALL_OW 478
27310: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27311: LD_VAR 0 9
27315: NOT
27316: PUSH
27317: LD_VAR 0 11
27321: NOT
27322: OR
27323: PUSH
27324: LD_VAR 0 12
27328: NOT
27329: OR
27330: PUSH
27331: LD_VAR 0 10
27335: NOT
27336: OR
27337: IFFALSE 27372
// begin result := [ chassis , engine , control , weapon ] ;
27339: LD_ADDR_VAR 0 6
27343: PUSH
27344: LD_VAR 0 2
27348: PUSH
27349: LD_VAR 0 3
27353: PUSH
27354: LD_VAR 0 4
27358: PUSH
27359: LD_VAR 0 5
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// exit ;
27370: GO 27663
// end ; if not chassis in _chassis then
27372: LD_VAR 0 2
27376: PUSH
27377: LD_VAR 0 9
27381: IN
27382: NOT
27383: IFFALSE 27409
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27385: LD_ADDR_VAR 0 2
27389: PUSH
27390: LD_VAR 0 9
27394: PUSH
27395: LD_INT 1
27397: PPUSH
27398: LD_VAR 0 9
27402: PPUSH
27403: CALL_OW 12
27407: ARRAY
27408: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_VAR 0 3
27418: PPUSH
27419: CALL 27668 0 2
27423: NOT
27424: IFFALSE 27483
// repeat engine := _engine [ 1 ] ;
27426: LD_ADDR_VAR 0 3
27430: PUSH
27431: LD_VAR 0 11
27435: PUSH
27436: LD_INT 1
27438: ARRAY
27439: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27440: LD_ADDR_VAR 0 11
27444: PUSH
27445: LD_VAR 0 11
27449: PPUSH
27450: LD_INT 1
27452: PPUSH
27453: CALL_OW 3
27457: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27458: LD_VAR 0 2
27462: PPUSH
27463: LD_VAR 0 3
27467: PPUSH
27468: CALL 27668 0 2
27472: PUSH
27473: LD_VAR 0 11
27477: PUSH
27478: EMPTY
27479: EQUAL
27480: OR
27481: IFFALSE 27426
// if not control in _control then
27483: LD_VAR 0 4
27487: PUSH
27488: LD_VAR 0 12
27492: IN
27493: NOT
27494: IFFALSE 27520
// control := _control [ rand ( 1 , _control ) ] ;
27496: LD_ADDR_VAR 0 4
27500: PUSH
27501: LD_VAR 0 12
27505: PUSH
27506: LD_INT 1
27508: PPUSH
27509: LD_VAR 0 12
27513: PPUSH
27514: CALL_OW 12
27518: ARRAY
27519: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27520: LD_VAR 0 2
27524: PPUSH
27525: LD_VAR 0 5
27529: PPUSH
27530: CALL 27888 0 2
27534: NOT
27535: IFFALSE 27594
// repeat weapon := _weapon [ 1 ] ;
27537: LD_ADDR_VAR 0 5
27541: PUSH
27542: LD_VAR 0 10
27546: PUSH
27547: LD_INT 1
27549: ARRAY
27550: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27551: LD_ADDR_VAR 0 10
27555: PUSH
27556: LD_VAR 0 10
27560: PPUSH
27561: LD_INT 1
27563: PPUSH
27564: CALL_OW 3
27568: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27569: LD_VAR 0 2
27573: PPUSH
27574: LD_VAR 0 5
27578: PPUSH
27579: CALL 27888 0 2
27583: PUSH
27584: LD_VAR 0 10
27588: PUSH
27589: EMPTY
27590: EQUAL
27591: OR
27592: IFFALSE 27537
// result := [ ] ;
27594: LD_ADDR_VAR 0 6
27598: PUSH
27599: EMPTY
27600: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27601: LD_VAR 0 1
27605: PPUSH
27606: LD_VAR 0 2
27610: PPUSH
27611: LD_VAR 0 3
27615: PPUSH
27616: LD_VAR 0 4
27620: PPUSH
27621: LD_VAR 0 5
27625: PPUSH
27626: CALL_OW 448
27630: IFFALSE 27663
// result := [ chassis , engine , control , weapon ] ;
27632: LD_ADDR_VAR 0 6
27636: PUSH
27637: LD_VAR 0 2
27641: PUSH
27642: LD_VAR 0 3
27646: PUSH
27647: LD_VAR 0 4
27651: PUSH
27652: LD_VAR 0 5
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: ST_TO_ADDR
// end ;
27663: LD_VAR 0 6
27667: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27668: LD_INT 0
27670: PPUSH
// if not chassis or not engine then
27671: LD_VAR 0 1
27675: NOT
27676: PUSH
27677: LD_VAR 0 2
27681: NOT
27682: OR
27683: IFFALSE 27687
// exit ;
27685: GO 27883
// case engine of engine_solar :
27687: LD_VAR 0 2
27691: PUSH
27692: LD_INT 2
27694: DOUBLE
27695: EQUAL
27696: IFTRUE 27700
27698: GO 27738
27700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27701: LD_ADDR_VAR 0 3
27705: PUSH
27706: LD_INT 11
27708: PUSH
27709: LD_INT 12
27711: PUSH
27712: LD_INT 13
27714: PUSH
27715: LD_INT 14
27717: PUSH
27718: LD_INT 1
27720: PUSH
27721: LD_INT 2
27723: PUSH
27724: LD_INT 3
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: LIST
27735: ST_TO_ADDR
27736: GO 27867
27738: LD_INT 1
27740: DOUBLE
27741: EQUAL
27742: IFTRUE 27746
27744: GO 27808
27746: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27747: LD_ADDR_VAR 0 3
27751: PUSH
27752: LD_INT 11
27754: PUSH
27755: LD_INT 12
27757: PUSH
27758: LD_INT 13
27760: PUSH
27761: LD_INT 14
27763: PUSH
27764: LD_INT 1
27766: PUSH
27767: LD_INT 2
27769: PUSH
27770: LD_INT 3
27772: PUSH
27773: LD_INT 4
27775: PUSH
27776: LD_INT 5
27778: PUSH
27779: LD_INT 21
27781: PUSH
27782: LD_INT 23
27784: PUSH
27785: LD_INT 22
27787: PUSH
27788: LD_INT 24
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: LIST
27805: ST_TO_ADDR
27806: GO 27867
27808: LD_INT 3
27810: DOUBLE
27811: EQUAL
27812: IFTRUE 27816
27814: GO 27866
27816: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27817: LD_ADDR_VAR 0 3
27821: PUSH
27822: LD_INT 13
27824: PUSH
27825: LD_INT 14
27827: PUSH
27828: LD_INT 2
27830: PUSH
27831: LD_INT 3
27833: PUSH
27834: LD_INT 4
27836: PUSH
27837: LD_INT 5
27839: PUSH
27840: LD_INT 21
27842: PUSH
27843: LD_INT 22
27845: PUSH
27846: LD_INT 23
27848: PUSH
27849: LD_INT 24
27851: PUSH
27852: EMPTY
27853: LIST
27854: LIST
27855: LIST
27856: LIST
27857: LIST
27858: LIST
27859: LIST
27860: LIST
27861: LIST
27862: LIST
27863: ST_TO_ADDR
27864: GO 27867
27866: POP
// result := ( chassis in result ) ;
27867: LD_ADDR_VAR 0 3
27871: PUSH
27872: LD_VAR 0 1
27876: PUSH
27877: LD_VAR 0 3
27881: IN
27882: ST_TO_ADDR
// end ;
27883: LD_VAR 0 3
27887: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27888: LD_INT 0
27890: PPUSH
// if not chassis or not weapon then
27891: LD_VAR 0 1
27895: NOT
27896: PUSH
27897: LD_VAR 0 2
27901: NOT
27902: OR
27903: IFFALSE 27907
// exit ;
27905: GO 28969
// case weapon of us_machine_gun :
27907: LD_VAR 0 2
27911: PUSH
27912: LD_INT 2
27914: DOUBLE
27915: EQUAL
27916: IFTRUE 27920
27918: GO 27950
27920: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_INT 1
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 3
27934: PUSH
27935: LD_INT 4
27937: PUSH
27938: LD_INT 5
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: ST_TO_ADDR
27948: GO 28953
27950: LD_INT 3
27952: DOUBLE
27953: EQUAL
27954: IFTRUE 27958
27956: GO 27988
27958: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27959: LD_ADDR_VAR 0 3
27963: PUSH
27964: LD_INT 1
27966: PUSH
27967: LD_INT 2
27969: PUSH
27970: LD_INT 3
27972: PUSH
27973: LD_INT 4
27975: PUSH
27976: LD_INT 5
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
27986: GO 28953
27988: LD_INT 11
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28026
27996: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27997: LD_ADDR_VAR 0 3
28001: PUSH
28002: LD_INT 1
28004: PUSH
28005: LD_INT 2
28007: PUSH
28008: LD_INT 3
28010: PUSH
28011: LD_INT 4
28013: PUSH
28014: LD_INT 5
28016: PUSH
28017: EMPTY
28018: LIST
28019: LIST
28020: LIST
28021: LIST
28022: LIST
28023: ST_TO_ADDR
28024: GO 28953
28026: LD_INT 4
28028: DOUBLE
28029: EQUAL
28030: IFTRUE 28034
28032: GO 28060
28034: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28035: LD_ADDR_VAR 0 3
28039: PUSH
28040: LD_INT 2
28042: PUSH
28043: LD_INT 3
28045: PUSH
28046: LD_INT 4
28048: PUSH
28049: LD_INT 5
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: ST_TO_ADDR
28058: GO 28953
28060: LD_INT 5
28062: DOUBLE
28063: EQUAL
28064: IFTRUE 28068
28066: GO 28094
28068: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 2
28076: PUSH
28077: LD_INT 3
28079: PUSH
28080: LD_INT 4
28082: PUSH
28083: LD_INT 5
28085: PUSH
28086: EMPTY
28087: LIST
28088: LIST
28089: LIST
28090: LIST
28091: ST_TO_ADDR
28092: GO 28953
28094: LD_INT 9
28096: DOUBLE
28097: EQUAL
28098: IFTRUE 28102
28100: GO 28128
28102: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28103: LD_ADDR_VAR 0 3
28107: PUSH
28108: LD_INT 2
28110: PUSH
28111: LD_INT 3
28113: PUSH
28114: LD_INT 4
28116: PUSH
28117: LD_INT 5
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: LIST
28124: LIST
28125: ST_TO_ADDR
28126: GO 28953
28128: LD_INT 7
28130: DOUBLE
28131: EQUAL
28132: IFTRUE 28136
28134: GO 28162
28136: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28137: LD_ADDR_VAR 0 3
28141: PUSH
28142: LD_INT 2
28144: PUSH
28145: LD_INT 3
28147: PUSH
28148: LD_INT 4
28150: PUSH
28151: LD_INT 5
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: ST_TO_ADDR
28160: GO 28953
28162: LD_INT 12
28164: DOUBLE
28165: EQUAL
28166: IFTRUE 28170
28168: GO 28196
28170: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28171: LD_ADDR_VAR 0 3
28175: PUSH
28176: LD_INT 2
28178: PUSH
28179: LD_INT 3
28181: PUSH
28182: LD_INT 4
28184: PUSH
28185: LD_INT 5
28187: PUSH
28188: EMPTY
28189: LIST
28190: LIST
28191: LIST
28192: LIST
28193: ST_TO_ADDR
28194: GO 28953
28196: LD_INT 13
28198: DOUBLE
28199: EQUAL
28200: IFTRUE 28204
28202: GO 28230
28204: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28205: LD_ADDR_VAR 0 3
28209: PUSH
28210: LD_INT 2
28212: PUSH
28213: LD_INT 3
28215: PUSH
28216: LD_INT 4
28218: PUSH
28219: LD_INT 5
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: ST_TO_ADDR
28228: GO 28953
28230: LD_INT 14
28232: DOUBLE
28233: EQUAL
28234: IFTRUE 28238
28236: GO 28256
28238: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28239: LD_ADDR_VAR 0 3
28243: PUSH
28244: LD_INT 4
28246: PUSH
28247: LD_INT 5
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: ST_TO_ADDR
28254: GO 28953
28256: LD_INT 6
28258: DOUBLE
28259: EQUAL
28260: IFTRUE 28264
28262: GO 28282
28264: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28265: LD_ADDR_VAR 0 3
28269: PUSH
28270: LD_INT 4
28272: PUSH
28273: LD_INT 5
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: ST_TO_ADDR
28280: GO 28953
28282: LD_INT 10
28284: DOUBLE
28285: EQUAL
28286: IFTRUE 28290
28288: GO 28308
28290: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28291: LD_ADDR_VAR 0 3
28295: PUSH
28296: LD_INT 4
28298: PUSH
28299: LD_INT 5
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: ST_TO_ADDR
28306: GO 28953
28308: LD_INT 22
28310: DOUBLE
28311: EQUAL
28312: IFTRUE 28316
28314: GO 28342
28316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_INT 11
28324: PUSH
28325: LD_INT 12
28327: PUSH
28328: LD_INT 13
28330: PUSH
28331: LD_INT 14
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: ST_TO_ADDR
28340: GO 28953
28342: LD_INT 23
28344: DOUBLE
28345: EQUAL
28346: IFTRUE 28350
28348: GO 28376
28350: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28351: LD_ADDR_VAR 0 3
28355: PUSH
28356: LD_INT 11
28358: PUSH
28359: LD_INT 12
28361: PUSH
28362: LD_INT 13
28364: PUSH
28365: LD_INT 14
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: LIST
28372: LIST
28373: ST_TO_ADDR
28374: GO 28953
28376: LD_INT 24
28378: DOUBLE
28379: EQUAL
28380: IFTRUE 28384
28382: GO 28410
28384: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28385: LD_ADDR_VAR 0 3
28389: PUSH
28390: LD_INT 11
28392: PUSH
28393: LD_INT 12
28395: PUSH
28396: LD_INT 13
28398: PUSH
28399: LD_INT 14
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: LIST
28406: LIST
28407: ST_TO_ADDR
28408: GO 28953
28410: LD_INT 30
28412: DOUBLE
28413: EQUAL
28414: IFTRUE 28418
28416: GO 28444
28418: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28419: LD_ADDR_VAR 0 3
28423: PUSH
28424: LD_INT 11
28426: PUSH
28427: LD_INT 12
28429: PUSH
28430: LD_INT 13
28432: PUSH
28433: LD_INT 14
28435: PUSH
28436: EMPTY
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: ST_TO_ADDR
28442: GO 28953
28444: LD_INT 25
28446: DOUBLE
28447: EQUAL
28448: IFTRUE 28452
28450: GO 28470
28452: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28453: LD_ADDR_VAR 0 3
28457: PUSH
28458: LD_INT 13
28460: PUSH
28461: LD_INT 14
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: ST_TO_ADDR
28468: GO 28953
28470: LD_INT 27
28472: DOUBLE
28473: EQUAL
28474: IFTRUE 28478
28476: GO 28496
28478: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28479: LD_ADDR_VAR 0 3
28483: PUSH
28484: LD_INT 13
28486: PUSH
28487: LD_INT 14
28489: PUSH
28490: EMPTY
28491: LIST
28492: LIST
28493: ST_TO_ADDR
28494: GO 28953
28496: LD_EXP 29
28500: DOUBLE
28501: EQUAL
28502: IFTRUE 28506
28504: GO 28532
28506: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28507: LD_ADDR_VAR 0 3
28511: PUSH
28512: LD_INT 11
28514: PUSH
28515: LD_INT 12
28517: PUSH
28518: LD_INT 13
28520: PUSH
28521: LD_INT 14
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: LIST
28528: LIST
28529: ST_TO_ADDR
28530: GO 28953
28532: LD_INT 28
28534: DOUBLE
28535: EQUAL
28536: IFTRUE 28540
28538: GO 28558
28540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28541: LD_ADDR_VAR 0 3
28545: PUSH
28546: LD_INT 13
28548: PUSH
28549: LD_INT 14
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: ST_TO_ADDR
28556: GO 28953
28558: LD_INT 29
28560: DOUBLE
28561: EQUAL
28562: IFTRUE 28566
28564: GO 28584
28566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28567: LD_ADDR_VAR 0 3
28571: PUSH
28572: LD_INT 13
28574: PUSH
28575: LD_INT 14
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: ST_TO_ADDR
28582: GO 28953
28584: LD_INT 31
28586: DOUBLE
28587: EQUAL
28588: IFTRUE 28592
28590: GO 28610
28592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28593: LD_ADDR_VAR 0 3
28597: PUSH
28598: LD_INT 13
28600: PUSH
28601: LD_INT 14
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: ST_TO_ADDR
28608: GO 28953
28610: LD_INT 26
28612: DOUBLE
28613: EQUAL
28614: IFTRUE 28618
28616: GO 28636
28618: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28619: LD_ADDR_VAR 0 3
28623: PUSH
28624: LD_INT 13
28626: PUSH
28627: LD_INT 14
28629: PUSH
28630: EMPTY
28631: LIST
28632: LIST
28633: ST_TO_ADDR
28634: GO 28953
28636: LD_INT 42
28638: DOUBLE
28639: EQUAL
28640: IFTRUE 28644
28642: GO 28670
28644: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28645: LD_ADDR_VAR 0 3
28649: PUSH
28650: LD_INT 21
28652: PUSH
28653: LD_INT 22
28655: PUSH
28656: LD_INT 23
28658: PUSH
28659: LD_INT 24
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: ST_TO_ADDR
28668: GO 28953
28670: LD_INT 43
28672: DOUBLE
28673: EQUAL
28674: IFTRUE 28678
28676: GO 28704
28678: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28679: LD_ADDR_VAR 0 3
28683: PUSH
28684: LD_INT 21
28686: PUSH
28687: LD_INT 22
28689: PUSH
28690: LD_INT 23
28692: PUSH
28693: LD_INT 24
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: LIST
28700: LIST
28701: ST_TO_ADDR
28702: GO 28953
28704: LD_INT 44
28706: DOUBLE
28707: EQUAL
28708: IFTRUE 28712
28710: GO 28738
28712: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28713: LD_ADDR_VAR 0 3
28717: PUSH
28718: LD_INT 21
28720: PUSH
28721: LD_INT 22
28723: PUSH
28724: LD_INT 23
28726: PUSH
28727: LD_INT 24
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: ST_TO_ADDR
28736: GO 28953
28738: LD_INT 45
28740: DOUBLE
28741: EQUAL
28742: IFTRUE 28746
28744: GO 28772
28746: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28747: LD_ADDR_VAR 0 3
28751: PUSH
28752: LD_INT 21
28754: PUSH
28755: LD_INT 22
28757: PUSH
28758: LD_INT 23
28760: PUSH
28761: LD_INT 24
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: ST_TO_ADDR
28770: GO 28953
28772: LD_INT 49
28774: DOUBLE
28775: EQUAL
28776: IFTRUE 28780
28778: GO 28806
28780: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28781: LD_ADDR_VAR 0 3
28785: PUSH
28786: LD_INT 21
28788: PUSH
28789: LD_INT 22
28791: PUSH
28792: LD_INT 23
28794: PUSH
28795: LD_INT 24
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
28804: GO 28953
28806: LD_INT 51
28808: DOUBLE
28809: EQUAL
28810: IFTRUE 28814
28812: GO 28840
28814: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28815: LD_ADDR_VAR 0 3
28819: PUSH
28820: LD_INT 21
28822: PUSH
28823: LD_INT 22
28825: PUSH
28826: LD_INT 23
28828: PUSH
28829: LD_INT 24
28831: PUSH
28832: EMPTY
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: ST_TO_ADDR
28838: GO 28953
28840: LD_INT 52
28842: DOUBLE
28843: EQUAL
28844: IFTRUE 28848
28846: GO 28874
28848: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28849: LD_ADDR_VAR 0 3
28853: PUSH
28854: LD_INT 21
28856: PUSH
28857: LD_INT 22
28859: PUSH
28860: LD_INT 23
28862: PUSH
28863: LD_INT 24
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: LIST
28870: LIST
28871: ST_TO_ADDR
28872: GO 28953
28874: LD_INT 53
28876: DOUBLE
28877: EQUAL
28878: IFTRUE 28882
28880: GO 28900
28882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28883: LD_ADDR_VAR 0 3
28887: PUSH
28888: LD_INT 23
28890: PUSH
28891: LD_INT 24
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: ST_TO_ADDR
28898: GO 28953
28900: LD_INT 46
28902: DOUBLE
28903: EQUAL
28904: IFTRUE 28908
28906: GO 28926
28908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28909: LD_ADDR_VAR 0 3
28913: PUSH
28914: LD_INT 23
28916: PUSH
28917: LD_INT 24
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: ST_TO_ADDR
28924: GO 28953
28926: LD_INT 47
28928: DOUBLE
28929: EQUAL
28930: IFTRUE 28934
28932: GO 28952
28934: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28935: LD_ADDR_VAR 0 3
28939: PUSH
28940: LD_INT 23
28942: PUSH
28943: LD_INT 24
28945: PUSH
28946: EMPTY
28947: LIST
28948: LIST
28949: ST_TO_ADDR
28950: GO 28953
28952: POP
// result := ( chassis in result ) ;
28953: LD_ADDR_VAR 0 3
28957: PUSH
28958: LD_VAR 0 1
28962: PUSH
28963: LD_VAR 0 3
28967: IN
28968: ST_TO_ADDR
// end ;
28969: LD_VAR 0 3
28973: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
28981: PPUSH
28982: PPUSH
// result := array ;
28983: LD_ADDR_VAR 0 5
28987: PUSH
28988: LD_VAR 0 1
28992: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28993: LD_VAR 0 1
28997: NOT
28998: PUSH
28999: LD_VAR 0 2
29003: NOT
29004: OR
29005: PUSH
29006: LD_VAR 0 3
29010: NOT
29011: OR
29012: PUSH
29013: LD_VAR 0 2
29017: PUSH
29018: LD_VAR 0 1
29022: GREATER
29023: OR
29024: PUSH
29025: LD_VAR 0 3
29029: PUSH
29030: LD_VAR 0 1
29034: GREATER
29035: OR
29036: IFFALSE 29040
// exit ;
29038: GO 29336
// if direction then
29040: LD_VAR 0 4
29044: IFFALSE 29108
// begin d := 1 ;
29046: LD_ADDR_VAR 0 9
29050: PUSH
29051: LD_INT 1
29053: ST_TO_ADDR
// if i_from > i_to then
29054: LD_VAR 0 2
29058: PUSH
29059: LD_VAR 0 3
29063: GREATER
29064: IFFALSE 29090
// length := ( array - i_from ) + i_to else
29066: LD_ADDR_VAR 0 11
29070: PUSH
29071: LD_VAR 0 1
29075: PUSH
29076: LD_VAR 0 2
29080: MINUS
29081: PUSH
29082: LD_VAR 0 3
29086: PLUS
29087: ST_TO_ADDR
29088: GO 29106
// length := i_to - i_from ;
29090: LD_ADDR_VAR 0 11
29094: PUSH
29095: LD_VAR 0 3
29099: PUSH
29100: LD_VAR 0 2
29104: MINUS
29105: ST_TO_ADDR
// end else
29106: GO 29169
// begin d := - 1 ;
29108: LD_ADDR_VAR 0 9
29112: PUSH
29113: LD_INT 1
29115: NEG
29116: ST_TO_ADDR
// if i_from > i_to then
29117: LD_VAR 0 2
29121: PUSH
29122: LD_VAR 0 3
29126: GREATER
29127: IFFALSE 29147
// length := i_from - i_to else
29129: LD_ADDR_VAR 0 11
29133: PUSH
29134: LD_VAR 0 2
29138: PUSH
29139: LD_VAR 0 3
29143: MINUS
29144: ST_TO_ADDR
29145: GO 29169
// length := ( array - i_to ) + i_from ;
29147: LD_ADDR_VAR 0 11
29151: PUSH
29152: LD_VAR 0 1
29156: PUSH
29157: LD_VAR 0 3
29161: MINUS
29162: PUSH
29163: LD_VAR 0 2
29167: PLUS
29168: ST_TO_ADDR
// end ; if not length then
29169: LD_VAR 0 11
29173: NOT
29174: IFFALSE 29178
// exit ;
29176: GO 29336
// tmp := array ;
29178: LD_ADDR_VAR 0 10
29182: PUSH
29183: LD_VAR 0 1
29187: ST_TO_ADDR
// for i = 1 to length do
29188: LD_ADDR_VAR 0 6
29192: PUSH
29193: DOUBLE
29194: LD_INT 1
29196: DEC
29197: ST_TO_ADDR
29198: LD_VAR 0 11
29202: PUSH
29203: FOR_TO
29204: IFFALSE 29324
// begin for j = 1 to array do
29206: LD_ADDR_VAR 0 7
29210: PUSH
29211: DOUBLE
29212: LD_INT 1
29214: DEC
29215: ST_TO_ADDR
29216: LD_VAR 0 1
29220: PUSH
29221: FOR_TO
29222: IFFALSE 29310
// begin k := j + d ;
29224: LD_ADDR_VAR 0 8
29228: PUSH
29229: LD_VAR 0 7
29233: PUSH
29234: LD_VAR 0 9
29238: PLUS
29239: ST_TO_ADDR
// if k > array then
29240: LD_VAR 0 8
29244: PUSH
29245: LD_VAR 0 1
29249: GREATER
29250: IFFALSE 29260
// k := 1 ;
29252: LD_ADDR_VAR 0 8
29256: PUSH
29257: LD_INT 1
29259: ST_TO_ADDR
// if not k then
29260: LD_VAR 0 8
29264: NOT
29265: IFFALSE 29277
// k := array ;
29267: LD_ADDR_VAR 0 8
29271: PUSH
29272: LD_VAR 0 1
29276: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29277: LD_ADDR_VAR 0 10
29281: PUSH
29282: LD_VAR 0 10
29286: PPUSH
29287: LD_VAR 0 8
29291: PPUSH
29292: LD_VAR 0 1
29296: PUSH
29297: LD_VAR 0 7
29301: ARRAY
29302: PPUSH
29303: CALL_OW 1
29307: ST_TO_ADDR
// end ;
29308: GO 29221
29310: POP
29311: POP
// array := tmp ;
29312: LD_ADDR_VAR 0 1
29316: PUSH
29317: LD_VAR 0 10
29321: ST_TO_ADDR
// end ;
29322: GO 29203
29324: POP
29325: POP
// result := array ;
29326: LD_ADDR_VAR 0 5
29330: PUSH
29331: LD_VAR 0 1
29335: ST_TO_ADDR
// end ;
29336: LD_VAR 0 5
29340: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29341: LD_INT 0
29343: PPUSH
29344: PPUSH
// result := 0 ;
29345: LD_ADDR_VAR 0 3
29349: PUSH
29350: LD_INT 0
29352: ST_TO_ADDR
// if not array or not value in array then
29353: LD_VAR 0 1
29357: NOT
29358: PUSH
29359: LD_VAR 0 2
29363: PUSH
29364: LD_VAR 0 1
29368: IN
29369: NOT
29370: OR
29371: IFFALSE 29375
// exit ;
29373: GO 29429
// for i = 1 to array do
29375: LD_ADDR_VAR 0 4
29379: PUSH
29380: DOUBLE
29381: LD_INT 1
29383: DEC
29384: ST_TO_ADDR
29385: LD_VAR 0 1
29389: PUSH
29390: FOR_TO
29391: IFFALSE 29427
// if value = array [ i ] then
29393: LD_VAR 0 2
29397: PUSH
29398: LD_VAR 0 1
29402: PUSH
29403: LD_VAR 0 4
29407: ARRAY
29408: EQUAL
29409: IFFALSE 29425
// begin result := i ;
29411: LD_ADDR_VAR 0 3
29415: PUSH
29416: LD_VAR 0 4
29420: ST_TO_ADDR
// exit ;
29421: POP
29422: POP
29423: GO 29429
// end ;
29425: GO 29390
29427: POP
29428: POP
// end ;
29429: LD_VAR 0 3
29433: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29434: LD_INT 0
29436: PPUSH
// vc_chassis := chassis ;
29437: LD_ADDR_OWVAR 37
29441: PUSH
29442: LD_VAR 0 1
29446: ST_TO_ADDR
// vc_engine := engine ;
29447: LD_ADDR_OWVAR 39
29451: PUSH
29452: LD_VAR 0 2
29456: ST_TO_ADDR
// vc_control := control ;
29457: LD_ADDR_OWVAR 38
29461: PUSH
29462: LD_VAR 0 3
29466: ST_TO_ADDR
// vc_weapon := weapon ;
29467: LD_ADDR_OWVAR 40
29471: PUSH
29472: LD_VAR 0 4
29476: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29477: LD_ADDR_OWVAR 41
29481: PUSH
29482: LD_VAR 0 5
29486: ST_TO_ADDR
// end ;
29487: LD_VAR 0 6
29491: RET
// export function WantPlant ( unit ) ; var task ; begin
29492: LD_INT 0
29494: PPUSH
29495: PPUSH
// result := false ;
29496: LD_ADDR_VAR 0 2
29500: PUSH
29501: LD_INT 0
29503: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29504: LD_ADDR_VAR 0 3
29508: PUSH
29509: LD_VAR 0 1
29513: PPUSH
29514: CALL_OW 437
29518: ST_TO_ADDR
// if task then
29519: LD_VAR 0 3
29523: IFFALSE 29551
// if task [ 1 ] [ 1 ] = p then
29525: LD_VAR 0 3
29529: PUSH
29530: LD_INT 1
29532: ARRAY
29533: PUSH
29534: LD_INT 1
29536: ARRAY
29537: PUSH
29538: LD_STRING p
29540: EQUAL
29541: IFFALSE 29551
// result := true ;
29543: LD_ADDR_VAR 0 2
29547: PUSH
29548: LD_INT 1
29550: ST_TO_ADDR
// end ;
29551: LD_VAR 0 2
29555: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29556: LD_INT 0
29558: PPUSH
29559: PPUSH
29560: PPUSH
29561: PPUSH
// if pos < 1 then
29562: LD_VAR 0 2
29566: PUSH
29567: LD_INT 1
29569: LESS
29570: IFFALSE 29574
// exit ;
29572: GO 29877
// if pos = 1 then
29574: LD_VAR 0 2
29578: PUSH
29579: LD_INT 1
29581: EQUAL
29582: IFFALSE 29615
// result := Replace ( arr , pos [ 1 ] , value ) else
29584: LD_ADDR_VAR 0 4
29588: PUSH
29589: LD_VAR 0 1
29593: PPUSH
29594: LD_VAR 0 2
29598: PUSH
29599: LD_INT 1
29601: ARRAY
29602: PPUSH
29603: LD_VAR 0 3
29607: PPUSH
29608: CALL_OW 1
29612: ST_TO_ADDR
29613: GO 29877
// begin tmp := arr ;
29615: LD_ADDR_VAR 0 6
29619: PUSH
29620: LD_VAR 0 1
29624: ST_TO_ADDR
// s_arr := [ tmp ] ;
29625: LD_ADDR_VAR 0 7
29629: PUSH
29630: LD_VAR 0 6
29634: PUSH
29635: EMPTY
29636: LIST
29637: ST_TO_ADDR
// for i = 1 to pos - 1 do
29638: LD_ADDR_VAR 0 5
29642: PUSH
29643: DOUBLE
29644: LD_INT 1
29646: DEC
29647: ST_TO_ADDR
29648: LD_VAR 0 2
29652: PUSH
29653: LD_INT 1
29655: MINUS
29656: PUSH
29657: FOR_TO
29658: IFFALSE 29703
// begin tmp := tmp [ pos [ i ] ] ;
29660: LD_ADDR_VAR 0 6
29664: PUSH
29665: LD_VAR 0 6
29669: PUSH
29670: LD_VAR 0 2
29674: PUSH
29675: LD_VAR 0 5
29679: ARRAY
29680: ARRAY
29681: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29682: LD_ADDR_VAR 0 7
29686: PUSH
29687: LD_VAR 0 7
29691: PUSH
29692: LD_VAR 0 6
29696: PUSH
29697: EMPTY
29698: LIST
29699: ADD
29700: ST_TO_ADDR
// end ;
29701: GO 29657
29703: POP
29704: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29705: LD_ADDR_VAR 0 6
29709: PUSH
29710: LD_VAR 0 6
29714: PPUSH
29715: LD_VAR 0 2
29719: PUSH
29720: LD_VAR 0 2
29724: ARRAY
29725: PPUSH
29726: LD_VAR 0 3
29730: PPUSH
29731: CALL_OW 1
29735: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29736: LD_ADDR_VAR 0 7
29740: PUSH
29741: LD_VAR 0 7
29745: PPUSH
29746: LD_VAR 0 7
29750: PPUSH
29751: LD_VAR 0 6
29755: PPUSH
29756: CALL_OW 1
29760: ST_TO_ADDR
// for i = s_arr downto 2 do
29761: LD_ADDR_VAR 0 5
29765: PUSH
29766: DOUBLE
29767: LD_VAR 0 7
29771: INC
29772: ST_TO_ADDR
29773: LD_INT 2
29775: PUSH
29776: FOR_DOWNTO
29777: IFFALSE 29861
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29779: LD_ADDR_VAR 0 6
29783: PUSH
29784: LD_VAR 0 7
29788: PUSH
29789: LD_VAR 0 5
29793: PUSH
29794: LD_INT 1
29796: MINUS
29797: ARRAY
29798: PPUSH
29799: LD_VAR 0 2
29803: PUSH
29804: LD_VAR 0 5
29808: PUSH
29809: LD_INT 1
29811: MINUS
29812: ARRAY
29813: PPUSH
29814: LD_VAR 0 7
29818: PUSH
29819: LD_VAR 0 5
29823: ARRAY
29824: PPUSH
29825: CALL_OW 1
29829: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29830: LD_ADDR_VAR 0 7
29834: PUSH
29835: LD_VAR 0 7
29839: PPUSH
29840: LD_VAR 0 5
29844: PUSH
29845: LD_INT 1
29847: MINUS
29848: PPUSH
29849: LD_VAR 0 6
29853: PPUSH
29854: CALL_OW 1
29858: ST_TO_ADDR
// end ;
29859: GO 29776
29861: POP
29862: POP
// result := s_arr [ 1 ] ;
29863: LD_ADDR_VAR 0 4
29867: PUSH
29868: LD_VAR 0 7
29872: PUSH
29873: LD_INT 1
29875: ARRAY
29876: ST_TO_ADDR
// end ; end ;
29877: LD_VAR 0 4
29881: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29882: LD_INT 0
29884: PPUSH
29885: PPUSH
// if not list then
29886: LD_VAR 0 1
29890: NOT
29891: IFFALSE 29895
// exit ;
29893: GO 29986
// i := list [ pos1 ] ;
29895: LD_ADDR_VAR 0 5
29899: PUSH
29900: LD_VAR 0 1
29904: PUSH
29905: LD_VAR 0 2
29909: ARRAY
29910: ST_TO_ADDR
// if not i then
29911: LD_VAR 0 5
29915: NOT
29916: IFFALSE 29920
// exit ;
29918: GO 29986
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29920: LD_ADDR_VAR 0 1
29924: PUSH
29925: LD_VAR 0 1
29929: PPUSH
29930: LD_VAR 0 2
29934: PPUSH
29935: LD_VAR 0 1
29939: PUSH
29940: LD_VAR 0 3
29944: ARRAY
29945: PPUSH
29946: CALL_OW 1
29950: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29951: LD_ADDR_VAR 0 1
29955: PUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: LD_VAR 0 3
29965: PPUSH
29966: LD_VAR 0 5
29970: PPUSH
29971: CALL_OW 1
29975: ST_TO_ADDR
// result := list ;
29976: LD_ADDR_VAR 0 4
29980: PUSH
29981: LD_VAR 0 1
29985: ST_TO_ADDR
// end ;
29986: LD_VAR 0 4
29990: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29991: LD_INT 0
29993: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29994: LD_ADDR_VAR 0 5
29998: PUSH
29999: LD_VAR 0 1
30003: PPUSH
30004: CALL_OW 250
30008: PPUSH
30009: LD_VAR 0 1
30013: PPUSH
30014: CALL_OW 251
30018: PPUSH
30019: LD_VAR 0 2
30023: PPUSH
30024: LD_VAR 0 3
30028: PPUSH
30029: LD_VAR 0 4
30033: PPUSH
30034: CALL 30044 0 5
30038: ST_TO_ADDR
// end ;
30039: LD_VAR 0 5
30043: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30044: LD_INT 0
30046: PPUSH
30047: PPUSH
30048: PPUSH
30049: PPUSH
// if not list then
30050: LD_VAR 0 3
30054: NOT
30055: IFFALSE 30059
// exit ;
30057: GO 30447
// result := [ ] ;
30059: LD_ADDR_VAR 0 6
30063: PUSH
30064: EMPTY
30065: ST_TO_ADDR
// for i in list do
30066: LD_ADDR_VAR 0 7
30070: PUSH
30071: LD_VAR 0 3
30075: PUSH
30076: FOR_IN
30077: IFFALSE 30279
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30079: LD_ADDR_VAR 0 9
30083: PUSH
30084: LD_VAR 0 7
30088: PPUSH
30089: LD_VAR 0 1
30093: PPUSH
30094: LD_VAR 0 2
30098: PPUSH
30099: CALL_OW 297
30103: ST_TO_ADDR
// if not result then
30104: LD_VAR 0 6
30108: NOT
30109: IFFALSE 30135
// result := [ [ i , tmp ] ] else
30111: LD_ADDR_VAR 0 6
30115: PUSH
30116: LD_VAR 0 7
30120: PUSH
30121: LD_VAR 0 9
30125: PUSH
30126: EMPTY
30127: LIST
30128: LIST
30129: PUSH
30130: EMPTY
30131: LIST
30132: ST_TO_ADDR
30133: GO 30277
// begin if result [ result ] [ 2 ] < tmp then
30135: LD_VAR 0 6
30139: PUSH
30140: LD_VAR 0 6
30144: ARRAY
30145: PUSH
30146: LD_INT 2
30148: ARRAY
30149: PUSH
30150: LD_VAR 0 9
30154: LESS
30155: IFFALSE 30197
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30157: LD_ADDR_VAR 0 6
30161: PUSH
30162: LD_VAR 0 6
30166: PPUSH
30167: LD_VAR 0 6
30171: PUSH
30172: LD_INT 1
30174: PLUS
30175: PPUSH
30176: LD_VAR 0 7
30180: PUSH
30181: LD_VAR 0 9
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PPUSH
30190: CALL_OW 2
30194: ST_TO_ADDR
30195: GO 30277
// for j = 1 to result do
30197: LD_ADDR_VAR 0 8
30201: PUSH
30202: DOUBLE
30203: LD_INT 1
30205: DEC
30206: ST_TO_ADDR
30207: LD_VAR 0 6
30211: PUSH
30212: FOR_TO
30213: IFFALSE 30275
// begin if tmp < result [ j ] [ 2 ] then
30215: LD_VAR 0 9
30219: PUSH
30220: LD_VAR 0 6
30224: PUSH
30225: LD_VAR 0 8
30229: ARRAY
30230: PUSH
30231: LD_INT 2
30233: ARRAY
30234: LESS
30235: IFFALSE 30273
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30237: LD_ADDR_VAR 0 6
30241: PUSH
30242: LD_VAR 0 6
30246: PPUSH
30247: LD_VAR 0 8
30251: PPUSH
30252: LD_VAR 0 7
30256: PUSH
30257: LD_VAR 0 9
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PPUSH
30266: CALL_OW 2
30270: ST_TO_ADDR
// break ;
30271: GO 30275
// end ; end ;
30273: GO 30212
30275: POP
30276: POP
// end ; end ;
30277: GO 30076
30279: POP
30280: POP
// if result and not asc then
30281: LD_VAR 0 6
30285: PUSH
30286: LD_VAR 0 4
30290: NOT
30291: AND
30292: IFFALSE 30367
// begin tmp := result ;
30294: LD_ADDR_VAR 0 9
30298: PUSH
30299: LD_VAR 0 6
30303: ST_TO_ADDR
// for i = tmp downto 1 do
30304: LD_ADDR_VAR 0 7
30308: PUSH
30309: DOUBLE
30310: LD_VAR 0 9
30314: INC
30315: ST_TO_ADDR
30316: LD_INT 1
30318: PUSH
30319: FOR_DOWNTO
30320: IFFALSE 30365
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30322: LD_ADDR_VAR 0 6
30326: PUSH
30327: LD_VAR 0 6
30331: PPUSH
30332: LD_VAR 0 9
30336: PUSH
30337: LD_VAR 0 7
30341: MINUS
30342: PUSH
30343: LD_INT 1
30345: PLUS
30346: PPUSH
30347: LD_VAR 0 9
30351: PUSH
30352: LD_VAR 0 7
30356: ARRAY
30357: PPUSH
30358: CALL_OW 1
30362: ST_TO_ADDR
30363: GO 30319
30365: POP
30366: POP
// end ; tmp := [ ] ;
30367: LD_ADDR_VAR 0 9
30371: PUSH
30372: EMPTY
30373: ST_TO_ADDR
// if mode then
30374: LD_VAR 0 5
30378: IFFALSE 30447
// begin for i = 1 to result do
30380: LD_ADDR_VAR 0 7
30384: PUSH
30385: DOUBLE
30386: LD_INT 1
30388: DEC
30389: ST_TO_ADDR
30390: LD_VAR 0 6
30394: PUSH
30395: FOR_TO
30396: IFFALSE 30435
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30398: LD_ADDR_VAR 0 9
30402: PUSH
30403: LD_VAR 0 9
30407: PPUSH
30408: LD_VAR 0 7
30412: PPUSH
30413: LD_VAR 0 6
30417: PUSH
30418: LD_VAR 0 7
30422: ARRAY
30423: PUSH
30424: LD_INT 1
30426: ARRAY
30427: PPUSH
30428: CALL_OW 1
30432: ST_TO_ADDR
30433: GO 30395
30435: POP
30436: POP
// result := tmp ;
30437: LD_ADDR_VAR 0 6
30441: PUSH
30442: LD_VAR 0 9
30446: ST_TO_ADDR
// end ; end ;
30447: LD_VAR 0 6
30451: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30452: LD_INT 0
30454: PPUSH
30455: PPUSH
30456: PPUSH
30457: PPUSH
30458: PPUSH
30459: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30460: LD_ADDR_VAR 0 5
30464: PUSH
30465: LD_INT 0
30467: PUSH
30468: LD_INT 0
30470: PUSH
30471: LD_INT 0
30473: PUSH
30474: EMPTY
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// if not x or not y then
30482: LD_VAR 0 2
30486: NOT
30487: PUSH
30488: LD_VAR 0 3
30492: NOT
30493: OR
30494: IFFALSE 30498
// exit ;
30496: GO 32150
// if not range then
30498: LD_VAR 0 4
30502: NOT
30503: IFFALSE 30513
// range := 10 ;
30505: LD_ADDR_VAR 0 4
30509: PUSH
30510: LD_INT 10
30512: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30513: LD_ADDR_VAR 0 8
30517: PUSH
30518: LD_INT 81
30520: PUSH
30521: LD_VAR 0 1
30525: PUSH
30526: EMPTY
30527: LIST
30528: LIST
30529: PUSH
30530: LD_INT 92
30532: PUSH
30533: LD_VAR 0 2
30537: PUSH
30538: LD_VAR 0 3
30542: PUSH
30543: LD_VAR 0 4
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: LIST
30552: LIST
30553: PUSH
30554: LD_INT 3
30556: PUSH
30557: LD_INT 21
30559: PUSH
30560: LD_INT 3
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: PPUSH
30576: CALL_OW 69
30580: ST_TO_ADDR
// if not tmp then
30581: LD_VAR 0 8
30585: NOT
30586: IFFALSE 30590
// exit ;
30588: GO 32150
// for i in tmp do
30590: LD_ADDR_VAR 0 6
30594: PUSH
30595: LD_VAR 0 8
30599: PUSH
30600: FOR_IN
30601: IFFALSE 32125
// begin points := [ 0 , 0 , 0 ] ;
30603: LD_ADDR_VAR 0 9
30607: PUSH
30608: LD_INT 0
30610: PUSH
30611: LD_INT 0
30613: PUSH
30614: LD_INT 0
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: ST_TO_ADDR
// bpoints := 1 ;
30622: LD_ADDR_VAR 0 10
30626: PUSH
30627: LD_INT 1
30629: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30630: LD_VAR 0 6
30634: PPUSH
30635: CALL_OW 247
30639: PUSH
30640: LD_INT 1
30642: DOUBLE
30643: EQUAL
30644: IFTRUE 30648
30646: GO 31226
30648: POP
// begin if GetClass ( i ) = 1 then
30649: LD_VAR 0 6
30653: PPUSH
30654: CALL_OW 257
30658: PUSH
30659: LD_INT 1
30661: EQUAL
30662: IFFALSE 30683
// points := [ 10 , 5 , 3 ] ;
30664: LD_ADDR_VAR 0 9
30668: PUSH
30669: LD_INT 10
30671: PUSH
30672: LD_INT 5
30674: PUSH
30675: LD_INT 3
30677: PUSH
30678: EMPTY
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30683: LD_VAR 0 6
30687: PPUSH
30688: CALL_OW 257
30692: PUSH
30693: LD_INT 2
30695: PUSH
30696: LD_INT 3
30698: PUSH
30699: LD_INT 4
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: IN
30707: IFFALSE 30728
// points := [ 3 , 2 , 1 ] ;
30709: LD_ADDR_VAR 0 9
30713: PUSH
30714: LD_INT 3
30716: PUSH
30717: LD_INT 2
30719: PUSH
30720: LD_INT 1
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30728: LD_VAR 0 6
30732: PPUSH
30733: CALL_OW 257
30737: PUSH
30738: LD_INT 5
30740: EQUAL
30741: IFFALSE 30762
// points := [ 130 , 5 , 2 ] ;
30743: LD_ADDR_VAR 0 9
30747: PUSH
30748: LD_INT 130
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: LD_INT 2
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: LIST
30761: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30762: LD_VAR 0 6
30766: PPUSH
30767: CALL_OW 257
30771: PUSH
30772: LD_INT 8
30774: EQUAL
30775: IFFALSE 30796
// points := [ 35 , 35 , 30 ] ;
30777: LD_ADDR_VAR 0 9
30781: PUSH
30782: LD_INT 35
30784: PUSH
30785: LD_INT 35
30787: PUSH
30788: LD_INT 30
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: LIST
30795: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30796: LD_VAR 0 6
30800: PPUSH
30801: CALL_OW 257
30805: PUSH
30806: LD_INT 9
30808: EQUAL
30809: IFFALSE 30830
// points := [ 20 , 55 , 40 ] ;
30811: LD_ADDR_VAR 0 9
30815: PUSH
30816: LD_INT 20
30818: PUSH
30819: LD_INT 55
30821: PUSH
30822: LD_INT 40
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: LIST
30829: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30830: LD_VAR 0 6
30834: PPUSH
30835: CALL_OW 257
30839: PUSH
30840: LD_INT 12
30842: PUSH
30843: LD_INT 16
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: IN
30850: IFFALSE 30871
// points := [ 5 , 3 , 2 ] ;
30852: LD_ADDR_VAR 0 9
30856: PUSH
30857: LD_INT 5
30859: PUSH
30860: LD_INT 3
30862: PUSH
30863: LD_INT 2
30865: PUSH
30866: EMPTY
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30871: LD_VAR 0 6
30875: PPUSH
30876: CALL_OW 257
30880: PUSH
30881: LD_INT 17
30883: EQUAL
30884: IFFALSE 30905
// points := [ 100 , 50 , 75 ] ;
30886: LD_ADDR_VAR 0 9
30890: PUSH
30891: LD_INT 100
30893: PUSH
30894: LD_INT 50
30896: PUSH
30897: LD_INT 75
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30905: LD_VAR 0 6
30909: PPUSH
30910: CALL_OW 257
30914: PUSH
30915: LD_INT 15
30917: EQUAL
30918: IFFALSE 30939
// points := [ 10 , 5 , 3 ] ;
30920: LD_ADDR_VAR 0 9
30924: PUSH
30925: LD_INT 10
30927: PUSH
30928: LD_INT 5
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: LIST
30938: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30939: LD_VAR 0 6
30943: PPUSH
30944: CALL_OW 257
30948: PUSH
30949: LD_INT 14
30951: EQUAL
30952: IFFALSE 30973
// points := [ 10 , 0 , 0 ] ;
30954: LD_ADDR_VAR 0 9
30958: PUSH
30959: LD_INT 10
30961: PUSH
30962: LD_INT 0
30964: PUSH
30965: LD_INT 0
30967: PUSH
30968: EMPTY
30969: LIST
30970: LIST
30971: LIST
30972: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30973: LD_VAR 0 6
30977: PPUSH
30978: CALL_OW 257
30982: PUSH
30983: LD_INT 11
30985: EQUAL
30986: IFFALSE 31007
// points := [ 30 , 10 , 5 ] ;
30988: LD_ADDR_VAR 0 9
30992: PUSH
30993: LD_INT 30
30995: PUSH
30996: LD_INT 10
30998: PUSH
30999: LD_INT 5
31001: PUSH
31002: EMPTY
31003: LIST
31004: LIST
31005: LIST
31006: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31007: LD_VAR 0 1
31011: PPUSH
31012: LD_INT 5
31014: PPUSH
31015: CALL_OW 321
31019: PUSH
31020: LD_INT 2
31022: EQUAL
31023: IFFALSE 31040
// bpoints := bpoints * 1.8 ;
31025: LD_ADDR_VAR 0 10
31029: PUSH
31030: LD_VAR 0 10
31034: PUSH
31035: LD_REAL  1.80000000000000E+0000
31038: MUL
31039: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31040: LD_VAR 0 6
31044: PPUSH
31045: CALL_OW 257
31049: PUSH
31050: LD_INT 1
31052: PUSH
31053: LD_INT 2
31055: PUSH
31056: LD_INT 3
31058: PUSH
31059: LD_INT 4
31061: PUSH
31062: EMPTY
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: IN
31068: PUSH
31069: LD_VAR 0 1
31073: PPUSH
31074: LD_INT 51
31076: PPUSH
31077: CALL_OW 321
31081: PUSH
31082: LD_INT 2
31084: EQUAL
31085: AND
31086: IFFALSE 31103
// bpoints := bpoints * 1.2 ;
31088: LD_ADDR_VAR 0 10
31092: PUSH
31093: LD_VAR 0 10
31097: PUSH
31098: LD_REAL  1.20000000000000E+0000
31101: MUL
31102: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31103: LD_VAR 0 6
31107: PPUSH
31108: CALL_OW 257
31112: PUSH
31113: LD_INT 5
31115: PUSH
31116: LD_INT 7
31118: PUSH
31119: LD_INT 9
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: LIST
31126: IN
31127: PUSH
31128: LD_VAR 0 1
31132: PPUSH
31133: LD_INT 52
31135: PPUSH
31136: CALL_OW 321
31140: PUSH
31141: LD_INT 2
31143: EQUAL
31144: AND
31145: IFFALSE 31162
// bpoints := bpoints * 1.5 ;
31147: LD_ADDR_VAR 0 10
31151: PUSH
31152: LD_VAR 0 10
31156: PUSH
31157: LD_REAL  1.50000000000000E+0000
31160: MUL
31161: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31162: LD_VAR 0 1
31166: PPUSH
31167: LD_INT 66
31169: PPUSH
31170: CALL_OW 321
31174: PUSH
31175: LD_INT 2
31177: EQUAL
31178: IFFALSE 31195
// bpoints := bpoints * 1.1 ;
31180: LD_ADDR_VAR 0 10
31184: PUSH
31185: LD_VAR 0 10
31189: PUSH
31190: LD_REAL  1.10000000000000E+0000
31193: MUL
31194: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31195: LD_ADDR_VAR 0 10
31199: PUSH
31200: LD_VAR 0 10
31204: PUSH
31205: LD_VAR 0 6
31209: PPUSH
31210: LD_INT 1
31212: PPUSH
31213: CALL_OW 259
31217: PUSH
31218: LD_REAL  1.15000000000000E+0000
31221: MUL
31222: MUL
31223: ST_TO_ADDR
// end ; unit_vehicle :
31224: GO 32054
31226: LD_INT 2
31228: DOUBLE
31229: EQUAL
31230: IFTRUE 31234
31232: GO 32042
31234: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31235: LD_VAR 0 6
31239: PPUSH
31240: CALL_OW 264
31244: PUSH
31245: LD_INT 2
31247: PUSH
31248: LD_INT 42
31250: PUSH
31251: LD_INT 24
31253: PUSH
31254: EMPTY
31255: LIST
31256: LIST
31257: LIST
31258: IN
31259: IFFALSE 31280
// points := [ 25 , 5 , 3 ] ;
31261: LD_ADDR_VAR 0 9
31265: PUSH
31266: LD_INT 25
31268: PUSH
31269: LD_INT 5
31271: PUSH
31272: LD_INT 3
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: LIST
31279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31280: LD_VAR 0 6
31284: PPUSH
31285: CALL_OW 264
31289: PUSH
31290: LD_INT 4
31292: PUSH
31293: LD_INT 43
31295: PUSH
31296: LD_INT 25
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: IN
31304: IFFALSE 31325
// points := [ 40 , 15 , 5 ] ;
31306: LD_ADDR_VAR 0 9
31310: PUSH
31311: LD_INT 40
31313: PUSH
31314: LD_INT 15
31316: PUSH
31317: LD_INT 5
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: LIST
31324: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31325: LD_VAR 0 6
31329: PPUSH
31330: CALL_OW 264
31334: PUSH
31335: LD_INT 3
31337: PUSH
31338: LD_INT 23
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: IN
31345: IFFALSE 31366
// points := [ 7 , 25 , 8 ] ;
31347: LD_ADDR_VAR 0 9
31351: PUSH
31352: LD_INT 7
31354: PUSH
31355: LD_INT 25
31357: PUSH
31358: LD_INT 8
31360: PUSH
31361: EMPTY
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31366: LD_VAR 0 6
31370: PPUSH
31371: CALL_OW 264
31375: PUSH
31376: LD_INT 5
31378: PUSH
31379: LD_INT 27
31381: PUSH
31382: LD_INT 44
31384: PUSH
31385: EMPTY
31386: LIST
31387: LIST
31388: LIST
31389: IN
31390: IFFALSE 31411
// points := [ 14 , 50 , 16 ] ;
31392: LD_ADDR_VAR 0 9
31396: PUSH
31397: LD_INT 14
31399: PUSH
31400: LD_INT 50
31402: PUSH
31403: LD_INT 16
31405: PUSH
31406: EMPTY
31407: LIST
31408: LIST
31409: LIST
31410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31411: LD_VAR 0 6
31415: PPUSH
31416: CALL_OW 264
31420: PUSH
31421: LD_INT 6
31423: PUSH
31424: LD_INT 46
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: IN
31431: IFFALSE 31452
// points := [ 32 , 120 , 70 ] ;
31433: LD_ADDR_VAR 0 9
31437: PUSH
31438: LD_INT 32
31440: PUSH
31441: LD_INT 120
31443: PUSH
31444: LD_INT 70
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: LIST
31451: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31452: LD_VAR 0 6
31456: PPUSH
31457: CALL_OW 264
31461: PUSH
31462: LD_INT 7
31464: PUSH
31465: LD_INT 28
31467: PUSH
31468: LD_INT 45
31470: PUSH
31471: LD_EXP 29
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: IN
31482: IFFALSE 31503
// points := [ 35 , 20 , 45 ] ;
31484: LD_ADDR_VAR 0 9
31488: PUSH
31489: LD_INT 35
31491: PUSH
31492: LD_INT 20
31494: PUSH
31495: LD_INT 45
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: LIST
31502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31503: LD_VAR 0 6
31507: PPUSH
31508: CALL_OW 264
31512: PUSH
31513: LD_INT 47
31515: PUSH
31516: EMPTY
31517: LIST
31518: IN
31519: IFFALSE 31540
// points := [ 67 , 45 , 75 ] ;
31521: LD_ADDR_VAR 0 9
31525: PUSH
31526: LD_INT 67
31528: PUSH
31529: LD_INT 45
31531: PUSH
31532: LD_INT 75
31534: PUSH
31535: EMPTY
31536: LIST
31537: LIST
31538: LIST
31539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31540: LD_VAR 0 6
31544: PPUSH
31545: CALL_OW 264
31549: PUSH
31550: LD_INT 26
31552: PUSH
31553: EMPTY
31554: LIST
31555: IN
31556: IFFALSE 31577
// points := [ 120 , 30 , 80 ] ;
31558: LD_ADDR_VAR 0 9
31562: PUSH
31563: LD_INT 120
31565: PUSH
31566: LD_INT 30
31568: PUSH
31569: LD_INT 80
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: LIST
31576: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31577: LD_VAR 0 6
31581: PPUSH
31582: CALL_OW 264
31586: PUSH
31587: LD_INT 22
31589: PUSH
31590: EMPTY
31591: LIST
31592: IN
31593: IFFALSE 31614
// points := [ 40 , 1 , 1 ] ;
31595: LD_ADDR_VAR 0 9
31599: PUSH
31600: LD_INT 40
31602: PUSH
31603: LD_INT 1
31605: PUSH
31606: LD_INT 1
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: LIST
31613: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31614: LD_VAR 0 6
31618: PPUSH
31619: CALL_OW 264
31623: PUSH
31624: LD_INT 29
31626: PUSH
31627: EMPTY
31628: LIST
31629: IN
31630: IFFALSE 31651
// points := [ 70 , 200 , 400 ] ;
31632: LD_ADDR_VAR 0 9
31636: PUSH
31637: LD_INT 70
31639: PUSH
31640: LD_INT 200
31642: PUSH
31643: LD_INT 400
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: LIST
31650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31651: LD_VAR 0 6
31655: PPUSH
31656: CALL_OW 264
31660: PUSH
31661: LD_INT 14
31663: PUSH
31664: LD_INT 53
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: IN
31671: IFFALSE 31692
// points := [ 40 , 10 , 20 ] ;
31673: LD_ADDR_VAR 0 9
31677: PUSH
31678: LD_INT 40
31680: PUSH
31681: LD_INT 10
31683: PUSH
31684: LD_INT 20
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31692: LD_VAR 0 6
31696: PPUSH
31697: CALL_OW 264
31701: PUSH
31702: LD_INT 9
31704: PUSH
31705: EMPTY
31706: LIST
31707: IN
31708: IFFALSE 31729
// points := [ 5 , 70 , 20 ] ;
31710: LD_ADDR_VAR 0 9
31714: PUSH
31715: LD_INT 5
31717: PUSH
31718: LD_INT 70
31720: PUSH
31721: LD_INT 20
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: LIST
31728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31729: LD_VAR 0 6
31733: PPUSH
31734: CALL_OW 264
31738: PUSH
31739: LD_INT 10
31741: PUSH
31742: EMPTY
31743: LIST
31744: IN
31745: IFFALSE 31766
// points := [ 35 , 110 , 70 ] ;
31747: LD_ADDR_VAR 0 9
31751: PUSH
31752: LD_INT 35
31754: PUSH
31755: LD_INT 110
31757: PUSH
31758: LD_INT 70
31760: PUSH
31761: EMPTY
31762: LIST
31763: LIST
31764: LIST
31765: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31766: LD_VAR 0 6
31770: PPUSH
31771: CALL_OW 265
31775: PUSH
31776: LD_INT 25
31778: EQUAL
31779: IFFALSE 31800
// points := [ 80 , 65 , 100 ] ;
31781: LD_ADDR_VAR 0 9
31785: PUSH
31786: LD_INT 80
31788: PUSH
31789: LD_INT 65
31791: PUSH
31792: LD_INT 100
31794: PUSH
31795: EMPTY
31796: LIST
31797: LIST
31798: LIST
31799: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31800: LD_VAR 0 6
31804: PPUSH
31805: CALL_OW 263
31809: PUSH
31810: LD_INT 1
31812: EQUAL
31813: IFFALSE 31848
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31815: LD_ADDR_VAR 0 10
31819: PUSH
31820: LD_VAR 0 10
31824: PUSH
31825: LD_VAR 0 6
31829: PPUSH
31830: CALL_OW 311
31834: PPUSH
31835: LD_INT 3
31837: PPUSH
31838: CALL_OW 259
31842: PUSH
31843: LD_INT 4
31845: MUL
31846: MUL
31847: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31848: LD_VAR 0 6
31852: PPUSH
31853: CALL_OW 263
31857: PUSH
31858: LD_INT 2
31860: EQUAL
31861: IFFALSE 31912
// begin j := IsControledBy ( i ) ;
31863: LD_ADDR_VAR 0 7
31867: PUSH
31868: LD_VAR 0 6
31872: PPUSH
31873: CALL_OW 312
31877: ST_TO_ADDR
// if j then
31878: LD_VAR 0 7
31882: IFFALSE 31912
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31884: LD_ADDR_VAR 0 10
31888: PUSH
31889: LD_VAR 0 10
31893: PUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: LD_INT 3
31901: PPUSH
31902: CALL_OW 259
31906: PUSH
31907: LD_INT 3
31909: MUL
31910: MUL
31911: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31912: LD_VAR 0 6
31916: PPUSH
31917: CALL_OW 264
31921: PUSH
31922: LD_INT 5
31924: PUSH
31925: LD_INT 6
31927: PUSH
31928: LD_INT 46
31930: PUSH
31931: LD_INT 44
31933: PUSH
31934: LD_INT 47
31936: PUSH
31937: LD_INT 45
31939: PUSH
31940: LD_INT 28
31942: PUSH
31943: LD_INT 7
31945: PUSH
31946: LD_INT 27
31948: PUSH
31949: LD_INT 29
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: IN
31964: PUSH
31965: LD_VAR 0 1
31969: PPUSH
31970: LD_INT 52
31972: PPUSH
31973: CALL_OW 321
31977: PUSH
31978: LD_INT 2
31980: EQUAL
31981: AND
31982: IFFALSE 31999
// bpoints := bpoints * 1.2 ;
31984: LD_ADDR_VAR 0 10
31988: PUSH
31989: LD_VAR 0 10
31993: PUSH
31994: LD_REAL  1.20000000000000E+0000
31997: MUL
31998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31999: LD_VAR 0 6
32003: PPUSH
32004: CALL_OW 264
32008: PUSH
32009: LD_INT 6
32011: PUSH
32012: LD_INT 46
32014: PUSH
32015: LD_INT 47
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: LIST
32022: IN
32023: IFFALSE 32040
// bpoints := bpoints * 1.2 ;
32025: LD_ADDR_VAR 0 10
32029: PUSH
32030: LD_VAR 0 10
32034: PUSH
32035: LD_REAL  1.20000000000000E+0000
32038: MUL
32039: ST_TO_ADDR
// end ; unit_building :
32040: GO 32054
32042: LD_INT 3
32044: DOUBLE
32045: EQUAL
32046: IFTRUE 32050
32048: GO 32053
32050: POP
// ; end ;
32051: GO 32054
32053: POP
// for j = 1 to 3 do
32054: LD_ADDR_VAR 0 7
32058: PUSH
32059: DOUBLE
32060: LD_INT 1
32062: DEC
32063: ST_TO_ADDR
32064: LD_INT 3
32066: PUSH
32067: FOR_TO
32068: IFFALSE 32121
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32070: LD_ADDR_VAR 0 5
32074: PUSH
32075: LD_VAR 0 5
32079: PPUSH
32080: LD_VAR 0 7
32084: PPUSH
32085: LD_VAR 0 5
32089: PUSH
32090: LD_VAR 0 7
32094: ARRAY
32095: PUSH
32096: LD_VAR 0 9
32100: PUSH
32101: LD_VAR 0 7
32105: ARRAY
32106: PUSH
32107: LD_VAR 0 10
32111: MUL
32112: PLUS
32113: PPUSH
32114: CALL_OW 1
32118: ST_TO_ADDR
32119: GO 32067
32121: POP
32122: POP
// end ;
32123: GO 30600
32125: POP
32126: POP
// result := Replace ( result , 4 , tmp ) ;
32127: LD_ADDR_VAR 0 5
32131: PUSH
32132: LD_VAR 0 5
32136: PPUSH
32137: LD_INT 4
32139: PPUSH
32140: LD_VAR 0 8
32144: PPUSH
32145: CALL_OW 1
32149: ST_TO_ADDR
// end ;
32150: LD_VAR 0 5
32154: RET
// export function DangerAtRange ( unit , range ) ; begin
32155: LD_INT 0
32157: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32158: LD_ADDR_VAR 0 3
32162: PUSH
32163: LD_VAR 0 1
32167: PPUSH
32168: CALL_OW 255
32172: PPUSH
32173: LD_VAR 0 1
32177: PPUSH
32178: CALL_OW 250
32182: PPUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: CALL_OW 251
32192: PPUSH
32193: LD_VAR 0 2
32197: PPUSH
32198: CALL 30452 0 4
32202: ST_TO_ADDR
// end ;
32203: LD_VAR 0 3
32207: RET
// export function DangerInArea ( side , area ) ; begin
32208: LD_INT 0
32210: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32211: LD_ADDR_VAR 0 3
32215: PUSH
32216: LD_VAR 0 2
32220: PPUSH
32221: LD_INT 81
32223: PUSH
32224: LD_VAR 0 1
32228: PUSH
32229: EMPTY
32230: LIST
32231: LIST
32232: PPUSH
32233: CALL_OW 70
32237: ST_TO_ADDR
// end ;
32238: LD_VAR 0 3
32242: RET
// export function IsExtension ( b ) ; begin
32243: LD_INT 0
32245: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32246: LD_ADDR_VAR 0 2
32250: PUSH
32251: LD_VAR 0 1
32255: PUSH
32256: LD_INT 23
32258: PUSH
32259: LD_INT 20
32261: PUSH
32262: LD_INT 22
32264: PUSH
32265: LD_INT 17
32267: PUSH
32268: LD_INT 24
32270: PUSH
32271: LD_INT 21
32273: PUSH
32274: LD_INT 19
32276: PUSH
32277: LD_INT 16
32279: PUSH
32280: LD_INT 25
32282: PUSH
32283: LD_INT 18
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: IN
32298: ST_TO_ADDR
// end ;
32299: LD_VAR 0 2
32303: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32304: LD_INT 0
32306: PPUSH
32307: PPUSH
32308: PPUSH
// result := [ ] ;
32309: LD_ADDR_VAR 0 4
32313: PUSH
32314: EMPTY
32315: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32316: LD_ADDR_VAR 0 5
32320: PUSH
32321: LD_VAR 0 2
32325: PPUSH
32326: LD_INT 21
32328: PUSH
32329: LD_INT 3
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PPUSH
32336: CALL_OW 70
32340: ST_TO_ADDR
// if not tmp then
32341: LD_VAR 0 5
32345: NOT
32346: IFFALSE 32350
// exit ;
32348: GO 32414
// if checkLink then
32350: LD_VAR 0 3
32354: IFFALSE 32404
// begin for i in tmp do
32356: LD_ADDR_VAR 0 6
32360: PUSH
32361: LD_VAR 0 5
32365: PUSH
32366: FOR_IN
32367: IFFALSE 32402
// if GetBase ( i ) <> base then
32369: LD_VAR 0 6
32373: PPUSH
32374: CALL_OW 274
32378: PUSH
32379: LD_VAR 0 1
32383: NONEQUAL
32384: IFFALSE 32400
// ComLinkToBase ( base , i ) ;
32386: LD_VAR 0 1
32390: PPUSH
32391: LD_VAR 0 6
32395: PPUSH
32396: CALL_OW 169
32400: GO 32366
32402: POP
32403: POP
// end ; result := tmp ;
32404: LD_ADDR_VAR 0 4
32408: PUSH
32409: LD_VAR 0 5
32413: ST_TO_ADDR
// end ;
32414: LD_VAR 0 4
32418: RET
// export function ComComplete ( units , b ) ; var i ; begin
32419: LD_INT 0
32421: PPUSH
32422: PPUSH
// if not units then
32423: LD_VAR 0 1
32427: NOT
32428: IFFALSE 32432
// exit ;
32430: GO 32522
// for i in units do
32432: LD_ADDR_VAR 0 4
32436: PUSH
32437: LD_VAR 0 1
32441: PUSH
32442: FOR_IN
32443: IFFALSE 32520
// if BuildingStatus ( b ) = bs_build then
32445: LD_VAR 0 2
32449: PPUSH
32450: CALL_OW 461
32454: PUSH
32455: LD_INT 1
32457: EQUAL
32458: IFFALSE 32518
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32460: LD_VAR 0 4
32464: PPUSH
32465: LD_STRING h
32467: PUSH
32468: LD_VAR 0 2
32472: PPUSH
32473: CALL_OW 250
32477: PUSH
32478: LD_VAR 0 2
32482: PPUSH
32483: CALL_OW 251
32487: PUSH
32488: LD_VAR 0 2
32492: PUSH
32493: LD_INT 0
32495: PUSH
32496: LD_INT 0
32498: PUSH
32499: LD_INT 0
32501: PUSH
32502: EMPTY
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: PUSH
32511: EMPTY
32512: LIST
32513: PPUSH
32514: CALL_OW 446
32518: GO 32442
32520: POP
32521: POP
// end ;
32522: LD_VAR 0 3
32526: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32527: LD_INT 0
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32535: LD_VAR 0 1
32539: NOT
32540: PUSH
32541: LD_VAR 0 1
32545: PPUSH
32546: CALL_OW 263
32550: PUSH
32551: LD_INT 2
32553: NONEQUAL
32554: OR
32555: IFFALSE 32559
// exit ;
32557: GO 32875
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32559: LD_ADDR_VAR 0 6
32563: PUSH
32564: LD_INT 22
32566: PUSH
32567: LD_VAR 0 1
32571: PPUSH
32572: CALL_OW 255
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 2
32583: PUSH
32584: LD_INT 30
32586: PUSH
32587: LD_INT 36
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: LD_INT 34
32596: PUSH
32597: LD_INT 31
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: LIST
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PPUSH
32613: CALL_OW 69
32617: ST_TO_ADDR
// if not tmp then
32618: LD_VAR 0 6
32622: NOT
32623: IFFALSE 32627
// exit ;
32625: GO 32875
// result := [ ] ;
32627: LD_ADDR_VAR 0 2
32631: PUSH
32632: EMPTY
32633: ST_TO_ADDR
// for i in tmp do
32634: LD_ADDR_VAR 0 3
32638: PUSH
32639: LD_VAR 0 6
32643: PUSH
32644: FOR_IN
32645: IFFALSE 32716
// begin t := UnitsInside ( i ) ;
32647: LD_ADDR_VAR 0 4
32651: PUSH
32652: LD_VAR 0 3
32656: PPUSH
32657: CALL_OW 313
32661: ST_TO_ADDR
// if t then
32662: LD_VAR 0 4
32666: IFFALSE 32714
// for j in t do
32668: LD_ADDR_VAR 0 7
32672: PUSH
32673: LD_VAR 0 4
32677: PUSH
32678: FOR_IN
32679: IFFALSE 32712
// result := Replace ( result , result + 1 , j ) ;
32681: LD_ADDR_VAR 0 2
32685: PUSH
32686: LD_VAR 0 2
32690: PPUSH
32691: LD_VAR 0 2
32695: PUSH
32696: LD_INT 1
32698: PLUS
32699: PPUSH
32700: LD_VAR 0 7
32704: PPUSH
32705: CALL_OW 1
32709: ST_TO_ADDR
32710: GO 32678
32712: POP
32713: POP
// end ;
32714: GO 32644
32716: POP
32717: POP
// if not result then
32718: LD_VAR 0 2
32722: NOT
32723: IFFALSE 32727
// exit ;
32725: GO 32875
// mech := result [ 1 ] ;
32727: LD_ADDR_VAR 0 5
32731: PUSH
32732: LD_VAR 0 2
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: ST_TO_ADDR
// if result > 1 then
32741: LD_VAR 0 2
32745: PUSH
32746: LD_INT 1
32748: GREATER
32749: IFFALSE 32861
// begin for i = 2 to result do
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: DOUBLE
32757: LD_INT 2
32759: DEC
32760: ST_TO_ADDR
32761: LD_VAR 0 2
32765: PUSH
32766: FOR_TO
32767: IFFALSE 32859
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32769: LD_ADDR_VAR 0 4
32773: PUSH
32774: LD_VAR 0 2
32778: PUSH
32779: LD_VAR 0 3
32783: ARRAY
32784: PPUSH
32785: LD_INT 3
32787: PPUSH
32788: CALL_OW 259
32792: PUSH
32793: LD_VAR 0 2
32797: PUSH
32798: LD_VAR 0 3
32802: ARRAY
32803: PPUSH
32804: CALL_OW 432
32808: MINUS
32809: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32810: LD_VAR 0 4
32814: PUSH
32815: LD_VAR 0 5
32819: PPUSH
32820: LD_INT 3
32822: PPUSH
32823: CALL_OW 259
32827: PUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: CALL_OW 432
32837: MINUS
32838: GREATEREQUAL
32839: IFFALSE 32857
// mech := result [ i ] ;
32841: LD_ADDR_VAR 0 5
32845: PUSH
32846: LD_VAR 0 2
32850: PUSH
32851: LD_VAR 0 3
32855: ARRAY
32856: ST_TO_ADDR
// end ;
32857: GO 32766
32859: POP
32860: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32861: LD_VAR 0 1
32865: PPUSH
32866: LD_VAR 0 5
32870: PPUSH
32871: CALL_OW 135
// end ;
32875: LD_VAR 0 2
32879: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32880: LD_INT 0
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
32887: PPUSH
32888: PPUSH
32889: PPUSH
32890: PPUSH
32891: PPUSH
32892: PPUSH
32893: PPUSH
32894: PPUSH
// result := [ ] ;
32895: LD_ADDR_VAR 0 7
32899: PUSH
32900: EMPTY
32901: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32902: LD_VAR 0 1
32906: PPUSH
32907: CALL_OW 266
32911: PUSH
32912: LD_INT 0
32914: PUSH
32915: LD_INT 1
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: IN
32922: NOT
32923: IFFALSE 32927
// exit ;
32925: GO 34561
// if name then
32927: LD_VAR 0 3
32931: IFFALSE 32947
// SetBName ( base_dep , name ) ;
32933: LD_VAR 0 1
32937: PPUSH
32938: LD_VAR 0 3
32942: PPUSH
32943: CALL_OW 500
// base := GetBase ( base_dep ) ;
32947: LD_ADDR_VAR 0 15
32951: PUSH
32952: LD_VAR 0 1
32956: PPUSH
32957: CALL_OW 274
32961: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32962: LD_ADDR_VAR 0 16
32966: PUSH
32967: LD_VAR 0 1
32971: PPUSH
32972: CALL_OW 255
32976: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32977: LD_ADDR_VAR 0 17
32981: PUSH
32982: LD_VAR 0 1
32986: PPUSH
32987: CALL_OW 248
32991: ST_TO_ADDR
// if sources then
32992: LD_VAR 0 5
32996: IFFALSE 33043
// for i = 1 to 3 do
32998: LD_ADDR_VAR 0 8
33002: PUSH
33003: DOUBLE
33004: LD_INT 1
33006: DEC
33007: ST_TO_ADDR
33008: LD_INT 3
33010: PUSH
33011: FOR_TO
33012: IFFALSE 33041
// AddResourceType ( base , i , sources [ i ] ) ;
33014: LD_VAR 0 15
33018: PPUSH
33019: LD_VAR 0 8
33023: PPUSH
33024: LD_VAR 0 5
33028: PUSH
33029: LD_VAR 0 8
33033: ARRAY
33034: PPUSH
33035: CALL_OW 276
33039: GO 33011
33041: POP
33042: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33043: LD_ADDR_VAR 0 18
33047: PUSH
33048: LD_VAR 0 15
33052: PPUSH
33053: LD_VAR 0 2
33057: PPUSH
33058: LD_INT 1
33060: PPUSH
33061: CALL 32304 0 3
33065: ST_TO_ADDR
// InitHc ;
33066: CALL_OW 19
// InitUc ;
33070: CALL_OW 18
// uc_side := side ;
33074: LD_ADDR_OWVAR 20
33078: PUSH
33079: LD_VAR 0 16
33083: ST_TO_ADDR
// uc_nation := nation ;
33084: LD_ADDR_OWVAR 21
33088: PUSH
33089: LD_VAR 0 17
33093: ST_TO_ADDR
// if buildings then
33094: LD_VAR 0 18
33098: IFFALSE 34420
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33100: LD_ADDR_VAR 0 19
33104: PUSH
33105: LD_VAR 0 18
33109: PPUSH
33110: LD_INT 2
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: LD_INT 29
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 30
33125: PUSH
33126: LD_INT 30
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: EMPTY
33134: LIST
33135: LIST
33136: LIST
33137: PPUSH
33138: CALL_OW 72
33142: ST_TO_ADDR
// if tmp then
33143: LD_VAR 0 19
33147: IFFALSE 33195
// for i in tmp do
33149: LD_ADDR_VAR 0 8
33153: PUSH
33154: LD_VAR 0 19
33158: PUSH
33159: FOR_IN
33160: IFFALSE 33193
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33162: LD_VAR 0 8
33166: PPUSH
33167: CALL_OW 250
33171: PPUSH
33172: LD_VAR 0 8
33176: PPUSH
33177: CALL_OW 251
33181: PPUSH
33182: LD_VAR 0 16
33186: PPUSH
33187: CALL_OW 441
33191: GO 33159
33193: POP
33194: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33195: LD_VAR 0 18
33199: PPUSH
33200: LD_INT 2
33202: PUSH
33203: LD_INT 30
33205: PUSH
33206: LD_INT 32
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: PUSH
33213: LD_INT 30
33215: PUSH
33216: LD_INT 33
33218: PUSH
33219: EMPTY
33220: LIST
33221: LIST
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: LIST
33227: PPUSH
33228: CALL_OW 72
33232: IFFALSE 33320
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33234: LD_ADDR_VAR 0 8
33238: PUSH
33239: LD_VAR 0 18
33243: PPUSH
33244: LD_INT 2
33246: PUSH
33247: LD_INT 30
33249: PUSH
33250: LD_INT 32
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 30
33259: PUSH
33260: LD_INT 33
33262: PUSH
33263: EMPTY
33264: LIST
33265: LIST
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: LIST
33271: PPUSH
33272: CALL_OW 72
33276: PUSH
33277: FOR_IN
33278: IFFALSE 33318
// begin if not GetBWeapon ( i ) then
33280: LD_VAR 0 8
33284: PPUSH
33285: CALL_OW 269
33289: NOT
33290: IFFALSE 33316
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33292: LD_VAR 0 8
33296: PPUSH
33297: LD_VAR 0 8
33301: PPUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: CALL 34566 0 2
33311: PPUSH
33312: CALL_OW 431
// end ;
33316: GO 33277
33318: POP
33319: POP
// end ; for i = 1 to personel do
33320: LD_ADDR_VAR 0 8
33324: PUSH
33325: DOUBLE
33326: LD_INT 1
33328: DEC
33329: ST_TO_ADDR
33330: LD_VAR 0 6
33334: PUSH
33335: FOR_TO
33336: IFFALSE 34400
// begin if i > 4 then
33338: LD_VAR 0 8
33342: PUSH
33343: LD_INT 4
33345: GREATER
33346: IFFALSE 33350
// break ;
33348: GO 34400
// case i of 1 :
33350: LD_VAR 0 8
33354: PUSH
33355: LD_INT 1
33357: DOUBLE
33358: EQUAL
33359: IFTRUE 33363
33361: GO 33443
33363: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33364: LD_ADDR_VAR 0 12
33368: PUSH
33369: LD_VAR 0 18
33373: PPUSH
33374: LD_INT 22
33376: PUSH
33377: LD_VAR 0 16
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 58
33388: PUSH
33389: EMPTY
33390: LIST
33391: PUSH
33392: LD_INT 2
33394: PUSH
33395: LD_INT 30
33397: PUSH
33398: LD_INT 32
33400: PUSH
33401: EMPTY
33402: LIST
33403: LIST
33404: PUSH
33405: LD_INT 30
33407: PUSH
33408: LD_INT 4
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 30
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: EMPTY
33422: LIST
33423: LIST
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: LIST
33429: LIST
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: LIST
33435: PPUSH
33436: CALL_OW 72
33440: ST_TO_ADDR
33441: GO 33665
33443: LD_INT 2
33445: DOUBLE
33446: EQUAL
33447: IFTRUE 33451
33449: GO 33513
33451: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33452: LD_ADDR_VAR 0 12
33456: PUSH
33457: LD_VAR 0 18
33461: PPUSH
33462: LD_INT 22
33464: PUSH
33465: LD_VAR 0 16
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: PUSH
33474: LD_INT 2
33476: PUSH
33477: LD_INT 30
33479: PUSH
33480: LD_INT 0
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 30
33489: PUSH
33490: LD_INT 1
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: PUSH
33502: EMPTY
33503: LIST
33504: LIST
33505: PPUSH
33506: CALL_OW 72
33510: ST_TO_ADDR
33511: GO 33665
33513: LD_INT 3
33515: DOUBLE
33516: EQUAL
33517: IFTRUE 33521
33519: GO 33583
33521: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33522: LD_ADDR_VAR 0 12
33526: PUSH
33527: LD_VAR 0 18
33531: PPUSH
33532: LD_INT 22
33534: PUSH
33535: LD_VAR 0 16
33539: PUSH
33540: EMPTY
33541: LIST
33542: LIST
33543: PUSH
33544: LD_INT 2
33546: PUSH
33547: LD_INT 30
33549: PUSH
33550: LD_INT 2
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: LD_INT 30
33559: PUSH
33560: LD_INT 3
33562: PUSH
33563: EMPTY
33564: LIST
33565: LIST
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PPUSH
33576: CALL_OW 72
33580: ST_TO_ADDR
33581: GO 33665
33583: LD_INT 4
33585: DOUBLE
33586: EQUAL
33587: IFTRUE 33591
33589: GO 33664
33591: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33592: LD_ADDR_VAR 0 12
33596: PUSH
33597: LD_VAR 0 18
33601: PPUSH
33602: LD_INT 22
33604: PUSH
33605: LD_VAR 0 16
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: LD_INT 30
33619: PUSH
33620: LD_INT 6
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 30
33629: PUSH
33630: LD_INT 7
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 30
33639: PUSH
33640: LD_INT 8
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: EMPTY
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PPUSH
33657: CALL_OW 72
33661: ST_TO_ADDR
33662: GO 33665
33664: POP
// if i = 1 then
33665: LD_VAR 0 8
33669: PUSH
33670: LD_INT 1
33672: EQUAL
33673: IFFALSE 33784
// begin tmp := [ ] ;
33675: LD_ADDR_VAR 0 19
33679: PUSH
33680: EMPTY
33681: ST_TO_ADDR
// for j in f do
33682: LD_ADDR_VAR 0 9
33686: PUSH
33687: LD_VAR 0 12
33691: PUSH
33692: FOR_IN
33693: IFFALSE 33766
// if GetBType ( j ) = b_bunker then
33695: LD_VAR 0 9
33699: PPUSH
33700: CALL_OW 266
33704: PUSH
33705: LD_INT 32
33707: EQUAL
33708: IFFALSE 33735
// tmp := Insert ( tmp , 1 , j ) else
33710: LD_ADDR_VAR 0 19
33714: PUSH
33715: LD_VAR 0 19
33719: PPUSH
33720: LD_INT 1
33722: PPUSH
33723: LD_VAR 0 9
33727: PPUSH
33728: CALL_OW 2
33732: ST_TO_ADDR
33733: GO 33764
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33735: LD_ADDR_VAR 0 19
33739: PUSH
33740: LD_VAR 0 19
33744: PPUSH
33745: LD_VAR 0 19
33749: PUSH
33750: LD_INT 1
33752: PLUS
33753: PPUSH
33754: LD_VAR 0 9
33758: PPUSH
33759: CALL_OW 2
33763: ST_TO_ADDR
33764: GO 33692
33766: POP
33767: POP
// if tmp then
33768: LD_VAR 0 19
33772: IFFALSE 33784
// f := tmp ;
33774: LD_ADDR_VAR 0 12
33778: PUSH
33779: LD_VAR 0 19
33783: ST_TO_ADDR
// end ; x := personel [ i ] ;
33784: LD_ADDR_VAR 0 13
33788: PUSH
33789: LD_VAR 0 6
33793: PUSH
33794: LD_VAR 0 8
33798: ARRAY
33799: ST_TO_ADDR
// if x = - 1 then
33800: LD_VAR 0 13
33804: PUSH
33805: LD_INT 1
33807: NEG
33808: EQUAL
33809: IFFALSE 34018
// begin for j in f do
33811: LD_ADDR_VAR 0 9
33815: PUSH
33816: LD_VAR 0 12
33820: PUSH
33821: FOR_IN
33822: IFFALSE 34014
// repeat InitHc ;
33824: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33828: LD_VAR 0 9
33832: PPUSH
33833: CALL_OW 266
33837: PUSH
33838: LD_INT 5
33840: EQUAL
33841: IFFALSE 33911
// begin if UnitsInside ( j ) < 3 then
33843: LD_VAR 0 9
33847: PPUSH
33848: CALL_OW 313
33852: PUSH
33853: LD_INT 3
33855: LESS
33856: IFFALSE 33892
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33858: LD_INT 0
33860: PPUSH
33861: LD_INT 5
33863: PUSH
33864: LD_INT 8
33866: PUSH
33867: LD_INT 9
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: LIST
33874: PUSH
33875: LD_VAR 0 17
33879: ARRAY
33880: PPUSH
33881: LD_VAR 0 4
33885: PPUSH
33886: CALL_OW 380
33890: GO 33909
// PrepareHuman ( false , i , skill ) ;
33892: LD_INT 0
33894: PPUSH
33895: LD_VAR 0 8
33899: PPUSH
33900: LD_VAR 0 4
33904: PPUSH
33905: CALL_OW 380
// end else
33909: GO 33928
// PrepareHuman ( false , i , skill ) ;
33911: LD_INT 0
33913: PPUSH
33914: LD_VAR 0 8
33918: PPUSH
33919: LD_VAR 0 4
33923: PPUSH
33924: CALL_OW 380
// un := CreateHuman ;
33928: LD_ADDR_VAR 0 14
33932: PUSH
33933: CALL_OW 44
33937: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33938: LD_ADDR_VAR 0 7
33942: PUSH
33943: LD_VAR 0 7
33947: PPUSH
33948: LD_INT 1
33950: PPUSH
33951: LD_VAR 0 14
33955: PPUSH
33956: CALL_OW 2
33960: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33961: LD_VAR 0 14
33965: PPUSH
33966: LD_VAR 0 9
33970: PPUSH
33971: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33975: LD_VAR 0 9
33979: PPUSH
33980: CALL_OW 313
33984: PUSH
33985: LD_INT 6
33987: EQUAL
33988: PUSH
33989: LD_VAR 0 9
33993: PPUSH
33994: CALL_OW 266
33998: PUSH
33999: LD_INT 32
34001: PUSH
34002: LD_INT 31
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: IN
34009: OR
34010: IFFALSE 33824
34012: GO 33821
34014: POP
34015: POP
// end else
34016: GO 34398
// for j = 1 to x do
34018: LD_ADDR_VAR 0 9
34022: PUSH
34023: DOUBLE
34024: LD_INT 1
34026: DEC
34027: ST_TO_ADDR
34028: LD_VAR 0 13
34032: PUSH
34033: FOR_TO
34034: IFFALSE 34396
// begin InitHc ;
34036: CALL_OW 19
// if not f then
34040: LD_VAR 0 12
34044: NOT
34045: IFFALSE 34134
// begin PrepareHuman ( false , i , skill ) ;
34047: LD_INT 0
34049: PPUSH
34050: LD_VAR 0 8
34054: PPUSH
34055: LD_VAR 0 4
34059: PPUSH
34060: CALL_OW 380
// un := CreateHuman ;
34064: LD_ADDR_VAR 0 14
34068: PUSH
34069: CALL_OW 44
34073: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34074: LD_ADDR_VAR 0 7
34078: PUSH
34079: LD_VAR 0 7
34083: PPUSH
34084: LD_INT 1
34086: PPUSH
34087: LD_VAR 0 14
34091: PPUSH
34092: CALL_OW 2
34096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34097: LD_VAR 0 14
34101: PPUSH
34102: LD_VAR 0 1
34106: PPUSH
34107: CALL_OW 250
34111: PPUSH
34112: LD_VAR 0 1
34116: PPUSH
34117: CALL_OW 251
34121: PPUSH
34122: LD_INT 10
34124: PPUSH
34125: LD_INT 0
34127: PPUSH
34128: CALL_OW 50
// continue ;
34132: GO 34033
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34134: LD_VAR 0 12
34138: PUSH
34139: LD_INT 1
34141: ARRAY
34142: PPUSH
34143: CALL_OW 313
34147: PUSH
34148: LD_VAR 0 12
34152: PUSH
34153: LD_INT 1
34155: ARRAY
34156: PPUSH
34157: CALL_OW 266
34161: PUSH
34162: LD_INT 32
34164: PUSH
34165: LD_INT 31
34167: PUSH
34168: EMPTY
34169: LIST
34170: LIST
34171: IN
34172: AND
34173: PUSH
34174: LD_VAR 0 12
34178: PUSH
34179: LD_INT 1
34181: ARRAY
34182: PPUSH
34183: CALL_OW 313
34187: PUSH
34188: LD_INT 6
34190: EQUAL
34191: OR
34192: IFFALSE 34212
// f := Delete ( f , 1 ) ;
34194: LD_ADDR_VAR 0 12
34198: PUSH
34199: LD_VAR 0 12
34203: PPUSH
34204: LD_INT 1
34206: PPUSH
34207: CALL_OW 3
34211: ST_TO_ADDR
// if not f then
34212: LD_VAR 0 12
34216: NOT
34217: IFFALSE 34235
// begin x := x + 2 ;
34219: LD_ADDR_VAR 0 13
34223: PUSH
34224: LD_VAR 0 13
34228: PUSH
34229: LD_INT 2
34231: PLUS
34232: ST_TO_ADDR
// continue ;
34233: GO 34033
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34235: LD_VAR 0 12
34239: PUSH
34240: LD_INT 1
34242: ARRAY
34243: PPUSH
34244: CALL_OW 266
34248: PUSH
34249: LD_INT 5
34251: EQUAL
34252: IFFALSE 34326
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34254: LD_VAR 0 12
34258: PUSH
34259: LD_INT 1
34261: ARRAY
34262: PPUSH
34263: CALL_OW 313
34267: PUSH
34268: LD_INT 3
34270: LESS
34271: IFFALSE 34307
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34273: LD_INT 0
34275: PPUSH
34276: LD_INT 5
34278: PUSH
34279: LD_INT 8
34281: PUSH
34282: LD_INT 9
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: LIST
34289: PUSH
34290: LD_VAR 0 17
34294: ARRAY
34295: PPUSH
34296: LD_VAR 0 4
34300: PPUSH
34301: CALL_OW 380
34305: GO 34324
// PrepareHuman ( false , i , skill ) ;
34307: LD_INT 0
34309: PPUSH
34310: LD_VAR 0 8
34314: PPUSH
34315: LD_VAR 0 4
34319: PPUSH
34320: CALL_OW 380
// end else
34324: GO 34343
// PrepareHuman ( false , i , skill ) ;
34326: LD_INT 0
34328: PPUSH
34329: LD_VAR 0 8
34333: PPUSH
34334: LD_VAR 0 4
34338: PPUSH
34339: CALL_OW 380
// un := CreateHuman ;
34343: LD_ADDR_VAR 0 14
34347: PUSH
34348: CALL_OW 44
34352: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34353: LD_ADDR_VAR 0 7
34357: PUSH
34358: LD_VAR 0 7
34362: PPUSH
34363: LD_INT 1
34365: PPUSH
34366: LD_VAR 0 14
34370: PPUSH
34371: CALL_OW 2
34375: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34376: LD_VAR 0 14
34380: PPUSH
34381: LD_VAR 0 12
34385: PUSH
34386: LD_INT 1
34388: ARRAY
34389: PPUSH
34390: CALL_OW 52
// end ;
34394: GO 34033
34396: POP
34397: POP
// end ;
34398: GO 33335
34400: POP
34401: POP
// result := result ^ buildings ;
34402: LD_ADDR_VAR 0 7
34406: PUSH
34407: LD_VAR 0 7
34411: PUSH
34412: LD_VAR 0 18
34416: ADD
34417: ST_TO_ADDR
// end else
34418: GO 34561
// begin for i = 1 to personel do
34420: LD_ADDR_VAR 0 8
34424: PUSH
34425: DOUBLE
34426: LD_INT 1
34428: DEC
34429: ST_TO_ADDR
34430: LD_VAR 0 6
34434: PUSH
34435: FOR_TO
34436: IFFALSE 34559
// begin if i > 4 then
34438: LD_VAR 0 8
34442: PUSH
34443: LD_INT 4
34445: GREATER
34446: IFFALSE 34450
// break ;
34448: GO 34559
// x := personel [ i ] ;
34450: LD_ADDR_VAR 0 13
34454: PUSH
34455: LD_VAR 0 6
34459: PUSH
34460: LD_VAR 0 8
34464: ARRAY
34465: ST_TO_ADDR
// if x = - 1 then
34466: LD_VAR 0 13
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: EQUAL
34475: IFFALSE 34479
// continue ;
34477: GO 34435
// PrepareHuman ( false , i , skill ) ;
34479: LD_INT 0
34481: PPUSH
34482: LD_VAR 0 8
34486: PPUSH
34487: LD_VAR 0 4
34491: PPUSH
34492: CALL_OW 380
// un := CreateHuman ;
34496: LD_ADDR_VAR 0 14
34500: PUSH
34501: CALL_OW 44
34505: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34506: LD_VAR 0 14
34510: PPUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: CALL_OW 250
34520: PPUSH
34521: LD_VAR 0 1
34525: PPUSH
34526: CALL_OW 251
34530: PPUSH
34531: LD_INT 10
34533: PPUSH
34534: LD_INT 0
34536: PPUSH
34537: CALL_OW 50
// result := result ^ un ;
34541: LD_ADDR_VAR 0 7
34545: PUSH
34546: LD_VAR 0 7
34550: PUSH
34551: LD_VAR 0 14
34555: ADD
34556: ST_TO_ADDR
// end ;
34557: GO 34435
34559: POP
34560: POP
// end ; end ;
34561: LD_VAR 0 7
34565: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34566: LD_INT 0
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
34576: PPUSH
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
34581: PPUSH
34582: PPUSH
34583: PPUSH
// result := false ;
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_INT 0
34591: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34592: LD_VAR 0 1
34596: NOT
34597: PUSH
34598: LD_VAR 0 1
34602: PPUSH
34603: CALL_OW 266
34607: PUSH
34608: LD_INT 32
34610: PUSH
34611: LD_INT 33
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: IN
34618: NOT
34619: OR
34620: IFFALSE 34624
// exit ;
34622: GO 35733
// nat := GetNation ( tower ) ;
34624: LD_ADDR_VAR 0 12
34628: PUSH
34629: LD_VAR 0 1
34633: PPUSH
34634: CALL_OW 248
34638: ST_TO_ADDR
// side := GetSide ( tower ) ;
34639: LD_ADDR_VAR 0 16
34643: PUSH
34644: LD_VAR 0 1
34648: PPUSH
34649: CALL_OW 255
34653: ST_TO_ADDR
// x := GetX ( tower ) ;
34654: LD_ADDR_VAR 0 10
34658: PUSH
34659: LD_VAR 0 1
34663: PPUSH
34664: CALL_OW 250
34668: ST_TO_ADDR
// y := GetY ( tower ) ;
34669: LD_ADDR_VAR 0 11
34673: PUSH
34674: LD_VAR 0 1
34678: PPUSH
34679: CALL_OW 251
34683: ST_TO_ADDR
// if not x or not y then
34684: LD_VAR 0 10
34688: NOT
34689: PUSH
34690: LD_VAR 0 11
34694: NOT
34695: OR
34696: IFFALSE 34700
// exit ;
34698: GO 35733
// weapon := 0 ;
34700: LD_ADDR_VAR 0 18
34704: PUSH
34705: LD_INT 0
34707: ST_TO_ADDR
// fac_list := [ ] ;
34708: LD_ADDR_VAR 0 17
34712: PUSH
34713: EMPTY
34714: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34715: LD_ADDR_VAR 0 6
34719: PUSH
34720: LD_VAR 0 1
34724: PPUSH
34725: CALL_OW 274
34729: PPUSH
34730: LD_VAR 0 2
34734: PPUSH
34735: LD_INT 0
34737: PPUSH
34738: CALL 32304 0 3
34742: PPUSH
34743: LD_INT 30
34745: PUSH
34746: LD_INT 3
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PPUSH
34753: CALL_OW 72
34757: ST_TO_ADDR
// if not factories then
34758: LD_VAR 0 6
34762: NOT
34763: IFFALSE 34767
// exit ;
34765: GO 35733
// for i in factories do
34767: LD_ADDR_VAR 0 8
34771: PUSH
34772: LD_VAR 0 6
34776: PUSH
34777: FOR_IN
34778: IFFALSE 34803
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34780: LD_ADDR_VAR 0 17
34784: PUSH
34785: LD_VAR 0 17
34789: PUSH
34790: LD_VAR 0 8
34794: PPUSH
34795: CALL_OW 478
34799: UNION
34800: ST_TO_ADDR
34801: GO 34777
34803: POP
34804: POP
// if not fac_list then
34805: LD_VAR 0 17
34809: NOT
34810: IFFALSE 34814
// exit ;
34812: GO 35733
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34814: LD_ADDR_VAR 0 5
34818: PUSH
34819: LD_INT 4
34821: PUSH
34822: LD_INT 5
34824: PUSH
34825: LD_INT 9
34827: PUSH
34828: LD_INT 10
34830: PUSH
34831: LD_INT 6
34833: PUSH
34834: LD_INT 7
34836: PUSH
34837: LD_INT 11
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 27
34851: PUSH
34852: LD_INT 28
34854: PUSH
34855: LD_INT 26
34857: PUSH
34858: LD_INT 30
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 43
34869: PUSH
34870: LD_INT 44
34872: PUSH
34873: LD_INT 46
34875: PUSH
34876: LD_INT 45
34878: PUSH
34879: LD_INT 47
34881: PUSH
34882: LD_INT 49
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: LIST
34897: PUSH
34898: LD_VAR 0 12
34902: ARRAY
34903: ST_TO_ADDR
// list := list isect fac_list ;
34904: LD_ADDR_VAR 0 5
34908: PUSH
34909: LD_VAR 0 5
34913: PUSH
34914: LD_VAR 0 17
34918: ISECT
34919: ST_TO_ADDR
// if not list then
34920: LD_VAR 0 5
34924: NOT
34925: IFFALSE 34929
// exit ;
34927: GO 35733
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34929: LD_VAR 0 12
34933: PUSH
34934: LD_INT 3
34936: EQUAL
34937: PUSH
34938: LD_INT 49
34940: PUSH
34941: LD_VAR 0 5
34945: IN
34946: AND
34947: PUSH
34948: LD_INT 31
34950: PPUSH
34951: LD_VAR 0 16
34955: PPUSH
34956: CALL_OW 321
34960: PUSH
34961: LD_INT 2
34963: EQUAL
34964: AND
34965: IFFALSE 35025
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34967: LD_INT 22
34969: PUSH
34970: LD_VAR 0 16
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 35
34981: PUSH
34982: LD_INT 49
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 91
34991: PUSH
34992: LD_VAR 0 1
34996: PUSH
34997: LD_INT 10
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: LIST
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: PPUSH
35010: CALL_OW 69
35014: NOT
35015: IFFALSE 35025
// weapon := ru_time_lapser ;
35017: LD_ADDR_VAR 0 18
35021: PUSH
35022: LD_INT 49
35024: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35025: LD_VAR 0 12
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: IN
35040: PUSH
35041: LD_INT 11
35043: PUSH
35044: LD_VAR 0 5
35048: IN
35049: PUSH
35050: LD_INT 30
35052: PUSH
35053: LD_VAR 0 5
35057: IN
35058: OR
35059: AND
35060: PUSH
35061: LD_INT 6
35063: PPUSH
35064: LD_VAR 0 16
35068: PPUSH
35069: CALL_OW 321
35073: PUSH
35074: LD_INT 2
35076: EQUAL
35077: AND
35078: IFFALSE 35243
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35080: LD_INT 22
35082: PUSH
35083: LD_VAR 0 16
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: PUSH
35092: LD_INT 2
35094: PUSH
35095: LD_INT 35
35097: PUSH
35098: LD_INT 11
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: LD_INT 35
35107: PUSH
35108: LD_INT 30
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 91
35122: PUSH
35123: LD_VAR 0 1
35127: PUSH
35128: LD_INT 18
35130: PUSH
35131: EMPTY
35132: LIST
35133: LIST
35134: LIST
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: LIST
35140: PPUSH
35141: CALL_OW 69
35145: NOT
35146: PUSH
35147: LD_INT 22
35149: PUSH
35150: LD_VAR 0 16
35154: PUSH
35155: EMPTY
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 2
35161: PUSH
35162: LD_INT 30
35164: PUSH
35165: LD_INT 32
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 30
35174: PUSH
35175: LD_INT 33
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 91
35189: PUSH
35190: LD_VAR 0 1
35194: PUSH
35195: LD_INT 12
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: EMPTY
35209: LIST
35210: PPUSH
35211: CALL_OW 69
35215: PUSH
35216: LD_INT 2
35218: GREATER
35219: AND
35220: IFFALSE 35243
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35222: LD_ADDR_VAR 0 18
35226: PUSH
35227: LD_INT 11
35229: PUSH
35230: LD_INT 30
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_VAR 0 12
35241: ARRAY
35242: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35243: LD_VAR 0 18
35247: NOT
35248: PUSH
35249: LD_INT 40
35251: PPUSH
35252: LD_VAR 0 16
35256: PPUSH
35257: CALL_OW 321
35261: PUSH
35262: LD_INT 2
35264: EQUAL
35265: AND
35266: PUSH
35267: LD_INT 7
35269: PUSH
35270: LD_VAR 0 5
35274: IN
35275: PUSH
35276: LD_INT 28
35278: PUSH
35279: LD_VAR 0 5
35283: IN
35284: OR
35285: PUSH
35286: LD_INT 45
35288: PUSH
35289: LD_VAR 0 5
35293: IN
35294: OR
35295: AND
35296: IFFALSE 35550
// begin hex := GetHexInfo ( x , y ) ;
35298: LD_ADDR_VAR 0 4
35302: PUSH
35303: LD_VAR 0 10
35307: PPUSH
35308: LD_VAR 0 11
35312: PPUSH
35313: CALL_OW 546
35317: ST_TO_ADDR
// if hex [ 1 ] then
35318: LD_VAR 0 4
35322: PUSH
35323: LD_INT 1
35325: ARRAY
35326: IFFALSE 35330
// exit ;
35328: GO 35733
// height := hex [ 2 ] ;
35330: LD_ADDR_VAR 0 15
35334: PUSH
35335: LD_VAR 0 4
35339: PUSH
35340: LD_INT 2
35342: ARRAY
35343: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35344: LD_ADDR_VAR 0 14
35348: PUSH
35349: LD_INT 0
35351: PUSH
35352: LD_INT 2
35354: PUSH
35355: LD_INT 3
35357: PUSH
35358: LD_INT 5
35360: PUSH
35361: EMPTY
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: ST_TO_ADDR
// for i in tmp do
35367: LD_ADDR_VAR 0 8
35371: PUSH
35372: LD_VAR 0 14
35376: PUSH
35377: FOR_IN
35378: IFFALSE 35548
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35380: LD_ADDR_VAR 0 9
35384: PUSH
35385: LD_VAR 0 10
35389: PPUSH
35390: LD_VAR 0 8
35394: PPUSH
35395: LD_INT 5
35397: PPUSH
35398: CALL_OW 272
35402: PUSH
35403: LD_VAR 0 11
35407: PPUSH
35408: LD_VAR 0 8
35412: PPUSH
35413: LD_INT 5
35415: PPUSH
35416: CALL_OW 273
35420: PUSH
35421: EMPTY
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35425: LD_VAR 0 9
35429: PUSH
35430: LD_INT 1
35432: ARRAY
35433: PPUSH
35434: LD_VAR 0 9
35438: PUSH
35439: LD_INT 2
35441: ARRAY
35442: PPUSH
35443: CALL_OW 488
35447: IFFALSE 35546
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35449: LD_ADDR_VAR 0 4
35453: PUSH
35454: LD_VAR 0 9
35458: PUSH
35459: LD_INT 1
35461: ARRAY
35462: PPUSH
35463: LD_VAR 0 9
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: PPUSH
35472: CALL_OW 546
35476: ST_TO_ADDR
// if hex [ 1 ] then
35477: LD_VAR 0 4
35481: PUSH
35482: LD_INT 1
35484: ARRAY
35485: IFFALSE 35489
// continue ;
35487: GO 35377
// h := hex [ 2 ] ;
35489: LD_ADDR_VAR 0 13
35493: PUSH
35494: LD_VAR 0 4
35498: PUSH
35499: LD_INT 2
35501: ARRAY
35502: ST_TO_ADDR
// if h + 7 < height then
35503: LD_VAR 0 13
35507: PUSH
35508: LD_INT 7
35510: PLUS
35511: PUSH
35512: LD_VAR 0 15
35516: LESS
35517: IFFALSE 35546
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35519: LD_ADDR_VAR 0 18
35523: PUSH
35524: LD_INT 7
35526: PUSH
35527: LD_INT 28
35529: PUSH
35530: LD_INT 45
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: LIST
35537: PUSH
35538: LD_VAR 0 12
35542: ARRAY
35543: ST_TO_ADDR
// break ;
35544: GO 35548
// end ; end ; end ;
35546: GO 35377
35548: POP
35549: POP
// end ; if not weapon then
35550: LD_VAR 0 18
35554: NOT
35555: IFFALSE 35615
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35557: LD_ADDR_VAR 0 5
35561: PUSH
35562: LD_VAR 0 5
35566: PUSH
35567: LD_INT 11
35569: PUSH
35570: LD_INT 30
35572: PUSH
35573: LD_INT 49
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: LIST
35580: DIFF
35581: ST_TO_ADDR
// if not list then
35582: LD_VAR 0 5
35586: NOT
35587: IFFALSE 35591
// exit ;
35589: GO 35733
// weapon := list [ rand ( 1 , list ) ] ;
35591: LD_ADDR_VAR 0 18
35595: PUSH
35596: LD_VAR 0 5
35600: PUSH
35601: LD_INT 1
35603: PPUSH
35604: LD_VAR 0 5
35608: PPUSH
35609: CALL_OW 12
35613: ARRAY
35614: ST_TO_ADDR
// end ; if weapon then
35615: LD_VAR 0 18
35619: IFFALSE 35733
// begin tmp := CostOfWeapon ( weapon ) ;
35621: LD_ADDR_VAR 0 14
35625: PUSH
35626: LD_VAR 0 18
35630: PPUSH
35631: CALL_OW 451
35635: ST_TO_ADDR
// j := GetBase ( tower ) ;
35636: LD_ADDR_VAR 0 9
35640: PUSH
35641: LD_VAR 0 1
35645: PPUSH
35646: CALL_OW 274
35650: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35651: LD_VAR 0 9
35655: PPUSH
35656: LD_INT 1
35658: PPUSH
35659: CALL_OW 275
35663: PUSH
35664: LD_VAR 0 14
35668: PUSH
35669: LD_INT 1
35671: ARRAY
35672: GREATEREQUAL
35673: PUSH
35674: LD_VAR 0 9
35678: PPUSH
35679: LD_INT 2
35681: PPUSH
35682: CALL_OW 275
35686: PUSH
35687: LD_VAR 0 14
35691: PUSH
35692: LD_INT 2
35694: ARRAY
35695: GREATEREQUAL
35696: AND
35697: PUSH
35698: LD_VAR 0 9
35702: PPUSH
35703: LD_INT 3
35705: PPUSH
35706: CALL_OW 275
35710: PUSH
35711: LD_VAR 0 14
35715: PUSH
35716: LD_INT 3
35718: ARRAY
35719: GREATEREQUAL
35720: AND
35721: IFFALSE 35733
// result := weapon ;
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_VAR 0 18
35732: ST_TO_ADDR
// end ; end ;
35733: LD_VAR 0 3
35737: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35738: LD_INT 0
35740: PPUSH
35741: PPUSH
// result := true ;
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_INT 1
35749: ST_TO_ADDR
// if array1 = array2 then
35750: LD_VAR 0 1
35754: PUSH
35755: LD_VAR 0 2
35759: EQUAL
35760: IFFALSE 35820
// begin for i = 1 to array1 do
35762: LD_ADDR_VAR 0 4
35766: PUSH
35767: DOUBLE
35768: LD_INT 1
35770: DEC
35771: ST_TO_ADDR
35772: LD_VAR 0 1
35776: PUSH
35777: FOR_TO
35778: IFFALSE 35816
// if array1 [ i ] <> array2 [ i ] then
35780: LD_VAR 0 1
35784: PUSH
35785: LD_VAR 0 4
35789: ARRAY
35790: PUSH
35791: LD_VAR 0 2
35795: PUSH
35796: LD_VAR 0 4
35800: ARRAY
35801: NONEQUAL
35802: IFFALSE 35814
// begin result := false ;
35804: LD_ADDR_VAR 0 3
35808: PUSH
35809: LD_INT 0
35811: ST_TO_ADDR
// break ;
35812: GO 35816
// end ;
35814: GO 35777
35816: POP
35817: POP
// end else
35818: GO 35828
// result := false ;
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_INT 0
35827: ST_TO_ADDR
// end ;
35828: LD_VAR 0 3
35832: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35833: LD_INT 0
35835: PPUSH
35836: PPUSH
// if not array1 or not array2 then
35837: LD_VAR 0 1
35841: NOT
35842: PUSH
35843: LD_VAR 0 2
35847: NOT
35848: OR
35849: IFFALSE 35853
// exit ;
35851: GO 35917
// result := true ;
35853: LD_ADDR_VAR 0 3
35857: PUSH
35858: LD_INT 1
35860: ST_TO_ADDR
// for i = 1 to array1 do
35861: LD_ADDR_VAR 0 4
35865: PUSH
35866: DOUBLE
35867: LD_INT 1
35869: DEC
35870: ST_TO_ADDR
35871: LD_VAR 0 1
35875: PUSH
35876: FOR_TO
35877: IFFALSE 35915
// if array1 [ i ] <> array2 [ i ] then
35879: LD_VAR 0 1
35883: PUSH
35884: LD_VAR 0 4
35888: ARRAY
35889: PUSH
35890: LD_VAR 0 2
35894: PUSH
35895: LD_VAR 0 4
35899: ARRAY
35900: NONEQUAL
35901: IFFALSE 35913
// begin result := false ;
35903: LD_ADDR_VAR 0 3
35907: PUSH
35908: LD_INT 0
35910: ST_TO_ADDR
// break ;
35911: GO 35915
// end ;
35913: GO 35876
35915: POP
35916: POP
// end ;
35917: LD_VAR 0 3
35921: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35922: LD_INT 0
35924: PPUSH
35925: PPUSH
35926: PPUSH
// pom := GetBase ( fac ) ;
35927: LD_ADDR_VAR 0 5
35931: PUSH
35932: LD_VAR 0 1
35936: PPUSH
35937: CALL_OW 274
35941: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35942: LD_ADDR_VAR 0 4
35946: PUSH
35947: LD_VAR 0 2
35951: PUSH
35952: LD_INT 1
35954: ARRAY
35955: PPUSH
35956: LD_VAR 0 2
35960: PUSH
35961: LD_INT 2
35963: ARRAY
35964: PPUSH
35965: LD_VAR 0 2
35969: PUSH
35970: LD_INT 3
35972: ARRAY
35973: PPUSH
35974: LD_VAR 0 2
35978: PUSH
35979: LD_INT 4
35981: ARRAY
35982: PPUSH
35983: CALL_OW 449
35987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35988: LD_ADDR_VAR 0 3
35992: PUSH
35993: LD_VAR 0 5
35997: PPUSH
35998: LD_INT 1
36000: PPUSH
36001: CALL_OW 275
36005: PUSH
36006: LD_VAR 0 4
36010: PUSH
36011: LD_INT 1
36013: ARRAY
36014: GREATEREQUAL
36015: PUSH
36016: LD_VAR 0 5
36020: PPUSH
36021: LD_INT 2
36023: PPUSH
36024: CALL_OW 275
36028: PUSH
36029: LD_VAR 0 4
36033: PUSH
36034: LD_INT 2
36036: ARRAY
36037: GREATEREQUAL
36038: AND
36039: PUSH
36040: LD_VAR 0 5
36044: PPUSH
36045: LD_INT 3
36047: PPUSH
36048: CALL_OW 275
36052: PUSH
36053: LD_VAR 0 4
36057: PUSH
36058: LD_INT 3
36060: ARRAY
36061: GREATEREQUAL
36062: AND
36063: ST_TO_ADDR
// end ;
36064: LD_VAR 0 3
36068: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36069: LD_INT 0
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
// pom := GetBase ( building ) ;
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_VAR 0 1
36084: PPUSH
36085: CALL_OW 274
36089: ST_TO_ADDR
// if not pom then
36090: LD_VAR 0 3
36094: NOT
36095: IFFALSE 36099
// exit ;
36097: GO 36269
// btype := GetBType ( building ) ;
36099: LD_ADDR_VAR 0 5
36103: PUSH
36104: LD_VAR 0 1
36108: PPUSH
36109: CALL_OW 266
36113: ST_TO_ADDR
// if btype = b_armoury then
36114: LD_VAR 0 5
36118: PUSH
36119: LD_INT 4
36121: EQUAL
36122: IFFALSE 36132
// btype := b_barracks ;
36124: LD_ADDR_VAR 0 5
36128: PUSH
36129: LD_INT 5
36131: ST_TO_ADDR
// if btype = b_depot then
36132: LD_VAR 0 5
36136: PUSH
36137: LD_INT 0
36139: EQUAL
36140: IFFALSE 36150
// btype := b_warehouse ;
36142: LD_ADDR_VAR 0 5
36146: PUSH
36147: LD_INT 1
36149: ST_TO_ADDR
// if btype = b_workshop then
36150: LD_VAR 0 5
36154: PUSH
36155: LD_INT 2
36157: EQUAL
36158: IFFALSE 36168
// btype := b_factory ;
36160: LD_ADDR_VAR 0 5
36164: PUSH
36165: LD_INT 3
36167: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36168: LD_ADDR_VAR 0 4
36172: PUSH
36173: LD_VAR 0 5
36177: PPUSH
36178: LD_VAR 0 1
36182: PPUSH
36183: CALL_OW 248
36187: PPUSH
36188: CALL_OW 450
36192: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36193: LD_ADDR_VAR 0 2
36197: PUSH
36198: LD_VAR 0 3
36202: PPUSH
36203: LD_INT 1
36205: PPUSH
36206: CALL_OW 275
36210: PUSH
36211: LD_VAR 0 4
36215: PUSH
36216: LD_INT 1
36218: ARRAY
36219: GREATEREQUAL
36220: PUSH
36221: LD_VAR 0 3
36225: PPUSH
36226: LD_INT 2
36228: PPUSH
36229: CALL_OW 275
36233: PUSH
36234: LD_VAR 0 4
36238: PUSH
36239: LD_INT 2
36241: ARRAY
36242: GREATEREQUAL
36243: AND
36244: PUSH
36245: LD_VAR 0 3
36249: PPUSH
36250: LD_INT 3
36252: PPUSH
36253: CALL_OW 275
36257: PUSH
36258: LD_VAR 0 4
36262: PUSH
36263: LD_INT 3
36265: ARRAY
36266: GREATEREQUAL
36267: AND
36268: ST_TO_ADDR
// end ;
36269: LD_VAR 0 2
36273: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36274: LD_INT 0
36276: PPUSH
36277: PPUSH
36278: PPUSH
// pom := GetBase ( building ) ;
36279: LD_ADDR_VAR 0 4
36283: PUSH
36284: LD_VAR 0 1
36288: PPUSH
36289: CALL_OW 274
36293: ST_TO_ADDR
// if not pom then
36294: LD_VAR 0 4
36298: NOT
36299: IFFALSE 36303
// exit ;
36301: GO 36404
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36303: LD_ADDR_VAR 0 5
36307: PUSH
36308: LD_VAR 0 2
36312: PPUSH
36313: LD_VAR 0 1
36317: PPUSH
36318: CALL_OW 248
36322: PPUSH
36323: CALL_OW 450
36327: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36328: LD_ADDR_VAR 0 3
36332: PUSH
36333: LD_VAR 0 4
36337: PPUSH
36338: LD_INT 1
36340: PPUSH
36341: CALL_OW 275
36345: PUSH
36346: LD_VAR 0 5
36350: PUSH
36351: LD_INT 1
36353: ARRAY
36354: GREATEREQUAL
36355: PUSH
36356: LD_VAR 0 4
36360: PPUSH
36361: LD_INT 2
36363: PPUSH
36364: CALL_OW 275
36368: PUSH
36369: LD_VAR 0 5
36373: PUSH
36374: LD_INT 2
36376: ARRAY
36377: GREATEREQUAL
36378: AND
36379: PUSH
36380: LD_VAR 0 4
36384: PPUSH
36385: LD_INT 3
36387: PPUSH
36388: CALL_OW 275
36392: PUSH
36393: LD_VAR 0 5
36397: PUSH
36398: LD_INT 3
36400: ARRAY
36401: GREATEREQUAL
36402: AND
36403: ST_TO_ADDR
// end ;
36404: LD_VAR 0 3
36408: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36409: LD_INT 0
36411: PPUSH
36412: PPUSH
36413: PPUSH
36414: PPUSH
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
// result := false ;
36422: LD_ADDR_VAR 0 8
36426: PUSH
36427: LD_INT 0
36429: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36430: LD_VAR 0 5
36434: NOT
36435: PUSH
36436: LD_VAR 0 1
36440: NOT
36441: OR
36442: PUSH
36443: LD_VAR 0 2
36447: NOT
36448: OR
36449: PUSH
36450: LD_VAR 0 3
36454: NOT
36455: OR
36456: IFFALSE 36460
// exit ;
36458: GO 37274
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36460: LD_ADDR_VAR 0 14
36464: PUSH
36465: LD_VAR 0 1
36469: PPUSH
36470: LD_VAR 0 2
36474: PPUSH
36475: LD_VAR 0 3
36479: PPUSH
36480: LD_VAR 0 4
36484: PPUSH
36485: LD_VAR 0 5
36489: PUSH
36490: LD_INT 1
36492: ARRAY
36493: PPUSH
36494: CALL_OW 248
36498: PPUSH
36499: LD_INT 0
36501: PPUSH
36502: CALL 38511 0 6
36506: ST_TO_ADDR
// if not hexes then
36507: LD_VAR 0 14
36511: NOT
36512: IFFALSE 36516
// exit ;
36514: GO 37274
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36516: LD_ADDR_VAR 0 17
36520: PUSH
36521: LD_VAR 0 5
36525: PPUSH
36526: LD_INT 22
36528: PUSH
36529: LD_VAR 0 13
36533: PPUSH
36534: CALL_OW 255
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 30
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 30
36558: PUSH
36559: LD_INT 1
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: PUSH
36571: EMPTY
36572: LIST
36573: LIST
36574: PPUSH
36575: CALL_OW 72
36579: ST_TO_ADDR
// for i = 1 to hexes do
36580: LD_ADDR_VAR 0 9
36584: PUSH
36585: DOUBLE
36586: LD_INT 1
36588: DEC
36589: ST_TO_ADDR
36590: LD_VAR 0 14
36594: PUSH
36595: FOR_TO
36596: IFFALSE 37272
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36598: LD_ADDR_VAR 0 13
36602: PUSH
36603: LD_VAR 0 14
36607: PUSH
36608: LD_VAR 0 9
36612: ARRAY
36613: PUSH
36614: LD_INT 1
36616: ARRAY
36617: PPUSH
36618: LD_VAR 0 14
36622: PUSH
36623: LD_VAR 0 9
36627: ARRAY
36628: PUSH
36629: LD_INT 2
36631: ARRAY
36632: PPUSH
36633: CALL_OW 428
36637: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36638: LD_VAR 0 14
36642: PUSH
36643: LD_VAR 0 9
36647: ARRAY
36648: PUSH
36649: LD_INT 1
36651: ARRAY
36652: PPUSH
36653: LD_VAR 0 14
36657: PUSH
36658: LD_VAR 0 9
36662: ARRAY
36663: PUSH
36664: LD_INT 2
36666: ARRAY
36667: PPUSH
36668: CALL_OW 351
36672: PUSH
36673: LD_VAR 0 14
36677: PUSH
36678: LD_VAR 0 9
36682: ARRAY
36683: PUSH
36684: LD_INT 1
36686: ARRAY
36687: PPUSH
36688: LD_VAR 0 14
36692: PUSH
36693: LD_VAR 0 9
36697: ARRAY
36698: PUSH
36699: LD_INT 2
36701: ARRAY
36702: PPUSH
36703: CALL_OW 488
36707: NOT
36708: OR
36709: PUSH
36710: LD_VAR 0 13
36714: PPUSH
36715: CALL_OW 247
36719: PUSH
36720: LD_INT 3
36722: EQUAL
36723: OR
36724: IFFALSE 36730
// exit ;
36726: POP
36727: POP
36728: GO 37274
// if not tmp then
36730: LD_VAR 0 13
36734: NOT
36735: IFFALSE 36739
// continue ;
36737: GO 36595
// result := true ;
36739: LD_ADDR_VAR 0 8
36743: PUSH
36744: LD_INT 1
36746: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36747: LD_VAR 0 6
36751: PUSH
36752: LD_VAR 0 13
36756: PPUSH
36757: CALL_OW 247
36761: PUSH
36762: LD_INT 2
36764: EQUAL
36765: AND
36766: PUSH
36767: LD_VAR 0 13
36771: PPUSH
36772: CALL_OW 263
36776: PUSH
36777: LD_INT 1
36779: EQUAL
36780: AND
36781: IFFALSE 36945
// begin if IsDrivenBy ( tmp ) then
36783: LD_VAR 0 13
36787: PPUSH
36788: CALL_OW 311
36792: IFFALSE 36796
// continue ;
36794: GO 36595
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36796: LD_VAR 0 6
36800: PPUSH
36801: LD_INT 3
36803: PUSH
36804: LD_INT 60
36806: PUSH
36807: EMPTY
36808: LIST
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: PUSH
36814: LD_INT 3
36816: PUSH
36817: LD_INT 55
36819: PUSH
36820: EMPTY
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PPUSH
36831: CALL_OW 72
36835: IFFALSE 36943
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36837: LD_ADDR_VAR 0 18
36841: PUSH
36842: LD_VAR 0 6
36846: PPUSH
36847: LD_INT 3
36849: PUSH
36850: LD_INT 60
36852: PUSH
36853: EMPTY
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 3
36862: PUSH
36863: LD_INT 55
36865: PUSH
36866: EMPTY
36867: LIST
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: PUSH
36873: EMPTY
36874: LIST
36875: LIST
36876: PPUSH
36877: CALL_OW 72
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: ST_TO_ADDR
// if IsInUnit ( driver ) then
36886: LD_VAR 0 18
36890: PPUSH
36891: CALL_OW 310
36895: IFFALSE 36906
// ComExit ( driver ) ;
36897: LD_VAR 0 18
36901: PPUSH
36902: CALL 61695 0 1
// AddComEnterUnit ( driver , tmp ) ;
36906: LD_VAR 0 18
36910: PPUSH
36911: LD_VAR 0 13
36915: PPUSH
36916: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36920: LD_VAR 0 18
36924: PPUSH
36925: LD_VAR 0 7
36929: PPUSH
36930: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36934: LD_VAR 0 18
36938: PPUSH
36939: CALL_OW 181
// end ; continue ;
36943: GO 36595
// end ; if not cleaners or not tmp in cleaners then
36945: LD_VAR 0 6
36949: NOT
36950: PUSH
36951: LD_VAR 0 13
36955: PUSH
36956: LD_VAR 0 6
36960: IN
36961: NOT
36962: OR
36963: IFFALSE 37270
// begin if dep then
36965: LD_VAR 0 17
36969: IFFALSE 37105
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36971: LD_ADDR_VAR 0 16
36975: PUSH
36976: LD_VAR 0 17
36980: PUSH
36981: LD_INT 1
36983: ARRAY
36984: PPUSH
36985: CALL_OW 250
36989: PPUSH
36990: LD_VAR 0 17
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PPUSH
36999: CALL_OW 254
37003: PPUSH
37004: LD_INT 5
37006: PPUSH
37007: CALL_OW 272
37011: PUSH
37012: LD_VAR 0 17
37016: PUSH
37017: LD_INT 1
37019: ARRAY
37020: PPUSH
37021: CALL_OW 251
37025: PPUSH
37026: LD_VAR 0 17
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PPUSH
37035: CALL_OW 254
37039: PPUSH
37040: LD_INT 5
37042: PPUSH
37043: CALL_OW 273
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37052: LD_VAR 0 16
37056: PUSH
37057: LD_INT 1
37059: ARRAY
37060: PPUSH
37061: LD_VAR 0 16
37065: PUSH
37066: LD_INT 2
37068: ARRAY
37069: PPUSH
37070: CALL_OW 488
37074: IFFALSE 37105
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37076: LD_VAR 0 13
37080: PPUSH
37081: LD_VAR 0 16
37085: PUSH
37086: LD_INT 1
37088: ARRAY
37089: PPUSH
37090: LD_VAR 0 16
37094: PUSH
37095: LD_INT 2
37097: ARRAY
37098: PPUSH
37099: CALL_OW 111
// continue ;
37103: GO 36595
// end ; end ; r := GetDir ( tmp ) ;
37105: LD_ADDR_VAR 0 15
37109: PUSH
37110: LD_VAR 0 13
37114: PPUSH
37115: CALL_OW 254
37119: ST_TO_ADDR
// if r = 5 then
37120: LD_VAR 0 15
37124: PUSH
37125: LD_INT 5
37127: EQUAL
37128: IFFALSE 37138
// r := 0 ;
37130: LD_ADDR_VAR 0 15
37134: PUSH
37135: LD_INT 0
37137: ST_TO_ADDR
// for j = r to 5 do
37138: LD_ADDR_VAR 0 10
37142: PUSH
37143: DOUBLE
37144: LD_VAR 0 15
37148: DEC
37149: ST_TO_ADDR
37150: LD_INT 5
37152: PUSH
37153: FOR_TO
37154: IFFALSE 37268
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37156: LD_ADDR_VAR 0 11
37160: PUSH
37161: LD_VAR 0 13
37165: PPUSH
37166: CALL_OW 250
37170: PPUSH
37171: LD_VAR 0 10
37175: PPUSH
37176: LD_INT 2
37178: PPUSH
37179: CALL_OW 272
37183: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37184: LD_ADDR_VAR 0 12
37188: PUSH
37189: LD_VAR 0 13
37193: PPUSH
37194: CALL_OW 251
37198: PPUSH
37199: LD_VAR 0 10
37203: PPUSH
37204: LD_INT 2
37206: PPUSH
37207: CALL_OW 273
37211: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37212: LD_VAR 0 11
37216: PPUSH
37217: LD_VAR 0 12
37221: PPUSH
37222: CALL_OW 488
37226: PUSH
37227: LD_VAR 0 11
37231: PPUSH
37232: LD_VAR 0 12
37236: PPUSH
37237: CALL_OW 428
37241: NOT
37242: AND
37243: IFFALSE 37266
// begin ComMoveXY ( tmp , _x , _y ) ;
37245: LD_VAR 0 13
37249: PPUSH
37250: LD_VAR 0 11
37254: PPUSH
37255: LD_VAR 0 12
37259: PPUSH
37260: CALL_OW 111
// break ;
37264: GO 37268
// end ; end ;
37266: GO 37153
37268: POP
37269: POP
// end ; end ;
37270: GO 36595
37272: POP
37273: POP
// end ;
37274: LD_VAR 0 8
37278: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37279: LD_INT 0
37281: PPUSH
// result := true ;
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 1
37289: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37290: LD_VAR 0 2
37294: PUSH
37295: LD_INT 24
37297: DOUBLE
37298: EQUAL
37299: IFTRUE 37309
37301: LD_INT 33
37303: DOUBLE
37304: EQUAL
37305: IFTRUE 37309
37307: GO 37334
37309: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 32
37317: PPUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 321
37327: PUSH
37328: LD_INT 2
37330: EQUAL
37331: ST_TO_ADDR
37332: GO 37654
37334: LD_INT 20
37336: DOUBLE
37337: EQUAL
37338: IFTRUE 37342
37340: GO 37367
37342: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37343: LD_ADDR_VAR 0 3
37347: PUSH
37348: LD_INT 6
37350: PPUSH
37351: LD_VAR 0 1
37355: PPUSH
37356: CALL_OW 321
37360: PUSH
37361: LD_INT 2
37363: EQUAL
37364: ST_TO_ADDR
37365: GO 37654
37367: LD_INT 22
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37381
37373: LD_INT 36
37375: DOUBLE
37376: EQUAL
37377: IFTRUE 37381
37379: GO 37406
37381: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37382: LD_ADDR_VAR 0 3
37386: PUSH
37387: LD_INT 15
37389: PPUSH
37390: LD_VAR 0 1
37394: PPUSH
37395: CALL_OW 321
37399: PUSH
37400: LD_INT 2
37402: EQUAL
37403: ST_TO_ADDR
37404: GO 37654
37406: LD_INT 30
37408: DOUBLE
37409: EQUAL
37410: IFTRUE 37414
37412: GO 37439
37414: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37415: LD_ADDR_VAR 0 3
37419: PUSH
37420: LD_INT 20
37422: PPUSH
37423: LD_VAR 0 1
37427: PPUSH
37428: CALL_OW 321
37432: PUSH
37433: LD_INT 2
37435: EQUAL
37436: ST_TO_ADDR
37437: GO 37654
37439: LD_INT 28
37441: DOUBLE
37442: EQUAL
37443: IFTRUE 37453
37445: LD_INT 21
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37478
37453: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 21
37461: PPUSH
37462: LD_VAR 0 1
37466: PPUSH
37467: CALL_OW 321
37471: PUSH
37472: LD_INT 2
37474: EQUAL
37475: ST_TO_ADDR
37476: GO 37654
37478: LD_INT 16
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37513
37486: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37487: LD_ADDR_VAR 0 3
37491: PUSH
37492: LD_EXP 36
37496: PPUSH
37497: LD_VAR 0 1
37501: PPUSH
37502: CALL_OW 321
37506: PUSH
37507: LD_INT 2
37509: EQUAL
37510: ST_TO_ADDR
37511: GO 37654
37513: LD_INT 19
37515: DOUBLE
37516: EQUAL
37517: IFTRUE 37527
37519: LD_INT 23
37521: DOUBLE
37522: EQUAL
37523: IFTRUE 37527
37525: GO 37554
37527: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_EXP 35
37537: PPUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 321
37547: PUSH
37548: LD_INT 2
37550: EQUAL
37551: ST_TO_ADDR
37552: GO 37654
37554: LD_INT 17
37556: DOUBLE
37557: EQUAL
37558: IFTRUE 37562
37560: GO 37587
37562: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37563: LD_ADDR_VAR 0 3
37567: PUSH
37568: LD_INT 39
37570: PPUSH
37571: LD_VAR 0 1
37575: PPUSH
37576: CALL_OW 321
37580: PUSH
37581: LD_INT 2
37583: EQUAL
37584: ST_TO_ADDR
37585: GO 37654
37587: LD_INT 18
37589: DOUBLE
37590: EQUAL
37591: IFTRUE 37595
37593: GO 37620
37595: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37596: LD_ADDR_VAR 0 3
37600: PUSH
37601: LD_INT 40
37603: PPUSH
37604: LD_VAR 0 1
37608: PPUSH
37609: CALL_OW 321
37613: PUSH
37614: LD_INT 2
37616: EQUAL
37617: ST_TO_ADDR
37618: GO 37654
37620: LD_INT 27
37622: DOUBLE
37623: EQUAL
37624: IFTRUE 37628
37626: GO 37653
37628: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37629: LD_ADDR_VAR 0 3
37633: PUSH
37634: LD_INT 35
37636: PPUSH
37637: LD_VAR 0 1
37641: PPUSH
37642: CALL_OW 321
37646: PUSH
37647: LD_INT 2
37649: EQUAL
37650: ST_TO_ADDR
37651: GO 37654
37653: POP
// end ;
37654: LD_VAR 0 3
37658: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37659: LD_INT 0
37661: PPUSH
37662: PPUSH
37663: PPUSH
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
37668: PPUSH
37669: PPUSH
37670: PPUSH
37671: PPUSH
// result := false ;
37672: LD_ADDR_VAR 0 6
37676: PUSH
37677: LD_INT 0
37679: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37680: LD_VAR 0 1
37684: NOT
37685: PUSH
37686: LD_VAR 0 1
37690: PPUSH
37691: CALL_OW 266
37695: PUSH
37696: LD_INT 0
37698: PUSH
37699: LD_INT 1
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: IN
37706: NOT
37707: OR
37708: PUSH
37709: LD_VAR 0 2
37713: NOT
37714: OR
37715: PUSH
37716: LD_VAR 0 5
37720: PUSH
37721: LD_INT 0
37723: PUSH
37724: LD_INT 1
37726: PUSH
37727: LD_INT 2
37729: PUSH
37730: LD_INT 3
37732: PUSH
37733: LD_INT 4
37735: PUSH
37736: LD_INT 5
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: IN
37747: NOT
37748: OR
37749: PUSH
37750: LD_VAR 0 3
37754: PPUSH
37755: LD_VAR 0 4
37759: PPUSH
37760: CALL_OW 488
37764: NOT
37765: OR
37766: IFFALSE 37770
// exit ;
37768: GO 38506
// side := GetSide ( depot ) ;
37770: LD_ADDR_VAR 0 9
37774: PUSH
37775: LD_VAR 0 1
37779: PPUSH
37780: CALL_OW 255
37784: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37785: LD_VAR 0 9
37789: PPUSH
37790: LD_VAR 0 2
37794: PPUSH
37795: CALL 37279 0 2
37799: NOT
37800: IFFALSE 37804
// exit ;
37802: GO 38506
// pom := GetBase ( depot ) ;
37804: LD_ADDR_VAR 0 10
37808: PUSH
37809: LD_VAR 0 1
37813: PPUSH
37814: CALL_OW 274
37818: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37819: LD_ADDR_VAR 0 11
37823: PUSH
37824: LD_VAR 0 2
37828: PPUSH
37829: LD_VAR 0 1
37833: PPUSH
37834: CALL_OW 248
37838: PPUSH
37839: CALL_OW 450
37843: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37844: LD_VAR 0 10
37848: PPUSH
37849: LD_INT 1
37851: PPUSH
37852: CALL_OW 275
37856: PUSH
37857: LD_VAR 0 11
37861: PUSH
37862: LD_INT 1
37864: ARRAY
37865: GREATEREQUAL
37866: PUSH
37867: LD_VAR 0 10
37871: PPUSH
37872: LD_INT 2
37874: PPUSH
37875: CALL_OW 275
37879: PUSH
37880: LD_VAR 0 11
37884: PUSH
37885: LD_INT 2
37887: ARRAY
37888: GREATEREQUAL
37889: AND
37890: PUSH
37891: LD_VAR 0 10
37895: PPUSH
37896: LD_INT 3
37898: PPUSH
37899: CALL_OW 275
37903: PUSH
37904: LD_VAR 0 11
37908: PUSH
37909: LD_INT 3
37911: ARRAY
37912: GREATEREQUAL
37913: AND
37914: NOT
37915: IFFALSE 37919
// exit ;
37917: GO 38506
// if GetBType ( depot ) = b_depot then
37919: LD_VAR 0 1
37923: PPUSH
37924: CALL_OW 266
37928: PUSH
37929: LD_INT 0
37931: EQUAL
37932: IFFALSE 37944
// dist := 28 else
37934: LD_ADDR_VAR 0 14
37938: PUSH
37939: LD_INT 28
37941: ST_TO_ADDR
37942: GO 37952
// dist := 36 ;
37944: LD_ADDR_VAR 0 14
37948: PUSH
37949: LD_INT 36
37951: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37952: LD_VAR 0 1
37956: PPUSH
37957: LD_VAR 0 3
37961: PPUSH
37962: LD_VAR 0 4
37966: PPUSH
37967: CALL_OW 297
37971: PUSH
37972: LD_VAR 0 14
37976: GREATER
37977: IFFALSE 37981
// exit ;
37979: GO 38506
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37981: LD_ADDR_VAR 0 12
37985: PUSH
37986: LD_VAR 0 2
37990: PPUSH
37991: LD_VAR 0 3
37995: PPUSH
37996: LD_VAR 0 4
38000: PPUSH
38001: LD_VAR 0 5
38005: PPUSH
38006: LD_VAR 0 1
38010: PPUSH
38011: CALL_OW 248
38015: PPUSH
38016: LD_INT 0
38018: PPUSH
38019: CALL 38511 0 6
38023: ST_TO_ADDR
// if not hexes then
38024: LD_VAR 0 12
38028: NOT
38029: IFFALSE 38033
// exit ;
38031: GO 38506
// hex := GetHexInfo ( x , y ) ;
38033: LD_ADDR_VAR 0 15
38037: PUSH
38038: LD_VAR 0 3
38042: PPUSH
38043: LD_VAR 0 4
38047: PPUSH
38048: CALL_OW 546
38052: ST_TO_ADDR
// if hex [ 1 ] then
38053: LD_VAR 0 15
38057: PUSH
38058: LD_INT 1
38060: ARRAY
38061: IFFALSE 38065
// exit ;
38063: GO 38506
// height := hex [ 2 ] ;
38065: LD_ADDR_VAR 0 13
38069: PUSH
38070: LD_VAR 0 15
38074: PUSH
38075: LD_INT 2
38077: ARRAY
38078: ST_TO_ADDR
// for i = 1 to hexes do
38079: LD_ADDR_VAR 0 7
38083: PUSH
38084: DOUBLE
38085: LD_INT 1
38087: DEC
38088: ST_TO_ADDR
38089: LD_VAR 0 12
38093: PUSH
38094: FOR_TO
38095: IFFALSE 38425
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38097: LD_VAR 0 12
38101: PUSH
38102: LD_VAR 0 7
38106: ARRAY
38107: PUSH
38108: LD_INT 1
38110: ARRAY
38111: PPUSH
38112: LD_VAR 0 12
38116: PUSH
38117: LD_VAR 0 7
38121: ARRAY
38122: PUSH
38123: LD_INT 2
38125: ARRAY
38126: PPUSH
38127: CALL_OW 488
38131: NOT
38132: PUSH
38133: LD_VAR 0 12
38137: PUSH
38138: LD_VAR 0 7
38142: ARRAY
38143: PUSH
38144: LD_INT 1
38146: ARRAY
38147: PPUSH
38148: LD_VAR 0 12
38152: PUSH
38153: LD_VAR 0 7
38157: ARRAY
38158: PUSH
38159: LD_INT 2
38161: ARRAY
38162: PPUSH
38163: CALL_OW 428
38167: PUSH
38168: LD_INT 0
38170: GREATER
38171: OR
38172: PUSH
38173: LD_VAR 0 12
38177: PUSH
38178: LD_VAR 0 7
38182: ARRAY
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PPUSH
38188: LD_VAR 0 12
38192: PUSH
38193: LD_VAR 0 7
38197: ARRAY
38198: PUSH
38199: LD_INT 2
38201: ARRAY
38202: PPUSH
38203: CALL_OW 351
38207: OR
38208: IFFALSE 38214
// exit ;
38210: POP
38211: POP
38212: GO 38506
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38214: LD_ADDR_VAR 0 8
38218: PUSH
38219: LD_VAR 0 12
38223: PUSH
38224: LD_VAR 0 7
38228: ARRAY
38229: PUSH
38230: LD_INT 1
38232: ARRAY
38233: PPUSH
38234: LD_VAR 0 12
38238: PUSH
38239: LD_VAR 0 7
38243: ARRAY
38244: PUSH
38245: LD_INT 2
38247: ARRAY
38248: PPUSH
38249: CALL_OW 546
38253: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38254: LD_VAR 0 8
38258: PUSH
38259: LD_INT 1
38261: ARRAY
38262: PUSH
38263: LD_VAR 0 8
38267: PUSH
38268: LD_INT 2
38270: ARRAY
38271: PUSH
38272: LD_VAR 0 13
38276: PUSH
38277: LD_INT 2
38279: PLUS
38280: GREATER
38281: OR
38282: PUSH
38283: LD_VAR 0 8
38287: PUSH
38288: LD_INT 2
38290: ARRAY
38291: PUSH
38292: LD_VAR 0 13
38296: PUSH
38297: LD_INT 2
38299: MINUS
38300: LESS
38301: OR
38302: PUSH
38303: LD_VAR 0 8
38307: PUSH
38308: LD_INT 3
38310: ARRAY
38311: PUSH
38312: LD_INT 0
38314: PUSH
38315: LD_INT 8
38317: PUSH
38318: LD_INT 9
38320: PUSH
38321: LD_INT 10
38323: PUSH
38324: LD_INT 11
38326: PUSH
38327: LD_INT 12
38329: PUSH
38330: LD_INT 13
38332: PUSH
38333: LD_INT 16
38335: PUSH
38336: LD_INT 17
38338: PUSH
38339: LD_INT 18
38341: PUSH
38342: LD_INT 19
38344: PUSH
38345: LD_INT 20
38347: PUSH
38348: LD_INT 21
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: IN
38366: NOT
38367: OR
38368: PUSH
38369: LD_VAR 0 8
38373: PUSH
38374: LD_INT 5
38376: ARRAY
38377: NOT
38378: OR
38379: PUSH
38380: LD_VAR 0 8
38384: PUSH
38385: LD_INT 6
38387: ARRAY
38388: PUSH
38389: LD_INT 1
38391: PUSH
38392: LD_INT 2
38394: PUSH
38395: LD_INT 7
38397: PUSH
38398: LD_INT 9
38400: PUSH
38401: LD_INT 10
38403: PUSH
38404: LD_INT 11
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: IN
38415: NOT
38416: OR
38417: IFFALSE 38423
// exit ;
38419: POP
38420: POP
38421: GO 38506
// end ;
38423: GO 38094
38425: POP
38426: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38427: LD_VAR 0 9
38431: PPUSH
38432: LD_VAR 0 3
38436: PPUSH
38437: LD_VAR 0 4
38441: PPUSH
38442: LD_INT 20
38444: PPUSH
38445: CALL 30452 0 4
38449: PUSH
38450: LD_INT 4
38452: ARRAY
38453: IFFALSE 38457
// exit ;
38455: GO 38506
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38457: LD_VAR 0 2
38461: PUSH
38462: LD_INT 29
38464: PUSH
38465: LD_INT 30
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: IN
38472: PUSH
38473: LD_VAR 0 3
38477: PPUSH
38478: LD_VAR 0 4
38482: PPUSH
38483: LD_VAR 0 9
38487: PPUSH
38488: CALL_OW 440
38492: NOT
38493: AND
38494: IFFALSE 38498
// exit ;
38496: GO 38506
// result := true ;
38498: LD_ADDR_VAR 0 6
38502: PUSH
38503: LD_INT 1
38505: ST_TO_ADDR
// end ;
38506: LD_VAR 0 6
38510: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38511: LD_INT 0
38513: PPUSH
38514: PPUSH
38515: PPUSH
38516: PPUSH
38517: PPUSH
38518: PPUSH
38519: PPUSH
38520: PPUSH
38521: PPUSH
38522: PPUSH
38523: PPUSH
38524: PPUSH
38525: PPUSH
38526: PPUSH
38527: PPUSH
38528: PPUSH
38529: PPUSH
38530: PPUSH
38531: PPUSH
38532: PPUSH
38533: PPUSH
38534: PPUSH
38535: PPUSH
38536: PPUSH
38537: PPUSH
38538: PPUSH
38539: PPUSH
38540: PPUSH
38541: PPUSH
38542: PPUSH
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
38552: PPUSH
38553: PPUSH
38554: PPUSH
38555: PPUSH
38556: PPUSH
38557: PPUSH
38558: PPUSH
38559: PPUSH
38560: PPUSH
38561: PPUSH
38562: PPUSH
38563: PPUSH
38564: PPUSH
38565: PPUSH
38566: PPUSH
38567: PPUSH
38568: PPUSH
38569: PPUSH
38570: PPUSH
// result = [ ] ;
38571: LD_ADDR_VAR 0 7
38575: PUSH
38576: EMPTY
38577: ST_TO_ADDR
// temp_list = [ ] ;
38578: LD_ADDR_VAR 0 9
38582: PUSH
38583: EMPTY
38584: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38585: LD_VAR 0 4
38589: PUSH
38590: LD_INT 0
38592: PUSH
38593: LD_INT 1
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 3
38601: PUSH
38602: LD_INT 4
38604: PUSH
38605: LD_INT 5
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: IN
38616: NOT
38617: PUSH
38618: LD_VAR 0 1
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: IN
38633: PUSH
38634: LD_VAR 0 5
38638: PUSH
38639: LD_INT 1
38641: PUSH
38642: LD_INT 2
38644: PUSH
38645: LD_INT 3
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: LIST
38652: IN
38653: NOT
38654: AND
38655: OR
38656: IFFALSE 38660
// exit ;
38658: GO 57051
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38660: LD_VAR 0 1
38664: PUSH
38665: LD_INT 6
38667: PUSH
38668: LD_INT 7
38670: PUSH
38671: LD_INT 8
38673: PUSH
38674: LD_INT 13
38676: PUSH
38677: LD_INT 12
38679: PUSH
38680: LD_INT 15
38682: PUSH
38683: LD_INT 11
38685: PUSH
38686: LD_INT 14
38688: PUSH
38689: LD_INT 10
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: IN
38703: IFFALSE 38713
// btype = b_lab ;
38705: LD_ADDR_VAR 0 1
38709: PUSH
38710: LD_INT 6
38712: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38713: LD_VAR 0 6
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: LD_INT 2
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: LIST
38731: IN
38732: NOT
38733: PUSH
38734: LD_VAR 0 1
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 1
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 3
38750: PUSH
38751: LD_INT 6
38753: PUSH
38754: LD_INT 36
38756: PUSH
38757: LD_INT 4
38759: PUSH
38760: LD_INT 5
38762: PUSH
38763: LD_INT 31
38765: PUSH
38766: LD_INT 32
38768: PUSH
38769: LD_INT 33
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: LIST
38782: LIST
38783: LIST
38784: IN
38785: NOT
38786: PUSH
38787: LD_VAR 0 6
38791: PUSH
38792: LD_INT 1
38794: EQUAL
38795: AND
38796: OR
38797: PUSH
38798: LD_VAR 0 1
38802: PUSH
38803: LD_INT 2
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: IN
38813: NOT
38814: PUSH
38815: LD_VAR 0 6
38819: PUSH
38820: LD_INT 2
38822: EQUAL
38823: AND
38824: OR
38825: IFFALSE 38835
// mode = 0 ;
38827: LD_ADDR_VAR 0 6
38831: PUSH
38832: LD_INT 0
38834: ST_TO_ADDR
// case mode of 0 :
38835: LD_VAR 0 6
38839: PUSH
38840: LD_INT 0
38842: DOUBLE
38843: EQUAL
38844: IFTRUE 38848
38846: GO 50301
38848: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38849: LD_ADDR_VAR 0 11
38853: PUSH
38854: LD_INT 0
38856: PUSH
38857: LD_INT 0
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 0
38866: PUSH
38867: LD_INT 1
38869: NEG
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 1
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 1
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: LD_INT 1
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 1
38907: NEG
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 1
38922: NEG
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: LD_INT 2
38934: NEG
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 1
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 2
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 0
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: NEG
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 0
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: LIST
39028: LIST
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39042: LD_ADDR_VAR 0 12
39046: PUSH
39047: LD_INT 0
39049: PUSH
39050: LD_INT 0
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 0
39059: PUSH
39060: LD_INT 1
39062: NEG
39063: PUSH
39064: EMPTY
39065: LIST
39066: LIST
39067: PUSH
39068: LD_INT 1
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: PUSH
39078: LD_INT 1
39080: PUSH
39081: LD_INT 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 0
39090: PUSH
39091: LD_INT 1
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 1
39100: NEG
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 1
39111: NEG
39112: PUSH
39113: LD_INT 1
39115: NEG
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: PUSH
39121: LD_INT 1
39123: PUSH
39124: LD_INT 1
39126: NEG
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 2
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 2
39144: PUSH
39145: LD_INT 1
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 1
39154: NEG
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 2
39165: NEG
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: NEG
39177: PUSH
39178: LD_INT 1
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 2
39188: NEG
39189: PUSH
39190: LD_INT 1
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 3
39199: NEG
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 3
39210: NEG
39211: PUSH
39212: LD_INT 1
39214: NEG
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39238: LD_ADDR_VAR 0 13
39242: PUSH
39243: LD_INT 0
39245: PUSH
39246: LD_INT 0
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 1
39258: NEG
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 0
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 0
39286: PUSH
39287: LD_INT 1
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 1
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: NEG
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 2
39331: PUSH
39332: LD_INT 1
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: LD_INT 2
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: LD_INT 1
39365: NEG
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 2
39373: NEG
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: LD_INT 3
39389: NEG
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 3
39397: NEG
39398: PUSH
39399: LD_INT 2
39401: NEG
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 3
39409: NEG
39410: PUSH
39411: LD_INT 3
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39437: LD_ADDR_VAR 0 14
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 0
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 1
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 0
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: LD_INT 0
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: LD_INT 1
39506: NEG
39507: PUSH
39508: LD_INT 1
39510: NEG
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: NEG
39519: PUSH
39520: LD_INT 2
39522: NEG
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 2
39533: NEG
39534: PUSH
39535: EMPTY
39536: LIST
39537: LIST
39538: PUSH
39539: LD_INT 1
39541: PUSH
39542: LD_INT 1
39544: NEG
39545: PUSH
39546: EMPTY
39547: LIST
39548: LIST
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: LD_INT 2
39555: PUSH
39556: EMPTY
39557: LIST
39558: LIST
39559: PUSH
39560: LD_INT 0
39562: PUSH
39563: LD_INT 2
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 1
39572: NEG
39573: PUSH
39574: LD_INT 1
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PUSH
39581: LD_INT 1
39583: NEG
39584: PUSH
39585: LD_INT 3
39587: NEG
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 3
39598: NEG
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 1
39606: PUSH
39607: LD_INT 2
39609: NEG
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39633: LD_ADDR_VAR 0 15
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 0
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 0
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 0
39681: PUSH
39682: LD_INT 1
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PUSH
39689: LD_INT 1
39691: NEG
39692: PUSH
39693: LD_INT 0
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: LD_INT 1
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 1
39717: NEG
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 2
39725: PUSH
39726: LD_INT 0
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 1
39745: NEG
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: LD_INT 0
39760: PUSH
39761: EMPTY
39762: LIST
39763: LIST
39764: PUSH
39765: LD_INT 2
39767: NEG
39768: PUSH
39769: LD_INT 1
39771: NEG
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 3
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 3
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39826: LD_ADDR_VAR 0 16
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 1
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 2
39929: PUSH
39930: LD_INT 2
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: PUSH
39940: LD_INT 2
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: NEG
39962: PUSH
39963: LD_INT 2
39965: NEG
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PUSH
39971: LD_INT 3
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PUSH
39981: LD_INT 3
39983: PUSH
39984: LD_INT 3
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 2
39993: PUSH
39994: LD_INT 3
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40019: LD_ADDR_VAR 0 17
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 1
40047: PUSH
40048: LD_INT 0
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 0
40067: PUSH
40068: LD_INT 1
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 1
40077: NEG
40078: PUSH
40079: LD_INT 0
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: NEG
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: LD_INT 2
40104: NEG
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 2
40115: NEG
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 1
40123: PUSH
40124: LD_INT 1
40126: NEG
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 1
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: LD_INT 2
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 2
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 1
40184: NEG
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 2
40195: NEG
40196: PUSH
40197: LD_INT 0
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 2
40218: NEG
40219: PUSH
40220: LD_INT 2
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: LIST
40232: LIST
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40249: LD_ADDR_VAR 0 18
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 0
40266: PUSH
40267: LD_INT 1
40269: NEG
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: LD_INT 0
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: PUSH
40288: LD_INT 1
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 0
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: NEG
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 1
40318: NEG
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 0
40342: PUSH
40343: LD_INT 2
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 1
40353: PUSH
40354: LD_INT 1
40356: NEG
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: LD_INT 0
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 2
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 2
40384: PUSH
40385: LD_INT 2
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 2
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: NEG
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: NEG
40426: PUSH
40427: LD_INT 0
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 2
40436: NEG
40437: PUSH
40438: LD_INT 1
40440: NEG
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 2
40448: NEG
40449: PUSH
40450: LD_INT 2
40452: NEG
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: LIST
40463: LIST
40464: LIST
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40479: LD_ADDR_VAR 0 19
40483: PUSH
40484: LD_INT 0
40486: PUSH
40487: LD_INT 0
40489: PUSH
40490: EMPTY
40491: LIST
40492: LIST
40493: PUSH
40494: LD_INT 0
40496: PUSH
40497: LD_INT 1
40499: NEG
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 1
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 0
40527: PUSH
40528: LD_INT 1
40530: PUSH
40531: EMPTY
40532: LIST
40533: LIST
40534: PUSH
40535: LD_INT 1
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 1
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 1
40560: NEG
40561: PUSH
40562: LD_INT 2
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 2
40614: PUSH
40615: LD_INT 2
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: LD_INT 2
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PUSH
40632: LD_INT 0
40634: PUSH
40635: LD_INT 2
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: LD_INT 1
40644: NEG
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 2
40666: NEG
40667: PUSH
40668: LD_INT 1
40670: NEG
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: NEG
40679: PUSH
40680: LD_INT 2
40682: NEG
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40709: LD_ADDR_VAR 0 20
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 0
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: PUSH
40748: LD_INT 1
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 1
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 1
40778: NEG
40779: PUSH
40780: LD_INT 1
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: NEG
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 0
40802: PUSH
40803: LD_INT 2
40805: NEG
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 2
40844: PUSH
40845: LD_INT 2
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 2
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 2
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 1
40874: NEG
40875: PUSH
40876: LD_INT 1
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 2
40885: NEG
40886: PUSH
40887: LD_INT 0
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: NEG
40909: PUSH
40910: LD_INT 2
40912: NEG
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40939: LD_ADDR_VAR 0 21
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: PUSH
40968: LD_INT 0
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 0
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 1
40997: NEG
40998: PUSH
40999: LD_INT 0
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 1
41008: NEG
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: NEG
41021: PUSH
41022: LD_INT 2
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 0
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: EMPTY
41038: LIST
41039: LIST
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 1
41046: NEG
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 2
41054: PUSH
41055: LD_INT 0
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 2
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 2
41074: PUSH
41075: LD_INT 2
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PUSH
41082: LD_INT 1
41084: PUSH
41085: LD_INT 2
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 2
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 1
41104: NEG
41105: PUSH
41106: LD_INT 1
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 2
41115: NEG
41116: PUSH
41117: LD_INT 0
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: LD_INT 2
41126: NEG
41127: PUSH
41128: LD_INT 1
41130: NEG
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 2
41138: NEG
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: LIST
41156: LIST
41157: LIST
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41169: LD_ADDR_VAR 0 22
41173: PUSH
41174: LD_INT 0
41176: PUSH
41177: LD_INT 0
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 0
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: LD_INT 0
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: LD_INT 1
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 0
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: NEG
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 1
41238: NEG
41239: PUSH
41240: LD_INT 1
41242: NEG
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 1
41250: NEG
41251: PUSH
41252: LD_INT 2
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 0
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: EMPTY
41268: LIST
41269: LIST
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: LD_INT 1
41276: NEG
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: LD_INT 0
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 2
41294: PUSH
41295: LD_INT 1
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 2
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 1
41314: PUSH
41315: LD_INT 2
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 0
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 2
41345: NEG
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 2
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: NEG
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41399: LD_ADDR_VAR 0 23
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 2
41610: NEG
41611: PUSH
41612: LD_INT 3
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 3
41626: NEG
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: PUSH
41635: LD_INT 2
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: PUSH
41646: LD_INT 1
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41679: LD_ADDR_VAR 0 24
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 1
41890: PUSH
41891: LD_INT 2
41893: NEG
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 2
41901: PUSH
41902: LD_INT 1
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 3
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 3
41922: PUSH
41923: LD_INT 2
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41955: LD_ADDR_VAR 0 25
41959: PUSH
41960: LD_INT 0
41962: PUSH
41963: LD_INT 0
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 1
41975: NEG
41976: PUSH
41977: EMPTY
41978: LIST
41979: LIST
41980: PUSH
41981: LD_INT 1
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 0
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: LD_INT 0
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 2
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 2
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 1
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 2
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 2
42080: PUSH
42081: LD_INT 1
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 2
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: LD_INT 2
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 1
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 2
42131: NEG
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 2
42142: NEG
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 2
42154: NEG
42155: PUSH
42156: LD_INT 2
42158: NEG
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 3
42176: PUSH
42177: LD_INT 2
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 2
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 1
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42229: LD_ADDR_VAR 0 26
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: NEG
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 1
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: NEG
42311: PUSH
42312: LD_INT 2
42314: NEG
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 0
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 1
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: LD_INT 1
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 2
42377: PUSH
42378: EMPTY
42379: LIST
42380: LIST
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: LD_INT 2
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: NEG
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 2
42416: NEG
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: LD_INT 2
42432: NEG
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: PUSH
42438: LD_INT 2
42440: PUSH
42441: LD_INT 3
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 1
42450: PUSH
42451: LD_INT 3
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 1
42460: NEG
42461: PUSH
42462: LD_INT 2
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42505: LD_ADDR_VAR 0 27
42509: PUSH
42510: LD_INT 0
42512: PUSH
42513: LD_INT 0
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: PUSH
42520: LD_INT 0
42522: PUSH
42523: LD_INT 1
42525: NEG
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 1
42563: NEG
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: LD_INT 1
42578: NEG
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: PUSH
42584: LD_INT 1
42586: NEG
42587: PUSH
42588: LD_INT 2
42590: NEG
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 0
42598: PUSH
42599: LD_INT 2
42601: NEG
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 1
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 0
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 2
42630: PUSH
42631: LD_INT 1
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 2
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: PUSH
42651: LD_INT 2
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 0
42660: PUSH
42661: LD_INT 2
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 1
42670: NEG
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: LD_INT 1
42696: NEG
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 2
42704: NEG
42705: PUSH
42706: LD_INT 2
42708: NEG
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 2
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 3
42738: NEG
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 3
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42785: LD_ADDR_VAR 0 28
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: LD_INT 1
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 1
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: LD_INT 1
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 0
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: LD_INT 2
42870: NEG
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 0
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 1
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 2
42900: PUSH
42901: LD_INT 0
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: LD_INT 2
42910: PUSH
42911: LD_INT 1
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: LD_INT 2
42923: PUSH
42924: EMPTY
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 1
42930: PUSH
42931: LD_INT 2
42933: PUSH
42934: EMPTY
42935: LIST
42936: LIST
42937: PUSH
42938: LD_INT 0
42940: PUSH
42941: LD_INT 2
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: NEG
42951: PUSH
42952: LD_INT 1
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: NEG
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 2
42972: NEG
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: LD_INT 2
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: LD_INT 3
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43067: LD_ADDR_VAR 0 29
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 0
43160: PUSH
43161: LD_INT 2
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: LD_INT 1
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 2
43192: PUSH
43193: LD_INT 1
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 2
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 2
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43346: LD_ADDR_VAR 0 30
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 0
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 1
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 2
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: NEG
43502: PUSH
43503: LD_INT 1
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 2
43512: NEG
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: NEG
43524: PUSH
43525: LD_INT 1
43527: NEG
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 1
43535: NEG
43536: PUSH
43537: LD_INT 3
43539: NEG
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 2
43550: NEG
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 3
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: LD_INT 3
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 2
43578: NEG
43579: PUSH
43580: LD_INT 1
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 3
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43624: LD_ADDR_VAR 0 31
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: PUSH
43663: LD_INT 1
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 0
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: EMPTY
43688: LIST
43689: LIST
43690: PUSH
43691: LD_INT 1
43693: NEG
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 1
43705: NEG
43706: PUSH
43707: LD_INT 2
43709: NEG
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: LD_INT 1
43720: NEG
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: LD_INT 2
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 0
43768: PUSH
43769: LD_INT 2
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: NEG
43779: PUSH
43780: LD_INT 1
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: NEG
43790: PUSH
43791: LD_INT 1
43793: NEG
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 2
43801: NEG
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: NEG
43814: PUSH
43815: LD_INT 3
43817: NEG
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 3
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 3
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: LD_INT 2
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 3
43867: NEG
43868: PUSH
43869: LD_INT 2
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43902: LD_ADDR_VAR 0 32
43906: PUSH
43907: LD_INT 0
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: PUSH
43931: LD_INT 0
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 1
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 1
43960: NEG
43961: PUSH
43962: LD_INT 0
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: NEG
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: NEG
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: LD_INT 2
43998: NEG
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 1
44009: NEG
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 2
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 2
44027: PUSH
44028: LD_INT 2
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 1
44037: PUSH
44038: LD_INT 2
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 0
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: EMPTY
44052: LIST
44053: LIST
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: LD_INT 1
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: NEG
44069: PUSH
44070: LD_INT 0
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 2
44079: NEG
44080: PUSH
44081: LD_INT 1
44083: NEG
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 1
44091: NEG
44092: PUSH
44093: LD_INT 3
44095: NEG
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: LD_INT 2
44106: NEG
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 3
44114: PUSH
44115: LD_INT 2
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: PUSH
44125: LD_INT 3
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 2
44134: NEG
44135: PUSH
44136: LD_INT 1
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 3
44145: NEG
44146: PUSH
44147: LD_INT 1
44149: NEG
44150: PUSH
44151: EMPTY
44152: LIST
44153: LIST
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44180: LD_ADDR_VAR 0 33
44184: PUSH
44185: LD_INT 0
44187: PUSH
44188: LD_INT 0
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 1
44200: NEG
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: LD_INT 0
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 0
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 1
44238: NEG
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 1
44249: NEG
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 1
44261: NEG
44262: PUSH
44263: LD_INT 2
44265: NEG
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PUSH
44271: LD_INT 1
44273: PUSH
44274: LD_INT 1
44276: NEG
44277: PUSH
44278: EMPTY
44279: LIST
44280: LIST
44281: PUSH
44282: LD_INT 2
44284: PUSH
44285: LD_INT 0
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 2
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: LD_INT 1
44304: PUSH
44305: LD_INT 2
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 2
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 2
44335: NEG
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 2
44346: NEG
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: EMPTY
44353: LIST
44354: LIST
44355: PUSH
44356: LD_INT 2
44358: NEG
44359: PUSH
44360: LD_INT 2
44362: NEG
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 3
44374: NEG
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 3
44393: PUSH
44394: LD_INT 1
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: PUSH
44404: LD_INT 3
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 1
44413: NEG
44414: PUSH
44415: LD_INT 2
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 3
44424: NEG
44425: PUSH
44426: LD_INT 2
44428: NEG
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: LIST
44448: LIST
44449: LIST
44450: LIST
44451: LIST
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: LIST
44457: LIST
44458: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44459: LD_ADDR_VAR 0 34
44463: PUSH
44464: LD_INT 0
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 1
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 1
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 1
44528: NEG
44529: PUSH
44530: LD_INT 1
44532: NEG
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 2
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 2
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: NEG
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 2
44615: NEG
44616: PUSH
44617: LD_INT 0
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 1
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 2
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: LD_INT 3
44654: NEG
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: NEG
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 3
44673: PUSH
44674: LD_INT 2
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 2
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 1
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 3
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: LIST
44718: LIST
44719: LIST
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44739: LD_ADDR_VAR 0 35
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: LD_INT 1
44759: NEG
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 1
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 1
44797: NEG
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 1
44812: NEG
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44851: LD_ADDR_VAR 0 36
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: LD_INT 0
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 1
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: LD_INT 0
44913: PUSH
44914: EMPTY
44915: LIST
44916: LIST
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 2
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: PUSH
44945: LD_INT 2
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44963: LD_ADDR_VAR 0 37
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: LD_INT 0
44980: PUSH
44981: LD_INT 1
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: LD_INT 0
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: LD_INT 1
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: PUSH
45009: LD_INT 0
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: EMPTY
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45075: LD_ADDR_VAR 0 38
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 0
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 0
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 1
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: LD_INT 0
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: LD_INT 1
45148: NEG
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 2
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: PUSH
45164: LD_INT 2
45166: NEG
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: EMPTY
45173: LIST
45174: LIST
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45187: LD_ADDR_VAR 0 39
45191: PUSH
45192: LD_INT 0
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 1
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 1
45245: NEG
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: NEG
45269: PUSH
45270: LD_INT 2
45272: NEG
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 1
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: LIST
45298: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45299: LD_ADDR_VAR 0 40
45303: PUSH
45304: LD_INT 0
45306: PUSH
45307: LD_INT 0
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: LD_INT 0
45316: PUSH
45317: LD_INT 1
45319: NEG
45320: PUSH
45321: EMPTY
45322: LIST
45323: LIST
45324: PUSH
45325: LD_INT 1
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: PUSH
45338: LD_INT 1
45340: PUSH
45341: EMPTY
45342: LIST
45343: LIST
45344: PUSH
45345: LD_INT 0
45347: PUSH
45348: LD_INT 1
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: LD_INT 1
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 1
45380: PUSH
45381: LD_INT 1
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: NEG
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45411: LD_ADDR_VAR 0 41
45415: PUSH
45416: LD_INT 0
45418: PUSH
45419: LD_INT 0
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 0
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 0
45442: PUSH
45443: EMPTY
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 1
45449: PUSH
45450: LD_INT 1
45452: PUSH
45453: EMPTY
45454: LIST
45455: LIST
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: EMPTY
45464: LIST
45465: LIST
45466: PUSH
45467: LD_INT 1
45469: NEG
45470: PUSH
45471: LD_INT 0
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: NEG
45481: PUSH
45482: LD_INT 1
45484: NEG
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 2
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: EMPTY
45520: LIST
45521: LIST
45522: PUSH
45523: LD_INT 2
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: EMPTY
45530: LIST
45531: LIST
45532: PUSH
45533: LD_INT 2
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: NEG
45578: PUSH
45579: LD_INT 1
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 2
45589: NEG
45590: PUSH
45591: LD_INT 2
45593: NEG
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 2
45601: NEG
45602: PUSH
45603: LD_INT 3
45605: NEG
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: LD_INT 1
45616: NEG
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 3
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 3
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 3
45644: PUSH
45645: LD_INT 2
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 3
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: PUSH
45665: LD_INT 3
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 1
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: LD_INT 0
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: PUSH
45694: LD_INT 3
45696: NEG
45697: PUSH
45698: LD_INT 1
45700: NEG
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 3
45708: NEG
45709: PUSH
45710: LD_INT 2
45712: NEG
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 3
45720: NEG
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45761: LD_ADDR_VAR 0 42
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 0
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 1
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: LD_INT 1
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 1
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: LD_INT 1
45834: NEG
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 1
45842: NEG
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 2
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 2
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: PUSH
45897: LD_INT 2
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 2
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: LD_INT 1
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: NEG
45928: PUSH
45929: LD_INT 1
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: LD_INT 2
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 2
45951: NEG
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: LD_INT 3
45967: NEG
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: PUSH
45973: LD_INT 0
45975: PUSH
45976: LD_INT 3
45978: NEG
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 1
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: EMPTY
45992: LIST
45993: LIST
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 3
46007: PUSH
46008: LD_INT 3
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: LD_INT 2
46017: PUSH
46018: LD_INT 3
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 1
46027: PUSH
46028: LD_INT 3
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 1
46047: NEG
46048: PUSH
46049: LD_INT 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: LD_INT 2
46062: NEG
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 3
46070: NEG
46071: PUSH
46072: LD_INT 3
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: LIST
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46111: LD_ADDR_VAR 0 43
46115: PUSH
46116: LD_INT 0
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 0
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: LD_INT 0
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: PUSH
46150: LD_INT 1
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: PUSH
46157: LD_INT 0
46159: PUSH
46160: LD_INT 1
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 0
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 1
46192: NEG
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: LD_INT 2
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 2
46236: PUSH
46237: LD_INT 1
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 2
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: NEG
46267: PUSH
46268: LD_INT 1
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: LD_INT 0
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: PUSH
46286: LD_INT 2
46288: NEG
46289: PUSH
46290: LD_INT 1
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: LD_INT 3
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: LD_INT 3
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: PUSH
46346: LD_INT 0
46348: PUSH
46349: EMPTY
46350: LIST
46351: LIST
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: LD_INT 3
46368: PUSH
46369: EMPTY
46370: LIST
46371: LIST
46372: PUSH
46373: LD_INT 0
46375: PUSH
46376: LD_INT 3
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 2
46396: NEG
46397: PUSH
46398: LD_INT 1
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 3
46407: NEG
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 3
46418: NEG
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: LIST
46458: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46459: LD_ADDR_VAR 0 44
46463: PUSH
46464: LD_INT 0
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 0
46476: PUSH
46477: LD_INT 1
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 1
46487: PUSH
46488: LD_INT 0
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PUSH
46505: LD_INT 0
46507: PUSH
46508: LD_INT 1
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 0
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 1
46528: NEG
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: NEG
46541: PUSH
46542: LD_INT 2
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 1
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: PUSH
46561: LD_INT 2
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 2
46573: PUSH
46574: LD_INT 1
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 2
46583: PUSH
46584: LD_INT 2
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: NEG
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: NEG
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 2
46661: PUSH
46662: LD_INT 1
46664: NEG
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 3
46682: PUSH
46683: LD_INT 1
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 3
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 3
46702: PUSH
46703: LD_INT 3
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 2
46712: PUSH
46713: LD_INT 3
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 2
46722: NEG
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 3
46733: NEG
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 3
46744: NEG
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 3
46756: NEG
46757: PUSH
46758: LD_INT 2
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 3
46768: NEG
46769: PUSH
46770: LD_INT 3
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46809: LD_ADDR_VAR 0 45
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: LD_INT 0
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 1
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: NEG
46879: PUSH
46880: LD_INT 1
46882: NEG
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 1
46890: NEG
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 2
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 2
46999: NEG
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 3
47026: NEG
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 1
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 3
47045: PUSH
47046: LD_INT 2
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 3
47055: PUSH
47056: LD_INT 3
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 2
47065: PUSH
47066: LD_INT 3
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: PUSH
47073: LD_INT 1
47075: PUSH
47076: LD_INT 3
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: LD_INT 3
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: EMPTY
47101: LIST
47102: LIST
47103: PUSH
47104: LD_INT 3
47106: NEG
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 3
47118: NEG
47119: PUSH
47120: LD_INT 3
47122: NEG
47123: PUSH
47124: EMPTY
47125: LIST
47126: LIST
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: LIST
47143: LIST
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47159: LD_ADDR_VAR 0 46
47163: PUSH
47164: LD_INT 0
47166: PUSH
47167: LD_INT 0
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 0
47176: PUSH
47177: LD_INT 1
47179: NEG
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: PUSH
47188: LD_INT 0
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: PUSH
47198: LD_INT 1
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 0
47207: PUSH
47208: LD_INT 1
47210: PUSH
47211: EMPTY
47212: LIST
47213: LIST
47214: PUSH
47215: LD_INT 1
47217: NEG
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: LD_INT 2
47244: NEG
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: PUSH
47261: LD_INT 1
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: PUSH
47275: LD_INT 0
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 2
47284: PUSH
47285: LD_INT 1
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: LD_INT 2
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: NEG
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: LD_INT 0
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 2
47336: NEG
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 0
47360: PUSH
47361: LD_INT 3
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 2
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 3
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: LD_INT 3
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 0
47423: PUSH
47424: LD_INT 3
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: LD_INT 2
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 3
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47507: LD_ADDR_VAR 0 47
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 1
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: NEG
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 2
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: LD_INT 2
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 2
47634: NEG
47635: PUSH
47636: LD_INT 2
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47658: LD_ADDR_VAR 0 48
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47805: LD_ADDR_VAR 0 49
47809: PUSH
47810: LD_INT 0
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: PUSH
47844: LD_INT 1
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 1
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: PUSH
47887: LD_INT 1
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 2
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 2
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 2
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 1
47927: PUSH
47928: LD_INT 2
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47949: LD_ADDR_VAR 0 50
47953: PUSH
47954: LD_INT 0
47956: PUSH
47957: LD_INT 0
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 0
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: PUSH
47991: EMPTY
47992: LIST
47993: LIST
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 1
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: NEG
48008: PUSH
48009: LD_INT 0
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 2
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 2
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PUSH
48048: LD_INT 1
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 0
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 1
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48093: LD_ADDR_VAR 0 51
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: LD_INT 1
48113: NEG
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 1
48121: PUSH
48122: LD_INT 0
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 1
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 1
48174: PUSH
48175: LD_INT 2
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 0
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: NEG
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 2
48216: NEG
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48240: LD_ADDR_VAR 0 52
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 0
48257: PUSH
48258: LD_INT 1
48260: NEG
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 1
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: EMPTY
48283: LIST
48284: LIST
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: LD_INT 1
48313: NEG
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: LD_INT 2
48325: NEG
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 1
48333: NEG
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 0
48348: PUSH
48349: EMPTY
48350: LIST
48351: LIST
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: LD_INT 1
48359: NEG
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 2
48367: NEG
48368: PUSH
48369: LD_INT 2
48371: NEG
48372: PUSH
48373: EMPTY
48374: LIST
48375: LIST
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48391: LD_ADDR_VAR 0 53
48395: PUSH
48396: LD_INT 0
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 0
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: PUSH
48430: LD_INT 1
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 1
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 1
48449: NEG
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: NEG
48473: PUSH
48474: LD_INT 2
48476: NEG
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 0
48484: PUSH
48485: LD_INT 2
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 1
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 2
48526: PUSH
48527: LD_INT 2
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 2
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: LD_INT 2
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48621: LD_ADDR_VAR 0 54
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 0
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: LD_INT 1
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 1
48679: NEG
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: LD_INT 1
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 1
48702: NEG
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 0
48714: PUSH
48715: LD_INT 2
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 1
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 2
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 2
48756: PUSH
48757: LD_INT 2
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 0
48776: PUSH
48777: LD_INT 2
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: NEG
48809: PUSH
48810: LD_INT 1
48812: NEG
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 2
48820: NEG
48821: PUSH
48822: LD_INT 2
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48851: LD_ADDR_VAR 0 55
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: NEG
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 0
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 1
48909: NEG
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: NEG
48921: PUSH
48922: LD_INT 1
48924: NEG
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 1
48932: NEG
48933: PUSH
48934: LD_INT 2
48936: NEG
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 2
48947: NEG
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 1
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 2
48966: PUSH
48967: LD_INT 0
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: PUSH
48974: LD_INT 2
48976: PUSH
48977: LD_INT 1
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 2
48986: PUSH
48987: LD_INT 2
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 1
48996: PUSH
48997: LD_INT 2
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 2
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 2
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49081: LD_ADDR_VAR 0 56
49085: PUSH
49086: LD_INT 0
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 1
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 1
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 1
49119: PUSH
49120: LD_INT 1
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 1
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 0
49174: PUSH
49175: LD_INT 2
49177: NEG
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: LD_INT 1
49188: NEG
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 2
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 2
49206: PUSH
49207: LD_INT 1
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 2
49216: PUSH
49217: LD_INT 2
49219: PUSH
49220: EMPTY
49221: LIST
49222: LIST
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: LD_INT 2
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: LD_INT 2
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 2
49257: NEG
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: NEG
49281: PUSH
49282: LD_INT 2
49284: NEG
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49311: LD_ADDR_VAR 0 57
49315: PUSH
49316: LD_INT 0
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 1
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 1
49339: PUSH
49340: LD_INT 0
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: LD_INT 1
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: NEG
49370: PUSH
49371: LD_INT 0
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 1
49380: NEG
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 1
49392: NEG
49393: PUSH
49394: LD_INT 2
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 2
49407: NEG
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 1
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 2
49426: PUSH
49427: LD_INT 0
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 2
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 2
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 0
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 2
49487: NEG
49488: PUSH
49489: LD_INT 0
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: NEG
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 2
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49541: LD_ADDR_VAR 0 58
49545: PUSH
49546: LD_INT 0
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 0
49558: PUSH
49559: LD_INT 1
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 1
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 1
49579: PUSH
49580: LD_INT 1
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 0
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 0
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: NEG
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 2
49637: NEG
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 2
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 2
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 2
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 2
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: LD_INT 0
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: NEG
49729: PUSH
49730: LD_INT 1
49732: NEG
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 2
49740: NEG
49741: PUSH
49742: LD_INT 2
49744: NEG
49745: PUSH
49746: EMPTY
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49771: LD_ADDR_VAR 0 59
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 1
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 1
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 1
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: NEG
49830: PUSH
49831: LD_INT 0
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49859: LD_ADDR_VAR 0 60
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 0
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: LD_INT 1
49879: NEG
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: PUSH
49888: LD_INT 0
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: LD_INT 1
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 1
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 1
49917: NEG
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: NEG
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49947: LD_ADDR_VAR 0 61
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 1
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 1
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50035: LD_ADDR_VAR 0 62
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 1
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 0
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 0
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: NEG
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50123: LD_ADDR_VAR 0 63
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50211: LD_ADDR_VAR 0 64
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 0
50221: PUSH
50222: EMPTY
50223: LIST
50224: LIST
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: LD_INT 1
50231: NEG
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 0
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: ST_TO_ADDR
// end ; 1 :
50299: GO 56196
50301: LD_INT 1
50303: DOUBLE
50304: EQUAL
50305: IFTRUE 50309
50307: GO 52932
50309: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50310: LD_ADDR_VAR 0 11
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 3
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50354: LD_ADDR_VAR 0 12
50358: PUSH
50359: LD_INT 2
50361: PUSH
50362: LD_INT 1
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: LIST
50394: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50395: LD_ADDR_VAR 0 13
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 2
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: LIST
50434: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50435: LD_ADDR_VAR 0 14
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 3
50445: PUSH
50446: EMPTY
50447: LIST
50448: LIST
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: LD_INT 3
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 1
50462: NEG
50463: PUSH
50464: LD_INT 2
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50476: LD_ADDR_VAR 0 15
50480: PUSH
50481: LD_INT 2
50483: NEG
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 3
50494: NEG
50495: PUSH
50496: LD_INT 0
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 3
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: LIST
50519: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50520: LD_ADDR_VAR 0 16
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 3
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 3
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 3
50551: NEG
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: LIST
50565: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50566: LD_ADDR_VAR 0 17
50570: PUSH
50571: LD_INT 1
50573: NEG
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 0
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: LD_INT 2
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: LIST
50609: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50610: LD_ADDR_VAR 0 18
50614: PUSH
50615: LD_INT 2
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 3
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: LIST
50650: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50651: LD_ADDR_VAR 0 19
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: PUSH
50679: LD_INT 3
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50691: LD_ADDR_VAR 0 20
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 3
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 3
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 2
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: LIST
50731: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50732: LD_ADDR_VAR 0 21
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: LD_INT 3
50761: NEG
50762: PUSH
50763: LD_INT 1
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50776: LD_ADDR_VAR 0 22
50780: PUSH
50781: LD_INT 2
50783: NEG
50784: PUSH
50785: LD_INT 3
50787: NEG
50788: PUSH
50789: EMPTY
50790: LIST
50791: LIST
50792: PUSH
50793: LD_INT 3
50795: NEG
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 3
50807: NEG
50808: PUSH
50809: LD_INT 3
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: EMPTY
50818: LIST
50819: LIST
50820: LIST
50821: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50822: LD_ADDR_VAR 0 23
50826: PUSH
50827: LD_INT 0
50829: PUSH
50830: LD_INT 3
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 4
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: LIST
50865: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50866: LD_ADDR_VAR 0 24
50870: PUSH
50871: LD_INT 3
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 3
50883: PUSH
50884: LD_INT 1
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 4
50894: PUSH
50895: LD_INT 1
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50907: LD_ADDR_VAR 0 25
50911: PUSH
50912: LD_INT 3
50914: PUSH
50915: LD_INT 3
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 4
50924: PUSH
50925: LD_INT 3
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 3
50934: PUSH
50935: LD_INT 4
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: LIST
50946: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50947: LD_ADDR_VAR 0 26
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 3
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 1
50964: PUSH
50965: LD_INT 4
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50988: LD_ADDR_VAR 0 27
50992: PUSH
50993: LD_INT 3
50995: NEG
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 3
51006: NEG
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 4
51017: NEG
51018: PUSH
51019: LD_INT 1
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51032: LD_ADDR_VAR 0 28
51036: PUSH
51037: LD_INT 3
51039: NEG
51040: PUSH
51041: LD_INT 3
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 3
51051: NEG
51052: PUSH
51053: LD_INT 4
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 4
51063: NEG
51064: PUSH
51065: LD_INT 3
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: LIST
51077: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51078: LD_ADDR_VAR 0 29
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: LD_INT 3
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 4
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 4
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 5
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 0
51165: PUSH
51166: LD_INT 5
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 1
51176: PUSH
51177: LD_INT 4
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 6
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: LD_INT 6
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 1
51210: PUSH
51211: LD_INT 5
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51233: LD_ADDR_VAR 0 30
51237: PUSH
51238: LD_INT 2
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 1
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 3
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 4
51282: PUSH
51283: LD_INT 0
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 4
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 5
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 5
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 6
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 6
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51376: LD_ADDR_VAR 0 31
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 3
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 2
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 4
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: LD_INT 4
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 3
51433: PUSH
51434: LD_INT 4
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 5
51443: PUSH
51444: LD_INT 4
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 5
51453: PUSH
51454: LD_INT 5
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 4
51463: PUSH
51464: LD_INT 5
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 6
51473: PUSH
51474: LD_INT 5
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 6
51483: PUSH
51484: LD_INT 6
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 5
51493: PUSH
51494: LD_INT 6
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51515: LD_ADDR_VAR 0 32
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 0
51532: PUSH
51533: LD_INT 3
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 1
51553: PUSH
51554: LD_INT 4
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 0
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: LD_INT 5
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: LD_INT 5
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: LD_INT 4
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 6
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 0
51625: PUSH
51626: LD_INT 6
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: NEG
51636: PUSH
51637: LD_INT 5
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51658: LD_ADDR_VAR 0 33
51662: PUSH
51663: LD_INT 2
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 0
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 3
51687: NEG
51688: PUSH
51689: LD_INT 1
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: NEG
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 4
51721: NEG
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 4
51733: NEG
51734: PUSH
51735: LD_INT 1
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 5
51744: NEG
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 5
51755: NEG
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 5
51767: NEG
51768: PUSH
51769: LD_INT 1
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 6
51778: NEG
51779: PUSH
51780: LD_INT 0
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 6
51789: NEG
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51813: LD_ADDR_VAR 0 34
51817: PUSH
51818: LD_INT 2
51820: NEG
51821: PUSH
51822: LD_INT 3
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: LD_INT 2
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 3
51844: NEG
51845: PUSH
51846: LD_INT 3
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: LD_INT 4
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 4
51868: NEG
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 4
51880: NEG
51881: PUSH
51882: LD_INT 4
51884: NEG
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 4
51892: NEG
51893: PUSH
51894: LD_INT 5
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 5
51904: NEG
51905: PUSH
51906: LD_INT 4
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 5
51916: NEG
51917: PUSH
51918: LD_INT 5
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 5
51928: NEG
51929: PUSH
51930: LD_INT 6
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 6
51940: NEG
51941: PUSH
51942: LD_INT 5
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 6
51952: NEG
51953: PUSH
51954: LD_INT 6
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: LIST
51969: LIST
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51976: LD_ADDR_VAR 0 41
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: LD_INT 2
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: LD_INT 2
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: LIST
52019: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52020: LD_ADDR_VAR 0 42
52024: PUSH
52025: LD_INT 2
52027: PUSH
52028: LD_INT 0
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 2
52037: PUSH
52038: LD_INT 1
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 3
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: LIST
52060: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52061: LD_ADDR_VAR 0 43
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 2
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: LIST
52100: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52101: LD_ADDR_VAR 0 44
52105: PUSH
52106: LD_INT 0
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 1
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: NEG
52129: PUSH
52130: LD_INT 2
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: LIST
52141: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52142: LD_ADDR_VAR 0 45
52146: PUSH
52147: LD_INT 2
52149: NEG
52150: PUSH
52151: LD_INT 0
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: NEG
52161: PUSH
52162: LD_INT 1
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52186: LD_ADDR_VAR 0 46
52190: PUSH
52191: LD_INT 2
52193: NEG
52194: PUSH
52195: LD_INT 2
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 2
52205: NEG
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: NEG
52218: PUSH
52219: LD_INT 2
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: LIST
52231: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52232: LD_ADDR_VAR 0 47
52236: PUSH
52237: LD_INT 2
52239: NEG
52240: PUSH
52241: LD_INT 3
52243: NEG
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: LD_INT 3
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52265: LD_ADDR_VAR 0 48
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 2
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52296: LD_ADDR_VAR 0 49
52300: PUSH
52301: LD_INT 3
52303: PUSH
52304: LD_INT 1
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 3
52313: PUSH
52314: LD_INT 2
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52325: LD_ADDR_VAR 0 50
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: LD_INT 3
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 3
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52354: LD_ADDR_VAR 0 51
52358: PUSH
52359: LD_INT 1
52361: NEG
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 2
52372: NEG
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52385: LD_ADDR_VAR 0 52
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 3
52404: NEG
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52418: LD_ADDR_VAR 0 53
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: LD_INT 3
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 0
52437: PUSH
52438: LD_INT 3
52440: NEG
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: LIST
52461: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52462: LD_ADDR_VAR 0 54
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 3
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52503: LD_ADDR_VAR 0 55
52507: PUSH
52508: LD_INT 3
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: PUSH
52521: LD_INT 3
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: PUSH
52531: LD_INT 3
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52543: LD_ADDR_VAR 0 56
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: LD_INT 3
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 1
52570: NEG
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: LIST
52583: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52584: LD_ADDR_VAR 0 57
52588: PUSH
52589: LD_INT 2
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 0
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 3
52613: NEG
52614: PUSH
52615: LD_INT 1
52617: NEG
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: LIST
52627: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52628: LD_ADDR_VAR 0 58
52632: PUSH
52633: LD_INT 2
52635: NEG
52636: PUSH
52637: LD_INT 3
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: NEG
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 3
52659: NEG
52660: PUSH
52661: LD_INT 3
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52674: LD_ADDR_VAR 0 59
52678: PUSH
52679: LD_INT 1
52681: NEG
52682: PUSH
52683: LD_INT 2
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 0
52693: PUSH
52694: LD_INT 2
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 1
52707: NEG
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: LIST
52717: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52718: LD_ADDR_VAR 0 60
52722: PUSH
52723: LD_INT 1
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: PUSH
52747: LD_INT 1
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: LIST
52758: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52759: LD_ADDR_VAR 0 61
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52799: LD_ADDR_VAR 0 62
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 2
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 1
52826: NEG
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: LIST
52839: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52840: LD_ADDR_VAR 0 63
52844: PUSH
52845: LD_INT 1
52847: NEG
52848: PUSH
52849: LD_INT 1
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 2
52858: NEG
52859: PUSH
52860: LD_INT 0
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 2
52869: NEG
52870: PUSH
52871: LD_INT 1
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: LIST
52883: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52884: LD_ADDR_VAR 0 64
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 2
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 2
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: ST_TO_ADDR
// end ; 2 :
52930: GO 56196
52932: LD_INT 2
52934: DOUBLE
52935: EQUAL
52936: IFTRUE 52940
52938: GO 56195
52940: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52941: LD_ADDR_VAR 0 29
52945: PUSH
52946: LD_INT 4
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 4
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 5
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 5
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 4
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 3
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: LD_INT 1
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 3
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 5
53031: PUSH
53032: LD_INT 2
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 3
53041: PUSH
53042: LD_INT 3
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 4
53061: PUSH
53062: LD_INT 3
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 4
53071: PUSH
53072: LD_INT 4
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 4
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: PUSH
53092: LD_INT 3
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 2
53101: PUSH
53102: LD_INT 2
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 4
53111: PUSH
53112: LD_INT 2
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: LD_INT 4
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 4
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 3
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: LD_INT 4
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: LD_INT 5
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: LD_INT 5
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 1
53181: NEG
53182: PUSH
53183: LD_INT 4
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 1
53192: NEG
53193: PUSH
53194: LD_INT 3
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 2
53203: PUSH
53204: LD_INT 5
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: NEG
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 3
53224: NEG
53225: PUSH
53226: LD_INT 0
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 2
53247: NEG
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: NEG
53259: PUSH
53260: LD_INT 1
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 3
53269: NEG
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: NEG
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: NEG
53292: PUSH
53293: LD_INT 1
53295: NEG
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 4
53303: NEG
53304: PUSH
53305: LD_INT 2
53307: NEG
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 2
53315: NEG
53316: PUSH
53317: LD_INT 2
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 4
53326: NEG
53327: PUSH
53328: LD_INT 4
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 4
53338: NEG
53339: PUSH
53340: LD_INT 5
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 3
53350: NEG
53351: PUSH
53352: LD_INT 4
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 3
53362: NEG
53363: PUSH
53364: LD_INT 3
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 4
53374: NEG
53375: PUSH
53376: LD_INT 3
53378: NEG
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 5
53386: NEG
53387: PUSH
53388: LD_INT 4
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 5
53398: NEG
53399: PUSH
53400: LD_INT 5
53402: NEG
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: PUSH
53408: LD_INT 3
53410: NEG
53411: PUSH
53412: LD_INT 5
53414: NEG
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 5
53422: NEG
53423: PUSH
53424: LD_INT 3
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53479: LD_ADDR_VAR 0 30
53483: PUSH
53484: LD_INT 4
53486: PUSH
53487: LD_INT 4
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 4
53496: PUSH
53497: LD_INT 3
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 5
53506: PUSH
53507: LD_INT 4
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 5
53516: PUSH
53517: LD_INT 5
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 4
53526: PUSH
53527: LD_INT 5
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: LD_INT 4
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 5
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: LD_INT 5
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: LD_INT 3
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 0
53586: PUSH
53587: LD_INT 2
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 4
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 4
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: LD_INT 2
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 4
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 2
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 4
53669: NEG
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 4
53680: NEG
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 3
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 4
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 5
53725: NEG
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 5
53736: NEG
53737: PUSH
53738: LD_INT 1
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 5
53748: NEG
53749: PUSH
53750: LD_INT 2
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: LD_INT 2
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: NEG
53772: PUSH
53773: LD_INT 3
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 3
53783: NEG
53784: PUSH
53785: LD_INT 4
53787: NEG
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 2
53795: NEG
53796: PUSH
53797: LD_INT 3
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: NEG
53808: PUSH
53809: LD_INT 2
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 3
53819: NEG
53820: PUSH
53821: LD_INT 2
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 4
53831: NEG
53832: PUSH
53833: LD_INT 3
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 4
53843: NEG
53844: PUSH
53845: LD_INT 4
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 2
53855: NEG
53856: PUSH
53857: LD_INT 4
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 4
53867: NEG
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 4
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 5
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 4
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: LD_INT 3
53915: NEG
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 0
53923: PUSH
53924: LD_INT 3
53926: NEG
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 4
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 5
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 2
53958: PUSH
53959: LD_INT 3
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 2
53969: NEG
53970: PUSH
53971: LD_INT 5
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: EMPTY
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54026: LD_ADDR_VAR 0 31
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 4
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: LD_INT 4
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 5
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 5
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 4
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: NEG
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: LD_INT 5
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 3
54126: NEG
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 2
54149: NEG
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 2
54160: NEG
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 4
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 4
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 4
54205: NEG
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 2
54217: NEG
54218: PUSH
54219: LD_INT 2
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 4
54228: NEG
54229: PUSH
54230: LD_INT 4
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 4
54240: NEG
54241: PUSH
54242: LD_INT 5
54244: NEG
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 3
54252: NEG
54253: PUSH
54254: LD_INT 4
54256: NEG
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 3
54264: NEG
54265: PUSH
54266: LD_INT 3
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 4
54276: NEG
54277: PUSH
54278: LD_INT 3
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 5
54288: NEG
54289: PUSH
54290: LD_INT 4
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: NEG
54301: PUSH
54302: LD_INT 5
54304: NEG
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: LD_INT 5
54316: NEG
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 5
54324: NEG
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 0
54336: PUSH
54337: LD_INT 3
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 0
54347: PUSH
54348: LD_INT 4
54350: NEG
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 1
54358: PUSH
54359: LD_INT 3
54361: NEG
54362: PUSH
54363: EMPTY
54364: LIST
54365: LIST
54366: PUSH
54367: LD_INT 1
54369: PUSH
54370: LD_INT 2
54372: NEG
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: LD_INT 2
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 3
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: LD_INT 4
54430: NEG
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 4
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 4
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 5
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 5
54469: PUSH
54470: LD_INT 1
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 4
54479: PUSH
54480: LD_INT 1
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: LD_INT 0
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 3
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 2
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 2
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54576: LD_ADDR_VAR 0 32
54580: PUSH
54581: LD_INT 4
54583: NEG
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 4
54594: NEG
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: NEG
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 3
54617: NEG
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 4
54628: NEG
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 5
54639: NEG
54640: PUSH
54641: LD_INT 0
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 5
54650: NEG
54651: PUSH
54652: LD_INT 1
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 5
54662: NEG
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: NEG
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 3
54685: NEG
54686: PUSH
54687: LD_INT 3
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 3
54697: NEG
54698: PUSH
54699: LD_INT 4
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 3
54713: NEG
54714: PUSH
54715: EMPTY
54716: LIST
54717: LIST
54718: PUSH
54719: LD_INT 2
54721: NEG
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 3
54733: NEG
54734: PUSH
54735: LD_INT 2
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 4
54745: NEG
54746: PUSH
54747: LD_INT 3
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: NEG
54758: PUSH
54759: LD_INT 4
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 4
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 4
54781: NEG
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: LD_INT 0
54793: PUSH
54794: LD_INT 4
54796: NEG
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 5
54807: NEG
54808: PUSH
54809: EMPTY
54810: LIST
54811: LIST
54812: PUSH
54813: LD_INT 1
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 3
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 3
54840: NEG
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: LD_INT 4
54852: NEG
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 5
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 2
54872: PUSH
54873: LD_INT 3
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 5
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: LD_INT 0
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 3
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 4
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 4
54926: PUSH
54927: LD_INT 1
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: PUSH
54947: LD_INT 0
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 2
54956: PUSH
54957: LD_INT 1
54959: NEG
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 2
54967: PUSH
54968: LD_INT 2
54970: NEG
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: PUSH
54979: LD_INT 2
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 4
54988: PUSH
54989: LD_INT 4
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 4
54998: PUSH
54999: LD_INT 3
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 5
55008: PUSH
55009: LD_INT 4
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 5
55018: PUSH
55019: LD_INT 5
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 4
55028: PUSH
55029: LD_INT 5
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 3
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 3
55048: PUSH
55049: LD_INT 3
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 5
55058: PUSH
55059: LD_INT 3
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 3
55068: PUSH
55069: LD_INT 5
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: LIST
55091: LIST
55092: LIST
55093: LIST
55094: LIST
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55123: LD_ADDR_VAR 0 33
55127: PUSH
55128: LD_INT 4
55130: NEG
55131: PUSH
55132: LD_INT 4
55134: NEG
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 4
55142: NEG
55143: PUSH
55144: LD_INT 5
55146: NEG
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: NEG
55155: PUSH
55156: LD_INT 4
55158: NEG
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: NEG
55167: PUSH
55168: LD_INT 3
55170: NEG
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: PUSH
55176: LD_INT 4
55178: NEG
55179: PUSH
55180: LD_INT 3
55182: NEG
55183: PUSH
55184: EMPTY
55185: LIST
55186: LIST
55187: PUSH
55188: LD_INT 5
55190: NEG
55191: PUSH
55192: LD_INT 4
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 5
55202: NEG
55203: PUSH
55204: LD_INT 5
55206: NEG
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 3
55214: NEG
55215: PUSH
55216: LD_INT 5
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 5
55226: NEG
55227: PUSH
55228: LD_INT 3
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 3
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 4
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: PUSH
55261: LD_INT 3
55263: NEG
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: PUSH
55269: LD_INT 1
55271: PUSH
55272: LD_INT 2
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 3
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: NEG
55306: PUSH
55307: LD_INT 4
55309: NEG
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: PUSH
55318: LD_INT 2
55320: NEG
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 4
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 4
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 4
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: LD_INT 5
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 5
55371: PUSH
55372: LD_INT 1
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 4
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 3
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 3
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 3
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 5
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 3
55433: PUSH
55434: LD_INT 3
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 3
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 4
55453: PUSH
55454: LD_INT 3
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 4
55463: PUSH
55464: LD_INT 4
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 3
55473: PUSH
55474: LD_INT 4
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: LD_INT 3
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 4
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 2
55513: PUSH
55514: LD_INT 4
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: LD_INT 4
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: LD_INT 3
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: LD_INT 4
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: LD_INT 5
55556: PUSH
55557: EMPTY
55558: LIST
55559: LIST
55560: PUSH
55561: LD_INT 0
55563: PUSH
55564: LD_INT 5
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: PUSH
55571: LD_INT 1
55573: NEG
55574: PUSH
55575: LD_INT 4
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: LD_INT 3
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: LD_INT 5
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: LIST
55629: LIST
55630: LIST
55631: LIST
55632: LIST
55633: LIST
55634: LIST
55635: LIST
55636: LIST
55637: LIST
55638: LIST
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55661: LD_ADDR_VAR 0 34
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 4
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 5
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: LD_INT 4
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 3
55704: NEG
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 0
55712: PUSH
55713: LD_INT 3
55715: NEG
55716: PUSH
55717: EMPTY
55718: LIST
55719: LIST
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: LD_INT 4
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 1
55735: NEG
55736: PUSH
55737: LD_INT 5
55739: NEG
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: LD_INT 3
55750: NEG
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 2
55758: NEG
55759: PUSH
55760: LD_INT 5
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 4
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 3
55811: PUSH
55812: LD_INT 1
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 2
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 2
55845: NEG
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 4
55853: PUSH
55854: LD_INT 2
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 4
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 5
55883: PUSH
55884: LD_INT 4
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 5
55893: PUSH
55894: LD_INT 5
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 4
55903: PUSH
55904: LD_INT 5
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 3
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 3
55923: PUSH
55924: LD_INT 3
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 5
55933: PUSH
55934: LD_INT 3
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 3
55943: PUSH
55944: LD_INT 5
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 0
55953: PUSH
55954: LD_INT 3
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: EMPTY
55968: LIST
55969: LIST
55970: PUSH
55971: LD_INT 1
55973: PUSH
55974: LD_INT 3
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 4
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: LD_INT 4
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 1
56003: NEG
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: PUSH
56026: LD_INT 4
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 2
56035: NEG
56036: PUSH
56037: LD_INT 2
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 4
56046: NEG
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 4
56057: NEG
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: PUSH
56063: EMPTY
56064: LIST
56065: LIST
56066: PUSH
56067: LD_INT 3
56069: NEG
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: LD_INT 1
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 4
56091: NEG
56092: PUSH
56093: LD_INT 1
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: NEG
56103: PUSH
56104: LD_INT 0
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 5
56113: NEG
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 5
56125: NEG
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 3
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: ST_TO_ADDR
// end ; end ;
56193: GO 56196
56195: POP
// case btype of b_depot , b_warehouse :
56196: LD_VAR 0 1
56200: PUSH
56201: LD_INT 0
56203: DOUBLE
56204: EQUAL
56205: IFTRUE 56215
56207: LD_INT 1
56209: DOUBLE
56210: EQUAL
56211: IFTRUE 56215
56213: GO 56416
56215: POP
// case nation of nation_american :
56216: LD_VAR 0 5
56220: PUSH
56221: LD_INT 1
56223: DOUBLE
56224: EQUAL
56225: IFTRUE 56229
56227: GO 56285
56229: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56230: LD_ADDR_VAR 0 9
56234: PUSH
56235: LD_VAR 0 11
56239: PUSH
56240: LD_VAR 0 12
56244: PUSH
56245: LD_VAR 0 13
56249: PUSH
56250: LD_VAR 0 14
56254: PUSH
56255: LD_VAR 0 15
56259: PUSH
56260: LD_VAR 0 16
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: PUSH
56273: LD_VAR 0 4
56277: PUSH
56278: LD_INT 1
56280: PLUS
56281: ARRAY
56282: ST_TO_ADDR
56283: GO 56414
56285: LD_INT 2
56287: DOUBLE
56288: EQUAL
56289: IFTRUE 56293
56291: GO 56349
56293: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56294: LD_ADDR_VAR 0 9
56298: PUSH
56299: LD_VAR 0 17
56303: PUSH
56304: LD_VAR 0 18
56308: PUSH
56309: LD_VAR 0 19
56313: PUSH
56314: LD_VAR 0 20
56318: PUSH
56319: LD_VAR 0 21
56323: PUSH
56324: LD_VAR 0 22
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: PUSH
56337: LD_VAR 0 4
56341: PUSH
56342: LD_INT 1
56344: PLUS
56345: ARRAY
56346: ST_TO_ADDR
56347: GO 56414
56349: LD_INT 3
56351: DOUBLE
56352: EQUAL
56353: IFTRUE 56357
56355: GO 56413
56357: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56358: LD_ADDR_VAR 0 9
56362: PUSH
56363: LD_VAR 0 23
56367: PUSH
56368: LD_VAR 0 24
56372: PUSH
56373: LD_VAR 0 25
56377: PUSH
56378: LD_VAR 0 26
56382: PUSH
56383: LD_VAR 0 27
56387: PUSH
56388: LD_VAR 0 28
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: PUSH
56401: LD_VAR 0 4
56405: PUSH
56406: LD_INT 1
56408: PLUS
56409: ARRAY
56410: ST_TO_ADDR
56411: GO 56414
56413: POP
56414: GO 56969
56416: LD_INT 2
56418: DOUBLE
56419: EQUAL
56420: IFTRUE 56430
56422: LD_INT 3
56424: DOUBLE
56425: EQUAL
56426: IFTRUE 56430
56428: GO 56486
56430: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56431: LD_ADDR_VAR 0 9
56435: PUSH
56436: LD_VAR 0 29
56440: PUSH
56441: LD_VAR 0 30
56445: PUSH
56446: LD_VAR 0 31
56450: PUSH
56451: LD_VAR 0 32
56455: PUSH
56456: LD_VAR 0 33
56460: PUSH
56461: LD_VAR 0 34
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: PUSH
56474: LD_VAR 0 4
56478: PUSH
56479: LD_INT 1
56481: PLUS
56482: ARRAY
56483: ST_TO_ADDR
56484: GO 56969
56486: LD_INT 16
56488: DOUBLE
56489: EQUAL
56490: IFTRUE 56548
56492: LD_INT 17
56494: DOUBLE
56495: EQUAL
56496: IFTRUE 56548
56498: LD_INT 18
56500: DOUBLE
56501: EQUAL
56502: IFTRUE 56548
56504: LD_INT 19
56506: DOUBLE
56507: EQUAL
56508: IFTRUE 56548
56510: LD_INT 22
56512: DOUBLE
56513: EQUAL
56514: IFTRUE 56548
56516: LD_INT 20
56518: DOUBLE
56519: EQUAL
56520: IFTRUE 56548
56522: LD_INT 21
56524: DOUBLE
56525: EQUAL
56526: IFTRUE 56548
56528: LD_INT 23
56530: DOUBLE
56531: EQUAL
56532: IFTRUE 56548
56534: LD_INT 24
56536: DOUBLE
56537: EQUAL
56538: IFTRUE 56548
56540: LD_INT 25
56542: DOUBLE
56543: EQUAL
56544: IFTRUE 56548
56546: GO 56604
56548: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56549: LD_ADDR_VAR 0 9
56553: PUSH
56554: LD_VAR 0 35
56558: PUSH
56559: LD_VAR 0 36
56563: PUSH
56564: LD_VAR 0 37
56568: PUSH
56569: LD_VAR 0 38
56573: PUSH
56574: LD_VAR 0 39
56578: PUSH
56579: LD_VAR 0 40
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: PUSH
56592: LD_VAR 0 4
56596: PUSH
56597: LD_INT 1
56599: PLUS
56600: ARRAY
56601: ST_TO_ADDR
56602: GO 56969
56604: LD_INT 6
56606: DOUBLE
56607: EQUAL
56608: IFTRUE 56660
56610: LD_INT 7
56612: DOUBLE
56613: EQUAL
56614: IFTRUE 56660
56616: LD_INT 8
56618: DOUBLE
56619: EQUAL
56620: IFTRUE 56660
56622: LD_INT 13
56624: DOUBLE
56625: EQUAL
56626: IFTRUE 56660
56628: LD_INT 12
56630: DOUBLE
56631: EQUAL
56632: IFTRUE 56660
56634: LD_INT 15
56636: DOUBLE
56637: EQUAL
56638: IFTRUE 56660
56640: LD_INT 11
56642: DOUBLE
56643: EQUAL
56644: IFTRUE 56660
56646: LD_INT 14
56648: DOUBLE
56649: EQUAL
56650: IFTRUE 56660
56652: LD_INT 10
56654: DOUBLE
56655: EQUAL
56656: IFTRUE 56660
56658: GO 56716
56660: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56661: LD_ADDR_VAR 0 9
56665: PUSH
56666: LD_VAR 0 41
56670: PUSH
56671: LD_VAR 0 42
56675: PUSH
56676: LD_VAR 0 43
56680: PUSH
56681: LD_VAR 0 44
56685: PUSH
56686: LD_VAR 0 45
56690: PUSH
56691: LD_VAR 0 46
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: PUSH
56704: LD_VAR 0 4
56708: PUSH
56709: LD_INT 1
56711: PLUS
56712: ARRAY
56713: ST_TO_ADDR
56714: GO 56969
56716: LD_INT 36
56718: DOUBLE
56719: EQUAL
56720: IFTRUE 56724
56722: GO 56780
56724: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56725: LD_ADDR_VAR 0 9
56729: PUSH
56730: LD_VAR 0 47
56734: PUSH
56735: LD_VAR 0 48
56739: PUSH
56740: LD_VAR 0 49
56744: PUSH
56745: LD_VAR 0 50
56749: PUSH
56750: LD_VAR 0 51
56754: PUSH
56755: LD_VAR 0 52
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: PUSH
56768: LD_VAR 0 4
56772: PUSH
56773: LD_INT 1
56775: PLUS
56776: ARRAY
56777: ST_TO_ADDR
56778: GO 56969
56780: LD_INT 4
56782: DOUBLE
56783: EQUAL
56784: IFTRUE 56806
56786: LD_INT 5
56788: DOUBLE
56789: EQUAL
56790: IFTRUE 56806
56792: LD_INT 34
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56806
56798: LD_INT 37
56800: DOUBLE
56801: EQUAL
56802: IFTRUE 56806
56804: GO 56862
56806: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56807: LD_ADDR_VAR 0 9
56811: PUSH
56812: LD_VAR 0 53
56816: PUSH
56817: LD_VAR 0 54
56821: PUSH
56822: LD_VAR 0 55
56826: PUSH
56827: LD_VAR 0 56
56831: PUSH
56832: LD_VAR 0 57
56836: PUSH
56837: LD_VAR 0 58
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: PUSH
56850: LD_VAR 0 4
56854: PUSH
56855: LD_INT 1
56857: PLUS
56858: ARRAY
56859: ST_TO_ADDR
56860: GO 56969
56862: LD_INT 31
56864: DOUBLE
56865: EQUAL
56866: IFTRUE 56912
56868: LD_INT 32
56870: DOUBLE
56871: EQUAL
56872: IFTRUE 56912
56874: LD_INT 33
56876: DOUBLE
56877: EQUAL
56878: IFTRUE 56912
56880: LD_INT 27
56882: DOUBLE
56883: EQUAL
56884: IFTRUE 56912
56886: LD_INT 26
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56912
56892: LD_INT 28
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56912
56898: LD_INT 29
56900: DOUBLE
56901: EQUAL
56902: IFTRUE 56912
56904: LD_INT 30
56906: DOUBLE
56907: EQUAL
56908: IFTRUE 56912
56910: GO 56968
56912: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56913: LD_ADDR_VAR 0 9
56917: PUSH
56918: LD_VAR 0 59
56922: PUSH
56923: LD_VAR 0 60
56927: PUSH
56928: LD_VAR 0 61
56932: PUSH
56933: LD_VAR 0 62
56937: PUSH
56938: LD_VAR 0 63
56942: PUSH
56943: LD_VAR 0 64
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: PUSH
56956: LD_VAR 0 4
56960: PUSH
56961: LD_INT 1
56963: PLUS
56964: ARRAY
56965: ST_TO_ADDR
56966: GO 56969
56968: POP
// temp_list2 = [ ] ;
56969: LD_ADDR_VAR 0 10
56973: PUSH
56974: EMPTY
56975: ST_TO_ADDR
// for i in temp_list do
56976: LD_ADDR_VAR 0 8
56980: PUSH
56981: LD_VAR 0 9
56985: PUSH
56986: FOR_IN
56987: IFFALSE 57039
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56989: LD_ADDR_VAR 0 10
56993: PUSH
56994: LD_VAR 0 10
56998: PUSH
56999: LD_VAR 0 8
57003: PUSH
57004: LD_INT 1
57006: ARRAY
57007: PUSH
57008: LD_VAR 0 2
57012: PLUS
57013: PUSH
57014: LD_VAR 0 8
57018: PUSH
57019: LD_INT 2
57021: ARRAY
57022: PUSH
57023: LD_VAR 0 3
57027: PLUS
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: EMPTY
57034: LIST
57035: ADD
57036: ST_TO_ADDR
57037: GO 56986
57039: POP
57040: POP
// result = temp_list2 ;
57041: LD_ADDR_VAR 0 7
57045: PUSH
57046: LD_VAR 0 10
57050: ST_TO_ADDR
// end ;
57051: LD_VAR 0 7
57055: RET
// export function EnemyInRange ( unit , dist ) ; begin
57056: LD_INT 0
57058: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57059: LD_ADDR_VAR 0 3
57063: PUSH
57064: LD_VAR 0 1
57068: PPUSH
57069: CALL_OW 255
57073: PPUSH
57074: LD_VAR 0 1
57078: PPUSH
57079: CALL_OW 250
57083: PPUSH
57084: LD_VAR 0 1
57088: PPUSH
57089: CALL_OW 251
57093: PPUSH
57094: LD_VAR 0 2
57098: PPUSH
57099: CALL 30452 0 4
57103: PUSH
57104: LD_INT 4
57106: ARRAY
57107: ST_TO_ADDR
// end ;
57108: LD_VAR 0 3
57112: RET
// export function PlayerSeeMe ( unit ) ; begin
57113: LD_INT 0
57115: PPUSH
// result := See ( your_side , unit ) ;
57116: LD_ADDR_VAR 0 2
57120: PUSH
57121: LD_OWVAR 2
57125: PPUSH
57126: LD_VAR 0 1
57130: PPUSH
57131: CALL_OW 292
57135: ST_TO_ADDR
// end ;
57136: LD_VAR 0 2
57140: RET
// export function ReverseDir ( unit ) ; begin
57141: LD_INT 0
57143: PPUSH
// if not unit then
57144: LD_VAR 0 1
57148: NOT
57149: IFFALSE 57153
// exit ;
57151: GO 57176
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57153: LD_ADDR_VAR 0 2
57157: PUSH
57158: LD_VAR 0 1
57162: PPUSH
57163: CALL_OW 254
57167: PUSH
57168: LD_INT 3
57170: PLUS
57171: PUSH
57172: LD_INT 6
57174: MOD
57175: ST_TO_ADDR
// end ;
57176: LD_VAR 0 2
57180: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57181: LD_INT 0
57183: PPUSH
57184: PPUSH
57185: PPUSH
57186: PPUSH
57187: PPUSH
// if not hexes then
57188: LD_VAR 0 2
57192: NOT
57193: IFFALSE 57197
// exit ;
57195: GO 57345
// dist := 9999 ;
57197: LD_ADDR_VAR 0 5
57201: PUSH
57202: LD_INT 9999
57204: ST_TO_ADDR
// for i = 1 to hexes do
57205: LD_ADDR_VAR 0 4
57209: PUSH
57210: DOUBLE
57211: LD_INT 1
57213: DEC
57214: ST_TO_ADDR
57215: LD_VAR 0 2
57219: PUSH
57220: FOR_TO
57221: IFFALSE 57333
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57223: LD_VAR 0 1
57227: PPUSH
57228: LD_VAR 0 2
57232: PUSH
57233: LD_VAR 0 4
57237: ARRAY
57238: PUSH
57239: LD_INT 1
57241: ARRAY
57242: PPUSH
57243: LD_VAR 0 2
57247: PUSH
57248: LD_VAR 0 4
57252: ARRAY
57253: PUSH
57254: LD_INT 2
57256: ARRAY
57257: PPUSH
57258: CALL_OW 297
57262: PUSH
57263: LD_VAR 0 5
57267: LESS
57268: IFFALSE 57331
// begin hex := hexes [ i ] ;
57270: LD_ADDR_VAR 0 7
57274: PUSH
57275: LD_VAR 0 2
57279: PUSH
57280: LD_VAR 0 4
57284: ARRAY
57285: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57286: LD_ADDR_VAR 0 5
57290: PUSH
57291: LD_VAR 0 1
57295: PPUSH
57296: LD_VAR 0 2
57300: PUSH
57301: LD_VAR 0 4
57305: ARRAY
57306: PUSH
57307: LD_INT 1
57309: ARRAY
57310: PPUSH
57311: LD_VAR 0 2
57315: PUSH
57316: LD_VAR 0 4
57320: ARRAY
57321: PUSH
57322: LD_INT 2
57324: ARRAY
57325: PPUSH
57326: CALL_OW 297
57330: ST_TO_ADDR
// end ; end ;
57331: GO 57220
57333: POP
57334: POP
// result := hex ;
57335: LD_ADDR_VAR 0 3
57339: PUSH
57340: LD_VAR 0 7
57344: ST_TO_ADDR
// end ;
57345: LD_VAR 0 3
57349: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57350: LD_INT 0
57352: PPUSH
57353: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57354: LD_VAR 0 1
57358: NOT
57359: PUSH
57360: LD_VAR 0 1
57364: PUSH
57365: LD_INT 21
57367: PUSH
57368: LD_INT 2
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 23
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: EMPTY
57382: LIST
57383: LIST
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PPUSH
57389: CALL_OW 69
57393: IN
57394: NOT
57395: OR
57396: IFFALSE 57400
// exit ;
57398: GO 57447
// for i = 1 to 3 do
57400: LD_ADDR_VAR 0 3
57404: PUSH
57405: DOUBLE
57406: LD_INT 1
57408: DEC
57409: ST_TO_ADDR
57410: LD_INT 3
57412: PUSH
57413: FOR_TO
57414: IFFALSE 57445
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57416: LD_VAR 0 1
57420: PPUSH
57421: CALL_OW 250
57425: PPUSH
57426: LD_VAR 0 1
57430: PPUSH
57431: CALL_OW 251
57435: PPUSH
57436: LD_INT 1
57438: PPUSH
57439: CALL_OW 453
57443: GO 57413
57445: POP
57446: POP
// end ;
57447: LD_VAR 0 2
57451: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57452: LD_INT 0
57454: PPUSH
57455: PPUSH
57456: PPUSH
57457: PPUSH
57458: PPUSH
57459: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57460: LD_VAR 0 1
57464: NOT
57465: PUSH
57466: LD_VAR 0 2
57470: NOT
57471: OR
57472: PUSH
57473: LD_VAR 0 1
57477: PPUSH
57478: CALL_OW 314
57482: OR
57483: IFFALSE 57487
// exit ;
57485: GO 57928
// x := GetX ( enemy_unit ) ;
57487: LD_ADDR_VAR 0 7
57491: PUSH
57492: LD_VAR 0 2
57496: PPUSH
57497: CALL_OW 250
57501: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57502: LD_ADDR_VAR 0 8
57506: PUSH
57507: LD_VAR 0 2
57511: PPUSH
57512: CALL_OW 251
57516: ST_TO_ADDR
// if not x or not y then
57517: LD_VAR 0 7
57521: NOT
57522: PUSH
57523: LD_VAR 0 8
57527: NOT
57528: OR
57529: IFFALSE 57533
// exit ;
57531: GO 57928
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57533: LD_ADDR_VAR 0 6
57537: PUSH
57538: LD_VAR 0 7
57542: PPUSH
57543: LD_INT 0
57545: PPUSH
57546: LD_INT 4
57548: PPUSH
57549: CALL_OW 272
57553: PUSH
57554: LD_VAR 0 8
57558: PPUSH
57559: LD_INT 0
57561: PPUSH
57562: LD_INT 4
57564: PPUSH
57565: CALL_OW 273
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_VAR 0 7
57578: PPUSH
57579: LD_INT 1
57581: PPUSH
57582: LD_INT 4
57584: PPUSH
57585: CALL_OW 272
57589: PUSH
57590: LD_VAR 0 8
57594: PPUSH
57595: LD_INT 1
57597: PPUSH
57598: LD_INT 4
57600: PPUSH
57601: CALL_OW 273
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_VAR 0 7
57614: PPUSH
57615: LD_INT 2
57617: PPUSH
57618: LD_INT 4
57620: PPUSH
57621: CALL_OW 272
57625: PUSH
57626: LD_VAR 0 8
57630: PPUSH
57631: LD_INT 2
57633: PPUSH
57634: LD_INT 4
57636: PPUSH
57637: CALL_OW 273
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_VAR 0 7
57650: PPUSH
57651: LD_INT 3
57653: PPUSH
57654: LD_INT 4
57656: PPUSH
57657: CALL_OW 272
57661: PUSH
57662: LD_VAR 0 8
57666: PPUSH
57667: LD_INT 3
57669: PPUSH
57670: LD_INT 4
57672: PPUSH
57673: CALL_OW 273
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_VAR 0 7
57686: PPUSH
57687: LD_INT 4
57689: PPUSH
57690: LD_INT 4
57692: PPUSH
57693: CALL_OW 272
57697: PUSH
57698: LD_VAR 0 8
57702: PPUSH
57703: LD_INT 4
57705: PPUSH
57706: LD_INT 4
57708: PPUSH
57709: CALL_OW 273
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_VAR 0 7
57722: PPUSH
57723: LD_INT 5
57725: PPUSH
57726: LD_INT 4
57728: PPUSH
57729: CALL_OW 272
57733: PUSH
57734: LD_VAR 0 8
57738: PPUSH
57739: LD_INT 5
57741: PPUSH
57742: LD_INT 4
57744: PPUSH
57745: CALL_OW 273
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: ST_TO_ADDR
// for i = tmp downto 1 do
57762: LD_ADDR_VAR 0 4
57766: PUSH
57767: DOUBLE
57768: LD_VAR 0 6
57772: INC
57773: ST_TO_ADDR
57774: LD_INT 1
57776: PUSH
57777: FOR_DOWNTO
57778: IFFALSE 57879
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57780: LD_VAR 0 6
57784: PUSH
57785: LD_VAR 0 4
57789: ARRAY
57790: PUSH
57791: LD_INT 1
57793: ARRAY
57794: PPUSH
57795: LD_VAR 0 6
57799: PUSH
57800: LD_VAR 0 4
57804: ARRAY
57805: PUSH
57806: LD_INT 2
57808: ARRAY
57809: PPUSH
57810: CALL_OW 488
57814: NOT
57815: PUSH
57816: LD_VAR 0 6
57820: PUSH
57821: LD_VAR 0 4
57825: ARRAY
57826: PUSH
57827: LD_INT 1
57829: ARRAY
57830: PPUSH
57831: LD_VAR 0 6
57835: PUSH
57836: LD_VAR 0 4
57840: ARRAY
57841: PUSH
57842: LD_INT 2
57844: ARRAY
57845: PPUSH
57846: CALL_OW 428
57850: PUSH
57851: LD_INT 0
57853: NONEQUAL
57854: OR
57855: IFFALSE 57877
// tmp := Delete ( tmp , i ) ;
57857: LD_ADDR_VAR 0 6
57861: PUSH
57862: LD_VAR 0 6
57866: PPUSH
57867: LD_VAR 0 4
57871: PPUSH
57872: CALL_OW 3
57876: ST_TO_ADDR
57877: GO 57777
57879: POP
57880: POP
// j := GetClosestHex ( unit , tmp ) ;
57881: LD_ADDR_VAR 0 5
57885: PUSH
57886: LD_VAR 0 1
57890: PPUSH
57891: LD_VAR 0 6
57895: PPUSH
57896: CALL 57181 0 2
57900: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57901: LD_VAR 0 1
57905: PPUSH
57906: LD_VAR 0 5
57910: PUSH
57911: LD_INT 1
57913: ARRAY
57914: PPUSH
57915: LD_VAR 0 5
57919: PUSH
57920: LD_INT 2
57922: ARRAY
57923: PPUSH
57924: CALL_OW 111
// end ;
57928: LD_VAR 0 3
57932: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57933: LD_INT 0
57935: PPUSH
57936: PPUSH
57937: PPUSH
// uc_side = 0 ;
57938: LD_ADDR_OWVAR 20
57942: PUSH
57943: LD_INT 0
57945: ST_TO_ADDR
// uc_nation = 0 ;
57946: LD_ADDR_OWVAR 21
57950: PUSH
57951: LD_INT 0
57953: ST_TO_ADDR
// InitHc_All ( ) ;
57954: CALL_OW 584
// InitVc ;
57958: CALL_OW 20
// if mastodonts then
57962: LD_VAR 0 6
57966: IFFALSE 58033
// for i = 1 to mastodonts do
57968: LD_ADDR_VAR 0 11
57972: PUSH
57973: DOUBLE
57974: LD_INT 1
57976: DEC
57977: ST_TO_ADDR
57978: LD_VAR 0 6
57982: PUSH
57983: FOR_TO
57984: IFFALSE 58031
// begin vc_chassis := 31 ;
57986: LD_ADDR_OWVAR 37
57990: PUSH
57991: LD_INT 31
57993: ST_TO_ADDR
// vc_control := control_rider ;
57994: LD_ADDR_OWVAR 38
57998: PUSH
57999: LD_INT 4
58001: ST_TO_ADDR
// animal := CreateVehicle ;
58002: LD_ADDR_VAR 0 12
58006: PUSH
58007: CALL_OW 45
58011: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58012: LD_VAR 0 12
58016: PPUSH
58017: LD_VAR 0 8
58021: PPUSH
58022: LD_INT 0
58024: PPUSH
58025: CALL 60221 0 3
// end ;
58029: GO 57983
58031: POP
58032: POP
// if horses then
58033: LD_VAR 0 5
58037: IFFALSE 58104
// for i = 1 to horses do
58039: LD_ADDR_VAR 0 11
58043: PUSH
58044: DOUBLE
58045: LD_INT 1
58047: DEC
58048: ST_TO_ADDR
58049: LD_VAR 0 5
58053: PUSH
58054: FOR_TO
58055: IFFALSE 58102
// begin hc_class := 21 ;
58057: LD_ADDR_OWVAR 28
58061: PUSH
58062: LD_INT 21
58064: ST_TO_ADDR
// hc_gallery :=  ;
58065: LD_ADDR_OWVAR 33
58069: PUSH
58070: LD_STRING 
58072: ST_TO_ADDR
// animal := CreateHuman ;
58073: LD_ADDR_VAR 0 12
58077: PUSH
58078: CALL_OW 44
58082: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58083: LD_VAR 0 12
58087: PPUSH
58088: LD_VAR 0 8
58092: PPUSH
58093: LD_INT 0
58095: PPUSH
58096: CALL 60221 0 3
// end ;
58100: GO 58054
58102: POP
58103: POP
// if birds then
58104: LD_VAR 0 1
58108: IFFALSE 58175
// for i = 1 to birds do
58110: LD_ADDR_VAR 0 11
58114: PUSH
58115: DOUBLE
58116: LD_INT 1
58118: DEC
58119: ST_TO_ADDR
58120: LD_VAR 0 1
58124: PUSH
58125: FOR_TO
58126: IFFALSE 58173
// begin hc_class = 18 ;
58128: LD_ADDR_OWVAR 28
58132: PUSH
58133: LD_INT 18
58135: ST_TO_ADDR
// hc_gallery =  ;
58136: LD_ADDR_OWVAR 33
58140: PUSH
58141: LD_STRING 
58143: ST_TO_ADDR
// animal := CreateHuman ;
58144: LD_ADDR_VAR 0 12
58148: PUSH
58149: CALL_OW 44
58153: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58154: LD_VAR 0 12
58158: PPUSH
58159: LD_VAR 0 8
58163: PPUSH
58164: LD_INT 0
58166: PPUSH
58167: CALL 60221 0 3
// end ;
58171: GO 58125
58173: POP
58174: POP
// if tigers then
58175: LD_VAR 0 2
58179: IFFALSE 58263
// for i = 1 to tigers do
58181: LD_ADDR_VAR 0 11
58185: PUSH
58186: DOUBLE
58187: LD_INT 1
58189: DEC
58190: ST_TO_ADDR
58191: LD_VAR 0 2
58195: PUSH
58196: FOR_TO
58197: IFFALSE 58261
// begin hc_class = class_tiger ;
58199: LD_ADDR_OWVAR 28
58203: PUSH
58204: LD_INT 14
58206: ST_TO_ADDR
// hc_gallery =  ;
58207: LD_ADDR_OWVAR 33
58211: PUSH
58212: LD_STRING 
58214: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58215: LD_ADDR_OWVAR 35
58219: PUSH
58220: LD_INT 7
58222: NEG
58223: PPUSH
58224: LD_INT 7
58226: PPUSH
58227: CALL_OW 12
58231: ST_TO_ADDR
// animal := CreateHuman ;
58232: LD_ADDR_VAR 0 12
58236: PUSH
58237: CALL_OW 44
58241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58242: LD_VAR 0 12
58246: PPUSH
58247: LD_VAR 0 8
58251: PPUSH
58252: LD_INT 0
58254: PPUSH
58255: CALL 60221 0 3
// end ;
58259: GO 58196
58261: POP
58262: POP
// if apemans then
58263: LD_VAR 0 3
58267: IFFALSE 58390
// for i = 1 to apemans do
58269: LD_ADDR_VAR 0 11
58273: PUSH
58274: DOUBLE
58275: LD_INT 1
58277: DEC
58278: ST_TO_ADDR
58279: LD_VAR 0 3
58283: PUSH
58284: FOR_TO
58285: IFFALSE 58388
// begin hc_class = class_apeman ;
58287: LD_ADDR_OWVAR 28
58291: PUSH
58292: LD_INT 12
58294: ST_TO_ADDR
// hc_gallery =  ;
58295: LD_ADDR_OWVAR 33
58299: PUSH
58300: LD_STRING 
58302: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58303: LD_ADDR_OWVAR 35
58307: PUSH
58308: LD_INT 2
58310: NEG
58311: PPUSH
58312: LD_INT 2
58314: PPUSH
58315: CALL_OW 12
58319: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58320: LD_ADDR_OWVAR 31
58324: PUSH
58325: LD_INT 1
58327: PPUSH
58328: LD_INT 3
58330: PPUSH
58331: CALL_OW 12
58335: PUSH
58336: LD_INT 1
58338: PPUSH
58339: LD_INT 3
58341: PPUSH
58342: CALL_OW 12
58346: PUSH
58347: LD_INT 0
58349: PUSH
58350: LD_INT 0
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// animal := CreateHuman ;
58359: LD_ADDR_VAR 0 12
58363: PUSH
58364: CALL_OW 44
58368: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58369: LD_VAR 0 12
58373: PPUSH
58374: LD_VAR 0 8
58378: PPUSH
58379: LD_INT 0
58381: PPUSH
58382: CALL 60221 0 3
// end ;
58386: GO 58284
58388: POP
58389: POP
// if enchidnas then
58390: LD_VAR 0 4
58394: IFFALSE 58461
// for i = 1 to enchidnas do
58396: LD_ADDR_VAR 0 11
58400: PUSH
58401: DOUBLE
58402: LD_INT 1
58404: DEC
58405: ST_TO_ADDR
58406: LD_VAR 0 4
58410: PUSH
58411: FOR_TO
58412: IFFALSE 58459
// begin hc_class = 13 ;
58414: LD_ADDR_OWVAR 28
58418: PUSH
58419: LD_INT 13
58421: ST_TO_ADDR
// hc_gallery =  ;
58422: LD_ADDR_OWVAR 33
58426: PUSH
58427: LD_STRING 
58429: ST_TO_ADDR
// animal := CreateHuman ;
58430: LD_ADDR_VAR 0 12
58434: PUSH
58435: CALL_OW 44
58439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58440: LD_VAR 0 12
58444: PPUSH
58445: LD_VAR 0 8
58449: PPUSH
58450: LD_INT 0
58452: PPUSH
58453: CALL 60221 0 3
// end ;
58457: GO 58411
58459: POP
58460: POP
// if fishes then
58461: LD_VAR 0 7
58465: IFFALSE 58532
// for i = 1 to fishes do
58467: LD_ADDR_VAR 0 11
58471: PUSH
58472: DOUBLE
58473: LD_INT 1
58475: DEC
58476: ST_TO_ADDR
58477: LD_VAR 0 7
58481: PUSH
58482: FOR_TO
58483: IFFALSE 58530
// begin hc_class = 20 ;
58485: LD_ADDR_OWVAR 28
58489: PUSH
58490: LD_INT 20
58492: ST_TO_ADDR
// hc_gallery =  ;
58493: LD_ADDR_OWVAR 33
58497: PUSH
58498: LD_STRING 
58500: ST_TO_ADDR
// animal := CreateHuman ;
58501: LD_ADDR_VAR 0 12
58505: PUSH
58506: CALL_OW 44
58510: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58511: LD_VAR 0 12
58515: PPUSH
58516: LD_VAR 0 9
58520: PPUSH
58521: LD_INT 0
58523: PPUSH
58524: CALL 60221 0 3
// end ;
58528: GO 58482
58530: POP
58531: POP
// end ;
58532: LD_VAR 0 10
58536: RET
// export function WantHeal ( sci , unit ) ; begin
58537: LD_INT 0
58539: PPUSH
// if GetTaskList ( sci ) > 0 then
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 437
58549: PUSH
58550: LD_INT 0
58552: GREATER
58553: IFFALSE 58623
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58555: LD_VAR 0 1
58559: PPUSH
58560: CALL_OW 437
58564: PUSH
58565: LD_INT 1
58567: ARRAY
58568: PUSH
58569: LD_INT 1
58571: ARRAY
58572: PUSH
58573: LD_STRING l
58575: EQUAL
58576: PUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: CALL_OW 437
58586: PUSH
58587: LD_INT 1
58589: ARRAY
58590: PUSH
58591: LD_INT 4
58593: ARRAY
58594: PUSH
58595: LD_VAR 0 2
58599: EQUAL
58600: AND
58601: IFFALSE 58613
// result := true else
58603: LD_ADDR_VAR 0 3
58607: PUSH
58608: LD_INT 1
58610: ST_TO_ADDR
58611: GO 58621
// result := false ;
58613: LD_ADDR_VAR 0 3
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// end else
58621: GO 58631
// result := false ;
58623: LD_ADDR_VAR 0 3
58627: PUSH
58628: LD_INT 0
58630: ST_TO_ADDR
// end ;
58631: LD_VAR 0 3
58635: RET
// export function HealTarget ( sci ) ; begin
58636: LD_INT 0
58638: PPUSH
// if not sci then
58639: LD_VAR 0 1
58643: NOT
58644: IFFALSE 58648
// exit ;
58646: GO 58713
// result := 0 ;
58648: LD_ADDR_VAR 0 2
58652: PUSH
58653: LD_INT 0
58655: ST_TO_ADDR
// if GetTaskList ( sci ) then
58656: LD_VAR 0 1
58660: PPUSH
58661: CALL_OW 437
58665: IFFALSE 58713
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 437
58676: PUSH
58677: LD_INT 1
58679: ARRAY
58680: PUSH
58681: LD_INT 1
58683: ARRAY
58684: PUSH
58685: LD_STRING l
58687: EQUAL
58688: IFFALSE 58713
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58690: LD_ADDR_VAR 0 2
58694: PUSH
58695: LD_VAR 0 1
58699: PPUSH
58700: CALL_OW 437
58704: PUSH
58705: LD_INT 1
58707: ARRAY
58708: PUSH
58709: LD_INT 4
58711: ARRAY
58712: ST_TO_ADDR
// end ;
58713: LD_VAR 0 2
58717: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58718: LD_INT 0
58720: PPUSH
58721: PPUSH
58722: PPUSH
58723: PPUSH
// if not base_units then
58724: LD_VAR 0 1
58728: NOT
58729: IFFALSE 58733
// exit ;
58731: GO 58820
// result := false ;
58733: LD_ADDR_VAR 0 2
58737: PUSH
58738: LD_INT 0
58740: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58741: LD_ADDR_VAR 0 5
58745: PUSH
58746: LD_VAR 0 1
58750: PPUSH
58751: LD_INT 21
58753: PUSH
58754: LD_INT 3
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PPUSH
58761: CALL_OW 72
58765: ST_TO_ADDR
// if not tmp then
58766: LD_VAR 0 5
58770: NOT
58771: IFFALSE 58775
// exit ;
58773: GO 58820
// for i in tmp do
58775: LD_ADDR_VAR 0 3
58779: PUSH
58780: LD_VAR 0 5
58784: PUSH
58785: FOR_IN
58786: IFFALSE 58818
// begin result := EnemyInRange ( i , 22 ) ;
58788: LD_ADDR_VAR 0 2
58792: PUSH
58793: LD_VAR 0 3
58797: PPUSH
58798: LD_INT 22
58800: PPUSH
58801: CALL 57056 0 2
58805: ST_TO_ADDR
// if result then
58806: LD_VAR 0 2
58810: IFFALSE 58816
// exit ;
58812: POP
58813: POP
58814: GO 58820
// end ;
58816: GO 58785
58818: POP
58819: POP
// end ;
58820: LD_VAR 0 2
58824: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
58825: LD_INT 0
58827: PPUSH
58828: PPUSH
// if not units then
58829: LD_VAR 0 1
58833: NOT
58834: IFFALSE 58838
// exit ;
58836: GO 58908
// result := [ ] ;
58838: LD_ADDR_VAR 0 3
58842: PUSH
58843: EMPTY
58844: ST_TO_ADDR
// for i in units do
58845: LD_ADDR_VAR 0 4
58849: PUSH
58850: LD_VAR 0 1
58854: PUSH
58855: FOR_IN
58856: IFFALSE 58906
// if GetTag ( i ) = tag then
58858: LD_VAR 0 4
58862: PPUSH
58863: CALL_OW 110
58867: PUSH
58868: LD_VAR 0 2
58872: EQUAL
58873: IFFALSE 58904
// result := Replace ( result , result + 1 , i ) ;
58875: LD_ADDR_VAR 0 3
58879: PUSH
58880: LD_VAR 0 3
58884: PPUSH
58885: LD_VAR 0 3
58889: PUSH
58890: LD_INT 1
58892: PLUS
58893: PPUSH
58894: LD_VAR 0 4
58898: PPUSH
58899: CALL_OW 1
58903: ST_TO_ADDR
58904: GO 58855
58906: POP
58907: POP
// end ;
58908: LD_VAR 0 3
58912: RET
// export function IsDriver ( un ) ; begin
58913: LD_INT 0
58915: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58916: LD_ADDR_VAR 0 2
58920: PUSH
58921: LD_VAR 0 1
58925: PUSH
58926: LD_INT 55
58928: PUSH
58929: EMPTY
58930: LIST
58931: PPUSH
58932: CALL_OW 69
58936: IN
58937: ST_TO_ADDR
// end ;
58938: LD_VAR 0 2
58942: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58943: LD_INT 0
58945: PPUSH
58946: PPUSH
// list := [ ] ;
58947: LD_ADDR_VAR 0 5
58951: PUSH
58952: EMPTY
58953: ST_TO_ADDR
// case d of 0 :
58954: LD_VAR 0 3
58958: PUSH
58959: LD_INT 0
58961: DOUBLE
58962: EQUAL
58963: IFTRUE 58967
58965: GO 59100
58967: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58968: LD_ADDR_VAR 0 5
58972: PUSH
58973: LD_VAR 0 1
58977: PUSH
58978: LD_INT 4
58980: MINUS
58981: PUSH
58982: LD_VAR 0 2
58986: PUSH
58987: LD_INT 4
58989: MINUS
58990: PUSH
58991: LD_INT 2
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: LIST
58998: PUSH
58999: LD_VAR 0 1
59003: PUSH
59004: LD_INT 3
59006: MINUS
59007: PUSH
59008: LD_VAR 0 2
59012: PUSH
59013: LD_INT 1
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: LIST
59020: PUSH
59021: LD_VAR 0 1
59025: PUSH
59026: LD_INT 4
59028: PLUS
59029: PUSH
59030: LD_VAR 0 2
59034: PUSH
59035: LD_INT 4
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: LIST
59042: PUSH
59043: LD_VAR 0 1
59047: PUSH
59048: LD_INT 3
59050: PLUS
59051: PUSH
59052: LD_VAR 0 2
59056: PUSH
59057: LD_INT 3
59059: PLUS
59060: PUSH
59061: LD_INT 5
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: LIST
59068: PUSH
59069: LD_VAR 0 1
59073: PUSH
59074: LD_VAR 0 2
59078: PUSH
59079: LD_INT 4
59081: PLUS
59082: PUSH
59083: LD_INT 0
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: LIST
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: ST_TO_ADDR
// end ; 1 :
59098: GO 59798
59100: LD_INT 1
59102: DOUBLE
59103: EQUAL
59104: IFTRUE 59108
59106: GO 59241
59108: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59109: LD_ADDR_VAR 0 5
59113: PUSH
59114: LD_VAR 0 1
59118: PUSH
59119: LD_VAR 0 2
59123: PUSH
59124: LD_INT 4
59126: MINUS
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: LIST
59135: PUSH
59136: LD_VAR 0 1
59140: PUSH
59141: LD_INT 3
59143: MINUS
59144: PUSH
59145: LD_VAR 0 2
59149: PUSH
59150: LD_INT 3
59152: MINUS
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: EMPTY
59158: LIST
59159: LIST
59160: LIST
59161: PUSH
59162: LD_VAR 0 1
59166: PUSH
59167: LD_INT 4
59169: MINUS
59170: PUSH
59171: LD_VAR 0 2
59175: PUSH
59176: LD_INT 1
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: LIST
59183: PUSH
59184: LD_VAR 0 1
59188: PUSH
59189: LD_VAR 0 2
59193: PUSH
59194: LD_INT 3
59196: PLUS
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: PUSH
59206: LD_VAR 0 1
59210: PUSH
59211: LD_INT 4
59213: PLUS
59214: PUSH
59215: LD_VAR 0 2
59219: PUSH
59220: LD_INT 4
59222: PLUS
59223: PUSH
59224: LD_INT 5
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: LIST
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// end ; 2 :
59239: GO 59798
59241: LD_INT 2
59243: DOUBLE
59244: EQUAL
59245: IFTRUE 59249
59247: GO 59378
59249: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59250: LD_ADDR_VAR 0 5
59254: PUSH
59255: LD_VAR 0 1
59259: PUSH
59260: LD_VAR 0 2
59264: PUSH
59265: LD_INT 3
59267: MINUS
59268: PUSH
59269: LD_INT 3
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: PUSH
59277: LD_VAR 0 1
59281: PUSH
59282: LD_INT 4
59284: PLUS
59285: PUSH
59286: LD_VAR 0 2
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: LIST
59298: PUSH
59299: LD_VAR 0 1
59303: PUSH
59304: LD_VAR 0 2
59308: PUSH
59309: LD_INT 4
59311: PLUS
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: LIST
59320: PUSH
59321: LD_VAR 0 1
59325: PUSH
59326: LD_INT 3
59328: MINUS
59329: PUSH
59330: LD_VAR 0 2
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: PUSH
59343: LD_VAR 0 1
59347: PUSH
59348: LD_INT 4
59350: MINUS
59351: PUSH
59352: LD_VAR 0 2
59356: PUSH
59357: LD_INT 4
59359: MINUS
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: ST_TO_ADDR
// end ; 3 :
59376: GO 59798
59378: LD_INT 3
59380: DOUBLE
59381: EQUAL
59382: IFTRUE 59386
59384: GO 59519
59386: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59387: LD_ADDR_VAR 0 5
59391: PUSH
59392: LD_VAR 0 1
59396: PUSH
59397: LD_INT 3
59399: PLUS
59400: PUSH
59401: LD_VAR 0 2
59405: PUSH
59406: LD_INT 4
59408: PUSH
59409: EMPTY
59410: LIST
59411: LIST
59412: LIST
59413: PUSH
59414: LD_VAR 0 1
59418: PUSH
59419: LD_INT 4
59421: PLUS
59422: PUSH
59423: LD_VAR 0 2
59427: PUSH
59428: LD_INT 4
59430: PLUS
59431: PUSH
59432: LD_INT 5
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: LIST
59439: PUSH
59440: LD_VAR 0 1
59444: PUSH
59445: LD_INT 4
59447: MINUS
59448: PUSH
59449: LD_VAR 0 2
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: PUSH
59462: LD_VAR 0 1
59466: PUSH
59467: LD_VAR 0 2
59471: PUSH
59472: LD_INT 4
59474: MINUS
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: LIST
59483: PUSH
59484: LD_VAR 0 1
59488: PUSH
59489: LD_INT 3
59491: MINUS
59492: PUSH
59493: LD_VAR 0 2
59497: PUSH
59498: LD_INT 3
59500: MINUS
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: EMPTY
59506: LIST
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: ST_TO_ADDR
// end ; 4 :
59517: GO 59798
59519: LD_INT 4
59521: DOUBLE
59522: EQUAL
59523: IFTRUE 59527
59525: GO 59660
59527: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59528: LD_ADDR_VAR 0 5
59532: PUSH
59533: LD_VAR 0 1
59537: PUSH
59538: LD_VAR 0 2
59542: PUSH
59543: LD_INT 4
59545: PLUS
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: LIST
59554: PUSH
59555: LD_VAR 0 1
59559: PUSH
59560: LD_INT 3
59562: PLUS
59563: PUSH
59564: LD_VAR 0 2
59568: PUSH
59569: LD_INT 3
59571: PLUS
59572: PUSH
59573: LD_INT 5
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: PUSH
59581: LD_VAR 0 1
59585: PUSH
59586: LD_INT 4
59588: PLUS
59589: PUSH
59590: LD_VAR 0 2
59594: PUSH
59595: LD_INT 4
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: LIST
59602: PUSH
59603: LD_VAR 0 1
59607: PUSH
59608: LD_VAR 0 2
59612: PUSH
59613: LD_INT 3
59615: MINUS
59616: PUSH
59617: LD_INT 3
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: LIST
59624: PUSH
59625: LD_VAR 0 1
59629: PUSH
59630: LD_INT 4
59632: MINUS
59633: PUSH
59634: LD_VAR 0 2
59638: PUSH
59639: LD_INT 4
59641: MINUS
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: LIST
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: LIST
59655: LIST
59656: LIST
59657: ST_TO_ADDR
// end ; 5 :
59658: GO 59798
59660: LD_INT 5
59662: DOUBLE
59663: EQUAL
59664: IFTRUE 59668
59666: GO 59797
59668: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59669: LD_ADDR_VAR 0 5
59673: PUSH
59674: LD_VAR 0 1
59678: PUSH
59679: LD_INT 4
59681: MINUS
59682: PUSH
59683: LD_VAR 0 2
59687: PUSH
59688: LD_INT 1
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: PUSH
59696: LD_VAR 0 1
59700: PUSH
59701: LD_VAR 0 2
59705: PUSH
59706: LD_INT 4
59708: MINUS
59709: PUSH
59710: LD_INT 3
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: PUSH
59718: LD_VAR 0 1
59722: PUSH
59723: LD_INT 4
59725: PLUS
59726: PUSH
59727: LD_VAR 0 2
59731: PUSH
59732: LD_INT 4
59734: PLUS
59735: PUSH
59736: LD_INT 5
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: PUSH
59744: LD_VAR 0 1
59748: PUSH
59749: LD_INT 3
59751: PLUS
59752: PUSH
59753: LD_VAR 0 2
59757: PUSH
59758: LD_INT 4
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: LIST
59765: PUSH
59766: LD_VAR 0 1
59770: PUSH
59771: LD_VAR 0 2
59775: PUSH
59776: LD_INT 3
59778: PLUS
59779: PUSH
59780: LD_INT 0
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: LIST
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: ST_TO_ADDR
// end ; end ;
59795: GO 59798
59797: POP
// result := list ;
59798: LD_ADDR_VAR 0 4
59802: PUSH
59803: LD_VAR 0 5
59807: ST_TO_ADDR
// end ;
59808: LD_VAR 0 4
59812: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59813: LD_INT 0
59815: PPUSH
59816: PPUSH
59817: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59818: LD_VAR 0 1
59822: NOT
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 2
59834: PUSH
59835: LD_INT 3
59837: PUSH
59838: LD_INT 4
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: IN
59847: NOT
59848: OR
59849: IFFALSE 59853
// exit ;
59851: GO 59945
// tmp := [ ] ;
59853: LD_ADDR_VAR 0 5
59857: PUSH
59858: EMPTY
59859: ST_TO_ADDR
// for i in units do
59860: LD_ADDR_VAR 0 4
59864: PUSH
59865: LD_VAR 0 1
59869: PUSH
59870: FOR_IN
59871: IFFALSE 59914
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59873: LD_ADDR_VAR 0 5
59877: PUSH
59878: LD_VAR 0 5
59882: PPUSH
59883: LD_VAR 0 5
59887: PUSH
59888: LD_INT 1
59890: PLUS
59891: PPUSH
59892: LD_VAR 0 4
59896: PPUSH
59897: LD_VAR 0 2
59901: PPUSH
59902: CALL_OW 259
59906: PPUSH
59907: CALL_OW 2
59911: ST_TO_ADDR
59912: GO 59870
59914: POP
59915: POP
// if not tmp then
59916: LD_VAR 0 5
59920: NOT
59921: IFFALSE 59925
// exit ;
59923: GO 59945
// result := SortListByListDesc ( units , tmp ) ;
59925: LD_ADDR_VAR 0 3
59929: PUSH
59930: LD_VAR 0 1
59934: PPUSH
59935: LD_VAR 0 5
59939: PPUSH
59940: CALL_OW 77
59944: ST_TO_ADDR
// end ;
59945: LD_VAR 0 3
59949: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59950: LD_INT 0
59952: PPUSH
59953: PPUSH
59954: PPUSH
// result := false ;
59955: LD_ADDR_VAR 0 3
59959: PUSH
59960: LD_INT 0
59962: ST_TO_ADDR
// x := GetX ( building ) ;
59963: LD_ADDR_VAR 0 4
59967: PUSH
59968: LD_VAR 0 2
59972: PPUSH
59973: CALL_OW 250
59977: ST_TO_ADDR
// y := GetY ( building ) ;
59978: LD_ADDR_VAR 0 5
59982: PUSH
59983: LD_VAR 0 2
59987: PPUSH
59988: CALL_OW 251
59992: ST_TO_ADDR
// if not building or not x or not y then
59993: LD_VAR 0 2
59997: NOT
59998: PUSH
59999: LD_VAR 0 4
60003: NOT
60004: OR
60005: PUSH
60006: LD_VAR 0 5
60010: NOT
60011: OR
60012: IFFALSE 60016
// exit ;
60014: GO 60108
// if GetTaskList ( unit ) then
60016: LD_VAR 0 1
60020: PPUSH
60021: CALL_OW 437
60025: IFFALSE 60108
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60027: LD_STRING e
60029: PUSH
60030: LD_VAR 0 1
60034: PPUSH
60035: CALL_OW 437
60039: PUSH
60040: LD_INT 1
60042: ARRAY
60043: PUSH
60044: LD_INT 1
60046: ARRAY
60047: EQUAL
60048: PUSH
60049: LD_VAR 0 4
60053: PUSH
60054: LD_VAR 0 1
60058: PPUSH
60059: CALL_OW 437
60063: PUSH
60064: LD_INT 1
60066: ARRAY
60067: PUSH
60068: LD_INT 2
60070: ARRAY
60071: EQUAL
60072: AND
60073: PUSH
60074: LD_VAR 0 5
60078: PUSH
60079: LD_VAR 0 1
60083: PPUSH
60084: CALL_OW 437
60088: PUSH
60089: LD_INT 1
60091: ARRAY
60092: PUSH
60093: LD_INT 3
60095: ARRAY
60096: EQUAL
60097: AND
60098: IFFALSE 60108
// result := true end ;
60100: LD_ADDR_VAR 0 3
60104: PUSH
60105: LD_INT 1
60107: ST_TO_ADDR
// end ;
60108: LD_VAR 0 3
60112: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60113: LD_INT 0
60115: PPUSH
// result := false ;
60116: LD_ADDR_VAR 0 4
60120: PUSH
60121: LD_INT 0
60123: ST_TO_ADDR
// if GetTaskList ( unit ) then
60124: LD_VAR 0 1
60128: PPUSH
60129: CALL_OW 437
60133: IFFALSE 60216
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60135: LD_STRING M
60137: PUSH
60138: LD_VAR 0 1
60142: PPUSH
60143: CALL_OW 437
60147: PUSH
60148: LD_INT 1
60150: ARRAY
60151: PUSH
60152: LD_INT 1
60154: ARRAY
60155: EQUAL
60156: PUSH
60157: LD_VAR 0 2
60161: PUSH
60162: LD_VAR 0 1
60166: PPUSH
60167: CALL_OW 437
60171: PUSH
60172: LD_INT 1
60174: ARRAY
60175: PUSH
60176: LD_INT 2
60178: ARRAY
60179: EQUAL
60180: AND
60181: PUSH
60182: LD_VAR 0 3
60186: PUSH
60187: LD_VAR 0 1
60191: PPUSH
60192: CALL_OW 437
60196: PUSH
60197: LD_INT 1
60199: ARRAY
60200: PUSH
60201: LD_INT 3
60203: ARRAY
60204: EQUAL
60205: AND
60206: IFFALSE 60216
// result := true ;
60208: LD_ADDR_VAR 0 4
60212: PUSH
60213: LD_INT 1
60215: ST_TO_ADDR
// end ; end ;
60216: LD_VAR 0 4
60220: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60221: LD_INT 0
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
// if not unit or not area then
60227: LD_VAR 0 1
60231: NOT
60232: PUSH
60233: LD_VAR 0 2
60237: NOT
60238: OR
60239: IFFALSE 60243
// exit ;
60241: GO 60407
// tmp := AreaToList ( area , i ) ;
60243: LD_ADDR_VAR 0 6
60247: PUSH
60248: LD_VAR 0 2
60252: PPUSH
60253: LD_VAR 0 5
60257: PPUSH
60258: CALL_OW 517
60262: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60263: LD_ADDR_VAR 0 5
60267: PUSH
60268: DOUBLE
60269: LD_INT 1
60271: DEC
60272: ST_TO_ADDR
60273: LD_VAR 0 6
60277: PUSH
60278: LD_INT 1
60280: ARRAY
60281: PUSH
60282: FOR_TO
60283: IFFALSE 60405
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60285: LD_ADDR_VAR 0 7
60289: PUSH
60290: LD_VAR 0 6
60294: PUSH
60295: LD_INT 1
60297: ARRAY
60298: PUSH
60299: LD_VAR 0 5
60303: ARRAY
60304: PUSH
60305: LD_VAR 0 6
60309: PUSH
60310: LD_INT 2
60312: ARRAY
60313: PUSH
60314: LD_VAR 0 5
60318: ARRAY
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60324: LD_VAR 0 7
60328: PUSH
60329: LD_INT 1
60331: ARRAY
60332: PPUSH
60333: LD_VAR 0 7
60337: PUSH
60338: LD_INT 2
60340: ARRAY
60341: PPUSH
60342: CALL_OW 428
60346: PUSH
60347: LD_INT 0
60349: EQUAL
60350: IFFALSE 60403
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60352: LD_VAR 0 1
60356: PPUSH
60357: LD_VAR 0 7
60361: PUSH
60362: LD_INT 1
60364: ARRAY
60365: PPUSH
60366: LD_VAR 0 7
60370: PUSH
60371: LD_INT 2
60373: ARRAY
60374: PPUSH
60375: LD_VAR 0 3
60379: PPUSH
60380: CALL_OW 48
// result := IsPlaced ( unit ) ;
60384: LD_ADDR_VAR 0 4
60388: PUSH
60389: LD_VAR 0 1
60393: PPUSH
60394: CALL_OW 305
60398: ST_TO_ADDR
// exit ;
60399: POP
60400: POP
60401: GO 60407
// end ; end ;
60403: GO 60282
60405: POP
60406: POP
// end ;
60407: LD_VAR 0 4
60411: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60412: LD_INT 0
60414: PPUSH
60415: PPUSH
60416: PPUSH
// if not side or side > 8 then
60417: LD_VAR 0 1
60421: NOT
60422: PUSH
60423: LD_VAR 0 1
60427: PUSH
60428: LD_INT 8
60430: GREATER
60431: OR
60432: IFFALSE 60436
// exit ;
60434: GO 60623
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60436: LD_ADDR_VAR 0 4
60440: PUSH
60441: LD_INT 22
60443: PUSH
60444: LD_VAR 0 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 21
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PPUSH
60467: CALL_OW 69
60471: ST_TO_ADDR
// if not tmp then
60472: LD_VAR 0 4
60476: NOT
60477: IFFALSE 60481
// exit ;
60479: GO 60623
// enable_addtolog := true ;
60481: LD_ADDR_OWVAR 81
60485: PUSH
60486: LD_INT 1
60488: ST_TO_ADDR
// AddToLog ( [ ) ;
60489: LD_STRING [
60491: PPUSH
60492: CALL_OW 561
// for i in tmp do
60496: LD_ADDR_VAR 0 3
60500: PUSH
60501: LD_VAR 0 4
60505: PUSH
60506: FOR_IN
60507: IFFALSE 60614
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60509: LD_STRING [
60511: PUSH
60512: LD_VAR 0 3
60516: PPUSH
60517: CALL_OW 266
60521: STR
60522: PUSH
60523: LD_STRING , 
60525: STR
60526: PUSH
60527: LD_VAR 0 3
60531: PPUSH
60532: CALL_OW 250
60536: STR
60537: PUSH
60538: LD_STRING , 
60540: STR
60541: PUSH
60542: LD_VAR 0 3
60546: PPUSH
60547: CALL_OW 251
60551: STR
60552: PUSH
60553: LD_STRING , 
60555: STR
60556: PUSH
60557: LD_VAR 0 3
60561: PPUSH
60562: CALL_OW 254
60566: STR
60567: PUSH
60568: LD_STRING , 
60570: STR
60571: PUSH
60572: LD_VAR 0 3
60576: PPUSH
60577: LD_INT 1
60579: PPUSH
60580: CALL_OW 268
60584: STR
60585: PUSH
60586: LD_STRING , 
60588: STR
60589: PUSH
60590: LD_VAR 0 3
60594: PPUSH
60595: LD_INT 2
60597: PPUSH
60598: CALL_OW 268
60602: STR
60603: PUSH
60604: LD_STRING ],
60606: STR
60607: PPUSH
60608: CALL_OW 561
// end ;
60612: GO 60506
60614: POP
60615: POP
// AddToLog ( ]; ) ;
60616: LD_STRING ];
60618: PPUSH
60619: CALL_OW 561
// end ;
60623: LD_VAR 0 2
60627: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60628: LD_INT 0
60630: PPUSH
60631: PPUSH
60632: PPUSH
60633: PPUSH
60634: PPUSH
// if not area or not rate or not max then
60635: LD_VAR 0 1
60639: NOT
60640: PUSH
60641: LD_VAR 0 2
60645: NOT
60646: OR
60647: PUSH
60648: LD_VAR 0 4
60652: NOT
60653: OR
60654: IFFALSE 60658
// exit ;
60656: GO 60850
// while 1 do
60658: LD_INT 1
60660: IFFALSE 60850
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60662: LD_ADDR_VAR 0 9
60666: PUSH
60667: LD_VAR 0 1
60671: PPUSH
60672: LD_INT 1
60674: PPUSH
60675: CALL_OW 287
60679: PUSH
60680: LD_INT 10
60682: MUL
60683: ST_TO_ADDR
// r := rate / 10 ;
60684: LD_ADDR_VAR 0 7
60688: PUSH
60689: LD_VAR 0 2
60693: PUSH
60694: LD_INT 10
60696: DIVREAL
60697: ST_TO_ADDR
// time := 1 1$00 ;
60698: LD_ADDR_VAR 0 8
60702: PUSH
60703: LD_INT 2100
60705: ST_TO_ADDR
// if amount < min then
60706: LD_VAR 0 9
60710: PUSH
60711: LD_VAR 0 3
60715: LESS
60716: IFFALSE 60734
// r := r * 2 else
60718: LD_ADDR_VAR 0 7
60722: PUSH
60723: LD_VAR 0 7
60727: PUSH
60728: LD_INT 2
60730: MUL
60731: ST_TO_ADDR
60732: GO 60760
// if amount > max then
60734: LD_VAR 0 9
60738: PUSH
60739: LD_VAR 0 4
60743: GREATER
60744: IFFALSE 60760
// r := r / 2 ;
60746: LD_ADDR_VAR 0 7
60750: PUSH
60751: LD_VAR 0 7
60755: PUSH
60756: LD_INT 2
60758: DIVREAL
60759: ST_TO_ADDR
// time := time / r ;
60760: LD_ADDR_VAR 0 8
60764: PUSH
60765: LD_VAR 0 8
60769: PUSH
60770: LD_VAR 0 7
60774: DIVREAL
60775: ST_TO_ADDR
// if time < 0 then
60776: LD_VAR 0 8
60780: PUSH
60781: LD_INT 0
60783: LESS
60784: IFFALSE 60801
// time := time * - 1 ;
60786: LD_ADDR_VAR 0 8
60790: PUSH
60791: LD_VAR 0 8
60795: PUSH
60796: LD_INT 1
60798: NEG
60799: MUL
60800: ST_TO_ADDR
// wait ( time ) ;
60801: LD_VAR 0 8
60805: PPUSH
60806: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
60810: LD_INT 35
60812: PPUSH
60813: LD_INT 875
60815: PPUSH
60816: CALL_OW 12
60820: PPUSH
60821: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60825: LD_INT 1
60827: PPUSH
60828: LD_INT 5
60830: PPUSH
60831: CALL_OW 12
60835: PPUSH
60836: LD_VAR 0 1
60840: PPUSH
60841: LD_INT 1
60843: PPUSH
60844: CALL_OW 55
// end ;
60848: GO 60658
// end ;
60850: LD_VAR 0 5
60854: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60855: LD_INT 0
60857: PPUSH
60858: PPUSH
60859: PPUSH
60860: PPUSH
60861: PPUSH
60862: PPUSH
60863: PPUSH
60864: PPUSH
// if not turrets or not factories then
60865: LD_VAR 0 1
60869: NOT
60870: PUSH
60871: LD_VAR 0 2
60875: NOT
60876: OR
60877: IFFALSE 60881
// exit ;
60879: GO 61188
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60881: LD_ADDR_VAR 0 10
60885: PUSH
60886: LD_INT 5
60888: PUSH
60889: LD_INT 6
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 4
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 5
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 24
60923: PUSH
60924: LD_INT 25
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 23
60933: PUSH
60934: LD_INT 27
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 42
60947: PUSH
60948: LD_INT 43
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 44
60957: PUSH
60958: LD_INT 46
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 45
60967: PUSH
60968: LD_INT 47
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: LIST
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: LIST
60984: ST_TO_ADDR
// result := [ ] ;
60985: LD_ADDR_VAR 0 3
60989: PUSH
60990: EMPTY
60991: ST_TO_ADDR
// for i in turrets do
60992: LD_ADDR_VAR 0 4
60996: PUSH
60997: LD_VAR 0 1
61001: PUSH
61002: FOR_IN
61003: IFFALSE 61186
// begin nat := GetNation ( i ) ;
61005: LD_ADDR_VAR 0 7
61009: PUSH
61010: LD_VAR 0 4
61014: PPUSH
61015: CALL_OW 248
61019: ST_TO_ADDR
// weapon := 0 ;
61020: LD_ADDR_VAR 0 8
61024: PUSH
61025: LD_INT 0
61027: ST_TO_ADDR
// if not nat then
61028: LD_VAR 0 7
61032: NOT
61033: IFFALSE 61037
// continue ;
61035: GO 61002
// for j in list [ nat ] do
61037: LD_ADDR_VAR 0 5
61041: PUSH
61042: LD_VAR 0 10
61046: PUSH
61047: LD_VAR 0 7
61051: ARRAY
61052: PUSH
61053: FOR_IN
61054: IFFALSE 61095
// if GetBWeapon ( i ) = j [ 1 ] then
61056: LD_VAR 0 4
61060: PPUSH
61061: CALL_OW 269
61065: PUSH
61066: LD_VAR 0 5
61070: PUSH
61071: LD_INT 1
61073: ARRAY
61074: EQUAL
61075: IFFALSE 61093
// begin weapon := j [ 2 ] ;
61077: LD_ADDR_VAR 0 8
61081: PUSH
61082: LD_VAR 0 5
61086: PUSH
61087: LD_INT 2
61089: ARRAY
61090: ST_TO_ADDR
// break ;
61091: GO 61095
// end ;
61093: GO 61053
61095: POP
61096: POP
// if not weapon then
61097: LD_VAR 0 8
61101: NOT
61102: IFFALSE 61106
// continue ;
61104: GO 61002
// for k in factories do
61106: LD_ADDR_VAR 0 6
61110: PUSH
61111: LD_VAR 0 2
61115: PUSH
61116: FOR_IN
61117: IFFALSE 61182
// begin weapons := AvailableWeaponList ( k ) ;
61119: LD_ADDR_VAR 0 9
61123: PUSH
61124: LD_VAR 0 6
61128: PPUSH
61129: CALL_OW 478
61133: ST_TO_ADDR
// if not weapons then
61134: LD_VAR 0 9
61138: NOT
61139: IFFALSE 61143
// continue ;
61141: GO 61116
// if weapon in weapons then
61143: LD_VAR 0 8
61147: PUSH
61148: LD_VAR 0 9
61152: IN
61153: IFFALSE 61180
// begin result := [ i , weapon ] ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 4
61164: PUSH
61165: LD_VAR 0 8
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: ST_TO_ADDR
// exit ;
61174: POP
61175: POP
61176: POP
61177: POP
61178: GO 61188
// end ; end ;
61180: GO 61116
61182: POP
61183: POP
// end ;
61184: GO 61002
61186: POP
61187: POP
// end ;
61188: LD_VAR 0 3
61192: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61193: LD_INT 0
61195: PPUSH
// if not side or side > 8 then
61196: LD_VAR 0 3
61200: NOT
61201: PUSH
61202: LD_VAR 0 3
61206: PUSH
61207: LD_INT 8
61209: GREATER
61210: OR
61211: IFFALSE 61215
// exit ;
61213: GO 61274
// if not range then
61215: LD_VAR 0 4
61219: NOT
61220: IFFALSE 61231
// range := - 12 ;
61222: LD_ADDR_VAR 0 4
61226: PUSH
61227: LD_INT 12
61229: NEG
61230: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61231: LD_VAR 0 1
61235: PPUSH
61236: LD_VAR 0 2
61240: PPUSH
61241: LD_VAR 0 3
61245: PPUSH
61246: LD_VAR 0 4
61250: PPUSH
61251: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61255: LD_VAR 0 1
61259: PPUSH
61260: LD_VAR 0 2
61264: PPUSH
61265: LD_VAR 0 3
61269: PPUSH
61270: CALL_OW 331
// end ;
61274: LD_VAR 0 5
61278: RET
// export function Video ( mode ) ; begin
61279: LD_INT 0
61281: PPUSH
// ingame_video = mode ;
61282: LD_ADDR_OWVAR 52
61286: PUSH
61287: LD_VAR 0 1
61291: ST_TO_ADDR
// interface_hidden = mode ;
61292: LD_ADDR_OWVAR 54
61296: PUSH
61297: LD_VAR 0 1
61301: ST_TO_ADDR
// end ;
61302: LD_VAR 0 2
61306: RET
// export function Join ( array , element ) ; begin
61307: LD_INT 0
61309: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_VAR 0 1
61319: PPUSH
61320: LD_VAR 0 1
61324: PUSH
61325: LD_INT 1
61327: PLUS
61328: PPUSH
61329: LD_VAR 0 2
61333: PPUSH
61334: CALL_OW 1
61338: ST_TO_ADDR
// end ;
61339: LD_VAR 0 3
61343: RET
// export function JoinUnion ( array , element ) ; begin
61344: LD_INT 0
61346: PPUSH
// result := array union element ;
61347: LD_ADDR_VAR 0 3
61351: PUSH
61352: LD_VAR 0 1
61356: PUSH
61357: LD_VAR 0 2
61361: UNION
61362: ST_TO_ADDR
// end ;
61363: LD_VAR 0 3
61367: RET
// export function GetBehemoths ( side ) ; begin
61368: LD_INT 0
61370: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61371: LD_ADDR_VAR 0 2
61375: PUSH
61376: LD_INT 22
61378: PUSH
61379: LD_VAR 0 1
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 31
61390: PUSH
61391: LD_INT 25
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PPUSH
61402: CALL_OW 69
61406: ST_TO_ADDR
// end ;
61407: LD_VAR 0 2
61411: RET
// export function Shuffle ( array ) ; var i , index ; begin
61412: LD_INT 0
61414: PPUSH
61415: PPUSH
61416: PPUSH
// result := [ ] ;
61417: LD_ADDR_VAR 0 2
61421: PUSH
61422: EMPTY
61423: ST_TO_ADDR
// if not array then
61424: LD_VAR 0 1
61428: NOT
61429: IFFALSE 61433
// exit ;
61431: GO 61532
// Randomize ;
61433: CALL_OW 10
// for i = array downto 1 do
61437: LD_ADDR_VAR 0 3
61441: PUSH
61442: DOUBLE
61443: LD_VAR 0 1
61447: INC
61448: ST_TO_ADDR
61449: LD_INT 1
61451: PUSH
61452: FOR_DOWNTO
61453: IFFALSE 61530
// begin index := rand ( 1 , array ) ;
61455: LD_ADDR_VAR 0 4
61459: PUSH
61460: LD_INT 1
61462: PPUSH
61463: LD_VAR 0 1
61467: PPUSH
61468: CALL_OW 12
61472: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61473: LD_ADDR_VAR 0 2
61477: PUSH
61478: LD_VAR 0 2
61482: PPUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_INT 1
61490: PLUS
61491: PPUSH
61492: LD_VAR 0 1
61496: PUSH
61497: LD_VAR 0 4
61501: ARRAY
61502: PPUSH
61503: CALL_OW 2
61507: ST_TO_ADDR
// array := Delete ( array , index ) ;
61508: LD_ADDR_VAR 0 1
61512: PUSH
61513: LD_VAR 0 1
61517: PPUSH
61518: LD_VAR 0 4
61522: PPUSH
61523: CALL_OW 3
61527: ST_TO_ADDR
// end ;
61528: GO 61452
61530: POP
61531: POP
// end ;
61532: LD_VAR 0 2
61536: RET
// export function GetBaseMaterials ( base ) ; begin
61537: LD_INT 0
61539: PPUSH
// result := [ 0 , 0 , 0 ] ;
61540: LD_ADDR_VAR 0 2
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: LIST
61558: ST_TO_ADDR
// if not base then
61559: LD_VAR 0 1
61563: NOT
61564: IFFALSE 61568
// exit ;
61566: GO 61617
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61568: LD_ADDR_VAR 0 2
61572: PUSH
61573: LD_VAR 0 1
61577: PPUSH
61578: LD_INT 1
61580: PPUSH
61581: CALL_OW 275
61585: PUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: LD_INT 2
61593: PPUSH
61594: CALL_OW 275
61598: PUSH
61599: LD_VAR 0 1
61603: PPUSH
61604: LD_INT 3
61606: PPUSH
61607: CALL_OW 275
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: LIST
61616: ST_TO_ADDR
// end ;
61617: LD_VAR 0 2
61621: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61622: LD_INT 0
61624: PPUSH
61625: PPUSH
// result := array ;
61626: LD_ADDR_VAR 0 3
61630: PUSH
61631: LD_VAR 0 1
61635: ST_TO_ADDR
// if size > 0 then
61636: LD_VAR 0 2
61640: PUSH
61641: LD_INT 0
61643: GREATER
61644: IFFALSE 61690
// for i := array downto size do
61646: LD_ADDR_VAR 0 4
61650: PUSH
61651: DOUBLE
61652: LD_VAR 0 1
61656: INC
61657: ST_TO_ADDR
61658: LD_VAR 0 2
61662: PUSH
61663: FOR_DOWNTO
61664: IFFALSE 61688
// result := Delete ( result , result ) ;
61666: LD_ADDR_VAR 0 3
61670: PUSH
61671: LD_VAR 0 3
61675: PPUSH
61676: LD_VAR 0 3
61680: PPUSH
61681: CALL_OW 3
61685: ST_TO_ADDR
61686: GO 61663
61688: POP
61689: POP
// end ;
61690: LD_VAR 0 3
61694: RET
// export function ComExit ( unit ) ; var tmp ; begin
61695: LD_INT 0
61697: PPUSH
61698: PPUSH
// if not IsInUnit ( unit ) then
61699: LD_VAR 0 1
61703: PPUSH
61704: CALL_OW 310
61708: NOT
61709: IFFALSE 61713
// exit ;
61711: GO 61773
// tmp := IsInUnit ( unit ) ;
61713: LD_ADDR_VAR 0 3
61717: PUSH
61718: LD_VAR 0 1
61722: PPUSH
61723: CALL_OW 310
61727: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61728: LD_VAR 0 3
61732: PPUSH
61733: CALL_OW 247
61737: PUSH
61738: LD_INT 2
61740: EQUAL
61741: IFFALSE 61754
// ComExitVehicle ( unit ) else
61743: LD_VAR 0 1
61747: PPUSH
61748: CALL_OW 121
61752: GO 61763
// ComExitBuilding ( unit ) ;
61754: LD_VAR 0 1
61758: PPUSH
61759: CALL_OW 122
// result := tmp ;
61763: LD_ADDR_VAR 0 2
61767: PUSH
61768: LD_VAR 0 3
61772: ST_TO_ADDR
// end ;
61773: LD_VAR 0 2
61777: RET
// export function ComExitAll ( units ) ; var i ; begin
61778: LD_INT 0
61780: PPUSH
61781: PPUSH
// if not units then
61782: LD_VAR 0 1
61786: NOT
61787: IFFALSE 61791
// exit ;
61789: GO 61817
// for i in units do
61791: LD_ADDR_VAR 0 3
61795: PUSH
61796: LD_VAR 0 1
61800: PUSH
61801: FOR_IN
61802: IFFALSE 61815
// ComExit ( i ) ;
61804: LD_VAR 0 3
61808: PPUSH
61809: CALL 61695 0 1
61813: GO 61801
61815: POP
61816: POP
// end ;
61817: LD_VAR 0 2
61821: RET
// export function ResetHc ; begin
61822: LD_INT 0
61824: PPUSH
// InitHc ;
61825: CALL_OW 19
// hc_importance := 0 ;
61829: LD_ADDR_OWVAR 32
61833: PUSH
61834: LD_INT 0
61836: ST_TO_ADDR
// end ;
61837: LD_VAR 0 1
61841: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61842: LD_INT 0
61844: PPUSH
61845: PPUSH
61846: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61847: LD_ADDR_VAR 0 6
61851: PUSH
61852: LD_VAR 0 1
61856: PUSH
61857: LD_VAR 0 3
61861: PLUS
61862: PUSH
61863: LD_INT 2
61865: DIV
61866: ST_TO_ADDR
// if _x < 0 then
61867: LD_VAR 0 6
61871: PUSH
61872: LD_INT 0
61874: LESS
61875: IFFALSE 61892
// _x := _x * - 1 ;
61877: LD_ADDR_VAR 0 6
61881: PUSH
61882: LD_VAR 0 6
61886: PUSH
61887: LD_INT 1
61889: NEG
61890: MUL
61891: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61892: LD_ADDR_VAR 0 7
61896: PUSH
61897: LD_VAR 0 2
61901: PUSH
61902: LD_VAR 0 4
61906: PLUS
61907: PUSH
61908: LD_INT 2
61910: DIV
61911: ST_TO_ADDR
// if _y < 0 then
61912: LD_VAR 0 7
61916: PUSH
61917: LD_INT 0
61919: LESS
61920: IFFALSE 61937
// _y := _y * - 1 ;
61922: LD_ADDR_VAR 0 7
61926: PUSH
61927: LD_VAR 0 7
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: MUL
61936: ST_TO_ADDR
// result := [ _x , _y ] ;
61937: LD_ADDR_VAR 0 5
61941: PUSH
61942: LD_VAR 0 6
61946: PUSH
61947: LD_VAR 0 7
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: ST_TO_ADDR
// end ;
61956: LD_VAR 0 5
61960: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61961: LD_INT 0
61963: PPUSH
61964: PPUSH
61965: PPUSH
61966: PPUSH
// task := GetTaskList ( unit ) ;
61967: LD_ADDR_VAR 0 7
61971: PUSH
61972: LD_VAR 0 1
61976: PPUSH
61977: CALL_OW 437
61981: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61982: LD_VAR 0 7
61986: NOT
61987: PUSH
61988: LD_VAR 0 1
61992: PPUSH
61993: LD_VAR 0 2
61997: PPUSH
61998: CALL_OW 308
62002: NOT
62003: AND
62004: IFFALSE 62008
// exit ;
62006: GO 62126
// if IsInArea ( unit , area ) then
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 2
62017: PPUSH
62018: CALL_OW 308
62022: IFFALSE 62040
// begin ComMoveToArea ( unit , goAway ) ;
62024: LD_VAR 0 1
62028: PPUSH
62029: LD_VAR 0 3
62033: PPUSH
62034: CALL_OW 113
// exit ;
62038: GO 62126
// end ; if task [ 1 ] [ 1 ] <> M then
62040: LD_VAR 0 7
62044: PUSH
62045: LD_INT 1
62047: ARRAY
62048: PUSH
62049: LD_INT 1
62051: ARRAY
62052: PUSH
62053: LD_STRING M
62055: NONEQUAL
62056: IFFALSE 62060
// exit ;
62058: GO 62126
// x := task [ 1 ] [ 2 ] ;
62060: LD_ADDR_VAR 0 5
62064: PUSH
62065: LD_VAR 0 7
62069: PUSH
62070: LD_INT 1
62072: ARRAY
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62078: LD_ADDR_VAR 0 6
62082: PUSH
62083: LD_VAR 0 7
62087: PUSH
62088: LD_INT 1
62090: ARRAY
62091: PUSH
62092: LD_INT 3
62094: ARRAY
62095: ST_TO_ADDR
// if InArea ( x , y , area ) then
62096: LD_VAR 0 5
62100: PPUSH
62101: LD_VAR 0 6
62105: PPUSH
62106: LD_VAR 0 2
62110: PPUSH
62111: CALL_OW 309
62115: IFFALSE 62126
// ComStop ( unit ) ;
62117: LD_VAR 0 1
62121: PPUSH
62122: CALL_OW 141
// end ;
62126: LD_VAR 0 4
62130: RET
// export function Abs ( value ) ; begin
62131: LD_INT 0
62133: PPUSH
// result := value ;
62134: LD_ADDR_VAR 0 2
62138: PUSH
62139: LD_VAR 0 1
62143: ST_TO_ADDR
// if value < 0 then
62144: LD_VAR 0 1
62148: PUSH
62149: LD_INT 0
62151: LESS
62152: IFFALSE 62169
// result := value * - 1 ;
62154: LD_ADDR_VAR 0 2
62158: PUSH
62159: LD_VAR 0 1
62163: PUSH
62164: LD_INT 1
62166: NEG
62167: MUL
62168: ST_TO_ADDR
// end ;
62169: LD_VAR 0 2
62173: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62174: LD_INT 0
62176: PPUSH
62177: PPUSH
62178: PPUSH
62179: PPUSH
62180: PPUSH
62181: PPUSH
62182: PPUSH
62183: PPUSH
// if not unit or not building then
62184: LD_VAR 0 1
62188: NOT
62189: PUSH
62190: LD_VAR 0 2
62194: NOT
62195: OR
62196: IFFALSE 62200
// exit ;
62198: GO 62426
// x := GetX ( building ) ;
62200: LD_ADDR_VAR 0 4
62204: PUSH
62205: LD_VAR 0 2
62209: PPUSH
62210: CALL_OW 250
62214: ST_TO_ADDR
// y := GetY ( building ) ;
62215: LD_ADDR_VAR 0 6
62219: PUSH
62220: LD_VAR 0 2
62224: PPUSH
62225: CALL_OW 251
62229: ST_TO_ADDR
// d := GetDir ( building ) ;
62230: LD_ADDR_VAR 0 8
62234: PUSH
62235: LD_VAR 0 2
62239: PPUSH
62240: CALL_OW 254
62244: ST_TO_ADDR
// r := 4 ;
62245: LD_ADDR_VAR 0 9
62249: PUSH
62250: LD_INT 4
62252: ST_TO_ADDR
// for i := 1 to 5 do
62253: LD_ADDR_VAR 0 10
62257: PUSH
62258: DOUBLE
62259: LD_INT 1
62261: DEC
62262: ST_TO_ADDR
62263: LD_INT 5
62265: PUSH
62266: FOR_TO
62267: IFFALSE 62424
// begin _x := ShiftX ( x , d , r + i ) ;
62269: LD_ADDR_VAR 0 5
62273: PUSH
62274: LD_VAR 0 4
62278: PPUSH
62279: LD_VAR 0 8
62283: PPUSH
62284: LD_VAR 0 9
62288: PUSH
62289: LD_VAR 0 10
62293: PLUS
62294: PPUSH
62295: CALL_OW 272
62299: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62300: LD_ADDR_VAR 0 7
62304: PUSH
62305: LD_VAR 0 6
62309: PPUSH
62310: LD_VAR 0 8
62314: PPUSH
62315: LD_VAR 0 9
62319: PUSH
62320: LD_VAR 0 10
62324: PLUS
62325: PPUSH
62326: CALL_OW 273
62330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62331: LD_VAR 0 5
62335: PPUSH
62336: LD_VAR 0 7
62340: PPUSH
62341: CALL_OW 488
62345: PUSH
62346: LD_VAR 0 5
62350: PPUSH
62351: LD_VAR 0 7
62355: PPUSH
62356: CALL_OW 428
62360: PPUSH
62361: CALL_OW 247
62365: PUSH
62366: LD_INT 3
62368: PUSH
62369: LD_INT 2
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: IN
62376: NOT
62377: AND
62378: IFFALSE 62422
// begin ComMoveXY ( unit , _x , _y ) ;
62380: LD_VAR 0 1
62384: PPUSH
62385: LD_VAR 0 5
62389: PPUSH
62390: LD_VAR 0 7
62394: PPUSH
62395: CALL_OW 111
// result := [ _x , _y ] ;
62399: LD_ADDR_VAR 0 3
62403: PUSH
62404: LD_VAR 0 5
62408: PUSH
62409: LD_VAR 0 7
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: ST_TO_ADDR
// exit ;
62418: POP
62419: POP
62420: GO 62426
// end ; end ;
62422: GO 62266
62424: POP
62425: POP
// end ;
62426: LD_VAR 0 3
62430: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62431: LD_INT 0
62433: PPUSH
62434: PPUSH
62435: PPUSH
// result := 0 ;
62436: LD_ADDR_VAR 0 3
62440: PUSH
62441: LD_INT 0
62443: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62444: LD_VAR 0 1
62448: PUSH
62449: LD_INT 0
62451: LESS
62452: PUSH
62453: LD_VAR 0 1
62457: PUSH
62458: LD_INT 8
62460: GREATER
62461: OR
62462: PUSH
62463: LD_VAR 0 2
62467: PUSH
62468: LD_INT 0
62470: LESS
62471: OR
62472: PUSH
62473: LD_VAR 0 2
62477: PUSH
62478: LD_INT 8
62480: GREATER
62481: OR
62482: IFFALSE 62486
// exit ;
62484: GO 62561
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62486: LD_ADDR_VAR 0 4
62490: PUSH
62491: LD_INT 22
62493: PUSH
62494: LD_VAR 0 2
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PPUSH
62503: CALL_OW 69
62507: PUSH
62508: FOR_IN
62509: IFFALSE 62559
// begin un := UnitShoot ( i ) ;
62511: LD_ADDR_VAR 0 5
62515: PUSH
62516: LD_VAR 0 4
62520: PPUSH
62521: CALL_OW 504
62525: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62526: LD_VAR 0 5
62530: PPUSH
62531: CALL_OW 255
62535: PUSH
62536: LD_VAR 0 1
62540: EQUAL
62541: IFFALSE 62557
// begin result := un ;
62543: LD_ADDR_VAR 0 3
62547: PUSH
62548: LD_VAR 0 5
62552: ST_TO_ADDR
// exit ;
62553: POP
62554: POP
62555: GO 62561
// end ; end ;
62557: GO 62508
62559: POP
62560: POP
// end ;
62561: LD_VAR 0 3
62565: RET
// export function GetCargoBay ( units ) ; begin
62566: LD_INT 0
62568: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62569: LD_ADDR_VAR 0 2
62573: PUSH
62574: LD_VAR 0 1
62578: PPUSH
62579: LD_INT 2
62581: PUSH
62582: LD_INT 34
62584: PUSH
62585: LD_INT 12
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 34
62594: PUSH
62595: LD_INT 51
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 34
62604: PUSH
62605: LD_INT 32
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 34
62614: PUSH
62615: LD_EXP 25
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: PPUSH
62631: CALL_OW 72
62635: ST_TO_ADDR
// end ;
62636: LD_VAR 0 2
62640: RET
// export function Negate ( value ) ; begin
62641: LD_INT 0
62643: PPUSH
// result := not value ;
62644: LD_ADDR_VAR 0 2
62648: PUSH
62649: LD_VAR 0 1
62653: NOT
62654: ST_TO_ADDR
// end ;
62655: LD_VAR 0 2
62659: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
62660: LD_INT 0
62662: PPUSH
// if x1 = x2 then
62663: LD_VAR 0 1
62667: PUSH
62668: LD_VAR 0 3
62672: EQUAL
62673: IFFALSE 62707
// begin if y1 > y2 then
62675: LD_VAR 0 2
62679: PUSH
62680: LD_VAR 0 4
62684: GREATER
62685: IFFALSE 62697
// result := 0 else
62687: LD_ADDR_VAR 0 5
62691: PUSH
62692: LD_INT 0
62694: ST_TO_ADDR
62695: GO 62705
// result := 3 ;
62697: LD_ADDR_VAR 0 5
62701: PUSH
62702: LD_INT 3
62704: ST_TO_ADDR
// exit ;
62705: GO 62793
// end ; if y1 = y2 then
62707: LD_VAR 0 2
62711: PUSH
62712: LD_VAR 0 4
62716: EQUAL
62717: IFFALSE 62751
// begin if x1 > x2 then
62719: LD_VAR 0 1
62723: PUSH
62724: LD_VAR 0 3
62728: GREATER
62729: IFFALSE 62741
// result := 1 else
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: LD_INT 1
62738: ST_TO_ADDR
62739: GO 62749
// result := 4 ;
62741: LD_ADDR_VAR 0 5
62745: PUSH
62746: LD_INT 4
62748: ST_TO_ADDR
// exit ;
62749: GO 62793
// end ; if x1 > x2 and y1 > y2 then
62751: LD_VAR 0 1
62755: PUSH
62756: LD_VAR 0 3
62760: GREATER
62761: PUSH
62762: LD_VAR 0 2
62766: PUSH
62767: LD_VAR 0 4
62771: GREATER
62772: AND
62773: IFFALSE 62785
// result := 2 else
62775: LD_ADDR_VAR 0 5
62779: PUSH
62780: LD_INT 2
62782: ST_TO_ADDR
62783: GO 62793
// result := 5 ;
62785: LD_ADDR_VAR 0 5
62789: PUSH
62790: LD_INT 5
62792: ST_TO_ADDR
// end ;
62793: LD_VAR 0 5
62797: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62798: LD_INT 0
62800: PPUSH
62801: PPUSH
// if not driver or not IsInUnit ( driver ) then
62802: LD_VAR 0 1
62806: NOT
62807: PUSH
62808: LD_VAR 0 1
62812: PPUSH
62813: CALL_OW 310
62817: NOT
62818: OR
62819: IFFALSE 62823
// exit ;
62821: GO 62913
// vehicle := IsInUnit ( driver ) ;
62823: LD_ADDR_VAR 0 3
62827: PUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: CALL_OW 310
62837: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62838: LD_VAR 0 1
62842: PPUSH
62843: LD_STRING \
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: LD_INT 0
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: PUSH
62873: LD_STRING E
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: LD_VAR 0 3
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: LD_INT 0
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PPUSH
62909: CALL_OW 446
// end ;
62913: LD_VAR 0 2
62917: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62918: LD_INT 0
62920: PPUSH
62921: PPUSH
// if not driver or not IsInUnit ( driver ) then
62922: LD_VAR 0 1
62926: NOT
62927: PUSH
62928: LD_VAR 0 1
62932: PPUSH
62933: CALL_OW 310
62937: NOT
62938: OR
62939: IFFALSE 62943
// exit ;
62941: GO 63033
// vehicle := IsInUnit ( driver ) ;
62943: LD_ADDR_VAR 0 3
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: CALL_OW 310
62957: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62958: LD_VAR 0 1
62962: PPUSH
62963: LD_STRING \
62965: PUSH
62966: LD_INT 0
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 0
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: LD_INT 0
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_STRING E
62995: PUSH
62996: LD_INT 0
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: LD_VAR 0 3
63006: PUSH
63007: LD_INT 0
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 0
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PPUSH
63029: CALL_OW 447
// end ;
63033: LD_VAR 0 2
63037: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63038: LD_INT 0
63040: PPUSH
63041: PPUSH
63042: PPUSH
// tmp := [ ] ;
63043: LD_ADDR_VAR 0 5
63047: PUSH
63048: EMPTY
63049: ST_TO_ADDR
// for i in units do
63050: LD_ADDR_VAR 0 4
63054: PUSH
63055: LD_VAR 0 1
63059: PUSH
63060: FOR_IN
63061: IFFALSE 63099
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63063: LD_ADDR_VAR 0 5
63067: PUSH
63068: LD_VAR 0 5
63072: PPUSH
63073: LD_VAR 0 5
63077: PUSH
63078: LD_INT 1
63080: PLUS
63081: PPUSH
63082: LD_VAR 0 4
63086: PPUSH
63087: CALL_OW 256
63091: PPUSH
63092: CALL_OW 2
63096: ST_TO_ADDR
63097: GO 63060
63099: POP
63100: POP
// if not tmp then
63101: LD_VAR 0 5
63105: NOT
63106: IFFALSE 63110
// exit ;
63108: GO 63158
// if asc then
63110: LD_VAR 0 2
63114: IFFALSE 63138
// result := SortListByListAsc ( units , tmp ) else
63116: LD_ADDR_VAR 0 3
63120: PUSH
63121: LD_VAR 0 1
63125: PPUSH
63126: LD_VAR 0 5
63130: PPUSH
63131: CALL_OW 76
63135: ST_TO_ADDR
63136: GO 63158
// result := SortListByListDesc ( units , tmp ) ;
63138: LD_ADDR_VAR 0 3
63142: PUSH
63143: LD_VAR 0 1
63147: PPUSH
63148: LD_VAR 0 5
63152: PPUSH
63153: CALL_OW 77
63157: ST_TO_ADDR
// end ;
63158: LD_VAR 0 3
63162: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63163: LD_INT 0
63165: PPUSH
63166: PPUSH
// task := GetTaskList ( mech ) ;
63167: LD_ADDR_VAR 0 4
63171: PUSH
63172: LD_VAR 0 1
63176: PPUSH
63177: CALL_OW 437
63181: ST_TO_ADDR
// if not task then
63182: LD_VAR 0 4
63186: NOT
63187: IFFALSE 63191
// exit ;
63189: GO 63233
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63191: LD_ADDR_VAR 0 3
63195: PUSH
63196: LD_VAR 0 4
63200: PUSH
63201: LD_INT 1
63203: ARRAY
63204: PUSH
63205: LD_INT 1
63207: ARRAY
63208: PUSH
63209: LD_STRING r
63211: EQUAL
63212: PUSH
63213: LD_VAR 0 4
63217: PUSH
63218: LD_INT 1
63220: ARRAY
63221: PUSH
63222: LD_INT 4
63224: ARRAY
63225: PUSH
63226: LD_VAR 0 2
63230: EQUAL
63231: AND
63232: ST_TO_ADDR
// end ;
63233: LD_VAR 0 3
63237: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63238: LD_INT 0
63240: PPUSH
// SetDir ( unit , d ) ;
63241: LD_VAR 0 1
63245: PPUSH
63246: LD_VAR 0 4
63250: PPUSH
63251: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63255: LD_VAR 0 1
63259: PPUSH
63260: LD_VAR 0 2
63264: PPUSH
63265: LD_VAR 0 3
63269: PPUSH
63270: LD_VAR 0 5
63274: PPUSH
63275: CALL_OW 48
// end ;
63279: LD_VAR 0 6
63283: RET
// export function ToNaturalNumber ( number ) ; begin
63284: LD_INT 0
63286: PPUSH
// result := number div 1 ;
63287: LD_ADDR_VAR 0 2
63291: PUSH
63292: LD_VAR 0 1
63296: PUSH
63297: LD_INT 1
63299: DIV
63300: ST_TO_ADDR
// if number < 0 then
63301: LD_VAR 0 1
63305: PUSH
63306: LD_INT 0
63308: LESS
63309: IFFALSE 63319
// result := 0 ;
63311: LD_ADDR_VAR 0 2
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// end ;
63319: LD_VAR 0 2
63323: RET
// export function SortByClass ( units , class ) ; var un ; begin
63324: LD_INT 0
63326: PPUSH
63327: PPUSH
// if not units or not class then
63328: LD_VAR 0 1
63332: NOT
63333: PUSH
63334: LD_VAR 0 2
63338: NOT
63339: OR
63340: IFFALSE 63344
// exit ;
63342: GO 63439
// result := [ ] ;
63344: LD_ADDR_VAR 0 3
63348: PUSH
63349: EMPTY
63350: ST_TO_ADDR
// for un in units do
63351: LD_ADDR_VAR 0 4
63355: PUSH
63356: LD_VAR 0 1
63360: PUSH
63361: FOR_IN
63362: IFFALSE 63437
// if GetClass ( un ) = class then
63364: LD_VAR 0 4
63368: PPUSH
63369: CALL_OW 257
63373: PUSH
63374: LD_VAR 0 2
63378: EQUAL
63379: IFFALSE 63406
// result := Insert ( result , 1 , un ) else
63381: LD_ADDR_VAR 0 3
63385: PUSH
63386: LD_VAR 0 3
63390: PPUSH
63391: LD_INT 1
63393: PPUSH
63394: LD_VAR 0 4
63398: PPUSH
63399: CALL_OW 2
63403: ST_TO_ADDR
63404: GO 63435
// result := Replace ( result , result + 1 , un ) ;
63406: LD_ADDR_VAR 0 3
63410: PUSH
63411: LD_VAR 0 3
63415: PPUSH
63416: LD_VAR 0 3
63420: PUSH
63421: LD_INT 1
63423: PLUS
63424: PPUSH
63425: LD_VAR 0 4
63429: PPUSH
63430: CALL_OW 1
63434: ST_TO_ADDR
63435: GO 63361
63437: POP
63438: POP
// end ;
63439: LD_VAR 0 3
63443: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63444: LD_INT 0
63446: PPUSH
63447: PPUSH
63448: PPUSH
63449: PPUSH
63450: PPUSH
63451: PPUSH
63452: PPUSH
// result := [ ] ;
63453: LD_ADDR_VAR 0 4
63457: PUSH
63458: EMPTY
63459: ST_TO_ADDR
// if x - r < 0 then
63460: LD_VAR 0 1
63464: PUSH
63465: LD_VAR 0 3
63469: MINUS
63470: PUSH
63471: LD_INT 0
63473: LESS
63474: IFFALSE 63486
// min_x := 0 else
63476: LD_ADDR_VAR 0 8
63480: PUSH
63481: LD_INT 0
63483: ST_TO_ADDR
63484: GO 63502
// min_x := x - r ;
63486: LD_ADDR_VAR 0 8
63490: PUSH
63491: LD_VAR 0 1
63495: PUSH
63496: LD_VAR 0 3
63500: MINUS
63501: ST_TO_ADDR
// if y - r < 0 then
63502: LD_VAR 0 2
63506: PUSH
63507: LD_VAR 0 3
63511: MINUS
63512: PUSH
63513: LD_INT 0
63515: LESS
63516: IFFALSE 63528
// min_y := 0 else
63518: LD_ADDR_VAR 0 7
63522: PUSH
63523: LD_INT 0
63525: ST_TO_ADDR
63526: GO 63544
// min_y := y - r ;
63528: LD_ADDR_VAR 0 7
63532: PUSH
63533: LD_VAR 0 2
63537: PUSH
63538: LD_VAR 0 3
63542: MINUS
63543: ST_TO_ADDR
// max_x := x + r ;
63544: LD_ADDR_VAR 0 9
63548: PUSH
63549: LD_VAR 0 1
63553: PUSH
63554: LD_VAR 0 3
63558: PLUS
63559: ST_TO_ADDR
// max_y := y + r ;
63560: LD_ADDR_VAR 0 10
63564: PUSH
63565: LD_VAR 0 2
63569: PUSH
63570: LD_VAR 0 3
63574: PLUS
63575: ST_TO_ADDR
// for _x = min_x to max_x do
63576: LD_ADDR_VAR 0 5
63580: PUSH
63581: DOUBLE
63582: LD_VAR 0 8
63586: DEC
63587: ST_TO_ADDR
63588: LD_VAR 0 9
63592: PUSH
63593: FOR_TO
63594: IFFALSE 63695
// for _y = min_y to max_y do
63596: LD_ADDR_VAR 0 6
63600: PUSH
63601: DOUBLE
63602: LD_VAR 0 7
63606: DEC
63607: ST_TO_ADDR
63608: LD_VAR 0 10
63612: PUSH
63613: FOR_TO
63614: IFFALSE 63691
// begin if not ValidHex ( _x , _y ) then
63616: LD_VAR 0 5
63620: PPUSH
63621: LD_VAR 0 6
63625: PPUSH
63626: CALL_OW 488
63630: NOT
63631: IFFALSE 63635
// continue ;
63633: GO 63613
// if GetResourceTypeXY ( _x , _y ) then
63635: LD_VAR 0 5
63639: PPUSH
63640: LD_VAR 0 6
63644: PPUSH
63645: CALL_OW 283
63649: IFFALSE 63689
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63651: LD_ADDR_VAR 0 4
63655: PUSH
63656: LD_VAR 0 4
63660: PPUSH
63661: LD_VAR 0 4
63665: PUSH
63666: LD_INT 1
63668: PLUS
63669: PPUSH
63670: LD_VAR 0 5
63674: PUSH
63675: LD_VAR 0 6
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PPUSH
63684: CALL_OW 1
63688: ST_TO_ADDR
// end ;
63689: GO 63613
63691: POP
63692: POP
63693: GO 63593
63695: POP
63696: POP
// end ;
63697: LD_VAR 0 4
63701: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
63702: LD_INT 0
63704: PPUSH
63705: PPUSH
63706: PPUSH
63707: PPUSH
63708: PPUSH
63709: PPUSH
// if not units then
63710: LD_VAR 0 1
63714: NOT
63715: IFFALSE 63719
// exit ;
63717: GO 64120
// result := UnitFilter ( units , [ f_ok ] ) ;
63719: LD_ADDR_VAR 0 3
63723: PUSH
63724: LD_VAR 0 1
63728: PPUSH
63729: LD_INT 50
63731: PUSH
63732: EMPTY
63733: LIST
63734: PPUSH
63735: CALL_OW 72
63739: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63740: LD_ADDR_VAR 0 7
63744: PUSH
63745: LD_VAR 0 1
63749: PUSH
63750: LD_INT 1
63752: ARRAY
63753: PPUSH
63754: CALL_OW 255
63758: ST_TO_ADDR
// if not result then
63759: LD_VAR 0 3
63763: NOT
63764: IFFALSE 63768
// exit ;
63766: GO 64120
// for i in result do
63768: LD_ADDR_VAR 0 4
63772: PUSH
63773: LD_VAR 0 3
63777: PUSH
63778: FOR_IN
63779: IFFALSE 64118
// begin tag := GetTag ( i ) + 1 ;
63781: LD_ADDR_VAR 0 8
63785: PUSH
63786: LD_VAR 0 4
63790: PPUSH
63791: CALL_OW 110
63795: PUSH
63796: LD_INT 1
63798: PLUS
63799: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63800: LD_ADDR_VAR 0 6
63804: PUSH
63805: LD_VAR 0 4
63809: PPUSH
63810: CALL_OW 250
63814: PPUSH
63815: LD_VAR 0 4
63819: PPUSH
63820: CALL_OW 251
63824: PPUSH
63825: LD_INT 6
63827: PPUSH
63828: CALL 63444 0 3
63832: ST_TO_ADDR
// if cr then
63833: LD_VAR 0 6
63837: IFFALSE 63876
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63839: LD_VAR 0 4
63843: PPUSH
63844: LD_VAR 0 6
63848: PUSH
63849: LD_INT 1
63851: ARRAY
63852: PUSH
63853: LD_INT 1
63855: ARRAY
63856: PPUSH
63857: LD_VAR 0 6
63861: PUSH
63862: LD_INT 1
63864: ARRAY
63865: PUSH
63866: LD_INT 2
63868: ARRAY
63869: PPUSH
63870: CALL_OW 116
63874: GO 64116
// if path > tag then
63876: LD_VAR 0 2
63880: PUSH
63881: LD_VAR 0 8
63885: GREATER
63886: IFFALSE 64064
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
63888: LD_ADDR_VAR 0 5
63892: PUSH
63893: LD_INT 81
63895: PUSH
63896: LD_VAR 0 7
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 91
63907: PUSH
63908: LD_VAR 0 4
63912: PUSH
63913: LD_INT 12
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PPUSH
63925: CALL_OW 69
63929: ST_TO_ADDR
// if enemy then
63930: LD_VAR 0 5
63934: IFFALSE 63962
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63936: LD_VAR 0 4
63940: PPUSH
63941: LD_VAR 0 5
63945: PPUSH
63946: LD_VAR 0 4
63950: PPUSH
63951: CALL_OW 74
63955: PPUSH
63956: CALL_OW 115
63960: GO 64062
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63962: LD_VAR 0 4
63966: PPUSH
63967: LD_VAR 0 2
63971: PUSH
63972: LD_VAR 0 8
63976: ARRAY
63977: PUSH
63978: LD_INT 1
63980: ARRAY
63981: PPUSH
63982: LD_VAR 0 2
63986: PUSH
63987: LD_VAR 0 8
63991: ARRAY
63992: PUSH
63993: LD_INT 2
63995: ARRAY
63996: PPUSH
63997: CALL_OW 297
64001: PUSH
64002: LD_INT 6
64004: GREATER
64005: IFFALSE 64048
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64007: LD_VAR 0 4
64011: PPUSH
64012: LD_VAR 0 2
64016: PUSH
64017: LD_VAR 0 8
64021: ARRAY
64022: PUSH
64023: LD_INT 1
64025: ARRAY
64026: PPUSH
64027: LD_VAR 0 2
64031: PUSH
64032: LD_VAR 0 8
64036: ARRAY
64037: PUSH
64038: LD_INT 2
64040: ARRAY
64041: PPUSH
64042: CALL_OW 114
64046: GO 64062
// SetTag ( i , tag ) ;
64048: LD_VAR 0 4
64052: PPUSH
64053: LD_VAR 0 8
64057: PPUSH
64058: CALL_OW 109
// end else
64062: GO 64116
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64064: LD_ADDR_VAR 0 5
64068: PUSH
64069: LD_INT 81
64071: PUSH
64072: LD_VAR 0 7
64076: PUSH
64077: EMPTY
64078: LIST
64079: LIST
64080: PPUSH
64081: CALL_OW 69
64085: ST_TO_ADDR
// if enemy then
64086: LD_VAR 0 5
64090: IFFALSE 64116
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64092: LD_VAR 0 4
64096: PPUSH
64097: LD_VAR 0 5
64101: PPUSH
64102: LD_VAR 0 4
64106: PPUSH
64107: CALL_OW 74
64111: PPUSH
64112: CALL_OW 115
// end ; end ;
64116: GO 63778
64118: POP
64119: POP
// end ; end_of_file
64120: LD_VAR 0 3
64124: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64125: LD_VAR 0 1
64129: PUSH
64130: LD_INT 200
64132: DOUBLE
64133: GREATEREQUAL
64134: IFFALSE 64142
64136: LD_INT 299
64138: DOUBLE
64139: LESSEQUAL
64140: IFTRUE 64144
64142: GO 64176
64144: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64145: LD_VAR 0 1
64149: PPUSH
64150: LD_VAR 0 2
64154: PPUSH
64155: LD_VAR 0 3
64159: PPUSH
64160: LD_VAR 0 4
64164: PPUSH
64165: LD_VAR 0 5
64169: PPUSH
64170: CALL 20687 0 5
64174: GO 64253
64176: LD_INT 300
64178: DOUBLE
64179: GREATEREQUAL
64180: IFFALSE 64188
64182: LD_INT 399
64184: DOUBLE
64185: LESSEQUAL
64186: IFTRUE 64190
64188: GO 64252
64190: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64191: LD_VAR 0 1
64195: PPUSH
64196: LD_VAR 0 2
64200: PPUSH
64201: LD_VAR 0 3
64205: PPUSH
64206: LD_VAR 0 4
64210: PPUSH
64211: LD_VAR 0 5
64215: PPUSH
64216: LD_VAR 0 6
64220: PPUSH
64221: LD_VAR 0 7
64225: PPUSH
64226: LD_VAR 0 8
64230: PPUSH
64231: LD_VAR 0 9
64235: PPUSH
64236: LD_VAR 0 10
64240: PPUSH
64241: LD_VAR 0 11
64245: PPUSH
64246: CALL 18575 0 11
64250: GO 64253
64252: POP
// end ;
64253: PPOPN 11
64255: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64256: LD_VAR 0 1
64260: PPUSH
64261: LD_VAR 0 2
64265: PPUSH
64266: LD_VAR 0 3
64270: PPUSH
64271: LD_VAR 0 4
64275: PPUSH
64276: LD_VAR 0 5
64280: PPUSH
64281: CALL 20669 0 5
// end ; end_of_file
64285: PPOPN 5
64287: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64288: LD_VAR 0 1
64292: PPUSH
64293: LD_VAR 0 2
64297: PPUSH
64298: LD_VAR 0 3
64302: PPUSH
64303: LD_VAR 0 4
64307: PPUSH
64308: LD_VAR 0 5
64312: PPUSH
64313: LD_VAR 0 6
64317: PPUSH
64318: CALL 7383 0 6
// end ;
64322: PPOPN 6
64324: END
