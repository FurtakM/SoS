// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 58558 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 25195 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 25195 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 25195 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 30059 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 60846 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 30059 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 60846 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 30059 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin if un = JMM then
6877: LD_VAR 0 1
6881: PUSH
6882: LD_EXP 14
6886: EQUAL
6887: IFFALSE 6896
// YouLost ( JMM ) ;
6889: LD_STRING JMM
6891: PPUSH
6892: CALL_OW 104
// if un = Burlak then
6896: LD_VAR 0 1
6900: PUSH
6901: LD_EXP 15
6905: EQUAL
6906: IFFALSE 6915
// YouLost ( Burlak ) ;
6908: LD_STRING Burlak
6910: PPUSH
6911: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6915: LD_VAR 0 1
6919: PUSH
6920: LD_INT 21
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 23
6932: PUSH
6933: LD_INT 1
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: EMPTY
6941: LIST
6942: LIST
6943: PPUSH
6944: CALL_OW 69
6948: IN
6949: IFFALSE 6965
// killCounter := killCounter + 1 ;
6951: LD_ADDR_EXP 12
6955: PUSH
6956: LD_EXP 12
6960: PUSH
6961: LD_INT 1
6963: PLUS
6964: ST_TO_ADDR
// end ;
6965: PPOPN 1
6967: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6968: LD_VAR 0 2
6972: PUSH
6973: LD_INT 7
6975: EQUAL
6976: PUSH
6977: LD_VAR 0 1
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: LD_INT 30
6987: PUSH
6988: LD_INT 31
6990: PUSH
6991: EMPTY
6992: LIST
6993: LIST
6994: PUSH
6995: LD_INT 30
6997: PUSH
6998: LD_INT 32
7000: PUSH
7001: EMPTY
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 30
7007: PUSH
7008: LD_INT 33
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: PPUSH
7021: CALL_OW 69
7025: IN
7026: AND
7027: IFFALSE 7043
// bunkerCounter := bunkerCounter + 1 ;
7029: LD_ADDR_EXP 13
7033: PUSH
7034: LD_EXP 13
7038: PUSH
7039: LD_INT 1
7041: PLUS
7042: ST_TO_ADDR
// end ;
7043: PPOPN 3
7045: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 255
7055: PUSH
7056: LD_INT 7
7058: EQUAL
7059: IFFALSE 7069
// artifactPickedUp := true ;
7061: LD_ADDR_EXP 6
7065: PUSH
7066: LD_INT 1
7068: ST_TO_ADDR
// end ;
7069: PPOPN 2
7071: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7072: LD_ADDR_EXP 6
7076: PUSH
7077: LD_INT 0
7079: ST_TO_ADDR
7080: PPOPN 2
7082: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetSide ( vehicle ) <> 1 then
7083: LD_VAR 0 1
7087: PPUSH
7088: CALL_OW 255
7092: PUSH
7093: LD_INT 1
7095: NONEQUAL
7096: IFFALSE 7100
// exit ;
7098: GO 7147
// wait ( 0 0$5 ) ;
7100: LD_INT 175
7102: PPUSH
7103: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7107: LD_VAR 0 1
7111: PPUSH
7112: CALL_OW 263
7116: PUSH
7117: LD_INT 2
7119: EQUAL
7120: IFFALSE 7131
// Connect ( vehicle ) ;
7122: LD_VAR 0 1
7126: PPUSH
7127: CALL 33152 0 1
// vehGuard := vehGuard ^ vehicle ;
7131: LD_ADDR_EXP 23
7135: PUSH
7136: LD_EXP 23
7140: PUSH
7141: LD_VAR 0 1
7145: ADD
7146: ST_TO_ADDR
// end ;
7147: PPOPN 2
7149: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7150: LD_VAR 0 1
7154: PUSH
7155: LD_INT 1
7157: EQUAL
7158: PUSH
7159: LD_EXP 7
7163: NOT
7164: AND
7165: IFFALSE 7200
// begin planCaptured := true ;
7167: LD_ADDR_EXP 7
7171: PUSH
7172: LD_INT 1
7174: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7175: LD_STRING MEnd
7177: PPUSH
7178: CALL_OW 337
// canEnd := true ;
7182: LD_ADDR_EXP 10
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// missionTime := tick ;
7190: LD_ADDR_EXP 11
7194: PUSH
7195: LD_OWVAR 1
7199: ST_TO_ADDR
// end ; end ;
7200: PPOPN 3
7202: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL 21296 0 1
// end ; end_of_file
7212: PPOPN 1
7214: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7215: LD_INT 0
7217: PPUSH
// ar_miner := 81 ;
7218: LD_ADDR_EXP 31
7222: PUSH
7223: LD_INT 81
7225: ST_TO_ADDR
// ar_crane := 88 ;
7226: LD_ADDR_EXP 30
7230: PUSH
7231: LD_INT 88
7233: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7234: LD_ADDR_EXP 25
7238: PUSH
7239: LD_INT 89
7241: ST_TO_ADDR
// us_hack := 99 ;
7242: LD_ADDR_EXP 26
7246: PUSH
7247: LD_INT 99
7249: ST_TO_ADDR
// us_artillery := 97 ;
7250: LD_ADDR_EXP 27
7254: PUSH
7255: LD_INT 97
7257: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7258: LD_ADDR_EXP 28
7262: PUSH
7263: LD_INT 91
7265: ST_TO_ADDR
// ar_mortar := 92 ;
7266: LD_ADDR_EXP 29
7270: PUSH
7271: LD_INT 92
7273: ST_TO_ADDR
// ru_radar := 98 ;
7274: LD_ADDR_EXP 24
7278: PUSH
7279: LD_INT 98
7281: ST_TO_ADDR
// tech_Artillery := 80 ;
7282: LD_ADDR_EXP 32
7286: PUSH
7287: LD_INT 80
7289: ST_TO_ADDR
// tech_RadMat := 81 ;
7290: LD_ADDR_EXP 33
7294: PUSH
7295: LD_INT 81
7297: ST_TO_ADDR
// tech_BasicTools := 82 ;
7298: LD_ADDR_EXP 34
7302: PUSH
7303: LD_INT 82
7305: ST_TO_ADDR
// tech_Cargo := 83 ;
7306: LD_ADDR_EXP 35
7310: PUSH
7311: LD_INT 83
7313: ST_TO_ADDR
// tech_Track := 84 ;
7314: LD_ADDR_EXP 36
7318: PUSH
7319: LD_INT 84
7321: ST_TO_ADDR
// tech_Crane := 85 ;
7322: LD_ADDR_EXP 37
7326: PUSH
7327: LD_INT 85
7329: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7330: LD_ADDR_EXP 38
7334: PUSH
7335: LD_INT 86
7337: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7338: LD_ADDR_EXP 39
7342: PUSH
7343: LD_INT 87
7345: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7346: LD_ADDR_EXP 40
7350: PUSH
7351: LD_INT 88
7353: ST_TO_ADDR
// class_mastodont := 31 ;
7354: LD_ADDR_EXP 41
7358: PUSH
7359: LD_INT 31
7361: ST_TO_ADDR
// class_horse := 21 ;
7362: LD_ADDR_EXP 42
7366: PUSH
7367: LD_INT 21
7369: ST_TO_ADDR
// end ;
7370: LD_VAR 0 1
7374: RET
// every 1 do
7375: GO 7377
7377: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7378: CALL 7215 0 0
7382: END
// every 0 0$1 do
7383: GO 7385
7385: DISABLE
// begin enable ;
7386: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7387: LD_STRING updateTimer(
7389: PUSH
7390: LD_OWVAR 1
7394: STR
7395: PUSH
7396: LD_STRING );
7398: STR
7399: PPUSH
7400: CALL_OW 559
// end ;
7404: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7405: LD_INT 0
7407: PPUSH
// if p2 = 100 then
7408: LD_VAR 0 2
7412: PUSH
7413: LD_INT 100
7415: EQUAL
7416: IFFALSE 8419
// begin if not StreamModeActive then
7418: LD_EXP 43
7422: NOT
7423: IFFALSE 7433
// StreamModeActive := true ;
7425: LD_ADDR_EXP 43
7429: PUSH
7430: LD_INT 1
7432: ST_TO_ADDR
// if p3 = 0 then
7433: LD_VAR 0 3
7437: PUSH
7438: LD_INT 0
7440: EQUAL
7441: IFFALSE 7447
// InitStreamMode ;
7443: CALL 8579 0 0
// if p3 = 1 then
7447: LD_VAR 0 3
7451: PUSH
7452: LD_INT 1
7454: EQUAL
7455: IFFALSE 7465
// sRocket := true ;
7457: LD_ADDR_EXP 48
7461: PUSH
7462: LD_INT 1
7464: ST_TO_ADDR
// if p3 = 2 then
7465: LD_VAR 0 3
7469: PUSH
7470: LD_INT 2
7472: EQUAL
7473: IFFALSE 7483
// sSpeed := true ;
7475: LD_ADDR_EXP 47
7479: PUSH
7480: LD_INT 1
7482: ST_TO_ADDR
// if p3 = 3 then
7483: LD_VAR 0 3
7487: PUSH
7488: LD_INT 3
7490: EQUAL
7491: IFFALSE 7501
// sEngine := true ;
7493: LD_ADDR_EXP 49
7497: PUSH
7498: LD_INT 1
7500: ST_TO_ADDR
// if p3 = 4 then
7501: LD_VAR 0 3
7505: PUSH
7506: LD_INT 4
7508: EQUAL
7509: IFFALSE 7519
// sSpec := true ;
7511: LD_ADDR_EXP 46
7515: PUSH
7516: LD_INT 1
7518: ST_TO_ADDR
// if p3 = 5 then
7519: LD_VAR 0 3
7523: PUSH
7524: LD_INT 5
7526: EQUAL
7527: IFFALSE 7537
// sLevel := true ;
7529: LD_ADDR_EXP 50
7533: PUSH
7534: LD_INT 1
7536: ST_TO_ADDR
// if p3 = 6 then
7537: LD_VAR 0 3
7541: PUSH
7542: LD_INT 6
7544: EQUAL
7545: IFFALSE 7555
// sArmoury := true ;
7547: LD_ADDR_EXP 51
7551: PUSH
7552: LD_INT 1
7554: ST_TO_ADDR
// if p3 = 7 then
7555: LD_VAR 0 3
7559: PUSH
7560: LD_INT 7
7562: EQUAL
7563: IFFALSE 7573
// sRadar := true ;
7565: LD_ADDR_EXP 52
7569: PUSH
7570: LD_INT 1
7572: ST_TO_ADDR
// if p3 = 8 then
7573: LD_VAR 0 3
7577: PUSH
7578: LD_INT 8
7580: EQUAL
7581: IFFALSE 7591
// sBunker := true ;
7583: LD_ADDR_EXP 53
7587: PUSH
7588: LD_INT 1
7590: ST_TO_ADDR
// if p3 = 9 then
7591: LD_VAR 0 3
7595: PUSH
7596: LD_INT 9
7598: EQUAL
7599: IFFALSE 7609
// sHack := true ;
7601: LD_ADDR_EXP 54
7605: PUSH
7606: LD_INT 1
7608: ST_TO_ADDR
// if p3 = 10 then
7609: LD_VAR 0 3
7613: PUSH
7614: LD_INT 10
7616: EQUAL
7617: IFFALSE 7627
// sFire := true ;
7619: LD_ADDR_EXP 55
7623: PUSH
7624: LD_INT 1
7626: ST_TO_ADDR
// if p3 = 11 then
7627: LD_VAR 0 3
7631: PUSH
7632: LD_INT 11
7634: EQUAL
7635: IFFALSE 7645
// sRefresh := true ;
7637: LD_ADDR_EXP 56
7641: PUSH
7642: LD_INT 1
7644: ST_TO_ADDR
// if p3 = 12 then
7645: LD_VAR 0 3
7649: PUSH
7650: LD_INT 12
7652: EQUAL
7653: IFFALSE 7663
// sExp := true ;
7655: LD_ADDR_EXP 57
7659: PUSH
7660: LD_INT 1
7662: ST_TO_ADDR
// if p3 = 13 then
7663: LD_VAR 0 3
7667: PUSH
7668: LD_INT 13
7670: EQUAL
7671: IFFALSE 7681
// sDepot := true ;
7673: LD_ADDR_EXP 58
7677: PUSH
7678: LD_INT 1
7680: ST_TO_ADDR
// if p3 = 14 then
7681: LD_VAR 0 3
7685: PUSH
7686: LD_INT 14
7688: EQUAL
7689: IFFALSE 7699
// sFlag := true ;
7691: LD_ADDR_EXP 59
7695: PUSH
7696: LD_INT 1
7698: ST_TO_ADDR
// if p3 = 15 then
7699: LD_VAR 0 3
7703: PUSH
7704: LD_INT 15
7706: EQUAL
7707: IFFALSE 7717
// sKamikadze := true ;
7709: LD_ADDR_EXP 67
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
// if p3 = 16 then
7717: LD_VAR 0 3
7721: PUSH
7722: LD_INT 16
7724: EQUAL
7725: IFFALSE 7735
// sTroll := true ;
7727: LD_ADDR_EXP 68
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// if p3 = 17 then
7735: LD_VAR 0 3
7739: PUSH
7740: LD_INT 17
7742: EQUAL
7743: IFFALSE 7753
// sSlow := true ;
7745: LD_ADDR_EXP 69
7749: PUSH
7750: LD_INT 1
7752: ST_TO_ADDR
// if p3 = 18 then
7753: LD_VAR 0 3
7757: PUSH
7758: LD_INT 18
7760: EQUAL
7761: IFFALSE 7771
// sLack := true ;
7763: LD_ADDR_EXP 70
7767: PUSH
7768: LD_INT 1
7770: ST_TO_ADDR
// if p3 = 19 then
7771: LD_VAR 0 3
7775: PUSH
7776: LD_INT 19
7778: EQUAL
7779: IFFALSE 7789
// sTank := true ;
7781: LD_ADDR_EXP 72
7785: PUSH
7786: LD_INT 1
7788: ST_TO_ADDR
// if p3 = 20 then
7789: LD_VAR 0 3
7793: PUSH
7794: LD_INT 20
7796: EQUAL
7797: IFFALSE 7807
// sRemote := true ;
7799: LD_ADDR_EXP 73
7803: PUSH
7804: LD_INT 1
7806: ST_TO_ADDR
// if p3 = 21 then
7807: LD_VAR 0 3
7811: PUSH
7812: LD_INT 21
7814: EQUAL
7815: IFFALSE 7825
// sPowell := true ;
7817: LD_ADDR_EXP 74
7821: PUSH
7822: LD_INT 1
7824: ST_TO_ADDR
// if p3 = 22 then
7825: LD_VAR 0 3
7829: PUSH
7830: LD_INT 22
7832: EQUAL
7833: IFFALSE 7843
// sTeleport := true ;
7835: LD_ADDR_EXP 77
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// if p3 = 23 then
7843: LD_VAR 0 3
7847: PUSH
7848: LD_INT 23
7850: EQUAL
7851: IFFALSE 7861
// sOilTower := true ;
7853: LD_ADDR_EXP 79
7857: PUSH
7858: LD_INT 1
7860: ST_TO_ADDR
// if p3 = 24 then
7861: LD_VAR 0 3
7865: PUSH
7866: LD_INT 24
7868: EQUAL
7869: IFFALSE 7879
// sShovel := true ;
7871: LD_ADDR_EXP 80
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// if p3 = 25 then
7879: LD_VAR 0 3
7883: PUSH
7884: LD_INT 25
7886: EQUAL
7887: IFFALSE 7897
// sSheik := true ;
7889: LD_ADDR_EXP 81
7893: PUSH
7894: LD_INT 1
7896: ST_TO_ADDR
// if p3 = 26 then
7897: LD_VAR 0 3
7901: PUSH
7902: LD_INT 26
7904: EQUAL
7905: IFFALSE 7915
// sEarthquake := true ;
7907: LD_ADDR_EXP 83
7911: PUSH
7912: LD_INT 1
7914: ST_TO_ADDR
// if p3 = 27 then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 27
7922: EQUAL
7923: IFFALSE 7933
// sAI := true ;
7925: LD_ADDR_EXP 84
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// if p3 = 28 then
7933: LD_VAR 0 3
7937: PUSH
7938: LD_INT 28
7940: EQUAL
7941: IFFALSE 7951
// sCargo := true ;
7943: LD_ADDR_EXP 87
7947: PUSH
7948: LD_INT 1
7950: ST_TO_ADDR
// if p3 = 29 then
7951: LD_VAR 0 3
7955: PUSH
7956: LD_INT 29
7958: EQUAL
7959: IFFALSE 7969
// sDLaser := true ;
7961: LD_ADDR_EXP 88
7965: PUSH
7966: LD_INT 1
7968: ST_TO_ADDR
// if p3 = 30 then
7969: LD_VAR 0 3
7973: PUSH
7974: LD_INT 30
7976: EQUAL
7977: IFFALSE 7987
// sExchange := true ;
7979: LD_ADDR_EXP 89
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// if p3 = 31 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 31
7994: EQUAL
7995: IFFALSE 8005
// sFac := true ;
7997: LD_ADDR_EXP 90
8001: PUSH
8002: LD_INT 1
8004: ST_TO_ADDR
// if p3 = 32 then
8005: LD_VAR 0 3
8009: PUSH
8010: LD_INT 32
8012: EQUAL
8013: IFFALSE 8023
// sPower := true ;
8015: LD_ADDR_EXP 91
8019: PUSH
8020: LD_INT 1
8022: ST_TO_ADDR
// if p3 = 33 then
8023: LD_VAR 0 3
8027: PUSH
8028: LD_INT 33
8030: EQUAL
8031: IFFALSE 8041
// sRandom := true ;
8033: LD_ADDR_EXP 92
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// if p3 = 34 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 34
8048: EQUAL
8049: IFFALSE 8059
// sShield := true ;
8051: LD_ADDR_EXP 93
8055: PUSH
8056: LD_INT 1
8058: ST_TO_ADDR
// if p3 = 35 then
8059: LD_VAR 0 3
8063: PUSH
8064: LD_INT 35
8066: EQUAL
8067: IFFALSE 8077
// sTime := true ;
8069: LD_ADDR_EXP 94
8073: PUSH
8074: LD_INT 1
8076: ST_TO_ADDR
// if p3 = 36 then
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 36
8084: EQUAL
8085: IFFALSE 8095
// sTools := true ;
8087: LD_ADDR_EXP 95
8091: PUSH
8092: LD_INT 1
8094: ST_TO_ADDR
// if p3 = 101 then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 101
8102: EQUAL
8103: IFFALSE 8113
// sSold := true ;
8105: LD_ADDR_EXP 60
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// if p3 = 102 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 102
8120: EQUAL
8121: IFFALSE 8131
// sDiff := true ;
8123: LD_ADDR_EXP 61
8127: PUSH
8128: LD_INT 1
8130: ST_TO_ADDR
// if p3 = 103 then
8131: LD_VAR 0 3
8135: PUSH
8136: LD_INT 103
8138: EQUAL
8139: IFFALSE 8149
// sFog := true ;
8141: LD_ADDR_EXP 64
8145: PUSH
8146: LD_INT 1
8148: ST_TO_ADDR
// if p3 = 104 then
8149: LD_VAR 0 3
8153: PUSH
8154: LD_INT 104
8156: EQUAL
8157: IFFALSE 8167
// sReset := true ;
8159: LD_ADDR_EXP 65
8163: PUSH
8164: LD_INT 1
8166: ST_TO_ADDR
// if p3 = 105 then
8167: LD_VAR 0 3
8171: PUSH
8172: LD_INT 105
8174: EQUAL
8175: IFFALSE 8185
// sSun := true ;
8177: LD_ADDR_EXP 66
8181: PUSH
8182: LD_INT 1
8184: ST_TO_ADDR
// if p3 = 106 then
8185: LD_VAR 0 3
8189: PUSH
8190: LD_INT 106
8192: EQUAL
8193: IFFALSE 8203
// sTiger := true ;
8195: LD_ADDR_EXP 62
8199: PUSH
8200: LD_INT 1
8202: ST_TO_ADDR
// if p3 = 107 then
8203: LD_VAR 0 3
8207: PUSH
8208: LD_INT 107
8210: EQUAL
8211: IFFALSE 8221
// sBomb := true ;
8213: LD_ADDR_EXP 63
8217: PUSH
8218: LD_INT 1
8220: ST_TO_ADDR
// if p3 = 108 then
8221: LD_VAR 0 3
8225: PUSH
8226: LD_INT 108
8228: EQUAL
8229: IFFALSE 8239
// sWound := true ;
8231: LD_ADDR_EXP 71
8235: PUSH
8236: LD_INT 1
8238: ST_TO_ADDR
// if p3 = 109 then
8239: LD_VAR 0 3
8243: PUSH
8244: LD_INT 109
8246: EQUAL
8247: IFFALSE 8257
// sBetray := true ;
8249: LD_ADDR_EXP 75
8253: PUSH
8254: LD_INT 1
8256: ST_TO_ADDR
// if p3 = 110 then
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 110
8264: EQUAL
8265: IFFALSE 8275
// sContamin := true ;
8267: LD_ADDR_EXP 76
8271: PUSH
8272: LD_INT 1
8274: ST_TO_ADDR
// if p3 = 111 then
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 111
8282: EQUAL
8283: IFFALSE 8293
// sOil := true ;
8285: LD_ADDR_EXP 78
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// if p3 = 112 then
8293: LD_VAR 0 3
8297: PUSH
8298: LD_INT 112
8300: EQUAL
8301: IFFALSE 8311
// sStu := true ;
8303: LD_ADDR_EXP 82
8307: PUSH
8308: LD_INT 1
8310: ST_TO_ADDR
// if p3 = 113 then
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 113
8318: EQUAL
8319: IFFALSE 8329
// sBazooka := true ;
8321: LD_ADDR_EXP 85
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// if p3 = 114 then
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 114
8336: EQUAL
8337: IFFALSE 8347
// sMortar := true ;
8339: LD_ADDR_EXP 86
8343: PUSH
8344: LD_INT 1
8346: ST_TO_ADDR
// if p3 = 115 then
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 115
8354: EQUAL
8355: IFFALSE 8365
// sRanger := true ;
8357: LD_ADDR_EXP 96
8361: PUSH
8362: LD_INT 1
8364: ST_TO_ADDR
// if p3 = 116 then
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 116
8372: EQUAL
8373: IFFALSE 8383
// sComputer := true ;
8375: LD_ADDR_EXP 97
8379: PUSH
8380: LD_INT 1
8382: ST_TO_ADDR
// if p3 = 117 then
8383: LD_VAR 0 3
8387: PUSH
8388: LD_INT 117
8390: EQUAL
8391: IFFALSE 8401
// s30 := true ;
8393: LD_ADDR_EXP 98
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// if p3 = 118 then
8401: LD_VAR 0 3
8405: PUSH
8406: LD_INT 118
8408: EQUAL
8409: IFFALSE 8419
// s60 := true ;
8411: LD_ADDR_EXP 99
8415: PUSH
8416: LD_INT 1
8418: ST_TO_ADDR
// end ; if p2 = 101 then
8419: LD_VAR 0 2
8423: PUSH
8424: LD_INT 101
8426: EQUAL
8427: IFFALSE 8555
// begin case p3 of 1 :
8429: LD_VAR 0 3
8433: PUSH
8434: LD_INT 1
8436: DOUBLE
8437: EQUAL
8438: IFTRUE 8442
8440: GO 8449
8442: POP
// hHackUnlimitedResources ; 2 :
8443: CALL 20151 0 0
8447: GO 8555
8449: LD_INT 2
8451: DOUBLE
8452: EQUAL
8453: IFTRUE 8457
8455: GO 8464
8457: POP
// hHackSetLevel10 ; 3 :
8458: CALL 20284 0 0
8462: GO 8555
8464: LD_INT 3
8466: DOUBLE
8467: EQUAL
8468: IFTRUE 8472
8470: GO 8479
8472: POP
// hHackSetLevel10YourUnits ; 4 :
8473: CALL 20369 0 0
8477: GO 8555
8479: LD_INT 4
8481: DOUBLE
8482: EQUAL
8483: IFTRUE 8487
8485: GO 8494
8487: POP
// hHackInvincible ; 5 :
8488: CALL 20817 0 0
8492: GO 8555
8494: LD_INT 5
8496: DOUBLE
8497: EQUAL
8498: IFTRUE 8502
8500: GO 8509
8502: POP
// hHackInvisible ; 6 :
8503: CALL 20928 0 0
8507: GO 8555
8509: LD_INT 6
8511: DOUBLE
8512: EQUAL
8513: IFTRUE 8517
8515: GO 8524
8517: POP
// hHackChangeYourSide ; 7 :
8518: CALL 20985 0 0
8522: GO 8555
8524: LD_INT 7
8526: DOUBLE
8527: EQUAL
8528: IFTRUE 8532
8530: GO 8539
8532: POP
// hHackChangeUnitSide ; 8 :
8533: CALL 21027 0 0
8537: GO 8555
8539: LD_INT 8
8541: DOUBLE
8542: EQUAL
8543: IFTRUE 8547
8545: GO 8554
8547: POP
// hHackFog ; end ;
8548: CALL 21128 0 0
8552: GO 8555
8554: POP
// end ; end ;
8555: LD_VAR 0 7
8559: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8560: GO 8562
8562: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8563: LD_STRING initStreamRollete();
8565: PPUSH
8566: CALL_OW 559
// InitStreamMode ;
8570: CALL 8579 0 0
// DefineStreamItems ( ) ;
8574: CALL 9043 0 0
// end ;
8578: END
// function InitStreamMode ; begin
8579: LD_INT 0
8581: PPUSH
// streamModeActive := false ;
8582: LD_ADDR_EXP 43
8586: PUSH
8587: LD_INT 0
8589: ST_TO_ADDR
// normalCounter := 36 ;
8590: LD_ADDR_EXP 44
8594: PUSH
8595: LD_INT 36
8597: ST_TO_ADDR
// hardcoreCounter := 16 ;
8598: LD_ADDR_EXP 45
8602: PUSH
8603: LD_INT 16
8605: ST_TO_ADDR
// sRocket := false ;
8606: LD_ADDR_EXP 48
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// sSpeed := false ;
8614: LD_ADDR_EXP 47
8618: PUSH
8619: LD_INT 0
8621: ST_TO_ADDR
// sEngine := false ;
8622: LD_ADDR_EXP 49
8626: PUSH
8627: LD_INT 0
8629: ST_TO_ADDR
// sSpec := false ;
8630: LD_ADDR_EXP 46
8634: PUSH
8635: LD_INT 0
8637: ST_TO_ADDR
// sLevel := false ;
8638: LD_ADDR_EXP 50
8642: PUSH
8643: LD_INT 0
8645: ST_TO_ADDR
// sArmoury := false ;
8646: LD_ADDR_EXP 51
8650: PUSH
8651: LD_INT 0
8653: ST_TO_ADDR
// sRadar := false ;
8654: LD_ADDR_EXP 52
8658: PUSH
8659: LD_INT 0
8661: ST_TO_ADDR
// sBunker := false ;
8662: LD_ADDR_EXP 53
8666: PUSH
8667: LD_INT 0
8669: ST_TO_ADDR
// sHack := false ;
8670: LD_ADDR_EXP 54
8674: PUSH
8675: LD_INT 0
8677: ST_TO_ADDR
// sFire := false ;
8678: LD_ADDR_EXP 55
8682: PUSH
8683: LD_INT 0
8685: ST_TO_ADDR
// sRefresh := false ;
8686: LD_ADDR_EXP 56
8690: PUSH
8691: LD_INT 0
8693: ST_TO_ADDR
// sExp := false ;
8694: LD_ADDR_EXP 57
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// sDepot := false ;
8702: LD_ADDR_EXP 58
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// sFlag := false ;
8710: LD_ADDR_EXP 59
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// sKamikadze := false ;
8718: LD_ADDR_EXP 67
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// sTroll := false ;
8726: LD_ADDR_EXP 68
8730: PUSH
8731: LD_INT 0
8733: ST_TO_ADDR
// sSlow := false ;
8734: LD_ADDR_EXP 69
8738: PUSH
8739: LD_INT 0
8741: ST_TO_ADDR
// sLack := false ;
8742: LD_ADDR_EXP 70
8746: PUSH
8747: LD_INT 0
8749: ST_TO_ADDR
// sTank := false ;
8750: LD_ADDR_EXP 72
8754: PUSH
8755: LD_INT 0
8757: ST_TO_ADDR
// sRemote := false ;
8758: LD_ADDR_EXP 73
8762: PUSH
8763: LD_INT 0
8765: ST_TO_ADDR
// sPowell := false ;
8766: LD_ADDR_EXP 74
8770: PUSH
8771: LD_INT 0
8773: ST_TO_ADDR
// sTeleport := false ;
8774: LD_ADDR_EXP 77
8778: PUSH
8779: LD_INT 0
8781: ST_TO_ADDR
// sOilTower := false ;
8782: LD_ADDR_EXP 79
8786: PUSH
8787: LD_INT 0
8789: ST_TO_ADDR
// sShovel := false ;
8790: LD_ADDR_EXP 80
8794: PUSH
8795: LD_INT 0
8797: ST_TO_ADDR
// sSheik := false ;
8798: LD_ADDR_EXP 81
8802: PUSH
8803: LD_INT 0
8805: ST_TO_ADDR
// sEarthquake := false ;
8806: LD_ADDR_EXP 83
8810: PUSH
8811: LD_INT 0
8813: ST_TO_ADDR
// sAI := false ;
8814: LD_ADDR_EXP 84
8818: PUSH
8819: LD_INT 0
8821: ST_TO_ADDR
// sCargo := false ;
8822: LD_ADDR_EXP 87
8826: PUSH
8827: LD_INT 0
8829: ST_TO_ADDR
// sDLaser := false ;
8830: LD_ADDR_EXP 88
8834: PUSH
8835: LD_INT 0
8837: ST_TO_ADDR
// sExchange := false ;
8838: LD_ADDR_EXP 89
8842: PUSH
8843: LD_INT 0
8845: ST_TO_ADDR
// sFac := false ;
8846: LD_ADDR_EXP 90
8850: PUSH
8851: LD_INT 0
8853: ST_TO_ADDR
// sPower := false ;
8854: LD_ADDR_EXP 91
8858: PUSH
8859: LD_INT 0
8861: ST_TO_ADDR
// sRandom := false ;
8862: LD_ADDR_EXP 92
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// sShield := false ;
8870: LD_ADDR_EXP 93
8874: PUSH
8875: LD_INT 0
8877: ST_TO_ADDR
// sTime := false ;
8878: LD_ADDR_EXP 94
8882: PUSH
8883: LD_INT 0
8885: ST_TO_ADDR
// sTools := false ;
8886: LD_ADDR_EXP 95
8890: PUSH
8891: LD_INT 0
8893: ST_TO_ADDR
// sSold := false ;
8894: LD_ADDR_EXP 60
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// sDiff := false ;
8902: LD_ADDR_EXP 61
8906: PUSH
8907: LD_INT 0
8909: ST_TO_ADDR
// sFog := false ;
8910: LD_ADDR_EXP 64
8914: PUSH
8915: LD_INT 0
8917: ST_TO_ADDR
// sReset := false ;
8918: LD_ADDR_EXP 65
8922: PUSH
8923: LD_INT 0
8925: ST_TO_ADDR
// sSun := false ;
8926: LD_ADDR_EXP 66
8930: PUSH
8931: LD_INT 0
8933: ST_TO_ADDR
// sTiger := false ;
8934: LD_ADDR_EXP 62
8938: PUSH
8939: LD_INT 0
8941: ST_TO_ADDR
// sBomb := false ;
8942: LD_ADDR_EXP 63
8946: PUSH
8947: LD_INT 0
8949: ST_TO_ADDR
// sWound := false ;
8950: LD_ADDR_EXP 71
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// sBetray := false ;
8958: LD_ADDR_EXP 75
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// sContamin := false ;
8966: LD_ADDR_EXP 76
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// sOil := false ;
8974: LD_ADDR_EXP 78
8978: PUSH
8979: LD_INT 0
8981: ST_TO_ADDR
// sStu := false ;
8982: LD_ADDR_EXP 82
8986: PUSH
8987: LD_INT 0
8989: ST_TO_ADDR
// sBazooka := false ;
8990: LD_ADDR_EXP 85
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// sMortar := false ;
8998: LD_ADDR_EXP 86
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// sRanger := false ;
9006: LD_ADDR_EXP 96
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// sComputer := false ;
9014: LD_ADDR_EXP 97
9018: PUSH
9019: LD_INT 0
9021: ST_TO_ADDR
// s30 := false ;
9022: LD_ADDR_EXP 98
9026: PUSH
9027: LD_INT 0
9029: ST_TO_ADDR
// s60 := false ;
9030: LD_ADDR_EXP 99
9034: PUSH
9035: LD_INT 0
9037: ST_TO_ADDR
// end ;
9038: LD_VAR 0 1
9042: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9043: LD_INT 0
9045: PPUSH
9046: PPUSH
9047: PPUSH
9048: PPUSH
9049: PPUSH
// result := [ ] ;
9050: LD_ADDR_VAR 0 1
9054: PUSH
9055: EMPTY
9056: ST_TO_ADDR
// if campaign_id = 1 then
9057: LD_OWVAR 69
9061: PUSH
9062: LD_INT 1
9064: EQUAL
9065: IFFALSE 12231
// begin case mission_number of 1 :
9067: LD_OWVAR 70
9071: PUSH
9072: LD_INT 1
9074: DOUBLE
9075: EQUAL
9076: IFTRUE 9080
9078: GO 9156
9080: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9081: LD_ADDR_VAR 0 1
9085: PUSH
9086: LD_INT 2
9088: PUSH
9089: LD_INT 4
9091: PUSH
9092: LD_INT 11
9094: PUSH
9095: LD_INT 12
9097: PUSH
9098: LD_INT 15
9100: PUSH
9101: LD_INT 16
9103: PUSH
9104: LD_INT 22
9106: PUSH
9107: LD_INT 23
9109: PUSH
9110: LD_INT 26
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 101
9126: PUSH
9127: LD_INT 102
9129: PUSH
9130: LD_INT 106
9132: PUSH
9133: LD_INT 116
9135: PUSH
9136: LD_INT 117
9138: PUSH
9139: LD_INT 118
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: ST_TO_ADDR
9154: GO 12229
9156: LD_INT 2
9158: DOUBLE
9159: EQUAL
9160: IFTRUE 9164
9162: GO 9248
9164: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9165: LD_ADDR_VAR 0 1
9169: PUSH
9170: LD_INT 2
9172: PUSH
9173: LD_INT 4
9175: PUSH
9176: LD_INT 11
9178: PUSH
9179: LD_INT 12
9181: PUSH
9182: LD_INT 15
9184: PUSH
9185: LD_INT 16
9187: PUSH
9188: LD_INT 22
9190: PUSH
9191: LD_INT 23
9193: PUSH
9194: LD_INT 26
9196: PUSH
9197: EMPTY
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 101
9210: PUSH
9211: LD_INT 102
9213: PUSH
9214: LD_INT 105
9216: PUSH
9217: LD_INT 106
9219: PUSH
9220: LD_INT 108
9222: PUSH
9223: LD_INT 116
9225: PUSH
9226: LD_INT 117
9228: PUSH
9229: LD_INT 118
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: LIST
9240: LIST
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: ST_TO_ADDR
9246: GO 12229
9248: LD_INT 3
9250: DOUBLE
9251: EQUAL
9252: IFTRUE 9256
9254: GO 9344
9256: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9257: LD_ADDR_VAR 0 1
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: LD_INT 4
9267: PUSH
9268: LD_INT 5
9270: PUSH
9271: LD_INT 11
9273: PUSH
9274: LD_INT 12
9276: PUSH
9277: LD_INT 15
9279: PUSH
9280: LD_INT 16
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_INT 26
9288: PUSH
9289: LD_INT 36
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 101
9306: PUSH
9307: LD_INT 102
9309: PUSH
9310: LD_INT 105
9312: PUSH
9313: LD_INT 106
9315: PUSH
9316: LD_INT 108
9318: PUSH
9319: LD_INT 116
9321: PUSH
9322: LD_INT 117
9324: PUSH
9325: LD_INT 118
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: ST_TO_ADDR
9342: GO 12229
9344: LD_INT 4
9346: DOUBLE
9347: EQUAL
9348: IFTRUE 9352
9350: GO 9448
9352: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9353: LD_ADDR_VAR 0 1
9357: PUSH
9358: LD_INT 2
9360: PUSH
9361: LD_INT 4
9363: PUSH
9364: LD_INT 5
9366: PUSH
9367: LD_INT 8
9369: PUSH
9370: LD_INT 11
9372: PUSH
9373: LD_INT 12
9375: PUSH
9376: LD_INT 15
9378: PUSH
9379: LD_INT 16
9381: PUSH
9382: LD_INT 22
9384: PUSH
9385: LD_INT 23
9387: PUSH
9388: LD_INT 26
9390: PUSH
9391: LD_INT 36
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 101
9410: PUSH
9411: LD_INT 102
9413: PUSH
9414: LD_INT 105
9416: PUSH
9417: LD_INT 106
9419: PUSH
9420: LD_INT 108
9422: PUSH
9423: LD_INT 116
9425: PUSH
9426: LD_INT 117
9428: PUSH
9429: LD_INT 118
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: ST_TO_ADDR
9446: GO 12229
9448: LD_INT 5
9450: DOUBLE
9451: EQUAL
9452: IFTRUE 9456
9454: GO 9568
9456: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9457: LD_ADDR_VAR 0 1
9461: PUSH
9462: LD_INT 2
9464: PUSH
9465: LD_INT 4
9467: PUSH
9468: LD_INT 5
9470: PUSH
9471: LD_INT 6
9473: PUSH
9474: LD_INT 8
9476: PUSH
9477: LD_INT 11
9479: PUSH
9480: LD_INT 12
9482: PUSH
9483: LD_INT 15
9485: PUSH
9486: LD_INT 16
9488: PUSH
9489: LD_INT 22
9491: PUSH
9492: LD_INT 23
9494: PUSH
9495: LD_INT 25
9497: PUSH
9498: LD_INT 26
9500: PUSH
9501: LD_INT 36
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 101
9522: PUSH
9523: LD_INT 102
9525: PUSH
9526: LD_INT 105
9528: PUSH
9529: LD_INT 106
9531: PUSH
9532: LD_INT 108
9534: PUSH
9535: LD_INT 109
9537: PUSH
9538: LD_INT 112
9540: PUSH
9541: LD_INT 116
9543: PUSH
9544: LD_INT 117
9546: PUSH
9547: LD_INT 118
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: ST_TO_ADDR
9566: GO 12229
9568: LD_INT 6
9570: DOUBLE
9571: EQUAL
9572: IFTRUE 9576
9574: GO 9708
9576: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9577: LD_ADDR_VAR 0 1
9581: PUSH
9582: LD_INT 2
9584: PUSH
9585: LD_INT 4
9587: PUSH
9588: LD_INT 5
9590: PUSH
9591: LD_INT 6
9593: PUSH
9594: LD_INT 8
9596: PUSH
9597: LD_INT 11
9599: PUSH
9600: LD_INT 12
9602: PUSH
9603: LD_INT 15
9605: PUSH
9606: LD_INT 16
9608: PUSH
9609: LD_INT 20
9611: PUSH
9612: LD_INT 21
9614: PUSH
9615: LD_INT 22
9617: PUSH
9618: LD_INT 23
9620: PUSH
9621: LD_INT 25
9623: PUSH
9624: LD_INT 26
9626: PUSH
9627: LD_INT 30
9629: PUSH
9630: LD_INT 31
9632: PUSH
9633: LD_INT 32
9635: PUSH
9636: LD_INT 36
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: LD_INT 101
9662: PUSH
9663: LD_INT 102
9665: PUSH
9666: LD_INT 105
9668: PUSH
9669: LD_INT 106
9671: PUSH
9672: LD_INT 108
9674: PUSH
9675: LD_INT 109
9677: PUSH
9678: LD_INT 112
9680: PUSH
9681: LD_INT 116
9683: PUSH
9684: LD_INT 117
9686: PUSH
9687: LD_INT 118
9689: PUSH
9690: EMPTY
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: EMPTY
9703: LIST
9704: LIST
9705: ST_TO_ADDR
9706: GO 12229
9708: LD_INT 7
9710: DOUBLE
9711: EQUAL
9712: IFTRUE 9716
9714: GO 9828
9716: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9717: LD_ADDR_VAR 0 1
9721: PUSH
9722: LD_INT 2
9724: PUSH
9725: LD_INT 4
9727: PUSH
9728: LD_INT 5
9730: PUSH
9731: LD_INT 7
9733: PUSH
9734: LD_INT 11
9736: PUSH
9737: LD_INT 12
9739: PUSH
9740: LD_INT 15
9742: PUSH
9743: LD_INT 16
9745: PUSH
9746: LD_INT 20
9748: PUSH
9749: LD_INT 21
9751: PUSH
9752: LD_INT 22
9754: PUSH
9755: LD_INT 23
9757: PUSH
9758: LD_INT 25
9760: PUSH
9761: LD_INT 26
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 101
9782: PUSH
9783: LD_INT 102
9785: PUSH
9786: LD_INT 103
9788: PUSH
9789: LD_INT 105
9791: PUSH
9792: LD_INT 106
9794: PUSH
9795: LD_INT 108
9797: PUSH
9798: LD_INT 112
9800: PUSH
9801: LD_INT 116
9803: PUSH
9804: LD_INT 117
9806: PUSH
9807: LD_INT 118
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: ST_TO_ADDR
9826: GO 12229
9828: LD_INT 8
9830: DOUBLE
9831: EQUAL
9832: IFTRUE 9836
9834: GO 9976
9836: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9837: LD_ADDR_VAR 0 1
9841: PUSH
9842: LD_INT 2
9844: PUSH
9845: LD_INT 4
9847: PUSH
9848: LD_INT 5
9850: PUSH
9851: LD_INT 6
9853: PUSH
9854: LD_INT 7
9856: PUSH
9857: LD_INT 8
9859: PUSH
9860: LD_INT 11
9862: PUSH
9863: LD_INT 12
9865: PUSH
9866: LD_INT 15
9868: PUSH
9869: LD_INT 16
9871: PUSH
9872: LD_INT 20
9874: PUSH
9875: LD_INT 21
9877: PUSH
9878: LD_INT 22
9880: PUSH
9881: LD_INT 23
9883: PUSH
9884: LD_INT 25
9886: PUSH
9887: LD_INT 26
9889: PUSH
9890: LD_INT 30
9892: PUSH
9893: LD_INT 31
9895: PUSH
9896: LD_INT 32
9898: PUSH
9899: LD_INT 36
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: LD_INT 101
9926: PUSH
9927: LD_INT 102
9929: PUSH
9930: LD_INT 103
9932: PUSH
9933: LD_INT 105
9935: PUSH
9936: LD_INT 106
9938: PUSH
9939: LD_INT 108
9941: PUSH
9942: LD_INT 109
9944: PUSH
9945: LD_INT 112
9947: PUSH
9948: LD_INT 116
9950: PUSH
9951: LD_INT 117
9953: PUSH
9954: LD_INT 118
9956: PUSH
9957: EMPTY
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: ST_TO_ADDR
9974: GO 12229
9976: LD_INT 9
9978: DOUBLE
9979: EQUAL
9980: IFTRUE 9984
9982: GO 10132
9984: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9985: LD_ADDR_VAR 0 1
9989: PUSH
9990: LD_INT 2
9992: PUSH
9993: LD_INT 4
9995: PUSH
9996: LD_INT 5
9998: PUSH
9999: LD_INT 6
10001: PUSH
10002: LD_INT 7
10004: PUSH
10005: LD_INT 8
10007: PUSH
10008: LD_INT 11
10010: PUSH
10011: LD_INT 12
10013: PUSH
10014: LD_INT 15
10016: PUSH
10017: LD_INT 16
10019: PUSH
10020: LD_INT 20
10022: PUSH
10023: LD_INT 21
10025: PUSH
10026: LD_INT 22
10028: PUSH
10029: LD_INT 23
10031: PUSH
10032: LD_INT 25
10034: PUSH
10035: LD_INT 26
10037: PUSH
10038: LD_INT 28
10040: PUSH
10041: LD_INT 30
10043: PUSH
10044: LD_INT 31
10046: PUSH
10047: LD_INT 32
10049: PUSH
10050: LD_INT 36
10052: PUSH
10053: EMPTY
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 101
10078: PUSH
10079: LD_INT 102
10081: PUSH
10082: LD_INT 103
10084: PUSH
10085: LD_INT 105
10087: PUSH
10088: LD_INT 106
10090: PUSH
10091: LD_INT 108
10093: PUSH
10094: LD_INT 109
10096: PUSH
10097: LD_INT 112
10099: PUSH
10100: LD_INT 114
10102: PUSH
10103: LD_INT 116
10105: PUSH
10106: LD_INT 117
10108: PUSH
10109: LD_INT 118
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: ST_TO_ADDR
10130: GO 12229
10132: LD_INT 10
10134: DOUBLE
10135: EQUAL
10136: IFTRUE 10140
10138: GO 10336
10140: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10141: LD_ADDR_VAR 0 1
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: LD_INT 4
10151: PUSH
10152: LD_INT 5
10154: PUSH
10155: LD_INT 6
10157: PUSH
10158: LD_INT 7
10160: PUSH
10161: LD_INT 8
10163: PUSH
10164: LD_INT 9
10166: PUSH
10167: LD_INT 10
10169: PUSH
10170: LD_INT 11
10172: PUSH
10173: LD_INT 12
10175: PUSH
10176: LD_INT 13
10178: PUSH
10179: LD_INT 14
10181: PUSH
10182: LD_INT 15
10184: PUSH
10185: LD_INT 16
10187: PUSH
10188: LD_INT 17
10190: PUSH
10191: LD_INT 18
10193: PUSH
10194: LD_INT 19
10196: PUSH
10197: LD_INT 20
10199: PUSH
10200: LD_INT 21
10202: PUSH
10203: LD_INT 22
10205: PUSH
10206: LD_INT 23
10208: PUSH
10209: LD_INT 24
10211: PUSH
10212: LD_INT 25
10214: PUSH
10215: LD_INT 26
10217: PUSH
10218: LD_INT 28
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 31
10226: PUSH
10227: LD_INT 32
10229: PUSH
10230: LD_INT 36
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 101
10266: PUSH
10267: LD_INT 102
10269: PUSH
10270: LD_INT 103
10272: PUSH
10273: LD_INT 104
10275: PUSH
10276: LD_INT 105
10278: PUSH
10279: LD_INT 106
10281: PUSH
10282: LD_INT 107
10284: PUSH
10285: LD_INT 108
10287: PUSH
10288: LD_INT 109
10290: PUSH
10291: LD_INT 110
10293: PUSH
10294: LD_INT 111
10296: PUSH
10297: LD_INT 112
10299: PUSH
10300: LD_INT 114
10302: PUSH
10303: LD_INT 116
10305: PUSH
10306: LD_INT 117
10308: PUSH
10309: LD_INT 118
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: ST_TO_ADDR
10334: GO 12229
10336: LD_INT 11
10338: DOUBLE
10339: EQUAL
10340: IFTRUE 10344
10342: GO 10548
10344: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10345: LD_ADDR_VAR 0 1
10349: PUSH
10350: LD_INT 2
10352: PUSH
10353: LD_INT 3
10355: PUSH
10356: LD_INT 4
10358: PUSH
10359: LD_INT 5
10361: PUSH
10362: LD_INT 6
10364: PUSH
10365: LD_INT 7
10367: PUSH
10368: LD_INT 8
10370: PUSH
10371: LD_INT 9
10373: PUSH
10374: LD_INT 10
10376: PUSH
10377: LD_INT 11
10379: PUSH
10380: LD_INT 12
10382: PUSH
10383: LD_INT 13
10385: PUSH
10386: LD_INT 14
10388: PUSH
10389: LD_INT 15
10391: PUSH
10392: LD_INT 16
10394: PUSH
10395: LD_INT 17
10397: PUSH
10398: LD_INT 18
10400: PUSH
10401: LD_INT 19
10403: PUSH
10404: LD_INT 20
10406: PUSH
10407: LD_INT 21
10409: PUSH
10410: LD_INT 22
10412: PUSH
10413: LD_INT 23
10415: PUSH
10416: LD_INT 24
10418: PUSH
10419: LD_INT 25
10421: PUSH
10422: LD_INT 26
10424: PUSH
10425: LD_INT 28
10427: PUSH
10428: LD_INT 30
10430: PUSH
10431: LD_INT 31
10433: PUSH
10434: LD_INT 32
10436: PUSH
10437: LD_INT 34
10439: PUSH
10440: LD_INT 36
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 101
10478: PUSH
10479: LD_INT 102
10481: PUSH
10482: LD_INT 103
10484: PUSH
10485: LD_INT 104
10487: PUSH
10488: LD_INT 105
10490: PUSH
10491: LD_INT 106
10493: PUSH
10494: LD_INT 107
10496: PUSH
10497: LD_INT 108
10499: PUSH
10500: LD_INT 109
10502: PUSH
10503: LD_INT 110
10505: PUSH
10506: LD_INT 111
10508: PUSH
10509: LD_INT 112
10511: PUSH
10512: LD_INT 114
10514: PUSH
10515: LD_INT 116
10517: PUSH
10518: LD_INT 117
10520: PUSH
10521: LD_INT 118
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: LIST
10540: LIST
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: ST_TO_ADDR
10546: GO 12229
10548: LD_INT 12
10550: DOUBLE
10551: EQUAL
10552: IFTRUE 10556
10554: GO 10776
10556: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10557: LD_ADDR_VAR 0 1
10561: PUSH
10562: LD_INT 1
10564: PUSH
10565: LD_INT 2
10567: PUSH
10568: LD_INT 3
10570: PUSH
10571: LD_INT 4
10573: PUSH
10574: LD_INT 5
10576: PUSH
10577: LD_INT 6
10579: PUSH
10580: LD_INT 7
10582: PUSH
10583: LD_INT 8
10585: PUSH
10586: LD_INT 9
10588: PUSH
10589: LD_INT 10
10591: PUSH
10592: LD_INT 11
10594: PUSH
10595: LD_INT 12
10597: PUSH
10598: LD_INT 13
10600: PUSH
10601: LD_INT 14
10603: PUSH
10604: LD_INT 15
10606: PUSH
10607: LD_INT 16
10609: PUSH
10610: LD_INT 17
10612: PUSH
10613: LD_INT 18
10615: PUSH
10616: LD_INT 19
10618: PUSH
10619: LD_INT 20
10621: PUSH
10622: LD_INT 21
10624: PUSH
10625: LD_INT 22
10627: PUSH
10628: LD_INT 23
10630: PUSH
10631: LD_INT 24
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 26
10639: PUSH
10640: LD_INT 27
10642: PUSH
10643: LD_INT 28
10645: PUSH
10646: LD_INT 30
10648: PUSH
10649: LD_INT 31
10651: PUSH
10652: LD_INT 32
10654: PUSH
10655: LD_INT 33
10657: PUSH
10658: LD_INT 34
10660: PUSH
10661: LD_INT 36
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 101
10702: PUSH
10703: LD_INT 102
10705: PUSH
10706: LD_INT 103
10708: PUSH
10709: LD_INT 104
10711: PUSH
10712: LD_INT 105
10714: PUSH
10715: LD_INT 106
10717: PUSH
10718: LD_INT 107
10720: PUSH
10721: LD_INT 108
10723: PUSH
10724: LD_INT 109
10726: PUSH
10727: LD_INT 110
10729: PUSH
10730: LD_INT 111
10732: PUSH
10733: LD_INT 112
10735: PUSH
10736: LD_INT 113
10738: PUSH
10739: LD_INT 114
10741: PUSH
10742: LD_INT 116
10744: PUSH
10745: LD_INT 117
10747: PUSH
10748: LD_INT 118
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: ST_TO_ADDR
10774: GO 12229
10776: LD_INT 13
10778: DOUBLE
10779: EQUAL
10780: IFTRUE 10784
10782: GO 10992
10784: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10785: LD_ADDR_VAR 0 1
10789: PUSH
10790: LD_INT 1
10792: PUSH
10793: LD_INT 2
10795: PUSH
10796: LD_INT 3
10798: PUSH
10799: LD_INT 4
10801: PUSH
10802: LD_INT 5
10804: PUSH
10805: LD_INT 8
10807: PUSH
10808: LD_INT 9
10810: PUSH
10811: LD_INT 10
10813: PUSH
10814: LD_INT 11
10816: PUSH
10817: LD_INT 12
10819: PUSH
10820: LD_INT 14
10822: PUSH
10823: LD_INT 15
10825: PUSH
10826: LD_INT 16
10828: PUSH
10829: LD_INT 17
10831: PUSH
10832: LD_INT 18
10834: PUSH
10835: LD_INT 19
10837: PUSH
10838: LD_INT 20
10840: PUSH
10841: LD_INT 21
10843: PUSH
10844: LD_INT 22
10846: PUSH
10847: LD_INT 23
10849: PUSH
10850: LD_INT 24
10852: PUSH
10853: LD_INT 25
10855: PUSH
10856: LD_INT 26
10858: PUSH
10859: LD_INT 27
10861: PUSH
10862: LD_INT 28
10864: PUSH
10865: LD_INT 30
10867: PUSH
10868: LD_INT 31
10870: PUSH
10871: LD_INT 32
10873: PUSH
10874: LD_INT 33
10876: PUSH
10877: LD_INT 34
10879: PUSH
10880: LD_INT 36
10882: PUSH
10883: EMPTY
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 101
10918: PUSH
10919: LD_INT 102
10921: PUSH
10922: LD_INT 103
10924: PUSH
10925: LD_INT 104
10927: PUSH
10928: LD_INT 105
10930: PUSH
10931: LD_INT 106
10933: PUSH
10934: LD_INT 107
10936: PUSH
10937: LD_INT 108
10939: PUSH
10940: LD_INT 109
10942: PUSH
10943: LD_INT 110
10945: PUSH
10946: LD_INT 111
10948: PUSH
10949: LD_INT 112
10951: PUSH
10952: LD_INT 113
10954: PUSH
10955: LD_INT 114
10957: PUSH
10958: LD_INT 116
10960: PUSH
10961: LD_INT 117
10963: PUSH
10964: LD_INT 118
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: ST_TO_ADDR
10990: GO 12229
10992: LD_INT 14
10994: DOUBLE
10995: EQUAL
10996: IFTRUE 11000
10998: GO 11224
11000: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11001: LD_ADDR_VAR 0 1
11005: PUSH
11006: LD_INT 1
11008: PUSH
11009: LD_INT 2
11011: PUSH
11012: LD_INT 3
11014: PUSH
11015: LD_INT 4
11017: PUSH
11018: LD_INT 5
11020: PUSH
11021: LD_INT 6
11023: PUSH
11024: LD_INT 7
11026: PUSH
11027: LD_INT 8
11029: PUSH
11030: LD_INT 9
11032: PUSH
11033: LD_INT 10
11035: PUSH
11036: LD_INT 11
11038: PUSH
11039: LD_INT 12
11041: PUSH
11042: LD_INT 13
11044: PUSH
11045: LD_INT 14
11047: PUSH
11048: LD_INT 15
11050: PUSH
11051: LD_INT 16
11053: PUSH
11054: LD_INT 17
11056: PUSH
11057: LD_INT 18
11059: PUSH
11060: LD_INT 19
11062: PUSH
11063: LD_INT 20
11065: PUSH
11066: LD_INT 21
11068: PUSH
11069: LD_INT 22
11071: PUSH
11072: LD_INT 23
11074: PUSH
11075: LD_INT 24
11077: PUSH
11078: LD_INT 25
11080: PUSH
11081: LD_INT 26
11083: PUSH
11084: LD_INT 27
11086: PUSH
11087: LD_INT 28
11089: PUSH
11090: LD_INT 29
11092: PUSH
11093: LD_INT 30
11095: PUSH
11096: LD_INT 31
11098: PUSH
11099: LD_INT 32
11101: PUSH
11102: LD_INT 33
11104: PUSH
11105: LD_INT 34
11107: PUSH
11108: LD_INT 36
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: PUSH
11148: LD_INT 101
11150: PUSH
11151: LD_INT 102
11153: PUSH
11154: LD_INT 103
11156: PUSH
11157: LD_INT 104
11159: PUSH
11160: LD_INT 105
11162: PUSH
11163: LD_INT 106
11165: PUSH
11166: LD_INT 107
11168: PUSH
11169: LD_INT 108
11171: PUSH
11172: LD_INT 109
11174: PUSH
11175: LD_INT 110
11177: PUSH
11178: LD_INT 111
11180: PUSH
11181: LD_INT 112
11183: PUSH
11184: LD_INT 113
11186: PUSH
11187: LD_INT 114
11189: PUSH
11190: LD_INT 116
11192: PUSH
11193: LD_INT 117
11195: PUSH
11196: LD_INT 118
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: PUSH
11218: EMPTY
11219: LIST
11220: LIST
11221: ST_TO_ADDR
11222: GO 12229
11224: LD_INT 15
11226: DOUBLE
11227: EQUAL
11228: IFTRUE 11232
11230: GO 11456
11232: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11233: LD_ADDR_VAR 0 1
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: LD_INT 2
11243: PUSH
11244: LD_INT 3
11246: PUSH
11247: LD_INT 4
11249: PUSH
11250: LD_INT 5
11252: PUSH
11253: LD_INT 6
11255: PUSH
11256: LD_INT 7
11258: PUSH
11259: LD_INT 8
11261: PUSH
11262: LD_INT 9
11264: PUSH
11265: LD_INT 10
11267: PUSH
11268: LD_INT 11
11270: PUSH
11271: LD_INT 12
11273: PUSH
11274: LD_INT 13
11276: PUSH
11277: LD_INT 14
11279: PUSH
11280: LD_INT 15
11282: PUSH
11283: LD_INT 16
11285: PUSH
11286: LD_INT 17
11288: PUSH
11289: LD_INT 18
11291: PUSH
11292: LD_INT 19
11294: PUSH
11295: LD_INT 20
11297: PUSH
11298: LD_INT 21
11300: PUSH
11301: LD_INT 22
11303: PUSH
11304: LD_INT 23
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 26
11315: PUSH
11316: LD_INT 27
11318: PUSH
11319: LD_INT 28
11321: PUSH
11322: LD_INT 29
11324: PUSH
11325: LD_INT 30
11327: PUSH
11328: LD_INT 31
11330: PUSH
11331: LD_INT 32
11333: PUSH
11334: LD_INT 33
11336: PUSH
11337: LD_INT 34
11339: PUSH
11340: LD_INT 36
11342: PUSH
11343: EMPTY
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 101
11382: PUSH
11383: LD_INT 102
11385: PUSH
11386: LD_INT 103
11388: PUSH
11389: LD_INT 104
11391: PUSH
11392: LD_INT 105
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 107
11400: PUSH
11401: LD_INT 108
11403: PUSH
11404: LD_INT 109
11406: PUSH
11407: LD_INT 110
11409: PUSH
11410: LD_INT 111
11412: PUSH
11413: LD_INT 112
11415: PUSH
11416: LD_INT 113
11418: PUSH
11419: LD_INT 114
11421: PUSH
11422: LD_INT 116
11424: PUSH
11425: LD_INT 117
11427: PUSH
11428: LD_INT 118
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: ST_TO_ADDR
11454: GO 12229
11456: LD_INT 16
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11600
11464: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11465: LD_ADDR_VAR 0 1
11469: PUSH
11470: LD_INT 2
11472: PUSH
11473: LD_INT 4
11475: PUSH
11476: LD_INT 5
11478: PUSH
11479: LD_INT 7
11481: PUSH
11482: LD_INT 11
11484: PUSH
11485: LD_INT 12
11487: PUSH
11488: LD_INT 15
11490: PUSH
11491: LD_INT 16
11493: PUSH
11494: LD_INT 20
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 23
11505: PUSH
11506: LD_INT 25
11508: PUSH
11509: LD_INT 26
11511: PUSH
11512: LD_INT 30
11514: PUSH
11515: LD_INT 31
11517: PUSH
11518: LD_INT 32
11520: PUSH
11521: LD_INT 33
11523: PUSH
11524: LD_INT 34
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 101
11550: PUSH
11551: LD_INT 102
11553: PUSH
11554: LD_INT 103
11556: PUSH
11557: LD_INT 106
11559: PUSH
11560: LD_INT 108
11562: PUSH
11563: LD_INT 112
11565: PUSH
11566: LD_INT 113
11568: PUSH
11569: LD_INT 114
11571: PUSH
11572: LD_INT 116
11574: PUSH
11575: LD_INT 117
11577: PUSH
11578: LD_INT 118
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: ST_TO_ADDR
11598: GO 12229
11600: LD_INT 17
11602: DOUBLE
11603: EQUAL
11604: IFTRUE 11608
11606: GO 11832
11608: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11609: LD_ADDR_VAR 0 1
11613: PUSH
11614: LD_INT 1
11616: PUSH
11617: LD_INT 2
11619: PUSH
11620: LD_INT 3
11622: PUSH
11623: LD_INT 4
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: LD_INT 6
11631: PUSH
11632: LD_INT 7
11634: PUSH
11635: LD_INT 8
11637: PUSH
11638: LD_INT 9
11640: PUSH
11641: LD_INT 10
11643: PUSH
11644: LD_INT 11
11646: PUSH
11647: LD_INT 12
11649: PUSH
11650: LD_INT 13
11652: PUSH
11653: LD_INT 14
11655: PUSH
11656: LD_INT 15
11658: PUSH
11659: LD_INT 16
11661: PUSH
11662: LD_INT 17
11664: PUSH
11665: LD_INT 18
11667: PUSH
11668: LD_INT 19
11670: PUSH
11671: LD_INT 20
11673: PUSH
11674: LD_INT 21
11676: PUSH
11677: LD_INT 22
11679: PUSH
11680: LD_INT 23
11682: PUSH
11683: LD_INT 24
11685: PUSH
11686: LD_INT 25
11688: PUSH
11689: LD_INT 26
11691: PUSH
11692: LD_INT 27
11694: PUSH
11695: LD_INT 28
11697: PUSH
11698: LD_INT 29
11700: PUSH
11701: LD_INT 30
11703: PUSH
11704: LD_INT 31
11706: PUSH
11707: LD_INT 32
11709: PUSH
11710: LD_INT 33
11712: PUSH
11713: LD_INT 34
11715: PUSH
11716: LD_INT 36
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: LD_INT 101
11758: PUSH
11759: LD_INT 102
11761: PUSH
11762: LD_INT 103
11764: PUSH
11765: LD_INT 104
11767: PUSH
11768: LD_INT 105
11770: PUSH
11771: LD_INT 106
11773: PUSH
11774: LD_INT 107
11776: PUSH
11777: LD_INT 108
11779: PUSH
11780: LD_INT 109
11782: PUSH
11783: LD_INT 110
11785: PUSH
11786: LD_INT 111
11788: PUSH
11789: LD_INT 112
11791: PUSH
11792: LD_INT 113
11794: PUSH
11795: LD_INT 114
11797: PUSH
11798: LD_INT 116
11800: PUSH
11801: LD_INT 117
11803: PUSH
11804: LD_INT 118
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: ST_TO_ADDR
11830: GO 12229
11832: LD_INT 18
11834: DOUBLE
11835: EQUAL
11836: IFTRUE 11840
11838: GO 11988
11840: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11841: LD_ADDR_VAR 0 1
11845: PUSH
11846: LD_INT 2
11848: PUSH
11849: LD_INT 4
11851: PUSH
11852: LD_INT 5
11854: PUSH
11855: LD_INT 7
11857: PUSH
11858: LD_INT 11
11860: PUSH
11861: LD_INT 12
11863: PUSH
11864: LD_INT 15
11866: PUSH
11867: LD_INT 16
11869: PUSH
11870: LD_INT 20
11872: PUSH
11873: LD_INT 21
11875: PUSH
11876: LD_INT 22
11878: PUSH
11879: LD_INT 23
11881: PUSH
11882: LD_INT 25
11884: PUSH
11885: LD_INT 26
11887: PUSH
11888: LD_INT 30
11890: PUSH
11891: LD_INT 31
11893: PUSH
11894: LD_INT 32
11896: PUSH
11897: LD_INT 33
11899: PUSH
11900: LD_INT 34
11902: PUSH
11903: LD_INT 35
11905: PUSH
11906: LD_INT 36
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 101
11934: PUSH
11935: LD_INT 102
11937: PUSH
11938: LD_INT 103
11940: PUSH
11941: LD_INT 106
11943: PUSH
11944: LD_INT 108
11946: PUSH
11947: LD_INT 112
11949: PUSH
11950: LD_INT 113
11952: PUSH
11953: LD_INT 114
11955: PUSH
11956: LD_INT 115
11958: PUSH
11959: LD_INT 116
11961: PUSH
11962: LD_INT 117
11964: PUSH
11965: LD_INT 118
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: ST_TO_ADDR
11986: GO 12229
11988: LD_INT 19
11990: DOUBLE
11991: EQUAL
11992: IFTRUE 11996
11994: GO 12228
11996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11997: LD_ADDR_VAR 0 1
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: LD_INT 4
12013: PUSH
12014: LD_INT 5
12016: PUSH
12017: LD_INT 6
12019: PUSH
12020: LD_INT 7
12022: PUSH
12023: LD_INT 8
12025: PUSH
12026: LD_INT 9
12028: PUSH
12029: LD_INT 10
12031: PUSH
12032: LD_INT 11
12034: PUSH
12035: LD_INT 12
12037: PUSH
12038: LD_INT 13
12040: PUSH
12041: LD_INT 14
12043: PUSH
12044: LD_INT 15
12046: PUSH
12047: LD_INT 16
12049: PUSH
12050: LD_INT 17
12052: PUSH
12053: LD_INT 18
12055: PUSH
12056: LD_INT 19
12058: PUSH
12059: LD_INT 20
12061: PUSH
12062: LD_INT 21
12064: PUSH
12065: LD_INT 22
12067: PUSH
12068: LD_INT 23
12070: PUSH
12071: LD_INT 24
12073: PUSH
12074: LD_INT 25
12076: PUSH
12077: LD_INT 26
12079: PUSH
12080: LD_INT 27
12082: PUSH
12083: LD_INT 28
12085: PUSH
12086: LD_INT 29
12088: PUSH
12089: LD_INT 30
12091: PUSH
12092: LD_INT 31
12094: PUSH
12095: LD_INT 32
12097: PUSH
12098: LD_INT 33
12100: PUSH
12101: LD_INT 34
12103: PUSH
12104: LD_INT 35
12106: PUSH
12107: LD_INT 36
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 101
12150: PUSH
12151: LD_INT 102
12153: PUSH
12154: LD_INT 103
12156: PUSH
12157: LD_INT 104
12159: PUSH
12160: LD_INT 105
12162: PUSH
12163: LD_INT 106
12165: PUSH
12166: LD_INT 107
12168: PUSH
12169: LD_INT 108
12171: PUSH
12172: LD_INT 109
12174: PUSH
12175: LD_INT 110
12177: PUSH
12178: LD_INT 111
12180: PUSH
12181: LD_INT 112
12183: PUSH
12184: LD_INT 113
12186: PUSH
12187: LD_INT 114
12189: PUSH
12190: LD_INT 115
12192: PUSH
12193: LD_INT 116
12195: PUSH
12196: LD_INT 117
12198: PUSH
12199: LD_INT 118
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: ST_TO_ADDR
12226: GO 12229
12228: POP
// end else
12229: GO 12460
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: LD_INT 2
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: LD_INT 4
12247: PUSH
12248: LD_INT 5
12250: PUSH
12251: LD_INT 6
12253: PUSH
12254: LD_INT 7
12256: PUSH
12257: LD_INT 8
12259: PUSH
12260: LD_INT 9
12262: PUSH
12263: LD_INT 10
12265: PUSH
12266: LD_INT 11
12268: PUSH
12269: LD_INT 12
12271: PUSH
12272: LD_INT 13
12274: PUSH
12275: LD_INT 14
12277: PUSH
12278: LD_INT 15
12280: PUSH
12281: LD_INT 16
12283: PUSH
12284: LD_INT 17
12286: PUSH
12287: LD_INT 18
12289: PUSH
12290: LD_INT 19
12292: PUSH
12293: LD_INT 20
12295: PUSH
12296: LD_INT 21
12298: PUSH
12299: LD_INT 22
12301: PUSH
12302: LD_INT 23
12304: PUSH
12305: LD_INT 24
12307: PUSH
12308: LD_INT 25
12310: PUSH
12311: LD_INT 26
12313: PUSH
12314: LD_INT 27
12316: PUSH
12317: LD_INT 28
12319: PUSH
12320: LD_INT 29
12322: PUSH
12323: LD_INT 30
12325: PUSH
12326: LD_INT 31
12328: PUSH
12329: LD_INT 32
12331: PUSH
12332: LD_INT 33
12334: PUSH
12335: LD_INT 34
12337: PUSH
12338: LD_INT 35
12340: PUSH
12341: LD_INT 36
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 101
12384: PUSH
12385: LD_INT 102
12387: PUSH
12388: LD_INT 103
12390: PUSH
12391: LD_INT 104
12393: PUSH
12394: LD_INT 105
12396: PUSH
12397: LD_INT 106
12399: PUSH
12400: LD_INT 107
12402: PUSH
12403: LD_INT 108
12405: PUSH
12406: LD_INT 109
12408: PUSH
12409: LD_INT 110
12411: PUSH
12412: LD_INT 111
12414: PUSH
12415: LD_INT 112
12417: PUSH
12418: LD_INT 113
12420: PUSH
12421: LD_INT 114
12423: PUSH
12424: LD_INT 115
12426: PUSH
12427: LD_INT 116
12429: PUSH
12430: LD_INT 117
12432: PUSH
12433: LD_INT 118
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: ST_TO_ADDR
// if result then
12460: LD_VAR 0 1
12464: IFFALSE 12753
// begin normal :=  ;
12466: LD_ADDR_VAR 0 3
12470: PUSH
12471: LD_STRING 
12473: ST_TO_ADDR
// hardcore :=  ;
12474: LD_ADDR_VAR 0 4
12478: PUSH
12479: LD_STRING 
12481: ST_TO_ADDR
// for i = 1 to normalCounter do
12482: LD_ADDR_VAR 0 5
12486: PUSH
12487: DOUBLE
12488: LD_INT 1
12490: DEC
12491: ST_TO_ADDR
12492: LD_EXP 44
12496: PUSH
12497: FOR_TO
12498: IFFALSE 12599
// begin tmp := 0 ;
12500: LD_ADDR_VAR 0 2
12504: PUSH
12505: LD_STRING 0
12507: ST_TO_ADDR
// if result [ 1 ] then
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: ARRAY
12516: IFFALSE 12581
// if result [ 1 ] [ 1 ] = i then
12518: LD_VAR 0 1
12522: PUSH
12523: LD_INT 1
12525: ARRAY
12526: PUSH
12527: LD_INT 1
12529: ARRAY
12530: PUSH
12531: LD_VAR 0 5
12535: EQUAL
12536: IFFALSE 12581
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12538: LD_ADDR_VAR 0 1
12542: PUSH
12543: LD_VAR 0 1
12547: PPUSH
12548: LD_INT 1
12550: PPUSH
12551: LD_VAR 0 1
12555: PUSH
12556: LD_INT 1
12558: ARRAY
12559: PPUSH
12560: LD_INT 1
12562: PPUSH
12563: CALL_OW 3
12567: PPUSH
12568: CALL_OW 1
12572: ST_TO_ADDR
// tmp := 1 ;
12573: LD_ADDR_VAR 0 2
12577: PUSH
12578: LD_STRING 1
12580: ST_TO_ADDR
// end ; normal := normal & tmp ;
12581: LD_ADDR_VAR 0 3
12585: PUSH
12586: LD_VAR 0 3
12590: PUSH
12591: LD_VAR 0 2
12595: STR
12596: ST_TO_ADDR
// end ;
12597: GO 12497
12599: POP
12600: POP
// for i = 1 to hardcoreCounter do
12601: LD_ADDR_VAR 0 5
12605: PUSH
12606: DOUBLE
12607: LD_INT 1
12609: DEC
12610: ST_TO_ADDR
12611: LD_EXP 45
12615: PUSH
12616: FOR_TO
12617: IFFALSE 12722
// begin tmp := 0 ;
12619: LD_ADDR_VAR 0 2
12623: PUSH
12624: LD_STRING 0
12626: ST_TO_ADDR
// if result [ 2 ] then
12627: LD_VAR 0 1
12631: PUSH
12632: LD_INT 2
12634: ARRAY
12635: IFFALSE 12704
// if result [ 2 ] [ 1 ] = 100 + i then
12637: LD_VAR 0 1
12641: PUSH
12642: LD_INT 2
12644: ARRAY
12645: PUSH
12646: LD_INT 1
12648: ARRAY
12649: PUSH
12650: LD_INT 100
12652: PUSH
12653: LD_VAR 0 5
12657: PLUS
12658: EQUAL
12659: IFFALSE 12704
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12661: LD_ADDR_VAR 0 1
12665: PUSH
12666: LD_VAR 0 1
12670: PPUSH
12671: LD_INT 2
12673: PPUSH
12674: LD_VAR 0 1
12678: PUSH
12679: LD_INT 2
12681: ARRAY
12682: PPUSH
12683: LD_INT 1
12685: PPUSH
12686: CALL_OW 3
12690: PPUSH
12691: CALL_OW 1
12695: ST_TO_ADDR
// tmp := 1 ;
12696: LD_ADDR_VAR 0 2
12700: PUSH
12701: LD_STRING 1
12703: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12704: LD_ADDR_VAR 0 4
12708: PUSH
12709: LD_VAR 0 4
12713: PUSH
12714: LD_VAR 0 2
12718: STR
12719: ST_TO_ADDR
// end ;
12720: GO 12616
12722: POP
12723: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12724: LD_STRING getStreamItemsFromMission("
12726: PUSH
12727: LD_VAR 0 3
12731: STR
12732: PUSH
12733: LD_STRING ","
12735: STR
12736: PUSH
12737: LD_VAR 0 4
12741: STR
12742: PUSH
12743: LD_STRING ")
12745: STR
12746: PPUSH
12747: CALL_OW 559
// end else
12751: GO 12760
// ToLua ( getStreamItemsFromMission("","") ) ;
12753: LD_STRING getStreamItemsFromMission("","")
12755: PPUSH
12756: CALL_OW 559
// end ;
12760: LD_VAR 0 1
12764: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12765: LD_EXP 43
12769: PUSH
12770: LD_EXP 48
12774: AND
12775: IFFALSE 12899
12777: GO 12779
12779: DISABLE
12780: LD_INT 0
12782: PPUSH
12783: PPUSH
// begin enable ;
12784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12785: LD_ADDR_VAR 0 2
12789: PUSH
12790: LD_INT 22
12792: PUSH
12793: LD_OWVAR 2
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: LD_INT 34
12807: PUSH
12808: LD_INT 7
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 34
12817: PUSH
12818: LD_INT 45
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: LD_INT 34
12827: PUSH
12828: LD_INT 28
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: LD_INT 34
12837: PUSH
12838: LD_INT 47
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PPUSH
12856: CALL_OW 69
12860: ST_TO_ADDR
// if not tmp then
12861: LD_VAR 0 2
12865: NOT
12866: IFFALSE 12870
// exit ;
12868: GO 12899
// for i in tmp do
12870: LD_ADDR_VAR 0 1
12874: PUSH
12875: LD_VAR 0 2
12879: PUSH
12880: FOR_IN
12881: IFFALSE 12897
// begin SetLives ( i , 0 ) ;
12883: LD_VAR 0 1
12887: PPUSH
12888: LD_INT 0
12890: PPUSH
12891: CALL_OW 234
// end ;
12895: GO 12880
12897: POP
12898: POP
// end ;
12899: PPOPN 2
12901: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12902: LD_EXP 43
12906: PUSH
12907: LD_EXP 49
12911: AND
12912: IFFALSE 12996
12914: GO 12916
12916: DISABLE
12917: LD_INT 0
12919: PPUSH
12920: PPUSH
// begin enable ;
12921: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12922: LD_ADDR_VAR 0 2
12926: PUSH
12927: LD_INT 22
12929: PUSH
12930: LD_OWVAR 2
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: LD_INT 32
12941: PUSH
12942: LD_INT 3
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: PPUSH
12953: CALL_OW 69
12957: ST_TO_ADDR
// if not tmp then
12958: LD_VAR 0 2
12962: NOT
12963: IFFALSE 12967
// exit ;
12965: GO 12996
// for i in tmp do
12967: LD_ADDR_VAR 0 1
12971: PUSH
12972: LD_VAR 0 2
12976: PUSH
12977: FOR_IN
12978: IFFALSE 12994
// begin SetLives ( i , 0 ) ;
12980: LD_VAR 0 1
12984: PPUSH
12985: LD_INT 0
12987: PPUSH
12988: CALL_OW 234
// end ;
12992: GO 12977
12994: POP
12995: POP
// end ;
12996: PPOPN 2
12998: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12999: LD_EXP 43
13003: PUSH
13004: LD_EXP 46
13008: AND
13009: IFFALSE 13102
13011: GO 13013
13013: DISABLE
13014: LD_INT 0
13016: PPUSH
// begin enable ;
13017: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13018: LD_ADDR_VAR 0 1
13022: PUSH
13023: LD_INT 22
13025: PUSH
13026: LD_OWVAR 2
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 2
13037: PUSH
13038: LD_INT 25
13040: PUSH
13041: LD_INT 5
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: PUSH
13048: LD_INT 25
13050: PUSH
13051: LD_INT 9
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: PUSH
13058: LD_INT 25
13060: PUSH
13061: LD_INT 8
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: PUSH
13068: EMPTY
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PPUSH
13078: CALL_OW 69
13082: PUSH
13083: FOR_IN
13084: IFFALSE 13100
// begin SetClass ( i , 1 ) ;
13086: LD_VAR 0 1
13090: PPUSH
13091: LD_INT 1
13093: PPUSH
13094: CALL_OW 336
// end ;
13098: GO 13083
13100: POP
13101: POP
// end ;
13102: PPOPN 1
13104: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13105: LD_EXP 43
13109: PUSH
13110: LD_EXP 47
13114: AND
13115: PUSH
13116: LD_OWVAR 65
13120: PUSH
13121: LD_INT 7
13123: LESS
13124: AND
13125: IFFALSE 13139
13127: GO 13129
13129: DISABLE
// begin enable ;
13130: ENABLE
// game_speed := 7 ;
13131: LD_ADDR_OWVAR 65
13135: PUSH
13136: LD_INT 7
13138: ST_TO_ADDR
// end ;
13139: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13140: LD_EXP 43
13144: PUSH
13145: LD_EXP 50
13149: AND
13150: IFFALSE 13352
13152: GO 13154
13154: DISABLE
13155: LD_INT 0
13157: PPUSH
13158: PPUSH
13159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_INT 81
13167: PUSH
13168: LD_OWVAR 2
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 21
13179: PUSH
13180: LD_INT 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PPUSH
13191: CALL_OW 69
13195: ST_TO_ADDR
// if not tmp then
13196: LD_VAR 0 3
13200: NOT
13201: IFFALSE 13205
// exit ;
13203: GO 13352
// if tmp > 5 then
13205: LD_VAR 0 3
13209: PUSH
13210: LD_INT 5
13212: GREATER
13213: IFFALSE 13225
// k := 5 else
13215: LD_ADDR_VAR 0 2
13219: PUSH
13220: LD_INT 5
13222: ST_TO_ADDR
13223: GO 13235
// k := tmp ;
13225: LD_ADDR_VAR 0 2
13229: PUSH
13230: LD_VAR 0 3
13234: ST_TO_ADDR
// for i := 1 to k do
13235: LD_ADDR_VAR 0 1
13239: PUSH
13240: DOUBLE
13241: LD_INT 1
13243: DEC
13244: ST_TO_ADDR
13245: LD_VAR 0 2
13249: PUSH
13250: FOR_TO
13251: IFFALSE 13350
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13253: LD_VAR 0 3
13257: PUSH
13258: LD_VAR 0 1
13262: ARRAY
13263: PPUSH
13264: LD_VAR 0 1
13268: PUSH
13269: LD_INT 4
13271: MOD
13272: PUSH
13273: LD_INT 1
13275: PLUS
13276: PPUSH
13277: CALL_OW 259
13281: PUSH
13282: LD_INT 10
13284: LESS
13285: IFFALSE 13348
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13287: LD_VAR 0 3
13291: PUSH
13292: LD_VAR 0 1
13296: ARRAY
13297: PPUSH
13298: LD_VAR 0 1
13302: PUSH
13303: LD_INT 4
13305: MOD
13306: PUSH
13307: LD_INT 1
13309: PLUS
13310: PPUSH
13311: LD_VAR 0 3
13315: PUSH
13316: LD_VAR 0 1
13320: ARRAY
13321: PPUSH
13322: LD_VAR 0 1
13326: PUSH
13327: LD_INT 4
13329: MOD
13330: PUSH
13331: LD_INT 1
13333: PLUS
13334: PPUSH
13335: CALL_OW 259
13339: PUSH
13340: LD_INT 1
13342: PLUS
13343: PPUSH
13344: CALL_OW 237
13348: GO 13250
13350: POP
13351: POP
// end ;
13352: PPOPN 3
13354: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13355: LD_EXP 43
13359: PUSH
13360: LD_EXP 51
13364: AND
13365: IFFALSE 13385
13367: GO 13369
13369: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13370: LD_INT 4
13372: PPUSH
13373: LD_OWVAR 2
13377: PPUSH
13378: LD_INT 0
13380: PPUSH
13381: CALL_OW 324
13385: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13386: LD_EXP 43
13390: PUSH
13391: LD_EXP 80
13395: AND
13396: IFFALSE 13416
13398: GO 13400
13400: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13401: LD_INT 19
13403: PPUSH
13404: LD_OWVAR 2
13408: PPUSH
13409: LD_INT 0
13411: PPUSH
13412: CALL_OW 324
13416: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13417: LD_EXP 43
13421: PUSH
13422: LD_EXP 52
13426: AND
13427: IFFALSE 13529
13429: GO 13431
13431: DISABLE
13432: LD_INT 0
13434: PPUSH
13435: PPUSH
// begin enable ;
13436: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13437: LD_ADDR_VAR 0 2
13441: PUSH
13442: LD_INT 22
13444: PUSH
13445: LD_OWVAR 2
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 2
13456: PUSH
13457: LD_INT 34
13459: PUSH
13460: LD_INT 11
13462: PUSH
13463: EMPTY
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 34
13469: PUSH
13470: LD_INT 30
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PPUSH
13486: CALL_OW 69
13490: ST_TO_ADDR
// if not tmp then
13491: LD_VAR 0 2
13495: NOT
13496: IFFALSE 13500
// exit ;
13498: GO 13529
// for i in tmp do
13500: LD_ADDR_VAR 0 1
13504: PUSH
13505: LD_VAR 0 2
13509: PUSH
13510: FOR_IN
13511: IFFALSE 13527
// begin SetLives ( i , 0 ) ;
13513: LD_VAR 0 1
13517: PPUSH
13518: LD_INT 0
13520: PPUSH
13521: CALL_OW 234
// end ;
13525: GO 13510
13527: POP
13528: POP
// end ;
13529: PPOPN 2
13531: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13532: LD_EXP 43
13536: PUSH
13537: LD_EXP 53
13541: AND
13542: IFFALSE 13562
13544: GO 13546
13546: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13547: LD_INT 32
13549: PPUSH
13550: LD_OWVAR 2
13554: PPUSH
13555: LD_INT 0
13557: PPUSH
13558: CALL_OW 324
13562: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13563: LD_EXP 43
13567: PUSH
13568: LD_EXP 54
13572: AND
13573: IFFALSE 13754
13575: GO 13577
13577: DISABLE
13578: LD_INT 0
13580: PPUSH
13581: PPUSH
13582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13583: LD_ADDR_VAR 0 2
13587: PUSH
13588: LD_INT 22
13590: PUSH
13591: LD_OWVAR 2
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: LD_INT 33
13602: PUSH
13603: LD_INT 3
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PPUSH
13614: CALL_OW 69
13618: ST_TO_ADDR
// if not tmp then
13619: LD_VAR 0 2
13623: NOT
13624: IFFALSE 13628
// exit ;
13626: GO 13754
// side := 0 ;
13628: LD_ADDR_VAR 0 3
13632: PUSH
13633: LD_INT 0
13635: ST_TO_ADDR
// for i := 1 to 8 do
13636: LD_ADDR_VAR 0 1
13640: PUSH
13641: DOUBLE
13642: LD_INT 1
13644: DEC
13645: ST_TO_ADDR
13646: LD_INT 8
13648: PUSH
13649: FOR_TO
13650: IFFALSE 13698
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13652: LD_OWVAR 2
13656: PUSH
13657: LD_VAR 0 1
13661: NONEQUAL
13662: PUSH
13663: LD_OWVAR 2
13667: PPUSH
13668: LD_VAR 0 1
13672: PPUSH
13673: CALL_OW 81
13677: PUSH
13678: LD_INT 2
13680: EQUAL
13681: AND
13682: IFFALSE 13696
// begin side := i ;
13684: LD_ADDR_VAR 0 3
13688: PUSH
13689: LD_VAR 0 1
13693: ST_TO_ADDR
// break ;
13694: GO 13698
// end ;
13696: GO 13649
13698: POP
13699: POP
// if not side then
13700: LD_VAR 0 3
13704: NOT
13705: IFFALSE 13709
// exit ;
13707: GO 13754
// for i := 1 to tmp do
13709: LD_ADDR_VAR 0 1
13713: PUSH
13714: DOUBLE
13715: LD_INT 1
13717: DEC
13718: ST_TO_ADDR
13719: LD_VAR 0 2
13723: PUSH
13724: FOR_TO
13725: IFFALSE 13752
// if Prob ( 60 ) then
13727: LD_INT 60
13729: PPUSH
13730: CALL_OW 13
13734: IFFALSE 13750
// SetSide ( i , side ) ;
13736: LD_VAR 0 1
13740: PPUSH
13741: LD_VAR 0 3
13745: PPUSH
13746: CALL_OW 235
13750: GO 13724
13752: POP
13753: POP
// end ;
13754: PPOPN 3
13756: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13757: LD_EXP 43
13761: PUSH
13762: LD_EXP 56
13766: AND
13767: IFFALSE 13886
13769: GO 13771
13771: DISABLE
13772: LD_INT 0
13774: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13775: LD_ADDR_VAR 0 1
13779: PUSH
13780: LD_INT 22
13782: PUSH
13783: LD_OWVAR 2
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 21
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 3
13804: PUSH
13805: LD_INT 23
13807: PUSH
13808: LD_INT 0
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: EMPTY
13820: LIST
13821: LIST
13822: LIST
13823: PPUSH
13824: CALL_OW 69
13828: PUSH
13829: FOR_IN
13830: IFFALSE 13884
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13832: LD_VAR 0 1
13836: PPUSH
13837: CALL_OW 257
13841: PUSH
13842: LD_INT 1
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: LD_INT 3
13850: PUSH
13851: LD_INT 4
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: IN
13860: IFFALSE 13882
// SetClass ( un , rand ( 1 , 4 ) ) ;
13862: LD_VAR 0 1
13866: PPUSH
13867: LD_INT 1
13869: PPUSH
13870: LD_INT 4
13872: PPUSH
13873: CALL_OW 12
13877: PPUSH
13878: CALL_OW 336
13882: GO 13829
13884: POP
13885: POP
// end ;
13886: PPOPN 1
13888: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13889: LD_EXP 43
13893: PUSH
13894: LD_EXP 55
13898: AND
13899: IFFALSE 13978
13901: GO 13903
13903: DISABLE
13904: LD_INT 0
13906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13907: LD_ADDR_VAR 0 1
13911: PUSH
13912: LD_INT 22
13914: PUSH
13915: LD_OWVAR 2
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 21
13926: PUSH
13927: LD_INT 3
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: ST_TO_ADDR
// if not tmp then
13943: LD_VAR 0 1
13947: NOT
13948: IFFALSE 13952
// exit ;
13950: GO 13978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13952: LD_VAR 0 1
13956: PUSH
13957: LD_INT 1
13959: PPUSH
13960: LD_VAR 0 1
13964: PPUSH
13965: CALL_OW 12
13969: ARRAY
13970: PPUSH
13971: LD_INT 100
13973: PPUSH
13974: CALL_OW 234
// end ;
13978: PPOPN 1
13980: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13981: LD_EXP 43
13985: PUSH
13986: LD_EXP 57
13990: AND
13991: IFFALSE 14089
13993: GO 13995
13995: DISABLE
13996: LD_INT 0
13998: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13999: LD_ADDR_VAR 0 1
14003: PUSH
14004: LD_INT 22
14006: PUSH
14007: LD_OWVAR 2
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 21
14018: PUSH
14019: LD_INT 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: EMPTY
14027: LIST
14028: LIST
14029: PPUSH
14030: CALL_OW 69
14034: ST_TO_ADDR
// if not tmp then
14035: LD_VAR 0 1
14039: NOT
14040: IFFALSE 14044
// exit ;
14042: GO 14089
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14044: LD_VAR 0 1
14048: PUSH
14049: LD_INT 1
14051: PPUSH
14052: LD_VAR 0 1
14056: PPUSH
14057: CALL_OW 12
14061: ARRAY
14062: PPUSH
14063: LD_INT 1
14065: PPUSH
14066: LD_INT 4
14068: PPUSH
14069: CALL_OW 12
14073: PPUSH
14074: LD_INT 3000
14076: PPUSH
14077: LD_INT 9000
14079: PPUSH
14080: CALL_OW 12
14084: PPUSH
14085: CALL_OW 492
// end ;
14089: PPOPN 1
14091: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14092: LD_EXP 43
14096: PUSH
14097: LD_EXP 58
14101: AND
14102: IFFALSE 14122
14104: GO 14106
14106: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14107: LD_INT 1
14109: PPUSH
14110: LD_OWVAR 2
14114: PPUSH
14115: LD_INT 0
14117: PPUSH
14118: CALL_OW 324
14122: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14123: LD_EXP 43
14127: PUSH
14128: LD_EXP 59
14132: AND
14133: IFFALSE 14216
14135: GO 14137
14137: DISABLE
14138: LD_INT 0
14140: PPUSH
14141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14142: LD_ADDR_VAR 0 2
14146: PUSH
14147: LD_INT 22
14149: PUSH
14150: LD_OWVAR 2
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 21
14161: PUSH
14162: LD_INT 3
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: PPUSH
14173: CALL_OW 69
14177: ST_TO_ADDR
// if not tmp then
14178: LD_VAR 0 2
14182: NOT
14183: IFFALSE 14187
// exit ;
14185: GO 14216
// for i in tmp do
14187: LD_ADDR_VAR 0 1
14191: PUSH
14192: LD_VAR 0 2
14196: PUSH
14197: FOR_IN
14198: IFFALSE 14214
// SetBLevel ( i , 10 ) ;
14200: LD_VAR 0 1
14204: PPUSH
14205: LD_INT 10
14207: PPUSH
14208: CALL_OW 241
14212: GO 14197
14214: POP
14215: POP
// end ;
14216: PPOPN 2
14218: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14219: LD_EXP 43
14223: PUSH
14224: LD_EXP 60
14228: AND
14229: IFFALSE 14340
14231: GO 14233
14233: DISABLE
14234: LD_INT 0
14236: PPUSH
14237: PPUSH
14238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14239: LD_ADDR_VAR 0 3
14243: PUSH
14244: LD_INT 22
14246: PUSH
14247: LD_OWVAR 2
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 25
14258: PUSH
14259: LD_INT 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PPUSH
14270: CALL_OW 69
14274: ST_TO_ADDR
// if not tmp then
14275: LD_VAR 0 3
14279: NOT
14280: IFFALSE 14284
// exit ;
14282: GO 14340
// un := tmp [ rand ( 1 , tmp ) ] ;
14284: LD_ADDR_VAR 0 2
14288: PUSH
14289: LD_VAR 0 3
14293: PUSH
14294: LD_INT 1
14296: PPUSH
14297: LD_VAR 0 3
14301: PPUSH
14302: CALL_OW 12
14306: ARRAY
14307: ST_TO_ADDR
// if Crawls ( un ) then
14308: LD_VAR 0 2
14312: PPUSH
14313: CALL_OW 318
14317: IFFALSE 14328
// ComWalk ( un ) ;
14319: LD_VAR 0 2
14323: PPUSH
14324: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14328: LD_VAR 0 2
14332: PPUSH
14333: LD_INT 5
14335: PPUSH
14336: CALL_OW 336
// end ;
14340: PPOPN 3
14342: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14343: LD_EXP 43
14347: PUSH
14348: LD_EXP 61
14352: AND
14353: PUSH
14354: LD_OWVAR 67
14358: PUSH
14359: LD_INT 4
14361: LESS
14362: AND
14363: IFFALSE 14382
14365: GO 14367
14367: DISABLE
// begin Difficulty := Difficulty + 1 ;
14368: LD_ADDR_OWVAR 67
14372: PUSH
14373: LD_OWVAR 67
14377: PUSH
14378: LD_INT 1
14380: PLUS
14381: ST_TO_ADDR
// end ;
14382: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14383: LD_EXP 43
14387: PUSH
14388: LD_EXP 62
14392: AND
14393: IFFALSE 14496
14395: GO 14397
14397: DISABLE
14398: LD_INT 0
14400: PPUSH
// begin for i := 1 to 5 do
14401: LD_ADDR_VAR 0 1
14405: PUSH
14406: DOUBLE
14407: LD_INT 1
14409: DEC
14410: ST_TO_ADDR
14411: LD_INT 5
14413: PUSH
14414: FOR_TO
14415: IFFALSE 14494
// begin uc_nation := nation_nature ;
14417: LD_ADDR_OWVAR 21
14421: PUSH
14422: LD_INT 0
14424: ST_TO_ADDR
// uc_side := 0 ;
14425: LD_ADDR_OWVAR 20
14429: PUSH
14430: LD_INT 0
14432: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14433: LD_ADDR_OWVAR 29
14437: PUSH
14438: LD_INT 12
14440: PUSH
14441: LD_INT 12
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: ST_TO_ADDR
// hc_agressivity := 20 ;
14448: LD_ADDR_OWVAR 35
14452: PUSH
14453: LD_INT 20
14455: ST_TO_ADDR
// hc_class := class_tiger ;
14456: LD_ADDR_OWVAR 28
14460: PUSH
14461: LD_INT 14
14463: ST_TO_ADDR
// hc_gallery :=  ;
14464: LD_ADDR_OWVAR 33
14468: PUSH
14469: LD_STRING 
14471: ST_TO_ADDR
// hc_name :=  ;
14472: LD_ADDR_OWVAR 26
14476: PUSH
14477: LD_STRING 
14479: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14480: CALL_OW 44
14484: PPUSH
14485: LD_INT 0
14487: PPUSH
14488: CALL_OW 51
// end ;
14492: GO 14414
14494: POP
14495: POP
// end ;
14496: PPOPN 1
14498: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14499: LD_EXP 43
14503: PUSH
14504: LD_EXP 63
14508: AND
14509: IFFALSE 14518
14511: GO 14513
14513: DISABLE
// StreamSibBomb ;
14514: CALL 14519 0 0
14518: END
// export function StreamSibBomb ; var i , x , y ; begin
14519: LD_INT 0
14521: PPUSH
14522: PPUSH
14523: PPUSH
14524: PPUSH
// result := false ;
14525: LD_ADDR_VAR 0 1
14529: PUSH
14530: LD_INT 0
14532: ST_TO_ADDR
// for i := 1 to 16 do
14533: LD_ADDR_VAR 0 2
14537: PUSH
14538: DOUBLE
14539: LD_INT 1
14541: DEC
14542: ST_TO_ADDR
14543: LD_INT 16
14545: PUSH
14546: FOR_TO
14547: IFFALSE 14746
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14549: LD_ADDR_VAR 0 3
14553: PUSH
14554: LD_INT 10
14556: PUSH
14557: LD_INT 20
14559: PUSH
14560: LD_INT 30
14562: PUSH
14563: LD_INT 40
14565: PUSH
14566: LD_INT 50
14568: PUSH
14569: LD_INT 60
14571: PUSH
14572: LD_INT 70
14574: PUSH
14575: LD_INT 80
14577: PUSH
14578: LD_INT 90
14580: PUSH
14581: LD_INT 100
14583: PUSH
14584: LD_INT 110
14586: PUSH
14587: LD_INT 120
14589: PUSH
14590: LD_INT 130
14592: PUSH
14593: LD_INT 140
14595: PUSH
14596: LD_INT 150
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 1
14618: PPUSH
14619: LD_INT 15
14621: PPUSH
14622: CALL_OW 12
14626: ARRAY
14627: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14628: LD_ADDR_VAR 0 4
14632: PUSH
14633: LD_INT 10
14635: PUSH
14636: LD_INT 20
14638: PUSH
14639: LD_INT 30
14641: PUSH
14642: LD_INT 40
14644: PUSH
14645: LD_INT 50
14647: PUSH
14648: LD_INT 60
14650: PUSH
14651: LD_INT 70
14653: PUSH
14654: LD_INT 80
14656: PUSH
14657: LD_INT 90
14659: PUSH
14660: LD_INT 100
14662: PUSH
14663: LD_INT 110
14665: PUSH
14666: LD_INT 120
14668: PUSH
14669: LD_INT 130
14671: PUSH
14672: LD_INT 140
14674: PUSH
14675: LD_INT 150
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 1
14697: PPUSH
14698: LD_INT 15
14700: PPUSH
14701: CALL_OW 12
14705: ARRAY
14706: ST_TO_ADDR
// if ValidHex ( x , y ) then
14707: LD_VAR 0 3
14711: PPUSH
14712: LD_VAR 0 4
14716: PPUSH
14717: CALL_OW 488
14721: IFFALSE 14744
// begin result := [ x , y ] ;
14723: LD_ADDR_VAR 0 1
14727: PUSH
14728: LD_VAR 0 3
14732: PUSH
14733: LD_VAR 0 4
14737: PUSH
14738: EMPTY
14739: LIST
14740: LIST
14741: ST_TO_ADDR
// break ;
14742: GO 14746
// end ; end ;
14744: GO 14546
14746: POP
14747: POP
// if result then
14748: LD_VAR 0 1
14752: IFFALSE 14812
// begin ToLua ( playSibBomb() ) ;
14754: LD_STRING playSibBomb()
14756: PPUSH
14757: CALL_OW 559
// wait ( 0 0$14 ) ;
14761: LD_INT 490
14763: PPUSH
14764: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14768: LD_VAR 0 1
14772: PUSH
14773: LD_INT 1
14775: ARRAY
14776: PPUSH
14777: LD_VAR 0 1
14781: PUSH
14782: LD_INT 2
14784: ARRAY
14785: PPUSH
14786: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14790: LD_VAR 0 1
14794: PUSH
14795: LD_INT 1
14797: ARRAY
14798: PPUSH
14799: LD_VAR 0 1
14803: PUSH
14804: LD_INT 2
14806: ARRAY
14807: PPUSH
14808: CALL_OW 429
// end ; end ;
14812: LD_VAR 0 1
14816: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14817: LD_EXP 43
14821: PUSH
14822: LD_EXP 65
14826: AND
14827: IFFALSE 14839
14829: GO 14831
14831: DISABLE
// YouLost (  ) ;
14832: LD_STRING 
14834: PPUSH
14835: CALL_OW 104
14839: END
// every 0 0$1 trigger StreamModeActive and sFog do
14840: LD_EXP 43
14844: PUSH
14845: LD_EXP 64
14849: AND
14850: IFFALSE 14864
14852: GO 14854
14854: DISABLE
// FogOff ( your_side ) ;
14855: LD_OWVAR 2
14859: PPUSH
14860: CALL_OW 344
14864: END
// every 0 0$1 trigger StreamModeActive and sSun do
14865: LD_EXP 43
14869: PUSH
14870: LD_EXP 66
14874: AND
14875: IFFALSE 14903
14877: GO 14879
14879: DISABLE
// begin solar_recharge_percent := 0 ;
14880: LD_ADDR_OWVAR 79
14884: PUSH
14885: LD_INT 0
14887: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14888: LD_INT 10500
14890: PPUSH
14891: CALL_OW 67
// solar_recharge_percent := 100 ;
14895: LD_ADDR_OWVAR 79
14899: PUSH
14900: LD_INT 100
14902: ST_TO_ADDR
// end ;
14903: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14904: LD_EXP 43
14908: PUSH
14909: LD_EXP 67
14913: AND
14914: IFFALSE 15153
14916: GO 14918
14918: DISABLE
14919: LD_INT 0
14921: PPUSH
14922: PPUSH
14923: PPUSH
// begin tmp := [ ] ;
14924: LD_ADDR_VAR 0 3
14928: PUSH
14929: EMPTY
14930: ST_TO_ADDR
// for i := 1 to 6 do
14931: LD_ADDR_VAR 0 1
14935: PUSH
14936: DOUBLE
14937: LD_INT 1
14939: DEC
14940: ST_TO_ADDR
14941: LD_INT 6
14943: PUSH
14944: FOR_TO
14945: IFFALSE 15050
// begin uc_nation := nation_nature ;
14947: LD_ADDR_OWVAR 21
14951: PUSH
14952: LD_INT 0
14954: ST_TO_ADDR
// uc_side := 0 ;
14955: LD_ADDR_OWVAR 20
14959: PUSH
14960: LD_INT 0
14962: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14963: LD_ADDR_OWVAR 29
14967: PUSH
14968: LD_INT 12
14970: PUSH
14971: LD_INT 12
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: ST_TO_ADDR
// hc_agressivity := 20 ;
14978: LD_ADDR_OWVAR 35
14982: PUSH
14983: LD_INT 20
14985: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14986: LD_ADDR_OWVAR 28
14990: PUSH
14991: LD_INT 17
14993: ST_TO_ADDR
// hc_gallery :=  ;
14994: LD_ADDR_OWVAR 33
14998: PUSH
14999: LD_STRING 
15001: ST_TO_ADDR
// hc_name :=  ;
15002: LD_ADDR_OWVAR 26
15006: PUSH
15007: LD_STRING 
15009: ST_TO_ADDR
// un := CreateHuman ;
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: CALL_OW 44
15019: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15020: LD_VAR 0 2
15024: PPUSH
15025: LD_INT 1
15027: PPUSH
15028: CALL_OW 51
// tmp := tmp ^ un ;
15032: LD_ADDR_VAR 0 3
15036: PUSH
15037: LD_VAR 0 3
15041: PUSH
15042: LD_VAR 0 2
15046: ADD
15047: ST_TO_ADDR
// end ;
15048: GO 14944
15050: POP
15051: POP
// repeat wait ( 0 0$1 ) ;
15052: LD_INT 35
15054: PPUSH
15055: CALL_OW 67
// for un in tmp do
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_VAR 0 3
15068: PUSH
15069: FOR_IN
15070: IFFALSE 15144
// begin if IsDead ( un ) then
15072: LD_VAR 0 2
15076: PPUSH
15077: CALL_OW 301
15081: IFFALSE 15101
// begin tmp := tmp diff un ;
15083: LD_ADDR_VAR 0 3
15087: PUSH
15088: LD_VAR 0 3
15092: PUSH
15093: LD_VAR 0 2
15097: DIFF
15098: ST_TO_ADDR
// continue ;
15099: GO 15069
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15101: LD_VAR 0 2
15105: PPUSH
15106: LD_INT 3
15108: PUSH
15109: LD_INT 22
15111: PUSH
15112: LD_INT 0
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: EMPTY
15120: LIST
15121: LIST
15122: PPUSH
15123: CALL_OW 69
15127: PPUSH
15128: LD_VAR 0 2
15132: PPUSH
15133: CALL_OW 74
15137: PPUSH
15138: CALL_OW 115
// end ;
15142: GO 15069
15144: POP
15145: POP
// until not tmp ;
15146: LD_VAR 0 3
15150: NOT
15151: IFFALSE 15052
// end ;
15153: PPOPN 3
15155: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15156: LD_EXP 43
15160: PUSH
15161: LD_EXP 68
15165: AND
15166: IFFALSE 15220
15168: GO 15170
15170: DISABLE
// begin ToLua ( displayTroll(); ) ;
15171: LD_STRING displayTroll();
15173: PPUSH
15174: CALL_OW 559
// wait ( 3 3$00 ) ;
15178: LD_INT 6300
15180: PPUSH
15181: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15185: LD_STRING hideTroll();
15187: PPUSH
15188: CALL_OW 559
// wait ( 1 1$00 ) ;
15192: LD_INT 2100
15194: PPUSH
15195: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15199: LD_STRING displayTroll();
15201: PPUSH
15202: CALL_OW 559
// wait ( 1 1$00 ) ;
15206: LD_INT 2100
15208: PPUSH
15209: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15213: LD_STRING hideTroll();
15215: PPUSH
15216: CALL_OW 559
// end ;
15220: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15221: LD_EXP 43
15225: PUSH
15226: LD_EXP 69
15230: AND
15231: IFFALSE 15294
15233: GO 15235
15235: DISABLE
15236: LD_INT 0
15238: PPUSH
// begin p := 0 ;
15239: LD_ADDR_VAR 0 1
15243: PUSH
15244: LD_INT 0
15246: ST_TO_ADDR
// repeat game_speed := 1 ;
15247: LD_ADDR_OWVAR 65
15251: PUSH
15252: LD_INT 1
15254: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15255: LD_INT 35
15257: PPUSH
15258: CALL_OW 67
// p := p + 1 ;
15262: LD_ADDR_VAR 0 1
15266: PUSH
15267: LD_VAR 0 1
15271: PUSH
15272: LD_INT 1
15274: PLUS
15275: ST_TO_ADDR
// until p >= 60 ;
15276: LD_VAR 0 1
15280: PUSH
15281: LD_INT 60
15283: GREATEREQUAL
15284: IFFALSE 15247
// game_speed := 4 ;
15286: LD_ADDR_OWVAR 65
15290: PUSH
15291: LD_INT 4
15293: ST_TO_ADDR
// end ;
15294: PPOPN 1
15296: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15297: LD_EXP 43
15301: PUSH
15302: LD_EXP 70
15306: AND
15307: IFFALSE 15453
15309: GO 15311
15311: DISABLE
15312: LD_INT 0
15314: PPUSH
15315: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15316: LD_ADDR_VAR 0 1
15320: PUSH
15321: LD_INT 22
15323: PUSH
15324: LD_OWVAR 2
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 2
15335: PUSH
15336: LD_INT 30
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 30
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 69
15369: ST_TO_ADDR
// if not depot then
15370: LD_VAR 0 1
15374: NOT
15375: IFFALSE 15379
// exit ;
15377: GO 15453
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15379: LD_ADDR_VAR 0 2
15383: PUSH
15384: LD_VAR 0 1
15388: PUSH
15389: LD_INT 1
15391: PPUSH
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 12
15401: ARRAY
15402: PPUSH
15403: CALL_OW 274
15407: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15408: LD_VAR 0 2
15412: PPUSH
15413: LD_INT 1
15415: PPUSH
15416: LD_INT 0
15418: PPUSH
15419: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15423: LD_VAR 0 2
15427: PPUSH
15428: LD_INT 2
15430: PPUSH
15431: LD_INT 0
15433: PPUSH
15434: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15438: LD_VAR 0 2
15442: PPUSH
15443: LD_INT 3
15445: PPUSH
15446: LD_INT 0
15448: PPUSH
15449: CALL_OW 277
// end ;
15453: PPOPN 2
15455: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15456: LD_EXP 43
15460: PUSH
15461: LD_EXP 71
15465: AND
15466: IFFALSE 15563
15468: GO 15470
15470: DISABLE
15471: LD_INT 0
15473: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15474: LD_ADDR_VAR 0 1
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_OWVAR 2
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 21
15493: PUSH
15494: LD_INT 1
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 3
15503: PUSH
15504: LD_INT 23
15506: PUSH
15507: LD_INT 0
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// if not tmp then
15528: LD_VAR 0 1
15532: NOT
15533: IFFALSE 15537
// exit ;
15535: GO 15563
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15537: LD_VAR 0 1
15541: PUSH
15542: LD_INT 1
15544: PPUSH
15545: LD_VAR 0 1
15549: PPUSH
15550: CALL_OW 12
15554: ARRAY
15555: PPUSH
15556: LD_INT 200
15558: PPUSH
15559: CALL_OW 234
// end ;
15563: PPOPN 1
15565: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15566: LD_EXP 43
15570: PUSH
15571: LD_EXP 72
15575: AND
15576: IFFALSE 15655
15578: GO 15580
15580: DISABLE
15581: LD_INT 0
15583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15584: LD_ADDR_VAR 0 1
15588: PUSH
15589: LD_INT 22
15591: PUSH
15592: LD_OWVAR 2
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PUSH
15601: LD_INT 21
15603: PUSH
15604: LD_INT 2
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: EMPTY
15612: LIST
15613: LIST
15614: PPUSH
15615: CALL_OW 69
15619: ST_TO_ADDR
// if not tmp then
15620: LD_VAR 0 1
15624: NOT
15625: IFFALSE 15629
// exit ;
15627: GO 15655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15629: LD_VAR 0 1
15633: PUSH
15634: LD_INT 1
15636: PPUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 12
15646: ARRAY
15647: PPUSH
15648: LD_INT 60
15650: PPUSH
15651: CALL_OW 234
// end ;
15655: PPOPN 1
15657: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15658: LD_EXP 43
15662: PUSH
15663: LD_EXP 73
15667: AND
15668: IFFALSE 15767
15670: GO 15672
15672: DISABLE
15673: LD_INT 0
15675: PPUSH
15676: PPUSH
// begin enable ;
15677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15678: LD_ADDR_VAR 0 1
15682: PUSH
15683: LD_INT 22
15685: PUSH
15686: LD_OWVAR 2
15690: PUSH
15691: EMPTY
15692: LIST
15693: LIST
15694: PUSH
15695: LD_INT 61
15697: PUSH
15698: EMPTY
15699: LIST
15700: PUSH
15701: LD_INT 33
15703: PUSH
15704: LD_INT 2
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: LIST
15715: PPUSH
15716: CALL_OW 69
15720: ST_TO_ADDR
// if not tmp then
15721: LD_VAR 0 1
15725: NOT
15726: IFFALSE 15730
// exit ;
15728: GO 15767
// for i in tmp do
15730: LD_ADDR_VAR 0 2
15734: PUSH
15735: LD_VAR 0 1
15739: PUSH
15740: FOR_IN
15741: IFFALSE 15765
// if IsControledBy ( i ) then
15743: LD_VAR 0 2
15747: PPUSH
15748: CALL_OW 312
15752: IFFALSE 15763
// ComUnlink ( i ) ;
15754: LD_VAR 0 2
15758: PPUSH
15759: CALL_OW 136
15763: GO 15740
15765: POP
15766: POP
// end ;
15767: PPOPN 2
15769: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15770: LD_EXP 43
15774: PUSH
15775: LD_EXP 74
15779: AND
15780: IFFALSE 15920
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
15788: PPUSH
// begin ToLua ( displayPowell(); ) ;
15789: LD_STRING displayPowell();
15791: PPUSH
15792: CALL_OW 559
// uc_side := 0 ;
15796: LD_ADDR_OWVAR 20
15800: PUSH
15801: LD_INT 0
15803: ST_TO_ADDR
// uc_nation := 2 ;
15804: LD_ADDR_OWVAR 21
15808: PUSH
15809: LD_INT 2
15811: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15812: LD_ADDR_OWVAR 37
15816: PUSH
15817: LD_INT 14
15819: ST_TO_ADDR
// vc_engine := engine_siberite ;
15820: LD_ADDR_OWVAR 39
15824: PUSH
15825: LD_INT 3
15827: ST_TO_ADDR
// vc_control := control_apeman ;
15828: LD_ADDR_OWVAR 38
15832: PUSH
15833: LD_INT 5
15835: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15836: LD_ADDR_OWVAR 40
15840: PUSH
15841: LD_INT 29
15843: ST_TO_ADDR
// un := CreateVehicle ;
15844: LD_ADDR_VAR 0 2
15848: PUSH
15849: CALL_OW 45
15853: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15854: LD_VAR 0 2
15858: PPUSH
15859: LD_INT 1
15861: PPUSH
15862: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15866: LD_INT 35
15868: PPUSH
15869: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15873: LD_VAR 0 2
15877: PPUSH
15878: LD_INT 22
15880: PUSH
15881: LD_OWVAR 2
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: PPUSH
15890: CALL_OW 69
15894: PPUSH
15895: LD_VAR 0 2
15899: PPUSH
15900: CALL_OW 74
15904: PPUSH
15905: CALL_OW 115
// until IsDead ( un ) ;
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 301
15918: IFFALSE 15866
// end ;
15920: PPOPN 2
15922: END
// every 0 0$1 trigger StreamModeActive and sStu do
15923: LD_EXP 43
15927: PUSH
15928: LD_EXP 82
15932: AND
15933: IFFALSE 15949
15935: GO 15937
15937: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15938: LD_STRING displayStucuk();
15940: PPUSH
15941: CALL_OW 559
// ResetFog ;
15945: CALL_OW 335
// end ;
15949: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15950: LD_EXP 43
15954: PUSH
15955: LD_EXP 75
15959: AND
15960: IFFALSE 16101
15962: GO 15964
15964: DISABLE
15965: LD_INT 0
15967: PPUSH
15968: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15969: LD_ADDR_VAR 0 2
15973: PUSH
15974: LD_INT 22
15976: PUSH
15977: LD_OWVAR 2
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: PUSH
15986: LD_INT 21
15988: PUSH
15989: LD_INT 1
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PPUSH
16000: CALL_OW 69
16004: ST_TO_ADDR
// if not tmp then
16005: LD_VAR 0 2
16009: NOT
16010: IFFALSE 16014
// exit ;
16012: GO 16101
// un := tmp [ rand ( 1 , tmp ) ] ;
16014: LD_ADDR_VAR 0 1
16018: PUSH
16019: LD_VAR 0 2
16023: PUSH
16024: LD_INT 1
16026: PPUSH
16027: LD_VAR 0 2
16031: PPUSH
16032: CALL_OW 12
16036: ARRAY
16037: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 0
16045: PPUSH
16046: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16050: LD_VAR 0 1
16054: PPUSH
16055: LD_OWVAR 3
16059: PUSH
16060: LD_VAR 0 1
16064: DIFF
16065: PPUSH
16066: LD_VAR 0 1
16070: PPUSH
16071: CALL_OW 74
16075: PPUSH
16076: CALL_OW 115
// wait ( 0 0$20 ) ;
16080: LD_INT 700
16082: PPUSH
16083: CALL_OW 67
// SetSide ( un , your_side ) ;
16087: LD_VAR 0 1
16091: PPUSH
16092: LD_OWVAR 2
16096: PPUSH
16097: CALL_OW 235
// end ;
16101: PPOPN 2
16103: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16104: LD_EXP 43
16108: PUSH
16109: LD_EXP 76
16113: AND
16114: IFFALSE 16220
16116: GO 16118
16118: DISABLE
16119: LD_INT 0
16121: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16122: LD_ADDR_VAR 0 1
16126: PUSH
16127: LD_INT 22
16129: PUSH
16130: LD_OWVAR 2
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: LD_INT 2
16141: PUSH
16142: LD_INT 30
16144: PUSH
16145: LD_INT 0
16147: PUSH
16148: EMPTY
16149: LIST
16150: LIST
16151: PUSH
16152: LD_INT 30
16154: PUSH
16155: LD_INT 1
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PPUSH
16171: CALL_OW 69
16175: ST_TO_ADDR
// if not depot then
16176: LD_VAR 0 1
16180: NOT
16181: IFFALSE 16185
// exit ;
16183: GO 16220
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16185: LD_VAR 0 1
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: PPUSH
16194: CALL_OW 250
16198: PPUSH
16199: LD_VAR 0 1
16203: PUSH
16204: LD_INT 1
16206: ARRAY
16207: PPUSH
16208: CALL_OW 251
16212: PPUSH
16213: LD_INT 70
16215: PPUSH
16216: CALL_OW 495
// end ;
16220: PPOPN 1
16222: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16223: LD_EXP 43
16227: PUSH
16228: LD_EXP 77
16232: AND
16233: IFFALSE 16444
16235: GO 16237
16237: DISABLE
16238: LD_INT 0
16240: PPUSH
16241: PPUSH
16242: PPUSH
16243: PPUSH
16244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16245: LD_ADDR_VAR 0 5
16249: PUSH
16250: LD_INT 22
16252: PUSH
16253: LD_OWVAR 2
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 21
16264: PUSH
16265: LD_INT 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: ST_TO_ADDR
// if not tmp then
16281: LD_VAR 0 5
16285: NOT
16286: IFFALSE 16290
// exit ;
16288: GO 16444
// for i in tmp do
16290: LD_ADDR_VAR 0 1
16294: PUSH
16295: LD_VAR 0 5
16299: PUSH
16300: FOR_IN
16301: IFFALSE 16442
// begin d := rand ( 0 , 5 ) ;
16303: LD_ADDR_VAR 0 4
16307: PUSH
16308: LD_INT 0
16310: PPUSH
16311: LD_INT 5
16313: PPUSH
16314: CALL_OW 12
16318: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16319: LD_ADDR_VAR 0 2
16323: PUSH
16324: LD_VAR 0 1
16328: PPUSH
16329: CALL_OW 250
16333: PPUSH
16334: LD_VAR 0 4
16338: PPUSH
16339: LD_INT 3
16341: PPUSH
16342: LD_INT 12
16344: PPUSH
16345: CALL_OW 12
16349: PPUSH
16350: CALL_OW 272
16354: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16355: LD_ADDR_VAR 0 3
16359: PUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: CALL_OW 251
16369: PPUSH
16370: LD_VAR 0 4
16374: PPUSH
16375: LD_INT 3
16377: PPUSH
16378: LD_INT 12
16380: PPUSH
16381: CALL_OW 12
16385: PPUSH
16386: CALL_OW 273
16390: ST_TO_ADDR
// if ValidHex ( x , y ) then
16391: LD_VAR 0 2
16395: PPUSH
16396: LD_VAR 0 3
16400: PPUSH
16401: CALL_OW 488
16405: IFFALSE 16440
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16407: LD_VAR 0 1
16411: PPUSH
16412: LD_VAR 0 2
16416: PPUSH
16417: LD_VAR 0 3
16421: PPUSH
16422: LD_INT 3
16424: PPUSH
16425: LD_INT 6
16427: PPUSH
16428: CALL_OW 12
16432: PPUSH
16433: LD_INT 1
16435: PPUSH
16436: CALL_OW 483
// end ;
16440: GO 16300
16442: POP
16443: POP
// end ;
16444: PPOPN 5
16446: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16447: LD_EXP 43
16451: PUSH
16452: LD_EXP 78
16456: AND
16457: IFFALSE 16551
16459: GO 16461
16461: DISABLE
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16466: LD_ADDR_VAR 0 2
16470: PUSH
16471: LD_INT 22
16473: PUSH
16474: LD_OWVAR 2
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: PUSH
16483: LD_INT 32
16485: PUSH
16486: LD_INT 1
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 21
16495: PUSH
16496: LD_INT 2
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: ST_TO_ADDR
// if not tmp then
16513: LD_VAR 0 2
16517: NOT
16518: IFFALSE 16522
// exit ;
16520: GO 16551
// for i in tmp do
16522: LD_ADDR_VAR 0 1
16526: PUSH
16527: LD_VAR 0 2
16531: PUSH
16532: FOR_IN
16533: IFFALSE 16549
// SetFuel ( i , 0 ) ;
16535: LD_VAR 0 1
16539: PPUSH
16540: LD_INT 0
16542: PPUSH
16543: CALL_OW 240
16547: GO 16532
16549: POP
16550: POP
// end ;
16551: PPOPN 2
16553: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16554: LD_EXP 43
16558: PUSH
16559: LD_EXP 79
16563: AND
16564: IFFALSE 16630
16566: GO 16568
16568: DISABLE
16569: LD_INT 0
16571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16572: LD_ADDR_VAR 0 1
16576: PUSH
16577: LD_INT 22
16579: PUSH
16580: LD_OWVAR 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 30
16591: PUSH
16592: LD_INT 29
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PPUSH
16603: CALL_OW 69
16607: ST_TO_ADDR
// if not tmp then
16608: LD_VAR 0 1
16612: NOT
16613: IFFALSE 16617
// exit ;
16615: GO 16630
// DestroyUnit ( tmp [ 1 ] ) ;
16617: LD_VAR 0 1
16621: PUSH
16622: LD_INT 1
16624: ARRAY
16625: PPUSH
16626: CALL_OW 65
// end ;
16630: PPOPN 1
16632: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16633: LD_EXP 43
16637: PUSH
16638: LD_EXP 81
16642: AND
16643: IFFALSE 16772
16645: GO 16647
16647: DISABLE
16648: LD_INT 0
16650: PPUSH
// begin uc_side := 0 ;
16651: LD_ADDR_OWVAR 20
16655: PUSH
16656: LD_INT 0
16658: ST_TO_ADDR
// uc_nation := nation_arabian ;
16659: LD_ADDR_OWVAR 21
16663: PUSH
16664: LD_INT 2
16666: ST_TO_ADDR
// hc_gallery :=  ;
16667: LD_ADDR_OWVAR 33
16671: PUSH
16672: LD_STRING 
16674: ST_TO_ADDR
// hc_name :=  ;
16675: LD_ADDR_OWVAR 26
16679: PUSH
16680: LD_STRING 
16682: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16683: LD_INT 1
16685: PPUSH
16686: LD_INT 11
16688: PPUSH
16689: LD_INT 10
16691: PPUSH
16692: CALL_OW 380
// un := CreateHuman ;
16696: LD_ADDR_VAR 0 1
16700: PUSH
16701: CALL_OW 44
16705: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16706: LD_VAR 0 1
16710: PPUSH
16711: LD_INT 1
16713: PPUSH
16714: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16718: LD_INT 35
16720: PPUSH
16721: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16725: LD_VAR 0 1
16729: PPUSH
16730: LD_INT 22
16732: PUSH
16733: LD_OWVAR 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PPUSH
16742: CALL_OW 69
16746: PPUSH
16747: LD_VAR 0 1
16751: PPUSH
16752: CALL_OW 74
16756: PPUSH
16757: CALL_OW 115
// until IsDead ( un ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: CALL_OW 301
16770: IFFALSE 16718
// end ;
16772: PPOPN 1
16774: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16775: LD_EXP 43
16779: PUSH
16780: LD_EXP 83
16784: AND
16785: IFFALSE 16797
16787: GO 16789
16789: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16790: LD_STRING earthquake(getX(game), 0, 32)
16792: PPUSH
16793: CALL_OW 559
16797: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16798: LD_EXP 43
16802: PUSH
16803: LD_EXP 84
16807: AND
16808: IFFALSE 16899
16810: GO 16812
16812: DISABLE
16813: LD_INT 0
16815: PPUSH
// begin enable ;
16816: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16817: LD_ADDR_VAR 0 1
16821: PUSH
16822: LD_INT 22
16824: PUSH
16825: LD_OWVAR 2
16829: PUSH
16830: EMPTY
16831: LIST
16832: LIST
16833: PUSH
16834: LD_INT 21
16836: PUSH
16837: LD_INT 2
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 33
16846: PUSH
16847: LD_INT 3
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: LIST
16858: PPUSH
16859: CALL_OW 69
16863: ST_TO_ADDR
// if not tmp then
16864: LD_VAR 0 1
16868: NOT
16869: IFFALSE 16873
// exit ;
16871: GO 16899
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16873: LD_VAR 0 1
16877: PUSH
16878: LD_INT 1
16880: PPUSH
16881: LD_VAR 0 1
16885: PPUSH
16886: CALL_OW 12
16890: ARRAY
16891: PPUSH
16892: LD_INT 1
16894: PPUSH
16895: CALL_OW 234
// end ;
16899: PPOPN 1
16901: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16902: LD_EXP 43
16906: PUSH
16907: LD_EXP 85
16911: AND
16912: IFFALSE 17053
16914: GO 16916
16916: DISABLE
16917: LD_INT 0
16919: PPUSH
16920: PPUSH
16921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16922: LD_ADDR_VAR 0 3
16926: PUSH
16927: LD_INT 22
16929: PUSH
16930: LD_OWVAR 2
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 25
16941: PUSH
16942: LD_INT 1
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PPUSH
16953: CALL_OW 69
16957: ST_TO_ADDR
// if not tmp then
16958: LD_VAR 0 3
16962: NOT
16963: IFFALSE 16967
// exit ;
16965: GO 17053
// un := tmp [ rand ( 1 , tmp ) ] ;
16967: LD_ADDR_VAR 0 2
16971: PUSH
16972: LD_VAR 0 3
16976: PUSH
16977: LD_INT 1
16979: PPUSH
16980: LD_VAR 0 3
16984: PPUSH
16985: CALL_OW 12
16989: ARRAY
16990: ST_TO_ADDR
// if Crawls ( un ) then
16991: LD_VAR 0 2
16995: PPUSH
16996: CALL_OW 318
17000: IFFALSE 17011
// ComWalk ( un ) ;
17002: LD_VAR 0 2
17006: PPUSH
17007: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17011: LD_VAR 0 2
17015: PPUSH
17016: LD_INT 9
17018: PPUSH
17019: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17023: LD_INT 28
17025: PPUSH
17026: LD_OWVAR 2
17030: PPUSH
17031: LD_INT 2
17033: PPUSH
17034: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17038: LD_INT 29
17040: PPUSH
17041: LD_OWVAR 2
17045: PPUSH
17046: LD_INT 2
17048: PPUSH
17049: CALL_OW 322
// end ;
17053: PPOPN 3
17055: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17056: LD_EXP 43
17060: PUSH
17061: LD_EXP 86
17065: AND
17066: IFFALSE 17177
17068: GO 17070
17070: DISABLE
17071: LD_INT 0
17073: PPUSH
17074: PPUSH
17075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17076: LD_ADDR_VAR 0 3
17080: PUSH
17081: LD_INT 22
17083: PUSH
17084: LD_OWVAR 2
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 25
17095: PUSH
17096: LD_INT 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PPUSH
17107: CALL_OW 69
17111: ST_TO_ADDR
// if not tmp then
17112: LD_VAR 0 3
17116: NOT
17117: IFFALSE 17121
// exit ;
17119: GO 17177
// un := tmp [ rand ( 1 , tmp ) ] ;
17121: LD_ADDR_VAR 0 2
17125: PUSH
17126: LD_VAR 0 3
17130: PUSH
17131: LD_INT 1
17133: PPUSH
17134: LD_VAR 0 3
17138: PPUSH
17139: CALL_OW 12
17143: ARRAY
17144: ST_TO_ADDR
// if Crawls ( un ) then
17145: LD_VAR 0 2
17149: PPUSH
17150: CALL_OW 318
17154: IFFALSE 17165
// ComWalk ( un ) ;
17156: LD_VAR 0 2
17160: PPUSH
17161: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17165: LD_VAR 0 2
17169: PPUSH
17170: LD_INT 8
17172: PPUSH
17173: CALL_OW 336
// end ;
17177: PPOPN 3
17179: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17180: LD_EXP 43
17184: PUSH
17185: LD_EXP 87
17189: AND
17190: IFFALSE 17334
17192: GO 17194
17194: DISABLE
17195: LD_INT 0
17197: PPUSH
17198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17199: LD_ADDR_VAR 0 2
17203: PUSH
17204: LD_INT 22
17206: PUSH
17207: LD_OWVAR 2
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 34
17231: PUSH
17232: LD_INT 12
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 34
17241: PUSH
17242: LD_INT 51
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 34
17251: PUSH
17252: LD_INT 32
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: ST_TO_ADDR
// if not tmp then
17275: LD_VAR 0 2
17279: NOT
17280: IFFALSE 17284
// exit ;
17282: GO 17334
// for i in tmp do
17284: LD_ADDR_VAR 0 1
17288: PUSH
17289: LD_VAR 0 2
17293: PUSH
17294: FOR_IN
17295: IFFALSE 17332
// if GetCargo ( i , mat_artifact ) = 0 then
17297: LD_VAR 0 1
17301: PPUSH
17302: LD_INT 4
17304: PPUSH
17305: CALL_OW 289
17309: PUSH
17310: LD_INT 0
17312: EQUAL
17313: IFFALSE 17330
// SetCargo ( i , mat_siberit , 100 ) ;
17315: LD_VAR 0 1
17319: PPUSH
17320: LD_INT 3
17322: PPUSH
17323: LD_INT 100
17325: PPUSH
17326: CALL_OW 290
17330: GO 17294
17332: POP
17333: POP
// end ;
17334: PPOPN 2
17336: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17337: LD_EXP 43
17341: PUSH
17342: LD_EXP 88
17346: AND
17347: IFFALSE 17530
17349: GO 17351
17351: DISABLE
17352: LD_INT 0
17354: PPUSH
17355: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17356: LD_ADDR_VAR 0 2
17360: PUSH
17361: LD_INT 22
17363: PUSH
17364: LD_OWVAR 2
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PPUSH
17373: CALL_OW 69
17377: ST_TO_ADDR
// if not tmp then
17378: LD_VAR 0 2
17382: NOT
17383: IFFALSE 17387
// exit ;
17385: GO 17530
// for i := 1 to 2 do
17387: LD_ADDR_VAR 0 1
17391: PUSH
17392: DOUBLE
17393: LD_INT 1
17395: DEC
17396: ST_TO_ADDR
17397: LD_INT 2
17399: PUSH
17400: FOR_TO
17401: IFFALSE 17528
// begin uc_side := your_side ;
17403: LD_ADDR_OWVAR 20
17407: PUSH
17408: LD_OWVAR 2
17412: ST_TO_ADDR
// uc_nation := nation_american ;
17413: LD_ADDR_OWVAR 21
17417: PUSH
17418: LD_INT 1
17420: ST_TO_ADDR
// vc_chassis := us_morphling ;
17421: LD_ADDR_OWVAR 37
17425: PUSH
17426: LD_INT 5
17428: ST_TO_ADDR
// vc_engine := engine_siberite ;
17429: LD_ADDR_OWVAR 39
17433: PUSH
17434: LD_INT 3
17436: ST_TO_ADDR
// vc_control := control_computer ;
17437: LD_ADDR_OWVAR 38
17441: PUSH
17442: LD_INT 3
17444: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17445: LD_ADDR_OWVAR 40
17449: PUSH
17450: LD_INT 10
17452: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17453: LD_VAR 0 2
17457: PUSH
17458: LD_INT 1
17460: ARRAY
17461: PPUSH
17462: CALL_OW 310
17466: NOT
17467: IFFALSE 17514
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17469: CALL_OW 45
17473: PPUSH
17474: LD_VAR 0 2
17478: PUSH
17479: LD_INT 1
17481: ARRAY
17482: PPUSH
17483: CALL_OW 250
17487: PPUSH
17488: LD_VAR 0 2
17492: PUSH
17493: LD_INT 1
17495: ARRAY
17496: PPUSH
17497: CALL_OW 251
17501: PPUSH
17502: LD_INT 12
17504: PPUSH
17505: LD_INT 1
17507: PPUSH
17508: CALL_OW 50
17512: GO 17526
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17514: CALL_OW 45
17518: PPUSH
17519: LD_INT 1
17521: PPUSH
17522: CALL_OW 51
// end ;
17526: GO 17400
17528: POP
17529: POP
// end ;
17530: PPOPN 2
17532: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17533: LD_EXP 43
17537: PUSH
17538: LD_EXP 89
17542: AND
17543: IFFALSE 17765
17545: GO 17547
17547: DISABLE
17548: LD_INT 0
17550: PPUSH
17551: PPUSH
17552: PPUSH
17553: PPUSH
17554: PPUSH
17555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17556: LD_ADDR_VAR 0 6
17560: PUSH
17561: LD_INT 22
17563: PUSH
17564: LD_OWVAR 2
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: LD_INT 21
17575: PUSH
17576: LD_INT 1
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 3
17585: PUSH
17586: LD_INT 23
17588: PUSH
17589: LD_INT 0
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: ST_TO_ADDR
// if not tmp then
17610: LD_VAR 0 6
17614: NOT
17615: IFFALSE 17619
// exit ;
17617: GO 17765
// s1 := rand ( 1 , 4 ) ;
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_INT 1
17626: PPUSH
17627: LD_INT 4
17629: PPUSH
17630: CALL_OW 12
17634: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17635: LD_ADDR_VAR 0 4
17639: PUSH
17640: LD_VAR 0 6
17644: PUSH
17645: LD_INT 1
17647: ARRAY
17648: PPUSH
17649: LD_VAR 0 2
17653: PPUSH
17654: CALL_OW 259
17658: ST_TO_ADDR
// if s1 = 1 then
17659: LD_VAR 0 2
17663: PUSH
17664: LD_INT 1
17666: EQUAL
17667: IFFALSE 17687
// s2 := rand ( 2 , 4 ) else
17669: LD_ADDR_VAR 0 3
17673: PUSH
17674: LD_INT 2
17676: PPUSH
17677: LD_INT 4
17679: PPUSH
17680: CALL_OW 12
17684: ST_TO_ADDR
17685: GO 17695
// s2 := 1 ;
17687: LD_ADDR_VAR 0 3
17691: PUSH
17692: LD_INT 1
17694: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17695: LD_ADDR_VAR 0 5
17699: PUSH
17700: LD_VAR 0 6
17704: PUSH
17705: LD_INT 1
17707: ARRAY
17708: PPUSH
17709: LD_VAR 0 3
17713: PPUSH
17714: CALL_OW 259
17718: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17719: LD_VAR 0 6
17723: PUSH
17724: LD_INT 1
17726: ARRAY
17727: PPUSH
17728: LD_VAR 0 2
17732: PPUSH
17733: LD_VAR 0 5
17737: PPUSH
17738: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17742: LD_VAR 0 6
17746: PUSH
17747: LD_INT 1
17749: ARRAY
17750: PPUSH
17751: LD_VAR 0 3
17755: PPUSH
17756: LD_VAR 0 4
17760: PPUSH
17761: CALL_OW 237
// end ;
17765: PPOPN 6
17767: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17768: LD_EXP 43
17772: PUSH
17773: LD_EXP 90
17777: AND
17778: IFFALSE 17857
17780: GO 17782
17782: DISABLE
17783: LD_INT 0
17785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17786: LD_ADDR_VAR 0 1
17790: PUSH
17791: LD_INT 22
17793: PUSH
17794: LD_OWVAR 2
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 30
17805: PUSH
17806: LD_INT 3
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PPUSH
17817: CALL_OW 69
17821: ST_TO_ADDR
// if not tmp then
17822: LD_VAR 0 1
17826: NOT
17827: IFFALSE 17831
// exit ;
17829: GO 17857
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17831: LD_VAR 0 1
17835: PUSH
17836: LD_INT 1
17838: PPUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 12
17848: ARRAY
17849: PPUSH
17850: LD_INT 1
17852: PPUSH
17853: CALL_OW 234
// end ;
17857: PPOPN 1
17859: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17860: LD_EXP 43
17864: PUSH
17865: LD_EXP 91
17869: AND
17870: IFFALSE 17982
17872: GO 17874
17874: DISABLE
17875: LD_INT 0
17877: PPUSH
17878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17879: LD_ADDR_VAR 0 2
17883: PUSH
17884: LD_INT 22
17886: PUSH
17887: LD_OWVAR 2
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 2
17898: PUSH
17899: LD_INT 30
17901: PUSH
17902: LD_INT 27
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 26
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 30
17921: PUSH
17922: LD_INT 28
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PPUSH
17939: CALL_OW 69
17943: ST_TO_ADDR
// if not tmp then
17944: LD_VAR 0 2
17948: NOT
17949: IFFALSE 17953
// exit ;
17951: GO 17982
// for i in tmp do
17953: LD_ADDR_VAR 0 1
17957: PUSH
17958: LD_VAR 0 2
17962: PUSH
17963: FOR_IN
17964: IFFALSE 17980
// SetLives ( i , 1 ) ;
17966: LD_VAR 0 1
17970: PPUSH
17971: LD_INT 1
17973: PPUSH
17974: CALL_OW 234
17978: GO 17963
17980: POP
17981: POP
// end ;
17982: PPOPN 2
17984: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17985: LD_EXP 43
17989: PUSH
17990: LD_EXP 92
17994: AND
17995: IFFALSE 18282
17997: GO 17999
17999: DISABLE
18000: LD_INT 0
18002: PPUSH
18003: PPUSH
18004: PPUSH
// begin i := rand ( 1 , 7 ) ;
18005: LD_ADDR_VAR 0 1
18009: PUSH
18010: LD_INT 1
18012: PPUSH
18013: LD_INT 7
18015: PPUSH
18016: CALL_OW 12
18020: ST_TO_ADDR
// case i of 1 :
18021: LD_VAR 0 1
18025: PUSH
18026: LD_INT 1
18028: DOUBLE
18029: EQUAL
18030: IFTRUE 18034
18032: GO 18044
18034: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18035: LD_STRING earthquake(getX(game), 0, 32)
18037: PPUSH
18038: CALL_OW 559
18042: GO 18282
18044: LD_INT 2
18046: DOUBLE
18047: EQUAL
18048: IFTRUE 18052
18050: GO 18066
18052: POP
// begin ToLua ( displayStucuk(); ) ;
18053: LD_STRING displayStucuk();
18055: PPUSH
18056: CALL_OW 559
// ResetFog ;
18060: CALL_OW 335
// end ; 3 :
18064: GO 18282
18066: LD_INT 3
18068: DOUBLE
18069: EQUAL
18070: IFTRUE 18074
18072: GO 18178
18074: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18075: LD_ADDR_VAR 0 2
18079: PUSH
18080: LD_INT 22
18082: PUSH
18083: LD_OWVAR 2
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 25
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 69
18110: ST_TO_ADDR
// if not tmp then
18111: LD_VAR 0 2
18115: NOT
18116: IFFALSE 18120
// exit ;
18118: GO 18282
// un := tmp [ rand ( 1 , tmp ) ] ;
18120: LD_ADDR_VAR 0 3
18124: PUSH
18125: LD_VAR 0 2
18129: PUSH
18130: LD_INT 1
18132: PPUSH
18133: LD_VAR 0 2
18137: PPUSH
18138: CALL_OW 12
18142: ARRAY
18143: ST_TO_ADDR
// if Crawls ( un ) then
18144: LD_VAR 0 3
18148: PPUSH
18149: CALL_OW 318
18153: IFFALSE 18164
// ComWalk ( un ) ;
18155: LD_VAR 0 3
18159: PPUSH
18160: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18164: LD_VAR 0 3
18168: PPUSH
18169: LD_INT 8
18171: PPUSH
18172: CALL_OW 336
// end ; 4 :
18176: GO 18282
18178: LD_INT 4
18180: DOUBLE
18181: EQUAL
18182: IFTRUE 18186
18184: GO 18260
18186: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18187: LD_ADDR_VAR 0 2
18191: PUSH
18192: LD_INT 22
18194: PUSH
18195: LD_OWVAR 2
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 30
18206: PUSH
18207: LD_INT 29
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PPUSH
18218: CALL_OW 69
18222: ST_TO_ADDR
// if not tmp then
18223: LD_VAR 0 2
18227: NOT
18228: IFFALSE 18232
// exit ;
18230: GO 18282
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18232: LD_VAR 0 2
18236: PUSH
18237: LD_INT 1
18239: ARRAY
18240: PPUSH
18241: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18245: LD_VAR 0 2
18249: PUSH
18250: LD_INT 1
18252: ARRAY
18253: PPUSH
18254: CALL_OW 65
// end ; 5 .. 7 :
18258: GO 18282
18260: LD_INT 5
18262: DOUBLE
18263: GREATEREQUAL
18264: IFFALSE 18272
18266: LD_INT 7
18268: DOUBLE
18269: LESSEQUAL
18270: IFTRUE 18274
18272: GO 18281
18274: POP
// StreamSibBomb ; end ;
18275: CALL 14519 0 0
18279: GO 18282
18281: POP
// end ;
18282: PPOPN 3
18284: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18285: LD_EXP 43
18289: PUSH
18290: LD_EXP 93
18294: AND
18295: IFFALSE 18451
18297: GO 18299
18299: DISABLE
18300: LD_INT 0
18302: PPUSH
18303: PPUSH
18304: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18305: LD_ADDR_VAR 0 2
18309: PUSH
18310: LD_INT 81
18312: PUSH
18313: LD_OWVAR 2
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: PUSH
18322: LD_INT 2
18324: PUSH
18325: LD_INT 21
18327: PUSH
18328: LD_INT 1
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PUSH
18335: LD_INT 21
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: ST_TO_ADDR
// if not tmp then
18359: LD_VAR 0 2
18363: NOT
18364: IFFALSE 18368
// exit ;
18366: GO 18451
// p := 0 ;
18368: LD_ADDR_VAR 0 3
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18376: LD_INT 35
18378: PPUSH
18379: CALL_OW 67
// p := p + 1 ;
18383: LD_ADDR_VAR 0 3
18387: PUSH
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 1
18395: PLUS
18396: ST_TO_ADDR
// for i in tmp do
18397: LD_ADDR_VAR 0 1
18401: PUSH
18402: LD_VAR 0 2
18406: PUSH
18407: FOR_IN
18408: IFFALSE 18439
// if GetLives ( i ) < 1000 then
18410: LD_VAR 0 1
18414: PPUSH
18415: CALL_OW 256
18419: PUSH
18420: LD_INT 1000
18422: LESS
18423: IFFALSE 18437
// SetLives ( i , 1000 ) ;
18425: LD_VAR 0 1
18429: PPUSH
18430: LD_INT 1000
18432: PPUSH
18433: CALL_OW 234
18437: GO 18407
18439: POP
18440: POP
// until p > 20 ;
18441: LD_VAR 0 3
18445: PUSH
18446: LD_INT 20
18448: GREATER
18449: IFFALSE 18376
// end ;
18451: PPOPN 3
18453: END
// every 0 0$1 trigger StreamModeActive and sTime do
18454: LD_EXP 43
18458: PUSH
18459: LD_EXP 94
18463: AND
18464: IFFALSE 18499
18466: GO 18468
18468: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18469: LD_INT 28
18471: PPUSH
18472: LD_OWVAR 2
18476: PPUSH
18477: LD_INT 2
18479: PPUSH
18480: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18484: LD_INT 30
18486: PPUSH
18487: LD_OWVAR 2
18491: PPUSH
18492: LD_INT 2
18494: PPUSH
18495: CALL_OW 322
// end ;
18499: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18500: LD_EXP 43
18504: PUSH
18505: LD_EXP 95
18509: AND
18510: IFFALSE 18631
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
18518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18519: LD_ADDR_VAR 0 2
18523: PUSH
18524: LD_INT 22
18526: PUSH
18527: LD_OWVAR 2
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 21
18538: PUSH
18539: LD_INT 1
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 3
18548: PUSH
18549: LD_INT 23
18551: PUSH
18552: LD_INT 0
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: PPUSH
18568: CALL_OW 69
18572: ST_TO_ADDR
// if not tmp then
18573: LD_VAR 0 2
18577: NOT
18578: IFFALSE 18582
// exit ;
18580: GO 18631
// for i in tmp do
18582: LD_ADDR_VAR 0 1
18586: PUSH
18587: LD_VAR 0 2
18591: PUSH
18592: FOR_IN
18593: IFFALSE 18629
// begin if Crawls ( i ) then
18595: LD_VAR 0 1
18599: PPUSH
18600: CALL_OW 318
18604: IFFALSE 18615
// ComWalk ( i ) ;
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 138
// SetClass ( i , 2 ) ;
18615: LD_VAR 0 1
18619: PPUSH
18620: LD_INT 2
18622: PPUSH
18623: CALL_OW 336
// end ;
18627: GO 18592
18629: POP
18630: POP
// end ;
18631: PPOPN 2
18633: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18634: LD_EXP 43
18638: PUSH
18639: LD_EXP 96
18643: AND
18644: IFFALSE 18932
18646: GO 18648
18648: DISABLE
18649: LD_INT 0
18651: PPUSH
18652: PPUSH
18653: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18654: LD_OWVAR 2
18658: PPUSH
18659: LD_INT 9
18661: PPUSH
18662: LD_INT 1
18664: PPUSH
18665: LD_INT 1
18667: PPUSH
18668: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18672: LD_INT 9
18674: PPUSH
18675: LD_OWVAR 2
18679: PPUSH
18680: CALL_OW 343
// uc_side := 9 ;
18684: LD_ADDR_OWVAR 20
18688: PUSH
18689: LD_INT 9
18691: ST_TO_ADDR
// uc_nation := 2 ;
18692: LD_ADDR_OWVAR 21
18696: PUSH
18697: LD_INT 2
18699: ST_TO_ADDR
// hc_name := Dark Warrior ;
18700: LD_ADDR_OWVAR 26
18704: PUSH
18705: LD_STRING Dark Warrior
18707: ST_TO_ADDR
// hc_gallery :=  ;
18708: LD_ADDR_OWVAR 33
18712: PUSH
18713: LD_STRING 
18715: ST_TO_ADDR
// hc_noskilllimit := true ;
18716: LD_ADDR_OWVAR 76
18720: PUSH
18721: LD_INT 1
18723: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18724: LD_ADDR_OWVAR 31
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 30
18734: PUSH
18735: LD_INT 30
18737: PUSH
18738: LD_INT 30
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: ST_TO_ADDR
// un := CreateHuman ;
18747: LD_ADDR_VAR 0 3
18751: PUSH
18752: CALL_OW 44
18756: ST_TO_ADDR
// hc_noskilllimit := false ;
18757: LD_ADDR_OWVAR 76
18761: PUSH
18762: LD_INT 0
18764: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18765: LD_VAR 0 3
18769: PPUSH
18770: LD_INT 1
18772: PPUSH
18773: CALL_OW 51
// ToLua ( playRanger() ) ;
18777: LD_STRING playRanger()
18779: PPUSH
18780: CALL_OW 559
// p := 0 ;
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: LD_INT 0
18791: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18792: LD_INT 35
18794: PPUSH
18795: CALL_OW 67
// p := p + 1 ;
18799: LD_ADDR_VAR 0 2
18803: PUSH
18804: LD_VAR 0 2
18808: PUSH
18809: LD_INT 1
18811: PLUS
18812: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18813: LD_VAR 0 3
18817: PPUSH
18818: CALL_OW 256
18822: PUSH
18823: LD_INT 1000
18825: LESS
18826: IFFALSE 18840
// SetLives ( un , 1000 ) ;
18828: LD_VAR 0 3
18832: PPUSH
18833: LD_INT 1000
18835: PPUSH
18836: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18840: LD_VAR 0 3
18844: PPUSH
18845: LD_INT 81
18847: PUSH
18848: LD_OWVAR 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 91
18859: PUSH
18860: LD_VAR 0 3
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PPUSH
18877: CALL_OW 69
18881: PPUSH
18882: LD_VAR 0 3
18886: PPUSH
18887: CALL_OW 74
18891: PPUSH
18892: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18896: LD_VAR 0 2
18900: PUSH
18901: LD_INT 80
18903: GREATER
18904: PUSH
18905: LD_VAR 0 3
18909: PPUSH
18910: CALL_OW 301
18914: OR
18915: IFFALSE 18792
// if un then
18917: LD_VAR 0 3
18921: IFFALSE 18932
// RemoveUnit ( un ) ;
18923: LD_VAR 0 3
18927: PPUSH
18928: CALL_OW 64
// end ;
18932: PPOPN 3
18934: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18935: LD_EXP 97
18939: IFFALSE 19055
18941: GO 18943
18943: DISABLE
18944: LD_INT 0
18946: PPUSH
18947: PPUSH
18948: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18949: LD_ADDR_VAR 0 2
18953: PUSH
18954: LD_INT 81
18956: PUSH
18957: LD_OWVAR 2
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 21
18968: PUSH
18969: LD_INT 1
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: PPUSH
18980: CALL_OW 69
18984: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18985: LD_STRING playComputer()
18987: PPUSH
18988: CALL_OW 559
// if not tmp then
18992: LD_VAR 0 2
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19055
// for i in tmp do
19001: LD_ADDR_VAR 0 1
19005: PUSH
19006: LD_VAR 0 2
19010: PUSH
19011: FOR_IN
19012: IFFALSE 19053
// for j := 1 to 4 do
19014: LD_ADDR_VAR 0 3
19018: PUSH
19019: DOUBLE
19020: LD_INT 1
19022: DEC
19023: ST_TO_ADDR
19024: LD_INT 4
19026: PUSH
19027: FOR_TO
19028: IFFALSE 19049
// SetSkill ( i , j , 10 ) ;
19030: LD_VAR 0 1
19034: PPUSH
19035: LD_VAR 0 3
19039: PPUSH
19040: LD_INT 10
19042: PPUSH
19043: CALL_OW 237
19047: GO 19027
19049: POP
19050: POP
19051: GO 19011
19053: POP
19054: POP
// end ;
19055: PPOPN 3
19057: END
// every 0 0$1 trigger s30 do var i , tmp ;
19058: LD_EXP 98
19062: IFFALSE 19131
19064: GO 19066
19066: DISABLE
19067: LD_INT 0
19069: PPUSH
19070: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19071: LD_ADDR_VAR 0 2
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_OWVAR 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PPUSH
19088: CALL_OW 69
19092: ST_TO_ADDR
// if not tmp then
19093: LD_VAR 0 2
19097: NOT
19098: IFFALSE 19102
// exit ;
19100: GO 19131
// for i in tmp do
19102: LD_ADDR_VAR 0 1
19106: PUSH
19107: LD_VAR 0 2
19111: PUSH
19112: FOR_IN
19113: IFFALSE 19129
// SetLives ( i , 300 ) ;
19115: LD_VAR 0 1
19119: PPUSH
19120: LD_INT 300
19122: PPUSH
19123: CALL_OW 234
19127: GO 19112
19129: POP
19130: POP
// end ;
19131: PPOPN 2
19133: END
// every 0 0$1 trigger s60 do var i , tmp ;
19134: LD_EXP 99
19138: IFFALSE 19207
19140: GO 19142
19142: DISABLE
19143: LD_INT 0
19145: PPUSH
19146: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19147: LD_ADDR_VAR 0 2
19151: PUSH
19152: LD_INT 22
19154: PUSH
19155: LD_OWVAR 2
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PPUSH
19164: CALL_OW 69
19168: ST_TO_ADDR
// if not tmp then
19169: LD_VAR 0 2
19173: NOT
19174: IFFALSE 19178
// exit ;
19176: GO 19207
// for i in tmp do
19178: LD_ADDR_VAR 0 1
19182: PUSH
19183: LD_VAR 0 2
19187: PUSH
19188: FOR_IN
19189: IFFALSE 19205
// SetLives ( i , 600 ) ;
19191: LD_VAR 0 1
19195: PPUSH
19196: LD_INT 600
19198: PPUSH
19199: CALL_OW 234
19203: GO 19188
19205: POP
19206: POP
// end ;
19207: PPOPN 2
19209: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19210: LD_INT 0
19212: PPUSH
// case cmd of 301 :
19213: LD_VAR 0 1
19217: PUSH
19218: LD_INT 301
19220: DOUBLE
19221: EQUAL
19222: IFTRUE 19226
19224: GO 19258
19226: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19227: LD_VAR 0 6
19231: PPUSH
19232: LD_VAR 0 7
19236: PPUSH
19237: LD_VAR 0 8
19241: PPUSH
19242: LD_VAR 0 4
19246: PPUSH
19247: LD_VAR 0 5
19251: PPUSH
19252: CALL 20459 0 5
19256: GO 19379
19258: LD_INT 302
19260: DOUBLE
19261: EQUAL
19262: IFTRUE 19266
19264: GO 19303
19266: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19267: LD_VAR 0 6
19271: PPUSH
19272: LD_VAR 0 7
19276: PPUSH
19277: LD_VAR 0 8
19281: PPUSH
19282: LD_VAR 0 9
19286: PPUSH
19287: LD_VAR 0 4
19291: PPUSH
19292: LD_VAR 0 5
19296: PPUSH
19297: CALL 20550 0 6
19301: GO 19379
19303: LD_INT 303
19305: DOUBLE
19306: EQUAL
19307: IFTRUE 19311
19309: GO 19348
19311: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19312: LD_VAR 0 6
19316: PPUSH
19317: LD_VAR 0 7
19321: PPUSH
19322: LD_VAR 0 8
19326: PPUSH
19327: LD_VAR 0 9
19331: PPUSH
19332: LD_VAR 0 4
19336: PPUSH
19337: LD_VAR 0 5
19341: PPUSH
19342: CALL 19384 0 6
19346: GO 19379
19348: LD_INT 304
19350: DOUBLE
19351: EQUAL
19352: IFTRUE 19356
19354: GO 19378
19356: POP
// hHackTeleport ( unit , x , y ) ; end ;
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_VAR 0 4
19366: PPUSH
19367: LD_VAR 0 5
19371: PPUSH
19372: CALL 21143 0 3
19376: GO 19379
19378: POP
// end ;
19379: LD_VAR 0 12
19383: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19384: LD_INT 0
19386: PPUSH
19387: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19388: LD_VAR 0 1
19392: PUSH
19393: LD_INT 1
19395: LESS
19396: PUSH
19397: LD_VAR 0 1
19401: PUSH
19402: LD_INT 3
19404: GREATER
19405: OR
19406: PUSH
19407: LD_VAR 0 5
19411: PPUSH
19412: LD_VAR 0 6
19416: PPUSH
19417: CALL_OW 428
19421: OR
19422: IFFALSE 19426
// exit ;
19424: GO 20146
// uc_side := your_side ;
19426: LD_ADDR_OWVAR 20
19430: PUSH
19431: LD_OWVAR 2
19435: ST_TO_ADDR
// uc_nation := nation ;
19436: LD_ADDR_OWVAR 21
19440: PUSH
19441: LD_VAR 0 1
19445: ST_TO_ADDR
// bc_level = 1 ;
19446: LD_ADDR_OWVAR 43
19450: PUSH
19451: LD_INT 1
19453: ST_TO_ADDR
// case btype of 1 :
19454: LD_VAR 0 2
19458: PUSH
19459: LD_INT 1
19461: DOUBLE
19462: EQUAL
19463: IFTRUE 19467
19465: GO 19478
19467: POP
// bc_type := b_depot ; 2 :
19468: LD_ADDR_OWVAR 42
19472: PUSH
19473: LD_INT 0
19475: ST_TO_ADDR
19476: GO 20090
19478: LD_INT 2
19480: DOUBLE
19481: EQUAL
19482: IFTRUE 19486
19484: GO 19497
19486: POP
// bc_type := b_warehouse ; 3 :
19487: LD_ADDR_OWVAR 42
19491: PUSH
19492: LD_INT 1
19494: ST_TO_ADDR
19495: GO 20090
19497: LD_INT 3
19499: DOUBLE
19500: EQUAL
19501: IFTRUE 19505
19503: GO 19516
19505: POP
// bc_type := b_lab ; 4 .. 9 :
19506: LD_ADDR_OWVAR 42
19510: PUSH
19511: LD_INT 6
19513: ST_TO_ADDR
19514: GO 20090
19516: LD_INT 4
19518: DOUBLE
19519: GREATEREQUAL
19520: IFFALSE 19528
19522: LD_INT 9
19524: DOUBLE
19525: LESSEQUAL
19526: IFTRUE 19530
19528: GO 19582
19530: POP
// begin bc_type := b_lab_half ;
19531: LD_ADDR_OWVAR 42
19535: PUSH
19536: LD_INT 7
19538: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19539: LD_ADDR_OWVAR 44
19543: PUSH
19544: LD_INT 10
19546: PUSH
19547: LD_INT 11
19549: PUSH
19550: LD_INT 12
19552: PUSH
19553: LD_INT 15
19555: PUSH
19556: LD_INT 14
19558: PUSH
19559: LD_INT 13
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: LIST
19566: LIST
19567: LIST
19568: LIST
19569: PUSH
19570: LD_VAR 0 2
19574: PUSH
19575: LD_INT 3
19577: MINUS
19578: ARRAY
19579: ST_TO_ADDR
// end ; 10 .. 13 :
19580: GO 20090
19582: LD_INT 10
19584: DOUBLE
19585: GREATEREQUAL
19586: IFFALSE 19594
19588: LD_INT 13
19590: DOUBLE
19591: LESSEQUAL
19592: IFTRUE 19596
19594: GO 19673
19596: POP
// begin bc_type := b_lab_full ;
19597: LD_ADDR_OWVAR 42
19601: PUSH
19602: LD_INT 8
19604: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19605: LD_ADDR_OWVAR 44
19609: PUSH
19610: LD_INT 10
19612: PUSH
19613: LD_INT 12
19615: PUSH
19616: LD_INT 14
19618: PUSH
19619: LD_INT 13
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: PUSH
19628: LD_VAR 0 2
19632: PUSH
19633: LD_INT 9
19635: MINUS
19636: ARRAY
19637: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19638: LD_ADDR_OWVAR 45
19642: PUSH
19643: LD_INT 11
19645: PUSH
19646: LD_INT 15
19648: PUSH
19649: LD_INT 12
19651: PUSH
19652: LD_INT 15
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: LIST
19659: LIST
19660: PUSH
19661: LD_VAR 0 2
19665: PUSH
19666: LD_INT 9
19668: MINUS
19669: ARRAY
19670: ST_TO_ADDR
// end ; 14 :
19671: GO 20090
19673: LD_INT 14
19675: DOUBLE
19676: EQUAL
19677: IFTRUE 19681
19679: GO 19692
19681: POP
// bc_type := b_workshop ; 15 :
19682: LD_ADDR_OWVAR 42
19686: PUSH
19687: LD_INT 2
19689: ST_TO_ADDR
19690: GO 20090
19692: LD_INT 15
19694: DOUBLE
19695: EQUAL
19696: IFTRUE 19700
19698: GO 19711
19700: POP
// bc_type := b_factory ; 16 :
19701: LD_ADDR_OWVAR 42
19705: PUSH
19706: LD_INT 3
19708: ST_TO_ADDR
19709: GO 20090
19711: LD_INT 16
19713: DOUBLE
19714: EQUAL
19715: IFTRUE 19719
19717: GO 19730
19719: POP
// bc_type := b_ext_gun ; 17 :
19720: LD_ADDR_OWVAR 42
19724: PUSH
19725: LD_INT 17
19727: ST_TO_ADDR
19728: GO 20090
19730: LD_INT 17
19732: DOUBLE
19733: EQUAL
19734: IFTRUE 19738
19736: GO 19766
19738: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19739: LD_ADDR_OWVAR 42
19743: PUSH
19744: LD_INT 19
19746: PUSH
19747: LD_INT 23
19749: PUSH
19750: LD_INT 19
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: PUSH
19758: LD_VAR 0 1
19762: ARRAY
19763: ST_TO_ADDR
19764: GO 20090
19766: LD_INT 18
19768: DOUBLE
19769: EQUAL
19770: IFTRUE 19774
19772: GO 19785
19774: POP
// bc_type := b_ext_radar ; 19 :
19775: LD_ADDR_OWVAR 42
19779: PUSH
19780: LD_INT 20
19782: ST_TO_ADDR
19783: GO 20090
19785: LD_INT 19
19787: DOUBLE
19788: EQUAL
19789: IFTRUE 19793
19791: GO 19804
19793: POP
// bc_type := b_ext_radio ; 20 :
19794: LD_ADDR_OWVAR 42
19798: PUSH
19799: LD_INT 22
19801: ST_TO_ADDR
19802: GO 20090
19804: LD_INT 20
19806: DOUBLE
19807: EQUAL
19808: IFTRUE 19812
19810: GO 19823
19812: POP
// bc_type := b_ext_siberium ; 21 :
19813: LD_ADDR_OWVAR 42
19817: PUSH
19818: LD_INT 21
19820: ST_TO_ADDR
19821: GO 20090
19823: LD_INT 21
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19842
19831: POP
// bc_type := b_ext_computer ; 22 :
19832: LD_ADDR_OWVAR 42
19836: PUSH
19837: LD_INT 24
19839: ST_TO_ADDR
19840: GO 20090
19842: LD_INT 22
19844: DOUBLE
19845: EQUAL
19846: IFTRUE 19850
19848: GO 19861
19850: POP
// bc_type := b_ext_track ; 23 :
19851: LD_ADDR_OWVAR 42
19855: PUSH
19856: LD_INT 16
19858: ST_TO_ADDR
19859: GO 20090
19861: LD_INT 23
19863: DOUBLE
19864: EQUAL
19865: IFTRUE 19869
19867: GO 19880
19869: POP
// bc_type := b_ext_laser ; 24 :
19870: LD_ADDR_OWVAR 42
19874: PUSH
19875: LD_INT 25
19877: ST_TO_ADDR
19878: GO 20090
19880: LD_INT 24
19882: DOUBLE
19883: EQUAL
19884: IFTRUE 19888
19886: GO 19899
19888: POP
// bc_type := b_control_tower ; 25 :
19889: LD_ADDR_OWVAR 42
19893: PUSH
19894: LD_INT 36
19896: ST_TO_ADDR
19897: GO 20090
19899: LD_INT 25
19901: DOUBLE
19902: EQUAL
19903: IFTRUE 19907
19905: GO 19918
19907: POP
// bc_type := b_breastwork ; 26 :
19908: LD_ADDR_OWVAR 42
19912: PUSH
19913: LD_INT 31
19915: ST_TO_ADDR
19916: GO 20090
19918: LD_INT 26
19920: DOUBLE
19921: EQUAL
19922: IFTRUE 19926
19924: GO 19937
19926: POP
// bc_type := b_bunker ; 27 :
19927: LD_ADDR_OWVAR 42
19931: PUSH
19932: LD_INT 32
19934: ST_TO_ADDR
19935: GO 20090
19937: LD_INT 27
19939: DOUBLE
19940: EQUAL
19941: IFTRUE 19945
19943: GO 19956
19945: POP
// bc_type := b_turret ; 28 :
19946: LD_ADDR_OWVAR 42
19950: PUSH
19951: LD_INT 33
19953: ST_TO_ADDR
19954: GO 20090
19956: LD_INT 28
19958: DOUBLE
19959: EQUAL
19960: IFTRUE 19964
19962: GO 19975
19964: POP
// bc_type := b_armoury ; 29 :
19965: LD_ADDR_OWVAR 42
19969: PUSH
19970: LD_INT 4
19972: ST_TO_ADDR
19973: GO 20090
19975: LD_INT 29
19977: DOUBLE
19978: EQUAL
19979: IFTRUE 19983
19981: GO 19994
19983: POP
// bc_type := b_barracks ; 30 :
19984: LD_ADDR_OWVAR 42
19988: PUSH
19989: LD_INT 5
19991: ST_TO_ADDR
19992: GO 20090
19994: LD_INT 30
19996: DOUBLE
19997: EQUAL
19998: IFTRUE 20002
20000: GO 20013
20002: POP
// bc_type := b_solar_power ; 31 :
20003: LD_ADDR_OWVAR 42
20007: PUSH
20008: LD_INT 27
20010: ST_TO_ADDR
20011: GO 20090
20013: LD_INT 31
20015: DOUBLE
20016: EQUAL
20017: IFTRUE 20021
20019: GO 20032
20021: POP
// bc_type := b_oil_power ; 32 :
20022: LD_ADDR_OWVAR 42
20026: PUSH
20027: LD_INT 26
20029: ST_TO_ADDR
20030: GO 20090
20032: LD_INT 32
20034: DOUBLE
20035: EQUAL
20036: IFTRUE 20040
20038: GO 20051
20040: POP
// bc_type := b_siberite_power ; 33 :
20041: LD_ADDR_OWVAR 42
20045: PUSH
20046: LD_INT 28
20048: ST_TO_ADDR
20049: GO 20090
20051: LD_INT 33
20053: DOUBLE
20054: EQUAL
20055: IFTRUE 20059
20057: GO 20070
20059: POP
// bc_type := b_oil_mine ; 34 :
20060: LD_ADDR_OWVAR 42
20064: PUSH
20065: LD_INT 29
20067: ST_TO_ADDR
20068: GO 20090
20070: LD_INT 34
20072: DOUBLE
20073: EQUAL
20074: IFTRUE 20078
20076: GO 20089
20078: POP
// bc_type := b_siberite_mine ; end ;
20079: LD_ADDR_OWVAR 42
20083: PUSH
20084: LD_INT 30
20086: ST_TO_ADDR
20087: GO 20090
20089: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20090: LD_ADDR_VAR 0 8
20094: PUSH
20095: LD_VAR 0 5
20099: PPUSH
20100: LD_VAR 0 6
20104: PPUSH
20105: LD_VAR 0 3
20109: PPUSH
20110: CALL_OW 47
20114: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20115: LD_OWVAR 42
20119: PUSH
20120: LD_INT 32
20122: PUSH
20123: LD_INT 33
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: IN
20130: IFFALSE 20146
// PlaceWeaponTurret ( b , weapon ) ;
20132: LD_VAR 0 8
20136: PPUSH
20137: LD_VAR 0 4
20141: PPUSH
20142: CALL_OW 431
// end ;
20146: LD_VAR 0 7
20150: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20151: LD_INT 0
20153: PPUSH
20154: PPUSH
20155: PPUSH
20156: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20157: LD_ADDR_VAR 0 4
20161: PUSH
20162: LD_INT 22
20164: PUSH
20165: LD_OWVAR 2
20169: PUSH
20170: EMPTY
20171: LIST
20172: LIST
20173: PUSH
20174: LD_INT 2
20176: PUSH
20177: LD_INT 30
20179: PUSH
20180: LD_INT 0
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 30
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PPUSH
20206: CALL_OW 69
20210: ST_TO_ADDR
// if not tmp then
20211: LD_VAR 0 4
20215: NOT
20216: IFFALSE 20220
// exit ;
20218: GO 20279
// for i in tmp do
20220: LD_ADDR_VAR 0 2
20224: PUSH
20225: LD_VAR 0 4
20229: PUSH
20230: FOR_IN
20231: IFFALSE 20277
// for j = 1 to 3 do
20233: LD_ADDR_VAR 0 3
20237: PUSH
20238: DOUBLE
20239: LD_INT 1
20241: DEC
20242: ST_TO_ADDR
20243: LD_INT 3
20245: PUSH
20246: FOR_TO
20247: IFFALSE 20273
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20249: LD_VAR 0 2
20253: PPUSH
20254: CALL_OW 274
20258: PPUSH
20259: LD_VAR 0 3
20263: PPUSH
20264: LD_INT 99999
20266: PPUSH
20267: CALL_OW 277
20271: GO 20246
20273: POP
20274: POP
20275: GO 20230
20277: POP
20278: POP
// end ;
20279: LD_VAR 0 1
20283: RET
// export function hHackSetLevel10 ; var i , j ; begin
20284: LD_INT 0
20286: PPUSH
20287: PPUSH
20288: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20289: LD_ADDR_VAR 0 2
20293: PUSH
20294: LD_INT 21
20296: PUSH
20297: LD_INT 1
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: PPUSH
20304: CALL_OW 69
20308: PUSH
20309: FOR_IN
20310: IFFALSE 20362
// if IsSelected ( i ) then
20312: LD_VAR 0 2
20316: PPUSH
20317: CALL_OW 306
20321: IFFALSE 20360
// begin for j := 1 to 4 do
20323: LD_ADDR_VAR 0 3
20327: PUSH
20328: DOUBLE
20329: LD_INT 1
20331: DEC
20332: ST_TO_ADDR
20333: LD_INT 4
20335: PUSH
20336: FOR_TO
20337: IFFALSE 20358
// SetSkill ( i , j , 10 ) ;
20339: LD_VAR 0 2
20343: PPUSH
20344: LD_VAR 0 3
20348: PPUSH
20349: LD_INT 10
20351: PPUSH
20352: CALL_OW 237
20356: GO 20336
20358: POP
20359: POP
// end ;
20360: GO 20309
20362: POP
20363: POP
// end ;
20364: LD_VAR 0 1
20368: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20369: LD_INT 0
20371: PPUSH
20372: PPUSH
20373: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20374: LD_ADDR_VAR 0 2
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_OWVAR 2
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: PUSH
20391: LD_INT 21
20393: PUSH
20394: LD_INT 1
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PPUSH
20405: CALL_OW 69
20409: PUSH
20410: FOR_IN
20411: IFFALSE 20452
// begin for j := 1 to 4 do
20413: LD_ADDR_VAR 0 3
20417: PUSH
20418: DOUBLE
20419: LD_INT 1
20421: DEC
20422: ST_TO_ADDR
20423: LD_INT 4
20425: PUSH
20426: FOR_TO
20427: IFFALSE 20448
// SetSkill ( i , j , 10 ) ;
20429: LD_VAR 0 2
20433: PPUSH
20434: LD_VAR 0 3
20438: PPUSH
20439: LD_INT 10
20441: PPUSH
20442: CALL_OW 237
20446: GO 20426
20448: POP
20449: POP
// end ;
20450: GO 20410
20452: POP
20453: POP
// end ;
20454: LD_VAR 0 1
20458: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20459: LD_INT 0
20461: PPUSH
// uc_side := your_side ;
20462: LD_ADDR_OWVAR 20
20466: PUSH
20467: LD_OWVAR 2
20471: ST_TO_ADDR
// uc_nation := nation ;
20472: LD_ADDR_OWVAR 21
20476: PUSH
20477: LD_VAR 0 1
20481: ST_TO_ADDR
// InitHc ;
20482: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20486: LD_INT 0
20488: PPUSH
20489: LD_VAR 0 2
20493: PPUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20503: LD_VAR 0 4
20507: PPUSH
20508: LD_VAR 0 5
20512: PPUSH
20513: CALL_OW 428
20517: PUSH
20518: LD_INT 0
20520: EQUAL
20521: IFFALSE 20545
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20523: CALL_OW 44
20527: PPUSH
20528: LD_VAR 0 4
20532: PPUSH
20533: LD_VAR 0 5
20537: PPUSH
20538: LD_INT 1
20540: PPUSH
20541: CALL_OW 48
// end ;
20545: LD_VAR 0 6
20549: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20550: LD_INT 0
20552: PPUSH
20553: PPUSH
// uc_side := your_side ;
20554: LD_ADDR_OWVAR 20
20558: PUSH
20559: LD_OWVAR 2
20563: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20564: LD_VAR 0 1
20568: PUSH
20569: LD_INT 1
20571: PUSH
20572: LD_INT 2
20574: PUSH
20575: LD_INT 3
20577: PUSH
20578: LD_INT 4
20580: PUSH
20581: LD_INT 5
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: IN
20591: IFFALSE 20603
// uc_nation := nation_american else
20593: LD_ADDR_OWVAR 21
20597: PUSH
20598: LD_INT 1
20600: ST_TO_ADDR
20601: GO 20646
// if chassis in [ 11 , 12 , 13 , 14 ] then
20603: LD_VAR 0 1
20607: PUSH
20608: LD_INT 11
20610: PUSH
20611: LD_INT 12
20613: PUSH
20614: LD_INT 13
20616: PUSH
20617: LD_INT 14
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: IN
20626: IFFALSE 20638
// uc_nation := nation_arabian else
20628: LD_ADDR_OWVAR 21
20632: PUSH
20633: LD_INT 2
20635: ST_TO_ADDR
20636: GO 20646
// uc_nation := nation_russian ;
20638: LD_ADDR_OWVAR 21
20642: PUSH
20643: LD_INT 3
20645: ST_TO_ADDR
// vc_chassis := chassis ;
20646: LD_ADDR_OWVAR 37
20650: PUSH
20651: LD_VAR 0 1
20655: ST_TO_ADDR
// vc_engine := engine ;
20656: LD_ADDR_OWVAR 39
20660: PUSH
20661: LD_VAR 0 2
20665: ST_TO_ADDR
// vc_control := control ;
20666: LD_ADDR_OWVAR 38
20670: PUSH
20671: LD_VAR 0 3
20675: ST_TO_ADDR
// vc_weapon := weapon ;
20676: LD_ADDR_OWVAR 40
20680: PUSH
20681: LD_VAR 0 4
20685: ST_TO_ADDR
// un := CreateVehicle ;
20686: LD_ADDR_VAR 0 8
20690: PUSH
20691: CALL_OW 45
20695: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20696: LD_VAR 0 8
20700: PPUSH
20701: LD_INT 0
20703: PPUSH
20704: LD_INT 5
20706: PPUSH
20707: CALL_OW 12
20711: PPUSH
20712: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20716: LD_VAR 0 8
20720: PPUSH
20721: LD_VAR 0 5
20725: PPUSH
20726: LD_VAR 0 6
20730: PPUSH
20731: LD_INT 1
20733: PPUSH
20734: CALL_OW 48
// end ;
20738: LD_VAR 0 7
20742: RET
// export hInvincible ; every 1 do
20743: GO 20745
20745: DISABLE
// hInvincible := [ ] ;
20746: LD_ADDR_EXP 100
20750: PUSH
20751: EMPTY
20752: ST_TO_ADDR
20753: END
// every 10 do var i ;
20754: GO 20756
20756: DISABLE
20757: LD_INT 0
20759: PPUSH
// begin enable ;
20760: ENABLE
// if not hInvincible then
20761: LD_EXP 100
20765: NOT
20766: IFFALSE 20770
// exit ;
20768: GO 20814
// for i in hInvincible do
20770: LD_ADDR_VAR 0 1
20774: PUSH
20775: LD_EXP 100
20779: PUSH
20780: FOR_IN
20781: IFFALSE 20812
// if GetLives ( i ) < 1000 then
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 256
20792: PUSH
20793: LD_INT 1000
20795: LESS
20796: IFFALSE 20810
// SetLives ( i , 1000 ) ;
20798: LD_VAR 0 1
20802: PPUSH
20803: LD_INT 1000
20805: PPUSH
20806: CALL_OW 234
20810: GO 20780
20812: POP
20813: POP
// end ;
20814: PPOPN 1
20816: END
// export function hHackInvincible ; var i ; begin
20817: LD_INT 0
20819: PPUSH
20820: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20821: LD_ADDR_VAR 0 2
20825: PUSH
20826: LD_INT 2
20828: PUSH
20829: LD_INT 21
20831: PUSH
20832: LD_INT 1
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: LD_INT 21
20841: PUSH
20842: LD_INT 2
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: PUSH
20859: FOR_IN
20860: IFFALSE 20921
// if IsSelected ( i ) then
20862: LD_VAR 0 2
20866: PPUSH
20867: CALL_OW 306
20871: IFFALSE 20919
// begin if i in hInvincible then
20873: LD_VAR 0 2
20877: PUSH
20878: LD_EXP 100
20882: IN
20883: IFFALSE 20903
// hInvincible := hInvincible diff i else
20885: LD_ADDR_EXP 100
20889: PUSH
20890: LD_EXP 100
20894: PUSH
20895: LD_VAR 0 2
20899: DIFF
20900: ST_TO_ADDR
20901: GO 20919
// hInvincible := hInvincible union i ;
20903: LD_ADDR_EXP 100
20907: PUSH
20908: LD_EXP 100
20912: PUSH
20913: LD_VAR 0 2
20917: UNION
20918: ST_TO_ADDR
// end ;
20919: GO 20859
20921: POP
20922: POP
// end ;
20923: LD_VAR 0 1
20927: RET
// export function hHackInvisible ; var i , j ; begin
20928: LD_INT 0
20930: PPUSH
20931: PPUSH
20932: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20933: LD_ADDR_VAR 0 2
20937: PUSH
20938: LD_INT 21
20940: PUSH
20941: LD_INT 1
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PPUSH
20948: CALL_OW 69
20952: PUSH
20953: FOR_IN
20954: IFFALSE 20978
// if IsSelected ( i ) then
20956: LD_VAR 0 2
20960: PPUSH
20961: CALL_OW 306
20965: IFFALSE 20976
// ComForceInvisible ( i ) ;
20967: LD_VAR 0 2
20971: PPUSH
20972: CALL_OW 496
20976: GO 20953
20978: POP
20979: POP
// end ;
20980: LD_VAR 0 1
20984: RET
// export function hHackChangeYourSide ; begin
20985: LD_INT 0
20987: PPUSH
// if your_side = 8 then
20988: LD_OWVAR 2
20992: PUSH
20993: LD_INT 8
20995: EQUAL
20996: IFFALSE 21008
// your_side := 0 else
20998: LD_ADDR_OWVAR 2
21002: PUSH
21003: LD_INT 0
21005: ST_TO_ADDR
21006: GO 21022
// your_side := your_side + 1 ;
21008: LD_ADDR_OWVAR 2
21012: PUSH
21013: LD_OWVAR 2
21017: PUSH
21018: LD_INT 1
21020: PLUS
21021: ST_TO_ADDR
// end ;
21022: LD_VAR 0 1
21026: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21027: LD_INT 0
21029: PPUSH
21030: PPUSH
21031: PPUSH
// for i in all_units do
21032: LD_ADDR_VAR 0 2
21036: PUSH
21037: LD_OWVAR 3
21041: PUSH
21042: FOR_IN
21043: IFFALSE 21121
// if IsSelected ( i ) then
21045: LD_VAR 0 2
21049: PPUSH
21050: CALL_OW 306
21054: IFFALSE 21119
// begin j := GetSide ( i ) ;
21056: LD_ADDR_VAR 0 3
21060: PUSH
21061: LD_VAR 0 2
21065: PPUSH
21066: CALL_OW 255
21070: ST_TO_ADDR
// if j = 8 then
21071: LD_VAR 0 3
21075: PUSH
21076: LD_INT 8
21078: EQUAL
21079: IFFALSE 21091
// j := 0 else
21081: LD_ADDR_VAR 0 3
21085: PUSH
21086: LD_INT 0
21088: ST_TO_ADDR
21089: GO 21105
// j := j + 1 ;
21091: LD_ADDR_VAR 0 3
21095: PUSH
21096: LD_VAR 0 3
21100: PUSH
21101: LD_INT 1
21103: PLUS
21104: ST_TO_ADDR
// SetSide ( i , j ) ;
21105: LD_VAR 0 2
21109: PPUSH
21110: LD_VAR 0 3
21114: PPUSH
21115: CALL_OW 235
// end ;
21119: GO 21042
21121: POP
21122: POP
// end ;
21123: LD_VAR 0 1
21127: RET
// export function hHackFog ; begin
21128: LD_INT 0
21130: PPUSH
// FogOff ( true ) ;
21131: LD_INT 1
21133: PPUSH
21134: CALL_OW 344
// end ;
21138: LD_VAR 0 1
21142: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21143: LD_INT 0
21145: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21146: LD_VAR 0 1
21150: PPUSH
21151: LD_VAR 0 2
21155: PPUSH
21156: LD_VAR 0 3
21160: PPUSH
21161: LD_INT 1
21163: PPUSH
21164: LD_INT 1
21166: PPUSH
21167: CALL_OW 483
// CenterOnXY ( x , y ) ;
21171: LD_VAR 0 2
21175: PPUSH
21176: LD_VAR 0 3
21180: PPUSH
21181: CALL_OW 84
// end ; end_of_file
21185: LD_VAR 0 4
21189: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21190: LD_INT 0
21192: PPUSH
21193: PPUSH
21194: PPUSH
21195: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21196: LD_VAR 0 1
21200: PPUSH
21201: CALL_OW 264
21205: PUSH
21206: LD_EXP 28
21210: EQUAL
21211: IFFALSE 21283
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21213: LD_INT 68
21215: PPUSH
21216: LD_VAR 0 1
21220: PPUSH
21221: CALL_OW 255
21225: PPUSH
21226: CALL_OW 321
21230: PUSH
21231: LD_INT 2
21233: EQUAL
21234: IFFALSE 21246
// eff := 70 else
21236: LD_ADDR_VAR 0 4
21240: PUSH
21241: LD_INT 70
21243: ST_TO_ADDR
21244: GO 21254
// eff := 30 ;
21246: LD_ADDR_VAR 0 4
21250: PUSH
21251: LD_INT 30
21253: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21254: LD_VAR 0 1
21258: PPUSH
21259: CALL_OW 250
21263: PPUSH
21264: LD_VAR 0 1
21268: PPUSH
21269: CALL_OW 251
21273: PPUSH
21274: LD_VAR 0 4
21278: PPUSH
21279: CALL_OW 495
// end ; end ;
21283: LD_VAR 0 2
21287: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21288: LD_INT 0
21290: PPUSH
// end ;
21291: LD_VAR 0 4
21295: RET
// export function SOS_Command ( cmd ) ; begin
21296: LD_INT 0
21298: PPUSH
// end ;
21299: LD_VAR 0 2
21303: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21304: LD_INT 0
21306: PPUSH
// end ;
21307: LD_VAR 0 6
21311: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
21312: LD_INT 0
21314: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
21315: LD_VAR 0 1
21319: PUSH
21320: LD_INT 250
21322: EQUAL
21323: PUSH
21324: LD_VAR 0 2
21328: PPUSH
21329: CALL_OW 264
21333: PUSH
21334: LD_EXP 31
21338: EQUAL
21339: AND
21340: IFFALSE 21361
// MinerPlaceMine ( unit , x , y ) ;
21342: LD_VAR 0 2
21346: PPUSH
21347: LD_VAR 0 4
21351: PPUSH
21352: LD_VAR 0 5
21356: PPUSH
21357: CALL 23710 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21361: LD_VAR 0 1
21365: PUSH
21366: LD_INT 251
21368: EQUAL
21369: PUSH
21370: LD_VAR 0 2
21374: PPUSH
21375: CALL_OW 264
21379: PUSH
21380: LD_EXP 31
21384: EQUAL
21385: AND
21386: IFFALSE 21407
// MinerDetonateMine ( unit , x , y ) ;
21388: LD_VAR 0 2
21392: PPUSH
21393: LD_VAR 0 4
21397: PPUSH
21398: LD_VAR 0 5
21402: PPUSH
21403: CALL 23987 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21407: LD_VAR 0 1
21411: PUSH
21412: LD_INT 252
21414: EQUAL
21415: PUSH
21416: LD_VAR 0 2
21420: PPUSH
21421: CALL_OW 264
21425: PUSH
21426: LD_EXP 31
21430: EQUAL
21431: AND
21432: IFFALSE 21453
// MinerCreateMinefield ( unit , x , y ) ;
21434: LD_VAR 0 2
21438: PPUSH
21439: LD_VAR 0 4
21443: PPUSH
21444: LD_VAR 0 5
21448: PPUSH
21449: CALL 24404 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21453: LD_VAR 0 1
21457: PUSH
21458: LD_INT 253
21460: EQUAL
21461: PUSH
21462: LD_VAR 0 2
21466: PPUSH
21467: CALL_OW 257
21471: PUSH
21472: LD_INT 5
21474: EQUAL
21475: AND
21476: IFFALSE 21497
// ComBinocular ( unit , x , y ) ;
21478: LD_VAR 0 2
21482: PPUSH
21483: LD_VAR 0 4
21487: PPUSH
21488: LD_VAR 0 5
21492: PPUSH
21493: CALL 24775 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21497: LD_VAR 0 1
21501: PUSH
21502: LD_INT 254
21504: EQUAL
21505: PUSH
21506: LD_VAR 0 2
21510: PPUSH
21511: CALL_OW 264
21515: PUSH
21516: LD_EXP 26
21520: EQUAL
21521: AND
21522: PUSH
21523: LD_VAR 0 3
21527: PPUSH
21528: CALL_OW 263
21532: PUSH
21533: LD_INT 3
21535: EQUAL
21536: AND
21537: IFFALSE 21553
// HackDestroyVehicle ( unit , selectedUnit ) ;
21539: LD_VAR 0 2
21543: PPUSH
21544: LD_VAR 0 3
21548: PPUSH
21549: CALL 23070 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21553: LD_VAR 0 1
21557: PUSH
21558: LD_INT 255
21560: EQUAL
21561: PUSH
21562: LD_VAR 0 2
21566: PPUSH
21567: CALL_OW 264
21571: PUSH
21572: LD_INT 14
21574: PUSH
21575: LD_INT 53
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: IN
21582: AND
21583: PUSH
21584: LD_VAR 0 4
21588: PPUSH
21589: LD_VAR 0 5
21593: PPUSH
21594: CALL_OW 488
21598: AND
21599: IFFALSE 21623
// CutTreeXYR ( unit , x , y , 12 ) ;
21601: LD_VAR 0 2
21605: PPUSH
21606: LD_VAR 0 4
21610: PPUSH
21611: LD_VAR 0 5
21615: PPUSH
21616: LD_INT 12
21618: PPUSH
21619: CALL 21636 0 4
// end ;
21623: LD_VAR 0 6
21627: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
21628: LD_INT 0
21630: PPUSH
// end ;
21631: LD_VAR 0 4
21635: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21636: LD_INT 0
21638: PPUSH
21639: PPUSH
21640: PPUSH
21641: PPUSH
21642: PPUSH
21643: PPUSH
21644: PPUSH
21645: PPUSH
21646: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
21647: LD_VAR 0 1
21651: NOT
21652: PUSH
21653: LD_VAR 0 2
21657: PPUSH
21658: LD_VAR 0 3
21662: PPUSH
21663: CALL_OW 488
21667: NOT
21668: OR
21669: PUSH
21670: LD_VAR 0 4
21674: NOT
21675: OR
21676: IFFALSE 21680
// exit ;
21678: GO 22020
// list := [ ] ;
21680: LD_ADDR_VAR 0 13
21684: PUSH
21685: EMPTY
21686: ST_TO_ADDR
// if x - r < 0 then
21687: LD_VAR 0 2
21691: PUSH
21692: LD_VAR 0 4
21696: MINUS
21697: PUSH
21698: LD_INT 0
21700: LESS
21701: IFFALSE 21713
// min_x := 0 else
21703: LD_ADDR_VAR 0 7
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
21711: GO 21729
// min_x := x - r ;
21713: LD_ADDR_VAR 0 7
21717: PUSH
21718: LD_VAR 0 2
21722: PUSH
21723: LD_VAR 0 4
21727: MINUS
21728: ST_TO_ADDR
// if y - r < 0 then
21729: LD_VAR 0 3
21733: PUSH
21734: LD_VAR 0 4
21738: MINUS
21739: PUSH
21740: LD_INT 0
21742: LESS
21743: IFFALSE 21755
// min_y := 0 else
21745: LD_ADDR_VAR 0 8
21749: PUSH
21750: LD_INT 0
21752: ST_TO_ADDR
21753: GO 21771
// min_y := y - r ;
21755: LD_ADDR_VAR 0 8
21759: PUSH
21760: LD_VAR 0 3
21764: PUSH
21765: LD_VAR 0 4
21769: MINUS
21770: ST_TO_ADDR
// max_x := x + r ;
21771: LD_ADDR_VAR 0 9
21775: PUSH
21776: LD_VAR 0 2
21780: PUSH
21781: LD_VAR 0 4
21785: PLUS
21786: ST_TO_ADDR
// max_y := y + r ;
21787: LD_ADDR_VAR 0 10
21791: PUSH
21792: LD_VAR 0 3
21796: PUSH
21797: LD_VAR 0 4
21801: PLUS
21802: ST_TO_ADDR
// for _x = min_x to max_x do
21803: LD_ADDR_VAR 0 11
21807: PUSH
21808: DOUBLE
21809: LD_VAR 0 7
21813: DEC
21814: ST_TO_ADDR
21815: LD_VAR 0 9
21819: PUSH
21820: FOR_TO
21821: IFFALSE 21938
// for _y = min_y to max_y do
21823: LD_ADDR_VAR 0 12
21827: PUSH
21828: DOUBLE
21829: LD_VAR 0 8
21833: DEC
21834: ST_TO_ADDR
21835: LD_VAR 0 10
21839: PUSH
21840: FOR_TO
21841: IFFALSE 21934
// begin if not ValidHex ( _x , _y ) then
21843: LD_VAR 0 11
21847: PPUSH
21848: LD_VAR 0 12
21852: PPUSH
21853: CALL_OW 488
21857: NOT
21858: IFFALSE 21862
// continue ;
21860: GO 21840
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21862: LD_VAR 0 11
21866: PPUSH
21867: LD_VAR 0 12
21871: PPUSH
21872: CALL_OW 351
21876: PUSH
21877: LD_VAR 0 11
21881: PPUSH
21882: LD_VAR 0 12
21886: PPUSH
21887: CALL_OW 554
21891: AND
21892: IFFALSE 21932
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21894: LD_ADDR_VAR 0 13
21898: PUSH
21899: LD_VAR 0 13
21903: PPUSH
21904: LD_VAR 0 13
21908: PUSH
21909: LD_INT 1
21911: PLUS
21912: PPUSH
21913: LD_VAR 0 11
21917: PUSH
21918: LD_VAR 0 12
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: PPUSH
21927: CALL_OW 2
21931: ST_TO_ADDR
// end ;
21932: GO 21840
21934: POP
21935: POP
21936: GO 21820
21938: POP
21939: POP
// if not list then
21940: LD_VAR 0 13
21944: NOT
21945: IFFALSE 21949
// exit ;
21947: GO 22020
// for i in list do
21949: LD_ADDR_VAR 0 6
21953: PUSH
21954: LD_VAR 0 13
21958: PUSH
21959: FOR_IN
21960: IFFALSE 22018
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21962: LD_VAR 0 1
21966: PPUSH
21967: LD_STRING M
21969: PUSH
21970: LD_VAR 0 6
21974: PUSH
21975: LD_INT 1
21977: ARRAY
21978: PUSH
21979: LD_VAR 0 6
21983: PUSH
21984: LD_INT 2
21986: ARRAY
21987: PUSH
21988: LD_INT 0
21990: PUSH
21991: LD_INT 0
21993: PUSH
21994: LD_INT 0
21996: PUSH
21997: LD_INT 0
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: PUSH
22009: EMPTY
22010: LIST
22011: PPUSH
22012: CALL_OW 447
22016: GO 21959
22018: POP
22019: POP
// end ;
22020: LD_VAR 0 5
22024: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22025: LD_EXP 103
22029: NOT
22030: IFFALSE 22080
22032: GO 22034
22034: DISABLE
// begin initHack := true ;
22035: LD_ADDR_EXP 103
22039: PUSH
22040: LD_INT 1
22042: ST_TO_ADDR
// hackTanks := [ ] ;
22043: LD_ADDR_EXP 104
22047: PUSH
22048: EMPTY
22049: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22050: LD_ADDR_EXP 105
22054: PUSH
22055: EMPTY
22056: ST_TO_ADDR
// hackLimit := 3 ;
22057: LD_ADDR_EXP 106
22061: PUSH
22062: LD_INT 3
22064: ST_TO_ADDR
// hackDist := 12 ;
22065: LD_ADDR_EXP 107
22069: PUSH
22070: LD_INT 12
22072: ST_TO_ADDR
// hackCounter := [ ] ;
22073: LD_ADDR_EXP 108
22077: PUSH
22078: EMPTY
22079: ST_TO_ADDR
// end ;
22080: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22081: LD_EXP 103
22085: PUSH
22086: LD_INT 34
22088: PUSH
22089: LD_EXP 26
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PPUSH
22098: CALL_OW 69
22102: AND
22103: IFFALSE 22358
22105: GO 22107
22107: DISABLE
22108: LD_INT 0
22110: PPUSH
22111: PPUSH
// begin enable ;
22112: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22113: LD_ADDR_VAR 0 1
22117: PUSH
22118: LD_INT 34
22120: PUSH
22121: LD_EXP 26
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PPUSH
22130: CALL_OW 69
22134: PUSH
22135: FOR_IN
22136: IFFALSE 22356
// begin if not i in hackTanks then
22138: LD_VAR 0 1
22142: PUSH
22143: LD_EXP 104
22147: IN
22148: NOT
22149: IFFALSE 22232
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22151: LD_ADDR_EXP 104
22155: PUSH
22156: LD_EXP 104
22160: PPUSH
22161: LD_EXP 104
22165: PUSH
22166: LD_INT 1
22168: PLUS
22169: PPUSH
22170: LD_VAR 0 1
22174: PPUSH
22175: CALL_OW 1
22179: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22180: LD_ADDR_EXP 105
22184: PUSH
22185: LD_EXP 105
22189: PPUSH
22190: LD_EXP 105
22194: PUSH
22195: LD_INT 1
22197: PLUS
22198: PPUSH
22199: EMPTY
22200: PPUSH
22201: CALL_OW 1
22205: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22206: LD_ADDR_EXP 108
22210: PUSH
22211: LD_EXP 108
22215: PPUSH
22216: LD_EXP 108
22220: PUSH
22221: LD_INT 1
22223: PLUS
22224: PPUSH
22225: EMPTY
22226: PPUSH
22227: CALL_OW 1
22231: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 302
22241: NOT
22242: IFFALSE 22255
// begin HackUnlinkAll ( i ) ;
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL 22361 0 1
// continue ;
22253: GO 22135
// end ; HackCheckCapturedStatus ( i ) ;
22255: LD_VAR 0 1
22259: PPUSH
22260: CALL 22804 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22264: LD_ADDR_VAR 0 2
22268: PUSH
22269: LD_INT 81
22271: PUSH
22272: LD_VAR 0 1
22276: PPUSH
22277: CALL_OW 255
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 33
22288: PUSH
22289: LD_INT 3
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 91
22298: PUSH
22299: LD_VAR 0 1
22303: PUSH
22304: LD_EXP 107
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 50
22316: PUSH
22317: EMPTY
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 69
22330: ST_TO_ADDR
// if not tmp then
22331: LD_VAR 0 2
22335: NOT
22336: IFFALSE 22340
// continue ;
22338: GO 22135
// HackLink ( i , tmp ) ;
22340: LD_VAR 0 1
22344: PPUSH
22345: LD_VAR 0 2
22349: PPUSH
22350: CALL 22497 0 2
// end ;
22354: GO 22135
22356: POP
22357: POP
// end ;
22358: PPOPN 2
22360: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22361: LD_INT 0
22363: PPUSH
22364: PPUSH
22365: PPUSH
// if not hack in hackTanks then
22366: LD_VAR 0 1
22370: PUSH
22371: LD_EXP 104
22375: IN
22376: NOT
22377: IFFALSE 22381
// exit ;
22379: GO 22492
// index := GetElementIndex ( hackTanks , hack ) ;
22381: LD_ADDR_VAR 0 4
22385: PUSH
22386: LD_EXP 104
22390: PPUSH
22391: LD_VAR 0 1
22395: PPUSH
22396: CALL 29966 0 2
22400: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22401: LD_EXP 105
22405: PUSH
22406: LD_VAR 0 4
22410: ARRAY
22411: IFFALSE 22492
// begin for i in hackTanksCaptured [ index ] do
22413: LD_ADDR_VAR 0 3
22417: PUSH
22418: LD_EXP 105
22422: PUSH
22423: LD_VAR 0 4
22427: ARRAY
22428: PUSH
22429: FOR_IN
22430: IFFALSE 22456
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22432: LD_VAR 0 3
22436: PUSH
22437: LD_INT 1
22439: ARRAY
22440: PPUSH
22441: LD_VAR 0 3
22445: PUSH
22446: LD_INT 2
22448: ARRAY
22449: PPUSH
22450: CALL_OW 235
22454: GO 22429
22456: POP
22457: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22458: LD_ADDR_EXP 105
22462: PUSH
22463: LD_EXP 105
22467: PPUSH
22468: LD_VAR 0 4
22472: PPUSH
22473: EMPTY
22474: PPUSH
22475: CALL_OW 1
22479: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22480: LD_VAR 0 1
22484: PPUSH
22485: LD_INT 0
22487: PPUSH
22488: CALL_OW 505
// end ; end ;
22492: LD_VAR 0 2
22496: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22497: LD_INT 0
22499: PPUSH
22500: PPUSH
22501: PPUSH
// if not hack in hackTanks or not vehicles then
22502: LD_VAR 0 1
22506: PUSH
22507: LD_EXP 104
22511: IN
22512: NOT
22513: PUSH
22514: LD_VAR 0 2
22518: NOT
22519: OR
22520: IFFALSE 22524
// exit ;
22522: GO 22799
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22524: LD_ADDR_VAR 0 2
22528: PUSH
22529: LD_VAR 0 1
22533: PPUSH
22534: LD_VAR 0 2
22538: PPUSH
22539: LD_INT 1
22541: PPUSH
22542: LD_INT 1
22544: PPUSH
22545: CALL 30616 0 4
22549: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22550: LD_ADDR_VAR 0 5
22554: PUSH
22555: LD_EXP 104
22559: PPUSH
22560: LD_VAR 0 1
22564: PPUSH
22565: CALL 29966 0 2
22569: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22570: LD_EXP 105
22574: PUSH
22575: LD_VAR 0 5
22579: ARRAY
22580: PUSH
22581: LD_EXP 106
22585: LESS
22586: IFFALSE 22775
// begin for i := 1 to vehicles do
22588: LD_ADDR_VAR 0 4
22592: PUSH
22593: DOUBLE
22594: LD_INT 1
22596: DEC
22597: ST_TO_ADDR
22598: LD_VAR 0 2
22602: PUSH
22603: FOR_TO
22604: IFFALSE 22773
// begin if hackTanksCaptured [ index ] = hackLimit then
22606: LD_EXP 105
22610: PUSH
22611: LD_VAR 0 5
22615: ARRAY
22616: PUSH
22617: LD_EXP 106
22621: EQUAL
22622: IFFALSE 22626
// break ;
22624: GO 22773
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
22626: LD_ADDR_EXP 108
22630: PUSH
22631: LD_EXP 108
22635: PPUSH
22636: LD_VAR 0 5
22640: PPUSH
22641: LD_EXP 108
22645: PUSH
22646: LD_VAR 0 5
22650: ARRAY
22651: PUSH
22652: LD_INT 1
22654: PLUS
22655: PPUSH
22656: CALL_OW 1
22660: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
22661: LD_ADDR_EXP 105
22665: PUSH
22666: LD_EXP 105
22670: PPUSH
22671: LD_VAR 0 5
22675: PUSH
22676: LD_EXP 105
22680: PUSH
22681: LD_VAR 0 5
22685: ARRAY
22686: PUSH
22687: LD_INT 1
22689: PLUS
22690: PUSH
22691: EMPTY
22692: LIST
22693: LIST
22694: PPUSH
22695: LD_VAR 0 2
22699: PUSH
22700: LD_VAR 0 4
22704: ARRAY
22705: PUSH
22706: LD_VAR 0 2
22710: PUSH
22711: LD_VAR 0 4
22715: ARRAY
22716: PPUSH
22717: CALL_OW 255
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PPUSH
22726: CALL 30181 0 3
22730: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
22731: LD_VAR 0 2
22735: PUSH
22736: LD_VAR 0 4
22740: ARRAY
22741: PPUSH
22742: LD_VAR 0 1
22746: PPUSH
22747: CALL_OW 255
22751: PPUSH
22752: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
22756: LD_VAR 0 2
22760: PUSH
22761: LD_VAR 0 4
22765: ARRAY
22766: PPUSH
22767: CALL_OW 141
// end ;
22771: GO 22603
22773: POP
22774: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22775: LD_VAR 0 1
22779: PPUSH
22780: LD_EXP 105
22784: PUSH
22785: LD_VAR 0 5
22789: ARRAY
22790: PUSH
22791: LD_INT 0
22793: PLUS
22794: PPUSH
22795: CALL_OW 505
// end ;
22799: LD_VAR 0 3
22803: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
22804: LD_INT 0
22806: PPUSH
22807: PPUSH
22808: PPUSH
22809: PPUSH
// if not hack in hackTanks then
22810: LD_VAR 0 1
22814: PUSH
22815: LD_EXP 104
22819: IN
22820: NOT
22821: IFFALSE 22825
// exit ;
22823: GO 23065
// index := GetElementIndex ( hackTanks , hack ) ;
22825: LD_ADDR_VAR 0 4
22829: PUSH
22830: LD_EXP 104
22834: PPUSH
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL 29966 0 2
22844: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
22845: LD_ADDR_VAR 0 3
22849: PUSH
22850: DOUBLE
22851: LD_EXP 105
22855: PUSH
22856: LD_VAR 0 4
22860: ARRAY
22861: INC
22862: ST_TO_ADDR
22863: LD_INT 1
22865: PUSH
22866: FOR_DOWNTO
22867: IFFALSE 23039
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
22869: LD_ADDR_VAR 0 5
22873: PUSH
22874: LD_EXP 105
22878: PUSH
22879: LD_VAR 0 4
22883: ARRAY
22884: PUSH
22885: LD_VAR 0 3
22889: ARRAY
22890: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
22891: LD_VAR 0 5
22895: PUSH
22896: LD_INT 1
22898: ARRAY
22899: PPUSH
22900: CALL_OW 302
22904: NOT
22905: PUSH
22906: LD_VAR 0 5
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PPUSH
22915: CALL_OW 255
22919: PUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 255
22929: NONEQUAL
22930: OR
22931: IFFALSE 23037
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
22933: LD_VAR 0 5
22937: PUSH
22938: LD_INT 1
22940: ARRAY
22941: PPUSH
22942: CALL_OW 305
22946: PUSH
22947: LD_VAR 0 5
22951: PUSH
22952: LD_INT 1
22954: ARRAY
22955: PPUSH
22956: CALL_OW 255
22960: PUSH
22961: LD_VAR 0 1
22965: PPUSH
22966: CALL_OW 255
22970: EQUAL
22971: AND
22972: IFFALSE 22996
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
22974: LD_VAR 0 5
22978: PUSH
22979: LD_INT 1
22981: ARRAY
22982: PPUSH
22983: LD_VAR 0 5
22987: PUSH
22988: LD_INT 2
22990: ARRAY
22991: PPUSH
22992: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22996: LD_ADDR_EXP 105
23000: PUSH
23001: LD_EXP 105
23005: PPUSH
23006: LD_VAR 0 4
23010: PPUSH
23011: LD_EXP 105
23015: PUSH
23016: LD_VAR 0 4
23020: ARRAY
23021: PPUSH
23022: LD_VAR 0 3
23026: PPUSH
23027: CALL_OW 3
23031: PPUSH
23032: CALL_OW 1
23036: ST_TO_ADDR
// end ; end ;
23037: GO 22866
23039: POP
23040: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23041: LD_VAR 0 1
23045: PPUSH
23046: LD_EXP 105
23050: PUSH
23051: LD_VAR 0 4
23055: ARRAY
23056: PUSH
23057: LD_INT 0
23059: PLUS
23060: PPUSH
23061: CALL_OW 505
// end ;
23065: LD_VAR 0 2
23069: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23070: LD_INT 0
23072: PPUSH
23073: PPUSH
23074: PPUSH
23075: PPUSH
// if not hack in hackTanks then
23076: LD_VAR 0 1
23080: PUSH
23081: LD_EXP 104
23085: IN
23086: NOT
23087: IFFALSE 23091
// exit ;
23089: GO 23176
// index := GetElementIndex ( hackTanks , hack ) ;
23091: LD_ADDR_VAR 0 5
23095: PUSH
23096: LD_EXP 104
23100: PPUSH
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL 29966 0 2
23110: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23111: LD_ADDR_VAR 0 4
23115: PUSH
23116: DOUBLE
23117: LD_INT 1
23119: DEC
23120: ST_TO_ADDR
23121: LD_EXP 105
23125: PUSH
23126: LD_VAR 0 5
23130: ARRAY
23131: PUSH
23132: FOR_TO
23133: IFFALSE 23174
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23135: LD_EXP 105
23139: PUSH
23140: LD_VAR 0 5
23144: ARRAY
23145: PUSH
23146: LD_VAR 0 4
23150: ARRAY
23151: PUSH
23152: LD_INT 1
23154: ARRAY
23155: PUSH
23156: LD_VAR 0 2
23160: EQUAL
23161: IFFALSE 23172
// KillUnit ( vehicle ) ;
23163: LD_VAR 0 2
23167: PPUSH
23168: CALL_OW 66
23172: GO 23132
23174: POP
23175: POP
// end ;
23176: LD_VAR 0 3
23180: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
23181: LD_EXP 109
23185: NOT
23186: IFFALSE 23221
23188: GO 23190
23190: DISABLE
// begin initMiner := true ;
23191: LD_ADDR_EXP 109
23195: PUSH
23196: LD_INT 1
23198: ST_TO_ADDR
// minersList := [ ] ;
23199: LD_ADDR_EXP 110
23203: PUSH
23204: EMPTY
23205: ST_TO_ADDR
// minerMinesList := [ ] ;
23206: LD_ADDR_EXP 111
23210: PUSH
23211: EMPTY
23212: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
23213: LD_ADDR_EXP 112
23217: PUSH
23218: LD_INT 5
23220: ST_TO_ADDR
// end ;
23221: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
23222: LD_EXP 109
23226: PUSH
23227: LD_INT 34
23229: PUSH
23230: LD_EXP 31
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: AND
23244: IFFALSE 23707
23246: GO 23248
23248: DISABLE
23249: LD_INT 0
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
// begin enable ;
23255: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23256: LD_ADDR_VAR 0 1
23260: PUSH
23261: LD_INT 34
23263: PUSH
23264: LD_EXP 31
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PPUSH
23273: CALL_OW 69
23277: PUSH
23278: FOR_IN
23279: IFFALSE 23351
// begin if not i in minersList then
23281: LD_VAR 0 1
23285: PUSH
23286: LD_EXP 110
23290: IN
23291: NOT
23292: IFFALSE 23349
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23294: LD_ADDR_EXP 110
23298: PUSH
23299: LD_EXP 110
23303: PPUSH
23304: LD_EXP 110
23308: PUSH
23309: LD_INT 1
23311: PLUS
23312: PPUSH
23313: LD_VAR 0 1
23317: PPUSH
23318: CALL_OW 1
23322: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23323: LD_ADDR_EXP 111
23327: PUSH
23328: LD_EXP 111
23332: PPUSH
23333: LD_EXP 111
23337: PUSH
23338: LD_INT 1
23340: PLUS
23341: PPUSH
23342: EMPTY
23343: PPUSH
23344: CALL_OW 1
23348: ST_TO_ADDR
// end end ;
23349: GO 23278
23351: POP
23352: POP
// for i := minerMinesList downto 1 do
23353: LD_ADDR_VAR 0 1
23357: PUSH
23358: DOUBLE
23359: LD_EXP 111
23363: INC
23364: ST_TO_ADDR
23365: LD_INT 1
23367: PUSH
23368: FOR_DOWNTO
23369: IFFALSE 23705
// begin if IsLive ( minersList [ i ] ) then
23371: LD_EXP 110
23375: PUSH
23376: LD_VAR 0 1
23380: ARRAY
23381: PPUSH
23382: CALL_OW 300
23386: IFFALSE 23414
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
23388: LD_EXP 110
23392: PUSH
23393: LD_VAR 0 1
23397: ARRAY
23398: PPUSH
23399: LD_EXP 111
23403: PUSH
23404: LD_VAR 0 1
23408: ARRAY
23409: PPUSH
23410: CALL_OW 505
// if not minerMinesList [ i ] then
23414: LD_EXP 111
23418: PUSH
23419: LD_VAR 0 1
23423: ARRAY
23424: NOT
23425: IFFALSE 23429
// continue ;
23427: GO 23368
// for j := minerMinesList [ i ] downto 1 do
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: DOUBLE
23435: LD_EXP 111
23439: PUSH
23440: LD_VAR 0 1
23444: ARRAY
23445: INC
23446: ST_TO_ADDR
23447: LD_INT 1
23449: PUSH
23450: FOR_DOWNTO
23451: IFFALSE 23701
// begin side := GetSide ( minersList [ i ] ) ;
23453: LD_ADDR_VAR 0 3
23457: PUSH
23458: LD_EXP 110
23462: PUSH
23463: LD_VAR 0 1
23467: ARRAY
23468: PPUSH
23469: CALL_OW 255
23473: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23474: LD_ADDR_VAR 0 4
23478: PUSH
23479: LD_EXP 111
23483: PUSH
23484: LD_VAR 0 1
23488: ARRAY
23489: PUSH
23490: LD_VAR 0 2
23494: ARRAY
23495: PUSH
23496: LD_INT 1
23498: ARRAY
23499: PPUSH
23500: LD_EXP 111
23504: PUSH
23505: LD_VAR 0 1
23509: ARRAY
23510: PUSH
23511: LD_VAR 0 2
23515: ARRAY
23516: PUSH
23517: LD_INT 2
23519: ARRAY
23520: PPUSH
23521: CALL_OW 428
23525: ST_TO_ADDR
// if not tmp then
23526: LD_VAR 0 4
23530: NOT
23531: IFFALSE 23535
// continue ;
23533: GO 23450
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
23535: LD_VAR 0 4
23539: PUSH
23540: LD_INT 81
23542: PUSH
23543: LD_VAR 0 3
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PPUSH
23552: CALL_OW 69
23556: IN
23557: PUSH
23558: LD_EXP 111
23562: PUSH
23563: LD_VAR 0 1
23567: ARRAY
23568: PUSH
23569: LD_VAR 0 2
23573: ARRAY
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: PPUSH
23579: LD_EXP 111
23583: PUSH
23584: LD_VAR 0 1
23588: ARRAY
23589: PUSH
23590: LD_VAR 0 2
23594: ARRAY
23595: PUSH
23596: LD_INT 2
23598: ARRAY
23599: PPUSH
23600: CALL_OW 458
23604: AND
23605: IFFALSE 23699
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
23607: LD_EXP 111
23611: PUSH
23612: LD_VAR 0 1
23616: ARRAY
23617: PUSH
23618: LD_VAR 0 2
23622: ARRAY
23623: PUSH
23624: LD_INT 1
23626: ARRAY
23627: PPUSH
23628: LD_EXP 111
23632: PUSH
23633: LD_VAR 0 1
23637: ARRAY
23638: PUSH
23639: LD_VAR 0 2
23643: ARRAY
23644: PUSH
23645: LD_INT 2
23647: ARRAY
23648: PPUSH
23649: LD_VAR 0 3
23653: PPUSH
23654: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
23658: LD_ADDR_EXP 111
23662: PUSH
23663: LD_EXP 111
23667: PPUSH
23668: LD_VAR 0 1
23672: PPUSH
23673: LD_EXP 111
23677: PUSH
23678: LD_VAR 0 1
23682: ARRAY
23683: PPUSH
23684: LD_VAR 0 2
23688: PPUSH
23689: CALL_OW 3
23693: PPUSH
23694: CALL_OW 1
23698: ST_TO_ADDR
// end ; end ;
23699: GO 23450
23701: POP
23702: POP
// end ;
23703: GO 23368
23705: POP
23706: POP
// end ;
23707: PPOPN 4
23709: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
23710: LD_INT 0
23712: PPUSH
23713: PPUSH
// result := false ;
23714: LD_ADDR_VAR 0 4
23718: PUSH
23719: LD_INT 0
23721: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
23722: LD_VAR 0 1
23726: PPUSH
23727: CALL_OW 264
23731: PUSH
23732: LD_EXP 31
23736: EQUAL
23737: NOT
23738: IFFALSE 23742
// exit ;
23740: GO 23982
// index := GetElementIndex ( minersList , unit ) ;
23742: LD_ADDR_VAR 0 5
23746: PUSH
23747: LD_EXP 110
23751: PPUSH
23752: LD_VAR 0 1
23756: PPUSH
23757: CALL 29966 0 2
23761: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
23762: LD_EXP 111
23766: PUSH
23767: LD_VAR 0 5
23771: ARRAY
23772: PUSH
23773: LD_EXP 112
23777: GREATEREQUAL
23778: IFFALSE 23782
// exit ;
23780: GO 23982
// ComMoveXY ( unit , x , y ) ;
23782: LD_VAR 0 1
23786: PPUSH
23787: LD_VAR 0 2
23791: PPUSH
23792: LD_VAR 0 3
23796: PPUSH
23797: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23801: LD_INT 35
23803: PPUSH
23804: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
23808: LD_VAR 0 1
23812: PPUSH
23813: LD_VAR 0 2
23817: PPUSH
23818: LD_VAR 0 3
23822: PPUSH
23823: CALL 60738 0 3
23827: NOT
23828: PUSH
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 314
23838: AND
23839: IFFALSE 23843
// exit ;
23841: GO 23982
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
23843: LD_VAR 0 2
23847: PPUSH
23848: LD_VAR 0 3
23852: PPUSH
23853: CALL_OW 428
23857: PUSH
23858: LD_VAR 0 1
23862: EQUAL
23863: PUSH
23864: LD_VAR 0 1
23868: PPUSH
23869: CALL_OW 314
23873: NOT
23874: AND
23875: IFFALSE 23801
// PlaySoundXY ( x , y , PlantMine ) ;
23877: LD_VAR 0 2
23881: PPUSH
23882: LD_VAR 0 3
23886: PPUSH
23887: LD_STRING PlantMine
23889: PPUSH
23890: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
23894: LD_VAR 0 2
23898: PPUSH
23899: LD_VAR 0 3
23903: PPUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 255
23913: PPUSH
23914: LD_INT 0
23916: PPUSH
23917: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
23921: LD_ADDR_EXP 111
23925: PUSH
23926: LD_EXP 111
23930: PPUSH
23931: LD_VAR 0 5
23935: PUSH
23936: LD_EXP 111
23940: PUSH
23941: LD_VAR 0 5
23945: ARRAY
23946: PUSH
23947: LD_INT 1
23949: PLUS
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: PPUSH
23955: LD_VAR 0 2
23959: PUSH
23960: LD_VAR 0 3
23964: PUSH
23965: EMPTY
23966: LIST
23967: LIST
23968: PPUSH
23969: CALL 30181 0 3
23973: ST_TO_ADDR
// result := true ;
23974: LD_ADDR_VAR 0 4
23978: PUSH
23979: LD_INT 1
23981: ST_TO_ADDR
// end ;
23982: LD_VAR 0 4
23986: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
23987: LD_INT 0
23989: PPUSH
23990: PPUSH
23991: PPUSH
// if not unit in minersList then
23992: LD_VAR 0 1
23996: PUSH
23997: LD_EXP 110
24001: IN
24002: NOT
24003: IFFALSE 24007
// exit ;
24005: GO 24399
// index := GetElementIndex ( minersList , unit ) ;
24007: LD_ADDR_VAR 0 6
24011: PUSH
24012: LD_EXP 110
24016: PPUSH
24017: LD_VAR 0 1
24021: PPUSH
24022: CALL 29966 0 2
24026: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24027: LD_ADDR_VAR 0 5
24031: PUSH
24032: DOUBLE
24033: LD_EXP 111
24037: PUSH
24038: LD_VAR 0 6
24042: ARRAY
24043: INC
24044: ST_TO_ADDR
24045: LD_INT 1
24047: PUSH
24048: FOR_DOWNTO
24049: IFFALSE 24210
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
24051: LD_EXP 111
24055: PUSH
24056: LD_VAR 0 6
24060: ARRAY
24061: PUSH
24062: LD_VAR 0 5
24066: ARRAY
24067: PUSH
24068: LD_INT 1
24070: ARRAY
24071: PUSH
24072: LD_VAR 0 2
24076: EQUAL
24077: PUSH
24078: LD_EXP 111
24082: PUSH
24083: LD_VAR 0 6
24087: ARRAY
24088: PUSH
24089: LD_VAR 0 5
24093: ARRAY
24094: PUSH
24095: LD_INT 2
24097: ARRAY
24098: PUSH
24099: LD_VAR 0 3
24103: EQUAL
24104: AND
24105: IFFALSE 24208
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24107: LD_EXP 111
24111: PUSH
24112: LD_VAR 0 6
24116: ARRAY
24117: PUSH
24118: LD_VAR 0 5
24122: ARRAY
24123: PUSH
24124: LD_INT 1
24126: ARRAY
24127: PPUSH
24128: LD_EXP 111
24132: PUSH
24133: LD_VAR 0 6
24137: ARRAY
24138: PUSH
24139: LD_VAR 0 5
24143: ARRAY
24144: PUSH
24145: LD_INT 2
24147: ARRAY
24148: PPUSH
24149: LD_VAR 0 1
24153: PPUSH
24154: CALL_OW 255
24158: PPUSH
24159: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24163: LD_ADDR_EXP 111
24167: PUSH
24168: LD_EXP 111
24172: PPUSH
24173: LD_VAR 0 6
24177: PPUSH
24178: LD_EXP 111
24182: PUSH
24183: LD_VAR 0 6
24187: ARRAY
24188: PPUSH
24189: LD_VAR 0 5
24193: PPUSH
24194: CALL_OW 3
24198: PPUSH
24199: CALL_OW 1
24203: ST_TO_ADDR
// exit ;
24204: POP
24205: POP
24206: GO 24399
// end ; end ;
24208: GO 24048
24210: POP
24211: POP
// for i := minerMinesList [ index ] downto 1 do
24212: LD_ADDR_VAR 0 5
24216: PUSH
24217: DOUBLE
24218: LD_EXP 111
24222: PUSH
24223: LD_VAR 0 6
24227: ARRAY
24228: INC
24229: ST_TO_ADDR
24230: LD_INT 1
24232: PUSH
24233: FOR_DOWNTO
24234: IFFALSE 24397
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24236: LD_EXP 111
24240: PUSH
24241: LD_VAR 0 6
24245: ARRAY
24246: PUSH
24247: LD_VAR 0 5
24251: ARRAY
24252: PUSH
24253: LD_INT 1
24255: ARRAY
24256: PPUSH
24257: LD_EXP 111
24261: PUSH
24262: LD_VAR 0 6
24266: ARRAY
24267: PUSH
24268: LD_VAR 0 5
24272: ARRAY
24273: PUSH
24274: LD_INT 2
24276: ARRAY
24277: PPUSH
24278: LD_VAR 0 2
24282: PPUSH
24283: LD_VAR 0 3
24287: PPUSH
24288: CALL_OW 298
24292: PUSH
24293: LD_INT 6
24295: LESS
24296: IFFALSE 24395
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24298: LD_EXP 111
24302: PUSH
24303: LD_VAR 0 6
24307: ARRAY
24308: PUSH
24309: LD_VAR 0 5
24313: ARRAY
24314: PUSH
24315: LD_INT 1
24317: ARRAY
24318: PPUSH
24319: LD_EXP 111
24323: PUSH
24324: LD_VAR 0 6
24328: ARRAY
24329: PUSH
24330: LD_VAR 0 5
24334: ARRAY
24335: PUSH
24336: LD_INT 2
24338: ARRAY
24339: PPUSH
24340: LD_VAR 0 1
24344: PPUSH
24345: CALL_OW 255
24349: PPUSH
24350: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24354: LD_ADDR_EXP 111
24358: PUSH
24359: LD_EXP 111
24363: PPUSH
24364: LD_VAR 0 6
24368: PPUSH
24369: LD_EXP 111
24373: PUSH
24374: LD_VAR 0 6
24378: ARRAY
24379: PPUSH
24380: LD_VAR 0 5
24384: PPUSH
24385: CALL_OW 3
24389: PPUSH
24390: CALL_OW 1
24394: ST_TO_ADDR
// end ; end ;
24395: GO 24233
24397: POP
24398: POP
// end ;
24399: LD_VAR 0 4
24403: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24404: LD_INT 0
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24415: LD_VAR 0 1
24419: PPUSH
24420: CALL_OW 264
24424: PUSH
24425: LD_EXP 31
24429: EQUAL
24430: NOT
24431: PUSH
24432: LD_VAR 0 1
24436: PUSH
24437: LD_EXP 110
24441: IN
24442: NOT
24443: OR
24444: IFFALSE 24448
// exit ;
24446: GO 24770
// index := GetElementIndex ( minersList , unit ) ;
24448: LD_ADDR_VAR 0 6
24452: PUSH
24453: LD_EXP 110
24457: PPUSH
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL 29966 0 2
24467: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24468: LD_ADDR_VAR 0 8
24472: PUSH
24473: LD_EXP 112
24477: PUSH
24478: LD_EXP 111
24482: PUSH
24483: LD_VAR 0 6
24487: ARRAY
24488: MINUS
24489: ST_TO_ADDR
// if not minesFreeAmount then
24490: LD_VAR 0 8
24494: NOT
24495: IFFALSE 24499
// exit ;
24497: GO 24770
// tmp := [ ] ;
24499: LD_ADDR_VAR 0 7
24503: PUSH
24504: EMPTY
24505: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
24506: LD_ADDR_VAR 0 5
24510: PUSH
24511: DOUBLE
24512: LD_INT 1
24514: DEC
24515: ST_TO_ADDR
24516: LD_VAR 0 8
24520: PUSH
24521: FOR_TO
24522: IFFALSE 24717
// begin _d := rand ( 0 , 5 ) ;
24524: LD_ADDR_VAR 0 11
24528: PUSH
24529: LD_INT 0
24531: PPUSH
24532: LD_INT 5
24534: PPUSH
24535: CALL_OW 12
24539: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
24540: LD_ADDR_VAR 0 12
24544: PUSH
24545: LD_INT 2
24547: PPUSH
24548: LD_INT 6
24550: PPUSH
24551: CALL_OW 12
24555: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
24556: LD_ADDR_VAR 0 9
24560: PUSH
24561: LD_VAR 0 2
24565: PPUSH
24566: LD_VAR 0 11
24570: PPUSH
24571: LD_VAR 0 12
24575: PPUSH
24576: CALL_OW 272
24580: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
24581: LD_ADDR_VAR 0 10
24585: PUSH
24586: LD_VAR 0 3
24590: PPUSH
24591: LD_VAR 0 11
24595: PPUSH
24596: LD_VAR 0 12
24600: PPUSH
24601: CALL_OW 273
24605: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
24606: LD_VAR 0 9
24610: PPUSH
24611: LD_VAR 0 10
24615: PPUSH
24616: CALL_OW 488
24620: PUSH
24621: LD_VAR 0 9
24625: PUSH
24626: LD_VAR 0 10
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PUSH
24635: LD_VAR 0 7
24639: IN
24640: NOT
24641: AND
24642: PUSH
24643: LD_VAR 0 9
24647: PPUSH
24648: LD_VAR 0 10
24652: PPUSH
24653: CALL_OW 458
24657: NOT
24658: AND
24659: IFFALSE 24701
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
24661: LD_ADDR_VAR 0 7
24665: PUSH
24666: LD_VAR 0 7
24670: PPUSH
24671: LD_VAR 0 7
24675: PUSH
24676: LD_INT 1
24678: PLUS
24679: PPUSH
24680: LD_VAR 0 9
24684: PUSH
24685: LD_VAR 0 10
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: PPUSH
24694: CALL_OW 1
24698: ST_TO_ADDR
24699: GO 24715
// i := i - 1 ;
24701: LD_ADDR_VAR 0 5
24705: PUSH
24706: LD_VAR 0 5
24710: PUSH
24711: LD_INT 1
24713: MINUS
24714: ST_TO_ADDR
// end ;
24715: GO 24521
24717: POP
24718: POP
// for i in tmp do
24719: LD_ADDR_VAR 0 5
24723: PUSH
24724: LD_VAR 0 7
24728: PUSH
24729: FOR_IN
24730: IFFALSE 24768
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
24732: LD_VAR 0 1
24736: PPUSH
24737: LD_VAR 0 5
24741: PUSH
24742: LD_INT 1
24744: ARRAY
24745: PPUSH
24746: LD_VAR 0 5
24750: PUSH
24751: LD_INT 2
24753: ARRAY
24754: PPUSH
24755: CALL 23710 0 3
24759: NOT
24760: IFFALSE 24766
// exit ;
24762: POP
24763: POP
24764: GO 24770
24766: GO 24729
24768: POP
24769: POP
// end ;
24770: LD_VAR 0 4
24774: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
24775: LD_INT 0
24777: PPUSH
24778: PPUSH
24779: PPUSH
24780: PPUSH
24781: PPUSH
24782: PPUSH
24783: PPUSH
// if not GetClass ( unit ) = class_sniper then
24784: LD_VAR 0 1
24788: PPUSH
24789: CALL_OW 257
24793: PUSH
24794: LD_INT 5
24796: EQUAL
24797: NOT
24798: IFFALSE 24802
// exit ;
24800: GO 25190
// dist := 8 ;
24802: LD_ADDR_VAR 0 5
24806: PUSH
24807: LD_INT 8
24809: ST_TO_ADDR
// viewRange := 12 ;
24810: LD_ADDR_VAR 0 7
24814: PUSH
24815: LD_INT 12
24817: ST_TO_ADDR
// side := GetSide ( unit ) ;
24818: LD_ADDR_VAR 0 6
24822: PUSH
24823: LD_VAR 0 1
24827: PPUSH
24828: CALL_OW 255
24832: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
24833: LD_INT 61
24835: PPUSH
24836: LD_VAR 0 6
24840: PPUSH
24841: CALL_OW 321
24845: PUSH
24846: LD_INT 2
24848: EQUAL
24849: IFFALSE 24859
// viewRange := 16 ;
24851: LD_ADDR_VAR 0 7
24855: PUSH
24856: LD_INT 16
24858: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
24859: LD_VAR 0 1
24863: PPUSH
24864: LD_VAR 0 2
24868: PPUSH
24869: LD_VAR 0 3
24873: PPUSH
24874: CALL_OW 297
24878: PUSH
24879: LD_VAR 0 5
24883: GREATER
24884: IFFALSE 24963
// begin ComMoveXY ( unit , x , y ) ;
24886: LD_VAR 0 1
24890: PPUSH
24891: LD_VAR 0 2
24895: PPUSH
24896: LD_VAR 0 3
24900: PPUSH
24901: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24905: LD_INT 35
24907: PPUSH
24908: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
24912: LD_VAR 0 1
24916: PPUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_VAR 0 3
24926: PPUSH
24927: CALL 60738 0 3
24931: NOT
24932: IFFALSE 24936
// exit ;
24934: GO 25190
// until GetDistUnitXY ( unit , x , y ) < dist ;
24936: LD_VAR 0 1
24940: PPUSH
24941: LD_VAR 0 2
24945: PPUSH
24946: LD_VAR 0 3
24950: PPUSH
24951: CALL_OW 297
24955: PUSH
24956: LD_VAR 0 5
24960: LESS
24961: IFFALSE 24905
// end ; ComTurnXY ( unit , x , y ) ;
24963: LD_VAR 0 1
24967: PPUSH
24968: LD_VAR 0 2
24972: PPUSH
24973: LD_VAR 0 3
24977: PPUSH
24978: CALL_OW 118
// wait ( 5 ) ;
24982: LD_INT 5
24984: PPUSH
24985: CALL_OW 67
// _d := GetDir ( unit ) ;
24989: LD_ADDR_VAR 0 10
24993: PUSH
24994: LD_VAR 0 1
24998: PPUSH
24999: CALL_OW 254
25003: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
25004: LD_ADDR_VAR 0 8
25008: PUSH
25009: LD_VAR 0 1
25013: PPUSH
25014: CALL_OW 250
25018: PPUSH
25019: LD_VAR 0 10
25023: PPUSH
25024: LD_VAR 0 5
25028: PPUSH
25029: CALL_OW 272
25033: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
25034: LD_ADDR_VAR 0 9
25038: PUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 251
25048: PPUSH
25049: LD_VAR 0 10
25053: PPUSH
25054: LD_VAR 0 5
25058: PPUSH
25059: CALL_OW 273
25063: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25064: LD_VAR 0 8
25068: PPUSH
25069: LD_VAR 0 9
25073: PPUSH
25074: CALL_OW 488
25078: NOT
25079: IFFALSE 25083
// exit ;
25081: GO 25190
// ComAnimCustom ( unit , 1 ) ;
25083: LD_VAR 0 1
25087: PPUSH
25088: LD_INT 1
25090: PPUSH
25091: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25095: LD_VAR 0 8
25099: PPUSH
25100: LD_VAR 0 9
25104: PPUSH
25105: LD_VAR 0 6
25109: PPUSH
25110: LD_VAR 0 7
25114: PPUSH
25115: CALL_OW 330
// repeat wait ( 1 ) ;
25119: LD_INT 1
25121: PPUSH
25122: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
25126: LD_VAR 0 1
25130: PPUSH
25131: CALL_OW 316
25135: PUSH
25136: LD_VAR 0 1
25140: PPUSH
25141: CALL_OW 314
25145: OR
25146: PUSH
25147: LD_VAR 0 1
25151: PPUSH
25152: CALL_OW 302
25156: NOT
25157: OR
25158: PUSH
25159: LD_VAR 0 1
25163: PPUSH
25164: CALL_OW 301
25168: OR
25169: IFFALSE 25119
// RemoveSeeing ( _x , _y , side ) ;
25171: LD_VAR 0 8
25175: PPUSH
25176: LD_VAR 0 9
25180: PPUSH
25181: LD_VAR 0 6
25185: PPUSH
25186: CALL_OW 331
// end ; end_of_file
25190: LD_VAR 0 4
25194: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
25195: LD_INT 0
25197: PPUSH
25198: PPUSH
// if exist_mode then
25199: LD_VAR 0 2
25203: IFFALSE 25228
// unit := CreateCharacter ( prefix & ident ) else
25205: LD_ADDR_VAR 0 5
25209: PUSH
25210: LD_VAR 0 3
25214: PUSH
25215: LD_VAR 0 1
25219: STR
25220: PPUSH
25221: CALL_OW 34
25225: ST_TO_ADDR
25226: GO 25243
// unit := NewCharacter ( ident ) ;
25228: LD_ADDR_VAR 0 5
25232: PUSH
25233: LD_VAR 0 1
25237: PPUSH
25238: CALL_OW 25
25242: ST_TO_ADDR
// result := unit ;
25243: LD_ADDR_VAR 0 4
25247: PUSH
25248: LD_VAR 0 5
25252: ST_TO_ADDR
// end ;
25253: LD_VAR 0 4
25257: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
25258: LD_INT 0
25260: PPUSH
25261: PPUSH
// if not side or not nation then
25262: LD_VAR 0 1
25266: NOT
25267: PUSH
25268: LD_VAR 0 2
25272: NOT
25273: OR
25274: IFFALSE 25278
// exit ;
25276: GO 26046
// case nation of nation_american :
25278: LD_VAR 0 2
25282: PUSH
25283: LD_INT 1
25285: DOUBLE
25286: EQUAL
25287: IFTRUE 25291
25289: GO 25505
25291: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
25292: LD_ADDR_VAR 0 4
25296: PUSH
25297: LD_INT 35
25299: PUSH
25300: LD_INT 45
25302: PUSH
25303: LD_INT 46
25305: PUSH
25306: LD_INT 47
25308: PUSH
25309: LD_INT 82
25311: PUSH
25312: LD_INT 83
25314: PUSH
25315: LD_INT 84
25317: PUSH
25318: LD_INT 85
25320: PUSH
25321: LD_INT 86
25323: PUSH
25324: LD_INT 1
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 6
25332: PUSH
25333: LD_INT 15
25335: PUSH
25336: LD_INT 16
25338: PUSH
25339: LD_INT 7
25341: PUSH
25342: LD_INT 12
25344: PUSH
25345: LD_INT 13
25347: PUSH
25348: LD_INT 10
25350: PUSH
25351: LD_INT 14
25353: PUSH
25354: LD_INT 20
25356: PUSH
25357: LD_INT 21
25359: PUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 25
25365: PUSH
25366: LD_INT 32
25368: PUSH
25369: LD_INT 27
25371: PUSH
25372: LD_INT 36
25374: PUSH
25375: LD_INT 69
25377: PUSH
25378: LD_INT 39
25380: PUSH
25381: LD_INT 34
25383: PUSH
25384: LD_INT 40
25386: PUSH
25387: LD_INT 48
25389: PUSH
25390: LD_INT 49
25392: PUSH
25393: LD_INT 50
25395: PUSH
25396: LD_INT 51
25398: PUSH
25399: LD_INT 52
25401: PUSH
25402: LD_INT 53
25404: PUSH
25405: LD_INT 54
25407: PUSH
25408: LD_INT 55
25410: PUSH
25411: LD_INT 56
25413: PUSH
25414: LD_INT 57
25416: PUSH
25417: LD_INT 58
25419: PUSH
25420: LD_INT 59
25422: PUSH
25423: LD_INT 60
25425: PUSH
25426: LD_INT 61
25428: PUSH
25429: LD_INT 62
25431: PUSH
25432: LD_INT 80
25434: PUSH
25435: LD_INT 82
25437: PUSH
25438: LD_INT 83
25440: PUSH
25441: LD_INT 84
25443: PUSH
25444: LD_INT 85
25446: PUSH
25447: LD_INT 86
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: LIST
25465: LIST
25466: LIST
25467: LIST
25468: LIST
25469: LIST
25470: LIST
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: LIST
25476: LIST
25477: LIST
25478: LIST
25479: LIST
25480: LIST
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: LIST
25492: LIST
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: ST_TO_ADDR
25503: GO 25970
25505: LD_INT 2
25507: DOUBLE
25508: EQUAL
25509: IFTRUE 25513
25511: GO 25739
25513: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
25514: LD_ADDR_VAR 0 4
25518: PUSH
25519: LD_INT 35
25521: PUSH
25522: LD_INT 45
25524: PUSH
25525: LD_INT 46
25527: PUSH
25528: LD_INT 47
25530: PUSH
25531: LD_INT 82
25533: PUSH
25534: LD_INT 83
25536: PUSH
25537: LD_INT 84
25539: PUSH
25540: LD_INT 85
25542: PUSH
25543: LD_INT 87
25545: PUSH
25546: LD_INT 70
25548: PUSH
25549: LD_INT 1
25551: PUSH
25552: LD_INT 11
25554: PUSH
25555: LD_INT 3
25557: PUSH
25558: LD_INT 4
25560: PUSH
25561: LD_INT 5
25563: PUSH
25564: LD_INT 6
25566: PUSH
25567: LD_INT 15
25569: PUSH
25570: LD_INT 18
25572: PUSH
25573: LD_INT 7
25575: PUSH
25576: LD_INT 17
25578: PUSH
25579: LD_INT 8
25581: PUSH
25582: LD_INT 20
25584: PUSH
25585: LD_INT 21
25587: PUSH
25588: LD_INT 22
25590: PUSH
25591: LD_INT 72
25593: PUSH
25594: LD_INT 26
25596: PUSH
25597: LD_INT 69
25599: PUSH
25600: LD_INT 39
25602: PUSH
25603: LD_INT 40
25605: PUSH
25606: LD_INT 41
25608: PUSH
25609: LD_INT 42
25611: PUSH
25612: LD_INT 43
25614: PUSH
25615: LD_INT 48
25617: PUSH
25618: LD_INT 49
25620: PUSH
25621: LD_INT 50
25623: PUSH
25624: LD_INT 51
25626: PUSH
25627: LD_INT 52
25629: PUSH
25630: LD_INT 53
25632: PUSH
25633: LD_INT 54
25635: PUSH
25636: LD_INT 55
25638: PUSH
25639: LD_INT 56
25641: PUSH
25642: LD_INT 60
25644: PUSH
25645: LD_INT 61
25647: PUSH
25648: LD_INT 62
25650: PUSH
25651: LD_INT 66
25653: PUSH
25654: LD_INT 67
25656: PUSH
25657: LD_INT 68
25659: PUSH
25660: LD_INT 81
25662: PUSH
25663: LD_INT 82
25665: PUSH
25666: LD_INT 83
25668: PUSH
25669: LD_INT 84
25671: PUSH
25672: LD_INT 85
25674: PUSH
25675: LD_INT 87
25677: PUSH
25678: LD_INT 88
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: LIST
25685: LIST
25686: LIST
25687: LIST
25688: LIST
25689: LIST
25690: LIST
25691: LIST
25692: LIST
25693: LIST
25694: LIST
25695: LIST
25696: LIST
25697: LIST
25698: LIST
25699: LIST
25700: LIST
25701: LIST
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: LIST
25707: LIST
25708: LIST
25709: LIST
25710: LIST
25711: LIST
25712: LIST
25713: LIST
25714: LIST
25715: LIST
25716: LIST
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: ST_TO_ADDR
25737: GO 25970
25739: LD_INT 3
25741: DOUBLE
25742: EQUAL
25743: IFTRUE 25747
25745: GO 25969
25747: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
25748: LD_ADDR_VAR 0 4
25752: PUSH
25753: LD_INT 46
25755: PUSH
25756: LD_INT 47
25758: PUSH
25759: LD_INT 1
25761: PUSH
25762: LD_INT 2
25764: PUSH
25765: LD_INT 82
25767: PUSH
25768: LD_INT 83
25770: PUSH
25771: LD_INT 84
25773: PUSH
25774: LD_INT 85
25776: PUSH
25777: LD_INT 86
25779: PUSH
25780: LD_INT 11
25782: PUSH
25783: LD_INT 9
25785: PUSH
25786: LD_INT 20
25788: PUSH
25789: LD_INT 19
25791: PUSH
25792: LD_INT 21
25794: PUSH
25795: LD_INT 24
25797: PUSH
25798: LD_INT 22
25800: PUSH
25801: LD_INT 25
25803: PUSH
25804: LD_INT 28
25806: PUSH
25807: LD_INT 29
25809: PUSH
25810: LD_INT 30
25812: PUSH
25813: LD_INT 31
25815: PUSH
25816: LD_INT 37
25818: PUSH
25819: LD_INT 38
25821: PUSH
25822: LD_INT 32
25824: PUSH
25825: LD_INT 27
25827: PUSH
25828: LD_INT 33
25830: PUSH
25831: LD_INT 69
25833: PUSH
25834: LD_INT 39
25836: PUSH
25837: LD_INT 34
25839: PUSH
25840: LD_INT 40
25842: PUSH
25843: LD_INT 71
25845: PUSH
25846: LD_INT 23
25848: PUSH
25849: LD_INT 44
25851: PUSH
25852: LD_INT 48
25854: PUSH
25855: LD_INT 49
25857: PUSH
25858: LD_INT 50
25860: PUSH
25861: LD_INT 51
25863: PUSH
25864: LD_INT 52
25866: PUSH
25867: LD_INT 53
25869: PUSH
25870: LD_INT 54
25872: PUSH
25873: LD_INT 55
25875: PUSH
25876: LD_INT 56
25878: PUSH
25879: LD_INT 57
25881: PUSH
25882: LD_INT 58
25884: PUSH
25885: LD_INT 59
25887: PUSH
25888: LD_INT 63
25890: PUSH
25891: LD_INT 64
25893: PUSH
25894: LD_INT 65
25896: PUSH
25897: LD_INT 82
25899: PUSH
25900: LD_INT 83
25902: PUSH
25903: LD_INT 84
25905: PUSH
25906: LD_INT 85
25908: PUSH
25909: LD_INT 86
25911: PUSH
25912: EMPTY
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: LIST
25933: LIST
25934: LIST
25935: LIST
25936: LIST
25937: LIST
25938: LIST
25939: LIST
25940: LIST
25941: LIST
25942: LIST
25943: LIST
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: ST_TO_ADDR
25967: GO 25970
25969: POP
// if state > - 1 and state < 3 then
25970: LD_VAR 0 3
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: GREATER
25979: PUSH
25980: LD_VAR 0 3
25984: PUSH
25985: LD_INT 3
25987: LESS
25988: AND
25989: IFFALSE 26046
// for i in result do
25991: LD_ADDR_VAR 0 5
25995: PUSH
25996: LD_VAR 0 4
26000: PUSH
26001: FOR_IN
26002: IFFALSE 26044
// if GetTech ( i , side ) <> state then
26004: LD_VAR 0 5
26008: PPUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 321
26018: PUSH
26019: LD_VAR 0 3
26023: NONEQUAL
26024: IFFALSE 26042
// result := result diff i ;
26026: LD_ADDR_VAR 0 4
26030: PUSH
26031: LD_VAR 0 4
26035: PUSH
26036: LD_VAR 0 5
26040: DIFF
26041: ST_TO_ADDR
26042: GO 26001
26044: POP
26045: POP
// end ;
26046: LD_VAR 0 4
26050: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
26051: LD_INT 0
26053: PPUSH
26054: PPUSH
26055: PPUSH
// result := true ;
26056: LD_ADDR_VAR 0 3
26060: PUSH
26061: LD_INT 1
26063: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
26064: LD_ADDR_VAR 0 5
26068: PUSH
26069: LD_VAR 0 2
26073: PPUSH
26074: CALL_OW 480
26078: ST_TO_ADDR
// if not tmp then
26079: LD_VAR 0 5
26083: NOT
26084: IFFALSE 26088
// exit ;
26086: GO 26137
// for i in tmp do
26088: LD_ADDR_VAR 0 4
26092: PUSH
26093: LD_VAR 0 5
26097: PUSH
26098: FOR_IN
26099: IFFALSE 26135
// if GetTech ( i , side ) <> state_researched then
26101: LD_VAR 0 4
26105: PPUSH
26106: LD_VAR 0 1
26110: PPUSH
26111: CALL_OW 321
26115: PUSH
26116: LD_INT 2
26118: NONEQUAL
26119: IFFALSE 26133
// begin result := false ;
26121: LD_ADDR_VAR 0 3
26125: PUSH
26126: LD_INT 0
26128: ST_TO_ADDR
// exit ;
26129: POP
26130: POP
26131: GO 26137
// end ;
26133: GO 26098
26135: POP
26136: POP
// end ;
26137: LD_VAR 0 3
26141: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
26142: LD_INT 0
26144: PPUSH
26145: PPUSH
26146: PPUSH
26147: PPUSH
26148: PPUSH
26149: PPUSH
26150: PPUSH
26151: PPUSH
26152: PPUSH
26153: PPUSH
26154: PPUSH
26155: PPUSH
26156: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
26157: LD_VAR 0 1
26161: NOT
26162: PUSH
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 257
26172: PUSH
26173: LD_INT 9
26175: NONEQUAL
26176: OR
26177: IFFALSE 26181
// exit ;
26179: GO 26754
// side := GetSide ( unit ) ;
26181: LD_ADDR_VAR 0 9
26185: PUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 255
26195: ST_TO_ADDR
// tech_space := tech_spacanom ;
26196: LD_ADDR_VAR 0 12
26200: PUSH
26201: LD_INT 29
26203: ST_TO_ADDR
// tech_time := tech_taurad ;
26204: LD_ADDR_VAR 0 13
26208: PUSH
26209: LD_INT 28
26211: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
26212: LD_ADDR_VAR 0 11
26216: PUSH
26217: LD_VAR 0 1
26221: PPUSH
26222: CALL_OW 310
26226: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
26227: LD_VAR 0 11
26231: PPUSH
26232: CALL_OW 247
26236: PUSH
26237: LD_INT 2
26239: EQUAL
26240: IFFALSE 26244
// exit ;
26242: GO 26754
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26244: LD_ADDR_VAR 0 8
26248: PUSH
26249: LD_INT 81
26251: PUSH
26252: LD_VAR 0 9
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 3
26263: PUSH
26264: LD_INT 21
26266: PUSH
26267: LD_INT 3
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 8
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26754
// if in_unit then
26296: LD_VAR 0 11
26300: IFFALSE 26324
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
26302: LD_ADDR_VAR 0 10
26306: PUSH
26307: LD_VAR 0 8
26311: PPUSH
26312: LD_VAR 0 11
26316: PPUSH
26317: CALL_OW 74
26321: ST_TO_ADDR
26322: GO 26344
// enemy := NearestUnitToUnit ( tmp , unit ) ;
26324: LD_ADDR_VAR 0 10
26328: PUSH
26329: LD_VAR 0 8
26333: PPUSH
26334: LD_VAR 0 1
26338: PPUSH
26339: CALL_OW 74
26343: ST_TO_ADDR
// if not enemy then
26344: LD_VAR 0 10
26348: NOT
26349: IFFALSE 26353
// exit ;
26351: GO 26754
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
26353: LD_VAR 0 11
26357: PUSH
26358: LD_VAR 0 11
26362: PPUSH
26363: LD_VAR 0 10
26367: PPUSH
26368: CALL_OW 296
26372: PUSH
26373: LD_INT 13
26375: GREATER
26376: AND
26377: PUSH
26378: LD_VAR 0 1
26382: PPUSH
26383: LD_VAR 0 10
26387: PPUSH
26388: CALL_OW 296
26392: PUSH
26393: LD_INT 12
26395: GREATER
26396: OR
26397: IFFALSE 26401
// exit ;
26399: GO 26754
// missile := [ 1 ] ;
26401: LD_ADDR_VAR 0 14
26405: PUSH
26406: LD_INT 1
26408: PUSH
26409: EMPTY
26410: LIST
26411: ST_TO_ADDR
// if Researched ( side , tech_space ) then
26412: LD_VAR 0 9
26416: PPUSH
26417: LD_VAR 0 12
26421: PPUSH
26422: CALL_OW 325
26426: IFFALSE 26455
// missile := Insert ( missile , missile + 1 , 2 ) ;
26428: LD_ADDR_VAR 0 14
26432: PUSH
26433: LD_VAR 0 14
26437: PPUSH
26438: LD_VAR 0 14
26442: PUSH
26443: LD_INT 1
26445: PLUS
26446: PPUSH
26447: LD_INT 2
26449: PPUSH
26450: CALL_OW 2
26454: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
26455: LD_VAR 0 9
26459: PPUSH
26460: LD_VAR 0 13
26464: PPUSH
26465: CALL_OW 325
26469: PUSH
26470: LD_VAR 0 10
26474: PPUSH
26475: CALL_OW 255
26479: PPUSH
26480: LD_VAR 0 13
26484: PPUSH
26485: CALL_OW 325
26489: NOT
26490: AND
26491: IFFALSE 26520
// missile := Insert ( missile , missile + 1 , 3 ) ;
26493: LD_ADDR_VAR 0 14
26497: PUSH
26498: LD_VAR 0 14
26502: PPUSH
26503: LD_VAR 0 14
26507: PUSH
26508: LD_INT 1
26510: PLUS
26511: PPUSH
26512: LD_INT 3
26514: PPUSH
26515: CALL_OW 2
26519: ST_TO_ADDR
// if missile < 2 then
26520: LD_VAR 0 14
26524: PUSH
26525: LD_INT 2
26527: LESS
26528: IFFALSE 26532
// exit ;
26530: GO 26754
// x := GetX ( enemy ) ;
26532: LD_ADDR_VAR 0 4
26536: PUSH
26537: LD_VAR 0 10
26541: PPUSH
26542: CALL_OW 250
26546: ST_TO_ADDR
// y := GetY ( enemy ) ;
26547: LD_ADDR_VAR 0 5
26551: PUSH
26552: LD_VAR 0 10
26556: PPUSH
26557: CALL_OW 251
26561: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
26562: LD_ADDR_VAR 0 6
26566: PUSH
26567: LD_VAR 0 4
26571: PUSH
26572: LD_INT 1
26574: NEG
26575: PPUSH
26576: LD_INT 1
26578: PPUSH
26579: CALL_OW 12
26583: PLUS
26584: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
26585: LD_ADDR_VAR 0 7
26589: PUSH
26590: LD_VAR 0 5
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PPUSH
26599: LD_INT 1
26601: PPUSH
26602: CALL_OW 12
26606: PLUS
26607: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26608: LD_VAR 0 6
26612: PPUSH
26613: LD_VAR 0 7
26617: PPUSH
26618: CALL_OW 488
26622: NOT
26623: IFFALSE 26645
// begin _x := x ;
26625: LD_ADDR_VAR 0 6
26629: PUSH
26630: LD_VAR 0 4
26634: ST_TO_ADDR
// _y := y ;
26635: LD_ADDR_VAR 0 7
26639: PUSH
26640: LD_VAR 0 5
26644: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_INT 1
26652: PPUSH
26653: LD_VAR 0 14
26657: PPUSH
26658: CALL_OW 12
26662: ST_TO_ADDR
// case i of 1 :
26663: LD_VAR 0 3
26667: PUSH
26668: LD_INT 1
26670: DOUBLE
26671: EQUAL
26672: IFTRUE 26676
26674: GO 26693
26676: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
26677: LD_VAR 0 1
26681: PPUSH
26682: LD_VAR 0 10
26686: PPUSH
26687: CALL_OW 115
26691: GO 26754
26693: LD_INT 2
26695: DOUBLE
26696: EQUAL
26697: IFTRUE 26701
26699: GO 26723
26701: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_VAR 0 6
26711: PPUSH
26712: LD_VAR 0 7
26716: PPUSH
26717: CALL_OW 153
26721: GO 26754
26723: LD_INT 3
26725: DOUBLE
26726: EQUAL
26727: IFTRUE 26731
26729: GO 26753
26731: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
26732: LD_VAR 0 1
26736: PPUSH
26737: LD_VAR 0 6
26741: PPUSH
26742: LD_VAR 0 7
26746: PPUSH
26747: CALL_OW 154
26751: GO 26754
26753: POP
// end ;
26754: LD_VAR 0 2
26758: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
26759: LD_INT 0
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
26765: PPUSH
26766: PPUSH
// if not unit or not building then
26767: LD_VAR 0 1
26771: NOT
26772: PUSH
26773: LD_VAR 0 2
26777: NOT
26778: OR
26779: IFFALSE 26783
// exit ;
26781: GO 26941
// x := GetX ( building ) ;
26783: LD_ADDR_VAR 0 5
26787: PUSH
26788: LD_VAR 0 2
26792: PPUSH
26793: CALL_OW 250
26797: ST_TO_ADDR
// y := GetY ( building ) ;
26798: LD_ADDR_VAR 0 6
26802: PUSH
26803: LD_VAR 0 2
26807: PPUSH
26808: CALL_OW 251
26812: ST_TO_ADDR
// for i = 0 to 5 do
26813: LD_ADDR_VAR 0 4
26817: PUSH
26818: DOUBLE
26819: LD_INT 0
26821: DEC
26822: ST_TO_ADDR
26823: LD_INT 5
26825: PUSH
26826: FOR_TO
26827: IFFALSE 26939
// begin _x := ShiftX ( x , i , 3 ) ;
26829: LD_ADDR_VAR 0 7
26833: PUSH
26834: LD_VAR 0 5
26838: PPUSH
26839: LD_VAR 0 4
26843: PPUSH
26844: LD_INT 3
26846: PPUSH
26847: CALL_OW 272
26851: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
26852: LD_ADDR_VAR 0 8
26856: PUSH
26857: LD_VAR 0 6
26861: PPUSH
26862: LD_VAR 0 4
26866: PPUSH
26867: LD_INT 3
26869: PPUSH
26870: CALL_OW 273
26874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26875: LD_VAR 0 7
26879: PPUSH
26880: LD_VAR 0 8
26884: PPUSH
26885: CALL_OW 488
26889: NOT
26890: IFFALSE 26894
// continue ;
26892: GO 26826
// if HexInfo ( _x , _y ) = 0 then
26894: LD_VAR 0 7
26898: PPUSH
26899: LD_VAR 0 8
26903: PPUSH
26904: CALL_OW 428
26908: PUSH
26909: LD_INT 0
26911: EQUAL
26912: IFFALSE 26937
// begin ComMoveXY ( unit , _x , _y ) ;
26914: LD_VAR 0 1
26918: PPUSH
26919: LD_VAR 0 7
26923: PPUSH
26924: LD_VAR 0 8
26928: PPUSH
26929: CALL_OW 111
// exit ;
26933: POP
26934: POP
26935: GO 26941
// end ; end ;
26937: GO 26826
26939: POP
26940: POP
// end ;
26941: LD_VAR 0 3
26945: RET
// export function ScanBase ( side , base_area ) ; begin
26946: LD_INT 0
26948: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
26949: LD_ADDR_VAR 0 3
26953: PUSH
26954: LD_VAR 0 2
26958: PPUSH
26959: LD_INT 81
26961: PUSH
26962: LD_VAR 0 1
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PPUSH
26971: CALL_OW 70
26975: ST_TO_ADDR
// end ;
26976: LD_VAR 0 3
26980: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
26981: LD_INT 0
26983: PPUSH
26984: PPUSH
26985: PPUSH
26986: PPUSH
// result := false ;
26987: LD_ADDR_VAR 0 2
26991: PUSH
26992: LD_INT 0
26994: ST_TO_ADDR
// side := GetSide ( unit ) ;
26995: LD_ADDR_VAR 0 3
26999: PUSH
27000: LD_VAR 0 1
27004: PPUSH
27005: CALL_OW 255
27009: ST_TO_ADDR
// nat := GetNation ( unit ) ;
27010: LD_ADDR_VAR 0 4
27014: PUSH
27015: LD_VAR 0 1
27019: PPUSH
27020: CALL_OW 248
27024: ST_TO_ADDR
// case nat of 1 :
27025: LD_VAR 0 4
27029: PUSH
27030: LD_INT 1
27032: DOUBLE
27033: EQUAL
27034: IFTRUE 27038
27036: GO 27049
27038: POP
// tech := tech_lassight ; 2 :
27039: LD_ADDR_VAR 0 5
27043: PUSH
27044: LD_INT 12
27046: ST_TO_ADDR
27047: GO 27088
27049: LD_INT 2
27051: DOUBLE
27052: EQUAL
27053: IFTRUE 27057
27055: GO 27068
27057: POP
// tech := tech_mortar ; 3 :
27058: LD_ADDR_VAR 0 5
27062: PUSH
27063: LD_INT 41
27065: ST_TO_ADDR
27066: GO 27088
27068: LD_INT 3
27070: DOUBLE
27071: EQUAL
27072: IFTRUE 27076
27074: GO 27087
27076: POP
// tech := tech_bazooka ; end ;
27077: LD_ADDR_VAR 0 5
27081: PUSH
27082: LD_INT 44
27084: ST_TO_ADDR
27085: GO 27088
27087: POP
// if Researched ( side , tech ) then
27088: LD_VAR 0 3
27092: PPUSH
27093: LD_VAR 0 5
27097: PPUSH
27098: CALL_OW 325
27102: IFFALSE 27129
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
27104: LD_ADDR_VAR 0 2
27108: PUSH
27109: LD_INT 5
27111: PUSH
27112: LD_INT 8
27114: PUSH
27115: LD_INT 9
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: LIST
27122: PUSH
27123: LD_VAR 0 4
27127: ARRAY
27128: ST_TO_ADDR
// end ;
27129: LD_VAR 0 2
27133: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
27134: LD_INT 0
27136: PPUSH
27137: PPUSH
27138: PPUSH
// if not mines then
27139: LD_VAR 0 2
27143: NOT
27144: IFFALSE 27148
// exit ;
27146: GO 27292
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27148: LD_ADDR_VAR 0 5
27152: PUSH
27153: LD_INT 81
27155: PUSH
27156: LD_VAR 0 1
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 3
27167: PUSH
27168: LD_INT 21
27170: PUSH
27171: LD_INT 3
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: EMPTY
27179: LIST
27180: LIST
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: PPUSH
27186: CALL_OW 69
27190: ST_TO_ADDR
// for i in mines do
27191: LD_ADDR_VAR 0 4
27195: PUSH
27196: LD_VAR 0 2
27200: PUSH
27201: FOR_IN
27202: IFFALSE 27290
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
27204: LD_VAR 0 4
27208: PUSH
27209: LD_INT 1
27211: ARRAY
27212: PPUSH
27213: LD_VAR 0 4
27217: PUSH
27218: LD_INT 2
27220: ARRAY
27221: PPUSH
27222: CALL_OW 458
27226: NOT
27227: IFFALSE 27231
// continue ;
27229: GO 27201
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
27231: LD_VAR 0 4
27235: PUSH
27236: LD_INT 1
27238: ARRAY
27239: PPUSH
27240: LD_VAR 0 4
27244: PUSH
27245: LD_INT 2
27247: ARRAY
27248: PPUSH
27249: CALL_OW 428
27253: PUSH
27254: LD_VAR 0 5
27258: IN
27259: IFFALSE 27288
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
27261: LD_VAR 0 4
27265: PUSH
27266: LD_INT 1
27268: ARRAY
27269: PPUSH
27270: LD_VAR 0 4
27274: PUSH
27275: LD_INT 2
27277: ARRAY
27278: PPUSH
27279: LD_VAR 0 1
27283: PPUSH
27284: CALL_OW 456
// end ;
27288: GO 27201
27290: POP
27291: POP
// end ;
27292: LD_VAR 0 3
27296: RET
// export function Count ( array ) ; var i ; begin
27297: LD_INT 0
27299: PPUSH
27300: PPUSH
// result := 0 ;
27301: LD_ADDR_VAR 0 2
27305: PUSH
27306: LD_INT 0
27308: ST_TO_ADDR
// for i in array do
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_VAR 0 1
27318: PUSH
27319: FOR_IN
27320: IFFALSE 27344
// if i then
27322: LD_VAR 0 3
27326: IFFALSE 27342
// result := result + 1 ;
27328: LD_ADDR_VAR 0 2
27332: PUSH
27333: LD_VAR 0 2
27337: PUSH
27338: LD_INT 1
27340: PLUS
27341: ST_TO_ADDR
27342: GO 27319
27344: POP
27345: POP
// end ;
27346: LD_VAR 0 2
27350: RET
// export function IsEmpty ( building ) ; begin
27351: LD_INT 0
27353: PPUSH
// if not building then
27354: LD_VAR 0 1
27358: NOT
27359: IFFALSE 27363
// exit ;
27361: GO 27406
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
27363: LD_ADDR_VAR 0 2
27367: PUSH
27368: LD_VAR 0 1
27372: PUSH
27373: LD_INT 22
27375: PUSH
27376: LD_VAR 0 1
27380: PPUSH
27381: CALL_OW 255
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 58
27392: PUSH
27393: EMPTY
27394: LIST
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: PPUSH
27400: CALL_OW 69
27404: IN
27405: ST_TO_ADDR
// end ;
27406: LD_VAR 0 2
27410: RET
// export function IsNotFull ( building ) ; begin
27411: LD_INT 0
27413: PPUSH
// if not building then
27414: LD_VAR 0 1
27418: NOT
27419: IFFALSE 27423
// exit ;
27421: GO 27442
// result := UnitsInside ( building ) < 6 ;
27423: LD_ADDR_VAR 0 2
27427: PUSH
27428: LD_VAR 0 1
27432: PPUSH
27433: CALL_OW 313
27437: PUSH
27438: LD_INT 6
27440: LESS
27441: ST_TO_ADDR
// end ;
27442: LD_VAR 0 2
27446: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
27447: LD_INT 0
27449: PPUSH
27450: PPUSH
27451: PPUSH
27452: PPUSH
// tmp := [ ] ;
27453: LD_ADDR_VAR 0 3
27457: PUSH
27458: EMPTY
27459: ST_TO_ADDR
// list := [ ] ;
27460: LD_ADDR_VAR 0 5
27464: PUSH
27465: EMPTY
27466: ST_TO_ADDR
// for i = 16 to 25 do
27467: LD_ADDR_VAR 0 4
27471: PUSH
27472: DOUBLE
27473: LD_INT 16
27475: DEC
27476: ST_TO_ADDR
27477: LD_INT 25
27479: PUSH
27480: FOR_TO
27481: IFFALSE 27554
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
27483: LD_ADDR_VAR 0 3
27487: PUSH
27488: LD_VAR 0 3
27492: PUSH
27493: LD_INT 22
27495: PUSH
27496: LD_VAR 0 1
27500: PPUSH
27501: CALL_OW 255
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 91
27512: PUSH
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 6
27520: PUSH
27521: EMPTY
27522: LIST
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 30
27528: PUSH
27529: LD_VAR 0 4
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: EMPTY
27539: LIST
27540: LIST
27541: LIST
27542: PUSH
27543: EMPTY
27544: LIST
27545: PPUSH
27546: CALL_OW 69
27550: ADD
27551: ST_TO_ADDR
27552: GO 27480
27554: POP
27555: POP
// for i = 1 to tmp do
27556: LD_ADDR_VAR 0 4
27560: PUSH
27561: DOUBLE
27562: LD_INT 1
27564: DEC
27565: ST_TO_ADDR
27566: LD_VAR 0 3
27570: PUSH
27571: FOR_TO
27572: IFFALSE 27660
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
27574: LD_ADDR_VAR 0 5
27578: PUSH
27579: LD_VAR 0 5
27583: PUSH
27584: LD_VAR 0 3
27588: PUSH
27589: LD_VAR 0 4
27593: ARRAY
27594: PPUSH
27595: CALL_OW 266
27599: PUSH
27600: LD_VAR 0 3
27604: PUSH
27605: LD_VAR 0 4
27609: ARRAY
27610: PPUSH
27611: CALL_OW 250
27615: PUSH
27616: LD_VAR 0 3
27620: PUSH
27621: LD_VAR 0 4
27625: ARRAY
27626: PPUSH
27627: CALL_OW 251
27631: PUSH
27632: LD_VAR 0 3
27636: PUSH
27637: LD_VAR 0 4
27641: ARRAY
27642: PPUSH
27643: CALL_OW 254
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: PUSH
27654: EMPTY
27655: LIST
27656: ADD
27657: ST_TO_ADDR
27658: GO 27571
27660: POP
27661: POP
// result := list ;
27662: LD_ADDR_VAR 0 2
27666: PUSH
27667: LD_VAR 0 5
27671: ST_TO_ADDR
// end ;
27672: LD_VAR 0 2
27676: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
27677: LD_INT 0
27679: PPUSH
27680: PPUSH
27681: PPUSH
27682: PPUSH
27683: PPUSH
27684: PPUSH
27685: PPUSH
// if not factory then
27686: LD_VAR 0 1
27690: NOT
27691: IFFALSE 27695
// exit ;
27693: GO 28288
// if control = control_apeman then
27695: LD_VAR 0 4
27699: PUSH
27700: LD_INT 5
27702: EQUAL
27703: IFFALSE 27812
// begin tmp := UnitsInside ( factory ) ;
27705: LD_ADDR_VAR 0 8
27709: PUSH
27710: LD_VAR 0 1
27714: PPUSH
27715: CALL_OW 313
27719: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
27720: LD_VAR 0 8
27724: PPUSH
27725: LD_INT 25
27727: PUSH
27728: LD_INT 12
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PPUSH
27735: CALL_OW 72
27739: NOT
27740: IFFALSE 27750
// control := control_manual ;
27742: LD_ADDR_VAR 0 4
27746: PUSH
27747: LD_INT 1
27749: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
27750: LD_ADDR_VAR 0 8
27754: PUSH
27755: LD_VAR 0 1
27759: PPUSH
27760: CALL 27447 0 1
27764: ST_TO_ADDR
// if tmp then
27765: LD_VAR 0 8
27769: IFFALSE 27812
// begin for i in tmp do
27771: LD_ADDR_VAR 0 7
27775: PUSH
27776: LD_VAR 0 8
27780: PUSH
27781: FOR_IN
27782: IFFALSE 27810
// if i [ 1 ] = b_ext_radio then
27784: LD_VAR 0 7
27788: PUSH
27789: LD_INT 1
27791: ARRAY
27792: PUSH
27793: LD_INT 22
27795: EQUAL
27796: IFFALSE 27808
// begin control := control_remote ;
27798: LD_ADDR_VAR 0 4
27802: PUSH
27803: LD_INT 2
27805: ST_TO_ADDR
// break ;
27806: GO 27810
// end ;
27808: GO 27781
27810: POP
27811: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27812: LD_VAR 0 1
27816: PPUSH
27817: LD_VAR 0 2
27821: PPUSH
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_VAR 0 4
27831: PPUSH
27832: LD_VAR 0 5
27836: PPUSH
27837: CALL_OW 448
27841: IFFALSE 27876
// begin result := [ chassis , engine , control , weapon ] ;
27843: LD_ADDR_VAR 0 6
27847: PUSH
27848: LD_VAR 0 2
27852: PUSH
27853: LD_VAR 0 3
27857: PUSH
27858: LD_VAR 0 4
27862: PUSH
27863: LD_VAR 0 5
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: LIST
27872: LIST
27873: ST_TO_ADDR
// exit ;
27874: GO 28288
// end ; _chassis := AvailableChassisList ( factory ) ;
27876: LD_ADDR_VAR 0 9
27880: PUSH
27881: LD_VAR 0 1
27885: PPUSH
27886: CALL_OW 475
27890: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27891: LD_ADDR_VAR 0 11
27895: PUSH
27896: LD_VAR 0 1
27900: PPUSH
27901: CALL_OW 476
27905: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27906: LD_ADDR_VAR 0 12
27910: PUSH
27911: LD_VAR 0 1
27915: PPUSH
27916: CALL_OW 477
27920: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27921: LD_ADDR_VAR 0 10
27925: PUSH
27926: LD_VAR 0 1
27930: PPUSH
27931: CALL_OW 478
27935: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27936: LD_VAR 0 9
27940: NOT
27941: PUSH
27942: LD_VAR 0 11
27946: NOT
27947: OR
27948: PUSH
27949: LD_VAR 0 12
27953: NOT
27954: OR
27955: PUSH
27956: LD_VAR 0 10
27960: NOT
27961: OR
27962: IFFALSE 27997
// begin result := [ chassis , engine , control , weapon ] ;
27964: LD_ADDR_VAR 0 6
27968: PUSH
27969: LD_VAR 0 2
27973: PUSH
27974: LD_VAR 0 3
27978: PUSH
27979: LD_VAR 0 4
27983: PUSH
27984: LD_VAR 0 5
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: LIST
27993: LIST
27994: ST_TO_ADDR
// exit ;
27995: GO 28288
// end ; if not chassis in _chassis then
27997: LD_VAR 0 2
28001: PUSH
28002: LD_VAR 0 9
28006: IN
28007: NOT
28008: IFFALSE 28034
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
28010: LD_ADDR_VAR 0 2
28014: PUSH
28015: LD_VAR 0 9
28019: PUSH
28020: LD_INT 1
28022: PPUSH
28023: LD_VAR 0 9
28027: PPUSH
28028: CALL_OW 12
28032: ARRAY
28033: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
28034: LD_VAR 0 2
28038: PPUSH
28039: LD_VAR 0 3
28043: PPUSH
28044: CALL 28293 0 2
28048: NOT
28049: IFFALSE 28108
// repeat engine := _engine [ 1 ] ;
28051: LD_ADDR_VAR 0 3
28055: PUSH
28056: LD_VAR 0 11
28060: PUSH
28061: LD_INT 1
28063: ARRAY
28064: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
28065: LD_ADDR_VAR 0 11
28069: PUSH
28070: LD_VAR 0 11
28074: PPUSH
28075: LD_INT 1
28077: PPUSH
28078: CALL_OW 3
28082: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
28083: LD_VAR 0 2
28087: PPUSH
28088: LD_VAR 0 3
28092: PPUSH
28093: CALL 28293 0 2
28097: PUSH
28098: LD_VAR 0 11
28102: PUSH
28103: EMPTY
28104: EQUAL
28105: OR
28106: IFFALSE 28051
// if not control in _control then
28108: LD_VAR 0 4
28112: PUSH
28113: LD_VAR 0 12
28117: IN
28118: NOT
28119: IFFALSE 28145
// control := _control [ rand ( 1 , _control ) ] ;
28121: LD_ADDR_VAR 0 4
28125: PUSH
28126: LD_VAR 0 12
28130: PUSH
28131: LD_INT 1
28133: PPUSH
28134: LD_VAR 0 12
28138: PPUSH
28139: CALL_OW 12
28143: ARRAY
28144: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
28145: LD_VAR 0 2
28149: PPUSH
28150: LD_VAR 0 5
28154: PPUSH
28155: CALL 28513 0 2
28159: NOT
28160: IFFALSE 28219
// repeat weapon := _weapon [ 1 ] ;
28162: LD_ADDR_VAR 0 5
28166: PUSH
28167: LD_VAR 0 10
28171: PUSH
28172: LD_INT 1
28174: ARRAY
28175: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
28176: LD_ADDR_VAR 0 10
28180: PUSH
28181: LD_VAR 0 10
28185: PPUSH
28186: LD_INT 1
28188: PPUSH
28189: CALL_OW 3
28193: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
28194: LD_VAR 0 2
28198: PPUSH
28199: LD_VAR 0 5
28203: PPUSH
28204: CALL 28513 0 2
28208: PUSH
28209: LD_VAR 0 10
28213: PUSH
28214: EMPTY
28215: EQUAL
28216: OR
28217: IFFALSE 28162
// result := [ ] ;
28219: LD_ADDR_VAR 0 6
28223: PUSH
28224: EMPTY
28225: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28226: LD_VAR 0 1
28230: PPUSH
28231: LD_VAR 0 2
28235: PPUSH
28236: LD_VAR 0 3
28240: PPUSH
28241: LD_VAR 0 4
28245: PPUSH
28246: LD_VAR 0 5
28250: PPUSH
28251: CALL_OW 448
28255: IFFALSE 28288
// result := [ chassis , engine , control , weapon ] ;
28257: LD_ADDR_VAR 0 6
28261: PUSH
28262: LD_VAR 0 2
28266: PUSH
28267: LD_VAR 0 3
28271: PUSH
28272: LD_VAR 0 4
28276: PUSH
28277: LD_VAR 0 5
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: ST_TO_ADDR
// end ;
28288: LD_VAR 0 6
28292: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
28293: LD_INT 0
28295: PPUSH
// if not chassis or not engine then
28296: LD_VAR 0 1
28300: NOT
28301: PUSH
28302: LD_VAR 0 2
28306: NOT
28307: OR
28308: IFFALSE 28312
// exit ;
28310: GO 28508
// case engine of engine_solar :
28312: LD_VAR 0 2
28316: PUSH
28317: LD_INT 2
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28363
28325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 11
28333: PUSH
28334: LD_INT 12
28336: PUSH
28337: LD_INT 13
28339: PUSH
28340: LD_INT 14
28342: PUSH
28343: LD_INT 1
28345: PUSH
28346: LD_INT 2
28348: PUSH
28349: LD_INT 3
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
28361: GO 28492
28363: LD_INT 1
28365: DOUBLE
28366: EQUAL
28367: IFTRUE 28371
28369: GO 28433
28371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
28372: LD_ADDR_VAR 0 3
28376: PUSH
28377: LD_INT 11
28379: PUSH
28380: LD_INT 12
28382: PUSH
28383: LD_INT 13
28385: PUSH
28386: LD_INT 14
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: LD_INT 3
28397: PUSH
28398: LD_INT 4
28400: PUSH
28401: LD_INT 5
28403: PUSH
28404: LD_INT 21
28406: PUSH
28407: LD_INT 23
28409: PUSH
28410: LD_INT 22
28412: PUSH
28413: LD_INT 24
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: LIST
28423: LIST
28424: LIST
28425: LIST
28426: LIST
28427: LIST
28428: LIST
28429: LIST
28430: ST_TO_ADDR
28431: GO 28492
28433: LD_INT 3
28435: DOUBLE
28436: EQUAL
28437: IFTRUE 28441
28439: GO 28491
28441: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28442: LD_ADDR_VAR 0 3
28446: PUSH
28447: LD_INT 13
28449: PUSH
28450: LD_INT 14
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 3
28458: PUSH
28459: LD_INT 4
28461: PUSH
28462: LD_INT 5
28464: PUSH
28465: LD_INT 21
28467: PUSH
28468: LD_INT 22
28470: PUSH
28471: LD_INT 23
28473: PUSH
28474: LD_INT 24
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: LIST
28481: LIST
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: LIST
28487: LIST
28488: ST_TO_ADDR
28489: GO 28492
28491: POP
// result := ( chassis in result ) ;
28492: LD_ADDR_VAR 0 3
28496: PUSH
28497: LD_VAR 0 1
28501: PUSH
28502: LD_VAR 0 3
28506: IN
28507: ST_TO_ADDR
// end ;
28508: LD_VAR 0 3
28512: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
28513: LD_INT 0
28515: PPUSH
// if not chassis or not weapon then
28516: LD_VAR 0 1
28520: NOT
28521: PUSH
28522: LD_VAR 0 2
28526: NOT
28527: OR
28528: IFFALSE 28532
// exit ;
28530: GO 29594
// case weapon of us_machine_gun :
28532: LD_VAR 0 2
28536: PUSH
28537: LD_INT 2
28539: DOUBLE
28540: EQUAL
28541: IFTRUE 28545
28543: GO 28575
28545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
28546: LD_ADDR_VAR 0 3
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: LD_INT 2
28556: PUSH
28557: LD_INT 3
28559: PUSH
28560: LD_INT 4
28562: PUSH
28563: LD_INT 5
28565: PUSH
28566: EMPTY
28567: LIST
28568: LIST
28569: LIST
28570: LIST
28571: LIST
28572: ST_TO_ADDR
28573: GO 29578
28575: LD_INT 3
28577: DOUBLE
28578: EQUAL
28579: IFTRUE 28583
28581: GO 28613
28583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
28584: LD_ADDR_VAR 0 3
28588: PUSH
28589: LD_INT 1
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: LD_INT 4
28600: PUSH
28601: LD_INT 5
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: ST_TO_ADDR
28611: GO 29578
28613: LD_INT 11
28615: DOUBLE
28616: EQUAL
28617: IFTRUE 28621
28619: GO 28651
28621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
28622: LD_ADDR_VAR 0 3
28626: PUSH
28627: LD_INT 1
28629: PUSH
28630: LD_INT 2
28632: PUSH
28633: LD_INT 3
28635: PUSH
28636: LD_INT 4
28638: PUSH
28639: LD_INT 5
28641: PUSH
28642: EMPTY
28643: LIST
28644: LIST
28645: LIST
28646: LIST
28647: LIST
28648: ST_TO_ADDR
28649: GO 29578
28651: LD_INT 4
28653: DOUBLE
28654: EQUAL
28655: IFTRUE 28659
28657: GO 28685
28659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
28660: LD_ADDR_VAR 0 3
28664: PUSH
28665: LD_INT 2
28667: PUSH
28668: LD_INT 3
28670: PUSH
28671: LD_INT 4
28673: PUSH
28674: LD_INT 5
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 29578
28685: LD_INT 5
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28719
28693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 2
28701: PUSH
28702: LD_INT 3
28704: PUSH
28705: LD_INT 4
28707: PUSH
28708: LD_INT 5
28710: PUSH
28711: EMPTY
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: ST_TO_ADDR
28717: GO 29578
28719: LD_INT 9
28721: DOUBLE
28722: EQUAL
28723: IFTRUE 28727
28725: GO 28753
28727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
28728: LD_ADDR_VAR 0 3
28732: PUSH
28733: LD_INT 2
28735: PUSH
28736: LD_INT 3
28738: PUSH
28739: LD_INT 4
28741: PUSH
28742: LD_INT 5
28744: PUSH
28745: EMPTY
28746: LIST
28747: LIST
28748: LIST
28749: LIST
28750: ST_TO_ADDR
28751: GO 29578
28753: LD_INT 7
28755: DOUBLE
28756: EQUAL
28757: IFTRUE 28761
28759: GO 28787
28761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
28762: LD_ADDR_VAR 0 3
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: LD_INT 3
28772: PUSH
28773: LD_INT 4
28775: PUSH
28776: LD_INT 5
28778: PUSH
28779: EMPTY
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: ST_TO_ADDR
28785: GO 29578
28787: LD_INT 12
28789: DOUBLE
28790: EQUAL
28791: IFTRUE 28795
28793: GO 28821
28795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
28796: LD_ADDR_VAR 0 3
28800: PUSH
28801: LD_INT 2
28803: PUSH
28804: LD_INT 3
28806: PUSH
28807: LD_INT 4
28809: PUSH
28810: LD_INT 5
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: ST_TO_ADDR
28819: GO 29578
28821: LD_INT 13
28823: DOUBLE
28824: EQUAL
28825: IFTRUE 28829
28827: GO 28855
28829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
28830: LD_ADDR_VAR 0 3
28834: PUSH
28835: LD_INT 2
28837: PUSH
28838: LD_INT 3
28840: PUSH
28841: LD_INT 4
28843: PUSH
28844: LD_INT 5
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: LIST
28852: ST_TO_ADDR
28853: GO 29578
28855: LD_INT 14
28857: DOUBLE
28858: EQUAL
28859: IFTRUE 28863
28861: GO 28881
28863: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28864: LD_ADDR_VAR 0 3
28868: PUSH
28869: LD_INT 4
28871: PUSH
28872: LD_INT 5
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: ST_TO_ADDR
28879: GO 29578
28881: LD_INT 6
28883: DOUBLE
28884: EQUAL
28885: IFTRUE 28889
28887: GO 28907
28889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28890: LD_ADDR_VAR 0 3
28894: PUSH
28895: LD_INT 4
28897: PUSH
28898: LD_INT 5
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: ST_TO_ADDR
28905: GO 29578
28907: LD_INT 10
28909: DOUBLE
28910: EQUAL
28911: IFTRUE 28915
28913: GO 28933
28915: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28916: LD_ADDR_VAR 0 3
28920: PUSH
28921: LD_INT 4
28923: PUSH
28924: LD_INT 5
28926: PUSH
28927: EMPTY
28928: LIST
28929: LIST
28930: ST_TO_ADDR
28931: GO 29578
28933: LD_INT 22
28935: DOUBLE
28936: EQUAL
28937: IFTRUE 28941
28939: GO 28967
28941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_INT 11
28949: PUSH
28950: LD_INT 12
28952: PUSH
28953: LD_INT 13
28955: PUSH
28956: LD_INT 14
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: LIST
28964: ST_TO_ADDR
28965: GO 29578
28967: LD_INT 23
28969: DOUBLE
28970: EQUAL
28971: IFTRUE 28975
28973: GO 29001
28975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28976: LD_ADDR_VAR 0 3
28980: PUSH
28981: LD_INT 11
28983: PUSH
28984: LD_INT 12
28986: PUSH
28987: LD_INT 13
28989: PUSH
28990: LD_INT 14
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: ST_TO_ADDR
28999: GO 29578
29001: LD_INT 24
29003: DOUBLE
29004: EQUAL
29005: IFTRUE 29009
29007: GO 29035
29009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
29010: LD_ADDR_VAR 0 3
29014: PUSH
29015: LD_INT 11
29017: PUSH
29018: LD_INT 12
29020: PUSH
29021: LD_INT 13
29023: PUSH
29024: LD_INT 14
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: ST_TO_ADDR
29033: GO 29578
29035: LD_INT 30
29037: DOUBLE
29038: EQUAL
29039: IFTRUE 29043
29041: GO 29069
29043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
29044: LD_ADDR_VAR 0 3
29048: PUSH
29049: LD_INT 11
29051: PUSH
29052: LD_INT 12
29054: PUSH
29055: LD_INT 13
29057: PUSH
29058: LD_INT 14
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: ST_TO_ADDR
29067: GO 29578
29069: LD_INT 25
29071: DOUBLE
29072: EQUAL
29073: IFTRUE 29077
29075: GO 29095
29077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
29078: LD_ADDR_VAR 0 3
29082: PUSH
29083: LD_INT 13
29085: PUSH
29086: LD_INT 14
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: ST_TO_ADDR
29093: GO 29578
29095: LD_INT 27
29097: DOUBLE
29098: EQUAL
29099: IFTRUE 29103
29101: GO 29121
29103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
29104: LD_ADDR_VAR 0 3
29108: PUSH
29109: LD_INT 13
29111: PUSH
29112: LD_INT 14
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: ST_TO_ADDR
29119: GO 29578
29121: LD_EXP 29
29125: DOUBLE
29126: EQUAL
29127: IFTRUE 29131
29129: GO 29157
29131: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
29132: LD_ADDR_VAR 0 3
29136: PUSH
29137: LD_INT 11
29139: PUSH
29140: LD_INT 12
29142: PUSH
29143: LD_INT 13
29145: PUSH
29146: LD_INT 14
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: ST_TO_ADDR
29155: GO 29578
29157: LD_INT 28
29159: DOUBLE
29160: EQUAL
29161: IFTRUE 29165
29163: GO 29183
29165: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
29166: LD_ADDR_VAR 0 3
29170: PUSH
29171: LD_INT 13
29173: PUSH
29174: LD_INT 14
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: ST_TO_ADDR
29181: GO 29578
29183: LD_INT 29
29185: DOUBLE
29186: EQUAL
29187: IFTRUE 29191
29189: GO 29209
29191: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
29192: LD_ADDR_VAR 0 3
29196: PUSH
29197: LD_INT 13
29199: PUSH
29200: LD_INT 14
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: ST_TO_ADDR
29207: GO 29578
29209: LD_INT 31
29211: DOUBLE
29212: EQUAL
29213: IFTRUE 29217
29215: GO 29235
29217: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
29218: LD_ADDR_VAR 0 3
29222: PUSH
29223: LD_INT 13
29225: PUSH
29226: LD_INT 14
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: ST_TO_ADDR
29233: GO 29578
29235: LD_INT 26
29237: DOUBLE
29238: EQUAL
29239: IFTRUE 29243
29241: GO 29261
29243: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
29244: LD_ADDR_VAR 0 3
29248: PUSH
29249: LD_INT 13
29251: PUSH
29252: LD_INT 14
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: ST_TO_ADDR
29259: GO 29578
29261: LD_INT 42
29263: DOUBLE
29264: EQUAL
29265: IFTRUE 29269
29267: GO 29295
29269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
29270: LD_ADDR_VAR 0 3
29274: PUSH
29275: LD_INT 21
29277: PUSH
29278: LD_INT 22
29280: PUSH
29281: LD_INT 23
29283: PUSH
29284: LD_INT 24
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: ST_TO_ADDR
29293: GO 29578
29295: LD_INT 43
29297: DOUBLE
29298: EQUAL
29299: IFTRUE 29303
29301: GO 29329
29303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
29304: LD_ADDR_VAR 0 3
29308: PUSH
29309: LD_INT 21
29311: PUSH
29312: LD_INT 22
29314: PUSH
29315: LD_INT 23
29317: PUSH
29318: LD_INT 24
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: ST_TO_ADDR
29327: GO 29578
29329: LD_INT 44
29331: DOUBLE
29332: EQUAL
29333: IFTRUE 29337
29335: GO 29363
29337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
29338: LD_ADDR_VAR 0 3
29342: PUSH
29343: LD_INT 21
29345: PUSH
29346: LD_INT 22
29348: PUSH
29349: LD_INT 23
29351: PUSH
29352: LD_INT 24
29354: PUSH
29355: EMPTY
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: ST_TO_ADDR
29361: GO 29578
29363: LD_INT 45
29365: DOUBLE
29366: EQUAL
29367: IFTRUE 29371
29369: GO 29397
29371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_INT 21
29379: PUSH
29380: LD_INT 22
29382: PUSH
29383: LD_INT 23
29385: PUSH
29386: LD_INT 24
29388: PUSH
29389: EMPTY
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: ST_TO_ADDR
29395: GO 29578
29397: LD_INT 49
29399: DOUBLE
29400: EQUAL
29401: IFTRUE 29405
29403: GO 29431
29405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
29406: LD_ADDR_VAR 0 3
29410: PUSH
29411: LD_INT 21
29413: PUSH
29414: LD_INT 22
29416: PUSH
29417: LD_INT 23
29419: PUSH
29420: LD_INT 24
29422: PUSH
29423: EMPTY
29424: LIST
29425: LIST
29426: LIST
29427: LIST
29428: ST_TO_ADDR
29429: GO 29578
29431: LD_INT 51
29433: DOUBLE
29434: EQUAL
29435: IFTRUE 29439
29437: GO 29465
29439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 21
29447: PUSH
29448: LD_INT 22
29450: PUSH
29451: LD_INT 23
29453: PUSH
29454: LD_INT 24
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: ST_TO_ADDR
29463: GO 29578
29465: LD_INT 52
29467: DOUBLE
29468: EQUAL
29469: IFTRUE 29473
29471: GO 29499
29473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
29474: LD_ADDR_VAR 0 3
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 22
29484: PUSH
29485: LD_INT 23
29487: PUSH
29488: LD_INT 24
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: LIST
29495: LIST
29496: ST_TO_ADDR
29497: GO 29578
29499: LD_INT 53
29501: DOUBLE
29502: EQUAL
29503: IFTRUE 29507
29505: GO 29525
29507: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
29508: LD_ADDR_VAR 0 3
29512: PUSH
29513: LD_INT 23
29515: PUSH
29516: LD_INT 24
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: ST_TO_ADDR
29523: GO 29578
29525: LD_INT 46
29527: DOUBLE
29528: EQUAL
29529: IFTRUE 29533
29531: GO 29551
29533: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
29534: LD_ADDR_VAR 0 3
29538: PUSH
29539: LD_INT 23
29541: PUSH
29542: LD_INT 24
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: ST_TO_ADDR
29549: GO 29578
29551: LD_INT 47
29553: DOUBLE
29554: EQUAL
29555: IFTRUE 29559
29557: GO 29577
29559: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29560: LD_ADDR_VAR 0 3
29564: PUSH
29565: LD_INT 23
29567: PUSH
29568: LD_INT 24
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: ST_TO_ADDR
29575: GO 29578
29577: POP
// result := ( chassis in result ) ;
29578: LD_ADDR_VAR 0 3
29582: PUSH
29583: LD_VAR 0 1
29587: PUSH
29588: LD_VAR 0 3
29592: IN
29593: ST_TO_ADDR
// end ;
29594: LD_VAR 0 3
29598: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
29599: LD_INT 0
29601: PPUSH
29602: PPUSH
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
29607: PPUSH
// result := array ;
29608: LD_ADDR_VAR 0 5
29612: PUSH
29613: LD_VAR 0 1
29617: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
29618: LD_VAR 0 1
29622: NOT
29623: PUSH
29624: LD_VAR 0 2
29628: NOT
29629: OR
29630: PUSH
29631: LD_VAR 0 3
29635: NOT
29636: OR
29637: PUSH
29638: LD_VAR 0 2
29642: PUSH
29643: LD_VAR 0 1
29647: GREATER
29648: OR
29649: PUSH
29650: LD_VAR 0 3
29654: PUSH
29655: LD_VAR 0 1
29659: GREATER
29660: OR
29661: IFFALSE 29665
// exit ;
29663: GO 29961
// if direction then
29665: LD_VAR 0 4
29669: IFFALSE 29733
// begin d := 1 ;
29671: LD_ADDR_VAR 0 9
29675: PUSH
29676: LD_INT 1
29678: ST_TO_ADDR
// if i_from > i_to then
29679: LD_VAR 0 2
29683: PUSH
29684: LD_VAR 0 3
29688: GREATER
29689: IFFALSE 29715
// length := ( array - i_from ) + i_to else
29691: LD_ADDR_VAR 0 11
29695: PUSH
29696: LD_VAR 0 1
29700: PUSH
29701: LD_VAR 0 2
29705: MINUS
29706: PUSH
29707: LD_VAR 0 3
29711: PLUS
29712: ST_TO_ADDR
29713: GO 29731
// length := i_to - i_from ;
29715: LD_ADDR_VAR 0 11
29719: PUSH
29720: LD_VAR 0 3
29724: PUSH
29725: LD_VAR 0 2
29729: MINUS
29730: ST_TO_ADDR
// end else
29731: GO 29794
// begin d := - 1 ;
29733: LD_ADDR_VAR 0 9
29737: PUSH
29738: LD_INT 1
29740: NEG
29741: ST_TO_ADDR
// if i_from > i_to then
29742: LD_VAR 0 2
29746: PUSH
29747: LD_VAR 0 3
29751: GREATER
29752: IFFALSE 29772
// length := i_from - i_to else
29754: LD_ADDR_VAR 0 11
29758: PUSH
29759: LD_VAR 0 2
29763: PUSH
29764: LD_VAR 0 3
29768: MINUS
29769: ST_TO_ADDR
29770: GO 29794
// length := ( array - i_to ) + i_from ;
29772: LD_ADDR_VAR 0 11
29776: PUSH
29777: LD_VAR 0 1
29781: PUSH
29782: LD_VAR 0 3
29786: MINUS
29787: PUSH
29788: LD_VAR 0 2
29792: PLUS
29793: ST_TO_ADDR
// end ; if not length then
29794: LD_VAR 0 11
29798: NOT
29799: IFFALSE 29803
// exit ;
29801: GO 29961
// tmp := array ;
29803: LD_ADDR_VAR 0 10
29807: PUSH
29808: LD_VAR 0 1
29812: ST_TO_ADDR
// for i = 1 to length do
29813: LD_ADDR_VAR 0 6
29817: PUSH
29818: DOUBLE
29819: LD_INT 1
29821: DEC
29822: ST_TO_ADDR
29823: LD_VAR 0 11
29827: PUSH
29828: FOR_TO
29829: IFFALSE 29949
// begin for j = 1 to array do
29831: LD_ADDR_VAR 0 7
29835: PUSH
29836: DOUBLE
29837: LD_INT 1
29839: DEC
29840: ST_TO_ADDR
29841: LD_VAR 0 1
29845: PUSH
29846: FOR_TO
29847: IFFALSE 29935
// begin k := j + d ;
29849: LD_ADDR_VAR 0 8
29853: PUSH
29854: LD_VAR 0 7
29858: PUSH
29859: LD_VAR 0 9
29863: PLUS
29864: ST_TO_ADDR
// if k > array then
29865: LD_VAR 0 8
29869: PUSH
29870: LD_VAR 0 1
29874: GREATER
29875: IFFALSE 29885
// k := 1 ;
29877: LD_ADDR_VAR 0 8
29881: PUSH
29882: LD_INT 1
29884: ST_TO_ADDR
// if not k then
29885: LD_VAR 0 8
29889: NOT
29890: IFFALSE 29902
// k := array ;
29892: LD_ADDR_VAR 0 8
29896: PUSH
29897: LD_VAR 0 1
29901: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29902: LD_ADDR_VAR 0 10
29906: PUSH
29907: LD_VAR 0 10
29911: PPUSH
29912: LD_VAR 0 8
29916: PPUSH
29917: LD_VAR 0 1
29921: PUSH
29922: LD_VAR 0 7
29926: ARRAY
29927: PPUSH
29928: CALL_OW 1
29932: ST_TO_ADDR
// end ;
29933: GO 29846
29935: POP
29936: POP
// array := tmp ;
29937: LD_ADDR_VAR 0 1
29941: PUSH
29942: LD_VAR 0 10
29946: ST_TO_ADDR
// end ;
29947: GO 29828
29949: POP
29950: POP
// result := array ;
29951: LD_ADDR_VAR 0 5
29955: PUSH
29956: LD_VAR 0 1
29960: ST_TO_ADDR
// end ;
29961: LD_VAR 0 5
29965: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29966: LD_INT 0
29968: PPUSH
29969: PPUSH
// result := 0 ;
29970: LD_ADDR_VAR 0 3
29974: PUSH
29975: LD_INT 0
29977: ST_TO_ADDR
// if not array or not value in array then
29978: LD_VAR 0 1
29982: NOT
29983: PUSH
29984: LD_VAR 0 2
29988: PUSH
29989: LD_VAR 0 1
29993: IN
29994: NOT
29995: OR
29996: IFFALSE 30000
// exit ;
29998: GO 30054
// for i = 1 to array do
30000: LD_ADDR_VAR 0 4
30004: PUSH
30005: DOUBLE
30006: LD_INT 1
30008: DEC
30009: ST_TO_ADDR
30010: LD_VAR 0 1
30014: PUSH
30015: FOR_TO
30016: IFFALSE 30052
// if value = array [ i ] then
30018: LD_VAR 0 2
30022: PUSH
30023: LD_VAR 0 1
30027: PUSH
30028: LD_VAR 0 4
30032: ARRAY
30033: EQUAL
30034: IFFALSE 30050
// begin result := i ;
30036: LD_ADDR_VAR 0 3
30040: PUSH
30041: LD_VAR 0 4
30045: ST_TO_ADDR
// exit ;
30046: POP
30047: POP
30048: GO 30054
// end ;
30050: GO 30015
30052: POP
30053: POP
// end ;
30054: LD_VAR 0 3
30058: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
30059: LD_INT 0
30061: PPUSH
// vc_chassis := chassis ;
30062: LD_ADDR_OWVAR 37
30066: PUSH
30067: LD_VAR 0 1
30071: ST_TO_ADDR
// vc_engine := engine ;
30072: LD_ADDR_OWVAR 39
30076: PUSH
30077: LD_VAR 0 2
30081: ST_TO_ADDR
// vc_control := control ;
30082: LD_ADDR_OWVAR 38
30086: PUSH
30087: LD_VAR 0 3
30091: ST_TO_ADDR
// vc_weapon := weapon ;
30092: LD_ADDR_OWVAR 40
30096: PUSH
30097: LD_VAR 0 4
30101: ST_TO_ADDR
// vc_fuel_battery := fuel ;
30102: LD_ADDR_OWVAR 41
30106: PUSH
30107: LD_VAR 0 5
30111: ST_TO_ADDR
// end ;
30112: LD_VAR 0 6
30116: RET
// export function WantPlant ( unit ) ; var task ; begin
30117: LD_INT 0
30119: PPUSH
30120: PPUSH
// result := false ;
30121: LD_ADDR_VAR 0 2
30125: PUSH
30126: LD_INT 0
30128: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
30129: LD_ADDR_VAR 0 3
30133: PUSH
30134: LD_VAR 0 1
30138: PPUSH
30139: CALL_OW 437
30143: ST_TO_ADDR
// if task then
30144: LD_VAR 0 3
30148: IFFALSE 30176
// if task [ 1 ] [ 1 ] = p then
30150: LD_VAR 0 3
30154: PUSH
30155: LD_INT 1
30157: ARRAY
30158: PUSH
30159: LD_INT 1
30161: ARRAY
30162: PUSH
30163: LD_STRING p
30165: EQUAL
30166: IFFALSE 30176
// result := true ;
30168: LD_ADDR_VAR 0 2
30172: PUSH
30173: LD_INT 1
30175: ST_TO_ADDR
// end ;
30176: LD_VAR 0 2
30180: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
30181: LD_INT 0
30183: PPUSH
30184: PPUSH
30185: PPUSH
30186: PPUSH
// if pos < 1 then
30187: LD_VAR 0 2
30191: PUSH
30192: LD_INT 1
30194: LESS
30195: IFFALSE 30199
// exit ;
30197: GO 30502
// if pos = 1 then
30199: LD_VAR 0 2
30203: PUSH
30204: LD_INT 1
30206: EQUAL
30207: IFFALSE 30240
// result := Replace ( arr , pos [ 1 ] , value ) else
30209: LD_ADDR_VAR 0 4
30213: PUSH
30214: LD_VAR 0 1
30218: PPUSH
30219: LD_VAR 0 2
30223: PUSH
30224: LD_INT 1
30226: ARRAY
30227: PPUSH
30228: LD_VAR 0 3
30232: PPUSH
30233: CALL_OW 1
30237: ST_TO_ADDR
30238: GO 30502
// begin tmp := arr ;
30240: LD_ADDR_VAR 0 6
30244: PUSH
30245: LD_VAR 0 1
30249: ST_TO_ADDR
// s_arr := [ tmp ] ;
30250: LD_ADDR_VAR 0 7
30254: PUSH
30255: LD_VAR 0 6
30259: PUSH
30260: EMPTY
30261: LIST
30262: ST_TO_ADDR
// for i = 1 to pos - 1 do
30263: LD_ADDR_VAR 0 5
30267: PUSH
30268: DOUBLE
30269: LD_INT 1
30271: DEC
30272: ST_TO_ADDR
30273: LD_VAR 0 2
30277: PUSH
30278: LD_INT 1
30280: MINUS
30281: PUSH
30282: FOR_TO
30283: IFFALSE 30328
// begin tmp := tmp [ pos [ i ] ] ;
30285: LD_ADDR_VAR 0 6
30289: PUSH
30290: LD_VAR 0 6
30294: PUSH
30295: LD_VAR 0 2
30299: PUSH
30300: LD_VAR 0 5
30304: ARRAY
30305: ARRAY
30306: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
30307: LD_ADDR_VAR 0 7
30311: PUSH
30312: LD_VAR 0 7
30316: PUSH
30317: LD_VAR 0 6
30321: PUSH
30322: EMPTY
30323: LIST
30324: ADD
30325: ST_TO_ADDR
// end ;
30326: GO 30282
30328: POP
30329: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
30330: LD_ADDR_VAR 0 6
30334: PUSH
30335: LD_VAR 0 6
30339: PPUSH
30340: LD_VAR 0 2
30344: PUSH
30345: LD_VAR 0 2
30349: ARRAY
30350: PPUSH
30351: LD_VAR 0 3
30355: PPUSH
30356: CALL_OW 1
30360: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
30361: LD_ADDR_VAR 0 7
30365: PUSH
30366: LD_VAR 0 7
30370: PPUSH
30371: LD_VAR 0 7
30375: PPUSH
30376: LD_VAR 0 6
30380: PPUSH
30381: CALL_OW 1
30385: ST_TO_ADDR
// for i = s_arr downto 2 do
30386: LD_ADDR_VAR 0 5
30390: PUSH
30391: DOUBLE
30392: LD_VAR 0 7
30396: INC
30397: ST_TO_ADDR
30398: LD_INT 2
30400: PUSH
30401: FOR_DOWNTO
30402: IFFALSE 30486
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
30404: LD_ADDR_VAR 0 6
30408: PUSH
30409: LD_VAR 0 7
30413: PUSH
30414: LD_VAR 0 5
30418: PUSH
30419: LD_INT 1
30421: MINUS
30422: ARRAY
30423: PPUSH
30424: LD_VAR 0 2
30428: PUSH
30429: LD_VAR 0 5
30433: PUSH
30434: LD_INT 1
30436: MINUS
30437: ARRAY
30438: PPUSH
30439: LD_VAR 0 7
30443: PUSH
30444: LD_VAR 0 5
30448: ARRAY
30449: PPUSH
30450: CALL_OW 1
30454: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
30455: LD_ADDR_VAR 0 7
30459: PUSH
30460: LD_VAR 0 7
30464: PPUSH
30465: LD_VAR 0 5
30469: PUSH
30470: LD_INT 1
30472: MINUS
30473: PPUSH
30474: LD_VAR 0 6
30478: PPUSH
30479: CALL_OW 1
30483: ST_TO_ADDR
// end ;
30484: GO 30401
30486: POP
30487: POP
// result := s_arr [ 1 ] ;
30488: LD_ADDR_VAR 0 4
30492: PUSH
30493: LD_VAR 0 7
30497: PUSH
30498: LD_INT 1
30500: ARRAY
30501: ST_TO_ADDR
// end ; end ;
30502: LD_VAR 0 4
30506: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
30507: LD_INT 0
30509: PPUSH
30510: PPUSH
// if not list then
30511: LD_VAR 0 1
30515: NOT
30516: IFFALSE 30520
// exit ;
30518: GO 30611
// i := list [ pos1 ] ;
30520: LD_ADDR_VAR 0 5
30524: PUSH
30525: LD_VAR 0 1
30529: PUSH
30530: LD_VAR 0 2
30534: ARRAY
30535: ST_TO_ADDR
// if not i then
30536: LD_VAR 0 5
30540: NOT
30541: IFFALSE 30545
// exit ;
30543: GO 30611
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
30545: LD_ADDR_VAR 0 1
30549: PUSH
30550: LD_VAR 0 1
30554: PPUSH
30555: LD_VAR 0 2
30559: PPUSH
30560: LD_VAR 0 1
30564: PUSH
30565: LD_VAR 0 3
30569: ARRAY
30570: PPUSH
30571: CALL_OW 1
30575: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
30576: LD_ADDR_VAR 0 1
30580: PUSH
30581: LD_VAR 0 1
30585: PPUSH
30586: LD_VAR 0 3
30590: PPUSH
30591: LD_VAR 0 5
30595: PPUSH
30596: CALL_OW 1
30600: ST_TO_ADDR
// result := list ;
30601: LD_ADDR_VAR 0 4
30605: PUSH
30606: LD_VAR 0 1
30610: ST_TO_ADDR
// end ;
30611: LD_VAR 0 4
30615: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
30616: LD_INT 0
30618: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
30619: LD_ADDR_VAR 0 5
30623: PUSH
30624: LD_VAR 0 1
30628: PPUSH
30629: CALL_OW 250
30633: PPUSH
30634: LD_VAR 0 1
30638: PPUSH
30639: CALL_OW 251
30643: PPUSH
30644: LD_VAR 0 2
30648: PPUSH
30649: LD_VAR 0 3
30653: PPUSH
30654: LD_VAR 0 4
30658: PPUSH
30659: CALL 30669 0 5
30663: ST_TO_ADDR
// end ;
30664: LD_VAR 0 5
30668: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
30669: LD_INT 0
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
// if not list then
30675: LD_VAR 0 3
30679: NOT
30680: IFFALSE 30684
// exit ;
30682: GO 31072
// result := [ ] ;
30684: LD_ADDR_VAR 0 6
30688: PUSH
30689: EMPTY
30690: ST_TO_ADDR
// for i in list do
30691: LD_ADDR_VAR 0 7
30695: PUSH
30696: LD_VAR 0 3
30700: PUSH
30701: FOR_IN
30702: IFFALSE 30904
// begin tmp := GetDistUnitXY ( i , x , y ) ;
30704: LD_ADDR_VAR 0 9
30708: PUSH
30709: LD_VAR 0 7
30713: PPUSH
30714: LD_VAR 0 1
30718: PPUSH
30719: LD_VAR 0 2
30723: PPUSH
30724: CALL_OW 297
30728: ST_TO_ADDR
// if not result then
30729: LD_VAR 0 6
30733: NOT
30734: IFFALSE 30760
// result := [ [ i , tmp ] ] else
30736: LD_ADDR_VAR 0 6
30740: PUSH
30741: LD_VAR 0 7
30745: PUSH
30746: LD_VAR 0 9
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: EMPTY
30756: LIST
30757: ST_TO_ADDR
30758: GO 30902
// begin if result [ result ] [ 2 ] < tmp then
30760: LD_VAR 0 6
30764: PUSH
30765: LD_VAR 0 6
30769: ARRAY
30770: PUSH
30771: LD_INT 2
30773: ARRAY
30774: PUSH
30775: LD_VAR 0 9
30779: LESS
30780: IFFALSE 30822
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
30782: LD_ADDR_VAR 0 6
30786: PUSH
30787: LD_VAR 0 6
30791: PPUSH
30792: LD_VAR 0 6
30796: PUSH
30797: LD_INT 1
30799: PLUS
30800: PPUSH
30801: LD_VAR 0 7
30805: PUSH
30806: LD_VAR 0 9
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 2
30819: ST_TO_ADDR
30820: GO 30902
// for j = 1 to result do
30822: LD_ADDR_VAR 0 8
30826: PUSH
30827: DOUBLE
30828: LD_INT 1
30830: DEC
30831: ST_TO_ADDR
30832: LD_VAR 0 6
30836: PUSH
30837: FOR_TO
30838: IFFALSE 30900
// begin if tmp < result [ j ] [ 2 ] then
30840: LD_VAR 0 9
30844: PUSH
30845: LD_VAR 0 6
30849: PUSH
30850: LD_VAR 0 8
30854: ARRAY
30855: PUSH
30856: LD_INT 2
30858: ARRAY
30859: LESS
30860: IFFALSE 30898
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30862: LD_ADDR_VAR 0 6
30866: PUSH
30867: LD_VAR 0 6
30871: PPUSH
30872: LD_VAR 0 8
30876: PPUSH
30877: LD_VAR 0 7
30881: PUSH
30882: LD_VAR 0 9
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: PPUSH
30891: CALL_OW 2
30895: ST_TO_ADDR
// break ;
30896: GO 30900
// end ; end ;
30898: GO 30837
30900: POP
30901: POP
// end ; end ;
30902: GO 30701
30904: POP
30905: POP
// if result and not asc then
30906: LD_VAR 0 6
30910: PUSH
30911: LD_VAR 0 4
30915: NOT
30916: AND
30917: IFFALSE 30992
// begin tmp := result ;
30919: LD_ADDR_VAR 0 9
30923: PUSH
30924: LD_VAR 0 6
30928: ST_TO_ADDR
// for i = tmp downto 1 do
30929: LD_ADDR_VAR 0 7
30933: PUSH
30934: DOUBLE
30935: LD_VAR 0 9
30939: INC
30940: ST_TO_ADDR
30941: LD_INT 1
30943: PUSH
30944: FOR_DOWNTO
30945: IFFALSE 30990
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30947: LD_ADDR_VAR 0 6
30951: PUSH
30952: LD_VAR 0 6
30956: PPUSH
30957: LD_VAR 0 9
30961: PUSH
30962: LD_VAR 0 7
30966: MINUS
30967: PUSH
30968: LD_INT 1
30970: PLUS
30971: PPUSH
30972: LD_VAR 0 9
30976: PUSH
30977: LD_VAR 0 7
30981: ARRAY
30982: PPUSH
30983: CALL_OW 1
30987: ST_TO_ADDR
30988: GO 30944
30990: POP
30991: POP
// end ; tmp := [ ] ;
30992: LD_ADDR_VAR 0 9
30996: PUSH
30997: EMPTY
30998: ST_TO_ADDR
// if mode then
30999: LD_VAR 0 5
31003: IFFALSE 31072
// begin for i = 1 to result do
31005: LD_ADDR_VAR 0 7
31009: PUSH
31010: DOUBLE
31011: LD_INT 1
31013: DEC
31014: ST_TO_ADDR
31015: LD_VAR 0 6
31019: PUSH
31020: FOR_TO
31021: IFFALSE 31060
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
31023: LD_ADDR_VAR 0 9
31027: PUSH
31028: LD_VAR 0 9
31032: PPUSH
31033: LD_VAR 0 7
31037: PPUSH
31038: LD_VAR 0 6
31042: PUSH
31043: LD_VAR 0 7
31047: ARRAY
31048: PUSH
31049: LD_INT 1
31051: ARRAY
31052: PPUSH
31053: CALL_OW 1
31057: ST_TO_ADDR
31058: GO 31020
31060: POP
31061: POP
// result := tmp ;
31062: LD_ADDR_VAR 0 6
31066: PUSH
31067: LD_VAR 0 9
31071: ST_TO_ADDR
// end ; end ;
31072: LD_VAR 0 6
31076: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
31077: LD_INT 0
31079: PPUSH
31080: PPUSH
31081: PPUSH
31082: PPUSH
31083: PPUSH
31084: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
31085: LD_ADDR_VAR 0 5
31089: PUSH
31090: LD_INT 0
31092: PUSH
31093: LD_INT 0
31095: PUSH
31096: LD_INT 0
31098: PUSH
31099: EMPTY
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
// if not x or not y then
31107: LD_VAR 0 2
31111: NOT
31112: PUSH
31113: LD_VAR 0 3
31117: NOT
31118: OR
31119: IFFALSE 31123
// exit ;
31121: GO 32775
// if not range then
31123: LD_VAR 0 4
31127: NOT
31128: IFFALSE 31138
// range := 10 ;
31130: LD_ADDR_VAR 0 4
31134: PUSH
31135: LD_INT 10
31137: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31138: LD_ADDR_VAR 0 8
31142: PUSH
31143: LD_INT 81
31145: PUSH
31146: LD_VAR 0 1
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: LD_INT 92
31157: PUSH
31158: LD_VAR 0 2
31162: PUSH
31163: LD_VAR 0 3
31167: PUSH
31168: LD_VAR 0 4
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 3
31181: PUSH
31182: LD_INT 21
31184: PUSH
31185: LD_INT 3
31187: PUSH
31188: EMPTY
31189: LIST
31190: LIST
31191: PUSH
31192: EMPTY
31193: LIST
31194: LIST
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: LIST
31200: PPUSH
31201: CALL_OW 69
31205: ST_TO_ADDR
// if not tmp then
31206: LD_VAR 0 8
31210: NOT
31211: IFFALSE 31215
// exit ;
31213: GO 32775
// for i in tmp do
31215: LD_ADDR_VAR 0 6
31219: PUSH
31220: LD_VAR 0 8
31224: PUSH
31225: FOR_IN
31226: IFFALSE 32750
// begin points := [ 0 , 0 , 0 ] ;
31228: LD_ADDR_VAR 0 9
31232: PUSH
31233: LD_INT 0
31235: PUSH
31236: LD_INT 0
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: ST_TO_ADDR
// bpoints := 1 ;
31247: LD_ADDR_VAR 0 10
31251: PUSH
31252: LD_INT 1
31254: ST_TO_ADDR
// case GetType ( i ) of unit_human :
31255: LD_VAR 0 6
31259: PPUSH
31260: CALL_OW 247
31264: PUSH
31265: LD_INT 1
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31851
31273: POP
// begin if GetClass ( i ) = 1 then
31274: LD_VAR 0 6
31278: PPUSH
31279: CALL_OW 257
31283: PUSH
31284: LD_INT 1
31286: EQUAL
31287: IFFALSE 31308
// points := [ 10 , 5 , 3 ] ;
31289: LD_ADDR_VAR 0 9
31293: PUSH
31294: LD_INT 10
31296: PUSH
31297: LD_INT 5
31299: PUSH
31300: LD_INT 3
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: LIST
31307: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
31308: LD_VAR 0 6
31312: PPUSH
31313: CALL_OW 257
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 3
31323: PUSH
31324: LD_INT 4
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: IN
31332: IFFALSE 31353
// points := [ 3 , 2 , 1 ] ;
31334: LD_ADDR_VAR 0 9
31338: PUSH
31339: LD_INT 3
31341: PUSH
31342: LD_INT 2
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: LIST
31352: ST_TO_ADDR
// if GetClass ( i ) = 5 then
31353: LD_VAR 0 6
31357: PPUSH
31358: CALL_OW 257
31362: PUSH
31363: LD_INT 5
31365: EQUAL
31366: IFFALSE 31387
// points := [ 130 , 5 , 2 ] ;
31368: LD_ADDR_VAR 0 9
31372: PUSH
31373: LD_INT 130
31375: PUSH
31376: LD_INT 5
31378: PUSH
31379: LD_INT 2
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: LIST
31386: ST_TO_ADDR
// if GetClass ( i ) = 8 then
31387: LD_VAR 0 6
31391: PPUSH
31392: CALL_OW 257
31396: PUSH
31397: LD_INT 8
31399: EQUAL
31400: IFFALSE 31421
// points := [ 35 , 35 , 30 ] ;
31402: LD_ADDR_VAR 0 9
31406: PUSH
31407: LD_INT 35
31409: PUSH
31410: LD_INT 35
31412: PUSH
31413: LD_INT 30
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: ST_TO_ADDR
// if GetClass ( i ) = 9 then
31421: LD_VAR 0 6
31425: PPUSH
31426: CALL_OW 257
31430: PUSH
31431: LD_INT 9
31433: EQUAL
31434: IFFALSE 31455
// points := [ 20 , 55 , 40 ] ;
31436: LD_ADDR_VAR 0 9
31440: PUSH
31441: LD_INT 20
31443: PUSH
31444: LD_INT 55
31446: PUSH
31447: LD_INT 40
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: LIST
31454: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
31455: LD_VAR 0 6
31459: PPUSH
31460: CALL_OW 257
31464: PUSH
31465: LD_INT 12
31467: PUSH
31468: LD_INT 16
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: IN
31475: IFFALSE 31496
// points := [ 5 , 3 , 2 ] ;
31477: LD_ADDR_VAR 0 9
31481: PUSH
31482: LD_INT 5
31484: PUSH
31485: LD_INT 3
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: LIST
31495: ST_TO_ADDR
// if GetClass ( i ) = 17 then
31496: LD_VAR 0 6
31500: PPUSH
31501: CALL_OW 257
31505: PUSH
31506: LD_INT 17
31508: EQUAL
31509: IFFALSE 31530
// points := [ 100 , 50 , 75 ] ;
31511: LD_ADDR_VAR 0 9
31515: PUSH
31516: LD_INT 100
31518: PUSH
31519: LD_INT 50
31521: PUSH
31522: LD_INT 75
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: LIST
31529: ST_TO_ADDR
// if GetClass ( i ) = 15 then
31530: LD_VAR 0 6
31534: PPUSH
31535: CALL_OW 257
31539: PUSH
31540: LD_INT 15
31542: EQUAL
31543: IFFALSE 31564
// points := [ 10 , 5 , 3 ] ;
31545: LD_ADDR_VAR 0 9
31549: PUSH
31550: LD_INT 10
31552: PUSH
31553: LD_INT 5
31555: PUSH
31556: LD_INT 3
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: LIST
31563: ST_TO_ADDR
// if GetClass ( i ) = 14 then
31564: LD_VAR 0 6
31568: PPUSH
31569: CALL_OW 257
31573: PUSH
31574: LD_INT 14
31576: EQUAL
31577: IFFALSE 31598
// points := [ 10 , 0 , 0 ] ;
31579: LD_ADDR_VAR 0 9
31583: PUSH
31584: LD_INT 10
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: LD_INT 0
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: LIST
31597: ST_TO_ADDR
// if GetClass ( i ) = 11 then
31598: LD_VAR 0 6
31602: PPUSH
31603: CALL_OW 257
31607: PUSH
31608: LD_INT 11
31610: EQUAL
31611: IFFALSE 31632
// points := [ 30 , 10 , 5 ] ;
31613: LD_ADDR_VAR 0 9
31617: PUSH
31618: LD_INT 30
31620: PUSH
31621: LD_INT 10
31623: PUSH
31624: LD_INT 5
31626: PUSH
31627: EMPTY
31628: LIST
31629: LIST
31630: LIST
31631: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
31632: LD_VAR 0 1
31636: PPUSH
31637: LD_INT 5
31639: PPUSH
31640: CALL_OW 321
31644: PUSH
31645: LD_INT 2
31647: EQUAL
31648: IFFALSE 31665
// bpoints := bpoints * 1.8 ;
31650: LD_ADDR_VAR 0 10
31654: PUSH
31655: LD_VAR 0 10
31659: PUSH
31660: LD_REAL  1.80000000000000E+0000
31663: MUL
31664: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
31665: LD_VAR 0 6
31669: PPUSH
31670: CALL_OW 257
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: LD_INT 2
31680: PUSH
31681: LD_INT 3
31683: PUSH
31684: LD_INT 4
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: IN
31693: PUSH
31694: LD_VAR 0 1
31698: PPUSH
31699: LD_INT 51
31701: PPUSH
31702: CALL_OW 321
31706: PUSH
31707: LD_INT 2
31709: EQUAL
31710: AND
31711: IFFALSE 31728
// bpoints := bpoints * 1.2 ;
31713: LD_ADDR_VAR 0 10
31717: PUSH
31718: LD_VAR 0 10
31722: PUSH
31723: LD_REAL  1.20000000000000E+0000
31726: MUL
31727: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
31728: LD_VAR 0 6
31732: PPUSH
31733: CALL_OW 257
31737: PUSH
31738: LD_INT 5
31740: PUSH
31741: LD_INT 7
31743: PUSH
31744: LD_INT 9
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: LIST
31751: IN
31752: PUSH
31753: LD_VAR 0 1
31757: PPUSH
31758: LD_INT 52
31760: PPUSH
31761: CALL_OW 321
31765: PUSH
31766: LD_INT 2
31768: EQUAL
31769: AND
31770: IFFALSE 31787
// bpoints := bpoints * 1.5 ;
31772: LD_ADDR_VAR 0 10
31776: PUSH
31777: LD_VAR 0 10
31781: PUSH
31782: LD_REAL  1.50000000000000E+0000
31785: MUL
31786: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
31787: LD_VAR 0 1
31791: PPUSH
31792: LD_INT 66
31794: PPUSH
31795: CALL_OW 321
31799: PUSH
31800: LD_INT 2
31802: EQUAL
31803: IFFALSE 31820
// bpoints := bpoints * 1.1 ;
31805: LD_ADDR_VAR 0 10
31809: PUSH
31810: LD_VAR 0 10
31814: PUSH
31815: LD_REAL  1.10000000000000E+0000
31818: MUL
31819: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
31820: LD_ADDR_VAR 0 10
31824: PUSH
31825: LD_VAR 0 10
31829: PUSH
31830: LD_VAR 0 6
31834: PPUSH
31835: LD_INT 1
31837: PPUSH
31838: CALL_OW 259
31842: PUSH
31843: LD_REAL  1.15000000000000E+0000
31846: MUL
31847: MUL
31848: ST_TO_ADDR
// end ; unit_vehicle :
31849: GO 32679
31851: LD_INT 2
31853: DOUBLE
31854: EQUAL
31855: IFTRUE 31859
31857: GO 32667
31859: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31860: LD_VAR 0 6
31864: PPUSH
31865: CALL_OW 264
31869: PUSH
31870: LD_INT 2
31872: PUSH
31873: LD_INT 42
31875: PUSH
31876: LD_INT 24
31878: PUSH
31879: EMPTY
31880: LIST
31881: LIST
31882: LIST
31883: IN
31884: IFFALSE 31905
// points := [ 25 , 5 , 3 ] ;
31886: LD_ADDR_VAR 0 9
31890: PUSH
31891: LD_INT 25
31893: PUSH
31894: LD_INT 5
31896: PUSH
31897: LD_INT 3
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31905: LD_VAR 0 6
31909: PPUSH
31910: CALL_OW 264
31914: PUSH
31915: LD_INT 4
31917: PUSH
31918: LD_INT 43
31920: PUSH
31921: LD_INT 25
31923: PUSH
31924: EMPTY
31925: LIST
31926: LIST
31927: LIST
31928: IN
31929: IFFALSE 31950
// points := [ 40 , 15 , 5 ] ;
31931: LD_ADDR_VAR 0 9
31935: PUSH
31936: LD_INT 40
31938: PUSH
31939: LD_INT 15
31941: PUSH
31942: LD_INT 5
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: LIST
31949: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31950: LD_VAR 0 6
31954: PPUSH
31955: CALL_OW 264
31959: PUSH
31960: LD_INT 3
31962: PUSH
31963: LD_INT 23
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: IN
31970: IFFALSE 31991
// points := [ 7 , 25 , 8 ] ;
31972: LD_ADDR_VAR 0 9
31976: PUSH
31977: LD_INT 7
31979: PUSH
31980: LD_INT 25
31982: PUSH
31983: LD_INT 8
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: LIST
31990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31991: LD_VAR 0 6
31995: PPUSH
31996: CALL_OW 264
32000: PUSH
32001: LD_INT 5
32003: PUSH
32004: LD_INT 27
32006: PUSH
32007: LD_INT 44
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: LIST
32014: IN
32015: IFFALSE 32036
// points := [ 14 , 50 , 16 ] ;
32017: LD_ADDR_VAR 0 9
32021: PUSH
32022: LD_INT 14
32024: PUSH
32025: LD_INT 50
32027: PUSH
32028: LD_INT 16
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
32036: LD_VAR 0 6
32040: PPUSH
32041: CALL_OW 264
32045: PUSH
32046: LD_INT 6
32048: PUSH
32049: LD_INT 46
32051: PUSH
32052: EMPTY
32053: LIST
32054: LIST
32055: IN
32056: IFFALSE 32077
// points := [ 32 , 120 , 70 ] ;
32058: LD_ADDR_VAR 0 9
32062: PUSH
32063: LD_INT 32
32065: PUSH
32066: LD_INT 120
32068: PUSH
32069: LD_INT 70
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: LIST
32076: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
32077: LD_VAR 0 6
32081: PPUSH
32082: CALL_OW 264
32086: PUSH
32087: LD_INT 7
32089: PUSH
32090: LD_INT 28
32092: PUSH
32093: LD_INT 45
32095: PUSH
32096: LD_EXP 29
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: IN
32107: IFFALSE 32128
// points := [ 35 , 20 , 45 ] ;
32109: LD_ADDR_VAR 0 9
32113: PUSH
32114: LD_INT 35
32116: PUSH
32117: LD_INT 20
32119: PUSH
32120: LD_INT 45
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
32128: LD_VAR 0 6
32132: PPUSH
32133: CALL_OW 264
32137: PUSH
32138: LD_INT 47
32140: PUSH
32141: EMPTY
32142: LIST
32143: IN
32144: IFFALSE 32165
// points := [ 67 , 45 , 75 ] ;
32146: LD_ADDR_VAR 0 9
32150: PUSH
32151: LD_INT 67
32153: PUSH
32154: LD_INT 45
32156: PUSH
32157: LD_INT 75
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: LIST
32164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
32165: LD_VAR 0 6
32169: PPUSH
32170: CALL_OW 264
32174: PUSH
32175: LD_INT 26
32177: PUSH
32178: EMPTY
32179: LIST
32180: IN
32181: IFFALSE 32202
// points := [ 120 , 30 , 80 ] ;
32183: LD_ADDR_VAR 0 9
32187: PUSH
32188: LD_INT 120
32190: PUSH
32191: LD_INT 30
32193: PUSH
32194: LD_INT 80
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: LIST
32201: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
32202: LD_VAR 0 6
32206: PPUSH
32207: CALL_OW 264
32211: PUSH
32212: LD_INT 22
32214: PUSH
32215: EMPTY
32216: LIST
32217: IN
32218: IFFALSE 32239
// points := [ 40 , 1 , 1 ] ;
32220: LD_ADDR_VAR 0 9
32224: PUSH
32225: LD_INT 40
32227: PUSH
32228: LD_INT 1
32230: PUSH
32231: LD_INT 1
32233: PUSH
32234: EMPTY
32235: LIST
32236: LIST
32237: LIST
32238: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
32239: LD_VAR 0 6
32243: PPUSH
32244: CALL_OW 264
32248: PUSH
32249: LD_INT 29
32251: PUSH
32252: EMPTY
32253: LIST
32254: IN
32255: IFFALSE 32276
// points := [ 70 , 200 , 400 ] ;
32257: LD_ADDR_VAR 0 9
32261: PUSH
32262: LD_INT 70
32264: PUSH
32265: LD_INT 200
32267: PUSH
32268: LD_INT 400
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
32276: LD_VAR 0 6
32280: PPUSH
32281: CALL_OW 264
32285: PUSH
32286: LD_INT 14
32288: PUSH
32289: LD_INT 53
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: IN
32296: IFFALSE 32317
// points := [ 40 , 10 , 20 ] ;
32298: LD_ADDR_VAR 0 9
32302: PUSH
32303: LD_INT 40
32305: PUSH
32306: LD_INT 10
32308: PUSH
32309: LD_INT 20
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
32317: LD_VAR 0 6
32321: PPUSH
32322: CALL_OW 264
32326: PUSH
32327: LD_INT 9
32329: PUSH
32330: EMPTY
32331: LIST
32332: IN
32333: IFFALSE 32354
// points := [ 5 , 70 , 20 ] ;
32335: LD_ADDR_VAR 0 9
32339: PUSH
32340: LD_INT 5
32342: PUSH
32343: LD_INT 70
32345: PUSH
32346: LD_INT 20
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: LIST
32353: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
32354: LD_VAR 0 6
32358: PPUSH
32359: CALL_OW 264
32363: PUSH
32364: LD_INT 10
32366: PUSH
32367: EMPTY
32368: LIST
32369: IN
32370: IFFALSE 32391
// points := [ 35 , 110 , 70 ] ;
32372: LD_ADDR_VAR 0 9
32376: PUSH
32377: LD_INT 35
32379: PUSH
32380: LD_INT 110
32382: PUSH
32383: LD_INT 70
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: LIST
32390: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
32391: LD_VAR 0 6
32395: PPUSH
32396: CALL_OW 265
32400: PUSH
32401: LD_INT 25
32403: EQUAL
32404: IFFALSE 32425
// points := [ 80 , 65 , 100 ] ;
32406: LD_ADDR_VAR 0 9
32410: PUSH
32411: LD_INT 80
32413: PUSH
32414: LD_INT 65
32416: PUSH
32417: LD_INT 100
32419: PUSH
32420: EMPTY
32421: LIST
32422: LIST
32423: LIST
32424: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
32425: LD_VAR 0 6
32429: PPUSH
32430: CALL_OW 263
32434: PUSH
32435: LD_INT 1
32437: EQUAL
32438: IFFALSE 32473
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
32440: LD_ADDR_VAR 0 10
32444: PUSH
32445: LD_VAR 0 10
32449: PUSH
32450: LD_VAR 0 6
32454: PPUSH
32455: CALL_OW 311
32459: PPUSH
32460: LD_INT 3
32462: PPUSH
32463: CALL_OW 259
32467: PUSH
32468: LD_INT 4
32470: MUL
32471: MUL
32472: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
32473: LD_VAR 0 6
32477: PPUSH
32478: CALL_OW 263
32482: PUSH
32483: LD_INT 2
32485: EQUAL
32486: IFFALSE 32537
// begin j := IsControledBy ( i ) ;
32488: LD_ADDR_VAR 0 7
32492: PUSH
32493: LD_VAR 0 6
32497: PPUSH
32498: CALL_OW 312
32502: ST_TO_ADDR
// if j then
32503: LD_VAR 0 7
32507: IFFALSE 32537
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
32509: LD_ADDR_VAR 0 10
32513: PUSH
32514: LD_VAR 0 10
32518: PUSH
32519: LD_VAR 0 7
32523: PPUSH
32524: LD_INT 3
32526: PPUSH
32527: CALL_OW 259
32531: PUSH
32532: LD_INT 3
32534: MUL
32535: MUL
32536: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
32537: LD_VAR 0 6
32541: PPUSH
32542: CALL_OW 264
32546: PUSH
32547: LD_INT 5
32549: PUSH
32550: LD_INT 6
32552: PUSH
32553: LD_INT 46
32555: PUSH
32556: LD_INT 44
32558: PUSH
32559: LD_INT 47
32561: PUSH
32562: LD_INT 45
32564: PUSH
32565: LD_INT 28
32567: PUSH
32568: LD_INT 7
32570: PUSH
32571: LD_INT 27
32573: PUSH
32574: LD_INT 29
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: IN
32589: PUSH
32590: LD_VAR 0 1
32594: PPUSH
32595: LD_INT 52
32597: PPUSH
32598: CALL_OW 321
32602: PUSH
32603: LD_INT 2
32605: EQUAL
32606: AND
32607: IFFALSE 32624
// bpoints := bpoints * 1.2 ;
32609: LD_ADDR_VAR 0 10
32613: PUSH
32614: LD_VAR 0 10
32618: PUSH
32619: LD_REAL  1.20000000000000E+0000
32622: MUL
32623: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
32624: LD_VAR 0 6
32628: PPUSH
32629: CALL_OW 264
32633: PUSH
32634: LD_INT 6
32636: PUSH
32637: LD_INT 46
32639: PUSH
32640: LD_INT 47
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: LIST
32647: IN
32648: IFFALSE 32665
// bpoints := bpoints * 1.2 ;
32650: LD_ADDR_VAR 0 10
32654: PUSH
32655: LD_VAR 0 10
32659: PUSH
32660: LD_REAL  1.20000000000000E+0000
32663: MUL
32664: ST_TO_ADDR
// end ; unit_building :
32665: GO 32679
32667: LD_INT 3
32669: DOUBLE
32670: EQUAL
32671: IFTRUE 32675
32673: GO 32678
32675: POP
// ; end ;
32676: GO 32679
32678: POP
// for j = 1 to 3 do
32679: LD_ADDR_VAR 0 7
32683: PUSH
32684: DOUBLE
32685: LD_INT 1
32687: DEC
32688: ST_TO_ADDR
32689: LD_INT 3
32691: PUSH
32692: FOR_TO
32693: IFFALSE 32746
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
32695: LD_ADDR_VAR 0 5
32699: PUSH
32700: LD_VAR 0 5
32704: PPUSH
32705: LD_VAR 0 7
32709: PPUSH
32710: LD_VAR 0 5
32714: PUSH
32715: LD_VAR 0 7
32719: ARRAY
32720: PUSH
32721: LD_VAR 0 9
32725: PUSH
32726: LD_VAR 0 7
32730: ARRAY
32731: PUSH
32732: LD_VAR 0 10
32736: MUL
32737: PLUS
32738: PPUSH
32739: CALL_OW 1
32743: ST_TO_ADDR
32744: GO 32692
32746: POP
32747: POP
// end ;
32748: GO 31225
32750: POP
32751: POP
// result := Replace ( result , 4 , tmp ) ;
32752: LD_ADDR_VAR 0 5
32756: PUSH
32757: LD_VAR 0 5
32761: PPUSH
32762: LD_INT 4
32764: PPUSH
32765: LD_VAR 0 8
32769: PPUSH
32770: CALL_OW 1
32774: ST_TO_ADDR
// end ;
32775: LD_VAR 0 5
32779: RET
// export function DangerAtRange ( unit , range ) ; begin
32780: LD_INT 0
32782: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
32783: LD_ADDR_VAR 0 3
32787: PUSH
32788: LD_VAR 0 1
32792: PPUSH
32793: CALL_OW 255
32797: PPUSH
32798: LD_VAR 0 1
32802: PPUSH
32803: CALL_OW 250
32807: PPUSH
32808: LD_VAR 0 1
32812: PPUSH
32813: CALL_OW 251
32817: PPUSH
32818: LD_VAR 0 2
32822: PPUSH
32823: CALL 31077 0 4
32827: ST_TO_ADDR
// end ;
32828: LD_VAR 0 3
32832: RET
// export function DangerInArea ( side , area ) ; begin
32833: LD_INT 0
32835: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
32836: LD_ADDR_VAR 0 3
32840: PUSH
32841: LD_VAR 0 2
32845: PPUSH
32846: LD_INT 81
32848: PUSH
32849: LD_VAR 0 1
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PPUSH
32858: CALL_OW 70
32862: ST_TO_ADDR
// end ;
32863: LD_VAR 0 3
32867: RET
// export function IsExtension ( b ) ; begin
32868: LD_INT 0
32870: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32871: LD_ADDR_VAR 0 2
32875: PUSH
32876: LD_VAR 0 1
32880: PUSH
32881: LD_INT 23
32883: PUSH
32884: LD_INT 20
32886: PUSH
32887: LD_INT 22
32889: PUSH
32890: LD_INT 17
32892: PUSH
32893: LD_INT 24
32895: PUSH
32896: LD_INT 21
32898: PUSH
32899: LD_INT 19
32901: PUSH
32902: LD_INT 16
32904: PUSH
32905: LD_INT 25
32907: PUSH
32908: LD_INT 18
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: IN
32923: ST_TO_ADDR
// end ;
32924: LD_VAR 0 2
32928: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32929: LD_INT 0
32931: PPUSH
32932: PPUSH
32933: PPUSH
// result := [ ] ;
32934: LD_ADDR_VAR 0 4
32938: PUSH
32939: EMPTY
32940: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32941: LD_ADDR_VAR 0 5
32945: PUSH
32946: LD_VAR 0 2
32950: PPUSH
32951: LD_INT 21
32953: PUSH
32954: LD_INT 3
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PPUSH
32961: CALL_OW 70
32965: ST_TO_ADDR
// if not tmp then
32966: LD_VAR 0 5
32970: NOT
32971: IFFALSE 32975
// exit ;
32973: GO 33039
// if checkLink then
32975: LD_VAR 0 3
32979: IFFALSE 33029
// begin for i in tmp do
32981: LD_ADDR_VAR 0 6
32985: PUSH
32986: LD_VAR 0 5
32990: PUSH
32991: FOR_IN
32992: IFFALSE 33027
// if GetBase ( i ) <> base then
32994: LD_VAR 0 6
32998: PPUSH
32999: CALL_OW 274
33003: PUSH
33004: LD_VAR 0 1
33008: NONEQUAL
33009: IFFALSE 33025
// ComLinkToBase ( base , i ) ;
33011: LD_VAR 0 1
33015: PPUSH
33016: LD_VAR 0 6
33020: PPUSH
33021: CALL_OW 169
33025: GO 32991
33027: POP
33028: POP
// end ; result := tmp ;
33029: LD_ADDR_VAR 0 4
33033: PUSH
33034: LD_VAR 0 5
33038: ST_TO_ADDR
// end ;
33039: LD_VAR 0 4
33043: RET
// export function ComComplete ( units , b ) ; var i ; begin
33044: LD_INT 0
33046: PPUSH
33047: PPUSH
// if not units then
33048: LD_VAR 0 1
33052: NOT
33053: IFFALSE 33057
// exit ;
33055: GO 33147
// for i in units do
33057: LD_ADDR_VAR 0 4
33061: PUSH
33062: LD_VAR 0 1
33066: PUSH
33067: FOR_IN
33068: IFFALSE 33145
// if BuildingStatus ( b ) = bs_build then
33070: LD_VAR 0 2
33074: PPUSH
33075: CALL_OW 461
33079: PUSH
33080: LD_INT 1
33082: EQUAL
33083: IFFALSE 33143
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
33085: LD_VAR 0 4
33089: PPUSH
33090: LD_STRING h
33092: PUSH
33093: LD_VAR 0 2
33097: PPUSH
33098: CALL_OW 250
33102: PUSH
33103: LD_VAR 0 2
33107: PPUSH
33108: CALL_OW 251
33112: PUSH
33113: LD_VAR 0 2
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: PUSH
33136: EMPTY
33137: LIST
33138: PPUSH
33139: CALL_OW 446
33143: GO 33067
33145: POP
33146: POP
// end ;
33147: LD_VAR 0 3
33151: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
33152: LD_INT 0
33154: PPUSH
33155: PPUSH
33156: PPUSH
33157: PPUSH
33158: PPUSH
33159: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
33160: LD_VAR 0 1
33164: NOT
33165: PUSH
33166: LD_VAR 0 1
33170: PPUSH
33171: CALL_OW 263
33175: PUSH
33176: LD_INT 2
33178: NONEQUAL
33179: OR
33180: IFFALSE 33184
// exit ;
33182: GO 33500
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
33184: LD_ADDR_VAR 0 6
33188: PUSH
33189: LD_INT 22
33191: PUSH
33192: LD_VAR 0 1
33196: PPUSH
33197: CALL_OW 255
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: LD_INT 30
33211: PUSH
33212: LD_INT 36
33214: PUSH
33215: EMPTY
33216: LIST
33217: LIST
33218: PUSH
33219: LD_INT 34
33221: PUSH
33222: LD_INT 31
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: EMPTY
33230: LIST
33231: LIST
33232: LIST
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PPUSH
33238: CALL_OW 69
33242: ST_TO_ADDR
// if not tmp then
33243: LD_VAR 0 6
33247: NOT
33248: IFFALSE 33252
// exit ;
33250: GO 33500
// result := [ ] ;
33252: LD_ADDR_VAR 0 2
33256: PUSH
33257: EMPTY
33258: ST_TO_ADDR
// for i in tmp do
33259: LD_ADDR_VAR 0 3
33263: PUSH
33264: LD_VAR 0 6
33268: PUSH
33269: FOR_IN
33270: IFFALSE 33341
// begin t := UnitsInside ( i ) ;
33272: LD_ADDR_VAR 0 4
33276: PUSH
33277: LD_VAR 0 3
33281: PPUSH
33282: CALL_OW 313
33286: ST_TO_ADDR
// if t then
33287: LD_VAR 0 4
33291: IFFALSE 33339
// for j in t do
33293: LD_ADDR_VAR 0 7
33297: PUSH
33298: LD_VAR 0 4
33302: PUSH
33303: FOR_IN
33304: IFFALSE 33337
// result := Replace ( result , result + 1 , j ) ;
33306: LD_ADDR_VAR 0 2
33310: PUSH
33311: LD_VAR 0 2
33315: PPUSH
33316: LD_VAR 0 2
33320: PUSH
33321: LD_INT 1
33323: PLUS
33324: PPUSH
33325: LD_VAR 0 7
33329: PPUSH
33330: CALL_OW 1
33334: ST_TO_ADDR
33335: GO 33303
33337: POP
33338: POP
// end ;
33339: GO 33269
33341: POP
33342: POP
// if not result then
33343: LD_VAR 0 2
33347: NOT
33348: IFFALSE 33352
// exit ;
33350: GO 33500
// mech := result [ 1 ] ;
33352: LD_ADDR_VAR 0 5
33356: PUSH
33357: LD_VAR 0 2
33361: PUSH
33362: LD_INT 1
33364: ARRAY
33365: ST_TO_ADDR
// if result > 1 then
33366: LD_VAR 0 2
33370: PUSH
33371: LD_INT 1
33373: GREATER
33374: IFFALSE 33486
// begin for i = 2 to result do
33376: LD_ADDR_VAR 0 3
33380: PUSH
33381: DOUBLE
33382: LD_INT 2
33384: DEC
33385: ST_TO_ADDR
33386: LD_VAR 0 2
33390: PUSH
33391: FOR_TO
33392: IFFALSE 33484
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
33394: LD_ADDR_VAR 0 4
33398: PUSH
33399: LD_VAR 0 2
33403: PUSH
33404: LD_VAR 0 3
33408: ARRAY
33409: PPUSH
33410: LD_INT 3
33412: PPUSH
33413: CALL_OW 259
33417: PUSH
33418: LD_VAR 0 2
33422: PUSH
33423: LD_VAR 0 3
33427: ARRAY
33428: PPUSH
33429: CALL_OW 432
33433: MINUS
33434: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
33435: LD_VAR 0 4
33439: PUSH
33440: LD_VAR 0 5
33444: PPUSH
33445: LD_INT 3
33447: PPUSH
33448: CALL_OW 259
33452: PUSH
33453: LD_VAR 0 5
33457: PPUSH
33458: CALL_OW 432
33462: MINUS
33463: GREATEREQUAL
33464: IFFALSE 33482
// mech := result [ i ] ;
33466: LD_ADDR_VAR 0 5
33470: PUSH
33471: LD_VAR 0 2
33475: PUSH
33476: LD_VAR 0 3
33480: ARRAY
33481: ST_TO_ADDR
// end ;
33482: GO 33391
33484: POP
33485: POP
// end ; ComLinkTo ( vehicle , mech ) ;
33486: LD_VAR 0 1
33490: PPUSH
33491: LD_VAR 0 5
33495: PPUSH
33496: CALL_OW 135
// end ;
33500: LD_VAR 0 2
33504: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
33505: LD_INT 0
33507: PPUSH
33508: PPUSH
33509: PPUSH
33510: PPUSH
33511: PPUSH
33512: PPUSH
33513: PPUSH
33514: PPUSH
33515: PPUSH
33516: PPUSH
33517: PPUSH
33518: PPUSH
33519: PPUSH
// result := [ ] ;
33520: LD_ADDR_VAR 0 7
33524: PUSH
33525: EMPTY
33526: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 266
33536: PUSH
33537: LD_INT 0
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: EMPTY
33544: LIST
33545: LIST
33546: IN
33547: NOT
33548: IFFALSE 33552
// exit ;
33550: GO 35186
// if name then
33552: LD_VAR 0 3
33556: IFFALSE 33572
// SetBName ( base_dep , name ) ;
33558: LD_VAR 0 1
33562: PPUSH
33563: LD_VAR 0 3
33567: PPUSH
33568: CALL_OW 500
// base := GetBase ( base_dep ) ;
33572: LD_ADDR_VAR 0 15
33576: PUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 274
33586: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
33587: LD_ADDR_VAR 0 16
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 255
33601: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
33602: LD_ADDR_VAR 0 17
33606: PUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL_OW 248
33616: ST_TO_ADDR
// if sources then
33617: LD_VAR 0 5
33621: IFFALSE 33668
// for i = 1 to 3 do
33623: LD_ADDR_VAR 0 8
33627: PUSH
33628: DOUBLE
33629: LD_INT 1
33631: DEC
33632: ST_TO_ADDR
33633: LD_INT 3
33635: PUSH
33636: FOR_TO
33637: IFFALSE 33666
// AddResourceType ( base , i , sources [ i ] ) ;
33639: LD_VAR 0 15
33643: PPUSH
33644: LD_VAR 0 8
33648: PPUSH
33649: LD_VAR 0 5
33653: PUSH
33654: LD_VAR 0 8
33658: ARRAY
33659: PPUSH
33660: CALL_OW 276
33664: GO 33636
33666: POP
33667: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
33668: LD_ADDR_VAR 0 18
33672: PUSH
33673: LD_VAR 0 15
33677: PPUSH
33678: LD_VAR 0 2
33682: PPUSH
33683: LD_INT 1
33685: PPUSH
33686: CALL 32929 0 3
33690: ST_TO_ADDR
// InitHc ;
33691: CALL_OW 19
// InitUc ;
33695: CALL_OW 18
// uc_side := side ;
33699: LD_ADDR_OWVAR 20
33703: PUSH
33704: LD_VAR 0 16
33708: ST_TO_ADDR
// uc_nation := nation ;
33709: LD_ADDR_OWVAR 21
33713: PUSH
33714: LD_VAR 0 17
33718: ST_TO_ADDR
// if buildings then
33719: LD_VAR 0 18
33723: IFFALSE 35045
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
33725: LD_ADDR_VAR 0 19
33729: PUSH
33730: LD_VAR 0 18
33734: PPUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 30
33740: PUSH
33741: LD_INT 29
33743: PUSH
33744: EMPTY
33745: LIST
33746: LIST
33747: PUSH
33748: LD_INT 30
33750: PUSH
33751: LD_INT 30
33753: PUSH
33754: EMPTY
33755: LIST
33756: LIST
33757: PUSH
33758: EMPTY
33759: LIST
33760: LIST
33761: LIST
33762: PPUSH
33763: CALL_OW 72
33767: ST_TO_ADDR
// if tmp then
33768: LD_VAR 0 19
33772: IFFALSE 33820
// for i in tmp do
33774: LD_ADDR_VAR 0 8
33778: PUSH
33779: LD_VAR 0 19
33783: PUSH
33784: FOR_IN
33785: IFFALSE 33818
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
33787: LD_VAR 0 8
33791: PPUSH
33792: CALL_OW 250
33796: PPUSH
33797: LD_VAR 0 8
33801: PPUSH
33802: CALL_OW 251
33806: PPUSH
33807: LD_VAR 0 16
33811: PPUSH
33812: CALL_OW 441
33816: GO 33784
33818: POP
33819: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
33820: LD_VAR 0 18
33824: PPUSH
33825: LD_INT 2
33827: PUSH
33828: LD_INT 30
33830: PUSH
33831: LD_INT 32
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 30
33840: PUSH
33841: LD_INT 33
33843: PUSH
33844: EMPTY
33845: LIST
33846: LIST
33847: PUSH
33848: EMPTY
33849: LIST
33850: LIST
33851: LIST
33852: PPUSH
33853: CALL_OW 72
33857: IFFALSE 33945
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33859: LD_ADDR_VAR 0 8
33863: PUSH
33864: LD_VAR 0 18
33868: PPUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 30
33874: PUSH
33875: LD_INT 32
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: PUSH
33882: LD_INT 30
33884: PUSH
33885: LD_INT 33
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: PPUSH
33897: CALL_OW 72
33901: PUSH
33902: FOR_IN
33903: IFFALSE 33943
// begin if not GetBWeapon ( i ) then
33905: LD_VAR 0 8
33909: PPUSH
33910: CALL_OW 269
33914: NOT
33915: IFFALSE 33941
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33917: LD_VAR 0 8
33921: PPUSH
33922: LD_VAR 0 8
33926: PPUSH
33927: LD_VAR 0 2
33931: PPUSH
33932: CALL 35191 0 2
33936: PPUSH
33937: CALL_OW 431
// end ;
33941: GO 33902
33943: POP
33944: POP
// end ; for i = 1 to personel do
33945: LD_ADDR_VAR 0 8
33949: PUSH
33950: DOUBLE
33951: LD_INT 1
33953: DEC
33954: ST_TO_ADDR
33955: LD_VAR 0 6
33959: PUSH
33960: FOR_TO
33961: IFFALSE 35025
// begin if i > 4 then
33963: LD_VAR 0 8
33967: PUSH
33968: LD_INT 4
33970: GREATER
33971: IFFALSE 33975
// break ;
33973: GO 35025
// case i of 1 :
33975: LD_VAR 0 8
33979: PUSH
33980: LD_INT 1
33982: DOUBLE
33983: EQUAL
33984: IFTRUE 33988
33986: GO 34068
33988: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33989: LD_ADDR_VAR 0 12
33993: PUSH
33994: LD_VAR 0 18
33998: PPUSH
33999: LD_INT 22
34001: PUSH
34002: LD_VAR 0 16
34006: PUSH
34007: EMPTY
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 58
34013: PUSH
34014: EMPTY
34015: LIST
34016: PUSH
34017: LD_INT 2
34019: PUSH
34020: LD_INT 30
34022: PUSH
34023: LD_INT 32
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 30
34032: PUSH
34033: LD_INT 4
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: PUSH
34040: LD_INT 30
34042: PUSH
34043: LD_INT 5
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: LIST
34060: PPUSH
34061: CALL_OW 72
34065: ST_TO_ADDR
34066: GO 34290
34068: LD_INT 2
34070: DOUBLE
34071: EQUAL
34072: IFTRUE 34076
34074: GO 34138
34076: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
34077: LD_ADDR_VAR 0 12
34081: PUSH
34082: LD_VAR 0 18
34086: PPUSH
34087: LD_INT 22
34089: PUSH
34090: LD_VAR 0 16
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: PUSH
34099: LD_INT 2
34101: PUSH
34102: LD_INT 30
34104: PUSH
34105: LD_INT 0
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: PUSH
34112: LD_INT 30
34114: PUSH
34115: LD_INT 1
34117: PUSH
34118: EMPTY
34119: LIST
34120: LIST
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: PUSH
34127: EMPTY
34128: LIST
34129: LIST
34130: PPUSH
34131: CALL_OW 72
34135: ST_TO_ADDR
34136: GO 34290
34138: LD_INT 3
34140: DOUBLE
34141: EQUAL
34142: IFTRUE 34146
34144: GO 34208
34146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
34147: LD_ADDR_VAR 0 12
34151: PUSH
34152: LD_VAR 0 18
34156: PPUSH
34157: LD_INT 22
34159: PUSH
34160: LD_VAR 0 16
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 30
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 30
34184: PUSH
34185: LD_INT 3
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PPUSH
34201: CALL_OW 72
34205: ST_TO_ADDR
34206: GO 34290
34208: LD_INT 4
34210: DOUBLE
34211: EQUAL
34212: IFTRUE 34216
34214: GO 34289
34216: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
34217: LD_ADDR_VAR 0 12
34221: PUSH
34222: LD_VAR 0 18
34226: PPUSH
34227: LD_INT 22
34229: PUSH
34230: LD_VAR 0 16
34234: PUSH
34235: EMPTY
34236: LIST
34237: LIST
34238: PUSH
34239: LD_INT 2
34241: PUSH
34242: LD_INT 30
34244: PUSH
34245: LD_INT 6
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: PUSH
34252: LD_INT 30
34254: PUSH
34255: LD_INT 7
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 30
34264: PUSH
34265: LD_INT 8
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: PUSH
34272: EMPTY
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: PUSH
34278: EMPTY
34279: LIST
34280: LIST
34281: PPUSH
34282: CALL_OW 72
34286: ST_TO_ADDR
34287: GO 34290
34289: POP
// if i = 1 then
34290: LD_VAR 0 8
34294: PUSH
34295: LD_INT 1
34297: EQUAL
34298: IFFALSE 34409
// begin tmp := [ ] ;
34300: LD_ADDR_VAR 0 19
34304: PUSH
34305: EMPTY
34306: ST_TO_ADDR
// for j in f do
34307: LD_ADDR_VAR 0 9
34311: PUSH
34312: LD_VAR 0 12
34316: PUSH
34317: FOR_IN
34318: IFFALSE 34391
// if GetBType ( j ) = b_bunker then
34320: LD_VAR 0 9
34324: PPUSH
34325: CALL_OW 266
34329: PUSH
34330: LD_INT 32
34332: EQUAL
34333: IFFALSE 34360
// tmp := Insert ( tmp , 1 , j ) else
34335: LD_ADDR_VAR 0 19
34339: PUSH
34340: LD_VAR 0 19
34344: PPUSH
34345: LD_INT 1
34347: PPUSH
34348: LD_VAR 0 9
34352: PPUSH
34353: CALL_OW 2
34357: ST_TO_ADDR
34358: GO 34389
// tmp := Insert ( tmp , tmp + 1 , j ) ;
34360: LD_ADDR_VAR 0 19
34364: PUSH
34365: LD_VAR 0 19
34369: PPUSH
34370: LD_VAR 0 19
34374: PUSH
34375: LD_INT 1
34377: PLUS
34378: PPUSH
34379: LD_VAR 0 9
34383: PPUSH
34384: CALL_OW 2
34388: ST_TO_ADDR
34389: GO 34317
34391: POP
34392: POP
// if tmp then
34393: LD_VAR 0 19
34397: IFFALSE 34409
// f := tmp ;
34399: LD_ADDR_VAR 0 12
34403: PUSH
34404: LD_VAR 0 19
34408: ST_TO_ADDR
// end ; x := personel [ i ] ;
34409: LD_ADDR_VAR 0 13
34413: PUSH
34414: LD_VAR 0 6
34418: PUSH
34419: LD_VAR 0 8
34423: ARRAY
34424: ST_TO_ADDR
// if x = - 1 then
34425: LD_VAR 0 13
34429: PUSH
34430: LD_INT 1
34432: NEG
34433: EQUAL
34434: IFFALSE 34643
// begin for j in f do
34436: LD_ADDR_VAR 0 9
34440: PUSH
34441: LD_VAR 0 12
34445: PUSH
34446: FOR_IN
34447: IFFALSE 34639
// repeat InitHc ;
34449: CALL_OW 19
// if GetBType ( j ) = b_barracks then
34453: LD_VAR 0 9
34457: PPUSH
34458: CALL_OW 266
34462: PUSH
34463: LD_INT 5
34465: EQUAL
34466: IFFALSE 34536
// begin if UnitsInside ( j ) < 3 then
34468: LD_VAR 0 9
34472: PPUSH
34473: CALL_OW 313
34477: PUSH
34478: LD_INT 3
34480: LESS
34481: IFFALSE 34517
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34483: LD_INT 0
34485: PPUSH
34486: LD_INT 5
34488: PUSH
34489: LD_INT 8
34491: PUSH
34492: LD_INT 9
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: LIST
34499: PUSH
34500: LD_VAR 0 17
34504: ARRAY
34505: PPUSH
34506: LD_VAR 0 4
34510: PPUSH
34511: CALL_OW 380
34515: GO 34534
// PrepareHuman ( false , i , skill ) ;
34517: LD_INT 0
34519: PPUSH
34520: LD_VAR 0 8
34524: PPUSH
34525: LD_VAR 0 4
34529: PPUSH
34530: CALL_OW 380
// end else
34534: GO 34553
// PrepareHuman ( false , i , skill ) ;
34536: LD_INT 0
34538: PPUSH
34539: LD_VAR 0 8
34543: PPUSH
34544: LD_VAR 0 4
34548: PPUSH
34549: CALL_OW 380
// un := CreateHuman ;
34553: LD_ADDR_VAR 0 14
34557: PUSH
34558: CALL_OW 44
34562: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34563: LD_ADDR_VAR 0 7
34567: PUSH
34568: LD_VAR 0 7
34572: PPUSH
34573: LD_INT 1
34575: PPUSH
34576: LD_VAR 0 14
34580: PPUSH
34581: CALL_OW 2
34585: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
34586: LD_VAR 0 14
34590: PPUSH
34591: LD_VAR 0 9
34595: PPUSH
34596: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
34600: LD_VAR 0 9
34604: PPUSH
34605: CALL_OW 313
34609: PUSH
34610: LD_INT 6
34612: EQUAL
34613: PUSH
34614: LD_VAR 0 9
34618: PPUSH
34619: CALL_OW 266
34623: PUSH
34624: LD_INT 32
34626: PUSH
34627: LD_INT 31
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: IN
34634: OR
34635: IFFALSE 34449
34637: GO 34446
34639: POP
34640: POP
// end else
34641: GO 35023
// for j = 1 to x do
34643: LD_ADDR_VAR 0 9
34647: PUSH
34648: DOUBLE
34649: LD_INT 1
34651: DEC
34652: ST_TO_ADDR
34653: LD_VAR 0 13
34657: PUSH
34658: FOR_TO
34659: IFFALSE 35021
// begin InitHc ;
34661: CALL_OW 19
// if not f then
34665: LD_VAR 0 12
34669: NOT
34670: IFFALSE 34759
// begin PrepareHuman ( false , i , skill ) ;
34672: LD_INT 0
34674: PPUSH
34675: LD_VAR 0 8
34679: PPUSH
34680: LD_VAR 0 4
34684: PPUSH
34685: CALL_OW 380
// un := CreateHuman ;
34689: LD_ADDR_VAR 0 14
34693: PUSH
34694: CALL_OW 44
34698: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34699: LD_ADDR_VAR 0 7
34703: PUSH
34704: LD_VAR 0 7
34708: PPUSH
34709: LD_INT 1
34711: PPUSH
34712: LD_VAR 0 14
34716: PPUSH
34717: CALL_OW 2
34721: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34722: LD_VAR 0 14
34726: PPUSH
34727: LD_VAR 0 1
34731: PPUSH
34732: CALL_OW 250
34736: PPUSH
34737: LD_VAR 0 1
34741: PPUSH
34742: CALL_OW 251
34746: PPUSH
34747: LD_INT 10
34749: PPUSH
34750: LD_INT 0
34752: PPUSH
34753: CALL_OW 50
// continue ;
34757: GO 34658
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
34759: LD_VAR 0 12
34763: PUSH
34764: LD_INT 1
34766: ARRAY
34767: PPUSH
34768: CALL_OW 313
34772: PUSH
34773: LD_VAR 0 12
34777: PUSH
34778: LD_INT 1
34780: ARRAY
34781: PPUSH
34782: CALL_OW 266
34786: PUSH
34787: LD_INT 32
34789: PUSH
34790: LD_INT 31
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: IN
34797: AND
34798: PUSH
34799: LD_VAR 0 12
34803: PUSH
34804: LD_INT 1
34806: ARRAY
34807: PPUSH
34808: CALL_OW 313
34812: PUSH
34813: LD_INT 6
34815: EQUAL
34816: OR
34817: IFFALSE 34837
// f := Delete ( f , 1 ) ;
34819: LD_ADDR_VAR 0 12
34823: PUSH
34824: LD_VAR 0 12
34828: PPUSH
34829: LD_INT 1
34831: PPUSH
34832: CALL_OW 3
34836: ST_TO_ADDR
// if not f then
34837: LD_VAR 0 12
34841: NOT
34842: IFFALSE 34860
// begin x := x + 2 ;
34844: LD_ADDR_VAR 0 13
34848: PUSH
34849: LD_VAR 0 13
34853: PUSH
34854: LD_INT 2
34856: PLUS
34857: ST_TO_ADDR
// continue ;
34858: GO 34658
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34860: LD_VAR 0 12
34864: PUSH
34865: LD_INT 1
34867: ARRAY
34868: PPUSH
34869: CALL_OW 266
34873: PUSH
34874: LD_INT 5
34876: EQUAL
34877: IFFALSE 34951
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34879: LD_VAR 0 12
34883: PUSH
34884: LD_INT 1
34886: ARRAY
34887: PPUSH
34888: CALL_OW 313
34892: PUSH
34893: LD_INT 3
34895: LESS
34896: IFFALSE 34932
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34898: LD_INT 0
34900: PPUSH
34901: LD_INT 5
34903: PUSH
34904: LD_INT 8
34906: PUSH
34907: LD_INT 9
34909: PUSH
34910: EMPTY
34911: LIST
34912: LIST
34913: LIST
34914: PUSH
34915: LD_VAR 0 17
34919: ARRAY
34920: PPUSH
34921: LD_VAR 0 4
34925: PPUSH
34926: CALL_OW 380
34930: GO 34949
// PrepareHuman ( false , i , skill ) ;
34932: LD_INT 0
34934: PPUSH
34935: LD_VAR 0 8
34939: PPUSH
34940: LD_VAR 0 4
34944: PPUSH
34945: CALL_OW 380
// end else
34949: GO 34968
// PrepareHuman ( false , i , skill ) ;
34951: LD_INT 0
34953: PPUSH
34954: LD_VAR 0 8
34958: PPUSH
34959: LD_VAR 0 4
34963: PPUSH
34964: CALL_OW 380
// un := CreateHuman ;
34968: LD_ADDR_VAR 0 14
34972: PUSH
34973: CALL_OW 44
34977: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34978: LD_ADDR_VAR 0 7
34982: PUSH
34983: LD_VAR 0 7
34987: PPUSH
34988: LD_INT 1
34990: PPUSH
34991: LD_VAR 0 14
34995: PPUSH
34996: CALL_OW 2
35000: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
35001: LD_VAR 0 14
35005: PPUSH
35006: LD_VAR 0 12
35010: PUSH
35011: LD_INT 1
35013: ARRAY
35014: PPUSH
35015: CALL_OW 52
// end ;
35019: GO 34658
35021: POP
35022: POP
// end ;
35023: GO 33960
35025: POP
35026: POP
// result := result ^ buildings ;
35027: LD_ADDR_VAR 0 7
35031: PUSH
35032: LD_VAR 0 7
35036: PUSH
35037: LD_VAR 0 18
35041: ADD
35042: ST_TO_ADDR
// end else
35043: GO 35186
// begin for i = 1 to personel do
35045: LD_ADDR_VAR 0 8
35049: PUSH
35050: DOUBLE
35051: LD_INT 1
35053: DEC
35054: ST_TO_ADDR
35055: LD_VAR 0 6
35059: PUSH
35060: FOR_TO
35061: IFFALSE 35184
// begin if i > 4 then
35063: LD_VAR 0 8
35067: PUSH
35068: LD_INT 4
35070: GREATER
35071: IFFALSE 35075
// break ;
35073: GO 35184
// x := personel [ i ] ;
35075: LD_ADDR_VAR 0 13
35079: PUSH
35080: LD_VAR 0 6
35084: PUSH
35085: LD_VAR 0 8
35089: ARRAY
35090: ST_TO_ADDR
// if x = - 1 then
35091: LD_VAR 0 13
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: EQUAL
35100: IFFALSE 35104
// continue ;
35102: GO 35060
// PrepareHuman ( false , i , skill ) ;
35104: LD_INT 0
35106: PPUSH
35107: LD_VAR 0 8
35111: PPUSH
35112: LD_VAR 0 4
35116: PPUSH
35117: CALL_OW 380
// un := CreateHuman ;
35121: LD_ADDR_VAR 0 14
35125: PUSH
35126: CALL_OW 44
35130: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35131: LD_VAR 0 14
35135: PPUSH
35136: LD_VAR 0 1
35140: PPUSH
35141: CALL_OW 250
35145: PPUSH
35146: LD_VAR 0 1
35150: PPUSH
35151: CALL_OW 251
35155: PPUSH
35156: LD_INT 10
35158: PPUSH
35159: LD_INT 0
35161: PPUSH
35162: CALL_OW 50
// result := result ^ un ;
35166: LD_ADDR_VAR 0 7
35170: PUSH
35171: LD_VAR 0 7
35175: PUSH
35176: LD_VAR 0 14
35180: ADD
35181: ST_TO_ADDR
// end ;
35182: GO 35060
35184: POP
35185: POP
// end ; end ;
35186: LD_VAR 0 7
35190: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
35191: LD_INT 0
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
// result := false ;
35209: LD_ADDR_VAR 0 3
35213: PUSH
35214: LD_INT 0
35216: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
35217: LD_VAR 0 1
35221: NOT
35222: PUSH
35223: LD_VAR 0 1
35227: PPUSH
35228: CALL_OW 266
35232: PUSH
35233: LD_INT 32
35235: PUSH
35236: LD_INT 33
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: IN
35243: NOT
35244: OR
35245: IFFALSE 35249
// exit ;
35247: GO 36358
// nat := GetNation ( tower ) ;
35249: LD_ADDR_VAR 0 12
35253: PUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 248
35263: ST_TO_ADDR
// side := GetSide ( tower ) ;
35264: LD_ADDR_VAR 0 16
35268: PUSH
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL_OW 255
35278: ST_TO_ADDR
// x := GetX ( tower ) ;
35279: LD_ADDR_VAR 0 10
35283: PUSH
35284: LD_VAR 0 1
35288: PPUSH
35289: CALL_OW 250
35293: ST_TO_ADDR
// y := GetY ( tower ) ;
35294: LD_ADDR_VAR 0 11
35298: PUSH
35299: LD_VAR 0 1
35303: PPUSH
35304: CALL_OW 251
35308: ST_TO_ADDR
// if not x or not y then
35309: LD_VAR 0 10
35313: NOT
35314: PUSH
35315: LD_VAR 0 11
35319: NOT
35320: OR
35321: IFFALSE 35325
// exit ;
35323: GO 36358
// weapon := 0 ;
35325: LD_ADDR_VAR 0 18
35329: PUSH
35330: LD_INT 0
35332: ST_TO_ADDR
// fac_list := [ ] ;
35333: LD_ADDR_VAR 0 17
35337: PUSH
35338: EMPTY
35339: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
35340: LD_ADDR_VAR 0 6
35344: PUSH
35345: LD_VAR 0 1
35349: PPUSH
35350: CALL_OW 274
35354: PPUSH
35355: LD_VAR 0 2
35359: PPUSH
35360: LD_INT 0
35362: PPUSH
35363: CALL 32929 0 3
35367: PPUSH
35368: LD_INT 30
35370: PUSH
35371: LD_INT 3
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PPUSH
35378: CALL_OW 72
35382: ST_TO_ADDR
// if not factories then
35383: LD_VAR 0 6
35387: NOT
35388: IFFALSE 35392
// exit ;
35390: GO 36358
// for i in factories do
35392: LD_ADDR_VAR 0 8
35396: PUSH
35397: LD_VAR 0 6
35401: PUSH
35402: FOR_IN
35403: IFFALSE 35428
// fac_list := fac_list union AvailableWeaponList ( i ) ;
35405: LD_ADDR_VAR 0 17
35409: PUSH
35410: LD_VAR 0 17
35414: PUSH
35415: LD_VAR 0 8
35419: PPUSH
35420: CALL_OW 478
35424: UNION
35425: ST_TO_ADDR
35426: GO 35402
35428: POP
35429: POP
// if not fac_list then
35430: LD_VAR 0 17
35434: NOT
35435: IFFALSE 35439
// exit ;
35437: GO 36358
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
35439: LD_ADDR_VAR 0 5
35443: PUSH
35444: LD_INT 4
35446: PUSH
35447: LD_INT 5
35449: PUSH
35450: LD_INT 9
35452: PUSH
35453: LD_INT 10
35455: PUSH
35456: LD_INT 6
35458: PUSH
35459: LD_INT 7
35461: PUSH
35462: LD_INT 11
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: PUSH
35474: LD_INT 27
35476: PUSH
35477: LD_INT 28
35479: PUSH
35480: LD_INT 26
35482: PUSH
35483: LD_INT 30
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 43
35494: PUSH
35495: LD_INT 44
35497: PUSH
35498: LD_INT 46
35500: PUSH
35501: LD_INT 45
35503: PUSH
35504: LD_INT 47
35506: PUSH
35507: LD_INT 49
35509: PUSH
35510: EMPTY
35511: LIST
35512: LIST
35513: LIST
35514: LIST
35515: LIST
35516: LIST
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: LIST
35522: PUSH
35523: LD_VAR 0 12
35527: ARRAY
35528: ST_TO_ADDR
// list := list isect fac_list ;
35529: LD_ADDR_VAR 0 5
35533: PUSH
35534: LD_VAR 0 5
35538: PUSH
35539: LD_VAR 0 17
35543: ISECT
35544: ST_TO_ADDR
// if not list then
35545: LD_VAR 0 5
35549: NOT
35550: IFFALSE 35554
// exit ;
35552: GO 36358
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
35554: LD_VAR 0 12
35558: PUSH
35559: LD_INT 3
35561: EQUAL
35562: PUSH
35563: LD_INT 49
35565: PUSH
35566: LD_VAR 0 5
35570: IN
35571: AND
35572: PUSH
35573: LD_INT 31
35575: PPUSH
35576: LD_VAR 0 16
35580: PPUSH
35581: CALL_OW 321
35585: PUSH
35586: LD_INT 2
35588: EQUAL
35589: AND
35590: IFFALSE 35650
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
35592: LD_INT 22
35594: PUSH
35595: LD_VAR 0 16
35599: PUSH
35600: EMPTY
35601: LIST
35602: LIST
35603: PUSH
35604: LD_INT 35
35606: PUSH
35607: LD_INT 49
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 91
35616: PUSH
35617: LD_VAR 0 1
35621: PUSH
35622: LD_INT 10
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: LIST
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: LIST
35634: PPUSH
35635: CALL_OW 69
35639: NOT
35640: IFFALSE 35650
// weapon := ru_time_lapser ;
35642: LD_ADDR_VAR 0 18
35646: PUSH
35647: LD_INT 49
35649: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
35650: LD_VAR 0 12
35654: PUSH
35655: LD_INT 1
35657: PUSH
35658: LD_INT 2
35660: PUSH
35661: EMPTY
35662: LIST
35663: LIST
35664: IN
35665: PUSH
35666: LD_INT 11
35668: PUSH
35669: LD_VAR 0 5
35673: IN
35674: PUSH
35675: LD_INT 30
35677: PUSH
35678: LD_VAR 0 5
35682: IN
35683: OR
35684: AND
35685: PUSH
35686: LD_INT 6
35688: PPUSH
35689: LD_VAR 0 16
35693: PPUSH
35694: CALL_OW 321
35698: PUSH
35699: LD_INT 2
35701: EQUAL
35702: AND
35703: IFFALSE 35868
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
35705: LD_INT 22
35707: PUSH
35708: LD_VAR 0 16
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: PUSH
35717: LD_INT 2
35719: PUSH
35720: LD_INT 35
35722: PUSH
35723: LD_INT 11
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 35
35732: PUSH
35733: LD_INT 30
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 91
35747: PUSH
35748: LD_VAR 0 1
35752: PUSH
35753: LD_INT 18
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: LIST
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: LIST
35765: PPUSH
35766: CALL_OW 69
35770: NOT
35771: PUSH
35772: LD_INT 22
35774: PUSH
35775: LD_VAR 0 16
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PUSH
35784: LD_INT 2
35786: PUSH
35787: LD_INT 30
35789: PUSH
35790: LD_INT 32
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 30
35799: PUSH
35800: LD_INT 33
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: EMPTY
35808: LIST
35809: LIST
35810: LIST
35811: PUSH
35812: LD_INT 91
35814: PUSH
35815: LD_VAR 0 1
35819: PUSH
35820: LD_INT 12
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: LIST
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: PUSH
35833: EMPTY
35834: LIST
35835: PPUSH
35836: CALL_OW 69
35840: PUSH
35841: LD_INT 2
35843: GREATER
35844: AND
35845: IFFALSE 35868
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35847: LD_ADDR_VAR 0 18
35851: PUSH
35852: LD_INT 11
35854: PUSH
35855: LD_INT 30
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_VAR 0 12
35866: ARRAY
35867: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35868: LD_VAR 0 18
35872: NOT
35873: PUSH
35874: LD_INT 40
35876: PPUSH
35877: LD_VAR 0 16
35881: PPUSH
35882: CALL_OW 321
35886: PUSH
35887: LD_INT 2
35889: EQUAL
35890: AND
35891: PUSH
35892: LD_INT 7
35894: PUSH
35895: LD_VAR 0 5
35899: IN
35900: PUSH
35901: LD_INT 28
35903: PUSH
35904: LD_VAR 0 5
35908: IN
35909: OR
35910: PUSH
35911: LD_INT 45
35913: PUSH
35914: LD_VAR 0 5
35918: IN
35919: OR
35920: AND
35921: IFFALSE 36175
// begin hex := GetHexInfo ( x , y ) ;
35923: LD_ADDR_VAR 0 4
35927: PUSH
35928: LD_VAR 0 10
35932: PPUSH
35933: LD_VAR 0 11
35937: PPUSH
35938: CALL_OW 546
35942: ST_TO_ADDR
// if hex [ 1 ] then
35943: LD_VAR 0 4
35947: PUSH
35948: LD_INT 1
35950: ARRAY
35951: IFFALSE 35955
// exit ;
35953: GO 36358
// height := hex [ 2 ] ;
35955: LD_ADDR_VAR 0 15
35959: PUSH
35960: LD_VAR 0 4
35964: PUSH
35965: LD_INT 2
35967: ARRAY
35968: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35969: LD_ADDR_VAR 0 14
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 3
35982: PUSH
35983: LD_INT 5
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: ST_TO_ADDR
// for i in tmp do
35992: LD_ADDR_VAR 0 8
35996: PUSH
35997: LD_VAR 0 14
36001: PUSH
36002: FOR_IN
36003: IFFALSE 36173
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
36005: LD_ADDR_VAR 0 9
36009: PUSH
36010: LD_VAR 0 10
36014: PPUSH
36015: LD_VAR 0 8
36019: PPUSH
36020: LD_INT 5
36022: PPUSH
36023: CALL_OW 272
36027: PUSH
36028: LD_VAR 0 11
36032: PPUSH
36033: LD_VAR 0 8
36037: PPUSH
36038: LD_INT 5
36040: PPUSH
36041: CALL_OW 273
36045: PUSH
36046: EMPTY
36047: LIST
36048: LIST
36049: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
36050: LD_VAR 0 9
36054: PUSH
36055: LD_INT 1
36057: ARRAY
36058: PPUSH
36059: LD_VAR 0 9
36063: PUSH
36064: LD_INT 2
36066: ARRAY
36067: PPUSH
36068: CALL_OW 488
36072: IFFALSE 36171
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
36074: LD_ADDR_VAR 0 4
36078: PUSH
36079: LD_VAR 0 9
36083: PUSH
36084: LD_INT 1
36086: ARRAY
36087: PPUSH
36088: LD_VAR 0 9
36092: PUSH
36093: LD_INT 2
36095: ARRAY
36096: PPUSH
36097: CALL_OW 546
36101: ST_TO_ADDR
// if hex [ 1 ] then
36102: LD_VAR 0 4
36106: PUSH
36107: LD_INT 1
36109: ARRAY
36110: IFFALSE 36114
// continue ;
36112: GO 36002
// h := hex [ 2 ] ;
36114: LD_ADDR_VAR 0 13
36118: PUSH
36119: LD_VAR 0 4
36123: PUSH
36124: LD_INT 2
36126: ARRAY
36127: ST_TO_ADDR
// if h + 7 < height then
36128: LD_VAR 0 13
36132: PUSH
36133: LD_INT 7
36135: PLUS
36136: PUSH
36137: LD_VAR 0 15
36141: LESS
36142: IFFALSE 36171
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
36144: LD_ADDR_VAR 0 18
36148: PUSH
36149: LD_INT 7
36151: PUSH
36152: LD_INT 28
36154: PUSH
36155: LD_INT 45
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: LIST
36162: PUSH
36163: LD_VAR 0 12
36167: ARRAY
36168: ST_TO_ADDR
// break ;
36169: GO 36173
// end ; end ; end ;
36171: GO 36002
36173: POP
36174: POP
// end ; if not weapon then
36175: LD_VAR 0 18
36179: NOT
36180: IFFALSE 36240
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
36182: LD_ADDR_VAR 0 5
36186: PUSH
36187: LD_VAR 0 5
36191: PUSH
36192: LD_INT 11
36194: PUSH
36195: LD_INT 30
36197: PUSH
36198: LD_INT 49
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: LIST
36205: DIFF
36206: ST_TO_ADDR
// if not list then
36207: LD_VAR 0 5
36211: NOT
36212: IFFALSE 36216
// exit ;
36214: GO 36358
// weapon := list [ rand ( 1 , list ) ] ;
36216: LD_ADDR_VAR 0 18
36220: PUSH
36221: LD_VAR 0 5
36225: PUSH
36226: LD_INT 1
36228: PPUSH
36229: LD_VAR 0 5
36233: PPUSH
36234: CALL_OW 12
36238: ARRAY
36239: ST_TO_ADDR
// end ; if weapon then
36240: LD_VAR 0 18
36244: IFFALSE 36358
// begin tmp := CostOfWeapon ( weapon ) ;
36246: LD_ADDR_VAR 0 14
36250: PUSH
36251: LD_VAR 0 18
36255: PPUSH
36256: CALL_OW 451
36260: ST_TO_ADDR
// j := GetBase ( tower ) ;
36261: LD_ADDR_VAR 0 9
36265: PUSH
36266: LD_VAR 0 1
36270: PPUSH
36271: CALL_OW 274
36275: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
36276: LD_VAR 0 9
36280: PPUSH
36281: LD_INT 1
36283: PPUSH
36284: CALL_OW 275
36288: PUSH
36289: LD_VAR 0 14
36293: PUSH
36294: LD_INT 1
36296: ARRAY
36297: GREATEREQUAL
36298: PUSH
36299: LD_VAR 0 9
36303: PPUSH
36304: LD_INT 2
36306: PPUSH
36307: CALL_OW 275
36311: PUSH
36312: LD_VAR 0 14
36316: PUSH
36317: LD_INT 2
36319: ARRAY
36320: GREATEREQUAL
36321: AND
36322: PUSH
36323: LD_VAR 0 9
36327: PPUSH
36328: LD_INT 3
36330: PPUSH
36331: CALL_OW 275
36335: PUSH
36336: LD_VAR 0 14
36340: PUSH
36341: LD_INT 3
36343: ARRAY
36344: GREATEREQUAL
36345: AND
36346: IFFALSE 36358
// result := weapon ;
36348: LD_ADDR_VAR 0 3
36352: PUSH
36353: LD_VAR 0 18
36357: ST_TO_ADDR
// end ; end ;
36358: LD_VAR 0 3
36362: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
36363: LD_INT 0
36365: PPUSH
36366: PPUSH
// result := true ;
36367: LD_ADDR_VAR 0 3
36371: PUSH
36372: LD_INT 1
36374: ST_TO_ADDR
// if array1 = array2 then
36375: LD_VAR 0 1
36379: PUSH
36380: LD_VAR 0 2
36384: EQUAL
36385: IFFALSE 36445
// begin for i = 1 to array1 do
36387: LD_ADDR_VAR 0 4
36391: PUSH
36392: DOUBLE
36393: LD_INT 1
36395: DEC
36396: ST_TO_ADDR
36397: LD_VAR 0 1
36401: PUSH
36402: FOR_TO
36403: IFFALSE 36441
// if array1 [ i ] <> array2 [ i ] then
36405: LD_VAR 0 1
36409: PUSH
36410: LD_VAR 0 4
36414: ARRAY
36415: PUSH
36416: LD_VAR 0 2
36420: PUSH
36421: LD_VAR 0 4
36425: ARRAY
36426: NONEQUAL
36427: IFFALSE 36439
// begin result := false ;
36429: LD_ADDR_VAR 0 3
36433: PUSH
36434: LD_INT 0
36436: ST_TO_ADDR
// break ;
36437: GO 36441
// end ;
36439: GO 36402
36441: POP
36442: POP
// end else
36443: GO 36453
// result := false ;
36445: LD_ADDR_VAR 0 3
36449: PUSH
36450: LD_INT 0
36452: ST_TO_ADDR
// end ;
36453: LD_VAR 0 3
36457: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
// if not array1 or not array2 then
36462: LD_VAR 0 1
36466: NOT
36467: PUSH
36468: LD_VAR 0 2
36472: NOT
36473: OR
36474: IFFALSE 36478
// exit ;
36476: GO 36542
// result := true ;
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: LD_INT 1
36485: ST_TO_ADDR
// for i = 1 to array1 do
36486: LD_ADDR_VAR 0 4
36490: PUSH
36491: DOUBLE
36492: LD_INT 1
36494: DEC
36495: ST_TO_ADDR
36496: LD_VAR 0 1
36500: PUSH
36501: FOR_TO
36502: IFFALSE 36540
// if array1 [ i ] <> array2 [ i ] then
36504: LD_VAR 0 1
36508: PUSH
36509: LD_VAR 0 4
36513: ARRAY
36514: PUSH
36515: LD_VAR 0 2
36519: PUSH
36520: LD_VAR 0 4
36524: ARRAY
36525: NONEQUAL
36526: IFFALSE 36538
// begin result := false ;
36528: LD_ADDR_VAR 0 3
36532: PUSH
36533: LD_INT 0
36535: ST_TO_ADDR
// break ;
36536: GO 36540
// end ;
36538: GO 36501
36540: POP
36541: POP
// end ;
36542: LD_VAR 0 3
36546: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
36547: LD_INT 0
36549: PPUSH
36550: PPUSH
36551: PPUSH
// pom := GetBase ( fac ) ;
36552: LD_ADDR_VAR 0 5
36556: PUSH
36557: LD_VAR 0 1
36561: PPUSH
36562: CALL_OW 274
36566: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
36567: LD_ADDR_VAR 0 4
36571: PUSH
36572: LD_VAR 0 2
36576: PUSH
36577: LD_INT 1
36579: ARRAY
36580: PPUSH
36581: LD_VAR 0 2
36585: PUSH
36586: LD_INT 2
36588: ARRAY
36589: PPUSH
36590: LD_VAR 0 2
36594: PUSH
36595: LD_INT 3
36597: ARRAY
36598: PPUSH
36599: LD_VAR 0 2
36603: PUSH
36604: LD_INT 4
36606: ARRAY
36607: PPUSH
36608: CALL_OW 449
36612: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36613: LD_ADDR_VAR 0 3
36617: PUSH
36618: LD_VAR 0 5
36622: PPUSH
36623: LD_INT 1
36625: PPUSH
36626: CALL_OW 275
36630: PUSH
36631: LD_VAR 0 4
36635: PUSH
36636: LD_INT 1
36638: ARRAY
36639: GREATEREQUAL
36640: PUSH
36641: LD_VAR 0 5
36645: PPUSH
36646: LD_INT 2
36648: PPUSH
36649: CALL_OW 275
36653: PUSH
36654: LD_VAR 0 4
36658: PUSH
36659: LD_INT 2
36661: ARRAY
36662: GREATEREQUAL
36663: AND
36664: PUSH
36665: LD_VAR 0 5
36669: PPUSH
36670: LD_INT 3
36672: PPUSH
36673: CALL_OW 275
36677: PUSH
36678: LD_VAR 0 4
36682: PUSH
36683: LD_INT 3
36685: ARRAY
36686: GREATEREQUAL
36687: AND
36688: ST_TO_ADDR
// end ;
36689: LD_VAR 0 3
36693: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
36694: LD_INT 0
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
// pom := GetBase ( building ) ;
36700: LD_ADDR_VAR 0 3
36704: PUSH
36705: LD_VAR 0 1
36709: PPUSH
36710: CALL_OW 274
36714: ST_TO_ADDR
// if not pom then
36715: LD_VAR 0 3
36719: NOT
36720: IFFALSE 36724
// exit ;
36722: GO 36894
// btype := GetBType ( building ) ;
36724: LD_ADDR_VAR 0 5
36728: PUSH
36729: LD_VAR 0 1
36733: PPUSH
36734: CALL_OW 266
36738: ST_TO_ADDR
// if btype = b_armoury then
36739: LD_VAR 0 5
36743: PUSH
36744: LD_INT 4
36746: EQUAL
36747: IFFALSE 36757
// btype := b_barracks ;
36749: LD_ADDR_VAR 0 5
36753: PUSH
36754: LD_INT 5
36756: ST_TO_ADDR
// if btype = b_depot then
36757: LD_VAR 0 5
36761: PUSH
36762: LD_INT 0
36764: EQUAL
36765: IFFALSE 36775
// btype := b_warehouse ;
36767: LD_ADDR_VAR 0 5
36771: PUSH
36772: LD_INT 1
36774: ST_TO_ADDR
// if btype = b_workshop then
36775: LD_VAR 0 5
36779: PUSH
36780: LD_INT 2
36782: EQUAL
36783: IFFALSE 36793
// btype := b_factory ;
36785: LD_ADDR_VAR 0 5
36789: PUSH
36790: LD_INT 3
36792: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36793: LD_ADDR_VAR 0 4
36797: PUSH
36798: LD_VAR 0 5
36802: PPUSH
36803: LD_VAR 0 1
36807: PPUSH
36808: CALL_OW 248
36812: PPUSH
36813: CALL_OW 450
36817: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36818: LD_ADDR_VAR 0 2
36822: PUSH
36823: LD_VAR 0 3
36827: PPUSH
36828: LD_INT 1
36830: PPUSH
36831: CALL_OW 275
36835: PUSH
36836: LD_VAR 0 4
36840: PUSH
36841: LD_INT 1
36843: ARRAY
36844: GREATEREQUAL
36845: PUSH
36846: LD_VAR 0 3
36850: PPUSH
36851: LD_INT 2
36853: PPUSH
36854: CALL_OW 275
36858: PUSH
36859: LD_VAR 0 4
36863: PUSH
36864: LD_INT 2
36866: ARRAY
36867: GREATEREQUAL
36868: AND
36869: PUSH
36870: LD_VAR 0 3
36874: PPUSH
36875: LD_INT 3
36877: PPUSH
36878: CALL_OW 275
36882: PUSH
36883: LD_VAR 0 4
36887: PUSH
36888: LD_INT 3
36890: ARRAY
36891: GREATEREQUAL
36892: AND
36893: ST_TO_ADDR
// end ;
36894: LD_VAR 0 2
36898: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36899: LD_INT 0
36901: PPUSH
36902: PPUSH
36903: PPUSH
// pom := GetBase ( building ) ;
36904: LD_ADDR_VAR 0 4
36908: PUSH
36909: LD_VAR 0 1
36913: PPUSH
36914: CALL_OW 274
36918: ST_TO_ADDR
// if not pom then
36919: LD_VAR 0 4
36923: NOT
36924: IFFALSE 36928
// exit ;
36926: GO 37029
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36928: LD_ADDR_VAR 0 5
36932: PUSH
36933: LD_VAR 0 2
36937: PPUSH
36938: LD_VAR 0 1
36942: PPUSH
36943: CALL_OW 248
36947: PPUSH
36948: CALL_OW 450
36952: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36953: LD_ADDR_VAR 0 3
36957: PUSH
36958: LD_VAR 0 4
36962: PPUSH
36963: LD_INT 1
36965: PPUSH
36966: CALL_OW 275
36970: PUSH
36971: LD_VAR 0 5
36975: PUSH
36976: LD_INT 1
36978: ARRAY
36979: GREATEREQUAL
36980: PUSH
36981: LD_VAR 0 4
36985: PPUSH
36986: LD_INT 2
36988: PPUSH
36989: CALL_OW 275
36993: PUSH
36994: LD_VAR 0 5
36998: PUSH
36999: LD_INT 2
37001: ARRAY
37002: GREATEREQUAL
37003: AND
37004: PUSH
37005: LD_VAR 0 4
37009: PPUSH
37010: LD_INT 3
37012: PPUSH
37013: CALL_OW 275
37017: PUSH
37018: LD_VAR 0 5
37022: PUSH
37023: LD_INT 3
37025: ARRAY
37026: GREATEREQUAL
37027: AND
37028: ST_TO_ADDR
// end ;
37029: LD_VAR 0 3
37033: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
37034: LD_INT 0
37036: PPUSH
37037: PPUSH
37038: PPUSH
37039: PPUSH
37040: PPUSH
37041: PPUSH
37042: PPUSH
37043: PPUSH
37044: PPUSH
37045: PPUSH
37046: PPUSH
// result := false ;
37047: LD_ADDR_VAR 0 8
37051: PUSH
37052: LD_INT 0
37054: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
37055: LD_VAR 0 5
37059: NOT
37060: PUSH
37061: LD_VAR 0 1
37065: NOT
37066: OR
37067: PUSH
37068: LD_VAR 0 2
37072: NOT
37073: OR
37074: PUSH
37075: LD_VAR 0 3
37079: NOT
37080: OR
37081: IFFALSE 37085
// exit ;
37083: GO 37899
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
37085: LD_ADDR_VAR 0 14
37089: PUSH
37090: LD_VAR 0 1
37094: PPUSH
37095: LD_VAR 0 2
37099: PPUSH
37100: LD_VAR 0 3
37104: PPUSH
37105: LD_VAR 0 4
37109: PPUSH
37110: LD_VAR 0 5
37114: PUSH
37115: LD_INT 1
37117: ARRAY
37118: PPUSH
37119: CALL_OW 248
37123: PPUSH
37124: LD_INT 0
37126: PPUSH
37127: CALL 39136 0 6
37131: ST_TO_ADDR
// if not hexes then
37132: LD_VAR 0 14
37136: NOT
37137: IFFALSE 37141
// exit ;
37139: GO 37899
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37141: LD_ADDR_VAR 0 17
37145: PUSH
37146: LD_VAR 0 5
37150: PPUSH
37151: LD_INT 22
37153: PUSH
37154: LD_VAR 0 13
37158: PPUSH
37159: CALL_OW 255
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 30
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 30
37183: PUSH
37184: LD_INT 1
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: EMPTY
37192: LIST
37193: LIST
37194: LIST
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PPUSH
37200: CALL_OW 72
37204: ST_TO_ADDR
// for i = 1 to hexes do
37205: LD_ADDR_VAR 0 9
37209: PUSH
37210: DOUBLE
37211: LD_INT 1
37213: DEC
37214: ST_TO_ADDR
37215: LD_VAR 0 14
37219: PUSH
37220: FOR_TO
37221: IFFALSE 37897
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37223: LD_ADDR_VAR 0 13
37227: PUSH
37228: LD_VAR 0 14
37232: PUSH
37233: LD_VAR 0 9
37237: ARRAY
37238: PUSH
37239: LD_INT 1
37241: ARRAY
37242: PPUSH
37243: LD_VAR 0 14
37247: PUSH
37248: LD_VAR 0 9
37252: ARRAY
37253: PUSH
37254: LD_INT 2
37256: ARRAY
37257: PPUSH
37258: CALL_OW 428
37262: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
37263: LD_VAR 0 14
37267: PUSH
37268: LD_VAR 0 9
37272: ARRAY
37273: PUSH
37274: LD_INT 1
37276: ARRAY
37277: PPUSH
37278: LD_VAR 0 14
37282: PUSH
37283: LD_VAR 0 9
37287: ARRAY
37288: PUSH
37289: LD_INT 2
37291: ARRAY
37292: PPUSH
37293: CALL_OW 351
37297: PUSH
37298: LD_VAR 0 14
37302: PUSH
37303: LD_VAR 0 9
37307: ARRAY
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: PPUSH
37313: LD_VAR 0 14
37317: PUSH
37318: LD_VAR 0 9
37322: ARRAY
37323: PUSH
37324: LD_INT 2
37326: ARRAY
37327: PPUSH
37328: CALL_OW 488
37332: NOT
37333: OR
37334: PUSH
37335: LD_VAR 0 13
37339: PPUSH
37340: CALL_OW 247
37344: PUSH
37345: LD_INT 3
37347: EQUAL
37348: OR
37349: IFFALSE 37355
// exit ;
37351: POP
37352: POP
37353: GO 37899
// if not tmp then
37355: LD_VAR 0 13
37359: NOT
37360: IFFALSE 37364
// continue ;
37362: GO 37220
// result := true ;
37364: LD_ADDR_VAR 0 8
37368: PUSH
37369: LD_INT 1
37371: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
37372: LD_VAR 0 6
37376: PUSH
37377: LD_VAR 0 13
37381: PPUSH
37382: CALL_OW 247
37386: PUSH
37387: LD_INT 2
37389: EQUAL
37390: AND
37391: PUSH
37392: LD_VAR 0 13
37396: PPUSH
37397: CALL_OW 263
37401: PUSH
37402: LD_INT 1
37404: EQUAL
37405: AND
37406: IFFALSE 37570
// begin if IsDrivenBy ( tmp ) then
37408: LD_VAR 0 13
37412: PPUSH
37413: CALL_OW 311
37417: IFFALSE 37421
// continue ;
37419: GO 37220
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
37421: LD_VAR 0 6
37425: PPUSH
37426: LD_INT 3
37428: PUSH
37429: LD_INT 60
37431: PUSH
37432: EMPTY
37433: LIST
37434: PUSH
37435: EMPTY
37436: LIST
37437: LIST
37438: PUSH
37439: LD_INT 3
37441: PUSH
37442: LD_INT 55
37444: PUSH
37445: EMPTY
37446: LIST
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PPUSH
37456: CALL_OW 72
37460: IFFALSE 37568
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
37462: LD_ADDR_VAR 0 18
37466: PUSH
37467: LD_VAR 0 6
37471: PPUSH
37472: LD_INT 3
37474: PUSH
37475: LD_INT 60
37477: PUSH
37478: EMPTY
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: LD_INT 55
37490: PUSH
37491: EMPTY
37492: LIST
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PPUSH
37502: CALL_OW 72
37506: PUSH
37507: LD_INT 1
37509: ARRAY
37510: ST_TO_ADDR
// if IsInUnit ( driver ) then
37511: LD_VAR 0 18
37515: PPUSH
37516: CALL_OW 310
37520: IFFALSE 37531
// ComExit ( driver ) ;
37522: LD_VAR 0 18
37526: PPUSH
37527: CALL 62320 0 1
// AddComEnterUnit ( driver , tmp ) ;
37531: LD_VAR 0 18
37535: PPUSH
37536: LD_VAR 0 13
37540: PPUSH
37541: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
37545: LD_VAR 0 18
37549: PPUSH
37550: LD_VAR 0 7
37554: PPUSH
37555: CALL_OW 173
// AddComExitVehicle ( driver ) ;
37559: LD_VAR 0 18
37563: PPUSH
37564: CALL_OW 181
// end ; continue ;
37568: GO 37220
// end ; if not cleaners or not tmp in cleaners then
37570: LD_VAR 0 6
37574: NOT
37575: PUSH
37576: LD_VAR 0 13
37580: PUSH
37581: LD_VAR 0 6
37585: IN
37586: NOT
37587: OR
37588: IFFALSE 37895
// begin if dep then
37590: LD_VAR 0 17
37594: IFFALSE 37730
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
37596: LD_ADDR_VAR 0 16
37600: PUSH
37601: LD_VAR 0 17
37605: PUSH
37606: LD_INT 1
37608: ARRAY
37609: PPUSH
37610: CALL_OW 250
37614: PPUSH
37615: LD_VAR 0 17
37619: PUSH
37620: LD_INT 1
37622: ARRAY
37623: PPUSH
37624: CALL_OW 254
37628: PPUSH
37629: LD_INT 5
37631: PPUSH
37632: CALL_OW 272
37636: PUSH
37637: LD_VAR 0 17
37641: PUSH
37642: LD_INT 1
37644: ARRAY
37645: PPUSH
37646: CALL_OW 251
37650: PPUSH
37651: LD_VAR 0 17
37655: PUSH
37656: LD_INT 1
37658: ARRAY
37659: PPUSH
37660: CALL_OW 254
37664: PPUSH
37665: LD_INT 5
37667: PPUSH
37668: CALL_OW 273
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
37677: LD_VAR 0 16
37681: PUSH
37682: LD_INT 1
37684: ARRAY
37685: PPUSH
37686: LD_VAR 0 16
37690: PUSH
37691: LD_INT 2
37693: ARRAY
37694: PPUSH
37695: CALL_OW 488
37699: IFFALSE 37730
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
37701: LD_VAR 0 13
37705: PPUSH
37706: LD_VAR 0 16
37710: PUSH
37711: LD_INT 1
37713: ARRAY
37714: PPUSH
37715: LD_VAR 0 16
37719: PUSH
37720: LD_INT 2
37722: ARRAY
37723: PPUSH
37724: CALL_OW 111
// continue ;
37728: GO 37220
// end ; end ; r := GetDir ( tmp ) ;
37730: LD_ADDR_VAR 0 15
37734: PUSH
37735: LD_VAR 0 13
37739: PPUSH
37740: CALL_OW 254
37744: ST_TO_ADDR
// if r = 5 then
37745: LD_VAR 0 15
37749: PUSH
37750: LD_INT 5
37752: EQUAL
37753: IFFALSE 37763
// r := 0 ;
37755: LD_ADDR_VAR 0 15
37759: PUSH
37760: LD_INT 0
37762: ST_TO_ADDR
// for j = r to 5 do
37763: LD_ADDR_VAR 0 10
37767: PUSH
37768: DOUBLE
37769: LD_VAR 0 15
37773: DEC
37774: ST_TO_ADDR
37775: LD_INT 5
37777: PUSH
37778: FOR_TO
37779: IFFALSE 37893
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
37781: LD_ADDR_VAR 0 11
37785: PUSH
37786: LD_VAR 0 13
37790: PPUSH
37791: CALL_OW 250
37795: PPUSH
37796: LD_VAR 0 10
37800: PPUSH
37801: LD_INT 2
37803: PPUSH
37804: CALL_OW 272
37808: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
37809: LD_ADDR_VAR 0 12
37813: PUSH
37814: LD_VAR 0 13
37818: PPUSH
37819: CALL_OW 251
37823: PPUSH
37824: LD_VAR 0 10
37828: PPUSH
37829: LD_INT 2
37831: PPUSH
37832: CALL_OW 273
37836: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
37837: LD_VAR 0 11
37841: PPUSH
37842: LD_VAR 0 12
37846: PPUSH
37847: CALL_OW 488
37851: PUSH
37852: LD_VAR 0 11
37856: PPUSH
37857: LD_VAR 0 12
37861: PPUSH
37862: CALL_OW 428
37866: NOT
37867: AND
37868: IFFALSE 37891
// begin ComMoveXY ( tmp , _x , _y ) ;
37870: LD_VAR 0 13
37874: PPUSH
37875: LD_VAR 0 11
37879: PPUSH
37880: LD_VAR 0 12
37884: PPUSH
37885: CALL_OW 111
// break ;
37889: GO 37893
// end ; end ;
37891: GO 37778
37893: POP
37894: POP
// end ; end ;
37895: GO 37220
37897: POP
37898: POP
// end ;
37899: LD_VAR 0 8
37903: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37904: LD_INT 0
37906: PPUSH
// result := true ;
37907: LD_ADDR_VAR 0 3
37911: PUSH
37912: LD_INT 1
37914: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37915: LD_VAR 0 2
37919: PUSH
37920: LD_INT 24
37922: DOUBLE
37923: EQUAL
37924: IFTRUE 37934
37926: LD_INT 33
37928: DOUBLE
37929: EQUAL
37930: IFTRUE 37934
37932: GO 37959
37934: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37935: LD_ADDR_VAR 0 3
37939: PUSH
37940: LD_INT 32
37942: PPUSH
37943: LD_VAR 0 1
37947: PPUSH
37948: CALL_OW 321
37952: PUSH
37953: LD_INT 2
37955: EQUAL
37956: ST_TO_ADDR
37957: GO 38279
37959: LD_INT 20
37961: DOUBLE
37962: EQUAL
37963: IFTRUE 37967
37965: GO 37992
37967: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37968: LD_ADDR_VAR 0 3
37972: PUSH
37973: LD_INT 6
37975: PPUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 321
37985: PUSH
37986: LD_INT 2
37988: EQUAL
37989: ST_TO_ADDR
37990: GO 38279
37992: LD_INT 22
37994: DOUBLE
37995: EQUAL
37996: IFTRUE 38006
37998: LD_INT 36
38000: DOUBLE
38001: EQUAL
38002: IFTRUE 38006
38004: GO 38031
38006: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
38007: LD_ADDR_VAR 0 3
38011: PUSH
38012: LD_INT 15
38014: PPUSH
38015: LD_VAR 0 1
38019: PPUSH
38020: CALL_OW 321
38024: PUSH
38025: LD_INT 2
38027: EQUAL
38028: ST_TO_ADDR
38029: GO 38279
38031: LD_INT 30
38033: DOUBLE
38034: EQUAL
38035: IFTRUE 38039
38037: GO 38064
38039: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
38040: LD_ADDR_VAR 0 3
38044: PUSH
38045: LD_INT 20
38047: PPUSH
38048: LD_VAR 0 1
38052: PPUSH
38053: CALL_OW 321
38057: PUSH
38058: LD_INT 2
38060: EQUAL
38061: ST_TO_ADDR
38062: GO 38279
38064: LD_INT 28
38066: DOUBLE
38067: EQUAL
38068: IFTRUE 38078
38070: LD_INT 21
38072: DOUBLE
38073: EQUAL
38074: IFTRUE 38078
38076: GO 38103
38078: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
38079: LD_ADDR_VAR 0 3
38083: PUSH
38084: LD_INT 21
38086: PPUSH
38087: LD_VAR 0 1
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: EQUAL
38100: ST_TO_ADDR
38101: GO 38279
38103: LD_INT 16
38105: DOUBLE
38106: EQUAL
38107: IFTRUE 38111
38109: GO 38138
38111: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
38112: LD_ADDR_VAR 0 3
38116: PUSH
38117: LD_EXP 36
38121: PPUSH
38122: LD_VAR 0 1
38126: PPUSH
38127: CALL_OW 321
38131: PUSH
38132: LD_INT 2
38134: EQUAL
38135: ST_TO_ADDR
38136: GO 38279
38138: LD_INT 19
38140: DOUBLE
38141: EQUAL
38142: IFTRUE 38152
38144: LD_INT 23
38146: DOUBLE
38147: EQUAL
38148: IFTRUE 38152
38150: GO 38179
38152: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
38153: LD_ADDR_VAR 0 3
38157: PUSH
38158: LD_EXP 35
38162: PPUSH
38163: LD_VAR 0 1
38167: PPUSH
38168: CALL_OW 321
38172: PUSH
38173: LD_INT 2
38175: EQUAL
38176: ST_TO_ADDR
38177: GO 38279
38179: LD_INT 17
38181: DOUBLE
38182: EQUAL
38183: IFTRUE 38187
38185: GO 38212
38187: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
38188: LD_ADDR_VAR 0 3
38192: PUSH
38193: LD_INT 39
38195: PPUSH
38196: LD_VAR 0 1
38200: PPUSH
38201: CALL_OW 321
38205: PUSH
38206: LD_INT 2
38208: EQUAL
38209: ST_TO_ADDR
38210: GO 38279
38212: LD_INT 18
38214: DOUBLE
38215: EQUAL
38216: IFTRUE 38220
38218: GO 38245
38220: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_INT 40
38228: PPUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 321
38238: PUSH
38239: LD_INT 2
38241: EQUAL
38242: ST_TO_ADDR
38243: GO 38279
38245: LD_INT 27
38247: DOUBLE
38248: EQUAL
38249: IFTRUE 38253
38251: GO 38278
38253: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
38254: LD_ADDR_VAR 0 3
38258: PUSH
38259: LD_INT 35
38261: PPUSH
38262: LD_VAR 0 1
38266: PPUSH
38267: CALL_OW 321
38271: PUSH
38272: LD_INT 2
38274: EQUAL
38275: ST_TO_ADDR
38276: GO 38279
38278: POP
// end ;
38279: LD_VAR 0 3
38283: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
38284: LD_INT 0
38286: PPUSH
38287: PPUSH
38288: PPUSH
38289: PPUSH
38290: PPUSH
38291: PPUSH
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
// result := false ;
38297: LD_ADDR_VAR 0 6
38301: PUSH
38302: LD_INT 0
38304: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
38305: LD_VAR 0 1
38309: NOT
38310: PUSH
38311: LD_VAR 0 1
38315: PPUSH
38316: CALL_OW 266
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: IN
38331: NOT
38332: OR
38333: PUSH
38334: LD_VAR 0 2
38338: NOT
38339: OR
38340: PUSH
38341: LD_VAR 0 5
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: LD_INT 2
38354: PUSH
38355: LD_INT 3
38357: PUSH
38358: LD_INT 4
38360: PUSH
38361: LD_INT 5
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: IN
38372: NOT
38373: OR
38374: PUSH
38375: LD_VAR 0 3
38379: PPUSH
38380: LD_VAR 0 4
38384: PPUSH
38385: CALL_OW 488
38389: NOT
38390: OR
38391: IFFALSE 38395
// exit ;
38393: GO 39131
// side := GetSide ( depot ) ;
38395: LD_ADDR_VAR 0 9
38399: PUSH
38400: LD_VAR 0 1
38404: PPUSH
38405: CALL_OW 255
38409: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
38410: LD_VAR 0 9
38414: PPUSH
38415: LD_VAR 0 2
38419: PPUSH
38420: CALL 37904 0 2
38424: NOT
38425: IFFALSE 38429
// exit ;
38427: GO 39131
// pom := GetBase ( depot ) ;
38429: LD_ADDR_VAR 0 10
38433: PUSH
38434: LD_VAR 0 1
38438: PPUSH
38439: CALL_OW 274
38443: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
38444: LD_ADDR_VAR 0 11
38448: PUSH
38449: LD_VAR 0 2
38453: PPUSH
38454: LD_VAR 0 1
38458: PPUSH
38459: CALL_OW 248
38463: PPUSH
38464: CALL_OW 450
38468: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
38469: LD_VAR 0 10
38473: PPUSH
38474: LD_INT 1
38476: PPUSH
38477: CALL_OW 275
38481: PUSH
38482: LD_VAR 0 11
38486: PUSH
38487: LD_INT 1
38489: ARRAY
38490: GREATEREQUAL
38491: PUSH
38492: LD_VAR 0 10
38496: PPUSH
38497: LD_INT 2
38499: PPUSH
38500: CALL_OW 275
38504: PUSH
38505: LD_VAR 0 11
38509: PUSH
38510: LD_INT 2
38512: ARRAY
38513: GREATEREQUAL
38514: AND
38515: PUSH
38516: LD_VAR 0 10
38520: PPUSH
38521: LD_INT 3
38523: PPUSH
38524: CALL_OW 275
38528: PUSH
38529: LD_VAR 0 11
38533: PUSH
38534: LD_INT 3
38536: ARRAY
38537: GREATEREQUAL
38538: AND
38539: NOT
38540: IFFALSE 38544
// exit ;
38542: GO 39131
// if GetBType ( depot ) = b_depot then
38544: LD_VAR 0 1
38548: PPUSH
38549: CALL_OW 266
38553: PUSH
38554: LD_INT 0
38556: EQUAL
38557: IFFALSE 38569
// dist := 28 else
38559: LD_ADDR_VAR 0 14
38563: PUSH
38564: LD_INT 28
38566: ST_TO_ADDR
38567: GO 38577
// dist := 36 ;
38569: LD_ADDR_VAR 0 14
38573: PUSH
38574: LD_INT 36
38576: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
38577: LD_VAR 0 1
38581: PPUSH
38582: LD_VAR 0 3
38586: PPUSH
38587: LD_VAR 0 4
38591: PPUSH
38592: CALL_OW 297
38596: PUSH
38597: LD_VAR 0 14
38601: GREATER
38602: IFFALSE 38606
// exit ;
38604: GO 39131
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
38606: LD_ADDR_VAR 0 12
38610: PUSH
38611: LD_VAR 0 2
38615: PPUSH
38616: LD_VAR 0 3
38620: PPUSH
38621: LD_VAR 0 4
38625: PPUSH
38626: LD_VAR 0 5
38630: PPUSH
38631: LD_VAR 0 1
38635: PPUSH
38636: CALL_OW 248
38640: PPUSH
38641: LD_INT 0
38643: PPUSH
38644: CALL 39136 0 6
38648: ST_TO_ADDR
// if not hexes then
38649: LD_VAR 0 12
38653: NOT
38654: IFFALSE 38658
// exit ;
38656: GO 39131
// hex := GetHexInfo ( x , y ) ;
38658: LD_ADDR_VAR 0 15
38662: PUSH
38663: LD_VAR 0 3
38667: PPUSH
38668: LD_VAR 0 4
38672: PPUSH
38673: CALL_OW 546
38677: ST_TO_ADDR
// if hex [ 1 ] then
38678: LD_VAR 0 15
38682: PUSH
38683: LD_INT 1
38685: ARRAY
38686: IFFALSE 38690
// exit ;
38688: GO 39131
// height := hex [ 2 ] ;
38690: LD_ADDR_VAR 0 13
38694: PUSH
38695: LD_VAR 0 15
38699: PUSH
38700: LD_INT 2
38702: ARRAY
38703: ST_TO_ADDR
// for i = 1 to hexes do
38704: LD_ADDR_VAR 0 7
38708: PUSH
38709: DOUBLE
38710: LD_INT 1
38712: DEC
38713: ST_TO_ADDR
38714: LD_VAR 0 12
38718: PUSH
38719: FOR_TO
38720: IFFALSE 39050
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
38722: LD_VAR 0 12
38726: PUSH
38727: LD_VAR 0 7
38731: ARRAY
38732: PUSH
38733: LD_INT 1
38735: ARRAY
38736: PPUSH
38737: LD_VAR 0 12
38741: PUSH
38742: LD_VAR 0 7
38746: ARRAY
38747: PUSH
38748: LD_INT 2
38750: ARRAY
38751: PPUSH
38752: CALL_OW 488
38756: NOT
38757: PUSH
38758: LD_VAR 0 12
38762: PUSH
38763: LD_VAR 0 7
38767: ARRAY
38768: PUSH
38769: LD_INT 1
38771: ARRAY
38772: PPUSH
38773: LD_VAR 0 12
38777: PUSH
38778: LD_VAR 0 7
38782: ARRAY
38783: PUSH
38784: LD_INT 2
38786: ARRAY
38787: PPUSH
38788: CALL_OW 428
38792: PUSH
38793: LD_INT 0
38795: GREATER
38796: OR
38797: PUSH
38798: LD_VAR 0 12
38802: PUSH
38803: LD_VAR 0 7
38807: ARRAY
38808: PUSH
38809: LD_INT 1
38811: ARRAY
38812: PPUSH
38813: LD_VAR 0 12
38817: PUSH
38818: LD_VAR 0 7
38822: ARRAY
38823: PUSH
38824: LD_INT 2
38826: ARRAY
38827: PPUSH
38828: CALL_OW 351
38832: OR
38833: IFFALSE 38839
// exit ;
38835: POP
38836: POP
38837: GO 39131
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38839: LD_ADDR_VAR 0 8
38843: PUSH
38844: LD_VAR 0 12
38848: PUSH
38849: LD_VAR 0 7
38853: ARRAY
38854: PUSH
38855: LD_INT 1
38857: ARRAY
38858: PPUSH
38859: LD_VAR 0 12
38863: PUSH
38864: LD_VAR 0 7
38868: ARRAY
38869: PUSH
38870: LD_INT 2
38872: ARRAY
38873: PPUSH
38874: CALL_OW 546
38878: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38879: LD_VAR 0 8
38883: PUSH
38884: LD_INT 1
38886: ARRAY
38887: PUSH
38888: LD_VAR 0 8
38892: PUSH
38893: LD_INT 2
38895: ARRAY
38896: PUSH
38897: LD_VAR 0 13
38901: PUSH
38902: LD_INT 2
38904: PLUS
38905: GREATER
38906: OR
38907: PUSH
38908: LD_VAR 0 8
38912: PUSH
38913: LD_INT 2
38915: ARRAY
38916: PUSH
38917: LD_VAR 0 13
38921: PUSH
38922: LD_INT 2
38924: MINUS
38925: LESS
38926: OR
38927: PUSH
38928: LD_VAR 0 8
38932: PUSH
38933: LD_INT 3
38935: ARRAY
38936: PUSH
38937: LD_INT 0
38939: PUSH
38940: LD_INT 8
38942: PUSH
38943: LD_INT 9
38945: PUSH
38946: LD_INT 10
38948: PUSH
38949: LD_INT 11
38951: PUSH
38952: LD_INT 12
38954: PUSH
38955: LD_INT 13
38957: PUSH
38958: LD_INT 16
38960: PUSH
38961: LD_INT 17
38963: PUSH
38964: LD_INT 18
38966: PUSH
38967: LD_INT 19
38969: PUSH
38970: LD_INT 20
38972: PUSH
38973: LD_INT 21
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: IN
38991: NOT
38992: OR
38993: PUSH
38994: LD_VAR 0 8
38998: PUSH
38999: LD_INT 5
39001: ARRAY
39002: NOT
39003: OR
39004: PUSH
39005: LD_VAR 0 8
39009: PUSH
39010: LD_INT 6
39012: ARRAY
39013: PUSH
39014: LD_INT 1
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: LD_INT 7
39022: PUSH
39023: LD_INT 9
39025: PUSH
39026: LD_INT 10
39028: PUSH
39029: LD_INT 11
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: IN
39040: NOT
39041: OR
39042: IFFALSE 39048
// exit ;
39044: POP
39045: POP
39046: GO 39131
// end ;
39048: GO 38719
39050: POP
39051: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39052: LD_VAR 0 9
39056: PPUSH
39057: LD_VAR 0 3
39061: PPUSH
39062: LD_VAR 0 4
39066: PPUSH
39067: LD_INT 20
39069: PPUSH
39070: CALL 31077 0 4
39074: PUSH
39075: LD_INT 4
39077: ARRAY
39078: IFFALSE 39082
// exit ;
39080: GO 39131
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39082: LD_VAR 0 2
39086: PUSH
39087: LD_INT 29
39089: PUSH
39090: LD_INT 30
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: IN
39097: PUSH
39098: LD_VAR 0 3
39102: PPUSH
39103: LD_VAR 0 4
39107: PPUSH
39108: LD_VAR 0 9
39112: PPUSH
39113: CALL_OW 440
39117: NOT
39118: AND
39119: IFFALSE 39123
// exit ;
39121: GO 39131
// result := true ;
39123: LD_ADDR_VAR 0 6
39127: PUSH
39128: LD_INT 1
39130: ST_TO_ADDR
// end ;
39131: LD_VAR 0 6
39135: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
39136: LD_INT 0
39138: PPUSH
39139: PPUSH
39140: PPUSH
39141: PPUSH
39142: PPUSH
39143: PPUSH
39144: PPUSH
39145: PPUSH
39146: PPUSH
39147: PPUSH
39148: PPUSH
39149: PPUSH
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
39159: PPUSH
39160: PPUSH
39161: PPUSH
39162: PPUSH
39163: PPUSH
39164: PPUSH
39165: PPUSH
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
39182: PPUSH
39183: PPUSH
39184: PPUSH
39185: PPUSH
39186: PPUSH
39187: PPUSH
39188: PPUSH
39189: PPUSH
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
// result = [ ] ;
39196: LD_ADDR_VAR 0 7
39200: PUSH
39201: EMPTY
39202: ST_TO_ADDR
// temp_list = [ ] ;
39203: LD_ADDR_VAR 0 9
39207: PUSH
39208: EMPTY
39209: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39210: LD_VAR 0 4
39214: PUSH
39215: LD_INT 0
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 2
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 4
39229: PUSH
39230: LD_INT 5
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: IN
39241: NOT
39242: PUSH
39243: LD_VAR 0 1
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: EMPTY
39255: LIST
39256: LIST
39257: IN
39258: PUSH
39259: LD_VAR 0 5
39263: PUSH
39264: LD_INT 1
39266: PUSH
39267: LD_INT 2
39269: PUSH
39270: LD_INT 3
39272: PUSH
39273: EMPTY
39274: LIST
39275: LIST
39276: LIST
39277: IN
39278: NOT
39279: AND
39280: OR
39281: IFFALSE 39285
// exit ;
39283: GO 57676
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39285: LD_VAR 0 1
39289: PUSH
39290: LD_INT 6
39292: PUSH
39293: LD_INT 7
39295: PUSH
39296: LD_INT 8
39298: PUSH
39299: LD_INT 13
39301: PUSH
39302: LD_INT 12
39304: PUSH
39305: LD_INT 15
39307: PUSH
39308: LD_INT 11
39310: PUSH
39311: LD_INT 14
39313: PUSH
39314: LD_INT 10
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: IN
39328: IFFALSE 39338
// btype = b_lab ;
39330: LD_ADDR_VAR 0 1
39334: PUSH
39335: LD_INT 6
39337: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
39338: LD_VAR 0 6
39342: PUSH
39343: LD_INT 0
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: IN
39357: NOT
39358: PUSH
39359: LD_VAR 0 1
39363: PUSH
39364: LD_INT 0
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 2
39372: PUSH
39373: LD_INT 3
39375: PUSH
39376: LD_INT 6
39378: PUSH
39379: LD_INT 36
39381: PUSH
39382: LD_INT 4
39384: PUSH
39385: LD_INT 5
39387: PUSH
39388: LD_INT 31
39390: PUSH
39391: LD_INT 32
39393: PUSH
39394: LD_INT 33
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: IN
39410: NOT
39411: PUSH
39412: LD_VAR 0 6
39416: PUSH
39417: LD_INT 1
39419: EQUAL
39420: AND
39421: OR
39422: PUSH
39423: LD_VAR 0 1
39427: PUSH
39428: LD_INT 2
39430: PUSH
39431: LD_INT 3
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: IN
39438: NOT
39439: PUSH
39440: LD_VAR 0 6
39444: PUSH
39445: LD_INT 2
39447: EQUAL
39448: AND
39449: OR
39450: IFFALSE 39460
// mode = 0 ;
39452: LD_ADDR_VAR 0 6
39456: PUSH
39457: LD_INT 0
39459: ST_TO_ADDR
// case mode of 0 :
39460: LD_VAR 0 6
39464: PUSH
39465: LD_INT 0
39467: DOUBLE
39468: EQUAL
39469: IFTRUE 39473
39471: GO 50926
39473: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39474: LD_ADDR_VAR 0 11
39478: PUSH
39479: LD_INT 0
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: LD_INT 1
39494: NEG
39495: PUSH
39496: EMPTY
39497: LIST
39498: LIST
39499: PUSH
39500: LD_INT 1
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 1
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 1
39532: NEG
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: NEG
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 2
39570: NEG
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: LD_INT 1
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 0
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: NEG
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 3
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 3
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 2
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39667: LD_ADDR_VAR 0 12
39671: PUSH
39672: LD_INT 0
39674: PUSH
39675: LD_INT 0
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 0
39684: PUSH
39685: LD_INT 1
39687: NEG
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 0
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 1
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 1
39725: NEG
39726: PUSH
39727: LD_INT 0
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: NEG
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 1
39751: NEG
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 2
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: NEG
39780: PUSH
39781: LD_INT 1
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 2
39801: NEG
39802: PUSH
39803: LD_INT 1
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 2
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 3
39824: NEG
39825: PUSH
39826: LD_INT 0
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 3
39835: NEG
39836: PUSH
39837: LD_INT 1
39839: NEG
39840: PUSH
39841: EMPTY
39842: LIST
39843: LIST
39844: PUSH
39845: EMPTY
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39863: LD_ADDR_VAR 0 13
39867: PUSH
39868: LD_INT 0
39870: PUSH
39871: LD_INT 0
39873: PUSH
39874: EMPTY
39875: LIST
39876: LIST
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: LD_INT 1
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 0
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 1
39901: PUSH
39902: LD_INT 1
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 0
39911: PUSH
39912: LD_INT 1
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 1
39921: NEG
39922: PUSH
39923: LD_INT 0
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 1
39944: NEG
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: LD_INT 1
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 2
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: PUSH
39977: LD_INT 2
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 2
39986: NEG
39987: PUSH
39988: LD_INT 1
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 2
39998: NEG
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: EMPTY
40005: LIST
40006: LIST
40007: PUSH
40008: LD_INT 2
40010: NEG
40011: PUSH
40012: LD_INT 3
40014: NEG
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 3
40022: NEG
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 3
40034: NEG
40035: PUSH
40036: LD_INT 3
40038: NEG
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40062: LD_ADDR_VAR 0 14
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PUSH
40077: LD_INT 0
40079: PUSH
40080: LD_INT 1
40082: NEG
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 1
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_INT 1
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: EMPTY
40105: LIST
40106: LIST
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PUSH
40118: LD_INT 1
40120: NEG
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 0
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: PUSH
40167: LD_INT 1
40169: NEG
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 2
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 1
40197: NEG
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: NEG
40209: PUSH
40210: LD_INT 3
40212: NEG
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 0
40220: PUSH
40221: LD_INT 3
40223: NEG
40224: PUSH
40225: EMPTY
40226: LIST
40227: LIST
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: LD_INT 2
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40258: LD_ADDR_VAR 0 15
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 1
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 0
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 2
40360: PUSH
40361: LD_INT 1
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: NEG
40382: PUSH
40383: LD_INT 0
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 2
40392: NEG
40393: PUSH
40394: LD_INT 1
40396: NEG
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: LD_INT 2
40404: PUSH
40405: LD_INT 1
40407: NEG
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 3
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 3
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
40451: LD_ADDR_VAR 0 16
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 0
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 0
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 0
40499: PUSH
40500: LD_INT 1
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: NEG
40521: PUSH
40522: LD_INT 1
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 1
40532: NEG
40533: PUSH
40534: LD_INT 2
40536: NEG
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: LD_INT 1
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 2
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: LD_INT 2
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 2
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: NEG
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 2
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 3
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 3
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: PUSH
40619: LD_INT 3
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40644: LD_ADDR_VAR 0 17
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: LD_INT 0
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 1
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 0
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 1
40682: PUSH
40683: LD_INT 1
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 0
40692: PUSH
40693: LD_INT 1
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: NEG
40703: PUSH
40704: LD_INT 0
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: LD_INT 2
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: LD_INT 2
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 1
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 2
40759: PUSH
40760: LD_INT 0
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 2
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 2
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 0
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 1
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 2
40820: NEG
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: NEG
40832: PUSH
40833: LD_INT 1
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: LD_INT 2
40847: NEG
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40874: LD_ADDR_VAR 0 18
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 0
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 1
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 1
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: LD_INT 0
40936: PUSH
40937: EMPTY
40938: LIST
40939: LIST
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 1
40955: NEG
40956: PUSH
40957: LD_INT 2
40959: NEG
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: EMPTY
40973: LIST
40974: LIST
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: LD_INT 1
40981: NEG
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 2
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 2
41009: PUSH
41010: LD_INT 2
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: PUSH
41017: LD_INT 1
41019: PUSH
41020: LD_INT 2
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: LD_INT 2
41032: PUSH
41033: EMPTY
41034: LIST
41035: LIST
41036: PUSH
41037: LD_INT 1
41039: NEG
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 2
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41104: LD_ADDR_VAR 0 19
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 0
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: PUSH
41119: LD_INT 0
41121: PUSH
41122: LD_INT 1
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 1
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: LD_INT 1
41155: PUSH
41156: EMPTY
41157: LIST
41158: LIST
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: LD_INT 1
41177: NEG
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 2
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 0
41197: PUSH
41198: LD_INT 2
41200: NEG
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 1
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 2
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 2
41229: PUSH
41230: LD_INT 1
41232: PUSH
41233: EMPTY
41234: LIST
41235: LIST
41236: PUSH
41237: LD_INT 2
41239: PUSH
41240: LD_INT 2
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 2
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 0
41259: PUSH
41260: LD_INT 2
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: LD_INT 1
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 0
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: NEG
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 2
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41334: LD_ADDR_VAR 0 20
41338: PUSH
41339: LD_INT 0
41341: PUSH
41342: LD_INT 0
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 0
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 0
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 1
41372: PUSH
41373: LD_INT 1
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 0
41382: PUSH
41383: LD_INT 1
41385: PUSH
41386: EMPTY
41387: LIST
41388: LIST
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: LD_INT 0
41396: PUSH
41397: EMPTY
41398: LIST
41399: LIST
41400: PUSH
41401: LD_INT 1
41403: NEG
41404: PUSH
41405: LD_INT 1
41407: NEG
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 0
41427: PUSH
41428: LD_INT 2
41430: NEG
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: PUSH
41439: LD_INT 1
41441: NEG
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 2
41449: PUSH
41450: LD_INT 0
41452: PUSH
41453: EMPTY
41454: LIST
41455: LIST
41456: PUSH
41457: LD_INT 2
41459: PUSH
41460: LD_INT 1
41462: PUSH
41463: EMPTY
41464: LIST
41465: LIST
41466: PUSH
41467: LD_INT 2
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: EMPTY
41474: LIST
41475: LIST
41476: PUSH
41477: LD_INT 1
41479: PUSH
41480: LD_INT 2
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 2
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: EMPTY
41505: LIST
41506: LIST
41507: PUSH
41508: LD_INT 2
41510: NEG
41511: PUSH
41512: LD_INT 0
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: LD_INT 2
41533: NEG
41534: PUSH
41535: LD_INT 2
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41564: LD_ADDR_VAR 0 21
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 0
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 0
41581: PUSH
41582: LD_INT 1
41584: NEG
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: LD_INT 0
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 1
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: LD_INT 0
41612: PUSH
41613: LD_INT 1
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 1
41622: NEG
41623: PUSH
41624: LD_INT 0
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: LD_INT 1
41637: NEG
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 1
41645: NEG
41646: PUSH
41647: LD_INT 2
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 2
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 0
41719: PUSH
41720: LD_INT 2
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 2
41751: NEG
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: NEG
41764: PUSH
41765: LD_INT 2
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41794: LD_ADDR_VAR 0 22
41798: PUSH
41799: LD_INT 0
41801: PUSH
41802: LD_INT 0
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 1
41814: NEG
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PUSH
41820: LD_INT 1
41822: PUSH
41823: LD_INT 0
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 1
41832: PUSH
41833: LD_INT 1
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 0
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: EMPTY
41847: LIST
41848: LIST
41849: PUSH
41850: LD_INT 1
41852: NEG
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: LD_INT 1
41867: NEG
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 2
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 0
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 2
41919: PUSH
41920: LD_INT 1
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 2
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 1
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 1
41959: NEG
41960: PUSH
41961: LD_INT 1
41963: PUSH
41964: EMPTY
41965: LIST
41966: LIST
41967: PUSH
41968: LD_INT 2
41970: NEG
41971: PUSH
41972: LD_INT 0
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 2
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: NEG
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 2
41997: NEG
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42024: LD_ADDR_VAR 0 23
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 0
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 0
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: PUSH
42053: LD_INT 0
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: PUSH
42060: LD_INT 1
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 1
42082: NEG
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: NEG
42094: PUSH
42095: LD_INT 1
42097: NEG
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 1
42105: NEG
42106: PUSH
42107: LD_INT 2
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 0
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 2
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: PUSH
42170: LD_INT 2
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: LD_INT 2
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: LD_INT 1
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 2
42223: NEG
42224: PUSH
42225: LD_INT 2
42227: NEG
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 3
42239: NEG
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: LD_INT 3
42251: NEG
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: PUSH
42271: LD_INT 1
42273: NEG
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: LIST
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42304: LD_ADDR_VAR 0 24
42308: PUSH
42309: LD_INT 0
42311: PUSH
42312: LD_INT 0
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 0
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: PUSH
42333: LD_INT 0
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: PUSH
42343: LD_INT 1
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 0
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 1
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: NEG
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 0
42397: PUSH
42398: LD_INT 2
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 1
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 0
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 2
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: PUSH
42450: LD_INT 2
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 2
42480: NEG
42481: PUSH
42482: LD_INT 0
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: PUSH
42489: LD_INT 2
42491: NEG
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: NEG
42504: PUSH
42505: LD_INT 2
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 1
42515: PUSH
42516: LD_INT 2
42518: NEG
42519: PUSH
42520: EMPTY
42521: LIST
42522: LIST
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: LD_INT 1
42529: NEG
42530: PUSH
42531: EMPTY
42532: LIST
42533: LIST
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: LD_INT 1
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: LD_INT 2
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
42580: LD_ADDR_VAR 0 25
42584: PUSH
42585: LD_INT 0
42587: PUSH
42588: LD_INT 0
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: PUSH
42606: LD_INT 1
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 1
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: LD_INT 0
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: LD_INT 1
42653: NEG
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 1
42661: NEG
42662: PUSH
42663: LD_INT 2
42665: NEG
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: PUSH
42696: LD_INT 0
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 2
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 2
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 0
42735: PUSH
42736: LD_INT 2
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: LD_INT 1
42745: NEG
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: EMPTY
42751: LIST
42752: LIST
42753: PUSH
42754: LD_INT 2
42756: NEG
42757: PUSH
42758: LD_INT 0
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: LD_INT 1
42771: NEG
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: NEG
42780: PUSH
42781: LD_INT 2
42783: NEG
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 1
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 3
42801: PUSH
42802: LD_INT 2
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 2
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 1
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42854: LD_ADDR_VAR 0 26
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 0
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 1
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 1
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 1
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 1
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: NEG
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: LD_INT 1
42935: NEG
42936: PUSH
42937: LD_INT 2
42939: NEG
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 0
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: PUSH
42977: LD_INT 2
42979: PUSH
42980: LD_INT 1
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 2
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 2
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 0
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: LD_INT 0
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: PUSH
43039: LD_INT 2
43041: NEG
43042: PUSH
43043: LD_INT 1
43045: NEG
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: LD_INT 2
43057: NEG
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 2
43065: PUSH
43066: LD_INT 3
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 3
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: NEG
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43130: LD_ADDR_VAR 0 27
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 0
43147: PUSH
43148: LD_INT 1
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 1
43158: PUSH
43159: LD_INT 0
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PUSH
43166: LD_INT 1
43168: PUSH
43169: LD_INT 1
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 0
43178: PUSH
43179: LD_INT 1
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 1
43188: NEG
43189: PUSH
43190: LD_INT 0
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 1
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 2
43215: NEG
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 0
43223: PUSH
43224: LD_INT 2
43226: NEG
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 2
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 2
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: PUSH
43276: LD_INT 2
43278: PUSH
43279: EMPTY
43280: LIST
43281: LIST
43282: PUSH
43283: LD_INT 0
43285: PUSH
43286: LD_INT 2
43288: PUSH
43289: EMPTY
43290: LIST
43291: LIST
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: LD_INT 0
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: LD_INT 2
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 2
43352: NEG
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 3
43363: NEG
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 3
43375: NEG
43376: PUSH
43377: LD_INT 2
43379: NEG
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43410: LD_ADDR_VAR 0 28
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 0
43427: PUSH
43428: LD_INT 1
43430: NEG
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: LD_INT 1
43438: PUSH
43439: LD_INT 0
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: PUSH
43446: LD_INT 1
43448: PUSH
43449: LD_INT 1
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 0
43458: PUSH
43459: LD_INT 1
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 1
43468: NEG
43469: PUSH
43470: LD_INT 0
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: PUSH
43526: LD_INT 0
43528: PUSH
43529: EMPTY
43530: LIST
43531: LIST
43532: PUSH
43533: LD_INT 2
43535: PUSH
43536: LD_INT 1
43538: PUSH
43539: EMPTY
43540: LIST
43541: LIST
43542: PUSH
43543: LD_INT 2
43545: PUSH
43546: LD_INT 2
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: LD_INT 2
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 0
43565: PUSH
43566: LD_INT 2
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 1
43575: NEG
43576: PUSH
43577: LD_INT 1
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 2
43586: NEG
43587: PUSH
43588: LD_INT 0
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 1
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 2
43609: NEG
43610: PUSH
43611: LD_INT 2
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: NEG
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: EMPTY
43628: LIST
43629: LIST
43630: PUSH
43631: LD_INT 1
43633: NEG
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: LD_INT 3
43645: NEG
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 3
43657: NEG
43658: PUSH
43659: LD_INT 2
43661: NEG
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43692: LD_ADDR_VAR 0 29
43696: PUSH
43697: LD_INT 0
43699: PUSH
43700: LD_INT 0
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 1
43712: NEG
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 1
43720: PUSH
43721: LD_INT 0
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 1
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 0
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 0
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 1
43761: NEG
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 2
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 1
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 2
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 0
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 1
43847: NEG
43848: PUSH
43849: LD_INT 1
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 2
43870: NEG
43871: PUSH
43872: LD_INT 2
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 2
43882: NEG
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: PUSH
43895: LD_INT 1
43897: NEG
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 3
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: LD_INT 2
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 3
43936: NEG
43937: PUSH
43938: LD_INT 2
43940: NEG
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: LIST
43969: LIST
43970: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43971: LD_ADDR_VAR 0 30
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: EMPTY
44004: LIST
44005: LIST
44006: PUSH
44007: LD_INT 1
44009: PUSH
44010: LD_INT 1
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 0
44019: PUSH
44020: LD_INT 1
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: NEG
44053: PUSH
44054: LD_INT 2
44056: NEG
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 0
44064: PUSH
44065: LD_INT 2
44067: NEG
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: PUSH
44073: LD_INT 1
44075: PUSH
44076: LD_INT 1
44078: NEG
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: LD_INT 1
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 1
44116: PUSH
44117: LD_INT 2
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 3
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 1
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 3
44183: PUSH
44184: LD_INT 2
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 3
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 3
44214: NEG
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44249: LD_ADDR_VAR 0 31
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 0
44266: PUSH
44267: LD_INT 1
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: PUSH
44278: LD_INT 0
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: PUSH
44285: LD_INT 1
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 0
44297: PUSH
44298: LD_INT 1
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: LD_INT 1
44322: NEG
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: PUSH
44328: LD_INT 1
44330: NEG
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 0
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: PUSH
44384: LD_INT 2
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: LD_INT 2
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: LD_INT 1
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 2
44414: NEG
44415: PUSH
44416: LD_INT 1
44418: NEG
44419: PUSH
44420: EMPTY
44421: LIST
44422: LIST
44423: PUSH
44424: LD_INT 2
44426: NEG
44427: PUSH
44428: LD_INT 2
44430: NEG
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 2
44438: NEG
44439: PUSH
44440: LD_INT 3
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 1
44453: NEG
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 3
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 3
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 3
44492: NEG
44493: PUSH
44494: LD_INT 2
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: LIST
44521: LIST
44522: LIST
44523: LIST
44524: LIST
44525: LIST
44526: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44527: LD_ADDR_VAR 0 32
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: LD_INT 0
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: LD_INT 1
44547: NEG
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: LD_INT 0
44558: PUSH
44559: EMPTY
44560: LIST
44561: LIST
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: LD_INT 1
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 0
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 0
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 1
44596: NEG
44597: PUSH
44598: LD_INT 1
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 2
44612: NEG
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 2
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 1
44634: NEG
44635: PUSH
44636: EMPTY
44637: LIST
44638: LIST
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: LD_INT 2
44655: PUSH
44656: EMPTY
44657: LIST
44658: LIST
44659: PUSH
44660: LD_INT 1
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: EMPTY
44677: LIST
44678: LIST
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 2
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 3
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 1
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: PUSH
44750: LD_INT 3
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 2
44759: NEG
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 3
44770: NEG
44771: PUSH
44772: LD_INT 1
44774: NEG
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44805: LD_ADDR_VAR 0 33
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 1
44833: PUSH
44834: LD_INT 0
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: LD_INT 1
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 0
44853: PUSH
44854: LD_INT 1
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: NEG
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 1
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 1
44886: NEG
44887: PUSH
44888: LD_INT 2
44890: NEG
44891: PUSH
44892: EMPTY
44893: LIST
44894: LIST
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: LD_INT 1
44901: NEG
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: PUSH
44907: LD_INT 2
44909: PUSH
44910: LD_INT 0
44912: PUSH
44913: EMPTY
44914: LIST
44915: LIST
44916: PUSH
44917: LD_INT 2
44919: PUSH
44920: LD_INT 1
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: LD_INT 2
44932: PUSH
44933: EMPTY
44934: LIST
44935: LIST
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: LD_INT 2
44942: PUSH
44943: EMPTY
44944: LIST
44945: LIST
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: LD_INT 1
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 2
44960: NEG
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 2
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 3
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 2
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 3
45018: PUSH
45019: LD_INT 1
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 3
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: NEG
45039: PUSH
45040: LD_INT 2
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 3
45049: NEG
45050: PUSH
45051: LD_INT 2
45053: NEG
45054: PUSH
45055: EMPTY
45056: LIST
45057: LIST
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45084: LD_ADDR_VAR 0 34
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 0
45101: PUSH
45102: LD_INT 1
45104: NEG
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: PUSH
45110: LD_INT 1
45112: PUSH
45113: LD_INT 0
45115: PUSH
45116: EMPTY
45117: LIST
45118: LIST
45119: PUSH
45120: LD_INT 1
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: LD_INT 1
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: LD_INT 1
45142: NEG
45143: PUSH
45144: LD_INT 0
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: NEG
45166: PUSH
45167: LD_INT 2
45169: NEG
45170: PUSH
45171: EMPTY
45172: LIST
45173: LIST
45174: PUSH
45175: LD_INT 0
45177: PUSH
45178: LD_INT 2
45180: NEG
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 2
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: PUSH
45210: LD_INT 2
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 2
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 1
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 2
45240: NEG
45241: PUSH
45242: LD_INT 0
45244: PUSH
45245: EMPTY
45246: LIST
45247: LIST
45248: PUSH
45249: LD_INT 2
45251: NEG
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: NEG
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 3
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 3
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 2
45308: PUSH
45309: LD_INT 3
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 2
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 3
45329: NEG
45330: PUSH
45331: LD_INT 1
45333: NEG
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: LIST
45353: LIST
45354: LIST
45355: LIST
45356: LIST
45357: LIST
45358: LIST
45359: LIST
45360: LIST
45361: LIST
45362: LIST
45363: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45364: LD_ADDR_VAR 0 35
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 0
45381: PUSH
45382: LD_INT 1
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 1
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 0
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: NEG
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 2
45445: PUSH
45446: LD_INT 1
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45476: LD_ADDR_VAR 0 36
45480: PUSH
45481: LD_INT 0
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 1
45496: NEG
45497: PUSH
45498: EMPTY
45499: LIST
45500: LIST
45501: PUSH
45502: LD_INT 1
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 1
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 1
45545: NEG
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 1
45557: NEG
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 2
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: LIST
45586: LIST
45587: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45588: LD_ADDR_VAR 0 37
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: LD_INT 1
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: LD_INT 0
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 1
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: EMPTY
45631: LIST
45632: LIST
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 1
45646: NEG
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 1
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
45700: LD_ADDR_VAR 0 38
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: NEG
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
45812: LD_ADDR_VAR 0 39
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45924: LD_ADDR_VAR 0 40
45928: PUSH
45929: LD_INT 0
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 0
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 1
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 1
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: LD_INT 1
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46036: LD_ADDR_VAR 0 41
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 0
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 0
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PUSH
46103: LD_INT 1
46105: NEG
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: NEG
46118: PUSH
46119: LD_INT 2
46121: NEG
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: EMPTY
46135: LIST
46136: LIST
46137: PUSH
46138: LD_INT 2
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 2
46150: PUSH
46151: LD_INT 1
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 2
46160: PUSH
46161: LD_INT 2
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: LD_INT 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: LD_INT 1
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: EMPTY
46197: LIST
46198: LIST
46199: PUSH
46200: LD_INT 2
46202: NEG
46203: PUSH
46204: LD_INT 1
46206: NEG
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 2
46218: NEG
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 2
46226: NEG
46227: PUSH
46228: LD_INT 3
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 3
46249: PUSH
46250: LD_INT 0
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 3
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 3
46269: PUSH
46270: LD_INT 2
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 3
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 2
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 1
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 3
46310: NEG
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 3
46321: NEG
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 3
46333: NEG
46334: PUSH
46335: LD_INT 2
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 3
46345: NEG
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46386: LD_ADDR_VAR 0 42
46390: PUSH
46391: LD_INT 0
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 0
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: PUSH
46415: LD_INT 0
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 1
46444: NEG
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: NEG
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: LD_INT 2
46471: NEG
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: PUSH
46491: LD_INT 1
46493: NEG
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: EMPTY
46506: LIST
46507: LIST
46508: PUSH
46509: LD_INT 2
46511: PUSH
46512: LD_INT 2
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 1
46521: PUSH
46522: LD_INT 2
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 0
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: NEG
46542: PUSH
46543: LD_INT 1
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 2
46564: NEG
46565: PUSH
46566: LD_INT 2
46568: NEG
46569: PUSH
46570: EMPTY
46571: LIST
46572: LIST
46573: PUSH
46574: LD_INT 2
46576: NEG
46577: PUSH
46578: LD_INT 3
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: NEG
46589: PUSH
46590: LD_INT 3
46592: NEG
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 3
46603: NEG
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: LD_INT 2
46614: NEG
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 3
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: LD_INT 3
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 2
46642: PUSH
46643: LD_INT 3
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 3
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 2
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: LD_INT 3
46683: NEG
46684: PUSH
46685: LD_INT 2
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 3
46695: NEG
46696: PUSH
46697: LD_INT 3
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: LIST
46712: LIST
46713: LIST
46714: LIST
46715: LIST
46716: LIST
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: LIST
46731: LIST
46732: LIST
46733: LIST
46734: LIST
46735: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46736: LD_ADDR_VAR 0 43
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 0
46753: PUSH
46754: LD_INT 1
46756: NEG
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: PUSH
46765: LD_INT 0
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: PUSH
46775: LD_INT 1
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 0
46784: PUSH
46785: LD_INT 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: NEG
46795: PUSH
46796: LD_INT 0
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 1
46805: NEG
46806: PUSH
46807: LD_INT 1
46809: NEG
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: NEG
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: LD_INT 2
46832: NEG
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 1
46840: PUSH
46841: LD_INT 1
46843: NEG
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 2
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: LD_INT 2
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: NEG
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: LD_INT 3
46940: NEG
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 2
46959: PUSH
46960: LD_INT 1
46962: NEG
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 3
46980: PUSH
46981: LD_INT 1
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 1
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: LD_INT 3
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: LD_INT 2
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 2
47021: NEG
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: PUSH
47030: LD_INT 3
47032: NEG
47033: PUSH
47034: LD_INT 0
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 3
47043: NEG
47044: PUSH
47045: LD_INT 1
47047: NEG
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47084: LD_ADDR_VAR 0 44
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: EMPTY
47107: LIST
47108: LIST
47109: PUSH
47110: LD_INT 1
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 1
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 1
47142: NEG
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: NEG
47154: PUSH
47155: LD_INT 1
47157: NEG
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: NEG
47166: PUSH
47167: LD_INT 2
47169: NEG
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 2
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: LD_INT 2
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: LD_INT 2
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 2
47239: NEG
47240: PUSH
47241: LD_INT 0
47243: PUSH
47244: EMPTY
47245: LIST
47246: LIST
47247: PUSH
47248: LD_INT 2
47250: NEG
47251: PUSH
47252: LD_INT 1
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 2
47262: NEG
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 2
47274: NEG
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PUSH
47284: LD_INT 2
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: LD_INT 3
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: EMPTY
47302: LIST
47303: LIST
47304: PUSH
47305: LD_INT 3
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 3
47317: PUSH
47318: LD_INT 2
47320: PUSH
47321: EMPTY
47322: LIST
47323: LIST
47324: PUSH
47325: LD_INT 3
47327: PUSH
47328: LD_INT 3
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 2
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 2
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 3
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 3
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 3
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 3
47393: NEG
47394: PUSH
47395: LD_INT 3
47397: NEG
47398: PUSH
47399: EMPTY
47400: LIST
47401: LIST
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47434: LD_ADDR_VAR 0 45
47438: PUSH
47439: LD_INT 0
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 0
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 1
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 1
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 0
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: LD_INT 1
47507: NEG
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 1
47515: NEG
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 0
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 2
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 2
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 2
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 1
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 2
47612: NEG
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 2
47624: NEG
47625: PUSH
47626: LD_INT 3
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: LD_INT 3
47640: NEG
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 3
47651: NEG
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 3
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: LD_INT 3
47683: PUSH
47684: EMPTY
47685: LIST
47686: LIST
47687: PUSH
47688: LD_INT 2
47690: PUSH
47691: LD_INT 3
47693: PUSH
47694: EMPTY
47695: LIST
47696: LIST
47697: PUSH
47698: LD_INT 1
47700: PUSH
47701: LD_INT 3
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: LD_INT 3
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 1
47720: NEG
47721: PUSH
47722: LD_INT 2
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 3
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 3
47743: NEG
47744: PUSH
47745: LD_INT 3
47747: NEG
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47784: LD_ADDR_VAR 0 46
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: LD_INT 0
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 0
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: NEG
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: EMPTY
47860: LIST
47861: LIST
47862: PUSH
47863: LD_INT 1
47865: NEG
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 2
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: LD_INT 1
47891: NEG
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 0
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 2
47909: PUSH
47910: LD_INT 1
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 2
47950: NEG
47951: PUSH
47952: LD_INT 0
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: NEG
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 3
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 3
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: LD_INT 3
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: LD_INT 3
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 3
48080: NEG
48081: PUSH
48082: LD_INT 0
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: LD_INT 3
48091: NEG
48092: PUSH
48093: LD_INT 1
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48132: LD_ADDR_VAR 0 47
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: LD_INT 1
48152: NEG
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: PUSH
48161: LD_INT 0
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 1
48170: PUSH
48171: LD_INT 1
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 1
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 1
48201: NEG
48202: PUSH
48203: LD_INT 1
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 2
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 0
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 2
48259: NEG
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48283: LD_ADDR_VAR 0 48
48287: PUSH
48288: LD_INT 0
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: LD_INT 1
48303: NEG
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: LD_INT 0
48314: PUSH
48315: EMPTY
48316: LIST
48317: LIST
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: LD_INT 1
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: LD_INT 1
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 1
48364: NEG
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: LD_INT 2
48379: NEG
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 1
48390: NEG
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 2
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: LD_INT 1
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48430: LD_ADDR_VAR 0 49
48434: PUSH
48435: LD_INT 0
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: PUSH
48553: LD_INT 2
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48574: LD_ADDR_VAR 0 50
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: LD_INT 0
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 0
48591: PUSH
48592: LD_INT 1
48594: NEG
48595: PUSH
48596: EMPTY
48597: LIST
48598: LIST
48599: PUSH
48600: LD_INT 1
48602: PUSH
48603: LD_INT 0
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 1
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 0
48622: PUSH
48623: LD_INT 1
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 2
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: PUSH
48666: LD_INT 2
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 2
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: LIST
48713: LIST
48714: LIST
48715: LIST
48716: LIST
48717: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48718: LD_ADDR_VAR 0 51
48722: PUSH
48723: LD_INT 0
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 1
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 0
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 0
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 2
48830: NEG
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: NEG
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48865: LD_ADDR_VAR 0 52
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 1
48885: NEG
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PUSH
48891: LD_INT 1
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 1
48923: NEG
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 2
48980: NEG
48981: PUSH
48982: LD_INT 1
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 2
48992: NEG
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49016: LD_ADDR_VAR 0 53
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 0
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 0
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 0
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 1
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 0
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 1
49074: NEG
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: LD_INT 1
49089: NEG
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: LD_INT 2
49101: NEG
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: LD_INT 0
49109: PUSH
49110: LD_INT 2
49112: NEG
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 1
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 2
49141: PUSH
49142: LD_INT 1
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 2
49151: PUSH
49152: LD_INT 2
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: LD_INT 0
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 2
49203: NEG
49204: PUSH
49205: LD_INT 1
49207: NEG
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: LD_INT 2
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49246: LD_ADDR_VAR 0 54
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: LD_INT 0
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 0
49263: PUSH
49264: LD_INT 1
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 1
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 0
49294: PUSH
49295: LD_INT 1
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 1
49304: NEG
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: LD_INT 1
49319: NEG
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: LD_INT 2
49331: NEG
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 2
49342: NEG
49343: PUSH
49344: EMPTY
49345: LIST
49346: LIST
49347: PUSH
49348: LD_INT 1
49350: PUSH
49351: LD_INT 1
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 2
49361: PUSH
49362: LD_INT 0
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: LD_INT 2
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 2
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 2
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 2
49422: NEG
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 1
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49476: LD_ADDR_VAR 0 55
49480: PUSH
49481: LD_INT 0
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 1
49496: NEG
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: LD_INT 0
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: EMPTY
49519: LIST
49520: LIST
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 0
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: NEG
49558: PUSH
49559: LD_INT 2
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 0
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 1
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: LD_INT 1
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: LD_INT 2
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 0
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: LD_INT 1
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 0
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 2
49663: NEG
49664: PUSH
49665: LD_INT 1
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49706: LD_ADDR_VAR 0 56
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: LD_INT 0
49799: PUSH
49800: LD_INT 2
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 2
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 2
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 1
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 2
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 2
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49936: LD_ADDR_VAR 0 57
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: LD_INT 0
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 1
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 0
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 1
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 0
50029: PUSH
50030: LD_INT 2
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 2
50051: PUSH
50052: LD_INT 0
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 2
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: PUSH
50072: LD_INT 2
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 0
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: NEG
50113: PUSH
50114: LD_INT 0
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: NEG
50124: PUSH
50125: LD_INT 1
50127: NEG
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: LD_INT 2
50139: NEG
50140: PUSH
50141: EMPTY
50142: LIST
50143: LIST
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50166: LD_ADDR_VAR 0 58
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: LD_INT 0
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 1
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 2
50281: PUSH
50282: LD_INT 0
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 2
50291: PUSH
50292: LD_INT 1
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 2
50301: PUSH
50302: LD_INT 2
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: LD_INT 2
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: EMPTY
50326: LIST
50327: LIST
50328: PUSH
50329: LD_INT 1
50331: NEG
50332: PUSH
50333: LD_INT 1
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: LD_INT 2
50342: NEG
50343: PUSH
50344: LD_INT 0
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 2
50353: NEG
50354: PUSH
50355: LD_INT 1
50357: NEG
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 2
50365: NEG
50366: PUSH
50367: LD_INT 2
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50396: LD_ADDR_VAR 0 59
50400: PUSH
50401: LD_INT 0
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 0
50413: PUSH
50414: LD_INT 1
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 0
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 1
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 1
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50484: LD_ADDR_VAR 0 60
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: LD_INT 1
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50572: LD_ADDR_VAR 0 61
50576: PUSH
50577: LD_INT 0
50579: PUSH
50580: LD_INT 0
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 1
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 0
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: LD_INT 1
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 1
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 1
50645: NEG
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50660: LD_ADDR_VAR 0 62
50664: PUSH
50665: LD_INT 0
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: LD_INT 1
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 0
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: EMPTY
50724: LIST
50725: LIST
50726: PUSH
50727: LD_INT 1
50729: NEG
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50748: LD_ADDR_VAR 0 63
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 0
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 0
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: LD_INT 1
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
50836: LD_ADDR_VAR 0 64
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: LD_INT 0
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 0
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 1
50905: NEG
50906: PUSH
50907: LD_INT 1
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: ST_TO_ADDR
// end ; 1 :
50924: GO 56821
50926: LD_INT 1
50928: DOUBLE
50929: EQUAL
50930: IFTRUE 50934
50932: GO 53557
50934: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50935: LD_ADDR_VAR 0 11
50939: PUSH
50940: LD_INT 1
50942: NEG
50943: PUSH
50944: LD_INT 3
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 0
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: LD_INT 2
50968: NEG
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: LIST
50978: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50979: LD_ADDR_VAR 0 12
50983: PUSH
50984: LD_INT 2
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: LD_INT 0
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51020: LD_ADDR_VAR 0 13
51024: PUSH
51025: LD_INT 3
51027: PUSH
51028: LD_INT 2
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 3
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: LIST
51059: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51060: LD_ADDR_VAR 0 14
51064: PUSH
51065: LD_INT 1
51067: PUSH
51068: LD_INT 3
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 1
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51101: LD_ADDR_VAR 0 15
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 3
51119: NEG
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: LIST
51144: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51145: LD_ADDR_VAR 0 16
51149: PUSH
51150: LD_INT 2
51152: NEG
51153: PUSH
51154: LD_INT 3
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 3
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 3
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: LIST
51190: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51191: LD_ADDR_VAR 0 17
51195: PUSH
51196: LD_INT 1
51198: NEG
51199: PUSH
51200: LD_INT 3
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: LD_INT 3
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: LD_INT 2
51224: NEG
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: LIST
51234: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51235: LD_ADDR_VAR 0 18
51239: PUSH
51240: LD_INT 2
51242: PUSH
51243: LD_INT 1
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 3
51253: PUSH
51254: LD_INT 0
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 3
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: LIST
51275: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51276: LD_ADDR_VAR 0 19
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: LD_INT 3
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51316: LD_ADDR_VAR 0 20
51320: PUSH
51321: LD_INT 1
51323: PUSH
51324: LD_INT 3
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 3
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 1
51343: NEG
51344: PUSH
51345: LD_INT 2
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51357: LD_ADDR_VAR 0 21
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 3
51375: NEG
51376: PUSH
51377: LD_INT 0
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: LIST
51400: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51401: LD_ADDR_VAR 0 22
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 3
51420: NEG
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
51447: LD_ADDR_VAR 0 23
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 3
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 1
51465: NEG
51466: PUSH
51467: LD_INT 4
51469: NEG
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 3
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: LIST
51490: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
51491: LD_ADDR_VAR 0 24
51495: PUSH
51496: LD_INT 3
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 3
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 4
51519: PUSH
51520: LD_INT 1
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: LIST
51531: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
51532: LD_ADDR_VAR 0 25
51536: PUSH
51537: LD_INT 3
51539: PUSH
51540: LD_INT 3
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 4
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 3
51559: PUSH
51560: LD_INT 4
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: LIST
51571: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
51572: LD_ADDR_VAR 0 26
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: PUSH
51590: LD_INT 4
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
51613: LD_ADDR_VAR 0 27
51617: PUSH
51618: LD_INT 3
51620: NEG
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 3
51631: NEG
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 4
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: LIST
51656: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
51657: LD_ADDR_VAR 0 28
51661: PUSH
51662: LD_INT 3
51664: NEG
51665: PUSH
51666: LD_INT 3
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: LD_INT 4
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 4
51688: NEG
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: LIST
51702: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
51703: LD_ADDR_VAR 0 29
51707: PUSH
51708: LD_INT 1
51710: NEG
51711: PUSH
51712: LD_INT 3
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 3
51725: NEG
51726: PUSH
51727: EMPTY
51728: LIST
51729: LIST
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: LD_INT 4
51748: NEG
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: LD_INT 4
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 3
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 5
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 5
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 4
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 6
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 6
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 5
51838: NEG
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51858: LD_ADDR_VAR 0 30
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 3
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 4
51907: PUSH
51908: LD_INT 0
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 4
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 5
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 5
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 5
51958: PUSH
51959: LD_INT 1
51961: NEG
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PUSH
51967: LD_INT 6
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 6
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52001: LD_ADDR_VAR 0 31
52005: PUSH
52006: LD_INT 3
52008: PUSH
52009: LD_INT 2
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 3
52018: PUSH
52019: LD_INT 3
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 2
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 4
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 4
52048: PUSH
52049: LD_INT 4
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 3
52058: PUSH
52059: LD_INT 4
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: LD_INT 4
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 5
52078: PUSH
52079: LD_INT 5
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 4
52088: PUSH
52089: LD_INT 5
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 6
52098: PUSH
52099: LD_INT 5
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 6
52108: PUSH
52109: LD_INT 6
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 5
52118: PUSH
52119: LD_INT 6
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: LIST
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52140: LD_ADDR_VAR 0 32
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 0
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 4
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: NEG
52199: PUSH
52200: LD_INT 3
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 5
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 5
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 4
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 1
52240: PUSH
52241: LD_INT 6
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 6
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 1
52260: NEG
52261: PUSH
52262: LD_INT 5
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52283: LD_ADDR_VAR 0 33
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 0
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: NEG
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PUSH
52322: LD_INT 3
52324: NEG
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: NEG
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 4
52346: NEG
52347: PUSH
52348: LD_INT 1
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 4
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 5
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 5
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 5
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 6
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 6
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
52438: LD_ADDR_VAR 0 34
52442: PUSH
52443: LD_INT 2
52445: NEG
52446: PUSH
52447: LD_INT 3
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: NEG
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 3
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 3
52481: NEG
52482: PUSH
52483: LD_INT 4
52485: NEG
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 4
52493: NEG
52494: PUSH
52495: LD_INT 3
52497: NEG
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 4
52505: NEG
52506: PUSH
52507: LD_INT 4
52509: NEG
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 4
52517: NEG
52518: PUSH
52519: LD_INT 5
52521: NEG
52522: PUSH
52523: EMPTY
52524: LIST
52525: LIST
52526: PUSH
52527: LD_INT 5
52529: NEG
52530: PUSH
52531: LD_INT 4
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 5
52541: NEG
52542: PUSH
52543: LD_INT 5
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 5
52553: NEG
52554: PUSH
52555: LD_INT 6
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 6
52565: NEG
52566: PUSH
52567: LD_INT 5
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 6
52577: NEG
52578: PUSH
52579: LD_INT 6
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
52601: LD_ADDR_VAR 0 41
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 2
52611: NEG
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 1
52619: NEG
52620: PUSH
52621: LD_INT 3
52623: NEG
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: LD_INT 2
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
52645: LD_ADDR_VAR 0 42
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 0
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: LIST
52685: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
52686: LD_ADDR_VAR 0 43
52690: PUSH
52691: LD_INT 2
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 3
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 2
52713: PUSH
52714: LD_INT 3
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: LIST
52725: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
52726: LD_ADDR_VAR 0 44
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: LD_INT 2
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 3
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: NEG
52754: PUSH
52755: LD_INT 2
52757: PUSH
52758: EMPTY
52759: LIST
52760: LIST
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: LIST
52766: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52767: LD_ADDR_VAR 0 45
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 2
52785: NEG
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 3
52796: NEG
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: LIST
52810: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
52811: LD_ADDR_VAR 0 46
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: LD_INT 2
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 3
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: LIST
52856: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52857: LD_ADDR_VAR 0 47
52861: PUSH
52862: LD_INT 2
52864: NEG
52865: PUSH
52866: LD_INT 3
52868: NEG
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52890: LD_ADDR_VAR 0 48
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: LD_INT 2
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52921: LD_ADDR_VAR 0 49
52925: PUSH
52926: LD_INT 3
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: LD_INT 2
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52950: LD_ADDR_VAR 0 50
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 3
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 1
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52979: LD_ADDR_VAR 0 51
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 2
52997: NEG
52998: PUSH
52999: LD_INT 1
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53010: LD_ADDR_VAR 0 52
53014: PUSH
53015: LD_INT 3
53017: NEG
53018: PUSH
53019: LD_INT 1
53021: NEG
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 3
53029: NEG
53030: PUSH
53031: LD_INT 2
53033: NEG
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: EMPTY
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53043: LD_ADDR_VAR 0 53
53047: PUSH
53048: LD_INT 1
53050: NEG
53051: PUSH
53052: LD_INT 3
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 0
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: LIST
53086: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53087: LD_ADDR_VAR 0 54
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: LD_INT 0
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: LD_INT 1
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: LIST
53127: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53128: LD_ADDR_VAR 0 55
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 3
53145: PUSH
53146: LD_INT 3
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 3
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: LIST
53167: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53168: LD_ADDR_VAR 0 56
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 3
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: LD_INT 3
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: LD_INT 1
53195: NEG
53196: PUSH
53197: LD_INT 2
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53209: LD_ADDR_VAR 0 57
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 3
53227: NEG
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: LD_INT 1
53242: NEG
53243: PUSH
53244: EMPTY
53245: LIST
53246: LIST
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: LIST
53252: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53253: LD_ADDR_VAR 0 58
53257: PUSH
53258: LD_INT 2
53260: NEG
53261: PUSH
53262: LD_INT 3
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 3
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: LIST
53298: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53299: LD_ADDR_VAR 0 59
53303: PUSH
53304: LD_INT 1
53306: NEG
53307: PUSH
53308: LD_INT 2
53310: NEG
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 2
53321: NEG
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: LIST
53342: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53343: LD_ADDR_VAR 0 60
53347: PUSH
53348: LD_INT 1
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 2
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 2
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: LIST
53383: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53384: LD_ADDR_VAR 0 61
53388: PUSH
53389: LD_INT 2
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: LD_INT 2
53414: PUSH
53415: EMPTY
53416: LIST
53417: LIST
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: LIST
53423: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53424: LD_ADDR_VAR 0 62
53428: PUSH
53429: LD_INT 1
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 0
53441: PUSH
53442: LD_INT 2
53444: PUSH
53445: EMPTY
53446: LIST
53447: LIST
53448: PUSH
53449: LD_INT 1
53451: NEG
53452: PUSH
53453: LD_INT 1
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: EMPTY
53461: LIST
53462: LIST
53463: LIST
53464: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53465: LD_ADDR_VAR 0 63
53469: PUSH
53470: LD_INT 1
53472: NEG
53473: PUSH
53474: LD_INT 1
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 2
53483: NEG
53484: PUSH
53485: LD_INT 0
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53509: LD_ADDR_VAR 0 64
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 2
53528: NEG
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 2
53540: NEG
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: LIST
53554: ST_TO_ADDR
// end ; 2 :
53555: GO 56821
53557: LD_INT 2
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53565
53563: GO 56820
53565: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
53566: LD_ADDR_VAR 0 29
53570: PUSH
53571: LD_INT 4
53573: PUSH
53574: LD_INT 0
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 4
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 5
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 5
53604: PUSH
53605: LD_INT 1
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 4
53614: PUSH
53615: LD_INT 1
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 3
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 5
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 3
53676: PUSH
53677: LD_INT 2
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 4
53686: PUSH
53687: LD_INT 3
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 4
53696: PUSH
53697: LD_INT 4
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 4
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: PUSH
53714: LD_INT 2
53716: PUSH
53717: LD_INT 3
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 2
53726: PUSH
53727: LD_INT 2
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: LD_INT 4
53736: PUSH
53737: LD_INT 2
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 4
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 4
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 3
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: LD_INT 4
53779: PUSH
53780: EMPTY
53781: LIST
53782: LIST
53783: PUSH
53784: LD_INT 1
53786: PUSH
53787: LD_INT 5
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 5
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: LD_INT 5
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 3
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 3
53849: NEG
53850: PUSH
53851: LD_INT 0
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 2
53872: NEG
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 2
53883: NEG
53884: PUSH
53885: LD_INT 1
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 3
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 4
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 4
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 4
53928: NEG
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: LD_INT 2
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 4
53951: NEG
53952: PUSH
53953: LD_INT 4
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 4
53963: NEG
53964: PUSH
53965: LD_INT 5
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: LD_INT 4
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 3
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 4
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 5
54011: NEG
54012: PUSH
54013: LD_INT 4
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 5
54023: NEG
54024: PUSH
54025: LD_INT 5
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 3
54035: NEG
54036: PUSH
54037: LD_INT 5
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 5
54047: NEG
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54104: LD_ADDR_VAR 0 30
54108: PUSH
54109: LD_INT 4
54111: PUSH
54112: LD_INT 4
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 4
54121: PUSH
54122: LD_INT 3
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 5
54131: PUSH
54132: LD_INT 4
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 5
54141: PUSH
54142: LD_INT 5
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 4
54151: PUSH
54152: LD_INT 5
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: PUSH
54162: LD_INT 4
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 3
54171: PUSH
54172: LD_INT 3
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 5
54181: PUSH
54182: LD_INT 3
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: LD_INT 5
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: LD_INT 3
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 0
54211: PUSH
54212: LD_INT 2
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: PUSH
54222: LD_INT 3
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 4
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: NEG
54252: PUSH
54253: LD_INT 3
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: LD_INT 2
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 2
54273: PUSH
54274: LD_INT 4
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 4
54294: NEG
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: NEG
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 3
54317: NEG
54318: PUSH
54319: LD_INT 0
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 3
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 4
54339: NEG
54340: PUSH
54341: LD_INT 1
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 5
54350: NEG
54351: PUSH
54352: LD_INT 0
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 5
54361: NEG
54362: PUSH
54363: LD_INT 1
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 5
54373: NEG
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: LD_INT 3
54400: NEG
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 3
54408: NEG
54409: PUSH
54410: LD_INT 4
54412: NEG
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 2
54420: NEG
54421: PUSH
54422: LD_INT 3
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: NEG
54445: PUSH
54446: LD_INT 2
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 4
54456: NEG
54457: PUSH
54458: LD_INT 3
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 4
54468: NEG
54469: PUSH
54470: LD_INT 4
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 4
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 4
54492: NEG
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 4
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 0
54515: PUSH
54516: LD_INT 5
54518: NEG
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 4
54529: NEG
54530: PUSH
54531: EMPTY
54532: LIST
54533: LIST
54534: PUSH
54535: LD_INT 1
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 0
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 4
54563: NEG
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: LD_INT 5
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 2
54583: PUSH
54584: LD_INT 3
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 2
54594: NEG
54595: PUSH
54596: LD_INT 5
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: LIST
54609: LIST
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: LIST
54615: LIST
54616: LIST
54617: LIST
54618: LIST
54619: LIST
54620: LIST
54621: LIST
54622: LIST
54623: LIST
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
54651: LD_ADDR_VAR 0 31
54655: PUSH
54656: LD_INT 0
54658: PUSH
54659: LD_INT 4
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 3
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: LD_INT 4
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: LD_INT 5
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 5
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 1
54708: NEG
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: LD_INT 3
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: LD_INT 5
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 2
54740: NEG
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: PUSH
54749: LD_INT 3
54751: NEG
54752: PUSH
54753: LD_INT 0
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: NEG
54763: PUSH
54764: LD_INT 1
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: LD_INT 0
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 3
54796: NEG
54797: PUSH
54798: LD_INT 1
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: NEG
54808: PUSH
54809: LD_INT 0
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 4
54818: NEG
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: NEG
54831: PUSH
54832: LD_INT 2
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: NEG
54843: PUSH
54844: LD_INT 2
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 4
54853: NEG
54854: PUSH
54855: LD_INT 4
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 4
54865: NEG
54866: PUSH
54867: LD_INT 5
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 3
54877: NEG
54878: PUSH
54879: LD_INT 4
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: LD_INT 3
54893: NEG
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 4
54901: NEG
54902: PUSH
54903: LD_INT 3
54905: NEG
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 5
54913: NEG
54914: PUSH
54915: LD_INT 4
54917: NEG
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: LD_INT 5
54929: NEG
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 3
54937: NEG
54938: PUSH
54939: LD_INT 5
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 5
54949: NEG
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 0
54972: PUSH
54973: LD_INT 4
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: LD_INT 3
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 2
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 4
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 2
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 2
55051: NEG
55052: PUSH
55053: LD_INT 4
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 4
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 4
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 5
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 5
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 4
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 5
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55201: LD_ADDR_VAR 0 32
55205: PUSH
55206: LD_INT 4
55208: NEG
55209: PUSH
55210: LD_INT 0
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 4
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 4
55253: NEG
55254: PUSH
55255: LD_INT 1
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 5
55264: NEG
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: NEG
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 5
55287: NEG
55288: PUSH
55289: LD_INT 2
55291: NEG
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 3
55299: NEG
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 3
55310: NEG
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 3
55322: NEG
55323: PUSH
55324: LD_INT 4
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 2
55334: NEG
55335: PUSH
55336: LD_INT 3
55338: NEG
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: LD_INT 2
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 3
55358: NEG
55359: PUSH
55360: LD_INT 2
55362: NEG
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 4
55370: NEG
55371: PUSH
55372: LD_INT 3
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 4
55382: NEG
55383: PUSH
55384: LD_INT 4
55386: NEG
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: LD_INT 4
55398: NEG
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 4
55406: NEG
55407: PUSH
55408: LD_INT 2
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 4
55421: NEG
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 5
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 4
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: LD_INT 3
55454: NEG
55455: PUSH
55456: EMPTY
55457: LIST
55458: LIST
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: LD_INT 3
55465: NEG
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: LD_INT 4
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 5
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 2
55497: PUSH
55498: LD_INT 3
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 5
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: LD_INT 0
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: LD_INT 1
55533: NEG
55534: PUSH
55535: EMPTY
55536: LIST
55537: LIST
55538: PUSH
55539: LD_INT 4
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: LD_INT 4
55551: PUSH
55552: LD_INT 1
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 3
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 0
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 2
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 4
55603: PUSH
55604: LD_INT 2
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 4
55613: PUSH
55614: LD_INT 4
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 4
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 5
55633: PUSH
55634: LD_INT 4
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 5
55643: PUSH
55644: LD_INT 5
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: PUSH
55654: LD_INT 5
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 3
55663: PUSH
55664: LD_INT 4
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 3
55673: PUSH
55674: LD_INT 3
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 5
55683: PUSH
55684: LD_INT 3
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: PUSH
55691: LD_INT 3
55693: PUSH
55694: LD_INT 5
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
55748: LD_ADDR_VAR 0 33
55752: PUSH
55753: LD_INT 4
55755: NEG
55756: PUSH
55757: LD_INT 4
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 4
55767: NEG
55768: PUSH
55769: LD_INT 5
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 3
55779: NEG
55780: PUSH
55781: LD_INT 4
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 3
55791: NEG
55792: PUSH
55793: LD_INT 3
55795: NEG
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 4
55803: NEG
55804: PUSH
55805: LD_INT 3
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 5
55815: NEG
55816: PUSH
55817: LD_INT 4
55819: NEG
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 5
55827: NEG
55828: PUSH
55829: LD_INT 5
55831: NEG
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: PUSH
55837: LD_INT 3
55839: NEG
55840: PUSH
55841: LD_INT 5
55843: NEG
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 5
55851: NEG
55852: PUSH
55853: LD_INT 3
55855: NEG
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 3
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 4
55877: NEG
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 3
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: LD_INT 2
55899: NEG
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: NEG
55931: PUSH
55932: LD_INT 4
55934: NEG
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 4
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 4
55965: PUSH
55966: LD_INT 0
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 4
55975: PUSH
55976: LD_INT 1
55978: NEG
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 5
55986: PUSH
55987: LD_INT 0
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 5
55996: PUSH
55997: LD_INT 1
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 4
56006: PUSH
56007: LD_INT 1
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 3
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 3
56026: PUSH
56027: LD_INT 1
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 3
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 5
56048: PUSH
56049: LD_INT 2
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 3
56058: PUSH
56059: LD_INT 3
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 3
56068: PUSH
56069: LD_INT 2
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 4
56078: PUSH
56079: LD_INT 3
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 4
56088: PUSH
56089: LD_INT 4
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 3
56098: PUSH
56099: LD_INT 4
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: LD_INT 3
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: LD_INT 2
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 4
56128: PUSH
56129: LD_INT 2
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: LD_INT 4
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 4
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 0
56158: PUSH
56159: LD_INT 3
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 4
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 5
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: LD_INT 5
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: LD_INT 4
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 3
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 5
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: LD_INT 3
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56286: LD_ADDR_VAR 0 34
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: LD_INT 4
56296: NEG
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 5
56307: NEG
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 1
56315: PUSH
56316: LD_INT 4
56318: NEG
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 1
56326: PUSH
56327: LD_INT 3
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 0
56337: PUSH
56338: LD_INT 3
56340: NEG
56341: PUSH
56342: EMPTY
56343: LIST
56344: LIST
56345: PUSH
56346: LD_INT 1
56348: NEG
56349: PUSH
56350: LD_INT 4
56352: NEG
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: LD_INT 5
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 3
56375: NEG
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 2
56383: NEG
56384: PUSH
56385: LD_INT 5
56387: NEG
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 3
56395: PUSH
56396: LD_INT 0
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 3
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 4
56416: PUSH
56417: LD_INT 0
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 4
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: LD_INT 1
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 2
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 2
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 4
56478: PUSH
56479: LD_INT 2
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 4
56488: PUSH
56489: LD_INT 4
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 4
56498: PUSH
56499: LD_INT 3
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 5
56508: PUSH
56509: LD_INT 4
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: PUSH
56519: LD_INT 5
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 4
56528: PUSH
56529: LD_INT 5
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 3
56538: PUSH
56539: LD_INT 4
56541: PUSH
56542: EMPTY
56543: LIST
56544: LIST
56545: PUSH
56546: LD_INT 3
56548: PUSH
56549: LD_INT 3
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 5
56558: PUSH
56559: LD_INT 3
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: LD_INT 5
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 3
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: PUSH
56609: LD_INT 4
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 0
56618: PUSH
56619: LD_INT 4
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: NEG
56629: PUSH
56630: LD_INT 3
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 2
56650: PUSH
56651: LD_INT 4
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: NEG
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 4
56671: NEG
56672: PUSH
56673: LD_INT 0
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 4
56682: NEG
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 3
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 4
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: NEG
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 5
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 5
56750: NEG
56751: PUSH
56752: LD_INT 2
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 3
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// end ; end ;
56818: GO 56821
56820: POP
// case btype of b_depot , b_warehouse :
56821: LD_VAR 0 1
56825: PUSH
56826: LD_INT 0
56828: DOUBLE
56829: EQUAL
56830: IFTRUE 56840
56832: LD_INT 1
56834: DOUBLE
56835: EQUAL
56836: IFTRUE 56840
56838: GO 57041
56840: POP
// case nation of nation_american :
56841: LD_VAR 0 5
56845: PUSH
56846: LD_INT 1
56848: DOUBLE
56849: EQUAL
56850: IFTRUE 56854
56852: GO 56910
56854: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56855: LD_ADDR_VAR 0 9
56859: PUSH
56860: LD_VAR 0 11
56864: PUSH
56865: LD_VAR 0 12
56869: PUSH
56870: LD_VAR 0 13
56874: PUSH
56875: LD_VAR 0 14
56879: PUSH
56880: LD_VAR 0 15
56884: PUSH
56885: LD_VAR 0 16
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 4
56902: PUSH
56903: LD_INT 1
56905: PLUS
56906: ARRAY
56907: ST_TO_ADDR
56908: GO 57039
56910: LD_INT 2
56912: DOUBLE
56913: EQUAL
56914: IFTRUE 56918
56916: GO 56974
56918: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56919: LD_ADDR_VAR 0 9
56923: PUSH
56924: LD_VAR 0 17
56928: PUSH
56929: LD_VAR 0 18
56933: PUSH
56934: LD_VAR 0 19
56938: PUSH
56939: LD_VAR 0 20
56943: PUSH
56944: LD_VAR 0 21
56948: PUSH
56949: LD_VAR 0 22
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: PUSH
56962: LD_VAR 0 4
56966: PUSH
56967: LD_INT 1
56969: PLUS
56970: ARRAY
56971: ST_TO_ADDR
56972: GO 57039
56974: LD_INT 3
56976: DOUBLE
56977: EQUAL
56978: IFTRUE 56982
56980: GO 57038
56982: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56983: LD_ADDR_VAR 0 9
56987: PUSH
56988: LD_VAR 0 23
56992: PUSH
56993: LD_VAR 0 24
56997: PUSH
56998: LD_VAR 0 25
57002: PUSH
57003: LD_VAR 0 26
57007: PUSH
57008: LD_VAR 0 27
57012: PUSH
57013: LD_VAR 0 28
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: PUSH
57026: LD_VAR 0 4
57030: PUSH
57031: LD_INT 1
57033: PLUS
57034: ARRAY
57035: ST_TO_ADDR
57036: GO 57039
57038: POP
57039: GO 57594
57041: LD_INT 2
57043: DOUBLE
57044: EQUAL
57045: IFTRUE 57055
57047: LD_INT 3
57049: DOUBLE
57050: EQUAL
57051: IFTRUE 57055
57053: GO 57111
57055: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57056: LD_ADDR_VAR 0 9
57060: PUSH
57061: LD_VAR 0 29
57065: PUSH
57066: LD_VAR 0 30
57070: PUSH
57071: LD_VAR 0 31
57075: PUSH
57076: LD_VAR 0 32
57080: PUSH
57081: LD_VAR 0 33
57085: PUSH
57086: LD_VAR 0 34
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: PUSH
57099: LD_VAR 0 4
57103: PUSH
57104: LD_INT 1
57106: PLUS
57107: ARRAY
57108: ST_TO_ADDR
57109: GO 57594
57111: LD_INT 16
57113: DOUBLE
57114: EQUAL
57115: IFTRUE 57173
57117: LD_INT 17
57119: DOUBLE
57120: EQUAL
57121: IFTRUE 57173
57123: LD_INT 18
57125: DOUBLE
57126: EQUAL
57127: IFTRUE 57173
57129: LD_INT 19
57131: DOUBLE
57132: EQUAL
57133: IFTRUE 57173
57135: LD_INT 22
57137: DOUBLE
57138: EQUAL
57139: IFTRUE 57173
57141: LD_INT 20
57143: DOUBLE
57144: EQUAL
57145: IFTRUE 57173
57147: LD_INT 21
57149: DOUBLE
57150: EQUAL
57151: IFTRUE 57173
57153: LD_INT 23
57155: DOUBLE
57156: EQUAL
57157: IFTRUE 57173
57159: LD_INT 24
57161: DOUBLE
57162: EQUAL
57163: IFTRUE 57173
57165: LD_INT 25
57167: DOUBLE
57168: EQUAL
57169: IFTRUE 57173
57171: GO 57229
57173: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57174: LD_ADDR_VAR 0 9
57178: PUSH
57179: LD_VAR 0 35
57183: PUSH
57184: LD_VAR 0 36
57188: PUSH
57189: LD_VAR 0 37
57193: PUSH
57194: LD_VAR 0 38
57198: PUSH
57199: LD_VAR 0 39
57203: PUSH
57204: LD_VAR 0 40
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: PUSH
57217: LD_VAR 0 4
57221: PUSH
57222: LD_INT 1
57224: PLUS
57225: ARRAY
57226: ST_TO_ADDR
57227: GO 57594
57229: LD_INT 6
57231: DOUBLE
57232: EQUAL
57233: IFTRUE 57285
57235: LD_INT 7
57237: DOUBLE
57238: EQUAL
57239: IFTRUE 57285
57241: LD_INT 8
57243: DOUBLE
57244: EQUAL
57245: IFTRUE 57285
57247: LD_INT 13
57249: DOUBLE
57250: EQUAL
57251: IFTRUE 57285
57253: LD_INT 12
57255: DOUBLE
57256: EQUAL
57257: IFTRUE 57285
57259: LD_INT 15
57261: DOUBLE
57262: EQUAL
57263: IFTRUE 57285
57265: LD_INT 11
57267: DOUBLE
57268: EQUAL
57269: IFTRUE 57285
57271: LD_INT 14
57273: DOUBLE
57274: EQUAL
57275: IFTRUE 57285
57277: LD_INT 10
57279: DOUBLE
57280: EQUAL
57281: IFTRUE 57285
57283: GO 57341
57285: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
57286: LD_ADDR_VAR 0 9
57290: PUSH
57291: LD_VAR 0 41
57295: PUSH
57296: LD_VAR 0 42
57300: PUSH
57301: LD_VAR 0 43
57305: PUSH
57306: LD_VAR 0 44
57310: PUSH
57311: LD_VAR 0 45
57315: PUSH
57316: LD_VAR 0 46
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: PUSH
57329: LD_VAR 0 4
57333: PUSH
57334: LD_INT 1
57336: PLUS
57337: ARRAY
57338: ST_TO_ADDR
57339: GO 57594
57341: LD_INT 36
57343: DOUBLE
57344: EQUAL
57345: IFTRUE 57349
57347: GO 57405
57349: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
57350: LD_ADDR_VAR 0 9
57354: PUSH
57355: LD_VAR 0 47
57359: PUSH
57360: LD_VAR 0 48
57364: PUSH
57365: LD_VAR 0 49
57369: PUSH
57370: LD_VAR 0 50
57374: PUSH
57375: LD_VAR 0 51
57379: PUSH
57380: LD_VAR 0 52
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: PUSH
57393: LD_VAR 0 4
57397: PUSH
57398: LD_INT 1
57400: PLUS
57401: ARRAY
57402: ST_TO_ADDR
57403: GO 57594
57405: LD_INT 4
57407: DOUBLE
57408: EQUAL
57409: IFTRUE 57431
57411: LD_INT 5
57413: DOUBLE
57414: EQUAL
57415: IFTRUE 57431
57417: LD_INT 34
57419: DOUBLE
57420: EQUAL
57421: IFTRUE 57431
57423: LD_INT 37
57425: DOUBLE
57426: EQUAL
57427: IFTRUE 57431
57429: GO 57487
57431: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
57432: LD_ADDR_VAR 0 9
57436: PUSH
57437: LD_VAR 0 53
57441: PUSH
57442: LD_VAR 0 54
57446: PUSH
57447: LD_VAR 0 55
57451: PUSH
57452: LD_VAR 0 56
57456: PUSH
57457: LD_VAR 0 57
57461: PUSH
57462: LD_VAR 0 58
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: PUSH
57475: LD_VAR 0 4
57479: PUSH
57480: LD_INT 1
57482: PLUS
57483: ARRAY
57484: ST_TO_ADDR
57485: GO 57594
57487: LD_INT 31
57489: DOUBLE
57490: EQUAL
57491: IFTRUE 57537
57493: LD_INT 32
57495: DOUBLE
57496: EQUAL
57497: IFTRUE 57537
57499: LD_INT 33
57501: DOUBLE
57502: EQUAL
57503: IFTRUE 57537
57505: LD_INT 27
57507: DOUBLE
57508: EQUAL
57509: IFTRUE 57537
57511: LD_INT 26
57513: DOUBLE
57514: EQUAL
57515: IFTRUE 57537
57517: LD_INT 28
57519: DOUBLE
57520: EQUAL
57521: IFTRUE 57537
57523: LD_INT 29
57525: DOUBLE
57526: EQUAL
57527: IFTRUE 57537
57529: LD_INT 30
57531: DOUBLE
57532: EQUAL
57533: IFTRUE 57537
57535: GO 57593
57537: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
57538: LD_ADDR_VAR 0 9
57542: PUSH
57543: LD_VAR 0 59
57547: PUSH
57548: LD_VAR 0 60
57552: PUSH
57553: LD_VAR 0 61
57557: PUSH
57558: LD_VAR 0 62
57562: PUSH
57563: LD_VAR 0 63
57567: PUSH
57568: LD_VAR 0 64
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: PUSH
57581: LD_VAR 0 4
57585: PUSH
57586: LD_INT 1
57588: PLUS
57589: ARRAY
57590: ST_TO_ADDR
57591: GO 57594
57593: POP
// temp_list2 = [ ] ;
57594: LD_ADDR_VAR 0 10
57598: PUSH
57599: EMPTY
57600: ST_TO_ADDR
// for i in temp_list do
57601: LD_ADDR_VAR 0 8
57605: PUSH
57606: LD_VAR 0 9
57610: PUSH
57611: FOR_IN
57612: IFFALSE 57664
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
57614: LD_ADDR_VAR 0 10
57618: PUSH
57619: LD_VAR 0 10
57623: PUSH
57624: LD_VAR 0 8
57628: PUSH
57629: LD_INT 1
57631: ARRAY
57632: PUSH
57633: LD_VAR 0 2
57637: PLUS
57638: PUSH
57639: LD_VAR 0 8
57643: PUSH
57644: LD_INT 2
57646: ARRAY
57647: PUSH
57648: LD_VAR 0 3
57652: PLUS
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: EMPTY
57659: LIST
57660: ADD
57661: ST_TO_ADDR
57662: GO 57611
57664: POP
57665: POP
// result = temp_list2 ;
57666: LD_ADDR_VAR 0 7
57670: PUSH
57671: LD_VAR 0 10
57675: ST_TO_ADDR
// end ;
57676: LD_VAR 0 7
57680: RET
// export function EnemyInRange ( unit , dist ) ; begin
57681: LD_INT 0
57683: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
57684: LD_ADDR_VAR 0 3
57688: PUSH
57689: LD_VAR 0 1
57693: PPUSH
57694: CALL_OW 255
57698: PPUSH
57699: LD_VAR 0 1
57703: PPUSH
57704: CALL_OW 250
57708: PPUSH
57709: LD_VAR 0 1
57713: PPUSH
57714: CALL_OW 251
57718: PPUSH
57719: LD_VAR 0 2
57723: PPUSH
57724: CALL 31077 0 4
57728: PUSH
57729: LD_INT 4
57731: ARRAY
57732: ST_TO_ADDR
// end ;
57733: LD_VAR 0 3
57737: RET
// export function PlayerSeeMe ( unit ) ; begin
57738: LD_INT 0
57740: PPUSH
// result := See ( your_side , unit ) ;
57741: LD_ADDR_VAR 0 2
57745: PUSH
57746: LD_OWVAR 2
57750: PPUSH
57751: LD_VAR 0 1
57755: PPUSH
57756: CALL_OW 292
57760: ST_TO_ADDR
// end ;
57761: LD_VAR 0 2
57765: RET
// export function ReverseDir ( unit ) ; begin
57766: LD_INT 0
57768: PPUSH
// if not unit then
57769: LD_VAR 0 1
57773: NOT
57774: IFFALSE 57778
// exit ;
57776: GO 57801
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
57778: LD_ADDR_VAR 0 2
57782: PUSH
57783: LD_VAR 0 1
57787: PPUSH
57788: CALL_OW 254
57792: PUSH
57793: LD_INT 3
57795: PLUS
57796: PUSH
57797: LD_INT 6
57799: MOD
57800: ST_TO_ADDR
// end ;
57801: LD_VAR 0 2
57805: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
57806: LD_INT 0
57808: PPUSH
57809: PPUSH
57810: PPUSH
57811: PPUSH
57812: PPUSH
// if not hexes then
57813: LD_VAR 0 2
57817: NOT
57818: IFFALSE 57822
// exit ;
57820: GO 57970
// dist := 9999 ;
57822: LD_ADDR_VAR 0 5
57826: PUSH
57827: LD_INT 9999
57829: ST_TO_ADDR
// for i = 1 to hexes do
57830: LD_ADDR_VAR 0 4
57834: PUSH
57835: DOUBLE
57836: LD_INT 1
57838: DEC
57839: ST_TO_ADDR
57840: LD_VAR 0 2
57844: PUSH
57845: FOR_TO
57846: IFFALSE 57958
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
57848: LD_VAR 0 1
57852: PPUSH
57853: LD_VAR 0 2
57857: PUSH
57858: LD_VAR 0 4
57862: ARRAY
57863: PUSH
57864: LD_INT 1
57866: ARRAY
57867: PPUSH
57868: LD_VAR 0 2
57872: PUSH
57873: LD_VAR 0 4
57877: ARRAY
57878: PUSH
57879: LD_INT 2
57881: ARRAY
57882: PPUSH
57883: CALL_OW 297
57887: PUSH
57888: LD_VAR 0 5
57892: LESS
57893: IFFALSE 57956
// begin hex := hexes [ i ] ;
57895: LD_ADDR_VAR 0 7
57899: PUSH
57900: LD_VAR 0 2
57904: PUSH
57905: LD_VAR 0 4
57909: ARRAY
57910: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57911: LD_ADDR_VAR 0 5
57915: PUSH
57916: LD_VAR 0 1
57920: PPUSH
57921: LD_VAR 0 2
57925: PUSH
57926: LD_VAR 0 4
57930: ARRAY
57931: PUSH
57932: LD_INT 1
57934: ARRAY
57935: PPUSH
57936: LD_VAR 0 2
57940: PUSH
57941: LD_VAR 0 4
57945: ARRAY
57946: PUSH
57947: LD_INT 2
57949: ARRAY
57950: PPUSH
57951: CALL_OW 297
57955: ST_TO_ADDR
// end ; end ;
57956: GO 57845
57958: POP
57959: POP
// result := hex ;
57960: LD_ADDR_VAR 0 3
57964: PUSH
57965: LD_VAR 0 7
57969: ST_TO_ADDR
// end ;
57970: LD_VAR 0 3
57974: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57975: LD_INT 0
57977: PPUSH
57978: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57979: LD_VAR 0 1
57983: NOT
57984: PUSH
57985: LD_VAR 0 1
57989: PUSH
57990: LD_INT 21
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 23
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PPUSH
58014: CALL_OW 69
58018: IN
58019: NOT
58020: OR
58021: IFFALSE 58025
// exit ;
58023: GO 58072
// for i = 1 to 3 do
58025: LD_ADDR_VAR 0 3
58029: PUSH
58030: DOUBLE
58031: LD_INT 1
58033: DEC
58034: ST_TO_ADDR
58035: LD_INT 3
58037: PUSH
58038: FOR_TO
58039: IFFALSE 58070
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58041: LD_VAR 0 1
58045: PPUSH
58046: CALL_OW 250
58050: PPUSH
58051: LD_VAR 0 1
58055: PPUSH
58056: CALL_OW 251
58060: PPUSH
58061: LD_INT 1
58063: PPUSH
58064: CALL_OW 453
58068: GO 58038
58070: POP
58071: POP
// end ;
58072: LD_VAR 0 2
58076: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58077: LD_INT 0
58079: PPUSH
58080: PPUSH
58081: PPUSH
58082: PPUSH
58083: PPUSH
58084: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58085: LD_VAR 0 1
58089: NOT
58090: PUSH
58091: LD_VAR 0 2
58095: NOT
58096: OR
58097: PUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 314
58107: OR
58108: IFFALSE 58112
// exit ;
58110: GO 58553
// x := GetX ( enemy_unit ) ;
58112: LD_ADDR_VAR 0 7
58116: PUSH
58117: LD_VAR 0 2
58121: PPUSH
58122: CALL_OW 250
58126: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58127: LD_ADDR_VAR 0 8
58131: PUSH
58132: LD_VAR 0 2
58136: PPUSH
58137: CALL_OW 251
58141: ST_TO_ADDR
// if not x or not y then
58142: LD_VAR 0 7
58146: NOT
58147: PUSH
58148: LD_VAR 0 8
58152: NOT
58153: OR
58154: IFFALSE 58158
// exit ;
58156: GO 58553
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58158: LD_ADDR_VAR 0 6
58162: PUSH
58163: LD_VAR 0 7
58167: PPUSH
58168: LD_INT 0
58170: PPUSH
58171: LD_INT 4
58173: PPUSH
58174: CALL_OW 272
58178: PUSH
58179: LD_VAR 0 8
58183: PPUSH
58184: LD_INT 0
58186: PPUSH
58187: LD_INT 4
58189: PPUSH
58190: CALL_OW 273
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: PUSH
58199: LD_VAR 0 7
58203: PPUSH
58204: LD_INT 1
58206: PPUSH
58207: LD_INT 4
58209: PPUSH
58210: CALL_OW 272
58214: PUSH
58215: LD_VAR 0 8
58219: PPUSH
58220: LD_INT 1
58222: PPUSH
58223: LD_INT 4
58225: PPUSH
58226: CALL_OW 273
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_VAR 0 7
58239: PPUSH
58240: LD_INT 2
58242: PPUSH
58243: LD_INT 4
58245: PPUSH
58246: CALL_OW 272
58250: PUSH
58251: LD_VAR 0 8
58255: PPUSH
58256: LD_INT 2
58258: PPUSH
58259: LD_INT 4
58261: PPUSH
58262: CALL_OW 273
58266: PUSH
58267: EMPTY
58268: LIST
58269: LIST
58270: PUSH
58271: LD_VAR 0 7
58275: PPUSH
58276: LD_INT 3
58278: PPUSH
58279: LD_INT 4
58281: PPUSH
58282: CALL_OW 272
58286: PUSH
58287: LD_VAR 0 8
58291: PPUSH
58292: LD_INT 3
58294: PPUSH
58295: LD_INT 4
58297: PPUSH
58298: CALL_OW 273
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_VAR 0 7
58311: PPUSH
58312: LD_INT 4
58314: PPUSH
58315: LD_INT 4
58317: PPUSH
58318: CALL_OW 272
58322: PUSH
58323: LD_VAR 0 8
58327: PPUSH
58328: LD_INT 4
58330: PPUSH
58331: LD_INT 4
58333: PPUSH
58334: CALL_OW 273
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_VAR 0 7
58347: PPUSH
58348: LD_INT 5
58350: PPUSH
58351: LD_INT 4
58353: PPUSH
58354: CALL_OW 272
58358: PUSH
58359: LD_VAR 0 8
58363: PPUSH
58364: LD_INT 5
58366: PPUSH
58367: LD_INT 4
58369: PPUSH
58370: CALL_OW 273
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: ST_TO_ADDR
// for i = tmp downto 1 do
58387: LD_ADDR_VAR 0 4
58391: PUSH
58392: DOUBLE
58393: LD_VAR 0 6
58397: INC
58398: ST_TO_ADDR
58399: LD_INT 1
58401: PUSH
58402: FOR_DOWNTO
58403: IFFALSE 58504
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
58405: LD_VAR 0 6
58409: PUSH
58410: LD_VAR 0 4
58414: ARRAY
58415: PUSH
58416: LD_INT 1
58418: ARRAY
58419: PPUSH
58420: LD_VAR 0 6
58424: PUSH
58425: LD_VAR 0 4
58429: ARRAY
58430: PUSH
58431: LD_INT 2
58433: ARRAY
58434: PPUSH
58435: CALL_OW 488
58439: NOT
58440: PUSH
58441: LD_VAR 0 6
58445: PUSH
58446: LD_VAR 0 4
58450: ARRAY
58451: PUSH
58452: LD_INT 1
58454: ARRAY
58455: PPUSH
58456: LD_VAR 0 6
58460: PUSH
58461: LD_VAR 0 4
58465: ARRAY
58466: PUSH
58467: LD_INT 2
58469: ARRAY
58470: PPUSH
58471: CALL_OW 428
58475: PUSH
58476: LD_INT 0
58478: NONEQUAL
58479: OR
58480: IFFALSE 58502
// tmp := Delete ( tmp , i ) ;
58482: LD_ADDR_VAR 0 6
58486: PUSH
58487: LD_VAR 0 6
58491: PPUSH
58492: LD_VAR 0 4
58496: PPUSH
58497: CALL_OW 3
58501: ST_TO_ADDR
58502: GO 58402
58504: POP
58505: POP
// j := GetClosestHex ( unit , tmp ) ;
58506: LD_ADDR_VAR 0 5
58510: PUSH
58511: LD_VAR 0 1
58515: PPUSH
58516: LD_VAR 0 6
58520: PPUSH
58521: CALL 57806 0 2
58525: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
58526: LD_VAR 0 1
58530: PPUSH
58531: LD_VAR 0 5
58535: PUSH
58536: LD_INT 1
58538: ARRAY
58539: PPUSH
58540: LD_VAR 0 5
58544: PUSH
58545: LD_INT 2
58547: ARRAY
58548: PPUSH
58549: CALL_OW 111
// end ;
58553: LD_VAR 0 3
58557: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58558: LD_INT 0
58560: PPUSH
58561: PPUSH
58562: PPUSH
// uc_side = 0 ;
58563: LD_ADDR_OWVAR 20
58567: PUSH
58568: LD_INT 0
58570: ST_TO_ADDR
// uc_nation = 0 ;
58571: LD_ADDR_OWVAR 21
58575: PUSH
58576: LD_INT 0
58578: ST_TO_ADDR
// InitHc_All ( ) ;
58579: CALL_OW 584
// InitVc ;
58583: CALL_OW 20
// if mastodonts then
58587: LD_VAR 0 6
58591: IFFALSE 58658
// for i = 1 to mastodonts do
58593: LD_ADDR_VAR 0 11
58597: PUSH
58598: DOUBLE
58599: LD_INT 1
58601: DEC
58602: ST_TO_ADDR
58603: LD_VAR 0 6
58607: PUSH
58608: FOR_TO
58609: IFFALSE 58656
// begin vc_chassis := 31 ;
58611: LD_ADDR_OWVAR 37
58615: PUSH
58616: LD_INT 31
58618: ST_TO_ADDR
// vc_control := control_rider ;
58619: LD_ADDR_OWVAR 38
58623: PUSH
58624: LD_INT 4
58626: ST_TO_ADDR
// animal := CreateVehicle ;
58627: LD_ADDR_VAR 0 12
58631: PUSH
58632: CALL_OW 45
58636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58637: LD_VAR 0 12
58641: PPUSH
58642: LD_VAR 0 8
58646: PPUSH
58647: LD_INT 0
58649: PPUSH
58650: CALL 60846 0 3
// end ;
58654: GO 58608
58656: POP
58657: POP
// if horses then
58658: LD_VAR 0 5
58662: IFFALSE 58729
// for i = 1 to horses do
58664: LD_ADDR_VAR 0 11
58668: PUSH
58669: DOUBLE
58670: LD_INT 1
58672: DEC
58673: ST_TO_ADDR
58674: LD_VAR 0 5
58678: PUSH
58679: FOR_TO
58680: IFFALSE 58727
// begin hc_class := 21 ;
58682: LD_ADDR_OWVAR 28
58686: PUSH
58687: LD_INT 21
58689: ST_TO_ADDR
// hc_gallery :=  ;
58690: LD_ADDR_OWVAR 33
58694: PUSH
58695: LD_STRING 
58697: ST_TO_ADDR
// animal := CreateHuman ;
58698: LD_ADDR_VAR 0 12
58702: PUSH
58703: CALL_OW 44
58707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58708: LD_VAR 0 12
58712: PPUSH
58713: LD_VAR 0 8
58717: PPUSH
58718: LD_INT 0
58720: PPUSH
58721: CALL 60846 0 3
// end ;
58725: GO 58679
58727: POP
58728: POP
// if birds then
58729: LD_VAR 0 1
58733: IFFALSE 58800
// for i = 1 to birds do
58735: LD_ADDR_VAR 0 11
58739: PUSH
58740: DOUBLE
58741: LD_INT 1
58743: DEC
58744: ST_TO_ADDR
58745: LD_VAR 0 1
58749: PUSH
58750: FOR_TO
58751: IFFALSE 58798
// begin hc_class = 18 ;
58753: LD_ADDR_OWVAR 28
58757: PUSH
58758: LD_INT 18
58760: ST_TO_ADDR
// hc_gallery =  ;
58761: LD_ADDR_OWVAR 33
58765: PUSH
58766: LD_STRING 
58768: ST_TO_ADDR
// animal := CreateHuman ;
58769: LD_ADDR_VAR 0 12
58773: PUSH
58774: CALL_OW 44
58778: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58779: LD_VAR 0 12
58783: PPUSH
58784: LD_VAR 0 8
58788: PPUSH
58789: LD_INT 0
58791: PPUSH
58792: CALL 60846 0 3
// end ;
58796: GO 58750
58798: POP
58799: POP
// if tigers then
58800: LD_VAR 0 2
58804: IFFALSE 58888
// for i = 1 to tigers do
58806: LD_ADDR_VAR 0 11
58810: PUSH
58811: DOUBLE
58812: LD_INT 1
58814: DEC
58815: ST_TO_ADDR
58816: LD_VAR 0 2
58820: PUSH
58821: FOR_TO
58822: IFFALSE 58886
// begin hc_class = class_tiger ;
58824: LD_ADDR_OWVAR 28
58828: PUSH
58829: LD_INT 14
58831: ST_TO_ADDR
// hc_gallery =  ;
58832: LD_ADDR_OWVAR 33
58836: PUSH
58837: LD_STRING 
58839: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58840: LD_ADDR_OWVAR 35
58844: PUSH
58845: LD_INT 7
58847: NEG
58848: PPUSH
58849: LD_INT 7
58851: PPUSH
58852: CALL_OW 12
58856: ST_TO_ADDR
// animal := CreateHuman ;
58857: LD_ADDR_VAR 0 12
58861: PUSH
58862: CALL_OW 44
58866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58867: LD_VAR 0 12
58871: PPUSH
58872: LD_VAR 0 8
58876: PPUSH
58877: LD_INT 0
58879: PPUSH
58880: CALL 60846 0 3
// end ;
58884: GO 58821
58886: POP
58887: POP
// if apemans then
58888: LD_VAR 0 3
58892: IFFALSE 59015
// for i = 1 to apemans do
58894: LD_ADDR_VAR 0 11
58898: PUSH
58899: DOUBLE
58900: LD_INT 1
58902: DEC
58903: ST_TO_ADDR
58904: LD_VAR 0 3
58908: PUSH
58909: FOR_TO
58910: IFFALSE 59013
// begin hc_class = class_apeman ;
58912: LD_ADDR_OWVAR 28
58916: PUSH
58917: LD_INT 12
58919: ST_TO_ADDR
// hc_gallery =  ;
58920: LD_ADDR_OWVAR 33
58924: PUSH
58925: LD_STRING 
58927: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58928: LD_ADDR_OWVAR 35
58932: PUSH
58933: LD_INT 2
58935: NEG
58936: PPUSH
58937: LD_INT 2
58939: PPUSH
58940: CALL_OW 12
58944: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58945: LD_ADDR_OWVAR 31
58949: PUSH
58950: LD_INT 1
58952: PPUSH
58953: LD_INT 3
58955: PPUSH
58956: CALL_OW 12
58960: PUSH
58961: LD_INT 1
58963: PPUSH
58964: LD_INT 3
58966: PPUSH
58967: CALL_OW 12
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 0
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: ST_TO_ADDR
// animal := CreateHuman ;
58984: LD_ADDR_VAR 0 12
58988: PUSH
58989: CALL_OW 44
58993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58994: LD_VAR 0 12
58998: PPUSH
58999: LD_VAR 0 8
59003: PPUSH
59004: LD_INT 0
59006: PPUSH
59007: CALL 60846 0 3
// end ;
59011: GO 58909
59013: POP
59014: POP
// if enchidnas then
59015: LD_VAR 0 4
59019: IFFALSE 59086
// for i = 1 to enchidnas do
59021: LD_ADDR_VAR 0 11
59025: PUSH
59026: DOUBLE
59027: LD_INT 1
59029: DEC
59030: ST_TO_ADDR
59031: LD_VAR 0 4
59035: PUSH
59036: FOR_TO
59037: IFFALSE 59084
// begin hc_class = 13 ;
59039: LD_ADDR_OWVAR 28
59043: PUSH
59044: LD_INT 13
59046: ST_TO_ADDR
// hc_gallery =  ;
59047: LD_ADDR_OWVAR 33
59051: PUSH
59052: LD_STRING 
59054: ST_TO_ADDR
// animal := CreateHuman ;
59055: LD_ADDR_VAR 0 12
59059: PUSH
59060: CALL_OW 44
59064: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59065: LD_VAR 0 12
59069: PPUSH
59070: LD_VAR 0 8
59074: PPUSH
59075: LD_INT 0
59077: PPUSH
59078: CALL 60846 0 3
// end ;
59082: GO 59036
59084: POP
59085: POP
// if fishes then
59086: LD_VAR 0 7
59090: IFFALSE 59157
// for i = 1 to fishes do
59092: LD_ADDR_VAR 0 11
59096: PUSH
59097: DOUBLE
59098: LD_INT 1
59100: DEC
59101: ST_TO_ADDR
59102: LD_VAR 0 7
59106: PUSH
59107: FOR_TO
59108: IFFALSE 59155
// begin hc_class = 20 ;
59110: LD_ADDR_OWVAR 28
59114: PUSH
59115: LD_INT 20
59117: ST_TO_ADDR
// hc_gallery =  ;
59118: LD_ADDR_OWVAR 33
59122: PUSH
59123: LD_STRING 
59125: ST_TO_ADDR
// animal := CreateHuman ;
59126: LD_ADDR_VAR 0 12
59130: PUSH
59131: CALL_OW 44
59135: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59136: LD_VAR 0 12
59140: PPUSH
59141: LD_VAR 0 9
59145: PPUSH
59146: LD_INT 0
59148: PPUSH
59149: CALL 60846 0 3
// end ;
59153: GO 59107
59155: POP
59156: POP
// end ;
59157: LD_VAR 0 10
59161: RET
// export function WantHeal ( sci , unit ) ; begin
59162: LD_INT 0
59164: PPUSH
// if GetTaskList ( sci ) > 0 then
59165: LD_VAR 0 1
59169: PPUSH
59170: CALL_OW 437
59174: PUSH
59175: LD_INT 0
59177: GREATER
59178: IFFALSE 59248
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59180: LD_VAR 0 1
59184: PPUSH
59185: CALL_OW 437
59189: PUSH
59190: LD_INT 1
59192: ARRAY
59193: PUSH
59194: LD_INT 1
59196: ARRAY
59197: PUSH
59198: LD_STRING l
59200: EQUAL
59201: PUSH
59202: LD_VAR 0 1
59206: PPUSH
59207: CALL_OW 437
59211: PUSH
59212: LD_INT 1
59214: ARRAY
59215: PUSH
59216: LD_INT 4
59218: ARRAY
59219: PUSH
59220: LD_VAR 0 2
59224: EQUAL
59225: AND
59226: IFFALSE 59238
// result := true else
59228: LD_ADDR_VAR 0 3
59232: PUSH
59233: LD_INT 1
59235: ST_TO_ADDR
59236: GO 59246
// result := false ;
59238: LD_ADDR_VAR 0 3
59242: PUSH
59243: LD_INT 0
59245: ST_TO_ADDR
// end else
59246: GO 59256
// result := false ;
59248: LD_ADDR_VAR 0 3
59252: PUSH
59253: LD_INT 0
59255: ST_TO_ADDR
// end ;
59256: LD_VAR 0 3
59260: RET
// export function HealTarget ( sci ) ; begin
59261: LD_INT 0
59263: PPUSH
// if not sci then
59264: LD_VAR 0 1
59268: NOT
59269: IFFALSE 59273
// exit ;
59271: GO 59338
// result := 0 ;
59273: LD_ADDR_VAR 0 2
59277: PUSH
59278: LD_INT 0
59280: ST_TO_ADDR
// if GetTaskList ( sci ) then
59281: LD_VAR 0 1
59285: PPUSH
59286: CALL_OW 437
59290: IFFALSE 59338
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59292: LD_VAR 0 1
59296: PPUSH
59297: CALL_OW 437
59301: PUSH
59302: LD_INT 1
59304: ARRAY
59305: PUSH
59306: LD_INT 1
59308: ARRAY
59309: PUSH
59310: LD_STRING l
59312: EQUAL
59313: IFFALSE 59338
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59315: LD_ADDR_VAR 0 2
59319: PUSH
59320: LD_VAR 0 1
59324: PPUSH
59325: CALL_OW 437
59329: PUSH
59330: LD_INT 1
59332: ARRAY
59333: PUSH
59334: LD_INT 4
59336: ARRAY
59337: ST_TO_ADDR
// end ;
59338: LD_VAR 0 2
59342: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59343: LD_INT 0
59345: PPUSH
59346: PPUSH
59347: PPUSH
59348: PPUSH
// if not base_units then
59349: LD_VAR 0 1
59353: NOT
59354: IFFALSE 59358
// exit ;
59356: GO 59445
// result := false ;
59358: LD_ADDR_VAR 0 2
59362: PUSH
59363: LD_INT 0
59365: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59366: LD_ADDR_VAR 0 5
59370: PUSH
59371: LD_VAR 0 1
59375: PPUSH
59376: LD_INT 21
59378: PUSH
59379: LD_INT 3
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PPUSH
59386: CALL_OW 72
59390: ST_TO_ADDR
// if not tmp then
59391: LD_VAR 0 5
59395: NOT
59396: IFFALSE 59400
// exit ;
59398: GO 59445
// for i in tmp do
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: LD_VAR 0 5
59409: PUSH
59410: FOR_IN
59411: IFFALSE 59443
// begin result := EnemyInRange ( i , 22 ) ;
59413: LD_ADDR_VAR 0 2
59417: PUSH
59418: LD_VAR 0 3
59422: PPUSH
59423: LD_INT 22
59425: PPUSH
59426: CALL 57681 0 2
59430: ST_TO_ADDR
// if result then
59431: LD_VAR 0 2
59435: IFFALSE 59441
// exit ;
59437: POP
59438: POP
59439: GO 59445
// end ;
59441: GO 59410
59443: POP
59444: POP
// end ;
59445: LD_VAR 0 2
59449: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59450: LD_INT 0
59452: PPUSH
59453: PPUSH
// if not units then
59454: LD_VAR 0 1
59458: NOT
59459: IFFALSE 59463
// exit ;
59461: GO 59533
// result := [ ] ;
59463: LD_ADDR_VAR 0 3
59467: PUSH
59468: EMPTY
59469: ST_TO_ADDR
// for i in units do
59470: LD_ADDR_VAR 0 4
59474: PUSH
59475: LD_VAR 0 1
59479: PUSH
59480: FOR_IN
59481: IFFALSE 59531
// if GetTag ( i ) = tag then
59483: LD_VAR 0 4
59487: PPUSH
59488: CALL_OW 110
59492: PUSH
59493: LD_VAR 0 2
59497: EQUAL
59498: IFFALSE 59529
// result := Replace ( result , result + 1 , i ) ;
59500: LD_ADDR_VAR 0 3
59504: PUSH
59505: LD_VAR 0 3
59509: PPUSH
59510: LD_VAR 0 3
59514: PUSH
59515: LD_INT 1
59517: PLUS
59518: PPUSH
59519: LD_VAR 0 4
59523: PPUSH
59524: CALL_OW 1
59528: ST_TO_ADDR
59529: GO 59480
59531: POP
59532: POP
// end ;
59533: LD_VAR 0 3
59537: RET
// export function IsDriver ( un ) ; begin
59538: LD_INT 0
59540: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59541: LD_ADDR_VAR 0 2
59545: PUSH
59546: LD_VAR 0 1
59550: PUSH
59551: LD_INT 55
59553: PUSH
59554: EMPTY
59555: LIST
59556: PPUSH
59557: CALL_OW 69
59561: IN
59562: ST_TO_ADDR
// end ;
59563: LD_VAR 0 2
59567: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59568: LD_INT 0
59570: PPUSH
59571: PPUSH
// list := [ ] ;
59572: LD_ADDR_VAR 0 5
59576: PUSH
59577: EMPTY
59578: ST_TO_ADDR
// case d of 0 :
59579: LD_VAR 0 3
59583: PUSH
59584: LD_INT 0
59586: DOUBLE
59587: EQUAL
59588: IFTRUE 59592
59590: GO 59725
59592: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59593: LD_ADDR_VAR 0 5
59597: PUSH
59598: LD_VAR 0 1
59602: PUSH
59603: LD_INT 4
59605: MINUS
59606: PUSH
59607: LD_VAR 0 2
59611: PUSH
59612: LD_INT 4
59614: MINUS
59615: PUSH
59616: LD_INT 2
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: LIST
59623: PUSH
59624: LD_VAR 0 1
59628: PUSH
59629: LD_INT 3
59631: MINUS
59632: PUSH
59633: LD_VAR 0 2
59637: PUSH
59638: LD_INT 1
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: LIST
59645: PUSH
59646: LD_VAR 0 1
59650: PUSH
59651: LD_INT 4
59653: PLUS
59654: PUSH
59655: LD_VAR 0 2
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: LIST
59667: PUSH
59668: LD_VAR 0 1
59672: PUSH
59673: LD_INT 3
59675: PLUS
59676: PUSH
59677: LD_VAR 0 2
59681: PUSH
59682: LD_INT 3
59684: PLUS
59685: PUSH
59686: LD_INT 5
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: LIST
59693: PUSH
59694: LD_VAR 0 1
59698: PUSH
59699: LD_VAR 0 2
59703: PUSH
59704: LD_INT 4
59706: PLUS
59707: PUSH
59708: LD_INT 0
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: ST_TO_ADDR
// end ; 1 :
59723: GO 60423
59725: LD_INT 1
59727: DOUBLE
59728: EQUAL
59729: IFTRUE 59733
59731: GO 59866
59733: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59734: LD_ADDR_VAR 0 5
59738: PUSH
59739: LD_VAR 0 1
59743: PUSH
59744: LD_VAR 0 2
59748: PUSH
59749: LD_INT 4
59751: MINUS
59752: PUSH
59753: LD_INT 3
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: LIST
59760: PUSH
59761: LD_VAR 0 1
59765: PUSH
59766: LD_INT 3
59768: MINUS
59769: PUSH
59770: LD_VAR 0 2
59774: PUSH
59775: LD_INT 3
59777: MINUS
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: LD_VAR 0 1
59791: PUSH
59792: LD_INT 4
59794: MINUS
59795: PUSH
59796: LD_VAR 0 2
59800: PUSH
59801: LD_INT 1
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: LIST
59808: PUSH
59809: LD_VAR 0 1
59813: PUSH
59814: LD_VAR 0 2
59818: PUSH
59819: LD_INT 3
59821: PLUS
59822: PUSH
59823: LD_INT 0
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: LIST
59830: PUSH
59831: LD_VAR 0 1
59835: PUSH
59836: LD_INT 4
59838: PLUS
59839: PUSH
59840: LD_VAR 0 2
59844: PUSH
59845: LD_INT 4
59847: PLUS
59848: PUSH
59849: LD_INT 5
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: LIST
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: ST_TO_ADDR
// end ; 2 :
59864: GO 60423
59866: LD_INT 2
59868: DOUBLE
59869: EQUAL
59870: IFTRUE 59874
59872: GO 60003
59874: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59875: LD_ADDR_VAR 0 5
59879: PUSH
59880: LD_VAR 0 1
59884: PUSH
59885: LD_VAR 0 2
59889: PUSH
59890: LD_INT 3
59892: MINUS
59893: PUSH
59894: LD_INT 3
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: LIST
59901: PUSH
59902: LD_VAR 0 1
59906: PUSH
59907: LD_INT 4
59909: PLUS
59910: PUSH
59911: LD_VAR 0 2
59915: PUSH
59916: LD_INT 4
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: LIST
59923: PUSH
59924: LD_VAR 0 1
59928: PUSH
59929: LD_VAR 0 2
59933: PUSH
59934: LD_INT 4
59936: PLUS
59937: PUSH
59938: LD_INT 0
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: LIST
59945: PUSH
59946: LD_VAR 0 1
59950: PUSH
59951: LD_INT 3
59953: MINUS
59954: PUSH
59955: LD_VAR 0 2
59959: PUSH
59960: LD_INT 1
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: PUSH
59968: LD_VAR 0 1
59972: PUSH
59973: LD_INT 4
59975: MINUS
59976: PUSH
59977: LD_VAR 0 2
59981: PUSH
59982: LD_INT 4
59984: MINUS
59985: PUSH
59986: LD_INT 2
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: LIST
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: ST_TO_ADDR
// end ; 3 :
60001: GO 60423
60003: LD_INT 3
60005: DOUBLE
60006: EQUAL
60007: IFTRUE 60011
60009: GO 60144
60011: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60012: LD_ADDR_VAR 0 5
60016: PUSH
60017: LD_VAR 0 1
60021: PUSH
60022: LD_INT 3
60024: PLUS
60025: PUSH
60026: LD_VAR 0 2
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: LIST
60038: PUSH
60039: LD_VAR 0 1
60043: PUSH
60044: LD_INT 4
60046: PLUS
60047: PUSH
60048: LD_VAR 0 2
60052: PUSH
60053: LD_INT 4
60055: PLUS
60056: PUSH
60057: LD_INT 5
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: LIST
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: LD_INT 4
60072: MINUS
60073: PUSH
60074: LD_VAR 0 2
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: PUSH
60087: LD_VAR 0 1
60091: PUSH
60092: LD_VAR 0 2
60096: PUSH
60097: LD_INT 4
60099: MINUS
60100: PUSH
60101: LD_INT 3
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: LIST
60108: PUSH
60109: LD_VAR 0 1
60113: PUSH
60114: LD_INT 3
60116: MINUS
60117: PUSH
60118: LD_VAR 0 2
60122: PUSH
60123: LD_INT 3
60125: MINUS
60126: PUSH
60127: LD_INT 2
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: ST_TO_ADDR
// end ; 4 :
60142: GO 60423
60144: LD_INT 4
60146: DOUBLE
60147: EQUAL
60148: IFTRUE 60152
60150: GO 60285
60152: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60153: LD_ADDR_VAR 0 5
60157: PUSH
60158: LD_VAR 0 1
60162: PUSH
60163: LD_VAR 0 2
60167: PUSH
60168: LD_INT 4
60170: PLUS
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: PUSH
60180: LD_VAR 0 1
60184: PUSH
60185: LD_INT 3
60187: PLUS
60188: PUSH
60189: LD_VAR 0 2
60193: PUSH
60194: LD_INT 3
60196: PLUS
60197: PUSH
60198: LD_INT 5
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: LIST
60205: PUSH
60206: LD_VAR 0 1
60210: PUSH
60211: LD_INT 4
60213: PLUS
60214: PUSH
60215: LD_VAR 0 2
60219: PUSH
60220: LD_INT 4
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: LIST
60227: PUSH
60228: LD_VAR 0 1
60232: PUSH
60233: LD_VAR 0 2
60237: PUSH
60238: LD_INT 3
60240: MINUS
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: PUSH
60250: LD_VAR 0 1
60254: PUSH
60255: LD_INT 4
60257: MINUS
60258: PUSH
60259: LD_VAR 0 2
60263: PUSH
60264: LD_INT 4
60266: MINUS
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// end ; 5 :
60283: GO 60423
60285: LD_INT 5
60287: DOUBLE
60288: EQUAL
60289: IFTRUE 60293
60291: GO 60422
60293: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60294: LD_ADDR_VAR 0 5
60298: PUSH
60299: LD_VAR 0 1
60303: PUSH
60304: LD_INT 4
60306: MINUS
60307: PUSH
60308: LD_VAR 0 2
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: PUSH
60321: LD_VAR 0 1
60325: PUSH
60326: LD_VAR 0 2
60330: PUSH
60331: LD_INT 4
60333: MINUS
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: LIST
60342: PUSH
60343: LD_VAR 0 1
60347: PUSH
60348: LD_INT 4
60350: PLUS
60351: PUSH
60352: LD_VAR 0 2
60356: PUSH
60357: LD_INT 4
60359: PLUS
60360: PUSH
60361: LD_INT 5
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 1
60373: PUSH
60374: LD_INT 3
60376: PLUS
60377: PUSH
60378: LD_VAR 0 2
60382: PUSH
60383: LD_INT 4
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: LD_VAR 0 1
60395: PUSH
60396: LD_VAR 0 2
60400: PUSH
60401: LD_INT 3
60403: PLUS
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: LIST
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: ST_TO_ADDR
// end ; end ;
60420: GO 60423
60422: POP
// result := list ;
60423: LD_ADDR_VAR 0 4
60427: PUSH
60428: LD_VAR 0 5
60432: ST_TO_ADDR
// end ;
60433: LD_VAR 0 4
60437: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60438: LD_INT 0
60440: PPUSH
60441: PPUSH
60442: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60443: LD_VAR 0 1
60447: NOT
60448: PUSH
60449: LD_VAR 0 2
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 2
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: LD_INT 4
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: IN
60472: NOT
60473: OR
60474: IFFALSE 60478
// exit ;
60476: GO 60570
// tmp := [ ] ;
60478: LD_ADDR_VAR 0 5
60482: PUSH
60483: EMPTY
60484: ST_TO_ADDR
// for i in units do
60485: LD_ADDR_VAR 0 4
60489: PUSH
60490: LD_VAR 0 1
60494: PUSH
60495: FOR_IN
60496: IFFALSE 60539
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60498: LD_ADDR_VAR 0 5
60502: PUSH
60503: LD_VAR 0 5
60507: PPUSH
60508: LD_VAR 0 5
60512: PUSH
60513: LD_INT 1
60515: PLUS
60516: PPUSH
60517: LD_VAR 0 4
60521: PPUSH
60522: LD_VAR 0 2
60526: PPUSH
60527: CALL_OW 259
60531: PPUSH
60532: CALL_OW 2
60536: ST_TO_ADDR
60537: GO 60495
60539: POP
60540: POP
// if not tmp then
60541: LD_VAR 0 5
60545: NOT
60546: IFFALSE 60550
// exit ;
60548: GO 60570
// result := SortListByListDesc ( units , tmp ) ;
60550: LD_ADDR_VAR 0 3
60554: PUSH
60555: LD_VAR 0 1
60559: PPUSH
60560: LD_VAR 0 5
60564: PPUSH
60565: CALL_OW 77
60569: ST_TO_ADDR
// end ;
60570: LD_VAR 0 3
60574: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60575: LD_INT 0
60577: PPUSH
60578: PPUSH
60579: PPUSH
// result := false ;
60580: LD_ADDR_VAR 0 3
60584: PUSH
60585: LD_INT 0
60587: ST_TO_ADDR
// x := GetX ( building ) ;
60588: LD_ADDR_VAR 0 4
60592: PUSH
60593: LD_VAR 0 2
60597: PPUSH
60598: CALL_OW 250
60602: ST_TO_ADDR
// y := GetY ( building ) ;
60603: LD_ADDR_VAR 0 5
60607: PUSH
60608: LD_VAR 0 2
60612: PPUSH
60613: CALL_OW 251
60617: ST_TO_ADDR
// if not building or not x or not y then
60618: LD_VAR 0 2
60622: NOT
60623: PUSH
60624: LD_VAR 0 4
60628: NOT
60629: OR
60630: PUSH
60631: LD_VAR 0 5
60635: NOT
60636: OR
60637: IFFALSE 60641
// exit ;
60639: GO 60733
// if GetTaskList ( unit ) then
60641: LD_VAR 0 1
60645: PPUSH
60646: CALL_OW 437
60650: IFFALSE 60733
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60652: LD_STRING e
60654: PUSH
60655: LD_VAR 0 1
60659: PPUSH
60660: CALL_OW 437
60664: PUSH
60665: LD_INT 1
60667: ARRAY
60668: PUSH
60669: LD_INT 1
60671: ARRAY
60672: EQUAL
60673: PUSH
60674: LD_VAR 0 4
60678: PUSH
60679: LD_VAR 0 1
60683: PPUSH
60684: CALL_OW 437
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PUSH
60693: LD_INT 2
60695: ARRAY
60696: EQUAL
60697: AND
60698: PUSH
60699: LD_VAR 0 5
60703: PUSH
60704: LD_VAR 0 1
60708: PPUSH
60709: CALL_OW 437
60713: PUSH
60714: LD_INT 1
60716: ARRAY
60717: PUSH
60718: LD_INT 3
60720: ARRAY
60721: EQUAL
60722: AND
60723: IFFALSE 60733
// result := true end ;
60725: LD_ADDR_VAR 0 3
60729: PUSH
60730: LD_INT 1
60732: ST_TO_ADDR
// end ;
60733: LD_VAR 0 3
60737: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60738: LD_INT 0
60740: PPUSH
// result := false ;
60741: LD_ADDR_VAR 0 4
60745: PUSH
60746: LD_INT 0
60748: ST_TO_ADDR
// if GetTaskList ( unit ) then
60749: LD_VAR 0 1
60753: PPUSH
60754: CALL_OW 437
60758: IFFALSE 60841
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60760: LD_STRING M
60762: PUSH
60763: LD_VAR 0 1
60767: PPUSH
60768: CALL_OW 437
60772: PUSH
60773: LD_INT 1
60775: ARRAY
60776: PUSH
60777: LD_INT 1
60779: ARRAY
60780: EQUAL
60781: PUSH
60782: LD_VAR 0 2
60786: PUSH
60787: LD_VAR 0 1
60791: PPUSH
60792: CALL_OW 437
60796: PUSH
60797: LD_INT 1
60799: ARRAY
60800: PUSH
60801: LD_INT 2
60803: ARRAY
60804: EQUAL
60805: AND
60806: PUSH
60807: LD_VAR 0 3
60811: PUSH
60812: LD_VAR 0 1
60816: PPUSH
60817: CALL_OW 437
60821: PUSH
60822: LD_INT 1
60824: ARRAY
60825: PUSH
60826: LD_INT 3
60828: ARRAY
60829: EQUAL
60830: AND
60831: IFFALSE 60841
// result := true ;
60833: LD_ADDR_VAR 0 4
60837: PUSH
60838: LD_INT 1
60840: ST_TO_ADDR
// end ; end ;
60841: LD_VAR 0 4
60845: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60846: LD_INT 0
60848: PPUSH
60849: PPUSH
60850: PPUSH
60851: PPUSH
// if not unit or not area then
60852: LD_VAR 0 1
60856: NOT
60857: PUSH
60858: LD_VAR 0 2
60862: NOT
60863: OR
60864: IFFALSE 60868
// exit ;
60866: GO 61032
// tmp := AreaToList ( area , i ) ;
60868: LD_ADDR_VAR 0 6
60872: PUSH
60873: LD_VAR 0 2
60877: PPUSH
60878: LD_VAR 0 5
60882: PPUSH
60883: CALL_OW 517
60887: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60888: LD_ADDR_VAR 0 5
60892: PUSH
60893: DOUBLE
60894: LD_INT 1
60896: DEC
60897: ST_TO_ADDR
60898: LD_VAR 0 6
60902: PUSH
60903: LD_INT 1
60905: ARRAY
60906: PUSH
60907: FOR_TO
60908: IFFALSE 61030
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60910: LD_ADDR_VAR 0 7
60914: PUSH
60915: LD_VAR 0 6
60919: PUSH
60920: LD_INT 1
60922: ARRAY
60923: PUSH
60924: LD_VAR 0 5
60928: ARRAY
60929: PUSH
60930: LD_VAR 0 6
60934: PUSH
60935: LD_INT 2
60937: ARRAY
60938: PUSH
60939: LD_VAR 0 5
60943: ARRAY
60944: PUSH
60945: EMPTY
60946: LIST
60947: LIST
60948: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60949: LD_VAR 0 7
60953: PUSH
60954: LD_INT 1
60956: ARRAY
60957: PPUSH
60958: LD_VAR 0 7
60962: PUSH
60963: LD_INT 2
60965: ARRAY
60966: PPUSH
60967: CALL_OW 428
60971: PUSH
60972: LD_INT 0
60974: EQUAL
60975: IFFALSE 61028
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60977: LD_VAR 0 1
60981: PPUSH
60982: LD_VAR 0 7
60986: PUSH
60987: LD_INT 1
60989: ARRAY
60990: PPUSH
60991: LD_VAR 0 7
60995: PUSH
60996: LD_INT 2
60998: ARRAY
60999: PPUSH
61000: LD_VAR 0 3
61004: PPUSH
61005: CALL_OW 48
// result := IsPlaced ( unit ) ;
61009: LD_ADDR_VAR 0 4
61013: PUSH
61014: LD_VAR 0 1
61018: PPUSH
61019: CALL_OW 305
61023: ST_TO_ADDR
// exit ;
61024: POP
61025: POP
61026: GO 61032
// end ; end ;
61028: GO 60907
61030: POP
61031: POP
// end ;
61032: LD_VAR 0 4
61036: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61037: LD_INT 0
61039: PPUSH
61040: PPUSH
61041: PPUSH
// if not side or side > 8 then
61042: LD_VAR 0 1
61046: NOT
61047: PUSH
61048: LD_VAR 0 1
61052: PUSH
61053: LD_INT 8
61055: GREATER
61056: OR
61057: IFFALSE 61061
// exit ;
61059: GO 61248
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61061: LD_ADDR_VAR 0 4
61065: PUSH
61066: LD_INT 22
61068: PUSH
61069: LD_VAR 0 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 21
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PPUSH
61092: CALL_OW 69
61096: ST_TO_ADDR
// if not tmp then
61097: LD_VAR 0 4
61101: NOT
61102: IFFALSE 61106
// exit ;
61104: GO 61248
// enable_addtolog := true ;
61106: LD_ADDR_OWVAR 81
61110: PUSH
61111: LD_INT 1
61113: ST_TO_ADDR
// AddToLog ( [ ) ;
61114: LD_STRING [
61116: PPUSH
61117: CALL_OW 561
// for i in tmp do
61121: LD_ADDR_VAR 0 3
61125: PUSH
61126: LD_VAR 0 4
61130: PUSH
61131: FOR_IN
61132: IFFALSE 61239
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61134: LD_STRING [
61136: PUSH
61137: LD_VAR 0 3
61141: PPUSH
61142: CALL_OW 266
61146: STR
61147: PUSH
61148: LD_STRING , 
61150: STR
61151: PUSH
61152: LD_VAR 0 3
61156: PPUSH
61157: CALL_OW 250
61161: STR
61162: PUSH
61163: LD_STRING , 
61165: STR
61166: PUSH
61167: LD_VAR 0 3
61171: PPUSH
61172: CALL_OW 251
61176: STR
61177: PUSH
61178: LD_STRING , 
61180: STR
61181: PUSH
61182: LD_VAR 0 3
61186: PPUSH
61187: CALL_OW 254
61191: STR
61192: PUSH
61193: LD_STRING , 
61195: STR
61196: PUSH
61197: LD_VAR 0 3
61201: PPUSH
61202: LD_INT 1
61204: PPUSH
61205: CALL_OW 268
61209: STR
61210: PUSH
61211: LD_STRING , 
61213: STR
61214: PUSH
61215: LD_VAR 0 3
61219: PPUSH
61220: LD_INT 2
61222: PPUSH
61223: CALL_OW 268
61227: STR
61228: PUSH
61229: LD_STRING ],
61231: STR
61232: PPUSH
61233: CALL_OW 561
// end ;
61237: GO 61131
61239: POP
61240: POP
// AddToLog ( ]; ) ;
61241: LD_STRING ];
61243: PPUSH
61244: CALL_OW 561
// end ;
61248: LD_VAR 0 2
61252: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61253: LD_INT 0
61255: PPUSH
61256: PPUSH
61257: PPUSH
61258: PPUSH
61259: PPUSH
// if not area or not rate or not max then
61260: LD_VAR 0 1
61264: NOT
61265: PUSH
61266: LD_VAR 0 2
61270: NOT
61271: OR
61272: PUSH
61273: LD_VAR 0 4
61277: NOT
61278: OR
61279: IFFALSE 61283
// exit ;
61281: GO 61475
// while 1 do
61283: LD_INT 1
61285: IFFALSE 61475
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61287: LD_ADDR_VAR 0 9
61291: PUSH
61292: LD_VAR 0 1
61296: PPUSH
61297: LD_INT 1
61299: PPUSH
61300: CALL_OW 287
61304: PUSH
61305: LD_INT 10
61307: MUL
61308: ST_TO_ADDR
// r := rate / 10 ;
61309: LD_ADDR_VAR 0 7
61313: PUSH
61314: LD_VAR 0 2
61318: PUSH
61319: LD_INT 10
61321: DIVREAL
61322: ST_TO_ADDR
// time := 1 1$00 ;
61323: LD_ADDR_VAR 0 8
61327: PUSH
61328: LD_INT 2100
61330: ST_TO_ADDR
// if amount < min then
61331: LD_VAR 0 9
61335: PUSH
61336: LD_VAR 0 3
61340: LESS
61341: IFFALSE 61359
// r := r * 2 else
61343: LD_ADDR_VAR 0 7
61347: PUSH
61348: LD_VAR 0 7
61352: PUSH
61353: LD_INT 2
61355: MUL
61356: ST_TO_ADDR
61357: GO 61385
// if amount > max then
61359: LD_VAR 0 9
61363: PUSH
61364: LD_VAR 0 4
61368: GREATER
61369: IFFALSE 61385
// r := r / 2 ;
61371: LD_ADDR_VAR 0 7
61375: PUSH
61376: LD_VAR 0 7
61380: PUSH
61381: LD_INT 2
61383: DIVREAL
61384: ST_TO_ADDR
// time := time / r ;
61385: LD_ADDR_VAR 0 8
61389: PUSH
61390: LD_VAR 0 8
61394: PUSH
61395: LD_VAR 0 7
61399: DIVREAL
61400: ST_TO_ADDR
// if time < 0 then
61401: LD_VAR 0 8
61405: PUSH
61406: LD_INT 0
61408: LESS
61409: IFFALSE 61426
// time := time * - 1 ;
61411: LD_ADDR_VAR 0 8
61415: PUSH
61416: LD_VAR 0 8
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: MUL
61425: ST_TO_ADDR
// wait ( time ) ;
61426: LD_VAR 0 8
61430: PPUSH
61431: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61435: LD_INT 35
61437: PPUSH
61438: LD_INT 875
61440: PPUSH
61441: CALL_OW 12
61445: PPUSH
61446: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61450: LD_INT 1
61452: PPUSH
61453: LD_INT 5
61455: PPUSH
61456: CALL_OW 12
61460: PPUSH
61461: LD_VAR 0 1
61465: PPUSH
61466: LD_INT 1
61468: PPUSH
61469: CALL_OW 55
// end ;
61473: GO 61283
// end ;
61475: LD_VAR 0 5
61479: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61480: LD_INT 0
61482: PPUSH
61483: PPUSH
61484: PPUSH
61485: PPUSH
61486: PPUSH
61487: PPUSH
61488: PPUSH
61489: PPUSH
// if not turrets or not factories then
61490: LD_VAR 0 1
61494: NOT
61495: PUSH
61496: LD_VAR 0 2
61500: NOT
61501: OR
61502: IFFALSE 61506
// exit ;
61504: GO 61813
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61506: LD_ADDR_VAR 0 10
61510: PUSH
61511: LD_INT 5
61513: PUSH
61514: LD_INT 6
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 2
61523: PUSH
61524: LD_INT 4
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 3
61533: PUSH
61534: LD_INT 5
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 24
61548: PUSH
61549: LD_INT 25
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 23
61558: PUSH
61559: LD_INT 27
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 42
61572: PUSH
61573: LD_INT 43
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 44
61582: PUSH
61583: LD_INT 46
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 45
61592: PUSH
61593: LD_INT 47
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: ST_TO_ADDR
// result := [ ] ;
61610: LD_ADDR_VAR 0 3
61614: PUSH
61615: EMPTY
61616: ST_TO_ADDR
// for i in turrets do
61617: LD_ADDR_VAR 0 4
61621: PUSH
61622: LD_VAR 0 1
61626: PUSH
61627: FOR_IN
61628: IFFALSE 61811
// begin nat := GetNation ( i ) ;
61630: LD_ADDR_VAR 0 7
61634: PUSH
61635: LD_VAR 0 4
61639: PPUSH
61640: CALL_OW 248
61644: ST_TO_ADDR
// weapon := 0 ;
61645: LD_ADDR_VAR 0 8
61649: PUSH
61650: LD_INT 0
61652: ST_TO_ADDR
// if not nat then
61653: LD_VAR 0 7
61657: NOT
61658: IFFALSE 61662
// continue ;
61660: GO 61627
// for j in list [ nat ] do
61662: LD_ADDR_VAR 0 5
61666: PUSH
61667: LD_VAR 0 10
61671: PUSH
61672: LD_VAR 0 7
61676: ARRAY
61677: PUSH
61678: FOR_IN
61679: IFFALSE 61720
// if GetBWeapon ( i ) = j [ 1 ] then
61681: LD_VAR 0 4
61685: PPUSH
61686: CALL_OW 269
61690: PUSH
61691: LD_VAR 0 5
61695: PUSH
61696: LD_INT 1
61698: ARRAY
61699: EQUAL
61700: IFFALSE 61718
// begin weapon := j [ 2 ] ;
61702: LD_ADDR_VAR 0 8
61706: PUSH
61707: LD_VAR 0 5
61711: PUSH
61712: LD_INT 2
61714: ARRAY
61715: ST_TO_ADDR
// break ;
61716: GO 61720
// end ;
61718: GO 61678
61720: POP
61721: POP
// if not weapon then
61722: LD_VAR 0 8
61726: NOT
61727: IFFALSE 61731
// continue ;
61729: GO 61627
// for k in factories do
61731: LD_ADDR_VAR 0 6
61735: PUSH
61736: LD_VAR 0 2
61740: PUSH
61741: FOR_IN
61742: IFFALSE 61807
// begin weapons := AvailableWeaponList ( k ) ;
61744: LD_ADDR_VAR 0 9
61748: PUSH
61749: LD_VAR 0 6
61753: PPUSH
61754: CALL_OW 478
61758: ST_TO_ADDR
// if not weapons then
61759: LD_VAR 0 9
61763: NOT
61764: IFFALSE 61768
// continue ;
61766: GO 61741
// if weapon in weapons then
61768: LD_VAR 0 8
61772: PUSH
61773: LD_VAR 0 9
61777: IN
61778: IFFALSE 61805
// begin result := [ i , weapon ] ;
61780: LD_ADDR_VAR 0 3
61784: PUSH
61785: LD_VAR 0 4
61789: PUSH
61790: LD_VAR 0 8
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// exit ;
61799: POP
61800: POP
61801: POP
61802: POP
61803: GO 61813
// end ; end ;
61805: GO 61741
61807: POP
61808: POP
// end ;
61809: GO 61627
61811: POP
61812: POP
// end ;
61813: LD_VAR 0 3
61817: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61818: LD_INT 0
61820: PPUSH
// if not side or side > 8 then
61821: LD_VAR 0 3
61825: NOT
61826: PUSH
61827: LD_VAR 0 3
61831: PUSH
61832: LD_INT 8
61834: GREATER
61835: OR
61836: IFFALSE 61840
// exit ;
61838: GO 61899
// if not range then
61840: LD_VAR 0 4
61844: NOT
61845: IFFALSE 61856
// range := - 12 ;
61847: LD_ADDR_VAR 0 4
61851: PUSH
61852: LD_INT 12
61854: NEG
61855: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61856: LD_VAR 0 1
61860: PPUSH
61861: LD_VAR 0 2
61865: PPUSH
61866: LD_VAR 0 3
61870: PPUSH
61871: LD_VAR 0 4
61875: PPUSH
61876: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61880: LD_VAR 0 1
61884: PPUSH
61885: LD_VAR 0 2
61889: PPUSH
61890: LD_VAR 0 3
61894: PPUSH
61895: CALL_OW 331
// end ;
61899: LD_VAR 0 5
61903: RET
// export function Video ( mode ) ; begin
61904: LD_INT 0
61906: PPUSH
// ingame_video = mode ;
61907: LD_ADDR_OWVAR 52
61911: PUSH
61912: LD_VAR 0 1
61916: ST_TO_ADDR
// interface_hidden = mode ;
61917: LD_ADDR_OWVAR 54
61921: PUSH
61922: LD_VAR 0 1
61926: ST_TO_ADDR
// end ;
61927: LD_VAR 0 2
61931: RET
// export function Join ( array , element ) ; begin
61932: LD_INT 0
61934: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61935: LD_ADDR_VAR 0 3
61939: PUSH
61940: LD_VAR 0 1
61944: PPUSH
61945: LD_VAR 0 1
61949: PUSH
61950: LD_INT 1
61952: PLUS
61953: PPUSH
61954: LD_VAR 0 2
61958: PPUSH
61959: CALL_OW 1
61963: ST_TO_ADDR
// end ;
61964: LD_VAR 0 3
61968: RET
// export function JoinUnion ( array , element ) ; begin
61969: LD_INT 0
61971: PPUSH
// result := array union element ;
61972: LD_ADDR_VAR 0 3
61976: PUSH
61977: LD_VAR 0 1
61981: PUSH
61982: LD_VAR 0 2
61986: UNION
61987: ST_TO_ADDR
// end ;
61988: LD_VAR 0 3
61992: RET
// export function GetBehemoths ( side ) ; begin
61993: LD_INT 0
61995: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
61996: LD_ADDR_VAR 0 2
62000: PUSH
62001: LD_INT 22
62003: PUSH
62004: LD_VAR 0 1
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: LD_INT 31
62015: PUSH
62016: LD_INT 25
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PPUSH
62027: CALL_OW 69
62031: ST_TO_ADDR
// end ;
62032: LD_VAR 0 2
62036: RET
// export function Shuffle ( array ) ; var i , index ; begin
62037: LD_INT 0
62039: PPUSH
62040: PPUSH
62041: PPUSH
// result := [ ] ;
62042: LD_ADDR_VAR 0 2
62046: PUSH
62047: EMPTY
62048: ST_TO_ADDR
// if not array then
62049: LD_VAR 0 1
62053: NOT
62054: IFFALSE 62058
// exit ;
62056: GO 62157
// Randomize ;
62058: CALL_OW 10
// for i = array downto 1 do
62062: LD_ADDR_VAR 0 3
62066: PUSH
62067: DOUBLE
62068: LD_VAR 0 1
62072: INC
62073: ST_TO_ADDR
62074: LD_INT 1
62076: PUSH
62077: FOR_DOWNTO
62078: IFFALSE 62155
// begin index := rand ( 1 , array ) ;
62080: LD_ADDR_VAR 0 4
62084: PUSH
62085: LD_INT 1
62087: PPUSH
62088: LD_VAR 0 1
62092: PPUSH
62093: CALL_OW 12
62097: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62098: LD_ADDR_VAR 0 2
62102: PUSH
62103: LD_VAR 0 2
62107: PPUSH
62108: LD_VAR 0 2
62112: PUSH
62113: LD_INT 1
62115: PLUS
62116: PPUSH
62117: LD_VAR 0 1
62121: PUSH
62122: LD_VAR 0 4
62126: ARRAY
62127: PPUSH
62128: CALL_OW 2
62132: ST_TO_ADDR
// array := Delete ( array , index ) ;
62133: LD_ADDR_VAR 0 1
62137: PUSH
62138: LD_VAR 0 1
62142: PPUSH
62143: LD_VAR 0 4
62147: PPUSH
62148: CALL_OW 3
62152: ST_TO_ADDR
// end ;
62153: GO 62077
62155: POP
62156: POP
// end ;
62157: LD_VAR 0 2
62161: RET
// export function GetBaseMaterials ( base ) ; begin
62162: LD_INT 0
62164: PPUSH
// result := [ 0 , 0 , 0 ] ;
62165: LD_ADDR_VAR 0 2
62169: PUSH
62170: LD_INT 0
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: LIST
62183: ST_TO_ADDR
// if not base then
62184: LD_VAR 0 1
62188: NOT
62189: IFFALSE 62193
// exit ;
62191: GO 62242
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62193: LD_ADDR_VAR 0 2
62197: PUSH
62198: LD_VAR 0 1
62202: PPUSH
62203: LD_INT 1
62205: PPUSH
62206: CALL_OW 275
62210: PUSH
62211: LD_VAR 0 1
62215: PPUSH
62216: LD_INT 2
62218: PPUSH
62219: CALL_OW 275
62223: PUSH
62224: LD_VAR 0 1
62228: PPUSH
62229: LD_INT 3
62231: PPUSH
62232: CALL_OW 275
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: LIST
62241: ST_TO_ADDR
// end ;
62242: LD_VAR 0 2
62246: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62247: LD_INT 0
62249: PPUSH
62250: PPUSH
// result := array ;
62251: LD_ADDR_VAR 0 3
62255: PUSH
62256: LD_VAR 0 1
62260: ST_TO_ADDR
// if size > 0 then
62261: LD_VAR 0 2
62265: PUSH
62266: LD_INT 0
62268: GREATER
62269: IFFALSE 62315
// for i := array downto size do
62271: LD_ADDR_VAR 0 4
62275: PUSH
62276: DOUBLE
62277: LD_VAR 0 1
62281: INC
62282: ST_TO_ADDR
62283: LD_VAR 0 2
62287: PUSH
62288: FOR_DOWNTO
62289: IFFALSE 62313
// result := Delete ( result , result ) ;
62291: LD_ADDR_VAR 0 3
62295: PUSH
62296: LD_VAR 0 3
62300: PPUSH
62301: LD_VAR 0 3
62305: PPUSH
62306: CALL_OW 3
62310: ST_TO_ADDR
62311: GO 62288
62313: POP
62314: POP
// end ;
62315: LD_VAR 0 3
62319: RET
// export function ComExit ( unit ) ; var tmp ; begin
62320: LD_INT 0
62322: PPUSH
62323: PPUSH
// if not IsInUnit ( unit ) then
62324: LD_VAR 0 1
62328: PPUSH
62329: CALL_OW 310
62333: NOT
62334: IFFALSE 62338
// exit ;
62336: GO 62398
// tmp := IsInUnit ( unit ) ;
62338: LD_ADDR_VAR 0 3
62342: PUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: CALL_OW 310
62352: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62353: LD_VAR 0 3
62357: PPUSH
62358: CALL_OW 247
62362: PUSH
62363: LD_INT 2
62365: EQUAL
62366: IFFALSE 62379
// ComExitVehicle ( unit ) else
62368: LD_VAR 0 1
62372: PPUSH
62373: CALL_OW 121
62377: GO 62388
// ComExitBuilding ( unit ) ;
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 122
// result := tmp ;
62388: LD_ADDR_VAR 0 2
62392: PUSH
62393: LD_VAR 0 3
62397: ST_TO_ADDR
// end ;
62398: LD_VAR 0 2
62402: RET
// export function ComExitAll ( units ) ; var i ; begin
62403: LD_INT 0
62405: PPUSH
62406: PPUSH
// if not units then
62407: LD_VAR 0 1
62411: NOT
62412: IFFALSE 62416
// exit ;
62414: GO 62442
// for i in units do
62416: LD_ADDR_VAR 0 3
62420: PUSH
62421: LD_VAR 0 1
62425: PUSH
62426: FOR_IN
62427: IFFALSE 62440
// ComExit ( i ) ;
62429: LD_VAR 0 3
62433: PPUSH
62434: CALL 62320 0 1
62438: GO 62426
62440: POP
62441: POP
// end ;
62442: LD_VAR 0 2
62446: RET
// export function ResetHc ; begin
62447: LD_INT 0
62449: PPUSH
// InitHc ;
62450: CALL_OW 19
// hc_importance := 0 ;
62454: LD_ADDR_OWVAR 32
62458: PUSH
62459: LD_INT 0
62461: ST_TO_ADDR
// end ;
62462: LD_VAR 0 1
62466: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62467: LD_INT 0
62469: PPUSH
62470: PPUSH
62471: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62472: LD_ADDR_VAR 0 6
62476: PUSH
62477: LD_VAR 0 1
62481: PUSH
62482: LD_VAR 0 3
62486: PLUS
62487: PUSH
62488: LD_INT 2
62490: DIV
62491: ST_TO_ADDR
// if _x < 0 then
62492: LD_VAR 0 6
62496: PUSH
62497: LD_INT 0
62499: LESS
62500: IFFALSE 62517
// _x := _x * - 1 ;
62502: LD_ADDR_VAR 0 6
62506: PUSH
62507: LD_VAR 0 6
62511: PUSH
62512: LD_INT 1
62514: NEG
62515: MUL
62516: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62517: LD_ADDR_VAR 0 7
62521: PUSH
62522: LD_VAR 0 2
62526: PUSH
62527: LD_VAR 0 4
62531: PLUS
62532: PUSH
62533: LD_INT 2
62535: DIV
62536: ST_TO_ADDR
// if _y < 0 then
62537: LD_VAR 0 7
62541: PUSH
62542: LD_INT 0
62544: LESS
62545: IFFALSE 62562
// _y := _y * - 1 ;
62547: LD_ADDR_VAR 0 7
62551: PUSH
62552: LD_VAR 0 7
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: MUL
62561: ST_TO_ADDR
// result := [ _x , _y ] ;
62562: LD_ADDR_VAR 0 5
62566: PUSH
62567: LD_VAR 0 6
62571: PUSH
62572: LD_VAR 0 7
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: ST_TO_ADDR
// end ;
62581: LD_VAR 0 5
62585: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62586: LD_INT 0
62588: PPUSH
62589: PPUSH
62590: PPUSH
62591: PPUSH
// task := GetTaskList ( unit ) ;
62592: LD_ADDR_VAR 0 7
62596: PUSH
62597: LD_VAR 0 1
62601: PPUSH
62602: CALL_OW 437
62606: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62607: LD_VAR 0 7
62611: NOT
62612: PUSH
62613: LD_VAR 0 1
62617: PPUSH
62618: LD_VAR 0 2
62622: PPUSH
62623: CALL_OW 308
62627: NOT
62628: AND
62629: IFFALSE 62633
// exit ;
62631: GO 62751
// if IsInArea ( unit , area ) then
62633: LD_VAR 0 1
62637: PPUSH
62638: LD_VAR 0 2
62642: PPUSH
62643: CALL_OW 308
62647: IFFALSE 62665
// begin ComMoveToArea ( unit , goAway ) ;
62649: LD_VAR 0 1
62653: PPUSH
62654: LD_VAR 0 3
62658: PPUSH
62659: CALL_OW 113
// exit ;
62663: GO 62751
// end ; if task [ 1 ] [ 1 ] <> M then
62665: LD_VAR 0 7
62669: PUSH
62670: LD_INT 1
62672: ARRAY
62673: PUSH
62674: LD_INT 1
62676: ARRAY
62677: PUSH
62678: LD_STRING M
62680: NONEQUAL
62681: IFFALSE 62685
// exit ;
62683: GO 62751
// x := task [ 1 ] [ 2 ] ;
62685: LD_ADDR_VAR 0 5
62689: PUSH
62690: LD_VAR 0 7
62694: PUSH
62695: LD_INT 1
62697: ARRAY
62698: PUSH
62699: LD_INT 2
62701: ARRAY
62702: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62703: LD_ADDR_VAR 0 6
62707: PUSH
62708: LD_VAR 0 7
62712: PUSH
62713: LD_INT 1
62715: ARRAY
62716: PUSH
62717: LD_INT 3
62719: ARRAY
62720: ST_TO_ADDR
// if InArea ( x , y , area ) then
62721: LD_VAR 0 5
62725: PPUSH
62726: LD_VAR 0 6
62730: PPUSH
62731: LD_VAR 0 2
62735: PPUSH
62736: CALL_OW 309
62740: IFFALSE 62751
// ComStop ( unit ) ;
62742: LD_VAR 0 1
62746: PPUSH
62747: CALL_OW 141
// end ;
62751: LD_VAR 0 4
62755: RET
// export function Abs ( value ) ; begin
62756: LD_INT 0
62758: PPUSH
// result := value ;
62759: LD_ADDR_VAR 0 2
62763: PUSH
62764: LD_VAR 0 1
62768: ST_TO_ADDR
// if value < 0 then
62769: LD_VAR 0 1
62773: PUSH
62774: LD_INT 0
62776: LESS
62777: IFFALSE 62794
// result := value * - 1 ;
62779: LD_ADDR_VAR 0 2
62783: PUSH
62784: LD_VAR 0 1
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: MUL
62793: ST_TO_ADDR
// end ;
62794: LD_VAR 0 2
62798: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62799: LD_INT 0
62801: PPUSH
62802: PPUSH
62803: PPUSH
62804: PPUSH
62805: PPUSH
62806: PPUSH
62807: PPUSH
62808: PPUSH
// if not unit or not building then
62809: LD_VAR 0 1
62813: NOT
62814: PUSH
62815: LD_VAR 0 2
62819: NOT
62820: OR
62821: IFFALSE 62825
// exit ;
62823: GO 63051
// x := GetX ( building ) ;
62825: LD_ADDR_VAR 0 4
62829: PUSH
62830: LD_VAR 0 2
62834: PPUSH
62835: CALL_OW 250
62839: ST_TO_ADDR
// y := GetY ( building ) ;
62840: LD_ADDR_VAR 0 6
62844: PUSH
62845: LD_VAR 0 2
62849: PPUSH
62850: CALL_OW 251
62854: ST_TO_ADDR
// d := GetDir ( building ) ;
62855: LD_ADDR_VAR 0 8
62859: PUSH
62860: LD_VAR 0 2
62864: PPUSH
62865: CALL_OW 254
62869: ST_TO_ADDR
// r := 4 ;
62870: LD_ADDR_VAR 0 9
62874: PUSH
62875: LD_INT 4
62877: ST_TO_ADDR
// for i := 1 to 5 do
62878: LD_ADDR_VAR 0 10
62882: PUSH
62883: DOUBLE
62884: LD_INT 1
62886: DEC
62887: ST_TO_ADDR
62888: LD_INT 5
62890: PUSH
62891: FOR_TO
62892: IFFALSE 63049
// begin _x := ShiftX ( x , d , r + i ) ;
62894: LD_ADDR_VAR 0 5
62898: PUSH
62899: LD_VAR 0 4
62903: PPUSH
62904: LD_VAR 0 8
62908: PPUSH
62909: LD_VAR 0 9
62913: PUSH
62914: LD_VAR 0 10
62918: PLUS
62919: PPUSH
62920: CALL_OW 272
62924: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62925: LD_ADDR_VAR 0 7
62929: PUSH
62930: LD_VAR 0 6
62934: PPUSH
62935: LD_VAR 0 8
62939: PPUSH
62940: LD_VAR 0 9
62944: PUSH
62945: LD_VAR 0 10
62949: PLUS
62950: PPUSH
62951: CALL_OW 273
62955: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62956: LD_VAR 0 5
62960: PPUSH
62961: LD_VAR 0 7
62965: PPUSH
62966: CALL_OW 488
62970: PUSH
62971: LD_VAR 0 5
62975: PPUSH
62976: LD_VAR 0 7
62980: PPUSH
62981: CALL_OW 428
62985: PPUSH
62986: CALL_OW 247
62990: PUSH
62991: LD_INT 3
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: IN
63001: NOT
63002: AND
63003: IFFALSE 63047
// begin ComMoveXY ( unit , _x , _y ) ;
63005: LD_VAR 0 1
63009: PPUSH
63010: LD_VAR 0 5
63014: PPUSH
63015: LD_VAR 0 7
63019: PPUSH
63020: CALL_OW 111
// result := [ _x , _y ] ;
63024: LD_ADDR_VAR 0 3
63028: PUSH
63029: LD_VAR 0 5
63033: PUSH
63034: LD_VAR 0 7
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: ST_TO_ADDR
// exit ;
63043: POP
63044: POP
63045: GO 63051
// end ; end ;
63047: GO 62891
63049: POP
63050: POP
// end ;
63051: LD_VAR 0 3
63055: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
63056: LD_INT 0
63058: PPUSH
63059: PPUSH
63060: PPUSH
// result := 0 ;
63061: LD_ADDR_VAR 0 3
63065: PUSH
63066: LD_INT 0
63068: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
63069: LD_VAR 0 1
63073: PUSH
63074: LD_INT 0
63076: LESS
63077: PUSH
63078: LD_VAR 0 1
63082: PUSH
63083: LD_INT 8
63085: GREATER
63086: OR
63087: PUSH
63088: LD_VAR 0 2
63092: PUSH
63093: LD_INT 0
63095: LESS
63096: OR
63097: PUSH
63098: LD_VAR 0 2
63102: PUSH
63103: LD_INT 8
63105: GREATER
63106: OR
63107: IFFALSE 63111
// exit ;
63109: GO 63186
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
63111: LD_ADDR_VAR 0 4
63115: PUSH
63116: LD_INT 22
63118: PUSH
63119: LD_VAR 0 2
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PPUSH
63128: CALL_OW 69
63132: PUSH
63133: FOR_IN
63134: IFFALSE 63184
// begin un := UnitShoot ( i ) ;
63136: LD_ADDR_VAR 0 5
63140: PUSH
63141: LD_VAR 0 4
63145: PPUSH
63146: CALL_OW 504
63150: ST_TO_ADDR
// if GetSide ( un ) = side1 then
63151: LD_VAR 0 5
63155: PPUSH
63156: CALL_OW 255
63160: PUSH
63161: LD_VAR 0 1
63165: EQUAL
63166: IFFALSE 63182
// begin result := un ;
63168: LD_ADDR_VAR 0 3
63172: PUSH
63173: LD_VAR 0 5
63177: ST_TO_ADDR
// exit ;
63178: POP
63179: POP
63180: GO 63186
// end ; end ;
63182: GO 63133
63184: POP
63185: POP
// end ;
63186: LD_VAR 0 3
63190: RET
// export function GetCargoBay ( units ) ; begin
63191: LD_INT 0
63193: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
63194: LD_ADDR_VAR 0 2
63198: PUSH
63199: LD_VAR 0 1
63203: PPUSH
63204: LD_INT 2
63206: PUSH
63207: LD_INT 34
63209: PUSH
63210: LD_INT 12
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 34
63219: PUSH
63220: LD_INT 51
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 34
63229: PUSH
63230: LD_INT 32
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 34
63239: PUSH
63240: LD_EXP 25
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: LIST
63255: PPUSH
63256: CALL_OW 72
63260: ST_TO_ADDR
// end ;
63261: LD_VAR 0 2
63265: RET
// export function Negate ( value ) ; begin
63266: LD_INT 0
63268: PPUSH
// result := not value ;
63269: LD_ADDR_VAR 0 2
63273: PUSH
63274: LD_VAR 0 1
63278: NOT
63279: ST_TO_ADDR
// end ;
63280: LD_VAR 0 2
63284: RET
// export function Inc ( value ) ; begin
63285: LD_INT 0
63287: PPUSH
// result := value + 1 ;
63288: LD_ADDR_VAR 0 2
63292: PUSH
63293: LD_VAR 0 1
63297: PUSH
63298: LD_INT 1
63300: PLUS
63301: ST_TO_ADDR
// end ;
63302: LD_VAR 0 2
63306: RET
// export function Dec ( value ) ; begin
63307: LD_INT 0
63309: PPUSH
// result := value - 1 ;
63310: LD_ADDR_VAR 0 2
63314: PUSH
63315: LD_VAR 0 1
63319: PUSH
63320: LD_INT 1
63322: MINUS
63323: ST_TO_ADDR
// end ;
63324: LD_VAR 0 2
63328: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63329: LD_INT 0
63331: PPUSH
63332: PPUSH
63333: PPUSH
63334: PPUSH
63335: PPUSH
63336: PPUSH
63337: PPUSH
63338: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63339: LD_VAR 0 1
63343: PPUSH
63344: LD_VAR 0 2
63348: PPUSH
63349: CALL_OW 488
63353: NOT
63354: PUSH
63355: LD_VAR 0 3
63359: PPUSH
63360: LD_VAR 0 4
63364: PPUSH
63365: CALL_OW 488
63369: NOT
63370: OR
63371: IFFALSE 63384
// begin result := - 1 ;
63373: LD_ADDR_VAR 0 5
63377: PUSH
63378: LD_INT 1
63380: NEG
63381: ST_TO_ADDR
// exit ;
63382: GO 63619
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63384: LD_ADDR_VAR 0 12
63388: PUSH
63389: LD_VAR 0 1
63393: PPUSH
63394: LD_VAR 0 2
63398: PPUSH
63399: LD_VAR 0 3
63403: PPUSH
63404: LD_VAR 0 4
63408: PPUSH
63409: CALL 62467 0 4
63413: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63414: LD_ADDR_VAR 0 11
63418: PUSH
63419: LD_VAR 0 1
63423: PPUSH
63424: LD_VAR 0 2
63428: PPUSH
63429: LD_VAR 0 12
63433: PUSH
63434: LD_INT 1
63436: ARRAY
63437: PPUSH
63438: LD_VAR 0 12
63442: PUSH
63443: LD_INT 2
63445: ARRAY
63446: PPUSH
63447: CALL_OW 298
63451: ST_TO_ADDR
// distance := 9999 ;
63452: LD_ADDR_VAR 0 10
63456: PUSH
63457: LD_INT 9999
63459: ST_TO_ADDR
// for i := 0 to 5 do
63460: LD_ADDR_VAR 0 6
63464: PUSH
63465: DOUBLE
63466: LD_INT 0
63468: DEC
63469: ST_TO_ADDR
63470: LD_INT 5
63472: PUSH
63473: FOR_TO
63474: IFFALSE 63617
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63476: LD_ADDR_VAR 0 7
63480: PUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: LD_VAR 0 6
63490: PPUSH
63491: LD_VAR 0 11
63495: PPUSH
63496: CALL_OW 272
63500: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63501: LD_ADDR_VAR 0 8
63505: PUSH
63506: LD_VAR 0 2
63510: PPUSH
63511: LD_VAR 0 6
63515: PPUSH
63516: LD_VAR 0 11
63520: PPUSH
63521: CALL_OW 273
63525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63526: LD_VAR 0 7
63530: PPUSH
63531: LD_VAR 0 8
63535: PPUSH
63536: CALL_OW 488
63540: NOT
63541: IFFALSE 63545
// continue ;
63543: GO 63473
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63545: LD_ADDR_VAR 0 9
63549: PUSH
63550: LD_VAR 0 12
63554: PUSH
63555: LD_INT 1
63557: ARRAY
63558: PPUSH
63559: LD_VAR 0 12
63563: PUSH
63564: LD_INT 2
63566: ARRAY
63567: PPUSH
63568: LD_VAR 0 7
63572: PPUSH
63573: LD_VAR 0 8
63577: PPUSH
63578: CALL_OW 298
63582: ST_TO_ADDR
// if tmp < distance then
63583: LD_VAR 0 9
63587: PUSH
63588: LD_VAR 0 10
63592: LESS
63593: IFFALSE 63615
// begin result := i ;
63595: LD_ADDR_VAR 0 5
63599: PUSH
63600: LD_VAR 0 6
63604: ST_TO_ADDR
// distance := tmp ;
63605: LD_ADDR_VAR 0 10
63609: PUSH
63610: LD_VAR 0 9
63614: ST_TO_ADDR
// end ; end ;
63615: GO 63473
63617: POP
63618: POP
// end ;
63619: LD_VAR 0 5
63623: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63624: LD_INT 0
63626: PPUSH
63627: PPUSH
// if not driver or not IsInUnit ( driver ) then
63628: LD_VAR 0 1
63632: NOT
63633: PUSH
63634: LD_VAR 0 1
63638: PPUSH
63639: CALL_OW 310
63643: NOT
63644: OR
63645: IFFALSE 63649
// exit ;
63647: GO 63739
// vehicle := IsInUnit ( driver ) ;
63649: LD_ADDR_VAR 0 3
63653: PUSH
63654: LD_VAR 0 1
63658: PPUSH
63659: CALL_OW 310
63663: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63664: LD_VAR 0 1
63668: PPUSH
63669: LD_STRING \
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: LD_INT 0
63677: PUSH
63678: LD_INT 0
63680: PUSH
63681: LD_INT 0
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: PUSH
63699: LD_STRING E
63701: PUSH
63702: LD_INT 0
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_VAR 0 3
63712: PUSH
63713: LD_INT 0
63715: PUSH
63716: LD_INT 0
63718: PUSH
63719: LD_INT 0
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PPUSH
63735: CALL_OW 446
// end ;
63739: LD_VAR 0 2
63743: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63744: LD_INT 0
63746: PPUSH
63747: PPUSH
// if not driver or not IsInUnit ( driver ) then
63748: LD_VAR 0 1
63752: NOT
63753: PUSH
63754: LD_VAR 0 1
63758: PPUSH
63759: CALL_OW 310
63763: NOT
63764: OR
63765: IFFALSE 63769
// exit ;
63767: GO 63859
// vehicle := IsInUnit ( driver ) ;
63769: LD_ADDR_VAR 0 3
63773: PUSH
63774: LD_VAR 0 1
63778: PPUSH
63779: CALL_OW 310
63783: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63784: LD_VAR 0 1
63788: PPUSH
63789: LD_STRING \
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 0
63797: PUSH
63798: LD_INT 0
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: LD_INT 0
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: LIST
63814: LIST
63815: LIST
63816: LIST
63817: LIST
63818: PUSH
63819: LD_STRING E
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_VAR 0 3
63832: PUSH
63833: LD_INT 0
63835: PUSH
63836: LD_INT 0
63838: PUSH
63839: LD_INT 0
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: LIST
63846: LIST
63847: LIST
63848: LIST
63849: LIST
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PPUSH
63855: CALL_OW 447
// end ;
63859: LD_VAR 0 2
63863: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63864: LD_INT 0
63866: PPUSH
63867: PPUSH
63868: PPUSH
// tmp := [ ] ;
63869: LD_ADDR_VAR 0 5
63873: PUSH
63874: EMPTY
63875: ST_TO_ADDR
// for i in units do
63876: LD_ADDR_VAR 0 4
63880: PUSH
63881: LD_VAR 0 1
63885: PUSH
63886: FOR_IN
63887: IFFALSE 63925
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63889: LD_ADDR_VAR 0 5
63893: PUSH
63894: LD_VAR 0 5
63898: PPUSH
63899: LD_VAR 0 5
63903: PUSH
63904: LD_INT 1
63906: PLUS
63907: PPUSH
63908: LD_VAR 0 4
63912: PPUSH
63913: CALL_OW 256
63917: PPUSH
63918: CALL_OW 2
63922: ST_TO_ADDR
63923: GO 63886
63925: POP
63926: POP
// if not tmp then
63927: LD_VAR 0 5
63931: NOT
63932: IFFALSE 63936
// exit ;
63934: GO 63984
// if asc then
63936: LD_VAR 0 2
63940: IFFALSE 63964
// result := SortListByListAsc ( units , tmp ) else
63942: LD_ADDR_VAR 0 3
63946: PUSH
63947: LD_VAR 0 1
63951: PPUSH
63952: LD_VAR 0 5
63956: PPUSH
63957: CALL_OW 76
63961: ST_TO_ADDR
63962: GO 63984
// result := SortListByListDesc ( units , tmp ) ;
63964: LD_ADDR_VAR 0 3
63968: PUSH
63969: LD_VAR 0 1
63973: PPUSH
63974: LD_VAR 0 5
63978: PPUSH
63979: CALL_OW 77
63983: ST_TO_ADDR
// end ;
63984: LD_VAR 0 3
63988: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63989: LD_INT 0
63991: PPUSH
63992: PPUSH
// task := GetTaskList ( mech ) ;
63993: LD_ADDR_VAR 0 4
63997: PUSH
63998: LD_VAR 0 1
64002: PPUSH
64003: CALL_OW 437
64007: ST_TO_ADDR
// if not task then
64008: LD_VAR 0 4
64012: NOT
64013: IFFALSE 64017
// exit ;
64015: GO 64059
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
64017: LD_ADDR_VAR 0 3
64021: PUSH
64022: LD_VAR 0 4
64026: PUSH
64027: LD_INT 1
64029: ARRAY
64030: PUSH
64031: LD_INT 1
64033: ARRAY
64034: PUSH
64035: LD_STRING r
64037: EQUAL
64038: PUSH
64039: LD_VAR 0 4
64043: PUSH
64044: LD_INT 1
64046: ARRAY
64047: PUSH
64048: LD_INT 4
64050: ARRAY
64051: PUSH
64052: LD_VAR 0 2
64056: EQUAL
64057: AND
64058: ST_TO_ADDR
// end ;
64059: LD_VAR 0 3
64063: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
64064: LD_INT 0
64066: PPUSH
// SetDir ( unit , d ) ;
64067: LD_VAR 0 1
64071: PPUSH
64072: LD_VAR 0 4
64076: PPUSH
64077: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
64081: LD_VAR 0 1
64085: PPUSH
64086: LD_VAR 0 2
64090: PPUSH
64091: LD_VAR 0 3
64095: PPUSH
64096: LD_VAR 0 5
64100: PPUSH
64101: CALL_OW 48
// end ;
64105: LD_VAR 0 6
64109: RET
// export function ToNaturalNumber ( number ) ; begin
64110: LD_INT 0
64112: PPUSH
// result := number div 1 ;
64113: LD_ADDR_VAR 0 2
64117: PUSH
64118: LD_VAR 0 1
64122: PUSH
64123: LD_INT 1
64125: DIV
64126: ST_TO_ADDR
// if number < 0 then
64127: LD_VAR 0 1
64131: PUSH
64132: LD_INT 0
64134: LESS
64135: IFFALSE 64145
// result := 0 ;
64137: LD_ADDR_VAR 0 2
64141: PUSH
64142: LD_INT 0
64144: ST_TO_ADDR
// end ;
64145: LD_VAR 0 2
64149: RET
// export function SortByClass ( units , class ) ; var un ; begin
64150: LD_INT 0
64152: PPUSH
64153: PPUSH
// if not units or not class then
64154: LD_VAR 0 1
64158: NOT
64159: PUSH
64160: LD_VAR 0 2
64164: NOT
64165: OR
64166: IFFALSE 64170
// exit ;
64168: GO 64265
// result := [ ] ;
64170: LD_ADDR_VAR 0 3
64174: PUSH
64175: EMPTY
64176: ST_TO_ADDR
// for un in units do
64177: LD_ADDR_VAR 0 4
64181: PUSH
64182: LD_VAR 0 1
64186: PUSH
64187: FOR_IN
64188: IFFALSE 64263
// if GetClass ( un ) = class then
64190: LD_VAR 0 4
64194: PPUSH
64195: CALL_OW 257
64199: PUSH
64200: LD_VAR 0 2
64204: EQUAL
64205: IFFALSE 64232
// result := Insert ( result , 1 , un ) else
64207: LD_ADDR_VAR 0 3
64211: PUSH
64212: LD_VAR 0 3
64216: PPUSH
64217: LD_INT 1
64219: PPUSH
64220: LD_VAR 0 4
64224: PPUSH
64225: CALL_OW 2
64229: ST_TO_ADDR
64230: GO 64261
// result := Replace ( result , result + 1 , un ) ;
64232: LD_ADDR_VAR 0 3
64236: PUSH
64237: LD_VAR 0 3
64241: PPUSH
64242: LD_VAR 0 3
64246: PUSH
64247: LD_INT 1
64249: PLUS
64250: PPUSH
64251: LD_VAR 0 4
64255: PPUSH
64256: CALL_OW 1
64260: ST_TO_ADDR
64261: GO 64187
64263: POP
64264: POP
// end ;
64265: LD_VAR 0 3
64269: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64270: LD_INT 0
64272: PPUSH
64273: PPUSH
64274: PPUSH
64275: PPUSH
64276: PPUSH
64277: PPUSH
64278: PPUSH
// result := [ ] ;
64279: LD_ADDR_VAR 0 4
64283: PUSH
64284: EMPTY
64285: ST_TO_ADDR
// if x - r < 0 then
64286: LD_VAR 0 1
64290: PUSH
64291: LD_VAR 0 3
64295: MINUS
64296: PUSH
64297: LD_INT 0
64299: LESS
64300: IFFALSE 64312
// min_x := 0 else
64302: LD_ADDR_VAR 0 8
64306: PUSH
64307: LD_INT 0
64309: ST_TO_ADDR
64310: GO 64328
// min_x := x - r ;
64312: LD_ADDR_VAR 0 8
64316: PUSH
64317: LD_VAR 0 1
64321: PUSH
64322: LD_VAR 0 3
64326: MINUS
64327: ST_TO_ADDR
// if y - r < 0 then
64328: LD_VAR 0 2
64332: PUSH
64333: LD_VAR 0 3
64337: MINUS
64338: PUSH
64339: LD_INT 0
64341: LESS
64342: IFFALSE 64354
// min_y := 0 else
64344: LD_ADDR_VAR 0 7
64348: PUSH
64349: LD_INT 0
64351: ST_TO_ADDR
64352: GO 64370
// min_y := y - r ;
64354: LD_ADDR_VAR 0 7
64358: PUSH
64359: LD_VAR 0 2
64363: PUSH
64364: LD_VAR 0 3
64368: MINUS
64369: ST_TO_ADDR
// max_x := x + r ;
64370: LD_ADDR_VAR 0 9
64374: PUSH
64375: LD_VAR 0 1
64379: PUSH
64380: LD_VAR 0 3
64384: PLUS
64385: ST_TO_ADDR
// max_y := y + r ;
64386: LD_ADDR_VAR 0 10
64390: PUSH
64391: LD_VAR 0 2
64395: PUSH
64396: LD_VAR 0 3
64400: PLUS
64401: ST_TO_ADDR
// for _x = min_x to max_x do
64402: LD_ADDR_VAR 0 5
64406: PUSH
64407: DOUBLE
64408: LD_VAR 0 8
64412: DEC
64413: ST_TO_ADDR
64414: LD_VAR 0 9
64418: PUSH
64419: FOR_TO
64420: IFFALSE 64521
// for _y = min_y to max_y do
64422: LD_ADDR_VAR 0 6
64426: PUSH
64427: DOUBLE
64428: LD_VAR 0 7
64432: DEC
64433: ST_TO_ADDR
64434: LD_VAR 0 10
64438: PUSH
64439: FOR_TO
64440: IFFALSE 64517
// begin if not ValidHex ( _x , _y ) then
64442: LD_VAR 0 5
64446: PPUSH
64447: LD_VAR 0 6
64451: PPUSH
64452: CALL_OW 488
64456: NOT
64457: IFFALSE 64461
// continue ;
64459: GO 64439
// if GetResourceTypeXY ( _x , _y ) then
64461: LD_VAR 0 5
64465: PPUSH
64466: LD_VAR 0 6
64470: PPUSH
64471: CALL_OW 283
64475: IFFALSE 64515
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64477: LD_ADDR_VAR 0 4
64481: PUSH
64482: LD_VAR 0 4
64486: PPUSH
64487: LD_VAR 0 4
64491: PUSH
64492: LD_INT 1
64494: PLUS
64495: PPUSH
64496: LD_VAR 0 5
64500: PUSH
64501: LD_VAR 0 6
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PPUSH
64510: CALL_OW 1
64514: ST_TO_ADDR
// end ;
64515: GO 64439
64517: POP
64518: POP
64519: GO 64419
64521: POP
64522: POP
// end ;
64523: LD_VAR 0 4
64527: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64528: LD_INT 0
64530: PPUSH
64531: PPUSH
64532: PPUSH
64533: PPUSH
64534: PPUSH
64535: PPUSH
64536: PPUSH
64537: PPUSH
// if not units then
64538: LD_VAR 0 1
64542: NOT
64543: IFFALSE 64547
// exit ;
64545: GO 64972
// result := UnitFilter ( units , [ f_ok ] ) ;
64547: LD_ADDR_VAR 0 3
64551: PUSH
64552: LD_VAR 0 1
64556: PPUSH
64557: LD_INT 50
64559: PUSH
64560: EMPTY
64561: LIST
64562: PPUSH
64563: CALL_OW 72
64567: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64568: LD_ADDR_VAR 0 8
64572: PUSH
64573: LD_VAR 0 1
64577: PUSH
64578: LD_INT 1
64580: ARRAY
64581: PPUSH
64582: CALL_OW 255
64586: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
64587: LD_ADDR_VAR 0 10
64591: PUSH
64592: LD_INT 29
64594: PUSH
64595: LD_EXP 28
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// if not result then
64604: LD_VAR 0 3
64608: NOT
64609: IFFALSE 64613
// exit ;
64611: GO 64972
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64613: LD_ADDR_VAR 0 5
64617: PUSH
64618: LD_INT 81
64620: PUSH
64621: LD_VAR 0 8
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PPUSH
64630: CALL_OW 69
64634: ST_TO_ADDR
// for i in result do
64635: LD_ADDR_VAR 0 4
64639: PUSH
64640: LD_VAR 0 3
64644: PUSH
64645: FOR_IN
64646: IFFALSE 64970
// begin tag := GetTag ( i ) + 1 ;
64648: LD_ADDR_VAR 0 9
64652: PUSH
64653: LD_VAR 0 4
64657: PPUSH
64658: CALL_OW 110
64662: PUSH
64663: LD_INT 1
64665: PLUS
64666: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64667: LD_ADDR_VAR 0 7
64671: PUSH
64672: LD_VAR 0 4
64676: PPUSH
64677: CALL_OW 250
64681: PPUSH
64682: LD_VAR 0 4
64686: PPUSH
64687: CALL_OW 251
64691: PPUSH
64692: LD_INT 6
64694: PPUSH
64695: CALL 64270 0 3
64699: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64700: LD_VAR 0 7
64704: PUSH
64705: LD_VAR 0 4
64709: PPUSH
64710: CALL_OW 264
64714: PUSH
64715: LD_VAR 0 10
64719: IN
64720: NOT
64721: AND
64722: IFFALSE 64761
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64724: LD_VAR 0 4
64728: PPUSH
64729: LD_VAR 0 7
64733: PUSH
64734: LD_INT 1
64736: ARRAY
64737: PUSH
64738: LD_INT 1
64740: ARRAY
64741: PPUSH
64742: LD_VAR 0 7
64746: PUSH
64747: LD_INT 1
64749: ARRAY
64750: PUSH
64751: LD_INT 2
64753: ARRAY
64754: PPUSH
64755: CALL_OW 116
64759: GO 64968
// if path > tag then
64761: LD_VAR 0 2
64765: PUSH
64766: LD_VAR 0 9
64770: GREATER
64771: IFFALSE 64938
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
64773: LD_ADDR_VAR 0 6
64777: PUSH
64778: LD_VAR 0 5
64782: PPUSH
64783: LD_INT 91
64785: PUSH
64786: LD_VAR 0 4
64790: PUSH
64791: LD_INT 12
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: LIST
64798: PPUSH
64799: CALL_OW 72
64803: ST_TO_ADDR
// if nearEnemy then
64804: LD_VAR 0 6
64808: IFFALSE 64836
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64810: LD_VAR 0 4
64814: PPUSH
64815: LD_VAR 0 6
64819: PPUSH
64820: LD_VAR 0 4
64824: PPUSH
64825: CALL_OW 74
64829: PPUSH
64830: CALL_OW 115
64834: GO 64936
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64836: LD_VAR 0 4
64840: PPUSH
64841: LD_VAR 0 2
64845: PUSH
64846: LD_VAR 0 9
64850: ARRAY
64851: PUSH
64852: LD_INT 1
64854: ARRAY
64855: PPUSH
64856: LD_VAR 0 2
64860: PUSH
64861: LD_VAR 0 9
64865: ARRAY
64866: PUSH
64867: LD_INT 2
64869: ARRAY
64870: PPUSH
64871: CALL_OW 297
64875: PUSH
64876: LD_INT 6
64878: GREATER
64879: IFFALSE 64922
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64881: LD_VAR 0 4
64885: PPUSH
64886: LD_VAR 0 2
64890: PUSH
64891: LD_VAR 0 9
64895: ARRAY
64896: PUSH
64897: LD_INT 1
64899: ARRAY
64900: PPUSH
64901: LD_VAR 0 2
64905: PUSH
64906: LD_VAR 0 9
64910: ARRAY
64911: PUSH
64912: LD_INT 2
64914: ARRAY
64915: PPUSH
64916: CALL_OW 114
64920: GO 64936
// SetTag ( i , tag ) ;
64922: LD_VAR 0 4
64926: PPUSH
64927: LD_VAR 0 9
64931: PPUSH
64932: CALL_OW 109
// end else
64936: GO 64968
// if enemy then
64938: LD_VAR 0 5
64942: IFFALSE 64968
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64944: LD_VAR 0 4
64948: PPUSH
64949: LD_VAR 0 5
64953: PPUSH
64954: LD_VAR 0 4
64958: PPUSH
64959: CALL_OW 74
64963: PPUSH
64964: CALL_OW 115
// end ;
64968: GO 64645
64970: POP
64971: POP
// end ;
64972: LD_VAR 0 3
64976: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64977: LD_INT 0
64979: PPUSH
64980: PPUSH
64981: PPUSH
// if not unit or IsInUnit ( unit ) then
64982: LD_VAR 0 1
64986: NOT
64987: PUSH
64988: LD_VAR 0 1
64992: PPUSH
64993: CALL_OW 310
64997: OR
64998: IFFALSE 65002
// exit ;
65000: GO 65093
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
65002: LD_ADDR_VAR 0 4
65006: PUSH
65007: LD_VAR 0 1
65011: PPUSH
65012: CALL_OW 250
65016: PPUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_INT 1
65024: PPUSH
65025: CALL_OW 272
65029: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
65030: LD_ADDR_VAR 0 5
65034: PUSH
65035: LD_VAR 0 1
65039: PPUSH
65040: CALL_OW 251
65044: PPUSH
65045: LD_VAR 0 2
65049: PPUSH
65050: LD_INT 1
65052: PPUSH
65053: CALL_OW 273
65057: ST_TO_ADDR
// if ValidHex ( x , y ) then
65058: LD_VAR 0 4
65062: PPUSH
65063: LD_VAR 0 5
65067: PPUSH
65068: CALL_OW 488
65072: IFFALSE 65093
// ComTurnXY ( unit , x , y ) ;
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_VAR 0 4
65083: PPUSH
65084: LD_VAR 0 5
65088: PPUSH
65089: CALL_OW 118
// end ;
65093: LD_VAR 0 3
65097: RET
// export function SeeUnits ( side , units ) ; var i ; begin
65098: LD_INT 0
65100: PPUSH
65101: PPUSH
// result := false ;
65102: LD_ADDR_VAR 0 3
65106: PUSH
65107: LD_INT 0
65109: ST_TO_ADDR
// if not units then
65110: LD_VAR 0 2
65114: NOT
65115: IFFALSE 65119
// exit ;
65117: GO 65164
// for i in units do
65119: LD_ADDR_VAR 0 4
65123: PUSH
65124: LD_VAR 0 2
65128: PUSH
65129: FOR_IN
65130: IFFALSE 65162
// if See ( side , i ) then
65132: LD_VAR 0 1
65136: PPUSH
65137: LD_VAR 0 4
65141: PPUSH
65142: CALL_OW 292
65146: IFFALSE 65160
// begin result := true ;
65148: LD_ADDR_VAR 0 3
65152: PUSH
65153: LD_INT 1
65155: ST_TO_ADDR
// exit ;
65156: POP
65157: POP
65158: GO 65164
// end ;
65160: GO 65129
65162: POP
65163: POP
// end ;
65164: LD_VAR 0 3
65168: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65169: LD_INT 0
65171: PPUSH
65172: PPUSH
65173: PPUSH
65174: PPUSH
// if not unit or not points then
65175: LD_VAR 0 1
65179: NOT
65180: PUSH
65181: LD_VAR 0 2
65185: NOT
65186: OR
65187: IFFALSE 65191
// exit ;
65189: GO 65281
// dist := 99999 ;
65191: LD_ADDR_VAR 0 5
65195: PUSH
65196: LD_INT 99999
65198: ST_TO_ADDR
// for i in points do
65199: LD_ADDR_VAR 0 4
65203: PUSH
65204: LD_VAR 0 2
65208: PUSH
65209: FOR_IN
65210: IFFALSE 65279
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65212: LD_ADDR_VAR 0 6
65216: PUSH
65217: LD_VAR 0 1
65221: PPUSH
65222: LD_VAR 0 4
65226: PUSH
65227: LD_INT 1
65229: ARRAY
65230: PPUSH
65231: LD_VAR 0 4
65235: PUSH
65236: LD_INT 2
65238: ARRAY
65239: PPUSH
65240: CALL_OW 297
65244: ST_TO_ADDR
// if tmpDist < dist then
65245: LD_VAR 0 6
65249: PUSH
65250: LD_VAR 0 5
65254: LESS
65255: IFFALSE 65277
// begin result := i ;
65257: LD_ADDR_VAR 0 3
65261: PUSH
65262: LD_VAR 0 4
65266: ST_TO_ADDR
// dist := tmpDist ;
65267: LD_ADDR_VAR 0 5
65271: PUSH
65272: LD_VAR 0 6
65276: ST_TO_ADDR
// end ; end ;
65277: GO 65209
65279: POP
65280: POP
// end ; end_of_file
65281: LD_VAR 0 3
65285: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65286: LD_VAR 0 1
65290: PUSH
65291: LD_INT 200
65293: DOUBLE
65294: GREATEREQUAL
65295: IFFALSE 65303
65297: LD_INT 299
65299: DOUBLE
65300: LESSEQUAL
65301: IFTRUE 65305
65303: GO 65337
65305: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65306: LD_VAR 0 1
65310: PPUSH
65311: LD_VAR 0 2
65315: PPUSH
65316: LD_VAR 0 3
65320: PPUSH
65321: LD_VAR 0 4
65325: PPUSH
65326: LD_VAR 0 5
65330: PPUSH
65331: CALL 21312 0 5
65335: GO 65414
65337: LD_INT 300
65339: DOUBLE
65340: GREATEREQUAL
65341: IFFALSE 65349
65343: LD_INT 399
65345: DOUBLE
65346: LESSEQUAL
65347: IFTRUE 65351
65349: GO 65413
65351: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65352: LD_VAR 0 1
65356: PPUSH
65357: LD_VAR 0 2
65361: PPUSH
65362: LD_VAR 0 3
65366: PPUSH
65367: LD_VAR 0 4
65371: PPUSH
65372: LD_VAR 0 5
65376: PPUSH
65377: LD_VAR 0 6
65381: PPUSH
65382: LD_VAR 0 7
65386: PPUSH
65387: LD_VAR 0 8
65391: PPUSH
65392: LD_VAR 0 9
65396: PPUSH
65397: LD_VAR 0 10
65401: PPUSH
65402: LD_VAR 0 11
65406: PPUSH
65407: CALL 19210 0 11
65411: GO 65414
65413: POP
// end ;
65414: PPOPN 11
65416: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65417: LD_VAR 0 1
65421: PPUSH
65422: LD_VAR 0 2
65426: PPUSH
65427: LD_VAR 0 3
65431: PPUSH
65432: LD_VAR 0 4
65436: PPUSH
65437: LD_VAR 0 5
65441: PPUSH
65442: CALL 21304 0 5
// end ; end_of_file
65446: PPOPN 5
65448: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65449: LD_VAR 0 1
65453: PPUSH
65454: LD_VAR 0 2
65458: PPUSH
65459: LD_VAR 0 3
65463: PPUSH
65464: LD_VAR 0 4
65468: PPUSH
65469: LD_VAR 0 5
65473: PPUSH
65474: LD_VAR 0 6
65478: PPUSH
65479: CALL 7405 0 6
// end ;
65483: PPOPN 6
65485: END
