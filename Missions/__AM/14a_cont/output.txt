// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 63205 0 9
// PrepareAmerican ;
  46: CALL 4227 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 28733 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 28733 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 28733 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 33657 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 65433 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 33657 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 65433 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1670
// if art [ 1 ] in [ 157 , 162 ] and art [ 2 ] in [ 75 , 67 ] then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: PUSH
1631: LD_INT 162
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: IN
1638: PUSH
1639: LD_VAR 0 5
1643: PUSH
1644: LD_INT 2
1646: ARRAY
1647: PUSH
1648: LD_INT 75
1650: PUSH
1651: LD_INT 67
1653: PUSH
1654: EMPTY
1655: LIST
1656: LIST
1657: IN
1658: AND
1659: IFFALSE 1670
// begin YouLost ( Artefact ) ;
1661: LD_STRING Artefact
1663: PPUSH
1664: CALL_OW 104
// exit ;
1668: GO 1834
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1670: LD_EXP 14
1674: PPUSH
1675: CALL_OW 302
1679: PUSH
1680: LD_EXP 15
1684: PPUSH
1685: CALL_OW 302
1689: AND
1690: IFFALSE 1767
// begin DialogueOn ;
1692: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1696: LD_EXP 14
1700: PPUSH
1701: LD_STRING D6a-JMM-1
1703: PPUSH
1704: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1708: LD_EXP 15
1712: PPUSH
1713: LD_STRING D6a-Bur-1
1715: PPUSH
1716: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1720: LD_EXP 14
1724: PPUSH
1725: LD_STRING D6c-JMM-1
1727: PPUSH
1728: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1732: LD_EXP 15
1736: PPUSH
1737: LD_STRING D6c-Bur-1
1739: PPUSH
1740: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1744: LD_EXP 14
1748: PPUSH
1749: LD_STRING D6c-JMM-2
1751: PPUSH
1752: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1756: LD_STRING MBase
1758: PPUSH
1759: CALL_OW 337
// DialogueOff ;
1763: CALL_OW 7
// end ; bombExploded := true ;
1767: LD_ADDR_EXP 4
1771: PUSH
1772: LD_INT 1
1774: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1775: LD_INT 6300
1777: PUSH
1778: LD_INT 5250
1780: PUSH
1781: LD_INT 4200
1783: PUSH
1784: LD_INT 3500
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: LIST
1791: LIST
1792: PUSH
1793: LD_OWVAR 67
1797: ARRAY
1798: PPUSH
1799: CALL_OW 67
// if planCaptured then
1803: LD_EXP 7
1807: IFFALSE 1811
// exit ;
1809: GO 1834
// if IsOk ( JMM ) then
1811: LD_EXP 14
1815: PPUSH
1816: CALL_OW 302
1820: IFFALSE 1834
// Say ( JMM , D8-JMM-1 ) ;
1822: LD_EXP 14
1826: PPUSH
1827: LD_STRING D8-JMM-1
1829: PPUSH
1830: CALL_OW 88
// end ;
1834: LD_VAR 0 4
1838: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1839: LD_EXP 9
1843: PUSH
1844: LD_EXP 7
1848: NOT
1849: AND
1850: PUSH
1851: LD_EXP 4
1855: AND
1856: IFFALSE 1911
1858: GO 1860
1860: DISABLE
// begin enable ;
1861: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1862: LD_INT 9
1864: PPUSH
1865: LD_INT 22
1867: PUSH
1868: LD_INT 7
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: PPUSH
1875: CALL_OW 70
1879: IFFALSE 1897
// stevensTimer := stevensTimer - 0 0$30 else
1881: LD_ADDR_EXP 9
1885: PUSH
1886: LD_EXP 9
1890: PUSH
1891: LD_INT 1050
1893: MINUS
1894: ST_TO_ADDR
1895: GO 1911
// stevensTimer := stevensTimer - 0 0$1 ;
1897: LD_ADDR_EXP 9
1901: PUSH
1902: LD_EXP 9
1906: PUSH
1907: LD_INT 35
1909: MINUS
1910: ST_TO_ADDR
// end ;
1911: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1912: LD_EXP 9
1916: PUSH
1917: LD_INT 0
1919: LESSEQUAL
1920: PUSH
1921: LD_EXP 7
1925: NOT
1926: AND
1927: IFFALSE 2091
1929: GO 1931
1931: DISABLE
1932: LD_INT 0
1934: PPUSH
1935: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1936: LD_ADDR_VAR 0 2
1940: PUSH
1941: LD_INT 22
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: LD_INT 25
1953: PUSH
1954: LD_INT 4
1956: PUSH
1957: EMPTY
1958: LIST
1959: LIST
1960: PUSH
1961: EMPTY
1962: LIST
1963: LIST
1964: PPUSH
1965: CALL_OW 69
1969: ST_TO_ADDR
// for i in tmp do
1970: LD_ADDR_VAR 0 1
1974: PUSH
1975: LD_VAR 0 2
1979: PUSH
1980: FOR_IN
1981: IFFALSE 2034
// begin if IsInUnit ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 310
1992: IFFALSE 2005
// ComExitBuilding ( i ) else
1994: LD_VAR 0 1
1998: PPUSH
1999: CALL_OW 122
2003: GO 2032
// if not HasTask ( i ) then
2005: LD_VAR 0 1
2009: PPUSH
2010: CALL_OW 314
2014: NOT
2015: IFFALSE 2032
// ComMoveXY ( i , 29 , 56 ) ;
2017: LD_VAR 0 1
2021: PPUSH
2022: LD_INT 29
2024: PPUSH
2025: LD_INT 56
2027: PPUSH
2028: CALL_OW 111
// end ;
2032: GO 1980
2034: POP
2035: POP
// repeat wait ( 0 0$1 ) ;
2036: LD_INT 35
2038: PPUSH
2039: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2043: LD_INT 8
2045: PPUSH
2046: LD_INT 22
2048: PUSH
2049: LD_INT 1
2051: PUSH
2052: EMPTY
2053: LIST
2054: LIST
2055: PUSH
2056: LD_INT 25
2058: PUSH
2059: LD_INT 4
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PPUSH
2070: CALL_OW 70
2074: IFFALSE 2036
// if planCaptured then
2076: LD_EXP 7
2080: IFFALSE 2084
// exit ;
2082: GO 2091
// YouLost ( Time ) ;
2084: LD_STRING Time
2086: PPUSH
2087: CALL_OW 104
// end ;
2091: PPOPN 2
2093: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2094: LD_INT 22
2096: PUSH
2097: LD_INT 7
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 92
2106: PUSH
2107: LD_INT 142
2109: PUSH
2110: LD_INT 52
2112: PUSH
2113: LD_INT 27
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PUSH
2122: EMPTY
2123: LIST
2124: LIST
2125: PPUSH
2126: CALL_OW 69
2130: PUSH
2131: LD_EXP 3
2135: PUSH
2136: LD_INT 6000
2138: PLUS
2139: PUSH
2140: LD_OWVAR 1
2144: GREATER
2145: AND
2146: PUSH
2147: LD_EXP 4
2151: AND
2152: IFFALSE 2207
2154: GO 2156
2156: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2157: LD_EXP 14
2161: PUSH
2162: LD_EXP 15
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 85
// DialogueOn ;
2175: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2179: LD_EXP 14
2183: PPUSH
2184: LD_STRING D6b-JMM-1
2186: PPUSH
2187: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2191: LD_EXP 15
2195: PPUSH
2196: LD_STRING D6b-Bur-1
2198: PPUSH
2199: CALL_OW 88
// DialogueOff ;
2203: CALL_OW 7
// end ;
2207: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2208: LD_EXP 15
2212: PPUSH
2213: LD_INT 142
2215: PPUSH
2216: LD_INT 52
2218: PPUSH
2219: CALL_OW 297
2223: PUSH
2224: LD_INT 25
2226: LESS
2227: PUSH
2228: LD_EXP 15
2232: PPUSH
2233: CALL_OW 310
2237: PPUSH
2238: LD_INT 142
2240: PPUSH
2241: LD_INT 52
2243: PPUSH
2244: CALL_OW 297
2248: PUSH
2249: LD_INT 25
2251: LESS
2252: OR
2253: PUSH
2254: LD_EXP 15
2258: PPUSH
2259: CALL_OW 256
2263: PUSH
2264: LD_INT 1000
2266: LESS
2267: AND
2268: PUSH
2269: LD_EXP 3
2273: PUSH
2274: LD_INT 6000
2276: PLUS
2277: PUSH
2278: LD_OWVAR 1
2282: GREATER
2283: AND
2284: PUSH
2285: LD_EXP 4
2289: AND
2290: IFFALSE 2323
2292: GO 2294
2294: DISABLE
// begin DialogueOn ;
2295: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2299: LD_EXP 15
2303: PPUSH
2304: LD_STRING D7-Bur-1
2306: PPUSH
2307: CALL_OW 88
// enteredContaminatedArea := true ;
2311: LD_ADDR_EXP 5
2315: PUSH
2316: LD_INT 1
2318: ST_TO_ADDR
// DialogueOff ;
2319: CALL_OW 7
// end ;
2323: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2324: LD_EXP 14
2328: PPUSH
2329: LD_INT 142
2331: PPUSH
2332: LD_INT 52
2334: PPUSH
2335: CALL_OW 297
2339: PUSH
2340: LD_INT 25
2342: LESS
2343: PUSH
2344: LD_EXP 14
2348: PPUSH
2349: CALL_OW 310
2353: PPUSH
2354: LD_INT 142
2356: PPUSH
2357: LD_INT 52
2359: PPUSH
2360: CALL_OW 297
2364: PUSH
2365: LD_INT 25
2367: LESS
2368: OR
2369: PUSH
2370: LD_EXP 14
2374: PPUSH
2375: CALL_OW 256
2379: PUSH
2380: LD_INT 1000
2382: LESS
2383: AND
2384: PUSH
2385: LD_EXP 3
2389: PUSH
2390: LD_INT 6000
2392: PLUS
2393: PUSH
2394: LD_OWVAR 1
2398: GREATER
2399: AND
2400: PUSH
2401: LD_EXP 4
2405: AND
2406: IFFALSE 2439
2408: GO 2410
2410: DISABLE
// begin DialogueOn ;
2411: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2415: LD_EXP 14
2419: PPUSH
2420: LD_STRING D7-JMM-1
2422: PPUSH
2423: CALL_OW 88
// enteredContaminatedArea := true ;
2427: LD_ADDR_EXP 5
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// DialogueOff ;
2435: CALL_OW 7
// end ;
2439: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2440: LD_EXP 6
2444: PUSH
2445: LD_EXP 14
2449: PPUSH
2450: CALL_OW 302
2454: AND
2455: PUSH
2456: LD_EXP 15
2460: PPUSH
2461: CALL_OW 302
2465: AND
2466: IFFALSE 2535
2468: GO 2470
2470: DISABLE
// begin DialogueOn ;
2471: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2475: LD_EXP 14
2479: PUSH
2480: LD_EXP 15
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: PPUSH
2489: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2493: LD_EXP 14
2497: PPUSH
2498: LD_STRING D4-JMM-1
2500: PPUSH
2501: CALL_OW 88
// if not bombExploded then
2505: LD_EXP 4
2509: NOT
2510: IFFALSE 2524
// Say ( Burlak , D4-Bur-1 ) ;
2512: LD_EXP 15
2516: PPUSH
2517: LD_STRING D4-Bur-1
2519: PPUSH
2520: CALL_OW 88
// DialogueOff ;
2524: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2528: LD_STRING MReturn
2530: PPUSH
2531: CALL_OW 337
// end ;
2535: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2536: LD_EXP 7
2540: NOT
2541: PUSH
2542: LD_INT 22
2544: PUSH
2545: LD_INT 7
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: PUSH
2552: LD_INT 91
2554: PUSH
2555: LD_INT 9
2557: PUSH
2558: LD_INT 6
2560: PUSH
2561: EMPTY
2562: LIST
2563: LIST
2564: LIST
2565: PUSH
2566: EMPTY
2567: LIST
2568: LIST
2569: PPUSH
2570: CALL_OW 69
2574: AND
2575: IFFALSE 2652
2577: GO 2579
2579: DISABLE
// begin DialogueOn ;
2580: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2584: LD_INT 55
2586: PPUSH
2587: LD_INT 11
2589: PPUSH
2590: LD_INT 7
2592: PPUSH
2593: LD_INT 6
2595: NEG
2596: PPUSH
2597: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2601: LD_INT 55
2603: PPUSH
2604: LD_INT 11
2606: PPUSH
2607: LD_INT 7
2609: PPUSH
2610: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2614: LD_EXP 15
2618: PPUSH
2619: LD_STRING D9-Bur-1
2621: PPUSH
2622: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2626: LD_EXP 14
2630: PPUSH
2631: LD_STRING D9-JMM-1
2633: PPUSH
2634: CALL_OW 88
// DialogueOff ;
2638: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2642: LD_INT 9
2644: PPUSH
2645: LD_INT 7
2647: PPUSH
2648: CALL_OW 235
// end ;
2652: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2653: LD_INT 9
2655: PPUSH
2656: LD_INT 22
2658: PUSH
2659: LD_INT 7
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PPUSH
2666: CALL_OW 70
2670: IFFALSE 2706
2672: GO 2674
2674: DISABLE
// begin wait ( 0 0$07 ) ;
2675: LD_INT 245
2677: PPUSH
2678: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2682: LD_EXP 14
2686: PPUSH
2687: LD_STRING D10b-JMM-1
2689: PPUSH
2690: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2694: LD_EXP 15
2698: PPUSH
2699: LD_STRING D10b-Bur-1
2701: PPUSH
2702: CALL_OW 88
// end ;
2706: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2707: LD_EXP 9
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 1
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 4
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: LD_INT 26
2734: PUSH
2735: LD_INT 1
2737: PUSH
2738: EMPTY
2739: LIST
2740: LIST
2741: PUSH
2742: EMPTY
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: CALL_OW 69
2751: AND
2752: PUSH
2753: LD_INT 5
2755: PPUSH
2756: CALL_OW 255
2760: PUSH
2761: LD_INT 7
2763: EQUAL
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 1
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 25
2777: PUSH
2778: LD_INT 1
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 0
2796: EQUAL
2797: OR
2798: AND
2799: IFFALSE 3470
2801: GO 2803
2803: DISABLE
2804: LD_INT 0
2806: PPUSH
// begin case Query ( QKill ) of 1 :
2807: LD_STRING QKill
2809: PPUSH
2810: CALL_OW 97
2814: PUSH
2815: LD_INT 1
2817: DOUBLE
2818: EQUAL
2819: IFTRUE 2823
2821: GO 3458
2823: POP
// begin DialogueOn ;
2824: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2828: LD_EXP 14
2832: PPUSH
2833: LD_STRING D10a-JMM-1
2835: PPUSH
2836: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2840: LD_EXP 15
2844: PPUSH
2845: LD_STRING D10a-Bur-1
2847: PPUSH
2848: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2852: LD_EXP 14
2856: PPUSH
2857: LD_STRING D10a-JMM-2
2859: PPUSH
2860: CALL_OW 88
// if IsOk ( Stevens ) then
2864: LD_EXP 18
2868: PPUSH
2869: CALL_OW 302
2873: IFFALSE 2889
// Say ( Stevens , D10a-Huck-2 ) else
2875: LD_EXP 18
2879: PPUSH
2880: LD_STRING D10a-Huck-2
2882: PPUSH
2883: CALL_OW 88
2887: GO 3022
// if not FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) then
2889: LD_INT 22
2891: PUSH
2892: LD_INT 1
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 25
2901: PUSH
2902: LD_INT 4
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 26
2911: PUSH
2912: LD_INT 1
2914: PUSH
2915: EMPTY
2916: LIST
2917: LIST
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: LIST
2923: PPUSH
2924: CALL_OW 69
2928: NOT
2929: IFFALSE 2971
// begin uc_side := 1 ;
2931: LD_ADDR_OWVAR 20
2935: PUSH
2936: LD_INT 1
2938: ST_TO_ADDR
// uc_nation := 1 ;
2939: LD_ADDR_OWVAR 21
2943: PUSH
2944: LD_INT 1
2946: ST_TO_ADDR
// PrepareScientist ( sex_male , 10 ) ;
2947: LD_INT 1
2949: PPUSH
2950: LD_INT 10
2952: PPUSH
2953: CALL_OW 384
// Say ( CreateHuman , D10a-ASci1-3 ) ;
2957: CALL_OW 44
2961: PPUSH
2962: LD_STRING D10a-ASci1-3
2964: PPUSH
2965: CALL_OW 88
// end else
2969: GO 3022
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2971: LD_INT 22
2973: PUSH
2974: LD_INT 1
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: PUSH
2981: LD_INT 25
2983: PUSH
2984: LD_INT 4
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: LD_INT 26
2993: PUSH
2994: LD_INT 1
2996: PUSH
2997: EMPTY
2998: LIST
2999: LIST
3000: PUSH
3001: EMPTY
3002: LIST
3003: LIST
3004: LIST
3005: PPUSH
3006: CALL_OW 69
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: LD_STRING D10a-ASci1-3
3017: PPUSH
3018: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
3022: LD_EXP 14
3026: PPUSH
3027: LD_STRING D10a-JMM-4
3029: PPUSH
3030: CALL_OW 88
// if IsOk ( Stevens ) then
3034: LD_EXP 18
3038: PPUSH
3039: CALL_OW 302
3043: IFFALSE 3057
// Say ( Stevens , D10a-Huck-3 ) ;
3045: LD_EXP 18
3049: PPUSH
3050: LD_STRING D10a-Huck-3
3052: PPUSH
3053: CALL_OW 88
// DialogueOff ;
3057: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
3061: LD_INT 1
3063: PPUSH
3064: LD_INT 7
3066: PPUSH
3067: LD_INT 1
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 80
// planCaptured := true ;
3077: LD_ADDR_EXP 7
3081: PUSH
3082: LD_INT 1
3084: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
3085: LD_STRING MEnd
3087: PPUSH
3088: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
3092: LD_STRING ACH_DIPLOMACY
3094: PPUSH
3095: CALL_OW 543
// canEnd := true ;
3099: LD_ADDR_EXP 10
3103: PUSH
3104: LD_INT 1
3106: ST_TO_ADDR
// missionTime := tick ;
3107: LD_ADDR_EXP 11
3111: PUSH
3112: LD_OWVAR 1
3116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3117: LD_INT 35
3119: PPUSH
3120: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3124: LD_INT 22
3126: PUSH
3127: LD_INT 1
3129: PUSH
3130: EMPTY
3131: LIST
3132: LIST
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: LD_INT 50
3139: PUSH
3140: EMPTY
3141: LIST
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: EMPTY
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: IFFALSE 3271
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3157: LD_ADDR_VAR 0 1
3161: PUSH
3162: LD_INT 22
3164: PUSH
3165: LD_INT 1
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 25
3174: PUSH
3175: LD_INT 4
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PPUSH
3186: CALL_OW 69
3190: PUSH
3191: FOR_IN
3192: IFFALSE 3269
// begin if IsInUnit ( i ) then
3194: LD_VAR 0 1
3198: PPUSH
3199: CALL_OW 310
3203: IFFALSE 3216
// ComExitBuilding ( i ) else
3205: LD_VAR 0 1
3209: PPUSH
3210: CALL_OW 122
3214: GO 3267
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3216: LD_VAR 0 1
3220: PPUSH
3221: LD_INT 22
3223: PUSH
3224: LD_INT 1
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: PUSH
3231: LD_INT 3
3233: PUSH
3234: LD_INT 50
3236: PUSH
3237: EMPTY
3238: LIST
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: PPUSH
3248: CALL_OW 69
3252: PPUSH
3253: LD_VAR 0 1
3257: PPUSH
3258: CALL_OW 74
3262: PPUSH
3263: CALL_OW 128
// end ;
3267: GO 3191
3269: POP
3270: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3271: LD_INT 22
3273: PUSH
3274: LD_INT 1
3276: PUSH
3277: EMPTY
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 3
3283: PUSH
3284: LD_INT 50
3286: PUSH
3287: EMPTY
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: NOT
3303: IFFALSE 3117
// repeat wait ( 3 ) ;
3305: LD_INT 3
3307: PPUSH
3308: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 1
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 1
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3423
// begin if IsInArea ( i , stevensEscapeArea ) then
3349: LD_VAR 0 1
3353: PPUSH
3354: LD_INT 8
3356: PPUSH
3357: CALL_OW 308
3361: IFFALSE 3374
// begin RemoveUnit ( i ) ;
3363: LD_VAR 0 1
3367: PPUSH
3368: CALL_OW 64
// continue ;
3372: GO 3346
// end ; if IsInUnit ( i ) then
3374: LD_VAR 0 1
3378: PPUSH
3379: CALL_OW 310
3383: IFFALSE 3394
// ComExitBuilding ( i ) ;
3385: LD_VAR 0 1
3389: PPUSH
3390: CALL_OW 122
// if not HasTask ( i ) then
3394: LD_VAR 0 1
3398: PPUSH
3399: CALL_OW 314
3403: NOT
3404: IFFALSE 3421
// ComMoveXY ( i , 28 , 55 ) ;
3406: LD_VAR 0 1
3410: PPUSH
3411: LD_INT 28
3413: PPUSH
3414: LD_INT 55
3416: PPUSH
3417: CALL_OW 111
// end ;
3421: GO 3346
3423: POP
3424: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3425: LD_INT 22
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: PUSH
3435: LD_INT 21
3437: PUSH
3438: LD_INT 1
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: EMPTY
3446: LIST
3447: LIST
3448: PPUSH
3449: CALL_OW 69
3453: NOT
3454: IFFALSE 3305
// end ; 2 :
3456: GO 3470
3458: LD_INT 2
3460: DOUBLE
3461: EQUAL
3462: IFTRUE 3466
3464: GO 3469
3466: POP
// ; end ;
3467: GO 3470
3469: POP
// end ;
3470: PPOPN 1
3472: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3473: LD_EXP 10
3477: IFFALSE 3834
3479: GO 3481
3481: DISABLE
3482: LD_INT 0
3484: PPUSH
3485: PPUSH
3486: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3487: LD_INT 10
3489: PPUSH
3490: LD_INT 1
3492: PPUSH
3493: CALL_OW 424
// if Difficulty < 2 then
3497: LD_OWVAR 67
3501: PUSH
3502: LD_INT 2
3504: LESS
3505: IFFALSE 3509
// exit ;
3507: GO 3834
// uc_side := 4 ;
3509: LD_ADDR_OWVAR 20
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// uc_nation := 1 ;
3517: LD_ADDR_OWVAR 21
3521: PUSH
3522: LD_INT 1
3524: ST_TO_ADDR
// InitHc ;
3525: CALL_OW 19
// tmp := [ ] ;
3529: LD_ADDR_VAR 0 3
3533: PUSH
3534: EMPTY
3535: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3536: LD_INT 0
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: LD_INT 10
3544: PPUSH
3545: CALL_OW 380
// un := CreateHuman ;
3549: LD_ADDR_VAR 0 1
3553: PUSH
3554: CALL_OW 44
3558: ST_TO_ADDR
// tmp := [ un ] ;
3559: LD_ADDR_VAR 0 3
3563: PUSH
3564: LD_VAR 0 1
3568: PUSH
3569: EMPTY
3570: LIST
3571: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3572: LD_VAR 0 1
3576: PPUSH
3577: LD_INT 226
3579: PPUSH
3580: LD_INT 86
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 48
// ComHold ( un ) ;
3590: LD_VAR 0 1
3594: PPUSH
3595: CALL_OW 140
// for i = 1 to 3 do
3599: LD_ADDR_VAR 0 2
3603: PUSH
3604: DOUBLE
3605: LD_INT 1
3607: DEC
3608: ST_TO_ADDR
3609: LD_INT 3
3611: PUSH
3612: FOR_TO
3613: IFFALSE 3712
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3615: LD_INT 0
3617: PPUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 8
3623: PPUSH
3624: CALL_OW 380
// un := CreateHuman ;
3628: LD_ADDR_VAR 0 1
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3638: LD_VAR 0 1
3642: PPUSH
3643: LD_INT 5
3645: PPUSH
3646: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3650: LD_VAR 0 1
3654: PPUSH
3655: LD_INT 215
3657: PUSH
3658: LD_INT 217
3660: PUSH
3661: LD_INT 219
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_VAR 0 2
3673: ARRAY
3674: PPUSH
3675: LD_INT 76
3677: PPUSH
3678: LD_INT 0
3680: PPUSH
3681: CALL_OW 48
// ComCrawl ( un ) ;
3685: LD_VAR 0 1
3689: PPUSH
3690: CALL_OW 137
// tmp := tmp ^ un ;
3694: LD_ADDR_VAR 0 3
3698: PUSH
3699: LD_VAR 0 3
3703: PUSH
3704: LD_VAR 0 1
3708: ADD
3709: ST_TO_ADDR
// end ;
3710: GO 3612
3712: POP
3713: POP
// repeat wait ( 0 0$1 ) ;
3714: LD_INT 35
3716: PPUSH
3717: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3721: LD_VAR 0 3
3725: PPUSH
3726: LD_INT 24
3728: PUSH
3729: LD_INT 1000
3731: PUSH
3732: EMPTY
3733: LIST
3734: LIST
3735: PPUSH
3736: CALL_OW 72
3740: NOT
3741: IFFALSE 3714
// for i in tmp do
3743: LD_ADDR_VAR 0 2
3747: PUSH
3748: LD_VAR 0 3
3752: PUSH
3753: FOR_IN
3754: IFFALSE 3832
// begin wait ( 0 0$1 ) ;
3756: LD_INT 35
3758: PPUSH
3759: CALL_OW 67
// if Crawls ( i ) then
3763: LD_VAR 0 2
3767: PPUSH
3768: CALL_OW 318
3772: IFFALSE 3785
// ComWalk ( i ) else
3774: LD_VAR 0 2
3778: PPUSH
3779: CALL_OW 138
3783: GO 3830
// if GetClass ( i ) = class_sniper then
3785: LD_VAR 0 2
3789: PPUSH
3790: CALL_OW 257
3794: PUSH
3795: LD_INT 5
3797: EQUAL
3798: IFFALSE 3816
// ComAttackSoporific ( i , JMM ) else
3800: LD_VAR 0 2
3804: PPUSH
3805: LD_EXP 14
3809: PPUSH
3810: CALL_OW 166
3814: GO 3830
// ComAttackUnit ( i , JMM ) ;
3816: LD_VAR 0 2
3820: PPUSH
3821: LD_EXP 14
3825: PPUSH
3826: CALL_OW 115
// end ;
3830: GO 3753
3832: POP
3833: POP
// end ;
3834: PPOPN 3
3836: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3837: LD_EXP 7
3841: NOT
3842: PUSH
3843: LD_INT 1
3845: PPUSH
3846: CALL_OW 301
3850: AND
3851: IFFALSE 3863
3853: GO 3855
3855: DISABLE
// YouLost ( Lab ) ;
3856: LD_STRING Lab
3858: PPUSH
3859: CALL_OW 104
3863: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ [ f_not , [ f_empty ] ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3864: LD_INT 10
3866: PPUSH
3867: LD_INT 22
3869: PUSH
3870: LD_INT 7
3872: PUSH
3873: EMPTY
3874: LIST
3875: LIST
3876: PPUSH
3877: CALL_OW 70
3881: PUSH
3882: LD_INT 2
3884: GREATEREQUAL
3885: PUSH
3886: LD_INT 10
3888: PPUSH
3889: LD_INT 3
3891: PUSH
3892: LD_INT 58
3894: PUSH
3895: EMPTY
3896: LIST
3897: PUSH
3898: EMPTY
3899: LIST
3900: LIST
3901: PUSH
3902: LD_INT 2
3904: PUSH
3905: LD_INT 34
3907: PUSH
3908: LD_INT 12
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 34
3917: PUSH
3918: LD_INT 51
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: LIST
3929: PUSH
3930: EMPTY
3931: LIST
3932: LIST
3933: PPUSH
3934: CALL_OW 70
3938: AND
3939: PUSH
3940: LD_EXP 10
3944: AND
3945: PUSH
3946: LD_EXP 7
3950: AND
3951: PUSH
3952: LD_EXP 6
3956: AND
3957: IFFALSE 4224
3959: GO 3961
3961: DISABLE
3962: LD_INT 0
3964: PPUSH
3965: PPUSH
// begin m1 := false ;
3966: LD_ADDR_VAR 0 1
3970: PUSH
3971: LD_INT 0
3973: ST_TO_ADDR
// m2 := false ;
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: LD_INT 0
3981: ST_TO_ADDR
// if killCounter = 0 then
3982: LD_EXP 12
3986: PUSH
3987: LD_INT 0
3989: EQUAL
3990: IFFALSE 3999
// SetAchievement ( ACH_PACIFIST ) ;
3992: LD_STRING ACH_PACIFIST
3994: PPUSH
3995: CALL_OW 543
// if tick < 7 7$00 then
3999: LD_OWVAR 1
4003: PUSH
4004: LD_INT 14700
4006: LESS
4007: IFFALSE 4023
// begin wait ( 3 ) ;
4009: LD_INT 3
4011: PPUSH
4012: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
4016: LD_STRING ACH_ASPEED_18
4018: PPUSH
4019: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
4023: LD_STRING Explosion
4025: PPUSH
4026: LD_INT 1
4028: PPUSH
4029: CALL_OW 101
// if enteredContaminatedArea then
4033: LD_EXP 5
4037: IFFALSE 4059
// begin m1 := true ;
4039: LD_ADDR_VAR 0 1
4043: PUSH
4044: LD_INT 1
4046: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
4047: LD_STRING BioHazard
4049: PPUSH
4050: LD_INT 1
4052: PPUSH
4053: CALL_OW 101
// end else
4057: GO 4070
// AddMedal ( BioHazard , - 1 ) ;
4059: LD_STRING BioHazard
4061: PPUSH
4062: LD_INT 1
4064: NEG
4065: PPUSH
4066: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
4070: LD_EXP 11
4074: PUSH
4075: LD_INT 42000
4077: PUSH
4078: LD_INT 31500
4080: PUSH
4081: LD_INT 25200
4083: PUSH
4084: LD_INT 24150
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: LIST
4091: LIST
4092: PUSH
4093: LD_OWVAR 67
4097: ARRAY
4098: LESSEQUAL
4099: IFFALSE 4121
// begin m2 := true ;
4101: LD_ADDR_VAR 0 2
4105: PUSH
4106: LD_INT 1
4108: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
4109: LD_STRING Speed
4111: PPUSH
4112: LD_INT 1
4114: PPUSH
4115: CALL_OW 101
// end else
4119: GO 4132
// AddMedal ( Speed , - 1 ) ;
4121: LD_STRING Speed
4123: PPUSH
4124: LD_INT 1
4126: NEG
4127: PPUSH
4128: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4132: LD_OWVAR 67
4136: PUSH
4137: LD_INT 3
4139: GREATEREQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: AND
4146: PUSH
4147: LD_VAR 0 2
4151: AND
4152: IFFALSE 4164
// SetAchievementEX ( ACH_AMER , 18 ) ;
4154: LD_STRING ACH_AMER
4156: PPUSH
4157: LD_INT 18
4159: PPUSH
4160: CALL_OW 564
// GiveMedals ( Main ) ;
4164: LD_STRING Main
4166: PPUSH
4167: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4171: LD_EXP 14
4175: PUSH
4176: LD_EXP 15
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PPUSH
4185: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4189: LD_EXP 14
4193: PPUSH
4194: LD_STRING 14a_JMM
4196: PPUSH
4197: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4201: LD_EXP 15
4205: PPUSH
4206: LD_STRING 14a_Burlak
4208: PPUSH
4209: CALL_OW 38
// ToLua ( enableBioCharacter(BIO_HUGH) ) ;
4213: LD_STRING enableBioCharacter(BIO_HUGH)
4215: PPUSH
4216: CALL_OW 559
// YouWin ;
4220: CALL_OW 103
// end ; end_of_file
4224: PPOPN 2
4226: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4227: LD_INT 0
4229: PPUSH
4230: PPUSH
4231: PPUSH
4232: PPUSH
// uc_side := 1 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 1
4240: ST_TO_ADDR
// uc_nation := 1 ;
4241: LD_ADDR_OWVAR 21
4245: PUSH
4246: LD_INT 1
4248: ST_TO_ADDR
// InitHc ;
4249: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 750 ) ;
4253: LD_INT 34
4255: PPUSH
4256: CALL_OW 274
4260: PPUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 750
4266: PPUSH
4267: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4271: LD_INT 34
4273: PPUSH
4274: CALL_OW 274
4278: PPUSH
4279: LD_INT 3
4281: PPUSH
4282: LD_INT 20
4284: PPUSH
4285: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4289: LD_ADDR_EXP 18
4293: PUSH
4294: LD_STRING Stevens
4296: PPUSH
4297: CALL_OW 25
4301: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4302: LD_ADDR_EXP 19
4306: PUSH
4307: LD_STRING Powell
4309: PPUSH
4310: CALL_OW 25
4314: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4315: LD_EXP 18
4319: PPUSH
4320: LD_INT 1
4322: PPUSH
4323: CALL_OW 52
// vehGuard := [ ] ;
4327: LD_ADDR_EXP 23
4331: PUSH
4332: EMPTY
4333: ST_TO_ADDR
// hc_importance := 0 ;
4334: LD_ADDR_OWVAR 32
4338: PUSH
4339: LD_INT 0
4341: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4342: LD_INT 4
4344: PPUSH
4345: LD_INT 3
4347: PPUSH
4348: LD_INT 3
4350: PPUSH
4351: LD_INT 8
4353: PPUSH
4354: LD_INT 100
4356: PPUSH
4357: CALL 33657 0 5
// sibBomb := CreateVehicle ;
4361: LD_ADDR_EXP 21
4365: PUSH
4366: CALL_OW 45
4370: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4371: LD_EXP 21
4375: PPUSH
4376: LD_INT 1
4378: PPUSH
4379: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4383: LD_EXP 21
4387: PPUSH
4388: LD_INT 93
4390: PPUSH
4391: LD_INT 74
4393: PPUSH
4394: LD_INT 0
4396: PPUSH
4397: CALL_OW 48
// guards := [ ] ;
4401: LD_ADDR_EXP 22
4405: PUSH
4406: EMPTY
4407: ST_TO_ADDR
// for i = 1 to 3 do
4408: LD_ADDR_VAR 0 2
4412: PUSH
4413: DOUBLE
4414: LD_INT 1
4416: DEC
4417: ST_TO_ADDR
4418: LD_INT 3
4420: PUSH
4421: FOR_TO
4422: IFFALSE 4518
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4424: LD_INT 0
4426: PPUSH
4427: LD_INT 1
4429: PPUSH
4430: LD_INT 8
4432: PUSH
4433: LD_INT 9
4435: PUSH
4436: LD_INT 10
4438: PUSH
4439: LD_INT 10
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: LIST
4447: PUSH
4448: LD_OWVAR 67
4452: ARRAY
4453: PPUSH
4454: CALL_OW 380
// un := CreateHuman ;
4458: LD_ADDR_VAR 0 3
4462: PUSH
4463: CALL_OW 44
4467: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4468: LD_VAR 0 3
4472: PPUSH
4473: LD_INT 2
4475: PUSH
4476: LD_INT 3
4478: PUSH
4479: LD_INT 4
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_VAR 0 2
4491: ARRAY
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 49
// guards := guards ^ un ;
4500: LD_ADDR_EXP 22
4504: PUSH
4505: LD_EXP 22
4509: PUSH
4510: LD_VAR 0 3
4514: ADD
4515: ST_TO_ADDR
// end ;
4516: GO 4421
4518: POP
4519: POP
// baseGuards := [ ] ;
4520: LD_ADDR_EXP 20
4524: PUSH
4525: EMPTY
4526: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4527: LD_ADDR_VAR 0 2
4531: PUSH
4532: DOUBLE
4533: LD_INT 1
4535: DEC
4536: ST_TO_ADDR
4537: LD_INT 5
4539: PUSH
4540: LD_INT 6
4542: PUSH
4543: LD_INT 7
4545: PUSH
4546: LD_INT 8
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_OWVAR 67
4559: ARRAY
4560: PUSH
4561: FOR_TO
4562: IFFALSE 4712
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 8
4569: PUSH
4570: LD_INT 9
4572: PUSH
4573: LD_INT 10
4575: PUSH
4576: LD_INT 10
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: LIST
4583: LIST
4584: PUSH
4585: LD_OWVAR 67
4589: ARRAY
4590: PPUSH
4591: CALL_OW 381
// un := CreateHuman ;
4595: LD_ADDR_VAR 0 3
4599: PUSH
4600: CALL_OW 44
4604: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4605: LD_ADDR_EXP 20
4609: PUSH
4610: LD_EXP 20
4614: PUSH
4615: LD_VAR 0 3
4619: ADD
4620: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4621: LD_ADDR_VAR 0 4
4625: PUSH
4626: LD_INT 22
4628: PUSH
4629: LD_INT 1
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 58
4638: PUSH
4639: EMPTY
4640: LIST
4641: PUSH
4642: LD_INT 30
4644: PUSH
4645: LD_INT 32
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: ST_TO_ADDR
// if tmp then
4662: LD_VAR 0 4
4666: IFFALSE 4698
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4668: LD_VAR 0 3
4672: PPUSH
4673: LD_VAR 0 4
4677: PUSH
4678: LD_INT 1
4680: PPUSH
4681: LD_VAR 0 4
4685: PPUSH
4686: CALL_OW 12
4690: ARRAY
4691: PPUSH
4692: CALL_OW 52
4696: GO 4710
// PlaceHumanInUnit ( un , us_bar ) ;
4698: LD_VAR 0 3
4702: PPUSH
4703: LD_INT 51
4705: PPUSH
4706: CALL_OW 52
// end ;
4710: GO 4561
4712: POP
4713: POP
// if Difficulty > 1 then
4714: LD_OWVAR 67
4718: PUSH
4719: LD_INT 1
4721: GREATER
4722: IFFALSE 4770
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4724: LD_INT 0
4726: PPUSH
4727: LD_INT 5
4729: PPUSH
4730: LD_INT 9
4732: PUSH
4733: LD_INT 10
4735: PUSH
4736: LD_INT 10
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PUSH
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 1
4751: MINUS
4752: ARRAY
4753: PPUSH
4754: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4758: CALL_OW 44
4762: PPUSH
4763: LD_INT 80
4765: PPUSH
4766: CALL_OW 52
// end ; for i = 1 to 3 do
4770: LD_ADDR_VAR 0 2
4774: PUSH
4775: DOUBLE
4776: LD_INT 1
4778: DEC
4779: ST_TO_ADDR
4780: LD_INT 3
4782: PUSH
4783: FOR_TO
4784: IFFALSE 4810
// begin PrepareMechanic ( false , 9 ) ;
4786: LD_INT 0
4788: PPUSH
4789: LD_INT 9
4791: PPUSH
4792: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4796: CALL_OW 44
4800: PPUSH
4801: LD_INT 43
4803: PPUSH
4804: CALL_OW 52
// end ;
4808: GO 4783
4810: POP
4811: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4812: CALL_OW 44
4816: PPUSH
4817: LD_INT 49
4819: PPUSH
4820: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4824: LD_ADDR_VAR 0 2
4828: PUSH
4829: DOUBLE
4830: LD_INT 1
4832: DEC
4833: ST_TO_ADDR
4834: LD_INT 1
4836: PUSH
4837: LD_OWVAR 67
4841: PLUS
4842: PUSH
4843: FOR_TO
4844: IFFALSE 4891
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4846: LD_INT 0
4848: PPUSH
4849: LD_INT 8
4851: PUSH
4852: LD_INT 9
4854: PUSH
4855: LD_INT 10
4857: PUSH
4858: LD_INT 10
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: PUSH
4867: LD_OWVAR 67
4871: ARRAY
4872: PPUSH
4873: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4877: CALL_OW 44
4881: PPUSH
4882: LD_INT 5
4884: PPUSH
4885: CALL_OW 52
// end ;
4889: GO 4843
4891: POP
4892: POP
// for i = 1 to 3 do
4893: LD_ADDR_VAR 0 2
4897: PUSH
4898: DOUBLE
4899: LD_INT 1
4901: DEC
4902: ST_TO_ADDR
4903: LD_INT 3
4905: PUSH
4906: FOR_TO
4907: IFFALSE 4933
// begin PrepareScientist ( false , 10 ) ;
4909: LD_INT 0
4911: PPUSH
4912: LD_INT 10
4914: PPUSH
4915: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4919: CALL_OW 44
4923: PPUSH
4924: LD_INT 1
4926: PPUSH
4927: CALL_OW 52
// end ;
4931: GO 4906
4933: POP
4934: POP
// end ;
4935: LD_VAR 0 1
4939: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4940: LD_EXP 22
4944: PUSH
4945: LD_EXP 2
4949: NOT
4950: AND
4951: IFFALSE 5137
4953: GO 4955
4955: DISABLE
4956: LD_INT 0
4958: PPUSH
4959: PPUSH
4960: PPUSH
// begin enable ;
4961: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4962: LD_ADDR_VAR 0 3
4966: PUSH
4967: LD_INT 204
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 165
4979: PUSH
4980: LD_INT 24
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 195
4989: PUSH
4990: LD_INT 6
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: LD_INT 223
4999: PUSH
5000: LD_INT 54
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 214
5009: PUSH
5010: LD_INT 84
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 206
5019: PUSH
5020: LD_INT 71
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: LIST
5032: LIST
5033: LIST
5034: ST_TO_ADDR
// for i in guards do
5035: LD_ADDR_VAR 0 1
5039: PUSH
5040: LD_EXP 22
5044: PUSH
5045: FOR_IN
5046: IFFALSE 5135
// begin if HasTask ( i ) then
5048: LD_VAR 0 1
5052: PPUSH
5053: CALL_OW 314
5057: IFFALSE 5063
// continue else
5059: GO 5045
5061: GO 5133
// begin j := rand ( 1 , 6 ) ;
5063: LD_ADDR_VAR 0 2
5067: PUSH
5068: LD_INT 1
5070: PPUSH
5071: LD_INT 6
5073: PPUSH
5074: CALL_OW 12
5078: ST_TO_ADDR
// if not See ( 7 , i ) then
5079: LD_INT 7
5081: PPUSH
5082: LD_VAR 0 1
5086: PPUSH
5087: CALL_OW 292
5091: NOT
5092: IFFALSE 5133
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
5094: LD_VAR 0 1
5098: PPUSH
5099: LD_VAR 0 3
5103: PUSH
5104: LD_VAR 0 2
5108: ARRAY
5109: PUSH
5110: LD_INT 1
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 3
5118: PUSH
5119: LD_VAR 0 2
5123: ARRAY
5124: PUSH
5125: LD_INT 2
5127: ARRAY
5128: PPUSH
5129: CALL_OW 114
// end ; end ;
5133: GO 5045
5135: POP
5136: POP
// end ;
5137: PPOPN 3
5139: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5140: LD_EXP 23
5144: PUSH
5145: LD_EXP 7
5149: NOT
5150: AND
5151: IFFALSE 5233
5153: GO 5155
5155: DISABLE
5156: LD_INT 0
5158: PPUSH
// begin enable ;
5159: ENABLE
// for i in vehGuard do
5160: LD_ADDR_VAR 0 1
5164: PUSH
5165: LD_EXP 23
5169: PUSH
5170: FOR_IN
5171: IFFALSE 5231
// if IsOk ( i ) and IsControledBy ( i ) then
5173: LD_VAR 0 1
5177: PPUSH
5178: CALL_OW 302
5182: PUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 312
5192: AND
5193: IFFALSE 5229
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5195: LD_VAR 0 1
5199: PPUSH
5200: LD_INT 22
5202: PUSH
5203: LD_INT 7
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PPUSH
5210: CALL_OW 69
5214: PPUSH
5215: LD_VAR 0 1
5219: PPUSH
5220: CALL_OW 74
5224: PPUSH
5225: CALL_OW 115
5229: GO 5170
5231: POP
5232: POP
// end ;
5233: PPOPN 1
5235: END
// every 1 1$00 + 3 3$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured and Difficulty > 1 do
5236: LD_EXP 4
5240: PUSH
5241: LD_INT 43
5243: PPUSH
5244: CALL_OW 302
5248: AND
5249: PUSH
5250: LD_EXP 7
5254: NOT
5255: AND
5256: PUSH
5257: LD_OWVAR 67
5261: PUSH
5262: LD_INT 1
5264: GREATER
5265: AND
5266: IFFALSE 5331
5268: GO 5270
5270: DISABLE
// begin enable ;
5271: ENABLE
// if Count ( vehGuard ) < Difficulty then
5272: LD_EXP 23
5276: PPUSH
5277: CALL 30919 0 1
5281: PUSH
5282: LD_OWVAR 67
5286: LESS
5287: IFFALSE 5331
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5289: LD_INT 43
5291: PPUSH
5292: LD_INT 5
5294: PPUSH
5295: LD_INT 3
5297: PPUSH
5298: LD_INT 2
5300: PPUSH
5301: LD_INT 7
5303: PUSH
5304: LD_INT 7
5306: PUSH
5307: LD_INT 9
5309: PUSH
5310: EMPTY
5311: LIST
5312: LIST
5313: LIST
5314: PUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 3
5320: PPUSH
5321: CALL_OW 12
5325: ARRAY
5326: PPUSH
5327: CALL_OW 125
// end ;
5331: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5332: LD_INT 22
5334: PUSH
5335: LD_INT 1
5337: PUSH
5338: EMPTY
5339: LIST
5340: LIST
5341: PUSH
5342: LD_INT 25
5344: PUSH
5345: LD_INT 5
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: PUSH
5352: LD_INT 50
5354: PUSH
5355: EMPTY
5356: LIST
5357: PUSH
5358: EMPTY
5359: LIST
5360: LIST
5361: LIST
5362: PPUSH
5363: CALL_OW 69
5367: PUSH
5368: LD_EXP 7
5372: NOT
5373: AND
5374: IFFALSE 5603
5376: GO 5378
5378: DISABLE
5379: LD_INT 0
5381: PPUSH
5382: PPUSH
// begin enable ;
5383: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5384: LD_ADDR_VAR 0 1
5388: PUSH
5389: LD_INT 22
5391: PUSH
5392: LD_INT 1
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PUSH
5399: LD_INT 25
5401: PUSH
5402: LD_INT 5
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: PUSH
5409: LD_INT 50
5411: PUSH
5412: EMPTY
5413: LIST
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: PPUSH
5420: CALL_OW 69
5424: ST_TO_ADDR
// if not tmp then
5425: LD_VAR 0 1
5429: NOT
5430: IFFALSE 5434
// exit ;
5432: GO 5603
// b := IsInUnit ( tmp [ 1 ] ) ;
5434: LD_ADDR_VAR 0 2
5438: PUSH
5439: LD_VAR 0 1
5443: PUSH
5444: LD_INT 1
5446: ARRAY
5447: PPUSH
5448: CALL_OW 310
5452: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5453: LD_VAR 0 2
5457: NOT
5458: PUSH
5459: LD_VAR 0 1
5463: PUSH
5464: LD_INT 1
5466: ARRAY
5467: PPUSH
5468: CALL_OW 314
5472: OR
5473: IFFALSE 5477
// exit ;
5475: GO 5603
// if b = us_bun1 then
5477: LD_VAR 0 2
5481: PUSH
5482: LD_INT 80
5484: EQUAL
5485: IFFALSE 5546
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5487: LD_VAR 0 1
5491: PUSH
5492: LD_INT 1
5494: ARRAY
5495: PPUSH
5496: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5500: LD_VAR 0 1
5504: PUSH
5505: LD_INT 1
5507: ARRAY
5508: PPUSH
5509: LD_INT 27
5511: PPUSH
5512: LD_INT 44
5514: PPUSH
5515: CALL_OW 174
// if IsOk ( us_bun2 ) then
5519: LD_INT 55
5521: PPUSH
5522: CALL_OW 302
5526: IFFALSE 5544
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5528: LD_VAR 0 1
5532: PUSH
5533: LD_INT 1
5535: ARRAY
5536: PPUSH
5537: LD_INT 55
5539: PPUSH
5540: CALL_OW 180
// end else
5544: GO 5603
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5546: LD_VAR 0 1
5550: PUSH
5551: LD_INT 1
5553: ARRAY
5554: PPUSH
5555: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5559: LD_VAR 0 1
5563: PUSH
5564: LD_INT 1
5566: ARRAY
5567: PPUSH
5568: LD_INT 92
5570: PPUSH
5571: LD_INT 51
5573: PPUSH
5574: CALL_OW 174
// if IsOk ( us_bun1 ) then
5578: LD_INT 80
5580: PPUSH
5581: CALL_OW 302
5585: IFFALSE 5603
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5587: LD_VAR 0 1
5591: PUSH
5592: LD_INT 1
5594: ARRAY
5595: PPUSH
5596: LD_INT 80
5598: PPUSH
5599: CALL_OW 180
// end ; end ;
5603: PPOPN 2
5605: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5606: LD_EXP 7
5610: NOT
5611: PUSH
5612: LD_INT 9
5614: PPUSH
5615: LD_INT 22
5617: PUSH
5618: LD_INT 1
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 21
5627: PUSH
5628: LD_INT 3
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: PUSH
5635: LD_INT 3
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: PUSH
5652: EMPTY
5653: LIST
5654: LIST
5655: LIST
5656: PPUSH
5657: CALL_OW 70
5661: AND
5662: IFFALSE 6073
5664: GO 5666
5666: DISABLE
5667: LD_INT 0
5669: PPUSH
5670: PPUSH
5671: PPUSH
5672: PPUSH
// begin enable ;
5673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5674: LD_ADDR_VAR 0 2
5678: PUSH
5679: LD_INT 22
5681: PUSH
5682: LD_INT 1
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: PUSH
5689: LD_INT 25
5691: PUSH
5692: LD_INT 2
5694: PUSH
5695: EMPTY
5696: LIST
5697: LIST
5698: PUSH
5699: LD_INT 24
5701: PUSH
5702: LD_INT 1000
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: LIST
5713: PPUSH
5714: CALL_OW 69
5718: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5719: LD_ADDR_VAR 0 3
5723: PUSH
5724: LD_INT 22
5726: PUSH
5727: LD_INT 1
5729: PUSH
5730: EMPTY
5731: LIST
5732: LIST
5733: PUSH
5734: LD_INT 25
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: PUSH
5744: LD_INT 3
5746: PUSH
5747: LD_INT 24
5749: PUSH
5750: LD_INT 750
5752: PUSH
5753: EMPTY
5754: LIST
5755: LIST
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: PPUSH
5766: CALL_OW 69
5770: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5771: LD_ADDR_VAR 0 4
5775: PUSH
5776: LD_INT 9
5778: PPUSH
5779: LD_INT 22
5781: PUSH
5782: LD_INT 1
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: LD_INT 21
5791: PUSH
5792: LD_INT 3
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 3
5801: PUSH
5802: LD_INT 24
5804: PUSH
5805: LD_INT 1000
5807: PUSH
5808: EMPTY
5809: LIST
5810: LIST
5811: PUSH
5812: EMPTY
5813: LIST
5814: LIST
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: PPUSH
5821: CALL_OW 70
5825: PUSH
5826: LD_INT 1
5828: DIFF
5829: ST_TO_ADDR
// if not tmp and not tmp2 then
5830: LD_VAR 0 2
5834: NOT
5835: PUSH
5836: LD_VAR 0 3
5840: NOT
5841: AND
5842: IFFALSE 5846
// exit ;
5844: GO 6073
// if tmp and b then
5846: LD_VAR 0 2
5850: PUSH
5851: LD_VAR 0 4
5855: AND
5856: IFFALSE 5986
// for i in tmp do
5858: LD_ADDR_VAR 0 1
5862: PUSH
5863: LD_VAR 0 2
5867: PUSH
5868: FOR_IN
5869: IFFALSE 5984
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5871: LD_VAR 0 1
5875: PPUSH
5876: CALL_OW 110
5880: PUSH
5881: LD_INT 1
5883: EQUAL
5884: PUSH
5885: LD_VAR 0 1
5889: PPUSH
5890: CALL_OW 256
5894: PUSH
5895: LD_INT 1000
5897: LESS
5898: AND
5899: IFFALSE 5905
// continue else
5901: GO 5868
5903: GO 5932
// if GetTag ( i ) = 1 then
5905: LD_VAR 0 1
5909: PPUSH
5910: CALL_OW 110
5914: PUSH
5915: LD_INT 1
5917: EQUAL
5918: IFFALSE 5932
// SetTag ( i , 0 ) ;
5920: LD_VAR 0 1
5924: PPUSH
5925: LD_INT 0
5927: PPUSH
5928: CALL_OW 109
// if IsInUnit ( i ) then
5932: LD_VAR 0 1
5936: PPUSH
5937: CALL_OW 310
5941: IFFALSE 5952
// ComExitBuilding ( i ) ;
5943: LD_VAR 0 1
5947: PPUSH
5948: CALL_OW 122
// if not HasTask ( i ) then
5952: LD_VAR 0 1
5956: PPUSH
5957: CALL_OW 314
5961: NOT
5962: IFFALSE 5982
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5964: LD_VAR 0 1
5968: PPUSH
5969: LD_VAR 0 4
5973: PUSH
5974: LD_INT 1
5976: ARRAY
5977: PPUSH
5978: CALL_OW 190
// end ;
5982: GO 5868
5984: POP
5985: POP
// if tmp2 then
5986: LD_VAR 0 3
5990: IFFALSE 6073
// for i in tmp2 do
5992: LD_ADDR_VAR 0 1
5996: PUSH
5997: LD_VAR 0 3
6001: PUSH
6002: FOR_IN
6003: IFFALSE 6071
// begin if not GetTag ( i ) = 1 then
6005: LD_VAR 0 1
6009: PPUSH
6010: CALL_OW 110
6014: PUSH
6015: LD_INT 1
6017: EQUAL
6018: NOT
6019: IFFALSE 6033
// SetTag ( i , 1 ) ;
6021: LD_VAR 0 1
6025: PPUSH
6026: LD_INT 1
6028: PPUSH
6029: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
6033: LD_VAR 0 1
6037: PPUSH
6038: LD_INT 88
6040: PPUSH
6041: LD_INT 75
6043: PPUSH
6044: CALL_OW 297
6048: PUSH
6049: LD_INT 6
6051: GREATER
6052: IFFALSE 6069
// ComMoveXY ( i , 88 , 75 ) ;
6054: LD_VAR 0 1
6058: PPUSH
6059: LD_INT 88
6061: PPUSH
6062: LD_INT 75
6064: PPUSH
6065: CALL_OW 111
// end ;
6069: GO 6002
6071: POP
6072: POP
// end ;
6073: PPOPN 4
6075: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
6076: LD_EXP 7
6080: NOT
6081: PUSH
6082: LD_EXP 9
6086: AND
6087: PUSH
6088: LD_INT 9
6090: PPUSH
6091: LD_INT 22
6093: PUSH
6094: LD_INT 1
6096: PUSH
6097: EMPTY
6098: LIST
6099: LIST
6100: PUSH
6101: LD_INT 21
6103: PUSH
6104: LD_INT 1
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 3
6113: PUSH
6114: LD_INT 24
6116: PUSH
6117: LD_INT 1000
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: PPUSH
6133: CALL_OW 70
6137: AND
6138: IFFALSE 6311
6140: GO 6142
6142: DISABLE
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
6147: PPUSH
// begin enable ;
6148: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
6149: LD_ADDR_VAR 0 2
6153: PUSH
6154: LD_INT 22
6156: PUSH
6157: LD_INT 1
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: PUSH
6164: LD_INT 25
6166: PUSH
6167: LD_INT 4
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: EMPTY
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 69
6182: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6183: LD_ADDR_VAR 0 3
6187: PUSH
6188: LD_INT 9
6190: PPUSH
6191: LD_INT 22
6193: PUSH
6194: LD_INT 1
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 21
6203: PUSH
6204: LD_INT 1
6206: PUSH
6207: EMPTY
6208: LIST
6209: LIST
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: LD_INT 24
6216: PUSH
6217: LD_INT 1000
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: LIST
6232: PPUSH
6233: CALL_OW 70
6237: ST_TO_ADDR
// if not sci or not tmp then
6238: LD_VAR 0 2
6242: NOT
6243: PUSH
6244: LD_VAR 0 3
6248: NOT
6249: OR
6250: IFFALSE 6254
// exit ;
6252: GO 6311
// for i in sci do
6254: LD_ADDR_VAR 0 1
6258: PUSH
6259: LD_VAR 0 2
6263: PUSH
6264: FOR_IN
6265: IFFALSE 6309
// if IsInUnit ( i ) then
6267: LD_VAR 0 1
6271: PPUSH
6272: CALL_OW 310
6276: IFFALSE 6289
// ComExitBuilding ( i ) else
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 122
6287: GO 6307
// ComHeal ( i , tmp [ 1 ] ) ;
6289: LD_VAR 0 1
6293: PPUSH
6294: LD_VAR 0 3
6298: PUSH
6299: LD_INT 1
6301: ARRAY
6302: PPUSH
6303: CALL_OW 128
6307: GO 6264
6309: POP
6310: POP
// end ;
6311: PPOPN 3
6313: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6314: LD_EXP 7
6318: NOT
6319: PUSH
6320: LD_EXP 9
6324: AND
6325: PUSH
6326: LD_INT 1
6328: PPUSH
6329: CALL_OW 302
6333: AND
6334: PUSH
6335: LD_INT 9
6337: PPUSH
6338: LD_INT 22
6340: PUSH
6341: LD_INT 1
6343: PUSH
6344: EMPTY
6345: LIST
6346: LIST
6347: PUSH
6348: LD_INT 21
6350: PUSH
6351: LD_INT 1
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: LD_INT 24
6363: PUSH
6364: LD_INT 1000
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: PPUSH
6380: CALL_OW 70
6384: NOT
6385: AND
6386: PUSH
6387: LD_INT 22
6389: PUSH
6390: LD_INT 1
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PUSH
6397: LD_INT 25
6399: PUSH
6400: LD_INT 4
6402: PUSH
6403: EMPTY
6404: LIST
6405: LIST
6406: PUSH
6407: LD_INT 56
6409: PUSH
6410: EMPTY
6411: LIST
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: PPUSH
6418: CALL_OW 69
6422: AND
6423: IFFALSE 6516
6425: GO 6427
6427: DISABLE
6428: LD_INT 0
6430: PPUSH
// begin enable ;
6431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_INT 22
6439: PUSH
6440: LD_INT 1
6442: PUSH
6443: EMPTY
6444: LIST
6445: LIST
6446: PUSH
6447: LD_INT 25
6449: PUSH
6450: LD_INT 4
6452: PUSH
6453: EMPTY
6454: LIST
6455: LIST
6456: PUSH
6457: LD_INT 56
6459: PUSH
6460: EMPTY
6461: LIST
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 69
6472: PUSH
6473: FOR_IN
6474: IFFALSE 6514
// if not GetTag ( i ) and not HasTask ( i ) then
6476: LD_VAR 0 1
6480: PPUSH
6481: CALL_OW 110
6485: NOT
6486: PUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 314
6496: NOT
6497: AND
6498: IFFALSE 6512
// ComEnterUnit ( i , us_lab ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 120
6512: GO 6473
6514: POP
6515: POP
// end ;
6516: PPOPN 1
6518: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6519: LD_EXP 7
6523: NOT
6524: PUSH
6525: LD_INT 9
6527: PPUSH
6528: LD_INT 22
6530: PUSH
6531: LD_INT 1
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: LD_INT 24
6553: PUSH
6554: LD_INT 1000
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: LIST
6569: PPUSH
6570: CALL_OW 70
6574: NOT
6575: AND
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_INT 1
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PUSH
6587: LD_INT 25
6589: PUSH
6590: LD_INT 2
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: PUSH
6597: LD_INT 56
6599: PUSH
6600: EMPTY
6601: LIST
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: LIST
6607: PPUSH
6608: CALL_OW 69
6612: AND
6613: IFFALSE 6706
6615: GO 6617
6617: DISABLE
6618: LD_INT 0
6620: PPUSH
// begin enable ;
6621: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_INT 22
6629: PUSH
6630: LD_INT 1
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: PUSH
6637: LD_INT 25
6639: PUSH
6640: LD_INT 2
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 56
6649: PUSH
6650: EMPTY
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PUSH
6663: FOR_IN
6664: IFFALSE 6704
// if not HasTask ( i ) and not GetTag ( i ) then
6666: LD_VAR 0 1
6670: PPUSH
6671: CALL_OW 314
6675: NOT
6676: PUSH
6677: LD_VAR 0 1
6681: PPUSH
6682: CALL_OW 110
6686: NOT
6687: AND
6688: IFFALSE 6702
// ComEnterUnit ( i , us_depot ) ;
6690: LD_VAR 0 1
6694: PPUSH
6695: LD_INT 5
6697: PPUSH
6698: CALL_OW 120
6702: GO 6663
6704: POP
6705: POP
// end ;
6706: PPOPN 1
6708: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6709: LD_EXP 9
6713: PUSH
6714: LD_INT 0
6716: LESSEQUAL
6717: PUSH
6718: LD_EXP 18
6722: PPUSH
6723: CALL_OW 301
6727: OR
6728: PUSH
6729: LD_INT 22
6731: PUSH
6732: LD_INT 1
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: LD_INT 25
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: CALL_OW 69
6757: AND
6758: IFFALSE 6799
6760: GO 6762
6762: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6763: LD_INT 22
6765: PUSH
6766: LD_INT 1
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 25
6775: PUSH
6776: LD_INT 2
6778: PUSH
6779: EMPTY
6780: LIST
6781: LIST
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PPUSH
6787: CALL_OW 69
6791: PPUSH
6792: LD_INT 1
6794: PPUSH
6795: CALL_OW 167
6799: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6800: LD_EXP 7
6804: NOT
6805: PUSH
6806: LD_INT 7
6808: PPUSH
6809: LD_INT 22
6811: PUSH
6812: LD_INT 7
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PPUSH
6819: CALL_OW 70
6823: AND
6824: IFFALSE 6933
6826: GO 6828
6828: DISABLE
6829: LD_INT 0
6831: PPUSH
// begin wait ( 0 0$2 ) ;
6832: LD_INT 70
6834: PPUSH
6835: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , class_soldier ] , [ f_class , class_sniper ] ] ] ) do
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: LD_INT 25
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 25
6869: PUSH
6870: LD_INT 5
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PUSH
6882: EMPTY
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: PUSH
6891: FOR_IN
6892: IFFALSE 6931
// begin if IsInUnit ( i ) then
6894: LD_VAR 0 1
6898: PPUSH
6899: CALL_OW 310
6903: IFFALSE 6914
// ComExitBuilding ( i ) ;
6905: LD_VAR 0 1
6909: PPUSH
6910: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: LD_INT 92
6921: PPUSH
6922: LD_INT 78
6924: PPUSH
6925: CALL_OW 174
// end ;
6929: GO 6891
6931: POP
6932: POP
// end ; end_of_file
6933: PPOPN 1
6935: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6936: LD_VAR 0 1
6940: PPUSH
6941: LD_VAR 0 2
6945: PPUSH
6946: LD_VAR 0 3
6950: PPUSH
6951: CALL 1579 0 3
6955: PPOPN 3
6957: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6958: LD_EXP 14
6962: PPUSH
6963: CALL_OW 257
6967: PUSH
6968: LD_INT 4
6970: EQUAL
6971: PUSH
6972: LD_EXP 15
6976: PPUSH
6977: CALL_OW 257
6981: PUSH
6982: LD_INT 4
6984: EQUAL
6985: OR
6986: PUSH
6987: LD_INT 22
6989: PUSH
6990: LD_INT 7
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 21
6999: PUSH
7000: LD_INT 3
7002: PUSH
7003: EMPTY
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: OR
7016: IFFALSE 7020
// exit ;
7018: GO 7058
// if un = JMM then
7020: LD_VAR 0 1
7024: PUSH
7025: LD_EXP 14
7029: EQUAL
7030: IFFALSE 7039
// YouLost ( JMM ) ;
7032: LD_STRING JMM
7034: PPUSH
7035: CALL_OW 104
// if un = Burlak then
7039: LD_VAR 0 1
7043: PUSH
7044: LD_EXP 15
7048: EQUAL
7049: IFFALSE 7058
// YouLost ( Burlak ) ;
7051: LD_STRING Burlak
7053: PPUSH
7054: CALL_OW 104
// end ;
7058: PPOPN 1
7060: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
7061: LD_VAR 0 1
7065: PPUSH
7066: CALL 23369 0 1
// if un = JMM then
7070: LD_VAR 0 1
7074: PUSH
7075: LD_EXP 14
7079: EQUAL
7080: IFFALSE 7089
// YouLost ( JMM ) ;
7082: LD_STRING JMM
7084: PPUSH
7085: CALL_OW 104
// if un = Burlak then
7089: LD_VAR 0 1
7093: PUSH
7094: LD_EXP 15
7098: EQUAL
7099: IFFALSE 7108
// YouLost ( Burlak ) ;
7101: LD_STRING Burlak
7103: PPUSH
7104: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
7108: LD_VAR 0 1
7112: PUSH
7113: LD_INT 21
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PPUSH
7137: CALL_OW 69
7141: IN
7142: IFFALSE 7158
// killCounter := killCounter + 1 ;
7144: LD_ADDR_EXP 12
7148: PUSH
7149: LD_EXP 12
7153: PUSH
7154: LD_INT 1
7156: PLUS
7157: ST_TO_ADDR
// end ;
7158: PPOPN 1
7160: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
7161: LD_VAR 0 2
7165: PUSH
7166: LD_INT 7
7168: EQUAL
7169: PUSH
7170: LD_VAR 0 1
7174: PUSH
7175: LD_INT 2
7177: PUSH
7178: LD_INT 30
7180: PUSH
7181: LD_INT 31
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 30
7190: PUSH
7191: LD_INT 32
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 30
7200: PUSH
7201: LD_INT 33
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: LIST
7213: PPUSH
7214: CALL_OW 69
7218: IN
7219: AND
7220: IFFALSE 7236
// bunkerCounter := bunkerCounter + 1 ;
7222: LD_ADDR_EXP 13
7226: PUSH
7227: LD_EXP 13
7231: PUSH
7232: LD_INT 1
7234: PLUS
7235: ST_TO_ADDR
// end ;
7236: PPOPN 3
7238: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7239: LD_VAR 0 1
7243: PPUSH
7244: CALL_OW 255
7248: PUSH
7249: LD_INT 7
7251: EQUAL
7252: IFFALSE 7262
// artifactPickedUp := true ;
7254: LD_ADDR_EXP 6
7258: PUSH
7259: LD_INT 1
7261: ST_TO_ADDR
// end ;
7262: PPOPN 2
7264: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7265: LD_ADDR_EXP 6
7269: PUSH
7270: LD_INT 0
7272: ST_TO_ADDR
7273: PPOPN 2
7275: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7276: LD_VAR 0 1
7280: PPUSH
7281: LD_VAR 0 2
7285: PPUSH
7286: CALL 23427 0 2
// if GetSide ( vehicle ) <> 1 then
7290: LD_VAR 0 1
7294: PPUSH
7295: CALL_OW 255
7299: PUSH
7300: LD_INT 1
7302: NONEQUAL
7303: IFFALSE 7307
// exit ;
7305: GO 7354
// wait ( 0 0$5 ) ;
7307: LD_INT 175
7309: PPUSH
7310: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7314: LD_VAR 0 1
7318: PPUSH
7319: CALL_OW 263
7323: PUSH
7324: LD_INT 2
7326: EQUAL
7327: IFFALSE 7338
// Connect ( vehicle ) ;
7329: LD_VAR 0 1
7333: PPUSH
7334: CALL 37125 0 1
// vehGuard := vehGuard ^ vehicle ;
7338: LD_ADDR_EXP 23
7342: PUSH
7343: LD_EXP 23
7347: PUSH
7348: LD_VAR 0 1
7352: ADD
7353: ST_TO_ADDR
// end ;
7354: PPOPN 2
7356: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7357: LD_VAR 0 1
7361: PUSH
7362: LD_INT 1
7364: EQUAL
7365: PUSH
7366: LD_EXP 7
7370: NOT
7371: AND
7372: IFFALSE 7407
// begin planCaptured := true ;
7374: LD_ADDR_EXP 7
7378: PUSH
7379: LD_INT 1
7381: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7382: LD_STRING MEnd
7384: PPUSH
7385: CALL_OW 337
// canEnd := true ;
7389: LD_ADDR_EXP 10
7393: PUSH
7394: LD_INT 1
7396: ST_TO_ADDR
// missionTime := tick ;
7397: LD_ADDR_EXP 11
7401: PUSH
7402: LD_OWVAR 1
7406: ST_TO_ADDR
// end ; end ;
7407: PPOPN 3
7409: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7410: LD_VAR 0 1
7414: PPUSH
7415: CALL 23411 0 1
// end ; end_of_file end_of_file
7419: PPOPN 1
7421: END
// export globalGameSaveCounter ; every 0 0$1 do
7422: GO 7424
7424: DISABLE
// begin enable ;
7425: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7426: LD_STRING updateTimer(
7428: PUSH
7429: LD_OWVAR 1
7433: STR
7434: PUSH
7435: LD_STRING );
7437: STR
7438: PPUSH
7439: CALL_OW 559
// end ;
7443: END
// every 0 0$1 do
7444: GO 7446
7446: DISABLE
// begin globalGameSaveCounter := 0 ;
7447: LD_ADDR_EXP 24
7451: PUSH
7452: LD_INT 0
7454: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7455: LD_STRING setGameSaveCounter(0)
7457: PPUSH
7458: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7462: LD_STRING initStreamRollete();
7464: PPUSH
7465: CALL_OW 559
// InitStreamMode ;
7469: CALL 8812 0 0
// DefineStreamItems ( false ) ;
7473: LD_INT 0
7475: PPUSH
7476: CALL 9276 0 1
// end ;
7480: END
// export function SOS_MapStart ( ) ; begin
7481: LD_INT 0
7483: PPUSH
// if streamModeActive then
7484: LD_EXP 25
7488: IFFALSE 7497
// DefineStreamItems ( true ) ;
7490: LD_INT 1
7492: PPUSH
7493: CALL 9276 0 1
// UpdateLuaVariables ( ) ;
7497: CALL 7514 0 0
// UpdateFactoryWaypoints ( ) ;
7501: CALL 22278 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7505: CALL 22530 0 0
// end ;
7509: LD_VAR 0 1
7513: RET
// function UpdateLuaVariables ( ) ; begin
7514: LD_INT 0
7516: PPUSH
// if globalGameSaveCounter then
7517: LD_EXP 24
7521: IFFALSE 7555
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7523: LD_ADDR_EXP 24
7527: PUSH
7528: LD_EXP 24
7532: PPUSH
7533: CALL 67889 0 1
7537: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7538: LD_STRING setGameSaveCounter(
7540: PUSH
7541: LD_EXP 24
7545: STR
7546: PUSH
7547: LD_STRING )
7549: STR
7550: PPUSH
7551: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7555: LD_STRING setGameDifficulty(
7557: PUSH
7558: LD_OWVAR 67
7562: STR
7563: PUSH
7564: LD_STRING )
7566: STR
7567: PPUSH
7568: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
7572: LD_STRING displayDifficulty(
7574: PUSH
7575: LD_OWVAR 67
7579: STR
7580: PUSH
7581: LD_STRING )
7583: STR
7584: PPUSH
7585: CALL_OW 559
// end ;
7589: LD_VAR 0 1
7593: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7594: LD_INT 0
7596: PPUSH
// if p2 = stream_mode then
7597: LD_VAR 0 2
7601: PUSH
7602: LD_INT 100
7604: EQUAL
7605: IFFALSE 8608
// begin if not StreamModeActive then
7607: LD_EXP 25
7611: NOT
7612: IFFALSE 7622
// StreamModeActive := true ;
7614: LD_ADDR_EXP 25
7618: PUSH
7619: LD_INT 1
7621: ST_TO_ADDR
// if p3 = 0 then
7622: LD_VAR 0 3
7626: PUSH
7627: LD_INT 0
7629: EQUAL
7630: IFFALSE 7636
// InitStreamMode ;
7632: CALL 8812 0 0
// if p3 = 1 then
7636: LD_VAR 0 3
7640: PUSH
7641: LD_INT 1
7643: EQUAL
7644: IFFALSE 7654
// sRocket := true ;
7646: LD_ADDR_EXP 30
7650: PUSH
7651: LD_INT 1
7653: ST_TO_ADDR
// if p3 = 2 then
7654: LD_VAR 0 3
7658: PUSH
7659: LD_INT 2
7661: EQUAL
7662: IFFALSE 7672
// sSpeed := true ;
7664: LD_ADDR_EXP 29
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// if p3 = 3 then
7672: LD_VAR 0 3
7676: PUSH
7677: LD_INT 3
7679: EQUAL
7680: IFFALSE 7690
// sEngine := true ;
7682: LD_ADDR_EXP 31
7686: PUSH
7687: LD_INT 1
7689: ST_TO_ADDR
// if p3 = 4 then
7690: LD_VAR 0 3
7694: PUSH
7695: LD_INT 4
7697: EQUAL
7698: IFFALSE 7708
// sSpec := true ;
7700: LD_ADDR_EXP 28
7704: PUSH
7705: LD_INT 1
7707: ST_TO_ADDR
// if p3 = 5 then
7708: LD_VAR 0 3
7712: PUSH
7713: LD_INT 5
7715: EQUAL
7716: IFFALSE 7726
// sLevel := true ;
7718: LD_ADDR_EXP 32
7722: PUSH
7723: LD_INT 1
7725: ST_TO_ADDR
// if p3 = 6 then
7726: LD_VAR 0 3
7730: PUSH
7731: LD_INT 6
7733: EQUAL
7734: IFFALSE 7744
// sArmoury := true ;
7736: LD_ADDR_EXP 33
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// if p3 = 7 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 7
7751: EQUAL
7752: IFFALSE 7762
// sRadar := true ;
7754: LD_ADDR_EXP 34
7758: PUSH
7759: LD_INT 1
7761: ST_TO_ADDR
// if p3 = 8 then
7762: LD_VAR 0 3
7766: PUSH
7767: LD_INT 8
7769: EQUAL
7770: IFFALSE 7780
// sBunker := true ;
7772: LD_ADDR_EXP 35
7776: PUSH
7777: LD_INT 1
7779: ST_TO_ADDR
// if p3 = 9 then
7780: LD_VAR 0 3
7784: PUSH
7785: LD_INT 9
7787: EQUAL
7788: IFFALSE 7798
// sHack := true ;
7790: LD_ADDR_EXP 36
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// if p3 = 10 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 10
7805: EQUAL
7806: IFFALSE 7816
// sFire := true ;
7808: LD_ADDR_EXP 37
7812: PUSH
7813: LD_INT 1
7815: ST_TO_ADDR
// if p3 = 11 then
7816: LD_VAR 0 3
7820: PUSH
7821: LD_INT 11
7823: EQUAL
7824: IFFALSE 7834
// sRefresh := true ;
7826: LD_ADDR_EXP 38
7830: PUSH
7831: LD_INT 1
7833: ST_TO_ADDR
// if p3 = 12 then
7834: LD_VAR 0 3
7838: PUSH
7839: LD_INT 12
7841: EQUAL
7842: IFFALSE 7852
// sExp := true ;
7844: LD_ADDR_EXP 39
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// if p3 = 13 then
7852: LD_VAR 0 3
7856: PUSH
7857: LD_INT 13
7859: EQUAL
7860: IFFALSE 7870
// sDepot := true ;
7862: LD_ADDR_EXP 40
7866: PUSH
7867: LD_INT 1
7869: ST_TO_ADDR
// if p3 = 14 then
7870: LD_VAR 0 3
7874: PUSH
7875: LD_INT 14
7877: EQUAL
7878: IFFALSE 7888
// sFlag := true ;
7880: LD_ADDR_EXP 41
7884: PUSH
7885: LD_INT 1
7887: ST_TO_ADDR
// if p3 = 15 then
7888: LD_VAR 0 3
7892: PUSH
7893: LD_INT 15
7895: EQUAL
7896: IFFALSE 7906
// sKamikadze := true ;
7898: LD_ADDR_EXP 49
7902: PUSH
7903: LD_INT 1
7905: ST_TO_ADDR
// if p3 = 16 then
7906: LD_VAR 0 3
7910: PUSH
7911: LD_INT 16
7913: EQUAL
7914: IFFALSE 7924
// sTroll := true ;
7916: LD_ADDR_EXP 50
7920: PUSH
7921: LD_INT 1
7923: ST_TO_ADDR
// if p3 = 17 then
7924: LD_VAR 0 3
7928: PUSH
7929: LD_INT 17
7931: EQUAL
7932: IFFALSE 7942
// sSlow := true ;
7934: LD_ADDR_EXP 51
7938: PUSH
7939: LD_INT 1
7941: ST_TO_ADDR
// if p3 = 18 then
7942: LD_VAR 0 3
7946: PUSH
7947: LD_INT 18
7949: EQUAL
7950: IFFALSE 7960
// sLack := true ;
7952: LD_ADDR_EXP 52
7956: PUSH
7957: LD_INT 1
7959: ST_TO_ADDR
// if p3 = 19 then
7960: LD_VAR 0 3
7964: PUSH
7965: LD_INT 19
7967: EQUAL
7968: IFFALSE 7978
// sTank := true ;
7970: LD_ADDR_EXP 54
7974: PUSH
7975: LD_INT 1
7977: ST_TO_ADDR
// if p3 = 20 then
7978: LD_VAR 0 3
7982: PUSH
7983: LD_INT 20
7985: EQUAL
7986: IFFALSE 7996
// sRemote := true ;
7988: LD_ADDR_EXP 55
7992: PUSH
7993: LD_INT 1
7995: ST_TO_ADDR
// if p3 = 21 then
7996: LD_VAR 0 3
8000: PUSH
8001: LD_INT 21
8003: EQUAL
8004: IFFALSE 8014
// sPowell := true ;
8006: LD_ADDR_EXP 56
8010: PUSH
8011: LD_INT 1
8013: ST_TO_ADDR
// if p3 = 22 then
8014: LD_VAR 0 3
8018: PUSH
8019: LD_INT 22
8021: EQUAL
8022: IFFALSE 8032
// sTeleport := true ;
8024: LD_ADDR_EXP 59
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// if p3 = 23 then
8032: LD_VAR 0 3
8036: PUSH
8037: LD_INT 23
8039: EQUAL
8040: IFFALSE 8050
// sOilTower := true ;
8042: LD_ADDR_EXP 61
8046: PUSH
8047: LD_INT 1
8049: ST_TO_ADDR
// if p3 = 24 then
8050: LD_VAR 0 3
8054: PUSH
8055: LD_INT 24
8057: EQUAL
8058: IFFALSE 8068
// sShovel := true ;
8060: LD_ADDR_EXP 62
8064: PUSH
8065: LD_INT 1
8067: ST_TO_ADDR
// if p3 = 25 then
8068: LD_VAR 0 3
8072: PUSH
8073: LD_INT 25
8075: EQUAL
8076: IFFALSE 8086
// sSheik := true ;
8078: LD_ADDR_EXP 63
8082: PUSH
8083: LD_INT 1
8085: ST_TO_ADDR
// if p3 = 26 then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 26
8093: EQUAL
8094: IFFALSE 8104
// sEarthquake := true ;
8096: LD_ADDR_EXP 65
8100: PUSH
8101: LD_INT 1
8103: ST_TO_ADDR
// if p3 = 27 then
8104: LD_VAR 0 3
8108: PUSH
8109: LD_INT 27
8111: EQUAL
8112: IFFALSE 8122
// sAI := true ;
8114: LD_ADDR_EXP 66
8118: PUSH
8119: LD_INT 1
8121: ST_TO_ADDR
// if p3 = 28 then
8122: LD_VAR 0 3
8126: PUSH
8127: LD_INT 28
8129: EQUAL
8130: IFFALSE 8140
// sCargo := true ;
8132: LD_ADDR_EXP 69
8136: PUSH
8137: LD_INT 1
8139: ST_TO_ADDR
// if p3 = 29 then
8140: LD_VAR 0 3
8144: PUSH
8145: LD_INT 29
8147: EQUAL
8148: IFFALSE 8158
// sDLaser := true ;
8150: LD_ADDR_EXP 70
8154: PUSH
8155: LD_INT 1
8157: ST_TO_ADDR
// if p3 = 30 then
8158: LD_VAR 0 3
8162: PUSH
8163: LD_INT 30
8165: EQUAL
8166: IFFALSE 8176
// sExchange := true ;
8168: LD_ADDR_EXP 71
8172: PUSH
8173: LD_INT 1
8175: ST_TO_ADDR
// if p3 = 31 then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 31
8183: EQUAL
8184: IFFALSE 8194
// sFac := true ;
8186: LD_ADDR_EXP 72
8190: PUSH
8191: LD_INT 1
8193: ST_TO_ADDR
// if p3 = 32 then
8194: LD_VAR 0 3
8198: PUSH
8199: LD_INT 32
8201: EQUAL
8202: IFFALSE 8212
// sPower := true ;
8204: LD_ADDR_EXP 73
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// if p3 = 33 then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 33
8219: EQUAL
8220: IFFALSE 8230
// sRandom := true ;
8222: LD_ADDR_EXP 74
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// if p3 = 34 then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 34
8237: EQUAL
8238: IFFALSE 8248
// sShield := true ;
8240: LD_ADDR_EXP 75
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// if p3 = 35 then
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 35
8255: EQUAL
8256: IFFALSE 8266
// sTime := true ;
8258: LD_ADDR_EXP 76
8262: PUSH
8263: LD_INT 1
8265: ST_TO_ADDR
// if p3 = 36 then
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 36
8273: EQUAL
8274: IFFALSE 8284
// sTools := true ;
8276: LD_ADDR_EXP 77
8280: PUSH
8281: LD_INT 1
8283: ST_TO_ADDR
// if p3 = 101 then
8284: LD_VAR 0 3
8288: PUSH
8289: LD_INT 101
8291: EQUAL
8292: IFFALSE 8302
// sSold := true ;
8294: LD_ADDR_EXP 42
8298: PUSH
8299: LD_INT 1
8301: ST_TO_ADDR
// if p3 = 102 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 102
8309: EQUAL
8310: IFFALSE 8320
// sDiff := true ;
8312: LD_ADDR_EXP 43
8316: PUSH
8317: LD_INT 1
8319: ST_TO_ADDR
// if p3 = 103 then
8320: LD_VAR 0 3
8324: PUSH
8325: LD_INT 103
8327: EQUAL
8328: IFFALSE 8338
// sFog := true ;
8330: LD_ADDR_EXP 46
8334: PUSH
8335: LD_INT 1
8337: ST_TO_ADDR
// if p3 = 104 then
8338: LD_VAR 0 3
8342: PUSH
8343: LD_INT 104
8345: EQUAL
8346: IFFALSE 8356
// sReset := true ;
8348: LD_ADDR_EXP 47
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// if p3 = 105 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 105
8363: EQUAL
8364: IFFALSE 8374
// sSun := true ;
8366: LD_ADDR_EXP 48
8370: PUSH
8371: LD_INT 1
8373: ST_TO_ADDR
// if p3 = 106 then
8374: LD_VAR 0 3
8378: PUSH
8379: LD_INT 106
8381: EQUAL
8382: IFFALSE 8392
// sTiger := true ;
8384: LD_ADDR_EXP 44
8388: PUSH
8389: LD_INT 1
8391: ST_TO_ADDR
// if p3 = 107 then
8392: LD_VAR 0 3
8396: PUSH
8397: LD_INT 107
8399: EQUAL
8400: IFFALSE 8410
// sBomb := true ;
8402: LD_ADDR_EXP 45
8406: PUSH
8407: LD_INT 1
8409: ST_TO_ADDR
// if p3 = 108 then
8410: LD_VAR 0 3
8414: PUSH
8415: LD_INT 108
8417: EQUAL
8418: IFFALSE 8428
// sWound := true ;
8420: LD_ADDR_EXP 53
8424: PUSH
8425: LD_INT 1
8427: ST_TO_ADDR
// if p3 = 109 then
8428: LD_VAR 0 3
8432: PUSH
8433: LD_INT 109
8435: EQUAL
8436: IFFALSE 8446
// sBetray := true ;
8438: LD_ADDR_EXP 57
8442: PUSH
8443: LD_INT 1
8445: ST_TO_ADDR
// if p3 = 110 then
8446: LD_VAR 0 3
8450: PUSH
8451: LD_INT 110
8453: EQUAL
8454: IFFALSE 8464
// sContamin := true ;
8456: LD_ADDR_EXP 58
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// if p3 = 111 then
8464: LD_VAR 0 3
8468: PUSH
8469: LD_INT 111
8471: EQUAL
8472: IFFALSE 8482
// sOil := true ;
8474: LD_ADDR_EXP 60
8478: PUSH
8479: LD_INT 1
8481: ST_TO_ADDR
// if p3 = 112 then
8482: LD_VAR 0 3
8486: PUSH
8487: LD_INT 112
8489: EQUAL
8490: IFFALSE 8500
// sStu := true ;
8492: LD_ADDR_EXP 64
8496: PUSH
8497: LD_INT 1
8499: ST_TO_ADDR
// if p3 = 113 then
8500: LD_VAR 0 3
8504: PUSH
8505: LD_INT 113
8507: EQUAL
8508: IFFALSE 8518
// sBazooka := true ;
8510: LD_ADDR_EXP 67
8514: PUSH
8515: LD_INT 1
8517: ST_TO_ADDR
// if p3 = 114 then
8518: LD_VAR 0 3
8522: PUSH
8523: LD_INT 114
8525: EQUAL
8526: IFFALSE 8536
// sMortar := true ;
8528: LD_ADDR_EXP 68
8532: PUSH
8533: LD_INT 1
8535: ST_TO_ADDR
// if p3 = 115 then
8536: LD_VAR 0 3
8540: PUSH
8541: LD_INT 115
8543: EQUAL
8544: IFFALSE 8554
// sRanger := true ;
8546: LD_ADDR_EXP 78
8550: PUSH
8551: LD_INT 1
8553: ST_TO_ADDR
// if p3 = 116 then
8554: LD_VAR 0 3
8558: PUSH
8559: LD_INT 116
8561: EQUAL
8562: IFFALSE 8572
// sComputer := true ;
8564: LD_ADDR_EXP 79
8568: PUSH
8569: LD_INT 1
8571: ST_TO_ADDR
// if p3 = 117 then
8572: LD_VAR 0 3
8576: PUSH
8577: LD_INT 117
8579: EQUAL
8580: IFFALSE 8590
// s30 := true ;
8582: LD_ADDR_EXP 80
8586: PUSH
8587: LD_INT 1
8589: ST_TO_ADDR
// if p3 = 118 then
8590: LD_VAR 0 3
8594: PUSH
8595: LD_INT 118
8597: EQUAL
8598: IFFALSE 8608
// s60 := true ;
8600: LD_ADDR_EXP 81
8604: PUSH
8605: LD_INT 1
8607: ST_TO_ADDR
// end ; if p2 = hack_mode then
8608: LD_VAR 0 2
8612: PUSH
8613: LD_INT 101
8615: EQUAL
8616: IFFALSE 8744
// begin case p3 of 1 :
8618: LD_VAR 0 3
8622: PUSH
8623: LD_INT 1
8625: DOUBLE
8626: EQUAL
8627: IFTRUE 8631
8629: GO 8638
8631: POP
// hHackUnlimitedResources ; 2 :
8632: CALL 20891 0 0
8636: GO 8744
8638: LD_INT 2
8640: DOUBLE
8641: EQUAL
8642: IFTRUE 8646
8644: GO 8653
8646: POP
// hHackSetLevel10 ; 3 :
8647: CALL 21024 0 0
8651: GO 8744
8653: LD_INT 3
8655: DOUBLE
8656: EQUAL
8657: IFTRUE 8661
8659: GO 8668
8661: POP
// hHackSetLevel10YourUnits ; 4 :
8662: CALL 21109 0 0
8666: GO 8744
8668: LD_INT 4
8670: DOUBLE
8671: EQUAL
8672: IFTRUE 8676
8674: GO 8683
8676: POP
// hHackInvincible ; 5 :
8677: CALL 21557 0 0
8681: GO 8744
8683: LD_INT 5
8685: DOUBLE
8686: EQUAL
8687: IFTRUE 8691
8689: GO 8698
8691: POP
// hHackInvisible ; 6 :
8692: CALL 21668 0 0
8696: GO 8744
8698: LD_INT 6
8700: DOUBLE
8701: EQUAL
8702: IFTRUE 8706
8704: GO 8713
8706: POP
// hHackChangeYourSide ; 7 :
8707: CALL 21725 0 0
8711: GO 8744
8713: LD_INT 7
8715: DOUBLE
8716: EQUAL
8717: IFTRUE 8721
8719: GO 8728
8721: POP
// hHackChangeUnitSide ; 8 :
8722: CALL 21767 0 0
8726: GO 8744
8728: LD_INT 8
8730: DOUBLE
8731: EQUAL
8732: IFTRUE 8736
8734: GO 8743
8736: POP
// hHackFog ; end ;
8737: CALL 21868 0 0
8741: GO 8744
8743: POP
// end ; if p2 = game_save_mode then
8744: LD_VAR 0 2
8748: PUSH
8749: LD_INT 102
8751: EQUAL
8752: IFFALSE 8807
// begin if p3 = 1 then
8754: LD_VAR 0 3
8758: PUSH
8759: LD_INT 1
8761: EQUAL
8762: IFFALSE 8774
// globalGameSaveCounter := p4 ;
8764: LD_ADDR_EXP 24
8768: PUSH
8769: LD_VAR 0 4
8773: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8774: LD_VAR 0 3
8778: PUSH
8779: LD_INT 2
8781: EQUAL
8782: PUSH
8783: LD_EXP 24
8787: AND
8788: IFFALSE 8807
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8790: LD_STRING setGameSaveCounter(
8792: PUSH
8793: LD_EXP 24
8797: STR
8798: PUSH
8799: LD_STRING )
8801: STR
8802: PPUSH
8803: CALL_OW 559
// end ; end ;
8807: LD_VAR 0 7
8811: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
8812: LD_INT 0
8814: PPUSH
// streamModeActive := false ;
8815: LD_ADDR_EXP 25
8819: PUSH
8820: LD_INT 0
8822: ST_TO_ADDR
// normalCounter := 36 ;
8823: LD_ADDR_EXP 26
8827: PUSH
8828: LD_INT 36
8830: ST_TO_ADDR
// hardcoreCounter := 18 ;
8831: LD_ADDR_EXP 27
8835: PUSH
8836: LD_INT 18
8838: ST_TO_ADDR
// sRocket := false ;
8839: LD_ADDR_EXP 30
8843: PUSH
8844: LD_INT 0
8846: ST_TO_ADDR
// sSpeed := false ;
8847: LD_ADDR_EXP 29
8851: PUSH
8852: LD_INT 0
8854: ST_TO_ADDR
// sEngine := false ;
8855: LD_ADDR_EXP 31
8859: PUSH
8860: LD_INT 0
8862: ST_TO_ADDR
// sSpec := false ;
8863: LD_ADDR_EXP 28
8867: PUSH
8868: LD_INT 0
8870: ST_TO_ADDR
// sLevel := false ;
8871: LD_ADDR_EXP 32
8875: PUSH
8876: LD_INT 0
8878: ST_TO_ADDR
// sArmoury := false ;
8879: LD_ADDR_EXP 33
8883: PUSH
8884: LD_INT 0
8886: ST_TO_ADDR
// sRadar := false ;
8887: LD_ADDR_EXP 34
8891: PUSH
8892: LD_INT 0
8894: ST_TO_ADDR
// sBunker := false ;
8895: LD_ADDR_EXP 35
8899: PUSH
8900: LD_INT 0
8902: ST_TO_ADDR
// sHack := false ;
8903: LD_ADDR_EXP 36
8907: PUSH
8908: LD_INT 0
8910: ST_TO_ADDR
// sFire := false ;
8911: LD_ADDR_EXP 37
8915: PUSH
8916: LD_INT 0
8918: ST_TO_ADDR
// sRefresh := false ;
8919: LD_ADDR_EXP 38
8923: PUSH
8924: LD_INT 0
8926: ST_TO_ADDR
// sExp := false ;
8927: LD_ADDR_EXP 39
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// sDepot := false ;
8935: LD_ADDR_EXP 40
8939: PUSH
8940: LD_INT 0
8942: ST_TO_ADDR
// sFlag := false ;
8943: LD_ADDR_EXP 41
8947: PUSH
8948: LD_INT 0
8950: ST_TO_ADDR
// sKamikadze := false ;
8951: LD_ADDR_EXP 49
8955: PUSH
8956: LD_INT 0
8958: ST_TO_ADDR
// sTroll := false ;
8959: LD_ADDR_EXP 50
8963: PUSH
8964: LD_INT 0
8966: ST_TO_ADDR
// sSlow := false ;
8967: LD_ADDR_EXP 51
8971: PUSH
8972: LD_INT 0
8974: ST_TO_ADDR
// sLack := false ;
8975: LD_ADDR_EXP 52
8979: PUSH
8980: LD_INT 0
8982: ST_TO_ADDR
// sTank := false ;
8983: LD_ADDR_EXP 54
8987: PUSH
8988: LD_INT 0
8990: ST_TO_ADDR
// sRemote := false ;
8991: LD_ADDR_EXP 55
8995: PUSH
8996: LD_INT 0
8998: ST_TO_ADDR
// sPowell := false ;
8999: LD_ADDR_EXP 56
9003: PUSH
9004: LD_INT 0
9006: ST_TO_ADDR
// sTeleport := false ;
9007: LD_ADDR_EXP 59
9011: PUSH
9012: LD_INT 0
9014: ST_TO_ADDR
// sOilTower := false ;
9015: LD_ADDR_EXP 61
9019: PUSH
9020: LD_INT 0
9022: ST_TO_ADDR
// sShovel := false ;
9023: LD_ADDR_EXP 62
9027: PUSH
9028: LD_INT 0
9030: ST_TO_ADDR
// sSheik := false ;
9031: LD_ADDR_EXP 63
9035: PUSH
9036: LD_INT 0
9038: ST_TO_ADDR
// sEarthquake := false ;
9039: LD_ADDR_EXP 65
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// sAI := false ;
9047: LD_ADDR_EXP 66
9051: PUSH
9052: LD_INT 0
9054: ST_TO_ADDR
// sCargo := false ;
9055: LD_ADDR_EXP 69
9059: PUSH
9060: LD_INT 0
9062: ST_TO_ADDR
// sDLaser := false ;
9063: LD_ADDR_EXP 70
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sExchange := false ;
9071: LD_ADDR_EXP 71
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sFac := false ;
9079: LD_ADDR_EXP 72
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sPower := false ;
9087: LD_ADDR_EXP 73
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sRandom := false ;
9095: LD_ADDR_EXP 74
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sShield := false ;
9103: LD_ADDR_EXP 75
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sTime := false ;
9111: LD_ADDR_EXP 76
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sTools := false ;
9119: LD_ADDR_EXP 77
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sSold := false ;
9127: LD_ADDR_EXP 42
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sDiff := false ;
9135: LD_ADDR_EXP 43
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sFog := false ;
9143: LD_ADDR_EXP 46
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sReset := false ;
9151: LD_ADDR_EXP 47
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sSun := false ;
9159: LD_ADDR_EXP 48
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// sTiger := false ;
9167: LD_ADDR_EXP 44
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// sBomb := false ;
9175: LD_ADDR_EXP 45
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// sWound := false ;
9183: LD_ADDR_EXP 53
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// sBetray := false ;
9191: LD_ADDR_EXP 57
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// sContamin := false ;
9199: LD_ADDR_EXP 58
9203: PUSH
9204: LD_INT 0
9206: ST_TO_ADDR
// sOil := false ;
9207: LD_ADDR_EXP 60
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// sStu := false ;
9215: LD_ADDR_EXP 64
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// sBazooka := false ;
9223: LD_ADDR_EXP 67
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// sMortar := false ;
9231: LD_ADDR_EXP 68
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// sRanger := false ;
9239: LD_ADDR_EXP 78
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// sComputer := false ;
9247: LD_ADDR_EXP 79
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// s30 := false ;
9255: LD_ADDR_EXP 80
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// s60 := false ;
9263: LD_ADDR_EXP 81
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// end ;
9271: LD_VAR 0 1
9275: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9276: LD_INT 0
9278: PPUSH
9279: PPUSH
9280: PPUSH
9281: PPUSH
9282: PPUSH
9283: PPUSH
9284: PPUSH
// result := [ ] ;
9285: LD_ADDR_VAR 0 2
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// if campaign_id = 1 then
9292: LD_OWVAR 69
9296: PUSH
9297: LD_INT 1
9299: EQUAL
9300: IFFALSE 12466
// begin case mission_number of 1 :
9302: LD_OWVAR 70
9306: PUSH
9307: LD_INT 1
9309: DOUBLE
9310: EQUAL
9311: IFTRUE 9315
9313: GO 9391
9315: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9316: LD_ADDR_VAR 0 2
9320: PUSH
9321: LD_INT 2
9323: PUSH
9324: LD_INT 4
9326: PUSH
9327: LD_INT 11
9329: PUSH
9330: LD_INT 12
9332: PUSH
9333: LD_INT 15
9335: PUSH
9336: LD_INT 16
9338: PUSH
9339: LD_INT 22
9341: PUSH
9342: LD_INT 23
9344: PUSH
9345: LD_INT 26
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: PUSH
9359: LD_INT 101
9361: PUSH
9362: LD_INT 102
9364: PUSH
9365: LD_INT 106
9367: PUSH
9368: LD_INT 116
9370: PUSH
9371: LD_INT 117
9373: PUSH
9374: LD_INT 118
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: ST_TO_ADDR
9389: GO 12464
9391: LD_INT 2
9393: DOUBLE
9394: EQUAL
9395: IFTRUE 9399
9397: GO 9483
9399: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9400: LD_ADDR_VAR 0 2
9404: PUSH
9405: LD_INT 2
9407: PUSH
9408: LD_INT 4
9410: PUSH
9411: LD_INT 11
9413: PUSH
9414: LD_INT 12
9416: PUSH
9417: LD_INT 15
9419: PUSH
9420: LD_INT 16
9422: PUSH
9423: LD_INT 22
9425: PUSH
9426: LD_INT 23
9428: PUSH
9429: LD_INT 26
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 101
9445: PUSH
9446: LD_INT 102
9448: PUSH
9449: LD_INT 105
9451: PUSH
9452: LD_INT 106
9454: PUSH
9455: LD_INT 108
9457: PUSH
9458: LD_INT 116
9460: PUSH
9461: LD_INT 117
9463: PUSH
9464: LD_INT 118
9466: PUSH
9467: EMPTY
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: ST_TO_ADDR
9481: GO 12464
9483: LD_INT 3
9485: DOUBLE
9486: EQUAL
9487: IFTRUE 9491
9489: GO 9579
9491: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9492: LD_ADDR_VAR 0 2
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: LD_INT 5
9505: PUSH
9506: LD_INT 11
9508: PUSH
9509: LD_INT 12
9511: PUSH
9512: LD_INT 15
9514: PUSH
9515: LD_INT 16
9517: PUSH
9518: LD_INT 22
9520: PUSH
9521: LD_INT 26
9523: PUSH
9524: LD_INT 36
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 101
9541: PUSH
9542: LD_INT 102
9544: PUSH
9545: LD_INT 105
9547: PUSH
9548: LD_INT 106
9550: PUSH
9551: LD_INT 108
9553: PUSH
9554: LD_INT 116
9556: PUSH
9557: LD_INT 117
9559: PUSH
9560: LD_INT 118
9562: PUSH
9563: EMPTY
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: ST_TO_ADDR
9577: GO 12464
9579: LD_INT 4
9581: DOUBLE
9582: EQUAL
9583: IFTRUE 9587
9585: GO 9683
9587: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9588: LD_ADDR_VAR 0 2
9592: PUSH
9593: LD_INT 2
9595: PUSH
9596: LD_INT 4
9598: PUSH
9599: LD_INT 5
9601: PUSH
9602: LD_INT 8
9604: PUSH
9605: LD_INT 11
9607: PUSH
9608: LD_INT 12
9610: PUSH
9611: LD_INT 15
9613: PUSH
9614: LD_INT 16
9616: PUSH
9617: LD_INT 22
9619: PUSH
9620: LD_INT 23
9622: PUSH
9623: LD_INT 26
9625: PUSH
9626: LD_INT 36
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 101
9645: PUSH
9646: LD_INT 102
9648: PUSH
9649: LD_INT 105
9651: PUSH
9652: LD_INT 106
9654: PUSH
9655: LD_INT 108
9657: PUSH
9658: LD_INT 116
9660: PUSH
9661: LD_INT 117
9663: PUSH
9664: LD_INT 118
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: ST_TO_ADDR
9681: GO 12464
9683: LD_INT 5
9685: DOUBLE
9686: EQUAL
9687: IFTRUE 9691
9689: GO 9803
9691: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9692: LD_ADDR_VAR 0 2
9696: PUSH
9697: LD_INT 2
9699: PUSH
9700: LD_INT 4
9702: PUSH
9703: LD_INT 5
9705: PUSH
9706: LD_INT 6
9708: PUSH
9709: LD_INT 8
9711: PUSH
9712: LD_INT 11
9714: PUSH
9715: LD_INT 12
9717: PUSH
9718: LD_INT 15
9720: PUSH
9721: LD_INT 16
9723: PUSH
9724: LD_INT 22
9726: PUSH
9727: LD_INT 23
9729: PUSH
9730: LD_INT 25
9732: PUSH
9733: LD_INT 26
9735: PUSH
9736: LD_INT 36
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 101
9757: PUSH
9758: LD_INT 102
9760: PUSH
9761: LD_INT 105
9763: PUSH
9764: LD_INT 106
9766: PUSH
9767: LD_INT 108
9769: PUSH
9770: LD_INT 109
9772: PUSH
9773: LD_INT 112
9775: PUSH
9776: LD_INT 116
9778: PUSH
9779: LD_INT 117
9781: PUSH
9782: LD_INT 118
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: ST_TO_ADDR
9801: GO 12464
9803: LD_INT 6
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9943
9811: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: LD_INT 6
9828: PUSH
9829: LD_INT 8
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: LD_INT 12
9837: PUSH
9838: LD_INT 15
9840: PUSH
9841: LD_INT 16
9843: PUSH
9844: LD_INT 20
9846: PUSH
9847: LD_INT 21
9849: PUSH
9850: LD_INT 22
9852: PUSH
9853: LD_INT 23
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 26
9861: PUSH
9862: LD_INT 30
9864: PUSH
9865: LD_INT 31
9867: PUSH
9868: LD_INT 32
9870: PUSH
9871: LD_INT 36
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: PUSH
9895: LD_INT 101
9897: PUSH
9898: LD_INT 102
9900: PUSH
9901: LD_INT 105
9903: PUSH
9904: LD_INT 106
9906: PUSH
9907: LD_INT 108
9909: PUSH
9910: LD_INT 109
9912: PUSH
9913: LD_INT 112
9915: PUSH
9916: LD_INT 116
9918: PUSH
9919: LD_INT 117
9921: PUSH
9922: LD_INT 118
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: ST_TO_ADDR
9941: GO 12464
9943: LD_INT 7
9945: DOUBLE
9946: EQUAL
9947: IFTRUE 9951
9949: GO 10063
9951: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9952: LD_ADDR_VAR 0 2
9956: PUSH
9957: LD_INT 2
9959: PUSH
9960: LD_INT 4
9962: PUSH
9963: LD_INT 5
9965: PUSH
9966: LD_INT 7
9968: PUSH
9969: LD_INT 11
9971: PUSH
9972: LD_INT 12
9974: PUSH
9975: LD_INT 15
9977: PUSH
9978: LD_INT 16
9980: PUSH
9981: LD_INT 20
9983: PUSH
9984: LD_INT 21
9986: PUSH
9987: LD_INT 22
9989: PUSH
9990: LD_INT 23
9992: PUSH
9993: LD_INT 25
9995: PUSH
9996: LD_INT 26
9998: PUSH
9999: EMPTY
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 101
10017: PUSH
10018: LD_INT 102
10020: PUSH
10021: LD_INT 103
10023: PUSH
10024: LD_INT 105
10026: PUSH
10027: LD_INT 106
10029: PUSH
10030: LD_INT 108
10032: PUSH
10033: LD_INT 112
10035: PUSH
10036: LD_INT 116
10038: PUSH
10039: LD_INT 117
10041: PUSH
10042: LD_INT 118
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: ST_TO_ADDR
10061: GO 12464
10063: LD_INT 8
10065: DOUBLE
10066: EQUAL
10067: IFTRUE 10071
10069: GO 10211
10071: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10072: LD_ADDR_VAR 0 2
10076: PUSH
10077: LD_INT 2
10079: PUSH
10080: LD_INT 4
10082: PUSH
10083: LD_INT 5
10085: PUSH
10086: LD_INT 6
10088: PUSH
10089: LD_INT 7
10091: PUSH
10092: LD_INT 8
10094: PUSH
10095: LD_INT 11
10097: PUSH
10098: LD_INT 12
10100: PUSH
10101: LD_INT 15
10103: PUSH
10104: LD_INT 16
10106: PUSH
10107: LD_INT 20
10109: PUSH
10110: LD_INT 21
10112: PUSH
10113: LD_INT 22
10115: PUSH
10116: LD_INT 23
10118: PUSH
10119: LD_INT 25
10121: PUSH
10122: LD_INT 26
10124: PUSH
10125: LD_INT 30
10127: PUSH
10128: LD_INT 31
10130: PUSH
10131: LD_INT 32
10133: PUSH
10134: LD_INT 36
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: LIST
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 101
10161: PUSH
10162: LD_INT 102
10164: PUSH
10165: LD_INT 103
10167: PUSH
10168: LD_INT 105
10170: PUSH
10171: LD_INT 106
10173: PUSH
10174: LD_INT 108
10176: PUSH
10177: LD_INT 109
10179: PUSH
10180: LD_INT 112
10182: PUSH
10183: LD_INT 116
10185: PUSH
10186: LD_INT 117
10188: PUSH
10189: LD_INT 118
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: ST_TO_ADDR
10209: GO 12464
10211: LD_INT 9
10213: DOUBLE
10214: EQUAL
10215: IFTRUE 10219
10217: GO 10367
10219: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10220: LD_ADDR_VAR 0 2
10224: PUSH
10225: LD_INT 2
10227: PUSH
10228: LD_INT 4
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: LD_INT 6
10236: PUSH
10237: LD_INT 7
10239: PUSH
10240: LD_INT 8
10242: PUSH
10243: LD_INT 11
10245: PUSH
10246: LD_INT 12
10248: PUSH
10249: LD_INT 15
10251: PUSH
10252: LD_INT 16
10254: PUSH
10255: LD_INT 20
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 22
10263: PUSH
10264: LD_INT 23
10266: PUSH
10267: LD_INT 25
10269: PUSH
10270: LD_INT 26
10272: PUSH
10273: LD_INT 28
10275: PUSH
10276: LD_INT 30
10278: PUSH
10279: LD_INT 31
10281: PUSH
10282: LD_INT 32
10284: PUSH
10285: LD_INT 36
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 101
10313: PUSH
10314: LD_INT 102
10316: PUSH
10317: LD_INT 103
10319: PUSH
10320: LD_INT 105
10322: PUSH
10323: LD_INT 106
10325: PUSH
10326: LD_INT 108
10328: PUSH
10329: LD_INT 109
10331: PUSH
10332: LD_INT 112
10334: PUSH
10335: LD_INT 114
10337: PUSH
10338: LD_INT 116
10340: PUSH
10341: LD_INT 117
10343: PUSH
10344: LD_INT 118
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: ST_TO_ADDR
10365: GO 12464
10367: LD_INT 10
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10571
10375: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10376: LD_ADDR_VAR 0 2
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 4
10386: PUSH
10387: LD_INT 5
10389: PUSH
10390: LD_INT 6
10392: PUSH
10393: LD_INT 7
10395: PUSH
10396: LD_INT 8
10398: PUSH
10399: LD_INT 9
10401: PUSH
10402: LD_INT 10
10404: PUSH
10405: LD_INT 11
10407: PUSH
10408: LD_INT 12
10410: PUSH
10411: LD_INT 13
10413: PUSH
10414: LD_INT 14
10416: PUSH
10417: LD_INT 15
10419: PUSH
10420: LD_INT 16
10422: PUSH
10423: LD_INT 17
10425: PUSH
10426: LD_INT 18
10428: PUSH
10429: LD_INT 19
10431: PUSH
10432: LD_INT 20
10434: PUSH
10435: LD_INT 21
10437: PUSH
10438: LD_INT 22
10440: PUSH
10441: LD_INT 23
10443: PUSH
10444: LD_INT 24
10446: PUSH
10447: LD_INT 25
10449: PUSH
10450: LD_INT 26
10452: PUSH
10453: LD_INT 28
10455: PUSH
10456: LD_INT 30
10458: PUSH
10459: LD_INT 31
10461: PUSH
10462: LD_INT 32
10464: PUSH
10465: LD_INT 36
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: LIST
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 101
10501: PUSH
10502: LD_INT 102
10504: PUSH
10505: LD_INT 103
10507: PUSH
10508: LD_INT 104
10510: PUSH
10511: LD_INT 105
10513: PUSH
10514: LD_INT 106
10516: PUSH
10517: LD_INT 107
10519: PUSH
10520: LD_INT 108
10522: PUSH
10523: LD_INT 109
10525: PUSH
10526: LD_INT 110
10528: PUSH
10529: LD_INT 111
10531: PUSH
10532: LD_INT 112
10534: PUSH
10535: LD_INT 114
10537: PUSH
10538: LD_INT 116
10540: PUSH
10541: LD_INT 117
10543: PUSH
10544: LD_INT 118
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: ST_TO_ADDR
10569: GO 12464
10571: LD_INT 11
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10783
10579: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10580: LD_ADDR_VAR 0 2
10584: PUSH
10585: LD_INT 2
10587: PUSH
10588: LD_INT 3
10590: PUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: LD_INT 6
10599: PUSH
10600: LD_INT 7
10602: PUSH
10603: LD_INT 8
10605: PUSH
10606: LD_INT 9
10608: PUSH
10609: LD_INT 10
10611: PUSH
10612: LD_INT 11
10614: PUSH
10615: LD_INT 12
10617: PUSH
10618: LD_INT 13
10620: PUSH
10621: LD_INT 14
10623: PUSH
10624: LD_INT 15
10626: PUSH
10627: LD_INT 16
10629: PUSH
10630: LD_INT 17
10632: PUSH
10633: LD_INT 18
10635: PUSH
10636: LD_INT 19
10638: PUSH
10639: LD_INT 20
10641: PUSH
10642: LD_INT 21
10644: PUSH
10645: LD_INT 22
10647: PUSH
10648: LD_INT 23
10650: PUSH
10651: LD_INT 24
10653: PUSH
10654: LD_INT 25
10656: PUSH
10657: LD_INT 26
10659: PUSH
10660: LD_INT 28
10662: PUSH
10663: LD_INT 30
10665: PUSH
10666: LD_INT 31
10668: PUSH
10669: LD_INT 32
10671: PUSH
10672: LD_INT 34
10674: PUSH
10675: LD_INT 36
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 101
10713: PUSH
10714: LD_INT 102
10716: PUSH
10717: LD_INT 103
10719: PUSH
10720: LD_INT 104
10722: PUSH
10723: LD_INT 105
10725: PUSH
10726: LD_INT 106
10728: PUSH
10729: LD_INT 107
10731: PUSH
10732: LD_INT 108
10734: PUSH
10735: LD_INT 109
10737: PUSH
10738: LD_INT 110
10740: PUSH
10741: LD_INT 111
10743: PUSH
10744: LD_INT 112
10746: PUSH
10747: LD_INT 114
10749: PUSH
10750: LD_INT 116
10752: PUSH
10753: LD_INT 117
10755: PUSH
10756: LD_INT 118
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: ST_TO_ADDR
10781: GO 12464
10783: LD_INT 12
10785: DOUBLE
10786: EQUAL
10787: IFTRUE 10791
10789: GO 11011
10791: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10792: LD_ADDR_VAR 0 2
10796: PUSH
10797: LD_INT 1
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: LD_INT 3
10805: PUSH
10806: LD_INT 4
10808: PUSH
10809: LD_INT 5
10811: PUSH
10812: LD_INT 6
10814: PUSH
10815: LD_INT 7
10817: PUSH
10818: LD_INT 8
10820: PUSH
10821: LD_INT 9
10823: PUSH
10824: LD_INT 10
10826: PUSH
10827: LD_INT 11
10829: PUSH
10830: LD_INT 12
10832: PUSH
10833: LD_INT 13
10835: PUSH
10836: LD_INT 14
10838: PUSH
10839: LD_INT 15
10841: PUSH
10842: LD_INT 16
10844: PUSH
10845: LD_INT 17
10847: PUSH
10848: LD_INT 18
10850: PUSH
10851: LD_INT 19
10853: PUSH
10854: LD_INT 20
10856: PUSH
10857: LD_INT 21
10859: PUSH
10860: LD_INT 22
10862: PUSH
10863: LD_INT 23
10865: PUSH
10866: LD_INT 24
10868: PUSH
10869: LD_INT 25
10871: PUSH
10872: LD_INT 26
10874: PUSH
10875: LD_INT 27
10877: PUSH
10878: LD_INT 28
10880: PUSH
10881: LD_INT 30
10883: PUSH
10884: LD_INT 31
10886: PUSH
10887: LD_INT 32
10889: PUSH
10890: LD_INT 33
10892: PUSH
10893: LD_INT 34
10895: PUSH
10896: LD_INT 36
10898: PUSH
10899: EMPTY
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 102
10940: PUSH
10941: LD_INT 103
10943: PUSH
10944: LD_INT 104
10946: PUSH
10947: LD_INT 105
10949: PUSH
10950: LD_INT 106
10952: PUSH
10953: LD_INT 107
10955: PUSH
10956: LD_INT 108
10958: PUSH
10959: LD_INT 109
10961: PUSH
10962: LD_INT 110
10964: PUSH
10965: LD_INT 111
10967: PUSH
10968: LD_INT 112
10970: PUSH
10971: LD_INT 113
10973: PUSH
10974: LD_INT 114
10976: PUSH
10977: LD_INT 116
10979: PUSH
10980: LD_INT 117
10982: PUSH
10983: LD_INT 118
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: ST_TO_ADDR
11009: GO 12464
11011: LD_INT 13
11013: DOUBLE
11014: EQUAL
11015: IFTRUE 11019
11017: GO 11227
11019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11020: LD_ADDR_VAR 0 2
11024: PUSH
11025: LD_INT 1
11027: PUSH
11028: LD_INT 2
11030: PUSH
11031: LD_INT 3
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: LD_INT 5
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: LD_INT 9
11045: PUSH
11046: LD_INT 10
11048: PUSH
11049: LD_INT 11
11051: PUSH
11052: LD_INT 12
11054: PUSH
11055: LD_INT 14
11057: PUSH
11058: LD_INT 15
11060: PUSH
11061: LD_INT 16
11063: PUSH
11064: LD_INT 17
11066: PUSH
11067: LD_INT 18
11069: PUSH
11070: LD_INT 19
11072: PUSH
11073: LD_INT 20
11075: PUSH
11076: LD_INT 21
11078: PUSH
11079: LD_INT 22
11081: PUSH
11082: LD_INT 23
11084: PUSH
11085: LD_INT 24
11087: PUSH
11088: LD_INT 25
11090: PUSH
11091: LD_INT 26
11093: PUSH
11094: LD_INT 27
11096: PUSH
11097: LD_INT 28
11099: PUSH
11100: LD_INT 30
11102: PUSH
11103: LD_INT 31
11105: PUSH
11106: LD_INT 32
11108: PUSH
11109: LD_INT 33
11111: PUSH
11112: LD_INT 34
11114: PUSH
11115: LD_INT 36
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 101
11153: PUSH
11154: LD_INT 102
11156: PUSH
11157: LD_INT 103
11159: PUSH
11160: LD_INT 104
11162: PUSH
11163: LD_INT 105
11165: PUSH
11166: LD_INT 106
11168: PUSH
11169: LD_INT 107
11171: PUSH
11172: LD_INT 108
11174: PUSH
11175: LD_INT 109
11177: PUSH
11178: LD_INT 110
11180: PUSH
11181: LD_INT 111
11183: PUSH
11184: LD_INT 112
11186: PUSH
11187: LD_INT 113
11189: PUSH
11190: LD_INT 114
11192: PUSH
11193: LD_INT 116
11195: PUSH
11196: LD_INT 117
11198: PUSH
11199: LD_INT 118
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: ST_TO_ADDR
11225: GO 12464
11227: LD_INT 14
11229: DOUBLE
11230: EQUAL
11231: IFTRUE 11235
11233: GO 11459
11235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11236: LD_ADDR_VAR 0 2
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: LD_INT 2
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: LD_INT 4
11252: PUSH
11253: LD_INT 5
11255: PUSH
11256: LD_INT 6
11258: PUSH
11259: LD_INT 7
11261: PUSH
11262: LD_INT 8
11264: PUSH
11265: LD_INT 9
11267: PUSH
11268: LD_INT 10
11270: PUSH
11271: LD_INT 11
11273: PUSH
11274: LD_INT 12
11276: PUSH
11277: LD_INT 13
11279: PUSH
11280: LD_INT 14
11282: PUSH
11283: LD_INT 15
11285: PUSH
11286: LD_INT 16
11288: PUSH
11289: LD_INT 17
11291: PUSH
11292: LD_INT 18
11294: PUSH
11295: LD_INT 19
11297: PUSH
11298: LD_INT 20
11300: PUSH
11301: LD_INT 21
11303: PUSH
11304: LD_INT 22
11306: PUSH
11307: LD_INT 23
11309: PUSH
11310: LD_INT 24
11312: PUSH
11313: LD_INT 25
11315: PUSH
11316: LD_INT 26
11318: PUSH
11319: LD_INT 27
11321: PUSH
11322: LD_INT 28
11324: PUSH
11325: LD_INT 29
11327: PUSH
11328: LD_INT 30
11330: PUSH
11331: LD_INT 31
11333: PUSH
11334: LD_INT 32
11336: PUSH
11337: LD_INT 33
11339: PUSH
11340: LD_INT 34
11342: PUSH
11343: LD_INT 36
11345: PUSH
11346: EMPTY
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 101
11385: PUSH
11386: LD_INT 102
11388: PUSH
11389: LD_INT 103
11391: PUSH
11392: LD_INT 104
11394: PUSH
11395: LD_INT 105
11397: PUSH
11398: LD_INT 106
11400: PUSH
11401: LD_INT 107
11403: PUSH
11404: LD_INT 108
11406: PUSH
11407: LD_INT 109
11409: PUSH
11410: LD_INT 110
11412: PUSH
11413: LD_INT 111
11415: PUSH
11416: LD_INT 112
11418: PUSH
11419: LD_INT 113
11421: PUSH
11422: LD_INT 114
11424: PUSH
11425: LD_INT 116
11427: PUSH
11428: LD_INT 117
11430: PUSH
11431: LD_INT 118
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: ST_TO_ADDR
11457: GO 12464
11459: LD_INT 15
11461: DOUBLE
11462: EQUAL
11463: IFTRUE 11467
11465: GO 11691
11467: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11468: LD_ADDR_VAR 0 2
11472: PUSH
11473: LD_INT 1
11475: PUSH
11476: LD_INT 2
11478: PUSH
11479: LD_INT 3
11481: PUSH
11482: LD_INT 4
11484: PUSH
11485: LD_INT 5
11487: PUSH
11488: LD_INT 6
11490: PUSH
11491: LD_INT 7
11493: PUSH
11494: LD_INT 8
11496: PUSH
11497: LD_INT 9
11499: PUSH
11500: LD_INT 10
11502: PUSH
11503: LD_INT 11
11505: PUSH
11506: LD_INT 12
11508: PUSH
11509: LD_INT 13
11511: PUSH
11512: LD_INT 14
11514: PUSH
11515: LD_INT 15
11517: PUSH
11518: LD_INT 16
11520: PUSH
11521: LD_INT 17
11523: PUSH
11524: LD_INT 18
11526: PUSH
11527: LD_INT 19
11529: PUSH
11530: LD_INT 20
11532: PUSH
11533: LD_INT 21
11535: PUSH
11536: LD_INT 22
11538: PUSH
11539: LD_INT 23
11541: PUSH
11542: LD_INT 24
11544: PUSH
11545: LD_INT 25
11547: PUSH
11548: LD_INT 26
11550: PUSH
11551: LD_INT 27
11553: PUSH
11554: LD_INT 28
11556: PUSH
11557: LD_INT 29
11559: PUSH
11560: LD_INT 30
11562: PUSH
11563: LD_INT 31
11565: PUSH
11566: LD_INT 32
11568: PUSH
11569: LD_INT 33
11571: PUSH
11572: LD_INT 34
11574: PUSH
11575: LD_INT 36
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 101
11617: PUSH
11618: LD_INT 102
11620: PUSH
11621: LD_INT 103
11623: PUSH
11624: LD_INT 104
11626: PUSH
11627: LD_INT 105
11629: PUSH
11630: LD_INT 106
11632: PUSH
11633: LD_INT 107
11635: PUSH
11636: LD_INT 108
11638: PUSH
11639: LD_INT 109
11641: PUSH
11642: LD_INT 110
11644: PUSH
11645: LD_INT 111
11647: PUSH
11648: LD_INT 112
11650: PUSH
11651: LD_INT 113
11653: PUSH
11654: LD_INT 114
11656: PUSH
11657: LD_INT 116
11659: PUSH
11660: LD_INT 117
11662: PUSH
11663: LD_INT 118
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: ST_TO_ADDR
11689: GO 12464
11691: LD_INT 16
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11835
11699: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11700: LD_ADDR_VAR 0 2
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 4
11710: PUSH
11711: LD_INT 5
11713: PUSH
11714: LD_INT 7
11716: PUSH
11717: LD_INT 11
11719: PUSH
11720: LD_INT 12
11722: PUSH
11723: LD_INT 15
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 20
11731: PUSH
11732: LD_INT 21
11734: PUSH
11735: LD_INT 22
11737: PUSH
11738: LD_INT 23
11740: PUSH
11741: LD_INT 25
11743: PUSH
11744: LD_INT 26
11746: PUSH
11747: LD_INT 30
11749: PUSH
11750: LD_INT 31
11752: PUSH
11753: LD_INT 32
11755: PUSH
11756: LD_INT 33
11758: PUSH
11759: LD_INT 34
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 101
11785: PUSH
11786: LD_INT 102
11788: PUSH
11789: LD_INT 103
11791: PUSH
11792: LD_INT 106
11794: PUSH
11795: LD_INT 108
11797: PUSH
11798: LD_INT 112
11800: PUSH
11801: LD_INT 113
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: LD_INT 116
11809: PUSH
11810: LD_INT 117
11812: PUSH
11813: LD_INT 118
11815: PUSH
11816: EMPTY
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: PUSH
11829: EMPTY
11830: LIST
11831: LIST
11832: ST_TO_ADDR
11833: GO 12464
11835: LD_INT 17
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12067
11843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11844: LD_ADDR_VAR 0 2
11848: PUSH
11849: LD_INT 1
11851: PUSH
11852: LD_INT 2
11854: PUSH
11855: LD_INT 3
11857: PUSH
11858: LD_INT 4
11860: PUSH
11861: LD_INT 5
11863: PUSH
11864: LD_INT 6
11866: PUSH
11867: LD_INT 7
11869: PUSH
11870: LD_INT 8
11872: PUSH
11873: LD_INT 9
11875: PUSH
11876: LD_INT 10
11878: PUSH
11879: LD_INT 11
11881: PUSH
11882: LD_INT 12
11884: PUSH
11885: LD_INT 13
11887: PUSH
11888: LD_INT 14
11890: PUSH
11891: LD_INT 15
11893: PUSH
11894: LD_INT 16
11896: PUSH
11897: LD_INT 17
11899: PUSH
11900: LD_INT 18
11902: PUSH
11903: LD_INT 19
11905: PUSH
11906: LD_INT 20
11908: PUSH
11909: LD_INT 21
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 23
11917: PUSH
11918: LD_INT 24
11920: PUSH
11921: LD_INT 25
11923: PUSH
11924: LD_INT 26
11926: PUSH
11927: LD_INT 27
11929: PUSH
11930: LD_INT 28
11932: PUSH
11933: LD_INT 29
11935: PUSH
11936: LD_INT 30
11938: PUSH
11939: LD_INT 31
11941: PUSH
11942: LD_INT 32
11944: PUSH
11945: LD_INT 33
11947: PUSH
11948: LD_INT 34
11950: PUSH
11951: LD_INT 36
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 101
11993: PUSH
11994: LD_INT 102
11996: PUSH
11997: LD_INT 103
11999: PUSH
12000: LD_INT 104
12002: PUSH
12003: LD_INT 105
12005: PUSH
12006: LD_INT 106
12008: PUSH
12009: LD_INT 107
12011: PUSH
12012: LD_INT 108
12014: PUSH
12015: LD_INT 109
12017: PUSH
12018: LD_INT 110
12020: PUSH
12021: LD_INT 111
12023: PUSH
12024: LD_INT 112
12026: PUSH
12027: LD_INT 113
12029: PUSH
12030: LD_INT 114
12032: PUSH
12033: LD_INT 116
12035: PUSH
12036: LD_INT 117
12038: PUSH
12039: LD_INT 118
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: ST_TO_ADDR
12065: GO 12464
12067: LD_INT 18
12069: DOUBLE
12070: EQUAL
12071: IFTRUE 12075
12073: GO 12223
12075: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12076: LD_ADDR_VAR 0 2
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 4
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: LD_INT 7
12092: PUSH
12093: LD_INT 11
12095: PUSH
12096: LD_INT 12
12098: PUSH
12099: LD_INT 15
12101: PUSH
12102: LD_INT 16
12104: PUSH
12105: LD_INT 20
12107: PUSH
12108: LD_INT 21
12110: PUSH
12111: LD_INT 22
12113: PUSH
12114: LD_INT 23
12116: PUSH
12117: LD_INT 25
12119: PUSH
12120: LD_INT 26
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 31
12128: PUSH
12129: LD_INT 32
12131: PUSH
12132: LD_INT 33
12134: PUSH
12135: LD_INT 34
12137: PUSH
12138: LD_INT 35
12140: PUSH
12141: LD_INT 36
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 101
12169: PUSH
12170: LD_INT 102
12172: PUSH
12173: LD_INT 103
12175: PUSH
12176: LD_INT 106
12178: PUSH
12179: LD_INT 108
12181: PUSH
12182: LD_INT 112
12184: PUSH
12185: LD_INT 113
12187: PUSH
12188: LD_INT 114
12190: PUSH
12191: LD_INT 115
12193: PUSH
12194: LD_INT 116
12196: PUSH
12197: LD_INT 117
12199: PUSH
12200: LD_INT 118
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: ST_TO_ADDR
12221: GO 12464
12223: LD_INT 19
12225: DOUBLE
12226: EQUAL
12227: IFTRUE 12231
12229: GO 12463
12231: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12232: LD_ADDR_VAR 0 2
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: LD_INT 2
12242: PUSH
12243: LD_INT 3
12245: PUSH
12246: LD_INT 4
12248: PUSH
12249: LD_INT 5
12251: PUSH
12252: LD_INT 6
12254: PUSH
12255: LD_INT 7
12257: PUSH
12258: LD_INT 8
12260: PUSH
12261: LD_INT 9
12263: PUSH
12264: LD_INT 10
12266: PUSH
12267: LD_INT 11
12269: PUSH
12270: LD_INT 12
12272: PUSH
12273: LD_INT 13
12275: PUSH
12276: LD_INT 14
12278: PUSH
12279: LD_INT 15
12281: PUSH
12282: LD_INT 16
12284: PUSH
12285: LD_INT 17
12287: PUSH
12288: LD_INT 18
12290: PUSH
12291: LD_INT 19
12293: PUSH
12294: LD_INT 20
12296: PUSH
12297: LD_INT 21
12299: PUSH
12300: LD_INT 22
12302: PUSH
12303: LD_INT 23
12305: PUSH
12306: LD_INT 24
12308: PUSH
12309: LD_INT 25
12311: PUSH
12312: LD_INT 26
12314: PUSH
12315: LD_INT 27
12317: PUSH
12318: LD_INT 28
12320: PUSH
12321: LD_INT 29
12323: PUSH
12324: LD_INT 30
12326: PUSH
12327: LD_INT 31
12329: PUSH
12330: LD_INT 32
12332: PUSH
12333: LD_INT 33
12335: PUSH
12336: LD_INT 34
12338: PUSH
12339: LD_INT 35
12341: PUSH
12342: LD_INT 36
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 101
12385: PUSH
12386: LD_INT 102
12388: PUSH
12389: LD_INT 103
12391: PUSH
12392: LD_INT 104
12394: PUSH
12395: LD_INT 105
12397: PUSH
12398: LD_INT 106
12400: PUSH
12401: LD_INT 107
12403: PUSH
12404: LD_INT 108
12406: PUSH
12407: LD_INT 109
12409: PUSH
12410: LD_INT 110
12412: PUSH
12413: LD_INT 111
12415: PUSH
12416: LD_INT 112
12418: PUSH
12419: LD_INT 113
12421: PUSH
12422: LD_INT 114
12424: PUSH
12425: LD_INT 115
12427: PUSH
12428: LD_INT 116
12430: PUSH
12431: LD_INT 117
12433: PUSH
12434: LD_INT 118
12436: PUSH
12437: EMPTY
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: ST_TO_ADDR
12461: GO 12464
12463: POP
// end else
12464: GO 12695
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12466: LD_ADDR_VAR 0 2
12470: PUSH
12471: LD_INT 1
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: LD_INT 3
12479: PUSH
12480: LD_INT 4
12482: PUSH
12483: LD_INT 5
12485: PUSH
12486: LD_INT 6
12488: PUSH
12489: LD_INT 7
12491: PUSH
12492: LD_INT 8
12494: PUSH
12495: LD_INT 9
12497: PUSH
12498: LD_INT 10
12500: PUSH
12501: LD_INT 11
12503: PUSH
12504: LD_INT 12
12506: PUSH
12507: LD_INT 13
12509: PUSH
12510: LD_INT 14
12512: PUSH
12513: LD_INT 15
12515: PUSH
12516: LD_INT 16
12518: PUSH
12519: LD_INT 17
12521: PUSH
12522: LD_INT 18
12524: PUSH
12525: LD_INT 19
12527: PUSH
12528: LD_INT 20
12530: PUSH
12531: LD_INT 21
12533: PUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 23
12539: PUSH
12540: LD_INT 24
12542: PUSH
12543: LD_INT 25
12545: PUSH
12546: LD_INT 26
12548: PUSH
12549: LD_INT 27
12551: PUSH
12552: LD_INT 28
12554: PUSH
12555: LD_INT 29
12557: PUSH
12558: LD_INT 30
12560: PUSH
12561: LD_INT 31
12563: PUSH
12564: LD_INT 32
12566: PUSH
12567: LD_INT 33
12569: PUSH
12570: LD_INT 34
12572: PUSH
12573: LD_INT 35
12575: PUSH
12576: LD_INT 36
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: PUSH
12617: LD_INT 101
12619: PUSH
12620: LD_INT 102
12622: PUSH
12623: LD_INT 103
12625: PUSH
12626: LD_INT 104
12628: PUSH
12629: LD_INT 105
12631: PUSH
12632: LD_INT 106
12634: PUSH
12635: LD_INT 107
12637: PUSH
12638: LD_INT 108
12640: PUSH
12641: LD_INT 109
12643: PUSH
12644: LD_INT 110
12646: PUSH
12647: LD_INT 111
12649: PUSH
12650: LD_INT 112
12652: PUSH
12653: LD_INT 113
12655: PUSH
12656: LD_INT 114
12658: PUSH
12659: LD_INT 115
12661: PUSH
12662: LD_INT 116
12664: PUSH
12665: LD_INT 117
12667: PUSH
12668: LD_INT 118
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: ST_TO_ADDR
// if result then
12695: LD_VAR 0 2
12699: IFFALSE 13485
// begin normal :=  ;
12701: LD_ADDR_VAR 0 5
12705: PUSH
12706: LD_STRING 
12708: ST_TO_ADDR
// hardcore :=  ;
12709: LD_ADDR_VAR 0 6
12713: PUSH
12714: LD_STRING 
12716: ST_TO_ADDR
// active :=  ;
12717: LD_ADDR_VAR 0 7
12721: PUSH
12722: LD_STRING 
12724: ST_TO_ADDR
// for i = 1 to normalCounter do
12725: LD_ADDR_VAR 0 8
12729: PUSH
12730: DOUBLE
12731: LD_INT 1
12733: DEC
12734: ST_TO_ADDR
12735: LD_EXP 26
12739: PUSH
12740: FOR_TO
12741: IFFALSE 12842
// begin tmp := 0 ;
12743: LD_ADDR_VAR 0 3
12747: PUSH
12748: LD_STRING 0
12750: ST_TO_ADDR
// if result [ 1 ] then
12751: LD_VAR 0 2
12755: PUSH
12756: LD_INT 1
12758: ARRAY
12759: IFFALSE 12824
// if result [ 1 ] [ 1 ] = i then
12761: LD_VAR 0 2
12765: PUSH
12766: LD_INT 1
12768: ARRAY
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PUSH
12774: LD_VAR 0 8
12778: EQUAL
12779: IFFALSE 12824
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12781: LD_ADDR_VAR 0 2
12785: PUSH
12786: LD_VAR 0 2
12790: PPUSH
12791: LD_INT 1
12793: PPUSH
12794: LD_VAR 0 2
12798: PUSH
12799: LD_INT 1
12801: ARRAY
12802: PPUSH
12803: LD_INT 1
12805: PPUSH
12806: CALL_OW 3
12810: PPUSH
12811: CALL_OW 1
12815: ST_TO_ADDR
// tmp := 1 ;
12816: LD_ADDR_VAR 0 3
12820: PUSH
12821: LD_STRING 1
12823: ST_TO_ADDR
// end ; normal := normal & tmp ;
12824: LD_ADDR_VAR 0 5
12828: PUSH
12829: LD_VAR 0 5
12833: PUSH
12834: LD_VAR 0 3
12838: STR
12839: ST_TO_ADDR
// end ;
12840: GO 12740
12842: POP
12843: POP
// for i = 1 to hardcoreCounter do
12844: LD_ADDR_VAR 0 8
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_EXP 27
12858: PUSH
12859: FOR_TO
12860: IFFALSE 12965
// begin tmp := 0 ;
12862: LD_ADDR_VAR 0 3
12866: PUSH
12867: LD_STRING 0
12869: ST_TO_ADDR
// if result [ 2 ] then
12870: LD_VAR 0 2
12874: PUSH
12875: LD_INT 2
12877: ARRAY
12878: IFFALSE 12947
// if result [ 2 ] [ 1 ] = 100 + i then
12880: LD_VAR 0 2
12884: PUSH
12885: LD_INT 2
12887: ARRAY
12888: PUSH
12889: LD_INT 1
12891: ARRAY
12892: PUSH
12893: LD_INT 100
12895: PUSH
12896: LD_VAR 0 8
12900: PLUS
12901: EQUAL
12902: IFFALSE 12947
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12904: LD_ADDR_VAR 0 2
12908: PUSH
12909: LD_VAR 0 2
12913: PPUSH
12914: LD_INT 2
12916: PPUSH
12917: LD_VAR 0 2
12921: PUSH
12922: LD_INT 2
12924: ARRAY
12925: PPUSH
12926: LD_INT 1
12928: PPUSH
12929: CALL_OW 3
12933: PPUSH
12934: CALL_OW 1
12938: ST_TO_ADDR
// tmp := 1 ;
12939: LD_ADDR_VAR 0 3
12943: PUSH
12944: LD_STRING 1
12946: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12947: LD_ADDR_VAR 0 6
12951: PUSH
12952: LD_VAR 0 6
12956: PUSH
12957: LD_VAR 0 3
12961: STR
12962: ST_TO_ADDR
// end ;
12963: GO 12859
12965: POP
12966: POP
// if isGameLoad then
12967: LD_VAR 0 1
12971: IFFALSE 13446
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12973: LD_ADDR_VAR 0 4
12977: PUSH
12978: LD_EXP 30
12982: PUSH
12983: LD_EXP 29
12987: PUSH
12988: LD_EXP 31
12992: PUSH
12993: LD_EXP 28
12997: PUSH
12998: LD_EXP 32
13002: PUSH
13003: LD_EXP 33
13007: PUSH
13008: LD_EXP 34
13012: PUSH
13013: LD_EXP 35
13017: PUSH
13018: LD_EXP 36
13022: PUSH
13023: LD_EXP 37
13027: PUSH
13028: LD_EXP 38
13032: PUSH
13033: LD_EXP 39
13037: PUSH
13038: LD_EXP 40
13042: PUSH
13043: LD_EXP 41
13047: PUSH
13048: LD_EXP 49
13052: PUSH
13053: LD_EXP 50
13057: PUSH
13058: LD_EXP 51
13062: PUSH
13063: LD_EXP 52
13067: PUSH
13068: LD_EXP 54
13072: PUSH
13073: LD_EXP 55
13077: PUSH
13078: LD_EXP 56
13082: PUSH
13083: LD_EXP 59
13087: PUSH
13088: LD_EXP 61
13092: PUSH
13093: LD_EXP 62
13097: PUSH
13098: LD_EXP 63
13102: PUSH
13103: LD_EXP 65
13107: PUSH
13108: LD_EXP 66
13112: PUSH
13113: LD_EXP 69
13117: PUSH
13118: LD_EXP 70
13122: PUSH
13123: LD_EXP 71
13127: PUSH
13128: LD_EXP 72
13132: PUSH
13133: LD_EXP 73
13137: PUSH
13138: LD_EXP 74
13142: PUSH
13143: LD_EXP 75
13147: PUSH
13148: LD_EXP 76
13152: PUSH
13153: LD_EXP 77
13157: PUSH
13158: LD_EXP 42
13162: PUSH
13163: LD_EXP 43
13167: PUSH
13168: LD_EXP 46
13172: PUSH
13173: LD_EXP 47
13177: PUSH
13178: LD_EXP 48
13182: PUSH
13183: LD_EXP 44
13187: PUSH
13188: LD_EXP 45
13192: PUSH
13193: LD_EXP 53
13197: PUSH
13198: LD_EXP 57
13202: PUSH
13203: LD_EXP 58
13207: PUSH
13208: LD_EXP 60
13212: PUSH
13213: LD_EXP 64
13217: PUSH
13218: LD_EXP 67
13222: PUSH
13223: LD_EXP 68
13227: PUSH
13228: LD_EXP 78
13232: PUSH
13233: LD_EXP 79
13237: PUSH
13238: LD_EXP 80
13242: PUSH
13243: LD_EXP 81
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: ST_TO_ADDR
// tmp :=  ;
13304: LD_ADDR_VAR 0 3
13308: PUSH
13309: LD_STRING 
13311: ST_TO_ADDR
// for i = 1 to normalCounter do
13312: LD_ADDR_VAR 0 8
13316: PUSH
13317: DOUBLE
13318: LD_INT 1
13320: DEC
13321: ST_TO_ADDR
13322: LD_EXP 26
13326: PUSH
13327: FOR_TO
13328: IFFALSE 13364
// begin if flags [ i ] then
13330: LD_VAR 0 4
13334: PUSH
13335: LD_VAR 0 8
13339: ARRAY
13340: IFFALSE 13362
// tmp := tmp & i & ; ;
13342: LD_ADDR_VAR 0 3
13346: PUSH
13347: LD_VAR 0 3
13351: PUSH
13352: LD_VAR 0 8
13356: STR
13357: PUSH
13358: LD_STRING ;
13360: STR
13361: ST_TO_ADDR
// end ;
13362: GO 13327
13364: POP
13365: POP
// for i = 1 to hardcoreCounter do
13366: LD_ADDR_VAR 0 8
13370: PUSH
13371: DOUBLE
13372: LD_INT 1
13374: DEC
13375: ST_TO_ADDR
13376: LD_EXP 27
13380: PUSH
13381: FOR_TO
13382: IFFALSE 13428
// begin if flags [ normalCounter + i ] then
13384: LD_VAR 0 4
13388: PUSH
13389: LD_EXP 26
13393: PUSH
13394: LD_VAR 0 8
13398: PLUS
13399: ARRAY
13400: IFFALSE 13426
// tmp := tmp & ( 100 + i ) & ; ;
13402: LD_ADDR_VAR 0 3
13406: PUSH
13407: LD_VAR 0 3
13411: PUSH
13412: LD_INT 100
13414: PUSH
13415: LD_VAR 0 8
13419: PLUS
13420: STR
13421: PUSH
13422: LD_STRING ;
13424: STR
13425: ST_TO_ADDR
// end ;
13426: GO 13381
13428: POP
13429: POP
// if tmp then
13430: LD_VAR 0 3
13434: IFFALSE 13446
// active := tmp ;
13436: LD_ADDR_VAR 0 7
13440: PUSH
13441: LD_VAR 0 3
13445: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13446: LD_STRING getStreamItemsFromMission("
13448: PUSH
13449: LD_VAR 0 5
13453: STR
13454: PUSH
13455: LD_STRING ","
13457: STR
13458: PUSH
13459: LD_VAR 0 6
13463: STR
13464: PUSH
13465: LD_STRING ","
13467: STR
13468: PUSH
13469: LD_VAR 0 7
13473: STR
13474: PUSH
13475: LD_STRING ")
13477: STR
13478: PPUSH
13479: CALL_OW 559
// end else
13483: GO 13492
// ToLua ( getStreamItemsFromMission("","","") ) ;
13485: LD_STRING getStreamItemsFromMission("","","")
13487: PPUSH
13488: CALL_OW 559
// end ;
13492: LD_VAR 0 2
13496: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13497: LD_EXP 25
13501: PUSH
13502: LD_EXP 30
13506: AND
13507: IFFALSE 13631
13509: GO 13511
13511: DISABLE
13512: LD_INT 0
13514: PPUSH
13515: PPUSH
// begin enable ;
13516: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13517: LD_ADDR_VAR 0 2
13521: PUSH
13522: LD_INT 22
13524: PUSH
13525: LD_OWVAR 2
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: LD_INT 2
13536: PUSH
13537: LD_INT 34
13539: PUSH
13540: LD_INT 7
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 34
13549: PUSH
13550: LD_INT 45
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 34
13559: PUSH
13560: LD_INT 28
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 34
13569: PUSH
13570: LD_INT 47
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: ST_TO_ADDR
// if not tmp then
13593: LD_VAR 0 2
13597: NOT
13598: IFFALSE 13602
// exit ;
13600: GO 13631
// for i in tmp do
13602: LD_ADDR_VAR 0 1
13606: PUSH
13607: LD_VAR 0 2
13611: PUSH
13612: FOR_IN
13613: IFFALSE 13629
// begin SetLives ( i , 0 ) ;
13615: LD_VAR 0 1
13619: PPUSH
13620: LD_INT 0
13622: PPUSH
13623: CALL_OW 234
// end ;
13627: GO 13612
13629: POP
13630: POP
// end ;
13631: PPOPN 2
13633: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13634: LD_EXP 25
13638: PUSH
13639: LD_EXP 31
13643: AND
13644: IFFALSE 13728
13646: GO 13648
13648: DISABLE
13649: LD_INT 0
13651: PPUSH
13652: PPUSH
// begin enable ;
13653: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13654: LD_ADDR_VAR 0 2
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_OWVAR 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 32
13673: PUSH
13674: LD_INT 3
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PPUSH
13685: CALL_OW 69
13689: ST_TO_ADDR
// if not tmp then
13690: LD_VAR 0 2
13694: NOT
13695: IFFALSE 13699
// exit ;
13697: GO 13728
// for i in tmp do
13699: LD_ADDR_VAR 0 1
13703: PUSH
13704: LD_VAR 0 2
13708: PUSH
13709: FOR_IN
13710: IFFALSE 13726
// begin SetLives ( i , 0 ) ;
13712: LD_VAR 0 1
13716: PPUSH
13717: LD_INT 0
13719: PPUSH
13720: CALL_OW 234
// end ;
13724: GO 13709
13726: POP
13727: POP
// end ;
13728: PPOPN 2
13730: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13731: LD_EXP 25
13735: PUSH
13736: LD_EXP 28
13740: AND
13741: IFFALSE 13834
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
// begin enable ;
13749: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13750: LD_ADDR_VAR 0 1
13754: PUSH
13755: LD_INT 22
13757: PUSH
13758: LD_OWVAR 2
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 5
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: LD_INT 25
13782: PUSH
13783: LD_INT 9
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PUSH
13790: LD_INT 25
13792: PUSH
13793: LD_INT 8
13795: PUSH
13796: EMPTY
13797: LIST
13798: LIST
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: PPUSH
13810: CALL_OW 69
13814: PUSH
13815: FOR_IN
13816: IFFALSE 13832
// begin SetClass ( i , 1 ) ;
13818: LD_VAR 0 1
13822: PPUSH
13823: LD_INT 1
13825: PPUSH
13826: CALL_OW 336
// end ;
13830: GO 13815
13832: POP
13833: POP
// end ;
13834: PPOPN 1
13836: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13837: LD_EXP 25
13841: PUSH
13842: LD_EXP 29
13846: AND
13847: PUSH
13848: LD_OWVAR 65
13852: PUSH
13853: LD_INT 7
13855: LESS
13856: AND
13857: IFFALSE 13871
13859: GO 13861
13861: DISABLE
// begin enable ;
13862: ENABLE
// game_speed := 7 ;
13863: LD_ADDR_OWVAR 65
13867: PUSH
13868: LD_INT 7
13870: ST_TO_ADDR
// end ;
13871: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13872: LD_EXP 25
13876: PUSH
13877: LD_EXP 32
13881: AND
13882: IFFALSE 14084
13884: GO 13886
13886: DISABLE
13887: LD_INT 0
13889: PPUSH
13890: PPUSH
13891: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13892: LD_ADDR_VAR 0 3
13896: PUSH
13897: LD_INT 81
13899: PUSH
13900: LD_OWVAR 2
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 21
13911: PUSH
13912: LD_INT 1
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PPUSH
13923: CALL_OW 69
13927: ST_TO_ADDR
// if not tmp then
13928: LD_VAR 0 3
13932: NOT
13933: IFFALSE 13937
// exit ;
13935: GO 14084
// if tmp > 5 then
13937: LD_VAR 0 3
13941: PUSH
13942: LD_INT 5
13944: GREATER
13945: IFFALSE 13957
// k := 5 else
13947: LD_ADDR_VAR 0 2
13951: PUSH
13952: LD_INT 5
13954: ST_TO_ADDR
13955: GO 13967
// k := tmp ;
13957: LD_ADDR_VAR 0 2
13961: PUSH
13962: LD_VAR 0 3
13966: ST_TO_ADDR
// for i := 1 to k do
13967: LD_ADDR_VAR 0 1
13971: PUSH
13972: DOUBLE
13973: LD_INT 1
13975: DEC
13976: ST_TO_ADDR
13977: LD_VAR 0 2
13981: PUSH
13982: FOR_TO
13983: IFFALSE 14082
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13985: LD_VAR 0 3
13989: PUSH
13990: LD_VAR 0 1
13994: ARRAY
13995: PPUSH
13996: LD_VAR 0 1
14000: PUSH
14001: LD_INT 4
14003: MOD
14004: PUSH
14005: LD_INT 1
14007: PLUS
14008: PPUSH
14009: CALL_OW 259
14013: PUSH
14014: LD_INT 10
14016: LESS
14017: IFFALSE 14080
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14019: LD_VAR 0 3
14023: PUSH
14024: LD_VAR 0 1
14028: ARRAY
14029: PPUSH
14030: LD_VAR 0 1
14034: PUSH
14035: LD_INT 4
14037: MOD
14038: PUSH
14039: LD_INT 1
14041: PLUS
14042: PPUSH
14043: LD_VAR 0 3
14047: PUSH
14048: LD_VAR 0 1
14052: ARRAY
14053: PPUSH
14054: LD_VAR 0 1
14058: PUSH
14059: LD_INT 4
14061: MOD
14062: PUSH
14063: LD_INT 1
14065: PLUS
14066: PPUSH
14067: CALL_OW 259
14071: PUSH
14072: LD_INT 1
14074: PLUS
14075: PPUSH
14076: CALL_OW 237
14080: GO 13982
14082: POP
14083: POP
// end ;
14084: PPOPN 3
14086: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14087: LD_EXP 25
14091: PUSH
14092: LD_EXP 33
14096: AND
14097: IFFALSE 14117
14099: GO 14101
14101: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14102: LD_INT 4
14104: PPUSH
14105: LD_OWVAR 2
14109: PPUSH
14110: LD_INT 0
14112: PPUSH
14113: CALL_OW 324
14117: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14118: LD_EXP 25
14122: PUSH
14123: LD_EXP 62
14127: AND
14128: IFFALSE 14148
14130: GO 14132
14132: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14133: LD_INT 19
14135: PPUSH
14136: LD_OWVAR 2
14140: PPUSH
14141: LD_INT 0
14143: PPUSH
14144: CALL_OW 324
14148: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14149: LD_EXP 25
14153: PUSH
14154: LD_EXP 34
14158: AND
14159: IFFALSE 14261
14161: GO 14163
14163: DISABLE
14164: LD_INT 0
14166: PPUSH
14167: PPUSH
// begin enable ;
14168: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14169: LD_ADDR_VAR 0 2
14173: PUSH
14174: LD_INT 22
14176: PUSH
14177: LD_OWVAR 2
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PUSH
14186: LD_INT 2
14188: PUSH
14189: LD_INT 34
14191: PUSH
14192: LD_INT 11
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 34
14201: PUSH
14202: LD_INT 30
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: ST_TO_ADDR
// if not tmp then
14223: LD_VAR 0 2
14227: NOT
14228: IFFALSE 14232
// exit ;
14230: GO 14261
// for i in tmp do
14232: LD_ADDR_VAR 0 1
14236: PUSH
14237: LD_VAR 0 2
14241: PUSH
14242: FOR_IN
14243: IFFALSE 14259
// begin SetLives ( i , 0 ) ;
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 0
14252: PPUSH
14253: CALL_OW 234
// end ;
14257: GO 14242
14259: POP
14260: POP
// end ;
14261: PPOPN 2
14263: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14264: LD_EXP 25
14268: PUSH
14269: LD_EXP 35
14273: AND
14274: IFFALSE 14294
14276: GO 14278
14278: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14279: LD_INT 32
14281: PPUSH
14282: LD_OWVAR 2
14286: PPUSH
14287: LD_INT 0
14289: PPUSH
14290: CALL_OW 324
14294: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14295: LD_EXP 25
14299: PUSH
14300: LD_EXP 36
14304: AND
14305: IFFALSE 14486
14307: GO 14309
14309: DISABLE
14310: LD_INT 0
14312: PPUSH
14313: PPUSH
14314: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14315: LD_ADDR_VAR 0 2
14319: PUSH
14320: LD_INT 22
14322: PUSH
14323: LD_OWVAR 2
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: LD_INT 33
14334: PUSH
14335: LD_INT 3
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PPUSH
14346: CALL_OW 69
14350: ST_TO_ADDR
// if not tmp then
14351: LD_VAR 0 2
14355: NOT
14356: IFFALSE 14360
// exit ;
14358: GO 14486
// side := 0 ;
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 0
14367: ST_TO_ADDR
// for i := 1 to 8 do
14368: LD_ADDR_VAR 0 1
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_INT 8
14380: PUSH
14381: FOR_TO
14382: IFFALSE 14430
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14384: LD_OWVAR 2
14388: PUSH
14389: LD_VAR 0 1
14393: NONEQUAL
14394: PUSH
14395: LD_OWVAR 2
14399: PPUSH
14400: LD_VAR 0 1
14404: PPUSH
14405: CALL_OW 81
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: AND
14414: IFFALSE 14428
// begin side := i ;
14416: LD_ADDR_VAR 0 3
14420: PUSH
14421: LD_VAR 0 1
14425: ST_TO_ADDR
// break ;
14426: GO 14430
// end ;
14428: GO 14381
14430: POP
14431: POP
// if not side then
14432: LD_VAR 0 3
14436: NOT
14437: IFFALSE 14441
// exit ;
14439: GO 14486
// for i := 1 to tmp do
14441: LD_ADDR_VAR 0 1
14445: PUSH
14446: DOUBLE
14447: LD_INT 1
14449: DEC
14450: ST_TO_ADDR
14451: LD_VAR 0 2
14455: PUSH
14456: FOR_TO
14457: IFFALSE 14484
// if Prob ( 60 ) then
14459: LD_INT 60
14461: PPUSH
14462: CALL_OW 13
14466: IFFALSE 14482
// SetSide ( i , side ) ;
14468: LD_VAR 0 1
14472: PPUSH
14473: LD_VAR 0 3
14477: PPUSH
14478: CALL_OW 235
14482: GO 14456
14484: POP
14485: POP
// end ;
14486: PPOPN 3
14488: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14489: LD_EXP 25
14493: PUSH
14494: LD_EXP 38
14498: AND
14499: IFFALSE 14618
14501: GO 14503
14503: DISABLE
14504: LD_INT 0
14506: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14507: LD_ADDR_VAR 0 1
14511: PUSH
14512: LD_INT 22
14514: PUSH
14515: LD_OWVAR 2
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: PUSH
14524: LD_INT 21
14526: PUSH
14527: LD_INT 1
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: PUSH
14534: LD_INT 3
14536: PUSH
14537: LD_INT 23
14539: PUSH
14540: LD_INT 0
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: PUSH
14561: FOR_IN
14562: IFFALSE 14616
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14564: LD_VAR 0 1
14568: PPUSH
14569: CALL_OW 257
14573: PUSH
14574: LD_INT 1
14576: PUSH
14577: LD_INT 2
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: LD_INT 4
14585: PUSH
14586: EMPTY
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: IN
14592: IFFALSE 14614
// SetClass ( un , rand ( 1 , 4 ) ) ;
14594: LD_VAR 0 1
14598: PPUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_INT 4
14604: PPUSH
14605: CALL_OW 12
14609: PPUSH
14610: CALL_OW 336
14614: GO 14561
14616: POP
14617: POP
// end ;
14618: PPOPN 1
14620: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14621: LD_EXP 25
14625: PUSH
14626: LD_EXP 37
14630: AND
14631: IFFALSE 14710
14633: GO 14635
14635: DISABLE
14636: LD_INT 0
14638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14639: LD_ADDR_VAR 0 1
14643: PUSH
14644: LD_INT 22
14646: PUSH
14647: LD_OWVAR 2
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PUSH
14656: LD_INT 21
14658: PUSH
14659: LD_INT 3
14661: PUSH
14662: EMPTY
14663: LIST
14664: LIST
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL_OW 69
14674: ST_TO_ADDR
// if not tmp then
14675: LD_VAR 0 1
14679: NOT
14680: IFFALSE 14684
// exit ;
14682: GO 14710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14684: LD_VAR 0 1
14688: PUSH
14689: LD_INT 1
14691: PPUSH
14692: LD_VAR 0 1
14696: PPUSH
14697: CALL_OW 12
14701: ARRAY
14702: PPUSH
14703: LD_INT 100
14705: PPUSH
14706: CALL_OW 234
// end ;
14710: PPOPN 1
14712: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14713: LD_EXP 25
14717: PUSH
14718: LD_EXP 39
14722: AND
14723: IFFALSE 14821
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PPUSH
14762: CALL_OW 69
14766: ST_TO_ADDR
// if not tmp then
14767: LD_VAR 0 1
14771: NOT
14772: IFFALSE 14776
// exit ;
14774: GO 14821
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14776: LD_VAR 0 1
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_VAR 0 1
14788: PPUSH
14789: CALL_OW 12
14793: ARRAY
14794: PPUSH
14795: LD_INT 1
14797: PPUSH
14798: LD_INT 4
14800: PPUSH
14801: CALL_OW 12
14805: PPUSH
14806: LD_INT 3000
14808: PPUSH
14809: LD_INT 9000
14811: PPUSH
14812: CALL_OW 12
14816: PPUSH
14817: CALL_OW 492
// end ;
14821: PPOPN 1
14823: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14824: LD_EXP 25
14828: PUSH
14829: LD_EXP 40
14833: AND
14834: IFFALSE 14854
14836: GO 14838
14838: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14839: LD_INT 1
14841: PPUSH
14842: LD_OWVAR 2
14846: PPUSH
14847: LD_INT 0
14849: PPUSH
14850: CALL_OW 324
14854: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14855: LD_EXP 25
14859: PUSH
14860: LD_EXP 41
14864: AND
14865: IFFALSE 14948
14867: GO 14869
14869: DISABLE
14870: LD_INT 0
14872: PPUSH
14873: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14874: LD_ADDR_VAR 0 2
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_OWVAR 2
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: LD_INT 21
14893: PUSH
14894: LD_INT 3
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: ST_TO_ADDR
// if not tmp then
14910: LD_VAR 0 2
14914: NOT
14915: IFFALSE 14919
// exit ;
14917: GO 14948
// for i in tmp do
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: LD_VAR 0 2
14928: PUSH
14929: FOR_IN
14930: IFFALSE 14946
// SetBLevel ( i , 10 ) ;
14932: LD_VAR 0 1
14936: PPUSH
14937: LD_INT 10
14939: PPUSH
14940: CALL_OW 241
14944: GO 14929
14946: POP
14947: POP
// end ;
14948: PPOPN 2
14950: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14951: LD_EXP 25
14955: PUSH
14956: LD_EXP 42
14960: AND
14961: IFFALSE 15072
14963: GO 14965
14965: DISABLE
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
14970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14971: LD_ADDR_VAR 0 3
14975: PUSH
14976: LD_INT 22
14978: PUSH
14979: LD_OWVAR 2
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 1
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PPUSH
15002: CALL_OW 69
15006: ST_TO_ADDR
// if not tmp then
15007: LD_VAR 0 3
15011: NOT
15012: IFFALSE 15016
// exit ;
15014: GO 15072
// un := tmp [ rand ( 1 , tmp ) ] ;
15016: LD_ADDR_VAR 0 2
15020: PUSH
15021: LD_VAR 0 3
15025: PUSH
15026: LD_INT 1
15028: PPUSH
15029: LD_VAR 0 3
15033: PPUSH
15034: CALL_OW 12
15038: ARRAY
15039: ST_TO_ADDR
// if Crawls ( un ) then
15040: LD_VAR 0 2
15044: PPUSH
15045: CALL_OW 318
15049: IFFALSE 15060
// ComWalk ( un ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15060: LD_VAR 0 2
15064: PPUSH
15065: LD_INT 5
15067: PPUSH
15068: CALL_OW 336
// end ;
15072: PPOPN 3
15074: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15075: LD_EXP 25
15079: PUSH
15080: LD_EXP 43
15084: AND
15085: PUSH
15086: LD_OWVAR 67
15090: PUSH
15091: LD_INT 4
15093: LESS
15094: AND
15095: IFFALSE 15114
15097: GO 15099
15099: DISABLE
// begin Difficulty := Difficulty + 1 ;
15100: LD_ADDR_OWVAR 67
15104: PUSH
15105: LD_OWVAR 67
15109: PUSH
15110: LD_INT 1
15112: PLUS
15113: ST_TO_ADDR
// end ;
15114: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15115: LD_EXP 25
15119: PUSH
15120: LD_EXP 44
15124: AND
15125: IFFALSE 15228
15127: GO 15129
15129: DISABLE
15130: LD_INT 0
15132: PPUSH
// begin for i := 1 to 5 do
15133: LD_ADDR_VAR 0 1
15137: PUSH
15138: DOUBLE
15139: LD_INT 1
15141: DEC
15142: ST_TO_ADDR
15143: LD_INT 5
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15226
// begin uc_nation := nation_nature ;
15149: LD_ADDR_OWVAR 21
15153: PUSH
15154: LD_INT 0
15156: ST_TO_ADDR
// uc_side := 0 ;
15157: LD_ADDR_OWVAR 20
15161: PUSH
15162: LD_INT 0
15164: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15165: LD_ADDR_OWVAR 29
15169: PUSH
15170: LD_INT 12
15172: PUSH
15173: LD_INT 12
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
// hc_agressivity := 20 ;
15180: LD_ADDR_OWVAR 35
15184: PUSH
15185: LD_INT 20
15187: ST_TO_ADDR
// hc_class := class_tiger ;
15188: LD_ADDR_OWVAR 28
15192: PUSH
15193: LD_INT 14
15195: ST_TO_ADDR
// hc_gallery :=  ;
15196: LD_ADDR_OWVAR 33
15200: PUSH
15201: LD_STRING 
15203: ST_TO_ADDR
// hc_name :=  ;
15204: LD_ADDR_OWVAR 26
15208: PUSH
15209: LD_STRING 
15211: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15212: CALL_OW 44
15216: PPUSH
15217: LD_INT 0
15219: PPUSH
15220: CALL_OW 51
// end ;
15224: GO 15146
15226: POP
15227: POP
// end ;
15228: PPOPN 1
15230: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15231: LD_EXP 25
15235: PUSH
15236: LD_EXP 45
15240: AND
15241: IFFALSE 15250
15243: GO 15245
15245: DISABLE
// StreamSibBomb ;
15246: CALL 15251 0 0
15250: END
// export function StreamSibBomb ; var i , x , y ; begin
15251: LD_INT 0
15253: PPUSH
15254: PPUSH
15255: PPUSH
15256: PPUSH
// result := false ;
15257: LD_ADDR_VAR 0 1
15261: PUSH
15262: LD_INT 0
15264: ST_TO_ADDR
// for i := 1 to 16 do
15265: LD_ADDR_VAR 0 2
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_INT 16
15277: PUSH
15278: FOR_TO
15279: IFFALSE 15478
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15281: LD_ADDR_VAR 0 3
15285: PUSH
15286: LD_INT 10
15288: PUSH
15289: LD_INT 20
15291: PUSH
15292: LD_INT 30
15294: PUSH
15295: LD_INT 40
15297: PUSH
15298: LD_INT 50
15300: PUSH
15301: LD_INT 60
15303: PUSH
15304: LD_INT 70
15306: PUSH
15307: LD_INT 80
15309: PUSH
15310: LD_INT 90
15312: PUSH
15313: LD_INT 100
15315: PUSH
15316: LD_INT 110
15318: PUSH
15319: LD_INT 120
15321: PUSH
15322: LD_INT 130
15324: PUSH
15325: LD_INT 140
15327: PUSH
15328: LD_INT 150
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 1
15350: PPUSH
15351: LD_INT 15
15353: PPUSH
15354: CALL_OW 12
15358: ARRAY
15359: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15360: LD_ADDR_VAR 0 4
15364: PUSH
15365: LD_INT 10
15367: PUSH
15368: LD_INT 20
15370: PUSH
15371: LD_INT 30
15373: PUSH
15374: LD_INT 40
15376: PUSH
15377: LD_INT 50
15379: PUSH
15380: LD_INT 60
15382: PUSH
15383: LD_INT 70
15385: PUSH
15386: LD_INT 80
15388: PUSH
15389: LD_INT 90
15391: PUSH
15392: LD_INT 100
15394: PUSH
15395: LD_INT 110
15397: PUSH
15398: LD_INT 120
15400: PUSH
15401: LD_INT 130
15403: PUSH
15404: LD_INT 140
15406: PUSH
15407: LD_INT 150
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 1
15429: PPUSH
15430: LD_INT 15
15432: PPUSH
15433: CALL_OW 12
15437: ARRAY
15438: ST_TO_ADDR
// if ValidHex ( x , y ) then
15439: LD_VAR 0 3
15443: PPUSH
15444: LD_VAR 0 4
15448: PPUSH
15449: CALL_OW 488
15453: IFFALSE 15476
// begin result := [ x , y ] ;
15455: LD_ADDR_VAR 0 1
15459: PUSH
15460: LD_VAR 0 3
15464: PUSH
15465: LD_VAR 0 4
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: ST_TO_ADDR
// break ;
15474: GO 15478
// end ; end ;
15476: GO 15278
15478: POP
15479: POP
// if result then
15480: LD_VAR 0 1
15484: IFFALSE 15544
// begin ToLua ( playSibBomb() ) ;
15486: LD_STRING playSibBomb()
15488: PPUSH
15489: CALL_OW 559
// wait ( 0 0$14 ) ;
15493: LD_INT 490
15495: PPUSH
15496: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15500: LD_VAR 0 1
15504: PUSH
15505: LD_INT 1
15507: ARRAY
15508: PPUSH
15509: LD_VAR 0 1
15513: PUSH
15514: LD_INT 2
15516: ARRAY
15517: PPUSH
15518: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15522: LD_VAR 0 1
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 1
15535: PUSH
15536: LD_INT 2
15538: ARRAY
15539: PPUSH
15540: CALL_OW 429
// end ; end ;
15544: LD_VAR 0 1
15548: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15549: LD_EXP 25
15553: PUSH
15554: LD_EXP 47
15558: AND
15559: IFFALSE 15571
15561: GO 15563
15563: DISABLE
// YouLost (  ) ;
15564: LD_STRING 
15566: PPUSH
15567: CALL_OW 104
15571: END
// every 0 0$1 trigger StreamModeActive and sFog do
15572: LD_EXP 25
15576: PUSH
15577: LD_EXP 46
15581: AND
15582: IFFALSE 15596
15584: GO 15586
15586: DISABLE
// FogOff ( your_side ) ;
15587: LD_OWVAR 2
15591: PPUSH
15592: CALL_OW 344
15596: END
// every 0 0$1 trigger StreamModeActive and sSun do
15597: LD_EXP 25
15601: PUSH
15602: LD_EXP 48
15606: AND
15607: IFFALSE 15635
15609: GO 15611
15611: DISABLE
// begin solar_recharge_percent := 0 ;
15612: LD_ADDR_OWVAR 79
15616: PUSH
15617: LD_INT 0
15619: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15620: LD_INT 10500
15622: PPUSH
15623: CALL_OW 67
// solar_recharge_percent := 100 ;
15627: LD_ADDR_OWVAR 79
15631: PUSH
15632: LD_INT 100
15634: ST_TO_ADDR
// end ;
15635: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15636: LD_EXP 25
15640: PUSH
15641: LD_EXP 49
15645: AND
15646: IFFALSE 15885
15648: GO 15650
15650: DISABLE
15651: LD_INT 0
15653: PPUSH
15654: PPUSH
15655: PPUSH
// begin tmp := [ ] ;
15656: LD_ADDR_VAR 0 3
15660: PUSH
15661: EMPTY
15662: ST_TO_ADDR
// for i := 1 to 6 do
15663: LD_ADDR_VAR 0 1
15667: PUSH
15668: DOUBLE
15669: LD_INT 1
15671: DEC
15672: ST_TO_ADDR
15673: LD_INT 6
15675: PUSH
15676: FOR_TO
15677: IFFALSE 15782
// begin uc_nation := nation_nature ;
15679: LD_ADDR_OWVAR 21
15683: PUSH
15684: LD_INT 0
15686: ST_TO_ADDR
// uc_side := 0 ;
15687: LD_ADDR_OWVAR 20
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15695: LD_ADDR_OWVAR 29
15699: PUSH
15700: LD_INT 12
15702: PUSH
15703: LD_INT 12
15705: PUSH
15706: EMPTY
15707: LIST
15708: LIST
15709: ST_TO_ADDR
// hc_agressivity := 20 ;
15710: LD_ADDR_OWVAR 35
15714: PUSH
15715: LD_INT 20
15717: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15718: LD_ADDR_OWVAR 28
15722: PUSH
15723: LD_INT 17
15725: ST_TO_ADDR
// hc_gallery :=  ;
15726: LD_ADDR_OWVAR 33
15730: PUSH
15731: LD_STRING 
15733: ST_TO_ADDR
// hc_name :=  ;
15734: LD_ADDR_OWVAR 26
15738: PUSH
15739: LD_STRING 
15741: ST_TO_ADDR
// un := CreateHuman ;
15742: LD_ADDR_VAR 0 2
15746: PUSH
15747: CALL_OW 44
15751: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15752: LD_VAR 0 2
15756: PPUSH
15757: LD_INT 1
15759: PPUSH
15760: CALL_OW 51
// tmp := tmp ^ un ;
15764: LD_ADDR_VAR 0 3
15768: PUSH
15769: LD_VAR 0 3
15773: PUSH
15774: LD_VAR 0 2
15778: ADD
15779: ST_TO_ADDR
// end ;
15780: GO 15676
15782: POP
15783: POP
// repeat wait ( 0 0$1 ) ;
15784: LD_INT 35
15786: PPUSH
15787: CALL_OW 67
// for un in tmp do
15791: LD_ADDR_VAR 0 2
15795: PUSH
15796: LD_VAR 0 3
15800: PUSH
15801: FOR_IN
15802: IFFALSE 15876
// begin if IsDead ( un ) then
15804: LD_VAR 0 2
15808: PPUSH
15809: CALL_OW 301
15813: IFFALSE 15833
// begin tmp := tmp diff un ;
15815: LD_ADDR_VAR 0 3
15819: PUSH
15820: LD_VAR 0 3
15824: PUSH
15825: LD_VAR 0 2
15829: DIFF
15830: ST_TO_ADDR
// continue ;
15831: GO 15801
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15833: LD_VAR 0 2
15837: PPUSH
15838: LD_INT 3
15840: PUSH
15841: LD_INT 22
15843: PUSH
15844: LD_INT 0
15846: PUSH
15847: EMPTY
15848: LIST
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 69
15859: PPUSH
15860: LD_VAR 0 2
15864: PPUSH
15865: CALL_OW 74
15869: PPUSH
15870: CALL_OW 115
// end ;
15874: GO 15801
15876: POP
15877: POP
// until not tmp ;
15878: LD_VAR 0 3
15882: NOT
15883: IFFALSE 15784
// end ;
15885: PPOPN 3
15887: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15888: LD_EXP 25
15892: PUSH
15893: LD_EXP 50
15897: AND
15898: IFFALSE 15952
15900: GO 15902
15902: DISABLE
// begin ToLua ( displayTroll(); ) ;
15903: LD_STRING displayTroll();
15905: PPUSH
15906: CALL_OW 559
// wait ( 3 3$00 ) ;
15910: LD_INT 6300
15912: PPUSH
15913: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15917: LD_STRING hideTroll();
15919: PPUSH
15920: CALL_OW 559
// wait ( 1 1$00 ) ;
15924: LD_INT 2100
15926: PPUSH
15927: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15931: LD_STRING displayTroll();
15933: PPUSH
15934: CALL_OW 559
// wait ( 1 1$00 ) ;
15938: LD_INT 2100
15940: PPUSH
15941: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15945: LD_STRING hideTroll();
15947: PPUSH
15948: CALL_OW 559
// end ;
15952: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15953: LD_EXP 25
15957: PUSH
15958: LD_EXP 51
15962: AND
15963: IFFALSE 16026
15965: GO 15967
15967: DISABLE
15968: LD_INT 0
15970: PPUSH
// begin p := 0 ;
15971: LD_ADDR_VAR 0 1
15975: PUSH
15976: LD_INT 0
15978: ST_TO_ADDR
// repeat game_speed := 1 ;
15979: LD_ADDR_OWVAR 65
15983: PUSH
15984: LD_INT 1
15986: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15987: LD_INT 35
15989: PPUSH
15990: CALL_OW 67
// p := p + 1 ;
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: LD_VAR 0 1
16003: PUSH
16004: LD_INT 1
16006: PLUS
16007: ST_TO_ADDR
// until p >= 60 ;
16008: LD_VAR 0 1
16012: PUSH
16013: LD_INT 60
16015: GREATEREQUAL
16016: IFFALSE 15979
// game_speed := 4 ;
16018: LD_ADDR_OWVAR 65
16022: PUSH
16023: LD_INT 4
16025: ST_TO_ADDR
// end ;
16026: PPOPN 1
16028: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16029: LD_EXP 25
16033: PUSH
16034: LD_EXP 52
16038: AND
16039: IFFALSE 16185
16041: GO 16043
16043: DISABLE
16044: LD_INT 0
16046: PPUSH
16047: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16048: LD_ADDR_VAR 0 1
16052: PUSH
16053: LD_INT 22
16055: PUSH
16056: LD_OWVAR 2
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: LD_INT 2
16067: PUSH
16068: LD_INT 30
16070: PUSH
16071: LD_INT 0
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 30
16080: PUSH
16081: LD_INT 1
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: ST_TO_ADDR
// if not depot then
16102: LD_VAR 0 1
16106: NOT
16107: IFFALSE 16111
// exit ;
16109: GO 16185
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16111: LD_ADDR_VAR 0 2
16115: PUSH
16116: LD_VAR 0 1
16120: PUSH
16121: LD_INT 1
16123: PPUSH
16124: LD_VAR 0 1
16128: PPUSH
16129: CALL_OW 12
16133: ARRAY
16134: PPUSH
16135: CALL_OW 274
16139: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16140: LD_VAR 0 2
16144: PPUSH
16145: LD_INT 1
16147: PPUSH
16148: LD_INT 0
16150: PPUSH
16151: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16155: LD_VAR 0 2
16159: PPUSH
16160: LD_INT 2
16162: PPUSH
16163: LD_INT 0
16165: PPUSH
16166: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16170: LD_VAR 0 2
16174: PPUSH
16175: LD_INT 3
16177: PPUSH
16178: LD_INT 0
16180: PPUSH
16181: CALL_OW 277
// end ;
16185: PPOPN 2
16187: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16188: LD_EXP 25
16192: PUSH
16193: LD_EXP 53
16197: AND
16198: IFFALSE 16295
16200: GO 16202
16202: DISABLE
16203: LD_INT 0
16205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16206: LD_ADDR_VAR 0 1
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_OWVAR 2
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 1
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 3
16235: PUSH
16236: LD_INT 23
16238: PUSH
16239: LD_INT 0
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: EMPTY
16251: LIST
16252: LIST
16253: LIST
16254: PPUSH
16255: CALL_OW 69
16259: ST_TO_ADDR
// if not tmp then
16260: LD_VAR 0 1
16264: NOT
16265: IFFALSE 16269
// exit ;
16267: GO 16295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16269: LD_VAR 0 1
16273: PUSH
16274: LD_INT 1
16276: PPUSH
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: PPUSH
16288: LD_INT 200
16290: PPUSH
16291: CALL_OW 234
// end ;
16295: PPOPN 1
16297: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16298: LD_EXP 25
16302: PUSH
16303: LD_EXP 54
16307: AND
16308: IFFALSE 16387
16310: GO 16312
16312: DISABLE
16313: LD_INT 0
16315: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16316: LD_ADDR_VAR 0 1
16320: PUSH
16321: LD_INT 22
16323: PUSH
16324: LD_OWVAR 2
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: PUSH
16333: LD_INT 21
16335: PUSH
16336: LD_INT 2
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PPUSH
16347: CALL_OW 69
16351: ST_TO_ADDR
// if not tmp then
16352: LD_VAR 0 1
16356: NOT
16357: IFFALSE 16361
// exit ;
16359: GO 16387
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16361: LD_VAR 0 1
16365: PUSH
16366: LD_INT 1
16368: PPUSH
16369: LD_VAR 0 1
16373: PPUSH
16374: CALL_OW 12
16378: ARRAY
16379: PPUSH
16380: LD_INT 60
16382: PPUSH
16383: CALL_OW 234
// end ;
16387: PPOPN 1
16389: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16390: LD_EXP 25
16394: PUSH
16395: LD_EXP 55
16399: AND
16400: IFFALSE 16499
16402: GO 16404
16404: DISABLE
16405: LD_INT 0
16407: PPUSH
16408: PPUSH
// begin enable ;
16409: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16410: LD_ADDR_VAR 0 1
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_OWVAR 2
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 61
16429: PUSH
16430: EMPTY
16431: LIST
16432: PUSH
16433: LD_INT 33
16435: PUSH
16436: LD_INT 2
16438: PUSH
16439: EMPTY
16440: LIST
16441: LIST
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: LIST
16447: PPUSH
16448: CALL_OW 69
16452: ST_TO_ADDR
// if not tmp then
16453: LD_VAR 0 1
16457: NOT
16458: IFFALSE 16462
// exit ;
16460: GO 16499
// for i in tmp do
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_VAR 0 1
16471: PUSH
16472: FOR_IN
16473: IFFALSE 16497
// if IsControledBy ( i ) then
16475: LD_VAR 0 2
16479: PPUSH
16480: CALL_OW 312
16484: IFFALSE 16495
// ComUnlink ( i ) ;
16486: LD_VAR 0 2
16490: PPUSH
16491: CALL_OW 136
16495: GO 16472
16497: POP
16498: POP
// end ;
16499: PPOPN 2
16501: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16502: LD_EXP 25
16506: PUSH
16507: LD_EXP 56
16511: AND
16512: IFFALSE 16652
16514: GO 16516
16516: DISABLE
16517: LD_INT 0
16519: PPUSH
16520: PPUSH
// begin ToLua ( displayPowell(); ) ;
16521: LD_STRING displayPowell();
16523: PPUSH
16524: CALL_OW 559
// uc_side := 0 ;
16528: LD_ADDR_OWVAR 20
16532: PUSH
16533: LD_INT 0
16535: ST_TO_ADDR
// uc_nation := 2 ;
16536: LD_ADDR_OWVAR 21
16540: PUSH
16541: LD_INT 2
16543: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16544: LD_ADDR_OWVAR 37
16548: PUSH
16549: LD_INT 14
16551: ST_TO_ADDR
// vc_engine := engine_siberite ;
16552: LD_ADDR_OWVAR 39
16556: PUSH
16557: LD_INT 3
16559: ST_TO_ADDR
// vc_control := control_apeman ;
16560: LD_ADDR_OWVAR 38
16564: PUSH
16565: LD_INT 5
16567: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16568: LD_ADDR_OWVAR 40
16572: PUSH
16573: LD_INT 29
16575: ST_TO_ADDR
// un := CreateVehicle ;
16576: LD_ADDR_VAR 0 2
16580: PUSH
16581: CALL_OW 45
16585: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16586: LD_VAR 0 2
16590: PPUSH
16591: LD_INT 1
16593: PPUSH
16594: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16598: LD_INT 35
16600: PPUSH
16601: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16605: LD_VAR 0 2
16609: PPUSH
16610: LD_INT 22
16612: PUSH
16613: LD_OWVAR 2
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PPUSH
16627: LD_VAR 0 2
16631: PPUSH
16632: CALL_OW 74
16636: PPUSH
16637: CALL_OW 115
// until IsDead ( un ) ;
16641: LD_VAR 0 2
16645: PPUSH
16646: CALL_OW 301
16650: IFFALSE 16598
// end ;
16652: PPOPN 2
16654: END
// every 0 0$1 trigger StreamModeActive and sStu do
16655: LD_EXP 25
16659: PUSH
16660: LD_EXP 64
16664: AND
16665: IFFALSE 16681
16667: GO 16669
16669: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16670: LD_STRING displayStucuk();
16672: PPUSH
16673: CALL_OW 559
// ResetFog ;
16677: CALL_OW 335
// end ;
16681: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16682: LD_EXP 25
16686: PUSH
16687: LD_EXP 57
16691: AND
16692: IFFALSE 16833
16694: GO 16696
16696: DISABLE
16697: LD_INT 0
16699: PPUSH
16700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16701: LD_ADDR_VAR 0 2
16705: PUSH
16706: LD_INT 22
16708: PUSH
16709: LD_OWVAR 2
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PPUSH
16732: CALL_OW 69
16736: ST_TO_ADDR
// if not tmp then
16737: LD_VAR 0 2
16741: NOT
16742: IFFALSE 16746
// exit ;
16744: GO 16833
// un := tmp [ rand ( 1 , tmp ) ] ;
16746: LD_ADDR_VAR 0 1
16750: PUSH
16751: LD_VAR 0 2
16755: PUSH
16756: LD_INT 1
16758: PPUSH
16759: LD_VAR 0 2
16763: PPUSH
16764: CALL_OW 12
16768: ARRAY
16769: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16770: LD_VAR 0 1
16774: PPUSH
16775: LD_INT 0
16777: PPUSH
16778: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16782: LD_VAR 0 1
16786: PPUSH
16787: LD_OWVAR 3
16791: PUSH
16792: LD_VAR 0 1
16796: DIFF
16797: PPUSH
16798: LD_VAR 0 1
16802: PPUSH
16803: CALL_OW 74
16807: PPUSH
16808: CALL_OW 115
// wait ( 0 0$20 ) ;
16812: LD_INT 700
16814: PPUSH
16815: CALL_OW 67
// SetSide ( un , your_side ) ;
16819: LD_VAR 0 1
16823: PPUSH
16824: LD_OWVAR 2
16828: PPUSH
16829: CALL_OW 235
// end ;
16833: PPOPN 2
16835: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16836: LD_EXP 25
16840: PUSH
16841: LD_EXP 58
16845: AND
16846: IFFALSE 16952
16848: GO 16850
16850: DISABLE
16851: LD_INT 0
16853: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16854: LD_ADDR_VAR 0 1
16858: PUSH
16859: LD_INT 22
16861: PUSH
16862: LD_OWVAR 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 2
16873: PUSH
16874: LD_INT 30
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: LD_INT 30
16886: PUSH
16887: LD_INT 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PPUSH
16903: CALL_OW 69
16907: ST_TO_ADDR
// if not depot then
16908: LD_VAR 0 1
16912: NOT
16913: IFFALSE 16917
// exit ;
16915: GO 16952
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16917: LD_VAR 0 1
16921: PUSH
16922: LD_INT 1
16924: ARRAY
16925: PPUSH
16926: CALL_OW 250
16930: PPUSH
16931: LD_VAR 0 1
16935: PUSH
16936: LD_INT 1
16938: ARRAY
16939: PPUSH
16940: CALL_OW 251
16944: PPUSH
16945: LD_INT 70
16947: PPUSH
16948: CALL_OW 495
// end ;
16952: PPOPN 1
16954: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16955: LD_EXP 25
16959: PUSH
16960: LD_EXP 59
16964: AND
16965: IFFALSE 17176
16967: GO 16969
16969: DISABLE
16970: LD_INT 0
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16977: LD_ADDR_VAR 0 5
16981: PUSH
16982: LD_INT 22
16984: PUSH
16985: LD_OWVAR 2
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 1
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PPUSH
17008: CALL_OW 69
17012: ST_TO_ADDR
// if not tmp then
17013: LD_VAR 0 5
17017: NOT
17018: IFFALSE 17022
// exit ;
17020: GO 17176
// for i in tmp do
17022: LD_ADDR_VAR 0 1
17026: PUSH
17027: LD_VAR 0 5
17031: PUSH
17032: FOR_IN
17033: IFFALSE 17174
// begin d := rand ( 0 , 5 ) ;
17035: LD_ADDR_VAR 0 4
17039: PUSH
17040: LD_INT 0
17042: PPUSH
17043: LD_INT 5
17045: PPUSH
17046: CALL_OW 12
17050: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17051: LD_ADDR_VAR 0 2
17055: PUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 250
17065: PPUSH
17066: LD_VAR 0 4
17070: PPUSH
17071: LD_INT 3
17073: PPUSH
17074: LD_INT 12
17076: PPUSH
17077: CALL_OW 12
17081: PPUSH
17082: CALL_OW 272
17086: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: LD_VAR 0 1
17096: PPUSH
17097: CALL_OW 251
17101: PPUSH
17102: LD_VAR 0 4
17106: PPUSH
17107: LD_INT 3
17109: PPUSH
17110: LD_INT 12
17112: PPUSH
17113: CALL_OW 12
17117: PPUSH
17118: CALL_OW 273
17122: ST_TO_ADDR
// if ValidHex ( x , y ) then
17123: LD_VAR 0 2
17127: PPUSH
17128: LD_VAR 0 3
17132: PPUSH
17133: CALL_OW 488
17137: IFFALSE 17172
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17139: LD_VAR 0 1
17143: PPUSH
17144: LD_VAR 0 2
17148: PPUSH
17149: LD_VAR 0 3
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: LD_INT 6
17159: PPUSH
17160: CALL_OW 12
17164: PPUSH
17165: LD_INT 1
17167: PPUSH
17168: CALL_OW 483
// end ;
17172: GO 17032
17174: POP
17175: POP
// end ;
17176: PPOPN 5
17178: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17179: LD_EXP 25
17183: PUSH
17184: LD_EXP 60
17188: AND
17189: IFFALSE 17283
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17198: LD_ADDR_VAR 0 2
17202: PUSH
17203: LD_INT 22
17205: PUSH
17206: LD_OWVAR 2
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: PUSH
17215: LD_INT 32
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 21
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: PPUSH
17240: CALL_OW 69
17244: ST_TO_ADDR
// if not tmp then
17245: LD_VAR 0 2
17249: NOT
17250: IFFALSE 17254
// exit ;
17252: GO 17283
// for i in tmp do
17254: LD_ADDR_VAR 0 1
17258: PUSH
17259: LD_VAR 0 2
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17281
// SetFuel ( i , 0 ) ;
17267: LD_VAR 0 1
17271: PPUSH
17272: LD_INT 0
17274: PPUSH
17275: CALL_OW 240
17279: GO 17264
17281: POP
17282: POP
// end ;
17283: PPOPN 2
17285: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17286: LD_EXP 25
17290: PUSH
17291: LD_EXP 61
17295: AND
17296: IFFALSE 17362
17298: GO 17300
17300: DISABLE
17301: LD_INT 0
17303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17304: LD_ADDR_VAR 0 1
17308: PUSH
17309: LD_INT 22
17311: PUSH
17312: LD_OWVAR 2
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 30
17323: PUSH
17324: LD_INT 29
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PPUSH
17335: CALL_OW 69
17339: ST_TO_ADDR
// if not tmp then
17340: LD_VAR 0 1
17344: NOT
17345: IFFALSE 17349
// exit ;
17347: GO 17362
// DestroyUnit ( tmp [ 1 ] ) ;
17349: LD_VAR 0 1
17353: PUSH
17354: LD_INT 1
17356: ARRAY
17357: PPUSH
17358: CALL_OW 65
// end ;
17362: PPOPN 1
17364: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17365: LD_EXP 25
17369: PUSH
17370: LD_EXP 63
17374: AND
17375: IFFALSE 17504
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin uc_side := 0 ;
17383: LD_ADDR_OWVAR 20
17387: PUSH
17388: LD_INT 0
17390: ST_TO_ADDR
// uc_nation := nation_arabian ;
17391: LD_ADDR_OWVAR 21
17395: PUSH
17396: LD_INT 2
17398: ST_TO_ADDR
// hc_gallery :=  ;
17399: LD_ADDR_OWVAR 33
17403: PUSH
17404: LD_STRING 
17406: ST_TO_ADDR
// hc_name :=  ;
17407: LD_ADDR_OWVAR 26
17411: PUSH
17412: LD_STRING 
17414: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17415: LD_INT 1
17417: PPUSH
17418: LD_INT 11
17420: PPUSH
17421: LD_INT 10
17423: PPUSH
17424: CALL_OW 380
// un := CreateHuman ;
17428: LD_ADDR_VAR 0 1
17432: PUSH
17433: CALL_OW 44
17437: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17438: LD_VAR 0 1
17442: PPUSH
17443: LD_INT 1
17445: PPUSH
17446: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17450: LD_INT 35
17452: PPUSH
17453: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17457: LD_VAR 0 1
17461: PPUSH
17462: LD_INT 22
17464: PUSH
17465: LD_OWVAR 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PPUSH
17474: CALL_OW 69
17478: PPUSH
17479: LD_VAR 0 1
17483: PPUSH
17484: CALL_OW 74
17488: PPUSH
17489: CALL_OW 115
// until IsDead ( un ) ;
17493: LD_VAR 0 1
17497: PPUSH
17498: CALL_OW 301
17502: IFFALSE 17450
// end ;
17504: PPOPN 1
17506: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17507: LD_EXP 25
17511: PUSH
17512: LD_EXP 65
17516: AND
17517: IFFALSE 17529
17519: GO 17521
17521: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17522: LD_STRING earthquake(getX(game), 0, 32)
17524: PPUSH
17525: CALL_OW 559
17529: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17530: LD_EXP 25
17534: PUSH
17535: LD_EXP 66
17539: AND
17540: IFFALSE 17631
17542: GO 17544
17544: DISABLE
17545: LD_INT 0
17547: PPUSH
// begin enable ;
17548: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17549: LD_ADDR_VAR 0 1
17553: PUSH
17554: LD_INT 22
17556: PUSH
17557: LD_OWVAR 2
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PUSH
17566: LD_INT 21
17568: PUSH
17569: LD_INT 2
17571: PUSH
17572: EMPTY
17573: LIST
17574: LIST
17575: PUSH
17576: LD_INT 33
17578: PUSH
17579: LD_INT 3
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: PPUSH
17591: CALL_OW 69
17595: ST_TO_ADDR
// if not tmp then
17596: LD_VAR 0 1
17600: NOT
17601: IFFALSE 17605
// exit ;
17603: GO 17631
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17605: LD_VAR 0 1
17609: PUSH
17610: LD_INT 1
17612: PPUSH
17613: LD_VAR 0 1
17617: PPUSH
17618: CALL_OW 12
17622: ARRAY
17623: PPUSH
17624: LD_INT 1
17626: PPUSH
17627: CALL_OW 234
// end ;
17631: PPOPN 1
17633: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17634: LD_EXP 25
17638: PUSH
17639: LD_EXP 67
17643: AND
17644: IFFALSE 17785
17646: GO 17648
17648: DISABLE
17649: LD_INT 0
17651: PPUSH
17652: PPUSH
17653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17654: LD_ADDR_VAR 0 3
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_OWVAR 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 25
17673: PUSH
17674: LD_INT 1
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: PPUSH
17685: CALL_OW 69
17689: ST_TO_ADDR
// if not tmp then
17690: LD_VAR 0 3
17694: NOT
17695: IFFALSE 17699
// exit ;
17697: GO 17785
// un := tmp [ rand ( 1 , tmp ) ] ;
17699: LD_ADDR_VAR 0 2
17703: PUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_INT 1
17711: PPUSH
17712: LD_VAR 0 3
17716: PPUSH
17717: CALL_OW 12
17721: ARRAY
17722: ST_TO_ADDR
// if Crawls ( un ) then
17723: LD_VAR 0 2
17727: PPUSH
17728: CALL_OW 318
17732: IFFALSE 17743
// ComWalk ( un ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17743: LD_VAR 0 2
17747: PPUSH
17748: LD_INT 9
17750: PPUSH
17751: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17755: LD_INT 28
17757: PPUSH
17758: LD_OWVAR 2
17762: PPUSH
17763: LD_INT 2
17765: PPUSH
17766: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17770: LD_INT 29
17772: PPUSH
17773: LD_OWVAR 2
17777: PPUSH
17778: LD_INT 2
17780: PPUSH
17781: CALL_OW 322
// end ;
17785: PPOPN 3
17787: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17788: LD_EXP 25
17792: PUSH
17793: LD_EXP 68
17797: AND
17798: IFFALSE 17909
17800: GO 17802
17802: DISABLE
17803: LD_INT 0
17805: PPUSH
17806: PPUSH
17807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17808: LD_ADDR_VAR 0 3
17812: PUSH
17813: LD_INT 22
17815: PUSH
17816: LD_OWVAR 2
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 1
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: ST_TO_ADDR
// if not tmp then
17844: LD_VAR 0 3
17848: NOT
17849: IFFALSE 17853
// exit ;
17851: GO 17909
// un := tmp [ rand ( 1 , tmp ) ] ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_VAR 0 3
17862: PUSH
17863: LD_INT 1
17865: PPUSH
17866: LD_VAR 0 3
17870: PPUSH
17871: CALL_OW 12
17875: ARRAY
17876: ST_TO_ADDR
// if Crawls ( un ) then
17877: LD_VAR 0 2
17881: PPUSH
17882: CALL_OW 318
17886: IFFALSE 17897
// ComWalk ( un ) ;
17888: LD_VAR 0 2
17892: PPUSH
17893: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17897: LD_VAR 0 2
17901: PPUSH
17902: LD_INT 8
17904: PPUSH
17905: CALL_OW 336
// end ;
17909: PPOPN 3
17911: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17912: LD_EXP 25
17916: PUSH
17917: LD_EXP 69
17921: AND
17922: IFFALSE 18066
17924: GO 17926
17926: DISABLE
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17931: LD_ADDR_VAR 0 2
17935: PUSH
17936: LD_INT 22
17938: PUSH
17939: LD_OWVAR 2
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 21
17950: PUSH
17951: LD_INT 2
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 2
17960: PUSH
17961: LD_INT 34
17963: PUSH
17964: LD_INT 12
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 34
17973: PUSH
17974: LD_INT 51
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 34
17983: PUSH
17984: LD_INT 32
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: ST_TO_ADDR
// if not tmp then
18007: LD_VAR 0 2
18011: NOT
18012: IFFALSE 18016
// exit ;
18014: GO 18066
// for i in tmp do
18016: LD_ADDR_VAR 0 1
18020: PUSH
18021: LD_VAR 0 2
18025: PUSH
18026: FOR_IN
18027: IFFALSE 18064
// if GetCargo ( i , mat_artifact ) = 0 then
18029: LD_VAR 0 1
18033: PPUSH
18034: LD_INT 4
18036: PPUSH
18037: CALL_OW 289
18041: PUSH
18042: LD_INT 0
18044: EQUAL
18045: IFFALSE 18062
// SetCargo ( i , mat_siberit , 100 ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 3
18054: PPUSH
18055: LD_INT 100
18057: PPUSH
18058: CALL_OW 290
18062: GO 18026
18064: POP
18065: POP
// end ;
18066: PPOPN 2
18068: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18069: LD_EXP 25
18073: PUSH
18074: LD_EXP 70
18078: AND
18079: IFFALSE 18262
18081: GO 18083
18083: DISABLE
18084: LD_INT 0
18086: PPUSH
18087: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18088: LD_ADDR_VAR 0 2
18092: PUSH
18093: LD_INT 22
18095: PUSH
18096: LD_OWVAR 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PPUSH
18105: CALL_OW 69
18109: ST_TO_ADDR
// if not tmp then
18110: LD_VAR 0 2
18114: NOT
18115: IFFALSE 18119
// exit ;
18117: GO 18262
// for i := 1 to 2 do
18119: LD_ADDR_VAR 0 1
18123: PUSH
18124: DOUBLE
18125: LD_INT 1
18127: DEC
18128: ST_TO_ADDR
18129: LD_INT 2
18131: PUSH
18132: FOR_TO
18133: IFFALSE 18260
// begin uc_side := your_side ;
18135: LD_ADDR_OWVAR 20
18139: PUSH
18140: LD_OWVAR 2
18144: ST_TO_ADDR
// uc_nation := nation_american ;
18145: LD_ADDR_OWVAR 21
18149: PUSH
18150: LD_INT 1
18152: ST_TO_ADDR
// vc_chassis := us_morphling ;
18153: LD_ADDR_OWVAR 37
18157: PUSH
18158: LD_INT 5
18160: ST_TO_ADDR
// vc_engine := engine_siberite ;
18161: LD_ADDR_OWVAR 39
18165: PUSH
18166: LD_INT 3
18168: ST_TO_ADDR
// vc_control := control_computer ;
18169: LD_ADDR_OWVAR 38
18173: PUSH
18174: LD_INT 3
18176: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18177: LD_ADDR_OWVAR 40
18181: PUSH
18182: LD_INT 10
18184: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18185: LD_VAR 0 2
18189: PUSH
18190: LD_INT 1
18192: ARRAY
18193: PPUSH
18194: CALL_OW 310
18198: NOT
18199: IFFALSE 18246
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18201: CALL_OW 45
18205: PPUSH
18206: LD_VAR 0 2
18210: PUSH
18211: LD_INT 1
18213: ARRAY
18214: PPUSH
18215: CALL_OW 250
18219: PPUSH
18220: LD_VAR 0 2
18224: PUSH
18225: LD_INT 1
18227: ARRAY
18228: PPUSH
18229: CALL_OW 251
18233: PPUSH
18234: LD_INT 12
18236: PPUSH
18237: LD_INT 1
18239: PPUSH
18240: CALL_OW 50
18244: GO 18258
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18246: CALL_OW 45
18250: PPUSH
18251: LD_INT 1
18253: PPUSH
18254: CALL_OW 51
// end ;
18258: GO 18132
18260: POP
18261: POP
// end ;
18262: PPOPN 2
18264: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18265: LD_EXP 25
18269: PUSH
18270: LD_EXP 71
18274: AND
18275: IFFALSE 18497
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
18284: PPUSH
18285: PPUSH
18286: PPUSH
18287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18288: LD_ADDR_VAR 0 6
18292: PUSH
18293: LD_INT 22
18295: PUSH
18296: LD_OWVAR 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: LD_INT 21
18307: PUSH
18308: LD_INT 1
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: LD_INT 3
18317: PUSH
18318: LD_INT 23
18320: PUSH
18321: LD_INT 0
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: LIST
18336: PPUSH
18337: CALL_OW 69
18341: ST_TO_ADDR
// if not tmp then
18342: LD_VAR 0 6
18346: NOT
18347: IFFALSE 18351
// exit ;
18349: GO 18497
// s1 := rand ( 1 , 4 ) ;
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: LD_INT 1
18358: PPUSH
18359: LD_INT 4
18361: PPUSH
18362: CALL_OW 12
18366: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18367: LD_ADDR_VAR 0 4
18371: PUSH
18372: LD_VAR 0 6
18376: PUSH
18377: LD_INT 1
18379: ARRAY
18380: PPUSH
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 259
18390: ST_TO_ADDR
// if s1 = 1 then
18391: LD_VAR 0 2
18395: PUSH
18396: LD_INT 1
18398: EQUAL
18399: IFFALSE 18419
// s2 := rand ( 2 , 4 ) else
18401: LD_ADDR_VAR 0 3
18405: PUSH
18406: LD_INT 2
18408: PPUSH
18409: LD_INT 4
18411: PPUSH
18412: CALL_OW 12
18416: ST_TO_ADDR
18417: GO 18427
// s2 := 1 ;
18419: LD_ADDR_VAR 0 3
18423: PUSH
18424: LD_INT 1
18426: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18427: LD_ADDR_VAR 0 5
18431: PUSH
18432: LD_VAR 0 6
18436: PUSH
18437: LD_INT 1
18439: ARRAY
18440: PPUSH
18441: LD_VAR 0 3
18445: PPUSH
18446: CALL_OW 259
18450: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18451: LD_VAR 0 6
18455: PUSH
18456: LD_INT 1
18458: ARRAY
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18474: LD_VAR 0 6
18478: PUSH
18479: LD_INT 1
18481: ARRAY
18482: PPUSH
18483: LD_VAR 0 3
18487: PPUSH
18488: LD_VAR 0 4
18492: PPUSH
18493: CALL_OW 237
// end ;
18497: PPOPN 6
18499: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18500: LD_EXP 25
18504: PUSH
18505: LD_EXP 72
18509: AND
18510: IFFALSE 18589
18512: GO 18514
18514: DISABLE
18515: LD_INT 0
18517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18518: LD_ADDR_VAR 0 1
18522: PUSH
18523: LD_INT 22
18525: PUSH
18526: LD_OWVAR 2
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 30
18537: PUSH
18538: LD_INT 3
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: LIST
18548: PPUSH
18549: CALL_OW 69
18553: ST_TO_ADDR
// if not tmp then
18554: LD_VAR 0 1
18558: NOT
18559: IFFALSE 18563
// exit ;
18561: GO 18589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18563: LD_VAR 0 1
18567: PUSH
18568: LD_INT 1
18570: PPUSH
18571: LD_VAR 0 1
18575: PPUSH
18576: CALL_OW 12
18580: ARRAY
18581: PPUSH
18582: LD_INT 1
18584: PPUSH
18585: CALL_OW 234
// end ;
18589: PPOPN 1
18591: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18592: LD_EXP 25
18596: PUSH
18597: LD_EXP 73
18601: AND
18602: IFFALSE 18714
18604: GO 18606
18606: DISABLE
18607: LD_INT 0
18609: PPUSH
18610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18611: LD_ADDR_VAR 0 2
18615: PUSH
18616: LD_INT 22
18618: PUSH
18619: LD_OWVAR 2
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: LD_INT 30
18633: PUSH
18634: LD_INT 27
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: LD_INT 30
18643: PUSH
18644: LD_INT 26
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 30
18653: PUSH
18654: LD_INT 28
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: ST_TO_ADDR
// if not tmp then
18676: LD_VAR 0 2
18680: NOT
18681: IFFALSE 18685
// exit ;
18683: GO 18714
// for i in tmp do
18685: LD_ADDR_VAR 0 1
18689: PUSH
18690: LD_VAR 0 2
18694: PUSH
18695: FOR_IN
18696: IFFALSE 18712
// SetLives ( i , 1 ) ;
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_INT 1
18705: PPUSH
18706: CALL_OW 234
18710: GO 18695
18712: POP
18713: POP
// end ;
18714: PPOPN 2
18716: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18717: LD_EXP 25
18721: PUSH
18722: LD_EXP 74
18726: AND
18727: IFFALSE 19014
18729: GO 18731
18731: DISABLE
18732: LD_INT 0
18734: PPUSH
18735: PPUSH
18736: PPUSH
// begin i := rand ( 1 , 7 ) ;
18737: LD_ADDR_VAR 0 1
18741: PUSH
18742: LD_INT 1
18744: PPUSH
18745: LD_INT 7
18747: PPUSH
18748: CALL_OW 12
18752: ST_TO_ADDR
// case i of 1 :
18753: LD_VAR 0 1
18757: PUSH
18758: LD_INT 1
18760: DOUBLE
18761: EQUAL
18762: IFTRUE 18766
18764: GO 18776
18766: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18767: LD_STRING earthquake(getX(game), 0, 32)
18769: PPUSH
18770: CALL_OW 559
18774: GO 19014
18776: LD_INT 2
18778: DOUBLE
18779: EQUAL
18780: IFTRUE 18784
18782: GO 18798
18784: POP
// begin ToLua ( displayStucuk(); ) ;
18785: LD_STRING displayStucuk();
18787: PPUSH
18788: CALL_OW 559
// ResetFog ;
18792: CALL_OW 335
// end ; 3 :
18796: GO 19014
18798: LD_INT 3
18800: DOUBLE
18801: EQUAL
18802: IFTRUE 18806
18804: GO 18910
18806: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_OWVAR 2
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: LD_INT 25
18826: PUSH
18827: LD_INT 1
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: ST_TO_ADDR
// if not tmp then
18843: LD_VAR 0 2
18847: NOT
18848: IFFALSE 18852
// exit ;
18850: GO 19014
// un := tmp [ rand ( 1 , tmp ) ] ;
18852: LD_ADDR_VAR 0 3
18856: PUSH
18857: LD_VAR 0 2
18861: PUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_VAR 0 2
18869: PPUSH
18870: CALL_OW 12
18874: ARRAY
18875: ST_TO_ADDR
// if Crawls ( un ) then
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 318
18885: IFFALSE 18896
// ComWalk ( un ) ;
18887: LD_VAR 0 3
18891: PPUSH
18892: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18896: LD_VAR 0 3
18900: PPUSH
18901: LD_INT 8
18903: PPUSH
18904: CALL_OW 336
// end ; 4 :
18908: GO 19014
18910: LD_INT 4
18912: DOUBLE
18913: EQUAL
18914: IFTRUE 18918
18916: GO 18992
18918: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18919: LD_ADDR_VAR 0 2
18923: PUSH
18924: LD_INT 22
18926: PUSH
18927: LD_OWVAR 2
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: LD_INT 30
18938: PUSH
18939: LD_INT 29
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PPUSH
18950: CALL_OW 69
18954: ST_TO_ADDR
// if not tmp then
18955: LD_VAR 0 2
18959: NOT
18960: IFFALSE 18964
// exit ;
18962: GO 19014
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18964: LD_VAR 0 2
18968: PUSH
18969: LD_INT 1
18971: ARRAY
18972: PPUSH
18973: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18977: LD_VAR 0 2
18981: PUSH
18982: LD_INT 1
18984: ARRAY
18985: PPUSH
18986: CALL_OW 65
// end ; 5 .. 7 :
18990: GO 19014
18992: LD_INT 5
18994: DOUBLE
18995: GREATEREQUAL
18996: IFFALSE 19004
18998: LD_INT 7
19000: DOUBLE
19001: LESSEQUAL
19002: IFTRUE 19006
19004: GO 19013
19006: POP
// StreamSibBomb ; end ;
19007: CALL 15251 0 0
19011: GO 19014
19013: POP
// end ;
19014: PPOPN 3
19016: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19017: LD_EXP 25
19021: PUSH
19022: LD_EXP 75
19026: AND
19027: IFFALSE 19183
19029: GO 19031
19031: DISABLE
19032: LD_INT 0
19034: PPUSH
19035: PPUSH
19036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19037: LD_ADDR_VAR 0 2
19041: PUSH
19042: LD_INT 81
19044: PUSH
19045: LD_OWVAR 2
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 21
19059: PUSH
19060: LD_INT 1
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 21
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: ST_TO_ADDR
// if not tmp then
19091: LD_VAR 0 2
19095: NOT
19096: IFFALSE 19100
// exit ;
19098: GO 19183
// p := 0 ;
19100: LD_ADDR_VAR 0 3
19104: PUSH
19105: LD_INT 0
19107: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19108: LD_INT 35
19110: PPUSH
19111: CALL_OW 67
// p := p + 1 ;
19115: LD_ADDR_VAR 0 3
19119: PUSH
19120: LD_VAR 0 3
19124: PUSH
19125: LD_INT 1
19127: PLUS
19128: ST_TO_ADDR
// for i in tmp do
19129: LD_ADDR_VAR 0 1
19133: PUSH
19134: LD_VAR 0 2
19138: PUSH
19139: FOR_IN
19140: IFFALSE 19171
// if GetLives ( i ) < 1000 then
19142: LD_VAR 0 1
19146: PPUSH
19147: CALL_OW 256
19151: PUSH
19152: LD_INT 1000
19154: LESS
19155: IFFALSE 19169
// SetLives ( i , 1000 ) ;
19157: LD_VAR 0 1
19161: PPUSH
19162: LD_INT 1000
19164: PPUSH
19165: CALL_OW 234
19169: GO 19139
19171: POP
19172: POP
// until p > 20 ;
19173: LD_VAR 0 3
19177: PUSH
19178: LD_INT 20
19180: GREATER
19181: IFFALSE 19108
// end ;
19183: PPOPN 3
19185: END
// every 0 0$1 trigger StreamModeActive and sTime do
19186: LD_EXP 25
19190: PUSH
19191: LD_EXP 76
19195: AND
19196: IFFALSE 19231
19198: GO 19200
19200: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19201: LD_INT 28
19203: PPUSH
19204: LD_OWVAR 2
19208: PPUSH
19209: LD_INT 2
19211: PPUSH
19212: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19216: LD_INT 30
19218: PPUSH
19219: LD_OWVAR 2
19223: PPUSH
19224: LD_INT 2
19226: PPUSH
19227: CALL_OW 322
// end ;
19231: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19232: LD_EXP 25
19236: PUSH
19237: LD_EXP 77
19241: AND
19242: IFFALSE 19363
19244: GO 19246
19246: DISABLE
19247: LD_INT 0
19249: PPUSH
19250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19251: LD_ADDR_VAR 0 2
19255: PUSH
19256: LD_INT 22
19258: PUSH
19259: LD_OWVAR 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 21
19270: PUSH
19271: LD_INT 1
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 3
19280: PUSH
19281: LD_INT 23
19283: PUSH
19284: LD_INT 0
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: LIST
19299: PPUSH
19300: CALL_OW 69
19304: ST_TO_ADDR
// if not tmp then
19305: LD_VAR 0 2
19309: NOT
19310: IFFALSE 19314
// exit ;
19312: GO 19363
// for i in tmp do
19314: LD_ADDR_VAR 0 1
19318: PUSH
19319: LD_VAR 0 2
19323: PUSH
19324: FOR_IN
19325: IFFALSE 19361
// begin if Crawls ( i ) then
19327: LD_VAR 0 1
19331: PPUSH
19332: CALL_OW 318
19336: IFFALSE 19347
// ComWalk ( i ) ;
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 138
// SetClass ( i , 2 ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_INT 2
19354: PPUSH
19355: CALL_OW 336
// end ;
19359: GO 19324
19361: POP
19362: POP
// end ;
19363: PPOPN 2
19365: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19366: LD_EXP 25
19370: PUSH
19371: LD_EXP 78
19375: AND
19376: IFFALSE 19664
19378: GO 19380
19380: DISABLE
19381: LD_INT 0
19383: PPUSH
19384: PPUSH
19385: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19386: LD_OWVAR 2
19390: PPUSH
19391: LD_INT 9
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19404: LD_INT 9
19406: PPUSH
19407: LD_OWVAR 2
19411: PPUSH
19412: CALL_OW 343
// uc_side := 9 ;
19416: LD_ADDR_OWVAR 20
19420: PUSH
19421: LD_INT 9
19423: ST_TO_ADDR
// uc_nation := 2 ;
19424: LD_ADDR_OWVAR 21
19428: PUSH
19429: LD_INT 2
19431: ST_TO_ADDR
// hc_name := Dark Warrior ;
19432: LD_ADDR_OWVAR 26
19436: PUSH
19437: LD_STRING Dark Warrior
19439: ST_TO_ADDR
// hc_gallery :=  ;
19440: LD_ADDR_OWVAR 33
19444: PUSH
19445: LD_STRING 
19447: ST_TO_ADDR
// hc_noskilllimit := true ;
19448: LD_ADDR_OWVAR 76
19452: PUSH
19453: LD_INT 1
19455: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19456: LD_ADDR_OWVAR 31
19460: PUSH
19461: LD_INT 30
19463: PUSH
19464: LD_INT 30
19466: PUSH
19467: LD_INT 30
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: ST_TO_ADDR
// un := CreateHuman ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: CALL_OW 44
19488: ST_TO_ADDR
// hc_noskilllimit := false ;
19489: LD_ADDR_OWVAR 76
19493: PUSH
19494: LD_INT 0
19496: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19497: LD_VAR 0 3
19501: PPUSH
19502: LD_INT 1
19504: PPUSH
19505: CALL_OW 51
// ToLua ( playRanger() ) ;
19509: LD_STRING playRanger()
19511: PPUSH
19512: CALL_OW 559
// p := 0 ;
19516: LD_ADDR_VAR 0 2
19520: PUSH
19521: LD_INT 0
19523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19524: LD_INT 35
19526: PPUSH
19527: CALL_OW 67
// p := p + 1 ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_VAR 0 2
19540: PUSH
19541: LD_INT 1
19543: PLUS
19544: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19545: LD_VAR 0 3
19549: PPUSH
19550: CALL_OW 256
19554: PUSH
19555: LD_INT 1000
19557: LESS
19558: IFFALSE 19572
// SetLives ( un , 1000 ) ;
19560: LD_VAR 0 3
19564: PPUSH
19565: LD_INT 1000
19567: PPUSH
19568: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19572: LD_VAR 0 3
19576: PPUSH
19577: LD_INT 81
19579: PUSH
19580: LD_OWVAR 2
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: LD_INT 91
19591: PUSH
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 30
19599: PUSH
19600: EMPTY
19601: LIST
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: CALL_OW 69
19613: PPUSH
19614: LD_VAR 0 3
19618: PPUSH
19619: CALL_OW 74
19623: PPUSH
19624: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19628: LD_VAR 0 2
19632: PUSH
19633: LD_INT 80
19635: GREATER
19636: PUSH
19637: LD_VAR 0 3
19641: PPUSH
19642: CALL_OW 301
19646: OR
19647: IFFALSE 19524
// if un then
19649: LD_VAR 0 3
19653: IFFALSE 19664
// RemoveUnit ( un ) ;
19655: LD_VAR 0 3
19659: PPUSH
19660: CALL_OW 64
// end ;
19664: PPOPN 3
19666: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19667: LD_EXP 79
19671: IFFALSE 19787
19673: GO 19675
19675: DISABLE
19676: LD_INT 0
19678: PPUSH
19679: PPUSH
19680: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19681: LD_ADDR_VAR 0 2
19685: PUSH
19686: LD_INT 81
19688: PUSH
19689: LD_OWVAR 2
19693: PUSH
19694: EMPTY
19695: LIST
19696: LIST
19697: PUSH
19698: LD_INT 21
19700: PUSH
19701: LD_INT 1
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PPUSH
19712: CALL_OW 69
19716: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19717: LD_STRING playComputer()
19719: PPUSH
19720: CALL_OW 559
// if not tmp then
19724: LD_VAR 0 2
19728: NOT
19729: IFFALSE 19733
// exit ;
19731: GO 19787
// for i in tmp do
19733: LD_ADDR_VAR 0 1
19737: PUSH
19738: LD_VAR 0 2
19742: PUSH
19743: FOR_IN
19744: IFFALSE 19785
// for j := 1 to 4 do
19746: LD_ADDR_VAR 0 3
19750: PUSH
19751: DOUBLE
19752: LD_INT 1
19754: DEC
19755: ST_TO_ADDR
19756: LD_INT 4
19758: PUSH
19759: FOR_TO
19760: IFFALSE 19781
// SetSkill ( i , j , 10 ) ;
19762: LD_VAR 0 1
19766: PPUSH
19767: LD_VAR 0 3
19771: PPUSH
19772: LD_INT 10
19774: PPUSH
19775: CALL_OW 237
19779: GO 19759
19781: POP
19782: POP
19783: GO 19743
19785: POP
19786: POP
// end ;
19787: PPOPN 3
19789: END
// every 0 0$1 trigger s30 do var i , tmp ;
19790: LD_EXP 80
19794: IFFALSE 19863
19796: GO 19798
19798: DISABLE
19799: LD_INT 0
19801: PPUSH
19802: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_INT 22
19810: PUSH
19811: LD_OWVAR 2
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PPUSH
19820: CALL_OW 69
19824: ST_TO_ADDR
// if not tmp then
19825: LD_VAR 0 2
19829: NOT
19830: IFFALSE 19834
// exit ;
19832: GO 19863
// for i in tmp do
19834: LD_ADDR_VAR 0 1
19838: PUSH
19839: LD_VAR 0 2
19843: PUSH
19844: FOR_IN
19845: IFFALSE 19861
// SetLives ( i , 300 ) ;
19847: LD_VAR 0 1
19851: PPUSH
19852: LD_INT 300
19854: PPUSH
19855: CALL_OW 234
19859: GO 19844
19861: POP
19862: POP
// end ;
19863: PPOPN 2
19865: END
// every 0 0$1 trigger s60 do var i , tmp ;
19866: LD_EXP 81
19870: IFFALSE 19939
19872: GO 19874
19874: DISABLE
19875: LD_INT 0
19877: PPUSH
19878: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19879: LD_ADDR_VAR 0 2
19883: PUSH
19884: LD_INT 22
19886: PUSH
19887: LD_OWVAR 2
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: PPUSH
19896: CALL_OW 69
19900: ST_TO_ADDR
// if not tmp then
19901: LD_VAR 0 2
19905: NOT
19906: IFFALSE 19910
// exit ;
19908: GO 19939
// for i in tmp do
19910: LD_ADDR_VAR 0 1
19914: PUSH
19915: LD_VAR 0 2
19919: PUSH
19920: FOR_IN
19921: IFFALSE 19937
// SetLives ( i , 600 ) ;
19923: LD_VAR 0 1
19927: PPUSH
19928: LD_INT 600
19930: PPUSH
19931: CALL_OW 234
19935: GO 19920
19937: POP
19938: POP
// end ;
19939: PPOPN 2
19941: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19942: LD_INT 0
19944: PPUSH
// case cmd of 301 :
19945: LD_VAR 0 1
19949: PUSH
19950: LD_INT 301
19952: DOUBLE
19953: EQUAL
19954: IFTRUE 19958
19956: GO 19990
19958: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19959: LD_VAR 0 6
19963: PPUSH
19964: LD_VAR 0 7
19968: PPUSH
19969: LD_VAR 0 8
19973: PPUSH
19974: LD_VAR 0 4
19978: PPUSH
19979: LD_VAR 0 5
19983: PPUSH
19984: CALL 21199 0 5
19988: GO 20111
19990: LD_INT 302
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20035
19998: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19999: LD_VAR 0 6
20003: PPUSH
20004: LD_VAR 0 7
20008: PPUSH
20009: LD_VAR 0 8
20013: PPUSH
20014: LD_VAR 0 9
20018: PPUSH
20019: LD_VAR 0 4
20023: PPUSH
20024: LD_VAR 0 5
20028: PPUSH
20029: CALL 21290 0 6
20033: GO 20111
20035: LD_INT 303
20037: DOUBLE
20038: EQUAL
20039: IFTRUE 20043
20041: GO 20080
20043: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20044: LD_VAR 0 6
20048: PPUSH
20049: LD_VAR 0 7
20053: PPUSH
20054: LD_VAR 0 8
20058: PPUSH
20059: LD_VAR 0 9
20063: PPUSH
20064: LD_VAR 0 4
20068: PPUSH
20069: LD_VAR 0 5
20073: PPUSH
20074: CALL 20116 0 6
20078: GO 20111
20080: LD_INT 304
20082: DOUBLE
20083: EQUAL
20084: IFTRUE 20088
20086: GO 20110
20088: POP
// hHackTeleport ( unit , x , y ) ; end ;
20089: LD_VAR 0 2
20093: PPUSH
20094: LD_VAR 0 4
20098: PPUSH
20099: LD_VAR 0 5
20103: PPUSH
20104: CALL 21883 0 3
20108: GO 20111
20110: POP
// end ;
20111: LD_VAR 0 12
20115: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20116: LD_INT 0
20118: PPUSH
20119: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20120: LD_VAR 0 1
20124: PUSH
20125: LD_INT 1
20127: LESS
20128: PUSH
20129: LD_VAR 0 1
20133: PUSH
20134: LD_INT 3
20136: GREATER
20137: OR
20138: PUSH
20139: LD_VAR 0 5
20143: PPUSH
20144: LD_VAR 0 6
20148: PPUSH
20149: CALL_OW 428
20153: OR
20154: IFFALSE 20158
// exit ;
20156: GO 20886
// uc_side := your_side ;
20158: LD_ADDR_OWVAR 20
20162: PUSH
20163: LD_OWVAR 2
20167: ST_TO_ADDR
// uc_nation := nation ;
20168: LD_ADDR_OWVAR 21
20172: PUSH
20173: LD_VAR 0 1
20177: ST_TO_ADDR
// bc_level = 1 ;
20178: LD_ADDR_OWVAR 43
20182: PUSH
20183: LD_INT 1
20185: ST_TO_ADDR
// case btype of 1 :
20186: LD_VAR 0 2
20190: PUSH
20191: LD_INT 1
20193: DOUBLE
20194: EQUAL
20195: IFTRUE 20199
20197: GO 20210
20199: POP
// bc_type := b_depot ; 2 :
20200: LD_ADDR_OWVAR 42
20204: PUSH
20205: LD_INT 0
20207: ST_TO_ADDR
20208: GO 20830
20210: LD_INT 2
20212: DOUBLE
20213: EQUAL
20214: IFTRUE 20218
20216: GO 20229
20218: POP
// bc_type := b_warehouse ; 3 :
20219: LD_ADDR_OWVAR 42
20223: PUSH
20224: LD_INT 1
20226: ST_TO_ADDR
20227: GO 20830
20229: LD_INT 3
20231: DOUBLE
20232: EQUAL
20233: IFTRUE 20237
20235: GO 20248
20237: POP
// bc_type := b_lab ; 4 .. 9 :
20238: LD_ADDR_OWVAR 42
20242: PUSH
20243: LD_INT 6
20245: ST_TO_ADDR
20246: GO 20830
20248: LD_INT 4
20250: DOUBLE
20251: GREATEREQUAL
20252: IFFALSE 20260
20254: LD_INT 9
20256: DOUBLE
20257: LESSEQUAL
20258: IFTRUE 20262
20260: GO 20322
20262: POP
// begin bc_type := b_lab_half ;
20263: LD_ADDR_OWVAR 42
20267: PUSH
20268: LD_INT 7
20270: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20271: LD_ADDR_OWVAR 44
20275: PUSH
20276: LD_INT 10
20278: PUSH
20279: LD_INT 11
20281: PUSH
20282: LD_INT 12
20284: PUSH
20285: LD_INT 15
20287: PUSH
20288: LD_INT 14
20290: PUSH
20291: LD_INT 13
20293: PUSH
20294: EMPTY
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: PUSH
20302: LD_VAR 0 2
20306: PUSH
20307: LD_INT 3
20309: MINUS
20310: ARRAY
20311: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20312: LD_ADDR_OWVAR 45
20316: PUSH
20317: LD_INT 9
20319: ST_TO_ADDR
// end ; 10 .. 13 :
20320: GO 20830
20322: LD_INT 10
20324: DOUBLE
20325: GREATEREQUAL
20326: IFFALSE 20334
20328: LD_INT 13
20330: DOUBLE
20331: LESSEQUAL
20332: IFTRUE 20336
20334: GO 20413
20336: POP
// begin bc_type := b_lab_full ;
20337: LD_ADDR_OWVAR 42
20341: PUSH
20342: LD_INT 8
20344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20345: LD_ADDR_OWVAR 44
20349: PUSH
20350: LD_INT 10
20352: PUSH
20353: LD_INT 12
20355: PUSH
20356: LD_INT 14
20358: PUSH
20359: LD_INT 13
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: LIST
20366: LIST
20367: PUSH
20368: LD_VAR 0 2
20372: PUSH
20373: LD_INT 9
20375: MINUS
20376: ARRAY
20377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20378: LD_ADDR_OWVAR 45
20382: PUSH
20383: LD_INT 11
20385: PUSH
20386: LD_INT 15
20388: PUSH
20389: LD_INT 12
20391: PUSH
20392: LD_INT 15
20394: PUSH
20395: EMPTY
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: PUSH
20401: LD_VAR 0 2
20405: PUSH
20406: LD_INT 9
20408: MINUS
20409: ARRAY
20410: ST_TO_ADDR
// end ; 14 :
20411: GO 20830
20413: LD_INT 14
20415: DOUBLE
20416: EQUAL
20417: IFTRUE 20421
20419: GO 20432
20421: POP
// bc_type := b_workshop ; 15 :
20422: LD_ADDR_OWVAR 42
20426: PUSH
20427: LD_INT 2
20429: ST_TO_ADDR
20430: GO 20830
20432: LD_INT 15
20434: DOUBLE
20435: EQUAL
20436: IFTRUE 20440
20438: GO 20451
20440: POP
// bc_type := b_factory ; 16 :
20441: LD_ADDR_OWVAR 42
20445: PUSH
20446: LD_INT 3
20448: ST_TO_ADDR
20449: GO 20830
20451: LD_INT 16
20453: DOUBLE
20454: EQUAL
20455: IFTRUE 20459
20457: GO 20470
20459: POP
// bc_type := b_ext_gun ; 17 :
20460: LD_ADDR_OWVAR 42
20464: PUSH
20465: LD_INT 17
20467: ST_TO_ADDR
20468: GO 20830
20470: LD_INT 17
20472: DOUBLE
20473: EQUAL
20474: IFTRUE 20478
20476: GO 20506
20478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20479: LD_ADDR_OWVAR 42
20483: PUSH
20484: LD_INT 19
20486: PUSH
20487: LD_INT 23
20489: PUSH
20490: LD_INT 19
20492: PUSH
20493: EMPTY
20494: LIST
20495: LIST
20496: LIST
20497: PUSH
20498: LD_VAR 0 1
20502: ARRAY
20503: ST_TO_ADDR
20504: GO 20830
20506: LD_INT 18
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_ext_radar ; 19 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 20
20522: ST_TO_ADDR
20523: GO 20830
20525: LD_INT 19
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_ext_radio ; 20 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 22
20541: ST_TO_ADDR
20542: GO 20830
20544: LD_INT 20
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_ext_siberium ; 21 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 21
20560: ST_TO_ADDR
20561: GO 20830
20563: LD_INT 21
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_ext_computer ; 22 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 24
20579: ST_TO_ADDR
20580: GO 20830
20582: LD_INT 22
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_ext_track ; 23 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 16
20598: ST_TO_ADDR
20599: GO 20830
20601: LD_INT 23
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_ext_laser ; 24 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 25
20617: ST_TO_ADDR
20618: GO 20830
20620: LD_INT 24
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_control_tower ; 25 :
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 36
20636: ST_TO_ADDR
20637: GO 20830
20639: LD_INT 25
20641: DOUBLE
20642: EQUAL
20643: IFTRUE 20647
20645: GO 20658
20647: POP
// bc_type := b_breastwork ; 26 :
20648: LD_ADDR_OWVAR 42
20652: PUSH
20653: LD_INT 31
20655: ST_TO_ADDR
20656: GO 20830
20658: LD_INT 26
20660: DOUBLE
20661: EQUAL
20662: IFTRUE 20666
20664: GO 20677
20666: POP
// bc_type := b_bunker ; 27 :
20667: LD_ADDR_OWVAR 42
20671: PUSH
20672: LD_INT 32
20674: ST_TO_ADDR
20675: GO 20830
20677: LD_INT 27
20679: DOUBLE
20680: EQUAL
20681: IFTRUE 20685
20683: GO 20696
20685: POP
// bc_type := b_turret ; 28 :
20686: LD_ADDR_OWVAR 42
20690: PUSH
20691: LD_INT 33
20693: ST_TO_ADDR
20694: GO 20830
20696: LD_INT 28
20698: DOUBLE
20699: EQUAL
20700: IFTRUE 20704
20702: GO 20715
20704: POP
// bc_type := b_armoury ; 29 :
20705: LD_ADDR_OWVAR 42
20709: PUSH
20710: LD_INT 4
20712: ST_TO_ADDR
20713: GO 20830
20715: LD_INT 29
20717: DOUBLE
20718: EQUAL
20719: IFTRUE 20723
20721: GO 20734
20723: POP
// bc_type := b_barracks ; 30 :
20724: LD_ADDR_OWVAR 42
20728: PUSH
20729: LD_INT 5
20731: ST_TO_ADDR
20732: GO 20830
20734: LD_INT 30
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20753
20742: POP
// bc_type := b_solar_power ; 31 :
20743: LD_ADDR_OWVAR 42
20747: PUSH
20748: LD_INT 27
20750: ST_TO_ADDR
20751: GO 20830
20753: LD_INT 31
20755: DOUBLE
20756: EQUAL
20757: IFTRUE 20761
20759: GO 20772
20761: POP
// bc_type := b_oil_power ; 32 :
20762: LD_ADDR_OWVAR 42
20766: PUSH
20767: LD_INT 26
20769: ST_TO_ADDR
20770: GO 20830
20772: LD_INT 32
20774: DOUBLE
20775: EQUAL
20776: IFTRUE 20780
20778: GO 20791
20780: POP
// bc_type := b_siberite_power ; 33 :
20781: LD_ADDR_OWVAR 42
20785: PUSH
20786: LD_INT 28
20788: ST_TO_ADDR
20789: GO 20830
20791: LD_INT 33
20793: DOUBLE
20794: EQUAL
20795: IFTRUE 20799
20797: GO 20810
20799: POP
// bc_type := b_oil_mine ; 34 :
20800: LD_ADDR_OWVAR 42
20804: PUSH
20805: LD_INT 29
20807: ST_TO_ADDR
20808: GO 20830
20810: LD_INT 34
20812: DOUBLE
20813: EQUAL
20814: IFTRUE 20818
20816: GO 20829
20818: POP
// bc_type := b_siberite_mine ; end ;
20819: LD_ADDR_OWVAR 42
20823: PUSH
20824: LD_INT 30
20826: ST_TO_ADDR
20827: GO 20830
20829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20830: LD_ADDR_VAR 0 8
20834: PUSH
20835: LD_VAR 0 5
20839: PPUSH
20840: LD_VAR 0 6
20844: PPUSH
20845: LD_VAR 0 3
20849: PPUSH
20850: CALL_OW 47
20854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20855: LD_OWVAR 42
20859: PUSH
20860: LD_INT 32
20862: PUSH
20863: LD_INT 33
20865: PUSH
20866: EMPTY
20867: LIST
20868: LIST
20869: IN
20870: IFFALSE 20886
// PlaceWeaponTurret ( b , weapon ) ;
20872: LD_VAR 0 8
20876: PPUSH
20877: LD_VAR 0 4
20881: PPUSH
20882: CALL_OW 431
// end ;
20886: LD_VAR 0 7
20890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20891: LD_INT 0
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20897: LD_ADDR_VAR 0 4
20901: PUSH
20902: LD_INT 22
20904: PUSH
20905: LD_OWVAR 2
20909: PUSH
20910: EMPTY
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: LD_INT 30
20919: PUSH
20920: LD_INT 0
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 30
20929: PUSH
20930: LD_INT 1
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 4
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 21019
// for i in tmp do
20960: LD_ADDR_VAR 0 2
20964: PUSH
20965: LD_VAR 0 4
20969: PUSH
20970: FOR_IN
20971: IFFALSE 21017
// for j = 1 to 3 do
20973: LD_ADDR_VAR 0 3
20977: PUSH
20978: DOUBLE
20979: LD_INT 1
20981: DEC
20982: ST_TO_ADDR
20983: LD_INT 3
20985: PUSH
20986: FOR_TO
20987: IFFALSE 21013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20989: LD_VAR 0 2
20993: PPUSH
20994: CALL_OW 274
20998: PPUSH
20999: LD_VAR 0 3
21003: PPUSH
21004: LD_INT 99999
21006: PPUSH
21007: CALL_OW 277
21011: GO 20986
21013: POP
21014: POP
21015: GO 20970
21017: POP
21018: POP
// end ;
21019: LD_VAR 0 1
21023: RET
// export function hHackSetLevel10 ; var i , j ; begin
21024: LD_INT 0
21026: PPUSH
21027: PPUSH
21028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21029: LD_ADDR_VAR 0 2
21033: PUSH
21034: LD_INT 21
21036: PUSH
21037: LD_INT 1
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 69
21048: PUSH
21049: FOR_IN
21050: IFFALSE 21102
// if IsSelected ( i ) then
21052: LD_VAR 0 2
21056: PPUSH
21057: CALL_OW 306
21061: IFFALSE 21100
// begin for j := 1 to 4 do
21063: LD_ADDR_VAR 0 3
21067: PUSH
21068: DOUBLE
21069: LD_INT 1
21071: DEC
21072: ST_TO_ADDR
21073: LD_INT 4
21075: PUSH
21076: FOR_TO
21077: IFFALSE 21098
// SetSkill ( i , j , 10 ) ;
21079: LD_VAR 0 2
21083: PPUSH
21084: LD_VAR 0 3
21088: PPUSH
21089: LD_INT 10
21091: PPUSH
21092: CALL_OW 237
21096: GO 21076
21098: POP
21099: POP
// end ;
21100: GO 21049
21102: POP
21103: POP
// end ;
21104: LD_VAR 0 1
21108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21109: LD_INT 0
21111: PPUSH
21112: PPUSH
21113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21114: LD_ADDR_VAR 0 2
21118: PUSH
21119: LD_INT 22
21121: PUSH
21122: LD_OWVAR 2
21126: PUSH
21127: EMPTY
21128: LIST
21129: LIST
21130: PUSH
21131: LD_INT 21
21133: PUSH
21134: LD_INT 1
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: PUSH
21150: FOR_IN
21151: IFFALSE 21192
// begin for j := 1 to 4 do
21153: LD_ADDR_VAR 0 3
21157: PUSH
21158: DOUBLE
21159: LD_INT 1
21161: DEC
21162: ST_TO_ADDR
21163: LD_INT 4
21165: PUSH
21166: FOR_TO
21167: IFFALSE 21188
// SetSkill ( i , j , 10 ) ;
21169: LD_VAR 0 2
21173: PPUSH
21174: LD_VAR 0 3
21178: PPUSH
21179: LD_INT 10
21181: PPUSH
21182: CALL_OW 237
21186: GO 21166
21188: POP
21189: POP
// end ;
21190: GO 21150
21192: POP
21193: POP
// end ;
21194: LD_VAR 0 1
21198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21199: LD_INT 0
21201: PPUSH
// uc_side := your_side ;
21202: LD_ADDR_OWVAR 20
21206: PUSH
21207: LD_OWVAR 2
21211: ST_TO_ADDR
// uc_nation := nation ;
21212: LD_ADDR_OWVAR 21
21216: PUSH
21217: LD_VAR 0 1
21221: ST_TO_ADDR
// InitHc ;
21222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21226: LD_INT 0
21228: PPUSH
21229: LD_VAR 0 2
21233: PPUSH
21234: LD_VAR 0 3
21238: PPUSH
21239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: CALL_OW 428
21257: PUSH
21258: LD_INT 0
21260: EQUAL
21261: IFFALSE 21285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21263: CALL_OW 44
21267: PPUSH
21268: LD_VAR 0 4
21272: PPUSH
21273: LD_VAR 0 5
21277: PPUSH
21278: LD_INT 1
21280: PPUSH
21281: CALL_OW 48
// end ;
21285: LD_VAR 0 6
21289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21290: LD_INT 0
21292: PPUSH
21293: PPUSH
// uc_side := your_side ;
21294: LD_ADDR_OWVAR 20
21298: PUSH
21299: LD_OWVAR 2
21303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21304: LD_VAR 0 1
21308: PUSH
21309: LD_INT 1
21311: PUSH
21312: LD_INT 2
21314: PUSH
21315: LD_INT 3
21317: PUSH
21318: LD_INT 4
21320: PUSH
21321: LD_INT 5
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: LIST
21328: LIST
21329: LIST
21330: IN
21331: IFFALSE 21343
// uc_nation := nation_american else
21333: LD_ADDR_OWVAR 21
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
21341: GO 21386
// if chassis in [ 11 , 12 , 13 , 14 ] then
21343: LD_VAR 0 1
21347: PUSH
21348: LD_INT 11
21350: PUSH
21351: LD_INT 12
21353: PUSH
21354: LD_INT 13
21356: PUSH
21357: LD_INT 14
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: IN
21366: IFFALSE 21378
// uc_nation := nation_arabian else
21368: LD_ADDR_OWVAR 21
21372: PUSH
21373: LD_INT 2
21375: ST_TO_ADDR
21376: GO 21386
// uc_nation := nation_russian ;
21378: LD_ADDR_OWVAR 21
21382: PUSH
21383: LD_INT 3
21385: ST_TO_ADDR
// vc_chassis := chassis ;
21386: LD_ADDR_OWVAR 37
21390: PUSH
21391: LD_VAR 0 1
21395: ST_TO_ADDR
// vc_engine := engine ;
21396: LD_ADDR_OWVAR 39
21400: PUSH
21401: LD_VAR 0 2
21405: ST_TO_ADDR
// vc_control := control ;
21406: LD_ADDR_OWVAR 38
21410: PUSH
21411: LD_VAR 0 3
21415: ST_TO_ADDR
// vc_weapon := weapon ;
21416: LD_ADDR_OWVAR 40
21420: PUSH
21421: LD_VAR 0 4
21425: ST_TO_ADDR
// un := CreateVehicle ;
21426: LD_ADDR_VAR 0 8
21430: PUSH
21431: CALL_OW 45
21435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21436: LD_VAR 0 8
21440: PPUSH
21441: LD_INT 0
21443: PPUSH
21444: LD_INT 5
21446: PPUSH
21447: CALL_OW 12
21451: PPUSH
21452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21456: LD_VAR 0 8
21460: PPUSH
21461: LD_VAR 0 5
21465: PPUSH
21466: LD_VAR 0 6
21470: PPUSH
21471: LD_INT 1
21473: PPUSH
21474: CALL_OW 48
// end ;
21478: LD_VAR 0 7
21482: RET
// export hInvincible ; every 1 do
21483: GO 21485
21485: DISABLE
// hInvincible := [ ] ;
21486: LD_ADDR_EXP 82
21490: PUSH
21491: EMPTY
21492: ST_TO_ADDR
21493: END
// every 10 do var i ;
21494: GO 21496
21496: DISABLE
21497: LD_INT 0
21499: PPUSH
// begin enable ;
21500: ENABLE
// if not hInvincible then
21501: LD_EXP 82
21505: NOT
21506: IFFALSE 21510
// exit ;
21508: GO 21554
// for i in hInvincible do
21510: LD_ADDR_VAR 0 1
21514: PUSH
21515: LD_EXP 82
21519: PUSH
21520: FOR_IN
21521: IFFALSE 21552
// if GetLives ( i ) < 1000 then
21523: LD_VAR 0 1
21527: PPUSH
21528: CALL_OW 256
21532: PUSH
21533: LD_INT 1000
21535: LESS
21536: IFFALSE 21550
// SetLives ( i , 1000 ) ;
21538: LD_VAR 0 1
21542: PPUSH
21543: LD_INT 1000
21545: PPUSH
21546: CALL_OW 234
21550: GO 21520
21552: POP
21553: POP
// end ;
21554: PPOPN 1
21556: END
// export function hHackInvincible ; var i ; begin
21557: LD_INT 0
21559: PPUSH
21560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 2
21568: PUSH
21569: LD_INT 21
21571: PUSH
21572: LD_INT 1
21574: PUSH
21575: EMPTY
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 21
21581: PUSH
21582: LD_INT 2
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: LIST
21593: PPUSH
21594: CALL_OW 69
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21661
// if IsSelected ( i ) then
21602: LD_VAR 0 2
21606: PPUSH
21607: CALL_OW 306
21611: IFFALSE 21659
// begin if i in hInvincible then
21613: LD_VAR 0 2
21617: PUSH
21618: LD_EXP 82
21622: IN
21623: IFFALSE 21643
// hInvincible := hInvincible diff i else
21625: LD_ADDR_EXP 82
21629: PUSH
21630: LD_EXP 82
21634: PUSH
21635: LD_VAR 0 2
21639: DIFF
21640: ST_TO_ADDR
21641: GO 21659
// hInvincible := hInvincible union i ;
21643: LD_ADDR_EXP 82
21647: PUSH
21648: LD_EXP 82
21652: PUSH
21653: LD_VAR 0 2
21657: UNION
21658: ST_TO_ADDR
// end ;
21659: GO 21599
21661: POP
21662: POP
// end ;
21663: LD_VAR 0 1
21667: RET
// export function hHackInvisible ; var i , j ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21673: LD_ADDR_VAR 0 2
21677: PUSH
21678: LD_INT 21
21680: PUSH
21681: LD_INT 1
21683: PUSH
21684: EMPTY
21685: LIST
21686: LIST
21687: PPUSH
21688: CALL_OW 69
21692: PUSH
21693: FOR_IN
21694: IFFALSE 21718
// if IsSelected ( i ) then
21696: LD_VAR 0 2
21700: PPUSH
21701: CALL_OW 306
21705: IFFALSE 21716
// ComForceInvisible ( i ) ;
21707: LD_VAR 0 2
21711: PPUSH
21712: CALL_OW 496
21716: GO 21693
21718: POP
21719: POP
// end ;
21720: LD_VAR 0 1
21724: RET
// export function hHackChangeYourSide ; begin
21725: LD_INT 0
21727: PPUSH
// if your_side = 8 then
21728: LD_OWVAR 2
21732: PUSH
21733: LD_INT 8
21735: EQUAL
21736: IFFALSE 21748
// your_side := 0 else
21738: LD_ADDR_OWVAR 2
21742: PUSH
21743: LD_INT 0
21745: ST_TO_ADDR
21746: GO 21762
// your_side := your_side + 1 ;
21748: LD_ADDR_OWVAR 2
21752: PUSH
21753: LD_OWVAR 2
21757: PUSH
21758: LD_INT 1
21760: PLUS
21761: ST_TO_ADDR
// end ;
21762: LD_VAR 0 1
21766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21767: LD_INT 0
21769: PPUSH
21770: PPUSH
21771: PPUSH
// for i in all_units do
21772: LD_ADDR_VAR 0 2
21776: PUSH
21777: LD_OWVAR 3
21781: PUSH
21782: FOR_IN
21783: IFFALSE 21861
// if IsSelected ( i ) then
21785: LD_VAR 0 2
21789: PPUSH
21790: CALL_OW 306
21794: IFFALSE 21859
// begin j := GetSide ( i ) ;
21796: LD_ADDR_VAR 0 3
21800: PUSH
21801: LD_VAR 0 2
21805: PPUSH
21806: CALL_OW 255
21810: ST_TO_ADDR
// if j = 8 then
21811: LD_VAR 0 3
21815: PUSH
21816: LD_INT 8
21818: EQUAL
21819: IFFALSE 21831
// j := 0 else
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: LD_INT 0
21828: ST_TO_ADDR
21829: GO 21845
// j := j + 1 ;
21831: LD_ADDR_VAR 0 3
21835: PUSH
21836: LD_VAR 0 3
21840: PUSH
21841: LD_INT 1
21843: PLUS
21844: ST_TO_ADDR
// SetSide ( i , j ) ;
21845: LD_VAR 0 2
21849: PPUSH
21850: LD_VAR 0 3
21854: PPUSH
21855: CALL_OW 235
// end ;
21859: GO 21782
21861: POP
21862: POP
// end ;
21863: LD_VAR 0 1
21867: RET
// export function hHackFog ; begin
21868: LD_INT 0
21870: PPUSH
// FogOff ( true ) ;
21871: LD_INT 1
21873: PPUSH
21874: CALL_OW 344
// end ;
21878: LD_VAR 0 1
21882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21883: LD_INT 0
21885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21886: LD_VAR 0 1
21890: PPUSH
21891: LD_VAR 0 2
21895: PPUSH
21896: LD_VAR 0 3
21900: PPUSH
21901: LD_INT 1
21903: PPUSH
21904: LD_INT 1
21906: PPUSH
21907: CALL_OW 483
// CenterOnXY ( x , y ) ;
21911: LD_VAR 0 2
21915: PPUSH
21916: LD_VAR 0 3
21920: PPUSH
21921: CALL_OW 84
// end ;
21925: LD_VAR 0 4
21929: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
21930: LD_INT 0
21932: PPUSH
21933: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
21934: LD_VAR 0 1
21938: NOT
21939: PUSH
21940: LD_VAR 0 2
21944: PPUSH
21945: LD_VAR 0 3
21949: PPUSH
21950: CALL_OW 488
21954: NOT
21955: OR
21956: PUSH
21957: LD_VAR 0 1
21961: PPUSH
21962: CALL_OW 266
21966: PUSH
21967: LD_INT 3
21969: NONEQUAL
21970: PUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 247
21980: PUSH
21981: LD_INT 1
21983: EQUAL
21984: NOT
21985: AND
21986: OR
21987: IFFALSE 21991
// exit ;
21989: GO 22273
// if GetType ( factory ) = unit_human then
21991: LD_VAR 0 1
21995: PPUSH
21996: CALL_OW 247
22000: PUSH
22001: LD_INT 1
22003: EQUAL
22004: IFFALSE 22021
// factory := IsInUnit ( factory ) ;
22006: LD_ADDR_VAR 0 1
22010: PUSH
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 310
22020: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22021: LD_VAR 0 1
22025: PPUSH
22026: CALL_OW 266
22030: PUSH
22031: LD_INT 3
22033: NONEQUAL
22034: IFFALSE 22038
// exit ;
22036: GO 22273
// for i := 1 to Count ( factoryWaypoints ) do
22038: LD_ADDR_VAR 0 5
22042: PUSH
22043: DOUBLE
22044: LD_INT 1
22046: DEC
22047: ST_TO_ADDR
22048: LD_EXP 83
22052: PPUSH
22053: CALL 30919 0 1
22057: PUSH
22058: FOR_TO
22059: IFFALSE 22221
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
22061: LD_VAR 0 2
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: CALL_OW 428
22075: PUSH
22076: LD_EXP 83
22080: PUSH
22081: LD_VAR 0 5
22085: ARRAY
22086: PUSH
22087: LD_INT 2
22089: ARRAY
22090: EQUAL
22091: IFFALSE 22123
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22093: LD_ADDR_EXP 83
22097: PUSH
22098: LD_EXP 83
22102: PPUSH
22103: LD_VAR 0 5
22107: PPUSH
22108: CALL_OW 3
22112: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22113: CALL 22278 0 0
// exit ;
22117: POP
22118: POP
22119: GO 22273
// end else
22121: GO 22219
// if factory = factoryWaypoints [ i ] [ 2 ] then
22123: LD_VAR 0 1
22127: PUSH
22128: LD_EXP 83
22132: PUSH
22133: LD_VAR 0 5
22137: ARRAY
22138: PUSH
22139: LD_INT 2
22141: ARRAY
22142: EQUAL
22143: IFFALSE 22219
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
22145: LD_ADDR_EXP 83
22149: PUSH
22150: LD_EXP 83
22154: PPUSH
22155: LD_VAR 0 5
22159: PPUSH
22160: CALL_OW 3
22164: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22165: LD_ADDR_EXP 83
22169: PUSH
22170: LD_EXP 83
22174: PPUSH
22175: LD_VAR 0 1
22179: PPUSH
22180: CALL_OW 255
22184: PUSH
22185: LD_VAR 0 1
22189: PUSH
22190: LD_VAR 0 2
22194: PUSH
22195: LD_VAR 0 3
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: PPUSH
22206: CALL 66528 0 2
22210: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22211: CALL 22278 0 0
// exit ;
22215: POP
22216: POP
22217: GO 22273
// end ; end ;
22219: GO 22058
22221: POP
22222: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
22223: LD_ADDR_EXP 83
22227: PUSH
22228: LD_EXP 83
22232: PPUSH
22233: LD_VAR 0 1
22237: PPUSH
22238: CALL_OW 255
22242: PUSH
22243: LD_VAR 0 1
22247: PUSH
22248: LD_VAR 0 2
22252: PUSH
22253: LD_VAR 0 3
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL 66528 0 2
22268: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22269: CALL 22278 0 0
// end ;
22273: LD_VAR 0 4
22277: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22278: LD_INT 0
22280: PPUSH
22281: PPUSH
22282: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22283: LD_STRING resetFactoryWaypoint();
22285: PPUSH
22286: CALL_OW 559
// if factoryWaypoints then
22290: LD_EXP 83
22294: IFFALSE 22415
// begin list := factoryWaypoints ;
22296: LD_ADDR_VAR 0 3
22300: PUSH
22301: LD_EXP 83
22305: ST_TO_ADDR
// for i := 1 to list do
22306: LD_ADDR_VAR 0 2
22310: PUSH
22311: DOUBLE
22312: LD_INT 1
22314: DEC
22315: ST_TO_ADDR
22316: LD_VAR 0 3
22320: PUSH
22321: FOR_TO
22322: IFFALSE 22413
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22324: LD_STRING setFactoryWaypointXY(
22326: PUSH
22327: LD_VAR 0 3
22331: PUSH
22332: LD_VAR 0 2
22336: ARRAY
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: STR
22342: PUSH
22343: LD_STRING ,
22345: STR
22346: PUSH
22347: LD_VAR 0 3
22351: PUSH
22352: LD_VAR 0 2
22356: ARRAY
22357: PUSH
22358: LD_INT 2
22360: ARRAY
22361: STR
22362: PUSH
22363: LD_STRING ,
22365: STR
22366: PUSH
22367: LD_VAR 0 3
22371: PUSH
22372: LD_VAR 0 2
22376: ARRAY
22377: PUSH
22378: LD_INT 3
22380: ARRAY
22381: STR
22382: PUSH
22383: LD_STRING ,
22385: STR
22386: PUSH
22387: LD_VAR 0 3
22391: PUSH
22392: LD_VAR 0 2
22396: ARRAY
22397: PUSH
22398: LD_INT 4
22400: ARRAY
22401: STR
22402: PUSH
22403: LD_STRING )
22405: STR
22406: PPUSH
22407: CALL_OW 559
22411: GO 22321
22413: POP
22414: POP
// end ; end ;
22415: LD_VAR 0 1
22419: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22420: LD_INT 0
22422: PPUSH
// if HexInfo ( x , y ) = warehouse then
22423: LD_VAR 0 2
22427: PPUSH
22428: LD_VAR 0 3
22432: PPUSH
22433: CALL_OW 428
22437: PUSH
22438: LD_VAR 0 1
22442: EQUAL
22443: IFFALSE 22470
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22445: LD_ADDR_EXP 85
22449: PUSH
22450: LD_EXP 85
22454: PPUSH
22455: LD_VAR 0 1
22459: PPUSH
22460: LD_INT 0
22462: PPUSH
22463: CALL_OW 1
22467: ST_TO_ADDR
22468: GO 22521
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22470: LD_ADDR_EXP 85
22474: PUSH
22475: LD_EXP 85
22479: PPUSH
22480: LD_VAR 0 1
22484: PPUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 255
22494: PUSH
22495: LD_VAR 0 1
22499: PUSH
22500: LD_VAR 0 2
22504: PUSH
22505: LD_VAR 0 3
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: PPUSH
22516: CALL_OW 1
22520: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22521: CALL 22530 0 0
// end ;
22525: LD_VAR 0 4
22529: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22530: LD_INT 0
22532: PPUSH
22533: PPUSH
22534: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22535: LD_STRING resetWarehouseGatheringPoints();
22537: PPUSH
22538: CALL_OW 559
// if warehouseGatheringPoints then
22542: LD_EXP 85
22546: IFFALSE 22672
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22548: LD_ADDR_VAR 0 3
22552: PUSH
22553: LD_EXP 85
22557: PPUSH
22558: CALL 70296 0 1
22562: ST_TO_ADDR
// for i := 1 to list do
22563: LD_ADDR_VAR 0 2
22567: PUSH
22568: DOUBLE
22569: LD_INT 1
22571: DEC
22572: ST_TO_ADDR
22573: LD_VAR 0 3
22577: PUSH
22578: FOR_TO
22579: IFFALSE 22670
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22581: LD_STRING setWarehouseGatheringPointXY(
22583: PUSH
22584: LD_VAR 0 3
22588: PUSH
22589: LD_VAR 0 2
22593: ARRAY
22594: PUSH
22595: LD_INT 1
22597: ARRAY
22598: STR
22599: PUSH
22600: LD_STRING ,
22602: STR
22603: PUSH
22604: LD_VAR 0 3
22608: PUSH
22609: LD_VAR 0 2
22613: ARRAY
22614: PUSH
22615: LD_INT 2
22617: ARRAY
22618: STR
22619: PUSH
22620: LD_STRING ,
22622: STR
22623: PUSH
22624: LD_VAR 0 3
22628: PUSH
22629: LD_VAR 0 2
22633: ARRAY
22634: PUSH
22635: LD_INT 3
22637: ARRAY
22638: STR
22639: PUSH
22640: LD_STRING ,
22642: STR
22643: PUSH
22644: LD_VAR 0 3
22648: PUSH
22649: LD_VAR 0 2
22653: ARRAY
22654: PUSH
22655: LD_INT 4
22657: ARRAY
22658: STR
22659: PUSH
22660: LD_STRING )
22662: STR
22663: PPUSH
22664: CALL_OW 559
22668: GO 22578
22670: POP
22671: POP
// end ; end ;
22672: LD_VAR 0 1
22676: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22677: LD_EXP 85
22681: IFFALSE 23366
22683: GO 22685
22685: DISABLE
22686: LD_INT 0
22688: PPUSH
22689: PPUSH
22690: PPUSH
22691: PPUSH
22692: PPUSH
22693: PPUSH
22694: PPUSH
22695: PPUSH
22696: PPUSH
// begin enable ;
22697: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_EXP 85
22707: PPUSH
22708: CALL 70296 0 1
22712: ST_TO_ADDR
// if not list then
22713: LD_VAR 0 3
22717: NOT
22718: IFFALSE 22722
// exit ;
22720: GO 23366
// for i := 1 to list do
22722: LD_ADDR_VAR 0 1
22726: PUSH
22727: DOUBLE
22728: LD_INT 1
22730: DEC
22731: ST_TO_ADDR
22732: LD_VAR 0 3
22736: PUSH
22737: FOR_TO
22738: IFFALSE 23364
// begin depot := list [ i ] [ 2 ] ;
22740: LD_ADDR_VAR 0 8
22744: PUSH
22745: LD_VAR 0 3
22749: PUSH
22750: LD_VAR 0 1
22754: ARRAY
22755: PUSH
22756: LD_INT 2
22758: ARRAY
22759: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22760: LD_ADDR_VAR 0 5
22764: PUSH
22765: LD_VAR 0 3
22769: PUSH
22770: LD_VAR 0 1
22774: ARRAY
22775: PUSH
22776: LD_INT 1
22778: ARRAY
22779: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22780: LD_VAR 0 8
22784: PPUSH
22785: CALL_OW 301
22789: PUSH
22790: LD_VAR 0 5
22794: PUSH
22795: LD_VAR 0 8
22799: PPUSH
22800: CALL_OW 255
22804: NONEQUAL
22805: OR
22806: IFFALSE 22835
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22808: LD_ADDR_EXP 85
22812: PUSH
22813: LD_EXP 85
22817: PPUSH
22818: LD_VAR 0 8
22822: PPUSH
22823: LD_INT 0
22825: PPUSH
22826: CALL_OW 1
22830: ST_TO_ADDR
// exit ;
22831: POP
22832: POP
22833: GO 23366
// end ; x := list [ i ] [ 3 ] ;
22835: LD_ADDR_VAR 0 6
22839: PUSH
22840: LD_VAR 0 3
22844: PUSH
22845: LD_VAR 0 1
22849: ARRAY
22850: PUSH
22851: LD_INT 3
22853: ARRAY
22854: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22855: LD_ADDR_VAR 0 7
22859: PUSH
22860: LD_VAR 0 3
22864: PUSH
22865: LD_VAR 0 1
22869: ARRAY
22870: PUSH
22871: LD_INT 4
22873: ARRAY
22874: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22875: LD_ADDR_VAR 0 9
22879: PUSH
22880: LD_VAR 0 6
22884: PPUSH
22885: LD_VAR 0 7
22889: PPUSH
22890: LD_INT 16
22892: PPUSH
22893: CALL 68880 0 3
22897: ST_TO_ADDR
// if not cratesNearbyPoint then
22898: LD_VAR 0 9
22902: NOT
22903: IFFALSE 22909
// exit ;
22905: POP
22906: POP
22907: GO 23366
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22909: LD_ADDR_VAR 0 4
22913: PUSH
22914: LD_INT 22
22916: PUSH
22917: LD_VAR 0 5
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: LD_INT 60
22931: PUSH
22932: EMPTY
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 91
22941: PUSH
22942: LD_VAR 0 8
22946: PUSH
22947: LD_INT 6
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: LD_INT 2
22957: PUSH
22958: LD_INT 25
22960: PUSH
22961: LD_INT 2
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 25
22970: PUSH
22971: LD_INT 16
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: PPUSH
22989: CALL_OW 69
22993: PUSH
22994: LD_VAR 0 8
22998: PPUSH
22999: CALL_OW 313
23003: PPUSH
23004: LD_INT 3
23006: PUSH
23007: LD_INT 60
23009: PUSH
23010: EMPTY
23011: LIST
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 2
23019: PUSH
23020: LD_INT 25
23022: PUSH
23023: LD_INT 2
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: PUSH
23030: LD_INT 25
23032: PUSH
23033: LD_INT 16
23035: PUSH
23036: EMPTY
23037: LIST
23038: LIST
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PPUSH
23049: CALL_OW 72
23053: UNION
23054: ST_TO_ADDR
// if tmp then
23055: LD_VAR 0 4
23059: IFFALSE 23139
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23061: LD_ADDR_VAR 0 4
23065: PUSH
23066: LD_VAR 0 4
23070: PPUSH
23071: LD_INT 3
23073: PPUSH
23074: CALL 66843 0 2
23078: ST_TO_ADDR
// for j in tmp do
23079: LD_ADDR_VAR 0 2
23083: PUSH
23084: LD_VAR 0 4
23088: PUSH
23089: FOR_IN
23090: IFFALSE 23133
// begin if IsInUnit ( j ) then
23092: LD_VAR 0 2
23096: PPUSH
23097: CALL_OW 310
23101: IFFALSE 23112
// ComExit ( j ) ;
23103: LD_VAR 0 2
23107: PPUSH
23108: CALL 66926 0 1
// AddComCollect ( j , x , y ) ;
23112: LD_VAR 0 2
23116: PPUSH
23117: LD_VAR 0 6
23121: PPUSH
23122: LD_VAR 0 7
23126: PPUSH
23127: CALL_OW 177
// end ;
23131: GO 23089
23133: POP
23134: POP
// exit ;
23135: POP
23136: POP
23137: GO 23366
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23139: LD_ADDR_VAR 0 4
23143: PUSH
23144: LD_INT 22
23146: PUSH
23147: LD_VAR 0 5
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 91
23158: PUSH
23159: LD_VAR 0 8
23163: PUSH
23164: LD_INT 8
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: PUSH
23172: LD_INT 2
23174: PUSH
23175: LD_INT 34
23177: PUSH
23178: LD_INT 12
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 34
23187: PUSH
23188: LD_INT 51
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: LD_INT 34
23197: PUSH
23198: LD_INT 32
23200: PUSH
23201: EMPTY
23202: LIST
23203: LIST
23204: PUSH
23205: LD_INT 34
23207: PUSH
23208: LD_INT 89
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: PPUSH
23227: CALL_OW 69
23231: ST_TO_ADDR
// if tmp then
23232: LD_VAR 0 4
23236: IFFALSE 23362
// begin for j in tmp do
23238: LD_ADDR_VAR 0 2
23242: PUSH
23243: LD_VAR 0 4
23247: PUSH
23248: FOR_IN
23249: IFFALSE 23360
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23251: LD_VAR 0 2
23255: PPUSH
23256: CALL_OW 262
23260: PUSH
23261: LD_INT 3
23263: EQUAL
23264: PUSH
23265: LD_VAR 0 2
23269: PPUSH
23270: CALL_OW 261
23274: PUSH
23275: LD_INT 20
23277: GREATER
23278: OR
23279: PUSH
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 314
23289: NOT
23290: AND
23291: PUSH
23292: LD_VAR 0 2
23296: PPUSH
23297: CALL_OW 263
23301: PUSH
23302: LD_INT 1
23304: NONEQUAL
23305: PUSH
23306: LD_VAR 0 2
23310: PPUSH
23311: CALL_OW 311
23315: OR
23316: AND
23317: IFFALSE 23358
// begin ComCollect ( j , x , y ) ;
23319: LD_VAR 0 2
23323: PPUSH
23324: LD_VAR 0 6
23328: PPUSH
23329: LD_VAR 0 7
23333: PPUSH
23334: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23338: LD_VAR 0 2
23342: PPUSH
23343: LD_VAR 0 8
23347: PPUSH
23348: CALL_OW 172
// exit ;
23352: POP
23353: POP
23354: POP
23355: POP
23356: GO 23366
// end ;
23358: GO 23248
23360: POP
23361: POP
// end ; end ;
23362: GO 22737
23364: POP
23365: POP
// end ; end_of_file
23366: PPOPN 9
23368: END
// export function SOS_UnitDestroyed ( un ) ; begin
23369: LD_INT 0
23371: PPUSH
// ComRadiation ( un ) ;
23372: LD_VAR 0 1
23376: PPUSH
23377: CALL 24438 0 1
// end ;
23381: LD_VAR 0 2
23385: RET
// export function SOS_UnitKamikazed ( un ) ; begin
23386: LD_INT 0
23388: PPUSH
// ComRadiation ( un ) ;
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL 24438 0 1
// end ;
23398: LD_VAR 0 2
23402: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
23403: LD_INT 0
23405: PPUSH
// end ;
23406: LD_VAR 0 4
23410: RET
// export function SOS_Command ( cmd ) ; begin
23411: LD_INT 0
23413: PPUSH
// end ;
23414: LD_VAR 0 2
23418: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
23419: LD_INT 0
23421: PPUSH
// end ;
23422: LD_VAR 0 6
23426: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
23427: LD_INT 0
23429: PPUSH
23430: PPUSH
23431: PPUSH
23432: PPUSH
// if not vehicle or not factory then
23433: LD_VAR 0 1
23437: NOT
23438: PUSH
23439: LD_VAR 0 2
23443: NOT
23444: OR
23445: IFFALSE 23449
// exit ;
23447: GO 24029
// if not factoryWaypoints then
23449: LD_EXP 83
23453: NOT
23454: IFFALSE 23458
// exit ;
23456: GO 24029
// for i := 1 to Count ( factoryWaypoints ) do
23458: LD_ADDR_VAR 0 4
23462: PUSH
23463: DOUBLE
23464: LD_INT 1
23466: DEC
23467: ST_TO_ADDR
23468: LD_EXP 83
23472: PPUSH
23473: CALL 30919 0 1
23477: PUSH
23478: FOR_TO
23479: IFFALSE 24027
// if factoryWaypoints [ i ] [ 2 ] = factory then
23481: LD_EXP 83
23485: PUSH
23486: LD_VAR 0 4
23490: ARRAY
23491: PUSH
23492: LD_INT 2
23494: ARRAY
23495: PUSH
23496: LD_VAR 0 2
23500: EQUAL
23501: IFFALSE 24025
// begin if GetControl ( vehicle ) = control_manual then
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 263
23512: PUSH
23513: LD_INT 1
23515: EQUAL
23516: IFFALSE 23878
// begin driver := IsDrivenBy ( vehicle ) ;
23518: LD_ADDR_VAR 0 5
23522: PUSH
23523: LD_VAR 0 1
23527: PPUSH
23528: CALL_OW 311
23532: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
23533: LD_VAR 0 5
23537: PUSH
23538: LD_EXP 84
23542: IN
23543: PUSH
23544: LD_VAR 0 1
23548: PUSH
23549: LD_EXP 84
23553: IN
23554: OR
23555: IFFALSE 23561
// exit ;
23557: POP
23558: POP
23559: GO 24029
// if not HasTask ( driver ) then
23561: LD_VAR 0 5
23565: PPUSH
23566: CALL_OW 314
23570: NOT
23571: IFFALSE 23876
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
23573: LD_ADDR_EXP 84
23577: PUSH
23578: LD_EXP 84
23582: PPUSH
23583: LD_VAR 0 5
23587: PPUSH
23588: CALL 66528 0 2
23592: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
23593: LD_ADDR_EXP 84
23597: PUSH
23598: LD_EXP 84
23602: PPUSH
23603: LD_VAR 0 1
23607: PPUSH
23608: CALL 66528 0 2
23612: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23613: LD_ADDR_VAR 0 6
23617: PUSH
23618: LD_EXP 83
23622: PUSH
23623: LD_VAR 0 4
23627: ARRAY
23628: PUSH
23629: LD_INT 3
23631: ARRAY
23632: PPUSH
23633: LD_EXP 83
23637: PUSH
23638: LD_VAR 0 4
23642: ARRAY
23643: PUSH
23644: LD_INT 4
23646: ARRAY
23647: PPUSH
23648: CALL_OW 428
23652: ST_TO_ADDR
// if hex then
23653: LD_VAR 0 6
23657: IFFALSE 23675
// ComMoveUnit ( driver , hex ) else
23659: LD_VAR 0 5
23663: PPUSH
23664: LD_VAR 0 6
23668: PPUSH
23669: CALL_OW 112
23673: GO 23759
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
23675: LD_VAR 0 1
23679: PPUSH
23680: LD_EXP 83
23684: PUSH
23685: LD_VAR 0 4
23689: ARRAY
23690: PUSH
23691: LD_INT 3
23693: ARRAY
23694: PPUSH
23695: LD_EXP 83
23699: PUSH
23700: LD_VAR 0 4
23704: ARRAY
23705: PUSH
23706: LD_INT 4
23708: ARRAY
23709: PPUSH
23710: CALL_OW 297
23714: PUSH
23715: LD_INT 0
23717: GREATER
23718: IFFALSE 23759
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23720: LD_VAR 0 5
23724: PPUSH
23725: LD_EXP 83
23729: PUSH
23730: LD_VAR 0 4
23734: ARRAY
23735: PUSH
23736: LD_INT 3
23738: ARRAY
23739: PPUSH
23740: LD_EXP 83
23744: PUSH
23745: LD_VAR 0 4
23749: ARRAY
23750: PUSH
23751: LD_INT 4
23753: ARRAY
23754: PPUSH
23755: CALL_OW 111
// AddComExitVehicle ( driver ) ;
23759: LD_VAR 0 5
23763: PPUSH
23764: CALL_OW 181
// if Multiplayer then
23768: LD_OWVAR 4
23772: IFFALSE 23821
// begin repeat wait ( 10 ) ;
23774: LD_INT 10
23776: PPUSH
23777: CALL_OW 67
// until not IsInUnit ( driver ) ;
23781: LD_VAR 0 5
23785: PPUSH
23786: CALL_OW 310
23790: NOT
23791: IFFALSE 23774
// if not HasTask ( driver ) then
23793: LD_VAR 0 5
23797: PPUSH
23798: CALL_OW 314
23802: NOT
23803: IFFALSE 23819
// ComEnterUnit ( driver , factory ) ;
23805: LD_VAR 0 5
23809: PPUSH
23810: LD_VAR 0 2
23814: PPUSH
23815: CALL_OW 120
// end else
23819: GO 23835
// AddComEnterUnit ( driver , factory ) ;
23821: LD_VAR 0 5
23825: PPUSH
23826: LD_VAR 0 2
23830: PPUSH
23831: CALL_OW 180
// wait ( 0 0$1 ) ;
23835: LD_INT 35
23837: PPUSH
23838: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
23842: LD_ADDR_EXP 84
23846: PUSH
23847: LD_EXP 84
23851: PUSH
23852: LD_VAR 0 5
23856: DIFF
23857: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
23858: LD_ADDR_EXP 84
23862: PUSH
23863: LD_EXP 84
23867: PUSH
23868: LD_VAR 0 1
23872: DIFF
23873: ST_TO_ADDR
// break ;
23874: GO 24027
// end ; end else
23876: GO 24025
// if GetControl ( vehicle ) = control_remote then
23878: LD_VAR 0 1
23882: PPUSH
23883: CALL_OW 263
23887: PUSH
23888: LD_INT 2
23890: EQUAL
23891: IFFALSE 23977
// begin wait ( 0 0$2 ) ;
23893: LD_INT 70
23895: PPUSH
23896: CALL_OW 67
// repeat wait ( 10 ) ;
23900: LD_INT 10
23902: PPUSH
23903: CALL_OW 67
// Connect ( vehicle ) ;
23907: LD_VAR 0 1
23911: PPUSH
23912: CALL 37125 0 1
// until IsControledBy ( vehicle ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 312
23925: IFFALSE 23900
// wait ( 10 ) ;
23927: LD_INT 10
23929: PPUSH
23930: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_EXP 83
23943: PUSH
23944: LD_VAR 0 4
23948: ARRAY
23949: PUSH
23950: LD_INT 3
23952: ARRAY
23953: PPUSH
23954: LD_EXP 83
23958: PUSH
23959: LD_VAR 0 4
23963: ARRAY
23964: PUSH
23965: LD_INT 4
23967: ARRAY
23968: PPUSH
23969: CALL_OW 111
// break ;
23973: GO 24027
// end else
23975: GO 24025
// begin wait ( 0 0$3 ) ;
23977: LD_INT 105
23979: PPUSH
23980: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
23984: LD_VAR 0 1
23988: PPUSH
23989: LD_EXP 83
23993: PUSH
23994: LD_VAR 0 4
23998: ARRAY
23999: PUSH
24000: LD_INT 3
24002: ARRAY
24003: PPUSH
24004: LD_EXP 83
24008: PUSH
24009: LD_VAR 0 4
24013: ARRAY
24014: PUSH
24015: LD_INT 4
24017: ARRAY
24018: PPUSH
24019: CALL_OW 111
// break ;
24023: GO 24027
// end ; end ;
24025: GO 23478
24027: POP
24028: POP
// end ;
24029: LD_VAR 0 3
24033: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
24034: LD_INT 0
24036: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
24037: LD_VAR 0 1
24041: PUSH
24042: LD_INT 250
24044: EQUAL
24045: PUSH
24046: LD_VAR 0 2
24050: PPUSH
24051: CALL_OW 264
24055: PUSH
24056: LD_INT 81
24058: EQUAL
24059: AND
24060: IFFALSE 24081
// MinerPlaceMine ( unit , x , y ) ;
24062: LD_VAR 0 2
24066: PPUSH
24067: LD_VAR 0 4
24071: PPUSH
24072: LD_VAR 0 5
24076: PPUSH
24077: CALL 27173 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
24081: LD_VAR 0 1
24085: PUSH
24086: LD_INT 251
24088: EQUAL
24089: PUSH
24090: LD_VAR 0 2
24094: PPUSH
24095: CALL_OW 264
24099: PUSH
24100: LD_INT 81
24102: EQUAL
24103: AND
24104: IFFALSE 24125
// MinerDetonateMine ( unit , x , y ) ;
24106: LD_VAR 0 2
24110: PPUSH
24111: LD_VAR 0 4
24115: PPUSH
24116: LD_VAR 0 5
24120: PPUSH
24121: CALL 27448 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
24125: LD_VAR 0 1
24129: PUSH
24130: LD_INT 252
24132: EQUAL
24133: PUSH
24134: LD_VAR 0 2
24138: PPUSH
24139: CALL_OW 264
24143: PUSH
24144: LD_INT 81
24146: EQUAL
24147: AND
24148: IFFALSE 24169
// MinerCreateMinefield ( unit , x , y ) ;
24150: LD_VAR 0 2
24154: PPUSH
24155: LD_VAR 0 4
24159: PPUSH
24160: LD_VAR 0 5
24164: PPUSH
24165: CALL 27865 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
24169: LD_VAR 0 1
24173: PUSH
24174: LD_INT 253
24176: EQUAL
24177: PUSH
24178: LD_VAR 0 2
24182: PPUSH
24183: CALL_OW 257
24187: PUSH
24188: LD_INT 5
24190: EQUAL
24191: AND
24192: IFFALSE 24213
// ComBinocular ( unit , x , y ) ;
24194: LD_VAR 0 2
24198: PPUSH
24199: LD_VAR 0 4
24203: PPUSH
24204: LD_VAR 0 5
24208: PPUSH
24209: CALL 28234 0 3
// if selectedUnit then
24213: LD_VAR 0 3
24217: IFFALSE 24273
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24219: LD_VAR 0 1
24223: PUSH
24224: LD_INT 254
24226: EQUAL
24227: PUSH
24228: LD_VAR 0 2
24232: PPUSH
24233: CALL_OW 264
24237: PUSH
24238: LD_INT 99
24240: EQUAL
24241: AND
24242: PUSH
24243: LD_VAR 0 3
24247: PPUSH
24248: CALL_OW 263
24252: PUSH
24253: LD_INT 3
24255: EQUAL
24256: AND
24257: IFFALSE 24273
// HackDestroyVehicle ( unit , selectedUnit ) ;
24259: LD_VAR 0 2
24263: PPUSH
24264: LD_VAR 0 3
24268: PPUSH
24269: CALL 26537 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
24273: LD_VAR 0 1
24277: PUSH
24278: LD_INT 255
24280: EQUAL
24281: PUSH
24282: LD_VAR 0 2
24286: PPUSH
24287: CALL_OW 264
24291: PUSH
24292: LD_INT 14
24294: PUSH
24295: LD_INT 53
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: IN
24302: AND
24303: PUSH
24304: LD_VAR 0 4
24308: PPUSH
24309: LD_VAR 0 5
24313: PPUSH
24314: CALL_OW 488
24318: AND
24319: IFFALSE 24343
// CutTreeXYR ( unit , x , y , 12 ) ;
24321: LD_VAR 0 2
24325: PPUSH
24326: LD_VAR 0 4
24330: PPUSH
24331: LD_VAR 0 5
24335: PPUSH
24336: LD_INT 12
24338: PPUSH
24339: CALL 24534 0 4
// if cmd = 256 then
24343: LD_VAR 0 1
24347: PUSH
24348: LD_INT 256
24350: EQUAL
24351: IFFALSE 24372
// SetFactoryWaypoint ( unit , x , y ) ;
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_VAR 0 4
24362: PPUSH
24363: LD_VAR 0 5
24367: PPUSH
24368: CALL 21930 0 3
// if cmd = 257 then
24372: LD_VAR 0 1
24376: PUSH
24377: LD_INT 257
24379: EQUAL
24380: IFFALSE 24401
// SetWarehouseGatheringPoint ( unit , x , y ) ;
24382: LD_VAR 0 2
24386: PPUSH
24387: LD_VAR 0 4
24391: PPUSH
24392: LD_VAR 0 5
24396: PPUSH
24397: CALL 22420 0 3
// if cmd = 258 then
24401: LD_VAR 0 1
24405: PUSH
24406: LD_INT 258
24408: EQUAL
24409: IFFALSE 24433
// BurnTreeXYR ( unit , x , y , 8 ) ;
24411: LD_VAR 0 2
24415: PPUSH
24416: LD_VAR 0 4
24420: PPUSH
24421: LD_VAR 0 5
24425: PPUSH
24426: LD_INT 8
24428: PPUSH
24429: CALL 24928 0 4
// end ;
24433: LD_VAR 0 6
24437: RET
// export function ComRadiation ( un ) ; var eff ; begin
24438: LD_INT 0
24440: PPUSH
24441: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
24442: LD_VAR 0 1
24446: PPUSH
24447: CALL_OW 264
24451: PUSH
24452: LD_INT 91
24454: NONEQUAL
24455: IFFALSE 24459
// exit ;
24457: GO 24529
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24459: LD_INT 68
24461: PPUSH
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL_OW 255
24471: PPUSH
24472: CALL_OW 321
24476: PUSH
24477: LD_INT 2
24479: EQUAL
24480: IFFALSE 24492
// eff := 50 else
24482: LD_ADDR_VAR 0 3
24486: PUSH
24487: LD_INT 50
24489: ST_TO_ADDR
24490: GO 24500
// eff := 25 ;
24492: LD_ADDR_VAR 0 3
24496: PUSH
24497: LD_INT 25
24499: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24500: LD_VAR 0 1
24504: PPUSH
24505: CALL_OW 250
24509: PPUSH
24510: LD_VAR 0 1
24514: PPUSH
24515: CALL_OW 251
24519: PPUSH
24520: LD_VAR 0 3
24524: PPUSH
24525: CALL_OW 495
// end ;
24529: LD_VAR 0 2
24533: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
24534: LD_INT 0
24536: PPUSH
24537: PPUSH
24538: PPUSH
24539: PPUSH
24540: PPUSH
24541: PPUSH
24542: PPUSH
24543: PPUSH
24544: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
24545: LD_VAR 0 1
24549: PPUSH
24550: CALL_OW 302
24554: NOT
24555: PUSH
24556: LD_VAR 0 2
24560: PPUSH
24561: LD_VAR 0 3
24565: PPUSH
24566: CALL_OW 488
24570: NOT
24571: OR
24572: PUSH
24573: LD_VAR 0 4
24577: NOT
24578: OR
24579: IFFALSE 24583
// exit ;
24581: GO 24923
// list := [ ] ;
24583: LD_ADDR_VAR 0 13
24587: PUSH
24588: EMPTY
24589: ST_TO_ADDR
// if x - r < 0 then
24590: LD_VAR 0 2
24594: PUSH
24595: LD_VAR 0 4
24599: MINUS
24600: PUSH
24601: LD_INT 0
24603: LESS
24604: IFFALSE 24616
// min_x := 0 else
24606: LD_ADDR_VAR 0 7
24610: PUSH
24611: LD_INT 0
24613: ST_TO_ADDR
24614: GO 24632
// min_x := x - r ;
24616: LD_ADDR_VAR 0 7
24620: PUSH
24621: LD_VAR 0 2
24625: PUSH
24626: LD_VAR 0 4
24630: MINUS
24631: ST_TO_ADDR
// if y - r < 0 then
24632: LD_VAR 0 3
24636: PUSH
24637: LD_VAR 0 4
24641: MINUS
24642: PUSH
24643: LD_INT 0
24645: LESS
24646: IFFALSE 24658
// min_y := 0 else
24648: LD_ADDR_VAR 0 8
24652: PUSH
24653: LD_INT 0
24655: ST_TO_ADDR
24656: GO 24674
// min_y := y - r ;
24658: LD_ADDR_VAR 0 8
24662: PUSH
24663: LD_VAR 0 3
24667: PUSH
24668: LD_VAR 0 4
24672: MINUS
24673: ST_TO_ADDR
// max_x := x + r ;
24674: LD_ADDR_VAR 0 9
24678: PUSH
24679: LD_VAR 0 2
24683: PUSH
24684: LD_VAR 0 4
24688: PLUS
24689: ST_TO_ADDR
// max_y := y + r ;
24690: LD_ADDR_VAR 0 10
24694: PUSH
24695: LD_VAR 0 3
24699: PUSH
24700: LD_VAR 0 4
24704: PLUS
24705: ST_TO_ADDR
// for _x = min_x to max_x do
24706: LD_ADDR_VAR 0 11
24710: PUSH
24711: DOUBLE
24712: LD_VAR 0 7
24716: DEC
24717: ST_TO_ADDR
24718: LD_VAR 0 9
24722: PUSH
24723: FOR_TO
24724: IFFALSE 24841
// for _y = min_y to max_y do
24726: LD_ADDR_VAR 0 12
24730: PUSH
24731: DOUBLE
24732: LD_VAR 0 8
24736: DEC
24737: ST_TO_ADDR
24738: LD_VAR 0 10
24742: PUSH
24743: FOR_TO
24744: IFFALSE 24837
// begin if not ValidHex ( _x , _y ) then
24746: LD_VAR 0 11
24750: PPUSH
24751: LD_VAR 0 12
24755: PPUSH
24756: CALL_OW 488
24760: NOT
24761: IFFALSE 24765
// continue ;
24763: GO 24743
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
24765: LD_VAR 0 11
24769: PPUSH
24770: LD_VAR 0 12
24774: PPUSH
24775: CALL_OW 351
24779: PUSH
24780: LD_VAR 0 11
24784: PPUSH
24785: LD_VAR 0 12
24789: PPUSH
24790: CALL_OW 554
24794: AND
24795: IFFALSE 24835
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
24797: LD_ADDR_VAR 0 13
24801: PUSH
24802: LD_VAR 0 13
24806: PPUSH
24807: LD_VAR 0 13
24811: PUSH
24812: LD_INT 1
24814: PLUS
24815: PPUSH
24816: LD_VAR 0 11
24820: PUSH
24821: LD_VAR 0 12
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PPUSH
24830: CALL_OW 2
24834: ST_TO_ADDR
// end ;
24835: GO 24743
24837: POP
24838: POP
24839: GO 24723
24841: POP
24842: POP
// if not list then
24843: LD_VAR 0 13
24847: NOT
24848: IFFALSE 24852
// exit ;
24850: GO 24923
// for i in list do
24852: LD_ADDR_VAR 0 6
24856: PUSH
24857: LD_VAR 0 13
24861: PUSH
24862: FOR_IN
24863: IFFALSE 24921
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
24865: LD_VAR 0 1
24869: PPUSH
24870: LD_STRING M
24872: PUSH
24873: LD_VAR 0 6
24877: PUSH
24878: LD_INT 1
24880: ARRAY
24881: PUSH
24882: LD_VAR 0 6
24886: PUSH
24887: LD_INT 2
24889: ARRAY
24890: PUSH
24891: LD_INT 0
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 0
24899: PUSH
24900: LD_INT 0
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: EMPTY
24913: LIST
24914: PPUSH
24915: CALL_OW 447
24919: GO 24862
24921: POP
24922: POP
// end ;
24923: LD_VAR 0 5
24927: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
24928: LD_INT 0
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
24940: LD_VAR 0 1
24944: PPUSH
24945: CALL_OW 302
24949: NOT
24950: PUSH
24951: LD_VAR 0 2
24955: PPUSH
24956: LD_VAR 0 3
24960: PPUSH
24961: CALL_OW 488
24965: NOT
24966: OR
24967: PUSH
24968: LD_VAR 0 4
24972: NOT
24973: OR
24974: IFFALSE 24978
// exit ;
24976: GO 25491
// list := [ ] ;
24978: LD_ADDR_VAR 0 13
24982: PUSH
24983: EMPTY
24984: ST_TO_ADDR
// if x - r < 0 then
24985: LD_VAR 0 2
24989: PUSH
24990: LD_VAR 0 4
24994: MINUS
24995: PUSH
24996: LD_INT 0
24998: LESS
24999: IFFALSE 25011
// min_x := 0 else
25001: LD_ADDR_VAR 0 7
25005: PUSH
25006: LD_INT 0
25008: ST_TO_ADDR
25009: GO 25027
// min_x := x - r ;
25011: LD_ADDR_VAR 0 7
25015: PUSH
25016: LD_VAR 0 2
25020: PUSH
25021: LD_VAR 0 4
25025: MINUS
25026: ST_TO_ADDR
// if y - r < 0 then
25027: LD_VAR 0 3
25031: PUSH
25032: LD_VAR 0 4
25036: MINUS
25037: PUSH
25038: LD_INT 0
25040: LESS
25041: IFFALSE 25053
// min_y := 0 else
25043: LD_ADDR_VAR 0 8
25047: PUSH
25048: LD_INT 0
25050: ST_TO_ADDR
25051: GO 25069
// min_y := y - r ;
25053: LD_ADDR_VAR 0 8
25057: PUSH
25058: LD_VAR 0 3
25062: PUSH
25063: LD_VAR 0 4
25067: MINUS
25068: ST_TO_ADDR
// max_x := x + r ;
25069: LD_ADDR_VAR 0 9
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: LD_VAR 0 4
25083: PLUS
25084: ST_TO_ADDR
// max_y := y + r ;
25085: LD_ADDR_VAR 0 10
25089: PUSH
25090: LD_VAR 0 3
25094: PUSH
25095: LD_VAR 0 4
25099: PLUS
25100: ST_TO_ADDR
// for _x = min_x to max_x do
25101: LD_ADDR_VAR 0 11
25105: PUSH
25106: DOUBLE
25107: LD_VAR 0 7
25111: DEC
25112: ST_TO_ADDR
25113: LD_VAR 0 9
25117: PUSH
25118: FOR_TO
25119: IFFALSE 25236
// for _y = min_y to max_y do
25121: LD_ADDR_VAR 0 12
25125: PUSH
25126: DOUBLE
25127: LD_VAR 0 8
25131: DEC
25132: ST_TO_ADDR
25133: LD_VAR 0 10
25137: PUSH
25138: FOR_TO
25139: IFFALSE 25232
// begin if not ValidHex ( _x , _y ) then
25141: LD_VAR 0 11
25145: PPUSH
25146: LD_VAR 0 12
25150: PPUSH
25151: CALL_OW 488
25155: NOT
25156: IFFALSE 25160
// continue ;
25158: GO 25138
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25160: LD_VAR 0 11
25164: PPUSH
25165: LD_VAR 0 12
25169: PPUSH
25170: CALL_OW 351
25174: PUSH
25175: LD_VAR 0 11
25179: PPUSH
25180: LD_VAR 0 12
25184: PPUSH
25185: CALL_OW 554
25189: AND
25190: IFFALSE 25230
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25192: LD_ADDR_VAR 0 13
25196: PUSH
25197: LD_VAR 0 13
25201: PPUSH
25202: LD_VAR 0 13
25206: PUSH
25207: LD_INT 1
25209: PLUS
25210: PPUSH
25211: LD_VAR 0 11
25215: PUSH
25216: LD_VAR 0 12
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PPUSH
25225: CALL_OW 2
25229: ST_TO_ADDR
// end ;
25230: GO 25138
25232: POP
25233: POP
25234: GO 25118
25236: POP
25237: POP
// if not list then
25238: LD_VAR 0 13
25242: NOT
25243: IFFALSE 25247
// exit ;
25245: GO 25491
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
25247: LD_ADDR_VAR 0 13
25251: PUSH
25252: LD_VAR 0 1
25256: PPUSH
25257: LD_VAR 0 13
25261: PPUSH
25262: LD_INT 1
25264: PPUSH
25265: LD_INT 1
25267: PPUSH
25268: CALL 34267 0 4
25272: ST_TO_ADDR
// ComStop ( flame ) ;
25273: LD_VAR 0 1
25277: PPUSH
25278: CALL_OW 141
// for i in list do
25282: LD_ADDR_VAR 0 6
25286: PUSH
25287: LD_VAR 0 13
25291: PUSH
25292: FOR_IN
25293: IFFALSE 25324
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
25295: LD_VAR 0 1
25299: PPUSH
25300: LD_VAR 0 6
25304: PUSH
25305: LD_INT 1
25307: ARRAY
25308: PPUSH
25309: LD_VAR 0 6
25313: PUSH
25314: LD_INT 2
25316: ARRAY
25317: PPUSH
25318: CALL_OW 176
25322: GO 25292
25324: POP
25325: POP
// repeat wait ( 0 0$1 ) ;
25326: LD_INT 35
25328: PPUSH
25329: CALL_OW 67
// task := GetTaskList ( flame ) ;
25333: LD_ADDR_VAR 0 14
25337: PUSH
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 437
25347: ST_TO_ADDR
// if not task then
25348: LD_VAR 0 14
25352: NOT
25353: IFFALSE 25357
// exit ;
25355: GO 25491
// if task [ 1 ] [ 1 ] <> | then
25357: LD_VAR 0 14
25361: PUSH
25362: LD_INT 1
25364: ARRAY
25365: PUSH
25366: LD_INT 1
25368: ARRAY
25369: PUSH
25370: LD_STRING |
25372: NONEQUAL
25373: IFFALSE 25377
// exit ;
25375: GO 25491
// _x := task [ 1 ] [ 2 ] ;
25377: LD_ADDR_VAR 0 11
25381: PUSH
25382: LD_VAR 0 14
25386: PUSH
25387: LD_INT 1
25389: ARRAY
25390: PUSH
25391: LD_INT 2
25393: ARRAY
25394: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
25395: LD_ADDR_VAR 0 12
25399: PUSH
25400: LD_VAR 0 14
25404: PUSH
25405: LD_INT 1
25407: ARRAY
25408: PUSH
25409: LD_INT 3
25411: ARRAY
25412: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
25413: LD_VAR 0 11
25417: PPUSH
25418: LD_VAR 0 12
25422: PPUSH
25423: CALL_OW 351
25427: NOT
25428: PUSH
25429: LD_VAR 0 11
25433: PPUSH
25434: LD_VAR 0 12
25438: PPUSH
25439: CALL_OW 554
25443: NOT
25444: OR
25445: IFFALSE 25479
// begin task := Delete ( task , 1 ) ;
25447: LD_ADDR_VAR 0 14
25451: PUSH
25452: LD_VAR 0 14
25456: PPUSH
25457: LD_INT 1
25459: PPUSH
25460: CALL_OW 3
25464: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
25465: LD_VAR 0 1
25469: PPUSH
25470: LD_VAR 0 14
25474: PPUSH
25475: CALL_OW 446
// end ; until not HasTask ( flame ) ;
25479: LD_VAR 0 1
25483: PPUSH
25484: CALL_OW 314
25488: NOT
25489: IFFALSE 25326
// end ;
25491: LD_VAR 0 5
25495: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25496: LD_EXP 87
25500: NOT
25501: IFFALSE 25551
25503: GO 25505
25505: DISABLE
// begin initHack := true ;
25506: LD_ADDR_EXP 87
25510: PUSH
25511: LD_INT 1
25513: ST_TO_ADDR
// hackTanks := [ ] ;
25514: LD_ADDR_EXP 88
25518: PUSH
25519: EMPTY
25520: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25521: LD_ADDR_EXP 89
25525: PUSH
25526: EMPTY
25527: ST_TO_ADDR
// hackLimit := 3 ;
25528: LD_ADDR_EXP 90
25532: PUSH
25533: LD_INT 3
25535: ST_TO_ADDR
// hackDist := 12 ;
25536: LD_ADDR_EXP 91
25540: PUSH
25541: LD_INT 12
25543: ST_TO_ADDR
// hackCounter := [ ] ;
25544: LD_ADDR_EXP 92
25548: PUSH
25549: EMPTY
25550: ST_TO_ADDR
// end ;
25551: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25552: LD_EXP 87
25556: PUSH
25557: LD_INT 34
25559: PUSH
25560: LD_INT 99
25562: PUSH
25563: EMPTY
25564: LIST
25565: LIST
25566: PPUSH
25567: CALL_OW 69
25571: AND
25572: IFFALSE 25825
25574: GO 25576
25576: DISABLE
25577: LD_INT 0
25579: PPUSH
25580: PPUSH
// begin enable ;
25581: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25582: LD_ADDR_VAR 0 1
25586: PUSH
25587: LD_INT 34
25589: PUSH
25590: LD_INT 99
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PPUSH
25597: CALL_OW 69
25601: PUSH
25602: FOR_IN
25603: IFFALSE 25823
// begin if not i in hackTanks then
25605: LD_VAR 0 1
25609: PUSH
25610: LD_EXP 88
25614: IN
25615: NOT
25616: IFFALSE 25699
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25618: LD_ADDR_EXP 88
25622: PUSH
25623: LD_EXP 88
25627: PPUSH
25628: LD_EXP 88
25632: PUSH
25633: LD_INT 1
25635: PLUS
25636: PPUSH
25637: LD_VAR 0 1
25641: PPUSH
25642: CALL_OW 1
25646: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25647: LD_ADDR_EXP 89
25651: PUSH
25652: LD_EXP 89
25656: PPUSH
25657: LD_EXP 89
25661: PUSH
25662: LD_INT 1
25664: PLUS
25665: PPUSH
25666: EMPTY
25667: PPUSH
25668: CALL_OW 1
25672: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25673: LD_ADDR_EXP 92
25677: PUSH
25678: LD_EXP 92
25682: PPUSH
25683: LD_EXP 92
25687: PUSH
25688: LD_INT 1
25690: PLUS
25691: PPUSH
25692: EMPTY
25693: PPUSH
25694: CALL_OW 1
25698: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25699: LD_VAR 0 1
25703: PPUSH
25704: CALL_OW 302
25708: NOT
25709: IFFALSE 25722
// begin HackUnlinkAll ( i ) ;
25711: LD_VAR 0 1
25715: PPUSH
25716: CALL 25828 0 1
// continue ;
25720: GO 25602
// end ; HackCheckCapturedStatus ( i ) ;
25722: LD_VAR 0 1
25726: PPUSH
25727: CALL 26271 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25731: LD_ADDR_VAR 0 2
25735: PUSH
25736: LD_INT 81
25738: PUSH
25739: LD_VAR 0 1
25743: PPUSH
25744: CALL_OW 255
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PUSH
25753: LD_INT 33
25755: PUSH
25756: LD_INT 3
25758: PUSH
25759: EMPTY
25760: LIST
25761: LIST
25762: PUSH
25763: LD_INT 91
25765: PUSH
25766: LD_VAR 0 1
25770: PUSH
25771: LD_EXP 91
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 50
25783: PUSH
25784: EMPTY
25785: LIST
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: LIST
25791: LIST
25792: PPUSH
25793: CALL_OW 69
25797: ST_TO_ADDR
// if not tmp then
25798: LD_VAR 0 2
25802: NOT
25803: IFFALSE 25807
// continue ;
25805: GO 25602
// HackLink ( i , tmp ) ;
25807: LD_VAR 0 1
25811: PPUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL 25964 0 2
// end ;
25821: GO 25602
25823: POP
25824: POP
// end ;
25825: PPOPN 2
25827: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25828: LD_INT 0
25830: PPUSH
25831: PPUSH
25832: PPUSH
// if not hack in hackTanks then
25833: LD_VAR 0 1
25837: PUSH
25838: LD_EXP 88
25842: IN
25843: NOT
25844: IFFALSE 25848
// exit ;
25846: GO 25959
// index := GetElementIndex ( hackTanks , hack ) ;
25848: LD_ADDR_VAR 0 4
25852: PUSH
25853: LD_EXP 88
25857: PPUSH
25858: LD_VAR 0 1
25862: PPUSH
25863: CALL 33564 0 2
25867: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25868: LD_EXP 89
25872: PUSH
25873: LD_VAR 0 4
25877: ARRAY
25878: IFFALSE 25959
// begin for i in hackTanksCaptured [ index ] do
25880: LD_ADDR_VAR 0 3
25884: PUSH
25885: LD_EXP 89
25889: PUSH
25890: LD_VAR 0 4
25894: ARRAY
25895: PUSH
25896: FOR_IN
25897: IFFALSE 25923
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25899: LD_VAR 0 3
25903: PUSH
25904: LD_INT 1
25906: ARRAY
25907: PPUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_INT 2
25915: ARRAY
25916: PPUSH
25917: CALL_OW 235
25921: GO 25896
25923: POP
25924: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25925: LD_ADDR_EXP 89
25929: PUSH
25930: LD_EXP 89
25934: PPUSH
25935: LD_VAR 0 4
25939: PPUSH
25940: EMPTY
25941: PPUSH
25942: CALL_OW 1
25946: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25947: LD_VAR 0 1
25951: PPUSH
25952: LD_INT 0
25954: PPUSH
25955: CALL_OW 505
// end ; end ;
25959: LD_VAR 0 2
25963: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
25968: PPUSH
// if not hack in hackTanks or not vehicles then
25969: LD_VAR 0 1
25973: PUSH
25974: LD_EXP 88
25978: IN
25979: NOT
25980: PUSH
25981: LD_VAR 0 2
25985: NOT
25986: OR
25987: IFFALSE 25991
// exit ;
25989: GO 26266
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25991: LD_ADDR_VAR 0 2
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: LD_VAR 0 2
26005: PPUSH
26006: LD_INT 1
26008: PPUSH
26009: LD_INT 1
26011: PPUSH
26012: CALL 34214 0 4
26016: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26017: LD_ADDR_VAR 0 5
26021: PUSH
26022: LD_EXP 88
26026: PPUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL 33564 0 2
26036: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26037: LD_EXP 89
26041: PUSH
26042: LD_VAR 0 5
26046: ARRAY
26047: PUSH
26048: LD_EXP 90
26052: LESS
26053: IFFALSE 26242
// begin for i := 1 to vehicles do
26055: LD_ADDR_VAR 0 4
26059: PUSH
26060: DOUBLE
26061: LD_INT 1
26063: DEC
26064: ST_TO_ADDR
26065: LD_VAR 0 2
26069: PUSH
26070: FOR_TO
26071: IFFALSE 26240
// begin if hackTanksCaptured [ index ] = hackLimit then
26073: LD_EXP 89
26077: PUSH
26078: LD_VAR 0 5
26082: ARRAY
26083: PUSH
26084: LD_EXP 90
26088: EQUAL
26089: IFFALSE 26093
// break ;
26091: GO 26240
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26093: LD_ADDR_EXP 92
26097: PUSH
26098: LD_EXP 92
26102: PPUSH
26103: LD_VAR 0 5
26107: PPUSH
26108: LD_EXP 92
26112: PUSH
26113: LD_VAR 0 5
26117: ARRAY
26118: PUSH
26119: LD_INT 1
26121: PLUS
26122: PPUSH
26123: CALL_OW 1
26127: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26128: LD_ADDR_EXP 89
26132: PUSH
26133: LD_EXP 89
26137: PPUSH
26138: LD_VAR 0 5
26142: PUSH
26143: LD_EXP 89
26147: PUSH
26148: LD_VAR 0 5
26152: ARRAY
26153: PUSH
26154: LD_INT 1
26156: PLUS
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PPUSH
26162: LD_VAR 0 2
26166: PUSH
26167: LD_VAR 0 4
26171: ARRAY
26172: PUSH
26173: LD_VAR 0 2
26177: PUSH
26178: LD_VAR 0 4
26182: ARRAY
26183: PPUSH
26184: CALL_OW 255
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PPUSH
26193: CALL 33779 0 3
26197: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26198: LD_VAR 0 2
26202: PUSH
26203: LD_VAR 0 4
26207: ARRAY
26208: PPUSH
26209: LD_VAR 0 1
26213: PPUSH
26214: CALL_OW 255
26218: PPUSH
26219: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26223: LD_VAR 0 2
26227: PUSH
26228: LD_VAR 0 4
26232: ARRAY
26233: PPUSH
26234: CALL_OW 141
// end ;
26238: GO 26070
26240: POP
26241: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26242: LD_VAR 0 1
26246: PPUSH
26247: LD_EXP 89
26251: PUSH
26252: LD_VAR 0 5
26256: ARRAY
26257: PUSH
26258: LD_INT 0
26260: PLUS
26261: PPUSH
26262: CALL_OW 505
// end ;
26266: LD_VAR 0 3
26270: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26271: LD_INT 0
26273: PPUSH
26274: PPUSH
26275: PPUSH
26276: PPUSH
// if not hack in hackTanks then
26277: LD_VAR 0 1
26281: PUSH
26282: LD_EXP 88
26286: IN
26287: NOT
26288: IFFALSE 26292
// exit ;
26290: GO 26532
// index := GetElementIndex ( hackTanks , hack ) ;
26292: LD_ADDR_VAR 0 4
26296: PUSH
26297: LD_EXP 88
26301: PPUSH
26302: LD_VAR 0 1
26306: PPUSH
26307: CALL 33564 0 2
26311: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26312: LD_ADDR_VAR 0 3
26316: PUSH
26317: DOUBLE
26318: LD_EXP 89
26322: PUSH
26323: LD_VAR 0 4
26327: ARRAY
26328: INC
26329: ST_TO_ADDR
26330: LD_INT 1
26332: PUSH
26333: FOR_DOWNTO
26334: IFFALSE 26506
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26336: LD_ADDR_VAR 0 5
26340: PUSH
26341: LD_EXP 89
26345: PUSH
26346: LD_VAR 0 4
26350: ARRAY
26351: PUSH
26352: LD_VAR 0 3
26356: ARRAY
26357: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26358: LD_VAR 0 5
26362: PUSH
26363: LD_INT 1
26365: ARRAY
26366: PPUSH
26367: CALL_OW 302
26371: NOT
26372: PUSH
26373: LD_VAR 0 5
26377: PUSH
26378: LD_INT 1
26380: ARRAY
26381: PPUSH
26382: CALL_OW 255
26386: PUSH
26387: LD_VAR 0 1
26391: PPUSH
26392: CALL_OW 255
26396: NONEQUAL
26397: OR
26398: IFFALSE 26504
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26400: LD_VAR 0 5
26404: PUSH
26405: LD_INT 1
26407: ARRAY
26408: PPUSH
26409: CALL_OW 305
26413: PUSH
26414: LD_VAR 0 5
26418: PUSH
26419: LD_INT 1
26421: ARRAY
26422: PPUSH
26423: CALL_OW 255
26427: PUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 255
26437: EQUAL
26438: AND
26439: IFFALSE 26463
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26441: LD_VAR 0 5
26445: PUSH
26446: LD_INT 1
26448: ARRAY
26449: PPUSH
26450: LD_VAR 0 5
26454: PUSH
26455: LD_INT 2
26457: ARRAY
26458: PPUSH
26459: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26463: LD_ADDR_EXP 89
26467: PUSH
26468: LD_EXP 89
26472: PPUSH
26473: LD_VAR 0 4
26477: PPUSH
26478: LD_EXP 89
26482: PUSH
26483: LD_VAR 0 4
26487: ARRAY
26488: PPUSH
26489: LD_VAR 0 3
26493: PPUSH
26494: CALL_OW 3
26498: PPUSH
26499: CALL_OW 1
26503: ST_TO_ADDR
// end ; end ;
26504: GO 26333
26506: POP
26507: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26508: LD_VAR 0 1
26512: PPUSH
26513: LD_EXP 89
26517: PUSH
26518: LD_VAR 0 4
26522: ARRAY
26523: PUSH
26524: LD_INT 0
26526: PLUS
26527: PPUSH
26528: CALL_OW 505
// end ;
26532: LD_VAR 0 2
26536: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26537: LD_INT 0
26539: PPUSH
26540: PPUSH
26541: PPUSH
26542: PPUSH
// if not hack in hackTanks then
26543: LD_VAR 0 1
26547: PUSH
26548: LD_EXP 88
26552: IN
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26643
// index := GetElementIndex ( hackTanks , hack ) ;
26558: LD_ADDR_VAR 0 5
26562: PUSH
26563: LD_EXP 88
26567: PPUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL 33564 0 2
26577: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26578: LD_ADDR_VAR 0 4
26582: PUSH
26583: DOUBLE
26584: LD_INT 1
26586: DEC
26587: ST_TO_ADDR
26588: LD_EXP 89
26592: PUSH
26593: LD_VAR 0 5
26597: ARRAY
26598: PUSH
26599: FOR_TO
26600: IFFALSE 26641
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26602: LD_EXP 89
26606: PUSH
26607: LD_VAR 0 5
26611: ARRAY
26612: PUSH
26613: LD_VAR 0 4
26617: ARRAY
26618: PUSH
26619: LD_INT 1
26621: ARRAY
26622: PUSH
26623: LD_VAR 0 2
26627: EQUAL
26628: IFFALSE 26639
// KillUnit ( vehicle ) ;
26630: LD_VAR 0 2
26634: PPUSH
26635: CALL_OW 66
26639: GO 26599
26641: POP
26642: POP
// end ;
26643: LD_VAR 0 3
26647: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
26648: LD_EXP 93
26652: NOT
26653: IFFALSE 26688
26655: GO 26657
26657: DISABLE
// begin initMiner := true ;
26658: LD_ADDR_EXP 93
26662: PUSH
26663: LD_INT 1
26665: ST_TO_ADDR
// minersList := [ ] ;
26666: LD_ADDR_EXP 94
26670: PUSH
26671: EMPTY
26672: ST_TO_ADDR
// minerMinesList := [ ] ;
26673: LD_ADDR_EXP 95
26677: PUSH
26678: EMPTY
26679: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
26680: LD_ADDR_EXP 96
26684: PUSH
26685: LD_INT 5
26687: ST_TO_ADDR
// end ;
26688: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
26689: LD_EXP 93
26693: PUSH
26694: LD_INT 34
26696: PUSH
26697: LD_INT 81
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: AND
26709: IFFALSE 27170
26711: GO 26713
26713: DISABLE
26714: LD_INT 0
26716: PPUSH
26717: PPUSH
26718: PPUSH
26719: PPUSH
// begin enable ;
26720: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
26721: LD_ADDR_VAR 0 1
26725: PUSH
26726: LD_INT 34
26728: PUSH
26729: LD_INT 81
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: PPUSH
26736: CALL_OW 69
26740: PUSH
26741: FOR_IN
26742: IFFALSE 26814
// begin if not i in minersList then
26744: LD_VAR 0 1
26748: PUSH
26749: LD_EXP 94
26753: IN
26754: NOT
26755: IFFALSE 26812
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
26757: LD_ADDR_EXP 94
26761: PUSH
26762: LD_EXP 94
26766: PPUSH
26767: LD_EXP 94
26771: PUSH
26772: LD_INT 1
26774: PLUS
26775: PPUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 1
26785: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
26786: LD_ADDR_EXP 95
26790: PUSH
26791: LD_EXP 95
26795: PPUSH
26796: LD_EXP 95
26800: PUSH
26801: LD_INT 1
26803: PLUS
26804: PPUSH
26805: EMPTY
26806: PPUSH
26807: CALL_OW 1
26811: ST_TO_ADDR
// end end ;
26812: GO 26741
26814: POP
26815: POP
// for i := minerMinesList downto 1 do
26816: LD_ADDR_VAR 0 1
26820: PUSH
26821: DOUBLE
26822: LD_EXP 95
26826: INC
26827: ST_TO_ADDR
26828: LD_INT 1
26830: PUSH
26831: FOR_DOWNTO
26832: IFFALSE 27168
// begin if IsLive ( minersList [ i ] ) then
26834: LD_EXP 94
26838: PUSH
26839: LD_VAR 0 1
26843: ARRAY
26844: PPUSH
26845: CALL_OW 300
26849: IFFALSE 26877
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
26851: LD_EXP 94
26855: PUSH
26856: LD_VAR 0 1
26860: ARRAY
26861: PPUSH
26862: LD_EXP 95
26866: PUSH
26867: LD_VAR 0 1
26871: ARRAY
26872: PPUSH
26873: CALL_OW 505
// if not minerMinesList [ i ] then
26877: LD_EXP 95
26881: PUSH
26882: LD_VAR 0 1
26886: ARRAY
26887: NOT
26888: IFFALSE 26892
// continue ;
26890: GO 26831
// for j := minerMinesList [ i ] downto 1 do
26892: LD_ADDR_VAR 0 2
26896: PUSH
26897: DOUBLE
26898: LD_EXP 95
26902: PUSH
26903: LD_VAR 0 1
26907: ARRAY
26908: INC
26909: ST_TO_ADDR
26910: LD_INT 1
26912: PUSH
26913: FOR_DOWNTO
26914: IFFALSE 27164
// begin side := GetSide ( minersList [ i ] ) ;
26916: LD_ADDR_VAR 0 3
26920: PUSH
26921: LD_EXP 94
26925: PUSH
26926: LD_VAR 0 1
26930: ARRAY
26931: PPUSH
26932: CALL_OW 255
26936: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
26937: LD_ADDR_VAR 0 4
26941: PUSH
26942: LD_EXP 95
26946: PUSH
26947: LD_VAR 0 1
26951: ARRAY
26952: PUSH
26953: LD_VAR 0 2
26957: ARRAY
26958: PUSH
26959: LD_INT 1
26961: ARRAY
26962: PPUSH
26963: LD_EXP 95
26967: PUSH
26968: LD_VAR 0 1
26972: ARRAY
26973: PUSH
26974: LD_VAR 0 2
26978: ARRAY
26979: PUSH
26980: LD_INT 2
26982: ARRAY
26983: PPUSH
26984: CALL_OW 428
26988: ST_TO_ADDR
// if not tmp then
26989: LD_VAR 0 4
26993: NOT
26994: IFFALSE 26998
// continue ;
26996: GO 26913
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
26998: LD_VAR 0 4
27002: PUSH
27003: LD_INT 81
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PPUSH
27015: CALL_OW 69
27019: IN
27020: PUSH
27021: LD_EXP 95
27025: PUSH
27026: LD_VAR 0 1
27030: ARRAY
27031: PUSH
27032: LD_VAR 0 2
27036: ARRAY
27037: PUSH
27038: LD_INT 1
27040: ARRAY
27041: PPUSH
27042: LD_EXP 95
27046: PUSH
27047: LD_VAR 0 1
27051: ARRAY
27052: PUSH
27053: LD_VAR 0 2
27057: ARRAY
27058: PUSH
27059: LD_INT 2
27061: ARRAY
27062: PPUSH
27063: CALL_OW 458
27067: AND
27068: IFFALSE 27162
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
27070: LD_EXP 95
27074: PUSH
27075: LD_VAR 0 1
27079: ARRAY
27080: PUSH
27081: LD_VAR 0 2
27085: ARRAY
27086: PUSH
27087: LD_INT 1
27089: ARRAY
27090: PPUSH
27091: LD_EXP 95
27095: PUSH
27096: LD_VAR 0 1
27100: ARRAY
27101: PUSH
27102: LD_VAR 0 2
27106: ARRAY
27107: PUSH
27108: LD_INT 2
27110: ARRAY
27111: PPUSH
27112: LD_VAR 0 3
27116: PPUSH
27117: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
27121: LD_ADDR_EXP 95
27125: PUSH
27126: LD_EXP 95
27130: PPUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: LD_EXP 95
27140: PUSH
27141: LD_VAR 0 1
27145: ARRAY
27146: PPUSH
27147: LD_VAR 0 2
27151: PPUSH
27152: CALL_OW 3
27156: PPUSH
27157: CALL_OW 1
27161: ST_TO_ADDR
// end ; end ;
27162: GO 26913
27164: POP
27165: POP
// end ;
27166: GO 26831
27168: POP
27169: POP
// end ;
27170: PPOPN 4
27172: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
27173: LD_INT 0
27175: PPUSH
27176: PPUSH
// result := false ;
27177: LD_ADDR_VAR 0 4
27181: PUSH
27182: LD_INT 0
27184: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
27185: LD_VAR 0 1
27189: PPUSH
27190: CALL_OW 264
27194: PUSH
27195: LD_INT 81
27197: EQUAL
27198: NOT
27199: IFFALSE 27203
// exit ;
27201: GO 27443
// index := GetElementIndex ( minersList , unit ) ;
27203: LD_ADDR_VAR 0 5
27207: PUSH
27208: LD_EXP 94
27212: PPUSH
27213: LD_VAR 0 1
27217: PPUSH
27218: CALL 33564 0 2
27222: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
27223: LD_EXP 95
27227: PUSH
27228: LD_VAR 0 5
27232: ARRAY
27233: PUSH
27234: LD_EXP 96
27238: GREATEREQUAL
27239: IFFALSE 27243
// exit ;
27241: GO 27443
// ComMoveXY ( unit , x , y ) ;
27243: LD_VAR 0 1
27247: PPUSH
27248: LD_VAR 0 2
27252: PPUSH
27253: LD_VAR 0 3
27257: PPUSH
27258: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
27262: LD_INT 35
27264: PPUSH
27265: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
27269: LD_VAR 0 1
27273: PPUSH
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_VAR 0 3
27283: PPUSH
27284: CALL 65325 0 3
27288: NOT
27289: PUSH
27290: LD_VAR 0 1
27294: PPUSH
27295: CALL_OW 314
27299: AND
27300: IFFALSE 27304
// exit ;
27302: GO 27443
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
27304: LD_VAR 0 2
27308: PPUSH
27309: LD_VAR 0 3
27313: PPUSH
27314: CALL_OW 428
27318: PUSH
27319: LD_VAR 0 1
27323: EQUAL
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 314
27334: NOT
27335: AND
27336: IFFALSE 27262
// PlaySoundXY ( x , y , PlantMine ) ;
27338: LD_VAR 0 2
27342: PPUSH
27343: LD_VAR 0 3
27347: PPUSH
27348: LD_STRING PlantMine
27350: PPUSH
27351: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
27355: LD_VAR 0 2
27359: PPUSH
27360: LD_VAR 0 3
27364: PPUSH
27365: LD_VAR 0 1
27369: PPUSH
27370: CALL_OW 255
27374: PPUSH
27375: LD_INT 0
27377: PPUSH
27378: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
27382: LD_ADDR_EXP 95
27386: PUSH
27387: LD_EXP 95
27391: PPUSH
27392: LD_VAR 0 5
27396: PUSH
27397: LD_EXP 95
27401: PUSH
27402: LD_VAR 0 5
27406: ARRAY
27407: PUSH
27408: LD_INT 1
27410: PLUS
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PPUSH
27416: LD_VAR 0 2
27420: PUSH
27421: LD_VAR 0 3
27425: PUSH
27426: EMPTY
27427: LIST
27428: LIST
27429: PPUSH
27430: CALL 33779 0 3
27434: ST_TO_ADDR
// result := true ;
27435: LD_ADDR_VAR 0 4
27439: PUSH
27440: LD_INT 1
27442: ST_TO_ADDR
// end ;
27443: LD_VAR 0 4
27447: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
27448: LD_INT 0
27450: PPUSH
27451: PPUSH
27452: PPUSH
// if not unit in minersList then
27453: LD_VAR 0 1
27457: PUSH
27458: LD_EXP 94
27462: IN
27463: NOT
27464: IFFALSE 27468
// exit ;
27466: GO 27860
// index := GetElementIndex ( minersList , unit ) ;
27468: LD_ADDR_VAR 0 6
27472: PUSH
27473: LD_EXP 94
27477: PPUSH
27478: LD_VAR 0 1
27482: PPUSH
27483: CALL 33564 0 2
27487: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
27488: LD_ADDR_VAR 0 5
27492: PUSH
27493: DOUBLE
27494: LD_EXP 95
27498: PUSH
27499: LD_VAR 0 6
27503: ARRAY
27504: INC
27505: ST_TO_ADDR
27506: LD_INT 1
27508: PUSH
27509: FOR_DOWNTO
27510: IFFALSE 27671
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
27512: LD_EXP 95
27516: PUSH
27517: LD_VAR 0 6
27521: ARRAY
27522: PUSH
27523: LD_VAR 0 5
27527: ARRAY
27528: PUSH
27529: LD_INT 1
27531: ARRAY
27532: PUSH
27533: LD_VAR 0 2
27537: EQUAL
27538: PUSH
27539: LD_EXP 95
27543: PUSH
27544: LD_VAR 0 6
27548: ARRAY
27549: PUSH
27550: LD_VAR 0 5
27554: ARRAY
27555: PUSH
27556: LD_INT 2
27558: ARRAY
27559: PUSH
27560: LD_VAR 0 3
27564: EQUAL
27565: AND
27566: IFFALSE 27669
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27568: LD_EXP 95
27572: PUSH
27573: LD_VAR 0 6
27577: ARRAY
27578: PUSH
27579: LD_VAR 0 5
27583: ARRAY
27584: PUSH
27585: LD_INT 1
27587: ARRAY
27588: PPUSH
27589: LD_EXP 95
27593: PUSH
27594: LD_VAR 0 6
27598: ARRAY
27599: PUSH
27600: LD_VAR 0 5
27604: ARRAY
27605: PUSH
27606: LD_INT 2
27608: ARRAY
27609: PPUSH
27610: LD_VAR 0 1
27614: PPUSH
27615: CALL_OW 255
27619: PPUSH
27620: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27624: LD_ADDR_EXP 95
27628: PUSH
27629: LD_EXP 95
27633: PPUSH
27634: LD_VAR 0 6
27638: PPUSH
27639: LD_EXP 95
27643: PUSH
27644: LD_VAR 0 6
27648: ARRAY
27649: PPUSH
27650: LD_VAR 0 5
27654: PPUSH
27655: CALL_OW 3
27659: PPUSH
27660: CALL_OW 1
27664: ST_TO_ADDR
// exit ;
27665: POP
27666: POP
27667: GO 27860
// end ; end ;
27669: GO 27509
27671: POP
27672: POP
// for i := minerMinesList [ index ] downto 1 do
27673: LD_ADDR_VAR 0 5
27677: PUSH
27678: DOUBLE
27679: LD_EXP 95
27683: PUSH
27684: LD_VAR 0 6
27688: ARRAY
27689: INC
27690: ST_TO_ADDR
27691: LD_INT 1
27693: PUSH
27694: FOR_DOWNTO
27695: IFFALSE 27858
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
27697: LD_EXP 95
27701: PUSH
27702: LD_VAR 0 6
27706: ARRAY
27707: PUSH
27708: LD_VAR 0 5
27712: ARRAY
27713: PUSH
27714: LD_INT 1
27716: ARRAY
27717: PPUSH
27718: LD_EXP 95
27722: PUSH
27723: LD_VAR 0 6
27727: ARRAY
27728: PUSH
27729: LD_VAR 0 5
27733: ARRAY
27734: PUSH
27735: LD_INT 2
27737: ARRAY
27738: PPUSH
27739: LD_VAR 0 2
27743: PPUSH
27744: LD_VAR 0 3
27748: PPUSH
27749: CALL_OW 298
27753: PUSH
27754: LD_INT 6
27756: LESS
27757: IFFALSE 27856
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
27759: LD_EXP 95
27763: PUSH
27764: LD_VAR 0 6
27768: ARRAY
27769: PUSH
27770: LD_VAR 0 5
27774: ARRAY
27775: PUSH
27776: LD_INT 1
27778: ARRAY
27779: PPUSH
27780: LD_EXP 95
27784: PUSH
27785: LD_VAR 0 6
27789: ARRAY
27790: PUSH
27791: LD_VAR 0 5
27795: ARRAY
27796: PUSH
27797: LD_INT 2
27799: ARRAY
27800: PPUSH
27801: LD_VAR 0 1
27805: PPUSH
27806: CALL_OW 255
27810: PPUSH
27811: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
27815: LD_ADDR_EXP 95
27819: PUSH
27820: LD_EXP 95
27824: PPUSH
27825: LD_VAR 0 6
27829: PPUSH
27830: LD_EXP 95
27834: PUSH
27835: LD_VAR 0 6
27839: ARRAY
27840: PPUSH
27841: LD_VAR 0 5
27845: PPUSH
27846: CALL_OW 3
27850: PPUSH
27851: CALL_OW 1
27855: ST_TO_ADDR
// end ; end ;
27856: GO 27694
27858: POP
27859: POP
// end ;
27860: LD_VAR 0 4
27864: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
27865: LD_INT 0
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
27874: PPUSH
27875: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 264
27885: PUSH
27886: LD_INT 81
27888: EQUAL
27889: NOT
27890: PUSH
27891: LD_VAR 0 1
27895: PUSH
27896: LD_EXP 94
27900: IN
27901: NOT
27902: OR
27903: IFFALSE 27907
// exit ;
27905: GO 28229
// index := GetElementIndex ( minersList , unit ) ;
27907: LD_ADDR_VAR 0 6
27911: PUSH
27912: LD_EXP 94
27916: PPUSH
27917: LD_VAR 0 1
27921: PPUSH
27922: CALL 33564 0 2
27926: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
27927: LD_ADDR_VAR 0 8
27931: PUSH
27932: LD_EXP 96
27936: PUSH
27937: LD_EXP 95
27941: PUSH
27942: LD_VAR 0 6
27946: ARRAY
27947: MINUS
27948: ST_TO_ADDR
// if not minesFreeAmount then
27949: LD_VAR 0 8
27953: NOT
27954: IFFALSE 27958
// exit ;
27956: GO 28229
// tmp := [ ] ;
27958: LD_ADDR_VAR 0 7
27962: PUSH
27963: EMPTY
27964: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
27965: LD_ADDR_VAR 0 5
27969: PUSH
27970: DOUBLE
27971: LD_INT 1
27973: DEC
27974: ST_TO_ADDR
27975: LD_VAR 0 8
27979: PUSH
27980: FOR_TO
27981: IFFALSE 28176
// begin _d := rand ( 0 , 5 ) ;
27983: LD_ADDR_VAR 0 11
27987: PUSH
27988: LD_INT 0
27990: PPUSH
27991: LD_INT 5
27993: PPUSH
27994: CALL_OW 12
27998: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
27999: LD_ADDR_VAR 0 12
28003: PUSH
28004: LD_INT 2
28006: PPUSH
28007: LD_INT 6
28009: PPUSH
28010: CALL_OW 12
28014: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
28015: LD_ADDR_VAR 0 9
28019: PUSH
28020: LD_VAR 0 2
28024: PPUSH
28025: LD_VAR 0 11
28029: PPUSH
28030: LD_VAR 0 12
28034: PPUSH
28035: CALL_OW 272
28039: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
28040: LD_ADDR_VAR 0 10
28044: PUSH
28045: LD_VAR 0 3
28049: PPUSH
28050: LD_VAR 0 11
28054: PPUSH
28055: LD_VAR 0 12
28059: PPUSH
28060: CALL_OW 273
28064: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
28065: LD_VAR 0 9
28069: PPUSH
28070: LD_VAR 0 10
28074: PPUSH
28075: CALL_OW 488
28079: PUSH
28080: LD_VAR 0 9
28084: PUSH
28085: LD_VAR 0 10
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_VAR 0 7
28098: IN
28099: NOT
28100: AND
28101: PUSH
28102: LD_VAR 0 9
28106: PPUSH
28107: LD_VAR 0 10
28111: PPUSH
28112: CALL_OW 458
28116: NOT
28117: AND
28118: IFFALSE 28160
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
28120: LD_ADDR_VAR 0 7
28124: PUSH
28125: LD_VAR 0 7
28129: PPUSH
28130: LD_VAR 0 7
28134: PUSH
28135: LD_INT 1
28137: PLUS
28138: PPUSH
28139: LD_VAR 0 9
28143: PUSH
28144: LD_VAR 0 10
28148: PUSH
28149: EMPTY
28150: LIST
28151: LIST
28152: PPUSH
28153: CALL_OW 1
28157: ST_TO_ADDR
28158: GO 28174
// i := i - 1 ;
28160: LD_ADDR_VAR 0 5
28164: PUSH
28165: LD_VAR 0 5
28169: PUSH
28170: LD_INT 1
28172: MINUS
28173: ST_TO_ADDR
// end ;
28174: GO 27980
28176: POP
28177: POP
// for i in tmp do
28178: LD_ADDR_VAR 0 5
28182: PUSH
28183: LD_VAR 0 7
28187: PUSH
28188: FOR_IN
28189: IFFALSE 28227
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_VAR 0 5
28200: PUSH
28201: LD_INT 1
28203: ARRAY
28204: PPUSH
28205: LD_VAR 0 5
28209: PUSH
28210: LD_INT 2
28212: ARRAY
28213: PPUSH
28214: CALL 27173 0 3
28218: NOT
28219: IFFALSE 28225
// exit ;
28221: POP
28222: POP
28223: GO 28229
28225: GO 28188
28227: POP
28228: POP
// end ;
28229: LD_VAR 0 4
28233: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
28234: LD_INT 0
28236: PPUSH
28237: PPUSH
28238: PPUSH
28239: PPUSH
28240: PPUSH
28241: PPUSH
28242: PPUSH
28243: PPUSH
28244: PPUSH
// if GetClass ( unit ) <> class_sniper then
28245: LD_VAR 0 1
28249: PPUSH
28250: CALL_OW 257
28254: PUSH
28255: LD_INT 5
28257: NONEQUAL
28258: IFFALSE 28262
// exit ;
28260: GO 28728
// dist := 8 ;
28262: LD_ADDR_VAR 0 5
28266: PUSH
28267: LD_INT 8
28269: ST_TO_ADDR
// viewRange := 12 ;
28270: LD_ADDR_VAR 0 8
28274: PUSH
28275: LD_INT 12
28277: ST_TO_ADDR
// side := GetSide ( unit ) ;
28278: LD_ADDR_VAR 0 6
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL_OW 255
28292: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
28293: LD_INT 61
28295: PPUSH
28296: LD_VAR 0 6
28300: PPUSH
28301: CALL_OW 321
28305: PUSH
28306: LD_INT 2
28308: EQUAL
28309: IFFALSE 28319
// viewRange := 16 ;
28311: LD_ADDR_VAR 0 8
28315: PUSH
28316: LD_INT 16
28318: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
28319: LD_VAR 0 1
28323: PPUSH
28324: LD_VAR 0 2
28328: PPUSH
28329: LD_VAR 0 3
28333: PPUSH
28334: CALL_OW 297
28338: PUSH
28339: LD_VAR 0 5
28343: GREATER
28344: IFFALSE 28423
// begin ComMoveXY ( unit , x , y ) ;
28346: LD_VAR 0 1
28350: PPUSH
28351: LD_VAR 0 2
28355: PPUSH
28356: LD_VAR 0 3
28360: PPUSH
28361: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28365: LD_INT 35
28367: PPUSH
28368: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_VAR 0 2
28381: PPUSH
28382: LD_VAR 0 3
28386: PPUSH
28387: CALL 65325 0 3
28391: NOT
28392: IFFALSE 28396
// exit ;
28394: GO 28728
// until GetDistUnitXY ( unit , x , y ) < dist ;
28396: LD_VAR 0 1
28400: PPUSH
28401: LD_VAR 0 2
28405: PPUSH
28406: LD_VAR 0 3
28410: PPUSH
28411: CALL_OW 297
28415: PUSH
28416: LD_VAR 0 5
28420: LESS
28421: IFFALSE 28365
// end ; ComTurnXY ( unit , x , y ) ;
28423: LD_VAR 0 1
28427: PPUSH
28428: LD_VAR 0 2
28432: PPUSH
28433: LD_VAR 0 3
28437: PPUSH
28438: CALL_OW 118
// repeat if Multiplayer then
28442: LD_OWVAR 4
28446: IFFALSE 28457
// wait ( 35 ) else
28448: LD_INT 35
28450: PPUSH
28451: CALL_OW 67
28455: GO 28464
// wait ( 5 ) ;
28457: LD_INT 5
28459: PPUSH
28460: CALL_OW 67
// _d := GetDir ( unit ) ;
28464: LD_ADDR_VAR 0 11
28468: PUSH
28469: LD_VAR 0 1
28473: PPUSH
28474: CALL_OW 254
28478: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
28479: LD_ADDR_VAR 0 7
28483: PUSH
28484: LD_VAR 0 1
28488: PPUSH
28489: CALL_OW 250
28493: PPUSH
28494: LD_VAR 0 1
28498: PPUSH
28499: CALL_OW 251
28503: PPUSH
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_VAR 0 3
28513: PPUSH
28514: CALL 67933 0 4
28518: ST_TO_ADDR
// until dir = _d ;
28519: LD_VAR 0 7
28523: PUSH
28524: LD_VAR 0 11
28528: EQUAL
28529: IFFALSE 28442
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
28531: LD_ADDR_VAR 0 9
28535: PUSH
28536: LD_VAR 0 1
28540: PPUSH
28541: CALL_OW 250
28545: PPUSH
28546: LD_VAR 0 7
28550: PPUSH
28551: LD_VAR 0 5
28555: PPUSH
28556: CALL_OW 272
28560: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
28561: LD_ADDR_VAR 0 10
28565: PUSH
28566: LD_VAR 0 1
28570: PPUSH
28571: CALL_OW 251
28575: PPUSH
28576: LD_VAR 0 7
28580: PPUSH
28581: LD_VAR 0 5
28585: PPUSH
28586: CALL_OW 273
28590: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28591: LD_VAR 0 9
28595: PPUSH
28596: LD_VAR 0 10
28600: PPUSH
28601: CALL_OW 488
28605: NOT
28606: IFFALSE 28610
// exit ;
28608: GO 28728
// ComAnimCustom ( unit , 1 ) ;
28610: LD_VAR 0 1
28614: PPUSH
28615: LD_INT 1
28617: PPUSH
28618: CALL_OW 592
// p := 0 ;
28622: LD_ADDR_VAR 0 12
28626: PUSH
28627: LD_INT 0
28629: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
28630: LD_VAR 0 9
28634: PPUSH
28635: LD_VAR 0 10
28639: PPUSH
28640: LD_VAR 0 6
28644: PPUSH
28645: LD_VAR 0 8
28649: PPUSH
28650: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
28654: LD_INT 35
28656: PPUSH
28657: CALL_OW 67
// p := Inc ( p ) ;
28661: LD_ADDR_VAR 0 12
28665: PUSH
28666: LD_VAR 0 12
28670: PPUSH
28671: CALL 67889 0 1
28675: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
28676: LD_VAR 0 12
28680: PUSH
28681: LD_INT 3
28683: EQUAL
28684: PUSH
28685: LD_VAR 0 1
28689: PPUSH
28690: CALL_OW 302
28694: NOT
28695: OR
28696: PUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL_OW 301
28706: OR
28707: IFFALSE 28654
// RemoveSeeing ( _x , _y , side ) ;
28709: LD_VAR 0 9
28713: PPUSH
28714: LD_VAR 0 10
28718: PPUSH
28719: LD_VAR 0 6
28723: PPUSH
28724: CALL_OW 331
// end ; end_of_file
28728: LD_VAR 0 4
28732: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
28733: LD_INT 0
28735: PPUSH
28736: PPUSH
// if exist_mode then
28737: LD_VAR 0 2
28741: IFFALSE 28787
// begin unit := CreateCharacter ( prefix & ident ) ;
28743: LD_ADDR_VAR 0 5
28747: PUSH
28748: LD_VAR 0 3
28752: PUSH
28753: LD_VAR 0 1
28757: STR
28758: PPUSH
28759: CALL_OW 34
28763: ST_TO_ADDR
// if unit then
28764: LD_VAR 0 5
28768: IFFALSE 28785
// DeleteCharacters ( prefix & ident ) ;
28770: LD_VAR 0 3
28774: PUSH
28775: LD_VAR 0 1
28779: STR
28780: PPUSH
28781: CALL_OW 40
// end else
28785: GO 28802
// unit := NewCharacter ( ident ) ;
28787: LD_ADDR_VAR 0 5
28791: PUSH
28792: LD_VAR 0 1
28796: PPUSH
28797: CALL_OW 25
28801: ST_TO_ADDR
// result := unit ;
28802: LD_ADDR_VAR 0 4
28806: PUSH
28807: LD_VAR 0 5
28811: ST_TO_ADDR
// end ;
28812: LD_VAR 0 4
28816: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
28817: LD_INT 0
28819: PPUSH
28820: PPUSH
// if exist_mode then
28821: LD_VAR 0 2
28825: IFFALSE 28850
// unit := CreateCharacter ( prefix & ident ) else
28827: LD_ADDR_VAR 0 5
28831: PUSH
28832: LD_VAR 0 3
28836: PUSH
28837: LD_VAR 0 1
28841: STR
28842: PPUSH
28843: CALL_OW 34
28847: ST_TO_ADDR
28848: GO 28865
// unit := NewCharacter ( ident ) ;
28850: LD_ADDR_VAR 0 5
28854: PUSH
28855: LD_VAR 0 1
28859: PPUSH
28860: CALL_OW 25
28864: ST_TO_ADDR
// result := unit ;
28865: LD_ADDR_VAR 0 4
28869: PUSH
28870: LD_VAR 0 5
28874: ST_TO_ADDR
// end ;
28875: LD_VAR 0 4
28879: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
28880: LD_INT 0
28882: PPUSH
28883: PPUSH
// if not side or not nation then
28884: LD_VAR 0 1
28888: NOT
28889: PUSH
28890: LD_VAR 0 2
28894: NOT
28895: OR
28896: IFFALSE 28900
// exit ;
28898: GO 29668
// case nation of nation_american :
28900: LD_VAR 0 2
28904: PUSH
28905: LD_INT 1
28907: DOUBLE
28908: EQUAL
28909: IFTRUE 28913
28911: GO 29127
28913: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
28914: LD_ADDR_VAR 0 4
28918: PUSH
28919: LD_INT 35
28921: PUSH
28922: LD_INT 45
28924: PUSH
28925: LD_INT 46
28927: PUSH
28928: LD_INT 47
28930: PUSH
28931: LD_INT 82
28933: PUSH
28934: LD_INT 83
28936: PUSH
28937: LD_INT 84
28939: PUSH
28940: LD_INT 85
28942: PUSH
28943: LD_INT 86
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: LD_INT 2
28951: PUSH
28952: LD_INT 6
28954: PUSH
28955: LD_INT 15
28957: PUSH
28958: LD_INT 16
28960: PUSH
28961: LD_INT 7
28963: PUSH
28964: LD_INT 12
28966: PUSH
28967: LD_INT 13
28969: PUSH
28970: LD_INT 10
28972: PUSH
28973: LD_INT 14
28975: PUSH
28976: LD_INT 20
28978: PUSH
28979: LD_INT 21
28981: PUSH
28982: LD_INT 22
28984: PUSH
28985: LD_INT 25
28987: PUSH
28988: LD_INT 32
28990: PUSH
28991: LD_INT 27
28993: PUSH
28994: LD_INT 36
28996: PUSH
28997: LD_INT 69
28999: PUSH
29000: LD_INT 39
29002: PUSH
29003: LD_INT 34
29005: PUSH
29006: LD_INT 40
29008: PUSH
29009: LD_INT 48
29011: PUSH
29012: LD_INT 49
29014: PUSH
29015: LD_INT 50
29017: PUSH
29018: LD_INT 51
29020: PUSH
29021: LD_INT 52
29023: PUSH
29024: LD_INT 53
29026: PUSH
29027: LD_INT 54
29029: PUSH
29030: LD_INT 55
29032: PUSH
29033: LD_INT 56
29035: PUSH
29036: LD_INT 57
29038: PUSH
29039: LD_INT 58
29041: PUSH
29042: LD_INT 59
29044: PUSH
29045: LD_INT 60
29047: PUSH
29048: LD_INT 61
29050: PUSH
29051: LD_INT 62
29053: PUSH
29054: LD_INT 80
29056: PUSH
29057: LD_INT 82
29059: PUSH
29060: LD_INT 83
29062: PUSH
29063: LD_INT 84
29065: PUSH
29066: LD_INT 85
29068: PUSH
29069: LD_INT 86
29071: PUSH
29072: EMPTY
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: LIST
29082: LIST
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: LIST
29098: LIST
29099: LIST
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: ST_TO_ADDR
29125: GO 29592
29127: LD_INT 2
29129: DOUBLE
29130: EQUAL
29131: IFTRUE 29135
29133: GO 29361
29135: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
29136: LD_ADDR_VAR 0 4
29140: PUSH
29141: LD_INT 35
29143: PUSH
29144: LD_INT 45
29146: PUSH
29147: LD_INT 46
29149: PUSH
29150: LD_INT 47
29152: PUSH
29153: LD_INT 82
29155: PUSH
29156: LD_INT 83
29158: PUSH
29159: LD_INT 84
29161: PUSH
29162: LD_INT 85
29164: PUSH
29165: LD_INT 87
29167: PUSH
29168: LD_INT 70
29170: PUSH
29171: LD_INT 1
29173: PUSH
29174: LD_INT 11
29176: PUSH
29177: LD_INT 3
29179: PUSH
29180: LD_INT 4
29182: PUSH
29183: LD_INT 5
29185: PUSH
29186: LD_INT 6
29188: PUSH
29189: LD_INT 15
29191: PUSH
29192: LD_INT 18
29194: PUSH
29195: LD_INT 7
29197: PUSH
29198: LD_INT 17
29200: PUSH
29201: LD_INT 8
29203: PUSH
29204: LD_INT 20
29206: PUSH
29207: LD_INT 21
29209: PUSH
29210: LD_INT 22
29212: PUSH
29213: LD_INT 72
29215: PUSH
29216: LD_INT 26
29218: PUSH
29219: LD_INT 69
29221: PUSH
29222: LD_INT 39
29224: PUSH
29225: LD_INT 40
29227: PUSH
29228: LD_INT 41
29230: PUSH
29231: LD_INT 42
29233: PUSH
29234: LD_INT 43
29236: PUSH
29237: LD_INT 48
29239: PUSH
29240: LD_INT 49
29242: PUSH
29243: LD_INT 50
29245: PUSH
29246: LD_INT 51
29248: PUSH
29249: LD_INT 52
29251: PUSH
29252: LD_INT 53
29254: PUSH
29255: LD_INT 54
29257: PUSH
29258: LD_INT 55
29260: PUSH
29261: LD_INT 56
29263: PUSH
29264: LD_INT 60
29266: PUSH
29267: LD_INT 61
29269: PUSH
29270: LD_INT 62
29272: PUSH
29273: LD_INT 66
29275: PUSH
29276: LD_INT 67
29278: PUSH
29279: LD_INT 68
29281: PUSH
29282: LD_INT 81
29284: PUSH
29285: LD_INT 82
29287: PUSH
29288: LD_INT 83
29290: PUSH
29291: LD_INT 84
29293: PUSH
29294: LD_INT 85
29296: PUSH
29297: LD_INT 87
29299: PUSH
29300: LD_INT 88
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: LIST
29309: LIST
29310: LIST
29311: LIST
29312: LIST
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: LIST
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: LIST
29325: LIST
29326: LIST
29327: LIST
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: ST_TO_ADDR
29359: GO 29592
29361: LD_INT 3
29363: DOUBLE
29364: EQUAL
29365: IFTRUE 29369
29367: GO 29591
29369: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
29370: LD_ADDR_VAR 0 4
29374: PUSH
29375: LD_INT 46
29377: PUSH
29378: LD_INT 47
29380: PUSH
29381: LD_INT 1
29383: PUSH
29384: LD_INT 2
29386: PUSH
29387: LD_INT 82
29389: PUSH
29390: LD_INT 83
29392: PUSH
29393: LD_INT 84
29395: PUSH
29396: LD_INT 85
29398: PUSH
29399: LD_INT 86
29401: PUSH
29402: LD_INT 11
29404: PUSH
29405: LD_INT 9
29407: PUSH
29408: LD_INT 20
29410: PUSH
29411: LD_INT 19
29413: PUSH
29414: LD_INT 21
29416: PUSH
29417: LD_INT 24
29419: PUSH
29420: LD_INT 22
29422: PUSH
29423: LD_INT 25
29425: PUSH
29426: LD_INT 28
29428: PUSH
29429: LD_INT 29
29431: PUSH
29432: LD_INT 30
29434: PUSH
29435: LD_INT 31
29437: PUSH
29438: LD_INT 37
29440: PUSH
29441: LD_INT 38
29443: PUSH
29444: LD_INT 32
29446: PUSH
29447: LD_INT 27
29449: PUSH
29450: LD_INT 33
29452: PUSH
29453: LD_INT 69
29455: PUSH
29456: LD_INT 39
29458: PUSH
29459: LD_INT 34
29461: PUSH
29462: LD_INT 40
29464: PUSH
29465: LD_INT 71
29467: PUSH
29468: LD_INT 23
29470: PUSH
29471: LD_INT 44
29473: PUSH
29474: LD_INT 48
29476: PUSH
29477: LD_INT 49
29479: PUSH
29480: LD_INT 50
29482: PUSH
29483: LD_INT 51
29485: PUSH
29486: LD_INT 52
29488: PUSH
29489: LD_INT 53
29491: PUSH
29492: LD_INT 54
29494: PUSH
29495: LD_INT 55
29497: PUSH
29498: LD_INT 56
29500: PUSH
29501: LD_INT 57
29503: PUSH
29504: LD_INT 58
29506: PUSH
29507: LD_INT 59
29509: PUSH
29510: LD_INT 63
29512: PUSH
29513: LD_INT 64
29515: PUSH
29516: LD_INT 65
29518: PUSH
29519: LD_INT 82
29521: PUSH
29522: LD_INT 83
29524: PUSH
29525: LD_INT 84
29527: PUSH
29528: LD_INT 85
29530: PUSH
29531: LD_INT 86
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: LIST
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: LIST
29578: LIST
29579: LIST
29580: LIST
29581: LIST
29582: LIST
29583: LIST
29584: LIST
29585: LIST
29586: LIST
29587: LIST
29588: ST_TO_ADDR
29589: GO 29592
29591: POP
// if state > - 1 and state < 3 then
29592: LD_VAR 0 3
29596: PUSH
29597: LD_INT 1
29599: NEG
29600: GREATER
29601: PUSH
29602: LD_VAR 0 3
29606: PUSH
29607: LD_INT 3
29609: LESS
29610: AND
29611: IFFALSE 29668
// for i in result do
29613: LD_ADDR_VAR 0 5
29617: PUSH
29618: LD_VAR 0 4
29622: PUSH
29623: FOR_IN
29624: IFFALSE 29666
// if GetTech ( i , side ) <> state then
29626: LD_VAR 0 5
29630: PPUSH
29631: LD_VAR 0 1
29635: PPUSH
29636: CALL_OW 321
29640: PUSH
29641: LD_VAR 0 3
29645: NONEQUAL
29646: IFFALSE 29664
// result := result diff i ;
29648: LD_ADDR_VAR 0 4
29652: PUSH
29653: LD_VAR 0 4
29657: PUSH
29658: LD_VAR 0 5
29662: DIFF
29663: ST_TO_ADDR
29664: GO 29623
29666: POP
29667: POP
// end ;
29668: LD_VAR 0 4
29672: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
29673: LD_INT 0
29675: PPUSH
29676: PPUSH
29677: PPUSH
// result := true ;
29678: LD_ADDR_VAR 0 3
29682: PUSH
29683: LD_INT 1
29685: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
29686: LD_ADDR_VAR 0 5
29690: PUSH
29691: LD_VAR 0 2
29695: PPUSH
29696: CALL_OW 480
29700: ST_TO_ADDR
// if not tmp then
29701: LD_VAR 0 5
29705: NOT
29706: IFFALSE 29710
// exit ;
29708: GO 29759
// for i in tmp do
29710: LD_ADDR_VAR 0 4
29714: PUSH
29715: LD_VAR 0 5
29719: PUSH
29720: FOR_IN
29721: IFFALSE 29757
// if GetTech ( i , side ) <> state_researched then
29723: LD_VAR 0 4
29727: PPUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 321
29737: PUSH
29738: LD_INT 2
29740: NONEQUAL
29741: IFFALSE 29755
// begin result := false ;
29743: LD_ADDR_VAR 0 3
29747: PUSH
29748: LD_INT 0
29750: ST_TO_ADDR
// exit ;
29751: POP
29752: POP
29753: GO 29759
// end ;
29755: GO 29720
29757: POP
29758: POP
// end ;
29759: LD_VAR 0 3
29763: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
29764: LD_INT 0
29766: PPUSH
29767: PPUSH
29768: PPUSH
29769: PPUSH
29770: PPUSH
29771: PPUSH
29772: PPUSH
29773: PPUSH
29774: PPUSH
29775: PPUSH
29776: PPUSH
29777: PPUSH
29778: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
29779: LD_VAR 0 1
29783: NOT
29784: PUSH
29785: LD_VAR 0 1
29789: PPUSH
29790: CALL_OW 257
29794: PUSH
29795: LD_INT 9
29797: NONEQUAL
29798: OR
29799: IFFALSE 29803
// exit ;
29801: GO 30376
// side := GetSide ( unit ) ;
29803: LD_ADDR_VAR 0 9
29807: PUSH
29808: LD_VAR 0 1
29812: PPUSH
29813: CALL_OW 255
29817: ST_TO_ADDR
// tech_space := tech_spacanom ;
29818: LD_ADDR_VAR 0 12
29822: PUSH
29823: LD_INT 29
29825: ST_TO_ADDR
// tech_time := tech_taurad ;
29826: LD_ADDR_VAR 0 13
29830: PUSH
29831: LD_INT 28
29833: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
29834: LD_ADDR_VAR 0 11
29838: PUSH
29839: LD_VAR 0 1
29843: PPUSH
29844: CALL_OW 310
29848: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
29849: LD_VAR 0 11
29853: PPUSH
29854: CALL_OW 247
29858: PUSH
29859: LD_INT 2
29861: EQUAL
29862: IFFALSE 29866
// exit ;
29864: GO 30376
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29866: LD_ADDR_VAR 0 8
29870: PUSH
29871: LD_INT 81
29873: PUSH
29874: LD_VAR 0 9
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 3
29885: PUSH
29886: LD_INT 21
29888: PUSH
29889: LD_INT 3
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PPUSH
29904: CALL_OW 69
29908: ST_TO_ADDR
// if not tmp then
29909: LD_VAR 0 8
29913: NOT
29914: IFFALSE 29918
// exit ;
29916: GO 30376
// if in_unit then
29918: LD_VAR 0 11
29922: IFFALSE 29946
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
29924: LD_ADDR_VAR 0 10
29928: PUSH
29929: LD_VAR 0 8
29933: PPUSH
29934: LD_VAR 0 11
29938: PPUSH
29939: CALL_OW 74
29943: ST_TO_ADDR
29944: GO 29966
// enemy := NearestUnitToUnit ( tmp , unit ) ;
29946: LD_ADDR_VAR 0 10
29950: PUSH
29951: LD_VAR 0 8
29955: PPUSH
29956: LD_VAR 0 1
29960: PPUSH
29961: CALL_OW 74
29965: ST_TO_ADDR
// if not enemy then
29966: LD_VAR 0 10
29970: NOT
29971: IFFALSE 29975
// exit ;
29973: GO 30376
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
29975: LD_VAR 0 11
29979: PUSH
29980: LD_VAR 0 11
29984: PPUSH
29985: LD_VAR 0 10
29989: PPUSH
29990: CALL_OW 296
29994: PUSH
29995: LD_INT 13
29997: GREATER
29998: AND
29999: PUSH
30000: LD_VAR 0 1
30004: PPUSH
30005: LD_VAR 0 10
30009: PPUSH
30010: CALL_OW 296
30014: PUSH
30015: LD_INT 12
30017: GREATER
30018: OR
30019: IFFALSE 30023
// exit ;
30021: GO 30376
// missile := [ 1 ] ;
30023: LD_ADDR_VAR 0 14
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: ST_TO_ADDR
// if Researched ( side , tech_space ) then
30034: LD_VAR 0 9
30038: PPUSH
30039: LD_VAR 0 12
30043: PPUSH
30044: CALL_OW 325
30048: IFFALSE 30077
// missile := Replace ( missile , missile + 1 , 2 ) ;
30050: LD_ADDR_VAR 0 14
30054: PUSH
30055: LD_VAR 0 14
30059: PPUSH
30060: LD_VAR 0 14
30064: PUSH
30065: LD_INT 1
30067: PLUS
30068: PPUSH
30069: LD_INT 2
30071: PPUSH
30072: CALL_OW 1
30076: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
30077: LD_VAR 0 9
30081: PPUSH
30082: LD_VAR 0 13
30086: PPUSH
30087: CALL_OW 325
30091: PUSH
30092: LD_VAR 0 10
30096: PPUSH
30097: CALL_OW 255
30101: PPUSH
30102: LD_VAR 0 13
30106: PPUSH
30107: CALL_OW 325
30111: NOT
30112: AND
30113: IFFALSE 30142
// missile := Replace ( missile , missile + 1 , 3 ) ;
30115: LD_ADDR_VAR 0 14
30119: PUSH
30120: LD_VAR 0 14
30124: PPUSH
30125: LD_VAR 0 14
30129: PUSH
30130: LD_INT 1
30132: PLUS
30133: PPUSH
30134: LD_INT 3
30136: PPUSH
30137: CALL_OW 1
30141: ST_TO_ADDR
// if missile < 2 then
30142: LD_VAR 0 14
30146: PUSH
30147: LD_INT 2
30149: LESS
30150: IFFALSE 30154
// exit ;
30152: GO 30376
// x := GetX ( enemy ) ;
30154: LD_ADDR_VAR 0 4
30158: PUSH
30159: LD_VAR 0 10
30163: PPUSH
30164: CALL_OW 250
30168: ST_TO_ADDR
// y := GetY ( enemy ) ;
30169: LD_ADDR_VAR 0 5
30173: PUSH
30174: LD_VAR 0 10
30178: PPUSH
30179: CALL_OW 251
30183: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
30184: LD_ADDR_VAR 0 6
30188: PUSH
30189: LD_VAR 0 4
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PPUSH
30198: LD_INT 1
30200: PPUSH
30201: CALL_OW 12
30205: PLUS
30206: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
30207: LD_ADDR_VAR 0 7
30211: PUSH
30212: LD_VAR 0 5
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PPUSH
30221: LD_INT 1
30223: PPUSH
30224: CALL_OW 12
30228: PLUS
30229: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30230: LD_VAR 0 6
30234: PPUSH
30235: LD_VAR 0 7
30239: PPUSH
30240: CALL_OW 488
30244: NOT
30245: IFFALSE 30267
// begin _x := x ;
30247: LD_ADDR_VAR 0 6
30251: PUSH
30252: LD_VAR 0 4
30256: ST_TO_ADDR
// _y := y ;
30257: LD_ADDR_VAR 0 7
30261: PUSH
30262: LD_VAR 0 5
30266: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
30267: LD_ADDR_VAR 0 3
30271: PUSH
30272: LD_INT 1
30274: PPUSH
30275: LD_VAR 0 14
30279: PPUSH
30280: CALL_OW 12
30284: ST_TO_ADDR
// case i of 1 :
30285: LD_VAR 0 3
30289: PUSH
30290: LD_INT 1
30292: DOUBLE
30293: EQUAL
30294: IFTRUE 30298
30296: GO 30315
30298: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
30299: LD_VAR 0 1
30303: PPUSH
30304: LD_VAR 0 10
30308: PPUSH
30309: CALL_OW 115
30313: GO 30376
30315: LD_INT 2
30317: DOUBLE
30318: EQUAL
30319: IFTRUE 30323
30321: GO 30345
30323: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
30324: LD_VAR 0 1
30328: PPUSH
30329: LD_VAR 0 6
30333: PPUSH
30334: LD_VAR 0 7
30338: PPUSH
30339: CALL_OW 153
30343: GO 30376
30345: LD_INT 3
30347: DOUBLE
30348: EQUAL
30349: IFTRUE 30353
30351: GO 30375
30353: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
30354: LD_VAR 0 1
30358: PPUSH
30359: LD_VAR 0 6
30363: PPUSH
30364: LD_VAR 0 7
30368: PPUSH
30369: CALL_OW 154
30373: GO 30376
30375: POP
// end ;
30376: LD_VAR 0 2
30380: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
30381: LD_INT 0
30383: PPUSH
30384: PPUSH
30385: PPUSH
30386: PPUSH
30387: PPUSH
30388: PPUSH
// if not unit or not building then
30389: LD_VAR 0 1
30393: NOT
30394: PUSH
30395: LD_VAR 0 2
30399: NOT
30400: OR
30401: IFFALSE 30405
// exit ;
30403: GO 30563
// x := GetX ( building ) ;
30405: LD_ADDR_VAR 0 5
30409: PUSH
30410: LD_VAR 0 2
30414: PPUSH
30415: CALL_OW 250
30419: ST_TO_ADDR
// y := GetY ( building ) ;
30420: LD_ADDR_VAR 0 6
30424: PUSH
30425: LD_VAR 0 2
30429: PPUSH
30430: CALL_OW 251
30434: ST_TO_ADDR
// for i = 0 to 5 do
30435: LD_ADDR_VAR 0 4
30439: PUSH
30440: DOUBLE
30441: LD_INT 0
30443: DEC
30444: ST_TO_ADDR
30445: LD_INT 5
30447: PUSH
30448: FOR_TO
30449: IFFALSE 30561
// begin _x := ShiftX ( x , i , 3 ) ;
30451: LD_ADDR_VAR 0 7
30455: PUSH
30456: LD_VAR 0 5
30460: PPUSH
30461: LD_VAR 0 4
30465: PPUSH
30466: LD_INT 3
30468: PPUSH
30469: CALL_OW 272
30473: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
30474: LD_ADDR_VAR 0 8
30478: PUSH
30479: LD_VAR 0 6
30483: PPUSH
30484: LD_VAR 0 4
30488: PPUSH
30489: LD_INT 3
30491: PPUSH
30492: CALL_OW 273
30496: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30497: LD_VAR 0 7
30501: PPUSH
30502: LD_VAR 0 8
30506: PPUSH
30507: CALL_OW 488
30511: NOT
30512: IFFALSE 30516
// continue ;
30514: GO 30448
// if HexInfo ( _x , _y ) = 0 then
30516: LD_VAR 0 7
30520: PPUSH
30521: LD_VAR 0 8
30525: PPUSH
30526: CALL_OW 428
30530: PUSH
30531: LD_INT 0
30533: EQUAL
30534: IFFALSE 30559
// begin ComMoveXY ( unit , _x , _y ) ;
30536: LD_VAR 0 1
30540: PPUSH
30541: LD_VAR 0 7
30545: PPUSH
30546: LD_VAR 0 8
30550: PPUSH
30551: CALL_OW 111
// exit ;
30555: POP
30556: POP
30557: GO 30563
// end ; end ;
30559: GO 30448
30561: POP
30562: POP
// end ;
30563: LD_VAR 0 3
30567: RET
// export function ScanBase ( side , base_area ) ; begin
30568: LD_INT 0
30570: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
30571: LD_ADDR_VAR 0 3
30575: PUSH
30576: LD_VAR 0 2
30580: PPUSH
30581: LD_INT 81
30583: PUSH
30584: LD_VAR 0 1
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: PPUSH
30593: CALL_OW 70
30597: ST_TO_ADDR
// end ;
30598: LD_VAR 0 3
30602: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
30603: LD_INT 0
30605: PPUSH
30606: PPUSH
30607: PPUSH
30608: PPUSH
// result := false ;
30609: LD_ADDR_VAR 0 2
30613: PUSH
30614: LD_INT 0
30616: ST_TO_ADDR
// side := GetSide ( unit ) ;
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_VAR 0 1
30626: PPUSH
30627: CALL_OW 255
30631: ST_TO_ADDR
// nat := GetNation ( unit ) ;
30632: LD_ADDR_VAR 0 4
30636: PUSH
30637: LD_VAR 0 1
30641: PPUSH
30642: CALL_OW 248
30646: ST_TO_ADDR
// case nat of 1 :
30647: LD_VAR 0 4
30651: PUSH
30652: LD_INT 1
30654: DOUBLE
30655: EQUAL
30656: IFTRUE 30660
30658: GO 30671
30660: POP
// tech := tech_lassight ; 2 :
30661: LD_ADDR_VAR 0 5
30665: PUSH
30666: LD_INT 12
30668: ST_TO_ADDR
30669: GO 30710
30671: LD_INT 2
30673: DOUBLE
30674: EQUAL
30675: IFTRUE 30679
30677: GO 30690
30679: POP
// tech := tech_mortar ; 3 :
30680: LD_ADDR_VAR 0 5
30684: PUSH
30685: LD_INT 41
30687: ST_TO_ADDR
30688: GO 30710
30690: LD_INT 3
30692: DOUBLE
30693: EQUAL
30694: IFTRUE 30698
30696: GO 30709
30698: POP
// tech := tech_bazooka ; end ;
30699: LD_ADDR_VAR 0 5
30703: PUSH
30704: LD_INT 44
30706: ST_TO_ADDR
30707: GO 30710
30709: POP
// if Researched ( side , tech ) then
30710: LD_VAR 0 3
30714: PPUSH
30715: LD_VAR 0 5
30719: PPUSH
30720: CALL_OW 325
30724: IFFALSE 30751
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
30726: LD_ADDR_VAR 0 2
30730: PUSH
30731: LD_INT 5
30733: PUSH
30734: LD_INT 8
30736: PUSH
30737: LD_INT 9
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: PUSH
30745: LD_VAR 0 4
30749: ARRAY
30750: ST_TO_ADDR
// end ;
30751: LD_VAR 0 2
30755: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
30756: LD_INT 0
30758: PPUSH
30759: PPUSH
30760: PPUSH
// if not mines then
30761: LD_VAR 0 2
30765: NOT
30766: IFFALSE 30770
// exit ;
30768: GO 30914
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30770: LD_ADDR_VAR 0 5
30774: PUSH
30775: LD_INT 81
30777: PUSH
30778: LD_VAR 0 1
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 3
30789: PUSH
30790: LD_INT 21
30792: PUSH
30793: LD_INT 3
30795: PUSH
30796: EMPTY
30797: LIST
30798: LIST
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PPUSH
30808: CALL_OW 69
30812: ST_TO_ADDR
// for i in mines do
30813: LD_ADDR_VAR 0 4
30817: PUSH
30818: LD_VAR 0 2
30822: PUSH
30823: FOR_IN
30824: IFFALSE 30912
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
30826: LD_VAR 0 4
30830: PUSH
30831: LD_INT 1
30833: ARRAY
30834: PPUSH
30835: LD_VAR 0 4
30839: PUSH
30840: LD_INT 2
30842: ARRAY
30843: PPUSH
30844: CALL_OW 458
30848: NOT
30849: IFFALSE 30853
// continue ;
30851: GO 30823
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
30853: LD_VAR 0 4
30857: PUSH
30858: LD_INT 1
30860: ARRAY
30861: PPUSH
30862: LD_VAR 0 4
30866: PUSH
30867: LD_INT 2
30869: ARRAY
30870: PPUSH
30871: CALL_OW 428
30875: PUSH
30876: LD_VAR 0 5
30880: IN
30881: IFFALSE 30910
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
30883: LD_VAR 0 4
30887: PUSH
30888: LD_INT 1
30890: ARRAY
30891: PPUSH
30892: LD_VAR 0 4
30896: PUSH
30897: LD_INT 2
30899: ARRAY
30900: PPUSH
30901: LD_VAR 0 1
30905: PPUSH
30906: CALL_OW 456
// end ;
30910: GO 30823
30912: POP
30913: POP
// end ;
30914: LD_VAR 0 3
30918: RET
// export function Count ( array ) ; begin
30919: LD_INT 0
30921: PPUSH
// result := array + 0 ;
30922: LD_ADDR_VAR 0 2
30926: PUSH
30927: LD_VAR 0 1
30931: PUSH
30932: LD_INT 0
30934: PLUS
30935: ST_TO_ADDR
// end ;
30936: LD_VAR 0 2
30940: RET
// export function IsEmpty ( building ) ; begin
30941: LD_INT 0
30943: PPUSH
// if not building then
30944: LD_VAR 0 1
30948: NOT
30949: IFFALSE 30953
// exit ;
30951: GO 30996
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
30953: LD_ADDR_VAR 0 2
30957: PUSH
30958: LD_VAR 0 1
30962: PUSH
30963: LD_INT 22
30965: PUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 255
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 58
30982: PUSH
30983: EMPTY
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PPUSH
30990: CALL_OW 69
30994: IN
30995: ST_TO_ADDR
// end ;
30996: LD_VAR 0 2
31000: RET
// export function IsNotFull ( building ) ; var places ; begin
31001: LD_INT 0
31003: PPUSH
31004: PPUSH
// if not building then
31005: LD_VAR 0 1
31009: NOT
31010: IFFALSE 31014
// exit ;
31012: GO 31042
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
31014: LD_ADDR_VAR 0 2
31018: PUSH
31019: LD_VAR 0 1
31023: PPUSH
31024: LD_INT 3
31026: PUSH
31027: LD_INT 62
31029: PUSH
31030: EMPTY
31031: LIST
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PPUSH
31037: CALL_OW 72
31041: ST_TO_ADDR
// end ;
31042: LD_VAR 0 2
31046: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
31047: LD_INT 0
31049: PPUSH
31050: PPUSH
31051: PPUSH
31052: PPUSH
// tmp := [ ] ;
31053: LD_ADDR_VAR 0 3
31057: PUSH
31058: EMPTY
31059: ST_TO_ADDR
// list := [ ] ;
31060: LD_ADDR_VAR 0 5
31064: PUSH
31065: EMPTY
31066: ST_TO_ADDR
// for i = 16 to 25 do
31067: LD_ADDR_VAR 0 4
31071: PUSH
31072: DOUBLE
31073: LD_INT 16
31075: DEC
31076: ST_TO_ADDR
31077: LD_INT 25
31079: PUSH
31080: FOR_TO
31081: IFFALSE 31154
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
31083: LD_ADDR_VAR 0 3
31087: PUSH
31088: LD_VAR 0 3
31092: PUSH
31093: LD_INT 22
31095: PUSH
31096: LD_VAR 0 1
31100: PPUSH
31101: CALL_OW 255
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 91
31112: PUSH
31113: LD_VAR 0 1
31117: PUSH
31118: LD_INT 6
31120: PUSH
31121: EMPTY
31122: LIST
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 30
31128: PUSH
31129: LD_VAR 0 4
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: LIST
31142: PUSH
31143: EMPTY
31144: LIST
31145: PPUSH
31146: CALL_OW 69
31150: ADD
31151: ST_TO_ADDR
31152: GO 31080
31154: POP
31155: POP
// for i = 1 to tmp do
31156: LD_ADDR_VAR 0 4
31160: PUSH
31161: DOUBLE
31162: LD_INT 1
31164: DEC
31165: ST_TO_ADDR
31166: LD_VAR 0 3
31170: PUSH
31171: FOR_TO
31172: IFFALSE 31260
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
31174: LD_ADDR_VAR 0 5
31178: PUSH
31179: LD_VAR 0 5
31183: PUSH
31184: LD_VAR 0 3
31188: PUSH
31189: LD_VAR 0 4
31193: ARRAY
31194: PPUSH
31195: CALL_OW 266
31199: PUSH
31200: LD_VAR 0 3
31204: PUSH
31205: LD_VAR 0 4
31209: ARRAY
31210: PPUSH
31211: CALL_OW 250
31215: PUSH
31216: LD_VAR 0 3
31220: PUSH
31221: LD_VAR 0 4
31225: ARRAY
31226: PPUSH
31227: CALL_OW 251
31231: PUSH
31232: LD_VAR 0 3
31236: PUSH
31237: LD_VAR 0 4
31241: ARRAY
31242: PPUSH
31243: CALL_OW 254
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: PUSH
31254: EMPTY
31255: LIST
31256: ADD
31257: ST_TO_ADDR
31258: GO 31171
31260: POP
31261: POP
// result := list ;
31262: LD_ADDR_VAR 0 2
31266: PUSH
31267: LD_VAR 0 5
31271: ST_TO_ADDR
// end ;
31272: LD_VAR 0 2
31276: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
31277: LD_INT 0
31279: PPUSH
31280: PPUSH
31281: PPUSH
31282: PPUSH
31283: PPUSH
31284: PPUSH
31285: PPUSH
// if not factory then
31286: LD_VAR 0 1
31290: NOT
31291: IFFALSE 31295
// exit ;
31293: GO 31888
// if control = control_apeman then
31295: LD_VAR 0 4
31299: PUSH
31300: LD_INT 5
31302: EQUAL
31303: IFFALSE 31412
// begin tmp := UnitsInside ( factory ) ;
31305: LD_ADDR_VAR 0 8
31309: PUSH
31310: LD_VAR 0 1
31314: PPUSH
31315: CALL_OW 313
31319: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
31320: LD_VAR 0 8
31324: PPUSH
31325: LD_INT 25
31327: PUSH
31328: LD_INT 12
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PPUSH
31335: CALL_OW 72
31339: NOT
31340: IFFALSE 31350
// control := control_manual ;
31342: LD_ADDR_VAR 0 4
31346: PUSH
31347: LD_INT 1
31349: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
31350: LD_ADDR_VAR 0 8
31354: PUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL 31047 0 1
31364: ST_TO_ADDR
// if tmp then
31365: LD_VAR 0 8
31369: IFFALSE 31412
// begin for i in tmp do
31371: LD_ADDR_VAR 0 7
31375: PUSH
31376: LD_VAR 0 8
31380: PUSH
31381: FOR_IN
31382: IFFALSE 31410
// if i [ 1 ] = b_ext_radio then
31384: LD_VAR 0 7
31388: PUSH
31389: LD_INT 1
31391: ARRAY
31392: PUSH
31393: LD_INT 22
31395: EQUAL
31396: IFFALSE 31408
// begin control := control_remote ;
31398: LD_ADDR_VAR 0 4
31402: PUSH
31403: LD_INT 2
31405: ST_TO_ADDR
// break ;
31406: GO 31410
// end ;
31408: GO 31381
31410: POP
31411: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31412: LD_VAR 0 1
31416: PPUSH
31417: LD_VAR 0 2
31421: PPUSH
31422: LD_VAR 0 3
31426: PPUSH
31427: LD_VAR 0 4
31431: PPUSH
31432: LD_VAR 0 5
31436: PPUSH
31437: CALL_OW 448
31441: IFFALSE 31476
// begin result := [ chassis , engine , control , weapon ] ;
31443: LD_ADDR_VAR 0 6
31447: PUSH
31448: LD_VAR 0 2
31452: PUSH
31453: LD_VAR 0 3
31457: PUSH
31458: LD_VAR 0 4
31462: PUSH
31463: LD_VAR 0 5
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: ST_TO_ADDR
// exit ;
31474: GO 31888
// end ; _chassis := AvailableChassisList ( factory ) ;
31476: LD_ADDR_VAR 0 9
31480: PUSH
31481: LD_VAR 0 1
31485: PPUSH
31486: CALL_OW 475
31490: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
31491: LD_ADDR_VAR 0 11
31495: PUSH
31496: LD_VAR 0 1
31500: PPUSH
31501: CALL_OW 476
31505: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
31506: LD_ADDR_VAR 0 12
31510: PUSH
31511: LD_VAR 0 1
31515: PPUSH
31516: CALL_OW 477
31520: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
31521: LD_ADDR_VAR 0 10
31525: PUSH
31526: LD_VAR 0 1
31530: PPUSH
31531: CALL_OW 478
31535: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
31536: LD_VAR 0 9
31540: NOT
31541: PUSH
31542: LD_VAR 0 11
31546: NOT
31547: OR
31548: PUSH
31549: LD_VAR 0 12
31553: NOT
31554: OR
31555: PUSH
31556: LD_VAR 0 10
31560: NOT
31561: OR
31562: IFFALSE 31597
// begin result := [ chassis , engine , control , weapon ] ;
31564: LD_ADDR_VAR 0 6
31568: PUSH
31569: LD_VAR 0 2
31573: PUSH
31574: LD_VAR 0 3
31578: PUSH
31579: LD_VAR 0 4
31583: PUSH
31584: LD_VAR 0 5
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: LIST
31593: LIST
31594: ST_TO_ADDR
// exit ;
31595: GO 31888
// end ; if not chassis in _chassis then
31597: LD_VAR 0 2
31601: PUSH
31602: LD_VAR 0 9
31606: IN
31607: NOT
31608: IFFALSE 31634
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
31610: LD_ADDR_VAR 0 2
31614: PUSH
31615: LD_VAR 0 9
31619: PUSH
31620: LD_INT 1
31622: PPUSH
31623: LD_VAR 0 9
31627: PPUSH
31628: CALL_OW 12
31632: ARRAY
31633: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
31634: LD_VAR 0 2
31638: PPUSH
31639: LD_VAR 0 3
31643: PPUSH
31644: CALL 31893 0 2
31648: NOT
31649: IFFALSE 31708
// repeat engine := _engine [ 1 ] ;
31651: LD_ADDR_VAR 0 3
31655: PUSH
31656: LD_VAR 0 11
31660: PUSH
31661: LD_INT 1
31663: ARRAY
31664: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
31665: LD_ADDR_VAR 0 11
31669: PUSH
31670: LD_VAR 0 11
31674: PPUSH
31675: LD_INT 1
31677: PPUSH
31678: CALL_OW 3
31682: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
31683: LD_VAR 0 2
31687: PPUSH
31688: LD_VAR 0 3
31692: PPUSH
31693: CALL 31893 0 2
31697: PUSH
31698: LD_VAR 0 11
31702: PUSH
31703: EMPTY
31704: EQUAL
31705: OR
31706: IFFALSE 31651
// if not control in _control then
31708: LD_VAR 0 4
31712: PUSH
31713: LD_VAR 0 12
31717: IN
31718: NOT
31719: IFFALSE 31745
// control := _control [ rand ( 1 , _control ) ] ;
31721: LD_ADDR_VAR 0 4
31725: PUSH
31726: LD_VAR 0 12
31730: PUSH
31731: LD_INT 1
31733: PPUSH
31734: LD_VAR 0 12
31738: PPUSH
31739: CALL_OW 12
31743: ARRAY
31744: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
31745: LD_VAR 0 2
31749: PPUSH
31750: LD_VAR 0 5
31754: PPUSH
31755: CALL 32113 0 2
31759: NOT
31760: IFFALSE 31819
// repeat weapon := _weapon [ 1 ] ;
31762: LD_ADDR_VAR 0 5
31766: PUSH
31767: LD_VAR 0 10
31771: PUSH
31772: LD_INT 1
31774: ARRAY
31775: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
31776: LD_ADDR_VAR 0 10
31780: PUSH
31781: LD_VAR 0 10
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 3
31793: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
31794: LD_VAR 0 2
31798: PPUSH
31799: LD_VAR 0 5
31803: PPUSH
31804: CALL 32113 0 2
31808: PUSH
31809: LD_VAR 0 10
31813: PUSH
31814: EMPTY
31815: EQUAL
31816: OR
31817: IFFALSE 31762
// result := [ ] ;
31819: LD_ADDR_VAR 0 6
31823: PUSH
31824: EMPTY
31825: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
31826: LD_VAR 0 1
31830: PPUSH
31831: LD_VAR 0 2
31835: PPUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: LD_VAR 0 4
31845: PPUSH
31846: LD_VAR 0 5
31850: PPUSH
31851: CALL_OW 448
31855: IFFALSE 31888
// result := [ chassis , engine , control , weapon ] ;
31857: LD_ADDR_VAR 0 6
31861: PUSH
31862: LD_VAR 0 2
31866: PUSH
31867: LD_VAR 0 3
31871: PUSH
31872: LD_VAR 0 4
31876: PUSH
31877: LD_VAR 0 5
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: ST_TO_ADDR
// end ;
31888: LD_VAR 0 6
31892: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
31893: LD_INT 0
31895: PPUSH
// if not chassis or not engine then
31896: LD_VAR 0 1
31900: NOT
31901: PUSH
31902: LD_VAR 0 2
31906: NOT
31907: OR
31908: IFFALSE 31912
// exit ;
31910: GO 32108
// case engine of engine_solar :
31912: LD_VAR 0 2
31916: PUSH
31917: LD_INT 2
31919: DOUBLE
31920: EQUAL
31921: IFTRUE 31925
31923: GO 31963
31925: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
31926: LD_ADDR_VAR 0 3
31930: PUSH
31931: LD_INT 11
31933: PUSH
31934: LD_INT 12
31936: PUSH
31937: LD_INT 13
31939: PUSH
31940: LD_INT 14
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: LD_INT 2
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: ST_TO_ADDR
31961: GO 32092
31963: LD_INT 1
31965: DOUBLE
31966: EQUAL
31967: IFTRUE 31971
31969: GO 32033
31971: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
31972: LD_ADDR_VAR 0 3
31976: PUSH
31977: LD_INT 11
31979: PUSH
31980: LD_INT 12
31982: PUSH
31983: LD_INT 13
31985: PUSH
31986: LD_INT 14
31988: PUSH
31989: LD_INT 1
31991: PUSH
31992: LD_INT 2
31994: PUSH
31995: LD_INT 3
31997: PUSH
31998: LD_INT 4
32000: PUSH
32001: LD_INT 5
32003: PUSH
32004: LD_INT 21
32006: PUSH
32007: LD_INT 23
32009: PUSH
32010: LD_INT 22
32012: PUSH
32013: LD_INT 24
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: ST_TO_ADDR
32031: GO 32092
32033: LD_INT 3
32035: DOUBLE
32036: EQUAL
32037: IFTRUE 32041
32039: GO 32091
32041: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
32042: LD_ADDR_VAR 0 3
32046: PUSH
32047: LD_INT 13
32049: PUSH
32050: LD_INT 14
32052: PUSH
32053: LD_INT 2
32055: PUSH
32056: LD_INT 3
32058: PUSH
32059: LD_INT 4
32061: PUSH
32062: LD_INT 5
32064: PUSH
32065: LD_INT 21
32067: PUSH
32068: LD_INT 22
32070: PUSH
32071: LD_INT 23
32073: PUSH
32074: LD_INT 24
32076: PUSH
32077: EMPTY
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: LIST
32088: ST_TO_ADDR
32089: GO 32092
32091: POP
// result := ( chassis in result ) ;
32092: LD_ADDR_VAR 0 3
32096: PUSH
32097: LD_VAR 0 1
32101: PUSH
32102: LD_VAR 0 3
32106: IN
32107: ST_TO_ADDR
// end ;
32108: LD_VAR 0 3
32112: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
32113: LD_INT 0
32115: PPUSH
// if not chassis or not weapon then
32116: LD_VAR 0 1
32120: NOT
32121: PUSH
32122: LD_VAR 0 2
32126: NOT
32127: OR
32128: IFFALSE 32132
// exit ;
32130: GO 33192
// case weapon of us_machine_gun :
32132: LD_VAR 0 2
32136: PUSH
32137: LD_INT 2
32139: DOUBLE
32140: EQUAL
32141: IFTRUE 32145
32143: GO 32175
32145: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
32146: LD_ADDR_VAR 0 3
32150: PUSH
32151: LD_INT 1
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: LD_INT 3
32159: PUSH
32160: LD_INT 4
32162: PUSH
32163: LD_INT 5
32165: PUSH
32166: EMPTY
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: ST_TO_ADDR
32173: GO 33176
32175: LD_INT 3
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32213
32183: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
32184: LD_ADDR_VAR 0 3
32188: PUSH
32189: LD_INT 1
32191: PUSH
32192: LD_INT 2
32194: PUSH
32195: LD_INT 3
32197: PUSH
32198: LD_INT 4
32200: PUSH
32201: LD_INT 5
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: ST_TO_ADDR
32211: GO 33176
32213: LD_INT 11
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32251
32221: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
32222: LD_ADDR_VAR 0 3
32226: PUSH
32227: LD_INT 1
32229: PUSH
32230: LD_INT 2
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: LD_INT 4
32238: PUSH
32239: LD_INT 5
32241: PUSH
32242: EMPTY
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: ST_TO_ADDR
32249: GO 33176
32251: LD_INT 4
32253: DOUBLE
32254: EQUAL
32255: IFTRUE 32259
32257: GO 32285
32259: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
32260: LD_ADDR_VAR 0 3
32264: PUSH
32265: LD_INT 2
32267: PUSH
32268: LD_INT 3
32270: PUSH
32271: LD_INT 4
32273: PUSH
32274: LD_INT 5
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: ST_TO_ADDR
32283: GO 33176
32285: LD_INT 5
32287: DOUBLE
32288: EQUAL
32289: IFTRUE 32293
32291: GO 32319
32293: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
32294: LD_ADDR_VAR 0 3
32298: PUSH
32299: LD_INT 2
32301: PUSH
32302: LD_INT 3
32304: PUSH
32305: LD_INT 4
32307: PUSH
32308: LD_INT 5
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: ST_TO_ADDR
32317: GO 33176
32319: LD_INT 9
32321: DOUBLE
32322: EQUAL
32323: IFTRUE 32327
32325: GO 32353
32327: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
32328: LD_ADDR_VAR 0 3
32332: PUSH
32333: LD_INT 2
32335: PUSH
32336: LD_INT 3
32338: PUSH
32339: LD_INT 4
32341: PUSH
32342: LD_INT 5
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: ST_TO_ADDR
32351: GO 33176
32353: LD_INT 7
32355: DOUBLE
32356: EQUAL
32357: IFTRUE 32361
32359: GO 32387
32361: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
32362: LD_ADDR_VAR 0 3
32366: PUSH
32367: LD_INT 2
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: LD_INT 4
32375: PUSH
32376: LD_INT 5
32378: PUSH
32379: EMPTY
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: ST_TO_ADDR
32385: GO 33176
32387: LD_INT 12
32389: DOUBLE
32390: EQUAL
32391: IFTRUE 32395
32393: GO 32421
32395: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
32396: LD_ADDR_VAR 0 3
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: LD_INT 3
32406: PUSH
32407: LD_INT 4
32409: PUSH
32410: LD_INT 5
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: ST_TO_ADDR
32419: GO 33176
32421: LD_INT 13
32423: DOUBLE
32424: EQUAL
32425: IFTRUE 32429
32427: GO 32455
32429: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: LD_INT 4
32443: PUSH
32444: LD_INT 5
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: ST_TO_ADDR
32453: GO 33176
32455: LD_INT 14
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32481
32463: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
32464: LD_ADDR_VAR 0 3
32468: PUSH
32469: LD_INT 4
32471: PUSH
32472: LD_INT 5
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: ST_TO_ADDR
32479: GO 33176
32481: LD_INT 6
32483: DOUBLE
32484: EQUAL
32485: IFTRUE 32489
32487: GO 32507
32489: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
32490: LD_ADDR_VAR 0 3
32494: PUSH
32495: LD_INT 4
32497: PUSH
32498: LD_INT 5
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: ST_TO_ADDR
32505: GO 33176
32507: LD_INT 10
32509: DOUBLE
32510: EQUAL
32511: IFTRUE 32515
32513: GO 32533
32515: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
32516: LD_ADDR_VAR 0 3
32520: PUSH
32521: LD_INT 4
32523: PUSH
32524: LD_INT 5
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: ST_TO_ADDR
32531: GO 33176
32533: LD_INT 22
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32567
32541: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
32542: LD_ADDR_VAR 0 3
32546: PUSH
32547: LD_INT 11
32549: PUSH
32550: LD_INT 12
32552: PUSH
32553: LD_INT 13
32555: PUSH
32556: LD_INT 14
32558: PUSH
32559: EMPTY
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: ST_TO_ADDR
32565: GO 33176
32567: LD_INT 23
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32601
32575: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
32576: LD_ADDR_VAR 0 3
32580: PUSH
32581: LD_INT 11
32583: PUSH
32584: LD_INT 12
32586: PUSH
32587: LD_INT 13
32589: PUSH
32590: LD_INT 14
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: ST_TO_ADDR
32599: GO 33176
32601: LD_INT 24
32603: DOUBLE
32604: EQUAL
32605: IFTRUE 32609
32607: GO 32635
32609: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
32610: LD_ADDR_VAR 0 3
32614: PUSH
32615: LD_INT 11
32617: PUSH
32618: LD_INT 12
32620: PUSH
32621: LD_INT 13
32623: PUSH
32624: LD_INT 14
32626: PUSH
32627: EMPTY
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: ST_TO_ADDR
32633: GO 33176
32635: LD_INT 30
32637: DOUBLE
32638: EQUAL
32639: IFTRUE 32643
32641: GO 32669
32643: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
32644: LD_ADDR_VAR 0 3
32648: PUSH
32649: LD_INT 11
32651: PUSH
32652: LD_INT 12
32654: PUSH
32655: LD_INT 13
32657: PUSH
32658: LD_INT 14
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: ST_TO_ADDR
32667: GO 33176
32669: LD_INT 25
32671: DOUBLE
32672: EQUAL
32673: IFTRUE 32677
32675: GO 32695
32677: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
32678: LD_ADDR_VAR 0 3
32682: PUSH
32683: LD_INT 13
32685: PUSH
32686: LD_INT 14
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: ST_TO_ADDR
32693: GO 33176
32695: LD_INT 27
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32721
32703: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
32704: LD_ADDR_VAR 0 3
32708: PUSH
32709: LD_INT 13
32711: PUSH
32712: LD_INT 14
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: ST_TO_ADDR
32719: GO 33176
32721: LD_INT 92
32723: DOUBLE
32724: EQUAL
32725: IFTRUE 32729
32727: GO 32755
32729: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
32730: LD_ADDR_VAR 0 3
32734: PUSH
32735: LD_INT 11
32737: PUSH
32738: LD_INT 12
32740: PUSH
32741: LD_INT 13
32743: PUSH
32744: LD_INT 14
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: ST_TO_ADDR
32753: GO 33176
32755: LD_INT 28
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32763
32761: GO 32781
32763: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
32764: LD_ADDR_VAR 0 3
32768: PUSH
32769: LD_INT 13
32771: PUSH
32772: LD_INT 14
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: ST_TO_ADDR
32779: GO 33176
32781: LD_INT 29
32783: DOUBLE
32784: EQUAL
32785: IFTRUE 32789
32787: GO 32807
32789: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
32790: LD_ADDR_VAR 0 3
32794: PUSH
32795: LD_INT 13
32797: PUSH
32798: LD_INT 14
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: ST_TO_ADDR
32805: GO 33176
32807: LD_INT 31
32809: DOUBLE
32810: EQUAL
32811: IFTRUE 32815
32813: GO 32833
32815: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
32816: LD_ADDR_VAR 0 3
32820: PUSH
32821: LD_INT 13
32823: PUSH
32824: LD_INT 14
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: ST_TO_ADDR
32831: GO 33176
32833: LD_INT 26
32835: DOUBLE
32836: EQUAL
32837: IFTRUE 32841
32839: GO 32859
32841: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
32842: LD_ADDR_VAR 0 3
32846: PUSH
32847: LD_INT 13
32849: PUSH
32850: LD_INT 14
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: ST_TO_ADDR
32857: GO 33176
32859: LD_INT 42
32861: DOUBLE
32862: EQUAL
32863: IFTRUE 32867
32865: GO 32893
32867: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
32868: LD_ADDR_VAR 0 3
32872: PUSH
32873: LD_INT 21
32875: PUSH
32876: LD_INT 22
32878: PUSH
32879: LD_INT 23
32881: PUSH
32882: LD_INT 24
32884: PUSH
32885: EMPTY
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: ST_TO_ADDR
32891: GO 33176
32893: LD_INT 43
32895: DOUBLE
32896: EQUAL
32897: IFTRUE 32901
32899: GO 32927
32901: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
32902: LD_ADDR_VAR 0 3
32906: PUSH
32907: LD_INT 21
32909: PUSH
32910: LD_INT 22
32912: PUSH
32913: LD_INT 23
32915: PUSH
32916: LD_INT 24
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: ST_TO_ADDR
32925: GO 33176
32927: LD_INT 44
32929: DOUBLE
32930: EQUAL
32931: IFTRUE 32935
32933: GO 32961
32935: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
32936: LD_ADDR_VAR 0 3
32940: PUSH
32941: LD_INT 21
32943: PUSH
32944: LD_INT 22
32946: PUSH
32947: LD_INT 23
32949: PUSH
32950: LD_INT 24
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: ST_TO_ADDR
32959: GO 33176
32961: LD_INT 45
32963: DOUBLE
32964: EQUAL
32965: IFTRUE 32969
32967: GO 32995
32969: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
32970: LD_ADDR_VAR 0 3
32974: PUSH
32975: LD_INT 21
32977: PUSH
32978: LD_INT 22
32980: PUSH
32981: LD_INT 23
32983: PUSH
32984: LD_INT 24
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: LIST
32991: LIST
32992: ST_TO_ADDR
32993: GO 33176
32995: LD_INT 49
32997: DOUBLE
32998: EQUAL
32999: IFTRUE 33003
33001: GO 33029
33003: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
33004: LD_ADDR_VAR 0 3
33008: PUSH
33009: LD_INT 21
33011: PUSH
33012: LD_INT 22
33014: PUSH
33015: LD_INT 23
33017: PUSH
33018: LD_INT 24
33020: PUSH
33021: EMPTY
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: ST_TO_ADDR
33027: GO 33176
33029: LD_INT 51
33031: DOUBLE
33032: EQUAL
33033: IFTRUE 33037
33035: GO 33063
33037: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
33038: LD_ADDR_VAR 0 3
33042: PUSH
33043: LD_INT 21
33045: PUSH
33046: LD_INT 22
33048: PUSH
33049: LD_INT 23
33051: PUSH
33052: LD_INT 24
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: ST_TO_ADDR
33061: GO 33176
33063: LD_INT 52
33065: DOUBLE
33066: EQUAL
33067: IFTRUE 33071
33069: GO 33097
33071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
33072: LD_ADDR_VAR 0 3
33076: PUSH
33077: LD_INT 21
33079: PUSH
33080: LD_INT 22
33082: PUSH
33083: LD_INT 23
33085: PUSH
33086: LD_INT 24
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: ST_TO_ADDR
33095: GO 33176
33097: LD_INT 53
33099: DOUBLE
33100: EQUAL
33101: IFTRUE 33105
33103: GO 33123
33105: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
33106: LD_ADDR_VAR 0 3
33110: PUSH
33111: LD_INT 23
33113: PUSH
33114: LD_INT 24
33116: PUSH
33117: EMPTY
33118: LIST
33119: LIST
33120: ST_TO_ADDR
33121: GO 33176
33123: LD_INT 46
33125: DOUBLE
33126: EQUAL
33127: IFTRUE 33131
33129: GO 33149
33131: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
33132: LD_ADDR_VAR 0 3
33136: PUSH
33137: LD_INT 23
33139: PUSH
33140: LD_INT 24
33142: PUSH
33143: EMPTY
33144: LIST
33145: LIST
33146: ST_TO_ADDR
33147: GO 33176
33149: LD_INT 47
33151: DOUBLE
33152: EQUAL
33153: IFTRUE 33157
33155: GO 33175
33157: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33158: LD_ADDR_VAR 0 3
33162: PUSH
33163: LD_INT 23
33165: PUSH
33166: LD_INT 24
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: ST_TO_ADDR
33173: GO 33176
33175: POP
// result := ( chassis in result ) ;
33176: LD_ADDR_VAR 0 3
33180: PUSH
33181: LD_VAR 0 1
33185: PUSH
33186: LD_VAR 0 3
33190: IN
33191: ST_TO_ADDR
// end ;
33192: LD_VAR 0 3
33196: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
33197: LD_INT 0
33199: PPUSH
33200: PPUSH
33201: PPUSH
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
// result := array ;
33206: LD_ADDR_VAR 0 5
33210: PUSH
33211: LD_VAR 0 1
33215: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
33216: LD_VAR 0 1
33220: NOT
33221: PUSH
33222: LD_VAR 0 2
33226: NOT
33227: OR
33228: PUSH
33229: LD_VAR 0 3
33233: NOT
33234: OR
33235: PUSH
33236: LD_VAR 0 2
33240: PUSH
33241: LD_VAR 0 1
33245: GREATER
33246: OR
33247: PUSH
33248: LD_VAR 0 3
33252: PUSH
33253: LD_VAR 0 1
33257: GREATER
33258: OR
33259: IFFALSE 33263
// exit ;
33261: GO 33559
// if direction then
33263: LD_VAR 0 4
33267: IFFALSE 33331
// begin d := 1 ;
33269: LD_ADDR_VAR 0 9
33273: PUSH
33274: LD_INT 1
33276: ST_TO_ADDR
// if i_from > i_to then
33277: LD_VAR 0 2
33281: PUSH
33282: LD_VAR 0 3
33286: GREATER
33287: IFFALSE 33313
// length := ( array - i_from ) + i_to else
33289: LD_ADDR_VAR 0 11
33293: PUSH
33294: LD_VAR 0 1
33298: PUSH
33299: LD_VAR 0 2
33303: MINUS
33304: PUSH
33305: LD_VAR 0 3
33309: PLUS
33310: ST_TO_ADDR
33311: GO 33329
// length := i_to - i_from ;
33313: LD_ADDR_VAR 0 11
33317: PUSH
33318: LD_VAR 0 3
33322: PUSH
33323: LD_VAR 0 2
33327: MINUS
33328: ST_TO_ADDR
// end else
33329: GO 33392
// begin d := - 1 ;
33331: LD_ADDR_VAR 0 9
33335: PUSH
33336: LD_INT 1
33338: NEG
33339: ST_TO_ADDR
// if i_from > i_to then
33340: LD_VAR 0 2
33344: PUSH
33345: LD_VAR 0 3
33349: GREATER
33350: IFFALSE 33370
// length := i_from - i_to else
33352: LD_ADDR_VAR 0 11
33356: PUSH
33357: LD_VAR 0 2
33361: PUSH
33362: LD_VAR 0 3
33366: MINUS
33367: ST_TO_ADDR
33368: GO 33392
// length := ( array - i_to ) + i_from ;
33370: LD_ADDR_VAR 0 11
33374: PUSH
33375: LD_VAR 0 1
33379: PUSH
33380: LD_VAR 0 3
33384: MINUS
33385: PUSH
33386: LD_VAR 0 2
33390: PLUS
33391: ST_TO_ADDR
// end ; if not length then
33392: LD_VAR 0 11
33396: NOT
33397: IFFALSE 33401
// exit ;
33399: GO 33559
// tmp := array ;
33401: LD_ADDR_VAR 0 10
33405: PUSH
33406: LD_VAR 0 1
33410: ST_TO_ADDR
// for i = 1 to length do
33411: LD_ADDR_VAR 0 6
33415: PUSH
33416: DOUBLE
33417: LD_INT 1
33419: DEC
33420: ST_TO_ADDR
33421: LD_VAR 0 11
33425: PUSH
33426: FOR_TO
33427: IFFALSE 33547
// begin for j = 1 to array do
33429: LD_ADDR_VAR 0 7
33433: PUSH
33434: DOUBLE
33435: LD_INT 1
33437: DEC
33438: ST_TO_ADDR
33439: LD_VAR 0 1
33443: PUSH
33444: FOR_TO
33445: IFFALSE 33533
// begin k := j + d ;
33447: LD_ADDR_VAR 0 8
33451: PUSH
33452: LD_VAR 0 7
33456: PUSH
33457: LD_VAR 0 9
33461: PLUS
33462: ST_TO_ADDR
// if k > array then
33463: LD_VAR 0 8
33467: PUSH
33468: LD_VAR 0 1
33472: GREATER
33473: IFFALSE 33483
// k := 1 ;
33475: LD_ADDR_VAR 0 8
33479: PUSH
33480: LD_INT 1
33482: ST_TO_ADDR
// if not k then
33483: LD_VAR 0 8
33487: NOT
33488: IFFALSE 33500
// k := array ;
33490: LD_ADDR_VAR 0 8
33494: PUSH
33495: LD_VAR 0 1
33499: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
33500: LD_ADDR_VAR 0 10
33504: PUSH
33505: LD_VAR 0 10
33509: PPUSH
33510: LD_VAR 0 8
33514: PPUSH
33515: LD_VAR 0 1
33519: PUSH
33520: LD_VAR 0 7
33524: ARRAY
33525: PPUSH
33526: CALL_OW 1
33530: ST_TO_ADDR
// end ;
33531: GO 33444
33533: POP
33534: POP
// array := tmp ;
33535: LD_ADDR_VAR 0 1
33539: PUSH
33540: LD_VAR 0 10
33544: ST_TO_ADDR
// end ;
33545: GO 33426
33547: POP
33548: POP
// result := array ;
33549: LD_ADDR_VAR 0 5
33553: PUSH
33554: LD_VAR 0 1
33558: ST_TO_ADDR
// end ;
33559: LD_VAR 0 5
33563: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
33564: LD_INT 0
33566: PPUSH
33567: PPUSH
// result := 0 ;
33568: LD_ADDR_VAR 0 3
33572: PUSH
33573: LD_INT 0
33575: ST_TO_ADDR
// if not array or not value in array then
33576: LD_VAR 0 1
33580: NOT
33581: PUSH
33582: LD_VAR 0 2
33586: PUSH
33587: LD_VAR 0 1
33591: IN
33592: NOT
33593: OR
33594: IFFALSE 33598
// exit ;
33596: GO 33652
// for i = 1 to array do
33598: LD_ADDR_VAR 0 4
33602: PUSH
33603: DOUBLE
33604: LD_INT 1
33606: DEC
33607: ST_TO_ADDR
33608: LD_VAR 0 1
33612: PUSH
33613: FOR_TO
33614: IFFALSE 33650
// if value = array [ i ] then
33616: LD_VAR 0 2
33620: PUSH
33621: LD_VAR 0 1
33625: PUSH
33626: LD_VAR 0 4
33630: ARRAY
33631: EQUAL
33632: IFFALSE 33648
// begin result := i ;
33634: LD_ADDR_VAR 0 3
33638: PUSH
33639: LD_VAR 0 4
33643: ST_TO_ADDR
// exit ;
33644: POP
33645: POP
33646: GO 33652
// end ;
33648: GO 33613
33650: POP
33651: POP
// end ;
33652: LD_VAR 0 3
33656: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
33657: LD_INT 0
33659: PPUSH
// vc_chassis := chassis ;
33660: LD_ADDR_OWVAR 37
33664: PUSH
33665: LD_VAR 0 1
33669: ST_TO_ADDR
// vc_engine := engine ;
33670: LD_ADDR_OWVAR 39
33674: PUSH
33675: LD_VAR 0 2
33679: ST_TO_ADDR
// vc_control := control ;
33680: LD_ADDR_OWVAR 38
33684: PUSH
33685: LD_VAR 0 3
33689: ST_TO_ADDR
// vc_weapon := weapon ;
33690: LD_ADDR_OWVAR 40
33694: PUSH
33695: LD_VAR 0 4
33699: ST_TO_ADDR
// vc_fuel_battery := fuel ;
33700: LD_ADDR_OWVAR 41
33704: PUSH
33705: LD_VAR 0 5
33709: ST_TO_ADDR
// end ;
33710: LD_VAR 0 6
33714: RET
// export function WantPlant ( unit ) ; var task ; begin
33715: LD_INT 0
33717: PPUSH
33718: PPUSH
// result := false ;
33719: LD_ADDR_VAR 0 2
33723: PUSH
33724: LD_INT 0
33726: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
33727: LD_ADDR_VAR 0 3
33731: PUSH
33732: LD_VAR 0 1
33736: PPUSH
33737: CALL_OW 437
33741: ST_TO_ADDR
// if task then
33742: LD_VAR 0 3
33746: IFFALSE 33774
// if task [ 1 ] [ 1 ] = p then
33748: LD_VAR 0 3
33752: PUSH
33753: LD_INT 1
33755: ARRAY
33756: PUSH
33757: LD_INT 1
33759: ARRAY
33760: PUSH
33761: LD_STRING p
33763: EQUAL
33764: IFFALSE 33774
// result := true ;
33766: LD_ADDR_VAR 0 2
33770: PUSH
33771: LD_INT 1
33773: ST_TO_ADDR
// end ;
33774: LD_VAR 0 2
33778: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
33779: LD_INT 0
33781: PPUSH
33782: PPUSH
33783: PPUSH
33784: PPUSH
// if pos < 1 then
33785: LD_VAR 0 2
33789: PUSH
33790: LD_INT 1
33792: LESS
33793: IFFALSE 33797
// exit ;
33795: GO 34100
// if pos = 1 then
33797: LD_VAR 0 2
33801: PUSH
33802: LD_INT 1
33804: EQUAL
33805: IFFALSE 33838
// result := Replace ( arr , pos [ 1 ] , value ) else
33807: LD_ADDR_VAR 0 4
33811: PUSH
33812: LD_VAR 0 1
33816: PPUSH
33817: LD_VAR 0 2
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: PPUSH
33826: LD_VAR 0 3
33830: PPUSH
33831: CALL_OW 1
33835: ST_TO_ADDR
33836: GO 34100
// begin tmp := arr ;
33838: LD_ADDR_VAR 0 6
33842: PUSH
33843: LD_VAR 0 1
33847: ST_TO_ADDR
// s_arr := [ tmp ] ;
33848: LD_ADDR_VAR 0 7
33852: PUSH
33853: LD_VAR 0 6
33857: PUSH
33858: EMPTY
33859: LIST
33860: ST_TO_ADDR
// for i = 1 to pos - 1 do
33861: LD_ADDR_VAR 0 5
33865: PUSH
33866: DOUBLE
33867: LD_INT 1
33869: DEC
33870: ST_TO_ADDR
33871: LD_VAR 0 2
33875: PUSH
33876: LD_INT 1
33878: MINUS
33879: PUSH
33880: FOR_TO
33881: IFFALSE 33926
// begin tmp := tmp [ pos [ i ] ] ;
33883: LD_ADDR_VAR 0 6
33887: PUSH
33888: LD_VAR 0 6
33892: PUSH
33893: LD_VAR 0 2
33897: PUSH
33898: LD_VAR 0 5
33902: ARRAY
33903: ARRAY
33904: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
33905: LD_ADDR_VAR 0 7
33909: PUSH
33910: LD_VAR 0 7
33914: PUSH
33915: LD_VAR 0 6
33919: PUSH
33920: EMPTY
33921: LIST
33922: ADD
33923: ST_TO_ADDR
// end ;
33924: GO 33880
33926: POP
33927: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
33928: LD_ADDR_VAR 0 6
33932: PUSH
33933: LD_VAR 0 6
33937: PPUSH
33938: LD_VAR 0 2
33942: PUSH
33943: LD_VAR 0 2
33947: ARRAY
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 1
33958: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
33959: LD_ADDR_VAR 0 7
33963: PUSH
33964: LD_VAR 0 7
33968: PPUSH
33969: LD_VAR 0 7
33973: PPUSH
33974: LD_VAR 0 6
33978: PPUSH
33979: CALL_OW 1
33983: ST_TO_ADDR
// for i = s_arr downto 2 do
33984: LD_ADDR_VAR 0 5
33988: PUSH
33989: DOUBLE
33990: LD_VAR 0 7
33994: INC
33995: ST_TO_ADDR
33996: LD_INT 2
33998: PUSH
33999: FOR_DOWNTO
34000: IFFALSE 34084
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
34002: LD_ADDR_VAR 0 6
34006: PUSH
34007: LD_VAR 0 7
34011: PUSH
34012: LD_VAR 0 5
34016: PUSH
34017: LD_INT 1
34019: MINUS
34020: ARRAY
34021: PPUSH
34022: LD_VAR 0 2
34026: PUSH
34027: LD_VAR 0 5
34031: PUSH
34032: LD_INT 1
34034: MINUS
34035: ARRAY
34036: PPUSH
34037: LD_VAR 0 7
34041: PUSH
34042: LD_VAR 0 5
34046: ARRAY
34047: PPUSH
34048: CALL_OW 1
34052: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
34053: LD_ADDR_VAR 0 7
34057: PUSH
34058: LD_VAR 0 7
34062: PPUSH
34063: LD_VAR 0 5
34067: PUSH
34068: LD_INT 1
34070: MINUS
34071: PPUSH
34072: LD_VAR 0 6
34076: PPUSH
34077: CALL_OW 1
34081: ST_TO_ADDR
// end ;
34082: GO 33999
34084: POP
34085: POP
// result := s_arr [ 1 ] ;
34086: LD_ADDR_VAR 0 4
34090: PUSH
34091: LD_VAR 0 7
34095: PUSH
34096: LD_INT 1
34098: ARRAY
34099: ST_TO_ADDR
// end ; end ;
34100: LD_VAR 0 4
34104: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
34105: LD_INT 0
34107: PPUSH
34108: PPUSH
// if not list then
34109: LD_VAR 0 1
34113: NOT
34114: IFFALSE 34118
// exit ;
34116: GO 34209
// i := list [ pos1 ] ;
34118: LD_ADDR_VAR 0 5
34122: PUSH
34123: LD_VAR 0 1
34127: PUSH
34128: LD_VAR 0 2
34132: ARRAY
34133: ST_TO_ADDR
// if not i then
34134: LD_VAR 0 5
34138: NOT
34139: IFFALSE 34143
// exit ;
34141: GO 34209
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
34143: LD_ADDR_VAR 0 1
34147: PUSH
34148: LD_VAR 0 1
34152: PPUSH
34153: LD_VAR 0 2
34157: PPUSH
34158: LD_VAR 0 1
34162: PUSH
34163: LD_VAR 0 3
34167: ARRAY
34168: PPUSH
34169: CALL_OW 1
34173: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
34174: LD_ADDR_VAR 0 1
34178: PUSH
34179: LD_VAR 0 1
34183: PPUSH
34184: LD_VAR 0 3
34188: PPUSH
34189: LD_VAR 0 5
34193: PPUSH
34194: CALL_OW 1
34198: ST_TO_ADDR
// result := list ;
34199: LD_ADDR_VAR 0 4
34203: PUSH
34204: LD_VAR 0 1
34208: ST_TO_ADDR
// end ;
34209: LD_VAR 0 4
34213: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
34214: LD_INT 0
34216: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
34217: LD_ADDR_VAR 0 5
34221: PUSH
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 250
34231: PPUSH
34232: LD_VAR 0 1
34236: PPUSH
34237: CALL_OW 251
34241: PPUSH
34242: LD_VAR 0 2
34246: PPUSH
34247: LD_VAR 0 3
34251: PPUSH
34252: LD_VAR 0 4
34256: PPUSH
34257: CALL 34635 0 5
34261: ST_TO_ADDR
// end ;
34262: LD_VAR 0 5
34266: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
34267: LD_INT 0
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
// if not list or not unit then
34273: LD_VAR 0 2
34277: NOT
34278: PUSH
34279: LD_VAR 0 1
34283: NOT
34284: OR
34285: IFFALSE 34289
// exit ;
34287: GO 34630
// result := [ ] ;
34289: LD_ADDR_VAR 0 5
34293: PUSH
34294: EMPTY
34295: ST_TO_ADDR
// for i in list do
34296: LD_ADDR_VAR 0 6
34300: PUSH
34301: LD_VAR 0 2
34305: PUSH
34306: FOR_IN
34307: IFFALSE 34525
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
34309: LD_ADDR_VAR 0 8
34313: PUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: LD_VAR 0 6
34323: PUSH
34324: LD_INT 1
34326: ARRAY
34327: PPUSH
34328: LD_VAR 0 6
34332: PUSH
34333: LD_INT 2
34335: ARRAY
34336: PPUSH
34337: CALL_OW 297
34341: ST_TO_ADDR
// if not Count ( result ) then
34342: LD_VAR 0 5
34346: PPUSH
34347: CALL 30919 0 1
34351: NOT
34352: IFFALSE 34385
// begin result := Join ( result , [ i , tmp ] ) ;
34354: LD_ADDR_VAR 0 5
34358: PUSH
34359: LD_VAR 0 5
34363: PPUSH
34364: LD_VAR 0 6
34368: PUSH
34369: LD_VAR 0 8
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PPUSH
34378: CALL 66528 0 2
34382: ST_TO_ADDR
// continue ;
34383: GO 34306
// end ; if result [ result ] [ 2 ] <= tmp then
34385: LD_VAR 0 5
34389: PUSH
34390: LD_VAR 0 5
34394: ARRAY
34395: PUSH
34396: LD_INT 2
34398: ARRAY
34399: PUSH
34400: LD_VAR 0 8
34404: LESSEQUAL
34405: IFFALSE 34438
// result := Join ( result , [ i , tmp ] ) else
34407: LD_ADDR_VAR 0 5
34411: PUSH
34412: LD_VAR 0 5
34416: PPUSH
34417: LD_VAR 0 6
34421: PUSH
34422: LD_VAR 0 8
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PPUSH
34431: CALL 66528 0 2
34435: ST_TO_ADDR
34436: GO 34523
// begin for j := 1 to Count ( result ) do
34438: LD_ADDR_VAR 0 7
34442: PUSH
34443: DOUBLE
34444: LD_INT 1
34446: DEC
34447: ST_TO_ADDR
34448: LD_VAR 0 5
34452: PPUSH
34453: CALL 30919 0 1
34457: PUSH
34458: FOR_TO
34459: IFFALSE 34521
// begin if tmp < result [ j ] [ 2 ] then
34461: LD_VAR 0 8
34465: PUSH
34466: LD_VAR 0 5
34470: PUSH
34471: LD_VAR 0 7
34475: ARRAY
34476: PUSH
34477: LD_INT 2
34479: ARRAY
34480: LESS
34481: IFFALSE 34519
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34483: LD_ADDR_VAR 0 5
34487: PUSH
34488: LD_VAR 0 5
34492: PPUSH
34493: LD_VAR 0 7
34497: PPUSH
34498: LD_VAR 0 6
34502: PUSH
34503: LD_VAR 0 8
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PPUSH
34512: CALL_OW 2
34516: ST_TO_ADDR
// break ;
34517: GO 34521
// end ; end ;
34519: GO 34458
34521: POP
34522: POP
// end ; end ;
34523: GO 34306
34525: POP
34526: POP
// if result and not asc then
34527: LD_VAR 0 5
34531: PUSH
34532: LD_VAR 0 3
34536: NOT
34537: AND
34538: IFFALSE 34555
// result := ReverseArray ( result ) ;
34540: LD_ADDR_VAR 0 5
34544: PUSH
34545: LD_VAR 0 5
34549: PPUSH
34550: CALL 61795 0 1
34554: ST_TO_ADDR
// tmp := [ ] ;
34555: LD_ADDR_VAR 0 8
34559: PUSH
34560: EMPTY
34561: ST_TO_ADDR
// if mode then
34562: LD_VAR 0 4
34566: IFFALSE 34630
// begin for i := 1 to result do
34568: LD_ADDR_VAR 0 6
34572: PUSH
34573: DOUBLE
34574: LD_INT 1
34576: DEC
34577: ST_TO_ADDR
34578: LD_VAR 0 5
34582: PUSH
34583: FOR_TO
34584: IFFALSE 34618
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
34586: LD_ADDR_VAR 0 8
34590: PUSH
34591: LD_VAR 0 8
34595: PPUSH
34596: LD_VAR 0 5
34600: PUSH
34601: LD_VAR 0 6
34605: ARRAY
34606: PUSH
34607: LD_INT 1
34609: ARRAY
34610: PPUSH
34611: CALL 66528 0 2
34615: ST_TO_ADDR
34616: GO 34583
34618: POP
34619: POP
// result := tmp ;
34620: LD_ADDR_VAR 0 5
34624: PUSH
34625: LD_VAR 0 8
34629: ST_TO_ADDR
// end ; end ;
34630: LD_VAR 0 5
34634: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
34635: LD_INT 0
34637: PPUSH
34638: PPUSH
34639: PPUSH
34640: PPUSH
// if not list then
34641: LD_VAR 0 3
34645: NOT
34646: IFFALSE 34650
// exit ;
34648: GO 35038
// result := [ ] ;
34650: LD_ADDR_VAR 0 6
34654: PUSH
34655: EMPTY
34656: ST_TO_ADDR
// for i in list do
34657: LD_ADDR_VAR 0 7
34661: PUSH
34662: LD_VAR 0 3
34666: PUSH
34667: FOR_IN
34668: IFFALSE 34870
// begin tmp := GetDistUnitXY ( i , x , y ) ;
34670: LD_ADDR_VAR 0 9
34674: PUSH
34675: LD_VAR 0 7
34679: PPUSH
34680: LD_VAR 0 1
34684: PPUSH
34685: LD_VAR 0 2
34689: PPUSH
34690: CALL_OW 297
34694: ST_TO_ADDR
// if not result then
34695: LD_VAR 0 6
34699: NOT
34700: IFFALSE 34726
// result := [ [ i , tmp ] ] else
34702: LD_ADDR_VAR 0 6
34706: PUSH
34707: LD_VAR 0 7
34711: PUSH
34712: LD_VAR 0 9
34716: PUSH
34717: EMPTY
34718: LIST
34719: LIST
34720: PUSH
34721: EMPTY
34722: LIST
34723: ST_TO_ADDR
34724: GO 34868
// begin if result [ result ] [ 2 ] <= tmp then
34726: LD_VAR 0 6
34730: PUSH
34731: LD_VAR 0 6
34735: ARRAY
34736: PUSH
34737: LD_INT 2
34739: ARRAY
34740: PUSH
34741: LD_VAR 0 9
34745: LESSEQUAL
34746: IFFALSE 34788
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
34748: LD_ADDR_VAR 0 6
34752: PUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: LD_VAR 0 6
34762: PUSH
34763: LD_INT 1
34765: PLUS
34766: PPUSH
34767: LD_VAR 0 7
34771: PUSH
34772: LD_VAR 0 9
34776: PUSH
34777: EMPTY
34778: LIST
34779: LIST
34780: PPUSH
34781: CALL_OW 2
34785: ST_TO_ADDR
34786: GO 34868
// for j := 1 to result do
34788: LD_ADDR_VAR 0 8
34792: PUSH
34793: DOUBLE
34794: LD_INT 1
34796: DEC
34797: ST_TO_ADDR
34798: LD_VAR 0 6
34802: PUSH
34803: FOR_TO
34804: IFFALSE 34866
// begin if tmp < result [ j ] [ 2 ] then
34806: LD_VAR 0 9
34810: PUSH
34811: LD_VAR 0 6
34815: PUSH
34816: LD_VAR 0 8
34820: ARRAY
34821: PUSH
34822: LD_INT 2
34824: ARRAY
34825: LESS
34826: IFFALSE 34864
// begin result := Insert ( result , j , [ i , tmp ] ) ;
34828: LD_ADDR_VAR 0 6
34832: PUSH
34833: LD_VAR 0 6
34837: PPUSH
34838: LD_VAR 0 8
34842: PPUSH
34843: LD_VAR 0 7
34847: PUSH
34848: LD_VAR 0 9
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PPUSH
34857: CALL_OW 2
34861: ST_TO_ADDR
// break ;
34862: GO 34866
// end ; end ;
34864: GO 34803
34866: POP
34867: POP
// end ; end ;
34868: GO 34667
34870: POP
34871: POP
// if result and not asc then
34872: LD_VAR 0 6
34876: PUSH
34877: LD_VAR 0 4
34881: NOT
34882: AND
34883: IFFALSE 34958
// begin tmp := result ;
34885: LD_ADDR_VAR 0 9
34889: PUSH
34890: LD_VAR 0 6
34894: ST_TO_ADDR
// for i = tmp downto 1 do
34895: LD_ADDR_VAR 0 7
34899: PUSH
34900: DOUBLE
34901: LD_VAR 0 9
34905: INC
34906: ST_TO_ADDR
34907: LD_INT 1
34909: PUSH
34910: FOR_DOWNTO
34911: IFFALSE 34956
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
34913: LD_ADDR_VAR 0 6
34917: PUSH
34918: LD_VAR 0 6
34922: PPUSH
34923: LD_VAR 0 9
34927: PUSH
34928: LD_VAR 0 7
34932: MINUS
34933: PUSH
34934: LD_INT 1
34936: PLUS
34937: PPUSH
34938: LD_VAR 0 9
34942: PUSH
34943: LD_VAR 0 7
34947: ARRAY
34948: PPUSH
34949: CALL_OW 1
34953: ST_TO_ADDR
34954: GO 34910
34956: POP
34957: POP
// end ; tmp := [ ] ;
34958: LD_ADDR_VAR 0 9
34962: PUSH
34963: EMPTY
34964: ST_TO_ADDR
// if mode then
34965: LD_VAR 0 5
34969: IFFALSE 35038
// begin for i = 1 to result do
34971: LD_ADDR_VAR 0 7
34975: PUSH
34976: DOUBLE
34977: LD_INT 1
34979: DEC
34980: ST_TO_ADDR
34981: LD_VAR 0 6
34985: PUSH
34986: FOR_TO
34987: IFFALSE 35026
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
34989: LD_ADDR_VAR 0 9
34993: PUSH
34994: LD_VAR 0 9
34998: PPUSH
34999: LD_VAR 0 7
35003: PPUSH
35004: LD_VAR 0 6
35008: PUSH
35009: LD_VAR 0 7
35013: ARRAY
35014: PUSH
35015: LD_INT 1
35017: ARRAY
35018: PPUSH
35019: CALL_OW 1
35023: ST_TO_ADDR
35024: GO 34986
35026: POP
35027: POP
// result := tmp ;
35028: LD_ADDR_VAR 0 6
35032: PUSH
35033: LD_VAR 0 9
35037: ST_TO_ADDR
// end ; end ;
35038: LD_VAR 0 6
35042: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35043: LD_INT 0
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35051: LD_ADDR_VAR 0 5
35055: PUSH
35056: LD_INT 0
35058: PUSH
35059: LD_INT 0
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: EMPTY
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: LIST
35071: LIST
35072: ST_TO_ADDR
// if not x or not y then
35073: LD_VAR 0 2
35077: NOT
35078: PUSH
35079: LD_VAR 0 3
35083: NOT
35084: OR
35085: IFFALSE 35089
// exit ;
35087: GO 36739
// if not range then
35089: LD_VAR 0 4
35093: NOT
35094: IFFALSE 35104
// range := 10 ;
35096: LD_ADDR_VAR 0 4
35100: PUSH
35101: LD_INT 10
35103: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35104: LD_ADDR_VAR 0 8
35108: PUSH
35109: LD_INT 81
35111: PUSH
35112: LD_VAR 0 1
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 92
35123: PUSH
35124: LD_VAR 0 2
35128: PUSH
35129: LD_VAR 0 3
35133: PUSH
35134: LD_VAR 0 4
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: PUSH
35145: LD_INT 3
35147: PUSH
35148: LD_INT 21
35150: PUSH
35151: LD_INT 3
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: PPUSH
35167: CALL_OW 69
35171: ST_TO_ADDR
// if not tmp then
35172: LD_VAR 0 8
35176: NOT
35177: IFFALSE 35181
// exit ;
35179: GO 36739
// for i in tmp do
35181: LD_ADDR_VAR 0 6
35185: PUSH
35186: LD_VAR 0 8
35190: PUSH
35191: FOR_IN
35192: IFFALSE 36714
// begin points := [ 0 , 0 , 0 ] ;
35194: LD_ADDR_VAR 0 9
35198: PUSH
35199: LD_INT 0
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: LD_INT 0
35207: PUSH
35208: EMPTY
35209: LIST
35210: LIST
35211: LIST
35212: ST_TO_ADDR
// bpoints := 1 ;
35213: LD_ADDR_VAR 0 10
35217: PUSH
35218: LD_INT 1
35220: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35221: LD_VAR 0 6
35225: PPUSH
35226: CALL_OW 247
35230: PUSH
35231: LD_INT 1
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35817
35239: POP
// begin if GetClass ( i ) = 1 then
35240: LD_VAR 0 6
35244: PPUSH
35245: CALL_OW 257
35249: PUSH
35250: LD_INT 1
35252: EQUAL
35253: IFFALSE 35274
// points := [ 10 , 5 , 3 ] ;
35255: LD_ADDR_VAR 0 9
35259: PUSH
35260: LD_INT 10
35262: PUSH
35263: LD_INT 5
35265: PUSH
35266: LD_INT 3
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: LIST
35273: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
35274: LD_VAR 0 6
35278: PPUSH
35279: CALL_OW 257
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: LD_INT 4
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: LIST
35297: IN
35298: IFFALSE 35319
// points := [ 3 , 2 , 1 ] ;
35300: LD_ADDR_VAR 0 9
35304: PUSH
35305: LD_INT 3
35307: PUSH
35308: LD_INT 2
35310: PUSH
35311: LD_INT 1
35313: PUSH
35314: EMPTY
35315: LIST
35316: LIST
35317: LIST
35318: ST_TO_ADDR
// if GetClass ( i ) = 5 then
35319: LD_VAR 0 6
35323: PPUSH
35324: CALL_OW 257
35328: PUSH
35329: LD_INT 5
35331: EQUAL
35332: IFFALSE 35353
// points := [ 130 , 5 , 2 ] ;
35334: LD_ADDR_VAR 0 9
35338: PUSH
35339: LD_INT 130
35341: PUSH
35342: LD_INT 5
35344: PUSH
35345: LD_INT 2
35347: PUSH
35348: EMPTY
35349: LIST
35350: LIST
35351: LIST
35352: ST_TO_ADDR
// if GetClass ( i ) = 8 then
35353: LD_VAR 0 6
35357: PPUSH
35358: CALL_OW 257
35362: PUSH
35363: LD_INT 8
35365: EQUAL
35366: IFFALSE 35387
// points := [ 35 , 35 , 30 ] ;
35368: LD_ADDR_VAR 0 9
35372: PUSH
35373: LD_INT 35
35375: PUSH
35376: LD_INT 35
35378: PUSH
35379: LD_INT 30
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: LIST
35386: ST_TO_ADDR
// if GetClass ( i ) = 9 then
35387: LD_VAR 0 6
35391: PPUSH
35392: CALL_OW 257
35396: PUSH
35397: LD_INT 9
35399: EQUAL
35400: IFFALSE 35421
// points := [ 20 , 55 , 40 ] ;
35402: LD_ADDR_VAR 0 9
35406: PUSH
35407: LD_INT 20
35409: PUSH
35410: LD_INT 55
35412: PUSH
35413: LD_INT 40
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
35421: LD_VAR 0 6
35425: PPUSH
35426: CALL_OW 257
35430: PUSH
35431: LD_INT 12
35433: PUSH
35434: LD_INT 16
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: IN
35441: IFFALSE 35462
// points := [ 5 , 3 , 2 ] ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_INT 5
35450: PUSH
35451: LD_INT 3
35453: PUSH
35454: LD_INT 2
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: ST_TO_ADDR
// if GetClass ( i ) = 17 then
35462: LD_VAR 0 6
35466: PPUSH
35467: CALL_OW 257
35471: PUSH
35472: LD_INT 17
35474: EQUAL
35475: IFFALSE 35496
// points := [ 100 , 50 , 75 ] ;
35477: LD_ADDR_VAR 0 9
35481: PUSH
35482: LD_INT 100
35484: PUSH
35485: LD_INT 50
35487: PUSH
35488: LD_INT 75
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: LIST
35495: ST_TO_ADDR
// if GetClass ( i ) = 15 then
35496: LD_VAR 0 6
35500: PPUSH
35501: CALL_OW 257
35505: PUSH
35506: LD_INT 15
35508: EQUAL
35509: IFFALSE 35530
// points := [ 10 , 5 , 3 ] ;
35511: LD_ADDR_VAR 0 9
35515: PUSH
35516: LD_INT 10
35518: PUSH
35519: LD_INT 5
35521: PUSH
35522: LD_INT 3
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: LIST
35529: ST_TO_ADDR
// if GetClass ( i ) = 14 then
35530: LD_VAR 0 6
35534: PPUSH
35535: CALL_OW 257
35539: PUSH
35540: LD_INT 14
35542: EQUAL
35543: IFFALSE 35564
// points := [ 10 , 0 , 0 ] ;
35545: LD_ADDR_VAR 0 9
35549: PUSH
35550: LD_INT 10
35552: PUSH
35553: LD_INT 0
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: LIST
35563: ST_TO_ADDR
// if GetClass ( i ) = 11 then
35564: LD_VAR 0 6
35568: PPUSH
35569: CALL_OW 257
35573: PUSH
35574: LD_INT 11
35576: EQUAL
35577: IFFALSE 35598
// points := [ 30 , 10 , 5 ] ;
35579: LD_ADDR_VAR 0 9
35583: PUSH
35584: LD_INT 30
35586: PUSH
35587: LD_INT 10
35589: PUSH
35590: LD_INT 5
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: LIST
35597: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
35598: LD_VAR 0 1
35602: PPUSH
35603: LD_INT 5
35605: PPUSH
35606: CALL_OW 321
35610: PUSH
35611: LD_INT 2
35613: EQUAL
35614: IFFALSE 35631
// bpoints := bpoints * 1.8 ;
35616: LD_ADDR_VAR 0 10
35620: PUSH
35621: LD_VAR 0 10
35625: PUSH
35626: LD_REAL  1.80000000000000E+0000
35629: MUL
35630: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
35631: LD_VAR 0 6
35635: PPUSH
35636: CALL_OW 257
35640: PUSH
35641: LD_INT 1
35643: PUSH
35644: LD_INT 2
35646: PUSH
35647: LD_INT 3
35649: PUSH
35650: LD_INT 4
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: IN
35659: PUSH
35660: LD_VAR 0 1
35664: PPUSH
35665: LD_INT 51
35667: PPUSH
35668: CALL_OW 321
35672: PUSH
35673: LD_INT 2
35675: EQUAL
35676: AND
35677: IFFALSE 35694
// bpoints := bpoints * 1.2 ;
35679: LD_ADDR_VAR 0 10
35683: PUSH
35684: LD_VAR 0 10
35688: PUSH
35689: LD_REAL  1.20000000000000E+0000
35692: MUL
35693: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
35694: LD_VAR 0 6
35698: PPUSH
35699: CALL_OW 257
35703: PUSH
35704: LD_INT 5
35706: PUSH
35707: LD_INT 7
35709: PUSH
35710: LD_INT 9
35712: PUSH
35713: EMPTY
35714: LIST
35715: LIST
35716: LIST
35717: IN
35718: PUSH
35719: LD_VAR 0 1
35723: PPUSH
35724: LD_INT 52
35726: PPUSH
35727: CALL_OW 321
35731: PUSH
35732: LD_INT 2
35734: EQUAL
35735: AND
35736: IFFALSE 35753
// bpoints := bpoints * 1.5 ;
35738: LD_ADDR_VAR 0 10
35742: PUSH
35743: LD_VAR 0 10
35747: PUSH
35748: LD_REAL  1.50000000000000E+0000
35751: MUL
35752: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
35753: LD_VAR 0 1
35757: PPUSH
35758: LD_INT 66
35760: PPUSH
35761: CALL_OW 321
35765: PUSH
35766: LD_INT 2
35768: EQUAL
35769: IFFALSE 35786
// bpoints := bpoints * 1.1 ;
35771: LD_ADDR_VAR 0 10
35775: PUSH
35776: LD_VAR 0 10
35780: PUSH
35781: LD_REAL  1.10000000000000E+0000
35784: MUL
35785: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
35786: LD_ADDR_VAR 0 10
35790: PUSH
35791: LD_VAR 0 10
35795: PUSH
35796: LD_VAR 0 6
35800: PPUSH
35801: LD_INT 1
35803: PPUSH
35804: CALL_OW 259
35808: PUSH
35809: LD_REAL  1.15000000000000E+0000
35812: MUL
35813: MUL
35814: ST_TO_ADDR
// end ; unit_vehicle :
35815: GO 36643
35817: LD_INT 2
35819: DOUBLE
35820: EQUAL
35821: IFTRUE 35825
35823: GO 36631
35825: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
35826: LD_VAR 0 6
35830: PPUSH
35831: CALL_OW 264
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 42
35841: PUSH
35842: LD_INT 24
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: LIST
35849: IN
35850: IFFALSE 35871
// points := [ 25 , 5 , 3 ] ;
35852: LD_ADDR_VAR 0 9
35856: PUSH
35857: LD_INT 25
35859: PUSH
35860: LD_INT 5
35862: PUSH
35863: LD_INT 3
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
35871: LD_VAR 0 6
35875: PPUSH
35876: CALL_OW 264
35880: PUSH
35881: LD_INT 4
35883: PUSH
35884: LD_INT 43
35886: PUSH
35887: LD_INT 25
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: LIST
35894: IN
35895: IFFALSE 35916
// points := [ 40 , 15 , 5 ] ;
35897: LD_ADDR_VAR 0 9
35901: PUSH
35902: LD_INT 40
35904: PUSH
35905: LD_INT 15
35907: PUSH
35908: LD_INT 5
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: LIST
35915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
35916: LD_VAR 0 6
35920: PPUSH
35921: CALL_OW 264
35925: PUSH
35926: LD_INT 3
35928: PUSH
35929: LD_INT 23
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: IN
35936: IFFALSE 35957
// points := [ 7 , 25 , 8 ] ;
35938: LD_ADDR_VAR 0 9
35942: PUSH
35943: LD_INT 7
35945: PUSH
35946: LD_INT 25
35948: PUSH
35949: LD_INT 8
35951: PUSH
35952: EMPTY
35953: LIST
35954: LIST
35955: LIST
35956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
35957: LD_VAR 0 6
35961: PPUSH
35962: CALL_OW 264
35966: PUSH
35967: LD_INT 5
35969: PUSH
35970: LD_INT 27
35972: PUSH
35973: LD_INT 44
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: LIST
35980: IN
35981: IFFALSE 36002
// points := [ 14 , 50 , 16 ] ;
35983: LD_ADDR_VAR 0 9
35987: PUSH
35988: LD_INT 14
35990: PUSH
35991: LD_INT 50
35993: PUSH
35994: LD_INT 16
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: LIST
36001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36002: LD_VAR 0 6
36006: PPUSH
36007: CALL_OW 264
36011: PUSH
36012: LD_INT 6
36014: PUSH
36015: LD_INT 46
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: IN
36022: IFFALSE 36043
// points := [ 32 , 120 , 70 ] ;
36024: LD_ADDR_VAR 0 9
36028: PUSH
36029: LD_INT 32
36031: PUSH
36032: LD_INT 120
36034: PUSH
36035: LD_INT 70
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: LIST
36042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36043: LD_VAR 0 6
36047: PPUSH
36048: CALL_OW 264
36052: PUSH
36053: LD_INT 7
36055: PUSH
36056: LD_INT 28
36058: PUSH
36059: LD_INT 45
36061: PUSH
36062: LD_INT 92
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: IN
36071: IFFALSE 36092
// points := [ 35 , 20 , 45 ] ;
36073: LD_ADDR_VAR 0 9
36077: PUSH
36078: LD_INT 35
36080: PUSH
36081: LD_INT 20
36083: PUSH
36084: LD_INT 45
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36092: LD_VAR 0 6
36096: PPUSH
36097: CALL_OW 264
36101: PUSH
36102: LD_INT 47
36104: PUSH
36105: EMPTY
36106: LIST
36107: IN
36108: IFFALSE 36129
// points := [ 67 , 45 , 75 ] ;
36110: LD_ADDR_VAR 0 9
36114: PUSH
36115: LD_INT 67
36117: PUSH
36118: LD_INT 45
36120: PUSH
36121: LD_INT 75
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: LIST
36128: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36129: LD_VAR 0 6
36133: PPUSH
36134: CALL_OW 264
36138: PUSH
36139: LD_INT 26
36141: PUSH
36142: EMPTY
36143: LIST
36144: IN
36145: IFFALSE 36166
// points := [ 120 , 30 , 80 ] ;
36147: LD_ADDR_VAR 0 9
36151: PUSH
36152: LD_INT 120
36154: PUSH
36155: LD_INT 30
36157: PUSH
36158: LD_INT 80
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36166: LD_VAR 0 6
36170: PPUSH
36171: CALL_OW 264
36175: PUSH
36176: LD_INT 22
36178: PUSH
36179: EMPTY
36180: LIST
36181: IN
36182: IFFALSE 36203
// points := [ 40 , 1 , 1 ] ;
36184: LD_ADDR_VAR 0 9
36188: PUSH
36189: LD_INT 40
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: LD_INT 1
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36203: LD_VAR 0 6
36207: PPUSH
36208: CALL_OW 264
36212: PUSH
36213: LD_INT 29
36215: PUSH
36216: EMPTY
36217: LIST
36218: IN
36219: IFFALSE 36240
// points := [ 70 , 200 , 400 ] ;
36221: LD_ADDR_VAR 0 9
36225: PUSH
36226: LD_INT 70
36228: PUSH
36229: LD_INT 200
36231: PUSH
36232: LD_INT 400
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: LIST
36239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
36240: LD_VAR 0 6
36244: PPUSH
36245: CALL_OW 264
36249: PUSH
36250: LD_INT 14
36252: PUSH
36253: LD_INT 53
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: IN
36260: IFFALSE 36281
// points := [ 40 , 10 , 20 ] ;
36262: LD_ADDR_VAR 0 9
36266: PUSH
36267: LD_INT 40
36269: PUSH
36270: LD_INT 10
36272: PUSH
36273: LD_INT 20
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: LIST
36280: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
36281: LD_VAR 0 6
36285: PPUSH
36286: CALL_OW 264
36290: PUSH
36291: LD_INT 9
36293: PUSH
36294: EMPTY
36295: LIST
36296: IN
36297: IFFALSE 36318
// points := [ 5 , 70 , 20 ] ;
36299: LD_ADDR_VAR 0 9
36303: PUSH
36304: LD_INT 5
36306: PUSH
36307: LD_INT 70
36309: PUSH
36310: LD_INT 20
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
36318: LD_VAR 0 6
36322: PPUSH
36323: CALL_OW 264
36327: PUSH
36328: LD_INT 10
36330: PUSH
36331: EMPTY
36332: LIST
36333: IN
36334: IFFALSE 36355
// points := [ 35 , 110 , 70 ] ;
36336: LD_ADDR_VAR 0 9
36340: PUSH
36341: LD_INT 35
36343: PUSH
36344: LD_INT 110
36346: PUSH
36347: LD_INT 70
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
36355: LD_VAR 0 6
36359: PPUSH
36360: CALL_OW 265
36364: PUSH
36365: LD_INT 25
36367: EQUAL
36368: IFFALSE 36389
// points := [ 80 , 65 , 100 ] ;
36370: LD_ADDR_VAR 0 9
36374: PUSH
36375: LD_INT 80
36377: PUSH
36378: LD_INT 65
36380: PUSH
36381: LD_INT 100
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
36389: LD_VAR 0 6
36393: PPUSH
36394: CALL_OW 263
36398: PUSH
36399: LD_INT 1
36401: EQUAL
36402: IFFALSE 36437
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
36404: LD_ADDR_VAR 0 10
36408: PUSH
36409: LD_VAR 0 10
36413: PUSH
36414: LD_VAR 0 6
36418: PPUSH
36419: CALL_OW 311
36423: PPUSH
36424: LD_INT 3
36426: PPUSH
36427: CALL_OW 259
36431: PUSH
36432: LD_INT 4
36434: MUL
36435: MUL
36436: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
36437: LD_VAR 0 6
36441: PPUSH
36442: CALL_OW 263
36446: PUSH
36447: LD_INT 2
36449: EQUAL
36450: IFFALSE 36501
// begin j := IsControledBy ( i ) ;
36452: LD_ADDR_VAR 0 7
36456: PUSH
36457: LD_VAR 0 6
36461: PPUSH
36462: CALL_OW 312
36466: ST_TO_ADDR
// if j then
36467: LD_VAR 0 7
36471: IFFALSE 36501
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
36473: LD_ADDR_VAR 0 10
36477: PUSH
36478: LD_VAR 0 10
36482: PUSH
36483: LD_VAR 0 7
36487: PPUSH
36488: LD_INT 3
36490: PPUSH
36491: CALL_OW 259
36495: PUSH
36496: LD_INT 3
36498: MUL
36499: MUL
36500: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
36501: LD_VAR 0 6
36505: PPUSH
36506: CALL_OW 264
36510: PUSH
36511: LD_INT 5
36513: PUSH
36514: LD_INT 6
36516: PUSH
36517: LD_INT 46
36519: PUSH
36520: LD_INT 44
36522: PUSH
36523: LD_INT 47
36525: PUSH
36526: LD_INT 45
36528: PUSH
36529: LD_INT 28
36531: PUSH
36532: LD_INT 7
36534: PUSH
36535: LD_INT 27
36537: PUSH
36538: LD_INT 29
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: IN
36553: PUSH
36554: LD_VAR 0 1
36558: PPUSH
36559: LD_INT 52
36561: PPUSH
36562: CALL_OW 321
36566: PUSH
36567: LD_INT 2
36569: EQUAL
36570: AND
36571: IFFALSE 36588
// bpoints := bpoints * 1.2 ;
36573: LD_ADDR_VAR 0 10
36577: PUSH
36578: LD_VAR 0 10
36582: PUSH
36583: LD_REAL  1.20000000000000E+0000
36586: MUL
36587: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
36588: LD_VAR 0 6
36592: PPUSH
36593: CALL_OW 264
36597: PUSH
36598: LD_INT 6
36600: PUSH
36601: LD_INT 46
36603: PUSH
36604: LD_INT 47
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: IN
36612: IFFALSE 36629
// bpoints := bpoints * 1.2 ;
36614: LD_ADDR_VAR 0 10
36618: PUSH
36619: LD_VAR 0 10
36623: PUSH
36624: LD_REAL  1.20000000000000E+0000
36627: MUL
36628: ST_TO_ADDR
// end ; unit_building :
36629: GO 36643
36631: LD_INT 3
36633: DOUBLE
36634: EQUAL
36635: IFTRUE 36639
36637: GO 36642
36639: POP
// ; end ;
36640: GO 36643
36642: POP
// for j = 1 to 3 do
36643: LD_ADDR_VAR 0 7
36647: PUSH
36648: DOUBLE
36649: LD_INT 1
36651: DEC
36652: ST_TO_ADDR
36653: LD_INT 3
36655: PUSH
36656: FOR_TO
36657: IFFALSE 36710
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
36659: LD_ADDR_VAR 0 5
36663: PUSH
36664: LD_VAR 0 5
36668: PPUSH
36669: LD_VAR 0 7
36673: PPUSH
36674: LD_VAR 0 5
36678: PUSH
36679: LD_VAR 0 7
36683: ARRAY
36684: PUSH
36685: LD_VAR 0 9
36689: PUSH
36690: LD_VAR 0 7
36694: ARRAY
36695: PUSH
36696: LD_VAR 0 10
36700: MUL
36701: PLUS
36702: PPUSH
36703: CALL_OW 1
36707: ST_TO_ADDR
36708: GO 36656
36710: POP
36711: POP
// end ;
36712: GO 35191
36714: POP
36715: POP
// result := Replace ( result , 4 , tmp ) ;
36716: LD_ADDR_VAR 0 5
36720: PUSH
36721: LD_VAR 0 5
36725: PPUSH
36726: LD_INT 4
36728: PPUSH
36729: LD_VAR 0 8
36733: PPUSH
36734: CALL_OW 1
36738: ST_TO_ADDR
// end ;
36739: LD_VAR 0 5
36743: RET
// export function DangerAtRange ( unit , range ) ; begin
36744: LD_INT 0
36746: PPUSH
// if not unit then
36747: LD_VAR 0 1
36751: NOT
36752: IFFALSE 36756
// exit ;
36754: GO 36801
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
36756: LD_ADDR_VAR 0 3
36760: PUSH
36761: LD_VAR 0 1
36765: PPUSH
36766: CALL_OW 255
36770: PPUSH
36771: LD_VAR 0 1
36775: PPUSH
36776: CALL_OW 250
36780: PPUSH
36781: LD_VAR 0 1
36785: PPUSH
36786: CALL_OW 251
36790: PPUSH
36791: LD_VAR 0 2
36795: PPUSH
36796: CALL 35043 0 4
36800: ST_TO_ADDR
// end ;
36801: LD_VAR 0 3
36805: RET
// export function DangerInArea ( side , area ) ; begin
36806: LD_INT 0
36808: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_VAR 0 2
36818: PPUSH
36819: LD_INT 81
36821: PUSH
36822: LD_VAR 0 1
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PPUSH
36831: CALL_OW 70
36835: ST_TO_ADDR
// end ;
36836: LD_VAR 0 3
36840: RET
// export function IsExtension ( b ) ; begin
36841: LD_INT 0
36843: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
36844: LD_ADDR_VAR 0 2
36848: PUSH
36849: LD_VAR 0 1
36853: PUSH
36854: LD_INT 23
36856: PUSH
36857: LD_INT 20
36859: PUSH
36860: LD_INT 22
36862: PUSH
36863: LD_INT 17
36865: PUSH
36866: LD_INT 24
36868: PUSH
36869: LD_INT 21
36871: PUSH
36872: LD_INT 19
36874: PUSH
36875: LD_INT 16
36877: PUSH
36878: LD_INT 25
36880: PUSH
36881: LD_INT 18
36883: PUSH
36884: EMPTY
36885: LIST
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: IN
36896: ST_TO_ADDR
// end ;
36897: LD_VAR 0 2
36901: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
36902: LD_INT 0
36904: PPUSH
36905: PPUSH
36906: PPUSH
// result := [ ] ;
36907: LD_ADDR_VAR 0 4
36911: PUSH
36912: EMPTY
36913: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
36914: LD_ADDR_VAR 0 5
36918: PUSH
36919: LD_VAR 0 2
36923: PPUSH
36924: LD_INT 21
36926: PUSH
36927: LD_INT 3
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PPUSH
36934: CALL_OW 70
36938: ST_TO_ADDR
// if not tmp then
36939: LD_VAR 0 5
36943: NOT
36944: IFFALSE 36948
// exit ;
36946: GO 37012
// if checkLink then
36948: LD_VAR 0 3
36952: IFFALSE 37002
// begin for i in tmp do
36954: LD_ADDR_VAR 0 6
36958: PUSH
36959: LD_VAR 0 5
36963: PUSH
36964: FOR_IN
36965: IFFALSE 37000
// if GetBase ( i ) <> base then
36967: LD_VAR 0 6
36971: PPUSH
36972: CALL_OW 274
36976: PUSH
36977: LD_VAR 0 1
36981: NONEQUAL
36982: IFFALSE 36998
// ComLinkToBase ( base , i ) ;
36984: LD_VAR 0 1
36988: PPUSH
36989: LD_VAR 0 6
36993: PPUSH
36994: CALL_OW 169
36998: GO 36964
37000: POP
37001: POP
// end ; result := tmp ;
37002: LD_ADDR_VAR 0 4
37006: PUSH
37007: LD_VAR 0 5
37011: ST_TO_ADDR
// end ;
37012: LD_VAR 0 4
37016: RET
// export function ComComplete ( units , b ) ; var i ; begin
37017: LD_INT 0
37019: PPUSH
37020: PPUSH
// if not units then
37021: LD_VAR 0 1
37025: NOT
37026: IFFALSE 37030
// exit ;
37028: GO 37120
// for i in units do
37030: LD_ADDR_VAR 0 4
37034: PUSH
37035: LD_VAR 0 1
37039: PUSH
37040: FOR_IN
37041: IFFALSE 37118
// if BuildingStatus ( b ) = bs_build then
37043: LD_VAR 0 2
37047: PPUSH
37048: CALL_OW 461
37052: PUSH
37053: LD_INT 1
37055: EQUAL
37056: IFFALSE 37116
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37058: LD_VAR 0 4
37062: PPUSH
37063: LD_STRING h
37065: PUSH
37066: LD_VAR 0 2
37070: PPUSH
37071: CALL_OW 250
37075: PUSH
37076: LD_VAR 0 2
37080: PPUSH
37081: CALL_OW 251
37085: PUSH
37086: LD_VAR 0 2
37090: PUSH
37091: LD_INT 0
37093: PUSH
37094: LD_INT 0
37096: PUSH
37097: LD_INT 0
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: PUSH
37109: EMPTY
37110: LIST
37111: PPUSH
37112: CALL_OW 446
37116: GO 37040
37118: POP
37119: POP
// end ;
37120: LD_VAR 0 3
37124: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37125: LD_INT 0
37127: PPUSH
37128: PPUSH
37129: PPUSH
37130: PPUSH
37131: PPUSH
37132: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37133: LD_VAR 0 1
37137: NOT
37138: PUSH
37139: LD_VAR 0 1
37143: PPUSH
37144: CALL_OW 263
37148: PUSH
37149: LD_INT 2
37151: NONEQUAL
37152: OR
37153: IFFALSE 37157
// exit ;
37155: GO 37473
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37157: LD_ADDR_VAR 0 6
37161: PUSH
37162: LD_INT 22
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: CALL_OW 255
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: LD_INT 30
37184: PUSH
37185: LD_INT 36
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 34
37194: PUSH
37195: LD_INT 31
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: LIST
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PPUSH
37211: CALL_OW 69
37215: ST_TO_ADDR
// if not tmp then
37216: LD_VAR 0 6
37220: NOT
37221: IFFALSE 37225
// exit ;
37223: GO 37473
// result := [ ] ;
37225: LD_ADDR_VAR 0 2
37229: PUSH
37230: EMPTY
37231: ST_TO_ADDR
// for i in tmp do
37232: LD_ADDR_VAR 0 3
37236: PUSH
37237: LD_VAR 0 6
37241: PUSH
37242: FOR_IN
37243: IFFALSE 37314
// begin t := UnitsInside ( i ) ;
37245: LD_ADDR_VAR 0 4
37249: PUSH
37250: LD_VAR 0 3
37254: PPUSH
37255: CALL_OW 313
37259: ST_TO_ADDR
// if t then
37260: LD_VAR 0 4
37264: IFFALSE 37312
// for j in t do
37266: LD_ADDR_VAR 0 7
37270: PUSH
37271: LD_VAR 0 4
37275: PUSH
37276: FOR_IN
37277: IFFALSE 37310
// result := Replace ( result , result + 1 , j ) ;
37279: LD_ADDR_VAR 0 2
37283: PUSH
37284: LD_VAR 0 2
37288: PPUSH
37289: LD_VAR 0 2
37293: PUSH
37294: LD_INT 1
37296: PLUS
37297: PPUSH
37298: LD_VAR 0 7
37302: PPUSH
37303: CALL_OW 1
37307: ST_TO_ADDR
37308: GO 37276
37310: POP
37311: POP
// end ;
37312: GO 37242
37314: POP
37315: POP
// if not result then
37316: LD_VAR 0 2
37320: NOT
37321: IFFALSE 37325
// exit ;
37323: GO 37473
// mech := result [ 1 ] ;
37325: LD_ADDR_VAR 0 5
37329: PUSH
37330: LD_VAR 0 2
37334: PUSH
37335: LD_INT 1
37337: ARRAY
37338: ST_TO_ADDR
// if result > 1 then
37339: LD_VAR 0 2
37343: PUSH
37344: LD_INT 1
37346: GREATER
37347: IFFALSE 37459
// begin for i = 2 to result do
37349: LD_ADDR_VAR 0 3
37353: PUSH
37354: DOUBLE
37355: LD_INT 2
37357: DEC
37358: ST_TO_ADDR
37359: LD_VAR 0 2
37363: PUSH
37364: FOR_TO
37365: IFFALSE 37457
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
37367: LD_ADDR_VAR 0 4
37371: PUSH
37372: LD_VAR 0 2
37376: PUSH
37377: LD_VAR 0 3
37381: ARRAY
37382: PPUSH
37383: LD_INT 3
37385: PPUSH
37386: CALL_OW 259
37390: PUSH
37391: LD_VAR 0 2
37395: PUSH
37396: LD_VAR 0 3
37400: ARRAY
37401: PPUSH
37402: CALL_OW 432
37406: MINUS
37407: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
37408: LD_VAR 0 4
37412: PUSH
37413: LD_VAR 0 5
37417: PPUSH
37418: LD_INT 3
37420: PPUSH
37421: CALL_OW 259
37425: PUSH
37426: LD_VAR 0 5
37430: PPUSH
37431: CALL_OW 432
37435: MINUS
37436: GREATEREQUAL
37437: IFFALSE 37455
// mech := result [ i ] ;
37439: LD_ADDR_VAR 0 5
37443: PUSH
37444: LD_VAR 0 2
37448: PUSH
37449: LD_VAR 0 3
37453: ARRAY
37454: ST_TO_ADDR
// end ;
37455: GO 37364
37457: POP
37458: POP
// end ; ComLinkTo ( vehicle , mech ) ;
37459: LD_VAR 0 1
37463: PPUSH
37464: LD_VAR 0 5
37468: PPUSH
37469: CALL_OW 135
// end ;
37473: LD_VAR 0 2
37477: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
37478: LD_INT 0
37480: PPUSH
37481: PPUSH
37482: PPUSH
37483: PPUSH
37484: PPUSH
37485: PPUSH
37486: PPUSH
37487: PPUSH
37488: PPUSH
37489: PPUSH
37490: PPUSH
37491: PPUSH
37492: PPUSH
// result := [ ] ;
37493: LD_ADDR_VAR 0 7
37497: PUSH
37498: EMPTY
37499: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
37500: LD_VAR 0 1
37504: PPUSH
37505: CALL_OW 266
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: IN
37520: NOT
37521: IFFALSE 37525
// exit ;
37523: GO 39159
// if name then
37525: LD_VAR 0 3
37529: IFFALSE 37545
// SetBName ( base_dep , name ) ;
37531: LD_VAR 0 1
37535: PPUSH
37536: LD_VAR 0 3
37540: PPUSH
37541: CALL_OW 500
// base := GetBase ( base_dep ) ;
37545: LD_ADDR_VAR 0 15
37549: PUSH
37550: LD_VAR 0 1
37554: PPUSH
37555: CALL_OW 274
37559: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
37560: LD_ADDR_VAR 0 16
37564: PUSH
37565: LD_VAR 0 1
37569: PPUSH
37570: CALL_OW 255
37574: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
37575: LD_ADDR_VAR 0 17
37579: PUSH
37580: LD_VAR 0 1
37584: PPUSH
37585: CALL_OW 248
37589: ST_TO_ADDR
// if sources then
37590: LD_VAR 0 5
37594: IFFALSE 37641
// for i = 1 to 3 do
37596: LD_ADDR_VAR 0 8
37600: PUSH
37601: DOUBLE
37602: LD_INT 1
37604: DEC
37605: ST_TO_ADDR
37606: LD_INT 3
37608: PUSH
37609: FOR_TO
37610: IFFALSE 37639
// AddResourceType ( base , i , sources [ i ] ) ;
37612: LD_VAR 0 15
37616: PPUSH
37617: LD_VAR 0 8
37621: PPUSH
37622: LD_VAR 0 5
37626: PUSH
37627: LD_VAR 0 8
37631: ARRAY
37632: PPUSH
37633: CALL_OW 276
37637: GO 37609
37639: POP
37640: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
37641: LD_ADDR_VAR 0 18
37645: PUSH
37646: LD_VAR 0 15
37650: PPUSH
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_INT 1
37658: PPUSH
37659: CALL 36902 0 3
37663: ST_TO_ADDR
// InitHc ;
37664: CALL_OW 19
// InitUc ;
37668: CALL_OW 18
// uc_side := side ;
37672: LD_ADDR_OWVAR 20
37676: PUSH
37677: LD_VAR 0 16
37681: ST_TO_ADDR
// uc_nation := nation ;
37682: LD_ADDR_OWVAR 21
37686: PUSH
37687: LD_VAR 0 17
37691: ST_TO_ADDR
// if buildings then
37692: LD_VAR 0 18
37696: IFFALSE 39018
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
37698: LD_ADDR_VAR 0 19
37702: PUSH
37703: LD_VAR 0 18
37707: PPUSH
37708: LD_INT 2
37710: PUSH
37711: LD_INT 30
37713: PUSH
37714: LD_INT 29
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 30
37723: PUSH
37724: LD_INT 30
37726: PUSH
37727: EMPTY
37728: LIST
37729: LIST
37730: PUSH
37731: EMPTY
37732: LIST
37733: LIST
37734: LIST
37735: PPUSH
37736: CALL_OW 72
37740: ST_TO_ADDR
// if tmp then
37741: LD_VAR 0 19
37745: IFFALSE 37793
// for i in tmp do
37747: LD_ADDR_VAR 0 8
37751: PUSH
37752: LD_VAR 0 19
37756: PUSH
37757: FOR_IN
37758: IFFALSE 37791
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
37760: LD_VAR 0 8
37764: PPUSH
37765: CALL_OW 250
37769: PPUSH
37770: LD_VAR 0 8
37774: PPUSH
37775: CALL_OW 251
37779: PPUSH
37780: LD_VAR 0 16
37784: PPUSH
37785: CALL_OW 441
37789: GO 37757
37791: POP
37792: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
37793: LD_VAR 0 18
37797: PPUSH
37798: LD_INT 2
37800: PUSH
37801: LD_INT 30
37803: PUSH
37804: LD_INT 32
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 30
37813: PUSH
37814: LD_INT 33
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: PPUSH
37826: CALL_OW 72
37830: IFFALSE 37918
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
37832: LD_ADDR_VAR 0 8
37836: PUSH
37837: LD_VAR 0 18
37841: PPUSH
37842: LD_INT 2
37844: PUSH
37845: LD_INT 30
37847: PUSH
37848: LD_INT 32
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 30
37857: PUSH
37858: LD_INT 33
37860: PUSH
37861: EMPTY
37862: LIST
37863: LIST
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: LIST
37869: PPUSH
37870: CALL_OW 72
37874: PUSH
37875: FOR_IN
37876: IFFALSE 37916
// begin if not GetBWeapon ( i ) then
37878: LD_VAR 0 8
37882: PPUSH
37883: CALL_OW 269
37887: NOT
37888: IFFALSE 37914
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
37890: LD_VAR 0 8
37894: PPUSH
37895: LD_VAR 0 8
37899: PPUSH
37900: LD_VAR 0 2
37904: PPUSH
37905: CALL 39164 0 2
37909: PPUSH
37910: CALL_OW 431
// end ;
37914: GO 37875
37916: POP
37917: POP
// end ; for i = 1 to personel do
37918: LD_ADDR_VAR 0 8
37922: PUSH
37923: DOUBLE
37924: LD_INT 1
37926: DEC
37927: ST_TO_ADDR
37928: LD_VAR 0 6
37932: PUSH
37933: FOR_TO
37934: IFFALSE 38998
// begin if i > 4 then
37936: LD_VAR 0 8
37940: PUSH
37941: LD_INT 4
37943: GREATER
37944: IFFALSE 37948
// break ;
37946: GO 38998
// case i of 1 :
37948: LD_VAR 0 8
37952: PUSH
37953: LD_INT 1
37955: DOUBLE
37956: EQUAL
37957: IFTRUE 37961
37959: GO 38041
37961: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
37962: LD_ADDR_VAR 0 12
37966: PUSH
37967: LD_VAR 0 18
37971: PPUSH
37972: LD_INT 22
37974: PUSH
37975: LD_VAR 0 16
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 58
37986: PUSH
37987: EMPTY
37988: LIST
37989: PUSH
37990: LD_INT 2
37992: PUSH
37993: LD_INT 30
37995: PUSH
37996: LD_INT 32
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 30
38005: PUSH
38006: LD_INT 4
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: PUSH
38013: LD_INT 30
38015: PUSH
38016: LD_INT 5
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: LIST
38033: PPUSH
38034: CALL_OW 72
38038: ST_TO_ADDR
38039: GO 38263
38041: LD_INT 2
38043: DOUBLE
38044: EQUAL
38045: IFTRUE 38049
38047: GO 38111
38049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38050: LD_ADDR_VAR 0 12
38054: PUSH
38055: LD_VAR 0 18
38059: PPUSH
38060: LD_INT 22
38062: PUSH
38063: LD_VAR 0 16
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 2
38074: PUSH
38075: LD_INT 30
38077: PUSH
38078: LD_INT 0
38080: PUSH
38081: EMPTY
38082: LIST
38083: LIST
38084: PUSH
38085: LD_INT 30
38087: PUSH
38088: LD_INT 1
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: LIST
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PPUSH
38104: CALL_OW 72
38108: ST_TO_ADDR
38109: GO 38263
38111: LD_INT 3
38113: DOUBLE
38114: EQUAL
38115: IFTRUE 38119
38117: GO 38181
38119: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38120: LD_ADDR_VAR 0 12
38124: PUSH
38125: LD_VAR 0 18
38129: PPUSH
38130: LD_INT 22
38132: PUSH
38133: LD_VAR 0 16
38137: PUSH
38138: EMPTY
38139: LIST
38140: LIST
38141: PUSH
38142: LD_INT 2
38144: PUSH
38145: LD_INT 30
38147: PUSH
38148: LD_INT 2
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 30
38157: PUSH
38158: LD_INT 3
38160: PUSH
38161: EMPTY
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: LIST
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PPUSH
38174: CALL_OW 72
38178: ST_TO_ADDR
38179: GO 38263
38181: LD_INT 4
38183: DOUBLE
38184: EQUAL
38185: IFTRUE 38189
38187: GO 38262
38189: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38190: LD_ADDR_VAR 0 12
38194: PUSH
38195: LD_VAR 0 18
38199: PPUSH
38200: LD_INT 22
38202: PUSH
38203: LD_VAR 0 16
38207: PUSH
38208: EMPTY
38209: LIST
38210: LIST
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: LD_INT 30
38217: PUSH
38218: LD_INT 6
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: PUSH
38225: LD_INT 30
38227: PUSH
38228: LD_INT 7
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 30
38237: PUSH
38238: LD_INT 8
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PPUSH
38255: CALL_OW 72
38259: ST_TO_ADDR
38260: GO 38263
38262: POP
// if i = 1 then
38263: LD_VAR 0 8
38267: PUSH
38268: LD_INT 1
38270: EQUAL
38271: IFFALSE 38382
// begin tmp := [ ] ;
38273: LD_ADDR_VAR 0 19
38277: PUSH
38278: EMPTY
38279: ST_TO_ADDR
// for j in f do
38280: LD_ADDR_VAR 0 9
38284: PUSH
38285: LD_VAR 0 12
38289: PUSH
38290: FOR_IN
38291: IFFALSE 38364
// if GetBType ( j ) = b_bunker then
38293: LD_VAR 0 9
38297: PPUSH
38298: CALL_OW 266
38302: PUSH
38303: LD_INT 32
38305: EQUAL
38306: IFFALSE 38333
// tmp := Insert ( tmp , 1 , j ) else
38308: LD_ADDR_VAR 0 19
38312: PUSH
38313: LD_VAR 0 19
38317: PPUSH
38318: LD_INT 1
38320: PPUSH
38321: LD_VAR 0 9
38325: PPUSH
38326: CALL_OW 2
38330: ST_TO_ADDR
38331: GO 38362
// tmp := Insert ( tmp , tmp + 1 , j ) ;
38333: LD_ADDR_VAR 0 19
38337: PUSH
38338: LD_VAR 0 19
38342: PPUSH
38343: LD_VAR 0 19
38347: PUSH
38348: LD_INT 1
38350: PLUS
38351: PPUSH
38352: LD_VAR 0 9
38356: PPUSH
38357: CALL_OW 2
38361: ST_TO_ADDR
38362: GO 38290
38364: POP
38365: POP
// if tmp then
38366: LD_VAR 0 19
38370: IFFALSE 38382
// f := tmp ;
38372: LD_ADDR_VAR 0 12
38376: PUSH
38377: LD_VAR 0 19
38381: ST_TO_ADDR
// end ; x := personel [ i ] ;
38382: LD_ADDR_VAR 0 13
38386: PUSH
38387: LD_VAR 0 6
38391: PUSH
38392: LD_VAR 0 8
38396: ARRAY
38397: ST_TO_ADDR
// if x = - 1 then
38398: LD_VAR 0 13
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: EQUAL
38407: IFFALSE 38616
// begin for j in f do
38409: LD_ADDR_VAR 0 9
38413: PUSH
38414: LD_VAR 0 12
38418: PUSH
38419: FOR_IN
38420: IFFALSE 38612
// repeat InitHc ;
38422: CALL_OW 19
// if GetBType ( j ) = b_barracks then
38426: LD_VAR 0 9
38430: PPUSH
38431: CALL_OW 266
38435: PUSH
38436: LD_INT 5
38438: EQUAL
38439: IFFALSE 38509
// begin if UnitsInside ( j ) < 3 then
38441: LD_VAR 0 9
38445: PPUSH
38446: CALL_OW 313
38450: PUSH
38451: LD_INT 3
38453: LESS
38454: IFFALSE 38490
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38456: LD_INT 0
38458: PPUSH
38459: LD_INT 5
38461: PUSH
38462: LD_INT 8
38464: PUSH
38465: LD_INT 9
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: PUSH
38473: LD_VAR 0 17
38477: ARRAY
38478: PPUSH
38479: LD_VAR 0 4
38483: PPUSH
38484: CALL_OW 380
38488: GO 38507
// PrepareHuman ( false , i , skill ) ;
38490: LD_INT 0
38492: PPUSH
38493: LD_VAR 0 8
38497: PPUSH
38498: LD_VAR 0 4
38502: PPUSH
38503: CALL_OW 380
// end else
38507: GO 38526
// PrepareHuman ( false , i , skill ) ;
38509: LD_INT 0
38511: PPUSH
38512: LD_VAR 0 8
38516: PPUSH
38517: LD_VAR 0 4
38521: PPUSH
38522: CALL_OW 380
// un := CreateHuman ;
38526: LD_ADDR_VAR 0 14
38530: PUSH
38531: CALL_OW 44
38535: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38536: LD_ADDR_VAR 0 7
38540: PUSH
38541: LD_VAR 0 7
38545: PPUSH
38546: LD_INT 1
38548: PPUSH
38549: LD_VAR 0 14
38553: PPUSH
38554: CALL_OW 2
38558: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
38559: LD_VAR 0 14
38563: PPUSH
38564: LD_VAR 0 9
38568: PPUSH
38569: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
38573: LD_VAR 0 9
38577: PPUSH
38578: CALL_OW 313
38582: PUSH
38583: LD_INT 6
38585: EQUAL
38586: PUSH
38587: LD_VAR 0 9
38591: PPUSH
38592: CALL_OW 266
38596: PUSH
38597: LD_INT 32
38599: PUSH
38600: LD_INT 31
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: IN
38607: OR
38608: IFFALSE 38422
38610: GO 38419
38612: POP
38613: POP
// end else
38614: GO 38996
// for j = 1 to x do
38616: LD_ADDR_VAR 0 9
38620: PUSH
38621: DOUBLE
38622: LD_INT 1
38624: DEC
38625: ST_TO_ADDR
38626: LD_VAR 0 13
38630: PUSH
38631: FOR_TO
38632: IFFALSE 38994
// begin InitHc ;
38634: CALL_OW 19
// if not f then
38638: LD_VAR 0 12
38642: NOT
38643: IFFALSE 38732
// begin PrepareHuman ( false , i , skill ) ;
38645: LD_INT 0
38647: PPUSH
38648: LD_VAR 0 8
38652: PPUSH
38653: LD_VAR 0 4
38657: PPUSH
38658: CALL_OW 380
// un := CreateHuman ;
38662: LD_ADDR_VAR 0 14
38666: PUSH
38667: CALL_OW 44
38671: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38672: LD_ADDR_VAR 0 7
38676: PUSH
38677: LD_VAR 0 7
38681: PPUSH
38682: LD_INT 1
38684: PPUSH
38685: LD_VAR 0 14
38689: PPUSH
38690: CALL_OW 2
38694: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
38695: LD_VAR 0 14
38699: PPUSH
38700: LD_VAR 0 1
38704: PPUSH
38705: CALL_OW 250
38709: PPUSH
38710: LD_VAR 0 1
38714: PPUSH
38715: CALL_OW 251
38719: PPUSH
38720: LD_INT 10
38722: PPUSH
38723: LD_INT 0
38725: PPUSH
38726: CALL_OW 50
// continue ;
38730: GO 38631
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
38732: LD_VAR 0 12
38736: PUSH
38737: LD_INT 1
38739: ARRAY
38740: PPUSH
38741: CALL_OW 313
38745: PUSH
38746: LD_VAR 0 12
38750: PUSH
38751: LD_INT 1
38753: ARRAY
38754: PPUSH
38755: CALL_OW 266
38759: PUSH
38760: LD_INT 32
38762: PUSH
38763: LD_INT 31
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: IN
38770: AND
38771: PUSH
38772: LD_VAR 0 12
38776: PUSH
38777: LD_INT 1
38779: ARRAY
38780: PPUSH
38781: CALL_OW 313
38785: PUSH
38786: LD_INT 6
38788: EQUAL
38789: OR
38790: IFFALSE 38810
// f := Delete ( f , 1 ) ;
38792: LD_ADDR_VAR 0 12
38796: PUSH
38797: LD_VAR 0 12
38801: PPUSH
38802: LD_INT 1
38804: PPUSH
38805: CALL_OW 3
38809: ST_TO_ADDR
// if not f then
38810: LD_VAR 0 12
38814: NOT
38815: IFFALSE 38833
// begin x := x + 2 ;
38817: LD_ADDR_VAR 0 13
38821: PUSH
38822: LD_VAR 0 13
38826: PUSH
38827: LD_INT 2
38829: PLUS
38830: ST_TO_ADDR
// continue ;
38831: GO 38631
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
38833: LD_VAR 0 12
38837: PUSH
38838: LD_INT 1
38840: ARRAY
38841: PPUSH
38842: CALL_OW 266
38846: PUSH
38847: LD_INT 5
38849: EQUAL
38850: IFFALSE 38924
// begin if UnitsInside ( f [ 1 ] ) < 3 then
38852: LD_VAR 0 12
38856: PUSH
38857: LD_INT 1
38859: ARRAY
38860: PPUSH
38861: CALL_OW 313
38865: PUSH
38866: LD_INT 3
38868: LESS
38869: IFFALSE 38905
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
38871: LD_INT 0
38873: PPUSH
38874: LD_INT 5
38876: PUSH
38877: LD_INT 8
38879: PUSH
38880: LD_INT 9
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: PUSH
38888: LD_VAR 0 17
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 4
38898: PPUSH
38899: CALL_OW 380
38903: GO 38922
// PrepareHuman ( false , i , skill ) ;
38905: LD_INT 0
38907: PPUSH
38908: LD_VAR 0 8
38912: PPUSH
38913: LD_VAR 0 4
38917: PPUSH
38918: CALL_OW 380
// end else
38922: GO 38941
// PrepareHuman ( false , i , skill ) ;
38924: LD_INT 0
38926: PPUSH
38927: LD_VAR 0 8
38931: PPUSH
38932: LD_VAR 0 4
38936: PPUSH
38937: CALL_OW 380
// un := CreateHuman ;
38941: LD_ADDR_VAR 0 14
38945: PUSH
38946: CALL_OW 44
38950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
38951: LD_ADDR_VAR 0 7
38955: PUSH
38956: LD_VAR 0 7
38960: PPUSH
38961: LD_INT 1
38963: PPUSH
38964: LD_VAR 0 14
38968: PPUSH
38969: CALL_OW 2
38973: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
38974: LD_VAR 0 14
38978: PPUSH
38979: LD_VAR 0 12
38983: PUSH
38984: LD_INT 1
38986: ARRAY
38987: PPUSH
38988: CALL_OW 52
// end ;
38992: GO 38631
38994: POP
38995: POP
// end ;
38996: GO 37933
38998: POP
38999: POP
// result := result ^ buildings ;
39000: LD_ADDR_VAR 0 7
39004: PUSH
39005: LD_VAR 0 7
39009: PUSH
39010: LD_VAR 0 18
39014: ADD
39015: ST_TO_ADDR
// end else
39016: GO 39159
// begin for i = 1 to personel do
39018: LD_ADDR_VAR 0 8
39022: PUSH
39023: DOUBLE
39024: LD_INT 1
39026: DEC
39027: ST_TO_ADDR
39028: LD_VAR 0 6
39032: PUSH
39033: FOR_TO
39034: IFFALSE 39157
// begin if i > 4 then
39036: LD_VAR 0 8
39040: PUSH
39041: LD_INT 4
39043: GREATER
39044: IFFALSE 39048
// break ;
39046: GO 39157
// x := personel [ i ] ;
39048: LD_ADDR_VAR 0 13
39052: PUSH
39053: LD_VAR 0 6
39057: PUSH
39058: LD_VAR 0 8
39062: ARRAY
39063: ST_TO_ADDR
// if x = - 1 then
39064: LD_VAR 0 13
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: EQUAL
39073: IFFALSE 39077
// continue ;
39075: GO 39033
// PrepareHuman ( false , i , skill ) ;
39077: LD_INT 0
39079: PPUSH
39080: LD_VAR 0 8
39084: PPUSH
39085: LD_VAR 0 4
39089: PPUSH
39090: CALL_OW 380
// un := CreateHuman ;
39094: LD_ADDR_VAR 0 14
39098: PUSH
39099: CALL_OW 44
39103: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39104: LD_VAR 0 14
39108: PPUSH
39109: LD_VAR 0 1
39113: PPUSH
39114: CALL_OW 250
39118: PPUSH
39119: LD_VAR 0 1
39123: PPUSH
39124: CALL_OW 251
39128: PPUSH
39129: LD_INT 10
39131: PPUSH
39132: LD_INT 0
39134: PPUSH
39135: CALL_OW 50
// result := result ^ un ;
39139: LD_ADDR_VAR 0 7
39143: PUSH
39144: LD_VAR 0 7
39148: PUSH
39149: LD_VAR 0 14
39153: ADD
39154: ST_TO_ADDR
// end ;
39155: GO 39033
39157: POP
39158: POP
// end ; end ;
39159: LD_VAR 0 7
39163: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39164: LD_INT 0
39166: PPUSH
39167: PPUSH
39168: PPUSH
39169: PPUSH
39170: PPUSH
39171: PPUSH
39172: PPUSH
39173: PPUSH
39174: PPUSH
39175: PPUSH
39176: PPUSH
39177: PPUSH
39178: PPUSH
39179: PPUSH
39180: PPUSH
39181: PPUSH
// result := false ;
39182: LD_ADDR_VAR 0 3
39186: PUSH
39187: LD_INT 0
39189: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39190: LD_VAR 0 1
39194: NOT
39195: PUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 266
39205: PUSH
39206: LD_INT 32
39208: PUSH
39209: LD_INT 33
39211: PUSH
39212: EMPTY
39213: LIST
39214: LIST
39215: IN
39216: NOT
39217: OR
39218: IFFALSE 39222
// exit ;
39220: GO 40331
// nat := GetNation ( tower ) ;
39222: LD_ADDR_VAR 0 12
39226: PUSH
39227: LD_VAR 0 1
39231: PPUSH
39232: CALL_OW 248
39236: ST_TO_ADDR
// side := GetSide ( tower ) ;
39237: LD_ADDR_VAR 0 16
39241: PUSH
39242: LD_VAR 0 1
39246: PPUSH
39247: CALL_OW 255
39251: ST_TO_ADDR
// x := GetX ( tower ) ;
39252: LD_ADDR_VAR 0 10
39256: PUSH
39257: LD_VAR 0 1
39261: PPUSH
39262: CALL_OW 250
39266: ST_TO_ADDR
// y := GetY ( tower ) ;
39267: LD_ADDR_VAR 0 11
39271: PUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 251
39281: ST_TO_ADDR
// if not x or not y then
39282: LD_VAR 0 10
39286: NOT
39287: PUSH
39288: LD_VAR 0 11
39292: NOT
39293: OR
39294: IFFALSE 39298
// exit ;
39296: GO 40331
// weapon := 0 ;
39298: LD_ADDR_VAR 0 18
39302: PUSH
39303: LD_INT 0
39305: ST_TO_ADDR
// fac_list := [ ] ;
39306: LD_ADDR_VAR 0 17
39310: PUSH
39311: EMPTY
39312: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
39313: LD_ADDR_VAR 0 6
39317: PUSH
39318: LD_VAR 0 1
39322: PPUSH
39323: CALL_OW 274
39327: PPUSH
39328: LD_VAR 0 2
39332: PPUSH
39333: LD_INT 0
39335: PPUSH
39336: CALL 36902 0 3
39340: PPUSH
39341: LD_INT 30
39343: PUSH
39344: LD_INT 3
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PPUSH
39351: CALL_OW 72
39355: ST_TO_ADDR
// if not factories then
39356: LD_VAR 0 6
39360: NOT
39361: IFFALSE 39365
// exit ;
39363: GO 40331
// for i in factories do
39365: LD_ADDR_VAR 0 8
39369: PUSH
39370: LD_VAR 0 6
39374: PUSH
39375: FOR_IN
39376: IFFALSE 39401
// fac_list := fac_list union AvailableWeaponList ( i ) ;
39378: LD_ADDR_VAR 0 17
39382: PUSH
39383: LD_VAR 0 17
39387: PUSH
39388: LD_VAR 0 8
39392: PPUSH
39393: CALL_OW 478
39397: UNION
39398: ST_TO_ADDR
39399: GO 39375
39401: POP
39402: POP
// if not fac_list then
39403: LD_VAR 0 17
39407: NOT
39408: IFFALSE 39412
// exit ;
39410: GO 40331
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
39412: LD_ADDR_VAR 0 5
39416: PUSH
39417: LD_INT 4
39419: PUSH
39420: LD_INT 5
39422: PUSH
39423: LD_INT 9
39425: PUSH
39426: LD_INT 10
39428: PUSH
39429: LD_INT 6
39431: PUSH
39432: LD_INT 7
39434: PUSH
39435: LD_INT 11
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 27
39449: PUSH
39450: LD_INT 28
39452: PUSH
39453: LD_INT 26
39455: PUSH
39456: LD_INT 30
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: PUSH
39465: LD_INT 43
39467: PUSH
39468: LD_INT 44
39470: PUSH
39471: LD_INT 46
39473: PUSH
39474: LD_INT 45
39476: PUSH
39477: LD_INT 47
39479: PUSH
39480: LD_INT 49
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: LIST
39495: PUSH
39496: LD_VAR 0 12
39500: ARRAY
39501: ST_TO_ADDR
// list := list isect fac_list ;
39502: LD_ADDR_VAR 0 5
39506: PUSH
39507: LD_VAR 0 5
39511: PUSH
39512: LD_VAR 0 17
39516: ISECT
39517: ST_TO_ADDR
// if not list then
39518: LD_VAR 0 5
39522: NOT
39523: IFFALSE 39527
// exit ;
39525: GO 40331
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
39527: LD_VAR 0 12
39531: PUSH
39532: LD_INT 3
39534: EQUAL
39535: PUSH
39536: LD_INT 49
39538: PUSH
39539: LD_VAR 0 5
39543: IN
39544: AND
39545: PUSH
39546: LD_INT 31
39548: PPUSH
39549: LD_VAR 0 16
39553: PPUSH
39554: CALL_OW 321
39558: PUSH
39559: LD_INT 2
39561: EQUAL
39562: AND
39563: IFFALSE 39623
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
39565: LD_INT 22
39567: PUSH
39568: LD_VAR 0 16
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 35
39579: PUSH
39580: LD_INT 49
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 91
39589: PUSH
39590: LD_VAR 0 1
39594: PUSH
39595: LD_INT 10
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: LIST
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: LIST
39607: PPUSH
39608: CALL_OW 69
39612: NOT
39613: IFFALSE 39623
// weapon := ru_time_lapser ;
39615: LD_ADDR_VAR 0 18
39619: PUSH
39620: LD_INT 49
39622: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
39623: LD_VAR 0 12
39627: PUSH
39628: LD_INT 1
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: IN
39638: PUSH
39639: LD_INT 11
39641: PUSH
39642: LD_VAR 0 5
39646: IN
39647: PUSH
39648: LD_INT 30
39650: PUSH
39651: LD_VAR 0 5
39655: IN
39656: OR
39657: AND
39658: PUSH
39659: LD_INT 6
39661: PPUSH
39662: LD_VAR 0 16
39666: PPUSH
39667: CALL_OW 321
39671: PUSH
39672: LD_INT 2
39674: EQUAL
39675: AND
39676: IFFALSE 39841
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
39678: LD_INT 22
39680: PUSH
39681: LD_VAR 0 16
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: PUSH
39693: LD_INT 35
39695: PUSH
39696: LD_INT 11
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 35
39705: PUSH
39706: LD_INT 30
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 91
39720: PUSH
39721: LD_VAR 0 1
39725: PUSH
39726: LD_INT 18
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: LIST
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: LIST
39738: PPUSH
39739: CALL_OW 69
39743: NOT
39744: PUSH
39745: LD_INT 22
39747: PUSH
39748: LD_VAR 0 16
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 2
39759: PUSH
39760: LD_INT 30
39762: PUSH
39763: LD_INT 32
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 30
39772: PUSH
39773: LD_INT 33
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 91
39787: PUSH
39788: LD_VAR 0 1
39792: PUSH
39793: LD_INT 12
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: LIST
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: PPUSH
39809: CALL_OW 69
39813: PUSH
39814: LD_INT 2
39816: GREATER
39817: AND
39818: IFFALSE 39841
// weapon := [ us_radar , ar_radar ] [ nat ] ;
39820: LD_ADDR_VAR 0 18
39824: PUSH
39825: LD_INT 11
39827: PUSH
39828: LD_INT 30
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_VAR 0 12
39839: ARRAY
39840: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
39841: LD_VAR 0 18
39845: NOT
39846: PUSH
39847: LD_INT 40
39849: PPUSH
39850: LD_VAR 0 16
39854: PPUSH
39855: CALL_OW 321
39859: PUSH
39860: LD_INT 2
39862: EQUAL
39863: AND
39864: PUSH
39865: LD_INT 7
39867: PUSH
39868: LD_VAR 0 5
39872: IN
39873: PUSH
39874: LD_INT 28
39876: PUSH
39877: LD_VAR 0 5
39881: IN
39882: OR
39883: PUSH
39884: LD_INT 45
39886: PUSH
39887: LD_VAR 0 5
39891: IN
39892: OR
39893: AND
39894: IFFALSE 40148
// begin hex := GetHexInfo ( x , y ) ;
39896: LD_ADDR_VAR 0 4
39900: PUSH
39901: LD_VAR 0 10
39905: PPUSH
39906: LD_VAR 0 11
39910: PPUSH
39911: CALL_OW 546
39915: ST_TO_ADDR
// if hex [ 1 ] then
39916: LD_VAR 0 4
39920: PUSH
39921: LD_INT 1
39923: ARRAY
39924: IFFALSE 39928
// exit ;
39926: GO 40331
// height := hex [ 2 ] ;
39928: LD_ADDR_VAR 0 15
39932: PUSH
39933: LD_VAR 0 4
39937: PUSH
39938: LD_INT 2
39940: ARRAY
39941: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
39942: LD_ADDR_VAR 0 14
39946: PUSH
39947: LD_INT 0
39949: PUSH
39950: LD_INT 2
39952: PUSH
39953: LD_INT 3
39955: PUSH
39956: LD_INT 5
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: ST_TO_ADDR
// for i in tmp do
39965: LD_ADDR_VAR 0 8
39969: PUSH
39970: LD_VAR 0 14
39974: PUSH
39975: FOR_IN
39976: IFFALSE 40146
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_VAR 0 10
39987: PPUSH
39988: LD_VAR 0 8
39992: PPUSH
39993: LD_INT 5
39995: PPUSH
39996: CALL_OW 272
40000: PUSH
40001: LD_VAR 0 11
40005: PPUSH
40006: LD_VAR 0 8
40010: PPUSH
40011: LD_INT 5
40013: PPUSH
40014: CALL_OW 273
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40023: LD_VAR 0 9
40027: PUSH
40028: LD_INT 1
40030: ARRAY
40031: PPUSH
40032: LD_VAR 0 9
40036: PUSH
40037: LD_INT 2
40039: ARRAY
40040: PPUSH
40041: CALL_OW 488
40045: IFFALSE 40144
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40047: LD_ADDR_VAR 0 4
40051: PUSH
40052: LD_VAR 0 9
40056: PUSH
40057: LD_INT 1
40059: ARRAY
40060: PPUSH
40061: LD_VAR 0 9
40065: PUSH
40066: LD_INT 2
40068: ARRAY
40069: PPUSH
40070: CALL_OW 546
40074: ST_TO_ADDR
// if hex [ 1 ] then
40075: LD_VAR 0 4
40079: PUSH
40080: LD_INT 1
40082: ARRAY
40083: IFFALSE 40087
// continue ;
40085: GO 39975
// h := hex [ 2 ] ;
40087: LD_ADDR_VAR 0 13
40091: PUSH
40092: LD_VAR 0 4
40096: PUSH
40097: LD_INT 2
40099: ARRAY
40100: ST_TO_ADDR
// if h + 7 < height then
40101: LD_VAR 0 13
40105: PUSH
40106: LD_INT 7
40108: PLUS
40109: PUSH
40110: LD_VAR 0 15
40114: LESS
40115: IFFALSE 40144
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40117: LD_ADDR_VAR 0 18
40121: PUSH
40122: LD_INT 7
40124: PUSH
40125: LD_INT 28
40127: PUSH
40128: LD_INT 45
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: LIST
40135: PUSH
40136: LD_VAR 0 12
40140: ARRAY
40141: ST_TO_ADDR
// break ;
40142: GO 40146
// end ; end ; end ;
40144: GO 39975
40146: POP
40147: POP
// end ; if not weapon then
40148: LD_VAR 0 18
40152: NOT
40153: IFFALSE 40213
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40155: LD_ADDR_VAR 0 5
40159: PUSH
40160: LD_VAR 0 5
40164: PUSH
40165: LD_INT 11
40167: PUSH
40168: LD_INT 30
40170: PUSH
40171: LD_INT 49
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: LIST
40178: DIFF
40179: ST_TO_ADDR
// if not list then
40180: LD_VAR 0 5
40184: NOT
40185: IFFALSE 40189
// exit ;
40187: GO 40331
// weapon := list [ rand ( 1 , list ) ] ;
40189: LD_ADDR_VAR 0 18
40193: PUSH
40194: LD_VAR 0 5
40198: PUSH
40199: LD_INT 1
40201: PPUSH
40202: LD_VAR 0 5
40206: PPUSH
40207: CALL_OW 12
40211: ARRAY
40212: ST_TO_ADDR
// end ; if weapon then
40213: LD_VAR 0 18
40217: IFFALSE 40331
// begin tmp := CostOfWeapon ( weapon ) ;
40219: LD_ADDR_VAR 0 14
40223: PUSH
40224: LD_VAR 0 18
40228: PPUSH
40229: CALL_OW 451
40233: ST_TO_ADDR
// j := GetBase ( tower ) ;
40234: LD_ADDR_VAR 0 9
40238: PUSH
40239: LD_VAR 0 1
40243: PPUSH
40244: CALL_OW 274
40248: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
40249: LD_VAR 0 9
40253: PPUSH
40254: LD_INT 1
40256: PPUSH
40257: CALL_OW 275
40261: PUSH
40262: LD_VAR 0 14
40266: PUSH
40267: LD_INT 1
40269: ARRAY
40270: GREATEREQUAL
40271: PUSH
40272: LD_VAR 0 9
40276: PPUSH
40277: LD_INT 2
40279: PPUSH
40280: CALL_OW 275
40284: PUSH
40285: LD_VAR 0 14
40289: PUSH
40290: LD_INT 2
40292: ARRAY
40293: GREATEREQUAL
40294: AND
40295: PUSH
40296: LD_VAR 0 9
40300: PPUSH
40301: LD_INT 3
40303: PPUSH
40304: CALL_OW 275
40308: PUSH
40309: LD_VAR 0 14
40313: PUSH
40314: LD_INT 3
40316: ARRAY
40317: GREATEREQUAL
40318: AND
40319: IFFALSE 40331
// result := weapon ;
40321: LD_ADDR_VAR 0 3
40325: PUSH
40326: LD_VAR 0 18
40330: ST_TO_ADDR
// end ; end ;
40331: LD_VAR 0 3
40335: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
40336: LD_INT 0
40338: PPUSH
40339: PPUSH
// result := true ;
40340: LD_ADDR_VAR 0 3
40344: PUSH
40345: LD_INT 1
40347: ST_TO_ADDR
// if array1 = array2 then
40348: LD_VAR 0 1
40352: PUSH
40353: LD_VAR 0 2
40357: EQUAL
40358: IFFALSE 40418
// begin for i = 1 to array1 do
40360: LD_ADDR_VAR 0 4
40364: PUSH
40365: DOUBLE
40366: LD_INT 1
40368: DEC
40369: ST_TO_ADDR
40370: LD_VAR 0 1
40374: PUSH
40375: FOR_TO
40376: IFFALSE 40414
// if array1 [ i ] <> array2 [ i ] then
40378: LD_VAR 0 1
40382: PUSH
40383: LD_VAR 0 4
40387: ARRAY
40388: PUSH
40389: LD_VAR 0 2
40393: PUSH
40394: LD_VAR 0 4
40398: ARRAY
40399: NONEQUAL
40400: IFFALSE 40412
// begin result := false ;
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_INT 0
40409: ST_TO_ADDR
// break ;
40410: GO 40414
// end ;
40412: GO 40375
40414: POP
40415: POP
// end else
40416: GO 40426
// result := false ;
40418: LD_ADDR_VAR 0 3
40422: PUSH
40423: LD_INT 0
40425: ST_TO_ADDR
// end ;
40426: LD_VAR 0 3
40430: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
40431: LD_INT 0
40433: PPUSH
40434: PPUSH
// if not array1 or not array2 then
40435: LD_VAR 0 1
40439: NOT
40440: PUSH
40441: LD_VAR 0 2
40445: NOT
40446: OR
40447: IFFALSE 40451
// exit ;
40449: GO 40515
// result := true ;
40451: LD_ADDR_VAR 0 3
40455: PUSH
40456: LD_INT 1
40458: ST_TO_ADDR
// for i = 1 to array1 do
40459: LD_ADDR_VAR 0 4
40463: PUSH
40464: DOUBLE
40465: LD_INT 1
40467: DEC
40468: ST_TO_ADDR
40469: LD_VAR 0 1
40473: PUSH
40474: FOR_TO
40475: IFFALSE 40513
// if array1 [ i ] <> array2 [ i ] then
40477: LD_VAR 0 1
40481: PUSH
40482: LD_VAR 0 4
40486: ARRAY
40487: PUSH
40488: LD_VAR 0 2
40492: PUSH
40493: LD_VAR 0 4
40497: ARRAY
40498: NONEQUAL
40499: IFFALSE 40511
// begin result := false ;
40501: LD_ADDR_VAR 0 3
40505: PUSH
40506: LD_INT 0
40508: ST_TO_ADDR
// break ;
40509: GO 40513
// end ;
40511: GO 40474
40513: POP
40514: POP
// end ;
40515: LD_VAR 0 3
40519: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
40520: LD_INT 0
40522: PPUSH
40523: PPUSH
40524: PPUSH
// pom := GetBase ( fac ) ;
40525: LD_ADDR_VAR 0 5
40529: PUSH
40530: LD_VAR 0 1
40534: PPUSH
40535: CALL_OW 274
40539: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
40540: LD_ADDR_VAR 0 4
40544: PUSH
40545: LD_VAR 0 2
40549: PUSH
40550: LD_INT 1
40552: ARRAY
40553: PPUSH
40554: LD_VAR 0 2
40558: PUSH
40559: LD_INT 2
40561: ARRAY
40562: PPUSH
40563: LD_VAR 0 2
40567: PUSH
40568: LD_INT 3
40570: ARRAY
40571: PPUSH
40572: LD_VAR 0 2
40576: PUSH
40577: LD_INT 4
40579: ARRAY
40580: PPUSH
40581: CALL_OW 449
40585: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40586: LD_ADDR_VAR 0 3
40590: PUSH
40591: LD_VAR 0 5
40595: PPUSH
40596: LD_INT 1
40598: PPUSH
40599: CALL_OW 275
40603: PUSH
40604: LD_VAR 0 4
40608: PUSH
40609: LD_INT 1
40611: ARRAY
40612: GREATEREQUAL
40613: PUSH
40614: LD_VAR 0 5
40618: PPUSH
40619: LD_INT 2
40621: PPUSH
40622: CALL_OW 275
40626: PUSH
40627: LD_VAR 0 4
40631: PUSH
40632: LD_INT 2
40634: ARRAY
40635: GREATEREQUAL
40636: AND
40637: PUSH
40638: LD_VAR 0 5
40642: PPUSH
40643: LD_INT 3
40645: PPUSH
40646: CALL_OW 275
40650: PUSH
40651: LD_VAR 0 4
40655: PUSH
40656: LD_INT 3
40658: ARRAY
40659: GREATEREQUAL
40660: AND
40661: ST_TO_ADDR
// end ;
40662: LD_VAR 0 3
40666: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
40667: LD_INT 0
40669: PPUSH
40670: PPUSH
40671: PPUSH
40672: PPUSH
// pom := GetBase ( building ) ;
40673: LD_ADDR_VAR 0 3
40677: PUSH
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 274
40687: ST_TO_ADDR
// if not pom then
40688: LD_VAR 0 3
40692: NOT
40693: IFFALSE 40697
// exit ;
40695: GO 40867
// btype := GetBType ( building ) ;
40697: LD_ADDR_VAR 0 5
40701: PUSH
40702: LD_VAR 0 1
40706: PPUSH
40707: CALL_OW 266
40711: ST_TO_ADDR
// if btype = b_armoury then
40712: LD_VAR 0 5
40716: PUSH
40717: LD_INT 4
40719: EQUAL
40720: IFFALSE 40730
// btype := b_barracks ;
40722: LD_ADDR_VAR 0 5
40726: PUSH
40727: LD_INT 5
40729: ST_TO_ADDR
// if btype = b_depot then
40730: LD_VAR 0 5
40734: PUSH
40735: LD_INT 0
40737: EQUAL
40738: IFFALSE 40748
// btype := b_warehouse ;
40740: LD_ADDR_VAR 0 5
40744: PUSH
40745: LD_INT 1
40747: ST_TO_ADDR
// if btype = b_workshop then
40748: LD_VAR 0 5
40752: PUSH
40753: LD_INT 2
40755: EQUAL
40756: IFFALSE 40766
// btype := b_factory ;
40758: LD_ADDR_VAR 0 5
40762: PUSH
40763: LD_INT 3
40765: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40766: LD_ADDR_VAR 0 4
40770: PUSH
40771: LD_VAR 0 5
40775: PPUSH
40776: LD_VAR 0 1
40780: PPUSH
40781: CALL_OW 248
40785: PPUSH
40786: CALL_OW 450
40790: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40791: LD_ADDR_VAR 0 2
40795: PUSH
40796: LD_VAR 0 3
40800: PPUSH
40801: LD_INT 1
40803: PPUSH
40804: CALL_OW 275
40808: PUSH
40809: LD_VAR 0 4
40813: PUSH
40814: LD_INT 1
40816: ARRAY
40817: GREATEREQUAL
40818: PUSH
40819: LD_VAR 0 3
40823: PPUSH
40824: LD_INT 2
40826: PPUSH
40827: CALL_OW 275
40831: PUSH
40832: LD_VAR 0 4
40836: PUSH
40837: LD_INT 2
40839: ARRAY
40840: GREATEREQUAL
40841: AND
40842: PUSH
40843: LD_VAR 0 3
40847: PPUSH
40848: LD_INT 3
40850: PPUSH
40851: CALL_OW 275
40855: PUSH
40856: LD_VAR 0 4
40860: PUSH
40861: LD_INT 3
40863: ARRAY
40864: GREATEREQUAL
40865: AND
40866: ST_TO_ADDR
// end ;
40867: LD_VAR 0 2
40871: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
40872: LD_INT 0
40874: PPUSH
40875: PPUSH
40876: PPUSH
// pom := GetBase ( building ) ;
40877: LD_ADDR_VAR 0 4
40881: PUSH
40882: LD_VAR 0 1
40886: PPUSH
40887: CALL_OW 274
40891: ST_TO_ADDR
// if not pom then
40892: LD_VAR 0 4
40896: NOT
40897: IFFALSE 40901
// exit ;
40899: GO 41002
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
40901: LD_ADDR_VAR 0 5
40905: PUSH
40906: LD_VAR 0 2
40910: PPUSH
40911: LD_VAR 0 1
40915: PPUSH
40916: CALL_OW 248
40920: PPUSH
40921: CALL_OW 450
40925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
40926: LD_ADDR_VAR 0 3
40930: PUSH
40931: LD_VAR 0 4
40935: PPUSH
40936: LD_INT 1
40938: PPUSH
40939: CALL_OW 275
40943: PUSH
40944: LD_VAR 0 5
40948: PUSH
40949: LD_INT 1
40951: ARRAY
40952: GREATEREQUAL
40953: PUSH
40954: LD_VAR 0 4
40958: PPUSH
40959: LD_INT 2
40961: PPUSH
40962: CALL_OW 275
40966: PUSH
40967: LD_VAR 0 5
40971: PUSH
40972: LD_INT 2
40974: ARRAY
40975: GREATEREQUAL
40976: AND
40977: PUSH
40978: LD_VAR 0 4
40982: PPUSH
40983: LD_INT 3
40985: PPUSH
40986: CALL_OW 275
40990: PUSH
40991: LD_VAR 0 5
40995: PUSH
40996: LD_INT 3
40998: ARRAY
40999: GREATEREQUAL
41000: AND
41001: ST_TO_ADDR
// end ;
41002: LD_VAR 0 3
41006: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41007: LD_INT 0
41009: PPUSH
41010: PPUSH
41011: PPUSH
41012: PPUSH
41013: PPUSH
41014: PPUSH
41015: PPUSH
41016: PPUSH
41017: PPUSH
41018: PPUSH
41019: PPUSH
// result := false ;
41020: LD_ADDR_VAR 0 8
41024: PUSH
41025: LD_INT 0
41027: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41028: LD_VAR 0 5
41032: NOT
41033: PUSH
41034: LD_VAR 0 1
41038: NOT
41039: OR
41040: PUSH
41041: LD_VAR 0 2
41045: NOT
41046: OR
41047: PUSH
41048: LD_VAR 0 3
41052: NOT
41053: OR
41054: IFFALSE 41058
// exit ;
41056: GO 41872
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41058: LD_ADDR_VAR 0 14
41062: PUSH
41063: LD_VAR 0 1
41067: PPUSH
41068: LD_VAR 0 2
41072: PPUSH
41073: LD_VAR 0 3
41077: PPUSH
41078: LD_VAR 0 4
41082: PPUSH
41083: LD_VAR 0 5
41087: PUSH
41088: LD_INT 1
41090: ARRAY
41091: PPUSH
41092: CALL_OW 248
41096: PPUSH
41097: LD_INT 0
41099: PPUSH
41100: CALL 43125 0 6
41104: ST_TO_ADDR
// if not hexes then
41105: LD_VAR 0 14
41109: NOT
41110: IFFALSE 41114
// exit ;
41112: GO 41872
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41114: LD_ADDR_VAR 0 17
41118: PUSH
41119: LD_VAR 0 5
41123: PPUSH
41124: LD_INT 22
41126: PUSH
41127: LD_VAR 0 13
41131: PPUSH
41132: CALL_OW 255
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 2
41143: PUSH
41144: LD_INT 30
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 30
41156: PUSH
41157: LD_INT 1
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PPUSH
41173: CALL_OW 72
41177: ST_TO_ADDR
// for i = 1 to hexes do
41178: LD_ADDR_VAR 0 9
41182: PUSH
41183: DOUBLE
41184: LD_INT 1
41186: DEC
41187: ST_TO_ADDR
41188: LD_VAR 0 14
41192: PUSH
41193: FOR_TO
41194: IFFALSE 41870
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41196: LD_ADDR_VAR 0 13
41200: PUSH
41201: LD_VAR 0 14
41205: PUSH
41206: LD_VAR 0 9
41210: ARRAY
41211: PUSH
41212: LD_INT 1
41214: ARRAY
41215: PPUSH
41216: LD_VAR 0 14
41220: PUSH
41221: LD_VAR 0 9
41225: ARRAY
41226: PUSH
41227: LD_INT 2
41229: ARRAY
41230: PPUSH
41231: CALL_OW 428
41235: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
41236: LD_VAR 0 14
41240: PUSH
41241: LD_VAR 0 9
41245: ARRAY
41246: PUSH
41247: LD_INT 1
41249: ARRAY
41250: PPUSH
41251: LD_VAR 0 14
41255: PUSH
41256: LD_VAR 0 9
41260: ARRAY
41261: PUSH
41262: LD_INT 2
41264: ARRAY
41265: PPUSH
41266: CALL_OW 351
41270: PUSH
41271: LD_VAR 0 14
41275: PUSH
41276: LD_VAR 0 9
41280: ARRAY
41281: PUSH
41282: LD_INT 1
41284: ARRAY
41285: PPUSH
41286: LD_VAR 0 14
41290: PUSH
41291: LD_VAR 0 9
41295: ARRAY
41296: PUSH
41297: LD_INT 2
41299: ARRAY
41300: PPUSH
41301: CALL_OW 488
41305: NOT
41306: OR
41307: PUSH
41308: LD_VAR 0 13
41312: PPUSH
41313: CALL_OW 247
41317: PUSH
41318: LD_INT 3
41320: EQUAL
41321: OR
41322: IFFALSE 41328
// exit ;
41324: POP
41325: POP
41326: GO 41872
// if not tmp then
41328: LD_VAR 0 13
41332: NOT
41333: IFFALSE 41337
// continue ;
41335: GO 41193
// result := true ;
41337: LD_ADDR_VAR 0 8
41341: PUSH
41342: LD_INT 1
41344: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
41345: LD_VAR 0 6
41349: PUSH
41350: LD_VAR 0 13
41354: PPUSH
41355: CALL_OW 247
41359: PUSH
41360: LD_INT 2
41362: EQUAL
41363: AND
41364: PUSH
41365: LD_VAR 0 13
41369: PPUSH
41370: CALL_OW 263
41374: PUSH
41375: LD_INT 1
41377: EQUAL
41378: AND
41379: IFFALSE 41543
// begin if IsDrivenBy ( tmp ) then
41381: LD_VAR 0 13
41385: PPUSH
41386: CALL_OW 311
41390: IFFALSE 41394
// continue ;
41392: GO 41193
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
41394: LD_VAR 0 6
41398: PPUSH
41399: LD_INT 3
41401: PUSH
41402: LD_INT 60
41404: PUSH
41405: EMPTY
41406: LIST
41407: PUSH
41408: EMPTY
41409: LIST
41410: LIST
41411: PUSH
41412: LD_INT 3
41414: PUSH
41415: LD_INT 55
41417: PUSH
41418: EMPTY
41419: LIST
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PPUSH
41429: CALL_OW 72
41433: IFFALSE 41541
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
41435: LD_ADDR_VAR 0 18
41439: PUSH
41440: LD_VAR 0 6
41444: PPUSH
41445: LD_INT 3
41447: PUSH
41448: LD_INT 60
41450: PUSH
41451: EMPTY
41452: LIST
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 3
41460: PUSH
41461: LD_INT 55
41463: PUSH
41464: EMPTY
41465: LIST
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PPUSH
41475: CALL_OW 72
41479: PUSH
41480: LD_INT 1
41482: ARRAY
41483: ST_TO_ADDR
// if IsInUnit ( driver ) then
41484: LD_VAR 0 18
41488: PPUSH
41489: CALL_OW 310
41493: IFFALSE 41504
// ComExit ( driver ) ;
41495: LD_VAR 0 18
41499: PPUSH
41500: CALL 66926 0 1
// AddComEnterUnit ( driver , tmp ) ;
41504: LD_VAR 0 18
41508: PPUSH
41509: LD_VAR 0 13
41513: PPUSH
41514: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
41518: LD_VAR 0 18
41522: PPUSH
41523: LD_VAR 0 7
41527: PPUSH
41528: CALL_OW 173
// AddComExitVehicle ( driver ) ;
41532: LD_VAR 0 18
41536: PPUSH
41537: CALL_OW 181
// end ; continue ;
41541: GO 41193
// end ; if not cleaners or not tmp in cleaners then
41543: LD_VAR 0 6
41547: NOT
41548: PUSH
41549: LD_VAR 0 13
41553: PUSH
41554: LD_VAR 0 6
41558: IN
41559: NOT
41560: OR
41561: IFFALSE 41868
// begin if dep then
41563: LD_VAR 0 17
41567: IFFALSE 41703
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
41569: LD_ADDR_VAR 0 16
41573: PUSH
41574: LD_VAR 0 17
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: PPUSH
41583: CALL_OW 250
41587: PPUSH
41588: LD_VAR 0 17
41592: PUSH
41593: LD_INT 1
41595: ARRAY
41596: PPUSH
41597: CALL_OW 254
41601: PPUSH
41602: LD_INT 5
41604: PPUSH
41605: CALL_OW 272
41609: PUSH
41610: LD_VAR 0 17
41614: PUSH
41615: LD_INT 1
41617: ARRAY
41618: PPUSH
41619: CALL_OW 251
41623: PPUSH
41624: LD_VAR 0 17
41628: PUSH
41629: LD_INT 1
41631: ARRAY
41632: PPUSH
41633: CALL_OW 254
41637: PPUSH
41638: LD_INT 5
41640: PPUSH
41641: CALL_OW 273
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
41650: LD_VAR 0 16
41654: PUSH
41655: LD_INT 1
41657: ARRAY
41658: PPUSH
41659: LD_VAR 0 16
41663: PUSH
41664: LD_INT 2
41666: ARRAY
41667: PPUSH
41668: CALL_OW 488
41672: IFFALSE 41703
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
41674: LD_VAR 0 13
41678: PPUSH
41679: LD_VAR 0 16
41683: PUSH
41684: LD_INT 1
41686: ARRAY
41687: PPUSH
41688: LD_VAR 0 16
41692: PUSH
41693: LD_INT 2
41695: ARRAY
41696: PPUSH
41697: CALL_OW 111
// continue ;
41701: GO 41193
// end ; end ; r := GetDir ( tmp ) ;
41703: LD_ADDR_VAR 0 15
41707: PUSH
41708: LD_VAR 0 13
41712: PPUSH
41713: CALL_OW 254
41717: ST_TO_ADDR
// if r = 5 then
41718: LD_VAR 0 15
41722: PUSH
41723: LD_INT 5
41725: EQUAL
41726: IFFALSE 41736
// r := 0 ;
41728: LD_ADDR_VAR 0 15
41732: PUSH
41733: LD_INT 0
41735: ST_TO_ADDR
// for j = r to 5 do
41736: LD_ADDR_VAR 0 10
41740: PUSH
41741: DOUBLE
41742: LD_VAR 0 15
41746: DEC
41747: ST_TO_ADDR
41748: LD_INT 5
41750: PUSH
41751: FOR_TO
41752: IFFALSE 41866
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
41754: LD_ADDR_VAR 0 11
41758: PUSH
41759: LD_VAR 0 13
41763: PPUSH
41764: CALL_OW 250
41768: PPUSH
41769: LD_VAR 0 10
41773: PPUSH
41774: LD_INT 2
41776: PPUSH
41777: CALL_OW 272
41781: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
41782: LD_ADDR_VAR 0 12
41786: PUSH
41787: LD_VAR 0 13
41791: PPUSH
41792: CALL_OW 251
41796: PPUSH
41797: LD_VAR 0 10
41801: PPUSH
41802: LD_INT 2
41804: PPUSH
41805: CALL_OW 273
41809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
41810: LD_VAR 0 11
41814: PPUSH
41815: LD_VAR 0 12
41819: PPUSH
41820: CALL_OW 488
41824: PUSH
41825: LD_VAR 0 11
41829: PPUSH
41830: LD_VAR 0 12
41834: PPUSH
41835: CALL_OW 428
41839: NOT
41840: AND
41841: IFFALSE 41864
// begin ComMoveXY ( tmp , _x , _y ) ;
41843: LD_VAR 0 13
41847: PPUSH
41848: LD_VAR 0 11
41852: PPUSH
41853: LD_VAR 0 12
41857: PPUSH
41858: CALL_OW 111
// break ;
41862: GO 41866
// end ; end ;
41864: GO 41751
41866: POP
41867: POP
// end ; end ;
41868: GO 41193
41870: POP
41871: POP
// end ;
41872: LD_VAR 0 8
41876: RET
// export function BuildingTechInvented ( side , btype ) ; begin
41877: LD_INT 0
41879: PPUSH
// result := true ;
41880: LD_ADDR_VAR 0 3
41884: PUSH
41885: LD_INT 1
41887: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
41888: LD_VAR 0 2
41892: PUSH
41893: LD_INT 24
41895: DOUBLE
41896: EQUAL
41897: IFTRUE 41907
41899: LD_INT 33
41901: DOUBLE
41902: EQUAL
41903: IFTRUE 41907
41905: GO 41932
41907: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
41908: LD_ADDR_VAR 0 3
41912: PUSH
41913: LD_INT 32
41915: PPUSH
41916: LD_VAR 0 1
41920: PPUSH
41921: CALL_OW 321
41925: PUSH
41926: LD_INT 2
41928: EQUAL
41929: ST_TO_ADDR
41930: GO 42248
41932: LD_INT 20
41934: DOUBLE
41935: EQUAL
41936: IFTRUE 41940
41938: GO 41965
41940: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
41941: LD_ADDR_VAR 0 3
41945: PUSH
41946: LD_INT 6
41948: PPUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: CALL_OW 321
41958: PUSH
41959: LD_INT 2
41961: EQUAL
41962: ST_TO_ADDR
41963: GO 42248
41965: LD_INT 22
41967: DOUBLE
41968: EQUAL
41969: IFTRUE 41979
41971: LD_INT 36
41973: DOUBLE
41974: EQUAL
41975: IFTRUE 41979
41977: GO 42004
41979: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
41980: LD_ADDR_VAR 0 3
41984: PUSH
41985: LD_INT 15
41987: PPUSH
41988: LD_VAR 0 1
41992: PPUSH
41993: CALL_OW 321
41997: PUSH
41998: LD_INT 2
42000: EQUAL
42001: ST_TO_ADDR
42002: GO 42248
42004: LD_INT 30
42006: DOUBLE
42007: EQUAL
42008: IFTRUE 42012
42010: GO 42037
42012: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42013: LD_ADDR_VAR 0 3
42017: PUSH
42018: LD_INT 20
42020: PPUSH
42021: LD_VAR 0 1
42025: PPUSH
42026: CALL_OW 321
42030: PUSH
42031: LD_INT 2
42033: EQUAL
42034: ST_TO_ADDR
42035: GO 42248
42037: LD_INT 28
42039: DOUBLE
42040: EQUAL
42041: IFTRUE 42051
42043: LD_INT 21
42045: DOUBLE
42046: EQUAL
42047: IFTRUE 42051
42049: GO 42076
42051: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42052: LD_ADDR_VAR 0 3
42056: PUSH
42057: LD_INT 21
42059: PPUSH
42060: LD_VAR 0 1
42064: PPUSH
42065: CALL_OW 321
42069: PUSH
42070: LD_INT 2
42072: EQUAL
42073: ST_TO_ADDR
42074: GO 42248
42076: LD_INT 16
42078: DOUBLE
42079: EQUAL
42080: IFTRUE 42084
42082: GO 42109
42084: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42085: LD_ADDR_VAR 0 3
42089: PUSH
42090: LD_INT 84
42092: PPUSH
42093: LD_VAR 0 1
42097: PPUSH
42098: CALL_OW 321
42102: PUSH
42103: LD_INT 2
42105: EQUAL
42106: ST_TO_ADDR
42107: GO 42248
42109: LD_INT 19
42111: DOUBLE
42112: EQUAL
42113: IFTRUE 42123
42115: LD_INT 23
42117: DOUBLE
42118: EQUAL
42119: IFTRUE 42123
42121: GO 42148
42123: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: LD_INT 83
42131: PPUSH
42132: LD_VAR 0 1
42136: PPUSH
42137: CALL_OW 321
42141: PUSH
42142: LD_INT 2
42144: EQUAL
42145: ST_TO_ADDR
42146: GO 42248
42148: LD_INT 17
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42181
42156: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: LD_INT 39
42164: PPUSH
42165: LD_VAR 0 1
42169: PPUSH
42170: CALL_OW 321
42174: PUSH
42175: LD_INT 2
42177: EQUAL
42178: ST_TO_ADDR
42179: GO 42248
42181: LD_INT 18
42183: DOUBLE
42184: EQUAL
42185: IFTRUE 42189
42187: GO 42214
42189: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42190: LD_ADDR_VAR 0 3
42194: PUSH
42195: LD_INT 40
42197: PPUSH
42198: LD_VAR 0 1
42202: PPUSH
42203: CALL_OW 321
42207: PUSH
42208: LD_INT 2
42210: EQUAL
42211: ST_TO_ADDR
42212: GO 42248
42214: LD_INT 27
42216: DOUBLE
42217: EQUAL
42218: IFTRUE 42222
42220: GO 42247
42222: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42223: LD_ADDR_VAR 0 3
42227: PUSH
42228: LD_INT 35
42230: PPUSH
42231: LD_VAR 0 1
42235: PPUSH
42236: CALL_OW 321
42240: PUSH
42241: LD_INT 2
42243: EQUAL
42244: ST_TO_ADDR
42245: GO 42248
42247: POP
// end ;
42248: LD_VAR 0 3
42252: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
42253: LD_INT 0
42255: PPUSH
42256: PPUSH
42257: PPUSH
42258: PPUSH
42259: PPUSH
42260: PPUSH
42261: PPUSH
42262: PPUSH
42263: PPUSH
42264: PPUSH
42265: PPUSH
// result := false ;
42266: LD_ADDR_VAR 0 6
42270: PUSH
42271: LD_INT 0
42273: ST_TO_ADDR
// if btype = b_depot then
42274: LD_VAR 0 2
42278: PUSH
42279: LD_INT 0
42281: EQUAL
42282: IFFALSE 42294
// begin result := true ;
42284: LD_ADDR_VAR 0 6
42288: PUSH
42289: LD_INT 1
42291: ST_TO_ADDR
// exit ;
42292: GO 43120
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
42294: LD_VAR 0 1
42298: NOT
42299: PUSH
42300: LD_VAR 0 1
42304: PPUSH
42305: CALL_OW 266
42309: PUSH
42310: LD_INT 0
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: IN
42320: NOT
42321: OR
42322: PUSH
42323: LD_VAR 0 2
42327: NOT
42328: OR
42329: PUSH
42330: LD_VAR 0 5
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: LD_INT 2
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: LD_INT 4
42349: PUSH
42350: LD_INT 5
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: IN
42361: NOT
42362: OR
42363: PUSH
42364: LD_VAR 0 3
42368: PPUSH
42369: LD_VAR 0 4
42373: PPUSH
42374: CALL_OW 488
42378: NOT
42379: OR
42380: IFFALSE 42384
// exit ;
42382: GO 43120
// side := GetSide ( depot ) ;
42384: LD_ADDR_VAR 0 9
42388: PUSH
42389: LD_VAR 0 1
42393: PPUSH
42394: CALL_OW 255
42398: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
42399: LD_VAR 0 9
42403: PPUSH
42404: LD_VAR 0 2
42408: PPUSH
42409: CALL 41877 0 2
42413: NOT
42414: IFFALSE 42418
// exit ;
42416: GO 43120
// pom := GetBase ( depot ) ;
42418: LD_ADDR_VAR 0 10
42422: PUSH
42423: LD_VAR 0 1
42427: PPUSH
42428: CALL_OW 274
42432: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
42433: LD_ADDR_VAR 0 11
42437: PUSH
42438: LD_VAR 0 2
42442: PPUSH
42443: LD_VAR 0 1
42447: PPUSH
42448: CALL_OW 248
42452: PPUSH
42453: CALL_OW 450
42457: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
42458: LD_VAR 0 10
42462: PPUSH
42463: LD_INT 1
42465: PPUSH
42466: CALL_OW 275
42470: PUSH
42471: LD_VAR 0 11
42475: PUSH
42476: LD_INT 1
42478: ARRAY
42479: GREATEREQUAL
42480: PUSH
42481: LD_VAR 0 10
42485: PPUSH
42486: LD_INT 2
42488: PPUSH
42489: CALL_OW 275
42493: PUSH
42494: LD_VAR 0 11
42498: PUSH
42499: LD_INT 2
42501: ARRAY
42502: GREATEREQUAL
42503: AND
42504: PUSH
42505: LD_VAR 0 10
42509: PPUSH
42510: LD_INT 3
42512: PPUSH
42513: CALL_OW 275
42517: PUSH
42518: LD_VAR 0 11
42522: PUSH
42523: LD_INT 3
42525: ARRAY
42526: GREATEREQUAL
42527: AND
42528: NOT
42529: IFFALSE 42533
// exit ;
42531: GO 43120
// if GetBType ( depot ) = b_depot then
42533: LD_VAR 0 1
42537: PPUSH
42538: CALL_OW 266
42542: PUSH
42543: LD_INT 0
42545: EQUAL
42546: IFFALSE 42558
// dist := 28 else
42548: LD_ADDR_VAR 0 14
42552: PUSH
42553: LD_INT 28
42555: ST_TO_ADDR
42556: GO 42566
// dist := 36 ;
42558: LD_ADDR_VAR 0 14
42562: PUSH
42563: LD_INT 36
42565: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
42566: LD_VAR 0 1
42570: PPUSH
42571: LD_VAR 0 3
42575: PPUSH
42576: LD_VAR 0 4
42580: PPUSH
42581: CALL_OW 297
42585: PUSH
42586: LD_VAR 0 14
42590: GREATER
42591: IFFALSE 42595
// exit ;
42593: GO 43120
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
42595: LD_ADDR_VAR 0 12
42599: PUSH
42600: LD_VAR 0 2
42604: PPUSH
42605: LD_VAR 0 3
42609: PPUSH
42610: LD_VAR 0 4
42614: PPUSH
42615: LD_VAR 0 5
42619: PPUSH
42620: LD_VAR 0 1
42624: PPUSH
42625: CALL_OW 248
42629: PPUSH
42630: LD_INT 0
42632: PPUSH
42633: CALL 43125 0 6
42637: ST_TO_ADDR
// if not hexes then
42638: LD_VAR 0 12
42642: NOT
42643: IFFALSE 42647
// exit ;
42645: GO 43120
// hex := GetHexInfo ( x , y ) ;
42647: LD_ADDR_VAR 0 15
42651: PUSH
42652: LD_VAR 0 3
42656: PPUSH
42657: LD_VAR 0 4
42661: PPUSH
42662: CALL_OW 546
42666: ST_TO_ADDR
// if hex [ 1 ] then
42667: LD_VAR 0 15
42671: PUSH
42672: LD_INT 1
42674: ARRAY
42675: IFFALSE 42679
// exit ;
42677: GO 43120
// height := hex [ 2 ] ;
42679: LD_ADDR_VAR 0 13
42683: PUSH
42684: LD_VAR 0 15
42688: PUSH
42689: LD_INT 2
42691: ARRAY
42692: ST_TO_ADDR
// for i = 1 to hexes do
42693: LD_ADDR_VAR 0 7
42697: PUSH
42698: DOUBLE
42699: LD_INT 1
42701: DEC
42702: ST_TO_ADDR
42703: LD_VAR 0 12
42707: PUSH
42708: FOR_TO
42709: IFFALSE 43039
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
42711: LD_VAR 0 12
42715: PUSH
42716: LD_VAR 0 7
42720: ARRAY
42721: PUSH
42722: LD_INT 1
42724: ARRAY
42725: PPUSH
42726: LD_VAR 0 12
42730: PUSH
42731: LD_VAR 0 7
42735: ARRAY
42736: PUSH
42737: LD_INT 2
42739: ARRAY
42740: PPUSH
42741: CALL_OW 488
42745: NOT
42746: PUSH
42747: LD_VAR 0 12
42751: PUSH
42752: LD_VAR 0 7
42756: ARRAY
42757: PUSH
42758: LD_INT 1
42760: ARRAY
42761: PPUSH
42762: LD_VAR 0 12
42766: PUSH
42767: LD_VAR 0 7
42771: ARRAY
42772: PUSH
42773: LD_INT 2
42775: ARRAY
42776: PPUSH
42777: CALL_OW 428
42781: PUSH
42782: LD_INT 0
42784: GREATER
42785: OR
42786: PUSH
42787: LD_VAR 0 12
42791: PUSH
42792: LD_VAR 0 7
42796: ARRAY
42797: PUSH
42798: LD_INT 1
42800: ARRAY
42801: PPUSH
42802: LD_VAR 0 12
42806: PUSH
42807: LD_VAR 0 7
42811: ARRAY
42812: PUSH
42813: LD_INT 2
42815: ARRAY
42816: PPUSH
42817: CALL_OW 351
42821: OR
42822: IFFALSE 42828
// exit ;
42824: POP
42825: POP
42826: GO 43120
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42828: LD_ADDR_VAR 0 8
42832: PUSH
42833: LD_VAR 0 12
42837: PUSH
42838: LD_VAR 0 7
42842: ARRAY
42843: PUSH
42844: LD_INT 1
42846: ARRAY
42847: PPUSH
42848: LD_VAR 0 12
42852: PUSH
42853: LD_VAR 0 7
42857: ARRAY
42858: PUSH
42859: LD_INT 2
42861: ARRAY
42862: PPUSH
42863: CALL_OW 546
42867: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
42868: LD_VAR 0 8
42872: PUSH
42873: LD_INT 1
42875: ARRAY
42876: PUSH
42877: LD_VAR 0 8
42881: PUSH
42882: LD_INT 2
42884: ARRAY
42885: PUSH
42886: LD_VAR 0 13
42890: PUSH
42891: LD_INT 2
42893: PLUS
42894: GREATER
42895: OR
42896: PUSH
42897: LD_VAR 0 8
42901: PUSH
42902: LD_INT 2
42904: ARRAY
42905: PUSH
42906: LD_VAR 0 13
42910: PUSH
42911: LD_INT 2
42913: MINUS
42914: LESS
42915: OR
42916: PUSH
42917: LD_VAR 0 8
42921: PUSH
42922: LD_INT 3
42924: ARRAY
42925: PUSH
42926: LD_INT 0
42928: PUSH
42929: LD_INT 8
42931: PUSH
42932: LD_INT 9
42934: PUSH
42935: LD_INT 10
42937: PUSH
42938: LD_INT 11
42940: PUSH
42941: LD_INT 12
42943: PUSH
42944: LD_INT 13
42946: PUSH
42947: LD_INT 16
42949: PUSH
42950: LD_INT 17
42952: PUSH
42953: LD_INT 18
42955: PUSH
42956: LD_INT 19
42958: PUSH
42959: LD_INT 20
42961: PUSH
42962: LD_INT 21
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: IN
42980: NOT
42981: OR
42982: PUSH
42983: LD_VAR 0 8
42987: PUSH
42988: LD_INT 5
42990: ARRAY
42991: NOT
42992: OR
42993: PUSH
42994: LD_VAR 0 8
42998: PUSH
42999: LD_INT 6
43001: ARRAY
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: LD_INT 2
43008: PUSH
43009: LD_INT 7
43011: PUSH
43012: LD_INT 9
43014: PUSH
43015: LD_INT 10
43017: PUSH
43018: LD_INT 11
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: IN
43029: NOT
43030: OR
43031: IFFALSE 43037
// exit ;
43033: POP
43034: POP
43035: GO 43120
// end ;
43037: GO 42708
43039: POP
43040: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43041: LD_VAR 0 9
43045: PPUSH
43046: LD_VAR 0 3
43050: PPUSH
43051: LD_VAR 0 4
43055: PPUSH
43056: LD_INT 20
43058: PPUSH
43059: CALL 35043 0 4
43063: PUSH
43064: LD_INT 4
43066: ARRAY
43067: IFFALSE 43071
// exit ;
43069: GO 43120
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43071: LD_VAR 0 2
43075: PUSH
43076: LD_INT 29
43078: PUSH
43079: LD_INT 30
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: IN
43086: PUSH
43087: LD_VAR 0 3
43091: PPUSH
43092: LD_VAR 0 4
43096: PPUSH
43097: LD_VAR 0 9
43101: PPUSH
43102: CALL_OW 440
43106: NOT
43107: AND
43108: IFFALSE 43112
// exit ;
43110: GO 43120
// result := true ;
43112: LD_ADDR_VAR 0 6
43116: PUSH
43117: LD_INT 1
43119: ST_TO_ADDR
// end ;
43120: LD_VAR 0 6
43124: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43125: LD_INT 0
43127: PPUSH
43128: PPUSH
43129: PPUSH
43130: PPUSH
43131: PPUSH
43132: PPUSH
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
43149: PPUSH
43150: PPUSH
43151: PPUSH
43152: PPUSH
43153: PPUSH
43154: PPUSH
43155: PPUSH
43156: PPUSH
43157: PPUSH
43158: PPUSH
43159: PPUSH
43160: PPUSH
43161: PPUSH
43162: PPUSH
43163: PPUSH
43164: PPUSH
43165: PPUSH
43166: PPUSH
43167: PPUSH
43168: PPUSH
43169: PPUSH
43170: PPUSH
43171: PPUSH
43172: PPUSH
43173: PPUSH
43174: PPUSH
43175: PPUSH
43176: PPUSH
43177: PPUSH
43178: PPUSH
43179: PPUSH
43180: PPUSH
43181: PPUSH
43182: PPUSH
43183: PPUSH
43184: PPUSH
// result = [ ] ;
43185: LD_ADDR_VAR 0 7
43189: PUSH
43190: EMPTY
43191: ST_TO_ADDR
// temp_list = [ ] ;
43192: LD_ADDR_VAR 0 9
43196: PUSH
43197: EMPTY
43198: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43199: LD_VAR 0 4
43203: PUSH
43204: LD_INT 0
43206: PUSH
43207: LD_INT 1
43209: PUSH
43210: LD_INT 2
43212: PUSH
43213: LD_INT 3
43215: PUSH
43216: LD_INT 4
43218: PUSH
43219: LD_INT 5
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: IN
43230: NOT
43231: PUSH
43232: LD_VAR 0 1
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: IN
43247: PUSH
43248: LD_VAR 0 5
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: LD_INT 3
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: LIST
43266: IN
43267: NOT
43268: AND
43269: OR
43270: IFFALSE 43274
// exit ;
43272: GO 61665
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
43274: LD_VAR 0 1
43278: PUSH
43279: LD_INT 6
43281: PUSH
43282: LD_INT 7
43284: PUSH
43285: LD_INT 8
43287: PUSH
43288: LD_INT 13
43290: PUSH
43291: LD_INT 12
43293: PUSH
43294: LD_INT 15
43296: PUSH
43297: LD_INT 11
43299: PUSH
43300: LD_INT 14
43302: PUSH
43303: LD_INT 10
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: IN
43317: IFFALSE 43327
// btype = b_lab ;
43319: LD_ADDR_VAR 0 1
43323: PUSH
43324: LD_INT 6
43326: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
43327: LD_VAR 0 6
43331: PUSH
43332: LD_INT 0
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: IN
43346: NOT
43347: PUSH
43348: LD_VAR 0 1
43352: PUSH
43353: LD_INT 0
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: LD_INT 2
43361: PUSH
43362: LD_INT 3
43364: PUSH
43365: LD_INT 6
43367: PUSH
43368: LD_INT 36
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: LD_INT 31
43379: PUSH
43380: LD_INT 32
43382: PUSH
43383: LD_INT 33
43385: PUSH
43386: EMPTY
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: IN
43399: NOT
43400: PUSH
43401: LD_VAR 0 6
43405: PUSH
43406: LD_INT 1
43408: EQUAL
43409: AND
43410: OR
43411: PUSH
43412: LD_VAR 0 1
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 3
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: IN
43427: NOT
43428: PUSH
43429: LD_VAR 0 6
43433: PUSH
43434: LD_INT 2
43436: EQUAL
43437: AND
43438: OR
43439: IFFALSE 43449
// mode = 0 ;
43441: LD_ADDR_VAR 0 6
43445: PUSH
43446: LD_INT 0
43448: ST_TO_ADDR
// case mode of 0 :
43449: LD_VAR 0 6
43453: PUSH
43454: LD_INT 0
43456: DOUBLE
43457: EQUAL
43458: IFTRUE 43462
43460: GO 54915
43462: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43463: LD_ADDR_VAR 0 11
43467: PUSH
43468: LD_INT 0
43470: PUSH
43471: LD_INT 0
43473: PUSH
43474: EMPTY
43475: LIST
43476: LIST
43477: PUSH
43478: LD_INT 0
43480: PUSH
43481: LD_INT 1
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: PUSH
43492: LD_INT 0
43494: PUSH
43495: EMPTY
43496: LIST
43497: LIST
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: LD_INT 1
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 1
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 2
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 0
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: LD_INT 2
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 2
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 3
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 3
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 2
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43656: LD_ADDR_VAR 0 12
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: LD_INT 0
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: LD_INT 0
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 0
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: LD_INT 0
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 1
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 2
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: NEG
43769: PUSH
43770: LD_INT 1
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 2
43779: NEG
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 2
43790: NEG
43791: PUSH
43792: LD_INT 1
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 2
43802: NEG
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 3
43813: NEG
43814: PUSH
43815: LD_INT 0
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: NEG
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43852: LD_ADDR_VAR 0 13
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 1
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: NEG
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: NEG
43922: PUSH
43923: LD_INT 1
43925: NEG
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 1
43933: NEG
43934: PUSH
43935: LD_INT 2
43937: NEG
43938: PUSH
43939: EMPTY
43940: LIST
43941: LIST
43942: PUSH
43943: LD_INT 2
43945: PUSH
43946: LD_INT 1
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 2
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 2
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 2
43975: NEG
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 2
43987: NEG
43988: PUSH
43989: LD_INT 2
43991: NEG
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 2
43999: NEG
44000: PUSH
44001: LD_INT 3
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 3
44011: NEG
44012: PUSH
44013: LD_INT 2
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 3
44023: NEG
44024: PUSH
44025: LD_INT 3
44027: NEG
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: EMPTY
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44051: LD_ADDR_VAR 0 14
44055: PUSH
44056: LD_INT 0
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 0
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 0
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: PUSH
44087: LD_INT 1
44089: PUSH
44090: LD_INT 1
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 0
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 1
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: PUSH
44167: LD_INT 2
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 0
44176: PUSH
44177: LD_INT 2
44179: PUSH
44180: EMPTY
44181: LIST
44182: LIST
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: NEG
44198: PUSH
44199: LD_INT 3
44201: NEG
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 0
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: EMPTY
44215: LIST
44216: LIST
44217: PUSH
44218: LD_INT 1
44220: PUSH
44221: LD_INT 2
44223: NEG
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44247: LD_ADDR_VAR 0 15
44251: PUSH
44252: LD_INT 0
44254: PUSH
44255: LD_INT 0
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 0
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: LD_INT 0
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 1
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: NEG
44317: PUSH
44318: LD_INT 1
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: LD_INT 0
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 2
44381: NEG
44382: PUSH
44383: LD_INT 1
44385: NEG
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 2
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 3
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 3
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
44440: LD_ADDR_VAR 0 16
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: LD_INT 2
44525: NEG
44526: PUSH
44527: EMPTY
44528: LIST
44529: LIST
44530: PUSH
44531: LD_INT 2
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: LD_INT 2
44543: PUSH
44544: LD_INT 2
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: LD_INT 2
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 2
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: NEG
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 2
44575: NEG
44576: PUSH
44577: LD_INT 2
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 3
44587: PUSH
44588: LD_INT 2
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 3
44597: PUSH
44598: LD_INT 3
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: LD_INT 3
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44633: LD_ADDR_VAR 0 17
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 0
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 1
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 1
44691: NEG
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: LD_INT 2
44718: NEG
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: LD_INT 2
44729: NEG
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: LD_INT 1
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 2
44748: PUSH
44749: LD_INT 0
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 2
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: PUSH
44766: LD_INT 2
44768: PUSH
44769: LD_INT 2
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 2
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 0
44788: PUSH
44789: LD_INT 2
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: NEG
44799: PUSH
44800: LD_INT 1
44802: PUSH
44803: EMPTY
44804: LIST
44805: LIST
44806: PUSH
44807: LD_INT 2
44809: NEG
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 2
44820: NEG
44821: PUSH
44822: LD_INT 1
44824: NEG
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 2
44832: NEG
44833: PUSH
44834: LD_INT 2
44836: NEG
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44863: LD_ADDR_VAR 0 18
44867: PUSH
44868: LD_INT 0
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 0
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 1
44901: PUSH
44902: LD_INT 1
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 0
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: NEG
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 1
44936: NEG
44937: PUSH
44938: EMPTY
44939: LIST
44940: LIST
44941: PUSH
44942: LD_INT 1
44944: NEG
44945: PUSH
44946: LD_INT 2
44948: NEG
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: PUSH
44968: LD_INT 1
44970: NEG
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: PUSH
44979: LD_INT 0
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: PUSH
44999: LD_INT 2
45001: PUSH
45002: EMPTY
45003: LIST
45004: LIST
45005: PUSH
45006: LD_INT 1
45008: PUSH
45009: LD_INT 2
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 0
45018: PUSH
45019: LD_INT 2
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: NEG
45029: PUSH
45030: LD_INT 1
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 2
45039: NEG
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 2
45050: NEG
45051: PUSH
45052: LD_INT 1
45054: NEG
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 2
45062: NEG
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: EMPTY
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45093: LD_ADDR_VAR 0 19
45097: PUSH
45098: LD_INT 0
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: LD_INT 1
45113: NEG
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 0
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 1
45131: PUSH
45132: LD_INT 1
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: LD_INT 1
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: LD_INT 1
45166: NEG
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: PUSH
45172: LD_INT 1
45174: NEG
45175: PUSH
45176: LD_INT 2
45178: NEG
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: LD_INT 2
45189: NEG
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: LD_INT 1
45200: NEG
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 2
45208: PUSH
45209: LD_INT 0
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 2
45218: PUSH
45219: LD_INT 1
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 2
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: LD_INT 2
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: LD_INT 1
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 2
45280: NEG
45281: PUSH
45282: LD_INT 1
45284: NEG
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: PUSH
45290: LD_INT 2
45292: NEG
45293: PUSH
45294: LD_INT 2
45296: NEG
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: LIST
45306: LIST
45307: LIST
45308: LIST
45309: LIST
45310: LIST
45311: LIST
45312: LIST
45313: LIST
45314: LIST
45315: LIST
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45323: LD_ADDR_VAR 0 20
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 1
45343: NEG
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 0
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 1
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 0
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: NEG
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 1
45392: NEG
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 2
45408: NEG
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: LD_INT 2
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: PUSH
45428: LD_INT 1
45430: NEG
45431: PUSH
45432: EMPTY
45433: LIST
45434: LIST
45435: PUSH
45436: LD_INT 2
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: PUSH
45446: LD_INT 2
45448: PUSH
45449: LD_INT 1
45451: PUSH
45452: EMPTY
45453: LIST
45454: LIST
45455: PUSH
45456: LD_INT 2
45458: PUSH
45459: LD_INT 2
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 2
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: LD_INT 2
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: NEG
45489: PUSH
45490: LD_INT 1
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: NEG
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 2
45510: NEG
45511: PUSH
45512: LD_INT 1
45514: NEG
45515: PUSH
45516: EMPTY
45517: LIST
45518: LIST
45519: PUSH
45520: LD_INT 2
45522: NEG
45523: PUSH
45524: LD_INT 2
45526: NEG
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: LIST
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: LIST
45545: LIST
45546: LIST
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: LIST
45552: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45553: LD_ADDR_VAR 0 21
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 0
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: LD_INT 1
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 0
45601: PUSH
45602: LD_INT 1
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 1
45611: NEG
45612: PUSH
45613: LD_INT 0
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 1
45622: NEG
45623: PUSH
45624: LD_INT 1
45626: NEG
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: LD_INT 2
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: LD_INT 2
45649: NEG
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: PUSH
45658: LD_INT 1
45660: NEG
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: LD_INT 0
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 1
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 2
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 2
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: NEG
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: NEG
45730: PUSH
45731: LD_INT 0
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 2
45740: NEG
45741: PUSH
45742: LD_INT 1
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: LD_INT 2
45752: NEG
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: LIST
45782: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45783: LD_ADDR_VAR 0 22
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 0
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: LD_INT 1
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: LD_INT 1
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 1
45841: NEG
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: EMPTY
45847: LIST
45848: LIST
45849: PUSH
45850: LD_INT 1
45852: NEG
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: LD_INT 2
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: LD_INT 2
45879: NEG
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 2
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 2
45918: PUSH
45919: LD_INT 2
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 2
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: NEG
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 2
45970: NEG
45971: PUSH
45972: LD_INT 1
45974: NEG
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 2
45982: NEG
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: LIST
45996: LIST
45997: LIST
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46013: LD_ADDR_VAR 0 23
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 0
46030: PUSH
46031: LD_INT 1
46033: NEG
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 1
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 0
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 1
46082: NEG
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: LD_INT 2
46098: NEG
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 2
46109: NEG
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 1
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 2
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: NEG
46179: PUSH
46180: LD_INT 1
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: NEG
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: EMPTY
46195: LIST
46196: LIST
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: LD_INT 1
46204: NEG
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 2
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 2
46224: NEG
46225: PUSH
46226: LD_INT 3
46228: NEG
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 3
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: PUSH
46249: LD_INT 2
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 2
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
46293: LD_ADDR_VAR 0 24
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 0
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 1
46313: NEG
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: LD_INT 0
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 0
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 1
46366: NEG
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 1
46374: NEG
46375: PUSH
46376: LD_INT 2
46378: NEG
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 1
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 2
46492: NEG
46493: PUSH
46494: LD_INT 2
46496: NEG
46497: PUSH
46498: EMPTY
46499: LIST
46500: LIST
46501: PUSH
46502: LD_INT 1
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 2
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 3
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 3
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
46569: LD_ADDR_VAR 0 25
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: LD_INT 1
46589: NEG
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 1
46627: NEG
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: NEG
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 1
46650: NEG
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 0
46662: PUSH
46663: LD_INT 2
46665: NEG
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 2
46684: PUSH
46685: LD_INT 0
46687: PUSH
46688: EMPTY
46689: LIST
46690: LIST
46691: PUSH
46692: LD_INT 2
46694: PUSH
46695: LD_INT 1
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 2
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 2
46727: PUSH
46728: EMPTY
46729: LIST
46730: LIST
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: NEG
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 2
46756: NEG
46757: PUSH
46758: LD_INT 1
46760: NEG
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 2
46768: NEG
46769: PUSH
46770: LD_INT 2
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: LD_INT 3
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 1
46810: PUSH
46811: LD_INT 3
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
46843: LD_ADDR_VAR 0 26
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: LD_INT 2
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: LD_INT 1
46950: NEG
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 2
46958: PUSH
46959: LD_INT 0
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 1
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: LD_INT 2
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 2
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: NEG
47009: PUSH
47010: LD_INT 1
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 2
47019: NEG
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 2
47030: NEG
47031: PUSH
47032: LD_INT 1
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: LD_INT 2
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: LD_INT 2
47054: PUSH
47055: LD_INT 3
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: LD_INT 3
47067: PUSH
47068: EMPTY
47069: LIST
47070: LIST
47071: PUSH
47072: LD_INT 1
47074: NEG
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: NEG
47086: PUSH
47087: LD_INT 1
47089: PUSH
47090: EMPTY
47091: LIST
47092: LIST
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: LIST
47098: LIST
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47119: LD_ADDR_VAR 0 27
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 0
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 1
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: LD_INT 1
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: EMPTY
47195: LIST
47196: LIST
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 0
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 0
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 2
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 2
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: NEG
47365: PUSH
47366: LD_INT 2
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47399: LD_ADDR_VAR 0 28
47403: PUSH
47404: LD_INT 0
47406: PUSH
47407: LD_INT 0
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: LD_INT 0
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PUSH
47435: LD_INT 1
47437: PUSH
47438: LD_INT 1
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: NEG
47469: PUSH
47470: LD_INT 1
47472: NEG
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 2
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: EMPTY
47509: LIST
47510: LIST
47511: PUSH
47512: LD_INT 2
47514: PUSH
47515: LD_INT 0
47517: PUSH
47518: EMPTY
47519: LIST
47520: LIST
47521: PUSH
47522: LD_INT 2
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 2
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 2
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 2
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 2
47575: NEG
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 2
47586: NEG
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: NEG
47599: PUSH
47600: LD_INT 2
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 3
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: LD_INT 3
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 3
47634: NEG
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 3
47646: NEG
47647: PUSH
47648: LD_INT 2
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
47681: LD_ADDR_VAR 0 29
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: NEG
47751: PUSH
47752: LD_INT 1
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 2
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 2
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 1
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 2
47847: NEG
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 2
47859: NEG
47860: PUSH
47861: LD_INT 2
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: NEG
47872: PUSH
47873: LD_INT 3
47875: NEG
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 3
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 1
47914: NEG
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 3
47925: NEG
47926: PUSH
47927: LD_INT 2
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: LIST
47943: LIST
47944: LIST
47945: LIST
47946: LIST
47947: LIST
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47960: LD_ADDR_VAR 0 30
47964: PUSH
47965: LD_INT 0
47967: PUSH
47968: LD_INT 0
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 0
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: NEG
48019: PUSH
48020: LD_INT 0
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: LD_INT 1
48029: NEG
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 3
48153: NEG
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: LD_INT 2
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 3
48172: PUSH
48173: LD_INT 2
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 2
48182: PUSH
48183: LD_INT 3
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 2
48192: NEG
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: EMPTY
48198: LIST
48199: LIST
48200: PUSH
48201: LD_INT 3
48203: NEG
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48238: LD_ADDR_VAR 0 31
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: LD_INT 2
48342: PUSH
48343: LD_INT 0
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 2
48352: PUSH
48353: LD_INT 1
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 2
48362: PUSH
48363: LD_INT 2
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: LD_INT 1
48372: PUSH
48373: LD_INT 2
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PUSH
48380: LD_INT 0
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 1
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 3
48431: NEG
48432: PUSH
48433: EMPTY
48434: LIST
48435: LIST
48436: PUSH
48437: LD_INT 2
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: PUSH
48448: LD_INT 3
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 3
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: LD_INT 2
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 3
48481: NEG
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48516: LD_ADDR_VAR 0 32
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 0
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 1
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: NEG
48575: PUSH
48576: LD_INT 0
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 1
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: NEG
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 2
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 1
48620: PUSH
48621: LD_INT 1
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: EMPTY
48646: LIST
48647: LIST
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: LD_INT 2
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: LD_INT 2
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: NEG
48694: PUSH
48695: LD_INT 1
48697: NEG
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: NEG
48706: PUSH
48707: LD_INT 3
48709: NEG
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: LD_INT 2
48720: NEG
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 3
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: LD_INT 3
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 1
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48794: LD_ADDR_VAR 0 33
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 1
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: LD_INT 1
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: NEG
48985: PUSH
48986: LD_INT 3
48988: NEG
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 3
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 3
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 3
49038: NEG
49039: PUSH
49040: LD_INT 2
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49073: LD_ADDR_VAR 0 34
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: LD_INT 0
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 0
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: LD_INT 1
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 1
49131: NEG
49132: PUSH
49133: LD_INT 0
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 1
49142: NEG
49143: PUSH
49144: LD_INT 1
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 2
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 0
49166: PUSH
49167: LD_INT 2
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: LD_INT 2
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 1
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 2
49229: NEG
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 2
49240: NEG
49241: PUSH
49242: LD_INT 1
49244: NEG
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: NEG
49265: PUSH
49266: LD_INT 3
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: NEG
49280: PUSH
49281: EMPTY
49282: LIST
49283: LIST
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 2
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 2
49307: NEG
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 3
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: LIST
49351: LIST
49352: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49353: LD_ADDR_VAR 0 35
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 0
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: PUSH
49389: LD_INT 1
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 0
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: LD_INT 0
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: NEG
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 2
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49465: LD_ADDR_VAR 0 36
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: EMPTY
49477: LIST
49478: LIST
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 1
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 0
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 1
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 2
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49577: LD_ADDR_VAR 0 37
49581: PUSH
49582: LD_INT 0
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 1
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
49689: LD_ADDR_VAR 0 38
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 2
49770: PUSH
49771: LD_INT 1
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
49801: LD_ADDR_VAR 0 39
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 1
49821: NEG
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 1
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: LD_INT 0
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 2
49886: NEG
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
49913: LD_ADDR_VAR 0 40
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 0
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 0
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: LIST
50018: LIST
50019: LIST
50020: LIST
50021: LIST
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50025: LD_ADDR_VAR 0 41
50029: PUSH
50030: LD_INT 0
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 1
50053: PUSH
50054: LD_INT 0
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 1
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: NEG
50084: PUSH
50085: LD_INT 0
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 1
50094: NEG
50095: PUSH
50096: LD_INT 1
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 2
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 2
50129: PUSH
50130: LD_INT 0
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 2
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 2
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 2
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 1
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 2
50203: NEG
50204: PUSH
50205: LD_INT 2
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: NEG
50216: PUSH
50217: LD_INT 3
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 2
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 3
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 3
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 3
50258: PUSH
50259: LD_INT 2
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 3
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 2
50288: NEG
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 3
50322: NEG
50323: PUSH
50324: LD_INT 2
50326: NEG
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: NEG
50335: PUSH
50336: LD_INT 3
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50375: LD_ADDR_VAR 0 42
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 0
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 1
50395: NEG
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 1
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 0
50423: PUSH
50424: LD_INT 1
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 0
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 1
50456: NEG
50457: PUSH
50458: LD_INT 2
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 0
50468: PUSH
50469: LD_INT 2
50471: NEG
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 1
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: PUSH
50501: LD_INT 2
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 1
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: LD_INT 2
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: NEG
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: NEG
50542: PUSH
50543: LD_INT 1
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 2
50553: NEG
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 2
50565: NEG
50566: PUSH
50567: LD_INT 3
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 0
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: LD_INT 2
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 3
50621: PUSH
50622: LD_INT 3
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: LD_INT 3
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: LD_INT 3
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: LD_INT 3
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: LD_INT 2
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 3
50672: NEG
50673: PUSH
50674: LD_INT 2
50676: NEG
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 3
50684: NEG
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: EMPTY
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50725: LD_ADDR_VAR 0 43
50729: PUSH
50730: LD_INT 0
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 0
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 1
50783: NEG
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: LD_INT 0
50818: PUSH
50819: LD_INT 2
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 0
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 2
50850: PUSH
50851: LD_INT 1
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 1
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 1
50880: NEG
50881: PUSH
50882: LD_INT 1
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: NEG
50892: PUSH
50893: LD_INT 0
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 1
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 0
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 2
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: LD_INT 1
50951: NEG
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 3
50959: PUSH
50960: LD_INT 0
50962: PUSH
50963: EMPTY
50964: LIST
50965: LIST
50966: PUSH
50967: LD_INT 3
50969: PUSH
50970: LD_INT 1
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 1
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 2
51010: NEG
51011: PUSH
51012: LD_INT 1
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 3
51021: NEG
51022: PUSH
51023: LD_INT 0
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 3
51032: NEG
51033: PUSH
51034: LD_INT 1
51036: NEG
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51073: LD_ADDR_VAR 0 44
51077: PUSH
51078: LD_INT 0
51080: PUSH
51081: LD_INT 0
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 1
51093: NEG
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 0
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: LD_INT 2
51158: NEG
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 0
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 2
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: PUSH
51198: LD_INT 2
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: NEG
51229: PUSH
51230: LD_INT 0
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: NEG
51252: PUSH
51253: LD_INT 2
51255: NEG
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 2
51263: NEG
51264: PUSH
51265: LD_INT 3
51267: NEG
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 3
51286: PUSH
51287: LD_INT 0
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 3
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 3
51306: PUSH
51307: LD_INT 2
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 3
51316: PUSH
51317: LD_INT 3
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 2
51326: PUSH
51327: LD_INT 3
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: LD_INT 1
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 3
51347: NEG
51348: PUSH
51349: LD_INT 0
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: NEG
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 3
51370: NEG
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 3
51382: NEG
51383: PUSH
51384: LD_INT 3
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: LIST
51421: LIST
51422: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51423: LD_ADDR_VAR 0 45
51427: PUSH
51428: LD_INT 0
51430: PUSH
51431: LD_INT 0
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: LD_INT 1
51443: NEG
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 1
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 1
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 1
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: LD_INT 2
51508: NEG
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 0
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 2
51548: PUSH
51549: LD_INT 2
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: LD_INT 2
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 0
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: NEG
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: NEG
51602: PUSH
51603: LD_INT 2
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 2
51613: NEG
51614: PUSH
51615: LD_INT 3
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: LD_INT 3
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 3
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: LD_INT 2
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 3
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 3
51669: PUSH
51670: LD_INT 3
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: LD_INT 3
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 0
51699: PUSH
51700: LD_INT 3
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 1
51709: NEG
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: NEG
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 3
51732: NEG
51733: PUSH
51734: LD_INT 3
51736: NEG
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51773: LD_ADDR_VAR 0 46
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 0
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 0
51790: PUSH
51791: LD_INT 1
51793: NEG
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: LD_INT 0
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 1
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 1
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 1
51854: NEG
51855: PUSH
51856: LD_INT 2
51858: NEG
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: LD_INT 2
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 3
51977: NEG
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 2
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: EMPTY
52002: LIST
52003: LIST
52004: PUSH
52005: LD_INT 3
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: LD_INT 1
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 3
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 0
52037: PUSH
52038: LD_INT 3
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 3
52069: NEG
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 3
52080: NEG
52081: PUSH
52082: LD_INT 1
52084: NEG
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: LIST
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: LIST
52116: LIST
52117: LIST
52118: LIST
52119: LIST
52120: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52121: LD_ADDR_VAR 0 47
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: LD_INT 0
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 1
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: LD_INT 1
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 0
52169: PUSH
52170: LD_INT 1
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: LD_INT 1
52179: NEG
52180: PUSH
52181: LD_INT 0
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: LD_INT 2
52206: NEG
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: PUSH
52212: LD_INT 0
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 2
52236: NEG
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 2
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52272: LD_ADDR_VAR 0 48
52276: PUSH
52277: LD_INT 0
52279: PUSH
52280: LD_INT 0
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 0
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: PUSH
52328: LD_INT 1
52330: NEG
52331: PUSH
52332: LD_INT 0
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 1
52353: NEG
52354: PUSH
52355: LD_INT 2
52357: NEG
52358: PUSH
52359: EMPTY
52360: LIST
52361: LIST
52362: PUSH
52363: LD_INT 0
52365: PUSH
52366: LD_INT 2
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 2
52387: PUSH
52388: LD_INT 0
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 1
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52419: LD_ADDR_VAR 0 49
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: LD_INT 0
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 0
52436: PUSH
52437: LD_INT 1
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 1
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: PUSH
52458: LD_INT 1
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 0
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 1
52477: NEG
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 1
52488: NEG
52489: PUSH
52490: LD_INT 1
52492: NEG
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 2
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 2
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 2
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52563: LD_ADDR_VAR 0 50
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: LD_INT 0
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 0
52580: PUSH
52581: LD_INT 1
52583: NEG
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: PUSH
52592: LD_INT 0
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: LD_INT 1
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: LD_INT 0
52611: PUSH
52612: LD_INT 1
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: LD_INT 0
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 1
52632: NEG
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 2
52644: PUSH
52645: LD_INT 1
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 2
52654: PUSH
52655: LD_INT 2
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 2
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 0
52674: PUSH
52675: LD_INT 2
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52707: LD_ADDR_VAR 0 51
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 1
52727: NEG
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 0
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 1
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 0
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 1
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 2
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 0
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 1
52808: NEG
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52854: LD_ADDR_VAR 0 52
52858: PUSH
52859: LD_INT 0
52861: PUSH
52862: LD_INT 0
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: PUSH
52869: LD_INT 0
52871: PUSH
52872: LD_INT 1
52874: NEG
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 1
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 1
52912: NEG
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: EMPTY
52918: LIST
52919: LIST
52920: PUSH
52921: LD_INT 1
52923: NEG
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: NEG
52948: PUSH
52949: LD_INT 1
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 2
52958: NEG
52959: PUSH
52960: LD_INT 0
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 2
52969: NEG
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 2
52985: NEG
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53005: LD_ADDR_VAR 0 53
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 0
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: LD_INT 1
53025: NEG
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 1
53033: PUSH
53034: LD_INT 0
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: LD_INT 1
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 1
53078: NEG
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: PUSH
53084: LD_INT 1
53086: NEG
53087: PUSH
53088: LD_INT 2
53090: NEG
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 2
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: LD_INT 2
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 0
53160: PUSH
53161: LD_INT 2
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 1
53170: NEG
53171: PUSH
53172: LD_INT 1
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 2
53204: NEG
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53235: LD_ADDR_VAR 0 54
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 0
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: LD_INT 0
53297: PUSH
53298: EMPTY
53299: LIST
53300: LIST
53301: PUSH
53302: LD_INT 1
53304: NEG
53305: PUSH
53306: LD_INT 1
53308: NEG
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 1
53316: NEG
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: LD_INT 1
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 0
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: EMPTY
53375: LIST
53376: LIST
53377: PUSH
53378: LD_INT 1
53380: PUSH
53381: LD_INT 2
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 0
53390: PUSH
53391: LD_INT 2
53393: PUSH
53394: EMPTY
53395: LIST
53396: LIST
53397: PUSH
53398: LD_INT 1
53400: NEG
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 2
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: NEG
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53465: LD_ADDR_VAR 0 55
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 0
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: PUSH
53494: LD_INT 0
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 1
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 0
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 1
53546: NEG
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: LD_INT 2
53561: NEG
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 2
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: PUSH
53591: LD_INT 1
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: PUSH
53598: LD_INT 2
53600: PUSH
53601: LD_INT 2
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 1
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: LD_INT 0
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 2
53652: NEG
53653: PUSH
53654: LD_INT 1
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 2
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53695: LD_ADDR_VAR 0 56
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 0
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 1
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 0
53726: PUSH
53727: EMPTY
53728: LIST
53729: LIST
53730: PUSH
53731: LD_INT 1
53733: PUSH
53734: LD_INT 1
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 0
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: NEG
53765: PUSH
53766: LD_INT 1
53768: NEG
53769: PUSH
53770: EMPTY
53771: LIST
53772: LIST
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: LD_INT 2
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 0
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 2
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 1
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 0
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: NEG
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 2
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: EMPTY
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: LIST
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: LIST
53924: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53925: LD_ADDR_VAR 0 57
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 1
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 0
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: NEG
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 1
53994: NEG
53995: PUSH
53996: LD_INT 1
53998: NEG
53999: PUSH
54000: EMPTY
54001: LIST
54002: LIST
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: LD_INT 2
54010: NEG
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: LD_INT 2
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 1
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 2
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 2
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: PUSH
54061: LD_INT 2
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 2
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: LD_INT 1
54116: NEG
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: EMPTY
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54155: LD_ADDR_VAR 0 58
54159: PUSH
54160: LD_INT 0
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: LD_INT 1
54175: NEG
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 1
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: NEG
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: LD_INT 2
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 0
54248: PUSH
54249: LD_INT 2
54251: NEG
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: LD_INT 1
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 2
54280: PUSH
54281: LD_INT 1
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 2
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 0
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: NEG
54321: PUSH
54322: LD_INT 1
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: NEG
54332: PUSH
54333: LD_INT 0
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: LD_INT 1
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 2
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54385: LD_ADDR_VAR 0 59
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 0
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 1
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 0
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 1
54443: NEG
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54473: LD_ADDR_VAR 0 60
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 0
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 0
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 1
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: LD_INT 1
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54561: LD_ADDR_VAR 0 61
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 0
54609: PUSH
54610: LD_INT 1
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 1
54634: NEG
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54649: LD_ADDR_VAR 0 62
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 0
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 1
54677: PUSH
54678: LD_INT 0
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: LD_INT 1
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: NEG
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54737: LD_ADDR_VAR 0 63
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 0
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: PUSH
54776: LD_INT 1
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 1
54806: NEG
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
54825: LD_ADDR_VAR 0 64
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 0
54842: PUSH
54843: LD_INT 1
54845: NEG
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 1
54866: PUSH
54867: EMPTY
54868: LIST
54869: LIST
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// end ; 1 :
54913: GO 60810
54915: LD_INT 1
54917: DOUBLE
54918: EQUAL
54919: IFTRUE 54923
54921: GO 57546
54923: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54924: LD_ADDR_VAR 0 11
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 3
54946: NEG
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: LD_INT 2
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54968: LD_ADDR_VAR 0 12
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 1
54978: NEG
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 3
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: LIST
55008: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55009: LD_ADDR_VAR 0 13
55013: PUSH
55014: LD_INT 3
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 3
55026: PUSH
55027: LD_INT 3
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: LIST
55048: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55049: LD_ADDR_VAR 0 14
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 3
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 3
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: LIST
55089: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55090: LD_ADDR_VAR 0 15
55094: PUSH
55095: LD_INT 2
55097: NEG
55098: PUSH
55099: LD_INT 1
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 3
55108: NEG
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 3
55119: NEG
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: EMPTY
55126: LIST
55127: LIST
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: LIST
55133: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55134: LD_ADDR_VAR 0 16
55138: PUSH
55139: LD_INT 2
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 3
55153: NEG
55154: PUSH
55155: LD_INT 2
55157: NEG
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: NEG
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55180: LD_ADDR_VAR 0 17
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 3
55191: NEG
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55224: LD_ADDR_VAR 0 18
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 3
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: LD_INT 1
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: LIST
55264: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55265: LD_ADDR_VAR 0 19
55269: PUSH
55270: LD_INT 3
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 3
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: LIST
55304: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55305: LD_ADDR_VAR 0 20
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: LD_INT 3
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: LIST
55345: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55346: LD_ADDR_VAR 0 21
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 3
55364: NEG
55365: PUSH
55366: LD_INT 0
55368: PUSH
55369: EMPTY
55370: LIST
55371: LIST
55372: PUSH
55373: LD_INT 3
55375: NEG
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55390: LD_ADDR_VAR 0 22
55394: PUSH
55395: LD_INT 2
55397: NEG
55398: PUSH
55399: LD_INT 3
55401: NEG
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 3
55409: NEG
55410: PUSH
55411: LD_INT 2
55413: NEG
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 3
55421: NEG
55422: PUSH
55423: LD_INT 3
55425: NEG
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
55436: LD_ADDR_VAR 0 23
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 3
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 4
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 3
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
55480: LD_ADDR_VAR 0 24
55484: PUSH
55485: LD_INT 3
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 4
55508: PUSH
55509: LD_INT 1
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: LIST
55520: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
55521: LD_ADDR_VAR 0 25
55525: PUSH
55526: LD_INT 3
55528: PUSH
55529: LD_INT 3
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 4
55538: PUSH
55539: LD_INT 3
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: LD_INT 4
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
55561: LD_ADDR_VAR 0 26
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: LD_INT 3
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: LD_INT 4
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 1
55588: NEG
55589: PUSH
55590: LD_INT 3
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: LIST
55601: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
55602: LD_ADDR_VAR 0 27
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: LD_INT 0
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 3
55620: NEG
55621: PUSH
55622: LD_INT 1
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 4
55631: NEG
55632: PUSH
55633: LD_INT 1
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: LIST
55645: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
55646: LD_ADDR_VAR 0 28
55650: PUSH
55651: LD_INT 3
55653: NEG
55654: PUSH
55655: LD_INT 3
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 3
55665: NEG
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: LD_INT 3
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: LIST
55691: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
55692: LD_ADDR_VAR 0 29
55696: PUSH
55697: LD_INT 1
55699: NEG
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: LD_INT 3
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 2
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: LD_INT 4
55737: NEG
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: PUSH
55757: LD_INT 3
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: LD_INT 5
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 5
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 4
55793: NEG
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 6
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 0
55813: PUSH
55814: LD_INT 6
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 5
55827: NEG
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
55847: LD_ADDR_VAR 0 30
55851: PUSH
55852: LD_INT 2
55854: PUSH
55855: LD_INT 1
55857: NEG
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 3
55865: PUSH
55866: LD_INT 0
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 3
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 3
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 4
55896: PUSH
55897: LD_INT 0
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 4
55906: PUSH
55907: LD_INT 1
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 4
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 5
55927: PUSH
55928: LD_INT 0
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 5
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 5
55947: PUSH
55948: LD_INT 1
55950: NEG
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 6
55958: PUSH
55959: LD_INT 0
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 6
55968: PUSH
55969: LD_INT 1
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
55990: LD_ADDR_VAR 0 31
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: LD_INT 2
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: LD_INT 3
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 3
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 4
56027: PUSH
56028: LD_INT 3
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 4
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: PUSH
56048: LD_INT 4
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 5
56057: PUSH
56058: LD_INT 4
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 5
56067: PUSH
56068: LD_INT 5
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: LD_INT 5
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 6
56087: PUSH
56088: LD_INT 5
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 6
56097: PUSH
56098: LD_INT 6
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 5
56107: PUSH
56108: LD_INT 6
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56129: LD_ADDR_VAR 0 32
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: LD_INT 3
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 3
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: NEG
56157: PUSH
56158: LD_INT 2
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 1
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: PUSH
56175: LD_INT 0
56177: PUSH
56178: LD_INT 4
56180: PUSH
56181: EMPTY
56182: LIST
56183: LIST
56184: PUSH
56185: LD_INT 1
56187: NEG
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: LD_INT 5
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 0
56208: PUSH
56209: LD_INT 5
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: LD_INT 4
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 1
56229: PUSH
56230: LD_INT 6
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: LD_INT 6
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: LD_INT 5
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
56272: LD_ADDR_VAR 0 33
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 3
56290: NEG
56291: PUSH
56292: LD_INT 0
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 3
56301: NEG
56302: PUSH
56303: LD_INT 1
56305: NEG
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 4
56324: NEG
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 4
56335: NEG
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 4
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 5
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 5
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: NEG
56382: PUSH
56383: LD_INT 1
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 6
56392: NEG
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 6
56403: NEG
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
56427: LD_ADDR_VAR 0 34
56431: PUSH
56432: LD_INT 2
56434: NEG
56435: PUSH
56436: LD_INT 3
56438: NEG
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_INT 3
56446: NEG
56447: PUSH
56448: LD_INT 2
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 3
56458: NEG
56459: PUSH
56460: LD_INT 3
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 4
56482: NEG
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 4
56494: NEG
56495: PUSH
56496: LD_INT 4
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 4
56506: NEG
56507: PUSH
56508: LD_INT 5
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: LD_INT 4
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 5
56530: NEG
56531: PUSH
56532: LD_INT 5
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: NEG
56543: PUSH
56544: LD_INT 6
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 6
56554: NEG
56555: PUSH
56556: LD_INT 5
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 6
56566: NEG
56567: PUSH
56568: LD_INT 6
56570: NEG
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
56590: LD_ADDR_VAR 0 41
56594: PUSH
56595: LD_INT 0
56597: PUSH
56598: LD_INT 2
56600: NEG
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: LD_INT 3
56612: NEG
56613: PUSH
56614: EMPTY
56615: LIST
56616: LIST
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: LD_INT 2
56623: NEG
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: LIST
56633: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
56634: LD_ADDR_VAR 0 42
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 3
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
56675: LD_ADDR_VAR 0 43
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 3
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: LIST
56714: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
56715: LD_ADDR_VAR 0 44
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 2
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: LD_INT 3
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
56756: LD_ADDR_VAR 0 45
56760: PUSH
56761: LD_INT 2
56763: NEG
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 1
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 3
56785: NEG
56786: PUSH
56787: LD_INT 1
56789: NEG
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
56800: LD_ADDR_VAR 0 46
56804: PUSH
56805: LD_INT 2
56807: NEG
56808: PUSH
56809: LD_INT 2
56811: NEG
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 2
56819: NEG
56820: PUSH
56821: LD_INT 3
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 3
56831: NEG
56832: PUSH
56833: LD_INT 2
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: EMPTY
56842: LIST
56843: LIST
56844: LIST
56845: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
56846: LD_ADDR_VAR 0 47
56850: PUSH
56851: LD_INT 2
56853: NEG
56854: PUSH
56855: LD_INT 3
56857: NEG
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: LD_INT 3
56869: NEG
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56879: LD_ADDR_VAR 0 48
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
56910: LD_ADDR_VAR 0 49
56914: PUSH
56915: LD_INT 3
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 3
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
56939: LD_ADDR_VAR 0 50
56943: PUSH
56944: LD_INT 2
56946: PUSH
56947: LD_INT 3
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56968: LD_ADDR_VAR 0 51
56972: PUSH
56973: LD_INT 1
56975: NEG
56976: PUSH
56977: LD_INT 2
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56999: LD_ADDR_VAR 0 52
57003: PUSH
57004: LD_INT 3
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 3
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57032: LD_ADDR_VAR 0 53
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 3
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 3
57054: NEG
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 1
57062: PUSH
57063: LD_INT 2
57065: NEG
57066: PUSH
57067: EMPTY
57068: LIST
57069: LIST
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57076: LD_ADDR_VAR 0 54
57080: PUSH
57081: LD_INT 2
57083: PUSH
57084: LD_INT 1
57086: NEG
57087: PUSH
57088: EMPTY
57089: LIST
57090: LIST
57091: PUSH
57092: LD_INT 3
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: PUSH
57105: LD_INT 1
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: LIST
57116: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57117: LD_ADDR_VAR 0 55
57121: PUSH
57122: LD_INT 3
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 3
57134: PUSH
57135: LD_INT 3
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: LD_INT 3
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57157: LD_ADDR_VAR 0 56
57161: PUSH
57162: LD_INT 1
57164: PUSH
57165: LD_INT 3
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 3
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: LIST
57197: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57198: LD_ADDR_VAR 0 57
57202: PUSH
57203: LD_INT 2
57205: NEG
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 3
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 3
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57242: LD_ADDR_VAR 0 58
57246: PUSH
57247: LD_INT 2
57249: NEG
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 3
57261: NEG
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 3
57273: NEG
57274: PUSH
57275: LD_INT 3
57277: NEG
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: LIST
57287: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
57288: LD_ADDR_VAR 0 59
57292: PUSH
57293: LD_INT 1
57295: NEG
57296: PUSH
57297: LD_INT 2
57299: NEG
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: PUSH
57305: LD_INT 0
57307: PUSH
57308: LD_INT 2
57310: NEG
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: PUSH
57316: LD_INT 1
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57332: LD_ADDR_VAR 0 60
57336: PUSH
57337: LD_INT 1
57339: PUSH
57340: LD_INT 1
57342: NEG
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: LIST
57372: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57373: LD_ADDR_VAR 0 61
57377: PUSH
57378: LD_INT 2
57380: PUSH
57381: LD_INT 1
57383: PUSH
57384: EMPTY
57385: LIST
57386: LIST
57387: PUSH
57388: LD_INT 2
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57413: LD_ADDR_VAR 0 62
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 2
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 0
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 1
57444: PUSH
57445: EMPTY
57446: LIST
57447: LIST
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57454: LD_ADDR_VAR 0 63
57458: PUSH
57459: LD_INT 1
57461: NEG
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: NEG
57473: PUSH
57474: LD_INT 0
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: NEG
57484: PUSH
57485: LD_INT 1
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57498: LD_ADDR_VAR 0 64
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 2
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: LD_INT 1
57521: NEG
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: LD_INT 2
57529: NEG
57530: PUSH
57531: LD_INT 2
57533: NEG
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: ST_TO_ADDR
// end ; 2 :
57544: GO 60810
57546: LD_INT 2
57548: DOUBLE
57549: EQUAL
57550: IFTRUE 57554
57552: GO 60809
57554: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
57555: LD_ADDR_VAR 0 29
57559: PUSH
57560: LD_INT 4
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: LD_INT 1
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 5
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 5
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 4
57603: PUSH
57604: LD_INT 1
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: LD_INT 0
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 3
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 3
57634: PUSH
57635: LD_INT 2
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 5
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: LD_INT 3
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 3
57665: PUSH
57666: LD_INT 2
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 4
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: LD_INT 4
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: LD_INT 4
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: LD_INT 3
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: LD_INT 2
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 4
57725: PUSH
57726: LD_INT 2
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 2
57735: PUSH
57736: LD_INT 4
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 0
57745: PUSH
57746: LD_INT 4
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 3
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 4
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 1
57775: PUSH
57776: LD_INT 5
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 5
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: LD_INT 4
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: LD_INT 3
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 2
57817: PUSH
57818: LD_INT 5
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: NEG
57828: PUSH
57829: LD_INT 3
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: NEG
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 0
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: LD_INT 1
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 3
57883: NEG
57884: PUSH
57885: LD_INT 1
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 4
57894: NEG
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 4
57905: NEG
57906: PUSH
57907: LD_INT 1
57909: NEG
57910: PUSH
57911: EMPTY
57912: LIST
57913: LIST
57914: PUSH
57915: LD_INT 4
57917: NEG
57918: PUSH
57919: LD_INT 2
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 2
57929: NEG
57930: PUSH
57931: LD_INT 2
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 4
57940: NEG
57941: PUSH
57942: LD_INT 4
57944: NEG
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 4
57952: NEG
57953: PUSH
57954: LD_INT 5
57956: NEG
57957: PUSH
57958: EMPTY
57959: LIST
57960: LIST
57961: PUSH
57962: LD_INT 3
57964: NEG
57965: PUSH
57966: LD_INT 4
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 3
57976: NEG
57977: PUSH
57978: LD_INT 3
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 4
57988: NEG
57989: PUSH
57990: LD_INT 3
57992: NEG
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 5
58000: NEG
58001: PUSH
58002: LD_INT 4
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 5
58012: NEG
58013: PUSH
58014: LD_INT 5
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: LD_INT 5
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 5
58036: NEG
58037: PUSH
58038: LD_INT 3
58040: NEG
58041: PUSH
58042: EMPTY
58043: LIST
58044: LIST
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: LIST
58075: LIST
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: LIST
58084: LIST
58085: LIST
58086: LIST
58087: LIST
58088: LIST
58089: LIST
58090: LIST
58091: LIST
58092: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58093: LD_ADDR_VAR 0 30
58097: PUSH
58098: LD_INT 4
58100: PUSH
58101: LD_INT 4
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: EMPTY
58115: LIST
58116: LIST
58117: PUSH
58118: LD_INT 5
58120: PUSH
58121: LD_INT 4
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 5
58130: PUSH
58131: LD_INT 5
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 4
58140: PUSH
58141: LD_INT 5
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 3
58150: PUSH
58151: LD_INT 4
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 3
58160: PUSH
58161: LD_INT 3
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 5
58170: PUSH
58171: LD_INT 3
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 3
58180: PUSH
58181: LD_INT 5
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 3
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 4
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 4
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 3
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 2
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 2
58262: PUSH
58263: LD_INT 4
58265: PUSH
58266: EMPTY
58267: LIST
58268: LIST
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: LD_INT 2
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 4
58283: NEG
58284: PUSH
58285: LD_INT 0
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 4
58294: NEG
58295: PUSH
58296: LD_INT 1
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: LD_INT 0
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: NEG
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: EMPTY
58323: LIST
58324: LIST
58325: PUSH
58326: LD_INT 4
58328: NEG
58329: PUSH
58330: LD_INT 1
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 5
58339: NEG
58340: PUSH
58341: LD_INT 0
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 5
58350: NEG
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 5
58362: NEG
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: NEG
58375: PUSH
58376: LD_INT 2
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: LD_INT 3
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: LD_INT 4
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 2
58409: NEG
58410: PUSH
58411: LD_INT 3
58413: NEG
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 2
58421: NEG
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 3
58433: NEG
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 4
58445: NEG
58446: PUSH
58447: LD_INT 3
58449: NEG
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 4
58457: NEG
58458: PUSH
58459: LD_INT 4
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: NEG
58470: PUSH
58471: LD_INT 4
58473: NEG
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: NEG
58482: PUSH
58483: LD_INT 2
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 0
58493: PUSH
58494: LD_INT 4
58496: NEG
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 1
58515: PUSH
58516: LD_INT 4
58518: NEG
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: PUSH
58535: LD_INT 0
58537: PUSH
58538: LD_INT 3
58540: NEG
58541: PUSH
58542: EMPTY
58543: LIST
58544: LIST
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: LD_INT 4
58552: NEG
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 5
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 2
58572: PUSH
58573: LD_INT 3
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: NEG
58584: PUSH
58585: LD_INT 5
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
58640: LD_ADDR_VAR 0 31
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: LD_INT 4
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 3
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 5
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 5
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 1
58697: NEG
58698: PUSH
58699: LD_INT 4
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: LD_INT 5
58722: PUSH
58723: EMPTY
58724: LIST
58725: LIST
58726: PUSH
58727: LD_INT 2
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: PUSH
58734: EMPTY
58735: LIST
58736: LIST
58737: PUSH
58738: LD_INT 3
58740: NEG
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 3
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 2
58763: NEG
58764: PUSH
58765: LD_INT 0
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: LD_INT 2
58774: NEG
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 3
58785: NEG
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 4
58796: NEG
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 4
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 4
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 2
58831: NEG
58832: PUSH
58833: LD_INT 2
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 4
58842: NEG
58843: PUSH
58844: LD_INT 4
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 4
58854: NEG
58855: PUSH
58856: LD_INT 5
58858: NEG
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 3
58866: NEG
58867: PUSH
58868: LD_INT 4
58870: NEG
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: PUSH
58876: LD_INT 3
58878: NEG
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 4
58890: NEG
58891: PUSH
58892: LD_INT 3
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 5
58902: NEG
58903: PUSH
58904: LD_INT 4
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: LD_INT 5
58914: NEG
58915: PUSH
58916: LD_INT 5
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 3
58926: NEG
58927: PUSH
58928: LD_INT 5
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 5
58938: NEG
58939: PUSH
58940: LD_INT 3
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 0
58950: PUSH
58951: LD_INT 3
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 0
58961: PUSH
58962: LD_INT 4
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 3
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 1
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 1
59005: NEG
59006: PUSH
59007: LD_INT 3
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: LD_INT 4
59021: NEG
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 2
59040: NEG
59041: PUSH
59042: LD_INT 4
59044: NEG
59045: PUSH
59046: EMPTY
59047: LIST
59048: LIST
59049: PUSH
59050: LD_INT 4
59052: PUSH
59053: LD_INT 0
59055: PUSH
59056: EMPTY
59057: LIST
59058: LIST
59059: PUSH
59060: LD_INT 4
59062: PUSH
59063: LD_INT 1
59065: NEG
59066: PUSH
59067: EMPTY
59068: LIST
59069: LIST
59070: PUSH
59071: LD_INT 5
59073: PUSH
59074: LD_INT 0
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: LD_INT 5
59083: PUSH
59084: LD_INT 1
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 4
59093: PUSH
59094: LD_INT 1
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 3
59103: PUSH
59104: LD_INT 0
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: LD_INT 2
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 5
59135: PUSH
59136: LD_INT 2
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: LIST
59171: LIST
59172: LIST
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: LIST
59189: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59190: LD_ADDR_VAR 0 32
59194: PUSH
59195: LD_INT 4
59197: NEG
59198: PUSH
59199: LD_INT 0
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: LD_INT 1
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 3
59220: NEG
59221: PUSH
59222: LD_INT 0
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: LD_INT 1
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 4
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 5
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 5
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 5
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 3
59288: NEG
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 3
59299: NEG
59300: PUSH
59301: LD_INT 3
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 3
59311: NEG
59312: PUSH
59313: LD_INT 4
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: NEG
59324: PUSH
59325: LD_INT 3
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 2
59335: NEG
59336: PUSH
59337: LD_INT 2
59339: NEG
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 3
59347: NEG
59348: PUSH
59349: LD_INT 2
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 4
59359: NEG
59360: PUSH
59361: LD_INT 3
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 4
59371: NEG
59372: PUSH
59373: LD_INT 4
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: NEG
59384: PUSH
59385: LD_INT 4
59387: NEG
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: PUSH
59393: LD_INT 4
59395: NEG
59396: PUSH
59397: LD_INT 2
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 4
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 5
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 4
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: LD_INT 3
59443: NEG
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 3
59454: NEG
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: LD_INT 4
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: LD_INT 5
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 2
59486: PUSH
59487: LD_INT 3
59489: NEG
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 2
59497: NEG
59498: PUSH
59499: LD_INT 5
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: LD_INT 0
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 3
59519: PUSH
59520: LD_INT 1
59522: NEG
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 4
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 4
59540: PUSH
59541: LD_INT 1
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 3
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 2
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: LD_INT 1
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 2
59581: PUSH
59582: LD_INT 2
59584: NEG
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: LD_INT 2
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 4
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 4
59612: PUSH
59613: LD_INT 3
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 5
59622: PUSH
59623: LD_INT 4
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 5
59632: PUSH
59633: LD_INT 5
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: PUSH
59643: LD_INT 5
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 3
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 3
59662: PUSH
59663: LD_INT 3
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 5
59672: PUSH
59673: LD_INT 3
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: PUSH
59683: LD_INT 5
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: LIST
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
59737: LD_ADDR_VAR 0 33
59741: PUSH
59742: LD_INT 4
59744: NEG
59745: PUSH
59746: LD_INT 4
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 4
59756: NEG
59757: PUSH
59758: LD_INT 5
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: LD_INT 4
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 3
59780: NEG
59781: PUSH
59782: LD_INT 3
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 4
59792: NEG
59793: PUSH
59794: LD_INT 3
59796: NEG
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 5
59804: NEG
59805: PUSH
59806: LD_INT 4
59808: NEG
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 5
59816: NEG
59817: PUSH
59818: LD_INT 5
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 3
59828: NEG
59829: PUSH
59830: LD_INT 5
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 5
59840: NEG
59841: PUSH
59842: LD_INT 3
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 0
59852: PUSH
59853: LD_INT 3
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 4
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: PUSH
59875: LD_INT 3
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 2
59888: NEG
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 2
59899: NEG
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 3
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 4
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 4
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 4
59954: PUSH
59955: LD_INT 0
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 4
59964: PUSH
59965: LD_INT 1
59967: NEG
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 5
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 5
59985: PUSH
59986: LD_INT 1
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 4
59995: PUSH
59996: LD_INT 1
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 3
60015: PUSH
60016: LD_INT 1
60018: NEG
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: LD_INT 2
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 3
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 4
60067: PUSH
60068: LD_INT 3
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: LD_INT 4
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 4
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 2
60097: PUSH
60098: LD_INT 3
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 2
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 4
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 4
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: LD_INT 4
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: LD_INT 5
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 5
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: NEG
60188: PUSH
60189: LD_INT 4
60191: PUSH
60192: EMPTY
60193: LIST
60194: LIST
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 5
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: LD_INT 2
60219: NEG
60220: PUSH
60221: LD_INT 3
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: LIST
60242: LIST
60243: LIST
60244: LIST
60245: LIST
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: LIST
60257: LIST
60258: LIST
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
60275: LD_ADDR_VAR 0 34
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 4
60285: NEG
60286: PUSH
60287: EMPTY
60288: LIST
60289: LIST
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: LD_INT 5
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 4
60307: NEG
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 1
60315: PUSH
60316: LD_INT 3
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 3
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 1
60337: NEG
60338: PUSH
60339: LD_INT 4
60341: NEG
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: LD_INT 5
60353: NEG
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 5
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: PUSH
60385: LD_INT 0
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 3
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 4
60405: PUSH
60406: LD_INT 0
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 4
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 2
60445: PUSH
60446: LD_INT 1
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 2
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: LD_INT 2
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: LD_INT 4
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 4
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 5
60497: PUSH
60498: LD_INT 4
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 5
60507: PUSH
60508: LD_INT 5
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 4
60517: PUSH
60518: LD_INT 5
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 3
60527: PUSH
60528: LD_INT 4
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: LD_INT 3
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: PUSH
60545: LD_INT 5
60547: PUSH
60548: LD_INT 3
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: PUSH
60555: LD_INT 3
60557: PUSH
60558: LD_INT 5
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 0
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: EMPTY
60572: LIST
60573: LIST
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: LD_INT 4
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: LD_INT 4
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 1
60617: NEG
60618: PUSH
60619: LD_INT 3
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 2
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: LD_INT 2
60639: PUSH
60640: LD_INT 4
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: LD_INT 2
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: PUSH
60658: LD_INT 4
60660: NEG
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: LD_INT 0
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: PUSH
60692: LD_INT 3
60694: NEG
60695: PUSH
60696: LD_INT 1
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: NEG
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 5
60716: NEG
60717: PUSH
60718: LD_INT 0
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: NEG
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 5
60739: NEG
60740: PUSH
60741: LD_INT 2
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: NEG
60752: PUSH
60753: LD_INT 2
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: ST_TO_ADDR
// end ; end ;
60807: GO 60810
60809: POP
// case btype of b_depot , b_warehouse :
60810: LD_VAR 0 1
60814: PUSH
60815: LD_INT 0
60817: DOUBLE
60818: EQUAL
60819: IFTRUE 60829
60821: LD_INT 1
60823: DOUBLE
60824: EQUAL
60825: IFTRUE 60829
60827: GO 61030
60829: POP
// case nation of nation_american :
60830: LD_VAR 0 5
60834: PUSH
60835: LD_INT 1
60837: DOUBLE
60838: EQUAL
60839: IFTRUE 60843
60841: GO 60899
60843: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
60844: LD_ADDR_VAR 0 9
60848: PUSH
60849: LD_VAR 0 11
60853: PUSH
60854: LD_VAR 0 12
60858: PUSH
60859: LD_VAR 0 13
60863: PUSH
60864: LD_VAR 0 14
60868: PUSH
60869: LD_VAR 0 15
60873: PUSH
60874: LD_VAR 0 16
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: PUSH
60887: LD_VAR 0 4
60891: PUSH
60892: LD_INT 1
60894: PLUS
60895: ARRAY
60896: ST_TO_ADDR
60897: GO 61028
60899: LD_INT 2
60901: DOUBLE
60902: EQUAL
60903: IFTRUE 60907
60905: GO 60963
60907: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
60908: LD_ADDR_VAR 0 9
60912: PUSH
60913: LD_VAR 0 17
60917: PUSH
60918: LD_VAR 0 18
60922: PUSH
60923: LD_VAR 0 19
60927: PUSH
60928: LD_VAR 0 20
60932: PUSH
60933: LD_VAR 0 21
60937: PUSH
60938: LD_VAR 0 22
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: PUSH
60951: LD_VAR 0 4
60955: PUSH
60956: LD_INT 1
60958: PLUS
60959: ARRAY
60960: ST_TO_ADDR
60961: GO 61028
60963: LD_INT 3
60965: DOUBLE
60966: EQUAL
60967: IFTRUE 60971
60969: GO 61027
60971: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
60972: LD_ADDR_VAR 0 9
60976: PUSH
60977: LD_VAR 0 23
60981: PUSH
60982: LD_VAR 0 24
60986: PUSH
60987: LD_VAR 0 25
60991: PUSH
60992: LD_VAR 0 26
60996: PUSH
60997: LD_VAR 0 27
61001: PUSH
61002: LD_VAR 0 28
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: LD_VAR 0 4
61019: PUSH
61020: LD_INT 1
61022: PLUS
61023: ARRAY
61024: ST_TO_ADDR
61025: GO 61028
61027: POP
61028: GO 61583
61030: LD_INT 2
61032: DOUBLE
61033: EQUAL
61034: IFTRUE 61044
61036: LD_INT 3
61038: DOUBLE
61039: EQUAL
61040: IFTRUE 61044
61042: GO 61100
61044: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61045: LD_ADDR_VAR 0 9
61049: PUSH
61050: LD_VAR 0 29
61054: PUSH
61055: LD_VAR 0 30
61059: PUSH
61060: LD_VAR 0 31
61064: PUSH
61065: LD_VAR 0 32
61069: PUSH
61070: LD_VAR 0 33
61074: PUSH
61075: LD_VAR 0 34
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: LD_VAR 0 4
61092: PUSH
61093: LD_INT 1
61095: PLUS
61096: ARRAY
61097: ST_TO_ADDR
61098: GO 61583
61100: LD_INT 16
61102: DOUBLE
61103: EQUAL
61104: IFTRUE 61162
61106: LD_INT 17
61108: DOUBLE
61109: EQUAL
61110: IFTRUE 61162
61112: LD_INT 18
61114: DOUBLE
61115: EQUAL
61116: IFTRUE 61162
61118: LD_INT 19
61120: DOUBLE
61121: EQUAL
61122: IFTRUE 61162
61124: LD_INT 22
61126: DOUBLE
61127: EQUAL
61128: IFTRUE 61162
61130: LD_INT 20
61132: DOUBLE
61133: EQUAL
61134: IFTRUE 61162
61136: LD_INT 21
61138: DOUBLE
61139: EQUAL
61140: IFTRUE 61162
61142: LD_INT 23
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61162
61148: LD_INT 24
61150: DOUBLE
61151: EQUAL
61152: IFTRUE 61162
61154: LD_INT 25
61156: DOUBLE
61157: EQUAL
61158: IFTRUE 61162
61160: GO 61218
61162: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61163: LD_ADDR_VAR 0 9
61167: PUSH
61168: LD_VAR 0 35
61172: PUSH
61173: LD_VAR 0 36
61177: PUSH
61178: LD_VAR 0 37
61182: PUSH
61183: LD_VAR 0 38
61187: PUSH
61188: LD_VAR 0 39
61192: PUSH
61193: LD_VAR 0 40
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: PUSH
61206: LD_VAR 0 4
61210: PUSH
61211: LD_INT 1
61213: PLUS
61214: ARRAY
61215: ST_TO_ADDR
61216: GO 61583
61218: LD_INT 6
61220: DOUBLE
61221: EQUAL
61222: IFTRUE 61274
61224: LD_INT 7
61226: DOUBLE
61227: EQUAL
61228: IFTRUE 61274
61230: LD_INT 8
61232: DOUBLE
61233: EQUAL
61234: IFTRUE 61274
61236: LD_INT 13
61238: DOUBLE
61239: EQUAL
61240: IFTRUE 61274
61242: LD_INT 12
61244: DOUBLE
61245: EQUAL
61246: IFTRUE 61274
61248: LD_INT 15
61250: DOUBLE
61251: EQUAL
61252: IFTRUE 61274
61254: LD_INT 11
61256: DOUBLE
61257: EQUAL
61258: IFTRUE 61274
61260: LD_INT 14
61262: DOUBLE
61263: EQUAL
61264: IFTRUE 61274
61266: LD_INT 10
61268: DOUBLE
61269: EQUAL
61270: IFTRUE 61274
61272: GO 61330
61274: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
61275: LD_ADDR_VAR 0 9
61279: PUSH
61280: LD_VAR 0 41
61284: PUSH
61285: LD_VAR 0 42
61289: PUSH
61290: LD_VAR 0 43
61294: PUSH
61295: LD_VAR 0 44
61299: PUSH
61300: LD_VAR 0 45
61304: PUSH
61305: LD_VAR 0 46
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: LIST
61314: LIST
61315: LIST
61316: LIST
61317: PUSH
61318: LD_VAR 0 4
61322: PUSH
61323: LD_INT 1
61325: PLUS
61326: ARRAY
61327: ST_TO_ADDR
61328: GO 61583
61330: LD_INT 36
61332: DOUBLE
61333: EQUAL
61334: IFTRUE 61338
61336: GO 61394
61338: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
61339: LD_ADDR_VAR 0 9
61343: PUSH
61344: LD_VAR 0 47
61348: PUSH
61349: LD_VAR 0 48
61353: PUSH
61354: LD_VAR 0 49
61358: PUSH
61359: LD_VAR 0 50
61363: PUSH
61364: LD_VAR 0 51
61368: PUSH
61369: LD_VAR 0 52
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: PUSH
61382: LD_VAR 0 4
61386: PUSH
61387: LD_INT 1
61389: PLUS
61390: ARRAY
61391: ST_TO_ADDR
61392: GO 61583
61394: LD_INT 4
61396: DOUBLE
61397: EQUAL
61398: IFTRUE 61420
61400: LD_INT 5
61402: DOUBLE
61403: EQUAL
61404: IFTRUE 61420
61406: LD_INT 34
61408: DOUBLE
61409: EQUAL
61410: IFTRUE 61420
61412: LD_INT 37
61414: DOUBLE
61415: EQUAL
61416: IFTRUE 61420
61418: GO 61476
61420: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
61421: LD_ADDR_VAR 0 9
61425: PUSH
61426: LD_VAR 0 53
61430: PUSH
61431: LD_VAR 0 54
61435: PUSH
61436: LD_VAR 0 55
61440: PUSH
61441: LD_VAR 0 56
61445: PUSH
61446: LD_VAR 0 57
61450: PUSH
61451: LD_VAR 0 58
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: PUSH
61464: LD_VAR 0 4
61468: PUSH
61469: LD_INT 1
61471: PLUS
61472: ARRAY
61473: ST_TO_ADDR
61474: GO 61583
61476: LD_INT 31
61478: DOUBLE
61479: EQUAL
61480: IFTRUE 61526
61482: LD_INT 32
61484: DOUBLE
61485: EQUAL
61486: IFTRUE 61526
61488: LD_INT 33
61490: DOUBLE
61491: EQUAL
61492: IFTRUE 61526
61494: LD_INT 27
61496: DOUBLE
61497: EQUAL
61498: IFTRUE 61526
61500: LD_INT 26
61502: DOUBLE
61503: EQUAL
61504: IFTRUE 61526
61506: LD_INT 28
61508: DOUBLE
61509: EQUAL
61510: IFTRUE 61526
61512: LD_INT 29
61514: DOUBLE
61515: EQUAL
61516: IFTRUE 61526
61518: LD_INT 30
61520: DOUBLE
61521: EQUAL
61522: IFTRUE 61526
61524: GO 61582
61526: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
61527: LD_ADDR_VAR 0 9
61531: PUSH
61532: LD_VAR 0 59
61536: PUSH
61537: LD_VAR 0 60
61541: PUSH
61542: LD_VAR 0 61
61546: PUSH
61547: LD_VAR 0 62
61551: PUSH
61552: LD_VAR 0 63
61556: PUSH
61557: LD_VAR 0 64
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: PUSH
61570: LD_VAR 0 4
61574: PUSH
61575: LD_INT 1
61577: PLUS
61578: ARRAY
61579: ST_TO_ADDR
61580: GO 61583
61582: POP
// temp_list2 = [ ] ;
61583: LD_ADDR_VAR 0 10
61587: PUSH
61588: EMPTY
61589: ST_TO_ADDR
// for i in temp_list do
61590: LD_ADDR_VAR 0 8
61594: PUSH
61595: LD_VAR 0 9
61599: PUSH
61600: FOR_IN
61601: IFFALSE 61653
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
61603: LD_ADDR_VAR 0 10
61607: PUSH
61608: LD_VAR 0 10
61612: PUSH
61613: LD_VAR 0 8
61617: PUSH
61618: LD_INT 1
61620: ARRAY
61621: PUSH
61622: LD_VAR 0 2
61626: PLUS
61627: PUSH
61628: LD_VAR 0 8
61632: PUSH
61633: LD_INT 2
61635: ARRAY
61636: PUSH
61637: LD_VAR 0 3
61641: PLUS
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: EMPTY
61648: LIST
61649: ADD
61650: ST_TO_ADDR
61651: GO 61600
61653: POP
61654: POP
// result = temp_list2 ;
61655: LD_ADDR_VAR 0 7
61659: PUSH
61660: LD_VAR 0 10
61664: ST_TO_ADDR
// end ;
61665: LD_VAR 0 7
61669: RET
// export function EnemyInRange ( unit , dist ) ; begin
61670: LD_INT 0
61672: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
61673: LD_ADDR_VAR 0 3
61677: PUSH
61678: LD_VAR 0 1
61682: PPUSH
61683: CALL_OW 255
61687: PPUSH
61688: LD_VAR 0 1
61692: PPUSH
61693: CALL_OW 250
61697: PPUSH
61698: LD_VAR 0 1
61702: PPUSH
61703: CALL_OW 251
61707: PPUSH
61708: LD_VAR 0 2
61712: PPUSH
61713: CALL 35043 0 4
61717: PUSH
61718: LD_INT 4
61720: ARRAY
61721: ST_TO_ADDR
// end ;
61722: LD_VAR 0 3
61726: RET
// export function PlayerSeeMe ( unit ) ; begin
61727: LD_INT 0
61729: PPUSH
// result := See ( your_side , unit ) ;
61730: LD_ADDR_VAR 0 2
61734: PUSH
61735: LD_OWVAR 2
61739: PPUSH
61740: LD_VAR 0 1
61744: PPUSH
61745: CALL_OW 292
61749: ST_TO_ADDR
// end ;
61750: LD_VAR 0 2
61754: RET
// export function ReverseDir ( unit ) ; begin
61755: LD_INT 0
61757: PPUSH
// if not unit then
61758: LD_VAR 0 1
61762: NOT
61763: IFFALSE 61767
// exit ;
61765: GO 61790
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
61767: LD_ADDR_VAR 0 2
61771: PUSH
61772: LD_VAR 0 1
61776: PPUSH
61777: CALL_OW 254
61781: PUSH
61782: LD_INT 3
61784: PLUS
61785: PUSH
61786: LD_INT 6
61788: MOD
61789: ST_TO_ADDR
// end ;
61790: LD_VAR 0 2
61794: RET
// export function ReverseArray ( array ) ; var i ; begin
61795: LD_INT 0
61797: PPUSH
61798: PPUSH
// if not array then
61799: LD_VAR 0 1
61803: NOT
61804: IFFALSE 61808
// exit ;
61806: GO 61863
// result := [ ] ;
61808: LD_ADDR_VAR 0 2
61812: PUSH
61813: EMPTY
61814: ST_TO_ADDR
// for i := array downto 1 do
61815: LD_ADDR_VAR 0 3
61819: PUSH
61820: DOUBLE
61821: LD_VAR 0 1
61825: INC
61826: ST_TO_ADDR
61827: LD_INT 1
61829: PUSH
61830: FOR_DOWNTO
61831: IFFALSE 61861
// result := Join ( result , array [ i ] ) ;
61833: LD_ADDR_VAR 0 2
61837: PUSH
61838: LD_VAR 0 2
61842: PPUSH
61843: LD_VAR 0 1
61847: PUSH
61848: LD_VAR 0 3
61852: ARRAY
61853: PPUSH
61854: CALL 66528 0 2
61858: ST_TO_ADDR
61859: GO 61830
61861: POP
61862: POP
// end ;
61863: LD_VAR 0 2
61867: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
61868: LD_INT 0
61870: PPUSH
61871: PPUSH
61872: PPUSH
61873: PPUSH
61874: PPUSH
61875: PPUSH
// if not unit or not hexes then
61876: LD_VAR 0 1
61880: NOT
61881: PUSH
61882: LD_VAR 0 2
61886: NOT
61887: OR
61888: IFFALSE 61892
// exit ;
61890: GO 62015
// dist := 9999 ;
61892: LD_ADDR_VAR 0 5
61896: PUSH
61897: LD_INT 9999
61899: ST_TO_ADDR
// for i = 1 to hexes do
61900: LD_ADDR_VAR 0 4
61904: PUSH
61905: DOUBLE
61906: LD_INT 1
61908: DEC
61909: ST_TO_ADDR
61910: LD_VAR 0 2
61914: PUSH
61915: FOR_TO
61916: IFFALSE 62003
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61918: LD_ADDR_VAR 0 6
61922: PUSH
61923: LD_VAR 0 1
61927: PPUSH
61928: LD_VAR 0 2
61932: PUSH
61933: LD_VAR 0 4
61937: ARRAY
61938: PUSH
61939: LD_INT 1
61941: ARRAY
61942: PPUSH
61943: LD_VAR 0 2
61947: PUSH
61948: LD_VAR 0 4
61952: ARRAY
61953: PUSH
61954: LD_INT 2
61956: ARRAY
61957: PPUSH
61958: CALL_OW 297
61962: ST_TO_ADDR
// if tdist < dist then
61963: LD_VAR 0 6
61967: PUSH
61968: LD_VAR 0 5
61972: LESS
61973: IFFALSE 62001
// begin hex := hexes [ i ] ;
61975: LD_ADDR_VAR 0 8
61979: PUSH
61980: LD_VAR 0 2
61984: PUSH
61985: LD_VAR 0 4
61989: ARRAY
61990: ST_TO_ADDR
// dist := tdist ;
61991: LD_ADDR_VAR 0 5
61995: PUSH
61996: LD_VAR 0 6
62000: ST_TO_ADDR
// end ; end ;
62001: GO 61915
62003: POP
62004: POP
// result := hex ;
62005: LD_ADDR_VAR 0 3
62009: PUSH
62010: LD_VAR 0 8
62014: ST_TO_ADDR
// end ;
62015: LD_VAR 0 3
62019: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62020: LD_INT 0
62022: PPUSH
62023: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62024: LD_VAR 0 1
62028: NOT
62029: PUSH
62030: LD_VAR 0 1
62034: PUSH
62035: LD_INT 21
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 23
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PPUSH
62059: CALL_OW 69
62063: IN
62064: NOT
62065: OR
62066: IFFALSE 62070
// exit ;
62068: GO 62117
// for i = 1 to 3 do
62070: LD_ADDR_VAR 0 3
62074: PUSH
62075: DOUBLE
62076: LD_INT 1
62078: DEC
62079: ST_TO_ADDR
62080: LD_INT 3
62082: PUSH
62083: FOR_TO
62084: IFFALSE 62115
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62086: LD_VAR 0 1
62090: PPUSH
62091: CALL_OW 250
62095: PPUSH
62096: LD_VAR 0 1
62100: PPUSH
62101: CALL_OW 251
62105: PPUSH
62106: LD_INT 1
62108: PPUSH
62109: CALL_OW 453
62113: GO 62083
62115: POP
62116: POP
// end ;
62117: LD_VAR 0 2
62121: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62122: LD_INT 0
62124: PPUSH
62125: PPUSH
62126: PPUSH
62127: PPUSH
62128: PPUSH
62129: PPUSH
// if not unit or not enemy_unit then
62130: LD_VAR 0 1
62134: NOT
62135: PUSH
62136: LD_VAR 0 2
62140: NOT
62141: OR
62142: IFFALSE 62146
// exit ;
62144: GO 62613
// if GetLives ( i ) < 250 then
62146: LD_VAR 0 4
62150: PPUSH
62151: CALL_OW 256
62155: PUSH
62156: LD_INT 250
62158: LESS
62159: IFFALSE 62172
// begin ComAutodestruct ( i ) ;
62161: LD_VAR 0 4
62165: PPUSH
62166: CALL 62020 0 1
// exit ;
62170: GO 62613
// end ; x := GetX ( enemy_unit ) ;
62172: LD_ADDR_VAR 0 7
62176: PUSH
62177: LD_VAR 0 2
62181: PPUSH
62182: CALL_OW 250
62186: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62187: LD_ADDR_VAR 0 8
62191: PUSH
62192: LD_VAR 0 2
62196: PPUSH
62197: CALL_OW 251
62201: ST_TO_ADDR
// if not x or not y then
62202: LD_VAR 0 7
62206: NOT
62207: PUSH
62208: LD_VAR 0 8
62212: NOT
62213: OR
62214: IFFALSE 62218
// exit ;
62216: GO 62613
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62218: LD_ADDR_VAR 0 6
62222: PUSH
62223: LD_VAR 0 7
62227: PPUSH
62228: LD_INT 0
62230: PPUSH
62231: LD_INT 4
62233: PPUSH
62234: CALL_OW 272
62238: PUSH
62239: LD_VAR 0 8
62243: PPUSH
62244: LD_INT 0
62246: PPUSH
62247: LD_INT 4
62249: PPUSH
62250: CALL_OW 273
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_VAR 0 7
62263: PPUSH
62264: LD_INT 1
62266: PPUSH
62267: LD_INT 4
62269: PPUSH
62270: CALL_OW 272
62274: PUSH
62275: LD_VAR 0 8
62279: PPUSH
62280: LD_INT 1
62282: PPUSH
62283: LD_INT 4
62285: PPUSH
62286: CALL_OW 273
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_VAR 0 7
62299: PPUSH
62300: LD_INT 2
62302: PPUSH
62303: LD_INT 4
62305: PPUSH
62306: CALL_OW 272
62310: PUSH
62311: LD_VAR 0 8
62315: PPUSH
62316: LD_INT 2
62318: PPUSH
62319: LD_INT 4
62321: PPUSH
62322: CALL_OW 273
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: PUSH
62331: LD_VAR 0 7
62335: PPUSH
62336: LD_INT 3
62338: PPUSH
62339: LD_INT 4
62341: PPUSH
62342: CALL_OW 272
62346: PUSH
62347: LD_VAR 0 8
62351: PPUSH
62352: LD_INT 3
62354: PPUSH
62355: LD_INT 4
62357: PPUSH
62358: CALL_OW 273
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_VAR 0 7
62371: PPUSH
62372: LD_INT 4
62374: PPUSH
62375: LD_INT 4
62377: PPUSH
62378: CALL_OW 272
62382: PUSH
62383: LD_VAR 0 8
62387: PPUSH
62388: LD_INT 4
62390: PPUSH
62391: LD_INT 4
62393: PPUSH
62394: CALL_OW 273
62398: PUSH
62399: EMPTY
62400: LIST
62401: LIST
62402: PUSH
62403: LD_VAR 0 7
62407: PPUSH
62408: LD_INT 5
62410: PPUSH
62411: LD_INT 4
62413: PPUSH
62414: CALL_OW 272
62418: PUSH
62419: LD_VAR 0 8
62423: PPUSH
62424: LD_INT 5
62426: PPUSH
62427: LD_INT 4
62429: PPUSH
62430: CALL_OW 273
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: ST_TO_ADDR
// for i = tmp downto 1 do
62447: LD_ADDR_VAR 0 4
62451: PUSH
62452: DOUBLE
62453: LD_VAR 0 6
62457: INC
62458: ST_TO_ADDR
62459: LD_INT 1
62461: PUSH
62462: FOR_DOWNTO
62463: IFFALSE 62564
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
62465: LD_VAR 0 6
62469: PUSH
62470: LD_VAR 0 4
62474: ARRAY
62475: PUSH
62476: LD_INT 1
62478: ARRAY
62479: PPUSH
62480: LD_VAR 0 6
62484: PUSH
62485: LD_VAR 0 4
62489: ARRAY
62490: PUSH
62491: LD_INT 2
62493: ARRAY
62494: PPUSH
62495: CALL_OW 488
62499: NOT
62500: PUSH
62501: LD_VAR 0 6
62505: PUSH
62506: LD_VAR 0 4
62510: ARRAY
62511: PUSH
62512: LD_INT 1
62514: ARRAY
62515: PPUSH
62516: LD_VAR 0 6
62520: PUSH
62521: LD_VAR 0 4
62525: ARRAY
62526: PUSH
62527: LD_INT 2
62529: ARRAY
62530: PPUSH
62531: CALL_OW 428
62535: PUSH
62536: LD_INT 0
62538: NONEQUAL
62539: OR
62540: IFFALSE 62562
// tmp := Delete ( tmp , i ) ;
62542: LD_ADDR_VAR 0 6
62546: PUSH
62547: LD_VAR 0 6
62551: PPUSH
62552: LD_VAR 0 4
62556: PPUSH
62557: CALL_OW 3
62561: ST_TO_ADDR
62562: GO 62462
62564: POP
62565: POP
// j := GetClosestHex ( unit , tmp ) ;
62566: LD_ADDR_VAR 0 5
62570: PUSH
62571: LD_VAR 0 1
62575: PPUSH
62576: LD_VAR 0 6
62580: PPUSH
62581: CALL 61868 0 2
62585: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
62586: LD_VAR 0 1
62590: PPUSH
62591: LD_VAR 0 5
62595: PUSH
62596: LD_INT 1
62598: ARRAY
62599: PPUSH
62600: LD_VAR 0 5
62604: PUSH
62605: LD_INT 2
62607: ARRAY
62608: PPUSH
62609: CALL_OW 111
// end ;
62613: LD_VAR 0 3
62617: RET
// export function PrepareApemanSoldier ( ) ; begin
62618: LD_INT 0
62620: PPUSH
// uc_nation := 0 ;
62621: LD_ADDR_OWVAR 21
62625: PUSH
62626: LD_INT 0
62628: ST_TO_ADDR
// hc_sex := sex_male ;
62629: LD_ADDR_OWVAR 27
62633: PUSH
62634: LD_INT 1
62636: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
62637: LD_ADDR_OWVAR 28
62641: PUSH
62642: LD_INT 15
62644: ST_TO_ADDR
// hc_gallery :=  ;
62645: LD_ADDR_OWVAR 33
62649: PUSH
62650: LD_STRING 
62652: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62653: LD_ADDR_OWVAR 31
62657: PUSH
62658: LD_INT 0
62660: PPUSH
62661: LD_INT 3
62663: PPUSH
62664: CALL_OW 12
62668: PUSH
62669: LD_INT 0
62671: PPUSH
62672: LD_INT 3
62674: PPUSH
62675: CALL_OW 12
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: LD_INT 0
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// end ;
62692: LD_VAR 0 1
62696: RET
// export function PrepareApemanEngineer ( ) ; begin
62697: LD_INT 0
62699: PPUSH
// uc_nation := 0 ;
62700: LD_ADDR_OWVAR 21
62704: PUSH
62705: LD_INT 0
62707: ST_TO_ADDR
// hc_sex := sex_male ;
62708: LD_ADDR_OWVAR 27
62712: PUSH
62713: LD_INT 1
62715: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
62716: LD_ADDR_OWVAR 28
62720: PUSH
62721: LD_INT 16
62723: ST_TO_ADDR
// hc_gallery :=  ;
62724: LD_ADDR_OWVAR 33
62728: PUSH
62729: LD_STRING 
62731: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62732: LD_ADDR_OWVAR 31
62736: PUSH
62737: LD_INT 0
62739: PPUSH
62740: LD_INT 3
62742: PPUSH
62743: CALL_OW 12
62747: PUSH
62748: LD_INT 0
62750: PPUSH
62751: LD_INT 3
62753: PPUSH
62754: CALL_OW 12
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: LD_INT 0
62764: PUSH
62765: EMPTY
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: ST_TO_ADDR
// end ;
62771: LD_VAR 0 1
62775: RET
// export function PrepareApeman ( agressivity ) ; begin
62776: LD_INT 0
62778: PPUSH
// uc_side := 0 ;
62779: LD_ADDR_OWVAR 20
62783: PUSH
62784: LD_INT 0
62786: ST_TO_ADDR
// uc_nation := 0 ;
62787: LD_ADDR_OWVAR 21
62791: PUSH
62792: LD_INT 0
62794: ST_TO_ADDR
// hc_sex := sex_male ;
62795: LD_ADDR_OWVAR 27
62799: PUSH
62800: LD_INT 1
62802: ST_TO_ADDR
// hc_class := class_apeman ;
62803: LD_ADDR_OWVAR 28
62807: PUSH
62808: LD_INT 12
62810: ST_TO_ADDR
// hc_gallery :=  ;
62811: LD_ADDR_OWVAR 33
62815: PUSH
62816: LD_STRING 
62818: ST_TO_ADDR
// if agressivity = 0 then
62819: LD_VAR 0 1
62823: PUSH
62824: LD_INT 0
62826: EQUAL
62827: IFFALSE 62839
// hc_agressivity := 0 else
62829: LD_ADDR_OWVAR 35
62833: PUSH
62834: LD_INT 0
62836: ST_TO_ADDR
62837: GO 62860
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62839: LD_ADDR_OWVAR 35
62843: PUSH
62844: LD_VAR 0 1
62848: NEG
62849: PPUSH
62850: LD_VAR 0 1
62854: PPUSH
62855: CALL_OW 12
62859: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
62860: LD_ADDR_OWVAR 31
62864: PUSH
62865: LD_INT 0
62867: PPUSH
62868: LD_INT 3
62870: PPUSH
62871: CALL_OW 12
62875: PUSH
62876: LD_INT 0
62878: PPUSH
62879: LD_INT 3
62881: PPUSH
62882: CALL_OW 12
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 0
62892: PUSH
62893: EMPTY
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: ST_TO_ADDR
// end ;
62899: LD_VAR 0 2
62903: RET
// export function PrepareTiger ( agressivity ) ; begin
62904: LD_INT 0
62906: PPUSH
// uc_side := 0 ;
62907: LD_ADDR_OWVAR 20
62911: PUSH
62912: LD_INT 0
62914: ST_TO_ADDR
// uc_nation := 0 ;
62915: LD_ADDR_OWVAR 21
62919: PUSH
62920: LD_INT 0
62922: ST_TO_ADDR
// hc_class := class_tiger ;
62923: LD_ADDR_OWVAR 28
62927: PUSH
62928: LD_INT 14
62930: ST_TO_ADDR
// hc_gallery :=  ;
62931: LD_ADDR_OWVAR 33
62935: PUSH
62936: LD_STRING 
62938: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
62939: LD_ADDR_OWVAR 35
62943: PUSH
62944: LD_VAR 0 1
62948: NEG
62949: PPUSH
62950: LD_VAR 0 1
62954: PPUSH
62955: CALL_OW 12
62959: ST_TO_ADDR
// end ;
62960: LD_VAR 0 2
62964: RET
// export function PrepareEnchidna ( ) ; begin
62965: LD_INT 0
62967: PPUSH
// uc_side := 0 ;
62968: LD_ADDR_OWVAR 20
62972: PUSH
62973: LD_INT 0
62975: ST_TO_ADDR
// uc_nation := 0 ;
62976: LD_ADDR_OWVAR 21
62980: PUSH
62981: LD_INT 0
62983: ST_TO_ADDR
// hc_class := class_baggie ;
62984: LD_ADDR_OWVAR 28
62988: PUSH
62989: LD_INT 13
62991: ST_TO_ADDR
// hc_gallery :=  ;
62992: LD_ADDR_OWVAR 33
62996: PUSH
62997: LD_STRING 
62999: ST_TO_ADDR
// end ;
63000: LD_VAR 0 1
63004: RET
// export function PrepareFrog ( ) ; begin
63005: LD_INT 0
63007: PPUSH
// uc_side := 0 ;
63008: LD_ADDR_OWVAR 20
63012: PUSH
63013: LD_INT 0
63015: ST_TO_ADDR
// uc_nation := 0 ;
63016: LD_ADDR_OWVAR 21
63020: PUSH
63021: LD_INT 0
63023: ST_TO_ADDR
// hc_class := class_frog ;
63024: LD_ADDR_OWVAR 28
63028: PUSH
63029: LD_INT 19
63031: ST_TO_ADDR
// hc_gallery :=  ;
63032: LD_ADDR_OWVAR 33
63036: PUSH
63037: LD_STRING 
63039: ST_TO_ADDR
// end ;
63040: LD_VAR 0 1
63044: RET
// export function PrepareFish ( ) ; begin
63045: LD_INT 0
63047: PPUSH
// uc_side := 0 ;
63048: LD_ADDR_OWVAR 20
63052: PUSH
63053: LD_INT 0
63055: ST_TO_ADDR
// uc_nation := 0 ;
63056: LD_ADDR_OWVAR 21
63060: PUSH
63061: LD_INT 0
63063: ST_TO_ADDR
// hc_class := class_fish ;
63064: LD_ADDR_OWVAR 28
63068: PUSH
63069: LD_INT 20
63071: ST_TO_ADDR
// hc_gallery :=  ;
63072: LD_ADDR_OWVAR 33
63076: PUSH
63077: LD_STRING 
63079: ST_TO_ADDR
// end ;
63080: LD_VAR 0 1
63084: RET
// export function PrepareBird ( ) ; begin
63085: LD_INT 0
63087: PPUSH
// uc_side := 0 ;
63088: LD_ADDR_OWVAR 20
63092: PUSH
63093: LD_INT 0
63095: ST_TO_ADDR
// uc_nation := 0 ;
63096: LD_ADDR_OWVAR 21
63100: PUSH
63101: LD_INT 0
63103: ST_TO_ADDR
// hc_class := class_phororhacos ;
63104: LD_ADDR_OWVAR 28
63108: PUSH
63109: LD_INT 18
63111: ST_TO_ADDR
// hc_gallery :=  ;
63112: LD_ADDR_OWVAR 33
63116: PUSH
63117: LD_STRING 
63119: ST_TO_ADDR
// end ;
63120: LD_VAR 0 1
63124: RET
// export function PrepareHorse ( ) ; begin
63125: LD_INT 0
63127: PPUSH
// uc_side := 0 ;
63128: LD_ADDR_OWVAR 20
63132: PUSH
63133: LD_INT 0
63135: ST_TO_ADDR
// uc_nation := 0 ;
63136: LD_ADDR_OWVAR 21
63140: PUSH
63141: LD_INT 0
63143: ST_TO_ADDR
// hc_class := class_horse ;
63144: LD_ADDR_OWVAR 28
63148: PUSH
63149: LD_INT 21
63151: ST_TO_ADDR
// hc_gallery :=  ;
63152: LD_ADDR_OWVAR 33
63156: PUSH
63157: LD_STRING 
63159: ST_TO_ADDR
// end ;
63160: LD_VAR 0 1
63164: RET
// export function PrepareMastodont ( ) ; begin
63165: LD_INT 0
63167: PPUSH
// uc_side := 0 ;
63168: LD_ADDR_OWVAR 20
63172: PUSH
63173: LD_INT 0
63175: ST_TO_ADDR
// uc_nation := 0 ;
63176: LD_ADDR_OWVAR 21
63180: PUSH
63181: LD_INT 0
63183: ST_TO_ADDR
// vc_chassis := class_mastodont ;
63184: LD_ADDR_OWVAR 37
63188: PUSH
63189: LD_INT 31
63191: ST_TO_ADDR
// vc_control := control_rider ;
63192: LD_ADDR_OWVAR 38
63196: PUSH
63197: LD_INT 4
63199: ST_TO_ADDR
// end ;
63200: LD_VAR 0 1
63204: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63205: LD_INT 0
63207: PPUSH
63208: PPUSH
63209: PPUSH
// uc_side = 0 ;
63210: LD_ADDR_OWVAR 20
63214: PUSH
63215: LD_INT 0
63217: ST_TO_ADDR
// uc_nation = 0 ;
63218: LD_ADDR_OWVAR 21
63222: PUSH
63223: LD_INT 0
63225: ST_TO_ADDR
// InitHc_All ( ) ;
63226: CALL_OW 584
// InitVc ;
63230: CALL_OW 20
// if mastodonts then
63234: LD_VAR 0 6
63238: IFFALSE 63305
// for i = 1 to mastodonts do
63240: LD_ADDR_VAR 0 11
63244: PUSH
63245: DOUBLE
63246: LD_INT 1
63248: DEC
63249: ST_TO_ADDR
63250: LD_VAR 0 6
63254: PUSH
63255: FOR_TO
63256: IFFALSE 63303
// begin vc_chassis := 31 ;
63258: LD_ADDR_OWVAR 37
63262: PUSH
63263: LD_INT 31
63265: ST_TO_ADDR
// vc_control := control_rider ;
63266: LD_ADDR_OWVAR 38
63270: PUSH
63271: LD_INT 4
63273: ST_TO_ADDR
// animal := CreateVehicle ;
63274: LD_ADDR_VAR 0 12
63278: PUSH
63279: CALL_OW 45
63283: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63284: LD_VAR 0 12
63288: PPUSH
63289: LD_VAR 0 8
63293: PPUSH
63294: LD_INT 0
63296: PPUSH
63297: CALL 65433 0 3
// end ;
63301: GO 63255
63303: POP
63304: POP
// if horses then
63305: LD_VAR 0 5
63309: IFFALSE 63376
// for i = 1 to horses do
63311: LD_ADDR_VAR 0 11
63315: PUSH
63316: DOUBLE
63317: LD_INT 1
63319: DEC
63320: ST_TO_ADDR
63321: LD_VAR 0 5
63325: PUSH
63326: FOR_TO
63327: IFFALSE 63374
// begin hc_class := 21 ;
63329: LD_ADDR_OWVAR 28
63333: PUSH
63334: LD_INT 21
63336: ST_TO_ADDR
// hc_gallery :=  ;
63337: LD_ADDR_OWVAR 33
63341: PUSH
63342: LD_STRING 
63344: ST_TO_ADDR
// animal := CreateHuman ;
63345: LD_ADDR_VAR 0 12
63349: PUSH
63350: CALL_OW 44
63354: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63355: LD_VAR 0 12
63359: PPUSH
63360: LD_VAR 0 8
63364: PPUSH
63365: LD_INT 0
63367: PPUSH
63368: CALL 65433 0 3
// end ;
63372: GO 63326
63374: POP
63375: POP
// if birds then
63376: LD_VAR 0 1
63380: IFFALSE 63447
// for i = 1 to birds do
63382: LD_ADDR_VAR 0 11
63386: PUSH
63387: DOUBLE
63388: LD_INT 1
63390: DEC
63391: ST_TO_ADDR
63392: LD_VAR 0 1
63396: PUSH
63397: FOR_TO
63398: IFFALSE 63445
// begin hc_class := 18 ;
63400: LD_ADDR_OWVAR 28
63404: PUSH
63405: LD_INT 18
63407: ST_TO_ADDR
// hc_gallery =  ;
63408: LD_ADDR_OWVAR 33
63412: PUSH
63413: LD_STRING 
63415: ST_TO_ADDR
// animal := CreateHuman ;
63416: LD_ADDR_VAR 0 12
63420: PUSH
63421: CALL_OW 44
63425: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63426: LD_VAR 0 12
63430: PPUSH
63431: LD_VAR 0 8
63435: PPUSH
63436: LD_INT 0
63438: PPUSH
63439: CALL 65433 0 3
// end ;
63443: GO 63397
63445: POP
63446: POP
// if tigers then
63447: LD_VAR 0 2
63451: IFFALSE 63535
// for i = 1 to tigers do
63453: LD_ADDR_VAR 0 11
63457: PUSH
63458: DOUBLE
63459: LD_INT 1
63461: DEC
63462: ST_TO_ADDR
63463: LD_VAR 0 2
63467: PUSH
63468: FOR_TO
63469: IFFALSE 63533
// begin hc_class = class_tiger ;
63471: LD_ADDR_OWVAR 28
63475: PUSH
63476: LD_INT 14
63478: ST_TO_ADDR
// hc_gallery =  ;
63479: LD_ADDR_OWVAR 33
63483: PUSH
63484: LD_STRING 
63486: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63487: LD_ADDR_OWVAR 35
63491: PUSH
63492: LD_INT 7
63494: NEG
63495: PPUSH
63496: LD_INT 7
63498: PPUSH
63499: CALL_OW 12
63503: ST_TO_ADDR
// animal := CreateHuman ;
63504: LD_ADDR_VAR 0 12
63508: PUSH
63509: CALL_OW 44
63513: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63514: LD_VAR 0 12
63518: PPUSH
63519: LD_VAR 0 8
63523: PPUSH
63524: LD_INT 0
63526: PPUSH
63527: CALL 65433 0 3
// end ;
63531: GO 63468
63533: POP
63534: POP
// if apemans then
63535: LD_VAR 0 3
63539: IFFALSE 63662
// for i = 1 to apemans do
63541: LD_ADDR_VAR 0 11
63545: PUSH
63546: DOUBLE
63547: LD_INT 1
63549: DEC
63550: ST_TO_ADDR
63551: LD_VAR 0 3
63555: PUSH
63556: FOR_TO
63557: IFFALSE 63660
// begin hc_class = class_apeman ;
63559: LD_ADDR_OWVAR 28
63563: PUSH
63564: LD_INT 12
63566: ST_TO_ADDR
// hc_gallery =  ;
63567: LD_ADDR_OWVAR 33
63571: PUSH
63572: LD_STRING 
63574: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63575: LD_ADDR_OWVAR 35
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PPUSH
63584: LD_INT 2
63586: PPUSH
63587: CALL_OW 12
63591: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63592: LD_ADDR_OWVAR 31
63596: PUSH
63597: LD_INT 1
63599: PPUSH
63600: LD_INT 3
63602: PPUSH
63603: CALL_OW 12
63607: PUSH
63608: LD_INT 1
63610: PPUSH
63611: LD_INT 3
63613: PPUSH
63614: CALL_OW 12
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 0
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: ST_TO_ADDR
// animal := CreateHuman ;
63631: LD_ADDR_VAR 0 12
63635: PUSH
63636: CALL_OW 44
63640: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63641: LD_VAR 0 12
63645: PPUSH
63646: LD_VAR 0 8
63650: PPUSH
63651: LD_INT 0
63653: PPUSH
63654: CALL 65433 0 3
// end ;
63658: GO 63556
63660: POP
63661: POP
// if enchidnas then
63662: LD_VAR 0 4
63666: IFFALSE 63733
// for i = 1 to enchidnas do
63668: LD_ADDR_VAR 0 11
63672: PUSH
63673: DOUBLE
63674: LD_INT 1
63676: DEC
63677: ST_TO_ADDR
63678: LD_VAR 0 4
63682: PUSH
63683: FOR_TO
63684: IFFALSE 63731
// begin hc_class = 13 ;
63686: LD_ADDR_OWVAR 28
63690: PUSH
63691: LD_INT 13
63693: ST_TO_ADDR
// hc_gallery =  ;
63694: LD_ADDR_OWVAR 33
63698: PUSH
63699: LD_STRING 
63701: ST_TO_ADDR
// animal := CreateHuman ;
63702: LD_ADDR_VAR 0 12
63706: PUSH
63707: CALL_OW 44
63711: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63712: LD_VAR 0 12
63716: PPUSH
63717: LD_VAR 0 8
63721: PPUSH
63722: LD_INT 0
63724: PPUSH
63725: CALL 65433 0 3
// end ;
63729: GO 63683
63731: POP
63732: POP
// if fishes then
63733: LD_VAR 0 7
63737: IFFALSE 63804
// for i = 1 to fishes do
63739: LD_ADDR_VAR 0 11
63743: PUSH
63744: DOUBLE
63745: LD_INT 1
63747: DEC
63748: ST_TO_ADDR
63749: LD_VAR 0 7
63753: PUSH
63754: FOR_TO
63755: IFFALSE 63802
// begin hc_class = 20 ;
63757: LD_ADDR_OWVAR 28
63761: PUSH
63762: LD_INT 20
63764: ST_TO_ADDR
// hc_gallery =  ;
63765: LD_ADDR_OWVAR 33
63769: PUSH
63770: LD_STRING 
63772: ST_TO_ADDR
// animal := CreateHuman ;
63773: LD_ADDR_VAR 0 12
63777: PUSH
63778: CALL_OW 44
63782: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63783: LD_VAR 0 12
63787: PPUSH
63788: LD_VAR 0 9
63792: PPUSH
63793: LD_INT 0
63795: PPUSH
63796: CALL 65433 0 3
// end ;
63800: GO 63754
63802: POP
63803: POP
// end ;
63804: LD_VAR 0 10
63808: RET
// export function WantHeal ( sci , unit ) ; begin
63809: LD_INT 0
63811: PPUSH
// if GetTaskList ( sci ) > 0 then
63812: LD_VAR 0 1
63816: PPUSH
63817: CALL_OW 437
63821: PUSH
63822: LD_INT 0
63824: GREATER
63825: IFFALSE 63895
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63827: LD_VAR 0 1
63831: PPUSH
63832: CALL_OW 437
63836: PUSH
63837: LD_INT 1
63839: ARRAY
63840: PUSH
63841: LD_INT 1
63843: ARRAY
63844: PUSH
63845: LD_STRING l
63847: EQUAL
63848: PUSH
63849: LD_VAR 0 1
63853: PPUSH
63854: CALL_OW 437
63858: PUSH
63859: LD_INT 1
63861: ARRAY
63862: PUSH
63863: LD_INT 4
63865: ARRAY
63866: PUSH
63867: LD_VAR 0 2
63871: EQUAL
63872: AND
63873: IFFALSE 63885
// result := true else
63875: LD_ADDR_VAR 0 3
63879: PUSH
63880: LD_INT 1
63882: ST_TO_ADDR
63883: GO 63893
// result := false ;
63885: LD_ADDR_VAR 0 3
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// end else
63893: GO 63903
// result := false ;
63895: LD_ADDR_VAR 0 3
63899: PUSH
63900: LD_INT 0
63902: ST_TO_ADDR
// end ;
63903: LD_VAR 0 3
63907: RET
// export function HealTarget ( sci ) ; begin
63908: LD_INT 0
63910: PPUSH
// if not sci then
63911: LD_VAR 0 1
63915: NOT
63916: IFFALSE 63920
// exit ;
63918: GO 63985
// result := 0 ;
63920: LD_ADDR_VAR 0 2
63924: PUSH
63925: LD_INT 0
63927: ST_TO_ADDR
// if GetTaskList ( sci ) then
63928: LD_VAR 0 1
63932: PPUSH
63933: CALL_OW 437
63937: IFFALSE 63985
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
63939: LD_VAR 0 1
63943: PPUSH
63944: CALL_OW 437
63948: PUSH
63949: LD_INT 1
63951: ARRAY
63952: PUSH
63953: LD_INT 1
63955: ARRAY
63956: PUSH
63957: LD_STRING l
63959: EQUAL
63960: IFFALSE 63985
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
63962: LD_ADDR_VAR 0 2
63966: PUSH
63967: LD_VAR 0 1
63971: PPUSH
63972: CALL_OW 437
63976: PUSH
63977: LD_INT 1
63979: ARRAY
63980: PUSH
63981: LD_INT 4
63983: ARRAY
63984: ST_TO_ADDR
// end ;
63985: LD_VAR 0 2
63989: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
63990: LD_INT 0
63992: PPUSH
63993: PPUSH
63994: PPUSH
63995: PPUSH
// if not base_units then
63996: LD_VAR 0 1
64000: NOT
64001: IFFALSE 64005
// exit ;
64003: GO 64092
// result := false ;
64005: LD_ADDR_VAR 0 2
64009: PUSH
64010: LD_INT 0
64012: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64013: LD_ADDR_VAR 0 5
64017: PUSH
64018: LD_VAR 0 1
64022: PPUSH
64023: LD_INT 21
64025: PUSH
64026: LD_INT 3
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PPUSH
64033: CALL_OW 72
64037: ST_TO_ADDR
// if not tmp then
64038: LD_VAR 0 5
64042: NOT
64043: IFFALSE 64047
// exit ;
64045: GO 64092
// for i in tmp do
64047: LD_ADDR_VAR 0 3
64051: PUSH
64052: LD_VAR 0 5
64056: PUSH
64057: FOR_IN
64058: IFFALSE 64090
// begin result := EnemyInRange ( i , 22 ) ;
64060: LD_ADDR_VAR 0 2
64064: PUSH
64065: LD_VAR 0 3
64069: PPUSH
64070: LD_INT 22
64072: PPUSH
64073: CALL 61670 0 2
64077: ST_TO_ADDR
// if result then
64078: LD_VAR 0 2
64082: IFFALSE 64088
// exit ;
64084: POP
64085: POP
64086: GO 64092
// end ;
64088: GO 64057
64090: POP
64091: POP
// end ;
64092: LD_VAR 0 2
64096: RET
// export function FilterByTag ( units , tag ) ; begin
64097: LD_INT 0
64099: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
64100: LD_ADDR_VAR 0 3
64104: PUSH
64105: LD_VAR 0 1
64109: PPUSH
64110: LD_INT 120
64112: PUSH
64113: LD_VAR 0 2
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PPUSH
64122: CALL_OW 72
64126: ST_TO_ADDR
// end ;
64127: LD_VAR 0 3
64131: RET
// export function IsDriver ( un ) ; begin
64132: LD_INT 0
64134: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64135: LD_ADDR_VAR 0 2
64139: PUSH
64140: LD_VAR 0 1
64144: PUSH
64145: LD_INT 55
64147: PUSH
64148: EMPTY
64149: LIST
64150: PPUSH
64151: CALL_OW 69
64155: IN
64156: ST_TO_ADDR
// end ;
64157: LD_VAR 0 2
64161: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64162: LD_INT 0
64164: PPUSH
64165: PPUSH
// list := [ ] ;
64166: LD_ADDR_VAR 0 5
64170: PUSH
64171: EMPTY
64172: ST_TO_ADDR
// case d of 0 :
64173: LD_VAR 0 3
64177: PUSH
64178: LD_INT 0
64180: DOUBLE
64181: EQUAL
64182: IFTRUE 64186
64184: GO 64319
64186: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64187: LD_ADDR_VAR 0 5
64191: PUSH
64192: LD_VAR 0 1
64196: PUSH
64197: LD_INT 4
64199: MINUS
64200: PUSH
64201: LD_VAR 0 2
64205: PUSH
64206: LD_INT 4
64208: MINUS
64209: PUSH
64210: LD_INT 2
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: LIST
64217: PUSH
64218: LD_VAR 0 1
64222: PUSH
64223: LD_INT 3
64225: MINUS
64226: PUSH
64227: LD_VAR 0 2
64231: PUSH
64232: LD_INT 1
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: PUSH
64240: LD_VAR 0 1
64244: PUSH
64245: LD_INT 4
64247: PLUS
64248: PUSH
64249: LD_VAR 0 2
64253: PUSH
64254: LD_INT 4
64256: PUSH
64257: EMPTY
64258: LIST
64259: LIST
64260: LIST
64261: PUSH
64262: LD_VAR 0 1
64266: PUSH
64267: LD_INT 3
64269: PLUS
64270: PUSH
64271: LD_VAR 0 2
64275: PUSH
64276: LD_INT 3
64278: PLUS
64279: PUSH
64280: LD_INT 5
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: PUSH
64288: LD_VAR 0 1
64292: PUSH
64293: LD_VAR 0 2
64297: PUSH
64298: LD_INT 4
64300: PLUS
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: LIST
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: ST_TO_ADDR
// end ; 1 :
64317: GO 65017
64319: LD_INT 1
64321: DOUBLE
64322: EQUAL
64323: IFTRUE 64327
64325: GO 64460
64327: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64328: LD_ADDR_VAR 0 5
64332: PUSH
64333: LD_VAR 0 1
64337: PUSH
64338: LD_VAR 0 2
64342: PUSH
64343: LD_INT 4
64345: MINUS
64346: PUSH
64347: LD_INT 3
64349: PUSH
64350: EMPTY
64351: LIST
64352: LIST
64353: LIST
64354: PUSH
64355: LD_VAR 0 1
64359: PUSH
64360: LD_INT 3
64362: MINUS
64363: PUSH
64364: LD_VAR 0 2
64368: PUSH
64369: LD_INT 3
64371: MINUS
64372: PUSH
64373: LD_INT 2
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: LIST
64380: PUSH
64381: LD_VAR 0 1
64385: PUSH
64386: LD_INT 4
64388: MINUS
64389: PUSH
64390: LD_VAR 0 2
64394: PUSH
64395: LD_INT 1
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: LIST
64402: PUSH
64403: LD_VAR 0 1
64407: PUSH
64408: LD_VAR 0 2
64412: PUSH
64413: LD_INT 3
64415: PLUS
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: LIST
64424: PUSH
64425: LD_VAR 0 1
64429: PUSH
64430: LD_INT 4
64432: PLUS
64433: PUSH
64434: LD_VAR 0 2
64438: PUSH
64439: LD_INT 4
64441: PLUS
64442: PUSH
64443: LD_INT 5
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: LIST
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: ST_TO_ADDR
// end ; 2 :
64458: GO 65017
64460: LD_INT 2
64462: DOUBLE
64463: EQUAL
64464: IFTRUE 64468
64466: GO 64597
64468: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64469: LD_ADDR_VAR 0 5
64473: PUSH
64474: LD_VAR 0 1
64478: PUSH
64479: LD_VAR 0 2
64483: PUSH
64484: LD_INT 3
64486: MINUS
64487: PUSH
64488: LD_INT 3
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: LIST
64495: PUSH
64496: LD_VAR 0 1
64500: PUSH
64501: LD_INT 4
64503: PLUS
64504: PUSH
64505: LD_VAR 0 2
64509: PUSH
64510: LD_INT 4
64512: PUSH
64513: EMPTY
64514: LIST
64515: LIST
64516: LIST
64517: PUSH
64518: LD_VAR 0 1
64522: PUSH
64523: LD_VAR 0 2
64527: PUSH
64528: LD_INT 4
64530: PLUS
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: LIST
64539: PUSH
64540: LD_VAR 0 1
64544: PUSH
64545: LD_INT 3
64547: MINUS
64548: PUSH
64549: LD_VAR 0 2
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: LIST
64561: PUSH
64562: LD_VAR 0 1
64566: PUSH
64567: LD_INT 4
64569: MINUS
64570: PUSH
64571: LD_VAR 0 2
64575: PUSH
64576: LD_INT 4
64578: MINUS
64579: PUSH
64580: LD_INT 2
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: ST_TO_ADDR
// end ; 3 :
64595: GO 65017
64597: LD_INT 3
64599: DOUBLE
64600: EQUAL
64601: IFTRUE 64605
64603: GO 64738
64605: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64606: LD_ADDR_VAR 0 5
64610: PUSH
64611: LD_VAR 0 1
64615: PUSH
64616: LD_INT 3
64618: PLUS
64619: PUSH
64620: LD_VAR 0 2
64624: PUSH
64625: LD_INT 4
64627: PUSH
64628: EMPTY
64629: LIST
64630: LIST
64631: LIST
64632: PUSH
64633: LD_VAR 0 1
64637: PUSH
64638: LD_INT 4
64640: PLUS
64641: PUSH
64642: LD_VAR 0 2
64646: PUSH
64647: LD_INT 4
64649: PLUS
64650: PUSH
64651: LD_INT 5
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: LIST
64658: PUSH
64659: LD_VAR 0 1
64663: PUSH
64664: LD_INT 4
64666: MINUS
64667: PUSH
64668: LD_VAR 0 2
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: PUSH
64681: LD_VAR 0 1
64685: PUSH
64686: LD_VAR 0 2
64690: PUSH
64691: LD_INT 4
64693: MINUS
64694: PUSH
64695: LD_INT 3
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: LIST
64702: PUSH
64703: LD_VAR 0 1
64707: PUSH
64708: LD_INT 3
64710: MINUS
64711: PUSH
64712: LD_VAR 0 2
64716: PUSH
64717: LD_INT 3
64719: MINUS
64720: PUSH
64721: LD_INT 2
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: ST_TO_ADDR
// end ; 4 :
64736: GO 65017
64738: LD_INT 4
64740: DOUBLE
64741: EQUAL
64742: IFTRUE 64746
64744: GO 64879
64746: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64747: LD_ADDR_VAR 0 5
64751: PUSH
64752: LD_VAR 0 1
64756: PUSH
64757: LD_VAR 0 2
64761: PUSH
64762: LD_INT 4
64764: PLUS
64765: PUSH
64766: LD_INT 0
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: LIST
64773: PUSH
64774: LD_VAR 0 1
64778: PUSH
64779: LD_INT 3
64781: PLUS
64782: PUSH
64783: LD_VAR 0 2
64787: PUSH
64788: LD_INT 3
64790: PLUS
64791: PUSH
64792: LD_INT 5
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: LIST
64799: PUSH
64800: LD_VAR 0 1
64804: PUSH
64805: LD_INT 4
64807: PLUS
64808: PUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 4
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: LIST
64821: PUSH
64822: LD_VAR 0 1
64826: PUSH
64827: LD_VAR 0 2
64831: PUSH
64832: LD_INT 3
64834: MINUS
64835: PUSH
64836: LD_INT 3
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: LIST
64843: PUSH
64844: LD_VAR 0 1
64848: PUSH
64849: LD_INT 4
64851: MINUS
64852: PUSH
64853: LD_VAR 0 2
64857: PUSH
64858: LD_INT 4
64860: MINUS
64861: PUSH
64862: LD_INT 2
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: LIST
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: LIST
64875: LIST
64876: ST_TO_ADDR
// end ; 5 :
64877: GO 65017
64879: LD_INT 5
64881: DOUBLE
64882: EQUAL
64883: IFTRUE 64887
64885: GO 65016
64887: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
64888: LD_ADDR_VAR 0 5
64892: PUSH
64893: LD_VAR 0 1
64897: PUSH
64898: LD_INT 4
64900: MINUS
64901: PUSH
64902: LD_VAR 0 2
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: PUSH
64915: LD_VAR 0 1
64919: PUSH
64920: LD_VAR 0 2
64924: PUSH
64925: LD_INT 4
64927: MINUS
64928: PUSH
64929: LD_INT 3
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: LIST
64936: PUSH
64937: LD_VAR 0 1
64941: PUSH
64942: LD_INT 4
64944: PLUS
64945: PUSH
64946: LD_VAR 0 2
64950: PUSH
64951: LD_INT 4
64953: PLUS
64954: PUSH
64955: LD_INT 5
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: LIST
64962: PUSH
64963: LD_VAR 0 1
64967: PUSH
64968: LD_INT 3
64970: PLUS
64971: PUSH
64972: LD_VAR 0 2
64976: PUSH
64977: LD_INT 4
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: LIST
64984: PUSH
64985: LD_VAR 0 1
64989: PUSH
64990: LD_VAR 0 2
64994: PUSH
64995: LD_INT 3
64997: PLUS
64998: PUSH
64999: LD_INT 0
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: LIST
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: ST_TO_ADDR
// end ; end ;
65014: GO 65017
65016: POP
// result := list ;
65017: LD_ADDR_VAR 0 4
65021: PUSH
65022: LD_VAR 0 5
65026: ST_TO_ADDR
// end ;
65027: LD_VAR 0 4
65031: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65032: LD_INT 0
65034: PPUSH
65035: PPUSH
65036: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65037: LD_VAR 0 1
65041: NOT
65042: PUSH
65043: LD_VAR 0 2
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: LD_INT 2
65053: PUSH
65054: LD_INT 3
65056: PUSH
65057: LD_INT 4
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: IN
65066: NOT
65067: OR
65068: IFFALSE 65072
// exit ;
65070: GO 65155
// tmp := [ ] ;
65072: LD_ADDR_VAR 0 5
65076: PUSH
65077: EMPTY
65078: ST_TO_ADDR
// for i in units do
65079: LD_ADDR_VAR 0 4
65083: PUSH
65084: LD_VAR 0 1
65088: PUSH
65089: FOR_IN
65090: IFFALSE 65124
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
65092: LD_ADDR_VAR 0 5
65096: PUSH
65097: LD_VAR 0 5
65101: PPUSH
65102: LD_VAR 0 4
65106: PPUSH
65107: LD_VAR 0 2
65111: PPUSH
65112: CALL_OW 259
65116: PPUSH
65117: CALL 66528 0 2
65121: ST_TO_ADDR
65122: GO 65089
65124: POP
65125: POP
// if not tmp then
65126: LD_VAR 0 5
65130: NOT
65131: IFFALSE 65135
// exit ;
65133: GO 65155
// result := SortListByListDesc ( units , tmp ) ;
65135: LD_ADDR_VAR 0 3
65139: PUSH
65140: LD_VAR 0 1
65144: PPUSH
65145: LD_VAR 0 5
65149: PPUSH
65150: CALL_OW 77
65154: ST_TO_ADDR
// end ;
65155: LD_VAR 0 3
65159: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65160: LD_INT 0
65162: PPUSH
65163: PPUSH
65164: PPUSH
// result := false ;
65165: LD_ADDR_VAR 0 3
65169: PUSH
65170: LD_INT 0
65172: ST_TO_ADDR
// if not building then
65173: LD_VAR 0 2
65177: NOT
65178: IFFALSE 65182
// exit ;
65180: GO 65320
// x := GetX ( building ) ;
65182: LD_ADDR_VAR 0 4
65186: PUSH
65187: LD_VAR 0 2
65191: PPUSH
65192: CALL_OW 250
65196: ST_TO_ADDR
// y := GetY ( building ) ;
65197: LD_ADDR_VAR 0 5
65201: PUSH
65202: LD_VAR 0 2
65206: PPUSH
65207: CALL_OW 251
65211: ST_TO_ADDR
// if not x or not y then
65212: LD_VAR 0 4
65216: NOT
65217: PUSH
65218: LD_VAR 0 5
65222: NOT
65223: OR
65224: IFFALSE 65228
// exit ;
65226: GO 65320
// if GetTaskList ( unit ) then
65228: LD_VAR 0 1
65232: PPUSH
65233: CALL_OW 437
65237: IFFALSE 65320
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65239: LD_STRING e
65241: PUSH
65242: LD_VAR 0 1
65246: PPUSH
65247: CALL_OW 437
65251: PUSH
65252: LD_INT 1
65254: ARRAY
65255: PUSH
65256: LD_INT 1
65258: ARRAY
65259: EQUAL
65260: PUSH
65261: LD_VAR 0 4
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 437
65275: PUSH
65276: LD_INT 1
65278: ARRAY
65279: PUSH
65280: LD_INT 2
65282: ARRAY
65283: EQUAL
65284: AND
65285: PUSH
65286: LD_VAR 0 5
65290: PUSH
65291: LD_VAR 0 1
65295: PPUSH
65296: CALL_OW 437
65300: PUSH
65301: LD_INT 1
65303: ARRAY
65304: PUSH
65305: LD_INT 3
65307: ARRAY
65308: EQUAL
65309: AND
65310: IFFALSE 65320
// result := true end ;
65312: LD_ADDR_VAR 0 3
65316: PUSH
65317: LD_INT 1
65319: ST_TO_ADDR
// end ;
65320: LD_VAR 0 3
65324: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65325: LD_INT 0
65327: PPUSH
// result := false ;
65328: LD_ADDR_VAR 0 4
65332: PUSH
65333: LD_INT 0
65335: ST_TO_ADDR
// if GetTaskList ( unit ) then
65336: LD_VAR 0 1
65340: PPUSH
65341: CALL_OW 437
65345: IFFALSE 65428
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65347: LD_STRING M
65349: PUSH
65350: LD_VAR 0 1
65354: PPUSH
65355: CALL_OW 437
65359: PUSH
65360: LD_INT 1
65362: ARRAY
65363: PUSH
65364: LD_INT 1
65366: ARRAY
65367: EQUAL
65368: PUSH
65369: LD_VAR 0 2
65373: PUSH
65374: LD_VAR 0 1
65378: PPUSH
65379: CALL_OW 437
65383: PUSH
65384: LD_INT 1
65386: ARRAY
65387: PUSH
65388: LD_INT 2
65390: ARRAY
65391: EQUAL
65392: AND
65393: PUSH
65394: LD_VAR 0 3
65398: PUSH
65399: LD_VAR 0 1
65403: PPUSH
65404: CALL_OW 437
65408: PUSH
65409: LD_INT 1
65411: ARRAY
65412: PUSH
65413: LD_INT 3
65415: ARRAY
65416: EQUAL
65417: AND
65418: IFFALSE 65428
// result := true ;
65420: LD_ADDR_VAR 0 4
65424: PUSH
65425: LD_INT 1
65427: ST_TO_ADDR
// end ; end ;
65428: LD_VAR 0 4
65432: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65433: LD_INT 0
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
// if not unit or not area then
65439: LD_VAR 0 1
65443: NOT
65444: PUSH
65445: LD_VAR 0 2
65449: NOT
65450: OR
65451: IFFALSE 65455
// exit ;
65453: GO 65631
// tmp := AreaToList ( area , i ) ;
65455: LD_ADDR_VAR 0 6
65459: PUSH
65460: LD_VAR 0 2
65464: PPUSH
65465: LD_VAR 0 5
65469: PPUSH
65470: CALL_OW 517
65474: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65475: LD_ADDR_VAR 0 5
65479: PUSH
65480: DOUBLE
65481: LD_INT 1
65483: DEC
65484: ST_TO_ADDR
65485: LD_VAR 0 6
65489: PUSH
65490: LD_INT 1
65492: ARRAY
65493: PUSH
65494: FOR_TO
65495: IFFALSE 65629
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65497: LD_ADDR_VAR 0 7
65501: PUSH
65502: LD_VAR 0 6
65506: PUSH
65507: LD_INT 1
65509: ARRAY
65510: PUSH
65511: LD_VAR 0 5
65515: ARRAY
65516: PUSH
65517: LD_VAR 0 6
65521: PUSH
65522: LD_INT 2
65524: ARRAY
65525: PUSH
65526: LD_VAR 0 5
65530: ARRAY
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
65536: LD_INT 92
65538: PUSH
65539: LD_VAR 0 7
65543: PUSH
65544: LD_INT 1
65546: ARRAY
65547: PUSH
65548: LD_VAR 0 7
65552: PUSH
65553: LD_INT 2
65555: ARRAY
65556: PUSH
65557: LD_INT 2
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: LIST
65565: PPUSH
65566: CALL_OW 69
65570: PUSH
65571: LD_INT 0
65573: EQUAL
65574: IFFALSE 65627
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65576: LD_VAR 0 1
65580: PPUSH
65581: LD_VAR 0 7
65585: PUSH
65586: LD_INT 1
65588: ARRAY
65589: PPUSH
65590: LD_VAR 0 7
65594: PUSH
65595: LD_INT 2
65597: ARRAY
65598: PPUSH
65599: LD_VAR 0 3
65603: PPUSH
65604: CALL_OW 48
// result := IsPlaced ( unit ) ;
65608: LD_ADDR_VAR 0 4
65612: PUSH
65613: LD_VAR 0 1
65617: PPUSH
65618: CALL_OW 305
65622: ST_TO_ADDR
// exit ;
65623: POP
65624: POP
65625: GO 65631
// end ; end ;
65627: GO 65494
65629: POP
65630: POP
// end ;
65631: LD_VAR 0 4
65635: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65636: LD_INT 0
65638: PPUSH
65639: PPUSH
65640: PPUSH
// if not side or side > 8 then
65641: LD_VAR 0 1
65645: NOT
65646: PUSH
65647: LD_VAR 0 1
65651: PUSH
65652: LD_INT 8
65654: GREATER
65655: OR
65656: IFFALSE 65660
// exit ;
65658: GO 65847
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65660: LD_ADDR_VAR 0 4
65664: PUSH
65665: LD_INT 22
65667: PUSH
65668: LD_VAR 0 1
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 21
65679: PUSH
65680: LD_INT 3
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PPUSH
65691: CALL_OW 69
65695: ST_TO_ADDR
// if not tmp then
65696: LD_VAR 0 4
65700: NOT
65701: IFFALSE 65705
// exit ;
65703: GO 65847
// enable_addtolog := true ;
65705: LD_ADDR_OWVAR 81
65709: PUSH
65710: LD_INT 1
65712: ST_TO_ADDR
// AddToLog ( [ ) ;
65713: LD_STRING [
65715: PPUSH
65716: CALL_OW 561
// for i in tmp do
65720: LD_ADDR_VAR 0 3
65724: PUSH
65725: LD_VAR 0 4
65729: PUSH
65730: FOR_IN
65731: IFFALSE 65838
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65733: LD_STRING [
65735: PUSH
65736: LD_VAR 0 3
65740: PPUSH
65741: CALL_OW 266
65745: STR
65746: PUSH
65747: LD_STRING , 
65749: STR
65750: PUSH
65751: LD_VAR 0 3
65755: PPUSH
65756: CALL_OW 250
65760: STR
65761: PUSH
65762: LD_STRING , 
65764: STR
65765: PUSH
65766: LD_VAR 0 3
65770: PPUSH
65771: CALL_OW 251
65775: STR
65776: PUSH
65777: LD_STRING , 
65779: STR
65780: PUSH
65781: LD_VAR 0 3
65785: PPUSH
65786: CALL_OW 254
65790: STR
65791: PUSH
65792: LD_STRING , 
65794: STR
65795: PUSH
65796: LD_VAR 0 3
65800: PPUSH
65801: LD_INT 1
65803: PPUSH
65804: CALL_OW 268
65808: STR
65809: PUSH
65810: LD_STRING , 
65812: STR
65813: PUSH
65814: LD_VAR 0 3
65818: PPUSH
65819: LD_INT 2
65821: PPUSH
65822: CALL_OW 268
65826: STR
65827: PUSH
65828: LD_STRING ],
65830: STR
65831: PPUSH
65832: CALL_OW 561
// end ;
65836: GO 65730
65838: POP
65839: POP
// AddToLog ( ]; ) ;
65840: LD_STRING ];
65842: PPUSH
65843: CALL_OW 561
// end ;
65847: LD_VAR 0 2
65851: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65852: LD_INT 0
65854: PPUSH
65855: PPUSH
65856: PPUSH
65857: PPUSH
65858: PPUSH
// if not area or not rate or not max then
65859: LD_VAR 0 1
65863: NOT
65864: PUSH
65865: LD_VAR 0 2
65869: NOT
65870: OR
65871: PUSH
65872: LD_VAR 0 4
65876: NOT
65877: OR
65878: IFFALSE 65882
// exit ;
65880: GO 66071
// while 1 do
65882: LD_INT 1
65884: IFFALSE 66071
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
65886: LD_ADDR_VAR 0 9
65890: PUSH
65891: LD_VAR 0 1
65895: PPUSH
65896: LD_INT 1
65898: PPUSH
65899: CALL_OW 287
65903: PUSH
65904: LD_INT 10
65906: MUL
65907: ST_TO_ADDR
// r := rate / 10 ;
65908: LD_ADDR_VAR 0 7
65912: PUSH
65913: LD_VAR 0 2
65917: PUSH
65918: LD_INT 10
65920: DIVREAL
65921: ST_TO_ADDR
// time := 1 1$00 ;
65922: LD_ADDR_VAR 0 8
65926: PUSH
65927: LD_INT 2100
65929: ST_TO_ADDR
// if amount < min then
65930: LD_VAR 0 9
65934: PUSH
65935: LD_VAR 0 3
65939: LESS
65940: IFFALSE 65958
// r := r * 2 else
65942: LD_ADDR_VAR 0 7
65946: PUSH
65947: LD_VAR 0 7
65951: PUSH
65952: LD_INT 2
65954: MUL
65955: ST_TO_ADDR
65956: GO 65984
// if amount > max then
65958: LD_VAR 0 9
65962: PUSH
65963: LD_VAR 0 4
65967: GREATER
65968: IFFALSE 65984
// r := r / 2 ;
65970: LD_ADDR_VAR 0 7
65974: PUSH
65975: LD_VAR 0 7
65979: PUSH
65980: LD_INT 2
65982: DIVREAL
65983: ST_TO_ADDR
// time := time / r ;
65984: LD_ADDR_VAR 0 8
65988: PUSH
65989: LD_VAR 0 8
65993: PUSH
65994: LD_VAR 0 7
65998: DIVREAL
65999: ST_TO_ADDR
// if time < 0 then
66000: LD_VAR 0 8
66004: PUSH
66005: LD_INT 0
66007: LESS
66008: IFFALSE 66025
// time := time * - 1 ;
66010: LD_ADDR_VAR 0 8
66014: PUSH
66015: LD_VAR 0 8
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: MUL
66024: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
66025: LD_VAR 0 8
66029: PUSH
66030: LD_INT 35
66032: PPUSH
66033: LD_INT 875
66035: PPUSH
66036: CALL_OW 12
66040: PLUS
66041: PPUSH
66042: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66046: LD_INT 1
66048: PPUSH
66049: LD_INT 5
66051: PPUSH
66052: CALL_OW 12
66056: PPUSH
66057: LD_VAR 0 1
66061: PPUSH
66062: LD_INT 1
66064: PPUSH
66065: CALL_OW 55
// end ;
66069: GO 65882
// end ;
66071: LD_VAR 0 5
66075: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66076: LD_INT 0
66078: PPUSH
66079: PPUSH
66080: PPUSH
66081: PPUSH
66082: PPUSH
66083: PPUSH
66084: PPUSH
66085: PPUSH
// if not turrets or not factories then
66086: LD_VAR 0 1
66090: NOT
66091: PUSH
66092: LD_VAR 0 2
66096: NOT
66097: OR
66098: IFFALSE 66102
// exit ;
66100: GO 66409
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66102: LD_ADDR_VAR 0 10
66106: PUSH
66107: LD_INT 5
66109: PUSH
66110: LD_INT 6
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 2
66119: PUSH
66120: LD_INT 4
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: LD_INT 5
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 24
66144: PUSH
66145: LD_INT 25
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 23
66154: PUSH
66155: LD_INT 27
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: LD_INT 42
66168: PUSH
66169: LD_INT 43
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 44
66178: PUSH
66179: LD_INT 46
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 45
66188: PUSH
66189: LD_INT 47
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: ST_TO_ADDR
// result := [ ] ;
66206: LD_ADDR_VAR 0 3
66210: PUSH
66211: EMPTY
66212: ST_TO_ADDR
// for i in turrets do
66213: LD_ADDR_VAR 0 4
66217: PUSH
66218: LD_VAR 0 1
66222: PUSH
66223: FOR_IN
66224: IFFALSE 66407
// begin nat := GetNation ( i ) ;
66226: LD_ADDR_VAR 0 7
66230: PUSH
66231: LD_VAR 0 4
66235: PPUSH
66236: CALL_OW 248
66240: ST_TO_ADDR
// weapon := 0 ;
66241: LD_ADDR_VAR 0 8
66245: PUSH
66246: LD_INT 0
66248: ST_TO_ADDR
// if not nat then
66249: LD_VAR 0 7
66253: NOT
66254: IFFALSE 66258
// continue ;
66256: GO 66223
// for j in list [ nat ] do
66258: LD_ADDR_VAR 0 5
66262: PUSH
66263: LD_VAR 0 10
66267: PUSH
66268: LD_VAR 0 7
66272: ARRAY
66273: PUSH
66274: FOR_IN
66275: IFFALSE 66316
// if GetBWeapon ( i ) = j [ 1 ] then
66277: LD_VAR 0 4
66281: PPUSH
66282: CALL_OW 269
66286: PUSH
66287: LD_VAR 0 5
66291: PUSH
66292: LD_INT 1
66294: ARRAY
66295: EQUAL
66296: IFFALSE 66314
// begin weapon := j [ 2 ] ;
66298: LD_ADDR_VAR 0 8
66302: PUSH
66303: LD_VAR 0 5
66307: PUSH
66308: LD_INT 2
66310: ARRAY
66311: ST_TO_ADDR
// break ;
66312: GO 66316
// end ;
66314: GO 66274
66316: POP
66317: POP
// if not weapon then
66318: LD_VAR 0 8
66322: NOT
66323: IFFALSE 66327
// continue ;
66325: GO 66223
// for k in factories do
66327: LD_ADDR_VAR 0 6
66331: PUSH
66332: LD_VAR 0 2
66336: PUSH
66337: FOR_IN
66338: IFFALSE 66403
// begin weapons := AvailableWeaponList ( k ) ;
66340: LD_ADDR_VAR 0 9
66344: PUSH
66345: LD_VAR 0 6
66349: PPUSH
66350: CALL_OW 478
66354: ST_TO_ADDR
// if not weapons then
66355: LD_VAR 0 9
66359: NOT
66360: IFFALSE 66364
// continue ;
66362: GO 66337
// if weapon in weapons then
66364: LD_VAR 0 8
66368: PUSH
66369: LD_VAR 0 9
66373: IN
66374: IFFALSE 66401
// begin result := [ i , weapon ] ;
66376: LD_ADDR_VAR 0 3
66380: PUSH
66381: LD_VAR 0 4
66385: PUSH
66386: LD_VAR 0 8
66390: PUSH
66391: EMPTY
66392: LIST
66393: LIST
66394: ST_TO_ADDR
// exit ;
66395: POP
66396: POP
66397: POP
66398: POP
66399: GO 66409
// end ; end ;
66401: GO 66337
66403: POP
66404: POP
// end ;
66405: GO 66223
66407: POP
66408: POP
// end ;
66409: LD_VAR 0 3
66413: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66414: LD_INT 0
66416: PPUSH
// if not side or side > 8 then
66417: LD_VAR 0 3
66421: NOT
66422: PUSH
66423: LD_VAR 0 3
66427: PUSH
66428: LD_INT 8
66430: GREATER
66431: OR
66432: IFFALSE 66436
// exit ;
66434: GO 66495
// if not range then
66436: LD_VAR 0 4
66440: NOT
66441: IFFALSE 66452
// range := - 12 ;
66443: LD_ADDR_VAR 0 4
66447: PUSH
66448: LD_INT 12
66450: NEG
66451: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66452: LD_VAR 0 1
66456: PPUSH
66457: LD_VAR 0 2
66461: PPUSH
66462: LD_VAR 0 3
66466: PPUSH
66467: LD_VAR 0 4
66471: PPUSH
66472: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66476: LD_VAR 0 1
66480: PPUSH
66481: LD_VAR 0 2
66485: PPUSH
66486: LD_VAR 0 3
66490: PPUSH
66491: CALL_OW 331
// end ;
66495: LD_VAR 0 5
66499: RET
// export function Video ( mode ) ; begin
66500: LD_INT 0
66502: PPUSH
// ingame_video = mode ;
66503: LD_ADDR_OWVAR 52
66507: PUSH
66508: LD_VAR 0 1
66512: ST_TO_ADDR
// interface_hidden = mode ;
66513: LD_ADDR_OWVAR 54
66517: PUSH
66518: LD_VAR 0 1
66522: ST_TO_ADDR
// end ;
66523: LD_VAR 0 2
66527: RET
// export function Join ( array , element ) ; begin
66528: LD_INT 0
66530: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66531: LD_ADDR_VAR 0 3
66535: PUSH
66536: LD_VAR 0 1
66540: PPUSH
66541: LD_VAR 0 1
66545: PUSH
66546: LD_INT 1
66548: PLUS
66549: PPUSH
66550: LD_VAR 0 2
66554: PPUSH
66555: CALL_OW 1
66559: ST_TO_ADDR
// end ;
66560: LD_VAR 0 3
66564: RET
// export function JoinUnion ( array , element ) ; begin
66565: LD_INT 0
66567: PPUSH
// result := array union element ;
66568: LD_ADDR_VAR 0 3
66572: PUSH
66573: LD_VAR 0 1
66577: PUSH
66578: LD_VAR 0 2
66582: UNION
66583: ST_TO_ADDR
// end ;
66584: LD_VAR 0 3
66588: RET
// export function GetBehemoths ( side ) ; begin
66589: LD_INT 0
66591: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
66592: LD_ADDR_VAR 0 2
66596: PUSH
66597: LD_INT 22
66599: PUSH
66600: LD_VAR 0 1
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 31
66611: PUSH
66612: LD_INT 25
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: PPUSH
66623: CALL_OW 69
66627: ST_TO_ADDR
// end ;
66628: LD_VAR 0 2
66632: RET
// export function Shuffle ( array ) ; var i , index ; begin
66633: LD_INT 0
66635: PPUSH
66636: PPUSH
66637: PPUSH
// result := [ ] ;
66638: LD_ADDR_VAR 0 2
66642: PUSH
66643: EMPTY
66644: ST_TO_ADDR
// if not array then
66645: LD_VAR 0 1
66649: NOT
66650: IFFALSE 66654
// exit ;
66652: GO 66753
// Randomize ;
66654: CALL_OW 10
// for i = array downto 1 do
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: DOUBLE
66664: LD_VAR 0 1
66668: INC
66669: ST_TO_ADDR
66670: LD_INT 1
66672: PUSH
66673: FOR_DOWNTO
66674: IFFALSE 66751
// begin index := rand ( 1 , array ) ;
66676: LD_ADDR_VAR 0 4
66680: PUSH
66681: LD_INT 1
66683: PPUSH
66684: LD_VAR 0 1
66688: PPUSH
66689: CALL_OW 12
66693: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66694: LD_ADDR_VAR 0 2
66698: PUSH
66699: LD_VAR 0 2
66703: PPUSH
66704: LD_VAR 0 2
66708: PUSH
66709: LD_INT 1
66711: PLUS
66712: PPUSH
66713: LD_VAR 0 1
66717: PUSH
66718: LD_VAR 0 4
66722: ARRAY
66723: PPUSH
66724: CALL_OW 2
66728: ST_TO_ADDR
// array := Delete ( array , index ) ;
66729: LD_ADDR_VAR 0 1
66733: PUSH
66734: LD_VAR 0 1
66738: PPUSH
66739: LD_VAR 0 4
66743: PPUSH
66744: CALL_OW 3
66748: ST_TO_ADDR
// end ;
66749: GO 66673
66751: POP
66752: POP
// end ;
66753: LD_VAR 0 2
66757: RET
// export function GetBaseMaterials ( base ) ; begin
66758: LD_INT 0
66760: PPUSH
// result := [ 0 , 0 , 0 ] ;
66761: LD_ADDR_VAR 0 2
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: LD_INT 0
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: LIST
66779: ST_TO_ADDR
// if not base then
66780: LD_VAR 0 1
66784: NOT
66785: IFFALSE 66789
// exit ;
66787: GO 66838
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66789: LD_ADDR_VAR 0 2
66793: PUSH
66794: LD_VAR 0 1
66798: PPUSH
66799: LD_INT 1
66801: PPUSH
66802: CALL_OW 275
66806: PUSH
66807: LD_VAR 0 1
66811: PPUSH
66812: LD_INT 2
66814: PPUSH
66815: CALL_OW 275
66819: PUSH
66820: LD_VAR 0 1
66824: PPUSH
66825: LD_INT 3
66827: PPUSH
66828: CALL_OW 275
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: ST_TO_ADDR
// end ;
66838: LD_VAR 0 2
66842: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66843: LD_INT 0
66845: PPUSH
66846: PPUSH
// result := array ;
66847: LD_ADDR_VAR 0 3
66851: PUSH
66852: LD_VAR 0 1
66856: ST_TO_ADDR
// if size >= result then
66857: LD_VAR 0 2
66861: PUSH
66862: LD_VAR 0 3
66866: GREATEREQUAL
66867: IFFALSE 66871
// exit ;
66869: GO 66921
// if size then
66871: LD_VAR 0 2
66875: IFFALSE 66921
// for i := array downto size do
66877: LD_ADDR_VAR 0 4
66881: PUSH
66882: DOUBLE
66883: LD_VAR 0 1
66887: INC
66888: ST_TO_ADDR
66889: LD_VAR 0 2
66893: PUSH
66894: FOR_DOWNTO
66895: IFFALSE 66919
// result := Delete ( result , result ) ;
66897: LD_ADDR_VAR 0 3
66901: PUSH
66902: LD_VAR 0 3
66906: PPUSH
66907: LD_VAR 0 3
66911: PPUSH
66912: CALL_OW 3
66916: ST_TO_ADDR
66917: GO 66894
66919: POP
66920: POP
// end ;
66921: LD_VAR 0 3
66925: RET
// export function ComExit ( unit ) ; var tmp ; begin
66926: LD_INT 0
66928: PPUSH
66929: PPUSH
// if not IsInUnit ( unit ) then
66930: LD_VAR 0 1
66934: PPUSH
66935: CALL_OW 310
66939: NOT
66940: IFFALSE 66944
// exit ;
66942: GO 67004
// tmp := IsInUnit ( unit ) ;
66944: LD_ADDR_VAR 0 3
66948: PUSH
66949: LD_VAR 0 1
66953: PPUSH
66954: CALL_OW 310
66958: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
66959: LD_VAR 0 3
66963: PPUSH
66964: CALL_OW 247
66968: PUSH
66969: LD_INT 2
66971: EQUAL
66972: IFFALSE 66985
// ComExitVehicle ( unit ) else
66974: LD_VAR 0 1
66978: PPUSH
66979: CALL_OW 121
66983: GO 66994
// ComExitBuilding ( unit ) ;
66985: LD_VAR 0 1
66989: PPUSH
66990: CALL_OW 122
// result := tmp ;
66994: LD_ADDR_VAR 0 2
66998: PUSH
66999: LD_VAR 0 3
67003: ST_TO_ADDR
// end ;
67004: LD_VAR 0 2
67008: RET
// export function ComExitAll ( units ) ; var i ; begin
67009: LD_INT 0
67011: PPUSH
67012: PPUSH
// if not units then
67013: LD_VAR 0 1
67017: NOT
67018: IFFALSE 67022
// exit ;
67020: GO 67048
// for i in units do
67022: LD_ADDR_VAR 0 3
67026: PUSH
67027: LD_VAR 0 1
67031: PUSH
67032: FOR_IN
67033: IFFALSE 67046
// ComExit ( i ) ;
67035: LD_VAR 0 3
67039: PPUSH
67040: CALL 66926 0 1
67044: GO 67032
67046: POP
67047: POP
// end ;
67048: LD_VAR 0 2
67052: RET
// export function ResetHc ; begin
67053: LD_INT 0
67055: PPUSH
// InitHc ;
67056: CALL_OW 19
// hc_importance := 0 ;
67060: LD_ADDR_OWVAR 32
67064: PUSH
67065: LD_INT 0
67067: ST_TO_ADDR
// end ;
67068: LD_VAR 0 1
67072: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67073: LD_INT 0
67075: PPUSH
67076: PPUSH
67077: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67078: LD_ADDR_VAR 0 6
67082: PUSH
67083: LD_VAR 0 1
67087: PUSH
67088: LD_VAR 0 3
67092: PLUS
67093: PUSH
67094: LD_INT 2
67096: DIV
67097: ST_TO_ADDR
// if _x < 0 then
67098: LD_VAR 0 6
67102: PUSH
67103: LD_INT 0
67105: LESS
67106: IFFALSE 67123
// _x := _x * - 1 ;
67108: LD_ADDR_VAR 0 6
67112: PUSH
67113: LD_VAR 0 6
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: MUL
67122: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67123: LD_ADDR_VAR 0 7
67127: PUSH
67128: LD_VAR 0 2
67132: PUSH
67133: LD_VAR 0 4
67137: PLUS
67138: PUSH
67139: LD_INT 2
67141: DIV
67142: ST_TO_ADDR
// if _y < 0 then
67143: LD_VAR 0 7
67147: PUSH
67148: LD_INT 0
67150: LESS
67151: IFFALSE 67168
// _y := _y * - 1 ;
67153: LD_ADDR_VAR 0 7
67157: PUSH
67158: LD_VAR 0 7
67162: PUSH
67163: LD_INT 1
67165: NEG
67166: MUL
67167: ST_TO_ADDR
// result := [ _x , _y ] ;
67168: LD_ADDR_VAR 0 5
67172: PUSH
67173: LD_VAR 0 6
67177: PUSH
67178: LD_VAR 0 7
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// end ;
67187: LD_VAR 0 5
67191: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67192: LD_INT 0
67194: PPUSH
67195: PPUSH
67196: PPUSH
67197: PPUSH
// task := GetTaskList ( unit ) ;
67198: LD_ADDR_VAR 0 7
67202: PUSH
67203: LD_VAR 0 1
67207: PPUSH
67208: CALL_OW 437
67212: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67213: LD_VAR 0 7
67217: NOT
67218: PUSH
67219: LD_VAR 0 1
67223: PPUSH
67224: LD_VAR 0 2
67228: PPUSH
67229: CALL_OW 308
67233: NOT
67234: AND
67235: IFFALSE 67239
// exit ;
67237: GO 67357
// if IsInArea ( unit , area ) then
67239: LD_VAR 0 1
67243: PPUSH
67244: LD_VAR 0 2
67248: PPUSH
67249: CALL_OW 308
67253: IFFALSE 67271
// begin ComMoveToArea ( unit , goAway ) ;
67255: LD_VAR 0 1
67259: PPUSH
67260: LD_VAR 0 3
67264: PPUSH
67265: CALL_OW 113
// exit ;
67269: GO 67357
// end ; if task [ 1 ] [ 1 ] <> M then
67271: LD_VAR 0 7
67275: PUSH
67276: LD_INT 1
67278: ARRAY
67279: PUSH
67280: LD_INT 1
67282: ARRAY
67283: PUSH
67284: LD_STRING M
67286: NONEQUAL
67287: IFFALSE 67291
// exit ;
67289: GO 67357
// x := task [ 1 ] [ 2 ] ;
67291: LD_ADDR_VAR 0 5
67295: PUSH
67296: LD_VAR 0 7
67300: PUSH
67301: LD_INT 1
67303: ARRAY
67304: PUSH
67305: LD_INT 2
67307: ARRAY
67308: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67309: LD_ADDR_VAR 0 6
67313: PUSH
67314: LD_VAR 0 7
67318: PUSH
67319: LD_INT 1
67321: ARRAY
67322: PUSH
67323: LD_INT 3
67325: ARRAY
67326: ST_TO_ADDR
// if InArea ( x , y , area ) then
67327: LD_VAR 0 5
67331: PPUSH
67332: LD_VAR 0 6
67336: PPUSH
67337: LD_VAR 0 2
67341: PPUSH
67342: CALL_OW 309
67346: IFFALSE 67357
// ComStop ( unit ) ;
67348: LD_VAR 0 1
67352: PPUSH
67353: CALL_OW 141
// end ;
67357: LD_VAR 0 4
67361: RET
// export function Abs ( value ) ; begin
67362: LD_INT 0
67364: PPUSH
// result := value ;
67365: LD_ADDR_VAR 0 2
67369: PUSH
67370: LD_VAR 0 1
67374: ST_TO_ADDR
// if value < 0 then
67375: LD_VAR 0 1
67379: PUSH
67380: LD_INT 0
67382: LESS
67383: IFFALSE 67400
// result := value * - 1 ;
67385: LD_ADDR_VAR 0 2
67389: PUSH
67390: LD_VAR 0 1
67394: PUSH
67395: LD_INT 1
67397: NEG
67398: MUL
67399: ST_TO_ADDR
// end ;
67400: LD_VAR 0 2
67404: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67405: LD_INT 0
67407: PPUSH
67408: PPUSH
67409: PPUSH
67410: PPUSH
67411: PPUSH
67412: PPUSH
67413: PPUSH
67414: PPUSH
// if not unit or not building then
67415: LD_VAR 0 1
67419: NOT
67420: PUSH
67421: LD_VAR 0 2
67425: NOT
67426: OR
67427: IFFALSE 67431
// exit ;
67429: GO 67657
// x := GetX ( building ) ;
67431: LD_ADDR_VAR 0 4
67435: PUSH
67436: LD_VAR 0 2
67440: PPUSH
67441: CALL_OW 250
67445: ST_TO_ADDR
// y := GetY ( building ) ;
67446: LD_ADDR_VAR 0 6
67450: PUSH
67451: LD_VAR 0 2
67455: PPUSH
67456: CALL_OW 251
67460: ST_TO_ADDR
// d := GetDir ( building ) ;
67461: LD_ADDR_VAR 0 8
67465: PUSH
67466: LD_VAR 0 2
67470: PPUSH
67471: CALL_OW 254
67475: ST_TO_ADDR
// r := 4 ;
67476: LD_ADDR_VAR 0 9
67480: PUSH
67481: LD_INT 4
67483: ST_TO_ADDR
// for i := 1 to 5 do
67484: LD_ADDR_VAR 0 10
67488: PUSH
67489: DOUBLE
67490: LD_INT 1
67492: DEC
67493: ST_TO_ADDR
67494: LD_INT 5
67496: PUSH
67497: FOR_TO
67498: IFFALSE 67655
// begin _x := ShiftX ( x , d , r + i ) ;
67500: LD_ADDR_VAR 0 5
67504: PUSH
67505: LD_VAR 0 4
67509: PPUSH
67510: LD_VAR 0 8
67514: PPUSH
67515: LD_VAR 0 9
67519: PUSH
67520: LD_VAR 0 10
67524: PLUS
67525: PPUSH
67526: CALL_OW 272
67530: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67531: LD_ADDR_VAR 0 7
67535: PUSH
67536: LD_VAR 0 6
67540: PPUSH
67541: LD_VAR 0 8
67545: PPUSH
67546: LD_VAR 0 9
67550: PUSH
67551: LD_VAR 0 10
67555: PLUS
67556: PPUSH
67557: CALL_OW 273
67561: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67562: LD_VAR 0 5
67566: PPUSH
67567: LD_VAR 0 7
67571: PPUSH
67572: CALL_OW 488
67576: PUSH
67577: LD_VAR 0 5
67581: PPUSH
67582: LD_VAR 0 7
67586: PPUSH
67587: CALL_OW 428
67591: PPUSH
67592: CALL_OW 247
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: LD_INT 2
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: IN
67607: NOT
67608: AND
67609: IFFALSE 67653
// begin ComMoveXY ( unit , _x , _y ) ;
67611: LD_VAR 0 1
67615: PPUSH
67616: LD_VAR 0 5
67620: PPUSH
67621: LD_VAR 0 7
67625: PPUSH
67626: CALL_OW 111
// result := [ _x , _y ] ;
67630: LD_ADDR_VAR 0 3
67634: PUSH
67635: LD_VAR 0 5
67639: PUSH
67640: LD_VAR 0 7
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: ST_TO_ADDR
// exit ;
67649: POP
67650: POP
67651: GO 67657
// end ; end ;
67653: GO 67497
67655: POP
67656: POP
// end ;
67657: LD_VAR 0 3
67661: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67662: LD_INT 0
67664: PPUSH
67665: PPUSH
67666: PPUSH
// result := 0 ;
67667: LD_ADDR_VAR 0 3
67671: PUSH
67672: LD_INT 0
67674: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67675: LD_VAR 0 1
67679: PUSH
67680: LD_INT 0
67682: LESS
67683: PUSH
67684: LD_VAR 0 1
67688: PUSH
67689: LD_INT 8
67691: GREATER
67692: OR
67693: PUSH
67694: LD_VAR 0 2
67698: PUSH
67699: LD_INT 0
67701: LESS
67702: OR
67703: PUSH
67704: LD_VAR 0 2
67708: PUSH
67709: LD_INT 8
67711: GREATER
67712: OR
67713: IFFALSE 67717
// exit ;
67715: GO 67792
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67717: LD_ADDR_VAR 0 4
67721: PUSH
67722: LD_INT 22
67724: PUSH
67725: LD_VAR 0 2
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PPUSH
67734: CALL_OW 69
67738: PUSH
67739: FOR_IN
67740: IFFALSE 67790
// begin un := UnitShoot ( i ) ;
67742: LD_ADDR_VAR 0 5
67746: PUSH
67747: LD_VAR 0 4
67751: PPUSH
67752: CALL_OW 504
67756: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67757: LD_VAR 0 5
67761: PPUSH
67762: CALL_OW 255
67766: PUSH
67767: LD_VAR 0 1
67771: EQUAL
67772: IFFALSE 67788
// begin result := un ;
67774: LD_ADDR_VAR 0 3
67778: PUSH
67779: LD_VAR 0 5
67783: ST_TO_ADDR
// exit ;
67784: POP
67785: POP
67786: GO 67792
// end ; end ;
67788: GO 67739
67790: POP
67791: POP
// end ;
67792: LD_VAR 0 3
67796: RET
// export function GetCargoBay ( units ) ; begin
67797: LD_INT 0
67799: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67800: LD_ADDR_VAR 0 2
67804: PUSH
67805: LD_VAR 0 1
67809: PPUSH
67810: LD_INT 2
67812: PUSH
67813: LD_INT 34
67815: PUSH
67816: LD_INT 12
67818: PUSH
67819: EMPTY
67820: LIST
67821: LIST
67822: PUSH
67823: LD_INT 34
67825: PUSH
67826: LD_INT 51
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: PUSH
67833: LD_INT 34
67835: PUSH
67836: LD_INT 32
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 34
67845: PUSH
67846: LD_INT 89
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: EMPTY
67854: LIST
67855: LIST
67856: LIST
67857: LIST
67858: LIST
67859: PPUSH
67860: CALL_OW 72
67864: ST_TO_ADDR
// end ;
67865: LD_VAR 0 2
67869: RET
// export function Negate ( value ) ; begin
67870: LD_INT 0
67872: PPUSH
// result := not value ;
67873: LD_ADDR_VAR 0 2
67877: PUSH
67878: LD_VAR 0 1
67882: NOT
67883: ST_TO_ADDR
// end ;
67884: LD_VAR 0 2
67888: RET
// export function Inc ( value ) ; begin
67889: LD_INT 0
67891: PPUSH
// result := value + 1 ;
67892: LD_ADDR_VAR 0 2
67896: PUSH
67897: LD_VAR 0 1
67901: PUSH
67902: LD_INT 1
67904: PLUS
67905: ST_TO_ADDR
// end ;
67906: LD_VAR 0 2
67910: RET
// export function Dec ( value ) ; begin
67911: LD_INT 0
67913: PPUSH
// result := value - 1 ;
67914: LD_ADDR_VAR 0 2
67918: PUSH
67919: LD_VAR 0 1
67923: PUSH
67924: LD_INT 1
67926: MINUS
67927: ST_TO_ADDR
// end ;
67928: LD_VAR 0 2
67932: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
67933: LD_INT 0
67935: PPUSH
67936: PPUSH
67937: PPUSH
67938: PPUSH
67939: PPUSH
67940: PPUSH
67941: PPUSH
67942: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
67943: LD_VAR 0 1
67947: PPUSH
67948: LD_VAR 0 2
67952: PPUSH
67953: CALL_OW 488
67957: NOT
67958: PUSH
67959: LD_VAR 0 3
67963: PPUSH
67964: LD_VAR 0 4
67968: PPUSH
67969: CALL_OW 488
67973: NOT
67974: OR
67975: IFFALSE 67988
// begin result := - 1 ;
67977: LD_ADDR_VAR 0 5
67981: PUSH
67982: LD_INT 1
67984: NEG
67985: ST_TO_ADDR
// exit ;
67986: GO 68223
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
67988: LD_ADDR_VAR 0 12
67992: PUSH
67993: LD_VAR 0 1
67997: PPUSH
67998: LD_VAR 0 2
68002: PPUSH
68003: LD_VAR 0 3
68007: PPUSH
68008: LD_VAR 0 4
68012: PPUSH
68013: CALL 67073 0 4
68017: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
68018: LD_ADDR_VAR 0 11
68022: PUSH
68023: LD_VAR 0 1
68027: PPUSH
68028: LD_VAR 0 2
68032: PPUSH
68033: LD_VAR 0 12
68037: PUSH
68038: LD_INT 1
68040: ARRAY
68041: PPUSH
68042: LD_VAR 0 12
68046: PUSH
68047: LD_INT 2
68049: ARRAY
68050: PPUSH
68051: CALL_OW 298
68055: ST_TO_ADDR
// distance := 9999 ;
68056: LD_ADDR_VAR 0 10
68060: PUSH
68061: LD_INT 9999
68063: ST_TO_ADDR
// for i := 0 to 5 do
68064: LD_ADDR_VAR 0 6
68068: PUSH
68069: DOUBLE
68070: LD_INT 0
68072: DEC
68073: ST_TO_ADDR
68074: LD_INT 5
68076: PUSH
68077: FOR_TO
68078: IFFALSE 68221
// begin _x := ShiftX ( x1 , i , centerDist ) ;
68080: LD_ADDR_VAR 0 7
68084: PUSH
68085: LD_VAR 0 1
68089: PPUSH
68090: LD_VAR 0 6
68094: PPUSH
68095: LD_VAR 0 11
68099: PPUSH
68100: CALL_OW 272
68104: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
68105: LD_ADDR_VAR 0 8
68109: PUSH
68110: LD_VAR 0 2
68114: PPUSH
68115: LD_VAR 0 6
68119: PPUSH
68120: LD_VAR 0 11
68124: PPUSH
68125: CALL_OW 273
68129: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
68130: LD_VAR 0 7
68134: PPUSH
68135: LD_VAR 0 8
68139: PPUSH
68140: CALL_OW 488
68144: NOT
68145: IFFALSE 68149
// continue ;
68147: GO 68077
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
68149: LD_ADDR_VAR 0 9
68153: PUSH
68154: LD_VAR 0 12
68158: PUSH
68159: LD_INT 1
68161: ARRAY
68162: PPUSH
68163: LD_VAR 0 12
68167: PUSH
68168: LD_INT 2
68170: ARRAY
68171: PPUSH
68172: LD_VAR 0 7
68176: PPUSH
68177: LD_VAR 0 8
68181: PPUSH
68182: CALL_OW 298
68186: ST_TO_ADDR
// if tmp < distance then
68187: LD_VAR 0 9
68191: PUSH
68192: LD_VAR 0 10
68196: LESS
68197: IFFALSE 68219
// begin result := i ;
68199: LD_ADDR_VAR 0 5
68203: PUSH
68204: LD_VAR 0 6
68208: ST_TO_ADDR
// distance := tmp ;
68209: LD_ADDR_VAR 0 10
68213: PUSH
68214: LD_VAR 0 9
68218: ST_TO_ADDR
// end ; end ;
68219: GO 68077
68221: POP
68222: POP
// end ;
68223: LD_VAR 0 5
68227: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68228: LD_INT 0
68230: PPUSH
68231: PPUSH
// if not driver or not IsInUnit ( driver ) then
68232: LD_VAR 0 1
68236: NOT
68237: PUSH
68238: LD_VAR 0 1
68242: PPUSH
68243: CALL_OW 310
68247: NOT
68248: OR
68249: IFFALSE 68253
// exit ;
68251: GO 68343
// vehicle := IsInUnit ( driver ) ;
68253: LD_ADDR_VAR 0 3
68257: PUSH
68258: LD_VAR 0 1
68262: PPUSH
68263: CALL_OW 310
68267: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68268: LD_VAR 0 1
68272: PPUSH
68273: LD_STRING \
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: LD_INT 0
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 0
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: LIST
68298: LIST
68299: LIST
68300: LIST
68301: LIST
68302: PUSH
68303: LD_STRING E
68305: PUSH
68306: LD_INT 0
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: LD_VAR 0 3
68316: PUSH
68317: LD_INT 0
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 0
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PPUSH
68339: CALL_OW 446
// end ;
68343: LD_VAR 0 2
68347: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68348: LD_INT 0
68350: PPUSH
68351: PPUSH
// if not driver or not IsInUnit ( driver ) then
68352: LD_VAR 0 1
68356: NOT
68357: PUSH
68358: LD_VAR 0 1
68362: PPUSH
68363: CALL_OW 310
68367: NOT
68368: OR
68369: IFFALSE 68373
// exit ;
68371: GO 68463
// vehicle := IsInUnit ( driver ) ;
68373: LD_ADDR_VAR 0 3
68377: PUSH
68378: LD_VAR 0 1
68382: PPUSH
68383: CALL_OW 310
68387: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68388: LD_VAR 0 1
68392: PPUSH
68393: LD_STRING \
68395: PUSH
68396: LD_INT 0
68398: PUSH
68399: LD_INT 0
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 0
68407: PUSH
68408: LD_INT 0
68410: PUSH
68411: LD_INT 0
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: PUSH
68423: LD_STRING E
68425: PUSH
68426: LD_INT 0
68428: PUSH
68429: LD_INT 0
68431: PUSH
68432: LD_VAR 0 3
68436: PUSH
68437: LD_INT 0
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 0
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: PUSH
68455: EMPTY
68456: LIST
68457: LIST
68458: PPUSH
68459: CALL_OW 447
// end ;
68463: LD_VAR 0 2
68467: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68468: LD_INT 0
68470: PPUSH
68471: PPUSH
68472: PPUSH
// tmp := [ ] ;
68473: LD_ADDR_VAR 0 5
68477: PUSH
68478: EMPTY
68479: ST_TO_ADDR
// for i in units do
68480: LD_ADDR_VAR 0 4
68484: PUSH
68485: LD_VAR 0 1
68489: PUSH
68490: FOR_IN
68491: IFFALSE 68529
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68493: LD_ADDR_VAR 0 5
68497: PUSH
68498: LD_VAR 0 5
68502: PPUSH
68503: LD_VAR 0 5
68507: PUSH
68508: LD_INT 1
68510: PLUS
68511: PPUSH
68512: LD_VAR 0 4
68516: PPUSH
68517: CALL_OW 256
68521: PPUSH
68522: CALL_OW 2
68526: ST_TO_ADDR
68527: GO 68490
68529: POP
68530: POP
// if not tmp then
68531: LD_VAR 0 5
68535: NOT
68536: IFFALSE 68540
// exit ;
68538: GO 68588
// if asc then
68540: LD_VAR 0 2
68544: IFFALSE 68568
// result := SortListByListAsc ( units , tmp ) else
68546: LD_ADDR_VAR 0 3
68550: PUSH
68551: LD_VAR 0 1
68555: PPUSH
68556: LD_VAR 0 5
68560: PPUSH
68561: CALL_OW 76
68565: ST_TO_ADDR
68566: GO 68588
// result := SortListByListDesc ( units , tmp ) ;
68568: LD_ADDR_VAR 0 3
68572: PUSH
68573: LD_VAR 0 1
68577: PPUSH
68578: LD_VAR 0 5
68582: PPUSH
68583: CALL_OW 77
68587: ST_TO_ADDR
// end ;
68588: LD_VAR 0 3
68592: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68593: LD_INT 0
68595: PPUSH
68596: PPUSH
// task := GetTaskList ( mech ) ;
68597: LD_ADDR_VAR 0 4
68601: PUSH
68602: LD_VAR 0 1
68606: PPUSH
68607: CALL_OW 437
68611: ST_TO_ADDR
// if not task then
68612: LD_VAR 0 4
68616: NOT
68617: IFFALSE 68621
// exit ;
68619: GO 68663
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68621: LD_ADDR_VAR 0 3
68625: PUSH
68626: LD_VAR 0 4
68630: PUSH
68631: LD_INT 1
68633: ARRAY
68634: PUSH
68635: LD_INT 1
68637: ARRAY
68638: PUSH
68639: LD_STRING r
68641: EQUAL
68642: PUSH
68643: LD_VAR 0 4
68647: PUSH
68648: LD_INT 1
68650: ARRAY
68651: PUSH
68652: LD_INT 4
68654: ARRAY
68655: PUSH
68656: LD_VAR 0 2
68660: EQUAL
68661: AND
68662: ST_TO_ADDR
// end ;
68663: LD_VAR 0 3
68667: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68668: LD_INT 0
68670: PPUSH
// SetDir ( unit , d ) ;
68671: LD_VAR 0 1
68675: PPUSH
68676: LD_VAR 0 4
68680: PPUSH
68681: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
68685: LD_ADDR_VAR 0 6
68689: PUSH
68690: LD_VAR 0 1
68694: PPUSH
68695: LD_VAR 0 2
68699: PPUSH
68700: LD_VAR 0 3
68704: PPUSH
68705: LD_VAR 0 5
68709: PPUSH
68710: CALL_OW 48
68714: ST_TO_ADDR
// end ;
68715: LD_VAR 0 6
68719: RET
// export function ToNaturalNumber ( number ) ; begin
68720: LD_INT 0
68722: PPUSH
// result := number div 1 ;
68723: LD_ADDR_VAR 0 2
68727: PUSH
68728: LD_VAR 0 1
68732: PUSH
68733: LD_INT 1
68735: DIV
68736: ST_TO_ADDR
// if number < 0 then
68737: LD_VAR 0 1
68741: PUSH
68742: LD_INT 0
68744: LESS
68745: IFFALSE 68755
// result := 0 ;
68747: LD_ADDR_VAR 0 2
68751: PUSH
68752: LD_INT 0
68754: ST_TO_ADDR
// end ;
68755: LD_VAR 0 2
68759: RET
// export function SortByClass ( units , class ) ; var un ; begin
68760: LD_INT 0
68762: PPUSH
68763: PPUSH
// if not units or not class then
68764: LD_VAR 0 1
68768: NOT
68769: PUSH
68770: LD_VAR 0 2
68774: NOT
68775: OR
68776: IFFALSE 68780
// exit ;
68778: GO 68875
// result := [ ] ;
68780: LD_ADDR_VAR 0 3
68784: PUSH
68785: EMPTY
68786: ST_TO_ADDR
// for un in units do
68787: LD_ADDR_VAR 0 4
68791: PUSH
68792: LD_VAR 0 1
68796: PUSH
68797: FOR_IN
68798: IFFALSE 68873
// if GetClass ( un ) = class then
68800: LD_VAR 0 4
68804: PPUSH
68805: CALL_OW 257
68809: PUSH
68810: LD_VAR 0 2
68814: EQUAL
68815: IFFALSE 68842
// result := Insert ( result , 1 , un ) else
68817: LD_ADDR_VAR 0 3
68821: PUSH
68822: LD_VAR 0 3
68826: PPUSH
68827: LD_INT 1
68829: PPUSH
68830: LD_VAR 0 4
68834: PPUSH
68835: CALL_OW 2
68839: ST_TO_ADDR
68840: GO 68871
// result := Replace ( result , result + 1 , un ) ;
68842: LD_ADDR_VAR 0 3
68846: PUSH
68847: LD_VAR 0 3
68851: PPUSH
68852: LD_VAR 0 3
68856: PUSH
68857: LD_INT 1
68859: PLUS
68860: PPUSH
68861: LD_VAR 0 4
68865: PPUSH
68866: CALL_OW 1
68870: ST_TO_ADDR
68871: GO 68797
68873: POP
68874: POP
// end ;
68875: LD_VAR 0 3
68879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68880: LD_INT 0
68882: PPUSH
68883: PPUSH
68884: PPUSH
68885: PPUSH
68886: PPUSH
68887: PPUSH
68888: PPUSH
// result := [ ] ;
68889: LD_ADDR_VAR 0 4
68893: PUSH
68894: EMPTY
68895: ST_TO_ADDR
// if x - r < 0 then
68896: LD_VAR 0 1
68900: PUSH
68901: LD_VAR 0 3
68905: MINUS
68906: PUSH
68907: LD_INT 0
68909: LESS
68910: IFFALSE 68922
// min_x := 0 else
68912: LD_ADDR_VAR 0 8
68916: PUSH
68917: LD_INT 0
68919: ST_TO_ADDR
68920: GO 68938
// min_x := x - r ;
68922: LD_ADDR_VAR 0 8
68926: PUSH
68927: LD_VAR 0 1
68931: PUSH
68932: LD_VAR 0 3
68936: MINUS
68937: ST_TO_ADDR
// if y - r < 0 then
68938: LD_VAR 0 2
68942: PUSH
68943: LD_VAR 0 3
68947: MINUS
68948: PUSH
68949: LD_INT 0
68951: LESS
68952: IFFALSE 68964
// min_y := 0 else
68954: LD_ADDR_VAR 0 7
68958: PUSH
68959: LD_INT 0
68961: ST_TO_ADDR
68962: GO 68980
// min_y := y - r ;
68964: LD_ADDR_VAR 0 7
68968: PUSH
68969: LD_VAR 0 2
68973: PUSH
68974: LD_VAR 0 3
68978: MINUS
68979: ST_TO_ADDR
// max_x := x + r ;
68980: LD_ADDR_VAR 0 9
68984: PUSH
68985: LD_VAR 0 1
68989: PUSH
68990: LD_VAR 0 3
68994: PLUS
68995: ST_TO_ADDR
// max_y := y + r ;
68996: LD_ADDR_VAR 0 10
69000: PUSH
69001: LD_VAR 0 2
69005: PUSH
69006: LD_VAR 0 3
69010: PLUS
69011: ST_TO_ADDR
// for _x = min_x to max_x do
69012: LD_ADDR_VAR 0 5
69016: PUSH
69017: DOUBLE
69018: LD_VAR 0 8
69022: DEC
69023: ST_TO_ADDR
69024: LD_VAR 0 9
69028: PUSH
69029: FOR_TO
69030: IFFALSE 69131
// for _y = min_y to max_y do
69032: LD_ADDR_VAR 0 6
69036: PUSH
69037: DOUBLE
69038: LD_VAR 0 7
69042: DEC
69043: ST_TO_ADDR
69044: LD_VAR 0 10
69048: PUSH
69049: FOR_TO
69050: IFFALSE 69127
// begin if not ValidHex ( _x , _y ) then
69052: LD_VAR 0 5
69056: PPUSH
69057: LD_VAR 0 6
69061: PPUSH
69062: CALL_OW 488
69066: NOT
69067: IFFALSE 69071
// continue ;
69069: GO 69049
// if GetResourceTypeXY ( _x , _y ) then
69071: LD_VAR 0 5
69075: PPUSH
69076: LD_VAR 0 6
69080: PPUSH
69081: CALL_OW 283
69085: IFFALSE 69125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69087: LD_ADDR_VAR 0 4
69091: PUSH
69092: LD_VAR 0 4
69096: PPUSH
69097: LD_VAR 0 4
69101: PUSH
69102: LD_INT 1
69104: PLUS
69105: PPUSH
69106: LD_VAR 0 5
69110: PUSH
69111: LD_VAR 0 6
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: PPUSH
69120: CALL_OW 1
69124: ST_TO_ADDR
// end ;
69125: GO 69049
69127: POP
69128: POP
69129: GO 69029
69131: POP
69132: POP
// end ;
69133: LD_VAR 0 4
69137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
69138: LD_INT 0
69140: PPUSH
69141: PPUSH
69142: PPUSH
69143: PPUSH
69144: PPUSH
69145: PPUSH
69146: PPUSH
69147: PPUSH
// if not units then
69148: LD_VAR 0 1
69152: NOT
69153: IFFALSE 69157
// exit ;
69155: GO 69685
// result := UnitFilter ( units , [ f_ok ] ) ;
69157: LD_ADDR_VAR 0 3
69161: PUSH
69162: LD_VAR 0 1
69166: PPUSH
69167: LD_INT 50
69169: PUSH
69170: EMPTY
69171: LIST
69172: PPUSH
69173: CALL_OW 72
69177: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69178: LD_ADDR_VAR 0 8
69182: PUSH
69183: LD_VAR 0 1
69187: PUSH
69188: LD_INT 1
69190: ARRAY
69191: PPUSH
69192: CALL_OW 255
69196: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
69197: LD_ADDR_VAR 0 10
69201: PUSH
69202: LD_INT 29
69204: PUSH
69205: LD_INT 91
69207: PUSH
69208: LD_INT 49
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: LIST
69215: ST_TO_ADDR
// if not result then
69216: LD_VAR 0 3
69220: NOT
69221: IFFALSE 69225
// exit ;
69223: GO 69685
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69225: LD_ADDR_VAR 0 5
69229: PUSH
69230: LD_INT 81
69232: PUSH
69233: LD_VAR 0 8
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PPUSH
69242: CALL_OW 69
69246: ST_TO_ADDR
// for i in result do
69247: LD_ADDR_VAR 0 4
69251: PUSH
69252: LD_VAR 0 3
69256: PUSH
69257: FOR_IN
69258: IFFALSE 69683
// begin tag := GetTag ( i ) + 1 ;
69260: LD_ADDR_VAR 0 9
69264: PUSH
69265: LD_VAR 0 4
69269: PPUSH
69270: CALL_OW 110
69274: PUSH
69275: LD_INT 1
69277: PLUS
69278: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
69279: LD_ADDR_VAR 0 7
69283: PUSH
69284: LD_VAR 0 4
69288: PPUSH
69289: CALL_OW 250
69293: PPUSH
69294: LD_VAR 0 4
69298: PPUSH
69299: CALL_OW 251
69303: PPUSH
69304: LD_INT 4
69306: PPUSH
69307: CALL 68880 0 3
69311: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
69312: LD_VAR 0 4
69316: PPUSH
69317: CALL_OW 247
69321: PUSH
69322: LD_INT 2
69324: EQUAL
69325: PUSH
69326: LD_VAR 0 7
69330: PUSH
69331: LD_INT 2
69333: GREATER
69334: AND
69335: PUSH
69336: LD_VAR 0 4
69340: PPUSH
69341: CALL_OW 264
69345: PUSH
69346: LD_VAR 0 10
69350: IN
69351: NOT
69352: AND
69353: IFFALSE 69392
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69355: LD_VAR 0 4
69359: PPUSH
69360: LD_VAR 0 7
69364: PUSH
69365: LD_INT 1
69367: ARRAY
69368: PUSH
69369: LD_INT 1
69371: ARRAY
69372: PPUSH
69373: LD_VAR 0 7
69377: PUSH
69378: LD_INT 1
69380: ARRAY
69381: PUSH
69382: LD_INT 2
69384: ARRAY
69385: PPUSH
69386: CALL_OW 116
69390: GO 69681
// if path > tag then
69392: LD_VAR 0 2
69396: PUSH
69397: LD_VAR 0 9
69401: GREATER
69402: IFFALSE 69610
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
69404: LD_ADDR_VAR 0 6
69408: PUSH
69409: LD_VAR 0 5
69413: PPUSH
69414: LD_INT 91
69416: PUSH
69417: LD_VAR 0 4
69421: PUSH
69422: LD_INT 8
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: LIST
69429: PPUSH
69430: CALL_OW 72
69434: ST_TO_ADDR
// if nearEnemy then
69435: LD_VAR 0 6
69439: IFFALSE 69508
// begin if GetWeapon ( i ) = ru_time_lapser then
69441: LD_VAR 0 4
69445: PPUSH
69446: CALL_OW 264
69450: PUSH
69451: LD_INT 49
69453: EQUAL
69454: IFFALSE 69482
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
69456: LD_VAR 0 4
69460: PPUSH
69461: LD_VAR 0 6
69465: PPUSH
69466: LD_VAR 0 4
69470: PPUSH
69471: CALL_OW 74
69475: PPUSH
69476: CALL_OW 112
69480: GO 69506
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
69482: LD_VAR 0 4
69486: PPUSH
69487: LD_VAR 0 6
69491: PPUSH
69492: LD_VAR 0 4
69496: PPUSH
69497: CALL_OW 74
69501: PPUSH
69502: CALL 70756 0 2
// end else
69506: GO 69608
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69508: LD_VAR 0 4
69512: PPUSH
69513: LD_VAR 0 2
69517: PUSH
69518: LD_VAR 0 9
69522: ARRAY
69523: PUSH
69524: LD_INT 1
69526: ARRAY
69527: PPUSH
69528: LD_VAR 0 2
69532: PUSH
69533: LD_VAR 0 9
69537: ARRAY
69538: PUSH
69539: LD_INT 2
69541: ARRAY
69542: PPUSH
69543: CALL_OW 297
69547: PUSH
69548: LD_INT 6
69550: GREATER
69551: IFFALSE 69594
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69553: LD_VAR 0 4
69557: PPUSH
69558: LD_VAR 0 2
69562: PUSH
69563: LD_VAR 0 9
69567: ARRAY
69568: PUSH
69569: LD_INT 1
69571: ARRAY
69572: PPUSH
69573: LD_VAR 0 2
69577: PUSH
69578: LD_VAR 0 9
69582: ARRAY
69583: PUSH
69584: LD_INT 2
69586: ARRAY
69587: PPUSH
69588: CALL_OW 114
69592: GO 69608
// SetTag ( i , tag ) ;
69594: LD_VAR 0 4
69598: PPUSH
69599: LD_VAR 0 9
69603: PPUSH
69604: CALL_OW 109
// end else
69608: GO 69681
// if enemy then
69610: LD_VAR 0 5
69614: IFFALSE 69681
// begin if GetWeapon ( i ) = ru_time_lapser then
69616: LD_VAR 0 4
69620: PPUSH
69621: CALL_OW 264
69625: PUSH
69626: LD_INT 49
69628: EQUAL
69629: IFFALSE 69657
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69631: LD_VAR 0 4
69635: PPUSH
69636: LD_VAR 0 5
69640: PPUSH
69641: LD_VAR 0 4
69645: PPUSH
69646: CALL_OW 74
69650: PPUSH
69651: CALL_OW 112
69655: GO 69681
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69657: LD_VAR 0 4
69661: PPUSH
69662: LD_VAR 0 5
69666: PPUSH
69667: LD_VAR 0 4
69671: PPUSH
69672: CALL_OW 74
69676: PPUSH
69677: CALL 70756 0 2
// end ; end ;
69681: GO 69257
69683: POP
69684: POP
// end ;
69685: LD_VAR 0 3
69689: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
69690: LD_INT 0
69692: PPUSH
69693: PPUSH
69694: PPUSH
// if not unit or IsInUnit ( unit ) then
69695: LD_VAR 0 1
69699: NOT
69700: PUSH
69701: LD_VAR 0 1
69705: PPUSH
69706: CALL_OW 310
69710: OR
69711: IFFALSE 69715
// exit ;
69713: GO 69806
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
69715: LD_ADDR_VAR 0 4
69719: PUSH
69720: LD_VAR 0 1
69724: PPUSH
69725: CALL_OW 250
69729: PPUSH
69730: LD_VAR 0 2
69734: PPUSH
69735: LD_INT 1
69737: PPUSH
69738: CALL_OW 272
69742: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
69743: LD_ADDR_VAR 0 5
69747: PUSH
69748: LD_VAR 0 1
69752: PPUSH
69753: CALL_OW 251
69757: PPUSH
69758: LD_VAR 0 2
69762: PPUSH
69763: LD_INT 1
69765: PPUSH
69766: CALL_OW 273
69770: ST_TO_ADDR
// if ValidHex ( x , y ) then
69771: LD_VAR 0 4
69775: PPUSH
69776: LD_VAR 0 5
69780: PPUSH
69781: CALL_OW 488
69785: IFFALSE 69806
// ComTurnXY ( unit , x , y ) ;
69787: LD_VAR 0 1
69791: PPUSH
69792: LD_VAR 0 4
69796: PPUSH
69797: LD_VAR 0 5
69801: PPUSH
69802: CALL_OW 118
// end ;
69806: LD_VAR 0 3
69810: RET
// export function SeeUnits ( side , units ) ; var i ; begin
69811: LD_INT 0
69813: PPUSH
69814: PPUSH
// result := false ;
69815: LD_ADDR_VAR 0 3
69819: PUSH
69820: LD_INT 0
69822: ST_TO_ADDR
// if not units then
69823: LD_VAR 0 2
69827: NOT
69828: IFFALSE 69832
// exit ;
69830: GO 69877
// for i in units do
69832: LD_ADDR_VAR 0 4
69836: PUSH
69837: LD_VAR 0 2
69841: PUSH
69842: FOR_IN
69843: IFFALSE 69875
// if See ( side , i ) then
69845: LD_VAR 0 1
69849: PPUSH
69850: LD_VAR 0 4
69854: PPUSH
69855: CALL_OW 292
69859: IFFALSE 69873
// begin result := true ;
69861: LD_ADDR_VAR 0 3
69865: PUSH
69866: LD_INT 1
69868: ST_TO_ADDR
// exit ;
69869: POP
69870: POP
69871: GO 69877
// end ;
69873: GO 69842
69875: POP
69876: POP
// end ;
69877: LD_VAR 0 3
69881: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
69882: LD_INT 0
69884: PPUSH
69885: PPUSH
69886: PPUSH
69887: PPUSH
// if not unit or not points then
69888: LD_VAR 0 1
69892: NOT
69893: PUSH
69894: LD_VAR 0 2
69898: NOT
69899: OR
69900: IFFALSE 69904
// exit ;
69902: GO 69994
// dist := 99999 ;
69904: LD_ADDR_VAR 0 5
69908: PUSH
69909: LD_INT 99999
69911: ST_TO_ADDR
// for i in points do
69912: LD_ADDR_VAR 0 4
69916: PUSH
69917: LD_VAR 0 2
69921: PUSH
69922: FOR_IN
69923: IFFALSE 69992
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
69925: LD_ADDR_VAR 0 6
69929: PUSH
69930: LD_VAR 0 1
69934: PPUSH
69935: LD_VAR 0 4
69939: PUSH
69940: LD_INT 1
69942: ARRAY
69943: PPUSH
69944: LD_VAR 0 4
69948: PUSH
69949: LD_INT 2
69951: ARRAY
69952: PPUSH
69953: CALL_OW 297
69957: ST_TO_ADDR
// if tmpDist < dist then
69958: LD_VAR 0 6
69962: PUSH
69963: LD_VAR 0 5
69967: LESS
69968: IFFALSE 69990
// begin result := i ;
69970: LD_ADDR_VAR 0 3
69974: PUSH
69975: LD_VAR 0 4
69979: ST_TO_ADDR
// dist := tmpDist ;
69980: LD_ADDR_VAR 0 5
69984: PUSH
69985: LD_VAR 0 6
69989: ST_TO_ADDR
// end ; end ;
69990: GO 69922
69992: POP
69993: POP
// end ;
69994: LD_VAR 0 3
69998: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
69999: LD_INT 0
70001: PPUSH
// uc_side := side ;
70002: LD_ADDR_OWVAR 20
70006: PUSH
70007: LD_VAR 0 1
70011: ST_TO_ADDR
// uc_nation := 3 ;
70012: LD_ADDR_OWVAR 21
70016: PUSH
70017: LD_INT 3
70019: ST_TO_ADDR
// vc_chassis := 25 ;
70020: LD_ADDR_OWVAR 37
70024: PUSH
70025: LD_INT 25
70027: ST_TO_ADDR
// vc_engine := engine_siberite ;
70028: LD_ADDR_OWVAR 39
70032: PUSH
70033: LD_INT 3
70035: ST_TO_ADDR
// vc_control := control_computer ;
70036: LD_ADDR_OWVAR 38
70040: PUSH
70041: LD_INT 3
70043: ST_TO_ADDR
// vc_weapon := 59 ;
70044: LD_ADDR_OWVAR 40
70048: PUSH
70049: LD_INT 59
70051: ST_TO_ADDR
// result := CreateVehicle ;
70052: LD_ADDR_VAR 0 5
70056: PUSH
70057: CALL_OW 45
70061: ST_TO_ADDR
// SetDir ( result , d ) ;
70062: LD_VAR 0 5
70066: PPUSH
70067: LD_VAR 0 4
70071: PPUSH
70072: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
70076: LD_VAR 0 5
70080: PPUSH
70081: LD_VAR 0 2
70085: PPUSH
70086: LD_VAR 0 3
70090: PPUSH
70091: LD_INT 0
70093: PPUSH
70094: CALL_OW 48
// end ;
70098: LD_VAR 0 5
70102: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
70103: LD_INT 0
70105: PPUSH
70106: PPUSH
70107: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
70108: LD_ADDR_VAR 0 2
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 0
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
70131: LD_VAR 0 1
70135: NOT
70136: PUSH
70137: LD_VAR 0 1
70141: PPUSH
70142: CALL_OW 264
70146: PUSH
70147: LD_INT 12
70149: PUSH
70150: LD_INT 51
70152: PUSH
70153: LD_INT 32
70155: PUSH
70156: LD_INT 89
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: LIST
70164: IN
70165: NOT
70166: OR
70167: IFFALSE 70171
// exit ;
70169: GO 70269
// for i := 1 to 3 do
70171: LD_ADDR_VAR 0 3
70175: PUSH
70176: DOUBLE
70177: LD_INT 1
70179: DEC
70180: ST_TO_ADDR
70181: LD_INT 3
70183: PUSH
70184: FOR_TO
70185: IFFALSE 70267
// begin tmp := GetCargo ( cargo , i ) ;
70187: LD_ADDR_VAR 0 4
70191: PUSH
70192: LD_VAR 0 1
70196: PPUSH
70197: LD_VAR 0 3
70201: PPUSH
70202: CALL_OW 289
70206: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
70207: LD_ADDR_VAR 0 2
70211: PUSH
70212: LD_VAR 0 2
70216: PPUSH
70217: LD_VAR 0 3
70221: PPUSH
70222: LD_VAR 0 4
70226: PPUSH
70227: CALL_OW 1
70231: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
70232: LD_ADDR_VAR 0 2
70236: PUSH
70237: LD_VAR 0 2
70241: PPUSH
70242: LD_INT 4
70244: PPUSH
70245: LD_VAR 0 2
70249: PUSH
70250: LD_INT 4
70252: ARRAY
70253: PUSH
70254: LD_VAR 0 4
70258: PLUS
70259: PPUSH
70260: CALL_OW 1
70264: ST_TO_ADDR
// end ;
70265: GO 70184
70267: POP
70268: POP
// end ;
70269: LD_VAR 0 2
70273: RET
// export function Length ( array ) ; begin
70274: LD_INT 0
70276: PPUSH
// result := array + 0 ;
70277: LD_ADDR_VAR 0 2
70281: PUSH
70282: LD_VAR 0 1
70286: PUSH
70287: LD_INT 0
70289: PLUS
70290: ST_TO_ADDR
// end ;
70291: LD_VAR 0 2
70295: RET
// export function PrepareArray ( array ) ; begin
70296: LD_INT 0
70298: PPUSH
// result := array diff 0 ;
70299: LD_ADDR_VAR 0 2
70303: PUSH
70304: LD_VAR 0 1
70308: PUSH
70309: LD_INT 0
70311: DIFF
70312: ST_TO_ADDR
// if not result [ 1 ] then
70313: LD_VAR 0 2
70317: PUSH
70318: LD_INT 1
70320: ARRAY
70321: NOT
70322: IFFALSE 70342
// result := Delete ( result , 1 ) ;
70324: LD_ADDR_VAR 0 2
70328: PUSH
70329: LD_VAR 0 2
70333: PPUSH
70334: LD_INT 1
70336: PPUSH
70337: CALL_OW 3
70341: ST_TO_ADDR
// end ;
70342: LD_VAR 0 2
70346: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
70347: LD_INT 0
70349: PPUSH
70350: PPUSH
70351: PPUSH
70352: PPUSH
// sibRocketRange := 25 ;
70353: LD_ADDR_VAR 0 6
70357: PUSH
70358: LD_INT 25
70360: ST_TO_ADDR
// result := false ;
70361: LD_ADDR_VAR 0 4
70365: PUSH
70366: LD_INT 0
70368: ST_TO_ADDR
// for i := 0 to 5 do
70369: LD_ADDR_VAR 0 5
70373: PUSH
70374: DOUBLE
70375: LD_INT 0
70377: DEC
70378: ST_TO_ADDR
70379: LD_INT 5
70381: PUSH
70382: FOR_TO
70383: IFFALSE 70450
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
70385: LD_VAR 0 1
70389: PPUSH
70390: LD_VAR 0 5
70394: PPUSH
70395: LD_VAR 0 6
70399: PPUSH
70400: CALL_OW 272
70404: PPUSH
70405: LD_VAR 0 2
70409: PPUSH
70410: LD_VAR 0 5
70414: PPUSH
70415: LD_VAR 0 6
70419: PPUSH
70420: CALL_OW 273
70424: PPUSH
70425: LD_VAR 0 3
70429: PPUSH
70430: CALL_OW 309
70434: IFFALSE 70448
// begin result := true ;
70436: LD_ADDR_VAR 0 4
70440: PUSH
70441: LD_INT 1
70443: ST_TO_ADDR
// exit ;
70444: POP
70445: POP
70446: GO 70452
// end ;
70448: GO 70382
70450: POP
70451: POP
// end ;
70452: LD_VAR 0 4
70456: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
70457: LD_INT 0
70459: PPUSH
70460: PPUSH
70461: PPUSH
// if btype = b_depot then
70462: LD_VAR 0 2
70466: PUSH
70467: LD_INT 0
70469: EQUAL
70470: IFFALSE 70482
// begin result := true ;
70472: LD_ADDR_VAR 0 3
70476: PUSH
70477: LD_INT 1
70479: ST_TO_ADDR
// exit ;
70480: GO 70598
// end ; pom := GetBase ( depot ) ;
70482: LD_ADDR_VAR 0 4
70486: PUSH
70487: LD_VAR 0 1
70491: PPUSH
70492: CALL_OW 274
70496: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70497: LD_ADDR_VAR 0 5
70501: PUSH
70502: LD_VAR 0 2
70506: PPUSH
70507: LD_VAR 0 1
70511: PPUSH
70512: CALL_OW 248
70516: PPUSH
70517: CALL_OW 450
70521: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
70522: LD_ADDR_VAR 0 3
70526: PUSH
70527: LD_VAR 0 4
70531: PPUSH
70532: LD_INT 1
70534: PPUSH
70535: CALL_OW 275
70539: PUSH
70540: LD_VAR 0 5
70544: PUSH
70545: LD_INT 1
70547: ARRAY
70548: GREATEREQUAL
70549: PUSH
70550: LD_VAR 0 4
70554: PPUSH
70555: LD_INT 2
70557: PPUSH
70558: CALL_OW 275
70562: PUSH
70563: LD_VAR 0 5
70567: PUSH
70568: LD_INT 2
70570: ARRAY
70571: GREATEREQUAL
70572: AND
70573: PUSH
70574: LD_VAR 0 4
70578: PPUSH
70579: LD_INT 3
70581: PPUSH
70582: CALL_OW 275
70586: PUSH
70587: LD_VAR 0 5
70591: PUSH
70592: LD_INT 3
70594: ARRAY
70595: GREATEREQUAL
70596: AND
70597: ST_TO_ADDR
// end ;
70598: LD_VAR 0 3
70602: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
70603: LD_INT 0
70605: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
70606: LD_VAR 0 1
70610: PPUSH
70611: LD_VAR 0 2
70615: PPUSH
70616: LD_INT 0
70618: PPUSH
70619: LD_INT 0
70621: PPUSH
70622: LD_INT 1
70624: PPUSH
70625: LD_INT 0
70627: PPUSH
70628: CALL_OW 587
// end ;
70632: LD_VAR 0 3
70636: RET
// export function CenterOnNow ( unit ) ; begin
70637: LD_INT 0
70639: PPUSH
// result := IsInUnit ( unit ) ;
70640: LD_ADDR_VAR 0 2
70644: PUSH
70645: LD_VAR 0 1
70649: PPUSH
70650: CALL_OW 310
70654: ST_TO_ADDR
// if not result then
70655: LD_VAR 0 2
70659: NOT
70660: IFFALSE 70672
// result := unit ;
70662: LD_ADDR_VAR 0 2
70666: PUSH
70667: LD_VAR 0 1
70671: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
70672: LD_VAR 0 1
70676: PPUSH
70677: CALL_OW 87
// end ;
70681: LD_VAR 0 2
70685: RET
// export function ComMoveHex ( unit , hex ) ; begin
70686: LD_INT 0
70688: PPUSH
// if not hex then
70689: LD_VAR 0 2
70693: NOT
70694: IFFALSE 70698
// exit ;
70696: GO 70751
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
70698: LD_VAR 0 2
70702: PUSH
70703: LD_INT 1
70705: ARRAY
70706: PPUSH
70707: LD_VAR 0 2
70711: PUSH
70712: LD_INT 2
70714: ARRAY
70715: PPUSH
70716: CALL_OW 428
70720: IFFALSE 70724
// exit ;
70722: GO 70751
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
70724: LD_VAR 0 1
70728: PPUSH
70729: LD_VAR 0 2
70733: PUSH
70734: LD_INT 1
70736: ARRAY
70737: PPUSH
70738: LD_VAR 0 2
70742: PUSH
70743: LD_INT 2
70745: ARRAY
70746: PPUSH
70747: CALL_OW 111
// end ;
70751: LD_VAR 0 3
70755: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
70756: LD_INT 0
70758: PPUSH
70759: PPUSH
70760: PPUSH
// if not unit or not enemy then
70761: LD_VAR 0 1
70765: NOT
70766: PUSH
70767: LD_VAR 0 2
70771: NOT
70772: OR
70773: IFFALSE 70777
// exit ;
70775: GO 70901
// x := GetX ( enemy ) ;
70777: LD_ADDR_VAR 0 4
70781: PUSH
70782: LD_VAR 0 2
70786: PPUSH
70787: CALL_OW 250
70791: ST_TO_ADDR
// y := GetY ( enemy ) ;
70792: LD_ADDR_VAR 0 5
70796: PUSH
70797: LD_VAR 0 2
70801: PPUSH
70802: CALL_OW 251
70806: ST_TO_ADDR
// if ValidHex ( x , y ) then
70807: LD_VAR 0 4
70811: PPUSH
70812: LD_VAR 0 5
70816: PPUSH
70817: CALL_OW 488
70821: IFFALSE 70901
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
70823: LD_VAR 0 2
70827: PPUSH
70828: CALL_OW 247
70832: PUSH
70833: LD_INT 3
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: IN
70843: PUSH
70844: LD_VAR 0 1
70848: PPUSH
70849: CALL_OW 255
70853: PPUSH
70854: LD_VAR 0 2
70858: PPUSH
70859: CALL_OW 292
70863: OR
70864: IFFALSE 70882
// ComAttackUnit ( unit , enemy ) else
70866: LD_VAR 0 1
70870: PPUSH
70871: LD_VAR 0 2
70875: PPUSH
70876: CALL_OW 115
70880: GO 70901
// ComAgressiveMove ( unit , x , y ) ;
70882: LD_VAR 0 1
70886: PPUSH
70887: LD_VAR 0 4
70891: PPUSH
70892: LD_VAR 0 5
70896: PPUSH
70897: CALL_OW 114
// end ;
70901: LD_VAR 0 3
70905: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
70906: LD_INT 0
70908: PPUSH
70909: PPUSH
70910: PPUSH
// list := AreaToList ( area , 0 ) ;
70911: LD_ADDR_VAR 0 5
70915: PUSH
70916: LD_VAR 0 1
70920: PPUSH
70921: LD_INT 0
70923: PPUSH
70924: CALL_OW 517
70928: ST_TO_ADDR
// if not list then
70929: LD_VAR 0 5
70933: NOT
70934: IFFALSE 70938
// exit ;
70936: GO 71068
// if all then
70938: LD_VAR 0 2
70942: IFFALSE 71030
// begin for i := 1 to list [ 1 ] do
70944: LD_ADDR_VAR 0 4
70948: PUSH
70949: DOUBLE
70950: LD_INT 1
70952: DEC
70953: ST_TO_ADDR
70954: LD_VAR 0 5
70958: PUSH
70959: LD_INT 1
70961: ARRAY
70962: PUSH
70963: FOR_TO
70964: IFFALSE 71026
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
70966: LD_ADDR_VAR 0 3
70970: PUSH
70971: LD_VAR 0 3
70975: PPUSH
70976: LD_VAR 0 3
70980: PUSH
70981: LD_INT 1
70983: PLUS
70984: PPUSH
70985: LD_VAR 0 5
70989: PUSH
70990: LD_INT 1
70992: ARRAY
70993: PUSH
70994: LD_VAR 0 4
70998: ARRAY
70999: PUSH
71000: LD_VAR 0 5
71004: PUSH
71005: LD_INT 2
71007: ARRAY
71008: PUSH
71009: LD_VAR 0 4
71013: ARRAY
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PPUSH
71019: CALL_OW 1
71023: ST_TO_ADDR
71024: GO 70963
71026: POP
71027: POP
// exit ;
71028: GO 71068
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
71030: LD_ADDR_VAR 0 3
71034: PUSH
71035: LD_VAR 0 5
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PUSH
71044: LD_INT 1
71046: ARRAY
71047: PUSH
71048: LD_VAR 0 5
71052: PUSH
71053: LD_INT 2
71055: ARRAY
71056: PUSH
71057: LD_INT 1
71059: ARRAY
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: ST_TO_ADDR
// end ;
71068: LD_VAR 0 3
71072: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
71073: LD_INT 0
71075: PPUSH
71076: PPUSH
// list := AreaToList ( area , 0 ) ;
71077: LD_ADDR_VAR 0 4
71081: PUSH
71082: LD_VAR 0 1
71086: PPUSH
71087: LD_INT 0
71089: PPUSH
71090: CALL_OW 517
71094: ST_TO_ADDR
// if not list then
71095: LD_VAR 0 4
71099: NOT
71100: IFFALSE 71104
// exit ;
71102: GO 71145
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
71104: LD_ADDR_VAR 0 3
71108: PUSH
71109: LD_VAR 0 4
71113: PUSH
71114: LD_INT 1
71116: ARRAY
71117: PUSH
71118: LD_INT 1
71120: ARRAY
71121: PUSH
71122: LD_VAR 0 4
71126: PUSH
71127: LD_INT 2
71129: ARRAY
71130: PUSH
71131: LD_INT 1
71133: ARRAY
71134: PUSH
71135: LD_VAR 0 2
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: LIST
71144: ST_TO_ADDR
// end ;
71145: LD_VAR 0 3
71149: RET
// export function First ( array ) ; begin
71150: LD_INT 0
71152: PPUSH
// if not array then
71153: LD_VAR 0 1
71157: NOT
71158: IFFALSE 71162
// exit ;
71160: GO 71176
// result := array [ 1 ] ;
71162: LD_ADDR_VAR 0 2
71166: PUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_INT 1
71174: ARRAY
71175: ST_TO_ADDR
// end ;
71176: LD_VAR 0 2
71180: RET
// export function Last ( array ) ; begin
71181: LD_INT 0
71183: PPUSH
// if not array then
71184: LD_VAR 0 1
71188: NOT
71189: IFFALSE 71193
// exit ;
71191: GO 71209
// result := array [ array ] ;
71193: LD_ADDR_VAR 0 2
71197: PUSH
71198: LD_VAR 0 1
71202: PUSH
71203: LD_VAR 0 1
71207: ARRAY
71208: ST_TO_ADDR
// end ;
71209: LD_VAR 0 2
71213: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
71214: LD_INT 0
71216: PPUSH
71217: PPUSH
// result := [ ] ;
71218: LD_ADDR_VAR 0 5
71222: PUSH
71223: EMPTY
71224: ST_TO_ADDR
// if not array then
71225: LD_VAR 0 1
71229: NOT
71230: IFFALSE 71234
// exit ;
71232: GO 71346
// for i := 1 to array do
71234: LD_ADDR_VAR 0 6
71238: PUSH
71239: DOUBLE
71240: LD_INT 1
71242: DEC
71243: ST_TO_ADDR
71244: LD_VAR 0 1
71248: PUSH
71249: FOR_TO
71250: IFFALSE 71344
// if array [ i ] [ index ] = value then
71252: LD_VAR 0 1
71256: PUSH
71257: LD_VAR 0 6
71261: ARRAY
71262: PUSH
71263: LD_VAR 0 2
71267: ARRAY
71268: PUSH
71269: LD_VAR 0 3
71273: EQUAL
71274: IFFALSE 71342
// begin if indexColumn then
71276: LD_VAR 0 4
71280: IFFALSE 71316
// result := Join ( result , array [ i ] [ indexColumn ] ) else
71282: LD_ADDR_VAR 0 5
71286: PUSH
71287: LD_VAR 0 5
71291: PPUSH
71292: LD_VAR 0 1
71296: PUSH
71297: LD_VAR 0 6
71301: ARRAY
71302: PUSH
71303: LD_VAR 0 4
71307: ARRAY
71308: PPUSH
71309: CALL 66528 0 2
71313: ST_TO_ADDR
71314: GO 71342
// result := Join ( result , array [ i ] ) ;
71316: LD_ADDR_VAR 0 5
71320: PUSH
71321: LD_VAR 0 5
71325: PPUSH
71326: LD_VAR 0 1
71330: PUSH
71331: LD_VAR 0 6
71335: ARRAY
71336: PPUSH
71337: CALL 66528 0 2
71341: ST_TO_ADDR
// end ;
71342: GO 71249
71344: POP
71345: POP
// end ;
71346: LD_VAR 0 5
71350: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
71351: LD_INT 0
71353: PPUSH
// if not vehicles or not parkingPoint then
71354: LD_VAR 0 1
71358: NOT
71359: PUSH
71360: LD_VAR 0 2
71364: NOT
71365: OR
71366: IFFALSE 71370
// exit ;
71368: GO 71468
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
71370: LD_ADDR_VAR 0 1
71374: PUSH
71375: LD_VAR 0 1
71379: PPUSH
71380: LD_INT 50
71382: PUSH
71383: EMPTY
71384: LIST
71385: PUSH
71386: LD_INT 3
71388: PUSH
71389: LD_INT 92
71391: PUSH
71392: LD_VAR 0 2
71396: PUSH
71397: LD_INT 1
71399: ARRAY
71400: PUSH
71401: LD_VAR 0 2
71405: PUSH
71406: LD_INT 2
71408: ARRAY
71409: PUSH
71410: LD_INT 8
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: PUSH
71419: EMPTY
71420: LIST
71421: LIST
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PPUSH
71427: CALL_OW 72
71431: ST_TO_ADDR
// if not vehicles then
71432: LD_VAR 0 1
71436: NOT
71437: IFFALSE 71441
// exit ;
71439: GO 71468
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
71441: LD_VAR 0 1
71445: PPUSH
71446: LD_VAR 0 2
71450: PUSH
71451: LD_INT 1
71453: ARRAY
71454: PPUSH
71455: LD_VAR 0 2
71459: PUSH
71460: LD_INT 2
71462: ARRAY
71463: PPUSH
71464: CALL_OW 111
// end ;
71468: LD_VAR 0 3
71472: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
71473: LD_INT 0
71475: PPUSH
71476: PPUSH
71477: PPUSH
// if not side or not area then
71478: LD_VAR 0 1
71482: NOT
71483: PUSH
71484: LD_VAR 0 2
71488: NOT
71489: OR
71490: IFFALSE 71494
// exit ;
71492: GO 71613
// tmp := AreaToList ( area , 0 ) ;
71494: LD_ADDR_VAR 0 5
71498: PUSH
71499: LD_VAR 0 2
71503: PPUSH
71504: LD_INT 0
71506: PPUSH
71507: CALL_OW 517
71511: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
71512: LD_ADDR_VAR 0 4
71516: PUSH
71517: DOUBLE
71518: LD_INT 1
71520: DEC
71521: ST_TO_ADDR
71522: LD_VAR 0 5
71526: PUSH
71527: LD_INT 1
71529: ARRAY
71530: PUSH
71531: FOR_TO
71532: IFFALSE 71611
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
71534: LD_VAR 0 5
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: PUSH
71543: LD_VAR 0 4
71547: ARRAY
71548: PPUSH
71549: LD_VAR 0 5
71553: PUSH
71554: LD_INT 2
71556: ARRAY
71557: PUSH
71558: LD_VAR 0 4
71562: ARRAY
71563: PPUSH
71564: CALL_OW 351
71568: IFFALSE 71609
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
71570: LD_VAR 0 5
71574: PUSH
71575: LD_INT 1
71577: ARRAY
71578: PUSH
71579: LD_VAR 0 4
71583: ARRAY
71584: PPUSH
71585: LD_VAR 0 5
71589: PUSH
71590: LD_INT 2
71592: ARRAY
71593: PUSH
71594: LD_VAR 0 4
71598: ARRAY
71599: PPUSH
71600: LD_VAR 0 1
71604: PPUSH
71605: CALL_OW 244
// end ;
71609: GO 71531
71611: POP
71612: POP
// end ; end_of_file
71613: LD_VAR 0 3
71617: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71618: LD_VAR 0 1
71622: PUSH
71623: LD_INT 200
71625: DOUBLE
71626: GREATEREQUAL
71627: IFFALSE 71635
71629: LD_INT 299
71631: DOUBLE
71632: LESSEQUAL
71633: IFTRUE 71637
71635: GO 71669
71637: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71638: LD_VAR 0 1
71642: PPUSH
71643: LD_VAR 0 2
71647: PPUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: LD_VAR 0 4
71657: PPUSH
71658: LD_VAR 0 5
71662: PPUSH
71663: CALL 24034 0 5
71667: GO 71746
71669: LD_INT 300
71671: DOUBLE
71672: GREATEREQUAL
71673: IFFALSE 71681
71675: LD_INT 399
71677: DOUBLE
71678: LESSEQUAL
71679: IFTRUE 71683
71681: GO 71745
71683: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71684: LD_VAR 0 1
71688: PPUSH
71689: LD_VAR 0 2
71693: PPUSH
71694: LD_VAR 0 3
71698: PPUSH
71699: LD_VAR 0 4
71703: PPUSH
71704: LD_VAR 0 5
71708: PPUSH
71709: LD_VAR 0 6
71713: PPUSH
71714: LD_VAR 0 7
71718: PPUSH
71719: LD_VAR 0 8
71723: PPUSH
71724: LD_VAR 0 9
71728: PPUSH
71729: LD_VAR 0 10
71733: PPUSH
71734: LD_VAR 0 11
71738: PPUSH
71739: CALL 19942 0 11
71743: GO 71746
71745: POP
// end ;
71746: PPOPN 11
71748: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71749: LD_VAR 0 1
71753: PPUSH
71754: LD_VAR 0 2
71758: PPUSH
71759: LD_VAR 0 3
71763: PPUSH
71764: LD_VAR 0 4
71768: PPUSH
71769: LD_VAR 0 5
71773: PPUSH
71774: CALL 23419 0 5
// end ; end_of_file
71778: PPOPN 5
71780: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71781: LD_VAR 0 1
71785: PPUSH
71786: LD_VAR 0 2
71790: PPUSH
71791: LD_VAR 0 3
71795: PPUSH
71796: LD_VAR 0 4
71800: PPUSH
71801: LD_VAR 0 5
71805: PPUSH
71806: LD_VAR 0 6
71810: PPUSH
71811: CALL 7594 0 6
// end ;
71815: PPOPN 6
71817: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
71818: LD_INT 0
71820: PPUSH
// begin if not units then
71821: LD_VAR 0 1
71825: NOT
71826: IFFALSE 71830
// exit ;
71828: GO 71830
// end ;
71830: PPOPN 7
71832: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71833: CALL 7481 0 0
// end ;
71837: PPOPN 1
71839: END
