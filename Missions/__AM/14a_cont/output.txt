// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Init ;
  11: CALL 76 0 0
// PrepareNature ( 4 , 3 , 3 , 5 , 1 , 0 , 0 , natureArea , 0 ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_INT 3
  20: PPUSH
  21: LD_INT 3
  23: PPUSH
  24: LD_INT 5
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 0
  32: PPUSH
  33: LD_INT 0
  35: PPUSH
  36: LD_INT 6
  38: PPUSH
  39: LD_INT 0
  41: PPUSH
  42: CALL 59743 0 9
// PrepareAmerican ;
  46: CALL 4099 0 0
// PrepareAlliance ;
  50: CALL 230 0 0
// Action ;
  54: CALL 923 0 0
// SaveForQuickRestart ;
  58: CALL_OW 22
// if debug then
  62: LD_EXP 1
  66: IFFALSE 75
// FogOff ( 7 ) ;
  68: LD_INT 7
  70: PPUSH
  71: CALL_OW 344
// end ;
  75: END
// export debug , activeBombTest , contaminateTime , bombExploded , enteredContaminatedArea , artifactPickedUp , planCaptured , seenBase , stevensTimer , canEnd , missionTime , killCounter , bunkerCounter ; function Init ; begin
  76: LD_INT 0
  78: PPUSH
// debug := false ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_INT 0
  86: ST_TO_ADDR
// activeBombTest := false ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// bombExploded := false ;
  95: LD_ADDR_EXP 4
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// contaminateTime := 0 0$00 ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// enteredContaminatedArea := false ;
 111: LD_ADDR_EXP 5
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// artifactPickedUp := false ;
 119: LD_ADDR_EXP 6
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// planCaptured := false ;
 127: LD_ADDR_EXP 7
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// seenBase := false ;
 135: LD_ADDR_EXP 8
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// stevensTimer := [ 20 20$00 , 16 16$00 , 14 14$00 , 12 12$00 ] [ Difficulty ] ;
 143: LD_ADDR_EXP 9
 147: PUSH
 148: LD_INT 42000
 150: PUSH
 151: LD_INT 33600
 153: PUSH
 154: LD_INT 29400
 156: PUSH
 157: LD_INT 25200
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: LIST
 164: LIST
 165: PUSH
 166: LD_OWVAR 67
 170: ARRAY
 171: ST_TO_ADDR
// canEnd := false ;
 172: LD_ADDR_EXP 10
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// missionTime := 0 0$00 ;
 180: LD_ADDR_EXP 11
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// killCounter := 0 ;
 188: LD_ADDR_EXP 12
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// bunkerCounter := 0 ;
 196: LD_ADDR_EXP 13
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// end ;
 204: LD_VAR 0 1
 208: RET
// every 0 0$1 trigger bunkerCounter >= 3 do
 209: LD_EXP 13
 213: PUSH
 214: LD_INT 3
 216: GREATEREQUAL
 217: IFFALSE 229
 219: GO 221
 221: DISABLE
// SetAchievement ( ACH_ONEMANARMY ) ; end_of_file
 222: LD_STRING ACH_ONEMANARMY
 224: PPUSH
 225: CALL_OW 543
 229: END
// export JMM , Burlak , Joan , RuSci ; export function PrepareAlliance ; var tmp , i , JMMVeh , BurlakVeh , VarJMMVeh , VarBurlakVeh ; begin
 230: LD_INT 0
 232: PPUSH
 233: PPUSH
 234: PPUSH
 235: PPUSH
 236: PPUSH
 237: PPUSH
 238: PPUSH
// uc_side := 7 ;
 239: LD_ADDR_OWVAR 20
 243: PUSH
 244: LD_INT 7
 246: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 14a_ ) ;
 247: LD_ADDR_EXP 14
 251: PUSH
 252: LD_STRING JMM
 254: PPUSH
 255: LD_EXP 1
 259: NOT
 260: PPUSH
 261: LD_STRING 14a_
 263: PPUSH
 264: CALL 26380 0 3
 268: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 14a_ ) ;
 269: LD_ADDR_EXP 15
 273: PUSH
 274: LD_STRING Burlak
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 14a_
 285: PPUSH
 286: CALL 26380 0 3
 290: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
 291: LD_ADDR_EXP 16
 295: PUSH
 296: LD_STRING Joan
 298: PPUSH
 299: LD_EXP 1
 303: NOT
 304: PPUSH
 305: LD_STRING 13a_
 307: PPUSH
 308: CALL 26380 0 3
 312: ST_TO_ADDR
// if not Joan then
 313: LD_EXP 16
 317: NOT
 318: IFFALSE 451
// begin tmp := CreateCharacterSet ( 13a_others ) ;
 320: LD_ADDR_VAR 0 2
 324: PUSH
 325: LD_STRING 13a_others
 327: PPUSH
 328: CALL_OW 31
 332: ST_TO_ADDR
// if tmp then
 333: LD_VAR 0 2
 337: IFFALSE 413
// begin for i in tmp do
 339: LD_ADDR_VAR 0 3
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: FOR_IN
 350: IFFALSE 411
// if GetClass ( i ) = 4 and GetSex ( i ) = sex_male and GetNation ( i ) = nation_russian then
 352: LD_VAR 0 3
 356: PPUSH
 357: CALL_OW 257
 361: PUSH
 362: LD_INT 4
 364: EQUAL
 365: PUSH
 366: LD_VAR 0 3
 370: PPUSH
 371: CALL_OW 258
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: AND
 380: PUSH
 381: LD_VAR 0 3
 385: PPUSH
 386: CALL_OW 248
 390: PUSH
 391: LD_INT 3
 393: EQUAL
 394: AND
 395: IFFALSE 409
// begin RuSci := i ;
 397: LD_ADDR_EXP 17
 401: PUSH
 402: LD_VAR 0 3
 406: ST_TO_ADDR
// break ;
 407: GO 411
// end ;
 409: GO 349
 411: POP
 412: POP
// end ; if not RuSci then
 413: LD_EXP 17
 417: NOT
 418: IFFALSE 451
// begin uc_nation := 3 ;
 420: LD_ADDR_OWVAR 21
 424: PUSH
 425: LD_INT 3
 427: ST_TO_ADDR
// PrepareHuman ( sex_male , 4 , 10 ) ;
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 4
 433: PPUSH
 434: LD_INT 10
 436: PPUSH
 437: CALL_OW 380
// RuSci := CreateHuman ;
 441: LD_ADDR_EXP 17
 445: PUSH
 446: CALL_OW 44
 450: ST_TO_ADDR
// end ; end ; VarJMMVeh := LoadVariable ( 14a_JMMVeh , [ us_morphling , engine_siberite , control_manual , us_rocket_launcher , 0 , 1 ] ) ;
 451: LD_ADDR_VAR 0 6
 455: PUSH
 456: LD_STRING 14a_JMMVeh
 458: PPUSH
 459: LD_INT 5
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: LD_INT 0
 473: PUSH
 474: LD_INT 1
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: LIST
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 30
 489: ST_TO_ADDR
// VarBurlakVeh := LoadVariable ( 14a_BurlakVeh , [ ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 , 3 ] ) ;
 490: LD_ADDR_VAR 0 7
 494: PUSH
 495: LD_STRING 14a_BurlakVeh
 497: PPUSH
 498: LD_INT 22
 500: PUSH
 501: LD_INT 3
 503: PUSH
 504: LD_INT 1
 506: PUSH
 507: LD_INT 51
 509: PUSH
 510: LD_INT 0
 512: PUSH
 513: LD_INT 3
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: LIST
 520: LIST
 521: LIST
 522: LIST
 523: PPUSH
 524: CALL_OW 30
 528: ST_TO_ADDR
// uc_direction := 4 ;
 529: LD_ADDR_OWVAR 24
 533: PUSH
 534: LD_INT 4
 536: ST_TO_ADDR
// uc_nation := VarJMMVeh [ 6 ] ;
 537: LD_ADDR_OWVAR 21
 541: PUSH
 542: LD_VAR 0 6
 546: PUSH
 547: LD_INT 6
 549: ARRAY
 550: ST_TO_ADDR
// PrepareVehicle ( VarJMMVeh [ 1 ] , VarJMMVeh [ 2 ] , VarJMMVeh [ 3 ] , VarJMMVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 551: LD_VAR 0 6
 555: PUSH
 556: LD_INT 1
 558: ARRAY
 559: PPUSH
 560: LD_VAR 0 6
 564: PUSH
 565: LD_INT 2
 567: ARRAY
 568: PPUSH
 569: LD_VAR 0 6
 573: PUSH
 574: LD_INT 3
 576: ARRAY
 577: PPUSH
 578: LD_VAR 0 6
 582: PUSH
 583: LD_INT 4
 585: ARRAY
 586: PPUSH
 587: LD_INT 60
 589: PPUSH
 590: LD_INT 80
 592: PPUSH
 593: CALL_OW 12
 597: PPUSH
 598: CALL 31244 0 5
// JMMVeh := CreateVehicle ;
 602: LD_ADDR_VAR 0 4
 606: PUSH
 607: CALL_OW 45
 611: ST_TO_ADDR
// PlaceUnitInArea ( JMMVeh , startArea , false ) ;
 612: LD_VAR 0 4
 616: PPUSH
 617: LD_INT 1
 619: PPUSH
 620: LD_INT 0
 622: PPUSH
 623: CALL 61978 0 3
// if VarJMMVeh [ 5 ] <> 0 then
 627: LD_VAR 0 6
 631: PUSH
 632: LD_INT 5
 634: ARRAY
 635: PUSH
 636: LD_INT 0
 638: NONEQUAL
 639: IFFALSE 659
// SetMark ( JMMVeh , VarJMMVeh [ 5 ] ) ;
 641: LD_VAR 0 4
 645: PPUSH
 646: LD_VAR 0 6
 650: PUSH
 651: LD_INT 5
 653: ARRAY
 654: PPUSH
 655: CALL_OW 242
// PlaceHumanInUnit ( JMM , JMMVeh ) ;
 659: LD_EXP 14
 663: PPUSH
 664: LD_VAR 0 4
 668: PPUSH
 669: CALL_OW 52
// uc_nation := VarBurlakVeh [ 6 ] ;
 673: LD_ADDR_OWVAR 21
 677: PUSH
 678: LD_VAR 0 7
 682: PUSH
 683: LD_INT 6
 685: ARRAY
 686: ST_TO_ADDR
// PrepareVehicle ( VarBurlakVeh [ 1 ] , VarBurlakVeh [ 2 ] , VarBurlakVeh [ 3 ] , VarBurlakVeh [ 4 ] , rand ( 60 , 80 ) ) ;
 687: LD_VAR 0 7
 691: PUSH
 692: LD_INT 1
 694: ARRAY
 695: PPUSH
 696: LD_VAR 0 7
 700: PUSH
 701: LD_INT 2
 703: ARRAY
 704: PPUSH
 705: LD_VAR 0 7
 709: PUSH
 710: LD_INT 3
 712: ARRAY
 713: PPUSH
 714: LD_VAR 0 7
 718: PUSH
 719: LD_INT 4
 721: ARRAY
 722: PPUSH
 723: LD_INT 60
 725: PPUSH
 726: LD_INT 80
 728: PPUSH
 729: CALL_OW 12
 733: PPUSH
 734: CALL 31244 0 5
// BurlakVeh := CreateVehicle ;
 738: LD_ADDR_VAR 0 5
 742: PUSH
 743: CALL_OW 45
 747: ST_TO_ADDR
// if not PlaceUnitInArea ( BurlakVeh , startArea , false ) then
 748: LD_VAR 0 5
 752: PPUSH
 753: LD_INT 1
 755: PPUSH
 756: LD_INT 0
 758: PPUSH
 759: CALL 61978 0 3
 763: NOT
 764: IFFALSE 784
// PlaceUnitXY ( BurlakVeh , 233 , 85 , false ) ;
 766: LD_VAR 0 5
 770: PPUSH
 771: LD_INT 233
 773: PPUSH
 774: LD_INT 85
 776: PPUSH
 777: LD_INT 0
 779: PPUSH
 780: CALL_OW 48
// if VarBurlakVeh [ 5 ] <> 0 then
 784: LD_VAR 0 7
 788: PUSH
 789: LD_INT 5
 791: ARRAY
 792: PUSH
 793: LD_INT 0
 795: NONEQUAL
 796: IFFALSE 816
// SetMark ( BurlakVeh , VarBurlakVeh [ 5 ] ) ;
 798: LD_VAR 0 5
 802: PPUSH
 803: LD_VAR 0 7
 807: PUSH
 808: LD_INT 5
 810: ARRAY
 811: PPUSH
 812: CALL_OW 242
// PlaceHumanInUnit ( Burlak , BurlakVeh ) ;
 816: LD_EXP 15
 820: PPUSH
 821: LD_VAR 0 5
 825: PPUSH
 826: CALL_OW 52
// tmp := [ [ 178 , 91 ] , [ 137 , 83 ] , [ 157 , 75 ] , [ 162 , 67 ] ] [ Difficulty ] ;
 830: LD_ADDR_VAR 0 2
 834: PUSH
 835: LD_INT 178
 837: PUSH
 838: LD_INT 91
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PUSH
 845: LD_INT 137
 847: PUSH
 848: LD_INT 83
 850: PUSH
 851: EMPTY
 852: LIST
 853: LIST
 854: PUSH
 855: LD_INT 157
 857: PUSH
 858: LD_INT 75
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 162
 867: PUSH
 868: LD_INT 67
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: PUSH
 881: LD_OWVAR 67
 885: ARRAY
 886: ST_TO_ADDR
// CreateResourcesXY ( mat_artifact , 4 , tmp [ 1 ] , tmp [ 2 ] , false ) ;
 887: LD_INT 4
 889: PPUSH
 890: LD_INT 4
 892: PPUSH
 893: LD_VAR 0 2
 897: PUSH
 898: LD_INT 1
 900: ARRAY
 901: PPUSH
 902: LD_VAR 0 2
 906: PUSH
 907: LD_INT 2
 909: ARRAY
 910: PPUSH
 911: LD_INT 0
 913: PPUSH
 914: CALL_OW 58
// end ; end_of_file
 918: LD_VAR 0 1
 922: RET
// export function Action ; begin
 923: LD_INT 0
 925: PPUSH
// InGameOn ;
 926: CALL_OW 8
// CenterNowOnXY ( 221 , 80 ) ;
 930: LD_INT 221
 932: PPUSH
 933: LD_INT 80
 935: PPUSH
 936: CALL_OW 86
// ComMoveXY ( [ JMM , Burlak ] , 217 , 79 ) ;
 940: LD_EXP 14
 944: PUSH
 945: LD_EXP 15
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PPUSH
 954: LD_INT 217
 956: PPUSH
 957: LD_INT 79
 959: PPUSH
 960: CALL_OW 111
// wait ( 0 0$7 ) ;
 964: LD_INT 245
 966: PPUSH
 967: CALL_OW 67
// ComExitVehicle ( [ JMM , Burlak ] ) ;
 971: LD_EXP 14
 975: PUSH
 976: LD_EXP 15
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 121
// Say ( Burlak , D2-Bur-1 ) ;
 989: LD_EXP 15
 993: PPUSH
 994: LD_STRING D2-Bur-1
 996: PPUSH
 997: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1001: LD_EXP 14
1005: PPUSH
1006: LD_STRING D2-JMM-1
1008: PPUSH
1009: CALL_OW 88
// wait ( 0 0$0.5 ) ;
1013: LD_INT 18
1015: PPUSH
1016: CALL_OW 67
// ComTurnUnit ( Burlak , JMM ) ;
1020: LD_EXP 15
1024: PPUSH
1025: LD_EXP 14
1029: PPUSH
1030: CALL_OW 119
// Say ( Burlak , D2-Bur-2 ) ;
1034: LD_EXP 15
1038: PPUSH
1039: LD_STRING D2-Bur-2
1041: PPUSH
1042: CALL_OW 88
// ComEnterUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , Burlak ) ) ;
1046: LD_EXP 15
1050: PPUSH
1051: LD_INT 21
1053: PUSH
1054: LD_INT 2
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PPUSH
1061: CALL_OW 69
1065: PPUSH
1066: LD_EXP 15
1070: PPUSH
1071: CALL_OW 74
1075: PPUSH
1076: CALL_OW 120
// ComEnterUnit ( JMM , NearestUnitToUnit ( FilterAllUnits ( [ f_type , unit_vehicle ] ) , JMM ) ) ;
1080: LD_EXP 14
1084: PPUSH
1085: LD_INT 21
1087: PUSH
1088: LD_INT 2
1090: PUSH
1091: EMPTY
1092: LIST
1093: LIST
1094: PPUSH
1095: CALL_OW 69
1099: PPUSH
1100: LD_EXP 14
1104: PPUSH
1105: CALL_OW 74
1109: PPUSH
1110: CALL_OW 120
// wait ( 0 0$1 ) ;
1114: LD_INT 35
1116: PPUSH
1117: CALL_OW 67
// InGameOff ;
1121: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
1125: LD_STRING MArtPickup
1127: PPUSH
1128: CALL_OW 337
// end ;
1132: LD_VAR 0 1
1136: RET
// every 0 0$1 trigger UnitFilter ( guards , [ f_see , 7 ] ) and not seenBase do
1137: LD_EXP 22
1141: PPUSH
1142: LD_INT 101
1144: PUSH
1145: LD_INT 7
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PPUSH
1152: CALL_OW 72
1156: PUSH
1157: LD_EXP 8
1161: NOT
1162: AND
1163: IFFALSE 1192
1165: GO 1167
1167: DISABLE
// begin Say ( Burlak , D3-Bur-1 ) ;
1168: LD_EXP 15
1172: PPUSH
1173: LD_STRING D3-Bur-1
1175: PPUSH
1176: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
1180: LD_EXP 14
1184: PPUSH
1185: LD_STRING D3-JMM-1
1187: PPUSH
1188: CALL_OW 88
// end ;
1192: END
// every 0 0$2 trigger FilterUnitsInArea ( usTestBase , [ f_side , 7 ] ) do
1193: LD_INT 5
1195: PPUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 7
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PPUSH
1206: CALL_OW 70
1210: IFFALSE 1545
1212: GO 1214
1214: DISABLE
// begin wait ( 0 0$3 ) ;
1215: LD_INT 105
1217: PPUSH
1218: CALL_OW 67
// PlaceSeeing ( 139 , 43 , 7 , - 20 ) ;
1222: LD_INT 139
1224: PPUSH
1225: LD_INT 43
1227: PPUSH
1228: LD_INT 7
1230: PPUSH
1231: LD_INT 20
1233: NEG
1234: PPUSH
1235: CALL_OW 330
// RemoveSeeing ( 139 , 43 , 7 ) ;
1239: LD_INT 139
1241: PPUSH
1242: LD_INT 43
1244: PPUSH
1245: LD_INT 7
1247: PPUSH
1248: CALL_OW 331
// DialogueOn ;
1252: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
1256: LD_EXP 14
1260: PPUSH
1261: CALL_OW 87
// Say ( JMM , D3a-JMM-1 ) ;
1265: LD_EXP 14
1269: PPUSH
1270: LD_STRING D3a-JMM-1
1272: PPUSH
1273: CALL_OW 88
// Say ( Burlak , D3a-Bur-1 ) ;
1277: LD_EXP 15
1281: PPUSH
1282: LD_STRING D3a-Bur-1
1284: PPUSH
1285: CALL_OW 88
// Say ( JMM , D3a-JMM-2 ) ;
1289: LD_EXP 14
1293: PPUSH
1294: LD_STRING D3a-JMM-2
1296: PPUSH
1297: CALL_OW 88
// if Joan then
1301: LD_EXP 16
1305: IFFALSE 1321
// SayRadio ( Joan , D3a-Joan-2 ) else
1307: LD_EXP 16
1311: PPUSH
1312: LD_STRING D3a-Joan-2
1314: PPUSH
1315: CALL_OW 94
1319: GO 1333
// SayRadio ( RuSci , D3a-RSci1-2 ) ;
1321: LD_EXP 17
1325: PPUSH
1326: LD_STRING D3a-RSci1-2
1328: PPUSH
1329: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-2 ) ;
1333: LD_EXP 18
1337: PPUSH
1338: LD_STRING D3a-Huck-2
1340: PPUSH
1341: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-2 ) ;
1345: LD_EXP 19
1349: PPUSH
1350: LD_STRING D3a-Pow-2
1352: PPUSH
1353: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-3 ) ;
1357: LD_EXP 18
1361: PPUSH
1362: LD_STRING D3a-Huck-3
1364: PPUSH
1365: CALL_OW 94
// SayRadio ( Powell , D3a-Pow-3 ) ;
1369: LD_EXP 19
1373: PPUSH
1374: LD_STRING D3a-Pow-3
1376: PPUSH
1377: CALL_OW 94
// SayRadio ( Stevens , D3a-Huck-4 ) ;
1381: LD_EXP 18
1385: PPUSH
1386: LD_STRING D3a-Huck-4
1388: PPUSH
1389: CALL_OW 94
// Say ( JMM , D3a-JMM-4 ) ;
1393: LD_EXP 14
1397: PPUSH
1398: LD_STRING D3a-JMM-4
1400: PPUSH
1401: CALL_OW 88
// Say ( Burlak , D3a-Bur-4 ) ;
1405: LD_EXP 15
1409: PPUSH
1410: LD_STRING D3a-Bur-4
1412: PPUSH
1413: CALL_OW 88
// if Joan then
1417: LD_EXP 16
1421: IFFALSE 1437
// SayRadio ( Joan , D3a-Joan-4 ) else
1423: LD_EXP 16
1427: PPUSH
1428: LD_STRING D3a-Joan-4
1430: PPUSH
1431: CALL_OW 94
1435: GO 1449
// SayRadio ( RuSci , D3a-RSci1-4 ) ;
1437: LD_EXP 17
1441: PPUSH
1442: LD_STRING D3a-RSci1-4
1444: PPUSH
1445: CALL_OW 94
// CenterNowOnXY ( 133 , 43 ) ;
1449: LD_INT 133
1451: PPUSH
1452: LD_INT 43
1454: PPUSH
1455: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
1459: LD_INT 10
1461: PPUSH
1462: CALL_OW 68
// Say ( JMM , D3a-JMM-5 ) ;
1466: LD_EXP 14
1470: PPUSH
1471: LD_STRING D3a-JMM-5
1473: PPUSH
1474: CALL_OW 88
// Say ( Burlak , D3a-Bur-5 ) ;
1478: LD_EXP 15
1482: PPUSH
1483: LD_STRING D3a-Bur-5
1485: PPUSH
1486: CALL_OW 88
// DialogueOff ;
1490: CALL_OW 7
// seenBase := true ;
1494: LD_ADDR_EXP 8
1498: PUSH
1499: LD_INT 1
1501: ST_TO_ADDR
// wait ( [ 0 0$15 , 0 0$12 , 0 0$9 , 0 0$8 ] [ Difficulty ] ) ;
1502: LD_INT 525
1504: PUSH
1505: LD_INT 420
1507: PUSH
1508: LD_INT 315
1510: PUSH
1511: LD_INT 280
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: LIST
1518: LIST
1519: PUSH
1520: LD_OWVAR 67
1524: ARRAY
1525: PPUSH
1526: CALL_OW 67
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1530: LD_EXP 21
1534: PPUSH
1535: LD_INT 142
1537: PPUSH
1538: LD_INT 52
1540: PPUSH
1541: CALL_OW 116
// end ;
1545: END
// every 5 5$00 trigger not seenBase and not bombExploded do
1546: LD_EXP 8
1550: NOT
1551: PUSH
1552: LD_EXP 4
1556: NOT
1557: AND
1558: IFFALSE 1578
1560: GO 1562
1562: DISABLE
// ComAttackPlace ( sibBomb , 142 , 52 ) ;
1563: LD_EXP 21
1567: PPUSH
1568: LD_INT 142
1570: PPUSH
1571: LD_INT 52
1573: PPUSH
1574: CALL_OW 116
1578: END
// export function OnBombExploded ( bomb , x , y ) ; var art ; begin
1579: LD_INT 0
1581: PPUSH
1582: PPUSH
// contaminateTime := tick ;
1583: LD_ADDR_EXP 3
1587: PUSH
1588: LD_OWVAR 1
1592: ST_TO_ADDR
// wait ( 0 0$5 ) ;
1593: LD_INT 175
1595: PPUSH
1596: CALL_OW 67
// art := FindArtifact ( 4 ) ;
1600: LD_ADDR_VAR 0 5
1604: PUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 469
1612: ST_TO_ADDR
// if art then
1613: LD_VAR 0 5
1617: IFFALSE 1656
// if art [ 1 ] = 157 and art [ 2 ] = 75 then
1619: LD_VAR 0 5
1623: PUSH
1624: LD_INT 1
1626: ARRAY
1627: PUSH
1628: LD_INT 157
1630: EQUAL
1631: PUSH
1632: LD_VAR 0 5
1636: PUSH
1637: LD_INT 2
1639: ARRAY
1640: PUSH
1641: LD_INT 75
1643: EQUAL
1644: AND
1645: IFFALSE 1656
// begin YouLost ( Artefact ) ;
1647: LD_STRING Artefact
1649: PPUSH
1650: CALL_OW 104
// exit ;
1654: GO 1812
// end ; if IsOK ( JMM ) and IsOk ( Burlak ) then
1656: LD_EXP 14
1660: PPUSH
1661: CALL_OW 302
1665: PUSH
1666: LD_EXP 15
1670: PPUSH
1671: CALL_OW 302
1675: AND
1676: IFFALSE 1753
// begin DialogueOn ;
1678: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
1682: LD_EXP 14
1686: PPUSH
1687: LD_STRING D6a-JMM-1
1689: PPUSH
1690: CALL_OW 88
// Say ( Burlak , D6a-Bur-1 ) ;
1694: LD_EXP 15
1698: PPUSH
1699: LD_STRING D6a-Bur-1
1701: PPUSH
1702: CALL_OW 88
// Say ( JMM , D6c-JMM-1 ) ;
1706: LD_EXP 14
1710: PPUSH
1711: LD_STRING D6c-JMM-1
1713: PPUSH
1714: CALL_OW 88
// Say ( Burlak , D6c-Bur-1 ) ;
1718: LD_EXP 15
1722: PPUSH
1723: LD_STRING D6c-Bur-1
1725: PPUSH
1726: CALL_OW 88
// Say ( JMM , D6c-JMM-2 ) ;
1730: LD_EXP 14
1734: PPUSH
1735: LD_STRING D6c-JMM-2
1737: PPUSH
1738: CALL_OW 88
// ChangeMissionObjectives ( MBase ) ;
1742: LD_STRING MBase
1744: PPUSH
1745: CALL_OW 337
// DialogueOff ;
1749: CALL_OW 7
// end ; bombExploded := true ;
1753: LD_ADDR_EXP 4
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// wait ( [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$40 ] [ Difficulty ] ) ;
1761: LD_INT 6300
1763: PUSH
1764: LD_INT 5250
1766: PUSH
1767: LD_INT 4200
1769: PUSH
1770: LD_INT 3500
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: LIST
1777: LIST
1778: PUSH
1779: LD_OWVAR 67
1783: ARRAY
1784: PPUSH
1785: CALL_OW 67
// if IsOk ( JMM ) then
1789: LD_EXP 14
1793: PPUSH
1794: CALL_OW 302
1798: IFFALSE 1812
// Say ( JMM , D8-JMM-1 ) ;
1800: LD_EXP 14
1804: PPUSH
1805: LD_STRING D8-JMM-1
1807: PPUSH
1808: CALL_OW 88
// end ;
1812: LD_VAR 0 4
1816: RET
// every 0 0$1 trigger stevensTimer and not planCaptured and bombExploded do
1817: LD_EXP 9
1821: PUSH
1822: LD_EXP 7
1826: NOT
1827: AND
1828: PUSH
1829: LD_EXP 4
1833: AND
1834: IFFALSE 1889
1836: GO 1838
1838: DISABLE
// begin enable ;
1839: ENABLE
// if FilterUnitsInArea ( usBase , [ f_side , 7 ] ) then
1840: LD_INT 9
1842: PPUSH
1843: LD_INT 22
1845: PUSH
1846: LD_INT 7
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PPUSH
1853: CALL_OW 70
1857: IFFALSE 1875
// stevensTimer := stevensTimer - 0 0$30 else
1859: LD_ADDR_EXP 9
1863: PUSH
1864: LD_EXP 9
1868: PUSH
1869: LD_INT 1050
1871: MINUS
1872: ST_TO_ADDR
1873: GO 1889
// stevensTimer := stevensTimer - 0 0$1 ;
1875: LD_ADDR_EXP 9
1879: PUSH
1880: LD_EXP 9
1884: PUSH
1885: LD_INT 35
1887: MINUS
1888: ST_TO_ADDR
// end ;
1889: END
// every 0 0$1 trigger stevensTimer <= 0 0$00 and not planCaptured do var i , tmp ;
1890: LD_EXP 9
1894: PUSH
1895: LD_INT 0
1897: LESSEQUAL
1898: PUSH
1899: LD_EXP 7
1903: NOT
1904: AND
1905: IFFALSE 2069
1907: GO 1909
1909: DISABLE
1910: LD_INT 0
1912: PPUSH
1913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
1914: LD_ADDR_VAR 0 2
1918: PUSH
1919: LD_INT 22
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: EMPTY
1926: LIST
1927: LIST
1928: PUSH
1929: LD_INT 25
1931: PUSH
1932: LD_INT 4
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: PUSH
1939: EMPTY
1940: LIST
1941: LIST
1942: PPUSH
1943: CALL_OW 69
1947: ST_TO_ADDR
// for i in tmp do
1948: LD_ADDR_VAR 0 1
1952: PUSH
1953: LD_VAR 0 2
1957: PUSH
1958: FOR_IN
1959: IFFALSE 2012
// begin if IsInUnit ( i ) then
1961: LD_VAR 0 1
1965: PPUSH
1966: CALL_OW 310
1970: IFFALSE 1983
// ComExitBuilding ( i ) else
1972: LD_VAR 0 1
1976: PPUSH
1977: CALL_OW 122
1981: GO 2010
// if not HasTask ( i ) then
1983: LD_VAR 0 1
1987: PPUSH
1988: CALL_OW 314
1992: NOT
1993: IFFALSE 2010
// ComMoveXY ( i , 29 , 56 ) ;
1995: LD_VAR 0 1
1999: PPUSH
2000: LD_INT 29
2002: PPUSH
2003: LD_INT 56
2005: PPUSH
2006: CALL_OW 111
// end ;
2010: GO 1958
2012: POP
2013: POP
// repeat wait ( 0 0$1 ) ;
2014: LD_INT 35
2016: PPUSH
2017: CALL_OW 67
// until FilterUnitsInArea ( stevensEscapeArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
2021: LD_INT 8
2023: PPUSH
2024: LD_INT 22
2026: PUSH
2027: LD_INT 1
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PUSH
2034: LD_INT 25
2036: PUSH
2037: LD_INT 4
2039: PUSH
2040: EMPTY
2041: LIST
2042: LIST
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: PPUSH
2048: CALL_OW 70
2052: IFFALSE 2014
// if planCaptured then
2054: LD_EXP 7
2058: IFFALSE 2062
// exit ;
2060: GO 2069
// YouLost ( Time ) ;
2062: LD_STRING Time
2064: PPUSH
2065: CALL_OW 104
// end ;
2069: PPOPN 2
2071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_distxy , 142 , 52 , 27 ] ] ) and contaminateTime + 6000 > tick and bombExploded do
2072: LD_INT 22
2074: PUSH
2075: LD_INT 7
2077: PUSH
2078: EMPTY
2079: LIST
2080: LIST
2081: PUSH
2082: LD_INT 92
2084: PUSH
2085: LD_INT 142
2087: PUSH
2088: LD_INT 52
2090: PUSH
2091: LD_INT 27
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: LIST
2098: LIST
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PPUSH
2104: CALL_OW 69
2108: PUSH
2109: LD_EXP 3
2113: PUSH
2114: LD_INT 6000
2116: PLUS
2117: PUSH
2118: LD_OWVAR 1
2122: GREATER
2123: AND
2124: PUSH
2125: LD_EXP 4
2129: AND
2130: IFFALSE 2185
2132: GO 2134
2134: DISABLE
// begin CenterOnUnits ( [ JMM , Burlak ] ) ;
2135: LD_EXP 14
2139: PUSH
2140: LD_EXP 15
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: PPUSH
2149: CALL_OW 85
// DialogueOn ;
2153: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
2157: LD_EXP 14
2161: PPUSH
2162: LD_STRING D6b-JMM-1
2164: PPUSH
2165: CALL_OW 88
// Say ( Burlak , D6b-Bur-1 ) ;
2169: LD_EXP 15
2173: PPUSH
2174: LD_STRING D6b-Bur-1
2176: PPUSH
2177: CALL_OW 88
// DialogueOff ;
2181: CALL_OW 7
// end ;
2185: END
// every 0 0$1 trigger ( GetDistUnitXY ( Burlak , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( Burlak ) , 142 , 52 ) < 25 ) and GetLives ( Burlak ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2186: LD_EXP 15
2190: PPUSH
2191: LD_INT 142
2193: PPUSH
2194: LD_INT 52
2196: PPUSH
2197: CALL_OW 297
2201: PUSH
2202: LD_INT 25
2204: LESS
2205: PUSH
2206: LD_EXP 15
2210: PPUSH
2211: CALL_OW 310
2215: PPUSH
2216: LD_INT 142
2218: PPUSH
2219: LD_INT 52
2221: PPUSH
2222: CALL_OW 297
2226: PUSH
2227: LD_INT 25
2229: LESS
2230: OR
2231: PUSH
2232: LD_EXP 15
2236: PPUSH
2237: CALL_OW 256
2241: PUSH
2242: LD_INT 1000
2244: LESS
2245: AND
2246: PUSH
2247: LD_EXP 3
2251: PUSH
2252: LD_INT 6000
2254: PLUS
2255: PUSH
2256: LD_OWVAR 1
2260: GREATER
2261: AND
2262: PUSH
2263: LD_EXP 4
2267: AND
2268: IFFALSE 2301
2270: GO 2272
2272: DISABLE
// begin DialogueOn ;
2273: CALL_OW 6
// Say ( Burlak , D7-Bur-1 ) ;
2277: LD_EXP 15
2281: PPUSH
2282: LD_STRING D7-Bur-1
2284: PPUSH
2285: CALL_OW 88
// enteredContaminatedArea := true ;
2289: LD_ADDR_EXP 5
2293: PUSH
2294: LD_INT 1
2296: ST_TO_ADDR
// DialogueOff ;
2297: CALL_OW 7
// end ;
2301: END
// every 0 0$1 trigger ( GetDistUnitXY ( JMM , 142 , 52 ) < 25 or GetDistUnitXY ( IsInUnit ( JMM ) , 142 , 52 ) < 25 ) and GetLives ( JMM ) < 1000 and contaminateTime + 6000 > tick and bombExploded do
2302: LD_EXP 14
2306: PPUSH
2307: LD_INT 142
2309: PPUSH
2310: LD_INT 52
2312: PPUSH
2313: CALL_OW 297
2317: PUSH
2318: LD_INT 25
2320: LESS
2321: PUSH
2322: LD_EXP 14
2326: PPUSH
2327: CALL_OW 310
2331: PPUSH
2332: LD_INT 142
2334: PPUSH
2335: LD_INT 52
2337: PPUSH
2338: CALL_OW 297
2342: PUSH
2343: LD_INT 25
2345: LESS
2346: OR
2347: PUSH
2348: LD_EXP 14
2352: PPUSH
2353: CALL_OW 256
2357: PUSH
2358: LD_INT 1000
2360: LESS
2361: AND
2362: PUSH
2363: LD_EXP 3
2367: PUSH
2368: LD_INT 6000
2370: PLUS
2371: PUSH
2372: LD_OWVAR 1
2376: GREATER
2377: AND
2378: PUSH
2379: LD_EXP 4
2383: AND
2384: IFFALSE 2417
2386: GO 2388
2388: DISABLE
// begin DialogueOn ;
2389: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
2393: LD_EXP 14
2397: PPUSH
2398: LD_STRING D7-JMM-1
2400: PPUSH
2401: CALL_OW 88
// enteredContaminatedArea := true ;
2405: LD_ADDR_EXP 5
2409: PUSH
2410: LD_INT 1
2412: ST_TO_ADDR
// DialogueOff ;
2413: CALL_OW 7
// end ;
2417: END
// every 0 0$1 trigger artifactPickedUp and IsOk ( JMM ) and IsOk ( Burlak ) do
2418: LD_EXP 6
2422: PUSH
2423: LD_EXP 14
2427: PPUSH
2428: CALL_OW 302
2432: AND
2433: PUSH
2434: LD_EXP 15
2438: PPUSH
2439: CALL_OW 302
2443: AND
2444: IFFALSE 2513
2446: GO 2448
2448: DISABLE
// begin DialogueOn ;
2449: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Burlak ] ) ;
2453: LD_EXP 14
2457: PUSH
2458: LD_EXP 15
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 87
// Say ( JMM , D4-JMM-1 ) ;
2471: LD_EXP 14
2475: PPUSH
2476: LD_STRING D4-JMM-1
2478: PPUSH
2479: CALL_OW 88
// if not bombExploded then
2483: LD_EXP 4
2487: NOT
2488: IFFALSE 2502
// Say ( Burlak , D4-Bur-1 ) ;
2490: LD_EXP 15
2494: PPUSH
2495: LD_STRING D4-Bur-1
2497: PPUSH
2498: CALL_OW 88
// DialogueOff ;
2502: CALL_OW 7
// ChangeMissionObjectives ( MReturn ) ;
2506: LD_STRING MReturn
2508: PPUSH
2509: CALL_OW 337
// end ;
2513: END
// every 0 0$2 trigger not planCaptured and FilterAllUnits ( [ [ f_side , 7 ] , [ f_dist , us_dep_north , 6 ] ] ) do
2514: LD_EXP 7
2518: NOT
2519: PUSH
2520: LD_INT 22
2522: PUSH
2523: LD_INT 7
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: LD_INT 91
2532: PUSH
2533: LD_INT 9
2535: PUSH
2536: LD_INT 6
2538: PUSH
2539: EMPTY
2540: LIST
2541: LIST
2542: LIST
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: PPUSH
2548: CALL_OW 69
2552: AND
2553: IFFALSE 2630
2555: GO 2557
2557: DISABLE
// begin DialogueOn ;
2558: CALL_OW 6
// PlaceSeeing ( 55 , 11 , 7 , - 6 ) ;
2562: LD_INT 55
2564: PPUSH
2565: LD_INT 11
2567: PPUSH
2568: LD_INT 7
2570: PPUSH
2571: LD_INT 6
2573: NEG
2574: PPUSH
2575: CALL_OW 330
// RemoveSeeing ( 55 , 11 , 7 ) ;
2579: LD_INT 55
2581: PPUSH
2582: LD_INT 11
2584: PPUSH
2585: LD_INT 7
2587: PPUSH
2588: CALL_OW 331
// Say ( Burlak , D9-Bur-1 ) ;
2592: LD_EXP 15
2596: PPUSH
2597: LD_STRING D9-Bur-1
2599: PPUSH
2600: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
2604: LD_EXP 14
2608: PPUSH
2609: LD_STRING D9-JMM-1
2611: PPUSH
2612: CALL_OW 88
// DialogueOff ;
2616: CALL_OW 7
// SetSide ( us_dep_north , 7 ) ;
2620: LD_INT 9
2622: PPUSH
2623: LD_INT 7
2625: PPUSH
2626: CALL_OW 235
// end ;
2630: END
// every 0 0$1 trigger FilterUnitsInArea ( usBase , [ f_side , 7 ] ) do
2631: LD_INT 9
2633: PPUSH
2634: LD_INT 22
2636: PUSH
2637: LD_INT 7
2639: PUSH
2640: EMPTY
2641: LIST
2642: LIST
2643: PPUSH
2644: CALL_OW 70
2648: IFFALSE 2684
2650: GO 2652
2652: DISABLE
// begin wait ( 0 0$07 ) ;
2653: LD_INT 245
2655: PPUSH
2656: CALL_OW 67
// Say ( JMM , D10b-JMM-1 ) ;
2660: LD_EXP 14
2664: PPUSH
2665: LD_STRING D10b-JMM-1
2667: PPUSH
2668: CALL_OW 88
// Say ( Burlak , D10b-Bur-1 ) ;
2672: LD_EXP 15
2676: PPUSH
2677: LD_STRING D10b-Bur-1
2679: PPUSH
2680: CALL_OW 88
// end ;
2684: END
// every 0 0$1 trigger stevensTimer and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) and ( GetSide ( us_depot ) = 7 or FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) = 0 ) do var i ;
2685: LD_EXP 9
2689: PUSH
2690: LD_INT 22
2692: PUSH
2693: LD_INT 1
2695: PUSH
2696: EMPTY
2697: LIST
2698: LIST
2699: PUSH
2700: LD_INT 25
2702: PUSH
2703: LD_INT 4
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 26
2712: PUSH
2713: LD_INT 1
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: EMPTY
2721: LIST
2722: LIST
2723: LIST
2724: PPUSH
2725: CALL_OW 69
2729: AND
2730: PUSH
2731: LD_INT 5
2733: PPUSH
2734: CALL_OW 255
2738: PUSH
2739: LD_INT 7
2741: EQUAL
2742: PUSH
2743: LD_INT 22
2745: PUSH
2746: LD_INT 1
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: LD_INT 25
2755: PUSH
2756: LD_INT 1
2758: PUSH
2759: EMPTY
2760: LIST
2761: LIST
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PPUSH
2767: CALL_OW 69
2771: PUSH
2772: LD_INT 0
2774: EQUAL
2775: OR
2776: AND
2777: IFFALSE 3366
2779: GO 2781
2781: DISABLE
2782: LD_INT 0
2784: PPUSH
// begin case Query ( QKill ) of 1 :
2785: LD_STRING QKill
2787: PPUSH
2788: CALL_OW 97
2792: PUSH
2793: LD_INT 1
2795: DOUBLE
2796: EQUAL
2797: IFTRUE 2801
2799: GO 3354
2801: POP
// begin DialogueOn ;
2802: CALL_OW 6
// Say ( JMM , D10a-JMM-1 ) ;
2806: LD_EXP 14
2810: PPUSH
2811: LD_STRING D10a-JMM-1
2813: PPUSH
2814: CALL_OW 88
// Say ( Burlak , D10a-Bur-1 ) ;
2818: LD_EXP 15
2822: PPUSH
2823: LD_STRING D10a-Bur-1
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D10a-JMM-2 ) ;
2830: LD_EXP 14
2834: PPUSH
2835: LD_STRING D10a-JMM-2
2837: PPUSH
2838: CALL_OW 88
// if IsOk ( Stevens ) then
2842: LD_EXP 18
2846: PPUSH
2847: CALL_OW 302
2851: IFFALSE 2867
// Say ( Stevens , D10a-Huck-2 ) else
2853: LD_EXP 18
2857: PPUSH
2858: LD_STRING D10a-Huck-2
2860: PPUSH
2861: CALL_OW 88
2865: GO 2918
// Say ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) [ 1 ] , D10a-ASci1-3 ) ;
2867: LD_INT 22
2869: PUSH
2870: LD_INT 1
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PUSH
2877: LD_INT 25
2879: PUSH
2880: LD_INT 4
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: PUSH
2887: LD_INT 26
2889: PUSH
2890: LD_INT 1
2892: PUSH
2893: EMPTY
2894: LIST
2895: LIST
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: LIST
2901: PPUSH
2902: CALL_OW 69
2906: PUSH
2907: LD_INT 1
2909: ARRAY
2910: PPUSH
2911: LD_STRING D10a-ASci1-3
2913: PPUSH
2914: CALL_OW 88
// Say ( JMM , D10a-JMM-4 ) ;
2918: LD_EXP 14
2922: PPUSH
2923: LD_STRING D10a-JMM-4
2925: PPUSH
2926: CALL_OW 88
// if IsOk ( Stevens ) then
2930: LD_EXP 18
2934: PPUSH
2935: CALL_OW 302
2939: IFFALSE 2953
// Say ( Stevens , D10a-Huck-3 ) ;
2941: LD_EXP 18
2945: PPUSH
2946: LD_STRING D10a-Huck-3
2948: PPUSH
2949: CALL_OW 88
// DialogueOff ;
2953: CALL_OW 7
// SetAttitude ( 1 , 7 , att_friend , true ) ;
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 7
2962: PPUSH
2963: LD_INT 1
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: CALL_OW 80
// planCaptured := true ;
2973: LD_ADDR_EXP 7
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
2981: LD_STRING MEnd
2983: PPUSH
2984: CALL_OW 337
// SetAchievement ( ACH_DIPLOMACY ) ;
2988: LD_STRING ACH_DIPLOMACY
2990: PPUSH
2991: CALL_OW 543
// canEnd := true ;
2995: LD_ADDR_EXP 10
2999: PUSH
3000: LD_INT 1
3002: ST_TO_ADDR
// missionTime := tick ;
3003: LD_ADDR_EXP 11
3007: PUSH
3008: LD_OWVAR 1
3012: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3013: LD_INT 35
3015: PPUSH
3016: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) then
3020: LD_INT 22
3022: PUSH
3023: LD_INT 1
3025: PUSH
3026: EMPTY
3027: LIST
3028: LIST
3029: PUSH
3030: LD_INT 3
3032: PUSH
3033: LD_INT 50
3035: PUSH
3036: EMPTY
3037: LIST
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PPUSH
3047: CALL_OW 69
3051: IFFALSE 3167
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) do
3053: LD_ADDR_VAR 0 1
3057: PUSH
3058: LD_INT 22
3060: PUSH
3061: LD_INT 1
3063: PUSH
3064: EMPTY
3065: LIST
3066: LIST
3067: PUSH
3068: LD_INT 25
3070: PUSH
3071: LD_INT 4
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: EMPTY
3079: LIST
3080: LIST
3081: PPUSH
3082: CALL_OW 69
3086: PUSH
3087: FOR_IN
3088: IFFALSE 3165
// begin if IsInUnit ( i ) then
3090: LD_VAR 0 1
3094: PPUSH
3095: CALL_OW 310
3099: IFFALSE 3112
// ComExitBuilding ( i ) else
3101: LD_VAR 0 1
3105: PPUSH
3106: CALL_OW 122
3110: GO 3163
// ComHeal ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) , i ) ) ;
3112: LD_VAR 0 1
3116: PPUSH
3117: LD_INT 22
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: LD_INT 3
3129: PUSH
3130: LD_INT 50
3132: PUSH
3133: EMPTY
3134: LIST
3135: PUSH
3136: EMPTY
3137: LIST
3138: LIST
3139: PUSH
3140: EMPTY
3141: LIST
3142: LIST
3143: PPUSH
3144: CALL_OW 69
3148: PPUSH
3149: LD_VAR 0 1
3153: PPUSH
3154: CALL_OW 74
3158: PPUSH
3159: CALL_OW 128
// end ;
3163: GO 3087
3165: POP
3166: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_ok ] ] ] ) ;
3167: LD_INT 22
3169: PUSH
3170: LD_INT 1
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: LD_INT 50
3182: PUSH
3183: EMPTY
3184: LIST
3185: PUSH
3186: EMPTY
3187: LIST
3188: LIST
3189: PUSH
3190: EMPTY
3191: LIST
3192: LIST
3193: PPUSH
3194: CALL_OW 69
3198: NOT
3199: IFFALSE 3013
// repeat wait ( 3 ) ;
3201: LD_INT 3
3203: PPUSH
3204: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
3208: LD_ADDR_VAR 0 1
3212: PUSH
3213: LD_INT 22
3215: PUSH
3216: LD_INT 1
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PUSH
3223: LD_INT 21
3225: PUSH
3226: LD_INT 1
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: EMPTY
3234: LIST
3235: LIST
3236: PPUSH
3237: CALL_OW 69
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3319
// begin if IsInArea ( i , stevensEscapeArea ) then
3245: LD_VAR 0 1
3249: PPUSH
3250: LD_INT 8
3252: PPUSH
3253: CALL_OW 308
3257: IFFALSE 3270
// begin RemoveUnit ( i ) ;
3259: LD_VAR 0 1
3263: PPUSH
3264: CALL_OW 64
// continue ;
3268: GO 3242
// end ; if IsInUnit ( i ) then
3270: LD_VAR 0 1
3274: PPUSH
3275: CALL_OW 310
3279: IFFALSE 3290
// ComExitBuilding ( i ) ;
3281: LD_VAR 0 1
3285: PPUSH
3286: CALL_OW 122
// if not HasTask ( i ) then
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 314
3299: NOT
3300: IFFALSE 3317
// ComMoveXY ( i , 28 , 55 ) ;
3302: LD_VAR 0 1
3306: PPUSH
3307: LD_INT 28
3309: PPUSH
3310: LD_INT 55
3312: PPUSH
3313: CALL_OW 111
// end ;
3317: GO 3242
3319: POP
3320: POP
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
3321: LD_INT 22
3323: PUSH
3324: LD_INT 1
3326: PUSH
3327: EMPTY
3328: LIST
3329: LIST
3330: PUSH
3331: LD_INT 21
3333: PUSH
3334: LD_INT 1
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PUSH
3341: EMPTY
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 69
3349: NOT
3350: IFFALSE 3201
// end ; 2 :
3352: GO 3366
3354: LD_INT 2
3356: DOUBLE
3357: EQUAL
3358: IFTRUE 3362
3360: GO 3365
3362: POP
// ; end ;
3363: GO 3366
3365: POP
// end ;
3366: PPOPN 1
3368: END
// every 0 0$1 trigger canEnd do var un , i , tmp ;
3369: LD_EXP 10
3373: IFFALSE 3730
3375: GO 3377
3377: DISABLE
3378: LD_INT 0
3380: PPUSH
3381: PPUSH
3382: PPUSH
// begin SetAreaMapShow ( endMissionArea , 1 ) ;
3383: LD_INT 10
3385: PPUSH
3386: LD_INT 1
3388: PPUSH
3389: CALL_OW 424
// if Difficulty < 2 then
3393: LD_OWVAR 67
3397: PUSH
3398: LD_INT 2
3400: LESS
3401: IFFALSE 3405
// exit ;
3403: GO 3730
// uc_side := 4 ;
3405: LD_ADDR_OWVAR 20
3409: PUSH
3410: LD_INT 4
3412: ST_TO_ADDR
// uc_nation := 1 ;
3413: LD_ADDR_OWVAR 21
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// InitHc ;
3421: CALL_OW 19
// tmp := [ ] ;
3425: LD_ADDR_VAR 0 3
3429: PUSH
3430: EMPTY
3431: ST_TO_ADDR
// PrepareHuman ( false , class_sniper , 10 ) ;
3432: LD_INT 0
3434: PPUSH
3435: LD_INT 5
3437: PPUSH
3438: LD_INT 10
3440: PPUSH
3441: CALL_OW 380
// un := CreateHuman ;
3445: LD_ADDR_VAR 0 1
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// tmp := [ un ] ;
3455: LD_ADDR_VAR 0 3
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: EMPTY
3466: LIST
3467: ST_TO_ADDR
// PlaceUnitXY ( un , 226 , 86 , false ) ;
3468: LD_VAR 0 1
3472: PPUSH
3473: LD_INT 226
3475: PPUSH
3476: LD_INT 86
3478: PPUSH
3479: LD_INT 0
3481: PPUSH
3482: CALL_OW 48
// ComHold ( un ) ;
3486: LD_VAR 0 1
3490: PPUSH
3491: CALL_OW 140
// for i = 1 to 3 do
3495: LD_ADDR_VAR 0 2
3499: PUSH
3500: DOUBLE
3501: LD_INT 1
3503: DEC
3504: ST_TO_ADDR
3505: LD_INT 3
3507: PUSH
3508: FOR_TO
3509: IFFALSE 3608
// begin PrepareHuman ( false , class_soldier , 8 ) ;
3511: LD_INT 0
3513: PPUSH
3514: LD_INT 1
3516: PPUSH
3517: LD_INT 8
3519: PPUSH
3520: CALL_OW 380
// un := CreateHuman ;
3524: LD_ADDR_VAR 0 1
3528: PUSH
3529: CALL_OW 44
3533: ST_TO_ADDR
// SetDir ( un , 5 ) ;
3534: LD_VAR 0 1
3538: PPUSH
3539: LD_INT 5
3541: PPUSH
3542: CALL_OW 233
// PlaceUnitXY ( un , [ 215 , 217 , 219 ] [ i ] , 76 , false ) ;
3546: LD_VAR 0 1
3550: PPUSH
3551: LD_INT 215
3553: PUSH
3554: LD_INT 217
3556: PUSH
3557: LD_INT 219
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: LIST
3564: PUSH
3565: LD_VAR 0 2
3569: ARRAY
3570: PPUSH
3571: LD_INT 76
3573: PPUSH
3574: LD_INT 0
3576: PPUSH
3577: CALL_OW 48
// ComCrawl ( un ) ;
3581: LD_VAR 0 1
3585: PPUSH
3586: CALL_OW 137
// tmp := tmp ^ un ;
3590: LD_ADDR_VAR 0 3
3594: PUSH
3595: LD_VAR 0 3
3599: PUSH
3600: LD_VAR 0 1
3604: ADD
3605: ST_TO_ADDR
// end ;
3606: GO 3508
3608: POP
3609: POP
// repeat wait ( 0 0$1 ) ;
3610: LD_INT 35
3612: PPUSH
3613: CALL_OW 67
// until not UnitFilter ( tmp , [ f_lives , 1000 ] ) ;
3617: LD_VAR 0 3
3621: PPUSH
3622: LD_INT 24
3624: PUSH
3625: LD_INT 1000
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 72
3636: NOT
3637: IFFALSE 3610
// for i in tmp do
3639: LD_ADDR_VAR 0 2
3643: PUSH
3644: LD_VAR 0 3
3648: PUSH
3649: FOR_IN
3650: IFFALSE 3728
// begin wait ( 0 0$1 ) ;
3652: LD_INT 35
3654: PPUSH
3655: CALL_OW 67
// if Crawls ( i ) then
3659: LD_VAR 0 2
3663: PPUSH
3664: CALL_OW 318
3668: IFFALSE 3681
// ComWalk ( i ) else
3670: LD_VAR 0 2
3674: PPUSH
3675: CALL_OW 138
3679: GO 3726
// if GetClass ( i ) = class_sniper then
3681: LD_VAR 0 2
3685: PPUSH
3686: CALL_OW 257
3690: PUSH
3691: LD_INT 5
3693: EQUAL
3694: IFFALSE 3712
// ComAttackSoporific ( i , JMM ) else
3696: LD_VAR 0 2
3700: PPUSH
3701: LD_EXP 14
3705: PPUSH
3706: CALL_OW 166
3710: GO 3726
// ComAttackUnit ( i , JMM ) ;
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_EXP 14
3721: PPUSH
3722: CALL_OW 115
// end ;
3726: GO 3649
3728: POP
3729: POP
// end ;
3730: PPOPN 3
3732: END
// every 0 0$1 trigger not planCaptured and IsDead ( us_lab ) do
3733: LD_EXP 7
3737: NOT
3738: PUSH
3739: LD_INT 1
3741: PPUSH
3742: CALL_OW 301
3746: AND
3747: IFFALSE 3759
3749: GO 3751
3751: DISABLE
// YouLost ( Lab ) ;
3752: LD_STRING Lab
3754: PPUSH
3755: CALL_OW 104
3759: END
// every 0 0$1 trigger FilterUnitsInArea ( endMissionArea , [ f_side , 7 ] ) >= 2 and FilterUnitsInArea ( endMissionArea , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) and canEnd and planCaptured and artifactPickedUp do var m1 , m2 ;
3760: LD_INT 10
3762: PPUSH
3763: LD_INT 22
3765: PUSH
3766: LD_INT 7
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PPUSH
3773: CALL_OW 70
3777: PUSH
3778: LD_INT 2
3780: GREATEREQUAL
3781: PUSH
3782: LD_INT 10
3784: PPUSH
3785: LD_INT 2
3787: PUSH
3788: LD_INT 34
3790: PUSH
3791: LD_INT 12
3793: PUSH
3794: EMPTY
3795: LIST
3796: LIST
3797: PUSH
3798: LD_INT 34
3800: PUSH
3801: LD_INT 51
3803: PUSH
3804: EMPTY
3805: LIST
3806: LIST
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: LIST
3812: PPUSH
3813: CALL_OW 70
3817: AND
3818: PUSH
3819: LD_EXP 10
3823: AND
3824: PUSH
3825: LD_EXP 7
3829: AND
3830: PUSH
3831: LD_EXP 6
3835: AND
3836: IFFALSE 4096
3838: GO 3840
3840: DISABLE
3841: LD_INT 0
3843: PPUSH
3844: PPUSH
// begin m1 := false ;
3845: LD_ADDR_VAR 0 1
3849: PUSH
3850: LD_INT 0
3852: ST_TO_ADDR
// m2 := false ;
3853: LD_ADDR_VAR 0 2
3857: PUSH
3858: LD_INT 0
3860: ST_TO_ADDR
// if killCounter = 0 then
3861: LD_EXP 12
3865: PUSH
3866: LD_INT 0
3868: EQUAL
3869: IFFALSE 3878
// SetAchievement ( ACH_PACIFIST ) ;
3871: LD_STRING ACH_PACIFIST
3873: PPUSH
3874: CALL_OW 543
// if tick < 7 7$00 then
3878: LD_OWVAR 1
3882: PUSH
3883: LD_INT 14700
3885: LESS
3886: IFFALSE 3902
// begin wait ( 3 ) ;
3888: LD_INT 3
3890: PPUSH
3891: CALL_OW 67
// SetAchievement ( ACH_ASPEED_18 ) ;
3895: LD_STRING ACH_ASPEED_18
3897: PPUSH
3898: CALL_OW 543
// end ; AddMedal ( Explosion , 1 ) ;
3902: LD_STRING Explosion
3904: PPUSH
3905: LD_INT 1
3907: PPUSH
3908: CALL_OW 101
// if enteredContaminatedArea then
3912: LD_EXP 5
3916: IFFALSE 3938
// begin m1 := true ;
3918: LD_ADDR_VAR 0 1
3922: PUSH
3923: LD_INT 1
3925: ST_TO_ADDR
// AddMedal ( BioHazard , 1 ) ;
3926: LD_STRING BioHazard
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 101
// end else
3936: GO 3949
// AddMedal ( BioHazard , - 1 ) ;
3938: LD_STRING BioHazard
3940: PPUSH
3941: LD_INT 1
3943: NEG
3944: PPUSH
3945: CALL_OW 101
// if missionTime <= [ 20 20$00 , 15 15$00 , 12 12$00 , 11 11$30 ] [ Difficulty ] then
3949: LD_EXP 11
3953: PUSH
3954: LD_INT 42000
3956: PUSH
3957: LD_INT 31500
3959: PUSH
3960: LD_INT 25200
3962: PUSH
3963: LD_INT 24150
3965: PUSH
3966: EMPTY
3967: LIST
3968: LIST
3969: LIST
3970: LIST
3971: PUSH
3972: LD_OWVAR 67
3976: ARRAY
3977: LESSEQUAL
3978: IFFALSE 4000
// begin m2 := true ;
3980: LD_ADDR_VAR 0 2
3984: PUSH
3985: LD_INT 1
3987: ST_TO_ADDR
// AddMedal ( Speed , 1 ) ;
3988: LD_STRING Speed
3990: PPUSH
3991: LD_INT 1
3993: PPUSH
3994: CALL_OW 101
// end else
3998: GO 4011
// AddMedal ( Speed , - 1 ) ;
4000: LD_STRING Speed
4002: PPUSH
4003: LD_INT 1
4005: NEG
4006: PPUSH
4007: CALL_OW 101
// if Difficulty >= 3 and m1 and m2 then
4011: LD_OWVAR 67
4015: PUSH
4016: LD_INT 3
4018: GREATEREQUAL
4019: PUSH
4020: LD_VAR 0 1
4024: AND
4025: PUSH
4026: LD_VAR 0 2
4030: AND
4031: IFFALSE 4043
// SetAchievementEX ( ACH_AMER , 18 ) ;
4033: LD_STRING ACH_AMER
4035: PPUSH
4036: LD_INT 18
4038: PPUSH
4039: CALL_OW 564
// GiveMedals ( Main ) ;
4043: LD_STRING Main
4045: PPUSH
4046: CALL_OW 102
// RewardPeople ( [ JMM , Burlak ] ) ;
4050: LD_EXP 14
4054: PUSH
4055: LD_EXP 15
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 43
// SaveCharacters ( JMM , 14a_JMM ) ;
4068: LD_EXP 14
4072: PPUSH
4073: LD_STRING 14a_JMM
4075: PPUSH
4076: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4080: LD_EXP 15
4084: PPUSH
4085: LD_STRING 14a_Burlak
4087: PPUSH
4088: CALL_OW 38
// YouWin ;
4092: CALL_OW 103
// end ; end_of_file
4096: PPOPN 2
4098: END
// export Stevens , Powell , baseGuards , sibBomb , guards , vehGuard ; export function PrepareAmerican ; var i , un , tmp ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// uc_side := 1 ;
4105: LD_ADDR_OWVAR 20
4109: PUSH
4110: LD_INT 1
4112: ST_TO_ADDR
// uc_nation := 1 ;
4113: LD_ADDR_OWVAR 21
4117: PUSH
4118: LD_INT 1
4120: ST_TO_ADDR
// InitHc ;
4121: CALL_OW 19
// SetResourceType ( GetBase ( us_depot2 ) , mat_cans , 500 ) ;
4125: LD_INT 34
4127: PPUSH
4128: CALL_OW 274
4132: PPUSH
4133: LD_INT 1
4135: PPUSH
4136: LD_INT 500
4138: PPUSH
4139: CALL_OW 277
// SetResourceType ( GetBase ( us_depot2 ) , mat_siberit , 20 ) ;
4143: LD_INT 34
4145: PPUSH
4146: CALL_OW 274
4150: PPUSH
4151: LD_INT 3
4153: PPUSH
4154: LD_INT 20
4156: PPUSH
4157: CALL_OW 277
// Stevens := NewCharacter ( Stevens ) ;
4161: LD_ADDR_EXP 18
4165: PUSH
4166: LD_STRING Stevens
4168: PPUSH
4169: CALL_OW 25
4173: ST_TO_ADDR
// Powell := NewCharacter ( Powell ) ;
4174: LD_ADDR_EXP 19
4178: PUSH
4179: LD_STRING Powell
4181: PPUSH
4182: CALL_OW 25
4186: ST_TO_ADDR
// PlaceHumanInUnit ( Stevens , us_lab ) ;
4187: LD_EXP 18
4191: PPUSH
4192: LD_INT 1
4194: PPUSH
4195: CALL_OW 52
// vehGuard := [ ] ;
4199: LD_ADDR_EXP 23
4203: PUSH
4204: EMPTY
4205: ST_TO_ADDR
// hc_importance := 0 ;
4206: LD_ADDR_OWVAR 32
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// PrepareVehicle ( us_heavy_tracked , engine_siberite , control_computer , us_siberium_rocket , 100 ) ;
4214: LD_INT 4
4216: PPUSH
4217: LD_INT 3
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 8
4225: PPUSH
4226: LD_INT 100
4228: PPUSH
4229: CALL 31244 0 5
// sibBomb := CreateVehicle ;
4233: LD_ADDR_EXP 21
4237: PUSH
4238: CALL_OW 45
4242: ST_TO_ADDR
// SetDir ( sibBomb , 1 ) ;
4243: LD_EXP 21
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 233
// PlaceUnitXY ( sibBomb , 93 , 74 , false ) ;
4255: LD_EXP 21
4259: PPUSH
4260: LD_INT 93
4262: PPUSH
4263: LD_INT 74
4265: PPUSH
4266: LD_INT 0
4268: PPUSH
4269: CALL_OW 48
// guards := [ ] ;
4273: LD_ADDR_EXP 22
4277: PUSH
4278: EMPTY
4279: ST_TO_ADDR
// for i = 1 to 3 do
4280: LD_ADDR_VAR 0 2
4284: PUSH
4285: DOUBLE
4286: LD_INT 1
4288: DEC
4289: ST_TO_ADDR
4290: LD_INT 3
4292: PUSH
4293: FOR_TO
4294: IFFALSE 4390
// begin PrepareHuman ( false , class_soldier , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4296: LD_INT 0
4298: PPUSH
4299: LD_INT 1
4301: PPUSH
4302: LD_INT 8
4304: PUSH
4305: LD_INT 9
4307: PUSH
4308: LD_INT 10
4310: PUSH
4311: LD_INT 10
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_OWVAR 67
4324: ARRAY
4325: PPUSH
4326: CALL_OW 380
// un := CreateHuman ;
4330: LD_ADDR_VAR 0 3
4334: PUSH
4335: CALL_OW 44
4339: ST_TO_ADDR
// PlaceUnitArea ( un , [ patrol1 , patrol2 , patrol3 ] [ i ] , false ) ;
4340: LD_VAR 0 3
4344: PPUSH
4345: LD_INT 2
4347: PUSH
4348: LD_INT 3
4350: PUSH
4351: LD_INT 4
4353: PUSH
4354: EMPTY
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: LD_VAR 0 2
4363: ARRAY
4364: PPUSH
4365: LD_INT 0
4367: PPUSH
4368: CALL_OW 49
// guards := guards ^ un ;
4372: LD_ADDR_EXP 22
4376: PUSH
4377: LD_EXP 22
4381: PUSH
4382: LD_VAR 0 3
4386: ADD
4387: ST_TO_ADDR
// end ;
4388: GO 4293
4390: POP
4391: POP
// baseGuards := [ ] ;
4392: LD_ADDR_EXP 20
4396: PUSH
4397: EMPTY
4398: ST_TO_ADDR
// for i = 1 to [ 5 , 6 , 7 , 8 ] [ Difficulty ] do
4399: LD_ADDR_VAR 0 2
4403: PUSH
4404: DOUBLE
4405: LD_INT 1
4407: DEC
4408: ST_TO_ADDR
4409: LD_INT 5
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: LD_INT 7
4417: PUSH
4418: LD_INT 8
4420: PUSH
4421: EMPTY
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: PUSH
4427: LD_OWVAR 67
4431: ARRAY
4432: PUSH
4433: FOR_TO
4434: IFFALSE 4584
// begin PrepareSoldier ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4436: LD_INT 0
4438: PPUSH
4439: LD_INT 8
4441: PUSH
4442: LD_INT 9
4444: PUSH
4445: LD_INT 10
4447: PUSH
4448: LD_INT 10
4450: PUSH
4451: EMPTY
4452: LIST
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 381
// un := CreateHuman ;
4467: LD_ADDR_VAR 0 3
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// baseGuards := baseGuards ^ un ;
4477: LD_ADDR_EXP 20
4481: PUSH
4482: LD_EXP 20
4486: PUSH
4487: LD_VAR 0 3
4491: ADD
4492: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_empty ] , [ f_btype , b_bunker ] ] ) ;
4493: LD_ADDR_VAR 0 4
4497: PUSH
4498: LD_INT 22
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 58
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: LD_INT 30
4516: PUSH
4517: LD_INT 32
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: PPUSH
4529: CALL_OW 69
4533: ST_TO_ADDR
// if tmp then
4534: LD_VAR 0 4
4538: IFFALSE 4570
// PlaceHumanInUnit ( un , tmp [ rand ( 1 , tmp ) ] ) else
4540: LD_VAR 0 3
4544: PPUSH
4545: LD_VAR 0 4
4549: PUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_VAR 0 4
4557: PPUSH
4558: CALL_OW 12
4562: ARRAY
4563: PPUSH
4564: CALL_OW 52
4568: GO 4582
// PlaceHumanInUnit ( un , us_bar ) ;
4570: LD_VAR 0 3
4574: PPUSH
4575: LD_INT 51
4577: PPUSH
4578: CALL_OW 52
// end ;
4582: GO 4433
4584: POP
4585: POP
// if Difficulty > 1 then
4586: LD_OWVAR 67
4590: PUSH
4591: LD_INT 1
4593: GREATER
4594: IFFALSE 4642
// begin PrepareHuman ( false , class_sniper , [ 9 , 10 , 10 ] [ Difficulty - 1 ] ) ;
4596: LD_INT 0
4598: PPUSH
4599: LD_INT 5
4601: PPUSH
4602: LD_INT 9
4604: PUSH
4605: LD_INT 10
4607: PUSH
4608: LD_INT 10
4610: PUSH
4611: EMPTY
4612: LIST
4613: LIST
4614: LIST
4615: PUSH
4616: LD_OWVAR 67
4620: PUSH
4621: LD_INT 1
4623: MINUS
4624: ARRAY
4625: PPUSH
4626: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , us_bun1 ) ;
4630: CALL_OW 44
4634: PPUSH
4635: LD_INT 80
4637: PPUSH
4638: CALL_OW 52
// end ; for i = 1 to 3 do
4642: LD_ADDR_VAR 0 2
4646: PUSH
4647: DOUBLE
4648: LD_INT 1
4650: DEC
4651: ST_TO_ADDR
4652: LD_INT 3
4654: PUSH
4655: FOR_TO
4656: IFFALSE 4682
// begin PrepareMechanic ( false , 9 ) ;
4658: LD_INT 0
4660: PPUSH
4661: LD_INT 9
4663: PPUSH
4664: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , us_fac ) ;
4668: CALL_OW 44
4672: PPUSH
4673: LD_INT 43
4675: PPUSH
4676: CALL_OW 52
// end ;
4680: GO 4655
4682: POP
4683: POP
// PlaceHumanInUnit ( CreateHuman , us_ct ) ;
4684: CALL_OW 44
4688: PPUSH
4689: LD_INT 49
4691: PPUSH
4692: CALL_OW 52
// for i = 1 to 1 + Difficulty do
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: DOUBLE
4702: LD_INT 1
4704: DEC
4705: ST_TO_ADDR
4706: LD_INT 1
4708: PUSH
4709: LD_OWVAR 67
4713: PLUS
4714: PUSH
4715: FOR_TO
4716: IFFALSE 4763
// begin PrepareEngineer ( false , [ 8 , 9 , 10 , 10 ] [ Difficulty ] ) ;
4718: LD_INT 0
4720: PPUSH
4721: LD_INT 8
4723: PUSH
4724: LD_INT 9
4726: PUSH
4727: LD_INT 10
4729: PUSH
4730: LD_INT 10
4732: PUSH
4733: EMPTY
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: PUSH
4739: LD_OWVAR 67
4743: ARRAY
4744: PPUSH
4745: CALL_OW 382
// PlaceHumanInUnit ( CreateHuman , us_depot ) ;
4749: CALL_OW 44
4753: PPUSH
4754: LD_INT 5
4756: PPUSH
4757: CALL_OW 52
// end ;
4761: GO 4715
4763: POP
4764: POP
// for i = 1 to 3 do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 3
4777: PUSH
4778: FOR_TO
4779: IFFALSE 4805
// begin PrepareScientist ( false , 10 ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 10
4786: PPUSH
4787: CALL_OW 384
// PlaceHumanInUnit ( CreateHuman , us_lab ) ;
4791: CALL_OW 44
4795: PPUSH
4796: LD_INT 1
4798: PPUSH
4799: CALL_OW 52
// end ;
4803: GO 4778
4805: POP
4806: POP
// end ;
4807: LD_VAR 0 1
4811: RET
// every 0 0$2 trigger guards and not activeBombTest do var i , j , points ;
4812: LD_EXP 22
4816: PUSH
4817: LD_EXP 2
4821: NOT
4822: AND
4823: IFFALSE 5009
4825: GO 4827
4827: DISABLE
4828: LD_INT 0
4830: PPUSH
4831: PPUSH
4832: PPUSH
// begin enable ;
4833: ENABLE
// points := [ [ 204 , 30 ] , [ 165 , 24 ] , [ 195 , 6 ] , [ 223 , 54 ] , [ 214 , 84 ] , [ 206 , 71 ] ] ;
4834: LD_ADDR_VAR 0 3
4838: PUSH
4839: LD_INT 204
4841: PUSH
4842: LD_INT 30
4844: PUSH
4845: EMPTY
4846: LIST
4847: LIST
4848: PUSH
4849: LD_INT 165
4851: PUSH
4852: LD_INT 24
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: PUSH
4859: LD_INT 195
4861: PUSH
4862: LD_INT 6
4864: PUSH
4865: EMPTY
4866: LIST
4867: LIST
4868: PUSH
4869: LD_INT 223
4871: PUSH
4872: LD_INT 54
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 214
4881: PUSH
4882: LD_INT 84
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 206
4891: PUSH
4892: LD_INT 71
4894: PUSH
4895: EMPTY
4896: LIST
4897: LIST
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: LIST
4903: LIST
4904: LIST
4905: LIST
4906: ST_TO_ADDR
// for i in guards do
4907: LD_ADDR_VAR 0 1
4911: PUSH
4912: LD_EXP 22
4916: PUSH
4917: FOR_IN
4918: IFFALSE 5007
// begin if HasTask ( i ) then
4920: LD_VAR 0 1
4924: PPUSH
4925: CALL_OW 314
4929: IFFALSE 4935
// continue else
4931: GO 4917
4933: GO 5005
// begin j := rand ( 1 , 6 ) ;
4935: LD_ADDR_VAR 0 2
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 6
4945: PPUSH
4946: CALL_OW 12
4950: ST_TO_ADDR
// if not See ( 7 , i ) then
4951: LD_INT 7
4953: PPUSH
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 292
4963: NOT
4964: IFFALSE 5005
// ComAgressiveMove ( i , points [ j ] [ 1 ] , points [ j ] [ 2 ] ) ;
4966: LD_VAR 0 1
4970: PPUSH
4971: LD_VAR 0 3
4975: PUSH
4976: LD_VAR 0 2
4980: ARRAY
4981: PUSH
4982: LD_INT 1
4984: ARRAY
4985: PPUSH
4986: LD_VAR 0 3
4990: PUSH
4991: LD_VAR 0 2
4995: ARRAY
4996: PUSH
4997: LD_INT 2
4999: ARRAY
5000: PPUSH
5001: CALL_OW 114
// end ; end ;
5005: GO 4917
5007: POP
5008: POP
// end ;
5009: PPOPN 3
5011: END
// every 0 0$1 trigger vehGuard and not planCaptured do var i ;
5012: LD_EXP 23
5016: PUSH
5017: LD_EXP 7
5021: NOT
5022: AND
5023: IFFALSE 5094
5025: GO 5027
5027: DISABLE
5028: LD_INT 0
5030: PPUSH
// begin enable ;
5031: ENABLE
// for i in vehGuard do
5032: LD_ADDR_VAR 0 1
5036: PUSH
5037: LD_EXP 23
5041: PUSH
5042: FOR_IN
5043: IFFALSE 5092
// if IsOk ( vehGuard ) then
5045: LD_EXP 23
5049: PPUSH
5050: CALL_OW 302
5054: IFFALSE 5090
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 7 ] ) , i ) ) ;
5056: LD_VAR 0 1
5060: PPUSH
5061: LD_INT 22
5063: PUSH
5064: LD_INT 7
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PPUSH
5071: CALL_OW 69
5075: PPUSH
5076: LD_VAR 0 1
5080: PPUSH
5081: CALL_OW 74
5085: PPUSH
5086: CALL_OW 115
5090: GO 5042
5092: POP
5093: POP
// end ;
5094: PPOPN 1
5096: END
// every 9 9$00 trigger bombExploded and IsOk ( us_fac ) and not planCaptured do
5097: LD_EXP 4
5101: PUSH
5102: LD_INT 43
5104: PPUSH
5105: CALL_OW 302
5109: AND
5110: PUSH
5111: LD_EXP 7
5115: NOT
5116: AND
5117: IFFALSE 5165
5119: GO 5121
5121: DISABLE
// begin enable ;
5122: ENABLE
// ComConstruct ( us_fac , us_morphling , engine_siberite , control_remote , [ us_rocket_launcher , us_rocket_launcher , us_laser ] [ rand ( 1 , 3 ) ] ) ;
5123: LD_INT 43
5125: PPUSH
5126: LD_INT 5
5128: PPUSH
5129: LD_INT 3
5131: PPUSH
5132: LD_INT 2
5134: PPUSH
5135: LD_INT 7
5137: PUSH
5138: LD_INT 7
5140: PUSH
5141: LD_INT 9
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 1
5151: PPUSH
5152: LD_INT 3
5154: PPUSH
5155: CALL_OW 12
5159: ARRAY
5160: PPUSH
5161: CALL_OW 125
// end ;
5165: END
// every 1 1$45 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) and not planCaptured do var tmp , b ;
5166: LD_INT 22
5168: PUSH
5169: LD_INT 1
5171: PUSH
5172: EMPTY
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 25
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 50
5188: PUSH
5189: EMPTY
5190: LIST
5191: PUSH
5192: EMPTY
5193: LIST
5194: LIST
5195: LIST
5196: PPUSH
5197: CALL_OW 69
5201: PUSH
5202: LD_EXP 7
5206: NOT
5207: AND
5208: IFFALSE 5437
5210: GO 5212
5212: DISABLE
5213: LD_INT 0
5215: PPUSH
5216: PPUSH
// begin enable ;
5217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] , [ f_ok ] ] ) ;
5218: LD_ADDR_VAR 0 1
5222: PUSH
5223: LD_INT 22
5225: PUSH
5226: LD_INT 1
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: LD_INT 25
5235: PUSH
5236: LD_INT 5
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: PUSH
5243: LD_INT 50
5245: PUSH
5246: EMPTY
5247: LIST
5248: PUSH
5249: EMPTY
5250: LIST
5251: LIST
5252: LIST
5253: PPUSH
5254: CALL_OW 69
5258: ST_TO_ADDR
// if not tmp then
5259: LD_VAR 0 1
5263: NOT
5264: IFFALSE 5268
// exit ;
5266: GO 5437
// b := IsInUnit ( tmp [ 1 ] ) ;
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 1
5277: PUSH
5278: LD_INT 1
5280: ARRAY
5281: PPUSH
5282: CALL_OW 310
5286: ST_TO_ADDR
// if not b or HasTask ( tmp [ 1 ] ) then
5287: LD_VAR 0 2
5291: NOT
5292: PUSH
5293: LD_VAR 0 1
5297: PUSH
5298: LD_INT 1
5300: ARRAY
5301: PPUSH
5302: CALL_OW 314
5306: OR
5307: IFFALSE 5311
// exit ;
5309: GO 5437
// if b = us_bun1 then
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 80
5318: EQUAL
5319: IFFALSE 5380
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5321: LD_VAR 0 1
5325: PUSH
5326: LD_INT 1
5328: ARRAY
5329: PPUSH
5330: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 27 , 44 ) ;
5334: LD_VAR 0 1
5338: PUSH
5339: LD_INT 1
5341: ARRAY
5342: PPUSH
5343: LD_INT 27
5345: PPUSH
5346: LD_INT 44
5348: PPUSH
5349: CALL_OW 174
// if IsOk ( us_bun2 ) then
5353: LD_INT 55
5355: PPUSH
5356: CALL_OW 302
5360: IFFALSE 5378
// AddComEnterUnit ( tmp [ 1 ] , us_bun2 ) ;
5362: LD_VAR 0 1
5366: PUSH
5367: LD_INT 1
5369: ARRAY
5370: PPUSH
5371: LD_INT 55
5373: PPUSH
5374: CALL_OW 180
// end else
5378: GO 5437
// begin ComExitBuilding ( tmp [ 1 ] ) ;
5380: LD_VAR 0 1
5384: PUSH
5385: LD_INT 1
5387: ARRAY
5388: PPUSH
5389: CALL_OW 122
// AddComAgressiveMove ( tmp [ 1 ] , 92 , 51 ) ;
5393: LD_VAR 0 1
5397: PUSH
5398: LD_INT 1
5400: ARRAY
5401: PPUSH
5402: LD_INT 92
5404: PPUSH
5405: LD_INT 51
5407: PPUSH
5408: CALL_OW 174
// if IsOk ( us_bun1 ) then
5412: LD_INT 80
5414: PPUSH
5415: CALL_OW 302
5419: IFFALSE 5437
// AddComEnterUnit ( tmp [ 1 ] , us_bun1 ) ;
5421: LD_VAR 0 1
5425: PUSH
5426: LD_INT 1
5428: ARRAY
5429: PPUSH
5430: LD_INT 80
5432: PPUSH
5433: CALL_OW 180
// end ; end ;
5437: PPOPN 2
5439: END
// every 0 0$1 trigger not planCaptured and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , tmp , tmp2 , b ;
5440: LD_EXP 7
5444: NOT
5445: PUSH
5446: LD_INT 9
5448: PPUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 1
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 21
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: LD_INT 3
5471: PUSH
5472: LD_INT 24
5474: PUSH
5475: LD_INT 1000
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: PUSH
5486: EMPTY
5487: LIST
5488: LIST
5489: LIST
5490: PPUSH
5491: CALL_OW 70
5495: AND
5496: IFFALSE 5907
5498: GO 5500
5500: DISABLE
5501: LD_INT 0
5503: PPUSH
5504: PPUSH
5505: PPUSH
5506: PPUSH
// begin enable ;
5507: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5508: LD_ADDR_VAR 0 2
5512: PUSH
5513: LD_INT 22
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 25
5525: PUSH
5526: LD_INT 2
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: PUSH
5533: LD_INT 24
5535: PUSH
5536: LD_INT 1000
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 69
5552: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5553: LD_ADDR_VAR 0 3
5557: PUSH
5558: LD_INT 22
5560: PUSH
5561: LD_INT 1
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PUSH
5568: LD_INT 25
5570: PUSH
5571: LD_INT 2
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 3
5580: PUSH
5581: LD_INT 24
5583: PUSH
5584: LD_INT 750
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: EMPTY
5592: LIST
5593: LIST
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: PPUSH
5600: CALL_OW 69
5604: ST_TO_ADDR
// b := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) diff us_lab ;
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_INT 9
5612: PPUSH
5613: LD_INT 22
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 21
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 3
5635: PUSH
5636: LD_INT 24
5638: PUSH
5639: LD_INT 1000
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: PUSH
5646: EMPTY
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PPUSH
5655: CALL_OW 70
5659: PUSH
5660: LD_INT 1
5662: DIFF
5663: ST_TO_ADDR
// if not tmp and not tmp2 then
5664: LD_VAR 0 2
5668: NOT
5669: PUSH
5670: LD_VAR 0 3
5674: NOT
5675: AND
5676: IFFALSE 5680
// exit ;
5678: GO 5907
// if tmp and b then
5680: LD_VAR 0 2
5684: PUSH
5685: LD_VAR 0 4
5689: AND
5690: IFFALSE 5820
// for i in tmp do
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 2
5701: PUSH
5702: FOR_IN
5703: IFFALSE 5818
// begin if GetTag ( i ) = 1 and GetLives ( i ) < 1000 then
5705: LD_VAR 0 1
5709: PPUSH
5710: CALL_OW 110
5714: PUSH
5715: LD_INT 1
5717: EQUAL
5718: PUSH
5719: LD_VAR 0 1
5723: PPUSH
5724: CALL_OW 256
5728: PUSH
5729: LD_INT 1000
5731: LESS
5732: AND
5733: IFFALSE 5739
// continue else
5735: GO 5702
5737: GO 5766
// if GetTag ( i ) = 1 then
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 110
5748: PUSH
5749: LD_INT 1
5751: EQUAL
5752: IFFALSE 5766
// SetTag ( i , 0 ) ;
5754: LD_VAR 0 1
5758: PPUSH
5759: LD_INT 0
5761: PPUSH
5762: CALL_OW 109
// if IsInUnit ( i ) then
5766: LD_VAR 0 1
5770: PPUSH
5771: CALL_OW 310
5775: IFFALSE 5786
// ComExitBuilding ( i ) ;
5777: LD_VAR 0 1
5781: PPUSH
5782: CALL_OW 122
// if not HasTask ( i ) then
5786: LD_VAR 0 1
5790: PPUSH
5791: CALL_OW 314
5795: NOT
5796: IFFALSE 5816
// AddComRepairBuilding ( i , b [ 1 ] ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: CALL_OW 190
// end ;
5816: GO 5702
5818: POP
5819: POP
// if tmp2 then
5820: LD_VAR 0 3
5824: IFFALSE 5907
// for i in tmp2 do
5826: LD_ADDR_VAR 0 1
5830: PUSH
5831: LD_VAR 0 3
5835: PUSH
5836: FOR_IN
5837: IFFALSE 5905
// begin if not GetTag ( i ) = 1 then
5839: LD_VAR 0 1
5843: PPUSH
5844: CALL_OW 110
5848: PUSH
5849: LD_INT 1
5851: EQUAL
5852: NOT
5853: IFFALSE 5867
// SetTag ( i , 1 ) ;
5855: LD_VAR 0 1
5859: PPUSH
5860: LD_INT 1
5862: PPUSH
5863: CALL_OW 109
// if GetDistUnitXY ( i , 88 , 75 ) > 6 then
5867: LD_VAR 0 1
5871: PPUSH
5872: LD_INT 88
5874: PPUSH
5875: LD_INT 75
5877: PPUSH
5878: CALL_OW 297
5882: PUSH
5883: LD_INT 6
5885: GREATER
5886: IFFALSE 5903
// ComMoveXY ( i , 88 , 75 ) ;
5888: LD_VAR 0 1
5892: PPUSH
5893: LD_INT 88
5895: PPUSH
5896: LD_INT 75
5898: PPUSH
5899: CALL_OW 111
// end ;
5903: GO 5836
5905: POP
5906: POP
// end ;
5907: PPOPN 4
5909: END
// every 0 0$1 trigger not planCaptured and stevensTimer and FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var i , sci , tmp ;
5910: LD_EXP 7
5914: NOT
5915: PUSH
5916: LD_EXP 9
5920: AND
5921: PUSH
5922: LD_INT 9
5924: PPUSH
5925: LD_INT 22
5927: PUSH
5928: LD_INT 1
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 21
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: LD_INT 3
5947: PUSH
5948: LD_INT 24
5950: PUSH
5951: LD_INT 1000
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: PPUSH
5967: CALL_OW 70
5971: AND
5972: IFFALSE 6145
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
// begin enable ;
5982: ENABLE
// sci := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 1
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 25
6000: PUSH
6001: LD_INT 4
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 69
6016: ST_TO_ADDR
// tmp := FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6017: LD_ADDR_VAR 0 3
6021: PUSH
6022: LD_INT 9
6024: PPUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 21
6037: PUSH
6038: LD_INT 1
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: LD_INT 3
6047: PUSH
6048: LD_INT 24
6050: PUSH
6051: LD_INT 1000
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PUSH
6058: EMPTY
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 70
6071: ST_TO_ADDR
// if not sci or not tmp then
6072: LD_VAR 0 2
6076: NOT
6077: PUSH
6078: LD_VAR 0 3
6082: NOT
6083: OR
6084: IFFALSE 6088
// exit ;
6086: GO 6145
// for i in sci do
6088: LD_ADDR_VAR 0 1
6092: PUSH
6093: LD_VAR 0 2
6097: PUSH
6098: FOR_IN
6099: IFFALSE 6143
// if IsInUnit ( i ) then
6101: LD_VAR 0 1
6105: PPUSH
6106: CALL_OW 310
6110: IFFALSE 6123
// ComExitBuilding ( i ) else
6112: LD_VAR 0 1
6116: PPUSH
6117: CALL_OW 122
6121: GO 6141
// ComHeal ( i , tmp [ 1 ] ) ;
6123: LD_VAR 0 1
6127: PPUSH
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: CALL_OW 128
6141: GO 6098
6143: POP
6144: POP
// end ;
6145: PPOPN 3
6147: END
// every 0 0$1 trigger not planCaptured and stevensTimer and IsOk ( us_lab ) and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do var i ;
6148: LD_EXP 7
6152: NOT
6153: PUSH
6154: LD_EXP 9
6158: AND
6159: PUSH
6160: LD_INT 1
6162: PPUSH
6163: CALL_OW 302
6167: AND
6168: PUSH
6169: LD_INT 9
6171: PPUSH
6172: LD_INT 22
6174: PUSH
6175: LD_INT 1
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: LD_INT 21
6184: PUSH
6185: LD_INT 1
6187: PUSH
6188: EMPTY
6189: LIST
6190: LIST
6191: PUSH
6192: LD_INT 3
6194: PUSH
6195: LD_INT 24
6197: PUSH
6198: LD_INT 1000
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: NOT
6219: AND
6220: PUSH
6221: LD_INT 22
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PUSH
6231: LD_INT 25
6233: PUSH
6234: LD_INT 4
6236: PUSH
6237: EMPTY
6238: LIST
6239: LIST
6240: PUSH
6241: LD_INT 56
6243: PUSH
6244: EMPTY
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: AND
6257: IFFALSE 6350
6259: GO 6261
6261: DISABLE
6262: LD_INT 0
6264: PPUSH
// begin enable ;
6265: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_outside ] ] ) do
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 22
6273: PUSH
6274: LD_INT 1
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 4
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 56
6293: PUSH
6294: EMPTY
6295: LIST
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: LIST
6301: PPUSH
6302: CALL_OW 69
6306: PUSH
6307: FOR_IN
6308: IFFALSE 6348
// if not GetTag ( i ) and not HasTask ( i ) then
6310: LD_VAR 0 1
6314: PPUSH
6315: CALL_OW 110
6319: NOT
6320: PUSH
6321: LD_VAR 0 1
6325: PPUSH
6326: CALL_OW 314
6330: NOT
6331: AND
6332: IFFALSE 6346
// ComEnterUnit ( i , us_lab ) ;
6334: LD_VAR 0 1
6338: PPUSH
6339: LD_INT 1
6341: PPUSH
6342: CALL_OW 120
6346: GO 6307
6348: POP
6349: POP
// end ;
6350: PPOPN 1
6352: END
// every 0 0$1 trigger not planCaptured and not FilterUnitsInArea ( usBase , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do var i ;
6353: LD_EXP 7
6357: NOT
6358: PUSH
6359: LD_INT 9
6361: PPUSH
6362: LD_INT 22
6364: PUSH
6365: LD_INT 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 3
6384: PUSH
6385: LD_INT 24
6387: PUSH
6388: LD_INT 1000
6390: PUSH
6391: EMPTY
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: NOT
6409: AND
6410: PUSH
6411: LD_INT 22
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 25
6423: PUSH
6424: LD_INT 2
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 56
6433: PUSH
6434: EMPTY
6435: LIST
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: LIST
6441: PPUSH
6442: CALL_OW 69
6446: AND
6447: IFFALSE 6540
6449: GO 6451
6451: DISABLE
6452: LD_INT 0
6454: PPUSH
// begin enable ;
6455: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] , [ f_outside ] ] ) do
6456: LD_ADDR_VAR 0 1
6460: PUSH
6461: LD_INT 22
6463: PUSH
6464: LD_INT 1
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: PUSH
6471: LD_INT 25
6473: PUSH
6474: LD_INT 2
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: LD_INT 56
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: LIST
6491: PPUSH
6492: CALL_OW 69
6496: PUSH
6497: FOR_IN
6498: IFFALSE 6538
// if not HasTask ( i ) and not GetTag ( i ) then
6500: LD_VAR 0 1
6504: PPUSH
6505: CALL_OW 314
6509: NOT
6510: PUSH
6511: LD_VAR 0 1
6515: PPUSH
6516: CALL_OW 110
6520: NOT
6521: AND
6522: IFFALSE 6536
// ComEnterUnit ( i , us_depot ) ;
6524: LD_VAR 0 1
6528: PPUSH
6529: LD_INT 5
6531: PPUSH
6532: CALL_OW 120
6536: GO 6497
6538: POP
6539: POP
// end ;
6540: PPOPN 1
6542: END
// every 0 0$1 trigger ( stevensTimer <= 0 0$00 or IsDead ( Stevens ) ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) do
6543: LD_EXP 9
6547: PUSH
6548: LD_INT 0
6550: LESSEQUAL
6551: PUSH
6552: LD_EXP 18
6556: PPUSH
6557: CALL_OW 301
6561: OR
6562: PUSH
6563: LD_INT 22
6565: PUSH
6566: LD_INT 1
6568: PUSH
6569: EMPTY
6570: LIST
6571: LIST
6572: PUSH
6573: LD_INT 25
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: EMPTY
6584: LIST
6585: LIST
6586: PPUSH
6587: CALL_OW 69
6591: AND
6592: IFFALSE 6633
6594: GO 6596
6596: DISABLE
// ComDismantle ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) , us_lab ) ;
6597: LD_INT 22
6599: PUSH
6600: LD_INT 1
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 25
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PPUSH
6621: CALL_OW 69
6625: PPUSH
6626: LD_INT 1
6628: PPUSH
6629: CALL_OW 167
6633: END
// every 0 0$4 trigger not planCaptured and FilterUnitsInArea ( usBaseCriticalArea , [ f_side , 7 ] ) do var i ;
6634: LD_EXP 7
6638: NOT
6639: PUSH
6640: LD_INT 7
6642: PPUSH
6643: LD_INT 22
6645: PUSH
6646: LD_INT 7
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 70
6657: AND
6658: IFFALSE 6749
6660: GO 6662
6662: DISABLE
6663: LD_INT 0
6665: PPUSH
// begin wait ( 0 0$2 ) ;
6666: LD_INT 70
6668: PPUSH
6669: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) do
6673: LD_ADDR_VAR 0 1
6677: PUSH
6678: LD_INT 22
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 25
6690: PUSH
6691: LD_INT 1
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6747
// begin if IsInUnit ( i ) then
6710: LD_VAR 0 1
6714: PPUSH
6715: CALL_OW 310
6719: IFFALSE 6730
// ComExitBuilding ( i ) ;
6721: LD_VAR 0 1
6725: PPUSH
6726: CALL_OW 122
// AddComAgressiveMove ( i , 92 , 78 ) ;
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 92
6737: PPUSH
6738: LD_INT 78
6740: PPUSH
6741: CALL_OW 174
// end ;
6745: GO 6707
6747: POP
6748: POP
// end ; end_of_file
6749: PPOPN 1
6751: END
// on SiberiteRocketExploded ( sibRocket , x , y ) do OnBombExploded ( sibRocket , x , y ) ;
6752: LD_VAR 0 1
6756: PPUSH
6757: LD_VAR 0 2
6761: PPUSH
6762: LD_VAR 0 3
6766: PPUSH
6767: CALL 1579 0 3
6771: PPOPN 3
6773: END
// on UnitGoesToRed ( un ) do begin if GetClass ( JMM ) = 4 or GetClass ( Burlak ) = 4 or FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_building ] ] ) then
6774: LD_EXP 14
6778: PPUSH
6779: CALL_OW 257
6783: PUSH
6784: LD_INT 4
6786: EQUAL
6787: PUSH
6788: LD_EXP 15
6792: PPUSH
6793: CALL_OW 257
6797: PUSH
6798: LD_INT 4
6800: EQUAL
6801: OR
6802: PUSH
6803: LD_INT 22
6805: PUSH
6806: LD_INT 7
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: LD_INT 21
6815: PUSH
6816: LD_INT 3
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PPUSH
6827: CALL_OW 69
6831: OR
6832: IFFALSE 6836
// exit ;
6834: GO 6874
// if un = JMM then
6836: LD_VAR 0 1
6840: PUSH
6841: LD_EXP 14
6845: EQUAL
6846: IFFALSE 6855
// YouLost ( JMM ) ;
6848: LD_STRING JMM
6850: PPUSH
6851: CALL_OW 104
// if un = Burlak then
6855: LD_VAR 0 1
6859: PUSH
6860: LD_EXP 15
6864: EQUAL
6865: IFFALSE 6874
// YouLost ( Burlak ) ;
6867: LD_STRING Burlak
6869: PPUSH
6870: CALL_OW 104
// end ;
6874: PPOPN 1
6876: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
6877: LD_VAR 0 1
6881: PPUSH
6882: CALL 21740 0 1
// if un = JMM then
6886: LD_VAR 0 1
6890: PUSH
6891: LD_EXP 14
6895: EQUAL
6896: IFFALSE 6905
// YouLost ( JMM ) ;
6898: LD_STRING JMM
6900: PPUSH
6901: CALL_OW 104
// if un = Burlak then
6905: LD_VAR 0 1
6909: PUSH
6910: LD_EXP 15
6914: EQUAL
6915: IFFALSE 6924
// YouLost ( Burlak ) ;
6917: LD_STRING Burlak
6919: PPUSH
6920: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_type , unit_human ] , [ f_nation , 1 ] ] ) then
6924: LD_VAR 0 1
6928: PUSH
6929: LD_INT 21
6931: PUSH
6932: LD_INT 1
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 23
6941: PUSH
6942: LD_INT 1
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PPUSH
6953: CALL_OW 69
6957: IN
6958: IFFALSE 6974
// killCounter := killCounter + 1 ;
6960: LD_ADDR_EXP 12
6964: PUSH
6965: LD_EXP 12
6969: PUSH
6970: LD_INT 1
6972: PLUS
6973: ST_TO_ADDR
// end ;
6974: PPOPN 1
6976: END
// on UnitDestroyed_Extra ( un , killer_side , killer_unit ) do begin if killer_side = 7 and un in FilterAllUnits ( [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
6977: LD_VAR 0 2
6981: PUSH
6982: LD_INT 7
6984: EQUAL
6985: PUSH
6986: LD_VAR 0 1
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 30
6996: PUSH
6997: LD_INT 31
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 30
7006: PUSH
7007: LD_INT 32
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 30
7016: PUSH
7017: LD_INT 33
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PPUSH
7030: CALL_OW 69
7034: IN
7035: AND
7036: IFFALSE 7052
// bunkerCounter := bunkerCounter + 1 ;
7038: LD_ADDR_EXP 13
7042: PUSH
7043: LD_EXP 13
7047: PUSH
7048: LD_INT 1
7050: PLUS
7051: ST_TO_ADDR
// end ;
7052: PPOPN 3
7054: END
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 7 then
7055: LD_VAR 0 1
7059: PPUSH
7060: CALL_OW 255
7064: PUSH
7065: LD_INT 7
7067: EQUAL
7068: IFFALSE 7078
// artifactPickedUp := true ;
7070: LD_ADDR_EXP 6
7074: PUSH
7075: LD_INT 1
7077: ST_TO_ADDR
// end ;
7078: PPOPN 2
7080: END
// on ArtifactUnloaded ( cargo , artifact ) do artifactPickedUp := false ;
7081: LD_ADDR_EXP 6
7085: PUSH
7086: LD_INT 0
7088: ST_TO_ADDR
7089: PPOPN 2
7091: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
7092: LD_VAR 0 1
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: CALL 21862 0 2
// if GetSide ( vehicle ) <> 1 then
7106: LD_VAR 0 1
7110: PPUSH
7111: CALL_OW 255
7115: PUSH
7116: LD_INT 1
7118: NONEQUAL
7119: IFFALSE 7123
// exit ;
7121: GO 7170
// wait ( 0 0$5 ) ;
7123: LD_INT 175
7125: PPUSH
7126: CALL_OW 67
// if GetControl ( vehicle ) = control_remote then
7130: LD_VAR 0 1
7134: PPUSH
7135: CALL_OW 263
7139: PUSH
7140: LD_INT 2
7142: EQUAL
7143: IFFALSE 7154
// Connect ( vehicle ) ;
7145: LD_VAR 0 1
7149: PPUSH
7150: CALL 34337 0 1
// vehGuard := vehGuard ^ vehicle ;
7154: LD_ADDR_EXP 23
7158: PUSH
7159: LD_EXP 23
7163: PUSH
7164: LD_VAR 0 1
7168: ADD
7169: ST_TO_ADDR
// end ;
7170: PPOPN 2
7172: END
// on BuildingCaptured ( captured , old_side , unit ) do begin if captured = us_lab and not planCaptured then
7173: LD_VAR 0 1
7177: PUSH
7178: LD_INT 1
7180: EQUAL
7181: PUSH
7182: LD_EXP 7
7186: NOT
7187: AND
7188: IFFALSE 7223
// begin planCaptured := true ;
7190: LD_ADDR_EXP 7
7194: PUSH
7195: LD_INT 1
7197: ST_TO_ADDR
// ChangeMissionObjectives ( MEnd ) ;
7198: LD_STRING MEnd
7200: PPUSH
7201: CALL_OW 337
// canEnd := true ;
7205: LD_ADDR_EXP 10
7209: PUSH
7210: LD_INT 1
7212: ST_TO_ADDR
// missionTime := tick ;
7213: LD_ADDR_EXP 11
7217: PUSH
7218: LD_OWVAR 1
7222: ST_TO_ADDR
// end ; end ;
7223: PPOPN 3
7225: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
7226: LD_VAR 0 1
7230: PPUSH
7231: CALL 21846 0 1
// end ; end_of_file
7235: PPOPN 1
7237: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
7238: LD_INT 0
7240: PPUSH
// ar_miner := 81 ;
7241: LD_ADDR_EXP 31
7245: PUSH
7246: LD_INT 81
7248: ST_TO_ADDR
// ar_crane := 88 ;
7249: LD_ADDR_EXP 30
7253: PUSH
7254: LD_INT 88
7256: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
7257: LD_ADDR_EXP 25
7261: PUSH
7262: LD_INT 89
7264: ST_TO_ADDR
// us_hack := 99 ;
7265: LD_ADDR_EXP 26
7269: PUSH
7270: LD_INT 99
7272: ST_TO_ADDR
// us_artillery := 97 ;
7273: LD_ADDR_EXP 27
7277: PUSH
7278: LD_INT 97
7280: ST_TO_ADDR
// ar_bio_bomb := 91 ;
7281: LD_ADDR_EXP 28
7285: PUSH
7286: LD_INT 91
7288: ST_TO_ADDR
// ar_mortar := 92 ;
7289: LD_ADDR_EXP 29
7293: PUSH
7294: LD_INT 92
7296: ST_TO_ADDR
// ru_radar := 98 ;
7297: LD_ADDR_EXP 24
7301: PUSH
7302: LD_INT 98
7304: ST_TO_ADDR
// tech_Artillery := 80 ;
7305: LD_ADDR_EXP 32
7309: PUSH
7310: LD_INT 80
7312: ST_TO_ADDR
// tech_RadMat := 81 ;
7313: LD_ADDR_EXP 33
7317: PUSH
7318: LD_INT 81
7320: ST_TO_ADDR
// tech_BasicTools := 82 ;
7321: LD_ADDR_EXP 34
7325: PUSH
7326: LD_INT 82
7328: ST_TO_ADDR
// tech_Cargo := 83 ;
7329: LD_ADDR_EXP 35
7333: PUSH
7334: LD_INT 83
7336: ST_TO_ADDR
// tech_Track := 84 ;
7337: LD_ADDR_EXP 36
7341: PUSH
7342: LD_INT 84
7344: ST_TO_ADDR
// tech_Crane := 85 ;
7345: LD_ADDR_EXP 37
7349: PUSH
7350: LD_INT 85
7352: ST_TO_ADDR
// tech_Bulldozer := 86 ;
7353: LD_ADDR_EXP 38
7357: PUSH
7358: LD_INT 86
7360: ST_TO_ADDR
// tech_Hovercraft := 87 ;
7361: LD_ADDR_EXP 39
7365: PUSH
7366: LD_INT 87
7368: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
7369: LD_ADDR_EXP 40
7373: PUSH
7374: LD_INT 88
7376: ST_TO_ADDR
// class_mastodont := 31 ;
7377: LD_ADDR_EXP 41
7381: PUSH
7382: LD_INT 31
7384: ST_TO_ADDR
// class_horse := 21 ;
7385: LD_ADDR_EXP 42
7389: PUSH
7390: LD_INT 21
7392: ST_TO_ADDR
// end ;
7393: LD_VAR 0 1
7397: RET
// every 1 do
7398: GO 7400
7400: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
7401: CALL 7238 0 0
7405: END
// every 0 0$1 do
7406: GO 7408
7408: DISABLE
// begin enable ;
7409: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7410: LD_STRING updateTimer(
7412: PUSH
7413: LD_OWVAR 1
7417: STR
7418: PUSH
7419: LD_STRING );
7421: STR
7422: PPUSH
7423: CALL_OW 559
// end ;
7427: END
// export function SOS_MapStart ( ) ; begin
7428: LD_INT 0
7430: PPUSH
// if streamModeActive then
7431: LD_EXP 43
7435: IFFALSE 7444
// DefineStreamItems ( true ) ;
7437: LD_INT 1
7439: PPUSH
7440: CALL 9094 0 1
// UpdateFactoryWaypoints ( ) ;
7444: CALL 22678 0 0
// end ;
7448: LD_VAR 0 1
7452: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7453: LD_INT 0
7455: PPUSH
// if p2 = 100 then
7456: LD_VAR 0 2
7460: PUSH
7461: LD_INT 100
7463: EQUAL
7464: IFFALSE 8467
// begin if not StreamModeActive then
7466: LD_EXP 43
7470: NOT
7471: IFFALSE 7481
// StreamModeActive := true ;
7473: LD_ADDR_EXP 43
7477: PUSH
7478: LD_INT 1
7480: ST_TO_ADDR
// if p3 = 0 then
7481: LD_VAR 0 3
7485: PUSH
7486: LD_INT 0
7488: EQUAL
7489: IFFALSE 7495
// InitStreamMode ;
7491: CALL 8630 0 0
// if p3 = 1 then
7495: LD_VAR 0 3
7499: PUSH
7500: LD_INT 1
7502: EQUAL
7503: IFFALSE 7513
// sRocket := true ;
7505: LD_ADDR_EXP 48
7509: PUSH
7510: LD_INT 1
7512: ST_TO_ADDR
// if p3 = 2 then
7513: LD_VAR 0 3
7517: PUSH
7518: LD_INT 2
7520: EQUAL
7521: IFFALSE 7531
// sSpeed := true ;
7523: LD_ADDR_EXP 47
7527: PUSH
7528: LD_INT 1
7530: ST_TO_ADDR
// if p3 = 3 then
7531: LD_VAR 0 3
7535: PUSH
7536: LD_INT 3
7538: EQUAL
7539: IFFALSE 7549
// sEngine := true ;
7541: LD_ADDR_EXP 49
7545: PUSH
7546: LD_INT 1
7548: ST_TO_ADDR
// if p3 = 4 then
7549: LD_VAR 0 3
7553: PUSH
7554: LD_INT 4
7556: EQUAL
7557: IFFALSE 7567
// sSpec := true ;
7559: LD_ADDR_EXP 46
7563: PUSH
7564: LD_INT 1
7566: ST_TO_ADDR
// if p3 = 5 then
7567: LD_VAR 0 3
7571: PUSH
7572: LD_INT 5
7574: EQUAL
7575: IFFALSE 7585
// sLevel := true ;
7577: LD_ADDR_EXP 50
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
// if p3 = 6 then
7585: LD_VAR 0 3
7589: PUSH
7590: LD_INT 6
7592: EQUAL
7593: IFFALSE 7603
// sArmoury := true ;
7595: LD_ADDR_EXP 51
7599: PUSH
7600: LD_INT 1
7602: ST_TO_ADDR
// if p3 = 7 then
7603: LD_VAR 0 3
7607: PUSH
7608: LD_INT 7
7610: EQUAL
7611: IFFALSE 7621
// sRadar := true ;
7613: LD_ADDR_EXP 52
7617: PUSH
7618: LD_INT 1
7620: ST_TO_ADDR
// if p3 = 8 then
7621: LD_VAR 0 3
7625: PUSH
7626: LD_INT 8
7628: EQUAL
7629: IFFALSE 7639
// sBunker := true ;
7631: LD_ADDR_EXP 53
7635: PUSH
7636: LD_INT 1
7638: ST_TO_ADDR
// if p3 = 9 then
7639: LD_VAR 0 3
7643: PUSH
7644: LD_INT 9
7646: EQUAL
7647: IFFALSE 7657
// sHack := true ;
7649: LD_ADDR_EXP 54
7653: PUSH
7654: LD_INT 1
7656: ST_TO_ADDR
// if p3 = 10 then
7657: LD_VAR 0 3
7661: PUSH
7662: LD_INT 10
7664: EQUAL
7665: IFFALSE 7675
// sFire := true ;
7667: LD_ADDR_EXP 55
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// if p3 = 11 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 11
7682: EQUAL
7683: IFFALSE 7693
// sRefresh := true ;
7685: LD_ADDR_EXP 56
7689: PUSH
7690: LD_INT 1
7692: ST_TO_ADDR
// if p3 = 12 then
7693: LD_VAR 0 3
7697: PUSH
7698: LD_INT 12
7700: EQUAL
7701: IFFALSE 7711
// sExp := true ;
7703: LD_ADDR_EXP 57
7707: PUSH
7708: LD_INT 1
7710: ST_TO_ADDR
// if p3 = 13 then
7711: LD_VAR 0 3
7715: PUSH
7716: LD_INT 13
7718: EQUAL
7719: IFFALSE 7729
// sDepot := true ;
7721: LD_ADDR_EXP 58
7725: PUSH
7726: LD_INT 1
7728: ST_TO_ADDR
// if p3 = 14 then
7729: LD_VAR 0 3
7733: PUSH
7734: LD_INT 14
7736: EQUAL
7737: IFFALSE 7747
// sFlag := true ;
7739: LD_ADDR_EXP 59
7743: PUSH
7744: LD_INT 1
7746: ST_TO_ADDR
// if p3 = 15 then
7747: LD_VAR 0 3
7751: PUSH
7752: LD_INT 15
7754: EQUAL
7755: IFFALSE 7765
// sKamikadze := true ;
7757: LD_ADDR_EXP 67
7761: PUSH
7762: LD_INT 1
7764: ST_TO_ADDR
// if p3 = 16 then
7765: LD_VAR 0 3
7769: PUSH
7770: LD_INT 16
7772: EQUAL
7773: IFFALSE 7783
// sTroll := true ;
7775: LD_ADDR_EXP 68
7779: PUSH
7780: LD_INT 1
7782: ST_TO_ADDR
// if p3 = 17 then
7783: LD_VAR 0 3
7787: PUSH
7788: LD_INT 17
7790: EQUAL
7791: IFFALSE 7801
// sSlow := true ;
7793: LD_ADDR_EXP 69
7797: PUSH
7798: LD_INT 1
7800: ST_TO_ADDR
// if p3 = 18 then
7801: LD_VAR 0 3
7805: PUSH
7806: LD_INT 18
7808: EQUAL
7809: IFFALSE 7819
// sLack := true ;
7811: LD_ADDR_EXP 70
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
// if p3 = 19 then
7819: LD_VAR 0 3
7823: PUSH
7824: LD_INT 19
7826: EQUAL
7827: IFFALSE 7837
// sTank := true ;
7829: LD_ADDR_EXP 72
7833: PUSH
7834: LD_INT 1
7836: ST_TO_ADDR
// if p3 = 20 then
7837: LD_VAR 0 3
7841: PUSH
7842: LD_INT 20
7844: EQUAL
7845: IFFALSE 7855
// sRemote := true ;
7847: LD_ADDR_EXP 73
7851: PUSH
7852: LD_INT 1
7854: ST_TO_ADDR
// if p3 = 21 then
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 21
7862: EQUAL
7863: IFFALSE 7873
// sPowell := true ;
7865: LD_ADDR_EXP 74
7869: PUSH
7870: LD_INT 1
7872: ST_TO_ADDR
// if p3 = 22 then
7873: LD_VAR 0 3
7877: PUSH
7878: LD_INT 22
7880: EQUAL
7881: IFFALSE 7891
// sTeleport := true ;
7883: LD_ADDR_EXP 77
7887: PUSH
7888: LD_INT 1
7890: ST_TO_ADDR
// if p3 = 23 then
7891: LD_VAR 0 3
7895: PUSH
7896: LD_INT 23
7898: EQUAL
7899: IFFALSE 7909
// sOilTower := true ;
7901: LD_ADDR_EXP 79
7905: PUSH
7906: LD_INT 1
7908: ST_TO_ADDR
// if p3 = 24 then
7909: LD_VAR 0 3
7913: PUSH
7914: LD_INT 24
7916: EQUAL
7917: IFFALSE 7927
// sShovel := true ;
7919: LD_ADDR_EXP 80
7923: PUSH
7924: LD_INT 1
7926: ST_TO_ADDR
// if p3 = 25 then
7927: LD_VAR 0 3
7931: PUSH
7932: LD_INT 25
7934: EQUAL
7935: IFFALSE 7945
// sSheik := true ;
7937: LD_ADDR_EXP 81
7941: PUSH
7942: LD_INT 1
7944: ST_TO_ADDR
// if p3 = 26 then
7945: LD_VAR 0 3
7949: PUSH
7950: LD_INT 26
7952: EQUAL
7953: IFFALSE 7963
// sEarthquake := true ;
7955: LD_ADDR_EXP 83
7959: PUSH
7960: LD_INT 1
7962: ST_TO_ADDR
// if p3 = 27 then
7963: LD_VAR 0 3
7967: PUSH
7968: LD_INT 27
7970: EQUAL
7971: IFFALSE 7981
// sAI := true ;
7973: LD_ADDR_EXP 84
7977: PUSH
7978: LD_INT 1
7980: ST_TO_ADDR
// if p3 = 28 then
7981: LD_VAR 0 3
7985: PUSH
7986: LD_INT 28
7988: EQUAL
7989: IFFALSE 7999
// sCargo := true ;
7991: LD_ADDR_EXP 87
7995: PUSH
7996: LD_INT 1
7998: ST_TO_ADDR
// if p3 = 29 then
7999: LD_VAR 0 3
8003: PUSH
8004: LD_INT 29
8006: EQUAL
8007: IFFALSE 8017
// sDLaser := true ;
8009: LD_ADDR_EXP 88
8013: PUSH
8014: LD_INT 1
8016: ST_TO_ADDR
// if p3 = 30 then
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 30
8024: EQUAL
8025: IFFALSE 8035
// sExchange := true ;
8027: LD_ADDR_EXP 89
8031: PUSH
8032: LD_INT 1
8034: ST_TO_ADDR
// if p3 = 31 then
8035: LD_VAR 0 3
8039: PUSH
8040: LD_INT 31
8042: EQUAL
8043: IFFALSE 8053
// sFac := true ;
8045: LD_ADDR_EXP 90
8049: PUSH
8050: LD_INT 1
8052: ST_TO_ADDR
// if p3 = 32 then
8053: LD_VAR 0 3
8057: PUSH
8058: LD_INT 32
8060: EQUAL
8061: IFFALSE 8071
// sPower := true ;
8063: LD_ADDR_EXP 91
8067: PUSH
8068: LD_INT 1
8070: ST_TO_ADDR
// if p3 = 33 then
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 33
8078: EQUAL
8079: IFFALSE 8089
// sRandom := true ;
8081: LD_ADDR_EXP 92
8085: PUSH
8086: LD_INT 1
8088: ST_TO_ADDR
// if p3 = 34 then
8089: LD_VAR 0 3
8093: PUSH
8094: LD_INT 34
8096: EQUAL
8097: IFFALSE 8107
// sShield := true ;
8099: LD_ADDR_EXP 93
8103: PUSH
8104: LD_INT 1
8106: ST_TO_ADDR
// if p3 = 35 then
8107: LD_VAR 0 3
8111: PUSH
8112: LD_INT 35
8114: EQUAL
8115: IFFALSE 8125
// sTime := true ;
8117: LD_ADDR_EXP 94
8121: PUSH
8122: LD_INT 1
8124: ST_TO_ADDR
// if p3 = 36 then
8125: LD_VAR 0 3
8129: PUSH
8130: LD_INT 36
8132: EQUAL
8133: IFFALSE 8143
// sTools := true ;
8135: LD_ADDR_EXP 95
8139: PUSH
8140: LD_INT 1
8142: ST_TO_ADDR
// if p3 = 101 then
8143: LD_VAR 0 3
8147: PUSH
8148: LD_INT 101
8150: EQUAL
8151: IFFALSE 8161
// sSold := true ;
8153: LD_ADDR_EXP 60
8157: PUSH
8158: LD_INT 1
8160: ST_TO_ADDR
// if p3 = 102 then
8161: LD_VAR 0 3
8165: PUSH
8166: LD_INT 102
8168: EQUAL
8169: IFFALSE 8179
// sDiff := true ;
8171: LD_ADDR_EXP 61
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// if p3 = 103 then
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 103
8186: EQUAL
8187: IFFALSE 8197
// sFog := true ;
8189: LD_ADDR_EXP 64
8193: PUSH
8194: LD_INT 1
8196: ST_TO_ADDR
// if p3 = 104 then
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 104
8204: EQUAL
8205: IFFALSE 8215
// sReset := true ;
8207: LD_ADDR_EXP 65
8211: PUSH
8212: LD_INT 1
8214: ST_TO_ADDR
// if p3 = 105 then
8215: LD_VAR 0 3
8219: PUSH
8220: LD_INT 105
8222: EQUAL
8223: IFFALSE 8233
// sSun := true ;
8225: LD_ADDR_EXP 66
8229: PUSH
8230: LD_INT 1
8232: ST_TO_ADDR
// if p3 = 106 then
8233: LD_VAR 0 3
8237: PUSH
8238: LD_INT 106
8240: EQUAL
8241: IFFALSE 8251
// sTiger := true ;
8243: LD_ADDR_EXP 62
8247: PUSH
8248: LD_INT 1
8250: ST_TO_ADDR
// if p3 = 107 then
8251: LD_VAR 0 3
8255: PUSH
8256: LD_INT 107
8258: EQUAL
8259: IFFALSE 8269
// sBomb := true ;
8261: LD_ADDR_EXP 63
8265: PUSH
8266: LD_INT 1
8268: ST_TO_ADDR
// if p3 = 108 then
8269: LD_VAR 0 3
8273: PUSH
8274: LD_INT 108
8276: EQUAL
8277: IFFALSE 8287
// sWound := true ;
8279: LD_ADDR_EXP 71
8283: PUSH
8284: LD_INT 1
8286: ST_TO_ADDR
// if p3 = 109 then
8287: LD_VAR 0 3
8291: PUSH
8292: LD_INT 109
8294: EQUAL
8295: IFFALSE 8305
// sBetray := true ;
8297: LD_ADDR_EXP 75
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// if p3 = 110 then
8305: LD_VAR 0 3
8309: PUSH
8310: LD_INT 110
8312: EQUAL
8313: IFFALSE 8323
// sContamin := true ;
8315: LD_ADDR_EXP 76
8319: PUSH
8320: LD_INT 1
8322: ST_TO_ADDR
// if p3 = 111 then
8323: LD_VAR 0 3
8327: PUSH
8328: LD_INT 111
8330: EQUAL
8331: IFFALSE 8341
// sOil := true ;
8333: LD_ADDR_EXP 78
8337: PUSH
8338: LD_INT 1
8340: ST_TO_ADDR
// if p3 = 112 then
8341: LD_VAR 0 3
8345: PUSH
8346: LD_INT 112
8348: EQUAL
8349: IFFALSE 8359
// sStu := true ;
8351: LD_ADDR_EXP 82
8355: PUSH
8356: LD_INT 1
8358: ST_TO_ADDR
// if p3 = 113 then
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 113
8366: EQUAL
8367: IFFALSE 8377
// sBazooka := true ;
8369: LD_ADDR_EXP 85
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// if p3 = 114 then
8377: LD_VAR 0 3
8381: PUSH
8382: LD_INT 114
8384: EQUAL
8385: IFFALSE 8395
// sMortar := true ;
8387: LD_ADDR_EXP 86
8391: PUSH
8392: LD_INT 1
8394: ST_TO_ADDR
// if p3 = 115 then
8395: LD_VAR 0 3
8399: PUSH
8400: LD_INT 115
8402: EQUAL
8403: IFFALSE 8413
// sRanger := true ;
8405: LD_ADDR_EXP 96
8409: PUSH
8410: LD_INT 1
8412: ST_TO_ADDR
// if p3 = 116 then
8413: LD_VAR 0 3
8417: PUSH
8418: LD_INT 116
8420: EQUAL
8421: IFFALSE 8431
// sComputer := true ;
8423: LD_ADDR_EXP 97
8427: PUSH
8428: LD_INT 1
8430: ST_TO_ADDR
// if p3 = 117 then
8431: LD_VAR 0 3
8435: PUSH
8436: LD_INT 117
8438: EQUAL
8439: IFFALSE 8449
// s30 := true ;
8441: LD_ADDR_EXP 98
8445: PUSH
8446: LD_INT 1
8448: ST_TO_ADDR
// if p3 = 118 then
8449: LD_VAR 0 3
8453: PUSH
8454: LD_INT 118
8456: EQUAL
8457: IFFALSE 8467
// s60 := true ;
8459: LD_ADDR_EXP 99
8463: PUSH
8464: LD_INT 1
8466: ST_TO_ADDR
// end ; if p2 = 101 then
8467: LD_VAR 0 2
8471: PUSH
8472: LD_INT 101
8474: EQUAL
8475: IFFALSE 8603
// begin case p3 of 1 :
8477: LD_VAR 0 3
8481: PUSH
8482: LD_INT 1
8484: DOUBLE
8485: EQUAL
8486: IFTRUE 8490
8488: GO 8497
8490: POP
// hHackUnlimitedResources ; 2 :
8491: CALL 20701 0 0
8495: GO 8603
8497: LD_INT 2
8499: DOUBLE
8500: EQUAL
8501: IFTRUE 8505
8503: GO 8512
8505: POP
// hHackSetLevel10 ; 3 :
8506: CALL 20834 0 0
8510: GO 8603
8512: LD_INT 3
8514: DOUBLE
8515: EQUAL
8516: IFTRUE 8520
8518: GO 8527
8520: POP
// hHackSetLevel10YourUnits ; 4 :
8521: CALL 20919 0 0
8525: GO 8603
8527: LD_INT 4
8529: DOUBLE
8530: EQUAL
8531: IFTRUE 8535
8533: GO 8542
8535: POP
// hHackInvincible ; 5 :
8536: CALL 21367 0 0
8540: GO 8603
8542: LD_INT 5
8544: DOUBLE
8545: EQUAL
8546: IFTRUE 8550
8548: GO 8557
8550: POP
// hHackInvisible ; 6 :
8551: CALL 21478 0 0
8555: GO 8603
8557: LD_INT 6
8559: DOUBLE
8560: EQUAL
8561: IFTRUE 8565
8563: GO 8572
8565: POP
// hHackChangeYourSide ; 7 :
8566: CALL 21535 0 0
8570: GO 8603
8572: LD_INT 7
8574: DOUBLE
8575: EQUAL
8576: IFTRUE 8580
8578: GO 8587
8580: POP
// hHackChangeUnitSide ; 8 :
8581: CALL 21577 0 0
8585: GO 8603
8587: LD_INT 8
8589: DOUBLE
8590: EQUAL
8591: IFTRUE 8595
8593: GO 8602
8595: POP
// hHackFog ; end ;
8596: CALL 21678 0 0
8600: GO 8603
8602: POP
// end ; end ;
8603: LD_VAR 0 7
8607: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8608: GO 8610
8610: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8611: LD_STRING initStreamRollete();
8613: PPUSH
8614: CALL_OW 559
// InitStreamMode ;
8618: CALL 8630 0 0
// DefineStreamItems ( false ) ;
8622: LD_INT 0
8624: PPUSH
8625: CALL 9094 0 1
// end ;
8629: END
// function InitStreamMode ; begin
8630: LD_INT 0
8632: PPUSH
// streamModeActive := false ;
8633: LD_ADDR_EXP 43
8637: PUSH
8638: LD_INT 0
8640: ST_TO_ADDR
// normalCounter := 36 ;
8641: LD_ADDR_EXP 44
8645: PUSH
8646: LD_INT 36
8648: ST_TO_ADDR
// hardcoreCounter := 18 ;
8649: LD_ADDR_EXP 45
8653: PUSH
8654: LD_INT 18
8656: ST_TO_ADDR
// sRocket := false ;
8657: LD_ADDR_EXP 48
8661: PUSH
8662: LD_INT 0
8664: ST_TO_ADDR
// sSpeed := false ;
8665: LD_ADDR_EXP 47
8669: PUSH
8670: LD_INT 0
8672: ST_TO_ADDR
// sEngine := false ;
8673: LD_ADDR_EXP 49
8677: PUSH
8678: LD_INT 0
8680: ST_TO_ADDR
// sSpec := false ;
8681: LD_ADDR_EXP 46
8685: PUSH
8686: LD_INT 0
8688: ST_TO_ADDR
// sLevel := false ;
8689: LD_ADDR_EXP 50
8693: PUSH
8694: LD_INT 0
8696: ST_TO_ADDR
// sArmoury := false ;
8697: LD_ADDR_EXP 51
8701: PUSH
8702: LD_INT 0
8704: ST_TO_ADDR
// sRadar := false ;
8705: LD_ADDR_EXP 52
8709: PUSH
8710: LD_INT 0
8712: ST_TO_ADDR
// sBunker := false ;
8713: LD_ADDR_EXP 53
8717: PUSH
8718: LD_INT 0
8720: ST_TO_ADDR
// sHack := false ;
8721: LD_ADDR_EXP 54
8725: PUSH
8726: LD_INT 0
8728: ST_TO_ADDR
// sFire := false ;
8729: LD_ADDR_EXP 55
8733: PUSH
8734: LD_INT 0
8736: ST_TO_ADDR
// sRefresh := false ;
8737: LD_ADDR_EXP 56
8741: PUSH
8742: LD_INT 0
8744: ST_TO_ADDR
// sExp := false ;
8745: LD_ADDR_EXP 57
8749: PUSH
8750: LD_INT 0
8752: ST_TO_ADDR
// sDepot := false ;
8753: LD_ADDR_EXP 58
8757: PUSH
8758: LD_INT 0
8760: ST_TO_ADDR
// sFlag := false ;
8761: LD_ADDR_EXP 59
8765: PUSH
8766: LD_INT 0
8768: ST_TO_ADDR
// sKamikadze := false ;
8769: LD_ADDR_EXP 67
8773: PUSH
8774: LD_INT 0
8776: ST_TO_ADDR
// sTroll := false ;
8777: LD_ADDR_EXP 68
8781: PUSH
8782: LD_INT 0
8784: ST_TO_ADDR
// sSlow := false ;
8785: LD_ADDR_EXP 69
8789: PUSH
8790: LD_INT 0
8792: ST_TO_ADDR
// sLack := false ;
8793: LD_ADDR_EXP 70
8797: PUSH
8798: LD_INT 0
8800: ST_TO_ADDR
// sTank := false ;
8801: LD_ADDR_EXP 72
8805: PUSH
8806: LD_INT 0
8808: ST_TO_ADDR
// sRemote := false ;
8809: LD_ADDR_EXP 73
8813: PUSH
8814: LD_INT 0
8816: ST_TO_ADDR
// sPowell := false ;
8817: LD_ADDR_EXP 74
8821: PUSH
8822: LD_INT 0
8824: ST_TO_ADDR
// sTeleport := false ;
8825: LD_ADDR_EXP 77
8829: PUSH
8830: LD_INT 0
8832: ST_TO_ADDR
// sOilTower := false ;
8833: LD_ADDR_EXP 79
8837: PUSH
8838: LD_INT 0
8840: ST_TO_ADDR
// sShovel := false ;
8841: LD_ADDR_EXP 80
8845: PUSH
8846: LD_INT 0
8848: ST_TO_ADDR
// sSheik := false ;
8849: LD_ADDR_EXP 81
8853: PUSH
8854: LD_INT 0
8856: ST_TO_ADDR
// sEarthquake := false ;
8857: LD_ADDR_EXP 83
8861: PUSH
8862: LD_INT 0
8864: ST_TO_ADDR
// sAI := false ;
8865: LD_ADDR_EXP 84
8869: PUSH
8870: LD_INT 0
8872: ST_TO_ADDR
// sCargo := false ;
8873: LD_ADDR_EXP 87
8877: PUSH
8878: LD_INT 0
8880: ST_TO_ADDR
// sDLaser := false ;
8881: LD_ADDR_EXP 88
8885: PUSH
8886: LD_INT 0
8888: ST_TO_ADDR
// sExchange := false ;
8889: LD_ADDR_EXP 89
8893: PUSH
8894: LD_INT 0
8896: ST_TO_ADDR
// sFac := false ;
8897: LD_ADDR_EXP 90
8901: PUSH
8902: LD_INT 0
8904: ST_TO_ADDR
// sPower := false ;
8905: LD_ADDR_EXP 91
8909: PUSH
8910: LD_INT 0
8912: ST_TO_ADDR
// sRandom := false ;
8913: LD_ADDR_EXP 92
8917: PUSH
8918: LD_INT 0
8920: ST_TO_ADDR
// sShield := false ;
8921: LD_ADDR_EXP 93
8925: PUSH
8926: LD_INT 0
8928: ST_TO_ADDR
// sTime := false ;
8929: LD_ADDR_EXP 94
8933: PUSH
8934: LD_INT 0
8936: ST_TO_ADDR
// sTools := false ;
8937: LD_ADDR_EXP 95
8941: PUSH
8942: LD_INT 0
8944: ST_TO_ADDR
// sSold := false ;
8945: LD_ADDR_EXP 60
8949: PUSH
8950: LD_INT 0
8952: ST_TO_ADDR
// sDiff := false ;
8953: LD_ADDR_EXP 61
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// sFog := false ;
8961: LD_ADDR_EXP 64
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// sReset := false ;
8969: LD_ADDR_EXP 65
8973: PUSH
8974: LD_INT 0
8976: ST_TO_ADDR
// sSun := false ;
8977: LD_ADDR_EXP 66
8981: PUSH
8982: LD_INT 0
8984: ST_TO_ADDR
// sTiger := false ;
8985: LD_ADDR_EXP 62
8989: PUSH
8990: LD_INT 0
8992: ST_TO_ADDR
// sBomb := false ;
8993: LD_ADDR_EXP 63
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// sWound := false ;
9001: LD_ADDR_EXP 71
9005: PUSH
9006: LD_INT 0
9008: ST_TO_ADDR
// sBetray := false ;
9009: LD_ADDR_EXP 75
9013: PUSH
9014: LD_INT 0
9016: ST_TO_ADDR
// sContamin := false ;
9017: LD_ADDR_EXP 76
9021: PUSH
9022: LD_INT 0
9024: ST_TO_ADDR
// sOil := false ;
9025: LD_ADDR_EXP 78
9029: PUSH
9030: LD_INT 0
9032: ST_TO_ADDR
// sStu := false ;
9033: LD_ADDR_EXP 82
9037: PUSH
9038: LD_INT 0
9040: ST_TO_ADDR
// sBazooka := false ;
9041: LD_ADDR_EXP 85
9045: PUSH
9046: LD_INT 0
9048: ST_TO_ADDR
// sMortar := false ;
9049: LD_ADDR_EXP 86
9053: PUSH
9054: LD_INT 0
9056: ST_TO_ADDR
// sRanger := false ;
9057: LD_ADDR_EXP 96
9061: PUSH
9062: LD_INT 0
9064: ST_TO_ADDR
// sComputer := false ;
9065: LD_ADDR_EXP 97
9069: PUSH
9070: LD_INT 0
9072: ST_TO_ADDR
// s30 := false ;
9073: LD_ADDR_EXP 98
9077: PUSH
9078: LD_INT 0
9080: ST_TO_ADDR
// s60 := false ;
9081: LD_ADDR_EXP 99
9085: PUSH
9086: LD_INT 0
9088: ST_TO_ADDR
// end ;
9089: LD_VAR 0 1
9093: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9094: LD_INT 0
9096: PPUSH
9097: PPUSH
9098: PPUSH
9099: PPUSH
9100: PPUSH
9101: PPUSH
9102: PPUSH
// result := [ ] ;
9103: LD_ADDR_VAR 0 2
9107: PUSH
9108: EMPTY
9109: ST_TO_ADDR
// if campaign_id = 1 then
9110: LD_OWVAR 69
9114: PUSH
9115: LD_INT 1
9117: EQUAL
9118: IFFALSE 12284
// begin case mission_number of 1 :
9120: LD_OWVAR 70
9124: PUSH
9125: LD_INT 1
9127: DOUBLE
9128: EQUAL
9129: IFTRUE 9133
9131: GO 9209
9133: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9134: LD_ADDR_VAR 0 2
9138: PUSH
9139: LD_INT 2
9141: PUSH
9142: LD_INT 4
9144: PUSH
9145: LD_INT 11
9147: PUSH
9148: LD_INT 12
9150: PUSH
9151: LD_INT 15
9153: PUSH
9154: LD_INT 16
9156: PUSH
9157: LD_INT 22
9159: PUSH
9160: LD_INT 23
9162: PUSH
9163: LD_INT 26
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 101
9179: PUSH
9180: LD_INT 102
9182: PUSH
9183: LD_INT 106
9185: PUSH
9186: LD_INT 116
9188: PUSH
9189: LD_INT 117
9191: PUSH
9192: LD_INT 118
9194: PUSH
9195: EMPTY
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: ST_TO_ADDR
9207: GO 12282
9209: LD_INT 2
9211: DOUBLE
9212: EQUAL
9213: IFTRUE 9217
9215: GO 9301
9217: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9218: LD_ADDR_VAR 0 2
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: LD_INT 4
9228: PUSH
9229: LD_INT 11
9231: PUSH
9232: LD_INT 12
9234: PUSH
9235: LD_INT 15
9237: PUSH
9238: LD_INT 16
9240: PUSH
9241: LD_INT 22
9243: PUSH
9244: LD_INT 23
9246: PUSH
9247: LD_INT 26
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: LIST
9260: PUSH
9261: LD_INT 101
9263: PUSH
9264: LD_INT 102
9266: PUSH
9267: LD_INT 105
9269: PUSH
9270: LD_INT 106
9272: PUSH
9273: LD_INT 108
9275: PUSH
9276: LD_INT 116
9278: PUSH
9279: LD_INT 117
9281: PUSH
9282: LD_INT 118
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: ST_TO_ADDR
9299: GO 12282
9301: LD_INT 3
9303: DOUBLE
9304: EQUAL
9305: IFTRUE 9309
9307: GO 9397
9309: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9310: LD_ADDR_VAR 0 2
9314: PUSH
9315: LD_INT 2
9317: PUSH
9318: LD_INT 4
9320: PUSH
9321: LD_INT 5
9323: PUSH
9324: LD_INT 11
9326: PUSH
9327: LD_INT 12
9329: PUSH
9330: LD_INT 15
9332: PUSH
9333: LD_INT 16
9335: PUSH
9336: LD_INT 22
9338: PUSH
9339: LD_INT 26
9341: PUSH
9342: LD_INT 36
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 101
9359: PUSH
9360: LD_INT 102
9362: PUSH
9363: LD_INT 105
9365: PUSH
9366: LD_INT 106
9368: PUSH
9369: LD_INT 108
9371: PUSH
9372: LD_INT 116
9374: PUSH
9375: LD_INT 117
9377: PUSH
9378: LD_INT 118
9380: PUSH
9381: EMPTY
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: EMPTY
9392: LIST
9393: LIST
9394: ST_TO_ADDR
9395: GO 12282
9397: LD_INT 4
9399: DOUBLE
9400: EQUAL
9401: IFTRUE 9405
9403: GO 9501
9405: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9406: LD_ADDR_VAR 0 2
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: LD_INT 4
9416: PUSH
9417: LD_INT 5
9419: PUSH
9420: LD_INT 8
9422: PUSH
9423: LD_INT 11
9425: PUSH
9426: LD_INT 12
9428: PUSH
9429: LD_INT 15
9431: PUSH
9432: LD_INT 16
9434: PUSH
9435: LD_INT 22
9437: PUSH
9438: LD_INT 23
9440: PUSH
9441: LD_INT 26
9443: PUSH
9444: LD_INT 36
9446: PUSH
9447: EMPTY
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 101
9463: PUSH
9464: LD_INT 102
9466: PUSH
9467: LD_INT 105
9469: PUSH
9470: LD_INT 106
9472: PUSH
9473: LD_INT 108
9475: PUSH
9476: LD_INT 116
9478: PUSH
9479: LD_INT 117
9481: PUSH
9482: LD_INT 118
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: ST_TO_ADDR
9499: GO 12282
9501: LD_INT 5
9503: DOUBLE
9504: EQUAL
9505: IFTRUE 9509
9507: GO 9621
9509: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: LD_INT 2
9517: PUSH
9518: LD_INT 4
9520: PUSH
9521: LD_INT 5
9523: PUSH
9524: LD_INT 6
9526: PUSH
9527: LD_INT 8
9529: PUSH
9530: LD_INT 11
9532: PUSH
9533: LD_INT 12
9535: PUSH
9536: LD_INT 15
9538: PUSH
9539: LD_INT 16
9541: PUSH
9542: LD_INT 22
9544: PUSH
9545: LD_INT 23
9547: PUSH
9548: LD_INT 25
9550: PUSH
9551: LD_INT 26
9553: PUSH
9554: LD_INT 36
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 101
9575: PUSH
9576: LD_INT 102
9578: PUSH
9579: LD_INT 105
9581: PUSH
9582: LD_INT 106
9584: PUSH
9585: LD_INT 108
9587: PUSH
9588: LD_INT 109
9590: PUSH
9591: LD_INT 112
9593: PUSH
9594: LD_INT 116
9596: PUSH
9597: LD_INT 117
9599: PUSH
9600: LD_INT 118
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: ST_TO_ADDR
9619: GO 12282
9621: LD_INT 6
9623: DOUBLE
9624: EQUAL
9625: IFTRUE 9629
9627: GO 9761
9629: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9630: LD_ADDR_VAR 0 2
9634: PUSH
9635: LD_INT 2
9637: PUSH
9638: LD_INT 4
9640: PUSH
9641: LD_INT 5
9643: PUSH
9644: LD_INT 6
9646: PUSH
9647: LD_INT 8
9649: PUSH
9650: LD_INT 11
9652: PUSH
9653: LD_INT 12
9655: PUSH
9656: LD_INT 15
9658: PUSH
9659: LD_INT 16
9661: PUSH
9662: LD_INT 20
9664: PUSH
9665: LD_INT 21
9667: PUSH
9668: LD_INT 22
9670: PUSH
9671: LD_INT 23
9673: PUSH
9674: LD_INT 25
9676: PUSH
9677: LD_INT 26
9679: PUSH
9680: LD_INT 30
9682: PUSH
9683: LD_INT 31
9685: PUSH
9686: LD_INT 32
9688: PUSH
9689: LD_INT 36
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: PUSH
9713: LD_INT 101
9715: PUSH
9716: LD_INT 102
9718: PUSH
9719: LD_INT 105
9721: PUSH
9722: LD_INT 106
9724: PUSH
9725: LD_INT 108
9727: PUSH
9728: LD_INT 109
9730: PUSH
9731: LD_INT 112
9733: PUSH
9734: LD_INT 116
9736: PUSH
9737: LD_INT 117
9739: PUSH
9740: LD_INT 118
9742: PUSH
9743: EMPTY
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: ST_TO_ADDR
9759: GO 12282
9761: LD_INT 7
9763: DOUBLE
9764: EQUAL
9765: IFTRUE 9769
9767: GO 9881
9769: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9770: LD_ADDR_VAR 0 2
9774: PUSH
9775: LD_INT 2
9777: PUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 7
9786: PUSH
9787: LD_INT 11
9789: PUSH
9790: LD_INT 12
9792: PUSH
9793: LD_INT 15
9795: PUSH
9796: LD_INT 16
9798: PUSH
9799: LD_INT 20
9801: PUSH
9802: LD_INT 21
9804: PUSH
9805: LD_INT 22
9807: PUSH
9808: LD_INT 23
9810: PUSH
9811: LD_INT 25
9813: PUSH
9814: LD_INT 26
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 101
9835: PUSH
9836: LD_INT 102
9838: PUSH
9839: LD_INT 103
9841: PUSH
9842: LD_INT 105
9844: PUSH
9845: LD_INT 106
9847: PUSH
9848: LD_INT 108
9850: PUSH
9851: LD_INT 112
9853: PUSH
9854: LD_INT 116
9856: PUSH
9857: LD_INT 117
9859: PUSH
9860: LD_INT 118
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: ST_TO_ADDR
9879: GO 12282
9881: LD_INT 8
9883: DOUBLE
9884: EQUAL
9885: IFTRUE 9889
9887: GO 10029
9889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9890: LD_ADDR_VAR 0 2
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: LD_INT 4
9900: PUSH
9901: LD_INT 5
9903: PUSH
9904: LD_INT 6
9906: PUSH
9907: LD_INT 7
9909: PUSH
9910: LD_INT 8
9912: PUSH
9913: LD_INT 11
9915: PUSH
9916: LD_INT 12
9918: PUSH
9919: LD_INT 15
9921: PUSH
9922: LD_INT 16
9924: PUSH
9925: LD_INT 20
9927: PUSH
9928: LD_INT 21
9930: PUSH
9931: LD_INT 22
9933: PUSH
9934: LD_INT 23
9936: PUSH
9937: LD_INT 25
9939: PUSH
9940: LD_INT 26
9942: PUSH
9943: LD_INT 30
9945: PUSH
9946: LD_INT 31
9948: PUSH
9949: LD_INT 32
9951: PUSH
9952: LD_INT 36
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 101
9979: PUSH
9980: LD_INT 102
9982: PUSH
9983: LD_INT 103
9985: PUSH
9986: LD_INT 105
9988: PUSH
9989: LD_INT 106
9991: PUSH
9992: LD_INT 108
9994: PUSH
9995: LD_INT 109
9997: PUSH
9998: LD_INT 112
10000: PUSH
10001: LD_INT 116
10003: PUSH
10004: LD_INT 117
10006: PUSH
10007: LD_INT 118
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: ST_TO_ADDR
10027: GO 12282
10029: LD_INT 9
10031: DOUBLE
10032: EQUAL
10033: IFTRUE 10037
10035: GO 10185
10037: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10038: LD_ADDR_VAR 0 2
10042: PUSH
10043: LD_INT 2
10045: PUSH
10046: LD_INT 4
10048: PUSH
10049: LD_INT 5
10051: PUSH
10052: LD_INT 6
10054: PUSH
10055: LD_INT 7
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: LD_INT 11
10063: PUSH
10064: LD_INT 12
10066: PUSH
10067: LD_INT 15
10069: PUSH
10070: LD_INT 16
10072: PUSH
10073: LD_INT 20
10075: PUSH
10076: LD_INT 21
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 23
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 26
10090: PUSH
10091: LD_INT 28
10093: PUSH
10094: LD_INT 30
10096: PUSH
10097: LD_INT 31
10099: PUSH
10100: LD_INT 32
10102: PUSH
10103: LD_INT 36
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: LIST
10128: PUSH
10129: LD_INT 101
10131: PUSH
10132: LD_INT 102
10134: PUSH
10135: LD_INT 103
10137: PUSH
10138: LD_INT 105
10140: PUSH
10141: LD_INT 106
10143: PUSH
10144: LD_INT 108
10146: PUSH
10147: LD_INT 109
10149: PUSH
10150: LD_INT 112
10152: PUSH
10153: LD_INT 114
10155: PUSH
10156: LD_INT 116
10158: PUSH
10159: LD_INT 117
10161: PUSH
10162: LD_INT 118
10164: PUSH
10165: EMPTY
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: LIST
10177: LIST
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: ST_TO_ADDR
10183: GO 12282
10185: LD_INT 10
10187: DOUBLE
10188: EQUAL
10189: IFTRUE 10193
10191: GO 10389
10193: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10194: LD_ADDR_VAR 0 2
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: LD_INT 4
10204: PUSH
10205: LD_INT 5
10207: PUSH
10208: LD_INT 6
10210: PUSH
10211: LD_INT 7
10213: PUSH
10214: LD_INT 8
10216: PUSH
10217: LD_INT 9
10219: PUSH
10220: LD_INT 10
10222: PUSH
10223: LD_INT 11
10225: PUSH
10226: LD_INT 12
10228: PUSH
10229: LD_INT 13
10231: PUSH
10232: LD_INT 14
10234: PUSH
10235: LD_INT 15
10237: PUSH
10238: LD_INT 16
10240: PUSH
10241: LD_INT 17
10243: PUSH
10244: LD_INT 18
10246: PUSH
10247: LD_INT 19
10249: PUSH
10250: LD_INT 20
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 22
10258: PUSH
10259: LD_INT 23
10261: PUSH
10262: LD_INT 24
10264: PUSH
10265: LD_INT 25
10267: PUSH
10268: LD_INT 26
10270: PUSH
10271: LD_INT 28
10273: PUSH
10274: LD_INT 30
10276: PUSH
10277: LD_INT 31
10279: PUSH
10280: LD_INT 32
10282: PUSH
10283: LD_INT 36
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 101
10319: PUSH
10320: LD_INT 102
10322: PUSH
10323: LD_INT 103
10325: PUSH
10326: LD_INT 104
10328: PUSH
10329: LD_INT 105
10331: PUSH
10332: LD_INT 106
10334: PUSH
10335: LD_INT 107
10337: PUSH
10338: LD_INT 108
10340: PUSH
10341: LD_INT 109
10343: PUSH
10344: LD_INT 110
10346: PUSH
10347: LD_INT 111
10349: PUSH
10350: LD_INT 112
10352: PUSH
10353: LD_INT 114
10355: PUSH
10356: LD_INT 116
10358: PUSH
10359: LD_INT 117
10361: PUSH
10362: LD_INT 118
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: ST_TO_ADDR
10387: GO 12282
10389: LD_INT 11
10391: DOUBLE
10392: EQUAL
10393: IFTRUE 10397
10395: GO 10601
10397: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10398: LD_ADDR_VAR 0 2
10402: PUSH
10403: LD_INT 2
10405: PUSH
10406: LD_INT 3
10408: PUSH
10409: LD_INT 4
10411: PUSH
10412: LD_INT 5
10414: PUSH
10415: LD_INT 6
10417: PUSH
10418: LD_INT 7
10420: PUSH
10421: LD_INT 8
10423: PUSH
10424: LD_INT 9
10426: PUSH
10427: LD_INT 10
10429: PUSH
10430: LD_INT 11
10432: PUSH
10433: LD_INT 12
10435: PUSH
10436: LD_INT 13
10438: PUSH
10439: LD_INT 14
10441: PUSH
10442: LD_INT 15
10444: PUSH
10445: LD_INT 16
10447: PUSH
10448: LD_INT 17
10450: PUSH
10451: LD_INT 18
10453: PUSH
10454: LD_INT 19
10456: PUSH
10457: LD_INT 20
10459: PUSH
10460: LD_INT 21
10462: PUSH
10463: LD_INT 22
10465: PUSH
10466: LD_INT 23
10468: PUSH
10469: LD_INT 24
10471: PUSH
10472: LD_INT 25
10474: PUSH
10475: LD_INT 26
10477: PUSH
10478: LD_INT 28
10480: PUSH
10481: LD_INT 30
10483: PUSH
10484: LD_INT 31
10486: PUSH
10487: LD_INT 32
10489: PUSH
10490: LD_INT 34
10492: PUSH
10493: LD_INT 36
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 101
10531: PUSH
10532: LD_INT 102
10534: PUSH
10535: LD_INT 103
10537: PUSH
10538: LD_INT 104
10540: PUSH
10541: LD_INT 105
10543: PUSH
10544: LD_INT 106
10546: PUSH
10547: LD_INT 107
10549: PUSH
10550: LD_INT 108
10552: PUSH
10553: LD_INT 109
10555: PUSH
10556: LD_INT 110
10558: PUSH
10559: LD_INT 111
10561: PUSH
10562: LD_INT 112
10564: PUSH
10565: LD_INT 114
10567: PUSH
10568: LD_INT 116
10570: PUSH
10571: LD_INT 117
10573: PUSH
10574: LD_INT 118
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: ST_TO_ADDR
10599: GO 12282
10601: LD_INT 12
10603: DOUBLE
10604: EQUAL
10605: IFTRUE 10609
10607: GO 10829
10609: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10610: LD_ADDR_VAR 0 2
10614: PUSH
10615: LD_INT 1
10617: PUSH
10618: LD_INT 2
10620: PUSH
10621: LD_INT 3
10623: PUSH
10624: LD_INT 4
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: LD_INT 6
10632: PUSH
10633: LD_INT 7
10635: PUSH
10636: LD_INT 8
10638: PUSH
10639: LD_INT 9
10641: PUSH
10642: LD_INT 10
10644: PUSH
10645: LD_INT 11
10647: PUSH
10648: LD_INT 12
10650: PUSH
10651: LD_INT 13
10653: PUSH
10654: LD_INT 14
10656: PUSH
10657: LD_INT 15
10659: PUSH
10660: LD_INT 16
10662: PUSH
10663: LD_INT 17
10665: PUSH
10666: LD_INT 18
10668: PUSH
10669: LD_INT 19
10671: PUSH
10672: LD_INT 20
10674: PUSH
10675: LD_INT 21
10677: PUSH
10678: LD_INT 22
10680: PUSH
10681: LD_INT 23
10683: PUSH
10684: LD_INT 24
10686: PUSH
10687: LD_INT 25
10689: PUSH
10690: LD_INT 26
10692: PUSH
10693: LD_INT 27
10695: PUSH
10696: LD_INT 28
10698: PUSH
10699: LD_INT 30
10701: PUSH
10702: LD_INT 31
10704: PUSH
10705: LD_INT 32
10707: PUSH
10708: LD_INT 33
10710: PUSH
10711: LD_INT 34
10713: PUSH
10714: LD_INT 36
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 101
10755: PUSH
10756: LD_INT 102
10758: PUSH
10759: LD_INT 103
10761: PUSH
10762: LD_INT 104
10764: PUSH
10765: LD_INT 105
10767: PUSH
10768: LD_INT 106
10770: PUSH
10771: LD_INT 107
10773: PUSH
10774: LD_INT 108
10776: PUSH
10777: LD_INT 109
10779: PUSH
10780: LD_INT 110
10782: PUSH
10783: LD_INT 111
10785: PUSH
10786: LD_INT 112
10788: PUSH
10789: LD_INT 113
10791: PUSH
10792: LD_INT 114
10794: PUSH
10795: LD_INT 116
10797: PUSH
10798: LD_INT 117
10800: PUSH
10801: LD_INT 118
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: ST_TO_ADDR
10827: GO 12282
10829: LD_INT 13
10831: DOUBLE
10832: EQUAL
10833: IFTRUE 10837
10835: GO 11045
10837: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10838: LD_ADDR_VAR 0 2
10842: PUSH
10843: LD_INT 1
10845: PUSH
10846: LD_INT 2
10848: PUSH
10849: LD_INT 3
10851: PUSH
10852: LD_INT 4
10854: PUSH
10855: LD_INT 5
10857: PUSH
10858: LD_INT 8
10860: PUSH
10861: LD_INT 9
10863: PUSH
10864: LD_INT 10
10866: PUSH
10867: LD_INT 11
10869: PUSH
10870: LD_INT 12
10872: PUSH
10873: LD_INT 14
10875: PUSH
10876: LD_INT 15
10878: PUSH
10879: LD_INT 16
10881: PUSH
10882: LD_INT 17
10884: PUSH
10885: LD_INT 18
10887: PUSH
10888: LD_INT 19
10890: PUSH
10891: LD_INT 20
10893: PUSH
10894: LD_INT 21
10896: PUSH
10897: LD_INT 22
10899: PUSH
10900: LD_INT 23
10902: PUSH
10903: LD_INT 24
10905: PUSH
10906: LD_INT 25
10908: PUSH
10909: LD_INT 26
10911: PUSH
10912: LD_INT 27
10914: PUSH
10915: LD_INT 28
10917: PUSH
10918: LD_INT 30
10920: PUSH
10921: LD_INT 31
10923: PUSH
10924: LD_INT 32
10926: PUSH
10927: LD_INT 33
10929: PUSH
10930: LD_INT 34
10932: PUSH
10933: LD_INT 36
10935: PUSH
10936: EMPTY
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 101
10971: PUSH
10972: LD_INT 102
10974: PUSH
10975: LD_INT 103
10977: PUSH
10978: LD_INT 104
10980: PUSH
10981: LD_INT 105
10983: PUSH
10984: LD_INT 106
10986: PUSH
10987: LD_INT 107
10989: PUSH
10990: LD_INT 108
10992: PUSH
10993: LD_INT 109
10995: PUSH
10996: LD_INT 110
10998: PUSH
10999: LD_INT 111
11001: PUSH
11002: LD_INT 112
11004: PUSH
11005: LD_INT 113
11007: PUSH
11008: LD_INT 114
11010: PUSH
11011: LD_INT 116
11013: PUSH
11014: LD_INT 117
11016: PUSH
11017: LD_INT 118
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: ST_TO_ADDR
11043: GO 12282
11045: LD_INT 14
11047: DOUBLE
11048: EQUAL
11049: IFTRUE 11053
11051: GO 11277
11053: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11054: LD_ADDR_VAR 0 2
11058: PUSH
11059: LD_INT 1
11061: PUSH
11062: LD_INT 2
11064: PUSH
11065: LD_INT 3
11067: PUSH
11068: LD_INT 4
11070: PUSH
11071: LD_INT 5
11073: PUSH
11074: LD_INT 6
11076: PUSH
11077: LD_INT 7
11079: PUSH
11080: LD_INT 8
11082: PUSH
11083: LD_INT 9
11085: PUSH
11086: LD_INT 10
11088: PUSH
11089: LD_INT 11
11091: PUSH
11092: LD_INT 12
11094: PUSH
11095: LD_INT 13
11097: PUSH
11098: LD_INT 14
11100: PUSH
11101: LD_INT 15
11103: PUSH
11104: LD_INT 16
11106: PUSH
11107: LD_INT 17
11109: PUSH
11110: LD_INT 18
11112: PUSH
11113: LD_INT 19
11115: PUSH
11116: LD_INT 20
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 22
11124: PUSH
11125: LD_INT 23
11127: PUSH
11128: LD_INT 24
11130: PUSH
11131: LD_INT 25
11133: PUSH
11134: LD_INT 26
11136: PUSH
11137: LD_INT 27
11139: PUSH
11140: LD_INT 28
11142: PUSH
11143: LD_INT 29
11145: PUSH
11146: LD_INT 30
11148: PUSH
11149: LD_INT 31
11151: PUSH
11152: LD_INT 32
11154: PUSH
11155: LD_INT 33
11157: PUSH
11158: LD_INT 34
11160: PUSH
11161: LD_INT 36
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: PUSH
11201: LD_INT 101
11203: PUSH
11204: LD_INT 102
11206: PUSH
11207: LD_INT 103
11209: PUSH
11210: LD_INT 104
11212: PUSH
11213: LD_INT 105
11215: PUSH
11216: LD_INT 106
11218: PUSH
11219: LD_INT 107
11221: PUSH
11222: LD_INT 108
11224: PUSH
11225: LD_INT 109
11227: PUSH
11228: LD_INT 110
11230: PUSH
11231: LD_INT 111
11233: PUSH
11234: LD_INT 112
11236: PUSH
11237: LD_INT 113
11239: PUSH
11240: LD_INT 114
11242: PUSH
11243: LD_INT 116
11245: PUSH
11246: LD_INT 117
11248: PUSH
11249: LD_INT 118
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: ST_TO_ADDR
11275: GO 12282
11277: LD_INT 15
11279: DOUBLE
11280: EQUAL
11281: IFTRUE 11285
11283: GO 11509
11285: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11286: LD_ADDR_VAR 0 2
11290: PUSH
11291: LD_INT 1
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: LD_INT 4
11302: PUSH
11303: LD_INT 5
11305: PUSH
11306: LD_INT 6
11308: PUSH
11309: LD_INT 7
11311: PUSH
11312: LD_INT 8
11314: PUSH
11315: LD_INT 9
11317: PUSH
11318: LD_INT 10
11320: PUSH
11321: LD_INT 11
11323: PUSH
11324: LD_INT 12
11326: PUSH
11327: LD_INT 13
11329: PUSH
11330: LD_INT 14
11332: PUSH
11333: LD_INT 15
11335: PUSH
11336: LD_INT 16
11338: PUSH
11339: LD_INT 17
11341: PUSH
11342: LD_INT 18
11344: PUSH
11345: LD_INT 19
11347: PUSH
11348: LD_INT 20
11350: PUSH
11351: LD_INT 21
11353: PUSH
11354: LD_INT 22
11356: PUSH
11357: LD_INT 23
11359: PUSH
11360: LD_INT 24
11362: PUSH
11363: LD_INT 25
11365: PUSH
11366: LD_INT 26
11368: PUSH
11369: LD_INT 27
11371: PUSH
11372: LD_INT 28
11374: PUSH
11375: LD_INT 29
11377: PUSH
11378: LD_INT 30
11380: PUSH
11381: LD_INT 31
11383: PUSH
11384: LD_INT 32
11386: PUSH
11387: LD_INT 33
11389: PUSH
11390: LD_INT 34
11392: PUSH
11393: LD_INT 36
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: PUSH
11433: LD_INT 101
11435: PUSH
11436: LD_INT 102
11438: PUSH
11439: LD_INT 103
11441: PUSH
11442: LD_INT 104
11444: PUSH
11445: LD_INT 105
11447: PUSH
11448: LD_INT 106
11450: PUSH
11451: LD_INT 107
11453: PUSH
11454: LD_INT 108
11456: PUSH
11457: LD_INT 109
11459: PUSH
11460: LD_INT 110
11462: PUSH
11463: LD_INT 111
11465: PUSH
11466: LD_INT 112
11468: PUSH
11469: LD_INT 113
11471: PUSH
11472: LD_INT 114
11474: PUSH
11475: LD_INT 116
11477: PUSH
11478: LD_INT 117
11480: PUSH
11481: LD_INT 118
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: ST_TO_ADDR
11507: GO 12282
11509: LD_INT 16
11511: DOUBLE
11512: EQUAL
11513: IFTRUE 11517
11515: GO 11653
11517: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11518: LD_ADDR_VAR 0 2
11522: PUSH
11523: LD_INT 2
11525: PUSH
11526: LD_INT 4
11528: PUSH
11529: LD_INT 5
11531: PUSH
11532: LD_INT 7
11534: PUSH
11535: LD_INT 11
11537: PUSH
11538: LD_INT 12
11540: PUSH
11541: LD_INT 15
11543: PUSH
11544: LD_INT 16
11546: PUSH
11547: LD_INT 20
11549: PUSH
11550: LD_INT 21
11552: PUSH
11553: LD_INT 22
11555: PUSH
11556: LD_INT 23
11558: PUSH
11559: LD_INT 25
11561: PUSH
11562: LD_INT 26
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 31
11570: PUSH
11571: LD_INT 32
11573: PUSH
11574: LD_INT 33
11576: PUSH
11577: LD_INT 34
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 101
11603: PUSH
11604: LD_INT 102
11606: PUSH
11607: LD_INT 103
11609: PUSH
11610: LD_INT 106
11612: PUSH
11613: LD_INT 108
11615: PUSH
11616: LD_INT 112
11618: PUSH
11619: LD_INT 113
11621: PUSH
11622: LD_INT 114
11624: PUSH
11625: LD_INT 116
11627: PUSH
11628: LD_INT 117
11630: PUSH
11631: LD_INT 118
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: ST_TO_ADDR
11651: GO 12282
11653: LD_INT 17
11655: DOUBLE
11656: EQUAL
11657: IFTRUE 11661
11659: GO 11885
11661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11662: LD_ADDR_VAR 0 2
11666: PUSH
11667: LD_INT 1
11669: PUSH
11670: LD_INT 2
11672: PUSH
11673: LD_INT 3
11675: PUSH
11676: LD_INT 4
11678: PUSH
11679: LD_INT 5
11681: PUSH
11682: LD_INT 6
11684: PUSH
11685: LD_INT 7
11687: PUSH
11688: LD_INT 8
11690: PUSH
11691: LD_INT 9
11693: PUSH
11694: LD_INT 10
11696: PUSH
11697: LD_INT 11
11699: PUSH
11700: LD_INT 12
11702: PUSH
11703: LD_INT 13
11705: PUSH
11706: LD_INT 14
11708: PUSH
11709: LD_INT 15
11711: PUSH
11712: LD_INT 16
11714: PUSH
11715: LD_INT 17
11717: PUSH
11718: LD_INT 18
11720: PUSH
11721: LD_INT 19
11723: PUSH
11724: LD_INT 20
11726: PUSH
11727: LD_INT 21
11729: PUSH
11730: LD_INT 22
11732: PUSH
11733: LD_INT 23
11735: PUSH
11736: LD_INT 24
11738: PUSH
11739: LD_INT 25
11741: PUSH
11742: LD_INT 26
11744: PUSH
11745: LD_INT 27
11747: PUSH
11748: LD_INT 28
11750: PUSH
11751: LD_INT 29
11753: PUSH
11754: LD_INT 30
11756: PUSH
11757: LD_INT 31
11759: PUSH
11760: LD_INT 32
11762: PUSH
11763: LD_INT 33
11765: PUSH
11766: LD_INT 34
11768: PUSH
11769: LD_INT 36
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: PUSH
11809: LD_INT 101
11811: PUSH
11812: LD_INT 102
11814: PUSH
11815: LD_INT 103
11817: PUSH
11818: LD_INT 104
11820: PUSH
11821: LD_INT 105
11823: PUSH
11824: LD_INT 106
11826: PUSH
11827: LD_INT 107
11829: PUSH
11830: LD_INT 108
11832: PUSH
11833: LD_INT 109
11835: PUSH
11836: LD_INT 110
11838: PUSH
11839: LD_INT 111
11841: PUSH
11842: LD_INT 112
11844: PUSH
11845: LD_INT 113
11847: PUSH
11848: LD_INT 114
11850: PUSH
11851: LD_INT 116
11853: PUSH
11854: LD_INT 117
11856: PUSH
11857: LD_INT 118
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: ST_TO_ADDR
11883: GO 12282
11885: LD_INT 18
11887: DOUBLE
11888: EQUAL
11889: IFTRUE 11893
11891: GO 12041
11893: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11894: LD_ADDR_VAR 0 2
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: LD_INT 4
11904: PUSH
11905: LD_INT 5
11907: PUSH
11908: LD_INT 7
11910: PUSH
11911: LD_INT 11
11913: PUSH
11914: LD_INT 12
11916: PUSH
11917: LD_INT 15
11919: PUSH
11920: LD_INT 16
11922: PUSH
11923: LD_INT 20
11925: PUSH
11926: LD_INT 21
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: LD_INT 23
11934: PUSH
11935: LD_INT 25
11937: PUSH
11938: LD_INT 26
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 31
11946: PUSH
11947: LD_INT 32
11949: PUSH
11950: LD_INT 33
11952: PUSH
11953: LD_INT 34
11955: PUSH
11956: LD_INT 35
11958: PUSH
11959: LD_INT 36
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: LIST
11982: LIST
11983: LIST
11984: PUSH
11985: LD_INT 101
11987: PUSH
11988: LD_INT 102
11990: PUSH
11991: LD_INT 103
11993: PUSH
11994: LD_INT 106
11996: PUSH
11997: LD_INT 108
11999: PUSH
12000: LD_INT 112
12002: PUSH
12003: LD_INT 113
12005: PUSH
12006: LD_INT 114
12008: PUSH
12009: LD_INT 115
12011: PUSH
12012: LD_INT 116
12014: PUSH
12015: LD_INT 117
12017: PUSH
12018: LD_INT 118
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: ST_TO_ADDR
12039: GO 12282
12041: LD_INT 19
12043: DOUBLE
12044: EQUAL
12045: IFTRUE 12049
12047: GO 12281
12049: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12050: LD_ADDR_VAR 0 2
12054: PUSH
12055: LD_INT 1
12057: PUSH
12058: LD_INT 2
12060: PUSH
12061: LD_INT 3
12063: PUSH
12064: LD_INT 4
12066: PUSH
12067: LD_INT 5
12069: PUSH
12070: LD_INT 6
12072: PUSH
12073: LD_INT 7
12075: PUSH
12076: LD_INT 8
12078: PUSH
12079: LD_INT 9
12081: PUSH
12082: LD_INT 10
12084: PUSH
12085: LD_INT 11
12087: PUSH
12088: LD_INT 12
12090: PUSH
12091: LD_INT 13
12093: PUSH
12094: LD_INT 14
12096: PUSH
12097: LD_INT 15
12099: PUSH
12100: LD_INT 16
12102: PUSH
12103: LD_INT 17
12105: PUSH
12106: LD_INT 18
12108: PUSH
12109: LD_INT 19
12111: PUSH
12112: LD_INT 20
12114: PUSH
12115: LD_INT 21
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 23
12123: PUSH
12124: LD_INT 24
12126: PUSH
12127: LD_INT 25
12129: PUSH
12130: LD_INT 26
12132: PUSH
12133: LD_INT 27
12135: PUSH
12136: LD_INT 28
12138: PUSH
12139: LD_INT 29
12141: PUSH
12142: LD_INT 30
12144: PUSH
12145: LD_INT 31
12147: PUSH
12148: LD_INT 32
12150: PUSH
12151: LD_INT 33
12153: PUSH
12154: LD_INT 34
12156: PUSH
12157: LD_INT 35
12159: PUSH
12160: LD_INT 36
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: PUSH
12201: LD_INT 101
12203: PUSH
12204: LD_INT 102
12206: PUSH
12207: LD_INT 103
12209: PUSH
12210: LD_INT 104
12212: PUSH
12213: LD_INT 105
12215: PUSH
12216: LD_INT 106
12218: PUSH
12219: LD_INT 107
12221: PUSH
12222: LD_INT 108
12224: PUSH
12225: LD_INT 109
12227: PUSH
12228: LD_INT 110
12230: PUSH
12231: LD_INT 111
12233: PUSH
12234: LD_INT 112
12236: PUSH
12237: LD_INT 113
12239: PUSH
12240: LD_INT 114
12242: PUSH
12243: LD_INT 115
12245: PUSH
12246: LD_INT 116
12248: PUSH
12249: LD_INT 117
12251: PUSH
12252: LD_INT 118
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: ST_TO_ADDR
12279: GO 12282
12281: POP
// end else
12282: GO 12513
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12284: LD_ADDR_VAR 0 2
12288: PUSH
12289: LD_INT 1
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: LD_INT 3
12297: PUSH
12298: LD_INT 4
12300: PUSH
12301: LD_INT 5
12303: PUSH
12304: LD_INT 6
12306: PUSH
12307: LD_INT 7
12309: PUSH
12310: LD_INT 8
12312: PUSH
12313: LD_INT 9
12315: PUSH
12316: LD_INT 10
12318: PUSH
12319: LD_INT 11
12321: PUSH
12322: LD_INT 12
12324: PUSH
12325: LD_INT 13
12327: PUSH
12328: LD_INT 14
12330: PUSH
12331: LD_INT 15
12333: PUSH
12334: LD_INT 16
12336: PUSH
12337: LD_INT 17
12339: PUSH
12340: LD_INT 18
12342: PUSH
12343: LD_INT 19
12345: PUSH
12346: LD_INT 20
12348: PUSH
12349: LD_INT 21
12351: PUSH
12352: LD_INT 22
12354: PUSH
12355: LD_INT 23
12357: PUSH
12358: LD_INT 24
12360: PUSH
12361: LD_INT 25
12363: PUSH
12364: LD_INT 26
12366: PUSH
12367: LD_INT 27
12369: PUSH
12370: LD_INT 28
12372: PUSH
12373: LD_INT 29
12375: PUSH
12376: LD_INT 30
12378: PUSH
12379: LD_INT 31
12381: PUSH
12382: LD_INT 32
12384: PUSH
12385: LD_INT 33
12387: PUSH
12388: LD_INT 34
12390: PUSH
12391: LD_INT 35
12393: PUSH
12394: LD_INT 36
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 101
12437: PUSH
12438: LD_INT 102
12440: PUSH
12441: LD_INT 103
12443: PUSH
12444: LD_INT 104
12446: PUSH
12447: LD_INT 105
12449: PUSH
12450: LD_INT 106
12452: PUSH
12453: LD_INT 107
12455: PUSH
12456: LD_INT 108
12458: PUSH
12459: LD_INT 109
12461: PUSH
12462: LD_INT 110
12464: PUSH
12465: LD_INT 111
12467: PUSH
12468: LD_INT 112
12470: PUSH
12471: LD_INT 113
12473: PUSH
12474: LD_INT 114
12476: PUSH
12477: LD_INT 115
12479: PUSH
12480: LD_INT 116
12482: PUSH
12483: LD_INT 117
12485: PUSH
12486: LD_INT 118
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: ST_TO_ADDR
// if result then
12513: LD_VAR 0 2
12517: IFFALSE 13303
// begin normal :=  ;
12519: LD_ADDR_VAR 0 5
12523: PUSH
12524: LD_STRING 
12526: ST_TO_ADDR
// hardcore :=  ;
12527: LD_ADDR_VAR 0 6
12531: PUSH
12532: LD_STRING 
12534: ST_TO_ADDR
// active :=  ;
12535: LD_ADDR_VAR 0 7
12539: PUSH
12540: LD_STRING 
12542: ST_TO_ADDR
// for i = 1 to normalCounter do
12543: LD_ADDR_VAR 0 8
12547: PUSH
12548: DOUBLE
12549: LD_INT 1
12551: DEC
12552: ST_TO_ADDR
12553: LD_EXP 44
12557: PUSH
12558: FOR_TO
12559: IFFALSE 12660
// begin tmp := 0 ;
12561: LD_ADDR_VAR 0 3
12565: PUSH
12566: LD_STRING 0
12568: ST_TO_ADDR
// if result [ 1 ] then
12569: LD_VAR 0 2
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: IFFALSE 12642
// if result [ 1 ] [ 1 ] = i then
12579: LD_VAR 0 2
12583: PUSH
12584: LD_INT 1
12586: ARRAY
12587: PUSH
12588: LD_INT 1
12590: ARRAY
12591: PUSH
12592: LD_VAR 0 8
12596: EQUAL
12597: IFFALSE 12642
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12599: LD_ADDR_VAR 0 2
12603: PUSH
12604: LD_VAR 0 2
12608: PPUSH
12609: LD_INT 1
12611: PPUSH
12612: LD_VAR 0 2
12616: PUSH
12617: LD_INT 1
12619: ARRAY
12620: PPUSH
12621: LD_INT 1
12623: PPUSH
12624: CALL_OW 3
12628: PPUSH
12629: CALL_OW 1
12633: ST_TO_ADDR
// tmp := 1 ;
12634: LD_ADDR_VAR 0 3
12638: PUSH
12639: LD_STRING 1
12641: ST_TO_ADDR
// end ; normal := normal & tmp ;
12642: LD_ADDR_VAR 0 5
12646: PUSH
12647: LD_VAR 0 5
12651: PUSH
12652: LD_VAR 0 3
12656: STR
12657: ST_TO_ADDR
// end ;
12658: GO 12558
12660: POP
12661: POP
// for i = 1 to hardcoreCounter do
12662: LD_ADDR_VAR 0 8
12666: PUSH
12667: DOUBLE
12668: LD_INT 1
12670: DEC
12671: ST_TO_ADDR
12672: LD_EXP 45
12676: PUSH
12677: FOR_TO
12678: IFFALSE 12783
// begin tmp := 0 ;
12680: LD_ADDR_VAR 0 3
12684: PUSH
12685: LD_STRING 0
12687: ST_TO_ADDR
// if result [ 2 ] then
12688: LD_VAR 0 2
12692: PUSH
12693: LD_INT 2
12695: ARRAY
12696: IFFALSE 12765
// if result [ 2 ] [ 1 ] = 100 + i then
12698: LD_VAR 0 2
12702: PUSH
12703: LD_INT 2
12705: ARRAY
12706: PUSH
12707: LD_INT 1
12709: ARRAY
12710: PUSH
12711: LD_INT 100
12713: PUSH
12714: LD_VAR 0 8
12718: PLUS
12719: EQUAL
12720: IFFALSE 12765
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12722: LD_ADDR_VAR 0 2
12726: PUSH
12727: LD_VAR 0 2
12731: PPUSH
12732: LD_INT 2
12734: PPUSH
12735: LD_VAR 0 2
12739: PUSH
12740: LD_INT 2
12742: ARRAY
12743: PPUSH
12744: LD_INT 1
12746: PPUSH
12747: CALL_OW 3
12751: PPUSH
12752: CALL_OW 1
12756: ST_TO_ADDR
// tmp := 1 ;
12757: LD_ADDR_VAR 0 3
12761: PUSH
12762: LD_STRING 1
12764: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12765: LD_ADDR_VAR 0 6
12769: PUSH
12770: LD_VAR 0 6
12774: PUSH
12775: LD_VAR 0 3
12779: STR
12780: ST_TO_ADDR
// end ;
12781: GO 12677
12783: POP
12784: POP
// if isGameLoad then
12785: LD_VAR 0 1
12789: IFFALSE 13264
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
12791: LD_ADDR_VAR 0 4
12795: PUSH
12796: LD_EXP 48
12800: PUSH
12801: LD_EXP 47
12805: PUSH
12806: LD_EXP 49
12810: PUSH
12811: LD_EXP 46
12815: PUSH
12816: LD_EXP 50
12820: PUSH
12821: LD_EXP 51
12825: PUSH
12826: LD_EXP 52
12830: PUSH
12831: LD_EXP 53
12835: PUSH
12836: LD_EXP 54
12840: PUSH
12841: LD_EXP 55
12845: PUSH
12846: LD_EXP 56
12850: PUSH
12851: LD_EXP 57
12855: PUSH
12856: LD_EXP 58
12860: PUSH
12861: LD_EXP 59
12865: PUSH
12866: LD_EXP 67
12870: PUSH
12871: LD_EXP 68
12875: PUSH
12876: LD_EXP 69
12880: PUSH
12881: LD_EXP 70
12885: PUSH
12886: LD_EXP 72
12890: PUSH
12891: LD_EXP 73
12895: PUSH
12896: LD_EXP 74
12900: PUSH
12901: LD_EXP 77
12905: PUSH
12906: LD_EXP 79
12910: PUSH
12911: LD_EXP 80
12915: PUSH
12916: LD_EXP 81
12920: PUSH
12921: LD_EXP 83
12925: PUSH
12926: LD_EXP 84
12930: PUSH
12931: LD_EXP 87
12935: PUSH
12936: LD_EXP 88
12940: PUSH
12941: LD_EXP 89
12945: PUSH
12946: LD_EXP 90
12950: PUSH
12951: LD_EXP 91
12955: PUSH
12956: LD_EXP 92
12960: PUSH
12961: LD_EXP 93
12965: PUSH
12966: LD_EXP 94
12970: PUSH
12971: LD_EXP 95
12975: PUSH
12976: LD_EXP 60
12980: PUSH
12981: LD_EXP 61
12985: PUSH
12986: LD_EXP 64
12990: PUSH
12991: LD_EXP 65
12995: PUSH
12996: LD_EXP 66
13000: PUSH
13001: LD_EXP 62
13005: PUSH
13006: LD_EXP 63
13010: PUSH
13011: LD_EXP 71
13015: PUSH
13016: LD_EXP 75
13020: PUSH
13021: LD_EXP 76
13025: PUSH
13026: LD_EXP 78
13030: PUSH
13031: LD_EXP 82
13035: PUSH
13036: LD_EXP 85
13040: PUSH
13041: LD_EXP 86
13045: PUSH
13046: LD_EXP 96
13050: PUSH
13051: LD_EXP 97
13055: PUSH
13056: LD_EXP 98
13060: PUSH
13061: LD_EXP 99
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: LIST
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: ST_TO_ADDR
// tmp :=  ;
13122: LD_ADDR_VAR 0 3
13126: PUSH
13127: LD_STRING 
13129: ST_TO_ADDR
// for i = 1 to normalCounter do
13130: LD_ADDR_VAR 0 8
13134: PUSH
13135: DOUBLE
13136: LD_INT 1
13138: DEC
13139: ST_TO_ADDR
13140: LD_EXP 44
13144: PUSH
13145: FOR_TO
13146: IFFALSE 13182
// begin if flags [ i ] then
13148: LD_VAR 0 4
13152: PUSH
13153: LD_VAR 0 8
13157: ARRAY
13158: IFFALSE 13180
// tmp := tmp & i & ; ;
13160: LD_ADDR_VAR 0 3
13164: PUSH
13165: LD_VAR 0 3
13169: PUSH
13170: LD_VAR 0 8
13174: STR
13175: PUSH
13176: LD_STRING ;
13178: STR
13179: ST_TO_ADDR
// end ;
13180: GO 13145
13182: POP
13183: POP
// for i = 1 to hardcoreCounter do
13184: LD_ADDR_VAR 0 8
13188: PUSH
13189: DOUBLE
13190: LD_INT 1
13192: DEC
13193: ST_TO_ADDR
13194: LD_EXP 45
13198: PUSH
13199: FOR_TO
13200: IFFALSE 13246
// begin if flags [ normalCounter + i ] then
13202: LD_VAR 0 4
13206: PUSH
13207: LD_EXP 44
13211: PUSH
13212: LD_VAR 0 8
13216: PLUS
13217: ARRAY
13218: IFFALSE 13244
// tmp := tmp & ( 100 + i ) & ; ;
13220: LD_ADDR_VAR 0 3
13224: PUSH
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 100
13232: PUSH
13233: LD_VAR 0 8
13237: PLUS
13238: STR
13239: PUSH
13240: LD_STRING ;
13242: STR
13243: ST_TO_ADDR
// end ;
13244: GO 13199
13246: POP
13247: POP
// if tmp then
13248: LD_VAR 0 3
13252: IFFALSE 13264
// active := tmp ;
13254: LD_ADDR_VAR 0 7
13258: PUSH
13259: LD_VAR 0 3
13263: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13264: LD_STRING getStreamItemsFromMission("
13266: PUSH
13267: LD_VAR 0 5
13271: STR
13272: PUSH
13273: LD_STRING ","
13275: STR
13276: PUSH
13277: LD_VAR 0 6
13281: STR
13282: PUSH
13283: LD_STRING ","
13285: STR
13286: PUSH
13287: LD_VAR 0 7
13291: STR
13292: PUSH
13293: LD_STRING ")
13295: STR
13296: PPUSH
13297: CALL_OW 559
// end else
13301: GO 13310
// ToLua ( getStreamItemsFromMission("","","") ) ;
13303: LD_STRING getStreamItemsFromMission("","","")
13305: PPUSH
13306: CALL_OW 559
// end ;
13310: LD_VAR 0 2
13314: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13315: LD_EXP 43
13319: PUSH
13320: LD_EXP 48
13324: AND
13325: IFFALSE 13449
13327: GO 13329
13329: DISABLE
13330: LD_INT 0
13332: PPUSH
13333: PPUSH
// begin enable ;
13334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13335: LD_ADDR_VAR 0 2
13339: PUSH
13340: LD_INT 22
13342: PUSH
13343: LD_OWVAR 2
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: LD_INT 2
13354: PUSH
13355: LD_INT 34
13357: PUSH
13358: LD_INT 7
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 34
13367: PUSH
13368: LD_INT 45
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: PUSH
13375: LD_INT 34
13377: PUSH
13378: LD_INT 28
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 34
13387: PUSH
13388: LD_INT 47
13390: PUSH
13391: EMPTY
13392: LIST
13393: LIST
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not tmp then
13411: LD_VAR 0 2
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13449
// for i in tmp do
13420: LD_ADDR_VAR 0 1
13424: PUSH
13425: LD_VAR 0 2
13429: PUSH
13430: FOR_IN
13431: IFFALSE 13447
// begin SetLives ( i , 0 ) ;
13433: LD_VAR 0 1
13437: PPUSH
13438: LD_INT 0
13440: PPUSH
13441: CALL_OW 234
// end ;
13445: GO 13430
13447: POP
13448: POP
// end ;
13449: PPOPN 2
13451: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13452: LD_EXP 43
13456: PUSH
13457: LD_EXP 49
13461: AND
13462: IFFALSE 13546
13464: GO 13466
13466: DISABLE
13467: LD_INT 0
13469: PPUSH
13470: PPUSH
// begin enable ;
13471: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_OWVAR 2
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 32
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// if not tmp then
13508: LD_VAR 0 2
13512: NOT
13513: IFFALSE 13517
// exit ;
13515: GO 13546
// for i in tmp do
13517: LD_ADDR_VAR 0 1
13521: PUSH
13522: LD_VAR 0 2
13526: PUSH
13527: FOR_IN
13528: IFFALSE 13544
// begin SetLives ( i , 0 ) ;
13530: LD_VAR 0 1
13534: PPUSH
13535: LD_INT 0
13537: PPUSH
13538: CALL_OW 234
// end ;
13542: GO 13527
13544: POP
13545: POP
// end ;
13546: PPOPN 2
13548: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13549: LD_EXP 43
13553: PUSH
13554: LD_EXP 46
13558: AND
13559: IFFALSE 13652
13561: GO 13563
13563: DISABLE
13564: LD_INT 0
13566: PPUSH
// begin enable ;
13567: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13568: LD_ADDR_VAR 0 1
13572: PUSH
13573: LD_INT 22
13575: PUSH
13576: LD_OWVAR 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 2
13587: PUSH
13588: LD_INT 25
13590: PUSH
13591: LD_INT 5
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 25
13600: PUSH
13601: LD_INT 9
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 25
13610: PUSH
13611: LD_INT 8
13613: PUSH
13614: EMPTY
13615: LIST
13616: LIST
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 69
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13650
// begin SetClass ( i , 1 ) ;
13636: LD_VAR 0 1
13640: PPUSH
13641: LD_INT 1
13643: PPUSH
13644: CALL_OW 336
// end ;
13648: GO 13633
13650: POP
13651: POP
// end ;
13652: PPOPN 1
13654: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13655: LD_EXP 43
13659: PUSH
13660: LD_EXP 47
13664: AND
13665: PUSH
13666: LD_OWVAR 65
13670: PUSH
13671: LD_INT 7
13673: LESS
13674: AND
13675: IFFALSE 13689
13677: GO 13679
13679: DISABLE
// begin enable ;
13680: ENABLE
// game_speed := 7 ;
13681: LD_ADDR_OWVAR 65
13685: PUSH
13686: LD_INT 7
13688: ST_TO_ADDR
// end ;
13689: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13690: LD_EXP 43
13694: PUSH
13695: LD_EXP 50
13699: AND
13700: IFFALSE 13902
13702: GO 13704
13704: DISABLE
13705: LD_INT 0
13707: PPUSH
13708: PPUSH
13709: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13710: LD_ADDR_VAR 0 3
13714: PUSH
13715: LD_INT 81
13717: PUSH
13718: LD_OWVAR 2
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 21
13729: PUSH
13730: LD_INT 1
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PPUSH
13741: CALL_OW 69
13745: ST_TO_ADDR
// if not tmp then
13746: LD_VAR 0 3
13750: NOT
13751: IFFALSE 13755
// exit ;
13753: GO 13902
// if tmp > 5 then
13755: LD_VAR 0 3
13759: PUSH
13760: LD_INT 5
13762: GREATER
13763: IFFALSE 13775
// k := 5 else
13765: LD_ADDR_VAR 0 2
13769: PUSH
13770: LD_INT 5
13772: ST_TO_ADDR
13773: GO 13785
// k := tmp ;
13775: LD_ADDR_VAR 0 2
13779: PUSH
13780: LD_VAR 0 3
13784: ST_TO_ADDR
// for i := 1 to k do
13785: LD_ADDR_VAR 0 1
13789: PUSH
13790: DOUBLE
13791: LD_INT 1
13793: DEC
13794: ST_TO_ADDR
13795: LD_VAR 0 2
13799: PUSH
13800: FOR_TO
13801: IFFALSE 13900
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13803: LD_VAR 0 3
13807: PUSH
13808: LD_VAR 0 1
13812: ARRAY
13813: PPUSH
13814: LD_VAR 0 1
13818: PUSH
13819: LD_INT 4
13821: MOD
13822: PUSH
13823: LD_INT 1
13825: PLUS
13826: PPUSH
13827: CALL_OW 259
13831: PUSH
13832: LD_INT 10
13834: LESS
13835: IFFALSE 13898
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13837: LD_VAR 0 3
13841: PUSH
13842: LD_VAR 0 1
13846: ARRAY
13847: PPUSH
13848: LD_VAR 0 1
13852: PUSH
13853: LD_INT 4
13855: MOD
13856: PUSH
13857: LD_INT 1
13859: PLUS
13860: PPUSH
13861: LD_VAR 0 3
13865: PUSH
13866: LD_VAR 0 1
13870: ARRAY
13871: PPUSH
13872: LD_VAR 0 1
13876: PUSH
13877: LD_INT 4
13879: MOD
13880: PUSH
13881: LD_INT 1
13883: PLUS
13884: PPUSH
13885: CALL_OW 259
13889: PUSH
13890: LD_INT 1
13892: PLUS
13893: PPUSH
13894: CALL_OW 237
13898: GO 13800
13900: POP
13901: POP
// end ;
13902: PPOPN 3
13904: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13905: LD_EXP 43
13909: PUSH
13910: LD_EXP 51
13914: AND
13915: IFFALSE 13935
13917: GO 13919
13919: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13920: LD_INT 4
13922: PPUSH
13923: LD_OWVAR 2
13927: PPUSH
13928: LD_INT 0
13930: PPUSH
13931: CALL_OW 324
13935: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13936: LD_EXP 43
13940: PUSH
13941: LD_EXP 80
13945: AND
13946: IFFALSE 13966
13948: GO 13950
13950: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13951: LD_INT 19
13953: PPUSH
13954: LD_OWVAR 2
13958: PPUSH
13959: LD_INT 0
13961: PPUSH
13962: CALL_OW 324
13966: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13967: LD_EXP 43
13971: PUSH
13972: LD_EXP 52
13976: AND
13977: IFFALSE 14079
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
// begin enable ;
13986: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13987: LD_ADDR_VAR 0 2
13991: PUSH
13992: LD_INT 22
13994: PUSH
13995: LD_OWVAR 2
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 34
14009: PUSH
14010: LD_INT 11
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 34
14019: PUSH
14020: LD_INT 30
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PPUSH
14036: CALL_OW 69
14040: ST_TO_ADDR
// if not tmp then
14041: LD_VAR 0 2
14045: NOT
14046: IFFALSE 14050
// exit ;
14048: GO 14079
// for i in tmp do
14050: LD_ADDR_VAR 0 1
14054: PUSH
14055: LD_VAR 0 2
14059: PUSH
14060: FOR_IN
14061: IFFALSE 14077
// begin SetLives ( i , 0 ) ;
14063: LD_VAR 0 1
14067: PPUSH
14068: LD_INT 0
14070: PPUSH
14071: CALL_OW 234
// end ;
14075: GO 14060
14077: POP
14078: POP
// end ;
14079: PPOPN 2
14081: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14082: LD_EXP 43
14086: PUSH
14087: LD_EXP 53
14091: AND
14092: IFFALSE 14112
14094: GO 14096
14096: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14097: LD_INT 32
14099: PPUSH
14100: LD_OWVAR 2
14104: PPUSH
14105: LD_INT 0
14107: PPUSH
14108: CALL_OW 324
14112: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14113: LD_EXP 43
14117: PUSH
14118: LD_EXP 54
14122: AND
14123: IFFALSE 14304
14125: GO 14127
14127: DISABLE
14128: LD_INT 0
14130: PPUSH
14131: PPUSH
14132: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14133: LD_ADDR_VAR 0 2
14137: PUSH
14138: LD_INT 22
14140: PUSH
14141: LD_OWVAR 2
14145: PUSH
14146: EMPTY
14147: LIST
14148: LIST
14149: PUSH
14150: LD_INT 33
14152: PUSH
14153: LD_INT 3
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: ST_TO_ADDR
// if not tmp then
14169: LD_VAR 0 2
14173: NOT
14174: IFFALSE 14178
// exit ;
14176: GO 14304
// side := 0 ;
14178: LD_ADDR_VAR 0 3
14182: PUSH
14183: LD_INT 0
14185: ST_TO_ADDR
// for i := 1 to 8 do
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: DOUBLE
14192: LD_INT 1
14194: DEC
14195: ST_TO_ADDR
14196: LD_INT 8
14198: PUSH
14199: FOR_TO
14200: IFFALSE 14248
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14202: LD_OWVAR 2
14206: PUSH
14207: LD_VAR 0 1
14211: NONEQUAL
14212: PUSH
14213: LD_OWVAR 2
14217: PPUSH
14218: LD_VAR 0 1
14222: PPUSH
14223: CALL_OW 81
14227: PUSH
14228: LD_INT 2
14230: EQUAL
14231: AND
14232: IFFALSE 14246
// begin side := i ;
14234: LD_ADDR_VAR 0 3
14238: PUSH
14239: LD_VAR 0 1
14243: ST_TO_ADDR
// break ;
14244: GO 14248
// end ;
14246: GO 14199
14248: POP
14249: POP
// if not side then
14250: LD_VAR 0 3
14254: NOT
14255: IFFALSE 14259
// exit ;
14257: GO 14304
// for i := 1 to tmp do
14259: LD_ADDR_VAR 0 1
14263: PUSH
14264: DOUBLE
14265: LD_INT 1
14267: DEC
14268: ST_TO_ADDR
14269: LD_VAR 0 2
14273: PUSH
14274: FOR_TO
14275: IFFALSE 14302
// if Prob ( 60 ) then
14277: LD_INT 60
14279: PPUSH
14280: CALL_OW 13
14284: IFFALSE 14300
// SetSide ( i , side ) ;
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_VAR 0 3
14295: PPUSH
14296: CALL_OW 235
14300: GO 14274
14302: POP
14303: POP
// end ;
14304: PPOPN 3
14306: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14307: LD_EXP 43
14311: PUSH
14312: LD_EXP 56
14316: AND
14317: IFFALSE 14436
14319: GO 14321
14321: DISABLE
14322: LD_INT 0
14324: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14325: LD_ADDR_VAR 0 1
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_OWVAR 2
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 21
14344: PUSH
14345: LD_INT 1
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: LD_INT 23
14357: PUSH
14358: LD_INT 0
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: PPUSH
14374: CALL_OW 69
14378: PUSH
14379: FOR_IN
14380: IFFALSE 14434
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14382: LD_VAR 0 1
14386: PPUSH
14387: CALL_OW 257
14391: PUSH
14392: LD_INT 1
14394: PUSH
14395: LD_INT 2
14397: PUSH
14398: LD_INT 3
14400: PUSH
14401: LD_INT 4
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: IN
14410: IFFALSE 14432
// SetClass ( un , rand ( 1 , 4 ) ) ;
14412: LD_VAR 0 1
14416: PPUSH
14417: LD_INT 1
14419: PPUSH
14420: LD_INT 4
14422: PPUSH
14423: CALL_OW 12
14427: PPUSH
14428: CALL_OW 336
14432: GO 14379
14434: POP
14435: POP
// end ;
14436: PPOPN 1
14438: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14439: LD_EXP 43
14443: PUSH
14444: LD_EXP 55
14448: AND
14449: IFFALSE 14528
14451: GO 14453
14453: DISABLE
14454: LD_INT 0
14456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 22
14464: PUSH
14465: LD_OWVAR 2
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 21
14476: PUSH
14477: LD_INT 3
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PPUSH
14488: CALL_OW 69
14492: ST_TO_ADDR
// if not tmp then
14493: LD_VAR 0 1
14497: NOT
14498: IFFALSE 14502
// exit ;
14500: GO 14528
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14502: LD_VAR 0 1
14506: PUSH
14507: LD_INT 1
14509: PPUSH
14510: LD_VAR 0 1
14514: PPUSH
14515: CALL_OW 12
14519: ARRAY
14520: PPUSH
14521: LD_INT 100
14523: PPUSH
14524: CALL_OW 234
// end ;
14528: PPOPN 1
14530: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14531: LD_EXP 43
14535: PUSH
14536: LD_EXP 57
14540: AND
14541: IFFALSE 14639
14543: GO 14545
14545: DISABLE
14546: LD_INT 0
14548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14549: LD_ADDR_VAR 0 1
14553: PUSH
14554: LD_INT 22
14556: PUSH
14557: LD_OWVAR 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 1
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: ST_TO_ADDR
// if not tmp then
14585: LD_VAR 0 1
14589: NOT
14590: IFFALSE 14594
// exit ;
14592: GO 14639
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14594: LD_VAR 0 1
14598: PUSH
14599: LD_INT 1
14601: PPUSH
14602: LD_VAR 0 1
14606: PPUSH
14607: CALL_OW 12
14611: ARRAY
14612: PPUSH
14613: LD_INT 1
14615: PPUSH
14616: LD_INT 4
14618: PPUSH
14619: CALL_OW 12
14623: PPUSH
14624: LD_INT 3000
14626: PPUSH
14627: LD_INT 9000
14629: PPUSH
14630: CALL_OW 12
14634: PPUSH
14635: CALL_OW 492
// end ;
14639: PPOPN 1
14641: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14642: LD_EXP 43
14646: PUSH
14647: LD_EXP 58
14651: AND
14652: IFFALSE 14672
14654: GO 14656
14656: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14657: LD_INT 1
14659: PPUSH
14660: LD_OWVAR 2
14664: PPUSH
14665: LD_INT 0
14667: PPUSH
14668: CALL_OW 324
14672: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14673: LD_EXP 43
14677: PUSH
14678: LD_EXP 59
14682: AND
14683: IFFALSE 14766
14685: GO 14687
14687: DISABLE
14688: LD_INT 0
14690: PPUSH
14691: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14692: LD_ADDR_VAR 0 2
14696: PUSH
14697: LD_INT 22
14699: PUSH
14700: LD_OWVAR 2
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PUSH
14709: LD_INT 21
14711: PUSH
14712: LD_INT 3
14714: PUSH
14715: EMPTY
14716: LIST
14717: LIST
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PPUSH
14723: CALL_OW 69
14727: ST_TO_ADDR
// if not tmp then
14728: LD_VAR 0 2
14732: NOT
14733: IFFALSE 14737
// exit ;
14735: GO 14766
// for i in tmp do
14737: LD_ADDR_VAR 0 1
14741: PUSH
14742: LD_VAR 0 2
14746: PUSH
14747: FOR_IN
14748: IFFALSE 14764
// SetBLevel ( i , 10 ) ;
14750: LD_VAR 0 1
14754: PPUSH
14755: LD_INT 10
14757: PPUSH
14758: CALL_OW 241
14762: GO 14747
14764: POP
14765: POP
// end ;
14766: PPOPN 2
14768: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14769: LD_EXP 43
14773: PUSH
14774: LD_EXP 60
14778: AND
14779: IFFALSE 14890
14781: GO 14783
14783: DISABLE
14784: LD_INT 0
14786: PPUSH
14787: PPUSH
14788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14789: LD_ADDR_VAR 0 3
14793: PUSH
14794: LD_INT 22
14796: PUSH
14797: LD_OWVAR 2
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 25
14808: PUSH
14809: LD_INT 1
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PPUSH
14820: CALL_OW 69
14824: ST_TO_ADDR
// if not tmp then
14825: LD_VAR 0 3
14829: NOT
14830: IFFALSE 14834
// exit ;
14832: GO 14890
// un := tmp [ rand ( 1 , tmp ) ] ;
14834: LD_ADDR_VAR 0 2
14838: PUSH
14839: LD_VAR 0 3
14843: PUSH
14844: LD_INT 1
14846: PPUSH
14847: LD_VAR 0 3
14851: PPUSH
14852: CALL_OW 12
14856: ARRAY
14857: ST_TO_ADDR
// if Crawls ( un ) then
14858: LD_VAR 0 2
14862: PPUSH
14863: CALL_OW 318
14867: IFFALSE 14878
// ComWalk ( un ) ;
14869: LD_VAR 0 2
14873: PPUSH
14874: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14878: LD_VAR 0 2
14882: PPUSH
14883: LD_INT 5
14885: PPUSH
14886: CALL_OW 336
// end ;
14890: PPOPN 3
14892: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14893: LD_EXP 43
14897: PUSH
14898: LD_EXP 61
14902: AND
14903: PUSH
14904: LD_OWVAR 67
14908: PUSH
14909: LD_INT 4
14911: LESS
14912: AND
14913: IFFALSE 14932
14915: GO 14917
14917: DISABLE
// begin Difficulty := Difficulty + 1 ;
14918: LD_ADDR_OWVAR 67
14922: PUSH
14923: LD_OWVAR 67
14927: PUSH
14928: LD_INT 1
14930: PLUS
14931: ST_TO_ADDR
// end ;
14932: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14933: LD_EXP 43
14937: PUSH
14938: LD_EXP 62
14942: AND
14943: IFFALSE 15046
14945: GO 14947
14947: DISABLE
14948: LD_INT 0
14950: PPUSH
// begin for i := 1 to 5 do
14951: LD_ADDR_VAR 0 1
14955: PUSH
14956: DOUBLE
14957: LD_INT 1
14959: DEC
14960: ST_TO_ADDR
14961: LD_INT 5
14963: PUSH
14964: FOR_TO
14965: IFFALSE 15044
// begin uc_nation := nation_nature ;
14967: LD_ADDR_OWVAR 21
14971: PUSH
14972: LD_INT 0
14974: ST_TO_ADDR
// uc_side := 0 ;
14975: LD_ADDR_OWVAR 20
14979: PUSH
14980: LD_INT 0
14982: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14983: LD_ADDR_OWVAR 29
14987: PUSH
14988: LD_INT 12
14990: PUSH
14991: LD_INT 12
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: ST_TO_ADDR
// hc_agressivity := 20 ;
14998: LD_ADDR_OWVAR 35
15002: PUSH
15003: LD_INT 20
15005: ST_TO_ADDR
// hc_class := class_tiger ;
15006: LD_ADDR_OWVAR 28
15010: PUSH
15011: LD_INT 14
15013: ST_TO_ADDR
// hc_gallery :=  ;
15014: LD_ADDR_OWVAR 33
15018: PUSH
15019: LD_STRING 
15021: ST_TO_ADDR
// hc_name :=  ;
15022: LD_ADDR_OWVAR 26
15026: PUSH
15027: LD_STRING 
15029: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15030: CALL_OW 44
15034: PPUSH
15035: LD_INT 0
15037: PPUSH
15038: CALL_OW 51
// end ;
15042: GO 14964
15044: POP
15045: POP
// end ;
15046: PPOPN 1
15048: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15049: LD_EXP 43
15053: PUSH
15054: LD_EXP 63
15058: AND
15059: IFFALSE 15068
15061: GO 15063
15063: DISABLE
// StreamSibBomb ;
15064: CALL 15069 0 0
15068: END
// export function StreamSibBomb ; var i , x , y ; begin
15069: LD_INT 0
15071: PPUSH
15072: PPUSH
15073: PPUSH
15074: PPUSH
// result := false ;
15075: LD_ADDR_VAR 0 1
15079: PUSH
15080: LD_INT 0
15082: ST_TO_ADDR
// for i := 1 to 16 do
15083: LD_ADDR_VAR 0 2
15087: PUSH
15088: DOUBLE
15089: LD_INT 1
15091: DEC
15092: ST_TO_ADDR
15093: LD_INT 16
15095: PUSH
15096: FOR_TO
15097: IFFALSE 15296
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15099: LD_ADDR_VAR 0 3
15103: PUSH
15104: LD_INT 10
15106: PUSH
15107: LD_INT 20
15109: PUSH
15110: LD_INT 30
15112: PUSH
15113: LD_INT 40
15115: PUSH
15116: LD_INT 50
15118: PUSH
15119: LD_INT 60
15121: PUSH
15122: LD_INT 70
15124: PUSH
15125: LD_INT 80
15127: PUSH
15128: LD_INT 90
15130: PUSH
15131: LD_INT 100
15133: PUSH
15134: LD_INT 110
15136: PUSH
15137: LD_INT 120
15139: PUSH
15140: LD_INT 130
15142: PUSH
15143: LD_INT 140
15145: PUSH
15146: LD_INT 150
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: LD_INT 1
15168: PPUSH
15169: LD_INT 15
15171: PPUSH
15172: CALL_OW 12
15176: ARRAY
15177: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15178: LD_ADDR_VAR 0 4
15182: PUSH
15183: LD_INT 10
15185: PUSH
15186: LD_INT 20
15188: PUSH
15189: LD_INT 30
15191: PUSH
15192: LD_INT 40
15194: PUSH
15195: LD_INT 50
15197: PUSH
15198: LD_INT 60
15200: PUSH
15201: LD_INT 70
15203: PUSH
15204: LD_INT 80
15206: PUSH
15207: LD_INT 90
15209: PUSH
15210: LD_INT 100
15212: PUSH
15213: LD_INT 110
15215: PUSH
15216: LD_INT 120
15218: PUSH
15219: LD_INT 130
15221: PUSH
15222: LD_INT 140
15224: PUSH
15225: LD_INT 150
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: PUSH
15245: LD_INT 1
15247: PPUSH
15248: LD_INT 15
15250: PPUSH
15251: CALL_OW 12
15255: ARRAY
15256: ST_TO_ADDR
// if ValidHex ( x , y ) then
15257: LD_VAR 0 3
15261: PPUSH
15262: LD_VAR 0 4
15266: PPUSH
15267: CALL_OW 488
15271: IFFALSE 15294
// begin result := [ x , y ] ;
15273: LD_ADDR_VAR 0 1
15277: PUSH
15278: LD_VAR 0 3
15282: PUSH
15283: LD_VAR 0 4
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: ST_TO_ADDR
// break ;
15292: GO 15296
// end ; end ;
15294: GO 15096
15296: POP
15297: POP
// if result then
15298: LD_VAR 0 1
15302: IFFALSE 15362
// begin ToLua ( playSibBomb() ) ;
15304: LD_STRING playSibBomb()
15306: PPUSH
15307: CALL_OW 559
// wait ( 0 0$14 ) ;
15311: LD_INT 490
15313: PPUSH
15314: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15318: LD_VAR 0 1
15322: PUSH
15323: LD_INT 1
15325: ARRAY
15326: PPUSH
15327: LD_VAR 0 1
15331: PUSH
15332: LD_INT 2
15334: ARRAY
15335: PPUSH
15336: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15340: LD_VAR 0 1
15344: PUSH
15345: LD_INT 1
15347: ARRAY
15348: PPUSH
15349: LD_VAR 0 1
15353: PUSH
15354: LD_INT 2
15356: ARRAY
15357: PPUSH
15358: CALL_OW 429
// end ; end ;
15362: LD_VAR 0 1
15366: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15367: LD_EXP 43
15371: PUSH
15372: LD_EXP 65
15376: AND
15377: IFFALSE 15389
15379: GO 15381
15381: DISABLE
// YouLost (  ) ;
15382: LD_STRING 
15384: PPUSH
15385: CALL_OW 104
15389: END
// every 0 0$1 trigger StreamModeActive and sFog do
15390: LD_EXP 43
15394: PUSH
15395: LD_EXP 64
15399: AND
15400: IFFALSE 15414
15402: GO 15404
15404: DISABLE
// FogOff ( your_side ) ;
15405: LD_OWVAR 2
15409: PPUSH
15410: CALL_OW 344
15414: END
// every 0 0$1 trigger StreamModeActive and sSun do
15415: LD_EXP 43
15419: PUSH
15420: LD_EXP 66
15424: AND
15425: IFFALSE 15453
15427: GO 15429
15429: DISABLE
// begin solar_recharge_percent := 0 ;
15430: LD_ADDR_OWVAR 79
15434: PUSH
15435: LD_INT 0
15437: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15438: LD_INT 10500
15440: PPUSH
15441: CALL_OW 67
// solar_recharge_percent := 100 ;
15445: LD_ADDR_OWVAR 79
15449: PUSH
15450: LD_INT 100
15452: ST_TO_ADDR
// end ;
15453: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15454: LD_EXP 43
15458: PUSH
15459: LD_EXP 67
15463: AND
15464: IFFALSE 15703
15466: GO 15468
15468: DISABLE
15469: LD_INT 0
15471: PPUSH
15472: PPUSH
15473: PPUSH
// begin tmp := [ ] ;
15474: LD_ADDR_VAR 0 3
15478: PUSH
15479: EMPTY
15480: ST_TO_ADDR
// for i := 1 to 6 do
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: DOUBLE
15487: LD_INT 1
15489: DEC
15490: ST_TO_ADDR
15491: LD_INT 6
15493: PUSH
15494: FOR_TO
15495: IFFALSE 15600
// begin uc_nation := nation_nature ;
15497: LD_ADDR_OWVAR 21
15501: PUSH
15502: LD_INT 0
15504: ST_TO_ADDR
// uc_side := 0 ;
15505: LD_ADDR_OWVAR 20
15509: PUSH
15510: LD_INT 0
15512: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15513: LD_ADDR_OWVAR 29
15517: PUSH
15518: LD_INT 12
15520: PUSH
15521: LD_INT 12
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: ST_TO_ADDR
// hc_agressivity := 20 ;
15528: LD_ADDR_OWVAR 35
15532: PUSH
15533: LD_INT 20
15535: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15536: LD_ADDR_OWVAR 28
15540: PUSH
15541: LD_INT 17
15543: ST_TO_ADDR
// hc_gallery :=  ;
15544: LD_ADDR_OWVAR 33
15548: PUSH
15549: LD_STRING 
15551: ST_TO_ADDR
// hc_name :=  ;
15552: LD_ADDR_OWVAR 26
15556: PUSH
15557: LD_STRING 
15559: ST_TO_ADDR
// un := CreateHuman ;
15560: LD_ADDR_VAR 0 2
15564: PUSH
15565: CALL_OW 44
15569: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15570: LD_VAR 0 2
15574: PPUSH
15575: LD_INT 1
15577: PPUSH
15578: CALL_OW 51
// tmp := tmp ^ un ;
15582: LD_ADDR_VAR 0 3
15586: PUSH
15587: LD_VAR 0 3
15591: PUSH
15592: LD_VAR 0 2
15596: ADD
15597: ST_TO_ADDR
// end ;
15598: GO 15494
15600: POP
15601: POP
// repeat wait ( 0 0$1 ) ;
15602: LD_INT 35
15604: PPUSH
15605: CALL_OW 67
// for un in tmp do
15609: LD_ADDR_VAR 0 2
15613: PUSH
15614: LD_VAR 0 3
15618: PUSH
15619: FOR_IN
15620: IFFALSE 15694
// begin if IsDead ( un ) then
15622: LD_VAR 0 2
15626: PPUSH
15627: CALL_OW 301
15631: IFFALSE 15651
// begin tmp := tmp diff un ;
15633: LD_ADDR_VAR 0 3
15637: PUSH
15638: LD_VAR 0 3
15642: PUSH
15643: LD_VAR 0 2
15647: DIFF
15648: ST_TO_ADDR
// continue ;
15649: GO 15619
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15651: LD_VAR 0 2
15655: PPUSH
15656: LD_INT 3
15658: PUSH
15659: LD_INT 22
15661: PUSH
15662: LD_INT 0
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PPUSH
15673: CALL_OW 69
15677: PPUSH
15678: LD_VAR 0 2
15682: PPUSH
15683: CALL_OW 74
15687: PPUSH
15688: CALL_OW 115
// end ;
15692: GO 15619
15694: POP
15695: POP
// until not tmp ;
15696: LD_VAR 0 3
15700: NOT
15701: IFFALSE 15602
// end ;
15703: PPOPN 3
15705: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15706: LD_EXP 43
15710: PUSH
15711: LD_EXP 68
15715: AND
15716: IFFALSE 15770
15718: GO 15720
15720: DISABLE
// begin ToLua ( displayTroll(); ) ;
15721: LD_STRING displayTroll();
15723: PPUSH
15724: CALL_OW 559
// wait ( 3 3$00 ) ;
15728: LD_INT 6300
15730: PPUSH
15731: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15735: LD_STRING hideTroll();
15737: PPUSH
15738: CALL_OW 559
// wait ( 1 1$00 ) ;
15742: LD_INT 2100
15744: PPUSH
15745: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15749: LD_STRING displayTroll();
15751: PPUSH
15752: CALL_OW 559
// wait ( 1 1$00 ) ;
15756: LD_INT 2100
15758: PPUSH
15759: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15763: LD_STRING hideTroll();
15765: PPUSH
15766: CALL_OW 559
// end ;
15770: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15771: LD_EXP 43
15775: PUSH
15776: LD_EXP 69
15780: AND
15781: IFFALSE 15844
15783: GO 15785
15785: DISABLE
15786: LD_INT 0
15788: PPUSH
// begin p := 0 ;
15789: LD_ADDR_VAR 0 1
15793: PUSH
15794: LD_INT 0
15796: ST_TO_ADDR
// repeat game_speed := 1 ;
15797: LD_ADDR_OWVAR 65
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15805: LD_INT 35
15807: PPUSH
15808: CALL_OW 67
// p := p + 1 ;
15812: LD_ADDR_VAR 0 1
15816: PUSH
15817: LD_VAR 0 1
15821: PUSH
15822: LD_INT 1
15824: PLUS
15825: ST_TO_ADDR
// until p >= 60 ;
15826: LD_VAR 0 1
15830: PUSH
15831: LD_INT 60
15833: GREATEREQUAL
15834: IFFALSE 15797
// game_speed := 4 ;
15836: LD_ADDR_OWVAR 65
15840: PUSH
15841: LD_INT 4
15843: ST_TO_ADDR
// end ;
15844: PPOPN 1
15846: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15847: LD_EXP 43
15851: PUSH
15852: LD_EXP 70
15856: AND
15857: IFFALSE 16003
15859: GO 15861
15861: DISABLE
15862: LD_INT 0
15864: PPUSH
15865: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15866: LD_ADDR_VAR 0 1
15870: PUSH
15871: LD_INT 22
15873: PUSH
15874: LD_OWVAR 2
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 2
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 0
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 30
15898: PUSH
15899: LD_INT 1
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: LIST
15910: PUSH
15911: EMPTY
15912: LIST
15913: LIST
15914: PPUSH
15915: CALL_OW 69
15919: ST_TO_ADDR
// if not depot then
15920: LD_VAR 0 1
15924: NOT
15925: IFFALSE 15929
// exit ;
15927: GO 16003
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15929: LD_ADDR_VAR 0 2
15933: PUSH
15934: LD_VAR 0 1
15938: PUSH
15939: LD_INT 1
15941: PPUSH
15942: LD_VAR 0 1
15946: PPUSH
15947: CALL_OW 12
15951: ARRAY
15952: PPUSH
15953: CALL_OW 274
15957: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15958: LD_VAR 0 2
15962: PPUSH
15963: LD_INT 1
15965: PPUSH
15966: LD_INT 0
15968: PPUSH
15969: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15973: LD_VAR 0 2
15977: PPUSH
15978: LD_INT 2
15980: PPUSH
15981: LD_INT 0
15983: PPUSH
15984: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15988: LD_VAR 0 2
15992: PPUSH
15993: LD_INT 3
15995: PPUSH
15996: LD_INT 0
15998: PPUSH
15999: CALL_OW 277
// end ;
16003: PPOPN 2
16005: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16006: LD_EXP 43
16010: PUSH
16011: LD_EXP 71
16015: AND
16016: IFFALSE 16113
16018: GO 16020
16020: DISABLE
16021: LD_INT 0
16023: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16024: LD_ADDR_VAR 0 1
16028: PUSH
16029: LD_INT 22
16031: PUSH
16032: LD_OWVAR 2
16036: PUSH
16037: EMPTY
16038: LIST
16039: LIST
16040: PUSH
16041: LD_INT 21
16043: PUSH
16044: LD_INT 1
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: PUSH
16051: LD_INT 3
16053: PUSH
16054: LD_INT 23
16056: PUSH
16057: LD_INT 0
16059: PUSH
16060: EMPTY
16061: LIST
16062: LIST
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: PPUSH
16073: CALL_OW 69
16077: ST_TO_ADDR
// if not tmp then
16078: LD_VAR 0 1
16082: NOT
16083: IFFALSE 16087
// exit ;
16085: GO 16113
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 1
16094: PPUSH
16095: LD_VAR 0 1
16099: PPUSH
16100: CALL_OW 12
16104: ARRAY
16105: PPUSH
16106: LD_INT 200
16108: PPUSH
16109: CALL_OW 234
// end ;
16113: PPOPN 1
16115: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16116: LD_EXP 43
16120: PUSH
16121: LD_EXP 72
16125: AND
16126: IFFALSE 16205
16128: GO 16130
16130: DISABLE
16131: LD_INT 0
16133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16134: LD_ADDR_VAR 0 1
16138: PUSH
16139: LD_INT 22
16141: PUSH
16142: LD_OWVAR 2
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: PUSH
16151: LD_INT 21
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: EMPTY
16158: LIST
16159: LIST
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: PPUSH
16165: CALL_OW 69
16169: ST_TO_ADDR
// if not tmp then
16170: LD_VAR 0 1
16174: NOT
16175: IFFALSE 16179
// exit ;
16177: GO 16205
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16179: LD_VAR 0 1
16183: PUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 12
16196: ARRAY
16197: PPUSH
16198: LD_INT 60
16200: PPUSH
16201: CALL_OW 234
// end ;
16205: PPOPN 1
16207: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16208: LD_EXP 43
16212: PUSH
16213: LD_EXP 73
16217: AND
16218: IFFALSE 16317
16220: GO 16222
16222: DISABLE
16223: LD_INT 0
16225: PPUSH
16226: PPUSH
// begin enable ;
16227: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16228: LD_ADDR_VAR 0 1
16232: PUSH
16233: LD_INT 22
16235: PUSH
16236: LD_OWVAR 2
16240: PUSH
16241: EMPTY
16242: LIST
16243: LIST
16244: PUSH
16245: LD_INT 61
16247: PUSH
16248: EMPTY
16249: LIST
16250: PUSH
16251: LD_INT 33
16253: PUSH
16254: LD_INT 2
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL_OW 69
16270: ST_TO_ADDR
// if not tmp then
16271: LD_VAR 0 1
16275: NOT
16276: IFFALSE 16280
// exit ;
16278: GO 16317
// for i in tmp do
16280: LD_ADDR_VAR 0 2
16284: PUSH
16285: LD_VAR 0 1
16289: PUSH
16290: FOR_IN
16291: IFFALSE 16315
// if IsControledBy ( i ) then
16293: LD_VAR 0 2
16297: PPUSH
16298: CALL_OW 312
16302: IFFALSE 16313
// ComUnlink ( i ) ;
16304: LD_VAR 0 2
16308: PPUSH
16309: CALL_OW 136
16313: GO 16290
16315: POP
16316: POP
// end ;
16317: PPOPN 2
16319: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16320: LD_EXP 43
16324: PUSH
16325: LD_EXP 74
16329: AND
16330: IFFALSE 16470
16332: GO 16334
16334: DISABLE
16335: LD_INT 0
16337: PPUSH
16338: PPUSH
// begin ToLua ( displayPowell(); ) ;
16339: LD_STRING displayPowell();
16341: PPUSH
16342: CALL_OW 559
// uc_side := 0 ;
16346: LD_ADDR_OWVAR 20
16350: PUSH
16351: LD_INT 0
16353: ST_TO_ADDR
// uc_nation := 2 ;
16354: LD_ADDR_OWVAR 21
16358: PUSH
16359: LD_INT 2
16361: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16362: LD_ADDR_OWVAR 37
16366: PUSH
16367: LD_INT 14
16369: ST_TO_ADDR
// vc_engine := engine_siberite ;
16370: LD_ADDR_OWVAR 39
16374: PUSH
16375: LD_INT 3
16377: ST_TO_ADDR
// vc_control := control_apeman ;
16378: LD_ADDR_OWVAR 38
16382: PUSH
16383: LD_INT 5
16385: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16386: LD_ADDR_OWVAR 40
16390: PUSH
16391: LD_INT 29
16393: ST_TO_ADDR
// un := CreateVehicle ;
16394: LD_ADDR_VAR 0 2
16398: PUSH
16399: CALL_OW 45
16403: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16404: LD_VAR 0 2
16408: PPUSH
16409: LD_INT 1
16411: PPUSH
16412: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16416: LD_INT 35
16418: PPUSH
16419: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16423: LD_VAR 0 2
16427: PPUSH
16428: LD_INT 22
16430: PUSH
16431: LD_OWVAR 2
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: PPUSH
16440: CALL_OW 69
16444: PPUSH
16445: LD_VAR 0 2
16449: PPUSH
16450: CALL_OW 74
16454: PPUSH
16455: CALL_OW 115
// until IsDead ( un ) ;
16459: LD_VAR 0 2
16463: PPUSH
16464: CALL_OW 301
16468: IFFALSE 16416
// end ;
16470: PPOPN 2
16472: END
// every 0 0$1 trigger StreamModeActive and sStu do
16473: LD_EXP 43
16477: PUSH
16478: LD_EXP 82
16482: AND
16483: IFFALSE 16499
16485: GO 16487
16487: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16488: LD_STRING displayStucuk();
16490: PPUSH
16491: CALL_OW 559
// ResetFog ;
16495: CALL_OW 335
// end ;
16499: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16500: LD_EXP 43
16504: PUSH
16505: LD_EXP 75
16509: AND
16510: IFFALSE 16651
16512: GO 16514
16514: DISABLE
16515: LD_INT 0
16517: PPUSH
16518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: LD_INT 22
16526: PUSH
16527: LD_OWVAR 2
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 21
16538: PUSH
16539: LD_INT 1
16541: PUSH
16542: EMPTY
16543: LIST
16544: LIST
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PPUSH
16550: CALL_OW 69
16554: ST_TO_ADDR
// if not tmp then
16555: LD_VAR 0 2
16559: NOT
16560: IFFALSE 16564
// exit ;
16562: GO 16651
// un := tmp [ rand ( 1 , tmp ) ] ;
16564: LD_ADDR_VAR 0 1
16568: PUSH
16569: LD_VAR 0 2
16573: PUSH
16574: LD_INT 1
16576: PPUSH
16577: LD_VAR 0 2
16581: PPUSH
16582: CALL_OW 12
16586: ARRAY
16587: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16588: LD_VAR 0 1
16592: PPUSH
16593: LD_INT 0
16595: PPUSH
16596: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_OWVAR 3
16609: PUSH
16610: LD_VAR 0 1
16614: DIFF
16615: PPUSH
16616: LD_VAR 0 1
16620: PPUSH
16621: CALL_OW 74
16625: PPUSH
16626: CALL_OW 115
// wait ( 0 0$20 ) ;
16630: LD_INT 700
16632: PPUSH
16633: CALL_OW 67
// SetSide ( un , your_side ) ;
16637: LD_VAR 0 1
16641: PPUSH
16642: LD_OWVAR 2
16646: PPUSH
16647: CALL_OW 235
// end ;
16651: PPOPN 2
16653: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16654: LD_EXP 43
16658: PUSH
16659: LD_EXP 76
16663: AND
16664: IFFALSE 16770
16666: GO 16668
16668: DISABLE
16669: LD_INT 0
16671: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16672: LD_ADDR_VAR 0 1
16676: PUSH
16677: LD_INT 22
16679: PUSH
16680: LD_OWVAR 2
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 2
16691: PUSH
16692: LD_INT 30
16694: PUSH
16695: LD_INT 0
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: LD_INT 30
16704: PUSH
16705: LD_INT 1
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: PPUSH
16721: CALL_OW 69
16725: ST_TO_ADDR
// if not depot then
16726: LD_VAR 0 1
16730: NOT
16731: IFFALSE 16735
// exit ;
16733: GO 16770
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16735: LD_VAR 0 1
16739: PUSH
16740: LD_INT 1
16742: ARRAY
16743: PPUSH
16744: CALL_OW 250
16748: PPUSH
16749: LD_VAR 0 1
16753: PUSH
16754: LD_INT 1
16756: ARRAY
16757: PPUSH
16758: CALL_OW 251
16762: PPUSH
16763: LD_INT 70
16765: PPUSH
16766: CALL_OW 495
// end ;
16770: PPOPN 1
16772: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16773: LD_EXP 43
16777: PUSH
16778: LD_EXP 77
16782: AND
16783: IFFALSE 16994
16785: GO 16787
16787: DISABLE
16788: LD_INT 0
16790: PPUSH
16791: PPUSH
16792: PPUSH
16793: PPUSH
16794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16795: LD_ADDR_VAR 0 5
16799: PUSH
16800: LD_INT 22
16802: PUSH
16803: LD_OWVAR 2
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PUSH
16812: LD_INT 21
16814: PUSH
16815: LD_INT 1
16817: PUSH
16818: EMPTY
16819: LIST
16820: LIST
16821: PUSH
16822: EMPTY
16823: LIST
16824: LIST
16825: PPUSH
16826: CALL_OW 69
16830: ST_TO_ADDR
// if not tmp then
16831: LD_VAR 0 5
16835: NOT
16836: IFFALSE 16840
// exit ;
16838: GO 16994
// for i in tmp do
16840: LD_ADDR_VAR 0 1
16844: PUSH
16845: LD_VAR 0 5
16849: PUSH
16850: FOR_IN
16851: IFFALSE 16992
// begin d := rand ( 0 , 5 ) ;
16853: LD_ADDR_VAR 0 4
16857: PUSH
16858: LD_INT 0
16860: PPUSH
16861: LD_INT 5
16863: PPUSH
16864: CALL_OW 12
16868: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16869: LD_ADDR_VAR 0 2
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 250
16883: PPUSH
16884: LD_VAR 0 4
16888: PPUSH
16889: LD_INT 3
16891: PPUSH
16892: LD_INT 12
16894: PPUSH
16895: CALL_OW 12
16899: PPUSH
16900: CALL_OW 272
16904: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16905: LD_ADDR_VAR 0 3
16909: PUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 251
16919: PPUSH
16920: LD_VAR 0 4
16924: PPUSH
16925: LD_INT 3
16927: PPUSH
16928: LD_INT 12
16930: PPUSH
16931: CALL_OW 12
16935: PPUSH
16936: CALL_OW 273
16940: ST_TO_ADDR
// if ValidHex ( x , y ) then
16941: LD_VAR 0 2
16945: PPUSH
16946: LD_VAR 0 3
16950: PPUSH
16951: CALL_OW 488
16955: IFFALSE 16990
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_VAR 0 2
16966: PPUSH
16967: LD_VAR 0 3
16971: PPUSH
16972: LD_INT 3
16974: PPUSH
16975: LD_INT 6
16977: PPUSH
16978: CALL_OW 12
16982: PPUSH
16983: LD_INT 1
16985: PPUSH
16986: CALL_OW 483
// end ;
16990: GO 16850
16992: POP
16993: POP
// end ;
16994: PPOPN 5
16996: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16997: LD_EXP 43
17001: PUSH
17002: LD_EXP 78
17006: AND
17007: IFFALSE 17101
17009: GO 17011
17011: DISABLE
17012: LD_INT 0
17014: PPUSH
17015: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17016: LD_ADDR_VAR 0 2
17020: PUSH
17021: LD_INT 22
17023: PUSH
17024: LD_OWVAR 2
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 32
17035: PUSH
17036: LD_INT 1
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 21
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: PPUSH
17058: CALL_OW 69
17062: ST_TO_ADDR
// if not tmp then
17063: LD_VAR 0 2
17067: NOT
17068: IFFALSE 17072
// exit ;
17070: GO 17101
// for i in tmp do
17072: LD_ADDR_VAR 0 1
17076: PUSH
17077: LD_VAR 0 2
17081: PUSH
17082: FOR_IN
17083: IFFALSE 17099
// SetFuel ( i , 0 ) ;
17085: LD_VAR 0 1
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: CALL_OW 240
17097: GO 17082
17099: POP
17100: POP
// end ;
17101: PPOPN 2
17103: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17104: LD_EXP 43
17108: PUSH
17109: LD_EXP 79
17113: AND
17114: IFFALSE 17180
17116: GO 17118
17118: DISABLE
17119: LD_INT 0
17121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17122: LD_ADDR_VAR 0 1
17126: PUSH
17127: LD_INT 22
17129: PUSH
17130: LD_OWVAR 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 30
17141: PUSH
17142: LD_INT 29
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 69
17157: ST_TO_ADDR
// if not tmp then
17158: LD_VAR 0 1
17162: NOT
17163: IFFALSE 17167
// exit ;
17165: GO 17180
// DestroyUnit ( tmp [ 1 ] ) ;
17167: LD_VAR 0 1
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PPUSH
17176: CALL_OW 65
// end ;
17180: PPOPN 1
17182: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17183: LD_EXP 43
17187: PUSH
17188: LD_EXP 81
17192: AND
17193: IFFALSE 17322
17195: GO 17197
17197: DISABLE
17198: LD_INT 0
17200: PPUSH
// begin uc_side := 0 ;
17201: LD_ADDR_OWVAR 20
17205: PUSH
17206: LD_INT 0
17208: ST_TO_ADDR
// uc_nation := nation_arabian ;
17209: LD_ADDR_OWVAR 21
17213: PUSH
17214: LD_INT 2
17216: ST_TO_ADDR
// hc_gallery :=  ;
17217: LD_ADDR_OWVAR 33
17221: PUSH
17222: LD_STRING 
17224: ST_TO_ADDR
// hc_name :=  ;
17225: LD_ADDR_OWVAR 26
17229: PUSH
17230: LD_STRING 
17232: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17233: LD_INT 1
17235: PPUSH
17236: LD_INT 11
17238: PPUSH
17239: LD_INT 10
17241: PPUSH
17242: CALL_OW 380
// un := CreateHuman ;
17246: LD_ADDR_VAR 0 1
17250: PUSH
17251: CALL_OW 44
17255: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17256: LD_VAR 0 1
17260: PPUSH
17261: LD_INT 1
17263: PPUSH
17264: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17268: LD_INT 35
17270: PPUSH
17271: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17275: LD_VAR 0 1
17279: PPUSH
17280: LD_INT 22
17282: PUSH
17283: LD_OWVAR 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: PPUSH
17297: LD_VAR 0 1
17301: PPUSH
17302: CALL_OW 74
17306: PPUSH
17307: CALL_OW 115
// until IsDead ( un ) ;
17311: LD_VAR 0 1
17315: PPUSH
17316: CALL_OW 301
17320: IFFALSE 17268
// end ;
17322: PPOPN 1
17324: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17325: LD_EXP 43
17329: PUSH
17330: LD_EXP 83
17334: AND
17335: IFFALSE 17347
17337: GO 17339
17339: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17340: LD_STRING earthquake(getX(game), 0, 32)
17342: PPUSH
17343: CALL_OW 559
17347: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17348: LD_EXP 43
17352: PUSH
17353: LD_EXP 84
17357: AND
17358: IFFALSE 17449
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
// begin enable ;
17366: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: LD_INT 22
17374: PUSH
17375: LD_OWVAR 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 21
17386: PUSH
17387: LD_INT 2
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: PUSH
17394: LD_INT 33
17396: PUSH
17397: LD_INT 3
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: PPUSH
17409: CALL_OW 69
17413: ST_TO_ADDR
// if not tmp then
17414: LD_VAR 0 1
17418: NOT
17419: IFFALSE 17423
// exit ;
17421: GO 17449
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17423: LD_VAR 0 1
17427: PUSH
17428: LD_INT 1
17430: PPUSH
17431: LD_VAR 0 1
17435: PPUSH
17436: CALL_OW 12
17440: ARRAY
17441: PPUSH
17442: LD_INT 1
17444: PPUSH
17445: CALL_OW 234
// end ;
17449: PPOPN 1
17451: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17452: LD_EXP 43
17456: PUSH
17457: LD_EXP 85
17461: AND
17462: IFFALSE 17603
17464: GO 17466
17466: DISABLE
17467: LD_INT 0
17469: PPUSH
17470: PPUSH
17471: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17472: LD_ADDR_VAR 0 3
17476: PUSH
17477: LD_INT 22
17479: PUSH
17480: LD_OWVAR 2
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 25
17491: PUSH
17492: LD_INT 1
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PPUSH
17503: CALL_OW 69
17507: ST_TO_ADDR
// if not tmp then
17508: LD_VAR 0 3
17512: NOT
17513: IFFALSE 17517
// exit ;
17515: GO 17603
// un := tmp [ rand ( 1 , tmp ) ] ;
17517: LD_ADDR_VAR 0 2
17521: PUSH
17522: LD_VAR 0 3
17526: PUSH
17527: LD_INT 1
17529: PPUSH
17530: LD_VAR 0 3
17534: PPUSH
17535: CALL_OW 12
17539: ARRAY
17540: ST_TO_ADDR
// if Crawls ( un ) then
17541: LD_VAR 0 2
17545: PPUSH
17546: CALL_OW 318
17550: IFFALSE 17561
// ComWalk ( un ) ;
17552: LD_VAR 0 2
17556: PPUSH
17557: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17561: LD_VAR 0 2
17565: PPUSH
17566: LD_INT 9
17568: PPUSH
17569: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17573: LD_INT 28
17575: PPUSH
17576: LD_OWVAR 2
17580: PPUSH
17581: LD_INT 2
17583: PPUSH
17584: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17588: LD_INT 29
17590: PPUSH
17591: LD_OWVAR 2
17595: PPUSH
17596: LD_INT 2
17598: PPUSH
17599: CALL_OW 322
// end ;
17603: PPOPN 3
17605: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17606: LD_EXP 43
17610: PUSH
17611: LD_EXP 86
17615: AND
17616: IFFALSE 17727
17618: GO 17620
17620: DISABLE
17621: LD_INT 0
17623: PPUSH
17624: PPUSH
17625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17626: LD_ADDR_VAR 0 3
17630: PUSH
17631: LD_INT 22
17633: PUSH
17634: LD_OWVAR 2
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: LD_INT 25
17645: PUSH
17646: LD_INT 1
17648: PUSH
17649: EMPTY
17650: LIST
17651: LIST
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PPUSH
17657: CALL_OW 69
17661: ST_TO_ADDR
// if not tmp then
17662: LD_VAR 0 3
17666: NOT
17667: IFFALSE 17671
// exit ;
17669: GO 17727
// un := tmp [ rand ( 1 , tmp ) ] ;
17671: LD_ADDR_VAR 0 2
17675: PUSH
17676: LD_VAR 0 3
17680: PUSH
17681: LD_INT 1
17683: PPUSH
17684: LD_VAR 0 3
17688: PPUSH
17689: CALL_OW 12
17693: ARRAY
17694: ST_TO_ADDR
// if Crawls ( un ) then
17695: LD_VAR 0 2
17699: PPUSH
17700: CALL_OW 318
17704: IFFALSE 17715
// ComWalk ( un ) ;
17706: LD_VAR 0 2
17710: PPUSH
17711: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17715: LD_VAR 0 2
17719: PPUSH
17720: LD_INT 8
17722: PPUSH
17723: CALL_OW 336
// end ;
17727: PPOPN 3
17729: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17730: LD_EXP 43
17734: PUSH
17735: LD_EXP 87
17739: AND
17740: IFFALSE 17884
17742: GO 17744
17744: DISABLE
17745: LD_INT 0
17747: PPUSH
17748: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17749: LD_ADDR_VAR 0 2
17753: PUSH
17754: LD_INT 22
17756: PUSH
17757: LD_OWVAR 2
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: PUSH
17766: LD_INT 21
17768: PUSH
17769: LD_INT 2
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: PUSH
17776: LD_INT 2
17778: PUSH
17779: LD_INT 34
17781: PUSH
17782: LD_INT 12
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: LD_INT 34
17791: PUSH
17792: LD_INT 51
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 34
17801: PUSH
17802: LD_INT 32
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 69
17824: ST_TO_ADDR
// if not tmp then
17825: LD_VAR 0 2
17829: NOT
17830: IFFALSE 17834
// exit ;
17832: GO 17884
// for i in tmp do
17834: LD_ADDR_VAR 0 1
17838: PUSH
17839: LD_VAR 0 2
17843: PUSH
17844: FOR_IN
17845: IFFALSE 17882
// if GetCargo ( i , mat_artifact ) = 0 then
17847: LD_VAR 0 1
17851: PPUSH
17852: LD_INT 4
17854: PPUSH
17855: CALL_OW 289
17859: PUSH
17860: LD_INT 0
17862: EQUAL
17863: IFFALSE 17880
// SetCargo ( i , mat_siberit , 100 ) ;
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: LD_INT 100
17875: PPUSH
17876: CALL_OW 290
17880: GO 17844
17882: POP
17883: POP
// end ;
17884: PPOPN 2
17886: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17887: LD_EXP 43
17891: PUSH
17892: LD_EXP 88
17896: AND
17897: IFFALSE 18080
17899: GO 17901
17901: DISABLE
17902: LD_INT 0
17904: PPUSH
17905: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17906: LD_ADDR_VAR 0 2
17910: PUSH
17911: LD_INT 22
17913: PUSH
17914: LD_OWVAR 2
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PPUSH
17923: CALL_OW 69
17927: ST_TO_ADDR
// if not tmp then
17928: LD_VAR 0 2
17932: NOT
17933: IFFALSE 17937
// exit ;
17935: GO 18080
// for i := 1 to 2 do
17937: LD_ADDR_VAR 0 1
17941: PUSH
17942: DOUBLE
17943: LD_INT 1
17945: DEC
17946: ST_TO_ADDR
17947: LD_INT 2
17949: PUSH
17950: FOR_TO
17951: IFFALSE 18078
// begin uc_side := your_side ;
17953: LD_ADDR_OWVAR 20
17957: PUSH
17958: LD_OWVAR 2
17962: ST_TO_ADDR
// uc_nation := nation_american ;
17963: LD_ADDR_OWVAR 21
17967: PUSH
17968: LD_INT 1
17970: ST_TO_ADDR
// vc_chassis := us_morphling ;
17971: LD_ADDR_OWVAR 37
17975: PUSH
17976: LD_INT 5
17978: ST_TO_ADDR
// vc_engine := engine_siberite ;
17979: LD_ADDR_OWVAR 39
17983: PUSH
17984: LD_INT 3
17986: ST_TO_ADDR
// vc_control := control_computer ;
17987: LD_ADDR_OWVAR 38
17991: PUSH
17992: LD_INT 3
17994: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17995: LD_ADDR_OWVAR 40
17999: PUSH
18000: LD_INT 10
18002: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18003: LD_VAR 0 2
18007: PUSH
18008: LD_INT 1
18010: ARRAY
18011: PPUSH
18012: CALL_OW 310
18016: NOT
18017: IFFALSE 18064
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18019: CALL_OW 45
18023: PPUSH
18024: LD_VAR 0 2
18028: PUSH
18029: LD_INT 1
18031: ARRAY
18032: PPUSH
18033: CALL_OW 250
18037: PPUSH
18038: LD_VAR 0 2
18042: PUSH
18043: LD_INT 1
18045: ARRAY
18046: PPUSH
18047: CALL_OW 251
18051: PPUSH
18052: LD_INT 12
18054: PPUSH
18055: LD_INT 1
18057: PPUSH
18058: CALL_OW 50
18062: GO 18076
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18064: CALL_OW 45
18068: PPUSH
18069: LD_INT 1
18071: PPUSH
18072: CALL_OW 51
// end ;
18076: GO 17950
18078: POP
18079: POP
// end ;
18080: PPOPN 2
18082: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18083: LD_EXP 43
18087: PUSH
18088: LD_EXP 89
18092: AND
18093: IFFALSE 18315
18095: GO 18097
18097: DISABLE
18098: LD_INT 0
18100: PPUSH
18101: PPUSH
18102: PPUSH
18103: PPUSH
18104: PPUSH
18105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18106: LD_ADDR_VAR 0 6
18110: PUSH
18111: LD_INT 22
18113: PUSH
18114: LD_OWVAR 2
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: LD_INT 21
18125: PUSH
18126: LD_INT 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: LD_INT 23
18138: PUSH
18139: LD_INT 0
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: LIST
18154: PPUSH
18155: CALL_OW 69
18159: ST_TO_ADDR
// if not tmp then
18160: LD_VAR 0 6
18164: NOT
18165: IFFALSE 18169
// exit ;
18167: GO 18315
// s1 := rand ( 1 , 4 ) ;
18169: LD_ADDR_VAR 0 2
18173: PUSH
18174: LD_INT 1
18176: PPUSH
18177: LD_INT 4
18179: PPUSH
18180: CALL_OW 12
18184: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18185: LD_ADDR_VAR 0 4
18189: PUSH
18190: LD_VAR 0 6
18194: PUSH
18195: LD_INT 1
18197: ARRAY
18198: PPUSH
18199: LD_VAR 0 2
18203: PPUSH
18204: CALL_OW 259
18208: ST_TO_ADDR
// if s1 = 1 then
18209: LD_VAR 0 2
18213: PUSH
18214: LD_INT 1
18216: EQUAL
18217: IFFALSE 18237
// s2 := rand ( 2 , 4 ) else
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_INT 2
18226: PPUSH
18227: LD_INT 4
18229: PPUSH
18230: CALL_OW 12
18234: ST_TO_ADDR
18235: GO 18245
// s2 := 1 ;
18237: LD_ADDR_VAR 0 3
18241: PUSH
18242: LD_INT 1
18244: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18245: LD_ADDR_VAR 0 5
18249: PUSH
18250: LD_VAR 0 6
18254: PUSH
18255: LD_INT 1
18257: ARRAY
18258: PPUSH
18259: LD_VAR 0 3
18263: PPUSH
18264: CALL_OW 259
18268: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18269: LD_VAR 0 6
18273: PUSH
18274: LD_INT 1
18276: ARRAY
18277: PPUSH
18278: LD_VAR 0 2
18282: PPUSH
18283: LD_VAR 0 5
18287: PPUSH
18288: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18292: LD_VAR 0 6
18296: PUSH
18297: LD_INT 1
18299: ARRAY
18300: PPUSH
18301: LD_VAR 0 3
18305: PPUSH
18306: LD_VAR 0 4
18310: PPUSH
18311: CALL_OW 237
// end ;
18315: PPOPN 6
18317: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18318: LD_EXP 43
18322: PUSH
18323: LD_EXP 90
18327: AND
18328: IFFALSE 18407
18330: GO 18332
18332: DISABLE
18333: LD_INT 0
18335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: LD_INT 22
18343: PUSH
18344: LD_OWVAR 2
18348: PUSH
18349: EMPTY
18350: LIST
18351: LIST
18352: PUSH
18353: LD_INT 30
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PPUSH
18367: CALL_OW 69
18371: ST_TO_ADDR
// if not tmp then
18372: LD_VAR 0 1
18376: NOT
18377: IFFALSE 18381
// exit ;
18379: GO 18407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18381: LD_VAR 0 1
18385: PUSH
18386: LD_INT 1
18388: PPUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: CALL_OW 12
18398: ARRAY
18399: PPUSH
18400: LD_INT 1
18402: PPUSH
18403: CALL_OW 234
// end ;
18407: PPOPN 1
18409: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18410: LD_EXP 43
18414: PUSH
18415: LD_EXP 91
18419: AND
18420: IFFALSE 18532
18422: GO 18424
18424: DISABLE
18425: LD_INT 0
18427: PPUSH
18428: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18429: LD_ADDR_VAR 0 2
18433: PUSH
18434: LD_INT 22
18436: PUSH
18437: LD_OWVAR 2
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 2
18448: PUSH
18449: LD_INT 30
18451: PUSH
18452: LD_INT 27
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 30
18461: PUSH
18462: LD_INT 26
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 30
18471: PUSH
18472: LD_INT 28
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: ST_TO_ADDR
// if not tmp then
18494: LD_VAR 0 2
18498: NOT
18499: IFFALSE 18503
// exit ;
18501: GO 18532
// for i in tmp do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 2
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18530
// SetLives ( i , 1 ) ;
18516: LD_VAR 0 1
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 234
18528: GO 18513
18530: POP
18531: POP
// end ;
18532: PPOPN 2
18534: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18535: LD_EXP 43
18539: PUSH
18540: LD_EXP 92
18544: AND
18545: IFFALSE 18832
18547: GO 18549
18549: DISABLE
18550: LD_INT 0
18552: PPUSH
18553: PPUSH
18554: PPUSH
// begin i := rand ( 1 , 7 ) ;
18555: LD_ADDR_VAR 0 1
18559: PUSH
18560: LD_INT 1
18562: PPUSH
18563: LD_INT 7
18565: PPUSH
18566: CALL_OW 12
18570: ST_TO_ADDR
// case i of 1 :
18571: LD_VAR 0 1
18575: PUSH
18576: LD_INT 1
18578: DOUBLE
18579: EQUAL
18580: IFTRUE 18584
18582: GO 18594
18584: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18585: LD_STRING earthquake(getX(game), 0, 32)
18587: PPUSH
18588: CALL_OW 559
18592: GO 18832
18594: LD_INT 2
18596: DOUBLE
18597: EQUAL
18598: IFTRUE 18602
18600: GO 18616
18602: POP
// begin ToLua ( displayStucuk(); ) ;
18603: LD_STRING displayStucuk();
18605: PPUSH
18606: CALL_OW 559
// ResetFog ;
18610: CALL_OW 335
// end ; 3 :
18614: GO 18832
18616: LD_INT 3
18618: DOUBLE
18619: EQUAL
18620: IFTRUE 18624
18622: GO 18728
18624: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18625: LD_ADDR_VAR 0 2
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_OWVAR 2
18637: PUSH
18638: EMPTY
18639: LIST
18640: LIST
18641: PUSH
18642: LD_INT 25
18644: PUSH
18645: LD_INT 1
18647: PUSH
18648: EMPTY
18649: LIST
18650: LIST
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 69
18660: ST_TO_ADDR
// if not tmp then
18661: LD_VAR 0 2
18665: NOT
18666: IFFALSE 18670
// exit ;
18668: GO 18832
// un := tmp [ rand ( 1 , tmp ) ] ;
18670: LD_ADDR_VAR 0 3
18674: PUSH
18675: LD_VAR 0 2
18679: PUSH
18680: LD_INT 1
18682: PPUSH
18683: LD_VAR 0 2
18687: PPUSH
18688: CALL_OW 12
18692: ARRAY
18693: ST_TO_ADDR
// if Crawls ( un ) then
18694: LD_VAR 0 3
18698: PPUSH
18699: CALL_OW 318
18703: IFFALSE 18714
// ComWalk ( un ) ;
18705: LD_VAR 0 3
18709: PPUSH
18710: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18714: LD_VAR 0 3
18718: PPUSH
18719: LD_INT 8
18721: PPUSH
18722: CALL_OW 336
// end ; 4 :
18726: GO 18832
18728: LD_INT 4
18730: DOUBLE
18731: EQUAL
18732: IFTRUE 18736
18734: GO 18810
18736: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18737: LD_ADDR_VAR 0 2
18741: PUSH
18742: LD_INT 22
18744: PUSH
18745: LD_OWVAR 2
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PUSH
18754: LD_INT 30
18756: PUSH
18757: LD_INT 29
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 2
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18832
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18782: LD_VAR 0 2
18786: PUSH
18787: LD_INT 1
18789: ARRAY
18790: PPUSH
18791: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18795: LD_VAR 0 2
18799: PUSH
18800: LD_INT 1
18802: ARRAY
18803: PPUSH
18804: CALL_OW 65
// end ; 5 .. 7 :
18808: GO 18832
18810: LD_INT 5
18812: DOUBLE
18813: GREATEREQUAL
18814: IFFALSE 18822
18816: LD_INT 7
18818: DOUBLE
18819: LESSEQUAL
18820: IFTRUE 18824
18822: GO 18831
18824: POP
// StreamSibBomb ; end ;
18825: CALL 15069 0 0
18829: GO 18832
18831: POP
// end ;
18832: PPOPN 3
18834: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18835: LD_EXP 43
18839: PUSH
18840: LD_EXP 93
18844: AND
18845: IFFALSE 19001
18847: GO 18849
18849: DISABLE
18850: LD_INT 0
18852: PPUSH
18853: PPUSH
18854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18855: LD_ADDR_VAR 0 2
18859: PUSH
18860: LD_INT 81
18862: PUSH
18863: LD_OWVAR 2
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: LD_INT 21
18877: PUSH
18878: LD_INT 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 21
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: LIST
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PPUSH
18904: CALL_OW 69
18908: ST_TO_ADDR
// if not tmp then
18909: LD_VAR 0 2
18913: NOT
18914: IFFALSE 18918
// exit ;
18916: GO 19001
// p := 0 ;
18918: LD_ADDR_VAR 0 3
18922: PUSH
18923: LD_INT 0
18925: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18926: LD_INT 35
18928: PPUSH
18929: CALL_OW 67
// p := p + 1 ;
18933: LD_ADDR_VAR 0 3
18937: PUSH
18938: LD_VAR 0 3
18942: PUSH
18943: LD_INT 1
18945: PLUS
18946: ST_TO_ADDR
// for i in tmp do
18947: LD_ADDR_VAR 0 1
18951: PUSH
18952: LD_VAR 0 2
18956: PUSH
18957: FOR_IN
18958: IFFALSE 18989
// if GetLives ( i ) < 1000 then
18960: LD_VAR 0 1
18964: PPUSH
18965: CALL_OW 256
18969: PUSH
18970: LD_INT 1000
18972: LESS
18973: IFFALSE 18987
// SetLives ( i , 1000 ) ;
18975: LD_VAR 0 1
18979: PPUSH
18980: LD_INT 1000
18982: PPUSH
18983: CALL_OW 234
18987: GO 18957
18989: POP
18990: POP
// until p > 20 ;
18991: LD_VAR 0 3
18995: PUSH
18996: LD_INT 20
18998: GREATER
18999: IFFALSE 18926
// end ;
19001: PPOPN 3
19003: END
// every 0 0$1 trigger StreamModeActive and sTime do
19004: LD_EXP 43
19008: PUSH
19009: LD_EXP 94
19013: AND
19014: IFFALSE 19049
19016: GO 19018
19018: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19019: LD_INT 28
19021: PPUSH
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 2
19029: PPUSH
19030: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19034: LD_INT 30
19036: PPUSH
19037: LD_OWVAR 2
19041: PPUSH
19042: LD_INT 2
19044: PPUSH
19045: CALL_OW 322
// end ;
19049: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19050: LD_EXP 43
19054: PUSH
19055: LD_EXP 95
19059: AND
19060: IFFALSE 19181
19062: GO 19064
19064: DISABLE
19065: LD_INT 0
19067: PPUSH
19068: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19069: LD_ADDR_VAR 0 2
19073: PUSH
19074: LD_INT 22
19076: PUSH
19077: LD_OWVAR 2
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 21
19088: PUSH
19089: LD_INT 1
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PUSH
19096: LD_INT 3
19098: PUSH
19099: LD_INT 23
19101: PUSH
19102: LD_INT 0
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: LIST
19117: PPUSH
19118: CALL_OW 69
19122: ST_TO_ADDR
// if not tmp then
19123: LD_VAR 0 2
19127: NOT
19128: IFFALSE 19132
// exit ;
19130: GO 19181
// for i in tmp do
19132: LD_ADDR_VAR 0 1
19136: PUSH
19137: LD_VAR 0 2
19141: PUSH
19142: FOR_IN
19143: IFFALSE 19179
// begin if Crawls ( i ) then
19145: LD_VAR 0 1
19149: PPUSH
19150: CALL_OW 318
19154: IFFALSE 19165
// ComWalk ( i ) ;
19156: LD_VAR 0 1
19160: PPUSH
19161: CALL_OW 138
// SetClass ( i , 2 ) ;
19165: LD_VAR 0 1
19169: PPUSH
19170: LD_INT 2
19172: PPUSH
19173: CALL_OW 336
// end ;
19177: GO 19142
19179: POP
19180: POP
// end ;
19181: PPOPN 2
19183: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19184: LD_EXP 43
19188: PUSH
19189: LD_EXP 96
19193: AND
19194: IFFALSE 19482
19196: GO 19198
19198: DISABLE
19199: LD_INT 0
19201: PPUSH
19202: PPUSH
19203: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19204: LD_OWVAR 2
19208: PPUSH
19209: LD_INT 9
19211: PPUSH
19212: LD_INT 1
19214: PPUSH
19215: LD_INT 1
19217: PPUSH
19218: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19222: LD_INT 9
19224: PPUSH
19225: LD_OWVAR 2
19229: PPUSH
19230: CALL_OW 343
// uc_side := 9 ;
19234: LD_ADDR_OWVAR 20
19238: PUSH
19239: LD_INT 9
19241: ST_TO_ADDR
// uc_nation := 2 ;
19242: LD_ADDR_OWVAR 21
19246: PUSH
19247: LD_INT 2
19249: ST_TO_ADDR
// hc_name := Dark Warrior ;
19250: LD_ADDR_OWVAR 26
19254: PUSH
19255: LD_STRING Dark Warrior
19257: ST_TO_ADDR
// hc_gallery :=  ;
19258: LD_ADDR_OWVAR 33
19262: PUSH
19263: LD_STRING 
19265: ST_TO_ADDR
// hc_noskilllimit := true ;
19266: LD_ADDR_OWVAR 76
19270: PUSH
19271: LD_INT 1
19273: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19274: LD_ADDR_OWVAR 31
19278: PUSH
19279: LD_INT 30
19281: PUSH
19282: LD_INT 30
19284: PUSH
19285: LD_INT 30
19287: PUSH
19288: LD_INT 30
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: ST_TO_ADDR
// un := CreateHuman ;
19297: LD_ADDR_VAR 0 3
19301: PUSH
19302: CALL_OW 44
19306: ST_TO_ADDR
// hc_noskilllimit := false ;
19307: LD_ADDR_OWVAR 76
19311: PUSH
19312: LD_INT 0
19314: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19315: LD_VAR 0 3
19319: PPUSH
19320: LD_INT 1
19322: PPUSH
19323: CALL_OW 51
// ToLua ( playRanger() ) ;
19327: LD_STRING playRanger()
19329: PPUSH
19330: CALL_OW 559
// p := 0 ;
19334: LD_ADDR_VAR 0 2
19338: PUSH
19339: LD_INT 0
19341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19342: LD_INT 35
19344: PPUSH
19345: CALL_OW 67
// p := p + 1 ;
19349: LD_ADDR_VAR 0 2
19353: PUSH
19354: LD_VAR 0 2
19358: PUSH
19359: LD_INT 1
19361: PLUS
19362: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19363: LD_VAR 0 3
19367: PPUSH
19368: CALL_OW 256
19372: PUSH
19373: LD_INT 1000
19375: LESS
19376: IFFALSE 19390
// SetLives ( un , 1000 ) ;
19378: LD_VAR 0 3
19382: PPUSH
19383: LD_INT 1000
19385: PPUSH
19386: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19390: LD_VAR 0 3
19394: PPUSH
19395: LD_INT 81
19397: PUSH
19398: LD_OWVAR 2
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 91
19409: PUSH
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 30
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PPUSH
19427: CALL_OW 69
19431: PPUSH
19432: LD_VAR 0 3
19436: PPUSH
19437: CALL_OW 74
19441: PPUSH
19442: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19446: LD_VAR 0 2
19450: PUSH
19451: LD_INT 80
19453: GREATER
19454: PUSH
19455: LD_VAR 0 3
19459: PPUSH
19460: CALL_OW 301
19464: OR
19465: IFFALSE 19342
// if un then
19467: LD_VAR 0 3
19471: IFFALSE 19482
// RemoveUnit ( un ) ;
19473: LD_VAR 0 3
19477: PPUSH
19478: CALL_OW 64
// end ;
19482: PPOPN 3
19484: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19485: LD_EXP 97
19489: IFFALSE 19605
19491: GO 19493
19493: DISABLE
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
19498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19499: LD_ADDR_VAR 0 2
19503: PUSH
19504: LD_INT 81
19506: PUSH
19507: LD_OWVAR 2
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19535: LD_STRING playComputer()
19537: PPUSH
19538: CALL_OW 559
// if not tmp then
19542: LD_VAR 0 2
19546: NOT
19547: IFFALSE 19551
// exit ;
19549: GO 19605
// for i in tmp do
19551: LD_ADDR_VAR 0 1
19555: PUSH
19556: LD_VAR 0 2
19560: PUSH
19561: FOR_IN
19562: IFFALSE 19603
// for j := 1 to 4 do
19564: LD_ADDR_VAR 0 3
19568: PUSH
19569: DOUBLE
19570: LD_INT 1
19572: DEC
19573: ST_TO_ADDR
19574: LD_INT 4
19576: PUSH
19577: FOR_TO
19578: IFFALSE 19599
// SetSkill ( i , j , 10 ) ;
19580: LD_VAR 0 1
19584: PPUSH
19585: LD_VAR 0 3
19589: PPUSH
19590: LD_INT 10
19592: PPUSH
19593: CALL_OW 237
19597: GO 19577
19599: POP
19600: POP
19601: GO 19561
19603: POP
19604: POP
// end ;
19605: PPOPN 3
19607: END
// every 0 0$1 trigger s30 do var i , tmp ;
19608: LD_EXP 98
19612: IFFALSE 19681
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19621: LD_ADDR_VAR 0 2
19625: PUSH
19626: LD_INT 22
19628: PUSH
19629: LD_OWVAR 2
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PPUSH
19638: CALL_OW 69
19642: ST_TO_ADDR
// if not tmp then
19643: LD_VAR 0 2
19647: NOT
19648: IFFALSE 19652
// exit ;
19650: GO 19681
// for i in tmp do
19652: LD_ADDR_VAR 0 1
19656: PUSH
19657: LD_VAR 0 2
19661: PUSH
19662: FOR_IN
19663: IFFALSE 19679
// SetLives ( i , 300 ) ;
19665: LD_VAR 0 1
19669: PPUSH
19670: LD_INT 300
19672: PPUSH
19673: CALL_OW 234
19677: GO 19662
19679: POP
19680: POP
// end ;
19681: PPOPN 2
19683: END
// every 0 0$1 trigger s60 do var i , tmp ;
19684: LD_EXP 99
19688: IFFALSE 19757
19690: GO 19692
19692: DISABLE
19693: LD_INT 0
19695: PPUSH
19696: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19697: LD_ADDR_VAR 0 2
19701: PUSH
19702: LD_INT 22
19704: PUSH
19705: LD_OWVAR 2
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: ST_TO_ADDR
// if not tmp then
19719: LD_VAR 0 2
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 19757
// for i in tmp do
19728: LD_ADDR_VAR 0 1
19732: PUSH
19733: LD_VAR 0 2
19737: PUSH
19738: FOR_IN
19739: IFFALSE 19755
// SetLives ( i , 600 ) ;
19741: LD_VAR 0 1
19745: PPUSH
19746: LD_INT 600
19748: PPUSH
19749: CALL_OW 234
19753: GO 19738
19755: POP
19756: POP
// end ;
19757: PPOPN 2
19759: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19760: LD_INT 0
19762: PPUSH
// case cmd of 301 :
19763: LD_VAR 0 1
19767: PUSH
19768: LD_INT 301
19770: DOUBLE
19771: EQUAL
19772: IFTRUE 19776
19774: GO 19808
19776: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19777: LD_VAR 0 6
19781: PPUSH
19782: LD_VAR 0 7
19786: PPUSH
19787: LD_VAR 0 8
19791: PPUSH
19792: LD_VAR 0 4
19796: PPUSH
19797: LD_VAR 0 5
19801: PPUSH
19802: CALL 21009 0 5
19806: GO 19929
19808: LD_INT 302
19810: DOUBLE
19811: EQUAL
19812: IFTRUE 19816
19814: GO 19853
19816: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19817: LD_VAR 0 6
19821: PPUSH
19822: LD_VAR 0 7
19826: PPUSH
19827: LD_VAR 0 8
19831: PPUSH
19832: LD_VAR 0 9
19836: PPUSH
19837: LD_VAR 0 4
19841: PPUSH
19842: LD_VAR 0 5
19846: PPUSH
19847: CALL 21100 0 6
19851: GO 19929
19853: LD_INT 303
19855: DOUBLE
19856: EQUAL
19857: IFTRUE 19861
19859: GO 19898
19861: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19862: LD_VAR 0 6
19866: PPUSH
19867: LD_VAR 0 7
19871: PPUSH
19872: LD_VAR 0 8
19876: PPUSH
19877: LD_VAR 0 9
19881: PPUSH
19882: LD_VAR 0 4
19886: PPUSH
19887: LD_VAR 0 5
19891: PPUSH
19892: CALL 19934 0 6
19896: GO 19929
19898: LD_INT 304
19900: DOUBLE
19901: EQUAL
19902: IFTRUE 19906
19904: GO 19928
19906: POP
// hHackTeleport ( unit , x , y ) ; end ;
19907: LD_VAR 0 2
19911: PPUSH
19912: LD_VAR 0 4
19916: PPUSH
19917: LD_VAR 0 5
19921: PPUSH
19922: CALL 21693 0 3
19926: GO 19929
19928: POP
// end ;
19929: LD_VAR 0 12
19933: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19934: LD_INT 0
19936: PPUSH
19937: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19938: LD_VAR 0 1
19942: PUSH
19943: LD_INT 1
19945: LESS
19946: PUSH
19947: LD_VAR 0 1
19951: PUSH
19952: LD_INT 3
19954: GREATER
19955: OR
19956: PUSH
19957: LD_VAR 0 5
19961: PPUSH
19962: LD_VAR 0 6
19966: PPUSH
19967: CALL_OW 428
19971: OR
19972: IFFALSE 19976
// exit ;
19974: GO 20696
// uc_side := your_side ;
19976: LD_ADDR_OWVAR 20
19980: PUSH
19981: LD_OWVAR 2
19985: ST_TO_ADDR
// uc_nation := nation ;
19986: LD_ADDR_OWVAR 21
19990: PUSH
19991: LD_VAR 0 1
19995: ST_TO_ADDR
// bc_level = 1 ;
19996: LD_ADDR_OWVAR 43
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// case btype of 1 :
20004: LD_VAR 0 2
20008: PUSH
20009: LD_INT 1
20011: DOUBLE
20012: EQUAL
20013: IFTRUE 20017
20015: GO 20028
20017: POP
// bc_type := b_depot ; 2 :
20018: LD_ADDR_OWVAR 42
20022: PUSH
20023: LD_INT 0
20025: ST_TO_ADDR
20026: GO 20640
20028: LD_INT 2
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20047
20036: POP
// bc_type := b_warehouse ; 3 :
20037: LD_ADDR_OWVAR 42
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
20045: GO 20640
20047: LD_INT 3
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20066
20055: POP
// bc_type := b_lab ; 4 .. 9 :
20056: LD_ADDR_OWVAR 42
20060: PUSH
20061: LD_INT 6
20063: ST_TO_ADDR
20064: GO 20640
20066: LD_INT 4
20068: DOUBLE
20069: GREATEREQUAL
20070: IFFALSE 20078
20072: LD_INT 9
20074: DOUBLE
20075: LESSEQUAL
20076: IFTRUE 20080
20078: GO 20132
20080: POP
// begin bc_type := b_lab_half ;
20081: LD_ADDR_OWVAR 42
20085: PUSH
20086: LD_INT 7
20088: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20089: LD_ADDR_OWVAR 44
20093: PUSH
20094: LD_INT 10
20096: PUSH
20097: LD_INT 11
20099: PUSH
20100: LD_INT 12
20102: PUSH
20103: LD_INT 15
20105: PUSH
20106: LD_INT 14
20108: PUSH
20109: LD_INT 13
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: PUSH
20120: LD_VAR 0 2
20124: PUSH
20125: LD_INT 3
20127: MINUS
20128: ARRAY
20129: ST_TO_ADDR
// end ; 10 .. 13 :
20130: GO 20640
20132: LD_INT 10
20134: DOUBLE
20135: GREATEREQUAL
20136: IFFALSE 20144
20138: LD_INT 13
20140: DOUBLE
20141: LESSEQUAL
20142: IFTRUE 20146
20144: GO 20223
20146: POP
// begin bc_type := b_lab_full ;
20147: LD_ADDR_OWVAR 42
20151: PUSH
20152: LD_INT 8
20154: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20155: LD_ADDR_OWVAR 44
20159: PUSH
20160: LD_INT 10
20162: PUSH
20163: LD_INT 12
20165: PUSH
20166: LD_INT 14
20168: PUSH
20169: LD_INT 13
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: LD_VAR 0 2
20182: PUSH
20183: LD_INT 9
20185: MINUS
20186: ARRAY
20187: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20188: LD_ADDR_OWVAR 45
20192: PUSH
20193: LD_INT 11
20195: PUSH
20196: LD_INT 15
20198: PUSH
20199: LD_INT 12
20201: PUSH
20202: LD_INT 15
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: LIST
20209: LIST
20210: PUSH
20211: LD_VAR 0 2
20215: PUSH
20216: LD_INT 9
20218: MINUS
20219: ARRAY
20220: ST_TO_ADDR
// end ; 14 :
20221: GO 20640
20223: LD_INT 14
20225: DOUBLE
20226: EQUAL
20227: IFTRUE 20231
20229: GO 20242
20231: POP
// bc_type := b_workshop ; 15 :
20232: LD_ADDR_OWVAR 42
20236: PUSH
20237: LD_INT 2
20239: ST_TO_ADDR
20240: GO 20640
20242: LD_INT 15
20244: DOUBLE
20245: EQUAL
20246: IFTRUE 20250
20248: GO 20261
20250: POP
// bc_type := b_factory ; 16 :
20251: LD_ADDR_OWVAR 42
20255: PUSH
20256: LD_INT 3
20258: ST_TO_ADDR
20259: GO 20640
20261: LD_INT 16
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20280
20269: POP
// bc_type := b_ext_gun ; 17 :
20270: LD_ADDR_OWVAR 42
20274: PUSH
20275: LD_INT 17
20277: ST_TO_ADDR
20278: GO 20640
20280: LD_INT 17
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20316
20288: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20289: LD_ADDR_OWVAR 42
20293: PUSH
20294: LD_INT 19
20296: PUSH
20297: LD_INT 23
20299: PUSH
20300: LD_INT 19
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: LD_VAR 0 1
20312: ARRAY
20313: ST_TO_ADDR
20314: GO 20640
20316: LD_INT 18
20318: DOUBLE
20319: EQUAL
20320: IFTRUE 20324
20322: GO 20335
20324: POP
// bc_type := b_ext_radar ; 19 :
20325: LD_ADDR_OWVAR 42
20329: PUSH
20330: LD_INT 20
20332: ST_TO_ADDR
20333: GO 20640
20335: LD_INT 19
20337: DOUBLE
20338: EQUAL
20339: IFTRUE 20343
20341: GO 20354
20343: POP
// bc_type := b_ext_radio ; 20 :
20344: LD_ADDR_OWVAR 42
20348: PUSH
20349: LD_INT 22
20351: ST_TO_ADDR
20352: GO 20640
20354: LD_INT 20
20356: DOUBLE
20357: EQUAL
20358: IFTRUE 20362
20360: GO 20373
20362: POP
// bc_type := b_ext_siberium ; 21 :
20363: LD_ADDR_OWVAR 42
20367: PUSH
20368: LD_INT 21
20370: ST_TO_ADDR
20371: GO 20640
20373: LD_INT 21
20375: DOUBLE
20376: EQUAL
20377: IFTRUE 20381
20379: GO 20392
20381: POP
// bc_type := b_ext_computer ; 22 :
20382: LD_ADDR_OWVAR 42
20386: PUSH
20387: LD_INT 24
20389: ST_TO_ADDR
20390: GO 20640
20392: LD_INT 22
20394: DOUBLE
20395: EQUAL
20396: IFTRUE 20400
20398: GO 20411
20400: POP
// bc_type := b_ext_track ; 23 :
20401: LD_ADDR_OWVAR 42
20405: PUSH
20406: LD_INT 16
20408: ST_TO_ADDR
20409: GO 20640
20411: LD_INT 23
20413: DOUBLE
20414: EQUAL
20415: IFTRUE 20419
20417: GO 20430
20419: POP
// bc_type := b_ext_laser ; 24 :
20420: LD_ADDR_OWVAR 42
20424: PUSH
20425: LD_INT 25
20427: ST_TO_ADDR
20428: GO 20640
20430: LD_INT 24
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20449
20438: POP
// bc_type := b_control_tower ; 25 :
20439: LD_ADDR_OWVAR 42
20443: PUSH
20444: LD_INT 36
20446: ST_TO_ADDR
20447: GO 20640
20449: LD_INT 25
20451: DOUBLE
20452: EQUAL
20453: IFTRUE 20457
20455: GO 20468
20457: POP
// bc_type := b_breastwork ; 26 :
20458: LD_ADDR_OWVAR 42
20462: PUSH
20463: LD_INT 31
20465: ST_TO_ADDR
20466: GO 20640
20468: LD_INT 26
20470: DOUBLE
20471: EQUAL
20472: IFTRUE 20476
20474: GO 20487
20476: POP
// bc_type := b_bunker ; 27 :
20477: LD_ADDR_OWVAR 42
20481: PUSH
20482: LD_INT 32
20484: ST_TO_ADDR
20485: GO 20640
20487: LD_INT 27
20489: DOUBLE
20490: EQUAL
20491: IFTRUE 20495
20493: GO 20506
20495: POP
// bc_type := b_turret ; 28 :
20496: LD_ADDR_OWVAR 42
20500: PUSH
20501: LD_INT 33
20503: ST_TO_ADDR
20504: GO 20640
20506: LD_INT 28
20508: DOUBLE
20509: EQUAL
20510: IFTRUE 20514
20512: GO 20525
20514: POP
// bc_type := b_armoury ; 29 :
20515: LD_ADDR_OWVAR 42
20519: PUSH
20520: LD_INT 4
20522: ST_TO_ADDR
20523: GO 20640
20525: LD_INT 29
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20544
20533: POP
// bc_type := b_barracks ; 30 :
20534: LD_ADDR_OWVAR 42
20538: PUSH
20539: LD_INT 5
20541: ST_TO_ADDR
20542: GO 20640
20544: LD_INT 30
20546: DOUBLE
20547: EQUAL
20548: IFTRUE 20552
20550: GO 20563
20552: POP
// bc_type := b_solar_power ; 31 :
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 27
20560: ST_TO_ADDR
20561: GO 20640
20563: LD_INT 31
20565: DOUBLE
20566: EQUAL
20567: IFTRUE 20571
20569: GO 20582
20571: POP
// bc_type := b_oil_power ; 32 :
20572: LD_ADDR_OWVAR 42
20576: PUSH
20577: LD_INT 26
20579: ST_TO_ADDR
20580: GO 20640
20582: LD_INT 32
20584: DOUBLE
20585: EQUAL
20586: IFTRUE 20590
20588: GO 20601
20590: POP
// bc_type := b_siberite_power ; 33 :
20591: LD_ADDR_OWVAR 42
20595: PUSH
20596: LD_INT 28
20598: ST_TO_ADDR
20599: GO 20640
20601: LD_INT 33
20603: DOUBLE
20604: EQUAL
20605: IFTRUE 20609
20607: GO 20620
20609: POP
// bc_type := b_oil_mine ; 34 :
20610: LD_ADDR_OWVAR 42
20614: PUSH
20615: LD_INT 29
20617: ST_TO_ADDR
20618: GO 20640
20620: LD_INT 34
20622: DOUBLE
20623: EQUAL
20624: IFTRUE 20628
20626: GO 20639
20628: POP
// bc_type := b_siberite_mine ; end ;
20629: LD_ADDR_OWVAR 42
20633: PUSH
20634: LD_INT 30
20636: ST_TO_ADDR
20637: GO 20640
20639: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20640: LD_ADDR_VAR 0 8
20644: PUSH
20645: LD_VAR 0 5
20649: PPUSH
20650: LD_VAR 0 6
20654: PPUSH
20655: LD_VAR 0 3
20659: PPUSH
20660: CALL_OW 47
20664: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20665: LD_OWVAR 42
20669: PUSH
20670: LD_INT 32
20672: PUSH
20673: LD_INT 33
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: IN
20680: IFFALSE 20696
// PlaceWeaponTurret ( b , weapon ) ;
20682: LD_VAR 0 8
20686: PPUSH
20687: LD_VAR 0 4
20691: PPUSH
20692: CALL_OW 431
// end ;
20696: LD_VAR 0 7
20700: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20701: LD_INT 0
20703: PPUSH
20704: PPUSH
20705: PPUSH
20706: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20707: LD_ADDR_VAR 0 4
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_OWVAR 2
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 2
20726: PUSH
20727: LD_INT 30
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 30
20739: PUSH
20740: LD_INT 1
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: PPUSH
20756: CALL_OW 69
20760: ST_TO_ADDR
// if not tmp then
20761: LD_VAR 0 4
20765: NOT
20766: IFFALSE 20770
// exit ;
20768: GO 20829
// for i in tmp do
20770: LD_ADDR_VAR 0 2
20774: PUSH
20775: LD_VAR 0 4
20779: PUSH
20780: FOR_IN
20781: IFFALSE 20827
// for j = 1 to 3 do
20783: LD_ADDR_VAR 0 3
20787: PUSH
20788: DOUBLE
20789: LD_INT 1
20791: DEC
20792: ST_TO_ADDR
20793: LD_INT 3
20795: PUSH
20796: FOR_TO
20797: IFFALSE 20823
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20799: LD_VAR 0 2
20803: PPUSH
20804: CALL_OW 274
20808: PPUSH
20809: LD_VAR 0 3
20813: PPUSH
20814: LD_INT 99999
20816: PPUSH
20817: CALL_OW 277
20821: GO 20796
20823: POP
20824: POP
20825: GO 20780
20827: POP
20828: POP
// end ;
20829: LD_VAR 0 1
20833: RET
// export function hHackSetLevel10 ; var i , j ; begin
20834: LD_INT 0
20836: PPUSH
20837: PPUSH
20838: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20839: LD_ADDR_VAR 0 2
20843: PUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 1
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: PUSH
20859: FOR_IN
20860: IFFALSE 20912
// if IsSelected ( i ) then
20862: LD_VAR 0 2
20866: PPUSH
20867: CALL_OW 306
20871: IFFALSE 20910
// begin for j := 1 to 4 do
20873: LD_ADDR_VAR 0 3
20877: PUSH
20878: DOUBLE
20879: LD_INT 1
20881: DEC
20882: ST_TO_ADDR
20883: LD_INT 4
20885: PUSH
20886: FOR_TO
20887: IFFALSE 20908
// SetSkill ( i , j , 10 ) ;
20889: LD_VAR 0 2
20893: PPUSH
20894: LD_VAR 0 3
20898: PPUSH
20899: LD_INT 10
20901: PPUSH
20902: CALL_OW 237
20906: GO 20886
20908: POP
20909: POP
// end ;
20910: GO 20859
20912: POP
20913: POP
// end ;
20914: LD_VAR 0 1
20918: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20919: LD_INT 0
20921: PPUSH
20922: PPUSH
20923: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20924: LD_ADDR_VAR 0 2
20928: PUSH
20929: LD_INT 22
20931: PUSH
20932: LD_OWVAR 2
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 21
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: PUSH
20960: FOR_IN
20961: IFFALSE 21002
// begin for j := 1 to 4 do
20963: LD_ADDR_VAR 0 3
20967: PUSH
20968: DOUBLE
20969: LD_INT 1
20971: DEC
20972: ST_TO_ADDR
20973: LD_INT 4
20975: PUSH
20976: FOR_TO
20977: IFFALSE 20998
// SetSkill ( i , j , 10 ) ;
20979: LD_VAR 0 2
20983: PPUSH
20984: LD_VAR 0 3
20988: PPUSH
20989: LD_INT 10
20991: PPUSH
20992: CALL_OW 237
20996: GO 20976
20998: POP
20999: POP
// end ;
21000: GO 20960
21002: POP
21003: POP
// end ;
21004: LD_VAR 0 1
21008: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21009: LD_INT 0
21011: PPUSH
// uc_side := your_side ;
21012: LD_ADDR_OWVAR 20
21016: PUSH
21017: LD_OWVAR 2
21021: ST_TO_ADDR
// uc_nation := nation ;
21022: LD_ADDR_OWVAR 21
21026: PUSH
21027: LD_VAR 0 1
21031: ST_TO_ADDR
// InitHc ;
21032: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21036: LD_INT 0
21038: PPUSH
21039: LD_VAR 0 2
21043: PPUSH
21044: LD_VAR 0 3
21048: PPUSH
21049: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21053: LD_VAR 0 4
21057: PPUSH
21058: LD_VAR 0 5
21062: PPUSH
21063: CALL_OW 428
21067: PUSH
21068: LD_INT 0
21070: EQUAL
21071: IFFALSE 21095
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21073: CALL_OW 44
21077: PPUSH
21078: LD_VAR 0 4
21082: PPUSH
21083: LD_VAR 0 5
21087: PPUSH
21088: LD_INT 1
21090: PPUSH
21091: CALL_OW 48
// end ;
21095: LD_VAR 0 6
21099: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21100: LD_INT 0
21102: PPUSH
21103: PPUSH
// uc_side := your_side ;
21104: LD_ADDR_OWVAR 20
21108: PUSH
21109: LD_OWVAR 2
21113: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21114: LD_VAR 0 1
21118: PUSH
21119: LD_INT 1
21121: PUSH
21122: LD_INT 2
21124: PUSH
21125: LD_INT 3
21127: PUSH
21128: LD_INT 4
21130: PUSH
21131: LD_INT 5
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: IN
21141: IFFALSE 21153
// uc_nation := nation_american else
21143: LD_ADDR_OWVAR 21
21147: PUSH
21148: LD_INT 1
21150: ST_TO_ADDR
21151: GO 21196
// if chassis in [ 11 , 12 , 13 , 14 ] then
21153: LD_VAR 0 1
21157: PUSH
21158: LD_INT 11
21160: PUSH
21161: LD_INT 12
21163: PUSH
21164: LD_INT 13
21166: PUSH
21167: LD_INT 14
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: LIST
21174: LIST
21175: IN
21176: IFFALSE 21188
// uc_nation := nation_arabian else
21178: LD_ADDR_OWVAR 21
21182: PUSH
21183: LD_INT 2
21185: ST_TO_ADDR
21186: GO 21196
// uc_nation := nation_russian ;
21188: LD_ADDR_OWVAR 21
21192: PUSH
21193: LD_INT 3
21195: ST_TO_ADDR
// vc_chassis := chassis ;
21196: LD_ADDR_OWVAR 37
21200: PUSH
21201: LD_VAR 0 1
21205: ST_TO_ADDR
// vc_engine := engine ;
21206: LD_ADDR_OWVAR 39
21210: PUSH
21211: LD_VAR 0 2
21215: ST_TO_ADDR
// vc_control := control ;
21216: LD_ADDR_OWVAR 38
21220: PUSH
21221: LD_VAR 0 3
21225: ST_TO_ADDR
// vc_weapon := weapon ;
21226: LD_ADDR_OWVAR 40
21230: PUSH
21231: LD_VAR 0 4
21235: ST_TO_ADDR
// un := CreateVehicle ;
21236: LD_ADDR_VAR 0 8
21240: PUSH
21241: CALL_OW 45
21245: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21246: LD_VAR 0 8
21250: PPUSH
21251: LD_INT 0
21253: PPUSH
21254: LD_INT 5
21256: PPUSH
21257: CALL_OW 12
21261: PPUSH
21262: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21266: LD_VAR 0 8
21270: PPUSH
21271: LD_VAR 0 5
21275: PPUSH
21276: LD_VAR 0 6
21280: PPUSH
21281: LD_INT 1
21283: PPUSH
21284: CALL_OW 48
// end ;
21288: LD_VAR 0 7
21292: RET
// export hInvincible ; every 1 do
21293: GO 21295
21295: DISABLE
// hInvincible := [ ] ;
21296: LD_ADDR_EXP 100
21300: PUSH
21301: EMPTY
21302: ST_TO_ADDR
21303: END
// every 10 do var i ;
21304: GO 21306
21306: DISABLE
21307: LD_INT 0
21309: PPUSH
// begin enable ;
21310: ENABLE
// if not hInvincible then
21311: LD_EXP 100
21315: NOT
21316: IFFALSE 21320
// exit ;
21318: GO 21364
// for i in hInvincible do
21320: LD_ADDR_VAR 0 1
21324: PUSH
21325: LD_EXP 100
21329: PUSH
21330: FOR_IN
21331: IFFALSE 21362
// if GetLives ( i ) < 1000 then
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 256
21342: PUSH
21343: LD_INT 1000
21345: LESS
21346: IFFALSE 21360
// SetLives ( i , 1000 ) ;
21348: LD_VAR 0 1
21352: PPUSH
21353: LD_INT 1000
21355: PPUSH
21356: CALL_OW 234
21360: GO 21330
21362: POP
21363: POP
// end ;
21364: PPOPN 1
21366: END
// export function hHackInvincible ; var i ; begin
21367: LD_INT 0
21369: PPUSH
21370: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21371: LD_ADDR_VAR 0 2
21375: PUSH
21376: LD_INT 2
21378: PUSH
21379: LD_INT 21
21381: PUSH
21382: LD_INT 1
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: LD_INT 21
21391: PUSH
21392: LD_INT 2
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: LIST
21403: PPUSH
21404: CALL_OW 69
21408: PUSH
21409: FOR_IN
21410: IFFALSE 21471
// if IsSelected ( i ) then
21412: LD_VAR 0 2
21416: PPUSH
21417: CALL_OW 306
21421: IFFALSE 21469
// begin if i in hInvincible then
21423: LD_VAR 0 2
21427: PUSH
21428: LD_EXP 100
21432: IN
21433: IFFALSE 21453
// hInvincible := hInvincible diff i else
21435: LD_ADDR_EXP 100
21439: PUSH
21440: LD_EXP 100
21444: PUSH
21445: LD_VAR 0 2
21449: DIFF
21450: ST_TO_ADDR
21451: GO 21469
// hInvincible := hInvincible union i ;
21453: LD_ADDR_EXP 100
21457: PUSH
21458: LD_EXP 100
21462: PUSH
21463: LD_VAR 0 2
21467: UNION
21468: ST_TO_ADDR
// end ;
21469: GO 21409
21471: POP
21472: POP
// end ;
21473: LD_VAR 0 1
21477: RET
// export function hHackInvisible ; var i , j ; begin
21478: LD_INT 0
21480: PPUSH
21481: PPUSH
21482: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21483: LD_ADDR_VAR 0 2
21487: PUSH
21488: LD_INT 21
21490: PUSH
21491: LD_INT 1
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PPUSH
21498: CALL_OW 69
21502: PUSH
21503: FOR_IN
21504: IFFALSE 21528
// if IsSelected ( i ) then
21506: LD_VAR 0 2
21510: PPUSH
21511: CALL_OW 306
21515: IFFALSE 21526
// ComForceInvisible ( i ) ;
21517: LD_VAR 0 2
21521: PPUSH
21522: CALL_OW 496
21526: GO 21503
21528: POP
21529: POP
// end ;
21530: LD_VAR 0 1
21534: RET
// export function hHackChangeYourSide ; begin
21535: LD_INT 0
21537: PPUSH
// if your_side = 8 then
21538: LD_OWVAR 2
21542: PUSH
21543: LD_INT 8
21545: EQUAL
21546: IFFALSE 21558
// your_side := 0 else
21548: LD_ADDR_OWVAR 2
21552: PUSH
21553: LD_INT 0
21555: ST_TO_ADDR
21556: GO 21572
// your_side := your_side + 1 ;
21558: LD_ADDR_OWVAR 2
21562: PUSH
21563: LD_OWVAR 2
21567: PUSH
21568: LD_INT 1
21570: PLUS
21571: ST_TO_ADDR
// end ;
21572: LD_VAR 0 1
21576: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21577: LD_INT 0
21579: PPUSH
21580: PPUSH
21581: PPUSH
// for i in all_units do
21582: LD_ADDR_VAR 0 2
21586: PUSH
21587: LD_OWVAR 3
21591: PUSH
21592: FOR_IN
21593: IFFALSE 21671
// if IsSelected ( i ) then
21595: LD_VAR 0 2
21599: PPUSH
21600: CALL_OW 306
21604: IFFALSE 21669
// begin j := GetSide ( i ) ;
21606: LD_ADDR_VAR 0 3
21610: PUSH
21611: LD_VAR 0 2
21615: PPUSH
21616: CALL_OW 255
21620: ST_TO_ADDR
// if j = 8 then
21621: LD_VAR 0 3
21625: PUSH
21626: LD_INT 8
21628: EQUAL
21629: IFFALSE 21641
// j := 0 else
21631: LD_ADDR_VAR 0 3
21635: PUSH
21636: LD_INT 0
21638: ST_TO_ADDR
21639: GO 21655
// j := j + 1 ;
21641: LD_ADDR_VAR 0 3
21645: PUSH
21646: LD_VAR 0 3
21650: PUSH
21651: LD_INT 1
21653: PLUS
21654: ST_TO_ADDR
// SetSide ( i , j ) ;
21655: LD_VAR 0 2
21659: PPUSH
21660: LD_VAR 0 3
21664: PPUSH
21665: CALL_OW 235
// end ;
21669: GO 21592
21671: POP
21672: POP
// end ;
21673: LD_VAR 0 1
21677: RET
// export function hHackFog ; begin
21678: LD_INT 0
21680: PPUSH
// FogOff ( true ) ;
21681: LD_INT 1
21683: PPUSH
21684: CALL_OW 344
// end ;
21688: LD_VAR 0 1
21692: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21693: LD_INT 0
21695: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21696: LD_VAR 0 1
21700: PPUSH
21701: LD_VAR 0 2
21705: PPUSH
21706: LD_VAR 0 3
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: LD_INT 1
21716: PPUSH
21717: CALL_OW 483
// CenterOnXY ( x , y ) ;
21721: LD_VAR 0 2
21725: PPUSH
21726: LD_VAR 0 3
21730: PPUSH
21731: CALL_OW 84
// end ; end_of_file
21735: LD_VAR 0 4
21739: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
21740: LD_INT 0
21742: PPUSH
21743: PPUSH
21744: PPUSH
21745: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
21746: LD_VAR 0 1
21750: PPUSH
21751: CALL_OW 264
21755: PUSH
21756: LD_EXP 28
21760: EQUAL
21761: IFFALSE 21833
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21763: LD_INT 68
21765: PPUSH
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 255
21775: PPUSH
21776: CALL_OW 321
21780: PUSH
21781: LD_INT 2
21783: EQUAL
21784: IFFALSE 21796
// eff := 70 else
21786: LD_ADDR_VAR 0 4
21790: PUSH
21791: LD_INT 70
21793: ST_TO_ADDR
21794: GO 21804
// eff := 30 ;
21796: LD_ADDR_VAR 0 4
21800: PUSH
21801: LD_INT 30
21803: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21804: LD_VAR 0 1
21808: PPUSH
21809: CALL_OW 250
21813: PPUSH
21814: LD_VAR 0 1
21818: PPUSH
21819: CALL_OW 251
21823: PPUSH
21824: LD_VAR 0 4
21828: PPUSH
21829: CALL_OW 495
// end ; end ;
21833: LD_VAR 0 2
21837: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
21838: LD_INT 0
21840: PPUSH
// end ;
21841: LD_VAR 0 4
21845: RET
// export function SOS_Command ( cmd ) ; begin
21846: LD_INT 0
21848: PPUSH
// end ;
21849: LD_VAR 0 2
21853: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
21854: LD_INT 0
21856: PPUSH
// end ;
21857: LD_VAR 0 6
21861: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
21862: LD_INT 0
21864: PPUSH
21865: PPUSH
// if not vehicle or not factory then
21866: LD_VAR 0 1
21870: NOT
21871: PUSH
21872: LD_VAR 0 2
21876: NOT
21877: OR
21878: IFFALSE 21882
// exit ;
21880: GO 22113
// if factoryWaypoints >= factory then
21882: LD_EXP 101
21886: PUSH
21887: LD_VAR 0 2
21891: GREATEREQUAL
21892: IFFALSE 22113
// if factoryWaypoints [ factory ] then
21894: LD_EXP 101
21898: PUSH
21899: LD_VAR 0 2
21903: ARRAY
21904: IFFALSE 22113
// begin if GetControl ( vehicle ) = control_manual then
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 263
21915: PUSH
21916: LD_INT 1
21918: EQUAL
21919: IFFALSE 22000
// begin driver := IsDrivenBy ( vehicle ) ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_VAR 0 1
21930: PPUSH
21931: CALL_OW 311
21935: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
21936: LD_VAR 0 4
21940: PPUSH
21941: LD_EXP 101
21945: PUSH
21946: LD_VAR 0 2
21950: ARRAY
21951: PUSH
21952: LD_INT 3
21954: ARRAY
21955: PPUSH
21956: LD_EXP 101
21960: PUSH
21961: LD_VAR 0 2
21965: ARRAY
21966: PUSH
21967: LD_INT 4
21969: ARRAY
21970: PPUSH
21971: CALL_OW 171
// AddComExitVehicle ( driver ) ;
21975: LD_VAR 0 4
21979: PPUSH
21980: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
21984: LD_VAR 0 4
21988: PPUSH
21989: LD_VAR 0 2
21993: PPUSH
21994: CALL_OW 180
// end else
21998: GO 22113
// if GetControl ( vehicle ) = control_remote then
22000: LD_VAR 0 1
22004: PPUSH
22005: CALL_OW 263
22009: PUSH
22010: LD_INT 2
22012: EQUAL
22013: IFFALSE 22074
// begin wait ( 0 0$2 ) ;
22015: LD_INT 70
22017: PPUSH
22018: CALL_OW 67
// if Connect ( vehicle ) then
22022: LD_VAR 0 1
22026: PPUSH
22027: CALL 34337 0 1
22031: IFFALSE 22072
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22033: LD_VAR 0 1
22037: PPUSH
22038: LD_EXP 101
22042: PUSH
22043: LD_VAR 0 2
22047: ARRAY
22048: PUSH
22049: LD_INT 3
22051: ARRAY
22052: PPUSH
22053: LD_EXP 101
22057: PUSH
22058: LD_VAR 0 2
22062: ARRAY
22063: PUSH
22064: LD_INT 4
22066: ARRAY
22067: PPUSH
22068: CALL_OW 171
// end else
22072: GO 22113
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
22074: LD_VAR 0 1
22078: PPUSH
22079: LD_EXP 101
22083: PUSH
22084: LD_VAR 0 2
22088: ARRAY
22089: PUSH
22090: LD_INT 3
22092: ARRAY
22093: PPUSH
22094: LD_EXP 101
22098: PUSH
22099: LD_VAR 0 2
22103: ARRAY
22104: PUSH
22105: LD_INT 4
22107: ARRAY
22108: PPUSH
22109: CALL_OW 171
// end ; end ;
22113: LD_VAR 0 3
22117: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
22118: LD_INT 0
22120: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
22121: LD_VAR 0 1
22125: PUSH
22126: LD_INT 250
22128: EQUAL
22129: PUSH
22130: LD_VAR 0 2
22134: PPUSH
22135: CALL_OW 264
22139: PUSH
22140: LD_EXP 31
22144: EQUAL
22145: AND
22146: IFFALSE 22167
// MinerPlaceMine ( unit , x , y ) ;
22148: LD_VAR 0 2
22152: PPUSH
22153: LD_VAR 0 4
22157: PPUSH
22158: LD_VAR 0 5
22162: PPUSH
22163: CALL 24895 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
22167: LD_VAR 0 1
22171: PUSH
22172: LD_INT 251
22174: EQUAL
22175: PUSH
22176: LD_VAR 0 2
22180: PPUSH
22181: CALL_OW 264
22185: PUSH
22186: LD_EXP 31
22190: EQUAL
22191: AND
22192: IFFALSE 22213
// MinerDetonateMine ( unit , x , y ) ;
22194: LD_VAR 0 2
22198: PPUSH
22199: LD_VAR 0 4
22203: PPUSH
22204: LD_VAR 0 5
22208: PPUSH
22209: CALL 25172 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
22213: LD_VAR 0 1
22217: PUSH
22218: LD_INT 252
22220: EQUAL
22221: PUSH
22222: LD_VAR 0 2
22226: PPUSH
22227: CALL_OW 264
22231: PUSH
22232: LD_EXP 31
22236: EQUAL
22237: AND
22238: IFFALSE 22259
// MinerCreateMinefield ( unit , x , y ) ;
22240: LD_VAR 0 2
22244: PPUSH
22245: LD_VAR 0 4
22249: PPUSH
22250: LD_VAR 0 5
22254: PPUSH
22255: CALL 25589 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
22259: LD_VAR 0 1
22263: PUSH
22264: LD_INT 253
22266: EQUAL
22267: PUSH
22268: LD_VAR 0 2
22272: PPUSH
22273: CALL_OW 257
22277: PUSH
22278: LD_INT 5
22280: EQUAL
22281: AND
22282: IFFALSE 22303
// ComBinocular ( unit , x , y ) ;
22284: LD_VAR 0 2
22288: PPUSH
22289: LD_VAR 0 4
22293: PPUSH
22294: LD_VAR 0 5
22298: PPUSH
22299: CALL 25960 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
22303: LD_VAR 0 1
22307: PUSH
22308: LD_INT 254
22310: EQUAL
22311: PUSH
22312: LD_VAR 0 2
22316: PPUSH
22317: CALL_OW 264
22321: PUSH
22322: LD_EXP 26
22326: EQUAL
22327: AND
22328: PUSH
22329: LD_VAR 0 3
22333: PPUSH
22334: CALL_OW 263
22338: PUSH
22339: LD_INT 3
22341: EQUAL
22342: AND
22343: IFFALSE 22359
// HackDestroyVehicle ( unit , selectedUnit ) ;
22345: LD_VAR 0 2
22349: PPUSH
22350: LD_VAR 0 3
22354: PPUSH
22355: CALL 24255 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
22359: LD_VAR 0 1
22363: PUSH
22364: LD_INT 255
22366: EQUAL
22367: PUSH
22368: LD_VAR 0 2
22372: PPUSH
22373: CALL_OW 264
22377: PUSH
22378: LD_INT 14
22380: PUSH
22381: LD_INT 53
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: IN
22388: AND
22389: PUSH
22390: LD_VAR 0 4
22394: PPUSH
22395: LD_VAR 0 5
22399: PPUSH
22400: CALL_OW 488
22404: AND
22405: IFFALSE 22429
// CutTreeXYR ( unit , x , y , 12 ) ;
22407: LD_VAR 0 2
22411: PPUSH
22412: LD_VAR 0 4
22416: PPUSH
22417: LD_VAR 0 5
22421: PPUSH
22422: LD_INT 12
22424: PPUSH
22425: CALL 22821 0 4
// if cmd = 256 then
22429: LD_VAR 0 1
22433: PUSH
22434: LD_INT 256
22436: EQUAL
22437: IFFALSE 22458
// SetFactoryWaypoint ( unit , x , y ) ;
22439: LD_VAR 0 2
22443: PPUSH
22444: LD_VAR 0 4
22448: PPUSH
22449: LD_VAR 0 5
22453: PPUSH
22454: CALL 22463 0 3
// end ;
22458: LD_VAR 0 6
22462: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22463: LD_INT 0
22465: PPUSH
22466: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22467: LD_VAR 0 1
22471: NOT
22472: PUSH
22473: LD_VAR 0 2
22477: PPUSH
22478: LD_VAR 0 3
22482: PPUSH
22483: CALL_OW 488
22487: NOT
22488: OR
22489: PUSH
22490: LD_VAR 0 1
22494: PPUSH
22495: CALL_OW 266
22499: PUSH
22500: LD_INT 3
22502: NONEQUAL
22503: PUSH
22504: LD_VAR 0 1
22508: PPUSH
22509: CALL_OW 247
22513: PUSH
22514: LD_INT 1
22516: EQUAL
22517: NOT
22518: AND
22519: OR
22520: IFFALSE 22524
// exit ;
22522: GO 22673
// if GetType ( factory ) = unit_human then
22524: LD_VAR 0 1
22528: PPUSH
22529: CALL_OW 247
22533: PUSH
22534: LD_INT 1
22536: EQUAL
22537: IFFALSE 22554
// factory := IsInUnit ( factory ) ;
22539: LD_ADDR_VAR 0 1
22543: PUSH
22544: LD_VAR 0 1
22548: PPUSH
22549: CALL_OW 310
22553: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22554: LD_VAR 0 1
22558: PPUSH
22559: CALL_OW 266
22563: PUSH
22564: LD_INT 3
22566: NONEQUAL
22567: IFFALSE 22571
// exit ;
22569: GO 22673
// if HexInfo ( x , y ) = factory then
22571: LD_VAR 0 2
22575: PPUSH
22576: LD_VAR 0 3
22580: PPUSH
22581: CALL_OW 428
22585: PUSH
22586: LD_VAR 0 1
22590: EQUAL
22591: IFFALSE 22618
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22593: LD_ADDR_EXP 101
22597: PUSH
22598: LD_EXP 101
22602: PPUSH
22603: LD_VAR 0 1
22607: PPUSH
22608: LD_INT 0
22610: PPUSH
22611: CALL_OW 1
22615: ST_TO_ADDR
22616: GO 22669
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22618: LD_ADDR_EXP 101
22622: PUSH
22623: LD_EXP 101
22627: PPUSH
22628: LD_VAR 0 1
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 255
22642: PUSH
22643: LD_VAR 0 1
22647: PUSH
22648: LD_VAR 0 2
22652: PUSH
22653: LD_VAR 0 3
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: PPUSH
22664: CALL_OW 1
22668: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22669: CALL 22678 0 0
// end ;
22673: LD_VAR 0 4
22677: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
22678: LD_INT 0
22680: PPUSH
22681: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22682: LD_STRING resetFactoryWaypoint();
22684: PPUSH
22685: CALL_OW 559
// if factoryWaypoints then
22689: LD_EXP 101
22693: IFFALSE 22816
// begin for i := 1 to factoryWaypoints do
22695: LD_ADDR_VAR 0 2
22699: PUSH
22700: DOUBLE
22701: LD_INT 1
22703: DEC
22704: ST_TO_ADDR
22705: LD_EXP 101
22709: PUSH
22710: FOR_TO
22711: IFFALSE 22814
// if factoryWaypoints [ i ] then
22713: LD_EXP 101
22717: PUSH
22718: LD_VAR 0 2
22722: ARRAY
22723: IFFALSE 22812
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
22725: LD_STRING setFactoryWaypointXY(
22727: PUSH
22728: LD_EXP 101
22732: PUSH
22733: LD_VAR 0 2
22737: ARRAY
22738: PUSH
22739: LD_INT 1
22741: ARRAY
22742: STR
22743: PUSH
22744: LD_STRING ,
22746: STR
22747: PUSH
22748: LD_EXP 101
22752: PUSH
22753: LD_VAR 0 2
22757: ARRAY
22758: PUSH
22759: LD_INT 2
22761: ARRAY
22762: STR
22763: PUSH
22764: LD_STRING ,
22766: STR
22767: PUSH
22768: LD_EXP 101
22772: PUSH
22773: LD_VAR 0 2
22777: ARRAY
22778: PUSH
22779: LD_INT 3
22781: ARRAY
22782: STR
22783: PUSH
22784: LD_STRING ,
22786: STR
22787: PUSH
22788: LD_EXP 101
22792: PUSH
22793: LD_VAR 0 2
22797: ARRAY
22798: PUSH
22799: LD_INT 4
22801: ARRAY
22802: STR
22803: PUSH
22804: LD_STRING )
22806: STR
22807: PPUSH
22808: CALL_OW 559
22812: GO 22710
22814: POP
22815: POP
// end ; end ;
22816: LD_VAR 0 1
22820: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
22821: LD_INT 0
22823: PPUSH
22824: PPUSH
22825: PPUSH
22826: PPUSH
22827: PPUSH
22828: PPUSH
22829: PPUSH
22830: PPUSH
22831: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
22832: LD_VAR 0 1
22836: NOT
22837: PUSH
22838: LD_VAR 0 2
22842: PPUSH
22843: LD_VAR 0 3
22847: PPUSH
22848: CALL_OW 488
22852: NOT
22853: OR
22854: PUSH
22855: LD_VAR 0 4
22859: NOT
22860: OR
22861: IFFALSE 22865
// exit ;
22863: GO 23205
// list := [ ] ;
22865: LD_ADDR_VAR 0 13
22869: PUSH
22870: EMPTY
22871: ST_TO_ADDR
// if x - r < 0 then
22872: LD_VAR 0 2
22876: PUSH
22877: LD_VAR 0 4
22881: MINUS
22882: PUSH
22883: LD_INT 0
22885: LESS
22886: IFFALSE 22898
// min_x := 0 else
22888: LD_ADDR_VAR 0 7
22892: PUSH
22893: LD_INT 0
22895: ST_TO_ADDR
22896: GO 22914
// min_x := x - r ;
22898: LD_ADDR_VAR 0 7
22902: PUSH
22903: LD_VAR 0 2
22907: PUSH
22908: LD_VAR 0 4
22912: MINUS
22913: ST_TO_ADDR
// if y - r < 0 then
22914: LD_VAR 0 3
22918: PUSH
22919: LD_VAR 0 4
22923: MINUS
22924: PUSH
22925: LD_INT 0
22927: LESS
22928: IFFALSE 22940
// min_y := 0 else
22930: LD_ADDR_VAR 0 8
22934: PUSH
22935: LD_INT 0
22937: ST_TO_ADDR
22938: GO 22956
// min_y := y - r ;
22940: LD_ADDR_VAR 0 8
22944: PUSH
22945: LD_VAR 0 3
22949: PUSH
22950: LD_VAR 0 4
22954: MINUS
22955: ST_TO_ADDR
// max_x := x + r ;
22956: LD_ADDR_VAR 0 9
22960: PUSH
22961: LD_VAR 0 2
22965: PUSH
22966: LD_VAR 0 4
22970: PLUS
22971: ST_TO_ADDR
// max_y := y + r ;
22972: LD_ADDR_VAR 0 10
22976: PUSH
22977: LD_VAR 0 3
22981: PUSH
22982: LD_VAR 0 4
22986: PLUS
22987: ST_TO_ADDR
// for _x = min_x to max_x do
22988: LD_ADDR_VAR 0 11
22992: PUSH
22993: DOUBLE
22994: LD_VAR 0 7
22998: DEC
22999: ST_TO_ADDR
23000: LD_VAR 0 9
23004: PUSH
23005: FOR_TO
23006: IFFALSE 23123
// for _y = min_y to max_y do
23008: LD_ADDR_VAR 0 12
23012: PUSH
23013: DOUBLE
23014: LD_VAR 0 8
23018: DEC
23019: ST_TO_ADDR
23020: LD_VAR 0 10
23024: PUSH
23025: FOR_TO
23026: IFFALSE 23119
// begin if not ValidHex ( _x , _y ) then
23028: LD_VAR 0 11
23032: PPUSH
23033: LD_VAR 0 12
23037: PPUSH
23038: CALL_OW 488
23042: NOT
23043: IFFALSE 23047
// continue ;
23045: GO 23025
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
23047: LD_VAR 0 11
23051: PPUSH
23052: LD_VAR 0 12
23056: PPUSH
23057: CALL_OW 351
23061: PUSH
23062: LD_VAR 0 11
23066: PPUSH
23067: LD_VAR 0 12
23071: PPUSH
23072: CALL_OW 554
23076: AND
23077: IFFALSE 23117
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
23079: LD_ADDR_VAR 0 13
23083: PUSH
23084: LD_VAR 0 13
23088: PPUSH
23089: LD_VAR 0 13
23093: PUSH
23094: LD_INT 1
23096: PLUS
23097: PPUSH
23098: LD_VAR 0 11
23102: PUSH
23103: LD_VAR 0 12
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PPUSH
23112: CALL_OW 2
23116: ST_TO_ADDR
// end ;
23117: GO 23025
23119: POP
23120: POP
23121: GO 23005
23123: POP
23124: POP
// if not list then
23125: LD_VAR 0 13
23129: NOT
23130: IFFALSE 23134
// exit ;
23132: GO 23205
// for i in list do
23134: LD_ADDR_VAR 0 6
23138: PUSH
23139: LD_VAR 0 13
23143: PUSH
23144: FOR_IN
23145: IFFALSE 23203
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
23147: LD_VAR 0 1
23151: PPUSH
23152: LD_STRING M
23154: PUSH
23155: LD_VAR 0 6
23159: PUSH
23160: LD_INT 1
23162: ARRAY
23163: PUSH
23164: LD_VAR 0 6
23168: PUSH
23169: LD_INT 2
23171: ARRAY
23172: PUSH
23173: LD_INT 0
23175: PUSH
23176: LD_INT 0
23178: PUSH
23179: LD_INT 0
23181: PUSH
23182: LD_INT 0
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: PPUSH
23197: CALL_OW 447
23201: GO 23144
23203: POP
23204: POP
// end ;
23205: LD_VAR 0 5
23209: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
23210: LD_EXP 102
23214: NOT
23215: IFFALSE 23265
23217: GO 23219
23219: DISABLE
// begin initHack := true ;
23220: LD_ADDR_EXP 102
23224: PUSH
23225: LD_INT 1
23227: ST_TO_ADDR
// hackTanks := [ ] ;
23228: LD_ADDR_EXP 103
23232: PUSH
23233: EMPTY
23234: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
23235: LD_ADDR_EXP 104
23239: PUSH
23240: EMPTY
23241: ST_TO_ADDR
// hackLimit := 3 ;
23242: LD_ADDR_EXP 105
23246: PUSH
23247: LD_INT 3
23249: ST_TO_ADDR
// hackDist := 12 ;
23250: LD_ADDR_EXP 106
23254: PUSH
23255: LD_INT 12
23257: ST_TO_ADDR
// hackCounter := [ ] ;
23258: LD_ADDR_EXP 107
23262: PUSH
23263: EMPTY
23264: ST_TO_ADDR
// end ;
23265: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
23266: LD_EXP 102
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_EXP 26
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PPUSH
23283: CALL_OW 69
23287: AND
23288: IFFALSE 23543
23290: GO 23292
23292: DISABLE
23293: LD_INT 0
23295: PPUSH
23296: PPUSH
// begin enable ;
23297: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
23298: LD_ADDR_VAR 0 1
23302: PUSH
23303: LD_INT 34
23305: PUSH
23306: LD_EXP 26
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PPUSH
23315: CALL_OW 69
23319: PUSH
23320: FOR_IN
23321: IFFALSE 23541
// begin if not i in hackTanks then
23323: LD_VAR 0 1
23327: PUSH
23328: LD_EXP 103
23332: IN
23333: NOT
23334: IFFALSE 23417
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
23336: LD_ADDR_EXP 103
23340: PUSH
23341: LD_EXP 103
23345: PPUSH
23346: LD_EXP 103
23350: PUSH
23351: LD_INT 1
23353: PLUS
23354: PPUSH
23355: LD_VAR 0 1
23359: PPUSH
23360: CALL_OW 1
23364: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
23365: LD_ADDR_EXP 104
23369: PUSH
23370: LD_EXP 104
23374: PPUSH
23375: LD_EXP 104
23379: PUSH
23380: LD_INT 1
23382: PLUS
23383: PPUSH
23384: EMPTY
23385: PPUSH
23386: CALL_OW 1
23390: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
23391: LD_ADDR_EXP 107
23395: PUSH
23396: LD_EXP 107
23400: PPUSH
23401: LD_EXP 107
23405: PUSH
23406: LD_INT 1
23408: PLUS
23409: PPUSH
23410: EMPTY
23411: PPUSH
23412: CALL_OW 1
23416: ST_TO_ADDR
// end ; if not IsOk ( i ) then
23417: LD_VAR 0 1
23421: PPUSH
23422: CALL_OW 302
23426: NOT
23427: IFFALSE 23440
// begin HackUnlinkAll ( i ) ;
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL 23546 0 1
// continue ;
23438: GO 23320
// end ; HackCheckCapturedStatus ( i ) ;
23440: LD_VAR 0 1
23444: PPUSH
23445: CALL 23989 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
23449: LD_ADDR_VAR 0 2
23453: PUSH
23454: LD_INT 81
23456: PUSH
23457: LD_VAR 0 1
23461: PPUSH
23462: CALL_OW 255
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: LD_INT 33
23473: PUSH
23474: LD_INT 3
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 91
23483: PUSH
23484: LD_VAR 0 1
23488: PUSH
23489: LD_EXP 106
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 50
23501: PUSH
23502: EMPTY
23503: LIST
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: PPUSH
23511: CALL_OW 69
23515: ST_TO_ADDR
// if not tmp then
23516: LD_VAR 0 2
23520: NOT
23521: IFFALSE 23525
// continue ;
23523: GO 23320
// HackLink ( i , tmp ) ;
23525: LD_VAR 0 1
23529: PPUSH
23530: LD_VAR 0 2
23534: PPUSH
23535: CALL 23682 0 2
// end ;
23539: GO 23320
23541: POP
23542: POP
// end ;
23543: PPOPN 2
23545: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
23546: LD_INT 0
23548: PPUSH
23549: PPUSH
23550: PPUSH
// if not hack in hackTanks then
23551: LD_VAR 0 1
23555: PUSH
23556: LD_EXP 103
23560: IN
23561: NOT
23562: IFFALSE 23566
// exit ;
23564: GO 23677
// index := GetElementIndex ( hackTanks , hack ) ;
23566: LD_ADDR_VAR 0 4
23570: PUSH
23571: LD_EXP 103
23575: PPUSH
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL 31151 0 2
23585: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
23586: LD_EXP 104
23590: PUSH
23591: LD_VAR 0 4
23595: ARRAY
23596: IFFALSE 23677
// begin for i in hackTanksCaptured [ index ] do
23598: LD_ADDR_VAR 0 3
23602: PUSH
23603: LD_EXP 104
23607: PUSH
23608: LD_VAR 0 4
23612: ARRAY
23613: PUSH
23614: FOR_IN
23615: IFFALSE 23641
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
23617: LD_VAR 0 3
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PPUSH
23626: LD_VAR 0 3
23630: PUSH
23631: LD_INT 2
23633: ARRAY
23634: PPUSH
23635: CALL_OW 235
23639: GO 23614
23641: POP
23642: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
23643: LD_ADDR_EXP 104
23647: PUSH
23648: LD_EXP 104
23652: PPUSH
23653: LD_VAR 0 4
23657: PPUSH
23658: EMPTY
23659: PPUSH
23660: CALL_OW 1
23664: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
23665: LD_VAR 0 1
23669: PPUSH
23670: LD_INT 0
23672: PPUSH
23673: CALL_OW 505
// end ; end ;
23677: LD_VAR 0 2
23681: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
23682: LD_INT 0
23684: PPUSH
23685: PPUSH
23686: PPUSH
// if not hack in hackTanks or not vehicles then
23687: LD_VAR 0 1
23691: PUSH
23692: LD_EXP 103
23696: IN
23697: NOT
23698: PUSH
23699: LD_VAR 0 2
23703: NOT
23704: OR
23705: IFFALSE 23709
// exit ;
23707: GO 23984
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
23709: LD_ADDR_VAR 0 2
23713: PUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: LD_VAR 0 2
23723: PPUSH
23724: LD_INT 1
23726: PPUSH
23727: LD_INT 1
23729: PPUSH
23730: CALL 31801 0 4
23734: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
23735: LD_ADDR_VAR 0 5
23739: PUSH
23740: LD_EXP 103
23744: PPUSH
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL 31151 0 2
23754: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
23755: LD_EXP 104
23759: PUSH
23760: LD_VAR 0 5
23764: ARRAY
23765: PUSH
23766: LD_EXP 105
23770: LESS
23771: IFFALSE 23960
// begin for i := 1 to vehicles do
23773: LD_ADDR_VAR 0 4
23777: PUSH
23778: DOUBLE
23779: LD_INT 1
23781: DEC
23782: ST_TO_ADDR
23783: LD_VAR 0 2
23787: PUSH
23788: FOR_TO
23789: IFFALSE 23958
// begin if hackTanksCaptured [ index ] = hackLimit then
23791: LD_EXP 104
23795: PUSH
23796: LD_VAR 0 5
23800: ARRAY
23801: PUSH
23802: LD_EXP 105
23806: EQUAL
23807: IFFALSE 23811
// break ;
23809: GO 23958
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23811: LD_ADDR_EXP 107
23815: PUSH
23816: LD_EXP 107
23820: PPUSH
23821: LD_VAR 0 5
23825: PPUSH
23826: LD_EXP 107
23830: PUSH
23831: LD_VAR 0 5
23835: ARRAY
23836: PUSH
23837: LD_INT 1
23839: PLUS
23840: PPUSH
23841: CALL_OW 1
23845: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23846: LD_ADDR_EXP 104
23850: PUSH
23851: LD_EXP 104
23855: PPUSH
23856: LD_VAR 0 5
23860: PUSH
23861: LD_EXP 104
23865: PUSH
23866: LD_VAR 0 5
23870: ARRAY
23871: PUSH
23872: LD_INT 1
23874: PLUS
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: PPUSH
23880: LD_VAR 0 2
23884: PUSH
23885: LD_VAR 0 4
23889: ARRAY
23890: PUSH
23891: LD_VAR 0 2
23895: PUSH
23896: LD_VAR 0 4
23900: ARRAY
23901: PPUSH
23902: CALL_OW 255
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL 31366 0 3
23915: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23916: LD_VAR 0 2
23920: PUSH
23921: LD_VAR 0 4
23925: ARRAY
23926: PPUSH
23927: LD_VAR 0 1
23931: PPUSH
23932: CALL_OW 255
23936: PPUSH
23937: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23941: LD_VAR 0 2
23945: PUSH
23946: LD_VAR 0 4
23950: ARRAY
23951: PPUSH
23952: CALL_OW 141
// end ;
23956: GO 23788
23958: POP
23959: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23960: LD_VAR 0 1
23964: PPUSH
23965: LD_EXP 104
23969: PUSH
23970: LD_VAR 0 5
23974: ARRAY
23975: PUSH
23976: LD_INT 0
23978: PLUS
23979: PPUSH
23980: CALL_OW 505
// end ;
23984: LD_VAR 0 3
23988: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23989: LD_INT 0
23991: PPUSH
23992: PPUSH
23993: PPUSH
23994: PPUSH
// if not hack in hackTanks then
23995: LD_VAR 0 1
23999: PUSH
24000: LD_EXP 103
24004: IN
24005: NOT
24006: IFFALSE 24010
// exit ;
24008: GO 24250
// index := GetElementIndex ( hackTanks , hack ) ;
24010: LD_ADDR_VAR 0 4
24014: PUSH
24015: LD_EXP 103
24019: PPUSH
24020: LD_VAR 0 1
24024: PPUSH
24025: CALL 31151 0 2
24029: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
24030: LD_ADDR_VAR 0 3
24034: PUSH
24035: DOUBLE
24036: LD_EXP 104
24040: PUSH
24041: LD_VAR 0 4
24045: ARRAY
24046: INC
24047: ST_TO_ADDR
24048: LD_INT 1
24050: PUSH
24051: FOR_DOWNTO
24052: IFFALSE 24224
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
24054: LD_ADDR_VAR 0 5
24058: PUSH
24059: LD_EXP 104
24063: PUSH
24064: LD_VAR 0 4
24068: ARRAY
24069: PUSH
24070: LD_VAR 0 3
24074: ARRAY
24075: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
24076: LD_VAR 0 5
24080: PUSH
24081: LD_INT 1
24083: ARRAY
24084: PPUSH
24085: CALL_OW 302
24089: NOT
24090: PUSH
24091: LD_VAR 0 5
24095: PUSH
24096: LD_INT 1
24098: ARRAY
24099: PPUSH
24100: CALL_OW 255
24104: PUSH
24105: LD_VAR 0 1
24109: PPUSH
24110: CALL_OW 255
24114: NONEQUAL
24115: OR
24116: IFFALSE 24222
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
24118: LD_VAR 0 5
24122: PUSH
24123: LD_INT 1
24125: ARRAY
24126: PPUSH
24127: CALL_OW 305
24131: PUSH
24132: LD_VAR 0 5
24136: PUSH
24137: LD_INT 1
24139: ARRAY
24140: PPUSH
24141: CALL_OW 255
24145: PUSH
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 255
24155: EQUAL
24156: AND
24157: IFFALSE 24181
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
24159: LD_VAR 0 5
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: PPUSH
24168: LD_VAR 0 5
24172: PUSH
24173: LD_INT 2
24175: ARRAY
24176: PPUSH
24177: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
24181: LD_ADDR_EXP 104
24185: PUSH
24186: LD_EXP 104
24190: PPUSH
24191: LD_VAR 0 4
24195: PPUSH
24196: LD_EXP 104
24200: PUSH
24201: LD_VAR 0 4
24205: ARRAY
24206: PPUSH
24207: LD_VAR 0 3
24211: PPUSH
24212: CALL_OW 3
24216: PPUSH
24217: CALL_OW 1
24221: ST_TO_ADDR
// end ; end ;
24222: GO 24051
24224: POP
24225: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
24226: LD_VAR 0 1
24230: PPUSH
24231: LD_EXP 104
24235: PUSH
24236: LD_VAR 0 4
24240: ARRAY
24241: PUSH
24242: LD_INT 0
24244: PLUS
24245: PPUSH
24246: CALL_OW 505
// end ;
24250: LD_VAR 0 2
24254: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
24255: LD_INT 0
24257: PPUSH
24258: PPUSH
24259: PPUSH
24260: PPUSH
// if not hack in hackTanks then
24261: LD_VAR 0 1
24265: PUSH
24266: LD_EXP 103
24270: IN
24271: NOT
24272: IFFALSE 24276
// exit ;
24274: GO 24361
// index := GetElementIndex ( hackTanks , hack ) ;
24276: LD_ADDR_VAR 0 5
24280: PUSH
24281: LD_EXP 103
24285: PPUSH
24286: LD_VAR 0 1
24290: PPUSH
24291: CALL 31151 0 2
24295: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: DOUBLE
24302: LD_INT 1
24304: DEC
24305: ST_TO_ADDR
24306: LD_EXP 104
24310: PUSH
24311: LD_VAR 0 5
24315: ARRAY
24316: PUSH
24317: FOR_TO
24318: IFFALSE 24359
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
24320: LD_EXP 104
24324: PUSH
24325: LD_VAR 0 5
24329: ARRAY
24330: PUSH
24331: LD_VAR 0 4
24335: ARRAY
24336: PUSH
24337: LD_INT 1
24339: ARRAY
24340: PUSH
24341: LD_VAR 0 2
24345: EQUAL
24346: IFFALSE 24357
// KillUnit ( vehicle ) ;
24348: LD_VAR 0 2
24352: PPUSH
24353: CALL_OW 66
24357: GO 24317
24359: POP
24360: POP
// end ;
24361: LD_VAR 0 3
24365: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
24366: LD_EXP 108
24370: NOT
24371: IFFALSE 24406
24373: GO 24375
24375: DISABLE
// begin initMiner := true ;
24376: LD_ADDR_EXP 108
24380: PUSH
24381: LD_INT 1
24383: ST_TO_ADDR
// minersList := [ ] ;
24384: LD_ADDR_EXP 109
24388: PUSH
24389: EMPTY
24390: ST_TO_ADDR
// minerMinesList := [ ] ;
24391: LD_ADDR_EXP 110
24395: PUSH
24396: EMPTY
24397: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
24398: LD_ADDR_EXP 111
24402: PUSH
24403: LD_INT 5
24405: ST_TO_ADDR
// end ;
24406: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
24407: LD_EXP 108
24411: PUSH
24412: LD_INT 34
24414: PUSH
24415: LD_EXP 31
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: AND
24429: IFFALSE 24892
24431: GO 24433
24433: DISABLE
24434: LD_INT 0
24436: PPUSH
24437: PPUSH
24438: PPUSH
24439: PPUSH
// begin enable ;
24440: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
24441: LD_ADDR_VAR 0 1
24445: PUSH
24446: LD_INT 34
24448: PUSH
24449: LD_EXP 31
24453: PUSH
24454: EMPTY
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 69
24462: PUSH
24463: FOR_IN
24464: IFFALSE 24536
// begin if not i in minersList then
24466: LD_VAR 0 1
24470: PUSH
24471: LD_EXP 109
24475: IN
24476: NOT
24477: IFFALSE 24534
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
24479: LD_ADDR_EXP 109
24483: PUSH
24484: LD_EXP 109
24488: PPUSH
24489: LD_EXP 109
24493: PUSH
24494: LD_INT 1
24496: PLUS
24497: PPUSH
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL_OW 1
24507: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
24508: LD_ADDR_EXP 110
24512: PUSH
24513: LD_EXP 110
24517: PPUSH
24518: LD_EXP 110
24522: PUSH
24523: LD_INT 1
24525: PLUS
24526: PPUSH
24527: EMPTY
24528: PPUSH
24529: CALL_OW 1
24533: ST_TO_ADDR
// end end ;
24534: GO 24463
24536: POP
24537: POP
// for i := minerMinesList downto 1 do
24538: LD_ADDR_VAR 0 1
24542: PUSH
24543: DOUBLE
24544: LD_EXP 110
24548: INC
24549: ST_TO_ADDR
24550: LD_INT 1
24552: PUSH
24553: FOR_DOWNTO
24554: IFFALSE 24890
// begin if IsLive ( minersList [ i ] ) then
24556: LD_EXP 109
24560: PUSH
24561: LD_VAR 0 1
24565: ARRAY
24566: PPUSH
24567: CALL_OW 300
24571: IFFALSE 24599
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
24573: LD_EXP 109
24577: PUSH
24578: LD_VAR 0 1
24582: ARRAY
24583: PPUSH
24584: LD_EXP 110
24588: PUSH
24589: LD_VAR 0 1
24593: ARRAY
24594: PPUSH
24595: CALL_OW 505
// if not minerMinesList [ i ] then
24599: LD_EXP 110
24603: PUSH
24604: LD_VAR 0 1
24608: ARRAY
24609: NOT
24610: IFFALSE 24614
// continue ;
24612: GO 24553
// for j := minerMinesList [ i ] downto 1 do
24614: LD_ADDR_VAR 0 2
24618: PUSH
24619: DOUBLE
24620: LD_EXP 110
24624: PUSH
24625: LD_VAR 0 1
24629: ARRAY
24630: INC
24631: ST_TO_ADDR
24632: LD_INT 1
24634: PUSH
24635: FOR_DOWNTO
24636: IFFALSE 24886
// begin side := GetSide ( minersList [ i ] ) ;
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_EXP 109
24647: PUSH
24648: LD_VAR 0 1
24652: ARRAY
24653: PPUSH
24654: CALL_OW 255
24658: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24659: LD_ADDR_VAR 0 4
24663: PUSH
24664: LD_EXP 110
24668: PUSH
24669: LD_VAR 0 1
24673: ARRAY
24674: PUSH
24675: LD_VAR 0 2
24679: ARRAY
24680: PUSH
24681: LD_INT 1
24683: ARRAY
24684: PPUSH
24685: LD_EXP 110
24689: PUSH
24690: LD_VAR 0 1
24694: ARRAY
24695: PUSH
24696: LD_VAR 0 2
24700: ARRAY
24701: PUSH
24702: LD_INT 2
24704: ARRAY
24705: PPUSH
24706: CALL_OW 428
24710: ST_TO_ADDR
// if not tmp then
24711: LD_VAR 0 4
24715: NOT
24716: IFFALSE 24720
// continue ;
24718: GO 24635
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24720: LD_VAR 0 4
24724: PUSH
24725: LD_INT 81
24727: PUSH
24728: LD_VAR 0 3
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 69
24741: IN
24742: PUSH
24743: LD_EXP 110
24747: PUSH
24748: LD_VAR 0 1
24752: ARRAY
24753: PUSH
24754: LD_VAR 0 2
24758: ARRAY
24759: PUSH
24760: LD_INT 1
24762: ARRAY
24763: PPUSH
24764: LD_EXP 110
24768: PUSH
24769: LD_VAR 0 1
24773: ARRAY
24774: PUSH
24775: LD_VAR 0 2
24779: ARRAY
24780: PUSH
24781: LD_INT 2
24783: ARRAY
24784: PPUSH
24785: CALL_OW 458
24789: AND
24790: IFFALSE 24884
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24792: LD_EXP 110
24796: PUSH
24797: LD_VAR 0 1
24801: ARRAY
24802: PUSH
24803: LD_VAR 0 2
24807: ARRAY
24808: PUSH
24809: LD_INT 1
24811: ARRAY
24812: PPUSH
24813: LD_EXP 110
24817: PUSH
24818: LD_VAR 0 1
24822: ARRAY
24823: PUSH
24824: LD_VAR 0 2
24828: ARRAY
24829: PUSH
24830: LD_INT 2
24832: ARRAY
24833: PPUSH
24834: LD_VAR 0 3
24838: PPUSH
24839: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24843: LD_ADDR_EXP 110
24847: PUSH
24848: LD_EXP 110
24852: PPUSH
24853: LD_VAR 0 1
24857: PPUSH
24858: LD_EXP 110
24862: PUSH
24863: LD_VAR 0 1
24867: ARRAY
24868: PPUSH
24869: LD_VAR 0 2
24873: PPUSH
24874: CALL_OW 3
24878: PPUSH
24879: CALL_OW 1
24883: ST_TO_ADDR
// end ; end ;
24884: GO 24635
24886: POP
24887: POP
// end ;
24888: GO 24553
24890: POP
24891: POP
// end ;
24892: PPOPN 4
24894: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
// result := false ;
24899: LD_ADDR_VAR 0 4
24903: PUSH
24904: LD_INT 0
24906: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24907: LD_VAR 0 1
24911: PPUSH
24912: CALL_OW 264
24916: PUSH
24917: LD_EXP 31
24921: EQUAL
24922: NOT
24923: IFFALSE 24927
// exit ;
24925: GO 25167
// index := GetElementIndex ( minersList , unit ) ;
24927: LD_ADDR_VAR 0 5
24931: PUSH
24932: LD_EXP 109
24936: PPUSH
24937: LD_VAR 0 1
24941: PPUSH
24942: CALL 31151 0 2
24946: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24947: LD_EXP 110
24951: PUSH
24952: LD_VAR 0 5
24956: ARRAY
24957: PUSH
24958: LD_EXP 111
24962: GREATEREQUAL
24963: IFFALSE 24967
// exit ;
24965: GO 25167
// ComMoveXY ( unit , x , y ) ;
24967: LD_VAR 0 1
24971: PPUSH
24972: LD_VAR 0 2
24976: PPUSH
24977: LD_VAR 0 3
24981: PPUSH
24982: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24986: LD_INT 35
24988: PPUSH
24989: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24993: LD_VAR 0 1
24997: PPUSH
24998: LD_VAR 0 2
25002: PPUSH
25003: LD_VAR 0 3
25007: PPUSH
25008: CALL 61870 0 3
25012: NOT
25013: PUSH
25014: LD_VAR 0 1
25018: PPUSH
25019: CALL_OW 314
25023: AND
25024: IFFALSE 25028
// exit ;
25026: GO 25167
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
25028: LD_VAR 0 2
25032: PPUSH
25033: LD_VAR 0 3
25037: PPUSH
25038: CALL_OW 428
25042: PUSH
25043: LD_VAR 0 1
25047: EQUAL
25048: PUSH
25049: LD_VAR 0 1
25053: PPUSH
25054: CALL_OW 314
25058: NOT
25059: AND
25060: IFFALSE 24986
// PlaySoundXY ( x , y , PlantMine ) ;
25062: LD_VAR 0 2
25066: PPUSH
25067: LD_VAR 0 3
25071: PPUSH
25072: LD_STRING PlantMine
25074: PPUSH
25075: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 255
25098: PPUSH
25099: LD_INT 0
25101: PPUSH
25102: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
25106: LD_ADDR_EXP 110
25110: PUSH
25111: LD_EXP 110
25115: PPUSH
25116: LD_VAR 0 5
25120: PUSH
25121: LD_EXP 110
25125: PUSH
25126: LD_VAR 0 5
25130: ARRAY
25131: PUSH
25132: LD_INT 1
25134: PLUS
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PPUSH
25140: LD_VAR 0 2
25144: PUSH
25145: LD_VAR 0 3
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PPUSH
25154: CALL 31366 0 3
25158: ST_TO_ADDR
// result := true ;
25159: LD_ADDR_VAR 0 4
25163: PUSH
25164: LD_INT 1
25166: ST_TO_ADDR
// end ;
25167: LD_VAR 0 4
25171: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
25172: LD_INT 0
25174: PPUSH
25175: PPUSH
25176: PPUSH
// if not unit in minersList then
25177: LD_VAR 0 1
25181: PUSH
25182: LD_EXP 109
25186: IN
25187: NOT
25188: IFFALSE 25192
// exit ;
25190: GO 25584
// index := GetElementIndex ( minersList , unit ) ;
25192: LD_ADDR_VAR 0 6
25196: PUSH
25197: LD_EXP 109
25201: PPUSH
25202: LD_VAR 0 1
25206: PPUSH
25207: CALL 31151 0 2
25211: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
25212: LD_ADDR_VAR 0 5
25216: PUSH
25217: DOUBLE
25218: LD_EXP 110
25222: PUSH
25223: LD_VAR 0 6
25227: ARRAY
25228: INC
25229: ST_TO_ADDR
25230: LD_INT 1
25232: PUSH
25233: FOR_DOWNTO
25234: IFFALSE 25395
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
25236: LD_EXP 110
25240: PUSH
25241: LD_VAR 0 6
25245: ARRAY
25246: PUSH
25247: LD_VAR 0 5
25251: ARRAY
25252: PUSH
25253: LD_INT 1
25255: ARRAY
25256: PUSH
25257: LD_VAR 0 2
25261: EQUAL
25262: PUSH
25263: LD_EXP 110
25267: PUSH
25268: LD_VAR 0 6
25272: ARRAY
25273: PUSH
25274: LD_VAR 0 5
25278: ARRAY
25279: PUSH
25280: LD_INT 2
25282: ARRAY
25283: PUSH
25284: LD_VAR 0 3
25288: EQUAL
25289: AND
25290: IFFALSE 25393
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25292: LD_EXP 110
25296: PUSH
25297: LD_VAR 0 6
25301: ARRAY
25302: PUSH
25303: LD_VAR 0 5
25307: ARRAY
25308: PUSH
25309: LD_INT 1
25311: ARRAY
25312: PPUSH
25313: LD_EXP 110
25317: PUSH
25318: LD_VAR 0 6
25322: ARRAY
25323: PUSH
25324: LD_VAR 0 5
25328: ARRAY
25329: PUSH
25330: LD_INT 2
25332: ARRAY
25333: PPUSH
25334: LD_VAR 0 1
25338: PPUSH
25339: CALL_OW 255
25343: PPUSH
25344: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25348: LD_ADDR_EXP 110
25352: PUSH
25353: LD_EXP 110
25357: PPUSH
25358: LD_VAR 0 6
25362: PPUSH
25363: LD_EXP 110
25367: PUSH
25368: LD_VAR 0 6
25372: ARRAY
25373: PPUSH
25374: LD_VAR 0 5
25378: PPUSH
25379: CALL_OW 3
25383: PPUSH
25384: CALL_OW 1
25388: ST_TO_ADDR
// exit ;
25389: POP
25390: POP
25391: GO 25584
// end ; end ;
25393: GO 25233
25395: POP
25396: POP
// for i := minerMinesList [ index ] downto 1 do
25397: LD_ADDR_VAR 0 5
25401: PUSH
25402: DOUBLE
25403: LD_EXP 110
25407: PUSH
25408: LD_VAR 0 6
25412: ARRAY
25413: INC
25414: ST_TO_ADDR
25415: LD_INT 1
25417: PUSH
25418: FOR_DOWNTO
25419: IFFALSE 25582
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
25421: LD_EXP 110
25425: PUSH
25426: LD_VAR 0 6
25430: ARRAY
25431: PUSH
25432: LD_VAR 0 5
25436: ARRAY
25437: PUSH
25438: LD_INT 1
25440: ARRAY
25441: PPUSH
25442: LD_EXP 110
25446: PUSH
25447: LD_VAR 0 6
25451: ARRAY
25452: PUSH
25453: LD_VAR 0 5
25457: ARRAY
25458: PUSH
25459: LD_INT 2
25461: ARRAY
25462: PPUSH
25463: LD_VAR 0 2
25467: PPUSH
25468: LD_VAR 0 3
25472: PPUSH
25473: CALL_OW 298
25477: PUSH
25478: LD_INT 6
25480: LESS
25481: IFFALSE 25580
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
25483: LD_EXP 110
25487: PUSH
25488: LD_VAR 0 6
25492: ARRAY
25493: PUSH
25494: LD_VAR 0 5
25498: ARRAY
25499: PUSH
25500: LD_INT 1
25502: ARRAY
25503: PPUSH
25504: LD_EXP 110
25508: PUSH
25509: LD_VAR 0 6
25513: ARRAY
25514: PUSH
25515: LD_VAR 0 5
25519: ARRAY
25520: PUSH
25521: LD_INT 2
25523: ARRAY
25524: PPUSH
25525: LD_VAR 0 1
25529: PPUSH
25530: CALL_OW 255
25534: PPUSH
25535: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
25539: LD_ADDR_EXP 110
25543: PUSH
25544: LD_EXP 110
25548: PPUSH
25549: LD_VAR 0 6
25553: PPUSH
25554: LD_EXP 110
25558: PUSH
25559: LD_VAR 0 6
25563: ARRAY
25564: PPUSH
25565: LD_VAR 0 5
25569: PPUSH
25570: CALL_OW 3
25574: PPUSH
25575: CALL_OW 1
25579: ST_TO_ADDR
// end ; end ;
25580: GO 25418
25582: POP
25583: POP
// end ;
25584: LD_VAR 0 4
25588: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
25589: LD_INT 0
25591: PPUSH
25592: PPUSH
25593: PPUSH
25594: PPUSH
25595: PPUSH
25596: PPUSH
25597: PPUSH
25598: PPUSH
25599: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
25600: LD_VAR 0 1
25604: PPUSH
25605: CALL_OW 264
25609: PUSH
25610: LD_EXP 31
25614: EQUAL
25615: NOT
25616: PUSH
25617: LD_VAR 0 1
25621: PUSH
25622: LD_EXP 109
25626: IN
25627: NOT
25628: OR
25629: IFFALSE 25633
// exit ;
25631: GO 25955
// index := GetElementIndex ( minersList , unit ) ;
25633: LD_ADDR_VAR 0 6
25637: PUSH
25638: LD_EXP 109
25642: PPUSH
25643: LD_VAR 0 1
25647: PPUSH
25648: CALL 31151 0 2
25652: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
25653: LD_ADDR_VAR 0 8
25657: PUSH
25658: LD_EXP 111
25662: PUSH
25663: LD_EXP 110
25667: PUSH
25668: LD_VAR 0 6
25672: ARRAY
25673: MINUS
25674: ST_TO_ADDR
// if not minesFreeAmount then
25675: LD_VAR 0 8
25679: NOT
25680: IFFALSE 25684
// exit ;
25682: GO 25955
// tmp := [ ] ;
25684: LD_ADDR_VAR 0 7
25688: PUSH
25689: EMPTY
25690: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25691: LD_ADDR_VAR 0 5
25695: PUSH
25696: DOUBLE
25697: LD_INT 1
25699: DEC
25700: ST_TO_ADDR
25701: LD_VAR 0 8
25705: PUSH
25706: FOR_TO
25707: IFFALSE 25902
// begin _d := rand ( 0 , 5 ) ;
25709: LD_ADDR_VAR 0 11
25713: PUSH
25714: LD_INT 0
25716: PPUSH
25717: LD_INT 5
25719: PPUSH
25720: CALL_OW 12
25724: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25725: LD_ADDR_VAR 0 12
25729: PUSH
25730: LD_INT 2
25732: PPUSH
25733: LD_INT 6
25735: PPUSH
25736: CALL_OW 12
25740: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25741: LD_ADDR_VAR 0 9
25745: PUSH
25746: LD_VAR 0 2
25750: PPUSH
25751: LD_VAR 0 11
25755: PPUSH
25756: LD_VAR 0 12
25760: PPUSH
25761: CALL_OW 272
25765: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25766: LD_ADDR_VAR 0 10
25770: PUSH
25771: LD_VAR 0 3
25775: PPUSH
25776: LD_VAR 0 11
25780: PPUSH
25781: LD_VAR 0 12
25785: PPUSH
25786: CALL_OW 273
25790: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25791: LD_VAR 0 9
25795: PPUSH
25796: LD_VAR 0 10
25800: PPUSH
25801: CALL_OW 488
25805: PUSH
25806: LD_VAR 0 9
25810: PUSH
25811: LD_VAR 0 10
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_VAR 0 7
25824: IN
25825: NOT
25826: AND
25827: PUSH
25828: LD_VAR 0 9
25832: PPUSH
25833: LD_VAR 0 10
25837: PPUSH
25838: CALL_OW 458
25842: NOT
25843: AND
25844: IFFALSE 25886
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25846: LD_ADDR_VAR 0 7
25850: PUSH
25851: LD_VAR 0 7
25855: PPUSH
25856: LD_VAR 0 7
25860: PUSH
25861: LD_INT 1
25863: PLUS
25864: PPUSH
25865: LD_VAR 0 9
25869: PUSH
25870: LD_VAR 0 10
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PPUSH
25879: CALL_OW 1
25883: ST_TO_ADDR
25884: GO 25900
// i := i - 1 ;
25886: LD_ADDR_VAR 0 5
25890: PUSH
25891: LD_VAR 0 5
25895: PUSH
25896: LD_INT 1
25898: MINUS
25899: ST_TO_ADDR
// end ;
25900: GO 25706
25902: POP
25903: POP
// for i in tmp do
25904: LD_ADDR_VAR 0 5
25908: PUSH
25909: LD_VAR 0 7
25913: PUSH
25914: FOR_IN
25915: IFFALSE 25953
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25917: LD_VAR 0 1
25921: PPUSH
25922: LD_VAR 0 5
25926: PUSH
25927: LD_INT 1
25929: ARRAY
25930: PPUSH
25931: LD_VAR 0 5
25935: PUSH
25936: LD_INT 2
25938: ARRAY
25939: PPUSH
25940: CALL 24895 0 3
25944: NOT
25945: IFFALSE 25951
// exit ;
25947: POP
25948: POP
25949: GO 25955
25951: GO 25914
25953: POP
25954: POP
// end ;
25955: LD_VAR 0 4
25959: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
25960: LD_INT 0
25962: PPUSH
25963: PPUSH
25964: PPUSH
25965: PPUSH
25966: PPUSH
25967: PPUSH
25968: PPUSH
// if not GetClass ( unit ) = class_sniper then
25969: LD_VAR 0 1
25973: PPUSH
25974: CALL_OW 257
25978: PUSH
25979: LD_INT 5
25981: EQUAL
25982: NOT
25983: IFFALSE 25987
// exit ;
25985: GO 26375
// dist := 8 ;
25987: LD_ADDR_VAR 0 5
25991: PUSH
25992: LD_INT 8
25994: ST_TO_ADDR
// viewRange := 12 ;
25995: LD_ADDR_VAR 0 7
25999: PUSH
26000: LD_INT 12
26002: ST_TO_ADDR
// side := GetSide ( unit ) ;
26003: LD_ADDR_VAR 0 6
26007: PUSH
26008: LD_VAR 0 1
26012: PPUSH
26013: CALL_OW 255
26017: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
26018: LD_INT 61
26020: PPUSH
26021: LD_VAR 0 6
26025: PPUSH
26026: CALL_OW 321
26030: PUSH
26031: LD_INT 2
26033: EQUAL
26034: IFFALSE 26044
// viewRange := 16 ;
26036: LD_ADDR_VAR 0 7
26040: PUSH
26041: LD_INT 16
26043: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
26044: LD_VAR 0 1
26048: PPUSH
26049: LD_VAR 0 2
26053: PPUSH
26054: LD_VAR 0 3
26058: PPUSH
26059: CALL_OW 297
26063: PUSH
26064: LD_VAR 0 5
26068: GREATER
26069: IFFALSE 26148
// begin ComMoveXY ( unit , x , y ) ;
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_VAR 0 2
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
26090: LD_INT 35
26092: PPUSH
26093: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
26097: LD_VAR 0 1
26101: PPUSH
26102: LD_VAR 0 2
26106: PPUSH
26107: LD_VAR 0 3
26111: PPUSH
26112: CALL 61870 0 3
26116: NOT
26117: IFFALSE 26121
// exit ;
26119: GO 26375
// until GetDistUnitXY ( unit , x , y ) < dist ;
26121: LD_VAR 0 1
26125: PPUSH
26126: LD_VAR 0 2
26130: PPUSH
26131: LD_VAR 0 3
26135: PPUSH
26136: CALL_OW 297
26140: PUSH
26141: LD_VAR 0 5
26145: LESS
26146: IFFALSE 26090
// end ; ComTurnXY ( unit , x , y ) ;
26148: LD_VAR 0 1
26152: PPUSH
26153: LD_VAR 0 2
26157: PPUSH
26158: LD_VAR 0 3
26162: PPUSH
26163: CALL_OW 118
// wait ( 5 ) ;
26167: LD_INT 5
26169: PPUSH
26170: CALL_OW 67
// _d := GetDir ( unit ) ;
26174: LD_ADDR_VAR 0 10
26178: PUSH
26179: LD_VAR 0 1
26183: PPUSH
26184: CALL_OW 254
26188: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
26189: LD_ADDR_VAR 0 8
26193: PUSH
26194: LD_VAR 0 1
26198: PPUSH
26199: CALL_OW 250
26203: PPUSH
26204: LD_VAR 0 10
26208: PPUSH
26209: LD_VAR 0 5
26213: PPUSH
26214: CALL_OW 272
26218: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
26219: LD_ADDR_VAR 0 9
26223: PUSH
26224: LD_VAR 0 1
26228: PPUSH
26229: CALL_OW 251
26233: PPUSH
26234: LD_VAR 0 10
26238: PPUSH
26239: LD_VAR 0 5
26243: PPUSH
26244: CALL_OW 273
26248: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
26249: LD_VAR 0 8
26253: PPUSH
26254: LD_VAR 0 9
26258: PPUSH
26259: CALL_OW 488
26263: NOT
26264: IFFALSE 26268
// exit ;
26266: GO 26375
// ComAnimCustom ( unit , 1 ) ;
26268: LD_VAR 0 1
26272: PPUSH
26273: LD_INT 1
26275: PPUSH
26276: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
26280: LD_VAR 0 8
26284: PPUSH
26285: LD_VAR 0 9
26289: PPUSH
26290: LD_VAR 0 6
26294: PPUSH
26295: LD_VAR 0 7
26299: PPUSH
26300: CALL_OW 330
// repeat wait ( 1 ) ;
26304: LD_INT 1
26306: PPUSH
26307: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 316
26320: PUSH
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 314
26330: OR
26331: PUSH
26332: LD_VAR 0 1
26336: PPUSH
26337: CALL_OW 302
26341: NOT
26342: OR
26343: PUSH
26344: LD_VAR 0 1
26348: PPUSH
26349: CALL_OW 301
26353: OR
26354: IFFALSE 26304
// RemoveSeeing ( _x , _y , side ) ;
26356: LD_VAR 0 8
26360: PPUSH
26361: LD_VAR 0 9
26365: PPUSH
26366: LD_VAR 0 6
26370: PPUSH
26371: CALL_OW 331
// end ; end_of_file
26375: LD_VAR 0 4
26379: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26380: LD_INT 0
26382: PPUSH
26383: PPUSH
// if exist_mode then
26384: LD_VAR 0 2
26388: IFFALSE 26413
// unit := CreateCharacter ( prefix & ident ) else
26390: LD_ADDR_VAR 0 5
26394: PUSH
26395: LD_VAR 0 3
26399: PUSH
26400: LD_VAR 0 1
26404: STR
26405: PPUSH
26406: CALL_OW 34
26410: ST_TO_ADDR
26411: GO 26428
// unit := NewCharacter ( ident ) ;
26413: LD_ADDR_VAR 0 5
26417: PUSH
26418: LD_VAR 0 1
26422: PPUSH
26423: CALL_OW 25
26427: ST_TO_ADDR
// result := unit ;
26428: LD_ADDR_VAR 0 4
26432: PUSH
26433: LD_VAR 0 5
26437: ST_TO_ADDR
// end ;
26438: LD_VAR 0 4
26442: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
// if not side or not nation then
26447: LD_VAR 0 1
26451: NOT
26452: PUSH
26453: LD_VAR 0 2
26457: NOT
26458: OR
26459: IFFALSE 26463
// exit ;
26461: GO 27231
// case nation of nation_american :
26463: LD_VAR 0 2
26467: PUSH
26468: LD_INT 1
26470: DOUBLE
26471: EQUAL
26472: IFTRUE 26476
26474: GO 26690
26476: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26477: LD_ADDR_VAR 0 4
26481: PUSH
26482: LD_INT 35
26484: PUSH
26485: LD_INT 45
26487: PUSH
26488: LD_INT 46
26490: PUSH
26491: LD_INT 47
26493: PUSH
26494: LD_INT 82
26496: PUSH
26497: LD_INT 83
26499: PUSH
26500: LD_INT 84
26502: PUSH
26503: LD_INT 85
26505: PUSH
26506: LD_INT 86
26508: PUSH
26509: LD_INT 1
26511: PUSH
26512: LD_INT 2
26514: PUSH
26515: LD_INT 6
26517: PUSH
26518: LD_INT 15
26520: PUSH
26521: LD_INT 16
26523: PUSH
26524: LD_INT 7
26526: PUSH
26527: LD_INT 12
26529: PUSH
26530: LD_INT 13
26532: PUSH
26533: LD_INT 10
26535: PUSH
26536: LD_INT 14
26538: PUSH
26539: LD_INT 20
26541: PUSH
26542: LD_INT 21
26544: PUSH
26545: LD_INT 22
26547: PUSH
26548: LD_INT 25
26550: PUSH
26551: LD_INT 32
26553: PUSH
26554: LD_INT 27
26556: PUSH
26557: LD_INT 36
26559: PUSH
26560: LD_INT 69
26562: PUSH
26563: LD_INT 39
26565: PUSH
26566: LD_INT 34
26568: PUSH
26569: LD_INT 40
26571: PUSH
26572: LD_INT 48
26574: PUSH
26575: LD_INT 49
26577: PUSH
26578: LD_INT 50
26580: PUSH
26581: LD_INT 51
26583: PUSH
26584: LD_INT 52
26586: PUSH
26587: LD_INT 53
26589: PUSH
26590: LD_INT 54
26592: PUSH
26593: LD_INT 55
26595: PUSH
26596: LD_INT 56
26598: PUSH
26599: LD_INT 57
26601: PUSH
26602: LD_INT 58
26604: PUSH
26605: LD_INT 59
26607: PUSH
26608: LD_INT 60
26610: PUSH
26611: LD_INT 61
26613: PUSH
26614: LD_INT 62
26616: PUSH
26617: LD_INT 80
26619: PUSH
26620: LD_INT 82
26622: PUSH
26623: LD_INT 83
26625: PUSH
26626: LD_INT 84
26628: PUSH
26629: LD_INT 85
26631: PUSH
26632: LD_INT 86
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: LIST
26685: LIST
26686: LIST
26687: ST_TO_ADDR
26688: GO 27155
26690: LD_INT 2
26692: DOUBLE
26693: EQUAL
26694: IFTRUE 26698
26696: GO 26924
26698: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
26699: LD_ADDR_VAR 0 4
26703: PUSH
26704: LD_INT 35
26706: PUSH
26707: LD_INT 45
26709: PUSH
26710: LD_INT 46
26712: PUSH
26713: LD_INT 47
26715: PUSH
26716: LD_INT 82
26718: PUSH
26719: LD_INT 83
26721: PUSH
26722: LD_INT 84
26724: PUSH
26725: LD_INT 85
26727: PUSH
26728: LD_INT 87
26730: PUSH
26731: LD_INT 70
26733: PUSH
26734: LD_INT 1
26736: PUSH
26737: LD_INT 11
26739: PUSH
26740: LD_INT 3
26742: PUSH
26743: LD_INT 4
26745: PUSH
26746: LD_INT 5
26748: PUSH
26749: LD_INT 6
26751: PUSH
26752: LD_INT 15
26754: PUSH
26755: LD_INT 18
26757: PUSH
26758: LD_INT 7
26760: PUSH
26761: LD_INT 17
26763: PUSH
26764: LD_INT 8
26766: PUSH
26767: LD_INT 20
26769: PUSH
26770: LD_INT 21
26772: PUSH
26773: LD_INT 22
26775: PUSH
26776: LD_INT 72
26778: PUSH
26779: LD_INT 26
26781: PUSH
26782: LD_INT 69
26784: PUSH
26785: LD_INT 39
26787: PUSH
26788: LD_INT 40
26790: PUSH
26791: LD_INT 41
26793: PUSH
26794: LD_INT 42
26796: PUSH
26797: LD_INT 43
26799: PUSH
26800: LD_INT 48
26802: PUSH
26803: LD_INT 49
26805: PUSH
26806: LD_INT 50
26808: PUSH
26809: LD_INT 51
26811: PUSH
26812: LD_INT 52
26814: PUSH
26815: LD_INT 53
26817: PUSH
26818: LD_INT 54
26820: PUSH
26821: LD_INT 55
26823: PUSH
26824: LD_INT 56
26826: PUSH
26827: LD_INT 60
26829: PUSH
26830: LD_INT 61
26832: PUSH
26833: LD_INT 62
26835: PUSH
26836: LD_INT 66
26838: PUSH
26839: LD_INT 67
26841: PUSH
26842: LD_INT 68
26844: PUSH
26845: LD_INT 81
26847: PUSH
26848: LD_INT 82
26850: PUSH
26851: LD_INT 83
26853: PUSH
26854: LD_INT 84
26856: PUSH
26857: LD_INT 85
26859: PUSH
26860: LD_INT 87
26862: PUSH
26863: LD_INT 88
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: ST_TO_ADDR
26922: GO 27155
26924: LD_INT 3
26926: DOUBLE
26927: EQUAL
26928: IFTRUE 26932
26930: GO 27154
26932: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
26933: LD_ADDR_VAR 0 4
26937: PUSH
26938: LD_INT 46
26940: PUSH
26941: LD_INT 47
26943: PUSH
26944: LD_INT 1
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 82
26952: PUSH
26953: LD_INT 83
26955: PUSH
26956: LD_INT 84
26958: PUSH
26959: LD_INT 85
26961: PUSH
26962: LD_INT 86
26964: PUSH
26965: LD_INT 11
26967: PUSH
26968: LD_INT 9
26970: PUSH
26971: LD_INT 20
26973: PUSH
26974: LD_INT 19
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 24
26982: PUSH
26983: LD_INT 22
26985: PUSH
26986: LD_INT 25
26988: PUSH
26989: LD_INT 28
26991: PUSH
26992: LD_INT 29
26994: PUSH
26995: LD_INT 30
26997: PUSH
26998: LD_INT 31
27000: PUSH
27001: LD_INT 37
27003: PUSH
27004: LD_INT 38
27006: PUSH
27007: LD_INT 32
27009: PUSH
27010: LD_INT 27
27012: PUSH
27013: LD_INT 33
27015: PUSH
27016: LD_INT 69
27018: PUSH
27019: LD_INT 39
27021: PUSH
27022: LD_INT 34
27024: PUSH
27025: LD_INT 40
27027: PUSH
27028: LD_INT 71
27030: PUSH
27031: LD_INT 23
27033: PUSH
27034: LD_INT 44
27036: PUSH
27037: LD_INT 48
27039: PUSH
27040: LD_INT 49
27042: PUSH
27043: LD_INT 50
27045: PUSH
27046: LD_INT 51
27048: PUSH
27049: LD_INT 52
27051: PUSH
27052: LD_INT 53
27054: PUSH
27055: LD_INT 54
27057: PUSH
27058: LD_INT 55
27060: PUSH
27061: LD_INT 56
27063: PUSH
27064: LD_INT 57
27066: PUSH
27067: LD_INT 58
27069: PUSH
27070: LD_INT 59
27072: PUSH
27073: LD_INT 63
27075: PUSH
27076: LD_INT 64
27078: PUSH
27079: LD_INT 65
27081: PUSH
27082: LD_INT 82
27084: PUSH
27085: LD_INT 83
27087: PUSH
27088: LD_INT 84
27090: PUSH
27091: LD_INT 85
27093: PUSH
27094: LD_INT 86
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: ST_TO_ADDR
27152: GO 27155
27154: POP
// if state > - 1 and state < 3 then
27155: LD_VAR 0 3
27159: PUSH
27160: LD_INT 1
27162: NEG
27163: GREATER
27164: PUSH
27165: LD_VAR 0 3
27169: PUSH
27170: LD_INT 3
27172: LESS
27173: AND
27174: IFFALSE 27231
// for i in result do
27176: LD_ADDR_VAR 0 5
27180: PUSH
27181: LD_VAR 0 4
27185: PUSH
27186: FOR_IN
27187: IFFALSE 27229
// if GetTech ( i , side ) <> state then
27189: LD_VAR 0 5
27193: PPUSH
27194: LD_VAR 0 1
27198: PPUSH
27199: CALL_OW 321
27203: PUSH
27204: LD_VAR 0 3
27208: NONEQUAL
27209: IFFALSE 27227
// result := result diff i ;
27211: LD_ADDR_VAR 0 4
27215: PUSH
27216: LD_VAR 0 4
27220: PUSH
27221: LD_VAR 0 5
27225: DIFF
27226: ST_TO_ADDR
27227: GO 27186
27229: POP
27230: POP
// end ;
27231: LD_VAR 0 4
27235: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27236: LD_INT 0
27238: PPUSH
27239: PPUSH
27240: PPUSH
// result := true ;
27241: LD_ADDR_VAR 0 3
27245: PUSH
27246: LD_INT 1
27248: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27249: LD_ADDR_VAR 0 5
27253: PUSH
27254: LD_VAR 0 2
27258: PPUSH
27259: CALL_OW 480
27263: ST_TO_ADDR
// if not tmp then
27264: LD_VAR 0 5
27268: NOT
27269: IFFALSE 27273
// exit ;
27271: GO 27322
// for i in tmp do
27273: LD_ADDR_VAR 0 4
27277: PUSH
27278: LD_VAR 0 5
27282: PUSH
27283: FOR_IN
27284: IFFALSE 27320
// if GetTech ( i , side ) <> state_researched then
27286: LD_VAR 0 4
27290: PPUSH
27291: LD_VAR 0 1
27295: PPUSH
27296: CALL_OW 321
27300: PUSH
27301: LD_INT 2
27303: NONEQUAL
27304: IFFALSE 27318
// begin result := false ;
27306: LD_ADDR_VAR 0 3
27310: PUSH
27311: LD_INT 0
27313: ST_TO_ADDR
// exit ;
27314: POP
27315: POP
27316: GO 27322
// end ;
27318: GO 27283
27320: POP
27321: POP
// end ;
27322: LD_VAR 0 3
27326: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27327: LD_INT 0
27329: PPUSH
27330: PPUSH
27331: PPUSH
27332: PPUSH
27333: PPUSH
27334: PPUSH
27335: PPUSH
27336: PPUSH
27337: PPUSH
27338: PPUSH
27339: PPUSH
27340: PPUSH
27341: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27342: LD_VAR 0 1
27346: NOT
27347: PUSH
27348: LD_VAR 0 1
27352: PPUSH
27353: CALL_OW 257
27357: PUSH
27358: LD_INT 9
27360: NONEQUAL
27361: OR
27362: IFFALSE 27366
// exit ;
27364: GO 27939
// side := GetSide ( unit ) ;
27366: LD_ADDR_VAR 0 9
27370: PUSH
27371: LD_VAR 0 1
27375: PPUSH
27376: CALL_OW 255
27380: ST_TO_ADDR
// tech_space := tech_spacanom ;
27381: LD_ADDR_VAR 0 12
27385: PUSH
27386: LD_INT 29
27388: ST_TO_ADDR
// tech_time := tech_taurad ;
27389: LD_ADDR_VAR 0 13
27393: PUSH
27394: LD_INT 28
27396: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27397: LD_ADDR_VAR 0 11
27401: PUSH
27402: LD_VAR 0 1
27406: PPUSH
27407: CALL_OW 310
27411: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27412: LD_VAR 0 11
27416: PPUSH
27417: CALL_OW 247
27421: PUSH
27422: LD_INT 2
27424: EQUAL
27425: IFFALSE 27429
// exit ;
27427: GO 27939
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27429: LD_ADDR_VAR 0 8
27433: PUSH
27434: LD_INT 81
27436: PUSH
27437: LD_VAR 0 9
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: PUSH
27446: LD_INT 3
27448: PUSH
27449: LD_INT 21
27451: PUSH
27452: LD_INT 3
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 69
27471: ST_TO_ADDR
// if not tmp then
27472: LD_VAR 0 8
27476: NOT
27477: IFFALSE 27481
// exit ;
27479: GO 27939
// if in_unit then
27481: LD_VAR 0 11
27485: IFFALSE 27509
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27487: LD_ADDR_VAR 0 10
27491: PUSH
27492: LD_VAR 0 8
27496: PPUSH
27497: LD_VAR 0 11
27501: PPUSH
27502: CALL_OW 74
27506: ST_TO_ADDR
27507: GO 27529
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27509: LD_ADDR_VAR 0 10
27513: PUSH
27514: LD_VAR 0 8
27518: PPUSH
27519: LD_VAR 0 1
27523: PPUSH
27524: CALL_OW 74
27528: ST_TO_ADDR
// if not enemy then
27529: LD_VAR 0 10
27533: NOT
27534: IFFALSE 27538
// exit ;
27536: GO 27939
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27538: LD_VAR 0 11
27542: PUSH
27543: LD_VAR 0 11
27547: PPUSH
27548: LD_VAR 0 10
27552: PPUSH
27553: CALL_OW 296
27557: PUSH
27558: LD_INT 13
27560: GREATER
27561: AND
27562: PUSH
27563: LD_VAR 0 1
27567: PPUSH
27568: LD_VAR 0 10
27572: PPUSH
27573: CALL_OW 296
27577: PUSH
27578: LD_INT 12
27580: GREATER
27581: OR
27582: IFFALSE 27586
// exit ;
27584: GO 27939
// missile := [ 1 ] ;
27586: LD_ADDR_VAR 0 14
27590: PUSH
27591: LD_INT 1
27593: PUSH
27594: EMPTY
27595: LIST
27596: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27597: LD_VAR 0 9
27601: PPUSH
27602: LD_VAR 0 12
27606: PPUSH
27607: CALL_OW 325
27611: IFFALSE 27640
// missile := Replace ( missile , missile + 1 , 2 ) ;
27613: LD_ADDR_VAR 0 14
27617: PUSH
27618: LD_VAR 0 14
27622: PPUSH
27623: LD_VAR 0 14
27627: PUSH
27628: LD_INT 1
27630: PLUS
27631: PPUSH
27632: LD_INT 2
27634: PPUSH
27635: CALL_OW 1
27639: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27640: LD_VAR 0 9
27644: PPUSH
27645: LD_VAR 0 13
27649: PPUSH
27650: CALL_OW 325
27654: PUSH
27655: LD_VAR 0 10
27659: PPUSH
27660: CALL_OW 255
27664: PPUSH
27665: LD_VAR 0 13
27669: PPUSH
27670: CALL_OW 325
27674: NOT
27675: AND
27676: IFFALSE 27705
// missile := Replace ( missile , missile + 1 , 3 ) ;
27678: LD_ADDR_VAR 0 14
27682: PUSH
27683: LD_VAR 0 14
27687: PPUSH
27688: LD_VAR 0 14
27692: PUSH
27693: LD_INT 1
27695: PLUS
27696: PPUSH
27697: LD_INT 3
27699: PPUSH
27700: CALL_OW 1
27704: ST_TO_ADDR
// if missile < 2 then
27705: LD_VAR 0 14
27709: PUSH
27710: LD_INT 2
27712: LESS
27713: IFFALSE 27717
// exit ;
27715: GO 27939
// x := GetX ( enemy ) ;
27717: LD_ADDR_VAR 0 4
27721: PUSH
27722: LD_VAR 0 10
27726: PPUSH
27727: CALL_OW 250
27731: ST_TO_ADDR
// y := GetY ( enemy ) ;
27732: LD_ADDR_VAR 0 5
27736: PUSH
27737: LD_VAR 0 10
27741: PPUSH
27742: CALL_OW 251
27746: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27747: LD_ADDR_VAR 0 6
27751: PUSH
27752: LD_VAR 0 4
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PPUSH
27761: LD_INT 1
27763: PPUSH
27764: CALL_OW 12
27768: PLUS
27769: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
27770: LD_ADDR_VAR 0 7
27774: PUSH
27775: LD_VAR 0 5
27779: PUSH
27780: LD_INT 1
27782: NEG
27783: PPUSH
27784: LD_INT 1
27786: PPUSH
27787: CALL_OW 12
27791: PLUS
27792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
27793: LD_VAR 0 6
27797: PPUSH
27798: LD_VAR 0 7
27802: PPUSH
27803: CALL_OW 488
27807: NOT
27808: IFFALSE 27830
// begin _x := x ;
27810: LD_ADDR_VAR 0 6
27814: PUSH
27815: LD_VAR 0 4
27819: ST_TO_ADDR
// _y := y ;
27820: LD_ADDR_VAR 0 7
27824: PUSH
27825: LD_VAR 0 5
27829: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
27830: LD_ADDR_VAR 0 3
27834: PUSH
27835: LD_INT 1
27837: PPUSH
27838: LD_VAR 0 14
27842: PPUSH
27843: CALL_OW 12
27847: ST_TO_ADDR
// case i of 1 :
27848: LD_VAR 0 3
27852: PUSH
27853: LD_INT 1
27855: DOUBLE
27856: EQUAL
27857: IFTRUE 27861
27859: GO 27878
27861: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
27862: LD_VAR 0 1
27866: PPUSH
27867: LD_VAR 0 10
27871: PPUSH
27872: CALL_OW 115
27876: GO 27939
27878: LD_INT 2
27880: DOUBLE
27881: EQUAL
27882: IFTRUE 27886
27884: GO 27908
27886: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
27887: LD_VAR 0 1
27891: PPUSH
27892: LD_VAR 0 6
27896: PPUSH
27897: LD_VAR 0 7
27901: PPUSH
27902: CALL_OW 153
27906: GO 27939
27908: LD_INT 3
27910: DOUBLE
27911: EQUAL
27912: IFTRUE 27916
27914: GO 27938
27916: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
27917: LD_VAR 0 1
27921: PPUSH
27922: LD_VAR 0 6
27926: PPUSH
27927: LD_VAR 0 7
27931: PPUSH
27932: CALL_OW 154
27936: GO 27939
27938: POP
// end ;
27939: LD_VAR 0 2
27943: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
27944: LD_INT 0
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
// if not unit or not building then
27952: LD_VAR 0 1
27956: NOT
27957: PUSH
27958: LD_VAR 0 2
27962: NOT
27963: OR
27964: IFFALSE 27968
// exit ;
27966: GO 28126
// x := GetX ( building ) ;
27968: LD_ADDR_VAR 0 5
27972: PUSH
27973: LD_VAR 0 2
27977: PPUSH
27978: CALL_OW 250
27982: ST_TO_ADDR
// y := GetY ( building ) ;
27983: LD_ADDR_VAR 0 6
27987: PUSH
27988: LD_VAR 0 2
27992: PPUSH
27993: CALL_OW 251
27997: ST_TO_ADDR
// for i = 0 to 5 do
27998: LD_ADDR_VAR 0 4
28002: PUSH
28003: DOUBLE
28004: LD_INT 0
28006: DEC
28007: ST_TO_ADDR
28008: LD_INT 5
28010: PUSH
28011: FOR_TO
28012: IFFALSE 28124
// begin _x := ShiftX ( x , i , 3 ) ;
28014: LD_ADDR_VAR 0 7
28018: PUSH
28019: LD_VAR 0 5
28023: PPUSH
28024: LD_VAR 0 4
28028: PPUSH
28029: LD_INT 3
28031: PPUSH
28032: CALL_OW 272
28036: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28037: LD_ADDR_VAR 0 8
28041: PUSH
28042: LD_VAR 0 6
28046: PPUSH
28047: LD_VAR 0 4
28051: PPUSH
28052: LD_INT 3
28054: PPUSH
28055: CALL_OW 273
28059: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28060: LD_VAR 0 7
28064: PPUSH
28065: LD_VAR 0 8
28069: PPUSH
28070: CALL_OW 488
28074: NOT
28075: IFFALSE 28079
// continue ;
28077: GO 28011
// if HexInfo ( _x , _y ) = 0 then
28079: LD_VAR 0 7
28083: PPUSH
28084: LD_VAR 0 8
28088: PPUSH
28089: CALL_OW 428
28093: PUSH
28094: LD_INT 0
28096: EQUAL
28097: IFFALSE 28122
// begin ComMoveXY ( unit , _x , _y ) ;
28099: LD_VAR 0 1
28103: PPUSH
28104: LD_VAR 0 7
28108: PPUSH
28109: LD_VAR 0 8
28113: PPUSH
28114: CALL_OW 111
// exit ;
28118: POP
28119: POP
28120: GO 28126
// end ; end ;
28122: GO 28011
28124: POP
28125: POP
// end ;
28126: LD_VAR 0 3
28130: RET
// export function ScanBase ( side , base_area ) ; begin
28131: LD_INT 0
28133: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28134: LD_ADDR_VAR 0 3
28138: PUSH
28139: LD_VAR 0 2
28143: PPUSH
28144: LD_INT 81
28146: PUSH
28147: LD_VAR 0 1
28151: PUSH
28152: EMPTY
28153: LIST
28154: LIST
28155: PPUSH
28156: CALL_OW 70
28160: ST_TO_ADDR
// end ;
28161: LD_VAR 0 3
28165: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28166: LD_INT 0
28168: PPUSH
28169: PPUSH
28170: PPUSH
28171: PPUSH
// result := false ;
28172: LD_ADDR_VAR 0 2
28176: PUSH
28177: LD_INT 0
28179: ST_TO_ADDR
// side := GetSide ( unit ) ;
28180: LD_ADDR_VAR 0 3
28184: PUSH
28185: LD_VAR 0 1
28189: PPUSH
28190: CALL_OW 255
28194: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28195: LD_ADDR_VAR 0 4
28199: PUSH
28200: LD_VAR 0 1
28204: PPUSH
28205: CALL_OW 248
28209: ST_TO_ADDR
// case nat of 1 :
28210: LD_VAR 0 4
28214: PUSH
28215: LD_INT 1
28217: DOUBLE
28218: EQUAL
28219: IFTRUE 28223
28221: GO 28234
28223: POP
// tech := tech_lassight ; 2 :
28224: LD_ADDR_VAR 0 5
28228: PUSH
28229: LD_INT 12
28231: ST_TO_ADDR
28232: GO 28273
28234: LD_INT 2
28236: DOUBLE
28237: EQUAL
28238: IFTRUE 28242
28240: GO 28253
28242: POP
// tech := tech_mortar ; 3 :
28243: LD_ADDR_VAR 0 5
28247: PUSH
28248: LD_INT 41
28250: ST_TO_ADDR
28251: GO 28273
28253: LD_INT 3
28255: DOUBLE
28256: EQUAL
28257: IFTRUE 28261
28259: GO 28272
28261: POP
// tech := tech_bazooka ; end ;
28262: LD_ADDR_VAR 0 5
28266: PUSH
28267: LD_INT 44
28269: ST_TO_ADDR
28270: GO 28273
28272: POP
// if Researched ( side , tech ) then
28273: LD_VAR 0 3
28277: PPUSH
28278: LD_VAR 0 5
28282: PPUSH
28283: CALL_OW 325
28287: IFFALSE 28314
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28289: LD_ADDR_VAR 0 2
28293: PUSH
28294: LD_INT 5
28296: PUSH
28297: LD_INT 8
28299: PUSH
28300: LD_INT 9
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: LIST
28307: PUSH
28308: LD_VAR 0 4
28312: ARRAY
28313: ST_TO_ADDR
// end ;
28314: LD_VAR 0 2
28318: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28319: LD_INT 0
28321: PPUSH
28322: PPUSH
28323: PPUSH
// if not mines then
28324: LD_VAR 0 2
28328: NOT
28329: IFFALSE 28333
// exit ;
28331: GO 28477
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28333: LD_ADDR_VAR 0 5
28337: PUSH
28338: LD_INT 81
28340: PUSH
28341: LD_VAR 0 1
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 3
28352: PUSH
28353: LD_INT 21
28355: PUSH
28356: LD_INT 3
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: PUSH
28367: EMPTY
28368: LIST
28369: LIST
28370: PPUSH
28371: CALL_OW 69
28375: ST_TO_ADDR
// for i in mines do
28376: LD_ADDR_VAR 0 4
28380: PUSH
28381: LD_VAR 0 2
28385: PUSH
28386: FOR_IN
28387: IFFALSE 28475
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28389: LD_VAR 0 4
28393: PUSH
28394: LD_INT 1
28396: ARRAY
28397: PPUSH
28398: LD_VAR 0 4
28402: PUSH
28403: LD_INT 2
28405: ARRAY
28406: PPUSH
28407: CALL_OW 458
28411: NOT
28412: IFFALSE 28416
// continue ;
28414: GO 28386
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28416: LD_VAR 0 4
28420: PUSH
28421: LD_INT 1
28423: ARRAY
28424: PPUSH
28425: LD_VAR 0 4
28429: PUSH
28430: LD_INT 2
28432: ARRAY
28433: PPUSH
28434: CALL_OW 428
28438: PUSH
28439: LD_VAR 0 5
28443: IN
28444: IFFALSE 28473
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28446: LD_VAR 0 4
28450: PUSH
28451: LD_INT 1
28453: ARRAY
28454: PPUSH
28455: LD_VAR 0 4
28459: PUSH
28460: LD_INT 2
28462: ARRAY
28463: PPUSH
28464: LD_VAR 0 1
28468: PPUSH
28469: CALL_OW 456
// end ;
28473: GO 28386
28475: POP
28476: POP
// end ;
28477: LD_VAR 0 3
28481: RET
// export function Count ( array ) ; var i ; begin
28482: LD_INT 0
28484: PPUSH
28485: PPUSH
// result := 0 ;
28486: LD_ADDR_VAR 0 2
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
// for i in array do
28494: LD_ADDR_VAR 0 3
28498: PUSH
28499: LD_VAR 0 1
28503: PUSH
28504: FOR_IN
28505: IFFALSE 28529
// if i then
28507: LD_VAR 0 3
28511: IFFALSE 28527
// result := result + 1 ;
28513: LD_ADDR_VAR 0 2
28517: PUSH
28518: LD_VAR 0 2
28522: PUSH
28523: LD_INT 1
28525: PLUS
28526: ST_TO_ADDR
28527: GO 28504
28529: POP
28530: POP
// end ;
28531: LD_VAR 0 2
28535: RET
// export function IsEmpty ( building ) ; begin
28536: LD_INT 0
28538: PPUSH
// if not building then
28539: LD_VAR 0 1
28543: NOT
28544: IFFALSE 28548
// exit ;
28546: GO 28591
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28548: LD_ADDR_VAR 0 2
28552: PUSH
28553: LD_VAR 0 1
28557: PUSH
28558: LD_INT 22
28560: PUSH
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL_OW 255
28570: PUSH
28571: EMPTY
28572: LIST
28573: LIST
28574: PUSH
28575: LD_INT 58
28577: PUSH
28578: EMPTY
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: PPUSH
28585: CALL_OW 69
28589: IN
28590: ST_TO_ADDR
// end ;
28591: LD_VAR 0 2
28595: RET
// export function IsNotFull ( building ) ; begin
28596: LD_INT 0
28598: PPUSH
// if not building then
28599: LD_VAR 0 1
28603: NOT
28604: IFFALSE 28608
// exit ;
28606: GO 28627
// result := UnitsInside ( building ) < 6 ;
28608: LD_ADDR_VAR 0 2
28612: PUSH
28613: LD_VAR 0 1
28617: PPUSH
28618: CALL_OW 313
28622: PUSH
28623: LD_INT 6
28625: LESS
28626: ST_TO_ADDR
// end ;
28627: LD_VAR 0 2
28631: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28632: LD_INT 0
28634: PPUSH
28635: PPUSH
28636: PPUSH
28637: PPUSH
// tmp := [ ] ;
28638: LD_ADDR_VAR 0 3
28642: PUSH
28643: EMPTY
28644: ST_TO_ADDR
// list := [ ] ;
28645: LD_ADDR_VAR 0 5
28649: PUSH
28650: EMPTY
28651: ST_TO_ADDR
// for i = 16 to 25 do
28652: LD_ADDR_VAR 0 4
28656: PUSH
28657: DOUBLE
28658: LD_INT 16
28660: DEC
28661: ST_TO_ADDR
28662: LD_INT 25
28664: PUSH
28665: FOR_TO
28666: IFFALSE 28739
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_VAR 0 3
28677: PUSH
28678: LD_INT 22
28680: PUSH
28681: LD_VAR 0 1
28685: PPUSH
28686: CALL_OW 255
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PUSH
28695: LD_INT 91
28697: PUSH
28698: LD_VAR 0 1
28702: PUSH
28703: LD_INT 6
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 30
28713: PUSH
28714: LD_VAR 0 4
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: LIST
28727: PUSH
28728: EMPTY
28729: LIST
28730: PPUSH
28731: CALL_OW 69
28735: ADD
28736: ST_TO_ADDR
28737: GO 28665
28739: POP
28740: POP
// for i = 1 to tmp do
28741: LD_ADDR_VAR 0 4
28745: PUSH
28746: DOUBLE
28747: LD_INT 1
28749: DEC
28750: ST_TO_ADDR
28751: LD_VAR 0 3
28755: PUSH
28756: FOR_TO
28757: IFFALSE 28845
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
28759: LD_ADDR_VAR 0 5
28763: PUSH
28764: LD_VAR 0 5
28768: PUSH
28769: LD_VAR 0 3
28773: PUSH
28774: LD_VAR 0 4
28778: ARRAY
28779: PPUSH
28780: CALL_OW 266
28784: PUSH
28785: LD_VAR 0 3
28789: PUSH
28790: LD_VAR 0 4
28794: ARRAY
28795: PPUSH
28796: CALL_OW 250
28800: PUSH
28801: LD_VAR 0 3
28805: PUSH
28806: LD_VAR 0 4
28810: ARRAY
28811: PPUSH
28812: CALL_OW 251
28816: PUSH
28817: LD_VAR 0 3
28821: PUSH
28822: LD_VAR 0 4
28826: ARRAY
28827: PPUSH
28828: CALL_OW 254
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: LIST
28837: LIST
28838: PUSH
28839: EMPTY
28840: LIST
28841: ADD
28842: ST_TO_ADDR
28843: GO 28756
28845: POP
28846: POP
// result := list ;
28847: LD_ADDR_VAR 0 2
28851: PUSH
28852: LD_VAR 0 5
28856: ST_TO_ADDR
// end ;
28857: LD_VAR 0 2
28861: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
28862: LD_INT 0
28864: PPUSH
28865: PPUSH
28866: PPUSH
28867: PPUSH
28868: PPUSH
28869: PPUSH
28870: PPUSH
// if not factory then
28871: LD_VAR 0 1
28875: NOT
28876: IFFALSE 28880
// exit ;
28878: GO 29473
// if control = control_apeman then
28880: LD_VAR 0 4
28884: PUSH
28885: LD_INT 5
28887: EQUAL
28888: IFFALSE 28997
// begin tmp := UnitsInside ( factory ) ;
28890: LD_ADDR_VAR 0 8
28894: PUSH
28895: LD_VAR 0 1
28899: PPUSH
28900: CALL_OW 313
28904: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
28905: LD_VAR 0 8
28909: PPUSH
28910: LD_INT 25
28912: PUSH
28913: LD_INT 12
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PPUSH
28920: CALL_OW 72
28924: NOT
28925: IFFALSE 28935
// control := control_manual ;
28927: LD_ADDR_VAR 0 4
28931: PUSH
28932: LD_INT 1
28934: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
28935: LD_ADDR_VAR 0 8
28939: PUSH
28940: LD_VAR 0 1
28944: PPUSH
28945: CALL 28632 0 1
28949: ST_TO_ADDR
// if tmp then
28950: LD_VAR 0 8
28954: IFFALSE 28997
// begin for i in tmp do
28956: LD_ADDR_VAR 0 7
28960: PUSH
28961: LD_VAR 0 8
28965: PUSH
28966: FOR_IN
28967: IFFALSE 28995
// if i [ 1 ] = b_ext_radio then
28969: LD_VAR 0 7
28973: PUSH
28974: LD_INT 1
28976: ARRAY
28977: PUSH
28978: LD_INT 22
28980: EQUAL
28981: IFFALSE 28993
// begin control := control_remote ;
28983: LD_ADDR_VAR 0 4
28987: PUSH
28988: LD_INT 2
28990: ST_TO_ADDR
// break ;
28991: GO 28995
// end ;
28993: GO 28966
28995: POP
28996: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
28997: LD_VAR 0 1
29001: PPUSH
29002: LD_VAR 0 2
29006: PPUSH
29007: LD_VAR 0 3
29011: PPUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: LD_VAR 0 5
29021: PPUSH
29022: CALL_OW 448
29026: IFFALSE 29061
// begin result := [ chassis , engine , control , weapon ] ;
29028: LD_ADDR_VAR 0 6
29032: PUSH
29033: LD_VAR 0 2
29037: PUSH
29038: LD_VAR 0 3
29042: PUSH
29043: LD_VAR 0 4
29047: PUSH
29048: LD_VAR 0 5
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: ST_TO_ADDR
// exit ;
29059: GO 29473
// end ; _chassis := AvailableChassisList ( factory ) ;
29061: LD_ADDR_VAR 0 9
29065: PUSH
29066: LD_VAR 0 1
29070: PPUSH
29071: CALL_OW 475
29075: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29076: LD_ADDR_VAR 0 11
29080: PUSH
29081: LD_VAR 0 1
29085: PPUSH
29086: CALL_OW 476
29090: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29091: LD_ADDR_VAR 0 12
29095: PUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 477
29105: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29106: LD_ADDR_VAR 0 10
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 478
29120: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29121: LD_VAR 0 9
29125: NOT
29126: PUSH
29127: LD_VAR 0 11
29131: NOT
29132: OR
29133: PUSH
29134: LD_VAR 0 12
29138: NOT
29139: OR
29140: PUSH
29141: LD_VAR 0 10
29145: NOT
29146: OR
29147: IFFALSE 29182
// begin result := [ chassis , engine , control , weapon ] ;
29149: LD_ADDR_VAR 0 6
29153: PUSH
29154: LD_VAR 0 2
29158: PUSH
29159: LD_VAR 0 3
29163: PUSH
29164: LD_VAR 0 4
29168: PUSH
29169: LD_VAR 0 5
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: ST_TO_ADDR
// exit ;
29180: GO 29473
// end ; if not chassis in _chassis then
29182: LD_VAR 0 2
29186: PUSH
29187: LD_VAR 0 9
29191: IN
29192: NOT
29193: IFFALSE 29219
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29195: LD_ADDR_VAR 0 2
29199: PUSH
29200: LD_VAR 0 9
29204: PUSH
29205: LD_INT 1
29207: PPUSH
29208: LD_VAR 0 9
29212: PPUSH
29213: CALL_OW 12
29217: ARRAY
29218: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29219: LD_VAR 0 2
29223: PPUSH
29224: LD_VAR 0 3
29228: PPUSH
29229: CALL 29478 0 2
29233: NOT
29234: IFFALSE 29293
// repeat engine := _engine [ 1 ] ;
29236: LD_ADDR_VAR 0 3
29240: PUSH
29241: LD_VAR 0 11
29245: PUSH
29246: LD_INT 1
29248: ARRAY
29249: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29250: LD_ADDR_VAR 0 11
29254: PUSH
29255: LD_VAR 0 11
29259: PPUSH
29260: LD_INT 1
29262: PPUSH
29263: CALL_OW 3
29267: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29268: LD_VAR 0 2
29272: PPUSH
29273: LD_VAR 0 3
29277: PPUSH
29278: CALL 29478 0 2
29282: PUSH
29283: LD_VAR 0 11
29287: PUSH
29288: EMPTY
29289: EQUAL
29290: OR
29291: IFFALSE 29236
// if not control in _control then
29293: LD_VAR 0 4
29297: PUSH
29298: LD_VAR 0 12
29302: IN
29303: NOT
29304: IFFALSE 29330
// control := _control [ rand ( 1 , _control ) ] ;
29306: LD_ADDR_VAR 0 4
29310: PUSH
29311: LD_VAR 0 12
29315: PUSH
29316: LD_INT 1
29318: PPUSH
29319: LD_VAR 0 12
29323: PPUSH
29324: CALL_OW 12
29328: ARRAY
29329: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29330: LD_VAR 0 2
29334: PPUSH
29335: LD_VAR 0 5
29339: PPUSH
29340: CALL 29698 0 2
29344: NOT
29345: IFFALSE 29404
// repeat weapon := _weapon [ 1 ] ;
29347: LD_ADDR_VAR 0 5
29351: PUSH
29352: LD_VAR 0 10
29356: PUSH
29357: LD_INT 1
29359: ARRAY
29360: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29361: LD_ADDR_VAR 0 10
29365: PUSH
29366: LD_VAR 0 10
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: CALL_OW 3
29378: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29379: LD_VAR 0 2
29383: PPUSH
29384: LD_VAR 0 5
29388: PPUSH
29389: CALL 29698 0 2
29393: PUSH
29394: LD_VAR 0 10
29398: PUSH
29399: EMPTY
29400: EQUAL
29401: OR
29402: IFFALSE 29347
// result := [ ] ;
29404: LD_ADDR_VAR 0 6
29408: PUSH
29409: EMPTY
29410: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29411: LD_VAR 0 1
29415: PPUSH
29416: LD_VAR 0 2
29420: PPUSH
29421: LD_VAR 0 3
29425: PPUSH
29426: LD_VAR 0 4
29430: PPUSH
29431: LD_VAR 0 5
29435: PPUSH
29436: CALL_OW 448
29440: IFFALSE 29473
// result := [ chassis , engine , control , weapon ] ;
29442: LD_ADDR_VAR 0 6
29446: PUSH
29447: LD_VAR 0 2
29451: PUSH
29452: LD_VAR 0 3
29456: PUSH
29457: LD_VAR 0 4
29461: PUSH
29462: LD_VAR 0 5
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: LIST
29472: ST_TO_ADDR
// end ;
29473: LD_VAR 0 6
29477: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29478: LD_INT 0
29480: PPUSH
// if not chassis or not engine then
29481: LD_VAR 0 1
29485: NOT
29486: PUSH
29487: LD_VAR 0 2
29491: NOT
29492: OR
29493: IFFALSE 29497
// exit ;
29495: GO 29693
// case engine of engine_solar :
29497: LD_VAR 0 2
29501: PUSH
29502: LD_INT 2
29504: DOUBLE
29505: EQUAL
29506: IFTRUE 29510
29508: GO 29548
29510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29511: LD_ADDR_VAR 0 3
29515: PUSH
29516: LD_INT 11
29518: PUSH
29519: LD_INT 12
29521: PUSH
29522: LD_INT 13
29524: PUSH
29525: LD_INT 14
29527: PUSH
29528: LD_INT 1
29530: PUSH
29531: LD_INT 2
29533: PUSH
29534: LD_INT 3
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: ST_TO_ADDR
29546: GO 29677
29548: LD_INT 1
29550: DOUBLE
29551: EQUAL
29552: IFTRUE 29556
29554: GO 29618
29556: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29557: LD_ADDR_VAR 0 3
29561: PUSH
29562: LD_INT 11
29564: PUSH
29565: LD_INT 12
29567: PUSH
29568: LD_INT 13
29570: PUSH
29571: LD_INT 14
29573: PUSH
29574: LD_INT 1
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: LD_INT 3
29582: PUSH
29583: LD_INT 4
29585: PUSH
29586: LD_INT 5
29588: PUSH
29589: LD_INT 21
29591: PUSH
29592: LD_INT 23
29594: PUSH
29595: LD_INT 22
29597: PUSH
29598: LD_INT 24
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: ST_TO_ADDR
29616: GO 29677
29618: LD_INT 3
29620: DOUBLE
29621: EQUAL
29622: IFTRUE 29626
29624: GO 29676
29626: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29627: LD_ADDR_VAR 0 3
29631: PUSH
29632: LD_INT 13
29634: PUSH
29635: LD_INT 14
29637: PUSH
29638: LD_INT 2
29640: PUSH
29641: LD_INT 3
29643: PUSH
29644: LD_INT 4
29646: PUSH
29647: LD_INT 5
29649: PUSH
29650: LD_INT 21
29652: PUSH
29653: LD_INT 22
29655: PUSH
29656: LD_INT 23
29658: PUSH
29659: LD_INT 24
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: LIST
29667: LIST
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: LIST
29673: ST_TO_ADDR
29674: GO 29677
29676: POP
// result := ( chassis in result ) ;
29677: LD_ADDR_VAR 0 3
29681: PUSH
29682: LD_VAR 0 1
29686: PUSH
29687: LD_VAR 0 3
29691: IN
29692: ST_TO_ADDR
// end ;
29693: LD_VAR 0 3
29697: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29698: LD_INT 0
29700: PPUSH
// if not chassis or not weapon then
29701: LD_VAR 0 1
29705: NOT
29706: PUSH
29707: LD_VAR 0 2
29711: NOT
29712: OR
29713: IFFALSE 29717
// exit ;
29715: GO 30779
// case weapon of us_machine_gun :
29717: LD_VAR 0 2
29721: PUSH
29722: LD_INT 2
29724: DOUBLE
29725: EQUAL
29726: IFTRUE 29730
29728: GO 29760
29730: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29731: LD_ADDR_VAR 0 3
29735: PUSH
29736: LD_INT 1
29738: PUSH
29739: LD_INT 2
29741: PUSH
29742: LD_INT 3
29744: PUSH
29745: LD_INT 4
29747: PUSH
29748: LD_INT 5
29750: PUSH
29751: EMPTY
29752: LIST
29753: LIST
29754: LIST
29755: LIST
29756: LIST
29757: ST_TO_ADDR
29758: GO 30763
29760: LD_INT 3
29762: DOUBLE
29763: EQUAL
29764: IFTRUE 29768
29766: GO 29798
29768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
29769: LD_ADDR_VAR 0 3
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: LD_INT 4
29785: PUSH
29786: LD_INT 5
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: ST_TO_ADDR
29796: GO 30763
29798: LD_INT 11
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29836
29806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
29807: LD_ADDR_VAR 0 3
29811: PUSH
29812: LD_INT 1
29814: PUSH
29815: LD_INT 2
29817: PUSH
29818: LD_INT 3
29820: PUSH
29821: LD_INT 4
29823: PUSH
29824: LD_INT 5
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: ST_TO_ADDR
29834: GO 30763
29836: LD_INT 4
29838: DOUBLE
29839: EQUAL
29840: IFTRUE 29844
29842: GO 29870
29844: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
29845: LD_ADDR_VAR 0 3
29849: PUSH
29850: LD_INT 2
29852: PUSH
29853: LD_INT 3
29855: PUSH
29856: LD_INT 4
29858: PUSH
29859: LD_INT 5
29861: PUSH
29862: EMPTY
29863: LIST
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
29868: GO 30763
29870: LD_INT 5
29872: DOUBLE
29873: EQUAL
29874: IFTRUE 29878
29876: GO 29904
29878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
29879: LD_ADDR_VAR 0 3
29883: PUSH
29884: LD_INT 2
29886: PUSH
29887: LD_INT 3
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: LD_INT 5
29895: PUSH
29896: EMPTY
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: ST_TO_ADDR
29902: GO 30763
29904: LD_INT 9
29906: DOUBLE
29907: EQUAL
29908: IFTRUE 29912
29910: GO 29938
29912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
29913: LD_ADDR_VAR 0 3
29917: PUSH
29918: LD_INT 2
29920: PUSH
29921: LD_INT 3
29923: PUSH
29924: LD_INT 4
29926: PUSH
29927: LD_INT 5
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: LIST
29934: LIST
29935: ST_TO_ADDR
29936: GO 30763
29938: LD_INT 7
29940: DOUBLE
29941: EQUAL
29942: IFTRUE 29946
29944: GO 29972
29946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
29947: LD_ADDR_VAR 0 3
29951: PUSH
29952: LD_INT 2
29954: PUSH
29955: LD_INT 3
29957: PUSH
29958: LD_INT 4
29960: PUSH
29961: LD_INT 5
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: LIST
29968: LIST
29969: ST_TO_ADDR
29970: GO 30763
29972: LD_INT 12
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 30006
29980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 3
29991: PUSH
29992: LD_INT 4
29994: PUSH
29995: LD_INT 5
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: LIST
30002: LIST
30003: ST_TO_ADDR
30004: GO 30763
30006: LD_INT 13
30008: DOUBLE
30009: EQUAL
30010: IFTRUE 30014
30012: GO 30040
30014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30015: LD_ADDR_VAR 0 3
30019: PUSH
30020: LD_INT 2
30022: PUSH
30023: LD_INT 3
30025: PUSH
30026: LD_INT 4
30028: PUSH
30029: LD_INT 5
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: LIST
30036: LIST
30037: ST_TO_ADDR
30038: GO 30763
30040: LD_INT 14
30042: DOUBLE
30043: EQUAL
30044: IFTRUE 30048
30046: GO 30066
30048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30049: LD_ADDR_VAR 0 3
30053: PUSH
30054: LD_INT 4
30056: PUSH
30057: LD_INT 5
30059: PUSH
30060: EMPTY
30061: LIST
30062: LIST
30063: ST_TO_ADDR
30064: GO 30763
30066: LD_INT 6
30068: DOUBLE
30069: EQUAL
30070: IFTRUE 30074
30072: GO 30092
30074: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30075: LD_ADDR_VAR 0 3
30079: PUSH
30080: LD_INT 4
30082: PUSH
30083: LD_INT 5
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: ST_TO_ADDR
30090: GO 30763
30092: LD_INT 10
30094: DOUBLE
30095: EQUAL
30096: IFTRUE 30100
30098: GO 30118
30100: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30101: LD_ADDR_VAR 0 3
30105: PUSH
30106: LD_INT 4
30108: PUSH
30109: LD_INT 5
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: ST_TO_ADDR
30116: GO 30763
30118: LD_INT 22
30120: DOUBLE
30121: EQUAL
30122: IFTRUE 30126
30124: GO 30152
30126: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30127: LD_ADDR_VAR 0 3
30131: PUSH
30132: LD_INT 11
30134: PUSH
30135: LD_INT 12
30137: PUSH
30138: LD_INT 13
30140: PUSH
30141: LD_INT 14
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: LIST
30148: LIST
30149: ST_TO_ADDR
30150: GO 30763
30152: LD_INT 23
30154: DOUBLE
30155: EQUAL
30156: IFTRUE 30160
30158: GO 30186
30160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30161: LD_ADDR_VAR 0 3
30165: PUSH
30166: LD_INT 11
30168: PUSH
30169: LD_INT 12
30171: PUSH
30172: LD_INT 13
30174: PUSH
30175: LD_INT 14
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: LIST
30182: LIST
30183: ST_TO_ADDR
30184: GO 30763
30186: LD_INT 24
30188: DOUBLE
30189: EQUAL
30190: IFTRUE 30194
30192: GO 30220
30194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30195: LD_ADDR_VAR 0 3
30199: PUSH
30200: LD_INT 11
30202: PUSH
30203: LD_INT 12
30205: PUSH
30206: LD_INT 13
30208: PUSH
30209: LD_INT 14
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: ST_TO_ADDR
30218: GO 30763
30220: LD_INT 30
30222: DOUBLE
30223: EQUAL
30224: IFTRUE 30228
30226: GO 30254
30228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30229: LD_ADDR_VAR 0 3
30233: PUSH
30234: LD_INT 11
30236: PUSH
30237: LD_INT 12
30239: PUSH
30240: LD_INT 13
30242: PUSH
30243: LD_INT 14
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: LIST
30250: LIST
30251: ST_TO_ADDR
30252: GO 30763
30254: LD_INT 25
30256: DOUBLE
30257: EQUAL
30258: IFTRUE 30262
30260: GO 30280
30262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30263: LD_ADDR_VAR 0 3
30267: PUSH
30268: LD_INT 13
30270: PUSH
30271: LD_INT 14
30273: PUSH
30274: EMPTY
30275: LIST
30276: LIST
30277: ST_TO_ADDR
30278: GO 30763
30280: LD_INT 27
30282: DOUBLE
30283: EQUAL
30284: IFTRUE 30288
30286: GO 30306
30288: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30289: LD_ADDR_VAR 0 3
30293: PUSH
30294: LD_INT 13
30296: PUSH
30297: LD_INT 14
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: ST_TO_ADDR
30304: GO 30763
30306: LD_EXP 29
30310: DOUBLE
30311: EQUAL
30312: IFTRUE 30316
30314: GO 30342
30316: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30317: LD_ADDR_VAR 0 3
30321: PUSH
30322: LD_INT 11
30324: PUSH
30325: LD_INT 12
30327: PUSH
30328: LD_INT 13
30330: PUSH
30331: LD_INT 14
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: LIST
30338: LIST
30339: ST_TO_ADDR
30340: GO 30763
30342: LD_INT 28
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30368
30350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 13
30358: PUSH
30359: LD_INT 14
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: ST_TO_ADDR
30366: GO 30763
30368: LD_INT 29
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30394
30376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_INT 13
30384: PUSH
30385: LD_INT 14
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: ST_TO_ADDR
30392: GO 30763
30394: LD_INT 31
30396: DOUBLE
30397: EQUAL
30398: IFTRUE 30402
30400: GO 30420
30402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30403: LD_ADDR_VAR 0 3
30407: PUSH
30408: LD_INT 13
30410: PUSH
30411: LD_INT 14
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: ST_TO_ADDR
30418: GO 30763
30420: LD_INT 26
30422: DOUBLE
30423: EQUAL
30424: IFTRUE 30428
30426: GO 30446
30428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30429: LD_ADDR_VAR 0 3
30433: PUSH
30434: LD_INT 13
30436: PUSH
30437: LD_INT 14
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: ST_TO_ADDR
30444: GO 30763
30446: LD_INT 42
30448: DOUBLE
30449: EQUAL
30450: IFTRUE 30454
30452: GO 30480
30454: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30455: LD_ADDR_VAR 0 3
30459: PUSH
30460: LD_INT 21
30462: PUSH
30463: LD_INT 22
30465: PUSH
30466: LD_INT 23
30468: PUSH
30469: LD_INT 24
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: ST_TO_ADDR
30478: GO 30763
30480: LD_INT 43
30482: DOUBLE
30483: EQUAL
30484: IFTRUE 30488
30486: GO 30514
30488: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30489: LD_ADDR_VAR 0 3
30493: PUSH
30494: LD_INT 21
30496: PUSH
30497: LD_INT 22
30499: PUSH
30500: LD_INT 23
30502: PUSH
30503: LD_INT 24
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: ST_TO_ADDR
30512: GO 30763
30514: LD_INT 44
30516: DOUBLE
30517: EQUAL
30518: IFTRUE 30522
30520: GO 30548
30522: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30523: LD_ADDR_VAR 0 3
30527: PUSH
30528: LD_INT 21
30530: PUSH
30531: LD_INT 22
30533: PUSH
30534: LD_INT 23
30536: PUSH
30537: LD_INT 24
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: LIST
30544: LIST
30545: ST_TO_ADDR
30546: GO 30763
30548: LD_INT 45
30550: DOUBLE
30551: EQUAL
30552: IFTRUE 30556
30554: GO 30582
30556: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30557: LD_ADDR_VAR 0 3
30561: PUSH
30562: LD_INT 21
30564: PUSH
30565: LD_INT 22
30567: PUSH
30568: LD_INT 23
30570: PUSH
30571: LD_INT 24
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: ST_TO_ADDR
30580: GO 30763
30582: LD_INT 49
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30616
30590: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30591: LD_ADDR_VAR 0 3
30595: PUSH
30596: LD_INT 21
30598: PUSH
30599: LD_INT 22
30601: PUSH
30602: LD_INT 23
30604: PUSH
30605: LD_INT 24
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: LIST
30613: ST_TO_ADDR
30614: GO 30763
30616: LD_INT 51
30618: DOUBLE
30619: EQUAL
30620: IFTRUE 30624
30622: GO 30650
30624: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30625: LD_ADDR_VAR 0 3
30629: PUSH
30630: LD_INT 21
30632: PUSH
30633: LD_INT 22
30635: PUSH
30636: LD_INT 23
30638: PUSH
30639: LD_INT 24
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: ST_TO_ADDR
30648: GO 30763
30650: LD_INT 52
30652: DOUBLE
30653: EQUAL
30654: IFTRUE 30658
30656: GO 30684
30658: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30659: LD_ADDR_VAR 0 3
30663: PUSH
30664: LD_INT 21
30666: PUSH
30667: LD_INT 22
30669: PUSH
30670: LD_INT 23
30672: PUSH
30673: LD_INT 24
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: ST_TO_ADDR
30682: GO 30763
30684: LD_INT 53
30686: DOUBLE
30687: EQUAL
30688: IFTRUE 30692
30690: GO 30710
30692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30693: LD_ADDR_VAR 0 3
30697: PUSH
30698: LD_INT 23
30700: PUSH
30701: LD_INT 24
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: ST_TO_ADDR
30708: GO 30763
30710: LD_INT 46
30712: DOUBLE
30713: EQUAL
30714: IFTRUE 30718
30716: GO 30736
30718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30719: LD_ADDR_VAR 0 3
30723: PUSH
30724: LD_INT 23
30726: PUSH
30727: LD_INT 24
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: ST_TO_ADDR
30734: GO 30763
30736: LD_INT 47
30738: DOUBLE
30739: EQUAL
30740: IFTRUE 30744
30742: GO 30762
30744: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30745: LD_ADDR_VAR 0 3
30749: PUSH
30750: LD_INT 23
30752: PUSH
30753: LD_INT 24
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: ST_TO_ADDR
30760: GO 30763
30762: POP
// result := ( chassis in result ) ;
30763: LD_ADDR_VAR 0 3
30767: PUSH
30768: LD_VAR 0 1
30772: PUSH
30773: LD_VAR 0 3
30777: IN
30778: ST_TO_ADDR
// end ;
30779: LD_VAR 0 3
30783: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30784: LD_INT 0
30786: PPUSH
30787: PPUSH
30788: PPUSH
30789: PPUSH
30790: PPUSH
30791: PPUSH
30792: PPUSH
// result := array ;
30793: LD_ADDR_VAR 0 5
30797: PUSH
30798: LD_VAR 0 1
30802: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
30803: LD_VAR 0 1
30807: NOT
30808: PUSH
30809: LD_VAR 0 2
30813: NOT
30814: OR
30815: PUSH
30816: LD_VAR 0 3
30820: NOT
30821: OR
30822: PUSH
30823: LD_VAR 0 2
30827: PUSH
30828: LD_VAR 0 1
30832: GREATER
30833: OR
30834: PUSH
30835: LD_VAR 0 3
30839: PUSH
30840: LD_VAR 0 1
30844: GREATER
30845: OR
30846: IFFALSE 30850
// exit ;
30848: GO 31146
// if direction then
30850: LD_VAR 0 4
30854: IFFALSE 30918
// begin d := 1 ;
30856: LD_ADDR_VAR 0 9
30860: PUSH
30861: LD_INT 1
30863: ST_TO_ADDR
// if i_from > i_to then
30864: LD_VAR 0 2
30868: PUSH
30869: LD_VAR 0 3
30873: GREATER
30874: IFFALSE 30900
// length := ( array - i_from ) + i_to else
30876: LD_ADDR_VAR 0 11
30880: PUSH
30881: LD_VAR 0 1
30885: PUSH
30886: LD_VAR 0 2
30890: MINUS
30891: PUSH
30892: LD_VAR 0 3
30896: PLUS
30897: ST_TO_ADDR
30898: GO 30916
// length := i_to - i_from ;
30900: LD_ADDR_VAR 0 11
30904: PUSH
30905: LD_VAR 0 3
30909: PUSH
30910: LD_VAR 0 2
30914: MINUS
30915: ST_TO_ADDR
// end else
30916: GO 30979
// begin d := - 1 ;
30918: LD_ADDR_VAR 0 9
30922: PUSH
30923: LD_INT 1
30925: NEG
30926: ST_TO_ADDR
// if i_from > i_to then
30927: LD_VAR 0 2
30931: PUSH
30932: LD_VAR 0 3
30936: GREATER
30937: IFFALSE 30957
// length := i_from - i_to else
30939: LD_ADDR_VAR 0 11
30943: PUSH
30944: LD_VAR 0 2
30948: PUSH
30949: LD_VAR 0 3
30953: MINUS
30954: ST_TO_ADDR
30955: GO 30979
// length := ( array - i_to ) + i_from ;
30957: LD_ADDR_VAR 0 11
30961: PUSH
30962: LD_VAR 0 1
30966: PUSH
30967: LD_VAR 0 3
30971: MINUS
30972: PUSH
30973: LD_VAR 0 2
30977: PLUS
30978: ST_TO_ADDR
// end ; if not length then
30979: LD_VAR 0 11
30983: NOT
30984: IFFALSE 30988
// exit ;
30986: GO 31146
// tmp := array ;
30988: LD_ADDR_VAR 0 10
30992: PUSH
30993: LD_VAR 0 1
30997: ST_TO_ADDR
// for i = 1 to length do
30998: LD_ADDR_VAR 0 6
31002: PUSH
31003: DOUBLE
31004: LD_INT 1
31006: DEC
31007: ST_TO_ADDR
31008: LD_VAR 0 11
31012: PUSH
31013: FOR_TO
31014: IFFALSE 31134
// begin for j = 1 to array do
31016: LD_ADDR_VAR 0 7
31020: PUSH
31021: DOUBLE
31022: LD_INT 1
31024: DEC
31025: ST_TO_ADDR
31026: LD_VAR 0 1
31030: PUSH
31031: FOR_TO
31032: IFFALSE 31120
// begin k := j + d ;
31034: LD_ADDR_VAR 0 8
31038: PUSH
31039: LD_VAR 0 7
31043: PUSH
31044: LD_VAR 0 9
31048: PLUS
31049: ST_TO_ADDR
// if k > array then
31050: LD_VAR 0 8
31054: PUSH
31055: LD_VAR 0 1
31059: GREATER
31060: IFFALSE 31070
// k := 1 ;
31062: LD_ADDR_VAR 0 8
31066: PUSH
31067: LD_INT 1
31069: ST_TO_ADDR
// if not k then
31070: LD_VAR 0 8
31074: NOT
31075: IFFALSE 31087
// k := array ;
31077: LD_ADDR_VAR 0 8
31081: PUSH
31082: LD_VAR 0 1
31086: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31087: LD_ADDR_VAR 0 10
31091: PUSH
31092: LD_VAR 0 10
31096: PPUSH
31097: LD_VAR 0 8
31101: PPUSH
31102: LD_VAR 0 1
31106: PUSH
31107: LD_VAR 0 7
31111: ARRAY
31112: PPUSH
31113: CALL_OW 1
31117: ST_TO_ADDR
// end ;
31118: GO 31031
31120: POP
31121: POP
// array := tmp ;
31122: LD_ADDR_VAR 0 1
31126: PUSH
31127: LD_VAR 0 10
31131: ST_TO_ADDR
// end ;
31132: GO 31013
31134: POP
31135: POP
// result := array ;
31136: LD_ADDR_VAR 0 5
31140: PUSH
31141: LD_VAR 0 1
31145: ST_TO_ADDR
// end ;
31146: LD_VAR 0 5
31150: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31151: LD_INT 0
31153: PPUSH
31154: PPUSH
// result := 0 ;
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_INT 0
31162: ST_TO_ADDR
// if not array or not value in array then
31163: LD_VAR 0 1
31167: NOT
31168: PUSH
31169: LD_VAR 0 2
31173: PUSH
31174: LD_VAR 0 1
31178: IN
31179: NOT
31180: OR
31181: IFFALSE 31185
// exit ;
31183: GO 31239
// for i = 1 to array do
31185: LD_ADDR_VAR 0 4
31189: PUSH
31190: DOUBLE
31191: LD_INT 1
31193: DEC
31194: ST_TO_ADDR
31195: LD_VAR 0 1
31199: PUSH
31200: FOR_TO
31201: IFFALSE 31237
// if value = array [ i ] then
31203: LD_VAR 0 2
31207: PUSH
31208: LD_VAR 0 1
31212: PUSH
31213: LD_VAR 0 4
31217: ARRAY
31218: EQUAL
31219: IFFALSE 31235
// begin result := i ;
31221: LD_ADDR_VAR 0 3
31225: PUSH
31226: LD_VAR 0 4
31230: ST_TO_ADDR
// exit ;
31231: POP
31232: POP
31233: GO 31239
// end ;
31235: GO 31200
31237: POP
31238: POP
// end ;
31239: LD_VAR 0 3
31243: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31244: LD_INT 0
31246: PPUSH
// vc_chassis := chassis ;
31247: LD_ADDR_OWVAR 37
31251: PUSH
31252: LD_VAR 0 1
31256: ST_TO_ADDR
// vc_engine := engine ;
31257: LD_ADDR_OWVAR 39
31261: PUSH
31262: LD_VAR 0 2
31266: ST_TO_ADDR
// vc_control := control ;
31267: LD_ADDR_OWVAR 38
31271: PUSH
31272: LD_VAR 0 3
31276: ST_TO_ADDR
// vc_weapon := weapon ;
31277: LD_ADDR_OWVAR 40
31281: PUSH
31282: LD_VAR 0 4
31286: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31287: LD_ADDR_OWVAR 41
31291: PUSH
31292: LD_VAR 0 5
31296: ST_TO_ADDR
// end ;
31297: LD_VAR 0 6
31301: RET
// export function WantPlant ( unit ) ; var task ; begin
31302: LD_INT 0
31304: PPUSH
31305: PPUSH
// result := false ;
31306: LD_ADDR_VAR 0 2
31310: PUSH
31311: LD_INT 0
31313: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31314: LD_ADDR_VAR 0 3
31318: PUSH
31319: LD_VAR 0 1
31323: PPUSH
31324: CALL_OW 437
31328: ST_TO_ADDR
// if task then
31329: LD_VAR 0 3
31333: IFFALSE 31361
// if task [ 1 ] [ 1 ] = p then
31335: LD_VAR 0 3
31339: PUSH
31340: LD_INT 1
31342: ARRAY
31343: PUSH
31344: LD_INT 1
31346: ARRAY
31347: PUSH
31348: LD_STRING p
31350: EQUAL
31351: IFFALSE 31361
// result := true ;
31353: LD_ADDR_VAR 0 2
31357: PUSH
31358: LD_INT 1
31360: ST_TO_ADDR
// end ;
31361: LD_VAR 0 2
31365: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31366: LD_INT 0
31368: PPUSH
31369: PPUSH
31370: PPUSH
31371: PPUSH
// if pos < 1 then
31372: LD_VAR 0 2
31376: PUSH
31377: LD_INT 1
31379: LESS
31380: IFFALSE 31384
// exit ;
31382: GO 31687
// if pos = 1 then
31384: LD_VAR 0 2
31388: PUSH
31389: LD_INT 1
31391: EQUAL
31392: IFFALSE 31425
// result := Replace ( arr , pos [ 1 ] , value ) else
31394: LD_ADDR_VAR 0 4
31398: PUSH
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_VAR 0 2
31408: PUSH
31409: LD_INT 1
31411: ARRAY
31412: PPUSH
31413: LD_VAR 0 3
31417: PPUSH
31418: CALL_OW 1
31422: ST_TO_ADDR
31423: GO 31687
// begin tmp := arr ;
31425: LD_ADDR_VAR 0 6
31429: PUSH
31430: LD_VAR 0 1
31434: ST_TO_ADDR
// s_arr := [ tmp ] ;
31435: LD_ADDR_VAR 0 7
31439: PUSH
31440: LD_VAR 0 6
31444: PUSH
31445: EMPTY
31446: LIST
31447: ST_TO_ADDR
// for i = 1 to pos - 1 do
31448: LD_ADDR_VAR 0 5
31452: PUSH
31453: DOUBLE
31454: LD_INT 1
31456: DEC
31457: ST_TO_ADDR
31458: LD_VAR 0 2
31462: PUSH
31463: LD_INT 1
31465: MINUS
31466: PUSH
31467: FOR_TO
31468: IFFALSE 31513
// begin tmp := tmp [ pos [ i ] ] ;
31470: LD_ADDR_VAR 0 6
31474: PUSH
31475: LD_VAR 0 6
31479: PUSH
31480: LD_VAR 0 2
31484: PUSH
31485: LD_VAR 0 5
31489: ARRAY
31490: ARRAY
31491: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31492: LD_ADDR_VAR 0 7
31496: PUSH
31497: LD_VAR 0 7
31501: PUSH
31502: LD_VAR 0 6
31506: PUSH
31507: EMPTY
31508: LIST
31509: ADD
31510: ST_TO_ADDR
// end ;
31511: GO 31467
31513: POP
31514: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31515: LD_ADDR_VAR 0 6
31519: PUSH
31520: LD_VAR 0 6
31524: PPUSH
31525: LD_VAR 0 2
31529: PUSH
31530: LD_VAR 0 2
31534: ARRAY
31535: PPUSH
31536: LD_VAR 0 3
31540: PPUSH
31541: CALL_OW 1
31545: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31546: LD_ADDR_VAR 0 7
31550: PUSH
31551: LD_VAR 0 7
31555: PPUSH
31556: LD_VAR 0 7
31560: PPUSH
31561: LD_VAR 0 6
31565: PPUSH
31566: CALL_OW 1
31570: ST_TO_ADDR
// for i = s_arr downto 2 do
31571: LD_ADDR_VAR 0 5
31575: PUSH
31576: DOUBLE
31577: LD_VAR 0 7
31581: INC
31582: ST_TO_ADDR
31583: LD_INT 2
31585: PUSH
31586: FOR_DOWNTO
31587: IFFALSE 31671
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31589: LD_ADDR_VAR 0 6
31593: PUSH
31594: LD_VAR 0 7
31598: PUSH
31599: LD_VAR 0 5
31603: PUSH
31604: LD_INT 1
31606: MINUS
31607: ARRAY
31608: PPUSH
31609: LD_VAR 0 2
31613: PUSH
31614: LD_VAR 0 5
31618: PUSH
31619: LD_INT 1
31621: MINUS
31622: ARRAY
31623: PPUSH
31624: LD_VAR 0 7
31628: PUSH
31629: LD_VAR 0 5
31633: ARRAY
31634: PPUSH
31635: CALL_OW 1
31639: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31640: LD_ADDR_VAR 0 7
31644: PUSH
31645: LD_VAR 0 7
31649: PPUSH
31650: LD_VAR 0 5
31654: PUSH
31655: LD_INT 1
31657: MINUS
31658: PPUSH
31659: LD_VAR 0 6
31663: PPUSH
31664: CALL_OW 1
31668: ST_TO_ADDR
// end ;
31669: GO 31586
31671: POP
31672: POP
// result := s_arr [ 1 ] ;
31673: LD_ADDR_VAR 0 4
31677: PUSH
31678: LD_VAR 0 7
31682: PUSH
31683: LD_INT 1
31685: ARRAY
31686: ST_TO_ADDR
// end ; end ;
31687: LD_VAR 0 4
31691: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31692: LD_INT 0
31694: PPUSH
31695: PPUSH
// if not list then
31696: LD_VAR 0 1
31700: NOT
31701: IFFALSE 31705
// exit ;
31703: GO 31796
// i := list [ pos1 ] ;
31705: LD_ADDR_VAR 0 5
31709: PUSH
31710: LD_VAR 0 1
31714: PUSH
31715: LD_VAR 0 2
31719: ARRAY
31720: ST_TO_ADDR
// if not i then
31721: LD_VAR 0 5
31725: NOT
31726: IFFALSE 31730
// exit ;
31728: GO 31796
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31730: LD_ADDR_VAR 0 1
31734: PUSH
31735: LD_VAR 0 1
31739: PPUSH
31740: LD_VAR 0 2
31744: PPUSH
31745: LD_VAR 0 1
31749: PUSH
31750: LD_VAR 0 3
31754: ARRAY
31755: PPUSH
31756: CALL_OW 1
31760: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31761: LD_ADDR_VAR 0 1
31765: PUSH
31766: LD_VAR 0 1
31770: PPUSH
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_VAR 0 5
31780: PPUSH
31781: CALL_OW 1
31785: ST_TO_ADDR
// result := list ;
31786: LD_ADDR_VAR 0 4
31790: PUSH
31791: LD_VAR 0 1
31795: ST_TO_ADDR
// end ;
31796: LD_VAR 0 4
31800: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
31801: LD_INT 0
31803: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
31804: LD_ADDR_VAR 0 5
31808: PUSH
31809: LD_VAR 0 1
31813: PPUSH
31814: CALL_OW 250
31818: PPUSH
31819: LD_VAR 0 1
31823: PPUSH
31824: CALL_OW 251
31828: PPUSH
31829: LD_VAR 0 2
31833: PPUSH
31834: LD_VAR 0 3
31838: PPUSH
31839: LD_VAR 0 4
31843: PPUSH
31844: CALL 31854 0 5
31848: ST_TO_ADDR
// end ;
31849: LD_VAR 0 5
31853: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
31854: LD_INT 0
31856: PPUSH
31857: PPUSH
31858: PPUSH
31859: PPUSH
// if not list then
31860: LD_VAR 0 3
31864: NOT
31865: IFFALSE 31869
// exit ;
31867: GO 32257
// result := [ ] ;
31869: LD_ADDR_VAR 0 6
31873: PUSH
31874: EMPTY
31875: ST_TO_ADDR
// for i in list do
31876: LD_ADDR_VAR 0 7
31880: PUSH
31881: LD_VAR 0 3
31885: PUSH
31886: FOR_IN
31887: IFFALSE 32089
// begin tmp := GetDistUnitXY ( i , x , y ) ;
31889: LD_ADDR_VAR 0 9
31893: PUSH
31894: LD_VAR 0 7
31898: PPUSH
31899: LD_VAR 0 1
31903: PPUSH
31904: LD_VAR 0 2
31908: PPUSH
31909: CALL_OW 297
31913: ST_TO_ADDR
// if not result then
31914: LD_VAR 0 6
31918: NOT
31919: IFFALSE 31945
// result := [ [ i , tmp ] ] else
31921: LD_ADDR_VAR 0 6
31925: PUSH
31926: LD_VAR 0 7
31930: PUSH
31931: LD_VAR 0 9
31935: PUSH
31936: EMPTY
31937: LIST
31938: LIST
31939: PUSH
31940: EMPTY
31941: LIST
31942: ST_TO_ADDR
31943: GO 32087
// begin if result [ result ] [ 2 ] < tmp then
31945: LD_VAR 0 6
31949: PUSH
31950: LD_VAR 0 6
31954: ARRAY
31955: PUSH
31956: LD_INT 2
31958: ARRAY
31959: PUSH
31960: LD_VAR 0 9
31964: LESS
31965: IFFALSE 32007
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
31967: LD_ADDR_VAR 0 6
31971: PUSH
31972: LD_VAR 0 6
31976: PPUSH
31977: LD_VAR 0 6
31981: PUSH
31982: LD_INT 1
31984: PLUS
31985: PPUSH
31986: LD_VAR 0 7
31990: PUSH
31991: LD_VAR 0 9
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PPUSH
32000: CALL_OW 2
32004: ST_TO_ADDR
32005: GO 32087
// for j = 1 to result do
32007: LD_ADDR_VAR 0 8
32011: PUSH
32012: DOUBLE
32013: LD_INT 1
32015: DEC
32016: ST_TO_ADDR
32017: LD_VAR 0 6
32021: PUSH
32022: FOR_TO
32023: IFFALSE 32085
// begin if tmp < result [ j ] [ 2 ] then
32025: LD_VAR 0 9
32029: PUSH
32030: LD_VAR 0 6
32034: PUSH
32035: LD_VAR 0 8
32039: ARRAY
32040: PUSH
32041: LD_INT 2
32043: ARRAY
32044: LESS
32045: IFFALSE 32083
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32047: LD_ADDR_VAR 0 6
32051: PUSH
32052: LD_VAR 0 6
32056: PPUSH
32057: LD_VAR 0 8
32061: PPUSH
32062: LD_VAR 0 7
32066: PUSH
32067: LD_VAR 0 9
32071: PUSH
32072: EMPTY
32073: LIST
32074: LIST
32075: PPUSH
32076: CALL_OW 2
32080: ST_TO_ADDR
// break ;
32081: GO 32085
// end ; end ;
32083: GO 32022
32085: POP
32086: POP
// end ; end ;
32087: GO 31886
32089: POP
32090: POP
// if result and not asc then
32091: LD_VAR 0 6
32095: PUSH
32096: LD_VAR 0 4
32100: NOT
32101: AND
32102: IFFALSE 32177
// begin tmp := result ;
32104: LD_ADDR_VAR 0 9
32108: PUSH
32109: LD_VAR 0 6
32113: ST_TO_ADDR
// for i = tmp downto 1 do
32114: LD_ADDR_VAR 0 7
32118: PUSH
32119: DOUBLE
32120: LD_VAR 0 9
32124: INC
32125: ST_TO_ADDR
32126: LD_INT 1
32128: PUSH
32129: FOR_DOWNTO
32130: IFFALSE 32175
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32132: LD_ADDR_VAR 0 6
32136: PUSH
32137: LD_VAR 0 6
32141: PPUSH
32142: LD_VAR 0 9
32146: PUSH
32147: LD_VAR 0 7
32151: MINUS
32152: PUSH
32153: LD_INT 1
32155: PLUS
32156: PPUSH
32157: LD_VAR 0 9
32161: PUSH
32162: LD_VAR 0 7
32166: ARRAY
32167: PPUSH
32168: CALL_OW 1
32172: ST_TO_ADDR
32173: GO 32129
32175: POP
32176: POP
// end ; tmp := [ ] ;
32177: LD_ADDR_VAR 0 9
32181: PUSH
32182: EMPTY
32183: ST_TO_ADDR
// if mode then
32184: LD_VAR 0 5
32188: IFFALSE 32257
// begin for i = 1 to result do
32190: LD_ADDR_VAR 0 7
32194: PUSH
32195: DOUBLE
32196: LD_INT 1
32198: DEC
32199: ST_TO_ADDR
32200: LD_VAR 0 6
32204: PUSH
32205: FOR_TO
32206: IFFALSE 32245
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32208: LD_ADDR_VAR 0 9
32212: PUSH
32213: LD_VAR 0 9
32217: PPUSH
32218: LD_VAR 0 7
32222: PPUSH
32223: LD_VAR 0 6
32227: PUSH
32228: LD_VAR 0 7
32232: ARRAY
32233: PUSH
32234: LD_INT 1
32236: ARRAY
32237: PPUSH
32238: CALL_OW 1
32242: ST_TO_ADDR
32243: GO 32205
32245: POP
32246: POP
// result := tmp ;
32247: LD_ADDR_VAR 0 6
32251: PUSH
32252: LD_VAR 0 9
32256: ST_TO_ADDR
// end ; end ;
32257: LD_VAR 0 6
32261: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32262: LD_INT 0
32264: PPUSH
32265: PPUSH
32266: PPUSH
32267: PPUSH
32268: PPUSH
32269: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32270: LD_ADDR_VAR 0 5
32274: PUSH
32275: LD_INT 0
32277: PUSH
32278: LD_INT 0
32280: PUSH
32281: LD_INT 0
32283: PUSH
32284: EMPTY
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: ST_TO_ADDR
// if not x or not y then
32292: LD_VAR 0 2
32296: NOT
32297: PUSH
32298: LD_VAR 0 3
32302: NOT
32303: OR
32304: IFFALSE 32308
// exit ;
32306: GO 33960
// if not range then
32308: LD_VAR 0 4
32312: NOT
32313: IFFALSE 32323
// range := 10 ;
32315: LD_ADDR_VAR 0 4
32319: PUSH
32320: LD_INT 10
32322: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32323: LD_ADDR_VAR 0 8
32327: PUSH
32328: LD_INT 81
32330: PUSH
32331: LD_VAR 0 1
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 92
32342: PUSH
32343: LD_VAR 0 2
32347: PUSH
32348: LD_VAR 0 3
32352: PUSH
32353: LD_VAR 0 4
32357: PUSH
32358: EMPTY
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 3
32366: PUSH
32367: LD_INT 21
32369: PUSH
32370: LD_INT 3
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: LIST
32385: PPUSH
32386: CALL_OW 69
32390: ST_TO_ADDR
// if not tmp then
32391: LD_VAR 0 8
32395: NOT
32396: IFFALSE 32400
// exit ;
32398: GO 33960
// for i in tmp do
32400: LD_ADDR_VAR 0 6
32404: PUSH
32405: LD_VAR 0 8
32409: PUSH
32410: FOR_IN
32411: IFFALSE 33935
// begin points := [ 0 , 0 , 0 ] ;
32413: LD_ADDR_VAR 0 9
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: LD_INT 0
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: ST_TO_ADDR
// bpoints := 1 ;
32432: LD_ADDR_VAR 0 10
32436: PUSH
32437: LD_INT 1
32439: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32440: LD_VAR 0 6
32444: PPUSH
32445: CALL_OW 247
32449: PUSH
32450: LD_INT 1
32452: DOUBLE
32453: EQUAL
32454: IFTRUE 32458
32456: GO 33036
32458: POP
// begin if GetClass ( i ) = 1 then
32459: LD_VAR 0 6
32463: PPUSH
32464: CALL_OW 257
32468: PUSH
32469: LD_INT 1
32471: EQUAL
32472: IFFALSE 32493
// points := [ 10 , 5 , 3 ] ;
32474: LD_ADDR_VAR 0 9
32478: PUSH
32479: LD_INT 10
32481: PUSH
32482: LD_INT 5
32484: PUSH
32485: LD_INT 3
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32493: LD_VAR 0 6
32497: PPUSH
32498: CALL_OW 257
32502: PUSH
32503: LD_INT 2
32505: PUSH
32506: LD_INT 3
32508: PUSH
32509: LD_INT 4
32511: PUSH
32512: EMPTY
32513: LIST
32514: LIST
32515: LIST
32516: IN
32517: IFFALSE 32538
// points := [ 3 , 2 , 1 ] ;
32519: LD_ADDR_VAR 0 9
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: LD_INT 2
32529: PUSH
32530: LD_INT 1
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32538: LD_VAR 0 6
32542: PPUSH
32543: CALL_OW 257
32547: PUSH
32548: LD_INT 5
32550: EQUAL
32551: IFFALSE 32572
// points := [ 130 , 5 , 2 ] ;
32553: LD_ADDR_VAR 0 9
32557: PUSH
32558: LD_INT 130
32560: PUSH
32561: LD_INT 5
32563: PUSH
32564: LD_INT 2
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: LIST
32571: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32572: LD_VAR 0 6
32576: PPUSH
32577: CALL_OW 257
32581: PUSH
32582: LD_INT 8
32584: EQUAL
32585: IFFALSE 32606
// points := [ 35 , 35 , 30 ] ;
32587: LD_ADDR_VAR 0 9
32591: PUSH
32592: LD_INT 35
32594: PUSH
32595: LD_INT 35
32597: PUSH
32598: LD_INT 30
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32606: LD_VAR 0 6
32610: PPUSH
32611: CALL_OW 257
32615: PUSH
32616: LD_INT 9
32618: EQUAL
32619: IFFALSE 32640
// points := [ 20 , 55 , 40 ] ;
32621: LD_ADDR_VAR 0 9
32625: PUSH
32626: LD_INT 20
32628: PUSH
32629: LD_INT 55
32631: PUSH
32632: LD_INT 40
32634: PUSH
32635: EMPTY
32636: LIST
32637: LIST
32638: LIST
32639: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32640: LD_VAR 0 6
32644: PPUSH
32645: CALL_OW 257
32649: PUSH
32650: LD_INT 12
32652: PUSH
32653: LD_INT 16
32655: PUSH
32656: EMPTY
32657: LIST
32658: LIST
32659: IN
32660: IFFALSE 32681
// points := [ 5 , 3 , 2 ] ;
32662: LD_ADDR_VAR 0 9
32666: PUSH
32667: LD_INT 5
32669: PUSH
32670: LD_INT 3
32672: PUSH
32673: LD_INT 2
32675: PUSH
32676: EMPTY
32677: LIST
32678: LIST
32679: LIST
32680: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32681: LD_VAR 0 6
32685: PPUSH
32686: CALL_OW 257
32690: PUSH
32691: LD_INT 17
32693: EQUAL
32694: IFFALSE 32715
// points := [ 100 , 50 , 75 ] ;
32696: LD_ADDR_VAR 0 9
32700: PUSH
32701: LD_INT 100
32703: PUSH
32704: LD_INT 50
32706: PUSH
32707: LD_INT 75
32709: PUSH
32710: EMPTY
32711: LIST
32712: LIST
32713: LIST
32714: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32715: LD_VAR 0 6
32719: PPUSH
32720: CALL_OW 257
32724: PUSH
32725: LD_INT 15
32727: EQUAL
32728: IFFALSE 32749
// points := [ 10 , 5 , 3 ] ;
32730: LD_ADDR_VAR 0 9
32734: PUSH
32735: LD_INT 10
32737: PUSH
32738: LD_INT 5
32740: PUSH
32741: LD_INT 3
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: LIST
32748: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32749: LD_VAR 0 6
32753: PPUSH
32754: CALL_OW 257
32758: PUSH
32759: LD_INT 14
32761: EQUAL
32762: IFFALSE 32783
// points := [ 10 , 0 , 0 ] ;
32764: LD_ADDR_VAR 0 9
32768: PUSH
32769: LD_INT 10
32771: PUSH
32772: LD_INT 0
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: LIST
32782: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32783: LD_VAR 0 6
32787: PPUSH
32788: CALL_OW 257
32792: PUSH
32793: LD_INT 11
32795: EQUAL
32796: IFFALSE 32817
// points := [ 30 , 10 , 5 ] ;
32798: LD_ADDR_VAR 0 9
32802: PUSH
32803: LD_INT 30
32805: PUSH
32806: LD_INT 10
32808: PUSH
32809: LD_INT 5
32811: PUSH
32812: EMPTY
32813: LIST
32814: LIST
32815: LIST
32816: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
32817: LD_VAR 0 1
32821: PPUSH
32822: LD_INT 5
32824: PPUSH
32825: CALL_OW 321
32829: PUSH
32830: LD_INT 2
32832: EQUAL
32833: IFFALSE 32850
// bpoints := bpoints * 1.8 ;
32835: LD_ADDR_VAR 0 10
32839: PUSH
32840: LD_VAR 0 10
32844: PUSH
32845: LD_REAL  1.80000000000000E+0000
32848: MUL
32849: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
32850: LD_VAR 0 6
32854: PPUSH
32855: CALL_OW 257
32859: PUSH
32860: LD_INT 1
32862: PUSH
32863: LD_INT 2
32865: PUSH
32866: LD_INT 3
32868: PUSH
32869: LD_INT 4
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: IN
32878: PUSH
32879: LD_VAR 0 1
32883: PPUSH
32884: LD_INT 51
32886: PPUSH
32887: CALL_OW 321
32891: PUSH
32892: LD_INT 2
32894: EQUAL
32895: AND
32896: IFFALSE 32913
// bpoints := bpoints * 1.2 ;
32898: LD_ADDR_VAR 0 10
32902: PUSH
32903: LD_VAR 0 10
32907: PUSH
32908: LD_REAL  1.20000000000000E+0000
32911: MUL
32912: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
32913: LD_VAR 0 6
32917: PPUSH
32918: CALL_OW 257
32922: PUSH
32923: LD_INT 5
32925: PUSH
32926: LD_INT 7
32928: PUSH
32929: LD_INT 9
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: LIST
32936: IN
32937: PUSH
32938: LD_VAR 0 1
32942: PPUSH
32943: LD_INT 52
32945: PPUSH
32946: CALL_OW 321
32950: PUSH
32951: LD_INT 2
32953: EQUAL
32954: AND
32955: IFFALSE 32972
// bpoints := bpoints * 1.5 ;
32957: LD_ADDR_VAR 0 10
32961: PUSH
32962: LD_VAR 0 10
32966: PUSH
32967: LD_REAL  1.50000000000000E+0000
32970: MUL
32971: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
32972: LD_VAR 0 1
32976: PPUSH
32977: LD_INT 66
32979: PPUSH
32980: CALL_OW 321
32984: PUSH
32985: LD_INT 2
32987: EQUAL
32988: IFFALSE 33005
// bpoints := bpoints * 1.1 ;
32990: LD_ADDR_VAR 0 10
32994: PUSH
32995: LD_VAR 0 10
32999: PUSH
33000: LD_REAL  1.10000000000000E+0000
33003: MUL
33004: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33005: LD_ADDR_VAR 0 10
33009: PUSH
33010: LD_VAR 0 10
33014: PUSH
33015: LD_VAR 0 6
33019: PPUSH
33020: LD_INT 1
33022: PPUSH
33023: CALL_OW 259
33027: PUSH
33028: LD_REAL  1.15000000000000E+0000
33031: MUL
33032: MUL
33033: ST_TO_ADDR
// end ; unit_vehicle :
33034: GO 33864
33036: LD_INT 2
33038: DOUBLE
33039: EQUAL
33040: IFTRUE 33044
33042: GO 33852
33044: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33045: LD_VAR 0 6
33049: PPUSH
33050: CALL_OW 264
33054: PUSH
33055: LD_INT 2
33057: PUSH
33058: LD_INT 42
33060: PUSH
33061: LD_INT 24
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: IN
33069: IFFALSE 33090
// points := [ 25 , 5 , 3 ] ;
33071: LD_ADDR_VAR 0 9
33075: PUSH
33076: LD_INT 25
33078: PUSH
33079: LD_INT 5
33081: PUSH
33082: LD_INT 3
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: LIST
33089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33090: LD_VAR 0 6
33094: PPUSH
33095: CALL_OW 264
33099: PUSH
33100: LD_INT 4
33102: PUSH
33103: LD_INT 43
33105: PUSH
33106: LD_INT 25
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: LIST
33113: IN
33114: IFFALSE 33135
// points := [ 40 , 15 , 5 ] ;
33116: LD_ADDR_VAR 0 9
33120: PUSH
33121: LD_INT 40
33123: PUSH
33124: LD_INT 15
33126: PUSH
33127: LD_INT 5
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33135: LD_VAR 0 6
33139: PPUSH
33140: CALL_OW 264
33144: PUSH
33145: LD_INT 3
33147: PUSH
33148: LD_INT 23
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: IN
33155: IFFALSE 33176
// points := [ 7 , 25 , 8 ] ;
33157: LD_ADDR_VAR 0 9
33161: PUSH
33162: LD_INT 7
33164: PUSH
33165: LD_INT 25
33167: PUSH
33168: LD_INT 8
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33176: LD_VAR 0 6
33180: PPUSH
33181: CALL_OW 264
33185: PUSH
33186: LD_INT 5
33188: PUSH
33189: LD_INT 27
33191: PUSH
33192: LD_INT 44
33194: PUSH
33195: EMPTY
33196: LIST
33197: LIST
33198: LIST
33199: IN
33200: IFFALSE 33221
// points := [ 14 , 50 , 16 ] ;
33202: LD_ADDR_VAR 0 9
33206: PUSH
33207: LD_INT 14
33209: PUSH
33210: LD_INT 50
33212: PUSH
33213: LD_INT 16
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: LIST
33220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33221: LD_VAR 0 6
33225: PPUSH
33226: CALL_OW 264
33230: PUSH
33231: LD_INT 6
33233: PUSH
33234: LD_INT 46
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: IN
33241: IFFALSE 33262
// points := [ 32 , 120 , 70 ] ;
33243: LD_ADDR_VAR 0 9
33247: PUSH
33248: LD_INT 32
33250: PUSH
33251: LD_INT 120
33253: PUSH
33254: LD_INT 70
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: LIST
33261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33262: LD_VAR 0 6
33266: PPUSH
33267: CALL_OW 264
33271: PUSH
33272: LD_INT 7
33274: PUSH
33275: LD_INT 28
33277: PUSH
33278: LD_INT 45
33280: PUSH
33281: LD_EXP 29
33285: PUSH
33286: EMPTY
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: IN
33292: IFFALSE 33313
// points := [ 35 , 20 , 45 ] ;
33294: LD_ADDR_VAR 0 9
33298: PUSH
33299: LD_INT 35
33301: PUSH
33302: LD_INT 20
33304: PUSH
33305: LD_INT 45
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33313: LD_VAR 0 6
33317: PPUSH
33318: CALL_OW 264
33322: PUSH
33323: LD_INT 47
33325: PUSH
33326: EMPTY
33327: LIST
33328: IN
33329: IFFALSE 33350
// points := [ 67 , 45 , 75 ] ;
33331: LD_ADDR_VAR 0 9
33335: PUSH
33336: LD_INT 67
33338: PUSH
33339: LD_INT 45
33341: PUSH
33342: LD_INT 75
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: LIST
33349: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33350: LD_VAR 0 6
33354: PPUSH
33355: CALL_OW 264
33359: PUSH
33360: LD_INT 26
33362: PUSH
33363: EMPTY
33364: LIST
33365: IN
33366: IFFALSE 33387
// points := [ 120 , 30 , 80 ] ;
33368: LD_ADDR_VAR 0 9
33372: PUSH
33373: LD_INT 120
33375: PUSH
33376: LD_INT 30
33378: PUSH
33379: LD_INT 80
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33387: LD_VAR 0 6
33391: PPUSH
33392: CALL_OW 264
33396: PUSH
33397: LD_INT 22
33399: PUSH
33400: EMPTY
33401: LIST
33402: IN
33403: IFFALSE 33424
// points := [ 40 , 1 , 1 ] ;
33405: LD_ADDR_VAR 0 9
33409: PUSH
33410: LD_INT 40
33412: PUSH
33413: LD_INT 1
33415: PUSH
33416: LD_INT 1
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33424: LD_VAR 0 6
33428: PPUSH
33429: CALL_OW 264
33433: PUSH
33434: LD_INT 29
33436: PUSH
33437: EMPTY
33438: LIST
33439: IN
33440: IFFALSE 33461
// points := [ 70 , 200 , 400 ] ;
33442: LD_ADDR_VAR 0 9
33446: PUSH
33447: LD_INT 70
33449: PUSH
33450: LD_INT 200
33452: PUSH
33453: LD_INT 400
33455: PUSH
33456: EMPTY
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33461: LD_VAR 0 6
33465: PPUSH
33466: CALL_OW 264
33470: PUSH
33471: LD_INT 14
33473: PUSH
33474: LD_INT 53
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: IN
33481: IFFALSE 33502
// points := [ 40 , 10 , 20 ] ;
33483: LD_ADDR_VAR 0 9
33487: PUSH
33488: LD_INT 40
33490: PUSH
33491: LD_INT 10
33493: PUSH
33494: LD_INT 20
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: LIST
33501: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33502: LD_VAR 0 6
33506: PPUSH
33507: CALL_OW 264
33511: PUSH
33512: LD_INT 9
33514: PUSH
33515: EMPTY
33516: LIST
33517: IN
33518: IFFALSE 33539
// points := [ 5 , 70 , 20 ] ;
33520: LD_ADDR_VAR 0 9
33524: PUSH
33525: LD_INT 5
33527: PUSH
33528: LD_INT 70
33530: PUSH
33531: LD_INT 20
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: LIST
33538: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33539: LD_VAR 0 6
33543: PPUSH
33544: CALL_OW 264
33548: PUSH
33549: LD_INT 10
33551: PUSH
33552: EMPTY
33553: LIST
33554: IN
33555: IFFALSE 33576
// points := [ 35 , 110 , 70 ] ;
33557: LD_ADDR_VAR 0 9
33561: PUSH
33562: LD_INT 35
33564: PUSH
33565: LD_INT 110
33567: PUSH
33568: LD_INT 70
33570: PUSH
33571: EMPTY
33572: LIST
33573: LIST
33574: LIST
33575: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33576: LD_VAR 0 6
33580: PPUSH
33581: CALL_OW 265
33585: PUSH
33586: LD_INT 25
33588: EQUAL
33589: IFFALSE 33610
// points := [ 80 , 65 , 100 ] ;
33591: LD_ADDR_VAR 0 9
33595: PUSH
33596: LD_INT 80
33598: PUSH
33599: LD_INT 65
33601: PUSH
33602: LD_INT 100
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33610: LD_VAR 0 6
33614: PPUSH
33615: CALL_OW 263
33619: PUSH
33620: LD_INT 1
33622: EQUAL
33623: IFFALSE 33658
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33625: LD_ADDR_VAR 0 10
33629: PUSH
33630: LD_VAR 0 10
33634: PUSH
33635: LD_VAR 0 6
33639: PPUSH
33640: CALL_OW 311
33644: PPUSH
33645: LD_INT 3
33647: PPUSH
33648: CALL_OW 259
33652: PUSH
33653: LD_INT 4
33655: MUL
33656: MUL
33657: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33658: LD_VAR 0 6
33662: PPUSH
33663: CALL_OW 263
33667: PUSH
33668: LD_INT 2
33670: EQUAL
33671: IFFALSE 33722
// begin j := IsControledBy ( i ) ;
33673: LD_ADDR_VAR 0 7
33677: PUSH
33678: LD_VAR 0 6
33682: PPUSH
33683: CALL_OW 312
33687: ST_TO_ADDR
// if j then
33688: LD_VAR 0 7
33692: IFFALSE 33722
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33694: LD_ADDR_VAR 0 10
33698: PUSH
33699: LD_VAR 0 10
33703: PUSH
33704: LD_VAR 0 7
33708: PPUSH
33709: LD_INT 3
33711: PPUSH
33712: CALL_OW 259
33716: PUSH
33717: LD_INT 3
33719: MUL
33720: MUL
33721: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33722: LD_VAR 0 6
33726: PPUSH
33727: CALL_OW 264
33731: PUSH
33732: LD_INT 5
33734: PUSH
33735: LD_INT 6
33737: PUSH
33738: LD_INT 46
33740: PUSH
33741: LD_INT 44
33743: PUSH
33744: LD_INT 47
33746: PUSH
33747: LD_INT 45
33749: PUSH
33750: LD_INT 28
33752: PUSH
33753: LD_INT 7
33755: PUSH
33756: LD_INT 27
33758: PUSH
33759: LD_INT 29
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: IN
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: LD_INT 52
33782: PPUSH
33783: CALL_OW 321
33787: PUSH
33788: LD_INT 2
33790: EQUAL
33791: AND
33792: IFFALSE 33809
// bpoints := bpoints * 1.2 ;
33794: LD_ADDR_VAR 0 10
33798: PUSH
33799: LD_VAR 0 10
33803: PUSH
33804: LD_REAL  1.20000000000000E+0000
33807: MUL
33808: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
33809: LD_VAR 0 6
33813: PPUSH
33814: CALL_OW 264
33818: PUSH
33819: LD_INT 6
33821: PUSH
33822: LD_INT 46
33824: PUSH
33825: LD_INT 47
33827: PUSH
33828: EMPTY
33829: LIST
33830: LIST
33831: LIST
33832: IN
33833: IFFALSE 33850
// bpoints := bpoints * 1.2 ;
33835: LD_ADDR_VAR 0 10
33839: PUSH
33840: LD_VAR 0 10
33844: PUSH
33845: LD_REAL  1.20000000000000E+0000
33848: MUL
33849: ST_TO_ADDR
// end ; unit_building :
33850: GO 33864
33852: LD_INT 3
33854: DOUBLE
33855: EQUAL
33856: IFTRUE 33860
33858: GO 33863
33860: POP
// ; end ;
33861: GO 33864
33863: POP
// for j = 1 to 3 do
33864: LD_ADDR_VAR 0 7
33868: PUSH
33869: DOUBLE
33870: LD_INT 1
33872: DEC
33873: ST_TO_ADDR
33874: LD_INT 3
33876: PUSH
33877: FOR_TO
33878: IFFALSE 33931
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
33880: LD_ADDR_VAR 0 5
33884: PUSH
33885: LD_VAR 0 5
33889: PPUSH
33890: LD_VAR 0 7
33894: PPUSH
33895: LD_VAR 0 5
33899: PUSH
33900: LD_VAR 0 7
33904: ARRAY
33905: PUSH
33906: LD_VAR 0 9
33910: PUSH
33911: LD_VAR 0 7
33915: ARRAY
33916: PUSH
33917: LD_VAR 0 10
33921: MUL
33922: PLUS
33923: PPUSH
33924: CALL_OW 1
33928: ST_TO_ADDR
33929: GO 33877
33931: POP
33932: POP
// end ;
33933: GO 32410
33935: POP
33936: POP
// result := Replace ( result , 4 , tmp ) ;
33937: LD_ADDR_VAR 0 5
33941: PUSH
33942: LD_VAR 0 5
33946: PPUSH
33947: LD_INT 4
33949: PPUSH
33950: LD_VAR 0 8
33954: PPUSH
33955: CALL_OW 1
33959: ST_TO_ADDR
// end ;
33960: LD_VAR 0 5
33964: RET
// export function DangerAtRange ( unit , range ) ; begin
33965: LD_INT 0
33967: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
33968: LD_ADDR_VAR 0 3
33972: PUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL_OW 255
33982: PPUSH
33983: LD_VAR 0 1
33987: PPUSH
33988: CALL_OW 250
33992: PPUSH
33993: LD_VAR 0 1
33997: PPUSH
33998: CALL_OW 251
34002: PPUSH
34003: LD_VAR 0 2
34007: PPUSH
34008: CALL 32262 0 4
34012: ST_TO_ADDR
// end ;
34013: LD_VAR 0 3
34017: RET
// export function DangerInArea ( side , area ) ; begin
34018: LD_INT 0
34020: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34021: LD_ADDR_VAR 0 3
34025: PUSH
34026: LD_VAR 0 2
34030: PPUSH
34031: LD_INT 81
34033: PUSH
34034: LD_VAR 0 1
34038: PUSH
34039: EMPTY
34040: LIST
34041: LIST
34042: PPUSH
34043: CALL_OW 70
34047: ST_TO_ADDR
// end ;
34048: LD_VAR 0 3
34052: RET
// export function IsExtension ( b ) ; begin
34053: LD_INT 0
34055: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34056: LD_ADDR_VAR 0 2
34060: PUSH
34061: LD_VAR 0 1
34065: PUSH
34066: LD_INT 23
34068: PUSH
34069: LD_INT 20
34071: PUSH
34072: LD_INT 22
34074: PUSH
34075: LD_INT 17
34077: PUSH
34078: LD_INT 24
34080: PUSH
34081: LD_INT 21
34083: PUSH
34084: LD_INT 19
34086: PUSH
34087: LD_INT 16
34089: PUSH
34090: LD_INT 25
34092: PUSH
34093: LD_INT 18
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: IN
34108: ST_TO_ADDR
// end ;
34109: LD_VAR 0 2
34113: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34114: LD_INT 0
34116: PPUSH
34117: PPUSH
34118: PPUSH
// result := [ ] ;
34119: LD_ADDR_VAR 0 4
34123: PUSH
34124: EMPTY
34125: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34126: LD_ADDR_VAR 0 5
34130: PUSH
34131: LD_VAR 0 2
34135: PPUSH
34136: LD_INT 21
34138: PUSH
34139: LD_INT 3
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PPUSH
34146: CALL_OW 70
34150: ST_TO_ADDR
// if not tmp then
34151: LD_VAR 0 5
34155: NOT
34156: IFFALSE 34160
// exit ;
34158: GO 34224
// if checkLink then
34160: LD_VAR 0 3
34164: IFFALSE 34214
// begin for i in tmp do
34166: LD_ADDR_VAR 0 6
34170: PUSH
34171: LD_VAR 0 5
34175: PUSH
34176: FOR_IN
34177: IFFALSE 34212
// if GetBase ( i ) <> base then
34179: LD_VAR 0 6
34183: PPUSH
34184: CALL_OW 274
34188: PUSH
34189: LD_VAR 0 1
34193: NONEQUAL
34194: IFFALSE 34210
// ComLinkToBase ( base , i ) ;
34196: LD_VAR 0 1
34200: PPUSH
34201: LD_VAR 0 6
34205: PPUSH
34206: CALL_OW 169
34210: GO 34176
34212: POP
34213: POP
// end ; result := tmp ;
34214: LD_ADDR_VAR 0 4
34218: PUSH
34219: LD_VAR 0 5
34223: ST_TO_ADDR
// end ;
34224: LD_VAR 0 4
34228: RET
// export function ComComplete ( units , b ) ; var i ; begin
34229: LD_INT 0
34231: PPUSH
34232: PPUSH
// if not units then
34233: LD_VAR 0 1
34237: NOT
34238: IFFALSE 34242
// exit ;
34240: GO 34332
// for i in units do
34242: LD_ADDR_VAR 0 4
34246: PUSH
34247: LD_VAR 0 1
34251: PUSH
34252: FOR_IN
34253: IFFALSE 34330
// if BuildingStatus ( b ) = bs_build then
34255: LD_VAR 0 2
34259: PPUSH
34260: CALL_OW 461
34264: PUSH
34265: LD_INT 1
34267: EQUAL
34268: IFFALSE 34328
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34270: LD_VAR 0 4
34274: PPUSH
34275: LD_STRING h
34277: PUSH
34278: LD_VAR 0 2
34282: PPUSH
34283: CALL_OW 250
34287: PUSH
34288: LD_VAR 0 2
34292: PPUSH
34293: CALL_OW 251
34297: PUSH
34298: LD_VAR 0 2
34302: PUSH
34303: LD_INT 0
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: PUSH
34321: EMPTY
34322: LIST
34323: PPUSH
34324: CALL_OW 446
34328: GO 34252
34330: POP
34331: POP
// end ;
34332: LD_VAR 0 3
34336: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34337: LD_INT 0
34339: PPUSH
34340: PPUSH
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
34345: LD_VAR 0 1
34349: NOT
34350: PUSH
34351: LD_VAR 0 1
34355: PPUSH
34356: CALL_OW 263
34360: PUSH
34361: LD_INT 2
34363: NONEQUAL
34364: OR
34365: IFFALSE 34369
// exit ;
34367: GO 34685
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34369: LD_ADDR_VAR 0 6
34373: PUSH
34374: LD_INT 22
34376: PUSH
34377: LD_VAR 0 1
34381: PPUSH
34382: CALL_OW 255
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 30
34396: PUSH
34397: LD_INT 36
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 34
34406: PUSH
34407: LD_INT 31
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PPUSH
34423: CALL_OW 69
34427: ST_TO_ADDR
// if not tmp then
34428: LD_VAR 0 6
34432: NOT
34433: IFFALSE 34437
// exit ;
34435: GO 34685
// result := [ ] ;
34437: LD_ADDR_VAR 0 2
34441: PUSH
34442: EMPTY
34443: ST_TO_ADDR
// for i in tmp do
34444: LD_ADDR_VAR 0 3
34448: PUSH
34449: LD_VAR 0 6
34453: PUSH
34454: FOR_IN
34455: IFFALSE 34526
// begin t := UnitsInside ( i ) ;
34457: LD_ADDR_VAR 0 4
34461: PUSH
34462: LD_VAR 0 3
34466: PPUSH
34467: CALL_OW 313
34471: ST_TO_ADDR
// if t then
34472: LD_VAR 0 4
34476: IFFALSE 34524
// for j in t do
34478: LD_ADDR_VAR 0 7
34482: PUSH
34483: LD_VAR 0 4
34487: PUSH
34488: FOR_IN
34489: IFFALSE 34522
// result := Replace ( result , result + 1 , j ) ;
34491: LD_ADDR_VAR 0 2
34495: PUSH
34496: LD_VAR 0 2
34500: PPUSH
34501: LD_VAR 0 2
34505: PUSH
34506: LD_INT 1
34508: PLUS
34509: PPUSH
34510: LD_VAR 0 7
34514: PPUSH
34515: CALL_OW 1
34519: ST_TO_ADDR
34520: GO 34488
34522: POP
34523: POP
// end ;
34524: GO 34454
34526: POP
34527: POP
// if not result then
34528: LD_VAR 0 2
34532: NOT
34533: IFFALSE 34537
// exit ;
34535: GO 34685
// mech := result [ 1 ] ;
34537: LD_ADDR_VAR 0 5
34541: PUSH
34542: LD_VAR 0 2
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: ST_TO_ADDR
// if result > 1 then
34551: LD_VAR 0 2
34555: PUSH
34556: LD_INT 1
34558: GREATER
34559: IFFALSE 34671
// begin for i = 2 to result do
34561: LD_ADDR_VAR 0 3
34565: PUSH
34566: DOUBLE
34567: LD_INT 2
34569: DEC
34570: ST_TO_ADDR
34571: LD_VAR 0 2
34575: PUSH
34576: FOR_TO
34577: IFFALSE 34669
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34579: LD_ADDR_VAR 0 4
34583: PUSH
34584: LD_VAR 0 2
34588: PUSH
34589: LD_VAR 0 3
34593: ARRAY
34594: PPUSH
34595: LD_INT 3
34597: PPUSH
34598: CALL_OW 259
34602: PUSH
34603: LD_VAR 0 2
34607: PUSH
34608: LD_VAR 0 3
34612: ARRAY
34613: PPUSH
34614: CALL_OW 432
34618: MINUS
34619: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34620: LD_VAR 0 4
34624: PUSH
34625: LD_VAR 0 5
34629: PPUSH
34630: LD_INT 3
34632: PPUSH
34633: CALL_OW 259
34637: PUSH
34638: LD_VAR 0 5
34642: PPUSH
34643: CALL_OW 432
34647: MINUS
34648: GREATEREQUAL
34649: IFFALSE 34667
// mech := result [ i ] ;
34651: LD_ADDR_VAR 0 5
34655: PUSH
34656: LD_VAR 0 2
34660: PUSH
34661: LD_VAR 0 3
34665: ARRAY
34666: ST_TO_ADDR
// end ;
34667: GO 34576
34669: POP
34670: POP
// end ; ComLinkTo ( vehicle , mech ) ;
34671: LD_VAR 0 1
34675: PPUSH
34676: LD_VAR 0 5
34680: PPUSH
34681: CALL_OW 135
// end ;
34685: LD_VAR 0 2
34689: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
// result := [ ] ;
34705: LD_ADDR_VAR 0 7
34709: PUSH
34710: EMPTY
34711: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 266
34721: PUSH
34722: LD_INT 0
34724: PUSH
34725: LD_INT 1
34727: PUSH
34728: EMPTY
34729: LIST
34730: LIST
34731: IN
34732: NOT
34733: IFFALSE 34737
// exit ;
34735: GO 36371
// if name then
34737: LD_VAR 0 3
34741: IFFALSE 34757
// SetBName ( base_dep , name ) ;
34743: LD_VAR 0 1
34747: PPUSH
34748: LD_VAR 0 3
34752: PPUSH
34753: CALL_OW 500
// base := GetBase ( base_dep ) ;
34757: LD_ADDR_VAR 0 15
34761: PUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 274
34771: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34772: LD_ADDR_VAR 0 16
34776: PUSH
34777: LD_VAR 0 1
34781: PPUSH
34782: CALL_OW 255
34786: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34787: LD_ADDR_VAR 0 17
34791: PUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: CALL_OW 248
34801: ST_TO_ADDR
// if sources then
34802: LD_VAR 0 5
34806: IFFALSE 34853
// for i = 1 to 3 do
34808: LD_ADDR_VAR 0 8
34812: PUSH
34813: DOUBLE
34814: LD_INT 1
34816: DEC
34817: ST_TO_ADDR
34818: LD_INT 3
34820: PUSH
34821: FOR_TO
34822: IFFALSE 34851
// AddResourceType ( base , i , sources [ i ] ) ;
34824: LD_VAR 0 15
34828: PPUSH
34829: LD_VAR 0 8
34833: PPUSH
34834: LD_VAR 0 5
34838: PUSH
34839: LD_VAR 0 8
34843: ARRAY
34844: PPUSH
34845: CALL_OW 276
34849: GO 34821
34851: POP
34852: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
34853: LD_ADDR_VAR 0 18
34857: PUSH
34858: LD_VAR 0 15
34862: PPUSH
34863: LD_VAR 0 2
34867: PPUSH
34868: LD_INT 1
34870: PPUSH
34871: CALL 34114 0 3
34875: ST_TO_ADDR
// InitHc ;
34876: CALL_OW 19
// InitUc ;
34880: CALL_OW 18
// uc_side := side ;
34884: LD_ADDR_OWVAR 20
34888: PUSH
34889: LD_VAR 0 16
34893: ST_TO_ADDR
// uc_nation := nation ;
34894: LD_ADDR_OWVAR 21
34898: PUSH
34899: LD_VAR 0 17
34903: ST_TO_ADDR
// if buildings then
34904: LD_VAR 0 18
34908: IFFALSE 36230
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
34910: LD_ADDR_VAR 0 19
34914: PUSH
34915: LD_VAR 0 18
34919: PPUSH
34920: LD_INT 2
34922: PUSH
34923: LD_INT 30
34925: PUSH
34926: LD_INT 29
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 30
34935: PUSH
34936: LD_INT 30
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: LIST
34947: PPUSH
34948: CALL_OW 72
34952: ST_TO_ADDR
// if tmp then
34953: LD_VAR 0 19
34957: IFFALSE 35005
// for i in tmp do
34959: LD_ADDR_VAR 0 8
34963: PUSH
34964: LD_VAR 0 19
34968: PUSH
34969: FOR_IN
34970: IFFALSE 35003
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
34972: LD_VAR 0 8
34976: PPUSH
34977: CALL_OW 250
34981: PPUSH
34982: LD_VAR 0 8
34986: PPUSH
34987: CALL_OW 251
34991: PPUSH
34992: LD_VAR 0 16
34996: PPUSH
34997: CALL_OW 441
35001: GO 34969
35003: POP
35004: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35005: LD_VAR 0 18
35009: PPUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 30
35015: PUSH
35016: LD_INT 32
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 30
35025: PUSH
35026: LD_INT 33
35028: PUSH
35029: EMPTY
35030: LIST
35031: LIST
35032: PUSH
35033: EMPTY
35034: LIST
35035: LIST
35036: LIST
35037: PPUSH
35038: CALL_OW 72
35042: IFFALSE 35130
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35044: LD_ADDR_VAR 0 8
35048: PUSH
35049: LD_VAR 0 18
35053: PPUSH
35054: LD_INT 2
35056: PUSH
35057: LD_INT 30
35059: PUSH
35060: LD_INT 32
35062: PUSH
35063: EMPTY
35064: LIST
35065: LIST
35066: PUSH
35067: LD_INT 30
35069: PUSH
35070: LD_INT 33
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: LIST
35081: PPUSH
35082: CALL_OW 72
35086: PUSH
35087: FOR_IN
35088: IFFALSE 35128
// begin if not GetBWeapon ( i ) then
35090: LD_VAR 0 8
35094: PPUSH
35095: CALL_OW 269
35099: NOT
35100: IFFALSE 35126
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35102: LD_VAR 0 8
35106: PPUSH
35107: LD_VAR 0 8
35111: PPUSH
35112: LD_VAR 0 2
35116: PPUSH
35117: CALL 36376 0 2
35121: PPUSH
35122: CALL_OW 431
// end ;
35126: GO 35087
35128: POP
35129: POP
// end ; for i = 1 to personel do
35130: LD_ADDR_VAR 0 8
35134: PUSH
35135: DOUBLE
35136: LD_INT 1
35138: DEC
35139: ST_TO_ADDR
35140: LD_VAR 0 6
35144: PUSH
35145: FOR_TO
35146: IFFALSE 36210
// begin if i > 4 then
35148: LD_VAR 0 8
35152: PUSH
35153: LD_INT 4
35155: GREATER
35156: IFFALSE 35160
// break ;
35158: GO 36210
// case i of 1 :
35160: LD_VAR 0 8
35164: PUSH
35165: LD_INT 1
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35253
35173: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35174: LD_ADDR_VAR 0 12
35178: PUSH
35179: LD_VAR 0 18
35183: PPUSH
35184: LD_INT 22
35186: PUSH
35187: LD_VAR 0 16
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 58
35198: PUSH
35199: EMPTY
35200: LIST
35201: PUSH
35202: LD_INT 2
35204: PUSH
35205: LD_INT 30
35207: PUSH
35208: LD_INT 32
35210: PUSH
35211: EMPTY
35212: LIST
35213: LIST
35214: PUSH
35215: LD_INT 30
35217: PUSH
35218: LD_INT 4
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: PUSH
35225: LD_INT 30
35227: PUSH
35228: LD_INT 5
35230: PUSH
35231: EMPTY
35232: LIST
35233: LIST
35234: PUSH
35235: EMPTY
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: PUSH
35241: EMPTY
35242: LIST
35243: LIST
35244: LIST
35245: PPUSH
35246: CALL_OW 72
35250: ST_TO_ADDR
35251: GO 35475
35253: LD_INT 2
35255: DOUBLE
35256: EQUAL
35257: IFTRUE 35261
35259: GO 35323
35261: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35262: LD_ADDR_VAR 0 12
35266: PUSH
35267: LD_VAR 0 18
35271: PPUSH
35272: LD_INT 22
35274: PUSH
35275: LD_VAR 0 16
35279: PUSH
35280: EMPTY
35281: LIST
35282: LIST
35283: PUSH
35284: LD_INT 2
35286: PUSH
35287: LD_INT 30
35289: PUSH
35290: LD_INT 0
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 30
35299: PUSH
35300: LD_INT 1
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: LIST
35311: PUSH
35312: EMPTY
35313: LIST
35314: LIST
35315: PPUSH
35316: CALL_OW 72
35320: ST_TO_ADDR
35321: GO 35475
35323: LD_INT 3
35325: DOUBLE
35326: EQUAL
35327: IFTRUE 35331
35329: GO 35393
35331: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35332: LD_ADDR_VAR 0 12
35336: PUSH
35337: LD_VAR 0 18
35341: PPUSH
35342: LD_INT 22
35344: PUSH
35345: LD_VAR 0 16
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 2
35356: PUSH
35357: LD_INT 30
35359: PUSH
35360: LD_INT 2
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 30
35369: PUSH
35370: LD_INT 3
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: LIST
35381: PUSH
35382: EMPTY
35383: LIST
35384: LIST
35385: PPUSH
35386: CALL_OW 72
35390: ST_TO_ADDR
35391: GO 35475
35393: LD_INT 4
35395: DOUBLE
35396: EQUAL
35397: IFTRUE 35401
35399: GO 35474
35401: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35402: LD_ADDR_VAR 0 12
35406: PUSH
35407: LD_VAR 0 18
35411: PPUSH
35412: LD_INT 22
35414: PUSH
35415: LD_VAR 0 16
35419: PUSH
35420: EMPTY
35421: LIST
35422: LIST
35423: PUSH
35424: LD_INT 2
35426: PUSH
35427: LD_INT 30
35429: PUSH
35430: LD_INT 6
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 30
35439: PUSH
35440: LD_INT 7
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 30
35449: PUSH
35450: LD_INT 8
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: PPUSH
35467: CALL_OW 72
35471: ST_TO_ADDR
35472: GO 35475
35474: POP
// if i = 1 then
35475: LD_VAR 0 8
35479: PUSH
35480: LD_INT 1
35482: EQUAL
35483: IFFALSE 35594
// begin tmp := [ ] ;
35485: LD_ADDR_VAR 0 19
35489: PUSH
35490: EMPTY
35491: ST_TO_ADDR
// for j in f do
35492: LD_ADDR_VAR 0 9
35496: PUSH
35497: LD_VAR 0 12
35501: PUSH
35502: FOR_IN
35503: IFFALSE 35576
// if GetBType ( j ) = b_bunker then
35505: LD_VAR 0 9
35509: PPUSH
35510: CALL_OW 266
35514: PUSH
35515: LD_INT 32
35517: EQUAL
35518: IFFALSE 35545
// tmp := Insert ( tmp , 1 , j ) else
35520: LD_ADDR_VAR 0 19
35524: PUSH
35525: LD_VAR 0 19
35529: PPUSH
35530: LD_INT 1
35532: PPUSH
35533: LD_VAR 0 9
35537: PPUSH
35538: CALL_OW 2
35542: ST_TO_ADDR
35543: GO 35574
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35545: LD_ADDR_VAR 0 19
35549: PUSH
35550: LD_VAR 0 19
35554: PPUSH
35555: LD_VAR 0 19
35559: PUSH
35560: LD_INT 1
35562: PLUS
35563: PPUSH
35564: LD_VAR 0 9
35568: PPUSH
35569: CALL_OW 2
35573: ST_TO_ADDR
35574: GO 35502
35576: POP
35577: POP
// if tmp then
35578: LD_VAR 0 19
35582: IFFALSE 35594
// f := tmp ;
35584: LD_ADDR_VAR 0 12
35588: PUSH
35589: LD_VAR 0 19
35593: ST_TO_ADDR
// end ; x := personel [ i ] ;
35594: LD_ADDR_VAR 0 13
35598: PUSH
35599: LD_VAR 0 6
35603: PUSH
35604: LD_VAR 0 8
35608: ARRAY
35609: ST_TO_ADDR
// if x = - 1 then
35610: LD_VAR 0 13
35614: PUSH
35615: LD_INT 1
35617: NEG
35618: EQUAL
35619: IFFALSE 35828
// begin for j in f do
35621: LD_ADDR_VAR 0 9
35625: PUSH
35626: LD_VAR 0 12
35630: PUSH
35631: FOR_IN
35632: IFFALSE 35824
// repeat InitHc ;
35634: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35638: LD_VAR 0 9
35642: PPUSH
35643: CALL_OW 266
35647: PUSH
35648: LD_INT 5
35650: EQUAL
35651: IFFALSE 35721
// begin if UnitsInside ( j ) < 3 then
35653: LD_VAR 0 9
35657: PPUSH
35658: CALL_OW 313
35662: PUSH
35663: LD_INT 3
35665: LESS
35666: IFFALSE 35702
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35668: LD_INT 0
35670: PPUSH
35671: LD_INT 5
35673: PUSH
35674: LD_INT 8
35676: PUSH
35677: LD_INT 9
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: PUSH
35685: LD_VAR 0 17
35689: ARRAY
35690: PPUSH
35691: LD_VAR 0 4
35695: PPUSH
35696: CALL_OW 380
35700: GO 35719
// PrepareHuman ( false , i , skill ) ;
35702: LD_INT 0
35704: PPUSH
35705: LD_VAR 0 8
35709: PPUSH
35710: LD_VAR 0 4
35714: PPUSH
35715: CALL_OW 380
// end else
35719: GO 35738
// PrepareHuman ( false , i , skill ) ;
35721: LD_INT 0
35723: PPUSH
35724: LD_VAR 0 8
35728: PPUSH
35729: LD_VAR 0 4
35733: PPUSH
35734: CALL_OW 380
// un := CreateHuman ;
35738: LD_ADDR_VAR 0 14
35742: PUSH
35743: CALL_OW 44
35747: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35748: LD_ADDR_VAR 0 7
35752: PUSH
35753: LD_VAR 0 7
35757: PPUSH
35758: LD_INT 1
35760: PPUSH
35761: LD_VAR 0 14
35765: PPUSH
35766: CALL_OW 2
35770: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35771: LD_VAR 0 14
35775: PPUSH
35776: LD_VAR 0 9
35780: PPUSH
35781: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35785: LD_VAR 0 9
35789: PPUSH
35790: CALL_OW 313
35794: PUSH
35795: LD_INT 6
35797: EQUAL
35798: PUSH
35799: LD_VAR 0 9
35803: PPUSH
35804: CALL_OW 266
35808: PUSH
35809: LD_INT 32
35811: PUSH
35812: LD_INT 31
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: IN
35819: OR
35820: IFFALSE 35634
35822: GO 35631
35824: POP
35825: POP
// end else
35826: GO 36208
// for j = 1 to x do
35828: LD_ADDR_VAR 0 9
35832: PUSH
35833: DOUBLE
35834: LD_INT 1
35836: DEC
35837: ST_TO_ADDR
35838: LD_VAR 0 13
35842: PUSH
35843: FOR_TO
35844: IFFALSE 36206
// begin InitHc ;
35846: CALL_OW 19
// if not f then
35850: LD_VAR 0 12
35854: NOT
35855: IFFALSE 35944
// begin PrepareHuman ( false , i , skill ) ;
35857: LD_INT 0
35859: PPUSH
35860: LD_VAR 0 8
35864: PPUSH
35865: LD_VAR 0 4
35869: PPUSH
35870: CALL_OW 380
// un := CreateHuman ;
35874: LD_ADDR_VAR 0 14
35878: PUSH
35879: CALL_OW 44
35883: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35884: LD_ADDR_VAR 0 7
35888: PUSH
35889: LD_VAR 0 7
35893: PPUSH
35894: LD_INT 1
35896: PPUSH
35897: LD_VAR 0 14
35901: PPUSH
35902: CALL_OW 2
35906: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
35907: LD_VAR 0 14
35911: PPUSH
35912: LD_VAR 0 1
35916: PPUSH
35917: CALL_OW 250
35921: PPUSH
35922: LD_VAR 0 1
35926: PPUSH
35927: CALL_OW 251
35931: PPUSH
35932: LD_INT 10
35934: PPUSH
35935: LD_INT 0
35937: PPUSH
35938: CALL_OW 50
// continue ;
35942: GO 35843
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
35944: LD_VAR 0 12
35948: PUSH
35949: LD_INT 1
35951: ARRAY
35952: PPUSH
35953: CALL_OW 313
35957: PUSH
35958: LD_VAR 0 12
35962: PUSH
35963: LD_INT 1
35965: ARRAY
35966: PPUSH
35967: CALL_OW 266
35971: PUSH
35972: LD_INT 32
35974: PUSH
35975: LD_INT 31
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: IN
35982: AND
35983: PUSH
35984: LD_VAR 0 12
35988: PUSH
35989: LD_INT 1
35991: ARRAY
35992: PPUSH
35993: CALL_OW 313
35997: PUSH
35998: LD_INT 6
36000: EQUAL
36001: OR
36002: IFFALSE 36022
// f := Delete ( f , 1 ) ;
36004: LD_ADDR_VAR 0 12
36008: PUSH
36009: LD_VAR 0 12
36013: PPUSH
36014: LD_INT 1
36016: PPUSH
36017: CALL_OW 3
36021: ST_TO_ADDR
// if not f then
36022: LD_VAR 0 12
36026: NOT
36027: IFFALSE 36045
// begin x := x + 2 ;
36029: LD_ADDR_VAR 0 13
36033: PUSH
36034: LD_VAR 0 13
36038: PUSH
36039: LD_INT 2
36041: PLUS
36042: ST_TO_ADDR
// continue ;
36043: GO 35843
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36045: LD_VAR 0 12
36049: PUSH
36050: LD_INT 1
36052: ARRAY
36053: PPUSH
36054: CALL_OW 266
36058: PUSH
36059: LD_INT 5
36061: EQUAL
36062: IFFALSE 36136
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36064: LD_VAR 0 12
36068: PUSH
36069: LD_INT 1
36071: ARRAY
36072: PPUSH
36073: CALL_OW 313
36077: PUSH
36078: LD_INT 3
36080: LESS
36081: IFFALSE 36117
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36083: LD_INT 0
36085: PPUSH
36086: LD_INT 5
36088: PUSH
36089: LD_INT 8
36091: PUSH
36092: LD_INT 9
36094: PUSH
36095: EMPTY
36096: LIST
36097: LIST
36098: LIST
36099: PUSH
36100: LD_VAR 0 17
36104: ARRAY
36105: PPUSH
36106: LD_VAR 0 4
36110: PPUSH
36111: CALL_OW 380
36115: GO 36134
// PrepareHuman ( false , i , skill ) ;
36117: LD_INT 0
36119: PPUSH
36120: LD_VAR 0 8
36124: PPUSH
36125: LD_VAR 0 4
36129: PPUSH
36130: CALL_OW 380
// end else
36134: GO 36153
// PrepareHuman ( false , i , skill ) ;
36136: LD_INT 0
36138: PPUSH
36139: LD_VAR 0 8
36143: PPUSH
36144: LD_VAR 0 4
36148: PPUSH
36149: CALL_OW 380
// un := CreateHuman ;
36153: LD_ADDR_VAR 0 14
36157: PUSH
36158: CALL_OW 44
36162: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36163: LD_ADDR_VAR 0 7
36167: PUSH
36168: LD_VAR 0 7
36172: PPUSH
36173: LD_INT 1
36175: PPUSH
36176: LD_VAR 0 14
36180: PPUSH
36181: CALL_OW 2
36185: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36186: LD_VAR 0 14
36190: PPUSH
36191: LD_VAR 0 12
36195: PUSH
36196: LD_INT 1
36198: ARRAY
36199: PPUSH
36200: CALL_OW 52
// end ;
36204: GO 35843
36206: POP
36207: POP
// end ;
36208: GO 35145
36210: POP
36211: POP
// result := result ^ buildings ;
36212: LD_ADDR_VAR 0 7
36216: PUSH
36217: LD_VAR 0 7
36221: PUSH
36222: LD_VAR 0 18
36226: ADD
36227: ST_TO_ADDR
// end else
36228: GO 36371
// begin for i = 1 to personel do
36230: LD_ADDR_VAR 0 8
36234: PUSH
36235: DOUBLE
36236: LD_INT 1
36238: DEC
36239: ST_TO_ADDR
36240: LD_VAR 0 6
36244: PUSH
36245: FOR_TO
36246: IFFALSE 36369
// begin if i > 4 then
36248: LD_VAR 0 8
36252: PUSH
36253: LD_INT 4
36255: GREATER
36256: IFFALSE 36260
// break ;
36258: GO 36369
// x := personel [ i ] ;
36260: LD_ADDR_VAR 0 13
36264: PUSH
36265: LD_VAR 0 6
36269: PUSH
36270: LD_VAR 0 8
36274: ARRAY
36275: ST_TO_ADDR
// if x = - 1 then
36276: LD_VAR 0 13
36280: PUSH
36281: LD_INT 1
36283: NEG
36284: EQUAL
36285: IFFALSE 36289
// continue ;
36287: GO 36245
// PrepareHuman ( false , i , skill ) ;
36289: LD_INT 0
36291: PPUSH
36292: LD_VAR 0 8
36296: PPUSH
36297: LD_VAR 0 4
36301: PPUSH
36302: CALL_OW 380
// un := CreateHuman ;
36306: LD_ADDR_VAR 0 14
36310: PUSH
36311: CALL_OW 44
36315: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36316: LD_VAR 0 14
36320: PPUSH
36321: LD_VAR 0 1
36325: PPUSH
36326: CALL_OW 250
36330: PPUSH
36331: LD_VAR 0 1
36335: PPUSH
36336: CALL_OW 251
36340: PPUSH
36341: LD_INT 10
36343: PPUSH
36344: LD_INT 0
36346: PPUSH
36347: CALL_OW 50
// result := result ^ un ;
36351: LD_ADDR_VAR 0 7
36355: PUSH
36356: LD_VAR 0 7
36360: PUSH
36361: LD_VAR 0 14
36365: ADD
36366: ST_TO_ADDR
// end ;
36367: GO 36245
36369: POP
36370: POP
// end ; end ;
36371: LD_VAR 0 7
36375: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36376: LD_INT 0
36378: PPUSH
36379: PPUSH
36380: PPUSH
36381: PPUSH
36382: PPUSH
36383: PPUSH
36384: PPUSH
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
36393: PPUSH
// result := false ;
36394: LD_ADDR_VAR 0 3
36398: PUSH
36399: LD_INT 0
36401: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36402: LD_VAR 0 1
36406: NOT
36407: PUSH
36408: LD_VAR 0 1
36412: PPUSH
36413: CALL_OW 266
36417: PUSH
36418: LD_INT 32
36420: PUSH
36421: LD_INT 33
36423: PUSH
36424: EMPTY
36425: LIST
36426: LIST
36427: IN
36428: NOT
36429: OR
36430: IFFALSE 36434
// exit ;
36432: GO 37543
// nat := GetNation ( tower ) ;
36434: LD_ADDR_VAR 0 12
36438: PUSH
36439: LD_VAR 0 1
36443: PPUSH
36444: CALL_OW 248
36448: ST_TO_ADDR
// side := GetSide ( tower ) ;
36449: LD_ADDR_VAR 0 16
36453: PUSH
36454: LD_VAR 0 1
36458: PPUSH
36459: CALL_OW 255
36463: ST_TO_ADDR
// x := GetX ( tower ) ;
36464: LD_ADDR_VAR 0 10
36468: PUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: CALL_OW 250
36478: ST_TO_ADDR
// y := GetY ( tower ) ;
36479: LD_ADDR_VAR 0 11
36483: PUSH
36484: LD_VAR 0 1
36488: PPUSH
36489: CALL_OW 251
36493: ST_TO_ADDR
// if not x or not y then
36494: LD_VAR 0 10
36498: NOT
36499: PUSH
36500: LD_VAR 0 11
36504: NOT
36505: OR
36506: IFFALSE 36510
// exit ;
36508: GO 37543
// weapon := 0 ;
36510: LD_ADDR_VAR 0 18
36514: PUSH
36515: LD_INT 0
36517: ST_TO_ADDR
// fac_list := [ ] ;
36518: LD_ADDR_VAR 0 17
36522: PUSH
36523: EMPTY
36524: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
36525: LD_ADDR_VAR 0 6
36529: PUSH
36530: LD_VAR 0 1
36534: PPUSH
36535: CALL_OW 274
36539: PPUSH
36540: LD_VAR 0 2
36544: PPUSH
36545: LD_INT 0
36547: PPUSH
36548: CALL 34114 0 3
36552: PPUSH
36553: LD_INT 30
36555: PUSH
36556: LD_INT 3
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: PPUSH
36563: CALL_OW 72
36567: ST_TO_ADDR
// if not factories then
36568: LD_VAR 0 6
36572: NOT
36573: IFFALSE 36577
// exit ;
36575: GO 37543
// for i in factories do
36577: LD_ADDR_VAR 0 8
36581: PUSH
36582: LD_VAR 0 6
36586: PUSH
36587: FOR_IN
36588: IFFALSE 36613
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36590: LD_ADDR_VAR 0 17
36594: PUSH
36595: LD_VAR 0 17
36599: PUSH
36600: LD_VAR 0 8
36604: PPUSH
36605: CALL_OW 478
36609: UNION
36610: ST_TO_ADDR
36611: GO 36587
36613: POP
36614: POP
// if not fac_list then
36615: LD_VAR 0 17
36619: NOT
36620: IFFALSE 36624
// exit ;
36622: GO 37543
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36624: LD_ADDR_VAR 0 5
36628: PUSH
36629: LD_INT 4
36631: PUSH
36632: LD_INT 5
36634: PUSH
36635: LD_INT 9
36637: PUSH
36638: LD_INT 10
36640: PUSH
36641: LD_INT 6
36643: PUSH
36644: LD_INT 7
36646: PUSH
36647: LD_INT 11
36649: PUSH
36650: EMPTY
36651: LIST
36652: LIST
36653: LIST
36654: LIST
36655: LIST
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 27
36661: PUSH
36662: LD_INT 28
36664: PUSH
36665: LD_INT 26
36667: PUSH
36668: LD_INT 30
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 43
36679: PUSH
36680: LD_INT 44
36682: PUSH
36683: LD_INT 46
36685: PUSH
36686: LD_INT 45
36688: PUSH
36689: LD_INT 47
36691: PUSH
36692: LD_INT 49
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: PUSH
36703: EMPTY
36704: LIST
36705: LIST
36706: LIST
36707: PUSH
36708: LD_VAR 0 12
36712: ARRAY
36713: ST_TO_ADDR
// list := list isect fac_list ;
36714: LD_ADDR_VAR 0 5
36718: PUSH
36719: LD_VAR 0 5
36723: PUSH
36724: LD_VAR 0 17
36728: ISECT
36729: ST_TO_ADDR
// if not list then
36730: LD_VAR 0 5
36734: NOT
36735: IFFALSE 36739
// exit ;
36737: GO 37543
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36739: LD_VAR 0 12
36743: PUSH
36744: LD_INT 3
36746: EQUAL
36747: PUSH
36748: LD_INT 49
36750: PUSH
36751: LD_VAR 0 5
36755: IN
36756: AND
36757: PUSH
36758: LD_INT 31
36760: PPUSH
36761: LD_VAR 0 16
36765: PPUSH
36766: CALL_OW 321
36770: PUSH
36771: LD_INT 2
36773: EQUAL
36774: AND
36775: IFFALSE 36835
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36777: LD_INT 22
36779: PUSH
36780: LD_VAR 0 16
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 35
36791: PUSH
36792: LD_INT 49
36794: PUSH
36795: EMPTY
36796: LIST
36797: LIST
36798: PUSH
36799: LD_INT 91
36801: PUSH
36802: LD_VAR 0 1
36806: PUSH
36807: LD_INT 10
36809: PUSH
36810: EMPTY
36811: LIST
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: PPUSH
36820: CALL_OW 69
36824: NOT
36825: IFFALSE 36835
// weapon := ru_time_lapser ;
36827: LD_ADDR_VAR 0 18
36831: PUSH
36832: LD_INT 49
36834: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
36835: LD_VAR 0 12
36839: PUSH
36840: LD_INT 1
36842: PUSH
36843: LD_INT 2
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: IN
36850: PUSH
36851: LD_INT 11
36853: PUSH
36854: LD_VAR 0 5
36858: IN
36859: PUSH
36860: LD_INT 30
36862: PUSH
36863: LD_VAR 0 5
36867: IN
36868: OR
36869: AND
36870: PUSH
36871: LD_INT 6
36873: PPUSH
36874: LD_VAR 0 16
36878: PPUSH
36879: CALL_OW 321
36883: PUSH
36884: LD_INT 2
36886: EQUAL
36887: AND
36888: IFFALSE 37053
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
36890: LD_INT 22
36892: PUSH
36893: LD_VAR 0 16
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: PUSH
36902: LD_INT 2
36904: PUSH
36905: LD_INT 35
36907: PUSH
36908: LD_INT 11
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 35
36917: PUSH
36918: LD_INT 30
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 91
36932: PUSH
36933: LD_VAR 0 1
36937: PUSH
36938: LD_INT 18
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: LIST
36945: PUSH
36946: EMPTY
36947: LIST
36948: LIST
36949: LIST
36950: PPUSH
36951: CALL_OW 69
36955: NOT
36956: PUSH
36957: LD_INT 22
36959: PUSH
36960: LD_VAR 0 16
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 2
36971: PUSH
36972: LD_INT 30
36974: PUSH
36975: LD_INT 32
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 30
36984: PUSH
36985: LD_INT 33
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 91
36999: PUSH
37000: LD_VAR 0 1
37004: PUSH
37005: LD_INT 12
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: LIST
37017: PUSH
37018: EMPTY
37019: LIST
37020: PPUSH
37021: CALL_OW 69
37025: PUSH
37026: LD_INT 2
37028: GREATER
37029: AND
37030: IFFALSE 37053
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37032: LD_ADDR_VAR 0 18
37036: PUSH
37037: LD_INT 11
37039: PUSH
37040: LD_INT 30
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_VAR 0 12
37051: ARRAY
37052: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37053: LD_VAR 0 18
37057: NOT
37058: PUSH
37059: LD_INT 40
37061: PPUSH
37062: LD_VAR 0 16
37066: PPUSH
37067: CALL_OW 321
37071: PUSH
37072: LD_INT 2
37074: EQUAL
37075: AND
37076: PUSH
37077: LD_INT 7
37079: PUSH
37080: LD_VAR 0 5
37084: IN
37085: PUSH
37086: LD_INT 28
37088: PUSH
37089: LD_VAR 0 5
37093: IN
37094: OR
37095: PUSH
37096: LD_INT 45
37098: PUSH
37099: LD_VAR 0 5
37103: IN
37104: OR
37105: AND
37106: IFFALSE 37360
// begin hex := GetHexInfo ( x , y ) ;
37108: LD_ADDR_VAR 0 4
37112: PUSH
37113: LD_VAR 0 10
37117: PPUSH
37118: LD_VAR 0 11
37122: PPUSH
37123: CALL_OW 546
37127: ST_TO_ADDR
// if hex [ 1 ] then
37128: LD_VAR 0 4
37132: PUSH
37133: LD_INT 1
37135: ARRAY
37136: IFFALSE 37140
// exit ;
37138: GO 37543
// height := hex [ 2 ] ;
37140: LD_ADDR_VAR 0 15
37144: PUSH
37145: LD_VAR 0 4
37149: PUSH
37150: LD_INT 2
37152: ARRAY
37153: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37154: LD_ADDR_VAR 0 14
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 2
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: LD_INT 5
37170: PUSH
37171: EMPTY
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: ST_TO_ADDR
// for i in tmp do
37177: LD_ADDR_VAR 0 8
37181: PUSH
37182: LD_VAR 0 14
37186: PUSH
37187: FOR_IN
37188: IFFALSE 37358
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37190: LD_ADDR_VAR 0 9
37194: PUSH
37195: LD_VAR 0 10
37199: PPUSH
37200: LD_VAR 0 8
37204: PPUSH
37205: LD_INT 5
37207: PPUSH
37208: CALL_OW 272
37212: PUSH
37213: LD_VAR 0 11
37217: PPUSH
37218: LD_VAR 0 8
37222: PPUSH
37223: LD_INT 5
37225: PPUSH
37226: CALL_OW 273
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37235: LD_VAR 0 9
37239: PUSH
37240: LD_INT 1
37242: ARRAY
37243: PPUSH
37244: LD_VAR 0 9
37248: PUSH
37249: LD_INT 2
37251: ARRAY
37252: PPUSH
37253: CALL_OW 488
37257: IFFALSE 37356
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37259: LD_ADDR_VAR 0 4
37263: PUSH
37264: LD_VAR 0 9
37268: PUSH
37269: LD_INT 1
37271: ARRAY
37272: PPUSH
37273: LD_VAR 0 9
37277: PUSH
37278: LD_INT 2
37280: ARRAY
37281: PPUSH
37282: CALL_OW 546
37286: ST_TO_ADDR
// if hex [ 1 ] then
37287: LD_VAR 0 4
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: IFFALSE 37299
// continue ;
37297: GO 37187
// h := hex [ 2 ] ;
37299: LD_ADDR_VAR 0 13
37303: PUSH
37304: LD_VAR 0 4
37308: PUSH
37309: LD_INT 2
37311: ARRAY
37312: ST_TO_ADDR
// if h + 7 < height then
37313: LD_VAR 0 13
37317: PUSH
37318: LD_INT 7
37320: PLUS
37321: PUSH
37322: LD_VAR 0 15
37326: LESS
37327: IFFALSE 37356
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37329: LD_ADDR_VAR 0 18
37333: PUSH
37334: LD_INT 7
37336: PUSH
37337: LD_INT 28
37339: PUSH
37340: LD_INT 45
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: LIST
37347: PUSH
37348: LD_VAR 0 12
37352: ARRAY
37353: ST_TO_ADDR
// break ;
37354: GO 37358
// end ; end ; end ;
37356: GO 37187
37358: POP
37359: POP
// end ; if not weapon then
37360: LD_VAR 0 18
37364: NOT
37365: IFFALSE 37425
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37367: LD_ADDR_VAR 0 5
37371: PUSH
37372: LD_VAR 0 5
37376: PUSH
37377: LD_INT 11
37379: PUSH
37380: LD_INT 30
37382: PUSH
37383: LD_INT 49
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: DIFF
37391: ST_TO_ADDR
// if not list then
37392: LD_VAR 0 5
37396: NOT
37397: IFFALSE 37401
// exit ;
37399: GO 37543
// weapon := list [ rand ( 1 , list ) ] ;
37401: LD_ADDR_VAR 0 18
37405: PUSH
37406: LD_VAR 0 5
37410: PUSH
37411: LD_INT 1
37413: PPUSH
37414: LD_VAR 0 5
37418: PPUSH
37419: CALL_OW 12
37423: ARRAY
37424: ST_TO_ADDR
// end ; if weapon then
37425: LD_VAR 0 18
37429: IFFALSE 37543
// begin tmp := CostOfWeapon ( weapon ) ;
37431: LD_ADDR_VAR 0 14
37435: PUSH
37436: LD_VAR 0 18
37440: PPUSH
37441: CALL_OW 451
37445: ST_TO_ADDR
// j := GetBase ( tower ) ;
37446: LD_ADDR_VAR 0 9
37450: PUSH
37451: LD_VAR 0 1
37455: PPUSH
37456: CALL_OW 274
37460: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37461: LD_VAR 0 9
37465: PPUSH
37466: LD_INT 1
37468: PPUSH
37469: CALL_OW 275
37473: PUSH
37474: LD_VAR 0 14
37478: PUSH
37479: LD_INT 1
37481: ARRAY
37482: GREATEREQUAL
37483: PUSH
37484: LD_VAR 0 9
37488: PPUSH
37489: LD_INT 2
37491: PPUSH
37492: CALL_OW 275
37496: PUSH
37497: LD_VAR 0 14
37501: PUSH
37502: LD_INT 2
37504: ARRAY
37505: GREATEREQUAL
37506: AND
37507: PUSH
37508: LD_VAR 0 9
37512: PPUSH
37513: LD_INT 3
37515: PPUSH
37516: CALL_OW 275
37520: PUSH
37521: LD_VAR 0 14
37525: PUSH
37526: LD_INT 3
37528: ARRAY
37529: GREATEREQUAL
37530: AND
37531: IFFALSE 37543
// result := weapon ;
37533: LD_ADDR_VAR 0 3
37537: PUSH
37538: LD_VAR 0 18
37542: ST_TO_ADDR
// end ; end ;
37543: LD_VAR 0 3
37547: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
// result := true ;
37552: LD_ADDR_VAR 0 3
37556: PUSH
37557: LD_INT 1
37559: ST_TO_ADDR
// if array1 = array2 then
37560: LD_VAR 0 1
37564: PUSH
37565: LD_VAR 0 2
37569: EQUAL
37570: IFFALSE 37630
// begin for i = 1 to array1 do
37572: LD_ADDR_VAR 0 4
37576: PUSH
37577: DOUBLE
37578: LD_INT 1
37580: DEC
37581: ST_TO_ADDR
37582: LD_VAR 0 1
37586: PUSH
37587: FOR_TO
37588: IFFALSE 37626
// if array1 [ i ] <> array2 [ i ] then
37590: LD_VAR 0 1
37594: PUSH
37595: LD_VAR 0 4
37599: ARRAY
37600: PUSH
37601: LD_VAR 0 2
37605: PUSH
37606: LD_VAR 0 4
37610: ARRAY
37611: NONEQUAL
37612: IFFALSE 37624
// begin result := false ;
37614: LD_ADDR_VAR 0 3
37618: PUSH
37619: LD_INT 0
37621: ST_TO_ADDR
// break ;
37622: GO 37626
// end ;
37624: GO 37587
37626: POP
37627: POP
// end else
37628: GO 37638
// result := false ;
37630: LD_ADDR_VAR 0 3
37634: PUSH
37635: LD_INT 0
37637: ST_TO_ADDR
// end ;
37638: LD_VAR 0 3
37642: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
37643: LD_INT 0
37645: PPUSH
37646: PPUSH
// if not array1 or not array2 then
37647: LD_VAR 0 1
37651: NOT
37652: PUSH
37653: LD_VAR 0 2
37657: NOT
37658: OR
37659: IFFALSE 37663
// exit ;
37661: GO 37727
// result := true ;
37663: LD_ADDR_VAR 0 3
37667: PUSH
37668: LD_INT 1
37670: ST_TO_ADDR
// for i = 1 to array1 do
37671: LD_ADDR_VAR 0 4
37675: PUSH
37676: DOUBLE
37677: LD_INT 1
37679: DEC
37680: ST_TO_ADDR
37681: LD_VAR 0 1
37685: PUSH
37686: FOR_TO
37687: IFFALSE 37725
// if array1 [ i ] <> array2 [ i ] then
37689: LD_VAR 0 1
37693: PUSH
37694: LD_VAR 0 4
37698: ARRAY
37699: PUSH
37700: LD_VAR 0 2
37704: PUSH
37705: LD_VAR 0 4
37709: ARRAY
37710: NONEQUAL
37711: IFFALSE 37723
// begin result := false ;
37713: LD_ADDR_VAR 0 3
37717: PUSH
37718: LD_INT 0
37720: ST_TO_ADDR
// break ;
37721: GO 37725
// end ;
37723: GO 37686
37725: POP
37726: POP
// end ;
37727: LD_VAR 0 3
37731: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37732: LD_INT 0
37734: PPUSH
37735: PPUSH
37736: PPUSH
// pom := GetBase ( fac ) ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 274
37751: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37752: LD_ADDR_VAR 0 4
37756: PUSH
37757: LD_VAR 0 2
37761: PUSH
37762: LD_INT 1
37764: ARRAY
37765: PPUSH
37766: LD_VAR 0 2
37770: PUSH
37771: LD_INT 2
37773: ARRAY
37774: PPUSH
37775: LD_VAR 0 2
37779: PUSH
37780: LD_INT 3
37782: ARRAY
37783: PPUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_INT 4
37791: ARRAY
37792: PPUSH
37793: CALL_OW 449
37797: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37798: LD_ADDR_VAR 0 3
37802: PUSH
37803: LD_VAR 0 5
37807: PPUSH
37808: LD_INT 1
37810: PPUSH
37811: CALL_OW 275
37815: PUSH
37816: LD_VAR 0 4
37820: PUSH
37821: LD_INT 1
37823: ARRAY
37824: GREATEREQUAL
37825: PUSH
37826: LD_VAR 0 5
37830: PPUSH
37831: LD_INT 2
37833: PPUSH
37834: CALL_OW 275
37838: PUSH
37839: LD_VAR 0 4
37843: PUSH
37844: LD_INT 2
37846: ARRAY
37847: GREATEREQUAL
37848: AND
37849: PUSH
37850: LD_VAR 0 5
37854: PPUSH
37855: LD_INT 3
37857: PPUSH
37858: CALL_OW 275
37862: PUSH
37863: LD_VAR 0 4
37867: PUSH
37868: LD_INT 3
37870: ARRAY
37871: GREATEREQUAL
37872: AND
37873: ST_TO_ADDR
// end ;
37874: LD_VAR 0 3
37878: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37879: LD_INT 0
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
// pom := GetBase ( building ) ;
37885: LD_ADDR_VAR 0 3
37889: PUSH
37890: LD_VAR 0 1
37894: PPUSH
37895: CALL_OW 274
37899: ST_TO_ADDR
// if not pom then
37900: LD_VAR 0 3
37904: NOT
37905: IFFALSE 37909
// exit ;
37907: GO 38079
// btype := GetBType ( building ) ;
37909: LD_ADDR_VAR 0 5
37913: PUSH
37914: LD_VAR 0 1
37918: PPUSH
37919: CALL_OW 266
37923: ST_TO_ADDR
// if btype = b_armoury then
37924: LD_VAR 0 5
37928: PUSH
37929: LD_INT 4
37931: EQUAL
37932: IFFALSE 37942
// btype := b_barracks ;
37934: LD_ADDR_VAR 0 5
37938: PUSH
37939: LD_INT 5
37941: ST_TO_ADDR
// if btype = b_depot then
37942: LD_VAR 0 5
37946: PUSH
37947: LD_INT 0
37949: EQUAL
37950: IFFALSE 37960
// btype := b_warehouse ;
37952: LD_ADDR_VAR 0 5
37956: PUSH
37957: LD_INT 1
37959: ST_TO_ADDR
// if btype = b_workshop then
37960: LD_VAR 0 5
37964: PUSH
37965: LD_INT 2
37967: EQUAL
37968: IFFALSE 37978
// btype := b_factory ;
37970: LD_ADDR_VAR 0 5
37974: PUSH
37975: LD_INT 3
37977: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
37978: LD_ADDR_VAR 0 4
37982: PUSH
37983: LD_VAR 0 5
37987: PPUSH
37988: LD_VAR 0 1
37992: PPUSH
37993: CALL_OW 248
37997: PPUSH
37998: CALL_OW 450
38002: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38003: LD_ADDR_VAR 0 2
38007: PUSH
38008: LD_VAR 0 3
38012: PPUSH
38013: LD_INT 1
38015: PPUSH
38016: CALL_OW 275
38020: PUSH
38021: LD_VAR 0 4
38025: PUSH
38026: LD_INT 1
38028: ARRAY
38029: GREATEREQUAL
38030: PUSH
38031: LD_VAR 0 3
38035: PPUSH
38036: LD_INT 2
38038: PPUSH
38039: CALL_OW 275
38043: PUSH
38044: LD_VAR 0 4
38048: PUSH
38049: LD_INT 2
38051: ARRAY
38052: GREATEREQUAL
38053: AND
38054: PUSH
38055: LD_VAR 0 3
38059: PPUSH
38060: LD_INT 3
38062: PPUSH
38063: CALL_OW 275
38067: PUSH
38068: LD_VAR 0 4
38072: PUSH
38073: LD_INT 3
38075: ARRAY
38076: GREATEREQUAL
38077: AND
38078: ST_TO_ADDR
// end ;
38079: LD_VAR 0 2
38083: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38084: LD_INT 0
38086: PPUSH
38087: PPUSH
38088: PPUSH
// pom := GetBase ( building ) ;
38089: LD_ADDR_VAR 0 4
38093: PUSH
38094: LD_VAR 0 1
38098: PPUSH
38099: CALL_OW 274
38103: ST_TO_ADDR
// if not pom then
38104: LD_VAR 0 4
38108: NOT
38109: IFFALSE 38113
// exit ;
38111: GO 38214
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38113: LD_ADDR_VAR 0 5
38117: PUSH
38118: LD_VAR 0 2
38122: PPUSH
38123: LD_VAR 0 1
38127: PPUSH
38128: CALL_OW 248
38132: PPUSH
38133: CALL_OW 450
38137: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38138: LD_ADDR_VAR 0 3
38142: PUSH
38143: LD_VAR 0 4
38147: PPUSH
38148: LD_INT 1
38150: PPUSH
38151: CALL_OW 275
38155: PUSH
38156: LD_VAR 0 5
38160: PUSH
38161: LD_INT 1
38163: ARRAY
38164: GREATEREQUAL
38165: PUSH
38166: LD_VAR 0 4
38170: PPUSH
38171: LD_INT 2
38173: PPUSH
38174: CALL_OW 275
38178: PUSH
38179: LD_VAR 0 5
38183: PUSH
38184: LD_INT 2
38186: ARRAY
38187: GREATEREQUAL
38188: AND
38189: PUSH
38190: LD_VAR 0 4
38194: PPUSH
38195: LD_INT 3
38197: PPUSH
38198: CALL_OW 275
38202: PUSH
38203: LD_VAR 0 5
38207: PUSH
38208: LD_INT 3
38210: ARRAY
38211: GREATEREQUAL
38212: AND
38213: ST_TO_ADDR
// end ;
38214: LD_VAR 0 3
38218: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
38219: LD_INT 0
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
// result := false ;
38232: LD_ADDR_VAR 0 8
38236: PUSH
38237: LD_INT 0
38239: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
38240: LD_VAR 0 5
38244: NOT
38245: PUSH
38246: LD_VAR 0 1
38250: NOT
38251: OR
38252: PUSH
38253: LD_VAR 0 2
38257: NOT
38258: OR
38259: PUSH
38260: LD_VAR 0 3
38264: NOT
38265: OR
38266: IFFALSE 38270
// exit ;
38268: GO 39084
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
38270: LD_ADDR_VAR 0 14
38274: PUSH
38275: LD_VAR 0 1
38279: PPUSH
38280: LD_VAR 0 2
38284: PPUSH
38285: LD_VAR 0 3
38289: PPUSH
38290: LD_VAR 0 4
38294: PPUSH
38295: LD_VAR 0 5
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PPUSH
38304: CALL_OW 248
38308: PPUSH
38309: LD_INT 0
38311: PPUSH
38312: CALL 40321 0 6
38316: ST_TO_ADDR
// if not hexes then
38317: LD_VAR 0 14
38321: NOT
38322: IFFALSE 38326
// exit ;
38324: GO 39084
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38326: LD_ADDR_VAR 0 17
38330: PUSH
38331: LD_VAR 0 5
38335: PPUSH
38336: LD_INT 22
38338: PUSH
38339: LD_VAR 0 13
38343: PPUSH
38344: CALL_OW 255
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 30
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 30
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: LIST
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PPUSH
38385: CALL_OW 72
38389: ST_TO_ADDR
// for i = 1 to hexes do
38390: LD_ADDR_VAR 0 9
38394: PUSH
38395: DOUBLE
38396: LD_INT 1
38398: DEC
38399: ST_TO_ADDR
38400: LD_VAR 0 14
38404: PUSH
38405: FOR_TO
38406: IFFALSE 39082
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38408: LD_ADDR_VAR 0 13
38412: PUSH
38413: LD_VAR 0 14
38417: PUSH
38418: LD_VAR 0 9
38422: ARRAY
38423: PUSH
38424: LD_INT 1
38426: ARRAY
38427: PPUSH
38428: LD_VAR 0 14
38432: PUSH
38433: LD_VAR 0 9
38437: ARRAY
38438: PUSH
38439: LD_INT 2
38441: ARRAY
38442: PPUSH
38443: CALL_OW 428
38447: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38448: LD_VAR 0 14
38452: PUSH
38453: LD_VAR 0 9
38457: ARRAY
38458: PUSH
38459: LD_INT 1
38461: ARRAY
38462: PPUSH
38463: LD_VAR 0 14
38467: PUSH
38468: LD_VAR 0 9
38472: ARRAY
38473: PUSH
38474: LD_INT 2
38476: ARRAY
38477: PPUSH
38478: CALL_OW 351
38482: PUSH
38483: LD_VAR 0 14
38487: PUSH
38488: LD_VAR 0 9
38492: ARRAY
38493: PUSH
38494: LD_INT 1
38496: ARRAY
38497: PPUSH
38498: LD_VAR 0 14
38502: PUSH
38503: LD_VAR 0 9
38507: ARRAY
38508: PUSH
38509: LD_INT 2
38511: ARRAY
38512: PPUSH
38513: CALL_OW 488
38517: NOT
38518: OR
38519: PUSH
38520: LD_VAR 0 13
38524: PPUSH
38525: CALL_OW 247
38529: PUSH
38530: LD_INT 3
38532: EQUAL
38533: OR
38534: IFFALSE 38540
// exit ;
38536: POP
38537: POP
38538: GO 39084
// if not tmp then
38540: LD_VAR 0 13
38544: NOT
38545: IFFALSE 38549
// continue ;
38547: GO 38405
// result := true ;
38549: LD_ADDR_VAR 0 8
38553: PUSH
38554: LD_INT 1
38556: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
38557: LD_VAR 0 6
38561: PUSH
38562: LD_VAR 0 13
38566: PPUSH
38567: CALL_OW 247
38571: PUSH
38572: LD_INT 2
38574: EQUAL
38575: AND
38576: PUSH
38577: LD_VAR 0 13
38581: PPUSH
38582: CALL_OW 263
38586: PUSH
38587: LD_INT 1
38589: EQUAL
38590: AND
38591: IFFALSE 38755
// begin if IsDrivenBy ( tmp ) then
38593: LD_VAR 0 13
38597: PPUSH
38598: CALL_OW 311
38602: IFFALSE 38606
// continue ;
38604: GO 38405
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
38606: LD_VAR 0 6
38610: PPUSH
38611: LD_INT 3
38613: PUSH
38614: LD_INT 60
38616: PUSH
38617: EMPTY
38618: LIST
38619: PUSH
38620: EMPTY
38621: LIST
38622: LIST
38623: PUSH
38624: LD_INT 3
38626: PUSH
38627: LD_INT 55
38629: PUSH
38630: EMPTY
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PPUSH
38641: CALL_OW 72
38645: IFFALSE 38753
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
38647: LD_ADDR_VAR 0 18
38651: PUSH
38652: LD_VAR 0 6
38656: PPUSH
38657: LD_INT 3
38659: PUSH
38660: LD_INT 60
38662: PUSH
38663: EMPTY
38664: LIST
38665: PUSH
38666: EMPTY
38667: LIST
38668: LIST
38669: PUSH
38670: LD_INT 3
38672: PUSH
38673: LD_INT 55
38675: PUSH
38676: EMPTY
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: PPUSH
38687: CALL_OW 72
38691: PUSH
38692: LD_INT 1
38694: ARRAY
38695: ST_TO_ADDR
// if IsInUnit ( driver ) then
38696: LD_VAR 0 18
38700: PPUSH
38701: CALL_OW 310
38705: IFFALSE 38716
// ComExit ( driver ) ;
38707: LD_VAR 0 18
38711: PPUSH
38712: CALL 63449 0 1
// AddComEnterUnit ( driver , tmp ) ;
38716: LD_VAR 0 18
38720: PPUSH
38721: LD_VAR 0 13
38725: PPUSH
38726: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
38730: LD_VAR 0 18
38734: PPUSH
38735: LD_VAR 0 7
38739: PPUSH
38740: CALL_OW 173
// AddComExitVehicle ( driver ) ;
38744: LD_VAR 0 18
38748: PPUSH
38749: CALL_OW 181
// end ; continue ;
38753: GO 38405
// end ; if not cleaners or not tmp in cleaners then
38755: LD_VAR 0 6
38759: NOT
38760: PUSH
38761: LD_VAR 0 13
38765: PUSH
38766: LD_VAR 0 6
38770: IN
38771: NOT
38772: OR
38773: IFFALSE 39080
// begin if dep then
38775: LD_VAR 0 17
38779: IFFALSE 38915
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38781: LD_ADDR_VAR 0 16
38785: PUSH
38786: LD_VAR 0 17
38790: PUSH
38791: LD_INT 1
38793: ARRAY
38794: PPUSH
38795: CALL_OW 250
38799: PPUSH
38800: LD_VAR 0 17
38804: PUSH
38805: LD_INT 1
38807: ARRAY
38808: PPUSH
38809: CALL_OW 254
38813: PPUSH
38814: LD_INT 5
38816: PPUSH
38817: CALL_OW 272
38821: PUSH
38822: LD_VAR 0 17
38826: PUSH
38827: LD_INT 1
38829: ARRAY
38830: PPUSH
38831: CALL_OW 251
38835: PPUSH
38836: LD_VAR 0 17
38840: PUSH
38841: LD_INT 1
38843: ARRAY
38844: PPUSH
38845: CALL_OW 254
38849: PPUSH
38850: LD_INT 5
38852: PPUSH
38853: CALL_OW 273
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38862: LD_VAR 0 16
38866: PUSH
38867: LD_INT 1
38869: ARRAY
38870: PPUSH
38871: LD_VAR 0 16
38875: PUSH
38876: LD_INT 2
38878: ARRAY
38879: PPUSH
38880: CALL_OW 488
38884: IFFALSE 38915
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38886: LD_VAR 0 13
38890: PPUSH
38891: LD_VAR 0 16
38895: PUSH
38896: LD_INT 1
38898: ARRAY
38899: PPUSH
38900: LD_VAR 0 16
38904: PUSH
38905: LD_INT 2
38907: ARRAY
38908: PPUSH
38909: CALL_OW 111
// continue ;
38913: GO 38405
// end ; end ; r := GetDir ( tmp ) ;
38915: LD_ADDR_VAR 0 15
38919: PUSH
38920: LD_VAR 0 13
38924: PPUSH
38925: CALL_OW 254
38929: ST_TO_ADDR
// if r = 5 then
38930: LD_VAR 0 15
38934: PUSH
38935: LD_INT 5
38937: EQUAL
38938: IFFALSE 38948
// r := 0 ;
38940: LD_ADDR_VAR 0 15
38944: PUSH
38945: LD_INT 0
38947: ST_TO_ADDR
// for j = r to 5 do
38948: LD_ADDR_VAR 0 10
38952: PUSH
38953: DOUBLE
38954: LD_VAR 0 15
38958: DEC
38959: ST_TO_ADDR
38960: LD_INT 5
38962: PUSH
38963: FOR_TO
38964: IFFALSE 39078
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38966: LD_ADDR_VAR 0 11
38970: PUSH
38971: LD_VAR 0 13
38975: PPUSH
38976: CALL_OW 250
38980: PPUSH
38981: LD_VAR 0 10
38985: PPUSH
38986: LD_INT 2
38988: PPUSH
38989: CALL_OW 272
38993: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38994: LD_ADDR_VAR 0 12
38998: PUSH
38999: LD_VAR 0 13
39003: PPUSH
39004: CALL_OW 251
39008: PPUSH
39009: LD_VAR 0 10
39013: PPUSH
39014: LD_INT 2
39016: PPUSH
39017: CALL_OW 273
39021: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39022: LD_VAR 0 11
39026: PPUSH
39027: LD_VAR 0 12
39031: PPUSH
39032: CALL_OW 488
39036: PUSH
39037: LD_VAR 0 11
39041: PPUSH
39042: LD_VAR 0 12
39046: PPUSH
39047: CALL_OW 428
39051: NOT
39052: AND
39053: IFFALSE 39076
// begin ComMoveXY ( tmp , _x , _y ) ;
39055: LD_VAR 0 13
39059: PPUSH
39060: LD_VAR 0 11
39064: PPUSH
39065: LD_VAR 0 12
39069: PPUSH
39070: CALL_OW 111
// break ;
39074: GO 39078
// end ; end ;
39076: GO 38963
39078: POP
39079: POP
// end ; end ;
39080: GO 38405
39082: POP
39083: POP
// end ;
39084: LD_VAR 0 8
39088: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39089: LD_INT 0
39091: PPUSH
// result := true ;
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_INT 1
39099: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39100: LD_VAR 0 2
39104: PUSH
39105: LD_INT 24
39107: DOUBLE
39108: EQUAL
39109: IFTRUE 39119
39111: LD_INT 33
39113: DOUBLE
39114: EQUAL
39115: IFTRUE 39119
39117: GO 39144
39119: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39120: LD_ADDR_VAR 0 3
39124: PUSH
39125: LD_INT 32
39127: PPUSH
39128: LD_VAR 0 1
39132: PPUSH
39133: CALL_OW 321
39137: PUSH
39138: LD_INT 2
39140: EQUAL
39141: ST_TO_ADDR
39142: GO 39464
39144: LD_INT 20
39146: DOUBLE
39147: EQUAL
39148: IFTRUE 39152
39150: GO 39177
39152: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39153: LD_ADDR_VAR 0 3
39157: PUSH
39158: LD_INT 6
39160: PPUSH
39161: LD_VAR 0 1
39165: PPUSH
39166: CALL_OW 321
39170: PUSH
39171: LD_INT 2
39173: EQUAL
39174: ST_TO_ADDR
39175: GO 39464
39177: LD_INT 22
39179: DOUBLE
39180: EQUAL
39181: IFTRUE 39191
39183: LD_INT 36
39185: DOUBLE
39186: EQUAL
39187: IFTRUE 39191
39189: GO 39216
39191: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
39192: LD_ADDR_VAR 0 3
39196: PUSH
39197: LD_INT 15
39199: PPUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: CALL_OW 321
39209: PUSH
39210: LD_INT 2
39212: EQUAL
39213: ST_TO_ADDR
39214: GO 39464
39216: LD_INT 30
39218: DOUBLE
39219: EQUAL
39220: IFTRUE 39224
39222: GO 39249
39224: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
39225: LD_ADDR_VAR 0 3
39229: PUSH
39230: LD_INT 20
39232: PPUSH
39233: LD_VAR 0 1
39237: PPUSH
39238: CALL_OW 321
39242: PUSH
39243: LD_INT 2
39245: EQUAL
39246: ST_TO_ADDR
39247: GO 39464
39249: LD_INT 28
39251: DOUBLE
39252: EQUAL
39253: IFTRUE 39263
39255: LD_INT 21
39257: DOUBLE
39258: EQUAL
39259: IFTRUE 39263
39261: GO 39288
39263: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
39264: LD_ADDR_VAR 0 3
39268: PUSH
39269: LD_INT 21
39271: PPUSH
39272: LD_VAR 0 1
39276: PPUSH
39277: CALL_OW 321
39281: PUSH
39282: LD_INT 2
39284: EQUAL
39285: ST_TO_ADDR
39286: GO 39464
39288: LD_INT 16
39290: DOUBLE
39291: EQUAL
39292: IFTRUE 39296
39294: GO 39323
39296: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
39297: LD_ADDR_VAR 0 3
39301: PUSH
39302: LD_EXP 36
39306: PPUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 321
39316: PUSH
39317: LD_INT 2
39319: EQUAL
39320: ST_TO_ADDR
39321: GO 39464
39323: LD_INT 19
39325: DOUBLE
39326: EQUAL
39327: IFTRUE 39337
39329: LD_INT 23
39331: DOUBLE
39332: EQUAL
39333: IFTRUE 39337
39335: GO 39364
39337: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
39338: LD_ADDR_VAR 0 3
39342: PUSH
39343: LD_EXP 35
39347: PPUSH
39348: LD_VAR 0 1
39352: PPUSH
39353: CALL_OW 321
39357: PUSH
39358: LD_INT 2
39360: EQUAL
39361: ST_TO_ADDR
39362: GO 39464
39364: LD_INT 17
39366: DOUBLE
39367: EQUAL
39368: IFTRUE 39372
39370: GO 39397
39372: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
39373: LD_ADDR_VAR 0 3
39377: PUSH
39378: LD_INT 39
39380: PPUSH
39381: LD_VAR 0 1
39385: PPUSH
39386: CALL_OW 321
39390: PUSH
39391: LD_INT 2
39393: EQUAL
39394: ST_TO_ADDR
39395: GO 39464
39397: LD_INT 18
39399: DOUBLE
39400: EQUAL
39401: IFTRUE 39405
39403: GO 39430
39405: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_INT 40
39413: PPUSH
39414: LD_VAR 0 1
39418: PPUSH
39419: CALL_OW 321
39423: PUSH
39424: LD_INT 2
39426: EQUAL
39427: ST_TO_ADDR
39428: GO 39464
39430: LD_INT 27
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39438
39436: GO 39463
39438: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
39439: LD_ADDR_VAR 0 3
39443: PUSH
39444: LD_INT 35
39446: PPUSH
39447: LD_VAR 0 1
39451: PPUSH
39452: CALL_OW 321
39456: PUSH
39457: LD_INT 2
39459: EQUAL
39460: ST_TO_ADDR
39461: GO 39464
39463: POP
// end ;
39464: LD_VAR 0 3
39468: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
39469: LD_INT 0
39471: PPUSH
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
// result := false ;
39482: LD_ADDR_VAR 0 6
39486: PUSH
39487: LD_INT 0
39489: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39490: LD_VAR 0 1
39494: NOT
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 266
39505: PUSH
39506: LD_INT 0
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: IN
39516: NOT
39517: OR
39518: PUSH
39519: LD_VAR 0 2
39523: NOT
39524: OR
39525: PUSH
39526: LD_VAR 0 5
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 1
39536: PUSH
39537: LD_INT 2
39539: PUSH
39540: LD_INT 3
39542: PUSH
39543: LD_INT 4
39545: PUSH
39546: LD_INT 5
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: IN
39557: NOT
39558: OR
39559: PUSH
39560: LD_VAR 0 3
39564: PPUSH
39565: LD_VAR 0 4
39569: PPUSH
39570: CALL_OW 488
39574: NOT
39575: OR
39576: IFFALSE 39580
// exit ;
39578: GO 40316
// side := GetSide ( depot ) ;
39580: LD_ADDR_VAR 0 9
39584: PUSH
39585: LD_VAR 0 1
39589: PPUSH
39590: CALL_OW 255
39594: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
39595: LD_VAR 0 9
39599: PPUSH
39600: LD_VAR 0 2
39604: PPUSH
39605: CALL 39089 0 2
39609: NOT
39610: IFFALSE 39614
// exit ;
39612: GO 40316
// pom := GetBase ( depot ) ;
39614: LD_ADDR_VAR 0 10
39618: PUSH
39619: LD_VAR 0 1
39623: PPUSH
39624: CALL_OW 274
39628: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39629: LD_ADDR_VAR 0 11
39633: PUSH
39634: LD_VAR 0 2
39638: PPUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 248
39648: PPUSH
39649: CALL_OW 450
39653: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39654: LD_VAR 0 10
39658: PPUSH
39659: LD_INT 1
39661: PPUSH
39662: CALL_OW 275
39666: PUSH
39667: LD_VAR 0 11
39671: PUSH
39672: LD_INT 1
39674: ARRAY
39675: GREATEREQUAL
39676: PUSH
39677: LD_VAR 0 10
39681: PPUSH
39682: LD_INT 2
39684: PPUSH
39685: CALL_OW 275
39689: PUSH
39690: LD_VAR 0 11
39694: PUSH
39695: LD_INT 2
39697: ARRAY
39698: GREATEREQUAL
39699: AND
39700: PUSH
39701: LD_VAR 0 10
39705: PPUSH
39706: LD_INT 3
39708: PPUSH
39709: CALL_OW 275
39713: PUSH
39714: LD_VAR 0 11
39718: PUSH
39719: LD_INT 3
39721: ARRAY
39722: GREATEREQUAL
39723: AND
39724: NOT
39725: IFFALSE 39729
// exit ;
39727: GO 40316
// if GetBType ( depot ) = b_depot then
39729: LD_VAR 0 1
39733: PPUSH
39734: CALL_OW 266
39738: PUSH
39739: LD_INT 0
39741: EQUAL
39742: IFFALSE 39754
// dist := 28 else
39744: LD_ADDR_VAR 0 14
39748: PUSH
39749: LD_INT 28
39751: ST_TO_ADDR
39752: GO 39762
// dist := 36 ;
39754: LD_ADDR_VAR 0 14
39758: PUSH
39759: LD_INT 36
39761: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39762: LD_VAR 0 1
39766: PPUSH
39767: LD_VAR 0 3
39771: PPUSH
39772: LD_VAR 0 4
39776: PPUSH
39777: CALL_OW 297
39781: PUSH
39782: LD_VAR 0 14
39786: GREATER
39787: IFFALSE 39791
// exit ;
39789: GO 40316
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39791: LD_ADDR_VAR 0 12
39795: PUSH
39796: LD_VAR 0 2
39800: PPUSH
39801: LD_VAR 0 3
39805: PPUSH
39806: LD_VAR 0 4
39810: PPUSH
39811: LD_VAR 0 5
39815: PPUSH
39816: LD_VAR 0 1
39820: PPUSH
39821: CALL_OW 248
39825: PPUSH
39826: LD_INT 0
39828: PPUSH
39829: CALL 40321 0 6
39833: ST_TO_ADDR
// if not hexes then
39834: LD_VAR 0 12
39838: NOT
39839: IFFALSE 39843
// exit ;
39841: GO 40316
// hex := GetHexInfo ( x , y ) ;
39843: LD_ADDR_VAR 0 15
39847: PUSH
39848: LD_VAR 0 3
39852: PPUSH
39853: LD_VAR 0 4
39857: PPUSH
39858: CALL_OW 546
39862: ST_TO_ADDR
// if hex [ 1 ] then
39863: LD_VAR 0 15
39867: PUSH
39868: LD_INT 1
39870: ARRAY
39871: IFFALSE 39875
// exit ;
39873: GO 40316
// height := hex [ 2 ] ;
39875: LD_ADDR_VAR 0 13
39879: PUSH
39880: LD_VAR 0 15
39884: PUSH
39885: LD_INT 2
39887: ARRAY
39888: ST_TO_ADDR
// for i = 1 to hexes do
39889: LD_ADDR_VAR 0 7
39893: PUSH
39894: DOUBLE
39895: LD_INT 1
39897: DEC
39898: ST_TO_ADDR
39899: LD_VAR 0 12
39903: PUSH
39904: FOR_TO
39905: IFFALSE 40235
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39907: LD_VAR 0 12
39911: PUSH
39912: LD_VAR 0 7
39916: ARRAY
39917: PUSH
39918: LD_INT 1
39920: ARRAY
39921: PPUSH
39922: LD_VAR 0 12
39926: PUSH
39927: LD_VAR 0 7
39931: ARRAY
39932: PUSH
39933: LD_INT 2
39935: ARRAY
39936: PPUSH
39937: CALL_OW 488
39941: NOT
39942: PUSH
39943: LD_VAR 0 12
39947: PUSH
39948: LD_VAR 0 7
39952: ARRAY
39953: PUSH
39954: LD_INT 1
39956: ARRAY
39957: PPUSH
39958: LD_VAR 0 12
39962: PUSH
39963: LD_VAR 0 7
39967: ARRAY
39968: PUSH
39969: LD_INT 2
39971: ARRAY
39972: PPUSH
39973: CALL_OW 428
39977: PUSH
39978: LD_INT 0
39980: GREATER
39981: OR
39982: PUSH
39983: LD_VAR 0 12
39987: PUSH
39988: LD_VAR 0 7
39992: ARRAY
39993: PUSH
39994: LD_INT 1
39996: ARRAY
39997: PPUSH
39998: LD_VAR 0 12
40002: PUSH
40003: LD_VAR 0 7
40007: ARRAY
40008: PUSH
40009: LD_INT 2
40011: ARRAY
40012: PPUSH
40013: CALL_OW 351
40017: OR
40018: IFFALSE 40024
// exit ;
40020: POP
40021: POP
40022: GO 40316
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40024: LD_ADDR_VAR 0 8
40028: PUSH
40029: LD_VAR 0 12
40033: PUSH
40034: LD_VAR 0 7
40038: ARRAY
40039: PUSH
40040: LD_INT 1
40042: ARRAY
40043: PPUSH
40044: LD_VAR 0 12
40048: PUSH
40049: LD_VAR 0 7
40053: ARRAY
40054: PUSH
40055: LD_INT 2
40057: ARRAY
40058: PPUSH
40059: CALL_OW 546
40063: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40064: LD_VAR 0 8
40068: PUSH
40069: LD_INT 1
40071: ARRAY
40072: PUSH
40073: LD_VAR 0 8
40077: PUSH
40078: LD_INT 2
40080: ARRAY
40081: PUSH
40082: LD_VAR 0 13
40086: PUSH
40087: LD_INT 2
40089: PLUS
40090: GREATER
40091: OR
40092: PUSH
40093: LD_VAR 0 8
40097: PUSH
40098: LD_INT 2
40100: ARRAY
40101: PUSH
40102: LD_VAR 0 13
40106: PUSH
40107: LD_INT 2
40109: MINUS
40110: LESS
40111: OR
40112: PUSH
40113: LD_VAR 0 8
40117: PUSH
40118: LD_INT 3
40120: ARRAY
40121: PUSH
40122: LD_INT 0
40124: PUSH
40125: LD_INT 8
40127: PUSH
40128: LD_INT 9
40130: PUSH
40131: LD_INT 10
40133: PUSH
40134: LD_INT 11
40136: PUSH
40137: LD_INT 12
40139: PUSH
40140: LD_INT 13
40142: PUSH
40143: LD_INT 16
40145: PUSH
40146: LD_INT 17
40148: PUSH
40149: LD_INT 18
40151: PUSH
40152: LD_INT 19
40154: PUSH
40155: LD_INT 20
40157: PUSH
40158: LD_INT 21
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: IN
40176: NOT
40177: OR
40178: PUSH
40179: LD_VAR 0 8
40183: PUSH
40184: LD_INT 5
40186: ARRAY
40187: NOT
40188: OR
40189: PUSH
40190: LD_VAR 0 8
40194: PUSH
40195: LD_INT 6
40197: ARRAY
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: LD_INT 7
40207: PUSH
40208: LD_INT 9
40210: PUSH
40211: LD_INT 10
40213: PUSH
40214: LD_INT 11
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: LIST
40221: LIST
40222: LIST
40223: LIST
40224: IN
40225: NOT
40226: OR
40227: IFFALSE 40233
// exit ;
40229: POP
40230: POP
40231: GO 40316
// end ;
40233: GO 39904
40235: POP
40236: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40237: LD_VAR 0 9
40241: PPUSH
40242: LD_VAR 0 3
40246: PPUSH
40247: LD_VAR 0 4
40251: PPUSH
40252: LD_INT 20
40254: PPUSH
40255: CALL 32262 0 4
40259: PUSH
40260: LD_INT 4
40262: ARRAY
40263: IFFALSE 40267
// exit ;
40265: GO 40316
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40267: LD_VAR 0 2
40271: PUSH
40272: LD_INT 29
40274: PUSH
40275: LD_INT 30
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: IN
40282: PUSH
40283: LD_VAR 0 3
40287: PPUSH
40288: LD_VAR 0 4
40292: PPUSH
40293: LD_VAR 0 9
40297: PPUSH
40298: CALL_OW 440
40302: NOT
40303: AND
40304: IFFALSE 40308
// exit ;
40306: GO 40316
// result := true ;
40308: LD_ADDR_VAR 0 6
40312: PUSH
40313: LD_INT 1
40315: ST_TO_ADDR
// end ;
40316: LD_VAR 0 6
40320: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40321: LD_INT 0
40323: PPUSH
40324: PPUSH
40325: PPUSH
40326: PPUSH
40327: PPUSH
40328: PPUSH
40329: PPUSH
40330: PPUSH
40331: PPUSH
40332: PPUSH
40333: PPUSH
40334: PPUSH
40335: PPUSH
40336: PPUSH
40337: PPUSH
40338: PPUSH
40339: PPUSH
40340: PPUSH
40341: PPUSH
40342: PPUSH
40343: PPUSH
40344: PPUSH
40345: PPUSH
40346: PPUSH
40347: PPUSH
40348: PPUSH
40349: PPUSH
40350: PPUSH
40351: PPUSH
40352: PPUSH
40353: PPUSH
40354: PPUSH
40355: PPUSH
40356: PPUSH
40357: PPUSH
40358: PPUSH
40359: PPUSH
40360: PPUSH
40361: PPUSH
40362: PPUSH
40363: PPUSH
40364: PPUSH
40365: PPUSH
40366: PPUSH
40367: PPUSH
40368: PPUSH
40369: PPUSH
40370: PPUSH
40371: PPUSH
40372: PPUSH
40373: PPUSH
40374: PPUSH
40375: PPUSH
40376: PPUSH
40377: PPUSH
40378: PPUSH
40379: PPUSH
40380: PPUSH
// result = [ ] ;
40381: LD_ADDR_VAR 0 7
40385: PUSH
40386: EMPTY
40387: ST_TO_ADDR
// temp_list = [ ] ;
40388: LD_ADDR_VAR 0 9
40392: PUSH
40393: EMPTY
40394: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40395: LD_VAR 0 4
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 1
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 3
40411: PUSH
40412: LD_INT 4
40414: PUSH
40415: LD_INT 5
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: IN
40426: NOT
40427: PUSH
40428: LD_VAR 0 1
40432: PUSH
40433: LD_INT 0
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: IN
40443: PUSH
40444: LD_VAR 0 5
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: LD_INT 3
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: LIST
40462: IN
40463: NOT
40464: AND
40465: OR
40466: IFFALSE 40470
// exit ;
40468: GO 58861
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40470: LD_VAR 0 1
40474: PUSH
40475: LD_INT 6
40477: PUSH
40478: LD_INT 7
40480: PUSH
40481: LD_INT 8
40483: PUSH
40484: LD_INT 13
40486: PUSH
40487: LD_INT 12
40489: PUSH
40490: LD_INT 15
40492: PUSH
40493: LD_INT 11
40495: PUSH
40496: LD_INT 14
40498: PUSH
40499: LD_INT 10
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: IN
40513: IFFALSE 40523
// btype = b_lab ;
40515: LD_ADDR_VAR 0 1
40519: PUSH
40520: LD_INT 6
40522: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40523: LD_VAR 0 6
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 1
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: IN
40542: NOT
40543: PUSH
40544: LD_VAR 0 1
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: LD_INT 2
40557: PUSH
40558: LD_INT 3
40560: PUSH
40561: LD_INT 6
40563: PUSH
40564: LD_INT 36
40566: PUSH
40567: LD_INT 4
40569: PUSH
40570: LD_INT 5
40572: PUSH
40573: LD_INT 31
40575: PUSH
40576: LD_INT 32
40578: PUSH
40579: LD_INT 33
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: LIST
40592: LIST
40593: LIST
40594: IN
40595: NOT
40596: PUSH
40597: LD_VAR 0 6
40601: PUSH
40602: LD_INT 1
40604: EQUAL
40605: AND
40606: OR
40607: PUSH
40608: LD_VAR 0 1
40612: PUSH
40613: LD_INT 2
40615: PUSH
40616: LD_INT 3
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: IN
40623: NOT
40624: PUSH
40625: LD_VAR 0 6
40629: PUSH
40630: LD_INT 2
40632: EQUAL
40633: AND
40634: OR
40635: IFFALSE 40645
// mode = 0 ;
40637: LD_ADDR_VAR 0 6
40641: PUSH
40642: LD_INT 0
40644: ST_TO_ADDR
// case mode of 0 :
40645: LD_VAR 0 6
40649: PUSH
40650: LD_INT 0
40652: DOUBLE
40653: EQUAL
40654: IFTRUE 40658
40656: GO 52111
40658: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40659: LD_ADDR_VAR 0 11
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 0
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 0
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PUSH
40715: LD_INT 1
40717: NEG
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: LD_INT 1
40732: NEG
40733: PUSH
40734: EMPTY
40735: LIST
40736: LIST
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: LD_INT 2
40744: NEG
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 0
40752: PUSH
40753: LD_INT 2
40755: NEG
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: LD_INT 2
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: LD_INT 2
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 1
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: PUSH
40806: LD_INT 3
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: LD_INT 3
40818: PUSH
40819: EMPTY
40820: LIST
40821: LIST
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: LD_INT 2
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40852: LD_ADDR_VAR 0 12
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: EMPTY
40864: LIST
40865: LIST
40866: PUSH
40867: LD_INT 0
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 0
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 0
40900: PUSH
40901: LD_INT 1
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 1
40910: NEG
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: LD_INT 1
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 1
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 2
40944: PUSH
40945: LD_INT 0
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 2
40954: PUSH
40955: LD_INT 1
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 1
40964: NEG
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 2
40975: NEG
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: NEG
40987: PUSH
40988: LD_INT 1
40990: NEG
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: PUSH
40996: LD_INT 2
40998: NEG
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: NEG
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41048: LD_ADDR_VAR 0 13
41052: PUSH
41053: LD_INT 0
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 0
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: LD_INT 0
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: LD_INT 1
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 1
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 1
41117: NEG
41118: PUSH
41119: LD_INT 1
41121: NEG
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 2
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 2
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 2
41151: PUSH
41152: LD_INT 2
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 2
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 2
41171: NEG
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: EMPTY
41178: LIST
41179: LIST
41180: PUSH
41181: LD_INT 2
41183: NEG
41184: PUSH
41185: LD_INT 2
41187: NEG
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: LD_INT 3
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: NEG
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 3
41219: NEG
41220: PUSH
41221: LD_INT 3
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41247: LD_ADDR_VAR 0 14
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 0
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 0
41264: PUSH
41265: LD_INT 1
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: LD_INT 1
41288: PUSH
41289: EMPTY
41290: LIST
41291: LIST
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: PUSH
41303: LD_INT 1
41305: NEG
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: LD_INT 1
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: PUSH
41338: LD_INT 0
41340: PUSH
41341: LD_INT 2
41343: NEG
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PUSH
41349: LD_INT 1
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: LD_INT 2
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: PUSH
41370: LD_INT 0
41372: PUSH
41373: LD_INT 2
41375: PUSH
41376: EMPTY
41377: LIST
41378: LIST
41379: PUSH
41380: LD_INT 1
41382: NEG
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 3
41397: NEG
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: LD_INT 3
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: PUSH
41417: LD_INT 2
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41443: LD_ADDR_VAR 0 15
41447: PUSH
41448: LD_INT 0
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 0
41460: PUSH
41461: LD_INT 1
41463: NEG
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: EMPTY
41486: LIST
41487: LIST
41488: PUSH
41489: LD_INT 0
41491: PUSH
41492: LD_INT 1
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: LD_INT 0
41505: PUSH
41506: EMPTY
41507: LIST
41508: LIST
41509: PUSH
41510: LD_INT 1
41512: NEG
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 1
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 2
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 2
41545: PUSH
41546: LD_INT 1
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: PUSH
41553: LD_INT 1
41555: NEG
41556: PUSH
41557: LD_INT 1
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 2
41566: NEG
41567: PUSH
41568: LD_INT 0
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 2
41577: NEG
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: PUSH
41587: LD_INT 2
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 3
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: PUSH
41611: LD_INT 1
41613: PUSH
41614: EMPTY
41615: LIST
41616: LIST
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: LIST
41622: LIST
41623: LIST
41624: LIST
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41636: LD_ADDR_VAR 0 16
41640: PUSH
41641: LD_INT 0
41643: PUSH
41644: LD_INT 0
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: PUSH
41651: LD_INT 0
41653: PUSH
41654: LD_INT 1
41656: NEG
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: LD_INT 0
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 1
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 0
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 0
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 1
41705: NEG
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 2
41721: NEG
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: PUSH
41730: LD_INT 1
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 2
41739: PUSH
41740: LD_INT 2
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 1
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: NEG
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 3
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 2
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41829: LD_ADDR_VAR 0 17
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 0
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 1
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: NEG
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 0
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: PUSH
41952: LD_INT 2
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: EMPTY
41959: LIST
41960: LIST
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: LD_INT 2
41967: PUSH
41968: EMPTY
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 1
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: EMPTY
41979: LIST
41980: LIST
41981: PUSH
41982: LD_INT 0
41984: PUSH
41985: LD_INT 2
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 1
41994: NEG
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: LD_INT 1
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: LD_INT 2
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42059: LD_ADDR_VAR 0 18
42063: PUSH
42064: LD_INT 0
42066: PUSH
42067: LD_INT 0
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 0
42076: PUSH
42077: LD_INT 1
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: EMPTY
42092: LIST
42093: LIST
42094: PUSH
42095: LD_INT 1
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PUSH
42105: LD_INT 0
42107: PUSH
42108: LD_INT 1
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 1
42117: NEG
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: LD_INT 1
42128: NEG
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 1
42140: NEG
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 2
42174: PUSH
42175: LD_INT 0
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: PUSH
42185: LD_INT 1
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 2
42194: PUSH
42195: LD_INT 2
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 1
42204: PUSH
42205: LD_INT 2
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 0
42214: PUSH
42215: LD_INT 2
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: LD_INT 1
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: NEG
42236: PUSH
42237: LD_INT 0
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 2
42246: NEG
42247: PUSH
42248: LD_INT 1
42250: NEG
42251: PUSH
42252: EMPTY
42253: LIST
42254: LIST
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: LD_INT 2
42262: NEG
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: LIST
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42289: LD_ADDR_VAR 0 19
42293: PUSH
42294: LD_INT 0
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 0
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 1
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 1
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: NEG
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 1
42370: NEG
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 0
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 1
42393: PUSH
42394: LD_INT 1
42396: NEG
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: PUSH
42402: LD_INT 2
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: PUSH
42412: LD_INT 2
42414: PUSH
42415: LD_INT 1
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 2
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: LD_INT 0
42444: PUSH
42445: LD_INT 2
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 1
42454: NEG
42455: PUSH
42456: LD_INT 1
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 2
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: LD_INT 2
42488: NEG
42489: PUSH
42490: LD_INT 2
42492: NEG
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42519: LD_ADDR_VAR 0 20
42523: PUSH
42524: LD_INT 0
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 0
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: LD_INT 0
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: LD_INT 1
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 0
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 1
42577: NEG
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: EMPTY
42583: LIST
42584: LIST
42585: PUSH
42586: LD_INT 1
42588: NEG
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 1
42600: NEG
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: LD_INT 0
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 1
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 2
42654: PUSH
42655: LD_INT 2
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: PUSH
42665: LD_INT 2
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 0
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: NEG
42685: PUSH
42686: LD_INT 1
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 0
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: LD_INT 1
42710: NEG
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 2
42718: NEG
42719: PUSH
42720: LD_INT 2
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: LIST
42740: LIST
42741: LIST
42742: LIST
42743: LIST
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42749: LD_ADDR_VAR 0 21
42753: PUSH
42754: LD_INT 0
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: LD_INT 1
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 1
42777: PUSH
42778: LD_INT 0
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: EMPTY
42792: LIST
42793: LIST
42794: PUSH
42795: LD_INT 0
42797: PUSH
42798: LD_INT 1
42800: PUSH
42801: EMPTY
42802: LIST
42803: LIST
42804: PUSH
42805: LD_INT 1
42807: NEG
42808: PUSH
42809: LD_INT 0
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: PUSH
42816: LD_INT 1
42818: NEG
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 0
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: PUSH
42851: LD_INT 1
42853: PUSH
42854: LD_INT 1
42856: NEG
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 2
42864: PUSH
42865: LD_INT 0
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 2
42874: PUSH
42875: LD_INT 1
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 2
42884: PUSH
42885: LD_INT 2
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 1
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 1
42914: NEG
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 2
42925: NEG
42926: PUSH
42927: LD_INT 0
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 2
42936: NEG
42937: PUSH
42938: LD_INT 1
42940: NEG
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 2
42948: NEG
42949: PUSH
42950: LD_INT 2
42952: NEG
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42979: LD_ADDR_VAR 0 22
42983: PUSH
42984: LD_INT 0
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: LD_INT 1
42999: NEG
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: LD_INT 0
43010: PUSH
43011: EMPTY
43012: LIST
43013: LIST
43014: PUSH
43015: LD_INT 1
43017: PUSH
43018: LD_INT 1
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 0
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 1
43048: NEG
43049: PUSH
43050: LD_INT 1
43052: NEG
43053: PUSH
43054: EMPTY
43055: LIST
43056: LIST
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 0
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 1
43086: NEG
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 0
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PUSH
43102: LD_INT 2
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: EMPTY
43109: LIST
43110: LIST
43111: PUSH
43112: LD_INT 2
43114: PUSH
43115: LD_INT 2
43117: PUSH
43118: EMPTY
43119: LIST
43120: LIST
43121: PUSH
43122: LD_INT 1
43124: PUSH
43125: LD_INT 2
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 0
43134: PUSH
43135: LD_INT 2
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: LD_INT 1
43144: NEG
43145: PUSH
43146: LD_INT 1
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 2
43155: NEG
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: NEG
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43209: LD_ADDR_VAR 0 23
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: LD_INT 1
43229: NEG
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: PUSH
43235: LD_INT 1
43237: PUSH
43238: LD_INT 0
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: PUSH
43245: LD_INT 1
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: PUSH
43265: LD_INT 1
43267: NEG
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: NEG
43279: PUSH
43280: LD_INT 1
43282: NEG
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 2
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 2
43334: PUSH
43335: LD_INT 1
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 1
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: NEG
43375: PUSH
43376: LD_INT 1
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 2
43385: NEG
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: NEG
43397: PUSH
43398: LD_INT 1
43400: NEG
43401: PUSH
43402: EMPTY
43403: LIST
43404: LIST
43405: PUSH
43406: LD_INT 2
43408: NEG
43409: PUSH
43410: LD_INT 2
43412: NEG
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: NEG
43421: PUSH
43422: LD_INT 3
43424: NEG
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: PUSH
43430: LD_INT 1
43432: NEG
43433: PUSH
43434: LD_INT 3
43436: NEG
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: PUSH
43453: LD_INT 2
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43489: LD_ADDR_VAR 0 24
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: LD_INT 1
43509: NEG
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: LD_INT 0
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: NEG
43559: PUSH
43560: LD_INT 1
43562: NEG
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 1
43570: NEG
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 1
43593: PUSH
43594: LD_INT 1
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: LD_INT 1
43617: PUSH
43618: EMPTY
43619: LIST
43620: LIST
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: LD_INT 2
43627: PUSH
43628: EMPTY
43629: LIST
43630: LIST
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: LD_INT 2
43637: PUSH
43638: EMPTY
43639: LIST
43640: LIST
43641: PUSH
43642: LD_INT 0
43644: PUSH
43645: LD_INT 2
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: NEG
43655: PUSH
43656: LD_INT 1
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 2
43665: NEG
43666: PUSH
43667: LD_INT 0
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 1
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: LD_INT 2
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: LD_INT 2
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 2
43711: PUSH
43712: LD_INT 1
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 2
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: EMPTY
43741: LIST
43742: LIST
43743: LIST
43744: LIST
43745: LIST
43746: LIST
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43765: LD_ADDR_VAR 0 25
43769: PUSH
43770: LD_INT 0
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: EMPTY
43777: LIST
43778: LIST
43779: PUSH
43780: LD_INT 0
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 1
43793: PUSH
43794: LD_INT 0
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 0
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: EMPTY
43818: LIST
43819: LIST
43820: PUSH
43821: LD_INT 1
43823: NEG
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 1
43838: NEG
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: NEG
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 0
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 1
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 2
43890: PUSH
43891: LD_INT 1
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 2
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 1
43910: PUSH
43911: LD_INT 2
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 0
43920: PUSH
43921: LD_INT 2
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 2
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 2
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 3
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 3
43986: PUSH
43987: LD_INT 2
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 2
43996: PUSH
43997: LD_INT 3
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 3
44009: PUSH
44010: EMPTY
44011: LIST
44012: LIST
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: LIST
44018: LIST
44019: LIST
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44039: LD_ADDR_VAR 0 26
44043: PUSH
44044: LD_INT 0
44046: PUSH
44047: LD_INT 0
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 0
44056: PUSH
44057: LD_INT 1
44059: NEG
44060: PUSH
44061: EMPTY
44062: LIST
44063: LIST
44064: PUSH
44065: LD_INT 1
44067: PUSH
44068: LD_INT 0
44070: PUSH
44071: EMPTY
44072: LIST
44073: LIST
44074: PUSH
44075: LD_INT 1
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 0
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 1
44097: NEG
44098: PUSH
44099: LD_INT 0
44101: PUSH
44102: EMPTY
44103: LIST
44104: LIST
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: LD_INT 1
44112: NEG
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: LD_INT 1
44146: NEG
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 2
44154: PUSH
44155: LD_INT 0
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 1
44184: PUSH
44185: LD_INT 2
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 2
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 2
44215: NEG
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: NEG
44227: PUSH
44228: LD_INT 1
44230: NEG
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: LD_INT 2
44238: NEG
44239: PUSH
44240: LD_INT 2
44242: NEG
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 2
44250: PUSH
44251: LD_INT 3
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: LD_INT 3
44263: PUSH
44264: EMPTY
44265: LIST
44266: LIST
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: LD_INT 2
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: PUSH
44279: LD_INT 2
44281: NEG
44282: PUSH
44283: LD_INT 1
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44315: LD_ADDR_VAR 0 27
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 0
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 0
44332: PUSH
44333: LD_INT 1
44335: NEG
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 0
44363: PUSH
44364: LD_INT 1
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 0
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 1
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 1
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: LD_INT 0
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 1
44419: PUSH
44420: LD_INT 1
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 2
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 1
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 2
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 1
44460: PUSH
44461: LD_INT 2
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 0
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 2
44491: NEG
44492: PUSH
44493: LD_INT 0
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 2
44502: NEG
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 2
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 1
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: PUSH
44535: LD_INT 2
44537: NEG
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: NEG
44549: PUSH
44550: LD_INT 1
44552: NEG
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 3
44560: NEG
44561: PUSH
44562: LD_INT 2
44564: NEG
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: LIST
44574: LIST
44575: LIST
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44595: LD_ADDR_VAR 0 28
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: LD_INT 1
44702: NEG
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: PUSH
44711: LD_INT 0
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 2
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 1
44740: PUSH
44741: LD_INT 2
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 1
44760: NEG
44761: PUSH
44762: LD_INT 1
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 2
44771: NEG
44772: PUSH
44773: LD_INT 0
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 2
44782: NEG
44783: PUSH
44784: LD_INT 1
44786: NEG
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 2
44794: NEG
44795: PUSH
44796: LD_INT 2
44798: NEG
44799: PUSH
44800: EMPTY
44801: LIST
44802: LIST
44803: PUSH
44804: LD_INT 2
44806: NEG
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: LD_INT 3
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 3
44830: NEG
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: EMPTY
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44877: LD_ADDR_VAR 0 29
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: NEG
44959: PUSH
44960: LD_INT 2
44962: NEG
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 0
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 1
44984: NEG
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 0
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 2
45002: PUSH
45003: LD_INT 1
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 1
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 1
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 2
45043: NEG
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 2
45055: NEG
45056: PUSH
45057: LD_INT 2
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 2
45067: NEG
45068: PUSH
45069: LD_INT 3
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 2
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 1
45100: PUSH
45101: LD_INT 3
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 3
45121: NEG
45122: PUSH
45123: LD_INT 2
45125: NEG
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45156: LD_ADDR_VAR 0 30
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: LD_INT 0
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 0
45173: PUSH
45174: LD_INT 1
45176: NEG
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: LD_INT 0
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: LD_INT 1
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: EMPTY
45209: LIST
45210: LIST
45211: PUSH
45212: LD_INT 1
45214: NEG
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 1
45225: NEG
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: LD_INT 1
45237: NEG
45238: PUSH
45239: LD_INT 2
45241: NEG
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: LD_INT 2
45252: NEG
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 2
45271: PUSH
45272: LD_INT 0
45274: PUSH
45275: EMPTY
45276: LIST
45277: LIST
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 1
45311: NEG
45312: PUSH
45313: LD_INT 1
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 2
45322: NEG
45323: PUSH
45324: LD_INT 0
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: NEG
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: NEG
45346: PUSH
45347: LD_INT 3
45349: NEG
45350: PUSH
45351: EMPTY
45352: LIST
45353: LIST
45354: PUSH
45355: LD_INT 1
45357: PUSH
45358: LD_INT 2
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 3
45399: NEG
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45434: LD_ADDR_VAR 0 31
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 0
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 0
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 1
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: LD_INT 1
45492: NEG
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: LD_INT 1
45507: NEG
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 1
45515: NEG
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: EMPTY
45522: LIST
45523: LIST
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: LD_INT 1
45530: NEG
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 2
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 0
45578: PUSH
45579: LD_INT 2
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 1
45588: NEG
45589: PUSH
45590: LD_INT 1
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: NEG
45600: PUSH
45601: LD_INT 1
45603: NEG
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 2
45611: NEG
45612: PUSH
45613: LD_INT 2
45615: NEG
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 3
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 3
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 3
45659: PUSH
45660: EMPTY
45661: LIST
45662: LIST
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: LD_INT 2
45670: PUSH
45671: EMPTY
45672: LIST
45673: LIST
45674: PUSH
45675: LD_INT 3
45677: NEG
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: EMPTY
45684: LIST
45685: LIST
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: LIST
45703: LIST
45704: LIST
45705: LIST
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45712: LD_ADDR_VAR 0 32
45716: PUSH
45717: LD_INT 0
45719: PUSH
45720: LD_INT 0
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: NEG
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: LD_INT 0
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 1
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 1
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 0
45805: PUSH
45806: LD_INT 2
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 2
45827: PUSH
45828: LD_INT 1
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 2
45837: PUSH
45838: LD_INT 2
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 1
45847: PUSH
45848: LD_INT 2
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 0
45857: PUSH
45858: LD_INT 2
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: NEG
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 2
45889: NEG
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 3
45905: NEG
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: PUSH
45914: LD_INT 2
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 3
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: PUSH
45935: LD_INT 3
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 2
45944: NEG
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: EMPTY
45950: LIST
45951: LIST
45952: PUSH
45953: LD_INT 3
45955: NEG
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45990: LD_ADDR_VAR 0 33
45994: PUSH
45995: LD_INT 0
45997: PUSH
45998: LD_INT 0
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 0
46007: PUSH
46008: LD_INT 1
46010: NEG
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: LD_INT 0
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: PUSH
46026: LD_INT 1
46028: PUSH
46029: LD_INT 1
46031: PUSH
46032: EMPTY
46033: LIST
46034: LIST
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 0
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: PUSH
46057: LD_INT 1
46059: NEG
46060: PUSH
46061: LD_INT 1
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: LD_INT 2
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 2
46094: PUSH
46095: LD_INT 0
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 2
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: LD_INT 2
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 0
46124: PUSH
46125: LD_INT 2
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: PUSH
46143: LD_INT 2
46145: NEG
46146: PUSH
46147: LD_INT 0
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 2
46156: NEG
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: NEG
46169: PUSH
46170: LD_INT 2
46172: NEG
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: LD_INT 3
46184: NEG
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 3
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: LD_INT 3
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 1
46223: NEG
46224: PUSH
46225: LD_INT 2
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 3
46234: NEG
46235: PUSH
46236: LD_INT 2
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: LIST
46249: LIST
46250: LIST
46251: LIST
46252: LIST
46253: LIST
46254: LIST
46255: LIST
46256: LIST
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46269: LD_ADDR_VAR 0 34
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 1
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 0
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 1
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: LD_INT 2
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 2
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 1
46404: PUSH
46405: LD_INT 2
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 2
46425: NEG
46426: PUSH
46427: LD_INT 0
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 2
46436: NEG
46437: PUSH
46438: LD_INT 1
46440: NEG
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 2
46448: NEG
46449: PUSH
46450: LD_INT 2
46452: NEG
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 3
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: LD_INT 2
46475: NEG
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 3
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: PUSH
46494: LD_INT 3
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: LD_INT 3
46514: NEG
46515: PUSH
46516: LD_INT 1
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46549: LD_ADDR_VAR 0 35
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: EMPTY
46561: LIST
46562: LIST
46563: PUSH
46564: LD_INT 0
46566: PUSH
46567: LD_INT 1
46569: NEG
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 1
46622: NEG
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 2
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: LIST
46655: LIST
46656: LIST
46657: LIST
46658: LIST
46659: LIST
46660: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46661: LD_ADDR_VAR 0 36
46665: PUSH
46666: LD_INT 0
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: LD_INT 1
46734: NEG
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 1
46742: NEG
46743: PUSH
46744: LD_INT 2
46746: NEG
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 1
46754: PUSH
46755: LD_INT 2
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46773: LD_ADDR_VAR 0 37
46777: PUSH
46778: LD_INT 0
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: LD_INT 1
46793: NEG
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 1
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: NEG
46832: PUSH
46833: LD_INT 0
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: NEG
46843: PUSH
46844: LD_INT 1
46846: NEG
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46885: LD_ADDR_VAR 0 38
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: PUSH
46967: LD_INT 1
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 2
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46997: LD_ADDR_VAR 0 39
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 0
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 1
47017: NEG
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 0
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 0
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 1
47066: NEG
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 2
47082: NEG
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 1
47090: PUSH
47091: LD_INT 2
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: LIST
47103: LIST
47104: LIST
47105: LIST
47106: LIST
47107: LIST
47108: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47109: LD_ADDR_VAR 0 40
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 0
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 0
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 0
47157: PUSH
47158: LD_INT 1
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: NEG
47168: PUSH
47169: LD_INT 0
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 1
47178: NEG
47179: PUSH
47180: LD_INT 1
47182: NEG
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: LD_INT 1
47193: NEG
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: LIST
47214: LIST
47215: LIST
47216: LIST
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47221: LD_ADDR_VAR 0 41
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 0
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: NEG
47291: PUSH
47292: LD_INT 1
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: NEG
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 1
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: LD_INT 0
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 2
47345: PUSH
47346: LD_INT 2
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: PUSH
47356: LD_INT 2
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 2
47411: NEG
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 3
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 3
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 3
47454: PUSH
47455: LD_INT 2
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 3
47464: PUSH
47465: LD_INT 3
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 3
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 3
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 3
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 3
47530: NEG
47531: PUSH
47532: LD_INT 3
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: LIST
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47571: LD_ADDR_VAR 0 42
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 0
47588: PUSH
47589: LD_INT 1
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: PUSH
47600: LD_INT 0
47602: PUSH
47603: EMPTY
47604: LIST
47605: LIST
47606: PUSH
47607: LD_INT 1
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: NEG
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 2
47656: NEG
47657: PUSH
47658: EMPTY
47659: LIST
47660: LIST
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: LD_INT 2
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: LD_INT 1
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 2
47737: NEG
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: LD_INT 2
47753: NEG
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 2
47761: NEG
47762: PUSH
47763: LD_INT 3
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: NEG
47774: PUSH
47775: LD_INT 3
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 3
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: LD_INT 2
47799: NEG
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 3
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 3
47817: PUSH
47818: LD_INT 3
47820: PUSH
47821: EMPTY
47822: LIST
47823: LIST
47824: PUSH
47825: LD_INT 2
47827: PUSH
47828: LD_INT 3
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: PUSH
47838: LD_INT 3
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 3
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 3
47868: NEG
47869: PUSH
47870: LD_INT 2
47872: NEG
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 3
47880: NEG
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47921: LD_ADDR_VAR 0 43
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 0
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: PUSH
47950: LD_INT 0
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 0
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: NEG
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: NEG
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: LD_INT 2
48017: NEG
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 1
48025: PUSH
48026: LD_INT 1
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: LD_INT 0
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: LD_INT 1
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 2
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 0
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 2
48098: NEG
48099: PUSH
48100: LD_INT 1
48102: NEG
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: LD_INT 3
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: LD_INT 3
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 2
48136: NEG
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 1
48147: NEG
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 3
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 3
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 2
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 3
48228: NEG
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48269: LD_ADDR_VAR 0 44
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 0
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 1
48338: NEG
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 1
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: PUSH
48374: LD_INT 0
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 2
48393: PUSH
48394: LD_INT 2
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: PUSH
48404: LD_INT 2
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 1
48413: NEG
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 2
48435: NEG
48436: PUSH
48437: LD_INT 1
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: NEG
48448: PUSH
48449: LD_INT 2
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 2
48459: NEG
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 2
48471: PUSH
48472: LD_INT 1
48474: NEG
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 3
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 3
48502: PUSH
48503: LD_INT 2
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: LD_INT 3
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 3
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 2
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 3
48543: NEG
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: NEG
48555: PUSH
48556: LD_INT 1
48558: NEG
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 3
48566: NEG
48567: PUSH
48568: LD_INT 2
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 3
48578: NEG
48579: PUSH
48580: LD_INT 3
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48619: LD_ADDR_VAR 0 45
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 0
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 0
48636: PUSH
48637: LD_INT 1
48639: NEG
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: LD_INT 0
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: LD_INT 1
48657: PUSH
48658: LD_INT 1
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 0
48667: PUSH
48668: LD_INT 1
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: NEG
48678: PUSH
48679: LD_INT 0
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 1
48700: NEG
48701: PUSH
48702: LD_INT 2
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 1
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: PUSH
48735: LD_INT 1
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: PUSH
48742: LD_INT 2
48744: PUSH
48745: LD_INT 2
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: LD_INT 2
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 1
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 2
48785: NEG
48786: PUSH
48787: LD_INT 1
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 2
48797: NEG
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: EMPTY
48804: LIST
48805: LIST
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: LD_INT 3
48813: NEG
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: LD_INT 3
48836: NEG
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: LD_INT 2
48847: NEG
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: LD_INT 2
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 3
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: PUSH
48876: LD_INT 3
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: PUSH
48907: LD_INT 2
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 3
48916: NEG
48917: PUSH
48918: LD_INT 2
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 3
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48969: LD_ADDR_VAR 0 46
48973: PUSH
48974: LD_INT 0
48976: PUSH
48977: LD_INT 0
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 1
48989: NEG
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: PUSH
48995: LD_INT 1
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: NEG
49028: PUSH
49029: LD_INT 0
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 2
49065: NEG
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 1
49073: PUSH
49074: LD_INT 1
49076: NEG
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 2
49084: PUSH
49085: LD_INT 0
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 1
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 2
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 2
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: NEG
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 2
49135: NEG
49136: PUSH
49137: LD_INT 0
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: LD_INT 1
49150: NEG
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: LD_INT 3
49162: NEG
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 3
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 2
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 1
49195: NEG
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 3
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 1
49223: PUSH
49224: LD_INT 3
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 3
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: LD_INT 2
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 2
49254: NEG
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 3
49265: NEG
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: NEG
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49317: LD_ADDR_VAR 0 47
49321: PUSH
49322: LD_INT 0
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 0
49334: PUSH
49335: LD_INT 1
49337: NEG
49338: PUSH
49339: EMPTY
49340: LIST
49341: LIST
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: LD_INT 0
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: LD_INT 0
49365: PUSH
49366: LD_INT 1
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: PUSH
49377: LD_INT 0
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: NEG
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 2
49432: NEG
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 2
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49468: LD_ADDR_VAR 0 48
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 0
49485: PUSH
49486: LD_INT 1
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 1
49549: NEG
49550: PUSH
49551: LD_INT 2
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 0
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 1
49572: PUSH
49573: LD_INT 1
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 2
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49615: LD_ADDR_VAR 0 49
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 0
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: LD_INT 1
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 1
49673: NEG
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 2
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 2
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 2
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49759: LD_ADDR_VAR 0 50
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 0
49807: PUSH
49808: LD_INT 1
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 1
49817: NEG
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: LD_INT 1
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: LD_INT 2
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49903: LD_ADDR_VAR 0 51
49907: PUSH
49908: LD_INT 0
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 0
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: LD_INT 1
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 0
49951: PUSH
49952: LD_INT 1
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: NEG
49962: PUSH
49963: LD_INT 0
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 1
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 0
49994: PUSH
49995: LD_INT 2
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: NEG
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: NEG
50016: PUSH
50017: LD_INT 0
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: NEG
50027: PUSH
50028: LD_INT 1
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50050: LD_ADDR_VAR 0 52
50054: PUSH
50055: LD_INT 0
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: LD_INT 1
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 1
50078: PUSH
50079: LD_INT 0
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 1
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 1
50108: NEG
50109: PUSH
50110: LD_INT 0
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: NEG
50120: PUSH
50121: LD_INT 1
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 2
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: LD_INT 1
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 2
50154: NEG
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 1
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: NEG
50178: PUSH
50179: LD_INT 2
50181: NEG
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50201: LD_ADDR_VAR 0 53
50205: PUSH
50206: LD_INT 0
50208: PUSH
50209: LD_INT 0
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: LD_INT 1
50221: NEG
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 1
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 1
50259: NEG
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: NEG
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 0
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: LD_INT 1
50308: NEG
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 2
50316: PUSH
50317: LD_INT 0
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 2
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 2
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 2
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 0
50356: PUSH
50357: LD_INT 2
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: NEG
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 2
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 2
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50431: LD_ADDR_VAR 0 54
50435: PUSH
50436: LD_INT 0
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 0
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 1
50459: PUSH
50460: LD_INT 0
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 1
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: LD_INT 1
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 0
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 1
50500: NEG
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 1
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: PUSH
50567: LD_INT 2
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 2
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 1
50596: NEG
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: LD_INT 0
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 2
50630: NEG
50631: PUSH
50632: LD_INT 2
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50661: LD_ADDR_VAR 0 55
50665: PUSH
50666: LD_INT 0
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 0
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: LD_INT 0
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 0
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 0
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 0
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: LD_INT 1
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 0
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 2
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 2
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 0
50816: PUSH
50817: LD_INT 2
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 1
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 2
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: LD_INT 2
50864: NEG
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50891: LD_ADDR_VAR 0 56
50895: PUSH
50896: LD_INT 0
50898: PUSH
50899: LD_INT 0
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 0
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 1
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 1
50949: NEG
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 1
50960: NEG
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 1
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 0
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 2
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 1
51036: PUSH
51037: LD_INT 2
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 0
51046: PUSH
51047: LD_INT 2
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 1
51056: NEG
51057: PUSH
51058: LD_INT 1
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 2
51078: NEG
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 2
51090: NEG
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51121: LD_ADDR_VAR 0 57
51125: PUSH
51126: LD_INT 0
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 0
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 1
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: LD_INT 0
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 1
51202: NEG
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 1
51228: NEG
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 2
51236: PUSH
51237: LD_INT 0
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 2
51246: PUSH
51247: LD_INT 1
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: PUSH
51257: LD_INT 2
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: LD_INT 2
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: LD_INT 2
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 0
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51351: LD_ADDR_VAR 0 58
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 0
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 1
51455: PUSH
51456: LD_INT 1
51458: NEG
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: PUSH
51484: LD_INT 2
51486: PUSH
51487: LD_INT 2
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: LD_INT 2
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 0
51506: PUSH
51507: LD_INT 2
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 2
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: LIST
51564: LIST
51565: LIST
51566: LIST
51567: LIST
51568: LIST
51569: LIST
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51581: LD_ADDR_VAR 0 59
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 0
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: LD_INT 1
51609: PUSH
51610: LD_INT 0
51612: PUSH
51613: EMPTY
51614: LIST
51615: LIST
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51669: LD_ADDR_VAR 0 60
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: LD_INT 0
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 1
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 0
51717: PUSH
51718: LD_INT 1
51720: PUSH
51721: EMPTY
51722: LIST
51723: LIST
51724: PUSH
51725: LD_INT 1
51727: NEG
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: NEG
51739: PUSH
51740: LD_INT 1
51742: NEG
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51757: LD_ADDR_VAR 0 61
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51845: LD_ADDR_VAR 0 62
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 1
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 0
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: LD_INT 1
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51933: LD_ADDR_VAR 0 63
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: LD_INT 0
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 0
51950: PUSH
51951: LD_INT 1
51953: NEG
51954: PUSH
51955: EMPTY
51956: LIST
51957: LIST
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 1
51974: PUSH
51975: EMPTY
51976: LIST
51977: LIST
51978: PUSH
51979: LD_INT 0
51981: PUSH
51982: LD_INT 1
51984: PUSH
51985: EMPTY
51986: LIST
51987: LIST
51988: PUSH
51989: LD_INT 1
51991: NEG
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 1
52002: NEG
52003: PUSH
52004: LD_INT 1
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52021: LD_ADDR_VAR 0 64
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 0
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 0
52038: PUSH
52039: LD_INT 1
52041: NEG
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: PUSH
52050: LD_INT 0
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 1
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 0
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 0
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: LIST
52107: LIST
52108: ST_TO_ADDR
// end ; 1 :
52109: GO 58006
52111: LD_INT 1
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52119
52117: GO 54742
52119: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52120: LD_ADDR_VAR 0 11
52124: PUSH
52125: LD_INT 1
52127: NEG
52128: PUSH
52129: LD_INT 3
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 0
52139: PUSH
52140: LD_INT 3
52142: NEG
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 2
52153: NEG
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52164: LD_ADDR_VAR 0 12
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 3
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 3
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52205: LD_ADDR_VAR 0 13
52209: PUSH
52210: LD_INT 3
52212: PUSH
52213: LD_INT 2
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 3
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: PUSH
52240: EMPTY
52241: LIST
52242: LIST
52243: LIST
52244: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52245: LD_ADDR_VAR 0 14
52249: PUSH
52250: LD_INT 1
52252: PUSH
52253: LD_INT 3
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 1
52272: NEG
52273: PUSH
52274: LD_INT 2
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: LIST
52285: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52286: LD_ADDR_VAR 0 15
52290: PUSH
52291: LD_INT 2
52293: NEG
52294: PUSH
52295: LD_INT 1
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: LD_INT 1
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: LIST
52329: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52330: LD_ADDR_VAR 0 16
52334: PUSH
52335: LD_INT 2
52337: NEG
52338: PUSH
52339: LD_INT 3
52341: NEG
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 3
52349: NEG
52350: PUSH
52351: LD_INT 2
52353: NEG
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PUSH
52359: LD_INT 3
52361: NEG
52362: PUSH
52363: LD_INT 3
52365: NEG
52366: PUSH
52367: EMPTY
52368: LIST
52369: LIST
52370: PUSH
52371: EMPTY
52372: LIST
52373: LIST
52374: LIST
52375: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52376: LD_ADDR_VAR 0 17
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: LIST
52419: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52420: LD_ADDR_VAR 0 18
52424: PUSH
52425: LD_INT 2
52427: PUSH
52428: LD_INT 1
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: LIST
52460: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52461: LD_ADDR_VAR 0 19
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: LD_INT 2
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: LD_INT 3
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 2
52488: PUSH
52489: LD_INT 3
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: EMPTY
52497: LIST
52498: LIST
52499: LIST
52500: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52501: LD_ADDR_VAR 0 20
52505: PUSH
52506: LD_INT 1
52508: PUSH
52509: LD_INT 3
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: LD_INT 3
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: NEG
52529: PUSH
52530: LD_INT 2
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: LIST
52541: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52542: LD_ADDR_VAR 0 21
52546: PUSH
52547: LD_INT 2
52549: NEG
52550: PUSH
52551: LD_INT 1
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 3
52560: NEG
52561: PUSH
52562: LD_INT 0
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 3
52571: NEG
52572: PUSH
52573: LD_INT 1
52575: NEG
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: LIST
52585: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52586: LD_ADDR_VAR 0 22
52590: PUSH
52591: LD_INT 2
52593: NEG
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 3
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 3
52617: NEG
52618: PUSH
52619: LD_INT 3
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: LIST
52631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52632: LD_ADDR_VAR 0 23
52636: PUSH
52637: LD_INT 0
52639: PUSH
52640: LD_INT 3
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 4
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 1
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52676: LD_ADDR_VAR 0 24
52680: PUSH
52681: LD_INT 3
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 4
52704: PUSH
52705: LD_INT 1
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52717: LD_ADDR_VAR 0 25
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 4
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 3
52744: PUSH
52745: LD_INT 4
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52757: LD_ADDR_VAR 0 26
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: LD_INT 3
52767: PUSH
52768: EMPTY
52769: LIST
52770: LIST
52771: PUSH
52772: LD_INT 1
52774: PUSH
52775: LD_INT 4
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: LIST
52797: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52798: LD_ADDR_VAR 0 27
52802: PUSH
52803: LD_INT 3
52805: NEG
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: LD_INT 1
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 4
52827: NEG
52828: PUSH
52829: LD_INT 1
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: LIST
52841: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52842: LD_ADDR_VAR 0 28
52846: PUSH
52847: LD_INT 3
52849: NEG
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 3
52861: NEG
52862: PUSH
52863: LD_INT 4
52865: NEG
52866: PUSH
52867: EMPTY
52868: LIST
52869: LIST
52870: PUSH
52871: LD_INT 4
52873: NEG
52874: PUSH
52875: LD_INT 3
52877: NEG
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52888: LD_ADDR_VAR 0 29
52892: PUSH
52893: LD_INT 1
52895: NEG
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 0
52907: PUSH
52908: LD_INT 3
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 2
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 4
52933: NEG
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 4
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 1
52963: NEG
52964: PUSH
52965: LD_INT 5
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 5
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: PUSH
52987: LD_INT 4
52989: NEG
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 6
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 6
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 5
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53043: LD_ADDR_VAR 0 30
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 3
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 4
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 4
53102: PUSH
53103: LD_INT 1
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 4
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 5
53123: PUSH
53124: LD_INT 0
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 5
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 5
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 6
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 6
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53186: LD_ADDR_VAR 0 31
53190: PUSH
53191: LD_INT 3
53193: PUSH
53194: LD_INT 2
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: PUSH
53204: LD_INT 3
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 2
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 4
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 4
53233: PUSH
53234: LD_INT 4
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: LD_INT 4
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 5
53253: PUSH
53254: LD_INT 4
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 5
53263: PUSH
53264: LD_INT 5
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 4
53273: PUSH
53274: LD_INT 5
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 6
53283: PUSH
53284: LD_INT 5
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 6
53293: PUSH
53294: LD_INT 6
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 5
53303: PUSH
53304: LD_INT 6
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53325: LD_ADDR_VAR 0 32
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: LD_INT 3
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 0
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: NEG
53353: PUSH
53354: LD_INT 2
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 1
53363: PUSH
53364: LD_INT 4
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 4
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 3
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: LD_INT 5
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 0
53404: PUSH
53405: LD_INT 5
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 4
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: PUSH
53426: LD_INT 6
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 0
53435: PUSH
53436: LD_INT 6
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: LD_INT 5
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53468: LD_ADDR_VAR 0 33
53472: PUSH
53473: LD_INT 2
53475: NEG
53476: PUSH
53477: LD_INT 1
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 3
53486: NEG
53487: PUSH
53488: LD_INT 0
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 3
53497: NEG
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 3
53509: NEG
53510: PUSH
53511: LD_INT 1
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 4
53520: NEG
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 4
53531: NEG
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 4
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: PUSH
53552: LD_INT 5
53554: NEG
53555: PUSH
53556: LD_INT 0
53558: PUSH
53559: EMPTY
53560: LIST
53561: LIST
53562: PUSH
53563: LD_INT 5
53565: NEG
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: LD_INT 5
53577: NEG
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 6
53588: NEG
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 6
53599: NEG
53600: PUSH
53601: LD_INT 1
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: LIST
53617: LIST
53618: LIST
53619: LIST
53620: LIST
53621: LIST
53622: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53623: LD_ADDR_VAR 0 34
53627: PUSH
53628: LD_INT 2
53630: NEG
53631: PUSH
53632: LD_INT 3
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: LD_INT 2
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: LD_INT 3
53658: NEG
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: LD_INT 4
53670: NEG
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: PUSH
53676: LD_INT 4
53678: NEG
53679: PUSH
53680: LD_INT 3
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 4
53690: NEG
53691: PUSH
53692: LD_INT 4
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 4
53702: NEG
53703: PUSH
53704: LD_INT 5
53706: NEG
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 5
53714: NEG
53715: PUSH
53716: LD_INT 4
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: LD_INT 5
53726: NEG
53727: PUSH
53728: LD_INT 5
53730: NEG
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 5
53738: NEG
53739: PUSH
53740: LD_INT 6
53742: NEG
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 6
53750: NEG
53751: PUSH
53752: LD_INT 5
53754: NEG
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 6
53762: NEG
53763: PUSH
53764: LD_INT 6
53766: NEG
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53786: LD_ADDR_VAR 0 41
53790: PUSH
53791: LD_INT 0
53793: PUSH
53794: LD_INT 2
53796: NEG
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: NEG
53805: PUSH
53806: LD_INT 3
53808: NEG
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: LD_INT 2
53819: NEG
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: LIST
53829: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53830: LD_ADDR_VAR 0 42
53834: PUSH
53835: LD_INT 2
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 2
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 3
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: LIST
53870: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53871: LD_ADDR_VAR 0 43
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: LD_INT 3
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: LIST
53910: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53911: LD_ADDR_VAR 0 44
53915: PUSH
53916: LD_INT 0
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 2
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: LIST
53951: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53952: LD_ADDR_VAR 0 45
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: LD_INT 0
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: LD_INT 1
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: LIST
53995: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53996: LD_ADDR_VAR 0 46
54000: PUSH
54001: LD_INT 2
54003: NEG
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 2
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 3
54027: NEG
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: LIST
54041: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54042: LD_ADDR_VAR 0 47
54046: PUSH
54047: LD_INT 2
54049: NEG
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 3
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54075: LD_ADDR_VAR 0 48
54079: PUSH
54080: LD_INT 1
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54106: LD_ADDR_VAR 0 49
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54135: LD_ADDR_VAR 0 50
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 1
54152: PUSH
54153: LD_INT 3
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54164: LD_ADDR_VAR 0 51
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 1
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54195: LD_ADDR_VAR 0 52
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: LD_INT 2
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54228: LD_ADDR_VAR 0 53
54232: PUSH
54233: LD_INT 1
54235: NEG
54236: PUSH
54237: LD_INT 3
54239: NEG
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: LD_INT 3
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 1
54258: PUSH
54259: LD_INT 2
54261: NEG
54262: PUSH
54263: EMPTY
54264: LIST
54265: LIST
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: LIST
54271: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54272: LD_ADDR_VAR 0 54
54276: PUSH
54277: LD_INT 2
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 3
54290: PUSH
54291: LD_INT 0
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 3
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54313: LD_ADDR_VAR 0 55
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: LD_INT 3
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: LIST
54352: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54353: LD_ADDR_VAR 0 56
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54394: LD_ADDR_VAR 0 57
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 3
54412: NEG
54413: PUSH
54414: LD_INT 0
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: NEG
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54438: LD_ADDR_VAR 0 58
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: LD_INT 3
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 3
54457: NEG
54458: PUSH
54459: LD_INT 2
54461: NEG
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 3
54469: NEG
54470: PUSH
54471: LD_INT 3
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54484: LD_ADDR_VAR 0 59
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: LD_INT 2
54495: NEG
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: LD_INT 2
54506: NEG
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: LD_INT 1
54517: NEG
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: LIST
54527: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54528: LD_ADDR_VAR 0 60
54532: PUSH
54533: LD_INT 1
54535: PUSH
54536: LD_INT 1
54538: NEG
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54569: LD_ADDR_VAR 0 61
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: LIST
54608: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54609: LD_ADDR_VAR 0 62
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 2
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: LD_INT 2
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54650: LD_ADDR_VAR 0 63
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: LD_INT 0
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: LD_INT 1
54683: NEG
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: LIST
54693: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54694: LD_ADDR_VAR 0 64
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 2
54705: NEG
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: NEG
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: LIST
54739: ST_TO_ADDR
// end ; 2 :
54740: GO 58006
54742: LD_INT 2
54744: DOUBLE
54745: EQUAL
54746: IFTRUE 54750
54748: GO 58005
54750: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54751: LD_ADDR_VAR 0 29
54755: PUSH
54756: LD_INT 4
54758: PUSH
54759: LD_INT 0
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 4
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 5
54779: PUSH
54780: LD_INT 0
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 5
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 4
54799: PUSH
54800: LD_INT 1
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: LD_INT 2
54833: NEG
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 5
54841: PUSH
54842: LD_INT 2
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: LD_INT 3
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: PUSH
54859: LD_INT 3
54861: PUSH
54862: LD_INT 2
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 4
54871: PUSH
54872: LD_INT 3
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 4
54881: PUSH
54882: LD_INT 4
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 3
54891: PUSH
54892: LD_INT 4
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 2
54901: PUSH
54902: LD_INT 3
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 2
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 4
54921: PUSH
54922: LD_INT 2
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 4
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 4
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 0
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 4
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 5
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 5
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 4
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 3
55006: PUSH
55007: EMPTY
55008: LIST
55009: LIST
55010: PUSH
55011: LD_INT 2
55013: PUSH
55014: LD_INT 5
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 3
55034: NEG
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 3
55045: NEG
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: NEG
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: NEG
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 4
55090: NEG
55091: PUSH
55092: LD_INT 0
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 4
55101: NEG
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 4
55113: NEG
55114: PUSH
55115: LD_INT 2
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 4
55136: NEG
55137: PUSH
55138: LD_INT 4
55140: NEG
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 4
55148: NEG
55149: PUSH
55150: LD_INT 5
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: NEG
55161: PUSH
55162: LD_INT 4
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 3
55172: NEG
55173: PUSH
55174: LD_INT 3
55176: NEG
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 4
55184: NEG
55185: PUSH
55186: LD_INT 3
55188: NEG
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 5
55196: NEG
55197: PUSH
55198: LD_INT 4
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 5
55208: NEG
55209: PUSH
55210: LD_INT 5
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 5
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 5
55232: NEG
55233: PUSH
55234: LD_INT 3
55236: NEG
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: LIST
55288: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55289: LD_ADDR_VAR 0 30
55293: PUSH
55294: LD_INT 4
55296: PUSH
55297: LD_INT 4
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 4
55306: PUSH
55307: LD_INT 3
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 5
55316: PUSH
55317: LD_INT 4
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 5
55326: PUSH
55327: LD_INT 5
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 4
55336: PUSH
55337: LD_INT 5
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 3
55346: PUSH
55347: LD_INT 4
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 3
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 5
55366: PUSH
55367: LD_INT 3
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 3
55376: PUSH
55377: LD_INT 5
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 3
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 1
55406: PUSH
55407: LD_INT 3
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: PUSH
55417: LD_INT 4
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: LD_INT 4
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 3
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 1
55447: NEG
55448: PUSH
55449: LD_INT 2
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: LD_INT 4
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 2
55468: NEG
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 4
55479: NEG
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 4
55490: NEG
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 0
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: NEG
55514: PUSH
55515: LD_INT 1
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 4
55524: NEG
55525: PUSH
55526: LD_INT 1
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 5
55535: NEG
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 5
55546: NEG
55547: PUSH
55548: LD_INT 1
55550: NEG
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 5
55558: NEG
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: PUSH
55575: EMPTY
55576: LIST
55577: LIST
55578: PUSH
55579: LD_INT 3
55581: NEG
55582: PUSH
55583: LD_INT 3
55585: NEG
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 3
55593: NEG
55594: PUSH
55595: LD_INT 4
55597: NEG
55598: PUSH
55599: EMPTY
55600: LIST
55601: LIST
55602: PUSH
55603: LD_INT 2
55605: NEG
55606: PUSH
55607: LD_INT 3
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: NEG
55618: PUSH
55619: LD_INT 2
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 3
55629: NEG
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 4
55641: NEG
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 4
55653: NEG
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 2
55665: NEG
55666: PUSH
55667: LD_INT 4
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 4
55677: NEG
55678: PUSH
55679: LD_INT 2
55681: NEG
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 4
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 0
55700: PUSH
55701: LD_INT 5
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: LD_INT 4
55714: NEG
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 1
55722: PUSH
55723: LD_INT 3
55725: NEG
55726: PUSH
55727: EMPTY
55728: LIST
55729: LIST
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: LD_INT 3
55736: NEG
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 4
55748: NEG
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 1
55756: NEG
55757: PUSH
55758: LD_INT 5
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 3
55771: NEG
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 2
55779: NEG
55780: PUSH
55781: LD_INT 5
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55836: LD_ADDR_VAR 0 31
55840: PUSH
55841: LD_INT 0
55843: PUSH
55844: LD_INT 4
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 0
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: LD_INT 4
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 5
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: LD_INT 5
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: LD_INT 4
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: LD_INT 3
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 2
55915: PUSH
55916: LD_INT 5
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: LD_INT 3
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 3
55936: NEG
55937: PUSH
55938: LD_INT 0
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 3
55947: NEG
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: EMPTY
55976: LIST
55977: LIST
55978: PUSH
55979: LD_INT 3
55981: NEG
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 4
55992: NEG
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 4
56003: NEG
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 4
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: NEG
56028: PUSH
56029: LD_INT 2
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 4
56038: NEG
56039: PUSH
56040: LD_INT 4
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 4
56050: NEG
56051: PUSH
56052: LD_INT 5
56054: NEG
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 3
56062: NEG
56063: PUSH
56064: LD_INT 4
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 3
56074: NEG
56075: PUSH
56076: LD_INT 3
56078: NEG
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 4
56086: NEG
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 5
56098: NEG
56099: PUSH
56100: LD_INT 4
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 5
56110: NEG
56111: PUSH
56112: LD_INT 5
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 3
56122: NEG
56123: PUSH
56124: LD_INT 5
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 5
56134: NEG
56135: PUSH
56136: LD_INT 3
56138: NEG
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 0
56146: PUSH
56147: LD_INT 3
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 0
56157: PUSH
56158: LD_INT 4
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 3
56171: NEG
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: LD_INT 2
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 4
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 2
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: NEG
56237: PUSH
56238: LD_INT 4
56240: NEG
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 4
56248: PUSH
56249: LD_INT 0
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 4
56258: PUSH
56259: LD_INT 1
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 5
56269: PUSH
56270: LD_INT 0
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 5
56279: PUSH
56280: LD_INT 1
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 0
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 3
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: LD_INT 2
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 5
56331: PUSH
56332: LD_INT 2
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56386: LD_ADDR_VAR 0 32
56390: PUSH
56391: LD_INT 4
56393: NEG
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 4
56404: NEG
56405: PUSH
56406: LD_INT 1
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 3
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 4
56438: NEG
56439: PUSH
56440: LD_INT 1
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 5
56449: NEG
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 5
56460: NEG
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 5
56472: NEG
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 3
56484: NEG
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 3
56495: NEG
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 3
56507: NEG
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 2
56519: NEG
56520: PUSH
56521: LD_INT 3
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 2
56531: NEG
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 3
56543: NEG
56544: PUSH
56545: LD_INT 2
56547: NEG
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 4
56555: NEG
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 4
56567: NEG
56568: PUSH
56569: LD_INT 4
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 4
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 4
56591: NEG
56592: PUSH
56593: LD_INT 2
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 4
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 0
56614: PUSH
56615: LD_INT 5
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 1
56625: PUSH
56626: LD_INT 4
56628: NEG
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 1
56636: PUSH
56637: LD_INT 3
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: LD_INT 3
56650: NEG
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: NEG
56659: PUSH
56660: LD_INT 4
56662: NEG
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: LD_INT 5
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: LD_INT 3
56685: NEG
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 2
56693: NEG
56694: PUSH
56695: LD_INT 5
56697: NEG
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 3
56705: PUSH
56706: LD_INT 0
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 3
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 4
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: LD_INT 1
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: PUSH
56744: LD_INT 3
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 2
56766: PUSH
56767: LD_INT 1
56769: NEG
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: LD_INT 2
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 4
56788: PUSH
56789: LD_INT 2
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 4
56798: PUSH
56799: LD_INT 4
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 4
56808: PUSH
56809: LD_INT 3
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 5
56818: PUSH
56819: LD_INT 4
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 5
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 4
56838: PUSH
56839: LD_INT 5
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 3
56848: PUSH
56849: LD_INT 4
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 3
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 5
56868: PUSH
56869: LD_INT 3
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 3
56878: PUSH
56879: LD_INT 5
56881: PUSH
56882: EMPTY
56883: LIST
56884: LIST
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: LIST
56904: LIST
56905: LIST
56906: LIST
56907: LIST
56908: LIST
56909: LIST
56910: LIST
56911: LIST
56912: LIST
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56933: LD_ADDR_VAR 0 33
56937: PUSH
56938: LD_INT 4
56940: NEG
56941: PUSH
56942: LD_INT 4
56944: NEG
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 4
56952: NEG
56953: PUSH
56954: LD_INT 5
56956: NEG
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: PUSH
56962: LD_INT 3
56964: NEG
56965: PUSH
56966: LD_INT 4
56968: NEG
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: LD_INT 3
56976: NEG
56977: PUSH
56978: LD_INT 3
56980: NEG
56981: PUSH
56982: EMPTY
56983: LIST
56984: LIST
56985: PUSH
56986: LD_INT 4
56988: NEG
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 5
57000: NEG
57001: PUSH
57002: LD_INT 4
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 5
57012: NEG
57013: PUSH
57014: LD_INT 5
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 5
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 5
57036: NEG
57037: PUSH
57038: LD_INT 3
57040: NEG
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: LD_INT 3
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 0
57059: PUSH
57060: LD_INT 4
57062: NEG
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: PUSH
57068: LD_INT 1
57070: PUSH
57071: LD_INT 3
57073: NEG
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: PUSH
57082: LD_INT 2
57084: NEG
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 2
57095: NEG
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: LD_INT 3
57107: NEG
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: LD_INT 1
57115: NEG
57116: PUSH
57117: LD_INT 4
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: EMPTY
57133: LIST
57134: LIST
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: LD_INT 4
57142: NEG
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: PUSH
57148: LD_INT 4
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: PUSH
57158: LD_INT 4
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 5
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: EMPTY
57176: LIST
57177: LIST
57178: PUSH
57179: LD_INT 5
57181: PUSH
57182: LD_INT 1
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 4
57191: PUSH
57192: LD_INT 1
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 3
57201: PUSH
57202: LD_INT 0
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: LD_INT 3
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 3
57222: PUSH
57223: LD_INT 2
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 5
57233: PUSH
57234: LD_INT 2
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 3
57243: PUSH
57244: LD_INT 3
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: LD_INT 2
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: PUSH
57261: LD_INT 4
57263: PUSH
57264: LD_INT 3
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 4
57273: PUSH
57274: LD_INT 4
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 3
57283: PUSH
57284: LD_INT 4
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 2
57293: PUSH
57294: LD_INT 3
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 2
57303: PUSH
57304: LD_INT 2
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 4
57313: PUSH
57314: LD_INT 2
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: PUSH
57324: LD_INT 4
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 0
57333: PUSH
57334: LD_INT 4
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 3
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 4
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 5
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 5
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 1
57383: NEG
57384: PUSH
57385: LD_INT 4
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: LD_INT 3
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 2
57405: PUSH
57406: LD_INT 5
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57471: LD_ADDR_VAR 0 34
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: LD_INT 4
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 0
57489: PUSH
57490: LD_INT 5
57492: NEG
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: LD_INT 4
57503: NEG
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 1
57511: PUSH
57512: LD_INT 3
57514: NEG
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 0
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 4
57537: NEG
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: LD_INT 5
57549: NEG
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 3
57560: NEG
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 2
57568: NEG
57569: PUSH
57570: LD_INT 5
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 3
57580: PUSH
57581: LD_INT 0
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 1
57593: NEG
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 4
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 4
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: LD_INT 0
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: LD_INT 1
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 2
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 4
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 4
57673: PUSH
57674: LD_INT 4
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 4
57683: PUSH
57684: LD_INT 3
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 5
57693: PUSH
57694: LD_INT 4
57696: PUSH
57697: EMPTY
57698: LIST
57699: LIST
57700: PUSH
57701: LD_INT 5
57703: PUSH
57704: LD_INT 5
57706: PUSH
57707: EMPTY
57708: LIST
57709: LIST
57710: PUSH
57711: LD_INT 4
57713: PUSH
57714: LD_INT 5
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: LD_INT 4
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: LD_INT 3
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 5
57743: PUSH
57744: LD_INT 3
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 3
57753: PUSH
57754: LD_INT 5
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: LD_INT 3
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 2
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 1
57783: PUSH
57784: LD_INT 3
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 4
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: LD_INT 4
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: LD_INT 3
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: LD_INT 1
57824: NEG
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 2
57835: PUSH
57836: LD_INT 4
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: LD_INT 2
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 4
57856: NEG
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 4
57867: NEG
57868: PUSH
57869: LD_INT 1
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: LD_INT 3
57879: NEG
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 3
57890: NEG
57891: PUSH
57892: LD_INT 1
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 4
57901: NEG
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 5
57912: NEG
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 5
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 5
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: NEG
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 3
57947: NEG
57948: PUSH
57949: LD_INT 2
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: ST_TO_ADDR
// end ; end ;
58003: GO 58006
58005: POP
// case btype of b_depot , b_warehouse :
58006: LD_VAR 0 1
58010: PUSH
58011: LD_INT 0
58013: DOUBLE
58014: EQUAL
58015: IFTRUE 58025
58017: LD_INT 1
58019: DOUBLE
58020: EQUAL
58021: IFTRUE 58025
58023: GO 58226
58025: POP
// case nation of nation_american :
58026: LD_VAR 0 5
58030: PUSH
58031: LD_INT 1
58033: DOUBLE
58034: EQUAL
58035: IFTRUE 58039
58037: GO 58095
58039: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58040: LD_ADDR_VAR 0 9
58044: PUSH
58045: LD_VAR 0 11
58049: PUSH
58050: LD_VAR 0 12
58054: PUSH
58055: LD_VAR 0 13
58059: PUSH
58060: LD_VAR 0 14
58064: PUSH
58065: LD_VAR 0 15
58069: PUSH
58070: LD_VAR 0 16
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: PUSH
58083: LD_VAR 0 4
58087: PUSH
58088: LD_INT 1
58090: PLUS
58091: ARRAY
58092: ST_TO_ADDR
58093: GO 58224
58095: LD_INT 2
58097: DOUBLE
58098: EQUAL
58099: IFTRUE 58103
58101: GO 58159
58103: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58104: LD_ADDR_VAR 0 9
58108: PUSH
58109: LD_VAR 0 17
58113: PUSH
58114: LD_VAR 0 18
58118: PUSH
58119: LD_VAR 0 19
58123: PUSH
58124: LD_VAR 0 20
58128: PUSH
58129: LD_VAR 0 21
58133: PUSH
58134: LD_VAR 0 22
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: PUSH
58147: LD_VAR 0 4
58151: PUSH
58152: LD_INT 1
58154: PLUS
58155: ARRAY
58156: ST_TO_ADDR
58157: GO 58224
58159: LD_INT 3
58161: DOUBLE
58162: EQUAL
58163: IFTRUE 58167
58165: GO 58223
58167: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58168: LD_ADDR_VAR 0 9
58172: PUSH
58173: LD_VAR 0 23
58177: PUSH
58178: LD_VAR 0 24
58182: PUSH
58183: LD_VAR 0 25
58187: PUSH
58188: LD_VAR 0 26
58192: PUSH
58193: LD_VAR 0 27
58197: PUSH
58198: LD_VAR 0 28
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: PUSH
58211: LD_VAR 0 4
58215: PUSH
58216: LD_INT 1
58218: PLUS
58219: ARRAY
58220: ST_TO_ADDR
58221: GO 58224
58223: POP
58224: GO 58779
58226: LD_INT 2
58228: DOUBLE
58229: EQUAL
58230: IFTRUE 58240
58232: LD_INT 3
58234: DOUBLE
58235: EQUAL
58236: IFTRUE 58240
58238: GO 58296
58240: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58241: LD_ADDR_VAR 0 9
58245: PUSH
58246: LD_VAR 0 29
58250: PUSH
58251: LD_VAR 0 30
58255: PUSH
58256: LD_VAR 0 31
58260: PUSH
58261: LD_VAR 0 32
58265: PUSH
58266: LD_VAR 0 33
58270: PUSH
58271: LD_VAR 0 34
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: PUSH
58284: LD_VAR 0 4
58288: PUSH
58289: LD_INT 1
58291: PLUS
58292: ARRAY
58293: ST_TO_ADDR
58294: GO 58779
58296: LD_INT 16
58298: DOUBLE
58299: EQUAL
58300: IFTRUE 58358
58302: LD_INT 17
58304: DOUBLE
58305: EQUAL
58306: IFTRUE 58358
58308: LD_INT 18
58310: DOUBLE
58311: EQUAL
58312: IFTRUE 58358
58314: LD_INT 19
58316: DOUBLE
58317: EQUAL
58318: IFTRUE 58358
58320: LD_INT 22
58322: DOUBLE
58323: EQUAL
58324: IFTRUE 58358
58326: LD_INT 20
58328: DOUBLE
58329: EQUAL
58330: IFTRUE 58358
58332: LD_INT 21
58334: DOUBLE
58335: EQUAL
58336: IFTRUE 58358
58338: LD_INT 23
58340: DOUBLE
58341: EQUAL
58342: IFTRUE 58358
58344: LD_INT 24
58346: DOUBLE
58347: EQUAL
58348: IFTRUE 58358
58350: LD_INT 25
58352: DOUBLE
58353: EQUAL
58354: IFTRUE 58358
58356: GO 58414
58358: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58359: LD_ADDR_VAR 0 9
58363: PUSH
58364: LD_VAR 0 35
58368: PUSH
58369: LD_VAR 0 36
58373: PUSH
58374: LD_VAR 0 37
58378: PUSH
58379: LD_VAR 0 38
58383: PUSH
58384: LD_VAR 0 39
58388: PUSH
58389: LD_VAR 0 40
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: PUSH
58402: LD_VAR 0 4
58406: PUSH
58407: LD_INT 1
58409: PLUS
58410: ARRAY
58411: ST_TO_ADDR
58412: GO 58779
58414: LD_INT 6
58416: DOUBLE
58417: EQUAL
58418: IFTRUE 58470
58420: LD_INT 7
58422: DOUBLE
58423: EQUAL
58424: IFTRUE 58470
58426: LD_INT 8
58428: DOUBLE
58429: EQUAL
58430: IFTRUE 58470
58432: LD_INT 13
58434: DOUBLE
58435: EQUAL
58436: IFTRUE 58470
58438: LD_INT 12
58440: DOUBLE
58441: EQUAL
58442: IFTRUE 58470
58444: LD_INT 15
58446: DOUBLE
58447: EQUAL
58448: IFTRUE 58470
58450: LD_INT 11
58452: DOUBLE
58453: EQUAL
58454: IFTRUE 58470
58456: LD_INT 14
58458: DOUBLE
58459: EQUAL
58460: IFTRUE 58470
58462: LD_INT 10
58464: DOUBLE
58465: EQUAL
58466: IFTRUE 58470
58468: GO 58526
58470: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58471: LD_ADDR_VAR 0 9
58475: PUSH
58476: LD_VAR 0 41
58480: PUSH
58481: LD_VAR 0 42
58485: PUSH
58486: LD_VAR 0 43
58490: PUSH
58491: LD_VAR 0 44
58495: PUSH
58496: LD_VAR 0 45
58500: PUSH
58501: LD_VAR 0 46
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: PUSH
58514: LD_VAR 0 4
58518: PUSH
58519: LD_INT 1
58521: PLUS
58522: ARRAY
58523: ST_TO_ADDR
58524: GO 58779
58526: LD_INT 36
58528: DOUBLE
58529: EQUAL
58530: IFTRUE 58534
58532: GO 58590
58534: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58535: LD_ADDR_VAR 0 9
58539: PUSH
58540: LD_VAR 0 47
58544: PUSH
58545: LD_VAR 0 48
58549: PUSH
58550: LD_VAR 0 49
58554: PUSH
58555: LD_VAR 0 50
58559: PUSH
58560: LD_VAR 0 51
58564: PUSH
58565: LD_VAR 0 52
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: PUSH
58578: LD_VAR 0 4
58582: PUSH
58583: LD_INT 1
58585: PLUS
58586: ARRAY
58587: ST_TO_ADDR
58588: GO 58779
58590: LD_INT 4
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58616
58596: LD_INT 5
58598: DOUBLE
58599: EQUAL
58600: IFTRUE 58616
58602: LD_INT 34
58604: DOUBLE
58605: EQUAL
58606: IFTRUE 58616
58608: LD_INT 37
58610: DOUBLE
58611: EQUAL
58612: IFTRUE 58616
58614: GO 58672
58616: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58617: LD_ADDR_VAR 0 9
58621: PUSH
58622: LD_VAR 0 53
58626: PUSH
58627: LD_VAR 0 54
58631: PUSH
58632: LD_VAR 0 55
58636: PUSH
58637: LD_VAR 0 56
58641: PUSH
58642: LD_VAR 0 57
58646: PUSH
58647: LD_VAR 0 58
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: PUSH
58660: LD_VAR 0 4
58664: PUSH
58665: LD_INT 1
58667: PLUS
58668: ARRAY
58669: ST_TO_ADDR
58670: GO 58779
58672: LD_INT 31
58674: DOUBLE
58675: EQUAL
58676: IFTRUE 58722
58678: LD_INT 32
58680: DOUBLE
58681: EQUAL
58682: IFTRUE 58722
58684: LD_INT 33
58686: DOUBLE
58687: EQUAL
58688: IFTRUE 58722
58690: LD_INT 27
58692: DOUBLE
58693: EQUAL
58694: IFTRUE 58722
58696: LD_INT 26
58698: DOUBLE
58699: EQUAL
58700: IFTRUE 58722
58702: LD_INT 28
58704: DOUBLE
58705: EQUAL
58706: IFTRUE 58722
58708: LD_INT 29
58710: DOUBLE
58711: EQUAL
58712: IFTRUE 58722
58714: LD_INT 30
58716: DOUBLE
58717: EQUAL
58718: IFTRUE 58722
58720: GO 58778
58722: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58723: LD_ADDR_VAR 0 9
58727: PUSH
58728: LD_VAR 0 59
58732: PUSH
58733: LD_VAR 0 60
58737: PUSH
58738: LD_VAR 0 61
58742: PUSH
58743: LD_VAR 0 62
58747: PUSH
58748: LD_VAR 0 63
58752: PUSH
58753: LD_VAR 0 64
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: PUSH
58766: LD_VAR 0 4
58770: PUSH
58771: LD_INT 1
58773: PLUS
58774: ARRAY
58775: ST_TO_ADDR
58776: GO 58779
58778: POP
// temp_list2 = [ ] ;
58779: LD_ADDR_VAR 0 10
58783: PUSH
58784: EMPTY
58785: ST_TO_ADDR
// for i in temp_list do
58786: LD_ADDR_VAR 0 8
58790: PUSH
58791: LD_VAR 0 9
58795: PUSH
58796: FOR_IN
58797: IFFALSE 58849
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58799: LD_ADDR_VAR 0 10
58803: PUSH
58804: LD_VAR 0 10
58808: PUSH
58809: LD_VAR 0 8
58813: PUSH
58814: LD_INT 1
58816: ARRAY
58817: PUSH
58818: LD_VAR 0 2
58822: PLUS
58823: PUSH
58824: LD_VAR 0 8
58828: PUSH
58829: LD_INT 2
58831: ARRAY
58832: PUSH
58833: LD_VAR 0 3
58837: PLUS
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: EMPTY
58844: LIST
58845: ADD
58846: ST_TO_ADDR
58847: GO 58796
58849: POP
58850: POP
// result = temp_list2 ;
58851: LD_ADDR_VAR 0 7
58855: PUSH
58856: LD_VAR 0 10
58860: ST_TO_ADDR
// end ;
58861: LD_VAR 0 7
58865: RET
// export function EnemyInRange ( unit , dist ) ; begin
58866: LD_INT 0
58868: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58869: LD_ADDR_VAR 0 3
58873: PUSH
58874: LD_VAR 0 1
58878: PPUSH
58879: CALL_OW 255
58883: PPUSH
58884: LD_VAR 0 1
58888: PPUSH
58889: CALL_OW 250
58893: PPUSH
58894: LD_VAR 0 1
58898: PPUSH
58899: CALL_OW 251
58903: PPUSH
58904: LD_VAR 0 2
58908: PPUSH
58909: CALL 32262 0 4
58913: PUSH
58914: LD_INT 4
58916: ARRAY
58917: ST_TO_ADDR
// end ;
58918: LD_VAR 0 3
58922: RET
// export function PlayerSeeMe ( unit ) ; begin
58923: LD_INT 0
58925: PPUSH
// result := See ( your_side , unit ) ;
58926: LD_ADDR_VAR 0 2
58930: PUSH
58931: LD_OWVAR 2
58935: PPUSH
58936: LD_VAR 0 1
58940: PPUSH
58941: CALL_OW 292
58945: ST_TO_ADDR
// end ;
58946: LD_VAR 0 2
58950: RET
// export function ReverseDir ( unit ) ; begin
58951: LD_INT 0
58953: PPUSH
// if not unit then
58954: LD_VAR 0 1
58958: NOT
58959: IFFALSE 58963
// exit ;
58961: GO 58986
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58963: LD_ADDR_VAR 0 2
58967: PUSH
58968: LD_VAR 0 1
58972: PPUSH
58973: CALL_OW 254
58977: PUSH
58978: LD_INT 3
58980: PLUS
58981: PUSH
58982: LD_INT 6
58984: MOD
58985: ST_TO_ADDR
// end ;
58986: LD_VAR 0 2
58990: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58991: LD_INT 0
58993: PPUSH
58994: PPUSH
58995: PPUSH
58996: PPUSH
58997: PPUSH
// if not hexes then
58998: LD_VAR 0 2
59002: NOT
59003: IFFALSE 59007
// exit ;
59005: GO 59155
// dist := 9999 ;
59007: LD_ADDR_VAR 0 5
59011: PUSH
59012: LD_INT 9999
59014: ST_TO_ADDR
// for i = 1 to hexes do
59015: LD_ADDR_VAR 0 4
59019: PUSH
59020: DOUBLE
59021: LD_INT 1
59023: DEC
59024: ST_TO_ADDR
59025: LD_VAR 0 2
59029: PUSH
59030: FOR_TO
59031: IFFALSE 59143
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
59033: LD_VAR 0 1
59037: PPUSH
59038: LD_VAR 0 2
59042: PUSH
59043: LD_VAR 0 4
59047: ARRAY
59048: PUSH
59049: LD_INT 1
59051: ARRAY
59052: PPUSH
59053: LD_VAR 0 2
59057: PUSH
59058: LD_VAR 0 4
59062: ARRAY
59063: PUSH
59064: LD_INT 2
59066: ARRAY
59067: PPUSH
59068: CALL_OW 297
59072: PUSH
59073: LD_VAR 0 5
59077: LESS
59078: IFFALSE 59141
// begin hex := hexes [ i ] ;
59080: LD_ADDR_VAR 0 7
59084: PUSH
59085: LD_VAR 0 2
59089: PUSH
59090: LD_VAR 0 4
59094: ARRAY
59095: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59096: LD_ADDR_VAR 0 5
59100: PUSH
59101: LD_VAR 0 1
59105: PPUSH
59106: LD_VAR 0 2
59110: PUSH
59111: LD_VAR 0 4
59115: ARRAY
59116: PUSH
59117: LD_INT 1
59119: ARRAY
59120: PPUSH
59121: LD_VAR 0 2
59125: PUSH
59126: LD_VAR 0 4
59130: ARRAY
59131: PUSH
59132: LD_INT 2
59134: ARRAY
59135: PPUSH
59136: CALL_OW 297
59140: ST_TO_ADDR
// end ; end ;
59141: GO 59030
59143: POP
59144: POP
// result := hex ;
59145: LD_ADDR_VAR 0 3
59149: PUSH
59150: LD_VAR 0 7
59154: ST_TO_ADDR
// end ;
59155: LD_VAR 0 3
59159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59160: LD_INT 0
59162: PPUSH
59163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59164: LD_VAR 0 1
59168: NOT
59169: PUSH
59170: LD_VAR 0 1
59174: PUSH
59175: LD_INT 21
59177: PUSH
59178: LD_INT 2
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 23
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PPUSH
59199: CALL_OW 69
59203: IN
59204: NOT
59205: OR
59206: IFFALSE 59210
// exit ;
59208: GO 59257
// for i = 1 to 3 do
59210: LD_ADDR_VAR 0 3
59214: PUSH
59215: DOUBLE
59216: LD_INT 1
59218: DEC
59219: ST_TO_ADDR
59220: LD_INT 3
59222: PUSH
59223: FOR_TO
59224: IFFALSE 59255
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59226: LD_VAR 0 1
59230: PPUSH
59231: CALL_OW 250
59235: PPUSH
59236: LD_VAR 0 1
59240: PPUSH
59241: CALL_OW 251
59245: PPUSH
59246: LD_INT 1
59248: PPUSH
59249: CALL_OW 453
59253: GO 59223
59255: POP
59256: POP
// end ;
59257: LD_VAR 0 2
59261: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59262: LD_INT 0
59264: PPUSH
59265: PPUSH
59266: PPUSH
59267: PPUSH
59268: PPUSH
59269: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59270: LD_VAR 0 1
59274: NOT
59275: PUSH
59276: LD_VAR 0 2
59280: NOT
59281: OR
59282: PUSH
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL_OW 314
59292: OR
59293: IFFALSE 59297
// exit ;
59295: GO 59738
// x := GetX ( enemy_unit ) ;
59297: LD_ADDR_VAR 0 7
59301: PUSH
59302: LD_VAR 0 2
59306: PPUSH
59307: CALL_OW 250
59311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59312: LD_ADDR_VAR 0 8
59316: PUSH
59317: LD_VAR 0 2
59321: PPUSH
59322: CALL_OW 251
59326: ST_TO_ADDR
// if not x or not y then
59327: LD_VAR 0 7
59331: NOT
59332: PUSH
59333: LD_VAR 0 8
59337: NOT
59338: OR
59339: IFFALSE 59343
// exit ;
59341: GO 59738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59343: LD_ADDR_VAR 0 6
59347: PUSH
59348: LD_VAR 0 7
59352: PPUSH
59353: LD_INT 0
59355: PPUSH
59356: LD_INT 4
59358: PPUSH
59359: CALL_OW 272
59363: PUSH
59364: LD_VAR 0 8
59368: PPUSH
59369: LD_INT 0
59371: PPUSH
59372: LD_INT 4
59374: PPUSH
59375: CALL_OW 273
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_VAR 0 7
59388: PPUSH
59389: LD_INT 1
59391: PPUSH
59392: LD_INT 4
59394: PPUSH
59395: CALL_OW 272
59399: PUSH
59400: LD_VAR 0 8
59404: PPUSH
59405: LD_INT 1
59407: PPUSH
59408: LD_INT 4
59410: PPUSH
59411: CALL_OW 273
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_VAR 0 7
59424: PPUSH
59425: LD_INT 2
59427: PPUSH
59428: LD_INT 4
59430: PPUSH
59431: CALL_OW 272
59435: PUSH
59436: LD_VAR 0 8
59440: PPUSH
59441: LD_INT 2
59443: PPUSH
59444: LD_INT 4
59446: PPUSH
59447: CALL_OW 273
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_VAR 0 7
59460: PPUSH
59461: LD_INT 3
59463: PPUSH
59464: LD_INT 4
59466: PPUSH
59467: CALL_OW 272
59471: PUSH
59472: LD_VAR 0 8
59476: PPUSH
59477: LD_INT 3
59479: PPUSH
59480: LD_INT 4
59482: PPUSH
59483: CALL_OW 273
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_VAR 0 7
59496: PPUSH
59497: LD_INT 4
59499: PPUSH
59500: LD_INT 4
59502: PPUSH
59503: CALL_OW 272
59507: PUSH
59508: LD_VAR 0 8
59512: PPUSH
59513: LD_INT 4
59515: PPUSH
59516: LD_INT 4
59518: PPUSH
59519: CALL_OW 273
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_VAR 0 7
59532: PPUSH
59533: LD_INT 5
59535: PPUSH
59536: LD_INT 4
59538: PPUSH
59539: CALL_OW 272
59543: PUSH
59544: LD_VAR 0 8
59548: PPUSH
59549: LD_INT 5
59551: PPUSH
59552: LD_INT 4
59554: PPUSH
59555: CALL_OW 273
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
// for i = tmp downto 1 do
59572: LD_ADDR_VAR 0 4
59576: PUSH
59577: DOUBLE
59578: LD_VAR 0 6
59582: INC
59583: ST_TO_ADDR
59584: LD_INT 1
59586: PUSH
59587: FOR_DOWNTO
59588: IFFALSE 59689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59590: LD_VAR 0 6
59594: PUSH
59595: LD_VAR 0 4
59599: ARRAY
59600: PUSH
59601: LD_INT 1
59603: ARRAY
59604: PPUSH
59605: LD_VAR 0 6
59609: PUSH
59610: LD_VAR 0 4
59614: ARRAY
59615: PUSH
59616: LD_INT 2
59618: ARRAY
59619: PPUSH
59620: CALL_OW 488
59624: NOT
59625: PUSH
59626: LD_VAR 0 6
59630: PUSH
59631: LD_VAR 0 4
59635: ARRAY
59636: PUSH
59637: LD_INT 1
59639: ARRAY
59640: PPUSH
59641: LD_VAR 0 6
59645: PUSH
59646: LD_VAR 0 4
59650: ARRAY
59651: PUSH
59652: LD_INT 2
59654: ARRAY
59655: PPUSH
59656: CALL_OW 428
59660: PUSH
59661: LD_INT 0
59663: NONEQUAL
59664: OR
59665: IFFALSE 59687
// tmp := Delete ( tmp , i ) ;
59667: LD_ADDR_VAR 0 6
59671: PUSH
59672: LD_VAR 0 6
59676: PPUSH
59677: LD_VAR 0 4
59681: PPUSH
59682: CALL_OW 3
59686: ST_TO_ADDR
59687: GO 59587
59689: POP
59690: POP
// j := GetClosestHex ( unit , tmp ) ;
59691: LD_ADDR_VAR 0 5
59695: PUSH
59696: LD_VAR 0 1
59700: PPUSH
59701: LD_VAR 0 6
59705: PPUSH
59706: CALL 58991 0 2
59710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59711: LD_VAR 0 1
59715: PPUSH
59716: LD_VAR 0 5
59720: PUSH
59721: LD_INT 1
59723: ARRAY
59724: PPUSH
59725: LD_VAR 0 5
59729: PUSH
59730: LD_INT 2
59732: ARRAY
59733: PPUSH
59734: CALL_OW 111
// end ;
59738: LD_VAR 0 3
59742: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59743: LD_INT 0
59745: PPUSH
59746: PPUSH
59747: PPUSH
// uc_side = 0 ;
59748: LD_ADDR_OWVAR 20
59752: PUSH
59753: LD_INT 0
59755: ST_TO_ADDR
// uc_nation = 0 ;
59756: LD_ADDR_OWVAR 21
59760: PUSH
59761: LD_INT 0
59763: ST_TO_ADDR
// InitHc_All ( ) ;
59764: CALL_OW 584
// InitVc ;
59768: CALL_OW 20
// if mastodonts then
59772: LD_VAR 0 6
59776: IFFALSE 59843
// for i = 1 to mastodonts do
59778: LD_ADDR_VAR 0 11
59782: PUSH
59783: DOUBLE
59784: LD_INT 1
59786: DEC
59787: ST_TO_ADDR
59788: LD_VAR 0 6
59792: PUSH
59793: FOR_TO
59794: IFFALSE 59841
// begin vc_chassis := 31 ;
59796: LD_ADDR_OWVAR 37
59800: PUSH
59801: LD_INT 31
59803: ST_TO_ADDR
// vc_control := control_rider ;
59804: LD_ADDR_OWVAR 38
59808: PUSH
59809: LD_INT 4
59811: ST_TO_ADDR
// animal := CreateVehicle ;
59812: LD_ADDR_VAR 0 12
59816: PUSH
59817: CALL_OW 45
59821: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59822: LD_VAR 0 12
59826: PPUSH
59827: LD_VAR 0 8
59831: PPUSH
59832: LD_INT 0
59834: PPUSH
59835: CALL 61978 0 3
// end ;
59839: GO 59793
59841: POP
59842: POP
// if horses then
59843: LD_VAR 0 5
59847: IFFALSE 59914
// for i = 1 to horses do
59849: LD_ADDR_VAR 0 11
59853: PUSH
59854: DOUBLE
59855: LD_INT 1
59857: DEC
59858: ST_TO_ADDR
59859: LD_VAR 0 5
59863: PUSH
59864: FOR_TO
59865: IFFALSE 59912
// begin hc_class := 21 ;
59867: LD_ADDR_OWVAR 28
59871: PUSH
59872: LD_INT 21
59874: ST_TO_ADDR
// hc_gallery :=  ;
59875: LD_ADDR_OWVAR 33
59879: PUSH
59880: LD_STRING 
59882: ST_TO_ADDR
// animal := CreateHuman ;
59883: LD_ADDR_VAR 0 12
59887: PUSH
59888: CALL_OW 44
59892: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59893: LD_VAR 0 12
59897: PPUSH
59898: LD_VAR 0 8
59902: PPUSH
59903: LD_INT 0
59905: PPUSH
59906: CALL 61978 0 3
// end ;
59910: GO 59864
59912: POP
59913: POP
// if birds then
59914: LD_VAR 0 1
59918: IFFALSE 59985
// for i = 1 to birds do
59920: LD_ADDR_VAR 0 11
59924: PUSH
59925: DOUBLE
59926: LD_INT 1
59928: DEC
59929: ST_TO_ADDR
59930: LD_VAR 0 1
59934: PUSH
59935: FOR_TO
59936: IFFALSE 59983
// begin hc_class = 18 ;
59938: LD_ADDR_OWVAR 28
59942: PUSH
59943: LD_INT 18
59945: ST_TO_ADDR
// hc_gallery =  ;
59946: LD_ADDR_OWVAR 33
59950: PUSH
59951: LD_STRING 
59953: ST_TO_ADDR
// animal := CreateHuman ;
59954: LD_ADDR_VAR 0 12
59958: PUSH
59959: CALL_OW 44
59963: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59964: LD_VAR 0 12
59968: PPUSH
59969: LD_VAR 0 8
59973: PPUSH
59974: LD_INT 0
59976: PPUSH
59977: CALL 61978 0 3
// end ;
59981: GO 59935
59983: POP
59984: POP
// if tigers then
59985: LD_VAR 0 2
59989: IFFALSE 60073
// for i = 1 to tigers do
59991: LD_ADDR_VAR 0 11
59995: PUSH
59996: DOUBLE
59997: LD_INT 1
59999: DEC
60000: ST_TO_ADDR
60001: LD_VAR 0 2
60005: PUSH
60006: FOR_TO
60007: IFFALSE 60071
// begin hc_class = class_tiger ;
60009: LD_ADDR_OWVAR 28
60013: PUSH
60014: LD_INT 14
60016: ST_TO_ADDR
// hc_gallery =  ;
60017: LD_ADDR_OWVAR 33
60021: PUSH
60022: LD_STRING 
60024: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
60025: LD_ADDR_OWVAR 35
60029: PUSH
60030: LD_INT 7
60032: NEG
60033: PPUSH
60034: LD_INT 7
60036: PPUSH
60037: CALL_OW 12
60041: ST_TO_ADDR
// animal := CreateHuman ;
60042: LD_ADDR_VAR 0 12
60046: PUSH
60047: CALL_OW 44
60051: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60052: LD_VAR 0 12
60056: PPUSH
60057: LD_VAR 0 8
60061: PPUSH
60062: LD_INT 0
60064: PPUSH
60065: CALL 61978 0 3
// end ;
60069: GO 60006
60071: POP
60072: POP
// if apemans then
60073: LD_VAR 0 3
60077: IFFALSE 60200
// for i = 1 to apemans do
60079: LD_ADDR_VAR 0 11
60083: PUSH
60084: DOUBLE
60085: LD_INT 1
60087: DEC
60088: ST_TO_ADDR
60089: LD_VAR 0 3
60093: PUSH
60094: FOR_TO
60095: IFFALSE 60198
// begin hc_class = class_apeman ;
60097: LD_ADDR_OWVAR 28
60101: PUSH
60102: LD_INT 12
60104: ST_TO_ADDR
// hc_gallery =  ;
60105: LD_ADDR_OWVAR 33
60109: PUSH
60110: LD_STRING 
60112: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
60113: LD_ADDR_OWVAR 35
60117: PUSH
60118: LD_INT 2
60120: NEG
60121: PPUSH
60122: LD_INT 2
60124: PPUSH
60125: CALL_OW 12
60129: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60130: LD_ADDR_OWVAR 31
60134: PUSH
60135: LD_INT 1
60137: PPUSH
60138: LD_INT 3
60140: PPUSH
60141: CALL_OW 12
60145: PUSH
60146: LD_INT 1
60148: PPUSH
60149: LD_INT 3
60151: PPUSH
60152: CALL_OW 12
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 0
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: ST_TO_ADDR
// animal := CreateHuman ;
60169: LD_ADDR_VAR 0 12
60173: PUSH
60174: CALL_OW 44
60178: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60179: LD_VAR 0 12
60183: PPUSH
60184: LD_VAR 0 8
60188: PPUSH
60189: LD_INT 0
60191: PPUSH
60192: CALL 61978 0 3
// end ;
60196: GO 60094
60198: POP
60199: POP
// if enchidnas then
60200: LD_VAR 0 4
60204: IFFALSE 60271
// for i = 1 to enchidnas do
60206: LD_ADDR_VAR 0 11
60210: PUSH
60211: DOUBLE
60212: LD_INT 1
60214: DEC
60215: ST_TO_ADDR
60216: LD_VAR 0 4
60220: PUSH
60221: FOR_TO
60222: IFFALSE 60269
// begin hc_class = 13 ;
60224: LD_ADDR_OWVAR 28
60228: PUSH
60229: LD_INT 13
60231: ST_TO_ADDR
// hc_gallery =  ;
60232: LD_ADDR_OWVAR 33
60236: PUSH
60237: LD_STRING 
60239: ST_TO_ADDR
// animal := CreateHuman ;
60240: LD_ADDR_VAR 0 12
60244: PUSH
60245: CALL_OW 44
60249: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60250: LD_VAR 0 12
60254: PPUSH
60255: LD_VAR 0 8
60259: PPUSH
60260: LD_INT 0
60262: PPUSH
60263: CALL 61978 0 3
// end ;
60267: GO 60221
60269: POP
60270: POP
// if fishes then
60271: LD_VAR 0 7
60275: IFFALSE 60342
// for i = 1 to fishes do
60277: LD_ADDR_VAR 0 11
60281: PUSH
60282: DOUBLE
60283: LD_INT 1
60285: DEC
60286: ST_TO_ADDR
60287: LD_VAR 0 7
60291: PUSH
60292: FOR_TO
60293: IFFALSE 60340
// begin hc_class = 20 ;
60295: LD_ADDR_OWVAR 28
60299: PUSH
60300: LD_INT 20
60302: ST_TO_ADDR
// hc_gallery =  ;
60303: LD_ADDR_OWVAR 33
60307: PUSH
60308: LD_STRING 
60310: ST_TO_ADDR
// animal := CreateHuman ;
60311: LD_ADDR_VAR 0 12
60315: PUSH
60316: CALL_OW 44
60320: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60321: LD_VAR 0 12
60325: PPUSH
60326: LD_VAR 0 9
60330: PPUSH
60331: LD_INT 0
60333: PPUSH
60334: CALL 61978 0 3
// end ;
60338: GO 60292
60340: POP
60341: POP
// end ;
60342: LD_VAR 0 10
60346: RET
// export function WantHeal ( sci , unit ) ; begin
60347: LD_INT 0
60349: PPUSH
// if GetTaskList ( sci ) > 0 then
60350: LD_VAR 0 1
60354: PPUSH
60355: CALL_OW 437
60359: PUSH
60360: LD_INT 0
60362: GREATER
60363: IFFALSE 60433
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60365: LD_VAR 0 1
60369: PPUSH
60370: CALL_OW 437
60374: PUSH
60375: LD_INT 1
60377: ARRAY
60378: PUSH
60379: LD_INT 1
60381: ARRAY
60382: PUSH
60383: LD_STRING l
60385: EQUAL
60386: PUSH
60387: LD_VAR 0 1
60391: PPUSH
60392: CALL_OW 437
60396: PUSH
60397: LD_INT 1
60399: ARRAY
60400: PUSH
60401: LD_INT 4
60403: ARRAY
60404: PUSH
60405: LD_VAR 0 2
60409: EQUAL
60410: AND
60411: IFFALSE 60423
// result := true else
60413: LD_ADDR_VAR 0 3
60417: PUSH
60418: LD_INT 1
60420: ST_TO_ADDR
60421: GO 60431
// result := false ;
60423: LD_ADDR_VAR 0 3
60427: PUSH
60428: LD_INT 0
60430: ST_TO_ADDR
// end else
60431: GO 60441
// result := false ;
60433: LD_ADDR_VAR 0 3
60437: PUSH
60438: LD_INT 0
60440: ST_TO_ADDR
// end ;
60441: LD_VAR 0 3
60445: RET
// export function HealTarget ( sci ) ; begin
60446: LD_INT 0
60448: PPUSH
// if not sci then
60449: LD_VAR 0 1
60453: NOT
60454: IFFALSE 60458
// exit ;
60456: GO 60523
// result := 0 ;
60458: LD_ADDR_VAR 0 2
60462: PUSH
60463: LD_INT 0
60465: ST_TO_ADDR
// if GetTaskList ( sci ) then
60466: LD_VAR 0 1
60470: PPUSH
60471: CALL_OW 437
60475: IFFALSE 60523
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 437
60486: PUSH
60487: LD_INT 1
60489: ARRAY
60490: PUSH
60491: LD_INT 1
60493: ARRAY
60494: PUSH
60495: LD_STRING l
60497: EQUAL
60498: IFFALSE 60523
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60500: LD_ADDR_VAR 0 2
60504: PUSH
60505: LD_VAR 0 1
60509: PPUSH
60510: CALL_OW 437
60514: PUSH
60515: LD_INT 1
60517: ARRAY
60518: PUSH
60519: LD_INT 4
60521: ARRAY
60522: ST_TO_ADDR
// end ;
60523: LD_VAR 0 2
60527: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60528: LD_INT 0
60530: PPUSH
60531: PPUSH
60532: PPUSH
60533: PPUSH
// if not base_units then
60534: LD_VAR 0 1
60538: NOT
60539: IFFALSE 60543
// exit ;
60541: GO 60630
// result := false ;
60543: LD_ADDR_VAR 0 2
60547: PUSH
60548: LD_INT 0
60550: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60551: LD_ADDR_VAR 0 5
60555: PUSH
60556: LD_VAR 0 1
60560: PPUSH
60561: LD_INT 21
60563: PUSH
60564: LD_INT 3
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PPUSH
60571: CALL_OW 72
60575: ST_TO_ADDR
// if not tmp then
60576: LD_VAR 0 5
60580: NOT
60581: IFFALSE 60585
// exit ;
60583: GO 60630
// for i in tmp do
60585: LD_ADDR_VAR 0 3
60589: PUSH
60590: LD_VAR 0 5
60594: PUSH
60595: FOR_IN
60596: IFFALSE 60628
// begin result := EnemyInRange ( i , 22 ) ;
60598: LD_ADDR_VAR 0 2
60602: PUSH
60603: LD_VAR 0 3
60607: PPUSH
60608: LD_INT 22
60610: PPUSH
60611: CALL 58866 0 2
60615: ST_TO_ADDR
// if result then
60616: LD_VAR 0 2
60620: IFFALSE 60626
// exit ;
60622: POP
60623: POP
60624: GO 60630
// end ;
60626: GO 60595
60628: POP
60629: POP
// end ;
60630: LD_VAR 0 2
60634: RET
// export function FilterByTag ( units , tag ) ; begin
60635: LD_INT 0
60637: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
60638: LD_ADDR_VAR 0 3
60642: PUSH
60643: LD_VAR 0 1
60647: PPUSH
60648: LD_INT 120
60650: PUSH
60651: LD_VAR 0 2
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PPUSH
60660: CALL_OW 72
60664: ST_TO_ADDR
// end ;
60665: LD_VAR 0 3
60669: RET
// export function IsDriver ( un ) ; begin
60670: LD_INT 0
60672: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60673: LD_ADDR_VAR 0 2
60677: PUSH
60678: LD_VAR 0 1
60682: PUSH
60683: LD_INT 55
60685: PUSH
60686: EMPTY
60687: LIST
60688: PPUSH
60689: CALL_OW 69
60693: IN
60694: ST_TO_ADDR
// end ;
60695: LD_VAR 0 2
60699: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60700: LD_INT 0
60702: PPUSH
60703: PPUSH
// list := [ ] ;
60704: LD_ADDR_VAR 0 5
60708: PUSH
60709: EMPTY
60710: ST_TO_ADDR
// case d of 0 :
60711: LD_VAR 0 3
60715: PUSH
60716: LD_INT 0
60718: DOUBLE
60719: EQUAL
60720: IFTRUE 60724
60722: GO 60857
60724: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60725: LD_ADDR_VAR 0 5
60729: PUSH
60730: LD_VAR 0 1
60734: PUSH
60735: LD_INT 4
60737: MINUS
60738: PUSH
60739: LD_VAR 0 2
60743: PUSH
60744: LD_INT 4
60746: MINUS
60747: PUSH
60748: LD_INT 2
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: PUSH
60756: LD_VAR 0 1
60760: PUSH
60761: LD_INT 3
60763: MINUS
60764: PUSH
60765: LD_VAR 0 2
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: PUSH
60778: LD_VAR 0 1
60782: PUSH
60783: LD_INT 4
60785: PLUS
60786: PUSH
60787: LD_VAR 0 2
60791: PUSH
60792: LD_INT 4
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: PUSH
60800: LD_VAR 0 1
60804: PUSH
60805: LD_INT 3
60807: PLUS
60808: PUSH
60809: LD_VAR 0 2
60813: PUSH
60814: LD_INT 3
60816: PLUS
60817: PUSH
60818: LD_INT 5
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: PUSH
60826: LD_VAR 0 1
60830: PUSH
60831: LD_VAR 0 2
60835: PUSH
60836: LD_INT 4
60838: PLUS
60839: PUSH
60840: LD_INT 0
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: LIST
60852: LIST
60853: LIST
60854: ST_TO_ADDR
// end ; 1 :
60855: GO 61555
60857: LD_INT 1
60859: DOUBLE
60860: EQUAL
60861: IFTRUE 60865
60863: GO 60998
60865: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60866: LD_ADDR_VAR 0 5
60870: PUSH
60871: LD_VAR 0 1
60875: PUSH
60876: LD_VAR 0 2
60880: PUSH
60881: LD_INT 4
60883: MINUS
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: PUSH
60893: LD_VAR 0 1
60897: PUSH
60898: LD_INT 3
60900: MINUS
60901: PUSH
60902: LD_VAR 0 2
60906: PUSH
60907: LD_INT 3
60909: MINUS
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 1
60923: PUSH
60924: LD_INT 4
60926: MINUS
60927: PUSH
60928: LD_VAR 0 2
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: PUSH
60941: LD_VAR 0 1
60945: PUSH
60946: LD_VAR 0 2
60950: PUSH
60951: LD_INT 3
60953: PLUS
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: LIST
60962: PUSH
60963: LD_VAR 0 1
60967: PUSH
60968: LD_INT 4
60970: PLUS
60971: PUSH
60972: LD_VAR 0 2
60976: PUSH
60977: LD_INT 4
60979: PLUS
60980: PUSH
60981: LD_INT 5
60983: PUSH
60984: EMPTY
60985: LIST
60986: LIST
60987: LIST
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: ST_TO_ADDR
// end ; 2 :
60996: GO 61555
60998: LD_INT 2
61000: DOUBLE
61001: EQUAL
61002: IFTRUE 61006
61004: GO 61135
61006: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
61007: LD_ADDR_VAR 0 5
61011: PUSH
61012: LD_VAR 0 1
61016: PUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_INT 3
61024: MINUS
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: LIST
61033: PUSH
61034: LD_VAR 0 1
61038: PUSH
61039: LD_INT 4
61041: PLUS
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_INT 4
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: LIST
61055: PUSH
61056: LD_VAR 0 1
61060: PUSH
61061: LD_VAR 0 2
61065: PUSH
61066: LD_INT 4
61068: PLUS
61069: PUSH
61070: LD_INT 0
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: LIST
61077: PUSH
61078: LD_VAR 0 1
61082: PUSH
61083: LD_INT 3
61085: MINUS
61086: PUSH
61087: LD_VAR 0 2
61091: PUSH
61092: LD_INT 1
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: PUSH
61100: LD_VAR 0 1
61104: PUSH
61105: LD_INT 4
61107: MINUS
61108: PUSH
61109: LD_VAR 0 2
61113: PUSH
61114: LD_INT 4
61116: MINUS
61117: PUSH
61118: LD_INT 2
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: LIST
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: ST_TO_ADDR
// end ; 3 :
61133: GO 61555
61135: LD_INT 3
61137: DOUBLE
61138: EQUAL
61139: IFTRUE 61143
61141: GO 61276
61143: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61144: LD_ADDR_VAR 0 5
61148: PUSH
61149: LD_VAR 0 1
61153: PUSH
61154: LD_INT 3
61156: PLUS
61157: PUSH
61158: LD_VAR 0 2
61162: PUSH
61163: LD_INT 4
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: PUSH
61171: LD_VAR 0 1
61175: PUSH
61176: LD_INT 4
61178: PLUS
61179: PUSH
61180: LD_VAR 0 2
61184: PUSH
61185: LD_INT 4
61187: PLUS
61188: PUSH
61189: LD_INT 5
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: LIST
61196: PUSH
61197: LD_VAR 0 1
61201: PUSH
61202: LD_INT 4
61204: MINUS
61205: PUSH
61206: LD_VAR 0 2
61210: PUSH
61211: LD_INT 1
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: PUSH
61219: LD_VAR 0 1
61223: PUSH
61224: LD_VAR 0 2
61228: PUSH
61229: LD_INT 4
61231: MINUS
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: LIST
61240: PUSH
61241: LD_VAR 0 1
61245: PUSH
61246: LD_INT 3
61248: MINUS
61249: PUSH
61250: LD_VAR 0 2
61254: PUSH
61255: LD_INT 3
61257: MINUS
61258: PUSH
61259: LD_INT 2
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: LIST
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: ST_TO_ADDR
// end ; 4 :
61274: GO 61555
61276: LD_INT 4
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61284
61282: GO 61417
61284: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61285: LD_ADDR_VAR 0 5
61289: PUSH
61290: LD_VAR 0 1
61294: PUSH
61295: LD_VAR 0 2
61299: PUSH
61300: LD_INT 4
61302: PLUS
61303: PUSH
61304: LD_INT 0
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: LIST
61311: PUSH
61312: LD_VAR 0 1
61316: PUSH
61317: LD_INT 3
61319: PLUS
61320: PUSH
61321: LD_VAR 0 2
61325: PUSH
61326: LD_INT 3
61328: PLUS
61329: PUSH
61330: LD_INT 5
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: LIST
61337: PUSH
61338: LD_VAR 0 1
61342: PUSH
61343: LD_INT 4
61345: PLUS
61346: PUSH
61347: LD_VAR 0 2
61351: PUSH
61352: LD_INT 4
61354: PUSH
61355: EMPTY
61356: LIST
61357: LIST
61358: LIST
61359: PUSH
61360: LD_VAR 0 1
61364: PUSH
61365: LD_VAR 0 2
61369: PUSH
61370: LD_INT 3
61372: MINUS
61373: PUSH
61374: LD_INT 3
61376: PUSH
61377: EMPTY
61378: LIST
61379: LIST
61380: LIST
61381: PUSH
61382: LD_VAR 0 1
61386: PUSH
61387: LD_INT 4
61389: MINUS
61390: PUSH
61391: LD_VAR 0 2
61395: PUSH
61396: LD_INT 4
61398: MINUS
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: LIST
61412: LIST
61413: LIST
61414: ST_TO_ADDR
// end ; 5 :
61415: GO 61555
61417: LD_INT 5
61419: DOUBLE
61420: EQUAL
61421: IFTRUE 61425
61423: GO 61554
61425: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61426: LD_ADDR_VAR 0 5
61430: PUSH
61431: LD_VAR 0 1
61435: PUSH
61436: LD_INT 4
61438: MINUS
61439: PUSH
61440: LD_VAR 0 2
61444: PUSH
61445: LD_INT 1
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: LIST
61452: PUSH
61453: LD_VAR 0 1
61457: PUSH
61458: LD_VAR 0 2
61462: PUSH
61463: LD_INT 4
61465: MINUS
61466: PUSH
61467: LD_INT 3
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: LIST
61474: PUSH
61475: LD_VAR 0 1
61479: PUSH
61480: LD_INT 4
61482: PLUS
61483: PUSH
61484: LD_VAR 0 2
61488: PUSH
61489: LD_INT 4
61491: PLUS
61492: PUSH
61493: LD_INT 5
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: LIST
61500: PUSH
61501: LD_VAR 0 1
61505: PUSH
61506: LD_INT 3
61508: PLUS
61509: PUSH
61510: LD_VAR 0 2
61514: PUSH
61515: LD_INT 4
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: LIST
61522: PUSH
61523: LD_VAR 0 1
61527: PUSH
61528: LD_VAR 0 2
61532: PUSH
61533: LD_INT 3
61535: PLUS
61536: PUSH
61537: LD_INT 0
61539: PUSH
61540: EMPTY
61541: LIST
61542: LIST
61543: LIST
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: ST_TO_ADDR
// end ; end ;
61552: GO 61555
61554: POP
// result := list ;
61555: LD_ADDR_VAR 0 4
61559: PUSH
61560: LD_VAR 0 5
61564: ST_TO_ADDR
// end ;
61565: LD_VAR 0 4
61569: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61570: LD_INT 0
61572: PPUSH
61573: PPUSH
61574: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61575: LD_VAR 0 1
61579: NOT
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: LD_INT 1
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: LD_INT 3
61594: PUSH
61595: LD_INT 4
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: LIST
61602: LIST
61603: IN
61604: NOT
61605: OR
61606: IFFALSE 61610
// exit ;
61608: GO 61702
// tmp := [ ] ;
61610: LD_ADDR_VAR 0 5
61614: PUSH
61615: EMPTY
61616: ST_TO_ADDR
// for i in units do
61617: LD_ADDR_VAR 0 4
61621: PUSH
61622: LD_VAR 0 1
61626: PUSH
61627: FOR_IN
61628: IFFALSE 61671
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61630: LD_ADDR_VAR 0 5
61634: PUSH
61635: LD_VAR 0 5
61639: PPUSH
61640: LD_VAR 0 5
61644: PUSH
61645: LD_INT 1
61647: PLUS
61648: PPUSH
61649: LD_VAR 0 4
61653: PPUSH
61654: LD_VAR 0 2
61658: PPUSH
61659: CALL_OW 259
61663: PPUSH
61664: CALL_OW 2
61668: ST_TO_ADDR
61669: GO 61627
61671: POP
61672: POP
// if not tmp then
61673: LD_VAR 0 5
61677: NOT
61678: IFFALSE 61682
// exit ;
61680: GO 61702
// result := SortListByListDesc ( units , tmp ) ;
61682: LD_ADDR_VAR 0 3
61686: PUSH
61687: LD_VAR 0 1
61691: PPUSH
61692: LD_VAR 0 5
61696: PPUSH
61697: CALL_OW 77
61701: ST_TO_ADDR
// end ;
61702: LD_VAR 0 3
61706: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61707: LD_INT 0
61709: PPUSH
61710: PPUSH
61711: PPUSH
// result := false ;
61712: LD_ADDR_VAR 0 3
61716: PUSH
61717: LD_INT 0
61719: ST_TO_ADDR
// x := GetX ( building ) ;
61720: LD_ADDR_VAR 0 4
61724: PUSH
61725: LD_VAR 0 2
61729: PPUSH
61730: CALL_OW 250
61734: ST_TO_ADDR
// y := GetY ( building ) ;
61735: LD_ADDR_VAR 0 5
61739: PUSH
61740: LD_VAR 0 2
61744: PPUSH
61745: CALL_OW 251
61749: ST_TO_ADDR
// if not building or not x or not y then
61750: LD_VAR 0 2
61754: NOT
61755: PUSH
61756: LD_VAR 0 4
61760: NOT
61761: OR
61762: PUSH
61763: LD_VAR 0 5
61767: NOT
61768: OR
61769: IFFALSE 61773
// exit ;
61771: GO 61865
// if GetTaskList ( unit ) then
61773: LD_VAR 0 1
61777: PPUSH
61778: CALL_OW 437
61782: IFFALSE 61865
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61784: LD_STRING e
61786: PUSH
61787: LD_VAR 0 1
61791: PPUSH
61792: CALL_OW 437
61796: PUSH
61797: LD_INT 1
61799: ARRAY
61800: PUSH
61801: LD_INT 1
61803: ARRAY
61804: EQUAL
61805: PUSH
61806: LD_VAR 0 4
61810: PUSH
61811: LD_VAR 0 1
61815: PPUSH
61816: CALL_OW 437
61820: PUSH
61821: LD_INT 1
61823: ARRAY
61824: PUSH
61825: LD_INT 2
61827: ARRAY
61828: EQUAL
61829: AND
61830: PUSH
61831: LD_VAR 0 5
61835: PUSH
61836: LD_VAR 0 1
61840: PPUSH
61841: CALL_OW 437
61845: PUSH
61846: LD_INT 1
61848: ARRAY
61849: PUSH
61850: LD_INT 3
61852: ARRAY
61853: EQUAL
61854: AND
61855: IFFALSE 61865
// result := true end ;
61857: LD_ADDR_VAR 0 3
61861: PUSH
61862: LD_INT 1
61864: ST_TO_ADDR
// end ;
61865: LD_VAR 0 3
61869: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
61870: LD_INT 0
61872: PPUSH
// result := false ;
61873: LD_ADDR_VAR 0 4
61877: PUSH
61878: LD_INT 0
61880: ST_TO_ADDR
// if GetTaskList ( unit ) then
61881: LD_VAR 0 1
61885: PPUSH
61886: CALL_OW 437
61890: IFFALSE 61973
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61892: LD_STRING M
61894: PUSH
61895: LD_VAR 0 1
61899: PPUSH
61900: CALL_OW 437
61904: PUSH
61905: LD_INT 1
61907: ARRAY
61908: PUSH
61909: LD_INT 1
61911: ARRAY
61912: EQUAL
61913: PUSH
61914: LD_VAR 0 2
61918: PUSH
61919: LD_VAR 0 1
61923: PPUSH
61924: CALL_OW 437
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PUSH
61933: LD_INT 2
61935: ARRAY
61936: EQUAL
61937: AND
61938: PUSH
61939: LD_VAR 0 3
61943: PUSH
61944: LD_VAR 0 1
61948: PPUSH
61949: CALL_OW 437
61953: PUSH
61954: LD_INT 1
61956: ARRAY
61957: PUSH
61958: LD_INT 3
61960: ARRAY
61961: EQUAL
61962: AND
61963: IFFALSE 61973
// result := true ;
61965: LD_ADDR_VAR 0 4
61969: PUSH
61970: LD_INT 1
61972: ST_TO_ADDR
// end ; end ;
61973: LD_VAR 0 4
61977: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61978: LD_INT 0
61980: PPUSH
61981: PPUSH
61982: PPUSH
61983: PPUSH
// if not unit or not area then
61984: LD_VAR 0 1
61988: NOT
61989: PUSH
61990: LD_VAR 0 2
61994: NOT
61995: OR
61996: IFFALSE 62000
// exit ;
61998: GO 62164
// tmp := AreaToList ( area , i ) ;
62000: LD_ADDR_VAR 0 6
62004: PUSH
62005: LD_VAR 0 2
62009: PPUSH
62010: LD_VAR 0 5
62014: PPUSH
62015: CALL_OW 517
62019: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
62020: LD_ADDR_VAR 0 5
62024: PUSH
62025: DOUBLE
62026: LD_INT 1
62028: DEC
62029: ST_TO_ADDR
62030: LD_VAR 0 6
62034: PUSH
62035: LD_INT 1
62037: ARRAY
62038: PUSH
62039: FOR_TO
62040: IFFALSE 62162
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
62042: LD_ADDR_VAR 0 7
62046: PUSH
62047: LD_VAR 0 6
62051: PUSH
62052: LD_INT 1
62054: ARRAY
62055: PUSH
62056: LD_VAR 0 5
62060: ARRAY
62061: PUSH
62062: LD_VAR 0 6
62066: PUSH
62067: LD_INT 2
62069: ARRAY
62070: PUSH
62071: LD_VAR 0 5
62075: ARRAY
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
62081: LD_VAR 0 7
62085: PUSH
62086: LD_INT 1
62088: ARRAY
62089: PPUSH
62090: LD_VAR 0 7
62094: PUSH
62095: LD_INT 2
62097: ARRAY
62098: PPUSH
62099: CALL_OW 428
62103: PUSH
62104: LD_INT 0
62106: EQUAL
62107: IFFALSE 62160
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
62109: LD_VAR 0 1
62113: PPUSH
62114: LD_VAR 0 7
62118: PUSH
62119: LD_INT 1
62121: ARRAY
62122: PPUSH
62123: LD_VAR 0 7
62127: PUSH
62128: LD_INT 2
62130: ARRAY
62131: PPUSH
62132: LD_VAR 0 3
62136: PPUSH
62137: CALL_OW 48
// result := IsPlaced ( unit ) ;
62141: LD_ADDR_VAR 0 4
62145: PUSH
62146: LD_VAR 0 1
62150: PPUSH
62151: CALL_OW 305
62155: ST_TO_ADDR
// exit ;
62156: POP
62157: POP
62158: GO 62164
// end ; end ;
62160: GO 62039
62162: POP
62163: POP
// end ;
62164: LD_VAR 0 4
62168: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62169: LD_INT 0
62171: PPUSH
62172: PPUSH
62173: PPUSH
// if not side or side > 8 then
62174: LD_VAR 0 1
62178: NOT
62179: PUSH
62180: LD_VAR 0 1
62184: PUSH
62185: LD_INT 8
62187: GREATER
62188: OR
62189: IFFALSE 62193
// exit ;
62191: GO 62380
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62193: LD_ADDR_VAR 0 4
62197: PUSH
62198: LD_INT 22
62200: PUSH
62201: LD_VAR 0 1
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 21
62212: PUSH
62213: LD_INT 3
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PPUSH
62224: CALL_OW 69
62228: ST_TO_ADDR
// if not tmp then
62229: LD_VAR 0 4
62233: NOT
62234: IFFALSE 62238
// exit ;
62236: GO 62380
// enable_addtolog := true ;
62238: LD_ADDR_OWVAR 81
62242: PUSH
62243: LD_INT 1
62245: ST_TO_ADDR
// AddToLog ( [ ) ;
62246: LD_STRING [
62248: PPUSH
62249: CALL_OW 561
// for i in tmp do
62253: LD_ADDR_VAR 0 3
62257: PUSH
62258: LD_VAR 0 4
62262: PUSH
62263: FOR_IN
62264: IFFALSE 62371
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62266: LD_STRING [
62268: PUSH
62269: LD_VAR 0 3
62273: PPUSH
62274: CALL_OW 266
62278: STR
62279: PUSH
62280: LD_STRING , 
62282: STR
62283: PUSH
62284: LD_VAR 0 3
62288: PPUSH
62289: CALL_OW 250
62293: STR
62294: PUSH
62295: LD_STRING , 
62297: STR
62298: PUSH
62299: LD_VAR 0 3
62303: PPUSH
62304: CALL_OW 251
62308: STR
62309: PUSH
62310: LD_STRING , 
62312: STR
62313: PUSH
62314: LD_VAR 0 3
62318: PPUSH
62319: CALL_OW 254
62323: STR
62324: PUSH
62325: LD_STRING , 
62327: STR
62328: PUSH
62329: LD_VAR 0 3
62333: PPUSH
62334: LD_INT 1
62336: PPUSH
62337: CALL_OW 268
62341: STR
62342: PUSH
62343: LD_STRING , 
62345: STR
62346: PUSH
62347: LD_VAR 0 3
62351: PPUSH
62352: LD_INT 2
62354: PPUSH
62355: CALL_OW 268
62359: STR
62360: PUSH
62361: LD_STRING ],
62363: STR
62364: PPUSH
62365: CALL_OW 561
// end ;
62369: GO 62263
62371: POP
62372: POP
// AddToLog ( ]; ) ;
62373: LD_STRING ];
62375: PPUSH
62376: CALL_OW 561
// end ;
62380: LD_VAR 0 2
62384: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62385: LD_INT 0
62387: PPUSH
62388: PPUSH
62389: PPUSH
62390: PPUSH
62391: PPUSH
// if not area or not rate or not max then
62392: LD_VAR 0 1
62396: NOT
62397: PUSH
62398: LD_VAR 0 2
62402: NOT
62403: OR
62404: PUSH
62405: LD_VAR 0 4
62409: NOT
62410: OR
62411: IFFALSE 62415
// exit ;
62413: GO 62604
// while 1 do
62415: LD_INT 1
62417: IFFALSE 62604
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62419: LD_ADDR_VAR 0 9
62423: PUSH
62424: LD_VAR 0 1
62428: PPUSH
62429: LD_INT 1
62431: PPUSH
62432: CALL_OW 287
62436: PUSH
62437: LD_INT 10
62439: MUL
62440: ST_TO_ADDR
// r := rate / 10 ;
62441: LD_ADDR_VAR 0 7
62445: PUSH
62446: LD_VAR 0 2
62450: PUSH
62451: LD_INT 10
62453: DIVREAL
62454: ST_TO_ADDR
// time := 1 1$00 ;
62455: LD_ADDR_VAR 0 8
62459: PUSH
62460: LD_INT 2100
62462: ST_TO_ADDR
// if amount < min then
62463: LD_VAR 0 9
62467: PUSH
62468: LD_VAR 0 3
62472: LESS
62473: IFFALSE 62491
// r := r * 2 else
62475: LD_ADDR_VAR 0 7
62479: PUSH
62480: LD_VAR 0 7
62484: PUSH
62485: LD_INT 2
62487: MUL
62488: ST_TO_ADDR
62489: GO 62517
// if amount > max then
62491: LD_VAR 0 9
62495: PUSH
62496: LD_VAR 0 4
62500: GREATER
62501: IFFALSE 62517
// r := r / 2 ;
62503: LD_ADDR_VAR 0 7
62507: PUSH
62508: LD_VAR 0 7
62512: PUSH
62513: LD_INT 2
62515: DIVREAL
62516: ST_TO_ADDR
// time := time / r ;
62517: LD_ADDR_VAR 0 8
62521: PUSH
62522: LD_VAR 0 8
62526: PUSH
62527: LD_VAR 0 7
62531: DIVREAL
62532: ST_TO_ADDR
// if time < 0 then
62533: LD_VAR 0 8
62537: PUSH
62538: LD_INT 0
62540: LESS
62541: IFFALSE 62558
// time := time * - 1 ;
62543: LD_ADDR_VAR 0 8
62547: PUSH
62548: LD_VAR 0 8
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: MUL
62557: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
62558: LD_VAR 0 8
62562: PUSH
62563: LD_INT 35
62565: PPUSH
62566: LD_INT 875
62568: PPUSH
62569: CALL_OW 12
62573: PLUS
62574: PPUSH
62575: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62579: LD_INT 1
62581: PPUSH
62582: LD_INT 5
62584: PPUSH
62585: CALL_OW 12
62589: PPUSH
62590: LD_VAR 0 1
62594: PPUSH
62595: LD_INT 1
62597: PPUSH
62598: CALL_OW 55
// end ;
62602: GO 62415
// end ;
62604: LD_VAR 0 5
62608: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62609: LD_INT 0
62611: PPUSH
62612: PPUSH
62613: PPUSH
62614: PPUSH
62615: PPUSH
62616: PPUSH
62617: PPUSH
62618: PPUSH
// if not turrets or not factories then
62619: LD_VAR 0 1
62623: NOT
62624: PUSH
62625: LD_VAR 0 2
62629: NOT
62630: OR
62631: IFFALSE 62635
// exit ;
62633: GO 62942
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62635: LD_ADDR_VAR 0 10
62639: PUSH
62640: LD_INT 5
62642: PUSH
62643: LD_INT 6
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 2
62652: PUSH
62653: LD_INT 4
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: PUSH
62663: LD_INT 5
62665: PUSH
62666: EMPTY
62667: LIST
62668: LIST
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 24
62677: PUSH
62678: LD_INT 25
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 23
62687: PUSH
62688: LD_INT 27
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 42
62701: PUSH
62702: LD_INT 43
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 44
62711: PUSH
62712: LD_INT 46
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 45
62721: PUSH
62722: LD_INT 47
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: LIST
62738: ST_TO_ADDR
// result := [ ] ;
62739: LD_ADDR_VAR 0 3
62743: PUSH
62744: EMPTY
62745: ST_TO_ADDR
// for i in turrets do
62746: LD_ADDR_VAR 0 4
62750: PUSH
62751: LD_VAR 0 1
62755: PUSH
62756: FOR_IN
62757: IFFALSE 62940
// begin nat := GetNation ( i ) ;
62759: LD_ADDR_VAR 0 7
62763: PUSH
62764: LD_VAR 0 4
62768: PPUSH
62769: CALL_OW 248
62773: ST_TO_ADDR
// weapon := 0 ;
62774: LD_ADDR_VAR 0 8
62778: PUSH
62779: LD_INT 0
62781: ST_TO_ADDR
// if not nat then
62782: LD_VAR 0 7
62786: NOT
62787: IFFALSE 62791
// continue ;
62789: GO 62756
// for j in list [ nat ] do
62791: LD_ADDR_VAR 0 5
62795: PUSH
62796: LD_VAR 0 10
62800: PUSH
62801: LD_VAR 0 7
62805: ARRAY
62806: PUSH
62807: FOR_IN
62808: IFFALSE 62849
// if GetBWeapon ( i ) = j [ 1 ] then
62810: LD_VAR 0 4
62814: PPUSH
62815: CALL_OW 269
62819: PUSH
62820: LD_VAR 0 5
62824: PUSH
62825: LD_INT 1
62827: ARRAY
62828: EQUAL
62829: IFFALSE 62847
// begin weapon := j [ 2 ] ;
62831: LD_ADDR_VAR 0 8
62835: PUSH
62836: LD_VAR 0 5
62840: PUSH
62841: LD_INT 2
62843: ARRAY
62844: ST_TO_ADDR
// break ;
62845: GO 62849
// end ;
62847: GO 62807
62849: POP
62850: POP
// if not weapon then
62851: LD_VAR 0 8
62855: NOT
62856: IFFALSE 62860
// continue ;
62858: GO 62756
// for k in factories do
62860: LD_ADDR_VAR 0 6
62864: PUSH
62865: LD_VAR 0 2
62869: PUSH
62870: FOR_IN
62871: IFFALSE 62936
// begin weapons := AvailableWeaponList ( k ) ;
62873: LD_ADDR_VAR 0 9
62877: PUSH
62878: LD_VAR 0 6
62882: PPUSH
62883: CALL_OW 478
62887: ST_TO_ADDR
// if not weapons then
62888: LD_VAR 0 9
62892: NOT
62893: IFFALSE 62897
// continue ;
62895: GO 62870
// if weapon in weapons then
62897: LD_VAR 0 8
62901: PUSH
62902: LD_VAR 0 9
62906: IN
62907: IFFALSE 62934
// begin result := [ i , weapon ] ;
62909: LD_ADDR_VAR 0 3
62913: PUSH
62914: LD_VAR 0 4
62918: PUSH
62919: LD_VAR 0 8
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: ST_TO_ADDR
// exit ;
62928: POP
62929: POP
62930: POP
62931: POP
62932: GO 62942
// end ; end ;
62934: GO 62870
62936: POP
62937: POP
// end ;
62938: GO 62756
62940: POP
62941: POP
// end ;
62942: LD_VAR 0 3
62946: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62947: LD_INT 0
62949: PPUSH
// if not side or side > 8 then
62950: LD_VAR 0 3
62954: NOT
62955: PUSH
62956: LD_VAR 0 3
62960: PUSH
62961: LD_INT 8
62963: GREATER
62964: OR
62965: IFFALSE 62969
// exit ;
62967: GO 63028
// if not range then
62969: LD_VAR 0 4
62973: NOT
62974: IFFALSE 62985
// range := - 12 ;
62976: LD_ADDR_VAR 0 4
62980: PUSH
62981: LD_INT 12
62983: NEG
62984: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62985: LD_VAR 0 1
62989: PPUSH
62990: LD_VAR 0 2
62994: PPUSH
62995: LD_VAR 0 3
62999: PPUSH
63000: LD_VAR 0 4
63004: PPUSH
63005: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
63009: LD_VAR 0 1
63013: PPUSH
63014: LD_VAR 0 2
63018: PPUSH
63019: LD_VAR 0 3
63023: PPUSH
63024: CALL_OW 331
// end ;
63028: LD_VAR 0 5
63032: RET
// export function Video ( mode ) ; begin
63033: LD_INT 0
63035: PPUSH
// ingame_video = mode ;
63036: LD_ADDR_OWVAR 52
63040: PUSH
63041: LD_VAR 0 1
63045: ST_TO_ADDR
// interface_hidden = mode ;
63046: LD_ADDR_OWVAR 54
63050: PUSH
63051: LD_VAR 0 1
63055: ST_TO_ADDR
// end ;
63056: LD_VAR 0 2
63060: RET
// export function Join ( array , element ) ; begin
63061: LD_INT 0
63063: PPUSH
// result := Replace ( array , array + 1 , element ) ;
63064: LD_ADDR_VAR 0 3
63068: PUSH
63069: LD_VAR 0 1
63073: PPUSH
63074: LD_VAR 0 1
63078: PUSH
63079: LD_INT 1
63081: PLUS
63082: PPUSH
63083: LD_VAR 0 2
63087: PPUSH
63088: CALL_OW 1
63092: ST_TO_ADDR
// end ;
63093: LD_VAR 0 3
63097: RET
// export function JoinUnion ( array , element ) ; begin
63098: LD_INT 0
63100: PPUSH
// result := array union element ;
63101: LD_ADDR_VAR 0 3
63105: PUSH
63106: LD_VAR 0 1
63110: PUSH
63111: LD_VAR 0 2
63115: UNION
63116: ST_TO_ADDR
// end ;
63117: LD_VAR 0 3
63121: RET
// export function GetBehemoths ( side ) ; begin
63122: LD_INT 0
63124: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
63125: LD_ADDR_VAR 0 2
63129: PUSH
63130: LD_INT 22
63132: PUSH
63133: LD_VAR 0 1
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 31
63144: PUSH
63145: LD_INT 25
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PPUSH
63156: CALL_OW 69
63160: ST_TO_ADDR
// end ;
63161: LD_VAR 0 2
63165: RET
// export function Shuffle ( array ) ; var i , index ; begin
63166: LD_INT 0
63168: PPUSH
63169: PPUSH
63170: PPUSH
// result := [ ] ;
63171: LD_ADDR_VAR 0 2
63175: PUSH
63176: EMPTY
63177: ST_TO_ADDR
// if not array then
63178: LD_VAR 0 1
63182: NOT
63183: IFFALSE 63187
// exit ;
63185: GO 63286
// Randomize ;
63187: CALL_OW 10
// for i = array downto 1 do
63191: LD_ADDR_VAR 0 3
63195: PUSH
63196: DOUBLE
63197: LD_VAR 0 1
63201: INC
63202: ST_TO_ADDR
63203: LD_INT 1
63205: PUSH
63206: FOR_DOWNTO
63207: IFFALSE 63284
// begin index := rand ( 1 , array ) ;
63209: LD_ADDR_VAR 0 4
63213: PUSH
63214: LD_INT 1
63216: PPUSH
63217: LD_VAR 0 1
63221: PPUSH
63222: CALL_OW 12
63226: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63227: LD_ADDR_VAR 0 2
63231: PUSH
63232: LD_VAR 0 2
63236: PPUSH
63237: LD_VAR 0 2
63241: PUSH
63242: LD_INT 1
63244: PLUS
63245: PPUSH
63246: LD_VAR 0 1
63250: PUSH
63251: LD_VAR 0 4
63255: ARRAY
63256: PPUSH
63257: CALL_OW 2
63261: ST_TO_ADDR
// array := Delete ( array , index ) ;
63262: LD_ADDR_VAR 0 1
63266: PUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: LD_VAR 0 4
63276: PPUSH
63277: CALL_OW 3
63281: ST_TO_ADDR
// end ;
63282: GO 63206
63284: POP
63285: POP
// end ;
63286: LD_VAR 0 2
63290: RET
// export function GetBaseMaterials ( base ) ; begin
63291: LD_INT 0
63293: PPUSH
// result := [ 0 , 0 , 0 ] ;
63294: LD_ADDR_VAR 0 2
63298: PUSH
63299: LD_INT 0
63301: PUSH
63302: LD_INT 0
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: LIST
63312: ST_TO_ADDR
// if not base then
63313: LD_VAR 0 1
63317: NOT
63318: IFFALSE 63322
// exit ;
63320: GO 63371
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63322: LD_ADDR_VAR 0 2
63326: PUSH
63327: LD_VAR 0 1
63331: PPUSH
63332: LD_INT 1
63334: PPUSH
63335: CALL_OW 275
63339: PUSH
63340: LD_VAR 0 1
63344: PPUSH
63345: LD_INT 2
63347: PPUSH
63348: CALL_OW 275
63352: PUSH
63353: LD_VAR 0 1
63357: PPUSH
63358: LD_INT 3
63360: PPUSH
63361: CALL_OW 275
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: LIST
63370: ST_TO_ADDR
// end ;
63371: LD_VAR 0 2
63375: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63376: LD_INT 0
63378: PPUSH
63379: PPUSH
// result := array ;
63380: LD_ADDR_VAR 0 3
63384: PUSH
63385: LD_VAR 0 1
63389: ST_TO_ADDR
// if size > 0 then
63390: LD_VAR 0 2
63394: PUSH
63395: LD_INT 0
63397: GREATER
63398: IFFALSE 63444
// for i := array downto size do
63400: LD_ADDR_VAR 0 4
63404: PUSH
63405: DOUBLE
63406: LD_VAR 0 1
63410: INC
63411: ST_TO_ADDR
63412: LD_VAR 0 2
63416: PUSH
63417: FOR_DOWNTO
63418: IFFALSE 63442
// result := Delete ( result , result ) ;
63420: LD_ADDR_VAR 0 3
63424: PUSH
63425: LD_VAR 0 3
63429: PPUSH
63430: LD_VAR 0 3
63434: PPUSH
63435: CALL_OW 3
63439: ST_TO_ADDR
63440: GO 63417
63442: POP
63443: POP
// end ;
63444: LD_VAR 0 3
63448: RET
// export function ComExit ( unit ) ; var tmp ; begin
63449: LD_INT 0
63451: PPUSH
63452: PPUSH
// if not IsInUnit ( unit ) then
63453: LD_VAR 0 1
63457: PPUSH
63458: CALL_OW 310
63462: NOT
63463: IFFALSE 63467
// exit ;
63465: GO 63527
// tmp := IsInUnit ( unit ) ;
63467: LD_ADDR_VAR 0 3
63471: PUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: CALL_OW 310
63481: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63482: LD_VAR 0 3
63486: PPUSH
63487: CALL_OW 247
63491: PUSH
63492: LD_INT 2
63494: EQUAL
63495: IFFALSE 63508
// ComExitVehicle ( unit ) else
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 121
63506: GO 63517
// ComExitBuilding ( unit ) ;
63508: LD_VAR 0 1
63512: PPUSH
63513: CALL_OW 122
// result := tmp ;
63517: LD_ADDR_VAR 0 2
63521: PUSH
63522: LD_VAR 0 3
63526: ST_TO_ADDR
// end ;
63527: LD_VAR 0 2
63531: RET
// export function ComExitAll ( units ) ; var i ; begin
63532: LD_INT 0
63534: PPUSH
63535: PPUSH
// if not units then
63536: LD_VAR 0 1
63540: NOT
63541: IFFALSE 63545
// exit ;
63543: GO 63571
// for i in units do
63545: LD_ADDR_VAR 0 3
63549: PUSH
63550: LD_VAR 0 1
63554: PUSH
63555: FOR_IN
63556: IFFALSE 63569
// ComExit ( i ) ;
63558: LD_VAR 0 3
63562: PPUSH
63563: CALL 63449 0 1
63567: GO 63555
63569: POP
63570: POP
// end ;
63571: LD_VAR 0 2
63575: RET
// export function ResetHc ; begin
63576: LD_INT 0
63578: PPUSH
// InitHc ;
63579: CALL_OW 19
// hc_importance := 0 ;
63583: LD_ADDR_OWVAR 32
63587: PUSH
63588: LD_INT 0
63590: ST_TO_ADDR
// end ;
63591: LD_VAR 0 1
63595: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
63596: LD_INT 0
63598: PPUSH
63599: PPUSH
63600: PPUSH
// _x := ( x1 + x2 ) div 2 ;
63601: LD_ADDR_VAR 0 6
63605: PUSH
63606: LD_VAR 0 1
63610: PUSH
63611: LD_VAR 0 3
63615: PLUS
63616: PUSH
63617: LD_INT 2
63619: DIV
63620: ST_TO_ADDR
// if _x < 0 then
63621: LD_VAR 0 6
63625: PUSH
63626: LD_INT 0
63628: LESS
63629: IFFALSE 63646
// _x := _x * - 1 ;
63631: LD_ADDR_VAR 0 6
63635: PUSH
63636: LD_VAR 0 6
63640: PUSH
63641: LD_INT 1
63643: NEG
63644: MUL
63645: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
63646: LD_ADDR_VAR 0 7
63650: PUSH
63651: LD_VAR 0 2
63655: PUSH
63656: LD_VAR 0 4
63660: PLUS
63661: PUSH
63662: LD_INT 2
63664: DIV
63665: ST_TO_ADDR
// if _y < 0 then
63666: LD_VAR 0 7
63670: PUSH
63671: LD_INT 0
63673: LESS
63674: IFFALSE 63691
// _y := _y * - 1 ;
63676: LD_ADDR_VAR 0 7
63680: PUSH
63681: LD_VAR 0 7
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: MUL
63690: ST_TO_ADDR
// result := [ _x , _y ] ;
63691: LD_ADDR_VAR 0 5
63695: PUSH
63696: LD_VAR 0 6
63700: PUSH
63701: LD_VAR 0 7
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: ST_TO_ADDR
// end ;
63710: LD_VAR 0 5
63714: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
63715: LD_INT 0
63717: PPUSH
63718: PPUSH
63719: PPUSH
63720: PPUSH
// task := GetTaskList ( unit ) ;
63721: LD_ADDR_VAR 0 7
63725: PUSH
63726: LD_VAR 0 1
63730: PPUSH
63731: CALL_OW 437
63735: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
63736: LD_VAR 0 7
63740: NOT
63741: PUSH
63742: LD_VAR 0 1
63746: PPUSH
63747: LD_VAR 0 2
63751: PPUSH
63752: CALL_OW 308
63756: NOT
63757: AND
63758: IFFALSE 63762
// exit ;
63760: GO 63880
// if IsInArea ( unit , area ) then
63762: LD_VAR 0 1
63766: PPUSH
63767: LD_VAR 0 2
63771: PPUSH
63772: CALL_OW 308
63776: IFFALSE 63794
// begin ComMoveToArea ( unit , goAway ) ;
63778: LD_VAR 0 1
63782: PPUSH
63783: LD_VAR 0 3
63787: PPUSH
63788: CALL_OW 113
// exit ;
63792: GO 63880
// end ; if task [ 1 ] [ 1 ] <> M then
63794: LD_VAR 0 7
63798: PUSH
63799: LD_INT 1
63801: ARRAY
63802: PUSH
63803: LD_INT 1
63805: ARRAY
63806: PUSH
63807: LD_STRING M
63809: NONEQUAL
63810: IFFALSE 63814
// exit ;
63812: GO 63880
// x := task [ 1 ] [ 2 ] ;
63814: LD_ADDR_VAR 0 5
63818: PUSH
63819: LD_VAR 0 7
63823: PUSH
63824: LD_INT 1
63826: ARRAY
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
63832: LD_ADDR_VAR 0 6
63836: PUSH
63837: LD_VAR 0 7
63841: PUSH
63842: LD_INT 1
63844: ARRAY
63845: PUSH
63846: LD_INT 3
63848: ARRAY
63849: ST_TO_ADDR
// if InArea ( x , y , area ) then
63850: LD_VAR 0 5
63854: PPUSH
63855: LD_VAR 0 6
63859: PPUSH
63860: LD_VAR 0 2
63864: PPUSH
63865: CALL_OW 309
63869: IFFALSE 63880
// ComStop ( unit ) ;
63871: LD_VAR 0 1
63875: PPUSH
63876: CALL_OW 141
// end ;
63880: LD_VAR 0 4
63884: RET
// export function Abs ( value ) ; begin
63885: LD_INT 0
63887: PPUSH
// result := value ;
63888: LD_ADDR_VAR 0 2
63892: PUSH
63893: LD_VAR 0 1
63897: ST_TO_ADDR
// if value < 0 then
63898: LD_VAR 0 1
63902: PUSH
63903: LD_INT 0
63905: LESS
63906: IFFALSE 63923
// result := value * - 1 ;
63908: LD_ADDR_VAR 0 2
63912: PUSH
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 1
63920: NEG
63921: MUL
63922: ST_TO_ADDR
// end ;
63923: LD_VAR 0 2
63927: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
63928: LD_INT 0
63930: PPUSH
63931: PPUSH
63932: PPUSH
63933: PPUSH
63934: PPUSH
63935: PPUSH
63936: PPUSH
63937: PPUSH
// if not unit or not building then
63938: LD_VAR 0 1
63942: NOT
63943: PUSH
63944: LD_VAR 0 2
63948: NOT
63949: OR
63950: IFFALSE 63954
// exit ;
63952: GO 64180
// x := GetX ( building ) ;
63954: LD_ADDR_VAR 0 4
63958: PUSH
63959: LD_VAR 0 2
63963: PPUSH
63964: CALL_OW 250
63968: ST_TO_ADDR
// y := GetY ( building ) ;
63969: LD_ADDR_VAR 0 6
63973: PUSH
63974: LD_VAR 0 2
63978: PPUSH
63979: CALL_OW 251
63983: ST_TO_ADDR
// d := GetDir ( building ) ;
63984: LD_ADDR_VAR 0 8
63988: PUSH
63989: LD_VAR 0 2
63993: PPUSH
63994: CALL_OW 254
63998: ST_TO_ADDR
// r := 4 ;
63999: LD_ADDR_VAR 0 9
64003: PUSH
64004: LD_INT 4
64006: ST_TO_ADDR
// for i := 1 to 5 do
64007: LD_ADDR_VAR 0 10
64011: PUSH
64012: DOUBLE
64013: LD_INT 1
64015: DEC
64016: ST_TO_ADDR
64017: LD_INT 5
64019: PUSH
64020: FOR_TO
64021: IFFALSE 64178
// begin _x := ShiftX ( x , d , r + i ) ;
64023: LD_ADDR_VAR 0 5
64027: PUSH
64028: LD_VAR 0 4
64032: PPUSH
64033: LD_VAR 0 8
64037: PPUSH
64038: LD_VAR 0 9
64042: PUSH
64043: LD_VAR 0 10
64047: PLUS
64048: PPUSH
64049: CALL_OW 272
64053: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
64054: LD_ADDR_VAR 0 7
64058: PUSH
64059: LD_VAR 0 6
64063: PPUSH
64064: LD_VAR 0 8
64068: PPUSH
64069: LD_VAR 0 9
64073: PUSH
64074: LD_VAR 0 10
64078: PLUS
64079: PPUSH
64080: CALL_OW 273
64084: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
64085: LD_VAR 0 5
64089: PPUSH
64090: LD_VAR 0 7
64094: PPUSH
64095: CALL_OW 488
64099: PUSH
64100: LD_VAR 0 5
64104: PPUSH
64105: LD_VAR 0 7
64109: PPUSH
64110: CALL_OW 428
64114: PPUSH
64115: CALL_OW 247
64119: PUSH
64120: LD_INT 3
64122: PUSH
64123: LD_INT 2
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: IN
64130: NOT
64131: AND
64132: IFFALSE 64176
// begin ComMoveXY ( unit , _x , _y ) ;
64134: LD_VAR 0 1
64138: PPUSH
64139: LD_VAR 0 5
64143: PPUSH
64144: LD_VAR 0 7
64148: PPUSH
64149: CALL_OW 111
// result := [ _x , _y ] ;
64153: LD_ADDR_VAR 0 3
64157: PUSH
64158: LD_VAR 0 5
64162: PUSH
64163: LD_VAR 0 7
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: ST_TO_ADDR
// exit ;
64172: POP
64173: POP
64174: GO 64180
// end ; end ;
64176: GO 64020
64178: POP
64179: POP
// end ;
64180: LD_VAR 0 3
64184: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
64185: LD_INT 0
64187: PPUSH
64188: PPUSH
64189: PPUSH
// result := 0 ;
64190: LD_ADDR_VAR 0 3
64194: PUSH
64195: LD_INT 0
64197: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
64198: LD_VAR 0 1
64202: PUSH
64203: LD_INT 0
64205: LESS
64206: PUSH
64207: LD_VAR 0 1
64211: PUSH
64212: LD_INT 8
64214: GREATER
64215: OR
64216: PUSH
64217: LD_VAR 0 2
64221: PUSH
64222: LD_INT 0
64224: LESS
64225: OR
64226: PUSH
64227: LD_VAR 0 2
64231: PUSH
64232: LD_INT 8
64234: GREATER
64235: OR
64236: IFFALSE 64240
// exit ;
64238: GO 64315
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
64240: LD_ADDR_VAR 0 4
64244: PUSH
64245: LD_INT 22
64247: PUSH
64248: LD_VAR 0 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PPUSH
64257: CALL_OW 69
64261: PUSH
64262: FOR_IN
64263: IFFALSE 64313
// begin un := UnitShoot ( i ) ;
64265: LD_ADDR_VAR 0 5
64269: PUSH
64270: LD_VAR 0 4
64274: PPUSH
64275: CALL_OW 504
64279: ST_TO_ADDR
// if GetSide ( un ) = side1 then
64280: LD_VAR 0 5
64284: PPUSH
64285: CALL_OW 255
64289: PUSH
64290: LD_VAR 0 1
64294: EQUAL
64295: IFFALSE 64311
// begin result := un ;
64297: LD_ADDR_VAR 0 3
64301: PUSH
64302: LD_VAR 0 5
64306: ST_TO_ADDR
// exit ;
64307: POP
64308: POP
64309: GO 64315
// end ; end ;
64311: GO 64262
64313: POP
64314: POP
// end ;
64315: LD_VAR 0 3
64319: RET
// export function GetCargoBay ( units ) ; begin
64320: LD_INT 0
64322: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: LD_VAR 0 1
64332: PPUSH
64333: LD_INT 2
64335: PUSH
64336: LD_INT 34
64338: PUSH
64339: LD_INT 12
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 34
64348: PUSH
64349: LD_INT 51
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 34
64358: PUSH
64359: LD_INT 32
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 34
64368: PUSH
64369: LD_EXP 25
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: PPUSH
64385: CALL_OW 72
64389: ST_TO_ADDR
// end ;
64390: LD_VAR 0 2
64394: RET
// export function Negate ( value ) ; begin
64395: LD_INT 0
64397: PPUSH
// result := not value ;
64398: LD_ADDR_VAR 0 2
64402: PUSH
64403: LD_VAR 0 1
64407: NOT
64408: ST_TO_ADDR
// end ;
64409: LD_VAR 0 2
64413: RET
// export function Inc ( value ) ; begin
64414: LD_INT 0
64416: PPUSH
// result := value + 1 ;
64417: LD_ADDR_VAR 0 2
64421: PUSH
64422: LD_VAR 0 1
64426: PUSH
64427: LD_INT 1
64429: PLUS
64430: ST_TO_ADDR
// end ;
64431: LD_VAR 0 2
64435: RET
// export function Dec ( value ) ; begin
64436: LD_INT 0
64438: PPUSH
// result := value - 1 ;
64439: LD_ADDR_VAR 0 2
64443: PUSH
64444: LD_VAR 0 1
64448: PUSH
64449: LD_INT 1
64451: MINUS
64452: ST_TO_ADDR
// end ;
64453: LD_VAR 0 2
64457: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
64458: LD_INT 0
64460: PPUSH
64461: PPUSH
64462: PPUSH
64463: PPUSH
64464: PPUSH
64465: PPUSH
64466: PPUSH
64467: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
64468: LD_VAR 0 1
64472: PPUSH
64473: LD_VAR 0 2
64477: PPUSH
64478: CALL_OW 488
64482: NOT
64483: PUSH
64484: LD_VAR 0 3
64488: PPUSH
64489: LD_VAR 0 4
64493: PPUSH
64494: CALL_OW 488
64498: NOT
64499: OR
64500: IFFALSE 64513
// begin result := - 1 ;
64502: LD_ADDR_VAR 0 5
64506: PUSH
64507: LD_INT 1
64509: NEG
64510: ST_TO_ADDR
// exit ;
64511: GO 64748
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
64513: LD_ADDR_VAR 0 12
64517: PUSH
64518: LD_VAR 0 1
64522: PPUSH
64523: LD_VAR 0 2
64527: PPUSH
64528: LD_VAR 0 3
64532: PPUSH
64533: LD_VAR 0 4
64537: PPUSH
64538: CALL 63596 0 4
64542: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
64543: LD_ADDR_VAR 0 11
64547: PUSH
64548: LD_VAR 0 1
64552: PPUSH
64553: LD_VAR 0 2
64557: PPUSH
64558: LD_VAR 0 12
64562: PUSH
64563: LD_INT 1
64565: ARRAY
64566: PPUSH
64567: LD_VAR 0 12
64571: PUSH
64572: LD_INT 2
64574: ARRAY
64575: PPUSH
64576: CALL_OW 298
64580: ST_TO_ADDR
// distance := 9999 ;
64581: LD_ADDR_VAR 0 10
64585: PUSH
64586: LD_INT 9999
64588: ST_TO_ADDR
// for i := 0 to 5 do
64589: LD_ADDR_VAR 0 6
64593: PUSH
64594: DOUBLE
64595: LD_INT 0
64597: DEC
64598: ST_TO_ADDR
64599: LD_INT 5
64601: PUSH
64602: FOR_TO
64603: IFFALSE 64746
// begin _x := ShiftX ( x1 , i , centerDist ) ;
64605: LD_ADDR_VAR 0 7
64609: PUSH
64610: LD_VAR 0 1
64614: PPUSH
64615: LD_VAR 0 6
64619: PPUSH
64620: LD_VAR 0 11
64624: PPUSH
64625: CALL_OW 272
64629: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
64630: LD_ADDR_VAR 0 8
64634: PUSH
64635: LD_VAR 0 2
64639: PPUSH
64640: LD_VAR 0 6
64644: PPUSH
64645: LD_VAR 0 11
64649: PPUSH
64650: CALL_OW 273
64654: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
64655: LD_VAR 0 7
64659: PPUSH
64660: LD_VAR 0 8
64664: PPUSH
64665: CALL_OW 488
64669: NOT
64670: IFFALSE 64674
// continue ;
64672: GO 64602
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
64674: LD_ADDR_VAR 0 9
64678: PUSH
64679: LD_VAR 0 12
64683: PUSH
64684: LD_INT 1
64686: ARRAY
64687: PPUSH
64688: LD_VAR 0 12
64692: PUSH
64693: LD_INT 2
64695: ARRAY
64696: PPUSH
64697: LD_VAR 0 7
64701: PPUSH
64702: LD_VAR 0 8
64706: PPUSH
64707: CALL_OW 298
64711: ST_TO_ADDR
// if tmp < distance then
64712: LD_VAR 0 9
64716: PUSH
64717: LD_VAR 0 10
64721: LESS
64722: IFFALSE 64744
// begin result := i ;
64724: LD_ADDR_VAR 0 5
64728: PUSH
64729: LD_VAR 0 6
64733: ST_TO_ADDR
// distance := tmp ;
64734: LD_ADDR_VAR 0 10
64738: PUSH
64739: LD_VAR 0 9
64743: ST_TO_ADDR
// end ; end ;
64744: GO 64602
64746: POP
64747: POP
// end ;
64748: LD_VAR 0 5
64752: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64753: LD_INT 0
64755: PPUSH
64756: PPUSH
// if not driver or not IsInUnit ( driver ) then
64757: LD_VAR 0 1
64761: NOT
64762: PUSH
64763: LD_VAR 0 1
64767: PPUSH
64768: CALL_OW 310
64772: NOT
64773: OR
64774: IFFALSE 64778
// exit ;
64776: GO 64868
// vehicle := IsInUnit ( driver ) ;
64778: LD_ADDR_VAR 0 3
64782: PUSH
64783: LD_VAR 0 1
64787: PPUSH
64788: CALL_OW 310
64792: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64793: LD_VAR 0 1
64797: PPUSH
64798: LD_STRING \
64800: PUSH
64801: LD_INT 0
64803: PUSH
64804: LD_INT 0
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: LD_INT 0
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: LIST
64823: LIST
64824: LIST
64825: LIST
64826: LIST
64827: PUSH
64828: LD_STRING E
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: LD_VAR 0 3
64841: PUSH
64842: LD_INT 0
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 0
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PPUSH
64864: CALL_OW 446
// end ;
64868: LD_VAR 0 2
64872: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
64873: LD_INT 0
64875: PPUSH
64876: PPUSH
// if not driver or not IsInUnit ( driver ) then
64877: LD_VAR 0 1
64881: NOT
64882: PUSH
64883: LD_VAR 0 1
64887: PPUSH
64888: CALL_OW 310
64892: NOT
64893: OR
64894: IFFALSE 64898
// exit ;
64896: GO 64988
// vehicle := IsInUnit ( driver ) ;
64898: LD_ADDR_VAR 0 3
64902: PUSH
64903: LD_VAR 0 1
64907: PPUSH
64908: CALL_OW 310
64912: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
64913: LD_VAR 0 1
64917: PPUSH
64918: LD_STRING \
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 0
64926: PUSH
64927: LD_INT 0
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: LIST
64945: LIST
64946: LIST
64947: PUSH
64948: LD_STRING E
64950: PUSH
64951: LD_INT 0
64953: PUSH
64954: LD_INT 0
64956: PUSH
64957: LD_VAR 0 3
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: LD_INT 0
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PPUSH
64984: CALL_OW 447
// end ;
64988: LD_VAR 0 2
64992: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
64993: LD_INT 0
64995: PPUSH
64996: PPUSH
64997: PPUSH
// tmp := [ ] ;
64998: LD_ADDR_VAR 0 5
65002: PUSH
65003: EMPTY
65004: ST_TO_ADDR
// for i in units do
65005: LD_ADDR_VAR 0 4
65009: PUSH
65010: LD_VAR 0 1
65014: PUSH
65015: FOR_IN
65016: IFFALSE 65054
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
65018: LD_ADDR_VAR 0 5
65022: PUSH
65023: LD_VAR 0 5
65027: PPUSH
65028: LD_VAR 0 5
65032: PUSH
65033: LD_INT 1
65035: PLUS
65036: PPUSH
65037: LD_VAR 0 4
65041: PPUSH
65042: CALL_OW 256
65046: PPUSH
65047: CALL_OW 2
65051: ST_TO_ADDR
65052: GO 65015
65054: POP
65055: POP
// if not tmp then
65056: LD_VAR 0 5
65060: NOT
65061: IFFALSE 65065
// exit ;
65063: GO 65113
// if asc then
65065: LD_VAR 0 2
65069: IFFALSE 65093
// result := SortListByListAsc ( units , tmp ) else
65071: LD_ADDR_VAR 0 3
65075: PUSH
65076: LD_VAR 0 1
65080: PPUSH
65081: LD_VAR 0 5
65085: PPUSH
65086: CALL_OW 76
65090: ST_TO_ADDR
65091: GO 65113
// result := SortListByListDesc ( units , tmp ) ;
65093: LD_ADDR_VAR 0 3
65097: PUSH
65098: LD_VAR 0 1
65102: PPUSH
65103: LD_VAR 0 5
65107: PPUSH
65108: CALL_OW 77
65112: ST_TO_ADDR
// end ;
65113: LD_VAR 0 3
65117: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
65118: LD_INT 0
65120: PPUSH
65121: PPUSH
// task := GetTaskList ( mech ) ;
65122: LD_ADDR_VAR 0 4
65126: PUSH
65127: LD_VAR 0 1
65131: PPUSH
65132: CALL_OW 437
65136: ST_TO_ADDR
// if not task then
65137: LD_VAR 0 4
65141: NOT
65142: IFFALSE 65146
// exit ;
65144: GO 65188
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
65146: LD_ADDR_VAR 0 3
65150: PUSH
65151: LD_VAR 0 4
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PUSH
65160: LD_INT 1
65162: ARRAY
65163: PUSH
65164: LD_STRING r
65166: EQUAL
65167: PUSH
65168: LD_VAR 0 4
65172: PUSH
65173: LD_INT 1
65175: ARRAY
65176: PUSH
65177: LD_INT 4
65179: ARRAY
65180: PUSH
65181: LD_VAR 0 2
65185: EQUAL
65186: AND
65187: ST_TO_ADDR
// end ;
65188: LD_VAR 0 3
65192: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
65193: LD_INT 0
65195: PPUSH
// SetDir ( unit , d ) ;
65196: LD_VAR 0 1
65200: PPUSH
65201: LD_VAR 0 4
65205: PPUSH
65206: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
65210: LD_VAR 0 1
65214: PPUSH
65215: LD_VAR 0 2
65219: PPUSH
65220: LD_VAR 0 3
65224: PPUSH
65225: LD_VAR 0 5
65229: PPUSH
65230: CALL_OW 48
// end ;
65234: LD_VAR 0 6
65238: RET
// export function ToNaturalNumber ( number ) ; begin
65239: LD_INT 0
65241: PPUSH
// result := number div 1 ;
65242: LD_ADDR_VAR 0 2
65246: PUSH
65247: LD_VAR 0 1
65251: PUSH
65252: LD_INT 1
65254: DIV
65255: ST_TO_ADDR
// if number < 0 then
65256: LD_VAR 0 1
65260: PUSH
65261: LD_INT 0
65263: LESS
65264: IFFALSE 65274
// result := 0 ;
65266: LD_ADDR_VAR 0 2
65270: PUSH
65271: LD_INT 0
65273: ST_TO_ADDR
// end ;
65274: LD_VAR 0 2
65278: RET
// export function SortByClass ( units , class ) ; var un ; begin
65279: LD_INT 0
65281: PPUSH
65282: PPUSH
// if not units or not class then
65283: LD_VAR 0 1
65287: NOT
65288: PUSH
65289: LD_VAR 0 2
65293: NOT
65294: OR
65295: IFFALSE 65299
// exit ;
65297: GO 65394
// result := [ ] ;
65299: LD_ADDR_VAR 0 3
65303: PUSH
65304: EMPTY
65305: ST_TO_ADDR
// for un in units do
65306: LD_ADDR_VAR 0 4
65310: PUSH
65311: LD_VAR 0 1
65315: PUSH
65316: FOR_IN
65317: IFFALSE 65392
// if GetClass ( un ) = class then
65319: LD_VAR 0 4
65323: PPUSH
65324: CALL_OW 257
65328: PUSH
65329: LD_VAR 0 2
65333: EQUAL
65334: IFFALSE 65361
// result := Insert ( result , 1 , un ) else
65336: LD_ADDR_VAR 0 3
65340: PUSH
65341: LD_VAR 0 3
65345: PPUSH
65346: LD_INT 1
65348: PPUSH
65349: LD_VAR 0 4
65353: PPUSH
65354: CALL_OW 2
65358: ST_TO_ADDR
65359: GO 65390
// result := Replace ( result , result + 1 , un ) ;
65361: LD_ADDR_VAR 0 3
65365: PUSH
65366: LD_VAR 0 3
65370: PPUSH
65371: LD_VAR 0 3
65375: PUSH
65376: LD_INT 1
65378: PLUS
65379: PPUSH
65380: LD_VAR 0 4
65384: PPUSH
65385: CALL_OW 1
65389: ST_TO_ADDR
65390: GO 65316
65392: POP
65393: POP
// end ;
65394: LD_VAR 0 3
65398: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
65399: LD_INT 0
65401: PPUSH
65402: PPUSH
65403: PPUSH
65404: PPUSH
65405: PPUSH
65406: PPUSH
65407: PPUSH
// result := [ ] ;
65408: LD_ADDR_VAR 0 4
65412: PUSH
65413: EMPTY
65414: ST_TO_ADDR
// if x - r < 0 then
65415: LD_VAR 0 1
65419: PUSH
65420: LD_VAR 0 3
65424: MINUS
65425: PUSH
65426: LD_INT 0
65428: LESS
65429: IFFALSE 65441
// min_x := 0 else
65431: LD_ADDR_VAR 0 8
65435: PUSH
65436: LD_INT 0
65438: ST_TO_ADDR
65439: GO 65457
// min_x := x - r ;
65441: LD_ADDR_VAR 0 8
65445: PUSH
65446: LD_VAR 0 1
65450: PUSH
65451: LD_VAR 0 3
65455: MINUS
65456: ST_TO_ADDR
// if y - r < 0 then
65457: LD_VAR 0 2
65461: PUSH
65462: LD_VAR 0 3
65466: MINUS
65467: PUSH
65468: LD_INT 0
65470: LESS
65471: IFFALSE 65483
// min_y := 0 else
65473: LD_ADDR_VAR 0 7
65477: PUSH
65478: LD_INT 0
65480: ST_TO_ADDR
65481: GO 65499
// min_y := y - r ;
65483: LD_ADDR_VAR 0 7
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_VAR 0 3
65497: MINUS
65498: ST_TO_ADDR
// max_x := x + r ;
65499: LD_ADDR_VAR 0 9
65503: PUSH
65504: LD_VAR 0 1
65508: PUSH
65509: LD_VAR 0 3
65513: PLUS
65514: ST_TO_ADDR
// max_y := y + r ;
65515: LD_ADDR_VAR 0 10
65519: PUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_VAR 0 3
65529: PLUS
65530: ST_TO_ADDR
// for _x = min_x to max_x do
65531: LD_ADDR_VAR 0 5
65535: PUSH
65536: DOUBLE
65537: LD_VAR 0 8
65541: DEC
65542: ST_TO_ADDR
65543: LD_VAR 0 9
65547: PUSH
65548: FOR_TO
65549: IFFALSE 65650
// for _y = min_y to max_y do
65551: LD_ADDR_VAR 0 6
65555: PUSH
65556: DOUBLE
65557: LD_VAR 0 7
65561: DEC
65562: ST_TO_ADDR
65563: LD_VAR 0 10
65567: PUSH
65568: FOR_TO
65569: IFFALSE 65646
// begin if not ValidHex ( _x , _y ) then
65571: LD_VAR 0 5
65575: PPUSH
65576: LD_VAR 0 6
65580: PPUSH
65581: CALL_OW 488
65585: NOT
65586: IFFALSE 65590
// continue ;
65588: GO 65568
// if GetResourceTypeXY ( _x , _y ) then
65590: LD_VAR 0 5
65594: PPUSH
65595: LD_VAR 0 6
65599: PPUSH
65600: CALL_OW 283
65604: IFFALSE 65644
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
65606: LD_ADDR_VAR 0 4
65610: PUSH
65611: LD_VAR 0 4
65615: PPUSH
65616: LD_VAR 0 4
65620: PUSH
65621: LD_INT 1
65623: PLUS
65624: PPUSH
65625: LD_VAR 0 5
65629: PUSH
65630: LD_VAR 0 6
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PPUSH
65639: CALL_OW 1
65643: ST_TO_ADDR
// end ;
65644: GO 65568
65646: POP
65647: POP
65648: GO 65548
65650: POP
65651: POP
// end ;
65652: LD_VAR 0 4
65656: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
65657: LD_INT 0
65659: PPUSH
65660: PPUSH
65661: PPUSH
65662: PPUSH
65663: PPUSH
65664: PPUSH
65665: PPUSH
65666: PPUSH
// if not units then
65667: LD_VAR 0 1
65671: NOT
65672: IFFALSE 65676
// exit ;
65674: GO 66101
// result := UnitFilter ( units , [ f_ok ] ) ;
65676: LD_ADDR_VAR 0 3
65680: PUSH
65681: LD_VAR 0 1
65685: PPUSH
65686: LD_INT 50
65688: PUSH
65689: EMPTY
65690: LIST
65691: PPUSH
65692: CALL_OW 72
65696: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
65697: LD_ADDR_VAR 0 8
65701: PUSH
65702: LD_VAR 0 1
65706: PUSH
65707: LD_INT 1
65709: ARRAY
65710: PPUSH
65711: CALL_OW 255
65715: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
65716: LD_ADDR_VAR 0 10
65720: PUSH
65721: LD_INT 29
65723: PUSH
65724: LD_EXP 28
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: ST_TO_ADDR
// if not result then
65733: LD_VAR 0 3
65737: NOT
65738: IFFALSE 65742
// exit ;
65740: GO 66101
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
65742: LD_ADDR_VAR 0 5
65746: PUSH
65747: LD_INT 81
65749: PUSH
65750: LD_VAR 0 8
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: PPUSH
65759: CALL_OW 69
65763: ST_TO_ADDR
// for i in result do
65764: LD_ADDR_VAR 0 4
65768: PUSH
65769: LD_VAR 0 3
65773: PUSH
65774: FOR_IN
65775: IFFALSE 66099
// begin tag := GetTag ( i ) + 1 ;
65777: LD_ADDR_VAR 0 9
65781: PUSH
65782: LD_VAR 0 4
65786: PPUSH
65787: CALL_OW 110
65791: PUSH
65792: LD_INT 1
65794: PLUS
65795: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
65796: LD_ADDR_VAR 0 7
65800: PUSH
65801: LD_VAR 0 4
65805: PPUSH
65806: CALL_OW 250
65810: PPUSH
65811: LD_VAR 0 4
65815: PPUSH
65816: CALL_OW 251
65820: PPUSH
65821: LD_INT 6
65823: PPUSH
65824: CALL 65399 0 3
65828: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
65829: LD_VAR 0 7
65833: PUSH
65834: LD_VAR 0 4
65838: PPUSH
65839: CALL_OW 264
65843: PUSH
65844: LD_VAR 0 10
65848: IN
65849: NOT
65850: AND
65851: IFFALSE 65890
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
65853: LD_VAR 0 4
65857: PPUSH
65858: LD_VAR 0 7
65862: PUSH
65863: LD_INT 1
65865: ARRAY
65866: PUSH
65867: LD_INT 1
65869: ARRAY
65870: PPUSH
65871: LD_VAR 0 7
65875: PUSH
65876: LD_INT 1
65878: ARRAY
65879: PUSH
65880: LD_INT 2
65882: ARRAY
65883: PPUSH
65884: CALL_OW 116
65888: GO 66097
// if path > tag then
65890: LD_VAR 0 2
65894: PUSH
65895: LD_VAR 0 9
65899: GREATER
65900: IFFALSE 66067
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
65902: LD_ADDR_VAR 0 6
65906: PUSH
65907: LD_VAR 0 5
65911: PPUSH
65912: LD_INT 91
65914: PUSH
65915: LD_VAR 0 4
65919: PUSH
65920: LD_INT 12
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: LIST
65927: PPUSH
65928: CALL_OW 72
65932: ST_TO_ADDR
// if nearEnemy then
65933: LD_VAR 0 6
65937: IFFALSE 65965
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
65939: LD_VAR 0 4
65943: PPUSH
65944: LD_VAR 0 6
65948: PPUSH
65949: LD_VAR 0 4
65953: PPUSH
65954: CALL_OW 74
65958: PPUSH
65959: CALL_OW 115
65963: GO 66065
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
65965: LD_VAR 0 4
65969: PPUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_VAR 0 9
65979: ARRAY
65980: PUSH
65981: LD_INT 1
65983: ARRAY
65984: PPUSH
65985: LD_VAR 0 2
65989: PUSH
65990: LD_VAR 0 9
65994: ARRAY
65995: PUSH
65996: LD_INT 2
65998: ARRAY
65999: PPUSH
66000: CALL_OW 297
66004: PUSH
66005: LD_INT 6
66007: GREATER
66008: IFFALSE 66051
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
66010: LD_VAR 0 4
66014: PPUSH
66015: LD_VAR 0 2
66019: PUSH
66020: LD_VAR 0 9
66024: ARRAY
66025: PUSH
66026: LD_INT 1
66028: ARRAY
66029: PPUSH
66030: LD_VAR 0 2
66034: PUSH
66035: LD_VAR 0 9
66039: ARRAY
66040: PUSH
66041: LD_INT 2
66043: ARRAY
66044: PPUSH
66045: CALL_OW 114
66049: GO 66065
// SetTag ( i , tag ) ;
66051: LD_VAR 0 4
66055: PPUSH
66056: LD_VAR 0 9
66060: PPUSH
66061: CALL_OW 109
// end else
66065: GO 66097
// if enemy then
66067: LD_VAR 0 5
66071: IFFALSE 66097
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
66073: LD_VAR 0 4
66077: PPUSH
66078: LD_VAR 0 5
66082: PPUSH
66083: LD_VAR 0 4
66087: PPUSH
66088: CALL_OW 74
66092: PPUSH
66093: CALL_OW 115
// end ;
66097: GO 65774
66099: POP
66100: POP
// end ;
66101: LD_VAR 0 3
66105: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
66106: LD_INT 0
66108: PPUSH
66109: PPUSH
66110: PPUSH
// if not unit or IsInUnit ( unit ) then
66111: LD_VAR 0 1
66115: NOT
66116: PUSH
66117: LD_VAR 0 1
66121: PPUSH
66122: CALL_OW 310
66126: OR
66127: IFFALSE 66131
// exit ;
66129: GO 66222
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
66131: LD_ADDR_VAR 0 4
66135: PUSH
66136: LD_VAR 0 1
66140: PPUSH
66141: CALL_OW 250
66145: PPUSH
66146: LD_VAR 0 2
66150: PPUSH
66151: LD_INT 1
66153: PPUSH
66154: CALL_OW 272
66158: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
66159: LD_ADDR_VAR 0 5
66163: PUSH
66164: LD_VAR 0 1
66168: PPUSH
66169: CALL_OW 251
66173: PPUSH
66174: LD_VAR 0 2
66178: PPUSH
66179: LD_INT 1
66181: PPUSH
66182: CALL_OW 273
66186: ST_TO_ADDR
// if ValidHex ( x , y ) then
66187: LD_VAR 0 4
66191: PPUSH
66192: LD_VAR 0 5
66196: PPUSH
66197: CALL_OW 488
66201: IFFALSE 66222
// ComTurnXY ( unit , x , y ) ;
66203: LD_VAR 0 1
66207: PPUSH
66208: LD_VAR 0 4
66212: PPUSH
66213: LD_VAR 0 5
66217: PPUSH
66218: CALL_OW 118
// end ;
66222: LD_VAR 0 3
66226: RET
// export function SeeUnits ( side , units ) ; var i ; begin
66227: LD_INT 0
66229: PPUSH
66230: PPUSH
// result := false ;
66231: LD_ADDR_VAR 0 3
66235: PUSH
66236: LD_INT 0
66238: ST_TO_ADDR
// if not units then
66239: LD_VAR 0 2
66243: NOT
66244: IFFALSE 66248
// exit ;
66246: GO 66293
// for i in units do
66248: LD_ADDR_VAR 0 4
66252: PUSH
66253: LD_VAR 0 2
66257: PUSH
66258: FOR_IN
66259: IFFALSE 66291
// if See ( side , i ) then
66261: LD_VAR 0 1
66265: PPUSH
66266: LD_VAR 0 4
66270: PPUSH
66271: CALL_OW 292
66275: IFFALSE 66289
// begin result := true ;
66277: LD_ADDR_VAR 0 3
66281: PUSH
66282: LD_INT 1
66284: ST_TO_ADDR
// exit ;
66285: POP
66286: POP
66287: GO 66293
// end ;
66289: GO 66258
66291: POP
66292: POP
// end ;
66293: LD_VAR 0 3
66297: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
66298: LD_INT 0
66300: PPUSH
66301: PPUSH
66302: PPUSH
66303: PPUSH
// if not unit or not points then
66304: LD_VAR 0 1
66308: NOT
66309: PUSH
66310: LD_VAR 0 2
66314: NOT
66315: OR
66316: IFFALSE 66320
// exit ;
66318: GO 66410
// dist := 99999 ;
66320: LD_ADDR_VAR 0 5
66324: PUSH
66325: LD_INT 99999
66327: ST_TO_ADDR
// for i in points do
66328: LD_ADDR_VAR 0 4
66332: PUSH
66333: LD_VAR 0 2
66337: PUSH
66338: FOR_IN
66339: IFFALSE 66408
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
66341: LD_ADDR_VAR 0 6
66345: PUSH
66346: LD_VAR 0 1
66350: PPUSH
66351: LD_VAR 0 4
66355: PUSH
66356: LD_INT 1
66358: ARRAY
66359: PPUSH
66360: LD_VAR 0 4
66364: PUSH
66365: LD_INT 2
66367: ARRAY
66368: PPUSH
66369: CALL_OW 297
66373: ST_TO_ADDR
// if tmpDist < dist then
66374: LD_VAR 0 6
66378: PUSH
66379: LD_VAR 0 5
66383: LESS
66384: IFFALSE 66406
// begin result := i ;
66386: LD_ADDR_VAR 0 3
66390: PUSH
66391: LD_VAR 0 4
66395: ST_TO_ADDR
// dist := tmpDist ;
66396: LD_ADDR_VAR 0 5
66400: PUSH
66401: LD_VAR 0 6
66405: ST_TO_ADDR
// end ; end ;
66406: GO 66338
66408: POP
66409: POP
// end ; end_of_file
66410: LD_VAR 0 3
66414: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
66415: LD_VAR 0 1
66419: PUSH
66420: LD_INT 200
66422: DOUBLE
66423: GREATEREQUAL
66424: IFFALSE 66432
66426: LD_INT 299
66428: DOUBLE
66429: LESSEQUAL
66430: IFTRUE 66434
66432: GO 66466
66434: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
66435: LD_VAR 0 1
66439: PPUSH
66440: LD_VAR 0 2
66444: PPUSH
66445: LD_VAR 0 3
66449: PPUSH
66450: LD_VAR 0 4
66454: PPUSH
66455: LD_VAR 0 5
66459: PPUSH
66460: CALL 22118 0 5
66464: GO 66543
66466: LD_INT 300
66468: DOUBLE
66469: GREATEREQUAL
66470: IFFALSE 66478
66472: LD_INT 399
66474: DOUBLE
66475: LESSEQUAL
66476: IFTRUE 66480
66478: GO 66542
66480: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
66481: LD_VAR 0 1
66485: PPUSH
66486: LD_VAR 0 2
66490: PPUSH
66491: LD_VAR 0 3
66495: PPUSH
66496: LD_VAR 0 4
66500: PPUSH
66501: LD_VAR 0 5
66505: PPUSH
66506: LD_VAR 0 6
66510: PPUSH
66511: LD_VAR 0 7
66515: PPUSH
66516: LD_VAR 0 8
66520: PPUSH
66521: LD_VAR 0 9
66525: PPUSH
66526: LD_VAR 0 10
66530: PPUSH
66531: LD_VAR 0 11
66535: PPUSH
66536: CALL 19760 0 11
66540: GO 66543
66542: POP
// end ;
66543: PPOPN 11
66545: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
66546: LD_VAR 0 1
66550: PPUSH
66551: LD_VAR 0 2
66555: PPUSH
66556: LD_VAR 0 3
66560: PPUSH
66561: LD_VAR 0 4
66565: PPUSH
66566: LD_VAR 0 5
66570: PPUSH
66571: CALL 21854 0 5
// end ; end_of_file
66575: PPOPN 5
66577: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
66578: LD_VAR 0 1
66582: PPUSH
66583: LD_VAR 0 2
66587: PPUSH
66588: LD_VAR 0 3
66592: PPUSH
66593: LD_VAR 0 4
66597: PPUSH
66598: LD_VAR 0 5
66602: PPUSH
66603: LD_VAR 0 6
66607: PPUSH
66608: CALL 7453 0 6
// end ;
66612: PPOPN 6
66614: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66615: CALL 7428 0 0
// end ;
66619: PPOPN 1
66621: END
