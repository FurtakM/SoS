// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// Randomize ;
  11: CALL_OW 10
// InitVariables ;
  15: CALL 94 0 0
// InitMacro ;
  19: CALL 17382 0 0
// if debug then
  23: LD_EXP 1
  27: IFFALSE 36
// FogOff ( 1 ) ;
  29: LD_INT 1
  31: PPUSH
  32: CALL_OW 344
// ChangeSideFog ( 8 , 1 ) ;
  36: LD_INT 8
  38: PPUSH
  39: LD_INT 1
  41: PPUSH
  42: CALL_OW 343
// PrepareNature ( 4 , 3 , 6 , 3 , 2 , 0 , 7 , natureArea , waterArea ) ;
  46: LD_INT 4
  48: PPUSH
  49: LD_INT 3
  51: PPUSH
  52: LD_INT 6
  54: PPUSH
  55: LD_INT 3
  57: PPUSH
  58: LD_INT 2
  60: PPUSH
  61: LD_INT 0
  63: PPUSH
  64: LD_INT 7
  66: PPUSH
  67: LD_INT 18
  69: PPUSH
  70: LD_INT 19
  72: PPUSH
  73: CALL 82387 0 9
// PrepareAmerican ;
  77: CALL 562 0 0
// PrepareArabian ;
  81: CALL 2234 0 0
// MC_Start ( ) ;
  85: CALL 19494 0 0
// Action ;
  89: CALL 8072 0 0
// end ;
  93: END
// export debug , game ; export mission_prefix , mission_prefix_prev ; export ar_run , base_captured , ar_patrol , us_scout , seen , can_kamikazed , kamikazed , artifact_stolen , artifact_get , artifact_oncargo , game_time , powell_warn , loses_counter , gensher_active , selected , am_veh_consturcted ; function InitVariables ; begin
  94: LD_INT 0
  96: PPUSH
// debug := false ;
  97: LD_ADDR_EXP 1
 101: PUSH
 102: LD_INT 0
 104: ST_TO_ADDR
// game := true ;
 105: LD_ADDR_EXP 2
 109: PUSH
 110: LD_INT 1
 112: ST_TO_ADDR
// mission_prefix := 11_ ;
 113: LD_ADDR_EXP 3
 117: PUSH
 118: LD_STRING 11_
 120: ST_TO_ADDR
// mission_prefix_prev := 10c_ ;
 121: LD_ADDR_EXP 4
 125: PUSH
 126: LD_STRING 10c_
 128: ST_TO_ADDR
// ar_run := false ;
 129: LD_ADDR_EXP 5
 133: PUSH
 134: LD_INT 0
 136: ST_TO_ADDR
// ar_patrol := false ;
 137: LD_ADDR_EXP 7
 141: PUSH
 142: LD_INT 0
 144: ST_TO_ADDR
// base_captured := false ;
 145: LD_ADDR_EXP 6
 149: PUSH
 150: LD_INT 0
 152: ST_TO_ADDR
// us_scout := 0 ;
 153: LD_ADDR_EXP 8
 157: PUSH
 158: LD_INT 0
 160: ST_TO_ADDR
// seen := [ 0 , 0 , 0 , 0 , 0 ] ;
 161: LD_ADDR_EXP 9
 165: PUSH
 166: LD_INT 0
 168: PUSH
 169: LD_INT 0
 171: PUSH
 172: LD_INT 0
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: LD_INT 0
 180: PUSH
 181: EMPTY
 182: LIST
 183: LIST
 184: LIST
 185: LIST
 186: LIST
 187: ST_TO_ADDR
// kamikazed := false ;
 188: LD_ADDR_EXP 11
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// artifact_stolen := false ;
 196: LD_ADDR_EXP 12
 200: PUSH
 201: LD_INT 0
 203: ST_TO_ADDR
// artifact_get := false ;
 204: LD_ADDR_EXP 13
 208: PUSH
 209: LD_INT 0
 211: ST_TO_ADDR
// game_time := [ 130 130$00 , 120 120$00 , 115 115$00 ] [ Difficulty ] ;
 212: LD_ADDR_EXP 15
 216: PUSH
 217: LD_INT 273000
 219: PUSH
 220: LD_INT 252000
 222: PUSH
 223: LD_INT 241500
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: LIST
 230: PUSH
 231: LD_OWVAR 67
 235: ARRAY
 236: ST_TO_ADDR
// powell_warn := false ;
 237: LD_ADDR_EXP 16
 241: PUSH
 242: LD_INT 0
 244: ST_TO_ADDR
// loses_counter := 0 ;
 245: LD_ADDR_EXP 17
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// artifact_oncargo := false ;
 253: LD_ADDR_EXP 14
 257: PUSH
 258: LD_INT 0
 260: ST_TO_ADDR
// gensher_active := LoadVariable ( 10_GensherEscape_1 , debug ) ;
 261: LD_ADDR_EXP 18
 265: PUSH
 266: LD_STRING 10_GensherEscape_1
 268: PPUSH
 269: LD_EXP 1
 273: PPUSH
 274: CALL_OW 30
 278: ST_TO_ADDR
// can_kamikazed := false ;
 279: LD_ADDR_EXP 10
 283: PUSH
 284: LD_INT 0
 286: ST_TO_ADDR
// am_veh_consturcted := false ;
 287: LD_ADDR_EXP 20
 291: PUSH
 292: LD_INT 0
 294: ST_TO_ADDR
// end ;
 295: LD_VAR 0 1
 299: RET
// export function CustomInitMacro ; var i ; begin
 300: LD_INT 0
 302: PPUSH
 303: PPUSH
// mc_parking := [ parking_north , parking_west , parking_east ] ;
 304: LD_ADDR_EXP 74
 308: PUSH
 309: LD_INT 20
 311: PUSH
 312: LD_INT 21
 314: PUSH
 315: LD_INT 22
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: ST_TO_ADDR
// mc_scan_area := [ base_north , base_west , base_east ] ;
 323: LD_ADDR_EXP 75
 327: PUSH
 328: LD_INT 28
 330: PUSH
 331: LD_INT 24
 333: PUSH
 334: LD_INT 26
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: LIST
 341: ST_TO_ADDR
// MC_SetMinesField ( 1 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield1_left ) ;
 342: LD_INT 1
 344: PPUSH
 345: LD_INT 4
 347: PUSH
 348: LD_INT 6
 350: PUSH
 351: LD_INT 9
 353: PUSH
 354: EMPTY
 355: LIST
 356: LIST
 357: LIST
 358: PUSH
 359: LD_OWVAR 67
 363: ARRAY
 364: PPUSH
 365: LD_INT 3
 367: PPUSH
 368: CALL 40711 0 3
// MC_SetMinesField ( 2 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield2_left ) ;
 372: LD_INT 2
 374: PPUSH
 375: LD_INT 4
 377: PUSH
 378: LD_INT 6
 380: PUSH
 381: LD_INT 9
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: LIST
 388: PUSH
 389: LD_OWVAR 67
 393: ARRAY
 394: PPUSH
 395: LD_INT 2
 397: PPUSH
 398: CALL 40711 0 3
// MC_SetMinesField ( 3 , [ 4 , 6 , 9 ] [ Difficulty ] , minefield3_left ) ;
 402: LD_INT 3
 404: PPUSH
 405: LD_INT 4
 407: PUSH
 408: LD_INT 6
 410: PUSH
 411: LD_INT 9
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: LIST
 418: PUSH
 419: LD_OWVAR 67
 423: ARRAY
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: CALL 40711 0 3
// for i = 1 to mc_bases do
 432: LD_ADDR_VAR 0 2
 436: PUSH
 437: DOUBLE
 438: LD_INT 1
 440: DEC
 441: ST_TO_ADDR
 442: LD_EXP 50
 446: PUSH
 447: FOR_TO
 448: IFFALSE 472
// MC_SetDefenderList ( i , ar_defenders_tmp [ i ] ) ;
 450: LD_VAR 0 2
 454: PPUSH
 455: LD_EXP 43
 459: PUSH
 460: LD_VAR 0 2
 464: ARRAY
 465: PPUSH
 466: CALL 41137 0 2
 470: GO 447
 472: POP
 473: POP
// end ;
 474: LD_VAR 0 1
 478: RET
// function Debuger ; var i ; begin
 479: LD_INT 0
 481: PPUSH
 482: PPUSH
// if not debug then
 483: LD_EXP 1
 487: NOT
 488: IFFALSE 492
// exit ;
 490: GO 528
// game_speed := 5 ;
 492: LD_ADDR_OWVAR 65
 496: PUSH
 497: LD_INT 5
 499: ST_TO_ADDR
// uc_side := 1 ;
 500: LD_ADDR_OWVAR 20
 504: PUSH
 505: LD_INT 1
 507: ST_TO_ADDR
// uc_nation := 1 ;
 508: LD_ADDR_OWVAR 21
 512: PUSH
 513: LD_INT 1
 515: ST_TO_ADDR
// SetSide ( ar_force_south , 1 ) ;
 516: LD_EXP 36
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL_OW 235
// end ;
 528: LD_VAR 0 1
 532: RET
// every 0 0$1 trigger IsDead ( ar_dep_n ) and IsOk ( ar_dep_w ) do
 533: LD_INT 94
 535: PPUSH
 536: CALL_OW 301
 540: PUSH
 541: LD_INT 45
 543: PPUSH
 544: CALL_OW 302
 548: AND
 549: IFFALSE 561
 551: GO 553
 553: DISABLE
// SetAchievement ( ACH_EAST ) ; end_of_file
 554: LD_STRING ACH_EAST
 556: PPUSH
 557: CALL_OW 543
 561: END
// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Frank , Kikuchi ; export function PrepareAmerican ; var i , k , un , tmp , vehs , veh , others ; begin
 562: LD_INT 0
 564: PPUSH
 565: PPUSH
 566: PPUSH
 567: PPUSH
 568: PPUSH
 569: PPUSH
 570: PPUSH
 571: PPUSH
// uc_side := 4 ;
 572: LD_ADDR_OWVAR 20
 576: PUSH
 577: LD_INT 4
 579: ST_TO_ADDR
// uc_nation := 1 ;
 580: LD_ADDR_OWVAR 21
 584: PUSH
 585: LD_INT 1
 587: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 588: LD_ADDR_EXP 30
 592: PUSH
 593: LD_STRING Powell
 595: PPUSH
 596: LD_INT 0
 598: PPUSH
 599: LD_STRING 
 601: PPUSH
 602: CALL 47421 0 3
 606: ST_TO_ADDR
// uc_side := 1 ;
 607: LD_ADDR_OWVAR 20
 611: PUSH
 612: LD_INT 1
 614: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prefix_prev ) ;
 615: LD_ADDR_EXP 21
 619: PUSH
 620: LD_STRING JMM
 622: PPUSH
 623: LD_EXP 1
 627: NOT
 628: PPUSH
 629: LD_EXP 4
 633: PPUSH
 634: CALL 47421 0 3
 638: ST_TO_ADDR
// if GetClass ( JMM ) > 4 then
 639: LD_EXP 21
 643: PPUSH
 644: CALL_OW 257
 648: PUSH
 649: LD_INT 4
 651: GREATER
 652: IFFALSE 666
// SetClass ( JMM , 1 ) ;
 654: LD_EXP 21
 658: PPUSH
 659: LD_INT 1
 661: PPUSH
 662: CALL_OW 336
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prefix_prev ) ;
 666: LD_ADDR_EXP 22
 670: PUSH
 671: LD_STRING Lisa
 673: PPUSH
 674: LD_EXP 1
 678: NOT
 679: PPUSH
 680: LD_EXP 4
 684: PPUSH
 685: CALL 47421 0 3
 689: ST_TO_ADDR
// if not Lisa then
 690: LD_EXP 22
 694: NOT
 695: IFFALSE 710
// Lisa := CreateCharacter ( 10_Lisa ) ;
 697: LD_ADDR_EXP 22
 701: PUSH
 702: LD_STRING 10_Lisa
 704: PPUSH
 705: CALL_OW 34
 709: ST_TO_ADDR
// if not Lisa then
 710: LD_EXP 22
 714: NOT
 715: IFFALSE 730
// Lisa := CreateCharacter ( 09_Lisa ) ;
 717: LD_ADDR_EXP 22
 721: PUSH
 722: LD_STRING 09_Lisa
 724: PPUSH
 725: CALL_OW 34
 729: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornel , ( not debug ) , mission_prefix_prev ) ;
 730: LD_ADDR_EXP 31
 734: PUSH
 735: LD_STRING Cornel
 737: PPUSH
 738: LD_EXP 1
 742: NOT
 743: PPUSH
 744: LD_EXP 4
 748: PPUSH
 749: CALL 47421 0 3
 753: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prefix_prev ) ;
 754: LD_ADDR_EXP 23
 758: PUSH
 759: LD_STRING Donaldson
 761: PPUSH
 762: LD_EXP 1
 766: NOT
 767: PPUSH
 768: LD_EXP 4
 772: PPUSH
 773: CALL 47421 0 3
 777: ST_TO_ADDR
// if not Donaldson then
 778: LD_EXP 23
 782: NOT
 783: IFFALSE 798
// Donaldson := CreateCharacter ( 10_Donaldson ) ;
 785: LD_ADDR_EXP 23
 789: PUSH
 790: LD_STRING 10_Donaldson
 792: PPUSH
 793: CALL_OW 34
 797: ST_TO_ADDR
// if not Donaldson then
 798: LD_EXP 23
 802: NOT
 803: IFFALSE 818
// Donaldson := CreateCharacter ( 09_Donaldson ) ;
 805: LD_ADDR_EXP 23
 809: PUSH
 810: LD_STRING 09_Donaldson
 812: PPUSH
 813: CALL_OW 34
 817: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prefix_prev ) ;
 818: LD_ADDR_EXP 24
 822: PUSH
 823: LD_STRING Bobby
 825: PPUSH
 826: LD_EXP 1
 830: NOT
 831: PPUSH
 832: LD_EXP 4
 836: PPUSH
 837: CALL 47421 0 3
 841: ST_TO_ADDR
// if not Bobby then
 842: LD_EXP 24
 846: NOT
 847: IFFALSE 862
// Bobby := CreateCharacter ( 10_Bobby ) ;
 849: LD_ADDR_EXP 24
 853: PUSH
 854: LD_STRING 10_Bobby
 856: PPUSH
 857: CALL_OW 34
 861: ST_TO_ADDR
// if not Bobby then
 862: LD_EXP 24
 866: NOT
 867: IFFALSE 882
// Bobby := CreateCharacter ( 09_Bobby ) ;
 869: LD_ADDR_EXP 24
 873: PUSH
 874: LD_STRING 09_Bobby
 876: PPUSH
 877: CALL_OW 34
 881: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prefix_prev ) ;
 882: LD_ADDR_EXP 25
 886: PUSH
 887: LD_STRING Cyrus
 889: PPUSH
 890: LD_EXP 1
 894: NOT
 895: PPUSH
 896: LD_EXP 4
 900: PPUSH
 901: CALL 47421 0 3
 905: ST_TO_ADDR
// if not Cyrus then
 906: LD_EXP 25
 910: NOT
 911: IFFALSE 926
// Cyrus := CreateCharacter ( 10_Cyrus ) ;
 913: LD_ADDR_EXP 25
 917: PUSH
 918: LD_STRING 10_Cyrus
 920: PPUSH
 921: CALL_OW 34
 925: ST_TO_ADDR
// if not Cyrus then
 926: LD_EXP 25
 930: NOT
 931: IFFALSE 946
// Cyrus := CreateCharacter ( 09_Cyrus ) ;
 933: LD_ADDR_EXP 25
 937: PUSH
 938: LD_STRING 09_Cyrus
 940: PPUSH
 941: CALL_OW 34
 945: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , mission_prefix_prev ) ;
 946: LD_ADDR_EXP 26
 950: PUSH
 951: LD_STRING Denis
 953: PPUSH
 954: LD_EXP 1
 958: NOT
 959: PPUSH
 960: LD_EXP 4
 964: PPUSH
 965: CALL 47421 0 3
 969: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prefix_prev ) ;
 970: LD_ADDR_EXP 27
 974: PUSH
 975: LD_STRING Brown
 977: PPUSH
 978: LD_EXP 1
 982: NOT
 983: PPUSH
 984: LD_EXP 4
 988: PPUSH
 989: CALL 47421 0 3
 993: ST_TO_ADDR
// if not Brown then
 994: LD_EXP 27
 998: NOT
 999: IFFALSE 1014
// Brown := CreateCharacter ( 10_Brown ) ;
1001: LD_ADDR_EXP 27
1005: PUSH
1006: LD_STRING 10_Brown
1008: PPUSH
1009: CALL_OW 34
1013: ST_TO_ADDR
// if not Brown then
1014: LD_EXP 27
1018: NOT
1019: IFFALSE 1034
// Brown := CreateCharacter ( 08_Brown ) ;
1021: LD_ADDR_EXP 27
1025: PUSH
1026: LD_STRING 08_Brown
1028: PPUSH
1029: CALL_OW 34
1033: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prefix_prev ) ;
1034: LD_ADDR_EXP 28
1038: PUSH
1039: LD_STRING Gladstone
1041: PPUSH
1042: LD_EXP 1
1046: NOT
1047: PPUSH
1048: LD_EXP 4
1052: PPUSH
1053: CALL 47421 0 3
1057: ST_TO_ADDR
// if not Gladstone then
1058: LD_EXP 28
1062: NOT
1063: IFFALSE 1078
// Gladstone := CreateCharacter ( 10_Gladstone ) ;
1065: LD_ADDR_EXP 28
1069: PUSH
1070: LD_STRING 10_Gladstone
1072: PPUSH
1073: CALL_OW 34
1077: ST_TO_ADDR
// if not Gladstone then
1078: LD_EXP 28
1082: NOT
1083: IFFALSE 1098
// Gladstone := CreateCharacter ( 08_Gladstone ) ;
1085: LD_ADDR_EXP 28
1089: PUSH
1090: LD_STRING 08_Gladstone
1092: PPUSH
1093: CALL_OW 34
1097: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , mission_prefix_prev ) ;
1098: LD_ADDR_EXP 29
1102: PUSH
1103: LD_STRING Houten
1105: PPUSH
1106: LD_EXP 1
1110: NOT
1111: PPUSH
1112: LD_EXP 4
1116: PPUSH
1117: CALL 47421 0 3
1121: ST_TO_ADDR
// if not Houten then
1122: LD_EXP 29
1126: NOT
1127: IFFALSE 1142
// Houten := CreateCharacter ( 10_Houten ) ;
1129: LD_ADDR_EXP 29
1133: PUSH
1134: LD_STRING 10_Houten
1136: PPUSH
1137: CALL_OW 34
1141: ST_TO_ADDR
// if not Houten then
1142: LD_EXP 29
1146: NOT
1147: IFFALSE 1162
// Houten := CreateCharacter ( 09_Houten ) ;
1149: LD_ADDR_EXP 29
1153: PUSH
1154: LD_STRING 09_Houten
1156: PPUSH
1157: CALL_OW 34
1161: ST_TO_ADDR
// Cornel := PrepareUnit ( Cornell , ( not debug ) , mission_prefix_prev ) ;
1162: LD_ADDR_EXP 31
1166: PUSH
1167: LD_STRING Cornell
1169: PPUSH
1170: LD_EXP 1
1174: NOT
1175: PPUSH
1176: LD_EXP 4
1180: PPUSH
1181: CALL 47421 0 3
1185: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , mission_prefix_prev ) ;
1186: LD_ADDR_EXP 32
1190: PUSH
1191: LD_STRING Gary
1193: PPUSH
1194: LD_EXP 1
1198: NOT
1199: PPUSH
1200: LD_EXP 4
1204: PPUSH
1205: CALL 47421 0 3
1209: ST_TO_ADDR
// if not Gary then
1210: LD_EXP 32
1214: NOT
1215: IFFALSE 1230
// Gary := CreateCharacter ( 10_Gary ) ;
1217: LD_ADDR_EXP 32
1221: PUSH
1222: LD_STRING 10_Gary
1224: PPUSH
1225: CALL_OW 34
1229: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , mission_prefix_prev ) ;
1230: LD_ADDR_EXP 33
1234: PUSH
1235: LD_STRING Frank
1237: PPUSH
1238: LD_EXP 1
1242: NOT
1243: PPUSH
1244: LD_EXP 4
1248: PPUSH
1249: CALL 47421 0 3
1253: ST_TO_ADDR
// if not Frank then
1254: LD_EXP 33
1258: NOT
1259: IFFALSE 1274
// Frank := CreateCharacter ( 08_Frank ) ;
1261: LD_ADDR_EXP 33
1265: PUSH
1266: LD_STRING 08_Frank
1268: PPUSH
1269: CALL_OW 34
1273: ST_TO_ADDR
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , mission_prefix_prev ) ;
1274: LD_ADDR_EXP 34
1278: PUSH
1279: LD_STRING Kikuchi
1281: PPUSH
1282: LD_EXP 1
1286: NOT
1287: PPUSH
1288: LD_EXP 4
1292: PPUSH
1293: CALL 47421 0 3
1297: ST_TO_ADDR
// if not Kikuchi then
1298: LD_EXP 34
1302: NOT
1303: IFFALSE 1318
// Kikuchi := CreateCharacter ( 08_Kikuchi ) ;
1305: LD_ADDR_EXP 34
1309: PUSH
1310: LD_STRING 08_Kikuchi
1312: PPUSH
1313: CALL_OW 34
1317: ST_TO_ADDR
// tmp := [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1318: LD_ADDR_VAR 0 5
1322: PUSH
1323: LD_EXP 22
1327: PUSH
1328: LD_EXP 23
1332: PUSH
1333: LD_EXP 24
1337: PUSH
1338: LD_EXP 25
1342: PUSH
1343: LD_EXP 26
1347: PUSH
1348: LD_EXP 27
1352: PUSH
1353: LD_EXP 28
1357: PUSH
1358: LD_EXP 29
1362: PUSH
1363: LD_EXP 31
1367: PUSH
1368: LD_EXP 32
1372: PUSH
1373: LD_EXP 33
1377: PUSH
1378: LD_EXP 34
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: LIST
1389: LIST
1390: LIST
1391: LIST
1392: LIST
1393: LIST
1394: LIST
1395: LIST
1396: ST_TO_ADDR
// tmp := tmp diff 0 ;
1397: LD_ADDR_VAR 0 5
1401: PUSH
1402: LD_VAR 0 5
1406: PUSH
1407: LD_INT 0
1409: DIFF
1410: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10_lock ) ;
1411: LD_ADDR_VAR 0 5
1415: PUSH
1416: LD_VAR 0 5
1420: PUSH
1421: LD_STRING 10_lock
1423: PPUSH
1424: CALL_OW 31
1428: UNION
1429: ST_TO_ADDR
// tmp := tmp union CreateCharacterSet ( 10c_lock ) ;
1430: LD_ADDR_VAR 0 5
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: LD_STRING 10c_lock
1442: PPUSH
1443: CALL_OW 31
1447: UNION
1448: ST_TO_ADDR
// DeleteCharacters ( 10_lock ) ;
1449: LD_STRING 10_lock
1451: PPUSH
1452: CALL_OW 40
// DeleteCharacters ( 10c_lock ) ;
1456: LD_STRING 10c_lock
1458: PPUSH
1459: CALL_OW 40
// for i in tmp do
1463: LD_ADDR_VAR 0 2
1467: PUSH
1468: LD_VAR 0 5
1472: PUSH
1473: FOR_IN
1474: IFFALSE 1512
// if GetClass ( i ) in [ class_mortar , class_engineer ] then
1476: LD_VAR 0 2
1480: PPUSH
1481: CALL_OW 257
1485: PUSH
1486: LD_INT 8
1488: PUSH
1489: LD_INT 2
1491: PUSH
1492: EMPTY
1493: LIST
1494: LIST
1495: IN
1496: IFFALSE 1510
// SetClass ( i , class_soldier ) ;
1498: LD_VAR 0 2
1502: PPUSH
1503: LD_INT 1
1505: PPUSH
1506: CALL_OW 336
1510: GO 1473
1512: POP
1513: POP
// if tmp < 12 then
1514: LD_VAR 0 5
1518: PUSH
1519: LD_INT 12
1521: LESS
1522: IFFALSE 1616
// begin k := 16 - tmp ;
1524: LD_ADDR_VAR 0 3
1528: PUSH
1529: LD_INT 16
1531: PUSH
1532: LD_VAR 0 5
1536: MINUS
1537: ST_TO_ADDR
// for i = 1 to k do
1538: LD_ADDR_VAR 0 2
1542: PUSH
1543: DOUBLE
1544: LD_INT 1
1546: DEC
1547: ST_TO_ADDR
1548: LD_VAR 0 3
1552: PUSH
1553: FOR_TO
1554: IFFALSE 1614
// begin PrepareHuman ( false , [ 1 , 1 , 3 , 4 ] [ rand ( 1 , 4 ) ] , 6 ) ;
1556: LD_INT 0
1558: PPUSH
1559: LD_INT 1
1561: PUSH
1562: LD_INT 1
1564: PUSH
1565: LD_INT 3
1567: PUSH
1568: LD_INT 4
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: LIST
1575: LIST
1576: PUSH
1577: LD_INT 1
1579: PPUSH
1580: LD_INT 4
1582: PPUSH
1583: CALL_OW 12
1587: ARRAY
1588: PPUSH
1589: LD_INT 6
1591: PPUSH
1592: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1596: LD_ADDR_VAR 0 5
1600: PUSH
1601: LD_VAR 0 5
1605: PUSH
1606: CALL_OW 44
1610: ADD
1611: ST_TO_ADDR
// end ;
1612: GO 1553
1614: POP
1615: POP
// end ; selected := CharacterSelection ( 1 , 12 , 12 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ tmp ^ [ sel_dont_change_class , sel_not_changeable , Powell ] , [ [ class_soldier , 4 ] , [ class_mechanic , 0 , 5 ] , [ class_scientistic , 0 , 3 ] , [ class_sniper , 0 , 2 ] ] ) ;
1616: LD_ADDR_EXP 19
1620: PUSH
1621: LD_STRING 1
1623: PPUSH
1624: LD_INT 12
1626: PPUSH
1627: LD_INT 12
1629: PPUSH
1630: LD_INT -5
1632: PUSH
1633: LD_EXP 21
1637: PUSH
1638: LD_INT -2
1640: PUSH
1641: LD_INT -3
1643: PUSH
1644: LD_INT -5
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: LIST
1651: LIST
1652: LIST
1653: PUSH
1654: LD_VAR 0 5
1658: ADD
1659: PUSH
1660: LD_INT -6
1662: PUSH
1663: LD_INT -4
1665: PUSH
1666: LD_EXP 30
1670: PUSH
1671: EMPTY
1672: LIST
1673: LIST
1674: LIST
1675: ADD
1676: PPUSH
1677: LD_INT 1
1679: PUSH
1680: LD_INT 4
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: LD_INT 3
1689: PUSH
1690: LD_INT 0
1692: PUSH
1693: LD_INT 5
1695: PUSH
1696: EMPTY
1697: LIST
1698: LIST
1699: LIST
1700: PUSH
1701: LD_INT 4
1703: PUSH
1704: LD_INT 0
1706: PUSH
1707: LD_INT 3
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: LIST
1714: PUSH
1715: LD_INT 5
1717: PUSH
1718: LD_INT 0
1720: PUSH
1721: LD_INT 2
1723: PUSH
1724: EMPTY
1725: LIST
1726: LIST
1727: LIST
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: LIST
1734: PPUSH
1735: CALL_OW 42
1739: ST_TO_ADDR
// others := tmp diff selected ;
1740: LD_ADDR_VAR 0 8
1744: PUSH
1745: LD_VAR 0 5
1749: PUSH
1750: LD_EXP 19
1754: DIFF
1755: ST_TO_ADDR
// others := others diff [ Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
1756: LD_ADDR_VAR 0 8
1760: PUSH
1761: LD_VAR 0 8
1765: PUSH
1766: LD_EXP 22
1770: PUSH
1771: LD_EXP 23
1775: PUSH
1776: LD_EXP 24
1780: PUSH
1781: LD_EXP 25
1785: PUSH
1786: LD_EXP 26
1790: PUSH
1791: LD_EXP 27
1795: PUSH
1796: LD_EXP 28
1800: PUSH
1801: LD_EXP 29
1805: PUSH
1806: LD_EXP 31
1810: PUSH
1811: LD_EXP 32
1815: PUSH
1816: LD_EXP 33
1820: PUSH
1821: LD_EXP 34
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: LIST
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: LIST
1835: LIST
1836: LIST
1837: LIST
1838: LIST
1839: DIFF
1840: ST_TO_ADDR
// if others then
1841: LD_VAR 0 8
1845: IFFALSE 1859
// SaveCharacters ( others , 11_others ) ;
1847: LD_VAR 0 8
1851: PPUSH
1852: LD_STRING 11_others
1854: PPUSH
1855: CALL_OW 38
// vehs := [ [ us_medium_tracked , engine_combustion , control_manual , us_gatling_gun ] , [ us_medium_wheeled , engine_solar , control_manual , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_manual , us_double_gun ] , [ us_medium_wheeled , engine_combustion , control_manual , us_rocket_launcher ] , [ us_medium_tracked , engine_solar , control_manual , us_rocket_launcher ] ] ;
1859: LD_ADDR_VAR 0 6
1863: PUSH
1864: LD_INT 3
1866: PUSH
1867: LD_INT 1
1869: PUSH
1870: LD_INT 1
1872: PUSH
1873: LD_INT 4
1875: PUSH
1876: EMPTY
1877: LIST
1878: LIST
1879: LIST
1880: LIST
1881: PUSH
1882: LD_INT 2
1884: PUSH
1885: LD_INT 2
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 5
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: PUSH
1900: LD_INT 4
1902: PUSH
1903: LD_INT 1
1905: PUSH
1906: LD_INT 1
1908: PUSH
1909: LD_INT 5
1911: PUSH
1912: EMPTY
1913: LIST
1914: LIST
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 2
1920: PUSH
1921: LD_INT 1
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: LD_INT 7
1929: PUSH
1930: EMPTY
1931: LIST
1932: LIST
1933: LIST
1934: LIST
1935: PUSH
1936: LD_INT 3
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 1
1944: PUSH
1945: LD_INT 7
1947: PUSH
1948: EMPTY
1949: LIST
1950: LIST
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// for i in JMM ^ selected do
1961: LD_ADDR_VAR 0 2
1965: PUSH
1966: LD_EXP 21
1970: PUSH
1971: LD_EXP 19
1975: ADD
1976: PUSH
1977: FOR_IN
1978: IFFALSE 2167
// begin if GetClass ( i ) = 3 then
1980: LD_VAR 0 2
1984: PPUSH
1985: CALL_OW 257
1989: PUSH
1990: LD_INT 3
1992: EQUAL
1993: IFFALSE 2150
// begin vc_chassis := vehs [ 1 ] [ 1 ] ;
1995: LD_ADDR_OWVAR 37
1999: PUSH
2000: LD_VAR 0 6
2004: PUSH
2005: LD_INT 1
2007: ARRAY
2008: PUSH
2009: LD_INT 1
2011: ARRAY
2012: ST_TO_ADDR
// vc_engine := vehs [ 1 ] [ 2 ] ;
2013: LD_ADDR_OWVAR 39
2017: PUSH
2018: LD_VAR 0 6
2022: PUSH
2023: LD_INT 1
2025: ARRAY
2026: PUSH
2027: LD_INT 2
2029: ARRAY
2030: ST_TO_ADDR
// vc_control := vehs [ 1 ] [ 3 ] ;
2031: LD_ADDR_OWVAR 38
2035: PUSH
2036: LD_VAR 0 6
2040: PUSH
2041: LD_INT 1
2043: ARRAY
2044: PUSH
2045: LD_INT 3
2047: ARRAY
2048: ST_TO_ADDR
// vc_weapon := vehs [ 1 ] [ 4 ] ;
2049: LD_ADDR_OWVAR 40
2053: PUSH
2054: LD_VAR 0 6
2058: PUSH
2059: LD_INT 1
2061: ARRAY
2062: PUSH
2063: LD_INT 4
2065: ARRAY
2066: ST_TO_ADDR
// vehs := Delete ( vehs , 1 ) ;
2067: LD_ADDR_VAR 0 6
2071: PUSH
2072: LD_VAR 0 6
2076: PPUSH
2077: LD_INT 1
2079: PPUSH
2080: CALL_OW 3
2084: ST_TO_ADDR
// veh := CreateVehicle ;
2085: LD_ADDR_VAR 0 7
2089: PUSH
2090: CALL_OW 45
2094: ST_TO_ADDR
// PlaceUnitArea ( veh , am_veh_start , false ) ;
2095: LD_VAR 0 7
2099: PPUSH
2100: LD_INT 8
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
2110: LD_VAR 0 2
2114: PPUSH
2115: LD_VAR 0 7
2119: PPUSH
2120: CALL_OW 52
// if i = JMM then
2124: LD_VAR 0 2
2128: PUSH
2129: LD_EXP 21
2133: EQUAL
2134: IFFALSE 2148
// SetMark ( veh , 1 ) ;
2136: LD_VAR 0 7
2140: PPUSH
2141: LD_INT 1
2143: PPUSH
2144: CALL_OW 242
// end else
2148: GO 2165
// PlaceUnitArea ( i , am_hum_start , false ) ;
2150: LD_VAR 0 2
2154: PPUSH
2155: LD_INT 9
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// end ;
2165: GO 1977
2167: POP
2168: POP
// vc_chassis := us_medium_tracked ;
2169: LD_ADDR_OWVAR 37
2173: PUSH
2174: LD_INT 3
2176: ST_TO_ADDR
// vc_engine := engine_solar ;
2177: LD_ADDR_OWVAR 39
2181: PUSH
2182: LD_INT 2
2184: ST_TO_ADDR
// vc_control := control_computer ;
2185: LD_ADDR_OWVAR 38
2189: PUSH
2190: LD_INT 3
2192: ST_TO_ADDR
// vc_weapon := us_radar ;
2193: LD_ADDR_OWVAR 40
2197: PUSH
2198: LD_INT 11
2200: ST_TO_ADDR
// veh := CreateVehicle ;
2201: LD_ADDR_VAR 0 7
2205: PUSH
2206: CALL_OW 45
2210: ST_TO_ADDR
// PlaceUnitXY ( veh , 87 , 142 , false ) ;
2211: LD_VAR 0 7
2215: PPUSH
2216: LD_INT 87
2218: PPUSH
2219: LD_INT 142
2221: PPUSH
2222: LD_INT 0
2224: PPUSH
2225: CALL_OW 48
// end ; end_of_file
2229: LD_VAR 0 1
2233: RET
// export ar_force_west , ar_force_south , ar_force_north , ar_force_north_2 , ar_force_east ; export ar_force_tmp , ar_vehicles_tmp , ar_kamikadze , ar_defenders_tmp ; export Saliba , Gensher ; export function PrepareArabian ; var i , d , un , skill , tmp ; begin
2234: LD_INT 0
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
// if Difficulty = 1 then
2242: LD_OWVAR 67
2246: PUSH
2247: LD_INT 1
2249: EQUAL
2250: IFFALSE 2347
// begin tmp := [ [ 129 , 45 ] , [ 143 , 58 ] , [ 184 , 113 ] , [ 163 , 107 ] ] ;
2252: LD_ADDR_VAR 0 6
2256: PUSH
2257: LD_INT 129
2259: PUSH
2260: LD_INT 45
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: PUSH
2267: LD_INT 143
2269: PUSH
2270: LD_INT 58
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: PUSH
2277: LD_INT 184
2279: PUSH
2280: LD_INT 113
2282: PUSH
2283: EMPTY
2284: LIST
2285: LIST
2286: PUSH
2287: LD_INT 163
2289: PUSH
2290: LD_INT 107
2292: PUSH
2293: EMPTY
2294: LIST
2295: LIST
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: LIST
2301: LIST
2302: ST_TO_ADDR
// for i in tmp do
2303: LD_ADDR_VAR 0 2
2307: PUSH
2308: LD_VAR 0 6
2312: PUSH
2313: FOR_IN
2314: IFFALSE 2345
// RemoveUnit ( HexInfo ( i [ 1 ] , i [ 2 ] ) ) ;
2316: LD_VAR 0 2
2320: PUSH
2321: LD_INT 1
2323: ARRAY
2324: PPUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_INT 2
2332: ARRAY
2333: PPUSH
2334: CALL_OW 428
2338: PPUSH
2339: CALL_OW 64
2343: GO 2313
2345: POP
2346: POP
// end ; for i in FilterAllUnits ( [ f_type , unit_building ] ) do
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 21
2354: PUSH
2355: LD_INT 3
2357: PUSH
2358: EMPTY
2359: LIST
2360: LIST
2361: PPUSH
2362: CALL_OW 69
2366: PUSH
2367: FOR_IN
2368: IFFALSE 2401
// SetBLevel ( i , [ 5 , 6 , 7 ] [ Difficulty ] ) ;
2370: LD_VAR 0 2
2374: PPUSH
2375: LD_INT 5
2377: PUSH
2378: LD_INT 6
2380: PUSH
2381: LD_INT 7
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: PUSH
2389: LD_OWVAR 67
2393: ARRAY
2394: PPUSH
2395: CALL_OW 241
2399: GO 2367
2401: POP
2402: POP
// skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
2403: LD_ADDR_VAR 0 5
2407: PUSH
2408: LD_INT 5
2410: PUSH
2411: LD_INT 6
2413: PUSH
2414: LD_INT 7
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: PUSH
2422: LD_OWVAR 67
2426: ARRAY
2427: ST_TO_ADDR
// uc_side := 2 ;
2428: LD_ADDR_OWVAR 20
2432: PUSH
2433: LD_INT 2
2435: ST_TO_ADDR
// uc_nation := 2 ;
2436: LD_ADDR_OWVAR 21
2440: PUSH
2441: LD_INT 2
2443: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
2444: LD_ADDR_OWVAR 37
2448: PUSH
2449: LD_INT 14
2451: ST_TO_ADDR
// vc_engine := engine_siberite ;
2452: LD_ADDR_OWVAR 39
2456: PUSH
2457: LD_INT 3
2459: ST_TO_ADDR
// vc_control := control_manual ;
2460: LD_ADDR_OWVAR 38
2464: PUSH
2465: LD_INT 1
2467: ST_TO_ADDR
// vc_weapon := ar_control_tower ;
2468: LD_ADDR_OWVAR 40
2472: PUSH
2473: LD_INT 31
2475: ST_TO_ADDR
// for i = 1 to 3 do
2476: LD_ADDR_VAR 0 2
2480: PUSH
2481: DOUBLE
2482: LD_INT 1
2484: DEC
2485: ST_TO_ADDR
2486: LD_INT 3
2488: PUSH
2489: FOR_TO
2490: IFFALSE 2574
// begin PrepareHuman ( false , class_mechanic , skill ) ;
2492: LD_INT 0
2494: PPUSH
2495: LD_INT 3
2497: PPUSH
2498: LD_VAR 0 5
2502: PPUSH
2503: CALL_OW 380
// un := CreateVehicle ;
2507: LD_ADDR_VAR 0 4
2511: PUSH
2512: CALL_OW 45
2516: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
2517: LD_VAR 0 4
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: LD_INT 5
2527: PPUSH
2528: CALL_OW 12
2532: PPUSH
2533: CALL_OW 233
// PlaceUnitXYR ( un , 156 , 15 , 6 , false ) ;
2537: LD_VAR 0 4
2541: PPUSH
2542: LD_INT 156
2544: PPUSH
2545: LD_INT 15
2547: PPUSH
2548: LD_INT 6
2550: PPUSH
2551: LD_INT 0
2553: PPUSH
2554: CALL_OW 50
// PlaceHumanInUnit ( CreateHuman , un ) ;
2558: CALL_OW 44
2562: PPUSH
2563: LD_VAR 0 4
2567: PPUSH
2568: CALL_OW 52
// end ;
2572: GO 2489
2574: POP
2575: POP
// ar_force_north := PrepareBase ( ar_dep_n , base_north , dammam , skill , [ 10000 , 1000 , 300 ] , [ 16 , [ 2 , 3 , 4 ] [ Difficulty ] , - 1 , 4 ] ) ;
2576: LD_ADDR_EXP 37
2580: PUSH
2581: LD_INT 94
2583: PPUSH
2584: LD_INT 28
2586: PPUSH
2587: LD_STRING dammam
2589: PPUSH
2590: LD_VAR 0 5
2594: PPUSH
2595: LD_INT 10000
2597: PUSH
2598: LD_INT 1000
2600: PUSH
2601: LD_INT 300
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: LIST
2608: PPUSH
2609: LD_INT 16
2611: PUSH
2612: LD_INT 2
2614: PUSH
2615: LD_INT 3
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: LIST
2625: PUSH
2626: LD_OWVAR 67
2630: ARRAY
2631: PUSH
2632: LD_INT 1
2634: NEG
2635: PUSH
2636: LD_INT 4
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: LIST
2643: LIST
2644: PPUSH
2645: CALL 58005 0 6
2649: ST_TO_ADDR
// ar_force_north := ar_force_north union PrepareBase ( ar_dep_n2 , base_north_2 ,  , skill , [ 500 , 60 , 0 ] , [ - 1 , [ 2 , 3 , 4 ] [ Difficulty ] , 2 , 0 ] ) ;
2650: LD_ADDR_EXP 37
2654: PUSH
2655: LD_EXP 37
2659: PUSH
2660: LD_INT 122
2662: PPUSH
2663: LD_INT 25
2665: PPUSH
2666: LD_STRING 
2668: PPUSH
2669: LD_VAR 0 5
2673: PPUSH
2674: LD_INT 500
2676: PUSH
2677: LD_INT 60
2679: PUSH
2680: LD_INT 0
2682: PUSH
2683: EMPTY
2684: LIST
2685: LIST
2686: LIST
2687: PPUSH
2688: LD_INT 1
2690: NEG
2691: PUSH
2692: LD_INT 2
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 4
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: PUSH
2706: LD_OWVAR 67
2710: ARRAY
2711: PUSH
2712: LD_INT 2
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: PPUSH
2724: CALL 58005 0 6
2728: UNION
2729: ST_TO_ADDR
// ar_force_west := PrepareBase ( ar_dep_w , base_west , jeddah , skill , [ 700 , 300 , 10 ] , [ 12 , 4 , 3 , 2 ] ) ;
2730: LD_ADDR_EXP 35
2734: PUSH
2735: LD_INT 45
2737: PPUSH
2738: LD_INT 24
2740: PPUSH
2741: LD_STRING jeddah
2743: PPUSH
2744: LD_VAR 0 5
2748: PPUSH
2749: LD_INT 700
2751: PUSH
2752: LD_INT 300
2754: PUSH
2755: LD_INT 10
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: LIST
2762: PPUSH
2763: LD_INT 12
2765: PUSH
2766: LD_INT 4
2768: PUSH
2769: LD_INT 3
2771: PUSH
2772: LD_INT 2
2774: PUSH
2775: EMPTY
2776: LIST
2777: LIST
2778: LIST
2779: LIST
2780: PPUSH
2781: CALL 58005 0 6
2785: ST_TO_ADDR
// ar_force_south := PrepareBase ( ar_dep_s , base_south , riyadh , skill , [ 500 , 60 , 0 ] , [ 4 , 2 , 3 , 1 ] ) ;
2786: LD_ADDR_EXP 36
2790: PUSH
2791: LD_INT 7
2793: PPUSH
2794: LD_INT 27
2796: PPUSH
2797: LD_STRING riyadh
2799: PPUSH
2800: LD_VAR 0 5
2804: PPUSH
2805: LD_INT 500
2807: PUSH
2808: LD_INT 60
2810: PUSH
2811: LD_INT 0
2813: PUSH
2814: EMPTY
2815: LIST
2816: LIST
2817: LIST
2818: PPUSH
2819: LD_INT 4
2821: PUSH
2822: LD_INT 2
2824: PUSH
2825: LD_INT 3
2827: PUSH
2828: LD_INT 1
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: PPUSH
2837: CALL 58005 0 6
2841: ST_TO_ADDR
// ar_force_east := PrepareBase ( ar_dep_e , base_east ,  , skill , [ 500 , 50 , 0 ] , [ 10 , 3 , 3 , 2 ] ) ;
2842: LD_ADDR_EXP 39
2846: PUSH
2847: LD_INT 204
2849: PPUSH
2850: LD_INT 26
2852: PPUSH
2853: LD_STRING 
2855: PPUSH
2856: LD_VAR 0 5
2860: PPUSH
2861: LD_INT 500
2863: PUSH
2864: LD_INT 50
2866: PUSH
2867: LD_INT 0
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: LD_INT 10
2877: PUSH
2878: LD_INT 3
2880: PUSH
2881: LD_INT 3
2883: PUSH
2884: LD_INT 2
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: PPUSH
2893: CALL 58005 0 6
2897: ST_TO_ADDR
// mc_bases := [ ar_force_north , ar_force_west , ar_force_east ] ;
2898: LD_ADDR_EXP 50
2902: PUSH
2903: LD_EXP 37
2907: PUSH
2908: LD_EXP 35
2912: PUSH
2913: LD_EXP 39
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] , [ f_empty ] ] ) do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 2
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 30
2940: PUSH
2941: LD_INT 31
2943: PUSH
2944: EMPTY
2945: LIST
2946: LIST
2947: PUSH
2948: LD_INT 58
2950: PUSH
2951: EMPTY
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: LIST
2958: PPUSH
2959: CALL_OW 69
2963: PUSH
2964: FOR_IN
2965: IFFALSE 3090
// begin if GetBase ( i ) then
2967: LD_VAR 0 2
2971: PPUSH
2972: CALL_OW 274
2976: IFFALSE 2980
// continue ;
2978: GO 2964
// d := GetDir ( i ) ;
2980: LD_ADDR_VAR 0 3
2984: PUSH
2985: LD_VAR 0 2
2989: PPUSH
2990: CALL_OW 254
2994: ST_TO_ADDR
// if d < 3 then
2995: LD_VAR 0 3
2999: PUSH
3000: LD_INT 3
3002: LESS
3003: IFFALSE 3021
// d := d + 3 else
3005: LD_ADDR_VAR 0 3
3009: PUSH
3010: LD_VAR 0 3
3014: PUSH
3015: LD_INT 3
3017: PLUS
3018: ST_TO_ADDR
3019: GO 3035
// d := d - 3 ;
3021: LD_ADDR_VAR 0 3
3025: PUSH
3026: LD_VAR 0 3
3030: PUSH
3031: LD_INT 3
3033: MINUS
3034: ST_TO_ADDR
// PrepareHuman ( false , class_mortar , skill ) ;
3035: LD_INT 0
3037: PPUSH
3038: LD_INT 8
3040: PPUSH
3041: LD_VAR 0 5
3045: PPUSH
3046: CALL_OW 380
// un := CreateHuman ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: CALL_OW 44
3059: ST_TO_ADDR
// SetDir ( un , d ) ;
3060: LD_VAR 0 4
3064: PPUSH
3065: LD_VAR 0 3
3069: PPUSH
3070: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_VAR 0 2
3083: PPUSH
3084: CALL_OW 52
// end ;
3088: GO 2964
3090: POP
3091: POP
// if Difficulty > 1 then
3092: LD_OWVAR 67
3096: PUSH
3097: LD_INT 1
3099: GREATER
3100: IFFALSE 3471
// begin ar_kamikadze := [ ] ;
3102: LD_ADDR_EXP 42
3106: PUSH
3107: EMPTY
3108: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3109: LD_INT 0
3111: PPUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_VAR 0 5
3119: PPUSH
3120: CALL_OW 380
// un := CreateHuman ;
3124: LD_ADDR_VAR 0 4
3128: PUSH
3129: CALL_OW 44
3133: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3134: LD_VAR 0 4
3138: PPUSH
3139: LD_INT 3
3141: PPUSH
3142: CALL_OW 233
// PlaceUnitXY ( un , 23 , 44 , false ) ;
3146: LD_VAR 0 4
3150: PPUSH
3151: LD_INT 23
3153: PPUSH
3154: LD_INT 44
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 48
// ComCrawl ( un ) ;
3164: LD_VAR 0 4
3168: PPUSH
3169: CALL_OW 137
// un := CreateHuman ;
3173: LD_ADDR_VAR 0 4
3177: PUSH
3178: CALL_OW 44
3182: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3183: LD_VAR 0 4
3187: PPUSH
3188: LD_INT 3
3190: PPUSH
3191: CALL_OW 233
// PlaceUnitXY ( un , 30 , 39 , false ) ;
3195: LD_VAR 0 4
3199: PPUSH
3200: LD_INT 30
3202: PPUSH
3203: LD_INT 39
3205: PPUSH
3206: LD_INT 0
3208: PPUSH
3209: CALL_OW 48
// ComCrawl ( un ) ;
3213: LD_VAR 0 4
3217: PPUSH
3218: CALL_OW 137
// PrepareHuman ( false , 17 , skill ) ;
3222: LD_INT 0
3224: PPUSH
3225: LD_INT 17
3227: PPUSH
3228: LD_VAR 0 5
3232: PPUSH
3233: CALL_OW 380
// un := CreateHuman ;
3237: LD_ADDR_VAR 0 4
3241: PUSH
3242: CALL_OW 44
3246: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3247: LD_VAR 0 4
3251: PPUSH
3252: LD_INT 3
3254: PPUSH
3255: CALL_OW 233
// PlaceUnitXY ( un , 45 , 86 , false ) ;
3259: LD_VAR 0 4
3263: PPUSH
3264: LD_INT 45
3266: PPUSH
3267: LD_INT 86
3269: PPUSH
3270: LD_INT 0
3272: PPUSH
3273: CALL_OW 48
// ComHold ( un ) ;
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3286: LD_ADDR_EXP 42
3290: PUSH
3291: LD_EXP 42
3295: PPUSH
3296: LD_EXP 42
3300: PUSH
3301: LD_INT 1
3303: PLUS
3304: PPUSH
3305: LD_VAR 0 4
3309: PPUSH
3310: CALL_OW 1
3314: ST_TO_ADDR
// un := CreateHuman ;
3315: LD_ADDR_VAR 0 4
3319: PUSH
3320: CALL_OW 44
3324: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3325: LD_VAR 0 4
3329: PPUSH
3330: LD_INT 3
3332: PPUSH
3333: CALL_OW 233
// PlaceUnitXY ( un , 60 , 85 , false ) ;
3337: LD_VAR 0 4
3341: PPUSH
3342: LD_INT 60
3344: PPUSH
3345: LD_INT 85
3347: PPUSH
3348: LD_INT 0
3350: PPUSH
3351: CALL_OW 48
// ComHold ( un ) ;
3355: LD_VAR 0 4
3359: PPUSH
3360: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3364: LD_ADDR_EXP 42
3368: PUSH
3369: LD_EXP 42
3373: PPUSH
3374: LD_EXP 42
3378: PUSH
3379: LD_INT 1
3381: PLUS
3382: PPUSH
3383: LD_VAR 0 4
3387: PPUSH
3388: CALL_OW 1
3392: ST_TO_ADDR
// un := CreateHuman ;
3393: LD_ADDR_VAR 0 4
3397: PUSH
3398: CALL_OW 44
3402: ST_TO_ADDR
// SetDir ( un , 3 ) ;
3403: LD_VAR 0 4
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: CALL_OW 233
// PlaceUnitXY ( un , 222 , 166 , false ) ;
3415: LD_VAR 0 4
3419: PPUSH
3420: LD_INT 222
3422: PPUSH
3423: LD_INT 166
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 48
// ComHold ( un ) ;
3433: LD_VAR 0 4
3437: PPUSH
3438: CALL_OW 140
// ar_kamikadze := Replace ( ar_kamikadze , ar_kamikadze + 1 , un ) ;
3442: LD_ADDR_EXP 42
3446: PUSH
3447: LD_EXP 42
3451: PPUSH
3452: LD_EXP 42
3456: PUSH
3457: LD_INT 1
3459: PLUS
3460: PPUSH
3461: LD_VAR 0 4
3465: PPUSH
3466: CALL_OW 1
3470: ST_TO_ADDR
// end ; ar_force_tmp := [ ] ;
3471: LD_ADDR_EXP 40
3475: PUSH
3476: EMPTY
3477: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , skill ) ;
3478: LD_INT 1
3480: PPUSH
3481: LD_INT 1
3483: PPUSH
3484: LD_VAR 0 5
3488: PPUSH
3489: CALL_OW 380
// hc_name := Pavel Grigorovic ;
3493: LD_ADDR_OWVAR 26
3497: PUSH
3498: LD_STRING Pavel Grigorovic
3500: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3501: LD_ADDR_OWVAR 33
3505: PUSH
3506: LD_STRING SecondCharsGal
3508: ST_TO_ADDR
// hc_face_number := 4 ;
3509: LD_ADDR_OWVAR 34
3513: PUSH
3514: LD_INT 4
3516: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 1 , CreateHuman ) ;
3517: LD_ADDR_EXP 40
3521: PUSH
3522: LD_EXP 40
3526: PPUSH
3527: LD_INT 1
3529: PPUSH
3530: CALL_OW 44
3534: PPUSH
3535: CALL_OW 1
3539: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 2 ) ;
3540: LD_INT 2
3542: PPUSH
3543: LD_INT 4
3545: PPUSH
3546: LD_INT 2
3548: PPUSH
3549: CALL_OW 380
// hc_name := Lucy Sebel ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING Lucy Sebel
3560: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
3561: LD_ADDR_OWVAR 33
3565: PUSH
3566: LD_STRING SecondCharsGal
3568: ST_TO_ADDR
// hc_face_number := 15 ;
3569: LD_ADDR_OWVAR 34
3573: PUSH
3574: LD_INT 15
3576: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 2 , CreateHuman ) ;
3577: LD_ADDR_EXP 40
3581: PUSH
3582: LD_EXP 40
3586: PPUSH
3587: LD_INT 2
3589: PPUSH
3590: CALL_OW 44
3594: PPUSH
3595: CALL_OW 1
3599: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 2 ) ;
3600: LD_INT 2
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 2
3608: PPUSH
3609: CALL_OW 380
// hc_gallery :=  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// hc_name :=  ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// ar_force_tmp := Replace ( ar_force_tmp , 3 , CreateHuman ) ;
3629: LD_ADDR_EXP 40
3633: PUSH
3634: LD_EXP 40
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: CALL_OW 44
3646: PPUSH
3647: CALL_OW 1
3651: ST_TO_ADDR
// hc_sex := sex_male ;
3652: LD_ADDR_OWVAR 27
3656: PUSH
3657: LD_INT 1
3659: ST_TO_ADDR
// hc_class = 11 ;
3660: LD_ADDR_OWVAR 28
3664: PUSH
3665: LD_INT 11
3667: ST_TO_ADDR
// hc_gallery = sandar ;
3668: LD_ADDR_OWVAR 33
3672: PUSH
3673: LD_STRING sandar
3675: ST_TO_ADDR
// hc_face_number = 33 ;
3676: LD_ADDR_OWVAR 34
3680: PUSH
3681: LD_INT 33
3683: ST_TO_ADDR
// hc_name = Thabit Muhair Saliba ;
3684: LD_ADDR_OWVAR 26
3688: PUSH
3689: LD_STRING Thabit Muhair Saliba
3691: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
3692: LD_ADDR_OWVAR 31
3696: PUSH
3697: LD_INT 0
3699: PUSH
3700: LD_INT 0
3702: PUSH
3703: LD_INT 0
3705: PUSH
3706: LD_INT 0
3708: PUSH
3709: EMPTY
3710: LIST
3711: LIST
3712: LIST
3713: LIST
3714: ST_TO_ADDR
// Saliba = CreateHuman ;
3715: LD_ADDR_EXP 44
3719: PUSH
3720: CALL_OW 44
3724: ST_TO_ADDR
// PlaceHumanInUnit ( Saliba , ar_dep_s ) ;
3725: LD_EXP 44
3729: PPUSH
3730: LD_INT 7
3732: PPUSH
3733: CALL_OW 52
// if gensher_active then
3737: LD_EXP 18
3741: IFFALSE 3768
// begin Gensher = NewCharacter ( Dietrich ) ;
3743: LD_ADDR_EXP 45
3747: PUSH
3748: LD_STRING Dietrich
3750: PPUSH
3751: CALL_OW 25
3755: ST_TO_ADDR
// PlaceHumanInUnit ( Gensher , ar_dep_n ) ;
3756: LD_EXP 45
3760: PPUSH
3761: LD_INT 94
3763: PPUSH
3764: CALL_OW 52
// end ; InitHc ;
3768: CALL_OW 19
// ar_vehicles_tmp := [ ] ;
3772: LD_ADDR_EXP 41
3776: PUSH
3777: EMPTY
3778: ST_TO_ADDR
// for i = 1 to 5 do
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: DOUBLE
3785: LD_INT 1
3787: DEC
3788: ST_TO_ADDR
3789: LD_INT 5
3791: PUSH
3792: FOR_TO
3793: IFFALSE 3965
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , [ engine_combustion , engine_solar ] [ rand ( 1 , 2 ) ] , control_manual , [ ar_gatling_gun , ar_gun , ar_flame_thrower ] [ rand ( 1 , 3 ) ] , rand ( 60 , 100 ) ) ;
3795: LD_INT 13
3797: PUSH
3798: LD_INT 14
3800: PUSH
3801: EMPTY
3802: LIST
3803: LIST
3804: PUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 2
3810: PPUSH
3811: CALL_OW 12
3815: ARRAY
3816: PPUSH
3817: LD_INT 1
3819: PUSH
3820: LD_INT 2
3822: PUSH
3823: EMPTY
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 1
3829: PPUSH
3830: LD_INT 2
3832: PPUSH
3833: CALL_OW 12
3837: ARRAY
3838: PPUSH
3839: LD_INT 1
3841: PPUSH
3842: LD_INT 25
3844: PUSH
3845: LD_INT 27
3847: PUSH
3848: LD_INT 26
3850: PUSH
3851: EMPTY
3852: LIST
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_INT 3
3861: PPUSH
3862: CALL_OW 12
3866: ARRAY
3867: PPUSH
3868: LD_INT 60
3870: PPUSH
3871: LD_INT 100
3873: PPUSH
3874: CALL_OW 12
3878: PPUSH
3879: CALL 54596 0 5
// un := CreateVehicle ;
3883: LD_ADDR_VAR 0 4
3887: PUSH
3888: CALL_OW 45
3892: ST_TO_ADDR
// ar_vehicles_tmp := Replace ( ar_vehicles_tmp , ar_vehicles_tmp + 1 , un ) ;
3893: LD_ADDR_EXP 41
3897: PUSH
3898: LD_EXP 41
3902: PPUSH
3903: LD_EXP 41
3907: PUSH
3908: LD_INT 1
3910: PLUS
3911: PPUSH
3912: LD_VAR 0 4
3916: PPUSH
3917: CALL_OW 1
3921: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
3922: LD_VAR 0 4
3926: PPUSH
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 5
3932: PPUSH
3933: CALL_OW 12
3937: PPUSH
3938: CALL_OW 233
// PlaceUnitXYR ( un , 124 , 141 , 8 , false ) ;
3942: LD_VAR 0 4
3946: PPUSH
3947: LD_INT 124
3949: PPUSH
3950: LD_INT 141
3952: PPUSH
3953: LD_INT 8
3955: PPUSH
3956: LD_INT 0
3958: PPUSH
3959: CALL_OW 50
// end ;
3963: GO 3792
3965: POP
3966: POP
// ar_defenders_tmp := [ [ ] , [ ] , [ ] ] ;
3967: LD_ADDR_EXP 43
3971: PUSH
3972: EMPTY
3973: PUSH
3974: EMPTY
3975: PUSH
3976: EMPTY
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: ST_TO_ADDR
// for d = 1 to [ 3 , 3 , 4 ] [ Difficulty ] do
3983: LD_ADDR_VAR 0 3
3987: PUSH
3988: DOUBLE
3989: LD_INT 1
3991: DEC
3992: ST_TO_ADDR
3993: LD_INT 3
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 4
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: PUSH
4007: LD_OWVAR 67
4011: ARRAY
4012: PUSH
4013: FOR_TO
4014: IFFALSE 4228
// for i = 1 to 3 do
4016: LD_ADDR_VAR 0 2
4020: PUSH
4021: DOUBLE
4022: LD_INT 1
4024: DEC
4025: ST_TO_ADDR
4026: LD_INT 3
4028: PUSH
4029: FOR_TO
4030: IFFALSE 4224
// begin PrepareVehicle ( ar_half_tracked , [ engine_siberite , engine_solar ] [ rand ( 1 , 2 ) ] , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gatling_gun , ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 4 ) ] , 100 ) ;
4032: LD_INT 14
4034: PPUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 2
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 1
4047: PPUSH
4048: LD_INT 2
4050: PPUSH
4051: CALL_OW 12
4055: ARRAY
4056: PPUSH
4057: LD_INT 1
4059: PUSH
4060: LD_INT 5
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 1
4069: PPUSH
4070: LD_INT 2
4072: PPUSH
4073: CALL_OW 12
4077: ARRAY
4078: PPUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 27
4084: PUSH
4085: LD_INT 26
4087: PUSH
4088: LD_INT 28
4090: PUSH
4091: EMPTY
4092: LIST
4093: LIST
4094: LIST
4095: LIST
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 4
4102: PPUSH
4103: CALL_OW 12
4107: ARRAY
4108: PPUSH
4109: LD_INT 100
4111: PPUSH
4112: CALL 54596 0 5
// un := CreateVehicle ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: CALL_OW 45
4125: ST_TO_ADDR
// ar_defenders_tmp := ReplaceIn ( ar_defenders_tmp , [ i , ar_defenders_tmp [ i ] + 1 ] , un ) ;
4126: LD_ADDR_EXP 43
4130: PUSH
4131: LD_EXP 43
4135: PPUSH
4136: LD_VAR 0 2
4140: PUSH
4141: LD_EXP 43
4145: PUSH
4146: LD_VAR 0 2
4150: ARRAY
4151: PUSH
4152: LD_INT 1
4154: PLUS
4155: PUSH
4156: EMPTY
4157: LIST
4158: LIST
4159: PPUSH
4160: LD_VAR 0 4
4164: PPUSH
4165: CALL 54718 0 3
4169: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
4170: LD_VAR 0 4
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: LD_INT 5
4180: PPUSH
4181: CALL_OW 12
4185: PPUSH
4186: CALL_OW 233
// PlaceUnitArea ( un , [ parking_north , parking_west , parking_east ] [ i ] , false ) ;
4190: LD_VAR 0 4
4194: PPUSH
4195: LD_INT 20
4197: PUSH
4198: LD_INT 21
4200: PUSH
4201: LD_INT 22
4203: PUSH
4204: EMPTY
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_VAR 0 2
4213: ARRAY
4214: PPUSH
4215: LD_INT 0
4217: PPUSH
4218: CALL_OW 49
// end ;
4222: GO 4029
4224: POP
4225: POP
4226: GO 4013
4228: POP
4229: POP
// InitHc ;
4230: CALL_OW 19
// CreateResourcesXY ( mat_artifact , 5 , 10 , 5 , false ) ;
4234: LD_INT 4
4236: PPUSH
4237: LD_INT 5
4239: PPUSH
4240: LD_INT 10
4242: PPUSH
4243: LD_INT 5
4245: PPUSH
4246: LD_INT 0
4248: PPUSH
4249: CALL_OW 58
// end ;
4253: LD_VAR 0 1
4257: RET
// every 0 0$1 trigger ar_kamikadze do var i ;
4258: LD_EXP 42
4262: IFFALSE 4336
4264: GO 4266
4266: DISABLE
4267: LD_INT 0
4269: PPUSH
// begin enable ;
4270: ENABLE
// for i in ar_kamikadze do
4271: LD_ADDR_VAR 0 1
4275: PUSH
4276: LD_EXP 42
4280: PUSH
4281: FOR_IN
4282: IFFALSE 4334
// if See ( 1 , i ) then
4284: LD_INT 1
4286: PPUSH
4287: LD_VAR 0 1
4291: PPUSH
4292: CALL_OW 292
4296: IFFALSE 4332
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , i ) ) ;
4298: LD_VAR 0 1
4302: PPUSH
4303: LD_INT 81
4305: PUSH
4306: LD_INT 2
4308: PUSH
4309: EMPTY
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 69
4317: PPUSH
4318: LD_VAR 0 1
4322: PPUSH
4323: CALL_OW 74
4327: PPUSH
4328: CALL_OW 115
4332: GO 4281
4334: POP
4335: POP
// end ;
4336: PPOPN 1
4338: END
// every 5 5$20 trigger artifact_get do var i , cargo , tmp , pos ;
4339: LD_EXP 13
4343: IFFALSE 4660
4345: GO 4347
4347: DISABLE
4348: LD_INT 0
4350: PPUSH
4351: PPUSH
4352: PPUSH
4353: PPUSH
// begin repeat wait ( 0 0$1 ) ;
4354: LD_INT 35
4356: PPUSH
4357: CALL_OW 67
// until MC_GetProduceList ( 1 ) = 0 ;
4361: LD_INT 1
4363: PPUSH
4364: CALL 41425 0 1
4368: PUSH
4369: LD_INT 0
4371: EQUAL
4372: IFFALSE 4354
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_siberite , control_remote , ar_cargo_bay ] ] ) ;
4374: LD_INT 1
4376: PPUSH
4377: LD_INT 14
4379: PUSH
4380: LD_INT 3
4382: PUSH
4383: LD_INT 2
4385: PUSH
4386: LD_INT 32
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: LIST
4393: LIST
4394: PUSH
4395: EMPTY
4396: LIST
4397: PPUSH
4398: CALL 41029 0 2
// repeat wait ( 0 0$1 ) ;
4402: LD_INT 35
4404: PPUSH
4405: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) ;
4409: LD_EXP 69
4413: PUSH
4414: LD_INT 1
4416: ARRAY
4417: PPUSH
4418: LD_INT 33
4420: PUSH
4421: LD_INT 2
4423: PUSH
4424: EMPTY
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 34
4430: PUSH
4431: LD_INT 32
4433: PUSH
4434: EMPTY
4435: LIST
4436: LIST
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: IFFALSE 4402
// cargo := UnitFilter ( mc_vehicles [ 1 ] , [ [ f_control , control_remote ] , [ f_weapon , ar_cargo_bay ] ] ) [ 1 ] ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_EXP 69
4457: PUSH
4458: LD_INT 1
4460: ARRAY
4461: PPUSH
4462: LD_INT 33
4464: PUSH
4465: LD_INT 2
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: PUSH
4472: LD_INT 34
4474: PUSH
4475: LD_INT 32
4477: PUSH
4478: EMPTY
4479: LIST
4480: LIST
4481: PUSH
4482: EMPTY
4483: LIST
4484: LIST
4485: PPUSH
4486: CALL_OW 72
4490: PUSH
4491: LD_INT 1
4493: ARRAY
4494: ST_TO_ADDR
// pos := FindArtifact ( 5 ) ;
4495: LD_ADDR_VAR 0 4
4499: PUSH
4500: LD_INT 5
4502: PPUSH
4503: CALL_OW 469
4507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4508: LD_INT 35
4510: PPUSH
4511: CALL_OW 67
// pos := FindArtifact ( 5 ) ;
4515: LD_ADDR_VAR 0 4
4519: PUSH
4520: LD_INT 5
4522: PPUSH
4523: CALL_OW 469
4527: ST_TO_ADDR
// tmp := 100 ;
4528: LD_ADDR_VAR 0 3
4532: PUSH
4533: LD_INT 100
4535: ST_TO_ADDR
// if pos then
4536: LD_VAR 0 4
4540: IFFALSE 4580
// tmp := DangerAtRangeXY ( 2 , pos [ 1 ] , pos [ 2 ] , 20 ) [ 4 ] ;
4542: LD_ADDR_VAR 0 3
4546: PUSH
4547: LD_INT 2
4549: PPUSH
4550: LD_VAR 0 4
4554: PUSH
4555: LD_INT 1
4557: ARRAY
4558: PPUSH
4559: LD_VAR 0 4
4563: PUSH
4564: LD_INT 2
4566: ARRAY
4567: PPUSH
4568: LD_INT 20
4570: PPUSH
4571: CALL 55614 0 4
4575: PUSH
4576: LD_INT 4
4578: ARRAY
4579: ST_TO_ADDR
// until pos and not artifact_oncargo and tmp < 10 ;
4580: LD_VAR 0 4
4584: PUSH
4585: LD_EXP 14
4589: NOT
4590: AND
4591: PUSH
4592: LD_VAR 0 3
4596: PUSH
4597: LD_INT 10
4599: LESS
4600: AND
4601: IFFALSE 4508
// ComGet ( cargo , pos [ 1 ] , pos [ 2 ] ) ;
4603: LD_VAR 0 2
4607: PPUSH
4608: LD_VAR 0 4
4612: PUSH
4613: LD_INT 1
4615: ARRAY
4616: PPUSH
4617: LD_VAR 0 4
4621: PUSH
4622: LD_INT 2
4624: ARRAY
4625: PPUSH
4626: CALL_OW 160
// AddComMoveXY ( cargo , 198 , 113 ) ;
4630: LD_VAR 0 2
4634: PPUSH
4635: LD_INT 198
4637: PPUSH
4638: LD_INT 113
4640: PPUSH
4641: CALL_OW 171
// AddComMoveXY ( cargo , 124 , 7 ) ;
4645: LD_VAR 0 2
4649: PPUSH
4650: LD_INT 124
4652: PPUSH
4653: LD_INT 7
4655: PPUSH
4656: CALL_OW 171
// end ;
4660: PPOPN 4
4662: END
// every 5 5$00 trigger base_captured do var i , un , tmp , skill , coords , flags , w , list ;
4663: LD_EXP 6
4667: IFFALSE 7448
4669: GO 4671
4671: DISABLE
4672: LD_INT 0
4674: PPUSH
4675: PPUSH
4676: PPUSH
4677: PPUSH
4678: PPUSH
4679: PPUSH
4680: PPUSH
4681: PPUSH
// begin skill := [ 5 , 6 , 7 ] [ Difficulty ] ;
4682: LD_ADDR_VAR 0 4
4686: PUSH
4687: LD_INT 5
4689: PUSH
4690: LD_INT 6
4692: PUSH
4693: LD_INT 7
4695: PUSH
4696: EMPTY
4697: LIST
4698: LIST
4699: LIST
4700: PUSH
4701: LD_OWVAR 67
4705: ARRAY
4706: ST_TO_ADDR
// coords := [ ] ;
4707: LD_ADDR_VAR 0 5
4711: PUSH
4712: EMPTY
4713: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 1 , 0 , 0 , 0 , 1 , 0 ] ;
4714: LD_ADDR_VAR 0 6
4718: PUSH
4719: LD_INT 0
4721: PUSH
4722: LD_INT 0
4724: PUSH
4725: LD_INT 0
4727: PUSH
4728: LD_INT 0
4730: PUSH
4731: LD_INT 1
4733: PUSH
4734: LD_INT 0
4736: PUSH
4737: LD_INT 0
4739: PUSH
4740: LD_INT 0
4742: PUSH
4743: LD_INT 1
4745: PUSH
4746: LD_INT 0
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: ST_TO_ADDR
// MC_SetProduceList ( 1 , [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ) ;
4761: LD_INT 1
4763: PPUSH
4764: LD_INT 14
4766: PUSH
4767: LD_INT 1
4769: PUSH
4770: LD_INT 2
4772: PUSH
4773: LD_INT 28
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: LIST
4781: PUSH
4782: LD_INT 14
4784: PUSH
4785: LD_INT 1
4787: PUSH
4788: LD_INT 2
4790: PUSH
4791: LD_INT 25
4793: PUSH
4794: EMPTY
4795: LIST
4796: LIST
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 14
4802: PUSH
4803: LD_INT 1
4805: PUSH
4806: LD_INT 2
4808: PUSH
4809: LD_INT 28
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 14
4820: PUSH
4821: LD_INT 1
4823: PUSH
4824: LD_INT 2
4826: PUSH
4827: LD_INT 29
4829: PUSH
4830: EMPTY
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: EMPTY
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL 41029 0 2
// wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
4846: LD_INT 21000
4848: PUSH
4849: LD_INT 19950
4851: PUSH
4852: LD_INT 18900
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: PUSH
4860: LD_OWVAR 67
4864: ARRAY
4865: PPUSH
4866: CALL_OW 67
// InitHc ;
4870: CALL_OW 19
// InitUc ;
4874: CALL_OW 18
// uc_side := 2 ;
4878: LD_ADDR_OWVAR 20
4882: PUSH
4883: LD_INT 2
4885: ST_TO_ADDR
// uc_nation := 2 ;
4886: LD_ADDR_OWVAR 21
4890: PUSH
4891: LD_INT 2
4893: ST_TO_ADDR
// tmp := [ [ ] , [ ] , [ ] , [ ] , [ ] ] ;
4894: LD_ADDR_VAR 0 3
4898: PUSH
4899: EMPTY
4900: PUSH
4901: EMPTY
4902: PUSH
4903: EMPTY
4904: PUSH
4905: EMPTY
4906: PUSH
4907: EMPTY
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: LIST
4915: ST_TO_ADDR
// tmp := Replace ( tmp , 1 , mc_vehicles [ 1 ] diff FilterAllUnits ( [ f_weapon , ar_cargo_bay ] ) ) ;
4916: LD_ADDR_VAR 0 3
4920: PUSH
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 1
4928: PPUSH
4929: LD_EXP 69
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PUSH
4938: LD_INT 34
4940: PUSH
4941: LD_INT 32
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: DIFF
4953: PPUSH
4954: CALL_OW 1
4958: ST_TO_ADDR
// for i = 1 to Difficulty do
4959: LD_ADDR_VAR 0 1
4963: PUSH
4964: DOUBLE
4965: LD_INT 1
4967: DEC
4968: ST_TO_ADDR
4969: LD_OWVAR 67
4973: PUSH
4974: FOR_TO
4975: IFFALSE 5113
// begin uc_side := 2 ;
4977: LD_ADDR_OWVAR 20
4981: PUSH
4982: LD_INT 2
4984: ST_TO_ADDR
// uc_nation := 2 ;
4985: LD_ADDR_OWVAR 21
4989: PUSH
4990: LD_INT 2
4992: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
4993: LD_INT 13
4995: PPUSH
4996: LD_INT 3
4998: PPUSH
4999: LD_INT 5
5001: PPUSH
5002: LD_INT 29
5004: PPUSH
5005: LD_INT 100
5007: PPUSH
5008: CALL 54596 0 5
// un := CreateVehicle ;
5012: LD_ADDR_VAR 0 2
5016: PUSH
5017: CALL_OW 45
5021: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , un ) ;
5022: LD_ADDR_VAR 0 3
5026: PUSH
5027: LD_VAR 0 3
5031: PPUSH
5032: LD_INT 1
5034: PUSH
5035: LD_VAR 0 3
5039: PUSH
5040: LD_INT 1
5042: ARRAY
5043: PUSH
5044: LD_INT 1
5046: PLUS
5047: PUSH
5048: EMPTY
5049: LIST
5050: LIST
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL 54718 0 3
5061: ST_TO_ADDR
// SetDir ( un , 3 ) ;
5062: LD_VAR 0 2
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: CALL_OW 233
// PlaceUnitArea ( un , north_attack_spawn , false ) ;
5074: LD_VAR 0 2
5078: PPUSH
5079: LD_INT 16
5081: PPUSH
5082: LD_INT 0
5084: PPUSH
5085: CALL_OW 49
// ComMoveXY ( un , 51 , 10 ) ;
5089: LD_VAR 0 2
5093: PPUSH
5094: LD_INT 51
5096: PPUSH
5097: LD_INT 10
5099: PPUSH
5100: CALL_OW 111
// wait ( 0 0$2 ) ;
5104: LD_INT 70
5106: PPUSH
5107: CALL_OW 67
// end ;
5111: GO 4974
5113: POP
5114: POP
// coords := [ [ 51 , 24 ] , [ 75 , 90 ] ] ;
5115: LD_ADDR_VAR 0 5
5119: PUSH
5120: LD_INT 51
5122: PUSH
5123: LD_INT 24
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 75
5132: PUSH
5133: LD_INT 90
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 1 ] , coords , flags ) ;
5144: LD_INT 1
5146: PPUSH
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 1
5154: ARRAY
5155: PPUSH
5156: LD_VAR 0 5
5160: PPUSH
5161: LD_VAR 0 6
5165: PPUSH
5166: CALL 41262 0 4
// for i = 1 to [ 1 , 3 , 3 ] [ Difficulty ] do
5170: LD_ADDR_VAR 0 1
5174: PUSH
5175: DOUBLE
5176: LD_INT 1
5178: DEC
5179: ST_TO_ADDR
5180: LD_INT 1
5182: PUSH
5183: LD_INT 3
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: LIST
5193: PUSH
5194: LD_OWVAR 67
5198: ARRAY
5199: PUSH
5200: FOR_TO
5201: IFFALSE 5301
// begin uc_side := 2 ;
5203: LD_ADDR_OWVAR 20
5207: PUSH
5208: LD_INT 2
5210: ST_TO_ADDR
// uc_nation := 2 ;
5211: LD_ADDR_OWVAR 21
5215: PUSH
5216: LD_INT 2
5218: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5219: LD_INT 0
5221: PPUSH
5222: LD_INT 17
5224: PPUSH
5225: LD_VAR 0 4
5229: PPUSH
5230: CALL_OW 380
// un := CreateHuman ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: CALL_OW 44
5243: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5244: LD_ADDR_VAR 0 3
5248: PUSH
5249: LD_VAR 0 3
5253: PPUSH
5254: LD_INT 2
5256: PUSH
5257: LD_VAR 0 3
5261: PUSH
5262: LD_INT 2
5264: ARRAY
5265: PUSH
5266: LD_INT 1
5268: PLUS
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PPUSH
5274: LD_VAR 0 2
5278: PPUSH
5279: CALL 54718 0 3
5283: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5284: LD_VAR 0 2
5288: PPUSH
5289: LD_INT 13
5291: PPUSH
5292: LD_INT 0
5294: PPUSH
5295: CALL_OW 49
// end ;
5299: GO 5200
5301: POP
5302: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
5303: LD_ADDR_VAR 0 1
5307: PUSH
5308: DOUBLE
5309: LD_INT 1
5311: DEC
5312: ST_TO_ADDR
5313: LD_INT 3
5315: PUSH
5316: LD_INT 4
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: PUSH
5327: LD_OWVAR 67
5331: ARRAY
5332: PUSH
5333: FOR_TO
5334: IFFALSE 5455
// begin uc_side := 2 ;
5336: LD_ADDR_OWVAR 20
5340: PUSH
5341: LD_INT 2
5343: ST_TO_ADDR
// uc_nation := 2 ;
5344: LD_ADDR_OWVAR 21
5348: PUSH
5349: LD_INT 2
5351: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ i mod 2 + 1 ] , skill ) ;
5352: LD_INT 0
5354: PPUSH
5355: LD_INT 1
5357: PUSH
5358: LD_INT 8
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PUSH
5365: LD_VAR 0 1
5369: PUSH
5370: LD_INT 2
5372: MOD
5373: PUSH
5374: LD_INT 1
5376: PLUS
5377: ARRAY
5378: PPUSH
5379: LD_VAR 0 4
5383: PPUSH
5384: CALL_OW 380
// un := CreateHuman ;
5388: LD_ADDR_VAR 0 2
5392: PUSH
5393: CALL_OW 44
5397: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , un ) ;
5398: LD_ADDR_VAR 0 3
5402: PUSH
5403: LD_VAR 0 3
5407: PPUSH
5408: LD_INT 2
5410: PUSH
5411: LD_VAR 0 3
5415: PUSH
5416: LD_INT 2
5418: ARRAY
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PUSH
5424: EMPTY
5425: LIST
5426: LIST
5427: PPUSH
5428: LD_VAR 0 2
5432: PPUSH
5433: CALL 54718 0 3
5437: ST_TO_ADDR
// PlaceUnitArea ( un , west_attack_spawn , false ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: LD_INT 13
5445: PPUSH
5446: LD_INT 0
5448: PPUSH
5449: CALL_OW 49
// end ;
5453: GO 5333
5455: POP
5456: POP
// coords := [ [ 67 , 112 ] , [ 85 , 130 ] ] ;
5457: LD_ADDR_VAR 0 5
5461: PUSH
5462: LD_INT 67
5464: PUSH
5465: LD_INT 112
5467: PUSH
5468: EMPTY
5469: LIST
5470: LIST
5471: PUSH
5472: LD_INT 85
5474: PUSH
5475: LD_INT 130
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: EMPTY
5483: LIST
5484: LIST
5485: ST_TO_ADDR
// MC_PrepareAttack ( 2 , tmp [ 2 ] , coords , flags ) ;
5486: LD_INT 2
5488: PPUSH
5489: LD_VAR 0 3
5493: PUSH
5494: LD_INT 2
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 5
5502: PPUSH
5503: LD_VAR 0 6
5507: PPUSH
5508: CALL 41262 0 4
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5512: LD_ADDR_VAR 0 1
5516: PUSH
5517: DOUBLE
5518: LD_INT 1
5520: DEC
5521: ST_TO_ADDR
5522: LD_INT 1
5524: PUSH
5525: LD_INT 2
5527: PUSH
5528: LD_INT 3
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: LIST
5535: PUSH
5536: LD_OWVAR 67
5540: ARRAY
5541: PUSH
5542: FOR_TO
5543: IFFALSE 5643
// begin uc_side := 2 ;
5545: LD_ADDR_OWVAR 20
5549: PUSH
5550: LD_INT 2
5552: ST_TO_ADDR
// uc_nation := 2 ;
5553: LD_ADDR_OWVAR 21
5557: PUSH
5558: LD_INT 2
5560: ST_TO_ADDR
// PrepareHuman ( false , 17 , skill ) ;
5561: LD_INT 0
5563: PPUSH
5564: LD_INT 17
5566: PPUSH
5567: LD_VAR 0 4
5571: PPUSH
5572: CALL_OW 380
// un := CreateHuman ;
5576: LD_ADDR_VAR 0 2
5580: PUSH
5581: CALL_OW 44
5585: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 3 , tmp [ 3 ] + 1 ] , un ) ;
5586: LD_ADDR_VAR 0 3
5590: PUSH
5591: LD_VAR 0 3
5595: PPUSH
5596: LD_INT 3
5598: PUSH
5599: LD_VAR 0 3
5603: PUSH
5604: LD_INT 3
5606: ARRAY
5607: PUSH
5608: LD_INT 1
5610: PLUS
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PPUSH
5616: LD_VAR 0 2
5620: PPUSH
5621: CALL 54718 0 3
5625: ST_TO_ADDR
// PlaceUnitArea ( un , south_attack_spawn , false ) ;
5626: LD_VAR 0 2
5630: PPUSH
5631: LD_INT 14
5633: PPUSH
5634: LD_INT 0
5636: PPUSH
5637: CALL_OW 49
// end ;
5641: GO 5542
5643: POP
5644: POP
// coords := [ [ 148 , 158 ] , [ 148 , 158 ] ] ;
5645: LD_ADDR_VAR 0 5
5649: PUSH
5650: LD_INT 148
5652: PUSH
5653: LD_INT 158
5655: PUSH
5656: EMPTY
5657: LIST
5658: LIST
5659: PUSH
5660: LD_INT 148
5662: PUSH
5663: LD_INT 158
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: ST_TO_ADDR
// MC_PrepareAttack ( 3 , tmp [ 3 ] , coords , flags ) ;
5674: LD_INT 3
5676: PPUSH
5677: LD_VAR 0 3
5681: PUSH
5682: LD_INT 3
5684: ARRAY
5685: PPUSH
5686: LD_VAR 0 5
5690: PPUSH
5691: LD_VAR 0 6
5695: PPUSH
5696: CALL 41262 0 4
// for i = 1 to [ 2 , 4 , 4 ] [ Difficulty ] do
5700: LD_ADDR_VAR 0 1
5704: PUSH
5705: DOUBLE
5706: LD_INT 1
5708: DEC
5709: ST_TO_ADDR
5710: LD_INT 2
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: LD_INT 4
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: LIST
5723: PUSH
5724: LD_OWVAR 67
5728: ARRAY
5729: PUSH
5730: FOR_TO
5731: IFFALSE 5955
// begin uc_side := 2 ;
5733: LD_ADDR_OWVAR 20
5737: PUSH
5738: LD_INT 2
5740: ST_TO_ADDR
// uc_nation := 2 ;
5741: LD_ADDR_OWVAR 21
5745: PUSH
5746: LD_INT 2
5748: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , [ control_manual , control_apeman ] [ rand ( 1 , 2 ) ] , [ ar_gun , ar_flame_thrower , ar_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
5749: LD_INT 14
5751: PPUSH
5752: LD_INT 3
5754: PPUSH
5755: LD_INT 1
5757: PUSH
5758: LD_INT 5
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: PUSH
5765: LD_INT 1
5767: PPUSH
5768: LD_INT 2
5770: PPUSH
5771: CALL_OW 12
5775: ARRAY
5776: PPUSH
5777: LD_INT 27
5779: PUSH
5780: LD_INT 26
5782: PUSH
5783: LD_INT 28
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: PUSH
5791: LD_INT 1
5793: PPUSH
5794: LD_INT 3
5796: PPUSH
5797: CALL_OW 12
5801: ARRAY
5802: PPUSH
5803: LD_INT 100
5805: PPUSH
5806: CALL 54596 0 5
// un := CreateVehicle ;
5810: LD_ADDR_VAR 0 2
5814: PUSH
5815: CALL_OW 45
5819: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , un ) ;
5820: LD_ADDR_VAR 0 3
5824: PUSH
5825: LD_VAR 0 3
5829: PPUSH
5830: LD_INT 4
5832: PUSH
5833: LD_VAR 0 3
5837: PUSH
5838: LD_INT 4
5840: ARRAY
5841: PUSH
5842: LD_INT 1
5844: PLUS
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: PPUSH
5850: LD_VAR 0 2
5854: PPUSH
5855: CALL 54718 0 3
5859: ST_TO_ADDR
// SetDir ( un , 5 ) ;
5860: LD_VAR 0 2
5864: PPUSH
5865: LD_INT 5
5867: PPUSH
5868: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
5872: LD_VAR 0 2
5876: PPUSH
5877: LD_INT 15
5879: PPUSH
5880: LD_INT 0
5882: PPUSH
5883: CALL_OW 49
// if GetControl ( un ) = control_manual then
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 263
5896: PUSH
5897: LD_INT 1
5899: EQUAL
5900: IFFALSE 5931
// begin PrepareHuman ( false , 3 , skill ) ;
5902: LD_INT 0
5904: PPUSH
5905: LD_INT 3
5907: PPUSH
5908: LD_VAR 0 4
5912: PPUSH
5913: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , un ) ;
5917: CALL_OW 44
5921: PPUSH
5922: LD_VAR 0 2
5926: PPUSH
5927: CALL_OW 52
// end ; ComMoveXY ( un , 179 , 135 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 179
5938: PPUSH
5939: LD_INT 135
5941: PPUSH
5942: CALL_OW 111
// wait ( 0 0$2 ) ;
5946: LD_INT 70
5948: PPUSH
5949: CALL_OW 67
// end ;
5953: GO 5730
5955: POP
5956: POP
// vc_chassis := 15 ;
5957: LD_ADDR_OWVAR 37
5961: PUSH
5962: LD_INT 15
5964: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateVehicle ) ;
5965: LD_ADDR_VAR 0 3
5969: PUSH
5970: LD_VAR 0 3
5974: PPUSH
5975: LD_INT 4
5977: PUSH
5978: LD_VAR 0 3
5982: PUSH
5983: LD_INT 4
5985: ARRAY
5986: PUSH
5987: LD_INT 1
5989: PLUS
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PPUSH
5995: CALL_OW 45
5999: PPUSH
6000: CALL 54718 0 3
6004: ST_TO_ADDR
// PlaceUnitArea ( tmp [ 4 ] [ tmp [ 4 ] ] , east_attack_spawn , false ) ;
6005: LD_VAR 0 3
6009: PUSH
6010: LD_INT 4
6012: ARRAY
6013: PUSH
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 4
6021: ARRAY
6022: ARRAY
6023: PPUSH
6024: LD_INT 15
6026: PPUSH
6027: LD_INT 0
6029: PPUSH
6030: CALL_OW 49
// PrepareHuman ( false , class_desert_warior , skill ) ;
6034: LD_INT 0
6036: PPUSH
6037: LD_INT 11
6039: PPUSH
6040: LD_VAR 0 4
6044: PPUSH
6045: CALL_OW 380
// tmp := ReplaceIn ( tmp , [ 4 , tmp [ 4 ] + 1 ] , CreateHuman ) ;
6049: LD_ADDR_VAR 0 3
6053: PUSH
6054: LD_VAR 0 3
6058: PPUSH
6059: LD_INT 4
6061: PUSH
6062: LD_VAR 0 3
6066: PUSH
6067: LD_INT 4
6069: ARRAY
6070: PUSH
6071: LD_INT 1
6073: PLUS
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PPUSH
6079: CALL_OW 44
6083: PPUSH
6084: CALL 54718 0 3
6088: ST_TO_ADDR
// PlaceHumanInUnit ( tmp [ 4 ] [ tmp [ 4 ] ] , tmp [ 4 ] [ tmp [ 4 ] - 1 ] ) ;
6089: LD_VAR 0 3
6093: PUSH
6094: LD_INT 4
6096: ARRAY
6097: PUSH
6098: LD_VAR 0 3
6102: PUSH
6103: LD_INT 4
6105: ARRAY
6106: ARRAY
6107: PPUSH
6108: LD_VAR 0 3
6112: PUSH
6113: LD_INT 4
6115: ARRAY
6116: PUSH
6117: LD_VAR 0 3
6121: PUSH
6122: LD_INT 4
6124: ARRAY
6125: PUSH
6126: LD_INT 1
6128: MINUS
6129: ARRAY
6130: PPUSH
6131: CALL_OW 52
// coords := [ [ 148 , 140 ] ] ;
6135: LD_ADDR_VAR 0 5
6139: PUSH
6140: LD_INT 148
6142: PUSH
6143: LD_INT 140
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: EMPTY
6151: LIST
6152: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 4 ] , coords , flags ) ;
6153: LD_INT 1
6155: PPUSH
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 4
6163: ARRAY
6164: PPUSH
6165: LD_VAR 0 5
6169: PPUSH
6170: LD_VAR 0 6
6174: PPUSH
6175: CALL 41262 0 4
// if gensher_active then
6179: LD_EXP 18
6183: IFFALSE 6585
// begin SayRadio ( Gensher , D10-Diet-1 ) ;
6185: LD_EXP 45
6189: PPUSH
6190: LD_STRING D10-Diet-1
6192: PPUSH
6193: CALL_OW 94
// for i = 1 to 2 do
6197: LD_ADDR_VAR 0 1
6201: PUSH
6202: DOUBLE
6203: LD_INT 1
6205: DEC
6206: ST_TO_ADDR
6207: LD_INT 2
6209: PUSH
6210: FOR_TO
6211: IFFALSE 6349
// begin uc_side := 2 ;
6213: LD_ADDR_OWVAR 20
6217: PUSH
6218: LD_INT 2
6220: ST_TO_ADDR
// uc_nation := 2 ;
6221: LD_ADDR_OWVAR 21
6225: PUSH
6226: LD_INT 2
6228: ST_TO_ADDR
// PrepareVehicle ( ar_medium_trike , engine_siberite , control_apeman , ar_selfpropelled_bomb , 100 ) ;
6229: LD_INT 13
6231: PPUSH
6232: LD_INT 3
6234: PPUSH
6235: LD_INT 5
6237: PPUSH
6238: LD_INT 29
6240: PPUSH
6241: LD_INT 100
6243: PPUSH
6244: CALL 54596 0 5
// un := CreateVehicle ;
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: CALL_OW 45
6257: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6258: LD_ADDR_VAR 0 3
6262: PUSH
6263: LD_VAR 0 3
6267: PPUSH
6268: LD_INT 5
6270: PUSH
6271: LD_VAR 0 3
6275: PUSH
6276: LD_INT 5
6278: ARRAY
6279: PUSH
6280: LD_INT 1
6282: PLUS
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: LD_VAR 0 2
6292: PPUSH
6293: CALL 54718 0 3
6297: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6298: LD_VAR 0 2
6302: PPUSH
6303: LD_INT 0
6305: PPUSH
6306: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6310: LD_VAR 0 2
6314: PPUSH
6315: LD_INT 23
6317: PPUSH
6318: LD_INT 0
6320: PPUSH
6321: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6325: LD_VAR 0 2
6329: PPUSH
6330: LD_INT 85
6332: PPUSH
6333: LD_INT 152
6335: PPUSH
6336: CALL_OW 111
// wait ( 0 0$2 ) ;
6340: LD_INT 70
6342: PPUSH
6343: CALL_OW 67
// end ;
6347: GO 6210
6349: POP
6350: POP
// for i = 1 to [ 2 , 3 , 3 ] [ Difficulty ] do
6351: LD_ADDR_VAR 0 1
6355: PUSH
6356: DOUBLE
6357: LD_INT 1
6359: DEC
6360: ST_TO_ADDR
6361: LD_INT 2
6363: PUSH
6364: LD_INT 3
6366: PUSH
6367: LD_INT 3
6369: PUSH
6370: EMPTY
6371: LIST
6372: LIST
6373: LIST
6374: PUSH
6375: LD_OWVAR 67
6379: ARRAY
6380: PUSH
6381: FOR_TO
6382: IFFALSE 6539
// begin uc_side := 2 ;
6384: LD_ADDR_OWVAR 20
6388: PUSH
6389: LD_INT 2
6391: ST_TO_ADDR
// uc_nation := 2 ;
6392: LD_ADDR_OWVAR 21
6396: PUSH
6397: LD_INT 2
6399: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
6400: LD_INT 14
6402: PPUSH
6403: LD_INT 3
6405: PPUSH
6406: LD_INT 5
6408: PPUSH
6409: LD_INT 27
6411: PUSH
6412: LD_INT 28
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 1
6421: PPUSH
6422: LD_INT 2
6424: PPUSH
6425: CALL_OW 12
6429: ARRAY
6430: PPUSH
6431: LD_INT 100
6433: PPUSH
6434: CALL 54596 0 5
// un := CreateVehicle ;
6438: LD_ADDR_VAR 0 2
6442: PUSH
6443: CALL_OW 45
6447: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 5 , tmp [ 5 ] + 1 ] , un ) ;
6448: LD_ADDR_VAR 0 3
6452: PUSH
6453: LD_VAR 0 3
6457: PPUSH
6458: LD_INT 5
6460: PUSH
6461: LD_VAR 0 3
6465: PUSH
6466: LD_INT 5
6468: ARRAY
6469: PUSH
6470: LD_INT 1
6472: PLUS
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL 54718 0 3
6487: ST_TO_ADDR
// SetDir ( un , 0 ) ;
6488: LD_VAR 0 2
6492: PPUSH
6493: LD_INT 0
6495: PPUSH
6496: CALL_OW 233
// PlaceUnitArea ( un , gensher_attack , false ) ;
6500: LD_VAR 0 2
6504: PPUSH
6505: LD_INT 23
6507: PPUSH
6508: LD_INT 0
6510: PPUSH
6511: CALL_OW 49
// ComMoveXY ( un , 85 , 152 ) ;
6515: LD_VAR 0 2
6519: PPUSH
6520: LD_INT 85
6522: PPUSH
6523: LD_INT 152
6525: PPUSH
6526: CALL_OW 111
// wait ( 0 0$2 ) ;
6530: LD_INT 70
6532: PPUSH
6533: CALL_OW 67
// end ;
6537: GO 6381
6539: POP
6540: POP
// coords := [ [ 97 , 143 ] ] ;
6541: LD_ADDR_VAR 0 5
6545: PUSH
6546: LD_INT 97
6548: PUSH
6549: LD_INT 143
6551: PUSH
6552: EMPTY
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: ST_TO_ADDR
// MC_PrepareAttack ( 1 , tmp [ 5 ] , coords , flags ) ;
6559: LD_INT 1
6561: PPUSH
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 5
6569: ARRAY
6570: PPUSH
6571: LD_VAR 0 5
6575: PPUSH
6576: LD_VAR 0 6
6580: PPUSH
6581: CALL 41262 0 4
// end ; Wait ( 13 13$00 ) ;
6585: LD_INT 27300
6587: PPUSH
6588: CALL_OW 67
// tmp := [ ] ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: EMPTY
6598: ST_TO_ADDR
// w := 1 ;
6599: LD_ADDR_VAR 0 7
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// repeat tmp := [ ] ;
6607: LD_ADDR_VAR 0 3
6611: PUSH
6612: EMPTY
6613: ST_TO_ADDR
// if w mod 4 = 0 then
6614: LD_VAR 0 7
6618: PUSH
6619: LD_INT 4
6621: MOD
6622: PUSH
6623: LD_INT 0
6625: EQUAL
6626: IFFALSE 6713
// list := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] else
6628: LD_ADDR_VAR 0 8
6632: PUSH
6633: LD_INT 11
6635: PUSH
6636: LD_INT 1
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 24
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 11
6653: PUSH
6654: LD_INT 1
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 24
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 11
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: LD_INT 2
6677: PUSH
6678: LD_INT 24
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: PUSH
6687: LD_INT 11
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: LD_INT 2
6695: PUSH
6696: LD_INT 24
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: LIST
6703: LIST
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: LIST
6709: LIST
6710: ST_TO_ADDR
6711: GO 6815
// list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gatling_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
6713: LD_ADDR_VAR 0 8
6717: PUSH
6718: LD_INT 14
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: LD_INT 2
6726: PUSH
6727: LD_INT 28
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 14
6738: PUSH
6739: LD_INT 1
6741: PUSH
6742: LD_INT 2
6744: PUSH
6745: LD_INT 25
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 14
6756: PUSH
6757: LD_INT 1
6759: PUSH
6760: LD_INT 2
6762: PUSH
6763: LD_INT 28
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 14
6774: PUSH
6775: LD_INT 1
6777: PUSH
6778: LD_INT 2
6780: PUSH
6781: LD_INT 29
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 11
6792: PUSH
6793: LD_INT 1
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: LD_INT 24
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: ST_TO_ADDR
// if w mod 3 = 0 then
6815: LD_VAR 0 7
6819: PUSH
6820: LD_INT 3
6822: MOD
6823: PUSH
6824: LD_INT 0
6826: EQUAL
6827: IFFALSE 6903
// list := ReplaceIn ( list , [ 1 , list [ i ] + 1 ] , [ ar_half_tracked , engine_combustion , control_remote , [ ar_gatling_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] ] ) ;
6829: LD_ADDR_VAR 0 8
6833: PUSH
6834: LD_VAR 0 8
6838: PPUSH
6839: LD_INT 1
6841: PUSH
6842: LD_VAR 0 8
6846: PUSH
6847: LD_VAR 0 1
6851: ARRAY
6852: PUSH
6853: LD_INT 1
6855: PLUS
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: LD_INT 14
6863: PUSH
6864: LD_INT 1
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 25
6872: PUSH
6873: LD_INT 28
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 1
6882: PPUSH
6883: LD_INT 2
6885: PPUSH
6886: CALL_OW 12
6890: ARRAY
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: LIST
6897: PPUSH
6898: CALL 54718 0 3
6902: ST_TO_ADDR
// MC_SetProduceList ( 1 , list ) ;
6903: LD_INT 1
6905: PPUSH
6906: LD_VAR 0 8
6910: PPUSH
6911: CALL 41029 0 2
// if GetSide ( ar_dep_w ) = 2 then
6915: LD_INT 45
6917: PPUSH
6918: CALL_OW 255
6922: PUSH
6923: LD_INT 2
6925: EQUAL
6926: IFFALSE 7011
// begin list := [ [ ar_half_tracked , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] , [ ar_half_tracked , engine_combustion , control_remote , ar_gun ] ] ;
6928: LD_ADDR_VAR 0 8
6932: PUSH
6933: LD_INT 14
6935: PUSH
6936: LD_INT 1
6938: PUSH
6939: LD_INT 2
6941: PUSH
6942: LD_INT 28
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 14
6953: PUSH
6954: LD_INT 1
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 27
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 14
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 27
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: LIST
6991: ST_TO_ADDR
// MC_SetProduceList ( 2 , list ) ;
6992: LD_INT 2
6994: PPUSH
6995: LD_VAR 0 8
6999: PPUSH
7000: CALL 41029 0 2
// wait ( 0 0$50 ) ;
7004: LD_INT 1750
7006: PPUSH
7007: CALL_OW 67
// end ; repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// until UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) >= 4 ;
7018: LD_EXP 69
7022: PUSH
7023: LD_INT 1
7025: ARRAY
7026: PPUSH
7027: LD_INT 3
7029: PUSH
7030: LD_INT 34
7032: PUSH
7033: LD_INT 32
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 72
7048: PUSH
7049: LD_INT 4
7051: GREATEREQUAL
7052: IFFALSE 7011
// wait ( 0 0$10 ) ;
7054: LD_INT 350
7056: PPUSH
7057: CALL_OW 67
// tmp := UnitFilter ( mc_vehicles [ 1 ] , [ f_not , [ f_weapon , ar_cargo_bay ] ] ) ;
7061: LD_ADDR_VAR 0 3
7065: PUSH
7066: LD_EXP 69
7070: PUSH
7071: LD_INT 1
7073: ARRAY
7074: PPUSH
7075: LD_INT 3
7077: PUSH
7078: LD_INT 34
7080: PUSH
7081: LD_INT 32
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PPUSH
7092: CALL_OW 72
7096: ST_TO_ADDR
// if Prob ( 100 ) < 50 then
7097: LD_INT 100
7099: PPUSH
7100: CALL_OW 13
7104: PUSH
7105: LD_INT 50
7107: LESS
7108: IFFALSE 7141
// coords := [ [ 55 , 7 ] , [ 75 , 90 ] ] else
7110: LD_ADDR_VAR 0 5
7114: PUSH
7115: LD_INT 55
7117: PUSH
7118: LD_INT 7
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 75
7127: PUSH
7128: LD_INT 90
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: ST_TO_ADDR
7139: GO 7170
// coords := [ [ 128 , 94 ] , [ 180 , 135 ] ] ;
7141: LD_ADDR_VAR 0 5
7145: PUSH
7146: LD_INT 128
7148: PUSH
7149: LD_INT 94
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: LD_INT 180
7158: PUSH
7159: LD_INT 135
7161: PUSH
7162: EMPTY
7163: LIST
7164: LIST
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: ST_TO_ADDR
// if w mod 4 = 0 then
7170: LD_VAR 0 7
7174: PUSH
7175: LD_INT 4
7177: MOD
7178: PUSH
7179: LD_INT 0
7181: EQUAL
7182: IFFALSE 7213
// coords := [ [ 91 , 58 ] , [ 117 , 107 ] ] ;
7184: LD_ADDR_VAR 0 5
7188: PUSH
7189: LD_INT 91
7191: PUSH
7192: LD_INT 58
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: LD_INT 117
7201: PUSH
7202: LD_INT 107
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: ST_TO_ADDR
// ComAgressiveMove ( tmp , coords [ 1 ] , coords [ 2 ] ) ;
7213: LD_VAR 0 3
7217: PPUSH
7218: LD_VAR 0 5
7222: PUSH
7223: LD_INT 1
7225: ARRAY
7226: PPUSH
7227: LD_VAR 0 5
7231: PUSH
7232: LD_INT 2
7234: ARRAY
7235: PPUSH
7236: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
7240: LD_INT 35
7242: PPUSH
7243: CALL_OW 67
// until UnitFilter ( tmp , [ f_hastask ] ) = 0 ;
7247: LD_VAR 0 3
7251: PPUSH
7252: LD_INT 60
7254: PUSH
7255: EMPTY
7256: LIST
7257: PPUSH
7258: CALL_OW 72
7262: PUSH
7263: LD_INT 0
7265: EQUAL
7266: IFFALSE 7240
// repeat wait ( 0 0$2 ) ;
7268: LD_INT 70
7270: PPUSH
7271: CALL_OW 67
// for i in tmp do
7275: LD_ADDR_VAR 0 1
7279: PUSH
7280: LD_VAR 0 3
7284: PUSH
7285: FOR_IN
7286: IFFALSE 7375
// if GetChassis ( i ) = ar_hovercraft then
7288: LD_VAR 0 1
7292: PPUSH
7293: CALL_OW 265
7297: PUSH
7298: LD_INT 11
7300: EQUAL
7301: IFFALSE 7339
// AttackHovercraft ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7303: LD_VAR 0 1
7307: PPUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 1
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 69
7322: PPUSH
7323: LD_VAR 0 1
7327: PPUSH
7328: CALL_OW 74
7332: PPUSH
7333: CALL 81906 0 2
7337: GO 7373
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7339: LD_VAR 0 1
7343: PPUSH
7344: LD_INT 22
7346: PUSH
7347: LD_INT 1
7349: PUSH
7350: EMPTY
7351: LIST
7352: LIST
7353: PPUSH
7354: CALL_OW 69
7358: PPUSH
7359: LD_VAR 0 1
7363: PPUSH
7364: CALL_OW 74
7368: PPUSH
7369: CALL_OW 115
7373: GO 7285
7375: POP
7376: POP
// until not tmp ;
7377: LD_VAR 0 3
7381: NOT
7382: IFFALSE 7268
// wait ( rand ( 10 10$30 , 13 13$30 ) ) ;
7384: LD_INT 22050
7386: PPUSH
7387: LD_INT 28350
7389: PPUSH
7390: CALL_OW 12
7394: PPUSH
7395: CALL_OW 67
// w := w + 1 ;
7399: LD_ADDR_VAR 0 7
7403: PUSH
7404: LD_VAR 0 7
7408: PUSH
7409: LD_INT 1
7411: PLUS
7412: ST_TO_ADDR
// until IsDead ( ar_dep_n ) or not UnitFilter ( mc_bases [ 1 ] , [ f_btype , b_factory ] ) ;
7413: LD_INT 94
7415: PPUSH
7416: CALL_OW 301
7420: PUSH
7421: LD_EXP 50
7425: PUSH
7426: LD_INT 1
7428: ARRAY
7429: PPUSH
7430: LD_INT 30
7432: PUSH
7433: LD_INT 3
7435: PUSH
7436: EMPTY
7437: LIST
7438: LIST
7439: PPUSH
7440: CALL_OW 72
7444: NOT
7445: OR
7446: IFFALSE 6607
// end ;
7448: PPOPN 8
7450: END
// every 28 28$00 trigger ar_dep_e do var i , tmp , un , x ;
7451: LD_INT 204
7453: IFFALSE 7919
7455: GO 7457
7457: DISABLE
7458: LD_INT 0
7460: PPUSH
7461: PPUSH
7462: PPUSH
7463: PPUSH
// begin enable ;
7464: ENABLE
// wait ( rand ( 0 0$1 , 0 0$34 ) ) ;
7465: LD_INT 35
7467: PPUSH
7468: LD_INT 1190
7470: PPUSH
7471: CALL_OW 12
7475: PPUSH
7476: CALL_OW 67
// tmp := [ ] ;
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: EMPTY
7486: ST_TO_ADDR
// uc_side := 8 ;
7487: LD_ADDR_OWVAR 20
7491: PUSH
7492: LD_INT 8
7494: ST_TO_ADDR
// uc_nation := 2 ;
7495: LD_ADDR_OWVAR 21
7499: PUSH
7500: LD_INT 2
7502: ST_TO_ADDR
// InitHc ;
7503: CALL_OW 19
// for i = 1 to 3 do
7507: LD_ADDR_VAR 0 1
7511: PUSH
7512: DOUBLE
7513: LD_INT 1
7515: DEC
7516: ST_TO_ADDR
7517: LD_INT 3
7519: PUSH
7520: FOR_TO
7521: IFFALSE 7648
// begin PrepareVehicle ( [ ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 2 ) ] , engine_siberite , control_apeman , [ ar_gun , ar_rocket_launcher ] [ rand ( 1 , 2 ) ] , 100 ) ;
7523: LD_INT 13
7525: PUSH
7526: LD_INT 14
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 1
7535: PPUSH
7536: LD_INT 2
7538: PPUSH
7539: CALL_OW 12
7543: ARRAY
7544: PPUSH
7545: LD_INT 3
7547: PPUSH
7548: LD_INT 5
7550: PPUSH
7551: LD_INT 27
7553: PUSH
7554: LD_INT 28
7556: PUSH
7557: EMPTY
7558: LIST
7559: LIST
7560: PUSH
7561: LD_INT 1
7563: PPUSH
7564: LD_INT 2
7566: PPUSH
7567: CALL_OW 12
7571: ARRAY
7572: PPUSH
7573: LD_INT 100
7575: PPUSH
7576: CALL 54596 0 5
// un := CreateVehicle ;
7580: LD_ADDR_VAR 0 3
7584: PUSH
7585: CALL_OW 45
7589: ST_TO_ADDR
// SetDir ( un , 4 ) ;
7590: LD_VAR 0 3
7594: PPUSH
7595: LD_INT 4
7597: PPUSH
7598: CALL_OW 233
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7602: LD_VAR 0 3
7606: PPUSH
7607: LD_INT 15
7609: PPUSH
7610: LD_INT 0
7612: PPUSH
7613: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7617: LD_ADDR_VAR 0 2
7621: PUSH
7622: LD_VAR 0 2
7626: PPUSH
7627: LD_VAR 0 2
7631: PUSH
7632: LD_INT 1
7634: PLUS
7635: PPUSH
7636: LD_VAR 0 3
7640: PPUSH
7641: CALL_OW 1
7645: ST_TO_ADDR
// end ;
7646: GO 7520
7648: POP
7649: POP
// for i = 1 to 4 do
7650: LD_ADDR_VAR 0 1
7654: PUSH
7655: DOUBLE
7656: LD_INT 1
7658: DEC
7659: ST_TO_ADDR
7660: LD_INT 4
7662: PUSH
7663: FOR_TO
7664: IFFALSE 7735
// begin PrepareHuman ( false , 1 , 6 ) ;
7666: LD_INT 0
7668: PPUSH
7669: LD_INT 1
7671: PPUSH
7672: LD_INT 6
7674: PPUSH
7675: CALL_OW 380
// un := CreateHuman ;
7679: LD_ADDR_VAR 0 3
7683: PUSH
7684: CALL_OW 44
7688: ST_TO_ADDR
// PlaceUnitArea ( un , east_attack_spawn , false ) ;
7689: LD_VAR 0 3
7693: PPUSH
7694: LD_INT 15
7696: PPUSH
7697: LD_INT 0
7699: PPUSH
7700: CALL_OW 49
// tmp := Replace ( tmp , tmp + 1 , un ) ;
7704: LD_ADDR_VAR 0 2
7708: PUSH
7709: LD_VAR 0 2
7713: PPUSH
7714: LD_VAR 0 2
7718: PUSH
7719: LD_INT 1
7721: PLUS
7722: PPUSH
7723: LD_VAR 0 3
7727: PPUSH
7728: CALL_OW 1
7732: ST_TO_ADDR
// end ;
7733: GO 7663
7735: POP
7736: POP
// wait ( 0 0$3 ) ;
7737: LD_INT 105
7739: PPUSH
7740: CALL_OW 67
// for i in tmp do
7744: LD_ADDR_VAR 0 1
7748: PUSH
7749: LD_VAR 0 2
7753: PUSH
7754: FOR_IN
7755: IFFALSE 7823
// if GetClass ( i ) = 1 or GetType ( i ) = unit_vehicle then
7757: LD_VAR 0 1
7761: PPUSH
7762: CALL_OW 257
7766: PUSH
7767: LD_INT 1
7769: EQUAL
7770: PUSH
7771: LD_VAR 0 1
7775: PPUSH
7776: CALL_OW 247
7780: PUSH
7781: LD_INT 2
7783: EQUAL
7784: OR
7785: IFFALSE 7821
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) ;
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 81
7794: PUSH
7795: LD_INT 8
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PPUSH
7802: CALL_OW 69
7806: PPUSH
7807: LD_VAR 0 1
7811: PPUSH
7812: CALL_OW 74
7816: PPUSH
7817: CALL_OW 115
7821: GO 7754
7823: POP
7824: POP
// repeat AddComAgressiveMove ( tmp , 210 , 178 ) ;
7825: LD_VAR 0 2
7829: PPUSH
7830: LD_INT 210
7832: PPUSH
7833: LD_INT 178
7835: PPUSH
7836: CALL_OW 174
// x := FilterUnitsInArea ( escape_area , [ f_side , 8 ] ) ;
7840: LD_ADDR_VAR 0 4
7844: PUSH
7845: LD_INT 10
7847: PPUSH
7848: LD_INT 22
7850: PUSH
7851: LD_INT 8
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: PPUSH
7858: CALL_OW 70
7862: ST_TO_ADDR
// if x then
7863: LD_VAR 0 4
7867: IFFALSE 7895
// for i in x do
7869: LD_ADDR_VAR 0 1
7873: PUSH
7874: LD_VAR 0 4
7878: PUSH
7879: FOR_IN
7880: IFFALSE 7893
// RemoveUnit ( i ) ;
7882: LD_VAR 0 1
7886: PPUSH
7887: CALL_OW 64
7891: GO 7879
7893: POP
7894: POP
// wait ( 0 0$1 ) ;
7895: LD_INT 35
7897: PPUSH
7898: CALL_OW 67
// until not FilterAllUnits ( [ f_side , 8 ] ) ;
7902: LD_INT 22
7904: PUSH
7905: LD_INT 8
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PPUSH
7912: CALL_OW 69
7916: NOT
7917: IFFALSE 7825
// end ;
7919: PPOPN 4
7921: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
7922: LD_INT 22
7924: PUSH
7925: LD_INT 2
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 34
7934: PUSH
7935: LD_INT 31
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: LD_INT 3
7944: PUSH
7945: LD_INT 24
7947: PUSH
7948: LD_INT 1000
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: PPUSH
7964: CALL_OW 69
7968: IFFALSE 8071
7970: GO 7972
7972: DISABLE
// begin if IsOk ( ar_dep_w ) and GetSide ( ar_dep_w ) then
7973: LD_INT 45
7975: PPUSH
7976: CALL_OW 302
7980: PUSH
7981: LD_INT 45
7983: PPUSH
7984: CALL_OW 255
7988: AND
7989: IFFALSE 8032
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 18 , 8 ) else
7991: LD_INT 22
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 34
8003: PUSH
8004: LD_INT 31
8006: PUSH
8007: EMPTY
8008: LIST
8009: LIST
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PPUSH
8015: CALL_OW 69
8019: PPUSH
8020: LD_INT 18
8022: PPUSH
8023: LD_INT 8
8025: PPUSH
8026: CALL_OW 111
8030: GO 8071
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) , 106 , 14 ) ;
8032: LD_INT 22
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 34
8044: PUSH
8045: LD_INT 31
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PPUSH
8061: LD_INT 106
8063: PPUSH
8064: LD_INT 14
8066: PPUSH
8067: CALL_OW 111
// end ; end_of_file
8071: END
// export function Action ; var tmp , p , radar , sols , i ; begin
8072: LD_INT 0
8074: PPUSH
8075: PPUSH
8076: PPUSH
8077: PPUSH
8078: PPUSH
8079: PPUSH
// InGameOn ;
8080: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
8084: LD_EXP 21
8088: PPUSH
8089: CALL_OW 87
// SetAttitude ( 2 , 1 , att_friend , true ) ;
8093: LD_INT 2
8095: PPUSH
8096: LD_INT 1
8098: PPUSH
8099: LD_INT 1
8101: PPUSH
8102: LD_INT 1
8104: PPUSH
8105: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] ] ) ;
8109: LD_ADDR_VAR 0 2
8113: PUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PUSH
8124: LD_INT 25
8126: PUSH
8127: LD_INT 1
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 69
8142: ST_TO_ADDR
// radar := FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_radar ] ] ) [ 1 ] ;
8143: LD_ADDR_VAR 0 4
8147: PUSH
8148: LD_INT 22
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 34
8160: PUSH
8161: LD_INT 11
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: PUSH
8177: LD_INT 1
8179: ARRAY
8180: ST_TO_ADDR
// for i = 1 to tmp do
8181: LD_ADDR_VAR 0 6
8185: PUSH
8186: DOUBLE
8187: LD_INT 1
8189: DEC
8190: ST_TO_ADDR
8191: LD_VAR 0 2
8195: PUSH
8196: FOR_TO
8197: IFFALSE 8244
// begin if i = 5 then
8199: LD_VAR 0 6
8203: PUSH
8204: LD_INT 5
8206: EQUAL
8207: IFFALSE 8211
// break ;
8209: GO 8244
// sols := Replace ( sols , i , tmp [ i ] ) ;
8211: LD_ADDR_VAR 0 5
8215: PUSH
8216: LD_VAR 0 5
8220: PPUSH
8221: LD_VAR 0 6
8225: PPUSH
8226: LD_VAR 0 2
8230: PUSH
8231: LD_VAR 0 6
8235: ARRAY
8236: PPUSH
8237: CALL_OW 1
8241: ST_TO_ADDR
// end ;
8242: GO 8196
8244: POP
8245: POP
// tmp := ar_force_tmp ;
8246: LD_ADDR_VAR 0 2
8250: PUSH
8251: LD_EXP 40
8255: ST_TO_ADDR
// PlaceUnitXY ( tmp [ 1 ] , 108 , 139 , false ) ;
8256: LD_VAR 0 2
8260: PUSH
8261: LD_INT 1
8263: ARRAY
8264: PPUSH
8265: LD_INT 108
8267: PPUSH
8268: LD_INT 139
8270: PPUSH
8271: LD_INT 0
8273: PPUSH
8274: CALL_OW 48
// ComTurnUnit ( tmp [ 1 ] , JMM ) ;
8278: LD_VAR 0 2
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_EXP 21
8291: PPUSH
8292: CALL_OW 119
// PlaceUnitXY ( tmp [ 2 ] , 114 , 132 , false ) ;
8296: LD_VAR 0 2
8300: PUSH
8301: LD_INT 2
8303: ARRAY
8304: PPUSH
8305: LD_INT 114
8307: PPUSH
8308: LD_INT 132
8310: PPUSH
8311: LD_INT 0
8313: PPUSH
8314: CALL_OW 48
// PlaceUnitXY ( tmp [ 3 ] , 115 , 132 , false ) ;
8318: LD_VAR 0 2
8322: PUSH
8323: LD_INT 3
8325: ARRAY
8326: PPUSH
8327: LD_INT 115
8329: PPUSH
8330: LD_INT 132
8332: PPUSH
8333: LD_INT 0
8335: PPUSH
8336: CALL_OW 48
// ComHold ( [ tmp [ 2 ] , tmp [ 3 ] ] ) ;
8340: LD_VAR 0 2
8344: PUSH
8345: LD_INT 2
8347: ARRAY
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 3
8356: ARRAY
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: PPUSH
8362: CALL_OW 140
// ComMoveXY ( radar , 83 , 123 ) ;
8366: LD_VAR 0 4
8370: PPUSH
8371: LD_INT 83
8373: PPUSH
8374: LD_INT 123
8376: PPUSH
8377: CALL_OW 111
// Wait ( 0 0$01 ) ;
8381: LD_INT 35
8383: PPUSH
8384: CALL_OW 67
// CenterOnXY ( 90 , 144 ) ;
8388: LD_INT 90
8390: PPUSH
8391: LD_INT 144
8393: PPUSH
8394: CALL_OW 84
// ComMoveXY ( sols , 88 , 129 ) ;
8398: LD_VAR 0 5
8402: PPUSH
8403: LD_INT 88
8405: PPUSH
8406: LD_INT 129
8408: PPUSH
8409: CALL_OW 111
// p := [ [ 92 , 131 ] , [ 88 , 127 ] , [ 91 , 132 ] , [ 92 , 134 ] ] ;
8413: LD_ADDR_VAR 0 3
8417: PUSH
8418: LD_INT 92
8420: PUSH
8421: LD_INT 131
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 88
8430: PUSH
8431: LD_INT 127
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 91
8440: PUSH
8441: LD_INT 132
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 92
8450: PUSH
8451: LD_INT 134
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: ST_TO_ADDR
// for i = 1 to sols do
8464: LD_ADDR_VAR 0 6
8468: PUSH
8469: DOUBLE
8470: LD_INT 1
8472: DEC
8473: ST_TO_ADDR
8474: LD_VAR 0 5
8478: PUSH
8479: FOR_TO
8480: IFFALSE 8553
// begin AddComMoveXY ( sols [ i ] , p [ i ] [ 1 ] , p [ i ] [ 2 ] ) ;
8482: LD_VAR 0 5
8486: PUSH
8487: LD_VAR 0 6
8491: ARRAY
8492: PPUSH
8493: LD_VAR 0 3
8497: PUSH
8498: LD_VAR 0 6
8502: ARRAY
8503: PUSH
8504: LD_INT 1
8506: ARRAY
8507: PPUSH
8508: LD_VAR 0 3
8512: PUSH
8513: LD_VAR 0 6
8517: ARRAY
8518: PUSH
8519: LD_INT 2
8521: ARRAY
8522: PPUSH
8523: CALL_OW 171
// AddComCrawl ( sols [ i ] ) ;
8527: LD_VAR 0 5
8531: PUSH
8532: LD_VAR 0 6
8536: ARRAY
8537: PPUSH
8538: CALL_OW 197
// AddComHold ( sols ) ;
8542: LD_VAR 0 5
8546: PPUSH
8547: CALL_OW 200
// end ;
8551: GO 8479
8553: POP
8554: POP
// repeat wait ( 0 0$1 ) ;
8555: LD_INT 35
8557: PPUSH
8558: CALL_OW 67
// until GetDistUnitXY ( sols [ 1 ] , 92 , 131 ) < 4 ;
8562: LD_VAR 0 5
8566: PUSH
8567: LD_INT 1
8569: ARRAY
8570: PPUSH
8571: LD_INT 92
8573: PPUSH
8574: LD_INT 131
8576: PPUSH
8577: CALL_OW 297
8581: PUSH
8582: LD_INT 4
8584: LESS
8585: IFFALSE 8555
// CenterOnXY ( 96 , 139 ) ;
8587: LD_INT 96
8589: PPUSH
8590: LD_INT 139
8592: PPUSH
8593: CALL_OW 84
// wait ( 0 0$3 ) ;
8597: LD_INT 105
8599: PPUSH
8600: CALL_OW 67
// PlaceSeeing ( 111 , 135 , 1 , - 25 ) ;
8604: LD_INT 111
8606: PPUSH
8607: LD_INT 135
8609: PPUSH
8610: LD_INT 1
8612: PPUSH
8613: LD_INT 25
8615: NEG
8616: PPUSH
8617: CALL_OW 330
// ComMoveXY ( tmp [ 2 ] , GetX ( tmp [ 1 ] ) + 3 , GetY ( tmp [ 1 ] ) ) ;
8621: LD_VAR 0 2
8625: PUSH
8626: LD_INT 2
8628: ARRAY
8629: PPUSH
8630: LD_VAR 0 2
8634: PUSH
8635: LD_INT 1
8637: ARRAY
8638: PPUSH
8639: CALL_OW 250
8643: PUSH
8644: LD_INT 3
8646: PLUS
8647: PPUSH
8648: LD_VAR 0 2
8652: PUSH
8653: LD_INT 1
8655: ARRAY
8656: PPUSH
8657: CALL_OW 251
8661: PPUSH
8662: CALL_OW 111
// ComEnterUnit ( tmp [ 3 ] , ar_dep_s ) ;
8666: LD_VAR 0 2
8670: PUSH
8671: LD_INT 3
8673: ARRAY
8674: PPUSH
8675: LD_INT 7
8677: PPUSH
8678: CALL_OW 120
// AddComTurnUnit ( tmp [ 2 ] , tmp [ 1 ] ) ;
8682: LD_VAR 0 2
8686: PUSH
8687: LD_INT 2
8689: ARRAY
8690: PPUSH
8691: LD_VAR 0 2
8695: PUSH
8696: LD_INT 1
8698: ARRAY
8699: PPUSH
8700: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
8704: LD_INT 35
8706: PPUSH
8707: CALL_OW 67
// until GetDistUnits ( tmp [ 1 ] , tmp [ 2 ] ) < 5 ;
8711: LD_VAR 0 2
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: PPUSH
8720: LD_VAR 0 2
8724: PUSH
8725: LD_INT 2
8727: ARRAY
8728: PPUSH
8729: CALL_OW 296
8733: PUSH
8734: LD_INT 5
8736: LESS
8737: IFFALSE 8704
// ComTurnUnit ( tmp [ 1 ] , tmp [ 2 ] ) ;
8739: LD_VAR 0 2
8743: PUSH
8744: LD_INT 1
8746: ARRAY
8747: PPUSH
8748: LD_VAR 0 2
8752: PUSH
8753: LD_INT 2
8755: ARRAY
8756: PPUSH
8757: CALL_OW 119
// Say ( tmp [ 1 ] , D1a-Merc1-1 ) ;
8761: LD_VAR 0 2
8765: PUSH
8766: LD_INT 1
8768: ARRAY
8769: PPUSH
8770: LD_STRING D1a-Merc1-1
8772: PPUSH
8773: CALL_OW 88
// Say ( tmp [ 2 ] , D1a-FMerc2-1 ) ;
8777: LD_VAR 0 2
8781: PUSH
8782: LD_INT 2
8784: ARRAY
8785: PPUSH
8786: LD_STRING D1a-FMerc2-1
8788: PPUSH
8789: CALL_OW 88
// ComHeal ( tmp [ 2 ] , tmp [ 1 ] ) ;
8793: LD_VAR 0 2
8797: PUSH
8798: LD_INT 2
8800: ARRAY
8801: PPUSH
8802: LD_VAR 0 2
8806: PUSH
8807: LD_INT 1
8809: ARRAY
8810: PPUSH
8811: CALL_OW 128
// SetLives ( tmp [ 1 ] , 500 ) ;
8815: LD_VAR 0 2
8819: PUSH
8820: LD_INT 1
8822: ARRAY
8823: PPUSH
8824: LD_INT 500
8826: PPUSH
8827: CALL_OW 234
// wait ( 0 0$2 ) ;
8831: LD_INT 70
8833: PPUSH
8834: CALL_OW 67
// SetLives ( tmp [ 1 ] , 2 ) ;
8838: LD_VAR 0 2
8842: PUSH
8843: LD_INT 1
8845: ARRAY
8846: PPUSH
8847: LD_INT 2
8849: PPUSH
8850: CALL_OW 234
// wait ( 0 0$0.3 ) ;
8854: LD_INT 10
8856: PPUSH
8857: CALL_OW 67
// ForceSay ( tmp [ 1 ] , D1a-Merc1-2 ) ;
8861: LD_VAR 0 2
8865: PUSH
8866: LD_INT 1
8868: ARRAY
8869: PPUSH
8870: LD_STRING D1a-Merc1-2
8872: PPUSH
8873: CALL_OW 91
// wait ( 0 0$0.2 ) ;
8877: LD_INT 7
8879: PPUSH
8880: CALL_OW 67
// KillUnit ( tmp [ 1 ] ) ;
8884: LD_VAR 0 2
8888: PUSH
8889: LD_INT 1
8891: ARRAY
8892: PPUSH
8893: CALL_OW 66
// ComMoveToArea ( tmp [ 2 ] , escape_area ) ;
8897: LD_VAR 0 2
8901: PUSH
8902: LD_INT 2
8904: ARRAY
8905: PPUSH
8906: LD_INT 10
8908: PPUSH
8909: CALL_OW 113
// Say ( tmp [ 2 ] , D1a-FMerc2-2 ) ;
8913: LD_VAR 0 2
8917: PUSH
8918: LD_INT 2
8920: ARRAY
8921: PPUSH
8922: LD_STRING D1a-FMerc2-2
8924: PPUSH
8925: CALL_OW 88
// wait ( 0 0$1 ) ;
8929: LD_INT 35
8931: PPUSH
8932: CALL_OW 67
// CenterOnUnits ( ar_dep_s ) ;
8936: LD_INT 7
8938: PPUSH
8939: CALL_OW 85
// wait ( 0 0$2 ) ;
8943: LD_INT 70
8945: PPUSH
8946: CALL_OW 67
// ForceSay ( Saliba , D1a-Saliba-1 ) ;
8950: LD_EXP 44
8954: PPUSH
8955: LD_STRING D1a-Saliba-1
8957: PPUSH
8958: CALL_OW 91
// KillUnit ( Saliba ) ;
8962: LD_EXP 44
8966: PPUSH
8967: CALL_OW 66
// ComExitBuilding ( tmp [ 3 ] ) ;
8971: LD_VAR 0 2
8975: PUSH
8976: LD_INT 3
8978: ARRAY
8979: PPUSH
8980: CALL_OW 122
// CenterOnUnits ( JMM ) ;
8984: LD_EXP 21
8988: PPUSH
8989: CALL_OW 85
// wait ( 0 0$1 ) ;
8993: LD_INT 35
8995: PPUSH
8996: CALL_OW 67
// ComMoveXY ( sols , 88 , 141 ) ;
9000: LD_VAR 0 5
9004: PPUSH
9005: LD_INT 88
9007: PPUSH
9008: LD_INT 141
9010: PPUSH
9011: CALL_OW 111
// AddComWait ( sols , 0 0$2 ) ;
9015: LD_VAR 0 5
9019: PPUSH
9020: LD_INT 70
9022: PPUSH
9023: CALL_OW 202
// wait ( 0 0$2 ) ;
9027: LD_INT 70
9029: PPUSH
9030: CALL_OW 67
// SetAttitude ( 2 , 1 , att_enemy , true ) ;
9034: LD_INT 2
9036: PPUSH
9037: LD_INT 1
9039: PPUSH
9040: LD_INT 2
9042: PPUSH
9043: LD_INT 1
9045: PPUSH
9046: CALL_OW 80
// InGameOff ;
9050: CALL_OW 9
// ComWalk ( sols ) ;
9054: LD_VAR 0 5
9058: PPUSH
9059: CALL_OW 138
// ChangeMissionObjectives ( M1 ) ;
9063: LD_STRING M1
9065: PPUSH
9066: CALL_OW 337
// game_speed := 4 ;
9070: LD_ADDR_OWVAR 65
9074: PUSH
9075: LD_INT 4
9077: ST_TO_ADDR
// RemoveSeeing ( 111 , 135 , 1 ) ;
9078: LD_INT 111
9080: PPUSH
9081: LD_INT 135
9083: PPUSH
9084: LD_INT 1
9086: PPUSH
9087: CALL_OW 331
// SaveForQuickRestart ;
9091: CALL_OW 22
// ar_run := true ;
9095: LD_ADDR_EXP 5
9099: PUSH
9100: LD_INT 1
9102: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
9103: LD_INT 35
9105: PPUSH
9106: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , ar_dep_s , 10 ] ] ) or GetLives ( ar_dep_s ) < 999 ;
9110: LD_INT 22
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 91
9122: PUSH
9123: LD_INT 7
9125: PUSH
9126: LD_INT 10
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: LIST
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: PPUSH
9138: CALL_OW 69
9142: PUSH
9143: LD_INT 7
9145: PPUSH
9146: CALL_OW 256
9150: PUSH
9151: LD_INT 999
9153: LESS
9154: OR
9155: IFFALSE 9103
// if GetSide ( ar_dep_s ) = 2 then
9157: LD_INT 7
9159: PPUSH
9160: CALL_OW 255
9164: PUSH
9165: LD_INT 2
9167: EQUAL
9168: IFFALSE 9180
// SetSide ( ar_dep_s , 1 ) ;
9170: LD_INT 7
9172: PPUSH
9173: LD_INT 1
9175: PPUSH
9176: CALL_OW 235
// end ;
9180: LD_VAR 0 1
9184: RET
// every 0 0$2 trigger ar_run do var i , tmp , k ;
9185: LD_EXP 5
9189: IFFALSE 9549
9191: GO 9193
9193: DISABLE
9194: LD_INT 0
9196: PPUSH
9197: PPUSH
9198: PPUSH
// begin tmp := ar_force_tmp ^ UnitFilter ( ar_force_south , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ) ;
9199: LD_ADDR_VAR 0 2
9203: PUSH
9204: LD_EXP 40
9208: PUSH
9209: LD_EXP 36
9213: PPUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 21
9219: PUSH
9220: LD_INT 2
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 21
9229: PUSH
9230: LD_INT 1
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: LIST
9241: PPUSH
9242: CALL_OW 72
9246: ADD
9247: ST_TO_ADDR
// SetSide ( tmp , 5 ) ;
9248: LD_VAR 0 2
9252: PPUSH
9253: LD_INT 5
9255: PPUSH
9256: CALL_OW 235
// ChangeSideFog ( 5 , 1 ) ;
9260: LD_INT 5
9262: PPUSH
9263: LD_INT 1
9265: PPUSH
9266: CALL_OW 343
// k := 1 ;
9270: LD_ADDR_VAR 0 3
9274: PUSH
9275: LD_INT 1
9277: ST_TO_ADDR
// for i in tmp do
9278: LD_ADDR_VAR 0 1
9282: PUSH
9283: LD_VAR 0 2
9287: PUSH
9288: FOR_IN
9289: IFFALSE 9374
// begin if IsInUnit ( i ) then
9291: LD_VAR 0 1
9295: PPUSH
9296: CALL_OW 310
9300: IFFALSE 9311
// ComExitBuilding ( i ) ;
9302: LD_VAR 0 1
9306: PPUSH
9307: CALL_OW 122
// if GetClass ( i ) = 3 then
9311: LD_VAR 0 1
9315: PPUSH
9316: CALL_OW 257
9320: PUSH
9321: LD_INT 3
9323: EQUAL
9324: IFFALSE 9360
// begin AddComEnterUnit ( i , ar_vehicles_tmp [ k ] ) ;
9326: LD_VAR 0 1
9330: PPUSH
9331: LD_EXP 41
9335: PUSH
9336: LD_VAR 0 3
9340: ARRAY
9341: PPUSH
9342: CALL_OW 180
// k := k + 1 ;
9346: LD_ADDR_VAR 0 3
9350: PUSH
9351: LD_VAR 0 3
9355: PUSH
9356: LD_INT 1
9358: PLUS
9359: ST_TO_ADDR
// end ; AddComMoveToArea ( i , escape_area ) ;
9360: LD_VAR 0 1
9364: PPUSH
9365: LD_INT 10
9367: PPUSH
9368: CALL_OW 173
// end ;
9372: GO 9288
9374: POP
9375: POP
// ar_patrol := true ;
9376: LD_ADDR_EXP 7
9380: PUSH
9381: LD_INT 1
9383: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
9384: LD_INT 10
9386: PPUSH
9387: CALL_OW 67
// for i in tmp do
9391: LD_ADDR_VAR 0 1
9395: PUSH
9396: LD_VAR 0 2
9400: PUSH
9401: FOR_IN
9402: IFFALSE 9430
// if not HasTask ( i ) then
9404: LD_VAR 0 1
9408: PPUSH
9409: CALL_OW 314
9413: NOT
9414: IFFALSE 9428
// ComMoveToArea ( i , escape_area ) ;
9416: LD_VAR 0 1
9420: PPUSH
9421: LD_INT 10
9423: PPUSH
9424: CALL_OW 113
9428: GO 9401
9430: POP
9431: POP
// k := UnitFilter ( tmp , [ f_inarea , escape_area ] ) ;
9432: LD_ADDR_VAR 0 3
9436: PUSH
9437: LD_VAR 0 2
9441: PPUSH
9442: LD_INT 95
9444: PUSH
9445: LD_INT 10
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 72
9456: ST_TO_ADDR
// if k then
9457: LD_VAR 0 3
9461: IFFALSE 9530
// for i in k do
9463: LD_ADDR_VAR 0 1
9467: PUSH
9468: LD_VAR 0 3
9472: PUSH
9473: FOR_IN
9474: IFFALSE 9528
// begin if IsInUnit ( i ) then
9476: LD_VAR 0 1
9480: PPUSH
9481: CALL_OW 310
9485: IFFALSE 9501
// RemoveUnit ( IsInUnit ( i ) ) ;
9487: LD_VAR 0 1
9491: PPUSH
9492: CALL_OW 310
9496: PPUSH
9497: CALL_OW 64
// RemoveUnit ( i ) ;
9501: LD_VAR 0 1
9505: PPUSH
9506: CALL_OW 64
// tmp := tmp diff i ;
9510: LD_ADDR_VAR 0 2
9514: PUSH
9515: LD_VAR 0 2
9519: PUSH
9520: LD_VAR 0 1
9524: DIFF
9525: ST_TO_ADDR
// end ;
9526: GO 9473
9528: POP
9529: POP
// until tmp = [ ] ;
9530: LD_VAR 0 2
9534: PUSH
9535: EMPTY
9536: EQUAL
9537: IFFALSE 9384
// ChangeSideFog ( 5 , 5 ) ;
9539: LD_INT 5
9541: PPUSH
9542: LD_INT 5
9544: PPUSH
9545: CALL_OW 343
// end ;
9549: PPOPN 3
9551: END
// every 0 0$03 trigger ar_patrol do var i , un , veh ;
9552: LD_EXP 7
9556: IFFALSE 9846
9558: GO 9560
9560: DISABLE
9561: LD_INT 0
9563: PPUSH
9564: PPUSH
9565: PPUSH
// begin uc_side := 2 ;
9566: LD_ADDR_OWVAR 20
9570: PUSH
9571: LD_INT 2
9573: ST_TO_ADDR
// uc_nation := 2 ;
9574: LD_ADDR_OWVAR 21
9578: PUSH
9579: LD_INT 2
9581: ST_TO_ADDR
// InitHc ;
9582: CALL_OW 19
// PrepareHuman ( sex_male , 1 , 6 ) ;
9586: LD_INT 1
9588: PPUSH
9589: LD_INT 1
9591: PPUSH
9592: LD_INT 6
9594: PPUSH
9595: CALL_OW 380
// un := CreateHuman ;
9599: LD_ADDR_VAR 0 2
9603: PUSH
9604: CALL_OW 44
9608: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_gun , 98 ) ;
9609: LD_INT 14
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: LD_INT 1
9617: PPUSH
9618: LD_INT 27
9620: PPUSH
9621: LD_INT 98
9623: PPUSH
9624: CALL 54596 0 5
// veh := CreateVehicle ;
9628: LD_ADDR_VAR 0 3
9632: PUSH
9633: CALL_OW 45
9637: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
9638: LD_VAR 0 3
9642: PPUSH
9643: LD_INT 4
9645: PPUSH
9646: CALL_OW 233
// PlaceUnitXY ( veh , 179 , 135 , false ) ;
9650: LD_VAR 0 3
9654: PPUSH
9655: LD_INT 179
9657: PPUSH
9658: LD_INT 135
9660: PPUSH
9661: LD_INT 0
9663: PPUSH
9664: CALL_OW 48
// PlaceHumanInUnit ( un , veh ) ;
9668: LD_VAR 0 2
9672: PPUSH
9673: LD_VAR 0 3
9677: PPUSH
9678: CALL_OW 52
// ComMoveXY ( un , 126 , 133 ) ;
9682: LD_VAR 0 2
9686: PPUSH
9687: LD_INT 126
9689: PPUSH
9690: LD_INT 133
9692: PPUSH
9693: CALL_OW 111
// repeat wait ( 0 0$0.3 ) ;
9697: LD_INT 10
9699: PPUSH
9700: CALL_OW 67
// until See ( 1 , veh ) or GetDistUnits ( veh , ar_dep_s ) < 9 ;
9704: LD_INT 1
9706: PPUSH
9707: LD_VAR 0 3
9711: PPUSH
9712: CALL_OW 292
9716: PUSH
9717: LD_VAR 0 3
9721: PPUSH
9722: LD_INT 7
9724: PPUSH
9725: CALL_OW 296
9729: PUSH
9730: LD_INT 9
9732: LESS
9733: OR
9734: IFFALSE 9697
// ComHold ( veh ) ;
9736: LD_VAR 0 3
9740: PPUSH
9741: CALL_OW 140
// Say ( un , D2aa-Ar1-1 ) ;
9745: LD_VAR 0 2
9749: PPUSH
9750: LD_STRING D2aa-Ar1-1
9752: PPUSH
9753: CALL_OW 88
// ComMoveXY ( un , 177 , 96 ) ;
9757: LD_VAR 0 2
9761: PPUSH
9762: LD_INT 177
9764: PPUSH
9765: LD_INT 96
9767: PPUSH
9768: CALL_OW 111
// AddComExitVehicle ( un ) ;
9772: LD_VAR 0 2
9776: PPUSH
9777: CALL_OW 181
// repeat wait ( 0 0$1 ) ;
9781: LD_INT 35
9783: PPUSH
9784: CALL_OW 67
// until GetDistUnits ( un , ar_dep_e ) < 15 ;
9788: LD_VAR 0 2
9792: PPUSH
9793: LD_INT 204
9795: PPUSH
9796: CALL_OW 296
9800: PUSH
9801: LD_INT 15
9803: LESS
9804: IFFALSE 9781
// mc_bases := ReplaceIn ( mc_bases , [ 3 , mc_bases [ 3 ] + 1 ] , un ) ;
9806: LD_ADDR_EXP 50
9810: PUSH
9811: LD_EXP 50
9815: PPUSH
9816: LD_INT 3
9818: PUSH
9819: LD_EXP 50
9823: PUSH
9824: LD_INT 3
9826: ARRAY
9827: PUSH
9828: LD_INT 1
9830: PLUS
9831: PUSH
9832: EMPTY
9833: LIST
9834: LIST
9835: PPUSH
9836: LD_VAR 0 2
9840: PPUSH
9841: CALL 54718 0 3
9845: ST_TO_ADDR
// end ;
9846: PPOPN 3
9848: END
// every 0 0$2 trigger GetSide ( ar_dep_s ) = 1 or IsDead ( ar_dep_s ) do var i , points ;
9849: LD_INT 7
9851: PPUSH
9852: CALL_OW 255
9856: PUSH
9857: LD_INT 1
9859: EQUAL
9860: PUSH
9861: LD_INT 7
9863: PPUSH
9864: CALL_OW 301
9868: OR
9869: IFFALSE 12293
9871: GO 9873
9873: DISABLE
9874: LD_INT 0
9876: PPUSH
9877: PPUSH
// begin for i in UnitFilter ( ar_force_south , [ f_type , unit_building ] ) do
9878: LD_ADDR_VAR 0 1
9882: PUSH
9883: LD_EXP 36
9887: PPUSH
9888: LD_INT 21
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 72
9902: PUSH
9903: FOR_IN
9904: IFFALSE 9920
// SetSide ( i , 1 ) ;
9906: LD_VAR 0 1
9910: PPUSH
9911: LD_INT 1
9913: PPUSH
9914: CALL_OW 235
9918: GO 9903
9920: POP
9921: POP
// points := [ [ 46 , 41 ] , [ 50 , 25 ] , [ 57 , 75 ] , [ 75 , 89 ] , [ 51 , 45 ] , [ 95 , 95 ] , [ 84 , 77 ] , [ 101 , 76 ] , [ 118 , 81 ] , [ 139 , 97 ] , [ 129 , 114 ] , [ 154 , 111 ] ] ;
9922: LD_ADDR_VAR 0 2
9926: PUSH
9927: LD_INT 46
9929: PUSH
9930: LD_INT 41
9932: PUSH
9933: EMPTY
9934: LIST
9935: LIST
9936: PUSH
9937: LD_INT 50
9939: PUSH
9940: LD_INT 25
9942: PUSH
9943: EMPTY
9944: LIST
9945: LIST
9946: PUSH
9947: LD_INT 57
9949: PUSH
9950: LD_INT 75
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: PUSH
9957: LD_INT 75
9959: PUSH
9960: LD_INT 89
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 51
9969: PUSH
9970: LD_INT 45
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: PUSH
9977: LD_INT 95
9979: PUSH
9980: LD_INT 95
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PUSH
9987: LD_INT 84
9989: PUSH
9990: LD_INT 77
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 101
9999: PUSH
10000: LD_INT 76
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 118
10009: PUSH
10010: LD_INT 81
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: LD_INT 139
10019: PUSH
10020: LD_INT 97
10022: PUSH
10023: EMPTY
10024: LIST
10025: LIST
10026: PUSH
10027: LD_INT 129
10029: PUSH
10030: LD_INT 114
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 154
10039: PUSH
10040: LD_INT 111
10042: PUSH
10043: EMPTY
10044: LIST
10045: LIST
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: ST_TO_ADDR
// base_captured := true ;
10061: LD_ADDR_EXP 6
10065: PUSH
10066: LD_INT 1
10068: ST_TO_ADDR
// DialogueOn ;
10069: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10073: LD_EXP 21
10077: PPUSH
10078: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
10082: LD_EXP 21
10086: PPUSH
10087: LD_STRING D2-JMM-1
10089: PPUSH
10090: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10094: LD_EXP 30
10098: PPUSH
10099: LD_STRING D2-Pow-1
10101: PPUSH
10102: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
10106: LD_EXP 21
10110: PPUSH
10111: LD_STRING D2-JMM-2
10113: PPUSH
10114: CALL_OW 88
// SayRadio ( Powell , D2-Pow-2 ) ;
10118: LD_EXP 30
10122: PPUSH
10123: LD_STRING D2-Pow-2
10125: PPUSH
10126: CALL_OW 94
// Say ( JMM , D2-JMM-3 ) ;
10130: LD_EXP 21
10134: PPUSH
10135: LD_STRING D2-JMM-3
10137: PPUSH
10138: CALL_OW 88
// DialogueOff ;
10142: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
10146: LD_STRING M2
10148: PPUSH
10149: CALL_OW 337
// Wait ( 0 0$2 ) ;
10153: LD_INT 70
10155: PPUSH
10156: CALL_OW 67
// if IsOk ( Gary ) then
10160: LD_EXP 32
10164: PPUSH
10165: CALL_OW 302
10169: IFFALSE 10183
// Say ( Gary , D2a-Gary-1 ) ;
10171: LD_EXP 32
10175: PPUSH
10176: LD_STRING D2a-Gary-1
10178: PPUSH
10179: CALL_OW 88
// if IsOk ( Bobby ) then
10183: LD_EXP 24
10187: PPUSH
10188: CALL_OW 302
10192: IFFALSE 10206
// Say ( Bobby , D2a-Bobby-1 ) ;
10194: LD_EXP 24
10198: PPUSH
10199: LD_STRING D2a-Bobby-1
10201: PPUSH
10202: CALL_OW 88
// if IsOk ( Cyrus ) then
10206: LD_EXP 25
10210: PPUSH
10211: CALL_OW 302
10215: IFFALSE 10229
// Say ( Cyrus , D2a-Cyrus-1 ) ;
10217: LD_EXP 25
10221: PPUSH
10222: LD_STRING D2a-Cyrus-1
10224: PPUSH
10225: CALL_OW 88
// if IsOk ( Lisa ) then
10229: LD_EXP 22
10233: PPUSH
10234: CALL_OW 302
10238: IFFALSE 10252
// Say ( Lisa , D2a-Lisa-1 ) ;
10240: LD_EXP 22
10244: PPUSH
10245: LD_STRING D2a-Lisa-1
10247: PPUSH
10248: CALL_OW 88
// if IsOk ( Frank ) then
10252: LD_EXP 33
10256: PPUSH
10257: CALL_OW 302
10261: IFFALSE 10275
// Say ( Frank , D2a-Frank-1 ) ;
10263: LD_EXP 33
10267: PPUSH
10268: LD_STRING D2a-Frank-1
10270: PPUSH
10271: CALL_OW 88
// if IsOk ( Cornel ) then
10275: LD_EXP 31
10279: PPUSH
10280: CALL_OW 302
10284: IFFALSE 10298
// Say ( Cornel , D2a-Corn-1 ) ;
10286: LD_EXP 31
10290: PPUSH
10291: LD_STRING D2a-Corn-1
10293: PPUSH
10294: CALL_OW 88
// if IsOk ( Donaldson ) then
10298: LD_EXP 23
10302: PPUSH
10303: CALL_OW 302
10307: IFFALSE 10321
// Say ( Donaldson , D2a-Don-1 ) ;
10309: LD_EXP 23
10313: PPUSH
10314: LD_STRING D2a-Don-1
10316: PPUSH
10317: CALL_OW 88
// if IsOk ( Brown ) then
10321: LD_EXP 27
10325: PPUSH
10326: CALL_OW 302
10330: IFFALSE 10344
// Say ( Brown , D2a-Brown-1 ) ;
10332: LD_EXP 27
10336: PPUSH
10337: LD_STRING D2a-Brown-1
10339: PPUSH
10340: CALL_OW 88
// Wait ( 0 0$30 ) ;
10344: LD_INT 1050
10346: PPUSH
10347: CALL_OW 67
// if IsOk ( Frank ) then
10351: LD_EXP 33
10355: PPUSH
10356: CALL_OW 302
10360: IFFALSE 10626
// begin DialogueOn ;
10362: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
10366: LD_EXP 21
10370: PUSH
10371: LD_EXP 33
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PPUSH
10380: CALL_OW 87
// Say ( Frank , D3F-Frank-1 ) ;
10384: LD_EXP 33
10388: PPUSH
10389: LD_STRING D3F-Frank-1
10391: PPUSH
10392: CALL_OW 88
// Say ( JMM , D3F-JMM-1 ) ;
10396: LD_EXP 21
10400: PPUSH
10401: LD_STRING D3F-JMM-1
10403: PPUSH
10404: CALL_OW 88
// Say ( Frank , D3F-Frank-2 ) ;
10408: LD_EXP 33
10412: PPUSH
10413: LD_STRING D3F-Frank-2
10415: PPUSH
10416: CALL_OW 88
// case Query ( QFrank ) of 1 :
10420: LD_STRING QFrank
10422: PPUSH
10423: CALL_OW 97
10427: PUSH
10428: LD_INT 1
10430: DOUBLE
10431: EQUAL
10432: IFTRUE 10436
10434: GO 10459
10436: POP
// begin Say ( JMM , D3Fa-JMM-1 ) ;
10437: LD_EXP 21
10441: PPUSH
10442: LD_STRING D3Fa-JMM-1
10444: PPUSH
10445: CALL_OW 88
// us_scout := 1 ;
10449: LD_ADDR_EXP 8
10453: PUSH
10454: LD_INT 1
10456: ST_TO_ADDR
// end ; 2 :
10457: GO 10622
10459: LD_INT 2
10461: DOUBLE
10462: EQUAL
10463: IFTRUE 10467
10465: GO 10589
10467: POP
// begin Say ( JMM , D3Fb-JMM-1 ) ;
10468: LD_EXP 21
10472: PPUSH
10473: LD_STRING D3Fb-JMM-1
10475: PPUSH
10476: CALL_OW 88
// Say ( Frank , D3Fb-Frank-1 ) ;
10480: LD_EXP 33
10484: PPUSH
10485: LD_STRING D3Fb-Frank-1
10487: PPUSH
10488: CALL_OW 88
// case Query ( QFrank2 ) of 1 :
10492: LD_STRING QFrank2
10494: PPUSH
10495: CALL_OW 97
10499: PUSH
10500: LD_INT 1
10502: DOUBLE
10503: EQUAL
10504: IFTRUE 10508
10506: GO 10555
10508: POP
// begin us_scout := 2 ;
10509: LD_ADDR_EXP 8
10513: PUSH
10514: LD_INT 2
10516: ST_TO_ADDR
// Say ( JMM , D3Fba-JMM-1 ) ;
10517: LD_EXP 21
10521: PPUSH
10522: LD_STRING D3Fba-JMM-1
10524: PPUSH
10525: CALL_OW 88
// Say ( Frank , D3Fba-Frank-1 ) ;
10529: LD_EXP 33
10533: PPUSH
10534: LD_STRING D3Fba-Frank-1
10536: PPUSH
10537: CALL_OW 88
// Say ( JMM , D3Fba-JMM-2 ) ;
10541: LD_EXP 21
10545: PPUSH
10546: LD_STRING D3Fba-JMM-2
10548: PPUSH
10549: CALL_OW 88
// end ; 2 :
10553: GO 10587
10555: LD_INT 2
10557: DOUBLE
10558: EQUAL
10559: IFTRUE 10563
10561: GO 10586
10563: POP
// begin us_scout := 0 ;
10564: LD_ADDR_EXP 8
10568: PUSH
10569: LD_INT 0
10571: ST_TO_ADDR
// Say ( JMM , D3Fbb-JMM-1 ) ;
10572: LD_EXP 21
10576: PPUSH
10577: LD_STRING D3Fbb-JMM-1
10579: PPUSH
10580: CALL_OW 88
// end ; end ;
10584: GO 10587
10586: POP
// end ; 3 :
10587: GO 10622
10589: LD_INT 3
10591: DOUBLE
10592: EQUAL
10593: IFTRUE 10597
10595: GO 10621
10597: POP
// begin us_scout := - 1 ;
10598: LD_ADDR_EXP 8
10602: PUSH
10603: LD_INT 1
10605: NEG
10606: ST_TO_ADDR
// Say ( JMM , D3Fc-JMM-1 ) ;
10607: LD_EXP 21
10611: PPUSH
10612: LD_STRING D3Fc-JMM-1
10614: PPUSH
10615: CALL_OW 88
// end ; end ;
10619: GO 10622
10621: POP
// DialogueOff ;
10622: CALL_OW 7
// end ; if us_scout in [ - 1 , 0 ] then
10626: LD_EXP 8
10630: PUSH
10631: LD_INT 1
10633: NEG
10634: PUSH
10635: LD_INT 0
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: IN
10642: IFFALSE 10646
// exit ;
10644: GO 12293
// if us_scout in [ 1 , 2 ] then
10646: LD_EXP 8
10650: PUSH
10651: LD_INT 1
10653: PUSH
10654: LD_INT 2
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: IN
10661: IFFALSE 11360
// begin if IsInUnit ( Frank ) then
10663: LD_EXP 33
10667: PPUSH
10668: CALL_OW 310
10672: IFFALSE 10683
// ComExitBuilding ( Frank ) ;
10674: LD_EXP 33
10678: PPUSH
10679: CALL_OW 122
// if IsDrivenBy ( Frank ) then
10683: LD_EXP 33
10687: PPUSH
10688: CALL_OW 311
10692: IFFALSE 10703
// ComExitVehicle ( Frank ) ;
10694: LD_EXP 33
10698: PPUSH
10699: CALL_OW 121
// SetSide ( Frank , 4 ) ;
10703: LD_EXP 33
10707: PPUSH
10708: LD_INT 4
10710: PPUSH
10711: CALL_OW 235
// wait ( 0 0$1 ) ;
10715: LD_INT 35
10717: PPUSH
10718: CALL_OW 67
// if us_scout = 2 then
10722: LD_EXP 8
10726: PUSH
10727: LD_INT 2
10729: EQUAL
10730: IFFALSE 11098
// begin ComMoveXY ( Frank , 75 , 63 ) ;
10732: LD_EXP 33
10736: PPUSH
10737: LD_INT 75
10739: PPUSH
10740: LD_INT 63
10742: PPUSH
10743: CALL_OW 111
// AddComHold ( Frank ) ;
10747: LD_EXP 33
10751: PPUSH
10752: CALL_OW 200
// AddComWait ( Frank , 0 0$22 ) ;
10756: LD_EXP 33
10760: PPUSH
10761: LD_INT 770
10763: PPUSH
10764: CALL_OW 202
// AddComMoveXY ( Frank , 100 , 75 ) ;
10768: LD_EXP 33
10772: PPUSH
10773: LD_INT 100
10775: PPUSH
10776: LD_INT 75
10778: PPUSH
10779: CALL_OW 171
// AddComMoveXY ( Frank , 123 , 103 ) ;
10783: LD_EXP 33
10787: PPUSH
10788: LD_INT 123
10790: PPUSH
10791: LD_INT 103
10793: PPUSH
10794: CALL_OW 171
// AddComMoveXY ( Frank , 138 , 108 ) ;
10798: LD_EXP 33
10802: PPUSH
10803: LD_INT 138
10805: PPUSH
10806: LD_INT 108
10808: PPUSH
10809: CALL_OW 171
// AddComHold ( Frank ) ;
10813: LD_EXP 33
10817: PPUSH
10818: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
10822: LD_INT 35
10824: PPUSH
10825: CALL_OW 67
// until IsAt ( Frank , 138 , 108 ) ;
10829: LD_EXP 33
10833: PPUSH
10834: LD_INT 138
10836: PPUSH
10837: LD_INT 108
10839: PPUSH
10840: CALL_OW 307
10844: IFFALSE 10822
// AddComMoveXY ( Frank , 125 , 132 ) ;
10846: LD_EXP 33
10850: PPUSH
10851: LD_INT 125
10853: PPUSH
10854: LD_INT 132
10856: PPUSH
10857: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10861: LD_INT 35
10863: PPUSH
10864: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 7 ;
10868: LD_INT 1
10870: PPUSH
10871: LD_EXP 33
10875: PPUSH
10876: CALL_OW 292
10880: PUSH
10881: LD_EXP 33
10885: PPUSH
10886: LD_INT 7
10888: PPUSH
10889: CALL_OW 296
10893: PUSH
10894: LD_INT 7
10896: LESS
10897: OR
10898: IFFALSE 10861
// DialogueOn ;
10900: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
10904: LD_EXP 33
10908: PPUSH
10909: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
10913: LD_INT 10
10915: PPUSH
10916: CALL_OW 68
// Say ( JMM , D4Fa-JMM-1 ) ;
10920: LD_EXP 21
10924: PPUSH
10925: LD_STRING D4Fa-JMM-1
10927: PPUSH
10928: CALL_OW 88
// for i in points do
10932: LD_ADDR_VAR 0 1
10936: PUSH
10937: LD_VAR 0 2
10941: PUSH
10942: FOR_IN
10943: IFFALSE 11001
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
10945: LD_VAR 0 1
10949: PUSH
10950: LD_INT 1
10952: ARRAY
10953: PPUSH
10954: LD_VAR 0 1
10958: PUSH
10959: LD_INT 2
10961: ARRAY
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: LD_INT 20
10968: NEG
10969: PPUSH
10970: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
10974: LD_VAR 0 1
10978: PUSH
10979: LD_INT 1
10981: ARRAY
10982: PPUSH
10983: LD_VAR 0 1
10987: PUSH
10988: LD_INT 2
10990: ARRAY
10991: PPUSH
10992: LD_INT 1
10994: PPUSH
10995: CALL_OW 331
// end ;
10999: GO 10942
11001: POP
11002: POP
// dwait ( 0 0$0.5 ) ;
11003: LD_INT 18
11005: PPUSH
11006: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11010: LD_INT 42
11012: PPUSH
11013: LD_INT 27
11015: PPUSH
11016: CALL_OW 84
// Say ( Frank , D4Fa-Frank-1 ) ;
11020: LD_EXP 33
11024: PPUSH
11025: LD_STRING D4Fa-Frank-1
11027: PPUSH
11028: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11032: LD_INT 18
11034: PPUSH
11035: CALL_OW 68
// Say ( JMM , D4Fa-JMM-2 ) ;
11039: LD_EXP 21
11043: PPUSH
11044: LD_STRING D4Fa-JMM-2
11046: PPUSH
11047: CALL_OW 88
// CenterNowOnXY ( 118 , 80 ) ;
11051: LD_INT 118
11053: PPUSH
11054: LD_INT 80
11056: PPUSH
11057: CALL_OW 86
// Say ( Frank , D4Fa-Frank-2 ) ;
11061: LD_EXP 33
11065: PPUSH
11066: LD_STRING D4Fa-Frank-2
11068: PPUSH
11069: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
11073: LD_INT 10
11075: PPUSH
11076: CALL_OW 68
// DialogueOff ;
11080: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11084: LD_EXP 33
11088: PPUSH
11089: LD_INT 1
11091: PPUSH
11092: CALL_OW 235
// end else
11096: GO 11360
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
11098: LD_INT 2
11100: PPUSH
11101: LD_INT 4
11103: PPUSH
11104: LD_INT 2
11106: PPUSH
11107: LD_INT 1
11109: PPUSH
11110: CALL_OW 80
// ComMoveXY ( Frank , 75 , 63 ) ;
11114: LD_EXP 33
11118: PPUSH
11119: LD_INT 75
11121: PPUSH
11122: LD_INT 63
11124: PPUSH
11125: CALL_OW 111
// AddComWait ( Frank , 0 0$5 ) ;
11129: LD_EXP 33
11133: PPUSH
11134: LD_INT 175
11136: PPUSH
11137: CALL_OW 202
// AddComMoveXY ( Frank , 102 , 76 ) ;
11141: LD_EXP 33
11145: PPUSH
11146: LD_INT 102
11148: PPUSH
11149: LD_INT 76
11151: PPUSH
11152: CALL_OW 171
// AddComMoveXY ( Frank , 108 , 70 ) ;
11156: LD_EXP 33
11160: PPUSH
11161: LD_INT 108
11163: PPUSH
11164: LD_INT 70
11166: PPUSH
11167: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11171: LD_INT 35
11173: PPUSH
11174: CALL_OW 67
// until See ( 2 , Frank ) ;
11178: LD_INT 2
11180: PPUSH
11181: LD_EXP 33
11185: PPUSH
11186: CALL_OW 292
11190: IFFALSE 11171
// ComMoveXY ( Frank , 112 , 118 ) ;
11192: LD_EXP 33
11196: PPUSH
11197: LD_INT 112
11199: PPUSH
11200: LD_INT 118
11202: PPUSH
11203: CALL_OW 111
// if GetLives ( Frank ) >= 750 then
11207: LD_EXP 33
11211: PPUSH
11212: CALL_OW 256
11216: PUSH
11217: LD_INT 750
11219: GREATEREQUAL
11220: IFFALSE 11234
// SetLives ( Frank , 700 ) ;
11222: LD_EXP 33
11226: PPUSH
11227: LD_INT 700
11229: PPUSH
11230: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
11234: LD_INT 35
11236: PPUSH
11237: CALL_OW 67
// until See ( 1 , Frank ) or GetDistUnits ( Frank , ar_dep_s ) < 17 ;
11241: LD_INT 1
11243: PPUSH
11244: LD_EXP 33
11248: PPUSH
11249: CALL_OW 292
11253: PUSH
11254: LD_EXP 33
11258: PPUSH
11259: LD_INT 7
11261: PPUSH
11262: CALL_OW 296
11266: PUSH
11267: LD_INT 17
11269: LESS
11270: OR
11271: IFFALSE 11234
// DialogueOn ;
11273: CALL_OW 6
// CenterNowOnUnits ( Frank ) ;
11277: LD_EXP 33
11281: PPUSH
11282: CALL_OW 87
// Say ( Frank , D4Fb-Frank-1 ) ;
11286: LD_EXP 33
11290: PPUSH
11291: LD_STRING D4Fb-Frank-1
11293: PPUSH
11294: CALL_OW 88
// Say ( JMM , D4Fb-JMM-1 ) ;
11298: LD_EXP 21
11302: PPUSH
11303: LD_STRING D4Fb-JMM-1
11305: PPUSH
11306: CALL_OW 88
// SayRand ( sex_female , D4Fb-FSci1-1 ) ;
11310: LD_INT 2
11312: PPUSH
11313: LD_STRING D4Fb-FSci1-1
11315: PPUSH
11316: CALL 16197 0 2
// Say ( Frank , D4Fb-Frank-2 ) ;
11320: LD_EXP 33
11324: PPUSH
11325: LD_STRING D4Fb-Frank-2
11327: PPUSH
11328: CALL_OW 88
// Say ( JMM , D4Fb-JMM-2 ) ;
11332: LD_EXP 21
11336: PPUSH
11337: LD_STRING D4Fb-JMM-2
11339: PPUSH
11340: CALL_OW 88
// DialogueOff ;
11344: CALL_OW 7
// SetSide ( Frank , 1 ) ;
11348: LD_EXP 33
11352: PPUSH
11353: LD_INT 1
11355: PPUSH
11356: CALL_OW 235
// end ; end ; if IsOk ( Kikuchi ) and not Frank then
11360: LD_EXP 34
11364: PPUSH
11365: CALL_OW 302
11369: PUSH
11370: LD_EXP 33
11374: NOT
11375: AND
11376: IFFALSE 11524
// begin DialogueOn ;
11378: CALL_OW 6
// CenterNowOnUnits ( [ JMM , Kikuchi ] ) ;
11382: LD_EXP 21
11386: PUSH
11387: LD_EXP 34
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PPUSH
11396: CALL_OW 87
// Say ( Kikuchi , D3Y-Yam-1 ) ;
11400: LD_EXP 34
11404: PPUSH
11405: LD_STRING D3Y-Yam-1
11407: PPUSH
11408: CALL_OW 88
// Say ( JMM , D3Y-JMM-1 ) ;
11412: LD_EXP 21
11416: PPUSH
11417: LD_STRING D3Y-JMM-1
11419: PPUSH
11420: CALL_OW 88
// Say ( Kikuchi , D3Y-Yam-2 ) ;
11424: LD_EXP 34
11428: PPUSH
11429: LD_STRING D3Y-Yam-2
11431: PPUSH
11432: CALL_OW 88
// case Query ( QYamoko ) of 1 :
11436: LD_STRING QYamoko
11438: PPUSH
11439: CALL_OW 97
11443: PUSH
11444: LD_INT 1
11446: DOUBLE
11447: EQUAL
11448: IFTRUE 11452
11450: GO 11487
11452: POP
// begin Say ( JMM , D3Ya-JMM-1 ) ;
11453: LD_EXP 21
11457: PPUSH
11458: LD_STRING D3Ya-JMM-1
11460: PPUSH
11461: CALL_OW 88
// Say ( Kikuchi , D3Ya-Yam-1 ) ;
11465: LD_EXP 34
11469: PPUSH
11470: LD_STRING D3Ya-Yam-1
11472: PPUSH
11473: CALL_OW 88
// us_scout := 1 ;
11477: LD_ADDR_EXP 8
11481: PUSH
11482: LD_INT 1
11484: ST_TO_ADDR
// end ; 2 :
11485: GO 11520
11487: LD_INT 2
11489: DOUBLE
11490: EQUAL
11491: IFTRUE 11495
11493: GO 11519
11495: POP
// begin us_scout := - 1 ;
11496: LD_ADDR_EXP 8
11500: PUSH
11501: LD_INT 1
11503: NEG
11504: ST_TO_ADDR
// Say ( JMM , D3Yb-JMM-1 ) ;
11505: LD_EXP 21
11509: PPUSH
11510: LD_STRING D3Yb-JMM-1
11512: PPUSH
11513: CALL_OW 88
// end ; end ;
11517: GO 11520
11519: POP
// DialogueOff ;
11520: CALL_OW 7
// end ; if Frank then
11524: LD_EXP 33
11528: IFFALSE 11532
// exit ;
11530: GO 12293
// if us_scout in [ - 1 , 0 ] then
11532: LD_EXP 8
11536: PUSH
11537: LD_INT 1
11539: NEG
11540: PUSH
11541: LD_INT 0
11543: PUSH
11544: EMPTY
11545: LIST
11546: LIST
11547: IN
11548: IFFALSE 11552
// exit ;
11550: GO 12293
// us_scout := [ 2 , 2 , 1 ] [ Difficulty ] ;
11552: LD_ADDR_EXP 8
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: LD_INT 1
11565: PUSH
11566: EMPTY
11567: LIST
11568: LIST
11569: LIST
11570: PUSH
11571: LD_OWVAR 67
11575: ARRAY
11576: ST_TO_ADDR
// if us_scout in [ 1 , 2 ] then
11577: LD_EXP 8
11581: PUSH
11582: LD_INT 1
11584: PUSH
11585: LD_INT 2
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: IN
11592: IFFALSE 12293
// begin if IsInUnit ( Kikuchi ) then
11594: LD_EXP 34
11598: PPUSH
11599: CALL_OW 310
11603: IFFALSE 11614
// ComExitBuilding ( Kikuchi ) ;
11605: LD_EXP 34
11609: PPUSH
11610: CALL_OW 122
// if IsDrivenBy ( Kikuchi ) then
11614: LD_EXP 34
11618: PPUSH
11619: CALL_OW 311
11623: IFFALSE 11634
// ComExitVehicle ( Kikuchi ) ;
11625: LD_EXP 34
11629: PPUSH
11630: CALL_OW 121
// SetSide ( Kikuchi , 4 ) ;
11634: LD_EXP 34
11638: PPUSH
11639: LD_INT 4
11641: PPUSH
11642: CALL_OW 235
// wait ( 0 0$1 ) ;
11646: LD_INT 35
11648: PPUSH
11649: CALL_OW 67
// if us_scout = 2 then
11653: LD_EXP 8
11657: PUSH
11658: LD_INT 2
11660: EQUAL
11661: IFFALSE 12041
// begin ComMoveXY ( Kikuchi , 75 , 63 ) ;
11663: LD_EXP 34
11667: PPUSH
11668: LD_INT 75
11670: PPUSH
11671: LD_INT 63
11673: PPUSH
11674: CALL_OW 111
// AddComHold ( Kikuchi ) ;
11678: LD_EXP 34
11682: PPUSH
11683: CALL_OW 200
// AddComWait ( Kikuchi , 0 0$22 ) ;
11687: LD_EXP 34
11691: PPUSH
11692: LD_INT 770
11694: PPUSH
11695: CALL_OW 202
// AddComMoveXY ( Kikuchi , 100 , 75 ) ;
11699: LD_EXP 34
11703: PPUSH
11704: LD_INT 100
11706: PPUSH
11707: LD_INT 75
11709: PPUSH
11710: CALL_OW 171
// AddComMoveXY ( Kikuchi , 123 , 103 ) ;
11714: LD_EXP 34
11718: PPUSH
11719: LD_INT 123
11721: PPUSH
11722: LD_INT 103
11724: PPUSH
11725: CALL_OW 171
// AddComMoveXY ( Kikuchi , 138 , 108 ) ;
11729: LD_EXP 34
11733: PPUSH
11734: LD_INT 138
11736: PPUSH
11737: LD_INT 108
11739: PPUSH
11740: CALL_OW 171
// AddComHold ( Kikuchi ) ;
11744: LD_EXP 34
11748: PPUSH
11749: CALL_OW 200
// repeat wait ( 0 0$1 ) ;
11753: LD_INT 35
11755: PPUSH
11756: CALL_OW 67
// until IsAt ( Kikuchi , 138 , 108 ) ;
11760: LD_EXP 34
11764: PPUSH
11765: LD_INT 138
11767: PPUSH
11768: LD_INT 108
11770: PPUSH
11771: CALL_OW 307
11775: IFFALSE 11753
// AddComMoveXY ( Kikuchi , 125 , 132 ) ;
11777: LD_EXP 34
11781: PPUSH
11782: LD_INT 125
11784: PPUSH
11785: LD_INT 132
11787: PPUSH
11788: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11792: LD_INT 35
11794: PPUSH
11795: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 7 ;
11799: LD_INT 1
11801: PPUSH
11802: LD_EXP 34
11806: PPUSH
11807: CALL_OW 292
11811: PUSH
11812: LD_EXP 34
11816: PPUSH
11817: LD_INT 7
11819: PPUSH
11820: CALL_OW 296
11824: PUSH
11825: LD_INT 7
11827: LESS
11828: OR
11829: IFFALSE 11792
// DialogueOn ;
11831: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
11835: LD_EXP 34
11839: PPUSH
11840: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
11844: LD_INT 10
11846: PPUSH
11847: CALL_OW 68
// Say ( Kikuchi , D4Ya-Yam-1 ) ;
11851: LD_EXP 34
11855: PPUSH
11856: LD_STRING D4Ya-Yam-1
11858: PPUSH
11859: CALL_OW 88
// Say ( JMM , D4Ya-JMM-1 ) ;
11863: LD_EXP 21
11867: PPUSH
11868: LD_STRING D4Ya-JMM-1
11870: PPUSH
11871: CALL_OW 88
// for i in points do
11875: LD_ADDR_VAR 0 1
11879: PUSH
11880: LD_VAR 0 2
11884: PUSH
11885: FOR_IN
11886: IFFALSE 11944
// begin PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 20 ) ;
11888: LD_VAR 0 1
11892: PUSH
11893: LD_INT 1
11895: ARRAY
11896: PPUSH
11897: LD_VAR 0 1
11901: PUSH
11902: LD_INT 2
11904: ARRAY
11905: PPUSH
11906: LD_INT 1
11908: PPUSH
11909: LD_INT 20
11911: NEG
11912: PPUSH
11913: CALL_OW 330
// RemoveSeeing ( i [ 1 ] , i [ 2 ] , 1 ) ;
11917: LD_VAR 0 1
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 2
11933: ARRAY
11934: PPUSH
11935: LD_INT 1
11937: PPUSH
11938: CALL_OW 331
// end ;
11942: GO 11885
11944: POP
11945: POP
// dwait ( 0 0$0.5 ) ;
11946: LD_INT 18
11948: PPUSH
11949: CALL_OW 68
// CenterOnXY ( 42 , 27 ) ;
11953: LD_INT 42
11955: PPUSH
11956: LD_INT 27
11958: PPUSH
11959: CALL_OW 84
// Say ( Kikuchi , D4Ya-Yam-2 ) ;
11963: LD_EXP 34
11967: PPUSH
11968: LD_STRING D4Ya-Yam-2
11970: PPUSH
11971: CALL_OW 88
// dwait ( 0 0$0.5 ) ;
11975: LD_INT 18
11977: PPUSH
11978: CALL_OW 68
// CenterNowOnXY ( 118 , 80 ) ;
11982: LD_INT 118
11984: PPUSH
11985: LD_INT 80
11987: PPUSH
11988: CALL_OW 86
// Say ( JMM , D4Ya-JMM-2 ) ;
11992: LD_EXP 21
11996: PPUSH
11997: LD_STRING D4Ya-JMM-2
11999: PPUSH
12000: CALL_OW 88
// Say ( Kikuchi , D4Ya-Yam-3 ) ;
12004: LD_EXP 34
12008: PPUSH
12009: LD_STRING D4Ya-Yam-3
12011: PPUSH
12012: CALL_OW 88
// dwait ( 0 0$0.3 ) ;
12016: LD_INT 10
12018: PPUSH
12019: CALL_OW 68
// DialogueOff ;
12023: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
12027: LD_EXP 34
12031: PPUSH
12032: LD_INT 1
12034: PPUSH
12035: CALL_OW 235
// end else
12039: GO 12293
// begin SetAttitude ( 2 , 4 , att_enemy , true ) ;
12041: LD_INT 2
12043: PPUSH
12044: LD_INT 4
12046: PPUSH
12047: LD_INT 2
12049: PPUSH
12050: LD_INT 1
12052: PPUSH
12053: CALL_OW 80
// ComMoveXY ( Kikuchi , 75 , 63 ) ;
12057: LD_EXP 34
12061: PPUSH
12062: LD_INT 75
12064: PPUSH
12065: LD_INT 63
12067: PPUSH
12068: CALL_OW 111
// AddComWait ( Kikuchi , 0 0$5 ) ;
12072: LD_EXP 34
12076: PPUSH
12077: LD_INT 175
12079: PPUSH
12080: CALL_OW 202
// AddComMoveXY ( Kikuchi , 102 , 76 ) ;
12084: LD_EXP 34
12088: PPUSH
12089: LD_INT 102
12091: PPUSH
12092: LD_INT 76
12094: PPUSH
12095: CALL_OW 171
// AddComMoveXY ( Kikuchi , 108 , 70 ) ;
12099: LD_EXP 34
12103: PPUSH
12104: LD_INT 108
12106: PPUSH
12107: LD_INT 70
12109: PPUSH
12110: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
12114: LD_INT 35
12116: PPUSH
12117: CALL_OW 67
// until See ( 2 , Kikuchi ) ;
12121: LD_INT 2
12123: PPUSH
12124: LD_EXP 34
12128: PPUSH
12129: CALL_OW 292
12133: IFFALSE 12114
// ComMoveXY ( Kikuchi , 112 , 118 ) ;
12135: LD_EXP 34
12139: PPUSH
12140: LD_INT 112
12142: PPUSH
12143: LD_INT 118
12145: PPUSH
12146: CALL_OW 111
// if GetLives ( Kikuchi ) >= 750 then
12150: LD_EXP 34
12154: PPUSH
12155: CALL_OW 256
12159: PUSH
12160: LD_INT 750
12162: GREATEREQUAL
12163: IFFALSE 12177
// SetLives ( Kikuchi , 700 ) ;
12165: LD_EXP 34
12169: PPUSH
12170: LD_INT 700
12172: PPUSH
12173: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
12177: LD_INT 35
12179: PPUSH
12180: CALL_OW 67
// until See ( 1 , Kikuchi ) or GetDistUnits ( Kikuchi , ar_dep_s ) < 17 ;
12184: LD_INT 1
12186: PPUSH
12187: LD_EXP 34
12191: PPUSH
12192: CALL_OW 292
12196: PUSH
12197: LD_EXP 34
12201: PPUSH
12202: LD_INT 7
12204: PPUSH
12205: CALL_OW 296
12209: PUSH
12210: LD_INT 17
12212: LESS
12213: OR
12214: IFFALSE 12177
// DialogueOn ;
12216: CALL_OW 6
// CenterNowOnUnits ( Kikuchi ) ;
12220: LD_EXP 34
12224: PPUSH
12225: CALL_OW 87
// Say ( Kikuchi , D4Yb-Yam-1 ) ;
12229: LD_EXP 34
12233: PPUSH
12234: LD_STRING D4Yb-Yam-1
12236: PPUSH
12237: CALL_OW 88
// Say ( JMM , D4Yb-JMM-1 ) ;
12241: LD_EXP 21
12245: PPUSH
12246: LD_STRING D4Yb-JMM-1
12248: PPUSH
12249: CALL_OW 88
// Say ( Kikuchi , D4Yb-Yam-2 ) ;
12253: LD_EXP 34
12257: PPUSH
12258: LD_STRING D4Yb-Yam-2
12260: PPUSH
12261: CALL_OW 88
// Say ( JMM , D4Yb-JMM-2 ) ;
12265: LD_EXP 21
12269: PPUSH
12270: LD_STRING D4Yb-JMM-2
12272: PPUSH
12273: CALL_OW 88
// DialogueOff ;
12277: CALL_OW 7
// SetSide ( Kikuchi , 1 ) ;
12281: LD_EXP 34
12285: PPUSH
12286: LD_INT 1
12288: PPUSH
12289: CALL_OW 235
// end ; end ; end ;
12293: PPOPN 2
12295: END
// every 0 0$01 trigger base_captured do var i , tmp , un , un2 ;
12296: LD_EXP 6
12300: IFFALSE 13333
12302: GO 12304
12304: DISABLE
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
// begin enable ;
12311: ENABLE
// if not seen [ 1 ] then
12312: LD_EXP 9
12316: PUSH
12317: LD_INT 1
12319: ARRAY
12320: NOT
12321: IFFALSE 12501
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 11 ] , [ f_control , control_rider ] ] ] ) ;
12323: LD_ADDR_VAR 0 2
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 2
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 11
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 33
12353: PUSH
12354: LD_INT 4
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PPUSH
12370: CALL_OW 69
12374: ST_TO_ADDR
// if tmp then
12375: LD_VAR 0 2
12379: IFFALSE 12501
// for i in tmp do
12381: LD_ADDR_VAR 0 1
12385: PUSH
12386: LD_VAR 0 2
12390: PUSH
12391: FOR_IN
12392: IFFALSE 12499
// if See ( 1 , i ) then
12394: LD_INT 1
12396: PPUSH
12397: LD_VAR 0 1
12401: PPUSH
12402: CALL_OW 292
12406: IFFALSE 12497
// begin seen := Replace ( seen , 1 , true ) ;
12408: LD_ADDR_EXP 9
12412: PUSH
12413: LD_EXP 9
12417: PPUSH
12418: LD_INT 1
12420: PPUSH
12421: LD_INT 1
12423: PPUSH
12424: CALL_OW 1
12428: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12429: LD_INT 1
12431: PPUSH
12432: CALL 16019 0 1
12436: IFFALSE 12497
// begin DialogueOn ;
12438: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12442: LD_VAR 0 1
12446: PPUSH
12447: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12451: LD_INT 10
12453: PPUSH
12454: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol2-1 ) ;
12458: LD_ADDR_VAR 0 3
12462: PUSH
12463: LD_INT 1
12465: PPUSH
12466: LD_STRING D5a-Sol2-1
12468: PPUSH
12469: CALL 16197 0 2
12473: ST_TO_ADDR
// if not un then
12474: LD_VAR 0 3
12478: NOT
12479: IFFALSE 12491
// SayRand ( sex_female , D5a-FSol2-1 ) ;
12481: LD_INT 2
12483: PPUSH
12484: LD_STRING D5a-FSol2-1
12486: PPUSH
12487: CALL 16197 0 2
// DialogueOff ;
12491: CALL_OW 7
// break ;
12495: GO 12499
// end ; end ;
12497: GO 12391
12499: POP
12500: POP
// end ; if not seen [ 2 ] then
12501: LD_EXP 9
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: NOT
12510: IFFALSE 12735
// begin can_kamikazed := true ;
12512: LD_ADDR_EXP 10
12516: PUSH
12517: LD_INT 1
12519: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 17 ] ] ) ;
12520: LD_ADDR_VAR 0 2
12524: PUSH
12525: LD_INT 22
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: LD_INT 25
12537: PUSH
12538: LD_INT 17
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PPUSH
12549: CALL_OW 69
12553: ST_TO_ADDR
// if tmp then
12554: LD_VAR 0 2
12558: IFFALSE 12735
// for i in tmp do
12560: LD_ADDR_VAR 0 1
12564: PUSH
12565: LD_VAR 0 2
12569: PUSH
12570: FOR_IN
12571: IFFALSE 12733
// if See ( 1 , i ) then
12573: LD_INT 1
12575: PPUSH
12576: LD_VAR 0 1
12580: PPUSH
12581: CALL_OW 292
12585: IFFALSE 12731
// begin seen := Replace ( seen , 2 , true ) ;
12587: LD_ADDR_EXP 9
12591: PUSH
12592: LD_EXP 9
12596: PPUSH
12597: LD_INT 2
12599: PPUSH
12600: LD_INT 1
12602: PPUSH
12603: CALL_OW 1
12607: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12608: LD_INT 1
12610: PPUSH
12611: CALL 16019 0 1
12615: IFFALSE 12731
// begin DialogueOn ;
12617: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12621: LD_VAR 0 1
12625: PPUSH
12626: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12630: LD_INT 10
12632: PPUSH
12633: CALL_OW 68
// un := SayRand ( sex_male , D5b-Sol1-1 ) ;
12637: LD_ADDR_VAR 0 3
12641: PUSH
12642: LD_INT 1
12644: PPUSH
12645: LD_STRING D5b-Sol1-1
12647: PPUSH
12648: CALL 16197 0 2
12652: ST_TO_ADDR
// if not un then
12653: LD_VAR 0 3
12657: NOT
12658: IFFALSE 12676
// un := SayRand ( sex_female , D5b-FSol1-1 ) ;
12660: LD_ADDR_VAR 0 3
12664: PUSH
12665: LD_INT 2
12667: PPUSH
12668: LD_STRING D5b-FSol1-1
12670: PPUSH
12671: CALL 16197 0 2
12675: ST_TO_ADDR
// if un then
12676: LD_VAR 0 3
12680: IFFALSE 12725
// begin un2 := SayRand2 ( sex_male , D5b-Sol2-1 , un ) ;
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: LD_INT 1
12689: PPUSH
12690: LD_STRING D5b-Sol2-1
12692: PPUSH
12693: LD_VAR 0 3
12697: PPUSH
12698: CALL 16423 0 3
12702: ST_TO_ADDR
// if not un2 then
12703: LD_VAR 0 4
12707: NOT
12708: IFFALSE 12725
// SayRand2 ( sex_female , D5b-FSol2-1 , un ) ;
12710: LD_INT 2
12712: PPUSH
12713: LD_STRING D5b-FSol2-1
12715: PPUSH
12716: LD_VAR 0 3
12720: PPUSH
12721: CALL 16423 0 3
// end ; DialogueOff ;
12725: CALL_OW 7
// break ;
12729: GO 12733
// end ; end ;
12731: GO 12570
12733: POP
12734: POP
// end ; if not seen [ 3 ] then
12735: LD_EXP 9
12739: PUSH
12740: LD_INT 3
12742: ARRAY
12743: NOT
12744: IFFALSE 12918
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_remote ] ] ) ;
12746: LD_ADDR_VAR 0 2
12750: PUSH
12751: LD_INT 22
12753: PUSH
12754: LD_INT 2
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 33
12763: PUSH
12764: LD_INT 2
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: EMPTY
12772: LIST
12773: LIST
12774: PPUSH
12775: CALL_OW 69
12779: ST_TO_ADDR
// if tmp then
12780: LD_VAR 0 2
12784: IFFALSE 12918
// for i in tmp do
12786: LD_ADDR_VAR 0 1
12790: PUSH
12791: LD_VAR 0 2
12795: PUSH
12796: FOR_IN
12797: IFFALSE 12916
// if See ( 1 , i ) then
12799: LD_INT 1
12801: PPUSH
12802: LD_VAR 0 1
12806: PPUSH
12807: CALL_OW 292
12811: IFFALSE 12914
// begin seen := Replace ( seen , 3 , true ) ;
12813: LD_ADDR_EXP 9
12817: PUSH
12818: LD_EXP 9
12822: PPUSH
12823: LD_INT 3
12825: PPUSH
12826: LD_INT 1
12828: PPUSH
12829: CALL_OW 1
12833: ST_TO_ADDR
// if CanSayRand ( 1 ) then
12834: LD_INT 1
12836: PPUSH
12837: CALL 16019 0 1
12841: IFFALSE 12914
// begin DialogueOn ;
12843: CALL_OW 6
// CenterNowOnUnits ( i ) ;
12847: LD_VAR 0 1
12851: PPUSH
12852: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
12856: LD_INT 10
12858: PPUSH
12859: CALL_OW 68
// un := SayRand ( sex_male , D8-Sol1-1 ) ;
12863: LD_ADDR_VAR 0 3
12867: PUSH
12868: LD_INT 1
12870: PPUSH
12871: LD_STRING D8-Sol1-1
12873: PPUSH
12874: CALL 16197 0 2
12878: ST_TO_ADDR
// if not un then
12879: LD_VAR 0 3
12883: NOT
12884: IFFALSE 12896
// SayRand ( sex_female , D8-FSol1-1 ) ;
12886: LD_INT 2
12888: PPUSH
12889: LD_STRING D8-FSol1-1
12891: PPUSH
12892: CALL 16197 0 2
// Say ( JMM , D8-JMM-1 ) ;
12896: LD_EXP 21
12900: PPUSH
12901: LD_STRING D8-JMM-1
12903: PPUSH
12904: CALL_OW 88
// DialogueOff ;
12908: CALL_OW 7
// break ;
12912: GO 12916
// end ; end ;
12914: GO 12796
12916: POP
12917: POP
// end ; if not seen [ 4 ] then
12918: LD_EXP 9
12922: PUSH
12923: LD_INT 4
12925: ARRAY
12926: NOT
12927: IFFALSE 13089
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_control , control_apeman ] ] ) ;
12929: LD_ADDR_VAR 0 2
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 33
12946: PUSH
12947: LD_INT 5
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PPUSH
12958: CALL_OW 69
12962: ST_TO_ADDR
// if tmp then
12963: LD_VAR 0 2
12967: IFFALSE 13089
// for i in tmp do
12969: LD_ADDR_VAR 0 1
12973: PUSH
12974: LD_VAR 0 2
12978: PUSH
12979: FOR_IN
12980: IFFALSE 13087
// if See ( 1 , i ) then
12982: LD_INT 1
12984: PPUSH
12985: LD_VAR 0 1
12989: PPUSH
12990: CALL_OW 292
12994: IFFALSE 13085
// begin seen := Replace ( seen , 4 , true ) ;
12996: LD_ADDR_EXP 9
13000: PUSH
13001: LD_EXP 9
13005: PPUSH
13006: LD_INT 4
13008: PPUSH
13009: LD_INT 1
13011: PPUSH
13012: CALL_OW 1
13016: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13017: LD_INT 1
13019: PPUSH
13020: CALL 16019 0 1
13024: IFFALSE 13085
// begin DialogueOn ;
13026: CALL_OW 6
// CenterNowOnUnits ( i ) ;
13030: LD_VAR 0 1
13034: PPUSH
13035: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
13039: LD_INT 10
13041: PPUSH
13042: CALL_OW 68
// un := SayRand ( sex_male , D5a-Sol1-1 ) ;
13046: LD_ADDR_VAR 0 3
13050: PUSH
13051: LD_INT 1
13053: PPUSH
13054: LD_STRING D5a-Sol1-1
13056: PPUSH
13057: CALL 16197 0 2
13061: ST_TO_ADDR
// if not un then
13062: LD_VAR 0 3
13066: NOT
13067: IFFALSE 13079
// SayRand ( sex_female , D5a-FSol1-1 ) ;
13069: LD_INT 2
13071: PPUSH
13072: LD_STRING D5a-FSol1-1
13074: PPUSH
13075: CALL 16197 0 2
// DialogueOff ;
13079: CALL_OW 7
// break ;
13083: GO 13087
// end ; end ;
13085: GO 12979
13087: POP
13088: POP
// end ; if not seen [ 5 ] and seen [ 3 ] then
13089: LD_EXP 9
13093: PUSH
13094: LD_INT 5
13096: ARRAY
13097: NOT
13098: PUSH
13099: LD_EXP 9
13103: PUSH
13104: LD_INT 3
13106: ARRAY
13107: AND
13108: IFFALSE 13282
// begin tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_weapon , ar_control_tower ] ] ) ;
13110: LD_ADDR_VAR 0 2
13114: PUSH
13115: LD_INT 22
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: LD_INT 34
13127: PUSH
13128: LD_INT 31
13130: PUSH
13131: EMPTY
13132: LIST
13133: LIST
13134: PUSH
13135: EMPTY
13136: LIST
13137: LIST
13138: PPUSH
13139: CALL_OW 69
13143: ST_TO_ADDR
// if tmp then
13144: LD_VAR 0 2
13148: IFFALSE 13282
// for i in tmp do
13150: LD_ADDR_VAR 0 1
13154: PUSH
13155: LD_VAR 0 2
13159: PUSH
13160: FOR_IN
13161: IFFALSE 13280
// if See ( 1 , i ) then
13163: LD_INT 1
13165: PPUSH
13166: LD_VAR 0 1
13170: PPUSH
13171: CALL_OW 292
13175: IFFALSE 13278
// begin seen := Replace ( seen , 5 , true ) ;
13177: LD_ADDR_EXP 9
13181: PUSH
13182: LD_EXP 9
13186: PPUSH
13187: LD_INT 5
13189: PPUSH
13190: LD_INT 1
13192: PPUSH
13193: CALL_OW 1
13197: ST_TO_ADDR
// if CanSayRand ( 1 ) then
13198: LD_INT 1
13200: PPUSH
13201: CALL 16019 0 1
13205: IFFALSE 13278
// begin DialogueOn ;
13207: CALL_OW 6
// CenterNowOnUnits ( i ) ;
13211: LD_VAR 0 1
13215: PPUSH
13216: CALL_OW 87
// dwait ( 0 0$0.3 ) ;
13220: LD_INT 10
13222: PPUSH
13223: CALL_OW 68
// un := SayRand ( sex_male , D8a-Sol2-1 ) ;
13227: LD_ADDR_VAR 0 3
13231: PUSH
13232: LD_INT 1
13234: PPUSH
13235: LD_STRING D8a-Sol2-1
13237: PPUSH
13238: CALL 16197 0 2
13242: ST_TO_ADDR
// if not un then
13243: LD_VAR 0 3
13247: NOT
13248: IFFALSE 13260
// SayRand ( sex_female , D8a-FSol2-1 ) ;
13250: LD_INT 2
13252: PPUSH
13253: LD_STRING D8a-FSol2-1
13255: PPUSH
13256: CALL 16197 0 2
// Say ( JMM , D8a-JMM-1 ) ;
13260: LD_EXP 21
13264: PPUSH
13265: LD_STRING D8a-JMM-1
13267: PPUSH
13268: CALL_OW 88
// DialogueOff ;
13272: CALL_OW 7
// break ;
13276: GO 13280
// end ; end ;
13278: GO 13160
13280: POP
13281: POP
// end ; if seen [ 1 ] and seen [ 2 ] and seen [ 3 ] and seen [ 4 ] and seen [ 5 ] then
13282: LD_EXP 9
13286: PUSH
13287: LD_INT 1
13289: ARRAY
13290: PUSH
13291: LD_EXP 9
13295: PUSH
13296: LD_INT 2
13298: ARRAY
13299: AND
13300: PUSH
13301: LD_EXP 9
13305: PUSH
13306: LD_INT 3
13308: ARRAY
13309: AND
13310: PUSH
13311: LD_EXP 9
13315: PUSH
13316: LD_INT 4
13318: ARRAY
13319: AND
13320: PUSH
13321: LD_EXP 9
13325: PUSH
13326: LD_INT 5
13328: ARRAY
13329: AND
13330: IFFALSE 13333
// disable ;
13332: DISABLE
// end ;
13333: PPOPN 4
13335: END
// every 0 0$1 trigger can_kamikazed and kamikazed do var un ;
13336: LD_EXP 10
13340: PUSH
13341: LD_EXP 11
13345: AND
13346: IFFALSE 13544
13348: GO 13350
13350: DISABLE
13351: LD_INT 0
13353: PPUSH
// begin DialogueOn ;
13354: CALL_OW 6
// CenterNowOnUnits ( kamikazed ) ;
13358: LD_EXP 11
13362: PPUSH
13363: CALL_OW 87
// un := SayRand ( sex_male , D5c-Sol1-1 ) ;
13367: LD_ADDR_VAR 0 1
13371: PUSH
13372: LD_INT 1
13374: PPUSH
13375: LD_STRING D5c-Sol1-1
13377: PPUSH
13378: CALL 16197 0 2
13382: ST_TO_ADDR
// if not un then
13383: LD_VAR 0 1
13387: NOT
13388: IFFALSE 13406
// un := SayRand ( sex_female , D5c-FSol1-1 ) ;
13390: LD_ADDR_VAR 0 1
13394: PUSH
13395: LD_INT 2
13397: PPUSH
13398: LD_STRING D5c-FSol1-1
13400: PPUSH
13401: CALL 16197 0 2
13405: ST_TO_ADDR
// Say ( JMM , D5c-JMM-1 ) ;
13406: LD_EXP 21
13410: PPUSH
13411: LD_STRING D5c-JMM-1
13413: PPUSH
13414: CALL_OW 88
// if IsOk ( Lisa ) then
13418: LD_EXP 22
13422: PPUSH
13423: CALL_OW 302
13427: IFFALSE 13443
// Say ( Lisa , D5d-Lisa-1 ) else
13429: LD_EXP 22
13433: PPUSH
13434: LD_STRING D5d-Lisa-1
13436: PPUSH
13437: CALL_OW 88
13441: GO 13528
// if IsOk ( Cyrus ) then
13443: LD_EXP 25
13447: PPUSH
13448: CALL_OW 302
13452: IFFALSE 13468
// Say ( Cyrus , D5d-Cyrus-1 ) else
13454: LD_EXP 25
13458: PPUSH
13459: LD_STRING D5d-Cyrus-1
13461: PPUSH
13462: CALL_OW 88
13466: GO 13528
// if IsOk ( Gary ) then
13468: LD_EXP 32
13472: PPUSH
13473: CALL_OW 302
13477: IFFALSE 13493
// Say ( Gary , D5d-Gary-1 ) else
13479: LD_EXP 32
13483: PPUSH
13484: LD_STRING D5d-Gary-1
13486: PPUSH
13487: CALL_OW 88
13491: GO 13528
// if GetSex ( un ) = sex_male then
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 258
13502: PUSH
13503: LD_INT 1
13505: EQUAL
13506: IFFALSE 13522
// Say ( un , D5d-Sol1-1 ) else
13508: LD_VAR 0 1
13512: PPUSH
13513: LD_STRING D5d-Sol1-1
13515: PPUSH
13516: CALL_OW 88
13520: GO 13528
// begin DialogueOff ;
13522: CALL_OW 7
// exit ;
13526: GO 13544
// end ; Say ( JMM , D5d-JMM-1 ) ;
13528: LD_EXP 21
13532: PPUSH
13533: LD_STRING D5d-JMM-1
13535: PPUSH
13536: CALL_OW 88
// DialogueOff ;
13540: CALL_OW 7
// end ;
13544: PPOPN 1
13546: END
// every 0 0$2 trigger SeeArea ( 1 , artifact_area ) >= 2 do var un ;
13547: LD_INT 1
13549: PPUSH
13550: LD_INT 17
13552: PPUSH
13553: CALL_OW 294
13557: PUSH
13558: LD_INT 2
13560: GREATEREQUAL
13561: IFFALSE 13682
13563: GO 13565
13565: DISABLE
13566: LD_INT 0
13568: PPUSH
// begin PlaceSeeing ( 10 , 5 , 1 , - 10 ) ;
13569: LD_INT 10
13571: PPUSH
13572: LD_INT 5
13574: PPUSH
13575: LD_INT 1
13577: PPUSH
13578: LD_INT 10
13580: NEG
13581: PPUSH
13582: CALL_OW 330
// RemoveSeeing ( 10 , 5 , 1 ) ;
13586: LD_INT 10
13588: PPUSH
13589: LD_INT 5
13591: PPUSH
13592: LD_INT 1
13594: PPUSH
13595: CALL_OW 331
// CenterNowOnXY ( 10 , 5 ) ;
13599: LD_INT 10
13601: PPUSH
13602: LD_INT 5
13604: PPUSH
13605: CALL_OW 86
// DialogueOn ;
13609: CALL_OW 6
// un := SayRand ( sex_male , D6-Sci1-1 ) ;
13613: LD_ADDR_VAR 0 1
13617: PUSH
13618: LD_INT 1
13620: PPUSH
13621: LD_STRING D6-Sci1-1
13623: PPUSH
13624: CALL 16197 0 2
13628: ST_TO_ADDR
// if un then
13629: LD_VAR 0 1
13633: IFFALSE 13671
// begin Say ( JMM , D6-JMM-1 ) ;
13635: LD_EXP 21
13639: PPUSH
13640: LD_STRING D6-JMM-1
13642: PPUSH
13643: CALL_OW 88
// Say ( un , D6-Sci1-2 ) ;
13647: LD_VAR 0 1
13651: PPUSH
13652: LD_STRING D6-Sci1-2
13654: PPUSH
13655: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
13659: LD_EXP 21
13663: PPUSH
13664: LD_STRING D6-JMM-2
13666: PPUSH
13667: CALL_OW 88
// end ; DialogueOff ;
13671: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
13675: LD_STRING M3
13677: PPUSH
13678: CALL_OW 337
// end ;
13682: PPOPN 1
13684: END
// export ar_mechanic , ar_mechanic_friend ; every 0 0$20 trigger tick >= 20 20$00 and ( DangerAtRangeXY ( 2 , 169 , 90 , 10 ) [ 4 ] = 0 or IsDead ( ar_dep_w ) or GetSide ( ar_dep_w ) = 1 ) and not IsDead ( ar_dep_n ) do var un , i , cargo , tmp , escaped ;
13685: LD_OWVAR 1
13689: PUSH
13690: LD_INT 42000
13692: GREATEREQUAL
13693: PUSH
13694: LD_INT 2
13696: PPUSH
13697: LD_INT 169
13699: PPUSH
13700: LD_INT 90
13702: PPUSH
13703: LD_INT 10
13705: PPUSH
13706: CALL 55614 0 4
13710: PUSH
13711: LD_INT 4
13713: ARRAY
13714: PUSH
13715: LD_INT 0
13717: EQUAL
13718: PUSH
13719: LD_INT 45
13721: PPUSH
13722: CALL_OW 301
13726: OR
13727: PUSH
13728: LD_INT 45
13730: PPUSH
13731: CALL_OW 255
13735: PUSH
13736: LD_INT 1
13738: EQUAL
13739: OR
13740: AND
13741: PUSH
13742: LD_INT 94
13744: PPUSH
13745: CALL_OW 301
13749: NOT
13750: AND
13751: IFFALSE 14956
13753: GO 13755
13755: DISABLE
13756: LD_INT 0
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
// begin uc_side := 5 ;
13763: LD_ADDR_OWVAR 20
13767: PUSH
13768: LD_INT 5
13770: ST_TO_ADDR
// uc_nation := 2 ;
13771: LD_ADDR_OWVAR 21
13775: PUSH
13776: LD_INT 2
13778: ST_TO_ADDR
// InitHc ;
13779: CALL_OW 19
// PrepareHuman ( sex_male , 3 , 8 ) ;
13783: LD_INT 1
13785: PPUSH
13786: LD_INT 3
13788: PPUSH
13789: LD_INT 8
13791: PPUSH
13792: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13796: LD_ADDR_OWVAR 29
13800: PUSH
13801: LD_INT 12
13803: PUSH
13804: LD_INT 12
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
// hc_name := Hans Felige ;
13811: LD_ADDR_OWVAR 26
13815: PUSH
13816: LD_STRING Hans Felige
13818: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
13819: LD_ADDR_OWVAR 33
13823: PUSH
13824: LD_STRING SecondCharsGal
13826: ST_TO_ADDR
// hc_face_number := 7 ;
13827: LD_ADDR_OWVAR 34
13831: PUSH
13832: LD_INT 7
13834: ST_TO_ADDR
// ar_mechanic := CreateHuman ;
13835: LD_ADDR_EXP 46
13839: PUSH
13840: CALL_OW 44
13844: ST_TO_ADDR
// InitHc ;
13845: CALL_OW 19
// PrepareHuman ( sex_male , 16 , 2 ) ;
13849: LD_INT 1
13851: PPUSH
13852: LD_INT 16
13854: PPUSH
13855: LD_INT 2
13857: PPUSH
13858: CALL_OW 380
// hc_attr := [ 12 , 12 ] ;
13862: LD_ADDR_OWVAR 29
13866: PUSH
13867: LD_INT 12
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: ST_TO_ADDR
// hc_name :=  ;
13877: LD_ADDR_OWVAR 26
13881: PUSH
13882: LD_STRING 
13884: ST_TO_ADDR
// ar_mechanic_friend := CreateHuman ;
13885: LD_ADDR_EXP 47
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// InitHc ;
13895: CALL_OW 19
// repeat wait ( 0 0$1 ) ;
13899: LD_INT 35
13901: PPUSH
13902: CALL_OW 67
// until not InBattle ( 1 ) ;
13906: LD_INT 1
13908: PPUSH
13909: CALL_OW 463
13913: NOT
13914: IFFALSE 13899
// wait ( 0 0$5 ) ;
13916: LD_INT 175
13918: PPUSH
13919: CALL_OW 67
// DialogueOn ;
13923: CALL_OW 6
// InGameOn ;
13927: CALL_OW 8
// un := UnitFilter ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , [ f_sex , sex_male ] ) [ 1 ] ;
13931: LD_ADDR_VAR 0 1
13935: PUSH
13936: LD_INT 22
13938: PUSH
13939: LD_INT 1
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: LD_INT 25
13951: PUSH
13952: LD_INT 1
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 25
13961: PUSH
13962: LD_INT 2
13964: PUSH
13965: EMPTY
13966: LIST
13967: LIST
13968: PUSH
13969: LD_INT 25
13971: PUSH
13972: LD_INT 3
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 25
13981: PUSH
13982: LD_INT 4
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 25
13991: PUSH
13992: LD_INT 5
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 8
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PPUSH
14022: CALL_OW 69
14026: PUSH
14027: LD_EXP 21
14031: PUSH
14032: LD_EXP 22
14036: PUSH
14037: LD_EXP 23
14041: PUSH
14042: LD_EXP 24
14046: PUSH
14047: LD_EXP 25
14051: PUSH
14052: LD_EXP 26
14056: PUSH
14057: LD_EXP 27
14061: PUSH
14062: LD_EXP 28
14066: PUSH
14067: LD_EXP 29
14071: PUSH
14072: LD_EXP 31
14076: PUSH
14077: LD_EXP 32
14081: PUSH
14082: LD_EXP 33
14086: PUSH
14087: LD_EXP 34
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: DIFF
14107: PPUSH
14108: LD_INT 26
14110: PUSH
14111: LD_INT 1
14113: PUSH
14114: EMPTY
14115: LIST
14116: LIST
14117: PPUSH
14118: CALL_OW 72
14122: PUSH
14123: LD_INT 1
14125: ARRAY
14126: ST_TO_ADDR
// if Brown then
14127: LD_EXP 27
14131: IFFALSE 14143
// un := Brown ;
14133: LD_ADDR_VAR 0 1
14137: PUSH
14138: LD_EXP 27
14142: ST_TO_ADDR
// if un then
14143: LD_VAR 0 1
14147: IFFALSE 14173
// begin Say ( un , D7-Sol1-1 ) ;
14149: LD_VAR 0 1
14153: PPUSH
14154: LD_STRING D7-Sol1-1
14156: PPUSH
14157: CALL_OW 88
// Say ( JMM , D7-JMM-1 ) ;
14161: LD_EXP 21
14165: PPUSH
14166: LD_STRING D7-JMM-1
14168: PPUSH
14169: CALL_OW 88
// end ; SayRadio ( ar_mechanic , D7-Ar1-1 ) ;
14173: LD_EXP 46
14177: PPUSH
14178: LD_STRING D7-Ar1-1
14180: PPUSH
14181: CALL_OW 94
// Say ( JMM , D7-JMM-2 ) ;
14185: LD_EXP 21
14189: PPUSH
14190: LD_STRING D7-JMM-2
14192: PPUSH
14193: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-2 ) ;
14197: LD_EXP 46
14201: PPUSH
14202: LD_STRING D7-Ar1-2
14204: PPUSH
14205: CALL_OW 94
// Say ( JMM , D7-JMM-3 ) ;
14209: LD_EXP 21
14213: PPUSH
14214: LD_STRING D7-JMM-3
14216: PPUSH
14217: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-3 ) ;
14221: LD_EXP 46
14225: PPUSH
14226: LD_STRING D7-Ar1-3
14228: PPUSH
14229: CALL_OW 94
// Say ( JMM , D7-JMM-4 ) ;
14233: LD_EXP 21
14237: PPUSH
14238: LD_STRING D7-JMM-4
14240: PPUSH
14241: CALL_OW 88
// SayRadio ( ar_mechanic , D7-Ar1-4 ) ;
14245: LD_EXP 46
14249: PPUSH
14250: LD_STRING D7-Ar1-4
14252: PPUSH
14253: CALL_OW 94
// InGameOff ;
14257: CALL_OW 9
// DialogueOff ;
14261: CALL_OW 7
// case Query ( QCameras ) of 1 :
14265: LD_STRING QCameras
14267: PPUSH
14268: CALL_OW 97
14272: PUSH
14273: LD_INT 1
14275: DOUBLE
14276: EQUAL
14277: IFTRUE 14281
14279: GO 14284
14281: POP
// ; 2 :
14282: GO 14298
14284: LD_INT 2
14286: DOUBLE
14287: EQUAL
14288: IFTRUE 14292
14290: GO 14297
14292: POP
// exit ; end ;
14293: GO 14956
14295: GO 14298
14297: POP
// ChangeMissionObjectives ( MCar ) ;
14298: LD_STRING MCar
14300: PPUSH
14301: CALL_OW 337
// PlaceSeeing ( 124 , 90 , 1 , - 6 ) ;
14305: LD_INT 124
14307: PPUSH
14308: LD_INT 90
14310: PPUSH
14311: LD_INT 1
14313: PPUSH
14314: LD_INT 6
14316: NEG
14317: PPUSH
14318: CALL_OW 330
// RemoveSeeing ( 124 , 90 , 1 ) ;
14322: LD_INT 124
14324: PPUSH
14325: LD_INT 90
14327: PPUSH
14328: LD_INT 1
14330: PPUSH
14331: CALL_OW 331
// SetAreaMapShow ( parking_marea , 1 ) ;
14335: LD_INT 12
14337: PPUSH
14338: LD_INT 1
14340: PPUSH
14341: CALL_OW 424
// wait ( 3 ) ;
14345: LD_INT 3
14347: PPUSH
14348: CALL_OW 67
// CenterNowOnXY ( 124 , 90 ) ;
14352: LD_INT 124
14354: PPUSH
14355: LD_INT 90
14357: PPUSH
14358: CALL_OW 86
// cargo := false ;
14362: LD_ADDR_VAR 0 3
14366: PUSH
14367: LD_INT 0
14369: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14370: LD_INT 35
14372: PPUSH
14373: CALL_OW 67
// cargo := FilterUnitsInArea ( parking_marea , [ [ f_engine , engine_siberite ] , [ f_weapon , ar_cargo_bay ] , [ f_empty ] ] ) ;
14377: LD_ADDR_VAR 0 3
14381: PUSH
14382: LD_INT 12
14384: PPUSH
14385: LD_INT 32
14387: PUSH
14388: LD_INT 3
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 34
14397: PUSH
14398: LD_INT 32
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 58
14407: PUSH
14408: EMPTY
14409: LIST
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: PPUSH
14416: CALL_OW 70
14420: ST_TO_ADDR
// until cargo ;
14421: LD_VAR 0 3
14425: IFFALSE 14370
// cargo := cargo [ 1 ] ;
14427: LD_ADDR_VAR 0 3
14431: PUSH
14432: LD_VAR 0 3
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: ST_TO_ADDR
// SetSide ( cargo , 5 ) ;
14441: LD_VAR 0 3
14445: PPUSH
14446: LD_INT 5
14448: PPUSH
14449: CALL_OW 235
// SetAreaMapShow ( parking_marea , 0 ) ;
14453: LD_INT 12
14455: PPUSH
14456: LD_INT 0
14458: PPUSH
14459: CALL_OW 424
// PlaceUnitArea ( ar_mechanic , mechanic_spawn , false ) ;
14463: LD_EXP 46
14467: PPUSH
14468: LD_INT 11
14470: PPUSH
14471: LD_INT 0
14473: PPUSH
14474: CALL_OW 49
// PlaceUnitArea ( ar_mechanic_friend , mechanic_spawn , false ) ;
14478: LD_EXP 47
14482: PPUSH
14483: LD_INT 11
14485: PPUSH
14486: LD_INT 0
14488: PPUSH
14489: CALL_OW 49
// ComMoveToArea ( [ ar_mechanic , ar_mechanic_friend ] , parking_marea ) ;
14493: LD_EXP 46
14497: PUSH
14498: LD_EXP 47
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PPUSH
14507: LD_INT 12
14509: PPUSH
14510: CALL_OW 113
// AddComEnterUnit ( ar_mechanic , cargo ) ;
14514: LD_EXP 46
14518: PPUSH
14519: LD_VAR 0 3
14523: PPUSH
14524: CALL_OW 180
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14528: LD_EXP 46
14532: PUSH
14533: LD_EXP 47
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PPUSH
14542: LD_INT 209
14544: PPUSH
14545: LD_INT 178
14547: PPUSH
14548: CALL_OW 171
// escaped := 0 ;
14552: LD_ADDR_VAR 0 5
14556: PUSH
14557: LD_INT 0
14559: ST_TO_ADDR
// while ( true ) do
14560: LD_INT 1
14562: IFFALSE 14778
// begin wait ( 0 0$1 ) ;
14564: LD_INT 35
14566: PPUSH
14567: CALL_OW 67
// if not HasTask ( ar_mechanic ) or not HasTask ( ar_mechanic_friend ) then
14571: LD_EXP 46
14575: PPUSH
14576: CALL_OW 314
14580: NOT
14581: PUSH
14582: LD_EXP 47
14586: PPUSH
14587: CALL_OW 314
14591: NOT
14592: OR
14593: IFFALSE 14619
// AddComMoveXY ( [ ar_mechanic , ar_mechanic_friend ] , 209 , 178 ) ;
14595: LD_EXP 46
14599: PUSH
14600: LD_EXP 47
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: LD_INT 209
14611: PPUSH
14612: LD_INT 178
14614: PPUSH
14615: CALL_OW 171
// if IsInArea ( ar_mechanic , escape_area ) then
14619: LD_EXP 46
14623: PPUSH
14624: LD_INT 10
14626: PPUSH
14627: CALL_OW 308
14631: IFFALSE 14656
// begin RemoveUnit ( ar_mechanic ) ;
14633: LD_EXP 46
14637: PPUSH
14638: CALL_OW 64
// escaped := escaped + 1 ;
14642: LD_ADDR_VAR 0 5
14646: PUSH
14647: LD_VAR 0 5
14651: PUSH
14652: LD_INT 1
14654: PLUS
14655: ST_TO_ADDR
// end ; if IsInArea ( ar_mechanic_friend , escape_area ) then
14656: LD_EXP 47
14660: PPUSH
14661: LD_INT 10
14663: PPUSH
14664: CALL_OW 308
14668: IFFALSE 14693
// begin RemoveUnit ( ar_mechanic_friend ) ;
14670: LD_EXP 47
14674: PPUSH
14675: CALL_OW 64
// escaped := escaped + 1 ;
14679: LD_ADDR_VAR 0 5
14683: PUSH
14684: LD_VAR 0 5
14688: PUSH
14689: LD_INT 1
14691: PLUS
14692: ST_TO_ADDR
// end ; if IsInArea ( cargo , escape_area ) then
14693: LD_VAR 0 3
14697: PPUSH
14698: LD_INT 10
14700: PPUSH
14701: CALL_OW 308
14705: IFFALSE 14716
// RemoveUnit ( cargo ) ;
14707: LD_VAR 0 3
14711: PPUSH
14712: CALL_OW 64
// if not IsPlaced ( ar_mechanic ) and escaped >= 2 then
14716: LD_EXP 46
14720: PPUSH
14721: CALL_OW 305
14725: NOT
14726: PUSH
14727: LD_VAR 0 5
14731: PUSH
14732: LD_INT 2
14734: GREATEREQUAL
14735: AND
14736: IFFALSE 14740
// break ;
14738: GO 14778
// if not IsPlaced ( ar_mechanic ) and not IsPlaced ( ar_mechanic_friend ) and escaped < 2 then
14740: LD_EXP 46
14744: PPUSH
14745: CALL_OW 305
14749: NOT
14750: PUSH
14751: LD_EXP 47
14755: PPUSH
14756: CALL_OW 305
14760: NOT
14761: AND
14762: PUSH
14763: LD_VAR 0 5
14767: PUSH
14768: LD_INT 2
14770: LESS
14771: AND
14772: IFFALSE 14776
// exit ;
14774: GO 14956
// end ;
14776: GO 14560
// wait ( 0 0$2 ) ;
14778: LD_INT 70
14780: PPUSH
14781: CALL_OW 67
// SayRadio ( ar_mechanic , D7a-Ar1-1 ) ;
14785: LD_EXP 46
14789: PPUSH
14790: LD_STRING D7a-Ar1-1
14792: PPUSH
14793: CALL_OW 94
// tmp := [ [ 129 , 10 ] , [ 103 , 6 ] , [ 148 , 47 ] , [ 155 , 16 ] ] ;
14797: LD_ADDR_VAR 0 4
14801: PUSH
14802: LD_INT 129
14804: PUSH
14805: LD_INT 10
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 103
14814: PUSH
14815: LD_INT 6
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: LD_INT 148
14824: PUSH
14825: LD_INT 47
14827: PUSH
14828: EMPTY
14829: LIST
14830: LIST
14831: PUSH
14832: LD_INT 155
14834: PUSH
14835: LD_INT 16
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: ST_TO_ADDR
// if Difficulty = 1 then
14848: LD_OWVAR 67
14852: PUSH
14853: LD_INT 1
14855: EQUAL
14856: IFFALSE 14893
// tmp := tmp ^ [ [ 78 , 7 ] , [ 104 , 43 ] ] ;
14858: LD_ADDR_VAR 0 4
14862: PUSH
14863: LD_VAR 0 4
14867: PUSH
14868: LD_INT 78
14870: PUSH
14871: LD_INT 7
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 104
14880: PUSH
14881: LD_INT 43
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: ADD
14892: ST_TO_ADDR
// for i in tmp do
14893: LD_ADDR_VAR 0 2
14897: PUSH
14898: LD_VAR 0 4
14902: PUSH
14903: FOR_IN
14904: IFFALSE 14937
// PlaceSeeing ( i [ 1 ] , i [ 2 ] , 1 , - 9 ) ;
14906: LD_VAR 0 2
14910: PUSH
14911: LD_INT 1
14913: ARRAY
14914: PPUSH
14915: LD_VAR 0 2
14919: PUSH
14920: LD_INT 2
14922: ARRAY
14923: PPUSH
14924: LD_INT 1
14926: PPUSH
14927: LD_INT 9
14929: NEG
14930: PPUSH
14931: CALL_OW 330
14935: GO 14903
14937: POP
14938: POP
// SetAchievement ( ACH_FRIEND ) ;
14939: LD_STRING ACH_FRIEND
14941: PPUSH
14942: CALL_OW 543
// CenterOnXY ( 129 , 10 ) ;
14946: LD_INT 129
14948: PPUSH
14949: LD_INT 10
14951: PPUSH
14952: CALL_OW 84
// end ;
14956: PPOPN 5
14958: END
// every 0 0$1 trigger game_time - 10 10$00 <= tick do
14959: LD_EXP 15
14963: PUSH
14964: LD_INT 21000
14966: MINUS
14967: PUSH
14968: LD_OWVAR 1
14972: LESSEQUAL
14973: IFFALSE 15013
14975: GO 14977
14977: DISABLE
// begin powell_warn := true ;
14978: LD_ADDR_EXP 16
14982: PUSH
14983: LD_INT 1
14985: ST_TO_ADDR
// DialogueOn ;
14986: CALL_OW 6
// SayRadio ( Powell , D9-Pow-1 ) ;
14990: LD_EXP 30
14994: PPUSH
14995: LD_STRING D9-Pow-1
14997: PPUSH
14998: CALL_OW 94
// dwait ( 0 0$0.3 ) ;
15002: LD_INT 10
15004: PPUSH
15005: CALL_OW 68
// DialogueOff ;
15009: CALL_OW 7
// end ;
15013: END
// every 0 0$1 trigger game_time <= tick do
15014: LD_EXP 15
15018: PUSH
15019: LD_OWVAR 1
15023: LESSEQUAL
15024: IFFALSE 15063
15026: GO 15028
15028: DISABLE
// begin DialogueOn ;
15029: CALL_OW 6
// SayRadio ( Powell , D9a-Pow-1 ) ;
15033: LD_EXP 30
15037: PPUSH
15038: LD_STRING D9a-Pow-1
15040: PPUSH
15041: CALL_OW 94
// dwait ( 0 0$2 ) ;
15045: LD_INT 70
15047: PPUSH
15048: CALL_OW 68
// DialogueOff ;
15052: CALL_OW 7
// YouLost ( Command ) ;
15056: LD_STRING Command
15058: PPUSH
15059: CALL_OW 104
// end ;
15063: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_warehouse ] ] ) = 0 and IsOk ( JMM ) do var tmp , m1 , m2 , m3 ;
15064: LD_INT 22
15066: PUSH
15067: LD_INT 2
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PUSH
15074: LD_INT 30
15076: PUSH
15077: LD_INT 1
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PPUSH
15088: CALL_OW 69
15092: PUSH
15093: LD_INT 0
15095: EQUAL
15096: PUSH
15097: LD_EXP 21
15101: PPUSH
15102: CALL_OW 302
15106: AND
15107: IFFALSE 16016
15109: GO 15111
15111: DISABLE
15112: LD_INT 0
15114: PPUSH
15115: PPUSH
15116: PPUSH
15117: PPUSH
// begin m1 := false ;
15118: LD_ADDR_VAR 0 2
15122: PUSH
15123: LD_INT 0
15125: ST_TO_ADDR
// m2 := false ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_INT 0
15133: ST_TO_ADDR
// m3 := false ;
15134: LD_ADDR_VAR 0 4
15138: PUSH
15139: LD_INT 0
15141: ST_TO_ADDR
// if not am_veh_consturcted then
15142: LD_EXP 20
15146: NOT
15147: IFFALSE 15156
// SetAchievement ( ACH_ARABTECH ) ;
15149: LD_STRING ACH_ARABTECH
15151: PPUSH
15152: CALL_OW 543
// if tick < [ 120 120$00 , 100 100$00 , 95 95$00 ] [ Difficulty ] then
15156: LD_OWVAR 1
15160: PUSH
15161: LD_INT 252000
15163: PUSH
15164: LD_INT 210000
15166: PUSH
15167: LD_INT 199500
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PUSH
15175: LD_OWVAR 67
15179: ARRAY
15180: LESS
15181: IFFALSE 15203
// begin m3 := true ;
15183: LD_ADDR_VAR 0 4
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// AddMedal ( Time1 , 1 ) ;
15191: LD_STRING Time1
15193: PPUSH
15194: LD_INT 1
15196: PPUSH
15197: CALL_OW 101
// end else
15201: GO 15234
// if not powell_warn then
15203: LD_EXP 16
15207: NOT
15208: IFFALSE 15223
// AddMedal ( Time1 , - 1 ) else
15210: LD_STRING Time1
15212: PPUSH
15213: LD_INT 1
15215: NEG
15216: PPUSH
15217: CALL_OW 101
15221: GO 15234
// AddMedal ( Time1 , - 2 ) ;
15223: LD_STRING Time1
15225: PPUSH
15226: LD_INT 2
15228: NEG
15229: PPUSH
15230: CALL_OW 101
// if loses_counter >= [ 5 , 4 , 3 ] [ Difficulty ] then
15234: LD_EXP 17
15238: PUSH
15239: LD_INT 5
15241: PUSH
15242: LD_INT 4
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: PUSH
15253: LD_OWVAR 67
15257: ARRAY
15258: GREATEREQUAL
15259: IFFALSE 15274
// AddMedal ( Destroy , - 2 ) else
15261: LD_STRING Destroy
15263: PPUSH
15264: LD_INT 2
15266: NEG
15267: PPUSH
15268: CALL_OW 101
15272: GO 15407
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 25 then
15274: LD_INT 22
15276: PUSH
15277: LD_INT 2
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 21
15286: PUSH
15287: LD_INT 3
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 50
15296: PUSH
15297: EMPTY
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 25
15312: GREATEREQUAL
15313: IFFALSE 15328
// AddMedal ( Destroy , - 1 ) else
15315: LD_STRING Destroy
15317: PPUSH
15318: LD_INT 1
15320: NEG
15321: PPUSH
15322: CALL_OW 101
15326: GO 15407
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] , [ f_ok ] ] ) >= 15 then
15328: LD_INT 22
15330: PUSH
15331: LD_INT 2
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: LD_INT 21
15340: PUSH
15341: LD_INT 3
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 50
15350: PUSH
15351: EMPTY
15352: LIST
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 69
15363: PUSH
15364: LD_INT 15
15366: GREATEREQUAL
15367: IFFALSE 15389
// begin m1 := true ;
15369: LD_ADDR_VAR 0 2
15373: PUSH
15374: LD_INT 1
15376: ST_TO_ADDR
// AddMedal ( Destroy , 1 ) ;
15377: LD_STRING Destroy
15379: PPUSH
15380: LD_INT 1
15382: PPUSH
15383: CALL_OW 101
// end else
15387: GO 15407
// begin m1 := true ;
15389: LD_ADDR_VAR 0 2
15393: PUSH
15394: LD_INT 1
15396: ST_TO_ADDR
// AddMedal ( Destroy , 2 ) ;
15397: LD_STRING Destroy
15399: PPUSH
15400: LD_INT 2
15402: PPUSH
15403: CALL_OW 101
// end ; SaveVariable ( artifact_get , 11_artifact_captured ) ;
15407: LD_EXP 13
15411: PPUSH
15412: LD_STRING 11_artifact_captured
15414: PPUSH
15415: CALL_OW 39
// if artifact_get then
15419: LD_EXP 13
15423: IFFALSE 15445
// begin m2 := true ;
15425: LD_ADDR_VAR 0 3
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// AddMedal ( Artefact , 1 ) ;
15433: LD_STRING Artefact
15435: PPUSH
15436: LD_INT 1
15438: PPUSH
15439: CALL_OW 101
// end else
15443: GO 15456
// AddMedal ( Artefact , - 1 ) ;
15445: LD_STRING Artefact
15447: PPUSH
15448: LD_INT 1
15450: NEG
15451: PPUSH
15452: CALL_OW 101
// if m1 and m2 and m3 and Difficulty = 3 then
15456: LD_VAR 0 2
15460: PUSH
15461: LD_VAR 0 3
15465: AND
15466: PUSH
15467: LD_VAR 0 4
15471: AND
15472: PUSH
15473: LD_OWVAR 67
15477: PUSH
15478: LD_INT 3
15480: EQUAL
15481: AND
15482: IFFALSE 15494
// SetAchievementEX ( ACH_AMER , 11 ) ;
15484: LD_STRING ACH_AMER
15486: PPUSH
15487: LD_INT 11
15489: PPUSH
15490: CALL_OW 564
// if m1 and m2 and m3 and loses_counter = 0 then
15494: LD_VAR 0 2
15498: PUSH
15499: LD_VAR 0 3
15503: AND
15504: PUSH
15505: LD_VAR 0 4
15509: AND
15510: PUSH
15511: LD_EXP 17
15515: PUSH
15516: LD_INT 0
15518: EQUAL
15519: AND
15520: IFFALSE 15536
// begin wait ( 3 ) ;
15522: LD_INT 3
15524: PPUSH
15525: CALL_OW 67
// SetAchievement ( ACH_GENERAL ) ;
15529: LD_STRING ACH_GENERAL
15531: PPUSH
15532: CALL_OW 543
// end ; if tick <= 100 100$00 then
15536: LD_OWVAR 1
15540: PUSH
15541: LD_INT 210000
15543: LESSEQUAL
15544: IFFALSE 15560
// begin wait ( 3 ) ;
15546: LD_INT 3
15548: PPUSH
15549: CALL_OW 67
// SetAchievement ( ACH_ASPEED_11 ) ;
15553: LD_STRING ACH_ASPEED_11
15555: PPUSH
15556: CALL_OW 543
// end ; GiveMedals ( MAIN ) ;
15560: LD_STRING MAIN
15562: PPUSH
15563: CALL_OW 102
// selected := UnitFilter ( selected , [ f_alive ] ) ;
15567: LD_ADDR_EXP 19
15571: PUSH
15572: LD_EXP 19
15576: PPUSH
15577: LD_INT 51
15579: PUSH
15580: EMPTY
15581: LIST
15582: PPUSH
15583: CALL_OW 72
15587: ST_TO_ADDR
// tmp := JMM ^ selected ;
15588: LD_ADDR_VAR 0 1
15592: PUSH
15593: LD_EXP 21
15597: PUSH
15598: LD_EXP 19
15602: ADD
15603: ST_TO_ADDR
// RewardPeople ( tmp ) ;
15604: LD_VAR 0 1
15608: PPUSH
15609: CALL_OW 43
// SaveCharacters ( tmp diff [ JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] , 11c_others ) ;
15613: LD_VAR 0 1
15617: PUSH
15618: LD_EXP 21
15622: PUSH
15623: LD_EXP 22
15627: PUSH
15628: LD_EXP 23
15632: PUSH
15633: LD_EXP 24
15637: PUSH
15638: LD_EXP 25
15642: PUSH
15643: LD_EXP 26
15647: PUSH
15648: LD_EXP 27
15652: PUSH
15653: LD_EXP 28
15657: PUSH
15658: LD_EXP 29
15662: PUSH
15663: LD_EXP 31
15667: PUSH
15668: LD_EXP 32
15672: PUSH
15673: LD_EXP 33
15677: PUSH
15678: LD_EXP 34
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: DIFF
15698: PPUSH
15699: LD_STRING 11c_others
15701: PPUSH
15702: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
15706: LD_EXP 21
15710: PPUSH
15711: LD_EXP 3
15715: PUSH
15716: LD_STRING JMM
15718: STR
15719: PPUSH
15720: CALL_OW 38
// if Lisa then
15724: LD_EXP 22
15728: IFFALSE 15748
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
15730: LD_EXP 22
15734: PPUSH
15735: LD_EXP 3
15739: PUSH
15740: LD_STRING Lisa
15742: STR
15743: PPUSH
15744: CALL_OW 38
// if Donaldson then
15748: LD_EXP 23
15752: IFFALSE 15772
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
15754: LD_EXP 23
15758: PPUSH
15759: LD_EXP 3
15763: PUSH
15764: LD_STRING Donaldson
15766: STR
15767: PPUSH
15768: CALL_OW 38
// if Bobby then
15772: LD_EXP 24
15776: IFFALSE 15796
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
15778: LD_EXP 24
15782: PPUSH
15783: LD_EXP 3
15787: PUSH
15788: LD_STRING Bobby
15790: STR
15791: PPUSH
15792: CALL_OW 38
// if Cyrus then
15796: LD_EXP 25
15800: IFFALSE 15820
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
15802: LD_EXP 25
15806: PPUSH
15807: LD_EXP 3
15811: PUSH
15812: LD_STRING Cyrus
15814: STR
15815: PPUSH
15816: CALL_OW 38
// if Denis then
15820: LD_EXP 26
15824: IFFALSE 15844
// SaveCharacters ( Denis , mission_prefix & Denis ) ;
15826: LD_EXP 26
15830: PPUSH
15831: LD_EXP 3
15835: PUSH
15836: LD_STRING Denis
15838: STR
15839: PPUSH
15840: CALL_OW 38
// if Brown then
15844: LD_EXP 27
15848: IFFALSE 15868
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
15850: LD_EXP 27
15854: PPUSH
15855: LD_EXP 3
15859: PUSH
15860: LD_STRING Brown
15862: STR
15863: PPUSH
15864: CALL_OW 38
// if Gladstone then
15868: LD_EXP 28
15872: IFFALSE 15892
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
15874: LD_EXP 28
15878: PPUSH
15879: LD_EXP 3
15883: PUSH
15884: LD_STRING Gladstone
15886: STR
15887: PPUSH
15888: CALL_OW 38
// if Houten then
15892: LD_EXP 29
15896: IFFALSE 15916
// SaveCharacters ( Houten , mission_prefix & Houten ) ;
15898: LD_EXP 29
15902: PPUSH
15903: LD_EXP 3
15907: PUSH
15908: LD_STRING Houten
15910: STR
15911: PPUSH
15912: CALL_OW 38
// if Cornel then
15916: LD_EXP 31
15920: IFFALSE 15940
// SaveCharacters ( Cornel , mission_prefix & Cornell ) ;
15922: LD_EXP 31
15926: PPUSH
15927: LD_EXP 3
15931: PUSH
15932: LD_STRING Cornell
15934: STR
15935: PPUSH
15936: CALL_OW 38
// if Gary then
15940: LD_EXP 32
15944: IFFALSE 15964
// SaveCharacters ( Gary , mission_prefix & Gary ) ;
15946: LD_EXP 32
15950: PPUSH
15951: LD_EXP 3
15955: PUSH
15956: LD_STRING Gary
15958: STR
15959: PPUSH
15960: CALL_OW 38
// if Frank then
15964: LD_EXP 33
15968: IFFALSE 15988
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
15970: LD_EXP 33
15974: PPUSH
15975: LD_EXP 3
15979: PUSH
15980: LD_STRING Frank
15982: STR
15983: PPUSH
15984: CALL_OW 38
// if Kikuchi then
15988: LD_EXP 34
15992: IFFALSE 16012
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
15994: LD_EXP 34
15998: PPUSH
15999: LD_EXP 3
16003: PUSH
16004: LD_STRING Kikuchi
16006: STR
16007: PPUSH
16008: CALL_OW 38
// YouWin ;
16012: CALL_OW 103
// end ;
16016: PPOPN 4
16018: END
// export function CanSayRand ( side ) ; begin
16019: LD_INT 0
16021: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16022: LD_ADDR_VAR 0 2
16026: PUSH
16027: LD_INT 52
16029: PUSH
16030: EMPTY
16031: LIST
16032: PUSH
16033: LD_INT 22
16035: PUSH
16036: LD_VAR 0 1
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 2
16047: PUSH
16048: LD_INT 25
16050: PUSH
16051: LD_INT 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: LIST
16057: PUSH
16058: LD_INT 25
16060: PUSH
16061: LD_INT 2
16063: PUSH
16064: EMPTY
16065: LIST
16066: LIST
16067: PUSH
16068: LD_INT 25
16070: PUSH
16071: LD_INT 3
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PUSH
16078: LD_INT 25
16080: PUSH
16081: LD_INT 4
16083: PUSH
16084: EMPTY
16085: LIST
16086: LIST
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: PUSH
16095: EMPTY
16096: LIST
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: PUSH
16105: LD_EXP 21
16109: PUSH
16110: LD_EXP 33
16114: PUSH
16115: LD_EXP 22
16119: PUSH
16120: LD_EXP 23
16124: PUSH
16125: LD_EXP 24
16129: PUSH
16130: LD_EXP 25
16134: PUSH
16135: LD_EXP 26
16139: PUSH
16140: LD_EXP 27
16144: PUSH
16145: LD_EXP 28
16149: PUSH
16150: LD_EXP 29
16154: PUSH
16155: LD_EXP 30
16159: PUSH
16160: LD_EXP 31
16164: PUSH
16165: LD_EXP 32
16169: PUSH
16170: LD_EXP 34
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: DIFF
16191: ST_TO_ADDR
// end ;
16192: LD_VAR 0 2
16196: RET
// export function SayRand ( sex , dial ) ; begin
16197: LD_INT 0
16199: PPUSH
// result := FilterAllUnits ( [ [ f_placed ] , [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ;
16200: LD_ADDR_VAR 0 3
16204: PUSH
16205: LD_INT 52
16207: PUSH
16208: EMPTY
16209: LIST
16210: PUSH
16211: LD_INT 22
16213: PUSH
16214: LD_INT 1
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 26
16223: PUSH
16224: LD_VAR 0 1
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 2
16235: PUSH
16236: LD_INT 25
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 25
16248: PUSH
16249: LD_INT 2
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: LD_INT 25
16258: PUSH
16259: LD_INT 3
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: PUSH
16266: LD_INT 25
16268: PUSH
16269: LD_INT 4
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: PPUSH
16289: CALL_OW 69
16293: PUSH
16294: LD_EXP 21
16298: PUSH
16299: LD_EXP 33
16303: PUSH
16304: LD_EXP 22
16308: PUSH
16309: LD_EXP 23
16313: PUSH
16314: LD_EXP 24
16318: PUSH
16319: LD_EXP 25
16323: PUSH
16324: LD_EXP 26
16328: PUSH
16329: LD_EXP 27
16333: PUSH
16334: LD_EXP 28
16338: PUSH
16339: LD_EXP 29
16343: PUSH
16344: LD_EXP 30
16348: PUSH
16349: LD_EXP 31
16353: PUSH
16354: LD_EXP 32
16358: PUSH
16359: LD_EXP 34
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: DIFF
16380: ST_TO_ADDR
// if not result then
16381: LD_VAR 0 3
16385: NOT
16386: IFFALSE 16390
// exit ;
16388: GO 16418
// result := result [ 1 ] ;
16390: LD_ADDR_VAR 0 3
16394: PUSH
16395: LD_VAR 0 3
16399: PUSH
16400: LD_INT 1
16402: ARRAY
16403: ST_TO_ADDR
// Say ( result , dial ) ;
16404: LD_VAR 0 3
16408: PPUSH
16409: LD_VAR 0 2
16413: PPUSH
16414: CALL_OW 88
// end ;
16418: LD_VAR 0 3
16422: RET
// export function SayRand2 ( sex , dial , filter ) ; begin
16423: LD_INT 0
16425: PPUSH
// result := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Frank , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Powell , Cornel , Gary , Kikuchi ] ^ filter ;
16426: LD_ADDR_VAR 0 4
16430: PUSH
16431: LD_INT 22
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 26
16443: PUSH
16444: LD_VAR 0 1
16448: PUSH
16449: EMPTY
16450: LIST
16451: LIST
16452: PUSH
16453: LD_INT 2
16455: PUSH
16456: LD_INT 25
16458: PUSH
16459: LD_INT 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 25
16478: PUSH
16479: LD_INT 3
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 4
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: PUSH
16503: EMPTY
16504: LIST
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 69
16512: PUSH
16513: LD_EXP 21
16517: PUSH
16518: LD_EXP 33
16522: PUSH
16523: LD_EXP 22
16527: PUSH
16528: LD_EXP 23
16532: PUSH
16533: LD_EXP 24
16537: PUSH
16538: LD_EXP 25
16542: PUSH
16543: LD_EXP 26
16547: PUSH
16548: LD_EXP 27
16552: PUSH
16553: LD_EXP 28
16557: PUSH
16558: LD_EXP 29
16562: PUSH
16563: LD_EXP 30
16567: PUSH
16568: LD_EXP 31
16572: PUSH
16573: LD_EXP 32
16577: PUSH
16578: LD_EXP 34
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: LIST
16598: PUSH
16599: LD_VAR 0 3
16603: ADD
16604: DIFF
16605: ST_TO_ADDR
// if not result then
16606: LD_VAR 0 4
16610: NOT
16611: IFFALSE 16615
// exit ;
16613: GO 16643
// result := result [ 1 ] ;
16615: LD_ADDR_VAR 0 4
16619: PUSH
16620: LD_VAR 0 4
16624: PUSH
16625: LD_INT 1
16627: ARRAY
16628: ST_TO_ADDR
// Say ( result , dial ) ;
16629: LD_VAR 0 4
16633: PPUSH
16634: LD_VAR 0 2
16638: PPUSH
16639: CALL_OW 88
// end ; end_of_file
16643: LD_VAR 0 4
16647: RET
// export function CustomEvent ( event ) ; begin
16648: LD_INT 0
16650: PPUSH
// end ;
16651: LD_VAR 0 2
16655: RET
// on ArtifactLoaded ( cargo , artifact ) do begin if GetSide ( cargo ) = 1 then
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 255
16665: PUSH
16666: LD_INT 1
16668: EQUAL
16669: IFFALSE 16679
// artifact_get := true ;
16671: LD_ADDR_EXP 13
16675: PUSH
16676: LD_INT 1
16678: ST_TO_ADDR
// if GetSide ( cargo ) = 2 then
16679: LD_VAR 0 1
16683: PPUSH
16684: CALL_OW 255
16688: PUSH
16689: LD_INT 2
16691: EQUAL
16692: IFFALSE 16710
// begin artifact_get := false ;
16694: LD_ADDR_EXP 13
16698: PUSH
16699: LD_INT 0
16701: ST_TO_ADDR
// artifact_stolen := true ;
16702: LD_ADDR_EXP 12
16706: PUSH
16707: LD_INT 1
16709: ST_TO_ADDR
// end ; artifact_oncargo := true ;
16710: LD_ADDR_EXP 14
16714: PUSH
16715: LD_INT 1
16717: ST_TO_ADDR
// end ;
16718: PPOPN 2
16720: END
// on ArtifactUnloaded ( cargo , artifact ) do begin artifact_oncargo := false ;
16721: LD_ADDR_EXP 14
16725: PUSH
16726: LD_INT 0
16728: ST_TO_ADDR
// end ;
16729: PPOPN 2
16731: END
// on UnitDestroyed ( un ) do begin if un = JMM then
16732: LD_VAR 0 1
16736: PUSH
16737: LD_EXP 21
16741: EQUAL
16742: IFFALSE 16753
// begin YouLost ( JMM ) ;
16744: LD_STRING JMM
16746: PPUSH
16747: CALL_OW 104
// exit ;
16751: GO 16885
// end ; if un in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) then
16753: LD_VAR 0 1
16757: PUSH
16758: LD_INT 22
16760: PUSH
16761: LD_INT 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PUSH
16768: LD_INT 21
16770: PUSH
16771: LD_INT 1
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: PUSH
16778: LD_INT 2
16780: PUSH
16781: LD_INT 25
16783: PUSH
16784: LD_INT 1
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 25
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: PUSH
16801: LD_INT 25
16803: PUSH
16804: LD_INT 3
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 25
16813: PUSH
16814: LD_INT 4
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: PUSH
16821: LD_INT 25
16823: PUSH
16824: LD_INT 5
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 25
16833: PUSH
16834: LD_INT 8
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: PUSH
16841: EMPTY
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: IN
16860: IFFALSE 16876
// loses_counter := loses_counter + 1 ;
16862: LD_ADDR_EXP 17
16866: PUSH
16867: LD_EXP 17
16871: PUSH
16872: LD_INT 1
16874: PLUS
16875: ST_TO_ADDR
// MCE_UnitDestroyed ( un ) ;
16876: LD_VAR 0 1
16880: PPUSH
16881: CALL 44469 0 1
// end ;
16885: PPOPN 1
16887: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
16888: LD_VAR 0 1
16892: PPUSH
16893: LD_VAR 0 2
16897: PPUSH
16898: CALL 46803 0 2
// end ;
16902: PPOPN 2
16904: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL 46112 0 1
// end ;
16914: PPOPN 1
16916: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_VAR 0 2
16926: PPUSH
16927: LD_VAR 0 3
16931: PPUSH
16932: LD_VAR 0 4
16936: PPUSH
16937: LD_VAR 0 5
16941: PPUSH
16942: CALL 43785 0 5
// end ;
16946: PPOPN 5
16948: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetNation ( vehicle ) = nation_american then
16949: LD_VAR 0 1
16953: PPUSH
16954: CALL_OW 248
16958: PUSH
16959: LD_INT 1
16961: EQUAL
16962: IFFALSE 16972
// am_veh_consturcted := true ;
16964: LD_ADDR_EXP 20
16968: PUSH
16969: LD_INT 1
16971: ST_TO_ADDR
// MCE_VehicleConstructed ( vehicle , factory ) ;
16972: LD_VAR 0 1
16976: PPUSH
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL 43381 0 2
// end ;
16986: PPOPN 2
16988: END
// on UnitKamikazed ( unit ) do begin if GetType ( unit ) = unit_vehicle then
16989: LD_VAR 0 1
16993: PPUSH
16994: CALL_OW 247
16998: PUSH
16999: LD_INT 2
17001: EQUAL
17002: IFFALSE 17006
// exit ;
17004: GO 17023
// if not kamikazed then
17006: LD_EXP 11
17010: NOT
17011: IFFALSE 17023
// kamikazed := unit ;
17013: LD_ADDR_EXP 11
17017: PUSH
17018: LD_VAR 0 1
17022: ST_TO_ADDR
// end ;
17023: PPOPN 1
17025: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do var i , tmp ;
17026: LD_INT 0
17028: PPUSH
17029: PPUSH
// begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_VAR 0 2
17039: PPUSH
17040: LD_VAR 0 3
17044: PPUSH
17045: LD_VAR 0 4
17049: PPUSH
17050: CALL 43219 0 4
// end ;
17054: PPOPN 6
17056: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
17057: LD_VAR 0 1
17061: PPUSH
17062: LD_VAR 0 2
17066: PPUSH
17067: LD_VAR 0 3
17071: PPUSH
17072: CALL 42994 0 3
// end ;
17076: PPOPN 3
17078: END
// on ResearchComplete ( tech , lab ) do begin MCE_ResearchComplete ( tech , lab ) ;
17079: LD_VAR 0 1
17083: PPUSH
17084: LD_VAR 0 2
17088: PPUSH
17089: CALL 44165 0 2
// end ;
17093: PPOPN 2
17095: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
17096: LD_VAR 0 1
17100: PPUSH
17101: LD_VAR 0 2
17105: PPUSH
17106: CALL 42688 0 2
// end ;
17110: PPOPN 2
17112: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 2
17122: PPUSH
17123: CALL 42879 0 2
// end ;
17127: PPOPN 2
17129: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
17130: LD_VAR 0 1
17134: PPUSH
17135: CALL 45871 0 1
// end ;
17139: PPOPN 1
17141: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
17142: LD_VAR 0 1
17146: PPUSH
17147: LD_VAR 0 2
17151: PPUSH
17152: CALL 47064 0 2
// end ;
17156: PPOPN 2
17158: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
17159: LD_VAR 0 1
17163: PPUSH
17164: LD_VAR 0 2
17168: PPUSH
17169: LD_VAR 0 3
17173: PPUSH
17174: LD_VAR 0 4
17178: PPUSH
17179: CALL 47280 0 4
// end ;
17183: PPOPN 4
17185: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17186: LD_VAR 0 1
17190: PPUSH
17191: CALL 101642 0 1
// end ; end_of_file
17195: PPOPN 1
17197: END
// every 0 0$1 trigger game do
17198: LD_EXP 2
17202: IFFALSE 17232
17204: GO 17206
17206: DISABLE
// SpawnCrates ( [ crates_west , crates_east , crates_north_west , crates_east ] , 0 0$50 ) ;
17207: LD_INT 7
17209: PUSH
17210: LD_INT 6
17212: PUSH
17213: LD_INT 4
17215: PUSH
17216: LD_INT 6
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PPUSH
17225: LD_INT 1750
17227: PPUSH
17228: CALL 17233 0 2
17232: END
// export function SpawnCrates ( areas , time ) ; var i , p ; begin
17233: LD_INT 0
17235: PPUSH
17236: PPUSH
17237: PPUSH
// if not areas then
17238: LD_VAR 0 1
17242: NOT
17243: IFFALSE 17247
// exit ;
17245: GO 17377
// repeat wait ( time ) ;
17247: LD_VAR 0 2
17251: PPUSH
17252: CALL_OW 67
// p := rand ( 1 , 90 ) ;
17256: LD_ADDR_VAR 0 5
17260: PUSH
17261: LD_INT 1
17263: PPUSH
17264: LD_INT 90
17266: PPUSH
17267: CALL_OW 12
17271: ST_TO_ADDR
// for i in areas do
17272: LD_ADDR_VAR 0 4
17276: PUSH
17277: LD_VAR 0 1
17281: PUSH
17282: FOR_IN
17283: IFFALSE 17336
// begin if Prob ( p ) then
17285: LD_VAR 0 5
17289: PPUSH
17290: CALL_OW 13
17294: IFFALSE 17334
// begin CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
17296: LD_INT 1
17298: PPUSH
17299: LD_INT 5
17301: PPUSH
17302: CALL_OW 12
17306: PPUSH
17307: LD_VAR 0 4
17311: PPUSH
17312: LD_INT 1
17314: PPUSH
17315: CALL_OW 55
// wait ( rand ( 0 0$11 , 0 0$17 ) ) ;
17319: LD_INT 385
17321: PPUSH
17322: LD_INT 595
17324: PPUSH
17325: CALL_OW 12
17329: PPUSH
17330: CALL_OW 67
// end ; end ;
17334: GO 17282
17336: POP
17337: POP
// time := time + 0 0$3 ;
17338: LD_ADDR_VAR 0 2
17342: PUSH
17343: LD_VAR 0 2
17347: PUSH
17348: LD_INT 105
17350: PLUS
17351: ST_TO_ADDR
// if time > 7 7$00 then
17352: LD_VAR 0 2
17356: PUSH
17357: LD_INT 14700
17359: GREATER
17360: IFFALSE 17370
// time := 0 0$40 ;
17362: LD_ADDR_VAR 0 2
17366: PUSH
17367: LD_INT 1400
17369: ST_TO_ADDR
// until not game ;
17370: LD_EXP 2
17374: NOT
17375: IFFALSE 17247
// end ; end_of_file
17377: LD_VAR 0 3
17381: RET
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
17382: LD_INT 0
17384: PPUSH
17385: PPUSH
// skirmish := false ;
17386: LD_ADDR_EXP 48
17390: PUSH
17391: LD_INT 0
17393: ST_TO_ADDR
// debug_mc := false ;
17394: LD_ADDR_EXP 49
17398: PUSH
17399: LD_INT 0
17401: ST_TO_ADDR
// mc_bases := [ ] ;
17402: LD_ADDR_EXP 50
17406: PUSH
17407: EMPTY
17408: ST_TO_ADDR
// mc_sides := [ ] ;
17409: LD_ADDR_EXP 76
17413: PUSH
17414: EMPTY
17415: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
17416: LD_ADDR_EXP 51
17420: PUSH
17421: EMPTY
17422: ST_TO_ADDR
// mc_building_repairs := [ ] ;
17423: LD_ADDR_EXP 52
17427: PUSH
17428: EMPTY
17429: ST_TO_ADDR
// mc_need_heal := [ ] ;
17430: LD_ADDR_EXP 53
17434: PUSH
17435: EMPTY
17436: ST_TO_ADDR
// mc_healers := [ ] ;
17437: LD_ADDR_EXP 54
17441: PUSH
17442: EMPTY
17443: ST_TO_ADDR
// mc_build_list := [ ] ;
17444: LD_ADDR_EXP 55
17448: PUSH
17449: EMPTY
17450: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
17451: LD_ADDR_EXP 82
17455: PUSH
17456: EMPTY
17457: ST_TO_ADDR
// mc_builders := [ ] ;
17458: LD_ADDR_EXP 56
17462: PUSH
17463: EMPTY
17464: ST_TO_ADDR
// mc_construct_list := [ ] ;
17465: LD_ADDR_EXP 57
17469: PUSH
17470: EMPTY
17471: ST_TO_ADDR
// mc_turret_list := [ ] ;
17472: LD_ADDR_EXP 58
17476: PUSH
17477: EMPTY
17478: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
17479: LD_ADDR_EXP 59
17483: PUSH
17484: EMPTY
17485: ST_TO_ADDR
// mc_miners := [ ] ;
17486: LD_ADDR_EXP 64
17490: PUSH
17491: EMPTY
17492: ST_TO_ADDR
// mc_mines := [ ] ;
17493: LD_ADDR_EXP 63
17497: PUSH
17498: EMPTY
17499: ST_TO_ADDR
// mc_minefields := [ ] ;
17500: LD_ADDR_EXP 65
17504: PUSH
17505: EMPTY
17506: ST_TO_ADDR
// mc_crates := [ ] ;
17507: LD_ADDR_EXP 66
17511: PUSH
17512: EMPTY
17513: ST_TO_ADDR
// mc_crates_collector := [ ] ;
17514: LD_ADDR_EXP 67
17518: PUSH
17519: EMPTY
17520: ST_TO_ADDR
// mc_crates_area := [ ] ;
17521: LD_ADDR_EXP 68
17525: PUSH
17526: EMPTY
17527: ST_TO_ADDR
// mc_vehicles := [ ] ;
17528: LD_ADDR_EXP 69
17532: PUSH
17533: EMPTY
17534: ST_TO_ADDR
// mc_attack := [ ] ;
17535: LD_ADDR_EXP 70
17539: PUSH
17540: EMPTY
17541: ST_TO_ADDR
// mc_produce := [ ] ;
17542: LD_ADDR_EXP 71
17546: PUSH
17547: EMPTY
17548: ST_TO_ADDR
// mc_defender := [ ] ;
17549: LD_ADDR_EXP 72
17553: PUSH
17554: EMPTY
17555: ST_TO_ADDR
// mc_parking := [ ] ;
17556: LD_ADDR_EXP 74
17560: PUSH
17561: EMPTY
17562: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
17563: LD_ADDR_EXP 60
17567: PUSH
17568: EMPTY
17569: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
17570: LD_ADDR_EXP 62
17574: PUSH
17575: EMPTY
17576: ST_TO_ADDR
// mc_scan := [ ] ;
17577: LD_ADDR_EXP 73
17581: PUSH
17582: EMPTY
17583: ST_TO_ADDR
// mc_scan_area := [ ] ;
17584: LD_ADDR_EXP 75
17588: PUSH
17589: EMPTY
17590: ST_TO_ADDR
// mc_tech := [ ] ;
17591: LD_ADDR_EXP 77
17595: PUSH
17596: EMPTY
17597: ST_TO_ADDR
// mc_class := [ ] ;
17598: LD_ADDR_EXP 91
17602: PUSH
17603: EMPTY
17604: ST_TO_ADDR
// mc_class_case_use := [ ] ;
17605: LD_ADDR_EXP 92
17609: PUSH
17610: EMPTY
17611: ST_TO_ADDR
// end ;
17612: LD_VAR 0 1
17616: RET
// export function MC_Kill ( base ) ; begin
17617: LD_INT 0
17619: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
17620: LD_ADDR_EXP 50
17624: PUSH
17625: LD_EXP 50
17629: PPUSH
17630: LD_VAR 0 1
17634: PPUSH
17635: EMPTY
17636: PPUSH
17637: CALL_OW 1
17641: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
17642: LD_ADDR_EXP 51
17646: PUSH
17647: LD_EXP 51
17651: PPUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: EMPTY
17658: PPUSH
17659: CALL_OW 1
17663: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
17664: LD_ADDR_EXP 52
17668: PUSH
17669: LD_EXP 52
17673: PPUSH
17674: LD_VAR 0 1
17678: PPUSH
17679: EMPTY
17680: PPUSH
17681: CALL_OW 1
17685: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
17686: LD_ADDR_EXP 53
17690: PUSH
17691: LD_EXP 53
17695: PPUSH
17696: LD_VAR 0 1
17700: PPUSH
17701: EMPTY
17702: PPUSH
17703: CALL_OW 1
17707: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
17708: LD_ADDR_EXP 54
17712: PUSH
17713: LD_EXP 54
17717: PPUSH
17718: LD_VAR 0 1
17722: PPUSH
17723: EMPTY
17724: PPUSH
17725: CALL_OW 1
17729: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
17730: LD_ADDR_EXP 55
17734: PUSH
17735: LD_EXP 55
17739: PPUSH
17740: LD_VAR 0 1
17744: PPUSH
17745: EMPTY
17746: PPUSH
17747: CALL_OW 1
17751: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
17752: LD_ADDR_EXP 56
17756: PUSH
17757: LD_EXP 56
17761: PPUSH
17762: LD_VAR 0 1
17766: PPUSH
17767: EMPTY
17768: PPUSH
17769: CALL_OW 1
17773: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
17774: LD_ADDR_EXP 57
17778: PUSH
17779: LD_EXP 57
17783: PPUSH
17784: LD_VAR 0 1
17788: PPUSH
17789: EMPTY
17790: PPUSH
17791: CALL_OW 1
17795: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
17796: LD_ADDR_EXP 58
17800: PUSH
17801: LD_EXP 58
17805: PPUSH
17806: LD_VAR 0 1
17810: PPUSH
17811: EMPTY
17812: PPUSH
17813: CALL_OW 1
17817: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
17818: LD_ADDR_EXP 59
17822: PUSH
17823: LD_EXP 59
17827: PPUSH
17828: LD_VAR 0 1
17832: PPUSH
17833: EMPTY
17834: PPUSH
17835: CALL_OW 1
17839: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
17840: LD_ADDR_EXP 60
17844: PUSH
17845: LD_EXP 60
17849: PPUSH
17850: LD_VAR 0 1
17854: PPUSH
17855: EMPTY
17856: PPUSH
17857: CALL_OW 1
17861: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
17862: LD_ADDR_EXP 61
17866: PUSH
17867: LD_EXP 61
17871: PPUSH
17872: LD_VAR 0 1
17876: PPUSH
17877: LD_INT 0
17879: PPUSH
17880: CALL_OW 1
17884: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
17885: LD_ADDR_EXP 62
17889: PUSH
17890: LD_EXP 62
17894: PPUSH
17895: LD_VAR 0 1
17899: PPUSH
17900: EMPTY
17901: PPUSH
17902: CALL_OW 1
17906: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
17907: LD_ADDR_EXP 63
17911: PUSH
17912: LD_EXP 63
17916: PPUSH
17917: LD_VAR 0 1
17921: PPUSH
17922: EMPTY
17923: PPUSH
17924: CALL_OW 1
17928: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
17929: LD_ADDR_EXP 64
17933: PUSH
17934: LD_EXP 64
17938: PPUSH
17939: LD_VAR 0 1
17943: PPUSH
17944: EMPTY
17945: PPUSH
17946: CALL_OW 1
17950: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
17951: LD_ADDR_EXP 65
17955: PUSH
17956: LD_EXP 65
17960: PPUSH
17961: LD_VAR 0 1
17965: PPUSH
17966: EMPTY
17967: PPUSH
17968: CALL_OW 1
17972: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
17973: LD_ADDR_EXP 66
17977: PUSH
17978: LD_EXP 66
17982: PPUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: EMPTY
17989: PPUSH
17990: CALL_OW 1
17994: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
17995: LD_ADDR_EXP 67
17999: PUSH
18000: LD_EXP 67
18004: PPUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: EMPTY
18011: PPUSH
18012: CALL_OW 1
18016: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18017: LD_ADDR_EXP 68
18021: PUSH
18022: LD_EXP 68
18026: PPUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: EMPTY
18033: PPUSH
18034: CALL_OW 1
18038: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18039: LD_ADDR_EXP 69
18043: PUSH
18044: LD_EXP 69
18048: PPUSH
18049: LD_VAR 0 1
18053: PPUSH
18054: EMPTY
18055: PPUSH
18056: CALL_OW 1
18060: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
18061: LD_ADDR_EXP 70
18065: PUSH
18066: LD_EXP 70
18070: PPUSH
18071: LD_VAR 0 1
18075: PPUSH
18076: EMPTY
18077: PPUSH
18078: CALL_OW 1
18082: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
18083: LD_ADDR_EXP 71
18087: PUSH
18088: LD_EXP 71
18092: PPUSH
18093: LD_VAR 0 1
18097: PPUSH
18098: EMPTY
18099: PPUSH
18100: CALL_OW 1
18104: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
18105: LD_ADDR_EXP 72
18109: PUSH
18110: LD_EXP 72
18114: PPUSH
18115: LD_VAR 0 1
18119: PPUSH
18120: EMPTY
18121: PPUSH
18122: CALL_OW 1
18126: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
18127: LD_ADDR_EXP 73
18131: PUSH
18132: LD_EXP 73
18136: PPUSH
18137: LD_VAR 0 1
18141: PPUSH
18142: EMPTY
18143: PPUSH
18144: CALL_OW 1
18148: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
18149: LD_ADDR_EXP 74
18153: PUSH
18154: LD_EXP 74
18158: PPUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: EMPTY
18165: PPUSH
18166: CALL_OW 1
18170: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
18171: LD_ADDR_EXP 75
18175: PUSH
18176: LD_EXP 75
18180: PPUSH
18181: LD_VAR 0 1
18185: PPUSH
18186: EMPTY
18187: PPUSH
18188: CALL_OW 1
18192: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
18193: LD_ADDR_EXP 77
18197: PUSH
18198: LD_EXP 77
18202: PPUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: EMPTY
18209: PPUSH
18210: CALL_OW 1
18214: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
18215: LD_ADDR_EXP 79
18219: PUSH
18220: LD_EXP 79
18224: PPUSH
18225: LD_VAR 0 1
18229: PPUSH
18230: EMPTY
18231: PPUSH
18232: CALL_OW 1
18236: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
18237: LD_ADDR_EXP 80
18241: PUSH
18242: LD_EXP 80
18246: PPUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: EMPTY
18253: PPUSH
18254: CALL_OW 1
18258: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
18259: LD_ADDR_EXP 81
18263: PUSH
18264: LD_EXP 81
18268: PPUSH
18269: LD_VAR 0 1
18273: PPUSH
18274: EMPTY
18275: PPUSH
18276: CALL_OW 1
18280: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
18281: LD_ADDR_EXP 82
18285: PUSH
18286: LD_EXP 82
18290: PPUSH
18291: LD_VAR 0 1
18295: PPUSH
18296: EMPTY
18297: PPUSH
18298: CALL_OW 1
18302: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
18303: LD_ADDR_EXP 83
18307: PUSH
18308: LD_EXP 83
18312: PPUSH
18313: LD_VAR 0 1
18317: PPUSH
18318: EMPTY
18319: PPUSH
18320: CALL_OW 1
18324: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
18325: LD_ADDR_EXP 84
18329: PUSH
18330: LD_EXP 84
18334: PPUSH
18335: LD_VAR 0 1
18339: PPUSH
18340: EMPTY
18341: PPUSH
18342: CALL_OW 1
18346: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
18347: LD_ADDR_EXP 85
18351: PUSH
18352: LD_EXP 85
18356: PPUSH
18357: LD_VAR 0 1
18361: PPUSH
18362: EMPTY
18363: PPUSH
18364: CALL_OW 1
18368: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
18369: LD_ADDR_EXP 86
18373: PUSH
18374: LD_EXP 86
18378: PPUSH
18379: LD_VAR 0 1
18383: PPUSH
18384: EMPTY
18385: PPUSH
18386: CALL_OW 1
18390: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
18391: LD_ADDR_EXP 87
18395: PUSH
18396: LD_EXP 87
18400: PPUSH
18401: LD_VAR 0 1
18405: PPUSH
18406: EMPTY
18407: PPUSH
18408: CALL_OW 1
18412: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
18413: LD_ADDR_EXP 88
18417: PUSH
18418: LD_EXP 88
18422: PPUSH
18423: LD_VAR 0 1
18427: PPUSH
18428: EMPTY
18429: PPUSH
18430: CALL_OW 1
18434: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
18435: LD_ADDR_EXP 89
18439: PUSH
18440: LD_EXP 89
18444: PPUSH
18445: LD_VAR 0 1
18449: PPUSH
18450: EMPTY
18451: PPUSH
18452: CALL_OW 1
18456: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
18457: LD_ADDR_EXP 90
18461: PUSH
18462: LD_EXP 90
18466: PPUSH
18467: LD_VAR 0 1
18471: PPUSH
18472: EMPTY
18473: PPUSH
18474: CALL_OW 1
18478: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
18479: LD_ADDR_EXP 91
18483: PUSH
18484: LD_EXP 91
18488: PPUSH
18489: LD_VAR 0 1
18493: PPUSH
18494: EMPTY
18495: PPUSH
18496: CALL_OW 1
18500: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
18501: LD_ADDR_EXP 92
18505: PUSH
18506: LD_EXP 92
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 1
18523: ST_TO_ADDR
// end ;
18524: LD_VAR 0 2
18528: RET
// export function MC_Add ( side , units ) ; var base ; begin
18529: LD_INT 0
18531: PPUSH
18532: PPUSH
// base := mc_bases + 1 ;
18533: LD_ADDR_VAR 0 4
18537: PUSH
18538: LD_EXP 50
18542: PUSH
18543: LD_INT 1
18545: PLUS
18546: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
18547: LD_ADDR_EXP 76
18551: PUSH
18552: LD_EXP 76
18556: PPUSH
18557: LD_VAR 0 4
18561: PPUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 1
18571: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
18572: LD_ADDR_EXP 50
18576: PUSH
18577: LD_EXP 50
18581: PPUSH
18582: LD_VAR 0 4
18586: PPUSH
18587: LD_VAR 0 2
18591: PPUSH
18592: CALL_OW 1
18596: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
18597: LD_ADDR_EXP 51
18601: PUSH
18602: LD_EXP 51
18606: PPUSH
18607: LD_VAR 0 4
18611: PPUSH
18612: EMPTY
18613: PPUSH
18614: CALL_OW 1
18618: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
18619: LD_ADDR_EXP 52
18623: PUSH
18624: LD_EXP 52
18628: PPUSH
18629: LD_VAR 0 4
18633: PPUSH
18634: EMPTY
18635: PPUSH
18636: CALL_OW 1
18640: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
18641: LD_ADDR_EXP 53
18645: PUSH
18646: LD_EXP 53
18650: PPUSH
18651: LD_VAR 0 4
18655: PPUSH
18656: EMPTY
18657: PPUSH
18658: CALL_OW 1
18662: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
18663: LD_ADDR_EXP 54
18667: PUSH
18668: LD_EXP 54
18672: PPUSH
18673: LD_VAR 0 4
18677: PPUSH
18678: EMPTY
18679: PPUSH
18680: CALL_OW 1
18684: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
18685: LD_ADDR_EXP 55
18689: PUSH
18690: LD_EXP 55
18694: PPUSH
18695: LD_VAR 0 4
18699: PPUSH
18700: EMPTY
18701: PPUSH
18702: CALL_OW 1
18706: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
18707: LD_ADDR_EXP 56
18711: PUSH
18712: LD_EXP 56
18716: PPUSH
18717: LD_VAR 0 4
18721: PPUSH
18722: EMPTY
18723: PPUSH
18724: CALL_OW 1
18728: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
18729: LD_ADDR_EXP 57
18733: PUSH
18734: LD_EXP 57
18738: PPUSH
18739: LD_VAR 0 4
18743: PPUSH
18744: EMPTY
18745: PPUSH
18746: CALL_OW 1
18750: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
18751: LD_ADDR_EXP 58
18755: PUSH
18756: LD_EXP 58
18760: PPUSH
18761: LD_VAR 0 4
18765: PPUSH
18766: EMPTY
18767: PPUSH
18768: CALL_OW 1
18772: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
18773: LD_ADDR_EXP 59
18777: PUSH
18778: LD_EXP 59
18782: PPUSH
18783: LD_VAR 0 4
18787: PPUSH
18788: EMPTY
18789: PPUSH
18790: CALL_OW 1
18794: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
18795: LD_ADDR_EXP 60
18799: PUSH
18800: LD_EXP 60
18804: PPUSH
18805: LD_VAR 0 4
18809: PPUSH
18810: EMPTY
18811: PPUSH
18812: CALL_OW 1
18816: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
18817: LD_ADDR_EXP 61
18821: PUSH
18822: LD_EXP 61
18826: PPUSH
18827: LD_VAR 0 4
18831: PPUSH
18832: LD_INT 0
18834: PPUSH
18835: CALL_OW 1
18839: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
18840: LD_ADDR_EXP 62
18844: PUSH
18845: LD_EXP 62
18849: PPUSH
18850: LD_VAR 0 4
18854: PPUSH
18855: EMPTY
18856: PPUSH
18857: CALL_OW 1
18861: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
18862: LD_ADDR_EXP 63
18866: PUSH
18867: LD_EXP 63
18871: PPUSH
18872: LD_VAR 0 4
18876: PPUSH
18877: EMPTY
18878: PPUSH
18879: CALL_OW 1
18883: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
18884: LD_ADDR_EXP 64
18888: PUSH
18889: LD_EXP 64
18893: PPUSH
18894: LD_VAR 0 4
18898: PPUSH
18899: EMPTY
18900: PPUSH
18901: CALL_OW 1
18905: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
18906: LD_ADDR_EXP 65
18910: PUSH
18911: LD_EXP 65
18915: PPUSH
18916: LD_VAR 0 4
18920: PPUSH
18921: EMPTY
18922: PPUSH
18923: CALL_OW 1
18927: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
18928: LD_ADDR_EXP 66
18932: PUSH
18933: LD_EXP 66
18937: PPUSH
18938: LD_VAR 0 4
18942: PPUSH
18943: EMPTY
18944: PPUSH
18945: CALL_OW 1
18949: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
18950: LD_ADDR_EXP 67
18954: PUSH
18955: LD_EXP 67
18959: PPUSH
18960: LD_VAR 0 4
18964: PPUSH
18965: EMPTY
18966: PPUSH
18967: CALL_OW 1
18971: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
18972: LD_ADDR_EXP 68
18976: PUSH
18977: LD_EXP 68
18981: PPUSH
18982: LD_VAR 0 4
18986: PPUSH
18987: EMPTY
18988: PPUSH
18989: CALL_OW 1
18993: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
18994: LD_ADDR_EXP 69
18998: PUSH
18999: LD_EXP 69
19003: PPUSH
19004: LD_VAR 0 4
19008: PPUSH
19009: EMPTY
19010: PPUSH
19011: CALL_OW 1
19015: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
19016: LD_ADDR_EXP 70
19020: PUSH
19021: LD_EXP 70
19025: PPUSH
19026: LD_VAR 0 4
19030: PPUSH
19031: EMPTY
19032: PPUSH
19033: CALL_OW 1
19037: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
19038: LD_ADDR_EXP 71
19042: PUSH
19043: LD_EXP 71
19047: PPUSH
19048: LD_VAR 0 4
19052: PPUSH
19053: EMPTY
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
19060: LD_ADDR_EXP 72
19064: PUSH
19065: LD_EXP 72
19069: PPUSH
19070: LD_VAR 0 4
19074: PPUSH
19075: EMPTY
19076: PPUSH
19077: CALL_OW 1
19081: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
19082: LD_ADDR_EXP 73
19086: PUSH
19087: LD_EXP 73
19091: PPUSH
19092: LD_VAR 0 4
19096: PPUSH
19097: EMPTY
19098: PPUSH
19099: CALL_OW 1
19103: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
19104: LD_ADDR_EXP 74
19108: PUSH
19109: LD_EXP 74
19113: PPUSH
19114: LD_VAR 0 4
19118: PPUSH
19119: EMPTY
19120: PPUSH
19121: CALL_OW 1
19125: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
19126: LD_ADDR_EXP 75
19130: PUSH
19131: LD_EXP 75
19135: PPUSH
19136: LD_VAR 0 4
19140: PPUSH
19141: EMPTY
19142: PPUSH
19143: CALL_OW 1
19147: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
19148: LD_ADDR_EXP 77
19152: PUSH
19153: LD_EXP 77
19157: PPUSH
19158: LD_VAR 0 4
19162: PPUSH
19163: EMPTY
19164: PPUSH
19165: CALL_OW 1
19169: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
19170: LD_ADDR_EXP 79
19174: PUSH
19175: LD_EXP 79
19179: PPUSH
19180: LD_VAR 0 4
19184: PPUSH
19185: EMPTY
19186: PPUSH
19187: CALL_OW 1
19191: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
19192: LD_ADDR_EXP 80
19196: PUSH
19197: LD_EXP 80
19201: PPUSH
19202: LD_VAR 0 4
19206: PPUSH
19207: EMPTY
19208: PPUSH
19209: CALL_OW 1
19213: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
19214: LD_ADDR_EXP 81
19218: PUSH
19219: LD_EXP 81
19223: PPUSH
19224: LD_VAR 0 4
19228: PPUSH
19229: EMPTY
19230: PPUSH
19231: CALL_OW 1
19235: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
19236: LD_ADDR_EXP 82
19240: PUSH
19241: LD_EXP 82
19245: PPUSH
19246: LD_VAR 0 4
19250: PPUSH
19251: EMPTY
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
19258: LD_ADDR_EXP 83
19262: PUSH
19263: LD_EXP 83
19267: PPUSH
19268: LD_VAR 0 4
19272: PPUSH
19273: EMPTY
19274: PPUSH
19275: CALL_OW 1
19279: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
19280: LD_ADDR_EXP 84
19284: PUSH
19285: LD_EXP 84
19289: PPUSH
19290: LD_VAR 0 4
19294: PPUSH
19295: EMPTY
19296: PPUSH
19297: CALL_OW 1
19301: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
19302: LD_ADDR_EXP 85
19306: PUSH
19307: LD_EXP 85
19311: PPUSH
19312: LD_VAR 0 4
19316: PPUSH
19317: EMPTY
19318: PPUSH
19319: CALL_OW 1
19323: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
19324: LD_ADDR_EXP 86
19328: PUSH
19329: LD_EXP 86
19333: PPUSH
19334: LD_VAR 0 4
19338: PPUSH
19339: EMPTY
19340: PPUSH
19341: CALL_OW 1
19345: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
19346: LD_ADDR_EXP 87
19350: PUSH
19351: LD_EXP 87
19355: PPUSH
19356: LD_VAR 0 4
19360: PPUSH
19361: EMPTY
19362: PPUSH
19363: CALL_OW 1
19367: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
19368: LD_ADDR_EXP 88
19372: PUSH
19373: LD_EXP 88
19377: PPUSH
19378: LD_VAR 0 4
19382: PPUSH
19383: EMPTY
19384: PPUSH
19385: CALL_OW 1
19389: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
19390: LD_ADDR_EXP 89
19394: PUSH
19395: LD_EXP 89
19399: PPUSH
19400: LD_VAR 0 4
19404: PPUSH
19405: EMPTY
19406: PPUSH
19407: CALL_OW 1
19411: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
19412: LD_ADDR_EXP 90
19416: PUSH
19417: LD_EXP 90
19421: PPUSH
19422: LD_VAR 0 4
19426: PPUSH
19427: EMPTY
19428: PPUSH
19429: CALL_OW 1
19433: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
19434: LD_ADDR_EXP 91
19438: PUSH
19439: LD_EXP 91
19443: PPUSH
19444: LD_VAR 0 4
19448: PPUSH
19449: EMPTY
19450: PPUSH
19451: CALL_OW 1
19455: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
19456: LD_ADDR_EXP 92
19460: PUSH
19461: LD_EXP 92
19465: PPUSH
19466: LD_VAR 0 4
19470: PPUSH
19471: LD_INT 0
19473: PPUSH
19474: CALL_OW 1
19478: ST_TO_ADDR
// result := base ;
19479: LD_ADDR_VAR 0 3
19483: PUSH
19484: LD_VAR 0 4
19488: ST_TO_ADDR
// end ;
19489: LD_VAR 0 3
19493: RET
// export function MC_Start ( ) ; var i ; begin
19494: LD_INT 0
19496: PPUSH
19497: PPUSH
// for i = 1 to mc_bases do
19498: LD_ADDR_VAR 0 2
19502: PUSH
19503: DOUBLE
19504: LD_INT 1
19506: DEC
19507: ST_TO_ADDR
19508: LD_EXP 50
19512: PUSH
19513: FOR_TO
19514: IFFALSE 20591
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
19516: LD_ADDR_EXP 50
19520: PUSH
19521: LD_EXP 50
19525: PPUSH
19526: LD_VAR 0 2
19530: PPUSH
19531: LD_EXP 50
19535: PUSH
19536: LD_VAR 0 2
19540: ARRAY
19541: PUSH
19542: LD_INT 0
19544: DIFF
19545: PPUSH
19546: CALL_OW 1
19550: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
19551: LD_ADDR_EXP 51
19555: PUSH
19556: LD_EXP 51
19560: PPUSH
19561: LD_VAR 0 2
19565: PPUSH
19566: EMPTY
19567: PPUSH
19568: CALL_OW 1
19572: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
19573: LD_ADDR_EXP 52
19577: PUSH
19578: LD_EXP 52
19582: PPUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: EMPTY
19589: PPUSH
19590: CALL_OW 1
19594: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
19595: LD_ADDR_EXP 53
19599: PUSH
19600: LD_EXP 53
19604: PPUSH
19605: LD_VAR 0 2
19609: PPUSH
19610: EMPTY
19611: PPUSH
19612: CALL_OW 1
19616: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
19617: LD_ADDR_EXP 54
19621: PUSH
19622: LD_EXP 54
19626: PPUSH
19627: LD_VAR 0 2
19631: PPUSH
19632: EMPTY
19633: PUSH
19634: EMPTY
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: PPUSH
19640: CALL_OW 1
19644: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
19645: LD_ADDR_EXP 55
19649: PUSH
19650: LD_EXP 55
19654: PPUSH
19655: LD_VAR 0 2
19659: PPUSH
19660: EMPTY
19661: PPUSH
19662: CALL_OW 1
19666: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
19667: LD_ADDR_EXP 82
19671: PUSH
19672: LD_EXP 82
19676: PPUSH
19677: LD_VAR 0 2
19681: PPUSH
19682: EMPTY
19683: PPUSH
19684: CALL_OW 1
19688: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
19689: LD_ADDR_EXP 56
19693: PUSH
19694: LD_EXP 56
19698: PPUSH
19699: LD_VAR 0 2
19703: PPUSH
19704: EMPTY
19705: PPUSH
19706: CALL_OW 1
19710: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
19711: LD_ADDR_EXP 57
19715: PUSH
19716: LD_EXP 57
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: EMPTY
19727: PPUSH
19728: CALL_OW 1
19732: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
19733: LD_ADDR_EXP 58
19737: PUSH
19738: LD_EXP 58
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: LD_EXP 50
19752: PUSH
19753: LD_VAR 0 2
19757: ARRAY
19758: PPUSH
19759: LD_INT 2
19761: PUSH
19762: LD_INT 30
19764: PUSH
19765: LD_INT 32
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: LD_INT 30
19774: PUSH
19775: LD_INT 33
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: EMPTY
19783: LIST
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 72
19791: PPUSH
19792: CALL_OW 1
19796: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
19797: LD_ADDR_EXP 59
19801: PUSH
19802: LD_EXP 59
19806: PPUSH
19807: LD_VAR 0 2
19811: PPUSH
19812: LD_EXP 50
19816: PUSH
19817: LD_VAR 0 2
19821: ARRAY
19822: PPUSH
19823: LD_INT 2
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: LD_INT 32
19831: PUSH
19832: EMPTY
19833: LIST
19834: LIST
19835: PUSH
19836: LD_INT 30
19838: PUSH
19839: LD_INT 31
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: LIST
19850: PUSH
19851: LD_INT 58
19853: PUSH
19854: EMPTY
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 72
19865: PPUSH
19866: CALL_OW 1
19870: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
19871: LD_ADDR_EXP 60
19875: PUSH
19876: LD_EXP 60
19880: PPUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: EMPTY
19887: PPUSH
19888: CALL_OW 1
19892: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
19893: LD_ADDR_EXP 64
19897: PUSH
19898: LD_EXP 64
19902: PPUSH
19903: LD_VAR 0 2
19907: PPUSH
19908: EMPTY
19909: PPUSH
19910: CALL_OW 1
19914: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
19915: LD_ADDR_EXP 63
19919: PUSH
19920: LD_EXP 63
19924: PPUSH
19925: LD_VAR 0 2
19929: PPUSH
19930: EMPTY
19931: PPUSH
19932: CALL_OW 1
19936: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
19937: LD_ADDR_EXP 65
19941: PUSH
19942: LD_EXP 65
19946: PPUSH
19947: LD_VAR 0 2
19951: PPUSH
19952: EMPTY
19953: PPUSH
19954: CALL_OW 1
19958: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
19959: LD_ADDR_EXP 66
19963: PUSH
19964: LD_EXP 66
19968: PPUSH
19969: LD_VAR 0 2
19973: PPUSH
19974: EMPTY
19975: PPUSH
19976: CALL_OW 1
19980: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
19981: LD_ADDR_EXP 67
19985: PUSH
19986: LD_EXP 67
19990: PPUSH
19991: LD_VAR 0 2
19995: PPUSH
19996: EMPTY
19997: PPUSH
19998: CALL_OW 1
20002: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
20003: LD_ADDR_EXP 68
20007: PUSH
20008: LD_EXP 68
20012: PPUSH
20013: LD_VAR 0 2
20017: PPUSH
20018: EMPTY
20019: PPUSH
20020: CALL_OW 1
20024: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
20025: LD_ADDR_EXP 69
20029: PUSH
20030: LD_EXP 69
20034: PPUSH
20035: LD_VAR 0 2
20039: PPUSH
20040: EMPTY
20041: PPUSH
20042: CALL_OW 1
20046: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
20047: LD_ADDR_EXP 70
20051: PUSH
20052: LD_EXP 70
20056: PPUSH
20057: LD_VAR 0 2
20061: PPUSH
20062: EMPTY
20063: PPUSH
20064: CALL_OW 1
20068: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
20069: LD_ADDR_EXP 71
20073: PUSH
20074: LD_EXP 71
20078: PPUSH
20079: LD_VAR 0 2
20083: PPUSH
20084: EMPTY
20085: PPUSH
20086: CALL_OW 1
20090: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
20091: LD_ADDR_EXP 72
20095: PUSH
20096: LD_EXP 72
20100: PPUSH
20101: LD_VAR 0 2
20105: PPUSH
20106: EMPTY
20107: PPUSH
20108: CALL_OW 1
20112: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
20113: LD_ADDR_EXP 61
20117: PUSH
20118: LD_EXP 61
20122: PPUSH
20123: LD_VAR 0 2
20127: PPUSH
20128: LD_INT 0
20130: PPUSH
20131: CALL_OW 1
20135: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
20136: LD_ADDR_EXP 74
20140: PUSH
20141: LD_EXP 74
20145: PPUSH
20146: LD_VAR 0 2
20150: PPUSH
20151: LD_INT 0
20153: PPUSH
20154: CALL_OW 1
20158: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
20159: LD_ADDR_EXP 62
20163: PUSH
20164: LD_EXP 62
20168: PPUSH
20169: LD_VAR 0 2
20173: PPUSH
20174: EMPTY
20175: PPUSH
20176: CALL_OW 1
20180: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
20181: LD_ADDR_EXP 73
20185: PUSH
20186: LD_EXP 73
20190: PPUSH
20191: LD_VAR 0 2
20195: PPUSH
20196: LD_INT 0
20198: PPUSH
20199: CALL_OW 1
20203: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
20204: LD_ADDR_EXP 75
20208: PUSH
20209: LD_EXP 75
20213: PPUSH
20214: LD_VAR 0 2
20218: PPUSH
20219: EMPTY
20220: PPUSH
20221: CALL_OW 1
20225: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
20226: LD_ADDR_EXP 78
20230: PUSH
20231: LD_EXP 78
20235: PPUSH
20236: LD_VAR 0 2
20240: PPUSH
20241: LD_INT 0
20243: PPUSH
20244: CALL_OW 1
20248: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
20249: LD_ADDR_EXP 79
20253: PUSH
20254: LD_EXP 79
20258: PPUSH
20259: LD_VAR 0 2
20263: PPUSH
20264: EMPTY
20265: PPUSH
20266: CALL_OW 1
20270: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
20271: LD_ADDR_EXP 80
20275: PUSH
20276: LD_EXP 80
20280: PPUSH
20281: LD_VAR 0 2
20285: PPUSH
20286: EMPTY
20287: PPUSH
20288: CALL_OW 1
20292: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
20293: LD_ADDR_EXP 81
20297: PUSH
20298: LD_EXP 81
20302: PPUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: EMPTY
20309: PPUSH
20310: CALL_OW 1
20314: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
20315: LD_ADDR_EXP 83
20319: PUSH
20320: LD_EXP 83
20324: PPUSH
20325: LD_VAR 0 2
20329: PPUSH
20330: LD_EXP 50
20334: PUSH
20335: LD_VAR 0 2
20339: ARRAY
20340: PPUSH
20341: LD_INT 2
20343: PUSH
20344: LD_INT 30
20346: PUSH
20347: LD_INT 6
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: LD_INT 30
20356: PUSH
20357: LD_INT 7
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: LD_INT 30
20366: PUSH
20367: LD_INT 8
20369: PUSH
20370: EMPTY
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: PPUSH
20380: CALL_OW 72
20384: PPUSH
20385: CALL_OW 1
20389: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
20390: LD_ADDR_EXP 84
20394: PUSH
20395: LD_EXP 84
20399: PPUSH
20400: LD_VAR 0 2
20404: PPUSH
20405: EMPTY
20406: PPUSH
20407: CALL_OW 1
20411: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
20412: LD_ADDR_EXP 85
20416: PUSH
20417: LD_EXP 85
20421: PPUSH
20422: LD_VAR 0 2
20426: PPUSH
20427: EMPTY
20428: PPUSH
20429: CALL_OW 1
20433: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
20434: LD_ADDR_EXP 86
20438: PUSH
20439: LD_EXP 86
20443: PPUSH
20444: LD_VAR 0 2
20448: PPUSH
20449: EMPTY
20450: PPUSH
20451: CALL_OW 1
20455: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
20456: LD_ADDR_EXP 87
20460: PUSH
20461: LD_EXP 87
20465: PPUSH
20466: LD_VAR 0 2
20470: PPUSH
20471: EMPTY
20472: PPUSH
20473: CALL_OW 1
20477: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
20478: LD_ADDR_EXP 88
20482: PUSH
20483: LD_EXP 88
20487: PPUSH
20488: LD_VAR 0 2
20492: PPUSH
20493: EMPTY
20494: PPUSH
20495: CALL_OW 1
20499: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
20500: LD_ADDR_EXP 89
20504: PUSH
20505: LD_EXP 89
20509: PPUSH
20510: LD_VAR 0 2
20514: PPUSH
20515: EMPTY
20516: PPUSH
20517: CALL_OW 1
20521: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
20522: LD_ADDR_EXP 90
20526: PUSH
20527: LD_EXP 90
20531: PPUSH
20532: LD_VAR 0 2
20536: PPUSH
20537: EMPTY
20538: PPUSH
20539: CALL_OW 1
20543: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
20544: LD_ADDR_EXP 91
20548: PUSH
20549: LD_EXP 91
20553: PPUSH
20554: LD_VAR 0 2
20558: PPUSH
20559: EMPTY
20560: PPUSH
20561: CALL_OW 1
20565: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
20566: LD_ADDR_EXP 92
20570: PUSH
20571: LD_EXP 92
20575: PPUSH
20576: LD_VAR 0 2
20580: PPUSH
20581: LD_INT 0
20583: PPUSH
20584: CALL_OW 1
20588: ST_TO_ADDR
// end ;
20589: GO 19513
20591: POP
20592: POP
// MC_InitSides ( ) ;
20593: CALL 20879 0 0
// MC_InitResearch ( ) ;
20597: CALL 20618 0 0
// CustomInitMacro ( ) ;
20601: CALL 300 0 0
// skirmish := true ;
20605: LD_ADDR_EXP 48
20609: PUSH
20610: LD_INT 1
20612: ST_TO_ADDR
// end ;
20613: LD_VAR 0 1
20617: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
20618: LD_INT 0
20620: PPUSH
20621: PPUSH
20622: PPUSH
20623: PPUSH
20624: PPUSH
20625: PPUSH
// if not mc_bases then
20626: LD_EXP 50
20630: NOT
20631: IFFALSE 20635
// exit ;
20633: GO 20874
// for i = 1 to 8 do
20635: LD_ADDR_VAR 0 2
20639: PUSH
20640: DOUBLE
20641: LD_INT 1
20643: DEC
20644: ST_TO_ADDR
20645: LD_INT 8
20647: PUSH
20648: FOR_TO
20649: IFFALSE 20675
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
20651: LD_ADDR_EXP 77
20655: PUSH
20656: LD_EXP 77
20660: PPUSH
20661: LD_VAR 0 2
20665: PPUSH
20666: EMPTY
20667: PPUSH
20668: CALL_OW 1
20672: ST_TO_ADDR
20673: GO 20648
20675: POP
20676: POP
// tmp := [ ] ;
20677: LD_ADDR_VAR 0 5
20681: PUSH
20682: EMPTY
20683: ST_TO_ADDR
// for i = 1 to mc_sides do
20684: LD_ADDR_VAR 0 2
20688: PUSH
20689: DOUBLE
20690: LD_INT 1
20692: DEC
20693: ST_TO_ADDR
20694: LD_EXP 76
20698: PUSH
20699: FOR_TO
20700: IFFALSE 20758
// if not mc_sides [ i ] in tmp then
20702: LD_EXP 76
20706: PUSH
20707: LD_VAR 0 2
20711: ARRAY
20712: PUSH
20713: LD_VAR 0 5
20717: IN
20718: NOT
20719: IFFALSE 20756
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
20721: LD_ADDR_VAR 0 5
20725: PUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: LD_VAR 0 5
20735: PUSH
20736: LD_INT 1
20738: PLUS
20739: PPUSH
20740: LD_EXP 76
20744: PUSH
20745: LD_VAR 0 2
20749: ARRAY
20750: PPUSH
20751: CALL_OW 2
20755: ST_TO_ADDR
20756: GO 20699
20758: POP
20759: POP
// if not tmp then
20760: LD_VAR 0 5
20764: NOT
20765: IFFALSE 20769
// exit ;
20767: GO 20874
// for j in tmp do
20769: LD_ADDR_VAR 0 3
20773: PUSH
20774: LD_VAR 0 5
20778: PUSH
20779: FOR_IN
20780: IFFALSE 20872
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
20782: LD_ADDR_VAR 0 6
20786: PUSH
20787: LD_INT 22
20789: PUSH
20790: LD_VAR 0 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PPUSH
20799: CALL_OW 69
20803: ST_TO_ADDR
// if not un then
20804: LD_VAR 0 6
20808: NOT
20809: IFFALSE 20813
// continue ;
20811: GO 20779
// nation := GetNation ( un [ 1 ] ) ;
20813: LD_ADDR_VAR 0 4
20817: PUSH
20818: LD_VAR 0 6
20822: PUSH
20823: LD_INT 1
20825: ARRAY
20826: PPUSH
20827: CALL_OW 248
20831: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
20832: LD_ADDR_EXP 77
20836: PUSH
20837: LD_EXP 77
20841: PPUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_VAR 0 4
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL 47484 0 3
20864: PPUSH
20865: CALL_OW 1
20869: ST_TO_ADDR
// end ;
20870: GO 20779
20872: POP
20873: POP
// end ;
20874: LD_VAR 0 1
20878: RET
// export function MC_InitSides ( ) ; var i ; begin
20879: LD_INT 0
20881: PPUSH
20882: PPUSH
// if not mc_bases then
20883: LD_EXP 50
20887: NOT
20888: IFFALSE 20892
// exit ;
20890: GO 20966
// for i = 1 to mc_bases do
20892: LD_ADDR_VAR 0 2
20896: PUSH
20897: DOUBLE
20898: LD_INT 1
20900: DEC
20901: ST_TO_ADDR
20902: LD_EXP 50
20906: PUSH
20907: FOR_TO
20908: IFFALSE 20964
// if mc_bases [ i ] then
20910: LD_EXP 50
20914: PUSH
20915: LD_VAR 0 2
20919: ARRAY
20920: IFFALSE 20962
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
20922: LD_ADDR_EXP 76
20926: PUSH
20927: LD_EXP 76
20931: PPUSH
20932: LD_VAR 0 2
20936: PPUSH
20937: LD_EXP 50
20941: PUSH
20942: LD_VAR 0 2
20946: ARRAY
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 255
20956: PPUSH
20957: CALL_OW 1
20961: ST_TO_ADDR
20962: GO 20907
20964: POP
20965: POP
// end ;
20966: LD_VAR 0 1
20970: RET
// every 0 0$01 trigger skirmish do
20971: LD_EXP 48
20975: IFFALSE 21129
20977: GO 20979
20979: DISABLE
// begin enable ;
20980: ENABLE
// MC_CheckBuildings ( ) ;
20981: CALL 25627 0 0
// MC_CheckPeopleLife ( ) ;
20985: CALL 25752 0 0
// RaiseSailEvent ( 100 ) ;
20989: LD_INT 100
20991: PPUSH
20992: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
20996: LD_INT 103
20998: PPUSH
20999: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
21003: LD_INT 104
21005: PPUSH
21006: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
21010: LD_INT 105
21012: PPUSH
21013: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
21017: LD_INT 106
21019: PPUSH
21020: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
21024: LD_INT 107
21026: PPUSH
21027: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
21031: LD_INT 108
21033: PPUSH
21034: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
21038: LD_INT 109
21040: PPUSH
21041: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
21045: LD_INT 110
21047: PPUSH
21048: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
21052: LD_INT 111
21054: PPUSH
21055: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
21059: LD_INT 112
21061: PPUSH
21062: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
21066: LD_INT 113
21068: PPUSH
21069: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
21073: LD_INT 120
21075: PPUSH
21076: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
21080: LD_INT 121
21082: PPUSH
21083: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
21087: LD_INT 122
21089: PPUSH
21090: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
21094: LD_INT 123
21096: PPUSH
21097: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
21101: LD_INT 124
21103: PPUSH
21104: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
21108: LD_INT 125
21110: PPUSH
21111: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
21115: LD_INT 126
21117: PPUSH
21118: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
21122: LD_INT 200
21124: PPUSH
21125: CALL_OW 427
// end ;
21129: END
// on SailEvent ( event ) do begin if event < 100 then
21130: LD_VAR 0 1
21134: PUSH
21135: LD_INT 100
21137: LESS
21138: IFFALSE 21149
// CustomEvent ( event ) ;
21140: LD_VAR 0 1
21144: PPUSH
21145: CALL 16648 0 1
// if event = 100 then
21149: LD_VAR 0 1
21153: PUSH
21154: LD_INT 100
21156: EQUAL
21157: IFFALSE 21163
// MC_ClassManager ( ) ;
21159: CALL 21555 0 0
// if event = 101 then
21163: LD_VAR 0 1
21167: PUSH
21168: LD_INT 101
21170: EQUAL
21171: IFFALSE 21177
// MC_RepairBuildings ( ) ;
21173: CALL 26348 0 0
// if event = 102 then
21177: LD_VAR 0 1
21181: PUSH
21182: LD_INT 102
21184: EQUAL
21185: IFFALSE 21191
// MC_Heal ( ) ;
21187: CALL 27212 0 0
// if event = 103 then
21191: LD_VAR 0 1
21195: PUSH
21196: LD_INT 103
21198: EQUAL
21199: IFFALSE 21205
// MC_Build ( ) ;
21201: CALL 27634 0 0
// if event = 104 then
21205: LD_VAR 0 1
21209: PUSH
21210: LD_INT 104
21212: EQUAL
21213: IFFALSE 21219
// MC_TurretWeapon ( ) ;
21215: CALL 29247 0 0
// if event = 105 then
21219: LD_VAR 0 1
21223: PUSH
21224: LD_INT 105
21226: EQUAL
21227: IFFALSE 21233
// MC_BuildUpgrade ( ) ;
21229: CALL 28798 0 0
// if event = 106 then
21233: LD_VAR 0 1
21237: PUSH
21238: LD_INT 106
21240: EQUAL
21241: IFFALSE 21247
// MC_PlantMines ( ) ;
21243: CALL 29677 0 0
// if event = 107 then
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 107
21254: EQUAL
21255: IFFALSE 21261
// MC_CollectCrates ( ) ;
21257: CALL 30475 0 0
// if event = 108 then
21261: LD_VAR 0 1
21265: PUSH
21266: LD_INT 108
21268: EQUAL
21269: IFFALSE 21275
// MC_LinkRemoteControl ( ) ;
21271: CALL 32251 0 0
// if event = 109 then
21275: LD_VAR 0 1
21279: PUSH
21280: LD_INT 109
21282: EQUAL
21283: IFFALSE 21289
// MC_ProduceVehicle ( ) ;
21285: CALL 32432 0 0
// if event = 110 then
21289: LD_VAR 0 1
21293: PUSH
21294: LD_INT 110
21296: EQUAL
21297: IFFALSE 21303
// MC_SendAttack ( ) ;
21299: CALL 32898 0 0
// if event = 111 then
21303: LD_VAR 0 1
21307: PUSH
21308: LD_INT 111
21310: EQUAL
21311: IFFALSE 21317
// MC_Defend ( ) ;
21313: CALL 33006 0 0
// if event = 112 then
21317: LD_VAR 0 1
21321: PUSH
21322: LD_INT 112
21324: EQUAL
21325: IFFALSE 21331
// MC_Research ( ) ;
21327: CALL 33611 0 0
// if event = 113 then
21331: LD_VAR 0 1
21335: PUSH
21336: LD_INT 113
21338: EQUAL
21339: IFFALSE 21345
// MC_MinesTrigger ( ) ;
21341: CALL 34725 0 0
// if event = 120 then
21345: LD_VAR 0 1
21349: PUSH
21350: LD_INT 120
21352: EQUAL
21353: IFFALSE 21359
// MC_RepairVehicle ( ) ;
21355: CALL 34824 0 0
// if event = 121 then
21359: LD_VAR 0 1
21363: PUSH
21364: LD_INT 121
21366: EQUAL
21367: IFFALSE 21373
// MC_TameApe ( ) ;
21369: CALL 35554 0 0
// if event = 122 then
21373: LD_VAR 0 1
21377: PUSH
21378: LD_INT 122
21380: EQUAL
21381: IFFALSE 21387
// MC_ChangeApeClass ( ) ;
21383: CALL 36383 0 0
// if event = 123 then
21387: LD_VAR 0 1
21391: PUSH
21392: LD_INT 123
21394: EQUAL
21395: IFFALSE 21401
// MC_Bazooka ( ) ;
21397: CALL 37033 0 0
// if event = 124 then
21401: LD_VAR 0 1
21405: PUSH
21406: LD_INT 124
21408: EQUAL
21409: IFFALSE 21415
// MC_TeleportExit ( ) ;
21411: CALL 37231 0 0
// if event = 125 then
21415: LD_VAR 0 1
21419: PUSH
21420: LD_INT 125
21422: EQUAL
21423: IFFALSE 21429
// MC_Deposits ( ) ;
21425: CALL 37878 0 0
// if event = 126 then
21429: LD_VAR 0 1
21433: PUSH
21434: LD_INT 126
21436: EQUAL
21437: IFFALSE 21443
// MC_RemoteDriver ( ) ;
21439: CALL 38503 0 0
// if event = 200 then
21443: LD_VAR 0 1
21447: PUSH
21448: LD_INT 200
21450: EQUAL
21451: IFFALSE 21457
// MC_Idle ( ) ;
21453: CALL 40452 0 0
// end ;
21457: PPOPN 1
21459: END
// export function MC_Reset ( base , tag ) ; var i ; begin
21460: LD_INT 0
21462: PPUSH
21463: PPUSH
// if not mc_bases [ base ] or not tag then
21464: LD_EXP 50
21468: PUSH
21469: LD_VAR 0 1
21473: ARRAY
21474: NOT
21475: PUSH
21476: LD_VAR 0 2
21480: NOT
21481: OR
21482: IFFALSE 21486
// exit ;
21484: GO 21550
// for i in mc_bases [ base ] union mc_ape [ base ] do
21486: LD_ADDR_VAR 0 4
21490: PUSH
21491: LD_EXP 50
21495: PUSH
21496: LD_VAR 0 1
21500: ARRAY
21501: PUSH
21502: LD_EXP 79
21506: PUSH
21507: LD_VAR 0 1
21511: ARRAY
21512: UNION
21513: PUSH
21514: FOR_IN
21515: IFFALSE 21548
// if GetTag ( i ) = tag then
21517: LD_VAR 0 4
21521: PPUSH
21522: CALL_OW 110
21526: PUSH
21527: LD_VAR 0 2
21531: EQUAL
21532: IFFALSE 21546
// SetTag ( i , 0 ) ;
21534: LD_VAR 0 4
21538: PPUSH
21539: LD_INT 0
21541: PPUSH
21542: CALL_OW 109
21546: GO 21514
21548: POP
21549: POP
// end ;
21550: LD_VAR 0 3
21554: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
21555: LD_INT 0
21557: PPUSH
21558: PPUSH
21559: PPUSH
21560: PPUSH
21561: PPUSH
21562: PPUSH
21563: PPUSH
21564: PPUSH
// if not mc_bases then
21565: LD_EXP 50
21569: NOT
21570: IFFALSE 21574
// exit ;
21572: GO 22032
// for i = 1 to mc_bases do
21574: LD_ADDR_VAR 0 2
21578: PUSH
21579: DOUBLE
21580: LD_INT 1
21582: DEC
21583: ST_TO_ADDR
21584: LD_EXP 50
21588: PUSH
21589: FOR_TO
21590: IFFALSE 22030
// begin tmp := MC_ClassCheckReq ( i ) ;
21592: LD_ADDR_VAR 0 4
21596: PUSH
21597: LD_VAR 0 2
21601: PPUSH
21602: CALL 22037 0 1
21606: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
21607: LD_ADDR_EXP 91
21611: PUSH
21612: LD_EXP 91
21616: PPUSH
21617: LD_VAR 0 2
21621: PPUSH
21622: LD_VAR 0 4
21626: PPUSH
21627: CALL_OW 1
21631: ST_TO_ADDR
// if not tmp then
21632: LD_VAR 0 4
21636: NOT
21637: IFFALSE 21641
// continue ;
21639: GO 21589
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
21641: LD_ADDR_VAR 0 6
21645: PUSH
21646: LD_EXP 50
21650: PUSH
21651: LD_VAR 0 2
21655: ARRAY
21656: PPUSH
21657: LD_INT 2
21659: PUSH
21660: LD_INT 30
21662: PUSH
21663: LD_INT 4
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 30
21672: PUSH
21673: LD_INT 5
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: PPUSH
21685: CALL_OW 72
21689: PUSH
21690: LD_EXP 50
21694: PUSH
21695: LD_VAR 0 2
21699: ARRAY
21700: PPUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 30
21706: PUSH
21707: LD_INT 0
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PUSH
21714: LD_INT 30
21716: PUSH
21717: LD_INT 1
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PUSH
21724: EMPTY
21725: LIST
21726: LIST
21727: LIST
21728: PPUSH
21729: CALL_OW 72
21733: PUSH
21734: LD_EXP 50
21738: PUSH
21739: LD_VAR 0 2
21743: ARRAY
21744: PPUSH
21745: LD_INT 30
21747: PUSH
21748: LD_INT 3
21750: PUSH
21751: EMPTY
21752: LIST
21753: LIST
21754: PPUSH
21755: CALL_OW 72
21759: PUSH
21760: LD_EXP 50
21764: PUSH
21765: LD_VAR 0 2
21769: ARRAY
21770: PPUSH
21771: LD_INT 2
21773: PUSH
21774: LD_INT 30
21776: PUSH
21777: LD_INT 6
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 30
21786: PUSH
21787: LD_INT 7
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 30
21796: PUSH
21797: LD_INT 8
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 72
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: ST_TO_ADDR
// for j = 1 to 4 do
21821: LD_ADDR_VAR 0 3
21825: PUSH
21826: DOUBLE
21827: LD_INT 1
21829: DEC
21830: ST_TO_ADDR
21831: LD_INT 4
21833: PUSH
21834: FOR_TO
21835: IFFALSE 22026
// begin if not tmp [ j ] then
21837: LD_VAR 0 4
21841: PUSH
21842: LD_VAR 0 3
21846: ARRAY
21847: NOT
21848: IFFALSE 21852
// continue ;
21850: GO 21834
// for p in tmp [ j ] do
21852: LD_ADDR_VAR 0 5
21856: PUSH
21857: LD_VAR 0 4
21861: PUSH
21862: LD_VAR 0 3
21866: ARRAY
21867: PUSH
21868: FOR_IN
21869: IFFALSE 22022
// begin if not b [ j ] then
21871: LD_VAR 0 6
21875: PUSH
21876: LD_VAR 0 3
21880: ARRAY
21881: NOT
21882: IFFALSE 21886
// break ;
21884: GO 22022
// e := 0 ;
21886: LD_ADDR_VAR 0 7
21890: PUSH
21891: LD_INT 0
21893: ST_TO_ADDR
// for k in b [ j ] do
21894: LD_ADDR_VAR 0 8
21898: PUSH
21899: LD_VAR 0 6
21903: PUSH
21904: LD_VAR 0 3
21908: ARRAY
21909: PUSH
21910: FOR_IN
21911: IFFALSE 21938
// if IsNotFull ( k ) then
21913: LD_VAR 0 8
21917: PPUSH
21918: CALL 51984 0 1
21922: IFFALSE 21936
// begin e := k ;
21924: LD_ADDR_VAR 0 7
21928: PUSH
21929: LD_VAR 0 8
21933: ST_TO_ADDR
// break ;
21934: GO 21938
// end ;
21936: GO 21910
21938: POP
21939: POP
// if e and not UnitGoingToBuilding ( p , e ) then
21940: LD_VAR 0 7
21944: PUSH
21945: LD_VAR 0 5
21949: PPUSH
21950: LD_VAR 0 7
21954: PPUSH
21955: CALL 89113 0 2
21959: NOT
21960: AND
21961: IFFALSE 22020
// begin if IsInUnit ( p ) then
21963: LD_VAR 0 5
21967: PPUSH
21968: CALL_OW 310
21972: IFFALSE 21983
// ComExitBuilding ( p ) ;
21974: LD_VAR 0 5
21978: PPUSH
21979: CALL_OW 122
// ComEnterUnit ( p , e ) ;
21983: LD_VAR 0 5
21987: PPUSH
21988: LD_VAR 0 7
21992: PPUSH
21993: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
21997: LD_VAR 0 5
22001: PPUSH
22002: LD_VAR 0 3
22006: PPUSH
22007: CALL_OW 183
// AddComExitBuilding ( p ) ;
22011: LD_VAR 0 5
22015: PPUSH
22016: CALL_OW 182
// end ; end ;
22020: GO 21868
22022: POP
22023: POP
// end ;
22024: GO 21834
22026: POP
22027: POP
// end ;
22028: GO 21589
22030: POP
22031: POP
// end ;
22032: LD_VAR 0 1
22036: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
22037: LD_INT 0
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
22051: LD_VAR 0 1
22055: NOT
22056: PUSH
22057: LD_EXP 50
22061: PUSH
22062: LD_VAR 0 1
22066: ARRAY
22067: NOT
22068: OR
22069: PUSH
22070: LD_EXP 50
22074: PUSH
22075: LD_VAR 0 1
22079: ARRAY
22080: PPUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 30
22086: PUSH
22087: LD_INT 0
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 30
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 72
22113: NOT
22114: OR
22115: IFFALSE 22119
// exit ;
22117: GO 25622
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22119: LD_ADDR_VAR 0 4
22123: PUSH
22124: LD_EXP 50
22128: PUSH
22129: LD_VAR 0 1
22133: ARRAY
22134: PPUSH
22135: LD_INT 2
22137: PUSH
22138: LD_INT 25
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 25
22150: PUSH
22151: LD_INT 2
22153: PUSH
22154: EMPTY
22155: LIST
22156: LIST
22157: PUSH
22158: LD_INT 25
22160: PUSH
22161: LD_INT 3
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: PUSH
22168: LD_INT 25
22170: PUSH
22171: LD_INT 4
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: PUSH
22178: LD_INT 25
22180: PUSH
22181: LD_INT 5
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PUSH
22188: LD_INT 25
22190: PUSH
22191: LD_INT 8
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: PUSH
22198: LD_INT 25
22200: PUSH
22201: LD_INT 9
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: EMPTY
22209: LIST
22210: LIST
22211: LIST
22212: LIST
22213: LIST
22214: LIST
22215: LIST
22216: LIST
22217: PPUSH
22218: CALL_OW 72
22222: ST_TO_ADDR
// if not tmp then
22223: LD_VAR 0 4
22227: NOT
22228: IFFALSE 22232
// exit ;
22230: GO 25622
// for i in tmp do
22232: LD_ADDR_VAR 0 3
22236: PUSH
22237: LD_VAR 0 4
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22274
// if GetTag ( i ) then
22245: LD_VAR 0 3
22249: PPUSH
22250: CALL_OW 110
22254: IFFALSE 22272
// tmp := tmp diff i ;
22256: LD_ADDR_VAR 0 4
22260: PUSH
22261: LD_VAR 0 4
22265: PUSH
22266: LD_VAR 0 3
22270: DIFF
22271: ST_TO_ADDR
22272: GO 22242
22274: POP
22275: POP
// if not tmp then
22276: LD_VAR 0 4
22280: NOT
22281: IFFALSE 22285
// exit ;
22283: GO 25622
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22285: LD_ADDR_VAR 0 5
22289: PUSH
22290: LD_EXP 50
22294: PUSH
22295: LD_VAR 0 1
22299: ARRAY
22300: PPUSH
22301: LD_INT 2
22303: PUSH
22304: LD_INT 25
22306: PUSH
22307: LD_INT 1
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 25
22316: PUSH
22317: LD_INT 5
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: PUSH
22324: LD_INT 25
22326: PUSH
22327: LD_INT 8
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 25
22336: PUSH
22337: LD_INT 9
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PPUSH
22351: CALL_OW 72
22355: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
22356: LD_ADDR_VAR 0 6
22360: PUSH
22361: LD_EXP 50
22365: PUSH
22366: LD_VAR 0 1
22370: ARRAY
22371: PPUSH
22372: LD_INT 25
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PPUSH
22382: CALL_OW 72
22386: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
22387: LD_ADDR_VAR 0 7
22391: PUSH
22392: LD_EXP 50
22396: PUSH
22397: LD_VAR 0 1
22401: ARRAY
22402: PPUSH
22403: LD_INT 25
22405: PUSH
22406: LD_INT 3
22408: PUSH
22409: EMPTY
22410: LIST
22411: LIST
22412: PPUSH
22413: CALL_OW 72
22417: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
22418: LD_ADDR_VAR 0 8
22422: PUSH
22423: LD_EXP 50
22427: PUSH
22428: LD_VAR 0 1
22432: ARRAY
22433: PPUSH
22434: LD_INT 25
22436: PUSH
22437: LD_INT 4
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 24
22446: PUSH
22447: LD_INT 251
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PPUSH
22458: CALL_OW 72
22462: ST_TO_ADDR
// if mc_scan [ base ] then
22463: LD_EXP 73
22467: PUSH
22468: LD_VAR 0 1
22472: ARRAY
22473: IFFALSE 22934
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
22475: LD_ADDR_EXP 92
22479: PUSH
22480: LD_EXP 92
22484: PPUSH
22485: LD_VAR 0 1
22489: PPUSH
22490: LD_INT 4
22492: PPUSH
22493: CALL_OW 1
22497: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
22498: LD_ADDR_VAR 0 12
22502: PUSH
22503: LD_EXP 50
22507: PUSH
22508: LD_VAR 0 1
22512: ARRAY
22513: PPUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 4
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 30
22529: PUSH
22530: LD_INT 5
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: EMPTY
22538: LIST
22539: LIST
22540: LIST
22541: PPUSH
22542: CALL_OW 72
22546: ST_TO_ADDR
// if not b then
22547: LD_VAR 0 12
22551: NOT
22552: IFFALSE 22556
// exit ;
22554: GO 25622
// p := [ ] ;
22556: LD_ADDR_VAR 0 11
22560: PUSH
22561: EMPTY
22562: ST_TO_ADDR
// if sci >= 2 then
22563: LD_VAR 0 8
22567: PUSH
22568: LD_INT 2
22570: GREATEREQUAL
22571: IFFALSE 22602
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
22573: LD_ADDR_VAR 0 8
22577: PUSH
22578: LD_VAR 0 8
22582: PUSH
22583: LD_INT 1
22585: ARRAY
22586: PUSH
22587: LD_VAR 0 8
22591: PUSH
22592: LD_INT 2
22594: ARRAY
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: ST_TO_ADDR
22600: GO 22663
// if sci = 1 then
22602: LD_VAR 0 8
22606: PUSH
22607: LD_INT 1
22609: EQUAL
22610: IFFALSE 22631
// sci := [ sci [ 1 ] ] else
22612: LD_ADDR_VAR 0 8
22616: PUSH
22617: LD_VAR 0 8
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PUSH
22626: EMPTY
22627: LIST
22628: ST_TO_ADDR
22629: GO 22663
// if sci = 0 then
22631: LD_VAR 0 8
22635: PUSH
22636: LD_INT 0
22638: EQUAL
22639: IFFALSE 22663
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
22641: LD_ADDR_VAR 0 11
22645: PUSH
22646: LD_VAR 0 4
22650: PPUSH
22651: LD_INT 4
22653: PPUSH
22654: CALL 88976 0 2
22658: PUSH
22659: LD_INT 1
22661: ARRAY
22662: ST_TO_ADDR
// if eng > 4 then
22663: LD_VAR 0 6
22667: PUSH
22668: LD_INT 4
22670: GREATER
22671: IFFALSE 22717
// for i = eng downto 4 do
22673: LD_ADDR_VAR 0 3
22677: PUSH
22678: DOUBLE
22679: LD_VAR 0 6
22683: INC
22684: ST_TO_ADDR
22685: LD_INT 4
22687: PUSH
22688: FOR_DOWNTO
22689: IFFALSE 22715
// eng := eng diff eng [ i ] ;
22691: LD_ADDR_VAR 0 6
22695: PUSH
22696: LD_VAR 0 6
22700: PUSH
22701: LD_VAR 0 6
22705: PUSH
22706: LD_VAR 0 3
22710: ARRAY
22711: DIFF
22712: ST_TO_ADDR
22713: GO 22688
22715: POP
22716: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
22717: LD_ADDR_VAR 0 4
22721: PUSH
22722: LD_VAR 0 4
22726: PUSH
22727: LD_VAR 0 5
22731: PUSH
22732: LD_VAR 0 6
22736: UNION
22737: PUSH
22738: LD_VAR 0 7
22742: UNION
22743: PUSH
22744: LD_VAR 0 8
22748: UNION
22749: DIFF
22750: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
22751: LD_ADDR_VAR 0 13
22755: PUSH
22756: LD_EXP 50
22760: PUSH
22761: LD_VAR 0 1
22765: ARRAY
22766: PPUSH
22767: LD_INT 2
22769: PUSH
22770: LD_INT 30
22772: PUSH
22773: LD_INT 32
22775: PUSH
22776: EMPTY
22777: LIST
22778: LIST
22779: PUSH
22780: LD_INT 30
22782: PUSH
22783: LD_INT 31
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: LIST
22794: PPUSH
22795: CALL_OW 72
22799: PUSH
22800: LD_EXP 50
22804: PUSH
22805: LD_VAR 0 1
22809: ARRAY
22810: PPUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: LD_INT 4
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: PPUSH
22839: CALL_OW 72
22843: PUSH
22844: LD_INT 6
22846: MUL
22847: PLUS
22848: ST_TO_ADDR
// if bcount < tmp then
22849: LD_VAR 0 13
22853: PUSH
22854: LD_VAR 0 4
22858: LESS
22859: IFFALSE 22905
// for i = tmp downto bcount do
22861: LD_ADDR_VAR 0 3
22865: PUSH
22866: DOUBLE
22867: LD_VAR 0 4
22871: INC
22872: ST_TO_ADDR
22873: LD_VAR 0 13
22877: PUSH
22878: FOR_DOWNTO
22879: IFFALSE 22903
// tmp := Delete ( tmp , tmp ) ;
22881: LD_ADDR_VAR 0 4
22885: PUSH
22886: LD_VAR 0 4
22890: PPUSH
22891: LD_VAR 0 4
22895: PPUSH
22896: CALL_OW 3
22900: ST_TO_ADDR
22901: GO 22878
22903: POP
22904: POP
// result := [ tmp , 0 , 0 , p ] ;
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_VAR 0 4
22914: PUSH
22915: LD_INT 0
22917: PUSH
22918: LD_INT 0
22920: PUSH
22921: LD_VAR 0 11
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: ST_TO_ADDR
// exit ;
22932: GO 25622
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
22934: LD_EXP 50
22938: PUSH
22939: LD_VAR 0 1
22943: ARRAY
22944: PPUSH
22945: LD_INT 2
22947: PUSH
22948: LD_INT 30
22950: PUSH
22951: LD_INT 6
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 30
22960: PUSH
22961: LD_INT 7
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PUSH
22968: LD_INT 30
22970: PUSH
22971: LD_INT 8
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: PUSH
22978: EMPTY
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 72
22988: NOT
22989: PUSH
22990: LD_EXP 50
22994: PUSH
22995: LD_VAR 0 1
22999: ARRAY
23000: PPUSH
23001: LD_INT 30
23003: PUSH
23004: LD_INT 3
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PPUSH
23011: CALL_OW 72
23015: NOT
23016: AND
23017: IFFALSE 23089
// begin if eng = tmp then
23019: LD_VAR 0 6
23023: PUSH
23024: LD_VAR 0 4
23028: EQUAL
23029: IFFALSE 23033
// exit ;
23031: GO 25622
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
23033: LD_ADDR_EXP 92
23037: PUSH
23038: LD_EXP 92
23042: PPUSH
23043: LD_VAR 0 1
23047: PPUSH
23048: LD_INT 1
23050: PPUSH
23051: CALL_OW 1
23055: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
23056: LD_ADDR_VAR 0 2
23060: PUSH
23061: LD_INT 0
23063: PUSH
23064: LD_VAR 0 4
23068: PUSH
23069: LD_VAR 0 6
23073: DIFF
23074: PUSH
23075: LD_INT 0
23077: PUSH
23078: LD_INT 0
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: ST_TO_ADDR
// exit ;
23087: GO 25622
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23089: LD_EXP 77
23093: PUSH
23094: LD_EXP 76
23098: PUSH
23099: LD_VAR 0 1
23103: ARRAY
23104: ARRAY
23105: PUSH
23106: LD_EXP 50
23110: PUSH
23111: LD_VAR 0 1
23115: ARRAY
23116: PPUSH
23117: LD_INT 2
23119: PUSH
23120: LD_INT 30
23122: PUSH
23123: LD_INT 6
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 30
23132: PUSH
23133: LD_INT 7
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 8
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: PPUSH
23156: CALL_OW 72
23160: AND
23161: PUSH
23162: LD_EXP 50
23166: PUSH
23167: LD_VAR 0 1
23171: ARRAY
23172: PPUSH
23173: LD_INT 30
23175: PUSH
23176: LD_INT 3
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PPUSH
23183: CALL_OW 72
23187: NOT
23188: AND
23189: IFFALSE 23403
// begin if sci >= 6 then
23191: LD_VAR 0 8
23195: PUSH
23196: LD_INT 6
23198: GREATEREQUAL
23199: IFFALSE 23203
// exit ;
23201: GO 25622
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
23203: LD_ADDR_EXP 92
23207: PUSH
23208: LD_EXP 92
23212: PPUSH
23213: LD_VAR 0 1
23217: PPUSH
23218: LD_INT 2
23220: PPUSH
23221: CALL_OW 1
23225: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
23226: LD_ADDR_VAR 0 9
23230: PUSH
23231: LD_VAR 0 4
23235: PUSH
23236: LD_VAR 0 8
23240: DIFF
23241: PPUSH
23242: LD_INT 4
23244: PPUSH
23245: CALL 88976 0 2
23249: ST_TO_ADDR
// p := [ ] ;
23250: LD_ADDR_VAR 0 11
23254: PUSH
23255: EMPTY
23256: ST_TO_ADDR
// if sci < 6 and sort > 6 then
23257: LD_VAR 0 8
23261: PUSH
23262: LD_INT 6
23264: LESS
23265: PUSH
23266: LD_VAR 0 9
23270: PUSH
23271: LD_INT 6
23273: GREATER
23274: AND
23275: IFFALSE 23356
// begin for i = 1 to 6 - sci do
23277: LD_ADDR_VAR 0 3
23281: PUSH
23282: DOUBLE
23283: LD_INT 1
23285: DEC
23286: ST_TO_ADDR
23287: LD_INT 6
23289: PUSH
23290: LD_VAR 0 8
23294: MINUS
23295: PUSH
23296: FOR_TO
23297: IFFALSE 23352
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
23299: LD_ADDR_VAR 0 11
23303: PUSH
23304: LD_VAR 0 11
23308: PPUSH
23309: LD_VAR 0 11
23313: PUSH
23314: LD_INT 1
23316: PLUS
23317: PPUSH
23318: LD_VAR 0 9
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: CALL_OW 2
23331: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
23332: LD_ADDR_VAR 0 9
23336: PUSH
23337: LD_VAR 0 9
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 3
23349: ST_TO_ADDR
// end ;
23350: GO 23296
23352: POP
23353: POP
// end else
23354: GO 23376
// if sort then
23356: LD_VAR 0 9
23360: IFFALSE 23376
// p := sort [ 1 ] ;
23362: LD_ADDR_VAR 0 11
23366: PUSH
23367: LD_VAR 0 9
23371: PUSH
23372: LD_INT 1
23374: ARRAY
23375: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
23376: LD_ADDR_VAR 0 2
23380: PUSH
23381: LD_INT 0
23383: PUSH
23384: LD_INT 0
23386: PUSH
23387: LD_INT 0
23389: PUSH
23390: LD_VAR 0 11
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: ST_TO_ADDR
// exit ;
23401: GO 25622
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
23403: LD_EXP 77
23407: PUSH
23408: LD_EXP 76
23412: PUSH
23413: LD_VAR 0 1
23417: ARRAY
23418: ARRAY
23419: PUSH
23420: LD_EXP 50
23424: PUSH
23425: LD_VAR 0 1
23429: ARRAY
23430: PPUSH
23431: LD_INT 2
23433: PUSH
23434: LD_INT 30
23436: PUSH
23437: LD_INT 6
23439: PUSH
23440: EMPTY
23441: LIST
23442: LIST
23443: PUSH
23444: LD_INT 30
23446: PUSH
23447: LD_INT 7
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 8
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: PPUSH
23470: CALL_OW 72
23474: AND
23475: PUSH
23476: LD_EXP 50
23480: PUSH
23481: LD_VAR 0 1
23485: ARRAY
23486: PPUSH
23487: LD_INT 30
23489: PUSH
23490: LD_INT 3
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: PPUSH
23497: CALL_OW 72
23501: AND
23502: IFFALSE 24236
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
23504: LD_ADDR_EXP 92
23508: PUSH
23509: LD_EXP 92
23513: PPUSH
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 3
23521: PPUSH
23522: CALL_OW 1
23526: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
23527: LD_ADDR_VAR 0 2
23531: PUSH
23532: LD_INT 0
23534: PUSH
23535: LD_INT 0
23537: PUSH
23538: LD_INT 0
23540: PUSH
23541: LD_INT 0
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: ST_TO_ADDR
// if not eng then
23550: LD_VAR 0 6
23554: NOT
23555: IFFALSE 23618
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
23557: LD_ADDR_VAR 0 11
23561: PUSH
23562: LD_VAR 0 4
23566: PPUSH
23567: LD_INT 2
23569: PPUSH
23570: CALL 88976 0 2
23574: PUSH
23575: LD_INT 1
23577: ARRAY
23578: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
23579: LD_ADDR_VAR 0 2
23583: PUSH
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_INT 2
23591: PPUSH
23592: LD_VAR 0 11
23596: PPUSH
23597: CALL_OW 1
23601: ST_TO_ADDR
// tmp := tmp diff p ;
23602: LD_ADDR_VAR 0 4
23606: PUSH
23607: LD_VAR 0 4
23611: PUSH
23612: LD_VAR 0 11
23616: DIFF
23617: ST_TO_ADDR
// end ; if tmp and sci < 6 then
23618: LD_VAR 0 4
23622: PUSH
23623: LD_VAR 0 8
23627: PUSH
23628: LD_INT 6
23630: LESS
23631: AND
23632: IFFALSE 23820
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
23634: LD_ADDR_VAR 0 9
23638: PUSH
23639: LD_VAR 0 4
23643: PUSH
23644: LD_VAR 0 8
23648: PUSH
23649: LD_VAR 0 7
23653: UNION
23654: DIFF
23655: PPUSH
23656: LD_INT 4
23658: PPUSH
23659: CALL 88976 0 2
23663: ST_TO_ADDR
// p := [ ] ;
23664: LD_ADDR_VAR 0 11
23668: PUSH
23669: EMPTY
23670: ST_TO_ADDR
// if sort then
23671: LD_VAR 0 9
23675: IFFALSE 23791
// for i = 1 to 6 - sci do
23677: LD_ADDR_VAR 0 3
23681: PUSH
23682: DOUBLE
23683: LD_INT 1
23685: DEC
23686: ST_TO_ADDR
23687: LD_INT 6
23689: PUSH
23690: LD_VAR 0 8
23694: MINUS
23695: PUSH
23696: FOR_TO
23697: IFFALSE 23789
// begin if i = sort then
23699: LD_VAR 0 3
23703: PUSH
23704: LD_VAR 0 9
23708: EQUAL
23709: IFFALSE 23713
// break ;
23711: GO 23789
// if GetClass ( i ) = 4 then
23713: LD_VAR 0 3
23717: PPUSH
23718: CALL_OW 257
23722: PUSH
23723: LD_INT 4
23725: EQUAL
23726: IFFALSE 23730
// continue ;
23728: GO 23696
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23730: LD_ADDR_VAR 0 11
23734: PUSH
23735: LD_VAR 0 11
23739: PPUSH
23740: LD_VAR 0 11
23744: PUSH
23745: LD_INT 1
23747: PLUS
23748: PPUSH
23749: LD_VAR 0 9
23753: PUSH
23754: LD_VAR 0 3
23758: ARRAY
23759: PPUSH
23760: CALL_OW 2
23764: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23765: LD_ADDR_VAR 0 4
23769: PUSH
23770: LD_VAR 0 4
23774: PUSH
23775: LD_VAR 0 9
23779: PUSH
23780: LD_VAR 0 3
23784: ARRAY
23785: DIFF
23786: ST_TO_ADDR
// end ;
23787: GO 23696
23789: POP
23790: POP
// if p then
23791: LD_VAR 0 11
23795: IFFALSE 23820
// result := Replace ( result , 4 , p ) ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_VAR 0 2
23806: PPUSH
23807: LD_INT 4
23809: PPUSH
23810: LD_VAR 0 11
23814: PPUSH
23815: CALL_OW 1
23819: ST_TO_ADDR
// end ; if tmp and mech < 6 then
23820: LD_VAR 0 4
23824: PUSH
23825: LD_VAR 0 7
23829: PUSH
23830: LD_INT 6
23832: LESS
23833: AND
23834: IFFALSE 24022
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
23836: LD_ADDR_VAR 0 9
23840: PUSH
23841: LD_VAR 0 4
23845: PUSH
23846: LD_VAR 0 8
23850: PUSH
23851: LD_VAR 0 7
23855: UNION
23856: DIFF
23857: PPUSH
23858: LD_INT 3
23860: PPUSH
23861: CALL 88976 0 2
23865: ST_TO_ADDR
// p := [ ] ;
23866: LD_ADDR_VAR 0 11
23870: PUSH
23871: EMPTY
23872: ST_TO_ADDR
// if sort then
23873: LD_VAR 0 9
23877: IFFALSE 23993
// for i = 1 to 6 - mech do
23879: LD_ADDR_VAR 0 3
23883: PUSH
23884: DOUBLE
23885: LD_INT 1
23887: DEC
23888: ST_TO_ADDR
23889: LD_INT 6
23891: PUSH
23892: LD_VAR 0 7
23896: MINUS
23897: PUSH
23898: FOR_TO
23899: IFFALSE 23991
// begin if i = sort then
23901: LD_VAR 0 3
23905: PUSH
23906: LD_VAR 0 9
23910: EQUAL
23911: IFFALSE 23915
// break ;
23913: GO 23991
// if GetClass ( i ) = 3 then
23915: LD_VAR 0 3
23919: PPUSH
23920: CALL_OW 257
23924: PUSH
23925: LD_INT 3
23927: EQUAL
23928: IFFALSE 23932
// continue ;
23930: GO 23898
// p := Insert ( p , p + 1 , sort [ i ] ) ;
23932: LD_ADDR_VAR 0 11
23936: PUSH
23937: LD_VAR 0 11
23941: PPUSH
23942: LD_VAR 0 11
23946: PUSH
23947: LD_INT 1
23949: PLUS
23950: PPUSH
23951: LD_VAR 0 9
23955: PUSH
23956: LD_VAR 0 3
23960: ARRAY
23961: PPUSH
23962: CALL_OW 2
23966: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
23967: LD_ADDR_VAR 0 4
23971: PUSH
23972: LD_VAR 0 4
23976: PUSH
23977: LD_VAR 0 9
23981: PUSH
23982: LD_VAR 0 3
23986: ARRAY
23987: DIFF
23988: ST_TO_ADDR
// end ;
23989: GO 23898
23991: POP
23992: POP
// if p then
23993: LD_VAR 0 11
23997: IFFALSE 24022
// result := Replace ( result , 3 , p ) ;
23999: LD_ADDR_VAR 0 2
24003: PUSH
24004: LD_VAR 0 2
24008: PPUSH
24009: LD_INT 3
24011: PPUSH
24012: LD_VAR 0 11
24016: PPUSH
24017: CALL_OW 1
24021: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
24022: LD_VAR 0 4
24026: PUSH
24027: LD_INT 6
24029: GREATER
24030: PUSH
24031: LD_VAR 0 6
24035: PUSH
24036: LD_INT 6
24038: LESS
24039: AND
24040: IFFALSE 24234
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24042: LD_ADDR_VAR 0 9
24046: PUSH
24047: LD_VAR 0 4
24051: PUSH
24052: LD_VAR 0 8
24056: PUSH
24057: LD_VAR 0 7
24061: UNION
24062: PUSH
24063: LD_VAR 0 6
24067: UNION
24068: DIFF
24069: PPUSH
24070: LD_INT 2
24072: PPUSH
24073: CALL 88976 0 2
24077: ST_TO_ADDR
// p := [ ] ;
24078: LD_ADDR_VAR 0 11
24082: PUSH
24083: EMPTY
24084: ST_TO_ADDR
// if sort then
24085: LD_VAR 0 9
24089: IFFALSE 24205
// for i = 1 to 6 - eng do
24091: LD_ADDR_VAR 0 3
24095: PUSH
24096: DOUBLE
24097: LD_INT 1
24099: DEC
24100: ST_TO_ADDR
24101: LD_INT 6
24103: PUSH
24104: LD_VAR 0 6
24108: MINUS
24109: PUSH
24110: FOR_TO
24111: IFFALSE 24203
// begin if i = sort then
24113: LD_VAR 0 3
24117: PUSH
24118: LD_VAR 0 9
24122: EQUAL
24123: IFFALSE 24127
// break ;
24125: GO 24203
// if GetClass ( i ) = 2 then
24127: LD_VAR 0 3
24131: PPUSH
24132: CALL_OW 257
24136: PUSH
24137: LD_INT 2
24139: EQUAL
24140: IFFALSE 24144
// continue ;
24142: GO 24110
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24144: LD_ADDR_VAR 0 11
24148: PUSH
24149: LD_VAR 0 11
24153: PPUSH
24154: LD_VAR 0 11
24158: PUSH
24159: LD_INT 1
24161: PLUS
24162: PPUSH
24163: LD_VAR 0 9
24167: PUSH
24168: LD_VAR 0 3
24172: ARRAY
24173: PPUSH
24174: CALL_OW 2
24178: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24179: LD_ADDR_VAR 0 4
24183: PUSH
24184: LD_VAR 0 4
24188: PUSH
24189: LD_VAR 0 9
24193: PUSH
24194: LD_VAR 0 3
24198: ARRAY
24199: DIFF
24200: ST_TO_ADDR
// end ;
24201: GO 24110
24203: POP
24204: POP
// if p then
24205: LD_VAR 0 11
24209: IFFALSE 24234
// result := Replace ( result , 2 , p ) ;
24211: LD_ADDR_VAR 0 2
24215: PUSH
24216: LD_VAR 0 2
24220: PPUSH
24221: LD_INT 2
24223: PPUSH
24224: LD_VAR 0 11
24228: PPUSH
24229: CALL_OW 1
24233: ST_TO_ADDR
// end ; exit ;
24234: GO 25622
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
24236: LD_EXP 77
24240: PUSH
24241: LD_EXP 76
24245: PUSH
24246: LD_VAR 0 1
24250: ARRAY
24251: ARRAY
24252: NOT
24253: PUSH
24254: LD_EXP 50
24258: PUSH
24259: LD_VAR 0 1
24263: ARRAY
24264: PPUSH
24265: LD_INT 30
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PPUSH
24275: CALL_OW 72
24279: AND
24280: PUSH
24281: LD_EXP 55
24285: PUSH
24286: LD_VAR 0 1
24290: ARRAY
24291: AND
24292: IFFALSE 24900
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
24294: LD_ADDR_EXP 92
24298: PUSH
24299: LD_EXP 92
24303: PPUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: LD_INT 5
24311: PPUSH
24312: CALL_OW 1
24316: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24317: LD_ADDR_VAR 0 2
24321: PUSH
24322: LD_INT 0
24324: PUSH
24325: LD_INT 0
24327: PUSH
24328: LD_INT 0
24330: PUSH
24331: LD_INT 0
24333: PUSH
24334: EMPTY
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: ST_TO_ADDR
// if sci > 1 then
24340: LD_VAR 0 8
24344: PUSH
24345: LD_INT 1
24347: GREATER
24348: IFFALSE 24376
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
24350: LD_ADDR_VAR 0 4
24354: PUSH
24355: LD_VAR 0 4
24359: PUSH
24360: LD_VAR 0 8
24364: PUSH
24365: LD_VAR 0 8
24369: PUSH
24370: LD_INT 1
24372: ARRAY
24373: DIFF
24374: DIFF
24375: ST_TO_ADDR
// if tmp and not sci then
24376: LD_VAR 0 4
24380: PUSH
24381: LD_VAR 0 8
24385: NOT
24386: AND
24387: IFFALSE 24456
// begin sort := SortBySkill ( tmp , 4 ) ;
24389: LD_ADDR_VAR 0 9
24393: PUSH
24394: LD_VAR 0 4
24398: PPUSH
24399: LD_INT 4
24401: PPUSH
24402: CALL 88976 0 2
24406: ST_TO_ADDR
// if sort then
24407: LD_VAR 0 9
24411: IFFALSE 24427
// p := sort [ 1 ] ;
24413: LD_ADDR_VAR 0 11
24417: PUSH
24418: LD_VAR 0 9
24422: PUSH
24423: LD_INT 1
24425: ARRAY
24426: ST_TO_ADDR
// if p then
24427: LD_VAR 0 11
24431: IFFALSE 24456
// result := Replace ( result , 4 , p ) ;
24433: LD_ADDR_VAR 0 2
24437: PUSH
24438: LD_VAR 0 2
24442: PPUSH
24443: LD_INT 4
24445: PPUSH
24446: LD_VAR 0 11
24450: PPUSH
24451: CALL_OW 1
24455: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
24456: LD_ADDR_VAR 0 4
24460: PUSH
24461: LD_VAR 0 4
24465: PUSH
24466: LD_VAR 0 7
24470: DIFF
24471: ST_TO_ADDR
// if tmp and mech < 6 then
24472: LD_VAR 0 4
24476: PUSH
24477: LD_VAR 0 7
24481: PUSH
24482: LD_INT 6
24484: LESS
24485: AND
24486: IFFALSE 24674
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
24488: LD_ADDR_VAR 0 9
24492: PUSH
24493: LD_VAR 0 4
24497: PUSH
24498: LD_VAR 0 8
24502: PUSH
24503: LD_VAR 0 7
24507: UNION
24508: DIFF
24509: PPUSH
24510: LD_INT 3
24512: PPUSH
24513: CALL 88976 0 2
24517: ST_TO_ADDR
// p := [ ] ;
24518: LD_ADDR_VAR 0 11
24522: PUSH
24523: EMPTY
24524: ST_TO_ADDR
// if sort then
24525: LD_VAR 0 9
24529: IFFALSE 24645
// for i = 1 to 6 - mech do
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: DOUBLE
24537: LD_INT 1
24539: DEC
24540: ST_TO_ADDR
24541: LD_INT 6
24543: PUSH
24544: LD_VAR 0 7
24548: MINUS
24549: PUSH
24550: FOR_TO
24551: IFFALSE 24643
// begin if i = sort then
24553: LD_VAR 0 3
24557: PUSH
24558: LD_VAR 0 9
24562: EQUAL
24563: IFFALSE 24567
// break ;
24565: GO 24643
// if GetClass ( i ) = 3 then
24567: LD_VAR 0 3
24571: PPUSH
24572: CALL_OW 257
24576: PUSH
24577: LD_INT 3
24579: EQUAL
24580: IFFALSE 24584
// continue ;
24582: GO 24550
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24584: LD_ADDR_VAR 0 11
24588: PUSH
24589: LD_VAR 0 11
24593: PPUSH
24594: LD_VAR 0 11
24598: PUSH
24599: LD_INT 1
24601: PLUS
24602: PPUSH
24603: LD_VAR 0 9
24607: PUSH
24608: LD_VAR 0 3
24612: ARRAY
24613: PPUSH
24614: CALL_OW 2
24618: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24619: LD_ADDR_VAR 0 4
24623: PUSH
24624: LD_VAR 0 4
24628: PUSH
24629: LD_VAR 0 9
24633: PUSH
24634: LD_VAR 0 3
24638: ARRAY
24639: DIFF
24640: ST_TO_ADDR
// end ;
24641: GO 24550
24643: POP
24644: POP
// if p then
24645: LD_VAR 0 11
24649: IFFALSE 24674
// result := Replace ( result , 3 , p ) ;
24651: LD_ADDR_VAR 0 2
24655: PUSH
24656: LD_VAR 0 2
24660: PPUSH
24661: LD_INT 3
24663: PPUSH
24664: LD_VAR 0 11
24668: PPUSH
24669: CALL_OW 1
24673: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
24674: LD_ADDR_VAR 0 4
24678: PUSH
24679: LD_VAR 0 4
24683: PUSH
24684: LD_VAR 0 6
24688: DIFF
24689: ST_TO_ADDR
// if tmp and eng < 6 then
24690: LD_VAR 0 4
24694: PUSH
24695: LD_VAR 0 6
24699: PUSH
24700: LD_INT 6
24702: LESS
24703: AND
24704: IFFALSE 24898
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
24706: LD_ADDR_VAR 0 9
24710: PUSH
24711: LD_VAR 0 4
24715: PUSH
24716: LD_VAR 0 8
24720: PUSH
24721: LD_VAR 0 7
24725: UNION
24726: PUSH
24727: LD_VAR 0 6
24731: UNION
24732: DIFF
24733: PPUSH
24734: LD_INT 2
24736: PPUSH
24737: CALL 88976 0 2
24741: ST_TO_ADDR
// p := [ ] ;
24742: LD_ADDR_VAR 0 11
24746: PUSH
24747: EMPTY
24748: ST_TO_ADDR
// if sort then
24749: LD_VAR 0 9
24753: IFFALSE 24869
// for i = 1 to 6 - eng do
24755: LD_ADDR_VAR 0 3
24759: PUSH
24760: DOUBLE
24761: LD_INT 1
24763: DEC
24764: ST_TO_ADDR
24765: LD_INT 6
24767: PUSH
24768: LD_VAR 0 6
24772: MINUS
24773: PUSH
24774: FOR_TO
24775: IFFALSE 24867
// begin if i = sort then
24777: LD_VAR 0 3
24781: PUSH
24782: LD_VAR 0 9
24786: EQUAL
24787: IFFALSE 24791
// break ;
24789: GO 24867
// if GetClass ( i ) = 2 then
24791: LD_VAR 0 3
24795: PPUSH
24796: CALL_OW 257
24800: PUSH
24801: LD_INT 2
24803: EQUAL
24804: IFFALSE 24808
// continue ;
24806: GO 24774
// p := Insert ( p , p + 1 , sort [ i ] ) ;
24808: LD_ADDR_VAR 0 11
24812: PUSH
24813: LD_VAR 0 11
24817: PPUSH
24818: LD_VAR 0 11
24822: PUSH
24823: LD_INT 1
24825: PLUS
24826: PPUSH
24827: LD_VAR 0 9
24831: PUSH
24832: LD_VAR 0 3
24836: ARRAY
24837: PPUSH
24838: CALL_OW 2
24842: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
24843: LD_ADDR_VAR 0 4
24847: PUSH
24848: LD_VAR 0 4
24852: PUSH
24853: LD_VAR 0 9
24857: PUSH
24858: LD_VAR 0 3
24862: ARRAY
24863: DIFF
24864: ST_TO_ADDR
// end ;
24865: GO 24774
24867: POP
24868: POP
// if p then
24869: LD_VAR 0 11
24873: IFFALSE 24898
// result := Replace ( result , 2 , p ) ;
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_VAR 0 2
24884: PPUSH
24885: LD_INT 2
24887: PPUSH
24888: LD_VAR 0 11
24892: PPUSH
24893: CALL_OW 1
24897: ST_TO_ADDR
// end ; exit ;
24898: GO 25622
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
24900: LD_EXP 77
24904: PUSH
24905: LD_EXP 76
24909: PUSH
24910: LD_VAR 0 1
24914: ARRAY
24915: ARRAY
24916: NOT
24917: PUSH
24918: LD_EXP 50
24922: PUSH
24923: LD_VAR 0 1
24927: ARRAY
24928: PPUSH
24929: LD_INT 30
24931: PUSH
24932: LD_INT 3
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PPUSH
24939: CALL_OW 72
24943: AND
24944: PUSH
24945: LD_EXP 55
24949: PUSH
24950: LD_VAR 0 1
24954: ARRAY
24955: NOT
24956: AND
24957: IFFALSE 25622
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
24959: LD_ADDR_EXP 92
24963: PUSH
24964: LD_EXP 92
24968: PPUSH
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_INT 6
24976: PPUSH
24977: CALL_OW 1
24981: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
24982: LD_ADDR_VAR 0 2
24986: PUSH
24987: LD_INT 0
24989: PUSH
24990: LD_INT 0
24992: PUSH
24993: LD_INT 0
24995: PUSH
24996: LD_INT 0
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: ST_TO_ADDR
// if sci >= 1 then
25005: LD_VAR 0 8
25009: PUSH
25010: LD_INT 1
25012: GREATEREQUAL
25013: IFFALSE 25035
// tmp := tmp diff sci [ 1 ] ;
25015: LD_ADDR_VAR 0 4
25019: PUSH
25020: LD_VAR 0 4
25024: PUSH
25025: LD_VAR 0 8
25029: PUSH
25030: LD_INT 1
25032: ARRAY
25033: DIFF
25034: ST_TO_ADDR
// if tmp and not sci then
25035: LD_VAR 0 4
25039: PUSH
25040: LD_VAR 0 8
25044: NOT
25045: AND
25046: IFFALSE 25115
// begin sort := SortBySkill ( tmp , 4 ) ;
25048: LD_ADDR_VAR 0 9
25052: PUSH
25053: LD_VAR 0 4
25057: PPUSH
25058: LD_INT 4
25060: PPUSH
25061: CALL 88976 0 2
25065: ST_TO_ADDR
// if sort then
25066: LD_VAR 0 9
25070: IFFALSE 25086
// p := sort [ 1 ] ;
25072: LD_ADDR_VAR 0 11
25076: PUSH
25077: LD_VAR 0 9
25081: PUSH
25082: LD_INT 1
25084: ARRAY
25085: ST_TO_ADDR
// if p then
25086: LD_VAR 0 11
25090: IFFALSE 25115
// result := Replace ( result , 4 , p ) ;
25092: LD_ADDR_VAR 0 2
25096: PUSH
25097: LD_VAR 0 2
25101: PPUSH
25102: LD_INT 4
25104: PPUSH
25105: LD_VAR 0 11
25109: PPUSH
25110: CALL_OW 1
25114: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
25115: LD_ADDR_VAR 0 4
25119: PUSH
25120: LD_VAR 0 4
25124: PUSH
25125: LD_VAR 0 7
25129: DIFF
25130: ST_TO_ADDR
// if tmp and mech < 6 then
25131: LD_VAR 0 4
25135: PUSH
25136: LD_VAR 0 7
25140: PUSH
25141: LD_INT 6
25143: LESS
25144: AND
25145: IFFALSE 25327
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
25147: LD_ADDR_VAR 0 9
25151: PUSH
25152: LD_VAR 0 4
25156: PUSH
25157: LD_VAR 0 7
25161: DIFF
25162: PPUSH
25163: LD_INT 3
25165: PPUSH
25166: CALL 88976 0 2
25170: ST_TO_ADDR
// p := [ ] ;
25171: LD_ADDR_VAR 0 11
25175: PUSH
25176: EMPTY
25177: ST_TO_ADDR
// if sort then
25178: LD_VAR 0 9
25182: IFFALSE 25298
// for i = 1 to 6 - mech do
25184: LD_ADDR_VAR 0 3
25188: PUSH
25189: DOUBLE
25190: LD_INT 1
25192: DEC
25193: ST_TO_ADDR
25194: LD_INT 6
25196: PUSH
25197: LD_VAR 0 7
25201: MINUS
25202: PUSH
25203: FOR_TO
25204: IFFALSE 25296
// begin if i = sort then
25206: LD_VAR 0 3
25210: PUSH
25211: LD_VAR 0 9
25215: EQUAL
25216: IFFALSE 25220
// break ;
25218: GO 25296
// if GetClass ( i ) = 3 then
25220: LD_VAR 0 3
25224: PPUSH
25225: CALL_OW 257
25229: PUSH
25230: LD_INT 3
25232: EQUAL
25233: IFFALSE 25237
// continue ;
25235: GO 25203
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25237: LD_ADDR_VAR 0 11
25241: PUSH
25242: LD_VAR 0 11
25246: PPUSH
25247: LD_VAR 0 11
25251: PUSH
25252: LD_INT 1
25254: PLUS
25255: PPUSH
25256: LD_VAR 0 9
25260: PUSH
25261: LD_VAR 0 3
25265: ARRAY
25266: PPUSH
25267: CALL_OW 2
25271: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25272: LD_ADDR_VAR 0 4
25276: PUSH
25277: LD_VAR 0 4
25281: PUSH
25282: LD_VAR 0 9
25286: PUSH
25287: LD_VAR 0 3
25291: ARRAY
25292: DIFF
25293: ST_TO_ADDR
// end ;
25294: GO 25203
25296: POP
25297: POP
// if p then
25298: LD_VAR 0 11
25302: IFFALSE 25327
// result := Replace ( result , 3 , p ) ;
25304: LD_ADDR_VAR 0 2
25308: PUSH
25309: LD_VAR 0 2
25313: PPUSH
25314: LD_INT 3
25316: PPUSH
25317: LD_VAR 0 11
25321: PPUSH
25322: CALL_OW 1
25326: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
25327: LD_ADDR_VAR 0 4
25331: PUSH
25332: LD_VAR 0 4
25336: PUSH
25337: LD_VAR 0 6
25341: DIFF
25342: ST_TO_ADDR
// if tmp and eng < 4 then
25343: LD_VAR 0 4
25347: PUSH
25348: LD_VAR 0 6
25352: PUSH
25353: LD_INT 4
25355: LESS
25356: AND
25357: IFFALSE 25547
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
25359: LD_ADDR_VAR 0 9
25363: PUSH
25364: LD_VAR 0 4
25368: PUSH
25369: LD_VAR 0 7
25373: PUSH
25374: LD_VAR 0 6
25378: UNION
25379: DIFF
25380: PPUSH
25381: LD_INT 2
25383: PPUSH
25384: CALL 88976 0 2
25388: ST_TO_ADDR
// p := [ ] ;
25389: LD_ADDR_VAR 0 11
25393: PUSH
25394: EMPTY
25395: ST_TO_ADDR
// if sort then
25396: LD_VAR 0 9
25400: IFFALSE 25516
// for i = 1 to 4 - eng do
25402: LD_ADDR_VAR 0 3
25406: PUSH
25407: DOUBLE
25408: LD_INT 1
25410: DEC
25411: ST_TO_ADDR
25412: LD_INT 4
25414: PUSH
25415: LD_VAR 0 6
25419: MINUS
25420: PUSH
25421: FOR_TO
25422: IFFALSE 25514
// begin if i = sort then
25424: LD_VAR 0 3
25428: PUSH
25429: LD_VAR 0 9
25433: EQUAL
25434: IFFALSE 25438
// break ;
25436: GO 25514
// if GetClass ( i ) = 2 then
25438: LD_VAR 0 3
25442: PPUSH
25443: CALL_OW 257
25447: PUSH
25448: LD_INT 2
25450: EQUAL
25451: IFFALSE 25455
// continue ;
25453: GO 25421
// p := Insert ( p , p + 1 , sort [ i ] ) ;
25455: LD_ADDR_VAR 0 11
25459: PUSH
25460: LD_VAR 0 11
25464: PPUSH
25465: LD_VAR 0 11
25469: PUSH
25470: LD_INT 1
25472: PLUS
25473: PPUSH
25474: LD_VAR 0 9
25478: PUSH
25479: LD_VAR 0 3
25483: ARRAY
25484: PPUSH
25485: CALL_OW 2
25489: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
25490: LD_ADDR_VAR 0 4
25494: PUSH
25495: LD_VAR 0 4
25499: PUSH
25500: LD_VAR 0 9
25504: PUSH
25505: LD_VAR 0 3
25509: ARRAY
25510: DIFF
25511: ST_TO_ADDR
// end ;
25512: GO 25421
25514: POP
25515: POP
// if p then
25516: LD_VAR 0 11
25520: IFFALSE 25545
// result := Replace ( result , 2 , p ) ;
25522: LD_ADDR_VAR 0 2
25526: PUSH
25527: LD_VAR 0 2
25531: PPUSH
25532: LD_INT 2
25534: PPUSH
25535: LD_VAR 0 11
25539: PPUSH
25540: CALL_OW 1
25544: ST_TO_ADDR
// end else
25545: GO 25591
// for i = eng downto 5 do
25547: LD_ADDR_VAR 0 3
25551: PUSH
25552: DOUBLE
25553: LD_VAR 0 6
25557: INC
25558: ST_TO_ADDR
25559: LD_INT 5
25561: PUSH
25562: FOR_DOWNTO
25563: IFFALSE 25589
// tmp := tmp union eng [ i ] ;
25565: LD_ADDR_VAR 0 4
25569: PUSH
25570: LD_VAR 0 4
25574: PUSH
25575: LD_VAR 0 6
25579: PUSH
25580: LD_VAR 0 3
25584: ARRAY
25585: UNION
25586: ST_TO_ADDR
25587: GO 25562
25589: POP
25590: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
25591: LD_ADDR_VAR 0 2
25595: PUSH
25596: LD_VAR 0 2
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: LD_VAR 0 4
25608: PUSH
25609: LD_VAR 0 5
25613: DIFF
25614: PPUSH
25615: CALL_OW 1
25619: ST_TO_ADDR
// exit ;
25620: GO 25622
// end ; end ;
25622: LD_VAR 0 2
25626: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
25627: LD_INT 0
25629: PPUSH
25630: PPUSH
25631: PPUSH
// if not mc_bases then
25632: LD_EXP 50
25636: NOT
25637: IFFALSE 25641
// exit ;
25639: GO 25747
// for i = 1 to mc_bases do
25641: LD_ADDR_VAR 0 2
25645: PUSH
25646: DOUBLE
25647: LD_INT 1
25649: DEC
25650: ST_TO_ADDR
25651: LD_EXP 50
25655: PUSH
25656: FOR_TO
25657: IFFALSE 25738
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
25659: LD_ADDR_VAR 0 3
25663: PUSH
25664: LD_EXP 50
25668: PUSH
25669: LD_VAR 0 2
25673: ARRAY
25674: PPUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: LD_INT 3
25687: PUSH
25688: LD_INT 24
25690: PUSH
25691: LD_INT 1000
25693: PUSH
25694: EMPTY
25695: LIST
25696: LIST
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: EMPTY
25703: LIST
25704: LIST
25705: PPUSH
25706: CALL_OW 72
25710: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
25711: LD_ADDR_EXP 51
25715: PUSH
25716: LD_EXP 51
25720: PPUSH
25721: LD_VAR 0 2
25725: PPUSH
25726: LD_VAR 0 3
25730: PPUSH
25731: CALL_OW 1
25735: ST_TO_ADDR
// end ;
25736: GO 25656
25738: POP
25739: POP
// RaiseSailEvent ( 101 ) ;
25740: LD_INT 101
25742: PPUSH
25743: CALL_OW 427
// end ;
25747: LD_VAR 0 1
25751: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
25752: LD_INT 0
25754: PPUSH
25755: PPUSH
25756: PPUSH
25757: PPUSH
25758: PPUSH
25759: PPUSH
25760: PPUSH
// if not mc_bases then
25761: LD_EXP 50
25765: NOT
25766: IFFALSE 25770
// exit ;
25768: GO 26343
// for i = 1 to mc_bases do
25770: LD_ADDR_VAR 0 2
25774: PUSH
25775: DOUBLE
25776: LD_INT 1
25778: DEC
25779: ST_TO_ADDR
25780: LD_EXP 50
25784: PUSH
25785: FOR_TO
25786: IFFALSE 26334
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 800 ] ] ] ] ) ;
25788: LD_ADDR_VAR 0 5
25792: PUSH
25793: LD_EXP 50
25797: PUSH
25798: LD_VAR 0 2
25802: ARRAY
25803: PUSH
25804: LD_EXP 79
25808: PUSH
25809: LD_VAR 0 2
25813: ARRAY
25814: UNION
25815: PPUSH
25816: LD_INT 21
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 1
25828: PUSH
25829: LD_INT 3
25831: PUSH
25832: LD_INT 54
25834: PUSH
25835: EMPTY
25836: LIST
25837: PUSH
25838: EMPTY
25839: LIST
25840: LIST
25841: PUSH
25842: LD_INT 3
25844: PUSH
25845: LD_INT 24
25847: PUSH
25848: LD_INT 800
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 72
25872: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
25873: LD_ADDR_VAR 0 6
25877: PUSH
25878: LD_EXP 50
25882: PUSH
25883: LD_VAR 0 2
25887: ARRAY
25888: PPUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: PUSH
25902: LD_INT 3
25904: PUSH
25905: LD_INT 54
25907: PUSH
25908: EMPTY
25909: LIST
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: LD_INT 24
25920: PUSH
25921: LD_INT 250
25923: PUSH
25924: EMPTY
25925: LIST
25926: LIST
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: LIST
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PPUSH
25941: CALL_OW 72
25945: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
25946: LD_ADDR_VAR 0 7
25950: PUSH
25951: LD_VAR 0 5
25955: PUSH
25956: LD_VAR 0 6
25960: DIFF
25961: ST_TO_ADDR
// if not need_heal_1 then
25962: LD_VAR 0 6
25966: NOT
25967: IFFALSE 26000
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
25969: LD_ADDR_EXP 53
25973: PUSH
25974: LD_EXP 53
25978: PPUSH
25979: LD_VAR 0 2
25983: PUSH
25984: LD_INT 1
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PPUSH
25991: EMPTY
25992: PPUSH
25993: CALL 54718 0 3
25997: ST_TO_ADDR
25998: GO 26070
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
26000: LD_ADDR_EXP 53
26004: PUSH
26005: LD_EXP 53
26009: PPUSH
26010: LD_VAR 0 2
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PPUSH
26022: LD_EXP 53
26026: PUSH
26027: LD_VAR 0 2
26031: ARRAY
26032: PUSH
26033: LD_INT 1
26035: ARRAY
26036: PPUSH
26037: LD_INT 3
26039: PUSH
26040: LD_INT 24
26042: PUSH
26043: LD_INT 1000
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PPUSH
26054: CALL_OW 72
26058: PUSH
26059: LD_VAR 0 6
26063: UNION
26064: PPUSH
26065: CALL 54718 0 3
26069: ST_TO_ADDR
// if not need_heal_2 then
26070: LD_VAR 0 7
26074: NOT
26075: IFFALSE 26108
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
26077: LD_ADDR_EXP 53
26081: PUSH
26082: LD_EXP 53
26086: PPUSH
26087: LD_VAR 0 2
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PPUSH
26099: EMPTY
26100: PPUSH
26101: CALL 54718 0 3
26105: ST_TO_ADDR
26106: GO 26140
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
26108: LD_ADDR_EXP 53
26112: PUSH
26113: LD_EXP 53
26117: PPUSH
26118: LD_VAR 0 2
26122: PUSH
26123: LD_INT 2
26125: PUSH
26126: EMPTY
26127: LIST
26128: LIST
26129: PPUSH
26130: LD_VAR 0 7
26134: PPUSH
26135: CALL 54718 0 3
26139: ST_TO_ADDR
// if need_heal_2 then
26140: LD_VAR 0 7
26144: IFFALSE 26316
// for j in need_heal_2 do
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_VAR 0 7
26155: PUSH
26156: FOR_IN
26157: IFFALSE 26314
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
26159: LD_ADDR_VAR 0 5
26163: PUSH
26164: LD_EXP 50
26168: PUSH
26169: LD_VAR 0 2
26173: ARRAY
26174: PPUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 30
26180: PUSH
26181: LD_INT 6
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: PUSH
26188: LD_INT 30
26190: PUSH
26191: LD_INT 7
26193: PUSH
26194: EMPTY
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 30
26200: PUSH
26201: LD_INT 8
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 30
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 30
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 25
26230: PUSH
26231: LD_INT 4
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: PPUSH
26247: CALL_OW 72
26251: ST_TO_ADDR
// if tmp then
26252: LD_VAR 0 5
26256: IFFALSE 26312
// begin k := NearestUnitToUnit ( tmp , j ) ;
26258: LD_ADDR_VAR 0 4
26262: PUSH
26263: LD_VAR 0 5
26267: PPUSH
26268: LD_VAR 0 3
26272: PPUSH
26273: CALL_OW 74
26277: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
26278: LD_VAR 0 3
26282: PPUSH
26283: LD_VAR 0 4
26287: PPUSH
26288: CALL_OW 296
26292: PUSH
26293: LD_INT 7
26295: GREATER
26296: IFFALSE 26312
// ComMoveUnit ( j , k ) ;
26298: LD_VAR 0 3
26302: PPUSH
26303: LD_VAR 0 4
26307: PPUSH
26308: CALL_OW 112
// end ; end ;
26312: GO 26156
26314: POP
26315: POP
// if not need_heal_1 and not need_heal_2 then
26316: LD_VAR 0 6
26320: NOT
26321: PUSH
26322: LD_VAR 0 7
26326: NOT
26327: AND
26328: IFFALSE 26332
// continue ;
26330: GO 25785
// end ;
26332: GO 25785
26334: POP
26335: POP
// RaiseSailEvent ( 102 ) ;
26336: LD_INT 102
26338: PPUSH
26339: CALL_OW 427
// end ;
26343: LD_VAR 0 1
26347: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
26348: LD_INT 0
26350: PPUSH
26351: PPUSH
26352: PPUSH
26353: PPUSH
26354: PPUSH
26355: PPUSH
26356: PPUSH
26357: PPUSH
// if not mc_bases then
26358: LD_EXP 50
26362: NOT
26363: IFFALSE 26367
// exit ;
26365: GO 27207
// for i = 1 to mc_bases do
26367: LD_ADDR_VAR 0 2
26371: PUSH
26372: DOUBLE
26373: LD_INT 1
26375: DEC
26376: ST_TO_ADDR
26377: LD_EXP 50
26381: PUSH
26382: FOR_TO
26383: IFFALSE 27205
// begin if not mc_building_need_repair [ i ] then
26385: LD_EXP 51
26389: PUSH
26390: LD_VAR 0 2
26394: ARRAY
26395: NOT
26396: IFFALSE 26570
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ] ) ;
26398: LD_ADDR_VAR 0 6
26402: PUSH
26403: LD_EXP 69
26407: PUSH
26408: LD_VAR 0 2
26412: ARRAY
26413: PPUSH
26414: LD_INT 3
26416: PUSH
26417: LD_INT 24
26419: PUSH
26420: LD_INT 1000
26422: PUSH
26423: EMPTY
26424: LIST
26425: LIST
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: PUSH
26431: LD_INT 2
26433: PUSH
26434: LD_INT 34
26436: PUSH
26437: LD_INT 13
26439: PUSH
26440: EMPTY
26441: LIST
26442: LIST
26443: PUSH
26444: LD_INT 34
26446: PUSH
26447: LD_INT 52
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: LIST
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PPUSH
26463: CALL_OW 72
26467: ST_TO_ADDR
// if cranes then
26468: LD_VAR 0 6
26472: IFFALSE 26534
// for j in cranes do
26474: LD_ADDR_VAR 0 3
26478: PUSH
26479: LD_VAR 0 6
26483: PUSH
26484: FOR_IN
26485: IFFALSE 26532
// if not IsInArea ( j , mc_parking [ i ] ) then
26487: LD_VAR 0 3
26491: PPUSH
26492: LD_EXP 74
26496: PUSH
26497: LD_VAR 0 2
26501: ARRAY
26502: PPUSH
26503: CALL_OW 308
26507: NOT
26508: IFFALSE 26530
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26510: LD_VAR 0 3
26514: PPUSH
26515: LD_EXP 74
26519: PUSH
26520: LD_VAR 0 2
26524: ARRAY
26525: PPUSH
26526: CALL_OW 113
26530: GO 26484
26532: POP
26533: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
26534: LD_ADDR_EXP 52
26538: PUSH
26539: LD_EXP 52
26543: PPUSH
26544: LD_VAR 0 2
26548: PPUSH
26549: EMPTY
26550: PPUSH
26551: CALL_OW 1
26555: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
26556: LD_VAR 0 2
26560: PPUSH
26561: LD_INT 101
26563: PPUSH
26564: CALL 21460 0 2
// continue ;
26568: GO 26382
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
26570: LD_ADDR_EXP 56
26574: PUSH
26575: LD_EXP 56
26579: PPUSH
26580: LD_VAR 0 2
26584: PPUSH
26585: EMPTY
26586: PPUSH
26587: CALL_OW 1
26591: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
26592: LD_VAR 0 2
26596: PPUSH
26597: LD_INT 103
26599: PPUSH
26600: CALL 21460 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
26604: LD_ADDR_VAR 0 5
26608: PUSH
26609: LD_EXP 50
26613: PUSH
26614: LD_VAR 0 2
26618: ARRAY
26619: PUSH
26620: LD_EXP 79
26624: PUSH
26625: LD_VAR 0 2
26629: ARRAY
26630: UNION
26631: PPUSH
26632: LD_INT 2
26634: PUSH
26635: LD_INT 25
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 25
26647: PUSH
26648: LD_INT 16
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: LIST
26659: PUSH
26660: EMPTY
26661: LIST
26662: PPUSH
26663: CALL_OW 72
26667: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] ] ) ;
26668: LD_ADDR_VAR 0 6
26672: PUSH
26673: LD_EXP 69
26677: PUSH
26678: LD_VAR 0 2
26682: ARRAY
26683: PPUSH
26684: LD_INT 2
26686: PUSH
26687: LD_INT 34
26689: PUSH
26690: LD_INT 13
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 34
26699: PUSH
26700: LD_INT 52
26702: PUSH
26703: EMPTY
26704: LIST
26705: LIST
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: PPUSH
26712: CALL_OW 72
26716: ST_TO_ADDR
// if cranes then
26717: LD_VAR 0 6
26721: IFFALSE 26857
// begin for j in cranes do
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_VAR 0 6
26732: PUSH
26733: FOR_IN
26734: IFFALSE 26855
// if GetLives ( j ) >= 500 and not HasTask ( j ) then
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 256
26745: PUSH
26746: LD_INT 500
26748: GREATEREQUAL
26749: PUSH
26750: LD_VAR 0 3
26754: PPUSH
26755: CALL_OW 314
26759: NOT
26760: AND
26761: IFFALSE 26795
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
26763: LD_VAR 0 3
26767: PPUSH
26768: LD_EXP 51
26772: PUSH
26773: LD_VAR 0 2
26777: ARRAY
26778: PPUSH
26779: LD_VAR 0 3
26783: PPUSH
26784: CALL_OW 74
26788: PPUSH
26789: CALL_OW 130
26793: GO 26853
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
26795: LD_VAR 0 3
26799: PPUSH
26800: CALL_OW 256
26804: PUSH
26805: LD_INT 500
26807: LESS
26808: PUSH
26809: LD_VAR 0 3
26813: PPUSH
26814: LD_EXP 74
26818: PUSH
26819: LD_VAR 0 2
26823: ARRAY
26824: PPUSH
26825: CALL_OW 308
26829: NOT
26830: AND
26831: IFFALSE 26853
// ComMoveToArea ( j , mc_parking [ i ] ) ;
26833: LD_VAR 0 3
26837: PPUSH
26838: LD_EXP 74
26842: PUSH
26843: LD_VAR 0 2
26847: ARRAY
26848: PPUSH
26849: CALL_OW 113
26853: GO 26733
26855: POP
26856: POP
// end ; if not tmp then
26857: LD_VAR 0 5
26861: NOT
26862: IFFALSE 26866
// continue ;
26864: GO 26382
// for j in tmp do
26866: LD_ADDR_VAR 0 3
26870: PUSH
26871: LD_VAR 0 5
26875: PUSH
26876: FOR_IN
26877: IFFALSE 27201
// begin if mc_need_heal [ i ] then
26879: LD_EXP 53
26883: PUSH
26884: LD_VAR 0 2
26888: ARRAY
26889: IFFALSE 26937
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
26891: LD_VAR 0 3
26895: PUSH
26896: LD_EXP 53
26900: PUSH
26901: LD_VAR 0 2
26905: ARRAY
26906: PUSH
26907: LD_INT 1
26909: ARRAY
26910: IN
26911: PUSH
26912: LD_VAR 0 3
26916: PUSH
26917: LD_EXP 53
26921: PUSH
26922: LD_VAR 0 2
26926: ARRAY
26927: PUSH
26928: LD_INT 2
26930: ARRAY
26931: IN
26932: OR
26933: IFFALSE 26937
// continue ;
26935: GO 26876
// if IsInUnit ( j ) then
26937: LD_VAR 0 3
26941: PPUSH
26942: CALL_OW 310
26946: IFFALSE 26957
// ComExitBuilding ( j ) ;
26948: LD_VAR 0 3
26952: PPUSH
26953: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
26957: LD_VAR 0 3
26961: PUSH
26962: LD_EXP 52
26966: PUSH
26967: LD_VAR 0 2
26971: ARRAY
26972: IN
26973: NOT
26974: IFFALSE 27032
// begin SetTag ( j , 101 ) ;
26976: LD_VAR 0 3
26980: PPUSH
26981: LD_INT 101
26983: PPUSH
26984: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
26988: LD_ADDR_EXP 52
26992: PUSH
26993: LD_EXP 52
26997: PPUSH
26998: LD_VAR 0 2
27002: PUSH
27003: LD_EXP 52
27007: PUSH
27008: LD_VAR 0 2
27012: ARRAY
27013: PUSH
27014: LD_INT 1
27016: PLUS
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PPUSH
27022: LD_VAR 0 3
27026: PPUSH
27027: CALL 54718 0 3
27031: ST_TO_ADDR
// end ; wait ( 1 ) ;
27032: LD_INT 1
27034: PPUSH
27035: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
27039: LD_ADDR_VAR 0 7
27043: PUSH
27044: LD_EXP 51
27048: PUSH
27049: LD_VAR 0 2
27053: ARRAY
27054: ST_TO_ADDR
// if mc_scan [ i ] then
27055: LD_EXP 73
27059: PUSH
27060: LD_VAR 0 2
27064: ARRAY
27065: IFFALSE 27134
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ] ) ;
27067: LD_ADDR_VAR 0 7
27071: PUSH
27072: LD_EXP 51
27076: PUSH
27077: LD_VAR 0 2
27081: ARRAY
27082: PPUSH
27083: LD_INT 3
27085: PUSH
27086: LD_INT 2
27088: PUSH
27089: LD_INT 30
27091: PUSH
27092: LD_INT 32
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 30
27101: PUSH
27102: LD_INT 33
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 30
27111: PUSH
27112: LD_INT 31
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: EMPTY
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: PUSH
27125: EMPTY
27126: LIST
27127: LIST
27128: PPUSH
27129: CALL_OW 72
27133: ST_TO_ADDR
// if not to_repair_tmp then
27134: LD_VAR 0 7
27138: NOT
27139: IFFALSE 27143
// continue ;
27141: GO 26876
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
27143: LD_ADDR_VAR 0 8
27147: PUSH
27148: LD_VAR 0 7
27152: PPUSH
27153: LD_VAR 0 3
27157: PPUSH
27158: CALL_OW 74
27162: ST_TO_ADDR
// if DangerAtRange ( to_repair , 14 ) [ 4 ] < 5 then
27163: LD_VAR 0 8
27167: PPUSH
27168: LD_INT 14
27170: PPUSH
27171: CALL 57311 0 2
27175: PUSH
27176: LD_INT 4
27178: ARRAY
27179: PUSH
27180: LD_INT 5
27182: LESS
27183: IFFALSE 27199
// ComRepairBuilding ( j , to_repair ) ;
27185: LD_VAR 0 3
27189: PPUSH
27190: LD_VAR 0 8
27194: PPUSH
27195: CALL_OW 130
// end ;
27199: GO 26876
27201: POP
27202: POP
// end ;
27203: GO 26382
27205: POP
27206: POP
// end ;
27207: LD_VAR 0 1
27211: RET
// export function MC_Heal ; var i , j , tmp ; begin
27212: LD_INT 0
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
// if not mc_bases then
27218: LD_EXP 50
27222: NOT
27223: IFFALSE 27227
// exit ;
27225: GO 27629
// for i = 1 to mc_bases do
27227: LD_ADDR_VAR 0 2
27231: PUSH
27232: DOUBLE
27233: LD_INT 1
27235: DEC
27236: ST_TO_ADDR
27237: LD_EXP 50
27241: PUSH
27242: FOR_TO
27243: IFFALSE 27627
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
27245: LD_EXP 53
27249: PUSH
27250: LD_VAR 0 2
27254: ARRAY
27255: PUSH
27256: LD_INT 1
27258: ARRAY
27259: NOT
27260: PUSH
27261: LD_EXP 53
27265: PUSH
27266: LD_VAR 0 2
27270: ARRAY
27271: PUSH
27272: LD_INT 2
27274: ARRAY
27275: NOT
27276: AND
27277: IFFALSE 27315
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
27279: LD_ADDR_EXP 54
27283: PUSH
27284: LD_EXP 54
27288: PPUSH
27289: LD_VAR 0 2
27293: PPUSH
27294: EMPTY
27295: PPUSH
27296: CALL_OW 1
27300: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
27301: LD_VAR 0 2
27305: PPUSH
27306: LD_INT 102
27308: PPUSH
27309: CALL 21460 0 2
// continue ;
27313: GO 27242
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
27315: LD_ADDR_VAR 0 4
27319: PUSH
27320: LD_EXP 50
27324: PUSH
27325: LD_VAR 0 2
27329: ARRAY
27330: PPUSH
27331: LD_INT 25
27333: PUSH
27334: LD_INT 4
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PPUSH
27341: CALL_OW 72
27345: ST_TO_ADDR
// if not tmp then
27346: LD_VAR 0 4
27350: NOT
27351: IFFALSE 27355
// continue ;
27353: GO 27242
// if mc_taming [ i ] then
27355: LD_EXP 81
27359: PUSH
27360: LD_VAR 0 2
27364: ARRAY
27365: IFFALSE 27389
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
27367: LD_ADDR_EXP 81
27371: PUSH
27372: LD_EXP 81
27376: PPUSH
27377: LD_VAR 0 2
27381: PPUSH
27382: EMPTY
27383: PPUSH
27384: CALL_OW 1
27388: ST_TO_ADDR
// for j in tmp do
27389: LD_ADDR_VAR 0 3
27393: PUSH
27394: LD_VAR 0 4
27398: PUSH
27399: FOR_IN
27400: IFFALSE 27623
// begin if IsInUnit ( j ) then
27402: LD_VAR 0 3
27406: PPUSH
27407: CALL_OW 310
27411: IFFALSE 27422
// ComExitBuilding ( j ) ;
27413: LD_VAR 0 3
27417: PPUSH
27418: CALL_OW 122
// if not j in mc_healers [ i ] then
27422: LD_VAR 0 3
27426: PUSH
27427: LD_EXP 54
27431: PUSH
27432: LD_VAR 0 2
27436: ARRAY
27437: IN
27438: NOT
27439: IFFALSE 27485
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
27441: LD_ADDR_EXP 54
27445: PUSH
27446: LD_EXP 54
27450: PPUSH
27451: LD_VAR 0 2
27455: PUSH
27456: LD_EXP 54
27460: PUSH
27461: LD_VAR 0 2
27465: ARRAY
27466: PUSH
27467: LD_INT 1
27469: PLUS
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PPUSH
27475: LD_VAR 0 3
27479: PPUSH
27480: CALL 54718 0 3
27484: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
27485: LD_VAR 0 3
27489: PPUSH
27490: CALL_OW 110
27494: PUSH
27495: LD_INT 102
27497: NONEQUAL
27498: IFFALSE 27512
// SetTag ( j , 102 ) ;
27500: LD_VAR 0 3
27504: PPUSH
27505: LD_INT 102
27507: PPUSH
27508: CALL_OW 109
// Wait ( 3 ) ;
27512: LD_INT 3
27514: PPUSH
27515: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
27519: LD_EXP 53
27523: PUSH
27524: LD_VAR 0 2
27528: ARRAY
27529: PUSH
27530: LD_INT 1
27532: ARRAY
27533: IFFALSE 27565
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
27535: LD_VAR 0 3
27539: PPUSH
27540: LD_EXP 53
27544: PUSH
27545: LD_VAR 0 2
27549: ARRAY
27550: PUSH
27551: LD_INT 1
27553: ARRAY
27554: PUSH
27555: LD_INT 1
27557: ARRAY
27558: PPUSH
27559: CALL_OW 128
27563: GO 27621
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
27565: LD_VAR 0 3
27569: PPUSH
27570: CALL_OW 314
27574: NOT
27575: PUSH
27576: LD_EXP 53
27580: PUSH
27581: LD_VAR 0 2
27585: ARRAY
27586: PUSH
27587: LD_INT 2
27589: ARRAY
27590: AND
27591: IFFALSE 27621
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
27593: LD_VAR 0 3
27597: PPUSH
27598: LD_EXP 53
27602: PUSH
27603: LD_VAR 0 2
27607: ARRAY
27608: PUSH
27609: LD_INT 2
27611: ARRAY
27612: PUSH
27613: LD_INT 1
27615: ARRAY
27616: PPUSH
27617: CALL_OW 128
// end ;
27621: GO 27399
27623: POP
27624: POP
// end ;
27625: GO 27242
27627: POP
27628: POP
// end ;
27629: LD_VAR 0 1
27633: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
27634: LD_INT 0
27636: PPUSH
27637: PPUSH
27638: PPUSH
27639: PPUSH
27640: PPUSH
// if not mc_bases then
27641: LD_EXP 50
27645: NOT
27646: IFFALSE 27650
// exit ;
27648: GO 28793
// for i = 1 to mc_bases do
27650: LD_ADDR_VAR 0 2
27654: PUSH
27655: DOUBLE
27656: LD_INT 1
27658: DEC
27659: ST_TO_ADDR
27660: LD_EXP 50
27664: PUSH
27665: FOR_TO
27666: IFFALSE 28791
// begin if mc_scan [ i ] then
27668: LD_EXP 73
27672: PUSH
27673: LD_VAR 0 2
27677: ARRAY
27678: IFFALSE 27682
// continue ;
27680: GO 27665
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
27682: LD_EXP 55
27686: PUSH
27687: LD_VAR 0 2
27691: ARRAY
27692: NOT
27693: PUSH
27694: LD_EXP 57
27698: PUSH
27699: LD_VAR 0 2
27703: ARRAY
27704: NOT
27705: AND
27706: PUSH
27707: LD_EXP 56
27711: PUSH
27712: LD_VAR 0 2
27716: ARRAY
27717: AND
27718: IFFALSE 27756
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
27720: LD_ADDR_EXP 56
27724: PUSH
27725: LD_EXP 56
27729: PPUSH
27730: LD_VAR 0 2
27734: PPUSH
27735: EMPTY
27736: PPUSH
27737: CALL_OW 1
27741: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
27742: LD_VAR 0 2
27746: PPUSH
27747: LD_INT 103
27749: PPUSH
27750: CALL 21460 0 2
// continue ;
27754: GO 27665
// end ; if mc_construct_list [ i ] then
27756: LD_EXP 57
27760: PUSH
27761: LD_VAR 0 2
27765: ARRAY
27766: IFFALSE 27986
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
27768: LD_ADDR_VAR 0 4
27772: PUSH
27773: LD_EXP 50
27777: PUSH
27778: LD_VAR 0 2
27782: ARRAY
27783: PPUSH
27784: LD_INT 25
27786: PUSH
27787: LD_INT 2
27789: PUSH
27790: EMPTY
27791: LIST
27792: LIST
27793: PPUSH
27794: CALL_OW 72
27798: PUSH
27799: LD_EXP 52
27803: PUSH
27804: LD_VAR 0 2
27808: ARRAY
27809: DIFF
27810: ST_TO_ADDR
// if not tmp then
27811: LD_VAR 0 4
27815: NOT
27816: IFFALSE 27820
// continue ;
27818: GO 27665
// for j in tmp do
27820: LD_ADDR_VAR 0 3
27824: PUSH
27825: LD_VAR 0 4
27829: PUSH
27830: FOR_IN
27831: IFFALSE 27982
// begin if not mc_builders [ i ] then
27833: LD_EXP 56
27837: PUSH
27838: LD_VAR 0 2
27842: ARRAY
27843: NOT
27844: IFFALSE 27902
// begin SetTag ( j , 103 ) ;
27846: LD_VAR 0 3
27850: PPUSH
27851: LD_INT 103
27853: PPUSH
27854: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
27858: LD_ADDR_EXP 56
27862: PUSH
27863: LD_EXP 56
27867: PPUSH
27868: LD_VAR 0 2
27872: PUSH
27873: LD_EXP 56
27877: PUSH
27878: LD_VAR 0 2
27882: ARRAY
27883: PUSH
27884: LD_INT 1
27886: PLUS
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PPUSH
27892: LD_VAR 0 3
27896: PPUSH
27897: CALL 54718 0 3
27901: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 310
27911: IFFALSE 27922
// ComExitBuilding ( j ) ;
27913: LD_VAR 0 3
27917: PPUSH
27918: CALL_OW 122
// wait ( 3 ) ;
27922: LD_INT 3
27924: PPUSH
27925: CALL_OW 67
// if not mc_construct_list [ i ] then
27929: LD_EXP 57
27933: PUSH
27934: LD_VAR 0 2
27938: ARRAY
27939: NOT
27940: IFFALSE 27944
// break ;
27942: GO 27982
// if not HasTask ( j ) then
27944: LD_VAR 0 3
27948: PPUSH
27949: CALL_OW 314
27953: NOT
27954: IFFALSE 27980
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
27956: LD_VAR 0 3
27960: PPUSH
27961: LD_EXP 57
27965: PUSH
27966: LD_VAR 0 2
27970: ARRAY
27971: PUSH
27972: LD_INT 1
27974: ARRAY
27975: PPUSH
27976: CALL 57569 0 2
// end ;
27980: GO 27830
27982: POP
27983: POP
// end else
27984: GO 28789
// if mc_build_list [ i ] then
27986: LD_EXP 55
27990: PUSH
27991: LD_VAR 0 2
27995: ARRAY
27996: IFFALSE 28789
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
27998: LD_ADDR_VAR 0 5
28002: PUSH
28003: LD_EXP 50
28007: PUSH
28008: LD_VAR 0 2
28012: ARRAY
28013: PPUSH
28014: LD_INT 2
28016: PUSH
28017: LD_INT 30
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 30
28029: PUSH
28030: LD_INT 1
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: PPUSH
28042: CALL_OW 72
28046: ST_TO_ADDR
// if depot then
28047: LD_VAR 0 5
28051: IFFALSE 28069
// depot := depot [ 1 ] else
28053: LD_ADDR_VAR 0 5
28057: PUSH
28058: LD_VAR 0 5
28062: PUSH
28063: LD_INT 1
28065: ARRAY
28066: ST_TO_ADDR
28067: GO 28077
// depot := 0 ;
28069: LD_ADDR_VAR 0 5
28073: PUSH
28074: LD_INT 0
28076: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
28077: LD_EXP 55
28081: PUSH
28082: LD_VAR 0 2
28086: ARRAY
28087: PUSH
28088: LD_INT 1
28090: ARRAY
28091: PUSH
28092: LD_INT 1
28094: ARRAY
28095: PPUSH
28096: CALL 57399 0 1
28100: PUSH
28101: LD_EXP 50
28105: PUSH
28106: LD_VAR 0 2
28110: ARRAY
28111: PPUSH
28112: LD_INT 2
28114: PUSH
28115: LD_INT 30
28117: PUSH
28118: LD_INT 2
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: PUSH
28125: LD_INT 30
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: EMPTY
28132: LIST
28133: LIST
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: LIST
28139: PPUSH
28140: CALL_OW 72
28144: NOT
28145: AND
28146: IFFALSE 28251
// begin for j = 1 to mc_build_list [ i ] do
28148: LD_ADDR_VAR 0 3
28152: PUSH
28153: DOUBLE
28154: LD_INT 1
28156: DEC
28157: ST_TO_ADDR
28158: LD_EXP 55
28162: PUSH
28163: LD_VAR 0 2
28167: ARRAY
28168: PUSH
28169: FOR_TO
28170: IFFALSE 28249
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
28172: LD_EXP 55
28176: PUSH
28177: LD_VAR 0 2
28181: ARRAY
28182: PUSH
28183: LD_VAR 0 3
28187: ARRAY
28188: PUSH
28189: LD_INT 1
28191: ARRAY
28192: PUSH
28193: LD_INT 2
28195: EQUAL
28196: IFFALSE 28247
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
28198: LD_ADDR_EXP 55
28202: PUSH
28203: LD_EXP 55
28207: PPUSH
28208: LD_VAR 0 2
28212: PPUSH
28213: LD_EXP 55
28217: PUSH
28218: LD_VAR 0 2
28222: ARRAY
28223: PPUSH
28224: LD_VAR 0 3
28228: PPUSH
28229: LD_INT 1
28231: PPUSH
28232: LD_INT 0
28234: PPUSH
28235: CALL 54136 0 4
28239: PPUSH
28240: CALL_OW 1
28244: ST_TO_ADDR
// break ;
28245: GO 28249
// end ;
28247: GO 28169
28249: POP
28250: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
28251: LD_EXP 55
28255: PUSH
28256: LD_VAR 0 2
28260: ARRAY
28261: PUSH
28262: LD_INT 1
28264: ARRAY
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PUSH
28270: LD_INT 0
28272: EQUAL
28273: PUSH
28274: LD_VAR 0 5
28278: PUSH
28279: LD_VAR 0 5
28283: PPUSH
28284: LD_EXP 55
28288: PUSH
28289: LD_VAR 0 2
28293: ARRAY
28294: PUSH
28295: LD_INT 1
28297: ARRAY
28298: PUSH
28299: LD_INT 1
28301: ARRAY
28302: PPUSH
28303: LD_EXP 55
28307: PUSH
28308: LD_VAR 0 2
28312: ARRAY
28313: PUSH
28314: LD_INT 1
28316: ARRAY
28317: PUSH
28318: LD_INT 2
28320: ARRAY
28321: PPUSH
28322: LD_EXP 55
28326: PUSH
28327: LD_VAR 0 2
28331: ARRAY
28332: PUSH
28333: LD_INT 1
28335: ARRAY
28336: PUSH
28337: LD_INT 3
28339: ARRAY
28340: PPUSH
28341: LD_EXP 55
28345: PUSH
28346: LD_VAR 0 2
28350: ARRAY
28351: PUSH
28352: LD_INT 1
28354: ARRAY
28355: PUSH
28356: LD_INT 4
28358: ARRAY
28359: PPUSH
28360: CALL 62133 0 5
28364: AND
28365: OR
28366: IFFALSE 28647
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
28368: LD_ADDR_VAR 0 4
28372: PUSH
28373: LD_EXP 50
28377: PUSH
28378: LD_VAR 0 2
28382: ARRAY
28383: PPUSH
28384: LD_INT 25
28386: PUSH
28387: LD_INT 2
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PPUSH
28394: CALL_OW 72
28398: PUSH
28399: LD_EXP 52
28403: PUSH
28404: LD_VAR 0 2
28408: ARRAY
28409: DIFF
28410: ST_TO_ADDR
// if not tmp then
28411: LD_VAR 0 4
28415: NOT
28416: IFFALSE 28420
// continue ;
28418: GO 27665
// for j in tmp do
28420: LD_ADDR_VAR 0 3
28424: PUSH
28425: LD_VAR 0 4
28429: PUSH
28430: FOR_IN
28431: IFFALSE 28643
// begin if not mc_builders [ i ] then
28433: LD_EXP 56
28437: PUSH
28438: LD_VAR 0 2
28442: ARRAY
28443: NOT
28444: IFFALSE 28502
// begin SetTag ( j , 103 ) ;
28446: LD_VAR 0 3
28450: PPUSH
28451: LD_INT 103
28453: PPUSH
28454: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
28458: LD_ADDR_EXP 56
28462: PUSH
28463: LD_EXP 56
28467: PPUSH
28468: LD_VAR 0 2
28472: PUSH
28473: LD_EXP 56
28477: PUSH
28478: LD_VAR 0 2
28482: ARRAY
28483: PUSH
28484: LD_INT 1
28486: PLUS
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PPUSH
28492: LD_VAR 0 3
28496: PPUSH
28497: CALL 54718 0 3
28501: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
28502: LD_VAR 0 3
28506: PPUSH
28507: CALL_OW 310
28511: IFFALSE 28522
// ComExitBuilding ( j ) ;
28513: LD_VAR 0 3
28517: PPUSH
28518: CALL_OW 122
// wait ( 3 ) ;
28522: LD_INT 3
28524: PPUSH
28525: CALL_OW 67
// if not mc_build_list [ i ] then
28529: LD_EXP 55
28533: PUSH
28534: LD_VAR 0 2
28538: ARRAY
28539: NOT
28540: IFFALSE 28544
// break ;
28542: GO 28643
// if not HasTask ( j ) then
28544: LD_VAR 0 3
28548: PPUSH
28549: CALL_OW 314
28553: NOT
28554: IFFALSE 28641
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
28556: LD_VAR 0 3
28560: PPUSH
28561: LD_EXP 55
28565: PUSH
28566: LD_VAR 0 2
28570: ARRAY
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: PUSH
28576: LD_INT 1
28578: ARRAY
28579: PPUSH
28580: LD_EXP 55
28584: PUSH
28585: LD_VAR 0 2
28589: ARRAY
28590: PUSH
28591: LD_INT 1
28593: ARRAY
28594: PUSH
28595: LD_INT 2
28597: ARRAY
28598: PPUSH
28599: LD_EXP 55
28603: PUSH
28604: LD_VAR 0 2
28608: ARRAY
28609: PUSH
28610: LD_INT 1
28612: ARRAY
28613: PUSH
28614: LD_INT 3
28616: ARRAY
28617: PPUSH
28618: LD_EXP 55
28622: PUSH
28623: LD_VAR 0 2
28627: ARRAY
28628: PUSH
28629: LD_INT 1
28631: ARRAY
28632: PUSH
28633: LD_INT 4
28635: ARRAY
28636: PPUSH
28637: CALL_OW 145
// end ;
28641: GO 28430
28643: POP
28644: POP
// end else
28645: GO 28789
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
28647: LD_EXP 50
28651: PUSH
28652: LD_VAR 0 2
28656: ARRAY
28657: PPUSH
28658: LD_EXP 55
28662: PUSH
28663: LD_VAR 0 2
28667: ARRAY
28668: PUSH
28669: LD_INT 1
28671: ARRAY
28672: PUSH
28673: LD_INT 1
28675: ARRAY
28676: PPUSH
28677: LD_EXP 55
28681: PUSH
28682: LD_VAR 0 2
28686: ARRAY
28687: PUSH
28688: LD_INT 1
28690: ARRAY
28691: PUSH
28692: LD_INT 2
28694: ARRAY
28695: PPUSH
28696: LD_EXP 55
28700: PUSH
28701: LD_VAR 0 2
28705: ARRAY
28706: PUSH
28707: LD_INT 1
28709: ARRAY
28710: PUSH
28711: LD_INT 3
28713: ARRAY
28714: PPUSH
28715: LD_EXP 55
28719: PUSH
28720: LD_VAR 0 2
28724: ARRAY
28725: PUSH
28726: LD_INT 1
28728: ARRAY
28729: PUSH
28730: LD_INT 4
28732: ARRAY
28733: PPUSH
28734: CALL 61469 0 5
28738: NOT
28739: IFFALSE 28789
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
28741: LD_ADDR_EXP 55
28745: PUSH
28746: LD_EXP 55
28750: PPUSH
28751: LD_VAR 0 2
28755: PPUSH
28756: LD_EXP 55
28760: PUSH
28761: LD_VAR 0 2
28765: ARRAY
28766: PPUSH
28767: LD_INT 1
28769: PPUSH
28770: LD_INT 1
28772: NEG
28773: PPUSH
28774: LD_INT 0
28776: PPUSH
28777: CALL 54136 0 4
28781: PPUSH
28782: CALL_OW 1
28786: ST_TO_ADDR
// continue ;
28787: GO 27665
// end ; end ; end ;
28789: GO 27665
28791: POP
28792: POP
// end ;
28793: LD_VAR 0 1
28797: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
// if not mc_bases then
28806: LD_EXP 50
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 29242
// for i = 1 to mc_bases do
28815: LD_ADDR_VAR 0 2
28819: PUSH
28820: DOUBLE
28821: LD_INT 1
28823: DEC
28824: ST_TO_ADDR
28825: LD_EXP 50
28829: PUSH
28830: FOR_TO
28831: IFFALSE 29240
// begin tmp := mc_build_upgrade [ i ] ;
28833: LD_ADDR_VAR 0 4
28837: PUSH
28838: LD_EXP 82
28842: PUSH
28843: LD_VAR 0 2
28847: ARRAY
28848: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
28849: LD_ADDR_VAR 0 6
28853: PUSH
28854: LD_EXP 83
28858: PUSH
28859: LD_VAR 0 2
28863: ARRAY
28864: PPUSH
28865: LD_INT 2
28867: PUSH
28868: LD_INT 30
28870: PUSH
28871: LD_INT 6
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 7
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: LIST
28892: PPUSH
28893: CALL_OW 72
28897: ST_TO_ADDR
// if not tmp and not lab then
28898: LD_VAR 0 4
28902: NOT
28903: PUSH
28904: LD_VAR 0 6
28908: NOT
28909: AND
28910: IFFALSE 28914
// continue ;
28912: GO 28830
// if tmp then
28914: LD_VAR 0 4
28918: IFFALSE 29038
// for j in tmp do
28920: LD_ADDR_VAR 0 3
28924: PUSH
28925: LD_VAR 0 4
28929: PUSH
28930: FOR_IN
28931: IFFALSE 29036
// begin if UpgradeCost ( j ) then
28933: LD_VAR 0 3
28937: PPUSH
28938: CALL 61129 0 1
28942: IFFALSE 29034
// begin ComUpgrade ( j ) ;
28944: LD_VAR 0 3
28948: PPUSH
28949: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
28953: LD_ADDR_EXP 82
28957: PUSH
28958: LD_EXP 82
28962: PPUSH
28963: LD_VAR 0 2
28967: PPUSH
28968: LD_EXP 82
28972: PUSH
28973: LD_VAR 0 2
28977: ARRAY
28978: PUSH
28979: LD_VAR 0 3
28983: DIFF
28984: PPUSH
28985: CALL_OW 1
28989: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
28990: LD_ADDR_EXP 57
28994: PUSH
28995: LD_EXP 57
28999: PPUSH
29000: LD_VAR 0 2
29004: PUSH
29005: LD_EXP 57
29009: PUSH
29010: LD_VAR 0 2
29014: ARRAY
29015: PUSH
29016: LD_INT 1
29018: PLUS
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: LD_VAR 0 3
29028: PPUSH
29029: CALL 54718 0 3
29033: ST_TO_ADDR
// end ; end ;
29034: GO 28930
29036: POP
29037: POP
// if not lab or not mc_lab_upgrade [ i ] then
29038: LD_VAR 0 6
29042: NOT
29043: PUSH
29044: LD_EXP 84
29048: PUSH
29049: LD_VAR 0 2
29053: ARRAY
29054: NOT
29055: OR
29056: IFFALSE 29060
// continue ;
29058: GO 28830
// for j in lab do
29060: LD_ADDR_VAR 0 3
29064: PUSH
29065: LD_VAR 0 6
29069: PUSH
29070: FOR_IN
29071: IFFALSE 29236
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
29073: LD_VAR 0 3
29077: PPUSH
29078: CALL_OW 266
29082: PUSH
29083: LD_INT 6
29085: PUSH
29086: LD_INT 7
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: IN
29093: PUSH
29094: LD_VAR 0 3
29098: PPUSH
29099: CALL_OW 461
29103: PUSH
29104: LD_INT 1
29106: NONEQUAL
29107: AND
29108: IFFALSE 29234
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
29110: LD_VAR 0 3
29114: PPUSH
29115: LD_EXP 84
29119: PUSH
29120: LD_VAR 0 2
29124: ARRAY
29125: PUSH
29126: LD_INT 1
29128: ARRAY
29129: PPUSH
29130: CALL 61334 0 2
29134: IFFALSE 29234
// begin ComCancel ( j ) ;
29136: LD_VAR 0 3
29140: PPUSH
29141: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
29145: LD_VAR 0 3
29149: PPUSH
29150: LD_EXP 84
29154: PUSH
29155: LD_VAR 0 2
29159: ARRAY
29160: PUSH
29161: LD_INT 1
29163: ARRAY
29164: PPUSH
29165: CALL_OW 207
// if not j in mc_construct_list [ i ] then
29169: LD_VAR 0 3
29173: PUSH
29174: LD_EXP 57
29178: PUSH
29179: LD_VAR 0 2
29183: ARRAY
29184: IN
29185: NOT
29186: IFFALSE 29232
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
29188: LD_ADDR_EXP 57
29192: PUSH
29193: LD_EXP 57
29197: PPUSH
29198: LD_VAR 0 2
29202: PUSH
29203: LD_EXP 57
29207: PUSH
29208: LD_VAR 0 2
29212: ARRAY
29213: PUSH
29214: LD_INT 1
29216: PLUS
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PPUSH
29222: LD_VAR 0 3
29226: PPUSH
29227: CALL 54718 0 3
29231: ST_TO_ADDR
// break ;
29232: GO 29236
// end ; end ; end ;
29234: GO 29070
29236: POP
29237: POP
// end ;
29238: GO 28830
29240: POP
29241: POP
// end ;
29242: LD_VAR 0 1
29246: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
29247: LD_INT 0
29249: PPUSH
29250: PPUSH
29251: PPUSH
29252: PPUSH
29253: PPUSH
29254: PPUSH
29255: PPUSH
29256: PPUSH
29257: PPUSH
// if not mc_bases then
29258: LD_EXP 50
29262: NOT
29263: IFFALSE 29267
// exit ;
29265: GO 29672
// for i = 1 to mc_bases do
29267: LD_ADDR_VAR 0 2
29271: PUSH
29272: DOUBLE
29273: LD_INT 1
29275: DEC
29276: ST_TO_ADDR
29277: LD_EXP 50
29281: PUSH
29282: FOR_TO
29283: IFFALSE 29670
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
29285: LD_EXP 58
29289: PUSH
29290: LD_VAR 0 2
29294: ARRAY
29295: NOT
29296: PUSH
29297: LD_EXP 50
29301: PUSH
29302: LD_VAR 0 2
29306: ARRAY
29307: PPUSH
29308: LD_INT 30
29310: PUSH
29311: LD_INT 3
29313: PUSH
29314: EMPTY
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 72
29322: NOT
29323: OR
29324: IFFALSE 29328
// continue ;
29326: GO 29282
// busy := false ;
29328: LD_ADDR_VAR 0 8
29332: PUSH
29333: LD_INT 0
29335: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
29336: LD_ADDR_VAR 0 4
29340: PUSH
29341: LD_EXP 50
29345: PUSH
29346: LD_VAR 0 2
29350: ARRAY
29351: PPUSH
29352: LD_INT 30
29354: PUSH
29355: LD_INT 3
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PPUSH
29362: CALL_OW 72
29366: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
29367: LD_ADDR_VAR 0 6
29371: PUSH
29372: LD_EXP 58
29376: PUSH
29377: LD_VAR 0 2
29381: ARRAY
29382: PPUSH
29383: LD_INT 2
29385: PUSH
29386: LD_INT 30
29388: PUSH
29389: LD_INT 32
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 30
29398: PUSH
29399: LD_INT 33
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: PUSH
29406: EMPTY
29407: LIST
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 72
29415: ST_TO_ADDR
// if not t then
29416: LD_VAR 0 6
29420: NOT
29421: IFFALSE 29425
// continue ;
29423: GO 29282
// for j in tmp do
29425: LD_ADDR_VAR 0 3
29429: PUSH
29430: LD_VAR 0 4
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29466
// if not BuildingStatus ( j ) = bs_idle then
29438: LD_VAR 0 3
29442: PPUSH
29443: CALL_OW 461
29447: PUSH
29448: LD_INT 2
29450: EQUAL
29451: NOT
29452: IFFALSE 29464
// begin busy := true ;
29454: LD_ADDR_VAR 0 8
29458: PUSH
29459: LD_INT 1
29461: ST_TO_ADDR
// break ;
29462: GO 29466
// end ;
29464: GO 29435
29466: POP
29467: POP
// if busy then
29468: LD_VAR 0 8
29472: IFFALSE 29476
// continue ;
29474: GO 29282
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
29476: LD_ADDR_VAR 0 7
29480: PUSH
29481: LD_VAR 0 6
29485: PPUSH
29486: LD_INT 35
29488: PUSH
29489: LD_INT 0
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PPUSH
29496: CALL_OW 72
29500: ST_TO_ADDR
// if tw then
29501: LD_VAR 0 7
29505: IFFALSE 29582
// begin tw := tw [ 1 ] ;
29507: LD_ADDR_VAR 0 7
29511: PUSH
29512: LD_VAR 0 7
29516: PUSH
29517: LD_INT 1
29519: ARRAY
29520: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
29521: LD_ADDR_VAR 0 9
29525: PUSH
29526: LD_VAR 0 7
29530: PPUSH
29531: LD_EXP 75
29535: PUSH
29536: LD_VAR 0 2
29540: ARRAY
29541: PPUSH
29542: CALL 59688 0 2
29546: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
29547: LD_EXP 89
29551: PUSH
29552: LD_VAR 0 2
29556: ARRAY
29557: IFFALSE 29580
// if not weapon in mc_allowed_tower_weapons [ i ] then
29559: LD_VAR 0 9
29563: PUSH
29564: LD_EXP 89
29568: PUSH
29569: LD_VAR 0 2
29573: ARRAY
29574: IN
29575: NOT
29576: IFFALSE 29580
// continue ;
29578: GO 29282
// end else
29580: GO 29645
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
29582: LD_ADDR_VAR 0 5
29586: PUSH
29587: LD_EXP 58
29591: PUSH
29592: LD_VAR 0 2
29596: ARRAY
29597: PPUSH
29598: LD_VAR 0 4
29602: PPUSH
29603: CALL 89899 0 2
29607: ST_TO_ADDR
// if not tmp2 then
29608: LD_VAR 0 5
29612: NOT
29613: IFFALSE 29617
// continue ;
29615: GO 29282
// tw := tmp2 [ 1 ] ;
29617: LD_ADDR_VAR 0 7
29621: PUSH
29622: LD_VAR 0 5
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
29631: LD_ADDR_VAR 0 9
29635: PUSH
29636: LD_VAR 0 5
29640: PUSH
29641: LD_INT 2
29643: ARRAY
29644: ST_TO_ADDR
// end ; if not weapon then
29645: LD_VAR 0 9
29649: NOT
29650: IFFALSE 29654
// continue ;
29652: GO 29282
// ComPlaceWeapon ( tw , weapon ) ;
29654: LD_VAR 0 7
29658: PPUSH
29659: LD_VAR 0 9
29663: PPUSH
29664: CALL_OW 148
// end ;
29668: GO 29282
29670: POP
29671: POP
// end ;
29672: LD_VAR 0 1
29676: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
29677: LD_INT 0
29679: PPUSH
29680: PPUSH
29681: PPUSH
29682: PPUSH
29683: PPUSH
29684: PPUSH
// if not mc_bases then
29685: LD_EXP 50
29689: NOT
29690: IFFALSE 29694
// exit ;
29692: GO 30470
// for i = 1 to mc_bases do
29694: LD_ADDR_VAR 0 2
29698: PUSH
29699: DOUBLE
29700: LD_INT 1
29702: DEC
29703: ST_TO_ADDR
29704: LD_EXP 50
29708: PUSH
29709: FOR_TO
29710: IFFALSE 30468
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
29712: LD_EXP 63
29716: PUSH
29717: LD_VAR 0 2
29721: ARRAY
29722: NOT
29723: PUSH
29724: LD_EXP 63
29728: PUSH
29729: LD_VAR 0 2
29733: ARRAY
29734: PUSH
29735: LD_EXP 64
29739: PUSH
29740: LD_VAR 0 2
29744: ARRAY
29745: EQUAL
29746: OR
29747: PUSH
29748: LD_EXP 73
29752: PUSH
29753: LD_VAR 0 2
29757: ARRAY
29758: OR
29759: IFFALSE 29763
// continue ;
29761: GO 29709
// if mc_miners [ i ] then
29763: LD_EXP 64
29767: PUSH
29768: LD_VAR 0 2
29772: ARRAY
29773: IFFALSE 30155
// begin for j = mc_miners [ i ] downto 1 do
29775: LD_ADDR_VAR 0 3
29779: PUSH
29780: DOUBLE
29781: LD_EXP 64
29785: PUSH
29786: LD_VAR 0 2
29790: ARRAY
29791: INC
29792: ST_TO_ADDR
29793: LD_INT 1
29795: PUSH
29796: FOR_DOWNTO
29797: IFFALSE 30153
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
29799: LD_EXP 64
29803: PUSH
29804: LD_VAR 0 2
29808: ARRAY
29809: PUSH
29810: LD_VAR 0 3
29814: ARRAY
29815: PPUSH
29816: CALL_OW 301
29820: PUSH
29821: LD_EXP 64
29825: PUSH
29826: LD_VAR 0 2
29830: ARRAY
29831: PUSH
29832: LD_VAR 0 3
29836: ARRAY
29837: PPUSH
29838: CALL_OW 257
29842: PUSH
29843: LD_INT 1
29845: NONEQUAL
29846: OR
29847: IFFALSE 29910
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
29849: LD_ADDR_VAR 0 5
29853: PUSH
29854: LD_EXP 64
29858: PUSH
29859: LD_VAR 0 2
29863: ARRAY
29864: PUSH
29865: LD_EXP 64
29869: PUSH
29870: LD_VAR 0 2
29874: ARRAY
29875: PUSH
29876: LD_VAR 0 3
29880: ARRAY
29881: DIFF
29882: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
29883: LD_ADDR_EXP 64
29887: PUSH
29888: LD_EXP 64
29892: PPUSH
29893: LD_VAR 0 2
29897: PPUSH
29898: LD_VAR 0 5
29902: PPUSH
29903: CALL_OW 1
29907: ST_TO_ADDR
// continue ;
29908: GO 29796
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
29910: LD_EXP 64
29914: PUSH
29915: LD_VAR 0 2
29919: ARRAY
29920: PUSH
29921: LD_VAR 0 3
29925: ARRAY
29926: PPUSH
29927: CALL_OW 257
29931: PUSH
29932: LD_INT 1
29934: EQUAL
29935: PUSH
29936: LD_EXP 64
29940: PUSH
29941: LD_VAR 0 2
29945: ARRAY
29946: PUSH
29947: LD_VAR 0 3
29951: ARRAY
29952: PPUSH
29953: CALL_OW 459
29957: NOT
29958: AND
29959: PUSH
29960: LD_EXP 64
29964: PUSH
29965: LD_VAR 0 2
29969: ARRAY
29970: PUSH
29971: LD_VAR 0 3
29975: ARRAY
29976: PPUSH
29977: CALL_OW 314
29981: NOT
29982: AND
29983: IFFALSE 30151
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
29985: LD_EXP 64
29989: PUSH
29990: LD_VAR 0 2
29994: ARRAY
29995: PUSH
29996: LD_VAR 0 3
30000: ARRAY
30001: PPUSH
30002: CALL_OW 310
30006: IFFALSE 30029
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
30008: LD_EXP 64
30012: PUSH
30013: LD_VAR 0 2
30017: ARRAY
30018: PUSH
30019: LD_VAR 0 3
30023: ARRAY
30024: PPUSH
30025: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
30029: LD_EXP 64
30033: PUSH
30034: LD_VAR 0 2
30038: ARRAY
30039: PUSH
30040: LD_VAR 0 3
30044: ARRAY
30045: PPUSH
30046: CALL_OW 314
30050: NOT
30051: IFFALSE 30151
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 1 ] , mc_mines [ i ] [ j mod mc_mines [ i ] + 1 ] [ 2 ] , 0 ) ;
30053: LD_EXP 64
30057: PUSH
30058: LD_VAR 0 2
30062: ARRAY
30063: PUSH
30064: LD_VAR 0 3
30068: ARRAY
30069: PPUSH
30070: LD_EXP 63
30074: PUSH
30075: LD_VAR 0 2
30079: ARRAY
30080: PUSH
30081: LD_VAR 0 3
30085: PUSH
30086: LD_EXP 63
30090: PUSH
30091: LD_VAR 0 2
30095: ARRAY
30096: MOD
30097: PUSH
30098: LD_INT 1
30100: PLUS
30101: ARRAY
30102: PUSH
30103: LD_INT 1
30105: ARRAY
30106: PPUSH
30107: LD_EXP 63
30111: PUSH
30112: LD_VAR 0 2
30116: ARRAY
30117: PUSH
30118: LD_VAR 0 3
30122: PUSH
30123: LD_EXP 63
30127: PUSH
30128: LD_VAR 0 2
30132: ARRAY
30133: MOD
30134: PUSH
30135: LD_INT 1
30137: PLUS
30138: ARRAY
30139: PUSH
30140: LD_INT 2
30142: ARRAY
30143: PPUSH
30144: LD_INT 0
30146: PPUSH
30147: CALL_OW 193
// end ; end ;
30151: GO 29796
30153: POP
30154: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
30155: LD_ADDR_VAR 0 5
30159: PUSH
30160: LD_EXP 50
30164: PUSH
30165: LD_VAR 0 2
30169: ARRAY
30170: PPUSH
30171: LD_INT 2
30173: PUSH
30174: LD_INT 30
30176: PUSH
30177: LD_INT 4
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 30
30186: PUSH
30187: LD_INT 5
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 30
30196: PUSH
30197: LD_INT 32
30199: PUSH
30200: EMPTY
30201: LIST
30202: LIST
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: PPUSH
30210: CALL_OW 72
30214: ST_TO_ADDR
// if not tmp then
30215: LD_VAR 0 5
30219: NOT
30220: IFFALSE 30224
// continue ;
30222: GO 29709
// list := [ ] ;
30224: LD_ADDR_VAR 0 6
30228: PUSH
30229: EMPTY
30230: ST_TO_ADDR
// for j in tmp do
30231: LD_ADDR_VAR 0 3
30235: PUSH
30236: LD_VAR 0 5
30240: PUSH
30241: FOR_IN
30242: IFFALSE 30311
// begin for k in UnitsInside ( j ) do
30244: LD_ADDR_VAR 0 4
30248: PUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: CALL_OW 313
30258: PUSH
30259: FOR_IN
30260: IFFALSE 30307
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
30262: LD_VAR 0 4
30266: PPUSH
30267: CALL_OW 257
30271: PUSH
30272: LD_INT 1
30274: EQUAL
30275: PUSH
30276: LD_VAR 0 4
30280: PPUSH
30281: CALL_OW 459
30285: NOT
30286: AND
30287: IFFALSE 30305
// list := list ^ k ;
30289: LD_ADDR_VAR 0 6
30293: PUSH
30294: LD_VAR 0 6
30298: PUSH
30299: LD_VAR 0 4
30303: ADD
30304: ST_TO_ADDR
30305: GO 30259
30307: POP
30308: POP
// end ;
30309: GO 30241
30311: POP
30312: POP
// list := list diff mc_miners [ i ] ;
30313: LD_ADDR_VAR 0 6
30317: PUSH
30318: LD_VAR 0 6
30322: PUSH
30323: LD_EXP 64
30327: PUSH
30328: LD_VAR 0 2
30332: ARRAY
30333: DIFF
30334: ST_TO_ADDR
// if not list then
30335: LD_VAR 0 6
30339: NOT
30340: IFFALSE 30344
// continue ;
30342: GO 29709
// k := mc_mines [ i ] - mc_miners [ i ] ;
30344: LD_ADDR_VAR 0 4
30348: PUSH
30349: LD_EXP 63
30353: PUSH
30354: LD_VAR 0 2
30358: ARRAY
30359: PUSH
30360: LD_EXP 64
30364: PUSH
30365: LD_VAR 0 2
30369: ARRAY
30370: MINUS
30371: ST_TO_ADDR
// if k > list then
30372: LD_VAR 0 4
30376: PUSH
30377: LD_VAR 0 6
30381: GREATER
30382: IFFALSE 30394
// k := list ;
30384: LD_ADDR_VAR 0 4
30388: PUSH
30389: LD_VAR 0 6
30393: ST_TO_ADDR
// for j = 1 to k do
30394: LD_ADDR_VAR 0 3
30398: PUSH
30399: DOUBLE
30400: LD_INT 1
30402: DEC
30403: ST_TO_ADDR
30404: LD_VAR 0 4
30408: PUSH
30409: FOR_TO
30410: IFFALSE 30464
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
30412: LD_ADDR_EXP 64
30416: PUSH
30417: LD_EXP 64
30421: PPUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_EXP 64
30431: PUSH
30432: LD_VAR 0 2
30436: ARRAY
30437: PUSH
30438: LD_INT 1
30440: PLUS
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PPUSH
30446: LD_VAR 0 6
30450: PUSH
30451: LD_VAR 0 3
30455: ARRAY
30456: PPUSH
30457: CALL 54718 0 3
30461: ST_TO_ADDR
30462: GO 30409
30464: POP
30465: POP
// end ;
30466: GO 29709
30468: POP
30469: POP
// end ;
30470: LD_VAR 0 1
30474: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
30475: LD_INT 0
30477: PPUSH
30478: PPUSH
30479: PPUSH
30480: PPUSH
30481: PPUSH
30482: PPUSH
30483: PPUSH
30484: PPUSH
30485: PPUSH
30486: PPUSH
// if not mc_bases then
30487: LD_EXP 50
30491: NOT
30492: IFFALSE 30496
// exit ;
30494: GO 32246
// for i = 1 to mc_bases do
30496: LD_ADDR_VAR 0 2
30500: PUSH
30501: DOUBLE
30502: LD_INT 1
30504: DEC
30505: ST_TO_ADDR
30506: LD_EXP 50
30510: PUSH
30511: FOR_TO
30512: IFFALSE 32244
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
30514: LD_EXP 50
30518: PUSH
30519: LD_VAR 0 2
30523: ARRAY
30524: NOT
30525: PUSH
30526: LD_EXP 57
30530: PUSH
30531: LD_VAR 0 2
30535: ARRAY
30536: OR
30537: IFFALSE 30541
// continue ;
30539: GO 30511
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
30541: LD_EXP 66
30545: PUSH
30546: LD_VAR 0 2
30550: ARRAY
30551: NOT
30552: PUSH
30553: LD_EXP 67
30557: PUSH
30558: LD_VAR 0 2
30562: ARRAY
30563: AND
30564: IFFALSE 30602
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
30566: LD_ADDR_EXP 67
30570: PUSH
30571: LD_EXP 67
30575: PPUSH
30576: LD_VAR 0 2
30580: PPUSH
30581: EMPTY
30582: PPUSH
30583: CALL_OW 1
30587: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
30588: LD_VAR 0 2
30592: PPUSH
30593: LD_INT 107
30595: PPUSH
30596: CALL 21460 0 2
// continue ;
30600: GO 30511
// end ; target := [ ] ;
30602: LD_ADDR_VAR 0 6
30606: PUSH
30607: EMPTY
30608: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
30609: LD_ADDR_VAR 0 3
30613: PUSH
30614: DOUBLE
30615: LD_EXP 66
30619: PUSH
30620: LD_VAR 0 2
30624: ARRAY
30625: INC
30626: ST_TO_ADDR
30627: LD_INT 1
30629: PUSH
30630: FOR_DOWNTO
30631: IFFALSE 30891
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
30633: LD_EXP 66
30637: PUSH
30638: LD_VAR 0 2
30642: ARRAY
30643: PUSH
30644: LD_VAR 0 3
30648: ARRAY
30649: PUSH
30650: LD_INT 2
30652: ARRAY
30653: PPUSH
30654: LD_EXP 66
30658: PUSH
30659: LD_VAR 0 2
30663: ARRAY
30664: PUSH
30665: LD_VAR 0 3
30669: ARRAY
30670: PUSH
30671: LD_INT 3
30673: ARRAY
30674: PPUSH
30675: CALL_OW 488
30679: PUSH
30680: LD_EXP 66
30684: PUSH
30685: LD_VAR 0 2
30689: ARRAY
30690: PUSH
30691: LD_VAR 0 3
30695: ARRAY
30696: PUSH
30697: LD_INT 2
30699: ARRAY
30700: PPUSH
30701: LD_EXP 66
30705: PUSH
30706: LD_VAR 0 2
30710: ARRAY
30711: PUSH
30712: LD_VAR 0 3
30716: ARRAY
30717: PUSH
30718: LD_INT 3
30720: ARRAY
30721: PPUSH
30722: CALL_OW 284
30726: PUSH
30727: LD_INT 0
30729: EQUAL
30730: AND
30731: IFFALSE 30786
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
30733: LD_ADDR_VAR 0 5
30737: PUSH
30738: LD_EXP 66
30742: PUSH
30743: LD_VAR 0 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 3
30753: PPUSH
30754: CALL_OW 3
30758: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
30759: LD_ADDR_EXP 66
30763: PUSH
30764: LD_EXP 66
30768: PPUSH
30769: LD_VAR 0 2
30773: PPUSH
30774: LD_VAR 0 5
30778: PPUSH
30779: CALL_OW 1
30783: ST_TO_ADDR
// continue ;
30784: GO 30630
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
30786: LD_EXP 50
30790: PUSH
30791: LD_VAR 0 2
30795: ARRAY
30796: PUSH
30797: LD_INT 1
30799: ARRAY
30800: PPUSH
30801: CALL_OW 255
30805: PPUSH
30806: LD_EXP 66
30810: PUSH
30811: LD_VAR 0 2
30815: ARRAY
30816: PUSH
30817: LD_VAR 0 3
30821: ARRAY
30822: PUSH
30823: LD_INT 2
30825: ARRAY
30826: PPUSH
30827: LD_EXP 66
30831: PUSH
30832: LD_VAR 0 2
30836: ARRAY
30837: PUSH
30838: LD_VAR 0 3
30842: ARRAY
30843: PUSH
30844: LD_INT 3
30846: ARRAY
30847: PPUSH
30848: LD_INT 30
30850: PPUSH
30851: CALL 55614 0 4
30855: PUSH
30856: LD_INT 4
30858: ARRAY
30859: PUSH
30860: LD_INT 0
30862: EQUAL
30863: IFFALSE 30889
// begin target := mc_crates [ i ] [ j ] ;
30865: LD_ADDR_VAR 0 6
30869: PUSH
30870: LD_EXP 66
30874: PUSH
30875: LD_VAR 0 2
30879: ARRAY
30880: PUSH
30881: LD_VAR 0 3
30885: ARRAY
30886: ST_TO_ADDR
// break ;
30887: GO 30891
// end ; end ;
30889: GO 30630
30891: POP
30892: POP
// if not target then
30893: LD_VAR 0 6
30897: NOT
30898: IFFALSE 30902
// continue ;
30900: GO 30511
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
30902: LD_ADDR_VAR 0 7
30906: PUSH
30907: LD_EXP 69
30911: PUSH
30912: LD_VAR 0 2
30916: ARRAY
30917: PPUSH
30918: LD_INT 2
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: LD_INT 58
30926: PUSH
30927: EMPTY
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 61
30936: PUSH
30937: EMPTY
30938: LIST
30939: PUSH
30940: LD_INT 33
30942: PUSH
30943: LD_INT 5
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: LD_INT 33
30952: PUSH
30953: LD_INT 3
30955: PUSH
30956: EMPTY
30957: LIST
30958: LIST
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: LIST
30964: LIST
30965: LIST
30966: PUSH
30967: LD_INT 2
30969: PUSH
30970: LD_INT 34
30972: PUSH
30973: LD_INT 32
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: PUSH
30980: LD_INT 34
30982: PUSH
30983: LD_INT 51
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PUSH
30990: LD_INT 34
30992: PUSH
30993: LD_INT 12
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PUSH
31000: EMPTY
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: PUSH
31006: EMPTY
31007: LIST
31008: LIST
31009: PPUSH
31010: CALL_OW 72
31014: ST_TO_ADDR
// if not cargo then
31015: LD_VAR 0 7
31019: NOT
31020: IFFALSE 31663
// begin if mc_crates_collector [ i ] < 5 then
31022: LD_EXP 67
31026: PUSH
31027: LD_VAR 0 2
31031: ARRAY
31032: PUSH
31033: LD_INT 5
31035: LESS
31036: IFFALSE 31402
// begin if mc_ape [ i ] then
31038: LD_EXP 79
31042: PUSH
31043: LD_VAR 0 2
31047: ARRAY
31048: IFFALSE 31095
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
31050: LD_ADDR_VAR 0 5
31054: PUSH
31055: LD_EXP 79
31059: PUSH
31060: LD_VAR 0 2
31064: ARRAY
31065: PPUSH
31066: LD_INT 25
31068: PUSH
31069: LD_INT 16
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 24
31078: PUSH
31079: LD_INT 750
31081: PUSH
31082: EMPTY
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 72
31094: ST_TO_ADDR
// if not tmp then
31095: LD_VAR 0 5
31099: NOT
31100: IFFALSE 31147
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
31102: LD_ADDR_VAR 0 5
31106: PUSH
31107: LD_EXP 50
31111: PUSH
31112: LD_VAR 0 2
31116: ARRAY
31117: PPUSH
31118: LD_INT 25
31120: PUSH
31121: LD_INT 2
31123: PUSH
31124: EMPTY
31125: LIST
31126: LIST
31127: PUSH
31128: LD_INT 24
31130: PUSH
31131: LD_INT 750
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: EMPTY
31139: LIST
31140: LIST
31141: PPUSH
31142: CALL_OW 72
31146: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
31147: LD_EXP 79
31151: PUSH
31152: LD_VAR 0 2
31156: ARRAY
31157: PUSH
31158: LD_EXP 50
31162: PUSH
31163: LD_VAR 0 2
31167: ARRAY
31168: PPUSH
31169: LD_INT 25
31171: PUSH
31172: LD_INT 2
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 24
31181: PUSH
31182: LD_INT 750
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: EMPTY
31190: LIST
31191: LIST
31192: PPUSH
31193: CALL_OW 72
31197: AND
31198: PUSH
31199: LD_VAR 0 5
31203: PUSH
31204: LD_INT 5
31206: LESS
31207: AND
31208: IFFALSE 31290
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
31210: LD_ADDR_VAR 0 3
31214: PUSH
31215: LD_EXP 50
31219: PUSH
31220: LD_VAR 0 2
31224: ARRAY
31225: PPUSH
31226: LD_INT 25
31228: PUSH
31229: LD_INT 2
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 24
31238: PUSH
31239: LD_INT 750
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PPUSH
31250: CALL_OW 72
31254: PUSH
31255: FOR_IN
31256: IFFALSE 31288
// begin tmp := tmp union j ;
31258: LD_ADDR_VAR 0 5
31262: PUSH
31263: LD_VAR 0 5
31267: PUSH
31268: LD_VAR 0 3
31272: UNION
31273: ST_TO_ADDR
// if tmp >= 5 then
31274: LD_VAR 0 5
31278: PUSH
31279: LD_INT 5
31281: GREATEREQUAL
31282: IFFALSE 31286
// break ;
31284: GO 31288
// end ;
31286: GO 31255
31288: POP
31289: POP
// end ; if not tmp then
31290: LD_VAR 0 5
31294: NOT
31295: IFFALSE 31299
// continue ;
31297: GO 30511
// for j in tmp do
31299: LD_ADDR_VAR 0 3
31303: PUSH
31304: LD_VAR 0 5
31308: PUSH
31309: FOR_IN
31310: IFFALSE 31400
// if not GetTag ( j ) then
31312: LD_VAR 0 3
31316: PPUSH
31317: CALL_OW 110
31321: NOT
31322: IFFALSE 31398
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
31324: LD_ADDR_EXP 67
31328: PUSH
31329: LD_EXP 67
31333: PPUSH
31334: LD_VAR 0 2
31338: PUSH
31339: LD_EXP 67
31343: PUSH
31344: LD_VAR 0 2
31348: ARRAY
31349: PUSH
31350: LD_INT 1
31352: PLUS
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: PPUSH
31358: LD_VAR 0 3
31362: PPUSH
31363: CALL 54718 0 3
31367: ST_TO_ADDR
// SetTag ( j , 107 ) ;
31368: LD_VAR 0 3
31372: PPUSH
31373: LD_INT 107
31375: PPUSH
31376: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
31380: LD_EXP 67
31384: PUSH
31385: LD_VAR 0 2
31389: ARRAY
31390: PUSH
31391: LD_INT 5
31393: GREATEREQUAL
31394: IFFALSE 31398
// break ;
31396: GO 31400
// end ;
31398: GO 31309
31400: POP
31401: POP
// end ; if mc_crates_collector [ i ] and target then
31402: LD_EXP 67
31406: PUSH
31407: LD_VAR 0 2
31411: ARRAY
31412: PUSH
31413: LD_VAR 0 6
31417: AND
31418: IFFALSE 31661
// begin if mc_crates_collector [ i ] < target [ 1 ] then
31420: LD_EXP 67
31424: PUSH
31425: LD_VAR 0 2
31429: ARRAY
31430: PUSH
31431: LD_VAR 0 6
31435: PUSH
31436: LD_INT 1
31438: ARRAY
31439: LESS
31440: IFFALSE 31460
// tmp := mc_crates_collector [ i ] else
31442: LD_ADDR_VAR 0 5
31446: PUSH
31447: LD_EXP 67
31451: PUSH
31452: LD_VAR 0 2
31456: ARRAY
31457: ST_TO_ADDR
31458: GO 31474
// tmp := target [ 1 ] ;
31460: LD_ADDR_VAR 0 5
31464: PUSH
31465: LD_VAR 0 6
31469: PUSH
31470: LD_INT 1
31472: ARRAY
31473: ST_TO_ADDR
// k := 0 ;
31474: LD_ADDR_VAR 0 4
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
31482: LD_ADDR_VAR 0 3
31486: PUSH
31487: LD_EXP 67
31491: PUSH
31492: LD_VAR 0 2
31496: ARRAY
31497: PUSH
31498: FOR_IN
31499: IFFALSE 31659
// begin k := k + 1 ;
31501: LD_ADDR_VAR 0 4
31505: PUSH
31506: LD_VAR 0 4
31510: PUSH
31511: LD_INT 1
31513: PLUS
31514: ST_TO_ADDR
// if k > tmp then
31515: LD_VAR 0 4
31519: PUSH
31520: LD_VAR 0 5
31524: GREATER
31525: IFFALSE 31529
// break ;
31527: GO 31659
// if not GetClass ( j ) in [ 2 , 16 ] then
31529: LD_VAR 0 3
31533: PPUSH
31534: CALL_OW 257
31538: PUSH
31539: LD_INT 2
31541: PUSH
31542: LD_INT 16
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: IN
31549: NOT
31550: IFFALSE 31603
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
31552: LD_ADDR_EXP 67
31556: PUSH
31557: LD_EXP 67
31561: PPUSH
31562: LD_VAR 0 2
31566: PPUSH
31567: LD_EXP 67
31571: PUSH
31572: LD_VAR 0 2
31576: ARRAY
31577: PUSH
31578: LD_VAR 0 3
31582: DIFF
31583: PPUSH
31584: CALL_OW 1
31588: ST_TO_ADDR
// SetTag ( j , 0 ) ;
31589: LD_VAR 0 3
31593: PPUSH
31594: LD_INT 0
31596: PPUSH
31597: CALL_OW 109
// continue ;
31601: GO 31498
// end ; if IsInUnit ( j ) then
31603: LD_VAR 0 3
31607: PPUSH
31608: CALL_OW 310
31612: IFFALSE 31623
// ComExitBuilding ( j ) ;
31614: LD_VAR 0 3
31618: PPUSH
31619: CALL_OW 122
// wait ( 3 ) ;
31623: LD_INT 3
31625: PPUSH
31626: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
31630: LD_VAR 0 3
31634: PPUSH
31635: LD_VAR 0 6
31639: PUSH
31640: LD_INT 2
31642: ARRAY
31643: PPUSH
31644: LD_VAR 0 6
31648: PUSH
31649: LD_INT 3
31651: ARRAY
31652: PPUSH
31653: CALL_OW 117
// end ;
31657: GO 31498
31659: POP
31660: POP
// end ; end else
31661: GO 32242
// begin for j in cargo do
31663: LD_ADDR_VAR 0 3
31667: PUSH
31668: LD_VAR 0 7
31672: PUSH
31673: FOR_IN
31674: IFFALSE 32240
// begin if GetTag ( j ) <> 0 then
31676: LD_VAR 0 3
31680: PPUSH
31681: CALL_OW 110
31685: PUSH
31686: LD_INT 0
31688: NONEQUAL
31689: IFFALSE 31693
// continue ;
31691: GO 31673
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
31693: LD_VAR 0 3
31697: PPUSH
31698: CALL_OW 256
31702: PUSH
31703: LD_INT 1000
31705: LESS
31706: PUSH
31707: LD_VAR 0 3
31711: PPUSH
31712: LD_EXP 74
31716: PUSH
31717: LD_VAR 0 2
31721: ARRAY
31722: PPUSH
31723: CALL_OW 308
31727: NOT
31728: AND
31729: IFFALSE 31751
// ComMoveToArea ( j , mc_parking [ i ] ) ;
31731: LD_VAR 0 3
31735: PPUSH
31736: LD_EXP 74
31740: PUSH
31741: LD_VAR 0 2
31745: ARRAY
31746: PPUSH
31747: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
31751: LD_VAR 0 3
31755: PPUSH
31756: CALL_OW 256
31760: PUSH
31761: LD_INT 1000
31763: LESS
31764: PUSH
31765: LD_VAR 0 3
31769: PPUSH
31770: LD_EXP 74
31774: PUSH
31775: LD_VAR 0 2
31779: ARRAY
31780: PPUSH
31781: CALL_OW 308
31785: AND
31786: IFFALSE 31790
// continue ;
31788: GO 31673
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
31790: LD_VAR 0 3
31794: PPUSH
31795: CALL_OW 262
31799: PUSH
31800: LD_INT 2
31802: EQUAL
31803: PUSH
31804: LD_VAR 0 3
31808: PPUSH
31809: CALL_OW 261
31813: PUSH
31814: LD_INT 15
31816: LESS
31817: AND
31818: IFFALSE 31822
// continue ;
31820: GO 31673
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
31822: LD_VAR 0 3
31826: PPUSH
31827: CALL_OW 262
31831: PUSH
31832: LD_INT 1
31834: EQUAL
31835: PUSH
31836: LD_VAR 0 3
31840: PPUSH
31841: CALL_OW 261
31845: PUSH
31846: LD_INT 10
31848: LESS
31849: AND
31850: IFFALSE 32179
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
31852: LD_ADDR_VAR 0 8
31856: PUSH
31857: LD_EXP 50
31861: PUSH
31862: LD_VAR 0 2
31866: ARRAY
31867: PPUSH
31868: LD_INT 2
31870: PUSH
31871: LD_INT 30
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 30
31883: PUSH
31884: LD_INT 1
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: EMPTY
31892: LIST
31893: LIST
31894: LIST
31895: PPUSH
31896: CALL_OW 72
31900: ST_TO_ADDR
// if not depot then
31901: LD_VAR 0 8
31905: NOT
31906: IFFALSE 31910
// continue ;
31908: GO 31673
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
31910: LD_VAR 0 3
31914: PPUSH
31915: LD_VAR 0 8
31919: PPUSH
31920: LD_VAR 0 3
31924: PPUSH
31925: CALL_OW 74
31929: PPUSH
31930: CALL_OW 296
31934: PUSH
31935: LD_INT 6
31937: LESS
31938: IFFALSE 31954
// SetFuel ( j , 100 ) else
31940: LD_VAR 0 3
31944: PPUSH
31945: LD_INT 100
31947: PPUSH
31948: CALL_OW 240
31952: GO 32179
// if GetFuel ( j ) = 0 then
31954: LD_VAR 0 3
31958: PPUSH
31959: CALL_OW 261
31963: PUSH
31964: LD_INT 0
31966: EQUAL
31967: IFFALSE 32179
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
31969: LD_ADDR_EXP 69
31973: PUSH
31974: LD_EXP 69
31978: PPUSH
31979: LD_VAR 0 2
31983: PPUSH
31984: LD_EXP 69
31988: PUSH
31989: LD_VAR 0 2
31993: ARRAY
31994: PUSH
31995: LD_VAR 0 3
31999: DIFF
32000: PPUSH
32001: CALL_OW 1
32005: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
32006: LD_VAR 0 3
32010: PPUSH
32011: CALL_OW 263
32015: PUSH
32016: LD_INT 1
32018: EQUAL
32019: IFFALSE 32035
// ComExitVehicle ( IsInUnit ( j ) ) ;
32021: LD_VAR 0 3
32025: PPUSH
32026: CALL_OW 310
32030: PPUSH
32031: CALL_OW 121
// if GetControl ( j ) = control_remote then
32035: LD_VAR 0 3
32039: PPUSH
32040: CALL_OW 263
32044: PUSH
32045: LD_INT 2
32047: EQUAL
32048: IFFALSE 32059
// ComUnlink ( j ) ;
32050: LD_VAR 0 3
32054: PPUSH
32055: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
32059: LD_ADDR_VAR 0 9
32063: PUSH
32064: LD_VAR 0 2
32068: PPUSH
32069: LD_INT 3
32071: PPUSH
32072: CALL 41532 0 2
32076: ST_TO_ADDR
// if fac then
32077: LD_VAR 0 9
32081: IFFALSE 32177
// begin for k in fac do
32083: LD_ADDR_VAR 0 4
32087: PUSH
32088: LD_VAR 0 9
32092: PUSH
32093: FOR_IN
32094: IFFALSE 32175
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
32096: LD_ADDR_VAR 0 10
32100: PUSH
32101: LD_VAR 0 9
32105: PPUSH
32106: LD_VAR 0 3
32110: PPUSH
32111: CALL_OW 265
32115: PPUSH
32116: LD_VAR 0 3
32120: PPUSH
32121: CALL_OW 262
32125: PPUSH
32126: LD_VAR 0 3
32130: PPUSH
32131: CALL_OW 263
32135: PPUSH
32136: LD_VAR 0 3
32140: PPUSH
32141: CALL_OW 264
32145: PPUSH
32146: CALL 52250 0 5
32150: ST_TO_ADDR
// if components then
32151: LD_VAR 0 10
32155: IFFALSE 32173
// begin MC_InsertProduceList ( i , components ) ;
32157: LD_VAR 0 2
32161: PPUSH
32162: LD_VAR 0 10
32166: PPUSH
32167: CALL 41077 0 2
// break ;
32171: GO 32175
// end ; end ;
32173: GO 32093
32175: POP
32176: POP
// end ; continue ;
32177: GO 31673
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
32179: LD_VAR 0 3
32183: PPUSH
32184: LD_INT 1
32186: PPUSH
32187: CALL_OW 289
32191: PUSH
32192: LD_INT 100
32194: LESS
32195: PUSH
32196: LD_VAR 0 3
32200: PPUSH
32201: CALL_OW 314
32205: NOT
32206: AND
32207: IFFALSE 32236
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
32209: LD_VAR 0 3
32213: PPUSH
32214: LD_VAR 0 6
32218: PUSH
32219: LD_INT 2
32221: ARRAY
32222: PPUSH
32223: LD_VAR 0 6
32227: PUSH
32228: LD_INT 3
32230: ARRAY
32231: PPUSH
32232: CALL_OW 117
// break ;
32236: GO 32240
// end ;
32238: GO 31673
32240: POP
32241: POP
// end ; end ;
32242: GO 30511
32244: POP
32245: POP
// end ;
32246: LD_VAR 0 1
32250: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
32251: LD_INT 0
32253: PPUSH
32254: PPUSH
32255: PPUSH
32256: PPUSH
// if not mc_bases then
32257: LD_EXP 50
32261: NOT
32262: IFFALSE 32266
// exit ;
32264: GO 32427
// for i = 1 to mc_bases do
32266: LD_ADDR_VAR 0 2
32270: PUSH
32271: DOUBLE
32272: LD_INT 1
32274: DEC
32275: ST_TO_ADDR
32276: LD_EXP 50
32280: PUSH
32281: FOR_TO
32282: IFFALSE 32425
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
32284: LD_ADDR_VAR 0 4
32288: PUSH
32289: LD_EXP 69
32293: PUSH
32294: LD_VAR 0 2
32298: ARRAY
32299: PUSH
32300: LD_EXP 72
32304: PUSH
32305: LD_VAR 0 2
32309: ARRAY
32310: UNION
32311: PPUSH
32312: LD_INT 33
32314: PUSH
32315: LD_INT 2
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PPUSH
32322: CALL_OW 72
32326: ST_TO_ADDR
// if tmp then
32327: LD_VAR 0 4
32331: IFFALSE 32423
// for j in tmp do
32333: LD_ADDR_VAR 0 3
32337: PUSH
32338: LD_VAR 0 4
32342: PUSH
32343: FOR_IN
32344: IFFALSE 32421
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
32346: LD_VAR 0 3
32350: PPUSH
32351: CALL_OW 312
32355: NOT
32356: PUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: CALL_OW 256
32366: PUSH
32367: LD_INT 250
32369: GREATEREQUAL
32370: AND
32371: IFFALSE 32384
// Connect ( j ) else
32373: LD_VAR 0 3
32377: PPUSH
32378: CALL 57651 0 1
32382: GO 32419
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
32384: LD_VAR 0 3
32388: PPUSH
32389: CALL_OW 256
32393: PUSH
32394: LD_INT 250
32396: LESS
32397: PUSH
32398: LD_VAR 0 3
32402: PPUSH
32403: CALL_OW 312
32407: AND
32408: IFFALSE 32419
// ComUnlink ( j ) ;
32410: LD_VAR 0 3
32414: PPUSH
32415: CALL_OW 136
32419: GO 32343
32421: POP
32422: POP
// end ;
32423: GO 32281
32425: POP
32426: POP
// end ;
32427: LD_VAR 0 1
32431: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
32432: LD_INT 0
32434: PPUSH
32435: PPUSH
32436: PPUSH
32437: PPUSH
32438: PPUSH
// if not mc_bases then
32439: LD_EXP 50
32443: NOT
32444: IFFALSE 32448
// exit ;
32446: GO 32893
// for i = 1 to mc_bases do
32448: LD_ADDR_VAR 0 2
32452: PUSH
32453: DOUBLE
32454: LD_INT 1
32456: DEC
32457: ST_TO_ADDR
32458: LD_EXP 50
32462: PUSH
32463: FOR_TO
32464: IFFALSE 32891
// begin if not mc_produce [ i ] then
32466: LD_EXP 71
32470: PUSH
32471: LD_VAR 0 2
32475: ARRAY
32476: NOT
32477: IFFALSE 32481
// continue ;
32479: GO 32463
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
32481: LD_ADDR_VAR 0 5
32485: PUSH
32486: LD_EXP 50
32490: PUSH
32491: LD_VAR 0 2
32495: ARRAY
32496: PPUSH
32497: LD_INT 30
32499: PUSH
32500: LD_INT 3
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: PPUSH
32507: CALL_OW 72
32511: ST_TO_ADDR
// if not fac then
32512: LD_VAR 0 5
32516: NOT
32517: IFFALSE 32521
// continue ;
32519: GO 32463
// for j in fac do
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: LD_VAR 0 5
32530: PUSH
32531: FOR_IN
32532: IFFALSE 32887
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
32534: LD_VAR 0 3
32538: PPUSH
32539: CALL_OW 461
32543: PUSH
32544: LD_INT 2
32546: NONEQUAL
32547: PUSH
32548: LD_VAR 0 3
32552: PPUSH
32553: LD_INT 15
32555: PPUSH
32556: CALL 57311 0 2
32560: PUSH
32561: LD_INT 4
32563: ARRAY
32564: OR
32565: IFFALSE 32569
// continue ;
32567: GO 32531
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
32569: LD_VAR 0 3
32573: PPUSH
32574: LD_EXP 71
32578: PUSH
32579: LD_VAR 0 2
32583: ARRAY
32584: PUSH
32585: LD_INT 1
32587: ARRAY
32588: PUSH
32589: LD_INT 1
32591: ARRAY
32592: PPUSH
32593: LD_EXP 71
32597: PUSH
32598: LD_VAR 0 2
32602: ARRAY
32603: PUSH
32604: LD_INT 1
32606: ARRAY
32607: PUSH
32608: LD_INT 2
32610: ARRAY
32611: PPUSH
32612: LD_EXP 71
32616: PUSH
32617: LD_VAR 0 2
32621: ARRAY
32622: PUSH
32623: LD_INT 1
32625: ARRAY
32626: PUSH
32627: LD_INT 3
32629: ARRAY
32630: PPUSH
32631: LD_EXP 71
32635: PUSH
32636: LD_VAR 0 2
32640: ARRAY
32641: PUSH
32642: LD_INT 1
32644: ARRAY
32645: PUSH
32646: LD_INT 4
32648: ARRAY
32649: PPUSH
32650: CALL_OW 448
32654: PUSH
32655: LD_VAR 0 3
32659: PPUSH
32660: LD_EXP 71
32664: PUSH
32665: LD_VAR 0 2
32669: ARRAY
32670: PUSH
32671: LD_INT 1
32673: ARRAY
32674: PUSH
32675: LD_INT 1
32677: ARRAY
32678: PUSH
32679: LD_EXP 71
32683: PUSH
32684: LD_VAR 0 2
32688: ARRAY
32689: PUSH
32690: LD_INT 1
32692: ARRAY
32693: PUSH
32694: LD_INT 2
32696: ARRAY
32697: PUSH
32698: LD_EXP 71
32702: PUSH
32703: LD_VAR 0 2
32707: ARRAY
32708: PUSH
32709: LD_INT 1
32711: ARRAY
32712: PUSH
32713: LD_INT 3
32715: ARRAY
32716: PUSH
32717: LD_EXP 71
32721: PUSH
32722: LD_VAR 0 2
32726: ARRAY
32727: PUSH
32728: LD_INT 1
32730: ARRAY
32731: PUSH
32732: LD_INT 4
32734: ARRAY
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: PPUSH
32742: CALL 60982 0 2
32746: AND
32747: IFFALSE 32885
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
32749: LD_VAR 0 3
32753: PPUSH
32754: LD_EXP 71
32758: PUSH
32759: LD_VAR 0 2
32763: ARRAY
32764: PUSH
32765: LD_INT 1
32767: ARRAY
32768: PUSH
32769: LD_INT 1
32771: ARRAY
32772: PPUSH
32773: LD_EXP 71
32777: PUSH
32778: LD_VAR 0 2
32782: ARRAY
32783: PUSH
32784: LD_INT 1
32786: ARRAY
32787: PUSH
32788: LD_INT 2
32790: ARRAY
32791: PPUSH
32792: LD_EXP 71
32796: PUSH
32797: LD_VAR 0 2
32801: ARRAY
32802: PUSH
32803: LD_INT 1
32805: ARRAY
32806: PUSH
32807: LD_INT 3
32809: ARRAY
32810: PPUSH
32811: LD_EXP 71
32815: PUSH
32816: LD_VAR 0 2
32820: ARRAY
32821: PUSH
32822: LD_INT 1
32824: ARRAY
32825: PUSH
32826: LD_INT 4
32828: ARRAY
32829: PPUSH
32830: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
32834: LD_ADDR_VAR 0 4
32838: PUSH
32839: LD_EXP 71
32843: PUSH
32844: LD_VAR 0 2
32848: ARRAY
32849: PPUSH
32850: LD_INT 1
32852: PPUSH
32853: CALL_OW 3
32857: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
32858: LD_ADDR_EXP 71
32862: PUSH
32863: LD_EXP 71
32867: PPUSH
32868: LD_VAR 0 2
32872: PPUSH
32873: LD_VAR 0 4
32877: PPUSH
32878: CALL_OW 1
32882: ST_TO_ADDR
// break ;
32883: GO 32887
// end ; end ;
32885: GO 32531
32887: POP
32888: POP
// end ;
32889: GO 32463
32891: POP
32892: POP
// end ;
32893: LD_VAR 0 1
32897: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
32898: LD_INT 0
32900: PPUSH
32901: PPUSH
32902: PPUSH
// if not mc_bases then
32903: LD_EXP 50
32907: NOT
32908: IFFALSE 32912
// exit ;
32910: GO 33001
// for i = 1 to mc_bases do
32912: LD_ADDR_VAR 0 2
32916: PUSH
32917: DOUBLE
32918: LD_INT 1
32920: DEC
32921: ST_TO_ADDR
32922: LD_EXP 50
32926: PUSH
32927: FOR_TO
32928: IFFALSE 32999
// begin if mc_attack [ i ] then
32930: LD_EXP 70
32934: PUSH
32935: LD_VAR 0 2
32939: ARRAY
32940: IFFALSE 32997
// begin tmp := mc_attack [ i ] [ 1 ] ;
32942: LD_ADDR_VAR 0 3
32946: PUSH
32947: LD_EXP 70
32951: PUSH
32952: LD_VAR 0 2
32956: ARRAY
32957: PUSH
32958: LD_INT 1
32960: ARRAY
32961: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
32962: LD_ADDR_EXP 70
32966: PUSH
32967: LD_EXP 70
32971: PPUSH
32972: LD_VAR 0 2
32976: PPUSH
32977: EMPTY
32978: PPUSH
32979: CALL_OW 1
32983: ST_TO_ADDR
// Attack ( tmp ) ;
32984: LD_VAR 0 3
32988: PPUSH
32989: CALL 83172 0 1
// exit ;
32993: POP
32994: POP
32995: GO 33001
// end ; end ;
32997: GO 32927
32999: POP
33000: POP
// end ;
33001: LD_VAR 0 1
33005: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
33006: LD_INT 0
33008: PPUSH
33009: PPUSH
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
33014: PPUSH
// if not mc_bases then
33015: LD_EXP 50
33019: NOT
33020: IFFALSE 33024
// exit ;
33022: GO 33606
// for i = 1 to mc_bases do
33024: LD_ADDR_VAR 0 2
33028: PUSH
33029: DOUBLE
33030: LD_INT 1
33032: DEC
33033: ST_TO_ADDR
33034: LD_EXP 50
33038: PUSH
33039: FOR_TO
33040: IFFALSE 33604
// begin if not mc_bases [ i ] then
33042: LD_EXP 50
33046: PUSH
33047: LD_VAR 0 2
33051: ARRAY
33052: NOT
33053: IFFALSE 33057
// continue ;
33055: GO 33039
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
33057: LD_ADDR_VAR 0 7
33061: PUSH
33062: LD_EXP 50
33066: PUSH
33067: LD_VAR 0 2
33071: ARRAY
33072: PUSH
33073: LD_INT 1
33075: ARRAY
33076: PPUSH
33077: CALL 51554 0 1
33081: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
33082: LD_ADDR_EXP 73
33086: PUSH
33087: LD_EXP 73
33091: PPUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: LD_EXP 50
33101: PUSH
33102: LD_VAR 0 2
33106: ARRAY
33107: PUSH
33108: LD_INT 1
33110: ARRAY
33111: PPUSH
33112: CALL_OW 255
33116: PPUSH
33117: LD_EXP 75
33121: PUSH
33122: LD_VAR 0 2
33126: ARRAY
33127: PPUSH
33128: CALL 49108 0 2
33132: PPUSH
33133: CALL_OW 1
33137: ST_TO_ADDR
// if not mc_scan [ i ] then
33138: LD_EXP 73
33142: PUSH
33143: LD_VAR 0 2
33147: ARRAY
33148: NOT
33149: IFFALSE 33304
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33151: LD_ADDR_VAR 0 4
33155: PUSH
33156: LD_EXP 50
33160: PUSH
33161: LD_VAR 0 2
33165: ARRAY
33166: PPUSH
33167: LD_INT 2
33169: PUSH
33170: LD_INT 25
33172: PUSH
33173: LD_INT 5
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 25
33182: PUSH
33183: LD_INT 8
33185: PUSH
33186: EMPTY
33187: LIST
33188: LIST
33189: PUSH
33190: LD_INT 25
33192: PUSH
33193: LD_INT 9
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 72
33210: ST_TO_ADDR
// if not tmp then
33211: LD_VAR 0 4
33215: NOT
33216: IFFALSE 33220
// continue ;
33218: GO 33039
// for j in tmp do
33220: LD_ADDR_VAR 0 3
33224: PUSH
33225: LD_VAR 0 4
33229: PUSH
33230: FOR_IN
33231: IFFALSE 33302
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
33233: LD_VAR 0 3
33237: PPUSH
33238: CALL_OW 310
33242: PPUSH
33243: CALL_OW 266
33247: PUSH
33248: LD_INT 5
33250: EQUAL
33251: PUSH
33252: LD_VAR 0 3
33256: PPUSH
33257: CALL_OW 257
33261: PUSH
33262: LD_INT 1
33264: EQUAL
33265: AND
33266: PUSH
33267: LD_VAR 0 3
33271: PPUSH
33272: CALL_OW 459
33276: NOT
33277: AND
33278: PUSH
33279: LD_VAR 0 7
33283: AND
33284: IFFALSE 33300
// ComChangeProfession ( j , class ) ;
33286: LD_VAR 0 3
33290: PPUSH
33291: LD_VAR 0 7
33295: PPUSH
33296: CALL_OW 123
33300: GO 33230
33302: POP
33303: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
33304: LD_EXP 73
33308: PUSH
33309: LD_VAR 0 2
33313: ARRAY
33314: PUSH
33315: LD_EXP 72
33319: PUSH
33320: LD_VAR 0 2
33324: ARRAY
33325: NOT
33326: AND
33327: PUSH
33328: LD_EXP 50
33332: PUSH
33333: LD_VAR 0 2
33337: ARRAY
33338: PPUSH
33339: LD_INT 30
33341: PUSH
33342: LD_INT 32
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: PPUSH
33349: CALL_OW 72
33353: NOT
33354: AND
33355: PUSH
33356: LD_EXP 50
33360: PUSH
33361: LD_VAR 0 2
33365: ARRAY
33366: PPUSH
33367: LD_INT 2
33369: PUSH
33370: LD_INT 30
33372: PUSH
33373: LD_INT 4
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 30
33382: PUSH
33383: LD_INT 5
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: LIST
33394: PPUSH
33395: CALL_OW 72
33399: NOT
33400: AND
33401: IFFALSE 33533
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
33403: LD_ADDR_VAR 0 4
33407: PUSH
33408: LD_EXP 50
33412: PUSH
33413: LD_VAR 0 2
33417: ARRAY
33418: PPUSH
33419: LD_INT 2
33421: PUSH
33422: LD_INT 25
33424: PUSH
33425: LD_INT 1
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PUSH
33432: LD_INT 25
33434: PUSH
33435: LD_INT 5
33437: PUSH
33438: EMPTY
33439: LIST
33440: LIST
33441: PUSH
33442: LD_INT 25
33444: PUSH
33445: LD_INT 8
33447: PUSH
33448: EMPTY
33449: LIST
33450: LIST
33451: PUSH
33452: LD_INT 25
33454: PUSH
33455: LD_INT 9
33457: PUSH
33458: EMPTY
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: PPUSH
33469: CALL_OW 72
33473: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
33474: LD_ADDR_VAR 0 4
33478: PUSH
33479: LD_VAR 0 4
33483: PUSH
33484: LD_VAR 0 4
33488: PPUSH
33489: LD_INT 18
33491: PPUSH
33492: CALL 87988 0 2
33496: DIFF
33497: ST_TO_ADDR
// if tmp then
33498: LD_VAR 0 4
33502: IFFALSE 33533
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
33504: LD_VAR 0 2
33508: PPUSH
33509: LD_VAR 0 4
33513: PPUSH
33514: LD_EXP 75
33518: PUSH
33519: LD_VAR 0 2
33523: ARRAY
33524: PPUSH
33525: CALL 49143 0 3
// exit ;
33529: POP
33530: POP
33531: GO 33606
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
33533: LD_EXP 73
33537: PUSH
33538: LD_VAR 0 2
33542: ARRAY
33543: PUSH
33544: LD_EXP 72
33548: PUSH
33549: LD_VAR 0 2
33553: ARRAY
33554: AND
33555: IFFALSE 33602
// begin tmp := mc_defender [ i ] ;
33557: LD_ADDR_VAR 0 4
33561: PUSH
33562: LD_EXP 72
33566: PUSH
33567: LD_VAR 0 2
33571: ARRAY
33572: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
33573: LD_VAR 0 2
33577: PPUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: LD_EXP 73
33587: PUSH
33588: LD_VAR 0 2
33592: ARRAY
33593: PPUSH
33594: CALL 49704 0 3
// exit ;
33598: POP
33599: POP
33600: GO 33606
// end ; end ;
33602: GO 33039
33604: POP
33605: POP
// end ;
33606: LD_VAR 0 1
33610: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
33611: LD_INT 0
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
// if not mc_bases then
33624: LD_EXP 50
33628: NOT
33629: IFFALSE 33633
// exit ;
33631: GO 34720
// for i = 1 to mc_bases do
33633: LD_ADDR_VAR 0 2
33637: PUSH
33638: DOUBLE
33639: LD_INT 1
33641: DEC
33642: ST_TO_ADDR
33643: LD_EXP 50
33647: PUSH
33648: FOR_TO
33649: IFFALSE 34718
// begin tmp := mc_lab [ i ] ;
33651: LD_ADDR_VAR 0 6
33655: PUSH
33656: LD_EXP 83
33660: PUSH
33661: LD_VAR 0 2
33665: ARRAY
33666: ST_TO_ADDR
// if not tmp then
33667: LD_VAR 0 6
33671: NOT
33672: IFFALSE 33676
// continue ;
33674: GO 33648
// idle_lab := 0 ;
33676: LD_ADDR_VAR 0 11
33680: PUSH
33681: LD_INT 0
33683: ST_TO_ADDR
// for j in tmp do
33684: LD_ADDR_VAR 0 3
33688: PUSH
33689: LD_VAR 0 6
33693: PUSH
33694: FOR_IN
33695: IFFALSE 34714
// begin researching := false ;
33697: LD_ADDR_VAR 0 10
33701: PUSH
33702: LD_INT 0
33704: ST_TO_ADDR
// side := GetSide ( j ) ;
33705: LD_ADDR_VAR 0 4
33709: PUSH
33710: LD_VAR 0 3
33714: PPUSH
33715: CALL_OW 255
33719: ST_TO_ADDR
// if not mc_tech [ side ] then
33720: LD_EXP 77
33724: PUSH
33725: LD_VAR 0 4
33729: ARRAY
33730: NOT
33731: IFFALSE 33735
// continue ;
33733: GO 33694
// if BuildingStatus ( j ) = bs_idle then
33735: LD_VAR 0 3
33739: PPUSH
33740: CALL_OW 461
33744: PUSH
33745: LD_INT 2
33747: EQUAL
33748: IFFALSE 33936
// begin if idle_lab and UnitsInside ( j ) < 6 then
33750: LD_VAR 0 11
33754: PUSH
33755: LD_VAR 0 3
33759: PPUSH
33760: CALL_OW 313
33764: PUSH
33765: LD_INT 6
33767: LESS
33768: AND
33769: IFFALSE 33840
// begin tmp2 := UnitsInside ( idle_lab ) ;
33771: LD_ADDR_VAR 0 9
33775: PUSH
33776: LD_VAR 0 11
33780: PPUSH
33781: CALL_OW 313
33785: ST_TO_ADDR
// if tmp2 then
33786: LD_VAR 0 9
33790: IFFALSE 33832
// for x in tmp2 do
33792: LD_ADDR_VAR 0 7
33796: PUSH
33797: LD_VAR 0 9
33801: PUSH
33802: FOR_IN
33803: IFFALSE 33830
// begin ComExitBuilding ( x ) ;
33805: LD_VAR 0 7
33809: PPUSH
33810: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
33814: LD_VAR 0 7
33818: PPUSH
33819: LD_VAR 0 3
33823: PPUSH
33824: CALL_OW 180
// end ;
33828: GO 33802
33830: POP
33831: POP
// idle_lab := 0 ;
33832: LD_ADDR_VAR 0 11
33836: PUSH
33837: LD_INT 0
33839: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
33840: LD_ADDR_VAR 0 5
33844: PUSH
33845: LD_EXP 77
33849: PUSH
33850: LD_VAR 0 4
33854: ARRAY
33855: PUSH
33856: FOR_IN
33857: IFFALSE 33917
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
33859: LD_VAR 0 3
33863: PPUSH
33864: LD_VAR 0 5
33868: PPUSH
33869: CALL_OW 430
33873: PUSH
33874: LD_VAR 0 4
33878: PPUSH
33879: LD_VAR 0 5
33883: PPUSH
33884: CALL 48213 0 2
33888: AND
33889: IFFALSE 33915
// begin researching := true ;
33891: LD_ADDR_VAR 0 10
33895: PUSH
33896: LD_INT 1
33898: ST_TO_ADDR
// ComResearch ( j , t ) ;
33899: LD_VAR 0 3
33903: PPUSH
33904: LD_VAR 0 5
33908: PPUSH
33909: CALL_OW 124
// break ;
33913: GO 33917
// end ;
33915: GO 33856
33917: POP
33918: POP
// if not researching then
33919: LD_VAR 0 10
33923: NOT
33924: IFFALSE 33936
// idle_lab := j ;
33926: LD_ADDR_VAR 0 11
33930: PUSH
33931: LD_VAR 0 3
33935: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
33936: LD_VAR 0 3
33940: PPUSH
33941: CALL_OW 461
33945: PUSH
33946: LD_INT 10
33948: EQUAL
33949: IFFALSE 34537
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
33951: LD_EXP 79
33955: PUSH
33956: LD_VAR 0 2
33960: ARRAY
33961: NOT
33962: PUSH
33963: LD_EXP 80
33967: PUSH
33968: LD_VAR 0 2
33972: ARRAY
33973: NOT
33974: AND
33975: PUSH
33976: LD_EXP 77
33980: PUSH
33981: LD_VAR 0 4
33985: ARRAY
33986: PUSH
33987: LD_INT 1
33989: GREATER
33990: AND
33991: IFFALSE 34122
// begin ComCancel ( j ) ;
33993: LD_VAR 0 3
33997: PPUSH
33998: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
34002: LD_ADDR_EXP 77
34006: PUSH
34007: LD_EXP 77
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: LD_EXP 77
34021: PUSH
34022: LD_VAR 0 4
34026: ARRAY
34027: PPUSH
34028: LD_EXP 77
34032: PUSH
34033: LD_VAR 0 4
34037: ARRAY
34038: PUSH
34039: LD_INT 1
34041: MINUS
34042: PPUSH
34043: LD_EXP 77
34047: PUSH
34048: LD_VAR 0 4
34052: ARRAY
34053: PPUSH
34054: LD_INT 0
34056: PPUSH
34057: CALL 54136 0 4
34061: PPUSH
34062: CALL_OW 1
34066: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
34067: LD_ADDR_EXP 77
34071: PUSH
34072: LD_EXP 77
34076: PPUSH
34077: LD_VAR 0 4
34081: PPUSH
34082: LD_EXP 77
34086: PUSH
34087: LD_VAR 0 4
34091: ARRAY
34092: PPUSH
34093: LD_EXP 77
34097: PUSH
34098: LD_VAR 0 4
34102: ARRAY
34103: PPUSH
34104: LD_INT 1
34106: PPUSH
34107: LD_INT 0
34109: PPUSH
34110: CALL 54136 0 4
34114: PPUSH
34115: CALL_OW 1
34119: ST_TO_ADDR
// continue ;
34120: GO 33694
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
34122: LD_EXP 79
34126: PUSH
34127: LD_VAR 0 2
34131: ARRAY
34132: PUSH
34133: LD_EXP 80
34137: PUSH
34138: LD_VAR 0 2
34142: ARRAY
34143: NOT
34144: AND
34145: IFFALSE 34272
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
34147: LD_ADDR_EXP 80
34151: PUSH
34152: LD_EXP 80
34156: PPUSH
34157: LD_VAR 0 2
34161: PUSH
34162: LD_EXP 80
34166: PUSH
34167: LD_VAR 0 2
34171: ARRAY
34172: PUSH
34173: LD_INT 1
34175: PLUS
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PPUSH
34181: LD_EXP 79
34185: PUSH
34186: LD_VAR 0 2
34190: ARRAY
34191: PUSH
34192: LD_INT 1
34194: ARRAY
34195: PPUSH
34196: CALL 54718 0 3
34200: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
34201: LD_EXP 79
34205: PUSH
34206: LD_VAR 0 2
34210: ARRAY
34211: PUSH
34212: LD_INT 1
34214: ARRAY
34215: PPUSH
34216: LD_INT 112
34218: PPUSH
34219: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
34223: LD_ADDR_VAR 0 9
34227: PUSH
34228: LD_EXP 79
34232: PUSH
34233: LD_VAR 0 2
34237: ARRAY
34238: PPUSH
34239: LD_INT 1
34241: PPUSH
34242: CALL_OW 3
34246: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
34247: LD_ADDR_EXP 79
34251: PUSH
34252: LD_EXP 79
34256: PPUSH
34257: LD_VAR 0 2
34261: PPUSH
34262: LD_VAR 0 9
34266: PPUSH
34267: CALL_OW 1
34271: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
34272: LD_EXP 79
34276: PUSH
34277: LD_VAR 0 2
34281: ARRAY
34282: PUSH
34283: LD_EXP 80
34287: PUSH
34288: LD_VAR 0 2
34292: ARRAY
34293: AND
34294: PUSH
34295: LD_EXP 80
34299: PUSH
34300: LD_VAR 0 2
34304: ARRAY
34305: PUSH
34306: LD_INT 1
34308: ARRAY
34309: PPUSH
34310: CALL_OW 310
34314: NOT
34315: AND
34316: PUSH
34317: LD_VAR 0 3
34321: PPUSH
34322: CALL_OW 313
34326: PUSH
34327: LD_INT 6
34329: EQUAL
34330: AND
34331: IFFALSE 34387
// begin tmp2 := UnitsInside ( j ) ;
34333: LD_ADDR_VAR 0 9
34337: PUSH
34338: LD_VAR 0 3
34342: PPUSH
34343: CALL_OW 313
34347: ST_TO_ADDR
// if tmp2 = 6 then
34348: LD_VAR 0 9
34352: PUSH
34353: LD_INT 6
34355: EQUAL
34356: IFFALSE 34387
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
34358: LD_VAR 0 9
34362: PUSH
34363: LD_INT 1
34365: ARRAY
34366: PPUSH
34367: LD_INT 112
34369: PPUSH
34370: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
34374: LD_VAR 0 9
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PPUSH
34383: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
34387: LD_EXP 80
34391: PUSH
34392: LD_VAR 0 2
34396: ARRAY
34397: PUSH
34398: LD_EXP 80
34402: PUSH
34403: LD_VAR 0 2
34407: ARRAY
34408: PUSH
34409: LD_INT 1
34411: ARRAY
34412: PPUSH
34413: CALL_OW 314
34417: NOT
34418: AND
34419: PUSH
34420: LD_EXP 80
34424: PUSH
34425: LD_VAR 0 2
34429: ARRAY
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: PPUSH
34435: CALL_OW 310
34439: NOT
34440: AND
34441: IFFALSE 34467
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
34443: LD_EXP 80
34447: PUSH
34448: LD_VAR 0 2
34452: ARRAY
34453: PUSH
34454: LD_INT 1
34456: ARRAY
34457: PPUSH
34458: LD_VAR 0 3
34462: PPUSH
34463: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
34467: LD_EXP 80
34471: PUSH
34472: LD_VAR 0 2
34476: ARRAY
34477: PUSH
34478: LD_INT 1
34480: ARRAY
34481: PPUSH
34482: CALL_OW 310
34486: PUSH
34487: LD_EXP 80
34491: PUSH
34492: LD_VAR 0 2
34496: ARRAY
34497: PUSH
34498: LD_INT 1
34500: ARRAY
34501: PPUSH
34502: CALL_OW 310
34506: PPUSH
34507: CALL_OW 461
34511: PUSH
34512: LD_INT 3
34514: NONEQUAL
34515: AND
34516: IFFALSE 34537
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
34518: LD_EXP 80
34522: PUSH
34523: LD_VAR 0 2
34527: ARRAY
34528: PUSH
34529: LD_INT 1
34531: ARRAY
34532: PPUSH
34533: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
34537: LD_VAR 0 3
34541: PPUSH
34542: CALL_OW 461
34546: PUSH
34547: LD_INT 6
34549: EQUAL
34550: PUSH
34551: LD_VAR 0 6
34555: PUSH
34556: LD_INT 1
34558: GREATER
34559: AND
34560: IFFALSE 34712
// begin sci := [ ] ;
34562: LD_ADDR_VAR 0 8
34566: PUSH
34567: EMPTY
34568: ST_TO_ADDR
// for x in ( tmp diff j ) do
34569: LD_ADDR_VAR 0 7
34573: PUSH
34574: LD_VAR 0 6
34578: PUSH
34579: LD_VAR 0 3
34583: DIFF
34584: PUSH
34585: FOR_IN
34586: IFFALSE 34638
// begin if sci = 6 then
34588: LD_VAR 0 8
34592: PUSH
34593: LD_INT 6
34595: EQUAL
34596: IFFALSE 34600
// break ;
34598: GO 34638
// if BuildingStatus ( x ) = bs_idle then
34600: LD_VAR 0 7
34604: PPUSH
34605: CALL_OW 461
34609: PUSH
34610: LD_INT 2
34612: EQUAL
34613: IFFALSE 34636
// sci := sci ^ UnitsInside ( x ) ;
34615: LD_ADDR_VAR 0 8
34619: PUSH
34620: LD_VAR 0 8
34624: PUSH
34625: LD_VAR 0 7
34629: PPUSH
34630: CALL_OW 313
34634: ADD
34635: ST_TO_ADDR
// end ;
34636: GO 34585
34638: POP
34639: POP
// if not sci then
34640: LD_VAR 0 8
34644: NOT
34645: IFFALSE 34649
// continue ;
34647: GO 33694
// for x in sci do
34649: LD_ADDR_VAR 0 7
34653: PUSH
34654: LD_VAR 0 8
34658: PUSH
34659: FOR_IN
34660: IFFALSE 34710
// if IsInUnit ( x ) and not HasTask ( x ) then
34662: LD_VAR 0 7
34666: PPUSH
34667: CALL_OW 310
34671: PUSH
34672: LD_VAR 0 7
34676: PPUSH
34677: CALL_OW 314
34681: NOT
34682: AND
34683: IFFALSE 34708
// begin ComExitBuilding ( x ) ;
34685: LD_VAR 0 7
34689: PPUSH
34690: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
34694: LD_VAR 0 7
34698: PPUSH
34699: LD_VAR 0 3
34703: PPUSH
34704: CALL_OW 180
// end ;
34708: GO 34659
34710: POP
34711: POP
// end ; end ;
34712: GO 33694
34714: POP
34715: POP
// end ;
34716: GO 33648
34718: POP
34719: POP
// end ;
34720: LD_VAR 0 1
34724: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
// if not mc_bases then
34729: LD_EXP 50
34733: NOT
34734: IFFALSE 34738
// exit ;
34736: GO 34819
// for i = 1 to mc_bases do
34738: LD_ADDR_VAR 0 2
34742: PUSH
34743: DOUBLE
34744: LD_INT 1
34746: DEC
34747: ST_TO_ADDR
34748: LD_EXP 50
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34817
// if mc_mines [ i ] and mc_miners [ i ] then
34756: LD_EXP 63
34760: PUSH
34761: LD_VAR 0 2
34765: ARRAY
34766: PUSH
34767: LD_EXP 64
34771: PUSH
34772: LD_VAR 0 2
34776: ARRAY
34777: AND
34778: IFFALSE 34815
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
34780: LD_EXP 64
34784: PUSH
34785: LD_VAR 0 2
34789: ARRAY
34790: PUSH
34791: LD_INT 1
34793: ARRAY
34794: PPUSH
34795: CALL_OW 255
34799: PPUSH
34800: LD_EXP 63
34804: PUSH
34805: LD_VAR 0 2
34809: ARRAY
34810: PPUSH
34811: CALL 51707 0 2
34815: GO 34753
34817: POP
34818: POP
// end ;
34819: LD_VAR 0 1
34823: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
34824: LD_INT 0
34826: PPUSH
34827: PPUSH
34828: PPUSH
34829: PPUSH
34830: PPUSH
34831: PPUSH
34832: PPUSH
34833: PPUSH
// if not mc_bases or not mc_parking then
34834: LD_EXP 50
34838: NOT
34839: PUSH
34840: LD_EXP 74
34844: NOT
34845: OR
34846: IFFALSE 34850
// exit ;
34848: GO 35549
// for i = 1 to mc_bases do
34850: LD_ADDR_VAR 0 2
34854: PUSH
34855: DOUBLE
34856: LD_INT 1
34858: DEC
34859: ST_TO_ADDR
34860: LD_EXP 50
34864: PUSH
34865: FOR_TO
34866: IFFALSE 35547
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
34868: LD_EXP 50
34872: PUSH
34873: LD_VAR 0 2
34877: ARRAY
34878: NOT
34879: PUSH
34880: LD_EXP 74
34884: PUSH
34885: LD_VAR 0 2
34889: ARRAY
34890: NOT
34891: OR
34892: IFFALSE 34896
// continue ;
34894: GO 34865
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: LD_EXP 50
34905: PUSH
34906: LD_VAR 0 2
34910: ARRAY
34911: PUSH
34912: LD_INT 1
34914: ARRAY
34915: PPUSH
34916: CALL_OW 255
34920: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
34921: LD_ADDR_VAR 0 6
34925: PUSH
34926: LD_EXP 50
34930: PUSH
34931: LD_VAR 0 2
34935: ARRAY
34936: PPUSH
34937: LD_INT 30
34939: PUSH
34940: LD_INT 3
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PPUSH
34947: CALL_OW 72
34951: ST_TO_ADDR
// if not fac then
34952: LD_VAR 0 6
34956: NOT
34957: IFFALSE 35008
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
34959: LD_ADDR_VAR 0 6
34963: PUSH
34964: LD_EXP 50
34968: PUSH
34969: LD_VAR 0 2
34973: ARRAY
34974: PPUSH
34975: LD_INT 2
34977: PUSH
34978: LD_INT 30
34980: PUSH
34981: LD_INT 0
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: LD_INT 30
34990: PUSH
34991: LD_INT 1
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: LIST
35002: PPUSH
35003: CALL_OW 72
35007: ST_TO_ADDR
// if not fac then
35008: LD_VAR 0 6
35012: NOT
35013: IFFALSE 35017
// continue ;
35015: GO 34865
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35017: LD_ADDR_VAR 0 7
35021: PUSH
35022: LD_EXP 74
35026: PUSH
35027: LD_VAR 0 2
35031: ARRAY
35032: PPUSH
35033: LD_INT 22
35035: PUSH
35036: LD_VAR 0 5
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: LD_INT 21
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 3
35057: PUSH
35058: LD_INT 24
35060: PUSH
35061: LD_INT 1000
35063: PUSH
35064: EMPTY
35065: LIST
35066: LIST
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: LIST
35076: PPUSH
35077: CALL_OW 70
35081: ST_TO_ADDR
// for j in fac do
35082: LD_ADDR_VAR 0 3
35086: PUSH
35087: LD_VAR 0 6
35091: PUSH
35092: FOR_IN
35093: IFFALSE 35174
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
35095: LD_ADDR_VAR 0 7
35099: PUSH
35100: LD_VAR 0 7
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_VAR 0 5
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: LD_INT 91
35119: PUSH
35120: LD_VAR 0 3
35124: PUSH
35125: LD_INT 15
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: LIST
35132: PUSH
35133: LD_INT 21
35135: PUSH
35136: LD_INT 2
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 3
35145: PUSH
35146: LD_INT 24
35148: PUSH
35149: LD_INT 1000
35151: PUSH
35152: EMPTY
35153: LIST
35154: LIST
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: PPUSH
35166: CALL_OW 69
35170: UNION
35171: ST_TO_ADDR
35172: GO 35092
35174: POP
35175: POP
// if not vehs then
35176: LD_VAR 0 7
35180: NOT
35181: IFFALSE 35207
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
35183: LD_ADDR_EXP 62
35187: PUSH
35188: LD_EXP 62
35192: PPUSH
35193: LD_VAR 0 2
35197: PPUSH
35198: EMPTY
35199: PPUSH
35200: CALL_OW 1
35204: ST_TO_ADDR
// continue ;
35205: GO 34865
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
35207: LD_ADDR_VAR 0 8
35211: PUSH
35212: LD_EXP 50
35216: PUSH
35217: LD_VAR 0 2
35221: ARRAY
35222: PPUSH
35223: LD_INT 30
35225: PUSH
35226: LD_INT 3
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PPUSH
35233: CALL_OW 72
35237: ST_TO_ADDR
// if tmp then
35238: LD_VAR 0 8
35242: IFFALSE 35345
// begin for j in tmp do
35244: LD_ADDR_VAR 0 3
35248: PUSH
35249: LD_VAR 0 8
35253: PUSH
35254: FOR_IN
35255: IFFALSE 35343
// for k in UnitsInside ( j ) do
35257: LD_ADDR_VAR 0 4
35261: PUSH
35262: LD_VAR 0 3
35266: PPUSH
35267: CALL_OW 313
35271: PUSH
35272: FOR_IN
35273: IFFALSE 35339
// if k then
35275: LD_VAR 0 4
35279: IFFALSE 35337
// if not k in mc_repair_vehicle [ i ] then
35281: LD_VAR 0 4
35285: PUSH
35286: LD_EXP 62
35290: PUSH
35291: LD_VAR 0 2
35295: ARRAY
35296: IN
35297: NOT
35298: IFFALSE 35337
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
35300: LD_ADDR_EXP 62
35304: PUSH
35305: LD_EXP 62
35309: PPUSH
35310: LD_VAR 0 2
35314: PPUSH
35315: LD_EXP 62
35319: PUSH
35320: LD_VAR 0 2
35324: ARRAY
35325: PUSH
35326: LD_VAR 0 4
35330: UNION
35331: PPUSH
35332: CALL_OW 1
35336: ST_TO_ADDR
35337: GO 35272
35339: POP
35340: POP
35341: GO 35254
35343: POP
35344: POP
// end ; if not mc_repair_vehicle [ i ] then
35345: LD_EXP 62
35349: PUSH
35350: LD_VAR 0 2
35354: ARRAY
35355: NOT
35356: IFFALSE 35360
// continue ;
35358: GO 34865
// for j in mc_repair_vehicle [ i ] do
35360: LD_ADDR_VAR 0 3
35364: PUSH
35365: LD_EXP 62
35369: PUSH
35370: LD_VAR 0 2
35374: ARRAY
35375: PUSH
35376: FOR_IN
35377: IFFALSE 35543
// begin if GetClass ( j ) <> 3 then
35379: LD_VAR 0 3
35383: PPUSH
35384: CALL_OW 257
35388: PUSH
35389: LD_INT 3
35391: NONEQUAL
35392: IFFALSE 35433
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
35394: LD_ADDR_EXP 62
35398: PUSH
35399: LD_EXP 62
35403: PPUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: LD_EXP 62
35413: PUSH
35414: LD_VAR 0 2
35418: ARRAY
35419: PUSH
35420: LD_VAR 0 3
35424: DIFF
35425: PPUSH
35426: CALL_OW 1
35430: ST_TO_ADDR
// continue ;
35431: GO 35376
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
35433: LD_VAR 0 3
35437: PPUSH
35438: CALL_OW 311
35442: NOT
35443: PUSH
35444: LD_VAR 0 3
35448: PUSH
35449: LD_EXP 53
35453: PUSH
35454: LD_VAR 0 2
35458: ARRAY
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: IN
35464: NOT
35465: AND
35466: PUSH
35467: LD_VAR 0 3
35471: PUSH
35472: LD_EXP 53
35476: PUSH
35477: LD_VAR 0 2
35481: ARRAY
35482: PUSH
35483: LD_INT 2
35485: ARRAY
35486: IN
35487: NOT
35488: AND
35489: IFFALSE 35541
// begin if IsInUnit ( j ) then
35491: LD_VAR 0 3
35495: PPUSH
35496: CALL_OW 310
35500: IFFALSE 35511
// ComExitBuilding ( j ) ;
35502: LD_VAR 0 3
35506: PPUSH
35507: CALL_OW 122
// if not HasTask ( j ) then
35511: LD_VAR 0 3
35515: PPUSH
35516: CALL_OW 314
35520: NOT
35521: IFFALSE 35541
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
35523: LD_VAR 0 3
35527: PPUSH
35528: LD_VAR 0 7
35532: PUSH
35533: LD_INT 1
35535: ARRAY
35536: PPUSH
35537: CALL_OW 189
// end ; end ;
35541: GO 35376
35543: POP
35544: POP
// end ;
35545: GO 34865
35547: POP
35548: POP
// end ;
35549: LD_VAR 0 1
35553: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
35554: LD_INT 0
35556: PPUSH
35557: PPUSH
35558: PPUSH
35559: PPUSH
35560: PPUSH
35561: PPUSH
35562: PPUSH
35563: PPUSH
35564: PPUSH
35565: PPUSH
35566: PPUSH
// if not mc_bases then
35567: LD_EXP 50
35571: NOT
35572: IFFALSE 35576
// exit ;
35574: GO 36378
// for i = 1 to mc_bases do
35576: LD_ADDR_VAR 0 2
35580: PUSH
35581: DOUBLE
35582: LD_INT 1
35584: DEC
35585: ST_TO_ADDR
35586: LD_EXP 50
35590: PUSH
35591: FOR_TO
35592: IFFALSE 36376
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
35594: LD_EXP 78
35598: PUSH
35599: LD_VAR 0 2
35603: ARRAY
35604: NOT
35605: PUSH
35606: LD_EXP 53
35610: PUSH
35611: LD_VAR 0 2
35615: ARRAY
35616: PUSH
35617: LD_INT 1
35619: ARRAY
35620: OR
35621: PUSH
35622: LD_EXP 53
35626: PUSH
35627: LD_VAR 0 2
35631: ARRAY
35632: PUSH
35633: LD_INT 2
35635: ARRAY
35636: OR
35637: PUSH
35638: LD_EXP 76
35642: PUSH
35643: LD_VAR 0 2
35647: ARRAY
35648: PPUSH
35649: LD_INT 1
35651: PPUSH
35652: CALL_OW 325
35656: NOT
35657: OR
35658: PUSH
35659: LD_EXP 73
35663: PUSH
35664: LD_VAR 0 2
35668: ARRAY
35669: OR
35670: IFFALSE 35674
// continue ;
35672: GO 35591
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
35674: LD_ADDR_VAR 0 8
35678: PUSH
35679: LD_EXP 50
35683: PUSH
35684: LD_VAR 0 2
35688: ARRAY
35689: PPUSH
35690: LD_INT 25
35692: PUSH
35693: LD_INT 4
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 50
35702: PUSH
35703: EMPTY
35704: LIST
35705: PUSH
35706: LD_INT 3
35708: PUSH
35709: LD_INT 60
35711: PUSH
35712: EMPTY
35713: LIST
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: EMPTY
35720: LIST
35721: LIST
35722: LIST
35723: PPUSH
35724: CALL_OW 72
35728: PUSH
35729: LD_EXP 54
35733: PUSH
35734: LD_VAR 0 2
35738: ARRAY
35739: DIFF
35740: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
35741: LD_ADDR_VAR 0 9
35745: PUSH
35746: LD_EXP 50
35750: PUSH
35751: LD_VAR 0 2
35755: ARRAY
35756: PPUSH
35757: LD_INT 2
35759: PUSH
35760: LD_INT 30
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 30
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: LIST
35784: PPUSH
35785: CALL_OW 72
35789: ST_TO_ADDR
// if not tmp or not dep then
35790: LD_VAR 0 8
35794: NOT
35795: PUSH
35796: LD_VAR 0 9
35800: NOT
35801: OR
35802: IFFALSE 35806
// continue ;
35804: GO 35591
// side := GetSide ( tmp [ 1 ] ) ;
35806: LD_ADDR_VAR 0 11
35810: PUSH
35811: LD_VAR 0 8
35815: PUSH
35816: LD_INT 1
35818: ARRAY
35819: PPUSH
35820: CALL_OW 255
35824: ST_TO_ADDR
// dep := dep [ 1 ] ;
35825: LD_ADDR_VAR 0 9
35829: PUSH
35830: LD_VAR 0 9
35834: PUSH
35835: LD_INT 1
35837: ARRAY
35838: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
35839: LD_ADDR_VAR 0 7
35843: PUSH
35844: LD_EXP 78
35848: PUSH
35849: LD_VAR 0 2
35853: ARRAY
35854: PPUSH
35855: LD_INT 22
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 25
35867: PUSH
35868: LD_INT 12
35870: PUSH
35871: EMPTY
35872: LIST
35873: LIST
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PPUSH
35879: CALL_OW 70
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 25
35896: PUSH
35897: LD_INT 12
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 91
35906: PUSH
35907: LD_VAR 0 9
35911: PUSH
35912: LD_INT 20
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: PPUSH
35925: CALL_OW 69
35929: UNION
35930: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
35931: LD_ADDR_VAR 0 10
35935: PUSH
35936: LD_EXP 78
35940: PUSH
35941: LD_VAR 0 2
35945: ARRAY
35946: PPUSH
35947: LD_INT 81
35949: PUSH
35950: LD_VAR 0 11
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PPUSH
35959: CALL_OW 70
35963: ST_TO_ADDR
// if not apes or danger_at_area then
35964: LD_VAR 0 7
35968: NOT
35969: PUSH
35970: LD_VAR 0 10
35974: OR
35975: IFFALSE 36025
// begin if mc_taming [ i ] then
35977: LD_EXP 81
35981: PUSH
35982: LD_VAR 0 2
35986: ARRAY
35987: IFFALSE 36023
// begin MC_Reset ( i , 121 ) ;
35989: LD_VAR 0 2
35993: PPUSH
35994: LD_INT 121
35996: PPUSH
35997: CALL 21460 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
36001: LD_ADDR_EXP 81
36005: PUSH
36006: LD_EXP 81
36010: PPUSH
36011: LD_VAR 0 2
36015: PPUSH
36016: EMPTY
36017: PPUSH
36018: CALL_OW 1
36022: ST_TO_ADDR
// end ; continue ;
36023: GO 35591
// end ; for j in tmp do
36025: LD_ADDR_VAR 0 3
36029: PUSH
36030: LD_VAR 0 8
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36372
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
36038: LD_VAR 0 3
36042: PUSH
36043: LD_EXP 81
36047: PUSH
36048: LD_VAR 0 2
36052: ARRAY
36053: IN
36054: NOT
36055: PUSH
36056: LD_EXP 81
36060: PUSH
36061: LD_VAR 0 2
36065: ARRAY
36066: PUSH
36067: LD_INT 3
36069: LESS
36070: AND
36071: IFFALSE 36129
// begin SetTag ( j , 121 ) ;
36073: LD_VAR 0 3
36077: PPUSH
36078: LD_INT 121
36080: PPUSH
36081: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
36085: LD_ADDR_EXP 81
36089: PUSH
36090: LD_EXP 81
36094: PPUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_EXP 81
36104: PUSH
36105: LD_VAR 0 2
36109: ARRAY
36110: PUSH
36111: LD_INT 1
36113: PLUS
36114: PUSH
36115: EMPTY
36116: LIST
36117: LIST
36118: PPUSH
36119: LD_VAR 0 3
36123: PPUSH
36124: CALL 54718 0 3
36128: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
36129: LD_VAR 0 3
36133: PUSH
36134: LD_EXP 81
36138: PUSH
36139: LD_VAR 0 2
36143: ARRAY
36144: IN
36145: IFFALSE 36370
// begin if GetClass ( j ) <> 4 then
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 257
36156: PUSH
36157: LD_INT 4
36159: NONEQUAL
36160: IFFALSE 36213
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
36162: LD_ADDR_EXP 81
36166: PUSH
36167: LD_EXP 81
36171: PPUSH
36172: LD_VAR 0 2
36176: PPUSH
36177: LD_EXP 81
36181: PUSH
36182: LD_VAR 0 2
36186: ARRAY
36187: PUSH
36188: LD_VAR 0 3
36192: DIFF
36193: PPUSH
36194: CALL_OW 1
36198: ST_TO_ADDR
// SetTag ( j , 0 ) ;
36199: LD_VAR 0 3
36203: PPUSH
36204: LD_INT 0
36206: PPUSH
36207: CALL_OW 109
// continue ;
36211: GO 36035
// end ; if IsInUnit ( j ) then
36213: LD_VAR 0 3
36217: PPUSH
36218: CALL_OW 310
36222: IFFALSE 36233
// ComExitBuilding ( j ) ;
36224: LD_VAR 0 3
36228: PPUSH
36229: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
36233: LD_ADDR_VAR 0 6
36237: PUSH
36238: LD_VAR 0 7
36242: PPUSH
36243: LD_VAR 0 3
36247: PPUSH
36248: CALL_OW 74
36252: ST_TO_ADDR
// if not ape then
36253: LD_VAR 0 6
36257: NOT
36258: IFFALSE 36262
// break ;
36260: GO 36372
// x := GetX ( ape ) ;
36262: LD_ADDR_VAR 0 4
36266: PUSH
36267: LD_VAR 0 6
36271: PPUSH
36272: CALL_OW 250
36276: ST_TO_ADDR
// y := GetY ( ape ) ;
36277: LD_ADDR_VAR 0 5
36281: PUSH
36282: LD_VAR 0 6
36286: PPUSH
36287: CALL_OW 251
36291: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36292: LD_VAR 0 4
36296: PPUSH
36297: LD_VAR 0 5
36301: PPUSH
36302: CALL_OW 488
36306: NOT
36307: PUSH
36308: LD_VAR 0 11
36312: PPUSH
36313: LD_VAR 0 4
36317: PPUSH
36318: LD_VAR 0 5
36322: PPUSH
36323: LD_INT 20
36325: PPUSH
36326: CALL 55614 0 4
36330: PUSH
36331: LD_INT 4
36333: ARRAY
36334: OR
36335: IFFALSE 36339
// break ;
36337: GO 36372
// if not HasTask ( j ) then
36339: LD_VAR 0 3
36343: PPUSH
36344: CALL_OW 314
36348: NOT
36349: IFFALSE 36370
// ComTameXY ( j , x , y ) ;
36351: LD_VAR 0 3
36355: PPUSH
36356: LD_VAR 0 4
36360: PPUSH
36361: LD_VAR 0 5
36365: PPUSH
36366: CALL_OW 131
// end ; end ;
36370: GO 36035
36372: POP
36373: POP
// end ;
36374: GO 35591
36376: POP
36377: POP
// end ;
36378: LD_VAR 0 1
36382: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
36383: LD_INT 0
36385: PPUSH
36386: PPUSH
36387: PPUSH
36388: PPUSH
36389: PPUSH
36390: PPUSH
36391: PPUSH
36392: PPUSH
// if not mc_bases then
36393: LD_EXP 50
36397: NOT
36398: IFFALSE 36402
// exit ;
36400: GO 37028
// for i = 1 to mc_bases do
36402: LD_ADDR_VAR 0 2
36406: PUSH
36407: DOUBLE
36408: LD_INT 1
36410: DEC
36411: ST_TO_ADDR
36412: LD_EXP 50
36416: PUSH
36417: FOR_TO
36418: IFFALSE 37026
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
36420: LD_EXP 79
36424: PUSH
36425: LD_VAR 0 2
36429: ARRAY
36430: NOT
36431: PUSH
36432: LD_EXP 79
36436: PUSH
36437: LD_VAR 0 2
36441: ARRAY
36442: PPUSH
36443: LD_INT 25
36445: PUSH
36446: LD_INT 12
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PPUSH
36453: CALL_OW 72
36457: NOT
36458: OR
36459: IFFALSE 36463
// continue ;
36461: GO 36417
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_EXP 79
36472: PUSH
36473: LD_VAR 0 2
36477: ARRAY
36478: PUSH
36479: LD_INT 1
36481: ARRAY
36482: PPUSH
36483: CALL_OW 255
36487: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
36488: LD_VAR 0 5
36492: PPUSH
36493: LD_INT 2
36495: PPUSH
36496: CALL_OW 325
36500: IFFALSE 36753
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36502: LD_ADDR_VAR 0 4
36506: PUSH
36507: LD_EXP 79
36511: PUSH
36512: LD_VAR 0 2
36516: ARRAY
36517: PPUSH
36518: LD_INT 25
36520: PUSH
36521: LD_INT 16
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: PPUSH
36528: CALL_OW 72
36532: ST_TO_ADDR
// if tmp < 6 then
36533: LD_VAR 0 4
36537: PUSH
36538: LD_INT 6
36540: LESS
36541: IFFALSE 36753
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
36543: LD_ADDR_VAR 0 6
36547: PUSH
36548: LD_EXP 50
36552: PUSH
36553: LD_VAR 0 2
36557: ARRAY
36558: PPUSH
36559: LD_INT 2
36561: PUSH
36562: LD_INT 30
36564: PUSH
36565: LD_INT 0
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 30
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: LIST
36586: PPUSH
36587: CALL_OW 72
36591: ST_TO_ADDR
// if depot then
36592: LD_VAR 0 6
36596: IFFALSE 36753
// begin selected := 0 ;
36598: LD_ADDR_VAR 0 7
36602: PUSH
36603: LD_INT 0
36605: ST_TO_ADDR
// for j in depot do
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_VAR 0 6
36615: PUSH
36616: FOR_IN
36617: IFFALSE 36648
// begin if UnitsInside ( j ) < 6 then
36619: LD_VAR 0 3
36623: PPUSH
36624: CALL_OW 313
36628: PUSH
36629: LD_INT 6
36631: LESS
36632: IFFALSE 36646
// begin selected := j ;
36634: LD_ADDR_VAR 0 7
36638: PUSH
36639: LD_VAR 0 3
36643: ST_TO_ADDR
// break ;
36644: GO 36648
// end ; end ;
36646: GO 36616
36648: POP
36649: POP
// if selected then
36650: LD_VAR 0 7
36654: IFFALSE 36753
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36656: LD_ADDR_VAR 0 3
36660: PUSH
36661: LD_EXP 79
36665: PUSH
36666: LD_VAR 0 2
36670: ARRAY
36671: PPUSH
36672: LD_INT 25
36674: PUSH
36675: LD_INT 12
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PPUSH
36682: CALL_OW 72
36686: PUSH
36687: FOR_IN
36688: IFFALSE 36751
// if not HasTask ( j ) then
36690: LD_VAR 0 3
36694: PPUSH
36695: CALL_OW 314
36699: NOT
36700: IFFALSE 36749
// begin if not IsInUnit ( j ) then
36702: LD_VAR 0 3
36706: PPUSH
36707: CALL_OW 310
36711: NOT
36712: IFFALSE 36728
// ComEnterUnit ( j , selected ) ;
36714: LD_VAR 0 3
36718: PPUSH
36719: LD_VAR 0 7
36723: PPUSH
36724: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
36728: LD_VAR 0 3
36732: PPUSH
36733: LD_INT 16
36735: PPUSH
36736: CALL_OW 183
// AddComExitBuilding ( j ) ;
36740: LD_VAR 0 3
36744: PPUSH
36745: CALL_OW 182
// end ;
36749: GO 36687
36751: POP
36752: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
36753: LD_VAR 0 5
36757: PPUSH
36758: LD_INT 11
36760: PPUSH
36761: CALL_OW 325
36765: IFFALSE 37024
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_EXP 79
36776: PUSH
36777: LD_VAR 0 2
36781: ARRAY
36782: PPUSH
36783: LD_INT 25
36785: PUSH
36786: LD_INT 16
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PPUSH
36793: CALL_OW 72
36797: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
36798: LD_VAR 0 4
36802: PUSH
36803: LD_INT 6
36805: GREATEREQUAL
36806: PUSH
36807: LD_VAR 0 5
36811: PPUSH
36812: LD_INT 2
36814: PPUSH
36815: CALL_OW 325
36819: NOT
36820: OR
36821: IFFALSE 37024
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
36823: LD_ADDR_VAR 0 8
36827: PUSH
36828: LD_EXP 50
36832: PUSH
36833: LD_VAR 0 2
36837: ARRAY
36838: PPUSH
36839: LD_INT 2
36841: PUSH
36842: LD_INT 30
36844: PUSH
36845: LD_INT 4
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: PUSH
36852: LD_INT 30
36854: PUSH
36855: LD_INT 5
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: LIST
36866: PPUSH
36867: CALL_OW 72
36871: ST_TO_ADDR
// if barracks then
36872: LD_VAR 0 8
36876: IFFALSE 37024
// begin selected := 0 ;
36878: LD_ADDR_VAR 0 7
36882: PUSH
36883: LD_INT 0
36885: ST_TO_ADDR
// for j in barracks do
36886: LD_ADDR_VAR 0 3
36890: PUSH
36891: LD_VAR 0 8
36895: PUSH
36896: FOR_IN
36897: IFFALSE 36928
// begin if UnitsInside ( j ) < 6 then
36899: LD_VAR 0 3
36903: PPUSH
36904: CALL_OW 313
36908: PUSH
36909: LD_INT 6
36911: LESS
36912: IFFALSE 36926
// begin selected := j ;
36914: LD_ADDR_VAR 0 7
36918: PUSH
36919: LD_VAR 0 3
36923: ST_TO_ADDR
// break ;
36924: GO 36928
// end ; end ;
36926: GO 36896
36928: POP
36929: POP
// if selected then
36930: LD_VAR 0 7
36934: IFFALSE 37024
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
36936: LD_ADDR_VAR 0 3
36940: PUSH
36941: LD_EXP 79
36945: PUSH
36946: LD_VAR 0 2
36950: ARRAY
36951: PPUSH
36952: LD_INT 25
36954: PUSH
36955: LD_INT 12
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PPUSH
36962: CALL_OW 72
36966: PUSH
36967: FOR_IN
36968: IFFALSE 37022
// if not IsInUnit ( j ) and not HasTask ( j ) then
36970: LD_VAR 0 3
36974: PPUSH
36975: CALL_OW 310
36979: NOT
36980: PUSH
36981: LD_VAR 0 3
36985: PPUSH
36986: CALL_OW 314
36990: NOT
36991: AND
36992: IFFALSE 37020
// begin ComEnterUnit ( j , selected ) ;
36994: LD_VAR 0 3
36998: PPUSH
36999: LD_VAR 0 7
37003: PPUSH
37004: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
37008: LD_VAR 0 3
37012: PPUSH
37013: LD_INT 15
37015: PPUSH
37016: CALL_OW 183
// end ;
37020: GO 36967
37022: POP
37023: POP
// end ; end ; end ; end ; end ;
37024: GO 36417
37026: POP
37027: POP
// end ;
37028: LD_VAR 0 1
37032: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
37033: LD_INT 0
37035: PPUSH
37036: PPUSH
37037: PPUSH
37038: PPUSH
// if not mc_bases then
37039: LD_EXP 50
37043: NOT
37044: IFFALSE 37048
// exit ;
37046: GO 37226
// for i = 1 to mc_bases do
37048: LD_ADDR_VAR 0 2
37052: PUSH
37053: DOUBLE
37054: LD_INT 1
37056: DEC
37057: ST_TO_ADDR
37058: LD_EXP 50
37062: PUSH
37063: FOR_TO
37064: IFFALSE 37224
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
37066: LD_ADDR_VAR 0 4
37070: PUSH
37071: LD_EXP 50
37075: PUSH
37076: LD_VAR 0 2
37080: ARRAY
37081: PPUSH
37082: LD_INT 25
37084: PUSH
37085: LD_INT 9
37087: PUSH
37088: EMPTY
37089: LIST
37090: LIST
37091: PPUSH
37092: CALL_OW 72
37096: ST_TO_ADDR
// if not tmp then
37097: LD_VAR 0 4
37101: NOT
37102: IFFALSE 37106
// continue ;
37104: GO 37063
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
37106: LD_EXP 76
37110: PUSH
37111: LD_VAR 0 2
37115: ARRAY
37116: PPUSH
37117: LD_INT 29
37119: PPUSH
37120: CALL_OW 325
37124: NOT
37125: PUSH
37126: LD_EXP 76
37130: PUSH
37131: LD_VAR 0 2
37135: ARRAY
37136: PPUSH
37137: LD_INT 28
37139: PPUSH
37140: CALL_OW 325
37144: NOT
37145: AND
37146: IFFALSE 37150
// continue ;
37148: GO 37063
// for j in tmp do
37150: LD_ADDR_VAR 0 3
37154: PUSH
37155: LD_VAR 0 4
37159: PUSH
37160: FOR_IN
37161: IFFALSE 37220
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
37163: LD_VAR 0 3
37167: PUSH
37168: LD_EXP 53
37172: PUSH
37173: LD_VAR 0 2
37177: ARRAY
37178: PUSH
37179: LD_INT 1
37181: ARRAY
37182: IN
37183: NOT
37184: PUSH
37185: LD_VAR 0 3
37189: PUSH
37190: LD_EXP 53
37194: PUSH
37195: LD_VAR 0 2
37199: ARRAY
37200: PUSH
37201: LD_INT 2
37203: ARRAY
37204: IN
37205: NOT
37206: AND
37207: IFFALSE 37218
// ComSpaceTimeShoot ( j ) ;
37209: LD_VAR 0 3
37213: PPUSH
37214: CALL 48304 0 1
37218: GO 37160
37220: POP
37221: POP
// end ;
37222: GO 37063
37224: POP
37225: POP
// end ;
37226: LD_VAR 0 1
37230: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
37231: LD_INT 0
37233: PPUSH
37234: PPUSH
37235: PPUSH
37236: PPUSH
37237: PPUSH
37238: PPUSH
37239: PPUSH
37240: PPUSH
37241: PPUSH
// if not mc_bases then
37242: LD_EXP 50
37246: NOT
37247: IFFALSE 37251
// exit ;
37249: GO 37873
// for i = 1 to mc_bases do
37251: LD_ADDR_VAR 0 2
37255: PUSH
37256: DOUBLE
37257: LD_INT 1
37259: DEC
37260: ST_TO_ADDR
37261: LD_EXP 50
37265: PUSH
37266: FOR_TO
37267: IFFALSE 37871
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
37269: LD_EXP 85
37273: PUSH
37274: LD_VAR 0 2
37278: ARRAY
37279: NOT
37280: PUSH
37281: LD_INT 38
37283: PPUSH
37284: LD_EXP 76
37288: PUSH
37289: LD_VAR 0 2
37293: ARRAY
37294: PPUSH
37295: CALL_OW 321
37299: PUSH
37300: LD_INT 2
37302: NONEQUAL
37303: OR
37304: IFFALSE 37308
// continue ;
37306: GO 37266
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
37308: LD_ADDR_VAR 0 8
37312: PUSH
37313: LD_EXP 50
37317: PUSH
37318: LD_VAR 0 2
37322: ARRAY
37323: PPUSH
37324: LD_INT 30
37326: PUSH
37327: LD_INT 34
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PPUSH
37334: CALL_OW 72
37338: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
37339: LD_ADDR_VAR 0 9
37343: PUSH
37344: LD_EXP 50
37348: PUSH
37349: LD_VAR 0 2
37353: ARRAY
37354: PPUSH
37355: LD_INT 25
37357: PUSH
37358: LD_INT 4
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PPUSH
37365: CALL_OW 72
37369: PPUSH
37370: LD_INT 0
37372: PPUSH
37373: CALL 87988 0 2
37377: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
37378: LD_VAR 0 9
37382: NOT
37383: PUSH
37384: LD_VAR 0 8
37388: NOT
37389: OR
37390: PUSH
37391: LD_EXP 50
37395: PUSH
37396: LD_VAR 0 2
37400: ARRAY
37401: PPUSH
37402: LD_INT 124
37404: PPUSH
37405: CALL 87988 0 2
37409: OR
37410: IFFALSE 37414
// continue ;
37412: GO 37266
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
37414: LD_EXP 86
37418: PUSH
37419: LD_VAR 0 2
37423: ARRAY
37424: PUSH
37425: LD_EXP 85
37429: PUSH
37430: LD_VAR 0 2
37434: ARRAY
37435: LESS
37436: PUSH
37437: LD_EXP 86
37441: PUSH
37442: LD_VAR 0 2
37446: ARRAY
37447: PUSH
37448: LD_VAR 0 8
37452: LESS
37453: AND
37454: IFFALSE 37869
// begin tmp := sci [ 1 ] ;
37456: LD_ADDR_VAR 0 7
37460: PUSH
37461: LD_VAR 0 9
37465: PUSH
37466: LD_INT 1
37468: ARRAY
37469: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
37470: LD_VAR 0 7
37474: PPUSH
37475: LD_INT 124
37477: PPUSH
37478: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
37482: LD_ADDR_VAR 0 3
37486: PUSH
37487: DOUBLE
37488: LD_EXP 85
37492: PUSH
37493: LD_VAR 0 2
37497: ARRAY
37498: INC
37499: ST_TO_ADDR
37500: LD_EXP 85
37504: PUSH
37505: LD_VAR 0 2
37509: ARRAY
37510: PUSH
37511: FOR_DOWNTO
37512: IFFALSE 37855
// begin if IsInUnit ( tmp ) then
37514: LD_VAR 0 7
37518: PPUSH
37519: CALL_OW 310
37523: IFFALSE 37534
// ComExitBuilding ( tmp ) ;
37525: LD_VAR 0 7
37529: PPUSH
37530: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
37534: LD_INT 35
37536: PPUSH
37537: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
37541: LD_VAR 0 7
37545: PPUSH
37546: CALL_OW 310
37550: NOT
37551: PUSH
37552: LD_VAR 0 7
37556: PPUSH
37557: CALL_OW 314
37561: NOT
37562: AND
37563: IFFALSE 37534
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
37565: LD_ADDR_VAR 0 6
37569: PUSH
37570: LD_VAR 0 7
37574: PPUSH
37575: CALL_OW 250
37579: PUSH
37580: LD_VAR 0 7
37584: PPUSH
37585: CALL_OW 251
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
37594: LD_INT 35
37596: PPUSH
37597: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
37601: LD_ADDR_VAR 0 4
37605: PUSH
37606: LD_EXP 85
37610: PUSH
37611: LD_VAR 0 2
37615: ARRAY
37616: PUSH
37617: LD_VAR 0 3
37621: ARRAY
37622: PUSH
37623: LD_INT 1
37625: ARRAY
37626: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
37627: LD_ADDR_VAR 0 5
37631: PUSH
37632: LD_EXP 85
37636: PUSH
37637: LD_VAR 0 2
37641: ARRAY
37642: PUSH
37643: LD_VAR 0 3
37647: ARRAY
37648: PUSH
37649: LD_INT 2
37651: ARRAY
37652: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
37653: LD_VAR 0 7
37657: PPUSH
37658: LD_INT 10
37660: PPUSH
37661: CALL 57311 0 2
37665: PUSH
37666: LD_INT 4
37668: ARRAY
37669: IFFALSE 37707
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
37671: LD_VAR 0 7
37675: PPUSH
37676: LD_VAR 0 6
37680: PUSH
37681: LD_INT 1
37683: ARRAY
37684: PPUSH
37685: LD_VAR 0 6
37689: PUSH
37690: LD_INT 2
37692: ARRAY
37693: PPUSH
37694: CALL_OW 111
// wait ( 0 0$10 ) ;
37698: LD_INT 350
37700: PPUSH
37701: CALL_OW 67
// end else
37705: GO 37733
// begin ComMoveXY ( tmp , x , y ) ;
37707: LD_VAR 0 7
37711: PPUSH
37712: LD_VAR 0 4
37716: PPUSH
37717: LD_VAR 0 5
37721: PPUSH
37722: CALL_OW 111
// wait ( 0 0$3 ) ;
37726: LD_INT 105
37728: PPUSH
37729: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
37733: LD_VAR 0 7
37737: PPUSH
37738: LD_VAR 0 4
37742: PPUSH
37743: LD_VAR 0 5
37747: PPUSH
37748: CALL_OW 307
37752: IFFALSE 37594
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
37754: LD_VAR 0 7
37758: PPUSH
37759: LD_VAR 0 4
37763: PPUSH
37764: LD_VAR 0 5
37768: PPUSH
37769: LD_VAR 0 8
37773: PUSH
37774: LD_VAR 0 3
37778: ARRAY
37779: PPUSH
37780: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
37784: LD_INT 35
37786: PPUSH
37787: CALL_OW 67
// until not HasTask ( tmp ) ;
37791: LD_VAR 0 7
37795: PPUSH
37796: CALL_OW 314
37800: NOT
37801: IFFALSE 37784
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
37803: LD_ADDR_EXP 86
37807: PUSH
37808: LD_EXP 86
37812: PPUSH
37813: LD_VAR 0 2
37817: PUSH
37818: LD_EXP 86
37822: PUSH
37823: LD_VAR 0 2
37827: ARRAY
37828: PUSH
37829: LD_INT 1
37831: PLUS
37832: PUSH
37833: EMPTY
37834: LIST
37835: LIST
37836: PPUSH
37837: LD_VAR 0 8
37841: PUSH
37842: LD_VAR 0 3
37846: ARRAY
37847: PPUSH
37848: CALL 54718 0 3
37852: ST_TO_ADDR
// end ;
37853: GO 37511
37855: POP
37856: POP
// MC_Reset ( i , 124 ) ;
37857: LD_VAR 0 2
37861: PPUSH
37862: LD_INT 124
37864: PPUSH
37865: CALL 21460 0 2
// end ; end ;
37869: GO 37266
37871: POP
37872: POP
// end ;
37873: LD_VAR 0 1
37877: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
37878: LD_INT 0
37880: PPUSH
37881: PPUSH
37882: PPUSH
// if not mc_bases then
37883: LD_EXP 50
37887: NOT
37888: IFFALSE 37892
// exit ;
37890: GO 38498
// for i = 1 to mc_bases do
37892: LD_ADDR_VAR 0 2
37896: PUSH
37897: DOUBLE
37898: LD_INT 1
37900: DEC
37901: ST_TO_ADDR
37902: LD_EXP 50
37906: PUSH
37907: FOR_TO
37908: IFFALSE 38496
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
37910: LD_ADDR_VAR 0 3
37914: PUSH
37915: LD_EXP 50
37919: PUSH
37920: LD_VAR 0 2
37924: ARRAY
37925: PPUSH
37926: LD_INT 25
37928: PUSH
37929: LD_INT 4
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: PPUSH
37936: CALL_OW 72
37940: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
37941: LD_VAR 0 3
37945: NOT
37946: PUSH
37947: LD_EXP 87
37951: PUSH
37952: LD_VAR 0 2
37956: ARRAY
37957: NOT
37958: OR
37959: PUSH
37960: LD_EXP 50
37964: PUSH
37965: LD_VAR 0 2
37969: ARRAY
37970: PPUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 30
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 30
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: LIST
37998: PPUSH
37999: CALL_OW 72
38003: NOT
38004: OR
38005: IFFALSE 38055
// begin if mc_deposits_finder [ i ] then
38007: LD_EXP 88
38011: PUSH
38012: LD_VAR 0 2
38016: ARRAY
38017: IFFALSE 38053
// begin MC_Reset ( i , 125 ) ;
38019: LD_VAR 0 2
38023: PPUSH
38024: LD_INT 125
38026: PPUSH
38027: CALL 21460 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38031: LD_ADDR_EXP 88
38035: PUSH
38036: LD_EXP 88
38040: PPUSH
38041: LD_VAR 0 2
38045: PPUSH
38046: EMPTY
38047: PPUSH
38048: CALL_OW 1
38052: ST_TO_ADDR
// end ; continue ;
38053: GO 37907
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
38055: LD_EXP 87
38059: PUSH
38060: LD_VAR 0 2
38064: ARRAY
38065: PUSH
38066: LD_INT 1
38068: ARRAY
38069: PUSH
38070: LD_INT 3
38072: ARRAY
38073: PUSH
38074: LD_INT 1
38076: EQUAL
38077: PUSH
38078: LD_INT 20
38080: PPUSH
38081: LD_EXP 76
38085: PUSH
38086: LD_VAR 0 2
38090: ARRAY
38091: PPUSH
38092: CALL_OW 321
38096: PUSH
38097: LD_INT 2
38099: NONEQUAL
38100: AND
38101: IFFALSE 38151
// begin if mc_deposits_finder [ i ] then
38103: LD_EXP 88
38107: PUSH
38108: LD_VAR 0 2
38112: ARRAY
38113: IFFALSE 38149
// begin MC_Reset ( i , 125 ) ;
38115: LD_VAR 0 2
38119: PPUSH
38120: LD_INT 125
38122: PPUSH
38123: CALL 21460 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
38127: LD_ADDR_EXP 88
38131: PUSH
38132: LD_EXP 88
38136: PPUSH
38137: LD_VAR 0 2
38141: PPUSH
38142: EMPTY
38143: PPUSH
38144: CALL_OW 1
38148: ST_TO_ADDR
// end ; continue ;
38149: GO 37907
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
38151: LD_EXP 87
38155: PUSH
38156: LD_VAR 0 2
38160: ARRAY
38161: PUSH
38162: LD_INT 1
38164: ARRAY
38165: PUSH
38166: LD_INT 1
38168: ARRAY
38169: PPUSH
38170: LD_EXP 87
38174: PUSH
38175: LD_VAR 0 2
38179: ARRAY
38180: PUSH
38181: LD_INT 1
38183: ARRAY
38184: PUSH
38185: LD_INT 2
38187: ARRAY
38188: PPUSH
38189: LD_EXP 76
38193: PUSH
38194: LD_VAR 0 2
38198: ARRAY
38199: PPUSH
38200: CALL_OW 440
38204: IFFALSE 38247
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
38206: LD_ADDR_EXP 87
38210: PUSH
38211: LD_EXP 87
38215: PPUSH
38216: LD_VAR 0 2
38220: PPUSH
38221: LD_EXP 87
38225: PUSH
38226: LD_VAR 0 2
38230: ARRAY
38231: PPUSH
38232: LD_INT 1
38234: PPUSH
38235: CALL_OW 3
38239: PPUSH
38240: CALL_OW 1
38244: ST_TO_ADDR
38245: GO 38494
// begin if not mc_deposits_finder [ i ] then
38247: LD_EXP 88
38251: PUSH
38252: LD_VAR 0 2
38256: ARRAY
38257: NOT
38258: IFFALSE 38310
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
38260: LD_ADDR_EXP 88
38264: PUSH
38265: LD_EXP 88
38269: PPUSH
38270: LD_VAR 0 2
38274: PPUSH
38275: LD_VAR 0 3
38279: PUSH
38280: LD_INT 1
38282: ARRAY
38283: PUSH
38284: EMPTY
38285: LIST
38286: PPUSH
38287: CALL_OW 1
38291: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
38292: LD_VAR 0 3
38296: PUSH
38297: LD_INT 1
38299: ARRAY
38300: PPUSH
38301: LD_INT 125
38303: PPUSH
38304: CALL_OW 109
// end else
38308: GO 38494
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
38310: LD_EXP 88
38314: PUSH
38315: LD_VAR 0 2
38319: ARRAY
38320: PUSH
38321: LD_INT 1
38323: ARRAY
38324: PPUSH
38325: CALL_OW 310
38329: IFFALSE 38352
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
38331: LD_EXP 88
38335: PUSH
38336: LD_VAR 0 2
38340: ARRAY
38341: PUSH
38342: LD_INT 1
38344: ARRAY
38345: PPUSH
38346: CALL_OW 122
38350: GO 38494
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
38352: LD_EXP 88
38356: PUSH
38357: LD_VAR 0 2
38361: ARRAY
38362: PUSH
38363: LD_INT 1
38365: ARRAY
38366: PPUSH
38367: CALL_OW 314
38371: NOT
38372: PUSH
38373: LD_EXP 88
38377: PUSH
38378: LD_VAR 0 2
38382: ARRAY
38383: PUSH
38384: LD_INT 1
38386: ARRAY
38387: PPUSH
38388: LD_EXP 87
38392: PUSH
38393: LD_VAR 0 2
38397: ARRAY
38398: PUSH
38399: LD_INT 1
38401: ARRAY
38402: PUSH
38403: LD_INT 1
38405: ARRAY
38406: PPUSH
38407: LD_EXP 87
38411: PUSH
38412: LD_VAR 0 2
38416: ARRAY
38417: PUSH
38418: LD_INT 1
38420: ARRAY
38421: PUSH
38422: LD_INT 2
38424: ARRAY
38425: PPUSH
38426: CALL_OW 297
38430: PUSH
38431: LD_INT 6
38433: GREATER
38434: AND
38435: IFFALSE 38494
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
38437: LD_EXP 88
38441: PUSH
38442: LD_VAR 0 2
38446: ARRAY
38447: PUSH
38448: LD_INT 1
38450: ARRAY
38451: PPUSH
38452: LD_EXP 87
38456: PUSH
38457: LD_VAR 0 2
38461: ARRAY
38462: PUSH
38463: LD_INT 1
38465: ARRAY
38466: PUSH
38467: LD_INT 1
38469: ARRAY
38470: PPUSH
38471: LD_EXP 87
38475: PUSH
38476: LD_VAR 0 2
38480: ARRAY
38481: PUSH
38482: LD_INT 1
38484: ARRAY
38485: PUSH
38486: LD_INT 2
38488: ARRAY
38489: PPUSH
38490: CALL_OW 111
// end ; end ; end ;
38494: GO 37907
38496: POP
38497: POP
// end ;
38498: LD_VAR 0 1
38502: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
38503: LD_INT 0
38505: PPUSH
38506: PPUSH
38507: PPUSH
38508: PPUSH
38509: PPUSH
38510: PPUSH
38511: PPUSH
38512: PPUSH
38513: PPUSH
38514: PPUSH
38515: PPUSH
// if not mc_bases then
38516: LD_EXP 50
38520: NOT
38521: IFFALSE 38525
// exit ;
38523: GO 39465
// for i = 1 to mc_bases do
38525: LD_ADDR_VAR 0 2
38529: PUSH
38530: DOUBLE
38531: LD_INT 1
38533: DEC
38534: ST_TO_ADDR
38535: LD_EXP 50
38539: PUSH
38540: FOR_TO
38541: IFFALSE 39463
// begin if not mc_bases [ i ] or mc_scan [ i ] then
38543: LD_EXP 50
38547: PUSH
38548: LD_VAR 0 2
38552: ARRAY
38553: NOT
38554: PUSH
38555: LD_EXP 73
38559: PUSH
38560: LD_VAR 0 2
38564: ARRAY
38565: OR
38566: IFFALSE 38570
// continue ;
38568: GO 38540
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
38570: LD_ADDR_VAR 0 7
38574: PUSH
38575: LD_EXP 50
38579: PUSH
38580: LD_VAR 0 2
38584: ARRAY
38585: PUSH
38586: LD_INT 1
38588: ARRAY
38589: PPUSH
38590: CALL_OW 248
38594: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
38595: LD_VAR 0 7
38599: PUSH
38600: LD_INT 3
38602: EQUAL
38603: PUSH
38604: LD_EXP 69
38608: PUSH
38609: LD_VAR 0 2
38613: ARRAY
38614: PUSH
38615: LD_EXP 72
38619: PUSH
38620: LD_VAR 0 2
38624: ARRAY
38625: UNION
38626: PPUSH
38627: LD_INT 33
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 72
38641: NOT
38642: OR
38643: IFFALSE 38647
// continue ;
38645: GO 38540
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
38647: LD_ADDR_VAR 0 9
38651: PUSH
38652: LD_EXP 50
38656: PUSH
38657: LD_VAR 0 2
38661: ARRAY
38662: PPUSH
38663: LD_INT 30
38665: PUSH
38666: LD_INT 36
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PPUSH
38673: CALL_OW 72
38677: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
38678: LD_ADDR_VAR 0 10
38682: PUSH
38683: LD_EXP 69
38687: PUSH
38688: LD_VAR 0 2
38692: ARRAY
38693: PPUSH
38694: LD_INT 34
38696: PUSH
38697: LD_INT 31
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PPUSH
38704: CALL_OW 72
38708: ST_TO_ADDR
// if not cts and not mcts then
38709: LD_VAR 0 9
38713: NOT
38714: PUSH
38715: LD_VAR 0 10
38719: NOT
38720: AND
38721: IFFALSE 38725
// continue ;
38723: GO 38540
// x := cts ;
38725: LD_ADDR_VAR 0 11
38729: PUSH
38730: LD_VAR 0 9
38734: ST_TO_ADDR
// if not x then
38735: LD_VAR 0 11
38739: NOT
38740: IFFALSE 38752
// x := mcts ;
38742: LD_ADDR_VAR 0 11
38746: PUSH
38747: LD_VAR 0 10
38751: ST_TO_ADDR
// if not x then
38752: LD_VAR 0 11
38756: NOT
38757: IFFALSE 38761
// continue ;
38759: GO 38540
// if mc_remote_driver [ i ] then
38761: LD_EXP 90
38765: PUSH
38766: LD_VAR 0 2
38770: ARRAY
38771: IFFALSE 39158
// for j in mc_remote_driver [ i ] do
38773: LD_ADDR_VAR 0 3
38777: PUSH
38778: LD_EXP 90
38782: PUSH
38783: LD_VAR 0 2
38787: ARRAY
38788: PUSH
38789: FOR_IN
38790: IFFALSE 39156
// begin if GetClass ( j ) <> 3 then
38792: LD_VAR 0 3
38796: PPUSH
38797: CALL_OW 257
38801: PUSH
38802: LD_INT 3
38804: NONEQUAL
38805: IFFALSE 38858
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
38807: LD_ADDR_EXP 90
38811: PUSH
38812: LD_EXP 90
38816: PPUSH
38817: LD_VAR 0 2
38821: PPUSH
38822: LD_EXP 90
38826: PUSH
38827: LD_VAR 0 2
38831: ARRAY
38832: PUSH
38833: LD_VAR 0 3
38837: DIFF
38838: PPUSH
38839: CALL_OW 1
38843: ST_TO_ADDR
// SetTag ( j , 0 ) ;
38844: LD_VAR 0 3
38848: PPUSH
38849: LD_INT 0
38851: PPUSH
38852: CALL_OW 109
// continue ;
38856: GO 38789
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
38858: LD_EXP 69
38862: PUSH
38863: LD_VAR 0 2
38867: ARRAY
38868: PPUSH
38869: LD_INT 34
38871: PUSH
38872: LD_INT 31
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 58
38881: PUSH
38882: EMPTY
38883: LIST
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PPUSH
38889: CALL_OW 72
38893: PUSH
38894: LD_VAR 0 3
38898: PPUSH
38899: CALL 88076 0 1
38903: NOT
38904: AND
38905: IFFALSE 38976
// begin if IsInUnit ( j ) then
38907: LD_VAR 0 3
38911: PPUSH
38912: CALL_OW 310
38916: IFFALSE 38927
// ComExitBuilding ( j ) ;
38918: LD_VAR 0 3
38922: PPUSH
38923: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
38927: LD_VAR 0 3
38931: PPUSH
38932: LD_EXP 69
38936: PUSH
38937: LD_VAR 0 2
38941: ARRAY
38942: PPUSH
38943: LD_INT 34
38945: PUSH
38946: LD_INT 31
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 58
38955: PUSH
38956: EMPTY
38957: LIST
38958: PUSH
38959: EMPTY
38960: LIST
38961: LIST
38962: PPUSH
38963: CALL_OW 72
38967: PUSH
38968: LD_INT 1
38970: ARRAY
38971: PPUSH
38972: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
38976: LD_VAR 0 3
38980: PPUSH
38981: CALL_OW 310
38985: NOT
38986: PUSH
38987: LD_VAR 0 3
38991: PPUSH
38992: CALL_OW 310
38996: PPUSH
38997: CALL_OW 266
39001: PUSH
39002: LD_INT 36
39004: NONEQUAL
39005: PUSH
39006: LD_VAR 0 3
39010: PPUSH
39011: CALL 88076 0 1
39015: NOT
39016: AND
39017: OR
39018: IFFALSE 39154
// begin if IsInUnit ( j ) then
39020: LD_VAR 0 3
39024: PPUSH
39025: CALL_OW 310
39029: IFFALSE 39040
// ComExitBuilding ( j ) ;
39031: LD_VAR 0 3
39035: PPUSH
39036: CALL_OW 122
// ct := 0 ;
39040: LD_ADDR_VAR 0 8
39044: PUSH
39045: LD_INT 0
39047: ST_TO_ADDR
// for k in x do
39048: LD_ADDR_VAR 0 4
39052: PUSH
39053: LD_VAR 0 11
39057: PUSH
39058: FOR_IN
39059: IFFALSE 39132
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
39061: LD_VAR 0 4
39065: PPUSH
39066: CALL_OW 264
39070: PUSH
39071: LD_INT 31
39073: EQUAL
39074: PUSH
39075: LD_VAR 0 4
39079: PPUSH
39080: CALL_OW 311
39084: NOT
39085: AND
39086: PUSH
39087: LD_VAR 0 4
39091: PPUSH
39092: CALL_OW 266
39096: PUSH
39097: LD_INT 36
39099: EQUAL
39100: PUSH
39101: LD_VAR 0 4
39105: PPUSH
39106: CALL_OW 313
39110: PUSH
39111: LD_INT 3
39113: LESS
39114: AND
39115: OR
39116: IFFALSE 39130
// begin ct := k ;
39118: LD_ADDR_VAR 0 8
39122: PUSH
39123: LD_VAR 0 4
39127: ST_TO_ADDR
// break ;
39128: GO 39132
// end ;
39130: GO 39058
39132: POP
39133: POP
// if ct then
39134: LD_VAR 0 8
39138: IFFALSE 39154
// ComEnterUnit ( j , ct ) ;
39140: LD_VAR 0 3
39144: PPUSH
39145: LD_VAR 0 8
39149: PPUSH
39150: CALL_OW 120
// end ; end ;
39154: GO 38789
39156: POP
39157: POP
// places := 0 ;
39158: LD_ADDR_VAR 0 5
39162: PUSH
39163: LD_INT 0
39165: ST_TO_ADDR
// for j = 1 to x do
39166: LD_ADDR_VAR 0 3
39170: PUSH
39171: DOUBLE
39172: LD_INT 1
39174: DEC
39175: ST_TO_ADDR
39176: LD_VAR 0 11
39180: PUSH
39181: FOR_TO
39182: IFFALSE 39258
// if GetWeapon ( x [ j ] ) = ar_control_tower then
39184: LD_VAR 0 11
39188: PUSH
39189: LD_VAR 0 3
39193: ARRAY
39194: PPUSH
39195: CALL_OW 264
39199: PUSH
39200: LD_INT 31
39202: EQUAL
39203: IFFALSE 39221
// places := places + 1 else
39205: LD_ADDR_VAR 0 5
39209: PUSH
39210: LD_VAR 0 5
39214: PUSH
39215: LD_INT 1
39217: PLUS
39218: ST_TO_ADDR
39219: GO 39256
// if GetBType ( x [ j ] ) = b_control_tower then
39221: LD_VAR 0 11
39225: PUSH
39226: LD_VAR 0 3
39230: ARRAY
39231: PPUSH
39232: CALL_OW 266
39236: PUSH
39237: LD_INT 36
39239: EQUAL
39240: IFFALSE 39256
// places := places + 3 ;
39242: LD_ADDR_VAR 0 5
39246: PUSH
39247: LD_VAR 0 5
39251: PUSH
39252: LD_INT 3
39254: PLUS
39255: ST_TO_ADDR
39256: GO 39181
39258: POP
39259: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
39260: LD_VAR 0 5
39264: PUSH
39265: LD_INT 0
39267: EQUAL
39268: PUSH
39269: LD_VAR 0 5
39273: PUSH
39274: LD_EXP 90
39278: PUSH
39279: LD_VAR 0 2
39283: ARRAY
39284: LESSEQUAL
39285: OR
39286: IFFALSE 39290
// continue ;
39288: GO 38540
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
39290: LD_ADDR_VAR 0 6
39294: PUSH
39295: LD_EXP 50
39299: PUSH
39300: LD_VAR 0 2
39304: ARRAY
39305: PPUSH
39306: LD_INT 25
39308: PUSH
39309: LD_INT 3
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PPUSH
39316: CALL_OW 72
39320: PUSH
39321: LD_EXP 90
39325: PUSH
39326: LD_VAR 0 2
39330: ARRAY
39331: DIFF
39332: PPUSH
39333: LD_INT 3
39335: PPUSH
39336: CALL 88976 0 2
39340: ST_TO_ADDR
// for j in tmp do
39341: LD_ADDR_VAR 0 3
39345: PUSH
39346: LD_VAR 0 6
39350: PUSH
39351: FOR_IN
39352: IFFALSE 39387
// if GetTag ( j ) > 0 then
39354: LD_VAR 0 3
39358: PPUSH
39359: CALL_OW 110
39363: PUSH
39364: LD_INT 0
39366: GREATER
39367: IFFALSE 39385
// tmp := tmp diff j ;
39369: LD_ADDR_VAR 0 6
39373: PUSH
39374: LD_VAR 0 6
39378: PUSH
39379: LD_VAR 0 3
39383: DIFF
39384: ST_TO_ADDR
39385: GO 39351
39387: POP
39388: POP
// if not tmp then
39389: LD_VAR 0 6
39393: NOT
39394: IFFALSE 39398
// continue ;
39396: GO 38540
// if places then
39398: LD_VAR 0 5
39402: IFFALSE 39461
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
39404: LD_ADDR_EXP 90
39408: PUSH
39409: LD_EXP 90
39413: PPUSH
39414: LD_VAR 0 2
39418: PPUSH
39419: LD_EXP 90
39423: PUSH
39424: LD_VAR 0 2
39428: ARRAY
39429: PUSH
39430: LD_VAR 0 6
39434: PUSH
39435: LD_INT 1
39437: ARRAY
39438: UNION
39439: PPUSH
39440: CALL_OW 1
39444: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
39445: LD_VAR 0 6
39449: PUSH
39450: LD_INT 1
39452: ARRAY
39453: PPUSH
39454: LD_INT 126
39456: PPUSH
39457: CALL_OW 109
// end ; end ;
39461: GO 38540
39463: POP
39464: POP
// end ;
39465: LD_VAR 0 1
39469: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
39470: LD_INT 0
39472: PPUSH
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
39478: LD_VAR 0 1
39482: NOT
39483: PUSH
39484: LD_VAR 0 2
39488: NOT
39489: OR
39490: PUSH
39491: LD_VAR 0 3
39495: NOT
39496: OR
39497: PUSH
39498: LD_VAR 0 4
39502: PUSH
39503: LD_INT 1
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 3
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 5
39517: PUSH
39518: LD_INT 8
39520: PUSH
39521: LD_INT 9
39523: PUSH
39524: LD_INT 15
39526: PUSH
39527: LD_INT 16
39529: PUSH
39530: EMPTY
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: IN
39541: NOT
39542: OR
39543: IFFALSE 39547
// exit ;
39545: GO 40447
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: LD_VAR 0 2
39556: PPUSH
39557: LD_INT 21
39559: PUSH
39560: LD_INT 3
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 24
39569: PUSH
39570: LD_INT 250
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: EMPTY
39578: LIST
39579: LIST
39580: PPUSH
39581: CALL_OW 72
39585: ST_TO_ADDR
// case class of 1 , 15 :
39586: LD_VAR 0 4
39590: PUSH
39591: LD_INT 1
39593: DOUBLE
39594: EQUAL
39595: IFTRUE 39605
39597: LD_INT 15
39599: DOUBLE
39600: EQUAL
39601: IFTRUE 39605
39603: GO 39690
39605: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
39606: LD_ADDR_VAR 0 8
39610: PUSH
39611: LD_VAR 0 2
39615: PPUSH
39616: LD_INT 2
39618: PUSH
39619: LD_INT 30
39621: PUSH
39622: LD_INT 32
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 30
39631: PUSH
39632: LD_INT 31
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 72
39648: PUSH
39649: LD_VAR 0 2
39653: PPUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 30
39659: PUSH
39660: LD_INT 4
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 30
39669: PUSH
39670: LD_INT 5
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 72
39686: ADD
39687: ST_TO_ADDR
39688: GO 39936
39690: LD_INT 2
39692: DOUBLE
39693: EQUAL
39694: IFTRUE 39704
39696: LD_INT 16
39698: DOUBLE
39699: EQUAL
39700: IFTRUE 39704
39702: GO 39750
39704: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
39705: LD_ADDR_VAR 0 8
39709: PUSH
39710: LD_VAR 0 2
39714: PPUSH
39715: LD_INT 2
39717: PUSH
39718: LD_INT 30
39720: PUSH
39721: LD_INT 0
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 30
39730: PUSH
39731: LD_INT 1
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 72
39747: ST_TO_ADDR
39748: GO 39936
39750: LD_INT 3
39752: DOUBLE
39753: EQUAL
39754: IFTRUE 39758
39756: GO 39804
39758: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
39759: LD_ADDR_VAR 0 8
39763: PUSH
39764: LD_VAR 0 2
39768: PPUSH
39769: LD_INT 2
39771: PUSH
39772: LD_INT 30
39774: PUSH
39775: LD_INT 2
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 30
39784: PUSH
39785: LD_INT 3
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: LIST
39796: PPUSH
39797: CALL_OW 72
39801: ST_TO_ADDR
39802: GO 39936
39804: LD_INT 4
39806: DOUBLE
39807: EQUAL
39808: IFTRUE 39812
39810: GO 39869
39812: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
39813: LD_ADDR_VAR 0 8
39817: PUSH
39818: LD_VAR 0 2
39822: PPUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 30
39828: PUSH
39829: LD_INT 6
39831: PUSH
39832: EMPTY
39833: LIST
39834: LIST
39835: PUSH
39836: LD_INT 30
39838: PUSH
39839: LD_INT 7
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 30
39848: PUSH
39849: LD_INT 8
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: EMPTY
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: PPUSH
39862: CALL_OW 72
39866: ST_TO_ADDR
39867: GO 39936
39869: LD_INT 5
39871: DOUBLE
39872: EQUAL
39873: IFTRUE 39889
39875: LD_INT 8
39877: DOUBLE
39878: EQUAL
39879: IFTRUE 39889
39881: LD_INT 9
39883: DOUBLE
39884: EQUAL
39885: IFTRUE 39889
39887: GO 39935
39889: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
39890: LD_ADDR_VAR 0 8
39894: PUSH
39895: LD_VAR 0 2
39899: PPUSH
39900: LD_INT 2
39902: PUSH
39903: LD_INT 30
39905: PUSH
39906: LD_INT 4
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PUSH
39913: LD_INT 30
39915: PUSH
39916: LD_INT 5
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: LIST
39927: PPUSH
39928: CALL_OW 72
39932: ST_TO_ADDR
39933: GO 39936
39935: POP
// if not tmp then
39936: LD_VAR 0 8
39940: NOT
39941: IFFALSE 39945
// exit ;
39943: GO 40447
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
39945: LD_VAR 0 4
39949: PUSH
39950: LD_INT 1
39952: PUSH
39953: LD_INT 15
39955: PUSH
39956: EMPTY
39957: LIST
39958: LIST
39959: IN
39960: PUSH
39961: LD_EXP 59
39965: PUSH
39966: LD_VAR 0 1
39970: ARRAY
39971: AND
39972: IFFALSE 40128
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_EXP 59
39983: PUSH
39984: LD_VAR 0 1
39988: ARRAY
39989: PUSH
39990: LD_INT 1
39992: ARRAY
39993: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
39994: LD_VAR 0 9
39998: PUSH
39999: LD_EXP 60
40003: PUSH
40004: LD_VAR 0 1
40008: ARRAY
40009: IN
40010: NOT
40011: IFFALSE 40126
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
40013: LD_ADDR_EXP 60
40017: PUSH
40018: LD_EXP 60
40022: PPUSH
40023: LD_VAR 0 1
40027: PUSH
40028: LD_EXP 60
40032: PUSH
40033: LD_VAR 0 1
40037: ARRAY
40038: PUSH
40039: LD_INT 1
40041: PLUS
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PPUSH
40047: LD_VAR 0 9
40051: PPUSH
40052: CALL 54718 0 3
40056: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
40057: LD_ADDR_EXP 59
40061: PUSH
40062: LD_EXP 59
40066: PPUSH
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_EXP 59
40076: PUSH
40077: LD_VAR 0 1
40081: ARRAY
40082: PUSH
40083: LD_VAR 0 9
40087: DIFF
40088: PPUSH
40089: CALL_OW 1
40093: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
40094: LD_VAR 0 3
40098: PPUSH
40099: LD_EXP 60
40103: PUSH
40104: LD_VAR 0 1
40108: ARRAY
40109: PUSH
40110: LD_EXP 60
40114: PUSH
40115: LD_VAR 0 1
40119: ARRAY
40120: ARRAY
40121: PPUSH
40122: CALL_OW 120
// end ; exit ;
40126: GO 40447
// end ; if tmp > 1 then
40128: LD_VAR 0 8
40132: PUSH
40133: LD_INT 1
40135: GREATER
40136: IFFALSE 40240
// for i = 2 to tmp do
40138: LD_ADDR_VAR 0 6
40142: PUSH
40143: DOUBLE
40144: LD_INT 2
40146: DEC
40147: ST_TO_ADDR
40148: LD_VAR 0 8
40152: PUSH
40153: FOR_TO
40154: IFFALSE 40238
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
40156: LD_VAR 0 8
40160: PUSH
40161: LD_VAR 0 6
40165: ARRAY
40166: PPUSH
40167: CALL_OW 461
40171: PUSH
40172: LD_INT 6
40174: EQUAL
40175: IFFALSE 40236
// begin x := tmp [ i ] ;
40177: LD_ADDR_VAR 0 9
40181: PUSH
40182: LD_VAR 0 8
40186: PUSH
40187: LD_VAR 0 6
40191: ARRAY
40192: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
40193: LD_ADDR_VAR 0 8
40197: PUSH
40198: LD_VAR 0 8
40202: PPUSH
40203: LD_VAR 0 6
40207: PPUSH
40208: CALL_OW 3
40212: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
40213: LD_ADDR_VAR 0 8
40217: PUSH
40218: LD_VAR 0 8
40222: PPUSH
40223: LD_INT 1
40225: PPUSH
40226: LD_VAR 0 9
40230: PPUSH
40231: CALL_OW 2
40235: ST_TO_ADDR
// end ;
40236: GO 40153
40238: POP
40239: POP
// for i in tmp do
40240: LD_ADDR_VAR 0 6
40244: PUSH
40245: LD_VAR 0 8
40249: PUSH
40250: FOR_IN
40251: IFFALSE 40320
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
40253: LD_VAR 0 6
40257: PPUSH
40258: CALL_OW 313
40262: PUSH
40263: LD_INT 6
40265: LESS
40266: PUSH
40267: LD_VAR 0 6
40271: PPUSH
40272: CALL_OW 266
40276: PUSH
40277: LD_INT 31
40279: PUSH
40280: LD_INT 32
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: IN
40287: NOT
40288: AND
40289: PUSH
40290: LD_VAR 0 6
40294: PPUSH
40295: CALL_OW 313
40299: PUSH
40300: LD_INT 0
40302: EQUAL
40303: OR
40304: IFFALSE 40318
// begin j := i ;
40306: LD_ADDR_VAR 0 7
40310: PUSH
40311: LD_VAR 0 6
40315: ST_TO_ADDR
// break ;
40316: GO 40320
// end ; end ;
40318: GO 40250
40320: POP
40321: POP
// if j then
40322: LD_VAR 0 7
40326: IFFALSE 40344
// ComEnterUnit ( unit , j ) else
40328: LD_VAR 0 3
40332: PPUSH
40333: LD_VAR 0 7
40337: PPUSH
40338: CALL_OW 120
40342: GO 40447
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
40344: LD_ADDR_VAR 0 10
40348: PUSH
40349: LD_VAR 0 2
40353: PPUSH
40354: LD_INT 2
40356: PUSH
40357: LD_INT 30
40359: PUSH
40360: LD_INT 0
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 30
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: PPUSH
40382: CALL_OW 72
40386: ST_TO_ADDR
// if depot then
40387: LD_VAR 0 10
40391: IFFALSE 40447
// begin depot := NearestUnitToUnit ( depot , unit ) ;
40393: LD_ADDR_VAR 0 10
40397: PUSH
40398: LD_VAR 0 10
40402: PPUSH
40403: LD_VAR 0 3
40407: PPUSH
40408: CALL_OW 74
40412: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
40413: LD_VAR 0 3
40417: PPUSH
40418: LD_VAR 0 10
40422: PPUSH
40423: CALL_OW 296
40427: PUSH
40428: LD_INT 10
40430: GREATER
40431: IFFALSE 40447
// ComStandNearbyBuilding ( unit , depot ) ;
40433: LD_VAR 0 3
40437: PPUSH
40438: LD_VAR 0 10
40442: PPUSH
40443: CALL 48921 0 2
// end ; end ; end ;
40447: LD_VAR 0 5
40451: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
40452: LD_INT 0
40454: PPUSH
40455: PPUSH
40456: PPUSH
40457: PPUSH
// if not mc_bases then
40458: LD_EXP 50
40462: NOT
40463: IFFALSE 40467
// exit ;
40465: GO 40706
// for i = 1 to mc_bases do
40467: LD_ADDR_VAR 0 2
40471: PUSH
40472: DOUBLE
40473: LD_INT 1
40475: DEC
40476: ST_TO_ADDR
40477: LD_EXP 50
40481: PUSH
40482: FOR_TO
40483: IFFALSE 40704
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
40485: LD_ADDR_VAR 0 4
40489: PUSH
40490: LD_EXP 50
40494: PUSH
40495: LD_VAR 0 2
40499: ARRAY
40500: PPUSH
40501: LD_INT 21
40503: PUSH
40504: LD_INT 1
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PPUSH
40511: CALL_OW 72
40515: PUSH
40516: LD_EXP 79
40520: PUSH
40521: LD_VAR 0 2
40525: ARRAY
40526: UNION
40527: ST_TO_ADDR
// if not tmp then
40528: LD_VAR 0 4
40532: NOT
40533: IFFALSE 40537
// continue ;
40535: GO 40482
// for j in tmp do
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_VAR 0 4
40546: PUSH
40547: FOR_IN
40548: IFFALSE 40700
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
40550: LD_VAR 0 3
40554: PPUSH
40555: CALL_OW 110
40559: NOT
40560: PUSH
40561: LD_VAR 0 3
40565: PPUSH
40566: CALL_OW 314
40570: NOT
40571: AND
40572: PUSH
40573: LD_VAR 0 3
40577: PPUSH
40578: CALL_OW 311
40582: NOT
40583: AND
40584: PUSH
40585: LD_VAR 0 3
40589: PPUSH
40590: CALL_OW 310
40594: NOT
40595: AND
40596: PUSH
40597: LD_VAR 0 3
40601: PUSH
40602: LD_EXP 53
40606: PUSH
40607: LD_VAR 0 2
40611: ARRAY
40612: PUSH
40613: LD_INT 1
40615: ARRAY
40616: IN
40617: NOT
40618: AND
40619: PUSH
40620: LD_VAR 0 3
40624: PUSH
40625: LD_EXP 53
40629: PUSH
40630: LD_VAR 0 2
40634: ARRAY
40635: PUSH
40636: LD_INT 2
40638: ARRAY
40639: IN
40640: NOT
40641: AND
40642: PUSH
40643: LD_VAR 0 3
40647: PUSH
40648: LD_EXP 62
40652: PUSH
40653: LD_VAR 0 2
40657: ARRAY
40658: IN
40659: NOT
40660: AND
40661: IFFALSE 40698
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
40663: LD_VAR 0 2
40667: PPUSH
40668: LD_EXP 50
40672: PUSH
40673: LD_VAR 0 2
40677: ARRAY
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: LD_VAR 0 3
40688: PPUSH
40689: CALL_OW 257
40693: PPUSH
40694: CALL 39470 0 4
// end ;
40698: GO 40547
40700: POP
40701: POP
// end ;
40702: GO 40482
40704: POP
40705: POP
// end ;
40706: LD_VAR 0 1
40710: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
40711: LD_INT 0
40713: PPUSH
40714: PPUSH
40715: PPUSH
40716: PPUSH
40717: PPUSH
40718: PPUSH
// if not mc_bases [ base ] then
40719: LD_EXP 50
40723: PUSH
40724: LD_VAR 0 1
40728: ARRAY
40729: NOT
40730: IFFALSE 40734
// exit ;
40732: GO 40916
// tmp := [ ] ;
40734: LD_ADDR_VAR 0 6
40738: PUSH
40739: EMPTY
40740: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
40741: LD_ADDR_VAR 0 7
40745: PUSH
40746: LD_VAR 0 3
40750: PPUSH
40751: LD_INT 0
40753: PPUSH
40754: CALL_OW 517
40758: ST_TO_ADDR
// if not list then
40759: LD_VAR 0 7
40763: NOT
40764: IFFALSE 40768
// exit ;
40766: GO 40916
// for i = 1 to amount do
40768: LD_ADDR_VAR 0 5
40772: PUSH
40773: DOUBLE
40774: LD_INT 1
40776: DEC
40777: ST_TO_ADDR
40778: LD_VAR 0 2
40782: PUSH
40783: FOR_TO
40784: IFFALSE 40864
// begin x := rand ( 1 , list [ 1 ] ) ;
40786: LD_ADDR_VAR 0 8
40790: PUSH
40791: LD_INT 1
40793: PPUSH
40794: LD_VAR 0 7
40798: PUSH
40799: LD_INT 1
40801: ARRAY
40802: PPUSH
40803: CALL_OW 12
40807: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
40808: LD_ADDR_VAR 0 6
40812: PUSH
40813: LD_VAR 0 6
40817: PPUSH
40818: LD_VAR 0 5
40822: PPUSH
40823: LD_VAR 0 7
40827: PUSH
40828: LD_INT 1
40830: ARRAY
40831: PUSH
40832: LD_VAR 0 8
40836: ARRAY
40837: PUSH
40838: LD_VAR 0 7
40842: PUSH
40843: LD_INT 2
40845: ARRAY
40846: PUSH
40847: LD_VAR 0 8
40851: ARRAY
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PPUSH
40857: CALL_OW 1
40861: ST_TO_ADDR
// end ;
40862: GO 40783
40864: POP
40865: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
40866: LD_ADDR_EXP 63
40870: PUSH
40871: LD_EXP 63
40875: PPUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: LD_VAR 0 6
40885: PPUSH
40886: CALL_OW 1
40890: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
40891: LD_ADDR_EXP 65
40895: PUSH
40896: LD_EXP 65
40900: PPUSH
40901: LD_VAR 0 1
40905: PPUSH
40906: LD_VAR 0 3
40910: PPUSH
40911: CALL_OW 1
40915: ST_TO_ADDR
// end ;
40916: LD_VAR 0 4
40920: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
40921: LD_INT 0
40923: PPUSH
// if not mc_bases [ base ] then
40924: LD_EXP 50
40928: PUSH
40929: LD_VAR 0 1
40933: ARRAY
40934: NOT
40935: IFFALSE 40939
// exit ;
40937: GO 40964
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
40939: LD_ADDR_EXP 55
40943: PUSH
40944: LD_EXP 55
40948: PPUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: LD_VAR 0 2
40958: PPUSH
40959: CALL_OW 1
40963: ST_TO_ADDR
// end ;
40964: LD_VAR 0 3
40968: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
40969: LD_INT 0
40971: PPUSH
// if not mc_bases [ base ] then
40972: LD_EXP 50
40976: PUSH
40977: LD_VAR 0 1
40981: ARRAY
40982: NOT
40983: IFFALSE 40987
// exit ;
40985: GO 41024
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
40987: LD_ADDR_EXP 55
40991: PUSH
40992: LD_EXP 55
40996: PPUSH
40997: LD_VAR 0 1
41001: PPUSH
41002: LD_EXP 55
41006: PUSH
41007: LD_VAR 0 1
41011: ARRAY
41012: PUSH
41013: LD_VAR 0 2
41017: UNION
41018: PPUSH
41019: CALL_OW 1
41023: ST_TO_ADDR
// end ;
41024: LD_VAR 0 3
41028: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
41029: LD_INT 0
41031: PPUSH
// if not mc_bases [ base ] then
41032: LD_EXP 50
41036: PUSH
41037: LD_VAR 0 1
41041: ARRAY
41042: NOT
41043: IFFALSE 41047
// exit ;
41045: GO 41072
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
41047: LD_ADDR_EXP 71
41051: PUSH
41052: LD_EXP 71
41056: PPUSH
41057: LD_VAR 0 1
41061: PPUSH
41062: LD_VAR 0 2
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// end ;
41072: LD_VAR 0 3
41076: RET
// export function MC_InsertProduceList ( base , components ) ; begin
41077: LD_INT 0
41079: PPUSH
// if not mc_bases [ base ] then
41080: LD_EXP 50
41084: PUSH
41085: LD_VAR 0 1
41089: ARRAY
41090: NOT
41091: IFFALSE 41095
// exit ;
41093: GO 41132
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
41095: LD_ADDR_EXP 71
41099: PUSH
41100: LD_EXP 71
41104: PPUSH
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_EXP 71
41114: PUSH
41115: LD_VAR 0 1
41119: ARRAY
41120: PUSH
41121: LD_VAR 0 2
41125: ADD
41126: PPUSH
41127: CALL_OW 1
41131: ST_TO_ADDR
// end ;
41132: LD_VAR 0 3
41136: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
41137: LD_INT 0
41139: PPUSH
// if not mc_bases [ base ] then
41140: LD_EXP 50
41144: PUSH
41145: LD_VAR 0 1
41149: ARRAY
41150: NOT
41151: IFFALSE 41155
// exit ;
41153: GO 41209
// mc_defender := Replace ( mc_defender , base , deflist ) ;
41155: LD_ADDR_EXP 72
41159: PUSH
41160: LD_EXP 72
41164: PPUSH
41165: LD_VAR 0 1
41169: PPUSH
41170: LD_VAR 0 2
41174: PPUSH
41175: CALL_OW 1
41179: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
41180: LD_ADDR_EXP 61
41184: PUSH
41185: LD_EXP 61
41189: PPUSH
41190: LD_VAR 0 1
41194: PPUSH
41195: LD_VAR 0 2
41199: PUSH
41200: LD_INT 0
41202: PLUS
41203: PPUSH
41204: CALL_OW 1
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 3
41213: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
41214: LD_INT 0
41216: PPUSH
// if not mc_bases [ base ] then
41217: LD_EXP 50
41221: PUSH
41222: LD_VAR 0 1
41226: ARRAY
41227: NOT
41228: IFFALSE 41232
// exit ;
41230: GO 41257
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
41232: LD_ADDR_EXP 61
41236: PUSH
41237: LD_EXP 61
41241: PPUSH
41242: LD_VAR 0 1
41246: PPUSH
41247: LD_VAR 0 2
41251: PPUSH
41252: CALL_OW 1
41256: ST_TO_ADDR
// end ;
41257: LD_VAR 0 3
41261: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
41262: LD_INT 0
41264: PPUSH
41265: PPUSH
41266: PPUSH
41267: PPUSH
// if not mc_bases [ base ] then
41268: LD_EXP 50
41272: PUSH
41273: LD_VAR 0 1
41277: ARRAY
41278: NOT
41279: IFFALSE 41283
// exit ;
41281: GO 41348
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
41283: LD_ADDR_EXP 70
41287: PUSH
41288: LD_EXP 70
41292: PPUSH
41293: LD_VAR 0 1
41297: PUSH
41298: LD_EXP 70
41302: PUSH
41303: LD_VAR 0 1
41307: ARRAY
41308: PUSH
41309: LD_INT 1
41311: PLUS
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PPUSH
41317: LD_VAR 0 1
41321: PUSH
41322: LD_VAR 0 2
41326: PUSH
41327: LD_VAR 0 3
41331: PUSH
41332: LD_VAR 0 4
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: PPUSH
41343: CALL 54718 0 3
41347: ST_TO_ADDR
// end ;
41348: LD_VAR 0 5
41352: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
41353: LD_INT 0
41355: PPUSH
// if not mc_bases [ base ] then
41356: LD_EXP 50
41360: PUSH
41361: LD_VAR 0 1
41365: ARRAY
41366: NOT
41367: IFFALSE 41371
// exit ;
41369: GO 41396
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
41371: LD_ADDR_EXP 87
41375: PUSH
41376: LD_EXP 87
41380: PPUSH
41381: LD_VAR 0 1
41385: PPUSH
41386: LD_VAR 0 2
41390: PPUSH
41391: CALL_OW 1
41395: ST_TO_ADDR
// end ;
41396: LD_VAR 0 3
41400: RET
// export function MC_GetMinesField ( base ) ; begin
41401: LD_INT 0
41403: PPUSH
// result := mc_mines [ base ] ;
41404: LD_ADDR_VAR 0 2
41408: PUSH
41409: LD_EXP 63
41413: PUSH
41414: LD_VAR 0 1
41418: ARRAY
41419: ST_TO_ADDR
// end ;
41420: LD_VAR 0 2
41424: RET
// export function MC_GetProduceList ( base ) ; begin
41425: LD_INT 0
41427: PPUSH
// result := mc_produce [ base ] ;
41428: LD_ADDR_VAR 0 2
41432: PUSH
41433: LD_EXP 71
41437: PUSH
41438: LD_VAR 0 1
41442: ARRAY
41443: ST_TO_ADDR
// end ;
41444: LD_VAR 0 2
41448: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
41449: LD_INT 0
41451: PPUSH
41452: PPUSH
// if not mc_bases then
41453: LD_EXP 50
41457: NOT
41458: IFFALSE 41462
// exit ;
41460: GO 41527
// if mc_bases [ base ] then
41462: LD_EXP 50
41466: PUSH
41467: LD_VAR 0 1
41471: ARRAY
41472: IFFALSE 41527
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41474: LD_ADDR_VAR 0 3
41478: PUSH
41479: LD_EXP 50
41483: PUSH
41484: LD_VAR 0 1
41488: ARRAY
41489: PPUSH
41490: LD_INT 30
41492: PUSH
41493: LD_VAR 0 2
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PPUSH
41502: CALL_OW 72
41506: ST_TO_ADDR
// if result then
41507: LD_VAR 0 3
41511: IFFALSE 41527
// result := result [ 1 ] ;
41513: LD_ADDR_VAR 0 3
41517: PUSH
41518: LD_VAR 0 3
41522: PUSH
41523: LD_INT 1
41525: ARRAY
41526: ST_TO_ADDR
// end ; end ;
41527: LD_VAR 0 3
41531: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
41532: LD_INT 0
41534: PPUSH
41535: PPUSH
// if not mc_bases then
41536: LD_EXP 50
41540: NOT
41541: IFFALSE 41545
// exit ;
41543: GO 41590
// if mc_bases [ base ] then
41545: LD_EXP 50
41549: PUSH
41550: LD_VAR 0 1
41554: ARRAY
41555: IFFALSE 41590
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41557: LD_ADDR_VAR 0 3
41561: PUSH
41562: LD_EXP 50
41566: PUSH
41567: LD_VAR 0 1
41571: ARRAY
41572: PPUSH
41573: LD_INT 30
41575: PUSH
41576: LD_VAR 0 2
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PPUSH
41585: CALL_OW 72
41589: ST_TO_ADDR
// end ;
41590: LD_VAR 0 3
41594: RET
// export function MC_SetTame ( base , area ) ; begin
41595: LD_INT 0
41597: PPUSH
// if not mc_bases or not base then
41598: LD_EXP 50
41602: NOT
41603: PUSH
41604: LD_VAR 0 1
41608: NOT
41609: OR
41610: IFFALSE 41614
// exit ;
41612: GO 41639
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
41614: LD_ADDR_EXP 78
41618: PUSH
41619: LD_EXP 78
41623: PPUSH
41624: LD_VAR 0 1
41628: PPUSH
41629: LD_VAR 0 2
41633: PPUSH
41634: CALL_OW 1
41638: ST_TO_ADDR
// end ;
41639: LD_VAR 0 3
41643: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
41644: LD_INT 0
41646: PPUSH
41647: PPUSH
// if not mc_bases or not base then
41648: LD_EXP 50
41652: NOT
41653: PUSH
41654: LD_VAR 0 1
41658: NOT
41659: OR
41660: IFFALSE 41664
// exit ;
41662: GO 41766
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
41664: LD_ADDR_VAR 0 4
41668: PUSH
41669: LD_EXP 50
41673: PUSH
41674: LD_VAR 0 1
41678: ARRAY
41679: PPUSH
41680: LD_INT 30
41682: PUSH
41683: LD_VAR 0 2
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PPUSH
41692: CALL_OW 72
41696: ST_TO_ADDR
// if not tmp then
41697: LD_VAR 0 4
41701: NOT
41702: IFFALSE 41706
// exit ;
41704: GO 41766
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
41706: LD_ADDR_EXP 82
41710: PUSH
41711: LD_EXP 82
41715: PPUSH
41716: LD_VAR 0 1
41720: PPUSH
41721: LD_EXP 82
41725: PUSH
41726: LD_VAR 0 1
41730: ARRAY
41731: PPUSH
41732: LD_EXP 82
41736: PUSH
41737: LD_VAR 0 1
41741: ARRAY
41742: PUSH
41743: LD_INT 1
41745: PLUS
41746: PPUSH
41747: LD_VAR 0 4
41751: PUSH
41752: LD_INT 1
41754: ARRAY
41755: PPUSH
41756: CALL_OW 2
41760: PPUSH
41761: CALL_OW 1
41765: ST_TO_ADDR
// end ;
41766: LD_VAR 0 3
41770: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
41771: LD_INT 0
41773: PPUSH
41774: PPUSH
// if not mc_bases or not base or not kinds then
41775: LD_EXP 50
41779: NOT
41780: PUSH
41781: LD_VAR 0 1
41785: NOT
41786: OR
41787: PUSH
41788: LD_VAR 0 2
41792: NOT
41793: OR
41794: IFFALSE 41798
// exit ;
41796: GO 41859
// for i in kinds do
41798: LD_ADDR_VAR 0 4
41802: PUSH
41803: LD_VAR 0 2
41807: PUSH
41808: FOR_IN
41809: IFFALSE 41857
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
41811: LD_ADDR_EXP 84
41815: PUSH
41816: LD_EXP 84
41820: PPUSH
41821: LD_VAR 0 1
41825: PUSH
41826: LD_EXP 84
41830: PUSH
41831: LD_VAR 0 1
41835: ARRAY
41836: PUSH
41837: LD_INT 1
41839: PLUS
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PPUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: CALL 54718 0 3
41854: ST_TO_ADDR
41855: GO 41808
41857: POP
41858: POP
// end ;
41859: LD_VAR 0 3
41863: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
41864: LD_INT 0
41866: PPUSH
// if not mc_bases or not base or not areas then
41867: LD_EXP 50
41871: NOT
41872: PUSH
41873: LD_VAR 0 1
41877: NOT
41878: OR
41879: PUSH
41880: LD_VAR 0 2
41884: NOT
41885: OR
41886: IFFALSE 41890
// exit ;
41888: GO 41915
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
41890: LD_ADDR_EXP 68
41894: PUSH
41895: LD_EXP 68
41899: PPUSH
41900: LD_VAR 0 1
41904: PPUSH
41905: LD_VAR 0 2
41909: PPUSH
41910: CALL_OW 1
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 3
41919: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
41920: LD_INT 0
41922: PPUSH
// if not mc_bases or not base or not teleports_exit then
41923: LD_EXP 50
41927: NOT
41928: PUSH
41929: LD_VAR 0 1
41933: NOT
41934: OR
41935: PUSH
41936: LD_VAR 0 2
41940: NOT
41941: OR
41942: IFFALSE 41946
// exit ;
41944: GO 41971
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
41946: LD_ADDR_EXP 85
41950: PUSH
41951: LD_EXP 85
41955: PPUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: LD_VAR 0 2
41965: PPUSH
41966: CALL_OW 1
41970: ST_TO_ADDR
// end ;
41971: LD_VAR 0 3
41975: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
41976: LD_INT 0
41978: PPUSH
41979: PPUSH
41980: PPUSH
// if not mc_bases or not base or not ext_list then
41981: LD_EXP 50
41985: NOT
41986: PUSH
41987: LD_VAR 0 1
41991: NOT
41992: OR
41993: PUSH
41994: LD_VAR 0 5
41998: NOT
41999: OR
42000: IFFALSE 42004
// exit ;
42002: GO 42177
// tmp := GetFacExtXYD ( x , y , d ) ;
42004: LD_ADDR_VAR 0 8
42008: PUSH
42009: LD_VAR 0 2
42013: PPUSH
42014: LD_VAR 0 3
42018: PPUSH
42019: LD_VAR 0 4
42023: PPUSH
42024: CALL 88106 0 3
42028: ST_TO_ADDR
// if not tmp then
42029: LD_VAR 0 8
42033: NOT
42034: IFFALSE 42038
// exit ;
42036: GO 42177
// for i in tmp do
42038: LD_ADDR_VAR 0 7
42042: PUSH
42043: LD_VAR 0 8
42047: PUSH
42048: FOR_IN
42049: IFFALSE 42175
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
42051: LD_ADDR_EXP 55
42055: PUSH
42056: LD_EXP 55
42060: PPUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: LD_EXP 55
42070: PUSH
42071: LD_VAR 0 1
42075: ARRAY
42076: PPUSH
42077: LD_EXP 55
42081: PUSH
42082: LD_VAR 0 1
42086: ARRAY
42087: PUSH
42088: LD_INT 1
42090: PLUS
42091: PPUSH
42092: LD_VAR 0 5
42096: PUSH
42097: LD_INT 1
42099: ARRAY
42100: PUSH
42101: LD_VAR 0 7
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: PUSH
42110: LD_VAR 0 7
42114: PUSH
42115: LD_INT 2
42117: ARRAY
42118: PUSH
42119: LD_VAR 0 7
42123: PUSH
42124: LD_INT 3
42126: ARRAY
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: PPUSH
42134: CALL_OW 2
42138: PPUSH
42139: CALL_OW 1
42143: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
42144: LD_ADDR_VAR 0 5
42148: PUSH
42149: LD_VAR 0 5
42153: PPUSH
42154: LD_INT 1
42156: PPUSH
42157: CALL_OW 3
42161: ST_TO_ADDR
// if not ext_list then
42162: LD_VAR 0 5
42166: NOT
42167: IFFALSE 42173
// exit ;
42169: POP
42170: POP
42171: GO 42177
// end ;
42173: GO 42048
42175: POP
42176: POP
// end ;
42177: LD_VAR 0 6
42181: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
42182: LD_INT 0
42184: PPUSH
// if not mc_bases or not base or not weapon_list then
42185: LD_EXP 50
42189: NOT
42190: PUSH
42191: LD_VAR 0 1
42195: NOT
42196: OR
42197: PUSH
42198: LD_VAR 0 2
42202: NOT
42203: OR
42204: IFFALSE 42208
// exit ;
42206: GO 42233
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
42208: LD_ADDR_EXP 89
42212: PUSH
42213: LD_EXP 89
42217: PPUSH
42218: LD_VAR 0 1
42222: PPUSH
42223: LD_VAR 0 2
42227: PPUSH
42228: CALL_OW 1
42232: ST_TO_ADDR
// end ;
42233: LD_VAR 0 3
42237: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
42238: LD_INT 0
42240: PPUSH
// if not mc_bases or not base or not tech_list then
42241: LD_EXP 50
42245: NOT
42246: PUSH
42247: LD_VAR 0 1
42251: NOT
42252: OR
42253: PUSH
42254: LD_VAR 0 2
42258: NOT
42259: OR
42260: IFFALSE 42264
// exit ;
42262: GO 42289
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
42264: LD_ADDR_EXP 77
42268: PUSH
42269: LD_EXP 77
42273: PPUSH
42274: LD_VAR 0 1
42278: PPUSH
42279: LD_VAR 0 2
42283: PPUSH
42284: CALL_OW 1
42288: ST_TO_ADDR
// end ;
42289: LD_VAR 0 3
42293: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
42294: LD_INT 0
42296: PPUSH
// if not mc_bases or not parking_area or not base then
42297: LD_EXP 50
42301: NOT
42302: PUSH
42303: LD_VAR 0 2
42307: NOT
42308: OR
42309: PUSH
42310: LD_VAR 0 1
42314: NOT
42315: OR
42316: IFFALSE 42320
// exit ;
42318: GO 42345
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
42320: LD_ADDR_EXP 74
42324: PUSH
42325: LD_EXP 74
42329: PPUSH
42330: LD_VAR 0 1
42334: PPUSH
42335: LD_VAR 0 2
42339: PPUSH
42340: CALL_OW 1
42344: ST_TO_ADDR
// end ;
42345: LD_VAR 0 3
42349: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
42350: LD_INT 0
42352: PPUSH
// if not mc_bases or not base or not scan_area then
42353: LD_EXP 50
42357: NOT
42358: PUSH
42359: LD_VAR 0 1
42363: NOT
42364: OR
42365: PUSH
42366: LD_VAR 0 2
42370: NOT
42371: OR
42372: IFFALSE 42376
// exit ;
42374: GO 42401
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
42376: LD_ADDR_EXP 75
42380: PUSH
42381: LD_EXP 75
42385: PPUSH
42386: LD_VAR 0 1
42390: PPUSH
42391: LD_VAR 0 2
42395: PPUSH
42396: CALL_OW 1
42400: ST_TO_ADDR
// end ;
42401: LD_VAR 0 3
42405: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
42406: LD_INT 0
42408: PPUSH
42409: PPUSH
// if not mc_bases or not base then
42410: LD_EXP 50
42414: NOT
42415: PUSH
42416: LD_VAR 0 1
42420: NOT
42421: OR
42422: IFFALSE 42426
// exit ;
42424: GO 42490
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
42426: LD_ADDR_VAR 0 3
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 2
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 4
42442: PUSH
42443: LD_INT 11
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
42453: LD_ADDR_EXP 77
42457: PUSH
42458: LD_EXP 77
42462: PPUSH
42463: LD_VAR 0 1
42467: PPUSH
42468: LD_EXP 77
42472: PUSH
42473: LD_VAR 0 1
42477: ARRAY
42478: PUSH
42479: LD_VAR 0 3
42483: DIFF
42484: PPUSH
42485: CALL_OW 1
42489: ST_TO_ADDR
// end ;
42490: LD_VAR 0 2
42494: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
42495: LD_INT 0
42497: PPUSH
// result := mc_vehicles [ base ] ;
42498: LD_ADDR_VAR 0 3
42502: PUSH
42503: LD_EXP 69
42507: PUSH
42508: LD_VAR 0 1
42512: ARRAY
42513: ST_TO_ADDR
// if onlyCombat then
42514: LD_VAR 0 2
42518: IFFALSE 42683
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
42520: LD_ADDR_VAR 0 3
42524: PUSH
42525: LD_VAR 0 3
42529: PUSH
42530: LD_VAR 0 3
42534: PPUSH
42535: LD_INT 2
42537: PUSH
42538: LD_INT 34
42540: PUSH
42541: LD_INT 12
42543: PUSH
42544: EMPTY
42545: LIST
42546: LIST
42547: PUSH
42548: LD_INT 34
42550: PUSH
42551: LD_INT 51
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 34
42560: PUSH
42561: LD_EXP 94
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 34
42572: PUSH
42573: LD_INT 32
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 34
42582: PUSH
42583: LD_INT 13
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 34
42592: PUSH
42593: LD_INT 52
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 34
42602: PUSH
42603: LD_INT 14
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 34
42612: PUSH
42613: LD_INT 53
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 34
42622: PUSH
42623: LD_EXP 93
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 34
42634: PUSH
42635: LD_INT 31
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: LD_INT 34
42644: PUSH
42645: LD_INT 48
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: PUSH
42652: LD_INT 34
42654: PUSH
42655: LD_INT 8
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: PPUSH
42677: CALL_OW 72
42681: DIFF
42682: ST_TO_ADDR
// end ; end_of_file
42683: LD_VAR 0 3
42687: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
42688: LD_INT 0
42690: PPUSH
42691: PPUSH
42692: PPUSH
// if not mc_bases or not skirmish then
42693: LD_EXP 50
42697: NOT
42698: PUSH
42699: LD_EXP 48
42703: NOT
42704: OR
42705: IFFALSE 42709
// exit ;
42707: GO 42874
// for i = 1 to mc_bases do
42709: LD_ADDR_VAR 0 4
42713: PUSH
42714: DOUBLE
42715: LD_INT 1
42717: DEC
42718: ST_TO_ADDR
42719: LD_EXP 50
42723: PUSH
42724: FOR_TO
42725: IFFALSE 42872
// begin if sci in mc_bases [ i ] then
42727: LD_VAR 0 2
42731: PUSH
42732: LD_EXP 50
42736: PUSH
42737: LD_VAR 0 4
42741: ARRAY
42742: IN
42743: IFFALSE 42870
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
42745: LD_ADDR_EXP 79
42749: PUSH
42750: LD_EXP 79
42754: PPUSH
42755: LD_VAR 0 4
42759: PUSH
42760: LD_EXP 79
42764: PUSH
42765: LD_VAR 0 4
42769: ARRAY
42770: PUSH
42771: LD_INT 1
42773: PLUS
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PPUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: CALL 54718 0 3
42788: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
42789: LD_ADDR_VAR 0 5
42793: PUSH
42794: LD_EXP 50
42798: PUSH
42799: LD_VAR 0 4
42803: ARRAY
42804: PPUSH
42805: LD_INT 2
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 30
42820: PUSH
42821: LD_INT 1
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: PPUSH
42833: CALL_OW 72
42837: PPUSH
42838: LD_VAR 0 1
42842: PPUSH
42843: CALL_OW 74
42847: ST_TO_ADDR
// if tmp then
42848: LD_VAR 0 5
42852: IFFALSE 42868
// ComStandNearbyBuilding ( ape , tmp ) ;
42854: LD_VAR 0 1
42858: PPUSH
42859: LD_VAR 0 5
42863: PPUSH
42864: CALL 48921 0 2
// break ;
42868: GO 42872
// end ; end ;
42870: GO 42724
42872: POP
42873: POP
// end ;
42874: LD_VAR 0 3
42878: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
42879: LD_INT 0
42881: PPUSH
42882: PPUSH
42883: PPUSH
// if not mc_bases or not skirmish then
42884: LD_EXP 50
42888: NOT
42889: PUSH
42890: LD_EXP 48
42894: NOT
42895: OR
42896: IFFALSE 42900
// exit ;
42898: GO 42989
// for i = 1 to mc_bases do
42900: LD_ADDR_VAR 0 4
42904: PUSH
42905: DOUBLE
42906: LD_INT 1
42908: DEC
42909: ST_TO_ADDR
42910: LD_EXP 50
42914: PUSH
42915: FOR_TO
42916: IFFALSE 42987
// begin if building in mc_busy_turret_list [ i ] then
42918: LD_VAR 0 1
42922: PUSH
42923: LD_EXP 60
42927: PUSH
42928: LD_VAR 0 4
42932: ARRAY
42933: IN
42934: IFFALSE 42985
// begin tmp := mc_busy_turret_list [ i ] diff building ;
42936: LD_ADDR_VAR 0 5
42940: PUSH
42941: LD_EXP 60
42945: PUSH
42946: LD_VAR 0 4
42950: ARRAY
42951: PUSH
42952: LD_VAR 0 1
42956: DIFF
42957: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
42958: LD_ADDR_EXP 60
42962: PUSH
42963: LD_EXP 60
42967: PPUSH
42968: LD_VAR 0 4
42972: PPUSH
42973: LD_VAR 0 5
42977: PPUSH
42978: CALL_OW 1
42982: ST_TO_ADDR
// break ;
42983: GO 42987
// end ; end ;
42985: GO 42915
42987: POP
42988: POP
// end ;
42989: LD_VAR 0 3
42993: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
// if not mc_bases or not skirmish then
42999: LD_EXP 50
43003: NOT
43004: PUSH
43005: LD_EXP 48
43009: NOT
43010: OR
43011: IFFALSE 43015
// exit ;
43013: GO 43214
// for i = 1 to mc_bases do
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: DOUBLE
43021: LD_INT 1
43023: DEC
43024: ST_TO_ADDR
43025: LD_EXP 50
43029: PUSH
43030: FOR_TO
43031: IFFALSE 43212
// if building in mc_bases [ i ] then
43033: LD_VAR 0 1
43037: PUSH
43038: LD_EXP 50
43042: PUSH
43043: LD_VAR 0 5
43047: ARRAY
43048: IN
43049: IFFALSE 43210
// begin tmp := mc_bases [ i ] diff building ;
43051: LD_ADDR_VAR 0 6
43055: PUSH
43056: LD_EXP 50
43060: PUSH
43061: LD_VAR 0 5
43065: ARRAY
43066: PUSH
43067: LD_VAR 0 1
43071: DIFF
43072: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
43073: LD_ADDR_EXP 50
43077: PUSH
43078: LD_EXP 50
43082: PPUSH
43083: LD_VAR 0 5
43087: PPUSH
43088: LD_VAR 0 6
43092: PPUSH
43093: CALL_OW 1
43097: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
43098: LD_VAR 0 1
43102: PUSH
43103: LD_EXP 58
43107: PUSH
43108: LD_VAR 0 5
43112: ARRAY
43113: IN
43114: IFFALSE 43153
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
43116: LD_ADDR_EXP 58
43120: PUSH
43121: LD_EXP 58
43125: PPUSH
43126: LD_VAR 0 5
43130: PPUSH
43131: LD_EXP 58
43135: PUSH
43136: LD_VAR 0 5
43140: ARRAY
43141: PUSH
43142: LD_VAR 0 1
43146: DIFF
43147: PPUSH
43148: CALL_OW 1
43152: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
43153: LD_VAR 0 1
43157: PUSH
43158: LD_EXP 59
43162: PUSH
43163: LD_VAR 0 5
43167: ARRAY
43168: IN
43169: IFFALSE 43208
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
43171: LD_ADDR_EXP 59
43175: PUSH
43176: LD_EXP 59
43180: PPUSH
43181: LD_VAR 0 5
43185: PPUSH
43186: LD_EXP 59
43190: PUSH
43191: LD_VAR 0 5
43195: ARRAY
43196: PUSH
43197: LD_VAR 0 1
43201: DIFF
43202: PPUSH
43203: CALL_OW 1
43207: ST_TO_ADDR
// break ;
43208: GO 43212
// end ;
43210: GO 43030
43212: POP
43213: POP
// end ;
43214: LD_VAR 0 4
43218: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
43219: LD_INT 0
43221: PPUSH
43222: PPUSH
43223: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
43224: LD_EXP 50
43228: NOT
43229: PUSH
43230: LD_EXP 48
43234: NOT
43235: OR
43236: PUSH
43237: LD_VAR 0 3
43241: PUSH
43242: LD_EXP 76
43246: IN
43247: NOT
43248: OR
43249: IFFALSE 43253
// exit ;
43251: GO 43376
// for i = 1 to mc_vehicles do
43253: LD_ADDR_VAR 0 6
43257: PUSH
43258: DOUBLE
43259: LD_INT 1
43261: DEC
43262: ST_TO_ADDR
43263: LD_EXP 69
43267: PUSH
43268: FOR_TO
43269: IFFALSE 43374
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
43271: LD_VAR 0 2
43275: PUSH
43276: LD_EXP 69
43280: PUSH
43281: LD_VAR 0 6
43285: ARRAY
43286: IN
43287: PUSH
43288: LD_VAR 0 1
43292: PUSH
43293: LD_EXP 69
43297: PUSH
43298: LD_VAR 0 6
43302: ARRAY
43303: IN
43304: OR
43305: IFFALSE 43372
// begin tmp := mc_vehicles [ i ] diff old ;
43307: LD_ADDR_VAR 0 7
43311: PUSH
43312: LD_EXP 69
43316: PUSH
43317: LD_VAR 0 6
43321: ARRAY
43322: PUSH
43323: LD_VAR 0 2
43327: DIFF
43328: ST_TO_ADDR
// tmp := tmp diff new ;
43329: LD_ADDR_VAR 0 7
43333: PUSH
43334: LD_VAR 0 7
43338: PUSH
43339: LD_VAR 0 1
43343: DIFF
43344: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
43345: LD_ADDR_EXP 69
43349: PUSH
43350: LD_EXP 69
43354: PPUSH
43355: LD_VAR 0 6
43359: PPUSH
43360: LD_VAR 0 7
43364: PPUSH
43365: CALL_OW 1
43369: ST_TO_ADDR
// break ;
43370: GO 43374
// end ;
43372: GO 43268
43374: POP
43375: POP
// end ;
43376: LD_VAR 0 5
43380: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
43381: LD_INT 0
43383: PPUSH
43384: PPUSH
43385: PPUSH
43386: PPUSH
// if not mc_bases or not skirmish then
43387: LD_EXP 50
43391: NOT
43392: PUSH
43393: LD_EXP 48
43397: NOT
43398: OR
43399: IFFALSE 43403
// exit ;
43401: GO 43780
// side := GetSide ( vehicle ) ;
43403: LD_ADDR_VAR 0 5
43407: PUSH
43408: LD_VAR 0 1
43412: PPUSH
43413: CALL_OW 255
43417: ST_TO_ADDR
// for i = 1 to mc_bases do
43418: LD_ADDR_VAR 0 4
43422: PUSH
43423: DOUBLE
43424: LD_INT 1
43426: DEC
43427: ST_TO_ADDR
43428: LD_EXP 50
43432: PUSH
43433: FOR_TO
43434: IFFALSE 43778
// begin if factory in mc_bases [ i ] then
43436: LD_VAR 0 2
43440: PUSH
43441: LD_EXP 50
43445: PUSH
43446: LD_VAR 0 4
43450: ARRAY
43451: IN
43452: IFFALSE 43776
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
43454: LD_EXP 72
43458: PUSH
43459: LD_VAR 0 4
43463: ARRAY
43464: PUSH
43465: LD_EXP 61
43469: PUSH
43470: LD_VAR 0 4
43474: ARRAY
43475: LESS
43476: PUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 264
43486: PUSH
43487: LD_INT 31
43489: PUSH
43490: LD_INT 32
43492: PUSH
43493: LD_INT 51
43495: PUSH
43496: LD_EXP 94
43500: PUSH
43501: LD_INT 12
43503: PUSH
43504: LD_INT 30
43506: PUSH
43507: LD_EXP 93
43511: PUSH
43512: LD_INT 11
43514: PUSH
43515: LD_INT 53
43517: PUSH
43518: LD_INT 14
43520: PUSH
43521: LD_EXP 97
43525: PUSH
43526: LD_INT 29
43528: PUSH
43529: LD_EXP 95
43533: PUSH
43534: LD_INT 13
43536: PUSH
43537: LD_INT 52
43539: PUSH
43540: LD_INT 48
43542: PUSH
43543: LD_INT 8
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: IN
43565: NOT
43566: AND
43567: IFFALSE 43615
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
43569: LD_ADDR_EXP 72
43573: PUSH
43574: LD_EXP 72
43578: PPUSH
43579: LD_VAR 0 4
43583: PUSH
43584: LD_EXP 72
43588: PUSH
43589: LD_VAR 0 4
43593: ARRAY
43594: PUSH
43595: LD_INT 1
43597: PLUS
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PPUSH
43603: LD_VAR 0 1
43607: PPUSH
43608: CALL 54718 0 3
43612: ST_TO_ADDR
43613: GO 43659
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
43615: LD_ADDR_EXP 69
43619: PUSH
43620: LD_EXP 69
43624: PPUSH
43625: LD_VAR 0 4
43629: PUSH
43630: LD_EXP 69
43634: PUSH
43635: LD_VAR 0 4
43639: ARRAY
43640: PUSH
43641: LD_INT 1
43643: PLUS
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PPUSH
43649: LD_VAR 0 1
43653: PPUSH
43654: CALL 54718 0 3
43658: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
43659: LD_VAR 0 1
43663: PPUSH
43664: CALL_OW 263
43668: PUSH
43669: LD_INT 2
43671: EQUAL
43672: IFFALSE 43692
// begin repeat wait ( 0 0$1 ) ;
43674: LD_INT 35
43676: PPUSH
43677: CALL_OW 67
// until IsControledBy ( vehicle ) ;
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 312
43690: IFFALSE 43674
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
43692: LD_VAR 0 1
43696: PPUSH
43697: LD_EXP 74
43701: PUSH
43702: LD_VAR 0 4
43706: ARRAY
43707: PPUSH
43708: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
43712: LD_VAR 0 1
43716: PPUSH
43717: CALL_OW 263
43721: PUSH
43722: LD_INT 1
43724: NONEQUAL
43725: IFFALSE 43729
// break ;
43727: GO 43778
// repeat wait ( 0 0$1 ) ;
43729: LD_INT 35
43731: PPUSH
43732: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
43736: LD_VAR 0 1
43740: PPUSH
43741: LD_EXP 74
43745: PUSH
43746: LD_VAR 0 4
43750: ARRAY
43751: PPUSH
43752: CALL_OW 308
43756: IFFALSE 43729
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
43758: LD_VAR 0 1
43762: PPUSH
43763: CALL_OW 311
43767: PPUSH
43768: CALL_OW 121
// exit ;
43772: POP
43773: POP
43774: GO 43780
// end ; end ;
43776: GO 43433
43778: POP
43779: POP
// end ;
43780: LD_VAR 0 3
43784: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
43785: LD_INT 0
43787: PPUSH
43788: PPUSH
43789: PPUSH
43790: PPUSH
// if not mc_bases or not skirmish then
43791: LD_EXP 50
43795: NOT
43796: PUSH
43797: LD_EXP 48
43801: NOT
43802: OR
43803: IFFALSE 43807
// exit ;
43805: GO 44160
// repeat wait ( 0 0$1 ) ;
43807: LD_INT 35
43809: PPUSH
43810: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
43814: LD_VAR 0 2
43818: PPUSH
43819: LD_VAR 0 3
43823: PPUSH
43824: CALL_OW 284
43828: IFFALSE 43807
// if GetResourceTypeXY ( x , y ) = mat_artefact then
43830: LD_VAR 0 2
43834: PPUSH
43835: LD_VAR 0 3
43839: PPUSH
43840: CALL_OW 283
43844: PUSH
43845: LD_INT 4
43847: EQUAL
43848: IFFALSE 43852
// exit ;
43850: GO 44160
// for i = 1 to mc_bases do
43852: LD_ADDR_VAR 0 7
43856: PUSH
43857: DOUBLE
43858: LD_INT 1
43860: DEC
43861: ST_TO_ADDR
43862: LD_EXP 50
43866: PUSH
43867: FOR_TO
43868: IFFALSE 44158
// begin if mc_crates_area [ i ] then
43870: LD_EXP 68
43874: PUSH
43875: LD_VAR 0 7
43879: ARRAY
43880: IFFALSE 43991
// for j in mc_crates_area [ i ] do
43882: LD_ADDR_VAR 0 8
43886: PUSH
43887: LD_EXP 68
43891: PUSH
43892: LD_VAR 0 7
43896: ARRAY
43897: PUSH
43898: FOR_IN
43899: IFFALSE 43989
// if InArea ( x , y , j ) then
43901: LD_VAR 0 2
43905: PPUSH
43906: LD_VAR 0 3
43910: PPUSH
43911: LD_VAR 0 8
43915: PPUSH
43916: CALL_OW 309
43920: IFFALSE 43987
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
43922: LD_ADDR_EXP 66
43926: PUSH
43927: LD_EXP 66
43931: PPUSH
43932: LD_VAR 0 7
43936: PUSH
43937: LD_EXP 66
43941: PUSH
43942: LD_VAR 0 7
43946: ARRAY
43947: PUSH
43948: LD_INT 1
43950: PLUS
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PPUSH
43956: LD_VAR 0 4
43960: PUSH
43961: LD_VAR 0 2
43965: PUSH
43966: LD_VAR 0 3
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: LIST
43975: PPUSH
43976: CALL 54718 0 3
43980: ST_TO_ADDR
// exit ;
43981: POP
43982: POP
43983: POP
43984: POP
43985: GO 44160
// end ;
43987: GO 43898
43989: POP
43990: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
43991: LD_ADDR_VAR 0 9
43995: PUSH
43996: LD_EXP 50
44000: PUSH
44001: LD_VAR 0 7
44005: ARRAY
44006: PPUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 30
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 30
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: LIST
44034: PPUSH
44035: CALL_OW 72
44039: ST_TO_ADDR
// if not depot then
44040: LD_VAR 0 9
44044: NOT
44045: IFFALSE 44049
// continue ;
44047: GO 43867
// for j in depot do
44049: LD_ADDR_VAR 0 8
44053: PUSH
44054: LD_VAR 0 9
44058: PUSH
44059: FOR_IN
44060: IFFALSE 44154
// if GetDistUnitXY ( j , x , y ) < 30 then
44062: LD_VAR 0 8
44066: PPUSH
44067: LD_VAR 0 2
44071: PPUSH
44072: LD_VAR 0 3
44076: PPUSH
44077: CALL_OW 297
44081: PUSH
44082: LD_INT 30
44084: LESS
44085: IFFALSE 44152
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
44087: LD_ADDR_EXP 66
44091: PUSH
44092: LD_EXP 66
44096: PPUSH
44097: LD_VAR 0 7
44101: PUSH
44102: LD_EXP 66
44106: PUSH
44107: LD_VAR 0 7
44111: ARRAY
44112: PUSH
44113: LD_INT 1
44115: PLUS
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PPUSH
44121: LD_VAR 0 4
44125: PUSH
44126: LD_VAR 0 2
44130: PUSH
44131: LD_VAR 0 3
44135: PUSH
44136: EMPTY
44137: LIST
44138: LIST
44139: LIST
44140: PPUSH
44141: CALL 54718 0 3
44145: ST_TO_ADDR
// exit ;
44146: POP
44147: POP
44148: POP
44149: POP
44150: GO 44160
// end ;
44152: GO 44059
44154: POP
44155: POP
// end ;
44156: GO 43867
44158: POP
44159: POP
// end ;
44160: LD_VAR 0 6
44164: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
44165: LD_INT 0
44167: PPUSH
44168: PPUSH
44169: PPUSH
44170: PPUSH
// if not mc_bases or not skirmish then
44171: LD_EXP 50
44175: NOT
44176: PUSH
44177: LD_EXP 48
44181: NOT
44182: OR
44183: IFFALSE 44187
// exit ;
44185: GO 44464
// side := GetSide ( lab ) ;
44187: LD_ADDR_VAR 0 4
44191: PUSH
44192: LD_VAR 0 2
44196: PPUSH
44197: CALL_OW 255
44201: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
44202: LD_VAR 0 4
44206: PUSH
44207: LD_EXP 76
44211: IN
44212: NOT
44213: PUSH
44214: LD_EXP 77
44218: NOT
44219: OR
44220: PUSH
44221: LD_EXP 50
44225: NOT
44226: OR
44227: IFFALSE 44231
// exit ;
44229: GO 44464
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
44231: LD_ADDR_EXP 77
44235: PUSH
44236: LD_EXP 77
44240: PPUSH
44241: LD_VAR 0 4
44245: PPUSH
44246: LD_EXP 77
44250: PUSH
44251: LD_VAR 0 4
44255: ARRAY
44256: PUSH
44257: LD_VAR 0 1
44261: DIFF
44262: PPUSH
44263: CALL_OW 1
44267: ST_TO_ADDR
// for i = 1 to mc_bases do
44268: LD_ADDR_VAR 0 5
44272: PUSH
44273: DOUBLE
44274: LD_INT 1
44276: DEC
44277: ST_TO_ADDR
44278: LD_EXP 50
44282: PUSH
44283: FOR_TO
44284: IFFALSE 44462
// begin if lab in mc_bases [ i ] then
44286: LD_VAR 0 2
44290: PUSH
44291: LD_EXP 50
44295: PUSH
44296: LD_VAR 0 5
44300: ARRAY
44301: IN
44302: IFFALSE 44460
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
44304: LD_VAR 0 1
44308: PUSH
44309: LD_INT 11
44311: PUSH
44312: LD_INT 4
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: IN
44327: PUSH
44328: LD_EXP 80
44332: PUSH
44333: LD_VAR 0 5
44337: ARRAY
44338: AND
44339: IFFALSE 44460
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_EXP 80
44350: PUSH
44351: LD_VAR 0 5
44355: ARRAY
44356: PUSH
44357: LD_INT 1
44359: ARRAY
44360: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44361: LD_ADDR_EXP 80
44365: PUSH
44366: LD_EXP 80
44370: PPUSH
44371: LD_VAR 0 5
44375: PPUSH
44376: EMPTY
44377: PPUSH
44378: CALL_OW 1
44382: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
44383: LD_VAR 0 6
44387: PPUSH
44388: LD_INT 0
44390: PPUSH
44391: CALL_OW 109
// ComExitBuilding ( tmp ) ;
44395: LD_VAR 0 6
44399: PPUSH
44400: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
44404: LD_ADDR_EXP 79
44408: PUSH
44409: LD_EXP 79
44413: PPUSH
44414: LD_VAR 0 5
44418: PPUSH
44419: LD_EXP 79
44423: PUSH
44424: LD_VAR 0 5
44428: ARRAY
44429: PPUSH
44430: LD_INT 1
44432: PPUSH
44433: LD_VAR 0 6
44437: PPUSH
44438: CALL_OW 2
44442: PPUSH
44443: CALL_OW 1
44447: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
44448: LD_VAR 0 5
44452: PPUSH
44453: LD_INT 112
44455: PPUSH
44456: CALL 21460 0 2
// end ; end ; end ;
44460: GO 44283
44462: POP
44463: POP
// end ;
44464: LD_VAR 0 3
44468: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
44469: LD_INT 0
44471: PPUSH
44472: PPUSH
44473: PPUSH
44474: PPUSH
44475: PPUSH
44476: PPUSH
44477: PPUSH
44478: PPUSH
// if not mc_bases or not skirmish then
44479: LD_EXP 50
44483: NOT
44484: PUSH
44485: LD_EXP 48
44489: NOT
44490: OR
44491: IFFALSE 44495
// exit ;
44493: GO 45866
// for i = 1 to mc_bases do
44495: LD_ADDR_VAR 0 3
44499: PUSH
44500: DOUBLE
44501: LD_INT 1
44503: DEC
44504: ST_TO_ADDR
44505: LD_EXP 50
44509: PUSH
44510: FOR_TO
44511: IFFALSE 45864
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
44513: LD_VAR 0 1
44517: PUSH
44518: LD_EXP 50
44522: PUSH
44523: LD_VAR 0 3
44527: ARRAY
44528: IN
44529: PUSH
44530: LD_VAR 0 1
44534: PUSH
44535: LD_EXP 57
44539: PUSH
44540: LD_VAR 0 3
44544: ARRAY
44545: IN
44546: OR
44547: PUSH
44548: LD_VAR 0 1
44552: PUSH
44553: LD_EXP 72
44557: PUSH
44558: LD_VAR 0 3
44562: ARRAY
44563: IN
44564: OR
44565: PUSH
44566: LD_VAR 0 1
44570: PUSH
44571: LD_EXP 69
44575: PUSH
44576: LD_VAR 0 3
44580: ARRAY
44581: IN
44582: OR
44583: PUSH
44584: LD_VAR 0 1
44588: PUSH
44589: LD_EXP 79
44593: PUSH
44594: LD_VAR 0 3
44598: ARRAY
44599: IN
44600: OR
44601: PUSH
44602: LD_VAR 0 1
44606: PUSH
44607: LD_EXP 80
44611: PUSH
44612: LD_VAR 0 3
44616: ARRAY
44617: IN
44618: OR
44619: IFFALSE 45862
// begin if un in mc_ape [ i ] then
44621: LD_VAR 0 1
44625: PUSH
44626: LD_EXP 79
44630: PUSH
44631: LD_VAR 0 3
44635: ARRAY
44636: IN
44637: IFFALSE 44676
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
44639: LD_ADDR_EXP 79
44643: PUSH
44644: LD_EXP 79
44648: PPUSH
44649: LD_VAR 0 3
44653: PPUSH
44654: LD_EXP 79
44658: PUSH
44659: LD_VAR 0 3
44663: ARRAY
44664: PUSH
44665: LD_VAR 0 1
44669: DIFF
44670: PPUSH
44671: CALL_OW 1
44675: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
44676: LD_VAR 0 1
44680: PUSH
44681: LD_EXP 80
44685: PUSH
44686: LD_VAR 0 3
44690: ARRAY
44691: IN
44692: IFFALSE 44716
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
44694: LD_ADDR_EXP 80
44698: PUSH
44699: LD_EXP 80
44703: PPUSH
44704: LD_VAR 0 3
44708: PPUSH
44709: EMPTY
44710: PPUSH
44711: CALL_OW 1
44715: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
44716: LD_VAR 0 1
44720: PPUSH
44721: CALL_OW 247
44725: PUSH
44726: LD_INT 2
44728: EQUAL
44729: PUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: CALL_OW 110
44739: PUSH
44740: LD_INT 20
44742: EQUAL
44743: PUSH
44744: LD_VAR 0 1
44748: PUSH
44749: LD_EXP 72
44753: PUSH
44754: LD_VAR 0 3
44758: ARRAY
44759: IN
44760: OR
44761: PUSH
44762: LD_VAR 0 1
44766: PPUSH
44767: CALL_OW 264
44771: PUSH
44772: LD_INT 12
44774: PUSH
44775: LD_INT 51
44777: PUSH
44778: LD_EXP 94
44782: PUSH
44783: LD_INT 32
44785: PUSH
44786: LD_INT 13
44788: PUSH
44789: LD_INT 52
44791: PUSH
44792: LD_INT 31
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: IN
44804: OR
44805: AND
44806: IFFALSE 45114
// begin if un in mc_defender [ i ] then
44808: LD_VAR 0 1
44812: PUSH
44813: LD_EXP 72
44817: PUSH
44818: LD_VAR 0 3
44822: ARRAY
44823: IN
44824: IFFALSE 44863
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
44826: LD_ADDR_EXP 72
44830: PUSH
44831: LD_EXP 72
44835: PPUSH
44836: LD_VAR 0 3
44840: PPUSH
44841: LD_EXP 72
44845: PUSH
44846: LD_VAR 0 3
44850: ARRAY
44851: PUSH
44852: LD_VAR 0 1
44856: DIFF
44857: PPUSH
44858: CALL_OW 1
44862: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
44863: LD_ADDR_VAR 0 8
44867: PUSH
44868: LD_VAR 0 3
44872: PPUSH
44873: LD_INT 3
44875: PPUSH
44876: CALL 41532 0 2
44880: ST_TO_ADDR
// if fac then
44881: LD_VAR 0 8
44885: IFFALSE 45114
// begin for j in fac do
44887: LD_ADDR_VAR 0 4
44891: PUSH
44892: LD_VAR 0 8
44896: PUSH
44897: FOR_IN
44898: IFFALSE 45112
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
44900: LD_ADDR_VAR 0 9
44904: PUSH
44905: LD_VAR 0 8
44909: PPUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: CALL_OW 265
44919: PPUSH
44920: LD_VAR 0 1
44924: PPUSH
44925: CALL_OW 262
44929: PPUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: CALL_OW 263
44939: PPUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 264
44949: PPUSH
44950: CALL 52250 0 5
44954: ST_TO_ADDR
// if components then
44955: LD_VAR 0 9
44959: IFFALSE 45110
// begin if GetWeapon ( un ) = ar_control_tower then
44961: LD_VAR 0 1
44965: PPUSH
44966: CALL_OW 264
44970: PUSH
44971: LD_INT 31
44973: EQUAL
44974: IFFALSE 45091
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
44976: LD_VAR 0 1
44980: PPUSH
44981: CALL_OW 311
44985: PPUSH
44986: LD_INT 0
44988: PPUSH
44989: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
44993: LD_ADDR_EXP 90
44997: PUSH
44998: LD_EXP 90
45002: PPUSH
45003: LD_VAR 0 3
45007: PPUSH
45008: LD_EXP 90
45012: PUSH
45013: LD_VAR 0 3
45017: ARRAY
45018: PUSH
45019: LD_VAR 0 1
45023: PPUSH
45024: CALL_OW 311
45028: DIFF
45029: PPUSH
45030: CALL_OW 1
45034: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
45035: LD_ADDR_VAR 0 7
45039: PUSH
45040: LD_EXP 71
45044: PUSH
45045: LD_VAR 0 3
45049: ARRAY
45050: PPUSH
45051: LD_INT 1
45053: PPUSH
45054: LD_VAR 0 9
45058: PPUSH
45059: CALL_OW 2
45063: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
45064: LD_ADDR_EXP 71
45068: PUSH
45069: LD_EXP 71
45073: PPUSH
45074: LD_VAR 0 3
45078: PPUSH
45079: LD_VAR 0 7
45083: PPUSH
45084: CALL_OW 1
45088: ST_TO_ADDR
// end else
45089: GO 45108
// MC_InsertProduceList ( i , [ components ] ) ;
45091: LD_VAR 0 3
45095: PPUSH
45096: LD_VAR 0 9
45100: PUSH
45101: EMPTY
45102: LIST
45103: PPUSH
45104: CALL 41077 0 2
// break ;
45108: GO 45112
// end ; end ;
45110: GO 44897
45112: POP
45113: POP
// end ; end ; if GetType ( un ) = unit_building then
45114: LD_VAR 0 1
45118: PPUSH
45119: CALL_OW 247
45123: PUSH
45124: LD_INT 3
45126: EQUAL
45127: IFFALSE 45530
// begin btype := GetBType ( un ) ;
45129: LD_ADDR_VAR 0 5
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: CALL_OW 266
45143: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
45144: LD_VAR 0 5
45148: PUSH
45149: LD_INT 29
45151: PUSH
45152: LD_INT 30
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: IN
45159: IFFALSE 45232
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 250
45170: PPUSH
45171: LD_VAR 0 1
45175: PPUSH
45176: CALL_OW 251
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 255
45190: PPUSH
45191: CALL_OW 440
45195: NOT
45196: IFFALSE 45232
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
45198: LD_VAR 0 1
45202: PPUSH
45203: CALL_OW 250
45207: PPUSH
45208: LD_VAR 0 1
45212: PPUSH
45213: CALL_OW 251
45217: PPUSH
45218: LD_VAR 0 1
45222: PPUSH
45223: CALL_OW 255
45227: PPUSH
45228: CALL_OW 441
// end ; if btype = b_warehouse then
45232: LD_VAR 0 5
45236: PUSH
45237: LD_INT 1
45239: EQUAL
45240: IFFALSE 45258
// begin btype := b_depot ;
45242: LD_ADDR_VAR 0 5
45246: PUSH
45247: LD_INT 0
45249: ST_TO_ADDR
// pos := 1 ;
45250: LD_ADDR_VAR 0 6
45254: PUSH
45255: LD_INT 1
45257: ST_TO_ADDR
// end ; if btype = b_factory then
45258: LD_VAR 0 5
45262: PUSH
45263: LD_INT 3
45265: EQUAL
45266: IFFALSE 45284
// begin btype := b_workshop ;
45268: LD_ADDR_VAR 0 5
45272: PUSH
45273: LD_INT 2
45275: ST_TO_ADDR
// pos := 1 ;
45276: LD_ADDR_VAR 0 6
45280: PUSH
45281: LD_INT 1
45283: ST_TO_ADDR
// end ; if btype = b_barracks then
45284: LD_VAR 0 5
45288: PUSH
45289: LD_INT 5
45291: EQUAL
45292: IFFALSE 45302
// btype := b_armoury ;
45294: LD_ADDR_VAR 0 5
45298: PUSH
45299: LD_INT 4
45301: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
45302: LD_VAR 0 5
45306: PUSH
45307: LD_INT 7
45309: PUSH
45310: LD_INT 8
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: IN
45317: IFFALSE 45327
// btype := b_lab ;
45319: LD_ADDR_VAR 0 5
45323: PUSH
45324: LD_INT 6
45326: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
45327: LD_ADDR_EXP 55
45331: PUSH
45332: LD_EXP 55
45336: PPUSH
45337: LD_VAR 0 3
45341: PUSH
45342: LD_EXP 55
45346: PUSH
45347: LD_VAR 0 3
45351: ARRAY
45352: PUSH
45353: LD_INT 1
45355: PLUS
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PPUSH
45361: LD_VAR 0 5
45365: PUSH
45366: LD_VAR 0 1
45370: PPUSH
45371: CALL_OW 250
45375: PUSH
45376: LD_VAR 0 1
45380: PPUSH
45381: CALL_OW 251
45385: PUSH
45386: LD_VAR 0 1
45390: PPUSH
45391: CALL_OW 254
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: PPUSH
45402: CALL 54718 0 3
45406: ST_TO_ADDR
// if pos = 1 then
45407: LD_VAR 0 6
45411: PUSH
45412: LD_INT 1
45414: EQUAL
45415: IFFALSE 45530
// begin tmp := mc_build_list [ i ] ;
45417: LD_ADDR_VAR 0 7
45421: PUSH
45422: LD_EXP 55
45426: PUSH
45427: LD_VAR 0 3
45431: ARRAY
45432: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
45433: LD_VAR 0 7
45437: PPUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 30
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 30
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: LIST
45465: PPUSH
45466: CALL_OW 72
45470: IFFALSE 45480
// pos := 2 ;
45472: LD_ADDR_VAR 0 6
45476: PUSH
45477: LD_INT 2
45479: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
45480: LD_ADDR_VAR 0 7
45484: PUSH
45485: LD_VAR 0 7
45489: PPUSH
45490: LD_VAR 0 6
45494: PPUSH
45495: LD_VAR 0 7
45499: PPUSH
45500: CALL 55044 0 3
45504: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
45505: LD_ADDR_EXP 55
45509: PUSH
45510: LD_EXP 55
45514: PPUSH
45515: LD_VAR 0 3
45519: PPUSH
45520: LD_VAR 0 7
45524: PPUSH
45525: CALL_OW 1
45529: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
45530: LD_VAR 0 1
45534: PUSH
45535: LD_EXP 50
45539: PUSH
45540: LD_VAR 0 3
45544: ARRAY
45545: IN
45546: IFFALSE 45585
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
45548: LD_ADDR_EXP 50
45552: PUSH
45553: LD_EXP 50
45557: PPUSH
45558: LD_VAR 0 3
45562: PPUSH
45563: LD_EXP 50
45567: PUSH
45568: LD_VAR 0 3
45572: ARRAY
45573: PUSH
45574: LD_VAR 0 1
45578: DIFF
45579: PPUSH
45580: CALL_OW 1
45584: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
45585: LD_VAR 0 1
45589: PUSH
45590: LD_EXP 57
45594: PUSH
45595: LD_VAR 0 3
45599: ARRAY
45600: IN
45601: IFFALSE 45640
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
45603: LD_ADDR_EXP 57
45607: PUSH
45608: LD_EXP 57
45612: PPUSH
45613: LD_VAR 0 3
45617: PPUSH
45618: LD_EXP 57
45622: PUSH
45623: LD_VAR 0 3
45627: ARRAY
45628: PUSH
45629: LD_VAR 0 1
45633: DIFF
45634: PPUSH
45635: CALL_OW 1
45639: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
45640: LD_VAR 0 1
45644: PUSH
45645: LD_EXP 69
45649: PUSH
45650: LD_VAR 0 3
45654: ARRAY
45655: IN
45656: IFFALSE 45695
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
45658: LD_ADDR_EXP 69
45662: PUSH
45663: LD_EXP 69
45667: PPUSH
45668: LD_VAR 0 3
45672: PPUSH
45673: LD_EXP 69
45677: PUSH
45678: LD_VAR 0 3
45682: ARRAY
45683: PUSH
45684: LD_VAR 0 1
45688: DIFF
45689: PPUSH
45690: CALL_OW 1
45694: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
45695: LD_VAR 0 1
45699: PUSH
45700: LD_EXP 72
45704: PUSH
45705: LD_VAR 0 3
45709: ARRAY
45710: IN
45711: IFFALSE 45750
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
45713: LD_ADDR_EXP 72
45717: PUSH
45718: LD_EXP 72
45722: PPUSH
45723: LD_VAR 0 3
45727: PPUSH
45728: LD_EXP 72
45732: PUSH
45733: LD_VAR 0 3
45737: ARRAY
45738: PUSH
45739: LD_VAR 0 1
45743: DIFF
45744: PPUSH
45745: CALL_OW 1
45749: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
45750: LD_VAR 0 1
45754: PUSH
45755: LD_EXP 59
45759: PUSH
45760: LD_VAR 0 3
45764: ARRAY
45765: IN
45766: IFFALSE 45805
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
45768: LD_ADDR_EXP 59
45772: PUSH
45773: LD_EXP 59
45777: PPUSH
45778: LD_VAR 0 3
45782: PPUSH
45783: LD_EXP 59
45787: PUSH
45788: LD_VAR 0 3
45792: ARRAY
45793: PUSH
45794: LD_VAR 0 1
45798: DIFF
45799: PPUSH
45800: CALL_OW 1
45804: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
45805: LD_VAR 0 1
45809: PUSH
45810: LD_EXP 58
45814: PUSH
45815: LD_VAR 0 3
45819: ARRAY
45820: IN
45821: IFFALSE 45860
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
45823: LD_ADDR_EXP 58
45827: PUSH
45828: LD_EXP 58
45832: PPUSH
45833: LD_VAR 0 3
45837: PPUSH
45838: LD_EXP 58
45842: PUSH
45843: LD_VAR 0 3
45847: ARRAY
45848: PUSH
45849: LD_VAR 0 1
45853: DIFF
45854: PPUSH
45855: CALL_OW 1
45859: ST_TO_ADDR
// end ; break ;
45860: GO 45864
// end ;
45862: GO 44510
45864: POP
45865: POP
// end ;
45866: LD_VAR 0 2
45870: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
45871: LD_INT 0
45873: PPUSH
45874: PPUSH
45875: PPUSH
// if not mc_bases or not skirmish then
45876: LD_EXP 50
45880: NOT
45881: PUSH
45882: LD_EXP 48
45886: NOT
45887: OR
45888: IFFALSE 45892
// exit ;
45890: GO 46107
// for i = 1 to mc_bases do
45892: LD_ADDR_VAR 0 3
45896: PUSH
45897: DOUBLE
45898: LD_INT 1
45900: DEC
45901: ST_TO_ADDR
45902: LD_EXP 50
45906: PUSH
45907: FOR_TO
45908: IFFALSE 46105
// begin if building in mc_construct_list [ i ] then
45910: LD_VAR 0 1
45914: PUSH
45915: LD_EXP 57
45919: PUSH
45920: LD_VAR 0 3
45924: ARRAY
45925: IN
45926: IFFALSE 46103
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
45928: LD_ADDR_EXP 57
45932: PUSH
45933: LD_EXP 57
45937: PPUSH
45938: LD_VAR 0 3
45942: PPUSH
45943: LD_EXP 57
45947: PUSH
45948: LD_VAR 0 3
45952: ARRAY
45953: PUSH
45954: LD_VAR 0 1
45958: DIFF
45959: PPUSH
45960: CALL_OW 1
45964: ST_TO_ADDR
// if building in mc_lab [ i ] then
45965: LD_VAR 0 1
45969: PUSH
45970: LD_EXP 83
45974: PUSH
45975: LD_VAR 0 3
45979: ARRAY
45980: IN
45981: IFFALSE 46036
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
45983: LD_ADDR_EXP 84
45987: PUSH
45988: LD_EXP 84
45992: PPUSH
45993: LD_VAR 0 3
45997: PPUSH
45998: LD_EXP 84
46002: PUSH
46003: LD_VAR 0 3
46007: ARRAY
46008: PPUSH
46009: LD_INT 1
46011: PPUSH
46012: LD_EXP 84
46016: PUSH
46017: LD_VAR 0 3
46021: ARRAY
46022: PPUSH
46023: LD_INT 0
46025: PPUSH
46026: CALL 54136 0 4
46030: PPUSH
46031: CALL_OW 1
46035: ST_TO_ADDR
// if not building in mc_bases [ i ] then
46036: LD_VAR 0 1
46040: PUSH
46041: LD_EXP 50
46045: PUSH
46046: LD_VAR 0 3
46050: ARRAY
46051: IN
46052: NOT
46053: IFFALSE 46099
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46055: LD_ADDR_EXP 50
46059: PUSH
46060: LD_EXP 50
46064: PPUSH
46065: LD_VAR 0 3
46069: PUSH
46070: LD_EXP 50
46074: PUSH
46075: LD_VAR 0 3
46079: ARRAY
46080: PUSH
46081: LD_INT 1
46083: PLUS
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: LD_VAR 0 1
46093: PPUSH
46094: CALL 54718 0 3
46098: ST_TO_ADDR
// exit ;
46099: POP
46100: POP
46101: GO 46107
// end ; end ;
46103: GO 45907
46105: POP
46106: POP
// end ;
46107: LD_VAR 0 2
46111: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
46112: LD_INT 0
46114: PPUSH
46115: PPUSH
46116: PPUSH
46117: PPUSH
46118: PPUSH
46119: PPUSH
46120: PPUSH
// if not mc_bases or not skirmish then
46121: LD_EXP 50
46125: NOT
46126: PUSH
46127: LD_EXP 48
46131: NOT
46132: OR
46133: IFFALSE 46137
// exit ;
46135: GO 46798
// for i = 1 to mc_bases do
46137: LD_ADDR_VAR 0 3
46141: PUSH
46142: DOUBLE
46143: LD_INT 1
46145: DEC
46146: ST_TO_ADDR
46147: LD_EXP 50
46151: PUSH
46152: FOR_TO
46153: IFFALSE 46796
// begin if building in mc_construct_list [ i ] then
46155: LD_VAR 0 1
46159: PUSH
46160: LD_EXP 57
46164: PUSH
46165: LD_VAR 0 3
46169: ARRAY
46170: IN
46171: IFFALSE 46794
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
46173: LD_ADDR_EXP 57
46177: PUSH
46178: LD_EXP 57
46182: PPUSH
46183: LD_VAR 0 3
46187: PPUSH
46188: LD_EXP 57
46192: PUSH
46193: LD_VAR 0 3
46197: ARRAY
46198: PUSH
46199: LD_VAR 0 1
46203: DIFF
46204: PPUSH
46205: CALL_OW 1
46209: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
46210: LD_ADDR_EXP 50
46214: PUSH
46215: LD_EXP 50
46219: PPUSH
46220: LD_VAR 0 3
46224: PUSH
46225: LD_EXP 50
46229: PUSH
46230: LD_VAR 0 3
46234: ARRAY
46235: PUSH
46236: LD_INT 1
46238: PLUS
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PPUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: CALL 54718 0 3
46253: ST_TO_ADDR
// btype := GetBType ( building ) ;
46254: LD_ADDR_VAR 0 5
46258: PUSH
46259: LD_VAR 0 1
46263: PPUSH
46264: CALL_OW 266
46268: ST_TO_ADDR
// side := GetSide ( building ) ;
46269: LD_ADDR_VAR 0 8
46273: PUSH
46274: LD_VAR 0 1
46278: PPUSH
46279: CALL_OW 255
46283: ST_TO_ADDR
// if btype = b_lab then
46284: LD_VAR 0 5
46288: PUSH
46289: LD_INT 6
46291: EQUAL
46292: IFFALSE 46342
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
46294: LD_ADDR_EXP 83
46298: PUSH
46299: LD_EXP 83
46303: PPUSH
46304: LD_VAR 0 3
46308: PUSH
46309: LD_EXP 83
46313: PUSH
46314: LD_VAR 0 3
46318: ARRAY
46319: PUSH
46320: LD_INT 1
46322: PLUS
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PPUSH
46328: LD_VAR 0 1
46332: PPUSH
46333: CALL 54718 0 3
46337: ST_TO_ADDR
// exit ;
46338: POP
46339: POP
46340: GO 46798
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
46342: LD_VAR 0 5
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 4
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: LIST
46360: IN
46361: IFFALSE 46485
// begin if btype = b_armoury then
46363: LD_VAR 0 5
46367: PUSH
46368: LD_INT 4
46370: EQUAL
46371: IFFALSE 46381
// btype := b_barracks ;
46373: LD_ADDR_VAR 0 5
46377: PUSH
46378: LD_INT 5
46380: ST_TO_ADDR
// if btype = b_depot then
46381: LD_VAR 0 5
46385: PUSH
46386: LD_INT 0
46388: EQUAL
46389: IFFALSE 46399
// btype := b_warehouse ;
46391: LD_ADDR_VAR 0 5
46395: PUSH
46396: LD_INT 1
46398: ST_TO_ADDR
// if btype = b_workshop then
46399: LD_VAR 0 5
46403: PUSH
46404: LD_INT 2
46406: EQUAL
46407: IFFALSE 46417
// btype := b_factory ;
46409: LD_ADDR_VAR 0 5
46413: PUSH
46414: LD_INT 3
46416: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
46417: LD_VAR 0 5
46421: PPUSH
46422: LD_VAR 0 8
46426: PPUSH
46427: CALL_OW 323
46431: PUSH
46432: LD_INT 1
46434: EQUAL
46435: IFFALSE 46481
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
46437: LD_ADDR_EXP 82
46441: PUSH
46442: LD_EXP 82
46446: PPUSH
46447: LD_VAR 0 3
46451: PUSH
46452: LD_EXP 82
46456: PUSH
46457: LD_VAR 0 3
46461: ARRAY
46462: PUSH
46463: LD_INT 1
46465: PLUS
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PPUSH
46471: LD_VAR 0 1
46475: PPUSH
46476: CALL 54718 0 3
46480: ST_TO_ADDR
// exit ;
46481: POP
46482: POP
46483: GO 46798
// end ; if btype in [ b_bunker , b_turret ] then
46485: LD_VAR 0 5
46489: PUSH
46490: LD_INT 32
46492: PUSH
46493: LD_INT 33
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: IN
46500: IFFALSE 46790
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
46502: LD_ADDR_EXP 58
46506: PUSH
46507: LD_EXP 58
46511: PPUSH
46512: LD_VAR 0 3
46516: PUSH
46517: LD_EXP 58
46521: PUSH
46522: LD_VAR 0 3
46526: ARRAY
46527: PUSH
46528: LD_INT 1
46530: PLUS
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PPUSH
46536: LD_VAR 0 1
46540: PPUSH
46541: CALL 54718 0 3
46545: ST_TO_ADDR
// if btype = b_bunker then
46546: LD_VAR 0 5
46550: PUSH
46551: LD_INT 32
46553: EQUAL
46554: IFFALSE 46790
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
46556: LD_ADDR_EXP 59
46560: PUSH
46561: LD_EXP 59
46565: PPUSH
46566: LD_VAR 0 3
46570: PUSH
46571: LD_EXP 59
46575: PUSH
46576: LD_VAR 0 3
46580: ARRAY
46581: PUSH
46582: LD_INT 1
46584: PLUS
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PPUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: CALL 54718 0 3
46599: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
46600: LD_ADDR_VAR 0 6
46604: PUSH
46605: LD_EXP 50
46609: PUSH
46610: LD_VAR 0 3
46614: ARRAY
46615: PPUSH
46616: LD_INT 25
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 3
46628: PUSH
46629: LD_INT 54
46631: PUSH
46632: EMPTY
46633: LIST
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PPUSH
46643: CALL_OW 72
46647: ST_TO_ADDR
// if tmp then
46648: LD_VAR 0 6
46652: IFFALSE 46658
// exit ;
46654: POP
46655: POP
46656: GO 46798
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
46658: LD_ADDR_VAR 0 6
46662: PUSH
46663: LD_EXP 50
46667: PUSH
46668: LD_VAR 0 3
46672: ARRAY
46673: PPUSH
46674: LD_INT 2
46676: PUSH
46677: LD_INT 30
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 30
46689: PUSH
46690: LD_INT 5
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: LIST
46701: PPUSH
46702: CALL_OW 72
46706: ST_TO_ADDR
// if not tmp then
46707: LD_VAR 0 6
46711: NOT
46712: IFFALSE 46718
// exit ;
46714: POP
46715: POP
46716: GO 46798
// for j in tmp do
46718: LD_ADDR_VAR 0 4
46722: PUSH
46723: LD_VAR 0 6
46727: PUSH
46728: FOR_IN
46729: IFFALSE 46788
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
46731: LD_ADDR_VAR 0 7
46735: PUSH
46736: LD_VAR 0 4
46740: PPUSH
46741: CALL_OW 313
46745: PPUSH
46746: LD_INT 25
46748: PUSH
46749: LD_INT 1
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PPUSH
46756: CALL_OW 72
46760: ST_TO_ADDR
// if units then
46761: LD_VAR 0 7
46765: IFFALSE 46786
// begin ComExitBuilding ( units [ 1 ] ) ;
46767: LD_VAR 0 7
46771: PUSH
46772: LD_INT 1
46774: ARRAY
46775: PPUSH
46776: CALL_OW 122
// exit ;
46780: POP
46781: POP
46782: POP
46783: POP
46784: GO 46798
// end ; end ;
46786: GO 46728
46788: POP
46789: POP
// end ; end ; exit ;
46790: POP
46791: POP
46792: GO 46798
// end ; end ;
46794: GO 46152
46796: POP
46797: POP
// end ;
46798: LD_VAR 0 2
46802: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
46803: LD_INT 0
46805: PPUSH
46806: PPUSH
46807: PPUSH
46808: PPUSH
46809: PPUSH
46810: PPUSH
46811: PPUSH
// if not mc_bases or not skirmish then
46812: LD_EXP 50
46816: NOT
46817: PUSH
46818: LD_EXP 48
46822: NOT
46823: OR
46824: IFFALSE 46828
// exit ;
46826: GO 47059
// btype := GetBType ( building ) ;
46828: LD_ADDR_VAR 0 6
46832: PUSH
46833: LD_VAR 0 1
46837: PPUSH
46838: CALL_OW 266
46842: ST_TO_ADDR
// x := GetX ( building ) ;
46843: LD_ADDR_VAR 0 7
46847: PUSH
46848: LD_VAR 0 1
46852: PPUSH
46853: CALL_OW 250
46857: ST_TO_ADDR
// y := GetY ( building ) ;
46858: LD_ADDR_VAR 0 8
46862: PUSH
46863: LD_VAR 0 1
46867: PPUSH
46868: CALL_OW 251
46872: ST_TO_ADDR
// d := GetDir ( building ) ;
46873: LD_ADDR_VAR 0 9
46877: PUSH
46878: LD_VAR 0 1
46882: PPUSH
46883: CALL_OW 254
46887: ST_TO_ADDR
// for i = 1 to mc_bases do
46888: LD_ADDR_VAR 0 4
46892: PUSH
46893: DOUBLE
46894: LD_INT 1
46896: DEC
46897: ST_TO_ADDR
46898: LD_EXP 50
46902: PUSH
46903: FOR_TO
46904: IFFALSE 47057
// begin if not mc_build_list [ i ] then
46906: LD_EXP 55
46910: PUSH
46911: LD_VAR 0 4
46915: ARRAY
46916: NOT
46917: IFFALSE 46921
// continue ;
46919: GO 46903
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
46921: LD_VAR 0 6
46925: PUSH
46926: LD_VAR 0 7
46930: PUSH
46931: LD_VAR 0 8
46935: PUSH
46936: LD_VAR 0 9
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: PPUSH
46947: LD_EXP 55
46951: PUSH
46952: LD_VAR 0 4
46956: ARRAY
46957: PUSH
46958: LD_INT 1
46960: ARRAY
46961: PPUSH
46962: CALL 60887 0 2
46966: IFFALSE 47055
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
46968: LD_ADDR_EXP 55
46972: PUSH
46973: LD_EXP 55
46977: PPUSH
46978: LD_VAR 0 4
46982: PPUSH
46983: LD_EXP 55
46987: PUSH
46988: LD_VAR 0 4
46992: ARRAY
46993: PPUSH
46994: LD_INT 1
46996: PPUSH
46997: CALL_OW 3
47001: PPUSH
47002: CALL_OW 1
47006: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
47007: LD_ADDR_EXP 57
47011: PUSH
47012: LD_EXP 57
47016: PPUSH
47017: LD_VAR 0 4
47021: PUSH
47022: LD_EXP 57
47026: PUSH
47027: LD_VAR 0 4
47031: ARRAY
47032: PUSH
47033: LD_INT 1
47035: PLUS
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PPUSH
47041: LD_VAR 0 1
47045: PPUSH
47046: CALL 54718 0 3
47050: ST_TO_ADDR
// exit ;
47051: POP
47052: POP
47053: GO 47059
// end ; end ;
47055: GO 46903
47057: POP
47058: POP
// end ;
47059: LD_VAR 0 3
47063: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
47064: LD_INT 0
47066: PPUSH
47067: PPUSH
47068: PPUSH
// if not mc_bases or not skirmish then
47069: LD_EXP 50
47073: NOT
47074: PUSH
47075: LD_EXP 48
47079: NOT
47080: OR
47081: IFFALSE 47085
// exit ;
47083: GO 47275
// for i = 1 to mc_bases do
47085: LD_ADDR_VAR 0 4
47089: PUSH
47090: DOUBLE
47091: LD_INT 1
47093: DEC
47094: ST_TO_ADDR
47095: LD_EXP 50
47099: PUSH
47100: FOR_TO
47101: IFFALSE 47188
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
47103: LD_VAR 0 1
47107: PUSH
47108: LD_EXP 58
47112: PUSH
47113: LD_VAR 0 4
47117: ARRAY
47118: IN
47119: PUSH
47120: LD_VAR 0 1
47124: PUSH
47125: LD_EXP 59
47129: PUSH
47130: LD_VAR 0 4
47134: ARRAY
47135: IN
47136: NOT
47137: AND
47138: IFFALSE 47186
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
47140: LD_ADDR_EXP 59
47144: PUSH
47145: LD_EXP 59
47149: PPUSH
47150: LD_VAR 0 4
47154: PUSH
47155: LD_EXP 59
47159: PUSH
47160: LD_VAR 0 4
47164: ARRAY
47165: PUSH
47166: LD_INT 1
47168: PLUS
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PPUSH
47174: LD_VAR 0 1
47178: PPUSH
47179: CALL 54718 0 3
47183: ST_TO_ADDR
// break ;
47184: GO 47188
// end ; end ;
47186: GO 47100
47188: POP
47189: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
47190: LD_VAR 0 1
47194: PPUSH
47195: CALL_OW 257
47199: PUSH
47200: LD_EXP 76
47204: IN
47205: PUSH
47206: LD_VAR 0 1
47210: PPUSH
47211: CALL_OW 266
47215: PUSH
47216: LD_INT 5
47218: EQUAL
47219: AND
47220: PUSH
47221: LD_VAR 0 2
47225: PPUSH
47226: CALL_OW 110
47230: PUSH
47231: LD_INT 18
47233: NONEQUAL
47234: AND
47235: IFFALSE 47275
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
47237: LD_VAR 0 2
47241: PPUSH
47242: CALL_OW 257
47246: PUSH
47247: LD_INT 5
47249: PUSH
47250: LD_INT 8
47252: PUSH
47253: LD_INT 9
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: IN
47261: IFFALSE 47275
// SetClass ( unit , 1 ) ;
47263: LD_VAR 0 2
47267: PPUSH
47268: LD_INT 1
47270: PPUSH
47271: CALL_OW 336
// end ;
47275: LD_VAR 0 3
47279: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
47280: LD_INT 0
47282: PPUSH
47283: PPUSH
// if not mc_bases or not skirmish then
47284: LD_EXP 50
47288: NOT
47289: PUSH
47290: LD_EXP 48
47294: NOT
47295: OR
47296: IFFALSE 47300
// exit ;
47298: GO 47416
// if GetLives ( abandoned_vehicle ) > 250 then
47300: LD_VAR 0 2
47304: PPUSH
47305: CALL_OW 256
47309: PUSH
47310: LD_INT 250
47312: GREATER
47313: IFFALSE 47317
// exit ;
47315: GO 47416
// for i = 1 to mc_bases do
47317: LD_ADDR_VAR 0 6
47321: PUSH
47322: DOUBLE
47323: LD_INT 1
47325: DEC
47326: ST_TO_ADDR
47327: LD_EXP 50
47331: PUSH
47332: FOR_TO
47333: IFFALSE 47414
// begin if driver in mc_bases [ i ] then
47335: LD_VAR 0 1
47339: PUSH
47340: LD_EXP 50
47344: PUSH
47345: LD_VAR 0 6
47349: ARRAY
47350: IN
47351: IFFALSE 47412
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
47353: LD_VAR 0 1
47357: PPUSH
47358: LD_EXP 50
47362: PUSH
47363: LD_VAR 0 6
47367: ARRAY
47368: PPUSH
47369: LD_INT 2
47371: PUSH
47372: LD_INT 30
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 30
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: LIST
47396: PPUSH
47397: CALL_OW 72
47401: PUSH
47402: LD_INT 1
47404: ARRAY
47405: PPUSH
47406: CALL_OW 112
// break ;
47410: GO 47414
// end ; end ;
47412: GO 47332
47414: POP
47415: POP
// end ; end_of_file
47416: LD_VAR 0 5
47420: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47421: LD_INT 0
47423: PPUSH
47424: PPUSH
// if exist_mode then
47425: LD_VAR 0 2
47429: IFFALSE 47454
// unit := CreateCharacter ( prefix & ident ) else
47431: LD_ADDR_VAR 0 5
47435: PUSH
47436: LD_VAR 0 3
47440: PUSH
47441: LD_VAR 0 1
47445: STR
47446: PPUSH
47447: CALL_OW 34
47451: ST_TO_ADDR
47452: GO 47469
// unit := NewCharacter ( ident ) ;
47454: LD_ADDR_VAR 0 5
47458: PUSH
47459: LD_VAR 0 1
47463: PPUSH
47464: CALL_OW 25
47468: ST_TO_ADDR
// result := unit ;
47469: LD_ADDR_VAR 0 4
47473: PUSH
47474: LD_VAR 0 5
47478: ST_TO_ADDR
// end ;
47479: LD_VAR 0 4
47483: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47484: LD_INT 0
47486: PPUSH
47487: PPUSH
// if not side or not nation then
47488: LD_VAR 0 1
47492: NOT
47493: PUSH
47494: LD_VAR 0 2
47498: NOT
47499: OR
47500: IFFALSE 47504
// exit ;
47502: GO 48208
// case nation of nation_american :
47504: LD_VAR 0 2
47508: PUSH
47509: LD_INT 1
47511: DOUBLE
47512: EQUAL
47513: IFTRUE 47517
47515: GO 47711
47517: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 ] ; nation_arabian :
47518: LD_ADDR_VAR 0 4
47522: PUSH
47523: LD_INT 35
47525: PUSH
47526: LD_INT 45
47528: PUSH
47529: LD_INT 46
47531: PUSH
47532: LD_INT 47
47534: PUSH
47535: LD_INT 82
47537: PUSH
47538: LD_INT 83
47540: PUSH
47541: LD_INT 84
47543: PUSH
47544: LD_INT 85
47546: PUSH
47547: LD_INT 86
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: LD_INT 6
47558: PUSH
47559: LD_INT 15
47561: PUSH
47562: LD_INT 16
47564: PUSH
47565: LD_INT 7
47567: PUSH
47568: LD_INT 12
47570: PUSH
47571: LD_INT 13
47573: PUSH
47574: LD_INT 10
47576: PUSH
47577: LD_INT 14
47579: PUSH
47580: LD_INT 20
47582: PUSH
47583: LD_INT 21
47585: PUSH
47586: LD_INT 22
47588: PUSH
47589: LD_INT 25
47591: PUSH
47592: LD_INT 32
47594: PUSH
47595: LD_INT 27
47597: PUSH
47598: LD_INT 36
47600: PUSH
47601: LD_INT 69
47603: PUSH
47604: LD_INT 39
47606: PUSH
47607: LD_INT 34
47609: PUSH
47610: LD_INT 40
47612: PUSH
47613: LD_INT 48
47615: PUSH
47616: LD_INT 49
47618: PUSH
47619: LD_INT 50
47621: PUSH
47622: LD_INT 51
47624: PUSH
47625: LD_INT 52
47627: PUSH
47628: LD_INT 53
47630: PUSH
47631: LD_INT 54
47633: PUSH
47634: LD_INT 55
47636: PUSH
47637: LD_INT 56
47639: PUSH
47640: LD_INT 57
47642: PUSH
47643: LD_INT 58
47645: PUSH
47646: LD_INT 59
47648: PUSH
47649: LD_INT 60
47651: PUSH
47652: LD_INT 61
47654: PUSH
47655: LD_INT 62
47657: PUSH
47658: LD_INT 80
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: LIST
47674: LIST
47675: LIST
47676: LIST
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
47709: GO 48132
47711: LD_INT 2
47713: DOUBLE
47714: EQUAL
47715: IFTRUE 47719
47717: GO 47921
47719: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 ] ; nation_russian :
47720: LD_ADDR_VAR 0 4
47724: PUSH
47725: LD_INT 35
47727: PUSH
47728: LD_INT 45
47730: PUSH
47731: LD_INT 46
47733: PUSH
47734: LD_INT 47
47736: PUSH
47737: LD_INT 82
47739: PUSH
47740: LD_INT 83
47742: PUSH
47743: LD_INT 84
47745: PUSH
47746: LD_INT 85
47748: PUSH
47749: LD_INT 87
47751: PUSH
47752: LD_INT 70
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 11
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 4
47766: PUSH
47767: LD_INT 5
47769: PUSH
47770: LD_INT 6
47772: PUSH
47773: LD_INT 15
47775: PUSH
47776: LD_INT 18
47778: PUSH
47779: LD_INT 7
47781: PUSH
47782: LD_INT 17
47784: PUSH
47785: LD_INT 8
47787: PUSH
47788: LD_INT 20
47790: PUSH
47791: LD_INT 21
47793: PUSH
47794: LD_INT 22
47796: PUSH
47797: LD_INT 72
47799: PUSH
47800: LD_INT 26
47802: PUSH
47803: LD_INT 69
47805: PUSH
47806: LD_INT 39
47808: PUSH
47809: LD_INT 40
47811: PUSH
47812: LD_INT 41
47814: PUSH
47815: LD_INT 42
47817: PUSH
47818: LD_INT 43
47820: PUSH
47821: LD_INT 48
47823: PUSH
47824: LD_INT 49
47826: PUSH
47827: LD_INT 50
47829: PUSH
47830: LD_INT 51
47832: PUSH
47833: LD_INT 52
47835: PUSH
47836: LD_INT 53
47838: PUSH
47839: LD_INT 54
47841: PUSH
47842: LD_INT 55
47844: PUSH
47845: LD_INT 56
47847: PUSH
47848: LD_INT 60
47850: PUSH
47851: LD_INT 61
47853: PUSH
47854: LD_INT 62
47856: PUSH
47857: LD_INT 66
47859: PUSH
47860: LD_INT 67
47862: PUSH
47863: LD_INT 68
47865: PUSH
47866: LD_INT 81
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: LIST
47888: LIST
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: LIST
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: ST_TO_ADDR
47919: GO 48132
47921: LD_INT 3
47923: DOUBLE
47924: EQUAL
47925: IFTRUE 47929
47927: GO 48131
47929: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
47930: LD_ADDR_VAR 0 4
47934: PUSH
47935: LD_INT 46
47937: PUSH
47938: LD_INT 47
47940: PUSH
47941: LD_INT 1
47943: PUSH
47944: LD_INT 2
47946: PUSH
47947: LD_INT 82
47949: PUSH
47950: LD_INT 83
47952: PUSH
47953: LD_INT 84
47955: PUSH
47956: LD_INT 85
47958: PUSH
47959: LD_INT 86
47961: PUSH
47962: LD_INT 11
47964: PUSH
47965: LD_INT 9
47967: PUSH
47968: LD_INT 20
47970: PUSH
47971: LD_INT 19
47973: PUSH
47974: LD_INT 21
47976: PUSH
47977: LD_INT 24
47979: PUSH
47980: LD_INT 22
47982: PUSH
47983: LD_INT 25
47985: PUSH
47986: LD_INT 28
47988: PUSH
47989: LD_INT 29
47991: PUSH
47992: LD_INT 30
47994: PUSH
47995: LD_INT 31
47997: PUSH
47998: LD_INT 37
48000: PUSH
48001: LD_INT 38
48003: PUSH
48004: LD_INT 32
48006: PUSH
48007: LD_INT 27
48009: PUSH
48010: LD_INT 33
48012: PUSH
48013: LD_INT 69
48015: PUSH
48016: LD_INT 39
48018: PUSH
48019: LD_INT 34
48021: PUSH
48022: LD_INT 40
48024: PUSH
48025: LD_INT 71
48027: PUSH
48028: LD_INT 23
48030: PUSH
48031: LD_INT 44
48033: PUSH
48034: LD_INT 48
48036: PUSH
48037: LD_INT 49
48039: PUSH
48040: LD_INT 50
48042: PUSH
48043: LD_INT 51
48045: PUSH
48046: LD_INT 52
48048: PUSH
48049: LD_INT 53
48051: PUSH
48052: LD_INT 54
48054: PUSH
48055: LD_INT 55
48057: PUSH
48058: LD_INT 56
48060: PUSH
48061: LD_INT 57
48063: PUSH
48064: LD_INT 58
48066: PUSH
48067: LD_INT 59
48069: PUSH
48070: LD_INT 63
48072: PUSH
48073: LD_INT 64
48075: PUSH
48076: LD_INT 65
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: LIST
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: ST_TO_ADDR
48129: GO 48132
48131: POP
// if state > - 1 and state < 3 then
48132: LD_VAR 0 3
48136: PUSH
48137: LD_INT 1
48139: NEG
48140: GREATER
48141: PUSH
48142: LD_VAR 0 3
48146: PUSH
48147: LD_INT 3
48149: LESS
48150: AND
48151: IFFALSE 48208
// for i in result do
48153: LD_ADDR_VAR 0 5
48157: PUSH
48158: LD_VAR 0 4
48162: PUSH
48163: FOR_IN
48164: IFFALSE 48206
// if GetTech ( i , side ) <> state then
48166: LD_VAR 0 5
48170: PPUSH
48171: LD_VAR 0 1
48175: PPUSH
48176: CALL_OW 321
48180: PUSH
48181: LD_VAR 0 3
48185: NONEQUAL
48186: IFFALSE 48204
// result := result diff i ;
48188: LD_ADDR_VAR 0 4
48192: PUSH
48193: LD_VAR 0 4
48197: PUSH
48198: LD_VAR 0 5
48202: DIFF
48203: ST_TO_ADDR
48204: GO 48163
48206: POP
48207: POP
// end ;
48208: LD_VAR 0 4
48212: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
48213: LD_INT 0
48215: PPUSH
48216: PPUSH
48217: PPUSH
// result := true ;
48218: LD_ADDR_VAR 0 3
48222: PUSH
48223: LD_INT 1
48225: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
48226: LD_ADDR_VAR 0 5
48230: PUSH
48231: LD_VAR 0 2
48235: PPUSH
48236: CALL_OW 480
48240: ST_TO_ADDR
// if not tmp then
48241: LD_VAR 0 5
48245: NOT
48246: IFFALSE 48250
// exit ;
48248: GO 48299
// for i in tmp do
48250: LD_ADDR_VAR 0 4
48254: PUSH
48255: LD_VAR 0 5
48259: PUSH
48260: FOR_IN
48261: IFFALSE 48297
// if GetTech ( i , side ) <> state_researched then
48263: LD_VAR 0 4
48267: PPUSH
48268: LD_VAR 0 1
48272: PPUSH
48273: CALL_OW 321
48277: PUSH
48278: LD_INT 2
48280: NONEQUAL
48281: IFFALSE 48295
// begin result := false ;
48283: LD_ADDR_VAR 0 3
48287: PUSH
48288: LD_INT 0
48290: ST_TO_ADDR
// exit ;
48291: POP
48292: POP
48293: GO 48299
// end ;
48295: GO 48260
48297: POP
48298: POP
// end ;
48299: LD_VAR 0 3
48303: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
48304: LD_INT 0
48306: PPUSH
48307: PPUSH
48308: PPUSH
48309: PPUSH
48310: PPUSH
48311: PPUSH
48312: PPUSH
48313: PPUSH
48314: PPUSH
48315: PPUSH
48316: PPUSH
48317: PPUSH
48318: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
48319: LD_VAR 0 1
48323: NOT
48324: PUSH
48325: LD_VAR 0 1
48329: PPUSH
48330: CALL_OW 257
48334: PUSH
48335: LD_INT 9
48337: NONEQUAL
48338: OR
48339: IFFALSE 48343
// exit ;
48341: GO 48916
// side := GetSide ( unit ) ;
48343: LD_ADDR_VAR 0 9
48347: PUSH
48348: LD_VAR 0 1
48352: PPUSH
48353: CALL_OW 255
48357: ST_TO_ADDR
// tech_space := tech_spacanom ;
48358: LD_ADDR_VAR 0 12
48362: PUSH
48363: LD_INT 29
48365: ST_TO_ADDR
// tech_time := tech_taurad ;
48366: LD_ADDR_VAR 0 13
48370: PUSH
48371: LD_INT 28
48373: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48374: LD_ADDR_VAR 0 11
48378: PUSH
48379: LD_VAR 0 1
48383: PPUSH
48384: CALL_OW 310
48388: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48389: LD_VAR 0 11
48393: PPUSH
48394: CALL_OW 247
48398: PUSH
48399: LD_INT 2
48401: EQUAL
48402: IFFALSE 48406
// exit ;
48404: GO 48916
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48406: LD_ADDR_VAR 0 8
48410: PUSH
48411: LD_INT 81
48413: PUSH
48414: LD_VAR 0 9
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 3
48425: PUSH
48426: LD_INT 21
48428: PUSH
48429: LD_INT 3
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PPUSH
48444: CALL_OW 69
48448: ST_TO_ADDR
// if not tmp then
48449: LD_VAR 0 8
48453: NOT
48454: IFFALSE 48458
// exit ;
48456: GO 48916
// if in_unit then
48458: LD_VAR 0 11
48462: IFFALSE 48486
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48464: LD_ADDR_VAR 0 10
48468: PUSH
48469: LD_VAR 0 8
48473: PPUSH
48474: LD_VAR 0 11
48478: PPUSH
48479: CALL_OW 74
48483: ST_TO_ADDR
48484: GO 48506
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48486: LD_ADDR_VAR 0 10
48490: PUSH
48491: LD_VAR 0 8
48495: PPUSH
48496: LD_VAR 0 1
48500: PPUSH
48501: CALL_OW 74
48505: ST_TO_ADDR
// if not enemy then
48506: LD_VAR 0 10
48510: NOT
48511: IFFALSE 48515
// exit ;
48513: GO 48916
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48515: LD_VAR 0 11
48519: PUSH
48520: LD_VAR 0 11
48524: PPUSH
48525: LD_VAR 0 10
48529: PPUSH
48530: CALL_OW 296
48534: PUSH
48535: LD_INT 13
48537: GREATER
48538: AND
48539: PUSH
48540: LD_VAR 0 1
48544: PPUSH
48545: LD_VAR 0 10
48549: PPUSH
48550: CALL_OW 296
48554: PUSH
48555: LD_INT 12
48557: GREATER
48558: OR
48559: IFFALSE 48563
// exit ;
48561: GO 48916
// missile := [ 1 ] ;
48563: LD_ADDR_VAR 0 14
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: EMPTY
48572: LIST
48573: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48574: LD_VAR 0 9
48578: PPUSH
48579: LD_VAR 0 12
48583: PPUSH
48584: CALL_OW 325
48588: IFFALSE 48617
// missile := Insert ( missile , missile + 1 , 2 ) ;
48590: LD_ADDR_VAR 0 14
48594: PUSH
48595: LD_VAR 0 14
48599: PPUSH
48600: LD_VAR 0 14
48604: PUSH
48605: LD_INT 1
48607: PLUS
48608: PPUSH
48609: LD_INT 2
48611: PPUSH
48612: CALL_OW 2
48616: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48617: LD_VAR 0 9
48621: PPUSH
48622: LD_VAR 0 13
48626: PPUSH
48627: CALL_OW 325
48631: PUSH
48632: LD_VAR 0 10
48636: PPUSH
48637: CALL_OW 255
48641: PPUSH
48642: LD_VAR 0 13
48646: PPUSH
48647: CALL_OW 325
48651: NOT
48652: AND
48653: IFFALSE 48682
// missile := Insert ( missile , missile + 1 , 3 ) ;
48655: LD_ADDR_VAR 0 14
48659: PUSH
48660: LD_VAR 0 14
48664: PPUSH
48665: LD_VAR 0 14
48669: PUSH
48670: LD_INT 1
48672: PLUS
48673: PPUSH
48674: LD_INT 3
48676: PPUSH
48677: CALL_OW 2
48681: ST_TO_ADDR
// if missile < 2 then
48682: LD_VAR 0 14
48686: PUSH
48687: LD_INT 2
48689: LESS
48690: IFFALSE 48694
// exit ;
48692: GO 48916
// x := GetX ( enemy ) ;
48694: LD_ADDR_VAR 0 4
48698: PUSH
48699: LD_VAR 0 10
48703: PPUSH
48704: CALL_OW 250
48708: ST_TO_ADDR
// y := GetY ( enemy ) ;
48709: LD_ADDR_VAR 0 5
48713: PUSH
48714: LD_VAR 0 10
48718: PPUSH
48719: CALL_OW 251
48723: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48724: LD_ADDR_VAR 0 6
48728: PUSH
48729: LD_VAR 0 4
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PPUSH
48738: LD_INT 1
48740: PPUSH
48741: CALL_OW 12
48745: PLUS
48746: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48747: LD_ADDR_VAR 0 7
48751: PUSH
48752: LD_VAR 0 5
48756: PUSH
48757: LD_INT 1
48759: NEG
48760: PPUSH
48761: LD_INT 1
48763: PPUSH
48764: CALL_OW 12
48768: PLUS
48769: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48770: LD_VAR 0 6
48774: PPUSH
48775: LD_VAR 0 7
48779: PPUSH
48780: CALL_OW 488
48784: NOT
48785: IFFALSE 48807
// begin _x := x ;
48787: LD_ADDR_VAR 0 6
48791: PUSH
48792: LD_VAR 0 4
48796: ST_TO_ADDR
// _y := y ;
48797: LD_ADDR_VAR 0 7
48801: PUSH
48802: LD_VAR 0 5
48806: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48807: LD_ADDR_VAR 0 3
48811: PUSH
48812: LD_INT 1
48814: PPUSH
48815: LD_VAR 0 14
48819: PPUSH
48820: CALL_OW 12
48824: ST_TO_ADDR
// case i of 1 :
48825: LD_VAR 0 3
48829: PUSH
48830: LD_INT 1
48832: DOUBLE
48833: EQUAL
48834: IFTRUE 48838
48836: GO 48855
48838: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48839: LD_VAR 0 1
48843: PPUSH
48844: LD_VAR 0 10
48848: PPUSH
48849: CALL_OW 115
48853: GO 48916
48855: LD_INT 2
48857: DOUBLE
48858: EQUAL
48859: IFTRUE 48863
48861: GO 48885
48863: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48864: LD_VAR 0 1
48868: PPUSH
48869: LD_VAR 0 6
48873: PPUSH
48874: LD_VAR 0 7
48878: PPUSH
48879: CALL_OW 153
48883: GO 48916
48885: LD_INT 3
48887: DOUBLE
48888: EQUAL
48889: IFTRUE 48893
48891: GO 48915
48893: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48894: LD_VAR 0 1
48898: PPUSH
48899: LD_VAR 0 6
48903: PPUSH
48904: LD_VAR 0 7
48908: PPUSH
48909: CALL_OW 154
48913: GO 48916
48915: POP
// end ;
48916: LD_VAR 0 2
48920: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48921: LD_INT 0
48923: PPUSH
48924: PPUSH
48925: PPUSH
48926: PPUSH
48927: PPUSH
48928: PPUSH
// if not unit or not building then
48929: LD_VAR 0 1
48933: NOT
48934: PUSH
48935: LD_VAR 0 2
48939: NOT
48940: OR
48941: IFFALSE 48945
// exit ;
48943: GO 49103
// x := GetX ( building ) ;
48945: LD_ADDR_VAR 0 5
48949: PUSH
48950: LD_VAR 0 2
48954: PPUSH
48955: CALL_OW 250
48959: ST_TO_ADDR
// y := GetY ( building ) ;
48960: LD_ADDR_VAR 0 6
48964: PUSH
48965: LD_VAR 0 2
48969: PPUSH
48970: CALL_OW 251
48974: ST_TO_ADDR
// for i = 0 to 5 do
48975: LD_ADDR_VAR 0 4
48979: PUSH
48980: DOUBLE
48981: LD_INT 0
48983: DEC
48984: ST_TO_ADDR
48985: LD_INT 5
48987: PUSH
48988: FOR_TO
48989: IFFALSE 49101
// begin _x := ShiftX ( x , i , 3 ) ;
48991: LD_ADDR_VAR 0 7
48995: PUSH
48996: LD_VAR 0 5
49000: PPUSH
49001: LD_VAR 0 4
49005: PPUSH
49006: LD_INT 3
49008: PPUSH
49009: CALL_OW 272
49013: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
49014: LD_ADDR_VAR 0 8
49018: PUSH
49019: LD_VAR 0 6
49023: PPUSH
49024: LD_VAR 0 4
49028: PPUSH
49029: LD_INT 3
49031: PPUSH
49032: CALL_OW 273
49036: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49037: LD_VAR 0 7
49041: PPUSH
49042: LD_VAR 0 8
49046: PPUSH
49047: CALL_OW 488
49051: NOT
49052: IFFALSE 49056
// continue ;
49054: GO 48988
// if HexInfo ( _x , _y ) = 0 then
49056: LD_VAR 0 7
49060: PPUSH
49061: LD_VAR 0 8
49065: PPUSH
49066: CALL_OW 428
49070: PUSH
49071: LD_INT 0
49073: EQUAL
49074: IFFALSE 49099
// begin ComMoveXY ( unit , _x , _y ) ;
49076: LD_VAR 0 1
49080: PPUSH
49081: LD_VAR 0 7
49085: PPUSH
49086: LD_VAR 0 8
49090: PPUSH
49091: CALL_OW 111
// exit ;
49095: POP
49096: POP
49097: GO 49103
// end ; end ;
49099: GO 48988
49101: POP
49102: POP
// end ;
49103: LD_VAR 0 3
49107: RET
// export function ScanBase ( side , base_area ) ; begin
49108: LD_INT 0
49110: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
49111: LD_ADDR_VAR 0 3
49115: PUSH
49116: LD_VAR 0 2
49120: PPUSH
49121: LD_INT 81
49123: PUSH
49124: LD_VAR 0 1
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PPUSH
49133: CALL_OW 70
49137: ST_TO_ADDR
// end ;
49138: LD_VAR 0 3
49142: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
49143: LD_INT 0
49145: PPUSH
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
49150: LD_VAR 0 1
49154: NOT
49155: PUSH
49156: LD_EXP 50
49160: PUSH
49161: LD_VAR 0 1
49165: ARRAY
49166: NOT
49167: OR
49168: PUSH
49169: LD_VAR 0 2
49173: NOT
49174: OR
49175: PUSH
49176: LD_VAR 0 3
49180: NOT
49181: OR
49182: IFFALSE 49186
// exit ;
49184: GO 49699
// side := mc_sides [ base ] ;
49186: LD_ADDR_VAR 0 6
49190: PUSH
49191: LD_EXP 76
49195: PUSH
49196: LD_VAR 0 1
49200: ARRAY
49201: ST_TO_ADDR
// if not side then
49202: LD_VAR 0 6
49206: NOT
49207: IFFALSE 49211
// exit ;
49209: GO 49699
// for i in solds do
49211: LD_ADDR_VAR 0 7
49215: PUSH
49216: LD_VAR 0 2
49220: PUSH
49221: FOR_IN
49222: IFFALSE 49283
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
49224: LD_VAR 0 7
49228: PPUSH
49229: CALL_OW 310
49233: PPUSH
49234: CALL_OW 266
49238: PUSH
49239: LD_INT 32
49241: PUSH
49242: LD_INT 31
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: IN
49249: IFFALSE 49269
// solds := solds diff i else
49251: LD_ADDR_VAR 0 2
49255: PUSH
49256: LD_VAR 0 2
49260: PUSH
49261: LD_VAR 0 7
49265: DIFF
49266: ST_TO_ADDR
49267: GO 49281
// SetTag ( i , 18 ) ;
49269: LD_VAR 0 7
49273: PPUSH
49274: LD_INT 18
49276: PPUSH
49277: CALL_OW 109
49281: GO 49221
49283: POP
49284: POP
// if not solds then
49285: LD_VAR 0 2
49289: NOT
49290: IFFALSE 49294
// exit ;
49292: GO 49699
// repeat wait ( 0 0$1 ) ;
49294: LD_INT 35
49296: PPUSH
49297: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
49301: LD_ADDR_VAR 0 5
49305: PUSH
49306: LD_VAR 0 6
49310: PPUSH
49311: LD_VAR 0 3
49315: PPUSH
49316: CALL 49108 0 2
49320: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
49321: LD_EXP 50
49325: PUSH
49326: LD_VAR 0 1
49330: ARRAY
49331: NOT
49332: PUSH
49333: LD_EXP 50
49337: PUSH
49338: LD_VAR 0 1
49342: ARRAY
49343: PUSH
49344: EMPTY
49345: EQUAL
49346: OR
49347: IFFALSE 49384
// begin for i in solds do
49349: LD_ADDR_VAR 0 7
49353: PUSH
49354: LD_VAR 0 2
49358: PUSH
49359: FOR_IN
49360: IFFALSE 49373
// ComStop ( i ) ;
49362: LD_VAR 0 7
49366: PPUSH
49367: CALL_OW 141
49371: GO 49359
49373: POP
49374: POP
// solds := [ ] ;
49375: LD_ADDR_VAR 0 2
49379: PUSH
49380: EMPTY
49381: ST_TO_ADDR
// exit ;
49382: GO 49699
// end ; if not enemy or enemy > 3 or mc_defender [ base ] then
49384: LD_VAR 0 5
49388: NOT
49389: PUSH
49390: LD_VAR 0 5
49394: PUSH
49395: LD_INT 3
49397: GREATER
49398: OR
49399: PUSH
49400: LD_EXP 72
49404: PUSH
49405: LD_VAR 0 1
49409: ARRAY
49410: OR
49411: IFFALSE 49452
// begin for i in solds do
49413: LD_ADDR_VAR 0 7
49417: PUSH
49418: LD_VAR 0 2
49422: PUSH
49423: FOR_IN
49424: IFFALSE 49448
// if HasTask ( i ) then
49426: LD_VAR 0 7
49430: PPUSH
49431: CALL_OW 314
49435: IFFALSE 49446
// ComStop ( i ) ;
49437: LD_VAR 0 7
49441: PPUSH
49442: CALL_OW 141
49446: GO 49423
49448: POP
49449: POP
// break ;
49450: GO 49687
// end ; for i in solds do
49452: LD_ADDR_VAR 0 7
49456: PUSH
49457: LD_VAR 0 2
49461: PUSH
49462: FOR_IN
49463: IFFALSE 49679
// begin if IsInUnit ( i ) then
49465: LD_VAR 0 7
49469: PPUSH
49470: CALL_OW 310
49474: IFFALSE 49485
// ComExitBuilding ( i ) ;
49476: LD_VAR 0 7
49480: PPUSH
49481: CALL_OW 122
// if GetLives ( i ) > 333 then
49485: LD_VAR 0 7
49489: PPUSH
49490: CALL_OW 256
49494: PUSH
49495: LD_INT 333
49497: GREATER
49498: IFFALSE 49526
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49500: LD_VAR 0 7
49504: PPUSH
49505: LD_VAR 0 5
49509: PPUSH
49510: LD_VAR 0 7
49514: PPUSH
49515: CALL_OW 74
49519: PPUSH
49520: CALL_OW 115
49524: GO 49677
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
49526: LD_ADDR_VAR 0 8
49530: PUSH
49531: LD_EXP 50
49535: PUSH
49536: LD_VAR 0 1
49540: ARRAY
49541: PPUSH
49542: LD_INT 2
49544: PUSH
49545: LD_INT 30
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 30
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 30
49567: PUSH
49568: LD_INT 6
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: PPUSH
49581: CALL_OW 72
49585: PPUSH
49586: LD_VAR 0 7
49590: PPUSH
49591: CALL_OW 74
49595: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
49596: LD_VAR 0 7
49600: PPUSH
49601: LD_VAR 0 8
49605: PPUSH
49606: CALL_OW 250
49610: PPUSH
49611: LD_INT 3
49613: PPUSH
49614: LD_INT 5
49616: PPUSH
49617: CALL_OW 272
49621: PPUSH
49622: LD_VAR 0 8
49626: PPUSH
49627: CALL_OW 251
49631: PPUSH
49632: LD_INT 3
49634: PPUSH
49635: LD_INT 5
49637: PPUSH
49638: CALL_OW 273
49642: PPUSH
49643: CALL_OW 111
// SetTag ( i , 0 ) ;
49647: LD_VAR 0 7
49651: PPUSH
49652: LD_INT 0
49654: PPUSH
49655: CALL_OW 109
// solds := solds diff i ;
49659: LD_ADDR_VAR 0 2
49663: PUSH
49664: LD_VAR 0 2
49668: PUSH
49669: LD_VAR 0 7
49673: DIFF
49674: ST_TO_ADDR
// continue ;
49675: GO 49462
// end ; end ;
49677: GO 49462
49679: POP
49680: POP
// until solds ;
49681: LD_VAR 0 2
49685: IFFALSE 49294
// MC_Reset ( base , 18 ) ;
49687: LD_VAR 0 1
49691: PPUSH
49692: LD_INT 18
49694: PPUSH
49695: CALL 21460 0 2
// end ;
49699: LD_VAR 0 4
49703: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
49704: LD_INT 0
49706: PPUSH
49707: PPUSH
49708: PPUSH
49709: PPUSH
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
49714: PPUSH
49715: PPUSH
49716: PPUSH
49717: PPUSH
49718: PPUSH
49719: PPUSH
49720: PPUSH
49721: PPUSH
49722: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
49723: LD_ADDR_VAR 0 13
49727: PUSH
49728: LD_EXP 50
49732: PUSH
49733: LD_VAR 0 1
49737: ARRAY
49738: PPUSH
49739: LD_INT 25
49741: PUSH
49742: LD_INT 3
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PPUSH
49749: CALL_OW 72
49753: ST_TO_ADDR
// if mc_remote_driver [ base ] then
49754: LD_EXP 90
49758: PUSH
49759: LD_VAR 0 1
49763: ARRAY
49764: IFFALSE 49788
// mechs := mechs diff mc_remote_driver [ base ] ;
49766: LD_ADDR_VAR 0 13
49770: PUSH
49771: LD_VAR 0 13
49775: PUSH
49776: LD_EXP 90
49780: PUSH
49781: LD_VAR 0 1
49785: ARRAY
49786: DIFF
49787: ST_TO_ADDR
// for i in mechs do
49788: LD_ADDR_VAR 0 5
49792: PUSH
49793: LD_VAR 0 13
49797: PUSH
49798: FOR_IN
49799: IFFALSE 49834
// if GetTag ( i ) > 0 then
49801: LD_VAR 0 5
49805: PPUSH
49806: CALL_OW 110
49810: PUSH
49811: LD_INT 0
49813: GREATER
49814: IFFALSE 49832
// mechs := mechs diff i ;
49816: LD_ADDR_VAR 0 13
49820: PUSH
49821: LD_VAR 0 13
49825: PUSH
49826: LD_VAR 0 5
49830: DIFF
49831: ST_TO_ADDR
49832: GO 49798
49834: POP
49835: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
49836: LD_ADDR_VAR 0 9
49840: PUSH
49841: LD_EXP 50
49845: PUSH
49846: LD_VAR 0 1
49850: ARRAY
49851: PPUSH
49852: LD_INT 2
49854: PUSH
49855: LD_INT 25
49857: PUSH
49858: LD_INT 1
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 25
49867: PUSH
49868: LD_INT 5
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 25
49877: PUSH
49878: LD_INT 8
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 25
49887: PUSH
49888: LD_INT 9
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: PPUSH
49902: CALL_OW 72
49906: ST_TO_ADDR
// if not defenders and not solds then
49907: LD_VAR 0 2
49911: NOT
49912: PUSH
49913: LD_VAR 0 9
49917: NOT
49918: AND
49919: IFFALSE 49923
// exit ;
49921: GO 51549
// depot_under_attack := false ;
49923: LD_ADDR_VAR 0 17
49927: PUSH
49928: LD_INT 0
49930: ST_TO_ADDR
// sold_defenders := [ ] ;
49931: LD_ADDR_VAR 0 18
49935: PUSH
49936: EMPTY
49937: ST_TO_ADDR
// if mechs then
49938: LD_VAR 0 13
49942: IFFALSE 50071
// for i in defenders do
49944: LD_ADDR_VAR 0 5
49948: PUSH
49949: LD_VAR 0 2
49953: PUSH
49954: FOR_IN
49955: IFFALSE 50069
// begin SetTag ( i , 20 ) ;
49957: LD_VAR 0 5
49961: PPUSH
49962: LD_INT 20
49964: PPUSH
49965: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
49969: LD_VAR 0 5
49973: PPUSH
49974: CALL_OW 263
49978: PUSH
49979: LD_INT 1
49981: EQUAL
49982: PUSH
49983: LD_VAR 0 5
49987: PPUSH
49988: CALL_OW 311
49992: NOT
49993: AND
49994: PUSH
49995: LD_VAR 0 13
49999: AND
50000: IFFALSE 50067
// begin un := mechs [ 1 ] ;
50002: LD_ADDR_VAR 0 11
50006: PUSH
50007: LD_VAR 0 13
50011: PUSH
50012: LD_INT 1
50014: ARRAY
50015: ST_TO_ADDR
// ComExitBuilding ( un ) ;
50016: LD_VAR 0 11
50020: PPUSH
50021: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
50025: LD_VAR 0 11
50029: PPUSH
50030: LD_VAR 0 5
50034: PPUSH
50035: CALL_OW 180
// SetTag ( un , 19 ) ;
50039: LD_VAR 0 11
50043: PPUSH
50044: LD_INT 19
50046: PPUSH
50047: CALL_OW 109
// mechs := mechs diff un ;
50051: LD_ADDR_VAR 0 13
50055: PUSH
50056: LD_VAR 0 13
50060: PUSH
50061: LD_VAR 0 11
50065: DIFF
50066: ST_TO_ADDR
// end ; end ;
50067: GO 49954
50069: POP
50070: POP
// if solds then
50071: LD_VAR 0 9
50075: IFFALSE 50134
// for i in solds do
50077: LD_ADDR_VAR 0 5
50081: PUSH
50082: LD_VAR 0 9
50086: PUSH
50087: FOR_IN
50088: IFFALSE 50132
// if not GetTag ( i ) then
50090: LD_VAR 0 5
50094: PPUSH
50095: CALL_OW 110
50099: NOT
50100: IFFALSE 50130
// begin defenders := defenders union i ;
50102: LD_ADDR_VAR 0 2
50106: PUSH
50107: LD_VAR 0 2
50111: PUSH
50112: LD_VAR 0 5
50116: UNION
50117: ST_TO_ADDR
// SetTag ( i , 18 ) ;
50118: LD_VAR 0 5
50122: PPUSH
50123: LD_INT 18
50125: PPUSH
50126: CALL_OW 109
// end ;
50130: GO 50087
50132: POP
50133: POP
// repeat wait ( 0 0$1 ) ;
50134: LD_INT 35
50136: PPUSH
50137: CALL_OW 67
// enemy := mc_scan [ base ] ;
50141: LD_ADDR_VAR 0 3
50145: PUSH
50146: LD_EXP 73
50150: PUSH
50151: LD_VAR 0 1
50155: ARRAY
50156: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
50157: LD_EXP 50
50161: PUSH
50162: LD_VAR 0 1
50166: ARRAY
50167: NOT
50168: PUSH
50169: LD_EXP 50
50173: PUSH
50174: LD_VAR 0 1
50178: ARRAY
50179: PUSH
50180: EMPTY
50181: EQUAL
50182: OR
50183: IFFALSE 50220
// begin for i in defenders do
50185: LD_ADDR_VAR 0 5
50189: PUSH
50190: LD_VAR 0 2
50194: PUSH
50195: FOR_IN
50196: IFFALSE 50209
// ComStop ( i ) ;
50198: LD_VAR 0 5
50202: PPUSH
50203: CALL_OW 141
50207: GO 50195
50209: POP
50210: POP
// defenders := [ ] ;
50211: LD_ADDR_VAR 0 2
50215: PUSH
50216: EMPTY
50217: ST_TO_ADDR
// exit ;
50218: GO 51549
// end ; for i in defenders do
50220: LD_ADDR_VAR 0 5
50224: PUSH
50225: LD_VAR 0 2
50229: PUSH
50230: FOR_IN
50231: IFFALSE 51049
// begin e := NearestUnitToUnit ( enemy , i ) ;
50233: LD_ADDR_VAR 0 14
50237: PUSH
50238: LD_VAR 0 3
50242: PPUSH
50243: LD_VAR 0 5
50247: PPUSH
50248: CALL_OW 74
50252: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
50253: LD_ADDR_VAR 0 8
50257: PUSH
50258: LD_EXP 50
50262: PUSH
50263: LD_VAR 0 1
50267: ARRAY
50268: PPUSH
50269: LD_INT 2
50271: PUSH
50272: LD_INT 30
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 30
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: LIST
50296: PPUSH
50297: CALL_OW 72
50301: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
50302: LD_ADDR_VAR 0 17
50306: PUSH
50307: LD_VAR 0 8
50311: NOT
50312: PUSH
50313: LD_VAR 0 8
50317: PPUSH
50318: LD_INT 3
50320: PUSH
50321: LD_INT 24
50323: PUSH
50324: LD_INT 600
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PPUSH
50335: CALL_OW 72
50339: OR
50340: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
50341: LD_VAR 0 5
50345: PPUSH
50346: CALL_OW 247
50350: PUSH
50351: LD_INT 2
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50359
50357: GO 50755
50359: POP
// begin if GetLives ( i ) > 650 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
50360: LD_VAR 0 5
50364: PPUSH
50365: CALL_OW 256
50369: PUSH
50370: LD_INT 650
50372: GREATER
50373: PUSH
50374: LD_VAR 0 5
50378: PPUSH
50379: LD_VAR 0 14
50383: PPUSH
50384: CALL_OW 296
50388: PUSH
50389: LD_INT 40
50391: LESS
50392: PUSH
50393: LD_VAR 0 14
50397: PPUSH
50398: LD_EXP 75
50402: PUSH
50403: LD_VAR 0 1
50407: ARRAY
50408: PPUSH
50409: CALL_OW 308
50413: OR
50414: AND
50415: IFFALSE 50537
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
50417: LD_VAR 0 5
50421: PPUSH
50422: CALL_OW 262
50426: PUSH
50427: LD_INT 1
50429: EQUAL
50430: PUSH
50431: LD_VAR 0 5
50435: PPUSH
50436: CALL_OW 261
50440: PUSH
50441: LD_INT 30
50443: LESS
50444: AND
50445: PUSH
50446: LD_VAR 0 8
50450: AND
50451: IFFALSE 50521
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
50453: LD_VAR 0 5
50457: PPUSH
50458: LD_VAR 0 8
50462: PPUSH
50463: LD_VAR 0 5
50467: PPUSH
50468: CALL_OW 74
50472: PPUSH
50473: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
50477: LD_VAR 0 5
50481: PPUSH
50482: LD_VAR 0 8
50486: PPUSH
50487: LD_VAR 0 5
50491: PPUSH
50492: CALL_OW 74
50496: PPUSH
50497: CALL_OW 296
50501: PUSH
50502: LD_INT 6
50504: LESS
50505: IFFALSE 50519
// SetFuel ( i , 100 ) ;
50507: LD_VAR 0 5
50511: PPUSH
50512: LD_INT 100
50514: PPUSH
50515: CALL_OW 240
// end else
50519: GO 50535
// ComAttackUnit ( i , e ) ;
50521: LD_VAR 0 5
50525: PPUSH
50526: LD_VAR 0 14
50530: PPUSH
50531: CALL_OW 115
// end else
50535: GO 50638
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
50537: LD_VAR 0 14
50541: PPUSH
50542: LD_EXP 75
50546: PUSH
50547: LD_VAR 0 1
50551: ARRAY
50552: PPUSH
50553: CALL_OW 308
50557: NOT
50558: PUSH
50559: LD_VAR 0 5
50563: PPUSH
50564: LD_VAR 0 14
50568: PPUSH
50569: CALL_OW 296
50573: PUSH
50574: LD_INT 40
50576: GREATEREQUAL
50577: AND
50578: PUSH
50579: LD_VAR 0 5
50583: PPUSH
50584: CALL_OW 256
50588: PUSH
50589: LD_INT 650
50591: LESSEQUAL
50592: OR
50593: PUSH
50594: LD_VAR 0 5
50598: PPUSH
50599: LD_EXP 74
50603: PUSH
50604: LD_VAR 0 1
50608: ARRAY
50609: PPUSH
50610: CALL_OW 308
50614: NOT
50615: AND
50616: IFFALSE 50638
// ComMoveToArea ( i , mc_parking [ base ] ) ;
50618: LD_VAR 0 5
50622: PPUSH
50623: LD_EXP 74
50627: PUSH
50628: LD_VAR 0 1
50632: ARRAY
50633: PPUSH
50634: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
50638: LD_VAR 0 5
50642: PPUSH
50643: CALL_OW 256
50647: PUSH
50648: LD_INT 998
50650: LESS
50651: PUSH
50652: LD_VAR 0 5
50656: PPUSH
50657: CALL_OW 263
50661: PUSH
50662: LD_INT 1
50664: EQUAL
50665: AND
50666: PUSH
50667: LD_VAR 0 5
50671: PPUSH
50672: CALL_OW 311
50676: AND
50677: PUSH
50678: LD_VAR 0 5
50682: PPUSH
50683: LD_EXP 74
50687: PUSH
50688: LD_VAR 0 1
50692: ARRAY
50693: PPUSH
50694: CALL_OW 308
50698: AND
50699: IFFALSE 50753
// begin mech := IsDrivenBy ( i ) ;
50701: LD_ADDR_VAR 0 10
50705: PUSH
50706: LD_VAR 0 5
50710: PPUSH
50711: CALL_OW 311
50715: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
50716: LD_VAR 0 10
50720: PPUSH
50721: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
50725: LD_VAR 0 10
50729: PPUSH
50730: LD_VAR 0 5
50734: PPUSH
50735: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
50739: LD_VAR 0 10
50743: PPUSH
50744: LD_VAR 0 5
50748: PPUSH
50749: CALL_OW 180
// end ; end ; unit_human :
50753: GO 51020
50755: LD_INT 1
50757: DOUBLE
50758: EQUAL
50759: IFTRUE 50763
50761: GO 51019
50763: POP
// begin b := IsInUnit ( i ) ;
50764: LD_ADDR_VAR 0 19
50768: PUSH
50769: LD_VAR 0 5
50773: PPUSH
50774: CALL_OW 310
50778: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
50779: LD_ADDR_VAR 0 20
50783: PUSH
50784: LD_VAR 0 19
50788: NOT
50789: PUSH
50790: LD_VAR 0 19
50794: PPUSH
50795: CALL_OW 266
50799: PUSH
50800: LD_INT 32
50802: PUSH
50803: LD_INT 31
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: IN
50810: OR
50811: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
50812: LD_VAR 0 17
50816: PUSH
50817: LD_VAR 0 2
50821: PPUSH
50822: LD_INT 21
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PPUSH
50832: CALL_OW 72
50836: PUSH
50837: LD_INT 1
50839: LESSEQUAL
50840: OR
50841: PUSH
50842: LD_VAR 0 20
50846: AND
50847: PUSH
50848: LD_VAR 0 5
50852: PUSH
50853: LD_VAR 0 18
50857: IN
50858: NOT
50859: AND
50860: IFFALSE 50953
// begin if b then
50862: LD_VAR 0 19
50866: IFFALSE 50915
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
50868: LD_VAR 0 19
50872: PPUSH
50873: LD_VAR 0 3
50877: PPUSH
50878: LD_VAR 0 19
50882: PPUSH
50883: CALL_OW 74
50887: PPUSH
50888: CALL_OW 296
50892: PUSH
50893: LD_INT 10
50895: LESS
50896: PUSH
50897: LD_VAR 0 19
50901: PPUSH
50902: CALL_OW 461
50906: PUSH
50907: LD_INT 7
50909: NONEQUAL
50910: AND
50911: IFFALSE 50915
// continue ;
50913: GO 50230
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
50915: LD_ADDR_VAR 0 18
50919: PUSH
50920: LD_VAR 0 18
50924: PPUSH
50925: LD_VAR 0 18
50929: PUSH
50930: LD_INT 1
50932: PLUS
50933: PPUSH
50934: LD_VAR 0 5
50938: PPUSH
50939: CALL_OW 1
50943: ST_TO_ADDR
// ComExitBuilding ( i ) ;
50944: LD_VAR 0 5
50948: PPUSH
50949: CALL_OW 122
// end ; if sold_defenders then
50953: LD_VAR 0 18
50957: IFFALSE 51017
// if i in sold_defenders then
50959: LD_VAR 0 5
50963: PUSH
50964: LD_VAR 0 18
50968: IN
50969: IFFALSE 51017
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
50971: LD_VAR 0 5
50975: PPUSH
50976: CALL_OW 314
50980: NOT
50981: PUSH
50982: LD_VAR 0 5
50986: PPUSH
50987: LD_VAR 0 14
50991: PPUSH
50992: CALL_OW 296
50996: PUSH
50997: LD_INT 30
50999: LESS
51000: AND
51001: IFFALSE 51017
// ComAttackUnit ( i , e ) ;
51003: LD_VAR 0 5
51007: PPUSH
51008: LD_VAR 0 14
51012: PPUSH
51013: CALL_OW 115
// end ; end ; end ;
51017: GO 51020
51019: POP
// if IsDead ( i ) then
51020: LD_VAR 0 5
51024: PPUSH
51025: CALL_OW 301
51029: IFFALSE 51047
// defenders := defenders diff i ;
51031: LD_ADDR_VAR 0 2
51035: PUSH
51036: LD_VAR 0 2
51040: PUSH
51041: LD_VAR 0 5
51045: DIFF
51046: ST_TO_ADDR
// end ;
51047: GO 50230
51049: POP
51050: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
51051: LD_VAR 0 3
51055: NOT
51056: PUSH
51057: LD_VAR 0 2
51061: NOT
51062: OR
51063: PUSH
51064: LD_EXP 50
51068: PUSH
51069: LD_VAR 0 1
51073: ARRAY
51074: NOT
51075: OR
51076: IFFALSE 50134
// MC_Reset ( base , 18 ) ;
51078: LD_VAR 0 1
51082: PPUSH
51083: LD_INT 18
51085: PPUSH
51086: CALL 21460 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
51090: LD_ADDR_VAR 0 2
51094: PUSH
51095: LD_VAR 0 2
51099: PUSH
51100: LD_VAR 0 2
51104: PPUSH
51105: LD_INT 2
51107: PUSH
51108: LD_INT 25
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 25
51120: PUSH
51121: LD_INT 5
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: LD_INT 25
51130: PUSH
51131: LD_INT 8
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 25
51140: PUSH
51141: LD_INT 9
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: PPUSH
51155: CALL_OW 72
51159: DIFF
51160: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
51161: LD_VAR 0 3
51165: NOT
51166: PUSH
51167: LD_VAR 0 2
51171: PPUSH
51172: LD_INT 21
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PPUSH
51182: CALL_OW 72
51186: AND
51187: IFFALSE 51525
// begin tmp := FilterByTag ( defenders , 19 ) ;
51189: LD_ADDR_VAR 0 12
51193: PUSH
51194: LD_VAR 0 2
51198: PPUSH
51199: LD_INT 19
51201: PPUSH
51202: CALL 87988 0 2
51206: ST_TO_ADDR
// if tmp then
51207: LD_VAR 0 12
51211: IFFALSE 51281
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
51213: LD_ADDR_VAR 0 12
51217: PUSH
51218: LD_VAR 0 12
51222: PPUSH
51223: LD_INT 25
51225: PUSH
51226: LD_INT 3
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PPUSH
51233: CALL_OW 72
51237: ST_TO_ADDR
// if tmp then
51238: LD_VAR 0 12
51242: IFFALSE 51281
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
51244: LD_ADDR_EXP 62
51248: PUSH
51249: LD_EXP 62
51253: PPUSH
51254: LD_VAR 0 1
51258: PPUSH
51259: LD_EXP 62
51263: PUSH
51264: LD_VAR 0 1
51268: ARRAY
51269: PUSH
51270: LD_VAR 0 12
51274: UNION
51275: PPUSH
51276: CALL_OW 1
51280: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
51281: LD_VAR 0 1
51285: PPUSH
51286: LD_INT 19
51288: PPUSH
51289: CALL 21460 0 2
// repeat wait ( 0 0$1 ) ;
51293: LD_INT 35
51295: PPUSH
51296: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
51300: LD_EXP 50
51304: PUSH
51305: LD_VAR 0 1
51309: ARRAY
51310: NOT
51311: PUSH
51312: LD_EXP 50
51316: PUSH
51317: LD_VAR 0 1
51321: ARRAY
51322: PUSH
51323: EMPTY
51324: EQUAL
51325: OR
51326: IFFALSE 51363
// begin for i in defenders do
51328: LD_ADDR_VAR 0 5
51332: PUSH
51333: LD_VAR 0 2
51337: PUSH
51338: FOR_IN
51339: IFFALSE 51352
// ComStop ( i ) ;
51341: LD_VAR 0 5
51345: PPUSH
51346: CALL_OW 141
51350: GO 51338
51352: POP
51353: POP
// defenders := [ ] ;
51354: LD_ADDR_VAR 0 2
51358: PUSH
51359: EMPTY
51360: ST_TO_ADDR
// exit ;
51361: GO 51549
// end ; for i in defenders do
51363: LD_ADDR_VAR 0 5
51367: PUSH
51368: LD_VAR 0 2
51372: PUSH
51373: FOR_IN
51374: IFFALSE 51463
// begin if not IsInArea ( i , mc_parking [ base ] ) then
51376: LD_VAR 0 5
51380: PPUSH
51381: LD_EXP 74
51385: PUSH
51386: LD_VAR 0 1
51390: ARRAY
51391: PPUSH
51392: CALL_OW 308
51396: NOT
51397: IFFALSE 51421
// ComMoveToArea ( i , mc_parking [ base ] ) else
51399: LD_VAR 0 5
51403: PPUSH
51404: LD_EXP 74
51408: PUSH
51409: LD_VAR 0 1
51413: ARRAY
51414: PPUSH
51415: CALL_OW 113
51419: GO 51461
// if GetControl ( i ) = control_manual then
51421: LD_VAR 0 5
51425: PPUSH
51426: CALL_OW 263
51430: PUSH
51431: LD_INT 1
51433: EQUAL
51434: IFFALSE 51461
// if IsDrivenBy ( i ) then
51436: LD_VAR 0 5
51440: PPUSH
51441: CALL_OW 311
51445: IFFALSE 51461
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
51447: LD_VAR 0 5
51451: PPUSH
51452: CALL_OW 311
51456: PPUSH
51457: CALL_OW 121
// end ;
51461: GO 51373
51463: POP
51464: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
51465: LD_VAR 0 2
51469: PPUSH
51470: LD_INT 95
51472: PUSH
51473: LD_EXP 74
51477: PUSH
51478: LD_VAR 0 1
51482: ARRAY
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PPUSH
51488: CALL_OW 72
51492: PUSH
51493: LD_VAR 0 2
51497: EQUAL
51498: PUSH
51499: LD_EXP 73
51503: PUSH
51504: LD_VAR 0 1
51508: ARRAY
51509: OR
51510: PUSH
51511: LD_EXP 50
51515: PUSH
51516: LD_VAR 0 1
51520: ARRAY
51521: NOT
51522: OR
51523: IFFALSE 51293
// end ; MC_Reset ( base , 19 ) ;
51525: LD_VAR 0 1
51529: PPUSH
51530: LD_INT 19
51532: PPUSH
51533: CALL 21460 0 2
// MC_Reset ( base , 20 ) ;
51537: LD_VAR 0 1
51541: PPUSH
51542: LD_INT 20
51544: PPUSH
51545: CALL 21460 0 2
// end ;
51549: LD_VAR 0 4
51553: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51554: LD_INT 0
51556: PPUSH
51557: PPUSH
51558: PPUSH
51559: PPUSH
// result := false ;
51560: LD_ADDR_VAR 0 2
51564: PUSH
51565: LD_INT 0
51567: ST_TO_ADDR
// side := GetSide ( unit ) ;
51568: LD_ADDR_VAR 0 3
51572: PUSH
51573: LD_VAR 0 1
51577: PPUSH
51578: CALL_OW 255
51582: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51583: LD_ADDR_VAR 0 4
51587: PUSH
51588: LD_VAR 0 1
51592: PPUSH
51593: CALL_OW 248
51597: ST_TO_ADDR
// case nat of 1 :
51598: LD_VAR 0 4
51602: PUSH
51603: LD_INT 1
51605: DOUBLE
51606: EQUAL
51607: IFTRUE 51611
51609: GO 51622
51611: POP
// tech := tech_lassight ; 2 :
51612: LD_ADDR_VAR 0 5
51616: PUSH
51617: LD_INT 12
51619: ST_TO_ADDR
51620: GO 51661
51622: LD_INT 2
51624: DOUBLE
51625: EQUAL
51626: IFTRUE 51630
51628: GO 51641
51630: POP
// tech := tech_mortar ; 3 :
51631: LD_ADDR_VAR 0 5
51635: PUSH
51636: LD_INT 41
51638: ST_TO_ADDR
51639: GO 51661
51641: LD_INT 3
51643: DOUBLE
51644: EQUAL
51645: IFTRUE 51649
51647: GO 51660
51649: POP
// tech := tech_bazooka ; end ;
51650: LD_ADDR_VAR 0 5
51654: PUSH
51655: LD_INT 44
51657: ST_TO_ADDR
51658: GO 51661
51660: POP
// if Researched ( side , tech ) then
51661: LD_VAR 0 3
51665: PPUSH
51666: LD_VAR 0 5
51670: PPUSH
51671: CALL_OW 325
51675: IFFALSE 51702
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51677: LD_ADDR_VAR 0 2
51681: PUSH
51682: LD_INT 5
51684: PUSH
51685: LD_INT 8
51687: PUSH
51688: LD_INT 9
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: LIST
51695: PUSH
51696: LD_VAR 0 4
51700: ARRAY
51701: ST_TO_ADDR
// end ;
51702: LD_VAR 0 2
51706: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51707: LD_INT 0
51709: PPUSH
51710: PPUSH
51711: PPUSH
// if not mines then
51712: LD_VAR 0 2
51716: NOT
51717: IFFALSE 51721
// exit ;
51719: GO 51865
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51721: LD_ADDR_VAR 0 5
51725: PUSH
51726: LD_INT 81
51728: PUSH
51729: LD_VAR 0 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 3
51740: PUSH
51741: LD_INT 21
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: EMPTY
51748: LIST
51749: LIST
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PPUSH
51759: CALL_OW 69
51763: ST_TO_ADDR
// for i in mines do
51764: LD_ADDR_VAR 0 4
51768: PUSH
51769: LD_VAR 0 2
51773: PUSH
51774: FOR_IN
51775: IFFALSE 51863
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51777: LD_VAR 0 4
51781: PUSH
51782: LD_INT 1
51784: ARRAY
51785: PPUSH
51786: LD_VAR 0 4
51790: PUSH
51791: LD_INT 2
51793: ARRAY
51794: PPUSH
51795: CALL_OW 458
51799: NOT
51800: IFFALSE 51804
// continue ;
51802: GO 51774
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51804: LD_VAR 0 4
51808: PUSH
51809: LD_INT 1
51811: ARRAY
51812: PPUSH
51813: LD_VAR 0 4
51817: PUSH
51818: LD_INT 2
51820: ARRAY
51821: PPUSH
51822: CALL_OW 428
51826: PUSH
51827: LD_VAR 0 5
51831: IN
51832: IFFALSE 51861
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51834: LD_VAR 0 4
51838: PUSH
51839: LD_INT 1
51841: ARRAY
51842: PPUSH
51843: LD_VAR 0 4
51847: PUSH
51848: LD_INT 2
51850: ARRAY
51851: PPUSH
51852: LD_VAR 0 1
51856: PPUSH
51857: CALL_OW 456
// end ;
51861: GO 51774
51863: POP
51864: POP
// end ;
51865: LD_VAR 0 3
51869: RET
// export function Count ( array ) ; var i ; begin
51870: LD_INT 0
51872: PPUSH
51873: PPUSH
// result := 0 ;
51874: LD_ADDR_VAR 0 2
51878: PUSH
51879: LD_INT 0
51881: ST_TO_ADDR
// for i in array do
51882: LD_ADDR_VAR 0 3
51886: PUSH
51887: LD_VAR 0 1
51891: PUSH
51892: FOR_IN
51893: IFFALSE 51917
// if i then
51895: LD_VAR 0 3
51899: IFFALSE 51915
// result := result + 1 ;
51901: LD_ADDR_VAR 0 2
51905: PUSH
51906: LD_VAR 0 2
51910: PUSH
51911: LD_INT 1
51913: PLUS
51914: ST_TO_ADDR
51915: GO 51892
51917: POP
51918: POP
// end ;
51919: LD_VAR 0 2
51923: RET
// export function IsEmpty ( building ) ; begin
51924: LD_INT 0
51926: PPUSH
// if not building then
51927: LD_VAR 0 1
51931: NOT
51932: IFFALSE 51936
// exit ;
51934: GO 51979
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
51936: LD_ADDR_VAR 0 2
51940: PUSH
51941: LD_VAR 0 1
51945: PUSH
51946: LD_INT 22
51948: PUSH
51949: LD_VAR 0 1
51953: PPUSH
51954: CALL_OW 255
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 58
51965: PUSH
51966: EMPTY
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PPUSH
51973: CALL_OW 69
51977: IN
51978: ST_TO_ADDR
// end ;
51979: LD_VAR 0 2
51983: RET
// export function IsNotFull ( building ) ; begin
51984: LD_INT 0
51986: PPUSH
// if not building then
51987: LD_VAR 0 1
51991: NOT
51992: IFFALSE 51996
// exit ;
51994: GO 52015
// result := UnitsInside ( building ) < 6 ;
51996: LD_ADDR_VAR 0 2
52000: PUSH
52001: LD_VAR 0 1
52005: PPUSH
52006: CALL_OW 313
52010: PUSH
52011: LD_INT 6
52013: LESS
52014: ST_TO_ADDR
// end ;
52015: LD_VAR 0 2
52019: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52020: LD_INT 0
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
// tmp := [ ] ;
52026: LD_ADDR_VAR 0 3
52030: PUSH
52031: EMPTY
52032: ST_TO_ADDR
// list := [ ] ;
52033: LD_ADDR_VAR 0 5
52037: PUSH
52038: EMPTY
52039: ST_TO_ADDR
// for i = 16 to 25 do
52040: LD_ADDR_VAR 0 4
52044: PUSH
52045: DOUBLE
52046: LD_INT 16
52048: DEC
52049: ST_TO_ADDR
52050: LD_INT 25
52052: PUSH
52053: FOR_TO
52054: IFFALSE 52127
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52056: LD_ADDR_VAR 0 3
52060: PUSH
52061: LD_VAR 0 3
52065: PUSH
52066: LD_INT 22
52068: PUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 255
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 91
52085: PUSH
52086: LD_VAR 0 1
52090: PUSH
52091: LD_INT 6
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 30
52101: PUSH
52102: LD_VAR 0 4
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: LIST
52115: PUSH
52116: EMPTY
52117: LIST
52118: PPUSH
52119: CALL_OW 69
52123: ADD
52124: ST_TO_ADDR
52125: GO 52053
52127: POP
52128: POP
// for i = 1 to tmp do
52129: LD_ADDR_VAR 0 4
52133: PUSH
52134: DOUBLE
52135: LD_INT 1
52137: DEC
52138: ST_TO_ADDR
52139: LD_VAR 0 3
52143: PUSH
52144: FOR_TO
52145: IFFALSE 52233
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52147: LD_ADDR_VAR 0 5
52151: PUSH
52152: LD_VAR 0 5
52156: PUSH
52157: LD_VAR 0 3
52161: PUSH
52162: LD_VAR 0 4
52166: ARRAY
52167: PPUSH
52168: CALL_OW 266
52172: PUSH
52173: LD_VAR 0 3
52177: PUSH
52178: LD_VAR 0 4
52182: ARRAY
52183: PPUSH
52184: CALL_OW 250
52188: PUSH
52189: LD_VAR 0 3
52193: PUSH
52194: LD_VAR 0 4
52198: ARRAY
52199: PPUSH
52200: CALL_OW 251
52204: PUSH
52205: LD_VAR 0 3
52209: PUSH
52210: LD_VAR 0 4
52214: ARRAY
52215: PPUSH
52216: CALL_OW 254
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: PUSH
52227: EMPTY
52228: LIST
52229: ADD
52230: ST_TO_ADDR
52231: GO 52144
52233: POP
52234: POP
// result := list ;
52235: LD_ADDR_VAR 0 2
52239: PUSH
52240: LD_VAR 0 5
52244: ST_TO_ADDR
// end ;
52245: LD_VAR 0 2
52249: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52250: LD_INT 0
52252: PPUSH
52253: PPUSH
52254: PPUSH
52255: PPUSH
52256: PPUSH
52257: PPUSH
52258: PPUSH
// if not factory then
52259: LD_VAR 0 1
52263: NOT
52264: IFFALSE 52268
// exit ;
52266: GO 52861
// if control = control_apeman then
52268: LD_VAR 0 4
52272: PUSH
52273: LD_INT 5
52275: EQUAL
52276: IFFALSE 52385
// begin tmp := UnitsInside ( factory ) ;
52278: LD_ADDR_VAR 0 8
52282: PUSH
52283: LD_VAR 0 1
52287: PPUSH
52288: CALL_OW 313
52292: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52293: LD_VAR 0 8
52297: PPUSH
52298: LD_INT 25
52300: PUSH
52301: LD_INT 12
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PPUSH
52308: CALL_OW 72
52312: NOT
52313: IFFALSE 52323
// control := control_manual ;
52315: LD_ADDR_VAR 0 4
52319: PUSH
52320: LD_INT 1
52322: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52323: LD_ADDR_VAR 0 8
52327: PUSH
52328: LD_VAR 0 1
52332: PPUSH
52333: CALL 52020 0 1
52337: ST_TO_ADDR
// if tmp then
52338: LD_VAR 0 8
52342: IFFALSE 52385
// begin for i in tmp do
52344: LD_ADDR_VAR 0 7
52348: PUSH
52349: LD_VAR 0 8
52353: PUSH
52354: FOR_IN
52355: IFFALSE 52383
// if i [ 1 ] = b_ext_radio then
52357: LD_VAR 0 7
52361: PUSH
52362: LD_INT 1
52364: ARRAY
52365: PUSH
52366: LD_INT 22
52368: EQUAL
52369: IFFALSE 52381
// begin control := control_remote ;
52371: LD_ADDR_VAR 0 4
52375: PUSH
52376: LD_INT 2
52378: ST_TO_ADDR
// break ;
52379: GO 52383
// end ;
52381: GO 52354
52383: POP
52384: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52385: LD_VAR 0 1
52389: PPUSH
52390: LD_VAR 0 2
52394: PPUSH
52395: LD_VAR 0 3
52399: PPUSH
52400: LD_VAR 0 4
52404: PPUSH
52405: LD_VAR 0 5
52409: PPUSH
52410: CALL_OW 448
52414: IFFALSE 52449
// begin result := [ chassis , engine , control , weapon ] ;
52416: LD_ADDR_VAR 0 6
52420: PUSH
52421: LD_VAR 0 2
52425: PUSH
52426: LD_VAR 0 3
52430: PUSH
52431: LD_VAR 0 4
52435: PUSH
52436: LD_VAR 0 5
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: ST_TO_ADDR
// exit ;
52447: GO 52861
// end ; _chassis := AvailableChassisList ( factory ) ;
52449: LD_ADDR_VAR 0 9
52453: PUSH
52454: LD_VAR 0 1
52458: PPUSH
52459: CALL_OW 475
52463: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52464: LD_ADDR_VAR 0 11
52468: PUSH
52469: LD_VAR 0 1
52473: PPUSH
52474: CALL_OW 476
52478: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52479: LD_ADDR_VAR 0 12
52483: PUSH
52484: LD_VAR 0 1
52488: PPUSH
52489: CALL_OW 477
52493: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52494: LD_ADDR_VAR 0 10
52498: PUSH
52499: LD_VAR 0 1
52503: PPUSH
52504: CALL_OW 478
52508: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52509: LD_VAR 0 9
52513: NOT
52514: PUSH
52515: LD_VAR 0 11
52519: NOT
52520: OR
52521: PUSH
52522: LD_VAR 0 12
52526: NOT
52527: OR
52528: PUSH
52529: LD_VAR 0 10
52533: NOT
52534: OR
52535: IFFALSE 52570
// begin result := [ chassis , engine , control , weapon ] ;
52537: LD_ADDR_VAR 0 6
52541: PUSH
52542: LD_VAR 0 2
52546: PUSH
52547: LD_VAR 0 3
52551: PUSH
52552: LD_VAR 0 4
52556: PUSH
52557: LD_VAR 0 5
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: ST_TO_ADDR
// exit ;
52568: GO 52861
// end ; if not chassis in _chassis then
52570: LD_VAR 0 2
52574: PUSH
52575: LD_VAR 0 9
52579: IN
52580: NOT
52581: IFFALSE 52607
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52583: LD_ADDR_VAR 0 2
52587: PUSH
52588: LD_VAR 0 9
52592: PUSH
52593: LD_INT 1
52595: PPUSH
52596: LD_VAR 0 9
52600: PPUSH
52601: CALL_OW 12
52605: ARRAY
52606: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52607: LD_VAR 0 2
52611: PPUSH
52612: LD_VAR 0 3
52616: PPUSH
52617: CALL 52866 0 2
52621: NOT
52622: IFFALSE 52681
// repeat engine := _engine [ 1 ] ;
52624: LD_ADDR_VAR 0 3
52628: PUSH
52629: LD_VAR 0 11
52633: PUSH
52634: LD_INT 1
52636: ARRAY
52637: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52638: LD_ADDR_VAR 0 11
52642: PUSH
52643: LD_VAR 0 11
52647: PPUSH
52648: LD_INT 1
52650: PPUSH
52651: CALL_OW 3
52655: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52656: LD_VAR 0 2
52660: PPUSH
52661: LD_VAR 0 3
52665: PPUSH
52666: CALL 52866 0 2
52670: PUSH
52671: LD_VAR 0 11
52675: PUSH
52676: EMPTY
52677: EQUAL
52678: OR
52679: IFFALSE 52624
// if not control in _control then
52681: LD_VAR 0 4
52685: PUSH
52686: LD_VAR 0 12
52690: IN
52691: NOT
52692: IFFALSE 52718
// control := _control [ rand ( 1 , _control ) ] ;
52694: LD_ADDR_VAR 0 4
52698: PUSH
52699: LD_VAR 0 12
52703: PUSH
52704: LD_INT 1
52706: PPUSH
52707: LD_VAR 0 12
52711: PPUSH
52712: CALL_OW 12
52716: ARRAY
52717: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
52718: LD_VAR 0 2
52722: PPUSH
52723: LD_VAR 0 5
52727: PPUSH
52728: CALL 53086 0 2
52732: NOT
52733: IFFALSE 52792
// repeat weapon := _weapon [ 1 ] ;
52735: LD_ADDR_VAR 0 5
52739: PUSH
52740: LD_VAR 0 10
52744: PUSH
52745: LD_INT 1
52747: ARRAY
52748: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
52749: LD_ADDR_VAR 0 10
52753: PUSH
52754: LD_VAR 0 10
52758: PPUSH
52759: LD_INT 1
52761: PPUSH
52762: CALL_OW 3
52766: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
52767: LD_VAR 0 2
52771: PPUSH
52772: LD_VAR 0 5
52776: PPUSH
52777: CALL 53086 0 2
52781: PUSH
52782: LD_VAR 0 10
52786: PUSH
52787: EMPTY
52788: EQUAL
52789: OR
52790: IFFALSE 52735
// result := [ ] ;
52792: LD_ADDR_VAR 0 6
52796: PUSH
52797: EMPTY
52798: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52799: LD_VAR 0 1
52803: PPUSH
52804: LD_VAR 0 2
52808: PPUSH
52809: LD_VAR 0 3
52813: PPUSH
52814: LD_VAR 0 4
52818: PPUSH
52819: LD_VAR 0 5
52823: PPUSH
52824: CALL_OW 448
52828: IFFALSE 52861
// result := [ chassis , engine , control , weapon ] ;
52830: LD_ADDR_VAR 0 6
52834: PUSH
52835: LD_VAR 0 2
52839: PUSH
52840: LD_VAR 0 3
52844: PUSH
52845: LD_VAR 0 4
52849: PUSH
52850: LD_VAR 0 5
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: ST_TO_ADDR
// end ;
52861: LD_VAR 0 6
52865: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
52866: LD_INT 0
52868: PPUSH
// if not chassis or not engine then
52869: LD_VAR 0 1
52873: NOT
52874: PUSH
52875: LD_VAR 0 2
52879: NOT
52880: OR
52881: IFFALSE 52885
// exit ;
52883: GO 53081
// case engine of engine_solar :
52885: LD_VAR 0 2
52889: PUSH
52890: LD_INT 2
52892: DOUBLE
52893: EQUAL
52894: IFTRUE 52898
52896: GO 52936
52898: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: LD_INT 11
52906: PUSH
52907: LD_INT 12
52909: PUSH
52910: LD_INT 13
52912: PUSH
52913: LD_INT 14
52915: PUSH
52916: LD_INT 1
52918: PUSH
52919: LD_INT 2
52921: PUSH
52922: LD_INT 3
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: ST_TO_ADDR
52934: GO 53065
52936: LD_INT 1
52938: DOUBLE
52939: EQUAL
52940: IFTRUE 52944
52942: GO 53006
52944: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
52945: LD_ADDR_VAR 0 3
52949: PUSH
52950: LD_INT 11
52952: PUSH
52953: LD_INT 12
52955: PUSH
52956: LD_INT 13
52958: PUSH
52959: LD_INT 14
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: LD_INT 2
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: LD_INT 4
52973: PUSH
52974: LD_INT 5
52976: PUSH
52977: LD_INT 21
52979: PUSH
52980: LD_INT 23
52982: PUSH
52983: LD_INT 22
52985: PUSH
52986: LD_INT 24
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: ST_TO_ADDR
53004: GO 53065
53006: LD_INT 3
53008: DOUBLE
53009: EQUAL
53010: IFTRUE 53014
53012: GO 53064
53014: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_INT 13
53022: PUSH
53023: LD_INT 14
53025: PUSH
53026: LD_INT 2
53028: PUSH
53029: LD_INT 3
53031: PUSH
53032: LD_INT 4
53034: PUSH
53035: LD_INT 5
53037: PUSH
53038: LD_INT 21
53040: PUSH
53041: LD_INT 22
53043: PUSH
53044: LD_INT 23
53046: PUSH
53047: LD_INT 24
53049: PUSH
53050: EMPTY
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: ST_TO_ADDR
53062: GO 53065
53064: POP
// result := ( chassis in result ) ;
53065: LD_ADDR_VAR 0 3
53069: PUSH
53070: LD_VAR 0 1
53074: PUSH
53075: LD_VAR 0 3
53079: IN
53080: ST_TO_ADDR
// end ;
53081: LD_VAR 0 3
53085: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53086: LD_INT 0
53088: PPUSH
// if not chassis or not weapon then
53089: LD_VAR 0 1
53093: NOT
53094: PUSH
53095: LD_VAR 0 2
53099: NOT
53100: OR
53101: IFFALSE 53105
// exit ;
53103: GO 54131
// case weapon of us_machine_gun :
53105: LD_VAR 0 2
53109: PUSH
53110: LD_INT 2
53112: DOUBLE
53113: EQUAL
53114: IFTRUE 53118
53116: GO 53148
53118: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53119: LD_ADDR_VAR 0 3
53123: PUSH
53124: LD_INT 1
53126: PUSH
53127: LD_INT 2
53129: PUSH
53130: LD_INT 3
53132: PUSH
53133: LD_INT 4
53135: PUSH
53136: LD_INT 5
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: ST_TO_ADDR
53146: GO 54115
53148: LD_INT 3
53150: DOUBLE
53151: EQUAL
53152: IFTRUE 53156
53154: GO 53186
53156: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53157: LD_ADDR_VAR 0 3
53161: PUSH
53162: LD_INT 1
53164: PUSH
53165: LD_INT 2
53167: PUSH
53168: LD_INT 3
53170: PUSH
53171: LD_INT 4
53173: PUSH
53174: LD_INT 5
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: ST_TO_ADDR
53184: GO 54115
53186: LD_INT 11
53188: DOUBLE
53189: EQUAL
53190: IFTRUE 53194
53192: GO 53224
53194: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53195: LD_ADDR_VAR 0 3
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 3
53208: PUSH
53209: LD_INT 4
53211: PUSH
53212: LD_INT 5
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: ST_TO_ADDR
53222: GO 54115
53224: LD_INT 4
53226: DOUBLE
53227: EQUAL
53228: IFTRUE 53232
53230: GO 53258
53232: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53233: LD_ADDR_VAR 0 3
53237: PUSH
53238: LD_INT 2
53240: PUSH
53241: LD_INT 3
53243: PUSH
53244: LD_INT 4
53246: PUSH
53247: LD_INT 5
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: ST_TO_ADDR
53256: GO 54115
53258: LD_INT 5
53260: DOUBLE
53261: EQUAL
53262: IFTRUE 53266
53264: GO 53292
53266: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53267: LD_ADDR_VAR 0 3
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 3
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 5
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
53290: GO 54115
53292: LD_INT 9
53294: DOUBLE
53295: EQUAL
53296: IFTRUE 53300
53298: GO 53326
53300: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53301: LD_ADDR_VAR 0 3
53305: PUSH
53306: LD_INT 2
53308: PUSH
53309: LD_INT 3
53311: PUSH
53312: LD_INT 4
53314: PUSH
53315: LD_INT 5
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: ST_TO_ADDR
53324: GO 54115
53326: LD_INT 7
53328: DOUBLE
53329: EQUAL
53330: IFTRUE 53334
53332: GO 53360
53334: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53335: LD_ADDR_VAR 0 3
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: LD_INT 4
53348: PUSH
53349: LD_INT 5
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: LIST
53356: LIST
53357: ST_TO_ADDR
53358: GO 54115
53360: LD_INT 12
53362: DOUBLE
53363: EQUAL
53364: IFTRUE 53368
53366: GO 53394
53368: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53369: LD_ADDR_VAR 0 3
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: LD_INT 3
53379: PUSH
53380: LD_INT 4
53382: PUSH
53383: LD_INT 5
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: ST_TO_ADDR
53392: GO 54115
53394: LD_INT 13
53396: DOUBLE
53397: EQUAL
53398: IFTRUE 53402
53400: GO 53428
53402: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53403: LD_ADDR_VAR 0 3
53407: PUSH
53408: LD_INT 2
53410: PUSH
53411: LD_INT 3
53413: PUSH
53414: LD_INT 4
53416: PUSH
53417: LD_INT 5
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: ST_TO_ADDR
53426: GO 54115
53428: LD_INT 14
53430: DOUBLE
53431: EQUAL
53432: IFTRUE 53436
53434: GO 53454
53436: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53437: LD_ADDR_VAR 0 3
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: LD_INT 5
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: ST_TO_ADDR
53452: GO 54115
53454: LD_INT 6
53456: DOUBLE
53457: EQUAL
53458: IFTRUE 53462
53460: GO 53480
53462: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53463: LD_ADDR_VAR 0 3
53467: PUSH
53468: LD_INT 4
53470: PUSH
53471: LD_INT 5
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: ST_TO_ADDR
53478: GO 54115
53480: LD_INT 10
53482: DOUBLE
53483: EQUAL
53484: IFTRUE 53488
53486: GO 53506
53488: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53489: LD_ADDR_VAR 0 3
53493: PUSH
53494: LD_INT 4
53496: PUSH
53497: LD_INT 5
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: ST_TO_ADDR
53504: GO 54115
53506: LD_INT 22
53508: DOUBLE
53509: EQUAL
53510: IFTRUE 53514
53512: GO 53540
53514: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53515: LD_ADDR_VAR 0 3
53519: PUSH
53520: LD_INT 11
53522: PUSH
53523: LD_INT 12
53525: PUSH
53526: LD_INT 13
53528: PUSH
53529: LD_INT 14
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: ST_TO_ADDR
53538: GO 54115
53540: LD_INT 23
53542: DOUBLE
53543: EQUAL
53544: IFTRUE 53548
53546: GO 53574
53548: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53549: LD_ADDR_VAR 0 3
53553: PUSH
53554: LD_INT 11
53556: PUSH
53557: LD_INT 12
53559: PUSH
53560: LD_INT 13
53562: PUSH
53563: LD_INT 14
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: ST_TO_ADDR
53572: GO 54115
53574: LD_INT 24
53576: DOUBLE
53577: EQUAL
53578: IFTRUE 53582
53580: GO 53608
53582: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53583: LD_ADDR_VAR 0 3
53587: PUSH
53588: LD_INT 11
53590: PUSH
53591: LD_INT 12
53593: PUSH
53594: LD_INT 13
53596: PUSH
53597: LD_INT 14
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: ST_TO_ADDR
53606: GO 54115
53608: LD_INT 30
53610: DOUBLE
53611: EQUAL
53612: IFTRUE 53616
53614: GO 53642
53616: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53617: LD_ADDR_VAR 0 3
53621: PUSH
53622: LD_INT 11
53624: PUSH
53625: LD_INT 12
53627: PUSH
53628: LD_INT 13
53630: PUSH
53631: LD_INT 14
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: ST_TO_ADDR
53640: GO 54115
53642: LD_INT 25
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53650
53648: GO 53668
53650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53651: LD_ADDR_VAR 0 3
53655: PUSH
53656: LD_INT 13
53658: PUSH
53659: LD_INT 14
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: ST_TO_ADDR
53666: GO 54115
53668: LD_INT 27
53670: DOUBLE
53671: EQUAL
53672: IFTRUE 53676
53674: GO 53694
53676: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
53677: LD_ADDR_VAR 0 3
53681: PUSH
53682: LD_INT 13
53684: PUSH
53685: LD_INT 14
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: ST_TO_ADDR
53692: GO 54115
53694: LD_INT 28
53696: DOUBLE
53697: EQUAL
53698: IFTRUE 53702
53700: GO 53720
53702: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
53703: LD_ADDR_VAR 0 3
53707: PUSH
53708: LD_INT 13
53710: PUSH
53711: LD_INT 14
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: ST_TO_ADDR
53718: GO 54115
53720: LD_INT 29
53722: DOUBLE
53723: EQUAL
53724: IFTRUE 53728
53726: GO 53746
53728: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
53729: LD_ADDR_VAR 0 3
53733: PUSH
53734: LD_INT 13
53736: PUSH
53737: LD_INT 14
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: ST_TO_ADDR
53744: GO 54115
53746: LD_INT 31
53748: DOUBLE
53749: EQUAL
53750: IFTRUE 53754
53752: GO 53772
53754: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
53755: LD_ADDR_VAR 0 3
53759: PUSH
53760: LD_INT 13
53762: PUSH
53763: LD_INT 14
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: ST_TO_ADDR
53770: GO 54115
53772: LD_INT 26
53774: DOUBLE
53775: EQUAL
53776: IFTRUE 53780
53778: GO 53798
53780: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
53781: LD_ADDR_VAR 0 3
53785: PUSH
53786: LD_INT 13
53788: PUSH
53789: LD_INT 14
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: ST_TO_ADDR
53796: GO 54115
53798: LD_INT 42
53800: DOUBLE
53801: EQUAL
53802: IFTRUE 53806
53804: GO 53832
53806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
53807: LD_ADDR_VAR 0 3
53811: PUSH
53812: LD_INT 21
53814: PUSH
53815: LD_INT 22
53817: PUSH
53818: LD_INT 23
53820: PUSH
53821: LD_INT 24
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: ST_TO_ADDR
53830: GO 54115
53832: LD_INT 43
53834: DOUBLE
53835: EQUAL
53836: IFTRUE 53840
53838: GO 53866
53840: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
53841: LD_ADDR_VAR 0 3
53845: PUSH
53846: LD_INT 21
53848: PUSH
53849: LD_INT 22
53851: PUSH
53852: LD_INT 23
53854: PUSH
53855: LD_INT 24
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: ST_TO_ADDR
53864: GO 54115
53866: LD_INT 44
53868: DOUBLE
53869: EQUAL
53870: IFTRUE 53874
53872: GO 53900
53874: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
53875: LD_ADDR_VAR 0 3
53879: PUSH
53880: LD_INT 21
53882: PUSH
53883: LD_INT 22
53885: PUSH
53886: LD_INT 23
53888: PUSH
53889: LD_INT 24
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: ST_TO_ADDR
53898: GO 54115
53900: LD_INT 45
53902: DOUBLE
53903: EQUAL
53904: IFTRUE 53908
53906: GO 53934
53908: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
53909: LD_ADDR_VAR 0 3
53913: PUSH
53914: LD_INT 21
53916: PUSH
53917: LD_INT 22
53919: PUSH
53920: LD_INT 23
53922: PUSH
53923: LD_INT 24
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: LIST
53930: LIST
53931: ST_TO_ADDR
53932: GO 54115
53934: LD_INT 49
53936: DOUBLE
53937: EQUAL
53938: IFTRUE 53942
53940: GO 53968
53942: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
53943: LD_ADDR_VAR 0 3
53947: PUSH
53948: LD_INT 21
53950: PUSH
53951: LD_INT 22
53953: PUSH
53954: LD_INT 23
53956: PUSH
53957: LD_INT 24
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: LIST
53964: LIST
53965: ST_TO_ADDR
53966: GO 54115
53968: LD_INT 51
53970: DOUBLE
53971: EQUAL
53972: IFTRUE 53976
53974: GO 54002
53976: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
53977: LD_ADDR_VAR 0 3
53981: PUSH
53982: LD_INT 21
53984: PUSH
53985: LD_INT 22
53987: PUSH
53988: LD_INT 23
53990: PUSH
53991: LD_INT 24
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
54000: GO 54115
54002: LD_INT 52
54004: DOUBLE
54005: EQUAL
54006: IFTRUE 54010
54008: GO 54036
54010: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54011: LD_ADDR_VAR 0 3
54015: PUSH
54016: LD_INT 21
54018: PUSH
54019: LD_INT 22
54021: PUSH
54022: LD_INT 23
54024: PUSH
54025: LD_INT 24
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
54034: GO 54115
54036: LD_INT 53
54038: DOUBLE
54039: EQUAL
54040: IFTRUE 54044
54042: GO 54062
54044: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54045: LD_ADDR_VAR 0 3
54049: PUSH
54050: LD_INT 23
54052: PUSH
54053: LD_INT 24
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: ST_TO_ADDR
54060: GO 54115
54062: LD_INT 46
54064: DOUBLE
54065: EQUAL
54066: IFTRUE 54070
54068: GO 54088
54070: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54071: LD_ADDR_VAR 0 3
54075: PUSH
54076: LD_INT 23
54078: PUSH
54079: LD_INT 24
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: ST_TO_ADDR
54086: GO 54115
54088: LD_INT 47
54090: DOUBLE
54091: EQUAL
54092: IFTRUE 54096
54094: GO 54114
54096: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54097: LD_ADDR_VAR 0 3
54101: PUSH
54102: LD_INT 23
54104: PUSH
54105: LD_INT 24
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: ST_TO_ADDR
54112: GO 54115
54114: POP
// result := ( chassis in result ) ;
54115: LD_ADDR_VAR 0 3
54119: PUSH
54120: LD_VAR 0 1
54124: PUSH
54125: LD_VAR 0 3
54129: IN
54130: ST_TO_ADDR
// end ;
54131: LD_VAR 0 3
54135: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54136: LD_INT 0
54138: PPUSH
54139: PPUSH
54140: PPUSH
54141: PPUSH
54142: PPUSH
54143: PPUSH
54144: PPUSH
// result := array ;
54145: LD_ADDR_VAR 0 5
54149: PUSH
54150: LD_VAR 0 1
54154: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54155: LD_VAR 0 1
54159: NOT
54160: PUSH
54161: LD_VAR 0 2
54165: NOT
54166: OR
54167: PUSH
54168: LD_VAR 0 3
54172: NOT
54173: OR
54174: PUSH
54175: LD_VAR 0 2
54179: PUSH
54180: LD_VAR 0 1
54184: GREATER
54185: OR
54186: PUSH
54187: LD_VAR 0 3
54191: PUSH
54192: LD_VAR 0 1
54196: GREATER
54197: OR
54198: IFFALSE 54202
// exit ;
54200: GO 54498
// if direction then
54202: LD_VAR 0 4
54206: IFFALSE 54270
// begin d := 1 ;
54208: LD_ADDR_VAR 0 9
54212: PUSH
54213: LD_INT 1
54215: ST_TO_ADDR
// if i_from > i_to then
54216: LD_VAR 0 2
54220: PUSH
54221: LD_VAR 0 3
54225: GREATER
54226: IFFALSE 54252
// length := ( array - i_from ) + i_to else
54228: LD_ADDR_VAR 0 11
54232: PUSH
54233: LD_VAR 0 1
54237: PUSH
54238: LD_VAR 0 2
54242: MINUS
54243: PUSH
54244: LD_VAR 0 3
54248: PLUS
54249: ST_TO_ADDR
54250: GO 54268
// length := i_to - i_from ;
54252: LD_ADDR_VAR 0 11
54256: PUSH
54257: LD_VAR 0 3
54261: PUSH
54262: LD_VAR 0 2
54266: MINUS
54267: ST_TO_ADDR
// end else
54268: GO 54331
// begin d := - 1 ;
54270: LD_ADDR_VAR 0 9
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: ST_TO_ADDR
// if i_from > i_to then
54279: LD_VAR 0 2
54283: PUSH
54284: LD_VAR 0 3
54288: GREATER
54289: IFFALSE 54309
// length := i_from - i_to else
54291: LD_ADDR_VAR 0 11
54295: PUSH
54296: LD_VAR 0 2
54300: PUSH
54301: LD_VAR 0 3
54305: MINUS
54306: ST_TO_ADDR
54307: GO 54331
// length := ( array - i_to ) + i_from ;
54309: LD_ADDR_VAR 0 11
54313: PUSH
54314: LD_VAR 0 1
54318: PUSH
54319: LD_VAR 0 3
54323: MINUS
54324: PUSH
54325: LD_VAR 0 2
54329: PLUS
54330: ST_TO_ADDR
// end ; if not length then
54331: LD_VAR 0 11
54335: NOT
54336: IFFALSE 54340
// exit ;
54338: GO 54498
// tmp := array ;
54340: LD_ADDR_VAR 0 10
54344: PUSH
54345: LD_VAR 0 1
54349: ST_TO_ADDR
// for i = 1 to length do
54350: LD_ADDR_VAR 0 6
54354: PUSH
54355: DOUBLE
54356: LD_INT 1
54358: DEC
54359: ST_TO_ADDR
54360: LD_VAR 0 11
54364: PUSH
54365: FOR_TO
54366: IFFALSE 54486
// begin for j = 1 to array do
54368: LD_ADDR_VAR 0 7
54372: PUSH
54373: DOUBLE
54374: LD_INT 1
54376: DEC
54377: ST_TO_ADDR
54378: LD_VAR 0 1
54382: PUSH
54383: FOR_TO
54384: IFFALSE 54472
// begin k := j + d ;
54386: LD_ADDR_VAR 0 8
54390: PUSH
54391: LD_VAR 0 7
54395: PUSH
54396: LD_VAR 0 9
54400: PLUS
54401: ST_TO_ADDR
// if k > array then
54402: LD_VAR 0 8
54406: PUSH
54407: LD_VAR 0 1
54411: GREATER
54412: IFFALSE 54422
// k := 1 ;
54414: LD_ADDR_VAR 0 8
54418: PUSH
54419: LD_INT 1
54421: ST_TO_ADDR
// if not k then
54422: LD_VAR 0 8
54426: NOT
54427: IFFALSE 54439
// k := array ;
54429: LD_ADDR_VAR 0 8
54433: PUSH
54434: LD_VAR 0 1
54438: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54439: LD_ADDR_VAR 0 10
54443: PUSH
54444: LD_VAR 0 10
54448: PPUSH
54449: LD_VAR 0 8
54453: PPUSH
54454: LD_VAR 0 1
54458: PUSH
54459: LD_VAR 0 7
54463: ARRAY
54464: PPUSH
54465: CALL_OW 1
54469: ST_TO_ADDR
// end ;
54470: GO 54383
54472: POP
54473: POP
// array := tmp ;
54474: LD_ADDR_VAR 0 1
54478: PUSH
54479: LD_VAR 0 10
54483: ST_TO_ADDR
// end ;
54484: GO 54365
54486: POP
54487: POP
// result := array ;
54488: LD_ADDR_VAR 0 5
54492: PUSH
54493: LD_VAR 0 1
54497: ST_TO_ADDR
// end ;
54498: LD_VAR 0 5
54502: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54503: LD_INT 0
54505: PPUSH
54506: PPUSH
// result := 0 ;
54507: LD_ADDR_VAR 0 3
54511: PUSH
54512: LD_INT 0
54514: ST_TO_ADDR
// if not array or not value in array then
54515: LD_VAR 0 1
54519: NOT
54520: PUSH
54521: LD_VAR 0 2
54525: PUSH
54526: LD_VAR 0 1
54530: IN
54531: NOT
54532: OR
54533: IFFALSE 54537
// exit ;
54535: GO 54591
// for i = 1 to array do
54537: LD_ADDR_VAR 0 4
54541: PUSH
54542: DOUBLE
54543: LD_INT 1
54545: DEC
54546: ST_TO_ADDR
54547: LD_VAR 0 1
54551: PUSH
54552: FOR_TO
54553: IFFALSE 54589
// if value = array [ i ] then
54555: LD_VAR 0 2
54559: PUSH
54560: LD_VAR 0 1
54564: PUSH
54565: LD_VAR 0 4
54569: ARRAY
54570: EQUAL
54571: IFFALSE 54587
// begin result := i ;
54573: LD_ADDR_VAR 0 3
54577: PUSH
54578: LD_VAR 0 4
54582: ST_TO_ADDR
// exit ;
54583: POP
54584: POP
54585: GO 54591
// end ;
54587: GO 54552
54589: POP
54590: POP
// end ;
54591: LD_VAR 0 3
54595: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54596: LD_INT 0
54598: PPUSH
// vc_chassis := chassis ;
54599: LD_ADDR_OWVAR 37
54603: PUSH
54604: LD_VAR 0 1
54608: ST_TO_ADDR
// vc_engine := engine ;
54609: LD_ADDR_OWVAR 39
54613: PUSH
54614: LD_VAR 0 2
54618: ST_TO_ADDR
// vc_control := control ;
54619: LD_ADDR_OWVAR 38
54623: PUSH
54624: LD_VAR 0 3
54628: ST_TO_ADDR
// vc_weapon := weapon ;
54629: LD_ADDR_OWVAR 40
54633: PUSH
54634: LD_VAR 0 4
54638: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54639: LD_ADDR_OWVAR 41
54643: PUSH
54644: LD_VAR 0 5
54648: ST_TO_ADDR
// end ;
54649: LD_VAR 0 6
54653: RET
// export function WantPlant ( unit ) ; var task ; begin
54654: LD_INT 0
54656: PPUSH
54657: PPUSH
// result := false ;
54658: LD_ADDR_VAR 0 2
54662: PUSH
54663: LD_INT 0
54665: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
54666: LD_ADDR_VAR 0 3
54670: PUSH
54671: LD_VAR 0 1
54675: PPUSH
54676: CALL_OW 437
54680: ST_TO_ADDR
// if task then
54681: LD_VAR 0 3
54685: IFFALSE 54713
// if task [ 1 ] [ 1 ] = p then
54687: LD_VAR 0 3
54691: PUSH
54692: LD_INT 1
54694: ARRAY
54695: PUSH
54696: LD_INT 1
54698: ARRAY
54699: PUSH
54700: LD_STRING p
54702: EQUAL
54703: IFFALSE 54713
// result := true ;
54705: LD_ADDR_VAR 0 2
54709: PUSH
54710: LD_INT 1
54712: ST_TO_ADDR
// end ;
54713: LD_VAR 0 2
54717: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
54718: LD_INT 0
54720: PPUSH
54721: PPUSH
54722: PPUSH
54723: PPUSH
// if pos < 1 then
54724: LD_VAR 0 2
54728: PUSH
54729: LD_INT 1
54731: LESS
54732: IFFALSE 54736
// exit ;
54734: GO 55039
// if pos = 1 then
54736: LD_VAR 0 2
54740: PUSH
54741: LD_INT 1
54743: EQUAL
54744: IFFALSE 54777
// result := Replace ( arr , pos [ 1 ] , value ) else
54746: LD_ADDR_VAR 0 4
54750: PUSH
54751: LD_VAR 0 1
54755: PPUSH
54756: LD_VAR 0 2
54760: PUSH
54761: LD_INT 1
54763: ARRAY
54764: PPUSH
54765: LD_VAR 0 3
54769: PPUSH
54770: CALL_OW 1
54774: ST_TO_ADDR
54775: GO 55039
// begin tmp := arr ;
54777: LD_ADDR_VAR 0 6
54781: PUSH
54782: LD_VAR 0 1
54786: ST_TO_ADDR
// s_arr := [ tmp ] ;
54787: LD_ADDR_VAR 0 7
54791: PUSH
54792: LD_VAR 0 6
54796: PUSH
54797: EMPTY
54798: LIST
54799: ST_TO_ADDR
// for i = 1 to pos - 1 do
54800: LD_ADDR_VAR 0 5
54804: PUSH
54805: DOUBLE
54806: LD_INT 1
54808: DEC
54809: ST_TO_ADDR
54810: LD_VAR 0 2
54814: PUSH
54815: LD_INT 1
54817: MINUS
54818: PUSH
54819: FOR_TO
54820: IFFALSE 54865
// begin tmp := tmp [ pos [ i ] ] ;
54822: LD_ADDR_VAR 0 6
54826: PUSH
54827: LD_VAR 0 6
54831: PUSH
54832: LD_VAR 0 2
54836: PUSH
54837: LD_VAR 0 5
54841: ARRAY
54842: ARRAY
54843: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
54844: LD_ADDR_VAR 0 7
54848: PUSH
54849: LD_VAR 0 7
54853: PUSH
54854: LD_VAR 0 6
54858: PUSH
54859: EMPTY
54860: LIST
54861: ADD
54862: ST_TO_ADDR
// end ;
54863: GO 54819
54865: POP
54866: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
54867: LD_ADDR_VAR 0 6
54871: PUSH
54872: LD_VAR 0 6
54876: PPUSH
54877: LD_VAR 0 2
54881: PUSH
54882: LD_VAR 0 2
54886: ARRAY
54887: PPUSH
54888: LD_VAR 0 3
54892: PPUSH
54893: CALL_OW 1
54897: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
54898: LD_ADDR_VAR 0 7
54902: PUSH
54903: LD_VAR 0 7
54907: PPUSH
54908: LD_VAR 0 7
54912: PPUSH
54913: LD_VAR 0 6
54917: PPUSH
54918: CALL_OW 1
54922: ST_TO_ADDR
// for i = s_arr downto 2 do
54923: LD_ADDR_VAR 0 5
54927: PUSH
54928: DOUBLE
54929: LD_VAR 0 7
54933: INC
54934: ST_TO_ADDR
54935: LD_INT 2
54937: PUSH
54938: FOR_DOWNTO
54939: IFFALSE 55023
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
54941: LD_ADDR_VAR 0 6
54945: PUSH
54946: LD_VAR 0 7
54950: PUSH
54951: LD_VAR 0 5
54955: PUSH
54956: LD_INT 1
54958: MINUS
54959: ARRAY
54960: PPUSH
54961: LD_VAR 0 2
54965: PUSH
54966: LD_VAR 0 5
54970: PUSH
54971: LD_INT 1
54973: MINUS
54974: ARRAY
54975: PPUSH
54976: LD_VAR 0 7
54980: PUSH
54981: LD_VAR 0 5
54985: ARRAY
54986: PPUSH
54987: CALL_OW 1
54991: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
54992: LD_ADDR_VAR 0 7
54996: PUSH
54997: LD_VAR 0 7
55001: PPUSH
55002: LD_VAR 0 5
55006: PUSH
55007: LD_INT 1
55009: MINUS
55010: PPUSH
55011: LD_VAR 0 6
55015: PPUSH
55016: CALL_OW 1
55020: ST_TO_ADDR
// end ;
55021: GO 54938
55023: POP
55024: POP
// result := s_arr [ 1 ] ;
55025: LD_ADDR_VAR 0 4
55029: PUSH
55030: LD_VAR 0 7
55034: PUSH
55035: LD_INT 1
55037: ARRAY
55038: ST_TO_ADDR
// end ; end ;
55039: LD_VAR 0 4
55043: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55044: LD_INT 0
55046: PPUSH
55047: PPUSH
// if not list then
55048: LD_VAR 0 1
55052: NOT
55053: IFFALSE 55057
// exit ;
55055: GO 55148
// i := list [ pos1 ] ;
55057: LD_ADDR_VAR 0 5
55061: PUSH
55062: LD_VAR 0 1
55066: PUSH
55067: LD_VAR 0 2
55071: ARRAY
55072: ST_TO_ADDR
// if not i then
55073: LD_VAR 0 5
55077: NOT
55078: IFFALSE 55082
// exit ;
55080: GO 55148
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55082: LD_ADDR_VAR 0 1
55086: PUSH
55087: LD_VAR 0 1
55091: PPUSH
55092: LD_VAR 0 2
55096: PPUSH
55097: LD_VAR 0 1
55101: PUSH
55102: LD_VAR 0 3
55106: ARRAY
55107: PPUSH
55108: CALL_OW 1
55112: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55113: LD_ADDR_VAR 0 1
55117: PUSH
55118: LD_VAR 0 1
55122: PPUSH
55123: LD_VAR 0 3
55127: PPUSH
55128: LD_VAR 0 5
55132: PPUSH
55133: CALL_OW 1
55137: ST_TO_ADDR
// result := list ;
55138: LD_ADDR_VAR 0 4
55142: PUSH
55143: LD_VAR 0 1
55147: ST_TO_ADDR
// end ;
55148: LD_VAR 0 4
55152: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55153: LD_INT 0
55155: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55156: LD_ADDR_VAR 0 5
55160: PUSH
55161: LD_VAR 0 1
55165: PPUSH
55166: CALL_OW 250
55170: PPUSH
55171: LD_VAR 0 1
55175: PPUSH
55176: CALL_OW 251
55180: PPUSH
55181: LD_VAR 0 2
55185: PPUSH
55186: LD_VAR 0 3
55190: PPUSH
55191: LD_VAR 0 4
55195: PPUSH
55196: CALL 55206 0 5
55200: ST_TO_ADDR
// end ;
55201: LD_VAR 0 5
55205: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55206: LD_INT 0
55208: PPUSH
55209: PPUSH
55210: PPUSH
55211: PPUSH
// if not list then
55212: LD_VAR 0 3
55216: NOT
55217: IFFALSE 55221
// exit ;
55219: GO 55609
// result := [ ] ;
55221: LD_ADDR_VAR 0 6
55225: PUSH
55226: EMPTY
55227: ST_TO_ADDR
// for i in list do
55228: LD_ADDR_VAR 0 7
55232: PUSH
55233: LD_VAR 0 3
55237: PUSH
55238: FOR_IN
55239: IFFALSE 55441
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55241: LD_ADDR_VAR 0 9
55245: PUSH
55246: LD_VAR 0 7
55250: PPUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: LD_VAR 0 2
55260: PPUSH
55261: CALL_OW 297
55265: ST_TO_ADDR
// if not result then
55266: LD_VAR 0 6
55270: NOT
55271: IFFALSE 55297
// result := [ [ i , tmp ] ] else
55273: LD_ADDR_VAR 0 6
55277: PUSH
55278: LD_VAR 0 7
55282: PUSH
55283: LD_VAR 0 9
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: EMPTY
55293: LIST
55294: ST_TO_ADDR
55295: GO 55439
// begin if result [ result ] [ 2 ] < tmp then
55297: LD_VAR 0 6
55301: PUSH
55302: LD_VAR 0 6
55306: ARRAY
55307: PUSH
55308: LD_INT 2
55310: ARRAY
55311: PUSH
55312: LD_VAR 0 9
55316: LESS
55317: IFFALSE 55359
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55319: LD_ADDR_VAR 0 6
55323: PUSH
55324: LD_VAR 0 6
55328: PPUSH
55329: LD_VAR 0 6
55333: PUSH
55334: LD_INT 1
55336: PLUS
55337: PPUSH
55338: LD_VAR 0 7
55342: PUSH
55343: LD_VAR 0 9
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PPUSH
55352: CALL_OW 2
55356: ST_TO_ADDR
55357: GO 55439
// for j = 1 to result do
55359: LD_ADDR_VAR 0 8
55363: PUSH
55364: DOUBLE
55365: LD_INT 1
55367: DEC
55368: ST_TO_ADDR
55369: LD_VAR 0 6
55373: PUSH
55374: FOR_TO
55375: IFFALSE 55437
// begin if tmp < result [ j ] [ 2 ] then
55377: LD_VAR 0 9
55381: PUSH
55382: LD_VAR 0 6
55386: PUSH
55387: LD_VAR 0 8
55391: ARRAY
55392: PUSH
55393: LD_INT 2
55395: ARRAY
55396: LESS
55397: IFFALSE 55435
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55399: LD_ADDR_VAR 0 6
55403: PUSH
55404: LD_VAR 0 6
55408: PPUSH
55409: LD_VAR 0 8
55413: PPUSH
55414: LD_VAR 0 7
55418: PUSH
55419: LD_VAR 0 9
55423: PUSH
55424: EMPTY
55425: LIST
55426: LIST
55427: PPUSH
55428: CALL_OW 2
55432: ST_TO_ADDR
// break ;
55433: GO 55437
// end ; end ;
55435: GO 55374
55437: POP
55438: POP
// end ; end ;
55439: GO 55238
55441: POP
55442: POP
// if result and not asc then
55443: LD_VAR 0 6
55447: PUSH
55448: LD_VAR 0 4
55452: NOT
55453: AND
55454: IFFALSE 55529
// begin tmp := result ;
55456: LD_ADDR_VAR 0 9
55460: PUSH
55461: LD_VAR 0 6
55465: ST_TO_ADDR
// for i = tmp downto 1 do
55466: LD_ADDR_VAR 0 7
55470: PUSH
55471: DOUBLE
55472: LD_VAR 0 9
55476: INC
55477: ST_TO_ADDR
55478: LD_INT 1
55480: PUSH
55481: FOR_DOWNTO
55482: IFFALSE 55527
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55484: LD_ADDR_VAR 0 6
55488: PUSH
55489: LD_VAR 0 6
55493: PPUSH
55494: LD_VAR 0 9
55498: PUSH
55499: LD_VAR 0 7
55503: MINUS
55504: PUSH
55505: LD_INT 1
55507: PLUS
55508: PPUSH
55509: LD_VAR 0 9
55513: PUSH
55514: LD_VAR 0 7
55518: ARRAY
55519: PPUSH
55520: CALL_OW 1
55524: ST_TO_ADDR
55525: GO 55481
55527: POP
55528: POP
// end ; tmp := [ ] ;
55529: LD_ADDR_VAR 0 9
55533: PUSH
55534: EMPTY
55535: ST_TO_ADDR
// if mode then
55536: LD_VAR 0 5
55540: IFFALSE 55609
// begin for i = 1 to result do
55542: LD_ADDR_VAR 0 7
55546: PUSH
55547: DOUBLE
55548: LD_INT 1
55550: DEC
55551: ST_TO_ADDR
55552: LD_VAR 0 6
55556: PUSH
55557: FOR_TO
55558: IFFALSE 55597
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55560: LD_ADDR_VAR 0 9
55564: PUSH
55565: LD_VAR 0 9
55569: PPUSH
55570: LD_VAR 0 7
55574: PPUSH
55575: LD_VAR 0 6
55579: PUSH
55580: LD_VAR 0 7
55584: ARRAY
55585: PUSH
55586: LD_INT 1
55588: ARRAY
55589: PPUSH
55590: CALL_OW 1
55594: ST_TO_ADDR
55595: GO 55557
55597: POP
55598: POP
// result := tmp ;
55599: LD_ADDR_VAR 0 6
55603: PUSH
55604: LD_VAR 0 9
55608: ST_TO_ADDR
// end ; end ;
55609: LD_VAR 0 6
55613: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55614: LD_INT 0
55616: PPUSH
55617: PPUSH
55618: PPUSH
55619: PPUSH
55620: PPUSH
55621: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55622: LD_ADDR_VAR 0 5
55626: PUSH
55627: LD_INT 0
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: ST_TO_ADDR
// if not x or not y then
55644: LD_VAR 0 2
55648: NOT
55649: PUSH
55650: LD_VAR 0 3
55654: NOT
55655: OR
55656: IFFALSE 55660
// exit ;
55658: GO 57306
// if not range then
55660: LD_VAR 0 4
55664: NOT
55665: IFFALSE 55675
// range := 10 ;
55667: LD_ADDR_VAR 0 4
55671: PUSH
55672: LD_INT 10
55674: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55675: LD_ADDR_VAR 0 8
55679: PUSH
55680: LD_INT 81
55682: PUSH
55683: LD_VAR 0 1
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 92
55694: PUSH
55695: LD_VAR 0 2
55699: PUSH
55700: LD_VAR 0 3
55704: PUSH
55705: LD_VAR 0 4
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 3
55718: PUSH
55719: LD_INT 21
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: PPUSH
55738: CALL_OW 69
55742: ST_TO_ADDR
// if not tmp then
55743: LD_VAR 0 8
55747: NOT
55748: IFFALSE 55752
// exit ;
55750: GO 57306
// for i in tmp do
55752: LD_ADDR_VAR 0 6
55756: PUSH
55757: LD_VAR 0 8
55761: PUSH
55762: FOR_IN
55763: IFFALSE 57281
// begin points := [ 0 , 0 , 0 ] ;
55765: LD_ADDR_VAR 0 9
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: ST_TO_ADDR
// bpoints := 1 ;
55784: LD_ADDR_VAR 0 10
55788: PUSH
55789: LD_INT 1
55791: ST_TO_ADDR
// case GetType ( i ) of unit_human :
55792: LD_VAR 0 6
55796: PPUSH
55797: CALL_OW 247
55801: PUSH
55802: LD_INT 1
55804: DOUBLE
55805: EQUAL
55806: IFTRUE 55810
55808: GO 56388
55810: POP
// begin if GetClass ( i ) = 1 then
55811: LD_VAR 0 6
55815: PPUSH
55816: CALL_OW 257
55820: PUSH
55821: LD_INT 1
55823: EQUAL
55824: IFFALSE 55845
// points := [ 10 , 5 , 3 ] ;
55826: LD_ADDR_VAR 0 9
55830: PUSH
55831: LD_INT 10
55833: PUSH
55834: LD_INT 5
55836: PUSH
55837: LD_INT 3
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
55845: LD_VAR 0 6
55849: PPUSH
55850: CALL_OW 257
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 3
55860: PUSH
55861: LD_INT 4
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: LIST
55868: IN
55869: IFFALSE 55890
// points := [ 3 , 2 , 1 ] ;
55871: LD_ADDR_VAR 0 9
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: EMPTY
55886: LIST
55887: LIST
55888: LIST
55889: ST_TO_ADDR
// if GetClass ( i ) = 5 then
55890: LD_VAR 0 6
55894: PPUSH
55895: CALL_OW 257
55899: PUSH
55900: LD_INT 5
55902: EQUAL
55903: IFFALSE 55924
// points := [ 130 , 5 , 2 ] ;
55905: LD_ADDR_VAR 0 9
55909: PUSH
55910: LD_INT 130
55912: PUSH
55913: LD_INT 5
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: ST_TO_ADDR
// if GetClass ( i ) = 8 then
55924: LD_VAR 0 6
55928: PPUSH
55929: CALL_OW 257
55933: PUSH
55934: LD_INT 8
55936: EQUAL
55937: IFFALSE 55958
// points := [ 35 , 35 , 30 ] ;
55939: LD_ADDR_VAR 0 9
55943: PUSH
55944: LD_INT 35
55946: PUSH
55947: LD_INT 35
55949: PUSH
55950: LD_INT 30
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: LIST
55957: ST_TO_ADDR
// if GetClass ( i ) = 9 then
55958: LD_VAR 0 6
55962: PPUSH
55963: CALL_OW 257
55967: PUSH
55968: LD_INT 9
55970: EQUAL
55971: IFFALSE 55992
// points := [ 20 , 55 , 40 ] ;
55973: LD_ADDR_VAR 0 9
55977: PUSH
55978: LD_INT 20
55980: PUSH
55981: LD_INT 55
55983: PUSH
55984: LD_INT 40
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: LIST
55991: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
55992: LD_VAR 0 6
55996: PPUSH
55997: CALL_OW 257
56001: PUSH
56002: LD_INT 12
56004: PUSH
56005: LD_INT 16
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: IN
56012: IFFALSE 56033
// points := [ 5 , 3 , 2 ] ;
56014: LD_ADDR_VAR 0 9
56018: PUSH
56019: LD_INT 5
56021: PUSH
56022: LD_INT 3
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: LIST
56032: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56033: LD_VAR 0 6
56037: PPUSH
56038: CALL_OW 257
56042: PUSH
56043: LD_INT 17
56045: EQUAL
56046: IFFALSE 56067
// points := [ 100 , 50 , 75 ] ;
56048: LD_ADDR_VAR 0 9
56052: PUSH
56053: LD_INT 100
56055: PUSH
56056: LD_INT 50
56058: PUSH
56059: LD_INT 75
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56067: LD_VAR 0 6
56071: PPUSH
56072: CALL_OW 257
56076: PUSH
56077: LD_INT 15
56079: EQUAL
56080: IFFALSE 56101
// points := [ 10 , 5 , 3 ] ;
56082: LD_ADDR_VAR 0 9
56086: PUSH
56087: LD_INT 10
56089: PUSH
56090: LD_INT 5
56092: PUSH
56093: LD_INT 3
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: LIST
56100: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56101: LD_VAR 0 6
56105: PPUSH
56106: CALL_OW 257
56110: PUSH
56111: LD_INT 14
56113: EQUAL
56114: IFFALSE 56135
// points := [ 10 , 0 , 0 ] ;
56116: LD_ADDR_VAR 0 9
56120: PUSH
56121: LD_INT 10
56123: PUSH
56124: LD_INT 0
56126: PUSH
56127: LD_INT 0
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: LIST
56134: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56135: LD_VAR 0 6
56139: PPUSH
56140: CALL_OW 257
56144: PUSH
56145: LD_INT 11
56147: EQUAL
56148: IFFALSE 56169
// points := [ 30 , 10 , 5 ] ;
56150: LD_ADDR_VAR 0 9
56154: PUSH
56155: LD_INT 30
56157: PUSH
56158: LD_INT 10
56160: PUSH
56161: LD_INT 5
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56169: LD_VAR 0 1
56173: PPUSH
56174: LD_INT 5
56176: PPUSH
56177: CALL_OW 321
56181: PUSH
56182: LD_INT 2
56184: EQUAL
56185: IFFALSE 56202
// bpoints := bpoints * 1.8 ;
56187: LD_ADDR_VAR 0 10
56191: PUSH
56192: LD_VAR 0 10
56196: PUSH
56197: LD_REAL  1.80000000000000E+0000
56200: MUL
56201: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56202: LD_VAR 0 6
56206: PPUSH
56207: CALL_OW 257
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: LD_INT 3
56220: PUSH
56221: LD_INT 4
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: IN
56230: PUSH
56231: LD_VAR 0 1
56235: PPUSH
56236: LD_INT 51
56238: PPUSH
56239: CALL_OW 321
56243: PUSH
56244: LD_INT 2
56246: EQUAL
56247: AND
56248: IFFALSE 56265
// bpoints := bpoints * 1.2 ;
56250: LD_ADDR_VAR 0 10
56254: PUSH
56255: LD_VAR 0 10
56259: PUSH
56260: LD_REAL  1.20000000000000E+0000
56263: MUL
56264: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56265: LD_VAR 0 6
56269: PPUSH
56270: CALL_OW 257
56274: PUSH
56275: LD_INT 5
56277: PUSH
56278: LD_INT 7
56280: PUSH
56281: LD_INT 9
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: LIST
56288: IN
56289: PUSH
56290: LD_VAR 0 1
56294: PPUSH
56295: LD_INT 52
56297: PPUSH
56298: CALL_OW 321
56302: PUSH
56303: LD_INT 2
56305: EQUAL
56306: AND
56307: IFFALSE 56324
// bpoints := bpoints * 1.5 ;
56309: LD_ADDR_VAR 0 10
56313: PUSH
56314: LD_VAR 0 10
56318: PUSH
56319: LD_REAL  1.50000000000000E+0000
56322: MUL
56323: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56324: LD_VAR 0 1
56328: PPUSH
56329: LD_INT 66
56331: PPUSH
56332: CALL_OW 321
56336: PUSH
56337: LD_INT 2
56339: EQUAL
56340: IFFALSE 56357
// bpoints := bpoints * 1.1 ;
56342: LD_ADDR_VAR 0 10
56346: PUSH
56347: LD_VAR 0 10
56351: PUSH
56352: LD_REAL  1.10000000000000E+0000
56355: MUL
56356: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56357: LD_ADDR_VAR 0 10
56361: PUSH
56362: LD_VAR 0 10
56366: PUSH
56367: LD_VAR 0 6
56371: PPUSH
56372: LD_INT 1
56374: PPUSH
56375: CALL_OW 259
56379: PUSH
56380: LD_REAL  1.15000000000000E+0000
56383: MUL
56384: MUL
56385: ST_TO_ADDR
// end ; unit_vehicle :
56386: GO 57210
56388: LD_INT 2
56390: DOUBLE
56391: EQUAL
56392: IFTRUE 56396
56394: GO 57198
56396: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56397: LD_VAR 0 6
56401: PPUSH
56402: CALL_OW 264
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: LD_INT 42
56412: PUSH
56413: LD_INT 24
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: IN
56421: IFFALSE 56442
// points := [ 25 , 5 , 3 ] ;
56423: LD_ADDR_VAR 0 9
56427: PUSH
56428: LD_INT 25
56430: PUSH
56431: LD_INT 5
56433: PUSH
56434: LD_INT 3
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56442: LD_VAR 0 6
56446: PPUSH
56447: CALL_OW 264
56451: PUSH
56452: LD_INT 4
56454: PUSH
56455: LD_INT 43
56457: PUSH
56458: LD_INT 25
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: IN
56466: IFFALSE 56487
// points := [ 40 , 15 , 5 ] ;
56468: LD_ADDR_VAR 0 9
56472: PUSH
56473: LD_INT 40
56475: PUSH
56476: LD_INT 15
56478: PUSH
56479: LD_INT 5
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56487: LD_VAR 0 6
56491: PPUSH
56492: CALL_OW 264
56496: PUSH
56497: LD_INT 3
56499: PUSH
56500: LD_INT 23
56502: PUSH
56503: EMPTY
56504: LIST
56505: LIST
56506: IN
56507: IFFALSE 56528
// points := [ 7 , 25 , 8 ] ;
56509: LD_ADDR_VAR 0 9
56513: PUSH
56514: LD_INT 7
56516: PUSH
56517: LD_INT 25
56519: PUSH
56520: LD_INT 8
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56528: LD_VAR 0 6
56532: PPUSH
56533: CALL_OW 264
56537: PUSH
56538: LD_INT 5
56540: PUSH
56541: LD_INT 27
56543: PUSH
56544: LD_INT 44
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: LIST
56551: IN
56552: IFFALSE 56573
// points := [ 14 , 50 , 16 ] ;
56554: LD_ADDR_VAR 0 9
56558: PUSH
56559: LD_INT 14
56561: PUSH
56562: LD_INT 50
56564: PUSH
56565: LD_INT 16
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: LIST
56572: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56573: LD_VAR 0 6
56577: PPUSH
56578: CALL_OW 264
56582: PUSH
56583: LD_INT 6
56585: PUSH
56586: LD_INT 46
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: IN
56593: IFFALSE 56614
// points := [ 32 , 120 , 70 ] ;
56595: LD_ADDR_VAR 0 9
56599: PUSH
56600: LD_INT 32
56602: PUSH
56603: LD_INT 120
56605: PUSH
56606: LD_INT 70
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: LIST
56613: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
56614: LD_VAR 0 6
56618: PPUSH
56619: CALL_OW 264
56623: PUSH
56624: LD_INT 7
56626: PUSH
56627: LD_INT 28
56629: PUSH
56630: LD_INT 45
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: LIST
56637: IN
56638: IFFALSE 56659
// points := [ 35 , 20 , 45 ] ;
56640: LD_ADDR_VAR 0 9
56644: PUSH
56645: LD_INT 35
56647: PUSH
56648: LD_INT 20
56650: PUSH
56651: LD_INT 45
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
56659: LD_VAR 0 6
56663: PPUSH
56664: CALL_OW 264
56668: PUSH
56669: LD_INT 47
56671: PUSH
56672: EMPTY
56673: LIST
56674: IN
56675: IFFALSE 56696
// points := [ 67 , 45 , 75 ] ;
56677: LD_ADDR_VAR 0 9
56681: PUSH
56682: LD_INT 67
56684: PUSH
56685: LD_INT 45
56687: PUSH
56688: LD_INT 75
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
56696: LD_VAR 0 6
56700: PPUSH
56701: CALL_OW 264
56705: PUSH
56706: LD_INT 26
56708: PUSH
56709: EMPTY
56710: LIST
56711: IN
56712: IFFALSE 56733
// points := [ 120 , 30 , 80 ] ;
56714: LD_ADDR_VAR 0 9
56718: PUSH
56719: LD_INT 120
56721: PUSH
56722: LD_INT 30
56724: PUSH
56725: LD_INT 80
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: LIST
56732: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
56733: LD_VAR 0 6
56737: PPUSH
56738: CALL_OW 264
56742: PUSH
56743: LD_INT 22
56745: PUSH
56746: EMPTY
56747: LIST
56748: IN
56749: IFFALSE 56770
// points := [ 40 , 1 , 1 ] ;
56751: LD_ADDR_VAR 0 9
56755: PUSH
56756: LD_INT 40
56758: PUSH
56759: LD_INT 1
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: LIST
56769: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
56770: LD_VAR 0 6
56774: PPUSH
56775: CALL_OW 264
56779: PUSH
56780: LD_INT 29
56782: PUSH
56783: EMPTY
56784: LIST
56785: IN
56786: IFFALSE 56807
// points := [ 70 , 200 , 400 ] ;
56788: LD_ADDR_VAR 0 9
56792: PUSH
56793: LD_INT 70
56795: PUSH
56796: LD_INT 200
56798: PUSH
56799: LD_INT 400
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: LIST
56806: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
56807: LD_VAR 0 6
56811: PPUSH
56812: CALL_OW 264
56816: PUSH
56817: LD_INT 14
56819: PUSH
56820: LD_INT 53
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: IN
56827: IFFALSE 56848
// points := [ 40 , 10 , 20 ] ;
56829: LD_ADDR_VAR 0 9
56833: PUSH
56834: LD_INT 40
56836: PUSH
56837: LD_INT 10
56839: PUSH
56840: LD_INT 20
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
56848: LD_VAR 0 6
56852: PPUSH
56853: CALL_OW 264
56857: PUSH
56858: LD_INT 9
56860: PUSH
56861: EMPTY
56862: LIST
56863: IN
56864: IFFALSE 56885
// points := [ 5 , 70 , 20 ] ;
56866: LD_ADDR_VAR 0 9
56870: PUSH
56871: LD_INT 5
56873: PUSH
56874: LD_INT 70
56876: PUSH
56877: LD_INT 20
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: LIST
56884: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
56885: LD_VAR 0 6
56889: PPUSH
56890: CALL_OW 264
56894: PUSH
56895: LD_INT 10
56897: PUSH
56898: EMPTY
56899: LIST
56900: IN
56901: IFFALSE 56922
// points := [ 35 , 110 , 70 ] ;
56903: LD_ADDR_VAR 0 9
56907: PUSH
56908: LD_INT 35
56910: PUSH
56911: LD_INT 110
56913: PUSH
56914: LD_INT 70
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: LIST
56921: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
56922: LD_VAR 0 6
56926: PPUSH
56927: CALL_OW 265
56931: PUSH
56932: LD_INT 25
56934: EQUAL
56935: IFFALSE 56956
// points := [ 80 , 65 , 100 ] ;
56937: LD_ADDR_VAR 0 9
56941: PUSH
56942: LD_INT 80
56944: PUSH
56945: LD_INT 65
56947: PUSH
56948: LD_INT 100
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
56956: LD_VAR 0 6
56960: PPUSH
56961: CALL_OW 263
56965: PUSH
56966: LD_INT 1
56968: EQUAL
56969: IFFALSE 57004
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
56971: LD_ADDR_VAR 0 10
56975: PUSH
56976: LD_VAR 0 10
56980: PUSH
56981: LD_VAR 0 6
56985: PPUSH
56986: CALL_OW 311
56990: PPUSH
56991: LD_INT 3
56993: PPUSH
56994: CALL_OW 259
56998: PUSH
56999: LD_INT 4
57001: MUL
57002: MUL
57003: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57004: LD_VAR 0 6
57008: PPUSH
57009: CALL_OW 263
57013: PUSH
57014: LD_INT 2
57016: EQUAL
57017: IFFALSE 57068
// begin j := IsControledBy ( i ) ;
57019: LD_ADDR_VAR 0 7
57023: PUSH
57024: LD_VAR 0 6
57028: PPUSH
57029: CALL_OW 312
57033: ST_TO_ADDR
// if j then
57034: LD_VAR 0 7
57038: IFFALSE 57068
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57040: LD_ADDR_VAR 0 10
57044: PUSH
57045: LD_VAR 0 10
57049: PUSH
57050: LD_VAR 0 7
57054: PPUSH
57055: LD_INT 3
57057: PPUSH
57058: CALL_OW 259
57062: PUSH
57063: LD_INT 3
57065: MUL
57066: MUL
57067: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57068: LD_VAR 0 6
57072: PPUSH
57073: CALL_OW 264
57077: PUSH
57078: LD_INT 5
57080: PUSH
57081: LD_INT 6
57083: PUSH
57084: LD_INT 46
57086: PUSH
57087: LD_INT 44
57089: PUSH
57090: LD_INT 47
57092: PUSH
57093: LD_INT 45
57095: PUSH
57096: LD_INT 28
57098: PUSH
57099: LD_INT 7
57101: PUSH
57102: LD_INT 27
57104: PUSH
57105: LD_INT 29
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: IN
57120: PUSH
57121: LD_VAR 0 1
57125: PPUSH
57126: LD_INT 52
57128: PPUSH
57129: CALL_OW 321
57133: PUSH
57134: LD_INT 2
57136: EQUAL
57137: AND
57138: IFFALSE 57155
// bpoints := bpoints * 1.2 ;
57140: LD_ADDR_VAR 0 10
57144: PUSH
57145: LD_VAR 0 10
57149: PUSH
57150: LD_REAL  1.20000000000000E+0000
57153: MUL
57154: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57155: LD_VAR 0 6
57159: PPUSH
57160: CALL_OW 264
57164: PUSH
57165: LD_INT 6
57167: PUSH
57168: LD_INT 46
57170: PUSH
57171: LD_INT 47
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: LIST
57178: IN
57179: IFFALSE 57196
// bpoints := bpoints * 1.2 ;
57181: LD_ADDR_VAR 0 10
57185: PUSH
57186: LD_VAR 0 10
57190: PUSH
57191: LD_REAL  1.20000000000000E+0000
57194: MUL
57195: ST_TO_ADDR
// end ; unit_building :
57196: GO 57210
57198: LD_INT 3
57200: DOUBLE
57201: EQUAL
57202: IFTRUE 57206
57204: GO 57209
57206: POP
// ; end ;
57207: GO 57210
57209: POP
// for j = 1 to 3 do
57210: LD_ADDR_VAR 0 7
57214: PUSH
57215: DOUBLE
57216: LD_INT 1
57218: DEC
57219: ST_TO_ADDR
57220: LD_INT 3
57222: PUSH
57223: FOR_TO
57224: IFFALSE 57277
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57226: LD_ADDR_VAR 0 5
57230: PUSH
57231: LD_VAR 0 5
57235: PPUSH
57236: LD_VAR 0 7
57240: PPUSH
57241: LD_VAR 0 5
57245: PUSH
57246: LD_VAR 0 7
57250: ARRAY
57251: PUSH
57252: LD_VAR 0 9
57256: PUSH
57257: LD_VAR 0 7
57261: ARRAY
57262: PUSH
57263: LD_VAR 0 10
57267: MUL
57268: PLUS
57269: PPUSH
57270: CALL_OW 1
57274: ST_TO_ADDR
57275: GO 57223
57277: POP
57278: POP
// end ;
57279: GO 55762
57281: POP
57282: POP
// result := Replace ( result , 4 , tmp ) ;
57283: LD_ADDR_VAR 0 5
57287: PUSH
57288: LD_VAR 0 5
57292: PPUSH
57293: LD_INT 4
57295: PPUSH
57296: LD_VAR 0 8
57300: PPUSH
57301: CALL_OW 1
57305: ST_TO_ADDR
// end ;
57306: LD_VAR 0 5
57310: RET
// export function DangerAtRange ( unit , range ) ; begin
57311: LD_INT 0
57313: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57314: LD_ADDR_VAR 0 3
57318: PUSH
57319: LD_VAR 0 1
57323: PPUSH
57324: CALL_OW 255
57328: PPUSH
57329: LD_VAR 0 1
57333: PPUSH
57334: CALL_OW 250
57338: PPUSH
57339: LD_VAR 0 1
57343: PPUSH
57344: CALL_OW 251
57348: PPUSH
57349: LD_VAR 0 2
57353: PPUSH
57354: CALL 55614 0 4
57358: ST_TO_ADDR
// end ;
57359: LD_VAR 0 3
57363: RET
// export function DangerInArea ( side , area ) ; begin
57364: LD_INT 0
57366: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57367: LD_ADDR_VAR 0 3
57371: PUSH
57372: LD_VAR 0 2
57376: PPUSH
57377: LD_INT 81
57379: PUSH
57380: LD_VAR 0 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PPUSH
57389: CALL_OW 70
57393: ST_TO_ADDR
// end ;
57394: LD_VAR 0 3
57398: RET
// export function IsExtension ( b ) ; begin
57399: LD_INT 0
57401: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57402: LD_ADDR_VAR 0 2
57406: PUSH
57407: LD_VAR 0 1
57411: PUSH
57412: LD_INT 23
57414: PUSH
57415: LD_INT 20
57417: PUSH
57418: LD_INT 22
57420: PUSH
57421: LD_INT 17
57423: PUSH
57424: LD_INT 24
57426: PUSH
57427: LD_INT 21
57429: PUSH
57430: LD_INT 19
57432: PUSH
57433: LD_INT 16
57435: PUSH
57436: LD_INT 25
57438: PUSH
57439: LD_INT 18
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: IN
57454: ST_TO_ADDR
// end ;
57455: LD_VAR 0 2
57459: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
57460: LD_INT 0
57462: PPUSH
57463: PPUSH
57464: PPUSH
// result := [ ] ;
57465: LD_ADDR_VAR 0 3
57469: PUSH
57470: EMPTY
57471: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57472: LD_ADDR_VAR 0 4
57476: PUSH
57477: LD_VAR 0 2
57481: PPUSH
57482: LD_INT 21
57484: PUSH
57485: LD_INT 3
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PPUSH
57492: CALL_OW 70
57496: ST_TO_ADDR
// if not tmp then
57497: LD_VAR 0 4
57501: NOT
57502: IFFALSE 57506
// exit ;
57504: GO 57564
// for i in tmp do
57506: LD_ADDR_VAR 0 5
57510: PUSH
57511: LD_VAR 0 4
57515: PUSH
57516: FOR_IN
57517: IFFALSE 57552
// if GetBase ( i ) <> base then
57519: LD_VAR 0 5
57523: PPUSH
57524: CALL_OW 274
57528: PUSH
57529: LD_VAR 0 1
57533: NONEQUAL
57534: IFFALSE 57550
// ComLinkToBase ( base , i ) ;
57536: LD_VAR 0 1
57540: PPUSH
57541: LD_VAR 0 5
57545: PPUSH
57546: CALL_OW 169
57550: GO 57516
57552: POP
57553: POP
// result := tmp ;
57554: LD_ADDR_VAR 0 3
57558: PUSH
57559: LD_VAR 0 4
57563: ST_TO_ADDR
// end ;
57564: LD_VAR 0 3
57568: RET
// export function ComComplete ( unit , b ) ; var i ; begin
57569: LD_INT 0
57571: PPUSH
57572: PPUSH
// if BuildingStatus ( b ) = bs_build then
57573: LD_VAR 0 2
57577: PPUSH
57578: CALL_OW 461
57582: PUSH
57583: LD_INT 1
57585: EQUAL
57586: IFFALSE 57646
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57588: LD_VAR 0 1
57592: PPUSH
57593: LD_STRING h
57595: PUSH
57596: LD_VAR 0 2
57600: PPUSH
57601: CALL_OW 250
57605: PUSH
57606: LD_VAR 0 2
57610: PPUSH
57611: CALL_OW 251
57615: PUSH
57616: LD_VAR 0 2
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: PPUSH
57642: CALL_OW 446
// end ;
57646: LD_VAR 0 3
57650: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
57651: LD_INT 0
57653: PPUSH
57654: PPUSH
57655: PPUSH
57656: PPUSH
57657: PPUSH
57658: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
57659: LD_VAR 0 1
57663: NOT
57664: PUSH
57665: LD_VAR 0 1
57669: PPUSH
57670: CALL_OW 263
57674: PUSH
57675: LD_INT 2
57677: EQUAL
57678: NOT
57679: OR
57680: IFFALSE 57684
// exit ;
57682: GO 58000
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
57684: LD_ADDR_VAR 0 6
57688: PUSH
57689: LD_INT 22
57691: PUSH
57692: LD_VAR 0 1
57696: PPUSH
57697: CALL_OW 255
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 2
57708: PUSH
57709: LD_INT 30
57711: PUSH
57712: LD_INT 36
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: PUSH
57719: LD_INT 34
57721: PUSH
57722: LD_INT 31
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PPUSH
57738: CALL_OW 69
57742: ST_TO_ADDR
// if not tmp then
57743: LD_VAR 0 6
57747: NOT
57748: IFFALSE 57752
// exit ;
57750: GO 58000
// result := [ ] ;
57752: LD_ADDR_VAR 0 2
57756: PUSH
57757: EMPTY
57758: ST_TO_ADDR
// for i in tmp do
57759: LD_ADDR_VAR 0 3
57763: PUSH
57764: LD_VAR 0 6
57768: PUSH
57769: FOR_IN
57770: IFFALSE 57841
// begin t := UnitsInside ( i ) ;
57772: LD_ADDR_VAR 0 4
57776: PUSH
57777: LD_VAR 0 3
57781: PPUSH
57782: CALL_OW 313
57786: ST_TO_ADDR
// if t then
57787: LD_VAR 0 4
57791: IFFALSE 57839
// for j in t do
57793: LD_ADDR_VAR 0 7
57797: PUSH
57798: LD_VAR 0 4
57802: PUSH
57803: FOR_IN
57804: IFFALSE 57837
// result := Insert ( result , result + 1 , j ) ;
57806: LD_ADDR_VAR 0 2
57810: PUSH
57811: LD_VAR 0 2
57815: PPUSH
57816: LD_VAR 0 2
57820: PUSH
57821: LD_INT 1
57823: PLUS
57824: PPUSH
57825: LD_VAR 0 7
57829: PPUSH
57830: CALL_OW 2
57834: ST_TO_ADDR
57835: GO 57803
57837: POP
57838: POP
// end ;
57839: GO 57769
57841: POP
57842: POP
// if not result then
57843: LD_VAR 0 2
57847: NOT
57848: IFFALSE 57852
// exit ;
57850: GO 58000
// mech := result [ 1 ] ;
57852: LD_ADDR_VAR 0 5
57856: PUSH
57857: LD_VAR 0 2
57861: PUSH
57862: LD_INT 1
57864: ARRAY
57865: ST_TO_ADDR
// if result > 1 then
57866: LD_VAR 0 2
57870: PUSH
57871: LD_INT 1
57873: GREATER
57874: IFFALSE 57986
// for i = 2 to result do
57876: LD_ADDR_VAR 0 3
57880: PUSH
57881: DOUBLE
57882: LD_INT 2
57884: DEC
57885: ST_TO_ADDR
57886: LD_VAR 0 2
57890: PUSH
57891: FOR_TO
57892: IFFALSE 57984
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
57894: LD_ADDR_VAR 0 4
57898: PUSH
57899: LD_VAR 0 2
57903: PUSH
57904: LD_VAR 0 3
57908: ARRAY
57909: PPUSH
57910: LD_INT 3
57912: PPUSH
57913: CALL_OW 259
57917: PUSH
57918: LD_VAR 0 2
57922: PUSH
57923: LD_VAR 0 3
57927: ARRAY
57928: PPUSH
57929: CALL_OW 432
57933: MINUS
57934: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57935: LD_VAR 0 4
57939: PUSH
57940: LD_VAR 0 5
57944: PPUSH
57945: LD_INT 3
57947: PPUSH
57948: CALL_OW 259
57952: PUSH
57953: LD_VAR 0 5
57957: PPUSH
57958: CALL_OW 432
57962: MINUS
57963: GREATEREQUAL
57964: IFFALSE 57982
// mech := result [ i ] ;
57966: LD_ADDR_VAR 0 5
57970: PUSH
57971: LD_VAR 0 2
57975: PUSH
57976: LD_VAR 0 3
57980: ARRAY
57981: ST_TO_ADDR
// end ;
57982: GO 57891
57984: POP
57985: POP
// ComLinkTo ( vehicle , mech ) ;
57986: LD_VAR 0 1
57990: PPUSH
57991: LD_VAR 0 5
57995: PPUSH
57996: CALL_OW 135
// end ;
58000: LD_VAR 0 2
58004: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58005: LD_INT 0
58007: PPUSH
58008: PPUSH
58009: PPUSH
58010: PPUSH
58011: PPUSH
58012: PPUSH
58013: PPUSH
58014: PPUSH
58015: PPUSH
58016: PPUSH
58017: PPUSH
58018: PPUSH
58019: PPUSH
// result := [ ] ;
58020: LD_ADDR_VAR 0 7
58024: PUSH
58025: EMPTY
58026: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58027: LD_VAR 0 1
58031: PPUSH
58032: CALL_OW 266
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: IN
58047: NOT
58048: IFFALSE 58052
// exit ;
58050: GO 59683
// if name then
58052: LD_VAR 0 3
58056: IFFALSE 58072
// SetBName ( base_dep , name ) ;
58058: LD_VAR 0 1
58062: PPUSH
58063: LD_VAR 0 3
58067: PPUSH
58068: CALL_OW 500
// base := GetBase ( base_dep ) ;
58072: LD_ADDR_VAR 0 15
58076: PUSH
58077: LD_VAR 0 1
58081: PPUSH
58082: CALL_OW 274
58086: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58087: LD_ADDR_VAR 0 16
58091: PUSH
58092: LD_VAR 0 1
58096: PPUSH
58097: CALL_OW 255
58101: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58102: LD_ADDR_VAR 0 17
58106: PUSH
58107: LD_VAR 0 1
58111: PPUSH
58112: CALL_OW 248
58116: ST_TO_ADDR
// if sources then
58117: LD_VAR 0 5
58121: IFFALSE 58168
// for i = 1 to 3 do
58123: LD_ADDR_VAR 0 8
58127: PUSH
58128: DOUBLE
58129: LD_INT 1
58131: DEC
58132: ST_TO_ADDR
58133: LD_INT 3
58135: PUSH
58136: FOR_TO
58137: IFFALSE 58166
// AddResourceType ( base , i , sources [ i ] ) ;
58139: LD_VAR 0 15
58143: PPUSH
58144: LD_VAR 0 8
58148: PPUSH
58149: LD_VAR 0 5
58153: PUSH
58154: LD_VAR 0 8
58158: ARRAY
58159: PPUSH
58160: CALL_OW 276
58164: GO 58136
58166: POP
58167: POP
// buildings := GetBaseBuildings ( base , area ) ;
58168: LD_ADDR_VAR 0 18
58172: PUSH
58173: LD_VAR 0 15
58177: PPUSH
58178: LD_VAR 0 2
58182: PPUSH
58183: CALL 57460 0 2
58187: ST_TO_ADDR
// InitHc ;
58188: CALL_OW 19
// InitUc ;
58192: CALL_OW 18
// uc_side := side ;
58196: LD_ADDR_OWVAR 20
58200: PUSH
58201: LD_VAR 0 16
58205: ST_TO_ADDR
// uc_nation := nation ;
58206: LD_ADDR_OWVAR 21
58210: PUSH
58211: LD_VAR 0 17
58215: ST_TO_ADDR
// if buildings then
58216: LD_VAR 0 18
58220: IFFALSE 59542
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58222: LD_ADDR_VAR 0 19
58226: PUSH
58227: LD_VAR 0 18
58231: PPUSH
58232: LD_INT 2
58234: PUSH
58235: LD_INT 30
58237: PUSH
58238: LD_INT 29
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 30
58247: PUSH
58248: LD_INT 30
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: EMPTY
58256: LIST
58257: LIST
58258: LIST
58259: PPUSH
58260: CALL_OW 72
58264: ST_TO_ADDR
// if tmp then
58265: LD_VAR 0 19
58269: IFFALSE 58317
// for i in tmp do
58271: LD_ADDR_VAR 0 8
58275: PUSH
58276: LD_VAR 0 19
58280: PUSH
58281: FOR_IN
58282: IFFALSE 58315
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58284: LD_VAR 0 8
58288: PPUSH
58289: CALL_OW 250
58293: PPUSH
58294: LD_VAR 0 8
58298: PPUSH
58299: CALL_OW 251
58303: PPUSH
58304: LD_VAR 0 16
58308: PPUSH
58309: CALL_OW 441
58313: GO 58281
58315: POP
58316: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58317: LD_VAR 0 18
58321: PPUSH
58322: LD_INT 2
58324: PUSH
58325: LD_INT 30
58327: PUSH
58328: LD_INT 32
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 30
58337: PUSH
58338: LD_INT 33
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: LIST
58349: PPUSH
58350: CALL_OW 72
58354: IFFALSE 58442
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58356: LD_ADDR_VAR 0 8
58360: PUSH
58361: LD_VAR 0 18
58365: PPUSH
58366: LD_INT 2
58368: PUSH
58369: LD_INT 30
58371: PUSH
58372: LD_INT 32
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 30
58381: PUSH
58382: LD_INT 33
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: LIST
58393: PPUSH
58394: CALL_OW 72
58398: PUSH
58399: FOR_IN
58400: IFFALSE 58440
// begin if not GetBWeapon ( i ) then
58402: LD_VAR 0 8
58406: PPUSH
58407: CALL_OW 269
58411: NOT
58412: IFFALSE 58438
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58414: LD_VAR 0 8
58418: PPUSH
58419: LD_VAR 0 8
58423: PPUSH
58424: LD_VAR 0 2
58428: PPUSH
58429: CALL 59688 0 2
58433: PPUSH
58434: CALL_OW 431
// end ;
58438: GO 58399
58440: POP
58441: POP
// end ; for i = 1 to personel do
58442: LD_ADDR_VAR 0 8
58446: PUSH
58447: DOUBLE
58448: LD_INT 1
58450: DEC
58451: ST_TO_ADDR
58452: LD_VAR 0 6
58456: PUSH
58457: FOR_TO
58458: IFFALSE 59522
// begin if i > 4 then
58460: LD_VAR 0 8
58464: PUSH
58465: LD_INT 4
58467: GREATER
58468: IFFALSE 58472
// break ;
58470: GO 59522
// case i of 1 :
58472: LD_VAR 0 8
58476: PUSH
58477: LD_INT 1
58479: DOUBLE
58480: EQUAL
58481: IFTRUE 58485
58483: GO 58565
58485: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58486: LD_ADDR_VAR 0 12
58490: PUSH
58491: LD_VAR 0 18
58495: PPUSH
58496: LD_INT 22
58498: PUSH
58499: LD_VAR 0 16
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 58
58510: PUSH
58511: EMPTY
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: PUSH
58517: LD_INT 30
58519: PUSH
58520: LD_INT 32
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 30
58529: PUSH
58530: LD_INT 4
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 30
58539: PUSH
58540: LD_INT 5
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: PPUSH
58558: CALL_OW 72
58562: ST_TO_ADDR
58563: GO 58787
58565: LD_INT 2
58567: DOUBLE
58568: EQUAL
58569: IFTRUE 58573
58571: GO 58635
58573: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58574: LD_ADDR_VAR 0 12
58578: PUSH
58579: LD_VAR 0 18
58583: PPUSH
58584: LD_INT 22
58586: PUSH
58587: LD_VAR 0 16
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 30
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 30
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: EMPTY
58620: LIST
58621: LIST
58622: LIST
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PPUSH
58628: CALL_OW 72
58632: ST_TO_ADDR
58633: GO 58787
58635: LD_INT 3
58637: DOUBLE
58638: EQUAL
58639: IFTRUE 58643
58641: GO 58705
58643: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
58644: LD_ADDR_VAR 0 12
58648: PUSH
58649: LD_VAR 0 18
58653: PPUSH
58654: LD_INT 22
58656: PUSH
58657: LD_VAR 0 16
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 2
58668: PUSH
58669: LD_INT 30
58671: PUSH
58672: LD_INT 2
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 30
58681: PUSH
58682: LD_INT 3
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: EMPTY
58690: LIST
58691: LIST
58692: LIST
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PPUSH
58698: CALL_OW 72
58702: ST_TO_ADDR
58703: GO 58787
58705: LD_INT 4
58707: DOUBLE
58708: EQUAL
58709: IFTRUE 58713
58711: GO 58786
58713: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
58714: LD_ADDR_VAR 0 12
58718: PUSH
58719: LD_VAR 0 18
58723: PPUSH
58724: LD_INT 22
58726: PUSH
58727: LD_VAR 0 16
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 2
58738: PUSH
58739: LD_INT 30
58741: PUSH
58742: LD_INT 6
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 30
58751: PUSH
58752: LD_INT 7
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 30
58761: PUSH
58762: LD_INT 8
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PPUSH
58779: CALL_OW 72
58783: ST_TO_ADDR
58784: GO 58787
58786: POP
// if i = 1 then
58787: LD_VAR 0 8
58791: PUSH
58792: LD_INT 1
58794: EQUAL
58795: IFFALSE 58906
// begin tmp := [ ] ;
58797: LD_ADDR_VAR 0 19
58801: PUSH
58802: EMPTY
58803: ST_TO_ADDR
// for j in f do
58804: LD_ADDR_VAR 0 9
58808: PUSH
58809: LD_VAR 0 12
58813: PUSH
58814: FOR_IN
58815: IFFALSE 58888
// if GetBType ( j ) = b_bunker then
58817: LD_VAR 0 9
58821: PPUSH
58822: CALL_OW 266
58826: PUSH
58827: LD_INT 32
58829: EQUAL
58830: IFFALSE 58857
// tmp := Insert ( tmp , 1 , j ) else
58832: LD_ADDR_VAR 0 19
58836: PUSH
58837: LD_VAR 0 19
58841: PPUSH
58842: LD_INT 1
58844: PPUSH
58845: LD_VAR 0 9
58849: PPUSH
58850: CALL_OW 2
58854: ST_TO_ADDR
58855: GO 58886
// tmp := Insert ( tmp , tmp + 1 , j ) ;
58857: LD_ADDR_VAR 0 19
58861: PUSH
58862: LD_VAR 0 19
58866: PPUSH
58867: LD_VAR 0 19
58871: PUSH
58872: LD_INT 1
58874: PLUS
58875: PPUSH
58876: LD_VAR 0 9
58880: PPUSH
58881: CALL_OW 2
58885: ST_TO_ADDR
58886: GO 58814
58888: POP
58889: POP
// if tmp then
58890: LD_VAR 0 19
58894: IFFALSE 58906
// f := tmp ;
58896: LD_ADDR_VAR 0 12
58900: PUSH
58901: LD_VAR 0 19
58905: ST_TO_ADDR
// end ; x := personel [ i ] ;
58906: LD_ADDR_VAR 0 13
58910: PUSH
58911: LD_VAR 0 6
58915: PUSH
58916: LD_VAR 0 8
58920: ARRAY
58921: ST_TO_ADDR
// if x = - 1 then
58922: LD_VAR 0 13
58926: PUSH
58927: LD_INT 1
58929: NEG
58930: EQUAL
58931: IFFALSE 59140
// begin for j in f do
58933: LD_ADDR_VAR 0 9
58937: PUSH
58938: LD_VAR 0 12
58942: PUSH
58943: FOR_IN
58944: IFFALSE 59136
// repeat InitHc ;
58946: CALL_OW 19
// if GetBType ( j ) = b_barracks then
58950: LD_VAR 0 9
58954: PPUSH
58955: CALL_OW 266
58959: PUSH
58960: LD_INT 5
58962: EQUAL
58963: IFFALSE 59033
// begin if UnitsInside ( j ) < 3 then
58965: LD_VAR 0 9
58969: PPUSH
58970: CALL_OW 313
58974: PUSH
58975: LD_INT 3
58977: LESS
58978: IFFALSE 59014
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58980: LD_INT 0
58982: PPUSH
58983: LD_INT 5
58985: PUSH
58986: LD_INT 8
58988: PUSH
58989: LD_INT 9
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: LD_VAR 0 17
59001: ARRAY
59002: PPUSH
59003: LD_VAR 0 4
59007: PPUSH
59008: CALL_OW 380
59012: GO 59031
// PrepareHuman ( false , i , skill ) ;
59014: LD_INT 0
59016: PPUSH
59017: LD_VAR 0 8
59021: PPUSH
59022: LD_VAR 0 4
59026: PPUSH
59027: CALL_OW 380
// end else
59031: GO 59050
// PrepareHuman ( false , i , skill ) ;
59033: LD_INT 0
59035: PPUSH
59036: LD_VAR 0 8
59040: PPUSH
59041: LD_VAR 0 4
59045: PPUSH
59046: CALL_OW 380
// un := CreateHuman ;
59050: LD_ADDR_VAR 0 14
59054: PUSH
59055: CALL_OW 44
59059: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59060: LD_ADDR_VAR 0 7
59064: PUSH
59065: LD_VAR 0 7
59069: PPUSH
59070: LD_INT 1
59072: PPUSH
59073: LD_VAR 0 14
59077: PPUSH
59078: CALL_OW 2
59082: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59083: LD_VAR 0 14
59087: PPUSH
59088: LD_VAR 0 9
59092: PPUSH
59093: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59097: LD_VAR 0 9
59101: PPUSH
59102: CALL_OW 313
59106: PUSH
59107: LD_INT 6
59109: EQUAL
59110: PUSH
59111: LD_VAR 0 9
59115: PPUSH
59116: CALL_OW 266
59120: PUSH
59121: LD_INT 32
59123: PUSH
59124: LD_INT 31
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: IN
59131: OR
59132: IFFALSE 58946
59134: GO 58943
59136: POP
59137: POP
// end else
59138: GO 59520
// for j = 1 to x do
59140: LD_ADDR_VAR 0 9
59144: PUSH
59145: DOUBLE
59146: LD_INT 1
59148: DEC
59149: ST_TO_ADDR
59150: LD_VAR 0 13
59154: PUSH
59155: FOR_TO
59156: IFFALSE 59518
// begin InitHc ;
59158: CALL_OW 19
// if not f then
59162: LD_VAR 0 12
59166: NOT
59167: IFFALSE 59256
// begin PrepareHuman ( false , i , skill ) ;
59169: LD_INT 0
59171: PPUSH
59172: LD_VAR 0 8
59176: PPUSH
59177: LD_VAR 0 4
59181: PPUSH
59182: CALL_OW 380
// un := CreateHuman ;
59186: LD_ADDR_VAR 0 14
59190: PUSH
59191: CALL_OW 44
59195: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59196: LD_ADDR_VAR 0 7
59200: PUSH
59201: LD_VAR 0 7
59205: PPUSH
59206: LD_INT 1
59208: PPUSH
59209: LD_VAR 0 14
59213: PPUSH
59214: CALL_OW 2
59218: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59219: LD_VAR 0 14
59223: PPUSH
59224: LD_VAR 0 1
59228: PPUSH
59229: CALL_OW 250
59233: PPUSH
59234: LD_VAR 0 1
59238: PPUSH
59239: CALL_OW 251
59243: PPUSH
59244: LD_INT 10
59246: PPUSH
59247: LD_INT 0
59249: PPUSH
59250: CALL_OW 50
// continue ;
59254: GO 59155
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59256: LD_VAR 0 12
59260: PUSH
59261: LD_INT 1
59263: ARRAY
59264: PPUSH
59265: CALL_OW 313
59269: PUSH
59270: LD_VAR 0 12
59274: PUSH
59275: LD_INT 1
59277: ARRAY
59278: PPUSH
59279: CALL_OW 266
59283: PUSH
59284: LD_INT 32
59286: PUSH
59287: LD_INT 31
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: IN
59294: AND
59295: PUSH
59296: LD_VAR 0 12
59300: PUSH
59301: LD_INT 1
59303: ARRAY
59304: PPUSH
59305: CALL_OW 313
59309: PUSH
59310: LD_INT 6
59312: EQUAL
59313: OR
59314: IFFALSE 59334
// f := Delete ( f , 1 ) ;
59316: LD_ADDR_VAR 0 12
59320: PUSH
59321: LD_VAR 0 12
59325: PPUSH
59326: LD_INT 1
59328: PPUSH
59329: CALL_OW 3
59333: ST_TO_ADDR
// if not f then
59334: LD_VAR 0 12
59338: NOT
59339: IFFALSE 59357
// begin x := x + 2 ;
59341: LD_ADDR_VAR 0 13
59345: PUSH
59346: LD_VAR 0 13
59350: PUSH
59351: LD_INT 2
59353: PLUS
59354: ST_TO_ADDR
// continue ;
59355: GO 59155
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59357: LD_VAR 0 12
59361: PUSH
59362: LD_INT 1
59364: ARRAY
59365: PPUSH
59366: CALL_OW 266
59370: PUSH
59371: LD_INT 5
59373: EQUAL
59374: IFFALSE 59448
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59376: LD_VAR 0 12
59380: PUSH
59381: LD_INT 1
59383: ARRAY
59384: PPUSH
59385: CALL_OW 313
59389: PUSH
59390: LD_INT 3
59392: LESS
59393: IFFALSE 59429
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59395: LD_INT 0
59397: PPUSH
59398: LD_INT 5
59400: PUSH
59401: LD_INT 8
59403: PUSH
59404: LD_INT 9
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: LIST
59411: PUSH
59412: LD_VAR 0 17
59416: ARRAY
59417: PPUSH
59418: LD_VAR 0 4
59422: PPUSH
59423: CALL_OW 380
59427: GO 59446
// PrepareHuman ( false , i , skill ) ;
59429: LD_INT 0
59431: PPUSH
59432: LD_VAR 0 8
59436: PPUSH
59437: LD_VAR 0 4
59441: PPUSH
59442: CALL_OW 380
// end else
59446: GO 59465
// PrepareHuman ( false , i , skill ) ;
59448: LD_INT 0
59450: PPUSH
59451: LD_VAR 0 8
59455: PPUSH
59456: LD_VAR 0 4
59460: PPUSH
59461: CALL_OW 380
// un := CreateHuman ;
59465: LD_ADDR_VAR 0 14
59469: PUSH
59470: CALL_OW 44
59474: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59475: LD_ADDR_VAR 0 7
59479: PUSH
59480: LD_VAR 0 7
59484: PPUSH
59485: LD_INT 1
59487: PPUSH
59488: LD_VAR 0 14
59492: PPUSH
59493: CALL_OW 2
59497: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59498: LD_VAR 0 14
59502: PPUSH
59503: LD_VAR 0 12
59507: PUSH
59508: LD_INT 1
59510: ARRAY
59511: PPUSH
59512: CALL_OW 52
// end ;
59516: GO 59155
59518: POP
59519: POP
// end ;
59520: GO 58457
59522: POP
59523: POP
// result := result ^ buildings ;
59524: LD_ADDR_VAR 0 7
59528: PUSH
59529: LD_VAR 0 7
59533: PUSH
59534: LD_VAR 0 18
59538: ADD
59539: ST_TO_ADDR
// end else
59540: GO 59683
// begin for i = 1 to personel do
59542: LD_ADDR_VAR 0 8
59546: PUSH
59547: DOUBLE
59548: LD_INT 1
59550: DEC
59551: ST_TO_ADDR
59552: LD_VAR 0 6
59556: PUSH
59557: FOR_TO
59558: IFFALSE 59681
// begin if i > 4 then
59560: LD_VAR 0 8
59564: PUSH
59565: LD_INT 4
59567: GREATER
59568: IFFALSE 59572
// break ;
59570: GO 59681
// x := personel [ i ] ;
59572: LD_ADDR_VAR 0 13
59576: PUSH
59577: LD_VAR 0 6
59581: PUSH
59582: LD_VAR 0 8
59586: ARRAY
59587: ST_TO_ADDR
// if x = - 1 then
59588: LD_VAR 0 13
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: EQUAL
59597: IFFALSE 59601
// continue ;
59599: GO 59557
// PrepareHuman ( false , i , skill ) ;
59601: LD_INT 0
59603: PPUSH
59604: LD_VAR 0 8
59608: PPUSH
59609: LD_VAR 0 4
59613: PPUSH
59614: CALL_OW 380
// un := CreateHuman ;
59618: LD_ADDR_VAR 0 14
59622: PUSH
59623: CALL_OW 44
59627: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59628: LD_VAR 0 14
59632: PPUSH
59633: LD_VAR 0 1
59637: PPUSH
59638: CALL_OW 250
59642: PPUSH
59643: LD_VAR 0 1
59647: PPUSH
59648: CALL_OW 251
59652: PPUSH
59653: LD_INT 10
59655: PPUSH
59656: LD_INT 0
59658: PPUSH
59659: CALL_OW 50
// result := result ^ un ;
59663: LD_ADDR_VAR 0 7
59667: PUSH
59668: LD_VAR 0 7
59672: PUSH
59673: LD_VAR 0 14
59677: ADD
59678: ST_TO_ADDR
// end ;
59679: GO 59557
59681: POP
59682: POP
// end ; end ;
59683: LD_VAR 0 7
59687: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
59688: LD_INT 0
59690: PPUSH
59691: PPUSH
59692: PPUSH
59693: PPUSH
59694: PPUSH
59695: PPUSH
59696: PPUSH
59697: PPUSH
59698: PPUSH
59699: PPUSH
59700: PPUSH
59701: PPUSH
59702: PPUSH
59703: PPUSH
59704: PPUSH
59705: PPUSH
// result := false ;
59706: LD_ADDR_VAR 0 3
59710: PUSH
59711: LD_INT 0
59713: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
59714: LD_VAR 0 1
59718: NOT
59719: PUSH
59720: LD_VAR 0 1
59724: PPUSH
59725: CALL_OW 266
59729: PUSH
59730: LD_INT 32
59732: PUSH
59733: LD_INT 33
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: IN
59740: NOT
59741: OR
59742: IFFALSE 59746
// exit ;
59744: GO 60882
// nat := GetNation ( tower ) ;
59746: LD_ADDR_VAR 0 12
59750: PUSH
59751: LD_VAR 0 1
59755: PPUSH
59756: CALL_OW 248
59760: ST_TO_ADDR
// side := GetSide ( tower ) ;
59761: LD_ADDR_VAR 0 16
59765: PUSH
59766: LD_VAR 0 1
59770: PPUSH
59771: CALL_OW 255
59775: ST_TO_ADDR
// x := GetX ( tower ) ;
59776: LD_ADDR_VAR 0 10
59780: PUSH
59781: LD_VAR 0 1
59785: PPUSH
59786: CALL_OW 250
59790: ST_TO_ADDR
// y := GetY ( tower ) ;
59791: LD_ADDR_VAR 0 11
59795: PUSH
59796: LD_VAR 0 1
59800: PPUSH
59801: CALL_OW 251
59805: ST_TO_ADDR
// if not x or not y then
59806: LD_VAR 0 10
59810: NOT
59811: PUSH
59812: LD_VAR 0 11
59816: NOT
59817: OR
59818: IFFALSE 59822
// exit ;
59820: GO 60882
// weapon := 0 ;
59822: LD_ADDR_VAR 0 18
59826: PUSH
59827: LD_INT 0
59829: ST_TO_ADDR
// fac_list := [ ] ;
59830: LD_ADDR_VAR 0 17
59834: PUSH
59835: EMPTY
59836: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
59837: LD_ADDR_VAR 0 6
59841: PUSH
59842: LD_VAR 0 1
59846: PPUSH
59847: CALL_OW 274
59851: PPUSH
59852: LD_VAR 0 2
59856: PPUSH
59857: CALL 57460 0 2
59861: PPUSH
59862: LD_INT 30
59864: PUSH
59865: LD_INT 3
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PPUSH
59872: CALL_OW 72
59876: ST_TO_ADDR
// if not factories then
59877: LD_VAR 0 6
59881: NOT
59882: IFFALSE 59886
// exit ;
59884: GO 60882
// for i in factories do
59886: LD_ADDR_VAR 0 8
59890: PUSH
59891: LD_VAR 0 6
59895: PUSH
59896: FOR_IN
59897: IFFALSE 59922
// fac_list := fac_list union AvailableWeaponList ( i ) ;
59899: LD_ADDR_VAR 0 17
59903: PUSH
59904: LD_VAR 0 17
59908: PUSH
59909: LD_VAR 0 8
59913: PPUSH
59914: CALL_OW 478
59918: UNION
59919: ST_TO_ADDR
59920: GO 59896
59922: POP
59923: POP
// if not fac_list then
59924: LD_VAR 0 17
59928: NOT
59929: IFFALSE 59933
// exit ;
59931: GO 60882
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59933: LD_ADDR_VAR 0 5
59937: PUSH
59938: LD_INT 4
59940: PUSH
59941: LD_INT 5
59943: PUSH
59944: LD_INT 9
59946: PUSH
59947: LD_INT 10
59949: PUSH
59950: LD_INT 6
59952: PUSH
59953: LD_INT 7
59955: PUSH
59956: LD_INT 11
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 27
59970: PUSH
59971: LD_INT 28
59973: PUSH
59974: LD_INT 26
59976: PUSH
59977: LD_INT 30
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 43
59988: PUSH
59989: LD_INT 44
59991: PUSH
59992: LD_INT 46
59994: PUSH
59995: LD_INT 45
59997: PUSH
59998: LD_INT 47
60000: PUSH
60001: LD_INT 49
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: LIST
60016: PUSH
60017: LD_VAR 0 12
60021: ARRAY
60022: ST_TO_ADDR
// for i in list do
60023: LD_ADDR_VAR 0 8
60027: PUSH
60028: LD_VAR 0 5
60032: PUSH
60033: FOR_IN
60034: IFFALSE 60067
// if not i in fac_list then
60036: LD_VAR 0 8
60040: PUSH
60041: LD_VAR 0 17
60045: IN
60046: NOT
60047: IFFALSE 60065
// list := list diff i ;
60049: LD_ADDR_VAR 0 5
60053: PUSH
60054: LD_VAR 0 5
60058: PUSH
60059: LD_VAR 0 8
60063: DIFF
60064: ST_TO_ADDR
60065: GO 60033
60067: POP
60068: POP
// if not list then
60069: LD_VAR 0 5
60073: NOT
60074: IFFALSE 60078
// exit ;
60076: GO 60882
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60078: LD_VAR 0 12
60082: PUSH
60083: LD_INT 3
60085: EQUAL
60086: PUSH
60087: LD_INT 49
60089: PUSH
60090: LD_VAR 0 5
60094: IN
60095: AND
60096: PUSH
60097: LD_INT 31
60099: PPUSH
60100: LD_VAR 0 16
60104: PPUSH
60105: CALL_OW 321
60109: PUSH
60110: LD_INT 2
60112: EQUAL
60113: AND
60114: IFFALSE 60174
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60116: LD_INT 22
60118: PUSH
60119: LD_VAR 0 16
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 35
60130: PUSH
60131: LD_INT 49
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 91
60140: PUSH
60141: LD_VAR 0 1
60145: PUSH
60146: LD_INT 10
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: LIST
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: PPUSH
60159: CALL_OW 69
60163: NOT
60164: IFFALSE 60174
// weapon := ru_time_lapser ;
60166: LD_ADDR_VAR 0 18
60170: PUSH
60171: LD_INT 49
60173: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60174: LD_VAR 0 12
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 2
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: IN
60189: PUSH
60190: LD_INT 11
60192: PUSH
60193: LD_VAR 0 5
60197: IN
60198: PUSH
60199: LD_INT 30
60201: PUSH
60202: LD_VAR 0 5
60206: IN
60207: OR
60208: AND
60209: PUSH
60210: LD_INT 6
60212: PPUSH
60213: LD_VAR 0 16
60217: PPUSH
60218: CALL_OW 321
60222: PUSH
60223: LD_INT 2
60225: EQUAL
60226: AND
60227: IFFALSE 60392
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60229: LD_INT 22
60231: PUSH
60232: LD_VAR 0 16
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 35
60246: PUSH
60247: LD_INT 11
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 35
60256: PUSH
60257: LD_INT 30
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 91
60271: PUSH
60272: LD_VAR 0 1
60276: PUSH
60277: LD_INT 18
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: LIST
60289: PPUSH
60290: CALL_OW 69
60294: NOT
60295: PUSH
60296: LD_INT 22
60298: PUSH
60299: LD_VAR 0 16
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: PUSH
60308: LD_INT 2
60310: PUSH
60311: LD_INT 30
60313: PUSH
60314: LD_INT 32
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 30
60323: PUSH
60324: LD_INT 33
60326: PUSH
60327: EMPTY
60328: LIST
60329: LIST
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 91
60338: PUSH
60339: LD_VAR 0 1
60343: PUSH
60344: LD_INT 12
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: LIST
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: PUSH
60357: EMPTY
60358: LIST
60359: PPUSH
60360: CALL_OW 69
60364: PUSH
60365: LD_INT 2
60367: GREATER
60368: AND
60369: IFFALSE 60392
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60371: LD_ADDR_VAR 0 18
60375: PUSH
60376: LD_INT 11
60378: PUSH
60379: LD_INT 30
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_VAR 0 12
60390: ARRAY
60391: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60392: LD_VAR 0 18
60396: NOT
60397: PUSH
60398: LD_INT 40
60400: PPUSH
60401: LD_VAR 0 16
60405: PPUSH
60406: CALL_OW 321
60410: PUSH
60411: LD_INT 2
60413: EQUAL
60414: AND
60415: PUSH
60416: LD_INT 7
60418: PUSH
60419: LD_VAR 0 5
60423: IN
60424: PUSH
60425: LD_INT 28
60427: PUSH
60428: LD_VAR 0 5
60432: IN
60433: OR
60434: PUSH
60435: LD_INT 45
60437: PUSH
60438: LD_VAR 0 5
60442: IN
60443: OR
60444: AND
60445: IFFALSE 60699
// begin hex := GetHexInfo ( x , y ) ;
60447: LD_ADDR_VAR 0 4
60451: PUSH
60452: LD_VAR 0 10
60456: PPUSH
60457: LD_VAR 0 11
60461: PPUSH
60462: CALL_OW 546
60466: ST_TO_ADDR
// if hex [ 1 ] then
60467: LD_VAR 0 4
60471: PUSH
60472: LD_INT 1
60474: ARRAY
60475: IFFALSE 60479
// exit ;
60477: GO 60882
// height := hex [ 2 ] ;
60479: LD_ADDR_VAR 0 15
60483: PUSH
60484: LD_VAR 0 4
60488: PUSH
60489: LD_INT 2
60491: ARRAY
60492: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60493: LD_ADDR_VAR 0 14
60497: PUSH
60498: LD_INT 0
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 3
60506: PUSH
60507: LD_INT 5
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: ST_TO_ADDR
// for i in tmp do
60516: LD_ADDR_VAR 0 8
60520: PUSH
60521: LD_VAR 0 14
60525: PUSH
60526: FOR_IN
60527: IFFALSE 60697
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60529: LD_ADDR_VAR 0 9
60533: PUSH
60534: LD_VAR 0 10
60538: PPUSH
60539: LD_VAR 0 8
60543: PPUSH
60544: LD_INT 5
60546: PPUSH
60547: CALL_OW 272
60551: PUSH
60552: LD_VAR 0 11
60556: PPUSH
60557: LD_VAR 0 8
60561: PPUSH
60562: LD_INT 5
60564: PPUSH
60565: CALL_OW 273
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60574: LD_VAR 0 9
60578: PUSH
60579: LD_INT 1
60581: ARRAY
60582: PPUSH
60583: LD_VAR 0 9
60587: PUSH
60588: LD_INT 2
60590: ARRAY
60591: PPUSH
60592: CALL_OW 488
60596: IFFALSE 60695
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60598: LD_ADDR_VAR 0 4
60602: PUSH
60603: LD_VAR 0 9
60607: PUSH
60608: LD_INT 1
60610: ARRAY
60611: PPUSH
60612: LD_VAR 0 9
60616: PUSH
60617: LD_INT 2
60619: ARRAY
60620: PPUSH
60621: CALL_OW 546
60625: ST_TO_ADDR
// if hex [ 1 ] then
60626: LD_VAR 0 4
60630: PUSH
60631: LD_INT 1
60633: ARRAY
60634: IFFALSE 60638
// continue ;
60636: GO 60526
// h := hex [ 2 ] ;
60638: LD_ADDR_VAR 0 13
60642: PUSH
60643: LD_VAR 0 4
60647: PUSH
60648: LD_INT 2
60650: ARRAY
60651: ST_TO_ADDR
// if h + 7 < height then
60652: LD_VAR 0 13
60656: PUSH
60657: LD_INT 7
60659: PLUS
60660: PUSH
60661: LD_VAR 0 15
60665: LESS
60666: IFFALSE 60695
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
60668: LD_ADDR_VAR 0 18
60672: PUSH
60673: LD_INT 7
60675: PUSH
60676: LD_INT 28
60678: PUSH
60679: LD_INT 45
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: LIST
60686: PUSH
60687: LD_VAR 0 12
60691: ARRAY
60692: ST_TO_ADDR
// break ;
60693: GO 60697
// end ; end ; end ;
60695: GO 60526
60697: POP
60698: POP
// end ; if not weapon then
60699: LD_VAR 0 18
60703: NOT
60704: IFFALSE 60764
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
60706: LD_ADDR_VAR 0 5
60710: PUSH
60711: LD_VAR 0 5
60715: PUSH
60716: LD_INT 11
60718: PUSH
60719: LD_INT 30
60721: PUSH
60722: LD_INT 49
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: DIFF
60730: ST_TO_ADDR
// if not list then
60731: LD_VAR 0 5
60735: NOT
60736: IFFALSE 60740
// exit ;
60738: GO 60882
// weapon := list [ rand ( 1 , list ) ] ;
60740: LD_ADDR_VAR 0 18
60744: PUSH
60745: LD_VAR 0 5
60749: PUSH
60750: LD_INT 1
60752: PPUSH
60753: LD_VAR 0 5
60757: PPUSH
60758: CALL_OW 12
60762: ARRAY
60763: ST_TO_ADDR
// end ; if weapon then
60764: LD_VAR 0 18
60768: IFFALSE 60882
// begin tmp := CostOfWeapon ( weapon ) ;
60770: LD_ADDR_VAR 0 14
60774: PUSH
60775: LD_VAR 0 18
60779: PPUSH
60780: CALL_OW 451
60784: ST_TO_ADDR
// j := GetBase ( tower ) ;
60785: LD_ADDR_VAR 0 9
60789: PUSH
60790: LD_VAR 0 1
60794: PPUSH
60795: CALL_OW 274
60799: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
60800: LD_VAR 0 9
60804: PPUSH
60805: LD_INT 1
60807: PPUSH
60808: CALL_OW 275
60812: PUSH
60813: LD_VAR 0 14
60817: PUSH
60818: LD_INT 1
60820: ARRAY
60821: GREATEREQUAL
60822: PUSH
60823: LD_VAR 0 9
60827: PPUSH
60828: LD_INT 2
60830: PPUSH
60831: CALL_OW 275
60835: PUSH
60836: LD_VAR 0 14
60840: PUSH
60841: LD_INT 2
60843: ARRAY
60844: GREATEREQUAL
60845: AND
60846: PUSH
60847: LD_VAR 0 9
60851: PPUSH
60852: LD_INT 3
60854: PPUSH
60855: CALL_OW 275
60859: PUSH
60860: LD_VAR 0 14
60864: PUSH
60865: LD_INT 3
60867: ARRAY
60868: GREATEREQUAL
60869: AND
60870: IFFALSE 60882
// result := weapon ;
60872: LD_ADDR_VAR 0 3
60876: PUSH
60877: LD_VAR 0 18
60881: ST_TO_ADDR
// end ; end ;
60882: LD_VAR 0 3
60886: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
60887: LD_INT 0
60889: PPUSH
60890: PPUSH
// result := true ;
60891: LD_ADDR_VAR 0 3
60895: PUSH
60896: LD_INT 1
60898: ST_TO_ADDR
// if array1 = array2 then
60899: LD_VAR 0 1
60903: PUSH
60904: LD_VAR 0 2
60908: EQUAL
60909: IFFALSE 60969
// begin for i = 1 to array1 do
60911: LD_ADDR_VAR 0 4
60915: PUSH
60916: DOUBLE
60917: LD_INT 1
60919: DEC
60920: ST_TO_ADDR
60921: LD_VAR 0 1
60925: PUSH
60926: FOR_TO
60927: IFFALSE 60965
// if array1 [ i ] <> array2 [ i ] then
60929: LD_VAR 0 1
60933: PUSH
60934: LD_VAR 0 4
60938: ARRAY
60939: PUSH
60940: LD_VAR 0 2
60944: PUSH
60945: LD_VAR 0 4
60949: ARRAY
60950: NONEQUAL
60951: IFFALSE 60963
// begin result := false ;
60953: LD_ADDR_VAR 0 3
60957: PUSH
60958: LD_INT 0
60960: ST_TO_ADDR
// break ;
60961: GO 60965
// end ;
60963: GO 60926
60965: POP
60966: POP
// end else
60967: GO 60977
// result := false ;
60969: LD_ADDR_VAR 0 3
60973: PUSH
60974: LD_INT 0
60976: ST_TO_ADDR
// end ;
60977: LD_VAR 0 3
60981: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
60982: LD_INT 0
60984: PPUSH
60985: PPUSH
60986: PPUSH
// pom := GetBase ( fac ) ;
60987: LD_ADDR_VAR 0 5
60991: PUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: CALL_OW 274
61001: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61002: LD_ADDR_VAR 0 4
61006: PUSH
61007: LD_VAR 0 2
61011: PUSH
61012: LD_INT 1
61014: ARRAY
61015: PPUSH
61016: LD_VAR 0 2
61020: PUSH
61021: LD_INT 2
61023: ARRAY
61024: PPUSH
61025: LD_VAR 0 2
61029: PUSH
61030: LD_INT 3
61032: ARRAY
61033: PPUSH
61034: LD_VAR 0 2
61038: PUSH
61039: LD_INT 4
61041: ARRAY
61042: PPUSH
61043: CALL_OW 449
61047: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61048: LD_ADDR_VAR 0 3
61052: PUSH
61053: LD_VAR 0 5
61057: PPUSH
61058: LD_INT 1
61060: PPUSH
61061: CALL_OW 275
61065: PUSH
61066: LD_VAR 0 4
61070: PUSH
61071: LD_INT 1
61073: ARRAY
61074: GREATEREQUAL
61075: PUSH
61076: LD_VAR 0 5
61080: PPUSH
61081: LD_INT 2
61083: PPUSH
61084: CALL_OW 275
61088: PUSH
61089: LD_VAR 0 4
61093: PUSH
61094: LD_INT 2
61096: ARRAY
61097: GREATEREQUAL
61098: AND
61099: PUSH
61100: LD_VAR 0 5
61104: PPUSH
61105: LD_INT 3
61107: PPUSH
61108: CALL_OW 275
61112: PUSH
61113: LD_VAR 0 4
61117: PUSH
61118: LD_INT 3
61120: ARRAY
61121: GREATEREQUAL
61122: AND
61123: ST_TO_ADDR
// end ;
61124: LD_VAR 0 3
61128: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61129: LD_INT 0
61131: PPUSH
61132: PPUSH
61133: PPUSH
61134: PPUSH
// pom := GetBase ( building ) ;
61135: LD_ADDR_VAR 0 3
61139: PUSH
61140: LD_VAR 0 1
61144: PPUSH
61145: CALL_OW 274
61149: ST_TO_ADDR
// if not pom then
61150: LD_VAR 0 3
61154: NOT
61155: IFFALSE 61159
// exit ;
61157: GO 61329
// btype := GetBType ( building ) ;
61159: LD_ADDR_VAR 0 5
61163: PUSH
61164: LD_VAR 0 1
61168: PPUSH
61169: CALL_OW 266
61173: ST_TO_ADDR
// if btype = b_armoury then
61174: LD_VAR 0 5
61178: PUSH
61179: LD_INT 4
61181: EQUAL
61182: IFFALSE 61192
// btype := b_barracks ;
61184: LD_ADDR_VAR 0 5
61188: PUSH
61189: LD_INT 5
61191: ST_TO_ADDR
// if btype = b_depot then
61192: LD_VAR 0 5
61196: PUSH
61197: LD_INT 0
61199: EQUAL
61200: IFFALSE 61210
// btype := b_warehouse ;
61202: LD_ADDR_VAR 0 5
61206: PUSH
61207: LD_INT 1
61209: ST_TO_ADDR
// if btype = b_workshop then
61210: LD_VAR 0 5
61214: PUSH
61215: LD_INT 2
61217: EQUAL
61218: IFFALSE 61228
// btype := b_factory ;
61220: LD_ADDR_VAR 0 5
61224: PUSH
61225: LD_INT 3
61227: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61228: LD_ADDR_VAR 0 4
61232: PUSH
61233: LD_VAR 0 5
61237: PPUSH
61238: LD_VAR 0 1
61242: PPUSH
61243: CALL_OW 248
61247: PPUSH
61248: CALL_OW 450
61252: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61253: LD_ADDR_VAR 0 2
61257: PUSH
61258: LD_VAR 0 3
61262: PPUSH
61263: LD_INT 1
61265: PPUSH
61266: CALL_OW 275
61270: PUSH
61271: LD_VAR 0 4
61275: PUSH
61276: LD_INT 1
61278: ARRAY
61279: GREATEREQUAL
61280: PUSH
61281: LD_VAR 0 3
61285: PPUSH
61286: LD_INT 2
61288: PPUSH
61289: CALL_OW 275
61293: PUSH
61294: LD_VAR 0 4
61298: PUSH
61299: LD_INT 2
61301: ARRAY
61302: GREATEREQUAL
61303: AND
61304: PUSH
61305: LD_VAR 0 3
61309: PPUSH
61310: LD_INT 3
61312: PPUSH
61313: CALL_OW 275
61317: PUSH
61318: LD_VAR 0 4
61322: PUSH
61323: LD_INT 3
61325: ARRAY
61326: GREATEREQUAL
61327: AND
61328: ST_TO_ADDR
// end ;
61329: LD_VAR 0 2
61333: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61334: LD_INT 0
61336: PPUSH
61337: PPUSH
61338: PPUSH
// pom := GetBase ( building ) ;
61339: LD_ADDR_VAR 0 4
61343: PUSH
61344: LD_VAR 0 1
61348: PPUSH
61349: CALL_OW 274
61353: ST_TO_ADDR
// if not pom then
61354: LD_VAR 0 4
61358: NOT
61359: IFFALSE 61363
// exit ;
61361: GO 61464
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61363: LD_ADDR_VAR 0 5
61367: PUSH
61368: LD_VAR 0 2
61372: PPUSH
61373: LD_VAR 0 1
61377: PPUSH
61378: CALL_OW 248
61382: PPUSH
61383: CALL_OW 450
61387: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61388: LD_ADDR_VAR 0 3
61392: PUSH
61393: LD_VAR 0 4
61397: PPUSH
61398: LD_INT 1
61400: PPUSH
61401: CALL_OW 275
61405: PUSH
61406: LD_VAR 0 5
61410: PUSH
61411: LD_INT 1
61413: ARRAY
61414: GREATEREQUAL
61415: PUSH
61416: LD_VAR 0 4
61420: PPUSH
61421: LD_INT 2
61423: PPUSH
61424: CALL_OW 275
61428: PUSH
61429: LD_VAR 0 5
61433: PUSH
61434: LD_INT 2
61436: ARRAY
61437: GREATEREQUAL
61438: AND
61439: PUSH
61440: LD_VAR 0 4
61444: PPUSH
61445: LD_INT 3
61447: PPUSH
61448: CALL_OW 275
61452: PUSH
61453: LD_VAR 0 5
61457: PUSH
61458: LD_INT 3
61460: ARRAY
61461: GREATEREQUAL
61462: AND
61463: ST_TO_ADDR
// end ;
61464: LD_VAR 0 3
61468: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
61469: LD_INT 0
61471: PPUSH
61472: PPUSH
61473: PPUSH
61474: PPUSH
61475: PPUSH
61476: PPUSH
61477: PPUSH
61478: PPUSH
61479: PPUSH
61480: PPUSH
// result := false ;
61481: LD_ADDR_VAR 0 6
61485: PUSH
61486: LD_INT 0
61488: ST_TO_ADDR
// if not base or not btype or not x or not y then
61489: LD_VAR 0 1
61493: NOT
61494: PUSH
61495: LD_VAR 0 2
61499: NOT
61500: OR
61501: PUSH
61502: LD_VAR 0 3
61506: NOT
61507: OR
61508: PUSH
61509: LD_VAR 0 4
61513: NOT
61514: OR
61515: IFFALSE 61519
// exit ;
61517: GO 62128
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
61519: LD_ADDR_VAR 0 12
61523: PUSH
61524: LD_VAR 0 2
61528: PPUSH
61529: LD_VAR 0 3
61533: PPUSH
61534: LD_VAR 0 4
61538: PPUSH
61539: LD_VAR 0 5
61543: PPUSH
61544: LD_VAR 0 1
61548: PUSH
61549: LD_INT 1
61551: ARRAY
61552: PPUSH
61553: CALL_OW 248
61557: PPUSH
61558: LD_INT 0
61560: PPUSH
61561: CALL 62965 0 6
61565: ST_TO_ADDR
// if not hexes then
61566: LD_VAR 0 12
61570: NOT
61571: IFFALSE 61575
// exit ;
61573: GO 62128
// for i = 1 to hexes do
61575: LD_ADDR_VAR 0 7
61579: PUSH
61580: DOUBLE
61581: LD_INT 1
61583: DEC
61584: ST_TO_ADDR
61585: LD_VAR 0 12
61589: PUSH
61590: FOR_TO
61591: IFFALSE 62126
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61593: LD_ADDR_VAR 0 11
61597: PUSH
61598: LD_VAR 0 12
61602: PUSH
61603: LD_VAR 0 7
61607: ARRAY
61608: PUSH
61609: LD_INT 1
61611: ARRAY
61612: PPUSH
61613: LD_VAR 0 12
61617: PUSH
61618: LD_VAR 0 7
61622: ARRAY
61623: PUSH
61624: LD_INT 2
61626: ARRAY
61627: PPUSH
61628: CALL_OW 428
61632: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
61633: LD_VAR 0 12
61637: PUSH
61638: LD_VAR 0 7
61642: ARRAY
61643: PUSH
61644: LD_INT 1
61646: ARRAY
61647: PPUSH
61648: LD_VAR 0 12
61652: PUSH
61653: LD_VAR 0 7
61657: ARRAY
61658: PUSH
61659: LD_INT 2
61661: ARRAY
61662: PPUSH
61663: CALL_OW 351
61667: PUSH
61668: LD_VAR 0 12
61672: PUSH
61673: LD_VAR 0 7
61677: ARRAY
61678: PUSH
61679: LD_INT 1
61681: ARRAY
61682: PPUSH
61683: LD_VAR 0 12
61687: PUSH
61688: LD_VAR 0 7
61692: ARRAY
61693: PUSH
61694: LD_INT 2
61696: ARRAY
61697: PPUSH
61698: CALL_OW 488
61702: NOT
61703: OR
61704: PUSH
61705: LD_VAR 0 11
61709: PPUSH
61710: CALL_OW 247
61714: PUSH
61715: LD_INT 3
61717: EQUAL
61718: OR
61719: IFFALSE 61725
// exit ;
61721: POP
61722: POP
61723: GO 62128
// if not tmp or not tmp in base then
61725: LD_VAR 0 11
61729: NOT
61730: PUSH
61731: LD_VAR 0 11
61735: PUSH
61736: LD_VAR 0 1
61740: IN
61741: NOT
61742: OR
61743: IFFALSE 61747
// continue ;
61745: GO 61590
// result := true ;
61747: LD_ADDR_VAR 0 6
61751: PUSH
61752: LD_INT 1
61754: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61755: LD_ADDR_VAR 0 15
61759: PUSH
61760: LD_VAR 0 1
61764: PPUSH
61765: LD_INT 22
61767: PUSH
61768: LD_VAR 0 11
61772: PPUSH
61773: CALL_OW 255
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 30
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 30
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: LIST
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PPUSH
61814: CALL_OW 72
61818: ST_TO_ADDR
// if dep then
61819: LD_VAR 0 15
61823: IFFALSE 61959
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61825: LD_ADDR_VAR 0 14
61829: PUSH
61830: LD_VAR 0 15
61834: PUSH
61835: LD_INT 1
61837: ARRAY
61838: PPUSH
61839: CALL_OW 250
61843: PPUSH
61844: LD_VAR 0 15
61848: PUSH
61849: LD_INT 1
61851: ARRAY
61852: PPUSH
61853: CALL_OW 254
61857: PPUSH
61858: LD_INT 5
61860: PPUSH
61861: CALL_OW 272
61865: PUSH
61866: LD_VAR 0 15
61870: PUSH
61871: LD_INT 1
61873: ARRAY
61874: PPUSH
61875: CALL_OW 251
61879: PPUSH
61880: LD_VAR 0 15
61884: PUSH
61885: LD_INT 1
61887: ARRAY
61888: PPUSH
61889: CALL_OW 254
61893: PPUSH
61894: LD_INT 5
61896: PPUSH
61897: CALL_OW 273
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61906: LD_VAR 0 14
61910: PUSH
61911: LD_INT 1
61913: ARRAY
61914: PPUSH
61915: LD_VAR 0 14
61919: PUSH
61920: LD_INT 2
61922: ARRAY
61923: PPUSH
61924: CALL_OW 488
61928: IFFALSE 61959
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61930: LD_VAR 0 11
61934: PPUSH
61935: LD_VAR 0 14
61939: PUSH
61940: LD_INT 1
61942: ARRAY
61943: PPUSH
61944: LD_VAR 0 14
61948: PUSH
61949: LD_INT 2
61951: ARRAY
61952: PPUSH
61953: CALL_OW 111
// continue ;
61957: GO 61590
// end ; end ; r := GetDir ( tmp ) ;
61959: LD_ADDR_VAR 0 13
61963: PUSH
61964: LD_VAR 0 11
61968: PPUSH
61969: CALL_OW 254
61973: ST_TO_ADDR
// if r = 5 then
61974: LD_VAR 0 13
61978: PUSH
61979: LD_INT 5
61981: EQUAL
61982: IFFALSE 61992
// r := 0 ;
61984: LD_ADDR_VAR 0 13
61988: PUSH
61989: LD_INT 0
61991: ST_TO_ADDR
// for j = r to 5 do
61992: LD_ADDR_VAR 0 8
61996: PUSH
61997: DOUBLE
61998: LD_VAR 0 13
62002: DEC
62003: ST_TO_ADDR
62004: LD_INT 5
62006: PUSH
62007: FOR_TO
62008: IFFALSE 62122
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62010: LD_ADDR_VAR 0 9
62014: PUSH
62015: LD_VAR 0 11
62019: PPUSH
62020: CALL_OW 250
62024: PPUSH
62025: LD_VAR 0 8
62029: PPUSH
62030: LD_INT 2
62032: PPUSH
62033: CALL_OW 272
62037: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62038: LD_ADDR_VAR 0 10
62042: PUSH
62043: LD_VAR 0 11
62047: PPUSH
62048: CALL_OW 251
62052: PPUSH
62053: LD_VAR 0 8
62057: PPUSH
62058: LD_INT 2
62060: PPUSH
62061: CALL_OW 273
62065: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62066: LD_VAR 0 9
62070: PPUSH
62071: LD_VAR 0 10
62075: PPUSH
62076: CALL_OW 488
62080: PUSH
62081: LD_VAR 0 9
62085: PPUSH
62086: LD_VAR 0 10
62090: PPUSH
62091: CALL_OW 428
62095: NOT
62096: AND
62097: IFFALSE 62120
// begin ComMoveXY ( tmp , _x , _y ) ;
62099: LD_VAR 0 11
62103: PPUSH
62104: LD_VAR 0 9
62108: PPUSH
62109: LD_VAR 0 10
62113: PPUSH
62114: CALL_OW 111
// break ;
62118: GO 62122
// end ; end ;
62120: GO 62007
62122: POP
62123: POP
// end ;
62124: GO 61590
62126: POP
62127: POP
// end ;
62128: LD_VAR 0 6
62132: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
62133: LD_INT 0
62135: PPUSH
62136: PPUSH
62137: PPUSH
62138: PPUSH
62139: PPUSH
62140: PPUSH
62141: PPUSH
62142: PPUSH
62143: PPUSH
62144: PPUSH
// result := false ;
62145: LD_ADDR_VAR 0 6
62149: PUSH
62150: LD_INT 0
62152: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
62153: LD_VAR 0 1
62157: NOT
62158: PUSH
62159: LD_VAR 0 1
62163: PPUSH
62164: CALL_OW 266
62168: PUSH
62169: LD_INT 0
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: IN
62179: NOT
62180: OR
62181: PUSH
62182: LD_VAR 0 2
62186: NOT
62187: OR
62188: PUSH
62189: LD_VAR 0 5
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: LD_INT 1
62199: PUSH
62200: LD_INT 2
62202: PUSH
62203: LD_INT 3
62205: PUSH
62206: LD_INT 4
62208: PUSH
62209: LD_INT 5
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: IN
62220: NOT
62221: OR
62222: PUSH
62223: LD_VAR 0 3
62227: PPUSH
62228: LD_VAR 0 4
62232: PPUSH
62233: CALL_OW 488
62237: NOT
62238: OR
62239: IFFALSE 62243
// exit ;
62241: GO 62960
// pom := GetBase ( depot ) ;
62243: LD_ADDR_VAR 0 10
62247: PUSH
62248: LD_VAR 0 1
62252: PPUSH
62253: CALL_OW 274
62257: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62258: LD_ADDR_VAR 0 11
62262: PUSH
62263: LD_VAR 0 2
62267: PPUSH
62268: LD_VAR 0 1
62272: PPUSH
62273: CALL_OW 248
62277: PPUSH
62278: CALL_OW 450
62282: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
62283: LD_VAR 0 10
62287: PPUSH
62288: LD_INT 1
62290: PPUSH
62291: CALL_OW 275
62295: PUSH
62296: LD_VAR 0 11
62300: PUSH
62301: LD_INT 1
62303: ARRAY
62304: GREATEREQUAL
62305: PUSH
62306: LD_VAR 0 10
62310: PPUSH
62311: LD_INT 2
62313: PPUSH
62314: CALL_OW 275
62318: PUSH
62319: LD_VAR 0 11
62323: PUSH
62324: LD_INT 2
62326: ARRAY
62327: GREATEREQUAL
62328: AND
62329: PUSH
62330: LD_VAR 0 10
62334: PPUSH
62335: LD_INT 3
62337: PPUSH
62338: CALL_OW 275
62342: PUSH
62343: LD_VAR 0 11
62347: PUSH
62348: LD_INT 3
62350: ARRAY
62351: GREATEREQUAL
62352: AND
62353: NOT
62354: IFFALSE 62358
// exit ;
62356: GO 62960
// if GetBType ( depot ) = b_depot then
62358: LD_VAR 0 1
62362: PPUSH
62363: CALL_OW 266
62367: PUSH
62368: LD_INT 0
62370: EQUAL
62371: IFFALSE 62383
// dist := 28 else
62373: LD_ADDR_VAR 0 14
62377: PUSH
62378: LD_INT 28
62380: ST_TO_ADDR
62381: GO 62391
// dist := 36 ;
62383: LD_ADDR_VAR 0 14
62387: PUSH
62388: LD_INT 36
62390: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
62391: LD_VAR 0 1
62395: PPUSH
62396: LD_VAR 0 3
62400: PPUSH
62401: LD_VAR 0 4
62405: PPUSH
62406: CALL_OW 297
62410: PUSH
62411: LD_VAR 0 14
62415: GREATER
62416: IFFALSE 62420
// exit ;
62418: GO 62960
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
62420: LD_ADDR_VAR 0 12
62424: PUSH
62425: LD_VAR 0 2
62429: PPUSH
62430: LD_VAR 0 3
62434: PPUSH
62435: LD_VAR 0 4
62439: PPUSH
62440: LD_VAR 0 5
62444: PPUSH
62445: LD_VAR 0 1
62449: PPUSH
62450: CALL_OW 248
62454: PPUSH
62455: LD_INT 0
62457: PPUSH
62458: CALL 62965 0 6
62462: ST_TO_ADDR
// if not hexes then
62463: LD_VAR 0 12
62467: NOT
62468: IFFALSE 62472
// exit ;
62470: GO 62960
// hex := GetHexInfo ( x , y ) ;
62472: LD_ADDR_VAR 0 15
62476: PUSH
62477: LD_VAR 0 3
62481: PPUSH
62482: LD_VAR 0 4
62486: PPUSH
62487: CALL_OW 546
62491: ST_TO_ADDR
// if hex [ 1 ] then
62492: LD_VAR 0 15
62496: PUSH
62497: LD_INT 1
62499: ARRAY
62500: IFFALSE 62504
// exit ;
62502: GO 62960
// height := hex [ 2 ] ;
62504: LD_ADDR_VAR 0 13
62508: PUSH
62509: LD_VAR 0 15
62513: PUSH
62514: LD_INT 2
62516: ARRAY
62517: ST_TO_ADDR
// for i = 1 to hexes do
62518: LD_ADDR_VAR 0 7
62522: PUSH
62523: DOUBLE
62524: LD_INT 1
62526: DEC
62527: ST_TO_ADDR
62528: LD_VAR 0 12
62532: PUSH
62533: FOR_TO
62534: IFFALSE 62864
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62536: LD_VAR 0 12
62540: PUSH
62541: LD_VAR 0 7
62545: ARRAY
62546: PUSH
62547: LD_INT 1
62549: ARRAY
62550: PPUSH
62551: LD_VAR 0 12
62555: PUSH
62556: LD_VAR 0 7
62560: ARRAY
62561: PUSH
62562: LD_INT 2
62564: ARRAY
62565: PPUSH
62566: CALL_OW 488
62570: NOT
62571: PUSH
62572: LD_VAR 0 12
62576: PUSH
62577: LD_VAR 0 7
62581: ARRAY
62582: PUSH
62583: LD_INT 1
62585: ARRAY
62586: PPUSH
62587: LD_VAR 0 12
62591: PUSH
62592: LD_VAR 0 7
62596: ARRAY
62597: PUSH
62598: LD_INT 2
62600: ARRAY
62601: PPUSH
62602: CALL_OW 428
62606: PUSH
62607: LD_INT 0
62609: GREATER
62610: OR
62611: PUSH
62612: LD_VAR 0 12
62616: PUSH
62617: LD_VAR 0 7
62621: ARRAY
62622: PUSH
62623: LD_INT 1
62625: ARRAY
62626: PPUSH
62627: LD_VAR 0 12
62631: PUSH
62632: LD_VAR 0 7
62636: ARRAY
62637: PUSH
62638: LD_INT 2
62640: ARRAY
62641: PPUSH
62642: CALL_OW 351
62646: OR
62647: IFFALSE 62653
// exit ;
62649: POP
62650: POP
62651: GO 62960
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62653: LD_ADDR_VAR 0 8
62657: PUSH
62658: LD_VAR 0 12
62662: PUSH
62663: LD_VAR 0 7
62667: ARRAY
62668: PUSH
62669: LD_INT 1
62671: ARRAY
62672: PPUSH
62673: LD_VAR 0 12
62677: PUSH
62678: LD_VAR 0 7
62682: ARRAY
62683: PUSH
62684: LD_INT 2
62686: ARRAY
62687: PPUSH
62688: CALL_OW 546
62692: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62693: LD_VAR 0 8
62697: PUSH
62698: LD_INT 1
62700: ARRAY
62701: PUSH
62702: LD_VAR 0 8
62706: PUSH
62707: LD_INT 2
62709: ARRAY
62710: PUSH
62711: LD_VAR 0 13
62715: PUSH
62716: LD_INT 2
62718: PLUS
62719: GREATER
62720: OR
62721: PUSH
62722: LD_VAR 0 8
62726: PUSH
62727: LD_INT 2
62729: ARRAY
62730: PUSH
62731: LD_VAR 0 13
62735: PUSH
62736: LD_INT 2
62738: MINUS
62739: LESS
62740: OR
62741: PUSH
62742: LD_VAR 0 8
62746: PUSH
62747: LD_INT 3
62749: ARRAY
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: LD_INT 8
62756: PUSH
62757: LD_INT 9
62759: PUSH
62760: LD_INT 10
62762: PUSH
62763: LD_INT 11
62765: PUSH
62766: LD_INT 12
62768: PUSH
62769: LD_INT 13
62771: PUSH
62772: LD_INT 16
62774: PUSH
62775: LD_INT 17
62777: PUSH
62778: LD_INT 18
62780: PUSH
62781: LD_INT 19
62783: PUSH
62784: LD_INT 20
62786: PUSH
62787: LD_INT 21
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: IN
62805: NOT
62806: OR
62807: PUSH
62808: LD_VAR 0 8
62812: PUSH
62813: LD_INT 5
62815: ARRAY
62816: NOT
62817: OR
62818: PUSH
62819: LD_VAR 0 8
62823: PUSH
62824: LD_INT 6
62826: ARRAY
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: LD_INT 7
62836: PUSH
62837: LD_INT 9
62839: PUSH
62840: LD_INT 10
62842: PUSH
62843: LD_INT 11
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: IN
62854: NOT
62855: OR
62856: IFFALSE 62862
// exit ;
62858: POP
62859: POP
62860: GO 62960
// end ;
62862: GO 62533
62864: POP
62865: POP
// side := GetSide ( depot ) ;
62866: LD_ADDR_VAR 0 9
62870: PUSH
62871: LD_VAR 0 1
62875: PPUSH
62876: CALL_OW 255
62880: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
62881: LD_VAR 0 9
62885: PPUSH
62886: LD_VAR 0 3
62890: PPUSH
62891: LD_VAR 0 4
62895: PPUSH
62896: LD_INT 20
62898: PPUSH
62899: CALL 55614 0 4
62903: PUSH
62904: LD_INT 4
62906: ARRAY
62907: IFFALSE 62911
// exit ;
62909: GO 62960
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
62911: LD_VAR 0 2
62915: PUSH
62916: LD_INT 29
62918: PUSH
62919: LD_INT 30
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: IN
62926: PUSH
62927: LD_VAR 0 3
62931: PPUSH
62932: LD_VAR 0 4
62936: PPUSH
62937: LD_VAR 0 9
62941: PPUSH
62942: CALL_OW 440
62946: NOT
62947: AND
62948: IFFALSE 62952
// exit ;
62950: GO 62960
// result := true ;
62952: LD_ADDR_VAR 0 6
62956: PUSH
62957: LD_INT 1
62959: ST_TO_ADDR
// end ;
62960: LD_VAR 0 6
62964: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
62965: LD_INT 0
62967: PPUSH
62968: PPUSH
62969: PPUSH
62970: PPUSH
62971: PPUSH
62972: PPUSH
62973: PPUSH
62974: PPUSH
62975: PPUSH
62976: PPUSH
62977: PPUSH
62978: PPUSH
62979: PPUSH
62980: PPUSH
62981: PPUSH
62982: PPUSH
62983: PPUSH
62984: PPUSH
62985: PPUSH
62986: PPUSH
62987: PPUSH
62988: PPUSH
62989: PPUSH
62990: PPUSH
62991: PPUSH
62992: PPUSH
62993: PPUSH
62994: PPUSH
62995: PPUSH
62996: PPUSH
62997: PPUSH
62998: PPUSH
62999: PPUSH
63000: PPUSH
63001: PPUSH
63002: PPUSH
63003: PPUSH
63004: PPUSH
63005: PPUSH
63006: PPUSH
63007: PPUSH
63008: PPUSH
63009: PPUSH
63010: PPUSH
63011: PPUSH
63012: PPUSH
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
63019: PPUSH
63020: PPUSH
63021: PPUSH
63022: PPUSH
63023: PPUSH
63024: PPUSH
// result = [ ] ;
63025: LD_ADDR_VAR 0 7
63029: PUSH
63030: EMPTY
63031: ST_TO_ADDR
// temp_list = [ ] ;
63032: LD_ADDR_VAR 0 9
63036: PUSH
63037: EMPTY
63038: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
63039: LD_VAR 0 4
63043: PUSH
63044: LD_INT 0
63046: PUSH
63047: LD_INT 1
63049: PUSH
63050: LD_INT 2
63052: PUSH
63053: LD_INT 3
63055: PUSH
63056: LD_INT 4
63058: PUSH
63059: LD_INT 5
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: IN
63070: NOT
63071: PUSH
63072: LD_VAR 0 1
63076: PUSH
63077: LD_INT 0
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: IN
63087: PUSH
63088: LD_VAR 0 5
63092: PUSH
63093: LD_INT 1
63095: PUSH
63096: LD_INT 2
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: LIST
63106: IN
63107: NOT
63108: AND
63109: OR
63110: IFFALSE 63114
// exit ;
63112: GO 81505
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
63114: LD_VAR 0 1
63118: PUSH
63119: LD_INT 6
63121: PUSH
63122: LD_INT 7
63124: PUSH
63125: LD_INT 8
63127: PUSH
63128: LD_INT 13
63130: PUSH
63131: LD_INT 12
63133: PUSH
63134: LD_INT 15
63136: PUSH
63137: LD_INT 11
63139: PUSH
63140: LD_INT 14
63142: PUSH
63143: LD_INT 10
63145: PUSH
63146: EMPTY
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: IN
63157: IFFALSE 63167
// btype = b_lab ;
63159: LD_ADDR_VAR 0 1
63163: PUSH
63164: LD_INT 6
63166: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
63167: LD_VAR 0 6
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: LD_INT 1
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: LIST
63185: IN
63186: NOT
63187: PUSH
63188: LD_VAR 0 1
63192: PUSH
63193: LD_INT 0
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 3
63204: PUSH
63205: LD_INT 6
63207: PUSH
63208: LD_INT 36
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: LD_INT 5
63216: PUSH
63217: LD_INT 31
63219: PUSH
63220: LD_INT 32
63222: PUSH
63223: LD_INT 33
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: LIST
63233: LIST
63234: LIST
63235: LIST
63236: LIST
63237: LIST
63238: IN
63239: NOT
63240: PUSH
63241: LD_VAR 0 6
63245: PUSH
63246: LD_INT 1
63248: EQUAL
63249: AND
63250: OR
63251: PUSH
63252: LD_VAR 0 1
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: LD_INT 3
63262: PUSH
63263: EMPTY
63264: LIST
63265: LIST
63266: IN
63267: NOT
63268: PUSH
63269: LD_VAR 0 6
63273: PUSH
63274: LD_INT 2
63276: EQUAL
63277: AND
63278: OR
63279: IFFALSE 63289
// mode = 0 ;
63281: LD_ADDR_VAR 0 6
63285: PUSH
63286: LD_INT 0
63288: ST_TO_ADDR
// case mode of 0 :
63289: LD_VAR 0 6
63293: PUSH
63294: LD_INT 0
63296: DOUBLE
63297: EQUAL
63298: IFTRUE 63302
63300: GO 74755
63302: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63303: LD_ADDR_VAR 0 11
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 0
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 0
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: PUSH
63359: LD_INT 1
63361: NEG
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 1
63376: NEG
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 1
63384: NEG
63385: PUSH
63386: LD_INT 2
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: LD_INT 2
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 1
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: NEG
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 1
63449: PUSH
63450: LD_INT 3
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: LD_INT 3
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 1
63469: NEG
63470: PUSH
63471: LD_INT 2
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63496: LD_ADDR_VAR 0 12
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 0
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: NEG
63555: PUSH
63556: LD_INT 0
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 1
63565: NEG
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 1
63580: NEG
63581: PUSH
63582: EMPTY
63583: LIST
63584: LIST
63585: PUSH
63586: LD_INT 2
63588: PUSH
63589: LD_INT 0
63591: PUSH
63592: EMPTY
63593: LIST
63594: LIST
63595: PUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: LD_INT 1
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: LD_INT 0
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 2
63630: NEG
63631: PUSH
63632: LD_INT 1
63634: NEG
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 2
63642: NEG
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: LD_INT 0
63657: PUSH
63658: EMPTY
63659: LIST
63660: LIST
63661: PUSH
63662: LD_INT 3
63664: NEG
63665: PUSH
63666: LD_INT 1
63668: NEG
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63692: LD_ADDR_VAR 0 13
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 1
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 0
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: NEG
63751: PUSH
63752: LD_INT 0
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 1
63773: NEG
63774: PUSH
63775: LD_INT 2
63777: NEG
63778: PUSH
63779: EMPTY
63780: LIST
63781: LIST
63782: PUSH
63783: LD_INT 2
63785: PUSH
63786: LD_INT 1
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 2
63795: PUSH
63796: LD_INT 2
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 2
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 1
63819: NEG
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 3
63851: NEG
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 3
63863: NEG
63864: PUSH
63865: LD_INT 3
63867: NEG
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63891: LD_ADDR_VAR 0 14
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 2
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 0
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 1
63995: PUSH
63996: LD_INT 1
63998: NEG
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 0
64016: PUSH
64017: LD_INT 2
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: LD_INT 3
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 1
64060: PUSH
64061: LD_INT 2
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: EMPTY
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64087: LD_ADDR_VAR 0 15
64091: PUSH
64092: LD_INT 0
64094: PUSH
64095: LD_INT 0
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 1
64107: NEG
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 1
64115: PUSH
64116: LD_INT 0
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: PUSH
64126: LD_INT 1
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: LD_INT 1
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: LD_INT 0
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: LD_INT 1
64160: NEG
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: PUSH
64169: LD_INT 1
64171: NEG
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 2
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: EMPTY
64184: LIST
64185: LIST
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: LD_INT 1
64192: PUSH
64193: EMPTY
64194: LIST
64195: LIST
64196: PUSH
64197: LD_INT 1
64199: NEG
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 2
64210: NEG
64211: PUSH
64212: LD_INT 0
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: LD_INT 1
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: LIST
64276: LIST
64277: LIST
64278: LIST
64279: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64280: LD_ADDR_VAR 0 16
64284: PUSH
64285: LD_INT 0
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 0
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 1
64308: PUSH
64309: LD_INT 0
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 1
64318: PUSH
64319: LD_INT 1
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 0
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 1
64338: NEG
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: NEG
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 2
64373: PUSH
64374: LD_INT 1
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 2
64383: PUSH
64384: LD_INT 2
64386: PUSH
64387: EMPTY
64388: LIST
64389: LIST
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: LD_INT 2
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 3
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 3
64437: PUSH
64438: LD_INT 3
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64473: LD_ADDR_VAR 0 17
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: LD_INT 0
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 1
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: EMPTY
64516: LIST
64517: LIST
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: LD_INT 1
64524: PUSH
64525: EMPTY
64526: LIST
64527: LIST
64528: PUSH
64529: LD_INT 1
64531: NEG
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: PUSH
64540: LD_INT 1
64542: NEG
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: NEG
64555: PUSH
64556: LD_INT 2
64558: NEG
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 1
64580: NEG
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 2
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 2
64608: PUSH
64609: LD_INT 2
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: LD_INT 2
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 0
64628: PUSH
64629: LD_INT 2
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 1
64642: PUSH
64643: EMPTY
64644: LIST
64645: LIST
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 2
64660: NEG
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: NEG
64673: PUSH
64674: LD_INT 2
64676: NEG
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64703: LD_ADDR_VAR 0 18
64707: PUSH
64708: LD_INT 0
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: LD_INT 0
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: LD_INT 1
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 1
64741: PUSH
64742: LD_INT 1
64744: PUSH
64745: EMPTY
64746: LIST
64747: LIST
64748: PUSH
64749: LD_INT 0
64751: PUSH
64752: LD_INT 1
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: PUSH
64763: LD_INT 0
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: LD_INT 1
64776: NEG
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: LD_INT 2
64788: NEG
64789: PUSH
64790: EMPTY
64791: LIST
64792: LIST
64793: PUSH
64794: LD_INT 0
64796: PUSH
64797: LD_INT 2
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 1
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 2
64818: PUSH
64819: LD_INT 0
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: PUSH
64829: LD_INT 1
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 2
64838: PUSH
64839: LD_INT 2
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 1
64848: PUSH
64849: LD_INT 2
64851: PUSH
64852: EMPTY
64853: LIST
64854: LIST
64855: PUSH
64856: LD_INT 0
64858: PUSH
64859: LD_INT 2
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: LD_INT 1
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 2
64890: NEG
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64933: LD_ADDR_VAR 0 19
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 0
64950: PUSH
64951: LD_INT 1
64953: NEG
64954: PUSH
64955: EMPTY
64956: LIST
64957: LIST
64958: PUSH
64959: LD_INT 1
64961: PUSH
64962: LD_INT 0
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 1
64971: PUSH
64972: LD_INT 1
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 0
64981: PUSH
64982: LD_INT 1
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 1
64991: NEG
64992: PUSH
64993: LD_INT 0
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: NEG
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 2
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 2
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: LD_INT 1
65040: NEG
65041: PUSH
65042: EMPTY
65043: LIST
65044: LIST
65045: PUSH
65046: LD_INT 2
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 2
65058: PUSH
65059: LD_INT 1
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 2
65068: PUSH
65069: LD_INT 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: PUSH
65079: LD_INT 2
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: LD_INT 0
65088: PUSH
65089: LD_INT 2
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 1
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: LD_INT 0
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: LD_INT 2
65120: NEG
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 2
65132: NEG
65133: PUSH
65134: LD_INT 2
65136: NEG
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: LIST
65161: LIST
65162: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65163: LD_ADDR_VAR 0 20
65167: PUSH
65168: LD_INT 0
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 0
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 1
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 0
65211: PUSH
65212: LD_INT 1
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 1
65221: NEG
65222: PUSH
65223: LD_INT 0
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: LD_INT 1
65236: NEG
65237: PUSH
65238: EMPTY
65239: LIST
65240: LIST
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: LD_INT 2
65248: NEG
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 2
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 1
65270: NEG
65271: PUSH
65272: EMPTY
65273: LIST
65274: LIST
65275: PUSH
65276: LD_INT 2
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 2
65288: PUSH
65289: LD_INT 1
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 2
65298: PUSH
65299: LD_INT 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: LD_INT 0
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 2
65339: NEG
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 2
65350: NEG
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: LIST
65380: LIST
65381: LIST
65382: LIST
65383: LIST
65384: LIST
65385: LIST
65386: LIST
65387: LIST
65388: LIST
65389: LIST
65390: LIST
65391: LIST
65392: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65393: LD_ADDR_VAR 0 21
65397: PUSH
65398: LD_INT 0
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: LD_INT 1
65421: PUSH
65422: LD_INT 0
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: LD_INT 1
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 0
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 1
65451: NEG
65452: PUSH
65453: LD_INT 0
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 1
65462: NEG
65463: PUSH
65464: LD_INT 1
65466: NEG
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 1
65474: NEG
65475: PUSH
65476: LD_INT 2
65478: NEG
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 2
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 1
65500: NEG
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 2
65508: PUSH
65509: LD_INT 0
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: LD_INT 1
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: PUSH
65526: LD_INT 2
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: PUSH
65539: LD_INT 2
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: LD_INT 0
65548: PUSH
65549: LD_INT 2
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: LD_INT 1
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 2
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 2
65592: NEG
65593: PUSH
65594: LD_INT 2
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: LIST
65607: LIST
65608: LIST
65609: LIST
65610: LIST
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: LIST
65618: LIST
65619: LIST
65620: LIST
65621: LIST
65622: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65623: LD_ADDR_VAR 0 22
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 0
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 0
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 1
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 0
65671: PUSH
65672: LD_INT 1
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 1
65681: NEG
65682: PUSH
65683: LD_INT 0
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 1
65696: NEG
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 1
65704: NEG
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 2
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 1
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 2
65738: PUSH
65739: LD_INT 0
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 2
65748: PUSH
65749: LD_INT 1
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: PUSH
65756: LD_INT 2
65758: PUSH
65759: LD_INT 2
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 2
65771: PUSH
65772: EMPTY
65773: LIST
65774: LIST
65775: PUSH
65776: LD_INT 0
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 1
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 2
65799: NEG
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 2
65810: NEG
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: LD_INT 2
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: LIST
65847: LIST
65848: LIST
65849: LIST
65850: LIST
65851: LIST
65852: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
65853: LD_ADDR_VAR 0 23
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 0
65870: PUSH
65871: LD_INT 1
65873: NEG
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: LD_INT 0
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 1
65891: PUSH
65892: LD_INT 1
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: LD_INT 1
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: NEG
65912: PUSH
65913: LD_INT 0
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: LD_INT 1
65926: NEG
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: PUSH
65932: LD_INT 1
65934: NEG
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 2
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: LD_INT 1
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 2
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: LD_INT 1
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 2
65988: PUSH
65989: LD_INT 2
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: PUSH
65999: LD_INT 2
66001: PUSH
66002: EMPTY
66003: LIST
66004: LIST
66005: PUSH
66006: LD_INT 0
66008: PUSH
66009: LD_INT 2
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: NEG
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 2
66040: NEG
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: NEG
66053: PUSH
66054: LD_INT 2
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: NEG
66065: PUSH
66066: LD_INT 3
66068: NEG
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 1
66076: NEG
66077: PUSH
66078: LD_INT 3
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: EMPTY
66094: LIST
66095: LIST
66096: PUSH
66097: LD_INT 2
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: LIST
66127: LIST
66128: LIST
66129: LIST
66130: LIST
66131: LIST
66132: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
66133: LD_ADDR_VAR 0 24
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 0
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 0
66150: PUSH
66151: LD_INT 1
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 1
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: LD_INT 1
66171: PUSH
66172: LD_INT 1
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: PUSH
66179: LD_INT 0
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: PUSH
66200: LD_INT 1
66202: NEG
66203: PUSH
66204: LD_INT 1
66206: NEG
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 0
66226: PUSH
66227: LD_INT 2
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 2
66248: PUSH
66249: LD_INT 0
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 2
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 2
66268: PUSH
66269: LD_INT 2
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: LD_INT 1
66278: PUSH
66279: LD_INT 2
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 0
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 1
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: LD_INT 0
66313: PUSH
66314: EMPTY
66315: LIST
66316: LIST
66317: PUSH
66318: LD_INT 2
66320: NEG
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: NEG
66333: PUSH
66334: LD_INT 2
66336: NEG
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: PUSH
66345: LD_INT 2
66347: NEG
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 2
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 3
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 3
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
66409: LD_ADDR_VAR 0 25
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 2
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 3
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 3
66630: PUSH
66631: LD_INT 2
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 2
66640: PUSH
66641: LD_INT 3
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 1
66650: PUSH
66651: LD_INT 3
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66683: LD_ADDR_VAR 0 26
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 2
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 2
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: LD_INT 2
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 2
66870: NEG
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 2
66894: PUSH
66895: LD_INT 3
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 1
66904: PUSH
66905: LD_INT 3
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 1
66914: NEG
66915: PUSH
66916: LD_INT 2
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 2
66925: NEG
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: PUSH
66934: EMPTY
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66959: LD_ADDR_VAR 0 27
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 0
66976: PUSH
66977: LD_INT 1
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 1
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: LD_INT 1
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 0
67007: PUSH
67008: LD_INT 1
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: LD_INT 0
67021: PUSH
67022: EMPTY
67023: LIST
67024: LIST
67025: PUSH
67026: LD_INT 1
67028: NEG
67029: PUSH
67030: LD_INT 1
67032: NEG
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 2
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 1
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 2
67074: PUSH
67075: LD_INT 0
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: LD_INT 1
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 2
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 1
67104: PUSH
67105: LD_INT 2
67107: PUSH
67108: EMPTY
67109: LIST
67110: LIST
67111: PUSH
67112: LD_INT 0
67114: PUSH
67115: LD_INT 2
67117: PUSH
67118: EMPTY
67119: LIST
67120: LIST
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 2
67135: NEG
67136: PUSH
67137: LD_INT 0
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 2
67146: NEG
67147: PUSH
67148: LD_INT 1
67150: NEG
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 2
67158: NEG
67159: PUSH
67160: LD_INT 2
67162: NEG
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: PUSH
67168: LD_INT 1
67170: NEG
67171: PUSH
67172: LD_INT 2
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_INT 2
67181: NEG
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 3
67192: NEG
67193: PUSH
67194: LD_INT 1
67196: NEG
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: LD_INT 2
67208: NEG
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67239: LD_ADDR_VAR 0 28
67243: PUSH
67244: LD_INT 0
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: LD_INT 1
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 0
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 1
67277: PUSH
67278: LD_INT 1
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: LD_INT 0
67287: PUSH
67288: LD_INT 1
67290: PUSH
67291: EMPTY
67292: LIST
67293: LIST
67294: PUSH
67295: LD_INT 1
67297: NEG
67298: PUSH
67299: LD_INT 0
67301: PUSH
67302: EMPTY
67303: LIST
67304: LIST
67305: PUSH
67306: LD_INT 1
67308: NEG
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 1
67320: NEG
67321: PUSH
67322: LD_INT 2
67324: NEG
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 0
67332: PUSH
67333: LD_INT 2
67335: NEG
67336: PUSH
67337: EMPTY
67338: LIST
67339: LIST
67340: PUSH
67341: LD_INT 1
67343: PUSH
67344: LD_INT 1
67346: NEG
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 2
67354: PUSH
67355: LD_INT 0
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 2
67364: PUSH
67365: LD_INT 1
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: PUSH
67375: LD_INT 2
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 2
67415: NEG
67416: PUSH
67417: LD_INT 0
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 2
67426: NEG
67427: PUSH
67428: LD_INT 1
67430: NEG
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 2
67438: NEG
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: PUSH
67448: LD_INT 2
67450: NEG
67451: PUSH
67452: LD_INT 3
67454: NEG
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: EMPTY
67469: LIST
67470: LIST
67471: PUSH
67472: LD_INT 3
67474: NEG
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: EMPTY
67481: LIST
67482: LIST
67483: PUSH
67484: LD_INT 3
67486: NEG
67487: PUSH
67488: LD_INT 2
67490: NEG
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: LIST
67520: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67521: LD_ADDR_VAR 0 29
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 0
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 0
67538: PUSH
67539: LD_INT 1
67541: NEG
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: LD_INT 0
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 1
67572: PUSH
67573: EMPTY
67574: LIST
67575: LIST
67576: PUSH
67577: LD_INT 1
67579: NEG
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: NEG
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 1
67602: NEG
67603: PUSH
67604: LD_INT 2
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: LD_INT 2
67617: NEG
67618: PUSH
67619: EMPTY
67620: LIST
67621: LIST
67622: PUSH
67623: LD_INT 1
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 2
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 2
67646: PUSH
67647: LD_INT 1
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 2
67659: PUSH
67660: EMPTY
67661: LIST
67662: LIST
67663: PUSH
67664: LD_INT 0
67666: PUSH
67667: LD_INT 2
67669: PUSH
67670: EMPTY
67671: LIST
67672: LIST
67673: PUSH
67674: LD_INT 1
67676: NEG
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: NEG
67688: PUSH
67689: LD_INT 1
67691: NEG
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 2
67699: NEG
67700: PUSH
67701: LD_INT 2
67703: NEG
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: PUSH
67709: LD_INT 2
67711: NEG
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 2
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 3
67734: PUSH
67735: LD_INT 1
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: PUSH
67745: LD_INT 3
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 1
67754: NEG
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 3
67765: NEG
67766: PUSH
67767: LD_INT 2
67769: NEG
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67800: LD_ADDR_VAR 0 30
67804: PUSH
67805: LD_INT 0
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: LD_INT 0
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: LD_INT 1
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: LD_INT 0
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 1
67869: NEG
67870: PUSH
67871: LD_INT 1
67873: NEG
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: PUSH
67879: LD_INT 1
67881: NEG
67882: PUSH
67883: LD_INT 2
67885: NEG
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 0
67893: PUSH
67894: LD_INT 2
67896: NEG
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 1
67904: PUSH
67905: LD_INT 1
67907: NEG
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 2
67915: PUSH
67916: LD_INT 0
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 2
67925: PUSH
67926: LD_INT 1
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 2
67935: PUSH
67936: LD_INT 2
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: NEG
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 2
67966: NEG
67967: PUSH
67968: LD_INT 0
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: LD_INT 1
67981: NEG
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: PUSH
67987: LD_INT 1
67989: NEG
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 1
68001: PUSH
68002: LD_INT 2
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 2
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: NEG
68033: PUSH
68034: LD_INT 1
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: PUSH
68041: LD_INT 3
68043: NEG
68044: PUSH
68045: LD_INT 1
68047: NEG
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: LIST
68074: LIST
68075: LIST
68076: LIST
68077: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68078: LD_ADDR_VAR 0 31
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 0
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 1
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 1
68116: PUSH
68117: LD_INT 1
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: LD_INT 1
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: LD_INT 0
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: LD_INT 1
68151: NEG
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 1
68159: NEG
68160: PUSH
68161: LD_INT 2
68163: NEG
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: LD_INT 2
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: PUSH
68193: LD_INT 1
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 2
68202: PUSH
68203: LD_INT 2
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 1
68212: PUSH
68213: LD_INT 2
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: LD_INT 1
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 2
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 2
68255: NEG
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 2
68267: NEG
68268: PUSH
68269: LD_INT 3
68271: NEG
68272: PUSH
68273: EMPTY
68274: LIST
68275: LIST
68276: PUSH
68277: LD_INT 2
68279: PUSH
68280: LD_INT 1
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 3
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: LD_INT 1
68300: PUSH
68301: LD_INT 3
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 1
68310: NEG
68311: PUSH
68312: LD_INT 2
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 3
68321: NEG
68322: PUSH
68323: LD_INT 2
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: EMPTY
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68356: LD_ADDR_VAR 0 32
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: LD_INT 0
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 1
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 0
68404: PUSH
68405: LD_INT 1
68407: PUSH
68408: EMPTY
68409: LIST
68410: LIST
68411: PUSH
68412: LD_INT 1
68414: NEG
68415: PUSH
68416: LD_INT 0
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: LD_INT 1
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 1
68437: NEG
68438: PUSH
68439: LD_INT 2
68441: NEG
68442: PUSH
68443: EMPTY
68444: LIST
68445: LIST
68446: PUSH
68447: LD_INT 0
68449: PUSH
68450: LD_INT 2
68452: NEG
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 1
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 2
68471: PUSH
68472: LD_INT 1
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 2
68481: PUSH
68482: LD_INT 2
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 1
68491: PUSH
68492: LD_INT 2
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 0
68501: PUSH
68502: LD_INT 2
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 1
68511: NEG
68512: PUSH
68513: LD_INT 1
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 2
68522: NEG
68523: PUSH
68524: LD_INT 0
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: LD_INT 1
68537: NEG
68538: PUSH
68539: EMPTY
68540: LIST
68541: LIST
68542: PUSH
68543: LD_INT 1
68545: NEG
68546: PUSH
68547: LD_INT 3
68549: NEG
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: PUSH
68558: LD_INT 2
68560: NEG
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 3
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: LD_INT 3
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 2
68588: NEG
68589: PUSH
68590: LD_INT 1
68592: PUSH
68593: EMPTY
68594: LIST
68595: LIST
68596: PUSH
68597: LD_INT 3
68599: NEG
68600: PUSH
68601: LD_INT 1
68603: NEG
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68634: LD_ADDR_VAR 0 33
68638: PUSH
68639: LD_INT 0
68641: PUSH
68642: LD_INT 0
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 0
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 1
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 1
68672: PUSH
68673: LD_INT 1
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 0
68682: PUSH
68683: LD_INT 1
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 1
68692: NEG
68693: PUSH
68694: LD_INT 0
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: LD_INT 1
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: NEG
68716: PUSH
68717: LD_INT 2
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: PUSH
68736: LD_INT 2
68738: PUSH
68739: LD_INT 0
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 2
68748: PUSH
68749: LD_INT 1
68751: PUSH
68752: EMPTY
68753: LIST
68754: LIST
68755: PUSH
68756: LD_INT 1
68758: PUSH
68759: LD_INT 2
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 2
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 1
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 2
68789: NEG
68790: PUSH
68791: LD_INT 0
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 2
68800: NEG
68801: PUSH
68802: LD_INT 1
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 2
68812: NEG
68813: PUSH
68814: LD_INT 2
68816: NEG
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 2
68824: NEG
68825: PUSH
68826: LD_INT 3
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 2
68836: PUSH
68837: LD_INT 1
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 3
68847: PUSH
68848: LD_INT 1
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: LD_INT 3
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 1
68867: NEG
68868: PUSH
68869: LD_INT 2
68871: PUSH
68872: EMPTY
68873: LIST
68874: LIST
68875: PUSH
68876: LD_INT 3
68878: NEG
68879: PUSH
68880: LD_INT 2
68882: NEG
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68913: LD_ADDR_VAR 0 34
68917: PUSH
68918: LD_INT 0
68920: PUSH
68921: LD_INT 0
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: LD_INT 1
68933: NEG
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 1
68941: PUSH
68942: LD_INT 0
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: LD_INT 1
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 1
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 1
68971: NEG
68972: PUSH
68973: LD_INT 0
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 1
68982: NEG
68983: PUSH
68984: LD_INT 1
68986: NEG
68987: PUSH
68988: EMPTY
68989: LIST
68990: LIST
68991: PUSH
68992: LD_INT 1
68994: NEG
68995: PUSH
68996: LD_INT 2
68998: NEG
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 0
69006: PUSH
69007: LD_INT 2
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 1
69017: PUSH
69018: LD_INT 1
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 2
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 2
69038: PUSH
69039: LD_INT 2
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: LD_INT 2
69051: PUSH
69052: EMPTY
69053: LIST
69054: LIST
69055: PUSH
69056: LD_INT 1
69058: NEG
69059: PUSH
69060: LD_INT 1
69062: PUSH
69063: EMPTY
69064: LIST
69065: LIST
69066: PUSH
69067: LD_INT 2
69069: NEG
69070: PUSH
69071: LD_INT 0
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: LD_INT 1
69084: NEG
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 2
69092: NEG
69093: PUSH
69094: LD_INT 2
69096: NEG
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: NEG
69105: PUSH
69106: LD_INT 3
69108: NEG
69109: PUSH
69110: EMPTY
69111: LIST
69112: LIST
69113: PUSH
69114: LD_INT 1
69116: PUSH
69117: LD_INT 2
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 3
69127: PUSH
69128: LD_INT 2
69130: PUSH
69131: EMPTY
69132: LIST
69133: LIST
69134: PUSH
69135: LD_INT 2
69137: PUSH
69138: LD_INT 3
69140: PUSH
69141: EMPTY
69142: LIST
69143: LIST
69144: PUSH
69145: LD_INT 2
69147: NEG
69148: PUSH
69149: LD_INT 1
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 3
69158: NEG
69159: PUSH
69160: LD_INT 1
69162: NEG
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69193: LD_ADDR_VAR 0 35
69197: PUSH
69198: LD_INT 0
69200: PUSH
69201: LD_INT 0
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 0
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 1
69231: PUSH
69232: LD_INT 1
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 0
69241: PUSH
69242: LD_INT 1
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 1
69251: NEG
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 1
69262: NEG
69263: PUSH
69264: LD_INT 1
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 2
69274: PUSH
69275: LD_INT 1
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69305: LD_ADDR_VAR 0 36
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: LD_INT 0
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: PUSH
69334: LD_INT 0
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: LD_INT 1
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 1
69363: NEG
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 1
69386: NEG
69387: PUSH
69388: LD_INT 2
69390: NEG
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 1
69398: PUSH
69399: LD_INT 2
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: EMPTY
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69417: LD_ADDR_VAR 0 37
69421: PUSH
69422: LD_INT 0
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: LD_INT 1
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 1
69445: PUSH
69446: LD_INT 0
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 0
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 1
69475: NEG
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: EMPTY
69481: LIST
69482: LIST
69483: PUSH
69484: LD_INT 1
69486: NEG
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: PUSH
69496: LD_INT 1
69498: PUSH
69499: LD_INT 1
69501: NEG
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 1
69509: NEG
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69529: LD_ADDR_VAR 0 38
69533: PUSH
69534: LD_INT 0
69536: PUSH
69537: LD_INT 0
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: LD_INT 1
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 1
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: NEG
69588: PUSH
69589: LD_INT 0
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: LD_INT 1
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 2
69610: PUSH
69611: LD_INT 1
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: NEG
69621: PUSH
69622: LD_INT 1
69624: NEG
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69641: LD_ADDR_VAR 0 39
69645: PUSH
69646: LD_INT 0
69648: PUSH
69649: LD_INT 0
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 0
69658: PUSH
69659: LD_INT 1
69661: NEG
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 1
69669: PUSH
69670: LD_INT 0
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 1
69679: PUSH
69680: LD_INT 1
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 0
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 1
69699: NEG
69700: PUSH
69701: LD_INT 0
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 1
69710: NEG
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: NEG
69723: PUSH
69724: LD_INT 2
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: LD_INT 2
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69753: LD_ADDR_VAR 0 40
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: EMPTY
69765: LIST
69766: LIST
69767: PUSH
69768: LD_INT 0
69770: PUSH
69771: LD_INT 1
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 0
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: LD_INT 1
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: LD_INT 1
69804: PUSH
69805: EMPTY
69806: LIST
69807: LIST
69808: PUSH
69809: LD_INT 1
69811: NEG
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: PUSH
69824: LD_INT 1
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 1
69845: NEG
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: EMPTY
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69865: LD_ADDR_VAR 0 41
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 0
69882: PUSH
69883: LD_INT 1
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 1
69893: PUSH
69894: LD_INT 0
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 1
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 0
69913: PUSH
69914: LD_INT 1
69916: PUSH
69917: EMPTY
69918: LIST
69919: LIST
69920: PUSH
69921: LD_INT 1
69923: NEG
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 1
69934: NEG
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 1
69946: NEG
69947: PUSH
69948: LD_INT 2
69950: NEG
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 1
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: EMPTY
69964: LIST
69965: LIST
69966: PUSH
69967: LD_INT 2
69969: PUSH
69970: LD_INT 0
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 2
69979: PUSH
69980: LD_INT 1
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: LD_INT 2
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: PUSH
70000: LD_INT 2
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 1
70009: NEG
70010: PUSH
70011: LD_INT 1
70013: PUSH
70014: EMPTY
70015: LIST
70016: LIST
70017: PUSH
70018: LD_INT 2
70020: NEG
70021: PUSH
70022: LD_INT 0
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: LD_INT 1
70035: NEG
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 2
70043: NEG
70044: PUSH
70045: LD_INT 2
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 2
70055: NEG
70056: PUSH
70057: LD_INT 3
70059: NEG
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: PUSH
70068: LD_INT 1
70070: NEG
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 3
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: EMPTY
70083: LIST
70084: LIST
70085: PUSH
70086: LD_INT 3
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: LD_INT 2
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 3
70108: PUSH
70109: LD_INT 3
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 2
70118: PUSH
70119: LD_INT 3
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 2
70128: NEG
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 3
70139: NEG
70140: PUSH
70141: LD_INT 0
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: LD_INT 1
70154: NEG
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 3
70162: NEG
70163: PUSH
70164: LD_INT 2
70166: NEG
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 3
70174: NEG
70175: PUSH
70176: LD_INT 3
70178: NEG
70179: PUSH
70180: EMPTY
70181: LIST
70182: LIST
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70215: LD_ADDR_VAR 0 42
70219: PUSH
70220: LD_INT 0
70222: PUSH
70223: LD_INT 0
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 0
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: LD_INT 1
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: LD_INT 0
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 1
70284: NEG
70285: PUSH
70286: LD_INT 1
70288: NEG
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 1
70296: NEG
70297: PUSH
70298: LD_INT 2
70300: NEG
70301: PUSH
70302: EMPTY
70303: LIST
70304: LIST
70305: PUSH
70306: LD_INT 0
70308: PUSH
70309: LD_INT 2
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 1
70319: PUSH
70320: LD_INT 1
70322: NEG
70323: PUSH
70324: EMPTY
70325: LIST
70326: LIST
70327: PUSH
70328: LD_INT 2
70330: PUSH
70331: LD_INT 1
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 2
70340: PUSH
70341: LD_INT 2
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: PUSH
70351: LD_INT 2
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 0
70360: PUSH
70361: LD_INT 2
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 1
70370: NEG
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: NEG
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 2
70393: NEG
70394: PUSH
70395: LD_INT 2
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: NEG
70406: PUSH
70407: LD_INT 3
70409: NEG
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: NEG
70418: PUSH
70419: LD_INT 3
70421: NEG
70422: PUSH
70423: EMPTY
70424: LIST
70425: LIST
70426: PUSH
70427: LD_INT 0
70429: PUSH
70430: LD_INT 3
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 1
70440: PUSH
70441: LD_INT 2
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 3
70451: PUSH
70452: LD_INT 2
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 3
70461: PUSH
70462: LD_INT 3
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: LD_INT 3
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: LD_INT 3
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 0
70491: PUSH
70492: LD_INT 3
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 1
70501: NEG
70502: PUSH
70503: LD_INT 2
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 2
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 3
70524: NEG
70525: PUSH
70526: LD_INT 3
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: LIST
70553: LIST
70554: LIST
70555: LIST
70556: LIST
70557: LIST
70558: LIST
70559: LIST
70560: LIST
70561: LIST
70562: LIST
70563: LIST
70564: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70565: LD_ADDR_VAR 0 43
70569: PUSH
70570: LD_INT 0
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 1
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: PUSH
70594: LD_INT 0
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 1
70603: PUSH
70604: LD_INT 1
70606: PUSH
70607: EMPTY
70608: LIST
70609: LIST
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: LD_INT 1
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 1
70623: NEG
70624: PUSH
70625: LD_INT 0
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: NEG
70635: PUSH
70636: LD_INT 1
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 1
70646: NEG
70647: PUSH
70648: LD_INT 2
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 2
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 1
70669: PUSH
70670: LD_INT 1
70672: NEG
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 2
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: PUSH
70688: LD_INT 2
70690: PUSH
70691: LD_INT 1
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: LD_INT 2
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 0
70710: PUSH
70711: LD_INT 2
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 2
70731: NEG
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 2
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 1
70754: NEG
70755: PUSH
70756: LD_INT 3
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 0
70766: PUSH
70767: LD_INT 3
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 1
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 2
70788: PUSH
70789: LD_INT 1
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 3
70799: PUSH
70800: LD_INT 0
70802: PUSH
70803: EMPTY
70804: LIST
70805: LIST
70806: PUSH
70807: LD_INT 3
70809: PUSH
70810: LD_INT 1
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 1
70819: PUSH
70820: LD_INT 3
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: PUSH
70827: LD_INT 0
70829: PUSH
70830: LD_INT 3
70832: PUSH
70833: EMPTY
70834: LIST
70835: LIST
70836: PUSH
70837: LD_INT 1
70839: NEG
70840: PUSH
70841: LD_INT 2
70843: PUSH
70844: EMPTY
70845: LIST
70846: LIST
70847: PUSH
70848: LD_INT 2
70850: NEG
70851: PUSH
70852: LD_INT 1
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 3
70861: NEG
70862: PUSH
70863: LD_INT 0
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 3
70872: NEG
70873: PUSH
70874: LD_INT 1
70876: NEG
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: LIST
70906: LIST
70907: LIST
70908: LIST
70909: LIST
70910: LIST
70911: LIST
70912: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70913: LD_ADDR_VAR 0 44
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 0
70930: PUSH
70931: LD_INT 1
70933: NEG
70934: PUSH
70935: EMPTY
70936: LIST
70937: LIST
70938: PUSH
70939: LD_INT 1
70941: PUSH
70942: LD_INT 0
70944: PUSH
70945: EMPTY
70946: LIST
70947: LIST
70948: PUSH
70949: LD_INT 1
70951: PUSH
70952: LD_INT 1
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 1
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: PUSH
70969: LD_INT 1
70971: NEG
70972: PUSH
70973: LD_INT 0
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: NEG
70983: PUSH
70984: LD_INT 1
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: LD_INT 2
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: LD_INT 1
71009: NEG
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 2
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 2
71027: PUSH
71028: LD_INT 1
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 1
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 2
71068: NEG
71069: PUSH
71070: LD_INT 0
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 2
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 2
71091: NEG
71092: PUSH
71093: LD_INT 2
71095: NEG
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 2
71103: NEG
71104: PUSH
71105: LD_INT 3
71107: NEG
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 2
71115: PUSH
71116: LD_INT 1
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 3
71126: PUSH
71127: LD_INT 0
71129: PUSH
71130: EMPTY
71131: LIST
71132: LIST
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: PUSH
71147: LD_INT 2
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 3
71156: PUSH
71157: LD_INT 3
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 2
71166: PUSH
71167: LD_INT 3
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 2
71176: NEG
71177: PUSH
71178: LD_INT 1
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: PUSH
71185: LD_INT 3
71187: NEG
71188: PUSH
71189: LD_INT 0
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 3
71198: NEG
71199: PUSH
71200: LD_INT 1
71202: NEG
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 3
71210: NEG
71211: PUSH
71212: LD_INT 2
71214: NEG
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 3
71222: NEG
71223: PUSH
71224: LD_INT 3
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71263: LD_ADDR_VAR 0 45
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 0
71280: PUSH
71281: LD_INT 1
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 1
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: PUSH
71302: LD_INT 1
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 1
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 1
71332: NEG
71333: PUSH
71334: LD_INT 1
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: LD_INT 2
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 0
71356: PUSH
71357: LD_INT 2
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 1
71367: PUSH
71368: LD_INT 1
71370: NEG
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 2
71378: PUSH
71379: LD_INT 1
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 2
71388: PUSH
71389: LD_INT 2
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 1
71398: PUSH
71399: LD_INT 2
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 2
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 1
71418: NEG
71419: PUSH
71420: LD_INT 1
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PUSH
71431: LD_INT 1
71433: NEG
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PUSH
71439: LD_INT 2
71441: NEG
71442: PUSH
71443: LD_INT 2
71445: NEG
71446: PUSH
71447: EMPTY
71448: LIST
71449: LIST
71450: PUSH
71451: LD_INT 2
71453: NEG
71454: PUSH
71455: LD_INT 3
71457: NEG
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 1
71465: NEG
71466: PUSH
71467: LD_INT 3
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 0
71477: PUSH
71478: LD_INT 3
71480: NEG
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 1
71488: PUSH
71489: LD_INT 2
71491: NEG
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 3
71499: PUSH
71500: LD_INT 2
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 3
71509: PUSH
71510: LD_INT 3
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 2
71519: PUSH
71520: LD_INT 3
71522: PUSH
71523: EMPTY
71524: LIST
71525: LIST
71526: PUSH
71527: LD_INT 1
71529: PUSH
71530: LD_INT 3
71532: PUSH
71533: EMPTY
71534: LIST
71535: LIST
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: LD_INT 3
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: PUSH
71547: LD_INT 1
71549: NEG
71550: PUSH
71551: LD_INT 2
71553: PUSH
71554: EMPTY
71555: LIST
71556: LIST
71557: PUSH
71558: LD_INT 3
71560: NEG
71561: PUSH
71562: LD_INT 2
71564: NEG
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 3
71572: NEG
71573: PUSH
71574: LD_INT 3
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71613: LD_ADDR_VAR 0 46
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: LD_INT 0
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 0
71630: PUSH
71631: LD_INT 1
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: PUSH
71652: LD_INT 1
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: PUSH
71659: LD_INT 0
71661: PUSH
71662: LD_INT 1
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 1
71671: NEG
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 1
71682: NEG
71683: PUSH
71684: LD_INT 1
71686: NEG
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 1
71694: NEG
71695: PUSH
71696: LD_INT 2
71698: NEG
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 0
71706: PUSH
71707: LD_INT 2
71709: NEG
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 1
71717: PUSH
71718: LD_INT 1
71720: NEG
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: LD_INT 2
71728: PUSH
71729: LD_INT 0
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 2
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: EMPTY
71743: LIST
71744: LIST
71745: PUSH
71746: LD_INT 1
71748: PUSH
71749: LD_INT 2
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: LD_INT 2
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 1
71768: NEG
71769: PUSH
71770: LD_INT 1
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 2
71779: NEG
71780: PUSH
71781: LD_INT 0
71783: PUSH
71784: EMPTY
71785: LIST
71786: LIST
71787: PUSH
71788: LD_INT 2
71790: NEG
71791: PUSH
71792: LD_INT 1
71794: NEG
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 1
71802: NEG
71803: PUSH
71804: LD_INT 3
71806: NEG
71807: PUSH
71808: EMPTY
71809: LIST
71810: LIST
71811: PUSH
71812: LD_INT 0
71814: PUSH
71815: LD_INT 3
71817: NEG
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 1
71825: PUSH
71826: LD_INT 2
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: LD_INT 1
71839: NEG
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 3
71847: PUSH
71848: LD_INT 0
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 3
71857: PUSH
71858: LD_INT 1
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: LD_INT 3
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 0
71877: PUSH
71878: LD_INT 3
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 1
71887: NEG
71888: PUSH
71889: LD_INT 2
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 2
71898: NEG
71899: PUSH
71900: LD_INT 1
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 3
71909: NEG
71910: PUSH
71911: LD_INT 0
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 3
71920: NEG
71921: PUSH
71922: LD_INT 1
71924: NEG
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71961: LD_ADDR_VAR 0 47
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: LD_INT 0
71971: PUSH
71972: EMPTY
71973: LIST
71974: LIST
71975: PUSH
71976: LD_INT 0
71978: PUSH
71979: LD_INT 1
71981: NEG
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 1
71989: PUSH
71990: LD_INT 0
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 1
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: LD_INT 1
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: LD_INT 0
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 1
72030: NEG
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 1
72042: NEG
72043: PUSH
72044: LD_INT 2
72046: NEG
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: LD_INT 0
72054: PUSH
72055: LD_INT 2
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 1
72065: PUSH
72066: LD_INT 1
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 2
72076: NEG
72077: PUSH
72078: LD_INT 1
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 2
72088: NEG
72089: PUSH
72090: LD_INT 2
72092: NEG
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: EMPTY
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72112: LD_ADDR_VAR 0 48
72116: PUSH
72117: LD_INT 0
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 0
72129: PUSH
72130: LD_INT 1
72132: NEG
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 1
72140: PUSH
72141: LD_INT 0
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 1
72150: PUSH
72151: LD_INT 1
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 0
72160: PUSH
72161: LD_INT 1
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: LD_INT 0
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 1
72181: NEG
72182: PUSH
72183: LD_INT 1
72185: NEG
72186: PUSH
72187: EMPTY
72188: LIST
72189: LIST
72190: PUSH
72191: LD_INT 1
72193: NEG
72194: PUSH
72195: LD_INT 2
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 0
72205: PUSH
72206: LD_INT 2
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 1
72216: PUSH
72217: LD_INT 1
72219: NEG
72220: PUSH
72221: EMPTY
72222: LIST
72223: LIST
72224: PUSH
72225: LD_INT 2
72227: PUSH
72228: LD_INT 0
72230: PUSH
72231: EMPTY
72232: LIST
72233: LIST
72234: PUSH
72235: LD_INT 2
72237: PUSH
72238: LD_INT 1
72240: PUSH
72241: EMPTY
72242: LIST
72243: LIST
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72259: LD_ADDR_VAR 0 49
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 0
72276: PUSH
72277: LD_INT 1
72279: NEG
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: PUSH
72288: LD_INT 0
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 1
72297: PUSH
72298: LD_INT 1
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: LD_INT 1
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: LD_INT 0
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 1
72328: NEG
72329: PUSH
72330: LD_INT 1
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 1
72340: PUSH
72341: LD_INT 1
72343: NEG
72344: PUSH
72345: EMPTY
72346: LIST
72347: LIST
72348: PUSH
72349: LD_INT 2
72351: PUSH
72352: LD_INT 0
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 2
72361: PUSH
72362: LD_INT 1
72364: PUSH
72365: EMPTY
72366: LIST
72367: LIST
72368: PUSH
72369: LD_INT 2
72371: PUSH
72372: LD_INT 2
72374: PUSH
72375: EMPTY
72376: LIST
72377: LIST
72378: PUSH
72379: LD_INT 1
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: LIST
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72403: LD_ADDR_VAR 0 50
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: LD_INT 0
72413: PUSH
72414: EMPTY
72415: LIST
72416: LIST
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: LD_INT 1
72423: NEG
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: LD_INT 1
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 0
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 1
72461: NEG
72462: PUSH
72463: LD_INT 0
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 1
72472: NEG
72473: PUSH
72474: LD_INT 1
72476: NEG
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 2
72484: PUSH
72485: LD_INT 1
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 2
72494: PUSH
72495: LD_INT 2
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: PUSH
72502: LD_INT 1
72504: PUSH
72505: LD_INT 2
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 0
72514: PUSH
72515: LD_INT 2
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: PUSH
72522: LD_INT 1
72524: NEG
72525: PUSH
72526: LD_INT 1
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: EMPTY
72534: LIST
72535: LIST
72536: LIST
72537: LIST
72538: LIST
72539: LIST
72540: LIST
72541: LIST
72542: LIST
72543: LIST
72544: LIST
72545: LIST
72546: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72547: LD_ADDR_VAR 0 51
72551: PUSH
72552: LD_INT 0
72554: PUSH
72555: LD_INT 0
72557: PUSH
72558: EMPTY
72559: LIST
72560: LIST
72561: PUSH
72562: LD_INT 0
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 1
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: LD_INT 1
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 0
72595: PUSH
72596: LD_INT 1
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: PUSH
72603: LD_INT 1
72605: NEG
72606: PUSH
72607: LD_INT 0
72609: PUSH
72610: EMPTY
72611: LIST
72612: LIST
72613: PUSH
72614: LD_INT 1
72616: NEG
72617: PUSH
72618: LD_INT 1
72620: NEG
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 1
72628: PUSH
72629: LD_INT 2
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 0
72638: PUSH
72639: LD_INT 2
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 1
72648: NEG
72649: PUSH
72650: LD_INT 1
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 2
72659: NEG
72660: PUSH
72661: LD_INT 0
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 2
72670: NEG
72671: PUSH
72672: LD_INT 1
72674: NEG
72675: PUSH
72676: EMPTY
72677: LIST
72678: LIST
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: LIST
72693: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72694: LD_ADDR_VAR 0 52
72698: PUSH
72699: LD_INT 0
72701: PUSH
72702: LD_INT 0
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 0
72711: PUSH
72712: LD_INT 1
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 1
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 1
72732: PUSH
72733: LD_INT 1
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 0
72742: PUSH
72743: LD_INT 1
72745: PUSH
72746: EMPTY
72747: LIST
72748: LIST
72749: PUSH
72750: LD_INT 1
72752: NEG
72753: PUSH
72754: LD_INT 0
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: LD_INT 1
72763: NEG
72764: PUSH
72765: LD_INT 1
72767: NEG
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 1
72775: NEG
72776: PUSH
72777: LD_INT 2
72779: NEG
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: LD_INT 1
72787: NEG
72788: PUSH
72789: LD_INT 1
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 2
72798: NEG
72799: PUSH
72800: LD_INT 0
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: LD_INT 2
72809: NEG
72810: PUSH
72811: LD_INT 1
72813: NEG
72814: PUSH
72815: EMPTY
72816: LIST
72817: LIST
72818: PUSH
72819: LD_INT 2
72821: NEG
72822: PUSH
72823: LD_INT 2
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72845: LD_ADDR_VAR 0 53
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: LD_INT 0
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 0
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 1
72873: PUSH
72874: LD_INT 0
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: LD_INT 1
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 0
72893: PUSH
72894: LD_INT 1
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 1
72903: NEG
72904: PUSH
72905: LD_INT 0
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 1
72914: NEG
72915: PUSH
72916: LD_INT 1
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 1
72926: NEG
72927: PUSH
72928: LD_INT 2
72930: NEG
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 0
72938: PUSH
72939: LD_INT 2
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 1
72949: PUSH
72950: LD_INT 1
72952: NEG
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 2
72960: PUSH
72961: LD_INT 0
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: LD_INT 1
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 2
72980: PUSH
72981: LD_INT 2
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 1
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: LD_INT 2
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 1
73010: NEG
73011: PUSH
73012: LD_INT 1
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 2
73021: NEG
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 2
73032: NEG
73033: PUSH
73034: LD_INT 1
73036: NEG
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PUSH
73042: LD_INT 2
73044: NEG
73045: PUSH
73046: LD_INT 2
73048: NEG
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: LIST
73058: LIST
73059: LIST
73060: LIST
73061: LIST
73062: LIST
73063: LIST
73064: LIST
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73075: LD_ADDR_VAR 0 54
73079: PUSH
73080: LD_INT 0
73082: PUSH
73083: LD_INT 0
73085: PUSH
73086: EMPTY
73087: LIST
73088: LIST
73089: PUSH
73090: LD_INT 0
73092: PUSH
73093: LD_INT 1
73095: NEG
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 1
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 1
73113: PUSH
73114: LD_INT 1
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 0
73123: PUSH
73124: LD_INT 1
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 1
73133: NEG
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 1
73144: NEG
73145: PUSH
73146: LD_INT 1
73148: NEG
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 1
73156: NEG
73157: PUSH
73158: LD_INT 2
73160: NEG
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 0
73168: PUSH
73169: LD_INT 2
73171: NEG
73172: PUSH
73173: EMPTY
73174: LIST
73175: LIST
73176: PUSH
73177: LD_INT 1
73179: PUSH
73180: LD_INT 1
73182: NEG
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 2
73190: PUSH
73191: LD_INT 0
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 2
73200: PUSH
73201: LD_INT 1
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 2
73210: PUSH
73211: LD_INT 2
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 1
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 0
73230: PUSH
73231: LD_INT 2
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 1
73240: NEG
73241: PUSH
73242: LD_INT 1
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 2
73251: NEG
73252: PUSH
73253: LD_INT 0
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PUSH
73260: LD_INT 2
73262: NEG
73263: PUSH
73264: LD_INT 1
73266: NEG
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 2
73274: NEG
73275: PUSH
73276: LD_INT 2
73278: NEG
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: LIST
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73305: LD_ADDR_VAR 0 55
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 0
73322: PUSH
73323: LD_INT 1
73325: NEG
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 1
73333: PUSH
73334: LD_INT 0
73336: PUSH
73337: EMPTY
73338: LIST
73339: LIST
73340: PUSH
73341: LD_INT 1
73343: PUSH
73344: LD_INT 1
73346: PUSH
73347: EMPTY
73348: LIST
73349: LIST
73350: PUSH
73351: LD_INT 0
73353: PUSH
73354: LD_INT 1
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 1
73363: NEG
73364: PUSH
73365: LD_INT 0
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 1
73374: NEG
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: LD_INT 2
73390: NEG
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 0
73398: PUSH
73399: LD_INT 2
73401: NEG
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 1
73409: PUSH
73410: LD_INT 1
73412: NEG
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 2
73420: PUSH
73421: LD_INT 0
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 2
73430: PUSH
73431: LD_INT 1
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 2
73440: PUSH
73441: LD_INT 2
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 1
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: PUSH
73458: LD_INT 0
73460: PUSH
73461: LD_INT 2
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: PUSH
73468: LD_INT 1
73470: NEG
73471: PUSH
73472: LD_INT 1
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: LD_INT 2
73481: NEG
73482: PUSH
73483: LD_INT 0
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: PUSH
73490: LD_INT 2
73492: NEG
73493: PUSH
73494: LD_INT 1
73496: NEG
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 2
73504: NEG
73505: PUSH
73506: LD_INT 2
73508: NEG
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: LIST
73533: LIST
73534: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73535: LD_ADDR_VAR 0 56
73539: PUSH
73540: LD_INT 0
73542: PUSH
73543: LD_INT 0
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: PUSH
73550: LD_INT 0
73552: PUSH
73553: LD_INT 1
73555: NEG
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 1
73563: PUSH
73564: LD_INT 0
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 1
73573: PUSH
73574: LD_INT 1
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 0
73583: PUSH
73584: LD_INT 1
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: PUSH
73591: LD_INT 1
73593: NEG
73594: PUSH
73595: LD_INT 0
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 1
73604: NEG
73605: PUSH
73606: LD_INT 1
73608: NEG
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 1
73616: NEG
73617: PUSH
73618: LD_INT 2
73620: NEG
73621: PUSH
73622: EMPTY
73623: LIST
73624: LIST
73625: PUSH
73626: LD_INT 0
73628: PUSH
73629: LD_INT 2
73631: NEG
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 1
73639: PUSH
73640: LD_INT 1
73642: NEG
73643: PUSH
73644: EMPTY
73645: LIST
73646: LIST
73647: PUSH
73648: LD_INT 2
73650: PUSH
73651: LD_INT 0
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 2
73660: PUSH
73661: LD_INT 1
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 2
73670: PUSH
73671: LD_INT 2
73673: PUSH
73674: EMPTY
73675: LIST
73676: LIST
73677: PUSH
73678: LD_INT 1
73680: PUSH
73681: LD_INT 2
73683: PUSH
73684: EMPTY
73685: LIST
73686: LIST
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: LD_INT 2
73693: PUSH
73694: EMPTY
73695: LIST
73696: LIST
73697: PUSH
73698: LD_INT 1
73700: NEG
73701: PUSH
73702: LD_INT 1
73704: PUSH
73705: EMPTY
73706: LIST
73707: LIST
73708: PUSH
73709: LD_INT 2
73711: NEG
73712: PUSH
73713: LD_INT 0
73715: PUSH
73716: EMPTY
73717: LIST
73718: LIST
73719: PUSH
73720: LD_INT 2
73722: NEG
73723: PUSH
73724: LD_INT 1
73726: NEG
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 2
73734: NEG
73735: PUSH
73736: LD_INT 2
73738: NEG
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: LIST
73758: LIST
73759: LIST
73760: LIST
73761: LIST
73762: LIST
73763: LIST
73764: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73765: LD_ADDR_VAR 0 57
73769: PUSH
73770: LD_INT 0
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: EMPTY
73777: LIST
73778: LIST
73779: PUSH
73780: LD_INT 0
73782: PUSH
73783: LD_INT 1
73785: NEG
73786: PUSH
73787: EMPTY
73788: LIST
73789: LIST
73790: PUSH
73791: LD_INT 1
73793: PUSH
73794: LD_INT 0
73796: PUSH
73797: EMPTY
73798: LIST
73799: LIST
73800: PUSH
73801: LD_INT 1
73803: PUSH
73804: LD_INT 1
73806: PUSH
73807: EMPTY
73808: LIST
73809: LIST
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: LD_INT 1
73816: PUSH
73817: EMPTY
73818: LIST
73819: LIST
73820: PUSH
73821: LD_INT 1
73823: NEG
73824: PUSH
73825: LD_INT 0
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: LD_INT 1
73834: NEG
73835: PUSH
73836: LD_INT 1
73838: NEG
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 1
73846: NEG
73847: PUSH
73848: LD_INT 2
73850: NEG
73851: PUSH
73852: EMPTY
73853: LIST
73854: LIST
73855: PUSH
73856: LD_INT 0
73858: PUSH
73859: LD_INT 2
73861: NEG
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 1
73869: PUSH
73870: LD_INT 1
73872: NEG
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 2
73880: PUSH
73881: LD_INT 0
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 2
73890: PUSH
73891: LD_INT 1
73893: PUSH
73894: EMPTY
73895: LIST
73896: LIST
73897: PUSH
73898: LD_INT 2
73900: PUSH
73901: LD_INT 2
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: PUSH
73908: LD_INT 1
73910: PUSH
73911: LD_INT 2
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: PUSH
73918: LD_INT 0
73920: PUSH
73921: LD_INT 2
73923: PUSH
73924: EMPTY
73925: LIST
73926: LIST
73927: PUSH
73928: LD_INT 1
73930: NEG
73931: PUSH
73932: LD_INT 1
73934: PUSH
73935: EMPTY
73936: LIST
73937: LIST
73938: PUSH
73939: LD_INT 2
73941: NEG
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: EMPTY
73947: LIST
73948: LIST
73949: PUSH
73950: LD_INT 2
73952: NEG
73953: PUSH
73954: LD_INT 1
73956: NEG
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 2
73964: NEG
73965: PUSH
73966: LD_INT 2
73968: NEG
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: LIST
73978: LIST
73979: LIST
73980: LIST
73981: LIST
73982: LIST
73983: LIST
73984: LIST
73985: LIST
73986: LIST
73987: LIST
73988: LIST
73989: LIST
73990: LIST
73991: LIST
73992: LIST
73993: LIST
73994: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73995: LD_ADDR_VAR 0 58
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: LD_INT 0
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PUSH
74010: LD_INT 0
74012: PUSH
74013: LD_INT 1
74015: NEG
74016: PUSH
74017: EMPTY
74018: LIST
74019: LIST
74020: PUSH
74021: LD_INT 1
74023: PUSH
74024: LD_INT 0
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 1
74033: PUSH
74034: LD_INT 1
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 0
74043: PUSH
74044: LD_INT 1
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: PUSH
74055: LD_INT 0
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 1
74064: NEG
74065: PUSH
74066: LD_INT 1
74068: NEG
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 1
74076: NEG
74077: PUSH
74078: LD_INT 2
74080: NEG
74081: PUSH
74082: EMPTY
74083: LIST
74084: LIST
74085: PUSH
74086: LD_INT 0
74088: PUSH
74089: LD_INT 2
74091: NEG
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 1
74099: PUSH
74100: LD_INT 1
74102: NEG
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: LD_INT 2
74110: PUSH
74111: LD_INT 0
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 2
74120: PUSH
74121: LD_INT 1
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 2
74130: PUSH
74131: LD_INT 2
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 1
74140: PUSH
74141: LD_INT 2
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 0
74150: PUSH
74151: LD_INT 2
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: LD_INT 1
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 2
74171: NEG
74172: PUSH
74173: LD_INT 0
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 2
74182: NEG
74183: PUSH
74184: LD_INT 1
74186: NEG
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 2
74194: NEG
74195: PUSH
74196: LD_INT 2
74198: NEG
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74225: LD_ADDR_VAR 0 59
74229: PUSH
74230: LD_INT 0
74232: PUSH
74233: LD_INT 0
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: LD_INT 0
74242: PUSH
74243: LD_INT 1
74245: NEG
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PUSH
74251: LD_INT 1
74253: PUSH
74254: LD_INT 0
74256: PUSH
74257: EMPTY
74258: LIST
74259: LIST
74260: PUSH
74261: LD_INT 1
74263: PUSH
74264: LD_INT 1
74266: PUSH
74267: EMPTY
74268: LIST
74269: LIST
74270: PUSH
74271: LD_INT 0
74273: PUSH
74274: LD_INT 1
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: LD_INT 1
74283: NEG
74284: PUSH
74285: LD_INT 0
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 1
74294: NEG
74295: PUSH
74296: LD_INT 1
74298: NEG
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74313: LD_ADDR_VAR 0 60
74317: PUSH
74318: LD_INT 0
74320: PUSH
74321: LD_INT 0
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 0
74330: PUSH
74331: LD_INT 1
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 1
74341: PUSH
74342: LD_INT 0
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 1
74351: PUSH
74352: LD_INT 1
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 0
74361: PUSH
74362: LD_INT 1
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 1
74371: NEG
74372: PUSH
74373: LD_INT 0
74375: PUSH
74376: EMPTY
74377: LIST
74378: LIST
74379: PUSH
74380: LD_INT 1
74382: NEG
74383: PUSH
74384: LD_INT 1
74386: NEG
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74401: LD_ADDR_VAR 0 61
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: LD_INT 0
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 0
74418: PUSH
74419: LD_INT 1
74421: NEG
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 1
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 1
74439: PUSH
74440: LD_INT 1
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 0
74449: PUSH
74450: LD_INT 1
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 1
74459: NEG
74460: PUSH
74461: LD_INT 0
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 1
74470: NEG
74471: PUSH
74472: LD_INT 1
74474: NEG
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74489: LD_ADDR_VAR 0 62
74493: PUSH
74494: LD_INT 0
74496: PUSH
74497: LD_INT 0
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 0
74506: PUSH
74507: LD_INT 1
74509: NEG
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 1
74517: PUSH
74518: LD_INT 0
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 1
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 0
74537: PUSH
74538: LD_INT 1
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 1
74547: NEG
74548: PUSH
74549: LD_INT 0
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 1
74558: NEG
74559: PUSH
74560: LD_INT 1
74562: NEG
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74577: LD_ADDR_VAR 0 63
74581: PUSH
74582: LD_INT 0
74584: PUSH
74585: LD_INT 0
74587: PUSH
74588: EMPTY
74589: LIST
74590: LIST
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: LD_INT 1
74597: NEG
74598: PUSH
74599: EMPTY
74600: LIST
74601: LIST
74602: PUSH
74603: LD_INT 1
74605: PUSH
74606: LD_INT 0
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: LD_INT 1
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 0
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 1
74635: NEG
74636: PUSH
74637: LD_INT 0
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 1
74646: NEG
74647: PUSH
74648: LD_INT 1
74650: NEG
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: LIST
74660: LIST
74661: LIST
74662: LIST
74663: LIST
74664: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74665: LD_ADDR_VAR 0 64
74669: PUSH
74670: LD_INT 0
74672: PUSH
74673: LD_INT 0
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: LD_INT 1
74685: NEG
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 1
74693: PUSH
74694: LD_INT 0
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 1
74703: PUSH
74704: LD_INT 1
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 0
74713: PUSH
74714: LD_INT 1
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 1
74723: NEG
74724: PUSH
74725: LD_INT 0
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 1
74734: NEG
74735: PUSH
74736: LD_INT 1
74738: NEG
74739: PUSH
74740: EMPTY
74741: LIST
74742: LIST
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: ST_TO_ADDR
// end ; 1 :
74753: GO 80650
74755: LD_INT 1
74757: DOUBLE
74758: EQUAL
74759: IFTRUE 74763
74761: GO 77386
74763: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74764: LD_ADDR_VAR 0 11
74768: PUSH
74769: LD_INT 1
74771: NEG
74772: PUSH
74773: LD_INT 3
74775: NEG
74776: PUSH
74777: EMPTY
74778: LIST
74779: LIST
74780: PUSH
74781: LD_INT 0
74783: PUSH
74784: LD_INT 3
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 1
74794: PUSH
74795: LD_INT 2
74797: NEG
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: LIST
74807: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74808: LD_ADDR_VAR 0 12
74812: PUSH
74813: LD_INT 2
74815: PUSH
74816: LD_INT 1
74818: NEG
74819: PUSH
74820: EMPTY
74821: LIST
74822: LIST
74823: PUSH
74824: LD_INT 3
74826: PUSH
74827: LD_INT 0
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 3
74836: PUSH
74837: LD_INT 1
74839: PUSH
74840: EMPTY
74841: LIST
74842: LIST
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: LIST
74848: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74849: LD_ADDR_VAR 0 13
74853: PUSH
74854: LD_INT 3
74856: PUSH
74857: LD_INT 2
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: PUSH
74864: LD_INT 3
74866: PUSH
74867: LD_INT 3
74869: PUSH
74870: EMPTY
74871: LIST
74872: LIST
74873: PUSH
74874: LD_INT 2
74876: PUSH
74877: LD_INT 3
74879: PUSH
74880: EMPTY
74881: LIST
74882: LIST
74883: PUSH
74884: EMPTY
74885: LIST
74886: LIST
74887: LIST
74888: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74889: LD_ADDR_VAR 0 14
74893: PUSH
74894: LD_INT 1
74896: PUSH
74897: LD_INT 3
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 0
74906: PUSH
74907: LD_INT 3
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_INT 1
74916: NEG
74917: PUSH
74918: LD_INT 2
74920: PUSH
74921: EMPTY
74922: LIST
74923: LIST
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: LIST
74929: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74930: LD_ADDR_VAR 0 15
74934: PUSH
74935: LD_INT 2
74937: NEG
74938: PUSH
74939: LD_INT 1
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 3
74948: NEG
74949: PUSH
74950: LD_INT 0
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 3
74959: NEG
74960: PUSH
74961: LD_INT 1
74963: NEG
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: LIST
74973: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74974: LD_ADDR_VAR 0 16
74978: PUSH
74979: LD_INT 2
74981: NEG
74982: PUSH
74983: LD_INT 3
74985: NEG
74986: PUSH
74987: EMPTY
74988: LIST
74989: LIST
74990: PUSH
74991: LD_INT 3
74993: NEG
74994: PUSH
74995: LD_INT 2
74997: NEG
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: PUSH
75003: LD_INT 3
75005: NEG
75006: PUSH
75007: LD_INT 3
75009: NEG
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75020: LD_ADDR_VAR 0 17
75024: PUSH
75025: LD_INT 1
75027: NEG
75028: PUSH
75029: LD_INT 3
75031: NEG
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 0
75039: PUSH
75040: LD_INT 3
75042: NEG
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 1
75050: PUSH
75051: LD_INT 2
75053: NEG
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: LIST
75063: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75064: LD_ADDR_VAR 0 18
75068: PUSH
75069: LD_INT 2
75071: PUSH
75072: LD_INT 1
75074: NEG
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 3
75082: PUSH
75083: LD_INT 0
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 3
75092: PUSH
75093: LD_INT 1
75095: PUSH
75096: EMPTY
75097: LIST
75098: LIST
75099: PUSH
75100: EMPTY
75101: LIST
75102: LIST
75103: LIST
75104: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75105: LD_ADDR_VAR 0 19
75109: PUSH
75110: LD_INT 3
75112: PUSH
75113: LD_INT 2
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 3
75122: PUSH
75123: LD_INT 3
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 2
75132: PUSH
75133: LD_INT 3
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75145: LD_ADDR_VAR 0 20
75149: PUSH
75150: LD_INT 1
75152: PUSH
75153: LD_INT 3
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: LD_INT 3
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 1
75172: NEG
75173: PUSH
75174: LD_INT 2
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: LIST
75185: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75186: LD_ADDR_VAR 0 21
75190: PUSH
75191: LD_INT 2
75193: NEG
75194: PUSH
75195: LD_INT 1
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 3
75204: NEG
75205: PUSH
75206: LD_INT 0
75208: PUSH
75209: EMPTY
75210: LIST
75211: LIST
75212: PUSH
75213: LD_INT 3
75215: NEG
75216: PUSH
75217: LD_INT 1
75219: NEG
75220: PUSH
75221: EMPTY
75222: LIST
75223: LIST
75224: PUSH
75225: EMPTY
75226: LIST
75227: LIST
75228: LIST
75229: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75230: LD_ADDR_VAR 0 22
75234: PUSH
75235: LD_INT 2
75237: NEG
75238: PUSH
75239: LD_INT 3
75241: NEG
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: PUSH
75247: LD_INT 3
75249: NEG
75250: PUSH
75251: LD_INT 2
75253: NEG
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: PUSH
75259: LD_INT 3
75261: NEG
75262: PUSH
75263: LD_INT 3
75265: NEG
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
75276: LD_ADDR_VAR 0 23
75280: PUSH
75281: LD_INT 0
75283: PUSH
75284: LD_INT 3
75286: NEG
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 1
75294: NEG
75295: PUSH
75296: LD_INT 4
75298: NEG
75299: PUSH
75300: EMPTY
75301: LIST
75302: LIST
75303: PUSH
75304: LD_INT 1
75306: PUSH
75307: LD_INT 3
75309: NEG
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
75320: LD_ADDR_VAR 0 24
75324: PUSH
75325: LD_INT 3
75327: PUSH
75328: LD_INT 0
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 3
75337: PUSH
75338: LD_INT 1
75340: NEG
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: PUSH
75346: LD_INT 4
75348: PUSH
75349: LD_INT 1
75351: PUSH
75352: EMPTY
75353: LIST
75354: LIST
75355: PUSH
75356: EMPTY
75357: LIST
75358: LIST
75359: LIST
75360: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
75361: LD_ADDR_VAR 0 25
75365: PUSH
75366: LD_INT 3
75368: PUSH
75369: LD_INT 3
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: PUSH
75376: LD_INT 4
75378: PUSH
75379: LD_INT 3
75381: PUSH
75382: EMPTY
75383: LIST
75384: LIST
75385: PUSH
75386: LD_INT 3
75388: PUSH
75389: LD_INT 4
75391: PUSH
75392: EMPTY
75393: LIST
75394: LIST
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: LIST
75400: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
75401: LD_ADDR_VAR 0 26
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: LD_INT 3
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: PUSH
75416: LD_INT 1
75418: PUSH
75419: LD_INT 4
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 1
75428: NEG
75429: PUSH
75430: LD_INT 3
75432: PUSH
75433: EMPTY
75434: LIST
75435: LIST
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: LIST
75441: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
75442: LD_ADDR_VAR 0 27
75446: PUSH
75447: LD_INT 3
75449: NEG
75450: PUSH
75451: LD_INT 0
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 3
75460: NEG
75461: PUSH
75462: LD_INT 1
75464: PUSH
75465: EMPTY
75466: LIST
75467: LIST
75468: PUSH
75469: LD_INT 4
75471: NEG
75472: PUSH
75473: LD_INT 1
75475: NEG
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: LIST
75485: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75486: LD_ADDR_VAR 0 28
75490: PUSH
75491: LD_INT 3
75493: NEG
75494: PUSH
75495: LD_INT 3
75497: NEG
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: PUSH
75503: LD_INT 3
75505: NEG
75506: PUSH
75507: LD_INT 4
75509: NEG
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PUSH
75515: LD_INT 4
75517: NEG
75518: PUSH
75519: LD_INT 3
75521: NEG
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: EMPTY
75528: LIST
75529: LIST
75530: LIST
75531: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75532: LD_ADDR_VAR 0 29
75536: PUSH
75537: LD_INT 1
75539: NEG
75540: PUSH
75541: LD_INT 3
75543: NEG
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 0
75551: PUSH
75552: LD_INT 3
75554: NEG
75555: PUSH
75556: EMPTY
75557: LIST
75558: LIST
75559: PUSH
75560: LD_INT 1
75562: PUSH
75563: LD_INT 2
75565: NEG
75566: PUSH
75567: EMPTY
75568: LIST
75569: LIST
75570: PUSH
75571: LD_INT 1
75573: NEG
75574: PUSH
75575: LD_INT 4
75577: NEG
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 0
75585: PUSH
75586: LD_INT 4
75588: NEG
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PUSH
75594: LD_INT 1
75596: PUSH
75597: LD_INT 3
75599: NEG
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 1
75607: NEG
75608: PUSH
75609: LD_INT 5
75611: NEG
75612: PUSH
75613: EMPTY
75614: LIST
75615: LIST
75616: PUSH
75617: LD_INT 0
75619: PUSH
75620: LD_INT 5
75622: NEG
75623: PUSH
75624: EMPTY
75625: LIST
75626: LIST
75627: PUSH
75628: LD_INT 1
75630: PUSH
75631: LD_INT 4
75633: NEG
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 1
75641: NEG
75642: PUSH
75643: LD_INT 6
75645: NEG
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: PUSH
75651: LD_INT 0
75653: PUSH
75654: LD_INT 6
75656: NEG
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 1
75664: PUSH
75665: LD_INT 5
75667: NEG
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75687: LD_ADDR_VAR 0 30
75691: PUSH
75692: LD_INT 2
75694: PUSH
75695: LD_INT 1
75697: NEG
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PUSH
75703: LD_INT 3
75705: PUSH
75706: LD_INT 0
75708: PUSH
75709: EMPTY
75710: LIST
75711: LIST
75712: PUSH
75713: LD_INT 3
75715: PUSH
75716: LD_INT 1
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 3
75725: PUSH
75726: LD_INT 1
75728: NEG
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 4
75736: PUSH
75737: LD_INT 0
75739: PUSH
75740: EMPTY
75741: LIST
75742: LIST
75743: PUSH
75744: LD_INT 4
75746: PUSH
75747: LD_INT 1
75749: PUSH
75750: EMPTY
75751: LIST
75752: LIST
75753: PUSH
75754: LD_INT 4
75756: PUSH
75757: LD_INT 1
75759: NEG
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 5
75767: PUSH
75768: LD_INT 0
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: LD_INT 5
75777: PUSH
75778: LD_INT 1
75780: PUSH
75781: EMPTY
75782: LIST
75783: LIST
75784: PUSH
75785: LD_INT 5
75787: PUSH
75788: LD_INT 1
75790: NEG
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 6
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: LD_INT 6
75808: PUSH
75809: LD_INT 1
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: LIST
75823: LIST
75824: LIST
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
75830: LD_ADDR_VAR 0 31
75834: PUSH
75835: LD_INT 3
75837: PUSH
75838: LD_INT 2
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 3
75847: PUSH
75848: LD_INT 3
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: LD_INT 2
75857: PUSH
75858: LD_INT 3
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 4
75867: PUSH
75868: LD_INT 3
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 4
75877: PUSH
75878: LD_INT 4
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 3
75887: PUSH
75888: LD_INT 4
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 5
75897: PUSH
75898: LD_INT 4
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 5
75907: PUSH
75908: LD_INT 5
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 4
75917: PUSH
75918: LD_INT 5
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 6
75927: PUSH
75928: LD_INT 5
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 6
75937: PUSH
75938: LD_INT 6
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 5
75947: PUSH
75948: LD_INT 6
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: EMPTY
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: LIST
75961: LIST
75962: LIST
75963: LIST
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
75969: LD_ADDR_VAR 0 32
75973: PUSH
75974: LD_INT 1
75976: PUSH
75977: LD_INT 3
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_INT 0
75986: PUSH
75987: LD_INT 3
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: PUSH
75994: LD_INT 1
75996: NEG
75997: PUSH
75998: LD_INT 2
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 1
76007: PUSH
76008: LD_INT 4
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: LD_INT 0
76017: PUSH
76018: LD_INT 4
76020: PUSH
76021: EMPTY
76022: LIST
76023: LIST
76024: PUSH
76025: LD_INT 1
76027: NEG
76028: PUSH
76029: LD_INT 3
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 1
76038: PUSH
76039: LD_INT 5
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 0
76048: PUSH
76049: LD_INT 5
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_INT 1
76058: NEG
76059: PUSH
76060: LD_INT 4
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: LD_INT 1
76069: PUSH
76070: LD_INT 6
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: PUSH
76077: LD_INT 0
76079: PUSH
76080: LD_INT 6
76082: PUSH
76083: EMPTY
76084: LIST
76085: LIST
76086: PUSH
76087: LD_INT 1
76089: NEG
76090: PUSH
76091: LD_INT 5
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: LIST
76104: LIST
76105: LIST
76106: LIST
76107: LIST
76108: LIST
76109: LIST
76110: LIST
76111: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
76112: LD_ADDR_VAR 0 33
76116: PUSH
76117: LD_INT 2
76119: NEG
76120: PUSH
76121: LD_INT 1
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: PUSH
76128: LD_INT 3
76130: NEG
76131: PUSH
76132: LD_INT 0
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: PUSH
76139: LD_INT 3
76141: NEG
76142: PUSH
76143: LD_INT 1
76145: NEG
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 3
76153: NEG
76154: PUSH
76155: LD_INT 1
76157: PUSH
76158: EMPTY
76159: LIST
76160: LIST
76161: PUSH
76162: LD_INT 4
76164: NEG
76165: PUSH
76166: LD_INT 0
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: PUSH
76173: LD_INT 4
76175: NEG
76176: PUSH
76177: LD_INT 1
76179: NEG
76180: PUSH
76181: EMPTY
76182: LIST
76183: LIST
76184: PUSH
76185: LD_INT 4
76187: NEG
76188: PUSH
76189: LD_INT 1
76191: PUSH
76192: EMPTY
76193: LIST
76194: LIST
76195: PUSH
76196: LD_INT 5
76198: NEG
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 5
76209: NEG
76210: PUSH
76211: LD_INT 1
76213: NEG
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 5
76221: NEG
76222: PUSH
76223: LD_INT 1
76225: PUSH
76226: EMPTY
76227: LIST
76228: LIST
76229: PUSH
76230: LD_INT 6
76232: NEG
76233: PUSH
76234: LD_INT 0
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 6
76243: NEG
76244: PUSH
76245: LD_INT 1
76247: NEG
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: PUSH
76253: EMPTY
76254: LIST
76255: LIST
76256: LIST
76257: LIST
76258: LIST
76259: LIST
76260: LIST
76261: LIST
76262: LIST
76263: LIST
76264: LIST
76265: LIST
76266: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
76267: LD_ADDR_VAR 0 34
76271: PUSH
76272: LD_INT 2
76274: NEG
76275: PUSH
76276: LD_INT 3
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 3
76286: NEG
76287: PUSH
76288: LD_INT 2
76290: NEG
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 3
76298: NEG
76299: PUSH
76300: LD_INT 3
76302: NEG
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: PUSH
76308: LD_INT 3
76310: NEG
76311: PUSH
76312: LD_INT 4
76314: NEG
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: LD_INT 4
76322: NEG
76323: PUSH
76324: LD_INT 3
76326: NEG
76327: PUSH
76328: EMPTY
76329: LIST
76330: LIST
76331: PUSH
76332: LD_INT 4
76334: NEG
76335: PUSH
76336: LD_INT 4
76338: NEG
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: LD_INT 4
76346: NEG
76347: PUSH
76348: LD_INT 5
76350: NEG
76351: PUSH
76352: EMPTY
76353: LIST
76354: LIST
76355: PUSH
76356: LD_INT 5
76358: NEG
76359: PUSH
76360: LD_INT 4
76362: NEG
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: LD_INT 5
76370: NEG
76371: PUSH
76372: LD_INT 5
76374: NEG
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 5
76382: NEG
76383: PUSH
76384: LD_INT 6
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 6
76394: NEG
76395: PUSH
76396: LD_INT 5
76398: NEG
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 6
76406: NEG
76407: PUSH
76408: LD_INT 6
76410: NEG
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: EMPTY
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
76430: LD_ADDR_VAR 0 41
76434: PUSH
76435: LD_INT 0
76437: PUSH
76438: LD_INT 2
76440: NEG
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 1
76448: NEG
76449: PUSH
76450: LD_INT 3
76452: NEG
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 1
76460: PUSH
76461: LD_INT 2
76463: NEG
76464: PUSH
76465: EMPTY
76466: LIST
76467: LIST
76468: PUSH
76469: EMPTY
76470: LIST
76471: LIST
76472: LIST
76473: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76474: LD_ADDR_VAR 0 42
76478: PUSH
76479: LD_INT 2
76481: PUSH
76482: LD_INT 0
76484: PUSH
76485: EMPTY
76486: LIST
76487: LIST
76488: PUSH
76489: LD_INT 2
76491: PUSH
76492: LD_INT 1
76494: NEG
76495: PUSH
76496: EMPTY
76497: LIST
76498: LIST
76499: PUSH
76500: LD_INT 3
76502: PUSH
76503: LD_INT 1
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: LIST
76514: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76515: LD_ADDR_VAR 0 43
76519: PUSH
76520: LD_INT 2
76522: PUSH
76523: LD_INT 2
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 3
76532: PUSH
76533: LD_INT 2
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: LD_INT 2
76542: PUSH
76543: LD_INT 3
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: LIST
76554: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76555: LD_ADDR_VAR 0 44
76559: PUSH
76560: LD_INT 0
76562: PUSH
76563: LD_INT 2
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 1
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: LD_INT 1
76582: NEG
76583: PUSH
76584: LD_INT 2
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: LIST
76595: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76596: LD_ADDR_VAR 0 45
76600: PUSH
76601: LD_INT 2
76603: NEG
76604: PUSH
76605: LD_INT 0
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PUSH
76612: LD_INT 2
76614: NEG
76615: PUSH
76616: LD_INT 1
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 3
76625: NEG
76626: PUSH
76627: LD_INT 1
76629: NEG
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: LIST
76639: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76640: LD_ADDR_VAR 0 46
76644: PUSH
76645: LD_INT 2
76647: NEG
76648: PUSH
76649: LD_INT 2
76651: NEG
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 2
76659: NEG
76660: PUSH
76661: LD_INT 3
76663: NEG
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 3
76671: NEG
76672: PUSH
76673: LD_INT 2
76675: NEG
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: LIST
76685: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76686: LD_ADDR_VAR 0 47
76690: PUSH
76691: LD_INT 2
76693: NEG
76694: PUSH
76695: LD_INT 3
76697: NEG
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 1
76705: NEG
76706: PUSH
76707: LD_INT 3
76709: NEG
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76719: LD_ADDR_VAR 0 48
76723: PUSH
76724: LD_INT 1
76726: PUSH
76727: LD_INT 2
76729: NEG
76730: PUSH
76731: EMPTY
76732: LIST
76733: LIST
76734: PUSH
76735: LD_INT 2
76737: PUSH
76738: LD_INT 1
76740: NEG
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: EMPTY
76747: LIST
76748: LIST
76749: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
76750: LD_ADDR_VAR 0 49
76754: PUSH
76755: LD_INT 3
76757: PUSH
76758: LD_INT 1
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 3
76767: PUSH
76768: LD_INT 2
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
76779: LD_ADDR_VAR 0 50
76783: PUSH
76784: LD_INT 2
76786: PUSH
76787: LD_INT 3
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 1
76796: PUSH
76797: LD_INT 3
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
76808: LD_ADDR_VAR 0 51
76812: PUSH
76813: LD_INT 1
76815: NEG
76816: PUSH
76817: LD_INT 2
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: LD_INT 2
76826: NEG
76827: PUSH
76828: LD_INT 1
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
76839: LD_ADDR_VAR 0 52
76843: PUSH
76844: LD_INT 3
76846: NEG
76847: PUSH
76848: LD_INT 1
76850: NEG
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: PUSH
76856: LD_INT 3
76858: NEG
76859: PUSH
76860: LD_INT 2
76862: NEG
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76872: LD_ADDR_VAR 0 53
76876: PUSH
76877: LD_INT 1
76879: NEG
76880: PUSH
76881: LD_INT 3
76883: NEG
76884: PUSH
76885: EMPTY
76886: LIST
76887: LIST
76888: PUSH
76889: LD_INT 0
76891: PUSH
76892: LD_INT 3
76894: NEG
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: LD_INT 1
76902: PUSH
76903: LD_INT 2
76905: NEG
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: LIST
76915: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76916: LD_ADDR_VAR 0 54
76920: PUSH
76921: LD_INT 2
76923: PUSH
76924: LD_INT 1
76926: NEG
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: LD_INT 3
76934: PUSH
76935: LD_INT 0
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_INT 3
76944: PUSH
76945: LD_INT 1
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: LIST
76956: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76957: LD_ADDR_VAR 0 55
76961: PUSH
76962: LD_INT 3
76964: PUSH
76965: LD_INT 2
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: LD_INT 3
76974: PUSH
76975: LD_INT 3
76977: PUSH
76978: EMPTY
76979: LIST
76980: LIST
76981: PUSH
76982: LD_INT 2
76984: PUSH
76985: LD_INT 3
76987: PUSH
76988: EMPTY
76989: LIST
76990: LIST
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: LIST
76996: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76997: LD_ADDR_VAR 0 56
77001: PUSH
77002: LD_INT 1
77004: PUSH
77005: LD_INT 3
77007: PUSH
77008: EMPTY
77009: LIST
77010: LIST
77011: PUSH
77012: LD_INT 0
77014: PUSH
77015: LD_INT 3
77017: PUSH
77018: EMPTY
77019: LIST
77020: LIST
77021: PUSH
77022: LD_INT 1
77024: NEG
77025: PUSH
77026: LD_INT 2
77028: PUSH
77029: EMPTY
77030: LIST
77031: LIST
77032: PUSH
77033: EMPTY
77034: LIST
77035: LIST
77036: LIST
77037: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77038: LD_ADDR_VAR 0 57
77042: PUSH
77043: LD_INT 2
77045: NEG
77046: PUSH
77047: LD_INT 1
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 3
77056: NEG
77057: PUSH
77058: LD_INT 0
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 3
77067: NEG
77068: PUSH
77069: LD_INT 1
77071: NEG
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: LIST
77081: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77082: LD_ADDR_VAR 0 58
77086: PUSH
77087: LD_INT 2
77089: NEG
77090: PUSH
77091: LD_INT 3
77093: NEG
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 3
77101: NEG
77102: PUSH
77103: LD_INT 2
77105: NEG
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: PUSH
77111: LD_INT 3
77113: NEG
77114: PUSH
77115: LD_INT 3
77117: NEG
77118: PUSH
77119: EMPTY
77120: LIST
77121: LIST
77122: PUSH
77123: EMPTY
77124: LIST
77125: LIST
77126: LIST
77127: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
77128: LD_ADDR_VAR 0 59
77132: PUSH
77133: LD_INT 1
77135: NEG
77136: PUSH
77137: LD_INT 2
77139: NEG
77140: PUSH
77141: EMPTY
77142: LIST
77143: LIST
77144: PUSH
77145: LD_INT 0
77147: PUSH
77148: LD_INT 2
77150: NEG
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: PUSH
77156: LD_INT 1
77158: PUSH
77159: LD_INT 1
77161: NEG
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: LIST
77171: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77172: LD_ADDR_VAR 0 60
77176: PUSH
77177: LD_INT 1
77179: PUSH
77180: LD_INT 1
77182: NEG
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: LD_INT 2
77190: PUSH
77191: LD_INT 0
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PUSH
77198: LD_INT 2
77200: PUSH
77201: LD_INT 1
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: EMPTY
77209: LIST
77210: LIST
77211: LIST
77212: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
77213: LD_ADDR_VAR 0 61
77217: PUSH
77218: LD_INT 2
77220: PUSH
77221: LD_INT 1
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: PUSH
77228: LD_INT 2
77230: PUSH
77231: LD_INT 2
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 1
77240: PUSH
77241: LD_INT 2
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: EMPTY
77249: LIST
77250: LIST
77251: LIST
77252: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77253: LD_ADDR_VAR 0 62
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: LD_INT 2
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PUSH
77268: LD_INT 0
77270: PUSH
77271: LD_INT 2
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: PUSH
77278: LD_INT 1
77280: NEG
77281: PUSH
77282: LD_INT 1
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: LIST
77293: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77294: LD_ADDR_VAR 0 63
77298: PUSH
77299: LD_INT 1
77301: NEG
77302: PUSH
77303: LD_INT 1
77305: PUSH
77306: EMPTY
77307: LIST
77308: LIST
77309: PUSH
77310: LD_INT 2
77312: NEG
77313: PUSH
77314: LD_INT 0
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 2
77323: NEG
77324: PUSH
77325: LD_INT 1
77327: NEG
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: LIST
77337: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77338: LD_ADDR_VAR 0 64
77342: PUSH
77343: LD_INT 1
77345: NEG
77346: PUSH
77347: LD_INT 2
77349: NEG
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: PUSH
77355: LD_INT 2
77357: NEG
77358: PUSH
77359: LD_INT 1
77361: NEG
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 2
77369: NEG
77370: PUSH
77371: LD_INT 2
77373: NEG
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: LIST
77383: ST_TO_ADDR
// end ; 2 :
77384: GO 80650
77386: LD_INT 2
77388: DOUBLE
77389: EQUAL
77390: IFTRUE 77394
77392: GO 80649
77394: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
77395: LD_ADDR_VAR 0 29
77399: PUSH
77400: LD_INT 4
77402: PUSH
77403: LD_INT 0
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: LD_INT 4
77412: PUSH
77413: LD_INT 1
77415: NEG
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 5
77423: PUSH
77424: LD_INT 0
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 5
77433: PUSH
77434: LD_INT 1
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 4
77443: PUSH
77444: LD_INT 1
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: PUSH
77451: LD_INT 3
77453: PUSH
77454: LD_INT 0
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: PUSH
77461: LD_INT 3
77463: PUSH
77464: LD_INT 1
77466: NEG
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 3
77474: PUSH
77475: LD_INT 2
77477: NEG
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 5
77485: PUSH
77486: LD_INT 2
77488: PUSH
77489: EMPTY
77490: LIST
77491: LIST
77492: PUSH
77493: LD_INT 3
77495: PUSH
77496: LD_INT 3
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: PUSH
77503: LD_INT 3
77505: PUSH
77506: LD_INT 2
77508: PUSH
77509: EMPTY
77510: LIST
77511: LIST
77512: PUSH
77513: LD_INT 4
77515: PUSH
77516: LD_INT 3
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 4
77525: PUSH
77526: LD_INT 4
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PUSH
77533: LD_INT 3
77535: PUSH
77536: LD_INT 4
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 2
77545: PUSH
77546: LD_INT 3
77548: PUSH
77549: EMPTY
77550: LIST
77551: LIST
77552: PUSH
77553: LD_INT 2
77555: PUSH
77556: LD_INT 2
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 4
77565: PUSH
77566: LD_INT 2
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: LD_INT 2
77575: PUSH
77576: LD_INT 4
77578: PUSH
77579: EMPTY
77580: LIST
77581: LIST
77582: PUSH
77583: LD_INT 0
77585: PUSH
77586: LD_INT 4
77588: PUSH
77589: EMPTY
77590: LIST
77591: LIST
77592: PUSH
77593: LD_INT 0
77595: PUSH
77596: LD_INT 3
77598: PUSH
77599: EMPTY
77600: LIST
77601: LIST
77602: PUSH
77603: LD_INT 1
77605: PUSH
77606: LD_INT 4
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 1
77615: PUSH
77616: LD_INT 5
77618: PUSH
77619: EMPTY
77620: LIST
77621: LIST
77622: PUSH
77623: LD_INT 0
77625: PUSH
77626: LD_INT 5
77628: PUSH
77629: EMPTY
77630: LIST
77631: LIST
77632: PUSH
77633: LD_INT 1
77635: NEG
77636: PUSH
77637: LD_INT 4
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: LD_INT 1
77646: NEG
77647: PUSH
77648: LD_INT 3
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PUSH
77655: LD_INT 2
77657: PUSH
77658: LD_INT 5
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 2
77667: NEG
77668: PUSH
77669: LD_INT 3
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: PUSH
77676: LD_INT 3
77678: NEG
77679: PUSH
77680: LD_INT 0
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: LD_INT 3
77689: NEG
77690: PUSH
77691: LD_INT 1
77693: NEG
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: PUSH
77699: LD_INT 2
77701: NEG
77702: PUSH
77703: LD_INT 0
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: PUSH
77710: LD_INT 2
77712: NEG
77713: PUSH
77714: LD_INT 1
77716: PUSH
77717: EMPTY
77718: LIST
77719: LIST
77720: PUSH
77721: LD_INT 3
77723: NEG
77724: PUSH
77725: LD_INT 1
77727: PUSH
77728: EMPTY
77729: LIST
77730: LIST
77731: PUSH
77732: LD_INT 4
77734: NEG
77735: PUSH
77736: LD_INT 0
77738: PUSH
77739: EMPTY
77740: LIST
77741: LIST
77742: PUSH
77743: LD_INT 4
77745: NEG
77746: PUSH
77747: LD_INT 1
77749: NEG
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PUSH
77755: LD_INT 4
77757: NEG
77758: PUSH
77759: LD_INT 2
77761: NEG
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: LD_INT 2
77769: NEG
77770: PUSH
77771: LD_INT 2
77773: PUSH
77774: EMPTY
77775: LIST
77776: LIST
77777: PUSH
77778: LD_INT 4
77780: NEG
77781: PUSH
77782: LD_INT 4
77784: NEG
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: LD_INT 4
77792: NEG
77793: PUSH
77794: LD_INT 5
77796: NEG
77797: PUSH
77798: EMPTY
77799: LIST
77800: LIST
77801: PUSH
77802: LD_INT 3
77804: NEG
77805: PUSH
77806: LD_INT 4
77808: NEG
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 3
77816: NEG
77817: PUSH
77818: LD_INT 3
77820: NEG
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 4
77828: NEG
77829: PUSH
77830: LD_INT 3
77832: NEG
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 5
77840: NEG
77841: PUSH
77842: LD_INT 4
77844: NEG
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: PUSH
77850: LD_INT 5
77852: NEG
77853: PUSH
77854: LD_INT 5
77856: NEG
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: PUSH
77862: LD_INT 3
77864: NEG
77865: PUSH
77866: LD_INT 5
77868: NEG
77869: PUSH
77870: EMPTY
77871: LIST
77872: LIST
77873: PUSH
77874: LD_INT 5
77876: NEG
77877: PUSH
77878: LD_INT 3
77880: NEG
77881: PUSH
77882: EMPTY
77883: LIST
77884: LIST
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: LIST
77903: LIST
77904: LIST
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: LIST
77918: LIST
77919: LIST
77920: LIST
77921: LIST
77922: LIST
77923: LIST
77924: LIST
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: LIST
77930: LIST
77931: LIST
77932: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
77933: LD_ADDR_VAR 0 30
77937: PUSH
77938: LD_INT 4
77940: PUSH
77941: LD_INT 4
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 4
77950: PUSH
77951: LD_INT 3
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 5
77960: PUSH
77961: LD_INT 4
77963: PUSH
77964: EMPTY
77965: LIST
77966: LIST
77967: PUSH
77968: LD_INT 5
77970: PUSH
77971: LD_INT 5
77973: PUSH
77974: EMPTY
77975: LIST
77976: LIST
77977: PUSH
77978: LD_INT 4
77980: PUSH
77981: LD_INT 5
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: PUSH
77988: LD_INT 3
77990: PUSH
77991: LD_INT 4
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: LD_INT 3
78000: PUSH
78001: LD_INT 3
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 5
78010: PUSH
78011: LD_INT 3
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 3
78020: PUSH
78021: LD_INT 5
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PUSH
78028: LD_INT 0
78030: PUSH
78031: LD_INT 3
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: LD_INT 0
78040: PUSH
78041: LD_INT 2
78043: PUSH
78044: EMPTY
78045: LIST
78046: LIST
78047: PUSH
78048: LD_INT 1
78050: PUSH
78051: LD_INT 3
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_INT 1
78060: PUSH
78061: LD_INT 4
78063: PUSH
78064: EMPTY
78065: LIST
78066: LIST
78067: PUSH
78068: LD_INT 0
78070: PUSH
78071: LD_INT 4
78073: PUSH
78074: EMPTY
78075: LIST
78076: LIST
78077: PUSH
78078: LD_INT 1
78080: NEG
78081: PUSH
78082: LD_INT 3
78084: PUSH
78085: EMPTY
78086: LIST
78087: LIST
78088: PUSH
78089: LD_INT 1
78091: NEG
78092: PUSH
78093: LD_INT 2
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: LD_INT 2
78102: PUSH
78103: LD_INT 4
78105: PUSH
78106: EMPTY
78107: LIST
78108: LIST
78109: PUSH
78110: LD_INT 2
78112: NEG
78113: PUSH
78114: LD_INT 2
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PUSH
78121: LD_INT 4
78123: NEG
78124: PUSH
78125: LD_INT 0
78127: PUSH
78128: EMPTY
78129: LIST
78130: LIST
78131: PUSH
78132: LD_INT 4
78134: NEG
78135: PUSH
78136: LD_INT 1
78138: NEG
78139: PUSH
78140: EMPTY
78141: LIST
78142: LIST
78143: PUSH
78144: LD_INT 3
78146: NEG
78147: PUSH
78148: LD_INT 0
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: PUSH
78155: LD_INT 3
78157: NEG
78158: PUSH
78159: LD_INT 1
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: LD_INT 4
78168: NEG
78169: PUSH
78170: LD_INT 1
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: LD_INT 5
78179: NEG
78180: PUSH
78181: LD_INT 0
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: LD_INT 5
78190: NEG
78191: PUSH
78192: LD_INT 1
78194: NEG
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: LD_INT 5
78202: NEG
78203: PUSH
78204: LD_INT 2
78206: NEG
78207: PUSH
78208: EMPTY
78209: LIST
78210: LIST
78211: PUSH
78212: LD_INT 3
78214: NEG
78215: PUSH
78216: LD_INT 2
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 3
78225: NEG
78226: PUSH
78227: LD_INT 3
78229: NEG
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: PUSH
78235: LD_INT 3
78237: NEG
78238: PUSH
78239: LD_INT 4
78241: NEG
78242: PUSH
78243: EMPTY
78244: LIST
78245: LIST
78246: PUSH
78247: LD_INT 2
78249: NEG
78250: PUSH
78251: LD_INT 3
78253: NEG
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: LD_INT 2
78261: NEG
78262: PUSH
78263: LD_INT 2
78265: NEG
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: PUSH
78271: LD_INT 3
78273: NEG
78274: PUSH
78275: LD_INT 2
78277: NEG
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: PUSH
78283: LD_INT 4
78285: NEG
78286: PUSH
78287: LD_INT 3
78289: NEG
78290: PUSH
78291: EMPTY
78292: LIST
78293: LIST
78294: PUSH
78295: LD_INT 4
78297: NEG
78298: PUSH
78299: LD_INT 4
78301: NEG
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 2
78309: NEG
78310: PUSH
78311: LD_INT 4
78313: NEG
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: LD_INT 4
78321: NEG
78322: PUSH
78323: LD_INT 2
78325: NEG
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: LD_INT 0
78333: PUSH
78334: LD_INT 4
78336: NEG
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 0
78344: PUSH
78345: LD_INT 5
78347: NEG
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: PUSH
78353: LD_INT 1
78355: PUSH
78356: LD_INT 4
78358: NEG
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 1
78366: PUSH
78367: LD_INT 3
78369: NEG
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: PUSH
78375: LD_INT 0
78377: PUSH
78378: LD_INT 3
78380: NEG
78381: PUSH
78382: EMPTY
78383: LIST
78384: LIST
78385: PUSH
78386: LD_INT 1
78388: NEG
78389: PUSH
78390: LD_INT 4
78392: NEG
78393: PUSH
78394: EMPTY
78395: LIST
78396: LIST
78397: PUSH
78398: LD_INT 1
78400: NEG
78401: PUSH
78402: LD_INT 5
78404: NEG
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PUSH
78410: LD_INT 2
78412: PUSH
78413: LD_INT 3
78415: NEG
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 2
78423: NEG
78424: PUSH
78425: LD_INT 5
78427: NEG
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: LIST
78442: LIST
78443: LIST
78444: LIST
78445: LIST
78446: LIST
78447: LIST
78448: LIST
78449: LIST
78450: LIST
78451: LIST
78452: LIST
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: LIST
78458: LIST
78459: LIST
78460: LIST
78461: LIST
78462: LIST
78463: LIST
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: LIST
78470: LIST
78471: LIST
78472: LIST
78473: LIST
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78480: LD_ADDR_VAR 0 31
78484: PUSH
78485: LD_INT 0
78487: PUSH
78488: LD_INT 4
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PUSH
78495: LD_INT 0
78497: PUSH
78498: LD_INT 3
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PUSH
78505: LD_INT 1
78507: PUSH
78508: LD_INT 4
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PUSH
78515: LD_INT 1
78517: PUSH
78518: LD_INT 5
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_INT 0
78527: PUSH
78528: LD_INT 5
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: PUSH
78535: LD_INT 1
78537: NEG
78538: PUSH
78539: LD_INT 4
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: PUSH
78546: LD_INT 1
78548: NEG
78549: PUSH
78550: LD_INT 3
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 2
78559: PUSH
78560: LD_INT 5
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 2
78569: NEG
78570: PUSH
78571: LD_INT 3
78573: PUSH
78574: EMPTY
78575: LIST
78576: LIST
78577: PUSH
78578: LD_INT 3
78580: NEG
78581: PUSH
78582: LD_INT 0
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: PUSH
78589: LD_INT 3
78591: NEG
78592: PUSH
78593: LD_INT 1
78595: NEG
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 2
78603: NEG
78604: PUSH
78605: LD_INT 0
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 2
78614: NEG
78615: PUSH
78616: LD_INT 1
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: LD_INT 3
78625: NEG
78626: PUSH
78627: LD_INT 1
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PUSH
78634: LD_INT 4
78636: NEG
78637: PUSH
78638: LD_INT 0
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PUSH
78645: LD_INT 4
78647: NEG
78648: PUSH
78649: LD_INT 1
78651: NEG
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 4
78659: NEG
78660: PUSH
78661: LD_INT 2
78663: NEG
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: PUSH
78669: LD_INT 2
78671: NEG
78672: PUSH
78673: LD_INT 2
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: PUSH
78680: LD_INT 4
78682: NEG
78683: PUSH
78684: LD_INT 4
78686: NEG
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: PUSH
78692: LD_INT 4
78694: NEG
78695: PUSH
78696: LD_INT 5
78698: NEG
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: LD_INT 3
78706: NEG
78707: PUSH
78708: LD_INT 4
78710: NEG
78711: PUSH
78712: EMPTY
78713: LIST
78714: LIST
78715: PUSH
78716: LD_INT 3
78718: NEG
78719: PUSH
78720: LD_INT 3
78722: NEG
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PUSH
78728: LD_INT 4
78730: NEG
78731: PUSH
78732: LD_INT 3
78734: NEG
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 5
78742: NEG
78743: PUSH
78744: LD_INT 4
78746: NEG
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: LD_INT 5
78754: NEG
78755: PUSH
78756: LD_INT 5
78758: NEG
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 3
78766: NEG
78767: PUSH
78768: LD_INT 5
78770: NEG
78771: PUSH
78772: EMPTY
78773: LIST
78774: LIST
78775: PUSH
78776: LD_INT 5
78778: NEG
78779: PUSH
78780: LD_INT 3
78782: NEG
78783: PUSH
78784: EMPTY
78785: LIST
78786: LIST
78787: PUSH
78788: LD_INT 0
78790: PUSH
78791: LD_INT 3
78793: NEG
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 0
78801: PUSH
78802: LD_INT 4
78804: NEG
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: PUSH
78810: LD_INT 1
78812: PUSH
78813: LD_INT 3
78815: NEG
78816: PUSH
78817: EMPTY
78818: LIST
78819: LIST
78820: PUSH
78821: LD_INT 1
78823: PUSH
78824: LD_INT 2
78826: NEG
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: LD_INT 2
78837: NEG
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: LD_INT 1
78845: NEG
78846: PUSH
78847: LD_INT 3
78849: NEG
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: PUSH
78855: LD_INT 1
78857: NEG
78858: PUSH
78859: LD_INT 4
78861: NEG
78862: PUSH
78863: EMPTY
78864: LIST
78865: LIST
78866: PUSH
78867: LD_INT 2
78869: PUSH
78870: LD_INT 2
78872: NEG
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 2
78880: NEG
78881: PUSH
78882: LD_INT 4
78884: NEG
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 4
78892: PUSH
78893: LD_INT 0
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 4
78902: PUSH
78903: LD_INT 1
78905: NEG
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PUSH
78911: LD_INT 5
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PUSH
78921: LD_INT 5
78923: PUSH
78924: LD_INT 1
78926: PUSH
78927: EMPTY
78928: LIST
78929: LIST
78930: PUSH
78931: LD_INT 4
78933: PUSH
78934: LD_INT 1
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: LD_INT 3
78943: PUSH
78944: LD_INT 0
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PUSH
78951: LD_INT 3
78953: PUSH
78954: LD_INT 1
78956: NEG
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PUSH
78962: LD_INT 3
78964: PUSH
78965: LD_INT 2
78967: NEG
78968: PUSH
78969: EMPTY
78970: LIST
78971: LIST
78972: PUSH
78973: LD_INT 5
78975: PUSH
78976: LD_INT 2
78978: PUSH
78979: EMPTY
78980: LIST
78981: LIST
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: LIST
78990: LIST
78991: LIST
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: LIST
79004: LIST
79005: LIST
79006: LIST
79007: LIST
79008: LIST
79009: LIST
79010: LIST
79011: LIST
79012: LIST
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: LIST
79021: LIST
79022: LIST
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: LIST
79028: LIST
79029: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
79030: LD_ADDR_VAR 0 32
79034: PUSH
79035: LD_INT 4
79037: NEG
79038: PUSH
79039: LD_INT 0
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PUSH
79046: LD_INT 4
79048: NEG
79049: PUSH
79050: LD_INT 1
79052: NEG
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 3
79060: NEG
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 3
79071: NEG
79072: PUSH
79073: LD_INT 1
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: LD_INT 4
79082: NEG
79083: PUSH
79084: LD_INT 1
79086: PUSH
79087: EMPTY
79088: LIST
79089: LIST
79090: PUSH
79091: LD_INT 5
79093: NEG
79094: PUSH
79095: LD_INT 0
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: PUSH
79102: LD_INT 5
79104: NEG
79105: PUSH
79106: LD_INT 1
79108: NEG
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: PUSH
79114: LD_INT 5
79116: NEG
79117: PUSH
79118: LD_INT 2
79120: NEG
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: PUSH
79126: LD_INT 3
79128: NEG
79129: PUSH
79130: LD_INT 2
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: PUSH
79137: LD_INT 3
79139: NEG
79140: PUSH
79141: LD_INT 3
79143: NEG
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: PUSH
79149: LD_INT 3
79151: NEG
79152: PUSH
79153: LD_INT 4
79155: NEG
79156: PUSH
79157: EMPTY
79158: LIST
79159: LIST
79160: PUSH
79161: LD_INT 2
79163: NEG
79164: PUSH
79165: LD_INT 3
79167: NEG
79168: PUSH
79169: EMPTY
79170: LIST
79171: LIST
79172: PUSH
79173: LD_INT 2
79175: NEG
79176: PUSH
79177: LD_INT 2
79179: NEG
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: LD_INT 3
79187: NEG
79188: PUSH
79189: LD_INT 2
79191: NEG
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: PUSH
79197: LD_INT 4
79199: NEG
79200: PUSH
79201: LD_INT 3
79203: NEG
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 4
79211: NEG
79212: PUSH
79213: LD_INT 4
79215: NEG
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PUSH
79221: LD_INT 2
79223: NEG
79224: PUSH
79225: LD_INT 4
79227: NEG
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PUSH
79233: LD_INT 4
79235: NEG
79236: PUSH
79237: LD_INT 2
79239: NEG
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: LD_INT 0
79247: PUSH
79248: LD_INT 4
79250: NEG
79251: PUSH
79252: EMPTY
79253: LIST
79254: LIST
79255: PUSH
79256: LD_INT 0
79258: PUSH
79259: LD_INT 5
79261: NEG
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: LD_INT 1
79269: PUSH
79270: LD_INT 4
79272: NEG
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 1
79280: PUSH
79281: LD_INT 3
79283: NEG
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 0
79291: PUSH
79292: LD_INT 3
79294: NEG
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PUSH
79300: LD_INT 1
79302: NEG
79303: PUSH
79304: LD_INT 4
79306: NEG
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: PUSH
79312: LD_INT 1
79314: NEG
79315: PUSH
79316: LD_INT 5
79318: NEG
79319: PUSH
79320: EMPTY
79321: LIST
79322: LIST
79323: PUSH
79324: LD_INT 2
79326: PUSH
79327: LD_INT 3
79329: NEG
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: LD_INT 2
79337: NEG
79338: PUSH
79339: LD_INT 5
79341: NEG
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: PUSH
79347: LD_INT 3
79349: PUSH
79350: LD_INT 0
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 3
79359: PUSH
79360: LD_INT 1
79362: NEG
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 4
79370: PUSH
79371: LD_INT 0
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: LD_INT 4
79380: PUSH
79381: LD_INT 1
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_INT 3
79390: PUSH
79391: LD_INT 1
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: PUSH
79398: LD_INT 2
79400: PUSH
79401: LD_INT 0
79403: PUSH
79404: EMPTY
79405: LIST
79406: LIST
79407: PUSH
79408: LD_INT 2
79410: PUSH
79411: LD_INT 1
79413: NEG
79414: PUSH
79415: EMPTY
79416: LIST
79417: LIST
79418: PUSH
79419: LD_INT 2
79421: PUSH
79422: LD_INT 2
79424: NEG
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PUSH
79430: LD_INT 4
79432: PUSH
79433: LD_INT 2
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 4
79442: PUSH
79443: LD_INT 4
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 4
79452: PUSH
79453: LD_INT 3
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 5
79462: PUSH
79463: LD_INT 4
79465: PUSH
79466: EMPTY
79467: LIST
79468: LIST
79469: PUSH
79470: LD_INT 5
79472: PUSH
79473: LD_INT 5
79475: PUSH
79476: EMPTY
79477: LIST
79478: LIST
79479: PUSH
79480: LD_INT 4
79482: PUSH
79483: LD_INT 5
79485: PUSH
79486: EMPTY
79487: LIST
79488: LIST
79489: PUSH
79490: LD_INT 3
79492: PUSH
79493: LD_INT 4
79495: PUSH
79496: EMPTY
79497: LIST
79498: LIST
79499: PUSH
79500: LD_INT 3
79502: PUSH
79503: LD_INT 3
79505: PUSH
79506: EMPTY
79507: LIST
79508: LIST
79509: PUSH
79510: LD_INT 5
79512: PUSH
79513: LD_INT 3
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: PUSH
79520: LD_INT 3
79522: PUSH
79523: LD_INT 5
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PUSH
79530: EMPTY
79531: LIST
79532: LIST
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: LIST
79542: LIST
79543: LIST
79544: LIST
79545: LIST
79546: LIST
79547: LIST
79548: LIST
79549: LIST
79550: LIST
79551: LIST
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: LIST
79560: LIST
79561: LIST
79562: LIST
79563: LIST
79564: LIST
79565: LIST
79566: LIST
79567: LIST
79568: LIST
79569: LIST
79570: LIST
79571: LIST
79572: LIST
79573: LIST
79574: LIST
79575: LIST
79576: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79577: LD_ADDR_VAR 0 33
79581: PUSH
79582: LD_INT 4
79584: NEG
79585: PUSH
79586: LD_INT 4
79588: NEG
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: PUSH
79594: LD_INT 4
79596: NEG
79597: PUSH
79598: LD_INT 5
79600: NEG
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: PUSH
79606: LD_INT 3
79608: NEG
79609: PUSH
79610: LD_INT 4
79612: NEG
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: LD_INT 3
79620: NEG
79621: PUSH
79622: LD_INT 3
79624: NEG
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 4
79632: NEG
79633: PUSH
79634: LD_INT 3
79636: NEG
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: PUSH
79642: LD_INT 5
79644: NEG
79645: PUSH
79646: LD_INT 4
79648: NEG
79649: PUSH
79650: EMPTY
79651: LIST
79652: LIST
79653: PUSH
79654: LD_INT 5
79656: NEG
79657: PUSH
79658: LD_INT 5
79660: NEG
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: LD_INT 3
79668: NEG
79669: PUSH
79670: LD_INT 5
79672: NEG
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: LD_INT 5
79680: NEG
79681: PUSH
79682: LD_INT 3
79684: NEG
79685: PUSH
79686: EMPTY
79687: LIST
79688: LIST
79689: PUSH
79690: LD_INT 0
79692: PUSH
79693: LD_INT 3
79695: NEG
79696: PUSH
79697: EMPTY
79698: LIST
79699: LIST
79700: PUSH
79701: LD_INT 0
79703: PUSH
79704: LD_INT 4
79706: NEG
79707: PUSH
79708: EMPTY
79709: LIST
79710: LIST
79711: PUSH
79712: LD_INT 1
79714: PUSH
79715: LD_INT 3
79717: NEG
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: PUSH
79723: LD_INT 1
79725: PUSH
79726: LD_INT 2
79728: NEG
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 0
79736: PUSH
79737: LD_INT 2
79739: NEG
79740: PUSH
79741: EMPTY
79742: LIST
79743: LIST
79744: PUSH
79745: LD_INT 1
79747: NEG
79748: PUSH
79749: LD_INT 3
79751: NEG
79752: PUSH
79753: EMPTY
79754: LIST
79755: LIST
79756: PUSH
79757: LD_INT 1
79759: NEG
79760: PUSH
79761: LD_INT 4
79763: NEG
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 2
79771: PUSH
79772: LD_INT 2
79774: NEG
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: PUSH
79780: LD_INT 2
79782: NEG
79783: PUSH
79784: LD_INT 4
79786: NEG
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: PUSH
79792: LD_INT 4
79794: PUSH
79795: LD_INT 0
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: LD_INT 4
79804: PUSH
79805: LD_INT 1
79807: NEG
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: LD_INT 5
79815: PUSH
79816: LD_INT 0
79818: PUSH
79819: EMPTY
79820: LIST
79821: LIST
79822: PUSH
79823: LD_INT 5
79825: PUSH
79826: LD_INT 1
79828: PUSH
79829: EMPTY
79830: LIST
79831: LIST
79832: PUSH
79833: LD_INT 4
79835: PUSH
79836: LD_INT 1
79838: PUSH
79839: EMPTY
79840: LIST
79841: LIST
79842: PUSH
79843: LD_INT 3
79845: PUSH
79846: LD_INT 0
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 3
79855: PUSH
79856: LD_INT 1
79858: NEG
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: PUSH
79864: LD_INT 3
79866: PUSH
79867: LD_INT 2
79869: NEG
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 5
79877: PUSH
79878: LD_INT 2
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PUSH
79885: LD_INT 3
79887: PUSH
79888: LD_INT 3
79890: PUSH
79891: EMPTY
79892: LIST
79893: LIST
79894: PUSH
79895: LD_INT 3
79897: PUSH
79898: LD_INT 2
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: PUSH
79905: LD_INT 4
79907: PUSH
79908: LD_INT 3
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: LD_INT 4
79917: PUSH
79918: LD_INT 4
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PUSH
79925: LD_INT 3
79927: PUSH
79928: LD_INT 4
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 2
79937: PUSH
79938: LD_INT 3
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PUSH
79945: LD_INT 2
79947: PUSH
79948: LD_INT 2
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 4
79957: PUSH
79958: LD_INT 2
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 2
79967: PUSH
79968: LD_INT 4
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 0
79977: PUSH
79978: LD_INT 4
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 0
79987: PUSH
79988: LD_INT 3
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: PUSH
79995: LD_INT 1
79997: PUSH
79998: LD_INT 4
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: PUSH
80005: LD_INT 1
80007: PUSH
80008: LD_INT 5
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: PUSH
80015: LD_INT 0
80017: PUSH
80018: LD_INT 5
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PUSH
80025: LD_INT 1
80027: NEG
80028: PUSH
80029: LD_INT 4
80031: PUSH
80032: EMPTY
80033: LIST
80034: LIST
80035: PUSH
80036: LD_INT 1
80038: NEG
80039: PUSH
80040: LD_INT 3
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 2
80049: PUSH
80050: LD_INT 5
80052: PUSH
80053: EMPTY
80054: LIST
80055: LIST
80056: PUSH
80057: LD_INT 2
80059: NEG
80060: PUSH
80061: LD_INT 3
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: EMPTY
80069: LIST
80070: LIST
80071: LIST
80072: LIST
80073: LIST
80074: LIST
80075: LIST
80076: LIST
80077: LIST
80078: LIST
80079: LIST
80080: LIST
80081: LIST
80082: LIST
80083: LIST
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: LIST
80089: LIST
80090: LIST
80091: LIST
80092: LIST
80093: LIST
80094: LIST
80095: LIST
80096: LIST
80097: LIST
80098: LIST
80099: LIST
80100: LIST
80101: LIST
80102: LIST
80103: LIST
80104: LIST
80105: LIST
80106: LIST
80107: LIST
80108: LIST
80109: LIST
80110: LIST
80111: LIST
80112: LIST
80113: LIST
80114: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
80115: LD_ADDR_VAR 0 34
80119: PUSH
80120: LD_INT 0
80122: PUSH
80123: LD_INT 4
80125: NEG
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: LD_INT 0
80133: PUSH
80134: LD_INT 5
80136: NEG
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 1
80144: PUSH
80145: LD_INT 4
80147: NEG
80148: PUSH
80149: EMPTY
80150: LIST
80151: LIST
80152: PUSH
80153: LD_INT 1
80155: PUSH
80156: LD_INT 3
80158: NEG
80159: PUSH
80160: EMPTY
80161: LIST
80162: LIST
80163: PUSH
80164: LD_INT 0
80166: PUSH
80167: LD_INT 3
80169: NEG
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: PUSH
80175: LD_INT 1
80177: NEG
80178: PUSH
80179: LD_INT 4
80181: NEG
80182: PUSH
80183: EMPTY
80184: LIST
80185: LIST
80186: PUSH
80187: LD_INT 1
80189: NEG
80190: PUSH
80191: LD_INT 5
80193: NEG
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PUSH
80199: LD_INT 2
80201: PUSH
80202: LD_INT 3
80204: NEG
80205: PUSH
80206: EMPTY
80207: LIST
80208: LIST
80209: PUSH
80210: LD_INT 2
80212: NEG
80213: PUSH
80214: LD_INT 5
80216: NEG
80217: PUSH
80218: EMPTY
80219: LIST
80220: LIST
80221: PUSH
80222: LD_INT 3
80224: PUSH
80225: LD_INT 0
80227: PUSH
80228: EMPTY
80229: LIST
80230: LIST
80231: PUSH
80232: LD_INT 3
80234: PUSH
80235: LD_INT 1
80237: NEG
80238: PUSH
80239: EMPTY
80240: LIST
80241: LIST
80242: PUSH
80243: LD_INT 4
80245: PUSH
80246: LD_INT 0
80248: PUSH
80249: EMPTY
80250: LIST
80251: LIST
80252: PUSH
80253: LD_INT 4
80255: PUSH
80256: LD_INT 1
80258: PUSH
80259: EMPTY
80260: LIST
80261: LIST
80262: PUSH
80263: LD_INT 3
80265: PUSH
80266: LD_INT 1
80268: PUSH
80269: EMPTY
80270: LIST
80271: LIST
80272: PUSH
80273: LD_INT 2
80275: PUSH
80276: LD_INT 0
80278: PUSH
80279: EMPTY
80280: LIST
80281: LIST
80282: PUSH
80283: LD_INT 2
80285: PUSH
80286: LD_INT 1
80288: NEG
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PUSH
80294: LD_INT 2
80296: PUSH
80297: LD_INT 2
80299: NEG
80300: PUSH
80301: EMPTY
80302: LIST
80303: LIST
80304: PUSH
80305: LD_INT 4
80307: PUSH
80308: LD_INT 2
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PUSH
80315: LD_INT 4
80317: PUSH
80318: LD_INT 4
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: PUSH
80325: LD_INT 4
80327: PUSH
80328: LD_INT 3
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: PUSH
80335: LD_INT 5
80337: PUSH
80338: LD_INT 4
80340: PUSH
80341: EMPTY
80342: LIST
80343: LIST
80344: PUSH
80345: LD_INT 5
80347: PUSH
80348: LD_INT 5
80350: PUSH
80351: EMPTY
80352: LIST
80353: LIST
80354: PUSH
80355: LD_INT 4
80357: PUSH
80358: LD_INT 5
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: LD_INT 3
80367: PUSH
80368: LD_INT 4
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 3
80377: PUSH
80378: LD_INT 3
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 5
80387: PUSH
80388: LD_INT 3
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 3
80397: PUSH
80398: LD_INT 5
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 0
80407: PUSH
80408: LD_INT 3
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: LD_INT 0
80417: PUSH
80418: LD_INT 2
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PUSH
80425: LD_INT 1
80427: PUSH
80428: LD_INT 3
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: LD_INT 1
80437: PUSH
80438: LD_INT 4
80440: PUSH
80441: EMPTY
80442: LIST
80443: LIST
80444: PUSH
80445: LD_INT 0
80447: PUSH
80448: LD_INT 4
80450: PUSH
80451: EMPTY
80452: LIST
80453: LIST
80454: PUSH
80455: LD_INT 1
80457: NEG
80458: PUSH
80459: LD_INT 3
80461: PUSH
80462: EMPTY
80463: LIST
80464: LIST
80465: PUSH
80466: LD_INT 1
80468: NEG
80469: PUSH
80470: LD_INT 2
80472: PUSH
80473: EMPTY
80474: LIST
80475: LIST
80476: PUSH
80477: LD_INT 2
80479: PUSH
80480: LD_INT 4
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PUSH
80487: LD_INT 2
80489: NEG
80490: PUSH
80491: LD_INT 2
80493: PUSH
80494: EMPTY
80495: LIST
80496: LIST
80497: PUSH
80498: LD_INT 4
80500: NEG
80501: PUSH
80502: LD_INT 0
80504: PUSH
80505: EMPTY
80506: LIST
80507: LIST
80508: PUSH
80509: LD_INT 4
80511: NEG
80512: PUSH
80513: LD_INT 1
80515: NEG
80516: PUSH
80517: EMPTY
80518: LIST
80519: LIST
80520: PUSH
80521: LD_INT 3
80523: NEG
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PUSH
80532: LD_INT 3
80534: NEG
80535: PUSH
80536: LD_INT 1
80538: PUSH
80539: EMPTY
80540: LIST
80541: LIST
80542: PUSH
80543: LD_INT 4
80545: NEG
80546: PUSH
80547: LD_INT 1
80549: PUSH
80550: EMPTY
80551: LIST
80552: LIST
80553: PUSH
80554: LD_INT 5
80556: NEG
80557: PUSH
80558: LD_INT 0
80560: PUSH
80561: EMPTY
80562: LIST
80563: LIST
80564: PUSH
80565: LD_INT 5
80567: NEG
80568: PUSH
80569: LD_INT 1
80571: NEG
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: PUSH
80577: LD_INT 5
80579: NEG
80580: PUSH
80581: LD_INT 2
80583: NEG
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: LD_INT 3
80591: NEG
80592: PUSH
80593: LD_INT 2
80595: PUSH
80596: EMPTY
80597: LIST
80598: LIST
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: LIST
80604: LIST
80605: LIST
80606: LIST
80607: LIST
80608: LIST
80609: LIST
80610: LIST
80611: LIST
80612: LIST
80613: LIST
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: LIST
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: LIST
80633: LIST
80634: LIST
80635: LIST
80636: LIST
80637: LIST
80638: LIST
80639: LIST
80640: LIST
80641: LIST
80642: LIST
80643: LIST
80644: LIST
80645: LIST
80646: ST_TO_ADDR
// end ; end ;
80647: GO 80650
80649: POP
// case btype of b_depot , b_warehouse :
80650: LD_VAR 0 1
80654: PUSH
80655: LD_INT 0
80657: DOUBLE
80658: EQUAL
80659: IFTRUE 80669
80661: LD_INT 1
80663: DOUBLE
80664: EQUAL
80665: IFTRUE 80669
80667: GO 80870
80669: POP
// case nation of nation_american :
80670: LD_VAR 0 5
80674: PUSH
80675: LD_INT 1
80677: DOUBLE
80678: EQUAL
80679: IFTRUE 80683
80681: GO 80739
80683: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
80684: LD_ADDR_VAR 0 9
80688: PUSH
80689: LD_VAR 0 11
80693: PUSH
80694: LD_VAR 0 12
80698: PUSH
80699: LD_VAR 0 13
80703: PUSH
80704: LD_VAR 0 14
80708: PUSH
80709: LD_VAR 0 15
80713: PUSH
80714: LD_VAR 0 16
80718: PUSH
80719: EMPTY
80720: LIST
80721: LIST
80722: LIST
80723: LIST
80724: LIST
80725: LIST
80726: PUSH
80727: LD_VAR 0 4
80731: PUSH
80732: LD_INT 1
80734: PLUS
80735: ARRAY
80736: ST_TO_ADDR
80737: GO 80868
80739: LD_INT 2
80741: DOUBLE
80742: EQUAL
80743: IFTRUE 80747
80745: GO 80803
80747: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
80748: LD_ADDR_VAR 0 9
80752: PUSH
80753: LD_VAR 0 17
80757: PUSH
80758: LD_VAR 0 18
80762: PUSH
80763: LD_VAR 0 19
80767: PUSH
80768: LD_VAR 0 20
80772: PUSH
80773: LD_VAR 0 21
80777: PUSH
80778: LD_VAR 0 22
80782: PUSH
80783: EMPTY
80784: LIST
80785: LIST
80786: LIST
80787: LIST
80788: LIST
80789: LIST
80790: PUSH
80791: LD_VAR 0 4
80795: PUSH
80796: LD_INT 1
80798: PLUS
80799: ARRAY
80800: ST_TO_ADDR
80801: GO 80868
80803: LD_INT 3
80805: DOUBLE
80806: EQUAL
80807: IFTRUE 80811
80809: GO 80867
80811: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
80812: LD_ADDR_VAR 0 9
80816: PUSH
80817: LD_VAR 0 23
80821: PUSH
80822: LD_VAR 0 24
80826: PUSH
80827: LD_VAR 0 25
80831: PUSH
80832: LD_VAR 0 26
80836: PUSH
80837: LD_VAR 0 27
80841: PUSH
80842: LD_VAR 0 28
80846: PUSH
80847: EMPTY
80848: LIST
80849: LIST
80850: LIST
80851: LIST
80852: LIST
80853: LIST
80854: PUSH
80855: LD_VAR 0 4
80859: PUSH
80860: LD_INT 1
80862: PLUS
80863: ARRAY
80864: ST_TO_ADDR
80865: GO 80868
80867: POP
80868: GO 81423
80870: LD_INT 2
80872: DOUBLE
80873: EQUAL
80874: IFTRUE 80884
80876: LD_INT 3
80878: DOUBLE
80879: EQUAL
80880: IFTRUE 80884
80882: GO 80940
80884: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
80885: LD_ADDR_VAR 0 9
80889: PUSH
80890: LD_VAR 0 29
80894: PUSH
80895: LD_VAR 0 30
80899: PUSH
80900: LD_VAR 0 31
80904: PUSH
80905: LD_VAR 0 32
80909: PUSH
80910: LD_VAR 0 33
80914: PUSH
80915: LD_VAR 0 34
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: LIST
80924: LIST
80925: LIST
80926: LIST
80927: PUSH
80928: LD_VAR 0 4
80932: PUSH
80933: LD_INT 1
80935: PLUS
80936: ARRAY
80937: ST_TO_ADDR
80938: GO 81423
80940: LD_INT 16
80942: DOUBLE
80943: EQUAL
80944: IFTRUE 81002
80946: LD_INT 17
80948: DOUBLE
80949: EQUAL
80950: IFTRUE 81002
80952: LD_INT 18
80954: DOUBLE
80955: EQUAL
80956: IFTRUE 81002
80958: LD_INT 19
80960: DOUBLE
80961: EQUAL
80962: IFTRUE 81002
80964: LD_INT 22
80966: DOUBLE
80967: EQUAL
80968: IFTRUE 81002
80970: LD_INT 20
80972: DOUBLE
80973: EQUAL
80974: IFTRUE 81002
80976: LD_INT 21
80978: DOUBLE
80979: EQUAL
80980: IFTRUE 81002
80982: LD_INT 23
80984: DOUBLE
80985: EQUAL
80986: IFTRUE 81002
80988: LD_INT 24
80990: DOUBLE
80991: EQUAL
80992: IFTRUE 81002
80994: LD_INT 25
80996: DOUBLE
80997: EQUAL
80998: IFTRUE 81002
81000: GO 81058
81002: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
81003: LD_ADDR_VAR 0 9
81007: PUSH
81008: LD_VAR 0 35
81012: PUSH
81013: LD_VAR 0 36
81017: PUSH
81018: LD_VAR 0 37
81022: PUSH
81023: LD_VAR 0 38
81027: PUSH
81028: LD_VAR 0 39
81032: PUSH
81033: LD_VAR 0 40
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: PUSH
81046: LD_VAR 0 4
81050: PUSH
81051: LD_INT 1
81053: PLUS
81054: ARRAY
81055: ST_TO_ADDR
81056: GO 81423
81058: LD_INT 6
81060: DOUBLE
81061: EQUAL
81062: IFTRUE 81114
81064: LD_INT 7
81066: DOUBLE
81067: EQUAL
81068: IFTRUE 81114
81070: LD_INT 8
81072: DOUBLE
81073: EQUAL
81074: IFTRUE 81114
81076: LD_INT 13
81078: DOUBLE
81079: EQUAL
81080: IFTRUE 81114
81082: LD_INT 12
81084: DOUBLE
81085: EQUAL
81086: IFTRUE 81114
81088: LD_INT 15
81090: DOUBLE
81091: EQUAL
81092: IFTRUE 81114
81094: LD_INT 11
81096: DOUBLE
81097: EQUAL
81098: IFTRUE 81114
81100: LD_INT 14
81102: DOUBLE
81103: EQUAL
81104: IFTRUE 81114
81106: LD_INT 10
81108: DOUBLE
81109: EQUAL
81110: IFTRUE 81114
81112: GO 81170
81114: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
81115: LD_ADDR_VAR 0 9
81119: PUSH
81120: LD_VAR 0 41
81124: PUSH
81125: LD_VAR 0 42
81129: PUSH
81130: LD_VAR 0 43
81134: PUSH
81135: LD_VAR 0 44
81139: PUSH
81140: LD_VAR 0 45
81144: PUSH
81145: LD_VAR 0 46
81149: PUSH
81150: EMPTY
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: LIST
81156: LIST
81157: PUSH
81158: LD_VAR 0 4
81162: PUSH
81163: LD_INT 1
81165: PLUS
81166: ARRAY
81167: ST_TO_ADDR
81168: GO 81423
81170: LD_INT 36
81172: DOUBLE
81173: EQUAL
81174: IFTRUE 81178
81176: GO 81234
81178: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
81179: LD_ADDR_VAR 0 9
81183: PUSH
81184: LD_VAR 0 47
81188: PUSH
81189: LD_VAR 0 48
81193: PUSH
81194: LD_VAR 0 49
81198: PUSH
81199: LD_VAR 0 50
81203: PUSH
81204: LD_VAR 0 51
81208: PUSH
81209: LD_VAR 0 52
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: LIST
81218: LIST
81219: LIST
81220: LIST
81221: PUSH
81222: LD_VAR 0 4
81226: PUSH
81227: LD_INT 1
81229: PLUS
81230: ARRAY
81231: ST_TO_ADDR
81232: GO 81423
81234: LD_INT 4
81236: DOUBLE
81237: EQUAL
81238: IFTRUE 81260
81240: LD_INT 5
81242: DOUBLE
81243: EQUAL
81244: IFTRUE 81260
81246: LD_INT 34
81248: DOUBLE
81249: EQUAL
81250: IFTRUE 81260
81252: LD_INT 37
81254: DOUBLE
81255: EQUAL
81256: IFTRUE 81260
81258: GO 81316
81260: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
81261: LD_ADDR_VAR 0 9
81265: PUSH
81266: LD_VAR 0 53
81270: PUSH
81271: LD_VAR 0 54
81275: PUSH
81276: LD_VAR 0 55
81280: PUSH
81281: LD_VAR 0 56
81285: PUSH
81286: LD_VAR 0 57
81290: PUSH
81291: LD_VAR 0 58
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: LIST
81300: LIST
81301: LIST
81302: LIST
81303: PUSH
81304: LD_VAR 0 4
81308: PUSH
81309: LD_INT 1
81311: PLUS
81312: ARRAY
81313: ST_TO_ADDR
81314: GO 81423
81316: LD_INT 31
81318: DOUBLE
81319: EQUAL
81320: IFTRUE 81366
81322: LD_INT 32
81324: DOUBLE
81325: EQUAL
81326: IFTRUE 81366
81328: LD_INT 33
81330: DOUBLE
81331: EQUAL
81332: IFTRUE 81366
81334: LD_INT 27
81336: DOUBLE
81337: EQUAL
81338: IFTRUE 81366
81340: LD_INT 26
81342: DOUBLE
81343: EQUAL
81344: IFTRUE 81366
81346: LD_INT 28
81348: DOUBLE
81349: EQUAL
81350: IFTRUE 81366
81352: LD_INT 29
81354: DOUBLE
81355: EQUAL
81356: IFTRUE 81366
81358: LD_INT 30
81360: DOUBLE
81361: EQUAL
81362: IFTRUE 81366
81364: GO 81422
81366: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
81367: LD_ADDR_VAR 0 9
81371: PUSH
81372: LD_VAR 0 59
81376: PUSH
81377: LD_VAR 0 60
81381: PUSH
81382: LD_VAR 0 61
81386: PUSH
81387: LD_VAR 0 62
81391: PUSH
81392: LD_VAR 0 63
81396: PUSH
81397: LD_VAR 0 64
81401: PUSH
81402: EMPTY
81403: LIST
81404: LIST
81405: LIST
81406: LIST
81407: LIST
81408: LIST
81409: PUSH
81410: LD_VAR 0 4
81414: PUSH
81415: LD_INT 1
81417: PLUS
81418: ARRAY
81419: ST_TO_ADDR
81420: GO 81423
81422: POP
// temp_list2 = [ ] ;
81423: LD_ADDR_VAR 0 10
81427: PUSH
81428: EMPTY
81429: ST_TO_ADDR
// for i in temp_list do
81430: LD_ADDR_VAR 0 8
81434: PUSH
81435: LD_VAR 0 9
81439: PUSH
81440: FOR_IN
81441: IFFALSE 81493
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
81443: LD_ADDR_VAR 0 10
81447: PUSH
81448: LD_VAR 0 10
81452: PUSH
81453: LD_VAR 0 8
81457: PUSH
81458: LD_INT 1
81460: ARRAY
81461: PUSH
81462: LD_VAR 0 2
81466: PLUS
81467: PUSH
81468: LD_VAR 0 8
81472: PUSH
81473: LD_INT 2
81475: ARRAY
81476: PUSH
81477: LD_VAR 0 3
81481: PLUS
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: EMPTY
81488: LIST
81489: ADD
81490: ST_TO_ADDR
81491: GO 81440
81493: POP
81494: POP
// result = temp_list2 ;
81495: LD_ADDR_VAR 0 7
81499: PUSH
81500: LD_VAR 0 10
81504: ST_TO_ADDR
// end ;
81505: LD_VAR 0 7
81509: RET
// export function EnemyInRange ( unit , dist ) ; begin
81510: LD_INT 0
81512: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81513: LD_ADDR_VAR 0 3
81517: PUSH
81518: LD_VAR 0 1
81522: PPUSH
81523: CALL_OW 255
81527: PPUSH
81528: LD_VAR 0 1
81532: PPUSH
81533: CALL_OW 250
81537: PPUSH
81538: LD_VAR 0 1
81542: PPUSH
81543: CALL_OW 251
81547: PPUSH
81548: LD_VAR 0 2
81552: PPUSH
81553: CALL 55614 0 4
81557: PUSH
81558: LD_INT 4
81560: ARRAY
81561: ST_TO_ADDR
// end ;
81562: LD_VAR 0 3
81566: RET
// export function PlayerSeeMe ( unit ) ; begin
81567: LD_INT 0
81569: PPUSH
// result := See ( your_side , unit ) ;
81570: LD_ADDR_VAR 0 2
81574: PUSH
81575: LD_OWVAR 2
81579: PPUSH
81580: LD_VAR 0 1
81584: PPUSH
81585: CALL_OW 292
81589: ST_TO_ADDR
// end ;
81590: LD_VAR 0 2
81594: RET
// export function ReverseDir ( unit ) ; begin
81595: LD_INT 0
81597: PPUSH
// if not unit then
81598: LD_VAR 0 1
81602: NOT
81603: IFFALSE 81607
// exit ;
81605: GO 81630
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
81607: LD_ADDR_VAR 0 2
81611: PUSH
81612: LD_VAR 0 1
81616: PPUSH
81617: CALL_OW 254
81621: PUSH
81622: LD_INT 3
81624: PLUS
81625: PUSH
81626: LD_INT 6
81628: MOD
81629: ST_TO_ADDR
// end ;
81630: LD_VAR 0 2
81634: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81635: LD_INT 0
81637: PPUSH
81638: PPUSH
81639: PPUSH
81640: PPUSH
81641: PPUSH
// if not hexes then
81642: LD_VAR 0 2
81646: NOT
81647: IFFALSE 81651
// exit ;
81649: GO 81799
// dist := 9999 ;
81651: LD_ADDR_VAR 0 5
81655: PUSH
81656: LD_INT 9999
81658: ST_TO_ADDR
// for i = 1 to hexes do
81659: LD_ADDR_VAR 0 4
81663: PUSH
81664: DOUBLE
81665: LD_INT 1
81667: DEC
81668: ST_TO_ADDR
81669: LD_VAR 0 2
81673: PUSH
81674: FOR_TO
81675: IFFALSE 81787
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81677: LD_VAR 0 1
81681: PPUSH
81682: LD_VAR 0 2
81686: PUSH
81687: LD_VAR 0 4
81691: ARRAY
81692: PUSH
81693: LD_INT 1
81695: ARRAY
81696: PPUSH
81697: LD_VAR 0 2
81701: PUSH
81702: LD_VAR 0 4
81706: ARRAY
81707: PUSH
81708: LD_INT 2
81710: ARRAY
81711: PPUSH
81712: CALL_OW 297
81716: PUSH
81717: LD_VAR 0 5
81721: LESS
81722: IFFALSE 81785
// begin hex := hexes [ i ] ;
81724: LD_ADDR_VAR 0 7
81728: PUSH
81729: LD_VAR 0 2
81733: PUSH
81734: LD_VAR 0 4
81738: ARRAY
81739: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
81740: LD_ADDR_VAR 0 5
81744: PUSH
81745: LD_VAR 0 1
81749: PPUSH
81750: LD_VAR 0 2
81754: PUSH
81755: LD_VAR 0 4
81759: ARRAY
81760: PUSH
81761: LD_INT 1
81763: ARRAY
81764: PPUSH
81765: LD_VAR 0 2
81769: PUSH
81770: LD_VAR 0 4
81774: ARRAY
81775: PUSH
81776: LD_INT 2
81778: ARRAY
81779: PPUSH
81780: CALL_OW 297
81784: ST_TO_ADDR
// end ; end ;
81785: GO 81674
81787: POP
81788: POP
// result := hex ;
81789: LD_ADDR_VAR 0 3
81793: PUSH
81794: LD_VAR 0 7
81798: ST_TO_ADDR
// end ;
81799: LD_VAR 0 3
81803: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
81804: LD_INT 0
81806: PPUSH
81807: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
81808: LD_VAR 0 1
81812: NOT
81813: PUSH
81814: LD_VAR 0 1
81818: PUSH
81819: LD_INT 21
81821: PUSH
81822: LD_INT 2
81824: PUSH
81825: EMPTY
81826: LIST
81827: LIST
81828: PUSH
81829: LD_INT 23
81831: PUSH
81832: LD_INT 2
81834: PUSH
81835: EMPTY
81836: LIST
81837: LIST
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: PPUSH
81843: CALL_OW 69
81847: IN
81848: NOT
81849: OR
81850: IFFALSE 81854
// exit ;
81852: GO 81901
// for i = 1 to 3 do
81854: LD_ADDR_VAR 0 3
81858: PUSH
81859: DOUBLE
81860: LD_INT 1
81862: DEC
81863: ST_TO_ADDR
81864: LD_INT 3
81866: PUSH
81867: FOR_TO
81868: IFFALSE 81899
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
81870: LD_VAR 0 1
81874: PPUSH
81875: CALL_OW 250
81879: PPUSH
81880: LD_VAR 0 1
81884: PPUSH
81885: CALL_OW 251
81889: PPUSH
81890: LD_INT 1
81892: PPUSH
81893: CALL_OW 453
81897: GO 81867
81899: POP
81900: POP
// end ;
81901: LD_VAR 0 2
81905: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
81906: LD_INT 0
81908: PPUSH
81909: PPUSH
81910: PPUSH
81911: PPUSH
81912: PPUSH
81913: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
81914: LD_VAR 0 1
81918: NOT
81919: PUSH
81920: LD_VAR 0 2
81924: NOT
81925: OR
81926: PUSH
81927: LD_VAR 0 1
81931: PPUSH
81932: CALL_OW 314
81936: OR
81937: IFFALSE 81941
// exit ;
81939: GO 82382
// x := GetX ( enemy_unit ) ;
81941: LD_ADDR_VAR 0 7
81945: PUSH
81946: LD_VAR 0 2
81950: PPUSH
81951: CALL_OW 250
81955: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
81956: LD_ADDR_VAR 0 8
81960: PUSH
81961: LD_VAR 0 2
81965: PPUSH
81966: CALL_OW 251
81970: ST_TO_ADDR
// if not x or not y then
81971: LD_VAR 0 7
81975: NOT
81976: PUSH
81977: LD_VAR 0 8
81981: NOT
81982: OR
81983: IFFALSE 81987
// exit ;
81985: GO 82382
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
81987: LD_ADDR_VAR 0 6
81991: PUSH
81992: LD_VAR 0 7
81996: PPUSH
81997: LD_INT 0
81999: PPUSH
82000: LD_INT 4
82002: PPUSH
82003: CALL_OW 272
82007: PUSH
82008: LD_VAR 0 8
82012: PPUSH
82013: LD_INT 0
82015: PPUSH
82016: LD_INT 4
82018: PPUSH
82019: CALL_OW 273
82023: PUSH
82024: EMPTY
82025: LIST
82026: LIST
82027: PUSH
82028: LD_VAR 0 7
82032: PPUSH
82033: LD_INT 1
82035: PPUSH
82036: LD_INT 4
82038: PPUSH
82039: CALL_OW 272
82043: PUSH
82044: LD_VAR 0 8
82048: PPUSH
82049: LD_INT 1
82051: PPUSH
82052: LD_INT 4
82054: PPUSH
82055: CALL_OW 273
82059: PUSH
82060: EMPTY
82061: LIST
82062: LIST
82063: PUSH
82064: LD_VAR 0 7
82068: PPUSH
82069: LD_INT 2
82071: PPUSH
82072: LD_INT 4
82074: PPUSH
82075: CALL_OW 272
82079: PUSH
82080: LD_VAR 0 8
82084: PPUSH
82085: LD_INT 2
82087: PPUSH
82088: LD_INT 4
82090: PPUSH
82091: CALL_OW 273
82095: PUSH
82096: EMPTY
82097: LIST
82098: LIST
82099: PUSH
82100: LD_VAR 0 7
82104: PPUSH
82105: LD_INT 3
82107: PPUSH
82108: LD_INT 4
82110: PPUSH
82111: CALL_OW 272
82115: PUSH
82116: LD_VAR 0 8
82120: PPUSH
82121: LD_INT 3
82123: PPUSH
82124: LD_INT 4
82126: PPUSH
82127: CALL_OW 273
82131: PUSH
82132: EMPTY
82133: LIST
82134: LIST
82135: PUSH
82136: LD_VAR 0 7
82140: PPUSH
82141: LD_INT 4
82143: PPUSH
82144: LD_INT 4
82146: PPUSH
82147: CALL_OW 272
82151: PUSH
82152: LD_VAR 0 8
82156: PPUSH
82157: LD_INT 4
82159: PPUSH
82160: LD_INT 4
82162: PPUSH
82163: CALL_OW 273
82167: PUSH
82168: EMPTY
82169: LIST
82170: LIST
82171: PUSH
82172: LD_VAR 0 7
82176: PPUSH
82177: LD_INT 5
82179: PPUSH
82180: LD_INT 4
82182: PPUSH
82183: CALL_OW 272
82187: PUSH
82188: LD_VAR 0 8
82192: PPUSH
82193: LD_INT 5
82195: PPUSH
82196: LD_INT 4
82198: PPUSH
82199: CALL_OW 273
82203: PUSH
82204: EMPTY
82205: LIST
82206: LIST
82207: PUSH
82208: EMPTY
82209: LIST
82210: LIST
82211: LIST
82212: LIST
82213: LIST
82214: LIST
82215: ST_TO_ADDR
// for i = tmp downto 1 do
82216: LD_ADDR_VAR 0 4
82220: PUSH
82221: DOUBLE
82222: LD_VAR 0 6
82226: INC
82227: ST_TO_ADDR
82228: LD_INT 1
82230: PUSH
82231: FOR_DOWNTO
82232: IFFALSE 82333
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
82234: LD_VAR 0 6
82238: PUSH
82239: LD_VAR 0 4
82243: ARRAY
82244: PUSH
82245: LD_INT 1
82247: ARRAY
82248: PPUSH
82249: LD_VAR 0 6
82253: PUSH
82254: LD_VAR 0 4
82258: ARRAY
82259: PUSH
82260: LD_INT 2
82262: ARRAY
82263: PPUSH
82264: CALL_OW 488
82268: NOT
82269: PUSH
82270: LD_VAR 0 6
82274: PUSH
82275: LD_VAR 0 4
82279: ARRAY
82280: PUSH
82281: LD_INT 1
82283: ARRAY
82284: PPUSH
82285: LD_VAR 0 6
82289: PUSH
82290: LD_VAR 0 4
82294: ARRAY
82295: PUSH
82296: LD_INT 2
82298: ARRAY
82299: PPUSH
82300: CALL_OW 428
82304: PUSH
82305: LD_INT 0
82307: NONEQUAL
82308: OR
82309: IFFALSE 82331
// tmp := Delete ( tmp , i ) ;
82311: LD_ADDR_VAR 0 6
82315: PUSH
82316: LD_VAR 0 6
82320: PPUSH
82321: LD_VAR 0 4
82325: PPUSH
82326: CALL_OW 3
82330: ST_TO_ADDR
82331: GO 82231
82333: POP
82334: POP
// j := GetClosestHex ( unit , tmp ) ;
82335: LD_ADDR_VAR 0 5
82339: PUSH
82340: LD_VAR 0 1
82344: PPUSH
82345: LD_VAR 0 6
82349: PPUSH
82350: CALL 81635 0 2
82354: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
82355: LD_VAR 0 1
82359: PPUSH
82360: LD_VAR 0 5
82364: PUSH
82365: LD_INT 1
82367: ARRAY
82368: PPUSH
82369: LD_VAR 0 5
82373: PUSH
82374: LD_INT 2
82376: ARRAY
82377: PPUSH
82378: CALL_OW 111
// end ;
82382: LD_VAR 0 3
82386: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
82387: LD_INT 0
82389: PPUSH
82390: PPUSH
82391: PPUSH
// uc_side = 0 ;
82392: LD_ADDR_OWVAR 20
82396: PUSH
82397: LD_INT 0
82399: ST_TO_ADDR
// uc_nation = 0 ;
82400: LD_ADDR_OWVAR 21
82404: PUSH
82405: LD_INT 0
82407: ST_TO_ADDR
// InitHc ;
82408: CALL_OW 19
// InitVc ;
82412: CALL_OW 20
// if mastodonts then
82416: LD_VAR 0 6
82420: IFFALSE 82487
// for i = 1 to mastodonts do
82422: LD_ADDR_VAR 0 11
82426: PUSH
82427: DOUBLE
82428: LD_INT 1
82430: DEC
82431: ST_TO_ADDR
82432: LD_VAR 0 6
82436: PUSH
82437: FOR_TO
82438: IFFALSE 82485
// begin vc_chassis := 31 ;
82440: LD_ADDR_OWVAR 37
82444: PUSH
82445: LD_INT 31
82447: ST_TO_ADDR
// vc_control := control_rider ;
82448: LD_ADDR_OWVAR 38
82452: PUSH
82453: LD_INT 4
82455: ST_TO_ADDR
// animal := CreateVehicle ;
82456: LD_ADDR_VAR 0 12
82460: PUSH
82461: CALL_OW 45
82465: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82466: LD_VAR 0 12
82470: PPUSH
82471: LD_VAR 0 8
82475: PPUSH
82476: LD_INT 0
82478: PPUSH
82479: CALL 89265 0 3
// end ;
82483: GO 82437
82485: POP
82486: POP
// if horses then
82487: LD_VAR 0 5
82491: IFFALSE 82558
// for i = 1 to horses do
82493: LD_ADDR_VAR 0 11
82497: PUSH
82498: DOUBLE
82499: LD_INT 1
82501: DEC
82502: ST_TO_ADDR
82503: LD_VAR 0 5
82507: PUSH
82508: FOR_TO
82509: IFFALSE 82556
// begin hc_class := 21 ;
82511: LD_ADDR_OWVAR 28
82515: PUSH
82516: LD_INT 21
82518: ST_TO_ADDR
// hc_gallery :=  ;
82519: LD_ADDR_OWVAR 33
82523: PUSH
82524: LD_STRING 
82526: ST_TO_ADDR
// animal := CreateHuman ;
82527: LD_ADDR_VAR 0 12
82531: PUSH
82532: CALL_OW 44
82536: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82537: LD_VAR 0 12
82541: PPUSH
82542: LD_VAR 0 8
82546: PPUSH
82547: LD_INT 0
82549: PPUSH
82550: CALL 89265 0 3
// end ;
82554: GO 82508
82556: POP
82557: POP
// if birds then
82558: LD_VAR 0 1
82562: IFFALSE 82629
// for i = 1 to birds do
82564: LD_ADDR_VAR 0 11
82568: PUSH
82569: DOUBLE
82570: LD_INT 1
82572: DEC
82573: ST_TO_ADDR
82574: LD_VAR 0 1
82578: PUSH
82579: FOR_TO
82580: IFFALSE 82627
// begin hc_class = 18 ;
82582: LD_ADDR_OWVAR 28
82586: PUSH
82587: LD_INT 18
82589: ST_TO_ADDR
// hc_gallery =  ;
82590: LD_ADDR_OWVAR 33
82594: PUSH
82595: LD_STRING 
82597: ST_TO_ADDR
// animal := CreateHuman ;
82598: LD_ADDR_VAR 0 12
82602: PUSH
82603: CALL_OW 44
82607: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82608: LD_VAR 0 12
82612: PPUSH
82613: LD_VAR 0 8
82617: PPUSH
82618: LD_INT 0
82620: PPUSH
82621: CALL 89265 0 3
// end ;
82625: GO 82579
82627: POP
82628: POP
// if tigers then
82629: LD_VAR 0 2
82633: IFFALSE 82717
// for i = 1 to tigers do
82635: LD_ADDR_VAR 0 11
82639: PUSH
82640: DOUBLE
82641: LD_INT 1
82643: DEC
82644: ST_TO_ADDR
82645: LD_VAR 0 2
82649: PUSH
82650: FOR_TO
82651: IFFALSE 82715
// begin hc_class = class_tiger ;
82653: LD_ADDR_OWVAR 28
82657: PUSH
82658: LD_INT 14
82660: ST_TO_ADDR
// hc_gallery =  ;
82661: LD_ADDR_OWVAR 33
82665: PUSH
82666: LD_STRING 
82668: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82669: LD_ADDR_OWVAR 35
82673: PUSH
82674: LD_INT 7
82676: NEG
82677: PPUSH
82678: LD_INT 7
82680: PPUSH
82681: CALL_OW 12
82685: ST_TO_ADDR
// animal := CreateHuman ;
82686: LD_ADDR_VAR 0 12
82690: PUSH
82691: CALL_OW 44
82695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82696: LD_VAR 0 12
82700: PPUSH
82701: LD_VAR 0 8
82705: PPUSH
82706: LD_INT 0
82708: PPUSH
82709: CALL 89265 0 3
// end ;
82713: GO 82650
82715: POP
82716: POP
// if apemans then
82717: LD_VAR 0 3
82721: IFFALSE 82844
// for i = 1 to apemans do
82723: LD_ADDR_VAR 0 11
82727: PUSH
82728: DOUBLE
82729: LD_INT 1
82731: DEC
82732: ST_TO_ADDR
82733: LD_VAR 0 3
82737: PUSH
82738: FOR_TO
82739: IFFALSE 82842
// begin hc_class = class_apeman ;
82741: LD_ADDR_OWVAR 28
82745: PUSH
82746: LD_INT 12
82748: ST_TO_ADDR
// hc_gallery =  ;
82749: LD_ADDR_OWVAR 33
82753: PUSH
82754: LD_STRING 
82756: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
82757: LD_ADDR_OWVAR 35
82761: PUSH
82762: LD_INT 5
82764: NEG
82765: PPUSH
82766: LD_INT 5
82768: PPUSH
82769: CALL_OW 12
82773: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
82774: LD_ADDR_OWVAR 31
82778: PUSH
82779: LD_INT 1
82781: PPUSH
82782: LD_INT 3
82784: PPUSH
82785: CALL_OW 12
82789: PUSH
82790: LD_INT 1
82792: PPUSH
82793: LD_INT 3
82795: PPUSH
82796: CALL_OW 12
82800: PUSH
82801: LD_INT 0
82803: PUSH
82804: LD_INT 0
82806: PUSH
82807: EMPTY
82808: LIST
82809: LIST
82810: LIST
82811: LIST
82812: ST_TO_ADDR
// animal := CreateHuman ;
82813: LD_ADDR_VAR 0 12
82817: PUSH
82818: CALL_OW 44
82822: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82823: LD_VAR 0 12
82827: PPUSH
82828: LD_VAR 0 8
82832: PPUSH
82833: LD_INT 0
82835: PPUSH
82836: CALL 89265 0 3
// end ;
82840: GO 82738
82842: POP
82843: POP
// if enchidnas then
82844: LD_VAR 0 4
82848: IFFALSE 82915
// for i = 1 to enchidnas do
82850: LD_ADDR_VAR 0 11
82854: PUSH
82855: DOUBLE
82856: LD_INT 1
82858: DEC
82859: ST_TO_ADDR
82860: LD_VAR 0 4
82864: PUSH
82865: FOR_TO
82866: IFFALSE 82913
// begin hc_class = 13 ;
82868: LD_ADDR_OWVAR 28
82872: PUSH
82873: LD_INT 13
82875: ST_TO_ADDR
// hc_gallery =  ;
82876: LD_ADDR_OWVAR 33
82880: PUSH
82881: LD_STRING 
82883: ST_TO_ADDR
// animal := CreateHuman ;
82884: LD_ADDR_VAR 0 12
82888: PUSH
82889: CALL_OW 44
82893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82894: LD_VAR 0 12
82898: PPUSH
82899: LD_VAR 0 8
82903: PPUSH
82904: LD_INT 0
82906: PPUSH
82907: CALL 89265 0 3
// end ;
82911: GO 82865
82913: POP
82914: POP
// if fishes then
82915: LD_VAR 0 7
82919: IFFALSE 82986
// for i = 1 to fishes do
82921: LD_ADDR_VAR 0 11
82925: PUSH
82926: DOUBLE
82927: LD_INT 1
82929: DEC
82930: ST_TO_ADDR
82931: LD_VAR 0 7
82935: PUSH
82936: FOR_TO
82937: IFFALSE 82984
// begin hc_class = 20 ;
82939: LD_ADDR_OWVAR 28
82943: PUSH
82944: LD_INT 20
82946: ST_TO_ADDR
// hc_gallery =  ;
82947: LD_ADDR_OWVAR 33
82951: PUSH
82952: LD_STRING 
82954: ST_TO_ADDR
// animal := CreateHuman ;
82955: LD_ADDR_VAR 0 12
82959: PUSH
82960: CALL_OW 44
82964: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
82965: LD_VAR 0 12
82969: PPUSH
82970: LD_VAR 0 9
82974: PPUSH
82975: LD_INT 0
82977: PPUSH
82978: CALL 89265 0 3
// end ;
82982: GO 82936
82984: POP
82985: POP
// end ;
82986: LD_VAR 0 10
82990: RET
// export function WantHeal ( sci , unit ) ; begin
82991: LD_INT 0
82993: PPUSH
// if GetTaskList ( sci ) > 0 then
82994: LD_VAR 0 1
82998: PPUSH
82999: CALL_OW 437
83003: PUSH
83004: LD_INT 0
83006: GREATER
83007: IFFALSE 83077
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
83009: LD_VAR 0 1
83013: PPUSH
83014: CALL_OW 437
83018: PUSH
83019: LD_INT 1
83021: ARRAY
83022: PUSH
83023: LD_INT 1
83025: ARRAY
83026: PUSH
83027: LD_STRING l
83029: EQUAL
83030: PUSH
83031: LD_VAR 0 1
83035: PPUSH
83036: CALL_OW 437
83040: PUSH
83041: LD_INT 1
83043: ARRAY
83044: PUSH
83045: LD_INT 4
83047: ARRAY
83048: PUSH
83049: LD_VAR 0 2
83053: EQUAL
83054: AND
83055: IFFALSE 83067
// result := true else
83057: LD_ADDR_VAR 0 3
83061: PUSH
83062: LD_INT 1
83064: ST_TO_ADDR
83065: GO 83075
// result := false ;
83067: LD_ADDR_VAR 0 3
83071: PUSH
83072: LD_INT 0
83074: ST_TO_ADDR
// end else
83075: GO 83085
// result := false ;
83077: LD_ADDR_VAR 0 3
83081: PUSH
83082: LD_INT 0
83084: ST_TO_ADDR
// end ;
83085: LD_VAR 0 3
83089: RET
// export function HealTarget ( sci ) ; begin
83090: LD_INT 0
83092: PPUSH
// if not sci then
83093: LD_VAR 0 1
83097: NOT
83098: IFFALSE 83102
// exit ;
83100: GO 83167
// result := 0 ;
83102: LD_ADDR_VAR 0 2
83106: PUSH
83107: LD_INT 0
83109: ST_TO_ADDR
// if GetTaskList ( sci ) then
83110: LD_VAR 0 1
83114: PPUSH
83115: CALL_OW 437
83119: IFFALSE 83167
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
83121: LD_VAR 0 1
83125: PPUSH
83126: CALL_OW 437
83130: PUSH
83131: LD_INT 1
83133: ARRAY
83134: PUSH
83135: LD_INT 1
83137: ARRAY
83138: PUSH
83139: LD_STRING l
83141: EQUAL
83142: IFFALSE 83167
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
83144: LD_ADDR_VAR 0 2
83148: PUSH
83149: LD_VAR 0 1
83153: PPUSH
83154: CALL_OW 437
83158: PUSH
83159: LD_INT 1
83161: ARRAY
83162: PUSH
83163: LD_INT 4
83165: ARRAY
83166: ST_TO_ADDR
// end ;
83167: LD_VAR 0 2
83171: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
83172: LD_INT 0
83174: PPUSH
83175: PPUSH
83176: PPUSH
83177: PPUSH
83178: PPUSH
83179: PPUSH
83180: PPUSH
83181: PPUSH
83182: PPUSH
83183: PPUSH
83184: PPUSH
83185: PPUSH
83186: PPUSH
83187: PPUSH
83188: PPUSH
83189: PPUSH
83190: PPUSH
83191: PPUSH
83192: PPUSH
83193: PPUSH
83194: PPUSH
83195: PPUSH
83196: PPUSH
83197: PPUSH
83198: PPUSH
83199: PPUSH
83200: PPUSH
83201: PPUSH
83202: PPUSH
83203: PPUSH
83204: PPUSH
83205: PPUSH
83206: PPUSH
83207: PPUSH
// if not list then
83208: LD_VAR 0 1
83212: NOT
83213: IFFALSE 83217
// exit ;
83215: GO 87876
// base := list [ 1 ] ;
83217: LD_ADDR_VAR 0 3
83221: PUSH
83222: LD_VAR 0 1
83226: PUSH
83227: LD_INT 1
83229: ARRAY
83230: ST_TO_ADDR
// group := list [ 2 ] ;
83231: LD_ADDR_VAR 0 4
83235: PUSH
83236: LD_VAR 0 1
83240: PUSH
83241: LD_INT 2
83243: ARRAY
83244: ST_TO_ADDR
// path := list [ 3 ] ;
83245: LD_ADDR_VAR 0 5
83249: PUSH
83250: LD_VAR 0 1
83254: PUSH
83255: LD_INT 3
83257: ARRAY
83258: ST_TO_ADDR
// flags := list [ 4 ] ;
83259: LD_ADDR_VAR 0 6
83263: PUSH
83264: LD_VAR 0 1
83268: PUSH
83269: LD_INT 4
83271: ARRAY
83272: ST_TO_ADDR
// mined := [ ] ;
83273: LD_ADDR_VAR 0 27
83277: PUSH
83278: EMPTY
83279: ST_TO_ADDR
// bombed := [ ] ;
83280: LD_ADDR_VAR 0 28
83284: PUSH
83285: EMPTY
83286: ST_TO_ADDR
// healers := [ ] ;
83287: LD_ADDR_VAR 0 31
83291: PUSH
83292: EMPTY
83293: ST_TO_ADDR
// to_heal := [ ] ;
83294: LD_ADDR_VAR 0 30
83298: PUSH
83299: EMPTY
83300: ST_TO_ADDR
// repairs := [ ] ;
83301: LD_ADDR_VAR 0 33
83305: PUSH
83306: EMPTY
83307: ST_TO_ADDR
// to_repair := [ ] ;
83308: LD_ADDR_VAR 0 32
83312: PUSH
83313: EMPTY
83314: ST_TO_ADDR
// if not group or not path then
83315: LD_VAR 0 4
83319: NOT
83320: PUSH
83321: LD_VAR 0 5
83325: NOT
83326: OR
83327: IFFALSE 83331
// exit ;
83329: GO 87876
// side := GetSide ( group [ 1 ] ) ;
83331: LD_ADDR_VAR 0 35
83335: PUSH
83336: LD_VAR 0 4
83340: PUSH
83341: LD_INT 1
83343: ARRAY
83344: PPUSH
83345: CALL_OW 255
83349: ST_TO_ADDR
// if flags then
83350: LD_VAR 0 6
83354: IFFALSE 83498
// begin f_ignore_area := flags [ 1 ] ;
83356: LD_ADDR_VAR 0 17
83360: PUSH
83361: LD_VAR 0 6
83365: PUSH
83366: LD_INT 1
83368: ARRAY
83369: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
83370: LD_ADDR_VAR 0 18
83374: PUSH
83375: LD_VAR 0 6
83379: PUSH
83380: LD_INT 2
83382: ARRAY
83383: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
83384: LD_ADDR_VAR 0 19
83388: PUSH
83389: LD_VAR 0 6
83393: PUSH
83394: LD_INT 3
83396: ARRAY
83397: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
83398: LD_ADDR_VAR 0 20
83402: PUSH
83403: LD_VAR 0 6
83407: PUSH
83408: LD_INT 4
83410: ARRAY
83411: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
83412: LD_ADDR_VAR 0 21
83416: PUSH
83417: LD_VAR 0 6
83421: PUSH
83422: LD_INT 5
83424: ARRAY
83425: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
83426: LD_ADDR_VAR 0 22
83430: PUSH
83431: LD_VAR 0 6
83435: PUSH
83436: LD_INT 6
83438: ARRAY
83439: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
83440: LD_ADDR_VAR 0 23
83444: PUSH
83445: LD_VAR 0 6
83449: PUSH
83450: LD_INT 7
83452: ARRAY
83453: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
83454: LD_ADDR_VAR 0 24
83458: PUSH
83459: LD_VAR 0 6
83463: PUSH
83464: LD_INT 8
83466: ARRAY
83467: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
83468: LD_ADDR_VAR 0 25
83472: PUSH
83473: LD_VAR 0 6
83477: PUSH
83478: LD_INT 9
83480: ARRAY
83481: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
83482: LD_ADDR_VAR 0 26
83486: PUSH
83487: LD_VAR 0 6
83491: PUSH
83492: LD_INT 10
83494: ARRAY
83495: ST_TO_ADDR
// end else
83496: GO 83578
// begin f_ignore_area := false ;
83498: LD_ADDR_VAR 0 17
83502: PUSH
83503: LD_INT 0
83505: ST_TO_ADDR
// f_capture := false ;
83506: LD_ADDR_VAR 0 18
83510: PUSH
83511: LD_INT 0
83513: ST_TO_ADDR
// f_ignore_civ := false ;
83514: LD_ADDR_VAR 0 19
83518: PUSH
83519: LD_INT 0
83521: ST_TO_ADDR
// f_murder := false ;
83522: LD_ADDR_VAR 0 20
83526: PUSH
83527: LD_INT 0
83529: ST_TO_ADDR
// f_mines := false ;
83530: LD_ADDR_VAR 0 21
83534: PUSH
83535: LD_INT 0
83537: ST_TO_ADDR
// f_repair := false ;
83538: LD_ADDR_VAR 0 22
83542: PUSH
83543: LD_INT 0
83545: ST_TO_ADDR
// f_heal := false ;
83546: LD_ADDR_VAR 0 23
83550: PUSH
83551: LD_INT 0
83553: ST_TO_ADDR
// f_spacetime := false ;
83554: LD_ADDR_VAR 0 24
83558: PUSH
83559: LD_INT 0
83561: ST_TO_ADDR
// f_attack_depot := false ;
83562: LD_ADDR_VAR 0 25
83566: PUSH
83567: LD_INT 0
83569: ST_TO_ADDR
// f_crawl := false ;
83570: LD_ADDR_VAR 0 26
83574: PUSH
83575: LD_INT 0
83577: ST_TO_ADDR
// end ; if f_heal then
83578: LD_VAR 0 23
83582: IFFALSE 83609
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
83584: LD_ADDR_VAR 0 31
83588: PUSH
83589: LD_VAR 0 4
83593: PPUSH
83594: LD_INT 25
83596: PUSH
83597: LD_INT 4
83599: PUSH
83600: EMPTY
83601: LIST
83602: LIST
83603: PPUSH
83604: CALL_OW 72
83608: ST_TO_ADDR
// if f_repair then
83609: LD_VAR 0 22
83613: IFFALSE 83640
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
83615: LD_ADDR_VAR 0 33
83619: PUSH
83620: LD_VAR 0 4
83624: PPUSH
83625: LD_INT 25
83627: PUSH
83628: LD_INT 3
83630: PUSH
83631: EMPTY
83632: LIST
83633: LIST
83634: PPUSH
83635: CALL_OW 72
83639: ST_TO_ADDR
// units_path := [ ] ;
83640: LD_ADDR_VAR 0 16
83644: PUSH
83645: EMPTY
83646: ST_TO_ADDR
// for i = 1 to group do
83647: LD_ADDR_VAR 0 7
83651: PUSH
83652: DOUBLE
83653: LD_INT 1
83655: DEC
83656: ST_TO_ADDR
83657: LD_VAR 0 4
83661: PUSH
83662: FOR_TO
83663: IFFALSE 83692
// units_path := Replace ( units_path , i , path ) ;
83665: LD_ADDR_VAR 0 16
83669: PUSH
83670: LD_VAR 0 16
83674: PPUSH
83675: LD_VAR 0 7
83679: PPUSH
83680: LD_VAR 0 5
83684: PPUSH
83685: CALL_OW 1
83689: ST_TO_ADDR
83690: GO 83662
83692: POP
83693: POP
// repeat for i = group downto 1 do
83694: LD_ADDR_VAR 0 7
83698: PUSH
83699: DOUBLE
83700: LD_VAR 0 4
83704: INC
83705: ST_TO_ADDR
83706: LD_INT 1
83708: PUSH
83709: FOR_DOWNTO
83710: IFFALSE 87832
// begin wait ( 5 ) ;
83712: LD_INT 5
83714: PPUSH
83715: CALL_OW 67
// tmp := [ ] ;
83719: LD_ADDR_VAR 0 14
83723: PUSH
83724: EMPTY
83725: ST_TO_ADDR
// attacking := false ;
83726: LD_ADDR_VAR 0 29
83730: PUSH
83731: LD_INT 0
83733: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
83734: LD_VAR 0 4
83738: PUSH
83739: LD_VAR 0 7
83743: ARRAY
83744: PPUSH
83745: CALL_OW 301
83749: PUSH
83750: LD_VAR 0 4
83754: PUSH
83755: LD_VAR 0 7
83759: ARRAY
83760: NOT
83761: OR
83762: IFFALSE 83871
// begin if GetType ( group [ i ] ) = unit_human then
83764: LD_VAR 0 4
83768: PUSH
83769: LD_VAR 0 7
83773: ARRAY
83774: PPUSH
83775: CALL_OW 247
83779: PUSH
83780: LD_INT 1
83782: EQUAL
83783: IFFALSE 83829
// begin to_heal := to_heal diff group [ i ] ;
83785: LD_ADDR_VAR 0 30
83789: PUSH
83790: LD_VAR 0 30
83794: PUSH
83795: LD_VAR 0 4
83799: PUSH
83800: LD_VAR 0 7
83804: ARRAY
83805: DIFF
83806: ST_TO_ADDR
// healers := healers diff group [ i ] ;
83807: LD_ADDR_VAR 0 31
83811: PUSH
83812: LD_VAR 0 31
83816: PUSH
83817: LD_VAR 0 4
83821: PUSH
83822: LD_VAR 0 7
83826: ARRAY
83827: DIFF
83828: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
83829: LD_ADDR_VAR 0 4
83833: PUSH
83834: LD_VAR 0 4
83838: PPUSH
83839: LD_VAR 0 7
83843: PPUSH
83844: CALL_OW 3
83848: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
83849: LD_ADDR_VAR 0 16
83853: PUSH
83854: LD_VAR 0 16
83858: PPUSH
83859: LD_VAR 0 7
83863: PPUSH
83864: CALL_OW 3
83868: ST_TO_ADDR
// continue ;
83869: GO 83709
// end ; if f_repair then
83871: LD_VAR 0 22
83875: IFFALSE 84364
// begin if GetType ( group [ i ] ) = unit_vehicle then
83877: LD_VAR 0 4
83881: PUSH
83882: LD_VAR 0 7
83886: ARRAY
83887: PPUSH
83888: CALL_OW 247
83892: PUSH
83893: LD_INT 2
83895: EQUAL
83896: IFFALSE 84086
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
83898: LD_VAR 0 4
83902: PUSH
83903: LD_VAR 0 7
83907: ARRAY
83908: PPUSH
83909: CALL_OW 256
83913: PUSH
83914: LD_INT 700
83916: LESS
83917: PUSH
83918: LD_VAR 0 4
83922: PUSH
83923: LD_VAR 0 7
83927: ARRAY
83928: PUSH
83929: LD_VAR 0 32
83933: IN
83934: NOT
83935: AND
83936: IFFALSE 83960
// to_repair := to_repair union group [ i ] ;
83938: LD_ADDR_VAR 0 32
83942: PUSH
83943: LD_VAR 0 32
83947: PUSH
83948: LD_VAR 0 4
83952: PUSH
83953: LD_VAR 0 7
83957: ARRAY
83958: UNION
83959: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
83960: LD_VAR 0 4
83964: PUSH
83965: LD_VAR 0 7
83969: ARRAY
83970: PPUSH
83971: CALL_OW 256
83975: PUSH
83976: LD_INT 1000
83978: EQUAL
83979: PUSH
83980: LD_VAR 0 4
83984: PUSH
83985: LD_VAR 0 7
83989: ARRAY
83990: PUSH
83991: LD_VAR 0 32
83995: IN
83996: AND
83997: IFFALSE 84021
// to_repair := to_repair diff group [ i ] ;
83999: LD_ADDR_VAR 0 32
84003: PUSH
84004: LD_VAR 0 32
84008: PUSH
84009: LD_VAR 0 4
84013: PUSH
84014: LD_VAR 0 7
84018: ARRAY
84019: DIFF
84020: ST_TO_ADDR
// if group [ i ] in to_repair then
84021: LD_VAR 0 4
84025: PUSH
84026: LD_VAR 0 7
84030: ARRAY
84031: PUSH
84032: LD_VAR 0 32
84036: IN
84037: IFFALSE 84084
// begin if not IsInArea ( group [ i ] , f_repair ) then
84039: LD_VAR 0 4
84043: PUSH
84044: LD_VAR 0 7
84048: ARRAY
84049: PPUSH
84050: LD_VAR 0 22
84054: PPUSH
84055: CALL_OW 308
84059: NOT
84060: IFFALSE 84082
// ComMoveToArea ( group [ i ] , f_repair ) ;
84062: LD_VAR 0 4
84066: PUSH
84067: LD_VAR 0 7
84071: ARRAY
84072: PPUSH
84073: LD_VAR 0 22
84077: PPUSH
84078: CALL_OW 113
// continue ;
84082: GO 83709
// end ; end else
84084: GO 84364
// if group [ i ] in repairs then
84086: LD_VAR 0 4
84090: PUSH
84091: LD_VAR 0 7
84095: ARRAY
84096: PUSH
84097: LD_VAR 0 33
84101: IN
84102: IFFALSE 84364
// begin if IsInUnit ( group [ i ] ) then
84104: LD_VAR 0 4
84108: PUSH
84109: LD_VAR 0 7
84113: ARRAY
84114: PPUSH
84115: CALL_OW 310
84119: IFFALSE 84187
// begin z := IsInUnit ( group [ i ] ) ;
84121: LD_ADDR_VAR 0 13
84125: PUSH
84126: LD_VAR 0 4
84130: PUSH
84131: LD_VAR 0 7
84135: ARRAY
84136: PPUSH
84137: CALL_OW 310
84141: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
84142: LD_VAR 0 13
84146: PUSH
84147: LD_VAR 0 32
84151: IN
84152: PUSH
84153: LD_VAR 0 13
84157: PPUSH
84158: LD_VAR 0 22
84162: PPUSH
84163: CALL_OW 308
84167: AND
84168: IFFALSE 84185
// ComExitVehicle ( group [ i ] ) ;
84170: LD_VAR 0 4
84174: PUSH
84175: LD_VAR 0 7
84179: ARRAY
84180: PPUSH
84181: CALL_OW 121
// end else
84185: GO 84364
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
84187: LD_ADDR_VAR 0 13
84191: PUSH
84192: LD_VAR 0 4
84196: PPUSH
84197: LD_INT 95
84199: PUSH
84200: LD_VAR 0 22
84204: PUSH
84205: EMPTY
84206: LIST
84207: LIST
84208: PUSH
84209: LD_INT 58
84211: PUSH
84212: EMPTY
84213: LIST
84214: PUSH
84215: EMPTY
84216: LIST
84217: LIST
84218: PPUSH
84219: CALL_OW 72
84223: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
84224: LD_VAR 0 4
84228: PUSH
84229: LD_VAR 0 7
84233: ARRAY
84234: PPUSH
84235: CALL_OW 314
84239: NOT
84240: IFFALSE 84362
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
84242: LD_ADDR_VAR 0 10
84246: PUSH
84247: LD_VAR 0 13
84251: PPUSH
84252: LD_VAR 0 4
84256: PUSH
84257: LD_VAR 0 7
84261: ARRAY
84262: PPUSH
84263: CALL_OW 74
84267: ST_TO_ADDR
// if not x then
84268: LD_VAR 0 10
84272: NOT
84273: IFFALSE 84277
// continue ;
84275: GO 83709
// if GetLives ( x ) < 1000 then
84277: LD_VAR 0 10
84281: PPUSH
84282: CALL_OW 256
84286: PUSH
84287: LD_INT 1000
84289: LESS
84290: IFFALSE 84314
// ComRepairVehicle ( group [ i ] , x ) else
84292: LD_VAR 0 4
84296: PUSH
84297: LD_VAR 0 7
84301: ARRAY
84302: PPUSH
84303: LD_VAR 0 10
84307: PPUSH
84308: CALL_OW 129
84312: GO 84362
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
84314: LD_VAR 0 23
84318: PUSH
84319: LD_VAR 0 4
84323: PUSH
84324: LD_VAR 0 7
84328: ARRAY
84329: PPUSH
84330: CALL_OW 256
84334: PUSH
84335: LD_INT 1000
84337: LESS
84338: AND
84339: NOT
84340: IFFALSE 84362
// ComEnterUnit ( group [ i ] , x ) ;
84342: LD_VAR 0 4
84346: PUSH
84347: LD_VAR 0 7
84351: ARRAY
84352: PPUSH
84353: LD_VAR 0 10
84357: PPUSH
84358: CALL_OW 120
// end ; continue ;
84362: GO 83709
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
84364: LD_VAR 0 23
84368: PUSH
84369: LD_VAR 0 4
84373: PUSH
84374: LD_VAR 0 7
84378: ARRAY
84379: PPUSH
84380: CALL_OW 247
84384: PUSH
84385: LD_INT 1
84387: EQUAL
84388: AND
84389: IFFALSE 84867
// begin if group [ i ] in healers then
84391: LD_VAR 0 4
84395: PUSH
84396: LD_VAR 0 7
84400: ARRAY
84401: PUSH
84402: LD_VAR 0 31
84406: IN
84407: IFFALSE 84680
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
84409: LD_VAR 0 4
84413: PUSH
84414: LD_VAR 0 7
84418: ARRAY
84419: PPUSH
84420: LD_VAR 0 23
84424: PPUSH
84425: CALL_OW 308
84429: NOT
84430: PUSH
84431: LD_VAR 0 4
84435: PUSH
84436: LD_VAR 0 7
84440: ARRAY
84441: PPUSH
84442: CALL_OW 314
84446: NOT
84447: AND
84448: IFFALSE 84472
// ComMoveToArea ( group [ i ] , f_heal ) else
84450: LD_VAR 0 4
84454: PUSH
84455: LD_VAR 0 7
84459: ARRAY
84460: PPUSH
84461: LD_VAR 0 23
84465: PPUSH
84466: CALL_OW 113
84470: GO 84678
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
84472: LD_VAR 0 4
84476: PUSH
84477: LD_VAR 0 7
84481: ARRAY
84482: PPUSH
84483: CALL 83090 0 1
84487: PPUSH
84488: CALL_OW 256
84492: PUSH
84493: LD_INT 1000
84495: EQUAL
84496: IFFALSE 84515
// ComStop ( group [ i ] ) else
84498: LD_VAR 0 4
84502: PUSH
84503: LD_VAR 0 7
84507: ARRAY
84508: PPUSH
84509: CALL_OW 141
84513: GO 84678
// if not HasTask ( group [ i ] ) and to_heal then
84515: LD_VAR 0 4
84519: PUSH
84520: LD_VAR 0 7
84524: ARRAY
84525: PPUSH
84526: CALL_OW 314
84530: NOT
84531: PUSH
84532: LD_VAR 0 30
84536: AND
84537: IFFALSE 84678
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
84539: LD_ADDR_VAR 0 13
84543: PUSH
84544: LD_VAR 0 30
84548: PPUSH
84549: LD_INT 3
84551: PUSH
84552: LD_INT 54
84554: PUSH
84555: EMPTY
84556: LIST
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: PPUSH
84562: CALL_OW 72
84566: PPUSH
84567: LD_VAR 0 4
84571: PUSH
84572: LD_VAR 0 7
84576: ARRAY
84577: PPUSH
84578: CALL_OW 74
84582: ST_TO_ADDR
// if z then
84583: LD_VAR 0 13
84587: IFFALSE 84678
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
84589: LD_INT 91
84591: PUSH
84592: LD_VAR 0 13
84596: PUSH
84597: LD_INT 10
84599: PUSH
84600: EMPTY
84601: LIST
84602: LIST
84603: LIST
84604: PUSH
84605: LD_INT 81
84607: PUSH
84608: LD_VAR 0 13
84612: PPUSH
84613: CALL_OW 255
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: PUSH
84622: EMPTY
84623: LIST
84624: LIST
84625: PPUSH
84626: CALL_OW 69
84630: PUSH
84631: LD_INT 0
84633: EQUAL
84634: IFFALSE 84658
// ComHeal ( group [ i ] , z ) else
84636: LD_VAR 0 4
84640: PUSH
84641: LD_VAR 0 7
84645: ARRAY
84646: PPUSH
84647: LD_VAR 0 13
84651: PPUSH
84652: CALL_OW 128
84656: GO 84678
// ComMoveToArea ( group [ i ] , f_heal ) ;
84658: LD_VAR 0 4
84662: PUSH
84663: LD_VAR 0 7
84667: ARRAY
84668: PPUSH
84669: LD_VAR 0 23
84673: PPUSH
84674: CALL_OW 113
// end ; continue ;
84678: GO 83709
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
84680: LD_VAR 0 4
84684: PUSH
84685: LD_VAR 0 7
84689: ARRAY
84690: PPUSH
84691: CALL_OW 256
84695: PUSH
84696: LD_INT 700
84698: LESS
84699: PUSH
84700: LD_VAR 0 4
84704: PUSH
84705: LD_VAR 0 7
84709: ARRAY
84710: PUSH
84711: LD_VAR 0 30
84715: IN
84716: NOT
84717: AND
84718: IFFALSE 84742
// to_heal := to_heal union group [ i ] ;
84720: LD_ADDR_VAR 0 30
84724: PUSH
84725: LD_VAR 0 30
84729: PUSH
84730: LD_VAR 0 4
84734: PUSH
84735: LD_VAR 0 7
84739: ARRAY
84740: UNION
84741: ST_TO_ADDR
// if group [ i ] in to_heal then
84742: LD_VAR 0 4
84746: PUSH
84747: LD_VAR 0 7
84751: ARRAY
84752: PUSH
84753: LD_VAR 0 30
84757: IN
84758: IFFALSE 84867
// begin if GetLives ( group [ i ] ) = 1000 then
84760: LD_VAR 0 4
84764: PUSH
84765: LD_VAR 0 7
84769: ARRAY
84770: PPUSH
84771: CALL_OW 256
84775: PUSH
84776: LD_INT 1000
84778: EQUAL
84779: IFFALSE 84805
// to_heal := to_heal diff group [ i ] else
84781: LD_ADDR_VAR 0 30
84785: PUSH
84786: LD_VAR 0 30
84790: PUSH
84791: LD_VAR 0 4
84795: PUSH
84796: LD_VAR 0 7
84800: ARRAY
84801: DIFF
84802: ST_TO_ADDR
84803: GO 84867
// begin if not IsInArea ( group [ i ] , to_heal ) then
84805: LD_VAR 0 4
84809: PUSH
84810: LD_VAR 0 7
84814: ARRAY
84815: PPUSH
84816: LD_VAR 0 30
84820: PPUSH
84821: CALL_OW 308
84825: NOT
84826: IFFALSE 84850
// ComMoveToArea ( group [ i ] , f_heal ) else
84828: LD_VAR 0 4
84832: PUSH
84833: LD_VAR 0 7
84837: ARRAY
84838: PPUSH
84839: LD_VAR 0 23
84843: PPUSH
84844: CALL_OW 113
84848: GO 84865
// ComHold ( group [ i ] ) ;
84850: LD_VAR 0 4
84854: PUSH
84855: LD_VAR 0 7
84859: ARRAY
84860: PPUSH
84861: CALL_OW 140
// continue ;
84865: GO 83709
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
84867: LD_VAR 0 4
84871: PUSH
84872: LD_VAR 0 7
84876: ARRAY
84877: PPUSH
84878: LD_INT 10
84880: PPUSH
84881: CALL 81510 0 2
84885: NOT
84886: PUSH
84887: LD_VAR 0 16
84891: PUSH
84892: LD_VAR 0 7
84896: ARRAY
84897: PUSH
84898: EMPTY
84899: EQUAL
84900: NOT
84901: AND
84902: IFFALSE 85168
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
84904: LD_VAR 0 4
84908: PUSH
84909: LD_VAR 0 7
84913: ARRAY
84914: PPUSH
84915: CALL_OW 262
84919: PUSH
84920: LD_INT 1
84922: PUSH
84923: LD_INT 2
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: IN
84930: IFFALSE 84971
// if GetFuel ( group [ i ] ) < 10 then
84932: LD_VAR 0 4
84936: PUSH
84937: LD_VAR 0 7
84941: ARRAY
84942: PPUSH
84943: CALL_OW 261
84947: PUSH
84948: LD_INT 10
84950: LESS
84951: IFFALSE 84971
// SetFuel ( group [ i ] , 12 ) ;
84953: LD_VAR 0 4
84957: PUSH
84958: LD_VAR 0 7
84962: ARRAY
84963: PPUSH
84964: LD_INT 12
84966: PPUSH
84967: CALL_OW 240
// if units_path [ i ] then
84971: LD_VAR 0 16
84975: PUSH
84976: LD_VAR 0 7
84980: ARRAY
84981: IFFALSE 85166
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
84983: LD_VAR 0 4
84987: PUSH
84988: LD_VAR 0 7
84992: ARRAY
84993: PPUSH
84994: LD_VAR 0 16
84998: PUSH
84999: LD_VAR 0 7
85003: ARRAY
85004: PUSH
85005: LD_INT 1
85007: ARRAY
85008: PUSH
85009: LD_INT 1
85011: ARRAY
85012: PPUSH
85013: LD_VAR 0 16
85017: PUSH
85018: LD_VAR 0 7
85022: ARRAY
85023: PUSH
85024: LD_INT 1
85026: ARRAY
85027: PUSH
85028: LD_INT 2
85030: ARRAY
85031: PPUSH
85032: CALL_OW 297
85036: PUSH
85037: LD_INT 6
85039: GREATER
85040: IFFALSE 85115
// begin if not HasTask ( group [ i ] ) then
85042: LD_VAR 0 4
85046: PUSH
85047: LD_VAR 0 7
85051: ARRAY
85052: PPUSH
85053: CALL_OW 314
85057: NOT
85058: IFFALSE 85113
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
85060: LD_VAR 0 4
85064: PUSH
85065: LD_VAR 0 7
85069: ARRAY
85070: PPUSH
85071: LD_VAR 0 16
85075: PUSH
85076: LD_VAR 0 7
85080: ARRAY
85081: PUSH
85082: LD_INT 1
85084: ARRAY
85085: PUSH
85086: LD_INT 1
85088: ARRAY
85089: PPUSH
85090: LD_VAR 0 16
85094: PUSH
85095: LD_VAR 0 7
85099: ARRAY
85100: PUSH
85101: LD_INT 1
85103: ARRAY
85104: PUSH
85105: LD_INT 2
85107: ARRAY
85108: PPUSH
85109: CALL_OW 114
// end else
85113: GO 85166
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
85115: LD_ADDR_VAR 0 15
85119: PUSH
85120: LD_VAR 0 16
85124: PUSH
85125: LD_VAR 0 7
85129: ARRAY
85130: PPUSH
85131: LD_INT 1
85133: PPUSH
85134: CALL_OW 3
85138: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
85139: LD_ADDR_VAR 0 16
85143: PUSH
85144: LD_VAR 0 16
85148: PPUSH
85149: LD_VAR 0 7
85153: PPUSH
85154: LD_VAR 0 15
85158: PPUSH
85159: CALL_OW 1
85163: ST_TO_ADDR
// continue ;
85164: GO 83709
// end ; end ; end else
85166: GO 87830
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
85168: LD_ADDR_VAR 0 14
85172: PUSH
85173: LD_INT 81
85175: PUSH
85176: LD_VAR 0 4
85180: PUSH
85181: LD_VAR 0 7
85185: ARRAY
85186: PPUSH
85187: CALL_OW 255
85191: PUSH
85192: EMPTY
85193: LIST
85194: LIST
85195: PPUSH
85196: CALL_OW 69
85200: ST_TO_ADDR
// if not tmp then
85201: LD_VAR 0 14
85205: NOT
85206: IFFALSE 85210
// continue ;
85208: GO 83709
// if f_ignore_area then
85210: LD_VAR 0 17
85214: IFFALSE 85302
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
85216: LD_ADDR_VAR 0 15
85220: PUSH
85221: LD_VAR 0 14
85225: PPUSH
85226: LD_INT 3
85228: PUSH
85229: LD_INT 92
85231: PUSH
85232: LD_VAR 0 17
85236: PUSH
85237: LD_INT 1
85239: ARRAY
85240: PUSH
85241: LD_VAR 0 17
85245: PUSH
85246: LD_INT 2
85248: ARRAY
85249: PUSH
85250: LD_VAR 0 17
85254: PUSH
85255: LD_INT 3
85257: ARRAY
85258: PUSH
85259: EMPTY
85260: LIST
85261: LIST
85262: LIST
85263: LIST
85264: PUSH
85265: EMPTY
85266: LIST
85267: LIST
85268: PPUSH
85269: CALL_OW 72
85273: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
85274: LD_VAR 0 14
85278: PUSH
85279: LD_VAR 0 15
85283: DIFF
85284: IFFALSE 85302
// tmp := tmp diff tmp2 ;
85286: LD_ADDR_VAR 0 14
85290: PUSH
85291: LD_VAR 0 14
85295: PUSH
85296: LD_VAR 0 15
85300: DIFF
85301: ST_TO_ADDR
// end ; if not f_murder then
85302: LD_VAR 0 20
85306: NOT
85307: IFFALSE 85365
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
85309: LD_ADDR_VAR 0 15
85313: PUSH
85314: LD_VAR 0 14
85318: PPUSH
85319: LD_INT 3
85321: PUSH
85322: LD_INT 50
85324: PUSH
85325: EMPTY
85326: LIST
85327: PUSH
85328: EMPTY
85329: LIST
85330: LIST
85331: PPUSH
85332: CALL_OW 72
85336: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
85337: LD_VAR 0 14
85341: PUSH
85342: LD_VAR 0 15
85346: DIFF
85347: IFFALSE 85365
// tmp := tmp diff tmp2 ;
85349: LD_ADDR_VAR 0 14
85353: PUSH
85354: LD_VAR 0 14
85358: PUSH
85359: LD_VAR 0 15
85363: DIFF
85364: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
85365: LD_ADDR_VAR 0 14
85369: PUSH
85370: LD_VAR 0 4
85374: PUSH
85375: LD_VAR 0 7
85379: ARRAY
85380: PPUSH
85381: LD_VAR 0 14
85385: PPUSH
85386: LD_INT 1
85388: PPUSH
85389: LD_INT 1
85391: PPUSH
85392: CALL 55153 0 4
85396: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
85397: LD_VAR 0 4
85401: PUSH
85402: LD_VAR 0 7
85406: ARRAY
85407: PPUSH
85408: CALL_OW 257
85412: PUSH
85413: LD_INT 1
85415: EQUAL
85416: IFFALSE 85864
// begin if WantPlant ( group [ i ] ) then
85418: LD_VAR 0 4
85422: PUSH
85423: LD_VAR 0 7
85427: ARRAY
85428: PPUSH
85429: CALL 54654 0 1
85433: IFFALSE 85437
// continue ;
85435: GO 83709
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
85437: LD_VAR 0 18
85441: PUSH
85442: LD_VAR 0 4
85446: PUSH
85447: LD_VAR 0 7
85451: ARRAY
85452: PPUSH
85453: CALL_OW 310
85457: NOT
85458: AND
85459: PUSH
85460: LD_VAR 0 14
85464: PUSH
85465: LD_INT 1
85467: ARRAY
85468: PUSH
85469: LD_VAR 0 14
85473: PPUSH
85474: LD_INT 21
85476: PUSH
85477: LD_INT 2
85479: PUSH
85480: EMPTY
85481: LIST
85482: LIST
85483: PUSH
85484: LD_INT 58
85486: PUSH
85487: EMPTY
85488: LIST
85489: PUSH
85490: EMPTY
85491: LIST
85492: LIST
85493: PPUSH
85494: CALL_OW 72
85498: IN
85499: AND
85500: IFFALSE 85536
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
85502: LD_VAR 0 4
85506: PUSH
85507: LD_VAR 0 7
85511: ARRAY
85512: PPUSH
85513: LD_VAR 0 14
85517: PUSH
85518: LD_INT 1
85520: ARRAY
85521: PPUSH
85522: CALL_OW 120
// attacking := true ;
85526: LD_ADDR_VAR 0 29
85530: PUSH
85531: LD_INT 1
85533: ST_TO_ADDR
// continue ;
85534: GO 83709
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
85536: LD_VAR 0 26
85540: PUSH
85541: LD_VAR 0 4
85545: PUSH
85546: LD_VAR 0 7
85550: ARRAY
85551: PPUSH
85552: CALL_OW 257
85556: PUSH
85557: LD_INT 1
85559: EQUAL
85560: AND
85561: PUSH
85562: LD_VAR 0 4
85566: PUSH
85567: LD_VAR 0 7
85571: ARRAY
85572: PPUSH
85573: CALL_OW 256
85577: PUSH
85578: LD_INT 800
85580: LESS
85581: AND
85582: PUSH
85583: LD_VAR 0 4
85587: PUSH
85588: LD_VAR 0 7
85592: ARRAY
85593: PPUSH
85594: CALL_OW 318
85598: NOT
85599: AND
85600: IFFALSE 85617
// ComCrawl ( group [ i ] ) ;
85602: LD_VAR 0 4
85606: PUSH
85607: LD_VAR 0 7
85611: ARRAY
85612: PPUSH
85613: CALL_OW 137
// if f_mines then
85617: LD_VAR 0 21
85621: IFFALSE 85864
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
85623: LD_VAR 0 14
85627: PUSH
85628: LD_INT 1
85630: ARRAY
85631: PPUSH
85632: CALL_OW 247
85636: PUSH
85637: LD_INT 3
85639: EQUAL
85640: PUSH
85641: LD_VAR 0 14
85645: PUSH
85646: LD_INT 1
85648: ARRAY
85649: PUSH
85650: LD_VAR 0 27
85654: IN
85655: NOT
85656: AND
85657: IFFALSE 85864
// begin x := GetX ( tmp [ 1 ] ) ;
85659: LD_ADDR_VAR 0 10
85663: PUSH
85664: LD_VAR 0 14
85668: PUSH
85669: LD_INT 1
85671: ARRAY
85672: PPUSH
85673: CALL_OW 250
85677: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
85678: LD_ADDR_VAR 0 11
85682: PUSH
85683: LD_VAR 0 14
85687: PUSH
85688: LD_INT 1
85690: ARRAY
85691: PPUSH
85692: CALL_OW 251
85696: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
85697: LD_ADDR_VAR 0 12
85701: PUSH
85702: LD_VAR 0 4
85706: PUSH
85707: LD_VAR 0 7
85711: ARRAY
85712: PPUSH
85713: CALL 81595 0 1
85717: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
85718: LD_VAR 0 4
85722: PUSH
85723: LD_VAR 0 7
85727: ARRAY
85728: PPUSH
85729: LD_VAR 0 10
85733: PPUSH
85734: LD_VAR 0 11
85738: PPUSH
85739: LD_VAR 0 14
85743: PUSH
85744: LD_INT 1
85746: ARRAY
85747: PPUSH
85748: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
85752: LD_VAR 0 4
85756: PUSH
85757: LD_VAR 0 7
85761: ARRAY
85762: PPUSH
85763: LD_VAR 0 10
85767: PPUSH
85768: LD_VAR 0 12
85772: PPUSH
85773: LD_INT 7
85775: PPUSH
85776: CALL_OW 272
85780: PPUSH
85781: LD_VAR 0 11
85785: PPUSH
85786: LD_VAR 0 12
85790: PPUSH
85791: LD_INT 7
85793: PPUSH
85794: CALL_OW 273
85798: PPUSH
85799: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
85803: LD_VAR 0 4
85807: PUSH
85808: LD_VAR 0 7
85812: ARRAY
85813: PPUSH
85814: LD_INT 71
85816: PPUSH
85817: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
85821: LD_ADDR_VAR 0 27
85825: PUSH
85826: LD_VAR 0 27
85830: PPUSH
85831: LD_VAR 0 27
85835: PUSH
85836: LD_INT 1
85838: PLUS
85839: PPUSH
85840: LD_VAR 0 14
85844: PUSH
85845: LD_INT 1
85847: ARRAY
85848: PPUSH
85849: CALL_OW 1
85853: ST_TO_ADDR
// attacking := true ;
85854: LD_ADDR_VAR 0 29
85858: PUSH
85859: LD_INT 1
85861: ST_TO_ADDR
// continue ;
85862: GO 83709
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
85864: LD_VAR 0 4
85868: PUSH
85869: LD_VAR 0 7
85873: ARRAY
85874: PPUSH
85875: CALL_OW 257
85879: PUSH
85880: LD_INT 17
85882: EQUAL
85883: PUSH
85884: LD_VAR 0 4
85888: PUSH
85889: LD_VAR 0 7
85893: ARRAY
85894: PPUSH
85895: CALL_OW 110
85899: PUSH
85900: LD_INT 71
85902: EQUAL
85903: NOT
85904: AND
85905: IFFALSE 86051
// begin attacking := false ;
85907: LD_ADDR_VAR 0 29
85911: PUSH
85912: LD_INT 0
85914: ST_TO_ADDR
// k := 5 ;
85915: LD_ADDR_VAR 0 9
85919: PUSH
85920: LD_INT 5
85922: ST_TO_ADDR
// if tmp < k then
85923: LD_VAR 0 14
85927: PUSH
85928: LD_VAR 0 9
85932: LESS
85933: IFFALSE 85945
// k := tmp ;
85935: LD_ADDR_VAR 0 9
85939: PUSH
85940: LD_VAR 0 14
85944: ST_TO_ADDR
// for j = 1 to k do
85945: LD_ADDR_VAR 0 8
85949: PUSH
85950: DOUBLE
85951: LD_INT 1
85953: DEC
85954: ST_TO_ADDR
85955: LD_VAR 0 9
85959: PUSH
85960: FOR_TO
85961: IFFALSE 86049
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
85963: LD_VAR 0 14
85967: PUSH
85968: LD_VAR 0 8
85972: ARRAY
85973: PUSH
85974: LD_VAR 0 14
85978: PPUSH
85979: LD_INT 58
85981: PUSH
85982: EMPTY
85983: LIST
85984: PPUSH
85985: CALL_OW 72
85989: IN
85990: NOT
85991: IFFALSE 86047
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
85993: LD_VAR 0 4
85997: PUSH
85998: LD_VAR 0 7
86002: ARRAY
86003: PPUSH
86004: LD_VAR 0 14
86008: PUSH
86009: LD_VAR 0 8
86013: ARRAY
86014: PPUSH
86015: CALL_OW 115
// attacking := true ;
86019: LD_ADDR_VAR 0 29
86023: PUSH
86024: LD_INT 1
86026: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
86027: LD_VAR 0 4
86031: PUSH
86032: LD_VAR 0 7
86036: ARRAY
86037: PPUSH
86038: LD_INT 71
86040: PPUSH
86041: CALL_OW 109
// continue ;
86045: GO 85960
// end ; end ;
86047: GO 85960
86049: POP
86050: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
86051: LD_VAR 0 4
86055: PUSH
86056: LD_VAR 0 7
86060: ARRAY
86061: PPUSH
86062: CALL_OW 257
86066: PUSH
86067: LD_INT 8
86069: EQUAL
86070: PUSH
86071: LD_VAR 0 4
86075: PUSH
86076: LD_VAR 0 7
86080: ARRAY
86081: PPUSH
86082: CALL_OW 264
86086: PUSH
86087: LD_INT 28
86089: PUSH
86090: LD_INT 45
86092: PUSH
86093: LD_INT 7
86095: PUSH
86096: LD_INT 47
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: LIST
86103: LIST
86104: IN
86105: OR
86106: IFFALSE 86362
// begin attacking := false ;
86108: LD_ADDR_VAR 0 29
86112: PUSH
86113: LD_INT 0
86115: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
86116: LD_VAR 0 14
86120: PUSH
86121: LD_INT 1
86123: ARRAY
86124: PPUSH
86125: CALL_OW 266
86129: PUSH
86130: LD_INT 32
86132: PUSH
86133: LD_INT 31
86135: PUSH
86136: LD_INT 33
86138: PUSH
86139: LD_INT 4
86141: PUSH
86142: LD_INT 5
86144: PUSH
86145: EMPTY
86146: LIST
86147: LIST
86148: LIST
86149: LIST
86150: LIST
86151: IN
86152: IFFALSE 86338
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
86154: LD_ADDR_VAR 0 9
86158: PUSH
86159: LD_VAR 0 14
86163: PUSH
86164: LD_INT 1
86166: ARRAY
86167: PPUSH
86168: CALL_OW 266
86172: PPUSH
86173: LD_VAR 0 14
86177: PUSH
86178: LD_INT 1
86180: ARRAY
86181: PPUSH
86182: CALL_OW 250
86186: PPUSH
86187: LD_VAR 0 14
86191: PUSH
86192: LD_INT 1
86194: ARRAY
86195: PPUSH
86196: CALL_OW 251
86200: PPUSH
86201: LD_VAR 0 14
86205: PUSH
86206: LD_INT 1
86208: ARRAY
86209: PPUSH
86210: CALL_OW 254
86214: PPUSH
86215: LD_VAR 0 14
86219: PUSH
86220: LD_INT 1
86222: ARRAY
86223: PPUSH
86224: CALL_OW 248
86228: PPUSH
86229: LD_INT 0
86231: PPUSH
86232: CALL 62965 0 6
86236: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
86237: LD_ADDR_VAR 0 8
86241: PUSH
86242: LD_VAR 0 4
86246: PUSH
86247: LD_VAR 0 7
86251: ARRAY
86252: PPUSH
86253: LD_VAR 0 9
86257: PPUSH
86258: CALL 81635 0 2
86262: ST_TO_ADDR
// if j then
86263: LD_VAR 0 8
86267: IFFALSE 86336
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
86269: LD_VAR 0 8
86273: PUSH
86274: LD_INT 1
86276: ARRAY
86277: PPUSH
86278: LD_VAR 0 8
86282: PUSH
86283: LD_INT 2
86285: ARRAY
86286: PPUSH
86287: CALL_OW 488
86291: IFFALSE 86336
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
86293: LD_VAR 0 4
86297: PUSH
86298: LD_VAR 0 7
86302: ARRAY
86303: PPUSH
86304: LD_VAR 0 8
86308: PUSH
86309: LD_INT 1
86311: ARRAY
86312: PPUSH
86313: LD_VAR 0 8
86317: PUSH
86318: LD_INT 2
86320: ARRAY
86321: PPUSH
86322: CALL_OW 116
// attacking := true ;
86326: LD_ADDR_VAR 0 29
86330: PUSH
86331: LD_INT 1
86333: ST_TO_ADDR
// continue ;
86334: GO 83709
// end ; end else
86336: GO 86362
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86338: LD_VAR 0 4
86342: PUSH
86343: LD_VAR 0 7
86347: ARRAY
86348: PPUSH
86349: LD_VAR 0 14
86353: PUSH
86354: LD_INT 1
86356: ARRAY
86357: PPUSH
86358: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
86362: LD_VAR 0 4
86366: PUSH
86367: LD_VAR 0 7
86371: ARRAY
86372: PPUSH
86373: CALL_OW 265
86377: PUSH
86378: LD_INT 11
86380: EQUAL
86381: IFFALSE 86659
// begin k := 10 ;
86383: LD_ADDR_VAR 0 9
86387: PUSH
86388: LD_INT 10
86390: ST_TO_ADDR
// x := 0 ;
86391: LD_ADDR_VAR 0 10
86395: PUSH
86396: LD_INT 0
86398: ST_TO_ADDR
// if tmp < k then
86399: LD_VAR 0 14
86403: PUSH
86404: LD_VAR 0 9
86408: LESS
86409: IFFALSE 86421
// k := tmp ;
86411: LD_ADDR_VAR 0 9
86415: PUSH
86416: LD_VAR 0 14
86420: ST_TO_ADDR
// for j = k downto 1 do
86421: LD_ADDR_VAR 0 8
86425: PUSH
86426: DOUBLE
86427: LD_VAR 0 9
86431: INC
86432: ST_TO_ADDR
86433: LD_INT 1
86435: PUSH
86436: FOR_DOWNTO
86437: IFFALSE 86512
// begin if GetType ( tmp [ j ] ) = unit_human then
86439: LD_VAR 0 14
86443: PUSH
86444: LD_VAR 0 8
86448: ARRAY
86449: PPUSH
86450: CALL_OW 247
86454: PUSH
86455: LD_INT 1
86457: EQUAL
86458: IFFALSE 86510
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
86460: LD_VAR 0 4
86464: PUSH
86465: LD_VAR 0 7
86469: ARRAY
86470: PPUSH
86471: LD_VAR 0 14
86475: PUSH
86476: LD_VAR 0 8
86480: ARRAY
86481: PPUSH
86482: CALL 81906 0 2
// x := tmp [ j ] ;
86486: LD_ADDR_VAR 0 10
86490: PUSH
86491: LD_VAR 0 14
86495: PUSH
86496: LD_VAR 0 8
86500: ARRAY
86501: ST_TO_ADDR
// attacking := true ;
86502: LD_ADDR_VAR 0 29
86506: PUSH
86507: LD_INT 1
86509: ST_TO_ADDR
// end ; end ;
86510: GO 86436
86512: POP
86513: POP
// if not x then
86514: LD_VAR 0 10
86518: NOT
86519: IFFALSE 86659
// begin attacking := true ;
86521: LD_ADDR_VAR 0 29
86525: PUSH
86526: LD_INT 1
86528: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
86529: LD_VAR 0 4
86533: PUSH
86534: LD_VAR 0 7
86538: ARRAY
86539: PPUSH
86540: CALL_OW 250
86544: PPUSH
86545: LD_VAR 0 4
86549: PUSH
86550: LD_VAR 0 7
86554: ARRAY
86555: PPUSH
86556: CALL_OW 251
86560: PPUSH
86561: CALL_OW 546
86565: PUSH
86566: LD_INT 2
86568: ARRAY
86569: PUSH
86570: LD_VAR 0 14
86574: PUSH
86575: LD_INT 1
86577: ARRAY
86578: PPUSH
86579: CALL_OW 250
86583: PPUSH
86584: LD_VAR 0 14
86588: PUSH
86589: LD_INT 1
86591: ARRAY
86592: PPUSH
86593: CALL_OW 251
86597: PPUSH
86598: CALL_OW 546
86602: PUSH
86603: LD_INT 2
86605: ARRAY
86606: EQUAL
86607: IFFALSE 86635
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
86609: LD_VAR 0 4
86613: PUSH
86614: LD_VAR 0 7
86618: ARRAY
86619: PPUSH
86620: LD_VAR 0 14
86624: PUSH
86625: LD_INT 1
86627: ARRAY
86628: PPUSH
86629: CALL 81906 0 2
86633: GO 86659
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
86635: LD_VAR 0 4
86639: PUSH
86640: LD_VAR 0 7
86644: ARRAY
86645: PPUSH
86646: LD_VAR 0 14
86650: PUSH
86651: LD_INT 1
86653: ARRAY
86654: PPUSH
86655: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
86659: LD_VAR 0 4
86663: PUSH
86664: LD_VAR 0 7
86668: ARRAY
86669: PPUSH
86670: CALL_OW 264
86674: PUSH
86675: LD_INT 29
86677: EQUAL
86678: IFFALSE 87044
// begin if WantsToAttack ( group [ i ] ) in bombed then
86680: LD_VAR 0 4
86684: PUSH
86685: LD_VAR 0 7
86689: ARRAY
86690: PPUSH
86691: CALL_OW 319
86695: PUSH
86696: LD_VAR 0 28
86700: IN
86701: IFFALSE 86705
// continue ;
86703: GO 83709
// k := 8 ;
86705: LD_ADDR_VAR 0 9
86709: PUSH
86710: LD_INT 8
86712: ST_TO_ADDR
// x := 0 ;
86713: LD_ADDR_VAR 0 10
86717: PUSH
86718: LD_INT 0
86720: ST_TO_ADDR
// if tmp < k then
86721: LD_VAR 0 14
86725: PUSH
86726: LD_VAR 0 9
86730: LESS
86731: IFFALSE 86743
// k := tmp ;
86733: LD_ADDR_VAR 0 9
86737: PUSH
86738: LD_VAR 0 14
86742: ST_TO_ADDR
// for j = 1 to k do
86743: LD_ADDR_VAR 0 8
86747: PUSH
86748: DOUBLE
86749: LD_INT 1
86751: DEC
86752: ST_TO_ADDR
86753: LD_VAR 0 9
86757: PUSH
86758: FOR_TO
86759: IFFALSE 86891
// begin if GetType ( tmp [ j ] ) = unit_building then
86761: LD_VAR 0 14
86765: PUSH
86766: LD_VAR 0 8
86770: ARRAY
86771: PPUSH
86772: CALL_OW 247
86776: PUSH
86777: LD_INT 3
86779: EQUAL
86780: IFFALSE 86889
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
86782: LD_VAR 0 14
86786: PUSH
86787: LD_VAR 0 8
86791: ARRAY
86792: PUSH
86793: LD_VAR 0 28
86797: IN
86798: NOT
86799: PUSH
86800: LD_VAR 0 14
86804: PUSH
86805: LD_VAR 0 8
86809: ARRAY
86810: PPUSH
86811: CALL_OW 313
86815: AND
86816: IFFALSE 86889
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
86818: LD_VAR 0 4
86822: PUSH
86823: LD_VAR 0 7
86827: ARRAY
86828: PPUSH
86829: LD_VAR 0 14
86833: PUSH
86834: LD_VAR 0 8
86838: ARRAY
86839: PPUSH
86840: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
86844: LD_ADDR_VAR 0 28
86848: PUSH
86849: LD_VAR 0 28
86853: PPUSH
86854: LD_VAR 0 28
86858: PUSH
86859: LD_INT 1
86861: PLUS
86862: PPUSH
86863: LD_VAR 0 14
86867: PUSH
86868: LD_VAR 0 8
86872: ARRAY
86873: PPUSH
86874: CALL_OW 1
86878: ST_TO_ADDR
// attacking := true ;
86879: LD_ADDR_VAR 0 29
86883: PUSH
86884: LD_INT 1
86886: ST_TO_ADDR
// break ;
86887: GO 86891
// end ; end ;
86889: GO 86758
86891: POP
86892: POP
// if not attacking and f_attack_depot then
86893: LD_VAR 0 29
86897: NOT
86898: PUSH
86899: LD_VAR 0 25
86903: AND
86904: IFFALSE 86999
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
86906: LD_ADDR_VAR 0 13
86910: PUSH
86911: LD_VAR 0 14
86915: PPUSH
86916: LD_INT 2
86918: PUSH
86919: LD_INT 30
86921: PUSH
86922: LD_INT 0
86924: PUSH
86925: EMPTY
86926: LIST
86927: LIST
86928: PUSH
86929: LD_INT 30
86931: PUSH
86932: LD_INT 1
86934: PUSH
86935: EMPTY
86936: LIST
86937: LIST
86938: PUSH
86939: EMPTY
86940: LIST
86941: LIST
86942: LIST
86943: PPUSH
86944: CALL_OW 72
86948: ST_TO_ADDR
// if z then
86949: LD_VAR 0 13
86953: IFFALSE 86999
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
86955: LD_VAR 0 4
86959: PUSH
86960: LD_VAR 0 7
86964: ARRAY
86965: PPUSH
86966: LD_VAR 0 13
86970: PPUSH
86971: LD_VAR 0 4
86975: PUSH
86976: LD_VAR 0 7
86980: ARRAY
86981: PPUSH
86982: CALL_OW 74
86986: PPUSH
86987: CALL_OW 115
// attacking := true ;
86991: LD_ADDR_VAR 0 29
86995: PUSH
86996: LD_INT 1
86998: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
86999: LD_VAR 0 4
87003: PUSH
87004: LD_VAR 0 7
87008: ARRAY
87009: PPUSH
87010: CALL_OW 256
87014: PUSH
87015: LD_INT 500
87017: LESS
87018: IFFALSE 87044
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
87020: LD_VAR 0 4
87024: PUSH
87025: LD_VAR 0 7
87029: ARRAY
87030: PPUSH
87031: LD_VAR 0 14
87035: PUSH
87036: LD_INT 1
87038: ARRAY
87039: PPUSH
87040: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
87044: LD_VAR 0 4
87048: PUSH
87049: LD_VAR 0 7
87053: ARRAY
87054: PPUSH
87055: CALL_OW 264
87059: PUSH
87060: LD_INT 49
87062: EQUAL
87063: IFFALSE 87184
// begin if not HasTask ( group [ i ] ) then
87065: LD_VAR 0 4
87069: PUSH
87070: LD_VAR 0 7
87074: ARRAY
87075: PPUSH
87076: CALL_OW 314
87080: NOT
87081: IFFALSE 87184
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
87083: LD_ADDR_VAR 0 9
87087: PUSH
87088: LD_INT 81
87090: PUSH
87091: LD_VAR 0 4
87095: PUSH
87096: LD_VAR 0 7
87100: ARRAY
87101: PPUSH
87102: CALL_OW 255
87106: PUSH
87107: EMPTY
87108: LIST
87109: LIST
87110: PPUSH
87111: CALL_OW 69
87115: PPUSH
87116: LD_VAR 0 4
87120: PUSH
87121: LD_VAR 0 7
87125: ARRAY
87126: PPUSH
87127: CALL_OW 74
87131: ST_TO_ADDR
// if k then
87132: LD_VAR 0 9
87136: IFFALSE 87184
// if GetDistUnits ( group [ i ] , k ) > 10 then
87138: LD_VAR 0 4
87142: PUSH
87143: LD_VAR 0 7
87147: ARRAY
87148: PPUSH
87149: LD_VAR 0 9
87153: PPUSH
87154: CALL_OW 296
87158: PUSH
87159: LD_INT 10
87161: GREATER
87162: IFFALSE 87184
// ComMoveUnit ( group [ i ] , k ) ;
87164: LD_VAR 0 4
87168: PUSH
87169: LD_VAR 0 7
87173: ARRAY
87174: PPUSH
87175: LD_VAR 0 9
87179: PPUSH
87180: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87184: LD_VAR 0 4
87188: PUSH
87189: LD_VAR 0 7
87193: ARRAY
87194: PPUSH
87195: CALL_OW 256
87199: PUSH
87200: LD_INT 250
87202: LESS
87203: PUSH
87204: LD_VAR 0 4
87208: PUSH
87209: LD_VAR 0 7
87213: ARRAY
87214: PUSH
87215: LD_INT 21
87217: PUSH
87218: LD_INT 2
87220: PUSH
87221: EMPTY
87222: LIST
87223: LIST
87224: PUSH
87225: LD_INT 23
87227: PUSH
87228: LD_INT 2
87230: PUSH
87231: EMPTY
87232: LIST
87233: LIST
87234: PUSH
87235: EMPTY
87236: LIST
87237: LIST
87238: PPUSH
87239: CALL_OW 69
87243: IN
87244: AND
87245: IFFALSE 87370
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
87247: LD_ADDR_VAR 0 9
87251: PUSH
87252: LD_OWVAR 3
87256: PUSH
87257: LD_VAR 0 4
87261: PUSH
87262: LD_VAR 0 7
87266: ARRAY
87267: DIFF
87268: PPUSH
87269: LD_VAR 0 4
87273: PUSH
87274: LD_VAR 0 7
87278: ARRAY
87279: PPUSH
87280: CALL_OW 74
87284: ST_TO_ADDR
// if not k then
87285: LD_VAR 0 9
87289: NOT
87290: IFFALSE 87294
// continue ;
87292: GO 83709
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
87294: LD_VAR 0 9
87298: PUSH
87299: LD_INT 81
87301: PUSH
87302: LD_VAR 0 4
87306: PUSH
87307: LD_VAR 0 7
87311: ARRAY
87312: PPUSH
87313: CALL_OW 255
87317: PUSH
87318: EMPTY
87319: LIST
87320: LIST
87321: PPUSH
87322: CALL_OW 69
87326: IN
87327: PUSH
87328: LD_VAR 0 9
87332: PPUSH
87333: LD_VAR 0 4
87337: PUSH
87338: LD_VAR 0 7
87342: ARRAY
87343: PPUSH
87344: CALL_OW 296
87348: PUSH
87349: LD_INT 5
87351: LESS
87352: AND
87353: IFFALSE 87370
// ComAutodestruct ( group [ i ] ) ;
87355: LD_VAR 0 4
87359: PUSH
87360: LD_VAR 0 7
87364: ARRAY
87365: PPUSH
87366: CALL 81804 0 1
// end ; if f_attack_depot then
87370: LD_VAR 0 25
87374: IFFALSE 87486
// begin k := 6 ;
87376: LD_ADDR_VAR 0 9
87380: PUSH
87381: LD_INT 6
87383: ST_TO_ADDR
// if tmp < k then
87384: LD_VAR 0 14
87388: PUSH
87389: LD_VAR 0 9
87393: LESS
87394: IFFALSE 87406
// k := tmp ;
87396: LD_ADDR_VAR 0 9
87400: PUSH
87401: LD_VAR 0 14
87405: ST_TO_ADDR
// for j = 1 to k do
87406: LD_ADDR_VAR 0 8
87410: PUSH
87411: DOUBLE
87412: LD_INT 1
87414: DEC
87415: ST_TO_ADDR
87416: LD_VAR 0 9
87420: PUSH
87421: FOR_TO
87422: IFFALSE 87484
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
87424: LD_VAR 0 8
87428: PPUSH
87429: CALL_OW 266
87433: PUSH
87434: LD_INT 0
87436: PUSH
87437: LD_INT 1
87439: PUSH
87440: EMPTY
87441: LIST
87442: LIST
87443: IN
87444: IFFALSE 87482
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
87446: LD_VAR 0 4
87450: PUSH
87451: LD_VAR 0 7
87455: ARRAY
87456: PPUSH
87457: LD_VAR 0 14
87461: PUSH
87462: LD_VAR 0 8
87466: ARRAY
87467: PPUSH
87468: CALL_OW 115
// attacking := true ;
87472: LD_ADDR_VAR 0 29
87476: PUSH
87477: LD_INT 1
87479: ST_TO_ADDR
// break ;
87480: GO 87484
// end ;
87482: GO 87421
87484: POP
87485: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
87486: LD_VAR 0 4
87490: PUSH
87491: LD_VAR 0 7
87495: ARRAY
87496: PPUSH
87497: CALL_OW 302
87501: PUSH
87502: LD_VAR 0 29
87506: NOT
87507: AND
87508: IFFALSE 87830
// begin if GetTag ( group [ i ] ) = 71 then
87510: LD_VAR 0 4
87514: PUSH
87515: LD_VAR 0 7
87519: ARRAY
87520: PPUSH
87521: CALL_OW 110
87525: PUSH
87526: LD_INT 71
87528: EQUAL
87529: IFFALSE 87570
// begin if HasTask ( group [ i ] ) then
87531: LD_VAR 0 4
87535: PUSH
87536: LD_VAR 0 7
87540: ARRAY
87541: PPUSH
87542: CALL_OW 314
87546: IFFALSE 87552
// continue else
87548: GO 83709
87550: GO 87570
// SetTag ( group [ i ] , 0 ) ;
87552: LD_VAR 0 4
87556: PUSH
87557: LD_VAR 0 7
87561: ARRAY
87562: PPUSH
87563: LD_INT 0
87565: PPUSH
87566: CALL_OW 109
// end ; k := 8 ;
87570: LD_ADDR_VAR 0 9
87574: PUSH
87575: LD_INT 8
87577: ST_TO_ADDR
// x := 0 ;
87578: LD_ADDR_VAR 0 10
87582: PUSH
87583: LD_INT 0
87585: ST_TO_ADDR
// if tmp < k then
87586: LD_VAR 0 14
87590: PUSH
87591: LD_VAR 0 9
87595: LESS
87596: IFFALSE 87608
// k := tmp ;
87598: LD_ADDR_VAR 0 9
87602: PUSH
87603: LD_VAR 0 14
87607: ST_TO_ADDR
// for j = 1 to k do
87608: LD_ADDR_VAR 0 8
87612: PUSH
87613: DOUBLE
87614: LD_INT 1
87616: DEC
87617: ST_TO_ADDR
87618: LD_VAR 0 9
87622: PUSH
87623: FOR_TO
87624: IFFALSE 87722
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
87626: LD_VAR 0 14
87630: PUSH
87631: LD_VAR 0 8
87635: ARRAY
87636: PPUSH
87637: CALL_OW 247
87641: PUSH
87642: LD_INT 1
87644: EQUAL
87645: PUSH
87646: LD_VAR 0 14
87650: PUSH
87651: LD_VAR 0 8
87655: ARRAY
87656: PPUSH
87657: CALL_OW 256
87661: PUSH
87662: LD_INT 250
87664: LESS
87665: PUSH
87666: LD_VAR 0 20
87670: AND
87671: PUSH
87672: LD_VAR 0 20
87676: NOT
87677: PUSH
87678: LD_VAR 0 14
87682: PUSH
87683: LD_VAR 0 8
87687: ARRAY
87688: PPUSH
87689: CALL_OW 256
87693: PUSH
87694: LD_INT 250
87696: GREATEREQUAL
87697: AND
87698: OR
87699: AND
87700: IFFALSE 87720
// begin x := tmp [ j ] ;
87702: LD_ADDR_VAR 0 10
87706: PUSH
87707: LD_VAR 0 14
87711: PUSH
87712: LD_VAR 0 8
87716: ARRAY
87717: ST_TO_ADDR
// break ;
87718: GO 87722
// end ;
87720: GO 87623
87722: POP
87723: POP
// if x then
87724: LD_VAR 0 10
87728: IFFALSE 87752
// ComAttackUnit ( group [ i ] , x ) else
87730: LD_VAR 0 4
87734: PUSH
87735: LD_VAR 0 7
87739: ARRAY
87740: PPUSH
87741: LD_VAR 0 10
87745: PPUSH
87746: CALL_OW 115
87750: GO 87776
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
87752: LD_VAR 0 4
87756: PUSH
87757: LD_VAR 0 7
87761: ARRAY
87762: PPUSH
87763: LD_VAR 0 14
87767: PUSH
87768: LD_INT 1
87770: ARRAY
87771: PPUSH
87772: CALL_OW 115
// if not HasTask ( group [ i ] ) then
87776: LD_VAR 0 4
87780: PUSH
87781: LD_VAR 0 7
87785: ARRAY
87786: PPUSH
87787: CALL_OW 314
87791: NOT
87792: IFFALSE 87830
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
87794: LD_VAR 0 4
87798: PUSH
87799: LD_VAR 0 7
87803: ARRAY
87804: PPUSH
87805: LD_VAR 0 14
87809: PPUSH
87810: LD_VAR 0 4
87814: PUSH
87815: LD_VAR 0 7
87819: ARRAY
87820: PPUSH
87821: CALL_OW 74
87825: PPUSH
87826: CALL_OW 115
// end ; end ; end ;
87830: GO 83709
87832: POP
87833: POP
// wait ( 0 0$2 ) ;
87834: LD_INT 70
87836: PPUSH
87837: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
87841: LD_VAR 0 4
87845: NOT
87846: PUSH
87847: LD_VAR 0 4
87851: PUSH
87852: EMPTY
87853: EQUAL
87854: OR
87855: PUSH
87856: LD_INT 81
87858: PUSH
87859: LD_VAR 0 35
87863: PUSH
87864: EMPTY
87865: LIST
87866: LIST
87867: PPUSH
87868: CALL_OW 69
87872: NOT
87873: OR
87874: IFFALSE 83694
// end ;
87876: LD_VAR 0 2
87880: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
87881: LD_INT 0
87883: PPUSH
87884: PPUSH
87885: PPUSH
87886: PPUSH
// if not base_units then
87887: LD_VAR 0 1
87891: NOT
87892: IFFALSE 87896
// exit ;
87894: GO 87983
// result := false ;
87896: LD_ADDR_VAR 0 2
87900: PUSH
87901: LD_INT 0
87903: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
87904: LD_ADDR_VAR 0 5
87908: PUSH
87909: LD_VAR 0 1
87913: PPUSH
87914: LD_INT 21
87916: PUSH
87917: LD_INT 3
87919: PUSH
87920: EMPTY
87921: LIST
87922: LIST
87923: PPUSH
87924: CALL_OW 72
87928: ST_TO_ADDR
// if not tmp then
87929: LD_VAR 0 5
87933: NOT
87934: IFFALSE 87938
// exit ;
87936: GO 87983
// for i in tmp do
87938: LD_ADDR_VAR 0 3
87942: PUSH
87943: LD_VAR 0 5
87947: PUSH
87948: FOR_IN
87949: IFFALSE 87981
// begin result := EnemyInRange ( i , 22 ) ;
87951: LD_ADDR_VAR 0 2
87955: PUSH
87956: LD_VAR 0 3
87960: PPUSH
87961: LD_INT 22
87963: PPUSH
87964: CALL 81510 0 2
87968: ST_TO_ADDR
// if result then
87969: LD_VAR 0 2
87973: IFFALSE 87979
// exit ;
87975: POP
87976: POP
87977: GO 87983
// end ;
87979: GO 87948
87981: POP
87982: POP
// end ;
87983: LD_VAR 0 2
87987: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
87988: LD_INT 0
87990: PPUSH
87991: PPUSH
// if not units then
87992: LD_VAR 0 1
87996: NOT
87997: IFFALSE 88001
// exit ;
87999: GO 88071
// result := [ ] ;
88001: LD_ADDR_VAR 0 3
88005: PUSH
88006: EMPTY
88007: ST_TO_ADDR
// for i in units do
88008: LD_ADDR_VAR 0 4
88012: PUSH
88013: LD_VAR 0 1
88017: PUSH
88018: FOR_IN
88019: IFFALSE 88069
// if GetTag ( i ) = tag then
88021: LD_VAR 0 4
88025: PPUSH
88026: CALL_OW 110
88030: PUSH
88031: LD_VAR 0 2
88035: EQUAL
88036: IFFALSE 88067
// result := Insert ( result , result + 1 , i ) ;
88038: LD_ADDR_VAR 0 3
88042: PUSH
88043: LD_VAR 0 3
88047: PPUSH
88048: LD_VAR 0 3
88052: PUSH
88053: LD_INT 1
88055: PLUS
88056: PPUSH
88057: LD_VAR 0 4
88061: PPUSH
88062: CALL_OW 2
88066: ST_TO_ADDR
88067: GO 88018
88069: POP
88070: POP
// end ;
88071: LD_VAR 0 3
88075: RET
// export function IsDriver ( un ) ; begin
88076: LD_INT 0
88078: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
88079: LD_ADDR_VAR 0 2
88083: PUSH
88084: LD_VAR 0 1
88088: PUSH
88089: LD_INT 55
88091: PUSH
88092: EMPTY
88093: LIST
88094: PPUSH
88095: CALL_OW 69
88099: IN
88100: ST_TO_ADDR
// end ;
88101: LD_VAR 0 2
88105: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
88106: LD_INT 0
88108: PPUSH
88109: PPUSH
// list := [ ] ;
88110: LD_ADDR_VAR 0 5
88114: PUSH
88115: EMPTY
88116: ST_TO_ADDR
// case d of 0 :
88117: LD_VAR 0 3
88121: PUSH
88122: LD_INT 0
88124: DOUBLE
88125: EQUAL
88126: IFTRUE 88130
88128: GO 88263
88130: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
88131: LD_ADDR_VAR 0 5
88135: PUSH
88136: LD_VAR 0 1
88140: PUSH
88141: LD_INT 4
88143: MINUS
88144: PUSH
88145: LD_VAR 0 2
88149: PUSH
88150: LD_INT 4
88152: MINUS
88153: PUSH
88154: LD_INT 2
88156: PUSH
88157: EMPTY
88158: LIST
88159: LIST
88160: LIST
88161: PUSH
88162: LD_VAR 0 1
88166: PUSH
88167: LD_INT 3
88169: MINUS
88170: PUSH
88171: LD_VAR 0 2
88175: PUSH
88176: LD_INT 1
88178: PUSH
88179: EMPTY
88180: LIST
88181: LIST
88182: LIST
88183: PUSH
88184: LD_VAR 0 1
88188: PUSH
88189: LD_INT 4
88191: PLUS
88192: PUSH
88193: LD_VAR 0 2
88197: PUSH
88198: LD_INT 4
88200: PUSH
88201: EMPTY
88202: LIST
88203: LIST
88204: LIST
88205: PUSH
88206: LD_VAR 0 1
88210: PUSH
88211: LD_INT 3
88213: PLUS
88214: PUSH
88215: LD_VAR 0 2
88219: PUSH
88220: LD_INT 3
88222: PLUS
88223: PUSH
88224: LD_INT 5
88226: PUSH
88227: EMPTY
88228: LIST
88229: LIST
88230: LIST
88231: PUSH
88232: LD_VAR 0 1
88236: PUSH
88237: LD_VAR 0 2
88241: PUSH
88242: LD_INT 4
88244: PLUS
88245: PUSH
88246: LD_INT 0
88248: PUSH
88249: EMPTY
88250: LIST
88251: LIST
88252: LIST
88253: PUSH
88254: EMPTY
88255: LIST
88256: LIST
88257: LIST
88258: LIST
88259: LIST
88260: ST_TO_ADDR
// end ; 1 :
88261: GO 88961
88263: LD_INT 1
88265: DOUBLE
88266: EQUAL
88267: IFTRUE 88271
88269: GO 88404
88271: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
88272: LD_ADDR_VAR 0 5
88276: PUSH
88277: LD_VAR 0 1
88281: PUSH
88282: LD_VAR 0 2
88286: PUSH
88287: LD_INT 4
88289: MINUS
88290: PUSH
88291: LD_INT 3
88293: PUSH
88294: EMPTY
88295: LIST
88296: LIST
88297: LIST
88298: PUSH
88299: LD_VAR 0 1
88303: PUSH
88304: LD_INT 3
88306: MINUS
88307: PUSH
88308: LD_VAR 0 2
88312: PUSH
88313: LD_INT 3
88315: MINUS
88316: PUSH
88317: LD_INT 2
88319: PUSH
88320: EMPTY
88321: LIST
88322: LIST
88323: LIST
88324: PUSH
88325: LD_VAR 0 1
88329: PUSH
88330: LD_INT 4
88332: MINUS
88333: PUSH
88334: LD_VAR 0 2
88338: PUSH
88339: LD_INT 1
88341: PUSH
88342: EMPTY
88343: LIST
88344: LIST
88345: LIST
88346: PUSH
88347: LD_VAR 0 1
88351: PUSH
88352: LD_VAR 0 2
88356: PUSH
88357: LD_INT 3
88359: PLUS
88360: PUSH
88361: LD_INT 0
88363: PUSH
88364: EMPTY
88365: LIST
88366: LIST
88367: LIST
88368: PUSH
88369: LD_VAR 0 1
88373: PUSH
88374: LD_INT 4
88376: PLUS
88377: PUSH
88378: LD_VAR 0 2
88382: PUSH
88383: LD_INT 4
88385: PLUS
88386: PUSH
88387: LD_INT 5
88389: PUSH
88390: EMPTY
88391: LIST
88392: LIST
88393: LIST
88394: PUSH
88395: EMPTY
88396: LIST
88397: LIST
88398: LIST
88399: LIST
88400: LIST
88401: ST_TO_ADDR
// end ; 2 :
88402: GO 88961
88404: LD_INT 2
88406: DOUBLE
88407: EQUAL
88408: IFTRUE 88412
88410: GO 88541
88412: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
88413: LD_ADDR_VAR 0 5
88417: PUSH
88418: LD_VAR 0 1
88422: PUSH
88423: LD_VAR 0 2
88427: PUSH
88428: LD_INT 3
88430: MINUS
88431: PUSH
88432: LD_INT 3
88434: PUSH
88435: EMPTY
88436: LIST
88437: LIST
88438: LIST
88439: PUSH
88440: LD_VAR 0 1
88444: PUSH
88445: LD_INT 4
88447: PLUS
88448: PUSH
88449: LD_VAR 0 2
88453: PUSH
88454: LD_INT 4
88456: PUSH
88457: EMPTY
88458: LIST
88459: LIST
88460: LIST
88461: PUSH
88462: LD_VAR 0 1
88466: PUSH
88467: LD_VAR 0 2
88471: PUSH
88472: LD_INT 4
88474: PLUS
88475: PUSH
88476: LD_INT 0
88478: PUSH
88479: EMPTY
88480: LIST
88481: LIST
88482: LIST
88483: PUSH
88484: LD_VAR 0 1
88488: PUSH
88489: LD_INT 3
88491: MINUS
88492: PUSH
88493: LD_VAR 0 2
88497: PUSH
88498: LD_INT 1
88500: PUSH
88501: EMPTY
88502: LIST
88503: LIST
88504: LIST
88505: PUSH
88506: LD_VAR 0 1
88510: PUSH
88511: LD_INT 4
88513: MINUS
88514: PUSH
88515: LD_VAR 0 2
88519: PUSH
88520: LD_INT 4
88522: MINUS
88523: PUSH
88524: LD_INT 2
88526: PUSH
88527: EMPTY
88528: LIST
88529: LIST
88530: LIST
88531: PUSH
88532: EMPTY
88533: LIST
88534: LIST
88535: LIST
88536: LIST
88537: LIST
88538: ST_TO_ADDR
// end ; 3 :
88539: GO 88961
88541: LD_INT 3
88543: DOUBLE
88544: EQUAL
88545: IFTRUE 88549
88547: GO 88682
88549: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
88550: LD_ADDR_VAR 0 5
88554: PUSH
88555: LD_VAR 0 1
88559: PUSH
88560: LD_INT 3
88562: PLUS
88563: PUSH
88564: LD_VAR 0 2
88568: PUSH
88569: LD_INT 4
88571: PUSH
88572: EMPTY
88573: LIST
88574: LIST
88575: LIST
88576: PUSH
88577: LD_VAR 0 1
88581: PUSH
88582: LD_INT 4
88584: PLUS
88585: PUSH
88586: LD_VAR 0 2
88590: PUSH
88591: LD_INT 4
88593: PLUS
88594: PUSH
88595: LD_INT 5
88597: PUSH
88598: EMPTY
88599: LIST
88600: LIST
88601: LIST
88602: PUSH
88603: LD_VAR 0 1
88607: PUSH
88608: LD_INT 4
88610: MINUS
88611: PUSH
88612: LD_VAR 0 2
88616: PUSH
88617: LD_INT 1
88619: PUSH
88620: EMPTY
88621: LIST
88622: LIST
88623: LIST
88624: PUSH
88625: LD_VAR 0 1
88629: PUSH
88630: LD_VAR 0 2
88634: PUSH
88635: LD_INT 4
88637: MINUS
88638: PUSH
88639: LD_INT 3
88641: PUSH
88642: EMPTY
88643: LIST
88644: LIST
88645: LIST
88646: PUSH
88647: LD_VAR 0 1
88651: PUSH
88652: LD_INT 3
88654: MINUS
88655: PUSH
88656: LD_VAR 0 2
88660: PUSH
88661: LD_INT 3
88663: MINUS
88664: PUSH
88665: LD_INT 2
88667: PUSH
88668: EMPTY
88669: LIST
88670: LIST
88671: LIST
88672: PUSH
88673: EMPTY
88674: LIST
88675: LIST
88676: LIST
88677: LIST
88678: LIST
88679: ST_TO_ADDR
// end ; 4 :
88680: GO 88961
88682: LD_INT 4
88684: DOUBLE
88685: EQUAL
88686: IFTRUE 88690
88688: GO 88823
88690: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
88691: LD_ADDR_VAR 0 5
88695: PUSH
88696: LD_VAR 0 1
88700: PUSH
88701: LD_VAR 0 2
88705: PUSH
88706: LD_INT 4
88708: PLUS
88709: PUSH
88710: LD_INT 0
88712: PUSH
88713: EMPTY
88714: LIST
88715: LIST
88716: LIST
88717: PUSH
88718: LD_VAR 0 1
88722: PUSH
88723: LD_INT 3
88725: PLUS
88726: PUSH
88727: LD_VAR 0 2
88731: PUSH
88732: LD_INT 3
88734: PLUS
88735: PUSH
88736: LD_INT 5
88738: PUSH
88739: EMPTY
88740: LIST
88741: LIST
88742: LIST
88743: PUSH
88744: LD_VAR 0 1
88748: PUSH
88749: LD_INT 4
88751: PLUS
88752: PUSH
88753: LD_VAR 0 2
88757: PUSH
88758: LD_INT 4
88760: PUSH
88761: EMPTY
88762: LIST
88763: LIST
88764: LIST
88765: PUSH
88766: LD_VAR 0 1
88770: PUSH
88771: LD_VAR 0 2
88775: PUSH
88776: LD_INT 3
88778: MINUS
88779: PUSH
88780: LD_INT 3
88782: PUSH
88783: EMPTY
88784: LIST
88785: LIST
88786: LIST
88787: PUSH
88788: LD_VAR 0 1
88792: PUSH
88793: LD_INT 4
88795: MINUS
88796: PUSH
88797: LD_VAR 0 2
88801: PUSH
88802: LD_INT 4
88804: MINUS
88805: PUSH
88806: LD_INT 2
88808: PUSH
88809: EMPTY
88810: LIST
88811: LIST
88812: LIST
88813: PUSH
88814: EMPTY
88815: LIST
88816: LIST
88817: LIST
88818: LIST
88819: LIST
88820: ST_TO_ADDR
// end ; 5 :
88821: GO 88961
88823: LD_INT 5
88825: DOUBLE
88826: EQUAL
88827: IFTRUE 88831
88829: GO 88960
88831: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
88832: LD_ADDR_VAR 0 5
88836: PUSH
88837: LD_VAR 0 1
88841: PUSH
88842: LD_INT 4
88844: MINUS
88845: PUSH
88846: LD_VAR 0 2
88850: PUSH
88851: LD_INT 1
88853: PUSH
88854: EMPTY
88855: LIST
88856: LIST
88857: LIST
88858: PUSH
88859: LD_VAR 0 1
88863: PUSH
88864: LD_VAR 0 2
88868: PUSH
88869: LD_INT 4
88871: MINUS
88872: PUSH
88873: LD_INT 3
88875: PUSH
88876: EMPTY
88877: LIST
88878: LIST
88879: LIST
88880: PUSH
88881: LD_VAR 0 1
88885: PUSH
88886: LD_INT 4
88888: PLUS
88889: PUSH
88890: LD_VAR 0 2
88894: PUSH
88895: LD_INT 4
88897: PLUS
88898: PUSH
88899: LD_INT 5
88901: PUSH
88902: EMPTY
88903: LIST
88904: LIST
88905: LIST
88906: PUSH
88907: LD_VAR 0 1
88911: PUSH
88912: LD_INT 3
88914: PLUS
88915: PUSH
88916: LD_VAR 0 2
88920: PUSH
88921: LD_INT 4
88923: PUSH
88924: EMPTY
88925: LIST
88926: LIST
88927: LIST
88928: PUSH
88929: LD_VAR 0 1
88933: PUSH
88934: LD_VAR 0 2
88938: PUSH
88939: LD_INT 3
88941: PLUS
88942: PUSH
88943: LD_INT 0
88945: PUSH
88946: EMPTY
88947: LIST
88948: LIST
88949: LIST
88950: PUSH
88951: EMPTY
88952: LIST
88953: LIST
88954: LIST
88955: LIST
88956: LIST
88957: ST_TO_ADDR
// end ; end ;
88958: GO 88961
88960: POP
// result := list ;
88961: LD_ADDR_VAR 0 4
88965: PUSH
88966: LD_VAR 0 5
88970: ST_TO_ADDR
// end ;
88971: LD_VAR 0 4
88975: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
88976: LD_INT 0
88978: PPUSH
88979: PPUSH
88980: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
88981: LD_VAR 0 1
88985: NOT
88986: PUSH
88987: LD_VAR 0 2
88991: PUSH
88992: LD_INT 1
88994: PUSH
88995: LD_INT 2
88997: PUSH
88998: LD_INT 3
89000: PUSH
89001: LD_INT 4
89003: PUSH
89004: EMPTY
89005: LIST
89006: LIST
89007: LIST
89008: LIST
89009: IN
89010: NOT
89011: OR
89012: IFFALSE 89016
// exit ;
89014: GO 89108
// tmp := [ ] ;
89016: LD_ADDR_VAR 0 5
89020: PUSH
89021: EMPTY
89022: ST_TO_ADDR
// for i in units do
89023: LD_ADDR_VAR 0 4
89027: PUSH
89028: LD_VAR 0 1
89032: PUSH
89033: FOR_IN
89034: IFFALSE 89077
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
89036: LD_ADDR_VAR 0 5
89040: PUSH
89041: LD_VAR 0 5
89045: PPUSH
89046: LD_VAR 0 5
89050: PUSH
89051: LD_INT 1
89053: PLUS
89054: PPUSH
89055: LD_VAR 0 4
89059: PPUSH
89060: LD_VAR 0 2
89064: PPUSH
89065: CALL_OW 259
89069: PPUSH
89070: CALL_OW 2
89074: ST_TO_ADDR
89075: GO 89033
89077: POP
89078: POP
// if not tmp then
89079: LD_VAR 0 5
89083: NOT
89084: IFFALSE 89088
// exit ;
89086: GO 89108
// result := SortListByListDesc ( units , tmp ) ;
89088: LD_ADDR_VAR 0 3
89092: PUSH
89093: LD_VAR 0 1
89097: PPUSH
89098: LD_VAR 0 5
89102: PPUSH
89103: CALL_OW 77
89107: ST_TO_ADDR
// end ;
89108: LD_VAR 0 3
89112: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
89113: LD_INT 0
89115: PPUSH
89116: PPUSH
89117: PPUSH
// x := GetX ( building ) ;
89118: LD_ADDR_VAR 0 4
89122: PUSH
89123: LD_VAR 0 2
89127: PPUSH
89128: CALL_OW 250
89132: ST_TO_ADDR
// y := GetY ( building ) ;
89133: LD_ADDR_VAR 0 5
89137: PUSH
89138: LD_VAR 0 2
89142: PPUSH
89143: CALL_OW 251
89147: ST_TO_ADDR
// if GetTaskList ( unit ) then
89148: LD_VAR 0 1
89152: PPUSH
89153: CALL_OW 437
89157: IFFALSE 89252
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
89159: LD_STRING e
89161: PUSH
89162: LD_VAR 0 1
89166: PPUSH
89167: CALL_OW 437
89171: PUSH
89172: LD_INT 1
89174: ARRAY
89175: PUSH
89176: LD_INT 1
89178: ARRAY
89179: EQUAL
89180: PUSH
89181: LD_VAR 0 4
89185: PUSH
89186: LD_VAR 0 1
89190: PPUSH
89191: CALL_OW 437
89195: PUSH
89196: LD_INT 1
89198: ARRAY
89199: PUSH
89200: LD_INT 2
89202: ARRAY
89203: EQUAL
89204: AND
89205: PUSH
89206: LD_VAR 0 5
89210: PUSH
89211: LD_VAR 0 1
89215: PPUSH
89216: CALL_OW 437
89220: PUSH
89221: LD_INT 1
89223: ARRAY
89224: PUSH
89225: LD_INT 3
89227: ARRAY
89228: EQUAL
89229: AND
89230: IFFALSE 89242
// result := true else
89232: LD_ADDR_VAR 0 3
89236: PUSH
89237: LD_INT 1
89239: ST_TO_ADDR
89240: GO 89250
// result := false ;
89242: LD_ADDR_VAR 0 3
89246: PUSH
89247: LD_INT 0
89249: ST_TO_ADDR
// end else
89250: GO 89260
// result := false ;
89252: LD_ADDR_VAR 0 3
89256: PUSH
89257: LD_INT 0
89259: ST_TO_ADDR
// end ;
89260: LD_VAR 0 3
89264: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
89265: LD_INT 0
89267: PPUSH
89268: PPUSH
89269: PPUSH
89270: PPUSH
// if not unit or not area then
89271: LD_VAR 0 1
89275: NOT
89276: PUSH
89277: LD_VAR 0 2
89281: NOT
89282: OR
89283: IFFALSE 89287
// exit ;
89285: GO 89451
// tmp := AreaToList ( area , i ) ;
89287: LD_ADDR_VAR 0 6
89291: PUSH
89292: LD_VAR 0 2
89296: PPUSH
89297: LD_VAR 0 5
89301: PPUSH
89302: CALL_OW 517
89306: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
89307: LD_ADDR_VAR 0 5
89311: PUSH
89312: DOUBLE
89313: LD_INT 1
89315: DEC
89316: ST_TO_ADDR
89317: LD_VAR 0 6
89321: PUSH
89322: LD_INT 1
89324: ARRAY
89325: PUSH
89326: FOR_TO
89327: IFFALSE 89449
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
89329: LD_ADDR_VAR 0 7
89333: PUSH
89334: LD_VAR 0 6
89338: PUSH
89339: LD_INT 1
89341: ARRAY
89342: PUSH
89343: LD_VAR 0 5
89347: ARRAY
89348: PUSH
89349: LD_VAR 0 6
89353: PUSH
89354: LD_INT 2
89356: ARRAY
89357: PUSH
89358: LD_VAR 0 5
89362: ARRAY
89363: PUSH
89364: EMPTY
89365: LIST
89366: LIST
89367: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
89368: LD_VAR 0 7
89372: PUSH
89373: LD_INT 1
89375: ARRAY
89376: PPUSH
89377: LD_VAR 0 7
89381: PUSH
89382: LD_INT 2
89384: ARRAY
89385: PPUSH
89386: CALL_OW 428
89390: PUSH
89391: LD_INT 0
89393: EQUAL
89394: IFFALSE 89447
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
89396: LD_VAR 0 1
89400: PPUSH
89401: LD_VAR 0 7
89405: PUSH
89406: LD_INT 1
89408: ARRAY
89409: PPUSH
89410: LD_VAR 0 7
89414: PUSH
89415: LD_INT 2
89417: ARRAY
89418: PPUSH
89419: LD_VAR 0 3
89423: PPUSH
89424: CALL_OW 48
// result := IsPlaced ( unit ) ;
89428: LD_ADDR_VAR 0 4
89432: PUSH
89433: LD_VAR 0 1
89437: PPUSH
89438: CALL_OW 305
89442: ST_TO_ADDR
// exit ;
89443: POP
89444: POP
89445: GO 89451
// end ; end ;
89447: GO 89326
89449: POP
89450: POP
// end ;
89451: LD_VAR 0 4
89455: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
89456: LD_INT 0
89458: PPUSH
89459: PPUSH
89460: PPUSH
// if not side or side > 8 then
89461: LD_VAR 0 1
89465: NOT
89466: PUSH
89467: LD_VAR 0 1
89471: PUSH
89472: LD_INT 8
89474: GREATER
89475: OR
89476: IFFALSE 89480
// exit ;
89478: GO 89667
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
89480: LD_ADDR_VAR 0 4
89484: PUSH
89485: LD_INT 22
89487: PUSH
89488: LD_VAR 0 1
89492: PUSH
89493: EMPTY
89494: LIST
89495: LIST
89496: PUSH
89497: LD_INT 21
89499: PUSH
89500: LD_INT 3
89502: PUSH
89503: EMPTY
89504: LIST
89505: LIST
89506: PUSH
89507: EMPTY
89508: LIST
89509: LIST
89510: PPUSH
89511: CALL_OW 69
89515: ST_TO_ADDR
// if not tmp then
89516: LD_VAR 0 4
89520: NOT
89521: IFFALSE 89525
// exit ;
89523: GO 89667
// enable_addtolog := true ;
89525: LD_ADDR_OWVAR 81
89529: PUSH
89530: LD_INT 1
89532: ST_TO_ADDR
// AddToLog ( [ ) ;
89533: LD_STRING [
89535: PPUSH
89536: CALL_OW 561
// for i in tmp do
89540: LD_ADDR_VAR 0 3
89544: PUSH
89545: LD_VAR 0 4
89549: PUSH
89550: FOR_IN
89551: IFFALSE 89658
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
89553: LD_STRING [
89555: PUSH
89556: LD_VAR 0 3
89560: PPUSH
89561: CALL_OW 266
89565: STR
89566: PUSH
89567: LD_STRING , 
89569: STR
89570: PUSH
89571: LD_VAR 0 3
89575: PPUSH
89576: CALL_OW 250
89580: STR
89581: PUSH
89582: LD_STRING , 
89584: STR
89585: PUSH
89586: LD_VAR 0 3
89590: PPUSH
89591: CALL_OW 251
89595: STR
89596: PUSH
89597: LD_STRING , 
89599: STR
89600: PUSH
89601: LD_VAR 0 3
89605: PPUSH
89606: CALL_OW 254
89610: STR
89611: PUSH
89612: LD_STRING , 
89614: STR
89615: PUSH
89616: LD_VAR 0 3
89620: PPUSH
89621: LD_INT 1
89623: PPUSH
89624: CALL_OW 268
89628: STR
89629: PUSH
89630: LD_STRING , 
89632: STR
89633: PUSH
89634: LD_VAR 0 3
89638: PPUSH
89639: LD_INT 2
89641: PPUSH
89642: CALL_OW 268
89646: STR
89647: PUSH
89648: LD_STRING ],
89650: STR
89651: PPUSH
89652: CALL_OW 561
// end ;
89656: GO 89550
89658: POP
89659: POP
// AddToLog ( ]; ) ;
89660: LD_STRING ];
89662: PPUSH
89663: CALL_OW 561
// end ;
89667: LD_VAR 0 2
89671: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
89672: LD_INT 0
89674: PPUSH
89675: PPUSH
89676: PPUSH
89677: PPUSH
89678: PPUSH
// if not area or not rate or not max then
89679: LD_VAR 0 1
89683: NOT
89684: PUSH
89685: LD_VAR 0 2
89689: NOT
89690: OR
89691: PUSH
89692: LD_VAR 0 4
89696: NOT
89697: OR
89698: IFFALSE 89702
// exit ;
89700: GO 89894
// while 1 do
89702: LD_INT 1
89704: IFFALSE 89894
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
89706: LD_ADDR_VAR 0 9
89710: PUSH
89711: LD_VAR 0 1
89715: PPUSH
89716: LD_INT 1
89718: PPUSH
89719: CALL_OW 287
89723: PUSH
89724: LD_INT 10
89726: MUL
89727: ST_TO_ADDR
// r := rate / 10 ;
89728: LD_ADDR_VAR 0 7
89732: PUSH
89733: LD_VAR 0 2
89737: PUSH
89738: LD_INT 10
89740: DIVREAL
89741: ST_TO_ADDR
// time := 1 1$00 ;
89742: LD_ADDR_VAR 0 8
89746: PUSH
89747: LD_INT 2100
89749: ST_TO_ADDR
// if amount < min then
89750: LD_VAR 0 9
89754: PUSH
89755: LD_VAR 0 3
89759: LESS
89760: IFFALSE 89778
// r := r * 2 else
89762: LD_ADDR_VAR 0 7
89766: PUSH
89767: LD_VAR 0 7
89771: PUSH
89772: LD_INT 2
89774: MUL
89775: ST_TO_ADDR
89776: GO 89804
// if amount > max then
89778: LD_VAR 0 9
89782: PUSH
89783: LD_VAR 0 4
89787: GREATER
89788: IFFALSE 89804
// r := r / 2 ;
89790: LD_ADDR_VAR 0 7
89794: PUSH
89795: LD_VAR 0 7
89799: PUSH
89800: LD_INT 2
89802: DIVREAL
89803: ST_TO_ADDR
// time := time / r ;
89804: LD_ADDR_VAR 0 8
89808: PUSH
89809: LD_VAR 0 8
89813: PUSH
89814: LD_VAR 0 7
89818: DIVREAL
89819: ST_TO_ADDR
// if time < 0 then
89820: LD_VAR 0 8
89824: PUSH
89825: LD_INT 0
89827: LESS
89828: IFFALSE 89845
// time := time * - 1 ;
89830: LD_ADDR_VAR 0 8
89834: PUSH
89835: LD_VAR 0 8
89839: PUSH
89840: LD_INT 1
89842: NEG
89843: MUL
89844: ST_TO_ADDR
// wait ( time ) ;
89845: LD_VAR 0 8
89849: PPUSH
89850: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
89854: LD_INT 35
89856: PPUSH
89857: LD_INT 875
89859: PPUSH
89860: CALL_OW 12
89864: PPUSH
89865: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
89869: LD_INT 1
89871: PPUSH
89872: LD_INT 5
89874: PPUSH
89875: CALL_OW 12
89879: PPUSH
89880: LD_VAR 0 1
89884: PPUSH
89885: LD_INT 1
89887: PPUSH
89888: CALL_OW 55
// end ;
89892: GO 89702
// end ;
89894: LD_VAR 0 5
89898: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
89899: LD_INT 0
89901: PPUSH
89902: PPUSH
89903: PPUSH
89904: PPUSH
89905: PPUSH
89906: PPUSH
89907: PPUSH
89908: PPUSH
// if not turrets or not factories then
89909: LD_VAR 0 1
89913: NOT
89914: PUSH
89915: LD_VAR 0 2
89919: NOT
89920: OR
89921: IFFALSE 89925
// exit ;
89923: GO 90232
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
89925: LD_ADDR_VAR 0 10
89929: PUSH
89930: LD_INT 5
89932: PUSH
89933: LD_INT 6
89935: PUSH
89936: EMPTY
89937: LIST
89938: LIST
89939: PUSH
89940: LD_INT 2
89942: PUSH
89943: LD_INT 4
89945: PUSH
89946: EMPTY
89947: LIST
89948: LIST
89949: PUSH
89950: LD_INT 3
89952: PUSH
89953: LD_INT 5
89955: PUSH
89956: EMPTY
89957: LIST
89958: LIST
89959: PUSH
89960: EMPTY
89961: LIST
89962: LIST
89963: LIST
89964: PUSH
89965: LD_INT 24
89967: PUSH
89968: LD_INT 25
89970: PUSH
89971: EMPTY
89972: LIST
89973: LIST
89974: PUSH
89975: LD_INT 23
89977: PUSH
89978: LD_INT 27
89980: PUSH
89981: EMPTY
89982: LIST
89983: LIST
89984: PUSH
89985: EMPTY
89986: LIST
89987: LIST
89988: PUSH
89989: LD_INT 42
89991: PUSH
89992: LD_INT 43
89994: PUSH
89995: EMPTY
89996: LIST
89997: LIST
89998: PUSH
89999: LD_INT 44
90001: PUSH
90002: LD_INT 46
90004: PUSH
90005: EMPTY
90006: LIST
90007: LIST
90008: PUSH
90009: LD_INT 45
90011: PUSH
90012: LD_INT 47
90014: PUSH
90015: EMPTY
90016: LIST
90017: LIST
90018: PUSH
90019: EMPTY
90020: LIST
90021: LIST
90022: LIST
90023: PUSH
90024: EMPTY
90025: LIST
90026: LIST
90027: LIST
90028: ST_TO_ADDR
// result := [ ] ;
90029: LD_ADDR_VAR 0 3
90033: PUSH
90034: EMPTY
90035: ST_TO_ADDR
// for i in turrets do
90036: LD_ADDR_VAR 0 4
90040: PUSH
90041: LD_VAR 0 1
90045: PUSH
90046: FOR_IN
90047: IFFALSE 90230
// begin nat := GetNation ( i ) ;
90049: LD_ADDR_VAR 0 7
90053: PUSH
90054: LD_VAR 0 4
90058: PPUSH
90059: CALL_OW 248
90063: ST_TO_ADDR
// weapon := 0 ;
90064: LD_ADDR_VAR 0 8
90068: PUSH
90069: LD_INT 0
90071: ST_TO_ADDR
// if not nat then
90072: LD_VAR 0 7
90076: NOT
90077: IFFALSE 90081
// continue ;
90079: GO 90046
// for j in list [ nat ] do
90081: LD_ADDR_VAR 0 5
90085: PUSH
90086: LD_VAR 0 10
90090: PUSH
90091: LD_VAR 0 7
90095: ARRAY
90096: PUSH
90097: FOR_IN
90098: IFFALSE 90139
// if GetBWeapon ( i ) = j [ 1 ] then
90100: LD_VAR 0 4
90104: PPUSH
90105: CALL_OW 269
90109: PUSH
90110: LD_VAR 0 5
90114: PUSH
90115: LD_INT 1
90117: ARRAY
90118: EQUAL
90119: IFFALSE 90137
// begin weapon := j [ 2 ] ;
90121: LD_ADDR_VAR 0 8
90125: PUSH
90126: LD_VAR 0 5
90130: PUSH
90131: LD_INT 2
90133: ARRAY
90134: ST_TO_ADDR
// break ;
90135: GO 90139
// end ;
90137: GO 90097
90139: POP
90140: POP
// if not weapon then
90141: LD_VAR 0 8
90145: NOT
90146: IFFALSE 90150
// continue ;
90148: GO 90046
// for k in factories do
90150: LD_ADDR_VAR 0 6
90154: PUSH
90155: LD_VAR 0 2
90159: PUSH
90160: FOR_IN
90161: IFFALSE 90226
// begin weapons := AvailableWeaponList ( k ) ;
90163: LD_ADDR_VAR 0 9
90167: PUSH
90168: LD_VAR 0 6
90172: PPUSH
90173: CALL_OW 478
90177: ST_TO_ADDR
// if not weapons then
90178: LD_VAR 0 9
90182: NOT
90183: IFFALSE 90187
// continue ;
90185: GO 90160
// if weapon in weapons then
90187: LD_VAR 0 8
90191: PUSH
90192: LD_VAR 0 9
90196: IN
90197: IFFALSE 90224
// begin result := [ i , weapon ] ;
90199: LD_ADDR_VAR 0 3
90203: PUSH
90204: LD_VAR 0 4
90208: PUSH
90209: LD_VAR 0 8
90213: PUSH
90214: EMPTY
90215: LIST
90216: LIST
90217: ST_TO_ADDR
// exit ;
90218: POP
90219: POP
90220: POP
90221: POP
90222: GO 90232
// end ; end ;
90224: GO 90160
90226: POP
90227: POP
// end ;
90228: GO 90046
90230: POP
90231: POP
// end ;
90232: LD_VAR 0 3
90236: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
90237: LD_INT 0
90239: PPUSH
// if not side or side > 8 then
90240: LD_VAR 0 3
90244: NOT
90245: PUSH
90246: LD_VAR 0 3
90250: PUSH
90251: LD_INT 8
90253: GREATER
90254: OR
90255: IFFALSE 90259
// exit ;
90257: GO 90318
// if not range then
90259: LD_VAR 0 4
90263: NOT
90264: IFFALSE 90275
// range := - 12 ;
90266: LD_ADDR_VAR 0 4
90270: PUSH
90271: LD_INT 12
90273: NEG
90274: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
90275: LD_VAR 0 1
90279: PPUSH
90280: LD_VAR 0 2
90284: PPUSH
90285: LD_VAR 0 3
90289: PPUSH
90290: LD_VAR 0 4
90294: PPUSH
90295: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
90299: LD_VAR 0 1
90303: PPUSH
90304: LD_VAR 0 2
90308: PPUSH
90309: LD_VAR 0 3
90313: PPUSH
90314: CALL_OW 331
// end ;
90318: LD_VAR 0 5
90322: RET
// export function Video ( mode ) ; begin
90323: LD_INT 0
90325: PPUSH
// ingame_video = mode ;
90326: LD_ADDR_OWVAR 52
90330: PUSH
90331: LD_VAR 0 1
90335: ST_TO_ADDR
// interface_hidden = mode ;
90336: LD_ADDR_OWVAR 54
90340: PUSH
90341: LD_VAR 0 1
90345: ST_TO_ADDR
// end ;
90346: LD_VAR 0 2
90350: RET
// export function Join ( array , element ) ; begin
90351: LD_INT 0
90353: PPUSH
// result := array ^ element ;
90354: LD_ADDR_VAR 0 3
90358: PUSH
90359: LD_VAR 0 1
90363: PUSH
90364: LD_VAR 0 2
90368: ADD
90369: ST_TO_ADDR
// end ;
90370: LD_VAR 0 3
90374: RET
// export function JoinUnion ( array , element ) ; begin
90375: LD_INT 0
90377: PPUSH
// result := array union element ;
90378: LD_ADDR_VAR 0 3
90382: PUSH
90383: LD_VAR 0 1
90387: PUSH
90388: LD_VAR 0 2
90392: UNION
90393: ST_TO_ADDR
// end ;
90394: LD_VAR 0 3
90398: RET
// export function GetBehemoths ( side ) ; begin
90399: LD_INT 0
90401: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
90402: LD_ADDR_VAR 0 2
90406: PUSH
90407: LD_INT 22
90409: PUSH
90410: LD_VAR 0 1
90414: PUSH
90415: EMPTY
90416: LIST
90417: LIST
90418: PUSH
90419: LD_INT 31
90421: PUSH
90422: LD_INT 25
90424: PUSH
90425: EMPTY
90426: LIST
90427: LIST
90428: PUSH
90429: EMPTY
90430: LIST
90431: LIST
90432: PPUSH
90433: CALL_OW 69
90437: ST_TO_ADDR
// end ;
90438: LD_VAR 0 2
90442: RET
// export function Shuffle ( array ) ; var i , index ; begin
90443: LD_INT 0
90445: PPUSH
90446: PPUSH
90447: PPUSH
// result := [ ] ;
90448: LD_ADDR_VAR 0 2
90452: PUSH
90453: EMPTY
90454: ST_TO_ADDR
// if not array then
90455: LD_VAR 0 1
90459: NOT
90460: IFFALSE 90464
// exit ;
90462: GO 90563
// Randomize ;
90464: CALL_OW 10
// for i = array downto 1 do
90468: LD_ADDR_VAR 0 3
90472: PUSH
90473: DOUBLE
90474: LD_VAR 0 1
90478: INC
90479: ST_TO_ADDR
90480: LD_INT 1
90482: PUSH
90483: FOR_DOWNTO
90484: IFFALSE 90561
// begin index := rand ( 1 , array ) ;
90486: LD_ADDR_VAR 0 4
90490: PUSH
90491: LD_INT 1
90493: PPUSH
90494: LD_VAR 0 1
90498: PPUSH
90499: CALL_OW 12
90503: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
90504: LD_ADDR_VAR 0 2
90508: PUSH
90509: LD_VAR 0 2
90513: PPUSH
90514: LD_VAR 0 2
90518: PUSH
90519: LD_INT 1
90521: PLUS
90522: PPUSH
90523: LD_VAR 0 1
90527: PUSH
90528: LD_VAR 0 4
90532: ARRAY
90533: PPUSH
90534: CALL_OW 2
90538: ST_TO_ADDR
// array := Delete ( array , index ) ;
90539: LD_ADDR_VAR 0 1
90543: PUSH
90544: LD_VAR 0 1
90548: PPUSH
90549: LD_VAR 0 4
90553: PPUSH
90554: CALL_OW 3
90558: ST_TO_ADDR
// end ;
90559: GO 90483
90561: POP
90562: POP
// end ;
90563: LD_VAR 0 2
90567: RET
// export function GetBaseMaterials ( base ) ; begin
90568: LD_INT 0
90570: PPUSH
// result := [ 0 , 0 , 0 ] ;
90571: LD_ADDR_VAR 0 2
90575: PUSH
90576: LD_INT 0
90578: PUSH
90579: LD_INT 0
90581: PUSH
90582: LD_INT 0
90584: PUSH
90585: EMPTY
90586: LIST
90587: LIST
90588: LIST
90589: ST_TO_ADDR
// if not base then
90590: LD_VAR 0 1
90594: NOT
90595: IFFALSE 90599
// exit ;
90597: GO 90648
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
90599: LD_ADDR_VAR 0 2
90603: PUSH
90604: LD_VAR 0 1
90608: PPUSH
90609: LD_INT 1
90611: PPUSH
90612: CALL_OW 275
90616: PUSH
90617: LD_VAR 0 1
90621: PPUSH
90622: LD_INT 2
90624: PPUSH
90625: CALL_OW 275
90629: PUSH
90630: LD_VAR 0 1
90634: PPUSH
90635: LD_INT 3
90637: PPUSH
90638: CALL_OW 275
90642: PUSH
90643: EMPTY
90644: LIST
90645: LIST
90646: LIST
90647: ST_TO_ADDR
// end ; end_of_file
90648: LD_VAR 0 2
90652: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
90653: GO 90655
90655: DISABLE
// begin ru_radar := 98 ;
90656: LD_ADDR_EXP 93
90660: PUSH
90661: LD_INT 98
90663: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
90664: LD_ADDR_EXP 94
90668: PUSH
90669: LD_INT 89
90671: ST_TO_ADDR
// us_hack := 99 ;
90672: LD_ADDR_EXP 95
90676: PUSH
90677: LD_INT 99
90679: ST_TO_ADDR
// us_artillery := 97 ;
90680: LD_ADDR_EXP 96
90684: PUSH
90685: LD_INT 97
90687: ST_TO_ADDR
// ar_bio_bomb := 91 ;
90688: LD_ADDR_EXP 97
90692: PUSH
90693: LD_INT 91
90695: ST_TO_ADDR
// end ; end_of_file end_of_file
90696: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
90697: GO 90699
90699: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
90700: LD_STRING initStreamRollete();
90702: PPUSH
90703: CALL_OW 559
// InitStreamMode ;
90707: CALL 90716 0 0
// DefineStreamItems ( ) ;
90711: CALL 91156 0 0
// end ;
90715: END
// function InitStreamMode ; begin
90716: LD_INT 0
90718: PPUSH
// streamModeActive := false ;
90719: LD_ADDR_EXP 98
90723: PUSH
90724: LD_INT 0
90726: ST_TO_ADDR
// normalCounter := 36 ;
90727: LD_ADDR_EXP 99
90731: PUSH
90732: LD_INT 36
90734: ST_TO_ADDR
// hardcoreCounter := 16 ;
90735: LD_ADDR_EXP 100
90739: PUSH
90740: LD_INT 16
90742: ST_TO_ADDR
// sRocket := false ;
90743: LD_ADDR_EXP 103
90747: PUSH
90748: LD_INT 0
90750: ST_TO_ADDR
// sSpeed := false ;
90751: LD_ADDR_EXP 102
90755: PUSH
90756: LD_INT 0
90758: ST_TO_ADDR
// sEngine := false ;
90759: LD_ADDR_EXP 104
90763: PUSH
90764: LD_INT 0
90766: ST_TO_ADDR
// sSpec := false ;
90767: LD_ADDR_EXP 101
90771: PUSH
90772: LD_INT 0
90774: ST_TO_ADDR
// sLevel := false ;
90775: LD_ADDR_EXP 105
90779: PUSH
90780: LD_INT 0
90782: ST_TO_ADDR
// sArmoury := false ;
90783: LD_ADDR_EXP 106
90787: PUSH
90788: LD_INT 0
90790: ST_TO_ADDR
// sRadar := false ;
90791: LD_ADDR_EXP 107
90795: PUSH
90796: LD_INT 0
90798: ST_TO_ADDR
// sBunker := false ;
90799: LD_ADDR_EXP 108
90803: PUSH
90804: LD_INT 0
90806: ST_TO_ADDR
// sHack := false ;
90807: LD_ADDR_EXP 109
90811: PUSH
90812: LD_INT 0
90814: ST_TO_ADDR
// sFire := false ;
90815: LD_ADDR_EXP 110
90819: PUSH
90820: LD_INT 0
90822: ST_TO_ADDR
// sRefresh := false ;
90823: LD_ADDR_EXP 111
90827: PUSH
90828: LD_INT 0
90830: ST_TO_ADDR
// sExp := false ;
90831: LD_ADDR_EXP 112
90835: PUSH
90836: LD_INT 0
90838: ST_TO_ADDR
// sDepot := false ;
90839: LD_ADDR_EXP 113
90843: PUSH
90844: LD_INT 0
90846: ST_TO_ADDR
// sFlag := false ;
90847: LD_ADDR_EXP 114
90851: PUSH
90852: LD_INT 0
90854: ST_TO_ADDR
// sKamikadze := false ;
90855: LD_ADDR_EXP 122
90859: PUSH
90860: LD_INT 0
90862: ST_TO_ADDR
// sTroll := false ;
90863: LD_ADDR_EXP 123
90867: PUSH
90868: LD_INT 0
90870: ST_TO_ADDR
// sSlow := false ;
90871: LD_ADDR_EXP 124
90875: PUSH
90876: LD_INT 0
90878: ST_TO_ADDR
// sLack := false ;
90879: LD_ADDR_EXP 125
90883: PUSH
90884: LD_INT 0
90886: ST_TO_ADDR
// sTank := false ;
90887: LD_ADDR_EXP 127
90891: PUSH
90892: LD_INT 0
90894: ST_TO_ADDR
// sRemote := false ;
90895: LD_ADDR_EXP 128
90899: PUSH
90900: LD_INT 0
90902: ST_TO_ADDR
// sPowell := false ;
90903: LD_ADDR_EXP 129
90907: PUSH
90908: LD_INT 0
90910: ST_TO_ADDR
// sTeleport := false ;
90911: LD_ADDR_EXP 132
90915: PUSH
90916: LD_INT 0
90918: ST_TO_ADDR
// sOilTower := false ;
90919: LD_ADDR_EXP 134
90923: PUSH
90924: LD_INT 0
90926: ST_TO_ADDR
// sShovel := false ;
90927: LD_ADDR_EXP 135
90931: PUSH
90932: LD_INT 0
90934: ST_TO_ADDR
// sSheik := false ;
90935: LD_ADDR_EXP 136
90939: PUSH
90940: LD_INT 0
90942: ST_TO_ADDR
// sEarthquake := false ;
90943: LD_ADDR_EXP 138
90947: PUSH
90948: LD_INT 0
90950: ST_TO_ADDR
// sAI := false ;
90951: LD_ADDR_EXP 139
90955: PUSH
90956: LD_INT 0
90958: ST_TO_ADDR
// sCargo := false ;
90959: LD_ADDR_EXP 142
90963: PUSH
90964: LD_INT 0
90966: ST_TO_ADDR
// sDLaser := false ;
90967: LD_ADDR_EXP 143
90971: PUSH
90972: LD_INT 0
90974: ST_TO_ADDR
// sExchange := false ;
90975: LD_ADDR_EXP 144
90979: PUSH
90980: LD_INT 0
90982: ST_TO_ADDR
// sFac := false ;
90983: LD_ADDR_EXP 145
90987: PUSH
90988: LD_INT 0
90990: ST_TO_ADDR
// sPower := false ;
90991: LD_ADDR_EXP 146
90995: PUSH
90996: LD_INT 0
90998: ST_TO_ADDR
// sRandom := false ;
90999: LD_ADDR_EXP 147
91003: PUSH
91004: LD_INT 0
91006: ST_TO_ADDR
// sShield := false ;
91007: LD_ADDR_EXP 148
91011: PUSH
91012: LD_INT 0
91014: ST_TO_ADDR
// sTime := false ;
91015: LD_ADDR_EXP 149
91019: PUSH
91020: LD_INT 0
91022: ST_TO_ADDR
// sTools := false ;
91023: LD_ADDR_EXP 150
91027: PUSH
91028: LD_INT 0
91030: ST_TO_ADDR
// sSold := false ;
91031: LD_ADDR_EXP 115
91035: PUSH
91036: LD_INT 0
91038: ST_TO_ADDR
// sDiff := false ;
91039: LD_ADDR_EXP 116
91043: PUSH
91044: LD_INT 0
91046: ST_TO_ADDR
// sFog := false ;
91047: LD_ADDR_EXP 119
91051: PUSH
91052: LD_INT 0
91054: ST_TO_ADDR
// sReset := false ;
91055: LD_ADDR_EXP 120
91059: PUSH
91060: LD_INT 0
91062: ST_TO_ADDR
// sSun := false ;
91063: LD_ADDR_EXP 121
91067: PUSH
91068: LD_INT 0
91070: ST_TO_ADDR
// sTiger := false ;
91071: LD_ADDR_EXP 117
91075: PUSH
91076: LD_INT 0
91078: ST_TO_ADDR
// sBomb := false ;
91079: LD_ADDR_EXP 118
91083: PUSH
91084: LD_INT 0
91086: ST_TO_ADDR
// sWound := false ;
91087: LD_ADDR_EXP 126
91091: PUSH
91092: LD_INT 0
91094: ST_TO_ADDR
// sBetray := false ;
91095: LD_ADDR_EXP 130
91099: PUSH
91100: LD_INT 0
91102: ST_TO_ADDR
// sContamin := false ;
91103: LD_ADDR_EXP 131
91107: PUSH
91108: LD_INT 0
91110: ST_TO_ADDR
// sOil := false ;
91111: LD_ADDR_EXP 133
91115: PUSH
91116: LD_INT 0
91118: ST_TO_ADDR
// sStu := false ;
91119: LD_ADDR_EXP 137
91123: PUSH
91124: LD_INT 0
91126: ST_TO_ADDR
// sBazooka := false ;
91127: LD_ADDR_EXP 140
91131: PUSH
91132: LD_INT 0
91134: ST_TO_ADDR
// sMortar := false ;
91135: LD_ADDR_EXP 141
91139: PUSH
91140: LD_INT 0
91142: ST_TO_ADDR
// sRanger := false ;
91143: LD_ADDR_EXP 151
91147: PUSH
91148: LD_INT 0
91150: ST_TO_ADDR
// end ;
91151: LD_VAR 0 1
91155: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
91156: LD_INT 0
91158: PPUSH
91159: PPUSH
91160: PPUSH
91161: PPUSH
91162: PPUSH
// result := [ ] ;
91163: LD_ADDR_VAR 0 1
91167: PUSH
91168: EMPTY
91169: ST_TO_ADDR
// if campaign_id = 1 then
91170: LD_OWVAR 69
91174: PUSH
91175: LD_INT 1
91177: EQUAL
91178: IFFALSE 94116
// begin case mission_number of 1 :
91180: LD_OWVAR 70
91184: PUSH
91185: LD_INT 1
91187: DOUBLE
91188: EQUAL
91189: IFTRUE 91193
91191: GO 91257
91193: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
91194: LD_ADDR_VAR 0 1
91198: PUSH
91199: LD_INT 2
91201: PUSH
91202: LD_INT 4
91204: PUSH
91205: LD_INT 11
91207: PUSH
91208: LD_INT 12
91210: PUSH
91211: LD_INT 15
91213: PUSH
91214: LD_INT 16
91216: PUSH
91217: LD_INT 22
91219: PUSH
91220: LD_INT 23
91222: PUSH
91223: LD_INT 26
91225: PUSH
91226: EMPTY
91227: LIST
91228: LIST
91229: LIST
91230: LIST
91231: LIST
91232: LIST
91233: LIST
91234: LIST
91235: LIST
91236: PUSH
91237: LD_INT 101
91239: PUSH
91240: LD_INT 102
91242: PUSH
91243: LD_INT 106
91245: PUSH
91246: EMPTY
91247: LIST
91248: LIST
91249: LIST
91250: PUSH
91251: EMPTY
91252: LIST
91253: LIST
91254: ST_TO_ADDR
91255: GO 94114
91257: LD_INT 2
91259: DOUBLE
91260: EQUAL
91261: IFTRUE 91265
91263: GO 91337
91265: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
91266: LD_ADDR_VAR 0 1
91270: PUSH
91271: LD_INT 2
91273: PUSH
91274: LD_INT 4
91276: PUSH
91277: LD_INT 11
91279: PUSH
91280: LD_INT 12
91282: PUSH
91283: LD_INT 15
91285: PUSH
91286: LD_INT 16
91288: PUSH
91289: LD_INT 22
91291: PUSH
91292: LD_INT 23
91294: PUSH
91295: LD_INT 26
91297: PUSH
91298: EMPTY
91299: LIST
91300: LIST
91301: LIST
91302: LIST
91303: LIST
91304: LIST
91305: LIST
91306: LIST
91307: LIST
91308: PUSH
91309: LD_INT 101
91311: PUSH
91312: LD_INT 102
91314: PUSH
91315: LD_INT 105
91317: PUSH
91318: LD_INT 106
91320: PUSH
91321: LD_INT 108
91323: PUSH
91324: EMPTY
91325: LIST
91326: LIST
91327: LIST
91328: LIST
91329: LIST
91330: PUSH
91331: EMPTY
91332: LIST
91333: LIST
91334: ST_TO_ADDR
91335: GO 94114
91337: LD_INT 3
91339: DOUBLE
91340: EQUAL
91341: IFTRUE 91345
91343: GO 91421
91345: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
91346: LD_ADDR_VAR 0 1
91350: PUSH
91351: LD_INT 2
91353: PUSH
91354: LD_INT 4
91356: PUSH
91357: LD_INT 5
91359: PUSH
91360: LD_INT 11
91362: PUSH
91363: LD_INT 12
91365: PUSH
91366: LD_INT 15
91368: PUSH
91369: LD_INT 16
91371: PUSH
91372: LD_INT 22
91374: PUSH
91375: LD_INT 26
91377: PUSH
91378: LD_INT 36
91380: PUSH
91381: EMPTY
91382: LIST
91383: LIST
91384: LIST
91385: LIST
91386: LIST
91387: LIST
91388: LIST
91389: LIST
91390: LIST
91391: LIST
91392: PUSH
91393: LD_INT 101
91395: PUSH
91396: LD_INT 102
91398: PUSH
91399: LD_INT 105
91401: PUSH
91402: LD_INT 106
91404: PUSH
91405: LD_INT 108
91407: PUSH
91408: EMPTY
91409: LIST
91410: LIST
91411: LIST
91412: LIST
91413: LIST
91414: PUSH
91415: EMPTY
91416: LIST
91417: LIST
91418: ST_TO_ADDR
91419: GO 94114
91421: LD_INT 4
91423: DOUBLE
91424: EQUAL
91425: IFTRUE 91429
91427: GO 91513
91429: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
91430: LD_ADDR_VAR 0 1
91434: PUSH
91435: LD_INT 2
91437: PUSH
91438: LD_INT 4
91440: PUSH
91441: LD_INT 5
91443: PUSH
91444: LD_INT 8
91446: PUSH
91447: LD_INT 11
91449: PUSH
91450: LD_INT 12
91452: PUSH
91453: LD_INT 15
91455: PUSH
91456: LD_INT 16
91458: PUSH
91459: LD_INT 22
91461: PUSH
91462: LD_INT 23
91464: PUSH
91465: LD_INT 26
91467: PUSH
91468: LD_INT 36
91470: PUSH
91471: EMPTY
91472: LIST
91473: LIST
91474: LIST
91475: LIST
91476: LIST
91477: LIST
91478: LIST
91479: LIST
91480: LIST
91481: LIST
91482: LIST
91483: LIST
91484: PUSH
91485: LD_INT 101
91487: PUSH
91488: LD_INT 102
91490: PUSH
91491: LD_INT 105
91493: PUSH
91494: LD_INT 106
91496: PUSH
91497: LD_INT 108
91499: PUSH
91500: EMPTY
91501: LIST
91502: LIST
91503: LIST
91504: LIST
91505: LIST
91506: PUSH
91507: EMPTY
91508: LIST
91509: LIST
91510: ST_TO_ADDR
91511: GO 94114
91513: LD_INT 5
91515: DOUBLE
91516: EQUAL
91517: IFTRUE 91521
91519: GO 91621
91521: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
91522: LD_ADDR_VAR 0 1
91526: PUSH
91527: LD_INT 2
91529: PUSH
91530: LD_INT 4
91532: PUSH
91533: LD_INT 5
91535: PUSH
91536: LD_INT 6
91538: PUSH
91539: LD_INT 8
91541: PUSH
91542: LD_INT 11
91544: PUSH
91545: LD_INT 12
91547: PUSH
91548: LD_INT 15
91550: PUSH
91551: LD_INT 16
91553: PUSH
91554: LD_INT 22
91556: PUSH
91557: LD_INT 23
91559: PUSH
91560: LD_INT 25
91562: PUSH
91563: LD_INT 26
91565: PUSH
91566: LD_INT 36
91568: PUSH
91569: EMPTY
91570: LIST
91571: LIST
91572: LIST
91573: LIST
91574: LIST
91575: LIST
91576: LIST
91577: LIST
91578: LIST
91579: LIST
91580: LIST
91581: LIST
91582: LIST
91583: LIST
91584: PUSH
91585: LD_INT 101
91587: PUSH
91588: LD_INT 102
91590: PUSH
91591: LD_INT 105
91593: PUSH
91594: LD_INT 106
91596: PUSH
91597: LD_INT 108
91599: PUSH
91600: LD_INT 109
91602: PUSH
91603: LD_INT 112
91605: PUSH
91606: EMPTY
91607: LIST
91608: LIST
91609: LIST
91610: LIST
91611: LIST
91612: LIST
91613: LIST
91614: PUSH
91615: EMPTY
91616: LIST
91617: LIST
91618: ST_TO_ADDR
91619: GO 94114
91621: LD_INT 6
91623: DOUBLE
91624: EQUAL
91625: IFTRUE 91629
91627: GO 91749
91629: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
91630: LD_ADDR_VAR 0 1
91634: PUSH
91635: LD_INT 2
91637: PUSH
91638: LD_INT 4
91640: PUSH
91641: LD_INT 5
91643: PUSH
91644: LD_INT 6
91646: PUSH
91647: LD_INT 8
91649: PUSH
91650: LD_INT 11
91652: PUSH
91653: LD_INT 12
91655: PUSH
91656: LD_INT 15
91658: PUSH
91659: LD_INT 16
91661: PUSH
91662: LD_INT 20
91664: PUSH
91665: LD_INT 21
91667: PUSH
91668: LD_INT 22
91670: PUSH
91671: LD_INT 23
91673: PUSH
91674: LD_INT 25
91676: PUSH
91677: LD_INT 26
91679: PUSH
91680: LD_INT 30
91682: PUSH
91683: LD_INT 31
91685: PUSH
91686: LD_INT 32
91688: PUSH
91689: LD_INT 36
91691: PUSH
91692: EMPTY
91693: LIST
91694: LIST
91695: LIST
91696: LIST
91697: LIST
91698: LIST
91699: LIST
91700: LIST
91701: LIST
91702: LIST
91703: LIST
91704: LIST
91705: LIST
91706: LIST
91707: LIST
91708: LIST
91709: LIST
91710: LIST
91711: LIST
91712: PUSH
91713: LD_INT 101
91715: PUSH
91716: LD_INT 102
91718: PUSH
91719: LD_INT 105
91721: PUSH
91722: LD_INT 106
91724: PUSH
91725: LD_INT 108
91727: PUSH
91728: LD_INT 109
91730: PUSH
91731: LD_INT 112
91733: PUSH
91734: EMPTY
91735: LIST
91736: LIST
91737: LIST
91738: LIST
91739: LIST
91740: LIST
91741: LIST
91742: PUSH
91743: EMPTY
91744: LIST
91745: LIST
91746: ST_TO_ADDR
91747: GO 94114
91749: LD_INT 7
91751: DOUBLE
91752: EQUAL
91753: IFTRUE 91757
91755: GO 91857
91757: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
91758: LD_ADDR_VAR 0 1
91762: PUSH
91763: LD_INT 2
91765: PUSH
91766: LD_INT 4
91768: PUSH
91769: LD_INT 5
91771: PUSH
91772: LD_INT 7
91774: PUSH
91775: LD_INT 11
91777: PUSH
91778: LD_INT 12
91780: PUSH
91781: LD_INT 15
91783: PUSH
91784: LD_INT 16
91786: PUSH
91787: LD_INT 20
91789: PUSH
91790: LD_INT 21
91792: PUSH
91793: LD_INT 22
91795: PUSH
91796: LD_INT 23
91798: PUSH
91799: LD_INT 25
91801: PUSH
91802: LD_INT 26
91804: PUSH
91805: EMPTY
91806: LIST
91807: LIST
91808: LIST
91809: LIST
91810: LIST
91811: LIST
91812: LIST
91813: LIST
91814: LIST
91815: LIST
91816: LIST
91817: LIST
91818: LIST
91819: LIST
91820: PUSH
91821: LD_INT 101
91823: PUSH
91824: LD_INT 102
91826: PUSH
91827: LD_INT 103
91829: PUSH
91830: LD_INT 105
91832: PUSH
91833: LD_INT 106
91835: PUSH
91836: LD_INT 108
91838: PUSH
91839: LD_INT 112
91841: PUSH
91842: EMPTY
91843: LIST
91844: LIST
91845: LIST
91846: LIST
91847: LIST
91848: LIST
91849: LIST
91850: PUSH
91851: EMPTY
91852: LIST
91853: LIST
91854: ST_TO_ADDR
91855: GO 94114
91857: LD_INT 8
91859: DOUBLE
91860: EQUAL
91861: IFTRUE 91865
91863: GO 91993
91865: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
91866: LD_ADDR_VAR 0 1
91870: PUSH
91871: LD_INT 2
91873: PUSH
91874: LD_INT 4
91876: PUSH
91877: LD_INT 5
91879: PUSH
91880: LD_INT 6
91882: PUSH
91883: LD_INT 7
91885: PUSH
91886: LD_INT 8
91888: PUSH
91889: LD_INT 11
91891: PUSH
91892: LD_INT 12
91894: PUSH
91895: LD_INT 15
91897: PUSH
91898: LD_INT 16
91900: PUSH
91901: LD_INT 20
91903: PUSH
91904: LD_INT 21
91906: PUSH
91907: LD_INT 22
91909: PUSH
91910: LD_INT 23
91912: PUSH
91913: LD_INT 25
91915: PUSH
91916: LD_INT 26
91918: PUSH
91919: LD_INT 30
91921: PUSH
91922: LD_INT 31
91924: PUSH
91925: LD_INT 32
91927: PUSH
91928: LD_INT 36
91930: PUSH
91931: EMPTY
91932: LIST
91933: LIST
91934: LIST
91935: LIST
91936: LIST
91937: LIST
91938: LIST
91939: LIST
91940: LIST
91941: LIST
91942: LIST
91943: LIST
91944: LIST
91945: LIST
91946: LIST
91947: LIST
91948: LIST
91949: LIST
91950: LIST
91951: LIST
91952: PUSH
91953: LD_INT 101
91955: PUSH
91956: LD_INT 102
91958: PUSH
91959: LD_INT 103
91961: PUSH
91962: LD_INT 105
91964: PUSH
91965: LD_INT 106
91967: PUSH
91968: LD_INT 108
91970: PUSH
91971: LD_INT 109
91973: PUSH
91974: LD_INT 112
91976: PUSH
91977: EMPTY
91978: LIST
91979: LIST
91980: LIST
91981: LIST
91982: LIST
91983: LIST
91984: LIST
91985: LIST
91986: PUSH
91987: EMPTY
91988: LIST
91989: LIST
91990: ST_TO_ADDR
91991: GO 94114
91993: LD_INT 9
91995: DOUBLE
91996: EQUAL
91997: IFTRUE 92001
91999: GO 92137
92001: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
92002: LD_ADDR_VAR 0 1
92006: PUSH
92007: LD_INT 2
92009: PUSH
92010: LD_INT 4
92012: PUSH
92013: LD_INT 5
92015: PUSH
92016: LD_INT 6
92018: PUSH
92019: LD_INT 7
92021: PUSH
92022: LD_INT 8
92024: PUSH
92025: LD_INT 11
92027: PUSH
92028: LD_INT 12
92030: PUSH
92031: LD_INT 15
92033: PUSH
92034: LD_INT 16
92036: PUSH
92037: LD_INT 20
92039: PUSH
92040: LD_INT 21
92042: PUSH
92043: LD_INT 22
92045: PUSH
92046: LD_INT 23
92048: PUSH
92049: LD_INT 25
92051: PUSH
92052: LD_INT 26
92054: PUSH
92055: LD_INT 28
92057: PUSH
92058: LD_INT 30
92060: PUSH
92061: LD_INT 31
92063: PUSH
92064: LD_INT 32
92066: PUSH
92067: LD_INT 36
92069: PUSH
92070: EMPTY
92071: LIST
92072: LIST
92073: LIST
92074: LIST
92075: LIST
92076: LIST
92077: LIST
92078: LIST
92079: LIST
92080: LIST
92081: LIST
92082: LIST
92083: LIST
92084: LIST
92085: LIST
92086: LIST
92087: LIST
92088: LIST
92089: LIST
92090: LIST
92091: LIST
92092: PUSH
92093: LD_INT 101
92095: PUSH
92096: LD_INT 102
92098: PUSH
92099: LD_INT 103
92101: PUSH
92102: LD_INT 105
92104: PUSH
92105: LD_INT 106
92107: PUSH
92108: LD_INT 108
92110: PUSH
92111: LD_INT 109
92113: PUSH
92114: LD_INT 112
92116: PUSH
92117: LD_INT 114
92119: PUSH
92120: EMPTY
92121: LIST
92122: LIST
92123: LIST
92124: LIST
92125: LIST
92126: LIST
92127: LIST
92128: LIST
92129: LIST
92130: PUSH
92131: EMPTY
92132: LIST
92133: LIST
92134: ST_TO_ADDR
92135: GO 94114
92137: LD_INT 10
92139: DOUBLE
92140: EQUAL
92141: IFTRUE 92145
92143: GO 92329
92145: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
92146: LD_ADDR_VAR 0 1
92150: PUSH
92151: LD_INT 2
92153: PUSH
92154: LD_INT 4
92156: PUSH
92157: LD_INT 5
92159: PUSH
92160: LD_INT 6
92162: PUSH
92163: LD_INT 7
92165: PUSH
92166: LD_INT 8
92168: PUSH
92169: LD_INT 9
92171: PUSH
92172: LD_INT 10
92174: PUSH
92175: LD_INT 11
92177: PUSH
92178: LD_INT 12
92180: PUSH
92181: LD_INT 13
92183: PUSH
92184: LD_INT 14
92186: PUSH
92187: LD_INT 15
92189: PUSH
92190: LD_INT 16
92192: PUSH
92193: LD_INT 17
92195: PUSH
92196: LD_INT 18
92198: PUSH
92199: LD_INT 19
92201: PUSH
92202: LD_INT 20
92204: PUSH
92205: LD_INT 21
92207: PUSH
92208: LD_INT 22
92210: PUSH
92211: LD_INT 23
92213: PUSH
92214: LD_INT 24
92216: PUSH
92217: LD_INT 25
92219: PUSH
92220: LD_INT 26
92222: PUSH
92223: LD_INT 28
92225: PUSH
92226: LD_INT 30
92228: PUSH
92229: LD_INT 31
92231: PUSH
92232: LD_INT 32
92234: PUSH
92235: LD_INT 36
92237: PUSH
92238: EMPTY
92239: LIST
92240: LIST
92241: LIST
92242: LIST
92243: LIST
92244: LIST
92245: LIST
92246: LIST
92247: LIST
92248: LIST
92249: LIST
92250: LIST
92251: LIST
92252: LIST
92253: LIST
92254: LIST
92255: LIST
92256: LIST
92257: LIST
92258: LIST
92259: LIST
92260: LIST
92261: LIST
92262: LIST
92263: LIST
92264: LIST
92265: LIST
92266: LIST
92267: LIST
92268: PUSH
92269: LD_INT 101
92271: PUSH
92272: LD_INT 102
92274: PUSH
92275: LD_INT 103
92277: PUSH
92278: LD_INT 104
92280: PUSH
92281: LD_INT 105
92283: PUSH
92284: LD_INT 106
92286: PUSH
92287: LD_INT 107
92289: PUSH
92290: LD_INT 108
92292: PUSH
92293: LD_INT 109
92295: PUSH
92296: LD_INT 110
92298: PUSH
92299: LD_INT 111
92301: PUSH
92302: LD_INT 112
92304: PUSH
92305: LD_INT 114
92307: PUSH
92308: EMPTY
92309: LIST
92310: LIST
92311: LIST
92312: LIST
92313: LIST
92314: LIST
92315: LIST
92316: LIST
92317: LIST
92318: LIST
92319: LIST
92320: LIST
92321: LIST
92322: PUSH
92323: EMPTY
92324: LIST
92325: LIST
92326: ST_TO_ADDR
92327: GO 94114
92329: LD_INT 11
92331: DOUBLE
92332: EQUAL
92333: IFTRUE 92337
92335: GO 92529
92337: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
92338: LD_ADDR_VAR 0 1
92342: PUSH
92343: LD_INT 2
92345: PUSH
92346: LD_INT 3
92348: PUSH
92349: LD_INT 4
92351: PUSH
92352: LD_INT 5
92354: PUSH
92355: LD_INT 6
92357: PUSH
92358: LD_INT 7
92360: PUSH
92361: LD_INT 8
92363: PUSH
92364: LD_INT 9
92366: PUSH
92367: LD_INT 10
92369: PUSH
92370: LD_INT 11
92372: PUSH
92373: LD_INT 12
92375: PUSH
92376: LD_INT 13
92378: PUSH
92379: LD_INT 14
92381: PUSH
92382: LD_INT 15
92384: PUSH
92385: LD_INT 16
92387: PUSH
92388: LD_INT 17
92390: PUSH
92391: LD_INT 18
92393: PUSH
92394: LD_INT 19
92396: PUSH
92397: LD_INT 20
92399: PUSH
92400: LD_INT 21
92402: PUSH
92403: LD_INT 22
92405: PUSH
92406: LD_INT 23
92408: PUSH
92409: LD_INT 24
92411: PUSH
92412: LD_INT 25
92414: PUSH
92415: LD_INT 26
92417: PUSH
92418: LD_INT 28
92420: PUSH
92421: LD_INT 30
92423: PUSH
92424: LD_INT 31
92426: PUSH
92427: LD_INT 32
92429: PUSH
92430: LD_INT 34
92432: PUSH
92433: LD_INT 36
92435: PUSH
92436: EMPTY
92437: LIST
92438: LIST
92439: LIST
92440: LIST
92441: LIST
92442: LIST
92443: LIST
92444: LIST
92445: LIST
92446: LIST
92447: LIST
92448: LIST
92449: LIST
92450: LIST
92451: LIST
92452: LIST
92453: LIST
92454: LIST
92455: LIST
92456: LIST
92457: LIST
92458: LIST
92459: LIST
92460: LIST
92461: LIST
92462: LIST
92463: LIST
92464: LIST
92465: LIST
92466: LIST
92467: LIST
92468: PUSH
92469: LD_INT 101
92471: PUSH
92472: LD_INT 102
92474: PUSH
92475: LD_INT 103
92477: PUSH
92478: LD_INT 104
92480: PUSH
92481: LD_INT 105
92483: PUSH
92484: LD_INT 106
92486: PUSH
92487: LD_INT 107
92489: PUSH
92490: LD_INT 108
92492: PUSH
92493: LD_INT 109
92495: PUSH
92496: LD_INT 110
92498: PUSH
92499: LD_INT 111
92501: PUSH
92502: LD_INT 112
92504: PUSH
92505: LD_INT 114
92507: PUSH
92508: EMPTY
92509: LIST
92510: LIST
92511: LIST
92512: LIST
92513: LIST
92514: LIST
92515: LIST
92516: LIST
92517: LIST
92518: LIST
92519: LIST
92520: LIST
92521: LIST
92522: PUSH
92523: EMPTY
92524: LIST
92525: LIST
92526: ST_TO_ADDR
92527: GO 94114
92529: LD_INT 12
92531: DOUBLE
92532: EQUAL
92533: IFTRUE 92537
92535: GO 92745
92537: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
92538: LD_ADDR_VAR 0 1
92542: PUSH
92543: LD_INT 1
92545: PUSH
92546: LD_INT 2
92548: PUSH
92549: LD_INT 3
92551: PUSH
92552: LD_INT 4
92554: PUSH
92555: LD_INT 5
92557: PUSH
92558: LD_INT 6
92560: PUSH
92561: LD_INT 7
92563: PUSH
92564: LD_INT 8
92566: PUSH
92567: LD_INT 9
92569: PUSH
92570: LD_INT 10
92572: PUSH
92573: LD_INT 11
92575: PUSH
92576: LD_INT 12
92578: PUSH
92579: LD_INT 13
92581: PUSH
92582: LD_INT 14
92584: PUSH
92585: LD_INT 15
92587: PUSH
92588: LD_INT 16
92590: PUSH
92591: LD_INT 17
92593: PUSH
92594: LD_INT 18
92596: PUSH
92597: LD_INT 19
92599: PUSH
92600: LD_INT 20
92602: PUSH
92603: LD_INT 21
92605: PUSH
92606: LD_INT 22
92608: PUSH
92609: LD_INT 23
92611: PUSH
92612: LD_INT 24
92614: PUSH
92615: LD_INT 25
92617: PUSH
92618: LD_INT 26
92620: PUSH
92621: LD_INT 27
92623: PUSH
92624: LD_INT 28
92626: PUSH
92627: LD_INT 30
92629: PUSH
92630: LD_INT 31
92632: PUSH
92633: LD_INT 32
92635: PUSH
92636: LD_INT 33
92638: PUSH
92639: LD_INT 34
92641: PUSH
92642: LD_INT 36
92644: PUSH
92645: EMPTY
92646: LIST
92647: LIST
92648: LIST
92649: LIST
92650: LIST
92651: LIST
92652: LIST
92653: LIST
92654: LIST
92655: LIST
92656: LIST
92657: LIST
92658: LIST
92659: LIST
92660: LIST
92661: LIST
92662: LIST
92663: LIST
92664: LIST
92665: LIST
92666: LIST
92667: LIST
92668: LIST
92669: LIST
92670: LIST
92671: LIST
92672: LIST
92673: LIST
92674: LIST
92675: LIST
92676: LIST
92677: LIST
92678: LIST
92679: LIST
92680: PUSH
92681: LD_INT 101
92683: PUSH
92684: LD_INT 102
92686: PUSH
92687: LD_INT 103
92689: PUSH
92690: LD_INT 104
92692: PUSH
92693: LD_INT 105
92695: PUSH
92696: LD_INT 106
92698: PUSH
92699: LD_INT 107
92701: PUSH
92702: LD_INT 108
92704: PUSH
92705: LD_INT 109
92707: PUSH
92708: LD_INT 110
92710: PUSH
92711: LD_INT 111
92713: PUSH
92714: LD_INT 112
92716: PUSH
92717: LD_INT 113
92719: PUSH
92720: LD_INT 114
92722: PUSH
92723: EMPTY
92724: LIST
92725: LIST
92726: LIST
92727: LIST
92728: LIST
92729: LIST
92730: LIST
92731: LIST
92732: LIST
92733: LIST
92734: LIST
92735: LIST
92736: LIST
92737: LIST
92738: PUSH
92739: EMPTY
92740: LIST
92741: LIST
92742: ST_TO_ADDR
92743: GO 94114
92745: LD_INT 13
92747: DOUBLE
92748: EQUAL
92749: IFTRUE 92753
92751: GO 92949
92753: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
92754: LD_ADDR_VAR 0 1
92758: PUSH
92759: LD_INT 1
92761: PUSH
92762: LD_INT 2
92764: PUSH
92765: LD_INT 3
92767: PUSH
92768: LD_INT 4
92770: PUSH
92771: LD_INT 5
92773: PUSH
92774: LD_INT 8
92776: PUSH
92777: LD_INT 9
92779: PUSH
92780: LD_INT 10
92782: PUSH
92783: LD_INT 11
92785: PUSH
92786: LD_INT 12
92788: PUSH
92789: LD_INT 14
92791: PUSH
92792: LD_INT 15
92794: PUSH
92795: LD_INT 16
92797: PUSH
92798: LD_INT 17
92800: PUSH
92801: LD_INT 18
92803: PUSH
92804: LD_INT 19
92806: PUSH
92807: LD_INT 20
92809: PUSH
92810: LD_INT 21
92812: PUSH
92813: LD_INT 22
92815: PUSH
92816: LD_INT 23
92818: PUSH
92819: LD_INT 24
92821: PUSH
92822: LD_INT 25
92824: PUSH
92825: LD_INT 26
92827: PUSH
92828: LD_INT 27
92830: PUSH
92831: LD_INT 28
92833: PUSH
92834: LD_INT 30
92836: PUSH
92837: LD_INT 31
92839: PUSH
92840: LD_INT 32
92842: PUSH
92843: LD_INT 33
92845: PUSH
92846: LD_INT 34
92848: PUSH
92849: LD_INT 36
92851: PUSH
92852: EMPTY
92853: LIST
92854: LIST
92855: LIST
92856: LIST
92857: LIST
92858: LIST
92859: LIST
92860: LIST
92861: LIST
92862: LIST
92863: LIST
92864: LIST
92865: LIST
92866: LIST
92867: LIST
92868: LIST
92869: LIST
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: LIST
92875: LIST
92876: LIST
92877: LIST
92878: LIST
92879: LIST
92880: LIST
92881: LIST
92882: LIST
92883: LIST
92884: PUSH
92885: LD_INT 101
92887: PUSH
92888: LD_INT 102
92890: PUSH
92891: LD_INT 103
92893: PUSH
92894: LD_INT 104
92896: PUSH
92897: LD_INT 105
92899: PUSH
92900: LD_INT 106
92902: PUSH
92903: LD_INT 107
92905: PUSH
92906: LD_INT 108
92908: PUSH
92909: LD_INT 109
92911: PUSH
92912: LD_INT 110
92914: PUSH
92915: LD_INT 111
92917: PUSH
92918: LD_INT 112
92920: PUSH
92921: LD_INT 113
92923: PUSH
92924: LD_INT 114
92926: PUSH
92927: EMPTY
92928: LIST
92929: LIST
92930: LIST
92931: LIST
92932: LIST
92933: LIST
92934: LIST
92935: LIST
92936: LIST
92937: LIST
92938: LIST
92939: LIST
92940: LIST
92941: LIST
92942: PUSH
92943: EMPTY
92944: LIST
92945: LIST
92946: ST_TO_ADDR
92947: GO 94114
92949: LD_INT 14
92951: DOUBLE
92952: EQUAL
92953: IFTRUE 92957
92955: GO 93169
92957: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
92958: LD_ADDR_VAR 0 1
92962: PUSH
92963: LD_INT 1
92965: PUSH
92966: LD_INT 2
92968: PUSH
92969: LD_INT 3
92971: PUSH
92972: LD_INT 4
92974: PUSH
92975: LD_INT 5
92977: PUSH
92978: LD_INT 6
92980: PUSH
92981: LD_INT 7
92983: PUSH
92984: LD_INT 8
92986: PUSH
92987: LD_INT 9
92989: PUSH
92990: LD_INT 10
92992: PUSH
92993: LD_INT 11
92995: PUSH
92996: LD_INT 12
92998: PUSH
92999: LD_INT 13
93001: PUSH
93002: LD_INT 14
93004: PUSH
93005: LD_INT 15
93007: PUSH
93008: LD_INT 16
93010: PUSH
93011: LD_INT 17
93013: PUSH
93014: LD_INT 18
93016: PUSH
93017: LD_INT 19
93019: PUSH
93020: LD_INT 20
93022: PUSH
93023: LD_INT 21
93025: PUSH
93026: LD_INT 22
93028: PUSH
93029: LD_INT 23
93031: PUSH
93032: LD_INT 24
93034: PUSH
93035: LD_INT 25
93037: PUSH
93038: LD_INT 26
93040: PUSH
93041: LD_INT 27
93043: PUSH
93044: LD_INT 28
93046: PUSH
93047: LD_INT 29
93049: PUSH
93050: LD_INT 30
93052: PUSH
93053: LD_INT 31
93055: PUSH
93056: LD_INT 32
93058: PUSH
93059: LD_INT 33
93061: PUSH
93062: LD_INT 34
93064: PUSH
93065: LD_INT 36
93067: PUSH
93068: EMPTY
93069: LIST
93070: LIST
93071: LIST
93072: LIST
93073: LIST
93074: LIST
93075: LIST
93076: LIST
93077: LIST
93078: LIST
93079: LIST
93080: LIST
93081: LIST
93082: LIST
93083: LIST
93084: LIST
93085: LIST
93086: LIST
93087: LIST
93088: LIST
93089: LIST
93090: LIST
93091: LIST
93092: LIST
93093: LIST
93094: LIST
93095: LIST
93096: LIST
93097: LIST
93098: LIST
93099: LIST
93100: LIST
93101: LIST
93102: LIST
93103: LIST
93104: PUSH
93105: LD_INT 101
93107: PUSH
93108: LD_INT 102
93110: PUSH
93111: LD_INT 103
93113: PUSH
93114: LD_INT 104
93116: PUSH
93117: LD_INT 105
93119: PUSH
93120: LD_INT 106
93122: PUSH
93123: LD_INT 107
93125: PUSH
93126: LD_INT 108
93128: PUSH
93129: LD_INT 109
93131: PUSH
93132: LD_INT 110
93134: PUSH
93135: LD_INT 111
93137: PUSH
93138: LD_INT 112
93140: PUSH
93141: LD_INT 113
93143: PUSH
93144: LD_INT 114
93146: PUSH
93147: EMPTY
93148: LIST
93149: LIST
93150: LIST
93151: LIST
93152: LIST
93153: LIST
93154: LIST
93155: LIST
93156: LIST
93157: LIST
93158: LIST
93159: LIST
93160: LIST
93161: LIST
93162: PUSH
93163: EMPTY
93164: LIST
93165: LIST
93166: ST_TO_ADDR
93167: GO 94114
93169: LD_INT 15
93171: DOUBLE
93172: EQUAL
93173: IFTRUE 93177
93175: GO 93389
93177: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
93178: LD_ADDR_VAR 0 1
93182: PUSH
93183: LD_INT 1
93185: PUSH
93186: LD_INT 2
93188: PUSH
93189: LD_INT 3
93191: PUSH
93192: LD_INT 4
93194: PUSH
93195: LD_INT 5
93197: PUSH
93198: LD_INT 6
93200: PUSH
93201: LD_INT 7
93203: PUSH
93204: LD_INT 8
93206: PUSH
93207: LD_INT 9
93209: PUSH
93210: LD_INT 10
93212: PUSH
93213: LD_INT 11
93215: PUSH
93216: LD_INT 12
93218: PUSH
93219: LD_INT 13
93221: PUSH
93222: LD_INT 14
93224: PUSH
93225: LD_INT 15
93227: PUSH
93228: LD_INT 16
93230: PUSH
93231: LD_INT 17
93233: PUSH
93234: LD_INT 18
93236: PUSH
93237: LD_INT 19
93239: PUSH
93240: LD_INT 20
93242: PUSH
93243: LD_INT 21
93245: PUSH
93246: LD_INT 22
93248: PUSH
93249: LD_INT 23
93251: PUSH
93252: LD_INT 24
93254: PUSH
93255: LD_INT 25
93257: PUSH
93258: LD_INT 26
93260: PUSH
93261: LD_INT 27
93263: PUSH
93264: LD_INT 28
93266: PUSH
93267: LD_INT 29
93269: PUSH
93270: LD_INT 30
93272: PUSH
93273: LD_INT 31
93275: PUSH
93276: LD_INT 32
93278: PUSH
93279: LD_INT 33
93281: PUSH
93282: LD_INT 34
93284: PUSH
93285: LD_INT 36
93287: PUSH
93288: EMPTY
93289: LIST
93290: LIST
93291: LIST
93292: LIST
93293: LIST
93294: LIST
93295: LIST
93296: LIST
93297: LIST
93298: LIST
93299: LIST
93300: LIST
93301: LIST
93302: LIST
93303: LIST
93304: LIST
93305: LIST
93306: LIST
93307: LIST
93308: LIST
93309: LIST
93310: LIST
93311: LIST
93312: LIST
93313: LIST
93314: LIST
93315: LIST
93316: LIST
93317: LIST
93318: LIST
93319: LIST
93320: LIST
93321: LIST
93322: LIST
93323: LIST
93324: PUSH
93325: LD_INT 101
93327: PUSH
93328: LD_INT 102
93330: PUSH
93331: LD_INT 103
93333: PUSH
93334: LD_INT 104
93336: PUSH
93337: LD_INT 105
93339: PUSH
93340: LD_INT 106
93342: PUSH
93343: LD_INT 107
93345: PUSH
93346: LD_INT 108
93348: PUSH
93349: LD_INT 109
93351: PUSH
93352: LD_INT 110
93354: PUSH
93355: LD_INT 111
93357: PUSH
93358: LD_INT 112
93360: PUSH
93361: LD_INT 113
93363: PUSH
93364: LD_INT 114
93366: PUSH
93367: EMPTY
93368: LIST
93369: LIST
93370: LIST
93371: LIST
93372: LIST
93373: LIST
93374: LIST
93375: LIST
93376: LIST
93377: LIST
93378: LIST
93379: LIST
93380: LIST
93381: LIST
93382: PUSH
93383: EMPTY
93384: LIST
93385: LIST
93386: ST_TO_ADDR
93387: GO 94114
93389: LD_INT 16
93391: DOUBLE
93392: EQUAL
93393: IFTRUE 93397
93395: GO 93521
93397: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
93398: LD_ADDR_VAR 0 1
93402: PUSH
93403: LD_INT 2
93405: PUSH
93406: LD_INT 4
93408: PUSH
93409: LD_INT 5
93411: PUSH
93412: LD_INT 7
93414: PUSH
93415: LD_INT 11
93417: PUSH
93418: LD_INT 12
93420: PUSH
93421: LD_INT 15
93423: PUSH
93424: LD_INT 16
93426: PUSH
93427: LD_INT 20
93429: PUSH
93430: LD_INT 21
93432: PUSH
93433: LD_INT 22
93435: PUSH
93436: LD_INT 23
93438: PUSH
93439: LD_INT 25
93441: PUSH
93442: LD_INT 26
93444: PUSH
93445: LD_INT 30
93447: PUSH
93448: LD_INT 31
93450: PUSH
93451: LD_INT 32
93453: PUSH
93454: LD_INT 33
93456: PUSH
93457: LD_INT 34
93459: PUSH
93460: EMPTY
93461: LIST
93462: LIST
93463: LIST
93464: LIST
93465: LIST
93466: LIST
93467: LIST
93468: LIST
93469: LIST
93470: LIST
93471: LIST
93472: LIST
93473: LIST
93474: LIST
93475: LIST
93476: LIST
93477: LIST
93478: LIST
93479: LIST
93480: PUSH
93481: LD_INT 101
93483: PUSH
93484: LD_INT 102
93486: PUSH
93487: LD_INT 103
93489: PUSH
93490: LD_INT 106
93492: PUSH
93493: LD_INT 108
93495: PUSH
93496: LD_INT 112
93498: PUSH
93499: LD_INT 113
93501: PUSH
93502: LD_INT 114
93504: PUSH
93505: EMPTY
93506: LIST
93507: LIST
93508: LIST
93509: LIST
93510: LIST
93511: LIST
93512: LIST
93513: LIST
93514: PUSH
93515: EMPTY
93516: LIST
93517: LIST
93518: ST_TO_ADDR
93519: GO 94114
93521: LD_INT 17
93523: DOUBLE
93524: EQUAL
93525: IFTRUE 93529
93527: GO 93741
93529: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
93530: LD_ADDR_VAR 0 1
93534: PUSH
93535: LD_INT 1
93537: PUSH
93538: LD_INT 2
93540: PUSH
93541: LD_INT 3
93543: PUSH
93544: LD_INT 4
93546: PUSH
93547: LD_INT 5
93549: PUSH
93550: LD_INT 6
93552: PUSH
93553: LD_INT 7
93555: PUSH
93556: LD_INT 8
93558: PUSH
93559: LD_INT 9
93561: PUSH
93562: LD_INT 10
93564: PUSH
93565: LD_INT 11
93567: PUSH
93568: LD_INT 12
93570: PUSH
93571: LD_INT 13
93573: PUSH
93574: LD_INT 14
93576: PUSH
93577: LD_INT 15
93579: PUSH
93580: LD_INT 16
93582: PUSH
93583: LD_INT 17
93585: PUSH
93586: LD_INT 18
93588: PUSH
93589: LD_INT 19
93591: PUSH
93592: LD_INT 20
93594: PUSH
93595: LD_INT 21
93597: PUSH
93598: LD_INT 22
93600: PUSH
93601: LD_INT 23
93603: PUSH
93604: LD_INT 24
93606: PUSH
93607: LD_INT 25
93609: PUSH
93610: LD_INT 26
93612: PUSH
93613: LD_INT 27
93615: PUSH
93616: LD_INT 28
93618: PUSH
93619: LD_INT 29
93621: PUSH
93622: LD_INT 30
93624: PUSH
93625: LD_INT 31
93627: PUSH
93628: LD_INT 32
93630: PUSH
93631: LD_INT 33
93633: PUSH
93634: LD_INT 34
93636: PUSH
93637: LD_INT 36
93639: PUSH
93640: EMPTY
93641: LIST
93642: LIST
93643: LIST
93644: LIST
93645: LIST
93646: LIST
93647: LIST
93648: LIST
93649: LIST
93650: LIST
93651: LIST
93652: LIST
93653: LIST
93654: LIST
93655: LIST
93656: LIST
93657: LIST
93658: LIST
93659: LIST
93660: LIST
93661: LIST
93662: LIST
93663: LIST
93664: LIST
93665: LIST
93666: LIST
93667: LIST
93668: LIST
93669: LIST
93670: LIST
93671: LIST
93672: LIST
93673: LIST
93674: LIST
93675: LIST
93676: PUSH
93677: LD_INT 101
93679: PUSH
93680: LD_INT 102
93682: PUSH
93683: LD_INT 103
93685: PUSH
93686: LD_INT 104
93688: PUSH
93689: LD_INT 105
93691: PUSH
93692: LD_INT 106
93694: PUSH
93695: LD_INT 107
93697: PUSH
93698: LD_INT 108
93700: PUSH
93701: LD_INT 109
93703: PUSH
93704: LD_INT 110
93706: PUSH
93707: LD_INT 111
93709: PUSH
93710: LD_INT 112
93712: PUSH
93713: LD_INT 113
93715: PUSH
93716: LD_INT 114
93718: PUSH
93719: EMPTY
93720: LIST
93721: LIST
93722: LIST
93723: LIST
93724: LIST
93725: LIST
93726: LIST
93727: LIST
93728: LIST
93729: LIST
93730: LIST
93731: LIST
93732: LIST
93733: LIST
93734: PUSH
93735: EMPTY
93736: LIST
93737: LIST
93738: ST_TO_ADDR
93739: GO 94114
93741: LD_INT 18
93743: DOUBLE
93744: EQUAL
93745: IFTRUE 93749
93747: GO 93885
93749: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
93750: LD_ADDR_VAR 0 1
93754: PUSH
93755: LD_INT 2
93757: PUSH
93758: LD_INT 4
93760: PUSH
93761: LD_INT 5
93763: PUSH
93764: LD_INT 7
93766: PUSH
93767: LD_INT 11
93769: PUSH
93770: LD_INT 12
93772: PUSH
93773: LD_INT 15
93775: PUSH
93776: LD_INT 16
93778: PUSH
93779: LD_INT 20
93781: PUSH
93782: LD_INT 21
93784: PUSH
93785: LD_INT 22
93787: PUSH
93788: LD_INT 23
93790: PUSH
93791: LD_INT 25
93793: PUSH
93794: LD_INT 26
93796: PUSH
93797: LD_INT 30
93799: PUSH
93800: LD_INT 31
93802: PUSH
93803: LD_INT 32
93805: PUSH
93806: LD_INT 33
93808: PUSH
93809: LD_INT 34
93811: PUSH
93812: LD_INT 35
93814: PUSH
93815: LD_INT 36
93817: PUSH
93818: EMPTY
93819: LIST
93820: LIST
93821: LIST
93822: LIST
93823: LIST
93824: LIST
93825: LIST
93826: LIST
93827: LIST
93828: LIST
93829: LIST
93830: LIST
93831: LIST
93832: LIST
93833: LIST
93834: LIST
93835: LIST
93836: LIST
93837: LIST
93838: LIST
93839: LIST
93840: PUSH
93841: LD_INT 101
93843: PUSH
93844: LD_INT 102
93846: PUSH
93847: LD_INT 103
93849: PUSH
93850: LD_INT 106
93852: PUSH
93853: LD_INT 108
93855: PUSH
93856: LD_INT 112
93858: PUSH
93859: LD_INT 113
93861: PUSH
93862: LD_INT 114
93864: PUSH
93865: LD_INT 115
93867: PUSH
93868: EMPTY
93869: LIST
93870: LIST
93871: LIST
93872: LIST
93873: LIST
93874: LIST
93875: LIST
93876: LIST
93877: LIST
93878: PUSH
93879: EMPTY
93880: LIST
93881: LIST
93882: ST_TO_ADDR
93883: GO 94114
93885: LD_INT 19
93887: DOUBLE
93888: EQUAL
93889: IFTRUE 93893
93891: GO 94113
93893: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
93894: LD_ADDR_VAR 0 1
93898: PUSH
93899: LD_INT 1
93901: PUSH
93902: LD_INT 2
93904: PUSH
93905: LD_INT 3
93907: PUSH
93908: LD_INT 4
93910: PUSH
93911: LD_INT 5
93913: PUSH
93914: LD_INT 6
93916: PUSH
93917: LD_INT 7
93919: PUSH
93920: LD_INT 8
93922: PUSH
93923: LD_INT 9
93925: PUSH
93926: LD_INT 10
93928: PUSH
93929: LD_INT 11
93931: PUSH
93932: LD_INT 12
93934: PUSH
93935: LD_INT 13
93937: PUSH
93938: LD_INT 14
93940: PUSH
93941: LD_INT 15
93943: PUSH
93944: LD_INT 16
93946: PUSH
93947: LD_INT 17
93949: PUSH
93950: LD_INT 18
93952: PUSH
93953: LD_INT 19
93955: PUSH
93956: LD_INT 20
93958: PUSH
93959: LD_INT 21
93961: PUSH
93962: LD_INT 22
93964: PUSH
93965: LD_INT 23
93967: PUSH
93968: LD_INT 24
93970: PUSH
93971: LD_INT 25
93973: PUSH
93974: LD_INT 26
93976: PUSH
93977: LD_INT 27
93979: PUSH
93980: LD_INT 28
93982: PUSH
93983: LD_INT 29
93985: PUSH
93986: LD_INT 30
93988: PUSH
93989: LD_INT 31
93991: PUSH
93992: LD_INT 32
93994: PUSH
93995: LD_INT 33
93997: PUSH
93998: LD_INT 34
94000: PUSH
94001: LD_INT 35
94003: PUSH
94004: LD_INT 36
94006: PUSH
94007: EMPTY
94008: LIST
94009: LIST
94010: LIST
94011: LIST
94012: LIST
94013: LIST
94014: LIST
94015: LIST
94016: LIST
94017: LIST
94018: LIST
94019: LIST
94020: LIST
94021: LIST
94022: LIST
94023: LIST
94024: LIST
94025: LIST
94026: LIST
94027: LIST
94028: LIST
94029: LIST
94030: LIST
94031: LIST
94032: LIST
94033: LIST
94034: LIST
94035: LIST
94036: LIST
94037: LIST
94038: LIST
94039: LIST
94040: LIST
94041: LIST
94042: LIST
94043: LIST
94044: PUSH
94045: LD_INT 101
94047: PUSH
94048: LD_INT 102
94050: PUSH
94051: LD_INT 103
94053: PUSH
94054: LD_INT 104
94056: PUSH
94057: LD_INT 105
94059: PUSH
94060: LD_INT 106
94062: PUSH
94063: LD_INT 107
94065: PUSH
94066: LD_INT 108
94068: PUSH
94069: LD_INT 109
94071: PUSH
94072: LD_INT 110
94074: PUSH
94075: LD_INT 111
94077: PUSH
94078: LD_INT 112
94080: PUSH
94081: LD_INT 113
94083: PUSH
94084: LD_INT 114
94086: PUSH
94087: LD_INT 115
94089: PUSH
94090: EMPTY
94091: LIST
94092: LIST
94093: LIST
94094: LIST
94095: LIST
94096: LIST
94097: LIST
94098: LIST
94099: LIST
94100: LIST
94101: LIST
94102: LIST
94103: LIST
94104: LIST
94105: LIST
94106: PUSH
94107: EMPTY
94108: LIST
94109: LIST
94110: ST_TO_ADDR
94111: GO 94114
94113: POP
// end else
94114: GO 94151
// if campaign_id = 5 then
94116: LD_OWVAR 69
94120: PUSH
94121: LD_INT 5
94123: EQUAL
94124: IFFALSE 94151
// begin result := [ [ 1 , 2 ] , [ 100 ] ] ;
94126: LD_ADDR_VAR 0 1
94130: PUSH
94131: LD_INT 1
94133: PUSH
94134: LD_INT 2
94136: PUSH
94137: EMPTY
94138: LIST
94139: LIST
94140: PUSH
94141: LD_INT 100
94143: PUSH
94144: EMPTY
94145: LIST
94146: PUSH
94147: EMPTY
94148: LIST
94149: LIST
94150: ST_TO_ADDR
// end ; if result then
94151: LD_VAR 0 1
94155: IFFALSE 94444
// begin normal :=  ;
94157: LD_ADDR_VAR 0 3
94161: PUSH
94162: LD_STRING 
94164: ST_TO_ADDR
// hardcore :=  ;
94165: LD_ADDR_VAR 0 4
94169: PUSH
94170: LD_STRING 
94172: ST_TO_ADDR
// for i = 1 to normalCounter do
94173: LD_ADDR_VAR 0 5
94177: PUSH
94178: DOUBLE
94179: LD_INT 1
94181: DEC
94182: ST_TO_ADDR
94183: LD_EXP 99
94187: PUSH
94188: FOR_TO
94189: IFFALSE 94290
// begin tmp := 0 ;
94191: LD_ADDR_VAR 0 2
94195: PUSH
94196: LD_STRING 0
94198: ST_TO_ADDR
// if result [ 1 ] then
94199: LD_VAR 0 1
94203: PUSH
94204: LD_INT 1
94206: ARRAY
94207: IFFALSE 94272
// if result [ 1 ] [ 1 ] = i then
94209: LD_VAR 0 1
94213: PUSH
94214: LD_INT 1
94216: ARRAY
94217: PUSH
94218: LD_INT 1
94220: ARRAY
94221: PUSH
94222: LD_VAR 0 5
94226: EQUAL
94227: IFFALSE 94272
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
94229: LD_ADDR_VAR 0 1
94233: PUSH
94234: LD_VAR 0 1
94238: PPUSH
94239: LD_INT 1
94241: PPUSH
94242: LD_VAR 0 1
94246: PUSH
94247: LD_INT 1
94249: ARRAY
94250: PPUSH
94251: LD_INT 1
94253: PPUSH
94254: CALL_OW 3
94258: PPUSH
94259: CALL_OW 1
94263: ST_TO_ADDR
// tmp := 1 ;
94264: LD_ADDR_VAR 0 2
94268: PUSH
94269: LD_STRING 1
94271: ST_TO_ADDR
// end ; normal := normal & tmp ;
94272: LD_ADDR_VAR 0 3
94276: PUSH
94277: LD_VAR 0 3
94281: PUSH
94282: LD_VAR 0 2
94286: STR
94287: ST_TO_ADDR
// end ;
94288: GO 94188
94290: POP
94291: POP
// for i = 1 to hardcoreCounter do
94292: LD_ADDR_VAR 0 5
94296: PUSH
94297: DOUBLE
94298: LD_INT 1
94300: DEC
94301: ST_TO_ADDR
94302: LD_EXP 100
94306: PUSH
94307: FOR_TO
94308: IFFALSE 94413
// begin tmp := 0 ;
94310: LD_ADDR_VAR 0 2
94314: PUSH
94315: LD_STRING 0
94317: ST_TO_ADDR
// if result [ 2 ] then
94318: LD_VAR 0 1
94322: PUSH
94323: LD_INT 2
94325: ARRAY
94326: IFFALSE 94395
// if result [ 2 ] [ 1 ] = 100 + i then
94328: LD_VAR 0 1
94332: PUSH
94333: LD_INT 2
94335: ARRAY
94336: PUSH
94337: LD_INT 1
94339: ARRAY
94340: PUSH
94341: LD_INT 100
94343: PUSH
94344: LD_VAR 0 5
94348: PLUS
94349: EQUAL
94350: IFFALSE 94395
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
94352: LD_ADDR_VAR 0 1
94356: PUSH
94357: LD_VAR 0 1
94361: PPUSH
94362: LD_INT 2
94364: PPUSH
94365: LD_VAR 0 1
94369: PUSH
94370: LD_INT 2
94372: ARRAY
94373: PPUSH
94374: LD_INT 1
94376: PPUSH
94377: CALL_OW 3
94381: PPUSH
94382: CALL_OW 1
94386: ST_TO_ADDR
// tmp := 1 ;
94387: LD_ADDR_VAR 0 2
94391: PUSH
94392: LD_STRING 1
94394: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
94395: LD_ADDR_VAR 0 4
94399: PUSH
94400: LD_VAR 0 4
94404: PUSH
94405: LD_VAR 0 2
94409: STR
94410: ST_TO_ADDR
// end ;
94411: GO 94307
94413: POP
94414: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
94415: LD_STRING getStreamItemsFromMission("
94417: PUSH
94418: LD_VAR 0 3
94422: STR
94423: PUSH
94424: LD_STRING ","
94426: STR
94427: PUSH
94428: LD_VAR 0 4
94432: STR
94433: PUSH
94434: LD_STRING ")
94436: STR
94437: PPUSH
94438: CALL_OW 559
// end else
94442: GO 94451
// ToLua ( getStreamItemsFromMission("","") ) ;
94444: LD_STRING getStreamItemsFromMission("","")
94446: PPUSH
94447: CALL_OW 559
// end ;
94451: LD_VAR 0 1
94455: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
94456: LD_VAR 0 2
94460: PUSH
94461: LD_INT 100
94463: EQUAL
94464: IFFALSE 95413
// begin if not StreamModeActive then
94466: LD_EXP 98
94470: NOT
94471: IFFALSE 94481
// StreamModeActive := true ;
94473: LD_ADDR_EXP 98
94477: PUSH
94478: LD_INT 1
94480: ST_TO_ADDR
// if p3 = 0 then
94481: LD_VAR 0 3
94485: PUSH
94486: LD_INT 0
94488: EQUAL
94489: IFFALSE 94495
// InitStreamMode ;
94491: CALL 90716 0 0
// if p3 = 1 then
94495: LD_VAR 0 3
94499: PUSH
94500: LD_INT 1
94502: EQUAL
94503: IFFALSE 94513
// sRocket := true ;
94505: LD_ADDR_EXP 103
94509: PUSH
94510: LD_INT 1
94512: ST_TO_ADDR
// if p3 = 2 then
94513: LD_VAR 0 3
94517: PUSH
94518: LD_INT 2
94520: EQUAL
94521: IFFALSE 94531
// sSpeed := true ;
94523: LD_ADDR_EXP 102
94527: PUSH
94528: LD_INT 1
94530: ST_TO_ADDR
// if p3 = 3 then
94531: LD_VAR 0 3
94535: PUSH
94536: LD_INT 3
94538: EQUAL
94539: IFFALSE 94549
// sEngine := true ;
94541: LD_ADDR_EXP 104
94545: PUSH
94546: LD_INT 1
94548: ST_TO_ADDR
// if p3 = 4 then
94549: LD_VAR 0 3
94553: PUSH
94554: LD_INT 4
94556: EQUAL
94557: IFFALSE 94567
// sSpec := true ;
94559: LD_ADDR_EXP 101
94563: PUSH
94564: LD_INT 1
94566: ST_TO_ADDR
// if p3 = 5 then
94567: LD_VAR 0 3
94571: PUSH
94572: LD_INT 5
94574: EQUAL
94575: IFFALSE 94585
// sLevel := true ;
94577: LD_ADDR_EXP 105
94581: PUSH
94582: LD_INT 1
94584: ST_TO_ADDR
// if p3 = 6 then
94585: LD_VAR 0 3
94589: PUSH
94590: LD_INT 6
94592: EQUAL
94593: IFFALSE 94603
// sArmoury := true ;
94595: LD_ADDR_EXP 106
94599: PUSH
94600: LD_INT 1
94602: ST_TO_ADDR
// if p3 = 7 then
94603: LD_VAR 0 3
94607: PUSH
94608: LD_INT 7
94610: EQUAL
94611: IFFALSE 94621
// sRadar := true ;
94613: LD_ADDR_EXP 107
94617: PUSH
94618: LD_INT 1
94620: ST_TO_ADDR
// if p3 = 8 then
94621: LD_VAR 0 3
94625: PUSH
94626: LD_INT 8
94628: EQUAL
94629: IFFALSE 94639
// sBunker := true ;
94631: LD_ADDR_EXP 108
94635: PUSH
94636: LD_INT 1
94638: ST_TO_ADDR
// if p3 = 9 then
94639: LD_VAR 0 3
94643: PUSH
94644: LD_INT 9
94646: EQUAL
94647: IFFALSE 94657
// sHack := true ;
94649: LD_ADDR_EXP 109
94653: PUSH
94654: LD_INT 1
94656: ST_TO_ADDR
// if p3 = 10 then
94657: LD_VAR 0 3
94661: PUSH
94662: LD_INT 10
94664: EQUAL
94665: IFFALSE 94675
// sFire := true ;
94667: LD_ADDR_EXP 110
94671: PUSH
94672: LD_INT 1
94674: ST_TO_ADDR
// if p3 = 11 then
94675: LD_VAR 0 3
94679: PUSH
94680: LD_INT 11
94682: EQUAL
94683: IFFALSE 94693
// sRefresh := true ;
94685: LD_ADDR_EXP 111
94689: PUSH
94690: LD_INT 1
94692: ST_TO_ADDR
// if p3 = 12 then
94693: LD_VAR 0 3
94697: PUSH
94698: LD_INT 12
94700: EQUAL
94701: IFFALSE 94711
// sExp := true ;
94703: LD_ADDR_EXP 112
94707: PUSH
94708: LD_INT 1
94710: ST_TO_ADDR
// if p3 = 13 then
94711: LD_VAR 0 3
94715: PUSH
94716: LD_INT 13
94718: EQUAL
94719: IFFALSE 94729
// sDepot := true ;
94721: LD_ADDR_EXP 113
94725: PUSH
94726: LD_INT 1
94728: ST_TO_ADDR
// if p3 = 14 then
94729: LD_VAR 0 3
94733: PUSH
94734: LD_INT 14
94736: EQUAL
94737: IFFALSE 94747
// sFlag := true ;
94739: LD_ADDR_EXP 114
94743: PUSH
94744: LD_INT 1
94746: ST_TO_ADDR
// if p3 = 15 then
94747: LD_VAR 0 3
94751: PUSH
94752: LD_INT 15
94754: EQUAL
94755: IFFALSE 94765
// sKamikadze := true ;
94757: LD_ADDR_EXP 122
94761: PUSH
94762: LD_INT 1
94764: ST_TO_ADDR
// if p3 = 16 then
94765: LD_VAR 0 3
94769: PUSH
94770: LD_INT 16
94772: EQUAL
94773: IFFALSE 94783
// sTroll := true ;
94775: LD_ADDR_EXP 123
94779: PUSH
94780: LD_INT 1
94782: ST_TO_ADDR
// if p3 = 17 then
94783: LD_VAR 0 3
94787: PUSH
94788: LD_INT 17
94790: EQUAL
94791: IFFALSE 94801
// sSlow := true ;
94793: LD_ADDR_EXP 124
94797: PUSH
94798: LD_INT 1
94800: ST_TO_ADDR
// if p3 = 18 then
94801: LD_VAR 0 3
94805: PUSH
94806: LD_INT 18
94808: EQUAL
94809: IFFALSE 94819
// sLack := true ;
94811: LD_ADDR_EXP 125
94815: PUSH
94816: LD_INT 1
94818: ST_TO_ADDR
// if p3 = 19 then
94819: LD_VAR 0 3
94823: PUSH
94824: LD_INT 19
94826: EQUAL
94827: IFFALSE 94837
// sTank := true ;
94829: LD_ADDR_EXP 127
94833: PUSH
94834: LD_INT 1
94836: ST_TO_ADDR
// if p3 = 20 then
94837: LD_VAR 0 3
94841: PUSH
94842: LD_INT 20
94844: EQUAL
94845: IFFALSE 94855
// sRemote := true ;
94847: LD_ADDR_EXP 128
94851: PUSH
94852: LD_INT 1
94854: ST_TO_ADDR
// if p3 = 21 then
94855: LD_VAR 0 3
94859: PUSH
94860: LD_INT 21
94862: EQUAL
94863: IFFALSE 94873
// sPowell := true ;
94865: LD_ADDR_EXP 129
94869: PUSH
94870: LD_INT 1
94872: ST_TO_ADDR
// if p3 = 22 then
94873: LD_VAR 0 3
94877: PUSH
94878: LD_INT 22
94880: EQUAL
94881: IFFALSE 94891
// sTeleport := true ;
94883: LD_ADDR_EXP 132
94887: PUSH
94888: LD_INT 1
94890: ST_TO_ADDR
// if p3 = 23 then
94891: LD_VAR 0 3
94895: PUSH
94896: LD_INT 23
94898: EQUAL
94899: IFFALSE 94909
// sOilTower := true ;
94901: LD_ADDR_EXP 134
94905: PUSH
94906: LD_INT 1
94908: ST_TO_ADDR
// if p3 = 24 then
94909: LD_VAR 0 3
94913: PUSH
94914: LD_INT 24
94916: EQUAL
94917: IFFALSE 94927
// sShovel := true ;
94919: LD_ADDR_EXP 135
94923: PUSH
94924: LD_INT 1
94926: ST_TO_ADDR
// if p3 = 25 then
94927: LD_VAR 0 3
94931: PUSH
94932: LD_INT 25
94934: EQUAL
94935: IFFALSE 94945
// sSheik := true ;
94937: LD_ADDR_EXP 136
94941: PUSH
94942: LD_INT 1
94944: ST_TO_ADDR
// if p3 = 26 then
94945: LD_VAR 0 3
94949: PUSH
94950: LD_INT 26
94952: EQUAL
94953: IFFALSE 94963
// sEarthquake := true ;
94955: LD_ADDR_EXP 138
94959: PUSH
94960: LD_INT 1
94962: ST_TO_ADDR
// if p3 = 27 then
94963: LD_VAR 0 3
94967: PUSH
94968: LD_INT 27
94970: EQUAL
94971: IFFALSE 94981
// sAI := true ;
94973: LD_ADDR_EXP 139
94977: PUSH
94978: LD_INT 1
94980: ST_TO_ADDR
// if p3 = 28 then
94981: LD_VAR 0 3
94985: PUSH
94986: LD_INT 28
94988: EQUAL
94989: IFFALSE 94999
// sCargo := true ;
94991: LD_ADDR_EXP 142
94995: PUSH
94996: LD_INT 1
94998: ST_TO_ADDR
// if p3 = 29 then
94999: LD_VAR 0 3
95003: PUSH
95004: LD_INT 29
95006: EQUAL
95007: IFFALSE 95017
// sDLaser := true ;
95009: LD_ADDR_EXP 143
95013: PUSH
95014: LD_INT 1
95016: ST_TO_ADDR
// if p3 = 30 then
95017: LD_VAR 0 3
95021: PUSH
95022: LD_INT 30
95024: EQUAL
95025: IFFALSE 95035
// sExchange := true ;
95027: LD_ADDR_EXP 144
95031: PUSH
95032: LD_INT 1
95034: ST_TO_ADDR
// if p3 = 31 then
95035: LD_VAR 0 3
95039: PUSH
95040: LD_INT 31
95042: EQUAL
95043: IFFALSE 95053
// sFac := true ;
95045: LD_ADDR_EXP 145
95049: PUSH
95050: LD_INT 1
95052: ST_TO_ADDR
// if p3 = 32 then
95053: LD_VAR 0 3
95057: PUSH
95058: LD_INT 32
95060: EQUAL
95061: IFFALSE 95071
// sPower := true ;
95063: LD_ADDR_EXP 146
95067: PUSH
95068: LD_INT 1
95070: ST_TO_ADDR
// if p3 = 33 then
95071: LD_VAR 0 3
95075: PUSH
95076: LD_INT 33
95078: EQUAL
95079: IFFALSE 95089
// sRandom := true ;
95081: LD_ADDR_EXP 147
95085: PUSH
95086: LD_INT 1
95088: ST_TO_ADDR
// if p3 = 34 then
95089: LD_VAR 0 3
95093: PUSH
95094: LD_INT 34
95096: EQUAL
95097: IFFALSE 95107
// sShield := true ;
95099: LD_ADDR_EXP 148
95103: PUSH
95104: LD_INT 1
95106: ST_TO_ADDR
// if p3 = 35 then
95107: LD_VAR 0 3
95111: PUSH
95112: LD_INT 35
95114: EQUAL
95115: IFFALSE 95125
// sTime := true ;
95117: LD_ADDR_EXP 149
95121: PUSH
95122: LD_INT 1
95124: ST_TO_ADDR
// if p3 = 36 then
95125: LD_VAR 0 3
95129: PUSH
95130: LD_INT 36
95132: EQUAL
95133: IFFALSE 95143
// sTools := true ;
95135: LD_ADDR_EXP 150
95139: PUSH
95140: LD_INT 1
95142: ST_TO_ADDR
// if p3 = 101 then
95143: LD_VAR 0 3
95147: PUSH
95148: LD_INT 101
95150: EQUAL
95151: IFFALSE 95161
// sSold := true ;
95153: LD_ADDR_EXP 115
95157: PUSH
95158: LD_INT 1
95160: ST_TO_ADDR
// if p3 = 102 then
95161: LD_VAR 0 3
95165: PUSH
95166: LD_INT 102
95168: EQUAL
95169: IFFALSE 95179
// sDiff := true ;
95171: LD_ADDR_EXP 116
95175: PUSH
95176: LD_INT 1
95178: ST_TO_ADDR
// if p3 = 103 then
95179: LD_VAR 0 3
95183: PUSH
95184: LD_INT 103
95186: EQUAL
95187: IFFALSE 95197
// sFog := true ;
95189: LD_ADDR_EXP 119
95193: PUSH
95194: LD_INT 1
95196: ST_TO_ADDR
// if p3 = 104 then
95197: LD_VAR 0 3
95201: PUSH
95202: LD_INT 104
95204: EQUAL
95205: IFFALSE 95215
// sReset := true ;
95207: LD_ADDR_EXP 120
95211: PUSH
95212: LD_INT 1
95214: ST_TO_ADDR
// if p3 = 105 then
95215: LD_VAR 0 3
95219: PUSH
95220: LD_INT 105
95222: EQUAL
95223: IFFALSE 95233
// sSun := true ;
95225: LD_ADDR_EXP 121
95229: PUSH
95230: LD_INT 1
95232: ST_TO_ADDR
// if p3 = 106 then
95233: LD_VAR 0 3
95237: PUSH
95238: LD_INT 106
95240: EQUAL
95241: IFFALSE 95251
// sTiger := true ;
95243: LD_ADDR_EXP 117
95247: PUSH
95248: LD_INT 1
95250: ST_TO_ADDR
// if p3 = 107 then
95251: LD_VAR 0 3
95255: PUSH
95256: LD_INT 107
95258: EQUAL
95259: IFFALSE 95269
// sBomb := true ;
95261: LD_ADDR_EXP 118
95265: PUSH
95266: LD_INT 1
95268: ST_TO_ADDR
// if p3 = 108 then
95269: LD_VAR 0 3
95273: PUSH
95274: LD_INT 108
95276: EQUAL
95277: IFFALSE 95287
// sWound := true ;
95279: LD_ADDR_EXP 126
95283: PUSH
95284: LD_INT 1
95286: ST_TO_ADDR
// if p3 = 109 then
95287: LD_VAR 0 3
95291: PUSH
95292: LD_INT 109
95294: EQUAL
95295: IFFALSE 95305
// sBetray := true ;
95297: LD_ADDR_EXP 130
95301: PUSH
95302: LD_INT 1
95304: ST_TO_ADDR
// if p3 = 110 then
95305: LD_VAR 0 3
95309: PUSH
95310: LD_INT 110
95312: EQUAL
95313: IFFALSE 95323
// sContamin := true ;
95315: LD_ADDR_EXP 131
95319: PUSH
95320: LD_INT 1
95322: ST_TO_ADDR
// if p3 = 111 then
95323: LD_VAR 0 3
95327: PUSH
95328: LD_INT 111
95330: EQUAL
95331: IFFALSE 95341
// sOil := true ;
95333: LD_ADDR_EXP 133
95337: PUSH
95338: LD_INT 1
95340: ST_TO_ADDR
// if p3 = 112 then
95341: LD_VAR 0 3
95345: PUSH
95346: LD_INT 112
95348: EQUAL
95349: IFFALSE 95359
// sStu := true ;
95351: LD_ADDR_EXP 137
95355: PUSH
95356: LD_INT 1
95358: ST_TO_ADDR
// if p3 = 113 then
95359: LD_VAR 0 3
95363: PUSH
95364: LD_INT 113
95366: EQUAL
95367: IFFALSE 95377
// sBazooka := true ;
95369: LD_ADDR_EXP 140
95373: PUSH
95374: LD_INT 1
95376: ST_TO_ADDR
// if p3 = 114 then
95377: LD_VAR 0 3
95381: PUSH
95382: LD_INT 114
95384: EQUAL
95385: IFFALSE 95395
// sMortar := true ;
95387: LD_ADDR_EXP 141
95391: PUSH
95392: LD_INT 1
95394: ST_TO_ADDR
// if p3 = 115 then
95395: LD_VAR 0 3
95399: PUSH
95400: LD_INT 115
95402: EQUAL
95403: IFFALSE 95413
// sRanger := true ;
95405: LD_ADDR_EXP 151
95409: PUSH
95410: LD_INT 1
95412: ST_TO_ADDR
// end ; end ;
95413: PPOPN 6
95415: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
95416: LD_EXP 98
95420: PUSH
95421: LD_EXP 103
95425: AND
95426: IFFALSE 95550
95428: GO 95430
95430: DISABLE
95431: LD_INT 0
95433: PPUSH
95434: PPUSH
// begin enable ;
95435: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
95436: LD_ADDR_VAR 0 2
95440: PUSH
95441: LD_INT 22
95443: PUSH
95444: LD_OWVAR 2
95448: PUSH
95449: EMPTY
95450: LIST
95451: LIST
95452: PUSH
95453: LD_INT 2
95455: PUSH
95456: LD_INT 34
95458: PUSH
95459: LD_INT 7
95461: PUSH
95462: EMPTY
95463: LIST
95464: LIST
95465: PUSH
95466: LD_INT 34
95468: PUSH
95469: LD_INT 45
95471: PUSH
95472: EMPTY
95473: LIST
95474: LIST
95475: PUSH
95476: LD_INT 34
95478: PUSH
95479: LD_INT 28
95481: PUSH
95482: EMPTY
95483: LIST
95484: LIST
95485: PUSH
95486: LD_INT 34
95488: PUSH
95489: LD_INT 47
95491: PUSH
95492: EMPTY
95493: LIST
95494: LIST
95495: PUSH
95496: EMPTY
95497: LIST
95498: LIST
95499: LIST
95500: LIST
95501: LIST
95502: PUSH
95503: EMPTY
95504: LIST
95505: LIST
95506: PPUSH
95507: CALL_OW 69
95511: ST_TO_ADDR
// if not tmp then
95512: LD_VAR 0 2
95516: NOT
95517: IFFALSE 95521
// exit ;
95519: GO 95550
// for i in tmp do
95521: LD_ADDR_VAR 0 1
95525: PUSH
95526: LD_VAR 0 2
95530: PUSH
95531: FOR_IN
95532: IFFALSE 95548
// begin SetLives ( i , 0 ) ;
95534: LD_VAR 0 1
95538: PPUSH
95539: LD_INT 0
95541: PPUSH
95542: CALL_OW 234
// end ;
95546: GO 95531
95548: POP
95549: POP
// end ;
95550: PPOPN 2
95552: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
95553: LD_EXP 98
95557: PUSH
95558: LD_EXP 104
95562: AND
95563: IFFALSE 95647
95565: GO 95567
95567: DISABLE
95568: LD_INT 0
95570: PPUSH
95571: PPUSH
// begin enable ;
95572: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
95573: LD_ADDR_VAR 0 2
95577: PUSH
95578: LD_INT 22
95580: PUSH
95581: LD_OWVAR 2
95585: PUSH
95586: EMPTY
95587: LIST
95588: LIST
95589: PUSH
95590: LD_INT 32
95592: PUSH
95593: LD_INT 3
95595: PUSH
95596: EMPTY
95597: LIST
95598: LIST
95599: PUSH
95600: EMPTY
95601: LIST
95602: LIST
95603: PPUSH
95604: CALL_OW 69
95608: ST_TO_ADDR
// if not tmp then
95609: LD_VAR 0 2
95613: NOT
95614: IFFALSE 95618
// exit ;
95616: GO 95647
// for i in tmp do
95618: LD_ADDR_VAR 0 1
95622: PUSH
95623: LD_VAR 0 2
95627: PUSH
95628: FOR_IN
95629: IFFALSE 95645
// begin SetLives ( i , 0 ) ;
95631: LD_VAR 0 1
95635: PPUSH
95636: LD_INT 0
95638: PPUSH
95639: CALL_OW 234
// end ;
95643: GO 95628
95645: POP
95646: POP
// end ;
95647: PPOPN 2
95649: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
95650: LD_EXP 98
95654: PUSH
95655: LD_EXP 101
95659: AND
95660: IFFALSE 95753
95662: GO 95664
95664: DISABLE
95665: LD_INT 0
95667: PPUSH
// begin enable ;
95668: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
95669: LD_ADDR_VAR 0 1
95673: PUSH
95674: LD_INT 22
95676: PUSH
95677: LD_OWVAR 2
95681: PUSH
95682: EMPTY
95683: LIST
95684: LIST
95685: PUSH
95686: LD_INT 2
95688: PUSH
95689: LD_INT 25
95691: PUSH
95692: LD_INT 5
95694: PUSH
95695: EMPTY
95696: LIST
95697: LIST
95698: PUSH
95699: LD_INT 25
95701: PUSH
95702: LD_INT 9
95704: PUSH
95705: EMPTY
95706: LIST
95707: LIST
95708: PUSH
95709: LD_INT 25
95711: PUSH
95712: LD_INT 8
95714: PUSH
95715: EMPTY
95716: LIST
95717: LIST
95718: PUSH
95719: EMPTY
95720: LIST
95721: LIST
95722: LIST
95723: LIST
95724: PUSH
95725: EMPTY
95726: LIST
95727: LIST
95728: PPUSH
95729: CALL_OW 69
95733: PUSH
95734: FOR_IN
95735: IFFALSE 95751
// begin SetClass ( i , 1 ) ;
95737: LD_VAR 0 1
95741: PPUSH
95742: LD_INT 1
95744: PPUSH
95745: CALL_OW 336
// end ;
95749: GO 95734
95751: POP
95752: POP
// end ;
95753: PPOPN 1
95755: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
95756: LD_EXP 98
95760: PUSH
95761: LD_EXP 102
95765: AND
95766: PUSH
95767: LD_OWVAR 65
95771: PUSH
95772: LD_INT 7
95774: LESS
95775: AND
95776: IFFALSE 95790
95778: GO 95780
95780: DISABLE
// begin enable ;
95781: ENABLE
// game_speed := 7 ;
95782: LD_ADDR_OWVAR 65
95786: PUSH
95787: LD_INT 7
95789: ST_TO_ADDR
// end ;
95790: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
95791: LD_EXP 98
95795: PUSH
95796: LD_EXP 105
95800: AND
95801: IFFALSE 96003
95803: GO 95805
95805: DISABLE
95806: LD_INT 0
95808: PPUSH
95809: PPUSH
95810: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
95811: LD_ADDR_VAR 0 3
95815: PUSH
95816: LD_INT 81
95818: PUSH
95819: LD_OWVAR 2
95823: PUSH
95824: EMPTY
95825: LIST
95826: LIST
95827: PUSH
95828: LD_INT 21
95830: PUSH
95831: LD_INT 1
95833: PUSH
95834: EMPTY
95835: LIST
95836: LIST
95837: PUSH
95838: EMPTY
95839: LIST
95840: LIST
95841: PPUSH
95842: CALL_OW 69
95846: ST_TO_ADDR
// if not tmp then
95847: LD_VAR 0 3
95851: NOT
95852: IFFALSE 95856
// exit ;
95854: GO 96003
// if tmp > 5 then
95856: LD_VAR 0 3
95860: PUSH
95861: LD_INT 5
95863: GREATER
95864: IFFALSE 95876
// k := 5 else
95866: LD_ADDR_VAR 0 2
95870: PUSH
95871: LD_INT 5
95873: ST_TO_ADDR
95874: GO 95886
// k := tmp ;
95876: LD_ADDR_VAR 0 2
95880: PUSH
95881: LD_VAR 0 3
95885: ST_TO_ADDR
// for i := 1 to k do
95886: LD_ADDR_VAR 0 1
95890: PUSH
95891: DOUBLE
95892: LD_INT 1
95894: DEC
95895: ST_TO_ADDR
95896: LD_VAR 0 2
95900: PUSH
95901: FOR_TO
95902: IFFALSE 96001
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
95904: LD_VAR 0 3
95908: PUSH
95909: LD_VAR 0 1
95913: ARRAY
95914: PPUSH
95915: LD_VAR 0 1
95919: PUSH
95920: LD_INT 4
95922: MOD
95923: PUSH
95924: LD_INT 1
95926: PLUS
95927: PPUSH
95928: CALL_OW 259
95932: PUSH
95933: LD_INT 10
95935: LESS
95936: IFFALSE 95999
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
95938: LD_VAR 0 3
95942: PUSH
95943: LD_VAR 0 1
95947: ARRAY
95948: PPUSH
95949: LD_VAR 0 1
95953: PUSH
95954: LD_INT 4
95956: MOD
95957: PUSH
95958: LD_INT 1
95960: PLUS
95961: PPUSH
95962: LD_VAR 0 3
95966: PUSH
95967: LD_VAR 0 1
95971: ARRAY
95972: PPUSH
95973: LD_VAR 0 1
95977: PUSH
95978: LD_INT 4
95980: MOD
95981: PUSH
95982: LD_INT 1
95984: PLUS
95985: PPUSH
95986: CALL_OW 259
95990: PUSH
95991: LD_INT 1
95993: PLUS
95994: PPUSH
95995: CALL_OW 237
95999: GO 95901
96001: POP
96002: POP
// end ;
96003: PPOPN 3
96005: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
96006: LD_EXP 98
96010: PUSH
96011: LD_EXP 106
96015: AND
96016: IFFALSE 96036
96018: GO 96020
96020: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
96021: LD_INT 4
96023: PPUSH
96024: LD_OWVAR 2
96028: PPUSH
96029: LD_INT 0
96031: PPUSH
96032: CALL_OW 324
96036: END
// every 0 0$1 trigger StreamModeActive and sShovel do
96037: LD_EXP 98
96041: PUSH
96042: LD_EXP 135
96046: AND
96047: IFFALSE 96067
96049: GO 96051
96051: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
96052: LD_INT 19
96054: PPUSH
96055: LD_OWVAR 2
96059: PPUSH
96060: LD_INT 0
96062: PPUSH
96063: CALL_OW 324
96067: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
96068: LD_EXP 98
96072: PUSH
96073: LD_EXP 107
96077: AND
96078: IFFALSE 96180
96080: GO 96082
96082: DISABLE
96083: LD_INT 0
96085: PPUSH
96086: PPUSH
// begin enable ;
96087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
96088: LD_ADDR_VAR 0 2
96092: PUSH
96093: LD_INT 22
96095: PUSH
96096: LD_OWVAR 2
96100: PUSH
96101: EMPTY
96102: LIST
96103: LIST
96104: PUSH
96105: LD_INT 2
96107: PUSH
96108: LD_INT 34
96110: PUSH
96111: LD_INT 11
96113: PUSH
96114: EMPTY
96115: LIST
96116: LIST
96117: PUSH
96118: LD_INT 34
96120: PUSH
96121: LD_INT 30
96123: PUSH
96124: EMPTY
96125: LIST
96126: LIST
96127: PUSH
96128: EMPTY
96129: LIST
96130: LIST
96131: LIST
96132: PUSH
96133: EMPTY
96134: LIST
96135: LIST
96136: PPUSH
96137: CALL_OW 69
96141: ST_TO_ADDR
// if not tmp then
96142: LD_VAR 0 2
96146: NOT
96147: IFFALSE 96151
// exit ;
96149: GO 96180
// for i in tmp do
96151: LD_ADDR_VAR 0 1
96155: PUSH
96156: LD_VAR 0 2
96160: PUSH
96161: FOR_IN
96162: IFFALSE 96178
// begin SetLives ( i , 0 ) ;
96164: LD_VAR 0 1
96168: PPUSH
96169: LD_INT 0
96171: PPUSH
96172: CALL_OW 234
// end ;
96176: GO 96161
96178: POP
96179: POP
// end ;
96180: PPOPN 2
96182: END
// every 0 0$1 trigger StreamModeActive and sBunker do
96183: LD_EXP 98
96187: PUSH
96188: LD_EXP 108
96192: AND
96193: IFFALSE 96213
96195: GO 96197
96197: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
96198: LD_INT 32
96200: PPUSH
96201: LD_OWVAR 2
96205: PPUSH
96206: LD_INT 0
96208: PPUSH
96209: CALL_OW 324
96213: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
96214: LD_EXP 98
96218: PUSH
96219: LD_EXP 109
96223: AND
96224: IFFALSE 96405
96226: GO 96228
96228: DISABLE
96229: LD_INT 0
96231: PPUSH
96232: PPUSH
96233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
96234: LD_ADDR_VAR 0 2
96238: PUSH
96239: LD_INT 22
96241: PUSH
96242: LD_OWVAR 2
96246: PUSH
96247: EMPTY
96248: LIST
96249: LIST
96250: PUSH
96251: LD_INT 33
96253: PUSH
96254: LD_INT 3
96256: PUSH
96257: EMPTY
96258: LIST
96259: LIST
96260: PUSH
96261: EMPTY
96262: LIST
96263: LIST
96264: PPUSH
96265: CALL_OW 69
96269: ST_TO_ADDR
// if not tmp then
96270: LD_VAR 0 2
96274: NOT
96275: IFFALSE 96279
// exit ;
96277: GO 96405
// side := 0 ;
96279: LD_ADDR_VAR 0 3
96283: PUSH
96284: LD_INT 0
96286: ST_TO_ADDR
// for i := 1 to 8 do
96287: LD_ADDR_VAR 0 1
96291: PUSH
96292: DOUBLE
96293: LD_INT 1
96295: DEC
96296: ST_TO_ADDR
96297: LD_INT 8
96299: PUSH
96300: FOR_TO
96301: IFFALSE 96349
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
96303: LD_OWVAR 2
96307: PUSH
96308: LD_VAR 0 1
96312: NONEQUAL
96313: PUSH
96314: LD_OWVAR 2
96318: PPUSH
96319: LD_VAR 0 1
96323: PPUSH
96324: CALL_OW 81
96328: PUSH
96329: LD_INT 2
96331: EQUAL
96332: AND
96333: IFFALSE 96347
// begin side := i ;
96335: LD_ADDR_VAR 0 3
96339: PUSH
96340: LD_VAR 0 1
96344: ST_TO_ADDR
// break ;
96345: GO 96349
// end ;
96347: GO 96300
96349: POP
96350: POP
// if not side then
96351: LD_VAR 0 3
96355: NOT
96356: IFFALSE 96360
// exit ;
96358: GO 96405
// for i := 1 to tmp do
96360: LD_ADDR_VAR 0 1
96364: PUSH
96365: DOUBLE
96366: LD_INT 1
96368: DEC
96369: ST_TO_ADDR
96370: LD_VAR 0 2
96374: PUSH
96375: FOR_TO
96376: IFFALSE 96403
// if Prob ( 60 ) then
96378: LD_INT 60
96380: PPUSH
96381: CALL_OW 13
96385: IFFALSE 96401
// SetSide ( i , side ) ;
96387: LD_VAR 0 1
96391: PPUSH
96392: LD_VAR 0 3
96396: PPUSH
96397: CALL_OW 235
96401: GO 96375
96403: POP
96404: POP
// end ;
96405: PPOPN 3
96407: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
96408: LD_EXP 98
96412: PUSH
96413: LD_EXP 111
96417: AND
96418: IFFALSE 96537
96420: GO 96422
96422: DISABLE
96423: LD_INT 0
96425: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
96426: LD_ADDR_VAR 0 1
96430: PUSH
96431: LD_INT 22
96433: PUSH
96434: LD_OWVAR 2
96438: PUSH
96439: EMPTY
96440: LIST
96441: LIST
96442: PUSH
96443: LD_INT 21
96445: PUSH
96446: LD_INT 1
96448: PUSH
96449: EMPTY
96450: LIST
96451: LIST
96452: PUSH
96453: LD_INT 3
96455: PUSH
96456: LD_INT 23
96458: PUSH
96459: LD_INT 0
96461: PUSH
96462: EMPTY
96463: LIST
96464: LIST
96465: PUSH
96466: EMPTY
96467: LIST
96468: LIST
96469: PUSH
96470: EMPTY
96471: LIST
96472: LIST
96473: LIST
96474: PPUSH
96475: CALL_OW 69
96479: PUSH
96480: FOR_IN
96481: IFFALSE 96535
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
96483: LD_VAR 0 1
96487: PPUSH
96488: CALL_OW 257
96492: PUSH
96493: LD_INT 1
96495: PUSH
96496: LD_INT 2
96498: PUSH
96499: LD_INT 3
96501: PUSH
96502: LD_INT 4
96504: PUSH
96505: EMPTY
96506: LIST
96507: LIST
96508: LIST
96509: LIST
96510: IN
96511: IFFALSE 96533
// SetClass ( un , rand ( 1 , 4 ) ) ;
96513: LD_VAR 0 1
96517: PPUSH
96518: LD_INT 1
96520: PPUSH
96521: LD_INT 4
96523: PPUSH
96524: CALL_OW 12
96528: PPUSH
96529: CALL_OW 336
96533: GO 96480
96535: POP
96536: POP
// end ;
96537: PPOPN 1
96539: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
96540: LD_EXP 98
96544: PUSH
96545: LD_EXP 110
96549: AND
96550: IFFALSE 96629
96552: GO 96554
96554: DISABLE
96555: LD_INT 0
96557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96558: LD_ADDR_VAR 0 1
96562: PUSH
96563: LD_INT 22
96565: PUSH
96566: LD_OWVAR 2
96570: PUSH
96571: EMPTY
96572: LIST
96573: LIST
96574: PUSH
96575: LD_INT 21
96577: PUSH
96578: LD_INT 3
96580: PUSH
96581: EMPTY
96582: LIST
96583: LIST
96584: PUSH
96585: EMPTY
96586: LIST
96587: LIST
96588: PPUSH
96589: CALL_OW 69
96593: ST_TO_ADDR
// if not tmp then
96594: LD_VAR 0 1
96598: NOT
96599: IFFALSE 96603
// exit ;
96601: GO 96629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
96603: LD_VAR 0 1
96607: PUSH
96608: LD_INT 1
96610: PPUSH
96611: LD_VAR 0 1
96615: PPUSH
96616: CALL_OW 12
96620: ARRAY
96621: PPUSH
96622: LD_INT 100
96624: PPUSH
96625: CALL_OW 234
// end ;
96629: PPOPN 1
96631: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
96632: LD_EXP 98
96636: PUSH
96637: LD_EXP 112
96641: AND
96642: IFFALSE 96740
96644: GO 96646
96646: DISABLE
96647: LD_INT 0
96649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
96650: LD_ADDR_VAR 0 1
96654: PUSH
96655: LD_INT 22
96657: PUSH
96658: LD_OWVAR 2
96662: PUSH
96663: EMPTY
96664: LIST
96665: LIST
96666: PUSH
96667: LD_INT 21
96669: PUSH
96670: LD_INT 1
96672: PUSH
96673: EMPTY
96674: LIST
96675: LIST
96676: PUSH
96677: EMPTY
96678: LIST
96679: LIST
96680: PPUSH
96681: CALL_OW 69
96685: ST_TO_ADDR
// if not tmp then
96686: LD_VAR 0 1
96690: NOT
96691: IFFALSE 96695
// exit ;
96693: GO 96740
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
96695: LD_VAR 0 1
96699: PUSH
96700: LD_INT 1
96702: PPUSH
96703: LD_VAR 0 1
96707: PPUSH
96708: CALL_OW 12
96712: ARRAY
96713: PPUSH
96714: LD_INT 1
96716: PPUSH
96717: LD_INT 4
96719: PPUSH
96720: CALL_OW 12
96724: PPUSH
96725: LD_INT 3000
96727: PPUSH
96728: LD_INT 9000
96730: PPUSH
96731: CALL_OW 12
96735: PPUSH
96736: CALL_OW 492
// end ;
96740: PPOPN 1
96742: END
// every 0 0$1 trigger StreamModeActive and sDepot do
96743: LD_EXP 98
96747: PUSH
96748: LD_EXP 113
96752: AND
96753: IFFALSE 96773
96755: GO 96757
96757: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
96758: LD_INT 1
96760: PPUSH
96761: LD_OWVAR 2
96765: PPUSH
96766: LD_INT 0
96768: PPUSH
96769: CALL_OW 324
96773: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
96774: LD_EXP 98
96778: PUSH
96779: LD_EXP 114
96783: AND
96784: IFFALSE 96867
96786: GO 96788
96788: DISABLE
96789: LD_INT 0
96791: PPUSH
96792: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
96793: LD_ADDR_VAR 0 2
96797: PUSH
96798: LD_INT 22
96800: PUSH
96801: LD_OWVAR 2
96805: PUSH
96806: EMPTY
96807: LIST
96808: LIST
96809: PUSH
96810: LD_INT 21
96812: PUSH
96813: LD_INT 3
96815: PUSH
96816: EMPTY
96817: LIST
96818: LIST
96819: PUSH
96820: EMPTY
96821: LIST
96822: LIST
96823: PPUSH
96824: CALL_OW 69
96828: ST_TO_ADDR
// if not tmp then
96829: LD_VAR 0 2
96833: NOT
96834: IFFALSE 96838
// exit ;
96836: GO 96867
// for i in tmp do
96838: LD_ADDR_VAR 0 1
96842: PUSH
96843: LD_VAR 0 2
96847: PUSH
96848: FOR_IN
96849: IFFALSE 96865
// SetBLevel ( i , 10 ) ;
96851: LD_VAR 0 1
96855: PPUSH
96856: LD_INT 10
96858: PPUSH
96859: CALL_OW 241
96863: GO 96848
96865: POP
96866: POP
// end ;
96867: PPOPN 2
96869: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
96870: LD_EXP 98
96874: PUSH
96875: LD_EXP 115
96879: AND
96880: IFFALSE 96991
96882: GO 96884
96884: DISABLE
96885: LD_INT 0
96887: PPUSH
96888: PPUSH
96889: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
96890: LD_ADDR_VAR 0 3
96894: PUSH
96895: LD_INT 22
96897: PUSH
96898: LD_OWVAR 2
96902: PUSH
96903: EMPTY
96904: LIST
96905: LIST
96906: PUSH
96907: LD_INT 25
96909: PUSH
96910: LD_INT 1
96912: PUSH
96913: EMPTY
96914: LIST
96915: LIST
96916: PUSH
96917: EMPTY
96918: LIST
96919: LIST
96920: PPUSH
96921: CALL_OW 69
96925: ST_TO_ADDR
// if not tmp then
96926: LD_VAR 0 3
96930: NOT
96931: IFFALSE 96935
// exit ;
96933: GO 96991
// un := tmp [ rand ( 1 , tmp ) ] ;
96935: LD_ADDR_VAR 0 2
96939: PUSH
96940: LD_VAR 0 3
96944: PUSH
96945: LD_INT 1
96947: PPUSH
96948: LD_VAR 0 3
96952: PPUSH
96953: CALL_OW 12
96957: ARRAY
96958: ST_TO_ADDR
// if Crawls ( un ) then
96959: LD_VAR 0 2
96963: PPUSH
96964: CALL_OW 318
96968: IFFALSE 96979
// ComWalk ( un ) ;
96970: LD_VAR 0 2
96974: PPUSH
96975: CALL_OW 138
// SetClass ( un , class_sniper ) ;
96979: LD_VAR 0 2
96983: PPUSH
96984: LD_INT 5
96986: PPUSH
96987: CALL_OW 336
// end ;
96991: PPOPN 3
96993: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
96994: LD_EXP 98
96998: PUSH
96999: LD_EXP 116
97003: AND
97004: PUSH
97005: LD_OWVAR 67
97009: PUSH
97010: LD_INT 3
97012: LESS
97013: AND
97014: IFFALSE 97033
97016: GO 97018
97018: DISABLE
// Difficulty := Difficulty + 1 ;
97019: LD_ADDR_OWVAR 67
97023: PUSH
97024: LD_OWVAR 67
97028: PUSH
97029: LD_INT 1
97031: PLUS
97032: ST_TO_ADDR
97033: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
97034: LD_EXP 98
97038: PUSH
97039: LD_EXP 117
97043: AND
97044: IFFALSE 97147
97046: GO 97048
97048: DISABLE
97049: LD_INT 0
97051: PPUSH
// begin for i := 1 to 5 do
97052: LD_ADDR_VAR 0 1
97056: PUSH
97057: DOUBLE
97058: LD_INT 1
97060: DEC
97061: ST_TO_ADDR
97062: LD_INT 5
97064: PUSH
97065: FOR_TO
97066: IFFALSE 97145
// begin uc_nation := nation_nature ;
97068: LD_ADDR_OWVAR 21
97072: PUSH
97073: LD_INT 0
97075: ST_TO_ADDR
// uc_side := 0 ;
97076: LD_ADDR_OWVAR 20
97080: PUSH
97081: LD_INT 0
97083: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
97084: LD_ADDR_OWVAR 29
97088: PUSH
97089: LD_INT 12
97091: PUSH
97092: LD_INT 12
97094: PUSH
97095: EMPTY
97096: LIST
97097: LIST
97098: ST_TO_ADDR
// hc_agressivity := 20 ;
97099: LD_ADDR_OWVAR 35
97103: PUSH
97104: LD_INT 20
97106: ST_TO_ADDR
// hc_class := class_tiger ;
97107: LD_ADDR_OWVAR 28
97111: PUSH
97112: LD_INT 14
97114: ST_TO_ADDR
// hc_gallery :=  ;
97115: LD_ADDR_OWVAR 33
97119: PUSH
97120: LD_STRING 
97122: ST_TO_ADDR
// hc_name :=  ;
97123: LD_ADDR_OWVAR 26
97127: PUSH
97128: LD_STRING 
97130: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
97131: CALL_OW 44
97135: PPUSH
97136: LD_INT 0
97138: PPUSH
97139: CALL_OW 51
// end ;
97143: GO 97065
97145: POP
97146: POP
// end ;
97147: PPOPN 1
97149: END
// every 0 0$1 trigger StreamModeActive and sBomb do
97150: LD_EXP 98
97154: PUSH
97155: LD_EXP 118
97159: AND
97160: IFFALSE 97169
97162: GO 97164
97164: DISABLE
// StreamSibBomb ;
97165: CALL 97170 0 0
97169: END
// export function StreamSibBomb ; var i , x , y ; begin
97170: LD_INT 0
97172: PPUSH
97173: PPUSH
97174: PPUSH
97175: PPUSH
// result := false ;
97176: LD_ADDR_VAR 0 1
97180: PUSH
97181: LD_INT 0
97183: ST_TO_ADDR
// for i := 1 to 16 do
97184: LD_ADDR_VAR 0 2
97188: PUSH
97189: DOUBLE
97190: LD_INT 1
97192: DEC
97193: ST_TO_ADDR
97194: LD_INT 16
97196: PUSH
97197: FOR_TO
97198: IFFALSE 97397
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97200: LD_ADDR_VAR 0 3
97204: PUSH
97205: LD_INT 10
97207: PUSH
97208: LD_INT 20
97210: PUSH
97211: LD_INT 30
97213: PUSH
97214: LD_INT 40
97216: PUSH
97217: LD_INT 50
97219: PUSH
97220: LD_INT 60
97222: PUSH
97223: LD_INT 70
97225: PUSH
97226: LD_INT 80
97228: PUSH
97229: LD_INT 90
97231: PUSH
97232: LD_INT 100
97234: PUSH
97235: LD_INT 110
97237: PUSH
97238: LD_INT 120
97240: PUSH
97241: LD_INT 130
97243: PUSH
97244: LD_INT 140
97246: PUSH
97247: LD_INT 150
97249: PUSH
97250: EMPTY
97251: LIST
97252: LIST
97253: LIST
97254: LIST
97255: LIST
97256: LIST
97257: LIST
97258: LIST
97259: LIST
97260: LIST
97261: LIST
97262: LIST
97263: LIST
97264: LIST
97265: LIST
97266: PUSH
97267: LD_INT 1
97269: PPUSH
97270: LD_INT 15
97272: PPUSH
97273: CALL_OW 12
97277: ARRAY
97278: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
97279: LD_ADDR_VAR 0 4
97283: PUSH
97284: LD_INT 10
97286: PUSH
97287: LD_INT 20
97289: PUSH
97290: LD_INT 30
97292: PUSH
97293: LD_INT 40
97295: PUSH
97296: LD_INT 50
97298: PUSH
97299: LD_INT 60
97301: PUSH
97302: LD_INT 70
97304: PUSH
97305: LD_INT 80
97307: PUSH
97308: LD_INT 90
97310: PUSH
97311: LD_INT 100
97313: PUSH
97314: LD_INT 110
97316: PUSH
97317: LD_INT 120
97319: PUSH
97320: LD_INT 130
97322: PUSH
97323: LD_INT 140
97325: PUSH
97326: LD_INT 150
97328: PUSH
97329: EMPTY
97330: LIST
97331: LIST
97332: LIST
97333: LIST
97334: LIST
97335: LIST
97336: LIST
97337: LIST
97338: LIST
97339: LIST
97340: LIST
97341: LIST
97342: LIST
97343: LIST
97344: LIST
97345: PUSH
97346: LD_INT 1
97348: PPUSH
97349: LD_INT 15
97351: PPUSH
97352: CALL_OW 12
97356: ARRAY
97357: ST_TO_ADDR
// if ValidHex ( x , y ) then
97358: LD_VAR 0 3
97362: PPUSH
97363: LD_VAR 0 4
97367: PPUSH
97368: CALL_OW 488
97372: IFFALSE 97395
// begin result := [ x , y ] ;
97374: LD_ADDR_VAR 0 1
97378: PUSH
97379: LD_VAR 0 3
97383: PUSH
97384: LD_VAR 0 4
97388: PUSH
97389: EMPTY
97390: LIST
97391: LIST
97392: ST_TO_ADDR
// break ;
97393: GO 97397
// end ; end ;
97395: GO 97197
97397: POP
97398: POP
// if result then
97399: LD_VAR 0 1
97403: IFFALSE 97463
// begin ToLua ( playSibBomb() ) ;
97405: LD_STRING playSibBomb()
97407: PPUSH
97408: CALL_OW 559
// wait ( 0 0$14 ) ;
97412: LD_INT 490
97414: PPUSH
97415: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
97419: LD_VAR 0 1
97423: PUSH
97424: LD_INT 1
97426: ARRAY
97427: PPUSH
97428: LD_VAR 0 1
97432: PUSH
97433: LD_INT 2
97435: ARRAY
97436: PPUSH
97437: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
97441: LD_VAR 0 1
97445: PUSH
97446: LD_INT 1
97448: ARRAY
97449: PPUSH
97450: LD_VAR 0 1
97454: PUSH
97455: LD_INT 2
97457: ARRAY
97458: PPUSH
97459: CALL_OW 429
// end ; end ;
97463: LD_VAR 0 1
97467: RET
// every 0 0$1 trigger StreamModeActive and sReset do
97468: LD_EXP 98
97472: PUSH
97473: LD_EXP 120
97477: AND
97478: IFFALSE 97490
97480: GO 97482
97482: DISABLE
// YouLost (  ) ;
97483: LD_STRING 
97485: PPUSH
97486: CALL_OW 104
97490: END
// every 0 0$1 trigger StreamModeActive and sFog do
97491: LD_EXP 98
97495: PUSH
97496: LD_EXP 119
97500: AND
97501: IFFALSE 97515
97503: GO 97505
97505: DISABLE
// FogOff ( your_side ) ;
97506: LD_OWVAR 2
97510: PPUSH
97511: CALL_OW 344
97515: END
// every 0 0$1 trigger StreamModeActive and sSun do
97516: LD_EXP 98
97520: PUSH
97521: LD_EXP 121
97525: AND
97526: IFFALSE 97554
97528: GO 97530
97530: DISABLE
// begin solar_recharge_percent := 0 ;
97531: LD_ADDR_OWVAR 79
97535: PUSH
97536: LD_INT 0
97538: ST_TO_ADDR
// wait ( 5 5$00 ) ;
97539: LD_INT 10500
97541: PPUSH
97542: CALL_OW 67
// solar_recharge_percent := 100 ;
97546: LD_ADDR_OWVAR 79
97550: PUSH
97551: LD_INT 100
97553: ST_TO_ADDR
// end ;
97554: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
97555: LD_EXP 98
97559: PUSH
97560: LD_EXP 122
97564: AND
97565: IFFALSE 97804
97567: GO 97569
97569: DISABLE
97570: LD_INT 0
97572: PPUSH
97573: PPUSH
97574: PPUSH
// begin tmp := [ ] ;
97575: LD_ADDR_VAR 0 3
97579: PUSH
97580: EMPTY
97581: ST_TO_ADDR
// for i := 1 to 6 do
97582: LD_ADDR_VAR 0 1
97586: PUSH
97587: DOUBLE
97588: LD_INT 1
97590: DEC
97591: ST_TO_ADDR
97592: LD_INT 6
97594: PUSH
97595: FOR_TO
97596: IFFALSE 97701
// begin uc_nation := nation_nature ;
97598: LD_ADDR_OWVAR 21
97602: PUSH
97603: LD_INT 0
97605: ST_TO_ADDR
// uc_side := 0 ;
97606: LD_ADDR_OWVAR 20
97610: PUSH
97611: LD_INT 0
97613: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
97614: LD_ADDR_OWVAR 29
97618: PUSH
97619: LD_INT 12
97621: PUSH
97622: LD_INT 12
97624: PUSH
97625: EMPTY
97626: LIST
97627: LIST
97628: ST_TO_ADDR
// hc_agressivity := 20 ;
97629: LD_ADDR_OWVAR 35
97633: PUSH
97634: LD_INT 20
97636: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
97637: LD_ADDR_OWVAR 28
97641: PUSH
97642: LD_INT 17
97644: ST_TO_ADDR
// hc_gallery :=  ;
97645: LD_ADDR_OWVAR 33
97649: PUSH
97650: LD_STRING 
97652: ST_TO_ADDR
// hc_name :=  ;
97653: LD_ADDR_OWVAR 26
97657: PUSH
97658: LD_STRING 
97660: ST_TO_ADDR
// un := CreateHuman ;
97661: LD_ADDR_VAR 0 2
97665: PUSH
97666: CALL_OW 44
97670: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
97671: LD_VAR 0 2
97675: PPUSH
97676: LD_INT 1
97678: PPUSH
97679: CALL_OW 51
// tmp := tmp ^ un ;
97683: LD_ADDR_VAR 0 3
97687: PUSH
97688: LD_VAR 0 3
97692: PUSH
97693: LD_VAR 0 2
97697: ADD
97698: ST_TO_ADDR
// end ;
97699: GO 97595
97701: POP
97702: POP
// repeat wait ( 0 0$1 ) ;
97703: LD_INT 35
97705: PPUSH
97706: CALL_OW 67
// for un in tmp do
97710: LD_ADDR_VAR 0 2
97714: PUSH
97715: LD_VAR 0 3
97719: PUSH
97720: FOR_IN
97721: IFFALSE 97795
// begin if IsDead ( un ) then
97723: LD_VAR 0 2
97727: PPUSH
97728: CALL_OW 301
97732: IFFALSE 97752
// begin tmp := tmp diff un ;
97734: LD_ADDR_VAR 0 3
97738: PUSH
97739: LD_VAR 0 3
97743: PUSH
97744: LD_VAR 0 2
97748: DIFF
97749: ST_TO_ADDR
// continue ;
97750: GO 97720
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
97752: LD_VAR 0 2
97756: PPUSH
97757: LD_INT 3
97759: PUSH
97760: LD_INT 22
97762: PUSH
97763: LD_INT 0
97765: PUSH
97766: EMPTY
97767: LIST
97768: LIST
97769: PUSH
97770: EMPTY
97771: LIST
97772: LIST
97773: PPUSH
97774: CALL_OW 69
97778: PPUSH
97779: LD_VAR 0 2
97783: PPUSH
97784: CALL_OW 74
97788: PPUSH
97789: CALL_OW 115
// end ;
97793: GO 97720
97795: POP
97796: POP
// until not tmp ;
97797: LD_VAR 0 3
97801: NOT
97802: IFFALSE 97703
// end ;
97804: PPOPN 3
97806: END
// every 0 0$1 trigger StreamModeActive and sTroll do
97807: LD_EXP 98
97811: PUSH
97812: LD_EXP 123
97816: AND
97817: IFFALSE 97871
97819: GO 97821
97821: DISABLE
// begin ToLua ( displayTroll(); ) ;
97822: LD_STRING displayTroll();
97824: PPUSH
97825: CALL_OW 559
// wait ( 3 3$00 ) ;
97829: LD_INT 6300
97831: PPUSH
97832: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97836: LD_STRING hideTroll();
97838: PPUSH
97839: CALL_OW 559
// wait ( 1 1$00 ) ;
97843: LD_INT 2100
97845: PPUSH
97846: CALL_OW 67
// ToLua ( displayTroll(); ) ;
97850: LD_STRING displayTroll();
97852: PPUSH
97853: CALL_OW 559
// wait ( 1 1$00 ) ;
97857: LD_INT 2100
97859: PPUSH
97860: CALL_OW 67
// ToLua ( hideTroll(); ) ;
97864: LD_STRING hideTroll();
97866: PPUSH
97867: CALL_OW 559
// end ;
97871: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
97872: LD_EXP 98
97876: PUSH
97877: LD_EXP 124
97881: AND
97882: IFFALSE 97945
97884: GO 97886
97886: DISABLE
97887: LD_INT 0
97889: PPUSH
// begin p := 0 ;
97890: LD_ADDR_VAR 0 1
97894: PUSH
97895: LD_INT 0
97897: ST_TO_ADDR
// repeat game_speed := 1 ;
97898: LD_ADDR_OWVAR 65
97902: PUSH
97903: LD_INT 1
97905: ST_TO_ADDR
// wait ( 0 0$1 ) ;
97906: LD_INT 35
97908: PPUSH
97909: CALL_OW 67
// p := p + 1 ;
97913: LD_ADDR_VAR 0 1
97917: PUSH
97918: LD_VAR 0 1
97922: PUSH
97923: LD_INT 1
97925: PLUS
97926: ST_TO_ADDR
// until p >= 60 ;
97927: LD_VAR 0 1
97931: PUSH
97932: LD_INT 60
97934: GREATEREQUAL
97935: IFFALSE 97898
// game_speed := 4 ;
97937: LD_ADDR_OWVAR 65
97941: PUSH
97942: LD_INT 4
97944: ST_TO_ADDR
// end ;
97945: PPOPN 1
97947: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
97948: LD_EXP 98
97952: PUSH
97953: LD_EXP 125
97957: AND
97958: IFFALSE 98104
97960: GO 97962
97962: DISABLE
97963: LD_INT 0
97965: PPUSH
97966: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
97967: LD_ADDR_VAR 0 1
97971: PUSH
97972: LD_INT 22
97974: PUSH
97975: LD_OWVAR 2
97979: PUSH
97980: EMPTY
97981: LIST
97982: LIST
97983: PUSH
97984: LD_INT 2
97986: PUSH
97987: LD_INT 30
97989: PUSH
97990: LD_INT 0
97992: PUSH
97993: EMPTY
97994: LIST
97995: LIST
97996: PUSH
97997: LD_INT 30
97999: PUSH
98000: LD_INT 1
98002: PUSH
98003: EMPTY
98004: LIST
98005: LIST
98006: PUSH
98007: EMPTY
98008: LIST
98009: LIST
98010: LIST
98011: PUSH
98012: EMPTY
98013: LIST
98014: LIST
98015: PPUSH
98016: CALL_OW 69
98020: ST_TO_ADDR
// if not depot then
98021: LD_VAR 0 1
98025: NOT
98026: IFFALSE 98030
// exit ;
98028: GO 98104
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
98030: LD_ADDR_VAR 0 2
98034: PUSH
98035: LD_VAR 0 1
98039: PUSH
98040: LD_INT 1
98042: PPUSH
98043: LD_VAR 0 1
98047: PPUSH
98048: CALL_OW 12
98052: ARRAY
98053: PPUSH
98054: CALL_OW 274
98058: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
98059: LD_VAR 0 2
98063: PPUSH
98064: LD_INT 1
98066: PPUSH
98067: LD_INT 0
98069: PPUSH
98070: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
98074: LD_VAR 0 2
98078: PPUSH
98079: LD_INT 2
98081: PPUSH
98082: LD_INT 0
98084: PPUSH
98085: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
98089: LD_VAR 0 2
98093: PPUSH
98094: LD_INT 3
98096: PPUSH
98097: LD_INT 0
98099: PPUSH
98100: CALL_OW 277
// end ;
98104: PPOPN 2
98106: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
98107: LD_EXP 98
98111: PUSH
98112: LD_EXP 126
98116: AND
98117: IFFALSE 98214
98119: GO 98121
98121: DISABLE
98122: LD_INT 0
98124: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
98125: LD_ADDR_VAR 0 1
98129: PUSH
98130: LD_INT 22
98132: PUSH
98133: LD_OWVAR 2
98137: PUSH
98138: EMPTY
98139: LIST
98140: LIST
98141: PUSH
98142: LD_INT 21
98144: PUSH
98145: LD_INT 1
98147: PUSH
98148: EMPTY
98149: LIST
98150: LIST
98151: PUSH
98152: LD_INT 3
98154: PUSH
98155: LD_INT 23
98157: PUSH
98158: LD_INT 0
98160: PUSH
98161: EMPTY
98162: LIST
98163: LIST
98164: PUSH
98165: EMPTY
98166: LIST
98167: LIST
98168: PUSH
98169: EMPTY
98170: LIST
98171: LIST
98172: LIST
98173: PPUSH
98174: CALL_OW 69
98178: ST_TO_ADDR
// if not tmp then
98179: LD_VAR 0 1
98183: NOT
98184: IFFALSE 98188
// exit ;
98186: GO 98214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
98188: LD_VAR 0 1
98192: PUSH
98193: LD_INT 1
98195: PPUSH
98196: LD_VAR 0 1
98200: PPUSH
98201: CALL_OW 12
98205: ARRAY
98206: PPUSH
98207: LD_INT 200
98209: PPUSH
98210: CALL_OW 234
// end ;
98214: PPOPN 1
98216: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
98217: LD_EXP 98
98221: PUSH
98222: LD_EXP 127
98226: AND
98227: IFFALSE 98306
98229: GO 98231
98231: DISABLE
98232: LD_INT 0
98234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
98235: LD_ADDR_VAR 0 1
98239: PUSH
98240: LD_INT 22
98242: PUSH
98243: LD_OWVAR 2
98247: PUSH
98248: EMPTY
98249: LIST
98250: LIST
98251: PUSH
98252: LD_INT 21
98254: PUSH
98255: LD_INT 2
98257: PUSH
98258: EMPTY
98259: LIST
98260: LIST
98261: PUSH
98262: EMPTY
98263: LIST
98264: LIST
98265: PPUSH
98266: CALL_OW 69
98270: ST_TO_ADDR
// if not tmp then
98271: LD_VAR 0 1
98275: NOT
98276: IFFALSE 98280
// exit ;
98278: GO 98306
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
98280: LD_VAR 0 1
98284: PUSH
98285: LD_INT 1
98287: PPUSH
98288: LD_VAR 0 1
98292: PPUSH
98293: CALL_OW 12
98297: ARRAY
98298: PPUSH
98299: LD_INT 60
98301: PPUSH
98302: CALL_OW 234
// end ;
98306: PPOPN 1
98308: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
98309: LD_EXP 98
98313: PUSH
98314: LD_EXP 128
98318: AND
98319: IFFALSE 98418
98321: GO 98323
98323: DISABLE
98324: LD_INT 0
98326: PPUSH
98327: PPUSH
// begin enable ;
98328: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
98329: LD_ADDR_VAR 0 1
98333: PUSH
98334: LD_INT 22
98336: PUSH
98337: LD_OWVAR 2
98341: PUSH
98342: EMPTY
98343: LIST
98344: LIST
98345: PUSH
98346: LD_INT 61
98348: PUSH
98349: EMPTY
98350: LIST
98351: PUSH
98352: LD_INT 33
98354: PUSH
98355: LD_INT 2
98357: PUSH
98358: EMPTY
98359: LIST
98360: LIST
98361: PUSH
98362: EMPTY
98363: LIST
98364: LIST
98365: LIST
98366: PPUSH
98367: CALL_OW 69
98371: ST_TO_ADDR
// if not tmp then
98372: LD_VAR 0 1
98376: NOT
98377: IFFALSE 98381
// exit ;
98379: GO 98418
// for i in tmp do
98381: LD_ADDR_VAR 0 2
98385: PUSH
98386: LD_VAR 0 1
98390: PUSH
98391: FOR_IN
98392: IFFALSE 98416
// if IsControledBy ( i ) then
98394: LD_VAR 0 2
98398: PPUSH
98399: CALL_OW 312
98403: IFFALSE 98414
// ComUnlink ( i ) ;
98405: LD_VAR 0 2
98409: PPUSH
98410: CALL_OW 136
98414: GO 98391
98416: POP
98417: POP
// end ;
98418: PPOPN 2
98420: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
98421: LD_EXP 98
98425: PUSH
98426: LD_EXP 129
98430: AND
98431: IFFALSE 98571
98433: GO 98435
98435: DISABLE
98436: LD_INT 0
98438: PPUSH
98439: PPUSH
// begin ToLua ( displayPowell(); ) ;
98440: LD_STRING displayPowell();
98442: PPUSH
98443: CALL_OW 559
// uc_side := 0 ;
98447: LD_ADDR_OWVAR 20
98451: PUSH
98452: LD_INT 0
98454: ST_TO_ADDR
// uc_nation := 2 ;
98455: LD_ADDR_OWVAR 21
98459: PUSH
98460: LD_INT 2
98462: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
98463: LD_ADDR_OWVAR 37
98467: PUSH
98468: LD_INT 14
98470: ST_TO_ADDR
// vc_engine := engine_siberite ;
98471: LD_ADDR_OWVAR 39
98475: PUSH
98476: LD_INT 3
98478: ST_TO_ADDR
// vc_control := control_apeman ;
98479: LD_ADDR_OWVAR 38
98483: PUSH
98484: LD_INT 5
98486: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
98487: LD_ADDR_OWVAR 40
98491: PUSH
98492: LD_INT 29
98494: ST_TO_ADDR
// un := CreateVehicle ;
98495: LD_ADDR_VAR 0 2
98499: PUSH
98500: CALL_OW 45
98504: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
98505: LD_VAR 0 2
98509: PPUSH
98510: LD_INT 1
98512: PPUSH
98513: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
98517: LD_INT 35
98519: PPUSH
98520: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
98524: LD_VAR 0 2
98528: PPUSH
98529: LD_INT 22
98531: PUSH
98532: LD_OWVAR 2
98536: PUSH
98537: EMPTY
98538: LIST
98539: LIST
98540: PPUSH
98541: CALL_OW 69
98545: PPUSH
98546: LD_VAR 0 2
98550: PPUSH
98551: CALL_OW 74
98555: PPUSH
98556: CALL_OW 115
// until IsDead ( un ) ;
98560: LD_VAR 0 2
98564: PPUSH
98565: CALL_OW 301
98569: IFFALSE 98517
// end ;
98571: PPOPN 2
98573: END
// every 0 0$1 trigger StreamModeActive and sStu do
98574: LD_EXP 98
98578: PUSH
98579: LD_EXP 137
98583: AND
98584: IFFALSE 98600
98586: GO 98588
98588: DISABLE
// begin ToLua ( displayStucuk(); ) ;
98589: LD_STRING displayStucuk();
98591: PPUSH
98592: CALL_OW 559
// ResetFog ;
98596: CALL_OW 335
// end ;
98600: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
98601: LD_EXP 98
98605: PUSH
98606: LD_EXP 130
98610: AND
98611: IFFALSE 98752
98613: GO 98615
98615: DISABLE
98616: LD_INT 0
98618: PPUSH
98619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98620: LD_ADDR_VAR 0 2
98624: PUSH
98625: LD_INT 22
98627: PUSH
98628: LD_OWVAR 2
98632: PUSH
98633: EMPTY
98634: LIST
98635: LIST
98636: PUSH
98637: LD_INT 21
98639: PUSH
98640: LD_INT 1
98642: PUSH
98643: EMPTY
98644: LIST
98645: LIST
98646: PUSH
98647: EMPTY
98648: LIST
98649: LIST
98650: PPUSH
98651: CALL_OW 69
98655: ST_TO_ADDR
// if not tmp then
98656: LD_VAR 0 2
98660: NOT
98661: IFFALSE 98665
// exit ;
98663: GO 98752
// un := tmp [ rand ( 1 , tmp ) ] ;
98665: LD_ADDR_VAR 0 1
98669: PUSH
98670: LD_VAR 0 2
98674: PUSH
98675: LD_INT 1
98677: PPUSH
98678: LD_VAR 0 2
98682: PPUSH
98683: CALL_OW 12
98687: ARRAY
98688: ST_TO_ADDR
// SetSide ( un , 0 ) ;
98689: LD_VAR 0 1
98693: PPUSH
98694: LD_INT 0
98696: PPUSH
98697: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
98701: LD_VAR 0 1
98705: PPUSH
98706: LD_OWVAR 3
98710: PUSH
98711: LD_VAR 0 1
98715: DIFF
98716: PPUSH
98717: LD_VAR 0 1
98721: PPUSH
98722: CALL_OW 74
98726: PPUSH
98727: CALL_OW 115
// wait ( 0 0$20 ) ;
98731: LD_INT 700
98733: PPUSH
98734: CALL_OW 67
// SetSide ( un , your_side ) ;
98738: LD_VAR 0 1
98742: PPUSH
98743: LD_OWVAR 2
98747: PPUSH
98748: CALL_OW 235
// end ;
98752: PPOPN 2
98754: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
98755: LD_EXP 98
98759: PUSH
98760: LD_EXP 131
98764: AND
98765: IFFALSE 98871
98767: GO 98769
98769: DISABLE
98770: LD_INT 0
98772: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
98773: LD_ADDR_VAR 0 1
98777: PUSH
98778: LD_INT 22
98780: PUSH
98781: LD_OWVAR 2
98785: PUSH
98786: EMPTY
98787: LIST
98788: LIST
98789: PUSH
98790: LD_INT 2
98792: PUSH
98793: LD_INT 30
98795: PUSH
98796: LD_INT 0
98798: PUSH
98799: EMPTY
98800: LIST
98801: LIST
98802: PUSH
98803: LD_INT 30
98805: PUSH
98806: LD_INT 1
98808: PUSH
98809: EMPTY
98810: LIST
98811: LIST
98812: PUSH
98813: EMPTY
98814: LIST
98815: LIST
98816: LIST
98817: PUSH
98818: EMPTY
98819: LIST
98820: LIST
98821: PPUSH
98822: CALL_OW 69
98826: ST_TO_ADDR
// if not depot then
98827: LD_VAR 0 1
98831: NOT
98832: IFFALSE 98836
// exit ;
98834: GO 98871
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
98836: LD_VAR 0 1
98840: PUSH
98841: LD_INT 1
98843: ARRAY
98844: PPUSH
98845: CALL_OW 250
98849: PPUSH
98850: LD_VAR 0 1
98854: PUSH
98855: LD_INT 1
98857: ARRAY
98858: PPUSH
98859: CALL_OW 251
98863: PPUSH
98864: LD_INT 70
98866: PPUSH
98867: CALL_OW 495
// end ;
98871: PPOPN 1
98873: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
98874: LD_EXP 98
98878: PUSH
98879: LD_EXP 132
98883: AND
98884: IFFALSE 99095
98886: GO 98888
98888: DISABLE
98889: LD_INT 0
98891: PPUSH
98892: PPUSH
98893: PPUSH
98894: PPUSH
98895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
98896: LD_ADDR_VAR 0 5
98900: PUSH
98901: LD_INT 22
98903: PUSH
98904: LD_OWVAR 2
98908: PUSH
98909: EMPTY
98910: LIST
98911: LIST
98912: PUSH
98913: LD_INT 21
98915: PUSH
98916: LD_INT 1
98918: PUSH
98919: EMPTY
98920: LIST
98921: LIST
98922: PUSH
98923: EMPTY
98924: LIST
98925: LIST
98926: PPUSH
98927: CALL_OW 69
98931: ST_TO_ADDR
// if not tmp then
98932: LD_VAR 0 5
98936: NOT
98937: IFFALSE 98941
// exit ;
98939: GO 99095
// for i in tmp do
98941: LD_ADDR_VAR 0 1
98945: PUSH
98946: LD_VAR 0 5
98950: PUSH
98951: FOR_IN
98952: IFFALSE 99093
// begin d := rand ( 0 , 5 ) ;
98954: LD_ADDR_VAR 0 4
98958: PUSH
98959: LD_INT 0
98961: PPUSH
98962: LD_INT 5
98964: PPUSH
98965: CALL_OW 12
98969: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
98970: LD_ADDR_VAR 0 2
98974: PUSH
98975: LD_VAR 0 1
98979: PPUSH
98980: CALL_OW 250
98984: PPUSH
98985: LD_VAR 0 4
98989: PPUSH
98990: LD_INT 3
98992: PPUSH
98993: LD_INT 12
98995: PPUSH
98996: CALL_OW 12
99000: PPUSH
99001: CALL_OW 272
99005: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
99006: LD_ADDR_VAR 0 3
99010: PUSH
99011: LD_VAR 0 1
99015: PPUSH
99016: CALL_OW 251
99020: PPUSH
99021: LD_VAR 0 4
99025: PPUSH
99026: LD_INT 3
99028: PPUSH
99029: LD_INT 12
99031: PPUSH
99032: CALL_OW 12
99036: PPUSH
99037: CALL_OW 273
99041: ST_TO_ADDR
// if ValidHex ( x , y ) then
99042: LD_VAR 0 2
99046: PPUSH
99047: LD_VAR 0 3
99051: PPUSH
99052: CALL_OW 488
99056: IFFALSE 99091
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
99058: LD_VAR 0 1
99062: PPUSH
99063: LD_VAR 0 2
99067: PPUSH
99068: LD_VAR 0 3
99072: PPUSH
99073: LD_INT 3
99075: PPUSH
99076: LD_INT 6
99078: PPUSH
99079: CALL_OW 12
99083: PPUSH
99084: LD_INT 1
99086: PPUSH
99087: CALL_OW 483
// end ;
99091: GO 98951
99093: POP
99094: POP
// end ;
99095: PPOPN 5
99097: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
99098: LD_EXP 98
99102: PUSH
99103: LD_EXP 133
99107: AND
99108: IFFALSE 99202
99110: GO 99112
99112: DISABLE
99113: LD_INT 0
99115: PPUSH
99116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
99117: LD_ADDR_VAR 0 2
99121: PUSH
99122: LD_INT 22
99124: PUSH
99125: LD_OWVAR 2
99129: PUSH
99130: EMPTY
99131: LIST
99132: LIST
99133: PUSH
99134: LD_INT 32
99136: PUSH
99137: LD_INT 1
99139: PUSH
99140: EMPTY
99141: LIST
99142: LIST
99143: PUSH
99144: LD_INT 21
99146: PUSH
99147: LD_INT 2
99149: PUSH
99150: EMPTY
99151: LIST
99152: LIST
99153: PUSH
99154: EMPTY
99155: LIST
99156: LIST
99157: LIST
99158: PPUSH
99159: CALL_OW 69
99163: ST_TO_ADDR
// if not tmp then
99164: LD_VAR 0 2
99168: NOT
99169: IFFALSE 99173
// exit ;
99171: GO 99202
// for i in tmp do
99173: LD_ADDR_VAR 0 1
99177: PUSH
99178: LD_VAR 0 2
99182: PUSH
99183: FOR_IN
99184: IFFALSE 99200
// SetFuel ( i , 0 ) ;
99186: LD_VAR 0 1
99190: PPUSH
99191: LD_INT 0
99193: PPUSH
99194: CALL_OW 240
99198: GO 99183
99200: POP
99201: POP
// end ;
99202: PPOPN 2
99204: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
99205: LD_EXP 98
99209: PUSH
99210: LD_EXP 134
99214: AND
99215: IFFALSE 99281
99217: GO 99219
99219: DISABLE
99220: LD_INT 0
99222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
99223: LD_ADDR_VAR 0 1
99227: PUSH
99228: LD_INT 22
99230: PUSH
99231: LD_OWVAR 2
99235: PUSH
99236: EMPTY
99237: LIST
99238: LIST
99239: PUSH
99240: LD_INT 30
99242: PUSH
99243: LD_INT 29
99245: PUSH
99246: EMPTY
99247: LIST
99248: LIST
99249: PUSH
99250: EMPTY
99251: LIST
99252: LIST
99253: PPUSH
99254: CALL_OW 69
99258: ST_TO_ADDR
// if not tmp then
99259: LD_VAR 0 1
99263: NOT
99264: IFFALSE 99268
// exit ;
99266: GO 99281
// DestroyUnit ( tmp [ 1 ] ) ;
99268: LD_VAR 0 1
99272: PUSH
99273: LD_INT 1
99275: ARRAY
99276: PPUSH
99277: CALL_OW 65
// end ;
99281: PPOPN 1
99283: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
99284: LD_EXP 98
99288: PUSH
99289: LD_EXP 136
99293: AND
99294: IFFALSE 99423
99296: GO 99298
99298: DISABLE
99299: LD_INT 0
99301: PPUSH
// begin uc_side := 0 ;
99302: LD_ADDR_OWVAR 20
99306: PUSH
99307: LD_INT 0
99309: ST_TO_ADDR
// uc_nation := nation_arabian ;
99310: LD_ADDR_OWVAR 21
99314: PUSH
99315: LD_INT 2
99317: ST_TO_ADDR
// hc_gallery :=  ;
99318: LD_ADDR_OWVAR 33
99322: PUSH
99323: LD_STRING 
99325: ST_TO_ADDR
// hc_name :=  ;
99326: LD_ADDR_OWVAR 26
99330: PUSH
99331: LD_STRING 
99333: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
99334: LD_INT 1
99336: PPUSH
99337: LD_INT 11
99339: PPUSH
99340: LD_INT 10
99342: PPUSH
99343: CALL_OW 380
// un := CreateHuman ;
99347: LD_ADDR_VAR 0 1
99351: PUSH
99352: CALL_OW 44
99356: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
99357: LD_VAR 0 1
99361: PPUSH
99362: LD_INT 1
99364: PPUSH
99365: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
99369: LD_INT 35
99371: PPUSH
99372: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
99376: LD_VAR 0 1
99380: PPUSH
99381: LD_INT 22
99383: PUSH
99384: LD_OWVAR 2
99388: PUSH
99389: EMPTY
99390: LIST
99391: LIST
99392: PPUSH
99393: CALL_OW 69
99397: PPUSH
99398: LD_VAR 0 1
99402: PPUSH
99403: CALL_OW 74
99407: PPUSH
99408: CALL_OW 115
// until IsDead ( un ) ;
99412: LD_VAR 0 1
99416: PPUSH
99417: CALL_OW 301
99421: IFFALSE 99369
// end ;
99423: PPOPN 1
99425: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
99426: LD_EXP 98
99430: PUSH
99431: LD_EXP 138
99435: AND
99436: IFFALSE 99448
99438: GO 99440
99440: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
99441: LD_STRING earthquake(getX(game), 0, 32)
99443: PPUSH
99444: CALL_OW 559
99448: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
99449: LD_EXP 98
99453: PUSH
99454: LD_EXP 139
99458: AND
99459: IFFALSE 99550
99461: GO 99463
99463: DISABLE
99464: LD_INT 0
99466: PPUSH
// begin enable ;
99467: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
99468: LD_ADDR_VAR 0 1
99472: PUSH
99473: LD_INT 22
99475: PUSH
99476: LD_OWVAR 2
99480: PUSH
99481: EMPTY
99482: LIST
99483: LIST
99484: PUSH
99485: LD_INT 21
99487: PUSH
99488: LD_INT 2
99490: PUSH
99491: EMPTY
99492: LIST
99493: LIST
99494: PUSH
99495: LD_INT 33
99497: PUSH
99498: LD_INT 3
99500: PUSH
99501: EMPTY
99502: LIST
99503: LIST
99504: PUSH
99505: EMPTY
99506: LIST
99507: LIST
99508: LIST
99509: PPUSH
99510: CALL_OW 69
99514: ST_TO_ADDR
// if not tmp then
99515: LD_VAR 0 1
99519: NOT
99520: IFFALSE 99524
// exit ;
99522: GO 99550
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
99524: LD_VAR 0 1
99528: PUSH
99529: LD_INT 1
99531: PPUSH
99532: LD_VAR 0 1
99536: PPUSH
99537: CALL_OW 12
99541: ARRAY
99542: PPUSH
99543: LD_INT 1
99545: PPUSH
99546: CALL_OW 234
// end ;
99550: PPOPN 1
99552: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
99553: LD_EXP 98
99557: PUSH
99558: LD_EXP 140
99562: AND
99563: IFFALSE 99704
99565: GO 99567
99567: DISABLE
99568: LD_INT 0
99570: PPUSH
99571: PPUSH
99572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99573: LD_ADDR_VAR 0 3
99577: PUSH
99578: LD_INT 22
99580: PUSH
99581: LD_OWVAR 2
99585: PUSH
99586: EMPTY
99587: LIST
99588: LIST
99589: PUSH
99590: LD_INT 25
99592: PUSH
99593: LD_INT 1
99595: PUSH
99596: EMPTY
99597: LIST
99598: LIST
99599: PUSH
99600: EMPTY
99601: LIST
99602: LIST
99603: PPUSH
99604: CALL_OW 69
99608: ST_TO_ADDR
// if not tmp then
99609: LD_VAR 0 3
99613: NOT
99614: IFFALSE 99618
// exit ;
99616: GO 99704
// un := tmp [ rand ( 1 , tmp ) ] ;
99618: LD_ADDR_VAR 0 2
99622: PUSH
99623: LD_VAR 0 3
99627: PUSH
99628: LD_INT 1
99630: PPUSH
99631: LD_VAR 0 3
99635: PPUSH
99636: CALL_OW 12
99640: ARRAY
99641: ST_TO_ADDR
// if Crawls ( un ) then
99642: LD_VAR 0 2
99646: PPUSH
99647: CALL_OW 318
99651: IFFALSE 99662
// ComWalk ( un ) ;
99653: LD_VAR 0 2
99657: PPUSH
99658: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
99662: LD_VAR 0 2
99666: PPUSH
99667: LD_INT 9
99669: PPUSH
99670: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
99674: LD_INT 28
99676: PPUSH
99677: LD_OWVAR 2
99681: PPUSH
99682: LD_INT 2
99684: PPUSH
99685: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
99689: LD_INT 29
99691: PPUSH
99692: LD_OWVAR 2
99696: PPUSH
99697: LD_INT 2
99699: PPUSH
99700: CALL_OW 322
// end ;
99704: PPOPN 3
99706: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
99707: LD_EXP 98
99711: PUSH
99712: LD_EXP 141
99716: AND
99717: IFFALSE 99828
99719: GO 99721
99721: DISABLE
99722: LD_INT 0
99724: PPUSH
99725: PPUSH
99726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
99727: LD_ADDR_VAR 0 3
99731: PUSH
99732: LD_INT 22
99734: PUSH
99735: LD_OWVAR 2
99739: PUSH
99740: EMPTY
99741: LIST
99742: LIST
99743: PUSH
99744: LD_INT 25
99746: PUSH
99747: LD_INT 1
99749: PUSH
99750: EMPTY
99751: LIST
99752: LIST
99753: PUSH
99754: EMPTY
99755: LIST
99756: LIST
99757: PPUSH
99758: CALL_OW 69
99762: ST_TO_ADDR
// if not tmp then
99763: LD_VAR 0 3
99767: NOT
99768: IFFALSE 99772
// exit ;
99770: GO 99828
// un := tmp [ rand ( 1 , tmp ) ] ;
99772: LD_ADDR_VAR 0 2
99776: PUSH
99777: LD_VAR 0 3
99781: PUSH
99782: LD_INT 1
99784: PPUSH
99785: LD_VAR 0 3
99789: PPUSH
99790: CALL_OW 12
99794: ARRAY
99795: ST_TO_ADDR
// if Crawls ( un ) then
99796: LD_VAR 0 2
99800: PPUSH
99801: CALL_OW 318
99805: IFFALSE 99816
// ComWalk ( un ) ;
99807: LD_VAR 0 2
99811: PPUSH
99812: CALL_OW 138
// SetClass ( un , class_mortar ) ;
99816: LD_VAR 0 2
99820: PPUSH
99821: LD_INT 8
99823: PPUSH
99824: CALL_OW 336
// end ;
99828: PPOPN 3
99830: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
99831: LD_EXP 98
99835: PUSH
99836: LD_EXP 142
99840: AND
99841: IFFALSE 99985
99843: GO 99845
99845: DISABLE
99846: LD_INT 0
99848: PPUSH
99849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
99850: LD_ADDR_VAR 0 2
99854: PUSH
99855: LD_INT 22
99857: PUSH
99858: LD_OWVAR 2
99862: PUSH
99863: EMPTY
99864: LIST
99865: LIST
99866: PUSH
99867: LD_INT 21
99869: PUSH
99870: LD_INT 2
99872: PUSH
99873: EMPTY
99874: LIST
99875: LIST
99876: PUSH
99877: LD_INT 2
99879: PUSH
99880: LD_INT 34
99882: PUSH
99883: LD_INT 12
99885: PUSH
99886: EMPTY
99887: LIST
99888: LIST
99889: PUSH
99890: LD_INT 34
99892: PUSH
99893: LD_INT 51
99895: PUSH
99896: EMPTY
99897: LIST
99898: LIST
99899: PUSH
99900: LD_INT 34
99902: PUSH
99903: LD_INT 32
99905: PUSH
99906: EMPTY
99907: LIST
99908: LIST
99909: PUSH
99910: EMPTY
99911: LIST
99912: LIST
99913: LIST
99914: LIST
99915: PUSH
99916: EMPTY
99917: LIST
99918: LIST
99919: LIST
99920: PPUSH
99921: CALL_OW 69
99925: ST_TO_ADDR
// if not tmp then
99926: LD_VAR 0 2
99930: NOT
99931: IFFALSE 99935
// exit ;
99933: GO 99985
// for i in tmp do
99935: LD_ADDR_VAR 0 1
99939: PUSH
99940: LD_VAR 0 2
99944: PUSH
99945: FOR_IN
99946: IFFALSE 99983
// if GetCargo ( i , mat_artifact ) = 0 then
99948: LD_VAR 0 1
99952: PPUSH
99953: LD_INT 4
99955: PPUSH
99956: CALL_OW 289
99960: PUSH
99961: LD_INT 0
99963: EQUAL
99964: IFFALSE 99981
// SetCargo ( i , mat_siberit , 100 ) ;
99966: LD_VAR 0 1
99970: PPUSH
99971: LD_INT 3
99973: PPUSH
99974: LD_INT 100
99976: PPUSH
99977: CALL_OW 290
99981: GO 99945
99983: POP
99984: POP
// end ;
99985: PPOPN 2
99987: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
99988: LD_EXP 98
99992: PUSH
99993: LD_EXP 143
99997: AND
99998: IFFALSE 100151
100000: GO 100002
100002: DISABLE
100003: LD_INT 0
100005: PPUSH
100006: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
100007: LD_ADDR_VAR 0 2
100011: PUSH
100012: LD_INT 22
100014: PUSH
100015: LD_OWVAR 2
100019: PUSH
100020: EMPTY
100021: LIST
100022: LIST
100023: PPUSH
100024: CALL_OW 69
100028: ST_TO_ADDR
// if not tmp then
100029: LD_VAR 0 2
100033: NOT
100034: IFFALSE 100038
// exit ;
100036: GO 100151
// for i := 1 to 2 do
100038: LD_ADDR_VAR 0 1
100042: PUSH
100043: DOUBLE
100044: LD_INT 1
100046: DEC
100047: ST_TO_ADDR
100048: LD_INT 2
100050: PUSH
100051: FOR_TO
100052: IFFALSE 100149
// begin uc_side := your_side ;
100054: LD_ADDR_OWVAR 20
100058: PUSH
100059: LD_OWVAR 2
100063: ST_TO_ADDR
// uc_nation := nation_american ;
100064: LD_ADDR_OWVAR 21
100068: PUSH
100069: LD_INT 1
100071: ST_TO_ADDR
// vc_chassis := us_morphling ;
100072: LD_ADDR_OWVAR 37
100076: PUSH
100077: LD_INT 5
100079: ST_TO_ADDR
// vc_engine := engine_siberite ;
100080: LD_ADDR_OWVAR 39
100084: PUSH
100085: LD_INT 3
100087: ST_TO_ADDR
// vc_control := control_computer ;
100088: LD_ADDR_OWVAR 38
100092: PUSH
100093: LD_INT 3
100095: ST_TO_ADDR
// vc_weapon := us_double_laser ;
100096: LD_ADDR_OWVAR 40
100100: PUSH
100101: LD_INT 10
100103: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
100104: CALL_OW 45
100108: PPUSH
100109: LD_VAR 0 2
100113: PUSH
100114: LD_INT 1
100116: ARRAY
100117: PPUSH
100118: CALL_OW 250
100122: PPUSH
100123: LD_VAR 0 2
100127: PUSH
100128: LD_INT 1
100130: ARRAY
100131: PPUSH
100132: CALL_OW 251
100136: PPUSH
100137: LD_INT 12
100139: PPUSH
100140: LD_INT 1
100142: PPUSH
100143: CALL_OW 50
// end ;
100147: GO 100051
100149: POP
100150: POP
// end ;
100151: PPOPN 2
100153: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
100154: LD_EXP 98
100158: PUSH
100159: LD_EXP 144
100163: AND
100164: IFFALSE 100386
100166: GO 100168
100168: DISABLE
100169: LD_INT 0
100171: PPUSH
100172: PPUSH
100173: PPUSH
100174: PPUSH
100175: PPUSH
100176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
100177: LD_ADDR_VAR 0 6
100181: PUSH
100182: LD_INT 22
100184: PUSH
100185: LD_OWVAR 2
100189: PUSH
100190: EMPTY
100191: LIST
100192: LIST
100193: PUSH
100194: LD_INT 21
100196: PUSH
100197: LD_INT 1
100199: PUSH
100200: EMPTY
100201: LIST
100202: LIST
100203: PUSH
100204: LD_INT 3
100206: PUSH
100207: LD_INT 23
100209: PUSH
100210: LD_INT 0
100212: PUSH
100213: EMPTY
100214: LIST
100215: LIST
100216: PUSH
100217: EMPTY
100218: LIST
100219: LIST
100220: PUSH
100221: EMPTY
100222: LIST
100223: LIST
100224: LIST
100225: PPUSH
100226: CALL_OW 69
100230: ST_TO_ADDR
// if not tmp then
100231: LD_VAR 0 6
100235: NOT
100236: IFFALSE 100240
// exit ;
100238: GO 100386
// s1 := rand ( 1 , 4 ) ;
100240: LD_ADDR_VAR 0 2
100244: PUSH
100245: LD_INT 1
100247: PPUSH
100248: LD_INT 4
100250: PPUSH
100251: CALL_OW 12
100255: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
100256: LD_ADDR_VAR 0 4
100260: PUSH
100261: LD_VAR 0 6
100265: PUSH
100266: LD_INT 1
100268: ARRAY
100269: PPUSH
100270: LD_VAR 0 2
100274: PPUSH
100275: CALL_OW 259
100279: ST_TO_ADDR
// if s1 = 1 then
100280: LD_VAR 0 2
100284: PUSH
100285: LD_INT 1
100287: EQUAL
100288: IFFALSE 100308
// s2 := rand ( 2 , 4 ) else
100290: LD_ADDR_VAR 0 3
100294: PUSH
100295: LD_INT 2
100297: PPUSH
100298: LD_INT 4
100300: PPUSH
100301: CALL_OW 12
100305: ST_TO_ADDR
100306: GO 100316
// s2 := 1 ;
100308: LD_ADDR_VAR 0 3
100312: PUSH
100313: LD_INT 1
100315: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
100316: LD_ADDR_VAR 0 5
100320: PUSH
100321: LD_VAR 0 6
100325: PUSH
100326: LD_INT 1
100328: ARRAY
100329: PPUSH
100330: LD_VAR 0 3
100334: PPUSH
100335: CALL_OW 259
100339: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
100340: LD_VAR 0 6
100344: PUSH
100345: LD_INT 1
100347: ARRAY
100348: PPUSH
100349: LD_VAR 0 2
100353: PPUSH
100354: LD_VAR 0 5
100358: PPUSH
100359: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
100363: LD_VAR 0 6
100367: PUSH
100368: LD_INT 1
100370: ARRAY
100371: PPUSH
100372: LD_VAR 0 3
100376: PPUSH
100377: LD_VAR 0 4
100381: PPUSH
100382: CALL_OW 237
// end ;
100386: PPOPN 6
100388: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
100389: LD_EXP 98
100393: PUSH
100394: LD_EXP 145
100398: AND
100399: IFFALSE 100478
100401: GO 100403
100403: DISABLE
100404: LD_INT 0
100406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
100407: LD_ADDR_VAR 0 1
100411: PUSH
100412: LD_INT 22
100414: PUSH
100415: LD_OWVAR 2
100419: PUSH
100420: EMPTY
100421: LIST
100422: LIST
100423: PUSH
100424: LD_INT 30
100426: PUSH
100427: LD_INT 3
100429: PUSH
100430: EMPTY
100431: LIST
100432: LIST
100433: PUSH
100434: EMPTY
100435: LIST
100436: LIST
100437: PPUSH
100438: CALL_OW 69
100442: ST_TO_ADDR
// if not tmp then
100443: LD_VAR 0 1
100447: NOT
100448: IFFALSE 100452
// exit ;
100450: GO 100478
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
100452: LD_VAR 0 1
100456: PUSH
100457: LD_INT 1
100459: PPUSH
100460: LD_VAR 0 1
100464: PPUSH
100465: CALL_OW 12
100469: ARRAY
100470: PPUSH
100471: LD_INT 1
100473: PPUSH
100474: CALL_OW 234
// end ;
100478: PPOPN 1
100480: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
100481: LD_EXP 98
100485: PUSH
100486: LD_EXP 146
100490: AND
100491: IFFALSE 100603
100493: GO 100495
100495: DISABLE
100496: LD_INT 0
100498: PPUSH
100499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
100500: LD_ADDR_VAR 0 2
100504: PUSH
100505: LD_INT 22
100507: PUSH
100508: LD_OWVAR 2
100512: PUSH
100513: EMPTY
100514: LIST
100515: LIST
100516: PUSH
100517: LD_INT 2
100519: PUSH
100520: LD_INT 30
100522: PUSH
100523: LD_INT 27
100525: PUSH
100526: EMPTY
100527: LIST
100528: LIST
100529: PUSH
100530: LD_INT 30
100532: PUSH
100533: LD_INT 26
100535: PUSH
100536: EMPTY
100537: LIST
100538: LIST
100539: PUSH
100540: LD_INT 30
100542: PUSH
100543: LD_INT 28
100545: PUSH
100546: EMPTY
100547: LIST
100548: LIST
100549: PUSH
100550: EMPTY
100551: LIST
100552: LIST
100553: LIST
100554: LIST
100555: PUSH
100556: EMPTY
100557: LIST
100558: LIST
100559: PPUSH
100560: CALL_OW 69
100564: ST_TO_ADDR
// if not tmp then
100565: LD_VAR 0 2
100569: NOT
100570: IFFALSE 100574
// exit ;
100572: GO 100603
// for i in tmp do
100574: LD_ADDR_VAR 0 1
100578: PUSH
100579: LD_VAR 0 2
100583: PUSH
100584: FOR_IN
100585: IFFALSE 100601
// SetLives ( i , 1 ) ;
100587: LD_VAR 0 1
100591: PPUSH
100592: LD_INT 1
100594: PPUSH
100595: CALL_OW 234
100599: GO 100584
100601: POP
100602: POP
// end ;
100603: PPOPN 2
100605: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
100606: LD_EXP 98
100610: PUSH
100611: LD_EXP 147
100615: AND
100616: IFFALSE 100890
100618: GO 100620
100620: DISABLE
100621: LD_INT 0
100623: PPUSH
100624: PPUSH
100625: PPUSH
// begin i := rand ( 1 , 7 ) ;
100626: LD_ADDR_VAR 0 1
100630: PUSH
100631: LD_INT 1
100633: PPUSH
100634: LD_INT 7
100636: PPUSH
100637: CALL_OW 12
100641: ST_TO_ADDR
// case i of 1 :
100642: LD_VAR 0 1
100646: PUSH
100647: LD_INT 1
100649: DOUBLE
100650: EQUAL
100651: IFTRUE 100655
100653: GO 100665
100655: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
100656: LD_STRING earthquake(getX(game), 0, 32)
100658: PPUSH
100659: CALL_OW 559
100663: GO 100890
100665: LD_INT 2
100667: DOUBLE
100668: EQUAL
100669: IFTRUE 100673
100671: GO 100687
100673: POP
// begin ToLua ( displayStucuk(); ) ;
100674: LD_STRING displayStucuk();
100676: PPUSH
100677: CALL_OW 559
// ResetFog ;
100681: CALL_OW 335
// end ; 3 :
100685: GO 100890
100687: LD_INT 3
100689: DOUBLE
100690: EQUAL
100691: IFTRUE 100695
100693: GO 100799
100695: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
100696: LD_ADDR_VAR 0 2
100700: PUSH
100701: LD_INT 22
100703: PUSH
100704: LD_OWVAR 2
100708: PUSH
100709: EMPTY
100710: LIST
100711: LIST
100712: PUSH
100713: LD_INT 25
100715: PUSH
100716: LD_INT 1
100718: PUSH
100719: EMPTY
100720: LIST
100721: LIST
100722: PUSH
100723: EMPTY
100724: LIST
100725: LIST
100726: PPUSH
100727: CALL_OW 69
100731: ST_TO_ADDR
// if not tmp then
100732: LD_VAR 0 2
100736: NOT
100737: IFFALSE 100741
// exit ;
100739: GO 100890
// un := tmp [ rand ( 1 , tmp ) ] ;
100741: LD_ADDR_VAR 0 3
100745: PUSH
100746: LD_VAR 0 2
100750: PUSH
100751: LD_INT 1
100753: PPUSH
100754: LD_VAR 0 2
100758: PPUSH
100759: CALL_OW 12
100763: ARRAY
100764: ST_TO_ADDR
// if Crawls ( un ) then
100765: LD_VAR 0 3
100769: PPUSH
100770: CALL_OW 318
100774: IFFALSE 100785
// ComWalk ( un ) ;
100776: LD_VAR 0 3
100780: PPUSH
100781: CALL_OW 138
// SetClass ( un , class_mortar ) ;
100785: LD_VAR 0 3
100789: PPUSH
100790: LD_INT 8
100792: PPUSH
100793: CALL_OW 336
// end ; 4 :
100797: GO 100890
100799: LD_INT 4
100801: DOUBLE
100802: EQUAL
100803: IFTRUE 100807
100805: GO 100868
100807: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
100808: LD_ADDR_VAR 0 2
100812: PUSH
100813: LD_INT 22
100815: PUSH
100816: LD_OWVAR 2
100820: PUSH
100821: EMPTY
100822: LIST
100823: LIST
100824: PUSH
100825: LD_INT 30
100827: PUSH
100828: LD_INT 29
100830: PUSH
100831: EMPTY
100832: LIST
100833: LIST
100834: PUSH
100835: EMPTY
100836: LIST
100837: LIST
100838: PPUSH
100839: CALL_OW 69
100843: ST_TO_ADDR
// if not tmp then
100844: LD_VAR 0 2
100848: NOT
100849: IFFALSE 100853
// exit ;
100851: GO 100890
// DestroyUnit ( tmp [ 1 ] ) ;
100853: LD_VAR 0 2
100857: PUSH
100858: LD_INT 1
100860: ARRAY
100861: PPUSH
100862: CALL_OW 65
// end ; 5 .. 7 :
100866: GO 100890
100868: LD_INT 5
100870: DOUBLE
100871: GREATEREQUAL
100872: IFFALSE 100880
100874: LD_INT 7
100876: DOUBLE
100877: LESSEQUAL
100878: IFTRUE 100882
100880: GO 100889
100882: POP
// StreamSibBomb ; end ;
100883: CALL 97170 0 0
100887: GO 100890
100889: POP
// end ;
100890: PPOPN 3
100892: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
100893: LD_EXP 98
100897: PUSH
100898: LD_EXP 148
100902: AND
100903: IFFALSE 101059
100905: GO 100907
100907: DISABLE
100908: LD_INT 0
100910: PPUSH
100911: PPUSH
100912: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
100913: LD_ADDR_VAR 0 2
100917: PUSH
100918: LD_INT 81
100920: PUSH
100921: LD_OWVAR 2
100925: PUSH
100926: EMPTY
100927: LIST
100928: LIST
100929: PUSH
100930: LD_INT 2
100932: PUSH
100933: LD_INT 21
100935: PUSH
100936: LD_INT 1
100938: PUSH
100939: EMPTY
100940: LIST
100941: LIST
100942: PUSH
100943: LD_INT 21
100945: PUSH
100946: LD_INT 2
100948: PUSH
100949: EMPTY
100950: LIST
100951: LIST
100952: PUSH
100953: EMPTY
100954: LIST
100955: LIST
100956: LIST
100957: PUSH
100958: EMPTY
100959: LIST
100960: LIST
100961: PPUSH
100962: CALL_OW 69
100966: ST_TO_ADDR
// if not tmp then
100967: LD_VAR 0 2
100971: NOT
100972: IFFALSE 100976
// exit ;
100974: GO 101059
// p := 0 ;
100976: LD_ADDR_VAR 0 3
100980: PUSH
100981: LD_INT 0
100983: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
100984: LD_INT 35
100986: PPUSH
100987: CALL_OW 67
// p := p + 1 ;
100991: LD_ADDR_VAR 0 3
100995: PUSH
100996: LD_VAR 0 3
101000: PUSH
101001: LD_INT 1
101003: PLUS
101004: ST_TO_ADDR
// for i in tmp do
101005: LD_ADDR_VAR 0 1
101009: PUSH
101010: LD_VAR 0 2
101014: PUSH
101015: FOR_IN
101016: IFFALSE 101047
// if GetLives ( i ) < 1000 then
101018: LD_VAR 0 1
101022: PPUSH
101023: CALL_OW 256
101027: PUSH
101028: LD_INT 1000
101030: LESS
101031: IFFALSE 101045
// SetLives ( i , 1000 ) ;
101033: LD_VAR 0 1
101037: PPUSH
101038: LD_INT 1000
101040: PPUSH
101041: CALL_OW 234
101045: GO 101015
101047: POP
101048: POP
// until p > 20 ;
101049: LD_VAR 0 3
101053: PUSH
101054: LD_INT 20
101056: GREATER
101057: IFFALSE 100984
// end ;
101059: PPOPN 3
101061: END
// every 0 0$1 trigger StreamModeActive and sTime do
101062: LD_EXP 98
101066: PUSH
101067: LD_EXP 149
101071: AND
101072: IFFALSE 101107
101074: GO 101076
101076: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
101077: LD_INT 28
101079: PPUSH
101080: LD_OWVAR 2
101084: PPUSH
101085: LD_INT 2
101087: PPUSH
101088: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
101092: LD_INT 30
101094: PPUSH
101095: LD_OWVAR 2
101099: PPUSH
101100: LD_INT 2
101102: PPUSH
101103: CALL_OW 322
// end ;
101107: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
101108: LD_EXP 98
101112: PUSH
101113: LD_EXP 150
101117: AND
101118: IFFALSE 101239
101120: GO 101122
101122: DISABLE
101123: LD_INT 0
101125: PPUSH
101126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
101127: LD_ADDR_VAR 0 2
101131: PUSH
101132: LD_INT 22
101134: PUSH
101135: LD_OWVAR 2
101139: PUSH
101140: EMPTY
101141: LIST
101142: LIST
101143: PUSH
101144: LD_INT 21
101146: PUSH
101147: LD_INT 1
101149: PUSH
101150: EMPTY
101151: LIST
101152: LIST
101153: PUSH
101154: LD_INT 3
101156: PUSH
101157: LD_INT 23
101159: PUSH
101160: LD_INT 0
101162: PUSH
101163: EMPTY
101164: LIST
101165: LIST
101166: PUSH
101167: EMPTY
101168: LIST
101169: LIST
101170: PUSH
101171: EMPTY
101172: LIST
101173: LIST
101174: LIST
101175: PPUSH
101176: CALL_OW 69
101180: ST_TO_ADDR
// if not tmp then
101181: LD_VAR 0 2
101185: NOT
101186: IFFALSE 101190
// exit ;
101188: GO 101239
// for i in tmp do
101190: LD_ADDR_VAR 0 1
101194: PUSH
101195: LD_VAR 0 2
101199: PUSH
101200: FOR_IN
101201: IFFALSE 101237
// begin if Crawls ( i ) then
101203: LD_VAR 0 1
101207: PPUSH
101208: CALL_OW 318
101212: IFFALSE 101223
// ComWalk ( i ) ;
101214: LD_VAR 0 1
101218: PPUSH
101219: CALL_OW 138
// SetClass ( i , 2 ) ;
101223: LD_VAR 0 1
101227: PPUSH
101228: LD_INT 2
101230: PPUSH
101231: CALL_OW 336
// end ;
101235: GO 101200
101237: POP
101238: POP
// end ;
101239: PPOPN 2
101241: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
101242: LD_EXP 98
101246: PUSH
101247: LD_EXP 151
101251: AND
101252: IFFALSE 101533
101254: GO 101256
101256: DISABLE
101257: LD_INT 0
101259: PPUSH
101260: PPUSH
101261: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
101262: LD_OWVAR 2
101266: PPUSH
101267: LD_INT 9
101269: PPUSH
101270: LD_INT 1
101272: PPUSH
101273: LD_INT 1
101275: PPUSH
101276: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
101280: LD_INT 9
101282: PPUSH
101283: LD_OWVAR 2
101287: PPUSH
101288: CALL_OW 343
// uc_side := 9 ;
101292: LD_ADDR_OWVAR 20
101296: PUSH
101297: LD_INT 9
101299: ST_TO_ADDR
// uc_nation := 2 ;
101300: LD_ADDR_OWVAR 21
101304: PUSH
101305: LD_INT 2
101307: ST_TO_ADDR
// hc_name := Dark Warrior ;
101308: LD_ADDR_OWVAR 26
101312: PUSH
101313: LD_STRING Dark Warrior
101315: ST_TO_ADDR
// hc_gallery :=  ;
101316: LD_ADDR_OWVAR 33
101320: PUSH
101321: LD_STRING 
101323: ST_TO_ADDR
// hc_noskilllimit := true ;
101324: LD_ADDR_OWVAR 76
101328: PUSH
101329: LD_INT 1
101331: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
101332: LD_ADDR_OWVAR 31
101336: PUSH
101337: LD_INT 30
101339: PUSH
101340: LD_INT 30
101342: PUSH
101343: LD_INT 30
101345: PUSH
101346: LD_INT 30
101348: PUSH
101349: EMPTY
101350: LIST
101351: LIST
101352: LIST
101353: LIST
101354: ST_TO_ADDR
// un := CreateHuman ;
101355: LD_ADDR_VAR 0 3
101359: PUSH
101360: CALL_OW 44
101364: ST_TO_ADDR
// hc_noskilllimit := false ;
101365: LD_ADDR_OWVAR 76
101369: PUSH
101370: LD_INT 0
101372: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
101373: LD_VAR 0 3
101377: PPUSH
101378: LD_INT 1
101380: PPUSH
101381: CALL_OW 51
// p := 0 ;
101385: LD_ADDR_VAR 0 2
101389: PUSH
101390: LD_INT 0
101392: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
101393: LD_INT 35
101395: PPUSH
101396: CALL_OW 67
// p := p + 1 ;
101400: LD_ADDR_VAR 0 2
101404: PUSH
101405: LD_VAR 0 2
101409: PUSH
101410: LD_INT 1
101412: PLUS
101413: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
101414: LD_VAR 0 3
101418: PPUSH
101419: CALL_OW 256
101423: PUSH
101424: LD_INT 1000
101426: LESS
101427: IFFALSE 101441
// SetLives ( un , 1000 ) ;
101429: LD_VAR 0 3
101433: PPUSH
101434: LD_INT 1000
101436: PPUSH
101437: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
101441: LD_VAR 0 3
101445: PPUSH
101446: LD_INT 81
101448: PUSH
101449: LD_OWVAR 2
101453: PUSH
101454: EMPTY
101455: LIST
101456: LIST
101457: PUSH
101458: LD_INT 91
101460: PUSH
101461: LD_VAR 0 3
101465: PUSH
101466: LD_INT 30
101468: PUSH
101469: EMPTY
101470: LIST
101471: LIST
101472: LIST
101473: PUSH
101474: EMPTY
101475: LIST
101476: LIST
101477: PPUSH
101478: CALL_OW 69
101482: PPUSH
101483: LD_VAR 0 3
101487: PPUSH
101488: CALL_OW 74
101492: PPUSH
101493: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
101497: LD_VAR 0 2
101501: PUSH
101502: LD_INT 60
101504: GREATER
101505: PUSH
101506: LD_VAR 0 3
101510: PPUSH
101511: CALL_OW 301
101515: OR
101516: IFFALSE 101393
// if un then
101518: LD_VAR 0 3
101522: IFFALSE 101533
// RemoveUnit ( un ) ;
101524: LD_VAR 0 3
101528: PPUSH
101529: CALL_OW 64
// end ; end_of_file
101533: PPOPN 3
101535: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
101536: LD_INT 0
101538: PPUSH
101539: PPUSH
101540: PPUSH
101541: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
101542: LD_VAR 0 1
101546: PPUSH
101547: CALL_OW 264
101551: PUSH
101552: LD_EXP 97
101556: EQUAL
101557: IFFALSE 101629
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
101559: LD_INT 68
101561: PPUSH
101562: LD_VAR 0 1
101566: PPUSH
101567: CALL_OW 255
101571: PPUSH
101572: CALL_OW 321
101576: PUSH
101577: LD_INT 2
101579: EQUAL
101580: IFFALSE 101592
// eff := 70 else
101582: LD_ADDR_VAR 0 4
101586: PUSH
101587: LD_INT 70
101589: ST_TO_ADDR
101590: GO 101600
// eff := 30 ;
101592: LD_ADDR_VAR 0 4
101596: PUSH
101597: LD_INT 30
101599: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
101600: LD_VAR 0 1
101604: PPUSH
101605: CALL_OW 250
101609: PPUSH
101610: LD_VAR 0 1
101614: PPUSH
101615: CALL_OW 251
101619: PPUSH
101620: LD_VAR 0 4
101624: PPUSH
101625: CALL_OW 495
// end ; end ;
101629: LD_VAR 0 2
101633: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
101634: LD_INT 0
101636: PPUSH
// end ;
101637: LD_VAR 0 4
101641: RET
// export function SOS_Command ( cmd ) ; begin
101642: LD_INT 0
101644: PPUSH
// end ;
101645: LD_VAR 0 2
101649: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
101650: LD_VAR 0 1
101654: PUSH
101655: LD_INT 255
101657: EQUAL
101658: PUSH
101659: LD_VAR 0 2
101663: PPUSH
101664: CALL_OW 264
101668: PUSH
101669: LD_INT 14
101671: PUSH
101672: LD_INT 53
101674: PUSH
101675: EMPTY
101676: LIST
101677: LIST
101678: IN
101679: AND
101680: PUSH
101681: LD_VAR 0 4
101685: PPUSH
101686: LD_VAR 0 5
101690: PPUSH
101691: CALL_OW 488
101695: AND
101696: IFFALSE 101720
// CutTreeXYR ( unit , x , y , 12 ) ;
101698: LD_VAR 0 2
101702: PPUSH
101703: LD_VAR 0 4
101707: PPUSH
101708: LD_VAR 0 5
101712: PPUSH
101713: LD_INT 12
101715: PPUSH
101716: CALL 101723 0 4
// end ;
101720: PPOPN 5
101722: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
101723: LD_INT 0
101725: PPUSH
101726: PPUSH
101727: PPUSH
101728: PPUSH
101729: PPUSH
101730: PPUSH
101731: PPUSH
101732: PPUSH
101733: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
101734: LD_VAR 0 1
101738: NOT
101739: PUSH
101740: LD_VAR 0 2
101744: PPUSH
101745: LD_VAR 0 3
101749: PPUSH
101750: CALL_OW 488
101754: NOT
101755: OR
101756: PUSH
101757: LD_VAR 0 4
101761: NOT
101762: OR
101763: IFFALSE 101767
// exit ;
101765: GO 102107
// list := [ ] ;
101767: LD_ADDR_VAR 0 13
101771: PUSH
101772: EMPTY
101773: ST_TO_ADDR
// if x - r < 0 then
101774: LD_VAR 0 2
101778: PUSH
101779: LD_VAR 0 4
101783: MINUS
101784: PUSH
101785: LD_INT 0
101787: LESS
101788: IFFALSE 101800
// min_x := 0 else
101790: LD_ADDR_VAR 0 7
101794: PUSH
101795: LD_INT 0
101797: ST_TO_ADDR
101798: GO 101816
// min_x := x - r ;
101800: LD_ADDR_VAR 0 7
101804: PUSH
101805: LD_VAR 0 2
101809: PUSH
101810: LD_VAR 0 4
101814: MINUS
101815: ST_TO_ADDR
// if y - r < 0 then
101816: LD_VAR 0 3
101820: PUSH
101821: LD_VAR 0 4
101825: MINUS
101826: PUSH
101827: LD_INT 0
101829: LESS
101830: IFFALSE 101842
// min_y := 0 else
101832: LD_ADDR_VAR 0 8
101836: PUSH
101837: LD_INT 0
101839: ST_TO_ADDR
101840: GO 101858
// min_y := y - r ;
101842: LD_ADDR_VAR 0 8
101846: PUSH
101847: LD_VAR 0 3
101851: PUSH
101852: LD_VAR 0 4
101856: MINUS
101857: ST_TO_ADDR
// max_x := x + r ;
101858: LD_ADDR_VAR 0 9
101862: PUSH
101863: LD_VAR 0 2
101867: PUSH
101868: LD_VAR 0 4
101872: PLUS
101873: ST_TO_ADDR
// max_y := y + r ;
101874: LD_ADDR_VAR 0 10
101878: PUSH
101879: LD_VAR 0 3
101883: PUSH
101884: LD_VAR 0 4
101888: PLUS
101889: ST_TO_ADDR
// for _x = min_x to max_x do
101890: LD_ADDR_VAR 0 11
101894: PUSH
101895: DOUBLE
101896: LD_VAR 0 7
101900: DEC
101901: ST_TO_ADDR
101902: LD_VAR 0 9
101906: PUSH
101907: FOR_TO
101908: IFFALSE 102025
// for _y = min_y to max_y do
101910: LD_ADDR_VAR 0 12
101914: PUSH
101915: DOUBLE
101916: LD_VAR 0 8
101920: DEC
101921: ST_TO_ADDR
101922: LD_VAR 0 10
101926: PUSH
101927: FOR_TO
101928: IFFALSE 102021
// begin if not ValidHex ( _x , _y ) then
101930: LD_VAR 0 11
101934: PPUSH
101935: LD_VAR 0 12
101939: PPUSH
101940: CALL_OW 488
101944: NOT
101945: IFFALSE 101949
// continue ;
101947: GO 101927
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
101949: LD_VAR 0 11
101953: PPUSH
101954: LD_VAR 0 12
101958: PPUSH
101959: CALL_OW 351
101963: PUSH
101964: LD_VAR 0 11
101968: PPUSH
101969: LD_VAR 0 12
101973: PPUSH
101974: CALL_OW 554
101978: AND
101979: IFFALSE 102019
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
101981: LD_ADDR_VAR 0 13
101985: PUSH
101986: LD_VAR 0 13
101990: PPUSH
101991: LD_VAR 0 13
101995: PUSH
101996: LD_INT 1
101998: PLUS
101999: PPUSH
102000: LD_VAR 0 11
102004: PUSH
102005: LD_VAR 0 12
102009: PUSH
102010: EMPTY
102011: LIST
102012: LIST
102013: PPUSH
102014: CALL_OW 2
102018: ST_TO_ADDR
// end ;
102019: GO 101927
102021: POP
102022: POP
102023: GO 101907
102025: POP
102026: POP
// if not list then
102027: LD_VAR 0 13
102031: NOT
102032: IFFALSE 102036
// exit ;
102034: GO 102107
// for i in list do
102036: LD_ADDR_VAR 0 6
102040: PUSH
102041: LD_VAR 0 13
102045: PUSH
102046: FOR_IN
102047: IFFALSE 102105
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
102049: LD_VAR 0 1
102053: PPUSH
102054: LD_STRING M
102056: PUSH
102057: LD_VAR 0 6
102061: PUSH
102062: LD_INT 1
102064: ARRAY
102065: PUSH
102066: LD_VAR 0 6
102070: PUSH
102071: LD_INT 2
102073: ARRAY
102074: PUSH
102075: LD_INT 0
102077: PUSH
102078: LD_INT 0
102080: PUSH
102081: LD_INT 0
102083: PUSH
102084: LD_INT 0
102086: PUSH
102087: EMPTY
102088: LIST
102089: LIST
102090: LIST
102091: LIST
102092: LIST
102093: LIST
102094: LIST
102095: PUSH
102096: EMPTY
102097: LIST
102098: PPUSH
102099: CALL_OW 447
102103: GO 102046
102105: POP
102106: POP
// end ;
102107: LD_VAR 0 5
102111: RET
